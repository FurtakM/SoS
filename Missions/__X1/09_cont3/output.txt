// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 10268 0 0
// LoadEnv ;
  16: CALL 9827 0 0
// LoadCam ;
  20: CALL 10532 0 0
// LoadTech ;
  24: CALL 10608 0 0
// LoadBase ;
  28: CALL 11094 0 0
// PrepareArabian ;
  32: CALL 186 0 0
// PrepareRussian ;
  36: CALL 3050 0 0
// Action ;
  40: CALL 12398 0 0
// end ;
  44: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; export wave , strength ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 09c_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 09c_
  63: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 09_tick
  71: PPUSH
  72: LD_INT 31500
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 09c_tick
  87: PPUSH
  88: LD_INT 10500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// playerInBase := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// kamikazeTrained := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// apeDriver := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 120
 127: PUSH
 128: LD_INT 150
 130: PUSH
 131: LD_INT 180
 133: PUSH
 134: LD_INT 220
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// missionTime := 0 0$00 ;
 149: LD_ADDR_EXP 9
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// ruDefeated := false ;
 157: LD_ADDR_EXP 10
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// wave := 0 ;
 165: LD_ADDR_EXP 11
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// strength := 0 ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ; end_of_file
 181: LD_VAR 0 1
 185: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 197: LD_STRING 05_DrugsTested
 199: PPUSH
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 30
 209: IFFALSE 224
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 211: LD_INT 5
 213: PPUSH
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 2
 219: PPUSH
 220: CALL_OW 322
// uc_side := 2 ;
 224: LD_ADDR_OWVAR 20
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// uc_nation := nation_nature ;
 232: LD_ADDR_OWVAR 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 240: LD_ADDR_VAR 0 3
 244: PUSH
 245: LD_STRING 09_apes
 247: PPUSH
 248: CALL_OW 31
 252: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 253: LD_ADDR_VAR 0 6
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 30
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: ST_TO_ADDR
// if apes then
 305: LD_VAR 0 3
 309: IFFALSE 388
// for i in apes do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: LD_VAR 0 3
 320: PUSH
 321: FOR_IN
 322: IFFALSE 386
// if UnitsInside ( b [ 1 ] ) < 6 then
 324: LD_VAR 0 6
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: CALL_OW 313
 337: PUSH
 338: LD_INT 6
 340: LESS
 341: IFFALSE 363
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_VAR 0 6
 352: PUSH
 353: LD_INT 1
 355: ARRAY
 356: PPUSH
 357: CALL_OW 52
 361: GO 384
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 363: LD_VAR 0 2
 367: PPUSH
 368: LD_INT 82
 370: PPUSH
 371: LD_INT 27
 373: PPUSH
 374: LD_INT 6
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 50
 384: GO 321
 386: POP
 387: POP
// InitHC_All ( ) ;
 388: CALL_OW 584
// uc_nation := nation_arabian ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 2
 399: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 400: LD_ADDR_VAR 0 6
 404: PUSH
 405: LD_INT 22
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 5
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 474: LD_ADDR_EXP 33
 478: PUSH
 479: LD_STRING Rolf
 481: PPUSH
 482: LD_EXP 1
 486: NOT
 487: PPUSH
 488: LD_STRING 06_
 490: PPUSH
 491: CALL 15488 0 3
 495: ST_TO_ADDR
// if Rolf then
 496: LD_EXP 33
 500: IFFALSE 709
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 502: LD_ADDR_EXP 32
 506: PUSH
 507: LD_STRING 06_RolfSquad
 509: PPUSH
 510: CALL_OW 31
 514: ST_TO_ADDR
// if rolfSquad < 3 then
 515: LD_EXP 32
 519: PUSH
 520: LD_INT 3
 522: LESS
 523: IFFALSE 586
// for i := 1 to 3 - Count ( rolfSquad ) do
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: DOUBLE
 531: LD_INT 1
 533: DEC
 534: ST_TO_ADDR
 535: LD_INT 3
 537: PUSH
 538: LD_EXP 32
 542: PPUSH
 543: CALL 17590 0 1
 547: MINUS
 548: PUSH
 549: FOR_TO
 550: IFFALSE 584
// begin PrepareSoldier ( false , 4 ) ;
 552: LD_INT 0
 554: PPUSH
 555: LD_INT 4
 557: PPUSH
 558: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 562: LD_ADDR_EXP 32
 566: PUSH
 567: LD_EXP 32
 571: PPUSH
 572: CALL_OW 44
 576: PPUSH
 577: CALL 53190 0 2
 581: ST_TO_ADDR
// end ;
 582: GO 549
 584: POP
 585: POP
// if b then
 586: LD_VAR 0 6
 590: IFFALSE 665
// begin for i in rolfSquad union Rolf do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_EXP 32
 601: PUSH
 602: LD_EXP 33
 606: UNION
 607: PUSH
 608: FOR_IN
 609: IFFALSE 661
// begin SetClass ( i , 1 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_VAR 0 6
 632: PPUSH
 633: LD_INT 3
 635: PUSH
 636: LD_INT 62
 638: PUSH
 639: EMPTY
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 52
// end ;
 659: GO 608
 661: POP
 662: POP
// end else
 663: GO 709
// for i in rolfSquad union Rolf do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_EXP 32
 674: PUSH
 675: LD_EXP 33
 679: UNION
 680: PUSH
 681: FOR_IN
 682: IFFALSE 707
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 684: LD_VAR 0 2
 688: PPUSH
 689: LD_INT 82
 691: PPUSH
 692: LD_INT 27
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 50
 705: GO 681
 707: POP
 708: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 13
 713: PUSH
 714: LD_STRING Heike
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 15488 0 3
 732: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 16
 737: PUSH
 738: LD_STRING Ibrahim
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 15488 0 3
 756: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 14
 761: PUSH
 762: LD_STRING Givi
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 15488 0 3
 780: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 17
 785: PUSH
 786: LD_STRING Kamil
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 15488 0 3
 804: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 18
 809: PUSH
 810: LD_STRING Kaia
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 15488 0 3
 828: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 19
 833: PUSH
 834: LD_STRING Sophia
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 15488 0 3
 852: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 20
 857: PUSH
 858: LD_STRING Markov
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 15488 0 3
 876: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 23
 881: PUSH
 882: LD_STRING Aviradze
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 15488 0 3
 900: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 22
 905: PUSH
 906: LD_STRING Kurt
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 15488 0 3
 924: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_STRING Mike
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 15488 0 3
 948: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 21
 953: PUSH
 954: LD_STRING Olaf
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 15488 0 3
 972: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 973: LD_ADDR_EXP 30
 977: PUSH
 978: LD_STRING 09c_heikeSecondSquad
 980: PPUSH
 981: CALL_OW 31
 985: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 986: LD_ADDR_EXP 24
 990: PUSH
 991: LD_STRING Schulz
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_EXP 2
1004: PPUSH
1005: CALL 15488 0 3
1009: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
1010: LD_ADDR_EXP 25
1014: PUSH
1015: LD_STRING Basim
1017: PPUSH
1018: LD_EXP 1
1022: NOT
1023: PPUSH
1024: LD_EXP 2
1028: PPUSH
1029: CALL 15488 0 3
1033: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1034: LD_ADDR_EXP 26
1038: PUSH
1039: LD_STRING Lemmy
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 2
1052: PPUSH
1053: CALL 15488 0 3
1057: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1058: LD_ADDR_EXP 27
1062: PUSH
1063: LD_STRING Mia
1065: PPUSH
1066: LD_EXP 1
1070: NOT
1071: PPUSH
1072: LD_EXP 2
1076: PPUSH
1077: CALL 15488 0 3
1081: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1082: LD_ADDR_EXP 28
1086: PUSH
1087: LD_STRING Nia
1089: PPUSH
1090: LD_EXP 1
1094: NOT
1095: PPUSH
1096: LD_EXP 2
1100: PPUSH
1101: CALL 15488 0 3
1105: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1106: LD_ADDR_EXP 29
1110: PUSH
1111: LD_STRING Jenna
1113: PPUSH
1114: LD_EXP 1
1118: NOT
1119: PPUSH
1120: LD_EXP 2
1124: PPUSH
1125: CALL 15488 0 3
1129: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING 09c_schulzSecondSquad
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// if debug then
1143: LD_EXP 1
1147: IFFALSE 1227
// begin schulzSecondSquad := [ ] ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: EMPTY
1155: ST_TO_ADDR
// for i := 1 to 3 do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_INT 3
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1225
// begin uc_side := 2 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
// uc_nation := nation_arabian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 2
1187: ST_TO_ADDR
// PrepareHuman ( false , i , 0 ) ;
1188: LD_INT 0
1190: PPUSH
1191: LD_VAR 0 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PPUSH
1213: CALL_OW 44
1217: PPUSH
1218: CALL 53190 0 2
1222: ST_TO_ADDR
// end ;
1223: GO 1169
1225: POP
1226: POP
// end ; vehicles := LoadVariable ( 09c_vehicles , [ [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 36 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 41 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 37 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 35 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 34 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 38 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 40 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 39 ] ] ) ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_STRING 09c_vehicles
1234: PPUSH
1235: LD_INT 13
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 28
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 36
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 13
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 28
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 0
1289: PUSH
1290: LD_INT 41
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 13
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: LD_INT 28
1314: PUSH
1315: LD_INT 2
1317: PUSH
1318: LD_INT 0
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 37
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 13
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 28
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 35
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 13
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 28
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: LD_INT 34
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 13
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 28
1416: PUSH
1417: LD_INT 2
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 38
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 13
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 28
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 40
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 13
1475: PUSH
1476: LD_INT 3
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 28
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 39
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 30
1521: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Heike , LoadVariable ( 09c_Heike_ID , - 1 ) , vehicles ) ;
1522: LD_ADDR_VAR 0 9
1526: PUSH
1527: LD_VAR 0 9
1531: PUSH
1532: LD_EXP 13
1536: PPUSH
1537: LD_STRING 09c_Heike_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2764 0 3
1558: DIFF
1559: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Givi , LoadVariable ( 09c_Givi_ID , - 1 ) , vehicles ) ;
1560: LD_ADDR_VAR 0 9
1564: PUSH
1565: LD_VAR 0 9
1569: PUSH
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING 09c_Givi_ID
1577: PPUSH
1578: LD_INT 1
1580: NEG
1581: PPUSH
1582: CALL_OW 30
1586: PPUSH
1587: LD_VAR 0 9
1591: PPUSH
1592: CALL 2764 0 3
1596: DIFF
1597: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mike , LoadVariable ( 09c_Mike_ID , - 1 ) , vehicles ) ;
1598: LD_ADDR_VAR 0 9
1602: PUSH
1603: LD_VAR 0 9
1607: PUSH
1608: LD_EXP 15
1612: PPUSH
1613: LD_STRING 09c_Mike_ID
1615: PPUSH
1616: LD_INT 1
1618: NEG
1619: PPUSH
1620: CALL_OW 30
1624: PPUSH
1625: LD_VAR 0 9
1629: PPUSH
1630: CALL 2764 0 3
1634: DIFF
1635: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Ibrahim , LoadVariable ( 09c_Ibrahim_ID , - 1 ) , vehicles ) ;
1636: LD_ADDR_VAR 0 9
1640: PUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_EXP 16
1650: PPUSH
1651: LD_STRING 09c_Ibrahim_ID
1653: PPUSH
1654: LD_INT 1
1656: NEG
1657: PPUSH
1658: CALL_OW 30
1662: PPUSH
1663: LD_VAR 0 9
1667: PPUSH
1668: CALL 2764 0 3
1672: DIFF
1673: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kamil , LoadVariable ( 09c_Kamil_ID , - 1 ) , vehicles ) ;
1674: LD_ADDR_VAR 0 9
1678: PUSH
1679: LD_VAR 0 9
1683: PUSH
1684: LD_EXP 17
1688: PPUSH
1689: LD_STRING 09c_Kamil_ID
1691: PPUSH
1692: LD_INT 1
1694: NEG
1695: PPUSH
1696: CALL_OW 30
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL 2764 0 3
1710: DIFF
1711: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kaia , LoadVariable ( 09c_Kaia_ID , - 1 ) , vehicles ) ;
1712: LD_ADDR_VAR 0 9
1716: PUSH
1717: LD_VAR 0 9
1721: PUSH
1722: LD_EXP 18
1726: PPUSH
1727: LD_STRING 09c_Kaia_ID
1729: PPUSH
1730: LD_INT 1
1732: NEG
1733: PPUSH
1734: CALL_OW 30
1738: PPUSH
1739: LD_VAR 0 9
1743: PPUSH
1744: CALL 2764 0 3
1748: DIFF
1749: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Sophia , LoadVariable ( 09c_Sophia_ID , - 1 ) , vehicles ) ;
1750: LD_ADDR_VAR 0 9
1754: PUSH
1755: LD_VAR 0 9
1759: PUSH
1760: LD_EXP 19
1764: PPUSH
1765: LD_STRING 09c_Sophia_ID
1767: PPUSH
1768: LD_INT 1
1770: NEG
1771: PPUSH
1772: CALL_OW 30
1776: PPUSH
1777: LD_VAR 0 9
1781: PPUSH
1782: CALL 2764 0 3
1786: DIFF
1787: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Markov , LoadVariable ( 09c_Markov_ID , - 1 ) , vehicles ) ;
1788: LD_ADDR_VAR 0 9
1792: PUSH
1793: LD_VAR 0 9
1797: PUSH
1798: LD_EXP 20
1802: PPUSH
1803: LD_STRING 09c_Markov_ID
1805: PPUSH
1806: LD_INT 1
1808: NEG
1809: PPUSH
1810: CALL_OW 30
1814: PPUSH
1815: LD_VAR 0 9
1819: PPUSH
1820: CALL 2764 0 3
1824: DIFF
1825: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Olaf , LoadVariable ( 09c_Olaf_ID , - 1 ) , vehicles ) ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_VAR 0 9
1835: PUSH
1836: LD_EXP 21
1840: PPUSH
1841: LD_STRING 09c_Olaf_ID
1843: PPUSH
1844: LD_INT 1
1846: NEG
1847: PPUSH
1848: CALL_OW 30
1852: PPUSH
1853: LD_VAR 0 9
1857: PPUSH
1858: CALL 2764 0 3
1862: DIFF
1863: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kurt , LoadVariable ( 09c_Kurt_ID , - 1 ) , vehicles ) ;
1864: LD_ADDR_VAR 0 9
1868: PUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_STRING 09c_Kurt_ID
1881: PPUSH
1882: LD_INT 1
1884: NEG
1885: PPUSH
1886: CALL_OW 30
1890: PPUSH
1891: LD_VAR 0 9
1895: PPUSH
1896: CALL 2764 0 3
1900: DIFF
1901: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Aviradze , LoadVariable ( 09c_Aviradze_ID , - 1 ) , vehicles ) ;
1902: LD_ADDR_VAR 0 9
1906: PUSH
1907: LD_VAR 0 9
1911: PUSH
1912: LD_EXP 23
1916: PPUSH
1917: LD_STRING 09c_Aviradze_ID
1919: PPUSH
1920: LD_INT 1
1922: NEG
1923: PPUSH
1924: CALL_OW 30
1928: PPUSH
1929: LD_VAR 0 9
1933: PPUSH
1934: CALL 2764 0 3
1938: DIFF
1939: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Schulz , LoadVariable ( 09c_Schulz_ID , 34 ) , vehicles ) ;
1940: LD_ADDR_VAR 0 9
1944: PUSH
1945: LD_VAR 0 9
1949: PUSH
1950: LD_EXP 24
1954: PPUSH
1955: LD_STRING 09c_Schulz_ID
1957: PPUSH
1958: LD_INT 34
1960: PPUSH
1961: CALL_OW 30
1965: PPUSH
1966: LD_VAR 0 9
1970: PPUSH
1971: CALL 2764 0 3
1975: DIFF
1976: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Lemmy , LoadVariable ( 09c_Lemmy_ID , 35 ) , vehicles ) ;
1977: LD_ADDR_VAR 0 9
1981: PUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_EXP 26
1991: PPUSH
1992: LD_STRING 09c_Lemmy_ID
1994: PPUSH
1995: LD_INT 35
1997: PPUSH
1998: CALL_OW 30
2002: PPUSH
2003: LD_VAR 0 9
2007: PPUSH
2008: CALL 2764 0 3
2012: DIFF
2013: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mia , LoadVariable ( 09c_Mia_ID , 36 ) , vehicles ) ;
2014: LD_ADDR_VAR 0 9
2018: PUSH
2019: LD_VAR 0 9
2023: PUSH
2024: LD_EXP 27
2028: PPUSH
2029: LD_STRING 09c_Mia_ID
2031: PPUSH
2032: LD_INT 36
2034: PPUSH
2035: CALL_OW 30
2039: PPUSH
2040: LD_VAR 0 9
2044: PPUSH
2045: CALL 2764 0 3
2049: DIFF
2050: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Nia , LoadVariable ( 09c_Nia_ID , 37 ) , vehicles ) ;
2051: LD_ADDR_VAR 0 9
2055: PUSH
2056: LD_VAR 0 9
2060: PUSH
2061: LD_EXP 28
2065: PPUSH
2066: LD_STRING 09c_Nia_ID
2068: PPUSH
2069: LD_INT 37
2071: PPUSH
2072: CALL_OW 30
2076: PPUSH
2077: LD_VAR 0 9
2081: PPUSH
2082: CALL 2764 0 3
2086: DIFF
2087: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Jenna , LoadVariable ( 09c_Jenna_ID , 38 ) , vehicles ) ;
2088: LD_ADDR_VAR 0 9
2092: PUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_EXP 29
2102: PPUSH
2103: LD_STRING 09c_Jenna_ID
2105: PPUSH
2106: LD_INT 38
2108: PPUSH
2109: CALL_OW 30
2113: PPUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: CALL 2764 0 3
2123: DIFF
2124: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Basim , LoadVariable ( 09c_Basim_ID , - 1 ) , vehicles ) ;
2125: LD_ADDR_VAR 0 9
2129: PUSH
2130: LD_VAR 0 9
2134: PUSH
2135: LD_EXP 25
2139: PPUSH
2140: LD_STRING 09c_Basim_ID
2142: PPUSH
2143: LD_INT 1
2145: NEG
2146: PPUSH
2147: CALL_OW 30
2151: PPUSH
2152: LD_VAR 0 9
2156: PPUSH
2157: CALL 2764 0 3
2161: DIFF
2162: ST_TO_ADDR
// for i := 1 to schulzSecondSquad do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_EXP 31
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2238
// vehicles := vehicles diff SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 38 + i ) , vehicles ) ;
2181: LD_ADDR_VAR 0 9
2185: PUSH
2186: LD_VAR 0 9
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_VAR 0 2
2200: ARRAY
2201: PPUSH
2202: LD_STRING 09c_random_ID_
2204: PUSH
2205: LD_VAR 0 2
2209: STR
2210: PPUSH
2211: LD_INT 38
2213: PUSH
2214: LD_VAR 0 2
2218: PLUS
2219: PPUSH
2220: CALL_OW 30
2224: PPUSH
2225: LD_VAR 0 9
2229: PPUSH
2230: CALL 2764 0 3
2234: DIFF
2235: ST_TO_ADDR
2236: GO 2178
2238: POP
2239: POP
// for i := 1 to heikeSecondSquad do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 30
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2310
// vehicles := vehicles diff SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_hrandom_ID_ & i , - 1 ) , vehicles ) ;
2258: LD_ADDR_VAR 0 9
2262: PUSH
2263: LD_VAR 0 9
2267: PUSH
2268: LD_EXP 30
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_STRING 09c_hrandom_ID_
2281: PUSH
2282: LD_VAR 0 2
2286: STR
2287: PPUSH
2288: LD_INT 1
2290: NEG
2291: PPUSH
2292: CALL_OW 30
2296: PPUSH
2297: LD_VAR 0 9
2301: PPUSH
2302: CALL 2764 0 3
2306: DIFF
2307: ST_TO_ADDR
2308: GO 2255
2310: POP
2311: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2312: LD_INT 22
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 34
2324: PUSH
2325: LD_INT 31
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: IFFALSE 2543
// begin for j := Count ( vehicles ) downto 1 do
2342: LD_ADDR_VAR 0 7
2346: PUSH
2347: DOUBLE
2348: LD_VAR 0 9
2352: PPUSH
2353: CALL 17590 0 1
2357: INC
2358: ST_TO_ADDR
2359: LD_INT 1
2361: PUSH
2362: FOR_DOWNTO
2363: IFFALSE 2541
// begin i := vehicles [ j ] ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 9
2374: PUSH
2375: LD_VAR 0 7
2379: ARRAY
2380: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2381: LD_VAR 0 2
2385: PUSH
2386: LD_INT 3
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: IFFALSE 2539
// begin uc_side := 2 ;
2395: LD_ADDR_OWVAR 20
2399: PUSH
2400: LD_INT 2
2402: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2403: LD_ADDR_OWVAR 21
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 5
2415: ARRAY
2416: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 2
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 6
2460: ARRAY
2461: PPUSH
2462: CALL 20328 0 5
// veh := CreateVehicle ;
2466: LD_ADDR_VAR 0 8
2470: PUSH
2471: CALL_OW 45
2475: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2488: LD_VAR 0 8
2492: PPUSH
2493: LD_INT 7
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2503: LD_ADDR_VAR 0 9
2507: PUSH
2508: LD_VAR 0 9
2512: PPUSH
2513: LD_VAR 0 7
2517: PPUSH
2518: CALL_OW 3
2522: ST_TO_ADDR
// Connect ( veh ) ;
2523: LD_VAR 0 8
2527: PPUSH
2528: CALL 23796 0 1
// wait ( 0 0$0.3 ) ;
2532: LD_INT 10
2534: PPUSH
2535: CALL_OW 67
// end ; end ;
2539: GO 2362
2541: POP
2542: POP
// end ; vehicles := LoadVariable ( 09_otherVehicles , [ ] ) ;
2543: LD_ADDR_VAR 0 9
2547: PUSH
2548: LD_STRING 09_otherVehicles
2550: PPUSH
2551: EMPTY
2552: PPUSH
2553: CALL_OW 30
2557: ST_TO_ADDR
// if vehicles then
2558: LD_VAR 0 9
2562: IFFALSE 2759
// begin for i in vehicles do
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_VAR 0 9
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2757
// begin uc_side := 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 5
2597: ARRAY
2598: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 2
2612: PUSH
2613: LD_INT 2
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 2
2621: PUSH
2622: LD_INT 3
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 4
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 6
2642: ARRAY
2643: PPUSH
2644: CALL 20328 0 5
// veh := CreateVehicle ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2658: LD_VAR 0 8
2662: PPUSH
2663: LD_INT 5
2665: PPUSH
2666: CALL_OW 233
// if i [ 7 ] then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 7
2677: ARRAY
2678: IFFALSE 2698
// SetMark ( veh , i [ 7 ] ) ;
2680: LD_VAR 0 8
2684: PPUSH
2685: LD_VAR 0 2
2689: PUSH
2690: LD_INT 7
2692: ARRAY
2693: PPUSH
2694: CALL_OW 242
// PlaceUnitXYD ( veh , i [ 8 ] , i [ 9 ] , i [ 10 ] , false ) ;
2698: LD_VAR 0 8
2702: PPUSH
2703: LD_VAR 0 2
2707: PUSH
2708: LD_INT 8
2710: ARRAY
2711: PPUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 9
2719: ARRAY
2720: PPUSH
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 10
2728: ARRAY
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: CALL 55330 0 5
// SetFuel ( veh , i [ 6 ] ) ;
2737: LD_VAR 0 8
2741: PPUSH
2742: LD_VAR 0 2
2746: PUSH
2747: LD_INT 6
2749: ARRAY
2750: PPUSH
2751: CALL_OW 240
// end ;
2755: GO 2574
2757: POP
2758: POP
// end ; end ;
2759: LD_VAR 0 1
2763: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
// for i in vehicles do
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3016
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 8
2789: ARRAY
2790: PUSH
2791: LD_VAR 0 2
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 5
2801: PUSH
2802: LD_INT 3
2804: ARRAY
2805: PUSH
2806: LD_INT 1
2808: EQUAL
2809: AND
2810: IFFALSE 3014
// begin result := i ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_VAR 0 5
2821: ST_TO_ADDR
// uc_side := 2 ;
2822: LD_ADDR_OWVAR 20
2826: PUSH
2827: LD_INT 2
2829: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2830: LD_ADDR_OWVAR 21
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 5
2842: ARRAY
2843: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 1
2851: ARRAY
2852: PPUSH
2853: LD_VAR 0 5
2857: PUSH
2858: LD_INT 2
2860: ARRAY
2861: PPUSH
2862: LD_VAR 0 5
2866: PUSH
2867: LD_INT 3
2869: ARRAY
2870: PPUSH
2871: LD_VAR 0 5
2875: PUSH
2876: LD_INT 4
2878: ARRAY
2879: PPUSH
2880: LD_VAR 0 5
2884: PUSH
2885: LD_INT 6
2887: ARRAY
2888: PPUSH
2889: CALL 20328 0 5
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2903: LD_VAR 0 6
2907: PPUSH
2908: LD_INT 5
2910: PPUSH
2911: CALL_OW 233
// if i [ 7 ] < 0 then
2915: LD_VAR 0 5
2919: PUSH
2920: LD_INT 7
2922: ARRAY
2923: PUSH
2924: LD_INT 0
2926: LESS
2927: IFFALSE 2947
// SetMark ( veh , i [ 7 ] ) ;
2929: LD_VAR 0 6
2933: PPUSH
2934: LD_VAR 0 5
2938: PUSH
2939: LD_INT 7
2941: ARRAY
2942: PPUSH
2943: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2947: LD_VAR 0 6
2951: PPUSH
2952: LD_INT 7
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL 52095 0 3
2962: NOT
2963: IFFALSE 2996
// begin SetDir ( unit , 5 ) ;
2965: LD_VAR 0 1
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2977: LD_VAR 0 1
2981: PPUSH
2982: LD_INT 8
2984: PPUSH
2985: LD_INT 0
2987: PPUSH
2988: CALL_OW 49
// exit ;
2992: POP
2993: POP
2994: GO 3045
// end ; PlaceHumanInUnit ( unit , veh ) ;
2996: LD_VAR 0 1
3000: PPUSH
3001: LD_VAR 0 6
3005: PPUSH
3006: CALL_OW 52
// exit ;
3010: POP
3011: POP
3012: GO 3045
// end ;
3014: GO 2779
3016: POP
3017: POP
// SetDir ( unit , 5 ) ;
3018: LD_VAR 0 1
3022: PPUSH
3023: LD_INT 5
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
3030: LD_VAR 0 1
3034: PPUSH
3035: LD_INT 8
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 49
// end ; end_of_file
3045: LD_VAR 0 4
3049: RET
// export function PrepareRussian ; begin
3050: LD_INT 0
3052: PPUSH
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
3053: LD_INT 48
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: LD_INT 2
3061: PPUSH
3062: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
3066: LD_INT 49
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 2
3074: PPUSH
3075: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
3079: LD_INT 50
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
3092: LD_INT 51
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3105: LD_INT 57
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 2
3113: PPUSH
3114: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
3118: LD_INT 48
3120: PPUSH
3121: LD_INT 6
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
3131: LD_INT 49
3133: PPUSH
3134: LD_INT 6
3136: PPUSH
3137: LD_INT 2
3139: PPUSH
3140: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
3144: LD_INT 50
3146: PPUSH
3147: LD_INT 6
3149: PPUSH
3150: LD_INT 2
3152: PPUSH
3153: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
3157: LD_INT 51
3159: PPUSH
3160: LD_INT 6
3162: PPUSH
3163: LD_INT 2
3165: PPUSH
3166: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3170: LD_INT 57
3172: PPUSH
3173: LD_INT 6
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: CALL_OW 322
// if Difficulty >= 2 then
3183: LD_OWVAR 67
3187: PUSH
3188: LD_INT 2
3190: GREATEREQUAL
3191: IFFALSE 3271
// begin SetTech ( tech_Weap2 , 3 , state_researched ) ;
3193: LD_INT 52
3195: PPUSH
3196: LD_INT 3
3198: PPUSH
3199: LD_INT 2
3201: PPUSH
3202: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3206: LD_INT 58
3208: PPUSH
3209: LD_INT 3
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3219: LD_INT 63
3221: PPUSH
3222: LD_INT 3
3224: PPUSH
3225: LD_INT 2
3227: PPUSH
3228: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3232: LD_INT 52
3234: PPUSH
3235: LD_INT 6
3237: PPUSH
3238: LD_INT 2
3240: PPUSH
3241: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3245: LD_INT 58
3247: PPUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
3258: LD_INT 63
3260: PPUSH
3261: LD_INT 6
3263: PPUSH
3264: LD_INT 2
3266: PPUSH
3267: CALL_OW 322
// end ; if Difficulty > 2 then
3271: LD_OWVAR 67
3275: PUSH
3276: LD_INT 2
3278: GREATER
3279: IFFALSE 3359
// begin SetTech ( tech_Weap3 , 3 , state_researched ) ;
3281: LD_INT 53
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: LD_INT 2
3289: PPUSH
3290: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3294: LD_INT 59
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_INT 2
3302: PPUSH
3303: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3307: LD_INT 64
3309: PPUSH
3310: LD_INT 3
3312: PPUSH
3313: LD_INT 2
3315: PPUSH
3316: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
3320: LD_INT 53
3322: PPUSH
3323: LD_INT 6
3325: PPUSH
3326: LD_INT 2
3328: PPUSH
3329: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
3333: LD_INT 59
3335: PPUSH
3336: LD_INT 6
3338: PPUSH
3339: LD_INT 2
3341: PPUSH
3342: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
3346: LD_INT 64
3348: PPUSH
3349: LD_INT 6
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 322
// end ; end ;
3359: LD_VAR 0 1
3363: RET
// export ruForces , ruConstructList , ruTanks ; export function PrepareExtraRussianBase ; var i , j , tmp , un , side , skill , b ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
3370: PPUSH
3371: PPUSH
3372: PPUSH
3373: PPUSH
// side := 6 ;
3374: LD_ADDR_VAR 0 6
3378: PUSH
3379: LD_INT 6
3381: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
3382: LD_ADDR_VAR 0 7
3386: PUSH
3387: LD_INT 7
3389: PUSH
3390: LD_INT 8
3392: PUSH
3393: LD_INT 9
3395: PUSH
3396: LD_INT 10
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_OWVAR 67
3409: ARRAY
3410: ST_TO_ADDR
// ruForces := [ ] ;
3411: LD_ADDR_EXP 34
3415: PUSH
3416: EMPTY
3417: ST_TO_ADDR
// ruConstructList := [ ] ;
3418: LD_ADDR_EXP 35
3422: PUSH
3423: EMPTY
3424: ST_TO_ADDR
// ruTanks := [ ] ;
3425: LD_ADDR_EXP 36
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// tmp := [ [ b_warehouse , 107 , 149 , 4 ] , [ b_oil_mine , 115 , 150 , 4 ] , [ b_factory , 101 , 160 , 0 ] , [ b_ext_computer , 97 , 156 , 2 ] , [ b_ext_siberium , 98 , 160 , 1 ] , [ b_ext_noncombat , 101 , 164 , 0 ] , [ b_ext_gun , 104 , 163 , 5 ] , [ b_ext_rocket , 105 , 160 , 4 ] , [ b_siberite_mine , 128 , 132 , 0 ] , [ b_lab_full , 94 , 142 , 1 , b_lab_weapon , b_lab_spacetime ] , [ b_oil_power , 93 , 137 , 0 ] , [ b_oil_power , 111 , 157 , 0 ] , [ b_oil_power , 109 , 158 , 0 ] , [ b_oil_power , 121 , 150 , 0 ] , [ b_siberite_power , 118 , 151 , 0 ] , [ b_barracks , 97 , 133 , 2 ] , [ b_barracks , 117 , 143 , 4 ] , [ b_turret , 100 , 132 , 2 ] , [ b_turret , 130 , 159 , 4 ] , [ b_turret , 131 , 155 , 4 ] , [ b_turret , 90 , 133 , 2 ] , [ b_turret , 70 , 135 , 3 ] ] ;
3432: LD_ADDR_VAR 0 4
3436: PUSH
3437: LD_INT 1
3439: PUSH
3440: LD_INT 107
3442: PUSH
3443: LD_INT 149
3445: PUSH
3446: LD_INT 4
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 29
3457: PUSH
3458: LD_INT 115
3460: PUSH
3461: LD_INT 150
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 3
3475: PUSH
3476: LD_INT 101
3478: PUSH
3479: LD_INT 160
3481: PUSH
3482: LD_INT 0
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 24
3493: PUSH
3494: LD_INT 97
3496: PUSH
3497: LD_INT 156
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 21
3511: PUSH
3512: LD_INT 98
3514: PUSH
3515: LD_INT 160
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_INT 19
3529: PUSH
3530: LD_INT 101
3532: PUSH
3533: LD_INT 164
3535: PUSH
3536: LD_INT 0
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: PUSH
3545: LD_INT 17
3547: PUSH
3548: LD_INT 104
3550: PUSH
3551: LD_INT 163
3553: PUSH
3554: LD_INT 5
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 18
3565: PUSH
3566: LD_INT 105
3568: PUSH
3569: LD_INT 160
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 30
3583: PUSH
3584: LD_INT 128
3586: PUSH
3587: LD_INT 132
3589: PUSH
3590: LD_INT 0
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 8
3601: PUSH
3602: LD_INT 94
3604: PUSH
3605: LD_INT 142
3607: PUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 10
3613: PUSH
3614: LD_INT 14
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 26
3627: PUSH
3628: LD_INT 93
3630: PUSH
3631: LD_INT 137
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 26
3645: PUSH
3646: LD_INT 111
3648: PUSH
3649: LD_INT 157
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 26
3663: PUSH
3664: LD_INT 109
3666: PUSH
3667: LD_INT 158
3669: PUSH
3670: LD_INT 0
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PUSH
3679: LD_INT 26
3681: PUSH
3682: LD_INT 121
3684: PUSH
3685: LD_INT 150
3687: PUSH
3688: LD_INT 0
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 28
3699: PUSH
3700: LD_INT 118
3702: PUSH
3703: LD_INT 151
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 5
3717: PUSH
3718: LD_INT 97
3720: PUSH
3721: LD_INT 133
3723: PUSH
3724: LD_INT 2
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 5
3735: PUSH
3736: LD_INT 117
3738: PUSH
3739: LD_INT 143
3741: PUSH
3742: LD_INT 4
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 33
3753: PUSH
3754: LD_INT 100
3756: PUSH
3757: LD_INT 132
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 33
3771: PUSH
3772: LD_INT 130
3774: PUSH
3775: LD_INT 159
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 33
3789: PUSH
3790: LD_INT 131
3792: PUSH
3793: LD_INT 155
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 33
3807: PUSH
3808: LD_INT 90
3810: PUSH
3811: LD_INT 133
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 33
3825: PUSH
3826: LD_INT 70
3828: PUSH
3829: LD_INT 135
3831: PUSH
3832: LD_INT 3
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: ST_TO_ADDR
// uc_side := side ;
3865: LD_ADDR_OWVAR 20
3869: PUSH
3870: LD_VAR 0 6
3874: ST_TO_ADDR
// uc_nation := nation_russian ;
3875: LD_ADDR_OWVAR 21
3879: PUSH
3880: LD_INT 3
3882: ST_TO_ADDR
// for i in tmp do
3883: LD_ADDR_VAR 0 2
3887: PUSH
3888: LD_VAR 0 4
3892: PUSH
3893: FOR_IN
3894: IFFALSE 4032
// begin InitBc ;
3896: CALL_OW 21
// bc_type := i [ 1 ] ;
3900: LD_ADDR_OWVAR 42
3904: PUSH
3905: LD_VAR 0 2
3909: PUSH
3910: LD_INT 1
3912: ARRAY
3913: ST_TO_ADDR
// bc_level := 6 ;
3914: LD_ADDR_OWVAR 43
3918: PUSH
3919: LD_INT 6
3921: ST_TO_ADDR
// if i > 4 then
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 4
3929: GREATER
3930: IFFALSE 3960
// begin bc_kind1 := i [ 5 ] ;
3932: LD_ADDR_OWVAR 44
3936: PUSH
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 5
3944: ARRAY
3945: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
3946: LD_ADDR_OWVAR 45
3950: PUSH
3951: LD_VAR 0 2
3955: PUSH
3956: LD_INT 6
3958: ARRAY
3959: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3960: LD_ADDR_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 2
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 3
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 4
3990: ARRAY
3991: PPUSH
3992: CALL_OW 47
3996: ST_TO_ADDR
// if i [ 1 ] in [ b_bunker , b_turret ] then
3997: LD_VAR 0 2
4001: PUSH
4002: LD_INT 1
4004: ARRAY
4005: PUSH
4006: LD_INT 32
4008: PUSH
4009: LD_INT 33
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: IN
4016: IFFALSE 4030
// PlaceWeaponTurret ( b , ru_rocket_launcher ) ;
4018: LD_VAR 0 8
4022: PPUSH
4023: LD_INT 45
4025: PPUSH
4026: CALL_OW 431
// end ;
4030: GO 3893
4032: POP
4033: POP
// InitHC_All ( ) ;
4034: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_VAR 0 6
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 30
4057: PUSH
4058: LD_INT 5
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PPUSH
4069: CALL_OW 69
4073: ST_TO_ADDR
// for i in tmp do
4074: LD_ADDR_VAR 0 2
4078: PUSH
4079: LD_VAR 0 4
4083: PUSH
4084: FOR_IN
4085: IFFALSE 4212
// begin for j := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: DOUBLE
4093: LD_INT 1
4095: DEC
4096: ST_TO_ADDR
4097: LD_INT 2
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: LD_INT 4
4105: PUSH
4106: LD_INT 4
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: PUSH
4115: LD_OWVAR 67
4119: ARRAY
4120: PUSH
4121: FOR_TO
4122: IFFALSE 4208
// begin PrepareSoldier ( false , skill ) ;
4124: LD_INT 0
4126: PPUSH
4127: LD_VAR 0 7
4131: PPUSH
4132: CALL_OW 381
// un := CreateHuman ;
4136: LD_ADDR_VAR 0 5
4140: PUSH
4141: CALL_OW 44
4145: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4146: LD_ADDR_EXP 34
4150: PUSH
4151: LD_EXP 34
4155: PPUSH
4156: LD_VAR 0 5
4160: PPUSH
4161: CALL 53190 0 2
4165: ST_TO_ADDR
// if j mod 2 = 0 then
4166: LD_VAR 0 3
4170: PUSH
4171: LD_INT 2
4173: MOD
4174: PUSH
4175: LD_INT 0
4177: EQUAL
4178: IFFALSE 4192
// SetClass ( un , class_bazooker ) ;
4180: LD_VAR 0 5
4184: PPUSH
4185: LD_INT 9
4187: PPUSH
4188: CALL_OW 336
// PlaceHumanInUnit ( un , i ) ;
4192: LD_VAR 0 5
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: CALL_OW 52
// end ;
4206: GO 4121
4208: POP
4209: POP
// end ;
4210: GO 4084
4212: POP
4213: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
4214: LD_ADDR_VAR 0 4
4218: PUSH
4219: LD_INT 22
4221: PUSH
4222: LD_VAR 0 6
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 30
4233: PUSH
4234: LD_INT 1
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: ST_TO_ADDR
// for i in tmp do
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_VAR 0 4
4259: PUSH
4260: FOR_IN
4261: IFFALSE 4485
// begin for j := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
4263: LD_ADDR_VAR 0 3
4267: PUSH
4268: DOUBLE
4269: LD_INT 1
4271: DEC
4272: ST_TO_ADDR
4273: LD_INT 3
4275: PUSH
4276: LD_INT 3
4278: PUSH
4279: LD_INT 4
4281: PUSH
4282: LD_INT 4
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: PUSH
4297: FOR_TO
4298: IFFALSE 4358
// begin PrepareEngineer ( false , skill ) ;
4300: LD_INT 0
4302: PPUSH
4303: LD_VAR 0 7
4307: PPUSH
4308: CALL_OW 382
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 5
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4322: LD_ADDR_EXP 34
4326: PUSH
4327: LD_EXP 34
4331: PPUSH
4332: LD_VAR 0 5
4336: PPUSH
4337: CALL 53190 0 2
4341: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4342: LD_VAR 0 5
4346: PPUSH
4347: LD_VAR 0 2
4351: PPUSH
4352: CALL_OW 52
// end ;
4356: GO 4297
4358: POP
4359: POP
// SetResourceType ( GetBase ( i ) , mat_cans , [ 550 , 600 , 780 , 820 ] [ Difficulty ] ) ;
4360: LD_VAR 0 2
4364: PPUSH
4365: CALL_OW 274
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_INT 550
4375: PUSH
4376: LD_INT 600
4378: PUSH
4379: LD_INT 780
4381: PUSH
4382: LD_INT 820
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_OWVAR 67
4395: ARRAY
4396: PPUSH
4397: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , [ 160 , 160 , 210 , 240 ] [ Difficulty ] ) ;
4401: LD_VAR 0 2
4405: PPUSH
4406: CALL_OW 274
4410: PPUSH
4411: LD_INT 2
4413: PPUSH
4414: LD_INT 160
4416: PUSH
4417: LD_INT 160
4419: PUSH
4420: LD_INT 210
4422: PUSH
4423: LD_INT 240
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_OWVAR 67
4436: ARRAY
4437: PPUSH
4438: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , [ 60 , 60 , 70 , 80 ] [ Difficulty ] ) ;
4442: LD_VAR 0 2
4446: PPUSH
4447: CALL_OW 274
4451: PPUSH
4452: LD_INT 3
4454: PPUSH
4455: LD_INT 60
4457: PUSH
4458: LD_INT 60
4460: PUSH
4461: LD_INT 70
4463: PUSH
4464: LD_INT 80
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: PPUSH
4479: CALL_OW 277
// end ;
4483: GO 4260
4485: POP
4486: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
4487: LD_ADDR_VAR 0 4
4491: PUSH
4492: LD_INT 22
4494: PUSH
4495: LD_VAR 0 6
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 30
4506: PUSH
4507: LD_INT 3
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: ST_TO_ADDR
// for i in tmp do
4523: LD_ADDR_VAR 0 2
4527: PUSH
4528: LD_VAR 0 4
4532: PUSH
4533: FOR_IN
4534: IFFALSE 4629
// begin for j := 1 to 6 do
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: DOUBLE
4542: LD_INT 1
4544: DEC
4545: ST_TO_ADDR
4546: LD_INT 6
4548: PUSH
4549: FOR_TO
4550: IFFALSE 4625
// begin PrepareMechanic ( false , skill ) ;
4552: LD_INT 0
4554: PPUSH
4555: LD_VAR 0 7
4559: PPUSH
4560: CALL_OW 383
// hc_attr := [ 12 , 12 ] ;
4564: LD_ADDR_OWVAR 29
4568: PUSH
4569: LD_INT 12
4571: PUSH
4572: LD_INT 12
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: ST_TO_ADDR
// un := CreateHuman ;
4579: LD_ADDR_VAR 0 5
4583: PUSH
4584: CALL_OW 44
4588: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4589: LD_ADDR_EXP 34
4593: PUSH
4594: LD_EXP 34
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: CALL 53190 0 2
4608: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4609: LD_VAR 0 5
4613: PPUSH
4614: LD_VAR 0 2
4618: PPUSH
4619: CALL_OW 52
// end ;
4623: GO 4549
4625: POP
4626: POP
// end ;
4627: GO 4533
4629: POP
4630: POP
// InitHC_All ( ) ;
4631: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
4635: LD_ADDR_VAR 0 4
4639: PUSH
4640: LD_INT 22
4642: PUSH
4643: LD_VAR 0 6
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 8
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PPUSH
4666: CALL_OW 69
4670: ST_TO_ADDR
// for i in tmp do
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_VAR 0 4
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4762
// begin for j := 1 to 2 do
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: DOUBLE
4690: LD_INT 1
4692: DEC
4693: ST_TO_ADDR
4694: LD_INT 2
4696: PUSH
4697: FOR_TO
4698: IFFALSE 4758
// begin PrepareScientist ( false , skill ) ;
4700: LD_INT 0
4702: PPUSH
4703: LD_VAR 0 7
4707: PPUSH
4708: CALL_OW 384
// un := CreateHuman ;
4712: LD_ADDR_VAR 0 5
4716: PUSH
4717: CALL_OW 44
4721: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4722: LD_ADDR_EXP 34
4726: PUSH
4727: LD_EXP 34
4731: PPUSH
4732: LD_VAR 0 5
4736: PPUSH
4737: CALL 53190 0 2
4741: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4742: LD_VAR 0 5
4746: PPUSH
4747: LD_VAR 0 2
4751: PPUSH
4752: CALL_OW 52
// end ;
4756: GO 4697
4758: POP
4759: POP
// end ;
4760: GO 4681
4762: POP
4763: POP
// end ;
4764: LD_VAR 0 1
4768: RET
// function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
4769: LD_INT 0
4771: PPUSH
4772: PPUSH
4773: PPUSH
4774: PPUSH
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// result := [ ] ;
4781: LD_ADDR_VAR 0 3
4785: PUSH
4786: EMPTY
4787: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
4788: LD_ADDR_VAR 0 8
4792: PUSH
4793: LD_INT 7
4795: PUSH
4796: LD_INT 8
4798: PUSH
4799: LD_INT 9
4801: PUSH
4802: LD_INT 10
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_OWVAR 67
4815: ARRAY
4816: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
4817: LD_ADDR_VAR 0 9
4821: PUSH
4822: LD_INT 15
4824: PUSH
4825: LD_INT 17
4827: PUSH
4828: LD_INT 19
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_VAR 0 1
4840: ARRAY
4841: ST_TO_ADDR
// parking := [ ruGatPoint1Area , ruGatPoint2Area , ruGatPoint3Area ] [ spot ] ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_INT 16
4849: PUSH
4850: LD_INT 18
4852: PUSH
4853: LD_INT 20
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: LD_VAR 0 1
4865: ARRAY
4866: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
4867: LD_ADDR_VAR 0 11
4871: PUSH
4872: LD_INT 5
4874: PUSH
4875: LD_INT 0
4877: PUSH
4878: LD_INT 2
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: ARRAY
4891: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) then
4892: LD_VAR 0 9
4896: PPUSH
4897: LD_INT 2
4899: PUSH
4900: LD_INT 22
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 22
4912: PUSH
4913: LD_INT 3
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: IFFALSE 4990
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) do
4931: LD_ADDR_VAR 0 4
4935: PUSH
4936: LD_VAR 0 9
4940: PPUSH
4941: LD_INT 2
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: PPUSH
4969: CALL_OW 70
4973: PUSH
4974: FOR_IN
4975: IFFALSE 4988
// RemoveUnit ( i ) ;
4977: LD_VAR 0 4
4981: PPUSH
4982: CALL_OW 64
4986: GO 4974
4988: POP
4989: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
4990: LD_VAR 0 9
4994: PPUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 21
5000: PUSH
5001: LD_INT 1
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 70
5030: IFFALSE 5094
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: LD_VAR 0 9
5041: PPUSH
5042: LD_INT 3
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: LD_INT 22
5061: PUSH
5062: LD_INT 2
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: PUSH
5078: FOR_IN
5079: IFFALSE 5092
// KillUnit ( i ) ;
5081: LD_VAR 0 4
5085: PPUSH
5086: CALL_OW 66
5090: GO 5078
5092: POP
5093: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
5094: LD_VAR 0 9
5098: PPUSH
5099: LD_INT 21
5101: PUSH
5102: LD_INT 1
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5190
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
5129: LD_ADDR_VAR 0 4
5133: PUSH
5134: LD_VAR 0 9
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 22
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5188
// ComMoveXY ( i , 91 , 56 ) ;
5171: LD_VAR 0 4
5175: PPUSH
5176: LD_INT 91
5178: PPUSH
5179: LD_INT 56
5181: PPUSH
5182: CALL_OW 111
5186: GO 5168
5188: POP
5189: POP
// repeat wait ( 0 0$1 ) ;
5190: LD_INT 35
5192: PPUSH
5193: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5197: LD_VAR 0 9
5201: PPUSH
5202: LD_INT 50
5204: PUSH
5205: EMPTY
5206: LIST
5207: PPUSH
5208: CALL_OW 70
5212: NOT
5213: IFFALSE 5190
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] + strength do
5215: LD_ADDR_VAR 0 4
5219: PUSH
5220: DOUBLE
5221: LD_INT 1
5223: DEC
5224: ST_TO_ADDR
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 5
5233: PUSH
5234: LD_INT 6
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: PUSH
5243: LD_OWVAR 67
5247: ARRAY
5248: PUSH
5249: LD_VAR 0 2
5253: PLUS
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5577
// begin uc_side := 3 ;
5258: LD_ADDR_OWVAR 20
5262: PUSH
5263: LD_INT 3
5265: ST_TO_ADDR
// uc_nation := nation_russian ;
5266: LD_ADDR_OWVAR 21
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
5274: LD_ADDR_VAR 0 12
5278: PUSH
5279: LD_INT 1
5281: PUSH
5282: LD_INT 3
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 12
5307: ARRAY
5308: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
5309: LD_INT 22
5311: PUSH
5312: LD_INT 24
5314: PUSH
5315: LD_INT 23
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_VAR 0 4
5327: PUSH
5328: LD_INT 3
5330: MOD
5331: PUSH
5332: LD_INT 1
5334: PLUS
5335: ARRAY
5336: PPUSH
5337: LD_INT 3
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: LD_INT 1
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: CALL_OW 12
5357: ARRAY
5358: PPUSH
5359: LD_VAR 0 12
5363: PPUSH
5364: LD_INT 45
5366: PUSH
5367: LD_INT 46
5369: PUSH
5370: LD_INT 43
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: LD_VAR 0 4
5382: PUSH
5383: LD_INT 3
5385: MOD
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: ARRAY
5391: PPUSH
5392: LD_INT 100
5394: PPUSH
5395: CALL 20328 0 5
// veh := CreateVehicle ;
5399: LD_ADDR_VAR 0 7
5403: PUSH
5404: CALL_OW 45
5408: ST_TO_ADDR
// SetDir ( veh , dir ) ;
5409: LD_VAR 0 7
5413: PPUSH
5414: LD_VAR 0 11
5418: PPUSH
5419: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
5423: LD_VAR 0 7
5427: PPUSH
5428: LD_VAR 0 9
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: CALL_OW 49
// if control = control_manual then
5440: LD_VAR 0 12
5444: PUSH
5445: LD_INT 1
5447: EQUAL
5448: IFFALSE 5516
// begin uc_side := 3 ;
5450: LD_ADDR_OWVAR 20
5454: PUSH
5455: LD_INT 3
5457: ST_TO_ADDR
// uc_nation := nation_russian ;
5458: LD_ADDR_OWVAR 21
5462: PUSH
5463: LD_INT 3
5465: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5466: LD_INT 0
5468: PPUSH
5469: LD_VAR 0 8
5473: PPUSH
5474: CALL_OW 383
// un := CreateHuman ;
5478: LD_ADDR_VAR 0 6
5482: PUSH
5483: CALL_OW 44
5487: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5488: LD_VAR 0 6
5492: PPUSH
5493: LD_VAR 0 7
5497: PPUSH
5498: CALL_OW 52
// SetTag ( un , spot ) ;
5502: LD_VAR 0 6
5506: PPUSH
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 109
// end ; repeat ComMoveToArea ( veh , parking ) ;
5516: LD_VAR 0 7
5520: PPUSH
5521: LD_VAR 0 10
5525: PPUSH
5526: CALL_OW 113
// wait ( 0 0$3 ) ;
5530: LD_INT 105
5532: PPUSH
5533: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5537: LD_VAR 0 9
5541: PPUSH
5542: LD_INT 50
5544: PUSH
5545: EMPTY
5546: LIST
5547: PPUSH
5548: CALL_OW 70
5552: NOT
5553: IFFALSE 5516
// result := Join ( result , veh ) ;
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_VAR 0 3
5564: PPUSH
5565: LD_VAR 0 7
5569: PPUSH
5570: CALL 53190 0 2
5574: ST_TO_ADDR
// end ;
5575: GO 5255
5577: POP
5578: POP
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
5579: LD_ADDR_VAR 0 4
5583: PUSH
5584: DOUBLE
5585: LD_INT 1
5587: DEC
5588: ST_TO_ADDR
5589: LD_INT 2
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: LD_INT 3
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: PUSH
5607: LD_OWVAR 67
5611: ARRAY
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5784
// begin uc_side := 3 ;
5616: LD_ADDR_OWVAR 20
5620: PUSH
5621: LD_INT 3
5623: ST_TO_ADDR
// uc_nation := nation_russian ;
5624: LD_ADDR_OWVAR 21
5628: PUSH
5629: LD_INT 3
5631: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5632: LD_INT 0
5634: PPUSH
5635: LD_VAR 0 8
5639: PPUSH
5640: CALL_OW 381
// un := CreateHuman ;
5644: LD_ADDR_VAR 0 6
5648: PUSH
5649: CALL_OW 44
5653: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5654: LD_INT 30
5656: PUSH
5657: LD_INT 40
5659: PUSH
5660: LD_INT 50
5662: PUSH
5663: LD_INT 50
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_OWVAR 67
5676: ARRAY
5677: PPUSH
5678: CALL_OW 13
5682: IFFALSE 5696
// SetClass ( un , class_bazooker ) ;
5684: LD_VAR 0 6
5688: PPUSH
5689: LD_INT 9
5691: PPUSH
5692: CALL_OW 336
// SetDir ( un , dir ) ;
5696: LD_VAR 0 6
5700: PPUSH
5701: LD_VAR 0 11
5705: PPUSH
5706: CALL_OW 233
// SetTag ( un , spot ) ;
5710: LD_VAR 0 6
5714: PPUSH
5715: LD_VAR 0 1
5719: PPUSH
5720: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
5724: LD_VAR 0 6
5728: PPUSH
5729: LD_VAR 0 9
5733: PPUSH
5734: LD_INT 0
5736: PPUSH
5737: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
5741: LD_VAR 0 6
5745: PPUSH
5746: LD_VAR 0 10
5750: PPUSH
5751: CALL_OW 113
// wait ( 0 0$1 ) ;
5755: LD_INT 35
5757: PPUSH
5758: CALL_OW 67
// result := Join ( result , un ) ;
5762: LD_ADDR_VAR 0 3
5766: PUSH
5767: LD_VAR 0 3
5771: PPUSH
5772: LD_VAR 0 6
5776: PPUSH
5777: CALL 53190 0 2
5781: ST_TO_ADDR
// end ;
5782: GO 5613
5784: POP
5785: POP
// end ;
5786: LD_VAR 0 3
5790: RET
// function PrepareRussianExtraInfantry ; var i , un ; begin
5791: LD_INT 0
5793: PPUSH
5794: PPUSH
5795: PPUSH
// result := [ ] ;
5796: LD_ADDR_VAR 0 1
5800: PUSH
5801: EMPTY
5802: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty + 1 ] do
5803: LD_ADDR_VAR 0 2
5807: PUSH
5808: DOUBLE
5809: LD_INT 1
5811: DEC
5812: ST_TO_ADDR
5813: LD_INT 3
5815: PUSH
5816: LD_INT 3
5818: PUSH
5819: LD_INT 4
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: PUSH
5827: LD_OWVAR 67
5831: PUSH
5832: LD_INT 1
5834: PLUS
5835: ARRAY
5836: PUSH
5837: FOR_TO
5838: IFFALSE 5976
// begin uc_side := 3 ;
5840: LD_ADDR_OWVAR 20
5844: PUSH
5845: LD_INT 3
5847: ST_TO_ADDR
// uc_nation := nation_russian ;
5848: LD_ADDR_OWVAR 21
5852: PUSH
5853: LD_INT 3
5855: ST_TO_ADDR
// PrepareSoldier ( false , [ 7 , 8 , 9 ] [ Difficulty + 1 ] ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_INT 7
5861: PUSH
5862: LD_INT 8
5864: PUSH
5865: LD_INT 9
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: PUSH
5873: LD_OWVAR 67
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ARRAY
5882: PPUSH
5883: CALL_OW 381
// un := CreateHuman ;
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: CALL_OW 44
5896: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5897: LD_INT 30
5899: PUSH
5900: LD_INT 40
5902: PUSH
5903: LD_INT 50
5905: PUSH
5906: LD_INT 50
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: PUSH
5915: LD_OWVAR 67
5919: ARRAY
5920: PPUSH
5921: CALL_OW 13
5925: IFFALSE 5939
// SetClass ( un , class_bazooker ) ;
5927: LD_VAR 0 3
5931: PPUSH
5932: LD_INT 9
5934: PPUSH
5935: CALL_OW 336
// PlaceUnitArea ( un , extraSpawnAttackArea , false ) ;
5939: LD_VAR 0 3
5943: PPUSH
5944: LD_INT 25
5946: PPUSH
5947: LD_INT 0
5949: PPUSH
5950: CALL_OW 49
// result := Join ( result , un ) ;
5954: LD_ADDR_VAR 0 1
5958: PUSH
5959: LD_VAR 0 1
5963: PPUSH
5964: LD_VAR 0 3
5968: PPUSH
5969: CALL 53190 0 2
5973: ST_TO_ADDR
// end ;
5974: GO 5837
5976: POP
5977: POP
// end ;
5978: LD_VAR 0 1
5982: RET
// function SendBulldozer ; var un ; begin
5983: LD_INT 0
5985: PPUSH
5986: PPUSH
// uc_side := 3 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 3
5994: ST_TO_ADDR
// uc_nation := nation_russian ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 3
6002: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
6003: LD_INT 23
6005: PPUSH
6006: LD_INT 3
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: LD_INT 53
6014: PPUSH
6015: LD_INT 100
6017: PPUSH
6018: CALL 20328 0 5
// un := CreateVehicle ;
6022: LD_ADDR_VAR 0 2
6026: PUSH
6027: CALL_OW 45
6031: ST_TO_ADDR
// PlaceUnitXYD ( un , 7 , 8 , 1 , false ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_INT 7
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_INT 1
6045: PPUSH
6046: LD_INT 0
6048: PPUSH
6049: CALL 55330 0 5
// wait ( 0 0$1 ) ;
6053: LD_INT 35
6055: PPUSH
6056: CALL_OW 67
// CutTreeInArea ( un , cutTreeWArea ) ;
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_INT 24
6067: PPUSH
6068: CALL 11529 0 2
// end ;
6072: LD_VAR 0 1
6076: RET
// every 0 0$3 trigger wave >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
6077: LD_EXP 11
6081: PUSH
6082: LD_INT 4
6084: PUSH
6085: LD_INT 5
6087: PUSH
6088: LD_INT 6
6090: PUSH
6091: LD_INT 7
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: LD_OWVAR 67
6104: ARRAY
6105: GREATEREQUAL
6106: IFFALSE 6160
6108: GO 6110
6110: DISABLE
// begin repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 ;
6118: LD_INT 22
6120: PUSH
6121: LD_INT 6
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 21
6130: PUSH
6131: LD_INT 1
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PPUSH
6142: CALL_OW 69
6146: PUSH
6147: LD_INT 0
6149: EQUAL
6150: IFFALSE 6111
// ruDefeated := true ;
6152: LD_ADDR_EXP 10
6156: PUSH
6157: LD_INT 1
6159: ST_TO_ADDR
// end ;
6160: END
// every 6 6$20 + 4 4$00 trigger wave < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do var i , e , attackers , extraAttackers , spot , extraSpot , paths , enemy ;
6161: LD_EXP 11
6165: PUSH
6166: LD_INT 4
6168: PUSH
6169: LD_INT 5
6171: PUSH
6172: LD_INT 6
6174: PUSH
6175: LD_INT 7
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_OWVAR 67
6188: ARRAY
6189: LESS
6190: IFFALSE 7293
6192: GO 6194
6194: DISABLE
6195: LD_INT 0
6197: PPUSH
6198: PPUSH
6199: PPUSH
6200: PPUSH
6201: PPUSH
6202: PPUSH
6203: PPUSH
6204: PPUSH
// begin enable ;
6205: ENABLE
// attackers := [ ] ;
6206: LD_ADDR_VAR 0 3
6210: PUSH
6211: EMPTY
6212: ST_TO_ADDR
// extraAttackers := [ ] ;
6213: LD_ADDR_VAR 0 4
6217: PUSH
6218: EMPTY
6219: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 87 , 141 ] , [ 80 , 120 ] , [ 66 , 95 ] , [ 51 , 69 ] , [ 36 , 40 ] , [ 47 , 31 ] , [ 60 , 28 ] ] , [ [ 21 , 17 ] , [ 35 , 30 ] , [ 49 , 31 ] ] ] ;
6220: LD_ADDR_VAR 0 7
6224: PUSH
6225: LD_INT 176
6227: PUSH
6228: LD_INT 152
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 157
6237: PUSH
6238: LD_INT 122
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 146
6247: PUSH
6248: LD_INT 89
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 125
6257: PUSH
6258: LD_INT 46
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 87
6273: PUSH
6274: LD_INT 141
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 80
6283: PUSH
6284: LD_INT 120
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 66
6293: PUSH
6294: LD_INT 95
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 51
6303: PUSH
6304: LD_INT 69
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 36
6313: PUSH
6314: LD_INT 40
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 47
6323: PUSH
6324: LD_INT 31
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 60
6333: PUSH
6334: LD_INT 28
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 21
6352: PUSH
6353: LD_INT 17
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 35
6362: PUSH
6363: LD_INT 30
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 49
6372: PUSH
6373: LD_INT 31
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: ST_TO_ADDR
// wave := Inc ( wave ) ;
6390: LD_ADDR_EXP 11
6394: PUSH
6395: LD_EXP 11
6399: PPUSH
6400: CALL 54551 0 1
6404: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
6405: LD_ADDR_VAR 0 5
6409: PUSH
6410: LD_INT 1
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: CALL_OW 12
6420: ST_TO_ADDR
// if wave mod 2 = 0 then
6421: LD_EXP 11
6425: PUSH
6426: LD_INT 2
6428: MOD
6429: PUSH
6430: LD_INT 0
6432: EQUAL
6433: IFFALSE 6450
// strength := Inc ( strength ) ;
6435: LD_ADDR_EXP 12
6439: PUSH
6440: LD_EXP 12
6444: PPUSH
6445: CALL 54551 0 1
6449: ST_TO_ADDR
// if Count ( ListEnvironmentArea ( cutTreeWArea ) ) then
6450: LD_INT 24
6452: PPUSH
6453: CALL_OW 353
6457: PPUSH
6458: CALL 17590 0 1
6462: IFFALSE 6468
// SendBulldozer ;
6464: CALL 5983 0 0
// attackers := PrepareRussianAttack ( spot , strength ) ;
6468: LD_ADDR_VAR 0 3
6472: PUSH
6473: LD_VAR 0 5
6477: PPUSH
6478: LD_EXP 12
6482: PPUSH
6483: CALL 4769 0 2
6487: ST_TO_ADDR
// if wave + [ 2 , 2 , 3 , 3 ] [ Difficulty ] >= [ 6 , 7 , 8 , 9 ] [ Difficulty ] then
6488: LD_EXP 11
6492: PUSH
6493: LD_INT 2
6495: PUSH
6496: LD_INT 2
6498: PUSH
6499: LD_INT 3
6501: PUSH
6502: LD_INT 3
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: PUSH
6511: LD_OWVAR 67
6515: ARRAY
6516: PLUS
6517: PUSH
6518: LD_INT 6
6520: PUSH
6521: LD_INT 7
6523: PUSH
6524: LD_INT 8
6526: PUSH
6527: LD_INT 9
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: PUSH
6536: LD_OWVAR 67
6540: ARRAY
6541: GREATEREQUAL
6542: IFFALSE 6610
// begin extraSpot := spot - 1 ;
6544: LD_ADDR_VAR 0 6
6548: PUSH
6549: LD_VAR 0 5
6553: PUSH
6554: LD_INT 1
6556: MINUS
6557: ST_TO_ADDR
// if extraSpot < 1 then
6558: LD_VAR 0 6
6562: PUSH
6563: LD_INT 1
6565: LESS
6566: IFFALSE 6576
// extraSpot := 3 ;
6568: LD_ADDR_VAR 0 6
6572: PUSH
6573: LD_INT 3
6575: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , strength ) ;
6576: LD_ADDR_VAR 0 4
6580: PUSH
6581: LD_VAR 0 6
6585: PPUSH
6586: LD_EXP 12
6590: PPUSH
6591: CALL 4769 0 2
6595: ST_TO_ADDR
// if Difficulty > 1 then
6596: LD_OWVAR 67
6600: PUSH
6601: LD_INT 1
6603: GREATER
6604: IFFALSE 6610
// PrepareRussianExtraInfantry ;
6606: CALL 5791 0 0
// end ; repeat wait ( 0 0$2 ) ;
6610: LD_INT 70
6612: PPUSH
6613: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
6617: LD_ADDR_VAR 0 8
6621: PUSH
6622: LD_INT 22
6624: PUSH
6625: LD_INT 2
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PPUSH
6632: CALL_OW 69
6636: ST_TO_ADDR
// for i in attackers do
6637: LD_ADDR_VAR 0 1
6641: PUSH
6642: LD_VAR 0 3
6646: PUSH
6647: FOR_IN
6648: IFFALSE 6953
// begin if not IsOk ( i ) then
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 302
6659: NOT
6660: IFFALSE 6680
// begin attackers := attackers diff i ;
6662: LD_ADDR_VAR 0 3
6666: PUSH
6667: LD_VAR 0 3
6671: PUSH
6672: LD_VAR 0 1
6676: DIFF
6677: ST_TO_ADDR
// continue ;
6678: GO 6647
// end ; if GetType ( i ) = unit_vehicle then
6680: LD_VAR 0 1
6684: PPUSH
6685: CALL_OW 247
6689: PUSH
6690: LD_INT 2
6692: EQUAL
6693: IFFALSE 6717
// AgressiveMove ( i , paths [ spot ] ) else
6695: LD_VAR 0 1
6699: PPUSH
6700: LD_VAR 0 7
6704: PUSH
6705: LD_VAR 0 5
6709: ARRAY
6710: PPUSH
6711: CALL 55794 0 2
6715: GO 6951
// begin if GetClass ( i ) = class_bazooker then
6717: LD_VAR 0 1
6721: PPUSH
6722: CALL_OW 257
6726: PUSH
6727: LD_INT 9
6729: EQUAL
6730: IFFALSE 6927
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
6732: LD_VAR 0 1
6736: PPUSH
6737: LD_VAR 0 8
6741: PPUSH
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 74
6751: PPUSH
6752: CALL_OW 296
6756: PUSH
6757: LD_INT 12
6759: GREATER
6760: IFFALSE 6788
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
6762: LD_VAR 0 1
6766: PPUSH
6767: LD_VAR 0 8
6771: PPUSH
6772: LD_VAR 0 1
6776: PPUSH
6777: CALL_OW 74
6781: PPUSH
6782: CALL 57262 0 2
6786: GO 6925
// begin e := NearestUnitToUnit ( enemy , i ) ;
6788: LD_ADDR_VAR 0 2
6792: PUSH
6793: LD_VAR 0 8
6797: PPUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 74
6807: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
6808: LD_INT 1
6810: PPUSH
6811: LD_INT 3
6813: PPUSH
6814: CALL_OW 12
6818: PUSH
6819: LD_INT 1
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 6844
6827: POP
// ComAttackUnit ( i , e ) ; 2 :
6828: LD_VAR 0 1
6832: PPUSH
6833: LD_VAR 0 2
6837: PPUSH
6838: CALL_OW 115
6842: GO 6925
6844: LD_INT 2
6846: DOUBLE
6847: EQUAL
6848: IFTRUE 6852
6850: GO 6884
6852: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
6853: LD_VAR 0 1
6857: PPUSH
6858: LD_VAR 0 2
6862: PPUSH
6863: CALL_OW 250
6867: PPUSH
6868: LD_VAR 0 2
6872: PPUSH
6873: CALL_OW 251
6877: PPUSH
6878: CALL_OW 153
6882: GO 6925
6884: LD_INT 3
6886: DOUBLE
6887: EQUAL
6888: IFTRUE 6892
6890: GO 6924
6892: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
6893: LD_VAR 0 1
6897: PPUSH
6898: LD_VAR 0 2
6902: PPUSH
6903: CALL_OW 250
6907: PPUSH
6908: LD_VAR 0 2
6912: PPUSH
6913: CALL_OW 251
6917: PPUSH
6918: CALL_OW 154
6922: GO 6925
6924: POP
// end ; end else
6925: GO 6951
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6927: LD_VAR 0 1
6931: PPUSH
6932: LD_VAR 0 8
6936: PPUSH
6937: LD_VAR 0 1
6941: PPUSH
6942: CALL_OW 74
6946: PPUSH
6947: CALL 57262 0 2
// end ; end ;
6951: GO 6647
6953: POP
6954: POP
// if extraAttackers then
6955: LD_VAR 0 4
6959: IFFALSE 7279
// begin for i in extraAttackers do
6961: LD_ADDR_VAR 0 1
6965: PUSH
6966: LD_VAR 0 4
6970: PUSH
6971: FOR_IN
6972: IFFALSE 7277
// begin if not IsOk ( i ) then
6974: LD_VAR 0 1
6978: PPUSH
6979: CALL_OW 302
6983: NOT
6984: IFFALSE 7004
// begin extraAttackers := extraAttackers diff i ;
6986: LD_ADDR_VAR 0 4
6990: PUSH
6991: LD_VAR 0 4
6995: PUSH
6996: LD_VAR 0 1
7000: DIFF
7001: ST_TO_ADDR
// continue ;
7002: GO 6971
// end ; if GetType ( i ) = unit_vehicle then
7004: LD_VAR 0 1
7008: PPUSH
7009: CALL_OW 247
7013: PUSH
7014: LD_INT 2
7016: EQUAL
7017: IFFALSE 7041
// AgressiveMove ( i , paths [ extraSpot ] ) else
7019: LD_VAR 0 1
7023: PPUSH
7024: LD_VAR 0 7
7028: PUSH
7029: LD_VAR 0 6
7033: ARRAY
7034: PPUSH
7035: CALL 55794 0 2
7039: GO 7275
// begin if GetClass ( i ) = class_bazooker then
7041: LD_VAR 0 1
7045: PPUSH
7046: CALL_OW 257
7050: PUSH
7051: LD_INT 9
7053: EQUAL
7054: IFFALSE 7251
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
7056: LD_VAR 0 1
7060: PPUSH
7061: LD_VAR 0 8
7065: PPUSH
7066: LD_VAR 0 1
7070: PPUSH
7071: CALL_OW 74
7075: PPUSH
7076: CALL_OW 296
7080: PUSH
7081: LD_INT 12
7083: GREATER
7084: IFFALSE 7112
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
7086: LD_VAR 0 1
7090: PPUSH
7091: LD_VAR 0 8
7095: PPUSH
7096: LD_VAR 0 1
7100: PPUSH
7101: CALL_OW 74
7105: PPUSH
7106: CALL 57262 0 2
7110: GO 7249
// begin e := NearestUnitToUnit ( enemy , i ) ;
7112: LD_ADDR_VAR 0 2
7116: PUSH
7117: LD_VAR 0 8
7121: PPUSH
7122: LD_VAR 0 1
7126: PPUSH
7127: CALL_OW 74
7131: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
7132: LD_INT 1
7134: PPUSH
7135: LD_INT 3
7137: PPUSH
7138: CALL_OW 12
7142: PUSH
7143: LD_INT 1
7145: DOUBLE
7146: EQUAL
7147: IFTRUE 7151
7149: GO 7168
7151: POP
// ComAttackUnit ( i , e ) ; 2 :
7152: LD_VAR 0 1
7156: PPUSH
7157: LD_VAR 0 2
7161: PPUSH
7162: CALL_OW 115
7166: GO 7249
7168: LD_INT 2
7170: DOUBLE
7171: EQUAL
7172: IFTRUE 7176
7174: GO 7208
7176: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
7177: LD_VAR 0 1
7181: PPUSH
7182: LD_VAR 0 2
7186: PPUSH
7187: CALL_OW 250
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 251
7201: PPUSH
7202: CALL_OW 153
7206: GO 7249
7208: LD_INT 3
7210: DOUBLE
7211: EQUAL
7212: IFTRUE 7216
7214: GO 7248
7216: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
7217: LD_VAR 0 1
7221: PPUSH
7222: LD_VAR 0 2
7226: PPUSH
7227: CALL_OW 250
7231: PPUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: CALL_OW 251
7241: PPUSH
7242: CALL_OW 154
7246: GO 7249
7248: POP
// end ; end else
7249: GO 7275
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: LD_VAR 0 8
7260: PPUSH
7261: LD_VAR 0 1
7265: PPUSH
7266: CALL_OW 74
7270: PPUSH
7271: CALL 57262 0 2
// end ; end ;
7275: GO 6971
7277: POP
7278: POP
// end ; until not attackers and not extraAttackers ;
7279: LD_VAR 0 3
7283: NOT
7284: PUSH
7285: LD_VAR 0 4
7289: NOT
7290: AND
7291: IFFALSE 6610
// end ;
7293: PPOPN 8
7295: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] ] ) do var i , tmp , lab , eng , tag , un , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , ruBase , fac ;
7296: LD_INT 22
7298: PUSH
7299: LD_INT 6
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: LD_INT 50
7308: PUSH
7309: EMPTY
7310: LIST
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PPUSH
7316: CALL_OW 69
7320: IFFALSE 9009
7322: GO 7324
7324: DISABLE
7325: LD_INT 0
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
// begin enable ;
7342: ENABLE
// ruBase := FilterUnitsInARea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_warehouse ] , [ f_ok ] ] ) ;
7343: LD_ADDR_VAR 0 14
7347: PUSH
7348: LD_INT 26
7350: PPUSH
7351: LD_INT 22
7353: PUSH
7354: LD_INT 6
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 30
7363: PUSH
7364: LD_INT 1
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 50
7373: PUSH
7374: EMPTY
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: PPUSH
7382: CALL_OW 70
7386: ST_TO_ADDR
// if ruBase then
7387: LD_VAR 0 14
7391: IFFALSE 7407
// ruBase := ruBase [ 1 ] ;
7393: LD_ADDR_VAR 0 14
7397: PUSH
7398: LD_VAR 0 14
7402: PUSH
7403: LD_INT 1
7405: ARRAY
7406: ST_TO_ADDR
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7407: LD_ADDR_VAR 0 15
7411: PUSH
7412: LD_INT 26
7414: PPUSH
7415: LD_INT 22
7417: PUSH
7418: LD_INT 6
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 30
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 50
7437: PUSH
7438: EMPTY
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PPUSH
7446: CALL_OW 70
7450: ST_TO_ADDR
// if ruConstructList and fac then
7451: LD_EXP 35
7455: PUSH
7456: LD_VAR 0 15
7460: AND
7461: IFFALSE 7614
// if BuildingStatus ( fac [ 1 ] ) = bs_idle and CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
7463: LD_VAR 0 15
7467: PUSH
7468: LD_INT 1
7470: ARRAY
7471: PPUSH
7472: CALL_OW 461
7476: PUSH
7477: LD_INT 2
7479: EQUAL
7480: PUSH
7481: LD_VAR 0 15
7485: PUSH
7486: LD_INT 1
7488: ARRAY
7489: PPUSH
7490: LD_EXP 35
7494: PUSH
7495: LD_INT 1
7497: ARRAY
7498: PUSH
7499: LD_INT 1
7501: ARRAY
7502: PPUSH
7503: LD_EXP 35
7507: PUSH
7508: LD_INT 1
7510: ARRAY
7511: PUSH
7512: LD_INT 2
7514: ARRAY
7515: PPUSH
7516: LD_EXP 35
7520: PUSH
7521: LD_INT 1
7523: ARRAY
7524: PUSH
7525: LD_INT 3
7527: ARRAY
7528: PPUSH
7529: LD_EXP 35
7533: PUSH
7534: LD_INT 1
7536: ARRAY
7537: PUSH
7538: LD_INT 4
7540: ARRAY
7541: PPUSH
7542: CALL_OW 448
7546: AND
7547: IFFALSE 7614
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
7549: LD_VAR 0 15
7553: PUSH
7554: LD_INT 1
7556: ARRAY
7557: PPUSH
7558: LD_EXP 35
7562: PUSH
7563: LD_INT 1
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: LD_EXP 35
7575: PUSH
7576: LD_INT 1
7578: ARRAY
7579: PUSH
7580: LD_INT 2
7582: ARRAY
7583: PPUSH
7584: LD_EXP 35
7588: PUSH
7589: LD_INT 1
7591: ARRAY
7592: PUSH
7593: LD_INT 3
7595: ARRAY
7596: PPUSH
7597: LD_EXP 35
7601: PUSH
7602: LD_INT 1
7604: ARRAY
7605: PUSH
7606: LD_INT 4
7608: ARRAY
7609: PPUSH
7610: CALL_OW 125
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7614: LD_ADDR_VAR 0 2
7618: PUSH
7619: LD_INT 26
7621: PPUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 24
7637: PUSH
7638: LD_INT 1000
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PPUSH
7653: CALL_OW 70
7657: ST_TO_ADDR
// cr := GetListOfCratesInArea ( crates6Area ) ;
7658: LD_ADDR_VAR 0 8
7662: PUSH
7663: LD_INT 14
7665: PPUSH
7666: CALL_OW 435
7670: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7671: LD_ADDR_VAR 0 9
7675: PUSH
7676: LD_EXP 34
7680: PPUSH
7681: LD_INT 25
7683: PUSH
7684: LD_INT 4
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: LD_INT 50
7693: PUSH
7694: EMPTY
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PPUSH
7701: CALL_OW 72
7705: ST_TO_ADDR
// if sci then
7706: LD_VAR 0 9
7710: IFFALSE 7937
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
7712: LD_ADDR_VAR 0 11
7716: PUSH
7717: LD_EXP 34
7721: PPUSH
7722: LD_INT 95
7724: PUSH
7725: LD_INT 26
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PUSH
7732: LD_INT 120
7734: PUSH
7735: LD_INT 3
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 72
7750: ST_TO_ADDR
// lab := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7751: LD_ADDR_VAR 0 3
7755: PUSH
7756: LD_EXP 34
7760: PPUSH
7761: LD_INT 95
7763: PUSH
7764: LD_INT 26
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: LD_INT 2
7773: PUSH
7774: LD_INT 30
7776: PUSH
7777: LD_INT 6
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 30
7786: PUSH
7787: LD_INT 7
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 30
7796: PUSH
7797: LD_INT 8
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 72
7818: ST_TO_ADDR
// if hurtUnits then
7819: LD_VAR 0 11
7823: IFFALSE 7884
// begin for i in sci do
7825: LD_ADDR_VAR 0 1
7829: PUSH
7830: LD_VAR 0 9
7834: PUSH
7835: FOR_IN
7836: IFFALSE 7880
// if IsInUnit ( i ) then
7838: LD_VAR 0 1
7842: PPUSH
7843: CALL_OW 310
7847: IFFALSE 7860
// ComExitBuilding ( i ) else
7849: LD_VAR 0 1
7853: PPUSH
7854: CALL_OW 122
7858: GO 7878
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7860: LD_VAR 0 1
7864: PPUSH
7865: LD_VAR 0 11
7869: PUSH
7870: LD_INT 1
7872: ARRAY
7873: PPUSH
7874: CALL_OW 128
7878: GO 7835
7880: POP
7881: POP
// end else
7882: GO 7937
// if lab then
7884: LD_VAR 0 3
7888: IFFALSE 7937
// begin for i in sci do
7890: LD_ADDR_VAR 0 1
7894: PUSH
7895: LD_VAR 0 9
7899: PUSH
7900: FOR_IN
7901: IFFALSE 7935
// if not IsInUnit ( i ) then
7903: LD_VAR 0 1
7907: PPUSH
7908: CALL_OW 310
7912: NOT
7913: IFFALSE 7933
// ComEnterUnit ( i , lab [ 1 ] ) ;
7915: LD_VAR 0 1
7919: PPUSH
7920: LD_VAR 0 3
7924: PUSH
7925: LD_INT 1
7927: ARRAY
7928: PPUSH
7929: CALL_OW 120
7933: GO 7900
7935: POP
7936: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
7937: LD_ADDR_VAR 0 4
7941: PUSH
7942: LD_EXP 34
7946: PPUSH
7947: LD_INT 25
7949: PUSH
7950: LD_INT 2
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PPUSH
7957: CALL_OW 72
7961: ST_TO_ADDR
// if eng then
7962: LD_VAR 0 4
7966: IFFALSE 8406
// begin for i in eng do
7968: LD_ADDR_VAR 0 1
7972: PUSH
7973: LD_VAR 0 4
7977: PUSH
7978: FOR_IN
7979: IFFALSE 8404
// begin tag := GetTag ( i ) ;
7981: LD_ADDR_VAR 0 5
7985: PUSH
7986: LD_VAR 0 1
7990: PPUSH
7991: CALL_OW 110
7995: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 256
8005: PUSH
8006: LD_INT 800
8008: LESS
8009: PUSH
8010: LD_VAR 0 5
8014: PUSH
8015: LD_INT 3
8017: NONEQUAL
8018: AND
8019: IFFALSE 8057
// begin SetTag ( i , tHeal ) ;
8021: LD_VAR 0 1
8025: PPUSH
8026: LD_INT 3
8028: PPUSH
8029: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8033: LD_VAR 0 1
8037: PPUSH
8038: LD_INT 97
8040: PPUSH
8041: LD_INT 139
8043: PPUSH
8044: CALL_OW 111
// AddComHold ( i ) ;
8048: LD_VAR 0 1
8052: PPUSH
8053: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8057: LD_VAR 0 5
8061: PUSH
8062: LD_INT 3
8064: EQUAL
8065: PUSH
8066: LD_VAR 0 1
8070: PPUSH
8071: CALL_OW 256
8075: PUSH
8076: LD_INT 1000
8078: EQUAL
8079: AND
8080: IFFALSE 8094
// SetTag ( i , 0 ) ;
8082: LD_VAR 0 1
8086: PPUSH
8087: LD_INT 0
8089: PPUSH
8090: CALL_OW 109
// if not tag then
8094: LD_VAR 0 5
8098: NOT
8099: IFFALSE 8193
// begin if cr or tmp then
8101: LD_VAR 0 8
8105: PUSH
8106: LD_VAR 0 2
8110: OR
8111: IFFALSE 8167
// begin if IsInUnit ( i ) then
8113: LD_VAR 0 1
8117: PPUSH
8118: CALL_OW 310
8122: IFFALSE 8133
// ComExitBuilding ( i ) ;
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 122
// if tmp then
8133: LD_VAR 0 2
8137: IFFALSE 8153
// SetTag ( i , tRepair ) else
8139: LD_VAR 0 1
8143: PPUSH
8144: LD_INT 1
8146: PPUSH
8147: CALL_OW 109
8151: GO 8165
// SetTag ( i , tCrates ) ;
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 2
8160: PPUSH
8161: CALL_OW 109
// end else
8165: GO 8193
// if not IsInUnit ( i ) then
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 310
8176: NOT
8177: IFFALSE 8193
// ComEnterUnit ( i , ruBase ) ;
8179: LD_VAR 0 1
8183: PPUSH
8184: LD_VAR 0 14
8188: PPUSH
8189: CALL_OW 120
// end ; if tag = tRepair then
8193: LD_VAR 0 5
8197: PUSH
8198: LD_INT 1
8200: EQUAL
8201: IFFALSE 8281
// begin if not tmp then
8203: LD_VAR 0 2
8207: NOT
8208: IFFALSE 8224
// begin SetTag ( i , 0 ) ;
8210: LD_VAR 0 1
8214: PPUSH
8215: LD_INT 0
8217: PPUSH
8218: CALL_OW 109
// continue ;
8222: GO 7978
// end ; if not HasTask ( i ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 314
8233: NOT
8234: IFFALSE 8254
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8236: LD_VAR 0 1
8240: PPUSH
8241: LD_VAR 0 2
8245: PUSH
8246: LD_INT 1
8248: ARRAY
8249: PPUSH
8250: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
8254: LD_VAR 0 1
8258: PPUSH
8259: LD_INT 26
8261: PPUSH
8262: CALL_OW 308
8266: NOT
8267: IFFALSE 8281
// ComMoveToArea ( i , ruBaseArea ) ;
8269: LD_VAR 0 1
8273: PPUSH
8274: LD_INT 26
8276: PPUSH
8277: CALL_OW 113
// end ; if tag = tCrates then
8281: LD_VAR 0 5
8285: PUSH
8286: LD_INT 2
8288: EQUAL
8289: IFFALSE 8402
// begin if not cr then
8291: LD_VAR 0 8
8295: NOT
8296: IFFALSE 8312
// begin SetTag ( i , 0 ) ;
8298: LD_VAR 0 1
8302: PPUSH
8303: LD_INT 0
8305: PPUSH
8306: CALL_OW 109
// continue ;
8310: GO 7978
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8312: LD_VAR 0 1
8316: PPUSH
8317: CALL_OW 314
8321: NOT
8322: PUSH
8323: LD_INT 81
8325: PUSH
8326: LD_INT 6
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 92
8335: PUSH
8336: LD_VAR 0 8
8340: PUSH
8341: LD_INT 1
8343: ARRAY
8344: PUSH
8345: LD_VAR 0 8
8349: PUSH
8350: LD_INT 2
8352: ARRAY
8353: PUSH
8354: LD_INT 12
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PPUSH
8367: CALL_OW 69
8371: NOT
8372: AND
8373: IFFALSE 8402
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8375: LD_VAR 0 1
8379: PPUSH
8380: LD_VAR 0 8
8384: PUSH
8385: LD_INT 1
8387: ARRAY
8388: PPUSH
8389: LD_VAR 0 8
8393: PUSH
8394: LD_INT 2
8396: ARRAY
8397: PPUSH
8398: CALL_OW 117
// end ; end ;
8402: GO 7978
8404: POP
8405: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8406: LD_ADDR_VAR 0 10
8410: PUSH
8411: LD_EXP 34
8415: PPUSH
8416: LD_INT 2
8418: PUSH
8419: LD_INT 25
8421: PUSH
8422: LD_INT 1
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 9
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 50
8446: PUSH
8447: EMPTY
8448: LIST
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PPUSH
8454: CALL_OW 72
8458: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
8459: LD_ADDR_VAR 0 12
8463: PUSH
8464: LD_INT 26
8466: PPUSH
8467: LD_INT 81
8469: PUSH
8470: LD_INT 6
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PPUSH
8477: CALL_OW 70
8481: ST_TO_ADDR
// if sol then
8482: LD_VAR 0 10
8486: IFFALSE 9009
// begin if enemyInBase then
8488: LD_VAR 0 12
8492: IFFALSE 8711
// begin for i in sol do
8494: LD_ADDR_VAR 0 1
8498: PUSH
8499: LD_VAR 0 10
8503: PUSH
8504: FOR_IN
8505: IFFALSE 8707
// begin tw := IsInUnit ( i ) ;
8507: LD_ADDR_VAR 0 7
8511: PUSH
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 310
8521: ST_TO_ADDR
// if tw then
8522: LD_VAR 0 7
8526: IFFALSE 8616
// begin if not tw in FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8528: LD_VAR 0 7
8532: PUSH
8533: LD_INT 22
8535: PUSH
8536: LD_INT 6
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 101
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: LD_INT 30
8558: PUSH
8559: LD_INT 5
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 30
8568: PUSH
8569: LD_INT 32
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 30
8578: PUSH
8579: LD_INT 31
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: LIST
8596: PPUSH
8597: CALL_OW 69
8601: IN
8602: NOT
8603: IFFALSE 8614
// ComExitBuilding ( i ) ;
8605: LD_VAR 0 1
8609: PPUSH
8610: CALL_OW 122
// end else
8614: GO 8705
// begin un := NearestUnitToUnit ( enemyInBase , i ) ;
8616: LD_ADDR_VAR 0 6
8620: PUSH
8621: LD_VAR 0 12
8625: PPUSH
8626: LD_VAR 0 1
8630: PPUSH
8631: CALL_OW 74
8635: ST_TO_ADDR
// if GetClass ( i ) = class_bazooker and Prob ( 30 ) then
8636: LD_VAR 0 1
8640: PPUSH
8641: CALL_OW 257
8645: PUSH
8646: LD_INT 9
8648: EQUAL
8649: PUSH
8650: LD_INT 30
8652: PPUSH
8653: CALL_OW 13
8657: AND
8658: IFFALSE 8691
// ComTimeShift ( i , GetX ( un ) , GetY ( un ) ) else
8660: LD_VAR 0 1
8664: PPUSH
8665: LD_VAR 0 6
8669: PPUSH
8670: CALL_OW 250
8674: PPUSH
8675: LD_VAR 0 6
8679: PPUSH
8680: CALL_OW 251
8684: PPUSH
8685: CALL_OW 154
8689: GO 8705
// ComAttackUnit ( i , un ) ;
8691: LD_VAR 0 1
8695: PPUSH
8696: LD_VAR 0 6
8700: PPUSH
8701: CALL_OW 115
// end ; end ;
8705: GO 8504
8707: POP
8708: POP
// end else
8709: GO 9009
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8711: LD_ADDR_VAR 0 13
8715: PUSH
8716: LD_INT 26
8718: PPUSH
8719: LD_INT 3
8721: PUSH
8722: LD_INT 62
8724: PUSH
8725: EMPTY
8726: LIST
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 2
8734: PUSH
8735: LD_INT 30
8737: PUSH
8738: LD_INT 32
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 30
8747: PUSH
8748: LD_INT 4
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 30
8757: PUSH
8758: LD_INT 31
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PPUSH
8775: CALL_OW 70
8779: ST_TO_ADDR
// if empty then
8780: LD_VAR 0 13
8784: IFFALSE 8801
// empty := ReverseArray ( empty ) ;
8786: LD_ADDR_VAR 0 13
8790: PUSH
8791: LD_VAR 0 13
8795: PPUSH
8796: CALL 48466 0 1
8800: ST_TO_ADDR
// for i in sol do
8801: LD_ADDR_VAR 0 1
8805: PUSH
8806: LD_VAR 0 10
8810: PUSH
8811: FOR_IN
8812: IFFALSE 9007
// begin tag := GetTag ( i ) ;
8814: LD_ADDR_VAR 0 5
8818: PUSH
8819: LD_VAR 0 1
8823: PPUSH
8824: CALL_OW 110
8828: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8829: LD_VAR 0 1
8833: PPUSH
8834: CALL_OW 256
8838: PUSH
8839: LD_INT 1000
8841: LESS
8842: PUSH
8843: LD_VAR 0 5
8847: PUSH
8848: LD_INT 3
8850: NONEQUAL
8851: AND
8852: IFFALSE 8892
// begin SetTag ( i , tHeal ) ;
8854: LD_VAR 0 1
8858: PPUSH
8859: LD_INT 3
8861: PPUSH
8862: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8866: LD_VAR 0 1
8870: PPUSH
8871: LD_INT 97
8873: PPUSH
8874: LD_INT 139
8876: PPUSH
8877: CALL_OW 111
// AddComHold ( i ) ;
8881: LD_VAR 0 1
8885: PPUSH
8886: CALL_OW 200
// continue ;
8890: GO 8811
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8892: LD_VAR 0 1
8896: PPUSH
8897: CALL_OW 256
8901: PUSH
8902: LD_INT 1000
8904: EQUAL
8905: PUSH
8906: LD_VAR 0 5
8910: PUSH
8911: LD_INT 3
8913: EQUAL
8914: AND
8915: IFFALSE 8931
// begin SetTag ( i , 0 ) ;
8917: LD_VAR 0 1
8921: PPUSH
8922: LD_INT 0
8924: PPUSH
8925: CALL_OW 109
// continue ;
8929: GO 8811
// end ; if HasTask ( i ) then
8931: LD_VAR 0 1
8935: PPUSH
8936: CALL_OW 314
8940: IFFALSE 8944
// continue ;
8942: GO 8811
// if not IsInUnit ( i ) and not tag and empty then
8944: LD_VAR 0 1
8948: PPUSH
8949: CALL_OW 310
8953: NOT
8954: PUSH
8955: LD_VAR 0 5
8959: NOT
8960: AND
8961: PUSH
8962: LD_VAR 0 13
8966: AND
8967: IFFALSE 9005
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8969: LD_VAR 0 1
8973: PPUSH
8974: LD_VAR 0 13
8978: PUSH
8979: LD_INT 1
8981: ARRAY
8982: PPUSH
8983: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
8987: LD_ADDR_VAR 0 13
8991: PUSH
8992: LD_VAR 0 13
8996: PPUSH
8997: LD_INT 1
8999: PPUSH
9000: CALL_OW 3
9004: ST_TO_ADDR
// end ; end ;
9005: GO 8811
9007: POP
9008: POP
// end ; end ; end ;
9009: PPOPN 15
9011: END
// every 0 0$1 trigger ruTanks do var i , mech , enemy ;
9012: LD_EXP 36
9016: IFFALSE 9592
9018: GO 9020
9020: DISABLE
9021: LD_INT 0
9023: PPUSH
9024: PPUSH
9025: PPUSH
// begin enable ;
9026: ENABLE
// if not ruTanks then
9027: LD_EXP 36
9031: NOT
9032: IFFALSE 9036
// exit ;
9034: GO 9592
// for i in ruTanks do
9036: LD_ADDR_VAR 0 1
9040: PUSH
9041: LD_EXP 36
9045: PUSH
9046: FOR_IN
9047: IFFALSE 9590
// begin if not IsOk ( i ) or GetSide ( i ) <> 6 then
9049: LD_VAR 0 1
9053: PPUSH
9054: CALL_OW 302
9058: NOT
9059: PUSH
9060: LD_VAR 0 1
9064: PPUSH
9065: CALL_OW 255
9069: PUSH
9070: LD_INT 6
9072: NONEQUAL
9073: OR
9074: IFFALSE 9094
// begin ruTanks := ruTanks diff i ;
9076: LD_ADDR_EXP 36
9080: PUSH
9081: LD_EXP 36
9085: PUSH
9086: LD_VAR 0 1
9090: DIFF
9091: ST_TO_ADDR
// continue ;
9092: GO 9046
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 110
9103: NOT
9104: PUSH
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 110
9114: PUSH
9115: LD_INT 0
9117: EQUAL
9118: OR
9119: IFFALSE 9249
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9121: LD_VAR 0 1
9125: PPUSH
9126: CALL_OW 261
9130: PUSH
9131: LD_INT 50
9133: LESS
9134: PUSH
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL_OW 262
9144: PUSH
9145: LD_INT 1
9147: EQUAL
9148: AND
9149: IFFALSE 9208
// begin ComMoveXY ( i , 103 , 149 ) ;
9151: LD_VAR 0 1
9155: PPUSH
9156: LD_INT 103
9158: PPUSH
9159: LD_INT 149
9161: PPUSH
9162: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9166: LD_INT 35
9168: PPUSH
9169: CALL_OW 67
// until GetDistUnitXY ( i , 103 , 149 ) < 4 ;
9173: LD_VAR 0 1
9177: PPUSH
9178: LD_INT 103
9180: PPUSH
9181: LD_INT 149
9183: PPUSH
9184: CALL_OW 297
9188: PUSH
9189: LD_INT 4
9191: LESS
9192: IFFALSE 9166
// SetFuel ( i , 100 ) ;
9194: LD_VAR 0 1
9198: PPUSH
9199: LD_INT 100
9201: PPUSH
9202: CALL_OW 240
// end else
9206: GO 9249
// if not IsInArea ( i , ruParkingArea ) then
9208: LD_VAR 0 1
9212: PPUSH
9213: LD_INT 27
9215: PPUSH
9216: CALL_OW 308
9220: NOT
9221: IFFALSE 9237
// ComMoveToArea ( i , ruParkingArea ) else
9223: LD_VAR 0 1
9227: PPUSH
9228: LD_INT 27
9230: PPUSH
9231: CALL_OW 113
9235: GO 9249
// SetTag ( i , tParking ) ;
9237: LD_VAR 0 1
9241: PPUSH
9242: LD_INT 11
9244: PPUSH
9245: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 110
9258: PUSH
9259: LD_INT 11
9261: EQUAL
9262: IFFALSE 9392
// begin if GetLives ( i ) < 650 then
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 256
9273: PUSH
9274: LD_INT 650
9276: LESS
9277: IFFALSE 9369
// begin if not IsDrivenBy ( i ) then
9279: LD_VAR 0 1
9283: PPUSH
9284: CALL_OW 311
9288: NOT
9289: IFFALSE 9293
// continue ;
9291: GO 9046
// mech := IsDrivenBy ( i ) ;
9293: LD_ADDR_VAR 0 2
9297: PUSH
9298: LD_VAR 0 1
9302: PPUSH
9303: CALL_OW 311
9307: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9308: LD_VAR 0 2
9312: PPUSH
9313: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9317: LD_VAR 0 2
9321: PPUSH
9322: LD_VAR 0 1
9326: PPUSH
9327: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9331: LD_INT 35
9333: PPUSH
9334: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL_OW 256
9347: PUSH
9348: LD_INT 1000
9350: EQUAL
9351: IFFALSE 9331
// ComEnterUnit ( mech , i ) ;
9353: LD_VAR 0 2
9357: PPUSH
9358: LD_VAR 0 1
9362: PPUSH
9363: CALL_OW 120
// end else
9367: GO 9392
// if IsDrivenBy ( i ) then
9369: LD_VAR 0 1
9373: PPUSH
9374: CALL_OW 311
9378: IFFALSE 9392
// SetTag ( i , tAttack ) ;
9380: LD_VAR 0 1
9384: PPUSH
9385: LD_INT 12
9387: PPUSH
9388: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9392: LD_VAR 0 1
9396: PPUSH
9397: CALL_OW 110
9401: PUSH
9402: LD_INT 12
9404: EQUAL
9405: IFFALSE 9588
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
9407: LD_ADDR_VAR 0 3
9411: PUSH
9412: LD_INT 26
9414: PPUSH
9415: LD_INT 81
9417: PUSH
9418: LD_INT 6
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PPUSH
9425: CALL_OW 70
9429: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9430: LD_VAR 0 1
9434: PPUSH
9435: CALL_OW 256
9439: PUSH
9440: LD_INT 650
9442: LESS
9443: IFFALSE 9468
// begin ComStop ( i ) ;
9445: LD_VAR 0 1
9449: PPUSH
9450: CALL_OW 141
// SetTag ( i , 0 ) ;
9454: LD_VAR 0 1
9458: PPUSH
9459: LD_INT 0
9461: PPUSH
9462: CALL_OW 109
// continue ;
9466: GO 9046
// end ; if enemy then
9468: LD_VAR 0 3
9472: IFFALSE 9512
// begin if not HasTask ( i ) then
9474: LD_VAR 0 1
9478: PPUSH
9479: CALL_OW 314
9483: NOT
9484: IFFALSE 9510
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9486: LD_VAR 0 1
9490: PPUSH
9491: LD_VAR 0 3
9495: PPUSH
9496: LD_VAR 0 1
9500: PPUSH
9501: CALL_OW 74
9505: PPUSH
9506: CALL 57262 0 2
// end else
9510: GO 9588
// if ruTanks > 1 then
9512: LD_EXP 36
9516: PUSH
9517: LD_INT 1
9519: GREATER
9520: IFFALSE 9588
// AgressiveMove ( i , [ [ 78 , 112 ] , [ 104 , 106 ] , [ 130 , 107 ] , [ 143 , 83 ] , [ 120 , 35 ] ] ) ;
9522: LD_VAR 0 1
9526: PPUSH
9527: LD_INT 78
9529: PUSH
9530: LD_INT 112
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 104
9539: PUSH
9540: LD_INT 106
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 130
9549: PUSH
9550: LD_INT 107
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 143
9559: PUSH
9560: LD_INT 83
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 120
9569: PUSH
9570: LD_INT 35
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: PPUSH
9584: CALL 55794 0 2
// end ; end ;
9588: GO 9046
9590: POP
9591: POP
// end ;
9592: PPOPN 3
9594: END
// every 0 0$1 trigger InBattle ( 6 ) or playerInBase do
9595: LD_INT 6
9597: PPUSH
9598: CALL_OW 463
9602: PUSH
9603: LD_EXP 5
9607: OR
9608: IFFALSE 9826
9610: GO 9612
9612: DISABLE
// begin wait ( 0 0$10 ) ;
9613: LD_INT 350
9615: PPUSH
9616: CALL_OW 67
// if playerInBase then
9620: LD_EXP 5
9624: IFFALSE 9633
// wait ( 3 3$00 ) ;
9626: LD_INT 6300
9628: PPUSH
9629: CALL_OW 67
// ruConstructList := [ [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] ] ;
9633: LD_ADDR_EXP 35
9637: PUSH
9638: LD_INT 21
9640: PUSH
9641: LD_INT 3
9643: PUSH
9644: LD_INT 1
9646: PUSH
9647: LD_INT 45
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 21
9658: PUSH
9659: LD_INT 3
9661: PUSH
9662: LD_INT 1
9664: PUSH
9665: LD_INT 45
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 21
9676: PUSH
9677: LD_INT 3
9679: PUSH
9680: LD_INT 1
9682: PUSH
9683: LD_INT 45
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: ST_TO_ADDR
// if Difficulty > 1 then
9697: LD_OWVAR 67
9701: PUSH
9702: LD_INT 1
9704: GREATER
9705: IFFALSE 9740
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gatling_gun ] ) ;
9707: LD_ADDR_EXP 35
9711: PUSH
9712: LD_EXP 35
9716: PPUSH
9717: LD_INT 21
9719: PUSH
9720: LD_INT 3
9722: PUSH
9723: LD_INT 1
9725: PUSH
9726: LD_INT 43
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PPUSH
9735: CALL 53190 0 2
9739: ST_TO_ADDR
// if Difficulty > 2 then
9740: LD_OWVAR 67
9744: PUSH
9745: LD_INT 2
9747: GREATER
9748: IFFALSE 9783
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9750: LD_ADDR_EXP 35
9754: PUSH
9755: LD_EXP 35
9759: PPUSH
9760: LD_INT 21
9762: PUSH
9763: LD_INT 3
9765: PUSH
9766: LD_INT 1
9768: PUSH
9769: LD_INT 44
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: PPUSH
9778: CALL 53190 0 2
9782: ST_TO_ADDR
// if Difficulty > 3 then
9783: LD_OWVAR 67
9787: PUSH
9788: LD_INT 3
9790: GREATER
9791: IFFALSE 9826
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9793: LD_ADDR_EXP 35
9797: PUSH
9798: LD_EXP 35
9802: PPUSH
9803: LD_INT 21
9805: PUSH
9806: LD_INT 3
9808: PUSH
9809: LD_INT 1
9811: PUSH
9812: LD_INT 44
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL 53190 0 2
9825: ST_TO_ADDR
// end ; end_of_file
9826: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
9827: LD_INT 0
9829: PPUSH
9830: PPUSH
9831: PPUSH
9832: PPUSH
9833: PPUSH
9834: PPUSH
9835: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_STRING 09_env
9843: PPUSH
9844: EMPTY
9845: PPUSH
9846: CALL_OW 30
9850: ST_TO_ADDR
// if not tmp then
9851: LD_VAR 0 2
9855: NOT
9856: IFFALSE 9860
// exit ;
9858: GO 10263
// list := ListEnvironmentArea ( mapArea ) ;
9860: LD_ADDR_VAR 0 7
9864: PUSH
9865: LD_INT 4
9867: PPUSH
9868: CALL_OW 353
9872: ST_TO_ADDR
// if not list then
9873: LD_VAR 0 7
9877: NOT
9878: IFFALSE 9882
// exit ;
9880: GO 10263
// for i in list do
9882: LD_ADDR_VAR 0 3
9886: PUSH
9887: LD_VAR 0 7
9891: PUSH
9892: FOR_IN
9893: IFFALSE 10001
// begin exist := false ;
9895: LD_ADDR_VAR 0 6
9899: PUSH
9900: LD_INT 0
9902: ST_TO_ADDR
// for j in tmp do
9903: LD_ADDR_VAR 0 4
9907: PUSH
9908: LD_VAR 0 2
9912: PUSH
9913: FOR_IN
9914: IFFALSE 9968
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
9916: LD_VAR 0 3
9920: PUSH
9921: LD_INT 1
9923: ARRAY
9924: PUSH
9925: LD_VAR 0 4
9929: PUSH
9930: LD_INT 1
9932: ARRAY
9933: EQUAL
9934: PUSH
9935: LD_VAR 0 3
9939: PUSH
9940: LD_INT 2
9942: ARRAY
9943: PUSH
9944: LD_VAR 0 4
9948: PUSH
9949: LD_INT 2
9951: ARRAY
9952: EQUAL
9953: AND
9954: IFFALSE 9966
// begin exist := true ;
9956: LD_ADDR_VAR 0 6
9960: PUSH
9961: LD_INT 1
9963: ST_TO_ADDR
// break ;
9964: GO 9968
// end ;
9966: GO 9913
9968: POP
9969: POP
// if not exist then
9970: LD_VAR 0 6
9974: NOT
9975: IFFALSE 9999
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
9977: LD_VAR 0 3
9981: PUSH
9982: LD_INT 1
9984: ARRAY
9985: PPUSH
9986: LD_VAR 0 3
9990: PUSH
9991: LD_INT 2
9993: ARRAY
9994: PPUSH
9995: CALL_OW 347
// end ;
9999: GO 9892
10001: POP
10002: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
10003: LD_ADDR_VAR 0 2
10007: PUSH
10008: LD_STRING 09_animals
10010: PPUSH
10011: EMPTY
10012: PPUSH
10013: CALL_OW 30
10017: ST_TO_ADDR
// if not tmp then
10018: LD_VAR 0 2
10022: NOT
10023: IFFALSE 10027
// exit ;
10025: GO 10263
// InitHc_All ( ) ;
10027: CALL_OW 584
// for i in tmp do
10031: LD_ADDR_VAR 0 3
10035: PUSH
10036: LD_VAR 0 2
10040: PUSH
10041: FOR_IN
10042: IFFALSE 10159
// begin uc_side := 0 ;
10044: LD_ADDR_OWVAR 20
10048: PUSH
10049: LD_INT 0
10051: ST_TO_ADDR
// uc_nation := nation_nature ;
10052: LD_ADDR_OWVAR 21
10056: PUSH
10057: LD_INT 0
10059: ST_TO_ADDR
// hc_gallery :=  ;
10060: LD_ADDR_OWVAR 33
10064: PUSH
10065: LD_STRING 
10067: ST_TO_ADDR
// hc_name :=  ;
10068: LD_ADDR_OWVAR 26
10072: PUSH
10073: LD_STRING 
10075: ST_TO_ADDR
// hc_class := i [ 1 ] ;
10076: LD_ADDR_OWVAR 28
10080: PUSH
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: ST_TO_ADDR
// un := CreateHuman ;
10090: LD_ADDR_VAR 0 5
10094: PUSH
10095: CALL_OW 44
10099: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
10100: LD_VAR 0 5
10104: PPUSH
10105: LD_VAR 0 3
10109: PUSH
10110: LD_INT 2
10112: ARRAY
10113: PPUSH
10114: LD_VAR 0 3
10118: PUSH
10119: LD_INT 3
10121: ARRAY
10122: PPUSH
10123: LD_VAR 0 3
10127: PUSH
10128: LD_INT 4
10130: ARRAY
10131: PPUSH
10132: LD_INT 0
10134: PPUSH
10135: CALL 55330 0 5
// SetLives ( un , i [ 5 ] ) ;
10139: LD_VAR 0 5
10143: PPUSH
10144: LD_VAR 0 3
10148: PUSH
10149: LD_INT 5
10151: ARRAY
10152: PPUSH
10153: CALL_OW 234
// end ;
10157: GO 10041
10159: POP
10160: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
10161: LD_ADDR_VAR 0 3
10165: PUSH
10166: DOUBLE
10167: LD_INT 1
10169: DEC
10170: ST_TO_ADDR
10171: LD_INT 6
10173: PUSH
10174: LD_INT 5
10176: PUSH
10177: LD_INT 4
10179: PUSH
10180: LD_INT 3
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: LD_OWVAR 67
10193: ARRAY
10194: PUSH
10195: FOR_TO
10196: IFFALSE 10222
// begin PrepareApeman ( 5 ) ;
10198: LD_INT 5
10200: PPUSH
10201: CALL 49458 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10205: CALL_OW 44
10209: PPUSH
10210: LD_INT 5
10212: PPUSH
10213: LD_INT 0
10215: PPUSH
10216: CALL_OW 49
// end ;
10220: GO 10195
10222: POP
10223: POP
// for i in FilterUnitsInArea ( ruBaseArea , [ f_side , 0 ] ) do
10224: LD_ADDR_VAR 0 3
10228: PUSH
10229: LD_INT 26
10231: PPUSH
10232: LD_INT 22
10234: PUSH
10235: LD_INT 0
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PPUSH
10242: CALL_OW 70
10246: PUSH
10247: FOR_IN
10248: IFFALSE 10261
// RemoveUnit ( i ) ;
10250: LD_VAR 0 3
10254: PPUSH
10255: CALL_OW 64
10259: GO 10247
10261: POP
10262: POP
// end ;
10263: LD_VAR 0 1
10267: RET
// export function CreateDeposits ; var i , oil , sib ; begin
10268: LD_INT 0
10270: PPUSH
10271: PPUSH
10272: PPUSH
10273: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
10274: LD_ADDR_VAR 0 3
10278: PUSH
10279: LD_INT 91
10281: PUSH
10282: LD_INT 13
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 52
10291: PUSH
10292: LD_INT 23
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 115
10301: PUSH
10302: LD_INT 150
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: LIST
10313: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
10314: LD_ADDR_VAR 0 4
10318: PUSH
10319: LD_INT 82
10321: PUSH
10322: LD_INT 42
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PUSH
10329: LD_INT 128
10331: PUSH
10332: LD_INT 132
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: ST_TO_ADDR
// for i in oil do
10343: LD_ADDR_VAR 0 2
10347: PUSH
10348: LD_VAR 0 3
10352: PUSH
10353: FOR_IN
10354: IFFALSE 10433
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
10356: LD_VAR 0 2
10360: PUSH
10361: LD_INT 1
10363: ARRAY
10364: PPUSH
10365: LD_VAR 0 2
10369: PUSH
10370: LD_INT 2
10372: ARRAY
10373: PPUSH
10374: LD_INT 2
10376: PPUSH
10377: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10381: LD_VAR 0 2
10385: PUSH
10386: LD_INT 1
10388: ARRAY
10389: PPUSH
10390: LD_VAR 0 2
10394: PUSH
10395: LD_INT 2
10397: ARRAY
10398: PPUSH
10399: LD_INT 2
10401: PPUSH
10402: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10406: LD_VAR 0 2
10410: PUSH
10411: LD_INT 1
10413: ARRAY
10414: PPUSH
10415: LD_VAR 0 2
10419: PUSH
10420: LD_INT 2
10422: ARRAY
10423: PPUSH
10424: LD_INT 6
10426: PPUSH
10427: CALL_OW 441
// end ;
10431: GO 10353
10433: POP
10434: POP
// for i in sib do
10435: LD_ADDR_VAR 0 2
10439: PUSH
10440: LD_VAR 0 4
10444: PUSH
10445: FOR_IN
10446: IFFALSE 10525
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
10448: LD_VAR 0 2
10452: PUSH
10453: LD_INT 1
10455: ARRAY
10456: PPUSH
10457: LD_VAR 0 2
10461: PUSH
10462: LD_INT 2
10464: ARRAY
10465: PPUSH
10466: LD_INT 3
10468: PPUSH
10469: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10473: LD_VAR 0 2
10477: PUSH
10478: LD_INT 1
10480: ARRAY
10481: PPUSH
10482: LD_VAR 0 2
10486: PUSH
10487: LD_INT 2
10489: ARRAY
10490: PPUSH
10491: LD_INT 2
10493: PPUSH
10494: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10498: LD_VAR 0 2
10502: PUSH
10503: LD_INT 1
10505: ARRAY
10506: PPUSH
10507: LD_VAR 0 2
10511: PUSH
10512: LD_INT 2
10514: ARRAY
10515: PPUSH
10516: LD_INT 6
10518: PPUSH
10519: CALL_OW 441
// end ;
10523: GO 10445
10525: POP
10526: POP
// end ;
10527: LD_VAR 0 1
10531: RET
// export function LoadCam ; var i , tmp ; begin
10532: LD_INT 0
10534: PPUSH
10535: PPUSH
10536: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
10537: LD_ADDR_VAR 0 3
10541: PUSH
10542: LD_STRING 09_cameras
10544: PPUSH
10545: EMPTY
10546: PPUSH
10547: CALL_OW 30
10551: ST_TO_ADDR
// if not tmp then
10552: LD_VAR 0 3
10556: NOT
10557: IFFALSE 10561
// exit ;
10559: GO 10603
// for i in tmp do
10561: LD_ADDR_VAR 0 2
10565: PUSH
10566: LD_VAR 0 3
10570: PUSH
10571: FOR_IN
10572: IFFALSE 10601
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
10574: LD_VAR 0 2
10578: PUSH
10579: LD_INT 1
10581: ARRAY
10582: PPUSH
10583: LD_VAR 0 2
10587: PUSH
10588: LD_INT 2
10590: ARRAY
10591: PPUSH
10592: LD_INT 2
10594: PPUSH
10595: CALL_OW 244
10599: GO 10571
10601: POP
10602: POP
// end ;
10603: LD_VAR 0 1
10607: RET
// export function LoadTech ; var i , tmp , default ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// default := [ 2 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
10614: LD_ADDR_VAR 0 4
10618: PUSH
10619: LD_INT 2
10621: PUSH
10622: LD_INT 2
10624: PUSH
10625: LD_INT 0
10627: PUSH
10628: LD_INT 0
10630: PUSH
10631: LD_INT 0
10633: PUSH
10634: LD_INT 2
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: LD_INT 0
10642: PUSH
10643: LD_INT 1
10645: PUSH
10646: LD_INT 0
10648: PUSH
10649: LD_INT 2
10651: PUSH
10652: LD_INT 0
10654: PUSH
10655: LD_INT 0
10657: PUSH
10658: LD_INT 0
10660: PUSH
10661: LD_INT 2
10663: PUSH
10664: LD_INT 0
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: LD_INT 1
10672: PUSH
10673: LD_INT 0
10675: PUSH
10676: LD_INT 2
10678: PUSH
10679: LD_INT 1
10681: PUSH
10682: LD_INT 1
10684: PUSH
10685: LD_INT 0
10687: PUSH
10688: LD_INT 0
10690: PUSH
10691: LD_INT 0
10693: PUSH
10694: LD_INT 0
10696: PUSH
10697: LD_INT 0
10699: PUSH
10700: LD_INT 0
10702: PUSH
10703: LD_INT 0
10705: PUSH
10706: LD_INT 0
10708: PUSH
10709: LD_INT 0
10711: PUSH
10712: LD_INT 0
10714: PUSH
10715: LD_INT 0
10717: PUSH
10718: LD_INT 0
10720: PUSH
10721: LD_INT 2
10723: PUSH
10724: LD_INT 0
10726: PUSH
10727: LD_INT 0
10729: PUSH
10730: LD_INT 0
10732: PUSH
10733: LD_INT 1
10735: PUSH
10736: LD_INT 1
10738: PUSH
10739: LD_INT 1
10741: PUSH
10742: LD_INT 1
10744: PUSH
10745: LD_INT 0
10747: PUSH
10748: LD_INT 0
10750: PUSH
10751: LD_INT 2
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: LD_INT 2
10759: PUSH
10760: LD_INT 2
10762: PUSH
10763: LD_INT 2
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: LD_INT 1
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: LD_INT 0
10777: PUSH
10778: LD_INT 1
10780: PUSH
10781: LD_INT 0
10783: PUSH
10784: LD_INT 0
10786: PUSH
10787: LD_INT 0
10789: PUSH
10790: LD_INT 0
10792: PUSH
10793: LD_INT 0
10795: PUSH
10796: LD_INT 2
10798: PUSH
10799: LD_INT 1
10801: PUSH
10802: LD_INT 0
10804: PUSH
10805: LD_INT 0
10807: PUSH
10808: LD_INT 0
10810: PUSH
10811: LD_INT 0
10813: PUSH
10814: LD_INT 1
10816: PUSH
10817: LD_INT 0
10819: PUSH
10820: LD_INT 0
10822: PUSH
10823: LD_INT 2
10825: PUSH
10826: LD_INT 2
10828: PUSH
10829: LD_INT 0
10831: PUSH
10832: LD_INT 0
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: LD_INT 1
10840: PUSH
10841: LD_INT 1
10843: PUSH
10844: LD_INT 1
10846: PUSH
10847: LD_INT 1
10849: PUSH
10850: LD_INT 1
10852: PUSH
10853: LD_INT 1
10855: PUSH
10856: LD_INT 0
10858: PUSH
10859: LD_INT 0
10861: PUSH
10862: LD_INT 2
10864: PUSH
10865: LD_INT 2
10867: PUSH
10868: LD_INT 1
10870: PUSH
10871: LD_INT 1
10873: PUSH
10874: LD_INT 0
10876: PUSH
10877: LD_INT 0
10879: PUSH
10880: LD_INT 0
10882: PUSH
10883: LD_INT 1
10885: PUSH
10886: LD_INT 1
10888: PUSH
10889: LD_INT 1
10891: PUSH
10892: LD_INT 1
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: LD_INT 1
10900: PUSH
10901: LD_INT 1
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: LD_INT 1
10912: PUSH
10913: LD_INT 1
10915: PUSH
10916: LD_INT 1
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: ST_TO_ADDR
// tmp := LoadVariable ( 09_tech , default ) ;
11021: LD_ADDR_VAR 0 3
11025: PUSH
11026: LD_STRING 09_tech
11028: PPUSH
11029: LD_VAR 0 4
11033: PPUSH
11034: CALL_OW 30
11038: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
11039: LD_ADDR_VAR 0 2
11043: PUSH
11044: DOUBLE
11045: LD_INT 1
11047: DEC
11048: ST_TO_ADDR
11049: LD_VAR 0 3
11053: PPUSH
11054: CALL 17590 0 1
11058: PUSH
11059: FOR_TO
11060: IFFALSE 11087
// SetTech ( i , 2 , tmp [ i ] ) ;
11062: LD_VAR 0 2
11066: PPUSH
11067: LD_INT 2
11069: PPUSH
11070: LD_VAR 0 3
11074: PUSH
11075: LD_VAR 0 2
11079: ARRAY
11080: PPUSH
11081: CALL_OW 322
11085: GO 11059
11087: POP
11088: POP
// end ;
11089: LD_VAR 0 1
11093: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
11094: LD_INT 0
11096: PPUSH
11097: PPUSH
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
11102: LD_ADDR_VAR 0 3
11106: PUSH
11107: LD_STRING 09_buildings
11109: PPUSH
11110: EMPTY
11111: PPUSH
11112: CALL_OW 30
11116: ST_TO_ADDR
// for i in tmp do
11117: LD_ADDR_VAR 0 2
11121: PUSH
11122: LD_VAR 0 3
11126: PUSH
11127: FOR_IN
11128: IFFALSE 11522
// begin uc_side := 2 ;
11130: LD_ADDR_OWVAR 20
11134: PUSH
11135: LD_INT 2
11137: ST_TO_ADDR
// uc_nation := nation_arabian ;
11138: LD_ADDR_OWVAR 21
11142: PUSH
11143: LD_INT 2
11145: ST_TO_ADDR
// bc_type := i [ 1 ] ;
11146: LD_ADDR_OWVAR 42
11150: PUSH
11151: LD_VAR 0 2
11155: PUSH
11156: LD_INT 1
11158: ARRAY
11159: ST_TO_ADDR
// bc_level := i [ 5 ] ;
11160: LD_ADDR_OWVAR 43
11164: PUSH
11165: LD_VAR 0 2
11169: PUSH
11170: LD_INT 5
11172: ARRAY
11173: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
11174: LD_ADDR_OWVAR 44
11178: PUSH
11179: LD_INT 9
11181: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
11182: LD_ADDR_OWVAR 45
11186: PUSH
11187: LD_INT 9
11189: ST_TO_ADDR
// if i [ 7 ] then
11190: LD_VAR 0 2
11194: PUSH
11195: LD_INT 7
11197: ARRAY
11198: IFFALSE 11238
// begin bc_kind1 := i [ 7 ] ;
11200: LD_ADDR_OWVAR 44
11204: PUSH
11205: LD_VAR 0 2
11209: PUSH
11210: LD_INT 7
11212: ARRAY
11213: ST_TO_ADDR
// if i [ 8 ] then
11214: LD_VAR 0 2
11218: PUSH
11219: LD_INT 8
11221: ARRAY
11222: IFFALSE 11238
// bc_kind2 := i [ 8 ] ;
11224: LD_ADDR_OWVAR 45
11228: PUSH
11229: LD_VAR 0 2
11233: PUSH
11234: LD_INT 8
11236: ARRAY
11237: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
11238: LD_ADDR_VAR 0 4
11242: PUSH
11243: LD_VAR 0 2
11247: PUSH
11248: LD_INT 2
11250: ARRAY
11251: PPUSH
11252: LD_VAR 0 2
11256: PUSH
11257: LD_INT 3
11259: ARRAY
11260: PPUSH
11261: LD_VAR 0 2
11265: PUSH
11266: LD_INT 4
11268: ARRAY
11269: PPUSH
11270: CALL_OW 47
11274: ST_TO_ADDR
// if i [ 8 ] then
11275: LD_VAR 0 2
11279: PUSH
11280: LD_INT 8
11282: ARRAY
11283: IFFALSE 11303
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
11285: LD_VAR 0 4
11289: PPUSH
11290: LD_VAR 0 2
11294: PUSH
11295: LD_INT 8
11297: ARRAY
11298: PPUSH
11299: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
11303: LD_VAR 0 2
11307: PUSH
11308: LD_INT 1
11310: ARRAY
11311: PUSH
11312: LD_INT 0
11314: PUSH
11315: LD_INT 1
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: IN
11322: IFFALSE 11520
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
11324: LD_ADDR_VAR 0 6
11328: PUSH
11329: LD_STRING 09_materials
11331: PPUSH
11332: LD_INT 100
11334: PUSH
11335: LD_INT 50
11337: PUSH
11338: LD_INT 30
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: PUSH
11346: EMPTY
11347: LIST
11348: PPUSH
11349: CALL_OW 30
11353: ST_TO_ADDR
// for j := 1 to 3 do
11354: LD_ADDR_VAR 0 5
11358: PUSH
11359: DOUBLE
11360: LD_INT 1
11362: DEC
11363: ST_TO_ADDR
11364: LD_INT 3
11366: PUSH
11367: FOR_TO
11368: IFFALSE 11518
// if mat [ 1 ] [ j ] then
11370: LD_VAR 0 6
11374: PUSH
11375: LD_INT 1
11377: ARRAY
11378: PUSH
11379: LD_VAR 0 5
11383: ARRAY
11384: IFFALSE 11516
// if j > 1 then
11386: LD_VAR 0 5
11390: PUSH
11391: LD_INT 1
11393: GREATER
11394: IFFALSE 11457
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 35 , 25 , 20 , 10 ] [ Difficulty ] ) else
11396: LD_VAR 0 4
11400: PPUSH
11401: CALL_OW 274
11405: PPUSH
11406: LD_VAR 0 5
11410: PPUSH
11411: LD_VAR 0 6
11415: PUSH
11416: LD_INT 1
11418: ARRAY
11419: PUSH
11420: LD_VAR 0 5
11424: ARRAY
11425: PUSH
11426: LD_INT 35
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 20
11434: PUSH
11435: LD_INT 10
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: LD_OWVAR 67
11448: ARRAY
11449: PLUS
11450: PPUSH
11451: CALL_OW 277
11455: GO 11516
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 350 , 250 , 150 , 100 ] [ Difficulty ] ) ;
11457: LD_VAR 0 4
11461: PPUSH
11462: CALL_OW 274
11466: PPUSH
11467: LD_VAR 0 5
11471: PPUSH
11472: LD_VAR 0 6
11476: PUSH
11477: LD_INT 1
11479: ARRAY
11480: PUSH
11481: LD_VAR 0 5
11485: ARRAY
11486: PUSH
11487: LD_INT 350
11489: PUSH
11490: LD_INT 250
11492: PUSH
11493: LD_INT 150
11495: PUSH
11496: LD_INT 100
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: LD_OWVAR 67
11509: ARRAY
11510: PLUS
11511: PPUSH
11512: CALL_OW 277
11516: GO 11367
11518: POP
11519: POP
// end ; end ;
11520: GO 11127
11522: POP
11523: POP
// end ;
11524: LD_VAR 0 1
11528: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
11529: LD_INT 0
11531: PPUSH
11532: PPUSH
// area = ListEnvironmentArea ( area ) ;
11533: LD_ADDR_VAR 0 2
11537: PUSH
11538: LD_VAR 0 2
11542: PPUSH
11543: CALL_OW 353
11547: ST_TO_ADDR
// if bulldozer > 0 then
11548: LD_VAR 0 1
11552: PUSH
11553: LD_INT 0
11555: GREATER
11556: IFFALSE 11667
// for i = area downto 1 do
11558: LD_ADDR_VAR 0 4
11562: PUSH
11563: DOUBLE
11564: LD_VAR 0 2
11568: INC
11569: ST_TO_ADDR
11570: LD_INT 1
11572: PUSH
11573: FOR_DOWNTO
11574: IFFALSE 11665
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
11576: LD_VAR 0 2
11580: PUSH
11581: LD_VAR 0 4
11585: ARRAY
11586: PUSH
11587: LD_INT 1
11589: ARRAY
11590: PPUSH
11591: LD_VAR 0 2
11595: PUSH
11596: LD_VAR 0 4
11600: ARRAY
11601: PUSH
11602: LD_INT 2
11604: ARRAY
11605: PPUSH
11606: CALL_OW 351
11610: IFFALSE 11663
// if not HasTask ( bulldozer ) then
11612: LD_VAR 0 1
11616: PPUSH
11617: CALL_OW 314
11621: NOT
11622: IFFALSE 11663
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
11624: LD_VAR 0 1
11628: PPUSH
11629: LD_VAR 0 2
11633: PUSH
11634: LD_VAR 0 4
11638: ARRAY
11639: PUSH
11640: LD_INT 1
11642: ARRAY
11643: PPUSH
11644: LD_VAR 0 2
11648: PUSH
11649: LD_VAR 0 4
11653: ARRAY
11654: PUSH
11655: LD_INT 2
11657: ARRAY
11658: PPUSH
11659: CALL_OW 171
11663: GO 11573
11665: POP
11666: POP
// end ; end_of_file
11667: LD_VAR 0 3
11671: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11672: LD_VAR 0 1
11676: PPUSH
11677: LD_VAR 0 2
11681: PPUSH
11682: CALL 73864 0 2
// if GetControl ( vehicle ) = control_apeman then
11686: LD_VAR 0 1
11690: PPUSH
11691: CALL_OW 263
11695: PUSH
11696: LD_INT 5
11698: EQUAL
11699: IFFALSE 11711
// begin apeDriver := true ;
11701: LD_ADDR_EXP 8
11705: PUSH
11706: LD_INT 1
11708: ST_TO_ADDR
// exit ;
11709: GO 11764
// end ; if GetSide ( factory ) = 6 then
11711: LD_VAR 0 2
11715: PPUSH
11716: CALL_OW 255
11720: PUSH
11721: LD_INT 6
11723: EQUAL
11724: IFFALSE 11764
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
11726: LD_ADDR_EXP 35
11730: PUSH
11731: LD_EXP 35
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: CALL_OW 3
11743: ST_TO_ADDR
// ruTanks := Join ( ruTanks , vehicle ) ;
11744: LD_ADDR_EXP 36
11748: PUSH
11749: LD_EXP 36
11753: PPUSH
11754: LD_VAR 0 1
11758: PPUSH
11759: CALL 53190 0 2
11763: ST_TO_ADDR
// end ; end ;
11764: PPOPN 2
11766: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) = 6 and not See ( 2 , unit ) then
11767: LD_VAR 0 2
11771: PPUSH
11772: CALL_OW 255
11776: PUSH
11777: LD_INT 6
11779: EQUAL
11780: PUSH
11781: LD_INT 2
11783: PPUSH
11784: LD_VAR 0 2
11788: PPUSH
11789: CALL_OW 292
11793: NOT
11794: AND
11795: IFFALSE 11809
// SetLives ( unit , 1000 ) ;
11797: LD_VAR 0 2
11801: PPUSH
11802: LD_INT 1000
11804: PPUSH
11805: CALL_OW 234
// end ;
11809: PPOPN 2
11811: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area , fac , arm ;
11812: LD_INT 0
11814: PPUSH
11815: PPUSH
11816: PPUSH
11817: PPUSH
// begin if GetSide ( driver ) = 3 then
11818: LD_VAR 0 1
11822: PPUSH
11823: CALL_OW 255
11827: PUSH
11828: LD_INT 3
11830: EQUAL
11831: IFFALSE 11968
// begin tag := GetTag ( driver ) ;
11833: LD_ADDR_VAR 0 5
11837: PUSH
11838: LD_VAR 0 1
11842: PPUSH
11843: CALL_OW 110
11847: ST_TO_ADDR
// area := [ ruSpawn1AArea , ruSpawn2AArea , ruSpawn3AArea ] [ tag ] ;
11848: LD_ADDR_VAR 0 6
11852: PUSH
11853: LD_INT 21
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_INT 23
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: LD_VAR 0 5
11871: ARRAY
11872: ST_TO_ADDR
// if not area then
11873: LD_VAR 0 6
11877: NOT
11878: IFFALSE 11882
// exit ;
11880: GO 12236
// repeat ComMoveToArea ( driver , area ) ;
11882: LD_VAR 0 1
11886: PPUSH
11887: LD_VAR 0 6
11891: PPUSH
11892: CALL_OW 113
// wait ( 0 0$3 ) ;
11896: LD_INT 105
11898: PPUSH
11899: CALL_OW 67
// if not IsOk ( driver ) then
11903: LD_VAR 0 1
11907: PPUSH
11908: CALL_OW 302
11912: NOT
11913: IFFALSE 11917
// exit ;
11915: GO 12236
// until IsInArea ( driver , ruSpawn1Area ) or IsInArea ( driver , ruSpawn2Area ) or IsInArea ( driver , ruSpawn3Area ) ;
11917: LD_VAR 0 1
11921: PPUSH
11922: LD_INT 15
11924: PPUSH
11925: CALL_OW 308
11929: PUSH
11930: LD_VAR 0 1
11934: PPUSH
11935: LD_INT 17
11937: PPUSH
11938: CALL_OW 308
11942: OR
11943: PUSH
11944: LD_VAR 0 1
11948: PPUSH
11949: LD_INT 19
11951: PPUSH
11952: CALL_OW 308
11956: OR
11957: IFFALSE 11882
// RemoveUnit ( driver ) ;
11959: LD_VAR 0 1
11963: PPUSH
11964: CALL_OW 64
// end ; if GetSide ( driver ) = 6 then
11968: LD_VAR 0 1
11972: PPUSH
11973: CALL_OW 255
11977: PUSH
11978: LD_INT 6
11980: EQUAL
11981: IFFALSE 12236
// begin ComMoveXY ( driver , 97 , 139 ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: LD_INT 97
11990: PPUSH
11991: LD_INT 139
11993: PPUSH
11994: CALL_OW 111
// if GetLives ( driver ) < 1000 then
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 256
12007: PUSH
12008: LD_INT 1000
12010: LESS
12011: IFFALSE 12025
// SetTag ( driver , tHeal ) ;
12013: LD_VAR 0 1
12017: PPUSH
12018: LD_INT 3
12020: PPUSH
12021: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
12025: LD_INT 35
12027: PPUSH
12028: CALL_OW 67
// if IsDead ( driver ) then
12032: LD_VAR 0 1
12036: PPUSH
12037: CALL_OW 301
12041: IFFALSE 12045
// exit ;
12043: GO 12236
// until GetLives ( driver ) = 1000 ;
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 256
12054: PUSH
12055: LD_INT 1000
12057: EQUAL
12058: IFFALSE 12025
// SetTag ( driver , 0 ) ;
12060: LD_VAR 0 1
12064: PPUSH
12065: LD_INT 0
12067: PPUSH
12068: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12072: LD_ADDR_VAR 0 7
12076: PUSH
12077: LD_INT 26
12079: PPUSH
12080: LD_INT 22
12082: PUSH
12083: LD_INT 6
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 30
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 50
12102: PUSH
12103: EMPTY
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: PPUSH
12111: CALL_OW 70
12115: ST_TO_ADDR
// if fac then
12116: LD_VAR 0 7
12120: IFFALSE 12142
// begin ComEnterUnit ( driver , fac [ 1 ] ) ;
12122: LD_VAR 0 1
12126: PPUSH
12127: LD_VAR 0 7
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PPUSH
12136: CALL_OW 120
// exit ;
12140: GO 12236
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_barracks ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
12142: LD_ADDR_VAR 0 8
12146: PUSH
12147: LD_INT 26
12149: PPUSH
12150: LD_INT 22
12152: PUSH
12153: LD_INT 6
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 30
12162: PUSH
12163: LD_INT 5
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 3
12172: PUSH
12173: LD_INT 62
12175: PUSH
12176: EMPTY
12177: LIST
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: LD_INT 50
12185: PUSH
12186: EMPTY
12187: LIST
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: PPUSH
12195: CALL_OW 70
12199: ST_TO_ADDR
// if arm then
12200: LD_VAR 0 8
12204: IFFALSE 12236
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
12206: LD_VAR 0 1
12210: PPUSH
12211: LD_VAR 0 8
12215: PUSH
12216: LD_INT 1
12218: ARRAY
12219: PPUSH
12220: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
12224: LD_VAR 0 1
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 183
// end ; end ; end ;
12236: PPOPN 8
12238: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
12239: LD_VAR 0 3
12243: PUSH
12244: LD_INT 17
12246: EQUAL
12247: IFFALSE 12257
// kamikazeTrained := true ;
12249: LD_ADDR_EXP 6
12253: PUSH
12254: LD_INT 1
12256: ST_TO_ADDR
// end ;
12257: PPOPN 3
12259: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
12260: LD_VAR 0 1
12264: PPUSH
12265: CALL 73744 0 1
// if un in ruTanks then
12269: LD_VAR 0 1
12273: PUSH
12274: LD_EXP 36
12278: IN
12279: IFFALSE 12342
// ruConstructList := Join ( ruConstructList , [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ) ;
12281: LD_ADDR_EXP 35
12285: PUSH
12286: LD_EXP 35
12290: PPUSH
12291: LD_VAR 0 1
12295: PPUSH
12296: CALL_OW 265
12300: PUSH
12301: LD_VAR 0 1
12305: PPUSH
12306: CALL_OW 262
12310: PUSH
12311: LD_VAR 0 1
12315: PPUSH
12316: CALL_OW 263
12320: PUSH
12321: LD_VAR 0 1
12325: PPUSH
12326: CALL_OW 264
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: PPUSH
12337: CALL 53190 0 2
12341: ST_TO_ADDR
// if un = Schulz then
12342: LD_VAR 0 1
12346: PUSH
12347: LD_EXP 24
12351: EQUAL
12352: IFFALSE 12361
// YouLost ( Schulz ) ;
12354: LD_STRING Schulz
12356: PPUSH
12357: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
12361: LD_VAR 0 1
12365: PUSH
12366: LD_EXP 13
12370: EQUAL
12371: PUSH
12372: LD_VAR 0 1
12376: PPUSH
12377: CALL_OW 255
12381: PUSH
12382: LD_INT 2
12384: EQUAL
12385: AND
12386: IFFALSE 12395
// YouLost ( Heike ) ;
12388: LD_STRING Heike
12390: PPUSH
12391: CALL_OW 104
// end ; end_of_file
12395: PPOPN 1
12397: END
// export function Action ; begin
12398: LD_INT 0
12400: PPUSH
// InGameOn ;
12401: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
12405: LD_INT 1
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: LD_INT 2
12413: PPUSH
12414: LD_INT 32963
12416: NEG
12417: PPUSH
12418: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
12422: LD_INT 1
12424: PPUSH
12425: LD_INT 1
12427: PPUSH
12428: LD_INT 2
12430: PPUSH
12431: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
12435: LD_INT 173
12437: PPUSH
12438: LD_INT 149
12440: PPUSH
12441: CALL_OW 86
// PrepareExtraRussianBase ;
12445: CALL 3364 0 0
// wait ( 0 0$2 ) ;
12449: LD_INT 70
12451: PPUSH
12452: CALL_OW 67
// InGameOff ;
12456: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
12460: LD_STRING M6
12462: PPUSH
12463: CALL_OW 337
// if Count ( UnitFilter ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] , [ f_ok ] ) ) = Count ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] ) then
12467: LD_EXP 14
12471: PUSH
12472: LD_EXP 15
12476: PUSH
12477: LD_EXP 17
12481: PUSH
12482: LD_EXP 18
12486: PUSH
12487: LD_EXP 20
12491: PUSH
12492: LD_EXP 21
12496: PUSH
12497: LD_EXP 22
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: PPUSH
12511: LD_INT 50
12513: PUSH
12514: EMPTY
12515: LIST
12516: PPUSH
12517: CALL_OW 72
12521: PPUSH
12522: CALL 17590 0 1
12526: PUSH
12527: LD_EXP 14
12531: PUSH
12532: LD_EXP 15
12536: PUSH
12537: LD_EXP 17
12541: PUSH
12542: LD_EXP 18
12546: PUSH
12547: LD_EXP 20
12551: PUSH
12552: LD_EXP 21
12556: PUSH
12557: LD_EXP 22
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: PPUSH
12571: CALL 17590 0 1
12575: EQUAL
12576: IFFALSE 12585
// SetAchievement ( ACH_KNIGHT ) ;
12578: LD_STRING ACH_KNIGHT
12580: PPUSH
12581: CALL_OW 543
// SaveForQuickRestart ;
12585: CALL_OW 22
// end ;
12589: LD_VAR 0 1
12593: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
12594: LD_EXP 5
12598: PUSH
12599: LD_EXP 33
12603: PPUSH
12604: CALL_OW 302
12608: AND
12609: PUSH
12610: LD_EXP 13
12614: PPUSH
12615: CALL_OW 302
12619: AND
12620: PUSH
12621: LD_EXP 13
12625: PPUSH
12626: LD_EXP 33
12630: PPUSH
12631: CALL_OW 296
12635: PUSH
12636: LD_INT 9
12638: LESS
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_INT 2
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 91
12652: PUSH
12653: LD_EXP 13
12657: PUSH
12658: LD_INT 7
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 21
12668: PUSH
12669: LD_INT 3
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: OR
12686: AND
12687: IFFALSE 12841
12689: GO 12691
12691: DISABLE
// begin ComExit ( Rolf ) ;
12692: LD_EXP 33
12696: PPUSH
12697: CALL 53588 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
12701: LD_EXP 33
12705: PPUSH
12706: LD_EXP 13
12710: PPUSH
12711: CALL_OW 172
// InGameOn ;
12715: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
12719: LD_EXP 13
12723: PPUSH
12724: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
12728: LD_EXP 33
12732: PPUSH
12733: LD_STRING DRf-Reunion-1
12735: PPUSH
12736: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
12740: LD_EXP 33
12744: PPUSH
12745: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
12749: LD_EXP 13
12753: PPUSH
12754: LD_EXP 33
12758: PPUSH
12759: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
12763: LD_EXP 33
12767: PPUSH
12768: LD_EXP 13
12772: PPUSH
12773: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
12777: LD_EXP 13
12781: PPUSH
12782: LD_STRING DH-Reunion-2
12784: PPUSH
12785: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
12789: LD_EXP 33
12793: PPUSH
12794: LD_STRING DRf-Reunion-3
12796: PPUSH
12797: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
12801: LD_EXP 13
12805: PPUSH
12806: LD_STRING DH-Reunion-4
12808: PPUSH
12809: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
12813: LD_EXP 33
12817: PPUSH
12818: LD_STRING DRf-Reunion-5
12820: PPUSH
12821: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
12825: LD_EXP 13
12829: PPUSH
12830: LD_STRING DH-Reunion-6
12832: PPUSH
12833: CALL_OW 88
// InGameOff ;
12837: CALL_OW 9
// end ;
12841: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
12842: LD_EXP 5
12846: NOT
12847: PUSH
12848: LD_INT 22
12850: PUSH
12851: LD_INT 2
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 91
12860: PUSH
12861: LD_EXP 24
12865: PUSH
12866: LD_INT 10
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 21
12876: PUSH
12877: LD_INT 3
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: PPUSH
12889: CALL_OW 69
12893: AND
12894: IFFALSE 13681
12896: GO 12898
12898: DISABLE
// begin InGameOn ;
12899: CALL_OW 8
// ComExit ( Schulz ) ;
12903: LD_EXP 24
12907: PPUSH
12908: CALL 53588 0 1
// CenterNowOnUnits ( Schulz ) ;
12912: LD_EXP 24
12916: PPUSH
12917: CALL_OW 87
// wait ( 0 0$0.3 ) ;
12921: LD_INT 10
12923: PPUSH
12924: CALL_OW 67
// DialogueOn ;
12928: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
12932: LD_EXP 24
12936: PPUSH
12937: LD_STRING DL-Def-1
12939: PPUSH
12940: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
12944: LD_EXP 24
12948: PPUSH
12949: LD_STRING DL-Def-2
12951: PPUSH
12952: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
12956: LD_EXP 24
12960: PPUSH
12961: LD_STRING DL-Def-3
12963: PPUSH
12964: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
12968: LD_EXP 25
12972: PPUSH
12973: CALL_OW 302
12977: PUSH
12978: LD_EXP 23
12982: PPUSH
12983: CALL_OW 302
12987: AND
12988: IFFALSE 13335
// begin Say ( Basim , DBs-Def-4 ) ;
12990: LD_EXP 25
12994: PPUSH
12995: LD_STRING DBs-Def-4
12997: PPUSH
12998: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13002: LD_EXP 25
13006: PPUSH
13007: LD_STRING DBs-Def-5
13009: PPUSH
13010: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
13014: LD_EXP 23
13018: PPUSH
13019: LD_STRING DA-Def-6
13021: PPUSH
13022: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
13026: LD_EXP 25
13030: PPUSH
13031: LD_STRING DBs-Def-7
13033: PPUSH
13034: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
13038: LD_EXP 23
13042: PPUSH
13043: LD_STRING DA-Def-8
13045: PPUSH
13046: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
13050: LD_EXP 23
13054: PPUSH
13055: LD_STRING DA-Def-9
13057: PPUSH
13058: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
13062: LD_EXP 25
13066: PPUSH
13067: LD_STRING DBs-Def-10
13069: PPUSH
13070: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
13074: LD_EXP 23
13078: PPUSH
13079: LD_STRING DA-Def-11
13081: PPUSH
13082: CALL_OW 88
// if Query ( QTech ) = 1 then
13086: LD_STRING QTech
13088: PPUSH
13089: CALL_OW 97
13093: PUSH
13094: LD_INT 1
13096: EQUAL
13097: IFFALSE 13205
// begin Say ( Schulz , DL-Tech-1 ) ;
13099: LD_EXP 24
13103: PPUSH
13104: LD_STRING DL-Tech-1
13106: PPUSH
13107: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
13111: LD_EXP 24
13115: PPUSH
13116: LD_STRING DL-Tech-2
13118: PPUSH
13119: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
13123: LD_EXP 23
13127: PPUSH
13128: LD_STRING DA-Tech-3
13130: PPUSH
13131: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
13135: LD_EXP 18
13139: PPUSH
13140: LD_STRING DK-Tech-4
13142: PPUSH
13143: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
13147: LD_EXP 18
13151: PPUSH
13152: LD_STRING DK-Tech-5
13154: PPUSH
13155: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
13159: LD_EXP 25
13163: PPUSH
13164: LD_STRING DBs-Tech-6
13166: PPUSH
13167: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
13171: LD_EXP 18
13175: PPUSH
13176: LD_STRING DK-Tech-7
13178: PPUSH
13179: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
13183: LD_INT 3
13185: PPUSH
13186: LD_INT 2
13188: PPUSH
13189: LD_INT 1
13191: PPUSH
13192: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
13196: LD_STRING M7a
13198: PPUSH
13199: CALL_OW 604
// end else
13203: GO 13333
// begin Say ( Schulz , DL-Tech-a-1 ) ;
13205: LD_EXP 24
13209: PPUSH
13210: LD_STRING DL-Tech-a-1
13212: PPUSH
13213: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
13217: LD_EXP 24
13221: PPUSH
13222: LD_STRING DL-Tech-a-2
13224: PPUSH
13225: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
13229: LD_EXP 25
13233: PPUSH
13234: LD_STRING DBs-Tech-a-3
13236: PPUSH
13237: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
13241: LD_EXP 18
13245: PPUSH
13246: LD_STRING DK-Tech-a-4
13248: PPUSH
13249: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
13253: LD_EXP 18
13257: PPUSH
13258: LD_STRING DK-Tech-a-5
13260: PPUSH
13261: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
13265: LD_EXP 23
13269: PPUSH
13270: LD_STRING DA-Tech-a-6
13272: PPUSH
13273: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
13277: LD_EXP 23
13281: PPUSH
13282: LD_STRING DA-Tech-a-7
13284: PPUSH
13285: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
13289: LD_EXP 24
13293: PPUSH
13294: LD_STRING DL-Tech-a-8
13296: PPUSH
13297: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
13301: LD_EXP 23
13305: PPUSH
13306: LD_STRING DA-Tech-a-9
13308: PPUSH
13309: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13313: LD_INT 4
13315: PPUSH
13316: LD_INT 2
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
13326: LD_STRING M7b
13328: PPUSH
13329: CALL_OW 604
// end ; end else
13333: GO 13383
// if IsOk ( Basim ) then
13335: LD_EXP 25
13339: PPUSH
13340: CALL_OW 302
13344: IFFALSE 13383
// begin Say ( Basim , DBs-Def-4 ) ;
13346: LD_EXP 25
13350: PPUSH
13351: LD_STRING DBs-Def-4
13353: PPUSH
13354: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13358: LD_EXP 25
13362: PPUSH
13363: LD_STRING DBs-Def-5
13365: PPUSH
13366: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13370: LD_INT 4
13372: PPUSH
13373: LD_INT 2
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: CALL_OW 322
// end ; DialogueOff ;
13383: CALL_OW 7
// InGameOff ;
13387: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
13391: LD_STRING M7
13393: PPUSH
13394: CALL_OW 337
// playerInBase := true ;
13398: LD_ADDR_EXP 5
13402: PUSH
13403: LD_INT 1
13405: ST_TO_ADDR
// wait ( 0 0$30 ) ;
13406: LD_INT 1050
13408: PPUSH
13409: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13413: LD_INT 35
13415: PPUSH
13416: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) ;
13420: LD_INT 22
13422: PUSH
13423: LD_INT 2
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 50
13432: PUSH
13433: EMPTY
13434: LIST
13435: PUSH
13436: LD_INT 3
13438: PUSH
13439: LD_INT 57
13441: PUSH
13442: EMPTY
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 30
13451: PUSH
13452: LD_INT 30
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 69
13469: IFFALSE 13413
// if IsOk ( Kurt ) then
13471: LD_EXP 22
13475: PPUSH
13476: CALL_OW 302
13480: IFFALSE 13668
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
13482: LD_INT 22
13484: PUSH
13485: LD_INT 2
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 50
13494: PUSH
13495: EMPTY
13496: LIST
13497: PUSH
13498: LD_INT 3
13500: PUSH
13501: LD_INT 57
13503: PUSH
13504: EMPTY
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 30
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: PPUSH
13527: CALL_OW 69
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: PPUSH
13536: CALL_OW 87
// DialogueOn ;
13540: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
13544: LD_EXP 22
13548: PPUSH
13549: LD_STRING DKs-Med-1
13551: PPUSH
13552: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
13556: LD_EXP 22
13560: PPUSH
13561: LD_STRING DKs-Med-2
13563: PPUSH
13564: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
13568: LD_EXP 24
13572: PPUSH
13573: LD_STRING DL-Med-3
13575: PPUSH
13576: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
13580: LD_EXP 24
13584: PPUSH
13585: LD_STRING DL-Med-4
13587: PPUSH
13588: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
13592: LD_EXP 22
13596: PPUSH
13597: LD_STRING DKs-Med-5
13599: PPUSH
13600: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
13604: LD_EXP 22
13608: PPUSH
13609: LD_STRING DKs-Med-6
13611: PPUSH
13612: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
13616: LD_EXP 22
13620: PPUSH
13621: LD_STRING DKs-Med-7
13623: PPUSH
13624: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
13628: LD_EXP 22
13632: PPUSH
13633: LD_STRING DKs-Med-8
13635: PPUSH
13636: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
13640: LD_EXP 24
13644: PPUSH
13645: LD_STRING DL-Med-9
13647: PPUSH
13648: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
13652: LD_EXP 24
13656: PPUSH
13657: LD_STRING DL-Med-10
13659: PPUSH
13660: CALL_OW 88
// DialogueOff ;
13664: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
13668: LD_STRING M8-
13670: PUSH
13671: LD_OWVAR 67
13675: STR
13676: PPUSH
13677: CALL_OW 337
// end ;
13681: END
// every 0 0$1 trigger playerInBase do
13682: LD_EXP 5
13686: IFFALSE 13706
13688: GO 13690
13690: DISABLE
// begin enable ;
13691: ENABLE
// missionTime := missionTime + 0 0$1 ;
13692: LD_ADDR_EXP 9
13696: PUSH
13697: LD_EXP 9
13701: PUSH
13702: LD_INT 35
13704: PLUS
13705: ST_TO_ADDR
// end ;
13706: END
// every 0 0$2 trigger playerInBase and apeDriver do
13707: LD_EXP 5
13711: PUSH
13712: LD_EXP 8
13716: AND
13717: IFFALSE 14114
13719: GO 13721
13721: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
13722: LD_STRING M7a_out
13724: PPUSH
13725: CALL_OW 337
// wait ( 0 0$2 ) ;
13729: LD_INT 70
13731: PPUSH
13732: CALL_OW 67
// DialogueOn ;
13736: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
13740: LD_INT 22
13742: PUSH
13743: LD_INT 2
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 33
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PPUSH
13764: CALL_OW 69
13768: PUSH
13769: LD_INT 1
13771: ARRAY
13772: PPUSH
13773: CALL_OW 87
// if IsOk ( Mia ) then
13777: LD_EXP 27
13781: PPUSH
13782: CALL_OW 302
13786: IFFALSE 13812
// begin Say ( Mia , DMm-Apedrive-1 ) ;
13788: LD_EXP 27
13792: PPUSH
13793: LD_STRING DMm-Apedrive-1
13795: PPUSH
13796: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
13800: LD_EXP 15
13804: PPUSH
13805: LD_STRING DM-Apedrive-2
13807: PPUSH
13808: CALL_OW 88
// end ; if IsOk ( Jenna ) then
13812: LD_EXP 29
13816: PPUSH
13817: CALL_OW 302
13821: IFFALSE 14110
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
13823: LD_EXP 29
13827: PPUSH
13828: LD_STRING DJm-Apedrive-3
13830: PPUSH
13831: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
13835: LD_EXP 29
13839: PPUSH
13840: LD_STRING DJm-Apedrive-4
13842: PPUSH
13843: CALL_OW 88
// if IsOk ( Basim ) then
13847: LD_EXP 25
13851: PPUSH
13852: CALL_OW 302
13856: IFFALSE 14110
// begin Say ( Basim , DBs-Apedrive-5 ) ;
13858: LD_EXP 25
13862: PPUSH
13863: LD_STRING DBs-Apedrive-5
13865: PPUSH
13866: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
13870: LD_EXP 25
13874: PPUSH
13875: LD_STRING DBs-Apedrive-6
13877: PPUSH
13878: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
13882: LD_EXP 29
13886: PPUSH
13887: LD_STRING DJm-Apedrive-7
13889: PPUSH
13890: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
13894: LD_EXP 25
13898: PPUSH
13899: LD_STRING DBs-Apedrive-8
13901: PPUSH
13902: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
13906: LD_EXP 29
13910: PPUSH
13911: LD_STRING DJm-Apedrive-9
13913: PPUSH
13914: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
13918: LD_EXP 25
13922: PPUSH
13923: LD_STRING DBs-Apedrive-10
13925: PPUSH
13926: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
13930: LD_EXP 29
13934: PPUSH
13935: LD_STRING DJm-Apedrive-11
13937: PPUSH
13938: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
13942: LD_EXP 18
13946: PPUSH
13947: LD_STRING DK-Apedrive-12
13949: PPUSH
13950: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
13954: LD_EXP 29
13958: PPUSH
13959: LD_STRING DJm-Apedrive-13
13961: PPUSH
13962: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
13966: LD_EXP 29
13970: PPUSH
13971: LD_STRING DJm-Apedrive-14
13973: PPUSH
13974: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
13978: LD_EXP 29
13982: PPUSH
13983: LD_STRING DJm-Apedrive-15
13985: PPUSH
13986: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
13990: LD_EXP 29
13994: PPUSH
13995: LD_STRING DJm-Apedrive-16
13997: PPUSH
13998: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
14002: LD_EXP 27
14006: PPUSH
14007: LD_STRING DMm-Apedrive-17
14009: PPUSH
14010: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
14014: LD_EXP 27
14018: PPUSH
14019: LD_STRING DMm-Apedrive-18
14021: PPUSH
14022: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
14026: LD_EXP 27
14030: PPUSH
14031: LD_STRING DMm-Apedrive-19
14033: PPUSH
14034: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
14038: LD_EXP 27
14042: PPUSH
14043: LD_STRING DMm-Apedrive-20
14045: PPUSH
14046: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
14050: LD_EXP 18
14054: PPUSH
14055: LD_STRING DK-Apedrive-21
14057: PPUSH
14058: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
14062: LD_EXP 18
14066: PPUSH
14067: LD_STRING DK-Apedrive-22
14069: PPUSH
14070: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
14074: LD_EXP 13
14078: PPUSH
14079: LD_STRING DH-Apedrive-23
14081: PPUSH
14082: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
14086: LD_EXP 26
14090: PPUSH
14091: LD_STRING DLt-Apedrive-24
14093: PPUSH
14094: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
14098: LD_EXP 26
14102: PPUSH
14103: LD_STRING DLt-Apedrive-25
14105: PPUSH
14106: CALL_OW 88
// end ; end ; DialogueOff ;
14110: CALL_OW 7
// end ;
14114: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
14115: LD_EXP 5
14119: PUSH
14120: LD_EXP 6
14124: AND
14125: IFFALSE 14137
14127: GO 14129
14129: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
14130: LD_STRING M7b_out
14132: PPUSH
14133: CALL_OW 337
14137: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
14138: LD_EXP 5
14142: PUSH
14143: LD_INT 22
14145: PUSH
14146: LD_INT 2
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: LD_INT 30
14155: PUSH
14156: LD_INT 3
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 3
14165: PUSH
14166: LD_INT 58
14168: PUSH
14169: EMPTY
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: PPUSH
14181: CALL_OW 69
14185: AND
14186: PUSH
14187: LD_EXP 13
14191: PPUSH
14192: CALL_OW 302
14196: AND
14197: PUSH
14198: LD_EXP 24
14202: PPUSH
14203: CALL_OW 302
14207: AND
14208: IFFALSE 14381
14210: GO 14212
14212: DISABLE
// begin DialogueOn ;
14213: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
14217: LD_EXP 24
14221: PPUSH
14222: LD_STRING DL-Mort-1
14224: PPUSH
14225: CALL_OW 88
// if IsOk ( Markov ) then
14229: LD_EXP 20
14233: PPUSH
14234: CALL_OW 302
14238: IFFALSE 14291
// begin Say ( Heike , DH-Mort-2 ) ;
14240: LD_EXP 13
14244: PPUSH
14245: LD_STRING DH-Mort-2
14247: PPUSH
14248: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
14252: LD_EXP 20
14256: PPUSH
14257: LD_STRING DMar-Mort-3
14259: PPUSH
14260: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
14264: LD_EXP 20
14268: PPUSH
14269: LD_STRING DMar-Mort-4
14271: PPUSH
14272: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14276: LD_INT 88
14278: PPUSH
14279: LD_INT 2
14281: PPUSH
14282: LD_INT 1
14284: PPUSH
14285: CALL_OW 322
// end else
14289: GO 14377
// if IsOk ( Olaf ) then
14291: LD_EXP 21
14295: PPUSH
14296: CALL_OW 302
14300: IFFALSE 14353
// begin Say ( Heike , DH-Mort-a-2 ) ;
14302: LD_EXP 13
14306: PPUSH
14307: LD_STRING DH-Mort-a-2
14309: PPUSH
14310: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
14314: LD_EXP 21
14318: PPUSH
14319: LD_STRING DO-Mort-a-3
14321: PPUSH
14322: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
14326: LD_EXP 21
14330: PPUSH
14331: LD_STRING DO-Mort-a-4
14333: PPUSH
14334: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14338: LD_INT 88
14340: PPUSH
14341: LD_INT 2
14343: PPUSH
14344: LD_INT 1
14346: PPUSH
14347: CALL_OW 322
// end else
14351: GO 14377
// begin Say ( Heike , DH-Mort-a-5 ) ;
14353: LD_EXP 13
14357: PPUSH
14358: LD_STRING DH-Mort-a-5
14360: PPUSH
14361: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
14365: LD_EXP 13
14369: PPUSH
14370: LD_STRING DH-Mort-a-6
14372: PPUSH
14373: CALL_OW 88
// end ; DialogueOff ;
14377: CALL_OW 7
// end ;
14381: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
14382: LD_EXP 18
14386: PPUSH
14387: CALL_OW 256
14391: PUSH
14392: LD_INT 10
14394: LESS
14395: IFFALSE 14497
14397: GO 14399
14399: DISABLE
// begin DialogueOn ;
14400: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14404: LD_EXP 18
14408: PPUSH
14409: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
14413: LD_EXP 18
14417: PPUSH
14418: LD_STRING DK-Death-1
14420: PPUSH
14421: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
14425: LD_EXP 18
14429: PPUSH
14430: LD_STRING DK-Death-2
14432: PPUSH
14433: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
14437: LD_EXP 18
14441: PPUSH
14442: LD_STRING DK-Death-3
14444: PPUSH
14445: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
14449: LD_EXP 13
14453: PPUSH
14454: LD_STRING DH-Death-4
14456: PPUSH
14457: CALL_OW 88
// if IsOk ( Markov ) then
14461: LD_EXP 20
14465: PPUSH
14466: CALL_OW 302
14470: IFFALSE 14484
// Say ( Markov , DMar-Death-5 ) ;
14472: LD_EXP 20
14476: PPUSH
14477: LD_STRING DMar-Death-5
14479: PPUSH
14480: CALL_OW 88
// DialogueOff ;
14484: CALL_OW 7
// KillUnit ( Kaia ) ;
14488: LD_EXP 18
14492: PPUSH
14493: CALL_OW 66
// end ;
14497: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib ;
14498: LD_EXP 10
14502: PUSH
14503: LD_INT 81
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 50
14515: PUSH
14516: EMPTY
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: NOT
14528: AND
14529: IFFALSE 15377
14531: GO 14533
14533: DISABLE
14534: LD_INT 0
14536: PPUSH
14537: PPUSH
// begin InGameOn ;
14538: CALL_OW 8
// DialogueOn ;
14542: CALL_OW 6
// if time09 + time09c + tick < 80 80$00 then
14546: LD_EXP 3
14550: PUSH
14551: LD_EXP 4
14555: PLUS
14556: PUSH
14557: LD_OWVAR 1
14561: PLUS
14562: PUSH
14563: LD_INT 168000
14565: LESS
14566: IFFALSE 14575
// SetAchievement ( ACH_HSPEED_9 ) ;
14568: LD_STRING ACH_HSPEED_9
14570: PPUSH
14571: CALL_OW 543
// CenterOnNow ( Schulz ) ;
14575: LD_EXP 24
14579: PPUSH
14580: CALL 57143 0 1
// dwait ( 0 0$0.3 ) ;
14584: LD_INT 10
14586: PPUSH
14587: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
14591: LD_EXP 24
14595: PPUSH
14596: LD_STRING DL-End-1
14598: PPUSH
14599: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
14603: LD_EXP 13
14607: PPUSH
14608: LD_STRING DH-End-2
14610: PPUSH
14611: CALL_OW 88
// if IsOk ( Kaia ) then
14615: LD_EXP 18
14619: PPUSH
14620: CALL_OW 302
14624: IFFALSE 14686
// begin SaveCharacters ( Kaia , 09_Kaia ) ;
14626: LD_EXP 18
14630: PPUSH
14631: LD_STRING 09_Kaia
14633: PPUSH
14634: CALL_OW 38
// Say ( Kaia , DK-End-a-3 ) ;
14638: LD_EXP 18
14642: PPUSH
14643: LD_STRING DK-End-a-3
14645: PPUSH
14646: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
14650: LD_EXP 18
14654: PPUSH
14655: LD_STRING DK-End-a-4
14657: PPUSH
14658: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
14662: LD_EXP 24
14666: PPUSH
14667: LD_STRING DL-End-a-5
14669: PPUSH
14670: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
14674: LD_EXP 24
14678: PPUSH
14679: LD_STRING DL-End-a-6
14681: PPUSH
14682: CALL_OW 88
// end ; SaveCharacters ( Heike , 09_Heike ) ;
14686: LD_EXP 13
14690: PPUSH
14691: LD_STRING 09_Heike
14693: PPUSH
14694: CALL_OW 38
// SaveCharacters ( Schulz , 09_Schulz ) ;
14698: LD_EXP 24
14702: PPUSH
14703: LD_STRING 09_Schulz
14705: PPUSH
14706: CALL_OW 38
// if IsOk ( Basim ) then
14710: LD_EXP 25
14714: PPUSH
14715: CALL_OW 302
14719: IFFALSE 14733
// SaveCharacters ( Basim , 09_Basim ) ;
14721: LD_EXP 25
14725: PPUSH
14726: LD_STRING 09_Basim
14728: PPUSH
14729: CALL_OW 38
// if IsOk ( Givi ) then
14733: LD_EXP 14
14737: PPUSH
14738: CALL_OW 302
14742: IFFALSE 14756
// SaveCharacters ( Givi , 09_Givi ) ;
14744: LD_EXP 14
14748: PPUSH
14749: LD_STRING 09_Givi
14751: PPUSH
14752: CALL_OW 38
// if IsOk ( Mike ) then
14756: LD_EXP 15
14760: PPUSH
14761: CALL_OW 302
14765: IFFALSE 14779
// SaveCharacters ( Mike , 09_Mike ) ;
14767: LD_EXP 15
14771: PPUSH
14772: LD_STRING 09_Mike
14774: PPUSH
14775: CALL_OW 38
// if IsOk ( Ibrahim ) then
14779: LD_EXP 16
14783: PPUSH
14784: CALL_OW 302
14788: IFFALSE 14802
// SaveCharacters ( Ibrahim , 09_Ibrahim ) ;
14790: LD_EXP 16
14794: PPUSH
14795: LD_STRING 09_Ibrahim
14797: PPUSH
14798: CALL_OW 38
// if IsOk ( Kamil ) then
14802: LD_EXP 17
14806: PPUSH
14807: CALL_OW 302
14811: IFFALSE 14825
// SaveCharacters ( Kamil , 09_Kamil ) ;
14813: LD_EXP 17
14817: PPUSH
14818: LD_STRING 09_Kamil
14820: PPUSH
14821: CALL_OW 38
// if IsOk ( Sophia ) then
14825: LD_EXP 19
14829: PPUSH
14830: CALL_OW 302
14834: IFFALSE 14848
// SaveCharacters ( Sophia , 09_Sophia ) ;
14836: LD_EXP 19
14840: PPUSH
14841: LD_STRING 09_Sophia
14843: PPUSH
14844: CALL_OW 38
// if IsOk ( Markov ) then
14848: LD_EXP 20
14852: PPUSH
14853: CALL_OW 302
14857: IFFALSE 14871
// SaveCharacters ( Markov , 09_Markov ) ;
14859: LD_EXP 20
14863: PPUSH
14864: LD_STRING 09_Markov
14866: PPUSH
14867: CALL_OW 38
// if IsOk ( Olaf ) then
14871: LD_EXP 21
14875: PPUSH
14876: CALL_OW 302
14880: IFFALSE 14894
// SaveCharacters ( Olaf , 09_Olaf ) ;
14882: LD_EXP 21
14886: PPUSH
14887: LD_STRING 09_Olaf
14889: PPUSH
14890: CALL_OW 38
// if IsOk ( Kurt ) then
14894: LD_EXP 22
14898: PPUSH
14899: CALL_OW 302
14903: IFFALSE 14917
// SaveCharacters ( Kurt , 09_Kurt ) ;
14905: LD_EXP 22
14909: PPUSH
14910: LD_STRING 09_Kurt
14912: PPUSH
14913: CALL_OW 38
// if IsOk ( Aviradze ) then
14917: LD_EXP 23
14921: PPUSH
14922: CALL_OW 302
14926: IFFALSE 14940
// SaveCharacters ( Aviradze , 09_Aviradze ) ;
14928: LD_EXP 23
14932: PPUSH
14933: LD_STRING 09_Aviradze
14935: PPUSH
14936: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09_heikeSecondSquad ) ;
14940: LD_EXP 30
14944: PPUSH
14945: LD_INT 50
14947: PUSH
14948: EMPTY
14949: LIST
14950: PPUSH
14951: CALL_OW 72
14955: PPUSH
14956: LD_STRING 09_heikeSecondSquad
14958: PPUSH
14959: CALL_OW 38
// if GetTech ( tech_apeBrain , 2 ) = state_researched then
14963: LD_INT 4
14965: PPUSH
14966: LD_INT 2
14968: PPUSH
14969: CALL_OW 321
14973: PUSH
14974: LD_INT 2
14976: EQUAL
14977: IFFALSE 14989
// SaveVariable ( 1 , 09_ApeBrain ) ;
14979: LD_INT 1
14981: PPUSH
14982: LD_STRING 09_ApeBrain
14984: PPUSH
14985: CALL_OW 39
// if GetTech ( tech_apeNeural , 2 ) = state_researched then
14989: LD_INT 3
14991: PPUSH
14992: LD_INT 2
14994: PPUSH
14995: CALL_OW 321
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: IFFALSE 15015
// SaveVariable ( 1 , 09_ApeNeural ) ;
15005: LD_INT 1
15007: PPUSH
15008: LD_STRING 09_ApeNeural
15010: PPUSH
15011: CALL_OW 39
// sib := 0 ;
15015: LD_ADDR_VAR 0 2
15019: PUSH
15020: LD_INT 0
15022: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
15023: LD_ADDR_VAR 0 1
15027: PUSH
15028: LD_INT 22
15030: PUSH
15031: LD_INT 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: LD_INT 30
15043: PUSH
15044: LD_INT 0
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 30
15053: PUSH
15054: LD_INT 1
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PPUSH
15070: CALL_OW 69
15074: PUSH
15075: FOR_IN
15076: IFFALSE 15109
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
15078: LD_ADDR_VAR 0 2
15082: PUSH
15083: LD_VAR 0 2
15087: PUSH
15088: LD_VAR 0 1
15092: PPUSH
15093: CALL_OW 274
15097: PPUSH
15098: LD_INT 3
15100: PPUSH
15101: CALL_OW 275
15105: PLUS
15106: ST_TO_ADDR
15107: GO 15075
15109: POP
15110: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
15111: LD_ADDR_VAR 0 1
15115: PUSH
15116: LD_INT 22
15118: PUSH
15119: LD_INT 2
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 2
15128: PUSH
15129: LD_INT 34
15131: PUSH
15132: LD_INT 32
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 34
15141: PUSH
15142: LD_INT 51
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: PUSH
15163: FOR_IN
15164: IFFALSE 15192
// sib := sib + GetCargo ( i , mat_siberit ) ;
15166: LD_ADDR_VAR 0 2
15170: PUSH
15171: LD_VAR 0 2
15175: PUSH
15176: LD_VAR 0 1
15180: PPUSH
15181: LD_INT 3
15183: PPUSH
15184: CALL_OW 289
15188: PLUS
15189: ST_TO_ADDR
15190: GO 15163
15192: POP
15193: POP
// if sib >= sibToCollect then
15194: LD_VAR 0 2
15198: PUSH
15199: LD_EXP 7
15203: GREATEREQUAL
15204: IFFALSE 15218
// AddMedal ( med1 , 1 ) else
15206: LD_STRING med1
15208: PPUSH
15209: LD_INT 1
15211: PPUSH
15212: CALL_OW 101
15216: GO 15229
// AddMedal ( med1 , - 1 ) ;
15218: LD_STRING med1
15220: PPUSH
15221: LD_INT 1
15223: NEG
15224: PPUSH
15225: CALL_OW 101
// if apeDriver or kamikazeTrained then
15229: LD_EXP 8
15233: PUSH
15234: LD_EXP 6
15238: OR
15239: IFFALSE 15253
// AddMedal ( med2 , 1 ) else
15241: LD_STRING med2
15243: PPUSH
15244: LD_INT 1
15246: PPUSH
15247: CALL_OW 101
15251: GO 15264
// AddMedal ( med2 , - 1 ) ;
15253: LD_STRING med2
15255: PPUSH
15256: LD_INT 1
15258: NEG
15259: PPUSH
15260: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
15264: LD_EXP 14
15268: PUSH
15269: LD_EXP 15
15273: PUSH
15274: LD_EXP 16
15278: PUSH
15279: LD_EXP 17
15283: PUSH
15284: LD_EXP 18
15288: PUSH
15289: LD_EXP 19
15293: PUSH
15294: LD_EXP 20
15298: PUSH
15299: LD_EXP 21
15303: PUSH
15304: LD_EXP 22
15308: PUSH
15309: LD_EXP 23
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: PPUSH
15326: LD_INT 50
15328: PUSH
15329: EMPTY
15330: LIST
15331: PPUSH
15332: CALL_OW 72
15336: NOT
15337: IFFALSE 15352
// AddMedal ( med3 , - 1 ) else
15339: LD_STRING med3
15341: PPUSH
15342: LD_INT 1
15344: NEG
15345: PPUSH
15346: CALL_OW 101
15350: GO 15362
// AddMedal ( med3 , 1 ) ;
15352: LD_STRING med3
15354: PPUSH
15355: LD_INT 1
15357: PPUSH
15358: CALL_OW 101
// GiveMedals ( MAIN ) ;
15362: LD_STRING MAIN
15364: PPUSH
15365: CALL_OW 102
// YouWin ;
15369: CALL_OW 103
// DialogueOff ;
15373: CALL_OW 7
// end ; end_of_file
15377: PPOPN 2
15379: END
// every 0 0$25 + 0 0$20 trigger playerInBase do var i , tmp ;
15380: LD_EXP 5
15384: IFFALSE 15485
15386: GO 15388
15388: DISABLE
15389: LD_INT 0
15391: PPUSH
15392: PPUSH
// begin enable ;
15393: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
15394: LD_ADDR_VAR 0 2
15398: PUSH
15399: LD_INT 9
15401: PUSH
15402: LD_INT 10
15404: PUSH
15405: LD_INT 11
15407: PUSH
15408: LD_INT 12
15410: PUSH
15411: LD_INT 13
15413: PUSH
15414: LD_INT 14
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
15425: LD_ADDR_VAR 0 1
15429: PUSH
15430: LD_VAR 0 2
15434: PUSH
15435: LD_INT 1
15437: PPUSH
15438: LD_INT 6
15440: PPUSH
15441: CALL_OW 12
15445: ARRAY
15446: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 16 then
15447: LD_VAR 0 1
15451: PPUSH
15452: CALL_OW 435
15456: PUSH
15457: LD_INT 16
15459: LESS
15460: IFFALSE 15485
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
15462: LD_INT 1
15464: PPUSH
15465: LD_INT 5
15467: PPUSH
15468: CALL_OW 12
15472: PPUSH
15473: LD_VAR 0 1
15477: PPUSH
15478: LD_INT 1
15480: PPUSH
15481: CALL_OW 55
// end ; end_of_file
15485: PPOPN 2
15487: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15488: LD_INT 0
15490: PPUSH
15491: PPUSH
// if exist_mode then
15492: LD_VAR 0 2
15496: IFFALSE 15521
// unit := CreateCharacter ( prefix & ident ) else
15498: LD_ADDR_VAR 0 5
15502: PUSH
15503: LD_VAR 0 3
15507: PUSH
15508: LD_VAR 0 1
15512: STR
15513: PPUSH
15514: CALL_OW 34
15518: ST_TO_ADDR
15519: GO 15536
// unit := NewCharacter ( ident ) ;
15521: LD_ADDR_VAR 0 5
15525: PUSH
15526: LD_VAR 0 1
15530: PPUSH
15531: CALL_OW 25
15535: ST_TO_ADDR
// result := unit ;
15536: LD_ADDR_VAR 0 4
15540: PUSH
15541: LD_VAR 0 5
15545: ST_TO_ADDR
// end ;
15546: LD_VAR 0 4
15550: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15551: LD_INT 0
15553: PPUSH
15554: PPUSH
// if not side or not nation then
15555: LD_VAR 0 1
15559: NOT
15560: PUSH
15561: LD_VAR 0 2
15565: NOT
15566: OR
15567: IFFALSE 15571
// exit ;
15569: GO 16339
// case nation of nation_american :
15571: LD_VAR 0 2
15575: PUSH
15576: LD_INT 1
15578: DOUBLE
15579: EQUAL
15580: IFTRUE 15584
15582: GO 15798
15584: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15585: LD_ADDR_VAR 0 4
15589: PUSH
15590: LD_INT 35
15592: PUSH
15593: LD_INT 45
15595: PUSH
15596: LD_INT 46
15598: PUSH
15599: LD_INT 47
15601: PUSH
15602: LD_INT 82
15604: PUSH
15605: LD_INT 83
15607: PUSH
15608: LD_INT 84
15610: PUSH
15611: LD_INT 85
15613: PUSH
15614: LD_INT 86
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: LD_INT 2
15622: PUSH
15623: LD_INT 6
15625: PUSH
15626: LD_INT 15
15628: PUSH
15629: LD_INT 16
15631: PUSH
15632: LD_INT 7
15634: PUSH
15635: LD_INT 12
15637: PUSH
15638: LD_INT 13
15640: PUSH
15641: LD_INT 10
15643: PUSH
15644: LD_INT 14
15646: PUSH
15647: LD_INT 20
15649: PUSH
15650: LD_INT 21
15652: PUSH
15653: LD_INT 22
15655: PUSH
15656: LD_INT 25
15658: PUSH
15659: LD_INT 32
15661: PUSH
15662: LD_INT 27
15664: PUSH
15665: LD_INT 36
15667: PUSH
15668: LD_INT 69
15670: PUSH
15671: LD_INT 39
15673: PUSH
15674: LD_INT 34
15676: PUSH
15677: LD_INT 40
15679: PUSH
15680: LD_INT 48
15682: PUSH
15683: LD_INT 49
15685: PUSH
15686: LD_INT 50
15688: PUSH
15689: LD_INT 51
15691: PUSH
15692: LD_INT 52
15694: PUSH
15695: LD_INT 53
15697: PUSH
15698: LD_INT 54
15700: PUSH
15701: LD_INT 55
15703: PUSH
15704: LD_INT 56
15706: PUSH
15707: LD_INT 57
15709: PUSH
15710: LD_INT 58
15712: PUSH
15713: LD_INT 59
15715: PUSH
15716: LD_INT 60
15718: PUSH
15719: LD_INT 61
15721: PUSH
15722: LD_INT 62
15724: PUSH
15725: LD_INT 80
15727: PUSH
15728: LD_INT 82
15730: PUSH
15731: LD_INT 83
15733: PUSH
15734: LD_INT 84
15736: PUSH
15737: LD_INT 85
15739: PUSH
15740: LD_INT 86
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: ST_TO_ADDR
15796: GO 16263
15798: LD_INT 2
15800: DOUBLE
15801: EQUAL
15802: IFTRUE 15806
15804: GO 16032
15806: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15807: LD_ADDR_VAR 0 4
15811: PUSH
15812: LD_INT 35
15814: PUSH
15815: LD_INT 45
15817: PUSH
15818: LD_INT 46
15820: PUSH
15821: LD_INT 47
15823: PUSH
15824: LD_INT 82
15826: PUSH
15827: LD_INT 83
15829: PUSH
15830: LD_INT 84
15832: PUSH
15833: LD_INT 85
15835: PUSH
15836: LD_INT 87
15838: PUSH
15839: LD_INT 70
15841: PUSH
15842: LD_INT 1
15844: PUSH
15845: LD_INT 11
15847: PUSH
15848: LD_INT 3
15850: PUSH
15851: LD_INT 4
15853: PUSH
15854: LD_INT 5
15856: PUSH
15857: LD_INT 6
15859: PUSH
15860: LD_INT 15
15862: PUSH
15863: LD_INT 18
15865: PUSH
15866: LD_INT 7
15868: PUSH
15869: LD_INT 17
15871: PUSH
15872: LD_INT 8
15874: PUSH
15875: LD_INT 20
15877: PUSH
15878: LD_INT 21
15880: PUSH
15881: LD_INT 22
15883: PUSH
15884: LD_INT 72
15886: PUSH
15887: LD_INT 26
15889: PUSH
15890: LD_INT 69
15892: PUSH
15893: LD_INT 39
15895: PUSH
15896: LD_INT 40
15898: PUSH
15899: LD_INT 41
15901: PUSH
15902: LD_INT 42
15904: PUSH
15905: LD_INT 43
15907: PUSH
15908: LD_INT 48
15910: PUSH
15911: LD_INT 49
15913: PUSH
15914: LD_INT 50
15916: PUSH
15917: LD_INT 51
15919: PUSH
15920: LD_INT 52
15922: PUSH
15923: LD_INT 53
15925: PUSH
15926: LD_INT 54
15928: PUSH
15929: LD_INT 55
15931: PUSH
15932: LD_INT 56
15934: PUSH
15935: LD_INT 60
15937: PUSH
15938: LD_INT 61
15940: PUSH
15941: LD_INT 62
15943: PUSH
15944: LD_INT 66
15946: PUSH
15947: LD_INT 67
15949: PUSH
15950: LD_INT 68
15952: PUSH
15953: LD_INT 81
15955: PUSH
15956: LD_INT 82
15958: PUSH
15959: LD_INT 83
15961: PUSH
15962: LD_INT 84
15964: PUSH
15965: LD_INT 85
15967: PUSH
15968: LD_INT 87
15970: PUSH
15971: LD_INT 88
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: ST_TO_ADDR
16030: GO 16263
16032: LD_INT 3
16034: DOUBLE
16035: EQUAL
16036: IFTRUE 16040
16038: GO 16262
16040: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16041: LD_ADDR_VAR 0 4
16045: PUSH
16046: LD_INT 46
16048: PUSH
16049: LD_INT 47
16051: PUSH
16052: LD_INT 1
16054: PUSH
16055: LD_INT 2
16057: PUSH
16058: LD_INT 82
16060: PUSH
16061: LD_INT 83
16063: PUSH
16064: LD_INT 84
16066: PUSH
16067: LD_INT 85
16069: PUSH
16070: LD_INT 86
16072: PUSH
16073: LD_INT 11
16075: PUSH
16076: LD_INT 9
16078: PUSH
16079: LD_INT 20
16081: PUSH
16082: LD_INT 19
16084: PUSH
16085: LD_INT 21
16087: PUSH
16088: LD_INT 24
16090: PUSH
16091: LD_INT 22
16093: PUSH
16094: LD_INT 25
16096: PUSH
16097: LD_INT 28
16099: PUSH
16100: LD_INT 29
16102: PUSH
16103: LD_INT 30
16105: PUSH
16106: LD_INT 31
16108: PUSH
16109: LD_INT 37
16111: PUSH
16112: LD_INT 38
16114: PUSH
16115: LD_INT 32
16117: PUSH
16118: LD_INT 27
16120: PUSH
16121: LD_INT 33
16123: PUSH
16124: LD_INT 69
16126: PUSH
16127: LD_INT 39
16129: PUSH
16130: LD_INT 34
16132: PUSH
16133: LD_INT 40
16135: PUSH
16136: LD_INT 71
16138: PUSH
16139: LD_INT 23
16141: PUSH
16142: LD_INT 44
16144: PUSH
16145: LD_INT 48
16147: PUSH
16148: LD_INT 49
16150: PUSH
16151: LD_INT 50
16153: PUSH
16154: LD_INT 51
16156: PUSH
16157: LD_INT 52
16159: PUSH
16160: LD_INT 53
16162: PUSH
16163: LD_INT 54
16165: PUSH
16166: LD_INT 55
16168: PUSH
16169: LD_INT 56
16171: PUSH
16172: LD_INT 57
16174: PUSH
16175: LD_INT 58
16177: PUSH
16178: LD_INT 59
16180: PUSH
16181: LD_INT 63
16183: PUSH
16184: LD_INT 64
16186: PUSH
16187: LD_INT 65
16189: PUSH
16190: LD_INT 82
16192: PUSH
16193: LD_INT 83
16195: PUSH
16196: LD_INT 84
16198: PUSH
16199: LD_INT 85
16201: PUSH
16202: LD_INT 86
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: ST_TO_ADDR
16260: GO 16263
16262: POP
// if state > - 1 and state < 3 then
16263: LD_VAR 0 3
16267: PUSH
16268: LD_INT 1
16270: NEG
16271: GREATER
16272: PUSH
16273: LD_VAR 0 3
16277: PUSH
16278: LD_INT 3
16280: LESS
16281: AND
16282: IFFALSE 16339
// for i in result do
16284: LD_ADDR_VAR 0 5
16288: PUSH
16289: LD_VAR 0 4
16293: PUSH
16294: FOR_IN
16295: IFFALSE 16337
// if GetTech ( i , side ) <> state then
16297: LD_VAR 0 5
16301: PPUSH
16302: LD_VAR 0 1
16306: PPUSH
16307: CALL_OW 321
16311: PUSH
16312: LD_VAR 0 3
16316: NONEQUAL
16317: IFFALSE 16335
// result := result diff i ;
16319: LD_ADDR_VAR 0 4
16323: PUSH
16324: LD_VAR 0 4
16328: PUSH
16329: LD_VAR 0 5
16333: DIFF
16334: ST_TO_ADDR
16335: GO 16294
16337: POP
16338: POP
// end ;
16339: LD_VAR 0 4
16343: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16344: LD_INT 0
16346: PPUSH
16347: PPUSH
16348: PPUSH
// result := true ;
16349: LD_ADDR_VAR 0 3
16353: PUSH
16354: LD_INT 1
16356: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16357: LD_ADDR_VAR 0 5
16361: PUSH
16362: LD_VAR 0 2
16366: PPUSH
16367: CALL_OW 480
16371: ST_TO_ADDR
// if not tmp then
16372: LD_VAR 0 5
16376: NOT
16377: IFFALSE 16381
// exit ;
16379: GO 16430
// for i in tmp do
16381: LD_ADDR_VAR 0 4
16385: PUSH
16386: LD_VAR 0 5
16390: PUSH
16391: FOR_IN
16392: IFFALSE 16428
// if GetTech ( i , side ) <> state_researched then
16394: LD_VAR 0 4
16398: PPUSH
16399: LD_VAR 0 1
16403: PPUSH
16404: CALL_OW 321
16408: PUSH
16409: LD_INT 2
16411: NONEQUAL
16412: IFFALSE 16426
// begin result := false ;
16414: LD_ADDR_VAR 0 3
16418: PUSH
16419: LD_INT 0
16421: ST_TO_ADDR
// exit ;
16422: POP
16423: POP
16424: GO 16430
// end ;
16426: GO 16391
16428: POP
16429: POP
// end ;
16430: LD_VAR 0 3
16434: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16435: LD_INT 0
16437: PPUSH
16438: PPUSH
16439: PPUSH
16440: PPUSH
16441: PPUSH
16442: PPUSH
16443: PPUSH
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16450: LD_VAR 0 1
16454: NOT
16455: PUSH
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 257
16465: PUSH
16466: LD_INT 9
16468: NONEQUAL
16469: OR
16470: IFFALSE 16474
// exit ;
16472: GO 17047
// side := GetSide ( unit ) ;
16474: LD_ADDR_VAR 0 9
16478: PUSH
16479: LD_VAR 0 1
16483: PPUSH
16484: CALL_OW 255
16488: ST_TO_ADDR
// tech_space := tech_spacanom ;
16489: LD_ADDR_VAR 0 12
16493: PUSH
16494: LD_INT 29
16496: ST_TO_ADDR
// tech_time := tech_taurad ;
16497: LD_ADDR_VAR 0 13
16501: PUSH
16502: LD_INT 28
16504: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16505: LD_ADDR_VAR 0 11
16509: PUSH
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 310
16519: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16520: LD_VAR 0 11
16524: PPUSH
16525: CALL_OW 247
16529: PUSH
16530: LD_INT 2
16532: EQUAL
16533: IFFALSE 16537
// exit ;
16535: GO 17047
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16537: LD_ADDR_VAR 0 8
16541: PUSH
16542: LD_INT 81
16544: PUSH
16545: LD_VAR 0 9
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 3
16556: PUSH
16557: LD_INT 21
16559: PUSH
16560: LD_INT 3
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PPUSH
16575: CALL_OW 69
16579: ST_TO_ADDR
// if not tmp then
16580: LD_VAR 0 8
16584: NOT
16585: IFFALSE 16589
// exit ;
16587: GO 17047
// if in_unit then
16589: LD_VAR 0 11
16593: IFFALSE 16617
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16595: LD_ADDR_VAR 0 10
16599: PUSH
16600: LD_VAR 0 8
16604: PPUSH
16605: LD_VAR 0 11
16609: PPUSH
16610: CALL_OW 74
16614: ST_TO_ADDR
16615: GO 16637
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16617: LD_ADDR_VAR 0 10
16621: PUSH
16622: LD_VAR 0 8
16626: PPUSH
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 74
16636: ST_TO_ADDR
// if not enemy then
16637: LD_VAR 0 10
16641: NOT
16642: IFFALSE 16646
// exit ;
16644: GO 17047
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16646: LD_VAR 0 11
16650: PUSH
16651: LD_VAR 0 11
16655: PPUSH
16656: LD_VAR 0 10
16660: PPUSH
16661: CALL_OW 296
16665: PUSH
16666: LD_INT 13
16668: GREATER
16669: AND
16670: PUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: LD_VAR 0 10
16680: PPUSH
16681: CALL_OW 296
16685: PUSH
16686: LD_INT 12
16688: GREATER
16689: OR
16690: IFFALSE 16694
// exit ;
16692: GO 17047
// missile := [ 1 ] ;
16694: LD_ADDR_VAR 0 14
16698: PUSH
16699: LD_INT 1
16701: PUSH
16702: EMPTY
16703: LIST
16704: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16705: LD_VAR 0 9
16709: PPUSH
16710: LD_VAR 0 12
16714: PPUSH
16715: CALL_OW 325
16719: IFFALSE 16748
// missile := Replace ( missile , missile + 1 , 2 ) ;
16721: LD_ADDR_VAR 0 14
16725: PUSH
16726: LD_VAR 0 14
16730: PPUSH
16731: LD_VAR 0 14
16735: PUSH
16736: LD_INT 1
16738: PLUS
16739: PPUSH
16740: LD_INT 2
16742: PPUSH
16743: CALL_OW 1
16747: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16748: LD_VAR 0 9
16752: PPUSH
16753: LD_VAR 0 13
16757: PPUSH
16758: CALL_OW 325
16762: PUSH
16763: LD_VAR 0 10
16767: PPUSH
16768: CALL_OW 255
16772: PPUSH
16773: LD_VAR 0 13
16777: PPUSH
16778: CALL_OW 325
16782: NOT
16783: AND
16784: IFFALSE 16813
// missile := Replace ( missile , missile + 1 , 3 ) ;
16786: LD_ADDR_VAR 0 14
16790: PUSH
16791: LD_VAR 0 14
16795: PPUSH
16796: LD_VAR 0 14
16800: PUSH
16801: LD_INT 1
16803: PLUS
16804: PPUSH
16805: LD_INT 3
16807: PPUSH
16808: CALL_OW 1
16812: ST_TO_ADDR
// if missile < 2 then
16813: LD_VAR 0 14
16817: PUSH
16818: LD_INT 2
16820: LESS
16821: IFFALSE 16825
// exit ;
16823: GO 17047
// x := GetX ( enemy ) ;
16825: LD_ADDR_VAR 0 4
16829: PUSH
16830: LD_VAR 0 10
16834: PPUSH
16835: CALL_OW 250
16839: ST_TO_ADDR
// y := GetY ( enemy ) ;
16840: LD_ADDR_VAR 0 5
16844: PUSH
16845: LD_VAR 0 10
16849: PPUSH
16850: CALL_OW 251
16854: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16855: LD_ADDR_VAR 0 6
16859: PUSH
16860: LD_VAR 0 4
16864: PUSH
16865: LD_INT 1
16867: NEG
16868: PPUSH
16869: LD_INT 1
16871: PPUSH
16872: CALL_OW 12
16876: PLUS
16877: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16878: LD_ADDR_VAR 0 7
16882: PUSH
16883: LD_VAR 0 5
16887: PUSH
16888: LD_INT 1
16890: NEG
16891: PPUSH
16892: LD_INT 1
16894: PPUSH
16895: CALL_OW 12
16899: PLUS
16900: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16901: LD_VAR 0 6
16905: PPUSH
16906: LD_VAR 0 7
16910: PPUSH
16911: CALL_OW 488
16915: NOT
16916: IFFALSE 16938
// begin _x := x ;
16918: LD_ADDR_VAR 0 6
16922: PUSH
16923: LD_VAR 0 4
16927: ST_TO_ADDR
// _y := y ;
16928: LD_ADDR_VAR 0 7
16932: PUSH
16933: LD_VAR 0 5
16937: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16938: LD_ADDR_VAR 0 3
16942: PUSH
16943: LD_INT 1
16945: PPUSH
16946: LD_VAR 0 14
16950: PPUSH
16951: CALL_OW 12
16955: ST_TO_ADDR
// case i of 1 :
16956: LD_VAR 0 3
16960: PUSH
16961: LD_INT 1
16963: DOUBLE
16964: EQUAL
16965: IFTRUE 16969
16967: GO 16986
16969: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16970: LD_VAR 0 1
16974: PPUSH
16975: LD_VAR 0 10
16979: PPUSH
16980: CALL_OW 115
16984: GO 17047
16986: LD_INT 2
16988: DOUBLE
16989: EQUAL
16990: IFTRUE 16994
16992: GO 17016
16994: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16995: LD_VAR 0 1
16999: PPUSH
17000: LD_VAR 0 6
17004: PPUSH
17005: LD_VAR 0 7
17009: PPUSH
17010: CALL_OW 153
17014: GO 17047
17016: LD_INT 3
17018: DOUBLE
17019: EQUAL
17020: IFTRUE 17024
17022: GO 17046
17024: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17025: LD_VAR 0 1
17029: PPUSH
17030: LD_VAR 0 6
17034: PPUSH
17035: LD_VAR 0 7
17039: PPUSH
17040: CALL_OW 154
17044: GO 17047
17046: POP
// end ;
17047: LD_VAR 0 2
17051: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17052: LD_INT 0
17054: PPUSH
17055: PPUSH
17056: PPUSH
17057: PPUSH
17058: PPUSH
17059: PPUSH
// if not unit or not building then
17060: LD_VAR 0 1
17064: NOT
17065: PUSH
17066: LD_VAR 0 2
17070: NOT
17071: OR
17072: IFFALSE 17076
// exit ;
17074: GO 17234
// x := GetX ( building ) ;
17076: LD_ADDR_VAR 0 5
17080: PUSH
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL_OW 250
17090: ST_TO_ADDR
// y := GetY ( building ) ;
17091: LD_ADDR_VAR 0 6
17095: PUSH
17096: LD_VAR 0 2
17100: PPUSH
17101: CALL_OW 251
17105: ST_TO_ADDR
// for i = 0 to 5 do
17106: LD_ADDR_VAR 0 4
17110: PUSH
17111: DOUBLE
17112: LD_INT 0
17114: DEC
17115: ST_TO_ADDR
17116: LD_INT 5
17118: PUSH
17119: FOR_TO
17120: IFFALSE 17232
// begin _x := ShiftX ( x , i , 3 ) ;
17122: LD_ADDR_VAR 0 7
17126: PUSH
17127: LD_VAR 0 5
17131: PPUSH
17132: LD_VAR 0 4
17136: PPUSH
17137: LD_INT 3
17139: PPUSH
17140: CALL_OW 272
17144: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17145: LD_ADDR_VAR 0 8
17149: PUSH
17150: LD_VAR 0 6
17154: PPUSH
17155: LD_VAR 0 4
17159: PPUSH
17160: LD_INT 3
17162: PPUSH
17163: CALL_OW 273
17167: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17168: LD_VAR 0 7
17172: PPUSH
17173: LD_VAR 0 8
17177: PPUSH
17178: CALL_OW 488
17182: NOT
17183: IFFALSE 17187
// continue ;
17185: GO 17119
// if HexInfo ( _x , _y ) = 0 then
17187: LD_VAR 0 7
17191: PPUSH
17192: LD_VAR 0 8
17196: PPUSH
17197: CALL_OW 428
17201: PUSH
17202: LD_INT 0
17204: EQUAL
17205: IFFALSE 17230
// begin ComMoveXY ( unit , _x , _y ) ;
17207: LD_VAR 0 1
17211: PPUSH
17212: LD_VAR 0 7
17216: PPUSH
17217: LD_VAR 0 8
17221: PPUSH
17222: CALL_OW 111
// exit ;
17226: POP
17227: POP
17228: GO 17234
// end ; end ;
17230: GO 17119
17232: POP
17233: POP
// end ;
17234: LD_VAR 0 3
17238: RET
// export function ScanBase ( side , base_area ) ; begin
17239: LD_INT 0
17241: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17242: LD_ADDR_VAR 0 3
17246: PUSH
17247: LD_VAR 0 2
17251: PPUSH
17252: LD_INT 81
17254: PUSH
17255: LD_VAR 0 1
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 70
17268: ST_TO_ADDR
// end ;
17269: LD_VAR 0 3
17273: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17274: LD_INT 0
17276: PPUSH
17277: PPUSH
17278: PPUSH
17279: PPUSH
// result := false ;
17280: LD_ADDR_VAR 0 2
17284: PUSH
17285: LD_INT 0
17287: ST_TO_ADDR
// side := GetSide ( unit ) ;
17288: LD_ADDR_VAR 0 3
17292: PUSH
17293: LD_VAR 0 1
17297: PPUSH
17298: CALL_OW 255
17302: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17303: LD_ADDR_VAR 0 4
17307: PUSH
17308: LD_VAR 0 1
17312: PPUSH
17313: CALL_OW 248
17317: ST_TO_ADDR
// case nat of 1 :
17318: LD_VAR 0 4
17322: PUSH
17323: LD_INT 1
17325: DOUBLE
17326: EQUAL
17327: IFTRUE 17331
17329: GO 17342
17331: POP
// tech := tech_lassight ; 2 :
17332: LD_ADDR_VAR 0 5
17336: PUSH
17337: LD_INT 12
17339: ST_TO_ADDR
17340: GO 17381
17342: LD_INT 2
17344: DOUBLE
17345: EQUAL
17346: IFTRUE 17350
17348: GO 17361
17350: POP
// tech := tech_mortar ; 3 :
17351: LD_ADDR_VAR 0 5
17355: PUSH
17356: LD_INT 41
17358: ST_TO_ADDR
17359: GO 17381
17361: LD_INT 3
17363: DOUBLE
17364: EQUAL
17365: IFTRUE 17369
17367: GO 17380
17369: POP
// tech := tech_bazooka ; end ;
17370: LD_ADDR_VAR 0 5
17374: PUSH
17375: LD_INT 44
17377: ST_TO_ADDR
17378: GO 17381
17380: POP
// if Researched ( side , tech ) then
17381: LD_VAR 0 3
17385: PPUSH
17386: LD_VAR 0 5
17390: PPUSH
17391: CALL_OW 325
17395: IFFALSE 17422
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17397: LD_ADDR_VAR 0 2
17401: PUSH
17402: LD_INT 5
17404: PUSH
17405: LD_INT 8
17407: PUSH
17408: LD_INT 9
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: LD_VAR 0 4
17420: ARRAY
17421: ST_TO_ADDR
// end ;
17422: LD_VAR 0 2
17426: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17427: LD_INT 0
17429: PPUSH
17430: PPUSH
17431: PPUSH
// if not mines then
17432: LD_VAR 0 2
17436: NOT
17437: IFFALSE 17441
// exit ;
17439: GO 17585
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17441: LD_ADDR_VAR 0 5
17445: PUSH
17446: LD_INT 81
17448: PUSH
17449: LD_VAR 0 1
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 3
17460: PUSH
17461: LD_INT 21
17463: PUSH
17464: LD_INT 3
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PPUSH
17479: CALL_OW 69
17483: ST_TO_ADDR
// for i in mines do
17484: LD_ADDR_VAR 0 4
17488: PUSH
17489: LD_VAR 0 2
17493: PUSH
17494: FOR_IN
17495: IFFALSE 17583
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17497: LD_VAR 0 4
17501: PUSH
17502: LD_INT 1
17504: ARRAY
17505: PPUSH
17506: LD_VAR 0 4
17510: PUSH
17511: LD_INT 2
17513: ARRAY
17514: PPUSH
17515: CALL_OW 458
17519: NOT
17520: IFFALSE 17524
// continue ;
17522: GO 17494
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17524: LD_VAR 0 4
17528: PUSH
17529: LD_INT 1
17531: ARRAY
17532: PPUSH
17533: LD_VAR 0 4
17537: PUSH
17538: LD_INT 2
17540: ARRAY
17541: PPUSH
17542: CALL_OW 428
17546: PUSH
17547: LD_VAR 0 5
17551: IN
17552: IFFALSE 17581
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17554: LD_VAR 0 4
17558: PUSH
17559: LD_INT 1
17561: ARRAY
17562: PPUSH
17563: LD_VAR 0 4
17567: PUSH
17568: LD_INT 2
17570: ARRAY
17571: PPUSH
17572: LD_VAR 0 1
17576: PPUSH
17577: CALL_OW 456
// end ;
17581: GO 17494
17583: POP
17584: POP
// end ;
17585: LD_VAR 0 3
17589: RET
// export function Count ( array ) ; begin
17590: LD_INT 0
17592: PPUSH
// result := array + 0 ;
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 0
17605: PLUS
17606: ST_TO_ADDR
// end ;
17607: LD_VAR 0 2
17611: RET
// export function IsEmpty ( building ) ; begin
17612: LD_INT 0
17614: PPUSH
// if not building then
17615: LD_VAR 0 1
17619: NOT
17620: IFFALSE 17624
// exit ;
17622: GO 17667
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17624: LD_ADDR_VAR 0 2
17628: PUSH
17629: LD_VAR 0 1
17633: PUSH
17634: LD_INT 22
17636: PUSH
17637: LD_VAR 0 1
17641: PPUSH
17642: CALL_OW 255
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 58
17653: PUSH
17654: EMPTY
17655: LIST
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PPUSH
17661: CALL_OW 69
17665: IN
17666: ST_TO_ADDR
// end ;
17667: LD_VAR 0 2
17671: RET
// export function IsNotFull ( building ) ; var places ; begin
17672: LD_INT 0
17674: PPUSH
17675: PPUSH
// if not building then
17676: LD_VAR 0 1
17680: NOT
17681: IFFALSE 17685
// exit ;
17683: GO 17713
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17685: LD_ADDR_VAR 0 2
17689: PUSH
17690: LD_VAR 0 1
17694: PPUSH
17695: LD_INT 3
17697: PUSH
17698: LD_INT 62
17700: PUSH
17701: EMPTY
17702: LIST
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PPUSH
17708: CALL_OW 72
17712: ST_TO_ADDR
// end ;
17713: LD_VAR 0 2
17717: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17718: LD_INT 0
17720: PPUSH
17721: PPUSH
17722: PPUSH
17723: PPUSH
// tmp := [ ] ;
17724: LD_ADDR_VAR 0 3
17728: PUSH
17729: EMPTY
17730: ST_TO_ADDR
// list := [ ] ;
17731: LD_ADDR_VAR 0 5
17735: PUSH
17736: EMPTY
17737: ST_TO_ADDR
// for i = 16 to 25 do
17738: LD_ADDR_VAR 0 4
17742: PUSH
17743: DOUBLE
17744: LD_INT 16
17746: DEC
17747: ST_TO_ADDR
17748: LD_INT 25
17750: PUSH
17751: FOR_TO
17752: IFFALSE 17825
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17754: LD_ADDR_VAR 0 3
17758: PUSH
17759: LD_VAR 0 3
17763: PUSH
17764: LD_INT 22
17766: PUSH
17767: LD_VAR 0 1
17771: PPUSH
17772: CALL_OW 255
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 91
17783: PUSH
17784: LD_VAR 0 1
17788: PUSH
17789: LD_INT 6
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 30
17799: PUSH
17800: LD_VAR 0 4
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: LIST
17813: PUSH
17814: EMPTY
17815: LIST
17816: PPUSH
17817: CALL_OW 69
17821: ADD
17822: ST_TO_ADDR
17823: GO 17751
17825: POP
17826: POP
// for i = 1 to tmp do
17827: LD_ADDR_VAR 0 4
17831: PUSH
17832: DOUBLE
17833: LD_INT 1
17835: DEC
17836: ST_TO_ADDR
17837: LD_VAR 0 3
17841: PUSH
17842: FOR_TO
17843: IFFALSE 17931
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17845: LD_ADDR_VAR 0 5
17849: PUSH
17850: LD_VAR 0 5
17854: PUSH
17855: LD_VAR 0 3
17859: PUSH
17860: LD_VAR 0 4
17864: ARRAY
17865: PPUSH
17866: CALL_OW 266
17870: PUSH
17871: LD_VAR 0 3
17875: PUSH
17876: LD_VAR 0 4
17880: ARRAY
17881: PPUSH
17882: CALL_OW 250
17886: PUSH
17887: LD_VAR 0 3
17891: PUSH
17892: LD_VAR 0 4
17896: ARRAY
17897: PPUSH
17898: CALL_OW 251
17902: PUSH
17903: LD_VAR 0 3
17907: PUSH
17908: LD_VAR 0 4
17912: ARRAY
17913: PPUSH
17914: CALL_OW 254
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: EMPTY
17926: LIST
17927: ADD
17928: ST_TO_ADDR
17929: GO 17842
17931: POP
17932: POP
// result := list ;
17933: LD_ADDR_VAR 0 2
17937: PUSH
17938: LD_VAR 0 5
17942: ST_TO_ADDR
// end ;
17943: LD_VAR 0 2
17947: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17948: LD_INT 0
17950: PPUSH
17951: PPUSH
17952: PPUSH
17953: PPUSH
17954: PPUSH
17955: PPUSH
17956: PPUSH
// if not factory then
17957: LD_VAR 0 1
17961: NOT
17962: IFFALSE 17966
// exit ;
17964: GO 18559
// if control = control_apeman then
17966: LD_VAR 0 4
17970: PUSH
17971: LD_INT 5
17973: EQUAL
17974: IFFALSE 18083
// begin tmp := UnitsInside ( factory ) ;
17976: LD_ADDR_VAR 0 8
17980: PUSH
17981: LD_VAR 0 1
17985: PPUSH
17986: CALL_OW 313
17990: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17991: LD_VAR 0 8
17995: PPUSH
17996: LD_INT 25
17998: PUSH
17999: LD_INT 12
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PPUSH
18006: CALL_OW 72
18010: NOT
18011: IFFALSE 18021
// control := control_manual ;
18013: LD_ADDR_VAR 0 4
18017: PUSH
18018: LD_INT 1
18020: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18021: LD_ADDR_VAR 0 8
18025: PUSH
18026: LD_VAR 0 1
18030: PPUSH
18031: CALL 17718 0 1
18035: ST_TO_ADDR
// if tmp then
18036: LD_VAR 0 8
18040: IFFALSE 18083
// begin for i in tmp do
18042: LD_ADDR_VAR 0 7
18046: PUSH
18047: LD_VAR 0 8
18051: PUSH
18052: FOR_IN
18053: IFFALSE 18081
// if i [ 1 ] = b_ext_radio then
18055: LD_VAR 0 7
18059: PUSH
18060: LD_INT 1
18062: ARRAY
18063: PUSH
18064: LD_INT 22
18066: EQUAL
18067: IFFALSE 18079
// begin control := control_remote ;
18069: LD_ADDR_VAR 0 4
18073: PUSH
18074: LD_INT 2
18076: ST_TO_ADDR
// break ;
18077: GO 18081
// end ;
18079: GO 18052
18081: POP
18082: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18083: LD_VAR 0 1
18087: PPUSH
18088: LD_VAR 0 2
18092: PPUSH
18093: LD_VAR 0 3
18097: PPUSH
18098: LD_VAR 0 4
18102: PPUSH
18103: LD_VAR 0 5
18107: PPUSH
18108: CALL_OW 448
18112: IFFALSE 18147
// begin result := [ chassis , engine , control , weapon ] ;
18114: LD_ADDR_VAR 0 6
18118: PUSH
18119: LD_VAR 0 2
18123: PUSH
18124: LD_VAR 0 3
18128: PUSH
18129: LD_VAR 0 4
18133: PUSH
18134: LD_VAR 0 5
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: ST_TO_ADDR
// exit ;
18145: GO 18559
// end ; _chassis := AvailableChassisList ( factory ) ;
18147: LD_ADDR_VAR 0 9
18151: PUSH
18152: LD_VAR 0 1
18156: PPUSH
18157: CALL_OW 475
18161: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18162: LD_ADDR_VAR 0 11
18166: PUSH
18167: LD_VAR 0 1
18171: PPUSH
18172: CALL_OW 476
18176: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18177: LD_ADDR_VAR 0 12
18181: PUSH
18182: LD_VAR 0 1
18186: PPUSH
18187: CALL_OW 477
18191: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18192: LD_ADDR_VAR 0 10
18196: PUSH
18197: LD_VAR 0 1
18201: PPUSH
18202: CALL_OW 478
18206: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18207: LD_VAR 0 9
18211: NOT
18212: PUSH
18213: LD_VAR 0 11
18217: NOT
18218: OR
18219: PUSH
18220: LD_VAR 0 12
18224: NOT
18225: OR
18226: PUSH
18227: LD_VAR 0 10
18231: NOT
18232: OR
18233: IFFALSE 18268
// begin result := [ chassis , engine , control , weapon ] ;
18235: LD_ADDR_VAR 0 6
18239: PUSH
18240: LD_VAR 0 2
18244: PUSH
18245: LD_VAR 0 3
18249: PUSH
18250: LD_VAR 0 4
18254: PUSH
18255: LD_VAR 0 5
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: ST_TO_ADDR
// exit ;
18266: GO 18559
// end ; if not chassis in _chassis then
18268: LD_VAR 0 2
18272: PUSH
18273: LD_VAR 0 9
18277: IN
18278: NOT
18279: IFFALSE 18305
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: LD_VAR 0 9
18290: PUSH
18291: LD_INT 1
18293: PPUSH
18294: LD_VAR 0 9
18298: PPUSH
18299: CALL_OW 12
18303: ARRAY
18304: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18305: LD_VAR 0 2
18309: PPUSH
18310: LD_VAR 0 3
18314: PPUSH
18315: CALL 18564 0 2
18319: NOT
18320: IFFALSE 18379
// repeat engine := _engine [ 1 ] ;
18322: LD_ADDR_VAR 0 3
18326: PUSH
18327: LD_VAR 0 11
18331: PUSH
18332: LD_INT 1
18334: ARRAY
18335: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18336: LD_ADDR_VAR 0 11
18340: PUSH
18341: LD_VAR 0 11
18345: PPUSH
18346: LD_INT 1
18348: PPUSH
18349: CALL_OW 3
18353: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18354: LD_VAR 0 2
18358: PPUSH
18359: LD_VAR 0 3
18363: PPUSH
18364: CALL 18564 0 2
18368: PUSH
18369: LD_VAR 0 11
18373: PUSH
18374: EMPTY
18375: EQUAL
18376: OR
18377: IFFALSE 18322
// if not control in _control then
18379: LD_VAR 0 4
18383: PUSH
18384: LD_VAR 0 12
18388: IN
18389: NOT
18390: IFFALSE 18416
// control := _control [ rand ( 1 , _control ) ] ;
18392: LD_ADDR_VAR 0 4
18396: PUSH
18397: LD_VAR 0 12
18401: PUSH
18402: LD_INT 1
18404: PPUSH
18405: LD_VAR 0 12
18409: PPUSH
18410: CALL_OW 12
18414: ARRAY
18415: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18416: LD_VAR 0 2
18420: PPUSH
18421: LD_VAR 0 5
18425: PPUSH
18426: CALL 18784 0 2
18430: NOT
18431: IFFALSE 18490
// repeat weapon := _weapon [ 1 ] ;
18433: LD_ADDR_VAR 0 5
18437: PUSH
18438: LD_VAR 0 10
18442: PUSH
18443: LD_INT 1
18445: ARRAY
18446: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18447: LD_ADDR_VAR 0 10
18451: PUSH
18452: LD_VAR 0 10
18456: PPUSH
18457: LD_INT 1
18459: PPUSH
18460: CALL_OW 3
18464: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18465: LD_VAR 0 2
18469: PPUSH
18470: LD_VAR 0 5
18474: PPUSH
18475: CALL 18784 0 2
18479: PUSH
18480: LD_VAR 0 10
18484: PUSH
18485: EMPTY
18486: EQUAL
18487: OR
18488: IFFALSE 18433
// result := [ ] ;
18490: LD_ADDR_VAR 0 6
18494: PUSH
18495: EMPTY
18496: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18497: LD_VAR 0 1
18501: PPUSH
18502: LD_VAR 0 2
18506: PPUSH
18507: LD_VAR 0 3
18511: PPUSH
18512: LD_VAR 0 4
18516: PPUSH
18517: LD_VAR 0 5
18521: PPUSH
18522: CALL_OW 448
18526: IFFALSE 18559
// result := [ chassis , engine , control , weapon ] ;
18528: LD_ADDR_VAR 0 6
18532: PUSH
18533: LD_VAR 0 2
18537: PUSH
18538: LD_VAR 0 3
18542: PUSH
18543: LD_VAR 0 4
18547: PUSH
18548: LD_VAR 0 5
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: ST_TO_ADDR
// end ;
18559: LD_VAR 0 6
18563: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18564: LD_INT 0
18566: PPUSH
// if not chassis or not engine then
18567: LD_VAR 0 1
18571: NOT
18572: PUSH
18573: LD_VAR 0 2
18577: NOT
18578: OR
18579: IFFALSE 18583
// exit ;
18581: GO 18779
// case engine of engine_solar :
18583: LD_VAR 0 2
18587: PUSH
18588: LD_INT 2
18590: DOUBLE
18591: EQUAL
18592: IFTRUE 18596
18594: GO 18634
18596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18597: LD_ADDR_VAR 0 3
18601: PUSH
18602: LD_INT 11
18604: PUSH
18605: LD_INT 12
18607: PUSH
18608: LD_INT 13
18610: PUSH
18611: LD_INT 14
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: LD_INT 2
18619: PUSH
18620: LD_INT 3
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: ST_TO_ADDR
18632: GO 18763
18634: LD_INT 1
18636: DOUBLE
18637: EQUAL
18638: IFTRUE 18642
18640: GO 18704
18642: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18643: LD_ADDR_VAR 0 3
18647: PUSH
18648: LD_INT 11
18650: PUSH
18651: LD_INT 12
18653: PUSH
18654: LD_INT 13
18656: PUSH
18657: LD_INT 14
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: LD_INT 2
18665: PUSH
18666: LD_INT 3
18668: PUSH
18669: LD_INT 4
18671: PUSH
18672: LD_INT 5
18674: PUSH
18675: LD_INT 21
18677: PUSH
18678: LD_INT 23
18680: PUSH
18681: LD_INT 22
18683: PUSH
18684: LD_INT 24
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: ST_TO_ADDR
18702: GO 18763
18704: LD_INT 3
18706: DOUBLE
18707: EQUAL
18708: IFTRUE 18712
18710: GO 18762
18712: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18713: LD_ADDR_VAR 0 3
18717: PUSH
18718: LD_INT 13
18720: PUSH
18721: LD_INT 14
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 3
18729: PUSH
18730: LD_INT 4
18732: PUSH
18733: LD_INT 5
18735: PUSH
18736: LD_INT 21
18738: PUSH
18739: LD_INT 22
18741: PUSH
18742: LD_INT 23
18744: PUSH
18745: LD_INT 24
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: ST_TO_ADDR
18760: GO 18763
18762: POP
// result := ( chassis in result ) ;
18763: LD_ADDR_VAR 0 3
18767: PUSH
18768: LD_VAR 0 1
18772: PUSH
18773: LD_VAR 0 3
18777: IN
18778: ST_TO_ADDR
// end ;
18779: LD_VAR 0 3
18783: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18784: LD_INT 0
18786: PPUSH
// if not chassis or not weapon then
18787: LD_VAR 0 1
18791: NOT
18792: PUSH
18793: LD_VAR 0 2
18797: NOT
18798: OR
18799: IFFALSE 18803
// exit ;
18801: GO 19863
// case weapon of us_machine_gun :
18803: LD_VAR 0 2
18807: PUSH
18808: LD_INT 2
18810: DOUBLE
18811: EQUAL
18812: IFTRUE 18816
18814: GO 18846
18816: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18817: LD_ADDR_VAR 0 3
18821: PUSH
18822: LD_INT 1
18824: PUSH
18825: LD_INT 2
18827: PUSH
18828: LD_INT 3
18830: PUSH
18831: LD_INT 4
18833: PUSH
18834: LD_INT 5
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: ST_TO_ADDR
18844: GO 19847
18846: LD_INT 3
18848: DOUBLE
18849: EQUAL
18850: IFTRUE 18854
18852: GO 18884
18854: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18855: LD_ADDR_VAR 0 3
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: LD_INT 2
18865: PUSH
18866: LD_INT 3
18868: PUSH
18869: LD_INT 4
18871: PUSH
18872: LD_INT 5
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: ST_TO_ADDR
18882: GO 19847
18884: LD_INT 11
18886: DOUBLE
18887: EQUAL
18888: IFTRUE 18892
18890: GO 18922
18892: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18893: LD_ADDR_VAR 0 3
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 3
18906: PUSH
18907: LD_INT 4
18909: PUSH
18910: LD_INT 5
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: ST_TO_ADDR
18920: GO 19847
18922: LD_INT 4
18924: DOUBLE
18925: EQUAL
18926: IFTRUE 18930
18928: GO 18956
18930: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18931: LD_ADDR_VAR 0 3
18935: PUSH
18936: LD_INT 2
18938: PUSH
18939: LD_INT 3
18941: PUSH
18942: LD_INT 4
18944: PUSH
18945: LD_INT 5
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: ST_TO_ADDR
18954: GO 19847
18956: LD_INT 5
18958: DOUBLE
18959: EQUAL
18960: IFTRUE 18964
18962: GO 18990
18964: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18965: LD_ADDR_VAR 0 3
18969: PUSH
18970: LD_INT 2
18972: PUSH
18973: LD_INT 3
18975: PUSH
18976: LD_INT 4
18978: PUSH
18979: LD_INT 5
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: ST_TO_ADDR
18988: GO 19847
18990: LD_INT 9
18992: DOUBLE
18993: EQUAL
18994: IFTRUE 18998
18996: GO 19024
18998: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18999: LD_ADDR_VAR 0 3
19003: PUSH
19004: LD_INT 2
19006: PUSH
19007: LD_INT 3
19009: PUSH
19010: LD_INT 4
19012: PUSH
19013: LD_INT 5
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: ST_TO_ADDR
19022: GO 19847
19024: LD_INT 7
19026: DOUBLE
19027: EQUAL
19028: IFTRUE 19032
19030: GO 19058
19032: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19033: LD_ADDR_VAR 0 3
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: LD_INT 3
19043: PUSH
19044: LD_INT 4
19046: PUSH
19047: LD_INT 5
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: ST_TO_ADDR
19056: GO 19847
19058: LD_INT 12
19060: DOUBLE
19061: EQUAL
19062: IFTRUE 19066
19064: GO 19092
19066: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19067: LD_ADDR_VAR 0 3
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 3
19077: PUSH
19078: LD_INT 4
19080: PUSH
19081: LD_INT 5
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: ST_TO_ADDR
19090: GO 19847
19092: LD_INT 13
19094: DOUBLE
19095: EQUAL
19096: IFTRUE 19100
19098: GO 19126
19100: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19101: LD_ADDR_VAR 0 3
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 3
19111: PUSH
19112: LD_INT 4
19114: PUSH
19115: LD_INT 5
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: ST_TO_ADDR
19124: GO 19847
19126: LD_INT 14
19128: DOUBLE
19129: EQUAL
19130: IFTRUE 19134
19132: GO 19152
19134: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19135: LD_ADDR_VAR 0 3
19139: PUSH
19140: LD_INT 4
19142: PUSH
19143: LD_INT 5
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: ST_TO_ADDR
19150: GO 19847
19152: LD_INT 6
19154: DOUBLE
19155: EQUAL
19156: IFTRUE 19160
19158: GO 19178
19160: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19161: LD_ADDR_VAR 0 3
19165: PUSH
19166: LD_INT 4
19168: PUSH
19169: LD_INT 5
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: ST_TO_ADDR
19176: GO 19847
19178: LD_INT 10
19180: DOUBLE
19181: EQUAL
19182: IFTRUE 19186
19184: GO 19204
19186: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19187: LD_ADDR_VAR 0 3
19191: PUSH
19192: LD_INT 4
19194: PUSH
19195: LD_INT 5
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: ST_TO_ADDR
19202: GO 19847
19204: LD_INT 22
19206: DOUBLE
19207: EQUAL
19208: IFTRUE 19212
19210: GO 19238
19212: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19213: LD_ADDR_VAR 0 3
19217: PUSH
19218: LD_INT 11
19220: PUSH
19221: LD_INT 12
19223: PUSH
19224: LD_INT 13
19226: PUSH
19227: LD_INT 14
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: ST_TO_ADDR
19236: GO 19847
19238: LD_INT 23
19240: DOUBLE
19241: EQUAL
19242: IFTRUE 19246
19244: GO 19272
19246: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19247: LD_ADDR_VAR 0 3
19251: PUSH
19252: LD_INT 11
19254: PUSH
19255: LD_INT 12
19257: PUSH
19258: LD_INT 13
19260: PUSH
19261: LD_INT 14
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: ST_TO_ADDR
19270: GO 19847
19272: LD_INT 24
19274: DOUBLE
19275: EQUAL
19276: IFTRUE 19280
19278: GO 19306
19280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19281: LD_ADDR_VAR 0 3
19285: PUSH
19286: LD_INT 11
19288: PUSH
19289: LD_INT 12
19291: PUSH
19292: LD_INT 13
19294: PUSH
19295: LD_INT 14
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: ST_TO_ADDR
19304: GO 19847
19306: LD_INT 30
19308: DOUBLE
19309: EQUAL
19310: IFTRUE 19314
19312: GO 19340
19314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19315: LD_ADDR_VAR 0 3
19319: PUSH
19320: LD_INT 11
19322: PUSH
19323: LD_INT 12
19325: PUSH
19326: LD_INT 13
19328: PUSH
19329: LD_INT 14
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: ST_TO_ADDR
19338: GO 19847
19340: LD_INT 25
19342: DOUBLE
19343: EQUAL
19344: IFTRUE 19348
19346: GO 19366
19348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19349: LD_ADDR_VAR 0 3
19353: PUSH
19354: LD_INT 13
19356: PUSH
19357: LD_INT 14
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: ST_TO_ADDR
19364: GO 19847
19366: LD_INT 27
19368: DOUBLE
19369: EQUAL
19370: IFTRUE 19374
19372: GO 19392
19374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19375: LD_ADDR_VAR 0 3
19379: PUSH
19380: LD_INT 13
19382: PUSH
19383: LD_INT 14
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: ST_TO_ADDR
19390: GO 19847
19392: LD_INT 92
19394: DOUBLE
19395: EQUAL
19396: IFTRUE 19400
19398: GO 19426
19400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19401: LD_ADDR_VAR 0 3
19405: PUSH
19406: LD_INT 11
19408: PUSH
19409: LD_INT 12
19411: PUSH
19412: LD_INT 13
19414: PUSH
19415: LD_INT 14
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: ST_TO_ADDR
19424: GO 19847
19426: LD_INT 28
19428: DOUBLE
19429: EQUAL
19430: IFTRUE 19434
19432: GO 19452
19434: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19435: LD_ADDR_VAR 0 3
19439: PUSH
19440: LD_INT 13
19442: PUSH
19443: LD_INT 14
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: ST_TO_ADDR
19450: GO 19847
19452: LD_INT 29
19454: DOUBLE
19455: EQUAL
19456: IFTRUE 19460
19458: GO 19478
19460: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19461: LD_ADDR_VAR 0 3
19465: PUSH
19466: LD_INT 13
19468: PUSH
19469: LD_INT 14
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: ST_TO_ADDR
19476: GO 19847
19478: LD_INT 31
19480: DOUBLE
19481: EQUAL
19482: IFTRUE 19486
19484: GO 19504
19486: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19487: LD_ADDR_VAR 0 3
19491: PUSH
19492: LD_INT 13
19494: PUSH
19495: LD_INT 14
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: ST_TO_ADDR
19502: GO 19847
19504: LD_INT 26
19506: DOUBLE
19507: EQUAL
19508: IFTRUE 19512
19510: GO 19530
19512: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19513: LD_ADDR_VAR 0 3
19517: PUSH
19518: LD_INT 13
19520: PUSH
19521: LD_INT 14
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: ST_TO_ADDR
19528: GO 19847
19530: LD_INT 42
19532: DOUBLE
19533: EQUAL
19534: IFTRUE 19538
19536: GO 19564
19538: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19539: LD_ADDR_VAR 0 3
19543: PUSH
19544: LD_INT 21
19546: PUSH
19547: LD_INT 22
19549: PUSH
19550: LD_INT 23
19552: PUSH
19553: LD_INT 24
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: ST_TO_ADDR
19562: GO 19847
19564: LD_INT 43
19566: DOUBLE
19567: EQUAL
19568: IFTRUE 19572
19570: GO 19598
19572: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19573: LD_ADDR_VAR 0 3
19577: PUSH
19578: LD_INT 21
19580: PUSH
19581: LD_INT 22
19583: PUSH
19584: LD_INT 23
19586: PUSH
19587: LD_INT 24
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: ST_TO_ADDR
19596: GO 19847
19598: LD_INT 44
19600: DOUBLE
19601: EQUAL
19602: IFTRUE 19606
19604: GO 19632
19606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19607: LD_ADDR_VAR 0 3
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 22
19617: PUSH
19618: LD_INT 23
19620: PUSH
19621: LD_INT 24
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: ST_TO_ADDR
19630: GO 19847
19632: LD_INT 45
19634: DOUBLE
19635: EQUAL
19636: IFTRUE 19640
19638: GO 19666
19640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19641: LD_ADDR_VAR 0 3
19645: PUSH
19646: LD_INT 21
19648: PUSH
19649: LD_INT 22
19651: PUSH
19652: LD_INT 23
19654: PUSH
19655: LD_INT 24
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: ST_TO_ADDR
19664: GO 19847
19666: LD_INT 49
19668: DOUBLE
19669: EQUAL
19670: IFTRUE 19674
19672: GO 19700
19674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19675: LD_ADDR_VAR 0 3
19679: PUSH
19680: LD_INT 21
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_INT 23
19688: PUSH
19689: LD_INT 24
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: ST_TO_ADDR
19698: GO 19847
19700: LD_INT 51
19702: DOUBLE
19703: EQUAL
19704: IFTRUE 19708
19706: GO 19734
19708: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19709: LD_ADDR_VAR 0 3
19713: PUSH
19714: LD_INT 21
19716: PUSH
19717: LD_INT 22
19719: PUSH
19720: LD_INT 23
19722: PUSH
19723: LD_INT 24
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: ST_TO_ADDR
19732: GO 19847
19734: LD_INT 52
19736: DOUBLE
19737: EQUAL
19738: IFTRUE 19742
19740: GO 19768
19742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19743: LD_ADDR_VAR 0 3
19747: PUSH
19748: LD_INT 21
19750: PUSH
19751: LD_INT 22
19753: PUSH
19754: LD_INT 23
19756: PUSH
19757: LD_INT 24
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: ST_TO_ADDR
19766: GO 19847
19768: LD_INT 53
19770: DOUBLE
19771: EQUAL
19772: IFTRUE 19776
19774: GO 19794
19776: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19777: LD_ADDR_VAR 0 3
19781: PUSH
19782: LD_INT 23
19784: PUSH
19785: LD_INT 24
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: ST_TO_ADDR
19792: GO 19847
19794: LD_INT 46
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 19820
19802: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19803: LD_ADDR_VAR 0 3
19807: PUSH
19808: LD_INT 23
19810: PUSH
19811: LD_INT 24
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: ST_TO_ADDR
19818: GO 19847
19820: LD_INT 47
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19846
19828: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19829: LD_ADDR_VAR 0 3
19833: PUSH
19834: LD_INT 23
19836: PUSH
19837: LD_INT 24
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: ST_TO_ADDR
19844: GO 19847
19846: POP
// result := ( chassis in result ) ;
19847: LD_ADDR_VAR 0 3
19851: PUSH
19852: LD_VAR 0 1
19856: PUSH
19857: LD_VAR 0 3
19861: IN
19862: ST_TO_ADDR
// end ;
19863: LD_VAR 0 3
19867: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19868: LD_INT 0
19870: PPUSH
19871: PPUSH
19872: PPUSH
19873: PPUSH
19874: PPUSH
19875: PPUSH
19876: PPUSH
// result := array ;
19877: LD_ADDR_VAR 0 5
19881: PUSH
19882: LD_VAR 0 1
19886: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19887: LD_VAR 0 1
19891: NOT
19892: PUSH
19893: LD_VAR 0 2
19897: NOT
19898: OR
19899: PUSH
19900: LD_VAR 0 3
19904: NOT
19905: OR
19906: PUSH
19907: LD_VAR 0 2
19911: PUSH
19912: LD_VAR 0 1
19916: GREATER
19917: OR
19918: PUSH
19919: LD_VAR 0 3
19923: PUSH
19924: LD_VAR 0 1
19928: GREATER
19929: OR
19930: IFFALSE 19934
// exit ;
19932: GO 20230
// if direction then
19934: LD_VAR 0 4
19938: IFFALSE 20002
// begin d := 1 ;
19940: LD_ADDR_VAR 0 9
19944: PUSH
19945: LD_INT 1
19947: ST_TO_ADDR
// if i_from > i_to then
19948: LD_VAR 0 2
19952: PUSH
19953: LD_VAR 0 3
19957: GREATER
19958: IFFALSE 19984
// length := ( array - i_from ) + i_to else
19960: LD_ADDR_VAR 0 11
19964: PUSH
19965: LD_VAR 0 1
19969: PUSH
19970: LD_VAR 0 2
19974: MINUS
19975: PUSH
19976: LD_VAR 0 3
19980: PLUS
19981: ST_TO_ADDR
19982: GO 20000
// length := i_to - i_from ;
19984: LD_ADDR_VAR 0 11
19988: PUSH
19989: LD_VAR 0 3
19993: PUSH
19994: LD_VAR 0 2
19998: MINUS
19999: ST_TO_ADDR
// end else
20000: GO 20063
// begin d := - 1 ;
20002: LD_ADDR_VAR 0 9
20006: PUSH
20007: LD_INT 1
20009: NEG
20010: ST_TO_ADDR
// if i_from > i_to then
20011: LD_VAR 0 2
20015: PUSH
20016: LD_VAR 0 3
20020: GREATER
20021: IFFALSE 20041
// length := i_from - i_to else
20023: LD_ADDR_VAR 0 11
20027: PUSH
20028: LD_VAR 0 2
20032: PUSH
20033: LD_VAR 0 3
20037: MINUS
20038: ST_TO_ADDR
20039: GO 20063
// length := ( array - i_to ) + i_from ;
20041: LD_ADDR_VAR 0 11
20045: PUSH
20046: LD_VAR 0 1
20050: PUSH
20051: LD_VAR 0 3
20055: MINUS
20056: PUSH
20057: LD_VAR 0 2
20061: PLUS
20062: ST_TO_ADDR
// end ; if not length then
20063: LD_VAR 0 11
20067: NOT
20068: IFFALSE 20072
// exit ;
20070: GO 20230
// tmp := array ;
20072: LD_ADDR_VAR 0 10
20076: PUSH
20077: LD_VAR 0 1
20081: ST_TO_ADDR
// for i = 1 to length do
20082: LD_ADDR_VAR 0 6
20086: PUSH
20087: DOUBLE
20088: LD_INT 1
20090: DEC
20091: ST_TO_ADDR
20092: LD_VAR 0 11
20096: PUSH
20097: FOR_TO
20098: IFFALSE 20218
// begin for j = 1 to array do
20100: LD_ADDR_VAR 0 7
20104: PUSH
20105: DOUBLE
20106: LD_INT 1
20108: DEC
20109: ST_TO_ADDR
20110: LD_VAR 0 1
20114: PUSH
20115: FOR_TO
20116: IFFALSE 20204
// begin k := j + d ;
20118: LD_ADDR_VAR 0 8
20122: PUSH
20123: LD_VAR 0 7
20127: PUSH
20128: LD_VAR 0 9
20132: PLUS
20133: ST_TO_ADDR
// if k > array then
20134: LD_VAR 0 8
20138: PUSH
20139: LD_VAR 0 1
20143: GREATER
20144: IFFALSE 20154
// k := 1 ;
20146: LD_ADDR_VAR 0 8
20150: PUSH
20151: LD_INT 1
20153: ST_TO_ADDR
// if not k then
20154: LD_VAR 0 8
20158: NOT
20159: IFFALSE 20171
// k := array ;
20161: LD_ADDR_VAR 0 8
20165: PUSH
20166: LD_VAR 0 1
20170: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20171: LD_ADDR_VAR 0 10
20175: PUSH
20176: LD_VAR 0 10
20180: PPUSH
20181: LD_VAR 0 8
20185: PPUSH
20186: LD_VAR 0 1
20190: PUSH
20191: LD_VAR 0 7
20195: ARRAY
20196: PPUSH
20197: CALL_OW 1
20201: ST_TO_ADDR
// end ;
20202: GO 20115
20204: POP
20205: POP
// array := tmp ;
20206: LD_ADDR_VAR 0 1
20210: PUSH
20211: LD_VAR 0 10
20215: ST_TO_ADDR
// end ;
20216: GO 20097
20218: POP
20219: POP
// result := array ;
20220: LD_ADDR_VAR 0 5
20224: PUSH
20225: LD_VAR 0 1
20229: ST_TO_ADDR
// end ;
20230: LD_VAR 0 5
20234: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20235: LD_INT 0
20237: PPUSH
20238: PPUSH
// result := 0 ;
20239: LD_ADDR_VAR 0 3
20243: PUSH
20244: LD_INT 0
20246: ST_TO_ADDR
// if not array or not value in array then
20247: LD_VAR 0 1
20251: NOT
20252: PUSH
20253: LD_VAR 0 2
20257: PUSH
20258: LD_VAR 0 1
20262: IN
20263: NOT
20264: OR
20265: IFFALSE 20269
// exit ;
20267: GO 20323
// for i = 1 to array do
20269: LD_ADDR_VAR 0 4
20273: PUSH
20274: DOUBLE
20275: LD_INT 1
20277: DEC
20278: ST_TO_ADDR
20279: LD_VAR 0 1
20283: PUSH
20284: FOR_TO
20285: IFFALSE 20321
// if value = array [ i ] then
20287: LD_VAR 0 2
20291: PUSH
20292: LD_VAR 0 1
20296: PUSH
20297: LD_VAR 0 4
20301: ARRAY
20302: EQUAL
20303: IFFALSE 20319
// begin result := i ;
20305: LD_ADDR_VAR 0 3
20309: PUSH
20310: LD_VAR 0 4
20314: ST_TO_ADDR
// exit ;
20315: POP
20316: POP
20317: GO 20323
// end ;
20319: GO 20284
20321: POP
20322: POP
// end ;
20323: LD_VAR 0 3
20327: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20328: LD_INT 0
20330: PPUSH
// vc_chassis := chassis ;
20331: LD_ADDR_OWVAR 37
20335: PUSH
20336: LD_VAR 0 1
20340: ST_TO_ADDR
// vc_engine := engine ;
20341: LD_ADDR_OWVAR 39
20345: PUSH
20346: LD_VAR 0 2
20350: ST_TO_ADDR
// vc_control := control ;
20351: LD_ADDR_OWVAR 38
20355: PUSH
20356: LD_VAR 0 3
20360: ST_TO_ADDR
// vc_weapon := weapon ;
20361: LD_ADDR_OWVAR 40
20365: PUSH
20366: LD_VAR 0 4
20370: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20371: LD_ADDR_OWVAR 41
20375: PUSH
20376: LD_VAR 0 5
20380: ST_TO_ADDR
// end ;
20381: LD_VAR 0 6
20385: RET
// export function WantPlant ( unit ) ; var task ; begin
20386: LD_INT 0
20388: PPUSH
20389: PPUSH
// result := false ;
20390: LD_ADDR_VAR 0 2
20394: PUSH
20395: LD_INT 0
20397: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20398: LD_ADDR_VAR 0 3
20402: PUSH
20403: LD_VAR 0 1
20407: PPUSH
20408: CALL_OW 437
20412: ST_TO_ADDR
// if task then
20413: LD_VAR 0 3
20417: IFFALSE 20445
// if task [ 1 ] [ 1 ] = p then
20419: LD_VAR 0 3
20423: PUSH
20424: LD_INT 1
20426: ARRAY
20427: PUSH
20428: LD_INT 1
20430: ARRAY
20431: PUSH
20432: LD_STRING p
20434: EQUAL
20435: IFFALSE 20445
// result := true ;
20437: LD_ADDR_VAR 0 2
20441: PUSH
20442: LD_INT 1
20444: ST_TO_ADDR
// end ;
20445: LD_VAR 0 2
20449: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20450: LD_INT 0
20452: PPUSH
20453: PPUSH
20454: PPUSH
20455: PPUSH
// if pos < 1 then
20456: LD_VAR 0 2
20460: PUSH
20461: LD_INT 1
20463: LESS
20464: IFFALSE 20468
// exit ;
20466: GO 20771
// if pos = 1 then
20468: LD_VAR 0 2
20472: PUSH
20473: LD_INT 1
20475: EQUAL
20476: IFFALSE 20509
// result := Replace ( arr , pos [ 1 ] , value ) else
20478: LD_ADDR_VAR 0 4
20482: PUSH
20483: LD_VAR 0 1
20487: PPUSH
20488: LD_VAR 0 2
20492: PUSH
20493: LD_INT 1
20495: ARRAY
20496: PPUSH
20497: LD_VAR 0 3
20501: PPUSH
20502: CALL_OW 1
20506: ST_TO_ADDR
20507: GO 20771
// begin tmp := arr ;
20509: LD_ADDR_VAR 0 6
20513: PUSH
20514: LD_VAR 0 1
20518: ST_TO_ADDR
// s_arr := [ tmp ] ;
20519: LD_ADDR_VAR 0 7
20523: PUSH
20524: LD_VAR 0 6
20528: PUSH
20529: EMPTY
20530: LIST
20531: ST_TO_ADDR
// for i = 1 to pos - 1 do
20532: LD_ADDR_VAR 0 5
20536: PUSH
20537: DOUBLE
20538: LD_INT 1
20540: DEC
20541: ST_TO_ADDR
20542: LD_VAR 0 2
20546: PUSH
20547: LD_INT 1
20549: MINUS
20550: PUSH
20551: FOR_TO
20552: IFFALSE 20597
// begin tmp := tmp [ pos [ i ] ] ;
20554: LD_ADDR_VAR 0 6
20558: PUSH
20559: LD_VAR 0 6
20563: PUSH
20564: LD_VAR 0 2
20568: PUSH
20569: LD_VAR 0 5
20573: ARRAY
20574: ARRAY
20575: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20576: LD_ADDR_VAR 0 7
20580: PUSH
20581: LD_VAR 0 7
20585: PUSH
20586: LD_VAR 0 6
20590: PUSH
20591: EMPTY
20592: LIST
20593: ADD
20594: ST_TO_ADDR
// end ;
20595: GO 20551
20597: POP
20598: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20599: LD_ADDR_VAR 0 6
20603: PUSH
20604: LD_VAR 0 6
20608: PPUSH
20609: LD_VAR 0 2
20613: PUSH
20614: LD_VAR 0 2
20618: ARRAY
20619: PPUSH
20620: LD_VAR 0 3
20624: PPUSH
20625: CALL_OW 1
20629: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20630: LD_ADDR_VAR 0 7
20634: PUSH
20635: LD_VAR 0 7
20639: PPUSH
20640: LD_VAR 0 7
20644: PPUSH
20645: LD_VAR 0 6
20649: PPUSH
20650: CALL_OW 1
20654: ST_TO_ADDR
// for i = s_arr downto 2 do
20655: LD_ADDR_VAR 0 5
20659: PUSH
20660: DOUBLE
20661: LD_VAR 0 7
20665: INC
20666: ST_TO_ADDR
20667: LD_INT 2
20669: PUSH
20670: FOR_DOWNTO
20671: IFFALSE 20755
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20673: LD_ADDR_VAR 0 6
20677: PUSH
20678: LD_VAR 0 7
20682: PUSH
20683: LD_VAR 0 5
20687: PUSH
20688: LD_INT 1
20690: MINUS
20691: ARRAY
20692: PPUSH
20693: LD_VAR 0 2
20697: PUSH
20698: LD_VAR 0 5
20702: PUSH
20703: LD_INT 1
20705: MINUS
20706: ARRAY
20707: PPUSH
20708: LD_VAR 0 7
20712: PUSH
20713: LD_VAR 0 5
20717: ARRAY
20718: PPUSH
20719: CALL_OW 1
20723: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20724: LD_ADDR_VAR 0 7
20728: PUSH
20729: LD_VAR 0 7
20733: PPUSH
20734: LD_VAR 0 5
20738: PUSH
20739: LD_INT 1
20741: MINUS
20742: PPUSH
20743: LD_VAR 0 6
20747: PPUSH
20748: CALL_OW 1
20752: ST_TO_ADDR
// end ;
20753: GO 20670
20755: POP
20756: POP
// result := s_arr [ 1 ] ;
20757: LD_ADDR_VAR 0 4
20761: PUSH
20762: LD_VAR 0 7
20766: PUSH
20767: LD_INT 1
20769: ARRAY
20770: ST_TO_ADDR
// end ; end ;
20771: LD_VAR 0 4
20775: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20776: LD_INT 0
20778: PPUSH
20779: PPUSH
// if not list then
20780: LD_VAR 0 1
20784: NOT
20785: IFFALSE 20789
// exit ;
20787: GO 20880
// i := list [ pos1 ] ;
20789: LD_ADDR_VAR 0 5
20793: PUSH
20794: LD_VAR 0 1
20798: PUSH
20799: LD_VAR 0 2
20803: ARRAY
20804: ST_TO_ADDR
// if not i then
20805: LD_VAR 0 5
20809: NOT
20810: IFFALSE 20814
// exit ;
20812: GO 20880
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20814: LD_ADDR_VAR 0 1
20818: PUSH
20819: LD_VAR 0 1
20823: PPUSH
20824: LD_VAR 0 2
20828: PPUSH
20829: LD_VAR 0 1
20833: PUSH
20834: LD_VAR 0 3
20838: ARRAY
20839: PPUSH
20840: CALL_OW 1
20844: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20845: LD_ADDR_VAR 0 1
20849: PUSH
20850: LD_VAR 0 1
20854: PPUSH
20855: LD_VAR 0 3
20859: PPUSH
20860: LD_VAR 0 5
20864: PPUSH
20865: CALL_OW 1
20869: ST_TO_ADDR
// result := list ;
20870: LD_ADDR_VAR 0 4
20874: PUSH
20875: LD_VAR 0 1
20879: ST_TO_ADDR
// end ;
20880: LD_VAR 0 4
20884: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20885: LD_INT 0
20887: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20888: LD_ADDR_VAR 0 5
20892: PUSH
20893: LD_VAR 0 1
20897: PPUSH
20898: CALL_OW 250
20902: PPUSH
20903: LD_VAR 0 1
20907: PPUSH
20908: CALL_OW 251
20912: PPUSH
20913: LD_VAR 0 2
20917: PPUSH
20918: LD_VAR 0 3
20922: PPUSH
20923: LD_VAR 0 4
20927: PPUSH
20928: CALL 21306 0 5
20932: ST_TO_ADDR
// end ;
20933: LD_VAR 0 5
20937: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20938: LD_INT 0
20940: PPUSH
20941: PPUSH
20942: PPUSH
20943: PPUSH
// if not list or not unit then
20944: LD_VAR 0 2
20948: NOT
20949: PUSH
20950: LD_VAR 0 1
20954: NOT
20955: OR
20956: IFFALSE 20960
// exit ;
20958: GO 21301
// result := [ ] ;
20960: LD_ADDR_VAR 0 5
20964: PUSH
20965: EMPTY
20966: ST_TO_ADDR
// for i in list do
20967: LD_ADDR_VAR 0 6
20971: PUSH
20972: LD_VAR 0 2
20976: PUSH
20977: FOR_IN
20978: IFFALSE 21196
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20980: LD_ADDR_VAR 0 8
20984: PUSH
20985: LD_VAR 0 1
20989: PPUSH
20990: LD_VAR 0 6
20994: PUSH
20995: LD_INT 1
20997: ARRAY
20998: PPUSH
20999: LD_VAR 0 6
21003: PUSH
21004: LD_INT 2
21006: ARRAY
21007: PPUSH
21008: CALL_OW 297
21012: ST_TO_ADDR
// if not Count ( result ) then
21013: LD_VAR 0 5
21017: PPUSH
21018: CALL 17590 0 1
21022: NOT
21023: IFFALSE 21056
// begin result := Join ( result , [ i , tmp ] ) ;
21025: LD_ADDR_VAR 0 5
21029: PUSH
21030: LD_VAR 0 5
21034: PPUSH
21035: LD_VAR 0 6
21039: PUSH
21040: LD_VAR 0 8
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PPUSH
21049: CALL 53190 0 2
21053: ST_TO_ADDR
// continue ;
21054: GO 20977
// end ; if result [ result ] [ 2 ] <= tmp then
21056: LD_VAR 0 5
21060: PUSH
21061: LD_VAR 0 5
21065: ARRAY
21066: PUSH
21067: LD_INT 2
21069: ARRAY
21070: PUSH
21071: LD_VAR 0 8
21075: LESSEQUAL
21076: IFFALSE 21109
// result := Join ( result , [ i , tmp ] ) else
21078: LD_ADDR_VAR 0 5
21082: PUSH
21083: LD_VAR 0 5
21087: PPUSH
21088: LD_VAR 0 6
21092: PUSH
21093: LD_VAR 0 8
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PPUSH
21102: CALL 53190 0 2
21106: ST_TO_ADDR
21107: GO 21194
// begin for j := 1 to Count ( result ) do
21109: LD_ADDR_VAR 0 7
21113: PUSH
21114: DOUBLE
21115: LD_INT 1
21117: DEC
21118: ST_TO_ADDR
21119: LD_VAR 0 5
21123: PPUSH
21124: CALL 17590 0 1
21128: PUSH
21129: FOR_TO
21130: IFFALSE 21192
// begin if tmp < result [ j ] [ 2 ] then
21132: LD_VAR 0 8
21136: PUSH
21137: LD_VAR 0 5
21141: PUSH
21142: LD_VAR 0 7
21146: ARRAY
21147: PUSH
21148: LD_INT 2
21150: ARRAY
21151: LESS
21152: IFFALSE 21190
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21154: LD_ADDR_VAR 0 5
21158: PUSH
21159: LD_VAR 0 5
21163: PPUSH
21164: LD_VAR 0 7
21168: PPUSH
21169: LD_VAR 0 6
21173: PUSH
21174: LD_VAR 0 8
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PPUSH
21183: CALL_OW 2
21187: ST_TO_ADDR
// break ;
21188: GO 21192
// end ; end ;
21190: GO 21129
21192: POP
21193: POP
// end ; end ;
21194: GO 20977
21196: POP
21197: POP
// if result and not asc then
21198: LD_VAR 0 5
21202: PUSH
21203: LD_VAR 0 3
21207: NOT
21208: AND
21209: IFFALSE 21226
// result := ReverseArray ( result ) ;
21211: LD_ADDR_VAR 0 5
21215: PUSH
21216: LD_VAR 0 5
21220: PPUSH
21221: CALL 48466 0 1
21225: ST_TO_ADDR
// tmp := [ ] ;
21226: LD_ADDR_VAR 0 8
21230: PUSH
21231: EMPTY
21232: ST_TO_ADDR
// if mode then
21233: LD_VAR 0 4
21237: IFFALSE 21301
// begin for i := 1 to result do
21239: LD_ADDR_VAR 0 6
21243: PUSH
21244: DOUBLE
21245: LD_INT 1
21247: DEC
21248: ST_TO_ADDR
21249: LD_VAR 0 5
21253: PUSH
21254: FOR_TO
21255: IFFALSE 21289
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21257: LD_ADDR_VAR 0 8
21261: PUSH
21262: LD_VAR 0 8
21266: PPUSH
21267: LD_VAR 0 5
21271: PUSH
21272: LD_VAR 0 6
21276: ARRAY
21277: PUSH
21278: LD_INT 1
21280: ARRAY
21281: PPUSH
21282: CALL 53190 0 2
21286: ST_TO_ADDR
21287: GO 21254
21289: POP
21290: POP
// result := tmp ;
21291: LD_ADDR_VAR 0 5
21295: PUSH
21296: LD_VAR 0 8
21300: ST_TO_ADDR
// end ; end ;
21301: LD_VAR 0 5
21305: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21306: LD_INT 0
21308: PPUSH
21309: PPUSH
21310: PPUSH
21311: PPUSH
// if not list then
21312: LD_VAR 0 3
21316: NOT
21317: IFFALSE 21321
// exit ;
21319: GO 21709
// result := [ ] ;
21321: LD_ADDR_VAR 0 6
21325: PUSH
21326: EMPTY
21327: ST_TO_ADDR
// for i in list do
21328: LD_ADDR_VAR 0 7
21332: PUSH
21333: LD_VAR 0 3
21337: PUSH
21338: FOR_IN
21339: IFFALSE 21541
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21341: LD_ADDR_VAR 0 9
21345: PUSH
21346: LD_VAR 0 7
21350: PPUSH
21351: LD_VAR 0 1
21355: PPUSH
21356: LD_VAR 0 2
21360: PPUSH
21361: CALL_OW 297
21365: ST_TO_ADDR
// if not result then
21366: LD_VAR 0 6
21370: NOT
21371: IFFALSE 21397
// result := [ [ i , tmp ] ] else
21373: LD_ADDR_VAR 0 6
21377: PUSH
21378: LD_VAR 0 7
21382: PUSH
21383: LD_VAR 0 9
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: EMPTY
21393: LIST
21394: ST_TO_ADDR
21395: GO 21539
// begin if result [ result ] [ 2 ] < tmp then
21397: LD_VAR 0 6
21401: PUSH
21402: LD_VAR 0 6
21406: ARRAY
21407: PUSH
21408: LD_INT 2
21410: ARRAY
21411: PUSH
21412: LD_VAR 0 9
21416: LESS
21417: IFFALSE 21459
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21419: LD_ADDR_VAR 0 6
21423: PUSH
21424: LD_VAR 0 6
21428: PPUSH
21429: LD_VAR 0 6
21433: PUSH
21434: LD_INT 1
21436: PLUS
21437: PPUSH
21438: LD_VAR 0 7
21442: PUSH
21443: LD_VAR 0 9
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PPUSH
21452: CALL_OW 2
21456: ST_TO_ADDR
21457: GO 21539
// for j = 1 to result do
21459: LD_ADDR_VAR 0 8
21463: PUSH
21464: DOUBLE
21465: LD_INT 1
21467: DEC
21468: ST_TO_ADDR
21469: LD_VAR 0 6
21473: PUSH
21474: FOR_TO
21475: IFFALSE 21537
// begin if tmp < result [ j ] [ 2 ] then
21477: LD_VAR 0 9
21481: PUSH
21482: LD_VAR 0 6
21486: PUSH
21487: LD_VAR 0 8
21491: ARRAY
21492: PUSH
21493: LD_INT 2
21495: ARRAY
21496: LESS
21497: IFFALSE 21535
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21499: LD_ADDR_VAR 0 6
21503: PUSH
21504: LD_VAR 0 6
21508: PPUSH
21509: LD_VAR 0 8
21513: PPUSH
21514: LD_VAR 0 7
21518: PUSH
21519: LD_VAR 0 9
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PPUSH
21528: CALL_OW 2
21532: ST_TO_ADDR
// break ;
21533: GO 21537
// end ; end ;
21535: GO 21474
21537: POP
21538: POP
// end ; end ;
21539: GO 21338
21541: POP
21542: POP
// if result and not asc then
21543: LD_VAR 0 6
21547: PUSH
21548: LD_VAR 0 4
21552: NOT
21553: AND
21554: IFFALSE 21629
// begin tmp := result ;
21556: LD_ADDR_VAR 0 9
21560: PUSH
21561: LD_VAR 0 6
21565: ST_TO_ADDR
// for i = tmp downto 1 do
21566: LD_ADDR_VAR 0 7
21570: PUSH
21571: DOUBLE
21572: LD_VAR 0 9
21576: INC
21577: ST_TO_ADDR
21578: LD_INT 1
21580: PUSH
21581: FOR_DOWNTO
21582: IFFALSE 21627
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21584: LD_ADDR_VAR 0 6
21588: PUSH
21589: LD_VAR 0 6
21593: PPUSH
21594: LD_VAR 0 9
21598: PUSH
21599: LD_VAR 0 7
21603: MINUS
21604: PUSH
21605: LD_INT 1
21607: PLUS
21608: PPUSH
21609: LD_VAR 0 9
21613: PUSH
21614: LD_VAR 0 7
21618: ARRAY
21619: PPUSH
21620: CALL_OW 1
21624: ST_TO_ADDR
21625: GO 21581
21627: POP
21628: POP
// end ; tmp := [ ] ;
21629: LD_ADDR_VAR 0 9
21633: PUSH
21634: EMPTY
21635: ST_TO_ADDR
// if mode then
21636: LD_VAR 0 5
21640: IFFALSE 21709
// begin for i = 1 to result do
21642: LD_ADDR_VAR 0 7
21646: PUSH
21647: DOUBLE
21648: LD_INT 1
21650: DEC
21651: ST_TO_ADDR
21652: LD_VAR 0 6
21656: PUSH
21657: FOR_TO
21658: IFFALSE 21697
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21660: LD_ADDR_VAR 0 9
21664: PUSH
21665: LD_VAR 0 9
21669: PPUSH
21670: LD_VAR 0 7
21674: PPUSH
21675: LD_VAR 0 6
21679: PUSH
21680: LD_VAR 0 7
21684: ARRAY
21685: PUSH
21686: LD_INT 1
21688: ARRAY
21689: PPUSH
21690: CALL_OW 1
21694: ST_TO_ADDR
21695: GO 21657
21697: POP
21698: POP
// result := tmp ;
21699: LD_ADDR_VAR 0 6
21703: PUSH
21704: LD_VAR 0 9
21708: ST_TO_ADDR
// end ; end ;
21709: LD_VAR 0 6
21713: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21714: LD_INT 0
21716: PPUSH
21717: PPUSH
21718: PPUSH
21719: PPUSH
21720: PPUSH
21721: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21722: LD_ADDR_VAR 0 5
21726: PUSH
21727: LD_INT 0
21729: PUSH
21730: LD_INT 0
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: EMPTY
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: ST_TO_ADDR
// if not x or not y then
21744: LD_VAR 0 2
21748: NOT
21749: PUSH
21750: LD_VAR 0 3
21754: NOT
21755: OR
21756: IFFALSE 21760
// exit ;
21758: GO 23410
// if not range then
21760: LD_VAR 0 4
21764: NOT
21765: IFFALSE 21775
// range := 10 ;
21767: LD_ADDR_VAR 0 4
21771: PUSH
21772: LD_INT 10
21774: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21775: LD_ADDR_VAR 0 8
21779: PUSH
21780: LD_INT 81
21782: PUSH
21783: LD_VAR 0 1
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 92
21794: PUSH
21795: LD_VAR 0 2
21799: PUSH
21800: LD_VAR 0 3
21804: PUSH
21805: LD_VAR 0 4
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 3
21818: PUSH
21819: LD_INT 21
21821: PUSH
21822: LD_INT 3
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: LIST
21837: PPUSH
21838: CALL_OW 69
21842: ST_TO_ADDR
// if not tmp then
21843: LD_VAR 0 8
21847: NOT
21848: IFFALSE 21852
// exit ;
21850: GO 23410
// for i in tmp do
21852: LD_ADDR_VAR 0 6
21856: PUSH
21857: LD_VAR 0 8
21861: PUSH
21862: FOR_IN
21863: IFFALSE 23385
// begin points := [ 0 , 0 , 0 ] ;
21865: LD_ADDR_VAR 0 9
21869: PUSH
21870: LD_INT 0
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: LIST
21883: ST_TO_ADDR
// bpoints := 1 ;
21884: LD_ADDR_VAR 0 10
21888: PUSH
21889: LD_INT 1
21891: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21892: LD_VAR 0 6
21896: PPUSH
21897: CALL_OW 247
21901: PUSH
21902: LD_INT 1
21904: DOUBLE
21905: EQUAL
21906: IFTRUE 21910
21908: GO 22488
21910: POP
// begin if GetClass ( i ) = 1 then
21911: LD_VAR 0 6
21915: PPUSH
21916: CALL_OW 257
21920: PUSH
21921: LD_INT 1
21923: EQUAL
21924: IFFALSE 21945
// points := [ 10 , 5 , 3 ] ;
21926: LD_ADDR_VAR 0 9
21930: PUSH
21931: LD_INT 10
21933: PUSH
21934: LD_INT 5
21936: PUSH
21937: LD_INT 3
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21945: LD_VAR 0 6
21949: PPUSH
21950: CALL_OW 257
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: LD_INT 3
21960: PUSH
21961: LD_INT 4
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: LIST
21968: IN
21969: IFFALSE 21990
// points := [ 3 , 2 , 1 ] ;
21971: LD_ADDR_VAR 0 9
21975: PUSH
21976: LD_INT 3
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21990: LD_VAR 0 6
21994: PPUSH
21995: CALL_OW 257
21999: PUSH
22000: LD_INT 5
22002: EQUAL
22003: IFFALSE 22024
// points := [ 130 , 5 , 2 ] ;
22005: LD_ADDR_VAR 0 9
22009: PUSH
22010: LD_INT 130
22012: PUSH
22013: LD_INT 5
22015: PUSH
22016: LD_INT 2
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: LIST
22023: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22024: LD_VAR 0 6
22028: PPUSH
22029: CALL_OW 257
22033: PUSH
22034: LD_INT 8
22036: EQUAL
22037: IFFALSE 22058
// points := [ 35 , 35 , 30 ] ;
22039: LD_ADDR_VAR 0 9
22043: PUSH
22044: LD_INT 35
22046: PUSH
22047: LD_INT 35
22049: PUSH
22050: LD_INT 30
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: LIST
22057: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22058: LD_VAR 0 6
22062: PPUSH
22063: CALL_OW 257
22067: PUSH
22068: LD_INT 9
22070: EQUAL
22071: IFFALSE 22092
// points := [ 20 , 55 , 40 ] ;
22073: LD_ADDR_VAR 0 9
22077: PUSH
22078: LD_INT 20
22080: PUSH
22081: LD_INT 55
22083: PUSH
22084: LD_INT 40
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: LIST
22091: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22092: LD_VAR 0 6
22096: PPUSH
22097: CALL_OW 257
22101: PUSH
22102: LD_INT 12
22104: PUSH
22105: LD_INT 16
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: IN
22112: IFFALSE 22133
// points := [ 5 , 3 , 2 ] ;
22114: LD_ADDR_VAR 0 9
22118: PUSH
22119: LD_INT 5
22121: PUSH
22122: LD_INT 3
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22133: LD_VAR 0 6
22137: PPUSH
22138: CALL_OW 257
22142: PUSH
22143: LD_INT 17
22145: EQUAL
22146: IFFALSE 22167
// points := [ 100 , 50 , 75 ] ;
22148: LD_ADDR_VAR 0 9
22152: PUSH
22153: LD_INT 100
22155: PUSH
22156: LD_INT 50
22158: PUSH
22159: LD_INT 75
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: LIST
22166: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22167: LD_VAR 0 6
22171: PPUSH
22172: CALL_OW 257
22176: PUSH
22177: LD_INT 15
22179: EQUAL
22180: IFFALSE 22201
// points := [ 10 , 5 , 3 ] ;
22182: LD_ADDR_VAR 0 9
22186: PUSH
22187: LD_INT 10
22189: PUSH
22190: LD_INT 5
22192: PUSH
22193: LD_INT 3
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22201: LD_VAR 0 6
22205: PPUSH
22206: CALL_OW 257
22210: PUSH
22211: LD_INT 14
22213: EQUAL
22214: IFFALSE 22235
// points := [ 10 , 0 , 0 ] ;
22216: LD_ADDR_VAR 0 9
22220: PUSH
22221: LD_INT 10
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: LD_INT 0
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22235: LD_VAR 0 6
22239: PPUSH
22240: CALL_OW 257
22244: PUSH
22245: LD_INT 11
22247: EQUAL
22248: IFFALSE 22269
// points := [ 30 , 10 , 5 ] ;
22250: LD_ADDR_VAR 0 9
22254: PUSH
22255: LD_INT 30
22257: PUSH
22258: LD_INT 10
22260: PUSH
22261: LD_INT 5
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: LIST
22268: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22269: LD_VAR 0 1
22273: PPUSH
22274: LD_INT 5
22276: PPUSH
22277: CALL_OW 321
22281: PUSH
22282: LD_INT 2
22284: EQUAL
22285: IFFALSE 22302
// bpoints := bpoints * 1.8 ;
22287: LD_ADDR_VAR 0 10
22291: PUSH
22292: LD_VAR 0 10
22296: PUSH
22297: LD_REAL  1.80000000000000E+0000
22300: MUL
22301: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22302: LD_VAR 0 6
22306: PPUSH
22307: CALL_OW 257
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: LD_INT 2
22317: PUSH
22318: LD_INT 3
22320: PUSH
22321: LD_INT 4
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: IN
22330: PUSH
22331: LD_VAR 0 1
22335: PPUSH
22336: LD_INT 51
22338: PPUSH
22339: CALL_OW 321
22343: PUSH
22344: LD_INT 2
22346: EQUAL
22347: AND
22348: IFFALSE 22365
// bpoints := bpoints * 1.2 ;
22350: LD_ADDR_VAR 0 10
22354: PUSH
22355: LD_VAR 0 10
22359: PUSH
22360: LD_REAL  1.20000000000000E+0000
22363: MUL
22364: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22365: LD_VAR 0 6
22369: PPUSH
22370: CALL_OW 257
22374: PUSH
22375: LD_INT 5
22377: PUSH
22378: LD_INT 7
22380: PUSH
22381: LD_INT 9
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: IN
22389: PUSH
22390: LD_VAR 0 1
22394: PPUSH
22395: LD_INT 52
22397: PPUSH
22398: CALL_OW 321
22402: PUSH
22403: LD_INT 2
22405: EQUAL
22406: AND
22407: IFFALSE 22424
// bpoints := bpoints * 1.5 ;
22409: LD_ADDR_VAR 0 10
22413: PUSH
22414: LD_VAR 0 10
22418: PUSH
22419: LD_REAL  1.50000000000000E+0000
22422: MUL
22423: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22424: LD_VAR 0 1
22428: PPUSH
22429: LD_INT 66
22431: PPUSH
22432: CALL_OW 321
22436: PUSH
22437: LD_INT 2
22439: EQUAL
22440: IFFALSE 22457
// bpoints := bpoints * 1.1 ;
22442: LD_ADDR_VAR 0 10
22446: PUSH
22447: LD_VAR 0 10
22451: PUSH
22452: LD_REAL  1.10000000000000E+0000
22455: MUL
22456: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22457: LD_ADDR_VAR 0 10
22461: PUSH
22462: LD_VAR 0 10
22466: PUSH
22467: LD_VAR 0 6
22471: PPUSH
22472: LD_INT 1
22474: PPUSH
22475: CALL_OW 259
22479: PUSH
22480: LD_REAL  1.15000000000000E+0000
22483: MUL
22484: MUL
22485: ST_TO_ADDR
// end ; unit_vehicle :
22486: GO 23314
22488: LD_INT 2
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 23302
22496: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22497: LD_VAR 0 6
22501: PPUSH
22502: CALL_OW 264
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: LD_INT 42
22512: PUSH
22513: LD_INT 24
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: LIST
22520: IN
22521: IFFALSE 22542
// points := [ 25 , 5 , 3 ] ;
22523: LD_ADDR_VAR 0 9
22527: PUSH
22528: LD_INT 25
22530: PUSH
22531: LD_INT 5
22533: PUSH
22534: LD_INT 3
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22542: LD_VAR 0 6
22546: PPUSH
22547: CALL_OW 264
22551: PUSH
22552: LD_INT 4
22554: PUSH
22555: LD_INT 43
22557: PUSH
22558: LD_INT 25
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: LIST
22565: IN
22566: IFFALSE 22587
// points := [ 40 , 15 , 5 ] ;
22568: LD_ADDR_VAR 0 9
22572: PUSH
22573: LD_INT 40
22575: PUSH
22576: LD_INT 15
22578: PUSH
22579: LD_INT 5
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22587: LD_VAR 0 6
22591: PPUSH
22592: CALL_OW 264
22596: PUSH
22597: LD_INT 3
22599: PUSH
22600: LD_INT 23
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: IN
22607: IFFALSE 22628
// points := [ 7 , 25 , 8 ] ;
22609: LD_ADDR_VAR 0 9
22613: PUSH
22614: LD_INT 7
22616: PUSH
22617: LD_INT 25
22619: PUSH
22620: LD_INT 8
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: LIST
22627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22628: LD_VAR 0 6
22632: PPUSH
22633: CALL_OW 264
22637: PUSH
22638: LD_INT 5
22640: PUSH
22641: LD_INT 27
22643: PUSH
22644: LD_INT 44
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: IN
22652: IFFALSE 22673
// points := [ 14 , 50 , 16 ] ;
22654: LD_ADDR_VAR 0 9
22658: PUSH
22659: LD_INT 14
22661: PUSH
22662: LD_INT 50
22664: PUSH
22665: LD_INT 16
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22673: LD_VAR 0 6
22677: PPUSH
22678: CALL_OW 264
22682: PUSH
22683: LD_INT 6
22685: PUSH
22686: LD_INT 46
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: IN
22693: IFFALSE 22714
// points := [ 32 , 120 , 70 ] ;
22695: LD_ADDR_VAR 0 9
22699: PUSH
22700: LD_INT 32
22702: PUSH
22703: LD_INT 120
22705: PUSH
22706: LD_INT 70
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: LIST
22713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22714: LD_VAR 0 6
22718: PPUSH
22719: CALL_OW 264
22723: PUSH
22724: LD_INT 7
22726: PUSH
22727: LD_INT 28
22729: PUSH
22730: LD_INT 45
22732: PUSH
22733: LD_INT 92
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: IN
22742: IFFALSE 22763
// points := [ 35 , 20 , 45 ] ;
22744: LD_ADDR_VAR 0 9
22748: PUSH
22749: LD_INT 35
22751: PUSH
22752: LD_INT 20
22754: PUSH
22755: LD_INT 45
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: LIST
22762: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22763: LD_VAR 0 6
22767: PPUSH
22768: CALL_OW 264
22772: PUSH
22773: LD_INT 47
22775: PUSH
22776: EMPTY
22777: LIST
22778: IN
22779: IFFALSE 22800
// points := [ 67 , 45 , 75 ] ;
22781: LD_ADDR_VAR 0 9
22785: PUSH
22786: LD_INT 67
22788: PUSH
22789: LD_INT 45
22791: PUSH
22792: LD_INT 75
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: LIST
22799: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22800: LD_VAR 0 6
22804: PPUSH
22805: CALL_OW 264
22809: PUSH
22810: LD_INT 26
22812: PUSH
22813: EMPTY
22814: LIST
22815: IN
22816: IFFALSE 22837
// points := [ 120 , 30 , 80 ] ;
22818: LD_ADDR_VAR 0 9
22822: PUSH
22823: LD_INT 120
22825: PUSH
22826: LD_INT 30
22828: PUSH
22829: LD_INT 80
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: LIST
22836: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22837: LD_VAR 0 6
22841: PPUSH
22842: CALL_OW 264
22846: PUSH
22847: LD_INT 22
22849: PUSH
22850: EMPTY
22851: LIST
22852: IN
22853: IFFALSE 22874
// points := [ 40 , 1 , 1 ] ;
22855: LD_ADDR_VAR 0 9
22859: PUSH
22860: LD_INT 40
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: LIST
22873: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22874: LD_VAR 0 6
22878: PPUSH
22879: CALL_OW 264
22883: PUSH
22884: LD_INT 29
22886: PUSH
22887: EMPTY
22888: LIST
22889: IN
22890: IFFALSE 22911
// points := [ 70 , 200 , 400 ] ;
22892: LD_ADDR_VAR 0 9
22896: PUSH
22897: LD_INT 70
22899: PUSH
22900: LD_INT 200
22902: PUSH
22903: LD_INT 400
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: LIST
22910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22911: LD_VAR 0 6
22915: PPUSH
22916: CALL_OW 264
22920: PUSH
22921: LD_INT 14
22923: PUSH
22924: LD_INT 53
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: IN
22931: IFFALSE 22952
// points := [ 40 , 10 , 20 ] ;
22933: LD_ADDR_VAR 0 9
22937: PUSH
22938: LD_INT 40
22940: PUSH
22941: LD_INT 10
22943: PUSH
22944: LD_INT 20
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: LIST
22951: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22952: LD_VAR 0 6
22956: PPUSH
22957: CALL_OW 264
22961: PUSH
22962: LD_INT 9
22964: PUSH
22965: EMPTY
22966: LIST
22967: IN
22968: IFFALSE 22989
// points := [ 5 , 70 , 20 ] ;
22970: LD_ADDR_VAR 0 9
22974: PUSH
22975: LD_INT 5
22977: PUSH
22978: LD_INT 70
22980: PUSH
22981: LD_INT 20
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: LIST
22988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22989: LD_VAR 0 6
22993: PPUSH
22994: CALL_OW 264
22998: PUSH
22999: LD_INT 10
23001: PUSH
23002: EMPTY
23003: LIST
23004: IN
23005: IFFALSE 23026
// points := [ 35 , 110 , 70 ] ;
23007: LD_ADDR_VAR 0 9
23011: PUSH
23012: LD_INT 35
23014: PUSH
23015: LD_INT 110
23017: PUSH
23018: LD_INT 70
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23026: LD_VAR 0 6
23030: PPUSH
23031: CALL_OW 265
23035: PUSH
23036: LD_INT 25
23038: EQUAL
23039: IFFALSE 23060
// points := [ 80 , 65 , 100 ] ;
23041: LD_ADDR_VAR 0 9
23045: PUSH
23046: LD_INT 80
23048: PUSH
23049: LD_INT 65
23051: PUSH
23052: LD_INT 100
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: LIST
23059: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23060: LD_VAR 0 6
23064: PPUSH
23065: CALL_OW 263
23069: PUSH
23070: LD_INT 1
23072: EQUAL
23073: IFFALSE 23108
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23075: LD_ADDR_VAR 0 10
23079: PUSH
23080: LD_VAR 0 10
23084: PUSH
23085: LD_VAR 0 6
23089: PPUSH
23090: CALL_OW 311
23094: PPUSH
23095: LD_INT 3
23097: PPUSH
23098: CALL_OW 259
23102: PUSH
23103: LD_INT 4
23105: MUL
23106: MUL
23107: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23108: LD_VAR 0 6
23112: PPUSH
23113: CALL_OW 263
23117: PUSH
23118: LD_INT 2
23120: EQUAL
23121: IFFALSE 23172
// begin j := IsControledBy ( i ) ;
23123: LD_ADDR_VAR 0 7
23127: PUSH
23128: LD_VAR 0 6
23132: PPUSH
23133: CALL_OW 312
23137: ST_TO_ADDR
// if j then
23138: LD_VAR 0 7
23142: IFFALSE 23172
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23144: LD_ADDR_VAR 0 10
23148: PUSH
23149: LD_VAR 0 10
23153: PUSH
23154: LD_VAR 0 7
23158: PPUSH
23159: LD_INT 3
23161: PPUSH
23162: CALL_OW 259
23166: PUSH
23167: LD_INT 3
23169: MUL
23170: MUL
23171: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23172: LD_VAR 0 6
23176: PPUSH
23177: CALL_OW 264
23181: PUSH
23182: LD_INT 5
23184: PUSH
23185: LD_INT 6
23187: PUSH
23188: LD_INT 46
23190: PUSH
23191: LD_INT 44
23193: PUSH
23194: LD_INT 47
23196: PUSH
23197: LD_INT 45
23199: PUSH
23200: LD_INT 28
23202: PUSH
23203: LD_INT 7
23205: PUSH
23206: LD_INT 27
23208: PUSH
23209: LD_INT 29
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: IN
23224: PUSH
23225: LD_VAR 0 1
23229: PPUSH
23230: LD_INT 52
23232: PPUSH
23233: CALL_OW 321
23237: PUSH
23238: LD_INT 2
23240: EQUAL
23241: AND
23242: IFFALSE 23259
// bpoints := bpoints * 1.2 ;
23244: LD_ADDR_VAR 0 10
23248: PUSH
23249: LD_VAR 0 10
23253: PUSH
23254: LD_REAL  1.20000000000000E+0000
23257: MUL
23258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23259: LD_VAR 0 6
23263: PPUSH
23264: CALL_OW 264
23268: PUSH
23269: LD_INT 6
23271: PUSH
23272: LD_INT 46
23274: PUSH
23275: LD_INT 47
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: IN
23283: IFFALSE 23300
// bpoints := bpoints * 1.2 ;
23285: LD_ADDR_VAR 0 10
23289: PUSH
23290: LD_VAR 0 10
23294: PUSH
23295: LD_REAL  1.20000000000000E+0000
23298: MUL
23299: ST_TO_ADDR
// end ; unit_building :
23300: GO 23314
23302: LD_INT 3
23304: DOUBLE
23305: EQUAL
23306: IFTRUE 23310
23308: GO 23313
23310: POP
// ; end ;
23311: GO 23314
23313: POP
// for j = 1 to 3 do
23314: LD_ADDR_VAR 0 7
23318: PUSH
23319: DOUBLE
23320: LD_INT 1
23322: DEC
23323: ST_TO_ADDR
23324: LD_INT 3
23326: PUSH
23327: FOR_TO
23328: IFFALSE 23381
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23330: LD_ADDR_VAR 0 5
23334: PUSH
23335: LD_VAR 0 5
23339: PPUSH
23340: LD_VAR 0 7
23344: PPUSH
23345: LD_VAR 0 5
23349: PUSH
23350: LD_VAR 0 7
23354: ARRAY
23355: PUSH
23356: LD_VAR 0 9
23360: PUSH
23361: LD_VAR 0 7
23365: ARRAY
23366: PUSH
23367: LD_VAR 0 10
23371: MUL
23372: PLUS
23373: PPUSH
23374: CALL_OW 1
23378: ST_TO_ADDR
23379: GO 23327
23381: POP
23382: POP
// end ;
23383: GO 21862
23385: POP
23386: POP
// result := Replace ( result , 4 , tmp ) ;
23387: LD_ADDR_VAR 0 5
23391: PUSH
23392: LD_VAR 0 5
23396: PPUSH
23397: LD_INT 4
23399: PPUSH
23400: LD_VAR 0 8
23404: PPUSH
23405: CALL_OW 1
23409: ST_TO_ADDR
// end ;
23410: LD_VAR 0 5
23414: RET
// export function DangerAtRange ( unit , range ) ; begin
23415: LD_INT 0
23417: PPUSH
// if not unit then
23418: LD_VAR 0 1
23422: NOT
23423: IFFALSE 23427
// exit ;
23425: GO 23472
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23427: LD_ADDR_VAR 0 3
23431: PUSH
23432: LD_VAR 0 1
23436: PPUSH
23437: CALL_OW 255
23441: PPUSH
23442: LD_VAR 0 1
23446: PPUSH
23447: CALL_OW 250
23451: PPUSH
23452: LD_VAR 0 1
23456: PPUSH
23457: CALL_OW 251
23461: PPUSH
23462: LD_VAR 0 2
23466: PPUSH
23467: CALL 21714 0 4
23471: ST_TO_ADDR
// end ;
23472: LD_VAR 0 3
23476: RET
// export function DangerInArea ( side , area ) ; begin
23477: LD_INT 0
23479: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23480: LD_ADDR_VAR 0 3
23484: PUSH
23485: LD_VAR 0 2
23489: PPUSH
23490: LD_INT 81
23492: PUSH
23493: LD_VAR 0 1
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PPUSH
23502: CALL_OW 70
23506: ST_TO_ADDR
// end ;
23507: LD_VAR 0 3
23511: RET
// export function IsExtension ( b ) ; begin
23512: LD_INT 0
23514: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23515: LD_ADDR_VAR 0 2
23519: PUSH
23520: LD_VAR 0 1
23524: PUSH
23525: LD_INT 23
23527: PUSH
23528: LD_INT 20
23530: PUSH
23531: LD_INT 22
23533: PUSH
23534: LD_INT 17
23536: PUSH
23537: LD_INT 24
23539: PUSH
23540: LD_INT 21
23542: PUSH
23543: LD_INT 19
23545: PUSH
23546: LD_INT 16
23548: PUSH
23549: LD_INT 25
23551: PUSH
23552: LD_INT 18
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: IN
23567: ST_TO_ADDR
// end ;
23568: LD_VAR 0 2
23572: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23573: LD_INT 0
23575: PPUSH
23576: PPUSH
23577: PPUSH
// result := [ ] ;
23578: LD_ADDR_VAR 0 4
23582: PUSH
23583: EMPTY
23584: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23585: LD_ADDR_VAR 0 5
23589: PUSH
23590: LD_VAR 0 2
23594: PPUSH
23595: LD_INT 21
23597: PUSH
23598: LD_INT 3
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PPUSH
23605: CALL_OW 70
23609: ST_TO_ADDR
// if not tmp then
23610: LD_VAR 0 5
23614: NOT
23615: IFFALSE 23619
// exit ;
23617: GO 23683
// if checkLink then
23619: LD_VAR 0 3
23623: IFFALSE 23673
// begin for i in tmp do
23625: LD_ADDR_VAR 0 6
23629: PUSH
23630: LD_VAR 0 5
23634: PUSH
23635: FOR_IN
23636: IFFALSE 23671
// if GetBase ( i ) <> base then
23638: LD_VAR 0 6
23642: PPUSH
23643: CALL_OW 274
23647: PUSH
23648: LD_VAR 0 1
23652: NONEQUAL
23653: IFFALSE 23669
// ComLinkToBase ( base , i ) ;
23655: LD_VAR 0 1
23659: PPUSH
23660: LD_VAR 0 6
23664: PPUSH
23665: CALL_OW 169
23669: GO 23635
23671: POP
23672: POP
// end ; result := tmp ;
23673: LD_ADDR_VAR 0 4
23677: PUSH
23678: LD_VAR 0 5
23682: ST_TO_ADDR
// end ;
23683: LD_VAR 0 4
23687: RET
// export function ComComplete ( units , b ) ; var i ; begin
23688: LD_INT 0
23690: PPUSH
23691: PPUSH
// if not units then
23692: LD_VAR 0 1
23696: NOT
23697: IFFALSE 23701
// exit ;
23699: GO 23791
// for i in units do
23701: LD_ADDR_VAR 0 4
23705: PUSH
23706: LD_VAR 0 1
23710: PUSH
23711: FOR_IN
23712: IFFALSE 23789
// if BuildingStatus ( b ) = bs_build then
23714: LD_VAR 0 2
23718: PPUSH
23719: CALL_OW 461
23723: PUSH
23724: LD_INT 1
23726: EQUAL
23727: IFFALSE 23787
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23729: LD_VAR 0 4
23733: PPUSH
23734: LD_STRING h
23736: PUSH
23737: LD_VAR 0 2
23741: PPUSH
23742: CALL_OW 250
23746: PUSH
23747: LD_VAR 0 2
23751: PPUSH
23752: CALL_OW 251
23756: PUSH
23757: LD_VAR 0 2
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: LD_INT 0
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: PUSH
23780: EMPTY
23781: LIST
23782: PPUSH
23783: CALL_OW 446
23787: GO 23711
23789: POP
23790: POP
// end ;
23791: LD_VAR 0 3
23795: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23796: LD_INT 0
23798: PPUSH
23799: PPUSH
23800: PPUSH
23801: PPUSH
23802: PPUSH
23803: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23804: LD_VAR 0 1
23808: NOT
23809: PUSH
23810: LD_VAR 0 1
23814: PPUSH
23815: CALL_OW 263
23819: PUSH
23820: LD_INT 2
23822: NONEQUAL
23823: OR
23824: IFFALSE 23828
// exit ;
23826: GO 24144
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23828: LD_ADDR_VAR 0 6
23832: PUSH
23833: LD_INT 22
23835: PUSH
23836: LD_VAR 0 1
23840: PPUSH
23841: CALL_OW 255
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: LD_INT 30
23855: PUSH
23856: LD_INT 36
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 34
23865: PUSH
23866: LD_INT 31
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PPUSH
23882: CALL_OW 69
23886: ST_TO_ADDR
// if not tmp then
23887: LD_VAR 0 6
23891: NOT
23892: IFFALSE 23896
// exit ;
23894: GO 24144
// result := [ ] ;
23896: LD_ADDR_VAR 0 2
23900: PUSH
23901: EMPTY
23902: ST_TO_ADDR
// for i in tmp do
23903: LD_ADDR_VAR 0 3
23907: PUSH
23908: LD_VAR 0 6
23912: PUSH
23913: FOR_IN
23914: IFFALSE 23985
// begin t := UnitsInside ( i ) ;
23916: LD_ADDR_VAR 0 4
23920: PUSH
23921: LD_VAR 0 3
23925: PPUSH
23926: CALL_OW 313
23930: ST_TO_ADDR
// if t then
23931: LD_VAR 0 4
23935: IFFALSE 23983
// for j in t do
23937: LD_ADDR_VAR 0 7
23941: PUSH
23942: LD_VAR 0 4
23946: PUSH
23947: FOR_IN
23948: IFFALSE 23981
// result := Replace ( result , result + 1 , j ) ;
23950: LD_ADDR_VAR 0 2
23954: PUSH
23955: LD_VAR 0 2
23959: PPUSH
23960: LD_VAR 0 2
23964: PUSH
23965: LD_INT 1
23967: PLUS
23968: PPUSH
23969: LD_VAR 0 7
23973: PPUSH
23974: CALL_OW 1
23978: ST_TO_ADDR
23979: GO 23947
23981: POP
23982: POP
// end ;
23983: GO 23913
23985: POP
23986: POP
// if not result then
23987: LD_VAR 0 2
23991: NOT
23992: IFFALSE 23996
// exit ;
23994: GO 24144
// mech := result [ 1 ] ;
23996: LD_ADDR_VAR 0 5
24000: PUSH
24001: LD_VAR 0 2
24005: PUSH
24006: LD_INT 1
24008: ARRAY
24009: ST_TO_ADDR
// if result > 1 then
24010: LD_VAR 0 2
24014: PUSH
24015: LD_INT 1
24017: GREATER
24018: IFFALSE 24130
// begin for i = 2 to result do
24020: LD_ADDR_VAR 0 3
24024: PUSH
24025: DOUBLE
24026: LD_INT 2
24028: DEC
24029: ST_TO_ADDR
24030: LD_VAR 0 2
24034: PUSH
24035: FOR_TO
24036: IFFALSE 24128
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24038: LD_ADDR_VAR 0 4
24042: PUSH
24043: LD_VAR 0 2
24047: PUSH
24048: LD_VAR 0 3
24052: ARRAY
24053: PPUSH
24054: LD_INT 3
24056: PPUSH
24057: CALL_OW 259
24061: PUSH
24062: LD_VAR 0 2
24066: PUSH
24067: LD_VAR 0 3
24071: ARRAY
24072: PPUSH
24073: CALL_OW 432
24077: MINUS
24078: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24079: LD_VAR 0 4
24083: PUSH
24084: LD_VAR 0 5
24088: PPUSH
24089: LD_INT 3
24091: PPUSH
24092: CALL_OW 259
24096: PUSH
24097: LD_VAR 0 5
24101: PPUSH
24102: CALL_OW 432
24106: MINUS
24107: GREATEREQUAL
24108: IFFALSE 24126
// mech := result [ i ] ;
24110: LD_ADDR_VAR 0 5
24114: PUSH
24115: LD_VAR 0 2
24119: PUSH
24120: LD_VAR 0 3
24124: ARRAY
24125: ST_TO_ADDR
// end ;
24126: GO 24035
24128: POP
24129: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24130: LD_VAR 0 1
24134: PPUSH
24135: LD_VAR 0 5
24139: PPUSH
24140: CALL_OW 135
// end ;
24144: LD_VAR 0 2
24148: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24149: LD_INT 0
24151: PPUSH
24152: PPUSH
24153: PPUSH
24154: PPUSH
24155: PPUSH
24156: PPUSH
24157: PPUSH
24158: PPUSH
24159: PPUSH
24160: PPUSH
24161: PPUSH
24162: PPUSH
24163: PPUSH
// result := [ ] ;
24164: LD_ADDR_VAR 0 7
24168: PUSH
24169: EMPTY
24170: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24171: LD_VAR 0 1
24175: PPUSH
24176: CALL_OW 266
24180: PUSH
24181: LD_INT 0
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: IN
24191: NOT
24192: IFFALSE 24196
// exit ;
24194: GO 25830
// if name then
24196: LD_VAR 0 3
24200: IFFALSE 24216
// SetBName ( base_dep , name ) ;
24202: LD_VAR 0 1
24206: PPUSH
24207: LD_VAR 0 3
24211: PPUSH
24212: CALL_OW 500
// base := GetBase ( base_dep ) ;
24216: LD_ADDR_VAR 0 15
24220: PUSH
24221: LD_VAR 0 1
24225: PPUSH
24226: CALL_OW 274
24230: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24231: LD_ADDR_VAR 0 16
24235: PUSH
24236: LD_VAR 0 1
24240: PPUSH
24241: CALL_OW 255
24245: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24246: LD_ADDR_VAR 0 17
24250: PUSH
24251: LD_VAR 0 1
24255: PPUSH
24256: CALL_OW 248
24260: ST_TO_ADDR
// if sources then
24261: LD_VAR 0 5
24265: IFFALSE 24312
// for i = 1 to 3 do
24267: LD_ADDR_VAR 0 8
24271: PUSH
24272: DOUBLE
24273: LD_INT 1
24275: DEC
24276: ST_TO_ADDR
24277: LD_INT 3
24279: PUSH
24280: FOR_TO
24281: IFFALSE 24310
// AddResourceType ( base , i , sources [ i ] ) ;
24283: LD_VAR 0 15
24287: PPUSH
24288: LD_VAR 0 8
24292: PPUSH
24293: LD_VAR 0 5
24297: PUSH
24298: LD_VAR 0 8
24302: ARRAY
24303: PPUSH
24304: CALL_OW 276
24308: GO 24280
24310: POP
24311: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24312: LD_ADDR_VAR 0 18
24316: PUSH
24317: LD_VAR 0 15
24321: PPUSH
24322: LD_VAR 0 2
24326: PPUSH
24327: LD_INT 1
24329: PPUSH
24330: CALL 23573 0 3
24334: ST_TO_ADDR
// InitHc ;
24335: CALL_OW 19
// InitUc ;
24339: CALL_OW 18
// uc_side := side ;
24343: LD_ADDR_OWVAR 20
24347: PUSH
24348: LD_VAR 0 16
24352: ST_TO_ADDR
// uc_nation := nation ;
24353: LD_ADDR_OWVAR 21
24357: PUSH
24358: LD_VAR 0 17
24362: ST_TO_ADDR
// if buildings then
24363: LD_VAR 0 18
24367: IFFALSE 25689
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24369: LD_ADDR_VAR 0 19
24373: PUSH
24374: LD_VAR 0 18
24378: PPUSH
24379: LD_INT 2
24381: PUSH
24382: LD_INT 30
24384: PUSH
24385: LD_INT 29
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 30
24394: PUSH
24395: LD_INT 30
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: LIST
24406: PPUSH
24407: CALL_OW 72
24411: ST_TO_ADDR
// if tmp then
24412: LD_VAR 0 19
24416: IFFALSE 24464
// for i in tmp do
24418: LD_ADDR_VAR 0 8
24422: PUSH
24423: LD_VAR 0 19
24427: PUSH
24428: FOR_IN
24429: IFFALSE 24462
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24431: LD_VAR 0 8
24435: PPUSH
24436: CALL_OW 250
24440: PPUSH
24441: LD_VAR 0 8
24445: PPUSH
24446: CALL_OW 251
24450: PPUSH
24451: LD_VAR 0 16
24455: PPUSH
24456: CALL_OW 441
24460: GO 24428
24462: POP
24463: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24464: LD_VAR 0 18
24468: PPUSH
24469: LD_INT 2
24471: PUSH
24472: LD_INT 30
24474: PUSH
24475: LD_INT 32
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 30
24484: PUSH
24485: LD_INT 33
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: PPUSH
24497: CALL_OW 72
24501: IFFALSE 24589
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24503: LD_ADDR_VAR 0 8
24507: PUSH
24508: LD_VAR 0 18
24512: PPUSH
24513: LD_INT 2
24515: PUSH
24516: LD_INT 30
24518: PUSH
24519: LD_INT 32
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 30
24528: PUSH
24529: LD_INT 33
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: LIST
24540: PPUSH
24541: CALL_OW 72
24545: PUSH
24546: FOR_IN
24547: IFFALSE 24587
// begin if not GetBWeapon ( i ) then
24549: LD_VAR 0 8
24553: PPUSH
24554: CALL_OW 269
24558: NOT
24559: IFFALSE 24585
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24561: LD_VAR 0 8
24565: PPUSH
24566: LD_VAR 0 8
24570: PPUSH
24571: LD_VAR 0 2
24575: PPUSH
24576: CALL 25835 0 2
24580: PPUSH
24581: CALL_OW 431
// end ;
24585: GO 24546
24587: POP
24588: POP
// end ; for i = 1 to personel do
24589: LD_ADDR_VAR 0 8
24593: PUSH
24594: DOUBLE
24595: LD_INT 1
24597: DEC
24598: ST_TO_ADDR
24599: LD_VAR 0 6
24603: PUSH
24604: FOR_TO
24605: IFFALSE 25669
// begin if i > 4 then
24607: LD_VAR 0 8
24611: PUSH
24612: LD_INT 4
24614: GREATER
24615: IFFALSE 24619
// break ;
24617: GO 25669
// case i of 1 :
24619: LD_VAR 0 8
24623: PUSH
24624: LD_INT 1
24626: DOUBLE
24627: EQUAL
24628: IFTRUE 24632
24630: GO 24712
24632: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24633: LD_ADDR_VAR 0 12
24637: PUSH
24638: LD_VAR 0 18
24642: PPUSH
24643: LD_INT 22
24645: PUSH
24646: LD_VAR 0 16
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 58
24657: PUSH
24658: EMPTY
24659: LIST
24660: PUSH
24661: LD_INT 2
24663: PUSH
24664: LD_INT 30
24666: PUSH
24667: LD_INT 32
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 30
24676: PUSH
24677: LD_INT 4
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 30
24686: PUSH
24687: LD_INT 5
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: LIST
24704: PPUSH
24705: CALL_OW 72
24709: ST_TO_ADDR
24710: GO 24934
24712: LD_INT 2
24714: DOUBLE
24715: EQUAL
24716: IFTRUE 24720
24718: GO 24782
24720: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24721: LD_ADDR_VAR 0 12
24725: PUSH
24726: LD_VAR 0 18
24730: PPUSH
24731: LD_INT 22
24733: PUSH
24734: LD_VAR 0 16
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 30
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 30
24758: PUSH
24759: LD_INT 1
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: LIST
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PPUSH
24775: CALL_OW 72
24779: ST_TO_ADDR
24780: GO 24934
24782: LD_INT 3
24784: DOUBLE
24785: EQUAL
24786: IFTRUE 24790
24788: GO 24852
24790: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24791: LD_ADDR_VAR 0 12
24795: PUSH
24796: LD_VAR 0 18
24800: PPUSH
24801: LD_INT 22
24803: PUSH
24804: LD_VAR 0 16
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 2
24815: PUSH
24816: LD_INT 30
24818: PUSH
24819: LD_INT 2
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 30
24828: PUSH
24829: LD_INT 3
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: LIST
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PPUSH
24845: CALL_OW 72
24849: ST_TO_ADDR
24850: GO 24934
24852: LD_INT 4
24854: DOUBLE
24855: EQUAL
24856: IFTRUE 24860
24858: GO 24933
24860: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24861: LD_ADDR_VAR 0 12
24865: PUSH
24866: LD_VAR 0 18
24870: PPUSH
24871: LD_INT 22
24873: PUSH
24874: LD_VAR 0 16
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: LD_INT 30
24888: PUSH
24889: LD_INT 6
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 30
24898: PUSH
24899: LD_INT 7
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 30
24908: PUSH
24909: LD_INT 8
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PPUSH
24926: CALL_OW 72
24930: ST_TO_ADDR
24931: GO 24934
24933: POP
// if i = 1 then
24934: LD_VAR 0 8
24938: PUSH
24939: LD_INT 1
24941: EQUAL
24942: IFFALSE 25053
// begin tmp := [ ] ;
24944: LD_ADDR_VAR 0 19
24948: PUSH
24949: EMPTY
24950: ST_TO_ADDR
// for j in f do
24951: LD_ADDR_VAR 0 9
24955: PUSH
24956: LD_VAR 0 12
24960: PUSH
24961: FOR_IN
24962: IFFALSE 25035
// if GetBType ( j ) = b_bunker then
24964: LD_VAR 0 9
24968: PPUSH
24969: CALL_OW 266
24973: PUSH
24974: LD_INT 32
24976: EQUAL
24977: IFFALSE 25004
// tmp := Insert ( tmp , 1 , j ) else
24979: LD_ADDR_VAR 0 19
24983: PUSH
24984: LD_VAR 0 19
24988: PPUSH
24989: LD_INT 1
24991: PPUSH
24992: LD_VAR 0 9
24996: PPUSH
24997: CALL_OW 2
25001: ST_TO_ADDR
25002: GO 25033
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25004: LD_ADDR_VAR 0 19
25008: PUSH
25009: LD_VAR 0 19
25013: PPUSH
25014: LD_VAR 0 19
25018: PUSH
25019: LD_INT 1
25021: PLUS
25022: PPUSH
25023: LD_VAR 0 9
25027: PPUSH
25028: CALL_OW 2
25032: ST_TO_ADDR
25033: GO 24961
25035: POP
25036: POP
// if tmp then
25037: LD_VAR 0 19
25041: IFFALSE 25053
// f := tmp ;
25043: LD_ADDR_VAR 0 12
25047: PUSH
25048: LD_VAR 0 19
25052: ST_TO_ADDR
// end ; x := personel [ i ] ;
25053: LD_ADDR_VAR 0 13
25057: PUSH
25058: LD_VAR 0 6
25062: PUSH
25063: LD_VAR 0 8
25067: ARRAY
25068: ST_TO_ADDR
// if x = - 1 then
25069: LD_VAR 0 13
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: EQUAL
25078: IFFALSE 25287
// begin for j in f do
25080: LD_ADDR_VAR 0 9
25084: PUSH
25085: LD_VAR 0 12
25089: PUSH
25090: FOR_IN
25091: IFFALSE 25283
// repeat InitHc ;
25093: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25097: LD_VAR 0 9
25101: PPUSH
25102: CALL_OW 266
25106: PUSH
25107: LD_INT 5
25109: EQUAL
25110: IFFALSE 25180
// begin if UnitsInside ( j ) < 3 then
25112: LD_VAR 0 9
25116: PPUSH
25117: CALL_OW 313
25121: PUSH
25122: LD_INT 3
25124: LESS
25125: IFFALSE 25161
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25127: LD_INT 0
25129: PPUSH
25130: LD_INT 5
25132: PUSH
25133: LD_INT 8
25135: PUSH
25136: LD_INT 9
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: LIST
25143: PUSH
25144: LD_VAR 0 17
25148: ARRAY
25149: PPUSH
25150: LD_VAR 0 4
25154: PPUSH
25155: CALL_OW 380
25159: GO 25178
// PrepareHuman ( false , i , skill ) ;
25161: LD_INT 0
25163: PPUSH
25164: LD_VAR 0 8
25168: PPUSH
25169: LD_VAR 0 4
25173: PPUSH
25174: CALL_OW 380
// end else
25178: GO 25197
// PrepareHuman ( false , i , skill ) ;
25180: LD_INT 0
25182: PPUSH
25183: LD_VAR 0 8
25187: PPUSH
25188: LD_VAR 0 4
25192: PPUSH
25193: CALL_OW 380
// un := CreateHuman ;
25197: LD_ADDR_VAR 0 14
25201: PUSH
25202: CALL_OW 44
25206: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25207: LD_ADDR_VAR 0 7
25211: PUSH
25212: LD_VAR 0 7
25216: PPUSH
25217: LD_INT 1
25219: PPUSH
25220: LD_VAR 0 14
25224: PPUSH
25225: CALL_OW 2
25229: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25230: LD_VAR 0 14
25234: PPUSH
25235: LD_VAR 0 9
25239: PPUSH
25240: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25244: LD_VAR 0 9
25248: PPUSH
25249: CALL_OW 313
25253: PUSH
25254: LD_INT 6
25256: EQUAL
25257: PUSH
25258: LD_VAR 0 9
25262: PPUSH
25263: CALL_OW 266
25267: PUSH
25268: LD_INT 32
25270: PUSH
25271: LD_INT 31
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: IN
25278: OR
25279: IFFALSE 25093
25281: GO 25090
25283: POP
25284: POP
// end else
25285: GO 25667
// for j = 1 to x do
25287: LD_ADDR_VAR 0 9
25291: PUSH
25292: DOUBLE
25293: LD_INT 1
25295: DEC
25296: ST_TO_ADDR
25297: LD_VAR 0 13
25301: PUSH
25302: FOR_TO
25303: IFFALSE 25665
// begin InitHc ;
25305: CALL_OW 19
// if not f then
25309: LD_VAR 0 12
25313: NOT
25314: IFFALSE 25403
// begin PrepareHuman ( false , i , skill ) ;
25316: LD_INT 0
25318: PPUSH
25319: LD_VAR 0 8
25323: PPUSH
25324: LD_VAR 0 4
25328: PPUSH
25329: CALL_OW 380
// un := CreateHuman ;
25333: LD_ADDR_VAR 0 14
25337: PUSH
25338: CALL_OW 44
25342: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25343: LD_ADDR_VAR 0 7
25347: PUSH
25348: LD_VAR 0 7
25352: PPUSH
25353: LD_INT 1
25355: PPUSH
25356: LD_VAR 0 14
25360: PPUSH
25361: CALL_OW 2
25365: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25366: LD_VAR 0 14
25370: PPUSH
25371: LD_VAR 0 1
25375: PPUSH
25376: CALL_OW 250
25380: PPUSH
25381: LD_VAR 0 1
25385: PPUSH
25386: CALL_OW 251
25390: PPUSH
25391: LD_INT 10
25393: PPUSH
25394: LD_INT 0
25396: PPUSH
25397: CALL_OW 50
// continue ;
25401: GO 25302
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25403: LD_VAR 0 12
25407: PUSH
25408: LD_INT 1
25410: ARRAY
25411: PPUSH
25412: CALL_OW 313
25416: PUSH
25417: LD_VAR 0 12
25421: PUSH
25422: LD_INT 1
25424: ARRAY
25425: PPUSH
25426: CALL_OW 266
25430: PUSH
25431: LD_INT 32
25433: PUSH
25434: LD_INT 31
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: IN
25441: AND
25442: PUSH
25443: LD_VAR 0 12
25447: PUSH
25448: LD_INT 1
25450: ARRAY
25451: PPUSH
25452: CALL_OW 313
25456: PUSH
25457: LD_INT 6
25459: EQUAL
25460: OR
25461: IFFALSE 25481
// f := Delete ( f , 1 ) ;
25463: LD_ADDR_VAR 0 12
25467: PUSH
25468: LD_VAR 0 12
25472: PPUSH
25473: LD_INT 1
25475: PPUSH
25476: CALL_OW 3
25480: ST_TO_ADDR
// if not f then
25481: LD_VAR 0 12
25485: NOT
25486: IFFALSE 25504
// begin x := x + 2 ;
25488: LD_ADDR_VAR 0 13
25492: PUSH
25493: LD_VAR 0 13
25497: PUSH
25498: LD_INT 2
25500: PLUS
25501: ST_TO_ADDR
// continue ;
25502: GO 25302
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25504: LD_VAR 0 12
25508: PUSH
25509: LD_INT 1
25511: ARRAY
25512: PPUSH
25513: CALL_OW 266
25517: PUSH
25518: LD_INT 5
25520: EQUAL
25521: IFFALSE 25595
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25523: LD_VAR 0 12
25527: PUSH
25528: LD_INT 1
25530: ARRAY
25531: PPUSH
25532: CALL_OW 313
25536: PUSH
25537: LD_INT 3
25539: LESS
25540: IFFALSE 25576
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25542: LD_INT 0
25544: PPUSH
25545: LD_INT 5
25547: PUSH
25548: LD_INT 8
25550: PUSH
25551: LD_INT 9
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: LIST
25558: PUSH
25559: LD_VAR 0 17
25563: ARRAY
25564: PPUSH
25565: LD_VAR 0 4
25569: PPUSH
25570: CALL_OW 380
25574: GO 25593
// PrepareHuman ( false , i , skill ) ;
25576: LD_INT 0
25578: PPUSH
25579: LD_VAR 0 8
25583: PPUSH
25584: LD_VAR 0 4
25588: PPUSH
25589: CALL_OW 380
// end else
25593: GO 25612
// PrepareHuman ( false , i , skill ) ;
25595: LD_INT 0
25597: PPUSH
25598: LD_VAR 0 8
25602: PPUSH
25603: LD_VAR 0 4
25607: PPUSH
25608: CALL_OW 380
// un := CreateHuman ;
25612: LD_ADDR_VAR 0 14
25616: PUSH
25617: CALL_OW 44
25621: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25622: LD_ADDR_VAR 0 7
25626: PUSH
25627: LD_VAR 0 7
25631: PPUSH
25632: LD_INT 1
25634: PPUSH
25635: LD_VAR 0 14
25639: PPUSH
25640: CALL_OW 2
25644: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25645: LD_VAR 0 14
25649: PPUSH
25650: LD_VAR 0 12
25654: PUSH
25655: LD_INT 1
25657: ARRAY
25658: PPUSH
25659: CALL_OW 52
// end ;
25663: GO 25302
25665: POP
25666: POP
// end ;
25667: GO 24604
25669: POP
25670: POP
// result := result ^ buildings ;
25671: LD_ADDR_VAR 0 7
25675: PUSH
25676: LD_VAR 0 7
25680: PUSH
25681: LD_VAR 0 18
25685: ADD
25686: ST_TO_ADDR
// end else
25687: GO 25830
// begin for i = 1 to personel do
25689: LD_ADDR_VAR 0 8
25693: PUSH
25694: DOUBLE
25695: LD_INT 1
25697: DEC
25698: ST_TO_ADDR
25699: LD_VAR 0 6
25703: PUSH
25704: FOR_TO
25705: IFFALSE 25828
// begin if i > 4 then
25707: LD_VAR 0 8
25711: PUSH
25712: LD_INT 4
25714: GREATER
25715: IFFALSE 25719
// break ;
25717: GO 25828
// x := personel [ i ] ;
25719: LD_ADDR_VAR 0 13
25723: PUSH
25724: LD_VAR 0 6
25728: PUSH
25729: LD_VAR 0 8
25733: ARRAY
25734: ST_TO_ADDR
// if x = - 1 then
25735: LD_VAR 0 13
25739: PUSH
25740: LD_INT 1
25742: NEG
25743: EQUAL
25744: IFFALSE 25748
// continue ;
25746: GO 25704
// PrepareHuman ( false , i , skill ) ;
25748: LD_INT 0
25750: PPUSH
25751: LD_VAR 0 8
25755: PPUSH
25756: LD_VAR 0 4
25760: PPUSH
25761: CALL_OW 380
// un := CreateHuman ;
25765: LD_ADDR_VAR 0 14
25769: PUSH
25770: CALL_OW 44
25774: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25775: LD_VAR 0 14
25779: PPUSH
25780: LD_VAR 0 1
25784: PPUSH
25785: CALL_OW 250
25789: PPUSH
25790: LD_VAR 0 1
25794: PPUSH
25795: CALL_OW 251
25799: PPUSH
25800: LD_INT 10
25802: PPUSH
25803: LD_INT 0
25805: PPUSH
25806: CALL_OW 50
// result := result ^ un ;
25810: LD_ADDR_VAR 0 7
25814: PUSH
25815: LD_VAR 0 7
25819: PUSH
25820: LD_VAR 0 14
25824: ADD
25825: ST_TO_ADDR
// end ;
25826: GO 25704
25828: POP
25829: POP
// end ; end ;
25830: LD_VAR 0 7
25834: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25835: LD_INT 0
25837: PPUSH
25838: PPUSH
25839: PPUSH
25840: PPUSH
25841: PPUSH
25842: PPUSH
25843: PPUSH
25844: PPUSH
25845: PPUSH
25846: PPUSH
25847: PPUSH
25848: PPUSH
25849: PPUSH
25850: PPUSH
25851: PPUSH
25852: PPUSH
// result := false ;
25853: LD_ADDR_VAR 0 3
25857: PUSH
25858: LD_INT 0
25860: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25861: LD_VAR 0 1
25865: NOT
25866: PUSH
25867: LD_VAR 0 1
25871: PPUSH
25872: CALL_OW 266
25876: PUSH
25877: LD_INT 32
25879: PUSH
25880: LD_INT 33
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: IN
25887: NOT
25888: OR
25889: IFFALSE 25893
// exit ;
25891: GO 27002
// nat := GetNation ( tower ) ;
25893: LD_ADDR_VAR 0 12
25897: PUSH
25898: LD_VAR 0 1
25902: PPUSH
25903: CALL_OW 248
25907: ST_TO_ADDR
// side := GetSide ( tower ) ;
25908: LD_ADDR_VAR 0 16
25912: PUSH
25913: LD_VAR 0 1
25917: PPUSH
25918: CALL_OW 255
25922: ST_TO_ADDR
// x := GetX ( tower ) ;
25923: LD_ADDR_VAR 0 10
25927: PUSH
25928: LD_VAR 0 1
25932: PPUSH
25933: CALL_OW 250
25937: ST_TO_ADDR
// y := GetY ( tower ) ;
25938: LD_ADDR_VAR 0 11
25942: PUSH
25943: LD_VAR 0 1
25947: PPUSH
25948: CALL_OW 251
25952: ST_TO_ADDR
// if not x or not y then
25953: LD_VAR 0 10
25957: NOT
25958: PUSH
25959: LD_VAR 0 11
25963: NOT
25964: OR
25965: IFFALSE 25969
// exit ;
25967: GO 27002
// weapon := 0 ;
25969: LD_ADDR_VAR 0 18
25973: PUSH
25974: LD_INT 0
25976: ST_TO_ADDR
// fac_list := [ ] ;
25977: LD_ADDR_VAR 0 17
25981: PUSH
25982: EMPTY
25983: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25984: LD_ADDR_VAR 0 6
25988: PUSH
25989: LD_VAR 0 1
25993: PPUSH
25994: CALL_OW 274
25998: PPUSH
25999: LD_VAR 0 2
26003: PPUSH
26004: LD_INT 0
26006: PPUSH
26007: CALL 23573 0 3
26011: PPUSH
26012: LD_INT 30
26014: PUSH
26015: LD_INT 3
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PPUSH
26022: CALL_OW 72
26026: ST_TO_ADDR
// if not factories then
26027: LD_VAR 0 6
26031: NOT
26032: IFFALSE 26036
// exit ;
26034: GO 27002
// for i in factories do
26036: LD_ADDR_VAR 0 8
26040: PUSH
26041: LD_VAR 0 6
26045: PUSH
26046: FOR_IN
26047: IFFALSE 26072
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26049: LD_ADDR_VAR 0 17
26053: PUSH
26054: LD_VAR 0 17
26058: PUSH
26059: LD_VAR 0 8
26063: PPUSH
26064: CALL_OW 478
26068: UNION
26069: ST_TO_ADDR
26070: GO 26046
26072: POP
26073: POP
// if not fac_list then
26074: LD_VAR 0 17
26078: NOT
26079: IFFALSE 26083
// exit ;
26081: GO 27002
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26083: LD_ADDR_VAR 0 5
26087: PUSH
26088: LD_INT 4
26090: PUSH
26091: LD_INT 5
26093: PUSH
26094: LD_INT 9
26096: PUSH
26097: LD_INT 10
26099: PUSH
26100: LD_INT 6
26102: PUSH
26103: LD_INT 7
26105: PUSH
26106: LD_INT 11
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 27
26120: PUSH
26121: LD_INT 28
26123: PUSH
26124: LD_INT 26
26126: PUSH
26127: LD_INT 30
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 43
26138: PUSH
26139: LD_INT 44
26141: PUSH
26142: LD_INT 46
26144: PUSH
26145: LD_INT 45
26147: PUSH
26148: LD_INT 47
26150: PUSH
26151: LD_INT 49
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: LIST
26166: PUSH
26167: LD_VAR 0 12
26171: ARRAY
26172: ST_TO_ADDR
// list := list isect fac_list ;
26173: LD_ADDR_VAR 0 5
26177: PUSH
26178: LD_VAR 0 5
26182: PUSH
26183: LD_VAR 0 17
26187: ISECT
26188: ST_TO_ADDR
// if not list then
26189: LD_VAR 0 5
26193: NOT
26194: IFFALSE 26198
// exit ;
26196: GO 27002
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26198: LD_VAR 0 12
26202: PUSH
26203: LD_INT 3
26205: EQUAL
26206: PUSH
26207: LD_INT 49
26209: PUSH
26210: LD_VAR 0 5
26214: IN
26215: AND
26216: PUSH
26217: LD_INT 31
26219: PPUSH
26220: LD_VAR 0 16
26224: PPUSH
26225: CALL_OW 321
26229: PUSH
26230: LD_INT 2
26232: EQUAL
26233: AND
26234: IFFALSE 26294
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26236: LD_INT 22
26238: PUSH
26239: LD_VAR 0 16
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 35
26250: PUSH
26251: LD_INT 49
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 91
26260: PUSH
26261: LD_VAR 0 1
26265: PUSH
26266: LD_INT 10
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: LIST
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: LIST
26278: PPUSH
26279: CALL_OW 69
26283: NOT
26284: IFFALSE 26294
// weapon := ru_time_lapser ;
26286: LD_ADDR_VAR 0 18
26290: PUSH
26291: LD_INT 49
26293: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26294: LD_VAR 0 12
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: LD_INT 2
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: IN
26309: PUSH
26310: LD_INT 11
26312: PUSH
26313: LD_VAR 0 5
26317: IN
26318: PUSH
26319: LD_INT 30
26321: PUSH
26322: LD_VAR 0 5
26326: IN
26327: OR
26328: AND
26329: PUSH
26330: LD_INT 6
26332: PPUSH
26333: LD_VAR 0 16
26337: PPUSH
26338: CALL_OW 321
26342: PUSH
26343: LD_INT 2
26345: EQUAL
26346: AND
26347: IFFALSE 26512
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26349: LD_INT 22
26351: PUSH
26352: LD_VAR 0 16
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 2
26363: PUSH
26364: LD_INT 35
26366: PUSH
26367: LD_INT 11
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 35
26376: PUSH
26377: LD_INT 30
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 91
26391: PUSH
26392: LD_VAR 0 1
26396: PUSH
26397: LD_INT 18
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: LIST
26409: PPUSH
26410: CALL_OW 69
26414: NOT
26415: PUSH
26416: LD_INT 22
26418: PUSH
26419: LD_VAR 0 16
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 30
26433: PUSH
26434: LD_INT 32
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 30
26443: PUSH
26444: LD_INT 33
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 91
26458: PUSH
26459: LD_VAR 0 1
26463: PUSH
26464: LD_INT 12
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: LIST
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: LIST
26476: PUSH
26477: EMPTY
26478: LIST
26479: PPUSH
26480: CALL_OW 69
26484: PUSH
26485: LD_INT 2
26487: GREATER
26488: AND
26489: IFFALSE 26512
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26491: LD_ADDR_VAR 0 18
26495: PUSH
26496: LD_INT 11
26498: PUSH
26499: LD_INT 30
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_VAR 0 12
26510: ARRAY
26511: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26512: LD_VAR 0 18
26516: NOT
26517: PUSH
26518: LD_INT 40
26520: PPUSH
26521: LD_VAR 0 16
26525: PPUSH
26526: CALL_OW 321
26530: PUSH
26531: LD_INT 2
26533: EQUAL
26534: AND
26535: PUSH
26536: LD_INT 7
26538: PUSH
26539: LD_VAR 0 5
26543: IN
26544: PUSH
26545: LD_INT 28
26547: PUSH
26548: LD_VAR 0 5
26552: IN
26553: OR
26554: PUSH
26555: LD_INT 45
26557: PUSH
26558: LD_VAR 0 5
26562: IN
26563: OR
26564: AND
26565: IFFALSE 26819
// begin hex := GetHexInfo ( x , y ) ;
26567: LD_ADDR_VAR 0 4
26571: PUSH
26572: LD_VAR 0 10
26576: PPUSH
26577: LD_VAR 0 11
26581: PPUSH
26582: CALL_OW 546
26586: ST_TO_ADDR
// if hex [ 1 ] then
26587: LD_VAR 0 4
26591: PUSH
26592: LD_INT 1
26594: ARRAY
26595: IFFALSE 26599
// exit ;
26597: GO 27002
// height := hex [ 2 ] ;
26599: LD_ADDR_VAR 0 15
26603: PUSH
26604: LD_VAR 0 4
26608: PUSH
26609: LD_INT 2
26611: ARRAY
26612: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26613: LD_ADDR_VAR 0 14
26617: PUSH
26618: LD_INT 0
26620: PUSH
26621: LD_INT 2
26623: PUSH
26624: LD_INT 3
26626: PUSH
26627: LD_INT 5
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: ST_TO_ADDR
// for i in tmp do
26636: LD_ADDR_VAR 0 8
26640: PUSH
26641: LD_VAR 0 14
26645: PUSH
26646: FOR_IN
26647: IFFALSE 26817
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26649: LD_ADDR_VAR 0 9
26653: PUSH
26654: LD_VAR 0 10
26658: PPUSH
26659: LD_VAR 0 8
26663: PPUSH
26664: LD_INT 5
26666: PPUSH
26667: CALL_OW 272
26671: PUSH
26672: LD_VAR 0 11
26676: PPUSH
26677: LD_VAR 0 8
26681: PPUSH
26682: LD_INT 5
26684: PPUSH
26685: CALL_OW 273
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26694: LD_VAR 0 9
26698: PUSH
26699: LD_INT 1
26701: ARRAY
26702: PPUSH
26703: LD_VAR 0 9
26707: PUSH
26708: LD_INT 2
26710: ARRAY
26711: PPUSH
26712: CALL_OW 488
26716: IFFALSE 26815
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26718: LD_ADDR_VAR 0 4
26722: PUSH
26723: LD_VAR 0 9
26727: PUSH
26728: LD_INT 1
26730: ARRAY
26731: PPUSH
26732: LD_VAR 0 9
26736: PUSH
26737: LD_INT 2
26739: ARRAY
26740: PPUSH
26741: CALL_OW 546
26745: ST_TO_ADDR
// if hex [ 1 ] then
26746: LD_VAR 0 4
26750: PUSH
26751: LD_INT 1
26753: ARRAY
26754: IFFALSE 26758
// continue ;
26756: GO 26646
// h := hex [ 2 ] ;
26758: LD_ADDR_VAR 0 13
26762: PUSH
26763: LD_VAR 0 4
26767: PUSH
26768: LD_INT 2
26770: ARRAY
26771: ST_TO_ADDR
// if h + 7 < height then
26772: LD_VAR 0 13
26776: PUSH
26777: LD_INT 7
26779: PLUS
26780: PUSH
26781: LD_VAR 0 15
26785: LESS
26786: IFFALSE 26815
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26788: LD_ADDR_VAR 0 18
26792: PUSH
26793: LD_INT 7
26795: PUSH
26796: LD_INT 28
26798: PUSH
26799: LD_INT 45
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: PUSH
26807: LD_VAR 0 12
26811: ARRAY
26812: ST_TO_ADDR
// break ;
26813: GO 26817
// end ; end ; end ;
26815: GO 26646
26817: POP
26818: POP
// end ; if not weapon then
26819: LD_VAR 0 18
26823: NOT
26824: IFFALSE 26884
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26826: LD_ADDR_VAR 0 5
26830: PUSH
26831: LD_VAR 0 5
26835: PUSH
26836: LD_INT 11
26838: PUSH
26839: LD_INT 30
26841: PUSH
26842: LD_INT 49
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: DIFF
26850: ST_TO_ADDR
// if not list then
26851: LD_VAR 0 5
26855: NOT
26856: IFFALSE 26860
// exit ;
26858: GO 27002
// weapon := list [ rand ( 1 , list ) ] ;
26860: LD_ADDR_VAR 0 18
26864: PUSH
26865: LD_VAR 0 5
26869: PUSH
26870: LD_INT 1
26872: PPUSH
26873: LD_VAR 0 5
26877: PPUSH
26878: CALL_OW 12
26882: ARRAY
26883: ST_TO_ADDR
// end ; if weapon then
26884: LD_VAR 0 18
26888: IFFALSE 27002
// begin tmp := CostOfWeapon ( weapon ) ;
26890: LD_ADDR_VAR 0 14
26894: PUSH
26895: LD_VAR 0 18
26899: PPUSH
26900: CALL_OW 451
26904: ST_TO_ADDR
// j := GetBase ( tower ) ;
26905: LD_ADDR_VAR 0 9
26909: PUSH
26910: LD_VAR 0 1
26914: PPUSH
26915: CALL_OW 274
26919: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26920: LD_VAR 0 9
26924: PPUSH
26925: LD_INT 1
26927: PPUSH
26928: CALL_OW 275
26932: PUSH
26933: LD_VAR 0 14
26937: PUSH
26938: LD_INT 1
26940: ARRAY
26941: GREATEREQUAL
26942: PUSH
26943: LD_VAR 0 9
26947: PPUSH
26948: LD_INT 2
26950: PPUSH
26951: CALL_OW 275
26955: PUSH
26956: LD_VAR 0 14
26960: PUSH
26961: LD_INT 2
26963: ARRAY
26964: GREATEREQUAL
26965: AND
26966: PUSH
26967: LD_VAR 0 9
26971: PPUSH
26972: LD_INT 3
26974: PPUSH
26975: CALL_OW 275
26979: PUSH
26980: LD_VAR 0 14
26984: PUSH
26985: LD_INT 3
26987: ARRAY
26988: GREATEREQUAL
26989: AND
26990: IFFALSE 27002
// result := weapon ;
26992: LD_ADDR_VAR 0 3
26996: PUSH
26997: LD_VAR 0 18
27001: ST_TO_ADDR
// end ; end ;
27002: LD_VAR 0 3
27006: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27007: LD_INT 0
27009: PPUSH
27010: PPUSH
// result := true ;
27011: LD_ADDR_VAR 0 3
27015: PUSH
27016: LD_INT 1
27018: ST_TO_ADDR
// if array1 = array2 then
27019: LD_VAR 0 1
27023: PUSH
27024: LD_VAR 0 2
27028: EQUAL
27029: IFFALSE 27089
// begin for i = 1 to array1 do
27031: LD_ADDR_VAR 0 4
27035: PUSH
27036: DOUBLE
27037: LD_INT 1
27039: DEC
27040: ST_TO_ADDR
27041: LD_VAR 0 1
27045: PUSH
27046: FOR_TO
27047: IFFALSE 27085
// if array1 [ i ] <> array2 [ i ] then
27049: LD_VAR 0 1
27053: PUSH
27054: LD_VAR 0 4
27058: ARRAY
27059: PUSH
27060: LD_VAR 0 2
27064: PUSH
27065: LD_VAR 0 4
27069: ARRAY
27070: NONEQUAL
27071: IFFALSE 27083
// begin result := false ;
27073: LD_ADDR_VAR 0 3
27077: PUSH
27078: LD_INT 0
27080: ST_TO_ADDR
// break ;
27081: GO 27085
// end ;
27083: GO 27046
27085: POP
27086: POP
// end else
27087: GO 27097
// result := false ;
27089: LD_ADDR_VAR 0 3
27093: PUSH
27094: LD_INT 0
27096: ST_TO_ADDR
// end ;
27097: LD_VAR 0 3
27101: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27102: LD_INT 0
27104: PPUSH
27105: PPUSH
// if not array1 or not array2 then
27106: LD_VAR 0 1
27110: NOT
27111: PUSH
27112: LD_VAR 0 2
27116: NOT
27117: OR
27118: IFFALSE 27122
// exit ;
27120: GO 27186
// result := true ;
27122: LD_ADDR_VAR 0 3
27126: PUSH
27127: LD_INT 1
27129: ST_TO_ADDR
// for i = 1 to array1 do
27130: LD_ADDR_VAR 0 4
27134: PUSH
27135: DOUBLE
27136: LD_INT 1
27138: DEC
27139: ST_TO_ADDR
27140: LD_VAR 0 1
27144: PUSH
27145: FOR_TO
27146: IFFALSE 27184
// if array1 [ i ] <> array2 [ i ] then
27148: LD_VAR 0 1
27152: PUSH
27153: LD_VAR 0 4
27157: ARRAY
27158: PUSH
27159: LD_VAR 0 2
27163: PUSH
27164: LD_VAR 0 4
27168: ARRAY
27169: NONEQUAL
27170: IFFALSE 27182
// begin result := false ;
27172: LD_ADDR_VAR 0 3
27176: PUSH
27177: LD_INT 0
27179: ST_TO_ADDR
// break ;
27180: GO 27184
// end ;
27182: GO 27145
27184: POP
27185: POP
// end ;
27186: LD_VAR 0 3
27190: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27191: LD_INT 0
27193: PPUSH
27194: PPUSH
27195: PPUSH
// pom := GetBase ( fac ) ;
27196: LD_ADDR_VAR 0 5
27200: PUSH
27201: LD_VAR 0 1
27205: PPUSH
27206: CALL_OW 274
27210: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27211: LD_ADDR_VAR 0 4
27215: PUSH
27216: LD_VAR 0 2
27220: PUSH
27221: LD_INT 1
27223: ARRAY
27224: PPUSH
27225: LD_VAR 0 2
27229: PUSH
27230: LD_INT 2
27232: ARRAY
27233: PPUSH
27234: LD_VAR 0 2
27238: PUSH
27239: LD_INT 3
27241: ARRAY
27242: PPUSH
27243: LD_VAR 0 2
27247: PUSH
27248: LD_INT 4
27250: ARRAY
27251: PPUSH
27252: CALL_OW 449
27256: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27257: LD_ADDR_VAR 0 3
27261: PUSH
27262: LD_VAR 0 5
27266: PPUSH
27267: LD_INT 1
27269: PPUSH
27270: CALL_OW 275
27274: PUSH
27275: LD_VAR 0 4
27279: PUSH
27280: LD_INT 1
27282: ARRAY
27283: GREATEREQUAL
27284: PUSH
27285: LD_VAR 0 5
27289: PPUSH
27290: LD_INT 2
27292: PPUSH
27293: CALL_OW 275
27297: PUSH
27298: LD_VAR 0 4
27302: PUSH
27303: LD_INT 2
27305: ARRAY
27306: GREATEREQUAL
27307: AND
27308: PUSH
27309: LD_VAR 0 5
27313: PPUSH
27314: LD_INT 3
27316: PPUSH
27317: CALL_OW 275
27321: PUSH
27322: LD_VAR 0 4
27326: PUSH
27327: LD_INT 3
27329: ARRAY
27330: GREATEREQUAL
27331: AND
27332: ST_TO_ADDR
// end ;
27333: LD_VAR 0 3
27337: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27338: LD_INT 0
27340: PPUSH
27341: PPUSH
27342: PPUSH
27343: PPUSH
// pom := GetBase ( building ) ;
27344: LD_ADDR_VAR 0 3
27348: PUSH
27349: LD_VAR 0 1
27353: PPUSH
27354: CALL_OW 274
27358: ST_TO_ADDR
// if not pom then
27359: LD_VAR 0 3
27363: NOT
27364: IFFALSE 27368
// exit ;
27366: GO 27538
// btype := GetBType ( building ) ;
27368: LD_ADDR_VAR 0 5
27372: PUSH
27373: LD_VAR 0 1
27377: PPUSH
27378: CALL_OW 266
27382: ST_TO_ADDR
// if btype = b_armoury then
27383: LD_VAR 0 5
27387: PUSH
27388: LD_INT 4
27390: EQUAL
27391: IFFALSE 27401
// btype := b_barracks ;
27393: LD_ADDR_VAR 0 5
27397: PUSH
27398: LD_INT 5
27400: ST_TO_ADDR
// if btype = b_depot then
27401: LD_VAR 0 5
27405: PUSH
27406: LD_INT 0
27408: EQUAL
27409: IFFALSE 27419
// btype := b_warehouse ;
27411: LD_ADDR_VAR 0 5
27415: PUSH
27416: LD_INT 1
27418: ST_TO_ADDR
// if btype = b_workshop then
27419: LD_VAR 0 5
27423: PUSH
27424: LD_INT 2
27426: EQUAL
27427: IFFALSE 27437
// btype := b_factory ;
27429: LD_ADDR_VAR 0 5
27433: PUSH
27434: LD_INT 3
27436: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27437: LD_ADDR_VAR 0 4
27441: PUSH
27442: LD_VAR 0 5
27446: PPUSH
27447: LD_VAR 0 1
27451: PPUSH
27452: CALL_OW 248
27456: PPUSH
27457: CALL_OW 450
27461: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27462: LD_ADDR_VAR 0 2
27466: PUSH
27467: LD_VAR 0 3
27471: PPUSH
27472: LD_INT 1
27474: PPUSH
27475: CALL_OW 275
27479: PUSH
27480: LD_VAR 0 4
27484: PUSH
27485: LD_INT 1
27487: ARRAY
27488: GREATEREQUAL
27489: PUSH
27490: LD_VAR 0 3
27494: PPUSH
27495: LD_INT 2
27497: PPUSH
27498: CALL_OW 275
27502: PUSH
27503: LD_VAR 0 4
27507: PUSH
27508: LD_INT 2
27510: ARRAY
27511: GREATEREQUAL
27512: AND
27513: PUSH
27514: LD_VAR 0 3
27518: PPUSH
27519: LD_INT 3
27521: PPUSH
27522: CALL_OW 275
27526: PUSH
27527: LD_VAR 0 4
27531: PUSH
27532: LD_INT 3
27534: ARRAY
27535: GREATEREQUAL
27536: AND
27537: ST_TO_ADDR
// end ;
27538: LD_VAR 0 2
27542: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27543: LD_INT 0
27545: PPUSH
27546: PPUSH
27547: PPUSH
// pom := GetBase ( building ) ;
27548: LD_ADDR_VAR 0 4
27552: PUSH
27553: LD_VAR 0 1
27557: PPUSH
27558: CALL_OW 274
27562: ST_TO_ADDR
// if not pom then
27563: LD_VAR 0 4
27567: NOT
27568: IFFALSE 27572
// exit ;
27570: GO 27673
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27572: LD_ADDR_VAR 0 5
27576: PUSH
27577: LD_VAR 0 2
27581: PPUSH
27582: LD_VAR 0 1
27586: PPUSH
27587: CALL_OW 248
27591: PPUSH
27592: CALL_OW 450
27596: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27597: LD_ADDR_VAR 0 3
27601: PUSH
27602: LD_VAR 0 4
27606: PPUSH
27607: LD_INT 1
27609: PPUSH
27610: CALL_OW 275
27614: PUSH
27615: LD_VAR 0 5
27619: PUSH
27620: LD_INT 1
27622: ARRAY
27623: GREATEREQUAL
27624: PUSH
27625: LD_VAR 0 4
27629: PPUSH
27630: LD_INT 2
27632: PPUSH
27633: CALL_OW 275
27637: PUSH
27638: LD_VAR 0 5
27642: PUSH
27643: LD_INT 2
27645: ARRAY
27646: GREATEREQUAL
27647: AND
27648: PUSH
27649: LD_VAR 0 4
27653: PPUSH
27654: LD_INT 3
27656: PPUSH
27657: CALL_OW 275
27661: PUSH
27662: LD_VAR 0 5
27666: PUSH
27667: LD_INT 3
27669: ARRAY
27670: GREATEREQUAL
27671: AND
27672: ST_TO_ADDR
// end ;
27673: LD_VAR 0 3
27677: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27678: LD_INT 0
27680: PPUSH
27681: PPUSH
27682: PPUSH
27683: PPUSH
27684: PPUSH
27685: PPUSH
27686: PPUSH
27687: PPUSH
27688: PPUSH
27689: PPUSH
27690: PPUSH
// result := false ;
27691: LD_ADDR_VAR 0 8
27695: PUSH
27696: LD_INT 0
27698: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27699: LD_VAR 0 5
27703: NOT
27704: PUSH
27705: LD_VAR 0 1
27709: NOT
27710: OR
27711: PUSH
27712: LD_VAR 0 2
27716: NOT
27717: OR
27718: PUSH
27719: LD_VAR 0 3
27723: NOT
27724: OR
27725: IFFALSE 27729
// exit ;
27727: GO 28543
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27729: LD_ADDR_VAR 0 14
27733: PUSH
27734: LD_VAR 0 1
27738: PPUSH
27739: LD_VAR 0 2
27743: PPUSH
27744: LD_VAR 0 3
27748: PPUSH
27749: LD_VAR 0 4
27753: PPUSH
27754: LD_VAR 0 5
27758: PUSH
27759: LD_INT 1
27761: ARRAY
27762: PPUSH
27763: CALL_OW 248
27767: PPUSH
27768: LD_INT 0
27770: PPUSH
27771: CALL 29796 0 6
27775: ST_TO_ADDR
// if not hexes then
27776: LD_VAR 0 14
27780: NOT
27781: IFFALSE 27785
// exit ;
27783: GO 28543
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27785: LD_ADDR_VAR 0 17
27789: PUSH
27790: LD_VAR 0 5
27794: PPUSH
27795: LD_INT 22
27797: PUSH
27798: LD_VAR 0 13
27802: PPUSH
27803: CALL_OW 255
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 2
27814: PUSH
27815: LD_INT 30
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 30
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: LIST
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PPUSH
27844: CALL_OW 72
27848: ST_TO_ADDR
// for i = 1 to hexes do
27849: LD_ADDR_VAR 0 9
27853: PUSH
27854: DOUBLE
27855: LD_INT 1
27857: DEC
27858: ST_TO_ADDR
27859: LD_VAR 0 14
27863: PUSH
27864: FOR_TO
27865: IFFALSE 28541
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27867: LD_ADDR_VAR 0 13
27871: PUSH
27872: LD_VAR 0 14
27876: PUSH
27877: LD_VAR 0 9
27881: ARRAY
27882: PUSH
27883: LD_INT 1
27885: ARRAY
27886: PPUSH
27887: LD_VAR 0 14
27891: PUSH
27892: LD_VAR 0 9
27896: ARRAY
27897: PUSH
27898: LD_INT 2
27900: ARRAY
27901: PPUSH
27902: CALL_OW 428
27906: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27907: LD_VAR 0 14
27911: PUSH
27912: LD_VAR 0 9
27916: ARRAY
27917: PUSH
27918: LD_INT 1
27920: ARRAY
27921: PPUSH
27922: LD_VAR 0 14
27926: PUSH
27927: LD_VAR 0 9
27931: ARRAY
27932: PUSH
27933: LD_INT 2
27935: ARRAY
27936: PPUSH
27937: CALL_OW 351
27941: PUSH
27942: LD_VAR 0 14
27946: PUSH
27947: LD_VAR 0 9
27951: ARRAY
27952: PUSH
27953: LD_INT 1
27955: ARRAY
27956: PPUSH
27957: LD_VAR 0 14
27961: PUSH
27962: LD_VAR 0 9
27966: ARRAY
27967: PUSH
27968: LD_INT 2
27970: ARRAY
27971: PPUSH
27972: CALL_OW 488
27976: NOT
27977: OR
27978: PUSH
27979: LD_VAR 0 13
27983: PPUSH
27984: CALL_OW 247
27988: PUSH
27989: LD_INT 3
27991: EQUAL
27992: OR
27993: IFFALSE 27999
// exit ;
27995: POP
27996: POP
27997: GO 28543
// if not tmp then
27999: LD_VAR 0 13
28003: NOT
28004: IFFALSE 28008
// continue ;
28006: GO 27864
// result := true ;
28008: LD_ADDR_VAR 0 8
28012: PUSH
28013: LD_INT 1
28015: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28016: LD_VAR 0 6
28020: PUSH
28021: LD_VAR 0 13
28025: PPUSH
28026: CALL_OW 247
28030: PUSH
28031: LD_INT 2
28033: EQUAL
28034: AND
28035: PUSH
28036: LD_VAR 0 13
28040: PPUSH
28041: CALL_OW 263
28045: PUSH
28046: LD_INT 1
28048: EQUAL
28049: AND
28050: IFFALSE 28214
// begin if IsDrivenBy ( tmp ) then
28052: LD_VAR 0 13
28056: PPUSH
28057: CALL_OW 311
28061: IFFALSE 28065
// continue ;
28063: GO 27864
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28065: LD_VAR 0 6
28069: PPUSH
28070: LD_INT 3
28072: PUSH
28073: LD_INT 60
28075: PUSH
28076: EMPTY
28077: LIST
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 3
28085: PUSH
28086: LD_INT 55
28088: PUSH
28089: EMPTY
28090: LIST
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PPUSH
28100: CALL_OW 72
28104: IFFALSE 28212
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28106: LD_ADDR_VAR 0 18
28110: PUSH
28111: LD_VAR 0 6
28115: PPUSH
28116: LD_INT 3
28118: PUSH
28119: LD_INT 60
28121: PUSH
28122: EMPTY
28123: LIST
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 3
28131: PUSH
28132: LD_INT 55
28134: PUSH
28135: EMPTY
28136: LIST
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PPUSH
28146: CALL_OW 72
28150: PUSH
28151: LD_INT 1
28153: ARRAY
28154: ST_TO_ADDR
// if IsInUnit ( driver ) then
28155: LD_VAR 0 18
28159: PPUSH
28160: CALL_OW 310
28164: IFFALSE 28175
// ComExit ( driver ) ;
28166: LD_VAR 0 18
28170: PPUSH
28171: CALL 53588 0 1
// AddComEnterUnit ( driver , tmp ) ;
28175: LD_VAR 0 18
28179: PPUSH
28180: LD_VAR 0 13
28184: PPUSH
28185: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28189: LD_VAR 0 18
28193: PPUSH
28194: LD_VAR 0 7
28198: PPUSH
28199: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28203: LD_VAR 0 18
28207: PPUSH
28208: CALL_OW 181
// end ; continue ;
28212: GO 27864
// end ; if not cleaners or not tmp in cleaners then
28214: LD_VAR 0 6
28218: NOT
28219: PUSH
28220: LD_VAR 0 13
28224: PUSH
28225: LD_VAR 0 6
28229: IN
28230: NOT
28231: OR
28232: IFFALSE 28539
// begin if dep then
28234: LD_VAR 0 17
28238: IFFALSE 28374
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28240: LD_ADDR_VAR 0 16
28244: PUSH
28245: LD_VAR 0 17
28249: PUSH
28250: LD_INT 1
28252: ARRAY
28253: PPUSH
28254: CALL_OW 250
28258: PPUSH
28259: LD_VAR 0 17
28263: PUSH
28264: LD_INT 1
28266: ARRAY
28267: PPUSH
28268: CALL_OW 254
28272: PPUSH
28273: LD_INT 5
28275: PPUSH
28276: CALL_OW 272
28280: PUSH
28281: LD_VAR 0 17
28285: PUSH
28286: LD_INT 1
28288: ARRAY
28289: PPUSH
28290: CALL_OW 251
28294: PPUSH
28295: LD_VAR 0 17
28299: PUSH
28300: LD_INT 1
28302: ARRAY
28303: PPUSH
28304: CALL_OW 254
28308: PPUSH
28309: LD_INT 5
28311: PPUSH
28312: CALL_OW 273
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28321: LD_VAR 0 16
28325: PUSH
28326: LD_INT 1
28328: ARRAY
28329: PPUSH
28330: LD_VAR 0 16
28334: PUSH
28335: LD_INT 2
28337: ARRAY
28338: PPUSH
28339: CALL_OW 488
28343: IFFALSE 28374
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28345: LD_VAR 0 13
28349: PPUSH
28350: LD_VAR 0 16
28354: PUSH
28355: LD_INT 1
28357: ARRAY
28358: PPUSH
28359: LD_VAR 0 16
28363: PUSH
28364: LD_INT 2
28366: ARRAY
28367: PPUSH
28368: CALL_OW 111
// continue ;
28372: GO 27864
// end ; end ; r := GetDir ( tmp ) ;
28374: LD_ADDR_VAR 0 15
28378: PUSH
28379: LD_VAR 0 13
28383: PPUSH
28384: CALL_OW 254
28388: ST_TO_ADDR
// if r = 5 then
28389: LD_VAR 0 15
28393: PUSH
28394: LD_INT 5
28396: EQUAL
28397: IFFALSE 28407
// r := 0 ;
28399: LD_ADDR_VAR 0 15
28403: PUSH
28404: LD_INT 0
28406: ST_TO_ADDR
// for j = r to 5 do
28407: LD_ADDR_VAR 0 10
28411: PUSH
28412: DOUBLE
28413: LD_VAR 0 15
28417: DEC
28418: ST_TO_ADDR
28419: LD_INT 5
28421: PUSH
28422: FOR_TO
28423: IFFALSE 28537
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28425: LD_ADDR_VAR 0 11
28429: PUSH
28430: LD_VAR 0 13
28434: PPUSH
28435: CALL_OW 250
28439: PPUSH
28440: LD_VAR 0 10
28444: PPUSH
28445: LD_INT 2
28447: PPUSH
28448: CALL_OW 272
28452: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28453: LD_ADDR_VAR 0 12
28457: PUSH
28458: LD_VAR 0 13
28462: PPUSH
28463: CALL_OW 251
28467: PPUSH
28468: LD_VAR 0 10
28472: PPUSH
28473: LD_INT 2
28475: PPUSH
28476: CALL_OW 273
28480: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28481: LD_VAR 0 11
28485: PPUSH
28486: LD_VAR 0 12
28490: PPUSH
28491: CALL_OW 488
28495: PUSH
28496: LD_VAR 0 11
28500: PPUSH
28501: LD_VAR 0 12
28505: PPUSH
28506: CALL_OW 428
28510: NOT
28511: AND
28512: IFFALSE 28535
// begin ComMoveXY ( tmp , _x , _y ) ;
28514: LD_VAR 0 13
28518: PPUSH
28519: LD_VAR 0 11
28523: PPUSH
28524: LD_VAR 0 12
28528: PPUSH
28529: CALL_OW 111
// break ;
28533: GO 28537
// end ; end ;
28535: GO 28422
28537: POP
28538: POP
// end ; end ;
28539: GO 27864
28541: POP
28542: POP
// end ;
28543: LD_VAR 0 8
28547: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28548: LD_INT 0
28550: PPUSH
// result := true ;
28551: LD_ADDR_VAR 0 3
28555: PUSH
28556: LD_INT 1
28558: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28559: LD_VAR 0 2
28563: PUSH
28564: LD_INT 24
28566: DOUBLE
28567: EQUAL
28568: IFTRUE 28578
28570: LD_INT 33
28572: DOUBLE
28573: EQUAL
28574: IFTRUE 28578
28576: GO 28603
28578: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28579: LD_ADDR_VAR 0 3
28583: PUSH
28584: LD_INT 32
28586: PPUSH
28587: LD_VAR 0 1
28591: PPUSH
28592: CALL_OW 321
28596: PUSH
28597: LD_INT 2
28599: EQUAL
28600: ST_TO_ADDR
28601: GO 28919
28603: LD_INT 20
28605: DOUBLE
28606: EQUAL
28607: IFTRUE 28611
28609: GO 28636
28611: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28612: LD_ADDR_VAR 0 3
28616: PUSH
28617: LD_INT 6
28619: PPUSH
28620: LD_VAR 0 1
28624: PPUSH
28625: CALL_OW 321
28629: PUSH
28630: LD_INT 2
28632: EQUAL
28633: ST_TO_ADDR
28634: GO 28919
28636: LD_INT 22
28638: DOUBLE
28639: EQUAL
28640: IFTRUE 28650
28642: LD_INT 36
28644: DOUBLE
28645: EQUAL
28646: IFTRUE 28650
28648: GO 28675
28650: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28651: LD_ADDR_VAR 0 3
28655: PUSH
28656: LD_INT 15
28658: PPUSH
28659: LD_VAR 0 1
28663: PPUSH
28664: CALL_OW 321
28668: PUSH
28669: LD_INT 2
28671: EQUAL
28672: ST_TO_ADDR
28673: GO 28919
28675: LD_INT 30
28677: DOUBLE
28678: EQUAL
28679: IFTRUE 28683
28681: GO 28708
28683: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28684: LD_ADDR_VAR 0 3
28688: PUSH
28689: LD_INT 20
28691: PPUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL_OW 321
28701: PUSH
28702: LD_INT 2
28704: EQUAL
28705: ST_TO_ADDR
28706: GO 28919
28708: LD_INT 28
28710: DOUBLE
28711: EQUAL
28712: IFTRUE 28722
28714: LD_INT 21
28716: DOUBLE
28717: EQUAL
28718: IFTRUE 28722
28720: GO 28747
28722: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28723: LD_ADDR_VAR 0 3
28727: PUSH
28728: LD_INT 21
28730: PPUSH
28731: LD_VAR 0 1
28735: PPUSH
28736: CALL_OW 321
28740: PUSH
28741: LD_INT 2
28743: EQUAL
28744: ST_TO_ADDR
28745: GO 28919
28747: LD_INT 16
28749: DOUBLE
28750: EQUAL
28751: IFTRUE 28755
28753: GO 28780
28755: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28756: LD_ADDR_VAR 0 3
28760: PUSH
28761: LD_INT 84
28763: PPUSH
28764: LD_VAR 0 1
28768: PPUSH
28769: CALL_OW 321
28773: PUSH
28774: LD_INT 2
28776: EQUAL
28777: ST_TO_ADDR
28778: GO 28919
28780: LD_INT 19
28782: DOUBLE
28783: EQUAL
28784: IFTRUE 28794
28786: LD_INT 23
28788: DOUBLE
28789: EQUAL
28790: IFTRUE 28794
28792: GO 28819
28794: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28795: LD_ADDR_VAR 0 3
28799: PUSH
28800: LD_INT 83
28802: PPUSH
28803: LD_VAR 0 1
28807: PPUSH
28808: CALL_OW 321
28812: PUSH
28813: LD_INT 2
28815: EQUAL
28816: ST_TO_ADDR
28817: GO 28919
28819: LD_INT 17
28821: DOUBLE
28822: EQUAL
28823: IFTRUE 28827
28825: GO 28852
28827: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28828: LD_ADDR_VAR 0 3
28832: PUSH
28833: LD_INT 39
28835: PPUSH
28836: LD_VAR 0 1
28840: PPUSH
28841: CALL_OW 321
28845: PUSH
28846: LD_INT 2
28848: EQUAL
28849: ST_TO_ADDR
28850: GO 28919
28852: LD_INT 18
28854: DOUBLE
28855: EQUAL
28856: IFTRUE 28860
28858: GO 28885
28860: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28861: LD_ADDR_VAR 0 3
28865: PUSH
28866: LD_INT 40
28868: PPUSH
28869: LD_VAR 0 1
28873: PPUSH
28874: CALL_OW 321
28878: PUSH
28879: LD_INT 2
28881: EQUAL
28882: ST_TO_ADDR
28883: GO 28919
28885: LD_INT 27
28887: DOUBLE
28888: EQUAL
28889: IFTRUE 28893
28891: GO 28918
28893: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28894: LD_ADDR_VAR 0 3
28898: PUSH
28899: LD_INT 35
28901: PPUSH
28902: LD_VAR 0 1
28906: PPUSH
28907: CALL_OW 321
28911: PUSH
28912: LD_INT 2
28914: EQUAL
28915: ST_TO_ADDR
28916: GO 28919
28918: POP
// end ;
28919: LD_VAR 0 3
28923: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28924: LD_INT 0
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
28930: PPUSH
28931: PPUSH
28932: PPUSH
28933: PPUSH
28934: PPUSH
28935: PPUSH
28936: PPUSH
// result := false ;
28937: LD_ADDR_VAR 0 6
28941: PUSH
28942: LD_INT 0
28944: ST_TO_ADDR
// if btype = b_depot then
28945: LD_VAR 0 2
28949: PUSH
28950: LD_INT 0
28952: EQUAL
28953: IFFALSE 28965
// begin result := true ;
28955: LD_ADDR_VAR 0 6
28959: PUSH
28960: LD_INT 1
28962: ST_TO_ADDR
// exit ;
28963: GO 29791
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28965: LD_VAR 0 1
28969: NOT
28970: PUSH
28971: LD_VAR 0 1
28975: PPUSH
28976: CALL_OW 266
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: IN
28991: NOT
28992: OR
28993: PUSH
28994: LD_VAR 0 2
28998: NOT
28999: OR
29000: PUSH
29001: LD_VAR 0 5
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: LD_INT 2
29014: PUSH
29015: LD_INT 3
29017: PUSH
29018: LD_INT 4
29020: PUSH
29021: LD_INT 5
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: IN
29032: NOT
29033: OR
29034: PUSH
29035: LD_VAR 0 3
29039: PPUSH
29040: LD_VAR 0 4
29044: PPUSH
29045: CALL_OW 488
29049: NOT
29050: OR
29051: IFFALSE 29055
// exit ;
29053: GO 29791
// side := GetSide ( depot ) ;
29055: LD_ADDR_VAR 0 9
29059: PUSH
29060: LD_VAR 0 1
29064: PPUSH
29065: CALL_OW 255
29069: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29070: LD_VAR 0 9
29074: PPUSH
29075: LD_VAR 0 2
29079: PPUSH
29080: CALL 28548 0 2
29084: NOT
29085: IFFALSE 29089
// exit ;
29087: GO 29791
// pom := GetBase ( depot ) ;
29089: LD_ADDR_VAR 0 10
29093: PUSH
29094: LD_VAR 0 1
29098: PPUSH
29099: CALL_OW 274
29103: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29104: LD_ADDR_VAR 0 11
29108: PUSH
29109: LD_VAR 0 2
29113: PPUSH
29114: LD_VAR 0 1
29118: PPUSH
29119: CALL_OW 248
29123: PPUSH
29124: CALL_OW 450
29128: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29129: LD_VAR 0 10
29133: PPUSH
29134: LD_INT 1
29136: PPUSH
29137: CALL_OW 275
29141: PUSH
29142: LD_VAR 0 11
29146: PUSH
29147: LD_INT 1
29149: ARRAY
29150: GREATEREQUAL
29151: PUSH
29152: LD_VAR 0 10
29156: PPUSH
29157: LD_INT 2
29159: PPUSH
29160: CALL_OW 275
29164: PUSH
29165: LD_VAR 0 11
29169: PUSH
29170: LD_INT 2
29172: ARRAY
29173: GREATEREQUAL
29174: AND
29175: PUSH
29176: LD_VAR 0 10
29180: PPUSH
29181: LD_INT 3
29183: PPUSH
29184: CALL_OW 275
29188: PUSH
29189: LD_VAR 0 11
29193: PUSH
29194: LD_INT 3
29196: ARRAY
29197: GREATEREQUAL
29198: AND
29199: NOT
29200: IFFALSE 29204
// exit ;
29202: GO 29791
// if GetBType ( depot ) = b_depot then
29204: LD_VAR 0 1
29208: PPUSH
29209: CALL_OW 266
29213: PUSH
29214: LD_INT 0
29216: EQUAL
29217: IFFALSE 29229
// dist := 28 else
29219: LD_ADDR_VAR 0 14
29223: PUSH
29224: LD_INT 28
29226: ST_TO_ADDR
29227: GO 29237
// dist := 36 ;
29229: LD_ADDR_VAR 0 14
29233: PUSH
29234: LD_INT 36
29236: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29237: LD_VAR 0 1
29241: PPUSH
29242: LD_VAR 0 3
29246: PPUSH
29247: LD_VAR 0 4
29251: PPUSH
29252: CALL_OW 297
29256: PUSH
29257: LD_VAR 0 14
29261: GREATER
29262: IFFALSE 29266
// exit ;
29264: GO 29791
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29266: LD_ADDR_VAR 0 12
29270: PUSH
29271: LD_VAR 0 2
29275: PPUSH
29276: LD_VAR 0 3
29280: PPUSH
29281: LD_VAR 0 4
29285: PPUSH
29286: LD_VAR 0 5
29290: PPUSH
29291: LD_VAR 0 1
29295: PPUSH
29296: CALL_OW 248
29300: PPUSH
29301: LD_INT 0
29303: PPUSH
29304: CALL 29796 0 6
29308: ST_TO_ADDR
// if not hexes then
29309: LD_VAR 0 12
29313: NOT
29314: IFFALSE 29318
// exit ;
29316: GO 29791
// hex := GetHexInfo ( x , y ) ;
29318: LD_ADDR_VAR 0 15
29322: PUSH
29323: LD_VAR 0 3
29327: PPUSH
29328: LD_VAR 0 4
29332: PPUSH
29333: CALL_OW 546
29337: ST_TO_ADDR
// if hex [ 1 ] then
29338: LD_VAR 0 15
29342: PUSH
29343: LD_INT 1
29345: ARRAY
29346: IFFALSE 29350
// exit ;
29348: GO 29791
// height := hex [ 2 ] ;
29350: LD_ADDR_VAR 0 13
29354: PUSH
29355: LD_VAR 0 15
29359: PUSH
29360: LD_INT 2
29362: ARRAY
29363: ST_TO_ADDR
// for i = 1 to hexes do
29364: LD_ADDR_VAR 0 7
29368: PUSH
29369: DOUBLE
29370: LD_INT 1
29372: DEC
29373: ST_TO_ADDR
29374: LD_VAR 0 12
29378: PUSH
29379: FOR_TO
29380: IFFALSE 29710
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29382: LD_VAR 0 12
29386: PUSH
29387: LD_VAR 0 7
29391: ARRAY
29392: PUSH
29393: LD_INT 1
29395: ARRAY
29396: PPUSH
29397: LD_VAR 0 12
29401: PUSH
29402: LD_VAR 0 7
29406: ARRAY
29407: PUSH
29408: LD_INT 2
29410: ARRAY
29411: PPUSH
29412: CALL_OW 488
29416: NOT
29417: PUSH
29418: LD_VAR 0 12
29422: PUSH
29423: LD_VAR 0 7
29427: ARRAY
29428: PUSH
29429: LD_INT 1
29431: ARRAY
29432: PPUSH
29433: LD_VAR 0 12
29437: PUSH
29438: LD_VAR 0 7
29442: ARRAY
29443: PUSH
29444: LD_INT 2
29446: ARRAY
29447: PPUSH
29448: CALL_OW 428
29452: PUSH
29453: LD_INT 0
29455: GREATER
29456: OR
29457: PUSH
29458: LD_VAR 0 12
29462: PUSH
29463: LD_VAR 0 7
29467: ARRAY
29468: PUSH
29469: LD_INT 1
29471: ARRAY
29472: PPUSH
29473: LD_VAR 0 12
29477: PUSH
29478: LD_VAR 0 7
29482: ARRAY
29483: PUSH
29484: LD_INT 2
29486: ARRAY
29487: PPUSH
29488: CALL_OW 351
29492: OR
29493: IFFALSE 29499
// exit ;
29495: POP
29496: POP
29497: GO 29791
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29499: LD_ADDR_VAR 0 8
29503: PUSH
29504: LD_VAR 0 12
29508: PUSH
29509: LD_VAR 0 7
29513: ARRAY
29514: PUSH
29515: LD_INT 1
29517: ARRAY
29518: PPUSH
29519: LD_VAR 0 12
29523: PUSH
29524: LD_VAR 0 7
29528: ARRAY
29529: PUSH
29530: LD_INT 2
29532: ARRAY
29533: PPUSH
29534: CALL_OW 546
29538: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29539: LD_VAR 0 8
29543: PUSH
29544: LD_INT 1
29546: ARRAY
29547: PUSH
29548: LD_VAR 0 8
29552: PUSH
29553: LD_INT 2
29555: ARRAY
29556: PUSH
29557: LD_VAR 0 13
29561: PUSH
29562: LD_INT 2
29564: PLUS
29565: GREATER
29566: OR
29567: PUSH
29568: LD_VAR 0 8
29572: PUSH
29573: LD_INT 2
29575: ARRAY
29576: PUSH
29577: LD_VAR 0 13
29581: PUSH
29582: LD_INT 2
29584: MINUS
29585: LESS
29586: OR
29587: PUSH
29588: LD_VAR 0 8
29592: PUSH
29593: LD_INT 3
29595: ARRAY
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: LD_INT 8
29602: PUSH
29603: LD_INT 9
29605: PUSH
29606: LD_INT 10
29608: PUSH
29609: LD_INT 11
29611: PUSH
29612: LD_INT 12
29614: PUSH
29615: LD_INT 13
29617: PUSH
29618: LD_INT 16
29620: PUSH
29621: LD_INT 17
29623: PUSH
29624: LD_INT 18
29626: PUSH
29627: LD_INT 19
29629: PUSH
29630: LD_INT 20
29632: PUSH
29633: LD_INT 21
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: IN
29651: NOT
29652: OR
29653: PUSH
29654: LD_VAR 0 8
29658: PUSH
29659: LD_INT 5
29661: ARRAY
29662: NOT
29663: OR
29664: PUSH
29665: LD_VAR 0 8
29669: PUSH
29670: LD_INT 6
29672: ARRAY
29673: PUSH
29674: LD_INT 1
29676: PUSH
29677: LD_INT 2
29679: PUSH
29680: LD_INT 7
29682: PUSH
29683: LD_INT 9
29685: PUSH
29686: LD_INT 10
29688: PUSH
29689: LD_INT 11
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: IN
29700: NOT
29701: OR
29702: IFFALSE 29708
// exit ;
29704: POP
29705: POP
29706: GO 29791
// end ;
29708: GO 29379
29710: POP
29711: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29712: LD_VAR 0 9
29716: PPUSH
29717: LD_VAR 0 3
29721: PPUSH
29722: LD_VAR 0 4
29726: PPUSH
29727: LD_INT 20
29729: PPUSH
29730: CALL 21714 0 4
29734: PUSH
29735: LD_INT 4
29737: ARRAY
29738: IFFALSE 29742
// exit ;
29740: GO 29791
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29742: LD_VAR 0 2
29746: PUSH
29747: LD_INT 29
29749: PUSH
29750: LD_INT 30
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: IN
29757: PUSH
29758: LD_VAR 0 3
29762: PPUSH
29763: LD_VAR 0 4
29767: PPUSH
29768: LD_VAR 0 9
29772: PPUSH
29773: CALL_OW 440
29777: NOT
29778: AND
29779: IFFALSE 29783
// exit ;
29781: GO 29791
// result := true ;
29783: LD_ADDR_VAR 0 6
29787: PUSH
29788: LD_INT 1
29790: ST_TO_ADDR
// end ;
29791: LD_VAR 0 6
29795: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29796: LD_INT 0
29798: PPUSH
29799: PPUSH
29800: PPUSH
29801: PPUSH
29802: PPUSH
29803: PPUSH
29804: PPUSH
29805: PPUSH
29806: PPUSH
29807: PPUSH
29808: PPUSH
29809: PPUSH
29810: PPUSH
29811: PPUSH
29812: PPUSH
29813: PPUSH
29814: PPUSH
29815: PPUSH
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
29833: PPUSH
29834: PPUSH
29835: PPUSH
29836: PPUSH
29837: PPUSH
29838: PPUSH
29839: PPUSH
29840: PPUSH
29841: PPUSH
29842: PPUSH
29843: PPUSH
29844: PPUSH
29845: PPUSH
29846: PPUSH
29847: PPUSH
29848: PPUSH
29849: PPUSH
29850: PPUSH
29851: PPUSH
29852: PPUSH
29853: PPUSH
29854: PPUSH
29855: PPUSH
// result = [ ] ;
29856: LD_ADDR_VAR 0 7
29860: PUSH
29861: EMPTY
29862: ST_TO_ADDR
// temp_list = [ ] ;
29863: LD_ADDR_VAR 0 9
29867: PUSH
29868: EMPTY
29869: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29870: LD_VAR 0 4
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: LD_INT 2
29883: PUSH
29884: LD_INT 3
29886: PUSH
29887: LD_INT 4
29889: PUSH
29890: LD_INT 5
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: IN
29901: NOT
29902: PUSH
29903: LD_VAR 0 1
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: IN
29918: PUSH
29919: LD_VAR 0 5
29923: PUSH
29924: LD_INT 1
29926: PUSH
29927: LD_INT 2
29929: PUSH
29930: LD_INT 3
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: IN
29938: NOT
29939: AND
29940: OR
29941: IFFALSE 29945
// exit ;
29943: GO 48336
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29945: LD_VAR 0 1
29949: PUSH
29950: LD_INT 6
29952: PUSH
29953: LD_INT 7
29955: PUSH
29956: LD_INT 8
29958: PUSH
29959: LD_INT 13
29961: PUSH
29962: LD_INT 12
29964: PUSH
29965: LD_INT 15
29967: PUSH
29968: LD_INT 11
29970: PUSH
29971: LD_INT 14
29973: PUSH
29974: LD_INT 10
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: IN
29988: IFFALSE 29998
// btype = b_lab ;
29990: LD_ADDR_VAR 0 1
29994: PUSH
29995: LD_INT 6
29997: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29998: LD_VAR 0 6
30002: PUSH
30003: LD_INT 0
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: LD_INT 2
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: LIST
30016: IN
30017: NOT
30018: PUSH
30019: LD_VAR 0 1
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: LD_INT 2
30032: PUSH
30033: LD_INT 3
30035: PUSH
30036: LD_INT 6
30038: PUSH
30039: LD_INT 36
30041: PUSH
30042: LD_INT 4
30044: PUSH
30045: LD_INT 5
30047: PUSH
30048: LD_INT 31
30050: PUSH
30051: LD_INT 32
30053: PUSH
30054: LD_INT 33
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: IN
30070: NOT
30071: PUSH
30072: LD_VAR 0 6
30076: PUSH
30077: LD_INT 1
30079: EQUAL
30080: AND
30081: OR
30082: PUSH
30083: LD_VAR 0 1
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: LD_INT 3
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: IN
30098: NOT
30099: PUSH
30100: LD_VAR 0 6
30104: PUSH
30105: LD_INT 2
30107: EQUAL
30108: AND
30109: OR
30110: IFFALSE 30120
// mode = 0 ;
30112: LD_ADDR_VAR 0 6
30116: PUSH
30117: LD_INT 0
30119: ST_TO_ADDR
// case mode of 0 :
30120: LD_VAR 0 6
30124: PUSH
30125: LD_INT 0
30127: DOUBLE
30128: EQUAL
30129: IFTRUE 30133
30131: GO 41586
30133: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30134: LD_ADDR_VAR 0 11
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: LD_INT 1
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 1
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 1
30203: NEG
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: LD_INT 2
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: LD_INT 2
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: LD_INT 1
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: NEG
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: LD_INT 3
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: LD_INT 3
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: LD_INT 2
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30327: LD_ADDR_VAR 0 12
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 0
30344: PUSH
30345: LD_INT 1
30347: NEG
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: LD_INT 0
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: LD_INT 1
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 2
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 2
30450: NEG
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 2
30461: NEG
30462: PUSH
30463: LD_INT 1
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 2
30473: NEG
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 3
30484: NEG
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 3
30495: NEG
30496: PUSH
30497: LD_INT 1
30499: NEG
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30523: LD_ADDR_VAR 0 13
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: LD_INT 0
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 0
30540: PUSH
30541: LD_INT 1
30543: NEG
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: LD_INT 1
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: LD_INT 0
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: NEG
30593: PUSH
30594: LD_INT 1
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 1
30604: NEG
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 2
30616: PUSH
30617: LD_INT 1
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 2
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: LD_INT 2
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 2
30646: NEG
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 2
30658: NEG
30659: PUSH
30660: LD_INT 2
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 2
30670: NEG
30671: PUSH
30672: LD_INT 3
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 3
30682: NEG
30683: PUSH
30684: LD_INT 2
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 3
30694: NEG
30695: PUSH
30696: LD_INT 3
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30722: LD_ADDR_VAR 0 14
30726: PUSH
30727: LD_INT 0
30729: PUSH
30730: LD_INT 0
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: LD_INT 1
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 1
30791: NEG
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: LD_INT 2
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: LD_INT 2
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: LD_INT 1
30829: NEG
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: LD_INT 1
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: LD_INT 3
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: LD_INT 3
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30918: LD_ADDR_VAR 0 15
30922: PUSH
30923: LD_INT 0
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 1
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 2
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 2
31041: NEG
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 2
31052: NEG
31053: PUSH
31054: LD_INT 1
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 2
31064: PUSH
31065: LD_INT 1
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 3
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 3
31085: PUSH
31086: LD_INT 1
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31111: LD_ADDR_VAR 0 16
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: LD_INT 0
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: NEG
31193: PUSH
31194: LD_INT 2
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: LD_INT 2
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 2
31234: NEG
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 2
31246: NEG
31247: PUSH
31248: LD_INT 2
31250: NEG
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 3
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 3
31268: PUSH
31269: LD_INT 3
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 2
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31304: LD_ADDR_VAR 0 17
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 0
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: LD_INT 2
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: LD_INT 2
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: LD_INT 0
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 2
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 2
31480: NEG
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 2
31491: NEG
31492: PUSH
31493: LD_INT 1
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 2
31503: NEG
31504: PUSH
31505: LD_INT 2
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31534: LD_ADDR_VAR 0 18
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: LD_INT 2
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: LD_INT 1
31641: NEG
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 2
31721: NEG
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31764: LD_ADDR_VAR 0 19
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: LD_INT 1
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: LD_INT 1
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: LD_INT 2
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: LD_INT 2
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 2
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: PUSH
31900: LD_INT 2
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 2
31940: NEG
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 2
31951: NEG
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: NEG
31964: PUSH
31965: LD_INT 2
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31994: LD_ADDR_VAR 0 20
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: LD_INT 2
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 0
32087: PUSH
32088: LD_INT 2
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 1
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 1
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: LD_INT 2
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 2
32170: NEG
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 2
32181: NEG
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 2
32193: NEG
32194: PUSH
32195: LD_INT 2
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32224: LD_ADDR_VAR 0 21
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: LD_INT 2
32309: NEG
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 2
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 2
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 0
32379: PUSH
32380: LD_INT 2
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: NEG
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 2
32411: NEG
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: LD_INT 2
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32454: LD_ADDR_VAR 0 22
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: LD_INT 1
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: LD_INT 1
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 1
32535: NEG
32536: PUSH
32537: LD_INT 2
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: LD_INT 2
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: LD_INT 1
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 1
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 0
32609: PUSH
32610: LD_INT 2
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 2
32630: NEG
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 2
32641: NEG
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: NEG
32654: PUSH
32655: LD_INT 2
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32684: LD_ADDR_VAR 0 23
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: NEG
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: LD_INT 2
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: LD_INT 1
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: LD_INT 2
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 0
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: NEG
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 2
32860: NEG
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 2
32871: NEG
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: NEG
32884: PUSH
32885: LD_INT 2
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: LD_INT 3
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: LD_INT 3
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: LD_INT 2
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 2
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32964: LD_ADDR_VAR 0 24
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 1
33022: NEG
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: LD_INT 2
33060: NEG
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 2
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 2
33099: PUSH
33100: LD_INT 2
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: LD_INT 2
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: NEG
33130: PUSH
33131: LD_INT 1
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 2
33140: NEG
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 2
33151: NEG
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 2
33163: NEG
33164: PUSH
33165: LD_INT 2
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: LD_INT 2
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 3
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 3
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33240: LD_ADDR_VAR 0 25
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: LD_INT 1
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 2
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 2
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: LD_INT 2
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: LD_INT 2
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: NEG
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 2
33427: NEG
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: NEG
33440: PUSH
33441: LD_INT 2
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 3
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: LD_INT 2
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 2
33471: PUSH
33472: LD_INT 3
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: LD_INT 3
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33514: LD_ADDR_VAR 0 26
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 1
33572: NEG
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: LD_INT 2
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: LD_INT 2
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: LD_INT 2
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: LD_INT 2
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: NEG
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: NEG
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: LD_INT 2
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: PUSH
33726: LD_INT 3
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: LD_INT 3
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: NEG
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33790: LD_ADDR_VAR 0 27
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: LD_INT 1
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 1
33859: NEG
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: PUSH
33916: LD_INT 1
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 2
33925: PUSH
33926: LD_INT 2
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: NEG
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 2
33966: NEG
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 2
33977: NEG
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 2
33989: NEG
33990: PUSH
33991: LD_INT 2
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: NEG
34002: PUSH
34003: LD_INT 2
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 2
34012: NEG
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 3
34023: NEG
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 3
34035: NEG
34036: PUSH
34037: LD_INT 2
34039: NEG
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34070: LD_ADDR_VAR 0 28
34074: PUSH
34075: LD_INT 0
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 1
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: LD_INT 1
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: LD_INT 2
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 2
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 1
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: LD_INT 1
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: PUSH
34206: LD_INT 2
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 1
34215: PUSH
34216: LD_INT 2
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: LD_INT 2
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: NEG
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 2
34257: NEG
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 2
34269: NEG
34270: PUSH
34271: LD_INT 2
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 2
34281: NEG
34282: PUSH
34283: LD_INT 3
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: NEG
34294: PUSH
34295: LD_INT 3
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 3
34305: NEG
34306: PUSH
34307: LD_INT 1
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 3
34317: NEG
34318: PUSH
34319: LD_INT 2
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34352: LD_ADDR_VAR 0 29
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: LD_INT 2
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: LD_INT 2
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: PUSH
34468: LD_INT 0
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 2
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 2
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 2
34518: NEG
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 2
34530: NEG
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: LD_INT 3
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 3
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: LD_INT 3
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 3
34596: NEG
34597: PUSH
34598: LD_INT 2
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34631: LD_ADDR_VAR 0 30
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: LD_INT 1
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: LD_INT 2
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: LD_INT 2
34727: NEG
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 1
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 2
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 2
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 2
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 1
34776: PUSH
34777: LD_INT 2
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 1
34786: NEG
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: NEG
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 3
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 3
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 2
34853: PUSH
34854: LD_INT 3
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 2
34863: NEG
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 3
34874: NEG
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34909: LD_ADDR_VAR 0 31
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 1
34967: NEG
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: NEG
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: NEG
34991: PUSH
34992: LD_INT 2
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 2
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 2
35033: PUSH
35034: LD_INT 2
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: LD_INT 2
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 2
35074: NEG
35075: PUSH
35076: LD_INT 1
35078: NEG
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 2
35086: NEG
35087: PUSH
35088: LD_INT 2
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 2
35098: NEG
35099: PUSH
35100: LD_INT 3
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 3
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: LD_INT 3
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 3
35152: NEG
35153: PUSH
35154: LD_INT 2
35156: NEG
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35187: LD_ADDR_VAR 0 32
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: LD_INT 2
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: LD_INT 2
35283: NEG
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: LD_INT 1
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 2
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 2
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: LD_INT 2
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: LD_INT 2
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 2
35353: NEG
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 2
35364: NEG
35365: PUSH
35366: LD_INT 1
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: LD_INT 3
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 3
35399: PUSH
35400: LD_INT 2
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: LD_INT 3
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 2
35419: NEG
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 3
35430: NEG
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35465: LD_ADDR_VAR 0 33
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: LD_INT 1
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: NEG
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: NEG
35547: PUSH
35548: LD_INT 2
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 1
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 2
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 2
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: LD_INT 2
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: LD_INT 1
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: NEG
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 2
35631: NEG
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 2
35643: NEG
35644: PUSH
35645: LD_INT 2
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 2
35655: NEG
35656: PUSH
35657: LD_INT 3
35659: NEG
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 2
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 3
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: LD_INT 3
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: NEG
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 3
35709: NEG
35710: PUSH
35711: LD_INT 2
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35744: LD_ADDR_VAR 0 34
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: LD_INT 2
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: LD_INT 2
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 2
35900: NEG
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 2
35911: NEG
35912: PUSH
35913: LD_INT 1
35915: NEG
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 2
35923: NEG
35924: PUSH
35925: LD_INT 2
35927: NEG
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: LD_INT 3
35939: NEG
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 3
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: LD_INT 3
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 2
35978: NEG
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 3
35989: NEG
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36024: LD_ADDR_VAR 0 35
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: NEG
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 2
36115: NEG
36116: PUSH
36117: LD_INT 1
36119: NEG
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36136: LD_ADDR_VAR 0 36
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: LD_INT 2
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: LD_INT 2
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36248: LD_ADDR_VAR 0 37
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 1
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36360: LD_ADDR_VAR 0 38
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: LD_INT 1
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 2
36451: NEG
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36472: LD_ADDR_VAR 0 39
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 1
36492: NEG
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: NEG
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: LD_INT 2
36557: NEG
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: LD_INT 2
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36584: LD_ADDR_VAR 0 40
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: LD_INT 1
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36696: LD_ADDR_VAR 0 41
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: LD_INT 1
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 1
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: LD_INT 1
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: LD_INT 2
36781: NEG
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 2
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 2
36810: PUSH
36811: LD_INT 1
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: LD_INT 2
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: LD_INT 2
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 2
36851: NEG
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: NEG
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: LD_INT 3
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 3
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 3
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 3
36929: PUSH
36930: LD_INT 2
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 3
36939: PUSH
36940: LD_INT 3
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 2
36949: PUSH
36950: LD_INT 3
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 3
36970: NEG
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 3
36981: NEG
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 3
36993: NEG
36994: PUSH
36995: LD_INT 2
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 3
37005: NEG
37006: PUSH
37007: LD_INT 3
37009: NEG
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37046: LD_ADDR_VAR 0 42
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 0
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: NEG
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: LD_INT 1
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 1
37127: NEG
37128: PUSH
37129: LD_INT 2
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 0
37139: PUSH
37140: LD_INT 2
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 1
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 2
37224: NEG
37225: PUSH
37226: LD_INT 2
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: NEG
37237: PUSH
37238: LD_INT 3
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: LD_INT 3
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 3
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: LD_INT 2
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 3
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 3
37292: PUSH
37293: LD_INT 3
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 2
37302: PUSH
37303: LD_INT 3
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: LD_INT 3
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 3
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 3
37343: NEG
37344: PUSH
37345: LD_INT 2
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 3
37355: NEG
37356: PUSH
37357: LD_INT 3
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37396: LD_ADDR_VAR 0 43
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: LD_INT 1
37469: NEG
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: LD_INT 2
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 2
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 1
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: LD_INT 2
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: LD_INT 2
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: NEG
37586: PUSH
37587: LD_INT 3
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 3
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: LD_INT 2
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 3
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 3
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: LD_INT 3
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: LD_INT 3
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: LD_INT 2
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 2
37681: NEG
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 3
37692: NEG
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 3
37703: NEG
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37744: LD_ADDR_VAR 0 44
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: LD_INT 2
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 2
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 2
37899: NEG
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 2
37910: NEG
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: NEG
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 2
37934: NEG
37935: PUSH
37936: LD_INT 3
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 3
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 3
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 3
37977: PUSH
37978: LD_INT 2
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 3
37987: PUSH
37988: LD_INT 3
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: LD_INT 3
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: LD_INT 1
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 3
38018: NEG
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 3
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 3
38041: NEG
38042: PUSH
38043: LD_INT 2
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 3
38053: NEG
38054: PUSH
38055: LD_INT 3
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38094: LD_ADDR_VAR 0 45
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 1
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: LD_INT 2
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: LD_INT 2
38190: NEG
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: LD_INT 2
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: LD_INT 2
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: LD_INT 2
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 2
38260: NEG
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 2
38272: NEG
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: LD_INT 3
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 1
38296: NEG
38297: PUSH
38298: LD_INT 3
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 3
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: LD_INT 2
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 3
38340: PUSH
38341: LD_INT 3
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 2
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: LD_INT 3
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 3
38391: NEG
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 3
38403: NEG
38404: PUSH
38405: LD_INT 3
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38444: LD_ADDR_VAR 0 46
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: LD_INT 2
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: LD_INT 2
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 2
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: LD_INT 2
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: LD_INT 2
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: NEG
38611: PUSH
38612: LD_INT 0
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: NEG
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: LD_INT 3
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 3
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: LD_INT 2
38659: NEG
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: LD_INT 1
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 3
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 3
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: LD_INT 3
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 2
38729: NEG
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 3
38740: NEG
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 3
38751: NEG
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38792: LD_ADDR_VAR 0 47
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 0
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: LD_INT 2
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 2
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: NEG
38908: PUSH
38909: LD_INT 1
38911: NEG
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: LD_INT 2
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38943: LD_ADDR_VAR 0 48
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: NEG
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: LD_INT 2
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 2
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 2
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 2
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39090: LD_ADDR_VAR 0 49
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39234: LD_ADDR_VAR 0 50
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: NEG
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39378: LD_ADDR_VAR 0 51
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 2
39490: NEG
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 2
39501: NEG
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39525: LD_ADDR_VAR 0 52
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 2
39610: NEG
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39676: LD_ADDR_VAR 0 53
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 2
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 2
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 2
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 2
39811: PUSH
39812: LD_INT 2
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: LD_INT 2
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 2
39863: NEG
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 2
39875: NEG
39876: PUSH
39877: LD_INT 2
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39906: LD_ADDR_VAR 0 54
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: LD_INT 1
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 2
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: LD_INT 2
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40136: LD_ADDR_VAR 0 55
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 2
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 2
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: NEG
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: NEG
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40366: LD_ADDR_VAR 0 56
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 2
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: NEG
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: NEG
40566: PUSH
40567: LD_INT 2
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40596: LD_ADDR_VAR 0 57
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: LD_INT 2
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: LD_INT 2
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: NEG
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 2
40795: NEG
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40826: LD_ADDR_VAR 0 58
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: NEG
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: LD_INT 2
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 2
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: NEG
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41056: LD_ADDR_VAR 0 59
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41144: LD_ADDR_VAR 0 60
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41232: LD_ADDR_VAR 0 61
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41320: LD_ADDR_VAR 0 62
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 1
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41408: LD_ADDR_VAR 0 63
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41496: LD_ADDR_VAR 0 64
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: ST_TO_ADDR
// end ; 1 :
41584: GO 47481
41586: LD_INT 1
41588: DOUBLE
41589: EQUAL
41590: IFTRUE 41594
41592: GO 44217
41594: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41595: LD_ADDR_VAR 0 11
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 3
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 3
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41639: LD_ADDR_VAR 0 12
41643: PUSH
41644: LD_INT 2
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 3
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 3
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41680: LD_ADDR_VAR 0 13
41684: PUSH
41685: LD_INT 3
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: LD_INT 3
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 2
41707: PUSH
41708: LD_INT 3
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41720: LD_ADDR_VAR 0 14
41724: PUSH
41725: LD_INT 1
41727: PUSH
41728: LD_INT 3
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: LD_INT 3
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: LIST
41760: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41761: LD_ADDR_VAR 0 15
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 3
41779: NEG
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 3
41790: NEG
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: LIST
41804: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41805: LD_ADDR_VAR 0 16
41809: PUSH
41810: LD_INT 2
41812: NEG
41813: PUSH
41814: LD_INT 3
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 3
41824: NEG
41825: PUSH
41826: LD_INT 2
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 3
41836: NEG
41837: PUSH
41838: LD_INT 3
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: LIST
41850: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41851: LD_ADDR_VAR 0 17
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: LD_INT 3
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 3
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: LD_INT 2
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41895: LD_ADDR_VAR 0 18
41899: PUSH
41900: LD_INT 2
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 3
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 3
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: LIST
41935: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41936: LD_ADDR_VAR 0 19
41940: PUSH
41941: LD_INT 3
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 3
41953: PUSH
41954: LD_INT 3
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 3
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: LIST
41975: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41976: LD_ADDR_VAR 0 20
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: LD_INT 3
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 3
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42017: LD_ADDR_VAR 0 21
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 3
42035: NEG
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 3
42046: NEG
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: LIST
42060: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42061: LD_ADDR_VAR 0 22
42065: PUSH
42066: LD_INT 2
42068: NEG
42069: PUSH
42070: LD_INT 3
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 3
42080: NEG
42081: PUSH
42082: LD_INT 2
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 3
42092: NEG
42093: PUSH
42094: LD_INT 3
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: LIST
42106: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42107: LD_ADDR_VAR 0 23
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: LD_INT 4
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: LD_INT 3
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: LIST
42150: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42151: LD_ADDR_VAR 0 24
42155: PUSH
42156: LD_INT 3
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 3
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 4
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42192: LD_ADDR_VAR 0 25
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 4
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 3
42219: PUSH
42220: LD_INT 4
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: LIST
42231: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42232: LD_ADDR_VAR 0 26
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: LD_INT 4
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: LD_INT 3
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42273: LD_ADDR_VAR 0 27
42277: PUSH
42278: LD_INT 3
42280: NEG
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 3
42291: NEG
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 4
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: LIST
42316: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42317: LD_ADDR_VAR 0 28
42321: PUSH
42322: LD_INT 3
42324: NEG
42325: PUSH
42326: LD_INT 3
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 3
42336: NEG
42337: PUSH
42338: LD_INT 4
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 4
42348: NEG
42349: PUSH
42350: LD_INT 3
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: LIST
42362: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42363: LD_ADDR_VAR 0 29
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 3
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 3
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: LD_INT 4
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 4
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 3
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: LD_INT 5
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 5
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: LD_INT 4
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: LD_INT 6
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 6
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 5
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42518: LD_ADDR_VAR 0 30
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 3
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 3
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 3
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 4
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 4
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 4
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 5
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 5
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 5
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 6
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 6
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42661: LD_ADDR_VAR 0 31
42665: PUSH
42666: LD_INT 3
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 3
42678: PUSH
42679: LD_INT 3
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 4
42698: PUSH
42699: LD_INT 3
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 4
42708: PUSH
42709: LD_INT 4
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: LD_INT 4
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 5
42728: PUSH
42729: LD_INT 4
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 5
42738: PUSH
42739: LD_INT 5
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 4
42748: PUSH
42749: LD_INT 5
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 6
42758: PUSH
42759: LD_INT 5
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 6
42768: PUSH
42769: LD_INT 6
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 5
42778: PUSH
42779: LD_INT 6
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42800: LD_ADDR_VAR 0 32
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 3
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 3
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 4
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 4
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 3
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 5
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 5
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: LD_INT 4
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 6
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 6
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: LD_INT 5
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42943: LD_ADDR_VAR 0 33
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 3
42961: NEG
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 3
42972: NEG
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 3
42984: NEG
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 4
42995: NEG
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 4
43006: NEG
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 4
43018: NEG
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 5
43029: NEG
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 5
43040: NEG
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 5
43052: NEG
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 6
43063: NEG
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 6
43074: NEG
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43098: LD_ADDR_VAR 0 34
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: LD_INT 3
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 3
43117: NEG
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 3
43129: NEG
43130: PUSH
43131: LD_INT 3
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 3
43141: NEG
43142: PUSH
43143: LD_INT 4
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 4
43153: NEG
43154: PUSH
43155: LD_INT 3
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 4
43165: NEG
43166: PUSH
43167: LD_INT 4
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 4
43177: NEG
43178: PUSH
43179: LD_INT 5
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 5
43189: NEG
43190: PUSH
43191: LD_INT 4
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 5
43201: NEG
43202: PUSH
43203: LD_INT 5
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 5
43213: NEG
43214: PUSH
43215: LD_INT 6
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 6
43225: NEG
43226: PUSH
43227: LD_INT 5
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 6
43237: NEG
43238: PUSH
43239: LD_INT 6
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43261: LD_ADDR_VAR 0 41
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 3
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: LIST
43304: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43305: LD_ADDR_VAR 0 42
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 3
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: LIST
43345: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43346: LD_ADDR_VAR 0 43
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 3
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: LD_INT 3
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43386: LD_ADDR_VAR 0 44
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 3
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: LIST
43426: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43427: LD_ADDR_VAR 0 45
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 3
43456: NEG
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43471: LD_ADDR_VAR 0 46
43475: PUSH
43476: LD_INT 2
43478: NEG
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: LD_INT 3
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 3
43502: NEG
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: LIST
43516: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43517: LD_ADDR_VAR 0 47
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 3
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 3
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43550: LD_ADDR_VAR 0 48
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: LD_INT 2
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43581: LD_ADDR_VAR 0 49
43585: PUSH
43586: LD_INT 3
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 3
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43610: LD_ADDR_VAR 0 50
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: LD_INT 3
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43639: LD_ADDR_VAR 0 51
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 2
43657: NEG
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43670: LD_ADDR_VAR 0 52
43674: PUSH
43675: LD_INT 3
43677: NEG
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 3
43689: NEG
43690: PUSH
43691: LD_INT 2
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43703: LD_ADDR_VAR 0 53
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 3
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 3
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: LD_INT 2
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43747: LD_ADDR_VAR 0 54
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 3
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43788: LD_ADDR_VAR 0 55
43792: PUSH
43793: LD_INT 3
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 3
43805: PUSH
43806: LD_INT 3
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: LD_INT 3
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43828: LD_ADDR_VAR 0 56
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 3
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 3
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43869: LD_ADDR_VAR 0 57
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 3
43898: NEG
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: LIST
43912: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43913: LD_ADDR_VAR 0 58
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: LD_INT 3
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 3
43932: NEG
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 3
43944: NEG
43945: PUSH
43946: LD_INT 3
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43959: LD_ADDR_VAR 0 59
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 2
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: LIST
44002: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44003: LD_ADDR_VAR 0 60
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44044: LD_ADDR_VAR 0 61
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: LD_INT 2
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: LD_INT 2
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: LIST
44083: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44084: LD_ADDR_VAR 0 62
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44125: LD_ADDR_VAR 0 63
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: NEG
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44169: LD_ADDR_VAR 0 64
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: LIST
44214: ST_TO_ADDR
// end ; 2 :
44215: GO 47481
44217: LD_INT 2
44219: DOUBLE
44220: EQUAL
44221: IFTRUE 44225
44223: GO 47480
44225: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44226: LD_ADDR_VAR 0 29
44230: PUSH
44231: LD_INT 4
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 4
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 5
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 5
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 4
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 3
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 3
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 5
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 3
44326: PUSH
44327: LD_INT 3
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 3
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 4
44346: PUSH
44347: LD_INT 3
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 4
44356: PUSH
44357: LD_INT 4
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 3
44366: PUSH
44367: LD_INT 4
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: LD_INT 3
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 4
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: LD_INT 4
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 4
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 3
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 4
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 5
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 5
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 4
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 3
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 5
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: LD_INT 3
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 3
44509: NEG
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 3
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 3
44554: NEG
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 4
44565: NEG
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 4
44576: NEG
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 4
44588: NEG
44589: PUSH
44590: LD_INT 2
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 4
44611: NEG
44612: PUSH
44613: LD_INT 4
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 4
44623: NEG
44624: PUSH
44625: LD_INT 5
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 3
44635: NEG
44636: PUSH
44637: LD_INT 4
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 3
44647: NEG
44648: PUSH
44649: LD_INT 3
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 4
44659: NEG
44660: PUSH
44661: LD_INT 3
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 5
44671: NEG
44672: PUSH
44673: LD_INT 4
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 5
44683: NEG
44684: PUSH
44685: LD_INT 5
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 3
44695: NEG
44696: PUSH
44697: LD_INT 5
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 5
44707: NEG
44708: PUSH
44709: LD_INT 3
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44764: LD_ADDR_VAR 0 30
44768: PUSH
44769: LD_INT 4
44771: PUSH
44772: LD_INT 4
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 4
44781: PUSH
44782: LD_INT 3
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 5
44791: PUSH
44792: LD_INT 4
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 5
44801: PUSH
44802: LD_INT 5
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 4
44811: PUSH
44812: LD_INT 5
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 3
44821: PUSH
44822: LD_INT 4
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 3
44831: PUSH
44832: LD_INT 3
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 5
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 3
44851: PUSH
44852: LD_INT 5
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: LD_INT 3
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 4
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 4
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 3
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: LD_INT 4
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 4
44954: NEG
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 4
44965: NEG
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 3
44977: NEG
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 3
44988: NEG
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 4
44999: NEG
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 5
45010: NEG
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 5
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 5
45033: NEG
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 3
45056: NEG
45057: PUSH
45058: LD_INT 3
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 3
45068: NEG
45069: PUSH
45070: LD_INT 4
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: LD_INT 3
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 3
45104: NEG
45105: PUSH
45106: LD_INT 2
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 4
45116: NEG
45117: PUSH
45118: LD_INT 3
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 4
45128: NEG
45129: PUSH
45130: LD_INT 4
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: LD_INT 4
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 4
45152: NEG
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 4
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: LD_INT 5
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: LD_INT 4
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 3
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: LD_INT 4
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: LD_INT 5
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: LD_INT 3
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: LD_INT 5
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45311: LD_ADDR_VAR 0 31
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 4
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 3
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 4
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 5
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 5
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 4
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 5
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: LD_INT 3
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 3
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 3
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 4
45467: NEG
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 4
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 4
45490: NEG
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 4
45513: NEG
45514: PUSH
45515: LD_INT 4
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 4
45525: NEG
45526: PUSH
45527: LD_INT 5
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 3
45537: NEG
45538: PUSH
45539: LD_INT 4
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 3
45549: NEG
45550: PUSH
45551: LD_INT 3
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 4
45561: NEG
45562: PUSH
45563: LD_INT 3
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 5
45573: NEG
45574: PUSH
45575: LD_INT 4
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 5
45585: NEG
45586: PUSH
45587: LD_INT 5
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 3
45597: NEG
45598: PUSH
45599: LD_INT 5
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 5
45609: NEG
45610: PUSH
45611: LD_INT 3
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 3
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 4
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 3
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: LD_INT 3
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 4
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: NEG
45712: PUSH
45713: LD_INT 4
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 4
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 4
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 5
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 5
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 4
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 3
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 3
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 5
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45861: LD_ADDR_VAR 0 32
45865: PUSH
45866: LD_INT 4
45868: NEG
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 4
45879: NEG
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 3
45891: NEG
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 4
45913: NEG
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 5
45924: NEG
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 5
45935: NEG
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 5
45947: NEG
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 3
45959: NEG
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 3
45970: NEG
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 3
45982: NEG
45983: PUSH
45984: LD_INT 4
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: LD_INT 3
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: LD_INT 2
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 3
46018: NEG
46019: PUSH
46020: LD_INT 2
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 4
46030: NEG
46031: PUSH
46032: LD_INT 3
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 4
46042: NEG
46043: PUSH
46044: LD_INT 4
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: LD_INT 4
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 4
46066: NEG
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 4
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: LD_INT 5
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: LD_INT 4
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: LD_INT 3
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 3
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 4
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 5
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: LD_INT 5
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 3
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 4
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 4
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 3
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 4
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 4
46273: PUSH
46274: LD_INT 4
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 4
46283: PUSH
46284: LD_INT 3
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 5
46293: PUSH
46294: LD_INT 4
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 5
46303: PUSH
46304: LD_INT 5
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 4
46313: PUSH
46314: LD_INT 5
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 3
46323: PUSH
46324: LD_INT 4
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 3
46333: PUSH
46334: LD_INT 3
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 5
46343: PUSH
46344: LD_INT 3
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: PUSH
46354: LD_INT 5
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46408: LD_ADDR_VAR 0 33
46412: PUSH
46413: LD_INT 4
46415: NEG
46416: PUSH
46417: LD_INT 4
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 4
46427: NEG
46428: PUSH
46429: LD_INT 5
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: LD_INT 4
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 3
46451: NEG
46452: PUSH
46453: LD_INT 3
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 4
46463: NEG
46464: PUSH
46465: LD_INT 3
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 5
46475: NEG
46476: PUSH
46477: LD_INT 4
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 5
46487: NEG
46488: PUSH
46489: LD_INT 5
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 3
46499: NEG
46500: PUSH
46501: LD_INT 5
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 5
46511: NEG
46512: PUSH
46513: LD_INT 3
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 3
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 4
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 3
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 2
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 4
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 4
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 4
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 4
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 5
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 5
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 4
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 3
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 3
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 5
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 3
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 4
46738: PUSH
46739: LD_INT 3
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 4
46748: PUSH
46749: LD_INT 4
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 3
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 3
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 4
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: LD_INT 4
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: LD_INT 4
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: LD_INT 4
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 5
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: LD_INT 5
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: LD_INT 4
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 3
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 5
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46946: LD_ADDR_VAR 0 34
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 4
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 5
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 4
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_INT 3
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 4
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: LD_INT 5
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: LD_INT 3
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: LD_INT 5
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 3
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 4
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 4
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 4
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 4
47148: PUSH
47149: LD_INT 4
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 4
47158: PUSH
47159: LD_INT 3
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 5
47168: PUSH
47169: LD_INT 4
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 5
47178: PUSH
47179: LD_INT 5
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 4
47188: PUSH
47189: LD_INT 5
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: LD_INT 4
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 3
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 5
47218: PUSH
47219: LD_INT 3
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 3
47228: PUSH
47229: LD_INT 5
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 3
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 3
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 4
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 4
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 4
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 2
47320: NEG
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 4
47331: NEG
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 4
47342: NEG
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 3
47354: NEG
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 3
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 4
47376: NEG
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 5
47387: NEG
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 5
47398: NEG
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 5
47410: NEG
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: ST_TO_ADDR
// end ; end ;
47478: GO 47481
47480: POP
// case btype of b_depot , b_warehouse :
47481: LD_VAR 0 1
47485: PUSH
47486: LD_INT 0
47488: DOUBLE
47489: EQUAL
47490: IFTRUE 47500
47492: LD_INT 1
47494: DOUBLE
47495: EQUAL
47496: IFTRUE 47500
47498: GO 47701
47500: POP
// case nation of nation_american :
47501: LD_VAR 0 5
47505: PUSH
47506: LD_INT 1
47508: DOUBLE
47509: EQUAL
47510: IFTRUE 47514
47512: GO 47570
47514: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47515: LD_ADDR_VAR 0 9
47519: PUSH
47520: LD_VAR 0 11
47524: PUSH
47525: LD_VAR 0 12
47529: PUSH
47530: LD_VAR 0 13
47534: PUSH
47535: LD_VAR 0 14
47539: PUSH
47540: LD_VAR 0 15
47544: PUSH
47545: LD_VAR 0 16
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: PUSH
47558: LD_VAR 0 4
47562: PUSH
47563: LD_INT 1
47565: PLUS
47566: ARRAY
47567: ST_TO_ADDR
47568: GO 47699
47570: LD_INT 2
47572: DOUBLE
47573: EQUAL
47574: IFTRUE 47578
47576: GO 47634
47578: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47579: LD_ADDR_VAR 0 9
47583: PUSH
47584: LD_VAR 0 17
47588: PUSH
47589: LD_VAR 0 18
47593: PUSH
47594: LD_VAR 0 19
47598: PUSH
47599: LD_VAR 0 20
47603: PUSH
47604: LD_VAR 0 21
47608: PUSH
47609: LD_VAR 0 22
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: PUSH
47622: LD_VAR 0 4
47626: PUSH
47627: LD_INT 1
47629: PLUS
47630: ARRAY
47631: ST_TO_ADDR
47632: GO 47699
47634: LD_INT 3
47636: DOUBLE
47637: EQUAL
47638: IFTRUE 47642
47640: GO 47698
47642: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47643: LD_ADDR_VAR 0 9
47647: PUSH
47648: LD_VAR 0 23
47652: PUSH
47653: LD_VAR 0 24
47657: PUSH
47658: LD_VAR 0 25
47662: PUSH
47663: LD_VAR 0 26
47667: PUSH
47668: LD_VAR 0 27
47672: PUSH
47673: LD_VAR 0 28
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: PUSH
47686: LD_VAR 0 4
47690: PUSH
47691: LD_INT 1
47693: PLUS
47694: ARRAY
47695: ST_TO_ADDR
47696: GO 47699
47698: POP
47699: GO 48254
47701: LD_INT 2
47703: DOUBLE
47704: EQUAL
47705: IFTRUE 47715
47707: LD_INT 3
47709: DOUBLE
47710: EQUAL
47711: IFTRUE 47715
47713: GO 47771
47715: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47716: LD_ADDR_VAR 0 9
47720: PUSH
47721: LD_VAR 0 29
47725: PUSH
47726: LD_VAR 0 30
47730: PUSH
47731: LD_VAR 0 31
47735: PUSH
47736: LD_VAR 0 32
47740: PUSH
47741: LD_VAR 0 33
47745: PUSH
47746: LD_VAR 0 34
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: PUSH
47759: LD_VAR 0 4
47763: PUSH
47764: LD_INT 1
47766: PLUS
47767: ARRAY
47768: ST_TO_ADDR
47769: GO 48254
47771: LD_INT 16
47773: DOUBLE
47774: EQUAL
47775: IFTRUE 47833
47777: LD_INT 17
47779: DOUBLE
47780: EQUAL
47781: IFTRUE 47833
47783: LD_INT 18
47785: DOUBLE
47786: EQUAL
47787: IFTRUE 47833
47789: LD_INT 19
47791: DOUBLE
47792: EQUAL
47793: IFTRUE 47833
47795: LD_INT 22
47797: DOUBLE
47798: EQUAL
47799: IFTRUE 47833
47801: LD_INT 20
47803: DOUBLE
47804: EQUAL
47805: IFTRUE 47833
47807: LD_INT 21
47809: DOUBLE
47810: EQUAL
47811: IFTRUE 47833
47813: LD_INT 23
47815: DOUBLE
47816: EQUAL
47817: IFTRUE 47833
47819: LD_INT 24
47821: DOUBLE
47822: EQUAL
47823: IFTRUE 47833
47825: LD_INT 25
47827: DOUBLE
47828: EQUAL
47829: IFTRUE 47833
47831: GO 47889
47833: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47834: LD_ADDR_VAR 0 9
47838: PUSH
47839: LD_VAR 0 35
47843: PUSH
47844: LD_VAR 0 36
47848: PUSH
47849: LD_VAR 0 37
47853: PUSH
47854: LD_VAR 0 38
47858: PUSH
47859: LD_VAR 0 39
47863: PUSH
47864: LD_VAR 0 40
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: PUSH
47877: LD_VAR 0 4
47881: PUSH
47882: LD_INT 1
47884: PLUS
47885: ARRAY
47886: ST_TO_ADDR
47887: GO 48254
47889: LD_INT 6
47891: DOUBLE
47892: EQUAL
47893: IFTRUE 47945
47895: LD_INT 7
47897: DOUBLE
47898: EQUAL
47899: IFTRUE 47945
47901: LD_INT 8
47903: DOUBLE
47904: EQUAL
47905: IFTRUE 47945
47907: LD_INT 13
47909: DOUBLE
47910: EQUAL
47911: IFTRUE 47945
47913: LD_INT 12
47915: DOUBLE
47916: EQUAL
47917: IFTRUE 47945
47919: LD_INT 15
47921: DOUBLE
47922: EQUAL
47923: IFTRUE 47945
47925: LD_INT 11
47927: DOUBLE
47928: EQUAL
47929: IFTRUE 47945
47931: LD_INT 14
47933: DOUBLE
47934: EQUAL
47935: IFTRUE 47945
47937: LD_INT 10
47939: DOUBLE
47940: EQUAL
47941: IFTRUE 47945
47943: GO 48001
47945: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47946: LD_ADDR_VAR 0 9
47950: PUSH
47951: LD_VAR 0 41
47955: PUSH
47956: LD_VAR 0 42
47960: PUSH
47961: LD_VAR 0 43
47965: PUSH
47966: LD_VAR 0 44
47970: PUSH
47971: LD_VAR 0 45
47975: PUSH
47976: LD_VAR 0 46
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: PUSH
47989: LD_VAR 0 4
47993: PUSH
47994: LD_INT 1
47996: PLUS
47997: ARRAY
47998: ST_TO_ADDR
47999: GO 48254
48001: LD_INT 36
48003: DOUBLE
48004: EQUAL
48005: IFTRUE 48009
48007: GO 48065
48009: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48010: LD_ADDR_VAR 0 9
48014: PUSH
48015: LD_VAR 0 47
48019: PUSH
48020: LD_VAR 0 48
48024: PUSH
48025: LD_VAR 0 49
48029: PUSH
48030: LD_VAR 0 50
48034: PUSH
48035: LD_VAR 0 51
48039: PUSH
48040: LD_VAR 0 52
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: PUSH
48053: LD_VAR 0 4
48057: PUSH
48058: LD_INT 1
48060: PLUS
48061: ARRAY
48062: ST_TO_ADDR
48063: GO 48254
48065: LD_INT 4
48067: DOUBLE
48068: EQUAL
48069: IFTRUE 48091
48071: LD_INT 5
48073: DOUBLE
48074: EQUAL
48075: IFTRUE 48091
48077: LD_INT 34
48079: DOUBLE
48080: EQUAL
48081: IFTRUE 48091
48083: LD_INT 37
48085: DOUBLE
48086: EQUAL
48087: IFTRUE 48091
48089: GO 48147
48091: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48092: LD_ADDR_VAR 0 9
48096: PUSH
48097: LD_VAR 0 53
48101: PUSH
48102: LD_VAR 0 54
48106: PUSH
48107: LD_VAR 0 55
48111: PUSH
48112: LD_VAR 0 56
48116: PUSH
48117: LD_VAR 0 57
48121: PUSH
48122: LD_VAR 0 58
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: PUSH
48135: LD_VAR 0 4
48139: PUSH
48140: LD_INT 1
48142: PLUS
48143: ARRAY
48144: ST_TO_ADDR
48145: GO 48254
48147: LD_INT 31
48149: DOUBLE
48150: EQUAL
48151: IFTRUE 48197
48153: LD_INT 32
48155: DOUBLE
48156: EQUAL
48157: IFTRUE 48197
48159: LD_INT 33
48161: DOUBLE
48162: EQUAL
48163: IFTRUE 48197
48165: LD_INT 27
48167: DOUBLE
48168: EQUAL
48169: IFTRUE 48197
48171: LD_INT 26
48173: DOUBLE
48174: EQUAL
48175: IFTRUE 48197
48177: LD_INT 28
48179: DOUBLE
48180: EQUAL
48181: IFTRUE 48197
48183: LD_INT 29
48185: DOUBLE
48186: EQUAL
48187: IFTRUE 48197
48189: LD_INT 30
48191: DOUBLE
48192: EQUAL
48193: IFTRUE 48197
48195: GO 48253
48197: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48198: LD_ADDR_VAR 0 9
48202: PUSH
48203: LD_VAR 0 59
48207: PUSH
48208: LD_VAR 0 60
48212: PUSH
48213: LD_VAR 0 61
48217: PUSH
48218: LD_VAR 0 62
48222: PUSH
48223: LD_VAR 0 63
48227: PUSH
48228: LD_VAR 0 64
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: PUSH
48241: LD_VAR 0 4
48245: PUSH
48246: LD_INT 1
48248: PLUS
48249: ARRAY
48250: ST_TO_ADDR
48251: GO 48254
48253: POP
// temp_list2 = [ ] ;
48254: LD_ADDR_VAR 0 10
48258: PUSH
48259: EMPTY
48260: ST_TO_ADDR
// for i in temp_list do
48261: LD_ADDR_VAR 0 8
48265: PUSH
48266: LD_VAR 0 9
48270: PUSH
48271: FOR_IN
48272: IFFALSE 48324
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48274: LD_ADDR_VAR 0 10
48278: PUSH
48279: LD_VAR 0 10
48283: PUSH
48284: LD_VAR 0 8
48288: PUSH
48289: LD_INT 1
48291: ARRAY
48292: PUSH
48293: LD_VAR 0 2
48297: PLUS
48298: PUSH
48299: LD_VAR 0 8
48303: PUSH
48304: LD_INT 2
48306: ARRAY
48307: PUSH
48308: LD_VAR 0 3
48312: PLUS
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: EMPTY
48319: LIST
48320: ADD
48321: ST_TO_ADDR
48322: GO 48271
48324: POP
48325: POP
// result = temp_list2 ;
48326: LD_ADDR_VAR 0 7
48330: PUSH
48331: LD_VAR 0 10
48335: ST_TO_ADDR
// end ;
48336: LD_VAR 0 7
48340: RET
// export function EnemyInRange ( unit , dist ) ; begin
48341: LD_INT 0
48343: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48344: LD_ADDR_VAR 0 3
48348: PUSH
48349: LD_VAR 0 1
48353: PPUSH
48354: CALL_OW 255
48358: PPUSH
48359: LD_VAR 0 1
48363: PPUSH
48364: CALL_OW 250
48368: PPUSH
48369: LD_VAR 0 1
48373: PPUSH
48374: CALL_OW 251
48378: PPUSH
48379: LD_VAR 0 2
48383: PPUSH
48384: CALL 21714 0 4
48388: PUSH
48389: LD_INT 4
48391: ARRAY
48392: ST_TO_ADDR
// end ;
48393: LD_VAR 0 3
48397: RET
// export function PlayerSeeMe ( unit ) ; begin
48398: LD_INT 0
48400: PPUSH
// result := See ( your_side , unit ) ;
48401: LD_ADDR_VAR 0 2
48405: PUSH
48406: LD_OWVAR 2
48410: PPUSH
48411: LD_VAR 0 1
48415: PPUSH
48416: CALL_OW 292
48420: ST_TO_ADDR
// end ;
48421: LD_VAR 0 2
48425: RET
// export function ReverseDir ( unit ) ; begin
48426: LD_INT 0
48428: PPUSH
// if not unit then
48429: LD_VAR 0 1
48433: NOT
48434: IFFALSE 48438
// exit ;
48436: GO 48461
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48438: LD_ADDR_VAR 0 2
48442: PUSH
48443: LD_VAR 0 1
48447: PPUSH
48448: CALL_OW 254
48452: PUSH
48453: LD_INT 3
48455: PLUS
48456: PUSH
48457: LD_INT 6
48459: MOD
48460: ST_TO_ADDR
// end ;
48461: LD_VAR 0 2
48465: RET
// export function ReverseArray ( array ) ; var i ; begin
48466: LD_INT 0
48468: PPUSH
48469: PPUSH
// if not array then
48470: LD_VAR 0 1
48474: NOT
48475: IFFALSE 48479
// exit ;
48477: GO 48534
// result := [ ] ;
48479: LD_ADDR_VAR 0 2
48483: PUSH
48484: EMPTY
48485: ST_TO_ADDR
// for i := array downto 1 do
48486: LD_ADDR_VAR 0 3
48490: PUSH
48491: DOUBLE
48492: LD_VAR 0 1
48496: INC
48497: ST_TO_ADDR
48498: LD_INT 1
48500: PUSH
48501: FOR_DOWNTO
48502: IFFALSE 48532
// result := Join ( result , array [ i ] ) ;
48504: LD_ADDR_VAR 0 2
48508: PUSH
48509: LD_VAR 0 2
48513: PPUSH
48514: LD_VAR 0 1
48518: PUSH
48519: LD_VAR 0 3
48523: ARRAY
48524: PPUSH
48525: CALL 53190 0 2
48529: ST_TO_ADDR
48530: GO 48501
48532: POP
48533: POP
// end ;
48534: LD_VAR 0 2
48538: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48539: LD_INT 0
48541: PPUSH
48542: PPUSH
48543: PPUSH
48544: PPUSH
48545: PPUSH
48546: PPUSH
// if not unit or not hexes then
48547: LD_VAR 0 1
48551: NOT
48552: PUSH
48553: LD_VAR 0 2
48557: NOT
48558: OR
48559: IFFALSE 48563
// exit ;
48561: GO 48686
// dist := 9999 ;
48563: LD_ADDR_VAR 0 5
48567: PUSH
48568: LD_INT 9999
48570: ST_TO_ADDR
// for i = 1 to hexes do
48571: LD_ADDR_VAR 0 4
48575: PUSH
48576: DOUBLE
48577: LD_INT 1
48579: DEC
48580: ST_TO_ADDR
48581: LD_VAR 0 2
48585: PUSH
48586: FOR_TO
48587: IFFALSE 48674
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48589: LD_ADDR_VAR 0 6
48593: PUSH
48594: LD_VAR 0 1
48598: PPUSH
48599: LD_VAR 0 2
48603: PUSH
48604: LD_VAR 0 4
48608: ARRAY
48609: PUSH
48610: LD_INT 1
48612: ARRAY
48613: PPUSH
48614: LD_VAR 0 2
48618: PUSH
48619: LD_VAR 0 4
48623: ARRAY
48624: PUSH
48625: LD_INT 2
48627: ARRAY
48628: PPUSH
48629: CALL_OW 297
48633: ST_TO_ADDR
// if tdist < dist then
48634: LD_VAR 0 6
48638: PUSH
48639: LD_VAR 0 5
48643: LESS
48644: IFFALSE 48672
// begin hex := hexes [ i ] ;
48646: LD_ADDR_VAR 0 8
48650: PUSH
48651: LD_VAR 0 2
48655: PUSH
48656: LD_VAR 0 4
48660: ARRAY
48661: ST_TO_ADDR
// dist := tdist ;
48662: LD_ADDR_VAR 0 5
48666: PUSH
48667: LD_VAR 0 6
48671: ST_TO_ADDR
// end ; end ;
48672: GO 48586
48674: POP
48675: POP
// result := hex ;
48676: LD_ADDR_VAR 0 3
48680: PUSH
48681: LD_VAR 0 8
48685: ST_TO_ADDR
// end ;
48686: LD_VAR 0 3
48690: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48691: LD_INT 0
48693: PPUSH
48694: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48695: LD_VAR 0 1
48699: NOT
48700: PUSH
48701: LD_VAR 0 1
48705: PUSH
48706: LD_INT 21
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 23
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PPUSH
48730: CALL_OW 69
48734: IN
48735: NOT
48736: OR
48737: IFFALSE 48741
// exit ;
48739: GO 48788
// for i = 1 to 3 do
48741: LD_ADDR_VAR 0 3
48745: PUSH
48746: DOUBLE
48747: LD_INT 1
48749: DEC
48750: ST_TO_ADDR
48751: LD_INT 3
48753: PUSH
48754: FOR_TO
48755: IFFALSE 48786
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48757: LD_VAR 0 1
48761: PPUSH
48762: CALL_OW 250
48766: PPUSH
48767: LD_VAR 0 1
48771: PPUSH
48772: CALL_OW 251
48776: PPUSH
48777: LD_INT 1
48779: PPUSH
48780: CALL_OW 453
48784: GO 48754
48786: POP
48787: POP
// end ;
48788: LD_VAR 0 2
48792: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48793: LD_INT 0
48795: PPUSH
48796: PPUSH
48797: PPUSH
48798: PPUSH
48799: PPUSH
48800: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48801: LD_VAR 0 1
48805: NOT
48806: PUSH
48807: LD_VAR 0 2
48811: NOT
48812: OR
48813: PUSH
48814: LD_VAR 0 1
48818: PPUSH
48819: CALL_OW 314
48823: OR
48824: IFFALSE 48828
// exit ;
48826: GO 49295
// if GetLives ( i ) < 250 then
48828: LD_VAR 0 4
48832: PPUSH
48833: CALL_OW 256
48837: PUSH
48838: LD_INT 250
48840: LESS
48841: IFFALSE 48854
// begin ComAutodestruct ( i ) ;
48843: LD_VAR 0 4
48847: PPUSH
48848: CALL 48691 0 1
// exit ;
48852: GO 49295
// end ; x := GetX ( enemy_unit ) ;
48854: LD_ADDR_VAR 0 7
48858: PUSH
48859: LD_VAR 0 2
48863: PPUSH
48864: CALL_OW 250
48868: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48869: LD_ADDR_VAR 0 8
48873: PUSH
48874: LD_VAR 0 2
48878: PPUSH
48879: CALL_OW 251
48883: ST_TO_ADDR
// if not x or not y then
48884: LD_VAR 0 7
48888: NOT
48889: PUSH
48890: LD_VAR 0 8
48894: NOT
48895: OR
48896: IFFALSE 48900
// exit ;
48898: GO 49295
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48900: LD_ADDR_VAR 0 6
48904: PUSH
48905: LD_VAR 0 7
48909: PPUSH
48910: LD_INT 0
48912: PPUSH
48913: LD_INT 4
48915: PPUSH
48916: CALL_OW 272
48920: PUSH
48921: LD_VAR 0 8
48925: PPUSH
48926: LD_INT 0
48928: PPUSH
48929: LD_INT 4
48931: PPUSH
48932: CALL_OW 273
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_VAR 0 7
48945: PPUSH
48946: LD_INT 1
48948: PPUSH
48949: LD_INT 4
48951: PPUSH
48952: CALL_OW 272
48956: PUSH
48957: LD_VAR 0 8
48961: PPUSH
48962: LD_INT 1
48964: PPUSH
48965: LD_INT 4
48967: PPUSH
48968: CALL_OW 273
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_VAR 0 7
48981: PPUSH
48982: LD_INT 2
48984: PPUSH
48985: LD_INT 4
48987: PPUSH
48988: CALL_OW 272
48992: PUSH
48993: LD_VAR 0 8
48997: PPUSH
48998: LD_INT 2
49000: PPUSH
49001: LD_INT 4
49003: PPUSH
49004: CALL_OW 273
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_VAR 0 7
49017: PPUSH
49018: LD_INT 3
49020: PPUSH
49021: LD_INT 4
49023: PPUSH
49024: CALL_OW 272
49028: PUSH
49029: LD_VAR 0 8
49033: PPUSH
49034: LD_INT 3
49036: PPUSH
49037: LD_INT 4
49039: PPUSH
49040: CALL_OW 273
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_VAR 0 7
49053: PPUSH
49054: LD_INT 4
49056: PPUSH
49057: LD_INT 4
49059: PPUSH
49060: CALL_OW 272
49064: PUSH
49065: LD_VAR 0 8
49069: PPUSH
49070: LD_INT 4
49072: PPUSH
49073: LD_INT 4
49075: PPUSH
49076: CALL_OW 273
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_VAR 0 7
49089: PPUSH
49090: LD_INT 5
49092: PPUSH
49093: LD_INT 4
49095: PPUSH
49096: CALL_OW 272
49100: PUSH
49101: LD_VAR 0 8
49105: PPUSH
49106: LD_INT 5
49108: PPUSH
49109: LD_INT 4
49111: PPUSH
49112: CALL_OW 273
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: ST_TO_ADDR
// for i = tmp downto 1 do
49129: LD_ADDR_VAR 0 4
49133: PUSH
49134: DOUBLE
49135: LD_VAR 0 6
49139: INC
49140: ST_TO_ADDR
49141: LD_INT 1
49143: PUSH
49144: FOR_DOWNTO
49145: IFFALSE 49246
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49147: LD_VAR 0 6
49151: PUSH
49152: LD_VAR 0 4
49156: ARRAY
49157: PUSH
49158: LD_INT 1
49160: ARRAY
49161: PPUSH
49162: LD_VAR 0 6
49166: PUSH
49167: LD_VAR 0 4
49171: ARRAY
49172: PUSH
49173: LD_INT 2
49175: ARRAY
49176: PPUSH
49177: CALL_OW 488
49181: NOT
49182: PUSH
49183: LD_VAR 0 6
49187: PUSH
49188: LD_VAR 0 4
49192: ARRAY
49193: PUSH
49194: LD_INT 1
49196: ARRAY
49197: PPUSH
49198: LD_VAR 0 6
49202: PUSH
49203: LD_VAR 0 4
49207: ARRAY
49208: PUSH
49209: LD_INT 2
49211: ARRAY
49212: PPUSH
49213: CALL_OW 428
49217: PUSH
49218: LD_INT 0
49220: NONEQUAL
49221: OR
49222: IFFALSE 49244
// tmp := Delete ( tmp , i ) ;
49224: LD_ADDR_VAR 0 6
49228: PUSH
49229: LD_VAR 0 6
49233: PPUSH
49234: LD_VAR 0 4
49238: PPUSH
49239: CALL_OW 3
49243: ST_TO_ADDR
49244: GO 49144
49246: POP
49247: POP
// j := GetClosestHex ( unit , tmp ) ;
49248: LD_ADDR_VAR 0 5
49252: PUSH
49253: LD_VAR 0 1
49257: PPUSH
49258: LD_VAR 0 6
49262: PPUSH
49263: CALL 48539 0 2
49267: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49268: LD_VAR 0 1
49272: PPUSH
49273: LD_VAR 0 5
49277: PUSH
49278: LD_INT 1
49280: ARRAY
49281: PPUSH
49282: LD_VAR 0 5
49286: PUSH
49287: LD_INT 2
49289: ARRAY
49290: PPUSH
49291: CALL_OW 111
// end ;
49295: LD_VAR 0 3
49299: RET
// export function PrepareApemanSoldier ( ) ; begin
49300: LD_INT 0
49302: PPUSH
// uc_nation := 0 ;
49303: LD_ADDR_OWVAR 21
49307: PUSH
49308: LD_INT 0
49310: ST_TO_ADDR
// hc_sex := sex_male ;
49311: LD_ADDR_OWVAR 27
49315: PUSH
49316: LD_INT 1
49318: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49319: LD_ADDR_OWVAR 28
49323: PUSH
49324: LD_INT 15
49326: ST_TO_ADDR
// hc_gallery :=  ;
49327: LD_ADDR_OWVAR 33
49331: PUSH
49332: LD_STRING 
49334: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49335: LD_ADDR_OWVAR 31
49339: PUSH
49340: LD_INT 0
49342: PPUSH
49343: LD_INT 3
49345: PPUSH
49346: CALL_OW 12
49350: PUSH
49351: LD_INT 0
49353: PPUSH
49354: LD_INT 3
49356: PPUSH
49357: CALL_OW 12
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: ST_TO_ADDR
// end ;
49374: LD_VAR 0 1
49378: RET
// export function PrepareApemanEngineer ( ) ; begin
49379: LD_INT 0
49381: PPUSH
// uc_nation := 0 ;
49382: LD_ADDR_OWVAR 21
49386: PUSH
49387: LD_INT 0
49389: ST_TO_ADDR
// hc_sex := sex_male ;
49390: LD_ADDR_OWVAR 27
49394: PUSH
49395: LD_INT 1
49397: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49398: LD_ADDR_OWVAR 28
49402: PUSH
49403: LD_INT 16
49405: ST_TO_ADDR
// hc_gallery :=  ;
49406: LD_ADDR_OWVAR 33
49410: PUSH
49411: LD_STRING 
49413: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49414: LD_ADDR_OWVAR 31
49418: PUSH
49419: LD_INT 0
49421: PPUSH
49422: LD_INT 3
49424: PPUSH
49425: CALL_OW 12
49429: PUSH
49430: LD_INT 0
49432: PPUSH
49433: LD_INT 3
49435: PPUSH
49436: CALL_OW 12
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: ST_TO_ADDR
// end ;
49453: LD_VAR 0 1
49457: RET
// export function PrepareApeman ( agressivity ) ; begin
49458: LD_INT 0
49460: PPUSH
// uc_side := 0 ;
49461: LD_ADDR_OWVAR 20
49465: PUSH
49466: LD_INT 0
49468: ST_TO_ADDR
// uc_nation := 0 ;
49469: LD_ADDR_OWVAR 21
49473: PUSH
49474: LD_INT 0
49476: ST_TO_ADDR
// hc_sex := sex_male ;
49477: LD_ADDR_OWVAR 27
49481: PUSH
49482: LD_INT 1
49484: ST_TO_ADDR
// hc_class := class_apeman ;
49485: LD_ADDR_OWVAR 28
49489: PUSH
49490: LD_INT 12
49492: ST_TO_ADDR
// hc_gallery :=  ;
49493: LD_ADDR_OWVAR 33
49497: PUSH
49498: LD_STRING 
49500: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49501: LD_ADDR_OWVAR 35
49505: PUSH
49506: LD_VAR 0 1
49510: NEG
49511: PPUSH
49512: LD_VAR 0 1
49516: PPUSH
49517: CALL_OW 12
49521: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49522: LD_ADDR_OWVAR 31
49526: PUSH
49527: LD_INT 0
49529: PPUSH
49530: LD_INT 3
49532: PPUSH
49533: CALL_OW 12
49537: PUSH
49538: LD_INT 0
49540: PPUSH
49541: LD_INT 3
49543: PPUSH
49544: CALL_OW 12
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: ST_TO_ADDR
// end ;
49561: LD_VAR 0 2
49565: RET
// export function PrepareTiger ( agressivity ) ; begin
49566: LD_INT 0
49568: PPUSH
// uc_side := 0 ;
49569: LD_ADDR_OWVAR 20
49573: PUSH
49574: LD_INT 0
49576: ST_TO_ADDR
// uc_nation := 0 ;
49577: LD_ADDR_OWVAR 21
49581: PUSH
49582: LD_INT 0
49584: ST_TO_ADDR
// hc_class := class_tiger ;
49585: LD_ADDR_OWVAR 28
49589: PUSH
49590: LD_INT 14
49592: ST_TO_ADDR
// hc_gallery :=  ;
49593: LD_ADDR_OWVAR 33
49597: PUSH
49598: LD_STRING 
49600: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49601: LD_ADDR_OWVAR 35
49605: PUSH
49606: LD_VAR 0 1
49610: NEG
49611: PPUSH
49612: LD_VAR 0 1
49616: PPUSH
49617: CALL_OW 12
49621: ST_TO_ADDR
// end ;
49622: LD_VAR 0 2
49626: RET
// export function PrepareEnchidna ( ) ; begin
49627: LD_INT 0
49629: PPUSH
// uc_side := 0 ;
49630: LD_ADDR_OWVAR 20
49634: PUSH
49635: LD_INT 0
49637: ST_TO_ADDR
// uc_nation := 0 ;
49638: LD_ADDR_OWVAR 21
49642: PUSH
49643: LD_INT 0
49645: ST_TO_ADDR
// hc_class := class_baggie ;
49646: LD_ADDR_OWVAR 28
49650: PUSH
49651: LD_INT 13
49653: ST_TO_ADDR
// hc_gallery :=  ;
49654: LD_ADDR_OWVAR 33
49658: PUSH
49659: LD_STRING 
49661: ST_TO_ADDR
// end ;
49662: LD_VAR 0 1
49666: RET
// export function PrepareFrog ( ) ; begin
49667: LD_INT 0
49669: PPUSH
// uc_side := 0 ;
49670: LD_ADDR_OWVAR 20
49674: PUSH
49675: LD_INT 0
49677: ST_TO_ADDR
// uc_nation := 0 ;
49678: LD_ADDR_OWVAR 21
49682: PUSH
49683: LD_INT 0
49685: ST_TO_ADDR
// hc_class := class_frog ;
49686: LD_ADDR_OWVAR 28
49690: PUSH
49691: LD_INT 19
49693: ST_TO_ADDR
// hc_gallery :=  ;
49694: LD_ADDR_OWVAR 33
49698: PUSH
49699: LD_STRING 
49701: ST_TO_ADDR
// end ;
49702: LD_VAR 0 1
49706: RET
// export function PrepareFish ( ) ; begin
49707: LD_INT 0
49709: PPUSH
// uc_side := 0 ;
49710: LD_ADDR_OWVAR 20
49714: PUSH
49715: LD_INT 0
49717: ST_TO_ADDR
// uc_nation := 0 ;
49718: LD_ADDR_OWVAR 21
49722: PUSH
49723: LD_INT 0
49725: ST_TO_ADDR
// hc_class := class_fish ;
49726: LD_ADDR_OWVAR 28
49730: PUSH
49731: LD_INT 20
49733: ST_TO_ADDR
// hc_gallery :=  ;
49734: LD_ADDR_OWVAR 33
49738: PUSH
49739: LD_STRING 
49741: ST_TO_ADDR
// end ;
49742: LD_VAR 0 1
49746: RET
// export function PrepareBird ( ) ; begin
49747: LD_INT 0
49749: PPUSH
// uc_side := 0 ;
49750: LD_ADDR_OWVAR 20
49754: PUSH
49755: LD_INT 0
49757: ST_TO_ADDR
// uc_nation := 0 ;
49758: LD_ADDR_OWVAR 21
49762: PUSH
49763: LD_INT 0
49765: ST_TO_ADDR
// hc_class := class_phororhacos ;
49766: LD_ADDR_OWVAR 28
49770: PUSH
49771: LD_INT 18
49773: ST_TO_ADDR
// hc_gallery :=  ;
49774: LD_ADDR_OWVAR 33
49778: PUSH
49779: LD_STRING 
49781: ST_TO_ADDR
// end ;
49782: LD_VAR 0 1
49786: RET
// export function PrepareHorse ( ) ; begin
49787: LD_INT 0
49789: PPUSH
// uc_side := 0 ;
49790: LD_ADDR_OWVAR 20
49794: PUSH
49795: LD_INT 0
49797: ST_TO_ADDR
// uc_nation := 0 ;
49798: LD_ADDR_OWVAR 21
49802: PUSH
49803: LD_INT 0
49805: ST_TO_ADDR
// hc_class := class_horse ;
49806: LD_ADDR_OWVAR 28
49810: PUSH
49811: LD_INT 21
49813: ST_TO_ADDR
// hc_gallery :=  ;
49814: LD_ADDR_OWVAR 33
49818: PUSH
49819: LD_STRING 
49821: ST_TO_ADDR
// end ;
49822: LD_VAR 0 1
49826: RET
// export function PrepareMastodont ( ) ; begin
49827: LD_INT 0
49829: PPUSH
// uc_side := 0 ;
49830: LD_ADDR_OWVAR 20
49834: PUSH
49835: LD_INT 0
49837: ST_TO_ADDR
// uc_nation := 0 ;
49838: LD_ADDR_OWVAR 21
49842: PUSH
49843: LD_INT 0
49845: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49846: LD_ADDR_OWVAR 37
49850: PUSH
49851: LD_INT 31
49853: ST_TO_ADDR
// vc_control := control_rider ;
49854: LD_ADDR_OWVAR 38
49858: PUSH
49859: LD_INT 4
49861: ST_TO_ADDR
// end ;
49862: LD_VAR 0 1
49866: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49867: LD_INT 0
49869: PPUSH
49870: PPUSH
49871: PPUSH
// uc_side = 0 ;
49872: LD_ADDR_OWVAR 20
49876: PUSH
49877: LD_INT 0
49879: ST_TO_ADDR
// uc_nation = 0 ;
49880: LD_ADDR_OWVAR 21
49884: PUSH
49885: LD_INT 0
49887: ST_TO_ADDR
// InitHc_All ( ) ;
49888: CALL_OW 584
// InitVc ;
49892: CALL_OW 20
// if mastodonts then
49896: LD_VAR 0 6
49900: IFFALSE 49967
// for i = 1 to mastodonts do
49902: LD_ADDR_VAR 0 11
49906: PUSH
49907: DOUBLE
49908: LD_INT 1
49910: DEC
49911: ST_TO_ADDR
49912: LD_VAR 0 6
49916: PUSH
49917: FOR_TO
49918: IFFALSE 49965
// begin vc_chassis := 31 ;
49920: LD_ADDR_OWVAR 37
49924: PUSH
49925: LD_INT 31
49927: ST_TO_ADDR
// vc_control := control_rider ;
49928: LD_ADDR_OWVAR 38
49932: PUSH
49933: LD_INT 4
49935: ST_TO_ADDR
// animal := CreateVehicle ;
49936: LD_ADDR_VAR 0 12
49940: PUSH
49941: CALL_OW 45
49945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49946: LD_VAR 0 12
49950: PPUSH
49951: LD_VAR 0 8
49955: PPUSH
49956: LD_INT 0
49958: PPUSH
49959: CALL 52095 0 3
// end ;
49963: GO 49917
49965: POP
49966: POP
// if horses then
49967: LD_VAR 0 5
49971: IFFALSE 50038
// for i = 1 to horses do
49973: LD_ADDR_VAR 0 11
49977: PUSH
49978: DOUBLE
49979: LD_INT 1
49981: DEC
49982: ST_TO_ADDR
49983: LD_VAR 0 5
49987: PUSH
49988: FOR_TO
49989: IFFALSE 50036
// begin hc_class := 21 ;
49991: LD_ADDR_OWVAR 28
49995: PUSH
49996: LD_INT 21
49998: ST_TO_ADDR
// hc_gallery :=  ;
49999: LD_ADDR_OWVAR 33
50003: PUSH
50004: LD_STRING 
50006: ST_TO_ADDR
// animal := CreateHuman ;
50007: LD_ADDR_VAR 0 12
50011: PUSH
50012: CALL_OW 44
50016: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50017: LD_VAR 0 12
50021: PPUSH
50022: LD_VAR 0 8
50026: PPUSH
50027: LD_INT 0
50029: PPUSH
50030: CALL 52095 0 3
// end ;
50034: GO 49988
50036: POP
50037: POP
// if birds then
50038: LD_VAR 0 1
50042: IFFALSE 50109
// for i = 1 to birds do
50044: LD_ADDR_VAR 0 11
50048: PUSH
50049: DOUBLE
50050: LD_INT 1
50052: DEC
50053: ST_TO_ADDR
50054: LD_VAR 0 1
50058: PUSH
50059: FOR_TO
50060: IFFALSE 50107
// begin hc_class := 18 ;
50062: LD_ADDR_OWVAR 28
50066: PUSH
50067: LD_INT 18
50069: ST_TO_ADDR
// hc_gallery =  ;
50070: LD_ADDR_OWVAR 33
50074: PUSH
50075: LD_STRING 
50077: ST_TO_ADDR
// animal := CreateHuman ;
50078: LD_ADDR_VAR 0 12
50082: PUSH
50083: CALL_OW 44
50087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50088: LD_VAR 0 12
50092: PPUSH
50093: LD_VAR 0 8
50097: PPUSH
50098: LD_INT 0
50100: PPUSH
50101: CALL 52095 0 3
// end ;
50105: GO 50059
50107: POP
50108: POP
// if tigers then
50109: LD_VAR 0 2
50113: IFFALSE 50197
// for i = 1 to tigers do
50115: LD_ADDR_VAR 0 11
50119: PUSH
50120: DOUBLE
50121: LD_INT 1
50123: DEC
50124: ST_TO_ADDR
50125: LD_VAR 0 2
50129: PUSH
50130: FOR_TO
50131: IFFALSE 50195
// begin hc_class = class_tiger ;
50133: LD_ADDR_OWVAR 28
50137: PUSH
50138: LD_INT 14
50140: ST_TO_ADDR
// hc_gallery =  ;
50141: LD_ADDR_OWVAR 33
50145: PUSH
50146: LD_STRING 
50148: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50149: LD_ADDR_OWVAR 35
50153: PUSH
50154: LD_INT 7
50156: NEG
50157: PPUSH
50158: LD_INT 7
50160: PPUSH
50161: CALL_OW 12
50165: ST_TO_ADDR
// animal := CreateHuman ;
50166: LD_ADDR_VAR 0 12
50170: PUSH
50171: CALL_OW 44
50175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50176: LD_VAR 0 12
50180: PPUSH
50181: LD_VAR 0 8
50185: PPUSH
50186: LD_INT 0
50188: PPUSH
50189: CALL 52095 0 3
// end ;
50193: GO 50130
50195: POP
50196: POP
// if apemans then
50197: LD_VAR 0 3
50201: IFFALSE 50324
// for i = 1 to apemans do
50203: LD_ADDR_VAR 0 11
50207: PUSH
50208: DOUBLE
50209: LD_INT 1
50211: DEC
50212: ST_TO_ADDR
50213: LD_VAR 0 3
50217: PUSH
50218: FOR_TO
50219: IFFALSE 50322
// begin hc_class = class_apeman ;
50221: LD_ADDR_OWVAR 28
50225: PUSH
50226: LD_INT 12
50228: ST_TO_ADDR
// hc_gallery =  ;
50229: LD_ADDR_OWVAR 33
50233: PUSH
50234: LD_STRING 
50236: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50237: LD_ADDR_OWVAR 35
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PPUSH
50246: LD_INT 2
50248: PPUSH
50249: CALL_OW 12
50253: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50254: LD_ADDR_OWVAR 31
50258: PUSH
50259: LD_INT 1
50261: PPUSH
50262: LD_INT 3
50264: PPUSH
50265: CALL_OW 12
50269: PUSH
50270: LD_INT 1
50272: PPUSH
50273: LD_INT 3
50275: PPUSH
50276: CALL_OW 12
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: ST_TO_ADDR
// animal := CreateHuman ;
50293: LD_ADDR_VAR 0 12
50297: PUSH
50298: CALL_OW 44
50302: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50303: LD_VAR 0 12
50307: PPUSH
50308: LD_VAR 0 8
50312: PPUSH
50313: LD_INT 0
50315: PPUSH
50316: CALL 52095 0 3
// end ;
50320: GO 50218
50322: POP
50323: POP
// if enchidnas then
50324: LD_VAR 0 4
50328: IFFALSE 50395
// for i = 1 to enchidnas do
50330: LD_ADDR_VAR 0 11
50334: PUSH
50335: DOUBLE
50336: LD_INT 1
50338: DEC
50339: ST_TO_ADDR
50340: LD_VAR 0 4
50344: PUSH
50345: FOR_TO
50346: IFFALSE 50393
// begin hc_class = 13 ;
50348: LD_ADDR_OWVAR 28
50352: PUSH
50353: LD_INT 13
50355: ST_TO_ADDR
// hc_gallery =  ;
50356: LD_ADDR_OWVAR 33
50360: PUSH
50361: LD_STRING 
50363: ST_TO_ADDR
// animal := CreateHuman ;
50364: LD_ADDR_VAR 0 12
50368: PUSH
50369: CALL_OW 44
50373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50374: LD_VAR 0 12
50378: PPUSH
50379: LD_VAR 0 8
50383: PPUSH
50384: LD_INT 0
50386: PPUSH
50387: CALL 52095 0 3
// end ;
50391: GO 50345
50393: POP
50394: POP
// if fishes then
50395: LD_VAR 0 7
50399: IFFALSE 50466
// for i = 1 to fishes do
50401: LD_ADDR_VAR 0 11
50405: PUSH
50406: DOUBLE
50407: LD_INT 1
50409: DEC
50410: ST_TO_ADDR
50411: LD_VAR 0 7
50415: PUSH
50416: FOR_TO
50417: IFFALSE 50464
// begin hc_class = 20 ;
50419: LD_ADDR_OWVAR 28
50423: PUSH
50424: LD_INT 20
50426: ST_TO_ADDR
// hc_gallery =  ;
50427: LD_ADDR_OWVAR 33
50431: PUSH
50432: LD_STRING 
50434: ST_TO_ADDR
// animal := CreateHuman ;
50435: LD_ADDR_VAR 0 12
50439: PUSH
50440: CALL_OW 44
50444: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50445: LD_VAR 0 12
50449: PPUSH
50450: LD_VAR 0 9
50454: PPUSH
50455: LD_INT 0
50457: PPUSH
50458: CALL 52095 0 3
// end ;
50462: GO 50416
50464: POP
50465: POP
// end ;
50466: LD_VAR 0 10
50470: RET
// export function WantHeal ( sci , unit ) ; begin
50471: LD_INT 0
50473: PPUSH
// if GetTaskList ( sci ) > 0 then
50474: LD_VAR 0 1
50478: PPUSH
50479: CALL_OW 437
50483: PUSH
50484: LD_INT 0
50486: GREATER
50487: IFFALSE 50557
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50489: LD_VAR 0 1
50493: PPUSH
50494: CALL_OW 437
50498: PUSH
50499: LD_INT 1
50501: ARRAY
50502: PUSH
50503: LD_INT 1
50505: ARRAY
50506: PUSH
50507: LD_STRING l
50509: EQUAL
50510: PUSH
50511: LD_VAR 0 1
50515: PPUSH
50516: CALL_OW 437
50520: PUSH
50521: LD_INT 1
50523: ARRAY
50524: PUSH
50525: LD_INT 4
50527: ARRAY
50528: PUSH
50529: LD_VAR 0 2
50533: EQUAL
50534: AND
50535: IFFALSE 50547
// result := true else
50537: LD_ADDR_VAR 0 3
50541: PUSH
50542: LD_INT 1
50544: ST_TO_ADDR
50545: GO 50555
// result := false ;
50547: LD_ADDR_VAR 0 3
50551: PUSH
50552: LD_INT 0
50554: ST_TO_ADDR
// end else
50555: GO 50565
// result := false ;
50557: LD_ADDR_VAR 0 3
50561: PUSH
50562: LD_INT 0
50564: ST_TO_ADDR
// end ;
50565: LD_VAR 0 3
50569: RET
// export function HealTarget ( sci ) ; begin
50570: LD_INT 0
50572: PPUSH
// if not sci then
50573: LD_VAR 0 1
50577: NOT
50578: IFFALSE 50582
// exit ;
50580: GO 50647
// result := 0 ;
50582: LD_ADDR_VAR 0 2
50586: PUSH
50587: LD_INT 0
50589: ST_TO_ADDR
// if GetTaskList ( sci ) then
50590: LD_VAR 0 1
50594: PPUSH
50595: CALL_OW 437
50599: IFFALSE 50647
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50601: LD_VAR 0 1
50605: PPUSH
50606: CALL_OW 437
50610: PUSH
50611: LD_INT 1
50613: ARRAY
50614: PUSH
50615: LD_INT 1
50617: ARRAY
50618: PUSH
50619: LD_STRING l
50621: EQUAL
50622: IFFALSE 50647
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50624: LD_ADDR_VAR 0 2
50628: PUSH
50629: LD_VAR 0 1
50633: PPUSH
50634: CALL_OW 437
50638: PUSH
50639: LD_INT 1
50641: ARRAY
50642: PUSH
50643: LD_INT 4
50645: ARRAY
50646: ST_TO_ADDR
// end ;
50647: LD_VAR 0 2
50651: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50652: LD_INT 0
50654: PPUSH
50655: PPUSH
50656: PPUSH
50657: PPUSH
// if not base_units then
50658: LD_VAR 0 1
50662: NOT
50663: IFFALSE 50667
// exit ;
50665: GO 50754
// result := false ;
50667: LD_ADDR_VAR 0 2
50671: PUSH
50672: LD_INT 0
50674: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50675: LD_ADDR_VAR 0 5
50679: PUSH
50680: LD_VAR 0 1
50684: PPUSH
50685: LD_INT 21
50687: PUSH
50688: LD_INT 3
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PPUSH
50695: CALL_OW 72
50699: ST_TO_ADDR
// if not tmp then
50700: LD_VAR 0 5
50704: NOT
50705: IFFALSE 50709
// exit ;
50707: GO 50754
// for i in tmp do
50709: LD_ADDR_VAR 0 3
50713: PUSH
50714: LD_VAR 0 5
50718: PUSH
50719: FOR_IN
50720: IFFALSE 50752
// begin result := EnemyInRange ( i , 22 ) ;
50722: LD_ADDR_VAR 0 2
50726: PUSH
50727: LD_VAR 0 3
50731: PPUSH
50732: LD_INT 22
50734: PPUSH
50735: CALL 48341 0 2
50739: ST_TO_ADDR
// if result then
50740: LD_VAR 0 2
50744: IFFALSE 50750
// exit ;
50746: POP
50747: POP
50748: GO 50754
// end ;
50750: GO 50719
50752: POP
50753: POP
// end ;
50754: LD_VAR 0 2
50758: RET
// export function FilterByTag ( units , tag ) ; begin
50759: LD_INT 0
50761: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50762: LD_ADDR_VAR 0 3
50766: PUSH
50767: LD_VAR 0 1
50771: PPUSH
50772: LD_INT 120
50774: PUSH
50775: LD_VAR 0 2
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PPUSH
50784: CALL_OW 72
50788: ST_TO_ADDR
// end ;
50789: LD_VAR 0 3
50793: RET
// export function IsDriver ( un ) ; begin
50794: LD_INT 0
50796: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50797: LD_ADDR_VAR 0 2
50801: PUSH
50802: LD_VAR 0 1
50806: PUSH
50807: LD_INT 55
50809: PUSH
50810: EMPTY
50811: LIST
50812: PPUSH
50813: CALL_OW 69
50817: IN
50818: ST_TO_ADDR
// end ;
50819: LD_VAR 0 2
50823: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50824: LD_INT 0
50826: PPUSH
50827: PPUSH
// list := [ ] ;
50828: LD_ADDR_VAR 0 5
50832: PUSH
50833: EMPTY
50834: ST_TO_ADDR
// case d of 0 :
50835: LD_VAR 0 3
50839: PUSH
50840: LD_INT 0
50842: DOUBLE
50843: EQUAL
50844: IFTRUE 50848
50846: GO 50981
50848: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50849: LD_ADDR_VAR 0 5
50853: PUSH
50854: LD_VAR 0 1
50858: PUSH
50859: LD_INT 4
50861: MINUS
50862: PUSH
50863: LD_VAR 0 2
50867: PUSH
50868: LD_INT 4
50870: MINUS
50871: PUSH
50872: LD_INT 2
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: LIST
50879: PUSH
50880: LD_VAR 0 1
50884: PUSH
50885: LD_INT 3
50887: MINUS
50888: PUSH
50889: LD_VAR 0 2
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: LIST
50901: PUSH
50902: LD_VAR 0 1
50906: PUSH
50907: LD_INT 4
50909: PLUS
50910: PUSH
50911: LD_VAR 0 2
50915: PUSH
50916: LD_INT 4
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: LIST
50923: PUSH
50924: LD_VAR 0 1
50928: PUSH
50929: LD_INT 3
50931: PLUS
50932: PUSH
50933: LD_VAR 0 2
50937: PUSH
50938: LD_INT 3
50940: PLUS
50941: PUSH
50942: LD_INT 5
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: LIST
50949: PUSH
50950: LD_VAR 0 1
50954: PUSH
50955: LD_VAR 0 2
50959: PUSH
50960: LD_INT 4
50962: PLUS
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: LIST
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: ST_TO_ADDR
// end ; 1 :
50979: GO 51679
50981: LD_INT 1
50983: DOUBLE
50984: EQUAL
50985: IFTRUE 50989
50987: GO 51122
50989: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50990: LD_ADDR_VAR 0 5
50994: PUSH
50995: LD_VAR 0 1
50999: PUSH
51000: LD_VAR 0 2
51004: PUSH
51005: LD_INT 4
51007: MINUS
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: PUSH
51017: LD_VAR 0 1
51021: PUSH
51022: LD_INT 3
51024: MINUS
51025: PUSH
51026: LD_VAR 0 2
51030: PUSH
51031: LD_INT 3
51033: MINUS
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: LIST
51042: PUSH
51043: LD_VAR 0 1
51047: PUSH
51048: LD_INT 4
51050: MINUS
51051: PUSH
51052: LD_VAR 0 2
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: LIST
51064: PUSH
51065: LD_VAR 0 1
51069: PUSH
51070: LD_VAR 0 2
51074: PUSH
51075: LD_INT 3
51077: PLUS
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: LIST
51086: PUSH
51087: LD_VAR 0 1
51091: PUSH
51092: LD_INT 4
51094: PLUS
51095: PUSH
51096: LD_VAR 0 2
51100: PUSH
51101: LD_INT 4
51103: PLUS
51104: PUSH
51105: LD_INT 5
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: ST_TO_ADDR
// end ; 2 :
51120: GO 51679
51122: LD_INT 2
51124: DOUBLE
51125: EQUAL
51126: IFTRUE 51130
51128: GO 51259
51130: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51131: LD_ADDR_VAR 0 5
51135: PUSH
51136: LD_VAR 0 1
51140: PUSH
51141: LD_VAR 0 2
51145: PUSH
51146: LD_INT 3
51148: MINUS
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: LIST
51157: PUSH
51158: LD_VAR 0 1
51162: PUSH
51163: LD_INT 4
51165: PLUS
51166: PUSH
51167: LD_VAR 0 2
51171: PUSH
51172: LD_INT 4
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: PUSH
51180: LD_VAR 0 1
51184: PUSH
51185: LD_VAR 0 2
51189: PUSH
51190: LD_INT 4
51192: PLUS
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: PUSH
51202: LD_VAR 0 1
51206: PUSH
51207: LD_INT 3
51209: MINUS
51210: PUSH
51211: LD_VAR 0 2
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: PUSH
51224: LD_VAR 0 1
51228: PUSH
51229: LD_INT 4
51231: MINUS
51232: PUSH
51233: LD_VAR 0 2
51237: PUSH
51238: LD_INT 4
51240: MINUS
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: LIST
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: ST_TO_ADDR
// end ; 3 :
51257: GO 51679
51259: LD_INT 3
51261: DOUBLE
51262: EQUAL
51263: IFTRUE 51267
51265: GO 51400
51267: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51268: LD_ADDR_VAR 0 5
51272: PUSH
51273: LD_VAR 0 1
51277: PUSH
51278: LD_INT 3
51280: PLUS
51281: PUSH
51282: LD_VAR 0 2
51286: PUSH
51287: LD_INT 4
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: LIST
51294: PUSH
51295: LD_VAR 0 1
51299: PUSH
51300: LD_INT 4
51302: PLUS
51303: PUSH
51304: LD_VAR 0 2
51308: PUSH
51309: LD_INT 4
51311: PLUS
51312: PUSH
51313: LD_INT 5
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: LIST
51320: PUSH
51321: LD_VAR 0 1
51325: PUSH
51326: LD_INT 4
51328: MINUS
51329: PUSH
51330: LD_VAR 0 2
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: LIST
51342: PUSH
51343: LD_VAR 0 1
51347: PUSH
51348: LD_VAR 0 2
51352: PUSH
51353: LD_INT 4
51355: MINUS
51356: PUSH
51357: LD_INT 3
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: PUSH
51365: LD_VAR 0 1
51369: PUSH
51370: LD_INT 3
51372: MINUS
51373: PUSH
51374: LD_VAR 0 2
51378: PUSH
51379: LD_INT 3
51381: MINUS
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: LIST
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: ST_TO_ADDR
// end ; 4 :
51398: GO 51679
51400: LD_INT 4
51402: DOUBLE
51403: EQUAL
51404: IFTRUE 51408
51406: GO 51541
51408: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51409: LD_ADDR_VAR 0 5
51413: PUSH
51414: LD_VAR 0 1
51418: PUSH
51419: LD_VAR 0 2
51423: PUSH
51424: LD_INT 4
51426: PLUS
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: PUSH
51436: LD_VAR 0 1
51440: PUSH
51441: LD_INT 3
51443: PLUS
51444: PUSH
51445: LD_VAR 0 2
51449: PUSH
51450: LD_INT 3
51452: PLUS
51453: PUSH
51454: LD_INT 5
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: LIST
51461: PUSH
51462: LD_VAR 0 1
51466: PUSH
51467: LD_INT 4
51469: PLUS
51470: PUSH
51471: LD_VAR 0 2
51475: PUSH
51476: LD_INT 4
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: PUSH
51484: LD_VAR 0 1
51488: PUSH
51489: LD_VAR 0 2
51493: PUSH
51494: LD_INT 3
51496: MINUS
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: PUSH
51506: LD_VAR 0 1
51510: PUSH
51511: LD_INT 4
51513: MINUS
51514: PUSH
51515: LD_VAR 0 2
51519: PUSH
51520: LD_INT 4
51522: MINUS
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: LIST
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: ST_TO_ADDR
// end ; 5 :
51539: GO 51679
51541: LD_INT 5
51543: DOUBLE
51544: EQUAL
51545: IFTRUE 51549
51547: GO 51678
51549: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51550: LD_ADDR_VAR 0 5
51554: PUSH
51555: LD_VAR 0 1
51559: PUSH
51560: LD_INT 4
51562: MINUS
51563: PUSH
51564: LD_VAR 0 2
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: PUSH
51577: LD_VAR 0 1
51581: PUSH
51582: LD_VAR 0 2
51586: PUSH
51587: LD_INT 4
51589: MINUS
51590: PUSH
51591: LD_INT 3
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: LIST
51598: PUSH
51599: LD_VAR 0 1
51603: PUSH
51604: LD_INT 4
51606: PLUS
51607: PUSH
51608: LD_VAR 0 2
51612: PUSH
51613: LD_INT 4
51615: PLUS
51616: PUSH
51617: LD_INT 5
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: LIST
51624: PUSH
51625: LD_VAR 0 1
51629: PUSH
51630: LD_INT 3
51632: PLUS
51633: PUSH
51634: LD_VAR 0 2
51638: PUSH
51639: LD_INT 4
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: LIST
51646: PUSH
51647: LD_VAR 0 1
51651: PUSH
51652: LD_VAR 0 2
51656: PUSH
51657: LD_INT 3
51659: PLUS
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: LIST
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: ST_TO_ADDR
// end ; end ;
51676: GO 51679
51678: POP
// result := list ;
51679: LD_ADDR_VAR 0 4
51683: PUSH
51684: LD_VAR 0 5
51688: ST_TO_ADDR
// end ;
51689: LD_VAR 0 4
51693: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51694: LD_INT 0
51696: PPUSH
51697: PPUSH
51698: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51699: LD_VAR 0 1
51703: NOT
51704: PUSH
51705: LD_VAR 0 2
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: LD_INT 3
51718: PUSH
51719: LD_INT 4
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: IN
51728: NOT
51729: OR
51730: IFFALSE 51734
// exit ;
51732: GO 51817
// tmp := [ ] ;
51734: LD_ADDR_VAR 0 5
51738: PUSH
51739: EMPTY
51740: ST_TO_ADDR
// for i in units do
51741: LD_ADDR_VAR 0 4
51745: PUSH
51746: LD_VAR 0 1
51750: PUSH
51751: FOR_IN
51752: IFFALSE 51786
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51754: LD_ADDR_VAR 0 5
51758: PUSH
51759: LD_VAR 0 5
51763: PPUSH
51764: LD_VAR 0 4
51768: PPUSH
51769: LD_VAR 0 2
51773: PPUSH
51774: CALL_OW 259
51778: PPUSH
51779: CALL 53190 0 2
51783: ST_TO_ADDR
51784: GO 51751
51786: POP
51787: POP
// if not tmp then
51788: LD_VAR 0 5
51792: NOT
51793: IFFALSE 51797
// exit ;
51795: GO 51817
// result := SortListByListDesc ( units , tmp ) ;
51797: LD_ADDR_VAR 0 3
51801: PUSH
51802: LD_VAR 0 1
51806: PPUSH
51807: LD_VAR 0 5
51811: PPUSH
51812: CALL_OW 77
51816: ST_TO_ADDR
// end ;
51817: LD_VAR 0 3
51821: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51822: LD_INT 0
51824: PPUSH
51825: PPUSH
51826: PPUSH
// result := false ;
51827: LD_ADDR_VAR 0 3
51831: PUSH
51832: LD_INT 0
51834: ST_TO_ADDR
// if not building then
51835: LD_VAR 0 2
51839: NOT
51840: IFFALSE 51844
// exit ;
51842: GO 51982
// x := GetX ( building ) ;
51844: LD_ADDR_VAR 0 4
51848: PUSH
51849: LD_VAR 0 2
51853: PPUSH
51854: CALL_OW 250
51858: ST_TO_ADDR
// y := GetY ( building ) ;
51859: LD_ADDR_VAR 0 5
51863: PUSH
51864: LD_VAR 0 2
51868: PPUSH
51869: CALL_OW 251
51873: ST_TO_ADDR
// if not x or not y then
51874: LD_VAR 0 4
51878: NOT
51879: PUSH
51880: LD_VAR 0 5
51884: NOT
51885: OR
51886: IFFALSE 51890
// exit ;
51888: GO 51982
// if GetTaskList ( unit ) then
51890: LD_VAR 0 1
51894: PPUSH
51895: CALL_OW 437
51899: IFFALSE 51982
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51901: LD_STRING e
51903: PUSH
51904: LD_VAR 0 1
51908: PPUSH
51909: CALL_OW 437
51913: PUSH
51914: LD_INT 1
51916: ARRAY
51917: PUSH
51918: LD_INT 1
51920: ARRAY
51921: EQUAL
51922: PUSH
51923: LD_VAR 0 4
51927: PUSH
51928: LD_VAR 0 1
51932: PPUSH
51933: CALL_OW 437
51937: PUSH
51938: LD_INT 1
51940: ARRAY
51941: PUSH
51942: LD_INT 2
51944: ARRAY
51945: EQUAL
51946: AND
51947: PUSH
51948: LD_VAR 0 5
51952: PUSH
51953: LD_VAR 0 1
51957: PPUSH
51958: CALL_OW 437
51962: PUSH
51963: LD_INT 1
51965: ARRAY
51966: PUSH
51967: LD_INT 3
51969: ARRAY
51970: EQUAL
51971: AND
51972: IFFALSE 51982
// result := true end ;
51974: LD_ADDR_VAR 0 3
51978: PUSH
51979: LD_INT 1
51981: ST_TO_ADDR
// end ;
51982: LD_VAR 0 3
51986: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51987: LD_INT 0
51989: PPUSH
// result := false ;
51990: LD_ADDR_VAR 0 4
51994: PUSH
51995: LD_INT 0
51997: ST_TO_ADDR
// if GetTaskList ( unit ) then
51998: LD_VAR 0 1
52002: PPUSH
52003: CALL_OW 437
52007: IFFALSE 52090
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52009: LD_STRING M
52011: PUSH
52012: LD_VAR 0 1
52016: PPUSH
52017: CALL_OW 437
52021: PUSH
52022: LD_INT 1
52024: ARRAY
52025: PUSH
52026: LD_INT 1
52028: ARRAY
52029: EQUAL
52030: PUSH
52031: LD_VAR 0 2
52035: PUSH
52036: LD_VAR 0 1
52040: PPUSH
52041: CALL_OW 437
52045: PUSH
52046: LD_INT 1
52048: ARRAY
52049: PUSH
52050: LD_INT 2
52052: ARRAY
52053: EQUAL
52054: AND
52055: PUSH
52056: LD_VAR 0 3
52060: PUSH
52061: LD_VAR 0 1
52065: PPUSH
52066: CALL_OW 437
52070: PUSH
52071: LD_INT 1
52073: ARRAY
52074: PUSH
52075: LD_INT 3
52077: ARRAY
52078: EQUAL
52079: AND
52080: IFFALSE 52090
// result := true ;
52082: LD_ADDR_VAR 0 4
52086: PUSH
52087: LD_INT 1
52089: ST_TO_ADDR
// end ; end ;
52090: LD_VAR 0 4
52094: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52095: LD_INT 0
52097: PPUSH
52098: PPUSH
52099: PPUSH
52100: PPUSH
// if not unit or not area then
52101: LD_VAR 0 1
52105: NOT
52106: PUSH
52107: LD_VAR 0 2
52111: NOT
52112: OR
52113: IFFALSE 52117
// exit ;
52115: GO 52293
// tmp := AreaToList ( area , i ) ;
52117: LD_ADDR_VAR 0 6
52121: PUSH
52122: LD_VAR 0 2
52126: PPUSH
52127: LD_VAR 0 5
52131: PPUSH
52132: CALL_OW 517
52136: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52137: LD_ADDR_VAR 0 5
52141: PUSH
52142: DOUBLE
52143: LD_INT 1
52145: DEC
52146: ST_TO_ADDR
52147: LD_VAR 0 6
52151: PUSH
52152: LD_INT 1
52154: ARRAY
52155: PUSH
52156: FOR_TO
52157: IFFALSE 52291
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52159: LD_ADDR_VAR 0 7
52163: PUSH
52164: LD_VAR 0 6
52168: PUSH
52169: LD_INT 1
52171: ARRAY
52172: PUSH
52173: LD_VAR 0 5
52177: ARRAY
52178: PUSH
52179: LD_VAR 0 6
52183: PUSH
52184: LD_INT 2
52186: ARRAY
52187: PUSH
52188: LD_VAR 0 5
52192: ARRAY
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52198: LD_INT 92
52200: PUSH
52201: LD_VAR 0 7
52205: PUSH
52206: LD_INT 1
52208: ARRAY
52209: PUSH
52210: LD_VAR 0 7
52214: PUSH
52215: LD_INT 2
52217: ARRAY
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: PPUSH
52228: CALL_OW 69
52232: PUSH
52233: LD_INT 0
52235: EQUAL
52236: IFFALSE 52289
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52238: LD_VAR 0 1
52242: PPUSH
52243: LD_VAR 0 7
52247: PUSH
52248: LD_INT 1
52250: ARRAY
52251: PPUSH
52252: LD_VAR 0 7
52256: PUSH
52257: LD_INT 2
52259: ARRAY
52260: PPUSH
52261: LD_VAR 0 3
52265: PPUSH
52266: CALL_OW 48
// result := IsPlaced ( unit ) ;
52270: LD_ADDR_VAR 0 4
52274: PUSH
52275: LD_VAR 0 1
52279: PPUSH
52280: CALL_OW 305
52284: ST_TO_ADDR
// exit ;
52285: POP
52286: POP
52287: GO 52293
// end ; end ;
52289: GO 52156
52291: POP
52292: POP
// end ;
52293: LD_VAR 0 4
52297: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52298: LD_INT 0
52300: PPUSH
52301: PPUSH
52302: PPUSH
// if not side or side > 8 then
52303: LD_VAR 0 1
52307: NOT
52308: PUSH
52309: LD_VAR 0 1
52313: PUSH
52314: LD_INT 8
52316: GREATER
52317: OR
52318: IFFALSE 52322
// exit ;
52320: GO 52509
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52322: LD_ADDR_VAR 0 4
52326: PUSH
52327: LD_INT 22
52329: PUSH
52330: LD_VAR 0 1
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 21
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PPUSH
52353: CALL_OW 69
52357: ST_TO_ADDR
// if not tmp then
52358: LD_VAR 0 4
52362: NOT
52363: IFFALSE 52367
// exit ;
52365: GO 52509
// enable_addtolog := true ;
52367: LD_ADDR_OWVAR 81
52371: PUSH
52372: LD_INT 1
52374: ST_TO_ADDR
// AddToLog ( [ ) ;
52375: LD_STRING [
52377: PPUSH
52378: CALL_OW 561
// for i in tmp do
52382: LD_ADDR_VAR 0 3
52386: PUSH
52387: LD_VAR 0 4
52391: PUSH
52392: FOR_IN
52393: IFFALSE 52500
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52395: LD_STRING [
52397: PUSH
52398: LD_VAR 0 3
52402: PPUSH
52403: CALL_OW 266
52407: STR
52408: PUSH
52409: LD_STRING , 
52411: STR
52412: PUSH
52413: LD_VAR 0 3
52417: PPUSH
52418: CALL_OW 250
52422: STR
52423: PUSH
52424: LD_STRING , 
52426: STR
52427: PUSH
52428: LD_VAR 0 3
52432: PPUSH
52433: CALL_OW 251
52437: STR
52438: PUSH
52439: LD_STRING , 
52441: STR
52442: PUSH
52443: LD_VAR 0 3
52447: PPUSH
52448: CALL_OW 254
52452: STR
52453: PUSH
52454: LD_STRING , 
52456: STR
52457: PUSH
52458: LD_VAR 0 3
52462: PPUSH
52463: LD_INT 1
52465: PPUSH
52466: CALL_OW 268
52470: STR
52471: PUSH
52472: LD_STRING , 
52474: STR
52475: PUSH
52476: LD_VAR 0 3
52480: PPUSH
52481: LD_INT 2
52483: PPUSH
52484: CALL_OW 268
52488: STR
52489: PUSH
52490: LD_STRING ],
52492: STR
52493: PPUSH
52494: CALL_OW 561
// end ;
52498: GO 52392
52500: POP
52501: POP
// AddToLog ( ]; ) ;
52502: LD_STRING ];
52504: PPUSH
52505: CALL_OW 561
// end ;
52509: LD_VAR 0 2
52513: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52514: LD_INT 0
52516: PPUSH
52517: PPUSH
52518: PPUSH
52519: PPUSH
52520: PPUSH
// if not area or not rate or not max then
52521: LD_VAR 0 1
52525: NOT
52526: PUSH
52527: LD_VAR 0 2
52531: NOT
52532: OR
52533: PUSH
52534: LD_VAR 0 4
52538: NOT
52539: OR
52540: IFFALSE 52544
// exit ;
52542: GO 52733
// while 1 do
52544: LD_INT 1
52546: IFFALSE 52733
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52548: LD_ADDR_VAR 0 9
52552: PUSH
52553: LD_VAR 0 1
52557: PPUSH
52558: LD_INT 1
52560: PPUSH
52561: CALL_OW 287
52565: PUSH
52566: LD_INT 10
52568: MUL
52569: ST_TO_ADDR
// r := rate / 10 ;
52570: LD_ADDR_VAR 0 7
52574: PUSH
52575: LD_VAR 0 2
52579: PUSH
52580: LD_INT 10
52582: DIVREAL
52583: ST_TO_ADDR
// time := 1 1$00 ;
52584: LD_ADDR_VAR 0 8
52588: PUSH
52589: LD_INT 2100
52591: ST_TO_ADDR
// if amount < min then
52592: LD_VAR 0 9
52596: PUSH
52597: LD_VAR 0 3
52601: LESS
52602: IFFALSE 52620
// r := r * 2 else
52604: LD_ADDR_VAR 0 7
52608: PUSH
52609: LD_VAR 0 7
52613: PUSH
52614: LD_INT 2
52616: MUL
52617: ST_TO_ADDR
52618: GO 52646
// if amount > max then
52620: LD_VAR 0 9
52624: PUSH
52625: LD_VAR 0 4
52629: GREATER
52630: IFFALSE 52646
// r := r / 2 ;
52632: LD_ADDR_VAR 0 7
52636: PUSH
52637: LD_VAR 0 7
52641: PUSH
52642: LD_INT 2
52644: DIVREAL
52645: ST_TO_ADDR
// time := time / r ;
52646: LD_ADDR_VAR 0 8
52650: PUSH
52651: LD_VAR 0 8
52655: PUSH
52656: LD_VAR 0 7
52660: DIVREAL
52661: ST_TO_ADDR
// if time < 0 then
52662: LD_VAR 0 8
52666: PUSH
52667: LD_INT 0
52669: LESS
52670: IFFALSE 52687
// time := time * - 1 ;
52672: LD_ADDR_VAR 0 8
52676: PUSH
52677: LD_VAR 0 8
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: MUL
52686: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52687: LD_VAR 0 8
52691: PUSH
52692: LD_INT 35
52694: PPUSH
52695: LD_INT 875
52697: PPUSH
52698: CALL_OW 12
52702: PLUS
52703: PPUSH
52704: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52708: LD_INT 1
52710: PPUSH
52711: LD_INT 5
52713: PPUSH
52714: CALL_OW 12
52718: PPUSH
52719: LD_VAR 0 1
52723: PPUSH
52724: LD_INT 1
52726: PPUSH
52727: CALL_OW 55
// end ;
52731: GO 52544
// end ;
52733: LD_VAR 0 5
52737: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52738: LD_INT 0
52740: PPUSH
52741: PPUSH
52742: PPUSH
52743: PPUSH
52744: PPUSH
52745: PPUSH
52746: PPUSH
52747: PPUSH
// if not turrets or not factories then
52748: LD_VAR 0 1
52752: NOT
52753: PUSH
52754: LD_VAR 0 2
52758: NOT
52759: OR
52760: IFFALSE 52764
// exit ;
52762: GO 53071
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52764: LD_ADDR_VAR 0 10
52768: PUSH
52769: LD_INT 5
52771: PUSH
52772: LD_INT 6
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 4
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: LD_INT 5
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 24
52806: PUSH
52807: LD_INT 25
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 23
52816: PUSH
52817: LD_INT 27
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 42
52830: PUSH
52831: LD_INT 43
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 44
52840: PUSH
52841: LD_INT 46
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 45
52850: PUSH
52851: LD_INT 47
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: LIST
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: LIST
52867: ST_TO_ADDR
// result := [ ] ;
52868: LD_ADDR_VAR 0 3
52872: PUSH
52873: EMPTY
52874: ST_TO_ADDR
// for i in turrets do
52875: LD_ADDR_VAR 0 4
52879: PUSH
52880: LD_VAR 0 1
52884: PUSH
52885: FOR_IN
52886: IFFALSE 53069
// begin nat := GetNation ( i ) ;
52888: LD_ADDR_VAR 0 7
52892: PUSH
52893: LD_VAR 0 4
52897: PPUSH
52898: CALL_OW 248
52902: ST_TO_ADDR
// weapon := 0 ;
52903: LD_ADDR_VAR 0 8
52907: PUSH
52908: LD_INT 0
52910: ST_TO_ADDR
// if not nat then
52911: LD_VAR 0 7
52915: NOT
52916: IFFALSE 52920
// continue ;
52918: GO 52885
// for j in list [ nat ] do
52920: LD_ADDR_VAR 0 5
52924: PUSH
52925: LD_VAR 0 10
52929: PUSH
52930: LD_VAR 0 7
52934: ARRAY
52935: PUSH
52936: FOR_IN
52937: IFFALSE 52978
// if GetBWeapon ( i ) = j [ 1 ] then
52939: LD_VAR 0 4
52943: PPUSH
52944: CALL_OW 269
52948: PUSH
52949: LD_VAR 0 5
52953: PUSH
52954: LD_INT 1
52956: ARRAY
52957: EQUAL
52958: IFFALSE 52976
// begin weapon := j [ 2 ] ;
52960: LD_ADDR_VAR 0 8
52964: PUSH
52965: LD_VAR 0 5
52969: PUSH
52970: LD_INT 2
52972: ARRAY
52973: ST_TO_ADDR
// break ;
52974: GO 52978
// end ;
52976: GO 52936
52978: POP
52979: POP
// if not weapon then
52980: LD_VAR 0 8
52984: NOT
52985: IFFALSE 52989
// continue ;
52987: GO 52885
// for k in factories do
52989: LD_ADDR_VAR 0 6
52993: PUSH
52994: LD_VAR 0 2
52998: PUSH
52999: FOR_IN
53000: IFFALSE 53065
// begin weapons := AvailableWeaponList ( k ) ;
53002: LD_ADDR_VAR 0 9
53006: PUSH
53007: LD_VAR 0 6
53011: PPUSH
53012: CALL_OW 478
53016: ST_TO_ADDR
// if not weapons then
53017: LD_VAR 0 9
53021: NOT
53022: IFFALSE 53026
// continue ;
53024: GO 52999
// if weapon in weapons then
53026: LD_VAR 0 8
53030: PUSH
53031: LD_VAR 0 9
53035: IN
53036: IFFALSE 53063
// begin result := [ i , weapon ] ;
53038: LD_ADDR_VAR 0 3
53042: PUSH
53043: LD_VAR 0 4
53047: PUSH
53048: LD_VAR 0 8
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: ST_TO_ADDR
// exit ;
53057: POP
53058: POP
53059: POP
53060: POP
53061: GO 53071
// end ; end ;
53063: GO 52999
53065: POP
53066: POP
// end ;
53067: GO 52885
53069: POP
53070: POP
// end ;
53071: LD_VAR 0 3
53075: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53076: LD_INT 0
53078: PPUSH
// if not side or side > 8 then
53079: LD_VAR 0 3
53083: NOT
53084: PUSH
53085: LD_VAR 0 3
53089: PUSH
53090: LD_INT 8
53092: GREATER
53093: OR
53094: IFFALSE 53098
// exit ;
53096: GO 53157
// if not range then
53098: LD_VAR 0 4
53102: NOT
53103: IFFALSE 53114
// range := - 12 ;
53105: LD_ADDR_VAR 0 4
53109: PUSH
53110: LD_INT 12
53112: NEG
53113: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53114: LD_VAR 0 1
53118: PPUSH
53119: LD_VAR 0 2
53123: PPUSH
53124: LD_VAR 0 3
53128: PPUSH
53129: LD_VAR 0 4
53133: PPUSH
53134: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53138: LD_VAR 0 1
53142: PPUSH
53143: LD_VAR 0 2
53147: PPUSH
53148: LD_VAR 0 3
53152: PPUSH
53153: CALL_OW 331
// end ;
53157: LD_VAR 0 5
53161: RET
// export function Video ( mode ) ; begin
53162: LD_INT 0
53164: PPUSH
// ingame_video = mode ;
53165: LD_ADDR_OWVAR 52
53169: PUSH
53170: LD_VAR 0 1
53174: ST_TO_ADDR
// interface_hidden = mode ;
53175: LD_ADDR_OWVAR 54
53179: PUSH
53180: LD_VAR 0 1
53184: ST_TO_ADDR
// end ;
53185: LD_VAR 0 2
53189: RET
// export function Join ( array , element ) ; begin
53190: LD_INT 0
53192: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53193: LD_ADDR_VAR 0 3
53197: PUSH
53198: LD_VAR 0 1
53202: PPUSH
53203: LD_VAR 0 1
53207: PUSH
53208: LD_INT 1
53210: PLUS
53211: PPUSH
53212: LD_VAR 0 2
53216: PPUSH
53217: CALL_OW 1
53221: ST_TO_ADDR
// end ;
53222: LD_VAR 0 3
53226: RET
// export function JoinUnion ( array , element ) ; begin
53227: LD_INT 0
53229: PPUSH
// result := array union element ;
53230: LD_ADDR_VAR 0 3
53234: PUSH
53235: LD_VAR 0 1
53239: PUSH
53240: LD_VAR 0 2
53244: UNION
53245: ST_TO_ADDR
// end ;
53246: LD_VAR 0 3
53250: RET
// export function GetBehemoths ( side ) ; begin
53251: LD_INT 0
53253: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53254: LD_ADDR_VAR 0 2
53258: PUSH
53259: LD_INT 22
53261: PUSH
53262: LD_VAR 0 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 31
53273: PUSH
53274: LD_INT 25
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PPUSH
53285: CALL_OW 69
53289: ST_TO_ADDR
// end ;
53290: LD_VAR 0 2
53294: RET
// export function Shuffle ( array ) ; var i , index ; begin
53295: LD_INT 0
53297: PPUSH
53298: PPUSH
53299: PPUSH
// result := [ ] ;
53300: LD_ADDR_VAR 0 2
53304: PUSH
53305: EMPTY
53306: ST_TO_ADDR
// if not array then
53307: LD_VAR 0 1
53311: NOT
53312: IFFALSE 53316
// exit ;
53314: GO 53415
// Randomize ;
53316: CALL_OW 10
// for i = array downto 1 do
53320: LD_ADDR_VAR 0 3
53324: PUSH
53325: DOUBLE
53326: LD_VAR 0 1
53330: INC
53331: ST_TO_ADDR
53332: LD_INT 1
53334: PUSH
53335: FOR_DOWNTO
53336: IFFALSE 53413
// begin index := rand ( 1 , array ) ;
53338: LD_ADDR_VAR 0 4
53342: PUSH
53343: LD_INT 1
53345: PPUSH
53346: LD_VAR 0 1
53350: PPUSH
53351: CALL_OW 12
53355: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53356: LD_ADDR_VAR 0 2
53360: PUSH
53361: LD_VAR 0 2
53365: PPUSH
53366: LD_VAR 0 2
53370: PUSH
53371: LD_INT 1
53373: PLUS
53374: PPUSH
53375: LD_VAR 0 1
53379: PUSH
53380: LD_VAR 0 4
53384: ARRAY
53385: PPUSH
53386: CALL_OW 2
53390: ST_TO_ADDR
// array := Delete ( array , index ) ;
53391: LD_ADDR_VAR 0 1
53395: PUSH
53396: LD_VAR 0 1
53400: PPUSH
53401: LD_VAR 0 4
53405: PPUSH
53406: CALL_OW 3
53410: ST_TO_ADDR
// end ;
53411: GO 53335
53413: POP
53414: POP
// end ;
53415: LD_VAR 0 2
53419: RET
// export function GetBaseMaterials ( base ) ; begin
53420: LD_INT 0
53422: PPUSH
// result := [ 0 , 0 , 0 ] ;
53423: LD_ADDR_VAR 0 2
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: LIST
53441: ST_TO_ADDR
// if not base then
53442: LD_VAR 0 1
53446: NOT
53447: IFFALSE 53451
// exit ;
53449: GO 53500
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53451: LD_ADDR_VAR 0 2
53455: PUSH
53456: LD_VAR 0 1
53460: PPUSH
53461: LD_INT 1
53463: PPUSH
53464: CALL_OW 275
53468: PUSH
53469: LD_VAR 0 1
53473: PPUSH
53474: LD_INT 2
53476: PPUSH
53477: CALL_OW 275
53481: PUSH
53482: LD_VAR 0 1
53486: PPUSH
53487: LD_INT 3
53489: PPUSH
53490: CALL_OW 275
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: LIST
53499: ST_TO_ADDR
// end ;
53500: LD_VAR 0 2
53504: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53505: LD_INT 0
53507: PPUSH
53508: PPUSH
// result := array ;
53509: LD_ADDR_VAR 0 3
53513: PUSH
53514: LD_VAR 0 1
53518: ST_TO_ADDR
// if size >= result then
53519: LD_VAR 0 2
53523: PUSH
53524: LD_VAR 0 3
53528: GREATEREQUAL
53529: IFFALSE 53533
// exit ;
53531: GO 53583
// if size then
53533: LD_VAR 0 2
53537: IFFALSE 53583
// for i := array downto size do
53539: LD_ADDR_VAR 0 4
53543: PUSH
53544: DOUBLE
53545: LD_VAR 0 1
53549: INC
53550: ST_TO_ADDR
53551: LD_VAR 0 2
53555: PUSH
53556: FOR_DOWNTO
53557: IFFALSE 53581
// result := Delete ( result , result ) ;
53559: LD_ADDR_VAR 0 3
53563: PUSH
53564: LD_VAR 0 3
53568: PPUSH
53569: LD_VAR 0 3
53573: PPUSH
53574: CALL_OW 3
53578: ST_TO_ADDR
53579: GO 53556
53581: POP
53582: POP
// end ;
53583: LD_VAR 0 3
53587: RET
// export function ComExit ( unit ) ; var tmp ; begin
53588: LD_INT 0
53590: PPUSH
53591: PPUSH
// if not IsInUnit ( unit ) then
53592: LD_VAR 0 1
53596: PPUSH
53597: CALL_OW 310
53601: NOT
53602: IFFALSE 53606
// exit ;
53604: GO 53666
// tmp := IsInUnit ( unit ) ;
53606: LD_ADDR_VAR 0 3
53610: PUSH
53611: LD_VAR 0 1
53615: PPUSH
53616: CALL_OW 310
53620: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53621: LD_VAR 0 3
53625: PPUSH
53626: CALL_OW 247
53630: PUSH
53631: LD_INT 2
53633: EQUAL
53634: IFFALSE 53647
// ComExitVehicle ( unit ) else
53636: LD_VAR 0 1
53640: PPUSH
53641: CALL_OW 121
53645: GO 53656
// ComExitBuilding ( unit ) ;
53647: LD_VAR 0 1
53651: PPUSH
53652: CALL_OW 122
// result := tmp ;
53656: LD_ADDR_VAR 0 2
53660: PUSH
53661: LD_VAR 0 3
53665: ST_TO_ADDR
// end ;
53666: LD_VAR 0 2
53670: RET
// export function ComExitAll ( units ) ; var i ; begin
53671: LD_INT 0
53673: PPUSH
53674: PPUSH
// if not units then
53675: LD_VAR 0 1
53679: NOT
53680: IFFALSE 53684
// exit ;
53682: GO 53710
// for i in units do
53684: LD_ADDR_VAR 0 3
53688: PUSH
53689: LD_VAR 0 1
53693: PUSH
53694: FOR_IN
53695: IFFALSE 53708
// ComExit ( i ) ;
53697: LD_VAR 0 3
53701: PPUSH
53702: CALL 53588 0 1
53706: GO 53694
53708: POP
53709: POP
// end ;
53710: LD_VAR 0 2
53714: RET
// export function ResetHc ; begin
53715: LD_INT 0
53717: PPUSH
// InitHc ;
53718: CALL_OW 19
// hc_importance := 0 ;
53722: LD_ADDR_OWVAR 32
53726: PUSH
53727: LD_INT 0
53729: ST_TO_ADDR
// end ;
53730: LD_VAR 0 1
53734: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53735: LD_INT 0
53737: PPUSH
53738: PPUSH
53739: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53740: LD_ADDR_VAR 0 6
53744: PUSH
53745: LD_VAR 0 1
53749: PUSH
53750: LD_VAR 0 3
53754: PLUS
53755: PUSH
53756: LD_INT 2
53758: DIV
53759: ST_TO_ADDR
// if _x < 0 then
53760: LD_VAR 0 6
53764: PUSH
53765: LD_INT 0
53767: LESS
53768: IFFALSE 53785
// _x := _x * - 1 ;
53770: LD_ADDR_VAR 0 6
53774: PUSH
53775: LD_VAR 0 6
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: MUL
53784: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53785: LD_ADDR_VAR 0 7
53789: PUSH
53790: LD_VAR 0 2
53794: PUSH
53795: LD_VAR 0 4
53799: PLUS
53800: PUSH
53801: LD_INT 2
53803: DIV
53804: ST_TO_ADDR
// if _y < 0 then
53805: LD_VAR 0 7
53809: PUSH
53810: LD_INT 0
53812: LESS
53813: IFFALSE 53830
// _y := _y * - 1 ;
53815: LD_ADDR_VAR 0 7
53819: PUSH
53820: LD_VAR 0 7
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: MUL
53829: ST_TO_ADDR
// result := [ _x , _y ] ;
53830: LD_ADDR_VAR 0 5
53834: PUSH
53835: LD_VAR 0 6
53839: PUSH
53840: LD_VAR 0 7
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: ST_TO_ADDR
// end ;
53849: LD_VAR 0 5
53853: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53854: LD_INT 0
53856: PPUSH
53857: PPUSH
53858: PPUSH
53859: PPUSH
// task := GetTaskList ( unit ) ;
53860: LD_ADDR_VAR 0 7
53864: PUSH
53865: LD_VAR 0 1
53869: PPUSH
53870: CALL_OW 437
53874: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53875: LD_VAR 0 7
53879: NOT
53880: PUSH
53881: LD_VAR 0 1
53885: PPUSH
53886: LD_VAR 0 2
53890: PPUSH
53891: CALL_OW 308
53895: NOT
53896: AND
53897: IFFALSE 53901
// exit ;
53899: GO 54019
// if IsInArea ( unit , area ) then
53901: LD_VAR 0 1
53905: PPUSH
53906: LD_VAR 0 2
53910: PPUSH
53911: CALL_OW 308
53915: IFFALSE 53933
// begin ComMoveToArea ( unit , goAway ) ;
53917: LD_VAR 0 1
53921: PPUSH
53922: LD_VAR 0 3
53926: PPUSH
53927: CALL_OW 113
// exit ;
53931: GO 54019
// end ; if task [ 1 ] [ 1 ] <> M then
53933: LD_VAR 0 7
53937: PUSH
53938: LD_INT 1
53940: ARRAY
53941: PUSH
53942: LD_INT 1
53944: ARRAY
53945: PUSH
53946: LD_STRING M
53948: NONEQUAL
53949: IFFALSE 53953
// exit ;
53951: GO 54019
// x := task [ 1 ] [ 2 ] ;
53953: LD_ADDR_VAR 0 5
53957: PUSH
53958: LD_VAR 0 7
53962: PUSH
53963: LD_INT 1
53965: ARRAY
53966: PUSH
53967: LD_INT 2
53969: ARRAY
53970: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53971: LD_ADDR_VAR 0 6
53975: PUSH
53976: LD_VAR 0 7
53980: PUSH
53981: LD_INT 1
53983: ARRAY
53984: PUSH
53985: LD_INT 3
53987: ARRAY
53988: ST_TO_ADDR
// if InArea ( x , y , area ) then
53989: LD_VAR 0 5
53993: PPUSH
53994: LD_VAR 0 6
53998: PPUSH
53999: LD_VAR 0 2
54003: PPUSH
54004: CALL_OW 309
54008: IFFALSE 54019
// ComStop ( unit ) ;
54010: LD_VAR 0 1
54014: PPUSH
54015: CALL_OW 141
// end ;
54019: LD_VAR 0 4
54023: RET
// export function Abs ( value ) ; begin
54024: LD_INT 0
54026: PPUSH
// result := value ;
54027: LD_ADDR_VAR 0 2
54031: PUSH
54032: LD_VAR 0 1
54036: ST_TO_ADDR
// if value < 0 then
54037: LD_VAR 0 1
54041: PUSH
54042: LD_INT 0
54044: LESS
54045: IFFALSE 54062
// result := value * - 1 ;
54047: LD_ADDR_VAR 0 2
54051: PUSH
54052: LD_VAR 0 1
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: MUL
54061: ST_TO_ADDR
// end ;
54062: LD_VAR 0 2
54066: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54067: LD_INT 0
54069: PPUSH
54070: PPUSH
54071: PPUSH
54072: PPUSH
54073: PPUSH
54074: PPUSH
54075: PPUSH
54076: PPUSH
// if not unit or not building then
54077: LD_VAR 0 1
54081: NOT
54082: PUSH
54083: LD_VAR 0 2
54087: NOT
54088: OR
54089: IFFALSE 54093
// exit ;
54091: GO 54319
// x := GetX ( building ) ;
54093: LD_ADDR_VAR 0 4
54097: PUSH
54098: LD_VAR 0 2
54102: PPUSH
54103: CALL_OW 250
54107: ST_TO_ADDR
// y := GetY ( building ) ;
54108: LD_ADDR_VAR 0 6
54112: PUSH
54113: LD_VAR 0 2
54117: PPUSH
54118: CALL_OW 251
54122: ST_TO_ADDR
// d := GetDir ( building ) ;
54123: LD_ADDR_VAR 0 8
54127: PUSH
54128: LD_VAR 0 2
54132: PPUSH
54133: CALL_OW 254
54137: ST_TO_ADDR
// r := 4 ;
54138: LD_ADDR_VAR 0 9
54142: PUSH
54143: LD_INT 4
54145: ST_TO_ADDR
// for i := 1 to 5 do
54146: LD_ADDR_VAR 0 10
54150: PUSH
54151: DOUBLE
54152: LD_INT 1
54154: DEC
54155: ST_TO_ADDR
54156: LD_INT 5
54158: PUSH
54159: FOR_TO
54160: IFFALSE 54317
// begin _x := ShiftX ( x , d , r + i ) ;
54162: LD_ADDR_VAR 0 5
54166: PUSH
54167: LD_VAR 0 4
54171: PPUSH
54172: LD_VAR 0 8
54176: PPUSH
54177: LD_VAR 0 9
54181: PUSH
54182: LD_VAR 0 10
54186: PLUS
54187: PPUSH
54188: CALL_OW 272
54192: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54193: LD_ADDR_VAR 0 7
54197: PUSH
54198: LD_VAR 0 6
54202: PPUSH
54203: LD_VAR 0 8
54207: PPUSH
54208: LD_VAR 0 9
54212: PUSH
54213: LD_VAR 0 10
54217: PLUS
54218: PPUSH
54219: CALL_OW 273
54223: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54224: LD_VAR 0 5
54228: PPUSH
54229: LD_VAR 0 7
54233: PPUSH
54234: CALL_OW 488
54238: PUSH
54239: LD_VAR 0 5
54243: PPUSH
54244: LD_VAR 0 7
54248: PPUSH
54249: CALL_OW 428
54253: PPUSH
54254: CALL_OW 247
54258: PUSH
54259: LD_INT 3
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: IN
54269: NOT
54270: AND
54271: IFFALSE 54315
// begin ComMoveXY ( unit , _x , _y ) ;
54273: LD_VAR 0 1
54277: PPUSH
54278: LD_VAR 0 5
54282: PPUSH
54283: LD_VAR 0 7
54287: PPUSH
54288: CALL_OW 111
// result := [ _x , _y ] ;
54292: LD_ADDR_VAR 0 3
54296: PUSH
54297: LD_VAR 0 5
54301: PUSH
54302: LD_VAR 0 7
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: ST_TO_ADDR
// exit ;
54311: POP
54312: POP
54313: GO 54319
// end ; end ;
54315: GO 54159
54317: POP
54318: POP
// end ;
54319: LD_VAR 0 3
54323: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54324: LD_INT 0
54326: PPUSH
54327: PPUSH
54328: PPUSH
// result := 0 ;
54329: LD_ADDR_VAR 0 3
54333: PUSH
54334: LD_INT 0
54336: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54337: LD_VAR 0 1
54341: PUSH
54342: LD_INT 0
54344: LESS
54345: PUSH
54346: LD_VAR 0 1
54350: PUSH
54351: LD_INT 8
54353: GREATER
54354: OR
54355: PUSH
54356: LD_VAR 0 2
54360: PUSH
54361: LD_INT 0
54363: LESS
54364: OR
54365: PUSH
54366: LD_VAR 0 2
54370: PUSH
54371: LD_INT 8
54373: GREATER
54374: OR
54375: IFFALSE 54379
// exit ;
54377: GO 54454
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54379: LD_ADDR_VAR 0 4
54383: PUSH
54384: LD_INT 22
54386: PUSH
54387: LD_VAR 0 2
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PPUSH
54396: CALL_OW 69
54400: PUSH
54401: FOR_IN
54402: IFFALSE 54452
// begin un := UnitShoot ( i ) ;
54404: LD_ADDR_VAR 0 5
54408: PUSH
54409: LD_VAR 0 4
54413: PPUSH
54414: CALL_OW 504
54418: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54419: LD_VAR 0 5
54423: PPUSH
54424: CALL_OW 255
54428: PUSH
54429: LD_VAR 0 1
54433: EQUAL
54434: IFFALSE 54450
// begin result := un ;
54436: LD_ADDR_VAR 0 3
54440: PUSH
54441: LD_VAR 0 5
54445: ST_TO_ADDR
// exit ;
54446: POP
54447: POP
54448: GO 54454
// end ; end ;
54450: GO 54401
54452: POP
54453: POP
// end ;
54454: LD_VAR 0 3
54458: RET
// export function GetCargoBay ( units ) ; begin
54459: LD_INT 0
54461: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54462: LD_ADDR_VAR 0 2
54466: PUSH
54467: LD_VAR 0 1
54471: PPUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 34
54477: PUSH
54478: LD_INT 12
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 34
54487: PUSH
54488: LD_INT 51
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 34
54497: PUSH
54498: LD_INT 32
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 34
54507: PUSH
54508: LD_INT 89
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: PPUSH
54522: CALL_OW 72
54526: ST_TO_ADDR
// end ;
54527: LD_VAR 0 2
54531: RET
// export function Negate ( value ) ; begin
54532: LD_INT 0
54534: PPUSH
// result := not value ;
54535: LD_ADDR_VAR 0 2
54539: PUSH
54540: LD_VAR 0 1
54544: NOT
54545: ST_TO_ADDR
// end ;
54546: LD_VAR 0 2
54550: RET
// export function Inc ( value ) ; begin
54551: LD_INT 0
54553: PPUSH
// result := value + 1 ;
54554: LD_ADDR_VAR 0 2
54558: PUSH
54559: LD_VAR 0 1
54563: PUSH
54564: LD_INT 1
54566: PLUS
54567: ST_TO_ADDR
// end ;
54568: LD_VAR 0 2
54572: RET
// export function Dec ( value ) ; begin
54573: LD_INT 0
54575: PPUSH
// result := value - 1 ;
54576: LD_ADDR_VAR 0 2
54580: PUSH
54581: LD_VAR 0 1
54585: PUSH
54586: LD_INT 1
54588: MINUS
54589: ST_TO_ADDR
// end ;
54590: LD_VAR 0 2
54594: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54595: LD_INT 0
54597: PPUSH
54598: PPUSH
54599: PPUSH
54600: PPUSH
54601: PPUSH
54602: PPUSH
54603: PPUSH
54604: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54605: LD_VAR 0 1
54609: PPUSH
54610: LD_VAR 0 2
54614: PPUSH
54615: CALL_OW 488
54619: NOT
54620: PUSH
54621: LD_VAR 0 3
54625: PPUSH
54626: LD_VAR 0 4
54630: PPUSH
54631: CALL_OW 488
54635: NOT
54636: OR
54637: IFFALSE 54650
// begin result := - 1 ;
54639: LD_ADDR_VAR 0 5
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: ST_TO_ADDR
// exit ;
54648: GO 54885
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54650: LD_ADDR_VAR 0 12
54654: PUSH
54655: LD_VAR 0 1
54659: PPUSH
54660: LD_VAR 0 2
54664: PPUSH
54665: LD_VAR 0 3
54669: PPUSH
54670: LD_VAR 0 4
54674: PPUSH
54675: CALL 53735 0 4
54679: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54680: LD_ADDR_VAR 0 11
54684: PUSH
54685: LD_VAR 0 1
54689: PPUSH
54690: LD_VAR 0 2
54694: PPUSH
54695: LD_VAR 0 12
54699: PUSH
54700: LD_INT 1
54702: ARRAY
54703: PPUSH
54704: LD_VAR 0 12
54708: PUSH
54709: LD_INT 2
54711: ARRAY
54712: PPUSH
54713: CALL_OW 298
54717: ST_TO_ADDR
// distance := 9999 ;
54718: LD_ADDR_VAR 0 10
54722: PUSH
54723: LD_INT 9999
54725: ST_TO_ADDR
// for i := 0 to 5 do
54726: LD_ADDR_VAR 0 6
54730: PUSH
54731: DOUBLE
54732: LD_INT 0
54734: DEC
54735: ST_TO_ADDR
54736: LD_INT 5
54738: PUSH
54739: FOR_TO
54740: IFFALSE 54883
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54742: LD_ADDR_VAR 0 7
54746: PUSH
54747: LD_VAR 0 1
54751: PPUSH
54752: LD_VAR 0 6
54756: PPUSH
54757: LD_VAR 0 11
54761: PPUSH
54762: CALL_OW 272
54766: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54767: LD_ADDR_VAR 0 8
54771: PUSH
54772: LD_VAR 0 2
54776: PPUSH
54777: LD_VAR 0 6
54781: PPUSH
54782: LD_VAR 0 11
54786: PPUSH
54787: CALL_OW 273
54791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54792: LD_VAR 0 7
54796: PPUSH
54797: LD_VAR 0 8
54801: PPUSH
54802: CALL_OW 488
54806: NOT
54807: IFFALSE 54811
// continue ;
54809: GO 54739
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54811: LD_ADDR_VAR 0 9
54815: PUSH
54816: LD_VAR 0 12
54820: PUSH
54821: LD_INT 1
54823: ARRAY
54824: PPUSH
54825: LD_VAR 0 12
54829: PUSH
54830: LD_INT 2
54832: ARRAY
54833: PPUSH
54834: LD_VAR 0 7
54838: PPUSH
54839: LD_VAR 0 8
54843: PPUSH
54844: CALL_OW 298
54848: ST_TO_ADDR
// if tmp < distance then
54849: LD_VAR 0 9
54853: PUSH
54854: LD_VAR 0 10
54858: LESS
54859: IFFALSE 54881
// begin result := i ;
54861: LD_ADDR_VAR 0 5
54865: PUSH
54866: LD_VAR 0 6
54870: ST_TO_ADDR
// distance := tmp ;
54871: LD_ADDR_VAR 0 10
54875: PUSH
54876: LD_VAR 0 9
54880: ST_TO_ADDR
// end ; end ;
54881: GO 54739
54883: POP
54884: POP
// end ;
54885: LD_VAR 0 5
54889: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54890: LD_INT 0
54892: PPUSH
54893: PPUSH
// if not driver or not IsInUnit ( driver ) then
54894: LD_VAR 0 1
54898: NOT
54899: PUSH
54900: LD_VAR 0 1
54904: PPUSH
54905: CALL_OW 310
54909: NOT
54910: OR
54911: IFFALSE 54915
// exit ;
54913: GO 55005
// vehicle := IsInUnit ( driver ) ;
54915: LD_ADDR_VAR 0 3
54919: PUSH
54920: LD_VAR 0 1
54924: PPUSH
54925: CALL_OW 310
54929: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54930: LD_VAR 0 1
54934: PPUSH
54935: LD_STRING \
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: PUSH
54965: LD_STRING E
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_VAR 0 3
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PPUSH
55001: CALL_OW 446
// end ;
55005: LD_VAR 0 2
55009: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55010: LD_INT 0
55012: PPUSH
55013: PPUSH
// if not driver or not IsInUnit ( driver ) then
55014: LD_VAR 0 1
55018: NOT
55019: PUSH
55020: LD_VAR 0 1
55024: PPUSH
55025: CALL_OW 310
55029: NOT
55030: OR
55031: IFFALSE 55035
// exit ;
55033: GO 55125
// vehicle := IsInUnit ( driver ) ;
55035: LD_ADDR_VAR 0 3
55039: PUSH
55040: LD_VAR 0 1
55044: PPUSH
55045: CALL_OW 310
55049: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55050: LD_VAR 0 1
55054: PPUSH
55055: LD_STRING \
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: PUSH
55085: LD_STRING E
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_VAR 0 3
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PPUSH
55121: CALL_OW 447
// end ;
55125: LD_VAR 0 2
55129: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55130: LD_INT 0
55132: PPUSH
55133: PPUSH
55134: PPUSH
// tmp := [ ] ;
55135: LD_ADDR_VAR 0 5
55139: PUSH
55140: EMPTY
55141: ST_TO_ADDR
// for i in units do
55142: LD_ADDR_VAR 0 4
55146: PUSH
55147: LD_VAR 0 1
55151: PUSH
55152: FOR_IN
55153: IFFALSE 55191
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55155: LD_ADDR_VAR 0 5
55159: PUSH
55160: LD_VAR 0 5
55164: PPUSH
55165: LD_VAR 0 5
55169: PUSH
55170: LD_INT 1
55172: PLUS
55173: PPUSH
55174: LD_VAR 0 4
55178: PPUSH
55179: CALL_OW 256
55183: PPUSH
55184: CALL_OW 2
55188: ST_TO_ADDR
55189: GO 55152
55191: POP
55192: POP
// if not tmp then
55193: LD_VAR 0 5
55197: NOT
55198: IFFALSE 55202
// exit ;
55200: GO 55250
// if asc then
55202: LD_VAR 0 2
55206: IFFALSE 55230
// result := SortListByListAsc ( units , tmp ) else
55208: LD_ADDR_VAR 0 3
55212: PUSH
55213: LD_VAR 0 1
55217: PPUSH
55218: LD_VAR 0 5
55222: PPUSH
55223: CALL_OW 76
55227: ST_TO_ADDR
55228: GO 55250
// result := SortListByListDesc ( units , tmp ) ;
55230: LD_ADDR_VAR 0 3
55234: PUSH
55235: LD_VAR 0 1
55239: PPUSH
55240: LD_VAR 0 5
55244: PPUSH
55245: CALL_OW 77
55249: ST_TO_ADDR
// end ;
55250: LD_VAR 0 3
55254: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55255: LD_INT 0
55257: PPUSH
55258: PPUSH
// task := GetTaskList ( mech ) ;
55259: LD_ADDR_VAR 0 4
55263: PUSH
55264: LD_VAR 0 1
55268: PPUSH
55269: CALL_OW 437
55273: ST_TO_ADDR
// if not task then
55274: LD_VAR 0 4
55278: NOT
55279: IFFALSE 55283
// exit ;
55281: GO 55325
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55283: LD_ADDR_VAR 0 3
55287: PUSH
55288: LD_VAR 0 4
55292: PUSH
55293: LD_INT 1
55295: ARRAY
55296: PUSH
55297: LD_INT 1
55299: ARRAY
55300: PUSH
55301: LD_STRING r
55303: EQUAL
55304: PUSH
55305: LD_VAR 0 4
55309: PUSH
55310: LD_INT 1
55312: ARRAY
55313: PUSH
55314: LD_INT 4
55316: ARRAY
55317: PUSH
55318: LD_VAR 0 2
55322: EQUAL
55323: AND
55324: ST_TO_ADDR
// end ;
55325: LD_VAR 0 3
55329: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55330: LD_INT 0
55332: PPUSH
// SetDir ( unit , d ) ;
55333: LD_VAR 0 1
55337: PPUSH
55338: LD_VAR 0 4
55342: PPUSH
55343: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55347: LD_VAR 0 1
55351: PPUSH
55352: LD_VAR 0 2
55356: PPUSH
55357: LD_VAR 0 3
55361: PPUSH
55362: LD_VAR 0 5
55366: PPUSH
55367: CALL_OW 48
// end ;
55371: LD_VAR 0 6
55375: RET
// export function ToNaturalNumber ( number ) ; begin
55376: LD_INT 0
55378: PPUSH
// result := number div 1 ;
55379: LD_ADDR_VAR 0 2
55383: PUSH
55384: LD_VAR 0 1
55388: PUSH
55389: LD_INT 1
55391: DIV
55392: ST_TO_ADDR
// if number < 0 then
55393: LD_VAR 0 1
55397: PUSH
55398: LD_INT 0
55400: LESS
55401: IFFALSE 55411
// result := 0 ;
55403: LD_ADDR_VAR 0 2
55407: PUSH
55408: LD_INT 0
55410: ST_TO_ADDR
// end ;
55411: LD_VAR 0 2
55415: RET
// export function SortByClass ( units , class ) ; var un ; begin
55416: LD_INT 0
55418: PPUSH
55419: PPUSH
// if not units or not class then
55420: LD_VAR 0 1
55424: NOT
55425: PUSH
55426: LD_VAR 0 2
55430: NOT
55431: OR
55432: IFFALSE 55436
// exit ;
55434: GO 55531
// result := [ ] ;
55436: LD_ADDR_VAR 0 3
55440: PUSH
55441: EMPTY
55442: ST_TO_ADDR
// for un in units do
55443: LD_ADDR_VAR 0 4
55447: PUSH
55448: LD_VAR 0 1
55452: PUSH
55453: FOR_IN
55454: IFFALSE 55529
// if GetClass ( un ) = class then
55456: LD_VAR 0 4
55460: PPUSH
55461: CALL_OW 257
55465: PUSH
55466: LD_VAR 0 2
55470: EQUAL
55471: IFFALSE 55498
// result := Insert ( result , 1 , un ) else
55473: LD_ADDR_VAR 0 3
55477: PUSH
55478: LD_VAR 0 3
55482: PPUSH
55483: LD_INT 1
55485: PPUSH
55486: LD_VAR 0 4
55490: PPUSH
55491: CALL_OW 2
55495: ST_TO_ADDR
55496: GO 55527
// result := Replace ( result , result + 1 , un ) ;
55498: LD_ADDR_VAR 0 3
55502: PUSH
55503: LD_VAR 0 3
55507: PPUSH
55508: LD_VAR 0 3
55512: PUSH
55513: LD_INT 1
55515: PLUS
55516: PPUSH
55517: LD_VAR 0 4
55521: PPUSH
55522: CALL_OW 1
55526: ST_TO_ADDR
55527: GO 55453
55529: POP
55530: POP
// end ;
55531: LD_VAR 0 3
55535: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55536: LD_INT 0
55538: PPUSH
55539: PPUSH
55540: PPUSH
55541: PPUSH
55542: PPUSH
55543: PPUSH
55544: PPUSH
// result := [ ] ;
55545: LD_ADDR_VAR 0 4
55549: PUSH
55550: EMPTY
55551: ST_TO_ADDR
// if x - r < 0 then
55552: LD_VAR 0 1
55556: PUSH
55557: LD_VAR 0 3
55561: MINUS
55562: PUSH
55563: LD_INT 0
55565: LESS
55566: IFFALSE 55578
// min_x := 0 else
55568: LD_ADDR_VAR 0 8
55572: PUSH
55573: LD_INT 0
55575: ST_TO_ADDR
55576: GO 55594
// min_x := x - r ;
55578: LD_ADDR_VAR 0 8
55582: PUSH
55583: LD_VAR 0 1
55587: PUSH
55588: LD_VAR 0 3
55592: MINUS
55593: ST_TO_ADDR
// if y - r < 0 then
55594: LD_VAR 0 2
55598: PUSH
55599: LD_VAR 0 3
55603: MINUS
55604: PUSH
55605: LD_INT 0
55607: LESS
55608: IFFALSE 55620
// min_y := 0 else
55610: LD_ADDR_VAR 0 7
55614: PUSH
55615: LD_INT 0
55617: ST_TO_ADDR
55618: GO 55636
// min_y := y - r ;
55620: LD_ADDR_VAR 0 7
55624: PUSH
55625: LD_VAR 0 2
55629: PUSH
55630: LD_VAR 0 3
55634: MINUS
55635: ST_TO_ADDR
// max_x := x + r ;
55636: LD_ADDR_VAR 0 9
55640: PUSH
55641: LD_VAR 0 1
55645: PUSH
55646: LD_VAR 0 3
55650: PLUS
55651: ST_TO_ADDR
// max_y := y + r ;
55652: LD_ADDR_VAR 0 10
55656: PUSH
55657: LD_VAR 0 2
55661: PUSH
55662: LD_VAR 0 3
55666: PLUS
55667: ST_TO_ADDR
// for _x = min_x to max_x do
55668: LD_ADDR_VAR 0 5
55672: PUSH
55673: DOUBLE
55674: LD_VAR 0 8
55678: DEC
55679: ST_TO_ADDR
55680: LD_VAR 0 9
55684: PUSH
55685: FOR_TO
55686: IFFALSE 55787
// for _y = min_y to max_y do
55688: LD_ADDR_VAR 0 6
55692: PUSH
55693: DOUBLE
55694: LD_VAR 0 7
55698: DEC
55699: ST_TO_ADDR
55700: LD_VAR 0 10
55704: PUSH
55705: FOR_TO
55706: IFFALSE 55783
// begin if not ValidHex ( _x , _y ) then
55708: LD_VAR 0 5
55712: PPUSH
55713: LD_VAR 0 6
55717: PPUSH
55718: CALL_OW 488
55722: NOT
55723: IFFALSE 55727
// continue ;
55725: GO 55705
// if GetResourceTypeXY ( _x , _y ) then
55727: LD_VAR 0 5
55731: PPUSH
55732: LD_VAR 0 6
55736: PPUSH
55737: CALL_OW 283
55741: IFFALSE 55781
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55743: LD_ADDR_VAR 0 4
55747: PUSH
55748: LD_VAR 0 4
55752: PPUSH
55753: LD_VAR 0 4
55757: PUSH
55758: LD_INT 1
55760: PLUS
55761: PPUSH
55762: LD_VAR 0 5
55766: PUSH
55767: LD_VAR 0 6
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PPUSH
55776: CALL_OW 1
55780: ST_TO_ADDR
// end ;
55781: GO 55705
55783: POP
55784: POP
55785: GO 55685
55787: POP
55788: POP
// end ;
55789: LD_VAR 0 4
55793: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55794: LD_INT 0
55796: PPUSH
55797: PPUSH
55798: PPUSH
55799: PPUSH
55800: PPUSH
55801: PPUSH
55802: PPUSH
55803: PPUSH
// if not units then
55804: LD_VAR 0 1
55808: NOT
55809: IFFALSE 55813
// exit ;
55811: GO 56337
// result := UnitFilter ( units , [ f_ok ] ) ;
55813: LD_ADDR_VAR 0 3
55817: PUSH
55818: LD_VAR 0 1
55822: PPUSH
55823: LD_INT 50
55825: PUSH
55826: EMPTY
55827: LIST
55828: PPUSH
55829: CALL_OW 72
55833: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55834: LD_ADDR_VAR 0 8
55838: PUSH
55839: LD_VAR 0 1
55843: PUSH
55844: LD_INT 1
55846: ARRAY
55847: PPUSH
55848: CALL_OW 255
55852: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55853: LD_ADDR_VAR 0 10
55857: PUSH
55858: LD_INT 29
55860: PUSH
55861: LD_INT 91
55863: PUSH
55864: LD_INT 49
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: ST_TO_ADDR
// if not result then
55872: LD_VAR 0 3
55876: NOT
55877: IFFALSE 55881
// exit ;
55879: GO 56337
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55881: LD_ADDR_VAR 0 5
55885: PUSH
55886: LD_INT 81
55888: PUSH
55889: LD_VAR 0 8
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PPUSH
55898: CALL_OW 69
55902: ST_TO_ADDR
// for i in result do
55903: LD_ADDR_VAR 0 4
55907: PUSH
55908: LD_VAR 0 3
55912: PUSH
55913: FOR_IN
55914: IFFALSE 56335
// begin tag := GetTag ( i ) + 1 ;
55916: LD_ADDR_VAR 0 9
55920: PUSH
55921: LD_VAR 0 4
55925: PPUSH
55926: CALL_OW 110
55930: PUSH
55931: LD_INT 1
55933: PLUS
55934: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55935: LD_ADDR_VAR 0 7
55939: PUSH
55940: LD_VAR 0 4
55944: PPUSH
55945: CALL_OW 250
55949: PPUSH
55950: LD_VAR 0 4
55954: PPUSH
55955: CALL_OW 251
55959: PPUSH
55960: LD_INT 6
55962: PPUSH
55963: CALL 55536 0 3
55967: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55968: LD_VAR 0 4
55972: PPUSH
55973: CALL_OW 247
55977: PUSH
55978: LD_INT 2
55980: EQUAL
55981: PUSH
55982: LD_VAR 0 7
55986: AND
55987: PUSH
55988: LD_VAR 0 4
55992: PPUSH
55993: CALL_OW 264
55997: PUSH
55998: LD_VAR 0 10
56002: IN
56003: NOT
56004: AND
56005: IFFALSE 56044
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56007: LD_VAR 0 4
56011: PPUSH
56012: LD_VAR 0 7
56016: PUSH
56017: LD_INT 1
56019: ARRAY
56020: PUSH
56021: LD_INT 1
56023: ARRAY
56024: PPUSH
56025: LD_VAR 0 7
56029: PUSH
56030: LD_INT 1
56032: ARRAY
56033: PUSH
56034: LD_INT 2
56036: ARRAY
56037: PPUSH
56038: CALL_OW 116
56042: GO 56333
// if path > tag then
56044: LD_VAR 0 2
56048: PUSH
56049: LD_VAR 0 9
56053: GREATER
56054: IFFALSE 56262
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56056: LD_ADDR_VAR 0 6
56060: PUSH
56061: LD_VAR 0 5
56065: PPUSH
56066: LD_INT 91
56068: PUSH
56069: LD_VAR 0 4
56073: PUSH
56074: LD_INT 8
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: LIST
56081: PPUSH
56082: CALL_OW 72
56086: ST_TO_ADDR
// if nearEnemy then
56087: LD_VAR 0 6
56091: IFFALSE 56160
// begin if GetWeapon ( i ) = ru_time_lapser then
56093: LD_VAR 0 4
56097: PPUSH
56098: CALL_OW 264
56102: PUSH
56103: LD_INT 49
56105: EQUAL
56106: IFFALSE 56134
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56108: LD_VAR 0 4
56112: PPUSH
56113: LD_VAR 0 6
56117: PPUSH
56118: LD_VAR 0 4
56122: PPUSH
56123: CALL_OW 74
56127: PPUSH
56128: CALL_OW 112
56132: GO 56158
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56134: LD_VAR 0 4
56138: PPUSH
56139: LD_VAR 0 6
56143: PPUSH
56144: LD_VAR 0 4
56148: PPUSH
56149: CALL_OW 74
56153: PPUSH
56154: CALL 57262 0 2
// end else
56158: GO 56260
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56160: LD_VAR 0 4
56164: PPUSH
56165: LD_VAR 0 2
56169: PUSH
56170: LD_VAR 0 9
56174: ARRAY
56175: PUSH
56176: LD_INT 1
56178: ARRAY
56179: PPUSH
56180: LD_VAR 0 2
56184: PUSH
56185: LD_VAR 0 9
56189: ARRAY
56190: PUSH
56191: LD_INT 2
56193: ARRAY
56194: PPUSH
56195: CALL_OW 297
56199: PUSH
56200: LD_INT 6
56202: GREATER
56203: IFFALSE 56246
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56205: LD_VAR 0 4
56209: PPUSH
56210: LD_VAR 0 2
56214: PUSH
56215: LD_VAR 0 9
56219: ARRAY
56220: PUSH
56221: LD_INT 1
56223: ARRAY
56224: PPUSH
56225: LD_VAR 0 2
56229: PUSH
56230: LD_VAR 0 9
56234: ARRAY
56235: PUSH
56236: LD_INT 2
56238: ARRAY
56239: PPUSH
56240: CALL_OW 114
56244: GO 56260
// SetTag ( i , tag ) ;
56246: LD_VAR 0 4
56250: PPUSH
56251: LD_VAR 0 9
56255: PPUSH
56256: CALL_OW 109
// end else
56260: GO 56333
// if enemy then
56262: LD_VAR 0 5
56266: IFFALSE 56333
// begin if GetWeapon ( i ) = ru_time_lapser then
56268: LD_VAR 0 4
56272: PPUSH
56273: CALL_OW 264
56277: PUSH
56278: LD_INT 49
56280: EQUAL
56281: IFFALSE 56309
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56283: LD_VAR 0 4
56287: PPUSH
56288: LD_VAR 0 5
56292: PPUSH
56293: LD_VAR 0 4
56297: PPUSH
56298: CALL_OW 74
56302: PPUSH
56303: CALL_OW 112
56307: GO 56333
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56309: LD_VAR 0 4
56313: PPUSH
56314: LD_VAR 0 5
56318: PPUSH
56319: LD_VAR 0 4
56323: PPUSH
56324: CALL_OW 74
56328: PPUSH
56329: CALL 57262 0 2
// end ; end ;
56333: GO 55913
56335: POP
56336: POP
// end ;
56337: LD_VAR 0 3
56341: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56342: LD_INT 0
56344: PPUSH
56345: PPUSH
56346: PPUSH
// if not unit or IsInUnit ( unit ) then
56347: LD_VAR 0 1
56351: NOT
56352: PUSH
56353: LD_VAR 0 1
56357: PPUSH
56358: CALL_OW 310
56362: OR
56363: IFFALSE 56367
// exit ;
56365: GO 56458
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56367: LD_ADDR_VAR 0 4
56371: PUSH
56372: LD_VAR 0 1
56376: PPUSH
56377: CALL_OW 250
56381: PPUSH
56382: LD_VAR 0 2
56386: PPUSH
56387: LD_INT 1
56389: PPUSH
56390: CALL_OW 272
56394: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56395: LD_ADDR_VAR 0 5
56399: PUSH
56400: LD_VAR 0 1
56404: PPUSH
56405: CALL_OW 251
56409: PPUSH
56410: LD_VAR 0 2
56414: PPUSH
56415: LD_INT 1
56417: PPUSH
56418: CALL_OW 273
56422: ST_TO_ADDR
// if ValidHex ( x , y ) then
56423: LD_VAR 0 4
56427: PPUSH
56428: LD_VAR 0 5
56432: PPUSH
56433: CALL_OW 488
56437: IFFALSE 56458
// ComTurnXY ( unit , x , y ) ;
56439: LD_VAR 0 1
56443: PPUSH
56444: LD_VAR 0 4
56448: PPUSH
56449: LD_VAR 0 5
56453: PPUSH
56454: CALL_OW 118
// end ;
56458: LD_VAR 0 3
56462: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56463: LD_INT 0
56465: PPUSH
56466: PPUSH
// result := false ;
56467: LD_ADDR_VAR 0 3
56471: PUSH
56472: LD_INT 0
56474: ST_TO_ADDR
// if not units then
56475: LD_VAR 0 2
56479: NOT
56480: IFFALSE 56484
// exit ;
56482: GO 56529
// for i in units do
56484: LD_ADDR_VAR 0 4
56488: PUSH
56489: LD_VAR 0 2
56493: PUSH
56494: FOR_IN
56495: IFFALSE 56527
// if See ( side , i ) then
56497: LD_VAR 0 1
56501: PPUSH
56502: LD_VAR 0 4
56506: PPUSH
56507: CALL_OW 292
56511: IFFALSE 56525
// begin result := true ;
56513: LD_ADDR_VAR 0 3
56517: PUSH
56518: LD_INT 1
56520: ST_TO_ADDR
// exit ;
56521: POP
56522: POP
56523: GO 56529
// end ;
56525: GO 56494
56527: POP
56528: POP
// end ;
56529: LD_VAR 0 3
56533: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56534: LD_INT 0
56536: PPUSH
56537: PPUSH
56538: PPUSH
56539: PPUSH
// if not unit or not points then
56540: LD_VAR 0 1
56544: NOT
56545: PUSH
56546: LD_VAR 0 2
56550: NOT
56551: OR
56552: IFFALSE 56556
// exit ;
56554: GO 56646
// dist := 99999 ;
56556: LD_ADDR_VAR 0 5
56560: PUSH
56561: LD_INT 99999
56563: ST_TO_ADDR
// for i in points do
56564: LD_ADDR_VAR 0 4
56568: PUSH
56569: LD_VAR 0 2
56573: PUSH
56574: FOR_IN
56575: IFFALSE 56644
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56577: LD_ADDR_VAR 0 6
56581: PUSH
56582: LD_VAR 0 1
56586: PPUSH
56587: LD_VAR 0 4
56591: PUSH
56592: LD_INT 1
56594: ARRAY
56595: PPUSH
56596: LD_VAR 0 4
56600: PUSH
56601: LD_INT 2
56603: ARRAY
56604: PPUSH
56605: CALL_OW 297
56609: ST_TO_ADDR
// if tmpDist < dist then
56610: LD_VAR 0 6
56614: PUSH
56615: LD_VAR 0 5
56619: LESS
56620: IFFALSE 56642
// begin result := i ;
56622: LD_ADDR_VAR 0 3
56626: PUSH
56627: LD_VAR 0 4
56631: ST_TO_ADDR
// dist := tmpDist ;
56632: LD_ADDR_VAR 0 5
56636: PUSH
56637: LD_VAR 0 6
56641: ST_TO_ADDR
// end ; end ;
56642: GO 56574
56644: POP
56645: POP
// end ;
56646: LD_VAR 0 3
56650: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56651: LD_INT 0
56653: PPUSH
// uc_side := side ;
56654: LD_ADDR_OWVAR 20
56658: PUSH
56659: LD_VAR 0 1
56663: ST_TO_ADDR
// uc_nation := 3 ;
56664: LD_ADDR_OWVAR 21
56668: PUSH
56669: LD_INT 3
56671: ST_TO_ADDR
// vc_chassis := 25 ;
56672: LD_ADDR_OWVAR 37
56676: PUSH
56677: LD_INT 25
56679: ST_TO_ADDR
// vc_engine := engine_siberite ;
56680: LD_ADDR_OWVAR 39
56684: PUSH
56685: LD_INT 3
56687: ST_TO_ADDR
// vc_control := control_computer ;
56688: LD_ADDR_OWVAR 38
56692: PUSH
56693: LD_INT 3
56695: ST_TO_ADDR
// vc_weapon := 59 ;
56696: LD_ADDR_OWVAR 40
56700: PUSH
56701: LD_INT 59
56703: ST_TO_ADDR
// result := CreateVehicle ;
56704: LD_ADDR_VAR 0 5
56708: PUSH
56709: CALL_OW 45
56713: ST_TO_ADDR
// SetDir ( result , d ) ;
56714: LD_VAR 0 5
56718: PPUSH
56719: LD_VAR 0 4
56723: PPUSH
56724: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56728: LD_VAR 0 5
56732: PPUSH
56733: LD_VAR 0 2
56737: PPUSH
56738: LD_VAR 0 3
56742: PPUSH
56743: LD_INT 0
56745: PPUSH
56746: CALL_OW 48
// end ;
56750: LD_VAR 0 5
56754: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56755: LD_INT 0
56757: PPUSH
56758: PPUSH
56759: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56760: LD_ADDR_VAR 0 2
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56783: LD_VAR 0 1
56787: NOT
56788: PUSH
56789: LD_VAR 0 1
56793: PPUSH
56794: CALL_OW 264
56798: PUSH
56799: LD_INT 12
56801: PUSH
56802: LD_INT 51
56804: PUSH
56805: LD_INT 32
56807: PUSH
56808: LD_INT 89
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: IN
56817: NOT
56818: OR
56819: IFFALSE 56823
// exit ;
56821: GO 56921
// for i := 1 to 3 do
56823: LD_ADDR_VAR 0 3
56827: PUSH
56828: DOUBLE
56829: LD_INT 1
56831: DEC
56832: ST_TO_ADDR
56833: LD_INT 3
56835: PUSH
56836: FOR_TO
56837: IFFALSE 56919
// begin tmp := GetCargo ( cargo , i ) ;
56839: LD_ADDR_VAR 0 4
56843: PUSH
56844: LD_VAR 0 1
56848: PPUSH
56849: LD_VAR 0 3
56853: PPUSH
56854: CALL_OW 289
56858: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56859: LD_ADDR_VAR 0 2
56863: PUSH
56864: LD_VAR 0 2
56868: PPUSH
56869: LD_VAR 0 3
56873: PPUSH
56874: LD_VAR 0 4
56878: PPUSH
56879: CALL_OW 1
56883: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56884: LD_ADDR_VAR 0 2
56888: PUSH
56889: LD_VAR 0 2
56893: PPUSH
56894: LD_INT 4
56896: PPUSH
56897: LD_VAR 0 2
56901: PUSH
56902: LD_INT 4
56904: ARRAY
56905: PUSH
56906: LD_VAR 0 4
56910: PLUS
56911: PPUSH
56912: CALL_OW 1
56916: ST_TO_ADDR
// end ;
56917: GO 56836
56919: POP
56920: POP
// end ;
56921: LD_VAR 0 2
56925: RET
// export function Length ( array ) ; begin
56926: LD_INT 0
56928: PPUSH
// result := array + 0 ;
56929: LD_ADDR_VAR 0 2
56933: PUSH
56934: LD_VAR 0 1
56938: PUSH
56939: LD_INT 0
56941: PLUS
56942: ST_TO_ADDR
// end ;
56943: LD_VAR 0 2
56947: RET
// export function PrepareArray ( array ) ; begin
56948: LD_INT 0
56950: PPUSH
// result := array diff 0 ;
56951: LD_ADDR_VAR 0 2
56955: PUSH
56956: LD_VAR 0 1
56960: PUSH
56961: LD_INT 0
56963: DIFF
56964: ST_TO_ADDR
// if not result [ 1 ] then
56965: LD_VAR 0 2
56969: PUSH
56970: LD_INT 1
56972: ARRAY
56973: NOT
56974: IFFALSE 56994
// result := Delete ( result , 1 ) ;
56976: LD_ADDR_VAR 0 2
56980: PUSH
56981: LD_VAR 0 2
56985: PPUSH
56986: LD_INT 1
56988: PPUSH
56989: CALL_OW 3
56993: ST_TO_ADDR
// end ;
56994: LD_VAR 0 2
56998: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56999: LD_INT 0
57001: PPUSH
57002: PPUSH
57003: PPUSH
57004: PPUSH
// sibRocketRange := 25 ;
57005: LD_ADDR_VAR 0 6
57009: PUSH
57010: LD_INT 25
57012: ST_TO_ADDR
// result := false ;
57013: LD_ADDR_VAR 0 4
57017: PUSH
57018: LD_INT 0
57020: ST_TO_ADDR
// for i := 0 to 5 do
57021: LD_ADDR_VAR 0 5
57025: PUSH
57026: DOUBLE
57027: LD_INT 0
57029: DEC
57030: ST_TO_ADDR
57031: LD_INT 5
57033: PUSH
57034: FOR_TO
57035: IFFALSE 57102
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57037: LD_VAR 0 1
57041: PPUSH
57042: LD_VAR 0 5
57046: PPUSH
57047: LD_VAR 0 6
57051: PPUSH
57052: CALL_OW 272
57056: PPUSH
57057: LD_VAR 0 2
57061: PPUSH
57062: LD_VAR 0 5
57066: PPUSH
57067: LD_VAR 0 6
57071: PPUSH
57072: CALL_OW 273
57076: PPUSH
57077: LD_VAR 0 3
57081: PPUSH
57082: CALL_OW 309
57086: IFFALSE 57100
// begin result := true ;
57088: LD_ADDR_VAR 0 4
57092: PUSH
57093: LD_INT 1
57095: ST_TO_ADDR
// exit ;
57096: POP
57097: POP
57098: GO 57104
// end ;
57100: GO 57034
57102: POP
57103: POP
// end ;
57104: LD_VAR 0 4
57108: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57109: LD_INT 0
57111: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57112: LD_VAR 0 1
57116: PPUSH
57117: LD_VAR 0 2
57121: PPUSH
57122: LD_INT 0
57124: PPUSH
57125: LD_INT 0
57127: PPUSH
57128: LD_INT 1
57130: PPUSH
57131: LD_INT 0
57133: PPUSH
57134: CALL_OW 587
// end ;
57138: LD_VAR 0 3
57142: RET
// export function CenterOnNow ( unit ) ; begin
57143: LD_INT 0
57145: PPUSH
// result := IsInUnit ( unit ) ;
57146: LD_ADDR_VAR 0 2
57150: PUSH
57151: LD_VAR 0 1
57155: PPUSH
57156: CALL_OW 310
57160: ST_TO_ADDR
// if not result then
57161: LD_VAR 0 2
57165: NOT
57166: IFFALSE 57178
// result := unit ;
57168: LD_ADDR_VAR 0 2
57172: PUSH
57173: LD_VAR 0 1
57177: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57178: LD_VAR 0 1
57182: PPUSH
57183: CALL_OW 87
// end ;
57187: LD_VAR 0 2
57191: RET
// export function ComMoveHex ( unit , hex ) ; begin
57192: LD_INT 0
57194: PPUSH
// if not hex then
57195: LD_VAR 0 2
57199: NOT
57200: IFFALSE 57204
// exit ;
57202: GO 57257
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57204: LD_VAR 0 2
57208: PUSH
57209: LD_INT 1
57211: ARRAY
57212: PPUSH
57213: LD_VAR 0 2
57217: PUSH
57218: LD_INT 2
57220: ARRAY
57221: PPUSH
57222: CALL_OW 428
57226: IFFALSE 57230
// exit ;
57228: GO 57257
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57230: LD_VAR 0 1
57234: PPUSH
57235: LD_VAR 0 2
57239: PUSH
57240: LD_INT 1
57242: ARRAY
57243: PPUSH
57244: LD_VAR 0 2
57248: PUSH
57249: LD_INT 2
57251: ARRAY
57252: PPUSH
57253: CALL_OW 111
// end ;
57257: LD_VAR 0 3
57261: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57262: LD_INT 0
57264: PPUSH
57265: PPUSH
57266: PPUSH
// if not unit or not enemy then
57267: LD_VAR 0 1
57271: NOT
57272: PUSH
57273: LD_VAR 0 2
57277: NOT
57278: OR
57279: IFFALSE 57283
// exit ;
57281: GO 57407
// x := GetX ( enemy ) ;
57283: LD_ADDR_VAR 0 4
57287: PUSH
57288: LD_VAR 0 2
57292: PPUSH
57293: CALL_OW 250
57297: ST_TO_ADDR
// y := GetY ( enemy ) ;
57298: LD_ADDR_VAR 0 5
57302: PUSH
57303: LD_VAR 0 2
57307: PPUSH
57308: CALL_OW 251
57312: ST_TO_ADDR
// if ValidHex ( x , y ) then
57313: LD_VAR 0 4
57317: PPUSH
57318: LD_VAR 0 5
57322: PPUSH
57323: CALL_OW 488
57327: IFFALSE 57407
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
57329: LD_VAR 0 2
57333: PPUSH
57334: CALL_OW 247
57338: PUSH
57339: LD_INT 3
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: IN
57349: PUSH
57350: LD_VAR 0 1
57354: PPUSH
57355: CALL_OW 255
57359: PPUSH
57360: LD_VAR 0 2
57364: PPUSH
57365: CALL_OW 292
57369: AND
57370: IFFALSE 57388
// ComAttackUnit ( unit , enemy ) else
57372: LD_VAR 0 1
57376: PPUSH
57377: LD_VAR 0 2
57381: PPUSH
57382: CALL_OW 115
57386: GO 57407
// ComAgressiveMove ( unit , x , y ) ;
57388: LD_VAR 0 1
57392: PPUSH
57393: LD_VAR 0 4
57397: PPUSH
57398: LD_VAR 0 5
57402: PPUSH
57403: CALL_OW 114
// end ;
57407: LD_VAR 0 3
57411: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57412: LD_INT 0
57414: PPUSH
57415: PPUSH
57416: PPUSH
// list := AreaToList ( area , 0 ) ;
57417: LD_ADDR_VAR 0 5
57421: PUSH
57422: LD_VAR 0 1
57426: PPUSH
57427: LD_INT 0
57429: PPUSH
57430: CALL_OW 517
57434: ST_TO_ADDR
// if not list then
57435: LD_VAR 0 5
57439: NOT
57440: IFFALSE 57444
// exit ;
57442: GO 57574
// if all then
57444: LD_VAR 0 2
57448: IFFALSE 57536
// begin for i := 1 to list [ 1 ] do
57450: LD_ADDR_VAR 0 4
57454: PUSH
57455: DOUBLE
57456: LD_INT 1
57458: DEC
57459: ST_TO_ADDR
57460: LD_VAR 0 5
57464: PUSH
57465: LD_INT 1
57467: ARRAY
57468: PUSH
57469: FOR_TO
57470: IFFALSE 57532
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57472: LD_ADDR_VAR 0 3
57476: PUSH
57477: LD_VAR 0 3
57481: PPUSH
57482: LD_VAR 0 3
57486: PUSH
57487: LD_INT 1
57489: PLUS
57490: PPUSH
57491: LD_VAR 0 5
57495: PUSH
57496: LD_INT 1
57498: ARRAY
57499: PUSH
57500: LD_VAR 0 4
57504: ARRAY
57505: PUSH
57506: LD_VAR 0 5
57510: PUSH
57511: LD_INT 2
57513: ARRAY
57514: PUSH
57515: LD_VAR 0 4
57519: ARRAY
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PPUSH
57525: CALL_OW 1
57529: ST_TO_ADDR
57530: GO 57469
57532: POP
57533: POP
// exit ;
57534: GO 57574
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57536: LD_ADDR_VAR 0 3
57540: PUSH
57541: LD_VAR 0 5
57545: PUSH
57546: LD_INT 1
57548: ARRAY
57549: PUSH
57550: LD_INT 1
57552: ARRAY
57553: PUSH
57554: LD_VAR 0 5
57558: PUSH
57559: LD_INT 2
57561: ARRAY
57562: PUSH
57563: LD_INT 1
57565: ARRAY
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: EMPTY
57572: LIST
57573: ST_TO_ADDR
// end ;
57574: LD_VAR 0 3
57578: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57579: LD_INT 0
57581: PPUSH
57582: PPUSH
// list := AreaToList ( area , 0 ) ;
57583: LD_ADDR_VAR 0 4
57587: PUSH
57588: LD_VAR 0 1
57592: PPUSH
57593: LD_INT 0
57595: PPUSH
57596: CALL_OW 517
57600: ST_TO_ADDR
// if not list then
57601: LD_VAR 0 4
57605: NOT
57606: IFFALSE 57610
// exit ;
57608: GO 57651
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57610: LD_ADDR_VAR 0 3
57614: PUSH
57615: LD_VAR 0 4
57619: PUSH
57620: LD_INT 1
57622: ARRAY
57623: PUSH
57624: LD_INT 1
57626: ARRAY
57627: PUSH
57628: LD_VAR 0 4
57632: PUSH
57633: LD_INT 2
57635: ARRAY
57636: PUSH
57637: LD_INT 1
57639: ARRAY
57640: PUSH
57641: LD_VAR 0 2
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: LIST
57650: ST_TO_ADDR
// end ;
57651: LD_VAR 0 3
57655: RET
// export function First ( array ) ; begin
57656: LD_INT 0
57658: PPUSH
// if not array then
57659: LD_VAR 0 1
57663: NOT
57664: IFFALSE 57668
// exit ;
57666: GO 57682
// result := array [ 1 ] ;
57668: LD_ADDR_VAR 0 2
57672: PUSH
57673: LD_VAR 0 1
57677: PUSH
57678: LD_INT 1
57680: ARRAY
57681: ST_TO_ADDR
// end ;
57682: LD_VAR 0 2
57686: RET
// export function Last ( array ) ; begin
57687: LD_INT 0
57689: PPUSH
// if not array then
57690: LD_VAR 0 1
57694: NOT
57695: IFFALSE 57699
// exit ;
57697: GO 57715
// result := array [ array ] ;
57699: LD_ADDR_VAR 0 2
57703: PUSH
57704: LD_VAR 0 1
57708: PUSH
57709: LD_VAR 0 1
57713: ARRAY
57714: ST_TO_ADDR
// end ; end_of_file end_of_file
57715: LD_VAR 0 2
57719: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
57720: LD_VAR 0 1
57724: PPUSH
57725: LD_VAR 0 2
57729: PPUSH
57730: LD_VAR 0 3
57734: PPUSH
57735: LD_VAR 0 4
57739: PPUSH
57740: LD_VAR 0 5
57744: PPUSH
57745: LD_VAR 0 6
57749: PPUSH
57750: CALL 57934 0 6
// end ;
57754: PPOPN 6
57756: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
57757: LD_INT 0
57759: PPUSH
// begin if not units then
57760: LD_VAR 0 1
57764: NOT
57765: IFFALSE 57769
// exit ;
57767: GO 57769
// end ;
57769: PPOPN 7
57771: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
57772: CALL 57838 0 0
// end ; end_of_file
57776: PPOPN 1
57778: END
// export globalGameSaveCounter ; every 0 0$1 do
57779: GO 57781
57781: DISABLE
// begin enable ;
57782: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57783: LD_STRING updateTimer(
57785: PUSH
57786: LD_OWVAR 1
57790: STR
57791: PUSH
57792: LD_STRING );
57794: STR
57795: PPUSH
57796: CALL_OW 559
// end ;
57800: END
// every 0 0$1 do
57801: GO 57803
57803: DISABLE
// begin globalGameSaveCounter := 0 ;
57804: LD_ADDR_EXP 37
57808: PUSH
57809: LD_INT 0
57811: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
57812: LD_STRING setGameSaveCounter(0)
57814: PPUSH
57815: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
57819: LD_STRING initStreamRollete();
57821: PPUSH
57822: CALL_OW 559
// InitStreamMode ;
57826: CALL 59152 0 0
// DefineStreamItems ( false ) ;
57830: LD_INT 0
57832: PPUSH
57833: CALL 59616 0 1
// end ;
57837: END
// export function SOS_MapStart ( ) ; begin
57838: LD_INT 0
57840: PPUSH
// if streamModeActive then
57841: LD_EXP 38
57845: IFFALSE 57854
// DefineStreamItems ( true ) ;
57847: LD_INT 1
57849: PPUSH
57850: CALL 59616 0 1
// UpdateLuaVariables ( ) ;
57854: CALL 57871 0 0
// UpdateFactoryWaypoints ( ) ;
57858: CALL 72485 0 0
// UpdateWarehouseGatheringPoints ( ) ;
57862: CALL 72742 0 0
// end ;
57866: LD_VAR 0 1
57870: RET
// function UpdateLuaVariables ( ) ; begin
57871: LD_INT 0
57873: PPUSH
// if globalGameSaveCounter then
57874: LD_EXP 37
57878: IFFALSE 57912
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
57880: LD_ADDR_EXP 37
57884: PUSH
57885: LD_EXP 37
57889: PPUSH
57890: CALL 54551 0 1
57894: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
57895: LD_STRING setGameSaveCounter(
57897: PUSH
57898: LD_EXP 37
57902: STR
57903: PUSH
57904: LD_STRING )
57906: STR
57907: PPUSH
57908: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
57912: LD_STRING setGameDifficulty(
57914: PUSH
57915: LD_OWVAR 67
57919: STR
57920: PUSH
57921: LD_STRING )
57923: STR
57924: PPUSH
57925: CALL_OW 559
// end ;
57929: LD_VAR 0 1
57933: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57934: LD_INT 0
57936: PPUSH
// if p2 = stream_mode then
57937: LD_VAR 0 2
57941: PUSH
57942: LD_INT 100
57944: EQUAL
57945: IFFALSE 58948
// begin if not StreamModeActive then
57947: LD_EXP 38
57951: NOT
57952: IFFALSE 57962
// StreamModeActive := true ;
57954: LD_ADDR_EXP 38
57958: PUSH
57959: LD_INT 1
57961: ST_TO_ADDR
// if p3 = 0 then
57962: LD_VAR 0 3
57966: PUSH
57967: LD_INT 0
57969: EQUAL
57970: IFFALSE 57976
// InitStreamMode ;
57972: CALL 59152 0 0
// if p3 = 1 then
57976: LD_VAR 0 3
57980: PUSH
57981: LD_INT 1
57983: EQUAL
57984: IFFALSE 57994
// sRocket := true ;
57986: LD_ADDR_EXP 43
57990: PUSH
57991: LD_INT 1
57993: ST_TO_ADDR
// if p3 = 2 then
57994: LD_VAR 0 3
57998: PUSH
57999: LD_INT 2
58001: EQUAL
58002: IFFALSE 58012
// sSpeed := true ;
58004: LD_ADDR_EXP 42
58008: PUSH
58009: LD_INT 1
58011: ST_TO_ADDR
// if p3 = 3 then
58012: LD_VAR 0 3
58016: PUSH
58017: LD_INT 3
58019: EQUAL
58020: IFFALSE 58030
// sEngine := true ;
58022: LD_ADDR_EXP 44
58026: PUSH
58027: LD_INT 1
58029: ST_TO_ADDR
// if p3 = 4 then
58030: LD_VAR 0 3
58034: PUSH
58035: LD_INT 4
58037: EQUAL
58038: IFFALSE 58048
// sSpec := true ;
58040: LD_ADDR_EXP 41
58044: PUSH
58045: LD_INT 1
58047: ST_TO_ADDR
// if p3 = 5 then
58048: LD_VAR 0 3
58052: PUSH
58053: LD_INT 5
58055: EQUAL
58056: IFFALSE 58066
// sLevel := true ;
58058: LD_ADDR_EXP 45
58062: PUSH
58063: LD_INT 1
58065: ST_TO_ADDR
// if p3 = 6 then
58066: LD_VAR 0 3
58070: PUSH
58071: LD_INT 6
58073: EQUAL
58074: IFFALSE 58084
// sArmoury := true ;
58076: LD_ADDR_EXP 46
58080: PUSH
58081: LD_INT 1
58083: ST_TO_ADDR
// if p3 = 7 then
58084: LD_VAR 0 3
58088: PUSH
58089: LD_INT 7
58091: EQUAL
58092: IFFALSE 58102
// sRadar := true ;
58094: LD_ADDR_EXP 47
58098: PUSH
58099: LD_INT 1
58101: ST_TO_ADDR
// if p3 = 8 then
58102: LD_VAR 0 3
58106: PUSH
58107: LD_INT 8
58109: EQUAL
58110: IFFALSE 58120
// sBunker := true ;
58112: LD_ADDR_EXP 48
58116: PUSH
58117: LD_INT 1
58119: ST_TO_ADDR
// if p3 = 9 then
58120: LD_VAR 0 3
58124: PUSH
58125: LD_INT 9
58127: EQUAL
58128: IFFALSE 58138
// sHack := true ;
58130: LD_ADDR_EXP 49
58134: PUSH
58135: LD_INT 1
58137: ST_TO_ADDR
// if p3 = 10 then
58138: LD_VAR 0 3
58142: PUSH
58143: LD_INT 10
58145: EQUAL
58146: IFFALSE 58156
// sFire := true ;
58148: LD_ADDR_EXP 50
58152: PUSH
58153: LD_INT 1
58155: ST_TO_ADDR
// if p3 = 11 then
58156: LD_VAR 0 3
58160: PUSH
58161: LD_INT 11
58163: EQUAL
58164: IFFALSE 58174
// sRefresh := true ;
58166: LD_ADDR_EXP 51
58170: PUSH
58171: LD_INT 1
58173: ST_TO_ADDR
// if p3 = 12 then
58174: LD_VAR 0 3
58178: PUSH
58179: LD_INT 12
58181: EQUAL
58182: IFFALSE 58192
// sExp := true ;
58184: LD_ADDR_EXP 52
58188: PUSH
58189: LD_INT 1
58191: ST_TO_ADDR
// if p3 = 13 then
58192: LD_VAR 0 3
58196: PUSH
58197: LD_INT 13
58199: EQUAL
58200: IFFALSE 58210
// sDepot := true ;
58202: LD_ADDR_EXP 53
58206: PUSH
58207: LD_INT 1
58209: ST_TO_ADDR
// if p3 = 14 then
58210: LD_VAR 0 3
58214: PUSH
58215: LD_INT 14
58217: EQUAL
58218: IFFALSE 58228
// sFlag := true ;
58220: LD_ADDR_EXP 54
58224: PUSH
58225: LD_INT 1
58227: ST_TO_ADDR
// if p3 = 15 then
58228: LD_VAR 0 3
58232: PUSH
58233: LD_INT 15
58235: EQUAL
58236: IFFALSE 58246
// sKamikadze := true ;
58238: LD_ADDR_EXP 62
58242: PUSH
58243: LD_INT 1
58245: ST_TO_ADDR
// if p3 = 16 then
58246: LD_VAR 0 3
58250: PUSH
58251: LD_INT 16
58253: EQUAL
58254: IFFALSE 58264
// sTroll := true ;
58256: LD_ADDR_EXP 63
58260: PUSH
58261: LD_INT 1
58263: ST_TO_ADDR
// if p3 = 17 then
58264: LD_VAR 0 3
58268: PUSH
58269: LD_INT 17
58271: EQUAL
58272: IFFALSE 58282
// sSlow := true ;
58274: LD_ADDR_EXP 64
58278: PUSH
58279: LD_INT 1
58281: ST_TO_ADDR
// if p3 = 18 then
58282: LD_VAR 0 3
58286: PUSH
58287: LD_INT 18
58289: EQUAL
58290: IFFALSE 58300
// sLack := true ;
58292: LD_ADDR_EXP 65
58296: PUSH
58297: LD_INT 1
58299: ST_TO_ADDR
// if p3 = 19 then
58300: LD_VAR 0 3
58304: PUSH
58305: LD_INT 19
58307: EQUAL
58308: IFFALSE 58318
// sTank := true ;
58310: LD_ADDR_EXP 67
58314: PUSH
58315: LD_INT 1
58317: ST_TO_ADDR
// if p3 = 20 then
58318: LD_VAR 0 3
58322: PUSH
58323: LD_INT 20
58325: EQUAL
58326: IFFALSE 58336
// sRemote := true ;
58328: LD_ADDR_EXP 68
58332: PUSH
58333: LD_INT 1
58335: ST_TO_ADDR
// if p3 = 21 then
58336: LD_VAR 0 3
58340: PUSH
58341: LD_INT 21
58343: EQUAL
58344: IFFALSE 58354
// sPowell := true ;
58346: LD_ADDR_EXP 69
58350: PUSH
58351: LD_INT 1
58353: ST_TO_ADDR
// if p3 = 22 then
58354: LD_VAR 0 3
58358: PUSH
58359: LD_INT 22
58361: EQUAL
58362: IFFALSE 58372
// sTeleport := true ;
58364: LD_ADDR_EXP 72
58368: PUSH
58369: LD_INT 1
58371: ST_TO_ADDR
// if p3 = 23 then
58372: LD_VAR 0 3
58376: PUSH
58377: LD_INT 23
58379: EQUAL
58380: IFFALSE 58390
// sOilTower := true ;
58382: LD_ADDR_EXP 74
58386: PUSH
58387: LD_INT 1
58389: ST_TO_ADDR
// if p3 = 24 then
58390: LD_VAR 0 3
58394: PUSH
58395: LD_INT 24
58397: EQUAL
58398: IFFALSE 58408
// sShovel := true ;
58400: LD_ADDR_EXP 75
58404: PUSH
58405: LD_INT 1
58407: ST_TO_ADDR
// if p3 = 25 then
58408: LD_VAR 0 3
58412: PUSH
58413: LD_INT 25
58415: EQUAL
58416: IFFALSE 58426
// sSheik := true ;
58418: LD_ADDR_EXP 76
58422: PUSH
58423: LD_INT 1
58425: ST_TO_ADDR
// if p3 = 26 then
58426: LD_VAR 0 3
58430: PUSH
58431: LD_INT 26
58433: EQUAL
58434: IFFALSE 58444
// sEarthquake := true ;
58436: LD_ADDR_EXP 78
58440: PUSH
58441: LD_INT 1
58443: ST_TO_ADDR
// if p3 = 27 then
58444: LD_VAR 0 3
58448: PUSH
58449: LD_INT 27
58451: EQUAL
58452: IFFALSE 58462
// sAI := true ;
58454: LD_ADDR_EXP 79
58458: PUSH
58459: LD_INT 1
58461: ST_TO_ADDR
// if p3 = 28 then
58462: LD_VAR 0 3
58466: PUSH
58467: LD_INT 28
58469: EQUAL
58470: IFFALSE 58480
// sCargo := true ;
58472: LD_ADDR_EXP 82
58476: PUSH
58477: LD_INT 1
58479: ST_TO_ADDR
// if p3 = 29 then
58480: LD_VAR 0 3
58484: PUSH
58485: LD_INT 29
58487: EQUAL
58488: IFFALSE 58498
// sDLaser := true ;
58490: LD_ADDR_EXP 83
58494: PUSH
58495: LD_INT 1
58497: ST_TO_ADDR
// if p3 = 30 then
58498: LD_VAR 0 3
58502: PUSH
58503: LD_INT 30
58505: EQUAL
58506: IFFALSE 58516
// sExchange := true ;
58508: LD_ADDR_EXP 84
58512: PUSH
58513: LD_INT 1
58515: ST_TO_ADDR
// if p3 = 31 then
58516: LD_VAR 0 3
58520: PUSH
58521: LD_INT 31
58523: EQUAL
58524: IFFALSE 58534
// sFac := true ;
58526: LD_ADDR_EXP 85
58530: PUSH
58531: LD_INT 1
58533: ST_TO_ADDR
// if p3 = 32 then
58534: LD_VAR 0 3
58538: PUSH
58539: LD_INT 32
58541: EQUAL
58542: IFFALSE 58552
// sPower := true ;
58544: LD_ADDR_EXP 86
58548: PUSH
58549: LD_INT 1
58551: ST_TO_ADDR
// if p3 = 33 then
58552: LD_VAR 0 3
58556: PUSH
58557: LD_INT 33
58559: EQUAL
58560: IFFALSE 58570
// sRandom := true ;
58562: LD_ADDR_EXP 87
58566: PUSH
58567: LD_INT 1
58569: ST_TO_ADDR
// if p3 = 34 then
58570: LD_VAR 0 3
58574: PUSH
58575: LD_INT 34
58577: EQUAL
58578: IFFALSE 58588
// sShield := true ;
58580: LD_ADDR_EXP 88
58584: PUSH
58585: LD_INT 1
58587: ST_TO_ADDR
// if p3 = 35 then
58588: LD_VAR 0 3
58592: PUSH
58593: LD_INT 35
58595: EQUAL
58596: IFFALSE 58606
// sTime := true ;
58598: LD_ADDR_EXP 89
58602: PUSH
58603: LD_INT 1
58605: ST_TO_ADDR
// if p3 = 36 then
58606: LD_VAR 0 3
58610: PUSH
58611: LD_INT 36
58613: EQUAL
58614: IFFALSE 58624
// sTools := true ;
58616: LD_ADDR_EXP 90
58620: PUSH
58621: LD_INT 1
58623: ST_TO_ADDR
// if p3 = 101 then
58624: LD_VAR 0 3
58628: PUSH
58629: LD_INT 101
58631: EQUAL
58632: IFFALSE 58642
// sSold := true ;
58634: LD_ADDR_EXP 55
58638: PUSH
58639: LD_INT 1
58641: ST_TO_ADDR
// if p3 = 102 then
58642: LD_VAR 0 3
58646: PUSH
58647: LD_INT 102
58649: EQUAL
58650: IFFALSE 58660
// sDiff := true ;
58652: LD_ADDR_EXP 56
58656: PUSH
58657: LD_INT 1
58659: ST_TO_ADDR
// if p3 = 103 then
58660: LD_VAR 0 3
58664: PUSH
58665: LD_INT 103
58667: EQUAL
58668: IFFALSE 58678
// sFog := true ;
58670: LD_ADDR_EXP 59
58674: PUSH
58675: LD_INT 1
58677: ST_TO_ADDR
// if p3 = 104 then
58678: LD_VAR 0 3
58682: PUSH
58683: LD_INT 104
58685: EQUAL
58686: IFFALSE 58696
// sReset := true ;
58688: LD_ADDR_EXP 60
58692: PUSH
58693: LD_INT 1
58695: ST_TO_ADDR
// if p3 = 105 then
58696: LD_VAR 0 3
58700: PUSH
58701: LD_INT 105
58703: EQUAL
58704: IFFALSE 58714
// sSun := true ;
58706: LD_ADDR_EXP 61
58710: PUSH
58711: LD_INT 1
58713: ST_TO_ADDR
// if p3 = 106 then
58714: LD_VAR 0 3
58718: PUSH
58719: LD_INT 106
58721: EQUAL
58722: IFFALSE 58732
// sTiger := true ;
58724: LD_ADDR_EXP 57
58728: PUSH
58729: LD_INT 1
58731: ST_TO_ADDR
// if p3 = 107 then
58732: LD_VAR 0 3
58736: PUSH
58737: LD_INT 107
58739: EQUAL
58740: IFFALSE 58750
// sBomb := true ;
58742: LD_ADDR_EXP 58
58746: PUSH
58747: LD_INT 1
58749: ST_TO_ADDR
// if p3 = 108 then
58750: LD_VAR 0 3
58754: PUSH
58755: LD_INT 108
58757: EQUAL
58758: IFFALSE 58768
// sWound := true ;
58760: LD_ADDR_EXP 66
58764: PUSH
58765: LD_INT 1
58767: ST_TO_ADDR
// if p3 = 109 then
58768: LD_VAR 0 3
58772: PUSH
58773: LD_INT 109
58775: EQUAL
58776: IFFALSE 58786
// sBetray := true ;
58778: LD_ADDR_EXP 70
58782: PUSH
58783: LD_INT 1
58785: ST_TO_ADDR
// if p3 = 110 then
58786: LD_VAR 0 3
58790: PUSH
58791: LD_INT 110
58793: EQUAL
58794: IFFALSE 58804
// sContamin := true ;
58796: LD_ADDR_EXP 71
58800: PUSH
58801: LD_INT 1
58803: ST_TO_ADDR
// if p3 = 111 then
58804: LD_VAR 0 3
58808: PUSH
58809: LD_INT 111
58811: EQUAL
58812: IFFALSE 58822
// sOil := true ;
58814: LD_ADDR_EXP 73
58818: PUSH
58819: LD_INT 1
58821: ST_TO_ADDR
// if p3 = 112 then
58822: LD_VAR 0 3
58826: PUSH
58827: LD_INT 112
58829: EQUAL
58830: IFFALSE 58840
// sStu := true ;
58832: LD_ADDR_EXP 77
58836: PUSH
58837: LD_INT 1
58839: ST_TO_ADDR
// if p3 = 113 then
58840: LD_VAR 0 3
58844: PUSH
58845: LD_INT 113
58847: EQUAL
58848: IFFALSE 58858
// sBazooka := true ;
58850: LD_ADDR_EXP 80
58854: PUSH
58855: LD_INT 1
58857: ST_TO_ADDR
// if p3 = 114 then
58858: LD_VAR 0 3
58862: PUSH
58863: LD_INT 114
58865: EQUAL
58866: IFFALSE 58876
// sMortar := true ;
58868: LD_ADDR_EXP 81
58872: PUSH
58873: LD_INT 1
58875: ST_TO_ADDR
// if p3 = 115 then
58876: LD_VAR 0 3
58880: PUSH
58881: LD_INT 115
58883: EQUAL
58884: IFFALSE 58894
// sRanger := true ;
58886: LD_ADDR_EXP 91
58890: PUSH
58891: LD_INT 1
58893: ST_TO_ADDR
// if p3 = 116 then
58894: LD_VAR 0 3
58898: PUSH
58899: LD_INT 116
58901: EQUAL
58902: IFFALSE 58912
// sComputer := true ;
58904: LD_ADDR_EXP 92
58908: PUSH
58909: LD_INT 1
58911: ST_TO_ADDR
// if p3 = 117 then
58912: LD_VAR 0 3
58916: PUSH
58917: LD_INT 117
58919: EQUAL
58920: IFFALSE 58930
// s30 := true ;
58922: LD_ADDR_EXP 93
58926: PUSH
58927: LD_INT 1
58929: ST_TO_ADDR
// if p3 = 118 then
58930: LD_VAR 0 3
58934: PUSH
58935: LD_INT 118
58937: EQUAL
58938: IFFALSE 58948
// s60 := true ;
58940: LD_ADDR_EXP 94
58944: PUSH
58945: LD_INT 1
58947: ST_TO_ADDR
// end ; if p2 = hack_mode then
58948: LD_VAR 0 2
58952: PUSH
58953: LD_INT 101
58955: EQUAL
58956: IFFALSE 59084
// begin case p3 of 1 :
58958: LD_VAR 0 3
58962: PUSH
58963: LD_INT 1
58965: DOUBLE
58966: EQUAL
58967: IFTRUE 58971
58969: GO 58978
58971: POP
// hHackUnlimitedResources ; 2 :
58972: CALL 71231 0 0
58976: GO 59084
58978: LD_INT 2
58980: DOUBLE
58981: EQUAL
58982: IFTRUE 58986
58984: GO 58993
58986: POP
// hHackSetLevel10 ; 3 :
58987: CALL 71364 0 0
58991: GO 59084
58993: LD_INT 3
58995: DOUBLE
58996: EQUAL
58997: IFTRUE 59001
58999: GO 59008
59001: POP
// hHackSetLevel10YourUnits ; 4 :
59002: CALL 71449 0 0
59006: GO 59084
59008: LD_INT 4
59010: DOUBLE
59011: EQUAL
59012: IFTRUE 59016
59014: GO 59023
59016: POP
// hHackInvincible ; 5 :
59017: CALL 71897 0 0
59021: GO 59084
59023: LD_INT 5
59025: DOUBLE
59026: EQUAL
59027: IFTRUE 59031
59029: GO 59038
59031: POP
// hHackInvisible ; 6 :
59032: CALL 72008 0 0
59036: GO 59084
59038: LD_INT 6
59040: DOUBLE
59041: EQUAL
59042: IFTRUE 59046
59044: GO 59053
59046: POP
// hHackChangeYourSide ; 7 :
59047: CALL 72065 0 0
59051: GO 59084
59053: LD_INT 7
59055: DOUBLE
59056: EQUAL
59057: IFTRUE 59061
59059: GO 59068
59061: POP
// hHackChangeUnitSide ; 8 :
59062: CALL 72107 0 0
59066: GO 59084
59068: LD_INT 8
59070: DOUBLE
59071: EQUAL
59072: IFTRUE 59076
59074: GO 59083
59076: POP
// hHackFog ; end ;
59077: CALL 72208 0 0
59081: GO 59084
59083: POP
// end ; if p2 = game_save_mode then
59084: LD_VAR 0 2
59088: PUSH
59089: LD_INT 102
59091: EQUAL
59092: IFFALSE 59147
// begin if p3 = 1 then
59094: LD_VAR 0 3
59098: PUSH
59099: LD_INT 1
59101: EQUAL
59102: IFFALSE 59114
// globalGameSaveCounter := p4 ;
59104: LD_ADDR_EXP 37
59108: PUSH
59109: LD_VAR 0 4
59113: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59114: LD_VAR 0 3
59118: PUSH
59119: LD_INT 2
59121: EQUAL
59122: PUSH
59123: LD_EXP 37
59127: AND
59128: IFFALSE 59147
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59130: LD_STRING setGameSaveCounter(
59132: PUSH
59133: LD_EXP 37
59137: STR
59138: PUSH
59139: LD_STRING )
59141: STR
59142: PPUSH
59143: CALL_OW 559
// end ; end ;
59147: LD_VAR 0 7
59151: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59152: LD_INT 0
59154: PPUSH
// streamModeActive := false ;
59155: LD_ADDR_EXP 38
59159: PUSH
59160: LD_INT 0
59162: ST_TO_ADDR
// normalCounter := 36 ;
59163: LD_ADDR_EXP 39
59167: PUSH
59168: LD_INT 36
59170: ST_TO_ADDR
// hardcoreCounter := 18 ;
59171: LD_ADDR_EXP 40
59175: PUSH
59176: LD_INT 18
59178: ST_TO_ADDR
// sRocket := false ;
59179: LD_ADDR_EXP 43
59183: PUSH
59184: LD_INT 0
59186: ST_TO_ADDR
// sSpeed := false ;
59187: LD_ADDR_EXP 42
59191: PUSH
59192: LD_INT 0
59194: ST_TO_ADDR
// sEngine := false ;
59195: LD_ADDR_EXP 44
59199: PUSH
59200: LD_INT 0
59202: ST_TO_ADDR
// sSpec := false ;
59203: LD_ADDR_EXP 41
59207: PUSH
59208: LD_INT 0
59210: ST_TO_ADDR
// sLevel := false ;
59211: LD_ADDR_EXP 45
59215: PUSH
59216: LD_INT 0
59218: ST_TO_ADDR
// sArmoury := false ;
59219: LD_ADDR_EXP 46
59223: PUSH
59224: LD_INT 0
59226: ST_TO_ADDR
// sRadar := false ;
59227: LD_ADDR_EXP 47
59231: PUSH
59232: LD_INT 0
59234: ST_TO_ADDR
// sBunker := false ;
59235: LD_ADDR_EXP 48
59239: PUSH
59240: LD_INT 0
59242: ST_TO_ADDR
// sHack := false ;
59243: LD_ADDR_EXP 49
59247: PUSH
59248: LD_INT 0
59250: ST_TO_ADDR
// sFire := false ;
59251: LD_ADDR_EXP 50
59255: PUSH
59256: LD_INT 0
59258: ST_TO_ADDR
// sRefresh := false ;
59259: LD_ADDR_EXP 51
59263: PUSH
59264: LD_INT 0
59266: ST_TO_ADDR
// sExp := false ;
59267: LD_ADDR_EXP 52
59271: PUSH
59272: LD_INT 0
59274: ST_TO_ADDR
// sDepot := false ;
59275: LD_ADDR_EXP 53
59279: PUSH
59280: LD_INT 0
59282: ST_TO_ADDR
// sFlag := false ;
59283: LD_ADDR_EXP 54
59287: PUSH
59288: LD_INT 0
59290: ST_TO_ADDR
// sKamikadze := false ;
59291: LD_ADDR_EXP 62
59295: PUSH
59296: LD_INT 0
59298: ST_TO_ADDR
// sTroll := false ;
59299: LD_ADDR_EXP 63
59303: PUSH
59304: LD_INT 0
59306: ST_TO_ADDR
// sSlow := false ;
59307: LD_ADDR_EXP 64
59311: PUSH
59312: LD_INT 0
59314: ST_TO_ADDR
// sLack := false ;
59315: LD_ADDR_EXP 65
59319: PUSH
59320: LD_INT 0
59322: ST_TO_ADDR
// sTank := false ;
59323: LD_ADDR_EXP 67
59327: PUSH
59328: LD_INT 0
59330: ST_TO_ADDR
// sRemote := false ;
59331: LD_ADDR_EXP 68
59335: PUSH
59336: LD_INT 0
59338: ST_TO_ADDR
// sPowell := false ;
59339: LD_ADDR_EXP 69
59343: PUSH
59344: LD_INT 0
59346: ST_TO_ADDR
// sTeleport := false ;
59347: LD_ADDR_EXP 72
59351: PUSH
59352: LD_INT 0
59354: ST_TO_ADDR
// sOilTower := false ;
59355: LD_ADDR_EXP 74
59359: PUSH
59360: LD_INT 0
59362: ST_TO_ADDR
// sShovel := false ;
59363: LD_ADDR_EXP 75
59367: PUSH
59368: LD_INT 0
59370: ST_TO_ADDR
// sSheik := false ;
59371: LD_ADDR_EXP 76
59375: PUSH
59376: LD_INT 0
59378: ST_TO_ADDR
// sEarthquake := false ;
59379: LD_ADDR_EXP 78
59383: PUSH
59384: LD_INT 0
59386: ST_TO_ADDR
// sAI := false ;
59387: LD_ADDR_EXP 79
59391: PUSH
59392: LD_INT 0
59394: ST_TO_ADDR
// sCargo := false ;
59395: LD_ADDR_EXP 82
59399: PUSH
59400: LD_INT 0
59402: ST_TO_ADDR
// sDLaser := false ;
59403: LD_ADDR_EXP 83
59407: PUSH
59408: LD_INT 0
59410: ST_TO_ADDR
// sExchange := false ;
59411: LD_ADDR_EXP 84
59415: PUSH
59416: LD_INT 0
59418: ST_TO_ADDR
// sFac := false ;
59419: LD_ADDR_EXP 85
59423: PUSH
59424: LD_INT 0
59426: ST_TO_ADDR
// sPower := false ;
59427: LD_ADDR_EXP 86
59431: PUSH
59432: LD_INT 0
59434: ST_TO_ADDR
// sRandom := false ;
59435: LD_ADDR_EXP 87
59439: PUSH
59440: LD_INT 0
59442: ST_TO_ADDR
// sShield := false ;
59443: LD_ADDR_EXP 88
59447: PUSH
59448: LD_INT 0
59450: ST_TO_ADDR
// sTime := false ;
59451: LD_ADDR_EXP 89
59455: PUSH
59456: LD_INT 0
59458: ST_TO_ADDR
// sTools := false ;
59459: LD_ADDR_EXP 90
59463: PUSH
59464: LD_INT 0
59466: ST_TO_ADDR
// sSold := false ;
59467: LD_ADDR_EXP 55
59471: PUSH
59472: LD_INT 0
59474: ST_TO_ADDR
// sDiff := false ;
59475: LD_ADDR_EXP 56
59479: PUSH
59480: LD_INT 0
59482: ST_TO_ADDR
// sFog := false ;
59483: LD_ADDR_EXP 59
59487: PUSH
59488: LD_INT 0
59490: ST_TO_ADDR
// sReset := false ;
59491: LD_ADDR_EXP 60
59495: PUSH
59496: LD_INT 0
59498: ST_TO_ADDR
// sSun := false ;
59499: LD_ADDR_EXP 61
59503: PUSH
59504: LD_INT 0
59506: ST_TO_ADDR
// sTiger := false ;
59507: LD_ADDR_EXP 57
59511: PUSH
59512: LD_INT 0
59514: ST_TO_ADDR
// sBomb := false ;
59515: LD_ADDR_EXP 58
59519: PUSH
59520: LD_INT 0
59522: ST_TO_ADDR
// sWound := false ;
59523: LD_ADDR_EXP 66
59527: PUSH
59528: LD_INT 0
59530: ST_TO_ADDR
// sBetray := false ;
59531: LD_ADDR_EXP 70
59535: PUSH
59536: LD_INT 0
59538: ST_TO_ADDR
// sContamin := false ;
59539: LD_ADDR_EXP 71
59543: PUSH
59544: LD_INT 0
59546: ST_TO_ADDR
// sOil := false ;
59547: LD_ADDR_EXP 73
59551: PUSH
59552: LD_INT 0
59554: ST_TO_ADDR
// sStu := false ;
59555: LD_ADDR_EXP 77
59559: PUSH
59560: LD_INT 0
59562: ST_TO_ADDR
// sBazooka := false ;
59563: LD_ADDR_EXP 80
59567: PUSH
59568: LD_INT 0
59570: ST_TO_ADDR
// sMortar := false ;
59571: LD_ADDR_EXP 81
59575: PUSH
59576: LD_INT 0
59578: ST_TO_ADDR
// sRanger := false ;
59579: LD_ADDR_EXP 91
59583: PUSH
59584: LD_INT 0
59586: ST_TO_ADDR
// sComputer := false ;
59587: LD_ADDR_EXP 92
59591: PUSH
59592: LD_INT 0
59594: ST_TO_ADDR
// s30 := false ;
59595: LD_ADDR_EXP 93
59599: PUSH
59600: LD_INT 0
59602: ST_TO_ADDR
// s60 := false ;
59603: LD_ADDR_EXP 94
59607: PUSH
59608: LD_INT 0
59610: ST_TO_ADDR
// end ;
59611: LD_VAR 0 1
59615: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59616: LD_INT 0
59618: PPUSH
59619: PPUSH
59620: PPUSH
59621: PPUSH
59622: PPUSH
59623: PPUSH
59624: PPUSH
// result := [ ] ;
59625: LD_ADDR_VAR 0 2
59629: PUSH
59630: EMPTY
59631: ST_TO_ADDR
// if campaign_id = 1 then
59632: LD_OWVAR 69
59636: PUSH
59637: LD_INT 1
59639: EQUAL
59640: IFFALSE 62806
// begin case mission_number of 1 :
59642: LD_OWVAR 70
59646: PUSH
59647: LD_INT 1
59649: DOUBLE
59650: EQUAL
59651: IFTRUE 59655
59653: GO 59731
59655: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59656: LD_ADDR_VAR 0 2
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: LD_INT 4
59666: PUSH
59667: LD_INT 11
59669: PUSH
59670: LD_INT 12
59672: PUSH
59673: LD_INT 15
59675: PUSH
59676: LD_INT 16
59678: PUSH
59679: LD_INT 22
59681: PUSH
59682: LD_INT 23
59684: PUSH
59685: LD_INT 26
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 101
59701: PUSH
59702: LD_INT 102
59704: PUSH
59705: LD_INT 106
59707: PUSH
59708: LD_INT 116
59710: PUSH
59711: LD_INT 117
59713: PUSH
59714: LD_INT 118
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: ST_TO_ADDR
59729: GO 62804
59731: LD_INT 2
59733: DOUBLE
59734: EQUAL
59735: IFTRUE 59739
59737: GO 59823
59739: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59740: LD_ADDR_VAR 0 2
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: LD_INT 11
59753: PUSH
59754: LD_INT 12
59756: PUSH
59757: LD_INT 15
59759: PUSH
59760: LD_INT 16
59762: PUSH
59763: LD_INT 22
59765: PUSH
59766: LD_INT 23
59768: PUSH
59769: LD_INT 26
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 101
59785: PUSH
59786: LD_INT 102
59788: PUSH
59789: LD_INT 105
59791: PUSH
59792: LD_INT 106
59794: PUSH
59795: LD_INT 108
59797: PUSH
59798: LD_INT 116
59800: PUSH
59801: LD_INT 117
59803: PUSH
59804: LD_INT 118
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: ST_TO_ADDR
59821: GO 62804
59823: LD_INT 3
59825: DOUBLE
59826: EQUAL
59827: IFTRUE 59831
59829: GO 59919
59831: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
59832: LD_ADDR_VAR 0 2
59836: PUSH
59837: LD_INT 2
59839: PUSH
59840: LD_INT 4
59842: PUSH
59843: LD_INT 5
59845: PUSH
59846: LD_INT 11
59848: PUSH
59849: LD_INT 12
59851: PUSH
59852: LD_INT 15
59854: PUSH
59855: LD_INT 16
59857: PUSH
59858: LD_INT 22
59860: PUSH
59861: LD_INT 26
59863: PUSH
59864: LD_INT 36
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 101
59881: PUSH
59882: LD_INT 102
59884: PUSH
59885: LD_INT 105
59887: PUSH
59888: LD_INT 106
59890: PUSH
59891: LD_INT 108
59893: PUSH
59894: LD_INT 116
59896: PUSH
59897: LD_INT 117
59899: PUSH
59900: LD_INT 118
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: ST_TO_ADDR
59917: GO 62804
59919: LD_INT 4
59921: DOUBLE
59922: EQUAL
59923: IFTRUE 59927
59925: GO 60023
59927: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
59928: LD_ADDR_VAR 0 2
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: LD_INT 4
59938: PUSH
59939: LD_INT 5
59941: PUSH
59942: LD_INT 8
59944: PUSH
59945: LD_INT 11
59947: PUSH
59948: LD_INT 12
59950: PUSH
59951: LD_INT 15
59953: PUSH
59954: LD_INT 16
59956: PUSH
59957: LD_INT 22
59959: PUSH
59960: LD_INT 23
59962: PUSH
59963: LD_INT 26
59965: PUSH
59966: LD_INT 36
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 101
59985: PUSH
59986: LD_INT 102
59988: PUSH
59989: LD_INT 105
59991: PUSH
59992: LD_INT 106
59994: PUSH
59995: LD_INT 108
59997: PUSH
59998: LD_INT 116
60000: PUSH
60001: LD_INT 117
60003: PUSH
60004: LD_INT 118
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: ST_TO_ADDR
60021: GO 62804
60023: LD_INT 5
60025: DOUBLE
60026: EQUAL
60027: IFTRUE 60031
60029: GO 60143
60031: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60032: LD_ADDR_VAR 0 2
60036: PUSH
60037: LD_INT 2
60039: PUSH
60040: LD_INT 4
60042: PUSH
60043: LD_INT 5
60045: PUSH
60046: LD_INT 6
60048: PUSH
60049: LD_INT 8
60051: PUSH
60052: LD_INT 11
60054: PUSH
60055: LD_INT 12
60057: PUSH
60058: LD_INT 15
60060: PUSH
60061: LD_INT 16
60063: PUSH
60064: LD_INT 22
60066: PUSH
60067: LD_INT 23
60069: PUSH
60070: LD_INT 25
60072: PUSH
60073: LD_INT 26
60075: PUSH
60076: LD_INT 36
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 101
60097: PUSH
60098: LD_INT 102
60100: PUSH
60101: LD_INT 105
60103: PUSH
60104: LD_INT 106
60106: PUSH
60107: LD_INT 108
60109: PUSH
60110: LD_INT 109
60112: PUSH
60113: LD_INT 112
60115: PUSH
60116: LD_INT 116
60118: PUSH
60119: LD_INT 117
60121: PUSH
60122: LD_INT 118
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: ST_TO_ADDR
60141: GO 62804
60143: LD_INT 6
60145: DOUBLE
60146: EQUAL
60147: IFTRUE 60151
60149: GO 60283
60151: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60152: LD_ADDR_VAR 0 2
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: LD_INT 4
60162: PUSH
60163: LD_INT 5
60165: PUSH
60166: LD_INT 6
60168: PUSH
60169: LD_INT 8
60171: PUSH
60172: LD_INT 11
60174: PUSH
60175: LD_INT 12
60177: PUSH
60178: LD_INT 15
60180: PUSH
60181: LD_INT 16
60183: PUSH
60184: LD_INT 20
60186: PUSH
60187: LD_INT 21
60189: PUSH
60190: LD_INT 22
60192: PUSH
60193: LD_INT 23
60195: PUSH
60196: LD_INT 25
60198: PUSH
60199: LD_INT 26
60201: PUSH
60202: LD_INT 30
60204: PUSH
60205: LD_INT 31
60207: PUSH
60208: LD_INT 32
60210: PUSH
60211: LD_INT 36
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 101
60237: PUSH
60238: LD_INT 102
60240: PUSH
60241: LD_INT 105
60243: PUSH
60244: LD_INT 106
60246: PUSH
60247: LD_INT 108
60249: PUSH
60250: LD_INT 109
60252: PUSH
60253: LD_INT 112
60255: PUSH
60256: LD_INT 116
60258: PUSH
60259: LD_INT 117
60261: PUSH
60262: LD_INT 118
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: ST_TO_ADDR
60281: GO 62804
60283: LD_INT 7
60285: DOUBLE
60286: EQUAL
60287: IFTRUE 60291
60289: GO 60403
60291: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60292: LD_ADDR_VAR 0 2
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: LD_INT 4
60302: PUSH
60303: LD_INT 5
60305: PUSH
60306: LD_INT 7
60308: PUSH
60309: LD_INT 11
60311: PUSH
60312: LD_INT 12
60314: PUSH
60315: LD_INT 15
60317: PUSH
60318: LD_INT 16
60320: PUSH
60321: LD_INT 20
60323: PUSH
60324: LD_INT 21
60326: PUSH
60327: LD_INT 22
60329: PUSH
60330: LD_INT 23
60332: PUSH
60333: LD_INT 25
60335: PUSH
60336: LD_INT 26
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 101
60357: PUSH
60358: LD_INT 102
60360: PUSH
60361: LD_INT 103
60363: PUSH
60364: LD_INT 105
60366: PUSH
60367: LD_INT 106
60369: PUSH
60370: LD_INT 108
60372: PUSH
60373: LD_INT 112
60375: PUSH
60376: LD_INT 116
60378: PUSH
60379: LD_INT 117
60381: PUSH
60382: LD_INT 118
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: ST_TO_ADDR
60401: GO 62804
60403: LD_INT 8
60405: DOUBLE
60406: EQUAL
60407: IFTRUE 60411
60409: GO 60551
60411: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60412: LD_ADDR_VAR 0 2
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: LD_INT 4
60422: PUSH
60423: LD_INT 5
60425: PUSH
60426: LD_INT 6
60428: PUSH
60429: LD_INT 7
60431: PUSH
60432: LD_INT 8
60434: PUSH
60435: LD_INT 11
60437: PUSH
60438: LD_INT 12
60440: PUSH
60441: LD_INT 15
60443: PUSH
60444: LD_INT 16
60446: PUSH
60447: LD_INT 20
60449: PUSH
60450: LD_INT 21
60452: PUSH
60453: LD_INT 22
60455: PUSH
60456: LD_INT 23
60458: PUSH
60459: LD_INT 25
60461: PUSH
60462: LD_INT 26
60464: PUSH
60465: LD_INT 30
60467: PUSH
60468: LD_INT 31
60470: PUSH
60471: LD_INT 32
60473: PUSH
60474: LD_INT 36
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 101
60501: PUSH
60502: LD_INT 102
60504: PUSH
60505: LD_INT 103
60507: PUSH
60508: LD_INT 105
60510: PUSH
60511: LD_INT 106
60513: PUSH
60514: LD_INT 108
60516: PUSH
60517: LD_INT 109
60519: PUSH
60520: LD_INT 112
60522: PUSH
60523: LD_INT 116
60525: PUSH
60526: LD_INT 117
60528: PUSH
60529: LD_INT 118
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: ST_TO_ADDR
60549: GO 62804
60551: LD_INT 9
60553: DOUBLE
60554: EQUAL
60555: IFTRUE 60559
60557: GO 60707
60559: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60560: LD_ADDR_VAR 0 2
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: LD_INT 4
60570: PUSH
60571: LD_INT 5
60573: PUSH
60574: LD_INT 6
60576: PUSH
60577: LD_INT 7
60579: PUSH
60580: LD_INT 8
60582: PUSH
60583: LD_INT 11
60585: PUSH
60586: LD_INT 12
60588: PUSH
60589: LD_INT 15
60591: PUSH
60592: LD_INT 16
60594: PUSH
60595: LD_INT 20
60597: PUSH
60598: LD_INT 21
60600: PUSH
60601: LD_INT 22
60603: PUSH
60604: LD_INT 23
60606: PUSH
60607: LD_INT 25
60609: PUSH
60610: LD_INT 26
60612: PUSH
60613: LD_INT 28
60615: PUSH
60616: LD_INT 30
60618: PUSH
60619: LD_INT 31
60621: PUSH
60622: LD_INT 32
60624: PUSH
60625: LD_INT 36
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 101
60653: PUSH
60654: LD_INT 102
60656: PUSH
60657: LD_INT 103
60659: PUSH
60660: LD_INT 105
60662: PUSH
60663: LD_INT 106
60665: PUSH
60666: LD_INT 108
60668: PUSH
60669: LD_INT 109
60671: PUSH
60672: LD_INT 112
60674: PUSH
60675: LD_INT 114
60677: PUSH
60678: LD_INT 116
60680: PUSH
60681: LD_INT 117
60683: PUSH
60684: LD_INT 118
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: ST_TO_ADDR
60705: GO 62804
60707: LD_INT 10
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60715
60713: GO 60911
60715: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60716: LD_ADDR_VAR 0 2
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 4
60726: PUSH
60727: LD_INT 5
60729: PUSH
60730: LD_INT 6
60732: PUSH
60733: LD_INT 7
60735: PUSH
60736: LD_INT 8
60738: PUSH
60739: LD_INT 9
60741: PUSH
60742: LD_INT 10
60744: PUSH
60745: LD_INT 11
60747: PUSH
60748: LD_INT 12
60750: PUSH
60751: LD_INT 13
60753: PUSH
60754: LD_INT 14
60756: PUSH
60757: LD_INT 15
60759: PUSH
60760: LD_INT 16
60762: PUSH
60763: LD_INT 17
60765: PUSH
60766: LD_INT 18
60768: PUSH
60769: LD_INT 19
60771: PUSH
60772: LD_INT 20
60774: PUSH
60775: LD_INT 21
60777: PUSH
60778: LD_INT 22
60780: PUSH
60781: LD_INT 23
60783: PUSH
60784: LD_INT 24
60786: PUSH
60787: LD_INT 25
60789: PUSH
60790: LD_INT 26
60792: PUSH
60793: LD_INT 28
60795: PUSH
60796: LD_INT 30
60798: PUSH
60799: LD_INT 31
60801: PUSH
60802: LD_INT 32
60804: PUSH
60805: LD_INT 36
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 101
60841: PUSH
60842: LD_INT 102
60844: PUSH
60845: LD_INT 103
60847: PUSH
60848: LD_INT 104
60850: PUSH
60851: LD_INT 105
60853: PUSH
60854: LD_INT 106
60856: PUSH
60857: LD_INT 107
60859: PUSH
60860: LD_INT 108
60862: PUSH
60863: LD_INT 109
60865: PUSH
60866: LD_INT 110
60868: PUSH
60869: LD_INT 111
60871: PUSH
60872: LD_INT 112
60874: PUSH
60875: LD_INT 114
60877: PUSH
60878: LD_INT 116
60880: PUSH
60881: LD_INT 117
60883: PUSH
60884: LD_INT 118
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: ST_TO_ADDR
60909: GO 62804
60911: LD_INT 11
60913: DOUBLE
60914: EQUAL
60915: IFTRUE 60919
60917: GO 61123
60919: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
60920: LD_ADDR_VAR 0 2
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: LD_INT 3
60930: PUSH
60931: LD_INT 4
60933: PUSH
60934: LD_INT 5
60936: PUSH
60937: LD_INT 6
60939: PUSH
60940: LD_INT 7
60942: PUSH
60943: LD_INT 8
60945: PUSH
60946: LD_INT 9
60948: PUSH
60949: LD_INT 10
60951: PUSH
60952: LD_INT 11
60954: PUSH
60955: LD_INT 12
60957: PUSH
60958: LD_INT 13
60960: PUSH
60961: LD_INT 14
60963: PUSH
60964: LD_INT 15
60966: PUSH
60967: LD_INT 16
60969: PUSH
60970: LD_INT 17
60972: PUSH
60973: LD_INT 18
60975: PUSH
60976: LD_INT 19
60978: PUSH
60979: LD_INT 20
60981: PUSH
60982: LD_INT 21
60984: PUSH
60985: LD_INT 22
60987: PUSH
60988: LD_INT 23
60990: PUSH
60991: LD_INT 24
60993: PUSH
60994: LD_INT 25
60996: PUSH
60997: LD_INT 26
60999: PUSH
61000: LD_INT 28
61002: PUSH
61003: LD_INT 30
61005: PUSH
61006: LD_INT 31
61008: PUSH
61009: LD_INT 32
61011: PUSH
61012: LD_INT 34
61014: PUSH
61015: LD_INT 36
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 101
61053: PUSH
61054: LD_INT 102
61056: PUSH
61057: LD_INT 103
61059: PUSH
61060: LD_INT 104
61062: PUSH
61063: LD_INT 105
61065: PUSH
61066: LD_INT 106
61068: PUSH
61069: LD_INT 107
61071: PUSH
61072: LD_INT 108
61074: PUSH
61075: LD_INT 109
61077: PUSH
61078: LD_INT 110
61080: PUSH
61081: LD_INT 111
61083: PUSH
61084: LD_INT 112
61086: PUSH
61087: LD_INT 114
61089: PUSH
61090: LD_INT 116
61092: PUSH
61093: LD_INT 117
61095: PUSH
61096: LD_INT 118
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: ST_TO_ADDR
61121: GO 62804
61123: LD_INT 12
61125: DOUBLE
61126: EQUAL
61127: IFTRUE 61131
61129: GO 61351
61131: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61132: LD_ADDR_VAR 0 2
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: LD_INT 3
61145: PUSH
61146: LD_INT 4
61148: PUSH
61149: LD_INT 5
61151: PUSH
61152: LD_INT 6
61154: PUSH
61155: LD_INT 7
61157: PUSH
61158: LD_INT 8
61160: PUSH
61161: LD_INT 9
61163: PUSH
61164: LD_INT 10
61166: PUSH
61167: LD_INT 11
61169: PUSH
61170: LD_INT 12
61172: PUSH
61173: LD_INT 13
61175: PUSH
61176: LD_INT 14
61178: PUSH
61179: LD_INT 15
61181: PUSH
61182: LD_INT 16
61184: PUSH
61185: LD_INT 17
61187: PUSH
61188: LD_INT 18
61190: PUSH
61191: LD_INT 19
61193: PUSH
61194: LD_INT 20
61196: PUSH
61197: LD_INT 21
61199: PUSH
61200: LD_INT 22
61202: PUSH
61203: LD_INT 23
61205: PUSH
61206: LD_INT 24
61208: PUSH
61209: LD_INT 25
61211: PUSH
61212: LD_INT 26
61214: PUSH
61215: LD_INT 27
61217: PUSH
61218: LD_INT 28
61220: PUSH
61221: LD_INT 30
61223: PUSH
61224: LD_INT 31
61226: PUSH
61227: LD_INT 32
61229: PUSH
61230: LD_INT 33
61232: PUSH
61233: LD_INT 34
61235: PUSH
61236: LD_INT 36
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 101
61277: PUSH
61278: LD_INT 102
61280: PUSH
61281: LD_INT 103
61283: PUSH
61284: LD_INT 104
61286: PUSH
61287: LD_INT 105
61289: PUSH
61290: LD_INT 106
61292: PUSH
61293: LD_INT 107
61295: PUSH
61296: LD_INT 108
61298: PUSH
61299: LD_INT 109
61301: PUSH
61302: LD_INT 110
61304: PUSH
61305: LD_INT 111
61307: PUSH
61308: LD_INT 112
61310: PUSH
61311: LD_INT 113
61313: PUSH
61314: LD_INT 114
61316: PUSH
61317: LD_INT 116
61319: PUSH
61320: LD_INT 117
61322: PUSH
61323: LD_INT 118
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: ST_TO_ADDR
61349: GO 62804
61351: LD_INT 13
61353: DOUBLE
61354: EQUAL
61355: IFTRUE 61359
61357: GO 61567
61359: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61360: LD_ADDR_VAR 0 2
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: LD_INT 2
61370: PUSH
61371: LD_INT 3
61373: PUSH
61374: LD_INT 4
61376: PUSH
61377: LD_INT 5
61379: PUSH
61380: LD_INT 8
61382: PUSH
61383: LD_INT 9
61385: PUSH
61386: LD_INT 10
61388: PUSH
61389: LD_INT 11
61391: PUSH
61392: LD_INT 12
61394: PUSH
61395: LD_INT 14
61397: PUSH
61398: LD_INT 15
61400: PUSH
61401: LD_INT 16
61403: PUSH
61404: LD_INT 17
61406: PUSH
61407: LD_INT 18
61409: PUSH
61410: LD_INT 19
61412: PUSH
61413: LD_INT 20
61415: PUSH
61416: LD_INT 21
61418: PUSH
61419: LD_INT 22
61421: PUSH
61422: LD_INT 23
61424: PUSH
61425: LD_INT 24
61427: PUSH
61428: LD_INT 25
61430: PUSH
61431: LD_INT 26
61433: PUSH
61434: LD_INT 27
61436: PUSH
61437: LD_INT 28
61439: PUSH
61440: LD_INT 30
61442: PUSH
61443: LD_INT 31
61445: PUSH
61446: LD_INT 32
61448: PUSH
61449: LD_INT 33
61451: PUSH
61452: LD_INT 34
61454: PUSH
61455: LD_INT 36
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 101
61493: PUSH
61494: LD_INT 102
61496: PUSH
61497: LD_INT 103
61499: PUSH
61500: LD_INT 104
61502: PUSH
61503: LD_INT 105
61505: PUSH
61506: LD_INT 106
61508: PUSH
61509: LD_INT 107
61511: PUSH
61512: LD_INT 108
61514: PUSH
61515: LD_INT 109
61517: PUSH
61518: LD_INT 110
61520: PUSH
61521: LD_INT 111
61523: PUSH
61524: LD_INT 112
61526: PUSH
61527: LD_INT 113
61529: PUSH
61530: LD_INT 114
61532: PUSH
61533: LD_INT 116
61535: PUSH
61536: LD_INT 117
61538: PUSH
61539: LD_INT 118
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: ST_TO_ADDR
61565: GO 62804
61567: LD_INT 14
61569: DOUBLE
61570: EQUAL
61571: IFTRUE 61575
61573: GO 61799
61575: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61576: LD_ADDR_VAR 0 2
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: LD_INT 3
61589: PUSH
61590: LD_INT 4
61592: PUSH
61593: LD_INT 5
61595: PUSH
61596: LD_INT 6
61598: PUSH
61599: LD_INT 7
61601: PUSH
61602: LD_INT 8
61604: PUSH
61605: LD_INT 9
61607: PUSH
61608: LD_INT 10
61610: PUSH
61611: LD_INT 11
61613: PUSH
61614: LD_INT 12
61616: PUSH
61617: LD_INT 13
61619: PUSH
61620: LD_INT 14
61622: PUSH
61623: LD_INT 15
61625: PUSH
61626: LD_INT 16
61628: PUSH
61629: LD_INT 17
61631: PUSH
61632: LD_INT 18
61634: PUSH
61635: LD_INT 19
61637: PUSH
61638: LD_INT 20
61640: PUSH
61641: LD_INT 21
61643: PUSH
61644: LD_INT 22
61646: PUSH
61647: LD_INT 23
61649: PUSH
61650: LD_INT 24
61652: PUSH
61653: LD_INT 25
61655: PUSH
61656: LD_INT 26
61658: PUSH
61659: LD_INT 27
61661: PUSH
61662: LD_INT 28
61664: PUSH
61665: LD_INT 29
61667: PUSH
61668: LD_INT 30
61670: PUSH
61671: LD_INT 31
61673: PUSH
61674: LD_INT 32
61676: PUSH
61677: LD_INT 33
61679: PUSH
61680: LD_INT 34
61682: PUSH
61683: LD_INT 36
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 101
61725: PUSH
61726: LD_INT 102
61728: PUSH
61729: LD_INT 103
61731: PUSH
61732: LD_INT 104
61734: PUSH
61735: LD_INT 105
61737: PUSH
61738: LD_INT 106
61740: PUSH
61741: LD_INT 107
61743: PUSH
61744: LD_INT 108
61746: PUSH
61747: LD_INT 109
61749: PUSH
61750: LD_INT 110
61752: PUSH
61753: LD_INT 111
61755: PUSH
61756: LD_INT 112
61758: PUSH
61759: LD_INT 113
61761: PUSH
61762: LD_INT 114
61764: PUSH
61765: LD_INT 116
61767: PUSH
61768: LD_INT 117
61770: PUSH
61771: LD_INT 118
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: ST_TO_ADDR
61797: GO 62804
61799: LD_INT 15
61801: DOUBLE
61802: EQUAL
61803: IFTRUE 61807
61805: GO 62031
61807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
61808: LD_ADDR_VAR 0 2
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: LD_INT 2
61818: PUSH
61819: LD_INT 3
61821: PUSH
61822: LD_INT 4
61824: PUSH
61825: LD_INT 5
61827: PUSH
61828: LD_INT 6
61830: PUSH
61831: LD_INT 7
61833: PUSH
61834: LD_INT 8
61836: PUSH
61837: LD_INT 9
61839: PUSH
61840: LD_INT 10
61842: PUSH
61843: LD_INT 11
61845: PUSH
61846: LD_INT 12
61848: PUSH
61849: LD_INT 13
61851: PUSH
61852: LD_INT 14
61854: PUSH
61855: LD_INT 15
61857: PUSH
61858: LD_INT 16
61860: PUSH
61861: LD_INT 17
61863: PUSH
61864: LD_INT 18
61866: PUSH
61867: LD_INT 19
61869: PUSH
61870: LD_INT 20
61872: PUSH
61873: LD_INT 21
61875: PUSH
61876: LD_INT 22
61878: PUSH
61879: LD_INT 23
61881: PUSH
61882: LD_INT 24
61884: PUSH
61885: LD_INT 25
61887: PUSH
61888: LD_INT 26
61890: PUSH
61891: LD_INT 27
61893: PUSH
61894: LD_INT 28
61896: PUSH
61897: LD_INT 29
61899: PUSH
61900: LD_INT 30
61902: PUSH
61903: LD_INT 31
61905: PUSH
61906: LD_INT 32
61908: PUSH
61909: LD_INT 33
61911: PUSH
61912: LD_INT 34
61914: PUSH
61915: LD_INT 36
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 101
61957: PUSH
61958: LD_INT 102
61960: PUSH
61961: LD_INT 103
61963: PUSH
61964: LD_INT 104
61966: PUSH
61967: LD_INT 105
61969: PUSH
61970: LD_INT 106
61972: PUSH
61973: LD_INT 107
61975: PUSH
61976: LD_INT 108
61978: PUSH
61979: LD_INT 109
61981: PUSH
61982: LD_INT 110
61984: PUSH
61985: LD_INT 111
61987: PUSH
61988: LD_INT 112
61990: PUSH
61991: LD_INT 113
61993: PUSH
61994: LD_INT 114
61996: PUSH
61997: LD_INT 116
61999: PUSH
62000: LD_INT 117
62002: PUSH
62003: LD_INT 118
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: ST_TO_ADDR
62029: GO 62804
62031: LD_INT 16
62033: DOUBLE
62034: EQUAL
62035: IFTRUE 62039
62037: GO 62175
62039: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62040: LD_ADDR_VAR 0 2
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: LD_INT 4
62050: PUSH
62051: LD_INT 5
62053: PUSH
62054: LD_INT 7
62056: PUSH
62057: LD_INT 11
62059: PUSH
62060: LD_INT 12
62062: PUSH
62063: LD_INT 15
62065: PUSH
62066: LD_INT 16
62068: PUSH
62069: LD_INT 20
62071: PUSH
62072: LD_INT 21
62074: PUSH
62075: LD_INT 22
62077: PUSH
62078: LD_INT 23
62080: PUSH
62081: LD_INT 25
62083: PUSH
62084: LD_INT 26
62086: PUSH
62087: LD_INT 30
62089: PUSH
62090: LD_INT 31
62092: PUSH
62093: LD_INT 32
62095: PUSH
62096: LD_INT 33
62098: PUSH
62099: LD_INT 34
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 101
62125: PUSH
62126: LD_INT 102
62128: PUSH
62129: LD_INT 103
62131: PUSH
62132: LD_INT 106
62134: PUSH
62135: LD_INT 108
62137: PUSH
62138: LD_INT 112
62140: PUSH
62141: LD_INT 113
62143: PUSH
62144: LD_INT 114
62146: PUSH
62147: LD_INT 116
62149: PUSH
62150: LD_INT 117
62152: PUSH
62153: LD_INT 118
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: ST_TO_ADDR
62173: GO 62804
62175: LD_INT 17
62177: DOUBLE
62178: EQUAL
62179: IFTRUE 62183
62181: GO 62407
62183: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62184: LD_ADDR_VAR 0 2
62188: PUSH
62189: LD_INT 1
62191: PUSH
62192: LD_INT 2
62194: PUSH
62195: LD_INT 3
62197: PUSH
62198: LD_INT 4
62200: PUSH
62201: LD_INT 5
62203: PUSH
62204: LD_INT 6
62206: PUSH
62207: LD_INT 7
62209: PUSH
62210: LD_INT 8
62212: PUSH
62213: LD_INT 9
62215: PUSH
62216: LD_INT 10
62218: PUSH
62219: LD_INT 11
62221: PUSH
62222: LD_INT 12
62224: PUSH
62225: LD_INT 13
62227: PUSH
62228: LD_INT 14
62230: PUSH
62231: LD_INT 15
62233: PUSH
62234: LD_INT 16
62236: PUSH
62237: LD_INT 17
62239: PUSH
62240: LD_INT 18
62242: PUSH
62243: LD_INT 19
62245: PUSH
62246: LD_INT 20
62248: PUSH
62249: LD_INT 21
62251: PUSH
62252: LD_INT 22
62254: PUSH
62255: LD_INT 23
62257: PUSH
62258: LD_INT 24
62260: PUSH
62261: LD_INT 25
62263: PUSH
62264: LD_INT 26
62266: PUSH
62267: LD_INT 27
62269: PUSH
62270: LD_INT 28
62272: PUSH
62273: LD_INT 29
62275: PUSH
62276: LD_INT 30
62278: PUSH
62279: LD_INT 31
62281: PUSH
62282: LD_INT 32
62284: PUSH
62285: LD_INT 33
62287: PUSH
62288: LD_INT 34
62290: PUSH
62291: LD_INT 36
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 101
62333: PUSH
62334: LD_INT 102
62336: PUSH
62337: LD_INT 103
62339: PUSH
62340: LD_INT 104
62342: PUSH
62343: LD_INT 105
62345: PUSH
62346: LD_INT 106
62348: PUSH
62349: LD_INT 107
62351: PUSH
62352: LD_INT 108
62354: PUSH
62355: LD_INT 109
62357: PUSH
62358: LD_INT 110
62360: PUSH
62361: LD_INT 111
62363: PUSH
62364: LD_INT 112
62366: PUSH
62367: LD_INT 113
62369: PUSH
62370: LD_INT 114
62372: PUSH
62373: LD_INT 116
62375: PUSH
62376: LD_INT 117
62378: PUSH
62379: LD_INT 118
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: ST_TO_ADDR
62405: GO 62804
62407: LD_INT 18
62409: DOUBLE
62410: EQUAL
62411: IFTRUE 62415
62413: GO 62563
62415: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62416: LD_ADDR_VAR 0 2
62420: PUSH
62421: LD_INT 2
62423: PUSH
62424: LD_INT 4
62426: PUSH
62427: LD_INT 5
62429: PUSH
62430: LD_INT 7
62432: PUSH
62433: LD_INT 11
62435: PUSH
62436: LD_INT 12
62438: PUSH
62439: LD_INT 15
62441: PUSH
62442: LD_INT 16
62444: PUSH
62445: LD_INT 20
62447: PUSH
62448: LD_INT 21
62450: PUSH
62451: LD_INT 22
62453: PUSH
62454: LD_INT 23
62456: PUSH
62457: LD_INT 25
62459: PUSH
62460: LD_INT 26
62462: PUSH
62463: LD_INT 30
62465: PUSH
62466: LD_INT 31
62468: PUSH
62469: LD_INT 32
62471: PUSH
62472: LD_INT 33
62474: PUSH
62475: LD_INT 34
62477: PUSH
62478: LD_INT 35
62480: PUSH
62481: LD_INT 36
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 101
62509: PUSH
62510: LD_INT 102
62512: PUSH
62513: LD_INT 103
62515: PUSH
62516: LD_INT 106
62518: PUSH
62519: LD_INT 108
62521: PUSH
62522: LD_INT 112
62524: PUSH
62525: LD_INT 113
62527: PUSH
62528: LD_INT 114
62530: PUSH
62531: LD_INT 115
62533: PUSH
62534: LD_INT 116
62536: PUSH
62537: LD_INT 117
62539: PUSH
62540: LD_INT 118
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: ST_TO_ADDR
62561: GO 62804
62563: LD_INT 19
62565: DOUBLE
62566: EQUAL
62567: IFTRUE 62571
62569: GO 62803
62571: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62572: LD_ADDR_VAR 0 2
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: LD_INT 4
62588: PUSH
62589: LD_INT 5
62591: PUSH
62592: LD_INT 6
62594: PUSH
62595: LD_INT 7
62597: PUSH
62598: LD_INT 8
62600: PUSH
62601: LD_INT 9
62603: PUSH
62604: LD_INT 10
62606: PUSH
62607: LD_INT 11
62609: PUSH
62610: LD_INT 12
62612: PUSH
62613: LD_INT 13
62615: PUSH
62616: LD_INT 14
62618: PUSH
62619: LD_INT 15
62621: PUSH
62622: LD_INT 16
62624: PUSH
62625: LD_INT 17
62627: PUSH
62628: LD_INT 18
62630: PUSH
62631: LD_INT 19
62633: PUSH
62634: LD_INT 20
62636: PUSH
62637: LD_INT 21
62639: PUSH
62640: LD_INT 22
62642: PUSH
62643: LD_INT 23
62645: PUSH
62646: LD_INT 24
62648: PUSH
62649: LD_INT 25
62651: PUSH
62652: LD_INT 26
62654: PUSH
62655: LD_INT 27
62657: PUSH
62658: LD_INT 28
62660: PUSH
62661: LD_INT 29
62663: PUSH
62664: LD_INT 30
62666: PUSH
62667: LD_INT 31
62669: PUSH
62670: LD_INT 32
62672: PUSH
62673: LD_INT 33
62675: PUSH
62676: LD_INT 34
62678: PUSH
62679: LD_INT 35
62681: PUSH
62682: LD_INT 36
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 101
62725: PUSH
62726: LD_INT 102
62728: PUSH
62729: LD_INT 103
62731: PUSH
62732: LD_INT 104
62734: PUSH
62735: LD_INT 105
62737: PUSH
62738: LD_INT 106
62740: PUSH
62741: LD_INT 107
62743: PUSH
62744: LD_INT 108
62746: PUSH
62747: LD_INT 109
62749: PUSH
62750: LD_INT 110
62752: PUSH
62753: LD_INT 111
62755: PUSH
62756: LD_INT 112
62758: PUSH
62759: LD_INT 113
62761: PUSH
62762: LD_INT 114
62764: PUSH
62765: LD_INT 115
62767: PUSH
62768: LD_INT 116
62770: PUSH
62771: LD_INT 117
62773: PUSH
62774: LD_INT 118
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: ST_TO_ADDR
62801: GO 62804
62803: POP
// end else
62804: GO 63035
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
62806: LD_ADDR_VAR 0 2
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: LD_INT 3
62819: PUSH
62820: LD_INT 4
62822: PUSH
62823: LD_INT 5
62825: PUSH
62826: LD_INT 6
62828: PUSH
62829: LD_INT 7
62831: PUSH
62832: LD_INT 8
62834: PUSH
62835: LD_INT 9
62837: PUSH
62838: LD_INT 10
62840: PUSH
62841: LD_INT 11
62843: PUSH
62844: LD_INT 12
62846: PUSH
62847: LD_INT 13
62849: PUSH
62850: LD_INT 14
62852: PUSH
62853: LD_INT 15
62855: PUSH
62856: LD_INT 16
62858: PUSH
62859: LD_INT 17
62861: PUSH
62862: LD_INT 18
62864: PUSH
62865: LD_INT 19
62867: PUSH
62868: LD_INT 20
62870: PUSH
62871: LD_INT 21
62873: PUSH
62874: LD_INT 22
62876: PUSH
62877: LD_INT 23
62879: PUSH
62880: LD_INT 24
62882: PUSH
62883: LD_INT 25
62885: PUSH
62886: LD_INT 26
62888: PUSH
62889: LD_INT 27
62891: PUSH
62892: LD_INT 28
62894: PUSH
62895: LD_INT 29
62897: PUSH
62898: LD_INT 30
62900: PUSH
62901: LD_INT 31
62903: PUSH
62904: LD_INT 32
62906: PUSH
62907: LD_INT 33
62909: PUSH
62910: LD_INT 34
62912: PUSH
62913: LD_INT 35
62915: PUSH
62916: LD_INT 36
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 101
62959: PUSH
62960: LD_INT 102
62962: PUSH
62963: LD_INT 103
62965: PUSH
62966: LD_INT 104
62968: PUSH
62969: LD_INT 105
62971: PUSH
62972: LD_INT 106
62974: PUSH
62975: LD_INT 107
62977: PUSH
62978: LD_INT 108
62980: PUSH
62981: LD_INT 109
62983: PUSH
62984: LD_INT 110
62986: PUSH
62987: LD_INT 111
62989: PUSH
62990: LD_INT 112
62992: PUSH
62993: LD_INT 113
62995: PUSH
62996: LD_INT 114
62998: PUSH
62999: LD_INT 115
63001: PUSH
63002: LD_INT 116
63004: PUSH
63005: LD_INT 117
63007: PUSH
63008: LD_INT 118
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: ST_TO_ADDR
// if result then
63035: LD_VAR 0 2
63039: IFFALSE 63825
// begin normal :=  ;
63041: LD_ADDR_VAR 0 5
63045: PUSH
63046: LD_STRING 
63048: ST_TO_ADDR
// hardcore :=  ;
63049: LD_ADDR_VAR 0 6
63053: PUSH
63054: LD_STRING 
63056: ST_TO_ADDR
// active :=  ;
63057: LD_ADDR_VAR 0 7
63061: PUSH
63062: LD_STRING 
63064: ST_TO_ADDR
// for i = 1 to normalCounter do
63065: LD_ADDR_VAR 0 8
63069: PUSH
63070: DOUBLE
63071: LD_INT 1
63073: DEC
63074: ST_TO_ADDR
63075: LD_EXP 39
63079: PUSH
63080: FOR_TO
63081: IFFALSE 63182
// begin tmp := 0 ;
63083: LD_ADDR_VAR 0 3
63087: PUSH
63088: LD_STRING 0
63090: ST_TO_ADDR
// if result [ 1 ] then
63091: LD_VAR 0 2
63095: PUSH
63096: LD_INT 1
63098: ARRAY
63099: IFFALSE 63164
// if result [ 1 ] [ 1 ] = i then
63101: LD_VAR 0 2
63105: PUSH
63106: LD_INT 1
63108: ARRAY
63109: PUSH
63110: LD_INT 1
63112: ARRAY
63113: PUSH
63114: LD_VAR 0 8
63118: EQUAL
63119: IFFALSE 63164
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63121: LD_ADDR_VAR 0 2
63125: PUSH
63126: LD_VAR 0 2
63130: PPUSH
63131: LD_INT 1
63133: PPUSH
63134: LD_VAR 0 2
63138: PUSH
63139: LD_INT 1
63141: ARRAY
63142: PPUSH
63143: LD_INT 1
63145: PPUSH
63146: CALL_OW 3
63150: PPUSH
63151: CALL_OW 1
63155: ST_TO_ADDR
// tmp := 1 ;
63156: LD_ADDR_VAR 0 3
63160: PUSH
63161: LD_STRING 1
63163: ST_TO_ADDR
// end ; normal := normal & tmp ;
63164: LD_ADDR_VAR 0 5
63168: PUSH
63169: LD_VAR 0 5
63173: PUSH
63174: LD_VAR 0 3
63178: STR
63179: ST_TO_ADDR
// end ;
63180: GO 63080
63182: POP
63183: POP
// for i = 1 to hardcoreCounter do
63184: LD_ADDR_VAR 0 8
63188: PUSH
63189: DOUBLE
63190: LD_INT 1
63192: DEC
63193: ST_TO_ADDR
63194: LD_EXP 40
63198: PUSH
63199: FOR_TO
63200: IFFALSE 63305
// begin tmp := 0 ;
63202: LD_ADDR_VAR 0 3
63206: PUSH
63207: LD_STRING 0
63209: ST_TO_ADDR
// if result [ 2 ] then
63210: LD_VAR 0 2
63214: PUSH
63215: LD_INT 2
63217: ARRAY
63218: IFFALSE 63287
// if result [ 2 ] [ 1 ] = 100 + i then
63220: LD_VAR 0 2
63224: PUSH
63225: LD_INT 2
63227: ARRAY
63228: PUSH
63229: LD_INT 1
63231: ARRAY
63232: PUSH
63233: LD_INT 100
63235: PUSH
63236: LD_VAR 0 8
63240: PLUS
63241: EQUAL
63242: IFFALSE 63287
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63244: LD_ADDR_VAR 0 2
63248: PUSH
63249: LD_VAR 0 2
63253: PPUSH
63254: LD_INT 2
63256: PPUSH
63257: LD_VAR 0 2
63261: PUSH
63262: LD_INT 2
63264: ARRAY
63265: PPUSH
63266: LD_INT 1
63268: PPUSH
63269: CALL_OW 3
63273: PPUSH
63274: CALL_OW 1
63278: ST_TO_ADDR
// tmp := 1 ;
63279: LD_ADDR_VAR 0 3
63283: PUSH
63284: LD_STRING 1
63286: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63287: LD_ADDR_VAR 0 6
63291: PUSH
63292: LD_VAR 0 6
63296: PUSH
63297: LD_VAR 0 3
63301: STR
63302: ST_TO_ADDR
// end ;
63303: GO 63199
63305: POP
63306: POP
// if isGameLoad then
63307: LD_VAR 0 1
63311: IFFALSE 63786
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63313: LD_ADDR_VAR 0 4
63317: PUSH
63318: LD_EXP 43
63322: PUSH
63323: LD_EXP 42
63327: PUSH
63328: LD_EXP 44
63332: PUSH
63333: LD_EXP 41
63337: PUSH
63338: LD_EXP 45
63342: PUSH
63343: LD_EXP 46
63347: PUSH
63348: LD_EXP 47
63352: PUSH
63353: LD_EXP 48
63357: PUSH
63358: LD_EXP 49
63362: PUSH
63363: LD_EXP 50
63367: PUSH
63368: LD_EXP 51
63372: PUSH
63373: LD_EXP 52
63377: PUSH
63378: LD_EXP 53
63382: PUSH
63383: LD_EXP 54
63387: PUSH
63388: LD_EXP 62
63392: PUSH
63393: LD_EXP 63
63397: PUSH
63398: LD_EXP 64
63402: PUSH
63403: LD_EXP 65
63407: PUSH
63408: LD_EXP 67
63412: PUSH
63413: LD_EXP 68
63417: PUSH
63418: LD_EXP 69
63422: PUSH
63423: LD_EXP 72
63427: PUSH
63428: LD_EXP 74
63432: PUSH
63433: LD_EXP 75
63437: PUSH
63438: LD_EXP 76
63442: PUSH
63443: LD_EXP 78
63447: PUSH
63448: LD_EXP 79
63452: PUSH
63453: LD_EXP 82
63457: PUSH
63458: LD_EXP 83
63462: PUSH
63463: LD_EXP 84
63467: PUSH
63468: LD_EXP 85
63472: PUSH
63473: LD_EXP 86
63477: PUSH
63478: LD_EXP 87
63482: PUSH
63483: LD_EXP 88
63487: PUSH
63488: LD_EXP 89
63492: PUSH
63493: LD_EXP 90
63497: PUSH
63498: LD_EXP 55
63502: PUSH
63503: LD_EXP 56
63507: PUSH
63508: LD_EXP 59
63512: PUSH
63513: LD_EXP 60
63517: PUSH
63518: LD_EXP 61
63522: PUSH
63523: LD_EXP 57
63527: PUSH
63528: LD_EXP 58
63532: PUSH
63533: LD_EXP 66
63537: PUSH
63538: LD_EXP 70
63542: PUSH
63543: LD_EXP 71
63547: PUSH
63548: LD_EXP 73
63552: PUSH
63553: LD_EXP 77
63557: PUSH
63558: LD_EXP 80
63562: PUSH
63563: LD_EXP 81
63567: PUSH
63568: LD_EXP 91
63572: PUSH
63573: LD_EXP 92
63577: PUSH
63578: LD_EXP 93
63582: PUSH
63583: LD_EXP 94
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: ST_TO_ADDR
// tmp :=  ;
63644: LD_ADDR_VAR 0 3
63648: PUSH
63649: LD_STRING 
63651: ST_TO_ADDR
// for i = 1 to normalCounter do
63652: LD_ADDR_VAR 0 8
63656: PUSH
63657: DOUBLE
63658: LD_INT 1
63660: DEC
63661: ST_TO_ADDR
63662: LD_EXP 39
63666: PUSH
63667: FOR_TO
63668: IFFALSE 63704
// begin if flags [ i ] then
63670: LD_VAR 0 4
63674: PUSH
63675: LD_VAR 0 8
63679: ARRAY
63680: IFFALSE 63702
// tmp := tmp & i & ; ;
63682: LD_ADDR_VAR 0 3
63686: PUSH
63687: LD_VAR 0 3
63691: PUSH
63692: LD_VAR 0 8
63696: STR
63697: PUSH
63698: LD_STRING ;
63700: STR
63701: ST_TO_ADDR
// end ;
63702: GO 63667
63704: POP
63705: POP
// for i = 1 to hardcoreCounter do
63706: LD_ADDR_VAR 0 8
63710: PUSH
63711: DOUBLE
63712: LD_INT 1
63714: DEC
63715: ST_TO_ADDR
63716: LD_EXP 40
63720: PUSH
63721: FOR_TO
63722: IFFALSE 63768
// begin if flags [ normalCounter + i ] then
63724: LD_VAR 0 4
63728: PUSH
63729: LD_EXP 39
63733: PUSH
63734: LD_VAR 0 8
63738: PLUS
63739: ARRAY
63740: IFFALSE 63766
// tmp := tmp & ( 100 + i ) & ; ;
63742: LD_ADDR_VAR 0 3
63746: PUSH
63747: LD_VAR 0 3
63751: PUSH
63752: LD_INT 100
63754: PUSH
63755: LD_VAR 0 8
63759: PLUS
63760: STR
63761: PUSH
63762: LD_STRING ;
63764: STR
63765: ST_TO_ADDR
// end ;
63766: GO 63721
63768: POP
63769: POP
// if tmp then
63770: LD_VAR 0 3
63774: IFFALSE 63786
// active := tmp ;
63776: LD_ADDR_VAR 0 7
63780: PUSH
63781: LD_VAR 0 3
63785: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
63786: LD_STRING getStreamItemsFromMission("
63788: PUSH
63789: LD_VAR 0 5
63793: STR
63794: PUSH
63795: LD_STRING ","
63797: STR
63798: PUSH
63799: LD_VAR 0 6
63803: STR
63804: PUSH
63805: LD_STRING ","
63807: STR
63808: PUSH
63809: LD_VAR 0 7
63813: STR
63814: PUSH
63815: LD_STRING ")
63817: STR
63818: PPUSH
63819: CALL_OW 559
// end else
63823: GO 63832
// ToLua ( getStreamItemsFromMission("","","") ) ;
63825: LD_STRING getStreamItemsFromMission("","","")
63827: PPUSH
63828: CALL_OW 559
// end ;
63832: LD_VAR 0 2
63836: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63837: LD_EXP 38
63841: PUSH
63842: LD_EXP 43
63846: AND
63847: IFFALSE 63971
63849: GO 63851
63851: DISABLE
63852: LD_INT 0
63854: PPUSH
63855: PPUSH
// begin enable ;
63856: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63857: LD_ADDR_VAR 0 2
63861: PUSH
63862: LD_INT 22
63864: PUSH
63865: LD_OWVAR 2
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: LD_INT 34
63879: PUSH
63880: LD_INT 7
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 34
63889: PUSH
63890: LD_INT 45
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 34
63899: PUSH
63900: LD_INT 28
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 34
63909: PUSH
63910: LD_INT 47
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PPUSH
63928: CALL_OW 69
63932: ST_TO_ADDR
// if not tmp then
63933: LD_VAR 0 2
63937: NOT
63938: IFFALSE 63942
// exit ;
63940: GO 63971
// for i in tmp do
63942: LD_ADDR_VAR 0 1
63946: PUSH
63947: LD_VAR 0 2
63951: PUSH
63952: FOR_IN
63953: IFFALSE 63969
// begin SetLives ( i , 0 ) ;
63955: LD_VAR 0 1
63959: PPUSH
63960: LD_INT 0
63962: PPUSH
63963: CALL_OW 234
// end ;
63967: GO 63952
63969: POP
63970: POP
// end ;
63971: PPOPN 2
63973: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63974: LD_EXP 38
63978: PUSH
63979: LD_EXP 44
63983: AND
63984: IFFALSE 64068
63986: GO 63988
63988: DISABLE
63989: LD_INT 0
63991: PPUSH
63992: PPUSH
// begin enable ;
63993: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63994: LD_ADDR_VAR 0 2
63998: PUSH
63999: LD_INT 22
64001: PUSH
64002: LD_OWVAR 2
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 32
64013: PUSH
64014: LD_INT 3
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PPUSH
64025: CALL_OW 69
64029: ST_TO_ADDR
// if not tmp then
64030: LD_VAR 0 2
64034: NOT
64035: IFFALSE 64039
// exit ;
64037: GO 64068
// for i in tmp do
64039: LD_ADDR_VAR 0 1
64043: PUSH
64044: LD_VAR 0 2
64048: PUSH
64049: FOR_IN
64050: IFFALSE 64066
// begin SetLives ( i , 0 ) ;
64052: LD_VAR 0 1
64056: PPUSH
64057: LD_INT 0
64059: PPUSH
64060: CALL_OW 234
// end ;
64064: GO 64049
64066: POP
64067: POP
// end ;
64068: PPOPN 2
64070: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64071: LD_EXP 38
64075: PUSH
64076: LD_EXP 41
64080: AND
64081: IFFALSE 64174
64083: GO 64085
64085: DISABLE
64086: LD_INT 0
64088: PPUSH
// begin enable ;
64089: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64090: LD_ADDR_VAR 0 1
64094: PUSH
64095: LD_INT 22
64097: PUSH
64098: LD_OWVAR 2
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 2
64109: PUSH
64110: LD_INT 25
64112: PUSH
64113: LD_INT 5
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 25
64122: PUSH
64123: LD_INT 9
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 25
64132: PUSH
64133: LD_INT 8
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PPUSH
64150: CALL_OW 69
64154: PUSH
64155: FOR_IN
64156: IFFALSE 64172
// begin SetClass ( i , 1 ) ;
64158: LD_VAR 0 1
64162: PPUSH
64163: LD_INT 1
64165: PPUSH
64166: CALL_OW 336
// end ;
64170: GO 64155
64172: POP
64173: POP
// end ;
64174: PPOPN 1
64176: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64177: LD_EXP 38
64181: PUSH
64182: LD_EXP 42
64186: AND
64187: PUSH
64188: LD_OWVAR 65
64192: PUSH
64193: LD_INT 7
64195: LESS
64196: AND
64197: IFFALSE 64211
64199: GO 64201
64201: DISABLE
// begin enable ;
64202: ENABLE
// game_speed := 7 ;
64203: LD_ADDR_OWVAR 65
64207: PUSH
64208: LD_INT 7
64210: ST_TO_ADDR
// end ;
64211: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64212: LD_EXP 38
64216: PUSH
64217: LD_EXP 45
64221: AND
64222: IFFALSE 64424
64224: GO 64226
64226: DISABLE
64227: LD_INT 0
64229: PPUSH
64230: PPUSH
64231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64232: LD_ADDR_VAR 0 3
64236: PUSH
64237: LD_INT 81
64239: PUSH
64240: LD_OWVAR 2
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 21
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PPUSH
64263: CALL_OW 69
64267: ST_TO_ADDR
// if not tmp then
64268: LD_VAR 0 3
64272: NOT
64273: IFFALSE 64277
// exit ;
64275: GO 64424
// if tmp > 5 then
64277: LD_VAR 0 3
64281: PUSH
64282: LD_INT 5
64284: GREATER
64285: IFFALSE 64297
// k := 5 else
64287: LD_ADDR_VAR 0 2
64291: PUSH
64292: LD_INT 5
64294: ST_TO_ADDR
64295: GO 64307
// k := tmp ;
64297: LD_ADDR_VAR 0 2
64301: PUSH
64302: LD_VAR 0 3
64306: ST_TO_ADDR
// for i := 1 to k do
64307: LD_ADDR_VAR 0 1
64311: PUSH
64312: DOUBLE
64313: LD_INT 1
64315: DEC
64316: ST_TO_ADDR
64317: LD_VAR 0 2
64321: PUSH
64322: FOR_TO
64323: IFFALSE 64422
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64325: LD_VAR 0 3
64329: PUSH
64330: LD_VAR 0 1
64334: ARRAY
64335: PPUSH
64336: LD_VAR 0 1
64340: PUSH
64341: LD_INT 4
64343: MOD
64344: PUSH
64345: LD_INT 1
64347: PLUS
64348: PPUSH
64349: CALL_OW 259
64353: PUSH
64354: LD_INT 10
64356: LESS
64357: IFFALSE 64420
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64359: LD_VAR 0 3
64363: PUSH
64364: LD_VAR 0 1
64368: ARRAY
64369: PPUSH
64370: LD_VAR 0 1
64374: PUSH
64375: LD_INT 4
64377: MOD
64378: PUSH
64379: LD_INT 1
64381: PLUS
64382: PPUSH
64383: LD_VAR 0 3
64387: PUSH
64388: LD_VAR 0 1
64392: ARRAY
64393: PPUSH
64394: LD_VAR 0 1
64398: PUSH
64399: LD_INT 4
64401: MOD
64402: PUSH
64403: LD_INT 1
64405: PLUS
64406: PPUSH
64407: CALL_OW 259
64411: PUSH
64412: LD_INT 1
64414: PLUS
64415: PPUSH
64416: CALL_OW 237
64420: GO 64322
64422: POP
64423: POP
// end ;
64424: PPOPN 3
64426: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64427: LD_EXP 38
64431: PUSH
64432: LD_EXP 46
64436: AND
64437: IFFALSE 64457
64439: GO 64441
64441: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64442: LD_INT 4
64444: PPUSH
64445: LD_OWVAR 2
64449: PPUSH
64450: LD_INT 0
64452: PPUSH
64453: CALL_OW 324
64457: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64458: LD_EXP 38
64462: PUSH
64463: LD_EXP 75
64467: AND
64468: IFFALSE 64488
64470: GO 64472
64472: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64473: LD_INT 19
64475: PPUSH
64476: LD_OWVAR 2
64480: PPUSH
64481: LD_INT 0
64483: PPUSH
64484: CALL_OW 324
64488: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64489: LD_EXP 38
64493: PUSH
64494: LD_EXP 47
64498: AND
64499: IFFALSE 64601
64501: GO 64503
64503: DISABLE
64504: LD_INT 0
64506: PPUSH
64507: PPUSH
// begin enable ;
64508: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64509: LD_ADDR_VAR 0 2
64513: PUSH
64514: LD_INT 22
64516: PUSH
64517: LD_OWVAR 2
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 2
64528: PUSH
64529: LD_INT 34
64531: PUSH
64532: LD_INT 11
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 34
64541: PUSH
64542: LD_INT 30
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: LIST
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PPUSH
64558: CALL_OW 69
64562: ST_TO_ADDR
// if not tmp then
64563: LD_VAR 0 2
64567: NOT
64568: IFFALSE 64572
// exit ;
64570: GO 64601
// for i in tmp do
64572: LD_ADDR_VAR 0 1
64576: PUSH
64577: LD_VAR 0 2
64581: PUSH
64582: FOR_IN
64583: IFFALSE 64599
// begin SetLives ( i , 0 ) ;
64585: LD_VAR 0 1
64589: PPUSH
64590: LD_INT 0
64592: PPUSH
64593: CALL_OW 234
// end ;
64597: GO 64582
64599: POP
64600: POP
// end ;
64601: PPOPN 2
64603: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64604: LD_EXP 38
64608: PUSH
64609: LD_EXP 48
64613: AND
64614: IFFALSE 64634
64616: GO 64618
64618: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64619: LD_INT 32
64621: PPUSH
64622: LD_OWVAR 2
64626: PPUSH
64627: LD_INT 0
64629: PPUSH
64630: CALL_OW 324
64634: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64635: LD_EXP 38
64639: PUSH
64640: LD_EXP 49
64644: AND
64645: IFFALSE 64826
64647: GO 64649
64649: DISABLE
64650: LD_INT 0
64652: PPUSH
64653: PPUSH
64654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64655: LD_ADDR_VAR 0 2
64659: PUSH
64660: LD_INT 22
64662: PUSH
64663: LD_OWVAR 2
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 33
64674: PUSH
64675: LD_INT 3
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PPUSH
64686: CALL_OW 69
64690: ST_TO_ADDR
// if not tmp then
64691: LD_VAR 0 2
64695: NOT
64696: IFFALSE 64700
// exit ;
64698: GO 64826
// side := 0 ;
64700: LD_ADDR_VAR 0 3
64704: PUSH
64705: LD_INT 0
64707: ST_TO_ADDR
// for i := 1 to 8 do
64708: LD_ADDR_VAR 0 1
64712: PUSH
64713: DOUBLE
64714: LD_INT 1
64716: DEC
64717: ST_TO_ADDR
64718: LD_INT 8
64720: PUSH
64721: FOR_TO
64722: IFFALSE 64770
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64724: LD_OWVAR 2
64728: PUSH
64729: LD_VAR 0 1
64733: NONEQUAL
64734: PUSH
64735: LD_OWVAR 2
64739: PPUSH
64740: LD_VAR 0 1
64744: PPUSH
64745: CALL_OW 81
64749: PUSH
64750: LD_INT 2
64752: EQUAL
64753: AND
64754: IFFALSE 64768
// begin side := i ;
64756: LD_ADDR_VAR 0 3
64760: PUSH
64761: LD_VAR 0 1
64765: ST_TO_ADDR
// break ;
64766: GO 64770
// end ;
64768: GO 64721
64770: POP
64771: POP
// if not side then
64772: LD_VAR 0 3
64776: NOT
64777: IFFALSE 64781
// exit ;
64779: GO 64826
// for i := 1 to tmp do
64781: LD_ADDR_VAR 0 1
64785: PUSH
64786: DOUBLE
64787: LD_INT 1
64789: DEC
64790: ST_TO_ADDR
64791: LD_VAR 0 2
64795: PUSH
64796: FOR_TO
64797: IFFALSE 64824
// if Prob ( 60 ) then
64799: LD_INT 60
64801: PPUSH
64802: CALL_OW 13
64806: IFFALSE 64822
// SetSide ( i , side ) ;
64808: LD_VAR 0 1
64812: PPUSH
64813: LD_VAR 0 3
64817: PPUSH
64818: CALL_OW 235
64822: GO 64796
64824: POP
64825: POP
// end ;
64826: PPOPN 3
64828: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64829: LD_EXP 38
64833: PUSH
64834: LD_EXP 51
64838: AND
64839: IFFALSE 64958
64841: GO 64843
64843: DISABLE
64844: LD_INT 0
64846: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64847: LD_ADDR_VAR 0 1
64851: PUSH
64852: LD_INT 22
64854: PUSH
64855: LD_OWVAR 2
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 21
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 3
64876: PUSH
64877: LD_INT 23
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: PPUSH
64896: CALL_OW 69
64900: PUSH
64901: FOR_IN
64902: IFFALSE 64956
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64904: LD_VAR 0 1
64908: PPUSH
64909: CALL_OW 257
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: LD_INT 2
64919: PUSH
64920: LD_INT 3
64922: PUSH
64923: LD_INT 4
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: IN
64932: IFFALSE 64954
// SetClass ( un , rand ( 1 , 4 ) ) ;
64934: LD_VAR 0 1
64938: PPUSH
64939: LD_INT 1
64941: PPUSH
64942: LD_INT 4
64944: PPUSH
64945: CALL_OW 12
64949: PPUSH
64950: CALL_OW 336
64954: GO 64901
64956: POP
64957: POP
// end ;
64958: PPOPN 1
64960: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64961: LD_EXP 38
64965: PUSH
64966: LD_EXP 50
64970: AND
64971: IFFALSE 65050
64973: GO 64975
64975: DISABLE
64976: LD_INT 0
64978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64979: LD_ADDR_VAR 0 1
64983: PUSH
64984: LD_INT 22
64986: PUSH
64987: LD_OWVAR 2
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 21
64998: PUSH
64999: LD_INT 3
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PPUSH
65010: CALL_OW 69
65014: ST_TO_ADDR
// if not tmp then
65015: LD_VAR 0 1
65019: NOT
65020: IFFALSE 65024
// exit ;
65022: GO 65050
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65024: LD_VAR 0 1
65028: PUSH
65029: LD_INT 1
65031: PPUSH
65032: LD_VAR 0 1
65036: PPUSH
65037: CALL_OW 12
65041: ARRAY
65042: PPUSH
65043: LD_INT 100
65045: PPUSH
65046: CALL_OW 234
// end ;
65050: PPOPN 1
65052: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65053: LD_EXP 38
65057: PUSH
65058: LD_EXP 52
65062: AND
65063: IFFALSE 65161
65065: GO 65067
65067: DISABLE
65068: LD_INT 0
65070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65071: LD_ADDR_VAR 0 1
65075: PUSH
65076: LD_INT 22
65078: PUSH
65079: LD_OWVAR 2
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 21
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PPUSH
65102: CALL_OW 69
65106: ST_TO_ADDR
// if not tmp then
65107: LD_VAR 0 1
65111: NOT
65112: IFFALSE 65116
// exit ;
65114: GO 65161
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65116: LD_VAR 0 1
65120: PUSH
65121: LD_INT 1
65123: PPUSH
65124: LD_VAR 0 1
65128: PPUSH
65129: CALL_OW 12
65133: ARRAY
65134: PPUSH
65135: LD_INT 1
65137: PPUSH
65138: LD_INT 4
65140: PPUSH
65141: CALL_OW 12
65145: PPUSH
65146: LD_INT 3000
65148: PPUSH
65149: LD_INT 9000
65151: PPUSH
65152: CALL_OW 12
65156: PPUSH
65157: CALL_OW 492
// end ;
65161: PPOPN 1
65163: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65164: LD_EXP 38
65168: PUSH
65169: LD_EXP 53
65173: AND
65174: IFFALSE 65194
65176: GO 65178
65178: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65179: LD_INT 1
65181: PPUSH
65182: LD_OWVAR 2
65186: PPUSH
65187: LD_INT 0
65189: PPUSH
65190: CALL_OW 324
65194: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65195: LD_EXP 38
65199: PUSH
65200: LD_EXP 54
65204: AND
65205: IFFALSE 65288
65207: GO 65209
65209: DISABLE
65210: LD_INT 0
65212: PPUSH
65213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65214: LD_ADDR_VAR 0 2
65218: PUSH
65219: LD_INT 22
65221: PUSH
65222: LD_OWVAR 2
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 21
65233: PUSH
65234: LD_INT 3
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PPUSH
65245: CALL_OW 69
65249: ST_TO_ADDR
// if not tmp then
65250: LD_VAR 0 2
65254: NOT
65255: IFFALSE 65259
// exit ;
65257: GO 65288
// for i in tmp do
65259: LD_ADDR_VAR 0 1
65263: PUSH
65264: LD_VAR 0 2
65268: PUSH
65269: FOR_IN
65270: IFFALSE 65286
// SetBLevel ( i , 10 ) ;
65272: LD_VAR 0 1
65276: PPUSH
65277: LD_INT 10
65279: PPUSH
65280: CALL_OW 241
65284: GO 65269
65286: POP
65287: POP
// end ;
65288: PPOPN 2
65290: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65291: LD_EXP 38
65295: PUSH
65296: LD_EXP 55
65300: AND
65301: IFFALSE 65412
65303: GO 65305
65305: DISABLE
65306: LD_INT 0
65308: PPUSH
65309: PPUSH
65310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65311: LD_ADDR_VAR 0 3
65315: PUSH
65316: LD_INT 22
65318: PUSH
65319: LD_OWVAR 2
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 25
65330: PUSH
65331: LD_INT 1
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PPUSH
65342: CALL_OW 69
65346: ST_TO_ADDR
// if not tmp then
65347: LD_VAR 0 3
65351: NOT
65352: IFFALSE 65356
// exit ;
65354: GO 65412
// un := tmp [ rand ( 1 , tmp ) ] ;
65356: LD_ADDR_VAR 0 2
65360: PUSH
65361: LD_VAR 0 3
65365: PUSH
65366: LD_INT 1
65368: PPUSH
65369: LD_VAR 0 3
65373: PPUSH
65374: CALL_OW 12
65378: ARRAY
65379: ST_TO_ADDR
// if Crawls ( un ) then
65380: LD_VAR 0 2
65384: PPUSH
65385: CALL_OW 318
65389: IFFALSE 65400
// ComWalk ( un ) ;
65391: LD_VAR 0 2
65395: PPUSH
65396: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65400: LD_VAR 0 2
65404: PPUSH
65405: LD_INT 5
65407: PPUSH
65408: CALL_OW 336
// end ;
65412: PPOPN 3
65414: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65415: LD_EXP 38
65419: PUSH
65420: LD_EXP 56
65424: AND
65425: PUSH
65426: LD_OWVAR 67
65430: PUSH
65431: LD_INT 4
65433: LESS
65434: AND
65435: IFFALSE 65454
65437: GO 65439
65439: DISABLE
// begin Difficulty := Difficulty + 1 ;
65440: LD_ADDR_OWVAR 67
65444: PUSH
65445: LD_OWVAR 67
65449: PUSH
65450: LD_INT 1
65452: PLUS
65453: ST_TO_ADDR
// end ;
65454: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65455: LD_EXP 38
65459: PUSH
65460: LD_EXP 57
65464: AND
65465: IFFALSE 65568
65467: GO 65469
65469: DISABLE
65470: LD_INT 0
65472: PPUSH
// begin for i := 1 to 5 do
65473: LD_ADDR_VAR 0 1
65477: PUSH
65478: DOUBLE
65479: LD_INT 1
65481: DEC
65482: ST_TO_ADDR
65483: LD_INT 5
65485: PUSH
65486: FOR_TO
65487: IFFALSE 65566
// begin uc_nation := nation_nature ;
65489: LD_ADDR_OWVAR 21
65493: PUSH
65494: LD_INT 0
65496: ST_TO_ADDR
// uc_side := 0 ;
65497: LD_ADDR_OWVAR 20
65501: PUSH
65502: LD_INT 0
65504: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65505: LD_ADDR_OWVAR 29
65509: PUSH
65510: LD_INT 12
65512: PUSH
65513: LD_INT 12
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: ST_TO_ADDR
// hc_agressivity := 20 ;
65520: LD_ADDR_OWVAR 35
65524: PUSH
65525: LD_INT 20
65527: ST_TO_ADDR
// hc_class := class_tiger ;
65528: LD_ADDR_OWVAR 28
65532: PUSH
65533: LD_INT 14
65535: ST_TO_ADDR
// hc_gallery :=  ;
65536: LD_ADDR_OWVAR 33
65540: PUSH
65541: LD_STRING 
65543: ST_TO_ADDR
// hc_name :=  ;
65544: LD_ADDR_OWVAR 26
65548: PUSH
65549: LD_STRING 
65551: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65552: CALL_OW 44
65556: PPUSH
65557: LD_INT 0
65559: PPUSH
65560: CALL_OW 51
// end ;
65564: GO 65486
65566: POP
65567: POP
// end ;
65568: PPOPN 1
65570: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65571: LD_EXP 38
65575: PUSH
65576: LD_EXP 58
65580: AND
65581: IFFALSE 65590
65583: GO 65585
65585: DISABLE
// StreamSibBomb ;
65586: CALL 65591 0 0
65590: END
// export function StreamSibBomb ; var i , x , y ; begin
65591: LD_INT 0
65593: PPUSH
65594: PPUSH
65595: PPUSH
65596: PPUSH
// result := false ;
65597: LD_ADDR_VAR 0 1
65601: PUSH
65602: LD_INT 0
65604: ST_TO_ADDR
// for i := 1 to 16 do
65605: LD_ADDR_VAR 0 2
65609: PUSH
65610: DOUBLE
65611: LD_INT 1
65613: DEC
65614: ST_TO_ADDR
65615: LD_INT 16
65617: PUSH
65618: FOR_TO
65619: IFFALSE 65818
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65621: LD_ADDR_VAR 0 3
65625: PUSH
65626: LD_INT 10
65628: PUSH
65629: LD_INT 20
65631: PUSH
65632: LD_INT 30
65634: PUSH
65635: LD_INT 40
65637: PUSH
65638: LD_INT 50
65640: PUSH
65641: LD_INT 60
65643: PUSH
65644: LD_INT 70
65646: PUSH
65647: LD_INT 80
65649: PUSH
65650: LD_INT 90
65652: PUSH
65653: LD_INT 100
65655: PUSH
65656: LD_INT 110
65658: PUSH
65659: LD_INT 120
65661: PUSH
65662: LD_INT 130
65664: PUSH
65665: LD_INT 140
65667: PUSH
65668: LD_INT 150
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 1
65690: PPUSH
65691: LD_INT 15
65693: PPUSH
65694: CALL_OW 12
65698: ARRAY
65699: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65700: LD_ADDR_VAR 0 4
65704: PUSH
65705: LD_INT 10
65707: PUSH
65708: LD_INT 20
65710: PUSH
65711: LD_INT 30
65713: PUSH
65714: LD_INT 40
65716: PUSH
65717: LD_INT 50
65719: PUSH
65720: LD_INT 60
65722: PUSH
65723: LD_INT 70
65725: PUSH
65726: LD_INT 80
65728: PUSH
65729: LD_INT 90
65731: PUSH
65732: LD_INT 100
65734: PUSH
65735: LD_INT 110
65737: PUSH
65738: LD_INT 120
65740: PUSH
65741: LD_INT 130
65743: PUSH
65744: LD_INT 140
65746: PUSH
65747: LD_INT 150
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 1
65769: PPUSH
65770: LD_INT 15
65772: PPUSH
65773: CALL_OW 12
65777: ARRAY
65778: ST_TO_ADDR
// if ValidHex ( x , y ) then
65779: LD_VAR 0 3
65783: PPUSH
65784: LD_VAR 0 4
65788: PPUSH
65789: CALL_OW 488
65793: IFFALSE 65816
// begin result := [ x , y ] ;
65795: LD_ADDR_VAR 0 1
65799: PUSH
65800: LD_VAR 0 3
65804: PUSH
65805: LD_VAR 0 4
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: ST_TO_ADDR
// break ;
65814: GO 65818
// end ; end ;
65816: GO 65618
65818: POP
65819: POP
// if result then
65820: LD_VAR 0 1
65824: IFFALSE 65884
// begin ToLua ( playSibBomb() ) ;
65826: LD_STRING playSibBomb()
65828: PPUSH
65829: CALL_OW 559
// wait ( 0 0$14 ) ;
65833: LD_INT 490
65835: PPUSH
65836: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65840: LD_VAR 0 1
65844: PUSH
65845: LD_INT 1
65847: ARRAY
65848: PPUSH
65849: LD_VAR 0 1
65853: PUSH
65854: LD_INT 2
65856: ARRAY
65857: PPUSH
65858: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65862: LD_VAR 0 1
65866: PUSH
65867: LD_INT 1
65869: ARRAY
65870: PPUSH
65871: LD_VAR 0 1
65875: PUSH
65876: LD_INT 2
65878: ARRAY
65879: PPUSH
65880: CALL_OW 429
// end ; end ;
65884: LD_VAR 0 1
65888: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65889: LD_EXP 38
65893: PUSH
65894: LD_EXP 60
65898: AND
65899: IFFALSE 65911
65901: GO 65903
65903: DISABLE
// YouLost (  ) ;
65904: LD_STRING 
65906: PPUSH
65907: CALL_OW 104
65911: END
// every 0 0$1 trigger StreamModeActive and sFog do
65912: LD_EXP 38
65916: PUSH
65917: LD_EXP 59
65921: AND
65922: IFFALSE 65936
65924: GO 65926
65926: DISABLE
// FogOff ( your_side ) ;
65927: LD_OWVAR 2
65931: PPUSH
65932: CALL_OW 344
65936: END
// every 0 0$1 trigger StreamModeActive and sSun do
65937: LD_EXP 38
65941: PUSH
65942: LD_EXP 61
65946: AND
65947: IFFALSE 65975
65949: GO 65951
65951: DISABLE
// begin solar_recharge_percent := 0 ;
65952: LD_ADDR_OWVAR 79
65956: PUSH
65957: LD_INT 0
65959: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65960: LD_INT 10500
65962: PPUSH
65963: CALL_OW 67
// solar_recharge_percent := 100 ;
65967: LD_ADDR_OWVAR 79
65971: PUSH
65972: LD_INT 100
65974: ST_TO_ADDR
// end ;
65975: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65976: LD_EXP 38
65980: PUSH
65981: LD_EXP 62
65985: AND
65986: IFFALSE 66225
65988: GO 65990
65990: DISABLE
65991: LD_INT 0
65993: PPUSH
65994: PPUSH
65995: PPUSH
// begin tmp := [ ] ;
65996: LD_ADDR_VAR 0 3
66000: PUSH
66001: EMPTY
66002: ST_TO_ADDR
// for i := 1 to 6 do
66003: LD_ADDR_VAR 0 1
66007: PUSH
66008: DOUBLE
66009: LD_INT 1
66011: DEC
66012: ST_TO_ADDR
66013: LD_INT 6
66015: PUSH
66016: FOR_TO
66017: IFFALSE 66122
// begin uc_nation := nation_nature ;
66019: LD_ADDR_OWVAR 21
66023: PUSH
66024: LD_INT 0
66026: ST_TO_ADDR
// uc_side := 0 ;
66027: LD_ADDR_OWVAR 20
66031: PUSH
66032: LD_INT 0
66034: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66035: LD_ADDR_OWVAR 29
66039: PUSH
66040: LD_INT 12
66042: PUSH
66043: LD_INT 12
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: ST_TO_ADDR
// hc_agressivity := 20 ;
66050: LD_ADDR_OWVAR 35
66054: PUSH
66055: LD_INT 20
66057: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66058: LD_ADDR_OWVAR 28
66062: PUSH
66063: LD_INT 17
66065: ST_TO_ADDR
// hc_gallery :=  ;
66066: LD_ADDR_OWVAR 33
66070: PUSH
66071: LD_STRING 
66073: ST_TO_ADDR
// hc_name :=  ;
66074: LD_ADDR_OWVAR 26
66078: PUSH
66079: LD_STRING 
66081: ST_TO_ADDR
// un := CreateHuman ;
66082: LD_ADDR_VAR 0 2
66086: PUSH
66087: CALL_OW 44
66091: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66092: LD_VAR 0 2
66096: PPUSH
66097: LD_INT 1
66099: PPUSH
66100: CALL_OW 51
// tmp := tmp ^ un ;
66104: LD_ADDR_VAR 0 3
66108: PUSH
66109: LD_VAR 0 3
66113: PUSH
66114: LD_VAR 0 2
66118: ADD
66119: ST_TO_ADDR
// end ;
66120: GO 66016
66122: POP
66123: POP
// repeat wait ( 0 0$1 ) ;
66124: LD_INT 35
66126: PPUSH
66127: CALL_OW 67
// for un in tmp do
66131: LD_ADDR_VAR 0 2
66135: PUSH
66136: LD_VAR 0 3
66140: PUSH
66141: FOR_IN
66142: IFFALSE 66216
// begin if IsDead ( un ) then
66144: LD_VAR 0 2
66148: PPUSH
66149: CALL_OW 301
66153: IFFALSE 66173
// begin tmp := tmp diff un ;
66155: LD_ADDR_VAR 0 3
66159: PUSH
66160: LD_VAR 0 3
66164: PUSH
66165: LD_VAR 0 2
66169: DIFF
66170: ST_TO_ADDR
// continue ;
66171: GO 66141
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66173: LD_VAR 0 2
66177: PPUSH
66178: LD_INT 3
66180: PUSH
66181: LD_INT 22
66183: PUSH
66184: LD_INT 0
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PPUSH
66195: CALL_OW 69
66199: PPUSH
66200: LD_VAR 0 2
66204: PPUSH
66205: CALL_OW 74
66209: PPUSH
66210: CALL_OW 115
// end ;
66214: GO 66141
66216: POP
66217: POP
// until not tmp ;
66218: LD_VAR 0 3
66222: NOT
66223: IFFALSE 66124
// end ;
66225: PPOPN 3
66227: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66228: LD_EXP 38
66232: PUSH
66233: LD_EXP 63
66237: AND
66238: IFFALSE 66292
66240: GO 66242
66242: DISABLE
// begin ToLua ( displayTroll(); ) ;
66243: LD_STRING displayTroll();
66245: PPUSH
66246: CALL_OW 559
// wait ( 3 3$00 ) ;
66250: LD_INT 6300
66252: PPUSH
66253: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66257: LD_STRING hideTroll();
66259: PPUSH
66260: CALL_OW 559
// wait ( 1 1$00 ) ;
66264: LD_INT 2100
66266: PPUSH
66267: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66271: LD_STRING displayTroll();
66273: PPUSH
66274: CALL_OW 559
// wait ( 1 1$00 ) ;
66278: LD_INT 2100
66280: PPUSH
66281: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66285: LD_STRING hideTroll();
66287: PPUSH
66288: CALL_OW 559
// end ;
66292: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66293: LD_EXP 38
66297: PUSH
66298: LD_EXP 64
66302: AND
66303: IFFALSE 66366
66305: GO 66307
66307: DISABLE
66308: LD_INT 0
66310: PPUSH
// begin p := 0 ;
66311: LD_ADDR_VAR 0 1
66315: PUSH
66316: LD_INT 0
66318: ST_TO_ADDR
// repeat game_speed := 1 ;
66319: LD_ADDR_OWVAR 65
66323: PUSH
66324: LD_INT 1
66326: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66327: LD_INT 35
66329: PPUSH
66330: CALL_OW 67
// p := p + 1 ;
66334: LD_ADDR_VAR 0 1
66338: PUSH
66339: LD_VAR 0 1
66343: PUSH
66344: LD_INT 1
66346: PLUS
66347: ST_TO_ADDR
// until p >= 60 ;
66348: LD_VAR 0 1
66352: PUSH
66353: LD_INT 60
66355: GREATEREQUAL
66356: IFFALSE 66319
// game_speed := 4 ;
66358: LD_ADDR_OWVAR 65
66362: PUSH
66363: LD_INT 4
66365: ST_TO_ADDR
// end ;
66366: PPOPN 1
66368: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66369: LD_EXP 38
66373: PUSH
66374: LD_EXP 65
66378: AND
66379: IFFALSE 66525
66381: GO 66383
66383: DISABLE
66384: LD_INT 0
66386: PPUSH
66387: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66388: LD_ADDR_VAR 0 1
66392: PUSH
66393: LD_INT 22
66395: PUSH
66396: LD_OWVAR 2
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 2
66407: PUSH
66408: LD_INT 30
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 30
66420: PUSH
66421: LD_INT 1
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: LIST
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PPUSH
66437: CALL_OW 69
66441: ST_TO_ADDR
// if not depot then
66442: LD_VAR 0 1
66446: NOT
66447: IFFALSE 66451
// exit ;
66449: GO 66525
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66451: LD_ADDR_VAR 0 2
66455: PUSH
66456: LD_VAR 0 1
66460: PUSH
66461: LD_INT 1
66463: PPUSH
66464: LD_VAR 0 1
66468: PPUSH
66469: CALL_OW 12
66473: ARRAY
66474: PPUSH
66475: CALL_OW 274
66479: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66480: LD_VAR 0 2
66484: PPUSH
66485: LD_INT 1
66487: PPUSH
66488: LD_INT 0
66490: PPUSH
66491: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66495: LD_VAR 0 2
66499: PPUSH
66500: LD_INT 2
66502: PPUSH
66503: LD_INT 0
66505: PPUSH
66506: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66510: LD_VAR 0 2
66514: PPUSH
66515: LD_INT 3
66517: PPUSH
66518: LD_INT 0
66520: PPUSH
66521: CALL_OW 277
// end ;
66525: PPOPN 2
66527: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66528: LD_EXP 38
66532: PUSH
66533: LD_EXP 66
66537: AND
66538: IFFALSE 66635
66540: GO 66542
66542: DISABLE
66543: LD_INT 0
66545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66546: LD_ADDR_VAR 0 1
66550: PUSH
66551: LD_INT 22
66553: PUSH
66554: LD_OWVAR 2
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 21
66565: PUSH
66566: LD_INT 1
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 3
66575: PUSH
66576: LD_INT 23
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: LIST
66594: PPUSH
66595: CALL_OW 69
66599: ST_TO_ADDR
// if not tmp then
66600: LD_VAR 0 1
66604: NOT
66605: IFFALSE 66609
// exit ;
66607: GO 66635
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66609: LD_VAR 0 1
66613: PUSH
66614: LD_INT 1
66616: PPUSH
66617: LD_VAR 0 1
66621: PPUSH
66622: CALL_OW 12
66626: ARRAY
66627: PPUSH
66628: LD_INT 200
66630: PPUSH
66631: CALL_OW 234
// end ;
66635: PPOPN 1
66637: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66638: LD_EXP 38
66642: PUSH
66643: LD_EXP 67
66647: AND
66648: IFFALSE 66727
66650: GO 66652
66652: DISABLE
66653: LD_INT 0
66655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66656: LD_ADDR_VAR 0 1
66660: PUSH
66661: LD_INT 22
66663: PUSH
66664: LD_OWVAR 2
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 21
66675: PUSH
66676: LD_INT 2
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PPUSH
66687: CALL_OW 69
66691: ST_TO_ADDR
// if not tmp then
66692: LD_VAR 0 1
66696: NOT
66697: IFFALSE 66701
// exit ;
66699: GO 66727
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66701: LD_VAR 0 1
66705: PUSH
66706: LD_INT 1
66708: PPUSH
66709: LD_VAR 0 1
66713: PPUSH
66714: CALL_OW 12
66718: ARRAY
66719: PPUSH
66720: LD_INT 60
66722: PPUSH
66723: CALL_OW 234
// end ;
66727: PPOPN 1
66729: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66730: LD_EXP 38
66734: PUSH
66735: LD_EXP 68
66739: AND
66740: IFFALSE 66839
66742: GO 66744
66744: DISABLE
66745: LD_INT 0
66747: PPUSH
66748: PPUSH
// begin enable ;
66749: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66750: LD_ADDR_VAR 0 1
66754: PUSH
66755: LD_INT 22
66757: PUSH
66758: LD_OWVAR 2
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 61
66769: PUSH
66770: EMPTY
66771: LIST
66772: PUSH
66773: LD_INT 33
66775: PUSH
66776: LD_INT 2
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: PPUSH
66788: CALL_OW 69
66792: ST_TO_ADDR
// if not tmp then
66793: LD_VAR 0 1
66797: NOT
66798: IFFALSE 66802
// exit ;
66800: GO 66839
// for i in tmp do
66802: LD_ADDR_VAR 0 2
66806: PUSH
66807: LD_VAR 0 1
66811: PUSH
66812: FOR_IN
66813: IFFALSE 66837
// if IsControledBy ( i ) then
66815: LD_VAR 0 2
66819: PPUSH
66820: CALL_OW 312
66824: IFFALSE 66835
// ComUnlink ( i ) ;
66826: LD_VAR 0 2
66830: PPUSH
66831: CALL_OW 136
66835: GO 66812
66837: POP
66838: POP
// end ;
66839: PPOPN 2
66841: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66842: LD_EXP 38
66846: PUSH
66847: LD_EXP 69
66851: AND
66852: IFFALSE 66992
66854: GO 66856
66856: DISABLE
66857: LD_INT 0
66859: PPUSH
66860: PPUSH
// begin ToLua ( displayPowell(); ) ;
66861: LD_STRING displayPowell();
66863: PPUSH
66864: CALL_OW 559
// uc_side := 0 ;
66868: LD_ADDR_OWVAR 20
66872: PUSH
66873: LD_INT 0
66875: ST_TO_ADDR
// uc_nation := 2 ;
66876: LD_ADDR_OWVAR 21
66880: PUSH
66881: LD_INT 2
66883: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66884: LD_ADDR_OWVAR 37
66888: PUSH
66889: LD_INT 14
66891: ST_TO_ADDR
// vc_engine := engine_siberite ;
66892: LD_ADDR_OWVAR 39
66896: PUSH
66897: LD_INT 3
66899: ST_TO_ADDR
// vc_control := control_apeman ;
66900: LD_ADDR_OWVAR 38
66904: PUSH
66905: LD_INT 5
66907: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66908: LD_ADDR_OWVAR 40
66912: PUSH
66913: LD_INT 29
66915: ST_TO_ADDR
// un := CreateVehicle ;
66916: LD_ADDR_VAR 0 2
66920: PUSH
66921: CALL_OW 45
66925: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66926: LD_VAR 0 2
66930: PPUSH
66931: LD_INT 1
66933: PPUSH
66934: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66938: LD_INT 35
66940: PPUSH
66941: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66945: LD_VAR 0 2
66949: PPUSH
66950: LD_INT 22
66952: PUSH
66953: LD_OWVAR 2
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PPUSH
66962: CALL_OW 69
66966: PPUSH
66967: LD_VAR 0 2
66971: PPUSH
66972: CALL_OW 74
66976: PPUSH
66977: CALL_OW 115
// until IsDead ( un ) ;
66981: LD_VAR 0 2
66985: PPUSH
66986: CALL_OW 301
66990: IFFALSE 66938
// end ;
66992: PPOPN 2
66994: END
// every 0 0$1 trigger StreamModeActive and sStu do
66995: LD_EXP 38
66999: PUSH
67000: LD_EXP 77
67004: AND
67005: IFFALSE 67021
67007: GO 67009
67009: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67010: LD_STRING displayStucuk();
67012: PPUSH
67013: CALL_OW 559
// ResetFog ;
67017: CALL_OW 335
// end ;
67021: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67022: LD_EXP 38
67026: PUSH
67027: LD_EXP 70
67031: AND
67032: IFFALSE 67173
67034: GO 67036
67036: DISABLE
67037: LD_INT 0
67039: PPUSH
67040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67041: LD_ADDR_VAR 0 2
67045: PUSH
67046: LD_INT 22
67048: PUSH
67049: LD_OWVAR 2
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 21
67060: PUSH
67061: LD_INT 1
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PPUSH
67072: CALL_OW 69
67076: ST_TO_ADDR
// if not tmp then
67077: LD_VAR 0 2
67081: NOT
67082: IFFALSE 67086
// exit ;
67084: GO 67173
// un := tmp [ rand ( 1 , tmp ) ] ;
67086: LD_ADDR_VAR 0 1
67090: PUSH
67091: LD_VAR 0 2
67095: PUSH
67096: LD_INT 1
67098: PPUSH
67099: LD_VAR 0 2
67103: PPUSH
67104: CALL_OW 12
67108: ARRAY
67109: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67110: LD_VAR 0 1
67114: PPUSH
67115: LD_INT 0
67117: PPUSH
67118: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67122: LD_VAR 0 1
67126: PPUSH
67127: LD_OWVAR 3
67131: PUSH
67132: LD_VAR 0 1
67136: DIFF
67137: PPUSH
67138: LD_VAR 0 1
67142: PPUSH
67143: CALL_OW 74
67147: PPUSH
67148: CALL_OW 115
// wait ( 0 0$20 ) ;
67152: LD_INT 700
67154: PPUSH
67155: CALL_OW 67
// SetSide ( un , your_side ) ;
67159: LD_VAR 0 1
67163: PPUSH
67164: LD_OWVAR 2
67168: PPUSH
67169: CALL_OW 235
// end ;
67173: PPOPN 2
67175: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67176: LD_EXP 38
67180: PUSH
67181: LD_EXP 71
67185: AND
67186: IFFALSE 67292
67188: GO 67190
67190: DISABLE
67191: LD_INT 0
67193: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67194: LD_ADDR_VAR 0 1
67198: PUSH
67199: LD_INT 22
67201: PUSH
67202: LD_OWVAR 2
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 2
67213: PUSH
67214: LD_INT 30
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 30
67226: PUSH
67227: LD_INT 1
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: LIST
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PPUSH
67243: CALL_OW 69
67247: ST_TO_ADDR
// if not depot then
67248: LD_VAR 0 1
67252: NOT
67253: IFFALSE 67257
// exit ;
67255: GO 67292
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67257: LD_VAR 0 1
67261: PUSH
67262: LD_INT 1
67264: ARRAY
67265: PPUSH
67266: CALL_OW 250
67270: PPUSH
67271: LD_VAR 0 1
67275: PUSH
67276: LD_INT 1
67278: ARRAY
67279: PPUSH
67280: CALL_OW 251
67284: PPUSH
67285: LD_INT 70
67287: PPUSH
67288: CALL_OW 495
// end ;
67292: PPOPN 1
67294: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67295: LD_EXP 38
67299: PUSH
67300: LD_EXP 72
67304: AND
67305: IFFALSE 67516
67307: GO 67309
67309: DISABLE
67310: LD_INT 0
67312: PPUSH
67313: PPUSH
67314: PPUSH
67315: PPUSH
67316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67317: LD_ADDR_VAR 0 5
67321: PUSH
67322: LD_INT 22
67324: PUSH
67325: LD_OWVAR 2
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 21
67336: PUSH
67337: LD_INT 1
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PPUSH
67348: CALL_OW 69
67352: ST_TO_ADDR
// if not tmp then
67353: LD_VAR 0 5
67357: NOT
67358: IFFALSE 67362
// exit ;
67360: GO 67516
// for i in tmp do
67362: LD_ADDR_VAR 0 1
67366: PUSH
67367: LD_VAR 0 5
67371: PUSH
67372: FOR_IN
67373: IFFALSE 67514
// begin d := rand ( 0 , 5 ) ;
67375: LD_ADDR_VAR 0 4
67379: PUSH
67380: LD_INT 0
67382: PPUSH
67383: LD_INT 5
67385: PPUSH
67386: CALL_OW 12
67390: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67391: LD_ADDR_VAR 0 2
67395: PUSH
67396: LD_VAR 0 1
67400: PPUSH
67401: CALL_OW 250
67405: PPUSH
67406: LD_VAR 0 4
67410: PPUSH
67411: LD_INT 3
67413: PPUSH
67414: LD_INT 12
67416: PPUSH
67417: CALL_OW 12
67421: PPUSH
67422: CALL_OW 272
67426: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67427: LD_ADDR_VAR 0 3
67431: PUSH
67432: LD_VAR 0 1
67436: PPUSH
67437: CALL_OW 251
67441: PPUSH
67442: LD_VAR 0 4
67446: PPUSH
67447: LD_INT 3
67449: PPUSH
67450: LD_INT 12
67452: PPUSH
67453: CALL_OW 12
67457: PPUSH
67458: CALL_OW 273
67462: ST_TO_ADDR
// if ValidHex ( x , y ) then
67463: LD_VAR 0 2
67467: PPUSH
67468: LD_VAR 0 3
67472: PPUSH
67473: CALL_OW 488
67477: IFFALSE 67512
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67479: LD_VAR 0 1
67483: PPUSH
67484: LD_VAR 0 2
67488: PPUSH
67489: LD_VAR 0 3
67493: PPUSH
67494: LD_INT 3
67496: PPUSH
67497: LD_INT 6
67499: PPUSH
67500: CALL_OW 12
67504: PPUSH
67505: LD_INT 1
67507: PPUSH
67508: CALL_OW 483
// end ;
67512: GO 67372
67514: POP
67515: POP
// end ;
67516: PPOPN 5
67518: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67519: LD_EXP 38
67523: PUSH
67524: LD_EXP 73
67528: AND
67529: IFFALSE 67623
67531: GO 67533
67533: DISABLE
67534: LD_INT 0
67536: PPUSH
67537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67538: LD_ADDR_VAR 0 2
67542: PUSH
67543: LD_INT 22
67545: PUSH
67546: LD_OWVAR 2
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 32
67557: PUSH
67558: LD_INT 1
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 21
67567: PUSH
67568: LD_INT 2
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: LIST
67579: PPUSH
67580: CALL_OW 69
67584: ST_TO_ADDR
// if not tmp then
67585: LD_VAR 0 2
67589: NOT
67590: IFFALSE 67594
// exit ;
67592: GO 67623
// for i in tmp do
67594: LD_ADDR_VAR 0 1
67598: PUSH
67599: LD_VAR 0 2
67603: PUSH
67604: FOR_IN
67605: IFFALSE 67621
// SetFuel ( i , 0 ) ;
67607: LD_VAR 0 1
67611: PPUSH
67612: LD_INT 0
67614: PPUSH
67615: CALL_OW 240
67619: GO 67604
67621: POP
67622: POP
// end ;
67623: PPOPN 2
67625: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67626: LD_EXP 38
67630: PUSH
67631: LD_EXP 74
67635: AND
67636: IFFALSE 67702
67638: GO 67640
67640: DISABLE
67641: LD_INT 0
67643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67644: LD_ADDR_VAR 0 1
67648: PUSH
67649: LD_INT 22
67651: PUSH
67652: LD_OWVAR 2
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 30
67663: PUSH
67664: LD_INT 29
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PPUSH
67675: CALL_OW 69
67679: ST_TO_ADDR
// if not tmp then
67680: LD_VAR 0 1
67684: NOT
67685: IFFALSE 67689
// exit ;
67687: GO 67702
// DestroyUnit ( tmp [ 1 ] ) ;
67689: LD_VAR 0 1
67693: PUSH
67694: LD_INT 1
67696: ARRAY
67697: PPUSH
67698: CALL_OW 65
// end ;
67702: PPOPN 1
67704: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67705: LD_EXP 38
67709: PUSH
67710: LD_EXP 76
67714: AND
67715: IFFALSE 67844
67717: GO 67719
67719: DISABLE
67720: LD_INT 0
67722: PPUSH
// begin uc_side := 0 ;
67723: LD_ADDR_OWVAR 20
67727: PUSH
67728: LD_INT 0
67730: ST_TO_ADDR
// uc_nation := nation_arabian ;
67731: LD_ADDR_OWVAR 21
67735: PUSH
67736: LD_INT 2
67738: ST_TO_ADDR
// hc_gallery :=  ;
67739: LD_ADDR_OWVAR 33
67743: PUSH
67744: LD_STRING 
67746: ST_TO_ADDR
// hc_name :=  ;
67747: LD_ADDR_OWVAR 26
67751: PUSH
67752: LD_STRING 
67754: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67755: LD_INT 1
67757: PPUSH
67758: LD_INT 11
67760: PPUSH
67761: LD_INT 10
67763: PPUSH
67764: CALL_OW 380
// un := CreateHuman ;
67768: LD_ADDR_VAR 0 1
67772: PUSH
67773: CALL_OW 44
67777: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67778: LD_VAR 0 1
67782: PPUSH
67783: LD_INT 1
67785: PPUSH
67786: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67790: LD_INT 35
67792: PPUSH
67793: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67797: LD_VAR 0 1
67801: PPUSH
67802: LD_INT 22
67804: PUSH
67805: LD_OWVAR 2
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PPUSH
67814: CALL_OW 69
67818: PPUSH
67819: LD_VAR 0 1
67823: PPUSH
67824: CALL_OW 74
67828: PPUSH
67829: CALL_OW 115
// until IsDead ( un ) ;
67833: LD_VAR 0 1
67837: PPUSH
67838: CALL_OW 301
67842: IFFALSE 67790
// end ;
67844: PPOPN 1
67846: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67847: LD_EXP 38
67851: PUSH
67852: LD_EXP 78
67856: AND
67857: IFFALSE 67869
67859: GO 67861
67861: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67862: LD_STRING earthquake(getX(game), 0, 32)
67864: PPUSH
67865: CALL_OW 559
67869: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67870: LD_EXP 38
67874: PUSH
67875: LD_EXP 79
67879: AND
67880: IFFALSE 67971
67882: GO 67884
67884: DISABLE
67885: LD_INT 0
67887: PPUSH
// begin enable ;
67888: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67889: LD_ADDR_VAR 0 1
67893: PUSH
67894: LD_INT 22
67896: PUSH
67897: LD_OWVAR 2
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 21
67908: PUSH
67909: LD_INT 2
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 33
67918: PUSH
67919: LD_INT 3
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: LIST
67930: PPUSH
67931: CALL_OW 69
67935: ST_TO_ADDR
// if not tmp then
67936: LD_VAR 0 1
67940: NOT
67941: IFFALSE 67945
// exit ;
67943: GO 67971
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67945: LD_VAR 0 1
67949: PUSH
67950: LD_INT 1
67952: PPUSH
67953: LD_VAR 0 1
67957: PPUSH
67958: CALL_OW 12
67962: ARRAY
67963: PPUSH
67964: LD_INT 1
67966: PPUSH
67967: CALL_OW 234
// end ;
67971: PPOPN 1
67973: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67974: LD_EXP 38
67978: PUSH
67979: LD_EXP 80
67983: AND
67984: IFFALSE 68125
67986: GO 67988
67988: DISABLE
67989: LD_INT 0
67991: PPUSH
67992: PPUSH
67993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67994: LD_ADDR_VAR 0 3
67998: PUSH
67999: LD_INT 22
68001: PUSH
68002: LD_OWVAR 2
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 25
68013: PUSH
68014: LD_INT 1
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PPUSH
68025: CALL_OW 69
68029: ST_TO_ADDR
// if not tmp then
68030: LD_VAR 0 3
68034: NOT
68035: IFFALSE 68039
// exit ;
68037: GO 68125
// un := tmp [ rand ( 1 , tmp ) ] ;
68039: LD_ADDR_VAR 0 2
68043: PUSH
68044: LD_VAR 0 3
68048: PUSH
68049: LD_INT 1
68051: PPUSH
68052: LD_VAR 0 3
68056: PPUSH
68057: CALL_OW 12
68061: ARRAY
68062: ST_TO_ADDR
// if Crawls ( un ) then
68063: LD_VAR 0 2
68067: PPUSH
68068: CALL_OW 318
68072: IFFALSE 68083
// ComWalk ( un ) ;
68074: LD_VAR 0 2
68078: PPUSH
68079: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68083: LD_VAR 0 2
68087: PPUSH
68088: LD_INT 9
68090: PPUSH
68091: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68095: LD_INT 28
68097: PPUSH
68098: LD_OWVAR 2
68102: PPUSH
68103: LD_INT 2
68105: PPUSH
68106: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68110: LD_INT 29
68112: PPUSH
68113: LD_OWVAR 2
68117: PPUSH
68118: LD_INT 2
68120: PPUSH
68121: CALL_OW 322
// end ;
68125: PPOPN 3
68127: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68128: LD_EXP 38
68132: PUSH
68133: LD_EXP 81
68137: AND
68138: IFFALSE 68249
68140: GO 68142
68142: DISABLE
68143: LD_INT 0
68145: PPUSH
68146: PPUSH
68147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68148: LD_ADDR_VAR 0 3
68152: PUSH
68153: LD_INT 22
68155: PUSH
68156: LD_OWVAR 2
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 25
68167: PUSH
68168: LD_INT 1
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PPUSH
68179: CALL_OW 69
68183: ST_TO_ADDR
// if not tmp then
68184: LD_VAR 0 3
68188: NOT
68189: IFFALSE 68193
// exit ;
68191: GO 68249
// un := tmp [ rand ( 1 , tmp ) ] ;
68193: LD_ADDR_VAR 0 2
68197: PUSH
68198: LD_VAR 0 3
68202: PUSH
68203: LD_INT 1
68205: PPUSH
68206: LD_VAR 0 3
68210: PPUSH
68211: CALL_OW 12
68215: ARRAY
68216: ST_TO_ADDR
// if Crawls ( un ) then
68217: LD_VAR 0 2
68221: PPUSH
68222: CALL_OW 318
68226: IFFALSE 68237
// ComWalk ( un ) ;
68228: LD_VAR 0 2
68232: PPUSH
68233: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68237: LD_VAR 0 2
68241: PPUSH
68242: LD_INT 8
68244: PPUSH
68245: CALL_OW 336
// end ;
68249: PPOPN 3
68251: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68252: LD_EXP 38
68256: PUSH
68257: LD_EXP 82
68261: AND
68262: IFFALSE 68406
68264: GO 68266
68266: DISABLE
68267: LD_INT 0
68269: PPUSH
68270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68271: LD_ADDR_VAR 0 2
68275: PUSH
68276: LD_INT 22
68278: PUSH
68279: LD_OWVAR 2
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 21
68290: PUSH
68291: LD_INT 2
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 2
68300: PUSH
68301: LD_INT 34
68303: PUSH
68304: LD_INT 12
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 34
68313: PUSH
68314: LD_INT 51
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 34
68323: PUSH
68324: LD_INT 32
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: LIST
68341: PPUSH
68342: CALL_OW 69
68346: ST_TO_ADDR
// if not tmp then
68347: LD_VAR 0 2
68351: NOT
68352: IFFALSE 68356
// exit ;
68354: GO 68406
// for i in tmp do
68356: LD_ADDR_VAR 0 1
68360: PUSH
68361: LD_VAR 0 2
68365: PUSH
68366: FOR_IN
68367: IFFALSE 68404
// if GetCargo ( i , mat_artifact ) = 0 then
68369: LD_VAR 0 1
68373: PPUSH
68374: LD_INT 4
68376: PPUSH
68377: CALL_OW 289
68381: PUSH
68382: LD_INT 0
68384: EQUAL
68385: IFFALSE 68402
// SetCargo ( i , mat_siberit , 100 ) ;
68387: LD_VAR 0 1
68391: PPUSH
68392: LD_INT 3
68394: PPUSH
68395: LD_INT 100
68397: PPUSH
68398: CALL_OW 290
68402: GO 68366
68404: POP
68405: POP
// end ;
68406: PPOPN 2
68408: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68409: LD_EXP 38
68413: PUSH
68414: LD_EXP 83
68418: AND
68419: IFFALSE 68602
68421: GO 68423
68423: DISABLE
68424: LD_INT 0
68426: PPUSH
68427: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68428: LD_ADDR_VAR 0 2
68432: PUSH
68433: LD_INT 22
68435: PUSH
68436: LD_OWVAR 2
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PPUSH
68445: CALL_OW 69
68449: ST_TO_ADDR
// if not tmp then
68450: LD_VAR 0 2
68454: NOT
68455: IFFALSE 68459
// exit ;
68457: GO 68602
// for i := 1 to 2 do
68459: LD_ADDR_VAR 0 1
68463: PUSH
68464: DOUBLE
68465: LD_INT 1
68467: DEC
68468: ST_TO_ADDR
68469: LD_INT 2
68471: PUSH
68472: FOR_TO
68473: IFFALSE 68600
// begin uc_side := your_side ;
68475: LD_ADDR_OWVAR 20
68479: PUSH
68480: LD_OWVAR 2
68484: ST_TO_ADDR
// uc_nation := nation_american ;
68485: LD_ADDR_OWVAR 21
68489: PUSH
68490: LD_INT 1
68492: ST_TO_ADDR
// vc_chassis := us_morphling ;
68493: LD_ADDR_OWVAR 37
68497: PUSH
68498: LD_INT 5
68500: ST_TO_ADDR
// vc_engine := engine_siberite ;
68501: LD_ADDR_OWVAR 39
68505: PUSH
68506: LD_INT 3
68508: ST_TO_ADDR
// vc_control := control_computer ;
68509: LD_ADDR_OWVAR 38
68513: PUSH
68514: LD_INT 3
68516: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68517: LD_ADDR_OWVAR 40
68521: PUSH
68522: LD_INT 10
68524: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68525: LD_VAR 0 2
68529: PUSH
68530: LD_INT 1
68532: ARRAY
68533: PPUSH
68534: CALL_OW 310
68538: NOT
68539: IFFALSE 68586
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68541: CALL_OW 45
68545: PPUSH
68546: LD_VAR 0 2
68550: PUSH
68551: LD_INT 1
68553: ARRAY
68554: PPUSH
68555: CALL_OW 250
68559: PPUSH
68560: LD_VAR 0 2
68564: PUSH
68565: LD_INT 1
68567: ARRAY
68568: PPUSH
68569: CALL_OW 251
68573: PPUSH
68574: LD_INT 12
68576: PPUSH
68577: LD_INT 1
68579: PPUSH
68580: CALL_OW 50
68584: GO 68598
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68586: CALL_OW 45
68590: PPUSH
68591: LD_INT 1
68593: PPUSH
68594: CALL_OW 51
// end ;
68598: GO 68472
68600: POP
68601: POP
// end ;
68602: PPOPN 2
68604: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68605: LD_EXP 38
68609: PUSH
68610: LD_EXP 84
68614: AND
68615: IFFALSE 68837
68617: GO 68619
68619: DISABLE
68620: LD_INT 0
68622: PPUSH
68623: PPUSH
68624: PPUSH
68625: PPUSH
68626: PPUSH
68627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68628: LD_ADDR_VAR 0 6
68632: PUSH
68633: LD_INT 22
68635: PUSH
68636: LD_OWVAR 2
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 21
68647: PUSH
68648: LD_INT 1
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 3
68657: PUSH
68658: LD_INT 23
68660: PUSH
68661: LD_INT 0
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: LIST
68676: PPUSH
68677: CALL_OW 69
68681: ST_TO_ADDR
// if not tmp then
68682: LD_VAR 0 6
68686: NOT
68687: IFFALSE 68691
// exit ;
68689: GO 68837
// s1 := rand ( 1 , 4 ) ;
68691: LD_ADDR_VAR 0 2
68695: PUSH
68696: LD_INT 1
68698: PPUSH
68699: LD_INT 4
68701: PPUSH
68702: CALL_OW 12
68706: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68707: LD_ADDR_VAR 0 4
68711: PUSH
68712: LD_VAR 0 6
68716: PUSH
68717: LD_INT 1
68719: ARRAY
68720: PPUSH
68721: LD_VAR 0 2
68725: PPUSH
68726: CALL_OW 259
68730: ST_TO_ADDR
// if s1 = 1 then
68731: LD_VAR 0 2
68735: PUSH
68736: LD_INT 1
68738: EQUAL
68739: IFFALSE 68759
// s2 := rand ( 2 , 4 ) else
68741: LD_ADDR_VAR 0 3
68745: PUSH
68746: LD_INT 2
68748: PPUSH
68749: LD_INT 4
68751: PPUSH
68752: CALL_OW 12
68756: ST_TO_ADDR
68757: GO 68767
// s2 := 1 ;
68759: LD_ADDR_VAR 0 3
68763: PUSH
68764: LD_INT 1
68766: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68767: LD_ADDR_VAR 0 5
68771: PUSH
68772: LD_VAR 0 6
68776: PUSH
68777: LD_INT 1
68779: ARRAY
68780: PPUSH
68781: LD_VAR 0 3
68785: PPUSH
68786: CALL_OW 259
68790: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68791: LD_VAR 0 6
68795: PUSH
68796: LD_INT 1
68798: ARRAY
68799: PPUSH
68800: LD_VAR 0 2
68804: PPUSH
68805: LD_VAR 0 5
68809: PPUSH
68810: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68814: LD_VAR 0 6
68818: PUSH
68819: LD_INT 1
68821: ARRAY
68822: PPUSH
68823: LD_VAR 0 3
68827: PPUSH
68828: LD_VAR 0 4
68832: PPUSH
68833: CALL_OW 237
// end ;
68837: PPOPN 6
68839: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68840: LD_EXP 38
68844: PUSH
68845: LD_EXP 85
68849: AND
68850: IFFALSE 68929
68852: GO 68854
68854: DISABLE
68855: LD_INT 0
68857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68858: LD_ADDR_VAR 0 1
68862: PUSH
68863: LD_INT 22
68865: PUSH
68866: LD_OWVAR 2
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 30
68877: PUSH
68878: LD_INT 3
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PPUSH
68889: CALL_OW 69
68893: ST_TO_ADDR
// if not tmp then
68894: LD_VAR 0 1
68898: NOT
68899: IFFALSE 68903
// exit ;
68901: GO 68929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68903: LD_VAR 0 1
68907: PUSH
68908: LD_INT 1
68910: PPUSH
68911: LD_VAR 0 1
68915: PPUSH
68916: CALL_OW 12
68920: ARRAY
68921: PPUSH
68922: LD_INT 1
68924: PPUSH
68925: CALL_OW 234
// end ;
68929: PPOPN 1
68931: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68932: LD_EXP 38
68936: PUSH
68937: LD_EXP 86
68941: AND
68942: IFFALSE 69054
68944: GO 68946
68946: DISABLE
68947: LD_INT 0
68949: PPUSH
68950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68951: LD_ADDR_VAR 0 2
68955: PUSH
68956: LD_INT 22
68958: PUSH
68959: LD_OWVAR 2
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 2
68970: PUSH
68971: LD_INT 30
68973: PUSH
68974: LD_INT 27
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 30
68983: PUSH
68984: LD_INT 26
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 30
68993: PUSH
68994: LD_INT 28
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PPUSH
69011: CALL_OW 69
69015: ST_TO_ADDR
// if not tmp then
69016: LD_VAR 0 2
69020: NOT
69021: IFFALSE 69025
// exit ;
69023: GO 69054
// for i in tmp do
69025: LD_ADDR_VAR 0 1
69029: PUSH
69030: LD_VAR 0 2
69034: PUSH
69035: FOR_IN
69036: IFFALSE 69052
// SetLives ( i , 1 ) ;
69038: LD_VAR 0 1
69042: PPUSH
69043: LD_INT 1
69045: PPUSH
69046: CALL_OW 234
69050: GO 69035
69052: POP
69053: POP
// end ;
69054: PPOPN 2
69056: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69057: LD_EXP 38
69061: PUSH
69062: LD_EXP 87
69066: AND
69067: IFFALSE 69354
69069: GO 69071
69071: DISABLE
69072: LD_INT 0
69074: PPUSH
69075: PPUSH
69076: PPUSH
// begin i := rand ( 1 , 7 ) ;
69077: LD_ADDR_VAR 0 1
69081: PUSH
69082: LD_INT 1
69084: PPUSH
69085: LD_INT 7
69087: PPUSH
69088: CALL_OW 12
69092: ST_TO_ADDR
// case i of 1 :
69093: LD_VAR 0 1
69097: PUSH
69098: LD_INT 1
69100: DOUBLE
69101: EQUAL
69102: IFTRUE 69106
69104: GO 69116
69106: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69107: LD_STRING earthquake(getX(game), 0, 32)
69109: PPUSH
69110: CALL_OW 559
69114: GO 69354
69116: LD_INT 2
69118: DOUBLE
69119: EQUAL
69120: IFTRUE 69124
69122: GO 69138
69124: POP
// begin ToLua ( displayStucuk(); ) ;
69125: LD_STRING displayStucuk();
69127: PPUSH
69128: CALL_OW 559
// ResetFog ;
69132: CALL_OW 335
// end ; 3 :
69136: GO 69354
69138: LD_INT 3
69140: DOUBLE
69141: EQUAL
69142: IFTRUE 69146
69144: GO 69250
69146: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69147: LD_ADDR_VAR 0 2
69151: PUSH
69152: LD_INT 22
69154: PUSH
69155: LD_OWVAR 2
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 25
69166: PUSH
69167: LD_INT 1
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PPUSH
69178: CALL_OW 69
69182: ST_TO_ADDR
// if not tmp then
69183: LD_VAR 0 2
69187: NOT
69188: IFFALSE 69192
// exit ;
69190: GO 69354
// un := tmp [ rand ( 1 , tmp ) ] ;
69192: LD_ADDR_VAR 0 3
69196: PUSH
69197: LD_VAR 0 2
69201: PUSH
69202: LD_INT 1
69204: PPUSH
69205: LD_VAR 0 2
69209: PPUSH
69210: CALL_OW 12
69214: ARRAY
69215: ST_TO_ADDR
// if Crawls ( un ) then
69216: LD_VAR 0 3
69220: PPUSH
69221: CALL_OW 318
69225: IFFALSE 69236
// ComWalk ( un ) ;
69227: LD_VAR 0 3
69231: PPUSH
69232: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69236: LD_VAR 0 3
69240: PPUSH
69241: LD_INT 8
69243: PPUSH
69244: CALL_OW 336
// end ; 4 :
69248: GO 69354
69250: LD_INT 4
69252: DOUBLE
69253: EQUAL
69254: IFTRUE 69258
69256: GO 69332
69258: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69259: LD_ADDR_VAR 0 2
69263: PUSH
69264: LD_INT 22
69266: PUSH
69267: LD_OWVAR 2
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 30
69278: PUSH
69279: LD_INT 29
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PPUSH
69290: CALL_OW 69
69294: ST_TO_ADDR
// if not tmp then
69295: LD_VAR 0 2
69299: NOT
69300: IFFALSE 69304
// exit ;
69302: GO 69354
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69304: LD_VAR 0 2
69308: PUSH
69309: LD_INT 1
69311: ARRAY
69312: PPUSH
69313: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69317: LD_VAR 0 2
69321: PUSH
69322: LD_INT 1
69324: ARRAY
69325: PPUSH
69326: CALL_OW 65
// end ; 5 .. 7 :
69330: GO 69354
69332: LD_INT 5
69334: DOUBLE
69335: GREATEREQUAL
69336: IFFALSE 69344
69338: LD_INT 7
69340: DOUBLE
69341: LESSEQUAL
69342: IFTRUE 69346
69344: GO 69353
69346: POP
// StreamSibBomb ; end ;
69347: CALL 65591 0 0
69351: GO 69354
69353: POP
// end ;
69354: PPOPN 3
69356: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69357: LD_EXP 38
69361: PUSH
69362: LD_EXP 88
69366: AND
69367: IFFALSE 69523
69369: GO 69371
69371: DISABLE
69372: LD_INT 0
69374: PPUSH
69375: PPUSH
69376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69377: LD_ADDR_VAR 0 2
69381: PUSH
69382: LD_INT 81
69384: PUSH
69385: LD_OWVAR 2
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 2
69396: PUSH
69397: LD_INT 21
69399: PUSH
69400: LD_INT 1
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 21
69409: PUSH
69410: LD_INT 2
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: LIST
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PPUSH
69426: CALL_OW 69
69430: ST_TO_ADDR
// if not tmp then
69431: LD_VAR 0 2
69435: NOT
69436: IFFALSE 69440
// exit ;
69438: GO 69523
// p := 0 ;
69440: LD_ADDR_VAR 0 3
69444: PUSH
69445: LD_INT 0
69447: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69448: LD_INT 35
69450: PPUSH
69451: CALL_OW 67
// p := p + 1 ;
69455: LD_ADDR_VAR 0 3
69459: PUSH
69460: LD_VAR 0 3
69464: PUSH
69465: LD_INT 1
69467: PLUS
69468: ST_TO_ADDR
// for i in tmp do
69469: LD_ADDR_VAR 0 1
69473: PUSH
69474: LD_VAR 0 2
69478: PUSH
69479: FOR_IN
69480: IFFALSE 69511
// if GetLives ( i ) < 1000 then
69482: LD_VAR 0 1
69486: PPUSH
69487: CALL_OW 256
69491: PUSH
69492: LD_INT 1000
69494: LESS
69495: IFFALSE 69509
// SetLives ( i , 1000 ) ;
69497: LD_VAR 0 1
69501: PPUSH
69502: LD_INT 1000
69504: PPUSH
69505: CALL_OW 234
69509: GO 69479
69511: POP
69512: POP
// until p > 20 ;
69513: LD_VAR 0 3
69517: PUSH
69518: LD_INT 20
69520: GREATER
69521: IFFALSE 69448
// end ;
69523: PPOPN 3
69525: END
// every 0 0$1 trigger StreamModeActive and sTime do
69526: LD_EXP 38
69530: PUSH
69531: LD_EXP 89
69535: AND
69536: IFFALSE 69571
69538: GO 69540
69540: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69541: LD_INT 28
69543: PPUSH
69544: LD_OWVAR 2
69548: PPUSH
69549: LD_INT 2
69551: PPUSH
69552: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69556: LD_INT 30
69558: PPUSH
69559: LD_OWVAR 2
69563: PPUSH
69564: LD_INT 2
69566: PPUSH
69567: CALL_OW 322
// end ;
69571: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69572: LD_EXP 38
69576: PUSH
69577: LD_EXP 90
69581: AND
69582: IFFALSE 69703
69584: GO 69586
69586: DISABLE
69587: LD_INT 0
69589: PPUSH
69590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69591: LD_ADDR_VAR 0 2
69595: PUSH
69596: LD_INT 22
69598: PUSH
69599: LD_OWVAR 2
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 21
69610: PUSH
69611: LD_INT 1
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 3
69620: PUSH
69621: LD_INT 23
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: LIST
69639: PPUSH
69640: CALL_OW 69
69644: ST_TO_ADDR
// if not tmp then
69645: LD_VAR 0 2
69649: NOT
69650: IFFALSE 69654
// exit ;
69652: GO 69703
// for i in tmp do
69654: LD_ADDR_VAR 0 1
69658: PUSH
69659: LD_VAR 0 2
69663: PUSH
69664: FOR_IN
69665: IFFALSE 69701
// begin if Crawls ( i ) then
69667: LD_VAR 0 1
69671: PPUSH
69672: CALL_OW 318
69676: IFFALSE 69687
// ComWalk ( i ) ;
69678: LD_VAR 0 1
69682: PPUSH
69683: CALL_OW 138
// SetClass ( i , 2 ) ;
69687: LD_VAR 0 1
69691: PPUSH
69692: LD_INT 2
69694: PPUSH
69695: CALL_OW 336
// end ;
69699: GO 69664
69701: POP
69702: POP
// end ;
69703: PPOPN 2
69705: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69706: LD_EXP 38
69710: PUSH
69711: LD_EXP 91
69715: AND
69716: IFFALSE 70004
69718: GO 69720
69720: DISABLE
69721: LD_INT 0
69723: PPUSH
69724: PPUSH
69725: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69726: LD_OWVAR 2
69730: PPUSH
69731: LD_INT 9
69733: PPUSH
69734: LD_INT 1
69736: PPUSH
69737: LD_INT 1
69739: PPUSH
69740: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69744: LD_INT 9
69746: PPUSH
69747: LD_OWVAR 2
69751: PPUSH
69752: CALL_OW 343
// uc_side := 9 ;
69756: LD_ADDR_OWVAR 20
69760: PUSH
69761: LD_INT 9
69763: ST_TO_ADDR
// uc_nation := 2 ;
69764: LD_ADDR_OWVAR 21
69768: PUSH
69769: LD_INT 2
69771: ST_TO_ADDR
// hc_name := Dark Warrior ;
69772: LD_ADDR_OWVAR 26
69776: PUSH
69777: LD_STRING Dark Warrior
69779: ST_TO_ADDR
// hc_gallery :=  ;
69780: LD_ADDR_OWVAR 33
69784: PUSH
69785: LD_STRING 
69787: ST_TO_ADDR
// hc_noskilllimit := true ;
69788: LD_ADDR_OWVAR 76
69792: PUSH
69793: LD_INT 1
69795: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69796: LD_ADDR_OWVAR 31
69800: PUSH
69801: LD_INT 30
69803: PUSH
69804: LD_INT 30
69806: PUSH
69807: LD_INT 30
69809: PUSH
69810: LD_INT 30
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: ST_TO_ADDR
// un := CreateHuman ;
69819: LD_ADDR_VAR 0 3
69823: PUSH
69824: CALL_OW 44
69828: ST_TO_ADDR
// hc_noskilllimit := false ;
69829: LD_ADDR_OWVAR 76
69833: PUSH
69834: LD_INT 0
69836: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69837: LD_VAR 0 3
69841: PPUSH
69842: LD_INT 1
69844: PPUSH
69845: CALL_OW 51
// ToLua ( playRanger() ) ;
69849: LD_STRING playRanger()
69851: PPUSH
69852: CALL_OW 559
// p := 0 ;
69856: LD_ADDR_VAR 0 2
69860: PUSH
69861: LD_INT 0
69863: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69864: LD_INT 35
69866: PPUSH
69867: CALL_OW 67
// p := p + 1 ;
69871: LD_ADDR_VAR 0 2
69875: PUSH
69876: LD_VAR 0 2
69880: PUSH
69881: LD_INT 1
69883: PLUS
69884: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69885: LD_VAR 0 3
69889: PPUSH
69890: CALL_OW 256
69894: PUSH
69895: LD_INT 1000
69897: LESS
69898: IFFALSE 69912
// SetLives ( un , 1000 ) ;
69900: LD_VAR 0 3
69904: PPUSH
69905: LD_INT 1000
69907: PPUSH
69908: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69912: LD_VAR 0 3
69916: PPUSH
69917: LD_INT 81
69919: PUSH
69920: LD_OWVAR 2
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 91
69931: PUSH
69932: LD_VAR 0 3
69936: PUSH
69937: LD_INT 30
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: LIST
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PPUSH
69949: CALL_OW 69
69953: PPUSH
69954: LD_VAR 0 3
69958: PPUSH
69959: CALL_OW 74
69963: PPUSH
69964: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
69968: LD_VAR 0 2
69972: PUSH
69973: LD_INT 80
69975: GREATER
69976: PUSH
69977: LD_VAR 0 3
69981: PPUSH
69982: CALL_OW 301
69986: OR
69987: IFFALSE 69864
// if un then
69989: LD_VAR 0 3
69993: IFFALSE 70004
// RemoveUnit ( un ) ;
69995: LD_VAR 0 3
69999: PPUSH
70000: CALL_OW 64
// end ;
70004: PPOPN 3
70006: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70007: LD_EXP 92
70011: IFFALSE 70127
70013: GO 70015
70015: DISABLE
70016: LD_INT 0
70018: PPUSH
70019: PPUSH
70020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70021: LD_ADDR_VAR 0 2
70025: PUSH
70026: LD_INT 81
70028: PUSH
70029: LD_OWVAR 2
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 21
70040: PUSH
70041: LD_INT 1
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PPUSH
70052: CALL_OW 69
70056: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70057: LD_STRING playComputer()
70059: PPUSH
70060: CALL_OW 559
// if not tmp then
70064: LD_VAR 0 2
70068: NOT
70069: IFFALSE 70073
// exit ;
70071: GO 70127
// for i in tmp do
70073: LD_ADDR_VAR 0 1
70077: PUSH
70078: LD_VAR 0 2
70082: PUSH
70083: FOR_IN
70084: IFFALSE 70125
// for j := 1 to 4 do
70086: LD_ADDR_VAR 0 3
70090: PUSH
70091: DOUBLE
70092: LD_INT 1
70094: DEC
70095: ST_TO_ADDR
70096: LD_INT 4
70098: PUSH
70099: FOR_TO
70100: IFFALSE 70121
// SetSkill ( i , j , 10 ) ;
70102: LD_VAR 0 1
70106: PPUSH
70107: LD_VAR 0 3
70111: PPUSH
70112: LD_INT 10
70114: PPUSH
70115: CALL_OW 237
70119: GO 70099
70121: POP
70122: POP
70123: GO 70083
70125: POP
70126: POP
// end ;
70127: PPOPN 3
70129: END
// every 0 0$1 trigger s30 do var i , tmp ;
70130: LD_EXP 93
70134: IFFALSE 70203
70136: GO 70138
70138: DISABLE
70139: LD_INT 0
70141: PPUSH
70142: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70143: LD_ADDR_VAR 0 2
70147: PUSH
70148: LD_INT 22
70150: PUSH
70151: LD_OWVAR 2
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PPUSH
70160: CALL_OW 69
70164: ST_TO_ADDR
// if not tmp then
70165: LD_VAR 0 2
70169: NOT
70170: IFFALSE 70174
// exit ;
70172: GO 70203
// for i in tmp do
70174: LD_ADDR_VAR 0 1
70178: PUSH
70179: LD_VAR 0 2
70183: PUSH
70184: FOR_IN
70185: IFFALSE 70201
// SetLives ( i , 300 ) ;
70187: LD_VAR 0 1
70191: PPUSH
70192: LD_INT 300
70194: PPUSH
70195: CALL_OW 234
70199: GO 70184
70201: POP
70202: POP
// end ;
70203: PPOPN 2
70205: END
// every 0 0$1 trigger s60 do var i , tmp ;
70206: LD_EXP 94
70210: IFFALSE 70279
70212: GO 70214
70214: DISABLE
70215: LD_INT 0
70217: PPUSH
70218: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70219: LD_ADDR_VAR 0 2
70223: PUSH
70224: LD_INT 22
70226: PUSH
70227: LD_OWVAR 2
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PPUSH
70236: CALL_OW 69
70240: ST_TO_ADDR
// if not tmp then
70241: LD_VAR 0 2
70245: NOT
70246: IFFALSE 70250
// exit ;
70248: GO 70279
// for i in tmp do
70250: LD_ADDR_VAR 0 1
70254: PUSH
70255: LD_VAR 0 2
70259: PUSH
70260: FOR_IN
70261: IFFALSE 70277
// SetLives ( i , 600 ) ;
70263: LD_VAR 0 1
70267: PPUSH
70268: LD_INT 600
70270: PPUSH
70271: CALL_OW 234
70275: GO 70260
70277: POP
70278: POP
// end ;
70279: PPOPN 2
70281: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70282: LD_INT 0
70284: PPUSH
// case cmd of 301 :
70285: LD_VAR 0 1
70289: PUSH
70290: LD_INT 301
70292: DOUBLE
70293: EQUAL
70294: IFTRUE 70298
70296: GO 70330
70298: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70299: LD_VAR 0 6
70303: PPUSH
70304: LD_VAR 0 7
70308: PPUSH
70309: LD_VAR 0 8
70313: PPUSH
70314: LD_VAR 0 4
70318: PPUSH
70319: LD_VAR 0 5
70323: PPUSH
70324: CALL 71539 0 5
70328: GO 70451
70330: LD_INT 302
70332: DOUBLE
70333: EQUAL
70334: IFTRUE 70338
70336: GO 70375
70338: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70339: LD_VAR 0 6
70343: PPUSH
70344: LD_VAR 0 7
70348: PPUSH
70349: LD_VAR 0 8
70353: PPUSH
70354: LD_VAR 0 9
70358: PPUSH
70359: LD_VAR 0 4
70363: PPUSH
70364: LD_VAR 0 5
70368: PPUSH
70369: CALL 71630 0 6
70373: GO 70451
70375: LD_INT 303
70377: DOUBLE
70378: EQUAL
70379: IFTRUE 70383
70381: GO 70420
70383: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70384: LD_VAR 0 6
70388: PPUSH
70389: LD_VAR 0 7
70393: PPUSH
70394: LD_VAR 0 8
70398: PPUSH
70399: LD_VAR 0 9
70403: PPUSH
70404: LD_VAR 0 4
70408: PPUSH
70409: LD_VAR 0 5
70413: PPUSH
70414: CALL 70456 0 6
70418: GO 70451
70420: LD_INT 304
70422: DOUBLE
70423: EQUAL
70424: IFTRUE 70428
70426: GO 70450
70428: POP
// hHackTeleport ( unit , x , y ) ; end ;
70429: LD_VAR 0 2
70433: PPUSH
70434: LD_VAR 0 4
70438: PPUSH
70439: LD_VAR 0 5
70443: PPUSH
70444: CALL 72223 0 3
70448: GO 70451
70450: POP
// end ;
70451: LD_VAR 0 12
70455: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70456: LD_INT 0
70458: PPUSH
70459: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70460: LD_VAR 0 1
70464: PUSH
70465: LD_INT 1
70467: LESS
70468: PUSH
70469: LD_VAR 0 1
70473: PUSH
70474: LD_INT 3
70476: GREATER
70477: OR
70478: PUSH
70479: LD_VAR 0 5
70483: PPUSH
70484: LD_VAR 0 6
70488: PPUSH
70489: CALL_OW 428
70493: OR
70494: IFFALSE 70498
// exit ;
70496: GO 71226
// uc_side := your_side ;
70498: LD_ADDR_OWVAR 20
70502: PUSH
70503: LD_OWVAR 2
70507: ST_TO_ADDR
// uc_nation := nation ;
70508: LD_ADDR_OWVAR 21
70512: PUSH
70513: LD_VAR 0 1
70517: ST_TO_ADDR
// bc_level = 1 ;
70518: LD_ADDR_OWVAR 43
70522: PUSH
70523: LD_INT 1
70525: ST_TO_ADDR
// case btype of 1 :
70526: LD_VAR 0 2
70530: PUSH
70531: LD_INT 1
70533: DOUBLE
70534: EQUAL
70535: IFTRUE 70539
70537: GO 70550
70539: POP
// bc_type := b_depot ; 2 :
70540: LD_ADDR_OWVAR 42
70544: PUSH
70545: LD_INT 0
70547: ST_TO_ADDR
70548: GO 71170
70550: LD_INT 2
70552: DOUBLE
70553: EQUAL
70554: IFTRUE 70558
70556: GO 70569
70558: POP
// bc_type := b_warehouse ; 3 :
70559: LD_ADDR_OWVAR 42
70563: PUSH
70564: LD_INT 1
70566: ST_TO_ADDR
70567: GO 71170
70569: LD_INT 3
70571: DOUBLE
70572: EQUAL
70573: IFTRUE 70577
70575: GO 70588
70577: POP
// bc_type := b_lab ; 4 .. 9 :
70578: LD_ADDR_OWVAR 42
70582: PUSH
70583: LD_INT 6
70585: ST_TO_ADDR
70586: GO 71170
70588: LD_INT 4
70590: DOUBLE
70591: GREATEREQUAL
70592: IFFALSE 70600
70594: LD_INT 9
70596: DOUBLE
70597: LESSEQUAL
70598: IFTRUE 70602
70600: GO 70662
70602: POP
// begin bc_type := b_lab_half ;
70603: LD_ADDR_OWVAR 42
70607: PUSH
70608: LD_INT 7
70610: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70611: LD_ADDR_OWVAR 44
70615: PUSH
70616: LD_INT 10
70618: PUSH
70619: LD_INT 11
70621: PUSH
70622: LD_INT 12
70624: PUSH
70625: LD_INT 15
70627: PUSH
70628: LD_INT 14
70630: PUSH
70631: LD_INT 13
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: PUSH
70642: LD_VAR 0 2
70646: PUSH
70647: LD_INT 3
70649: MINUS
70650: ARRAY
70651: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
70652: LD_ADDR_OWVAR 45
70656: PUSH
70657: LD_INT 9
70659: ST_TO_ADDR
// end ; 10 .. 13 :
70660: GO 71170
70662: LD_INT 10
70664: DOUBLE
70665: GREATEREQUAL
70666: IFFALSE 70674
70668: LD_INT 13
70670: DOUBLE
70671: LESSEQUAL
70672: IFTRUE 70676
70674: GO 70753
70676: POP
// begin bc_type := b_lab_full ;
70677: LD_ADDR_OWVAR 42
70681: PUSH
70682: LD_INT 8
70684: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70685: LD_ADDR_OWVAR 44
70689: PUSH
70690: LD_INT 10
70692: PUSH
70693: LD_INT 12
70695: PUSH
70696: LD_INT 14
70698: PUSH
70699: LD_INT 13
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: PUSH
70708: LD_VAR 0 2
70712: PUSH
70713: LD_INT 9
70715: MINUS
70716: ARRAY
70717: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70718: LD_ADDR_OWVAR 45
70722: PUSH
70723: LD_INT 11
70725: PUSH
70726: LD_INT 15
70728: PUSH
70729: LD_INT 12
70731: PUSH
70732: LD_INT 15
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: PUSH
70741: LD_VAR 0 2
70745: PUSH
70746: LD_INT 9
70748: MINUS
70749: ARRAY
70750: ST_TO_ADDR
// end ; 14 :
70751: GO 71170
70753: LD_INT 14
70755: DOUBLE
70756: EQUAL
70757: IFTRUE 70761
70759: GO 70772
70761: POP
// bc_type := b_workshop ; 15 :
70762: LD_ADDR_OWVAR 42
70766: PUSH
70767: LD_INT 2
70769: ST_TO_ADDR
70770: GO 71170
70772: LD_INT 15
70774: DOUBLE
70775: EQUAL
70776: IFTRUE 70780
70778: GO 70791
70780: POP
// bc_type := b_factory ; 16 :
70781: LD_ADDR_OWVAR 42
70785: PUSH
70786: LD_INT 3
70788: ST_TO_ADDR
70789: GO 71170
70791: LD_INT 16
70793: DOUBLE
70794: EQUAL
70795: IFTRUE 70799
70797: GO 70810
70799: POP
// bc_type := b_ext_gun ; 17 :
70800: LD_ADDR_OWVAR 42
70804: PUSH
70805: LD_INT 17
70807: ST_TO_ADDR
70808: GO 71170
70810: LD_INT 17
70812: DOUBLE
70813: EQUAL
70814: IFTRUE 70818
70816: GO 70846
70818: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70819: LD_ADDR_OWVAR 42
70823: PUSH
70824: LD_INT 19
70826: PUSH
70827: LD_INT 23
70829: PUSH
70830: LD_INT 19
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: LIST
70837: PUSH
70838: LD_VAR 0 1
70842: ARRAY
70843: ST_TO_ADDR
70844: GO 71170
70846: LD_INT 18
70848: DOUBLE
70849: EQUAL
70850: IFTRUE 70854
70852: GO 70865
70854: POP
// bc_type := b_ext_radar ; 19 :
70855: LD_ADDR_OWVAR 42
70859: PUSH
70860: LD_INT 20
70862: ST_TO_ADDR
70863: GO 71170
70865: LD_INT 19
70867: DOUBLE
70868: EQUAL
70869: IFTRUE 70873
70871: GO 70884
70873: POP
// bc_type := b_ext_radio ; 20 :
70874: LD_ADDR_OWVAR 42
70878: PUSH
70879: LD_INT 22
70881: ST_TO_ADDR
70882: GO 71170
70884: LD_INT 20
70886: DOUBLE
70887: EQUAL
70888: IFTRUE 70892
70890: GO 70903
70892: POP
// bc_type := b_ext_siberium ; 21 :
70893: LD_ADDR_OWVAR 42
70897: PUSH
70898: LD_INT 21
70900: ST_TO_ADDR
70901: GO 71170
70903: LD_INT 21
70905: DOUBLE
70906: EQUAL
70907: IFTRUE 70911
70909: GO 70922
70911: POP
// bc_type := b_ext_computer ; 22 :
70912: LD_ADDR_OWVAR 42
70916: PUSH
70917: LD_INT 24
70919: ST_TO_ADDR
70920: GO 71170
70922: LD_INT 22
70924: DOUBLE
70925: EQUAL
70926: IFTRUE 70930
70928: GO 70941
70930: POP
// bc_type := b_ext_track ; 23 :
70931: LD_ADDR_OWVAR 42
70935: PUSH
70936: LD_INT 16
70938: ST_TO_ADDR
70939: GO 71170
70941: LD_INT 23
70943: DOUBLE
70944: EQUAL
70945: IFTRUE 70949
70947: GO 70960
70949: POP
// bc_type := b_ext_laser ; 24 :
70950: LD_ADDR_OWVAR 42
70954: PUSH
70955: LD_INT 25
70957: ST_TO_ADDR
70958: GO 71170
70960: LD_INT 24
70962: DOUBLE
70963: EQUAL
70964: IFTRUE 70968
70966: GO 70979
70968: POP
// bc_type := b_control_tower ; 25 :
70969: LD_ADDR_OWVAR 42
70973: PUSH
70974: LD_INT 36
70976: ST_TO_ADDR
70977: GO 71170
70979: LD_INT 25
70981: DOUBLE
70982: EQUAL
70983: IFTRUE 70987
70985: GO 70998
70987: POP
// bc_type := b_breastwork ; 26 :
70988: LD_ADDR_OWVAR 42
70992: PUSH
70993: LD_INT 31
70995: ST_TO_ADDR
70996: GO 71170
70998: LD_INT 26
71000: DOUBLE
71001: EQUAL
71002: IFTRUE 71006
71004: GO 71017
71006: POP
// bc_type := b_bunker ; 27 :
71007: LD_ADDR_OWVAR 42
71011: PUSH
71012: LD_INT 32
71014: ST_TO_ADDR
71015: GO 71170
71017: LD_INT 27
71019: DOUBLE
71020: EQUAL
71021: IFTRUE 71025
71023: GO 71036
71025: POP
// bc_type := b_turret ; 28 :
71026: LD_ADDR_OWVAR 42
71030: PUSH
71031: LD_INT 33
71033: ST_TO_ADDR
71034: GO 71170
71036: LD_INT 28
71038: DOUBLE
71039: EQUAL
71040: IFTRUE 71044
71042: GO 71055
71044: POP
// bc_type := b_armoury ; 29 :
71045: LD_ADDR_OWVAR 42
71049: PUSH
71050: LD_INT 4
71052: ST_TO_ADDR
71053: GO 71170
71055: LD_INT 29
71057: DOUBLE
71058: EQUAL
71059: IFTRUE 71063
71061: GO 71074
71063: POP
// bc_type := b_barracks ; 30 :
71064: LD_ADDR_OWVAR 42
71068: PUSH
71069: LD_INT 5
71071: ST_TO_ADDR
71072: GO 71170
71074: LD_INT 30
71076: DOUBLE
71077: EQUAL
71078: IFTRUE 71082
71080: GO 71093
71082: POP
// bc_type := b_solar_power ; 31 :
71083: LD_ADDR_OWVAR 42
71087: PUSH
71088: LD_INT 27
71090: ST_TO_ADDR
71091: GO 71170
71093: LD_INT 31
71095: DOUBLE
71096: EQUAL
71097: IFTRUE 71101
71099: GO 71112
71101: POP
// bc_type := b_oil_power ; 32 :
71102: LD_ADDR_OWVAR 42
71106: PUSH
71107: LD_INT 26
71109: ST_TO_ADDR
71110: GO 71170
71112: LD_INT 32
71114: DOUBLE
71115: EQUAL
71116: IFTRUE 71120
71118: GO 71131
71120: POP
// bc_type := b_siberite_power ; 33 :
71121: LD_ADDR_OWVAR 42
71125: PUSH
71126: LD_INT 28
71128: ST_TO_ADDR
71129: GO 71170
71131: LD_INT 33
71133: DOUBLE
71134: EQUAL
71135: IFTRUE 71139
71137: GO 71150
71139: POP
// bc_type := b_oil_mine ; 34 :
71140: LD_ADDR_OWVAR 42
71144: PUSH
71145: LD_INT 29
71147: ST_TO_ADDR
71148: GO 71170
71150: LD_INT 34
71152: DOUBLE
71153: EQUAL
71154: IFTRUE 71158
71156: GO 71169
71158: POP
// bc_type := b_siberite_mine ; end ;
71159: LD_ADDR_OWVAR 42
71163: PUSH
71164: LD_INT 30
71166: ST_TO_ADDR
71167: GO 71170
71169: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71170: LD_ADDR_VAR 0 8
71174: PUSH
71175: LD_VAR 0 5
71179: PPUSH
71180: LD_VAR 0 6
71184: PPUSH
71185: LD_VAR 0 3
71189: PPUSH
71190: CALL_OW 47
71194: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71195: LD_OWVAR 42
71199: PUSH
71200: LD_INT 32
71202: PUSH
71203: LD_INT 33
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: IN
71210: IFFALSE 71226
// PlaceWeaponTurret ( b , weapon ) ;
71212: LD_VAR 0 8
71216: PPUSH
71217: LD_VAR 0 4
71221: PPUSH
71222: CALL_OW 431
// end ;
71226: LD_VAR 0 7
71230: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71231: LD_INT 0
71233: PPUSH
71234: PPUSH
71235: PPUSH
71236: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71237: LD_ADDR_VAR 0 4
71241: PUSH
71242: LD_INT 22
71244: PUSH
71245: LD_OWVAR 2
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 2
71256: PUSH
71257: LD_INT 30
71259: PUSH
71260: LD_INT 0
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 30
71269: PUSH
71270: LD_INT 1
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: LIST
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PPUSH
71286: CALL_OW 69
71290: ST_TO_ADDR
// if not tmp then
71291: LD_VAR 0 4
71295: NOT
71296: IFFALSE 71300
// exit ;
71298: GO 71359
// for i in tmp do
71300: LD_ADDR_VAR 0 2
71304: PUSH
71305: LD_VAR 0 4
71309: PUSH
71310: FOR_IN
71311: IFFALSE 71357
// for j = 1 to 3 do
71313: LD_ADDR_VAR 0 3
71317: PUSH
71318: DOUBLE
71319: LD_INT 1
71321: DEC
71322: ST_TO_ADDR
71323: LD_INT 3
71325: PUSH
71326: FOR_TO
71327: IFFALSE 71353
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71329: LD_VAR 0 2
71333: PPUSH
71334: CALL_OW 274
71338: PPUSH
71339: LD_VAR 0 3
71343: PPUSH
71344: LD_INT 99999
71346: PPUSH
71347: CALL_OW 277
71351: GO 71326
71353: POP
71354: POP
71355: GO 71310
71357: POP
71358: POP
// end ;
71359: LD_VAR 0 1
71363: RET
// export function hHackSetLevel10 ; var i , j ; begin
71364: LD_INT 0
71366: PPUSH
71367: PPUSH
71368: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71369: LD_ADDR_VAR 0 2
71373: PUSH
71374: LD_INT 21
71376: PUSH
71377: LD_INT 1
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PPUSH
71384: CALL_OW 69
71388: PUSH
71389: FOR_IN
71390: IFFALSE 71442
// if IsSelected ( i ) then
71392: LD_VAR 0 2
71396: PPUSH
71397: CALL_OW 306
71401: IFFALSE 71440
// begin for j := 1 to 4 do
71403: LD_ADDR_VAR 0 3
71407: PUSH
71408: DOUBLE
71409: LD_INT 1
71411: DEC
71412: ST_TO_ADDR
71413: LD_INT 4
71415: PUSH
71416: FOR_TO
71417: IFFALSE 71438
// SetSkill ( i , j , 10 ) ;
71419: LD_VAR 0 2
71423: PPUSH
71424: LD_VAR 0 3
71428: PPUSH
71429: LD_INT 10
71431: PPUSH
71432: CALL_OW 237
71436: GO 71416
71438: POP
71439: POP
// end ;
71440: GO 71389
71442: POP
71443: POP
// end ;
71444: LD_VAR 0 1
71448: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71449: LD_INT 0
71451: PPUSH
71452: PPUSH
71453: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71454: LD_ADDR_VAR 0 2
71458: PUSH
71459: LD_INT 22
71461: PUSH
71462: LD_OWVAR 2
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 21
71473: PUSH
71474: LD_INT 1
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PPUSH
71485: CALL_OW 69
71489: PUSH
71490: FOR_IN
71491: IFFALSE 71532
// begin for j := 1 to 4 do
71493: LD_ADDR_VAR 0 3
71497: PUSH
71498: DOUBLE
71499: LD_INT 1
71501: DEC
71502: ST_TO_ADDR
71503: LD_INT 4
71505: PUSH
71506: FOR_TO
71507: IFFALSE 71528
// SetSkill ( i , j , 10 ) ;
71509: LD_VAR 0 2
71513: PPUSH
71514: LD_VAR 0 3
71518: PPUSH
71519: LD_INT 10
71521: PPUSH
71522: CALL_OW 237
71526: GO 71506
71528: POP
71529: POP
// end ;
71530: GO 71490
71532: POP
71533: POP
// end ;
71534: LD_VAR 0 1
71538: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71539: LD_INT 0
71541: PPUSH
// uc_side := your_side ;
71542: LD_ADDR_OWVAR 20
71546: PUSH
71547: LD_OWVAR 2
71551: ST_TO_ADDR
// uc_nation := nation ;
71552: LD_ADDR_OWVAR 21
71556: PUSH
71557: LD_VAR 0 1
71561: ST_TO_ADDR
// InitHc ;
71562: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71566: LD_INT 0
71568: PPUSH
71569: LD_VAR 0 2
71573: PPUSH
71574: LD_VAR 0 3
71578: PPUSH
71579: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71583: LD_VAR 0 4
71587: PPUSH
71588: LD_VAR 0 5
71592: PPUSH
71593: CALL_OW 428
71597: PUSH
71598: LD_INT 0
71600: EQUAL
71601: IFFALSE 71625
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71603: CALL_OW 44
71607: PPUSH
71608: LD_VAR 0 4
71612: PPUSH
71613: LD_VAR 0 5
71617: PPUSH
71618: LD_INT 1
71620: PPUSH
71621: CALL_OW 48
// end ;
71625: LD_VAR 0 6
71629: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71630: LD_INT 0
71632: PPUSH
71633: PPUSH
// uc_side := your_side ;
71634: LD_ADDR_OWVAR 20
71638: PUSH
71639: LD_OWVAR 2
71643: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71644: LD_VAR 0 1
71648: PUSH
71649: LD_INT 1
71651: PUSH
71652: LD_INT 2
71654: PUSH
71655: LD_INT 3
71657: PUSH
71658: LD_INT 4
71660: PUSH
71661: LD_INT 5
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: IN
71671: IFFALSE 71683
// uc_nation := nation_american else
71673: LD_ADDR_OWVAR 21
71677: PUSH
71678: LD_INT 1
71680: ST_TO_ADDR
71681: GO 71726
// if chassis in [ 11 , 12 , 13 , 14 ] then
71683: LD_VAR 0 1
71687: PUSH
71688: LD_INT 11
71690: PUSH
71691: LD_INT 12
71693: PUSH
71694: LD_INT 13
71696: PUSH
71697: LD_INT 14
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: IN
71706: IFFALSE 71718
// uc_nation := nation_arabian else
71708: LD_ADDR_OWVAR 21
71712: PUSH
71713: LD_INT 2
71715: ST_TO_ADDR
71716: GO 71726
// uc_nation := nation_russian ;
71718: LD_ADDR_OWVAR 21
71722: PUSH
71723: LD_INT 3
71725: ST_TO_ADDR
// vc_chassis := chassis ;
71726: LD_ADDR_OWVAR 37
71730: PUSH
71731: LD_VAR 0 1
71735: ST_TO_ADDR
// vc_engine := engine ;
71736: LD_ADDR_OWVAR 39
71740: PUSH
71741: LD_VAR 0 2
71745: ST_TO_ADDR
// vc_control := control ;
71746: LD_ADDR_OWVAR 38
71750: PUSH
71751: LD_VAR 0 3
71755: ST_TO_ADDR
// vc_weapon := weapon ;
71756: LD_ADDR_OWVAR 40
71760: PUSH
71761: LD_VAR 0 4
71765: ST_TO_ADDR
// un := CreateVehicle ;
71766: LD_ADDR_VAR 0 8
71770: PUSH
71771: CALL_OW 45
71775: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71776: LD_VAR 0 8
71780: PPUSH
71781: LD_INT 0
71783: PPUSH
71784: LD_INT 5
71786: PPUSH
71787: CALL_OW 12
71791: PPUSH
71792: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71796: LD_VAR 0 8
71800: PPUSH
71801: LD_VAR 0 5
71805: PPUSH
71806: LD_VAR 0 6
71810: PPUSH
71811: LD_INT 1
71813: PPUSH
71814: CALL_OW 48
// end ;
71818: LD_VAR 0 7
71822: RET
// export hInvincible ; every 1 do
71823: GO 71825
71825: DISABLE
// hInvincible := [ ] ;
71826: LD_ADDR_EXP 95
71830: PUSH
71831: EMPTY
71832: ST_TO_ADDR
71833: END
// every 10 do var i ;
71834: GO 71836
71836: DISABLE
71837: LD_INT 0
71839: PPUSH
// begin enable ;
71840: ENABLE
// if not hInvincible then
71841: LD_EXP 95
71845: NOT
71846: IFFALSE 71850
// exit ;
71848: GO 71894
// for i in hInvincible do
71850: LD_ADDR_VAR 0 1
71854: PUSH
71855: LD_EXP 95
71859: PUSH
71860: FOR_IN
71861: IFFALSE 71892
// if GetLives ( i ) < 1000 then
71863: LD_VAR 0 1
71867: PPUSH
71868: CALL_OW 256
71872: PUSH
71873: LD_INT 1000
71875: LESS
71876: IFFALSE 71890
// SetLives ( i , 1000 ) ;
71878: LD_VAR 0 1
71882: PPUSH
71883: LD_INT 1000
71885: PPUSH
71886: CALL_OW 234
71890: GO 71860
71892: POP
71893: POP
// end ;
71894: PPOPN 1
71896: END
// export function hHackInvincible ; var i ; begin
71897: LD_INT 0
71899: PPUSH
71900: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71901: LD_ADDR_VAR 0 2
71905: PUSH
71906: LD_INT 2
71908: PUSH
71909: LD_INT 21
71911: PUSH
71912: LD_INT 1
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 21
71921: PUSH
71922: LD_INT 2
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: LIST
71933: PPUSH
71934: CALL_OW 69
71938: PUSH
71939: FOR_IN
71940: IFFALSE 72001
// if IsSelected ( i ) then
71942: LD_VAR 0 2
71946: PPUSH
71947: CALL_OW 306
71951: IFFALSE 71999
// begin if i in hInvincible then
71953: LD_VAR 0 2
71957: PUSH
71958: LD_EXP 95
71962: IN
71963: IFFALSE 71983
// hInvincible := hInvincible diff i else
71965: LD_ADDR_EXP 95
71969: PUSH
71970: LD_EXP 95
71974: PUSH
71975: LD_VAR 0 2
71979: DIFF
71980: ST_TO_ADDR
71981: GO 71999
// hInvincible := hInvincible union i ;
71983: LD_ADDR_EXP 95
71987: PUSH
71988: LD_EXP 95
71992: PUSH
71993: LD_VAR 0 2
71997: UNION
71998: ST_TO_ADDR
// end ;
71999: GO 71939
72001: POP
72002: POP
// end ;
72003: LD_VAR 0 1
72007: RET
// export function hHackInvisible ; var i , j ; begin
72008: LD_INT 0
72010: PPUSH
72011: PPUSH
72012: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72013: LD_ADDR_VAR 0 2
72017: PUSH
72018: LD_INT 21
72020: PUSH
72021: LD_INT 1
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PPUSH
72028: CALL_OW 69
72032: PUSH
72033: FOR_IN
72034: IFFALSE 72058
// if IsSelected ( i ) then
72036: LD_VAR 0 2
72040: PPUSH
72041: CALL_OW 306
72045: IFFALSE 72056
// ComForceInvisible ( i ) ;
72047: LD_VAR 0 2
72051: PPUSH
72052: CALL_OW 496
72056: GO 72033
72058: POP
72059: POP
// end ;
72060: LD_VAR 0 1
72064: RET
// export function hHackChangeYourSide ; begin
72065: LD_INT 0
72067: PPUSH
// if your_side = 8 then
72068: LD_OWVAR 2
72072: PUSH
72073: LD_INT 8
72075: EQUAL
72076: IFFALSE 72088
// your_side := 0 else
72078: LD_ADDR_OWVAR 2
72082: PUSH
72083: LD_INT 0
72085: ST_TO_ADDR
72086: GO 72102
// your_side := your_side + 1 ;
72088: LD_ADDR_OWVAR 2
72092: PUSH
72093: LD_OWVAR 2
72097: PUSH
72098: LD_INT 1
72100: PLUS
72101: ST_TO_ADDR
// end ;
72102: LD_VAR 0 1
72106: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72107: LD_INT 0
72109: PPUSH
72110: PPUSH
72111: PPUSH
// for i in all_units do
72112: LD_ADDR_VAR 0 2
72116: PUSH
72117: LD_OWVAR 3
72121: PUSH
72122: FOR_IN
72123: IFFALSE 72201
// if IsSelected ( i ) then
72125: LD_VAR 0 2
72129: PPUSH
72130: CALL_OW 306
72134: IFFALSE 72199
// begin j := GetSide ( i ) ;
72136: LD_ADDR_VAR 0 3
72140: PUSH
72141: LD_VAR 0 2
72145: PPUSH
72146: CALL_OW 255
72150: ST_TO_ADDR
// if j = 8 then
72151: LD_VAR 0 3
72155: PUSH
72156: LD_INT 8
72158: EQUAL
72159: IFFALSE 72171
// j := 0 else
72161: LD_ADDR_VAR 0 3
72165: PUSH
72166: LD_INT 0
72168: ST_TO_ADDR
72169: GO 72185
// j := j + 1 ;
72171: LD_ADDR_VAR 0 3
72175: PUSH
72176: LD_VAR 0 3
72180: PUSH
72181: LD_INT 1
72183: PLUS
72184: ST_TO_ADDR
// SetSide ( i , j ) ;
72185: LD_VAR 0 2
72189: PPUSH
72190: LD_VAR 0 3
72194: PPUSH
72195: CALL_OW 235
// end ;
72199: GO 72122
72201: POP
72202: POP
// end ;
72203: LD_VAR 0 1
72207: RET
// export function hHackFog ; begin
72208: LD_INT 0
72210: PPUSH
// FogOff ( true ) ;
72211: LD_INT 1
72213: PPUSH
72214: CALL_OW 344
// end ;
72218: LD_VAR 0 1
72222: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72223: LD_INT 0
72225: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72226: LD_VAR 0 1
72230: PPUSH
72231: LD_VAR 0 2
72235: PPUSH
72236: LD_VAR 0 3
72240: PPUSH
72241: LD_INT 1
72243: PPUSH
72244: LD_INT 1
72246: PPUSH
72247: CALL_OW 483
// CenterOnXY ( x , y ) ;
72251: LD_VAR 0 2
72255: PPUSH
72256: LD_VAR 0 3
72260: PPUSH
72261: CALL_OW 84
// end ;
72265: LD_VAR 0 4
72269: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72270: LD_INT 0
72272: PPUSH
72273: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72274: LD_VAR 0 1
72278: NOT
72279: PUSH
72280: LD_VAR 0 2
72284: PPUSH
72285: LD_VAR 0 3
72289: PPUSH
72290: CALL_OW 488
72294: NOT
72295: OR
72296: PUSH
72297: LD_VAR 0 1
72301: PPUSH
72302: CALL_OW 266
72306: PUSH
72307: LD_INT 3
72309: NONEQUAL
72310: PUSH
72311: LD_VAR 0 1
72315: PPUSH
72316: CALL_OW 247
72320: PUSH
72321: LD_INT 1
72323: EQUAL
72324: NOT
72325: AND
72326: OR
72327: IFFALSE 72331
// exit ;
72329: GO 72480
// if GetType ( factory ) = unit_human then
72331: LD_VAR 0 1
72335: PPUSH
72336: CALL_OW 247
72340: PUSH
72341: LD_INT 1
72343: EQUAL
72344: IFFALSE 72361
// factory := IsInUnit ( factory ) ;
72346: LD_ADDR_VAR 0 1
72350: PUSH
72351: LD_VAR 0 1
72355: PPUSH
72356: CALL_OW 310
72360: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72361: LD_VAR 0 1
72365: PPUSH
72366: CALL_OW 266
72370: PUSH
72371: LD_INT 3
72373: NONEQUAL
72374: IFFALSE 72378
// exit ;
72376: GO 72480
// if HexInfo ( x , y ) = factory then
72378: LD_VAR 0 2
72382: PPUSH
72383: LD_VAR 0 3
72387: PPUSH
72388: CALL_OW 428
72392: PUSH
72393: LD_VAR 0 1
72397: EQUAL
72398: IFFALSE 72425
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72400: LD_ADDR_EXP 96
72404: PUSH
72405: LD_EXP 96
72409: PPUSH
72410: LD_VAR 0 1
72414: PPUSH
72415: LD_INT 0
72417: PPUSH
72418: CALL_OW 1
72422: ST_TO_ADDR
72423: GO 72476
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72425: LD_ADDR_EXP 96
72429: PUSH
72430: LD_EXP 96
72434: PPUSH
72435: LD_VAR 0 1
72439: PPUSH
72440: LD_VAR 0 1
72444: PPUSH
72445: CALL_OW 255
72449: PUSH
72450: LD_VAR 0 1
72454: PUSH
72455: LD_VAR 0 2
72459: PUSH
72460: LD_VAR 0 3
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: PPUSH
72471: CALL_OW 1
72475: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72476: CALL 72485 0 0
// end ;
72480: LD_VAR 0 4
72484: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72485: LD_INT 0
72487: PPUSH
72488: PPUSH
72489: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72490: LD_STRING resetFactoryWaypoint();
72492: PPUSH
72493: CALL_OW 559
// if factoryWaypoints then
72497: LD_EXP 96
72501: IFFALSE 72627
// begin list := PrepareArray ( factoryWaypoints ) ;
72503: LD_ADDR_VAR 0 3
72507: PUSH
72508: LD_EXP 96
72512: PPUSH
72513: CALL 56948 0 1
72517: ST_TO_ADDR
// for i := 1 to list do
72518: LD_ADDR_VAR 0 2
72522: PUSH
72523: DOUBLE
72524: LD_INT 1
72526: DEC
72527: ST_TO_ADDR
72528: LD_VAR 0 3
72532: PUSH
72533: FOR_TO
72534: IFFALSE 72625
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72536: LD_STRING setFactoryWaypointXY(
72538: PUSH
72539: LD_VAR 0 3
72543: PUSH
72544: LD_VAR 0 2
72548: ARRAY
72549: PUSH
72550: LD_INT 1
72552: ARRAY
72553: STR
72554: PUSH
72555: LD_STRING ,
72557: STR
72558: PUSH
72559: LD_VAR 0 3
72563: PUSH
72564: LD_VAR 0 2
72568: ARRAY
72569: PUSH
72570: LD_INT 2
72572: ARRAY
72573: STR
72574: PUSH
72575: LD_STRING ,
72577: STR
72578: PUSH
72579: LD_VAR 0 3
72583: PUSH
72584: LD_VAR 0 2
72588: ARRAY
72589: PUSH
72590: LD_INT 3
72592: ARRAY
72593: STR
72594: PUSH
72595: LD_STRING ,
72597: STR
72598: PUSH
72599: LD_VAR 0 3
72603: PUSH
72604: LD_VAR 0 2
72608: ARRAY
72609: PUSH
72610: LD_INT 4
72612: ARRAY
72613: STR
72614: PUSH
72615: LD_STRING )
72617: STR
72618: PPUSH
72619: CALL_OW 559
72623: GO 72533
72625: POP
72626: POP
// end ; end ;
72627: LD_VAR 0 1
72631: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72632: LD_INT 0
72634: PPUSH
// if HexInfo ( x , y ) = warehouse then
72635: LD_VAR 0 2
72639: PPUSH
72640: LD_VAR 0 3
72644: PPUSH
72645: CALL_OW 428
72649: PUSH
72650: LD_VAR 0 1
72654: EQUAL
72655: IFFALSE 72682
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72657: LD_ADDR_EXP 97
72661: PUSH
72662: LD_EXP 97
72666: PPUSH
72667: LD_VAR 0 1
72671: PPUSH
72672: LD_INT 0
72674: PPUSH
72675: CALL_OW 1
72679: ST_TO_ADDR
72680: GO 72733
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72682: LD_ADDR_EXP 97
72686: PUSH
72687: LD_EXP 97
72691: PPUSH
72692: LD_VAR 0 1
72696: PPUSH
72697: LD_VAR 0 1
72701: PPUSH
72702: CALL_OW 255
72706: PUSH
72707: LD_VAR 0 1
72711: PUSH
72712: LD_VAR 0 2
72716: PUSH
72717: LD_VAR 0 3
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: PPUSH
72728: CALL_OW 1
72732: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72733: CALL 72742 0 0
// end ;
72737: LD_VAR 0 4
72741: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72742: LD_INT 0
72744: PPUSH
72745: PPUSH
72746: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72747: LD_STRING resetWarehouseGatheringPoints();
72749: PPUSH
72750: CALL_OW 559
// if warehouseGatheringPoints then
72754: LD_EXP 97
72758: IFFALSE 72884
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72760: LD_ADDR_VAR 0 3
72764: PUSH
72765: LD_EXP 97
72769: PPUSH
72770: CALL 56948 0 1
72774: ST_TO_ADDR
// for i := 1 to list do
72775: LD_ADDR_VAR 0 2
72779: PUSH
72780: DOUBLE
72781: LD_INT 1
72783: DEC
72784: ST_TO_ADDR
72785: LD_VAR 0 3
72789: PUSH
72790: FOR_TO
72791: IFFALSE 72882
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72793: LD_STRING setWarehouseGatheringPointXY(
72795: PUSH
72796: LD_VAR 0 3
72800: PUSH
72801: LD_VAR 0 2
72805: ARRAY
72806: PUSH
72807: LD_INT 1
72809: ARRAY
72810: STR
72811: PUSH
72812: LD_STRING ,
72814: STR
72815: PUSH
72816: LD_VAR 0 3
72820: PUSH
72821: LD_VAR 0 2
72825: ARRAY
72826: PUSH
72827: LD_INT 2
72829: ARRAY
72830: STR
72831: PUSH
72832: LD_STRING ,
72834: STR
72835: PUSH
72836: LD_VAR 0 3
72840: PUSH
72841: LD_VAR 0 2
72845: ARRAY
72846: PUSH
72847: LD_INT 3
72849: ARRAY
72850: STR
72851: PUSH
72852: LD_STRING ,
72854: STR
72855: PUSH
72856: LD_VAR 0 3
72860: PUSH
72861: LD_VAR 0 2
72865: ARRAY
72866: PUSH
72867: LD_INT 4
72869: ARRAY
72870: STR
72871: PUSH
72872: LD_STRING )
72874: STR
72875: PPUSH
72876: CALL_OW 559
72880: GO 72790
72882: POP
72883: POP
// end ; end ;
72884: LD_VAR 0 1
72888: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
72889: LD_EXP 97
72893: IFFALSE 73578
72895: GO 72897
72897: DISABLE
72898: LD_INT 0
72900: PPUSH
72901: PPUSH
72902: PPUSH
72903: PPUSH
72904: PPUSH
72905: PPUSH
72906: PPUSH
72907: PPUSH
72908: PPUSH
// begin enable ;
72909: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
72910: LD_ADDR_VAR 0 3
72914: PUSH
72915: LD_EXP 97
72919: PPUSH
72920: CALL 56948 0 1
72924: ST_TO_ADDR
// if not list then
72925: LD_VAR 0 3
72929: NOT
72930: IFFALSE 72934
// exit ;
72932: GO 73578
// for i := 1 to list do
72934: LD_ADDR_VAR 0 1
72938: PUSH
72939: DOUBLE
72940: LD_INT 1
72942: DEC
72943: ST_TO_ADDR
72944: LD_VAR 0 3
72948: PUSH
72949: FOR_TO
72950: IFFALSE 73576
// begin depot := list [ i ] [ 2 ] ;
72952: LD_ADDR_VAR 0 8
72956: PUSH
72957: LD_VAR 0 3
72961: PUSH
72962: LD_VAR 0 1
72966: ARRAY
72967: PUSH
72968: LD_INT 2
72970: ARRAY
72971: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
72972: LD_ADDR_VAR 0 5
72976: PUSH
72977: LD_VAR 0 3
72981: PUSH
72982: LD_VAR 0 1
72986: ARRAY
72987: PUSH
72988: LD_INT 1
72990: ARRAY
72991: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
72992: LD_VAR 0 8
72996: PPUSH
72997: CALL_OW 301
73001: PUSH
73002: LD_VAR 0 5
73006: PUSH
73007: LD_VAR 0 8
73011: PPUSH
73012: CALL_OW 255
73016: NONEQUAL
73017: OR
73018: IFFALSE 73047
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73020: LD_ADDR_EXP 97
73024: PUSH
73025: LD_EXP 97
73029: PPUSH
73030: LD_VAR 0 8
73034: PPUSH
73035: LD_INT 0
73037: PPUSH
73038: CALL_OW 1
73042: ST_TO_ADDR
// exit ;
73043: POP
73044: POP
73045: GO 73578
// end ; x := list [ i ] [ 3 ] ;
73047: LD_ADDR_VAR 0 6
73051: PUSH
73052: LD_VAR 0 3
73056: PUSH
73057: LD_VAR 0 1
73061: ARRAY
73062: PUSH
73063: LD_INT 3
73065: ARRAY
73066: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73067: LD_ADDR_VAR 0 7
73071: PUSH
73072: LD_VAR 0 3
73076: PUSH
73077: LD_VAR 0 1
73081: ARRAY
73082: PUSH
73083: LD_INT 4
73085: ARRAY
73086: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73087: LD_ADDR_VAR 0 9
73091: PUSH
73092: LD_VAR 0 6
73096: PPUSH
73097: LD_VAR 0 7
73101: PPUSH
73102: LD_INT 16
73104: PPUSH
73105: CALL 55536 0 3
73109: ST_TO_ADDR
// if not cratesNearbyPoint then
73110: LD_VAR 0 9
73114: NOT
73115: IFFALSE 73121
// exit ;
73117: POP
73118: POP
73119: GO 73578
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73121: LD_ADDR_VAR 0 4
73125: PUSH
73126: LD_INT 22
73128: PUSH
73129: LD_VAR 0 5
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PUSH
73138: LD_INT 3
73140: PUSH
73141: LD_INT 60
73143: PUSH
73144: EMPTY
73145: LIST
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: LD_INT 91
73153: PUSH
73154: LD_VAR 0 8
73158: PUSH
73159: LD_INT 6
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: LIST
73166: PUSH
73167: LD_INT 2
73169: PUSH
73170: LD_INT 25
73172: PUSH
73173: LD_INT 2
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: LD_INT 25
73182: PUSH
73183: LD_INT 16
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: LIST
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: PPUSH
73201: CALL_OW 69
73205: PUSH
73206: LD_VAR 0 8
73210: PPUSH
73211: CALL_OW 313
73215: PPUSH
73216: LD_INT 3
73218: PUSH
73219: LD_INT 60
73221: PUSH
73222: EMPTY
73223: LIST
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 2
73231: PUSH
73232: LD_INT 25
73234: PUSH
73235: LD_INT 2
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_INT 25
73244: PUSH
73245: LD_INT 16
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: LIST
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: PPUSH
73261: CALL_OW 72
73265: UNION
73266: ST_TO_ADDR
// if tmp then
73267: LD_VAR 0 4
73271: IFFALSE 73351
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73273: LD_ADDR_VAR 0 4
73277: PUSH
73278: LD_VAR 0 4
73282: PPUSH
73283: LD_INT 3
73285: PPUSH
73286: CALL 53505 0 2
73290: ST_TO_ADDR
// for j in tmp do
73291: LD_ADDR_VAR 0 2
73295: PUSH
73296: LD_VAR 0 4
73300: PUSH
73301: FOR_IN
73302: IFFALSE 73345
// begin if IsInUnit ( j ) then
73304: LD_VAR 0 2
73308: PPUSH
73309: CALL_OW 310
73313: IFFALSE 73324
// ComExit ( j ) ;
73315: LD_VAR 0 2
73319: PPUSH
73320: CALL 53588 0 1
// AddComCollect ( j , x , y ) ;
73324: LD_VAR 0 2
73328: PPUSH
73329: LD_VAR 0 6
73333: PPUSH
73334: LD_VAR 0 7
73338: PPUSH
73339: CALL_OW 177
// end ;
73343: GO 73301
73345: POP
73346: POP
// exit ;
73347: POP
73348: POP
73349: GO 73578
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73351: LD_ADDR_VAR 0 4
73355: PUSH
73356: LD_INT 22
73358: PUSH
73359: LD_VAR 0 5
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PUSH
73368: LD_INT 91
73370: PUSH
73371: LD_VAR 0 8
73375: PUSH
73376: LD_INT 8
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: LIST
73383: PUSH
73384: LD_INT 2
73386: PUSH
73387: LD_INT 34
73389: PUSH
73390: LD_INT 12
73392: PUSH
73393: EMPTY
73394: LIST
73395: LIST
73396: PUSH
73397: LD_INT 34
73399: PUSH
73400: LD_INT 51
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: LD_INT 34
73409: PUSH
73410: LD_INT 32
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: LD_INT 34
73419: PUSH
73420: LD_INT 89
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: LIST
73438: PPUSH
73439: CALL_OW 69
73443: ST_TO_ADDR
// if tmp then
73444: LD_VAR 0 4
73448: IFFALSE 73574
// begin for j in tmp do
73450: LD_ADDR_VAR 0 2
73454: PUSH
73455: LD_VAR 0 4
73459: PUSH
73460: FOR_IN
73461: IFFALSE 73572
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73463: LD_VAR 0 2
73467: PPUSH
73468: CALL_OW 262
73472: PUSH
73473: LD_INT 3
73475: EQUAL
73476: PUSH
73477: LD_VAR 0 2
73481: PPUSH
73482: CALL_OW 261
73486: PUSH
73487: LD_INT 20
73489: GREATER
73490: OR
73491: PUSH
73492: LD_VAR 0 2
73496: PPUSH
73497: CALL_OW 314
73501: NOT
73502: AND
73503: PUSH
73504: LD_VAR 0 2
73508: PPUSH
73509: CALL_OW 263
73513: PUSH
73514: LD_INT 1
73516: NONEQUAL
73517: PUSH
73518: LD_VAR 0 2
73522: PPUSH
73523: CALL_OW 311
73527: OR
73528: AND
73529: IFFALSE 73570
// begin ComCollect ( j , x , y ) ;
73531: LD_VAR 0 2
73535: PPUSH
73536: LD_VAR 0 6
73540: PPUSH
73541: LD_VAR 0 7
73545: PPUSH
73546: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73550: LD_VAR 0 2
73554: PPUSH
73555: LD_VAR 0 8
73559: PPUSH
73560: CALL_OW 172
// exit ;
73564: POP
73565: POP
73566: POP
73567: POP
73568: GO 73578
// end ;
73570: GO 73460
73572: POP
73573: POP
// end ; end ;
73574: GO 72949
73576: POP
73577: POP
// end ; end_of_file
73578: PPOPN 9
73580: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73581: LD_VAR 0 1
73585: PUSH
73586: LD_INT 200
73588: DOUBLE
73589: GREATEREQUAL
73590: IFFALSE 73598
73592: LD_INT 299
73594: DOUBLE
73595: LESSEQUAL
73596: IFTRUE 73600
73598: GO 73632
73600: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73601: LD_VAR 0 1
73605: PPUSH
73606: LD_VAR 0 2
73610: PPUSH
73611: LD_VAR 0 3
73615: PPUSH
73616: LD_VAR 0 4
73620: PPUSH
73621: LD_VAR 0 5
73625: PPUSH
73626: CALL 74120 0 5
73630: GO 73709
73632: LD_INT 300
73634: DOUBLE
73635: GREATEREQUAL
73636: IFFALSE 73644
73638: LD_INT 399
73640: DOUBLE
73641: LESSEQUAL
73642: IFTRUE 73646
73644: GO 73708
73646: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73647: LD_VAR 0 1
73651: PPUSH
73652: LD_VAR 0 2
73656: PPUSH
73657: LD_VAR 0 3
73661: PPUSH
73662: LD_VAR 0 4
73666: PPUSH
73667: LD_VAR 0 5
73671: PPUSH
73672: LD_VAR 0 6
73676: PPUSH
73677: LD_VAR 0 7
73681: PPUSH
73682: LD_VAR 0 8
73686: PPUSH
73687: LD_VAR 0 9
73691: PPUSH
73692: LD_VAR 0 10
73696: PPUSH
73697: LD_VAR 0 11
73701: PPUSH
73702: CALL 70282 0 11
73706: GO 73709
73708: POP
// end ;
73709: PPOPN 11
73711: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73712: LD_VAR 0 1
73716: PPUSH
73717: LD_VAR 0 2
73721: PPUSH
73722: LD_VAR 0 3
73726: PPUSH
73727: LD_VAR 0 4
73731: PPUSH
73732: LD_VAR 0 5
73736: PPUSH
73737: CALL 73856 0 5
// end ; end_of_file
73741: PPOPN 5
73743: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
73744: LD_INT 0
73746: PPUSH
73747: PPUSH
73748: PPUSH
73749: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
73750: LD_VAR 0 1
73754: PPUSH
73755: CALL_OW 264
73759: PUSH
73760: LD_INT 91
73762: EQUAL
73763: IFFALSE 73835
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
73765: LD_INT 68
73767: PPUSH
73768: LD_VAR 0 1
73772: PPUSH
73773: CALL_OW 255
73777: PPUSH
73778: CALL_OW 321
73782: PUSH
73783: LD_INT 2
73785: EQUAL
73786: IFFALSE 73798
// eff := 70 else
73788: LD_ADDR_VAR 0 4
73792: PUSH
73793: LD_INT 70
73795: ST_TO_ADDR
73796: GO 73806
// eff := 30 ;
73798: LD_ADDR_VAR 0 4
73802: PUSH
73803: LD_INT 30
73805: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
73806: LD_VAR 0 1
73810: PPUSH
73811: CALL_OW 250
73815: PPUSH
73816: LD_VAR 0 1
73820: PPUSH
73821: CALL_OW 251
73825: PPUSH
73826: LD_VAR 0 4
73830: PPUSH
73831: CALL_OW 495
// end ; end ;
73835: LD_VAR 0 2
73839: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
73840: LD_INT 0
73842: PPUSH
// end ;
73843: LD_VAR 0 4
73847: RET
// export function SOS_Command ( cmd ) ; begin
73848: LD_INT 0
73850: PPUSH
// end ;
73851: LD_VAR 0 2
73855: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73856: LD_INT 0
73858: PPUSH
// end ;
73859: LD_VAR 0 6
73863: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
73864: LD_INT 0
73866: PPUSH
73867: PPUSH
// if not vehicle or not factory then
73868: LD_VAR 0 1
73872: NOT
73873: PUSH
73874: LD_VAR 0 2
73878: NOT
73879: OR
73880: IFFALSE 73884
// exit ;
73882: GO 74115
// if factoryWaypoints >= factory then
73884: LD_EXP 96
73888: PUSH
73889: LD_VAR 0 2
73893: GREATEREQUAL
73894: IFFALSE 74115
// if factoryWaypoints [ factory ] then
73896: LD_EXP 96
73900: PUSH
73901: LD_VAR 0 2
73905: ARRAY
73906: IFFALSE 74115
// begin if GetControl ( vehicle ) = control_manual then
73908: LD_VAR 0 1
73912: PPUSH
73913: CALL_OW 263
73917: PUSH
73918: LD_INT 1
73920: EQUAL
73921: IFFALSE 74002
// begin driver := IsDrivenBy ( vehicle ) ;
73923: LD_ADDR_VAR 0 4
73927: PUSH
73928: LD_VAR 0 1
73932: PPUSH
73933: CALL_OW 311
73937: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73938: LD_VAR 0 4
73942: PPUSH
73943: LD_EXP 96
73947: PUSH
73948: LD_VAR 0 2
73952: ARRAY
73953: PUSH
73954: LD_INT 3
73956: ARRAY
73957: PPUSH
73958: LD_EXP 96
73962: PUSH
73963: LD_VAR 0 2
73967: ARRAY
73968: PUSH
73969: LD_INT 4
73971: ARRAY
73972: PPUSH
73973: CALL_OW 171
// AddComExitVehicle ( driver ) ;
73977: LD_VAR 0 4
73981: PPUSH
73982: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
73986: LD_VAR 0 4
73990: PPUSH
73991: LD_VAR 0 2
73995: PPUSH
73996: CALL_OW 180
// end else
74000: GO 74115
// if GetControl ( vehicle ) = control_remote then
74002: LD_VAR 0 1
74006: PPUSH
74007: CALL_OW 263
74011: PUSH
74012: LD_INT 2
74014: EQUAL
74015: IFFALSE 74076
// begin wait ( 0 0$2 ) ;
74017: LD_INT 70
74019: PPUSH
74020: CALL_OW 67
// if Connect ( vehicle ) then
74024: LD_VAR 0 1
74028: PPUSH
74029: CALL 23796 0 1
74033: IFFALSE 74074
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74035: LD_VAR 0 1
74039: PPUSH
74040: LD_EXP 96
74044: PUSH
74045: LD_VAR 0 2
74049: ARRAY
74050: PUSH
74051: LD_INT 3
74053: ARRAY
74054: PPUSH
74055: LD_EXP 96
74059: PUSH
74060: LD_VAR 0 2
74064: ARRAY
74065: PUSH
74066: LD_INT 4
74068: ARRAY
74069: PPUSH
74070: CALL_OW 171
// end else
74074: GO 74115
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74076: LD_VAR 0 1
74080: PPUSH
74081: LD_EXP 96
74085: PUSH
74086: LD_VAR 0 2
74090: ARRAY
74091: PUSH
74092: LD_INT 3
74094: ARRAY
74095: PPUSH
74096: LD_EXP 96
74100: PUSH
74101: LD_VAR 0 2
74105: ARRAY
74106: PUSH
74107: LD_INT 4
74109: ARRAY
74110: PPUSH
74111: CALL_OW 171
// end ; end ;
74115: LD_VAR 0 3
74119: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
74120: LD_INT 0
74122: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
74123: LD_VAR 0 1
74127: PUSH
74128: LD_INT 250
74130: EQUAL
74131: PUSH
74132: LD_VAR 0 2
74136: PPUSH
74137: CALL_OW 264
74141: PUSH
74142: LD_INT 81
74144: EQUAL
74145: AND
74146: IFFALSE 74167
// MinerPlaceMine ( unit , x , y ) ;
74148: LD_VAR 0 2
74152: PPUSH
74153: LD_VAR 0 4
74157: PPUSH
74158: LD_VAR 0 5
74162: PPUSH
74163: CALL 77157 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74167: LD_VAR 0 1
74171: PUSH
74172: LD_INT 251
74174: EQUAL
74175: PUSH
74176: LD_VAR 0 2
74180: PPUSH
74181: CALL_OW 264
74185: PUSH
74186: LD_INT 81
74188: EQUAL
74189: AND
74190: IFFALSE 74211
// MinerDetonateMine ( unit , x , y ) ;
74192: LD_VAR 0 2
74196: PPUSH
74197: LD_VAR 0 4
74201: PPUSH
74202: LD_VAR 0 5
74206: PPUSH
74207: CALL 77432 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74211: LD_VAR 0 1
74215: PUSH
74216: LD_INT 252
74218: EQUAL
74219: PUSH
74220: LD_VAR 0 2
74224: PPUSH
74225: CALL_OW 264
74229: PUSH
74230: LD_INT 81
74232: EQUAL
74233: AND
74234: IFFALSE 74255
// MinerCreateMinefield ( unit , x , y ) ;
74236: LD_VAR 0 2
74240: PPUSH
74241: LD_VAR 0 4
74245: PPUSH
74246: LD_VAR 0 5
74250: PPUSH
74251: CALL 77849 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74255: LD_VAR 0 1
74259: PUSH
74260: LD_INT 253
74262: EQUAL
74263: PUSH
74264: LD_VAR 0 2
74268: PPUSH
74269: CALL_OW 257
74273: PUSH
74274: LD_INT 5
74276: EQUAL
74277: AND
74278: IFFALSE 74299
// ComBinocular ( unit , x , y ) ;
74280: LD_VAR 0 2
74284: PPUSH
74285: LD_VAR 0 4
74289: PPUSH
74290: LD_VAR 0 5
74294: PPUSH
74295: CALL 78218 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74299: LD_VAR 0 1
74303: PUSH
74304: LD_INT 254
74306: EQUAL
74307: PUSH
74308: LD_VAR 0 2
74312: PPUSH
74313: CALL_OW 264
74317: PUSH
74318: LD_INT 99
74320: EQUAL
74321: AND
74322: PUSH
74323: LD_VAR 0 3
74327: PPUSH
74328: CALL_OW 263
74332: PUSH
74333: LD_INT 3
74335: EQUAL
74336: AND
74337: IFFALSE 74353
// HackDestroyVehicle ( unit , selectedUnit ) ;
74339: LD_VAR 0 2
74343: PPUSH
74344: LD_VAR 0 3
74348: PPUSH
74349: CALL 76521 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74353: LD_VAR 0 1
74357: PUSH
74358: LD_INT 255
74360: EQUAL
74361: PUSH
74362: LD_VAR 0 2
74366: PPUSH
74367: CALL_OW 264
74371: PUSH
74372: LD_INT 14
74374: PUSH
74375: LD_INT 53
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: IN
74382: AND
74383: PUSH
74384: LD_VAR 0 4
74388: PPUSH
74389: LD_VAR 0 5
74393: PPUSH
74394: CALL_OW 488
74398: AND
74399: IFFALSE 74423
// CutTreeXYR ( unit , x , y , 12 ) ;
74401: LD_VAR 0 2
74405: PPUSH
74406: LD_VAR 0 4
74410: PPUSH
74411: LD_VAR 0 5
74415: PPUSH
74416: LD_INT 12
74418: PPUSH
74419: CALL 74518 0 4
// if cmd = 256 then
74423: LD_VAR 0 1
74427: PUSH
74428: LD_INT 256
74430: EQUAL
74431: IFFALSE 74452
// SetFactoryWaypoint ( unit , x , y ) ;
74433: LD_VAR 0 2
74437: PPUSH
74438: LD_VAR 0 4
74442: PPUSH
74443: LD_VAR 0 5
74447: PPUSH
74448: CALL 72270 0 3
// if cmd = 257 then
74452: LD_VAR 0 1
74456: PUSH
74457: LD_INT 257
74459: EQUAL
74460: IFFALSE 74481
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74462: LD_VAR 0 2
74466: PPUSH
74467: LD_VAR 0 4
74471: PPUSH
74472: LD_VAR 0 5
74476: PPUSH
74477: CALL 72632 0 3
// if cmd = 258 then
74481: LD_VAR 0 1
74485: PUSH
74486: LD_INT 258
74488: EQUAL
74489: IFFALSE 74513
// BurnTreeXYR ( unit , x , y , 8 ) ;
74491: LD_VAR 0 2
74495: PPUSH
74496: LD_VAR 0 4
74500: PPUSH
74501: LD_VAR 0 5
74505: PPUSH
74506: LD_INT 8
74508: PPUSH
74509: CALL 74912 0 4
// end ;
74513: LD_VAR 0 6
74517: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74518: LD_INT 0
74520: PPUSH
74521: PPUSH
74522: PPUSH
74523: PPUSH
74524: PPUSH
74525: PPUSH
74526: PPUSH
74527: PPUSH
74528: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
74529: LD_VAR 0 1
74533: PPUSH
74534: CALL_OW 302
74538: NOT
74539: PUSH
74540: LD_VAR 0 2
74544: PPUSH
74545: LD_VAR 0 3
74549: PPUSH
74550: CALL_OW 488
74554: NOT
74555: OR
74556: PUSH
74557: LD_VAR 0 4
74561: NOT
74562: OR
74563: IFFALSE 74567
// exit ;
74565: GO 74907
// list := [ ] ;
74567: LD_ADDR_VAR 0 13
74571: PUSH
74572: EMPTY
74573: ST_TO_ADDR
// if x - r < 0 then
74574: LD_VAR 0 2
74578: PUSH
74579: LD_VAR 0 4
74583: MINUS
74584: PUSH
74585: LD_INT 0
74587: LESS
74588: IFFALSE 74600
// min_x := 0 else
74590: LD_ADDR_VAR 0 7
74594: PUSH
74595: LD_INT 0
74597: ST_TO_ADDR
74598: GO 74616
// min_x := x - r ;
74600: LD_ADDR_VAR 0 7
74604: PUSH
74605: LD_VAR 0 2
74609: PUSH
74610: LD_VAR 0 4
74614: MINUS
74615: ST_TO_ADDR
// if y - r < 0 then
74616: LD_VAR 0 3
74620: PUSH
74621: LD_VAR 0 4
74625: MINUS
74626: PUSH
74627: LD_INT 0
74629: LESS
74630: IFFALSE 74642
// min_y := 0 else
74632: LD_ADDR_VAR 0 8
74636: PUSH
74637: LD_INT 0
74639: ST_TO_ADDR
74640: GO 74658
// min_y := y - r ;
74642: LD_ADDR_VAR 0 8
74646: PUSH
74647: LD_VAR 0 3
74651: PUSH
74652: LD_VAR 0 4
74656: MINUS
74657: ST_TO_ADDR
// max_x := x + r ;
74658: LD_ADDR_VAR 0 9
74662: PUSH
74663: LD_VAR 0 2
74667: PUSH
74668: LD_VAR 0 4
74672: PLUS
74673: ST_TO_ADDR
// max_y := y + r ;
74674: LD_ADDR_VAR 0 10
74678: PUSH
74679: LD_VAR 0 3
74683: PUSH
74684: LD_VAR 0 4
74688: PLUS
74689: ST_TO_ADDR
// for _x = min_x to max_x do
74690: LD_ADDR_VAR 0 11
74694: PUSH
74695: DOUBLE
74696: LD_VAR 0 7
74700: DEC
74701: ST_TO_ADDR
74702: LD_VAR 0 9
74706: PUSH
74707: FOR_TO
74708: IFFALSE 74825
// for _y = min_y to max_y do
74710: LD_ADDR_VAR 0 12
74714: PUSH
74715: DOUBLE
74716: LD_VAR 0 8
74720: DEC
74721: ST_TO_ADDR
74722: LD_VAR 0 10
74726: PUSH
74727: FOR_TO
74728: IFFALSE 74821
// begin if not ValidHex ( _x , _y ) then
74730: LD_VAR 0 11
74734: PPUSH
74735: LD_VAR 0 12
74739: PPUSH
74740: CALL_OW 488
74744: NOT
74745: IFFALSE 74749
// continue ;
74747: GO 74727
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74749: LD_VAR 0 11
74753: PPUSH
74754: LD_VAR 0 12
74758: PPUSH
74759: CALL_OW 351
74763: PUSH
74764: LD_VAR 0 11
74768: PPUSH
74769: LD_VAR 0 12
74773: PPUSH
74774: CALL_OW 554
74778: AND
74779: IFFALSE 74819
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74781: LD_ADDR_VAR 0 13
74785: PUSH
74786: LD_VAR 0 13
74790: PPUSH
74791: LD_VAR 0 13
74795: PUSH
74796: LD_INT 1
74798: PLUS
74799: PPUSH
74800: LD_VAR 0 11
74804: PUSH
74805: LD_VAR 0 12
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: PPUSH
74814: CALL_OW 2
74818: ST_TO_ADDR
// end ;
74819: GO 74727
74821: POP
74822: POP
74823: GO 74707
74825: POP
74826: POP
// if not list then
74827: LD_VAR 0 13
74831: NOT
74832: IFFALSE 74836
// exit ;
74834: GO 74907
// for i in list do
74836: LD_ADDR_VAR 0 6
74840: PUSH
74841: LD_VAR 0 13
74845: PUSH
74846: FOR_IN
74847: IFFALSE 74905
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
74849: LD_VAR 0 1
74853: PPUSH
74854: LD_STRING M
74856: PUSH
74857: LD_VAR 0 6
74861: PUSH
74862: LD_INT 1
74864: ARRAY
74865: PUSH
74866: LD_VAR 0 6
74870: PUSH
74871: LD_INT 2
74873: ARRAY
74874: PUSH
74875: LD_INT 0
74877: PUSH
74878: LD_INT 0
74880: PUSH
74881: LD_INT 0
74883: PUSH
74884: LD_INT 0
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: LIST
74891: LIST
74892: LIST
74893: LIST
74894: LIST
74895: PUSH
74896: EMPTY
74897: LIST
74898: PPUSH
74899: CALL_OW 447
74903: GO 74846
74905: POP
74906: POP
// end ;
74907: LD_VAR 0 5
74911: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
74912: LD_INT 0
74914: PPUSH
74915: PPUSH
74916: PPUSH
74917: PPUSH
74918: PPUSH
74919: PPUSH
74920: PPUSH
74921: PPUSH
74922: PPUSH
74923: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
74924: LD_VAR 0 1
74928: PPUSH
74929: CALL_OW 302
74933: NOT
74934: PUSH
74935: LD_VAR 0 2
74939: PPUSH
74940: LD_VAR 0 3
74944: PPUSH
74945: CALL_OW 488
74949: NOT
74950: OR
74951: PUSH
74952: LD_VAR 0 4
74956: NOT
74957: OR
74958: IFFALSE 74962
// exit ;
74960: GO 75475
// list := [ ] ;
74962: LD_ADDR_VAR 0 13
74966: PUSH
74967: EMPTY
74968: ST_TO_ADDR
// if x - r < 0 then
74969: LD_VAR 0 2
74973: PUSH
74974: LD_VAR 0 4
74978: MINUS
74979: PUSH
74980: LD_INT 0
74982: LESS
74983: IFFALSE 74995
// min_x := 0 else
74985: LD_ADDR_VAR 0 7
74989: PUSH
74990: LD_INT 0
74992: ST_TO_ADDR
74993: GO 75011
// min_x := x - r ;
74995: LD_ADDR_VAR 0 7
74999: PUSH
75000: LD_VAR 0 2
75004: PUSH
75005: LD_VAR 0 4
75009: MINUS
75010: ST_TO_ADDR
// if y - r < 0 then
75011: LD_VAR 0 3
75015: PUSH
75016: LD_VAR 0 4
75020: MINUS
75021: PUSH
75022: LD_INT 0
75024: LESS
75025: IFFALSE 75037
// min_y := 0 else
75027: LD_ADDR_VAR 0 8
75031: PUSH
75032: LD_INT 0
75034: ST_TO_ADDR
75035: GO 75053
// min_y := y - r ;
75037: LD_ADDR_VAR 0 8
75041: PUSH
75042: LD_VAR 0 3
75046: PUSH
75047: LD_VAR 0 4
75051: MINUS
75052: ST_TO_ADDR
// max_x := x + r ;
75053: LD_ADDR_VAR 0 9
75057: PUSH
75058: LD_VAR 0 2
75062: PUSH
75063: LD_VAR 0 4
75067: PLUS
75068: ST_TO_ADDR
// max_y := y + r ;
75069: LD_ADDR_VAR 0 10
75073: PUSH
75074: LD_VAR 0 3
75078: PUSH
75079: LD_VAR 0 4
75083: PLUS
75084: ST_TO_ADDR
// for _x = min_x to max_x do
75085: LD_ADDR_VAR 0 11
75089: PUSH
75090: DOUBLE
75091: LD_VAR 0 7
75095: DEC
75096: ST_TO_ADDR
75097: LD_VAR 0 9
75101: PUSH
75102: FOR_TO
75103: IFFALSE 75220
// for _y = min_y to max_y do
75105: LD_ADDR_VAR 0 12
75109: PUSH
75110: DOUBLE
75111: LD_VAR 0 8
75115: DEC
75116: ST_TO_ADDR
75117: LD_VAR 0 10
75121: PUSH
75122: FOR_TO
75123: IFFALSE 75216
// begin if not ValidHex ( _x , _y ) then
75125: LD_VAR 0 11
75129: PPUSH
75130: LD_VAR 0 12
75134: PPUSH
75135: CALL_OW 488
75139: NOT
75140: IFFALSE 75144
// continue ;
75142: GO 75122
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75144: LD_VAR 0 11
75148: PPUSH
75149: LD_VAR 0 12
75153: PPUSH
75154: CALL_OW 351
75158: PUSH
75159: LD_VAR 0 11
75163: PPUSH
75164: LD_VAR 0 12
75168: PPUSH
75169: CALL_OW 554
75173: AND
75174: IFFALSE 75214
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75176: LD_ADDR_VAR 0 13
75180: PUSH
75181: LD_VAR 0 13
75185: PPUSH
75186: LD_VAR 0 13
75190: PUSH
75191: LD_INT 1
75193: PLUS
75194: PPUSH
75195: LD_VAR 0 11
75199: PUSH
75200: LD_VAR 0 12
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: PPUSH
75209: CALL_OW 2
75213: ST_TO_ADDR
// end ;
75214: GO 75122
75216: POP
75217: POP
75218: GO 75102
75220: POP
75221: POP
// if not list then
75222: LD_VAR 0 13
75226: NOT
75227: IFFALSE 75231
// exit ;
75229: GO 75475
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
75231: LD_ADDR_VAR 0 13
75235: PUSH
75236: LD_VAR 0 1
75240: PPUSH
75241: LD_VAR 0 13
75245: PPUSH
75246: LD_INT 1
75248: PPUSH
75249: LD_INT 1
75251: PPUSH
75252: CALL 20938 0 4
75256: ST_TO_ADDR
// ComStop ( flame ) ;
75257: LD_VAR 0 1
75261: PPUSH
75262: CALL_OW 141
// for i in list do
75266: LD_ADDR_VAR 0 6
75270: PUSH
75271: LD_VAR 0 13
75275: PUSH
75276: FOR_IN
75277: IFFALSE 75308
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
75279: LD_VAR 0 1
75283: PPUSH
75284: LD_VAR 0 6
75288: PUSH
75289: LD_INT 1
75291: ARRAY
75292: PPUSH
75293: LD_VAR 0 6
75297: PUSH
75298: LD_INT 2
75300: ARRAY
75301: PPUSH
75302: CALL_OW 176
75306: GO 75276
75308: POP
75309: POP
// repeat wait ( 0 0$1 ) ;
75310: LD_INT 35
75312: PPUSH
75313: CALL_OW 67
// task := GetTaskList ( flame ) ;
75317: LD_ADDR_VAR 0 14
75321: PUSH
75322: LD_VAR 0 1
75326: PPUSH
75327: CALL_OW 437
75331: ST_TO_ADDR
// if not task then
75332: LD_VAR 0 14
75336: NOT
75337: IFFALSE 75341
// exit ;
75339: GO 75475
// if task [ 1 ] [ 1 ] <> | then
75341: LD_VAR 0 14
75345: PUSH
75346: LD_INT 1
75348: ARRAY
75349: PUSH
75350: LD_INT 1
75352: ARRAY
75353: PUSH
75354: LD_STRING |
75356: NONEQUAL
75357: IFFALSE 75361
// exit ;
75359: GO 75475
// _x := task [ 1 ] [ 2 ] ;
75361: LD_ADDR_VAR 0 11
75365: PUSH
75366: LD_VAR 0 14
75370: PUSH
75371: LD_INT 1
75373: ARRAY
75374: PUSH
75375: LD_INT 2
75377: ARRAY
75378: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
75379: LD_ADDR_VAR 0 12
75383: PUSH
75384: LD_VAR 0 14
75388: PUSH
75389: LD_INT 1
75391: ARRAY
75392: PUSH
75393: LD_INT 3
75395: ARRAY
75396: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
75397: LD_VAR 0 11
75401: PPUSH
75402: LD_VAR 0 12
75406: PPUSH
75407: CALL_OW 351
75411: NOT
75412: PUSH
75413: LD_VAR 0 11
75417: PPUSH
75418: LD_VAR 0 12
75422: PPUSH
75423: CALL_OW 554
75427: NOT
75428: OR
75429: IFFALSE 75463
// begin task := Delete ( task , 1 ) ;
75431: LD_ADDR_VAR 0 14
75435: PUSH
75436: LD_VAR 0 14
75440: PPUSH
75441: LD_INT 1
75443: PPUSH
75444: CALL_OW 3
75448: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
75449: LD_VAR 0 1
75453: PPUSH
75454: LD_VAR 0 14
75458: PPUSH
75459: CALL_OW 446
// end ; until not HasTask ( flame ) ;
75463: LD_VAR 0 1
75467: PPUSH
75468: CALL_OW 314
75472: NOT
75473: IFFALSE 75310
// end ;
75475: LD_VAR 0 5
75479: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75480: LD_EXP 99
75484: NOT
75485: IFFALSE 75535
75487: GO 75489
75489: DISABLE
// begin initHack := true ;
75490: LD_ADDR_EXP 99
75494: PUSH
75495: LD_INT 1
75497: ST_TO_ADDR
// hackTanks := [ ] ;
75498: LD_ADDR_EXP 100
75502: PUSH
75503: EMPTY
75504: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75505: LD_ADDR_EXP 101
75509: PUSH
75510: EMPTY
75511: ST_TO_ADDR
// hackLimit := 3 ;
75512: LD_ADDR_EXP 102
75516: PUSH
75517: LD_INT 3
75519: ST_TO_ADDR
// hackDist := 12 ;
75520: LD_ADDR_EXP 103
75524: PUSH
75525: LD_INT 12
75527: ST_TO_ADDR
// hackCounter := [ ] ;
75528: LD_ADDR_EXP 104
75532: PUSH
75533: EMPTY
75534: ST_TO_ADDR
// end ;
75535: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75536: LD_EXP 99
75540: PUSH
75541: LD_INT 34
75543: PUSH
75544: LD_INT 99
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: PPUSH
75551: CALL_OW 69
75555: AND
75556: IFFALSE 75809
75558: GO 75560
75560: DISABLE
75561: LD_INT 0
75563: PPUSH
75564: PPUSH
// begin enable ;
75565: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75566: LD_ADDR_VAR 0 1
75570: PUSH
75571: LD_INT 34
75573: PUSH
75574: LD_INT 99
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: PPUSH
75581: CALL_OW 69
75585: PUSH
75586: FOR_IN
75587: IFFALSE 75807
// begin if not i in hackTanks then
75589: LD_VAR 0 1
75593: PUSH
75594: LD_EXP 100
75598: IN
75599: NOT
75600: IFFALSE 75683
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75602: LD_ADDR_EXP 100
75606: PUSH
75607: LD_EXP 100
75611: PPUSH
75612: LD_EXP 100
75616: PUSH
75617: LD_INT 1
75619: PLUS
75620: PPUSH
75621: LD_VAR 0 1
75625: PPUSH
75626: CALL_OW 1
75630: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75631: LD_ADDR_EXP 101
75635: PUSH
75636: LD_EXP 101
75640: PPUSH
75641: LD_EXP 101
75645: PUSH
75646: LD_INT 1
75648: PLUS
75649: PPUSH
75650: EMPTY
75651: PPUSH
75652: CALL_OW 1
75656: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75657: LD_ADDR_EXP 104
75661: PUSH
75662: LD_EXP 104
75666: PPUSH
75667: LD_EXP 104
75671: PUSH
75672: LD_INT 1
75674: PLUS
75675: PPUSH
75676: EMPTY
75677: PPUSH
75678: CALL_OW 1
75682: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75683: LD_VAR 0 1
75687: PPUSH
75688: CALL_OW 302
75692: NOT
75693: IFFALSE 75706
// begin HackUnlinkAll ( i ) ;
75695: LD_VAR 0 1
75699: PPUSH
75700: CALL 75812 0 1
// continue ;
75704: GO 75586
// end ; HackCheckCapturedStatus ( i ) ;
75706: LD_VAR 0 1
75710: PPUSH
75711: CALL 76255 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75715: LD_ADDR_VAR 0 2
75719: PUSH
75720: LD_INT 81
75722: PUSH
75723: LD_VAR 0 1
75727: PPUSH
75728: CALL_OW 255
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: PUSH
75737: LD_INT 33
75739: PUSH
75740: LD_INT 3
75742: PUSH
75743: EMPTY
75744: LIST
75745: LIST
75746: PUSH
75747: LD_INT 91
75749: PUSH
75750: LD_VAR 0 1
75754: PUSH
75755: LD_EXP 103
75759: PUSH
75760: EMPTY
75761: LIST
75762: LIST
75763: LIST
75764: PUSH
75765: LD_INT 50
75767: PUSH
75768: EMPTY
75769: LIST
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: LIST
75775: LIST
75776: PPUSH
75777: CALL_OW 69
75781: ST_TO_ADDR
// if not tmp then
75782: LD_VAR 0 2
75786: NOT
75787: IFFALSE 75791
// continue ;
75789: GO 75586
// HackLink ( i , tmp ) ;
75791: LD_VAR 0 1
75795: PPUSH
75796: LD_VAR 0 2
75800: PPUSH
75801: CALL 75948 0 2
// end ;
75805: GO 75586
75807: POP
75808: POP
// end ;
75809: PPOPN 2
75811: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75812: LD_INT 0
75814: PPUSH
75815: PPUSH
75816: PPUSH
// if not hack in hackTanks then
75817: LD_VAR 0 1
75821: PUSH
75822: LD_EXP 100
75826: IN
75827: NOT
75828: IFFALSE 75832
// exit ;
75830: GO 75943
// index := GetElementIndex ( hackTanks , hack ) ;
75832: LD_ADDR_VAR 0 4
75836: PUSH
75837: LD_EXP 100
75841: PPUSH
75842: LD_VAR 0 1
75846: PPUSH
75847: CALL 20235 0 2
75851: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75852: LD_EXP 101
75856: PUSH
75857: LD_VAR 0 4
75861: ARRAY
75862: IFFALSE 75943
// begin for i in hackTanksCaptured [ index ] do
75864: LD_ADDR_VAR 0 3
75868: PUSH
75869: LD_EXP 101
75873: PUSH
75874: LD_VAR 0 4
75878: ARRAY
75879: PUSH
75880: FOR_IN
75881: IFFALSE 75907
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75883: LD_VAR 0 3
75887: PUSH
75888: LD_INT 1
75890: ARRAY
75891: PPUSH
75892: LD_VAR 0 3
75896: PUSH
75897: LD_INT 2
75899: ARRAY
75900: PPUSH
75901: CALL_OW 235
75905: GO 75880
75907: POP
75908: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75909: LD_ADDR_EXP 101
75913: PUSH
75914: LD_EXP 101
75918: PPUSH
75919: LD_VAR 0 4
75923: PPUSH
75924: EMPTY
75925: PPUSH
75926: CALL_OW 1
75930: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75931: LD_VAR 0 1
75935: PPUSH
75936: LD_INT 0
75938: PPUSH
75939: CALL_OW 505
// end ; end ;
75943: LD_VAR 0 2
75947: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75948: LD_INT 0
75950: PPUSH
75951: PPUSH
75952: PPUSH
// if not hack in hackTanks or not vehicles then
75953: LD_VAR 0 1
75957: PUSH
75958: LD_EXP 100
75962: IN
75963: NOT
75964: PUSH
75965: LD_VAR 0 2
75969: NOT
75970: OR
75971: IFFALSE 75975
// exit ;
75973: GO 76250
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75975: LD_ADDR_VAR 0 2
75979: PUSH
75980: LD_VAR 0 1
75984: PPUSH
75985: LD_VAR 0 2
75989: PPUSH
75990: LD_INT 1
75992: PPUSH
75993: LD_INT 1
75995: PPUSH
75996: CALL 20885 0 4
76000: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
76001: LD_ADDR_VAR 0 5
76005: PUSH
76006: LD_EXP 100
76010: PPUSH
76011: LD_VAR 0 1
76015: PPUSH
76016: CALL 20235 0 2
76020: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
76021: LD_EXP 101
76025: PUSH
76026: LD_VAR 0 5
76030: ARRAY
76031: PUSH
76032: LD_EXP 102
76036: LESS
76037: IFFALSE 76226
// begin for i := 1 to vehicles do
76039: LD_ADDR_VAR 0 4
76043: PUSH
76044: DOUBLE
76045: LD_INT 1
76047: DEC
76048: ST_TO_ADDR
76049: LD_VAR 0 2
76053: PUSH
76054: FOR_TO
76055: IFFALSE 76224
// begin if hackTanksCaptured [ index ] = hackLimit then
76057: LD_EXP 101
76061: PUSH
76062: LD_VAR 0 5
76066: ARRAY
76067: PUSH
76068: LD_EXP 102
76072: EQUAL
76073: IFFALSE 76077
// break ;
76075: GO 76224
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
76077: LD_ADDR_EXP 104
76081: PUSH
76082: LD_EXP 104
76086: PPUSH
76087: LD_VAR 0 5
76091: PPUSH
76092: LD_EXP 104
76096: PUSH
76097: LD_VAR 0 5
76101: ARRAY
76102: PUSH
76103: LD_INT 1
76105: PLUS
76106: PPUSH
76107: CALL_OW 1
76111: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
76112: LD_ADDR_EXP 101
76116: PUSH
76117: LD_EXP 101
76121: PPUSH
76122: LD_VAR 0 5
76126: PUSH
76127: LD_EXP 101
76131: PUSH
76132: LD_VAR 0 5
76136: ARRAY
76137: PUSH
76138: LD_INT 1
76140: PLUS
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: PPUSH
76146: LD_VAR 0 2
76150: PUSH
76151: LD_VAR 0 4
76155: ARRAY
76156: PUSH
76157: LD_VAR 0 2
76161: PUSH
76162: LD_VAR 0 4
76166: ARRAY
76167: PPUSH
76168: CALL_OW 255
76172: PUSH
76173: EMPTY
76174: LIST
76175: LIST
76176: PPUSH
76177: CALL 20450 0 3
76181: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76182: LD_VAR 0 2
76186: PUSH
76187: LD_VAR 0 4
76191: ARRAY
76192: PPUSH
76193: LD_VAR 0 1
76197: PPUSH
76198: CALL_OW 255
76202: PPUSH
76203: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76207: LD_VAR 0 2
76211: PUSH
76212: LD_VAR 0 4
76216: ARRAY
76217: PPUSH
76218: CALL_OW 141
// end ;
76222: GO 76054
76224: POP
76225: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76226: LD_VAR 0 1
76230: PPUSH
76231: LD_EXP 101
76235: PUSH
76236: LD_VAR 0 5
76240: ARRAY
76241: PUSH
76242: LD_INT 0
76244: PLUS
76245: PPUSH
76246: CALL_OW 505
// end ;
76250: LD_VAR 0 3
76254: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76255: LD_INT 0
76257: PPUSH
76258: PPUSH
76259: PPUSH
76260: PPUSH
// if not hack in hackTanks then
76261: LD_VAR 0 1
76265: PUSH
76266: LD_EXP 100
76270: IN
76271: NOT
76272: IFFALSE 76276
// exit ;
76274: GO 76516
// index := GetElementIndex ( hackTanks , hack ) ;
76276: LD_ADDR_VAR 0 4
76280: PUSH
76281: LD_EXP 100
76285: PPUSH
76286: LD_VAR 0 1
76290: PPUSH
76291: CALL 20235 0 2
76295: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76296: LD_ADDR_VAR 0 3
76300: PUSH
76301: DOUBLE
76302: LD_EXP 101
76306: PUSH
76307: LD_VAR 0 4
76311: ARRAY
76312: INC
76313: ST_TO_ADDR
76314: LD_INT 1
76316: PUSH
76317: FOR_DOWNTO
76318: IFFALSE 76490
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76320: LD_ADDR_VAR 0 5
76324: PUSH
76325: LD_EXP 101
76329: PUSH
76330: LD_VAR 0 4
76334: ARRAY
76335: PUSH
76336: LD_VAR 0 3
76340: ARRAY
76341: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76342: LD_VAR 0 5
76346: PUSH
76347: LD_INT 1
76349: ARRAY
76350: PPUSH
76351: CALL_OW 302
76355: NOT
76356: PUSH
76357: LD_VAR 0 5
76361: PUSH
76362: LD_INT 1
76364: ARRAY
76365: PPUSH
76366: CALL_OW 255
76370: PUSH
76371: LD_VAR 0 1
76375: PPUSH
76376: CALL_OW 255
76380: NONEQUAL
76381: OR
76382: IFFALSE 76488
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76384: LD_VAR 0 5
76388: PUSH
76389: LD_INT 1
76391: ARRAY
76392: PPUSH
76393: CALL_OW 305
76397: PUSH
76398: LD_VAR 0 5
76402: PUSH
76403: LD_INT 1
76405: ARRAY
76406: PPUSH
76407: CALL_OW 255
76411: PUSH
76412: LD_VAR 0 1
76416: PPUSH
76417: CALL_OW 255
76421: EQUAL
76422: AND
76423: IFFALSE 76447
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76425: LD_VAR 0 5
76429: PUSH
76430: LD_INT 1
76432: ARRAY
76433: PPUSH
76434: LD_VAR 0 5
76438: PUSH
76439: LD_INT 2
76441: ARRAY
76442: PPUSH
76443: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76447: LD_ADDR_EXP 101
76451: PUSH
76452: LD_EXP 101
76456: PPUSH
76457: LD_VAR 0 4
76461: PPUSH
76462: LD_EXP 101
76466: PUSH
76467: LD_VAR 0 4
76471: ARRAY
76472: PPUSH
76473: LD_VAR 0 3
76477: PPUSH
76478: CALL_OW 3
76482: PPUSH
76483: CALL_OW 1
76487: ST_TO_ADDR
// end ; end ;
76488: GO 76317
76490: POP
76491: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76492: LD_VAR 0 1
76496: PPUSH
76497: LD_EXP 101
76501: PUSH
76502: LD_VAR 0 4
76506: ARRAY
76507: PUSH
76508: LD_INT 0
76510: PLUS
76511: PPUSH
76512: CALL_OW 505
// end ;
76516: LD_VAR 0 2
76520: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76521: LD_INT 0
76523: PPUSH
76524: PPUSH
76525: PPUSH
76526: PPUSH
// if not hack in hackTanks then
76527: LD_VAR 0 1
76531: PUSH
76532: LD_EXP 100
76536: IN
76537: NOT
76538: IFFALSE 76542
// exit ;
76540: GO 76627
// index := GetElementIndex ( hackTanks , hack ) ;
76542: LD_ADDR_VAR 0 5
76546: PUSH
76547: LD_EXP 100
76551: PPUSH
76552: LD_VAR 0 1
76556: PPUSH
76557: CALL 20235 0 2
76561: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76562: LD_ADDR_VAR 0 4
76566: PUSH
76567: DOUBLE
76568: LD_INT 1
76570: DEC
76571: ST_TO_ADDR
76572: LD_EXP 101
76576: PUSH
76577: LD_VAR 0 5
76581: ARRAY
76582: PUSH
76583: FOR_TO
76584: IFFALSE 76625
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76586: LD_EXP 101
76590: PUSH
76591: LD_VAR 0 5
76595: ARRAY
76596: PUSH
76597: LD_VAR 0 4
76601: ARRAY
76602: PUSH
76603: LD_INT 1
76605: ARRAY
76606: PUSH
76607: LD_VAR 0 2
76611: EQUAL
76612: IFFALSE 76623
// KillUnit ( vehicle ) ;
76614: LD_VAR 0 2
76618: PPUSH
76619: CALL_OW 66
76623: GO 76583
76625: POP
76626: POP
// end ;
76627: LD_VAR 0 3
76631: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76632: LD_EXP 105
76636: NOT
76637: IFFALSE 76672
76639: GO 76641
76641: DISABLE
// begin initMiner := true ;
76642: LD_ADDR_EXP 105
76646: PUSH
76647: LD_INT 1
76649: ST_TO_ADDR
// minersList := [ ] ;
76650: LD_ADDR_EXP 106
76654: PUSH
76655: EMPTY
76656: ST_TO_ADDR
// minerMinesList := [ ] ;
76657: LD_ADDR_EXP 107
76661: PUSH
76662: EMPTY
76663: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76664: LD_ADDR_EXP 108
76668: PUSH
76669: LD_INT 5
76671: ST_TO_ADDR
// end ;
76672: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76673: LD_EXP 105
76677: PUSH
76678: LD_INT 34
76680: PUSH
76681: LD_INT 81
76683: PUSH
76684: EMPTY
76685: LIST
76686: LIST
76687: PPUSH
76688: CALL_OW 69
76692: AND
76693: IFFALSE 77154
76695: GO 76697
76697: DISABLE
76698: LD_INT 0
76700: PPUSH
76701: PPUSH
76702: PPUSH
76703: PPUSH
// begin enable ;
76704: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76705: LD_ADDR_VAR 0 1
76709: PUSH
76710: LD_INT 34
76712: PUSH
76713: LD_INT 81
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: PPUSH
76720: CALL_OW 69
76724: PUSH
76725: FOR_IN
76726: IFFALSE 76798
// begin if not i in minersList then
76728: LD_VAR 0 1
76732: PUSH
76733: LD_EXP 106
76737: IN
76738: NOT
76739: IFFALSE 76796
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76741: LD_ADDR_EXP 106
76745: PUSH
76746: LD_EXP 106
76750: PPUSH
76751: LD_EXP 106
76755: PUSH
76756: LD_INT 1
76758: PLUS
76759: PPUSH
76760: LD_VAR 0 1
76764: PPUSH
76765: CALL_OW 1
76769: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76770: LD_ADDR_EXP 107
76774: PUSH
76775: LD_EXP 107
76779: PPUSH
76780: LD_EXP 107
76784: PUSH
76785: LD_INT 1
76787: PLUS
76788: PPUSH
76789: EMPTY
76790: PPUSH
76791: CALL_OW 1
76795: ST_TO_ADDR
// end end ;
76796: GO 76725
76798: POP
76799: POP
// for i := minerMinesList downto 1 do
76800: LD_ADDR_VAR 0 1
76804: PUSH
76805: DOUBLE
76806: LD_EXP 107
76810: INC
76811: ST_TO_ADDR
76812: LD_INT 1
76814: PUSH
76815: FOR_DOWNTO
76816: IFFALSE 77152
// begin if IsLive ( minersList [ i ] ) then
76818: LD_EXP 106
76822: PUSH
76823: LD_VAR 0 1
76827: ARRAY
76828: PPUSH
76829: CALL_OW 300
76833: IFFALSE 76861
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76835: LD_EXP 106
76839: PUSH
76840: LD_VAR 0 1
76844: ARRAY
76845: PPUSH
76846: LD_EXP 107
76850: PUSH
76851: LD_VAR 0 1
76855: ARRAY
76856: PPUSH
76857: CALL_OW 505
// if not minerMinesList [ i ] then
76861: LD_EXP 107
76865: PUSH
76866: LD_VAR 0 1
76870: ARRAY
76871: NOT
76872: IFFALSE 76876
// continue ;
76874: GO 76815
// for j := minerMinesList [ i ] downto 1 do
76876: LD_ADDR_VAR 0 2
76880: PUSH
76881: DOUBLE
76882: LD_EXP 107
76886: PUSH
76887: LD_VAR 0 1
76891: ARRAY
76892: INC
76893: ST_TO_ADDR
76894: LD_INT 1
76896: PUSH
76897: FOR_DOWNTO
76898: IFFALSE 77148
// begin side := GetSide ( minersList [ i ] ) ;
76900: LD_ADDR_VAR 0 3
76904: PUSH
76905: LD_EXP 106
76909: PUSH
76910: LD_VAR 0 1
76914: ARRAY
76915: PPUSH
76916: CALL_OW 255
76920: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76921: LD_ADDR_VAR 0 4
76925: PUSH
76926: LD_EXP 107
76930: PUSH
76931: LD_VAR 0 1
76935: ARRAY
76936: PUSH
76937: LD_VAR 0 2
76941: ARRAY
76942: PUSH
76943: LD_INT 1
76945: ARRAY
76946: PPUSH
76947: LD_EXP 107
76951: PUSH
76952: LD_VAR 0 1
76956: ARRAY
76957: PUSH
76958: LD_VAR 0 2
76962: ARRAY
76963: PUSH
76964: LD_INT 2
76966: ARRAY
76967: PPUSH
76968: CALL_OW 428
76972: ST_TO_ADDR
// if not tmp then
76973: LD_VAR 0 4
76977: NOT
76978: IFFALSE 76982
// continue ;
76980: GO 76897
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76982: LD_VAR 0 4
76986: PUSH
76987: LD_INT 81
76989: PUSH
76990: LD_VAR 0 3
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: PPUSH
76999: CALL_OW 69
77003: IN
77004: PUSH
77005: LD_EXP 107
77009: PUSH
77010: LD_VAR 0 1
77014: ARRAY
77015: PUSH
77016: LD_VAR 0 2
77020: ARRAY
77021: PUSH
77022: LD_INT 1
77024: ARRAY
77025: PPUSH
77026: LD_EXP 107
77030: PUSH
77031: LD_VAR 0 1
77035: ARRAY
77036: PUSH
77037: LD_VAR 0 2
77041: ARRAY
77042: PUSH
77043: LD_INT 2
77045: ARRAY
77046: PPUSH
77047: CALL_OW 458
77051: AND
77052: IFFALSE 77146
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
77054: LD_EXP 107
77058: PUSH
77059: LD_VAR 0 1
77063: ARRAY
77064: PUSH
77065: LD_VAR 0 2
77069: ARRAY
77070: PUSH
77071: LD_INT 1
77073: ARRAY
77074: PPUSH
77075: LD_EXP 107
77079: PUSH
77080: LD_VAR 0 1
77084: ARRAY
77085: PUSH
77086: LD_VAR 0 2
77090: ARRAY
77091: PUSH
77092: LD_INT 2
77094: ARRAY
77095: PPUSH
77096: LD_VAR 0 3
77100: PPUSH
77101: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
77105: LD_ADDR_EXP 107
77109: PUSH
77110: LD_EXP 107
77114: PPUSH
77115: LD_VAR 0 1
77119: PPUSH
77120: LD_EXP 107
77124: PUSH
77125: LD_VAR 0 1
77129: ARRAY
77130: PPUSH
77131: LD_VAR 0 2
77135: PPUSH
77136: CALL_OW 3
77140: PPUSH
77141: CALL_OW 1
77145: ST_TO_ADDR
// end ; end ;
77146: GO 76897
77148: POP
77149: POP
// end ;
77150: GO 76815
77152: POP
77153: POP
// end ;
77154: PPOPN 4
77156: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77157: LD_INT 0
77159: PPUSH
77160: PPUSH
// result := false ;
77161: LD_ADDR_VAR 0 4
77165: PUSH
77166: LD_INT 0
77168: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77169: LD_VAR 0 1
77173: PPUSH
77174: CALL_OW 264
77178: PUSH
77179: LD_INT 81
77181: EQUAL
77182: NOT
77183: IFFALSE 77187
// exit ;
77185: GO 77427
// index := GetElementIndex ( minersList , unit ) ;
77187: LD_ADDR_VAR 0 5
77191: PUSH
77192: LD_EXP 106
77196: PPUSH
77197: LD_VAR 0 1
77201: PPUSH
77202: CALL 20235 0 2
77206: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77207: LD_EXP 107
77211: PUSH
77212: LD_VAR 0 5
77216: ARRAY
77217: PUSH
77218: LD_EXP 108
77222: GREATEREQUAL
77223: IFFALSE 77227
// exit ;
77225: GO 77427
// ComMoveXY ( unit , x , y ) ;
77227: LD_VAR 0 1
77231: PPUSH
77232: LD_VAR 0 2
77236: PPUSH
77237: LD_VAR 0 3
77241: PPUSH
77242: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77246: LD_INT 35
77248: PPUSH
77249: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77253: LD_VAR 0 1
77257: PPUSH
77258: LD_VAR 0 2
77262: PPUSH
77263: LD_VAR 0 3
77267: PPUSH
77268: CALL 51987 0 3
77272: NOT
77273: PUSH
77274: LD_VAR 0 1
77278: PPUSH
77279: CALL_OW 314
77283: AND
77284: IFFALSE 77288
// exit ;
77286: GO 77427
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77288: LD_VAR 0 2
77292: PPUSH
77293: LD_VAR 0 3
77297: PPUSH
77298: CALL_OW 428
77302: PUSH
77303: LD_VAR 0 1
77307: EQUAL
77308: PUSH
77309: LD_VAR 0 1
77313: PPUSH
77314: CALL_OW 314
77318: NOT
77319: AND
77320: IFFALSE 77246
// PlaySoundXY ( x , y , PlantMine ) ;
77322: LD_VAR 0 2
77326: PPUSH
77327: LD_VAR 0 3
77331: PPUSH
77332: LD_STRING PlantMine
77334: PPUSH
77335: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77339: LD_VAR 0 2
77343: PPUSH
77344: LD_VAR 0 3
77348: PPUSH
77349: LD_VAR 0 1
77353: PPUSH
77354: CALL_OW 255
77358: PPUSH
77359: LD_INT 0
77361: PPUSH
77362: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77366: LD_ADDR_EXP 107
77370: PUSH
77371: LD_EXP 107
77375: PPUSH
77376: LD_VAR 0 5
77380: PUSH
77381: LD_EXP 107
77385: PUSH
77386: LD_VAR 0 5
77390: ARRAY
77391: PUSH
77392: LD_INT 1
77394: PLUS
77395: PUSH
77396: EMPTY
77397: LIST
77398: LIST
77399: PPUSH
77400: LD_VAR 0 2
77404: PUSH
77405: LD_VAR 0 3
77409: PUSH
77410: EMPTY
77411: LIST
77412: LIST
77413: PPUSH
77414: CALL 20450 0 3
77418: ST_TO_ADDR
// result := true ;
77419: LD_ADDR_VAR 0 4
77423: PUSH
77424: LD_INT 1
77426: ST_TO_ADDR
// end ;
77427: LD_VAR 0 4
77431: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77432: LD_INT 0
77434: PPUSH
77435: PPUSH
77436: PPUSH
// if not unit in minersList then
77437: LD_VAR 0 1
77441: PUSH
77442: LD_EXP 106
77446: IN
77447: NOT
77448: IFFALSE 77452
// exit ;
77450: GO 77844
// index := GetElementIndex ( minersList , unit ) ;
77452: LD_ADDR_VAR 0 6
77456: PUSH
77457: LD_EXP 106
77461: PPUSH
77462: LD_VAR 0 1
77466: PPUSH
77467: CALL 20235 0 2
77471: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77472: LD_ADDR_VAR 0 5
77476: PUSH
77477: DOUBLE
77478: LD_EXP 107
77482: PUSH
77483: LD_VAR 0 6
77487: ARRAY
77488: INC
77489: ST_TO_ADDR
77490: LD_INT 1
77492: PUSH
77493: FOR_DOWNTO
77494: IFFALSE 77655
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77496: LD_EXP 107
77500: PUSH
77501: LD_VAR 0 6
77505: ARRAY
77506: PUSH
77507: LD_VAR 0 5
77511: ARRAY
77512: PUSH
77513: LD_INT 1
77515: ARRAY
77516: PUSH
77517: LD_VAR 0 2
77521: EQUAL
77522: PUSH
77523: LD_EXP 107
77527: PUSH
77528: LD_VAR 0 6
77532: ARRAY
77533: PUSH
77534: LD_VAR 0 5
77538: ARRAY
77539: PUSH
77540: LD_INT 2
77542: ARRAY
77543: PUSH
77544: LD_VAR 0 3
77548: EQUAL
77549: AND
77550: IFFALSE 77653
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77552: LD_EXP 107
77556: PUSH
77557: LD_VAR 0 6
77561: ARRAY
77562: PUSH
77563: LD_VAR 0 5
77567: ARRAY
77568: PUSH
77569: LD_INT 1
77571: ARRAY
77572: PPUSH
77573: LD_EXP 107
77577: PUSH
77578: LD_VAR 0 6
77582: ARRAY
77583: PUSH
77584: LD_VAR 0 5
77588: ARRAY
77589: PUSH
77590: LD_INT 2
77592: ARRAY
77593: PPUSH
77594: LD_VAR 0 1
77598: PPUSH
77599: CALL_OW 255
77603: PPUSH
77604: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77608: LD_ADDR_EXP 107
77612: PUSH
77613: LD_EXP 107
77617: PPUSH
77618: LD_VAR 0 6
77622: PPUSH
77623: LD_EXP 107
77627: PUSH
77628: LD_VAR 0 6
77632: ARRAY
77633: PPUSH
77634: LD_VAR 0 5
77638: PPUSH
77639: CALL_OW 3
77643: PPUSH
77644: CALL_OW 1
77648: ST_TO_ADDR
// exit ;
77649: POP
77650: POP
77651: GO 77844
// end ; end ;
77653: GO 77493
77655: POP
77656: POP
// for i := minerMinesList [ index ] downto 1 do
77657: LD_ADDR_VAR 0 5
77661: PUSH
77662: DOUBLE
77663: LD_EXP 107
77667: PUSH
77668: LD_VAR 0 6
77672: ARRAY
77673: INC
77674: ST_TO_ADDR
77675: LD_INT 1
77677: PUSH
77678: FOR_DOWNTO
77679: IFFALSE 77842
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77681: LD_EXP 107
77685: PUSH
77686: LD_VAR 0 6
77690: ARRAY
77691: PUSH
77692: LD_VAR 0 5
77696: ARRAY
77697: PUSH
77698: LD_INT 1
77700: ARRAY
77701: PPUSH
77702: LD_EXP 107
77706: PUSH
77707: LD_VAR 0 6
77711: ARRAY
77712: PUSH
77713: LD_VAR 0 5
77717: ARRAY
77718: PUSH
77719: LD_INT 2
77721: ARRAY
77722: PPUSH
77723: LD_VAR 0 2
77727: PPUSH
77728: LD_VAR 0 3
77732: PPUSH
77733: CALL_OW 298
77737: PUSH
77738: LD_INT 6
77740: LESS
77741: IFFALSE 77840
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77743: LD_EXP 107
77747: PUSH
77748: LD_VAR 0 6
77752: ARRAY
77753: PUSH
77754: LD_VAR 0 5
77758: ARRAY
77759: PUSH
77760: LD_INT 1
77762: ARRAY
77763: PPUSH
77764: LD_EXP 107
77768: PUSH
77769: LD_VAR 0 6
77773: ARRAY
77774: PUSH
77775: LD_VAR 0 5
77779: ARRAY
77780: PUSH
77781: LD_INT 2
77783: ARRAY
77784: PPUSH
77785: LD_VAR 0 1
77789: PPUSH
77790: CALL_OW 255
77794: PPUSH
77795: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77799: LD_ADDR_EXP 107
77803: PUSH
77804: LD_EXP 107
77808: PPUSH
77809: LD_VAR 0 6
77813: PPUSH
77814: LD_EXP 107
77818: PUSH
77819: LD_VAR 0 6
77823: ARRAY
77824: PPUSH
77825: LD_VAR 0 5
77829: PPUSH
77830: CALL_OW 3
77834: PPUSH
77835: CALL_OW 1
77839: ST_TO_ADDR
// end ; end ;
77840: GO 77678
77842: POP
77843: POP
// end ;
77844: LD_VAR 0 4
77848: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77849: LD_INT 0
77851: PPUSH
77852: PPUSH
77853: PPUSH
77854: PPUSH
77855: PPUSH
77856: PPUSH
77857: PPUSH
77858: PPUSH
77859: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77860: LD_VAR 0 1
77864: PPUSH
77865: CALL_OW 264
77869: PUSH
77870: LD_INT 81
77872: EQUAL
77873: NOT
77874: PUSH
77875: LD_VAR 0 1
77879: PUSH
77880: LD_EXP 106
77884: IN
77885: NOT
77886: OR
77887: IFFALSE 77891
// exit ;
77889: GO 78213
// index := GetElementIndex ( minersList , unit ) ;
77891: LD_ADDR_VAR 0 6
77895: PUSH
77896: LD_EXP 106
77900: PPUSH
77901: LD_VAR 0 1
77905: PPUSH
77906: CALL 20235 0 2
77910: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77911: LD_ADDR_VAR 0 8
77915: PUSH
77916: LD_EXP 108
77920: PUSH
77921: LD_EXP 107
77925: PUSH
77926: LD_VAR 0 6
77930: ARRAY
77931: MINUS
77932: ST_TO_ADDR
// if not minesFreeAmount then
77933: LD_VAR 0 8
77937: NOT
77938: IFFALSE 77942
// exit ;
77940: GO 78213
// tmp := [ ] ;
77942: LD_ADDR_VAR 0 7
77946: PUSH
77947: EMPTY
77948: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77949: LD_ADDR_VAR 0 5
77953: PUSH
77954: DOUBLE
77955: LD_INT 1
77957: DEC
77958: ST_TO_ADDR
77959: LD_VAR 0 8
77963: PUSH
77964: FOR_TO
77965: IFFALSE 78160
// begin _d := rand ( 0 , 5 ) ;
77967: LD_ADDR_VAR 0 11
77971: PUSH
77972: LD_INT 0
77974: PPUSH
77975: LD_INT 5
77977: PPUSH
77978: CALL_OW 12
77982: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77983: LD_ADDR_VAR 0 12
77987: PUSH
77988: LD_INT 2
77990: PPUSH
77991: LD_INT 6
77993: PPUSH
77994: CALL_OW 12
77998: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
77999: LD_ADDR_VAR 0 9
78003: PUSH
78004: LD_VAR 0 2
78008: PPUSH
78009: LD_VAR 0 11
78013: PPUSH
78014: LD_VAR 0 12
78018: PPUSH
78019: CALL_OW 272
78023: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
78024: LD_ADDR_VAR 0 10
78028: PUSH
78029: LD_VAR 0 3
78033: PPUSH
78034: LD_VAR 0 11
78038: PPUSH
78039: LD_VAR 0 12
78043: PPUSH
78044: CALL_OW 273
78048: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
78049: LD_VAR 0 9
78053: PPUSH
78054: LD_VAR 0 10
78058: PPUSH
78059: CALL_OW 488
78063: PUSH
78064: LD_VAR 0 9
78068: PUSH
78069: LD_VAR 0 10
78073: PUSH
78074: EMPTY
78075: LIST
78076: LIST
78077: PUSH
78078: LD_VAR 0 7
78082: IN
78083: NOT
78084: AND
78085: PUSH
78086: LD_VAR 0 9
78090: PPUSH
78091: LD_VAR 0 10
78095: PPUSH
78096: CALL_OW 458
78100: NOT
78101: AND
78102: IFFALSE 78144
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
78104: LD_ADDR_VAR 0 7
78108: PUSH
78109: LD_VAR 0 7
78113: PPUSH
78114: LD_VAR 0 7
78118: PUSH
78119: LD_INT 1
78121: PLUS
78122: PPUSH
78123: LD_VAR 0 9
78127: PUSH
78128: LD_VAR 0 10
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: PPUSH
78137: CALL_OW 1
78141: ST_TO_ADDR
78142: GO 78158
// i := i - 1 ;
78144: LD_ADDR_VAR 0 5
78148: PUSH
78149: LD_VAR 0 5
78153: PUSH
78154: LD_INT 1
78156: MINUS
78157: ST_TO_ADDR
// end ;
78158: GO 77964
78160: POP
78161: POP
// for i in tmp do
78162: LD_ADDR_VAR 0 5
78166: PUSH
78167: LD_VAR 0 7
78171: PUSH
78172: FOR_IN
78173: IFFALSE 78211
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78175: LD_VAR 0 1
78179: PPUSH
78180: LD_VAR 0 5
78184: PUSH
78185: LD_INT 1
78187: ARRAY
78188: PPUSH
78189: LD_VAR 0 5
78193: PUSH
78194: LD_INT 2
78196: ARRAY
78197: PPUSH
78198: CALL 77157 0 3
78202: NOT
78203: IFFALSE 78209
// exit ;
78205: POP
78206: POP
78207: GO 78213
78209: GO 78172
78211: POP
78212: POP
// end ;
78213: LD_VAR 0 4
78217: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
78218: LD_INT 0
78220: PPUSH
78221: PPUSH
78222: PPUSH
78223: PPUSH
78224: PPUSH
78225: PPUSH
78226: PPUSH
// if not GetClass ( unit ) = class_sniper then
78227: LD_VAR 0 1
78231: PPUSH
78232: CALL_OW 257
78236: PUSH
78237: LD_INT 5
78239: EQUAL
78240: NOT
78241: IFFALSE 78245
// exit ;
78243: GO 78633
// dist := 8 ;
78245: LD_ADDR_VAR 0 5
78249: PUSH
78250: LD_INT 8
78252: ST_TO_ADDR
// viewRange := 12 ;
78253: LD_ADDR_VAR 0 7
78257: PUSH
78258: LD_INT 12
78260: ST_TO_ADDR
// side := GetSide ( unit ) ;
78261: LD_ADDR_VAR 0 6
78265: PUSH
78266: LD_VAR 0 1
78270: PPUSH
78271: CALL_OW 255
78275: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78276: LD_INT 61
78278: PPUSH
78279: LD_VAR 0 6
78283: PPUSH
78284: CALL_OW 321
78288: PUSH
78289: LD_INT 2
78291: EQUAL
78292: IFFALSE 78302
// viewRange := 16 ;
78294: LD_ADDR_VAR 0 7
78298: PUSH
78299: LD_INT 16
78301: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78302: LD_VAR 0 1
78306: PPUSH
78307: LD_VAR 0 2
78311: PPUSH
78312: LD_VAR 0 3
78316: PPUSH
78317: CALL_OW 297
78321: PUSH
78322: LD_VAR 0 5
78326: GREATER
78327: IFFALSE 78406
// begin ComMoveXY ( unit , x , y ) ;
78329: LD_VAR 0 1
78333: PPUSH
78334: LD_VAR 0 2
78338: PPUSH
78339: LD_VAR 0 3
78343: PPUSH
78344: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78348: LD_INT 35
78350: PPUSH
78351: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78355: LD_VAR 0 1
78359: PPUSH
78360: LD_VAR 0 2
78364: PPUSH
78365: LD_VAR 0 3
78369: PPUSH
78370: CALL 51987 0 3
78374: NOT
78375: IFFALSE 78379
// exit ;
78377: GO 78633
// until GetDistUnitXY ( unit , x , y ) < dist ;
78379: LD_VAR 0 1
78383: PPUSH
78384: LD_VAR 0 2
78388: PPUSH
78389: LD_VAR 0 3
78393: PPUSH
78394: CALL_OW 297
78398: PUSH
78399: LD_VAR 0 5
78403: LESS
78404: IFFALSE 78348
// end ; ComTurnXY ( unit , x , y ) ;
78406: LD_VAR 0 1
78410: PPUSH
78411: LD_VAR 0 2
78415: PPUSH
78416: LD_VAR 0 3
78420: PPUSH
78421: CALL_OW 118
// wait ( 5 ) ;
78425: LD_INT 5
78427: PPUSH
78428: CALL_OW 67
// _d := GetDir ( unit ) ;
78432: LD_ADDR_VAR 0 10
78436: PUSH
78437: LD_VAR 0 1
78441: PPUSH
78442: CALL_OW 254
78446: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78447: LD_ADDR_VAR 0 8
78451: PUSH
78452: LD_VAR 0 1
78456: PPUSH
78457: CALL_OW 250
78461: PPUSH
78462: LD_VAR 0 10
78466: PPUSH
78467: LD_VAR 0 5
78471: PPUSH
78472: CALL_OW 272
78476: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78477: LD_ADDR_VAR 0 9
78481: PUSH
78482: LD_VAR 0 1
78486: PPUSH
78487: CALL_OW 251
78491: PPUSH
78492: LD_VAR 0 10
78496: PPUSH
78497: LD_VAR 0 5
78501: PPUSH
78502: CALL_OW 273
78506: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78507: LD_VAR 0 8
78511: PPUSH
78512: LD_VAR 0 9
78516: PPUSH
78517: CALL_OW 488
78521: NOT
78522: IFFALSE 78526
// exit ;
78524: GO 78633
// ComAnimCustom ( unit , 1 ) ;
78526: LD_VAR 0 1
78530: PPUSH
78531: LD_INT 1
78533: PPUSH
78534: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78538: LD_VAR 0 8
78542: PPUSH
78543: LD_VAR 0 9
78547: PPUSH
78548: LD_VAR 0 6
78552: PPUSH
78553: LD_VAR 0 7
78557: PPUSH
78558: CALL_OW 330
// repeat wait ( 1 ) ;
78562: LD_INT 1
78564: PPUSH
78565: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78569: LD_VAR 0 1
78573: PPUSH
78574: CALL_OW 316
78578: PUSH
78579: LD_VAR 0 1
78583: PPUSH
78584: CALL_OW 314
78588: OR
78589: PUSH
78590: LD_VAR 0 1
78594: PPUSH
78595: CALL_OW 302
78599: NOT
78600: OR
78601: PUSH
78602: LD_VAR 0 1
78606: PPUSH
78607: CALL_OW 301
78611: OR
78612: IFFALSE 78562
// RemoveSeeing ( _x , _y , side ) ;
78614: LD_VAR 0 8
78618: PPUSH
78619: LD_VAR 0 9
78623: PPUSH
78624: LD_VAR 0 6
78628: PPUSH
78629: CALL_OW 331
// end ;
78633: LD_VAR 0 4
78637: RET
