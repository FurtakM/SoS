// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 10239 0 0
// LoadEnv ;
  16: CALL 9837 0 0
// LoadCam ;
  20: CALL 10503 0 0
// LoadTech ;
  24: CALL 10579 0 0
// LoadBase ;
  28: CALL 11065 0 0
// PrepareArabian ;
  32: CALL 186 0 0
// PrepareRussian ;
  36: CALL 3050 0 0
// Action ;
  40: CALL 12369 0 0
// end ;
  44: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; export wave , strength ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 09c_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 09c_
  63: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 09_tick
  71: PPUSH
  72: LD_INT 31500
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 09c_tick
  87: PPUSH
  88: LD_INT 10500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// playerInBase := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// kamikazeTrained := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// apeDriver := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 120
 127: PUSH
 128: LD_INT 150
 130: PUSH
 131: LD_INT 180
 133: PUSH
 134: LD_INT 220
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// missionTime := 0 0$00 ;
 149: LD_ADDR_EXP 9
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// ruDefeated := false ;
 157: LD_ADDR_EXP 10
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// wave := 0 ;
 165: LD_ADDR_EXP 11
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// strength := 0 ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ; end_of_file
 181: LD_VAR 0 1
 185: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 197: LD_STRING 05_DrugsTested
 199: PPUSH
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 30
 209: IFFALSE 224
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 211: LD_INT 5
 213: PPUSH
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 2
 219: PPUSH
 220: CALL_OW 322
// uc_side := 2 ;
 224: LD_ADDR_OWVAR 20
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// uc_nation := nation_nature ;
 232: LD_ADDR_OWVAR 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 240: LD_ADDR_VAR 0 3
 244: PUSH
 245: LD_STRING 09_apes
 247: PPUSH
 248: CALL_OW 31
 252: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 253: LD_ADDR_VAR 0 6
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 30
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: ST_TO_ADDR
// if apes then
 305: LD_VAR 0 3
 309: IFFALSE 388
// for i in apes do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: LD_VAR 0 3
 320: PUSH
 321: FOR_IN
 322: IFFALSE 386
// if UnitsInside ( b [ 1 ] ) < 6 then
 324: LD_VAR 0 6
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: CALL_OW 313
 337: PUSH
 338: LD_INT 6
 340: LESS
 341: IFFALSE 363
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_VAR 0 6
 352: PUSH
 353: LD_INT 1
 355: ARRAY
 356: PPUSH
 357: CALL_OW 52
 361: GO 384
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 363: LD_VAR 0 2
 367: PPUSH
 368: LD_INT 82
 370: PPUSH
 371: LD_INT 27
 373: PPUSH
 374: LD_INT 6
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 50
 384: GO 321
 386: POP
 387: POP
// InitHC_All ( ) ;
 388: CALL_OW 584
// uc_nation := nation_arabian ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 2
 399: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 400: LD_ADDR_VAR 0 6
 404: PUSH
 405: LD_INT 22
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 5
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 474: LD_ADDR_EXP 33
 478: PUSH
 479: LD_STRING Rolf
 481: PPUSH
 482: LD_EXP 1
 486: NOT
 487: PPUSH
 488: LD_STRING 06_
 490: PPUSH
 491: CALL 15459 0 3
 495: ST_TO_ADDR
// if Rolf then
 496: LD_EXP 33
 500: IFFALSE 709
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 502: LD_ADDR_EXP 32
 506: PUSH
 507: LD_STRING 06_RolfSquad
 509: PPUSH
 510: CALL_OW 31
 514: ST_TO_ADDR
// if rolfSquad < 3 then
 515: LD_EXP 32
 519: PUSH
 520: LD_INT 3
 522: LESS
 523: IFFALSE 586
// for i := 1 to 3 - Count ( rolfSquad ) do
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: DOUBLE
 531: LD_INT 1
 533: DEC
 534: ST_TO_ADDR
 535: LD_INT 3
 537: PUSH
 538: LD_EXP 32
 542: PPUSH
 543: CALL 17561 0 1
 547: MINUS
 548: PUSH
 549: FOR_TO
 550: IFFALSE 584
// begin PrepareSoldier ( false , 4 ) ;
 552: LD_INT 0
 554: PPUSH
 555: LD_INT 4
 557: PPUSH
 558: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 562: LD_ADDR_EXP 32
 566: PUSH
 567: LD_EXP 32
 571: PPUSH
 572: CALL_OW 44
 576: PPUSH
 577: CALL 53161 0 2
 581: ST_TO_ADDR
// end ;
 582: GO 549
 584: POP
 585: POP
// if b then
 586: LD_VAR 0 6
 590: IFFALSE 665
// begin for i in rolfSquad union Rolf do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_EXP 32
 601: PUSH
 602: LD_EXP 33
 606: UNION
 607: PUSH
 608: FOR_IN
 609: IFFALSE 661
// begin SetClass ( i , 1 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_VAR 0 6
 632: PPUSH
 633: LD_INT 3
 635: PUSH
 636: LD_INT 62
 638: PUSH
 639: EMPTY
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 52
// end ;
 659: GO 608
 661: POP
 662: POP
// end else
 663: GO 709
// for i in rolfSquad union Rolf do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_EXP 32
 674: PUSH
 675: LD_EXP 33
 679: UNION
 680: PUSH
 681: FOR_IN
 682: IFFALSE 707
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 684: LD_VAR 0 2
 688: PPUSH
 689: LD_INT 82
 691: PPUSH
 692: LD_INT 27
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 50
 705: GO 681
 707: POP
 708: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 13
 713: PUSH
 714: LD_STRING Heike
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 15459 0 3
 732: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 16
 737: PUSH
 738: LD_STRING Ibrahim
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 15459 0 3
 756: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 14
 761: PUSH
 762: LD_STRING Givi
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 15459 0 3
 780: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 17
 785: PUSH
 786: LD_STRING Kamil
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 15459 0 3
 804: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 18
 809: PUSH
 810: LD_STRING Kaia
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 15459 0 3
 828: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 19
 833: PUSH
 834: LD_STRING Sophia
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 15459 0 3
 852: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 20
 857: PUSH
 858: LD_STRING Markov
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 15459 0 3
 876: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 23
 881: PUSH
 882: LD_STRING Aviradze
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 15459 0 3
 900: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 22
 905: PUSH
 906: LD_STRING Kurt
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 15459 0 3
 924: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_STRING Mike
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 15459 0 3
 948: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 21
 953: PUSH
 954: LD_STRING Olaf
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 15459 0 3
 972: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 973: LD_ADDR_EXP 30
 977: PUSH
 978: LD_STRING 09c_heikeSecondSquad
 980: PPUSH
 981: CALL_OW 31
 985: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 986: LD_ADDR_EXP 24
 990: PUSH
 991: LD_STRING Schulz
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_EXP 2
1004: PPUSH
1005: CALL 15459 0 3
1009: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
1010: LD_ADDR_EXP 25
1014: PUSH
1015: LD_STRING Basim
1017: PPUSH
1018: LD_EXP 1
1022: NOT
1023: PPUSH
1024: LD_EXP 2
1028: PPUSH
1029: CALL 15459 0 3
1033: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1034: LD_ADDR_EXP 26
1038: PUSH
1039: LD_STRING Lemmy
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 2
1052: PPUSH
1053: CALL 15459 0 3
1057: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1058: LD_ADDR_EXP 27
1062: PUSH
1063: LD_STRING Mia
1065: PPUSH
1066: LD_EXP 1
1070: NOT
1071: PPUSH
1072: LD_EXP 2
1076: PPUSH
1077: CALL 15459 0 3
1081: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1082: LD_ADDR_EXP 28
1086: PUSH
1087: LD_STRING Nia
1089: PPUSH
1090: LD_EXP 1
1094: NOT
1095: PPUSH
1096: LD_EXP 2
1100: PPUSH
1101: CALL 15459 0 3
1105: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1106: LD_ADDR_EXP 29
1110: PUSH
1111: LD_STRING Jenna
1113: PPUSH
1114: LD_EXP 1
1118: NOT
1119: PPUSH
1120: LD_EXP 2
1124: PPUSH
1125: CALL 15459 0 3
1129: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING 09c_schulzSecondSquad
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// if debug then
1143: LD_EXP 1
1147: IFFALSE 1227
// begin schulzSecondSquad := [ ] ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: EMPTY
1155: ST_TO_ADDR
// for i := 1 to 3 do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_INT 3
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1225
// begin uc_side := 2 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
// uc_nation := nation_arabian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 2
1187: ST_TO_ADDR
// PrepareHuman ( false , i , 0 ) ;
1188: LD_INT 0
1190: PPUSH
1191: LD_VAR 0 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PPUSH
1213: CALL_OW 44
1217: PPUSH
1218: CALL 53161 0 2
1222: ST_TO_ADDR
// end ;
1223: GO 1169
1225: POP
1226: POP
// end ; vehicles := LoadVariable ( 09c_vehicles , [ [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 36 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 41 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 37 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 35 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 34 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 38 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 40 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 39 ] ] ) ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_STRING 09c_vehicles
1234: PPUSH
1235: LD_INT 13
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 28
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 36
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 13
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 28
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 0
1289: PUSH
1290: LD_INT 41
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 13
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: LD_INT 28
1314: PUSH
1315: LD_INT 2
1317: PUSH
1318: LD_INT 0
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 37
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 13
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 28
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 35
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 13
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 28
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: LD_INT 34
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 13
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 28
1416: PUSH
1417: LD_INT 2
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 38
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 13
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 28
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 40
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 13
1475: PUSH
1476: LD_INT 3
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 28
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 39
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 30
1521: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Heike , LoadVariable ( 09c_Heike_ID , - 1 ) , vehicles ) ;
1522: LD_ADDR_VAR 0 9
1526: PUSH
1527: LD_VAR 0 9
1531: PUSH
1532: LD_EXP 13
1536: PPUSH
1537: LD_STRING 09c_Heike_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2764 0 3
1558: DIFF
1559: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Givi , LoadVariable ( 09c_Givi_ID , - 1 ) , vehicles ) ;
1560: LD_ADDR_VAR 0 9
1564: PUSH
1565: LD_VAR 0 9
1569: PUSH
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING 09c_Givi_ID
1577: PPUSH
1578: LD_INT 1
1580: NEG
1581: PPUSH
1582: CALL_OW 30
1586: PPUSH
1587: LD_VAR 0 9
1591: PPUSH
1592: CALL 2764 0 3
1596: DIFF
1597: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mike , LoadVariable ( 09c_Mike_ID , - 1 ) , vehicles ) ;
1598: LD_ADDR_VAR 0 9
1602: PUSH
1603: LD_VAR 0 9
1607: PUSH
1608: LD_EXP 15
1612: PPUSH
1613: LD_STRING 09c_Mike_ID
1615: PPUSH
1616: LD_INT 1
1618: NEG
1619: PPUSH
1620: CALL_OW 30
1624: PPUSH
1625: LD_VAR 0 9
1629: PPUSH
1630: CALL 2764 0 3
1634: DIFF
1635: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Ibrahim , LoadVariable ( 09c_Ibrahim_ID , - 1 ) , vehicles ) ;
1636: LD_ADDR_VAR 0 9
1640: PUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_EXP 16
1650: PPUSH
1651: LD_STRING 09c_Ibrahim_ID
1653: PPUSH
1654: LD_INT 1
1656: NEG
1657: PPUSH
1658: CALL_OW 30
1662: PPUSH
1663: LD_VAR 0 9
1667: PPUSH
1668: CALL 2764 0 3
1672: DIFF
1673: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kamil , LoadVariable ( 09c_Kamil_ID , - 1 ) , vehicles ) ;
1674: LD_ADDR_VAR 0 9
1678: PUSH
1679: LD_VAR 0 9
1683: PUSH
1684: LD_EXP 17
1688: PPUSH
1689: LD_STRING 09c_Kamil_ID
1691: PPUSH
1692: LD_INT 1
1694: NEG
1695: PPUSH
1696: CALL_OW 30
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL 2764 0 3
1710: DIFF
1711: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kaia , LoadVariable ( 09c_Kaia_ID , - 1 ) , vehicles ) ;
1712: LD_ADDR_VAR 0 9
1716: PUSH
1717: LD_VAR 0 9
1721: PUSH
1722: LD_EXP 18
1726: PPUSH
1727: LD_STRING 09c_Kaia_ID
1729: PPUSH
1730: LD_INT 1
1732: NEG
1733: PPUSH
1734: CALL_OW 30
1738: PPUSH
1739: LD_VAR 0 9
1743: PPUSH
1744: CALL 2764 0 3
1748: DIFF
1749: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Sophia , LoadVariable ( 09c_Sophia_ID , - 1 ) , vehicles ) ;
1750: LD_ADDR_VAR 0 9
1754: PUSH
1755: LD_VAR 0 9
1759: PUSH
1760: LD_EXP 19
1764: PPUSH
1765: LD_STRING 09c_Sophia_ID
1767: PPUSH
1768: LD_INT 1
1770: NEG
1771: PPUSH
1772: CALL_OW 30
1776: PPUSH
1777: LD_VAR 0 9
1781: PPUSH
1782: CALL 2764 0 3
1786: DIFF
1787: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Markov , LoadVariable ( 09c_Markov_ID , - 1 ) , vehicles ) ;
1788: LD_ADDR_VAR 0 9
1792: PUSH
1793: LD_VAR 0 9
1797: PUSH
1798: LD_EXP 20
1802: PPUSH
1803: LD_STRING 09c_Markov_ID
1805: PPUSH
1806: LD_INT 1
1808: NEG
1809: PPUSH
1810: CALL_OW 30
1814: PPUSH
1815: LD_VAR 0 9
1819: PPUSH
1820: CALL 2764 0 3
1824: DIFF
1825: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Olaf , LoadVariable ( 09c_Olaf_ID , - 1 ) , vehicles ) ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_VAR 0 9
1835: PUSH
1836: LD_EXP 21
1840: PPUSH
1841: LD_STRING 09c_Olaf_ID
1843: PPUSH
1844: LD_INT 1
1846: NEG
1847: PPUSH
1848: CALL_OW 30
1852: PPUSH
1853: LD_VAR 0 9
1857: PPUSH
1858: CALL 2764 0 3
1862: DIFF
1863: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kurt , LoadVariable ( 09c_Kurt_ID , - 1 ) , vehicles ) ;
1864: LD_ADDR_VAR 0 9
1868: PUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_STRING 09c_Kurt_ID
1881: PPUSH
1882: LD_INT 1
1884: NEG
1885: PPUSH
1886: CALL_OW 30
1890: PPUSH
1891: LD_VAR 0 9
1895: PPUSH
1896: CALL 2764 0 3
1900: DIFF
1901: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Aviradze , LoadVariable ( 09c_Aviradze_ID , - 1 ) , vehicles ) ;
1902: LD_ADDR_VAR 0 9
1906: PUSH
1907: LD_VAR 0 9
1911: PUSH
1912: LD_EXP 23
1916: PPUSH
1917: LD_STRING 09c_Aviradze_ID
1919: PPUSH
1920: LD_INT 1
1922: NEG
1923: PPUSH
1924: CALL_OW 30
1928: PPUSH
1929: LD_VAR 0 9
1933: PPUSH
1934: CALL 2764 0 3
1938: DIFF
1939: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Schulz , LoadVariable ( 09c_Schulz_ID , 34 ) , vehicles ) ;
1940: LD_ADDR_VAR 0 9
1944: PUSH
1945: LD_VAR 0 9
1949: PUSH
1950: LD_EXP 24
1954: PPUSH
1955: LD_STRING 09c_Schulz_ID
1957: PPUSH
1958: LD_INT 34
1960: PPUSH
1961: CALL_OW 30
1965: PPUSH
1966: LD_VAR 0 9
1970: PPUSH
1971: CALL 2764 0 3
1975: DIFF
1976: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Lemmy , LoadVariable ( 09c_Lemmy_ID , 35 ) , vehicles ) ;
1977: LD_ADDR_VAR 0 9
1981: PUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_EXP 26
1991: PPUSH
1992: LD_STRING 09c_Lemmy_ID
1994: PPUSH
1995: LD_INT 35
1997: PPUSH
1998: CALL_OW 30
2002: PPUSH
2003: LD_VAR 0 9
2007: PPUSH
2008: CALL 2764 0 3
2012: DIFF
2013: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mia , LoadVariable ( 09c_Mia_ID , 36 ) , vehicles ) ;
2014: LD_ADDR_VAR 0 9
2018: PUSH
2019: LD_VAR 0 9
2023: PUSH
2024: LD_EXP 27
2028: PPUSH
2029: LD_STRING 09c_Mia_ID
2031: PPUSH
2032: LD_INT 36
2034: PPUSH
2035: CALL_OW 30
2039: PPUSH
2040: LD_VAR 0 9
2044: PPUSH
2045: CALL 2764 0 3
2049: DIFF
2050: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Nia , LoadVariable ( 09c_Nia_ID , 37 ) , vehicles ) ;
2051: LD_ADDR_VAR 0 9
2055: PUSH
2056: LD_VAR 0 9
2060: PUSH
2061: LD_EXP 28
2065: PPUSH
2066: LD_STRING 09c_Nia_ID
2068: PPUSH
2069: LD_INT 37
2071: PPUSH
2072: CALL_OW 30
2076: PPUSH
2077: LD_VAR 0 9
2081: PPUSH
2082: CALL 2764 0 3
2086: DIFF
2087: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Jenna , LoadVariable ( 09c_Jenna_ID , 38 ) , vehicles ) ;
2088: LD_ADDR_VAR 0 9
2092: PUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_EXP 29
2102: PPUSH
2103: LD_STRING 09c_Jenna_ID
2105: PPUSH
2106: LD_INT 38
2108: PPUSH
2109: CALL_OW 30
2113: PPUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: CALL 2764 0 3
2123: DIFF
2124: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Basim , LoadVariable ( 09c_Basim_ID , - 1 ) , vehicles ) ;
2125: LD_ADDR_VAR 0 9
2129: PUSH
2130: LD_VAR 0 9
2134: PUSH
2135: LD_EXP 25
2139: PPUSH
2140: LD_STRING 09c_Basim_ID
2142: PPUSH
2143: LD_INT 1
2145: NEG
2146: PPUSH
2147: CALL_OW 30
2151: PPUSH
2152: LD_VAR 0 9
2156: PPUSH
2157: CALL 2764 0 3
2161: DIFF
2162: ST_TO_ADDR
// for i := 1 to schulzSecondSquad do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_EXP 31
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2238
// vehicles := vehicles diff SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 38 + i ) , vehicles ) ;
2181: LD_ADDR_VAR 0 9
2185: PUSH
2186: LD_VAR 0 9
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_VAR 0 2
2200: ARRAY
2201: PPUSH
2202: LD_STRING 09c_random_ID_
2204: PUSH
2205: LD_VAR 0 2
2209: STR
2210: PPUSH
2211: LD_INT 38
2213: PUSH
2214: LD_VAR 0 2
2218: PLUS
2219: PPUSH
2220: CALL_OW 30
2224: PPUSH
2225: LD_VAR 0 9
2229: PPUSH
2230: CALL 2764 0 3
2234: DIFF
2235: ST_TO_ADDR
2236: GO 2178
2238: POP
2239: POP
// for i := 1 to heikeSecondSquad do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 30
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2310
// vehicles := vehicles diff SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_hrandom_ID_ & i , - 1 ) , vehicles ) ;
2258: LD_ADDR_VAR 0 9
2262: PUSH
2263: LD_VAR 0 9
2267: PUSH
2268: LD_EXP 30
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_STRING 09c_hrandom_ID_
2281: PUSH
2282: LD_VAR 0 2
2286: STR
2287: PPUSH
2288: LD_INT 1
2290: NEG
2291: PPUSH
2292: CALL_OW 30
2296: PPUSH
2297: LD_VAR 0 9
2301: PPUSH
2302: CALL 2764 0 3
2306: DIFF
2307: ST_TO_ADDR
2308: GO 2255
2310: POP
2311: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2312: LD_INT 22
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 34
2324: PUSH
2325: LD_INT 31
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: IFFALSE 2543
// begin for j := Count ( vehicles ) downto 1 do
2342: LD_ADDR_VAR 0 7
2346: PUSH
2347: DOUBLE
2348: LD_VAR 0 9
2352: PPUSH
2353: CALL 17561 0 1
2357: INC
2358: ST_TO_ADDR
2359: LD_INT 1
2361: PUSH
2362: FOR_DOWNTO
2363: IFFALSE 2541
// begin i := vehicles [ j ] ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 9
2374: PUSH
2375: LD_VAR 0 7
2379: ARRAY
2380: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2381: LD_VAR 0 2
2385: PUSH
2386: LD_INT 3
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: IFFALSE 2539
// begin uc_side := 2 ;
2395: LD_ADDR_OWVAR 20
2399: PUSH
2400: LD_INT 2
2402: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2403: LD_ADDR_OWVAR 21
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 5
2415: ARRAY
2416: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 2
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 6
2460: ARRAY
2461: PPUSH
2462: CALL 20299 0 5
// veh := CreateVehicle ;
2466: LD_ADDR_VAR 0 8
2470: PUSH
2471: CALL_OW 45
2475: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2488: LD_VAR 0 8
2492: PPUSH
2493: LD_INT 7
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2503: LD_ADDR_VAR 0 9
2507: PUSH
2508: LD_VAR 0 9
2512: PPUSH
2513: LD_VAR 0 7
2517: PPUSH
2518: CALL_OW 3
2522: ST_TO_ADDR
// Connect ( veh ) ;
2523: LD_VAR 0 8
2527: PPUSH
2528: CALL 23767 0 1
// wait ( 0 0$0.3 ) ;
2532: LD_INT 10
2534: PPUSH
2535: CALL_OW 67
// end ; end ;
2539: GO 2362
2541: POP
2542: POP
// end ; vehicles := LoadVariable ( 09_otherVehicles , [ ] ) ;
2543: LD_ADDR_VAR 0 9
2547: PUSH
2548: LD_STRING 09_otherVehicles
2550: PPUSH
2551: EMPTY
2552: PPUSH
2553: CALL_OW 30
2557: ST_TO_ADDR
// if vehicles then
2558: LD_VAR 0 9
2562: IFFALSE 2759
// begin for i in vehicles do
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_VAR 0 9
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2757
// begin uc_side := 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 5
2597: ARRAY
2598: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 2
2612: PUSH
2613: LD_INT 2
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 2
2621: PUSH
2622: LD_INT 3
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 4
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 6
2642: ARRAY
2643: PPUSH
2644: CALL 20299 0 5
// veh := CreateVehicle ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2658: LD_VAR 0 8
2662: PPUSH
2663: LD_INT 5
2665: PPUSH
2666: CALL_OW 233
// if i [ 7 ] then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 7
2677: ARRAY
2678: IFFALSE 2698
// SetMark ( veh , i [ 7 ] ) ;
2680: LD_VAR 0 8
2684: PPUSH
2685: LD_VAR 0 2
2689: PUSH
2690: LD_INT 7
2692: ARRAY
2693: PPUSH
2694: CALL_OW 242
// PlaceUnitXYD ( veh , i [ 8 ] , i [ 9 ] , i [ 10 ] , false ) ;
2698: LD_VAR 0 8
2702: PPUSH
2703: LD_VAR 0 2
2707: PUSH
2708: LD_INT 8
2710: ARRAY
2711: PPUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 9
2719: ARRAY
2720: PPUSH
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 10
2728: ARRAY
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: CALL 55301 0 5
// SetFuel ( veh , i [ 6 ] ) ;
2737: LD_VAR 0 8
2741: PPUSH
2742: LD_VAR 0 2
2746: PUSH
2747: LD_INT 6
2749: ARRAY
2750: PPUSH
2751: CALL_OW 240
// end ;
2755: GO 2574
2757: POP
2758: POP
// end ; end ;
2759: LD_VAR 0 1
2763: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
// for i in vehicles do
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3016
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 8
2789: ARRAY
2790: PUSH
2791: LD_VAR 0 2
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 5
2801: PUSH
2802: LD_INT 3
2804: ARRAY
2805: PUSH
2806: LD_INT 1
2808: EQUAL
2809: AND
2810: IFFALSE 3014
// begin result := i ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_VAR 0 5
2821: ST_TO_ADDR
// uc_side := 2 ;
2822: LD_ADDR_OWVAR 20
2826: PUSH
2827: LD_INT 2
2829: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2830: LD_ADDR_OWVAR 21
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 5
2842: ARRAY
2843: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 1
2851: ARRAY
2852: PPUSH
2853: LD_VAR 0 5
2857: PUSH
2858: LD_INT 2
2860: ARRAY
2861: PPUSH
2862: LD_VAR 0 5
2866: PUSH
2867: LD_INT 3
2869: ARRAY
2870: PPUSH
2871: LD_VAR 0 5
2875: PUSH
2876: LD_INT 4
2878: ARRAY
2879: PPUSH
2880: LD_VAR 0 5
2884: PUSH
2885: LD_INT 6
2887: ARRAY
2888: PPUSH
2889: CALL 20299 0 5
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2903: LD_VAR 0 6
2907: PPUSH
2908: LD_INT 5
2910: PPUSH
2911: CALL_OW 233
// if i [ 7 ] < 0 then
2915: LD_VAR 0 5
2919: PUSH
2920: LD_INT 7
2922: ARRAY
2923: PUSH
2924: LD_INT 0
2926: LESS
2927: IFFALSE 2947
// SetMark ( veh , i [ 7 ] ) ;
2929: LD_VAR 0 6
2933: PPUSH
2934: LD_VAR 0 5
2938: PUSH
2939: LD_INT 7
2941: ARRAY
2942: PPUSH
2943: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2947: LD_VAR 0 6
2951: PPUSH
2952: LD_INT 7
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL 52066 0 3
2962: NOT
2963: IFFALSE 2996
// begin SetDir ( unit , 5 ) ;
2965: LD_VAR 0 1
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2977: LD_VAR 0 1
2981: PPUSH
2982: LD_INT 8
2984: PPUSH
2985: LD_INT 0
2987: PPUSH
2988: CALL_OW 49
// exit ;
2992: POP
2993: POP
2994: GO 3045
// end ; PlaceHumanInUnit ( unit , veh ) ;
2996: LD_VAR 0 1
3000: PPUSH
3001: LD_VAR 0 6
3005: PPUSH
3006: CALL_OW 52
// exit ;
3010: POP
3011: POP
3012: GO 3045
// end ;
3014: GO 2779
3016: POP
3017: POP
// SetDir ( unit , 5 ) ;
3018: LD_VAR 0 1
3022: PPUSH
3023: LD_INT 5
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
3030: LD_VAR 0 1
3034: PPUSH
3035: LD_INT 8
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 49
// end ; end_of_file
3045: LD_VAR 0 4
3049: RET
// export function PrepareRussian ; begin
3050: LD_INT 0
3052: PPUSH
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
3053: LD_INT 48
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: LD_INT 2
3061: PPUSH
3062: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
3066: LD_INT 49
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 2
3074: PPUSH
3075: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
3079: LD_INT 50
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
3092: LD_INT 51
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3105: LD_INT 57
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 2
3113: PPUSH
3114: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
3118: LD_INT 48
3120: PPUSH
3121: LD_INT 6
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
3131: LD_INT 49
3133: PPUSH
3134: LD_INT 6
3136: PPUSH
3137: LD_INT 2
3139: PPUSH
3140: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
3144: LD_INT 50
3146: PPUSH
3147: LD_INT 6
3149: PPUSH
3150: LD_INT 2
3152: PPUSH
3153: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
3157: LD_INT 51
3159: PPUSH
3160: LD_INT 6
3162: PPUSH
3163: LD_INT 2
3165: PPUSH
3166: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3170: LD_INT 57
3172: PPUSH
3173: LD_INT 6
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: CALL_OW 322
// if Difficulty >= 2 then
3183: LD_OWVAR 67
3187: PUSH
3188: LD_INT 2
3190: GREATEREQUAL
3191: IFFALSE 3271
// begin SetTech ( tech_Weap2 , 3 , state_researched ) ;
3193: LD_INT 52
3195: PPUSH
3196: LD_INT 3
3198: PPUSH
3199: LD_INT 2
3201: PPUSH
3202: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3206: LD_INT 58
3208: PPUSH
3209: LD_INT 3
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3219: LD_INT 63
3221: PPUSH
3222: LD_INT 3
3224: PPUSH
3225: LD_INT 2
3227: PPUSH
3228: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3232: LD_INT 52
3234: PPUSH
3235: LD_INT 6
3237: PPUSH
3238: LD_INT 2
3240: PPUSH
3241: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3245: LD_INT 58
3247: PPUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
3258: LD_INT 63
3260: PPUSH
3261: LD_INT 6
3263: PPUSH
3264: LD_INT 2
3266: PPUSH
3267: CALL_OW 322
// end ; if Difficulty > 2 then
3271: LD_OWVAR 67
3275: PUSH
3276: LD_INT 2
3278: GREATER
3279: IFFALSE 3359
// begin SetTech ( tech_Weap3 , 3 , state_researched ) ;
3281: LD_INT 53
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: LD_INT 2
3289: PPUSH
3290: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3294: LD_INT 59
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_INT 2
3302: PPUSH
3303: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3307: LD_INT 64
3309: PPUSH
3310: LD_INT 3
3312: PPUSH
3313: LD_INT 2
3315: PPUSH
3316: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
3320: LD_INT 53
3322: PPUSH
3323: LD_INT 6
3325: PPUSH
3326: LD_INT 2
3328: PPUSH
3329: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
3333: LD_INT 59
3335: PPUSH
3336: LD_INT 6
3338: PPUSH
3339: LD_INT 2
3341: PPUSH
3342: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
3346: LD_INT 64
3348: PPUSH
3349: LD_INT 6
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 322
// end ; end ;
3359: LD_VAR 0 1
3363: RET
// export ruForces , ruConstructList , ruTanks ; export function PrepareExtraRussianBase ; var i , j , tmp , un , side , skill , b ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
3370: PPUSH
3371: PPUSH
3372: PPUSH
3373: PPUSH
// side := 6 ;
3374: LD_ADDR_VAR 0 6
3378: PUSH
3379: LD_INT 6
3381: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
3382: LD_ADDR_VAR 0 7
3386: PUSH
3387: LD_INT 7
3389: PUSH
3390: LD_INT 8
3392: PUSH
3393: LD_INT 9
3395: PUSH
3396: LD_INT 10
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_OWVAR 67
3409: ARRAY
3410: ST_TO_ADDR
// ruForces := [ ] ;
3411: LD_ADDR_EXP 34
3415: PUSH
3416: EMPTY
3417: ST_TO_ADDR
// ruConstructList := [ ] ;
3418: LD_ADDR_EXP 35
3422: PUSH
3423: EMPTY
3424: ST_TO_ADDR
// ruTanks := [ ] ;
3425: LD_ADDR_EXP 36
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// tmp := [ [ b_warehouse , 107 , 149 , 4 ] , [ b_oil_mine , 115 , 150 , 4 ] , [ b_factory , 101 , 160 , 0 ] , [ b_ext_computer , 97 , 156 , 2 ] , [ b_ext_siberium , 98 , 160 , 1 ] , [ b_ext_noncombat , 101 , 164 , 0 ] , [ b_ext_gun , 104 , 163 , 5 ] , [ b_ext_rocket , 105 , 160 , 4 ] , [ b_siberite_mine , 128 , 132 , 0 ] , [ b_lab_full , 94 , 142 , 1 , b_lab_weapon , b_lab_spacetime ] , [ b_oil_power , 93 , 137 , 0 ] , [ b_oil_power , 111 , 157 , 0 ] , [ b_oil_power , 109 , 158 , 0 ] , [ b_oil_power , 121 , 150 , 0 ] , [ b_siberite_power , 118 , 151 , 0 ] , [ b_barracks , 97 , 133 , 2 ] , [ b_barracks , 117 , 143 , 4 ] , [ b_turret , 100 , 132 , 2 ] , [ b_turret , 130 , 159 , 4 ] , [ b_turret , 131 , 155 , 4 ] , [ b_turret , 90 , 133 , 2 ] , [ b_turret , 70 , 135 , 3 ] ] ;
3432: LD_ADDR_VAR 0 4
3436: PUSH
3437: LD_INT 1
3439: PUSH
3440: LD_INT 107
3442: PUSH
3443: LD_INT 149
3445: PUSH
3446: LD_INT 4
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 29
3457: PUSH
3458: LD_INT 115
3460: PUSH
3461: LD_INT 150
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 3
3475: PUSH
3476: LD_INT 101
3478: PUSH
3479: LD_INT 160
3481: PUSH
3482: LD_INT 0
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 24
3493: PUSH
3494: LD_INT 97
3496: PUSH
3497: LD_INT 156
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 21
3511: PUSH
3512: LD_INT 98
3514: PUSH
3515: LD_INT 160
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_INT 19
3529: PUSH
3530: LD_INT 101
3532: PUSH
3533: LD_INT 164
3535: PUSH
3536: LD_INT 0
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: PUSH
3545: LD_INT 17
3547: PUSH
3548: LD_INT 104
3550: PUSH
3551: LD_INT 163
3553: PUSH
3554: LD_INT 5
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 18
3565: PUSH
3566: LD_INT 105
3568: PUSH
3569: LD_INT 160
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 30
3583: PUSH
3584: LD_INT 128
3586: PUSH
3587: LD_INT 132
3589: PUSH
3590: LD_INT 0
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 8
3601: PUSH
3602: LD_INT 94
3604: PUSH
3605: LD_INT 142
3607: PUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 10
3613: PUSH
3614: LD_INT 14
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 26
3627: PUSH
3628: LD_INT 93
3630: PUSH
3631: LD_INT 137
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 26
3645: PUSH
3646: LD_INT 111
3648: PUSH
3649: LD_INT 157
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 26
3663: PUSH
3664: LD_INT 109
3666: PUSH
3667: LD_INT 158
3669: PUSH
3670: LD_INT 0
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PUSH
3679: LD_INT 26
3681: PUSH
3682: LD_INT 121
3684: PUSH
3685: LD_INT 150
3687: PUSH
3688: LD_INT 0
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 28
3699: PUSH
3700: LD_INT 118
3702: PUSH
3703: LD_INT 151
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 5
3717: PUSH
3718: LD_INT 97
3720: PUSH
3721: LD_INT 133
3723: PUSH
3724: LD_INT 2
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 5
3735: PUSH
3736: LD_INT 117
3738: PUSH
3739: LD_INT 143
3741: PUSH
3742: LD_INT 4
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 33
3753: PUSH
3754: LD_INT 100
3756: PUSH
3757: LD_INT 132
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 33
3771: PUSH
3772: LD_INT 130
3774: PUSH
3775: LD_INT 159
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 33
3789: PUSH
3790: LD_INT 131
3792: PUSH
3793: LD_INT 155
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 33
3807: PUSH
3808: LD_INT 90
3810: PUSH
3811: LD_INT 133
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 33
3825: PUSH
3826: LD_INT 70
3828: PUSH
3829: LD_INT 135
3831: PUSH
3832: LD_INT 3
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: ST_TO_ADDR
// uc_side := side ;
3865: LD_ADDR_OWVAR 20
3869: PUSH
3870: LD_VAR 0 6
3874: ST_TO_ADDR
// uc_nation := nation_russian ;
3875: LD_ADDR_OWVAR 21
3879: PUSH
3880: LD_INT 3
3882: ST_TO_ADDR
// for i in tmp do
3883: LD_ADDR_VAR 0 2
3887: PUSH
3888: LD_VAR 0 4
3892: PUSH
3893: FOR_IN
3894: IFFALSE 4032
// begin InitBc ;
3896: CALL_OW 21
// bc_type := i [ 1 ] ;
3900: LD_ADDR_OWVAR 42
3904: PUSH
3905: LD_VAR 0 2
3909: PUSH
3910: LD_INT 1
3912: ARRAY
3913: ST_TO_ADDR
// bc_level := 6 ;
3914: LD_ADDR_OWVAR 43
3918: PUSH
3919: LD_INT 6
3921: ST_TO_ADDR
// if i > 4 then
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 4
3929: GREATER
3930: IFFALSE 3960
// begin bc_kind1 := i [ 5 ] ;
3932: LD_ADDR_OWVAR 44
3936: PUSH
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 5
3944: ARRAY
3945: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
3946: LD_ADDR_OWVAR 45
3950: PUSH
3951: LD_VAR 0 2
3955: PUSH
3956: LD_INT 6
3958: ARRAY
3959: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3960: LD_ADDR_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 2
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 3
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 4
3990: ARRAY
3991: PPUSH
3992: CALL_OW 47
3996: ST_TO_ADDR
// if i [ 1 ] in [ b_bunker , b_turret ] then
3997: LD_VAR 0 2
4001: PUSH
4002: LD_INT 1
4004: ARRAY
4005: PUSH
4006: LD_INT 32
4008: PUSH
4009: LD_INT 33
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: IN
4016: IFFALSE 4030
// PlaceWeaponTurret ( b , ru_rocket_launcher ) ;
4018: LD_VAR 0 8
4022: PPUSH
4023: LD_INT 45
4025: PPUSH
4026: CALL_OW 431
// end ;
4030: GO 3893
4032: POP
4033: POP
// InitHC_All ( ) ;
4034: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_VAR 0 6
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 30
4057: PUSH
4058: LD_INT 5
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PPUSH
4069: CALL_OW 69
4073: ST_TO_ADDR
// for i in tmp do
4074: LD_ADDR_VAR 0 2
4078: PUSH
4079: LD_VAR 0 4
4083: PUSH
4084: FOR_IN
4085: IFFALSE 4212
// begin for j := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: DOUBLE
4093: LD_INT 1
4095: DEC
4096: ST_TO_ADDR
4097: LD_INT 2
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: LD_INT 4
4105: PUSH
4106: LD_INT 4
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: PUSH
4115: LD_OWVAR 67
4119: ARRAY
4120: PUSH
4121: FOR_TO
4122: IFFALSE 4208
// begin PrepareSoldier ( false , skill ) ;
4124: LD_INT 0
4126: PPUSH
4127: LD_VAR 0 7
4131: PPUSH
4132: CALL_OW 381
// un := CreateHuman ;
4136: LD_ADDR_VAR 0 5
4140: PUSH
4141: CALL_OW 44
4145: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4146: LD_ADDR_EXP 34
4150: PUSH
4151: LD_EXP 34
4155: PPUSH
4156: LD_VAR 0 5
4160: PPUSH
4161: CALL 53161 0 2
4165: ST_TO_ADDR
// if j mod 2 = 0 then
4166: LD_VAR 0 3
4170: PUSH
4171: LD_INT 2
4173: MOD
4174: PUSH
4175: LD_INT 0
4177: EQUAL
4178: IFFALSE 4192
// SetClass ( un , class_bazooker ) ;
4180: LD_VAR 0 5
4184: PPUSH
4185: LD_INT 9
4187: PPUSH
4188: CALL_OW 336
// PlaceHumanInUnit ( un , i ) ;
4192: LD_VAR 0 5
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: CALL_OW 52
// end ;
4206: GO 4121
4208: POP
4209: POP
// end ;
4210: GO 4084
4212: POP
4213: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
4214: LD_ADDR_VAR 0 4
4218: PUSH
4219: LD_INT 22
4221: PUSH
4222: LD_VAR 0 6
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 30
4233: PUSH
4234: LD_INT 1
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: ST_TO_ADDR
// for i in tmp do
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_VAR 0 4
4259: PUSH
4260: FOR_IN
4261: IFFALSE 4485
// begin for j := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
4263: LD_ADDR_VAR 0 3
4267: PUSH
4268: DOUBLE
4269: LD_INT 1
4271: DEC
4272: ST_TO_ADDR
4273: LD_INT 3
4275: PUSH
4276: LD_INT 3
4278: PUSH
4279: LD_INT 4
4281: PUSH
4282: LD_INT 4
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: PUSH
4297: FOR_TO
4298: IFFALSE 4358
// begin PrepareEngineer ( false , skill ) ;
4300: LD_INT 0
4302: PPUSH
4303: LD_VAR 0 7
4307: PPUSH
4308: CALL_OW 382
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 5
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4322: LD_ADDR_EXP 34
4326: PUSH
4327: LD_EXP 34
4331: PPUSH
4332: LD_VAR 0 5
4336: PPUSH
4337: CALL 53161 0 2
4341: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4342: LD_VAR 0 5
4346: PPUSH
4347: LD_VAR 0 2
4351: PPUSH
4352: CALL_OW 52
// end ;
4356: GO 4297
4358: POP
4359: POP
// SetResourceType ( GetBase ( i ) , mat_cans , [ 550 , 600 , 780 , 820 ] [ Difficulty ] ) ;
4360: LD_VAR 0 2
4364: PPUSH
4365: CALL_OW 274
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_INT 550
4375: PUSH
4376: LD_INT 600
4378: PUSH
4379: LD_INT 780
4381: PUSH
4382: LD_INT 820
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_OWVAR 67
4395: ARRAY
4396: PPUSH
4397: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , [ 160 , 160 , 210 , 240 ] [ Difficulty ] ) ;
4401: LD_VAR 0 2
4405: PPUSH
4406: CALL_OW 274
4410: PPUSH
4411: LD_INT 2
4413: PPUSH
4414: LD_INT 160
4416: PUSH
4417: LD_INT 160
4419: PUSH
4420: LD_INT 210
4422: PUSH
4423: LD_INT 240
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_OWVAR 67
4436: ARRAY
4437: PPUSH
4438: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , [ 60 , 60 , 70 , 80 ] [ Difficulty ] ) ;
4442: LD_VAR 0 2
4446: PPUSH
4447: CALL_OW 274
4451: PPUSH
4452: LD_INT 3
4454: PPUSH
4455: LD_INT 60
4457: PUSH
4458: LD_INT 60
4460: PUSH
4461: LD_INT 70
4463: PUSH
4464: LD_INT 80
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: PPUSH
4479: CALL_OW 277
// end ;
4483: GO 4260
4485: POP
4486: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
4487: LD_ADDR_VAR 0 4
4491: PUSH
4492: LD_INT 22
4494: PUSH
4495: LD_VAR 0 6
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 30
4506: PUSH
4507: LD_INT 3
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: ST_TO_ADDR
// for i in tmp do
4523: LD_ADDR_VAR 0 2
4527: PUSH
4528: LD_VAR 0 4
4532: PUSH
4533: FOR_IN
4534: IFFALSE 4629
// begin for j := 1 to 6 do
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: DOUBLE
4542: LD_INT 1
4544: DEC
4545: ST_TO_ADDR
4546: LD_INT 6
4548: PUSH
4549: FOR_TO
4550: IFFALSE 4625
// begin PrepareMechanic ( false , skill ) ;
4552: LD_INT 0
4554: PPUSH
4555: LD_VAR 0 7
4559: PPUSH
4560: CALL_OW 383
// hc_attr := [ 12 , 12 ] ;
4564: LD_ADDR_OWVAR 29
4568: PUSH
4569: LD_INT 12
4571: PUSH
4572: LD_INT 12
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: ST_TO_ADDR
// un := CreateHuman ;
4579: LD_ADDR_VAR 0 5
4583: PUSH
4584: CALL_OW 44
4588: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4589: LD_ADDR_EXP 34
4593: PUSH
4594: LD_EXP 34
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: CALL 53161 0 2
4608: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4609: LD_VAR 0 5
4613: PPUSH
4614: LD_VAR 0 2
4618: PPUSH
4619: CALL_OW 52
// end ;
4623: GO 4549
4625: POP
4626: POP
// end ;
4627: GO 4533
4629: POP
4630: POP
// InitHC_All ( ) ;
4631: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
4635: LD_ADDR_VAR 0 4
4639: PUSH
4640: LD_INT 22
4642: PUSH
4643: LD_VAR 0 6
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 8
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PPUSH
4666: CALL_OW 69
4670: ST_TO_ADDR
// for i in tmp do
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_VAR 0 4
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4762
// begin for j := 1 to 2 do
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: DOUBLE
4690: LD_INT 1
4692: DEC
4693: ST_TO_ADDR
4694: LD_INT 2
4696: PUSH
4697: FOR_TO
4698: IFFALSE 4758
// begin PrepareScientist ( false , skill ) ;
4700: LD_INT 0
4702: PPUSH
4703: LD_VAR 0 7
4707: PPUSH
4708: CALL_OW 384
// un := CreateHuman ;
4712: LD_ADDR_VAR 0 5
4716: PUSH
4717: CALL_OW 44
4721: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4722: LD_ADDR_EXP 34
4726: PUSH
4727: LD_EXP 34
4731: PPUSH
4732: LD_VAR 0 5
4736: PPUSH
4737: CALL 53161 0 2
4741: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4742: LD_VAR 0 5
4746: PPUSH
4747: LD_VAR 0 2
4751: PPUSH
4752: CALL_OW 52
// end ;
4756: GO 4697
4758: POP
4759: POP
// end ;
4760: GO 4681
4762: POP
4763: POP
// end ;
4764: LD_VAR 0 1
4768: RET
// function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
4769: LD_INT 0
4771: PPUSH
4772: PPUSH
4773: PPUSH
4774: PPUSH
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// result := [ ] ;
4781: LD_ADDR_VAR 0 3
4785: PUSH
4786: EMPTY
4787: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
4788: LD_ADDR_VAR 0 8
4792: PUSH
4793: LD_INT 7
4795: PUSH
4796: LD_INT 8
4798: PUSH
4799: LD_INT 9
4801: PUSH
4802: LD_INT 10
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_OWVAR 67
4815: ARRAY
4816: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
4817: LD_ADDR_VAR 0 9
4821: PUSH
4822: LD_INT 15
4824: PUSH
4825: LD_INT 17
4827: PUSH
4828: LD_INT 19
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_VAR 0 1
4840: ARRAY
4841: ST_TO_ADDR
// parking := [ ruGatPoint1Area , ruGatPoint2Area , ruGatPoint3Area ] [ spot ] ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_INT 16
4849: PUSH
4850: LD_INT 18
4852: PUSH
4853: LD_INT 20
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: LD_VAR 0 1
4865: ARRAY
4866: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
4867: LD_ADDR_VAR 0 11
4871: PUSH
4872: LD_INT 5
4874: PUSH
4875: LD_INT 0
4877: PUSH
4878: LD_INT 2
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: ARRAY
4891: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) then
4892: LD_VAR 0 9
4896: PPUSH
4897: LD_INT 2
4899: PUSH
4900: LD_INT 22
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 22
4912: PUSH
4913: LD_INT 3
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: IFFALSE 4990
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) do
4931: LD_ADDR_VAR 0 4
4935: PUSH
4936: LD_VAR 0 9
4940: PPUSH
4941: LD_INT 2
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: PPUSH
4969: CALL_OW 70
4973: PUSH
4974: FOR_IN
4975: IFFALSE 4988
// RemoveUnit ( i ) ;
4977: LD_VAR 0 4
4981: PPUSH
4982: CALL_OW 64
4986: GO 4974
4988: POP
4989: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
4990: LD_VAR 0 9
4994: PPUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 21
5000: PUSH
5001: LD_INT 1
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 70
5030: IFFALSE 5094
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: LD_VAR 0 9
5041: PPUSH
5042: LD_INT 3
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: LD_INT 22
5061: PUSH
5062: LD_INT 2
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: PUSH
5078: FOR_IN
5079: IFFALSE 5092
// KillUnit ( i ) ;
5081: LD_VAR 0 4
5085: PPUSH
5086: CALL_OW 66
5090: GO 5078
5092: POP
5093: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
5094: LD_VAR 0 9
5098: PPUSH
5099: LD_INT 21
5101: PUSH
5102: LD_INT 1
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5190
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
5129: LD_ADDR_VAR 0 4
5133: PUSH
5134: LD_VAR 0 9
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 22
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5188
// ComMoveXY ( i , 91 , 56 ) ;
5171: LD_VAR 0 4
5175: PPUSH
5176: LD_INT 91
5178: PPUSH
5179: LD_INT 56
5181: PPUSH
5182: CALL_OW 111
5186: GO 5168
5188: POP
5189: POP
// repeat wait ( 0 0$1 ) ;
5190: LD_INT 35
5192: PPUSH
5193: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5197: LD_VAR 0 9
5201: PPUSH
5202: LD_INT 50
5204: PUSH
5205: EMPTY
5206: LIST
5207: PPUSH
5208: CALL_OW 70
5212: NOT
5213: IFFALSE 5190
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] + strength do
5215: LD_ADDR_VAR 0 4
5219: PUSH
5220: DOUBLE
5221: LD_INT 1
5223: DEC
5224: ST_TO_ADDR
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 5
5233: PUSH
5234: LD_INT 6
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: PUSH
5243: LD_OWVAR 67
5247: ARRAY
5248: PUSH
5249: LD_VAR 0 2
5253: PLUS
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5577
// begin uc_side := 3 ;
5258: LD_ADDR_OWVAR 20
5262: PUSH
5263: LD_INT 3
5265: ST_TO_ADDR
// uc_nation := nation_russian ;
5266: LD_ADDR_OWVAR 21
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
5274: LD_ADDR_VAR 0 12
5278: PUSH
5279: LD_INT 1
5281: PUSH
5282: LD_INT 3
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 12
5307: ARRAY
5308: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
5309: LD_INT 22
5311: PUSH
5312: LD_INT 24
5314: PUSH
5315: LD_INT 23
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_VAR 0 4
5327: PUSH
5328: LD_INT 3
5330: MOD
5331: PUSH
5332: LD_INT 1
5334: PLUS
5335: ARRAY
5336: PPUSH
5337: LD_INT 3
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: LD_INT 1
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: CALL_OW 12
5357: ARRAY
5358: PPUSH
5359: LD_VAR 0 12
5363: PPUSH
5364: LD_INT 45
5366: PUSH
5367: LD_INT 46
5369: PUSH
5370: LD_INT 43
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: LD_VAR 0 4
5382: PUSH
5383: LD_INT 3
5385: MOD
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: ARRAY
5391: PPUSH
5392: LD_INT 100
5394: PPUSH
5395: CALL 20299 0 5
// veh := CreateVehicle ;
5399: LD_ADDR_VAR 0 7
5403: PUSH
5404: CALL_OW 45
5408: ST_TO_ADDR
// SetDir ( veh , dir ) ;
5409: LD_VAR 0 7
5413: PPUSH
5414: LD_VAR 0 11
5418: PPUSH
5419: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
5423: LD_VAR 0 7
5427: PPUSH
5428: LD_VAR 0 9
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: CALL_OW 49
// if control = control_manual then
5440: LD_VAR 0 12
5444: PUSH
5445: LD_INT 1
5447: EQUAL
5448: IFFALSE 5516
// begin uc_side := 3 ;
5450: LD_ADDR_OWVAR 20
5454: PUSH
5455: LD_INT 3
5457: ST_TO_ADDR
// uc_nation := nation_russian ;
5458: LD_ADDR_OWVAR 21
5462: PUSH
5463: LD_INT 3
5465: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5466: LD_INT 0
5468: PPUSH
5469: LD_VAR 0 8
5473: PPUSH
5474: CALL_OW 383
// un := CreateHuman ;
5478: LD_ADDR_VAR 0 6
5482: PUSH
5483: CALL_OW 44
5487: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5488: LD_VAR 0 6
5492: PPUSH
5493: LD_VAR 0 7
5497: PPUSH
5498: CALL_OW 52
// SetTag ( un , spot ) ;
5502: LD_VAR 0 6
5506: PPUSH
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 109
// end ; repeat ComMoveToArea ( veh , parking ) ;
5516: LD_VAR 0 7
5520: PPUSH
5521: LD_VAR 0 10
5525: PPUSH
5526: CALL_OW 113
// wait ( 0 0$3 ) ;
5530: LD_INT 105
5532: PPUSH
5533: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5537: LD_VAR 0 9
5541: PPUSH
5542: LD_INT 50
5544: PUSH
5545: EMPTY
5546: LIST
5547: PPUSH
5548: CALL_OW 70
5552: NOT
5553: IFFALSE 5516
// result := Join ( result , veh ) ;
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_VAR 0 3
5564: PPUSH
5565: LD_VAR 0 7
5569: PPUSH
5570: CALL 53161 0 2
5574: ST_TO_ADDR
// end ;
5575: GO 5255
5577: POP
5578: POP
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
5579: LD_ADDR_VAR 0 4
5583: PUSH
5584: DOUBLE
5585: LD_INT 1
5587: DEC
5588: ST_TO_ADDR
5589: LD_INT 2
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: LD_INT 3
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: PUSH
5607: LD_OWVAR 67
5611: ARRAY
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5784
// begin uc_side := 3 ;
5616: LD_ADDR_OWVAR 20
5620: PUSH
5621: LD_INT 3
5623: ST_TO_ADDR
// uc_nation := nation_russian ;
5624: LD_ADDR_OWVAR 21
5628: PUSH
5629: LD_INT 3
5631: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5632: LD_INT 0
5634: PPUSH
5635: LD_VAR 0 8
5639: PPUSH
5640: CALL_OW 381
// un := CreateHuman ;
5644: LD_ADDR_VAR 0 6
5648: PUSH
5649: CALL_OW 44
5653: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5654: LD_INT 30
5656: PUSH
5657: LD_INT 40
5659: PUSH
5660: LD_INT 50
5662: PUSH
5663: LD_INT 50
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_OWVAR 67
5676: ARRAY
5677: PPUSH
5678: CALL_OW 13
5682: IFFALSE 5696
// SetClass ( un , class_bazooker ) ;
5684: LD_VAR 0 6
5688: PPUSH
5689: LD_INT 9
5691: PPUSH
5692: CALL_OW 336
// SetDir ( un , dir ) ;
5696: LD_VAR 0 6
5700: PPUSH
5701: LD_VAR 0 11
5705: PPUSH
5706: CALL_OW 233
// SetTag ( un , spot ) ;
5710: LD_VAR 0 6
5714: PPUSH
5715: LD_VAR 0 1
5719: PPUSH
5720: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
5724: LD_VAR 0 6
5728: PPUSH
5729: LD_VAR 0 9
5733: PPUSH
5734: LD_INT 0
5736: PPUSH
5737: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
5741: LD_VAR 0 6
5745: PPUSH
5746: LD_VAR 0 10
5750: PPUSH
5751: CALL_OW 113
// wait ( 0 0$1 ) ;
5755: LD_INT 35
5757: PPUSH
5758: CALL_OW 67
// result := Join ( result , un ) ;
5762: LD_ADDR_VAR 0 3
5766: PUSH
5767: LD_VAR 0 3
5771: PPUSH
5772: LD_VAR 0 6
5776: PPUSH
5777: CALL 53161 0 2
5781: ST_TO_ADDR
// end ;
5782: GO 5613
5784: POP
5785: POP
// end ;
5786: LD_VAR 0 3
5790: RET
// function PrepareRussianExtraInfantry ; var i , un ; begin
5791: LD_INT 0
5793: PPUSH
5794: PPUSH
5795: PPUSH
// result := [ ] ;
5796: LD_ADDR_VAR 0 1
5800: PUSH
5801: EMPTY
5802: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty + 1 ] do
5803: LD_ADDR_VAR 0 2
5807: PUSH
5808: DOUBLE
5809: LD_INT 1
5811: DEC
5812: ST_TO_ADDR
5813: LD_INT 3
5815: PUSH
5816: LD_INT 3
5818: PUSH
5819: LD_INT 4
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: PUSH
5827: LD_OWVAR 67
5831: PUSH
5832: LD_INT 1
5834: PLUS
5835: ARRAY
5836: PUSH
5837: FOR_TO
5838: IFFALSE 5976
// begin uc_side := 3 ;
5840: LD_ADDR_OWVAR 20
5844: PUSH
5845: LD_INT 3
5847: ST_TO_ADDR
// uc_nation := nation_russian ;
5848: LD_ADDR_OWVAR 21
5852: PUSH
5853: LD_INT 3
5855: ST_TO_ADDR
// PrepareSoldier ( false , [ 7 , 8 , 9 ] [ Difficulty + 1 ] ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_INT 7
5861: PUSH
5862: LD_INT 8
5864: PUSH
5865: LD_INT 9
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: PUSH
5873: LD_OWVAR 67
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ARRAY
5882: PPUSH
5883: CALL_OW 381
// un := CreateHuman ;
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: CALL_OW 44
5896: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5897: LD_INT 30
5899: PUSH
5900: LD_INT 40
5902: PUSH
5903: LD_INT 50
5905: PUSH
5906: LD_INT 50
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: PUSH
5915: LD_OWVAR 67
5919: ARRAY
5920: PPUSH
5921: CALL_OW 13
5925: IFFALSE 5939
// SetClass ( un , class_bazooker ) ;
5927: LD_VAR 0 3
5931: PPUSH
5932: LD_INT 9
5934: PPUSH
5935: CALL_OW 336
// PlaceUnitArea ( un , extraSpawnAttackArea , false ) ;
5939: LD_VAR 0 3
5943: PPUSH
5944: LD_INT 25
5946: PPUSH
5947: LD_INT 0
5949: PPUSH
5950: CALL_OW 49
// result := Join ( result , un ) ;
5954: LD_ADDR_VAR 0 1
5958: PUSH
5959: LD_VAR 0 1
5963: PPUSH
5964: LD_VAR 0 3
5968: PPUSH
5969: CALL 53161 0 2
5973: ST_TO_ADDR
// end ;
5974: GO 5837
5976: POP
5977: POP
// end ;
5978: LD_VAR 0 1
5982: RET
// function SendBulldozer ; var un ; begin
5983: LD_INT 0
5985: PPUSH
5986: PPUSH
// uc_side := 3 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 3
5994: ST_TO_ADDR
// uc_nation := nation_russian ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 3
6002: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
6003: LD_INT 23
6005: PPUSH
6006: LD_INT 3
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: LD_INT 53
6014: PPUSH
6015: LD_INT 100
6017: PPUSH
6018: CALL 20299 0 5
// un := CreateVehicle ;
6022: LD_ADDR_VAR 0 2
6026: PUSH
6027: CALL_OW 45
6031: ST_TO_ADDR
// PlaceUnitXYD ( un , 7 , 8 , 1 , false ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_INT 7
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_INT 1
6045: PPUSH
6046: LD_INT 0
6048: PPUSH
6049: CALL 55301 0 5
// wait ( 0 0$1 ) ;
6053: LD_INT 35
6055: PPUSH
6056: CALL_OW 67
// CutTreeInArea ( un , cutTreeWArea ) ;
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_INT 24
6067: PPUSH
6068: CALL 11500 0 2
// end ;
6072: LD_VAR 0 1
6076: RET
// every 0 0$3 trigger wave >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
6077: LD_EXP 11
6081: PUSH
6082: LD_INT 4
6084: PUSH
6085: LD_INT 5
6087: PUSH
6088: LD_INT 6
6090: PUSH
6091: LD_INT 7
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: LD_OWVAR 67
6104: ARRAY
6105: GREATEREQUAL
6106: IFFALSE 6170
6108: GO 6110
6110: DISABLE
// begin ChangeSideFog ( 3 , 2 ) ;
6111: LD_INT 3
6113: PPUSH
6114: LD_INT 2
6116: PPUSH
6117: CALL_OW 343
// repeat wait ( 0 0$1 ) ;
6121: LD_INT 35
6123: PPUSH
6124: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 ;
6128: LD_INT 22
6130: PUSH
6131: LD_INT 6
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 21
6140: PUSH
6141: LD_INT 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PPUSH
6152: CALL_OW 69
6156: PUSH
6157: LD_INT 0
6159: EQUAL
6160: IFFALSE 6121
// ruDefeated := true ;
6162: LD_ADDR_EXP 10
6166: PUSH
6167: LD_INT 1
6169: ST_TO_ADDR
// end ;
6170: END
// every 6 6$20 + 4 4$00 trigger wave < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do var i , e , attackers , extraAttackers , spot , extraSpot , paths , enemy ;
6171: LD_EXP 11
6175: PUSH
6176: LD_INT 4
6178: PUSH
6179: LD_INT 5
6181: PUSH
6182: LD_INT 6
6184: PUSH
6185: LD_INT 7
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: LD_OWVAR 67
6198: ARRAY
6199: LESS
6200: IFFALSE 7303
6202: GO 6204
6204: DISABLE
6205: LD_INT 0
6207: PPUSH
6208: PPUSH
6209: PPUSH
6210: PPUSH
6211: PPUSH
6212: PPUSH
6213: PPUSH
6214: PPUSH
// begin enable ;
6215: ENABLE
// attackers := [ ] ;
6216: LD_ADDR_VAR 0 3
6220: PUSH
6221: EMPTY
6222: ST_TO_ADDR
// extraAttackers := [ ] ;
6223: LD_ADDR_VAR 0 4
6227: PUSH
6228: EMPTY
6229: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 87 , 141 ] , [ 80 , 120 ] , [ 66 , 95 ] , [ 51 , 69 ] , [ 36 , 40 ] , [ 47 , 31 ] , [ 60 , 28 ] ] , [ [ 21 , 17 ] , [ 35 , 30 ] , [ 49 , 31 ] ] ] ;
6230: LD_ADDR_VAR 0 7
6234: PUSH
6235: LD_INT 176
6237: PUSH
6238: LD_INT 152
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 157
6247: PUSH
6248: LD_INT 122
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 146
6257: PUSH
6258: LD_INT 89
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 125
6267: PUSH
6268: LD_INT 46
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 87
6283: PUSH
6284: LD_INT 141
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 80
6293: PUSH
6294: LD_INT 120
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 66
6303: PUSH
6304: LD_INT 95
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 51
6313: PUSH
6314: LD_INT 69
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 36
6323: PUSH
6324: LD_INT 40
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 47
6333: PUSH
6334: LD_INT 31
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 60
6343: PUSH
6344: LD_INT 28
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 21
6362: PUSH
6363: LD_INT 17
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 35
6372: PUSH
6373: LD_INT 30
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 49
6382: PUSH
6383: LD_INT 31
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: ST_TO_ADDR
// wave := Inc ( wave ) ;
6400: LD_ADDR_EXP 11
6404: PUSH
6405: LD_EXP 11
6409: PPUSH
6410: CALL 54522 0 1
6414: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
6415: LD_ADDR_VAR 0 5
6419: PUSH
6420: LD_INT 1
6422: PPUSH
6423: LD_INT 3
6425: PPUSH
6426: CALL_OW 12
6430: ST_TO_ADDR
// if wave mod 2 = 0 then
6431: LD_EXP 11
6435: PUSH
6436: LD_INT 2
6438: MOD
6439: PUSH
6440: LD_INT 0
6442: EQUAL
6443: IFFALSE 6460
// strength := Inc ( strength ) ;
6445: LD_ADDR_EXP 12
6449: PUSH
6450: LD_EXP 12
6454: PPUSH
6455: CALL 54522 0 1
6459: ST_TO_ADDR
// if Count ( ListEnvironmentArea ( cutTreeWArea ) ) then
6460: LD_INT 24
6462: PPUSH
6463: CALL_OW 353
6467: PPUSH
6468: CALL 17561 0 1
6472: IFFALSE 6478
// SendBulldozer ;
6474: CALL 5983 0 0
// attackers := PrepareRussianAttack ( spot , strength ) ;
6478: LD_ADDR_VAR 0 3
6482: PUSH
6483: LD_VAR 0 5
6487: PPUSH
6488: LD_EXP 12
6492: PPUSH
6493: CALL 4769 0 2
6497: ST_TO_ADDR
// if wave + [ 2 , 2 , 3 , 3 ] [ Difficulty ] >= [ 6 , 7 , 8 , 9 ] [ Difficulty ] then
6498: LD_EXP 11
6502: PUSH
6503: LD_INT 2
6505: PUSH
6506: LD_INT 2
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 3
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_OWVAR 67
6525: ARRAY
6526: PLUS
6527: PUSH
6528: LD_INT 6
6530: PUSH
6531: LD_INT 7
6533: PUSH
6534: LD_INT 8
6536: PUSH
6537: LD_INT 9
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_OWVAR 67
6550: ARRAY
6551: GREATEREQUAL
6552: IFFALSE 6620
// begin extraSpot := spot - 1 ;
6554: LD_ADDR_VAR 0 6
6558: PUSH
6559: LD_VAR 0 5
6563: PUSH
6564: LD_INT 1
6566: MINUS
6567: ST_TO_ADDR
// if extraSpot < 1 then
6568: LD_VAR 0 6
6572: PUSH
6573: LD_INT 1
6575: LESS
6576: IFFALSE 6586
// extraSpot := 3 ;
6578: LD_ADDR_VAR 0 6
6582: PUSH
6583: LD_INT 3
6585: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , strength ) ;
6586: LD_ADDR_VAR 0 4
6590: PUSH
6591: LD_VAR 0 6
6595: PPUSH
6596: LD_EXP 12
6600: PPUSH
6601: CALL 4769 0 2
6605: ST_TO_ADDR
// if Difficulty > 1 then
6606: LD_OWVAR 67
6610: PUSH
6611: LD_INT 1
6613: GREATER
6614: IFFALSE 6620
// PrepareRussianExtraInfantry ;
6616: CALL 5791 0 0
// end ; repeat wait ( 0 0$2 ) ;
6620: LD_INT 70
6622: PPUSH
6623: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
6627: LD_ADDR_VAR 0 8
6631: PUSH
6632: LD_INT 22
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: ST_TO_ADDR
// for i in attackers do
6647: LD_ADDR_VAR 0 1
6651: PUSH
6652: LD_VAR 0 3
6656: PUSH
6657: FOR_IN
6658: IFFALSE 6963
// begin if not IsOk ( i ) then
6660: LD_VAR 0 1
6664: PPUSH
6665: CALL_OW 302
6669: NOT
6670: IFFALSE 6690
// begin attackers := attackers diff i ;
6672: LD_ADDR_VAR 0 3
6676: PUSH
6677: LD_VAR 0 3
6681: PUSH
6682: LD_VAR 0 1
6686: DIFF
6687: ST_TO_ADDR
// continue ;
6688: GO 6657
// end ; if GetType ( i ) = unit_vehicle then
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 247
6699: PUSH
6700: LD_INT 2
6702: EQUAL
6703: IFFALSE 6727
// AgressiveMove ( i , paths [ spot ] ) else
6705: LD_VAR 0 1
6709: PPUSH
6710: LD_VAR 0 7
6714: PUSH
6715: LD_VAR 0 5
6719: ARRAY
6720: PPUSH
6721: CALL 55765 0 2
6725: GO 6961
// begin if GetClass ( i ) = class_bazooker then
6727: LD_VAR 0 1
6731: PPUSH
6732: CALL_OW 257
6736: PUSH
6737: LD_INT 9
6739: EQUAL
6740: IFFALSE 6937
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
6742: LD_VAR 0 1
6746: PPUSH
6747: LD_VAR 0 8
6751: PPUSH
6752: LD_VAR 0 1
6756: PPUSH
6757: CALL_OW 74
6761: PPUSH
6762: CALL_OW 296
6766: PUSH
6767: LD_INT 12
6769: GREATER
6770: IFFALSE 6798
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
6772: LD_VAR 0 1
6776: PPUSH
6777: LD_VAR 0 8
6781: PPUSH
6782: LD_VAR 0 1
6786: PPUSH
6787: CALL_OW 74
6791: PPUSH
6792: CALL 57233 0 2
6796: GO 6935
// begin e := NearestUnitToUnit ( enemy , i ) ;
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: LD_VAR 0 8
6807: PPUSH
6808: LD_VAR 0 1
6812: PPUSH
6813: CALL_OW 74
6817: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
6818: LD_INT 1
6820: PPUSH
6821: LD_INT 3
6823: PPUSH
6824: CALL_OW 12
6828: PUSH
6829: LD_INT 1
6831: DOUBLE
6832: EQUAL
6833: IFTRUE 6837
6835: GO 6854
6837: POP
// ComAttackUnit ( i , e ) ; 2 :
6838: LD_VAR 0 1
6842: PPUSH
6843: LD_VAR 0 2
6847: PPUSH
6848: CALL_OW 115
6852: GO 6935
6854: LD_INT 2
6856: DOUBLE
6857: EQUAL
6858: IFTRUE 6862
6860: GO 6894
6862: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
6863: LD_VAR 0 1
6867: PPUSH
6868: LD_VAR 0 2
6872: PPUSH
6873: CALL_OW 250
6877: PPUSH
6878: LD_VAR 0 2
6882: PPUSH
6883: CALL_OW 251
6887: PPUSH
6888: CALL_OW 153
6892: GO 6935
6894: LD_INT 3
6896: DOUBLE
6897: EQUAL
6898: IFTRUE 6902
6900: GO 6934
6902: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
6903: LD_VAR 0 1
6907: PPUSH
6908: LD_VAR 0 2
6912: PPUSH
6913: CALL_OW 250
6917: PPUSH
6918: LD_VAR 0 2
6922: PPUSH
6923: CALL_OW 251
6927: PPUSH
6928: CALL_OW 154
6932: GO 6935
6934: POP
// end ; end else
6935: GO 6961
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6937: LD_VAR 0 1
6941: PPUSH
6942: LD_VAR 0 8
6946: PPUSH
6947: LD_VAR 0 1
6951: PPUSH
6952: CALL_OW 74
6956: PPUSH
6957: CALL 57233 0 2
// end ; end ;
6961: GO 6657
6963: POP
6964: POP
// if extraAttackers then
6965: LD_VAR 0 4
6969: IFFALSE 7289
// begin for i in extraAttackers do
6971: LD_ADDR_VAR 0 1
6975: PUSH
6976: LD_VAR 0 4
6980: PUSH
6981: FOR_IN
6982: IFFALSE 7287
// begin if not IsOk ( i ) then
6984: LD_VAR 0 1
6988: PPUSH
6989: CALL_OW 302
6993: NOT
6994: IFFALSE 7014
// begin extraAttackers := extraAttackers diff i ;
6996: LD_ADDR_VAR 0 4
7000: PUSH
7001: LD_VAR 0 4
7005: PUSH
7006: LD_VAR 0 1
7010: DIFF
7011: ST_TO_ADDR
// continue ;
7012: GO 6981
// end ; if GetType ( i ) = unit_vehicle then
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL_OW 247
7023: PUSH
7024: LD_INT 2
7026: EQUAL
7027: IFFALSE 7051
// AgressiveMove ( i , paths [ extraSpot ] ) else
7029: LD_VAR 0 1
7033: PPUSH
7034: LD_VAR 0 7
7038: PUSH
7039: LD_VAR 0 6
7043: ARRAY
7044: PPUSH
7045: CALL 55765 0 2
7049: GO 7285
// begin if GetClass ( i ) = class_bazooker then
7051: LD_VAR 0 1
7055: PPUSH
7056: CALL_OW 257
7060: PUSH
7061: LD_INT 9
7063: EQUAL
7064: IFFALSE 7261
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
7066: LD_VAR 0 1
7070: PPUSH
7071: LD_VAR 0 8
7075: PPUSH
7076: LD_VAR 0 1
7080: PPUSH
7081: CALL_OW 74
7085: PPUSH
7086: CALL_OW 296
7090: PUSH
7091: LD_INT 12
7093: GREATER
7094: IFFALSE 7122
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
7096: LD_VAR 0 1
7100: PPUSH
7101: LD_VAR 0 8
7105: PPUSH
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 74
7115: PPUSH
7116: CALL 57233 0 2
7120: GO 7259
// begin e := NearestUnitToUnit ( enemy , i ) ;
7122: LD_ADDR_VAR 0 2
7126: PUSH
7127: LD_VAR 0 8
7131: PPUSH
7132: LD_VAR 0 1
7136: PPUSH
7137: CALL_OW 74
7141: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
7142: LD_INT 1
7144: PPUSH
7145: LD_INT 3
7147: PPUSH
7148: CALL_OW 12
7152: PUSH
7153: LD_INT 1
7155: DOUBLE
7156: EQUAL
7157: IFTRUE 7161
7159: GO 7178
7161: POP
// ComAttackUnit ( i , e ) ; 2 :
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_VAR 0 2
7171: PPUSH
7172: CALL_OW 115
7176: GO 7259
7178: LD_INT 2
7180: DOUBLE
7181: EQUAL
7182: IFTRUE 7186
7184: GO 7218
7186: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 250
7201: PPUSH
7202: LD_VAR 0 2
7206: PPUSH
7207: CALL_OW 251
7211: PPUSH
7212: CALL_OW 153
7216: GO 7259
7218: LD_INT 3
7220: DOUBLE
7221: EQUAL
7222: IFTRUE 7226
7224: GO 7258
7226: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
7227: LD_VAR 0 1
7231: PPUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: CALL_OW 250
7241: PPUSH
7242: LD_VAR 0 2
7246: PPUSH
7247: CALL_OW 251
7251: PPUSH
7252: CALL_OW 154
7256: GO 7259
7258: POP
// end ; end else
7259: GO 7285
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7261: LD_VAR 0 1
7265: PPUSH
7266: LD_VAR 0 8
7270: PPUSH
7271: LD_VAR 0 1
7275: PPUSH
7276: CALL_OW 74
7280: PPUSH
7281: CALL 57233 0 2
// end ; end ;
7285: GO 6981
7287: POP
7288: POP
// end ; until not attackers and not extraAttackers ;
7289: LD_VAR 0 3
7293: NOT
7294: PUSH
7295: LD_VAR 0 4
7299: NOT
7300: AND
7301: IFFALSE 6620
// end ;
7303: PPOPN 8
7305: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] ] ) do var i , tmp , lab , eng , tag , un , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , ruBase , fac ;
7306: LD_INT 22
7308: PUSH
7309: LD_INT 6
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 50
7318: PUSH
7319: EMPTY
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 69
7330: IFFALSE 9019
7332: GO 7334
7334: DISABLE
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
7346: PPUSH
7347: PPUSH
7348: PPUSH
7349: PPUSH
7350: PPUSH
7351: PPUSH
// begin enable ;
7352: ENABLE
// ruBase := FilterUnitsInARea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_warehouse ] , [ f_ok ] ] ) ;
7353: LD_ADDR_VAR 0 14
7357: PUSH
7358: LD_INT 26
7360: PPUSH
7361: LD_INT 22
7363: PUSH
7364: LD_INT 6
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 30
7373: PUSH
7374: LD_INT 1
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: LD_INT 50
7383: PUSH
7384: EMPTY
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 70
7396: ST_TO_ADDR
// if ruBase then
7397: LD_VAR 0 14
7401: IFFALSE 7417
// ruBase := ruBase [ 1 ] ;
7403: LD_ADDR_VAR 0 14
7407: PUSH
7408: LD_VAR 0 14
7412: PUSH
7413: LD_INT 1
7415: ARRAY
7416: ST_TO_ADDR
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7417: LD_ADDR_VAR 0 15
7421: PUSH
7422: LD_INT 26
7424: PPUSH
7425: LD_INT 22
7427: PUSH
7428: LD_INT 6
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 30
7437: PUSH
7438: LD_INT 3
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 50
7447: PUSH
7448: EMPTY
7449: LIST
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 70
7460: ST_TO_ADDR
// if ruConstructList and fac then
7461: LD_EXP 35
7465: PUSH
7466: LD_VAR 0 15
7470: AND
7471: IFFALSE 7624
// if BuildingStatus ( fac [ 1 ] ) = bs_idle and CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
7473: LD_VAR 0 15
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: CALL_OW 461
7486: PUSH
7487: LD_INT 2
7489: EQUAL
7490: PUSH
7491: LD_VAR 0 15
7495: PUSH
7496: LD_INT 1
7498: ARRAY
7499: PPUSH
7500: LD_EXP 35
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: ARRAY
7512: PPUSH
7513: LD_EXP 35
7517: PUSH
7518: LD_INT 1
7520: ARRAY
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PPUSH
7526: LD_EXP 35
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: PUSH
7535: LD_INT 3
7537: ARRAY
7538: PPUSH
7539: LD_EXP 35
7543: PUSH
7544: LD_INT 1
7546: ARRAY
7547: PUSH
7548: LD_INT 4
7550: ARRAY
7551: PPUSH
7552: CALL_OW 448
7556: AND
7557: IFFALSE 7624
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
7559: LD_VAR 0 15
7563: PUSH
7564: LD_INT 1
7566: ARRAY
7567: PPUSH
7568: LD_EXP 35
7572: PUSH
7573: LD_INT 1
7575: ARRAY
7576: PUSH
7577: LD_INT 1
7579: ARRAY
7580: PPUSH
7581: LD_EXP 35
7585: PUSH
7586: LD_INT 1
7588: ARRAY
7589: PUSH
7590: LD_INT 2
7592: ARRAY
7593: PPUSH
7594: LD_EXP 35
7598: PUSH
7599: LD_INT 1
7601: ARRAY
7602: PUSH
7603: LD_INT 3
7605: ARRAY
7606: PPUSH
7607: LD_EXP 35
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PUSH
7616: LD_INT 4
7618: ARRAY
7619: PPUSH
7620: CALL_OW 125
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: LD_INT 26
7631: PPUSH
7632: LD_INT 21
7634: PUSH
7635: LD_INT 3
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 3
7644: PUSH
7645: LD_INT 24
7647: PUSH
7648: LD_INT 1000
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PPUSH
7663: CALL_OW 70
7667: ST_TO_ADDR
// cr := GetListOfCratesInArea ( crates6Area ) ;
7668: LD_ADDR_VAR 0 8
7672: PUSH
7673: LD_INT 14
7675: PPUSH
7676: CALL_OW 435
7680: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7681: LD_ADDR_VAR 0 9
7685: PUSH
7686: LD_EXP 34
7690: PPUSH
7691: LD_INT 25
7693: PUSH
7694: LD_INT 4
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 50
7703: PUSH
7704: EMPTY
7705: LIST
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PPUSH
7711: CALL_OW 72
7715: ST_TO_ADDR
// if sci then
7716: LD_VAR 0 9
7720: IFFALSE 7947
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
7722: LD_ADDR_VAR 0 11
7726: PUSH
7727: LD_EXP 34
7731: PPUSH
7732: LD_INT 95
7734: PUSH
7735: LD_INT 26
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 120
7744: PUSH
7745: LD_INT 3
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PPUSH
7756: CALL_OW 72
7760: ST_TO_ADDR
// lab := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7761: LD_ADDR_VAR 0 3
7765: PUSH
7766: LD_EXP 34
7770: PPUSH
7771: LD_INT 95
7773: PUSH
7774: LD_INT 26
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 2
7783: PUSH
7784: LD_INT 30
7786: PUSH
7787: LD_INT 6
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 30
7796: PUSH
7797: LD_INT 7
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 30
7806: PUSH
7807: LD_INT 8
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 72
7828: ST_TO_ADDR
// if hurtUnits then
7829: LD_VAR 0 11
7833: IFFALSE 7894
// begin for i in sci do
7835: LD_ADDR_VAR 0 1
7839: PUSH
7840: LD_VAR 0 9
7844: PUSH
7845: FOR_IN
7846: IFFALSE 7890
// if IsInUnit ( i ) then
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 310
7857: IFFALSE 7870
// ComExitBuilding ( i ) else
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 122
7868: GO 7888
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7870: LD_VAR 0 1
7874: PPUSH
7875: LD_VAR 0 11
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PPUSH
7884: CALL_OW 128
7888: GO 7845
7890: POP
7891: POP
// end else
7892: GO 7947
// if lab then
7894: LD_VAR 0 3
7898: IFFALSE 7947
// begin for i in sci do
7900: LD_ADDR_VAR 0 1
7904: PUSH
7905: LD_VAR 0 9
7909: PUSH
7910: FOR_IN
7911: IFFALSE 7945
// if not IsInUnit ( i ) then
7913: LD_VAR 0 1
7917: PPUSH
7918: CALL_OW 310
7922: NOT
7923: IFFALSE 7943
// ComEnterUnit ( i , lab [ 1 ] ) ;
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_VAR 0 3
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PPUSH
7939: CALL_OW 120
7943: GO 7910
7945: POP
7946: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
7947: LD_ADDR_VAR 0 4
7951: PUSH
7952: LD_EXP 34
7956: PPUSH
7957: LD_INT 25
7959: PUSH
7960: LD_INT 2
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PPUSH
7967: CALL_OW 72
7971: ST_TO_ADDR
// if eng then
7972: LD_VAR 0 4
7976: IFFALSE 8416
// begin for i in eng do
7978: LD_ADDR_VAR 0 1
7982: PUSH
7983: LD_VAR 0 4
7987: PUSH
7988: FOR_IN
7989: IFFALSE 8414
// begin tag := GetTag ( i ) ;
7991: LD_ADDR_VAR 0 5
7995: PUSH
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 110
8005: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 256
8015: PUSH
8016: LD_INT 800
8018: LESS
8019: PUSH
8020: LD_VAR 0 5
8024: PUSH
8025: LD_INT 3
8027: NONEQUAL
8028: AND
8029: IFFALSE 8067
// begin SetTag ( i , tHeal ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 3
8038: PPUSH
8039: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8043: LD_VAR 0 1
8047: PPUSH
8048: LD_INT 97
8050: PPUSH
8051: LD_INT 139
8053: PPUSH
8054: CALL_OW 111
// AddComHold ( i ) ;
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8067: LD_VAR 0 5
8071: PUSH
8072: LD_INT 3
8074: EQUAL
8075: PUSH
8076: LD_VAR 0 1
8080: PPUSH
8081: CALL_OW 256
8085: PUSH
8086: LD_INT 1000
8088: EQUAL
8089: AND
8090: IFFALSE 8104
// SetTag ( i , 0 ) ;
8092: LD_VAR 0 1
8096: PPUSH
8097: LD_INT 0
8099: PPUSH
8100: CALL_OW 109
// if not tag then
8104: LD_VAR 0 5
8108: NOT
8109: IFFALSE 8203
// begin if cr or tmp then
8111: LD_VAR 0 8
8115: PUSH
8116: LD_VAR 0 2
8120: OR
8121: IFFALSE 8177
// begin if IsInUnit ( i ) then
8123: LD_VAR 0 1
8127: PPUSH
8128: CALL_OW 310
8132: IFFALSE 8143
// ComExitBuilding ( i ) ;
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 122
// if tmp then
8143: LD_VAR 0 2
8147: IFFALSE 8163
// SetTag ( i , tRepair ) else
8149: LD_VAR 0 1
8153: PPUSH
8154: LD_INT 1
8156: PPUSH
8157: CALL_OW 109
8161: GO 8175
// SetTag ( i , tCrates ) ;
8163: LD_VAR 0 1
8167: PPUSH
8168: LD_INT 2
8170: PPUSH
8171: CALL_OW 109
// end else
8175: GO 8203
// if not IsInUnit ( i ) then
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 310
8186: NOT
8187: IFFALSE 8203
// ComEnterUnit ( i , ruBase ) ;
8189: LD_VAR 0 1
8193: PPUSH
8194: LD_VAR 0 14
8198: PPUSH
8199: CALL_OW 120
// end ; if tag = tRepair then
8203: LD_VAR 0 5
8207: PUSH
8208: LD_INT 1
8210: EQUAL
8211: IFFALSE 8291
// begin if not tmp then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8234
// begin SetTag ( i , 0 ) ;
8220: LD_VAR 0 1
8224: PPUSH
8225: LD_INT 0
8227: PPUSH
8228: CALL_OW 109
// continue ;
8232: GO 7988
// end ; if not HasTask ( i ) then
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL_OW 314
8243: NOT
8244: IFFALSE 8264
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8246: LD_VAR 0 1
8250: PPUSH
8251: LD_VAR 0 2
8255: PUSH
8256: LD_INT 1
8258: ARRAY
8259: PPUSH
8260: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
8264: LD_VAR 0 1
8268: PPUSH
8269: LD_INT 26
8271: PPUSH
8272: CALL_OW 308
8276: NOT
8277: IFFALSE 8291
// ComMoveToArea ( i , ruBaseArea ) ;
8279: LD_VAR 0 1
8283: PPUSH
8284: LD_INT 26
8286: PPUSH
8287: CALL_OW 113
// end ; if tag = tCrates then
8291: LD_VAR 0 5
8295: PUSH
8296: LD_INT 2
8298: EQUAL
8299: IFFALSE 8412
// begin if not cr then
8301: LD_VAR 0 8
8305: NOT
8306: IFFALSE 8322
// begin SetTag ( i , 0 ) ;
8308: LD_VAR 0 1
8312: PPUSH
8313: LD_INT 0
8315: PPUSH
8316: CALL_OW 109
// continue ;
8320: GO 7988
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8322: LD_VAR 0 1
8326: PPUSH
8327: CALL_OW 314
8331: NOT
8332: PUSH
8333: LD_INT 81
8335: PUSH
8336: LD_INT 6
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 92
8345: PUSH
8346: LD_VAR 0 8
8350: PUSH
8351: LD_INT 1
8353: ARRAY
8354: PUSH
8355: LD_VAR 0 8
8359: PUSH
8360: LD_INT 2
8362: ARRAY
8363: PUSH
8364: LD_INT 12
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PPUSH
8377: CALL_OW 69
8381: NOT
8382: AND
8383: IFFALSE 8412
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8385: LD_VAR 0 1
8389: PPUSH
8390: LD_VAR 0 8
8394: PUSH
8395: LD_INT 1
8397: ARRAY
8398: PPUSH
8399: LD_VAR 0 8
8403: PUSH
8404: LD_INT 2
8406: ARRAY
8407: PPUSH
8408: CALL_OW 117
// end ; end ;
8412: GO 7988
8414: POP
8415: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8416: LD_ADDR_VAR 0 10
8420: PUSH
8421: LD_EXP 34
8425: PPUSH
8426: LD_INT 2
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 1
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: LD_INT 25
8441: PUSH
8442: LD_INT 9
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 50
8456: PUSH
8457: EMPTY
8458: LIST
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PPUSH
8464: CALL_OW 72
8468: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
8469: LD_ADDR_VAR 0 12
8473: PUSH
8474: LD_INT 26
8476: PPUSH
8477: LD_INT 81
8479: PUSH
8480: LD_INT 6
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 70
8491: ST_TO_ADDR
// if sol then
8492: LD_VAR 0 10
8496: IFFALSE 9019
// begin if enemyInBase then
8498: LD_VAR 0 12
8502: IFFALSE 8721
// begin for i in sol do
8504: LD_ADDR_VAR 0 1
8508: PUSH
8509: LD_VAR 0 10
8513: PUSH
8514: FOR_IN
8515: IFFALSE 8717
// begin tw := IsInUnit ( i ) ;
8517: LD_ADDR_VAR 0 7
8521: PUSH
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 310
8531: ST_TO_ADDR
// if tw then
8532: LD_VAR 0 7
8536: IFFALSE 8626
// begin if not tw in FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8538: LD_VAR 0 7
8542: PUSH
8543: LD_INT 22
8545: PUSH
8546: LD_INT 6
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 101
8555: PUSH
8556: LD_INT 2
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: LD_INT 30
8568: PUSH
8569: LD_INT 5
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 30
8578: PUSH
8579: LD_INT 32
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 30
8588: PUSH
8589: LD_INT 31
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: PPUSH
8607: CALL_OW 69
8611: IN
8612: NOT
8613: IFFALSE 8624
// ComExitBuilding ( i ) ;
8615: LD_VAR 0 1
8619: PPUSH
8620: CALL_OW 122
// end else
8624: GO 8715
// begin un := NearestUnitToUnit ( enemyInBase , i ) ;
8626: LD_ADDR_VAR 0 6
8630: PUSH
8631: LD_VAR 0 12
8635: PPUSH
8636: LD_VAR 0 1
8640: PPUSH
8641: CALL_OW 74
8645: ST_TO_ADDR
// if GetClass ( i ) = class_bazooker and Prob ( 30 ) then
8646: LD_VAR 0 1
8650: PPUSH
8651: CALL_OW 257
8655: PUSH
8656: LD_INT 9
8658: EQUAL
8659: PUSH
8660: LD_INT 30
8662: PPUSH
8663: CALL_OW 13
8667: AND
8668: IFFALSE 8701
// ComTimeShift ( i , GetX ( un ) , GetY ( un ) ) else
8670: LD_VAR 0 1
8674: PPUSH
8675: LD_VAR 0 6
8679: PPUSH
8680: CALL_OW 250
8684: PPUSH
8685: LD_VAR 0 6
8689: PPUSH
8690: CALL_OW 251
8694: PPUSH
8695: CALL_OW 154
8699: GO 8715
// ComAttackUnit ( i , un ) ;
8701: LD_VAR 0 1
8705: PPUSH
8706: LD_VAR 0 6
8710: PPUSH
8711: CALL_OW 115
// end ; end ;
8715: GO 8514
8717: POP
8718: POP
// end else
8719: GO 9019
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8721: LD_ADDR_VAR 0 13
8725: PUSH
8726: LD_INT 26
8728: PPUSH
8729: LD_INT 3
8731: PUSH
8732: LD_INT 62
8734: PUSH
8735: EMPTY
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PUSH
8742: LD_INT 2
8744: PUSH
8745: LD_INT 30
8747: PUSH
8748: LD_INT 32
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 30
8757: PUSH
8758: LD_INT 4
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 30
8767: PUSH
8768: LD_INT 31
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 70
8789: ST_TO_ADDR
// if empty then
8790: LD_VAR 0 13
8794: IFFALSE 8811
// empty := ReverseArray ( empty ) ;
8796: LD_ADDR_VAR 0 13
8800: PUSH
8801: LD_VAR 0 13
8805: PPUSH
8806: CALL 48437 0 1
8810: ST_TO_ADDR
// for i in sol do
8811: LD_ADDR_VAR 0 1
8815: PUSH
8816: LD_VAR 0 10
8820: PUSH
8821: FOR_IN
8822: IFFALSE 9017
// begin tag := GetTag ( i ) ;
8824: LD_ADDR_VAR 0 5
8828: PUSH
8829: LD_VAR 0 1
8833: PPUSH
8834: CALL_OW 110
8838: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8839: LD_VAR 0 1
8843: PPUSH
8844: CALL_OW 256
8848: PUSH
8849: LD_INT 1000
8851: LESS
8852: PUSH
8853: LD_VAR 0 5
8857: PUSH
8858: LD_INT 3
8860: NONEQUAL
8861: AND
8862: IFFALSE 8902
// begin SetTag ( i , tHeal ) ;
8864: LD_VAR 0 1
8868: PPUSH
8869: LD_INT 3
8871: PPUSH
8872: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8876: LD_VAR 0 1
8880: PPUSH
8881: LD_INT 97
8883: PPUSH
8884: LD_INT 139
8886: PPUSH
8887: CALL_OW 111
// AddComHold ( i ) ;
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 200
// continue ;
8900: GO 8821
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 256
8911: PUSH
8912: LD_INT 1000
8914: EQUAL
8915: PUSH
8916: LD_VAR 0 5
8920: PUSH
8921: LD_INT 3
8923: EQUAL
8924: AND
8925: IFFALSE 8941
// begin SetTag ( i , 0 ) ;
8927: LD_VAR 0 1
8931: PPUSH
8932: LD_INT 0
8934: PPUSH
8935: CALL_OW 109
// continue ;
8939: GO 8821
// end ; if HasTask ( i ) then
8941: LD_VAR 0 1
8945: PPUSH
8946: CALL_OW 314
8950: IFFALSE 8954
// continue ;
8952: GO 8821
// if not IsInUnit ( i ) and not tag and empty then
8954: LD_VAR 0 1
8958: PPUSH
8959: CALL_OW 310
8963: NOT
8964: PUSH
8965: LD_VAR 0 5
8969: NOT
8970: AND
8971: PUSH
8972: LD_VAR 0 13
8976: AND
8977: IFFALSE 9015
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8979: LD_VAR 0 1
8983: PPUSH
8984: LD_VAR 0 13
8988: PUSH
8989: LD_INT 1
8991: ARRAY
8992: PPUSH
8993: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
8997: LD_ADDR_VAR 0 13
9001: PUSH
9002: LD_VAR 0 13
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: CALL_OW 3
9014: ST_TO_ADDR
// end ; end ;
9015: GO 8821
9017: POP
9018: POP
// end ; end ; end ;
9019: PPOPN 15
9021: END
// every 0 0$1 trigger ruTanks do var i , mech , enemy ;
9022: LD_EXP 36
9026: IFFALSE 9602
9028: GO 9030
9030: DISABLE
9031: LD_INT 0
9033: PPUSH
9034: PPUSH
9035: PPUSH
// begin enable ;
9036: ENABLE
// if not ruTanks then
9037: LD_EXP 36
9041: NOT
9042: IFFALSE 9046
// exit ;
9044: GO 9602
// for i in ruTanks do
9046: LD_ADDR_VAR 0 1
9050: PUSH
9051: LD_EXP 36
9055: PUSH
9056: FOR_IN
9057: IFFALSE 9600
// begin if not IsOk ( i ) or GetSide ( i ) <> 6 then
9059: LD_VAR 0 1
9063: PPUSH
9064: CALL_OW 302
9068: NOT
9069: PUSH
9070: LD_VAR 0 1
9074: PPUSH
9075: CALL_OW 255
9079: PUSH
9080: LD_INT 6
9082: NONEQUAL
9083: OR
9084: IFFALSE 9104
// begin ruTanks := ruTanks diff i ;
9086: LD_ADDR_EXP 36
9090: PUSH
9091: LD_EXP 36
9095: PUSH
9096: LD_VAR 0 1
9100: DIFF
9101: ST_TO_ADDR
// continue ;
9102: GO 9056
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 110
9113: NOT
9114: PUSH
9115: LD_VAR 0 1
9119: PPUSH
9120: CALL_OW 110
9124: PUSH
9125: LD_INT 0
9127: EQUAL
9128: OR
9129: IFFALSE 9259
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9131: LD_VAR 0 1
9135: PPUSH
9136: CALL_OW 261
9140: PUSH
9141: LD_INT 50
9143: LESS
9144: PUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 262
9154: PUSH
9155: LD_INT 1
9157: EQUAL
9158: AND
9159: IFFALSE 9218
// begin ComMoveXY ( i , 103 , 149 ) ;
9161: LD_VAR 0 1
9165: PPUSH
9166: LD_INT 103
9168: PPUSH
9169: LD_INT 149
9171: PPUSH
9172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9176: LD_INT 35
9178: PPUSH
9179: CALL_OW 67
// until GetDistUnitXY ( i , 103 , 149 ) < 4 ;
9183: LD_VAR 0 1
9187: PPUSH
9188: LD_INT 103
9190: PPUSH
9191: LD_INT 149
9193: PPUSH
9194: CALL_OW 297
9198: PUSH
9199: LD_INT 4
9201: LESS
9202: IFFALSE 9176
// SetFuel ( i , 100 ) ;
9204: LD_VAR 0 1
9208: PPUSH
9209: LD_INT 100
9211: PPUSH
9212: CALL_OW 240
// end else
9216: GO 9259
// if not IsInArea ( i , ruParkingArea ) then
9218: LD_VAR 0 1
9222: PPUSH
9223: LD_INT 27
9225: PPUSH
9226: CALL_OW 308
9230: NOT
9231: IFFALSE 9247
// ComMoveToArea ( i , ruParkingArea ) else
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 27
9240: PPUSH
9241: CALL_OW 113
9245: GO 9259
// SetTag ( i , tParking ) ;
9247: LD_VAR 0 1
9251: PPUSH
9252: LD_INT 11
9254: PPUSH
9255: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9259: LD_VAR 0 1
9263: PPUSH
9264: CALL_OW 110
9268: PUSH
9269: LD_INT 11
9271: EQUAL
9272: IFFALSE 9402
// begin if GetLives ( i ) < 650 then
9274: LD_VAR 0 1
9278: PPUSH
9279: CALL_OW 256
9283: PUSH
9284: LD_INT 650
9286: LESS
9287: IFFALSE 9379
// begin if not IsDrivenBy ( i ) then
9289: LD_VAR 0 1
9293: PPUSH
9294: CALL_OW 311
9298: NOT
9299: IFFALSE 9303
// continue ;
9301: GO 9056
// mech := IsDrivenBy ( i ) ;
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: LD_VAR 0 1
9312: PPUSH
9313: CALL_OW 311
9317: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9318: LD_VAR 0 2
9322: PPUSH
9323: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9327: LD_VAR 0 2
9331: PPUSH
9332: LD_VAR 0 1
9336: PPUSH
9337: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9341: LD_INT 35
9343: PPUSH
9344: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9348: LD_VAR 0 1
9352: PPUSH
9353: CALL_OW 256
9357: PUSH
9358: LD_INT 1000
9360: EQUAL
9361: IFFALSE 9341
// ComEnterUnit ( mech , i ) ;
9363: LD_VAR 0 2
9367: PPUSH
9368: LD_VAR 0 1
9372: PPUSH
9373: CALL_OW 120
// end else
9377: GO 9402
// if IsDrivenBy ( i ) then
9379: LD_VAR 0 1
9383: PPUSH
9384: CALL_OW 311
9388: IFFALSE 9402
// SetTag ( i , tAttack ) ;
9390: LD_VAR 0 1
9394: PPUSH
9395: LD_INT 12
9397: PPUSH
9398: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9402: LD_VAR 0 1
9406: PPUSH
9407: CALL_OW 110
9411: PUSH
9412: LD_INT 12
9414: EQUAL
9415: IFFALSE 9598
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
9417: LD_ADDR_VAR 0 3
9421: PUSH
9422: LD_INT 26
9424: PPUSH
9425: LD_INT 81
9427: PUSH
9428: LD_INT 6
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 70
9439: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9440: LD_VAR 0 1
9444: PPUSH
9445: CALL_OW 256
9449: PUSH
9450: LD_INT 650
9452: LESS
9453: IFFALSE 9478
// begin ComStop ( i ) ;
9455: LD_VAR 0 1
9459: PPUSH
9460: CALL_OW 141
// SetTag ( i , 0 ) ;
9464: LD_VAR 0 1
9468: PPUSH
9469: LD_INT 0
9471: PPUSH
9472: CALL_OW 109
// continue ;
9476: GO 9056
// end ; if enemy then
9478: LD_VAR 0 3
9482: IFFALSE 9522
// begin if not HasTask ( i ) then
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 314
9493: NOT
9494: IFFALSE 9520
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9496: LD_VAR 0 1
9500: PPUSH
9501: LD_VAR 0 3
9505: PPUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 74
9515: PPUSH
9516: CALL 57233 0 2
// end else
9520: GO 9598
// if ruTanks > 1 then
9522: LD_EXP 36
9526: PUSH
9527: LD_INT 1
9529: GREATER
9530: IFFALSE 9598
// AgressiveMove ( i , [ [ 78 , 112 ] , [ 104 , 106 ] , [ 130 , 107 ] , [ 143 , 83 ] , [ 120 , 35 ] ] ) ;
9532: LD_VAR 0 1
9536: PPUSH
9537: LD_INT 78
9539: PUSH
9540: LD_INT 112
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 104
9549: PUSH
9550: LD_INT 106
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 130
9559: PUSH
9560: LD_INT 107
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 143
9569: PUSH
9570: LD_INT 83
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 120
9579: PUSH
9580: LD_INT 35
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PPUSH
9594: CALL 55765 0 2
// end ; end ;
9598: GO 9056
9600: POP
9601: POP
// end ;
9602: PPOPN 3
9604: END
// every 0 0$1 trigger InBattle ( 6 ) or playerInBase do
9605: LD_INT 6
9607: PPUSH
9608: CALL_OW 463
9612: PUSH
9613: LD_EXP 5
9617: OR
9618: IFFALSE 9836
9620: GO 9622
9622: DISABLE
// begin wait ( 0 0$10 ) ;
9623: LD_INT 350
9625: PPUSH
9626: CALL_OW 67
// if playerInBase then
9630: LD_EXP 5
9634: IFFALSE 9643
// wait ( 3 3$00 ) ;
9636: LD_INT 6300
9638: PPUSH
9639: CALL_OW 67
// ruConstructList := [ [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] ] ;
9643: LD_ADDR_EXP 35
9647: PUSH
9648: LD_INT 21
9650: PUSH
9651: LD_INT 3
9653: PUSH
9654: LD_INT 1
9656: PUSH
9657: LD_INT 45
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 21
9668: PUSH
9669: LD_INT 3
9671: PUSH
9672: LD_INT 1
9674: PUSH
9675: LD_INT 45
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 3
9689: PUSH
9690: LD_INT 1
9692: PUSH
9693: LD_INT 45
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: ST_TO_ADDR
// if Difficulty > 1 then
9707: LD_OWVAR 67
9711: PUSH
9712: LD_INT 1
9714: GREATER
9715: IFFALSE 9750
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gatling_gun ] ) ;
9717: LD_ADDR_EXP 35
9721: PUSH
9722: LD_EXP 35
9726: PPUSH
9727: LD_INT 21
9729: PUSH
9730: LD_INT 3
9732: PUSH
9733: LD_INT 1
9735: PUSH
9736: LD_INT 43
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL 53161 0 2
9749: ST_TO_ADDR
// if Difficulty > 2 then
9750: LD_OWVAR 67
9754: PUSH
9755: LD_INT 2
9757: GREATER
9758: IFFALSE 9793
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9760: LD_ADDR_EXP 35
9764: PUSH
9765: LD_EXP 35
9769: PPUSH
9770: LD_INT 21
9772: PUSH
9773: LD_INT 3
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: LD_INT 44
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PPUSH
9788: CALL 53161 0 2
9792: ST_TO_ADDR
// if Difficulty > 3 then
9793: LD_OWVAR 67
9797: PUSH
9798: LD_INT 3
9800: GREATER
9801: IFFALSE 9836
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9803: LD_ADDR_EXP 35
9807: PUSH
9808: LD_EXP 35
9812: PPUSH
9813: LD_INT 21
9815: PUSH
9816: LD_INT 3
9818: PUSH
9819: LD_INT 1
9821: PUSH
9822: LD_INT 44
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: PPUSH
9831: CALL 53161 0 2
9835: ST_TO_ADDR
// end ; end_of_file
9836: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
9837: LD_INT 0
9839: PPUSH
9840: PPUSH
9841: PPUSH
9842: PPUSH
9843: PPUSH
9844: PPUSH
9845: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
9846: LD_ADDR_VAR 0 2
9850: PUSH
9851: LD_STRING 09_env
9853: PPUSH
9854: EMPTY
9855: PPUSH
9856: CALL_OW 30
9860: ST_TO_ADDR
// if not tmp then
9861: LD_VAR 0 2
9865: NOT
9866: IFFALSE 9870
// exit ;
9868: GO 10234
// list := ListEnvironmentArea ( mapArea ) ;
9870: LD_ADDR_VAR 0 7
9874: PUSH
9875: LD_INT 4
9877: PPUSH
9878: CALL_OW 353
9882: ST_TO_ADDR
// if not list then
9883: LD_VAR 0 7
9887: NOT
9888: IFFALSE 9892
// exit ;
9890: GO 10234
// for i in list do
9892: LD_ADDR_VAR 0 3
9896: PUSH
9897: LD_VAR 0 7
9901: PUSH
9902: FOR_IN
9903: IFFALSE 10011
// begin exist := false ;
9905: LD_ADDR_VAR 0 6
9909: PUSH
9910: LD_INT 0
9912: ST_TO_ADDR
// for j in tmp do
9913: LD_ADDR_VAR 0 4
9917: PUSH
9918: LD_VAR 0 2
9922: PUSH
9923: FOR_IN
9924: IFFALSE 9978
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
9926: LD_VAR 0 3
9930: PUSH
9931: LD_INT 1
9933: ARRAY
9934: PUSH
9935: LD_VAR 0 4
9939: PUSH
9940: LD_INT 1
9942: ARRAY
9943: EQUAL
9944: PUSH
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 2
9952: ARRAY
9953: PUSH
9954: LD_VAR 0 4
9958: PUSH
9959: LD_INT 2
9961: ARRAY
9962: EQUAL
9963: AND
9964: IFFALSE 9976
// begin exist := true ;
9966: LD_ADDR_VAR 0 6
9970: PUSH
9971: LD_INT 1
9973: ST_TO_ADDR
// break ;
9974: GO 9978
// end ;
9976: GO 9923
9978: POP
9979: POP
// if not exist then
9980: LD_VAR 0 6
9984: NOT
9985: IFFALSE 10009
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
9987: LD_VAR 0 3
9991: PUSH
9992: LD_INT 1
9994: ARRAY
9995: PPUSH
9996: LD_VAR 0 3
10000: PUSH
10001: LD_INT 2
10003: ARRAY
10004: PPUSH
10005: CALL_OW 347
// end ;
10009: GO 9902
10011: POP
10012: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
10013: LD_ADDR_VAR 0 2
10017: PUSH
10018: LD_STRING 09_animals
10020: PPUSH
10021: EMPTY
10022: PPUSH
10023: CALL_OW 30
10027: ST_TO_ADDR
// if not tmp then
10028: LD_VAR 0 2
10032: NOT
10033: IFFALSE 10037
// exit ;
10035: GO 10234
// InitHc_All ( ) ;
10037: CALL_OW 584
// for i in tmp do
10041: LD_ADDR_VAR 0 3
10045: PUSH
10046: LD_VAR 0 2
10050: PUSH
10051: FOR_IN
10052: IFFALSE 10169
// begin uc_side := 0 ;
10054: LD_ADDR_OWVAR 20
10058: PUSH
10059: LD_INT 0
10061: ST_TO_ADDR
// uc_nation := nation_nature ;
10062: LD_ADDR_OWVAR 21
10066: PUSH
10067: LD_INT 0
10069: ST_TO_ADDR
// hc_gallery :=  ;
10070: LD_ADDR_OWVAR 33
10074: PUSH
10075: LD_STRING 
10077: ST_TO_ADDR
// hc_name :=  ;
10078: LD_ADDR_OWVAR 26
10082: PUSH
10083: LD_STRING 
10085: ST_TO_ADDR
// hc_class := i [ 1 ] ;
10086: LD_ADDR_OWVAR 28
10090: PUSH
10091: LD_VAR 0 3
10095: PUSH
10096: LD_INT 1
10098: ARRAY
10099: ST_TO_ADDR
// un := CreateHuman ;
10100: LD_ADDR_VAR 0 5
10104: PUSH
10105: CALL_OW 44
10109: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
10110: LD_VAR 0 5
10114: PPUSH
10115: LD_VAR 0 3
10119: PUSH
10120: LD_INT 2
10122: ARRAY
10123: PPUSH
10124: LD_VAR 0 3
10128: PUSH
10129: LD_INT 3
10131: ARRAY
10132: PPUSH
10133: LD_VAR 0 3
10137: PUSH
10138: LD_INT 4
10140: ARRAY
10141: PPUSH
10142: LD_INT 0
10144: PPUSH
10145: CALL 55301 0 5
// SetLives ( un , i [ 5 ] ) ;
10149: LD_VAR 0 5
10153: PPUSH
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 5
10161: ARRAY
10162: PPUSH
10163: CALL_OW 234
// end ;
10167: GO 10051
10169: POP
10170: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
10171: LD_ADDR_VAR 0 3
10175: PUSH
10176: DOUBLE
10177: LD_INT 1
10179: DEC
10180: ST_TO_ADDR
10181: LD_INT 6
10183: PUSH
10184: LD_INT 5
10186: PUSH
10187: LD_INT 4
10189: PUSH
10190: LD_INT 3
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: PUSH
10199: LD_OWVAR 67
10203: ARRAY
10204: PUSH
10205: FOR_TO
10206: IFFALSE 10232
// begin PrepareApeman ( 5 ) ;
10208: LD_INT 5
10210: PPUSH
10211: CALL 49429 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10215: CALL_OW 44
10219: PPUSH
10220: LD_INT 5
10222: PPUSH
10223: LD_INT 0
10225: PPUSH
10226: CALL_OW 49
// end ;
10230: GO 10205
10232: POP
10233: POP
// end ;
10234: LD_VAR 0 1
10238: RET
// export function CreateDeposits ; var i , oil , sib ; begin
10239: LD_INT 0
10241: PPUSH
10242: PPUSH
10243: PPUSH
10244: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
10245: LD_ADDR_VAR 0 3
10249: PUSH
10250: LD_INT 91
10252: PUSH
10253: LD_INT 13
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 52
10262: PUSH
10263: LD_INT 23
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 115
10272: PUSH
10273: LD_INT 150
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
10285: LD_ADDR_VAR 0 4
10289: PUSH
10290: LD_INT 82
10292: PUSH
10293: LD_INT 42
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 128
10302: PUSH
10303: LD_INT 132
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: ST_TO_ADDR
// for i in oil do
10314: LD_ADDR_VAR 0 2
10318: PUSH
10319: LD_VAR 0 3
10323: PUSH
10324: FOR_IN
10325: IFFALSE 10404
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
10327: LD_VAR 0 2
10331: PUSH
10332: LD_INT 1
10334: ARRAY
10335: PPUSH
10336: LD_VAR 0 2
10340: PUSH
10341: LD_INT 2
10343: ARRAY
10344: PPUSH
10345: LD_INT 2
10347: PPUSH
10348: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10352: LD_VAR 0 2
10356: PUSH
10357: LD_INT 1
10359: ARRAY
10360: PPUSH
10361: LD_VAR 0 2
10365: PUSH
10366: LD_INT 2
10368: ARRAY
10369: PPUSH
10370: LD_INT 2
10372: PPUSH
10373: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10377: LD_VAR 0 2
10381: PUSH
10382: LD_INT 1
10384: ARRAY
10385: PPUSH
10386: LD_VAR 0 2
10390: PUSH
10391: LD_INT 2
10393: ARRAY
10394: PPUSH
10395: LD_INT 6
10397: PPUSH
10398: CALL_OW 441
// end ;
10402: GO 10324
10404: POP
10405: POP
// for i in sib do
10406: LD_ADDR_VAR 0 2
10410: PUSH
10411: LD_VAR 0 4
10415: PUSH
10416: FOR_IN
10417: IFFALSE 10496
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
10419: LD_VAR 0 2
10423: PUSH
10424: LD_INT 1
10426: ARRAY
10427: PPUSH
10428: LD_VAR 0 2
10432: PUSH
10433: LD_INT 2
10435: ARRAY
10436: PPUSH
10437: LD_INT 3
10439: PPUSH
10440: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10444: LD_VAR 0 2
10448: PUSH
10449: LD_INT 1
10451: ARRAY
10452: PPUSH
10453: LD_VAR 0 2
10457: PUSH
10458: LD_INT 2
10460: ARRAY
10461: PPUSH
10462: LD_INT 2
10464: PPUSH
10465: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10469: LD_VAR 0 2
10473: PUSH
10474: LD_INT 1
10476: ARRAY
10477: PPUSH
10478: LD_VAR 0 2
10482: PUSH
10483: LD_INT 2
10485: ARRAY
10486: PPUSH
10487: LD_INT 6
10489: PPUSH
10490: CALL_OW 441
// end ;
10494: GO 10416
10496: POP
10497: POP
// end ;
10498: LD_VAR 0 1
10502: RET
// export function LoadCam ; var i , tmp ; begin
10503: LD_INT 0
10505: PPUSH
10506: PPUSH
10507: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
10508: LD_ADDR_VAR 0 3
10512: PUSH
10513: LD_STRING 09_cameras
10515: PPUSH
10516: EMPTY
10517: PPUSH
10518: CALL_OW 30
10522: ST_TO_ADDR
// if not tmp then
10523: LD_VAR 0 3
10527: NOT
10528: IFFALSE 10532
// exit ;
10530: GO 10574
// for i in tmp do
10532: LD_ADDR_VAR 0 2
10536: PUSH
10537: LD_VAR 0 3
10541: PUSH
10542: FOR_IN
10543: IFFALSE 10572
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
10545: LD_VAR 0 2
10549: PUSH
10550: LD_INT 1
10552: ARRAY
10553: PPUSH
10554: LD_VAR 0 2
10558: PUSH
10559: LD_INT 2
10561: ARRAY
10562: PPUSH
10563: LD_INT 2
10565: PPUSH
10566: CALL_OW 244
10570: GO 10542
10572: POP
10573: POP
// end ;
10574: LD_VAR 0 1
10578: RET
// export function LoadTech ; var i , tmp , default ; begin
10579: LD_INT 0
10581: PPUSH
10582: PPUSH
10583: PPUSH
10584: PPUSH
// default := [ 2 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
10585: LD_ADDR_VAR 0 4
10589: PUSH
10590: LD_INT 2
10592: PUSH
10593: LD_INT 2
10595: PUSH
10596: LD_INT 0
10598: PUSH
10599: LD_INT 0
10601: PUSH
10602: LD_INT 0
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 2
10610: PUSH
10611: LD_INT 0
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: LD_INT 0
10619: PUSH
10620: LD_INT 2
10622: PUSH
10623: LD_INT 0
10625: PUSH
10626: LD_INT 0
10628: PUSH
10629: LD_INT 0
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: LD_INT 0
10637: PUSH
10638: LD_INT 2
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: LD_INT 0
10646: PUSH
10647: LD_INT 2
10649: PUSH
10650: LD_INT 1
10652: PUSH
10653: LD_INT 1
10655: PUSH
10656: LD_INT 0
10658: PUSH
10659: LD_INT 0
10661: PUSH
10662: LD_INT 0
10664: PUSH
10665: LD_INT 0
10667: PUSH
10668: LD_INT 0
10670: PUSH
10671: LD_INT 0
10673: PUSH
10674: LD_INT 0
10676: PUSH
10677: LD_INT 0
10679: PUSH
10680: LD_INT 0
10682: PUSH
10683: LD_INT 0
10685: PUSH
10686: LD_INT 0
10688: PUSH
10689: LD_INT 0
10691: PUSH
10692: LD_INT 2
10694: PUSH
10695: LD_INT 0
10697: PUSH
10698: LD_INT 0
10700: PUSH
10701: LD_INT 0
10703: PUSH
10704: LD_INT 1
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: LD_INT 1
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: LD_INT 0
10718: PUSH
10719: LD_INT 0
10721: PUSH
10722: LD_INT 2
10724: PUSH
10725: LD_INT 2
10727: PUSH
10728: LD_INT 2
10730: PUSH
10731: LD_INT 2
10733: PUSH
10734: LD_INT 2
10736: PUSH
10737: LD_INT 2
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: LD_INT 1
10745: PUSH
10746: LD_INT 0
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: LD_INT 0
10754: PUSH
10755: LD_INT 0
10757: PUSH
10758: LD_INT 0
10760: PUSH
10761: LD_INT 0
10763: PUSH
10764: LD_INT 0
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 1
10772: PUSH
10773: LD_INT 0
10775: PUSH
10776: LD_INT 0
10778: PUSH
10779: LD_INT 0
10781: PUSH
10782: LD_INT 0
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: LD_INT 0
10790: PUSH
10791: LD_INT 0
10793: PUSH
10794: LD_INT 2
10796: PUSH
10797: LD_INT 2
10799: PUSH
10800: LD_INT 0
10802: PUSH
10803: LD_INT 0
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: LD_INT 1
10811: PUSH
10812: LD_INT 1
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: LD_INT 1
10820: PUSH
10821: LD_INT 1
10823: PUSH
10824: LD_INT 1
10826: PUSH
10827: LD_INT 0
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: LD_INT 0
10847: PUSH
10848: LD_INT 0
10850: PUSH
10851: LD_INT 0
10853: PUSH
10854: LD_INT 1
10856: PUSH
10857: LD_INT 1
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: LD_INT 1
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: LD_INT 1
10877: PUSH
10878: LD_INT 1
10880: PUSH
10881: LD_INT 1
10883: PUSH
10884: LD_INT 1
10886: PUSH
10887: LD_INT 1
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: ST_TO_ADDR
// tmp := LoadVariable ( 09_tech , default ) ;
10992: LD_ADDR_VAR 0 3
10996: PUSH
10997: LD_STRING 09_tech
10999: PPUSH
11000: LD_VAR 0 4
11004: PPUSH
11005: CALL_OW 30
11009: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
11010: LD_ADDR_VAR 0 2
11014: PUSH
11015: DOUBLE
11016: LD_INT 1
11018: DEC
11019: ST_TO_ADDR
11020: LD_VAR 0 3
11024: PPUSH
11025: CALL 17561 0 1
11029: PUSH
11030: FOR_TO
11031: IFFALSE 11058
// SetTech ( i , 2 , tmp [ i ] ) ;
11033: LD_VAR 0 2
11037: PPUSH
11038: LD_INT 2
11040: PPUSH
11041: LD_VAR 0 3
11045: PUSH
11046: LD_VAR 0 2
11050: ARRAY
11051: PPUSH
11052: CALL_OW 322
11056: GO 11030
11058: POP
11059: POP
// end ;
11060: LD_VAR 0 1
11064: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
11065: LD_INT 0
11067: PPUSH
11068: PPUSH
11069: PPUSH
11070: PPUSH
11071: PPUSH
11072: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
11073: LD_ADDR_VAR 0 3
11077: PUSH
11078: LD_STRING 09_buildings
11080: PPUSH
11081: EMPTY
11082: PPUSH
11083: CALL_OW 30
11087: ST_TO_ADDR
// for i in tmp do
11088: LD_ADDR_VAR 0 2
11092: PUSH
11093: LD_VAR 0 3
11097: PUSH
11098: FOR_IN
11099: IFFALSE 11493
// begin uc_side := 2 ;
11101: LD_ADDR_OWVAR 20
11105: PUSH
11106: LD_INT 2
11108: ST_TO_ADDR
// uc_nation := nation_arabian ;
11109: LD_ADDR_OWVAR 21
11113: PUSH
11114: LD_INT 2
11116: ST_TO_ADDR
// bc_type := i [ 1 ] ;
11117: LD_ADDR_OWVAR 42
11121: PUSH
11122: LD_VAR 0 2
11126: PUSH
11127: LD_INT 1
11129: ARRAY
11130: ST_TO_ADDR
// bc_level := i [ 5 ] ;
11131: LD_ADDR_OWVAR 43
11135: PUSH
11136: LD_VAR 0 2
11140: PUSH
11141: LD_INT 5
11143: ARRAY
11144: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
11145: LD_ADDR_OWVAR 44
11149: PUSH
11150: LD_INT 9
11152: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
11153: LD_ADDR_OWVAR 45
11157: PUSH
11158: LD_INT 9
11160: ST_TO_ADDR
// if i [ 7 ] then
11161: LD_VAR 0 2
11165: PUSH
11166: LD_INT 7
11168: ARRAY
11169: IFFALSE 11209
// begin bc_kind1 := i [ 7 ] ;
11171: LD_ADDR_OWVAR 44
11175: PUSH
11176: LD_VAR 0 2
11180: PUSH
11181: LD_INT 7
11183: ARRAY
11184: ST_TO_ADDR
// if i [ 8 ] then
11185: LD_VAR 0 2
11189: PUSH
11190: LD_INT 8
11192: ARRAY
11193: IFFALSE 11209
// bc_kind2 := i [ 8 ] ;
11195: LD_ADDR_OWVAR 45
11199: PUSH
11200: LD_VAR 0 2
11204: PUSH
11205: LD_INT 8
11207: ARRAY
11208: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
11209: LD_ADDR_VAR 0 4
11213: PUSH
11214: LD_VAR 0 2
11218: PUSH
11219: LD_INT 2
11221: ARRAY
11222: PPUSH
11223: LD_VAR 0 2
11227: PUSH
11228: LD_INT 3
11230: ARRAY
11231: PPUSH
11232: LD_VAR 0 2
11236: PUSH
11237: LD_INT 4
11239: ARRAY
11240: PPUSH
11241: CALL_OW 47
11245: ST_TO_ADDR
// if i [ 8 ] then
11246: LD_VAR 0 2
11250: PUSH
11251: LD_INT 8
11253: ARRAY
11254: IFFALSE 11274
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
11256: LD_VAR 0 4
11260: PPUSH
11261: LD_VAR 0 2
11265: PUSH
11266: LD_INT 8
11268: ARRAY
11269: PPUSH
11270: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
11274: LD_VAR 0 2
11278: PUSH
11279: LD_INT 1
11281: ARRAY
11282: PUSH
11283: LD_INT 0
11285: PUSH
11286: LD_INT 1
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: IN
11293: IFFALSE 11491
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
11295: LD_ADDR_VAR 0 6
11299: PUSH
11300: LD_STRING 09_materials
11302: PPUSH
11303: LD_INT 100
11305: PUSH
11306: LD_INT 50
11308: PUSH
11309: LD_INT 30
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: PPUSH
11320: CALL_OW 30
11324: ST_TO_ADDR
// for j := 1 to 3 do
11325: LD_ADDR_VAR 0 5
11329: PUSH
11330: DOUBLE
11331: LD_INT 1
11333: DEC
11334: ST_TO_ADDR
11335: LD_INT 3
11337: PUSH
11338: FOR_TO
11339: IFFALSE 11489
// if mat [ 1 ] [ j ] then
11341: LD_VAR 0 6
11345: PUSH
11346: LD_INT 1
11348: ARRAY
11349: PUSH
11350: LD_VAR 0 5
11354: ARRAY
11355: IFFALSE 11487
// if j > 1 then
11357: LD_VAR 0 5
11361: PUSH
11362: LD_INT 1
11364: GREATER
11365: IFFALSE 11428
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 35 , 25 , 20 , 10 ] [ Difficulty ] ) else
11367: LD_VAR 0 4
11371: PPUSH
11372: CALL_OW 274
11376: PPUSH
11377: LD_VAR 0 5
11381: PPUSH
11382: LD_VAR 0 6
11386: PUSH
11387: LD_INT 1
11389: ARRAY
11390: PUSH
11391: LD_VAR 0 5
11395: ARRAY
11396: PUSH
11397: LD_INT 35
11399: PUSH
11400: LD_INT 25
11402: PUSH
11403: LD_INT 20
11405: PUSH
11406: LD_INT 10
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: LD_OWVAR 67
11419: ARRAY
11420: PLUS
11421: PPUSH
11422: CALL_OW 277
11426: GO 11487
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 350 , 250 , 150 , 100 ] [ Difficulty ] ) ;
11428: LD_VAR 0 4
11432: PPUSH
11433: CALL_OW 274
11437: PPUSH
11438: LD_VAR 0 5
11442: PPUSH
11443: LD_VAR 0 6
11447: PUSH
11448: LD_INT 1
11450: ARRAY
11451: PUSH
11452: LD_VAR 0 5
11456: ARRAY
11457: PUSH
11458: LD_INT 350
11460: PUSH
11461: LD_INT 250
11463: PUSH
11464: LD_INT 150
11466: PUSH
11467: LD_INT 100
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: PUSH
11476: LD_OWVAR 67
11480: ARRAY
11481: PLUS
11482: PPUSH
11483: CALL_OW 277
11487: GO 11338
11489: POP
11490: POP
// end ; end ;
11491: GO 11098
11493: POP
11494: POP
// end ;
11495: LD_VAR 0 1
11499: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
11500: LD_INT 0
11502: PPUSH
11503: PPUSH
// area = ListEnvironmentArea ( area ) ;
11504: LD_ADDR_VAR 0 2
11508: PUSH
11509: LD_VAR 0 2
11513: PPUSH
11514: CALL_OW 353
11518: ST_TO_ADDR
// if bulldozer > 0 then
11519: LD_VAR 0 1
11523: PUSH
11524: LD_INT 0
11526: GREATER
11527: IFFALSE 11638
// for i = area downto 1 do
11529: LD_ADDR_VAR 0 4
11533: PUSH
11534: DOUBLE
11535: LD_VAR 0 2
11539: INC
11540: ST_TO_ADDR
11541: LD_INT 1
11543: PUSH
11544: FOR_DOWNTO
11545: IFFALSE 11636
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
11547: LD_VAR 0 2
11551: PUSH
11552: LD_VAR 0 4
11556: ARRAY
11557: PUSH
11558: LD_INT 1
11560: ARRAY
11561: PPUSH
11562: LD_VAR 0 2
11566: PUSH
11567: LD_VAR 0 4
11571: ARRAY
11572: PUSH
11573: LD_INT 2
11575: ARRAY
11576: PPUSH
11577: CALL_OW 351
11581: IFFALSE 11634
// if not HasTask ( bulldozer ) then
11583: LD_VAR 0 1
11587: PPUSH
11588: CALL_OW 314
11592: NOT
11593: IFFALSE 11634
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
11595: LD_VAR 0 1
11599: PPUSH
11600: LD_VAR 0 2
11604: PUSH
11605: LD_VAR 0 4
11609: ARRAY
11610: PUSH
11611: LD_INT 1
11613: ARRAY
11614: PPUSH
11615: LD_VAR 0 2
11619: PUSH
11620: LD_VAR 0 4
11624: ARRAY
11625: PUSH
11626: LD_INT 2
11628: ARRAY
11629: PPUSH
11630: CALL_OW 171
11634: GO 11544
11636: POP
11637: POP
// end ; end_of_file
11638: LD_VAR 0 3
11642: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11643: LD_VAR 0 1
11647: PPUSH
11648: LD_VAR 0 2
11652: PPUSH
11653: CALL 73527 0 2
// if GetControl ( vehicle ) = control_apeman then
11657: LD_VAR 0 1
11661: PPUSH
11662: CALL_OW 263
11666: PUSH
11667: LD_INT 5
11669: EQUAL
11670: IFFALSE 11682
// begin apeDriver := true ;
11672: LD_ADDR_EXP 8
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// exit ;
11680: GO 11735
// end ; if GetSide ( factory ) = 6 then
11682: LD_VAR 0 2
11686: PPUSH
11687: CALL_OW 255
11691: PUSH
11692: LD_INT 6
11694: EQUAL
11695: IFFALSE 11735
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
11697: LD_ADDR_EXP 35
11701: PUSH
11702: LD_EXP 35
11706: PPUSH
11707: LD_INT 1
11709: PPUSH
11710: CALL_OW 3
11714: ST_TO_ADDR
// ruTanks := Join ( ruTanks , vehicle ) ;
11715: LD_ADDR_EXP 36
11719: PUSH
11720: LD_EXP 36
11724: PPUSH
11725: LD_VAR 0 1
11729: PPUSH
11730: CALL 53161 0 2
11734: ST_TO_ADDR
// end ; end ;
11735: PPOPN 2
11737: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) = 6 and not See ( 2 , unit ) then
11738: LD_VAR 0 2
11742: PPUSH
11743: CALL_OW 255
11747: PUSH
11748: LD_INT 6
11750: EQUAL
11751: PUSH
11752: LD_INT 2
11754: PPUSH
11755: LD_VAR 0 2
11759: PPUSH
11760: CALL_OW 292
11764: NOT
11765: AND
11766: IFFALSE 11780
// SetLives ( unit , 1000 ) ;
11768: LD_VAR 0 2
11772: PPUSH
11773: LD_INT 1000
11775: PPUSH
11776: CALL_OW 234
// end ;
11780: PPOPN 2
11782: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area , fac , arm ;
11783: LD_INT 0
11785: PPUSH
11786: PPUSH
11787: PPUSH
11788: PPUSH
// begin if GetSide ( driver ) = 3 then
11789: LD_VAR 0 1
11793: PPUSH
11794: CALL_OW 255
11798: PUSH
11799: LD_INT 3
11801: EQUAL
11802: IFFALSE 11939
// begin tag := GetTag ( driver ) ;
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL_OW 110
11818: ST_TO_ADDR
// area := [ ruSpawn1AArea , ruSpawn2AArea , ruSpawn3AArea ] [ tag ] ;
11819: LD_ADDR_VAR 0 6
11823: PUSH
11824: LD_INT 21
11826: PUSH
11827: LD_INT 22
11829: PUSH
11830: LD_INT 23
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: PUSH
11838: LD_VAR 0 5
11842: ARRAY
11843: ST_TO_ADDR
// if not area then
11844: LD_VAR 0 6
11848: NOT
11849: IFFALSE 11853
// exit ;
11851: GO 12207
// repeat ComMoveToArea ( driver , area ) ;
11853: LD_VAR 0 1
11857: PPUSH
11858: LD_VAR 0 6
11862: PPUSH
11863: CALL_OW 113
// wait ( 0 0$3 ) ;
11867: LD_INT 105
11869: PPUSH
11870: CALL_OW 67
// if not IsOk ( driver ) then
11874: LD_VAR 0 1
11878: PPUSH
11879: CALL_OW 302
11883: NOT
11884: IFFALSE 11888
// exit ;
11886: GO 12207
// until IsInArea ( driver , ruSpawn1Area ) or IsInArea ( driver , ruSpawn2Area ) or IsInArea ( driver , ruSpawn3Area ) ;
11888: LD_VAR 0 1
11892: PPUSH
11893: LD_INT 15
11895: PPUSH
11896: CALL_OW 308
11900: PUSH
11901: LD_VAR 0 1
11905: PPUSH
11906: LD_INT 17
11908: PPUSH
11909: CALL_OW 308
11913: OR
11914: PUSH
11915: LD_VAR 0 1
11919: PPUSH
11920: LD_INT 19
11922: PPUSH
11923: CALL_OW 308
11927: OR
11928: IFFALSE 11853
// RemoveUnit ( driver ) ;
11930: LD_VAR 0 1
11934: PPUSH
11935: CALL_OW 64
// end ; if GetSide ( driver ) = 6 then
11939: LD_VAR 0 1
11943: PPUSH
11944: CALL_OW 255
11948: PUSH
11949: LD_INT 6
11951: EQUAL
11952: IFFALSE 12207
// begin ComMoveXY ( driver , 97 , 139 ) ;
11954: LD_VAR 0 1
11958: PPUSH
11959: LD_INT 97
11961: PPUSH
11962: LD_INT 139
11964: PPUSH
11965: CALL_OW 111
// if GetLives ( driver ) < 1000 then
11969: LD_VAR 0 1
11973: PPUSH
11974: CALL_OW 256
11978: PUSH
11979: LD_INT 1000
11981: LESS
11982: IFFALSE 11996
// SetTag ( driver , tHeal ) ;
11984: LD_VAR 0 1
11988: PPUSH
11989: LD_INT 3
11991: PPUSH
11992: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
11996: LD_INT 35
11998: PPUSH
11999: CALL_OW 67
// if IsDead ( driver ) then
12003: LD_VAR 0 1
12007: PPUSH
12008: CALL_OW 301
12012: IFFALSE 12016
// exit ;
12014: GO 12207
// until GetLives ( driver ) = 1000 ;
12016: LD_VAR 0 1
12020: PPUSH
12021: CALL_OW 256
12025: PUSH
12026: LD_INT 1000
12028: EQUAL
12029: IFFALSE 11996
// SetTag ( driver , 0 ) ;
12031: LD_VAR 0 1
12035: PPUSH
12036: LD_INT 0
12038: PPUSH
12039: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12043: LD_ADDR_VAR 0 7
12047: PUSH
12048: LD_INT 26
12050: PPUSH
12051: LD_INT 22
12053: PUSH
12054: LD_INT 6
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 30
12063: PUSH
12064: LD_INT 3
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 50
12073: PUSH
12074: EMPTY
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 70
12086: ST_TO_ADDR
// if fac then
12087: LD_VAR 0 7
12091: IFFALSE 12113
// begin ComEnterUnit ( driver , fac [ 1 ] ) ;
12093: LD_VAR 0 1
12097: PPUSH
12098: LD_VAR 0 7
12102: PUSH
12103: LD_INT 1
12105: ARRAY
12106: PPUSH
12107: CALL_OW 120
// exit ;
12111: GO 12207
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_barracks ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
12113: LD_ADDR_VAR 0 8
12117: PUSH
12118: LD_INT 26
12120: PPUSH
12121: LD_INT 22
12123: PUSH
12124: LD_INT 6
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 5
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 3
12143: PUSH
12144: LD_INT 62
12146: PUSH
12147: EMPTY
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 50
12156: PUSH
12157: EMPTY
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 70
12170: ST_TO_ADDR
// if arm then
12171: LD_VAR 0 8
12175: IFFALSE 12207
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
12177: LD_VAR 0 1
12181: PPUSH
12182: LD_VAR 0 8
12186: PUSH
12187: LD_INT 1
12189: ARRAY
12190: PPUSH
12191: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
12195: LD_VAR 0 1
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 183
// end ; end ; end ;
12207: PPOPN 8
12209: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
12210: LD_VAR 0 3
12214: PUSH
12215: LD_INT 17
12217: EQUAL
12218: IFFALSE 12228
// kamikazeTrained := true ;
12220: LD_ADDR_EXP 6
12224: PUSH
12225: LD_INT 1
12227: ST_TO_ADDR
// end ;
12228: PPOPN 3
12230: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL 73407 0 1
// if un in ruTanks then
12240: LD_VAR 0 1
12244: PUSH
12245: LD_EXP 36
12249: IN
12250: IFFALSE 12313
// ruConstructList := Join ( ruConstructList , [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ) ;
12252: LD_ADDR_EXP 35
12256: PUSH
12257: LD_EXP 35
12261: PPUSH
12262: LD_VAR 0 1
12266: PPUSH
12267: CALL_OW 265
12271: PUSH
12272: LD_VAR 0 1
12276: PPUSH
12277: CALL_OW 262
12281: PUSH
12282: LD_VAR 0 1
12286: PPUSH
12287: CALL_OW 263
12291: PUSH
12292: LD_VAR 0 1
12296: PPUSH
12297: CALL_OW 264
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL 53161 0 2
12312: ST_TO_ADDR
// if un = Schulz then
12313: LD_VAR 0 1
12317: PUSH
12318: LD_EXP 24
12322: EQUAL
12323: IFFALSE 12332
// YouLost ( Schulz ) ;
12325: LD_STRING Schulz
12327: PPUSH
12328: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
12332: LD_VAR 0 1
12336: PUSH
12337: LD_EXP 13
12341: EQUAL
12342: PUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: CALL_OW 255
12352: PUSH
12353: LD_INT 2
12355: EQUAL
12356: AND
12357: IFFALSE 12366
// YouLost ( Heike ) ;
12359: LD_STRING Heike
12361: PPUSH
12362: CALL_OW 104
// end ; end_of_file
12366: PPOPN 1
12368: END
// export function Action ; begin
12369: LD_INT 0
12371: PPUSH
// InGameOn ;
12372: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
12376: LD_INT 1
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_INT 2
12384: PPUSH
12385: LD_INT 32963
12387: NEG
12388: PPUSH
12389: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
12393: LD_INT 1
12395: PPUSH
12396: LD_INT 1
12398: PPUSH
12399: LD_INT 2
12401: PPUSH
12402: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
12406: LD_INT 173
12408: PPUSH
12409: LD_INT 149
12411: PPUSH
12412: CALL_OW 86
// PrepareExtraRussianBase ;
12416: CALL 3364 0 0
// wait ( 0 0$2 ) ;
12420: LD_INT 70
12422: PPUSH
12423: CALL_OW 67
// InGameOff ;
12427: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
12431: LD_STRING M6
12433: PPUSH
12434: CALL_OW 337
// if Count ( UnitFilter ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] , [ f_ok ] ) ) = Count ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] ) then
12438: LD_EXP 14
12442: PUSH
12443: LD_EXP 15
12447: PUSH
12448: LD_EXP 17
12452: PUSH
12453: LD_EXP 18
12457: PUSH
12458: LD_EXP 20
12462: PUSH
12463: LD_EXP 21
12467: PUSH
12468: LD_EXP 22
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PPUSH
12482: LD_INT 50
12484: PUSH
12485: EMPTY
12486: LIST
12487: PPUSH
12488: CALL_OW 72
12492: PPUSH
12493: CALL 17561 0 1
12497: PUSH
12498: LD_EXP 14
12502: PUSH
12503: LD_EXP 15
12507: PUSH
12508: LD_EXP 17
12512: PUSH
12513: LD_EXP 18
12517: PUSH
12518: LD_EXP 20
12522: PUSH
12523: LD_EXP 21
12527: PUSH
12528: LD_EXP 22
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL 17561 0 1
12546: EQUAL
12547: IFFALSE 12556
// SetAchievement ( ACH_KNIGHT ) ;
12549: LD_STRING ACH_KNIGHT
12551: PPUSH
12552: CALL_OW 543
// SaveForQuickRestart ;
12556: CALL_OW 22
// end ;
12560: LD_VAR 0 1
12564: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
12565: LD_EXP 5
12569: PUSH
12570: LD_EXP 33
12574: PPUSH
12575: CALL_OW 302
12579: AND
12580: PUSH
12581: LD_EXP 13
12585: PPUSH
12586: CALL_OW 302
12590: AND
12591: PUSH
12592: LD_EXP 13
12596: PPUSH
12597: LD_EXP 33
12601: PPUSH
12602: CALL_OW 296
12606: PUSH
12607: LD_INT 9
12609: LESS
12610: PUSH
12611: LD_INT 22
12613: PUSH
12614: LD_INT 2
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 91
12623: PUSH
12624: LD_EXP 13
12628: PUSH
12629: LD_INT 7
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 21
12639: PUSH
12640: LD_INT 3
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: PPUSH
12652: CALL_OW 69
12656: OR
12657: AND
12658: IFFALSE 12812
12660: GO 12662
12662: DISABLE
// begin ComExit ( Rolf ) ;
12663: LD_EXP 33
12667: PPUSH
12668: CALL 53559 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
12672: LD_EXP 33
12676: PPUSH
12677: LD_EXP 13
12681: PPUSH
12682: CALL_OW 172
// InGameOn ;
12686: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
12690: LD_EXP 13
12694: PPUSH
12695: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
12699: LD_EXP 33
12703: PPUSH
12704: LD_STRING DRf-Reunion-1
12706: PPUSH
12707: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
12711: LD_EXP 33
12715: PPUSH
12716: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
12720: LD_EXP 13
12724: PPUSH
12725: LD_EXP 33
12729: PPUSH
12730: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
12734: LD_EXP 33
12738: PPUSH
12739: LD_EXP 13
12743: PPUSH
12744: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
12748: LD_EXP 13
12752: PPUSH
12753: LD_STRING DH-Reunion-2
12755: PPUSH
12756: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
12760: LD_EXP 33
12764: PPUSH
12765: LD_STRING DRf-Reunion-3
12767: PPUSH
12768: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
12772: LD_EXP 13
12776: PPUSH
12777: LD_STRING DH-Reunion-4
12779: PPUSH
12780: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
12784: LD_EXP 33
12788: PPUSH
12789: LD_STRING DRf-Reunion-5
12791: PPUSH
12792: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
12796: LD_EXP 13
12800: PPUSH
12801: LD_STRING DH-Reunion-6
12803: PPUSH
12804: CALL_OW 88
// InGameOff ;
12808: CALL_OW 9
// end ;
12812: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
12813: LD_EXP 5
12817: NOT
12818: PUSH
12819: LD_INT 22
12821: PUSH
12822: LD_INT 2
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 91
12831: PUSH
12832: LD_EXP 24
12836: PUSH
12837: LD_INT 10
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 21
12847: PUSH
12848: LD_INT 3
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 69
12864: AND
12865: IFFALSE 13652
12867: GO 12869
12869: DISABLE
// begin InGameOn ;
12870: CALL_OW 8
// ComExit ( Schulz ) ;
12874: LD_EXP 24
12878: PPUSH
12879: CALL 53559 0 1
// CenterNowOnUnits ( Schulz ) ;
12883: LD_EXP 24
12887: PPUSH
12888: CALL_OW 87
// wait ( 0 0$0.3 ) ;
12892: LD_INT 10
12894: PPUSH
12895: CALL_OW 67
// DialogueOn ;
12899: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
12903: LD_EXP 24
12907: PPUSH
12908: LD_STRING DL-Def-1
12910: PPUSH
12911: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
12915: LD_EXP 24
12919: PPUSH
12920: LD_STRING DL-Def-2
12922: PPUSH
12923: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
12927: LD_EXP 24
12931: PPUSH
12932: LD_STRING DL-Def-3
12934: PPUSH
12935: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
12939: LD_EXP 25
12943: PPUSH
12944: CALL_OW 302
12948: PUSH
12949: LD_EXP 23
12953: PPUSH
12954: CALL_OW 302
12958: AND
12959: IFFALSE 13306
// begin Say ( Basim , DBs-Def-4 ) ;
12961: LD_EXP 25
12965: PPUSH
12966: LD_STRING DBs-Def-4
12968: PPUSH
12969: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
12973: LD_EXP 25
12977: PPUSH
12978: LD_STRING DBs-Def-5
12980: PPUSH
12981: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
12985: LD_EXP 23
12989: PPUSH
12990: LD_STRING DA-Def-6
12992: PPUSH
12993: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
12997: LD_EXP 25
13001: PPUSH
13002: LD_STRING DBs-Def-7
13004: PPUSH
13005: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
13009: LD_EXP 23
13013: PPUSH
13014: LD_STRING DA-Def-8
13016: PPUSH
13017: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
13021: LD_EXP 23
13025: PPUSH
13026: LD_STRING DA-Def-9
13028: PPUSH
13029: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
13033: LD_EXP 25
13037: PPUSH
13038: LD_STRING DBs-Def-10
13040: PPUSH
13041: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
13045: LD_EXP 23
13049: PPUSH
13050: LD_STRING DA-Def-11
13052: PPUSH
13053: CALL_OW 88
// if Query ( QTech ) = 1 then
13057: LD_STRING QTech
13059: PPUSH
13060: CALL_OW 97
13064: PUSH
13065: LD_INT 1
13067: EQUAL
13068: IFFALSE 13176
// begin Say ( Schulz , DL-Tech-1 ) ;
13070: LD_EXP 24
13074: PPUSH
13075: LD_STRING DL-Tech-1
13077: PPUSH
13078: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
13082: LD_EXP 24
13086: PPUSH
13087: LD_STRING DL-Tech-2
13089: PPUSH
13090: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
13094: LD_EXP 23
13098: PPUSH
13099: LD_STRING DA-Tech-3
13101: PPUSH
13102: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
13106: LD_EXP 18
13110: PPUSH
13111: LD_STRING DK-Tech-4
13113: PPUSH
13114: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
13118: LD_EXP 18
13122: PPUSH
13123: LD_STRING DK-Tech-5
13125: PPUSH
13126: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
13130: LD_EXP 25
13134: PPUSH
13135: LD_STRING DBs-Tech-6
13137: PPUSH
13138: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
13142: LD_EXP 18
13146: PPUSH
13147: LD_STRING DK-Tech-7
13149: PPUSH
13150: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
13154: LD_INT 3
13156: PPUSH
13157: LD_INT 2
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
13167: LD_STRING M7a
13169: PPUSH
13170: CALL_OW 604
// end else
13174: GO 13304
// begin Say ( Schulz , DL-Tech-a-1 ) ;
13176: LD_EXP 24
13180: PPUSH
13181: LD_STRING DL-Tech-a-1
13183: PPUSH
13184: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
13188: LD_EXP 24
13192: PPUSH
13193: LD_STRING DL-Tech-a-2
13195: PPUSH
13196: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
13200: LD_EXP 25
13204: PPUSH
13205: LD_STRING DBs-Tech-a-3
13207: PPUSH
13208: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
13212: LD_EXP 18
13216: PPUSH
13217: LD_STRING DK-Tech-a-4
13219: PPUSH
13220: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
13224: LD_EXP 18
13228: PPUSH
13229: LD_STRING DK-Tech-a-5
13231: PPUSH
13232: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
13236: LD_EXP 23
13240: PPUSH
13241: LD_STRING DA-Tech-a-6
13243: PPUSH
13244: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
13248: LD_EXP 23
13252: PPUSH
13253: LD_STRING DA-Tech-a-7
13255: PPUSH
13256: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
13260: LD_EXP 24
13264: PPUSH
13265: LD_STRING DL-Tech-a-8
13267: PPUSH
13268: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
13272: LD_EXP 23
13276: PPUSH
13277: LD_STRING DA-Tech-a-9
13279: PPUSH
13280: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13284: LD_INT 4
13286: PPUSH
13287: LD_INT 2
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
13297: LD_STRING M7b
13299: PPUSH
13300: CALL_OW 604
// end ; end else
13304: GO 13354
// if IsOk ( Basim ) then
13306: LD_EXP 25
13310: PPUSH
13311: CALL_OW 302
13315: IFFALSE 13354
// begin Say ( Basim , DBs-Def-4 ) ;
13317: LD_EXP 25
13321: PPUSH
13322: LD_STRING DBs-Def-4
13324: PPUSH
13325: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13329: LD_EXP 25
13333: PPUSH
13334: LD_STRING DBs-Def-5
13336: PPUSH
13337: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13341: LD_INT 4
13343: PPUSH
13344: LD_INT 2
13346: PPUSH
13347: LD_INT 1
13349: PPUSH
13350: CALL_OW 322
// end ; DialogueOff ;
13354: CALL_OW 7
// InGameOff ;
13358: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
13362: LD_STRING M7
13364: PPUSH
13365: CALL_OW 337
// playerInBase := true ;
13369: LD_ADDR_EXP 5
13373: PUSH
13374: LD_INT 1
13376: ST_TO_ADDR
// wait ( 0 0$30 ) ;
13377: LD_INT 1050
13379: PPUSH
13380: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13384: LD_INT 35
13386: PPUSH
13387: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) ;
13391: LD_INT 22
13393: PUSH
13394: LD_INT 2
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 50
13403: PUSH
13404: EMPTY
13405: LIST
13406: PUSH
13407: LD_INT 3
13409: PUSH
13410: LD_INT 57
13412: PUSH
13413: EMPTY
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 30
13422: PUSH
13423: LD_INT 30
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 69
13440: IFFALSE 13384
// if IsOk ( Kurt ) then
13442: LD_EXP 22
13446: PPUSH
13447: CALL_OW 302
13451: IFFALSE 13639
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
13453: LD_INT 22
13455: PUSH
13456: LD_INT 2
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 50
13465: PUSH
13466: EMPTY
13467: LIST
13468: PUSH
13469: LD_INT 3
13471: PUSH
13472: LD_INT 57
13474: PUSH
13475: EMPTY
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 30
13484: PUSH
13485: LD_INT 30
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: PUSH
13503: LD_INT 1
13505: ARRAY
13506: PPUSH
13507: CALL_OW 87
// DialogueOn ;
13511: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
13515: LD_EXP 22
13519: PPUSH
13520: LD_STRING DKs-Med-1
13522: PPUSH
13523: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
13527: LD_EXP 22
13531: PPUSH
13532: LD_STRING DKs-Med-2
13534: PPUSH
13535: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
13539: LD_EXP 24
13543: PPUSH
13544: LD_STRING DL-Med-3
13546: PPUSH
13547: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
13551: LD_EXP 24
13555: PPUSH
13556: LD_STRING DL-Med-4
13558: PPUSH
13559: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
13563: LD_EXP 22
13567: PPUSH
13568: LD_STRING DKs-Med-5
13570: PPUSH
13571: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
13575: LD_EXP 22
13579: PPUSH
13580: LD_STRING DKs-Med-6
13582: PPUSH
13583: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
13587: LD_EXP 22
13591: PPUSH
13592: LD_STRING DKs-Med-7
13594: PPUSH
13595: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
13599: LD_EXP 22
13603: PPUSH
13604: LD_STRING DKs-Med-8
13606: PPUSH
13607: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
13611: LD_EXP 24
13615: PPUSH
13616: LD_STRING DL-Med-9
13618: PPUSH
13619: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
13623: LD_EXP 24
13627: PPUSH
13628: LD_STRING DL-Med-10
13630: PPUSH
13631: CALL_OW 88
// DialogueOff ;
13635: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
13639: LD_STRING M8-
13641: PUSH
13642: LD_OWVAR 67
13646: STR
13647: PPUSH
13648: CALL_OW 337
// end ;
13652: END
// every 0 0$1 trigger playerInBase do
13653: LD_EXP 5
13657: IFFALSE 13677
13659: GO 13661
13661: DISABLE
// begin enable ;
13662: ENABLE
// missionTime := missionTime + 0 0$1 ;
13663: LD_ADDR_EXP 9
13667: PUSH
13668: LD_EXP 9
13672: PUSH
13673: LD_INT 35
13675: PLUS
13676: ST_TO_ADDR
// end ;
13677: END
// every 0 0$2 trigger playerInBase and apeDriver do
13678: LD_EXP 5
13682: PUSH
13683: LD_EXP 8
13687: AND
13688: IFFALSE 14085
13690: GO 13692
13692: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
13693: LD_STRING M7a_out
13695: PPUSH
13696: CALL_OW 337
// wait ( 0 0$2 ) ;
13700: LD_INT 70
13702: PPUSH
13703: CALL_OW 67
// DialogueOn ;
13707: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
13711: LD_INT 22
13713: PUSH
13714: LD_INT 2
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 33
13723: PUSH
13724: LD_INT 5
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: PUSH
13740: LD_INT 1
13742: ARRAY
13743: PPUSH
13744: CALL_OW 87
// if IsOk ( Mia ) then
13748: LD_EXP 27
13752: PPUSH
13753: CALL_OW 302
13757: IFFALSE 13783
// begin Say ( Mia , DMm-Apedrive-1 ) ;
13759: LD_EXP 27
13763: PPUSH
13764: LD_STRING DMm-Apedrive-1
13766: PPUSH
13767: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
13771: LD_EXP 15
13775: PPUSH
13776: LD_STRING DM-Apedrive-2
13778: PPUSH
13779: CALL_OW 88
// end ; if IsOk ( Jenna ) then
13783: LD_EXP 29
13787: PPUSH
13788: CALL_OW 302
13792: IFFALSE 14081
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
13794: LD_EXP 29
13798: PPUSH
13799: LD_STRING DJm-Apedrive-3
13801: PPUSH
13802: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
13806: LD_EXP 29
13810: PPUSH
13811: LD_STRING DJm-Apedrive-4
13813: PPUSH
13814: CALL_OW 88
// if IsOk ( Basim ) then
13818: LD_EXP 25
13822: PPUSH
13823: CALL_OW 302
13827: IFFALSE 14081
// begin Say ( Basim , DBs-Apedrive-5 ) ;
13829: LD_EXP 25
13833: PPUSH
13834: LD_STRING DBs-Apedrive-5
13836: PPUSH
13837: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
13841: LD_EXP 25
13845: PPUSH
13846: LD_STRING DBs-Apedrive-6
13848: PPUSH
13849: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
13853: LD_EXP 29
13857: PPUSH
13858: LD_STRING DJm-Apedrive-7
13860: PPUSH
13861: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
13865: LD_EXP 25
13869: PPUSH
13870: LD_STRING DBs-Apedrive-8
13872: PPUSH
13873: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
13877: LD_EXP 29
13881: PPUSH
13882: LD_STRING DJm-Apedrive-9
13884: PPUSH
13885: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
13889: LD_EXP 25
13893: PPUSH
13894: LD_STRING DBs-Apedrive-10
13896: PPUSH
13897: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
13901: LD_EXP 29
13905: PPUSH
13906: LD_STRING DJm-Apedrive-11
13908: PPUSH
13909: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
13913: LD_EXP 18
13917: PPUSH
13918: LD_STRING DK-Apedrive-12
13920: PPUSH
13921: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
13925: LD_EXP 29
13929: PPUSH
13930: LD_STRING DJm-Apedrive-13
13932: PPUSH
13933: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
13937: LD_EXP 29
13941: PPUSH
13942: LD_STRING DJm-Apedrive-14
13944: PPUSH
13945: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
13949: LD_EXP 29
13953: PPUSH
13954: LD_STRING DJm-Apedrive-15
13956: PPUSH
13957: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
13961: LD_EXP 29
13965: PPUSH
13966: LD_STRING DJm-Apedrive-16
13968: PPUSH
13969: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
13973: LD_EXP 27
13977: PPUSH
13978: LD_STRING DMm-Apedrive-17
13980: PPUSH
13981: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
13985: LD_EXP 27
13989: PPUSH
13990: LD_STRING DMm-Apedrive-18
13992: PPUSH
13993: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
13997: LD_EXP 27
14001: PPUSH
14002: LD_STRING DMm-Apedrive-19
14004: PPUSH
14005: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
14009: LD_EXP 27
14013: PPUSH
14014: LD_STRING DMm-Apedrive-20
14016: PPUSH
14017: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
14021: LD_EXP 18
14025: PPUSH
14026: LD_STRING DK-Apedrive-21
14028: PPUSH
14029: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
14033: LD_EXP 18
14037: PPUSH
14038: LD_STRING DK-Apedrive-22
14040: PPUSH
14041: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
14045: LD_EXP 13
14049: PPUSH
14050: LD_STRING DH-Apedrive-23
14052: PPUSH
14053: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
14057: LD_EXP 26
14061: PPUSH
14062: LD_STRING DLt-Apedrive-24
14064: PPUSH
14065: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
14069: LD_EXP 26
14073: PPUSH
14074: LD_STRING DLt-Apedrive-25
14076: PPUSH
14077: CALL_OW 88
// end ; end ; DialogueOff ;
14081: CALL_OW 7
// end ;
14085: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
14086: LD_EXP 5
14090: PUSH
14091: LD_EXP 6
14095: AND
14096: IFFALSE 14108
14098: GO 14100
14100: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
14101: LD_STRING M7b_out
14103: PPUSH
14104: CALL_OW 337
14108: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
14109: LD_EXP 5
14113: PUSH
14114: LD_INT 22
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: LD_INT 3
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 3
14136: PUSH
14137: LD_INT 58
14139: PUSH
14140: EMPTY
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: LIST
14151: PPUSH
14152: CALL_OW 69
14156: AND
14157: PUSH
14158: LD_EXP 13
14162: PPUSH
14163: CALL_OW 302
14167: AND
14168: PUSH
14169: LD_EXP 24
14173: PPUSH
14174: CALL_OW 302
14178: AND
14179: IFFALSE 14352
14181: GO 14183
14183: DISABLE
// begin DialogueOn ;
14184: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
14188: LD_EXP 24
14192: PPUSH
14193: LD_STRING DL-Mort-1
14195: PPUSH
14196: CALL_OW 88
// if IsOk ( Markov ) then
14200: LD_EXP 20
14204: PPUSH
14205: CALL_OW 302
14209: IFFALSE 14262
// begin Say ( Heike , DH-Mort-2 ) ;
14211: LD_EXP 13
14215: PPUSH
14216: LD_STRING DH-Mort-2
14218: PPUSH
14219: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
14223: LD_EXP 20
14227: PPUSH
14228: LD_STRING DMar-Mort-3
14230: PPUSH
14231: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
14235: LD_EXP 20
14239: PPUSH
14240: LD_STRING DMar-Mort-4
14242: PPUSH
14243: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14247: LD_INT 88
14249: PPUSH
14250: LD_INT 2
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: CALL_OW 322
// end else
14260: GO 14348
// if IsOk ( Olaf ) then
14262: LD_EXP 21
14266: PPUSH
14267: CALL_OW 302
14271: IFFALSE 14324
// begin Say ( Heike , DH-Mort-a-2 ) ;
14273: LD_EXP 13
14277: PPUSH
14278: LD_STRING DH-Mort-a-2
14280: PPUSH
14281: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
14285: LD_EXP 21
14289: PPUSH
14290: LD_STRING DO-Mort-a-3
14292: PPUSH
14293: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
14297: LD_EXP 21
14301: PPUSH
14302: LD_STRING DO-Mort-a-4
14304: PPUSH
14305: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14309: LD_INT 88
14311: PPUSH
14312: LD_INT 2
14314: PPUSH
14315: LD_INT 1
14317: PPUSH
14318: CALL_OW 322
// end else
14322: GO 14348
// begin Say ( Heike , DH-Mort-a-5 ) ;
14324: LD_EXP 13
14328: PPUSH
14329: LD_STRING DH-Mort-a-5
14331: PPUSH
14332: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
14336: LD_EXP 13
14340: PPUSH
14341: LD_STRING DH-Mort-a-6
14343: PPUSH
14344: CALL_OW 88
// end ; DialogueOff ;
14348: CALL_OW 7
// end ;
14352: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
14353: LD_EXP 18
14357: PPUSH
14358: CALL_OW 256
14362: PUSH
14363: LD_INT 10
14365: LESS
14366: IFFALSE 14468
14368: GO 14370
14370: DISABLE
// begin DialogueOn ;
14371: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14375: LD_EXP 18
14379: PPUSH
14380: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
14384: LD_EXP 18
14388: PPUSH
14389: LD_STRING DK-Death-1
14391: PPUSH
14392: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
14396: LD_EXP 18
14400: PPUSH
14401: LD_STRING DK-Death-2
14403: PPUSH
14404: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
14408: LD_EXP 18
14412: PPUSH
14413: LD_STRING DK-Death-3
14415: PPUSH
14416: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
14420: LD_EXP 13
14424: PPUSH
14425: LD_STRING DH-Death-4
14427: PPUSH
14428: CALL_OW 88
// if IsOk ( Markov ) then
14432: LD_EXP 20
14436: PPUSH
14437: CALL_OW 302
14441: IFFALSE 14455
// Say ( Markov , DMar-Death-5 ) ;
14443: LD_EXP 20
14447: PPUSH
14448: LD_STRING DMar-Death-5
14450: PPUSH
14451: CALL_OW 88
// DialogueOff ;
14455: CALL_OW 7
// KillUnit ( Kaia ) ;
14459: LD_EXP 18
14463: PPUSH
14464: CALL_OW 66
// end ;
14468: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib ;
14469: LD_EXP 10
14473: PUSH
14474: LD_INT 81
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 50
14486: PUSH
14487: EMPTY
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PPUSH
14494: CALL_OW 69
14498: NOT
14499: AND
14500: IFFALSE 15348
14502: GO 14504
14504: DISABLE
14505: LD_INT 0
14507: PPUSH
14508: PPUSH
// begin InGameOn ;
14509: CALL_OW 8
// DialogueOn ;
14513: CALL_OW 6
// if time09 + time09c + tick < 80 80$00 then
14517: LD_EXP 3
14521: PUSH
14522: LD_EXP 4
14526: PLUS
14527: PUSH
14528: LD_OWVAR 1
14532: PLUS
14533: PUSH
14534: LD_INT 168000
14536: LESS
14537: IFFALSE 14546
// SetAchievement ( ACH_HSPEED_9 ) ;
14539: LD_STRING ACH_HSPEED_9
14541: PPUSH
14542: CALL_OW 543
// CenterOnNow ( Schulz ) ;
14546: LD_EXP 24
14550: PPUSH
14551: CALL 57114 0 1
// dwait ( 0 0$0.3 ) ;
14555: LD_INT 10
14557: PPUSH
14558: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
14562: LD_EXP 24
14566: PPUSH
14567: LD_STRING DL-End-1
14569: PPUSH
14570: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
14574: LD_EXP 13
14578: PPUSH
14579: LD_STRING DH-End-2
14581: PPUSH
14582: CALL_OW 88
// if IsOk ( Kaia ) then
14586: LD_EXP 18
14590: PPUSH
14591: CALL_OW 302
14595: IFFALSE 14657
// begin SaveCharacters ( Kaia , 09_Kaia ) ;
14597: LD_EXP 18
14601: PPUSH
14602: LD_STRING 09_Kaia
14604: PPUSH
14605: CALL_OW 38
// Say ( Kaia , DK-End-a-3 ) ;
14609: LD_EXP 18
14613: PPUSH
14614: LD_STRING DK-End-a-3
14616: PPUSH
14617: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
14621: LD_EXP 18
14625: PPUSH
14626: LD_STRING DK-End-a-4
14628: PPUSH
14629: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
14633: LD_EXP 24
14637: PPUSH
14638: LD_STRING DL-End-a-5
14640: PPUSH
14641: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
14645: LD_EXP 24
14649: PPUSH
14650: LD_STRING DL-End-a-6
14652: PPUSH
14653: CALL_OW 88
// end ; SaveCharacters ( Heike , 09_Heike ) ;
14657: LD_EXP 13
14661: PPUSH
14662: LD_STRING 09_Heike
14664: PPUSH
14665: CALL_OW 38
// SaveCharacters ( Schulz , 09_Schulz ) ;
14669: LD_EXP 24
14673: PPUSH
14674: LD_STRING 09_Schulz
14676: PPUSH
14677: CALL_OW 38
// if IsOk ( Basim ) then
14681: LD_EXP 25
14685: PPUSH
14686: CALL_OW 302
14690: IFFALSE 14704
// SaveCharacters ( Basim , 09_Basim ) ;
14692: LD_EXP 25
14696: PPUSH
14697: LD_STRING 09_Basim
14699: PPUSH
14700: CALL_OW 38
// if IsOk ( Givi ) then
14704: LD_EXP 14
14708: PPUSH
14709: CALL_OW 302
14713: IFFALSE 14727
// SaveCharacters ( Givi , 09_Givi ) ;
14715: LD_EXP 14
14719: PPUSH
14720: LD_STRING 09_Givi
14722: PPUSH
14723: CALL_OW 38
// if IsOk ( Mike ) then
14727: LD_EXP 15
14731: PPUSH
14732: CALL_OW 302
14736: IFFALSE 14750
// SaveCharacters ( Mike , 09_Mike ) ;
14738: LD_EXP 15
14742: PPUSH
14743: LD_STRING 09_Mike
14745: PPUSH
14746: CALL_OW 38
// if IsOk ( Ibrahim ) then
14750: LD_EXP 16
14754: PPUSH
14755: CALL_OW 302
14759: IFFALSE 14773
// SaveCharacters ( Ibrahim , 09_Ibrahim ) ;
14761: LD_EXP 16
14765: PPUSH
14766: LD_STRING 09_Ibrahim
14768: PPUSH
14769: CALL_OW 38
// if IsOk ( Kamil ) then
14773: LD_EXP 17
14777: PPUSH
14778: CALL_OW 302
14782: IFFALSE 14796
// SaveCharacters ( Kamil , 09_Kamil ) ;
14784: LD_EXP 17
14788: PPUSH
14789: LD_STRING 09_Kamil
14791: PPUSH
14792: CALL_OW 38
// if IsOk ( Sophia ) then
14796: LD_EXP 19
14800: PPUSH
14801: CALL_OW 302
14805: IFFALSE 14819
// SaveCharacters ( Sophia , 09_Sophia ) ;
14807: LD_EXP 19
14811: PPUSH
14812: LD_STRING 09_Sophia
14814: PPUSH
14815: CALL_OW 38
// if IsOk ( Markov ) then
14819: LD_EXP 20
14823: PPUSH
14824: CALL_OW 302
14828: IFFALSE 14842
// SaveCharacters ( Markov , 09_Markov ) ;
14830: LD_EXP 20
14834: PPUSH
14835: LD_STRING 09_Markov
14837: PPUSH
14838: CALL_OW 38
// if IsOk ( Olaf ) then
14842: LD_EXP 21
14846: PPUSH
14847: CALL_OW 302
14851: IFFALSE 14865
// SaveCharacters ( Olaf , 09_Olaf ) ;
14853: LD_EXP 21
14857: PPUSH
14858: LD_STRING 09_Olaf
14860: PPUSH
14861: CALL_OW 38
// if IsOk ( Kurt ) then
14865: LD_EXP 22
14869: PPUSH
14870: CALL_OW 302
14874: IFFALSE 14888
// SaveCharacters ( Kurt , 09_Kurt ) ;
14876: LD_EXP 22
14880: PPUSH
14881: LD_STRING 09_Kurt
14883: PPUSH
14884: CALL_OW 38
// if IsOk ( Aviradze ) then
14888: LD_EXP 23
14892: PPUSH
14893: CALL_OW 302
14897: IFFALSE 14911
// SaveCharacters ( Aviradze , 09_Aviradze ) ;
14899: LD_EXP 23
14903: PPUSH
14904: LD_STRING 09_Aviradze
14906: PPUSH
14907: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09_heikeSecondSquad ) ;
14911: LD_EXP 30
14915: PPUSH
14916: LD_INT 50
14918: PUSH
14919: EMPTY
14920: LIST
14921: PPUSH
14922: CALL_OW 72
14926: PPUSH
14927: LD_STRING 09_heikeSecondSquad
14929: PPUSH
14930: CALL_OW 38
// if GetTech ( tech_apeBrain , 2 ) = state_researched then
14934: LD_INT 4
14936: PPUSH
14937: LD_INT 2
14939: PPUSH
14940: CALL_OW 321
14944: PUSH
14945: LD_INT 2
14947: EQUAL
14948: IFFALSE 14960
// SaveVariable ( 1 , 09_ApeBrain ) ;
14950: LD_INT 1
14952: PPUSH
14953: LD_STRING 09_ApeBrain
14955: PPUSH
14956: CALL_OW 39
// if GetTech ( tech_apeNeural , 2 ) = state_researched then
14960: LD_INT 3
14962: PPUSH
14963: LD_INT 2
14965: PPUSH
14966: CALL_OW 321
14970: PUSH
14971: LD_INT 2
14973: EQUAL
14974: IFFALSE 14986
// SaveVariable ( 1 , 09_ApeNeural ) ;
14976: LD_INT 1
14978: PPUSH
14979: LD_STRING 09_ApeNeural
14981: PPUSH
14982: CALL_OW 39
// sib := 0 ;
14986: LD_ADDR_VAR 0 2
14990: PUSH
14991: LD_INT 0
14993: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
14994: LD_ADDR_VAR 0 1
14998: PUSH
14999: LD_INT 22
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 2
15011: PUSH
15012: LD_INT 30
15014: PUSH
15015: LD_INT 0
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 30
15024: PUSH
15025: LD_INT 1
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: LIST
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PPUSH
15041: CALL_OW 69
15045: PUSH
15046: FOR_IN
15047: IFFALSE 15080
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
15049: LD_ADDR_VAR 0 2
15053: PUSH
15054: LD_VAR 0 2
15058: PUSH
15059: LD_VAR 0 1
15063: PPUSH
15064: CALL_OW 274
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: CALL_OW 275
15076: PLUS
15077: ST_TO_ADDR
15078: GO 15046
15080: POP
15081: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
15082: LD_ADDR_VAR 0 1
15086: PUSH
15087: LD_INT 22
15089: PUSH
15090: LD_INT 2
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 2
15099: PUSH
15100: LD_INT 34
15102: PUSH
15103: LD_INT 32
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 34
15112: PUSH
15113: LD_INT 51
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: LIST
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: PUSH
15134: FOR_IN
15135: IFFALSE 15163
// sib := sib + GetCargo ( i , mat_siberit ) ;
15137: LD_ADDR_VAR 0 2
15141: PUSH
15142: LD_VAR 0 2
15146: PUSH
15147: LD_VAR 0 1
15151: PPUSH
15152: LD_INT 3
15154: PPUSH
15155: CALL_OW 289
15159: PLUS
15160: ST_TO_ADDR
15161: GO 15134
15163: POP
15164: POP
// if sib >= sibToCollect then
15165: LD_VAR 0 2
15169: PUSH
15170: LD_EXP 7
15174: GREATEREQUAL
15175: IFFALSE 15189
// AddMedal ( med1 , 1 ) else
15177: LD_STRING med1
15179: PPUSH
15180: LD_INT 1
15182: PPUSH
15183: CALL_OW 101
15187: GO 15200
// AddMedal ( med1 , - 1 ) ;
15189: LD_STRING med1
15191: PPUSH
15192: LD_INT 1
15194: NEG
15195: PPUSH
15196: CALL_OW 101
// if apeDriver or kamikazeTrained then
15200: LD_EXP 8
15204: PUSH
15205: LD_EXP 6
15209: OR
15210: IFFALSE 15224
// AddMedal ( med2 , 1 ) else
15212: LD_STRING med2
15214: PPUSH
15215: LD_INT 1
15217: PPUSH
15218: CALL_OW 101
15222: GO 15235
// AddMedal ( med2 , - 1 ) ;
15224: LD_STRING med2
15226: PPUSH
15227: LD_INT 1
15229: NEG
15230: PPUSH
15231: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
15235: LD_EXP 14
15239: PUSH
15240: LD_EXP 15
15244: PUSH
15245: LD_EXP 16
15249: PUSH
15250: LD_EXP 17
15254: PUSH
15255: LD_EXP 18
15259: PUSH
15260: LD_EXP 19
15264: PUSH
15265: LD_EXP 20
15269: PUSH
15270: LD_EXP 21
15274: PUSH
15275: LD_EXP 22
15279: PUSH
15280: LD_EXP 23
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: PPUSH
15297: LD_INT 50
15299: PUSH
15300: EMPTY
15301: LIST
15302: PPUSH
15303: CALL_OW 72
15307: NOT
15308: IFFALSE 15323
// AddMedal ( med3 , - 1 ) else
15310: LD_STRING med3
15312: PPUSH
15313: LD_INT 1
15315: NEG
15316: PPUSH
15317: CALL_OW 101
15321: GO 15333
// AddMedal ( med3 , 1 ) ;
15323: LD_STRING med3
15325: PPUSH
15326: LD_INT 1
15328: PPUSH
15329: CALL_OW 101
// GiveMedals ( MAIN ) ;
15333: LD_STRING MAIN
15335: PPUSH
15336: CALL_OW 102
// YouWin ;
15340: CALL_OW 103
// DialogueOff ;
15344: CALL_OW 7
// end ; end_of_file
15348: PPOPN 2
15350: END
// every 0 0$25 + 0 0$20 trigger playerInBase do var i , tmp ;
15351: LD_EXP 5
15355: IFFALSE 15456
15357: GO 15359
15359: DISABLE
15360: LD_INT 0
15362: PPUSH
15363: PPUSH
// begin enable ;
15364: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
15365: LD_ADDR_VAR 0 2
15369: PUSH
15370: LD_INT 9
15372: PUSH
15373: LD_INT 10
15375: PUSH
15376: LD_INT 11
15378: PUSH
15379: LD_INT 12
15381: PUSH
15382: LD_INT 13
15384: PUSH
15385: LD_INT 14
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
15396: LD_ADDR_VAR 0 1
15400: PUSH
15401: LD_VAR 0 2
15405: PUSH
15406: LD_INT 1
15408: PPUSH
15409: LD_INT 6
15411: PPUSH
15412: CALL_OW 12
15416: ARRAY
15417: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 16 then
15418: LD_VAR 0 1
15422: PPUSH
15423: CALL_OW 435
15427: PUSH
15428: LD_INT 16
15430: LESS
15431: IFFALSE 15456
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
15433: LD_INT 1
15435: PPUSH
15436: LD_INT 5
15438: PPUSH
15439: CALL_OW 12
15443: PPUSH
15444: LD_VAR 0 1
15448: PPUSH
15449: LD_INT 1
15451: PPUSH
15452: CALL_OW 55
// end ; end_of_file
15456: PPOPN 2
15458: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15459: LD_INT 0
15461: PPUSH
15462: PPUSH
// if exist_mode then
15463: LD_VAR 0 2
15467: IFFALSE 15492
// unit := CreateCharacter ( prefix & ident ) else
15469: LD_ADDR_VAR 0 5
15473: PUSH
15474: LD_VAR 0 3
15478: PUSH
15479: LD_VAR 0 1
15483: STR
15484: PPUSH
15485: CALL_OW 34
15489: ST_TO_ADDR
15490: GO 15507
// unit := NewCharacter ( ident ) ;
15492: LD_ADDR_VAR 0 5
15496: PUSH
15497: LD_VAR 0 1
15501: PPUSH
15502: CALL_OW 25
15506: ST_TO_ADDR
// result := unit ;
15507: LD_ADDR_VAR 0 4
15511: PUSH
15512: LD_VAR 0 5
15516: ST_TO_ADDR
// end ;
15517: LD_VAR 0 4
15521: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15522: LD_INT 0
15524: PPUSH
15525: PPUSH
// if not side or not nation then
15526: LD_VAR 0 1
15530: NOT
15531: PUSH
15532: LD_VAR 0 2
15536: NOT
15537: OR
15538: IFFALSE 15542
// exit ;
15540: GO 16310
// case nation of nation_american :
15542: LD_VAR 0 2
15546: PUSH
15547: LD_INT 1
15549: DOUBLE
15550: EQUAL
15551: IFTRUE 15555
15553: GO 15769
15555: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15556: LD_ADDR_VAR 0 4
15560: PUSH
15561: LD_INT 35
15563: PUSH
15564: LD_INT 45
15566: PUSH
15567: LD_INT 46
15569: PUSH
15570: LD_INT 47
15572: PUSH
15573: LD_INT 82
15575: PUSH
15576: LD_INT 83
15578: PUSH
15579: LD_INT 84
15581: PUSH
15582: LD_INT 85
15584: PUSH
15585: LD_INT 86
15587: PUSH
15588: LD_INT 1
15590: PUSH
15591: LD_INT 2
15593: PUSH
15594: LD_INT 6
15596: PUSH
15597: LD_INT 15
15599: PUSH
15600: LD_INT 16
15602: PUSH
15603: LD_INT 7
15605: PUSH
15606: LD_INT 12
15608: PUSH
15609: LD_INT 13
15611: PUSH
15612: LD_INT 10
15614: PUSH
15615: LD_INT 14
15617: PUSH
15618: LD_INT 20
15620: PUSH
15621: LD_INT 21
15623: PUSH
15624: LD_INT 22
15626: PUSH
15627: LD_INT 25
15629: PUSH
15630: LD_INT 32
15632: PUSH
15633: LD_INT 27
15635: PUSH
15636: LD_INT 36
15638: PUSH
15639: LD_INT 69
15641: PUSH
15642: LD_INT 39
15644: PUSH
15645: LD_INT 34
15647: PUSH
15648: LD_INT 40
15650: PUSH
15651: LD_INT 48
15653: PUSH
15654: LD_INT 49
15656: PUSH
15657: LD_INT 50
15659: PUSH
15660: LD_INT 51
15662: PUSH
15663: LD_INT 52
15665: PUSH
15666: LD_INT 53
15668: PUSH
15669: LD_INT 54
15671: PUSH
15672: LD_INT 55
15674: PUSH
15675: LD_INT 56
15677: PUSH
15678: LD_INT 57
15680: PUSH
15681: LD_INT 58
15683: PUSH
15684: LD_INT 59
15686: PUSH
15687: LD_INT 60
15689: PUSH
15690: LD_INT 61
15692: PUSH
15693: LD_INT 62
15695: PUSH
15696: LD_INT 80
15698: PUSH
15699: LD_INT 82
15701: PUSH
15702: LD_INT 83
15704: PUSH
15705: LD_INT 84
15707: PUSH
15708: LD_INT 85
15710: PUSH
15711: LD_INT 86
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: ST_TO_ADDR
15767: GO 16234
15769: LD_INT 2
15771: DOUBLE
15772: EQUAL
15773: IFTRUE 15777
15775: GO 16003
15777: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15778: LD_ADDR_VAR 0 4
15782: PUSH
15783: LD_INT 35
15785: PUSH
15786: LD_INT 45
15788: PUSH
15789: LD_INT 46
15791: PUSH
15792: LD_INT 47
15794: PUSH
15795: LD_INT 82
15797: PUSH
15798: LD_INT 83
15800: PUSH
15801: LD_INT 84
15803: PUSH
15804: LD_INT 85
15806: PUSH
15807: LD_INT 87
15809: PUSH
15810: LD_INT 70
15812: PUSH
15813: LD_INT 1
15815: PUSH
15816: LD_INT 11
15818: PUSH
15819: LD_INT 3
15821: PUSH
15822: LD_INT 4
15824: PUSH
15825: LD_INT 5
15827: PUSH
15828: LD_INT 6
15830: PUSH
15831: LD_INT 15
15833: PUSH
15834: LD_INT 18
15836: PUSH
15837: LD_INT 7
15839: PUSH
15840: LD_INT 17
15842: PUSH
15843: LD_INT 8
15845: PUSH
15846: LD_INT 20
15848: PUSH
15849: LD_INT 21
15851: PUSH
15852: LD_INT 22
15854: PUSH
15855: LD_INT 72
15857: PUSH
15858: LD_INT 26
15860: PUSH
15861: LD_INT 69
15863: PUSH
15864: LD_INT 39
15866: PUSH
15867: LD_INT 40
15869: PUSH
15870: LD_INT 41
15872: PUSH
15873: LD_INT 42
15875: PUSH
15876: LD_INT 43
15878: PUSH
15879: LD_INT 48
15881: PUSH
15882: LD_INT 49
15884: PUSH
15885: LD_INT 50
15887: PUSH
15888: LD_INT 51
15890: PUSH
15891: LD_INT 52
15893: PUSH
15894: LD_INT 53
15896: PUSH
15897: LD_INT 54
15899: PUSH
15900: LD_INT 55
15902: PUSH
15903: LD_INT 56
15905: PUSH
15906: LD_INT 60
15908: PUSH
15909: LD_INT 61
15911: PUSH
15912: LD_INT 62
15914: PUSH
15915: LD_INT 66
15917: PUSH
15918: LD_INT 67
15920: PUSH
15921: LD_INT 68
15923: PUSH
15924: LD_INT 81
15926: PUSH
15927: LD_INT 82
15929: PUSH
15930: LD_INT 83
15932: PUSH
15933: LD_INT 84
15935: PUSH
15936: LD_INT 85
15938: PUSH
15939: LD_INT 87
15941: PUSH
15942: LD_INT 88
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: ST_TO_ADDR
16001: GO 16234
16003: LD_INT 3
16005: DOUBLE
16006: EQUAL
16007: IFTRUE 16011
16009: GO 16233
16011: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16012: LD_ADDR_VAR 0 4
16016: PUSH
16017: LD_INT 46
16019: PUSH
16020: LD_INT 47
16022: PUSH
16023: LD_INT 1
16025: PUSH
16026: LD_INT 2
16028: PUSH
16029: LD_INT 82
16031: PUSH
16032: LD_INT 83
16034: PUSH
16035: LD_INT 84
16037: PUSH
16038: LD_INT 85
16040: PUSH
16041: LD_INT 86
16043: PUSH
16044: LD_INT 11
16046: PUSH
16047: LD_INT 9
16049: PUSH
16050: LD_INT 20
16052: PUSH
16053: LD_INT 19
16055: PUSH
16056: LD_INT 21
16058: PUSH
16059: LD_INT 24
16061: PUSH
16062: LD_INT 22
16064: PUSH
16065: LD_INT 25
16067: PUSH
16068: LD_INT 28
16070: PUSH
16071: LD_INT 29
16073: PUSH
16074: LD_INT 30
16076: PUSH
16077: LD_INT 31
16079: PUSH
16080: LD_INT 37
16082: PUSH
16083: LD_INT 38
16085: PUSH
16086: LD_INT 32
16088: PUSH
16089: LD_INT 27
16091: PUSH
16092: LD_INT 33
16094: PUSH
16095: LD_INT 69
16097: PUSH
16098: LD_INT 39
16100: PUSH
16101: LD_INT 34
16103: PUSH
16104: LD_INT 40
16106: PUSH
16107: LD_INT 71
16109: PUSH
16110: LD_INT 23
16112: PUSH
16113: LD_INT 44
16115: PUSH
16116: LD_INT 48
16118: PUSH
16119: LD_INT 49
16121: PUSH
16122: LD_INT 50
16124: PUSH
16125: LD_INT 51
16127: PUSH
16128: LD_INT 52
16130: PUSH
16131: LD_INT 53
16133: PUSH
16134: LD_INT 54
16136: PUSH
16137: LD_INT 55
16139: PUSH
16140: LD_INT 56
16142: PUSH
16143: LD_INT 57
16145: PUSH
16146: LD_INT 58
16148: PUSH
16149: LD_INT 59
16151: PUSH
16152: LD_INT 63
16154: PUSH
16155: LD_INT 64
16157: PUSH
16158: LD_INT 65
16160: PUSH
16161: LD_INT 82
16163: PUSH
16164: LD_INT 83
16166: PUSH
16167: LD_INT 84
16169: PUSH
16170: LD_INT 85
16172: PUSH
16173: LD_INT 86
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: ST_TO_ADDR
16231: GO 16234
16233: POP
// if state > - 1 and state < 3 then
16234: LD_VAR 0 3
16238: PUSH
16239: LD_INT 1
16241: NEG
16242: GREATER
16243: PUSH
16244: LD_VAR 0 3
16248: PUSH
16249: LD_INT 3
16251: LESS
16252: AND
16253: IFFALSE 16310
// for i in result do
16255: LD_ADDR_VAR 0 5
16259: PUSH
16260: LD_VAR 0 4
16264: PUSH
16265: FOR_IN
16266: IFFALSE 16308
// if GetTech ( i , side ) <> state then
16268: LD_VAR 0 5
16272: PPUSH
16273: LD_VAR 0 1
16277: PPUSH
16278: CALL_OW 321
16282: PUSH
16283: LD_VAR 0 3
16287: NONEQUAL
16288: IFFALSE 16306
// result := result diff i ;
16290: LD_ADDR_VAR 0 4
16294: PUSH
16295: LD_VAR 0 4
16299: PUSH
16300: LD_VAR 0 5
16304: DIFF
16305: ST_TO_ADDR
16306: GO 16265
16308: POP
16309: POP
// end ;
16310: LD_VAR 0 4
16314: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16315: LD_INT 0
16317: PPUSH
16318: PPUSH
16319: PPUSH
// result := true ;
16320: LD_ADDR_VAR 0 3
16324: PUSH
16325: LD_INT 1
16327: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16328: LD_ADDR_VAR 0 5
16332: PUSH
16333: LD_VAR 0 2
16337: PPUSH
16338: CALL_OW 480
16342: ST_TO_ADDR
// if not tmp then
16343: LD_VAR 0 5
16347: NOT
16348: IFFALSE 16352
// exit ;
16350: GO 16401
// for i in tmp do
16352: LD_ADDR_VAR 0 4
16356: PUSH
16357: LD_VAR 0 5
16361: PUSH
16362: FOR_IN
16363: IFFALSE 16399
// if GetTech ( i , side ) <> state_researched then
16365: LD_VAR 0 4
16369: PPUSH
16370: LD_VAR 0 1
16374: PPUSH
16375: CALL_OW 321
16379: PUSH
16380: LD_INT 2
16382: NONEQUAL
16383: IFFALSE 16397
// begin result := false ;
16385: LD_ADDR_VAR 0 3
16389: PUSH
16390: LD_INT 0
16392: ST_TO_ADDR
// exit ;
16393: POP
16394: POP
16395: GO 16401
// end ;
16397: GO 16362
16399: POP
16400: POP
// end ;
16401: LD_VAR 0 3
16405: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16406: LD_INT 0
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
16416: PPUSH
16417: PPUSH
16418: PPUSH
16419: PPUSH
16420: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16421: LD_VAR 0 1
16425: NOT
16426: PUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 257
16436: PUSH
16437: LD_INT 9
16439: NONEQUAL
16440: OR
16441: IFFALSE 16445
// exit ;
16443: GO 17018
// side := GetSide ( unit ) ;
16445: LD_ADDR_VAR 0 9
16449: PUSH
16450: LD_VAR 0 1
16454: PPUSH
16455: CALL_OW 255
16459: ST_TO_ADDR
// tech_space := tech_spacanom ;
16460: LD_ADDR_VAR 0 12
16464: PUSH
16465: LD_INT 29
16467: ST_TO_ADDR
// tech_time := tech_taurad ;
16468: LD_ADDR_VAR 0 13
16472: PUSH
16473: LD_INT 28
16475: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16476: LD_ADDR_VAR 0 11
16480: PUSH
16481: LD_VAR 0 1
16485: PPUSH
16486: CALL_OW 310
16490: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16491: LD_VAR 0 11
16495: PPUSH
16496: CALL_OW 247
16500: PUSH
16501: LD_INT 2
16503: EQUAL
16504: IFFALSE 16508
// exit ;
16506: GO 17018
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16508: LD_ADDR_VAR 0 8
16512: PUSH
16513: LD_INT 81
16515: PUSH
16516: LD_VAR 0 9
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 3
16527: PUSH
16528: LD_INT 21
16530: PUSH
16531: LD_INT 3
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PPUSH
16546: CALL_OW 69
16550: ST_TO_ADDR
// if not tmp then
16551: LD_VAR 0 8
16555: NOT
16556: IFFALSE 16560
// exit ;
16558: GO 17018
// if in_unit then
16560: LD_VAR 0 11
16564: IFFALSE 16588
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16566: LD_ADDR_VAR 0 10
16570: PUSH
16571: LD_VAR 0 8
16575: PPUSH
16576: LD_VAR 0 11
16580: PPUSH
16581: CALL_OW 74
16585: ST_TO_ADDR
16586: GO 16608
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16588: LD_ADDR_VAR 0 10
16592: PUSH
16593: LD_VAR 0 8
16597: PPUSH
16598: LD_VAR 0 1
16602: PPUSH
16603: CALL_OW 74
16607: ST_TO_ADDR
// if not enemy then
16608: LD_VAR 0 10
16612: NOT
16613: IFFALSE 16617
// exit ;
16615: GO 17018
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16617: LD_VAR 0 11
16621: PUSH
16622: LD_VAR 0 11
16626: PPUSH
16627: LD_VAR 0 10
16631: PPUSH
16632: CALL_OW 296
16636: PUSH
16637: LD_INT 13
16639: GREATER
16640: AND
16641: PUSH
16642: LD_VAR 0 1
16646: PPUSH
16647: LD_VAR 0 10
16651: PPUSH
16652: CALL_OW 296
16656: PUSH
16657: LD_INT 12
16659: GREATER
16660: OR
16661: IFFALSE 16665
// exit ;
16663: GO 17018
// missile := [ 1 ] ;
16665: LD_ADDR_VAR 0 14
16669: PUSH
16670: LD_INT 1
16672: PUSH
16673: EMPTY
16674: LIST
16675: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16676: LD_VAR 0 9
16680: PPUSH
16681: LD_VAR 0 12
16685: PPUSH
16686: CALL_OW 325
16690: IFFALSE 16719
// missile := Replace ( missile , missile + 1 , 2 ) ;
16692: LD_ADDR_VAR 0 14
16696: PUSH
16697: LD_VAR 0 14
16701: PPUSH
16702: LD_VAR 0 14
16706: PUSH
16707: LD_INT 1
16709: PLUS
16710: PPUSH
16711: LD_INT 2
16713: PPUSH
16714: CALL_OW 1
16718: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16719: LD_VAR 0 9
16723: PPUSH
16724: LD_VAR 0 13
16728: PPUSH
16729: CALL_OW 325
16733: PUSH
16734: LD_VAR 0 10
16738: PPUSH
16739: CALL_OW 255
16743: PPUSH
16744: LD_VAR 0 13
16748: PPUSH
16749: CALL_OW 325
16753: NOT
16754: AND
16755: IFFALSE 16784
// missile := Replace ( missile , missile + 1 , 3 ) ;
16757: LD_ADDR_VAR 0 14
16761: PUSH
16762: LD_VAR 0 14
16766: PPUSH
16767: LD_VAR 0 14
16771: PUSH
16772: LD_INT 1
16774: PLUS
16775: PPUSH
16776: LD_INT 3
16778: PPUSH
16779: CALL_OW 1
16783: ST_TO_ADDR
// if missile < 2 then
16784: LD_VAR 0 14
16788: PUSH
16789: LD_INT 2
16791: LESS
16792: IFFALSE 16796
// exit ;
16794: GO 17018
// x := GetX ( enemy ) ;
16796: LD_ADDR_VAR 0 4
16800: PUSH
16801: LD_VAR 0 10
16805: PPUSH
16806: CALL_OW 250
16810: ST_TO_ADDR
// y := GetY ( enemy ) ;
16811: LD_ADDR_VAR 0 5
16815: PUSH
16816: LD_VAR 0 10
16820: PPUSH
16821: CALL_OW 251
16825: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16826: LD_ADDR_VAR 0 6
16830: PUSH
16831: LD_VAR 0 4
16835: PUSH
16836: LD_INT 1
16838: NEG
16839: PPUSH
16840: LD_INT 1
16842: PPUSH
16843: CALL_OW 12
16847: PLUS
16848: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16849: LD_ADDR_VAR 0 7
16853: PUSH
16854: LD_VAR 0 5
16858: PUSH
16859: LD_INT 1
16861: NEG
16862: PPUSH
16863: LD_INT 1
16865: PPUSH
16866: CALL_OW 12
16870: PLUS
16871: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16872: LD_VAR 0 6
16876: PPUSH
16877: LD_VAR 0 7
16881: PPUSH
16882: CALL_OW 488
16886: NOT
16887: IFFALSE 16909
// begin _x := x ;
16889: LD_ADDR_VAR 0 6
16893: PUSH
16894: LD_VAR 0 4
16898: ST_TO_ADDR
// _y := y ;
16899: LD_ADDR_VAR 0 7
16903: PUSH
16904: LD_VAR 0 5
16908: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16909: LD_ADDR_VAR 0 3
16913: PUSH
16914: LD_INT 1
16916: PPUSH
16917: LD_VAR 0 14
16921: PPUSH
16922: CALL_OW 12
16926: ST_TO_ADDR
// case i of 1 :
16927: LD_VAR 0 3
16931: PUSH
16932: LD_INT 1
16934: DOUBLE
16935: EQUAL
16936: IFTRUE 16940
16938: GO 16957
16940: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16941: LD_VAR 0 1
16945: PPUSH
16946: LD_VAR 0 10
16950: PPUSH
16951: CALL_OW 115
16955: GO 17018
16957: LD_INT 2
16959: DOUBLE
16960: EQUAL
16961: IFTRUE 16965
16963: GO 16987
16965: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16966: LD_VAR 0 1
16970: PPUSH
16971: LD_VAR 0 6
16975: PPUSH
16976: LD_VAR 0 7
16980: PPUSH
16981: CALL_OW 153
16985: GO 17018
16987: LD_INT 3
16989: DOUBLE
16990: EQUAL
16991: IFTRUE 16995
16993: GO 17017
16995: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16996: LD_VAR 0 1
17000: PPUSH
17001: LD_VAR 0 6
17005: PPUSH
17006: LD_VAR 0 7
17010: PPUSH
17011: CALL_OW 154
17015: GO 17018
17017: POP
// end ;
17018: LD_VAR 0 2
17022: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17023: LD_INT 0
17025: PPUSH
17026: PPUSH
17027: PPUSH
17028: PPUSH
17029: PPUSH
17030: PPUSH
// if not unit or not building then
17031: LD_VAR 0 1
17035: NOT
17036: PUSH
17037: LD_VAR 0 2
17041: NOT
17042: OR
17043: IFFALSE 17047
// exit ;
17045: GO 17205
// x := GetX ( building ) ;
17047: LD_ADDR_VAR 0 5
17051: PUSH
17052: LD_VAR 0 2
17056: PPUSH
17057: CALL_OW 250
17061: ST_TO_ADDR
// y := GetY ( building ) ;
17062: LD_ADDR_VAR 0 6
17066: PUSH
17067: LD_VAR 0 2
17071: PPUSH
17072: CALL_OW 251
17076: ST_TO_ADDR
// for i = 0 to 5 do
17077: LD_ADDR_VAR 0 4
17081: PUSH
17082: DOUBLE
17083: LD_INT 0
17085: DEC
17086: ST_TO_ADDR
17087: LD_INT 5
17089: PUSH
17090: FOR_TO
17091: IFFALSE 17203
// begin _x := ShiftX ( x , i , 3 ) ;
17093: LD_ADDR_VAR 0 7
17097: PUSH
17098: LD_VAR 0 5
17102: PPUSH
17103: LD_VAR 0 4
17107: PPUSH
17108: LD_INT 3
17110: PPUSH
17111: CALL_OW 272
17115: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17116: LD_ADDR_VAR 0 8
17120: PUSH
17121: LD_VAR 0 6
17125: PPUSH
17126: LD_VAR 0 4
17130: PPUSH
17131: LD_INT 3
17133: PPUSH
17134: CALL_OW 273
17138: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17139: LD_VAR 0 7
17143: PPUSH
17144: LD_VAR 0 8
17148: PPUSH
17149: CALL_OW 488
17153: NOT
17154: IFFALSE 17158
// continue ;
17156: GO 17090
// if HexInfo ( _x , _y ) = 0 then
17158: LD_VAR 0 7
17162: PPUSH
17163: LD_VAR 0 8
17167: PPUSH
17168: CALL_OW 428
17172: PUSH
17173: LD_INT 0
17175: EQUAL
17176: IFFALSE 17201
// begin ComMoveXY ( unit , _x , _y ) ;
17178: LD_VAR 0 1
17182: PPUSH
17183: LD_VAR 0 7
17187: PPUSH
17188: LD_VAR 0 8
17192: PPUSH
17193: CALL_OW 111
// exit ;
17197: POP
17198: POP
17199: GO 17205
// end ; end ;
17201: GO 17090
17203: POP
17204: POP
// end ;
17205: LD_VAR 0 3
17209: RET
// export function ScanBase ( side , base_area ) ; begin
17210: LD_INT 0
17212: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17213: LD_ADDR_VAR 0 3
17217: PUSH
17218: LD_VAR 0 2
17222: PPUSH
17223: LD_INT 81
17225: PUSH
17226: LD_VAR 0 1
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PPUSH
17235: CALL_OW 70
17239: ST_TO_ADDR
// end ;
17240: LD_VAR 0 3
17244: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17245: LD_INT 0
17247: PPUSH
17248: PPUSH
17249: PPUSH
17250: PPUSH
// result := false ;
17251: LD_ADDR_VAR 0 2
17255: PUSH
17256: LD_INT 0
17258: ST_TO_ADDR
// side := GetSide ( unit ) ;
17259: LD_ADDR_VAR 0 3
17263: PUSH
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 255
17273: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17274: LD_ADDR_VAR 0 4
17278: PUSH
17279: LD_VAR 0 1
17283: PPUSH
17284: CALL_OW 248
17288: ST_TO_ADDR
// case nat of 1 :
17289: LD_VAR 0 4
17293: PUSH
17294: LD_INT 1
17296: DOUBLE
17297: EQUAL
17298: IFTRUE 17302
17300: GO 17313
17302: POP
// tech := tech_lassight ; 2 :
17303: LD_ADDR_VAR 0 5
17307: PUSH
17308: LD_INT 12
17310: ST_TO_ADDR
17311: GO 17352
17313: LD_INT 2
17315: DOUBLE
17316: EQUAL
17317: IFTRUE 17321
17319: GO 17332
17321: POP
// tech := tech_mortar ; 3 :
17322: LD_ADDR_VAR 0 5
17326: PUSH
17327: LD_INT 41
17329: ST_TO_ADDR
17330: GO 17352
17332: LD_INT 3
17334: DOUBLE
17335: EQUAL
17336: IFTRUE 17340
17338: GO 17351
17340: POP
// tech := tech_bazooka ; end ;
17341: LD_ADDR_VAR 0 5
17345: PUSH
17346: LD_INT 44
17348: ST_TO_ADDR
17349: GO 17352
17351: POP
// if Researched ( side , tech ) then
17352: LD_VAR 0 3
17356: PPUSH
17357: LD_VAR 0 5
17361: PPUSH
17362: CALL_OW 325
17366: IFFALSE 17393
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17368: LD_ADDR_VAR 0 2
17372: PUSH
17373: LD_INT 5
17375: PUSH
17376: LD_INT 8
17378: PUSH
17379: LD_INT 9
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: LIST
17386: PUSH
17387: LD_VAR 0 4
17391: ARRAY
17392: ST_TO_ADDR
// end ;
17393: LD_VAR 0 2
17397: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17398: LD_INT 0
17400: PPUSH
17401: PPUSH
17402: PPUSH
// if not mines then
17403: LD_VAR 0 2
17407: NOT
17408: IFFALSE 17412
// exit ;
17410: GO 17556
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17412: LD_ADDR_VAR 0 5
17416: PUSH
17417: LD_INT 81
17419: PUSH
17420: LD_VAR 0 1
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 3
17431: PUSH
17432: LD_INT 21
17434: PUSH
17435: LD_INT 3
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PPUSH
17450: CALL_OW 69
17454: ST_TO_ADDR
// for i in mines do
17455: LD_ADDR_VAR 0 4
17459: PUSH
17460: LD_VAR 0 2
17464: PUSH
17465: FOR_IN
17466: IFFALSE 17554
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17468: LD_VAR 0 4
17472: PUSH
17473: LD_INT 1
17475: ARRAY
17476: PPUSH
17477: LD_VAR 0 4
17481: PUSH
17482: LD_INT 2
17484: ARRAY
17485: PPUSH
17486: CALL_OW 458
17490: NOT
17491: IFFALSE 17495
// continue ;
17493: GO 17465
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17495: LD_VAR 0 4
17499: PUSH
17500: LD_INT 1
17502: ARRAY
17503: PPUSH
17504: LD_VAR 0 4
17508: PUSH
17509: LD_INT 2
17511: ARRAY
17512: PPUSH
17513: CALL_OW 428
17517: PUSH
17518: LD_VAR 0 5
17522: IN
17523: IFFALSE 17552
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17525: LD_VAR 0 4
17529: PUSH
17530: LD_INT 1
17532: ARRAY
17533: PPUSH
17534: LD_VAR 0 4
17538: PUSH
17539: LD_INT 2
17541: ARRAY
17542: PPUSH
17543: LD_VAR 0 1
17547: PPUSH
17548: CALL_OW 456
// end ;
17552: GO 17465
17554: POP
17555: POP
// end ;
17556: LD_VAR 0 3
17560: RET
// export function Count ( array ) ; begin
17561: LD_INT 0
17563: PPUSH
// result := array + 0 ;
17564: LD_ADDR_VAR 0 2
17568: PUSH
17569: LD_VAR 0 1
17573: PUSH
17574: LD_INT 0
17576: PLUS
17577: ST_TO_ADDR
// end ;
17578: LD_VAR 0 2
17582: RET
// export function IsEmpty ( building ) ; begin
17583: LD_INT 0
17585: PPUSH
// if not building then
17586: LD_VAR 0 1
17590: NOT
17591: IFFALSE 17595
// exit ;
17593: GO 17638
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17595: LD_ADDR_VAR 0 2
17599: PUSH
17600: LD_VAR 0 1
17604: PUSH
17605: LD_INT 22
17607: PUSH
17608: LD_VAR 0 1
17612: PPUSH
17613: CALL_OW 255
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 58
17624: PUSH
17625: EMPTY
17626: LIST
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PPUSH
17632: CALL_OW 69
17636: IN
17637: ST_TO_ADDR
// end ;
17638: LD_VAR 0 2
17642: RET
// export function IsNotFull ( building ) ; var places ; begin
17643: LD_INT 0
17645: PPUSH
17646: PPUSH
// if not building then
17647: LD_VAR 0 1
17651: NOT
17652: IFFALSE 17656
// exit ;
17654: GO 17684
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17656: LD_ADDR_VAR 0 2
17660: PUSH
17661: LD_VAR 0 1
17665: PPUSH
17666: LD_INT 3
17668: PUSH
17669: LD_INT 62
17671: PUSH
17672: EMPTY
17673: LIST
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PPUSH
17679: CALL_OW 72
17683: ST_TO_ADDR
// end ;
17684: LD_VAR 0 2
17688: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17689: LD_INT 0
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
// tmp := [ ] ;
17695: LD_ADDR_VAR 0 3
17699: PUSH
17700: EMPTY
17701: ST_TO_ADDR
// list := [ ] ;
17702: LD_ADDR_VAR 0 5
17706: PUSH
17707: EMPTY
17708: ST_TO_ADDR
// for i = 16 to 25 do
17709: LD_ADDR_VAR 0 4
17713: PUSH
17714: DOUBLE
17715: LD_INT 16
17717: DEC
17718: ST_TO_ADDR
17719: LD_INT 25
17721: PUSH
17722: FOR_TO
17723: IFFALSE 17796
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17725: LD_ADDR_VAR 0 3
17729: PUSH
17730: LD_VAR 0 3
17734: PUSH
17735: LD_INT 22
17737: PUSH
17738: LD_VAR 0 1
17742: PPUSH
17743: CALL_OW 255
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 91
17754: PUSH
17755: LD_VAR 0 1
17759: PUSH
17760: LD_INT 6
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 30
17770: PUSH
17771: LD_VAR 0 4
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: EMPTY
17786: LIST
17787: PPUSH
17788: CALL_OW 69
17792: ADD
17793: ST_TO_ADDR
17794: GO 17722
17796: POP
17797: POP
// for i = 1 to tmp do
17798: LD_ADDR_VAR 0 4
17802: PUSH
17803: DOUBLE
17804: LD_INT 1
17806: DEC
17807: ST_TO_ADDR
17808: LD_VAR 0 3
17812: PUSH
17813: FOR_TO
17814: IFFALSE 17902
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17816: LD_ADDR_VAR 0 5
17820: PUSH
17821: LD_VAR 0 5
17825: PUSH
17826: LD_VAR 0 3
17830: PUSH
17831: LD_VAR 0 4
17835: ARRAY
17836: PPUSH
17837: CALL_OW 266
17841: PUSH
17842: LD_VAR 0 3
17846: PUSH
17847: LD_VAR 0 4
17851: ARRAY
17852: PPUSH
17853: CALL_OW 250
17857: PUSH
17858: LD_VAR 0 3
17862: PUSH
17863: LD_VAR 0 4
17867: ARRAY
17868: PPUSH
17869: CALL_OW 251
17873: PUSH
17874: LD_VAR 0 3
17878: PUSH
17879: LD_VAR 0 4
17883: ARRAY
17884: PPUSH
17885: CALL_OW 254
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: ADD
17899: ST_TO_ADDR
17900: GO 17813
17902: POP
17903: POP
// result := list ;
17904: LD_ADDR_VAR 0 2
17908: PUSH
17909: LD_VAR 0 5
17913: ST_TO_ADDR
// end ;
17914: LD_VAR 0 2
17918: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17919: LD_INT 0
17921: PPUSH
17922: PPUSH
17923: PPUSH
17924: PPUSH
17925: PPUSH
17926: PPUSH
17927: PPUSH
// if not factory then
17928: LD_VAR 0 1
17932: NOT
17933: IFFALSE 17937
// exit ;
17935: GO 18530
// if control = control_apeman then
17937: LD_VAR 0 4
17941: PUSH
17942: LD_INT 5
17944: EQUAL
17945: IFFALSE 18054
// begin tmp := UnitsInside ( factory ) ;
17947: LD_ADDR_VAR 0 8
17951: PUSH
17952: LD_VAR 0 1
17956: PPUSH
17957: CALL_OW 313
17961: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17962: LD_VAR 0 8
17966: PPUSH
17967: LD_INT 25
17969: PUSH
17970: LD_INT 12
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PPUSH
17977: CALL_OW 72
17981: NOT
17982: IFFALSE 17992
// control := control_manual ;
17984: LD_ADDR_VAR 0 4
17988: PUSH
17989: LD_INT 1
17991: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17992: LD_ADDR_VAR 0 8
17996: PUSH
17997: LD_VAR 0 1
18001: PPUSH
18002: CALL 17689 0 1
18006: ST_TO_ADDR
// if tmp then
18007: LD_VAR 0 8
18011: IFFALSE 18054
// begin for i in tmp do
18013: LD_ADDR_VAR 0 7
18017: PUSH
18018: LD_VAR 0 8
18022: PUSH
18023: FOR_IN
18024: IFFALSE 18052
// if i [ 1 ] = b_ext_radio then
18026: LD_VAR 0 7
18030: PUSH
18031: LD_INT 1
18033: ARRAY
18034: PUSH
18035: LD_INT 22
18037: EQUAL
18038: IFFALSE 18050
// begin control := control_remote ;
18040: LD_ADDR_VAR 0 4
18044: PUSH
18045: LD_INT 2
18047: ST_TO_ADDR
// break ;
18048: GO 18052
// end ;
18050: GO 18023
18052: POP
18053: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18054: LD_VAR 0 1
18058: PPUSH
18059: LD_VAR 0 2
18063: PPUSH
18064: LD_VAR 0 3
18068: PPUSH
18069: LD_VAR 0 4
18073: PPUSH
18074: LD_VAR 0 5
18078: PPUSH
18079: CALL_OW 448
18083: IFFALSE 18118
// begin result := [ chassis , engine , control , weapon ] ;
18085: LD_ADDR_VAR 0 6
18089: PUSH
18090: LD_VAR 0 2
18094: PUSH
18095: LD_VAR 0 3
18099: PUSH
18100: LD_VAR 0 4
18104: PUSH
18105: LD_VAR 0 5
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: ST_TO_ADDR
// exit ;
18116: GO 18530
// end ; _chassis := AvailableChassisList ( factory ) ;
18118: LD_ADDR_VAR 0 9
18122: PUSH
18123: LD_VAR 0 1
18127: PPUSH
18128: CALL_OW 475
18132: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18133: LD_ADDR_VAR 0 11
18137: PUSH
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 476
18147: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18148: LD_ADDR_VAR 0 12
18152: PUSH
18153: LD_VAR 0 1
18157: PPUSH
18158: CALL_OW 477
18162: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18163: LD_ADDR_VAR 0 10
18167: PUSH
18168: LD_VAR 0 1
18172: PPUSH
18173: CALL_OW 478
18177: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18178: LD_VAR 0 9
18182: NOT
18183: PUSH
18184: LD_VAR 0 11
18188: NOT
18189: OR
18190: PUSH
18191: LD_VAR 0 12
18195: NOT
18196: OR
18197: PUSH
18198: LD_VAR 0 10
18202: NOT
18203: OR
18204: IFFALSE 18239
// begin result := [ chassis , engine , control , weapon ] ;
18206: LD_ADDR_VAR 0 6
18210: PUSH
18211: LD_VAR 0 2
18215: PUSH
18216: LD_VAR 0 3
18220: PUSH
18221: LD_VAR 0 4
18225: PUSH
18226: LD_VAR 0 5
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: ST_TO_ADDR
// exit ;
18237: GO 18530
// end ; if not chassis in _chassis then
18239: LD_VAR 0 2
18243: PUSH
18244: LD_VAR 0 9
18248: IN
18249: NOT
18250: IFFALSE 18276
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18252: LD_ADDR_VAR 0 2
18256: PUSH
18257: LD_VAR 0 9
18261: PUSH
18262: LD_INT 1
18264: PPUSH
18265: LD_VAR 0 9
18269: PPUSH
18270: CALL_OW 12
18274: ARRAY
18275: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18276: LD_VAR 0 2
18280: PPUSH
18281: LD_VAR 0 3
18285: PPUSH
18286: CALL 18535 0 2
18290: NOT
18291: IFFALSE 18350
// repeat engine := _engine [ 1 ] ;
18293: LD_ADDR_VAR 0 3
18297: PUSH
18298: LD_VAR 0 11
18302: PUSH
18303: LD_INT 1
18305: ARRAY
18306: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18307: LD_ADDR_VAR 0 11
18311: PUSH
18312: LD_VAR 0 11
18316: PPUSH
18317: LD_INT 1
18319: PPUSH
18320: CALL_OW 3
18324: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18325: LD_VAR 0 2
18329: PPUSH
18330: LD_VAR 0 3
18334: PPUSH
18335: CALL 18535 0 2
18339: PUSH
18340: LD_VAR 0 11
18344: PUSH
18345: EMPTY
18346: EQUAL
18347: OR
18348: IFFALSE 18293
// if not control in _control then
18350: LD_VAR 0 4
18354: PUSH
18355: LD_VAR 0 12
18359: IN
18360: NOT
18361: IFFALSE 18387
// control := _control [ rand ( 1 , _control ) ] ;
18363: LD_ADDR_VAR 0 4
18367: PUSH
18368: LD_VAR 0 12
18372: PUSH
18373: LD_INT 1
18375: PPUSH
18376: LD_VAR 0 12
18380: PPUSH
18381: CALL_OW 12
18385: ARRAY
18386: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18387: LD_VAR 0 2
18391: PPUSH
18392: LD_VAR 0 5
18396: PPUSH
18397: CALL 18755 0 2
18401: NOT
18402: IFFALSE 18461
// repeat weapon := _weapon [ 1 ] ;
18404: LD_ADDR_VAR 0 5
18408: PUSH
18409: LD_VAR 0 10
18413: PUSH
18414: LD_INT 1
18416: ARRAY
18417: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18418: LD_ADDR_VAR 0 10
18422: PUSH
18423: LD_VAR 0 10
18427: PPUSH
18428: LD_INT 1
18430: PPUSH
18431: CALL_OW 3
18435: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18436: LD_VAR 0 2
18440: PPUSH
18441: LD_VAR 0 5
18445: PPUSH
18446: CALL 18755 0 2
18450: PUSH
18451: LD_VAR 0 10
18455: PUSH
18456: EMPTY
18457: EQUAL
18458: OR
18459: IFFALSE 18404
// result := [ ] ;
18461: LD_ADDR_VAR 0 6
18465: PUSH
18466: EMPTY
18467: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18468: LD_VAR 0 1
18472: PPUSH
18473: LD_VAR 0 2
18477: PPUSH
18478: LD_VAR 0 3
18482: PPUSH
18483: LD_VAR 0 4
18487: PPUSH
18488: LD_VAR 0 5
18492: PPUSH
18493: CALL_OW 448
18497: IFFALSE 18530
// result := [ chassis , engine , control , weapon ] ;
18499: LD_ADDR_VAR 0 6
18503: PUSH
18504: LD_VAR 0 2
18508: PUSH
18509: LD_VAR 0 3
18513: PUSH
18514: LD_VAR 0 4
18518: PUSH
18519: LD_VAR 0 5
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: ST_TO_ADDR
// end ;
18530: LD_VAR 0 6
18534: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18535: LD_INT 0
18537: PPUSH
// if not chassis or not engine then
18538: LD_VAR 0 1
18542: NOT
18543: PUSH
18544: LD_VAR 0 2
18548: NOT
18549: OR
18550: IFFALSE 18554
// exit ;
18552: GO 18750
// case engine of engine_solar :
18554: LD_VAR 0 2
18558: PUSH
18559: LD_INT 2
18561: DOUBLE
18562: EQUAL
18563: IFTRUE 18567
18565: GO 18605
18567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18568: LD_ADDR_VAR 0 3
18572: PUSH
18573: LD_INT 11
18575: PUSH
18576: LD_INT 12
18578: PUSH
18579: LD_INT 13
18581: PUSH
18582: LD_INT 14
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: LD_INT 2
18590: PUSH
18591: LD_INT 3
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: ST_TO_ADDR
18603: GO 18734
18605: LD_INT 1
18607: DOUBLE
18608: EQUAL
18609: IFTRUE 18613
18611: GO 18675
18613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18614: LD_ADDR_VAR 0 3
18618: PUSH
18619: LD_INT 11
18621: PUSH
18622: LD_INT 12
18624: PUSH
18625: LD_INT 13
18627: PUSH
18628: LD_INT 14
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: LD_INT 2
18636: PUSH
18637: LD_INT 3
18639: PUSH
18640: LD_INT 4
18642: PUSH
18643: LD_INT 5
18645: PUSH
18646: LD_INT 21
18648: PUSH
18649: LD_INT 23
18651: PUSH
18652: LD_INT 22
18654: PUSH
18655: LD_INT 24
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: ST_TO_ADDR
18673: GO 18734
18675: LD_INT 3
18677: DOUBLE
18678: EQUAL
18679: IFTRUE 18683
18681: GO 18733
18683: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18684: LD_ADDR_VAR 0 3
18688: PUSH
18689: LD_INT 13
18691: PUSH
18692: LD_INT 14
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: LD_INT 3
18700: PUSH
18701: LD_INT 4
18703: PUSH
18704: LD_INT 5
18706: PUSH
18707: LD_INT 21
18709: PUSH
18710: LD_INT 22
18712: PUSH
18713: LD_INT 23
18715: PUSH
18716: LD_INT 24
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: ST_TO_ADDR
18731: GO 18734
18733: POP
// result := ( chassis in result ) ;
18734: LD_ADDR_VAR 0 3
18738: PUSH
18739: LD_VAR 0 1
18743: PUSH
18744: LD_VAR 0 3
18748: IN
18749: ST_TO_ADDR
// end ;
18750: LD_VAR 0 3
18754: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18755: LD_INT 0
18757: PPUSH
// if not chassis or not weapon then
18758: LD_VAR 0 1
18762: NOT
18763: PUSH
18764: LD_VAR 0 2
18768: NOT
18769: OR
18770: IFFALSE 18774
// exit ;
18772: GO 19834
// case weapon of us_machine_gun :
18774: LD_VAR 0 2
18778: PUSH
18779: LD_INT 2
18781: DOUBLE
18782: EQUAL
18783: IFTRUE 18787
18785: GO 18817
18787: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18788: LD_ADDR_VAR 0 3
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: LD_INT 2
18798: PUSH
18799: LD_INT 3
18801: PUSH
18802: LD_INT 4
18804: PUSH
18805: LD_INT 5
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: ST_TO_ADDR
18815: GO 19818
18817: LD_INT 3
18819: DOUBLE
18820: EQUAL
18821: IFTRUE 18825
18823: GO 18855
18825: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18826: LD_ADDR_VAR 0 3
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: LD_INT 3
18839: PUSH
18840: LD_INT 4
18842: PUSH
18843: LD_INT 5
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: ST_TO_ADDR
18853: GO 19818
18855: LD_INT 11
18857: DOUBLE
18858: EQUAL
18859: IFTRUE 18863
18861: GO 18893
18863: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: LD_INT 1
18871: PUSH
18872: LD_INT 2
18874: PUSH
18875: LD_INT 3
18877: PUSH
18878: LD_INT 4
18880: PUSH
18881: LD_INT 5
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: ST_TO_ADDR
18891: GO 19818
18893: LD_INT 4
18895: DOUBLE
18896: EQUAL
18897: IFTRUE 18901
18899: GO 18927
18901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18902: LD_ADDR_VAR 0 3
18906: PUSH
18907: LD_INT 2
18909: PUSH
18910: LD_INT 3
18912: PUSH
18913: LD_INT 4
18915: PUSH
18916: LD_INT 5
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: ST_TO_ADDR
18925: GO 19818
18927: LD_INT 5
18929: DOUBLE
18930: EQUAL
18931: IFTRUE 18935
18933: GO 18961
18935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18936: LD_ADDR_VAR 0 3
18940: PUSH
18941: LD_INT 2
18943: PUSH
18944: LD_INT 3
18946: PUSH
18947: LD_INT 4
18949: PUSH
18950: LD_INT 5
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: ST_TO_ADDR
18959: GO 19818
18961: LD_INT 9
18963: DOUBLE
18964: EQUAL
18965: IFTRUE 18969
18967: GO 18995
18969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18970: LD_ADDR_VAR 0 3
18974: PUSH
18975: LD_INT 2
18977: PUSH
18978: LD_INT 3
18980: PUSH
18981: LD_INT 4
18983: PUSH
18984: LD_INT 5
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: ST_TO_ADDR
18993: GO 19818
18995: LD_INT 7
18997: DOUBLE
18998: EQUAL
18999: IFTRUE 19003
19001: GO 19029
19003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19004: LD_ADDR_VAR 0 3
19008: PUSH
19009: LD_INT 2
19011: PUSH
19012: LD_INT 3
19014: PUSH
19015: LD_INT 4
19017: PUSH
19018: LD_INT 5
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: ST_TO_ADDR
19027: GO 19818
19029: LD_INT 12
19031: DOUBLE
19032: EQUAL
19033: IFTRUE 19037
19035: GO 19063
19037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19038: LD_ADDR_VAR 0 3
19042: PUSH
19043: LD_INT 2
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: LD_INT 4
19051: PUSH
19052: LD_INT 5
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: ST_TO_ADDR
19061: GO 19818
19063: LD_INT 13
19065: DOUBLE
19066: EQUAL
19067: IFTRUE 19071
19069: GO 19097
19071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19072: LD_ADDR_VAR 0 3
19076: PUSH
19077: LD_INT 2
19079: PUSH
19080: LD_INT 3
19082: PUSH
19083: LD_INT 4
19085: PUSH
19086: LD_INT 5
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: ST_TO_ADDR
19095: GO 19818
19097: LD_INT 14
19099: DOUBLE
19100: EQUAL
19101: IFTRUE 19105
19103: GO 19123
19105: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19106: LD_ADDR_VAR 0 3
19110: PUSH
19111: LD_INT 4
19113: PUSH
19114: LD_INT 5
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: ST_TO_ADDR
19121: GO 19818
19123: LD_INT 6
19125: DOUBLE
19126: EQUAL
19127: IFTRUE 19131
19129: GO 19149
19131: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19132: LD_ADDR_VAR 0 3
19136: PUSH
19137: LD_INT 4
19139: PUSH
19140: LD_INT 5
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: ST_TO_ADDR
19147: GO 19818
19149: LD_INT 10
19151: DOUBLE
19152: EQUAL
19153: IFTRUE 19157
19155: GO 19175
19157: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19158: LD_ADDR_VAR 0 3
19162: PUSH
19163: LD_INT 4
19165: PUSH
19166: LD_INT 5
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: ST_TO_ADDR
19173: GO 19818
19175: LD_INT 22
19177: DOUBLE
19178: EQUAL
19179: IFTRUE 19183
19181: GO 19209
19183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19184: LD_ADDR_VAR 0 3
19188: PUSH
19189: LD_INT 11
19191: PUSH
19192: LD_INT 12
19194: PUSH
19195: LD_INT 13
19197: PUSH
19198: LD_INT 14
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: ST_TO_ADDR
19207: GO 19818
19209: LD_INT 23
19211: DOUBLE
19212: EQUAL
19213: IFTRUE 19217
19215: GO 19243
19217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: LD_INT 11
19225: PUSH
19226: LD_INT 12
19228: PUSH
19229: LD_INT 13
19231: PUSH
19232: LD_INT 14
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: ST_TO_ADDR
19241: GO 19818
19243: LD_INT 24
19245: DOUBLE
19246: EQUAL
19247: IFTRUE 19251
19249: GO 19277
19251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19252: LD_ADDR_VAR 0 3
19256: PUSH
19257: LD_INT 11
19259: PUSH
19260: LD_INT 12
19262: PUSH
19263: LD_INT 13
19265: PUSH
19266: LD_INT 14
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: ST_TO_ADDR
19275: GO 19818
19277: LD_INT 30
19279: DOUBLE
19280: EQUAL
19281: IFTRUE 19285
19283: GO 19311
19285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19286: LD_ADDR_VAR 0 3
19290: PUSH
19291: LD_INT 11
19293: PUSH
19294: LD_INT 12
19296: PUSH
19297: LD_INT 13
19299: PUSH
19300: LD_INT 14
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: ST_TO_ADDR
19309: GO 19818
19311: LD_INT 25
19313: DOUBLE
19314: EQUAL
19315: IFTRUE 19319
19317: GO 19337
19319: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19320: LD_ADDR_VAR 0 3
19324: PUSH
19325: LD_INT 13
19327: PUSH
19328: LD_INT 14
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: ST_TO_ADDR
19335: GO 19818
19337: LD_INT 27
19339: DOUBLE
19340: EQUAL
19341: IFTRUE 19345
19343: GO 19363
19345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19346: LD_ADDR_VAR 0 3
19350: PUSH
19351: LD_INT 13
19353: PUSH
19354: LD_INT 14
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: ST_TO_ADDR
19361: GO 19818
19363: LD_INT 92
19365: DOUBLE
19366: EQUAL
19367: IFTRUE 19371
19369: GO 19397
19371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19372: LD_ADDR_VAR 0 3
19376: PUSH
19377: LD_INT 11
19379: PUSH
19380: LD_INT 12
19382: PUSH
19383: LD_INT 13
19385: PUSH
19386: LD_INT 14
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: ST_TO_ADDR
19395: GO 19818
19397: LD_INT 28
19399: DOUBLE
19400: EQUAL
19401: IFTRUE 19405
19403: GO 19423
19405: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19406: LD_ADDR_VAR 0 3
19410: PUSH
19411: LD_INT 13
19413: PUSH
19414: LD_INT 14
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: ST_TO_ADDR
19421: GO 19818
19423: LD_INT 29
19425: DOUBLE
19426: EQUAL
19427: IFTRUE 19431
19429: GO 19449
19431: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19432: LD_ADDR_VAR 0 3
19436: PUSH
19437: LD_INT 13
19439: PUSH
19440: LD_INT 14
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: ST_TO_ADDR
19447: GO 19818
19449: LD_INT 31
19451: DOUBLE
19452: EQUAL
19453: IFTRUE 19457
19455: GO 19475
19457: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19458: LD_ADDR_VAR 0 3
19462: PUSH
19463: LD_INT 13
19465: PUSH
19466: LD_INT 14
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: ST_TO_ADDR
19473: GO 19818
19475: LD_INT 26
19477: DOUBLE
19478: EQUAL
19479: IFTRUE 19483
19481: GO 19501
19483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19484: LD_ADDR_VAR 0 3
19488: PUSH
19489: LD_INT 13
19491: PUSH
19492: LD_INT 14
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: ST_TO_ADDR
19499: GO 19818
19501: LD_INT 42
19503: DOUBLE
19504: EQUAL
19505: IFTRUE 19509
19507: GO 19535
19509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19510: LD_ADDR_VAR 0 3
19514: PUSH
19515: LD_INT 21
19517: PUSH
19518: LD_INT 22
19520: PUSH
19521: LD_INT 23
19523: PUSH
19524: LD_INT 24
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: ST_TO_ADDR
19533: GO 19818
19535: LD_INT 43
19537: DOUBLE
19538: EQUAL
19539: IFTRUE 19543
19541: GO 19569
19543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19544: LD_ADDR_VAR 0 3
19548: PUSH
19549: LD_INT 21
19551: PUSH
19552: LD_INT 22
19554: PUSH
19555: LD_INT 23
19557: PUSH
19558: LD_INT 24
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: ST_TO_ADDR
19567: GO 19818
19569: LD_INT 44
19571: DOUBLE
19572: EQUAL
19573: IFTRUE 19577
19575: GO 19603
19577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19578: LD_ADDR_VAR 0 3
19582: PUSH
19583: LD_INT 21
19585: PUSH
19586: LD_INT 22
19588: PUSH
19589: LD_INT 23
19591: PUSH
19592: LD_INT 24
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: ST_TO_ADDR
19601: GO 19818
19603: LD_INT 45
19605: DOUBLE
19606: EQUAL
19607: IFTRUE 19611
19609: GO 19637
19611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19612: LD_ADDR_VAR 0 3
19616: PUSH
19617: LD_INT 21
19619: PUSH
19620: LD_INT 22
19622: PUSH
19623: LD_INT 23
19625: PUSH
19626: LD_INT 24
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: ST_TO_ADDR
19635: GO 19818
19637: LD_INT 49
19639: DOUBLE
19640: EQUAL
19641: IFTRUE 19645
19643: GO 19671
19645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19646: LD_ADDR_VAR 0 3
19650: PUSH
19651: LD_INT 21
19653: PUSH
19654: LD_INT 22
19656: PUSH
19657: LD_INT 23
19659: PUSH
19660: LD_INT 24
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: ST_TO_ADDR
19669: GO 19818
19671: LD_INT 51
19673: DOUBLE
19674: EQUAL
19675: IFTRUE 19679
19677: GO 19705
19679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19680: LD_ADDR_VAR 0 3
19684: PUSH
19685: LD_INT 21
19687: PUSH
19688: LD_INT 22
19690: PUSH
19691: LD_INT 23
19693: PUSH
19694: LD_INT 24
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: ST_TO_ADDR
19703: GO 19818
19705: LD_INT 52
19707: DOUBLE
19708: EQUAL
19709: IFTRUE 19713
19711: GO 19739
19713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19714: LD_ADDR_VAR 0 3
19718: PUSH
19719: LD_INT 21
19721: PUSH
19722: LD_INT 22
19724: PUSH
19725: LD_INT 23
19727: PUSH
19728: LD_INT 24
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: ST_TO_ADDR
19737: GO 19818
19739: LD_INT 53
19741: DOUBLE
19742: EQUAL
19743: IFTRUE 19747
19745: GO 19765
19747: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19748: LD_ADDR_VAR 0 3
19752: PUSH
19753: LD_INT 23
19755: PUSH
19756: LD_INT 24
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: ST_TO_ADDR
19763: GO 19818
19765: LD_INT 46
19767: DOUBLE
19768: EQUAL
19769: IFTRUE 19773
19771: GO 19791
19773: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19774: LD_ADDR_VAR 0 3
19778: PUSH
19779: LD_INT 23
19781: PUSH
19782: LD_INT 24
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: ST_TO_ADDR
19789: GO 19818
19791: LD_INT 47
19793: DOUBLE
19794: EQUAL
19795: IFTRUE 19799
19797: GO 19817
19799: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19800: LD_ADDR_VAR 0 3
19804: PUSH
19805: LD_INT 23
19807: PUSH
19808: LD_INT 24
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: ST_TO_ADDR
19815: GO 19818
19817: POP
// result := ( chassis in result ) ;
19818: LD_ADDR_VAR 0 3
19822: PUSH
19823: LD_VAR 0 1
19827: PUSH
19828: LD_VAR 0 3
19832: IN
19833: ST_TO_ADDR
// end ;
19834: LD_VAR 0 3
19838: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19839: LD_INT 0
19841: PPUSH
19842: PPUSH
19843: PPUSH
19844: PPUSH
19845: PPUSH
19846: PPUSH
19847: PPUSH
// result := array ;
19848: LD_ADDR_VAR 0 5
19852: PUSH
19853: LD_VAR 0 1
19857: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19858: LD_VAR 0 1
19862: NOT
19863: PUSH
19864: LD_VAR 0 2
19868: NOT
19869: OR
19870: PUSH
19871: LD_VAR 0 3
19875: NOT
19876: OR
19877: PUSH
19878: LD_VAR 0 2
19882: PUSH
19883: LD_VAR 0 1
19887: GREATER
19888: OR
19889: PUSH
19890: LD_VAR 0 3
19894: PUSH
19895: LD_VAR 0 1
19899: GREATER
19900: OR
19901: IFFALSE 19905
// exit ;
19903: GO 20201
// if direction then
19905: LD_VAR 0 4
19909: IFFALSE 19973
// begin d := 1 ;
19911: LD_ADDR_VAR 0 9
19915: PUSH
19916: LD_INT 1
19918: ST_TO_ADDR
// if i_from > i_to then
19919: LD_VAR 0 2
19923: PUSH
19924: LD_VAR 0 3
19928: GREATER
19929: IFFALSE 19955
// length := ( array - i_from ) + i_to else
19931: LD_ADDR_VAR 0 11
19935: PUSH
19936: LD_VAR 0 1
19940: PUSH
19941: LD_VAR 0 2
19945: MINUS
19946: PUSH
19947: LD_VAR 0 3
19951: PLUS
19952: ST_TO_ADDR
19953: GO 19971
// length := i_to - i_from ;
19955: LD_ADDR_VAR 0 11
19959: PUSH
19960: LD_VAR 0 3
19964: PUSH
19965: LD_VAR 0 2
19969: MINUS
19970: ST_TO_ADDR
// end else
19971: GO 20034
// begin d := - 1 ;
19973: LD_ADDR_VAR 0 9
19977: PUSH
19978: LD_INT 1
19980: NEG
19981: ST_TO_ADDR
// if i_from > i_to then
19982: LD_VAR 0 2
19986: PUSH
19987: LD_VAR 0 3
19991: GREATER
19992: IFFALSE 20012
// length := i_from - i_to else
19994: LD_ADDR_VAR 0 11
19998: PUSH
19999: LD_VAR 0 2
20003: PUSH
20004: LD_VAR 0 3
20008: MINUS
20009: ST_TO_ADDR
20010: GO 20034
// length := ( array - i_to ) + i_from ;
20012: LD_ADDR_VAR 0 11
20016: PUSH
20017: LD_VAR 0 1
20021: PUSH
20022: LD_VAR 0 3
20026: MINUS
20027: PUSH
20028: LD_VAR 0 2
20032: PLUS
20033: ST_TO_ADDR
// end ; if not length then
20034: LD_VAR 0 11
20038: NOT
20039: IFFALSE 20043
// exit ;
20041: GO 20201
// tmp := array ;
20043: LD_ADDR_VAR 0 10
20047: PUSH
20048: LD_VAR 0 1
20052: ST_TO_ADDR
// for i = 1 to length do
20053: LD_ADDR_VAR 0 6
20057: PUSH
20058: DOUBLE
20059: LD_INT 1
20061: DEC
20062: ST_TO_ADDR
20063: LD_VAR 0 11
20067: PUSH
20068: FOR_TO
20069: IFFALSE 20189
// begin for j = 1 to array do
20071: LD_ADDR_VAR 0 7
20075: PUSH
20076: DOUBLE
20077: LD_INT 1
20079: DEC
20080: ST_TO_ADDR
20081: LD_VAR 0 1
20085: PUSH
20086: FOR_TO
20087: IFFALSE 20175
// begin k := j + d ;
20089: LD_ADDR_VAR 0 8
20093: PUSH
20094: LD_VAR 0 7
20098: PUSH
20099: LD_VAR 0 9
20103: PLUS
20104: ST_TO_ADDR
// if k > array then
20105: LD_VAR 0 8
20109: PUSH
20110: LD_VAR 0 1
20114: GREATER
20115: IFFALSE 20125
// k := 1 ;
20117: LD_ADDR_VAR 0 8
20121: PUSH
20122: LD_INT 1
20124: ST_TO_ADDR
// if not k then
20125: LD_VAR 0 8
20129: NOT
20130: IFFALSE 20142
// k := array ;
20132: LD_ADDR_VAR 0 8
20136: PUSH
20137: LD_VAR 0 1
20141: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20142: LD_ADDR_VAR 0 10
20146: PUSH
20147: LD_VAR 0 10
20151: PPUSH
20152: LD_VAR 0 8
20156: PPUSH
20157: LD_VAR 0 1
20161: PUSH
20162: LD_VAR 0 7
20166: ARRAY
20167: PPUSH
20168: CALL_OW 1
20172: ST_TO_ADDR
// end ;
20173: GO 20086
20175: POP
20176: POP
// array := tmp ;
20177: LD_ADDR_VAR 0 1
20181: PUSH
20182: LD_VAR 0 10
20186: ST_TO_ADDR
// end ;
20187: GO 20068
20189: POP
20190: POP
// result := array ;
20191: LD_ADDR_VAR 0 5
20195: PUSH
20196: LD_VAR 0 1
20200: ST_TO_ADDR
// end ;
20201: LD_VAR 0 5
20205: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20206: LD_INT 0
20208: PPUSH
20209: PPUSH
// result := 0 ;
20210: LD_ADDR_VAR 0 3
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// if not array or not value in array then
20218: LD_VAR 0 1
20222: NOT
20223: PUSH
20224: LD_VAR 0 2
20228: PUSH
20229: LD_VAR 0 1
20233: IN
20234: NOT
20235: OR
20236: IFFALSE 20240
// exit ;
20238: GO 20294
// for i = 1 to array do
20240: LD_ADDR_VAR 0 4
20244: PUSH
20245: DOUBLE
20246: LD_INT 1
20248: DEC
20249: ST_TO_ADDR
20250: LD_VAR 0 1
20254: PUSH
20255: FOR_TO
20256: IFFALSE 20292
// if value = array [ i ] then
20258: LD_VAR 0 2
20262: PUSH
20263: LD_VAR 0 1
20267: PUSH
20268: LD_VAR 0 4
20272: ARRAY
20273: EQUAL
20274: IFFALSE 20290
// begin result := i ;
20276: LD_ADDR_VAR 0 3
20280: PUSH
20281: LD_VAR 0 4
20285: ST_TO_ADDR
// exit ;
20286: POP
20287: POP
20288: GO 20294
// end ;
20290: GO 20255
20292: POP
20293: POP
// end ;
20294: LD_VAR 0 3
20298: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20299: LD_INT 0
20301: PPUSH
// vc_chassis := chassis ;
20302: LD_ADDR_OWVAR 37
20306: PUSH
20307: LD_VAR 0 1
20311: ST_TO_ADDR
// vc_engine := engine ;
20312: LD_ADDR_OWVAR 39
20316: PUSH
20317: LD_VAR 0 2
20321: ST_TO_ADDR
// vc_control := control ;
20322: LD_ADDR_OWVAR 38
20326: PUSH
20327: LD_VAR 0 3
20331: ST_TO_ADDR
// vc_weapon := weapon ;
20332: LD_ADDR_OWVAR 40
20336: PUSH
20337: LD_VAR 0 4
20341: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20342: LD_ADDR_OWVAR 41
20346: PUSH
20347: LD_VAR 0 5
20351: ST_TO_ADDR
// end ;
20352: LD_VAR 0 6
20356: RET
// export function WantPlant ( unit ) ; var task ; begin
20357: LD_INT 0
20359: PPUSH
20360: PPUSH
// result := false ;
20361: LD_ADDR_VAR 0 2
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20369: LD_ADDR_VAR 0 3
20373: PUSH
20374: LD_VAR 0 1
20378: PPUSH
20379: CALL_OW 437
20383: ST_TO_ADDR
// if task then
20384: LD_VAR 0 3
20388: IFFALSE 20416
// if task [ 1 ] [ 1 ] = p then
20390: LD_VAR 0 3
20394: PUSH
20395: LD_INT 1
20397: ARRAY
20398: PUSH
20399: LD_INT 1
20401: ARRAY
20402: PUSH
20403: LD_STRING p
20405: EQUAL
20406: IFFALSE 20416
// result := true ;
20408: LD_ADDR_VAR 0 2
20412: PUSH
20413: LD_INT 1
20415: ST_TO_ADDR
// end ;
20416: LD_VAR 0 2
20420: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20421: LD_INT 0
20423: PPUSH
20424: PPUSH
20425: PPUSH
20426: PPUSH
// if pos < 1 then
20427: LD_VAR 0 2
20431: PUSH
20432: LD_INT 1
20434: LESS
20435: IFFALSE 20439
// exit ;
20437: GO 20742
// if pos = 1 then
20439: LD_VAR 0 2
20443: PUSH
20444: LD_INT 1
20446: EQUAL
20447: IFFALSE 20480
// result := Replace ( arr , pos [ 1 ] , value ) else
20449: LD_ADDR_VAR 0 4
20453: PUSH
20454: LD_VAR 0 1
20458: PPUSH
20459: LD_VAR 0 2
20463: PUSH
20464: LD_INT 1
20466: ARRAY
20467: PPUSH
20468: LD_VAR 0 3
20472: PPUSH
20473: CALL_OW 1
20477: ST_TO_ADDR
20478: GO 20742
// begin tmp := arr ;
20480: LD_ADDR_VAR 0 6
20484: PUSH
20485: LD_VAR 0 1
20489: ST_TO_ADDR
// s_arr := [ tmp ] ;
20490: LD_ADDR_VAR 0 7
20494: PUSH
20495: LD_VAR 0 6
20499: PUSH
20500: EMPTY
20501: LIST
20502: ST_TO_ADDR
// for i = 1 to pos - 1 do
20503: LD_ADDR_VAR 0 5
20507: PUSH
20508: DOUBLE
20509: LD_INT 1
20511: DEC
20512: ST_TO_ADDR
20513: LD_VAR 0 2
20517: PUSH
20518: LD_INT 1
20520: MINUS
20521: PUSH
20522: FOR_TO
20523: IFFALSE 20568
// begin tmp := tmp [ pos [ i ] ] ;
20525: LD_ADDR_VAR 0 6
20529: PUSH
20530: LD_VAR 0 6
20534: PUSH
20535: LD_VAR 0 2
20539: PUSH
20540: LD_VAR 0 5
20544: ARRAY
20545: ARRAY
20546: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20547: LD_ADDR_VAR 0 7
20551: PUSH
20552: LD_VAR 0 7
20556: PUSH
20557: LD_VAR 0 6
20561: PUSH
20562: EMPTY
20563: LIST
20564: ADD
20565: ST_TO_ADDR
// end ;
20566: GO 20522
20568: POP
20569: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20570: LD_ADDR_VAR 0 6
20574: PUSH
20575: LD_VAR 0 6
20579: PPUSH
20580: LD_VAR 0 2
20584: PUSH
20585: LD_VAR 0 2
20589: ARRAY
20590: PPUSH
20591: LD_VAR 0 3
20595: PPUSH
20596: CALL_OW 1
20600: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20601: LD_ADDR_VAR 0 7
20605: PUSH
20606: LD_VAR 0 7
20610: PPUSH
20611: LD_VAR 0 7
20615: PPUSH
20616: LD_VAR 0 6
20620: PPUSH
20621: CALL_OW 1
20625: ST_TO_ADDR
// for i = s_arr downto 2 do
20626: LD_ADDR_VAR 0 5
20630: PUSH
20631: DOUBLE
20632: LD_VAR 0 7
20636: INC
20637: ST_TO_ADDR
20638: LD_INT 2
20640: PUSH
20641: FOR_DOWNTO
20642: IFFALSE 20726
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20644: LD_ADDR_VAR 0 6
20648: PUSH
20649: LD_VAR 0 7
20653: PUSH
20654: LD_VAR 0 5
20658: PUSH
20659: LD_INT 1
20661: MINUS
20662: ARRAY
20663: PPUSH
20664: LD_VAR 0 2
20668: PUSH
20669: LD_VAR 0 5
20673: PUSH
20674: LD_INT 1
20676: MINUS
20677: ARRAY
20678: PPUSH
20679: LD_VAR 0 7
20683: PUSH
20684: LD_VAR 0 5
20688: ARRAY
20689: PPUSH
20690: CALL_OW 1
20694: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20695: LD_ADDR_VAR 0 7
20699: PUSH
20700: LD_VAR 0 7
20704: PPUSH
20705: LD_VAR 0 5
20709: PUSH
20710: LD_INT 1
20712: MINUS
20713: PPUSH
20714: LD_VAR 0 6
20718: PPUSH
20719: CALL_OW 1
20723: ST_TO_ADDR
// end ;
20724: GO 20641
20726: POP
20727: POP
// result := s_arr [ 1 ] ;
20728: LD_ADDR_VAR 0 4
20732: PUSH
20733: LD_VAR 0 7
20737: PUSH
20738: LD_INT 1
20740: ARRAY
20741: ST_TO_ADDR
// end ; end ;
20742: LD_VAR 0 4
20746: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20747: LD_INT 0
20749: PPUSH
20750: PPUSH
// if not list then
20751: LD_VAR 0 1
20755: NOT
20756: IFFALSE 20760
// exit ;
20758: GO 20851
// i := list [ pos1 ] ;
20760: LD_ADDR_VAR 0 5
20764: PUSH
20765: LD_VAR 0 1
20769: PUSH
20770: LD_VAR 0 2
20774: ARRAY
20775: ST_TO_ADDR
// if not i then
20776: LD_VAR 0 5
20780: NOT
20781: IFFALSE 20785
// exit ;
20783: GO 20851
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20785: LD_ADDR_VAR 0 1
20789: PUSH
20790: LD_VAR 0 1
20794: PPUSH
20795: LD_VAR 0 2
20799: PPUSH
20800: LD_VAR 0 1
20804: PUSH
20805: LD_VAR 0 3
20809: ARRAY
20810: PPUSH
20811: CALL_OW 1
20815: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20816: LD_ADDR_VAR 0 1
20820: PUSH
20821: LD_VAR 0 1
20825: PPUSH
20826: LD_VAR 0 3
20830: PPUSH
20831: LD_VAR 0 5
20835: PPUSH
20836: CALL_OW 1
20840: ST_TO_ADDR
// result := list ;
20841: LD_ADDR_VAR 0 4
20845: PUSH
20846: LD_VAR 0 1
20850: ST_TO_ADDR
// end ;
20851: LD_VAR 0 4
20855: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20856: LD_INT 0
20858: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20859: LD_ADDR_VAR 0 5
20863: PUSH
20864: LD_VAR 0 1
20868: PPUSH
20869: CALL_OW 250
20873: PPUSH
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 251
20883: PPUSH
20884: LD_VAR 0 2
20888: PPUSH
20889: LD_VAR 0 3
20893: PPUSH
20894: LD_VAR 0 4
20898: PPUSH
20899: CALL 21277 0 5
20903: ST_TO_ADDR
// end ;
20904: LD_VAR 0 5
20908: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20909: LD_INT 0
20911: PPUSH
20912: PPUSH
20913: PPUSH
20914: PPUSH
// if not list or not unit then
20915: LD_VAR 0 2
20919: NOT
20920: PUSH
20921: LD_VAR 0 1
20925: NOT
20926: OR
20927: IFFALSE 20931
// exit ;
20929: GO 21272
// result := [ ] ;
20931: LD_ADDR_VAR 0 5
20935: PUSH
20936: EMPTY
20937: ST_TO_ADDR
// for i in list do
20938: LD_ADDR_VAR 0 6
20942: PUSH
20943: LD_VAR 0 2
20947: PUSH
20948: FOR_IN
20949: IFFALSE 21167
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20951: LD_ADDR_VAR 0 8
20955: PUSH
20956: LD_VAR 0 1
20960: PPUSH
20961: LD_VAR 0 6
20965: PUSH
20966: LD_INT 1
20968: ARRAY
20969: PPUSH
20970: LD_VAR 0 6
20974: PUSH
20975: LD_INT 2
20977: ARRAY
20978: PPUSH
20979: CALL_OW 297
20983: ST_TO_ADDR
// if not Count ( result ) then
20984: LD_VAR 0 5
20988: PPUSH
20989: CALL 17561 0 1
20993: NOT
20994: IFFALSE 21027
// begin result := Join ( result , [ i , tmp ] ) ;
20996: LD_ADDR_VAR 0 5
21000: PUSH
21001: LD_VAR 0 5
21005: PPUSH
21006: LD_VAR 0 6
21010: PUSH
21011: LD_VAR 0 8
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PPUSH
21020: CALL 53161 0 2
21024: ST_TO_ADDR
// continue ;
21025: GO 20948
// end ; if result [ result ] [ 2 ] <= tmp then
21027: LD_VAR 0 5
21031: PUSH
21032: LD_VAR 0 5
21036: ARRAY
21037: PUSH
21038: LD_INT 2
21040: ARRAY
21041: PUSH
21042: LD_VAR 0 8
21046: LESSEQUAL
21047: IFFALSE 21080
// result := Join ( result , [ i , tmp ] ) else
21049: LD_ADDR_VAR 0 5
21053: PUSH
21054: LD_VAR 0 5
21058: PPUSH
21059: LD_VAR 0 6
21063: PUSH
21064: LD_VAR 0 8
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PPUSH
21073: CALL 53161 0 2
21077: ST_TO_ADDR
21078: GO 21165
// begin for j := 1 to Count ( result ) do
21080: LD_ADDR_VAR 0 7
21084: PUSH
21085: DOUBLE
21086: LD_INT 1
21088: DEC
21089: ST_TO_ADDR
21090: LD_VAR 0 5
21094: PPUSH
21095: CALL 17561 0 1
21099: PUSH
21100: FOR_TO
21101: IFFALSE 21163
// begin if tmp < result [ j ] [ 2 ] then
21103: LD_VAR 0 8
21107: PUSH
21108: LD_VAR 0 5
21112: PUSH
21113: LD_VAR 0 7
21117: ARRAY
21118: PUSH
21119: LD_INT 2
21121: ARRAY
21122: LESS
21123: IFFALSE 21161
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21125: LD_ADDR_VAR 0 5
21129: PUSH
21130: LD_VAR 0 5
21134: PPUSH
21135: LD_VAR 0 7
21139: PPUSH
21140: LD_VAR 0 6
21144: PUSH
21145: LD_VAR 0 8
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PPUSH
21154: CALL_OW 2
21158: ST_TO_ADDR
// break ;
21159: GO 21163
// end ; end ;
21161: GO 21100
21163: POP
21164: POP
// end ; end ;
21165: GO 20948
21167: POP
21168: POP
// if result and not asc then
21169: LD_VAR 0 5
21173: PUSH
21174: LD_VAR 0 3
21178: NOT
21179: AND
21180: IFFALSE 21197
// result := ReverseArray ( result ) ;
21182: LD_ADDR_VAR 0 5
21186: PUSH
21187: LD_VAR 0 5
21191: PPUSH
21192: CALL 48437 0 1
21196: ST_TO_ADDR
// tmp := [ ] ;
21197: LD_ADDR_VAR 0 8
21201: PUSH
21202: EMPTY
21203: ST_TO_ADDR
// if mode then
21204: LD_VAR 0 4
21208: IFFALSE 21272
// begin for i := 1 to result do
21210: LD_ADDR_VAR 0 6
21214: PUSH
21215: DOUBLE
21216: LD_INT 1
21218: DEC
21219: ST_TO_ADDR
21220: LD_VAR 0 5
21224: PUSH
21225: FOR_TO
21226: IFFALSE 21260
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21228: LD_ADDR_VAR 0 8
21232: PUSH
21233: LD_VAR 0 8
21237: PPUSH
21238: LD_VAR 0 5
21242: PUSH
21243: LD_VAR 0 6
21247: ARRAY
21248: PUSH
21249: LD_INT 1
21251: ARRAY
21252: PPUSH
21253: CALL 53161 0 2
21257: ST_TO_ADDR
21258: GO 21225
21260: POP
21261: POP
// result := tmp ;
21262: LD_ADDR_VAR 0 5
21266: PUSH
21267: LD_VAR 0 8
21271: ST_TO_ADDR
// end ; end ;
21272: LD_VAR 0 5
21276: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21277: LD_INT 0
21279: PPUSH
21280: PPUSH
21281: PPUSH
21282: PPUSH
// if not list then
21283: LD_VAR 0 3
21287: NOT
21288: IFFALSE 21292
// exit ;
21290: GO 21680
// result := [ ] ;
21292: LD_ADDR_VAR 0 6
21296: PUSH
21297: EMPTY
21298: ST_TO_ADDR
// for i in list do
21299: LD_ADDR_VAR 0 7
21303: PUSH
21304: LD_VAR 0 3
21308: PUSH
21309: FOR_IN
21310: IFFALSE 21512
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21312: LD_ADDR_VAR 0 9
21316: PUSH
21317: LD_VAR 0 7
21321: PPUSH
21322: LD_VAR 0 1
21326: PPUSH
21327: LD_VAR 0 2
21331: PPUSH
21332: CALL_OW 297
21336: ST_TO_ADDR
// if not result then
21337: LD_VAR 0 6
21341: NOT
21342: IFFALSE 21368
// result := [ [ i , tmp ] ] else
21344: LD_ADDR_VAR 0 6
21348: PUSH
21349: LD_VAR 0 7
21353: PUSH
21354: LD_VAR 0 9
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: ST_TO_ADDR
21366: GO 21510
// begin if result [ result ] [ 2 ] < tmp then
21368: LD_VAR 0 6
21372: PUSH
21373: LD_VAR 0 6
21377: ARRAY
21378: PUSH
21379: LD_INT 2
21381: ARRAY
21382: PUSH
21383: LD_VAR 0 9
21387: LESS
21388: IFFALSE 21430
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21390: LD_ADDR_VAR 0 6
21394: PUSH
21395: LD_VAR 0 6
21399: PPUSH
21400: LD_VAR 0 6
21404: PUSH
21405: LD_INT 1
21407: PLUS
21408: PPUSH
21409: LD_VAR 0 7
21413: PUSH
21414: LD_VAR 0 9
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PPUSH
21423: CALL_OW 2
21427: ST_TO_ADDR
21428: GO 21510
// for j = 1 to result do
21430: LD_ADDR_VAR 0 8
21434: PUSH
21435: DOUBLE
21436: LD_INT 1
21438: DEC
21439: ST_TO_ADDR
21440: LD_VAR 0 6
21444: PUSH
21445: FOR_TO
21446: IFFALSE 21508
// begin if tmp < result [ j ] [ 2 ] then
21448: LD_VAR 0 9
21452: PUSH
21453: LD_VAR 0 6
21457: PUSH
21458: LD_VAR 0 8
21462: ARRAY
21463: PUSH
21464: LD_INT 2
21466: ARRAY
21467: LESS
21468: IFFALSE 21506
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21470: LD_ADDR_VAR 0 6
21474: PUSH
21475: LD_VAR 0 6
21479: PPUSH
21480: LD_VAR 0 8
21484: PPUSH
21485: LD_VAR 0 7
21489: PUSH
21490: LD_VAR 0 9
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PPUSH
21499: CALL_OW 2
21503: ST_TO_ADDR
// break ;
21504: GO 21508
// end ; end ;
21506: GO 21445
21508: POP
21509: POP
// end ; end ;
21510: GO 21309
21512: POP
21513: POP
// if result and not asc then
21514: LD_VAR 0 6
21518: PUSH
21519: LD_VAR 0 4
21523: NOT
21524: AND
21525: IFFALSE 21600
// begin tmp := result ;
21527: LD_ADDR_VAR 0 9
21531: PUSH
21532: LD_VAR 0 6
21536: ST_TO_ADDR
// for i = tmp downto 1 do
21537: LD_ADDR_VAR 0 7
21541: PUSH
21542: DOUBLE
21543: LD_VAR 0 9
21547: INC
21548: ST_TO_ADDR
21549: LD_INT 1
21551: PUSH
21552: FOR_DOWNTO
21553: IFFALSE 21598
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21555: LD_ADDR_VAR 0 6
21559: PUSH
21560: LD_VAR 0 6
21564: PPUSH
21565: LD_VAR 0 9
21569: PUSH
21570: LD_VAR 0 7
21574: MINUS
21575: PUSH
21576: LD_INT 1
21578: PLUS
21579: PPUSH
21580: LD_VAR 0 9
21584: PUSH
21585: LD_VAR 0 7
21589: ARRAY
21590: PPUSH
21591: CALL_OW 1
21595: ST_TO_ADDR
21596: GO 21552
21598: POP
21599: POP
// end ; tmp := [ ] ;
21600: LD_ADDR_VAR 0 9
21604: PUSH
21605: EMPTY
21606: ST_TO_ADDR
// if mode then
21607: LD_VAR 0 5
21611: IFFALSE 21680
// begin for i = 1 to result do
21613: LD_ADDR_VAR 0 7
21617: PUSH
21618: DOUBLE
21619: LD_INT 1
21621: DEC
21622: ST_TO_ADDR
21623: LD_VAR 0 6
21627: PUSH
21628: FOR_TO
21629: IFFALSE 21668
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21631: LD_ADDR_VAR 0 9
21635: PUSH
21636: LD_VAR 0 9
21640: PPUSH
21641: LD_VAR 0 7
21645: PPUSH
21646: LD_VAR 0 6
21650: PUSH
21651: LD_VAR 0 7
21655: ARRAY
21656: PUSH
21657: LD_INT 1
21659: ARRAY
21660: PPUSH
21661: CALL_OW 1
21665: ST_TO_ADDR
21666: GO 21628
21668: POP
21669: POP
// result := tmp ;
21670: LD_ADDR_VAR 0 6
21674: PUSH
21675: LD_VAR 0 9
21679: ST_TO_ADDR
// end ; end ;
21680: LD_VAR 0 6
21684: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21685: LD_INT 0
21687: PPUSH
21688: PPUSH
21689: PPUSH
21690: PPUSH
21691: PPUSH
21692: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21693: LD_ADDR_VAR 0 5
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: LD_INT 0
21706: PUSH
21707: EMPTY
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: ST_TO_ADDR
// if not x or not y then
21715: LD_VAR 0 2
21719: NOT
21720: PUSH
21721: LD_VAR 0 3
21725: NOT
21726: OR
21727: IFFALSE 21731
// exit ;
21729: GO 23381
// if not range then
21731: LD_VAR 0 4
21735: NOT
21736: IFFALSE 21746
// range := 10 ;
21738: LD_ADDR_VAR 0 4
21742: PUSH
21743: LD_INT 10
21745: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21746: LD_ADDR_VAR 0 8
21750: PUSH
21751: LD_INT 81
21753: PUSH
21754: LD_VAR 0 1
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 92
21765: PUSH
21766: LD_VAR 0 2
21770: PUSH
21771: LD_VAR 0 3
21775: PUSH
21776: LD_VAR 0 4
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 3
21789: PUSH
21790: LD_INT 21
21792: PUSH
21793: LD_INT 3
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: PPUSH
21809: CALL_OW 69
21813: ST_TO_ADDR
// if not tmp then
21814: LD_VAR 0 8
21818: NOT
21819: IFFALSE 21823
// exit ;
21821: GO 23381
// for i in tmp do
21823: LD_ADDR_VAR 0 6
21827: PUSH
21828: LD_VAR 0 8
21832: PUSH
21833: FOR_IN
21834: IFFALSE 23356
// begin points := [ 0 , 0 , 0 ] ;
21836: LD_ADDR_VAR 0 9
21840: PUSH
21841: LD_INT 0
21843: PUSH
21844: LD_INT 0
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: LIST
21854: ST_TO_ADDR
// bpoints := 1 ;
21855: LD_ADDR_VAR 0 10
21859: PUSH
21860: LD_INT 1
21862: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21863: LD_VAR 0 6
21867: PPUSH
21868: CALL_OW 247
21872: PUSH
21873: LD_INT 1
21875: DOUBLE
21876: EQUAL
21877: IFTRUE 21881
21879: GO 22459
21881: POP
// begin if GetClass ( i ) = 1 then
21882: LD_VAR 0 6
21886: PPUSH
21887: CALL_OW 257
21891: PUSH
21892: LD_INT 1
21894: EQUAL
21895: IFFALSE 21916
// points := [ 10 , 5 , 3 ] ;
21897: LD_ADDR_VAR 0 9
21901: PUSH
21902: LD_INT 10
21904: PUSH
21905: LD_INT 5
21907: PUSH
21908: LD_INT 3
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21916: LD_VAR 0 6
21920: PPUSH
21921: CALL_OW 257
21925: PUSH
21926: LD_INT 2
21928: PUSH
21929: LD_INT 3
21931: PUSH
21932: LD_INT 4
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: IN
21940: IFFALSE 21961
// points := [ 3 , 2 , 1 ] ;
21942: LD_ADDR_VAR 0 9
21946: PUSH
21947: LD_INT 3
21949: PUSH
21950: LD_INT 2
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: LIST
21960: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21961: LD_VAR 0 6
21965: PPUSH
21966: CALL_OW 257
21970: PUSH
21971: LD_INT 5
21973: EQUAL
21974: IFFALSE 21995
// points := [ 130 , 5 , 2 ] ;
21976: LD_ADDR_VAR 0 9
21980: PUSH
21981: LD_INT 130
21983: PUSH
21984: LD_INT 5
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21995: LD_VAR 0 6
21999: PPUSH
22000: CALL_OW 257
22004: PUSH
22005: LD_INT 8
22007: EQUAL
22008: IFFALSE 22029
// points := [ 35 , 35 , 30 ] ;
22010: LD_ADDR_VAR 0 9
22014: PUSH
22015: LD_INT 35
22017: PUSH
22018: LD_INT 35
22020: PUSH
22021: LD_INT 30
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: LIST
22028: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22029: LD_VAR 0 6
22033: PPUSH
22034: CALL_OW 257
22038: PUSH
22039: LD_INT 9
22041: EQUAL
22042: IFFALSE 22063
// points := [ 20 , 55 , 40 ] ;
22044: LD_ADDR_VAR 0 9
22048: PUSH
22049: LD_INT 20
22051: PUSH
22052: LD_INT 55
22054: PUSH
22055: LD_INT 40
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: LIST
22062: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22063: LD_VAR 0 6
22067: PPUSH
22068: CALL_OW 257
22072: PUSH
22073: LD_INT 12
22075: PUSH
22076: LD_INT 16
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: IN
22083: IFFALSE 22104
// points := [ 5 , 3 , 2 ] ;
22085: LD_ADDR_VAR 0 9
22089: PUSH
22090: LD_INT 5
22092: PUSH
22093: LD_INT 3
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: LIST
22103: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22104: LD_VAR 0 6
22108: PPUSH
22109: CALL_OW 257
22113: PUSH
22114: LD_INT 17
22116: EQUAL
22117: IFFALSE 22138
// points := [ 100 , 50 , 75 ] ;
22119: LD_ADDR_VAR 0 9
22123: PUSH
22124: LD_INT 100
22126: PUSH
22127: LD_INT 50
22129: PUSH
22130: LD_INT 75
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22138: LD_VAR 0 6
22142: PPUSH
22143: CALL_OW 257
22147: PUSH
22148: LD_INT 15
22150: EQUAL
22151: IFFALSE 22172
// points := [ 10 , 5 , 3 ] ;
22153: LD_ADDR_VAR 0 9
22157: PUSH
22158: LD_INT 10
22160: PUSH
22161: LD_INT 5
22163: PUSH
22164: LD_INT 3
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22172: LD_VAR 0 6
22176: PPUSH
22177: CALL_OW 257
22181: PUSH
22182: LD_INT 14
22184: EQUAL
22185: IFFALSE 22206
// points := [ 10 , 0 , 0 ] ;
22187: LD_ADDR_VAR 0 9
22191: PUSH
22192: LD_INT 10
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: LD_INT 0
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22206: LD_VAR 0 6
22210: PPUSH
22211: CALL_OW 257
22215: PUSH
22216: LD_INT 11
22218: EQUAL
22219: IFFALSE 22240
// points := [ 30 , 10 , 5 ] ;
22221: LD_ADDR_VAR 0 9
22225: PUSH
22226: LD_INT 30
22228: PUSH
22229: LD_INT 10
22231: PUSH
22232: LD_INT 5
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22240: LD_VAR 0 1
22244: PPUSH
22245: LD_INT 5
22247: PPUSH
22248: CALL_OW 321
22252: PUSH
22253: LD_INT 2
22255: EQUAL
22256: IFFALSE 22273
// bpoints := bpoints * 1.8 ;
22258: LD_ADDR_VAR 0 10
22262: PUSH
22263: LD_VAR 0 10
22267: PUSH
22268: LD_REAL  1.80000000000000E+0000
22271: MUL
22272: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22273: LD_VAR 0 6
22277: PPUSH
22278: CALL_OW 257
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: LD_INT 2
22288: PUSH
22289: LD_INT 3
22291: PUSH
22292: LD_INT 4
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: IN
22301: PUSH
22302: LD_VAR 0 1
22306: PPUSH
22307: LD_INT 51
22309: PPUSH
22310: CALL_OW 321
22314: PUSH
22315: LD_INT 2
22317: EQUAL
22318: AND
22319: IFFALSE 22336
// bpoints := bpoints * 1.2 ;
22321: LD_ADDR_VAR 0 10
22325: PUSH
22326: LD_VAR 0 10
22330: PUSH
22331: LD_REAL  1.20000000000000E+0000
22334: MUL
22335: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22336: LD_VAR 0 6
22340: PPUSH
22341: CALL_OW 257
22345: PUSH
22346: LD_INT 5
22348: PUSH
22349: LD_INT 7
22351: PUSH
22352: LD_INT 9
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: LIST
22359: IN
22360: PUSH
22361: LD_VAR 0 1
22365: PPUSH
22366: LD_INT 52
22368: PPUSH
22369: CALL_OW 321
22373: PUSH
22374: LD_INT 2
22376: EQUAL
22377: AND
22378: IFFALSE 22395
// bpoints := bpoints * 1.5 ;
22380: LD_ADDR_VAR 0 10
22384: PUSH
22385: LD_VAR 0 10
22389: PUSH
22390: LD_REAL  1.50000000000000E+0000
22393: MUL
22394: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22395: LD_VAR 0 1
22399: PPUSH
22400: LD_INT 66
22402: PPUSH
22403: CALL_OW 321
22407: PUSH
22408: LD_INT 2
22410: EQUAL
22411: IFFALSE 22428
// bpoints := bpoints * 1.1 ;
22413: LD_ADDR_VAR 0 10
22417: PUSH
22418: LD_VAR 0 10
22422: PUSH
22423: LD_REAL  1.10000000000000E+0000
22426: MUL
22427: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22428: LD_ADDR_VAR 0 10
22432: PUSH
22433: LD_VAR 0 10
22437: PUSH
22438: LD_VAR 0 6
22442: PPUSH
22443: LD_INT 1
22445: PPUSH
22446: CALL_OW 259
22450: PUSH
22451: LD_REAL  1.15000000000000E+0000
22454: MUL
22455: MUL
22456: ST_TO_ADDR
// end ; unit_vehicle :
22457: GO 23285
22459: LD_INT 2
22461: DOUBLE
22462: EQUAL
22463: IFTRUE 22467
22465: GO 23273
22467: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22468: LD_VAR 0 6
22472: PPUSH
22473: CALL_OW 264
22477: PUSH
22478: LD_INT 2
22480: PUSH
22481: LD_INT 42
22483: PUSH
22484: LD_INT 24
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: LIST
22491: IN
22492: IFFALSE 22513
// points := [ 25 , 5 , 3 ] ;
22494: LD_ADDR_VAR 0 9
22498: PUSH
22499: LD_INT 25
22501: PUSH
22502: LD_INT 5
22504: PUSH
22505: LD_INT 3
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: LIST
22512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22513: LD_VAR 0 6
22517: PPUSH
22518: CALL_OW 264
22522: PUSH
22523: LD_INT 4
22525: PUSH
22526: LD_INT 43
22528: PUSH
22529: LD_INT 25
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: IN
22537: IFFALSE 22558
// points := [ 40 , 15 , 5 ] ;
22539: LD_ADDR_VAR 0 9
22543: PUSH
22544: LD_INT 40
22546: PUSH
22547: LD_INT 15
22549: PUSH
22550: LD_INT 5
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: LIST
22557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22558: LD_VAR 0 6
22562: PPUSH
22563: CALL_OW 264
22567: PUSH
22568: LD_INT 3
22570: PUSH
22571: LD_INT 23
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: IN
22578: IFFALSE 22599
// points := [ 7 , 25 , 8 ] ;
22580: LD_ADDR_VAR 0 9
22584: PUSH
22585: LD_INT 7
22587: PUSH
22588: LD_INT 25
22590: PUSH
22591: LD_INT 8
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22599: LD_VAR 0 6
22603: PPUSH
22604: CALL_OW 264
22608: PUSH
22609: LD_INT 5
22611: PUSH
22612: LD_INT 27
22614: PUSH
22615: LD_INT 44
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: IN
22623: IFFALSE 22644
// points := [ 14 , 50 , 16 ] ;
22625: LD_ADDR_VAR 0 9
22629: PUSH
22630: LD_INT 14
22632: PUSH
22633: LD_INT 50
22635: PUSH
22636: LD_INT 16
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22644: LD_VAR 0 6
22648: PPUSH
22649: CALL_OW 264
22653: PUSH
22654: LD_INT 6
22656: PUSH
22657: LD_INT 46
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: IN
22664: IFFALSE 22685
// points := [ 32 , 120 , 70 ] ;
22666: LD_ADDR_VAR 0 9
22670: PUSH
22671: LD_INT 32
22673: PUSH
22674: LD_INT 120
22676: PUSH
22677: LD_INT 70
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22685: LD_VAR 0 6
22689: PPUSH
22690: CALL_OW 264
22694: PUSH
22695: LD_INT 7
22697: PUSH
22698: LD_INT 28
22700: PUSH
22701: LD_INT 45
22703: PUSH
22704: LD_INT 92
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: IN
22713: IFFALSE 22734
// points := [ 35 , 20 , 45 ] ;
22715: LD_ADDR_VAR 0 9
22719: PUSH
22720: LD_INT 35
22722: PUSH
22723: LD_INT 20
22725: PUSH
22726: LD_INT 45
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: LIST
22733: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22734: LD_VAR 0 6
22738: PPUSH
22739: CALL_OW 264
22743: PUSH
22744: LD_INT 47
22746: PUSH
22747: EMPTY
22748: LIST
22749: IN
22750: IFFALSE 22771
// points := [ 67 , 45 , 75 ] ;
22752: LD_ADDR_VAR 0 9
22756: PUSH
22757: LD_INT 67
22759: PUSH
22760: LD_INT 45
22762: PUSH
22763: LD_INT 75
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22771: LD_VAR 0 6
22775: PPUSH
22776: CALL_OW 264
22780: PUSH
22781: LD_INT 26
22783: PUSH
22784: EMPTY
22785: LIST
22786: IN
22787: IFFALSE 22808
// points := [ 120 , 30 , 80 ] ;
22789: LD_ADDR_VAR 0 9
22793: PUSH
22794: LD_INT 120
22796: PUSH
22797: LD_INT 30
22799: PUSH
22800: LD_INT 80
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: LIST
22807: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22808: LD_VAR 0 6
22812: PPUSH
22813: CALL_OW 264
22817: PUSH
22818: LD_INT 22
22820: PUSH
22821: EMPTY
22822: LIST
22823: IN
22824: IFFALSE 22845
// points := [ 40 , 1 , 1 ] ;
22826: LD_ADDR_VAR 0 9
22830: PUSH
22831: LD_INT 40
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: LD_INT 1
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: LIST
22844: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22845: LD_VAR 0 6
22849: PPUSH
22850: CALL_OW 264
22854: PUSH
22855: LD_INT 29
22857: PUSH
22858: EMPTY
22859: LIST
22860: IN
22861: IFFALSE 22882
// points := [ 70 , 200 , 400 ] ;
22863: LD_ADDR_VAR 0 9
22867: PUSH
22868: LD_INT 70
22870: PUSH
22871: LD_INT 200
22873: PUSH
22874: LD_INT 400
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22882: LD_VAR 0 6
22886: PPUSH
22887: CALL_OW 264
22891: PUSH
22892: LD_INT 14
22894: PUSH
22895: LD_INT 53
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: IN
22902: IFFALSE 22923
// points := [ 40 , 10 , 20 ] ;
22904: LD_ADDR_VAR 0 9
22908: PUSH
22909: LD_INT 40
22911: PUSH
22912: LD_INT 10
22914: PUSH
22915: LD_INT 20
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22923: LD_VAR 0 6
22927: PPUSH
22928: CALL_OW 264
22932: PUSH
22933: LD_INT 9
22935: PUSH
22936: EMPTY
22937: LIST
22938: IN
22939: IFFALSE 22960
// points := [ 5 , 70 , 20 ] ;
22941: LD_ADDR_VAR 0 9
22945: PUSH
22946: LD_INT 5
22948: PUSH
22949: LD_INT 70
22951: PUSH
22952: LD_INT 20
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: LIST
22959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22960: LD_VAR 0 6
22964: PPUSH
22965: CALL_OW 264
22969: PUSH
22970: LD_INT 10
22972: PUSH
22973: EMPTY
22974: LIST
22975: IN
22976: IFFALSE 22997
// points := [ 35 , 110 , 70 ] ;
22978: LD_ADDR_VAR 0 9
22982: PUSH
22983: LD_INT 35
22985: PUSH
22986: LD_INT 110
22988: PUSH
22989: LD_INT 70
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: LIST
22996: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22997: LD_VAR 0 6
23001: PPUSH
23002: CALL_OW 265
23006: PUSH
23007: LD_INT 25
23009: EQUAL
23010: IFFALSE 23031
// points := [ 80 , 65 , 100 ] ;
23012: LD_ADDR_VAR 0 9
23016: PUSH
23017: LD_INT 80
23019: PUSH
23020: LD_INT 65
23022: PUSH
23023: LD_INT 100
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23031: LD_VAR 0 6
23035: PPUSH
23036: CALL_OW 263
23040: PUSH
23041: LD_INT 1
23043: EQUAL
23044: IFFALSE 23079
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23046: LD_ADDR_VAR 0 10
23050: PUSH
23051: LD_VAR 0 10
23055: PUSH
23056: LD_VAR 0 6
23060: PPUSH
23061: CALL_OW 311
23065: PPUSH
23066: LD_INT 3
23068: PPUSH
23069: CALL_OW 259
23073: PUSH
23074: LD_INT 4
23076: MUL
23077: MUL
23078: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23079: LD_VAR 0 6
23083: PPUSH
23084: CALL_OW 263
23088: PUSH
23089: LD_INT 2
23091: EQUAL
23092: IFFALSE 23143
// begin j := IsControledBy ( i ) ;
23094: LD_ADDR_VAR 0 7
23098: PUSH
23099: LD_VAR 0 6
23103: PPUSH
23104: CALL_OW 312
23108: ST_TO_ADDR
// if j then
23109: LD_VAR 0 7
23113: IFFALSE 23143
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23115: LD_ADDR_VAR 0 10
23119: PUSH
23120: LD_VAR 0 10
23124: PUSH
23125: LD_VAR 0 7
23129: PPUSH
23130: LD_INT 3
23132: PPUSH
23133: CALL_OW 259
23137: PUSH
23138: LD_INT 3
23140: MUL
23141: MUL
23142: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23143: LD_VAR 0 6
23147: PPUSH
23148: CALL_OW 264
23152: PUSH
23153: LD_INT 5
23155: PUSH
23156: LD_INT 6
23158: PUSH
23159: LD_INT 46
23161: PUSH
23162: LD_INT 44
23164: PUSH
23165: LD_INT 47
23167: PUSH
23168: LD_INT 45
23170: PUSH
23171: LD_INT 28
23173: PUSH
23174: LD_INT 7
23176: PUSH
23177: LD_INT 27
23179: PUSH
23180: LD_INT 29
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: IN
23195: PUSH
23196: LD_VAR 0 1
23200: PPUSH
23201: LD_INT 52
23203: PPUSH
23204: CALL_OW 321
23208: PUSH
23209: LD_INT 2
23211: EQUAL
23212: AND
23213: IFFALSE 23230
// bpoints := bpoints * 1.2 ;
23215: LD_ADDR_VAR 0 10
23219: PUSH
23220: LD_VAR 0 10
23224: PUSH
23225: LD_REAL  1.20000000000000E+0000
23228: MUL
23229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23230: LD_VAR 0 6
23234: PPUSH
23235: CALL_OW 264
23239: PUSH
23240: LD_INT 6
23242: PUSH
23243: LD_INT 46
23245: PUSH
23246: LD_INT 47
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: IN
23254: IFFALSE 23271
// bpoints := bpoints * 1.2 ;
23256: LD_ADDR_VAR 0 10
23260: PUSH
23261: LD_VAR 0 10
23265: PUSH
23266: LD_REAL  1.20000000000000E+0000
23269: MUL
23270: ST_TO_ADDR
// end ; unit_building :
23271: GO 23285
23273: LD_INT 3
23275: DOUBLE
23276: EQUAL
23277: IFTRUE 23281
23279: GO 23284
23281: POP
// ; end ;
23282: GO 23285
23284: POP
// for j = 1 to 3 do
23285: LD_ADDR_VAR 0 7
23289: PUSH
23290: DOUBLE
23291: LD_INT 1
23293: DEC
23294: ST_TO_ADDR
23295: LD_INT 3
23297: PUSH
23298: FOR_TO
23299: IFFALSE 23352
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23301: LD_ADDR_VAR 0 5
23305: PUSH
23306: LD_VAR 0 5
23310: PPUSH
23311: LD_VAR 0 7
23315: PPUSH
23316: LD_VAR 0 5
23320: PUSH
23321: LD_VAR 0 7
23325: ARRAY
23326: PUSH
23327: LD_VAR 0 9
23331: PUSH
23332: LD_VAR 0 7
23336: ARRAY
23337: PUSH
23338: LD_VAR 0 10
23342: MUL
23343: PLUS
23344: PPUSH
23345: CALL_OW 1
23349: ST_TO_ADDR
23350: GO 23298
23352: POP
23353: POP
// end ;
23354: GO 21833
23356: POP
23357: POP
// result := Replace ( result , 4 , tmp ) ;
23358: LD_ADDR_VAR 0 5
23362: PUSH
23363: LD_VAR 0 5
23367: PPUSH
23368: LD_INT 4
23370: PPUSH
23371: LD_VAR 0 8
23375: PPUSH
23376: CALL_OW 1
23380: ST_TO_ADDR
// end ;
23381: LD_VAR 0 5
23385: RET
// export function DangerAtRange ( unit , range ) ; begin
23386: LD_INT 0
23388: PPUSH
// if not unit then
23389: LD_VAR 0 1
23393: NOT
23394: IFFALSE 23398
// exit ;
23396: GO 23443
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23398: LD_ADDR_VAR 0 3
23402: PUSH
23403: LD_VAR 0 1
23407: PPUSH
23408: CALL_OW 255
23412: PPUSH
23413: LD_VAR 0 1
23417: PPUSH
23418: CALL_OW 250
23422: PPUSH
23423: LD_VAR 0 1
23427: PPUSH
23428: CALL_OW 251
23432: PPUSH
23433: LD_VAR 0 2
23437: PPUSH
23438: CALL 21685 0 4
23442: ST_TO_ADDR
// end ;
23443: LD_VAR 0 3
23447: RET
// export function DangerInArea ( side , area ) ; begin
23448: LD_INT 0
23450: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23451: LD_ADDR_VAR 0 3
23455: PUSH
23456: LD_VAR 0 2
23460: PPUSH
23461: LD_INT 81
23463: PUSH
23464: LD_VAR 0 1
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PPUSH
23473: CALL_OW 70
23477: ST_TO_ADDR
// end ;
23478: LD_VAR 0 3
23482: RET
// export function IsExtension ( b ) ; begin
23483: LD_INT 0
23485: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23486: LD_ADDR_VAR 0 2
23490: PUSH
23491: LD_VAR 0 1
23495: PUSH
23496: LD_INT 23
23498: PUSH
23499: LD_INT 20
23501: PUSH
23502: LD_INT 22
23504: PUSH
23505: LD_INT 17
23507: PUSH
23508: LD_INT 24
23510: PUSH
23511: LD_INT 21
23513: PUSH
23514: LD_INT 19
23516: PUSH
23517: LD_INT 16
23519: PUSH
23520: LD_INT 25
23522: PUSH
23523: LD_INT 18
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: IN
23538: ST_TO_ADDR
// end ;
23539: LD_VAR 0 2
23543: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23544: LD_INT 0
23546: PPUSH
23547: PPUSH
23548: PPUSH
// result := [ ] ;
23549: LD_ADDR_VAR 0 4
23553: PUSH
23554: EMPTY
23555: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23556: LD_ADDR_VAR 0 5
23560: PUSH
23561: LD_VAR 0 2
23565: PPUSH
23566: LD_INT 21
23568: PUSH
23569: LD_INT 3
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PPUSH
23576: CALL_OW 70
23580: ST_TO_ADDR
// if not tmp then
23581: LD_VAR 0 5
23585: NOT
23586: IFFALSE 23590
// exit ;
23588: GO 23654
// if checkLink then
23590: LD_VAR 0 3
23594: IFFALSE 23644
// begin for i in tmp do
23596: LD_ADDR_VAR 0 6
23600: PUSH
23601: LD_VAR 0 5
23605: PUSH
23606: FOR_IN
23607: IFFALSE 23642
// if GetBase ( i ) <> base then
23609: LD_VAR 0 6
23613: PPUSH
23614: CALL_OW 274
23618: PUSH
23619: LD_VAR 0 1
23623: NONEQUAL
23624: IFFALSE 23640
// ComLinkToBase ( base , i ) ;
23626: LD_VAR 0 1
23630: PPUSH
23631: LD_VAR 0 6
23635: PPUSH
23636: CALL_OW 169
23640: GO 23606
23642: POP
23643: POP
// end ; result := tmp ;
23644: LD_ADDR_VAR 0 4
23648: PUSH
23649: LD_VAR 0 5
23653: ST_TO_ADDR
// end ;
23654: LD_VAR 0 4
23658: RET
// export function ComComplete ( units , b ) ; var i ; begin
23659: LD_INT 0
23661: PPUSH
23662: PPUSH
// if not units then
23663: LD_VAR 0 1
23667: NOT
23668: IFFALSE 23672
// exit ;
23670: GO 23762
// for i in units do
23672: LD_ADDR_VAR 0 4
23676: PUSH
23677: LD_VAR 0 1
23681: PUSH
23682: FOR_IN
23683: IFFALSE 23760
// if BuildingStatus ( b ) = bs_build then
23685: LD_VAR 0 2
23689: PPUSH
23690: CALL_OW 461
23694: PUSH
23695: LD_INT 1
23697: EQUAL
23698: IFFALSE 23758
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23700: LD_VAR 0 4
23704: PPUSH
23705: LD_STRING h
23707: PUSH
23708: LD_VAR 0 2
23712: PPUSH
23713: CALL_OW 250
23717: PUSH
23718: LD_VAR 0 2
23722: PPUSH
23723: CALL_OW 251
23727: PUSH
23728: LD_VAR 0 2
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 0
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: PUSH
23751: EMPTY
23752: LIST
23753: PPUSH
23754: CALL_OW 446
23758: GO 23682
23760: POP
23761: POP
// end ;
23762: LD_VAR 0 3
23766: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23767: LD_INT 0
23769: PPUSH
23770: PPUSH
23771: PPUSH
23772: PPUSH
23773: PPUSH
23774: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23775: LD_VAR 0 1
23779: NOT
23780: PUSH
23781: LD_VAR 0 1
23785: PPUSH
23786: CALL_OW 263
23790: PUSH
23791: LD_INT 2
23793: NONEQUAL
23794: OR
23795: IFFALSE 23799
// exit ;
23797: GO 24115
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23799: LD_ADDR_VAR 0 6
23803: PUSH
23804: LD_INT 22
23806: PUSH
23807: LD_VAR 0 1
23811: PPUSH
23812: CALL_OW 255
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 2
23823: PUSH
23824: LD_INT 30
23826: PUSH
23827: LD_INT 36
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 34
23836: PUSH
23837: LD_INT 31
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: LIST
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PPUSH
23853: CALL_OW 69
23857: ST_TO_ADDR
// if not tmp then
23858: LD_VAR 0 6
23862: NOT
23863: IFFALSE 23867
// exit ;
23865: GO 24115
// result := [ ] ;
23867: LD_ADDR_VAR 0 2
23871: PUSH
23872: EMPTY
23873: ST_TO_ADDR
// for i in tmp do
23874: LD_ADDR_VAR 0 3
23878: PUSH
23879: LD_VAR 0 6
23883: PUSH
23884: FOR_IN
23885: IFFALSE 23956
// begin t := UnitsInside ( i ) ;
23887: LD_ADDR_VAR 0 4
23891: PUSH
23892: LD_VAR 0 3
23896: PPUSH
23897: CALL_OW 313
23901: ST_TO_ADDR
// if t then
23902: LD_VAR 0 4
23906: IFFALSE 23954
// for j in t do
23908: LD_ADDR_VAR 0 7
23912: PUSH
23913: LD_VAR 0 4
23917: PUSH
23918: FOR_IN
23919: IFFALSE 23952
// result := Replace ( result , result + 1 , j ) ;
23921: LD_ADDR_VAR 0 2
23925: PUSH
23926: LD_VAR 0 2
23930: PPUSH
23931: LD_VAR 0 2
23935: PUSH
23936: LD_INT 1
23938: PLUS
23939: PPUSH
23940: LD_VAR 0 7
23944: PPUSH
23945: CALL_OW 1
23949: ST_TO_ADDR
23950: GO 23918
23952: POP
23953: POP
// end ;
23954: GO 23884
23956: POP
23957: POP
// if not result then
23958: LD_VAR 0 2
23962: NOT
23963: IFFALSE 23967
// exit ;
23965: GO 24115
// mech := result [ 1 ] ;
23967: LD_ADDR_VAR 0 5
23971: PUSH
23972: LD_VAR 0 2
23976: PUSH
23977: LD_INT 1
23979: ARRAY
23980: ST_TO_ADDR
// if result > 1 then
23981: LD_VAR 0 2
23985: PUSH
23986: LD_INT 1
23988: GREATER
23989: IFFALSE 24101
// begin for i = 2 to result do
23991: LD_ADDR_VAR 0 3
23995: PUSH
23996: DOUBLE
23997: LD_INT 2
23999: DEC
24000: ST_TO_ADDR
24001: LD_VAR 0 2
24005: PUSH
24006: FOR_TO
24007: IFFALSE 24099
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24009: LD_ADDR_VAR 0 4
24013: PUSH
24014: LD_VAR 0 2
24018: PUSH
24019: LD_VAR 0 3
24023: ARRAY
24024: PPUSH
24025: LD_INT 3
24027: PPUSH
24028: CALL_OW 259
24032: PUSH
24033: LD_VAR 0 2
24037: PUSH
24038: LD_VAR 0 3
24042: ARRAY
24043: PPUSH
24044: CALL_OW 432
24048: MINUS
24049: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24050: LD_VAR 0 4
24054: PUSH
24055: LD_VAR 0 5
24059: PPUSH
24060: LD_INT 3
24062: PPUSH
24063: CALL_OW 259
24067: PUSH
24068: LD_VAR 0 5
24072: PPUSH
24073: CALL_OW 432
24077: MINUS
24078: GREATEREQUAL
24079: IFFALSE 24097
// mech := result [ i ] ;
24081: LD_ADDR_VAR 0 5
24085: PUSH
24086: LD_VAR 0 2
24090: PUSH
24091: LD_VAR 0 3
24095: ARRAY
24096: ST_TO_ADDR
// end ;
24097: GO 24006
24099: POP
24100: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24101: LD_VAR 0 1
24105: PPUSH
24106: LD_VAR 0 5
24110: PPUSH
24111: CALL_OW 135
// end ;
24115: LD_VAR 0 2
24119: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24120: LD_INT 0
24122: PPUSH
24123: PPUSH
24124: PPUSH
24125: PPUSH
24126: PPUSH
24127: PPUSH
24128: PPUSH
24129: PPUSH
24130: PPUSH
24131: PPUSH
24132: PPUSH
24133: PPUSH
24134: PPUSH
// result := [ ] ;
24135: LD_ADDR_VAR 0 7
24139: PUSH
24140: EMPTY
24141: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 266
24151: PUSH
24152: LD_INT 0
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: IN
24162: NOT
24163: IFFALSE 24167
// exit ;
24165: GO 25801
// if name then
24167: LD_VAR 0 3
24171: IFFALSE 24187
// SetBName ( base_dep , name ) ;
24173: LD_VAR 0 1
24177: PPUSH
24178: LD_VAR 0 3
24182: PPUSH
24183: CALL_OW 500
// base := GetBase ( base_dep ) ;
24187: LD_ADDR_VAR 0 15
24191: PUSH
24192: LD_VAR 0 1
24196: PPUSH
24197: CALL_OW 274
24201: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24202: LD_ADDR_VAR 0 16
24206: PUSH
24207: LD_VAR 0 1
24211: PPUSH
24212: CALL_OW 255
24216: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24217: LD_ADDR_VAR 0 17
24221: PUSH
24222: LD_VAR 0 1
24226: PPUSH
24227: CALL_OW 248
24231: ST_TO_ADDR
// if sources then
24232: LD_VAR 0 5
24236: IFFALSE 24283
// for i = 1 to 3 do
24238: LD_ADDR_VAR 0 8
24242: PUSH
24243: DOUBLE
24244: LD_INT 1
24246: DEC
24247: ST_TO_ADDR
24248: LD_INT 3
24250: PUSH
24251: FOR_TO
24252: IFFALSE 24281
// AddResourceType ( base , i , sources [ i ] ) ;
24254: LD_VAR 0 15
24258: PPUSH
24259: LD_VAR 0 8
24263: PPUSH
24264: LD_VAR 0 5
24268: PUSH
24269: LD_VAR 0 8
24273: ARRAY
24274: PPUSH
24275: CALL_OW 276
24279: GO 24251
24281: POP
24282: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24283: LD_ADDR_VAR 0 18
24287: PUSH
24288: LD_VAR 0 15
24292: PPUSH
24293: LD_VAR 0 2
24297: PPUSH
24298: LD_INT 1
24300: PPUSH
24301: CALL 23544 0 3
24305: ST_TO_ADDR
// InitHc ;
24306: CALL_OW 19
// InitUc ;
24310: CALL_OW 18
// uc_side := side ;
24314: LD_ADDR_OWVAR 20
24318: PUSH
24319: LD_VAR 0 16
24323: ST_TO_ADDR
// uc_nation := nation ;
24324: LD_ADDR_OWVAR 21
24328: PUSH
24329: LD_VAR 0 17
24333: ST_TO_ADDR
// if buildings then
24334: LD_VAR 0 18
24338: IFFALSE 25660
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24340: LD_ADDR_VAR 0 19
24344: PUSH
24345: LD_VAR 0 18
24349: PPUSH
24350: LD_INT 2
24352: PUSH
24353: LD_INT 30
24355: PUSH
24356: LD_INT 29
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 30
24365: PUSH
24366: LD_INT 30
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: LIST
24377: PPUSH
24378: CALL_OW 72
24382: ST_TO_ADDR
// if tmp then
24383: LD_VAR 0 19
24387: IFFALSE 24435
// for i in tmp do
24389: LD_ADDR_VAR 0 8
24393: PUSH
24394: LD_VAR 0 19
24398: PUSH
24399: FOR_IN
24400: IFFALSE 24433
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24402: LD_VAR 0 8
24406: PPUSH
24407: CALL_OW 250
24411: PPUSH
24412: LD_VAR 0 8
24416: PPUSH
24417: CALL_OW 251
24421: PPUSH
24422: LD_VAR 0 16
24426: PPUSH
24427: CALL_OW 441
24431: GO 24399
24433: POP
24434: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24435: LD_VAR 0 18
24439: PPUSH
24440: LD_INT 2
24442: PUSH
24443: LD_INT 30
24445: PUSH
24446: LD_INT 32
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 30
24455: PUSH
24456: LD_INT 33
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: LIST
24467: PPUSH
24468: CALL_OW 72
24472: IFFALSE 24560
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24474: LD_ADDR_VAR 0 8
24478: PUSH
24479: LD_VAR 0 18
24483: PPUSH
24484: LD_INT 2
24486: PUSH
24487: LD_INT 30
24489: PUSH
24490: LD_INT 32
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 30
24499: PUSH
24500: LD_INT 33
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: LIST
24511: PPUSH
24512: CALL_OW 72
24516: PUSH
24517: FOR_IN
24518: IFFALSE 24558
// begin if not GetBWeapon ( i ) then
24520: LD_VAR 0 8
24524: PPUSH
24525: CALL_OW 269
24529: NOT
24530: IFFALSE 24556
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24532: LD_VAR 0 8
24536: PPUSH
24537: LD_VAR 0 8
24541: PPUSH
24542: LD_VAR 0 2
24546: PPUSH
24547: CALL 25806 0 2
24551: PPUSH
24552: CALL_OW 431
// end ;
24556: GO 24517
24558: POP
24559: POP
// end ; for i = 1 to personel do
24560: LD_ADDR_VAR 0 8
24564: PUSH
24565: DOUBLE
24566: LD_INT 1
24568: DEC
24569: ST_TO_ADDR
24570: LD_VAR 0 6
24574: PUSH
24575: FOR_TO
24576: IFFALSE 25640
// begin if i > 4 then
24578: LD_VAR 0 8
24582: PUSH
24583: LD_INT 4
24585: GREATER
24586: IFFALSE 24590
// break ;
24588: GO 25640
// case i of 1 :
24590: LD_VAR 0 8
24594: PUSH
24595: LD_INT 1
24597: DOUBLE
24598: EQUAL
24599: IFTRUE 24603
24601: GO 24683
24603: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24604: LD_ADDR_VAR 0 12
24608: PUSH
24609: LD_VAR 0 18
24613: PPUSH
24614: LD_INT 22
24616: PUSH
24617: LD_VAR 0 16
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 58
24628: PUSH
24629: EMPTY
24630: LIST
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: LD_INT 30
24637: PUSH
24638: LD_INT 32
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 30
24647: PUSH
24648: LD_INT 4
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 30
24657: PUSH
24658: LD_INT 5
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: LIST
24675: PPUSH
24676: CALL_OW 72
24680: ST_TO_ADDR
24681: GO 24905
24683: LD_INT 2
24685: DOUBLE
24686: EQUAL
24687: IFTRUE 24691
24689: GO 24753
24691: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24692: LD_ADDR_VAR 0 12
24696: PUSH
24697: LD_VAR 0 18
24701: PPUSH
24702: LD_INT 22
24704: PUSH
24705: LD_VAR 0 16
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 2
24716: PUSH
24717: LD_INT 30
24719: PUSH
24720: LD_INT 0
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 30
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PPUSH
24746: CALL_OW 72
24750: ST_TO_ADDR
24751: GO 24905
24753: LD_INT 3
24755: DOUBLE
24756: EQUAL
24757: IFTRUE 24761
24759: GO 24823
24761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24762: LD_ADDR_VAR 0 12
24766: PUSH
24767: LD_VAR 0 18
24771: PPUSH
24772: LD_INT 22
24774: PUSH
24775: LD_VAR 0 16
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 2
24786: PUSH
24787: LD_INT 30
24789: PUSH
24790: LD_INT 2
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 30
24799: PUSH
24800: LD_INT 3
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PPUSH
24816: CALL_OW 72
24820: ST_TO_ADDR
24821: GO 24905
24823: LD_INT 4
24825: DOUBLE
24826: EQUAL
24827: IFTRUE 24831
24829: GO 24904
24831: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24832: LD_ADDR_VAR 0 12
24836: PUSH
24837: LD_VAR 0 18
24841: PPUSH
24842: LD_INT 22
24844: PUSH
24845: LD_VAR 0 16
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: LD_INT 30
24859: PUSH
24860: LD_INT 6
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 30
24869: PUSH
24870: LD_INT 7
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 30
24879: PUSH
24880: LD_INT 8
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PPUSH
24897: CALL_OW 72
24901: ST_TO_ADDR
24902: GO 24905
24904: POP
// if i = 1 then
24905: LD_VAR 0 8
24909: PUSH
24910: LD_INT 1
24912: EQUAL
24913: IFFALSE 25024
// begin tmp := [ ] ;
24915: LD_ADDR_VAR 0 19
24919: PUSH
24920: EMPTY
24921: ST_TO_ADDR
// for j in f do
24922: LD_ADDR_VAR 0 9
24926: PUSH
24927: LD_VAR 0 12
24931: PUSH
24932: FOR_IN
24933: IFFALSE 25006
// if GetBType ( j ) = b_bunker then
24935: LD_VAR 0 9
24939: PPUSH
24940: CALL_OW 266
24944: PUSH
24945: LD_INT 32
24947: EQUAL
24948: IFFALSE 24975
// tmp := Insert ( tmp , 1 , j ) else
24950: LD_ADDR_VAR 0 19
24954: PUSH
24955: LD_VAR 0 19
24959: PPUSH
24960: LD_INT 1
24962: PPUSH
24963: LD_VAR 0 9
24967: PPUSH
24968: CALL_OW 2
24972: ST_TO_ADDR
24973: GO 25004
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24975: LD_ADDR_VAR 0 19
24979: PUSH
24980: LD_VAR 0 19
24984: PPUSH
24985: LD_VAR 0 19
24989: PUSH
24990: LD_INT 1
24992: PLUS
24993: PPUSH
24994: LD_VAR 0 9
24998: PPUSH
24999: CALL_OW 2
25003: ST_TO_ADDR
25004: GO 24932
25006: POP
25007: POP
// if tmp then
25008: LD_VAR 0 19
25012: IFFALSE 25024
// f := tmp ;
25014: LD_ADDR_VAR 0 12
25018: PUSH
25019: LD_VAR 0 19
25023: ST_TO_ADDR
// end ; x := personel [ i ] ;
25024: LD_ADDR_VAR 0 13
25028: PUSH
25029: LD_VAR 0 6
25033: PUSH
25034: LD_VAR 0 8
25038: ARRAY
25039: ST_TO_ADDR
// if x = - 1 then
25040: LD_VAR 0 13
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: EQUAL
25049: IFFALSE 25258
// begin for j in f do
25051: LD_ADDR_VAR 0 9
25055: PUSH
25056: LD_VAR 0 12
25060: PUSH
25061: FOR_IN
25062: IFFALSE 25254
// repeat InitHc ;
25064: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25068: LD_VAR 0 9
25072: PPUSH
25073: CALL_OW 266
25077: PUSH
25078: LD_INT 5
25080: EQUAL
25081: IFFALSE 25151
// begin if UnitsInside ( j ) < 3 then
25083: LD_VAR 0 9
25087: PPUSH
25088: CALL_OW 313
25092: PUSH
25093: LD_INT 3
25095: LESS
25096: IFFALSE 25132
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25098: LD_INT 0
25100: PPUSH
25101: LD_INT 5
25103: PUSH
25104: LD_INT 8
25106: PUSH
25107: LD_INT 9
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: LIST
25114: PUSH
25115: LD_VAR 0 17
25119: ARRAY
25120: PPUSH
25121: LD_VAR 0 4
25125: PPUSH
25126: CALL_OW 380
25130: GO 25149
// PrepareHuman ( false , i , skill ) ;
25132: LD_INT 0
25134: PPUSH
25135: LD_VAR 0 8
25139: PPUSH
25140: LD_VAR 0 4
25144: PPUSH
25145: CALL_OW 380
// end else
25149: GO 25168
// PrepareHuman ( false , i , skill ) ;
25151: LD_INT 0
25153: PPUSH
25154: LD_VAR 0 8
25158: PPUSH
25159: LD_VAR 0 4
25163: PPUSH
25164: CALL_OW 380
// un := CreateHuman ;
25168: LD_ADDR_VAR 0 14
25172: PUSH
25173: CALL_OW 44
25177: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25178: LD_ADDR_VAR 0 7
25182: PUSH
25183: LD_VAR 0 7
25187: PPUSH
25188: LD_INT 1
25190: PPUSH
25191: LD_VAR 0 14
25195: PPUSH
25196: CALL_OW 2
25200: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25201: LD_VAR 0 14
25205: PPUSH
25206: LD_VAR 0 9
25210: PPUSH
25211: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25215: LD_VAR 0 9
25219: PPUSH
25220: CALL_OW 313
25224: PUSH
25225: LD_INT 6
25227: EQUAL
25228: PUSH
25229: LD_VAR 0 9
25233: PPUSH
25234: CALL_OW 266
25238: PUSH
25239: LD_INT 32
25241: PUSH
25242: LD_INT 31
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: IN
25249: OR
25250: IFFALSE 25064
25252: GO 25061
25254: POP
25255: POP
// end else
25256: GO 25638
// for j = 1 to x do
25258: LD_ADDR_VAR 0 9
25262: PUSH
25263: DOUBLE
25264: LD_INT 1
25266: DEC
25267: ST_TO_ADDR
25268: LD_VAR 0 13
25272: PUSH
25273: FOR_TO
25274: IFFALSE 25636
// begin InitHc ;
25276: CALL_OW 19
// if not f then
25280: LD_VAR 0 12
25284: NOT
25285: IFFALSE 25374
// begin PrepareHuman ( false , i , skill ) ;
25287: LD_INT 0
25289: PPUSH
25290: LD_VAR 0 8
25294: PPUSH
25295: LD_VAR 0 4
25299: PPUSH
25300: CALL_OW 380
// un := CreateHuman ;
25304: LD_ADDR_VAR 0 14
25308: PUSH
25309: CALL_OW 44
25313: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25314: LD_ADDR_VAR 0 7
25318: PUSH
25319: LD_VAR 0 7
25323: PPUSH
25324: LD_INT 1
25326: PPUSH
25327: LD_VAR 0 14
25331: PPUSH
25332: CALL_OW 2
25336: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25337: LD_VAR 0 14
25341: PPUSH
25342: LD_VAR 0 1
25346: PPUSH
25347: CALL_OW 250
25351: PPUSH
25352: LD_VAR 0 1
25356: PPUSH
25357: CALL_OW 251
25361: PPUSH
25362: LD_INT 10
25364: PPUSH
25365: LD_INT 0
25367: PPUSH
25368: CALL_OW 50
// continue ;
25372: GO 25273
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25374: LD_VAR 0 12
25378: PUSH
25379: LD_INT 1
25381: ARRAY
25382: PPUSH
25383: CALL_OW 313
25387: PUSH
25388: LD_VAR 0 12
25392: PUSH
25393: LD_INT 1
25395: ARRAY
25396: PPUSH
25397: CALL_OW 266
25401: PUSH
25402: LD_INT 32
25404: PUSH
25405: LD_INT 31
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: IN
25412: AND
25413: PUSH
25414: LD_VAR 0 12
25418: PUSH
25419: LD_INT 1
25421: ARRAY
25422: PPUSH
25423: CALL_OW 313
25427: PUSH
25428: LD_INT 6
25430: EQUAL
25431: OR
25432: IFFALSE 25452
// f := Delete ( f , 1 ) ;
25434: LD_ADDR_VAR 0 12
25438: PUSH
25439: LD_VAR 0 12
25443: PPUSH
25444: LD_INT 1
25446: PPUSH
25447: CALL_OW 3
25451: ST_TO_ADDR
// if not f then
25452: LD_VAR 0 12
25456: NOT
25457: IFFALSE 25475
// begin x := x + 2 ;
25459: LD_ADDR_VAR 0 13
25463: PUSH
25464: LD_VAR 0 13
25468: PUSH
25469: LD_INT 2
25471: PLUS
25472: ST_TO_ADDR
// continue ;
25473: GO 25273
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25475: LD_VAR 0 12
25479: PUSH
25480: LD_INT 1
25482: ARRAY
25483: PPUSH
25484: CALL_OW 266
25488: PUSH
25489: LD_INT 5
25491: EQUAL
25492: IFFALSE 25566
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25494: LD_VAR 0 12
25498: PUSH
25499: LD_INT 1
25501: ARRAY
25502: PPUSH
25503: CALL_OW 313
25507: PUSH
25508: LD_INT 3
25510: LESS
25511: IFFALSE 25547
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25513: LD_INT 0
25515: PPUSH
25516: LD_INT 5
25518: PUSH
25519: LD_INT 8
25521: PUSH
25522: LD_INT 9
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: LIST
25529: PUSH
25530: LD_VAR 0 17
25534: ARRAY
25535: PPUSH
25536: LD_VAR 0 4
25540: PPUSH
25541: CALL_OW 380
25545: GO 25564
// PrepareHuman ( false , i , skill ) ;
25547: LD_INT 0
25549: PPUSH
25550: LD_VAR 0 8
25554: PPUSH
25555: LD_VAR 0 4
25559: PPUSH
25560: CALL_OW 380
// end else
25564: GO 25583
// PrepareHuman ( false , i , skill ) ;
25566: LD_INT 0
25568: PPUSH
25569: LD_VAR 0 8
25573: PPUSH
25574: LD_VAR 0 4
25578: PPUSH
25579: CALL_OW 380
// un := CreateHuman ;
25583: LD_ADDR_VAR 0 14
25587: PUSH
25588: CALL_OW 44
25592: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25593: LD_ADDR_VAR 0 7
25597: PUSH
25598: LD_VAR 0 7
25602: PPUSH
25603: LD_INT 1
25605: PPUSH
25606: LD_VAR 0 14
25610: PPUSH
25611: CALL_OW 2
25615: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25616: LD_VAR 0 14
25620: PPUSH
25621: LD_VAR 0 12
25625: PUSH
25626: LD_INT 1
25628: ARRAY
25629: PPUSH
25630: CALL_OW 52
// end ;
25634: GO 25273
25636: POP
25637: POP
// end ;
25638: GO 24575
25640: POP
25641: POP
// result := result ^ buildings ;
25642: LD_ADDR_VAR 0 7
25646: PUSH
25647: LD_VAR 0 7
25651: PUSH
25652: LD_VAR 0 18
25656: ADD
25657: ST_TO_ADDR
// end else
25658: GO 25801
// begin for i = 1 to personel do
25660: LD_ADDR_VAR 0 8
25664: PUSH
25665: DOUBLE
25666: LD_INT 1
25668: DEC
25669: ST_TO_ADDR
25670: LD_VAR 0 6
25674: PUSH
25675: FOR_TO
25676: IFFALSE 25799
// begin if i > 4 then
25678: LD_VAR 0 8
25682: PUSH
25683: LD_INT 4
25685: GREATER
25686: IFFALSE 25690
// break ;
25688: GO 25799
// x := personel [ i ] ;
25690: LD_ADDR_VAR 0 13
25694: PUSH
25695: LD_VAR 0 6
25699: PUSH
25700: LD_VAR 0 8
25704: ARRAY
25705: ST_TO_ADDR
// if x = - 1 then
25706: LD_VAR 0 13
25710: PUSH
25711: LD_INT 1
25713: NEG
25714: EQUAL
25715: IFFALSE 25719
// continue ;
25717: GO 25675
// PrepareHuman ( false , i , skill ) ;
25719: LD_INT 0
25721: PPUSH
25722: LD_VAR 0 8
25726: PPUSH
25727: LD_VAR 0 4
25731: PPUSH
25732: CALL_OW 380
// un := CreateHuman ;
25736: LD_ADDR_VAR 0 14
25740: PUSH
25741: CALL_OW 44
25745: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25746: LD_VAR 0 14
25750: PPUSH
25751: LD_VAR 0 1
25755: PPUSH
25756: CALL_OW 250
25760: PPUSH
25761: LD_VAR 0 1
25765: PPUSH
25766: CALL_OW 251
25770: PPUSH
25771: LD_INT 10
25773: PPUSH
25774: LD_INT 0
25776: PPUSH
25777: CALL_OW 50
// result := result ^ un ;
25781: LD_ADDR_VAR 0 7
25785: PUSH
25786: LD_VAR 0 7
25790: PUSH
25791: LD_VAR 0 14
25795: ADD
25796: ST_TO_ADDR
// end ;
25797: GO 25675
25799: POP
25800: POP
// end ; end ;
25801: LD_VAR 0 7
25805: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25806: LD_INT 0
25808: PPUSH
25809: PPUSH
25810: PPUSH
25811: PPUSH
25812: PPUSH
25813: PPUSH
25814: PPUSH
25815: PPUSH
25816: PPUSH
25817: PPUSH
25818: PPUSH
25819: PPUSH
25820: PPUSH
25821: PPUSH
25822: PPUSH
25823: PPUSH
// result := false ;
25824: LD_ADDR_VAR 0 3
25828: PUSH
25829: LD_INT 0
25831: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25832: LD_VAR 0 1
25836: NOT
25837: PUSH
25838: LD_VAR 0 1
25842: PPUSH
25843: CALL_OW 266
25847: PUSH
25848: LD_INT 32
25850: PUSH
25851: LD_INT 33
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: IN
25858: NOT
25859: OR
25860: IFFALSE 25864
// exit ;
25862: GO 26973
// nat := GetNation ( tower ) ;
25864: LD_ADDR_VAR 0 12
25868: PUSH
25869: LD_VAR 0 1
25873: PPUSH
25874: CALL_OW 248
25878: ST_TO_ADDR
// side := GetSide ( tower ) ;
25879: LD_ADDR_VAR 0 16
25883: PUSH
25884: LD_VAR 0 1
25888: PPUSH
25889: CALL_OW 255
25893: ST_TO_ADDR
// x := GetX ( tower ) ;
25894: LD_ADDR_VAR 0 10
25898: PUSH
25899: LD_VAR 0 1
25903: PPUSH
25904: CALL_OW 250
25908: ST_TO_ADDR
// y := GetY ( tower ) ;
25909: LD_ADDR_VAR 0 11
25913: PUSH
25914: LD_VAR 0 1
25918: PPUSH
25919: CALL_OW 251
25923: ST_TO_ADDR
// if not x or not y then
25924: LD_VAR 0 10
25928: NOT
25929: PUSH
25930: LD_VAR 0 11
25934: NOT
25935: OR
25936: IFFALSE 25940
// exit ;
25938: GO 26973
// weapon := 0 ;
25940: LD_ADDR_VAR 0 18
25944: PUSH
25945: LD_INT 0
25947: ST_TO_ADDR
// fac_list := [ ] ;
25948: LD_ADDR_VAR 0 17
25952: PUSH
25953: EMPTY
25954: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25955: LD_ADDR_VAR 0 6
25959: PUSH
25960: LD_VAR 0 1
25964: PPUSH
25965: CALL_OW 274
25969: PPUSH
25970: LD_VAR 0 2
25974: PPUSH
25975: LD_INT 0
25977: PPUSH
25978: CALL 23544 0 3
25982: PPUSH
25983: LD_INT 30
25985: PUSH
25986: LD_INT 3
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PPUSH
25993: CALL_OW 72
25997: ST_TO_ADDR
// if not factories then
25998: LD_VAR 0 6
26002: NOT
26003: IFFALSE 26007
// exit ;
26005: GO 26973
// for i in factories do
26007: LD_ADDR_VAR 0 8
26011: PUSH
26012: LD_VAR 0 6
26016: PUSH
26017: FOR_IN
26018: IFFALSE 26043
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26020: LD_ADDR_VAR 0 17
26024: PUSH
26025: LD_VAR 0 17
26029: PUSH
26030: LD_VAR 0 8
26034: PPUSH
26035: CALL_OW 478
26039: UNION
26040: ST_TO_ADDR
26041: GO 26017
26043: POP
26044: POP
// if not fac_list then
26045: LD_VAR 0 17
26049: NOT
26050: IFFALSE 26054
// exit ;
26052: GO 26973
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26054: LD_ADDR_VAR 0 5
26058: PUSH
26059: LD_INT 4
26061: PUSH
26062: LD_INT 5
26064: PUSH
26065: LD_INT 9
26067: PUSH
26068: LD_INT 10
26070: PUSH
26071: LD_INT 6
26073: PUSH
26074: LD_INT 7
26076: PUSH
26077: LD_INT 11
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 27
26091: PUSH
26092: LD_INT 28
26094: PUSH
26095: LD_INT 26
26097: PUSH
26098: LD_INT 30
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 43
26109: PUSH
26110: LD_INT 44
26112: PUSH
26113: LD_INT 46
26115: PUSH
26116: LD_INT 45
26118: PUSH
26119: LD_INT 47
26121: PUSH
26122: LD_INT 49
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: LIST
26137: PUSH
26138: LD_VAR 0 12
26142: ARRAY
26143: ST_TO_ADDR
// list := list isect fac_list ;
26144: LD_ADDR_VAR 0 5
26148: PUSH
26149: LD_VAR 0 5
26153: PUSH
26154: LD_VAR 0 17
26158: ISECT
26159: ST_TO_ADDR
// if not list then
26160: LD_VAR 0 5
26164: NOT
26165: IFFALSE 26169
// exit ;
26167: GO 26973
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26169: LD_VAR 0 12
26173: PUSH
26174: LD_INT 3
26176: EQUAL
26177: PUSH
26178: LD_INT 49
26180: PUSH
26181: LD_VAR 0 5
26185: IN
26186: AND
26187: PUSH
26188: LD_INT 31
26190: PPUSH
26191: LD_VAR 0 16
26195: PPUSH
26196: CALL_OW 321
26200: PUSH
26201: LD_INT 2
26203: EQUAL
26204: AND
26205: IFFALSE 26265
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26207: LD_INT 22
26209: PUSH
26210: LD_VAR 0 16
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 35
26221: PUSH
26222: LD_INT 49
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 91
26231: PUSH
26232: LD_VAR 0 1
26236: PUSH
26237: LD_INT 10
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: LIST
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: PPUSH
26250: CALL_OW 69
26254: NOT
26255: IFFALSE 26265
// weapon := ru_time_lapser ;
26257: LD_ADDR_VAR 0 18
26261: PUSH
26262: LD_INT 49
26264: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26265: LD_VAR 0 12
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: IN
26280: PUSH
26281: LD_INT 11
26283: PUSH
26284: LD_VAR 0 5
26288: IN
26289: PUSH
26290: LD_INT 30
26292: PUSH
26293: LD_VAR 0 5
26297: IN
26298: OR
26299: AND
26300: PUSH
26301: LD_INT 6
26303: PPUSH
26304: LD_VAR 0 16
26308: PPUSH
26309: CALL_OW 321
26313: PUSH
26314: LD_INT 2
26316: EQUAL
26317: AND
26318: IFFALSE 26483
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26320: LD_INT 22
26322: PUSH
26323: LD_VAR 0 16
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 2
26334: PUSH
26335: LD_INT 35
26337: PUSH
26338: LD_INT 11
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 35
26347: PUSH
26348: LD_INT 30
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 91
26362: PUSH
26363: LD_VAR 0 1
26367: PUSH
26368: LD_INT 18
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: PPUSH
26381: CALL_OW 69
26385: NOT
26386: PUSH
26387: LD_INT 22
26389: PUSH
26390: LD_VAR 0 16
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 2
26401: PUSH
26402: LD_INT 30
26404: PUSH
26405: LD_INT 32
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 30
26414: PUSH
26415: LD_INT 33
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 91
26429: PUSH
26430: LD_VAR 0 1
26434: PUSH
26435: LD_INT 12
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: LIST
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: LIST
26447: PUSH
26448: EMPTY
26449: LIST
26450: PPUSH
26451: CALL_OW 69
26455: PUSH
26456: LD_INT 2
26458: GREATER
26459: AND
26460: IFFALSE 26483
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26462: LD_ADDR_VAR 0 18
26466: PUSH
26467: LD_INT 11
26469: PUSH
26470: LD_INT 30
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_VAR 0 12
26481: ARRAY
26482: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26483: LD_VAR 0 18
26487: NOT
26488: PUSH
26489: LD_INT 40
26491: PPUSH
26492: LD_VAR 0 16
26496: PPUSH
26497: CALL_OW 321
26501: PUSH
26502: LD_INT 2
26504: EQUAL
26505: AND
26506: PUSH
26507: LD_INT 7
26509: PUSH
26510: LD_VAR 0 5
26514: IN
26515: PUSH
26516: LD_INT 28
26518: PUSH
26519: LD_VAR 0 5
26523: IN
26524: OR
26525: PUSH
26526: LD_INT 45
26528: PUSH
26529: LD_VAR 0 5
26533: IN
26534: OR
26535: AND
26536: IFFALSE 26790
// begin hex := GetHexInfo ( x , y ) ;
26538: LD_ADDR_VAR 0 4
26542: PUSH
26543: LD_VAR 0 10
26547: PPUSH
26548: LD_VAR 0 11
26552: PPUSH
26553: CALL_OW 546
26557: ST_TO_ADDR
// if hex [ 1 ] then
26558: LD_VAR 0 4
26562: PUSH
26563: LD_INT 1
26565: ARRAY
26566: IFFALSE 26570
// exit ;
26568: GO 26973
// height := hex [ 2 ] ;
26570: LD_ADDR_VAR 0 15
26574: PUSH
26575: LD_VAR 0 4
26579: PUSH
26580: LD_INT 2
26582: ARRAY
26583: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26584: LD_ADDR_VAR 0 14
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: LD_INT 2
26594: PUSH
26595: LD_INT 3
26597: PUSH
26598: LD_INT 5
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: ST_TO_ADDR
// for i in tmp do
26607: LD_ADDR_VAR 0 8
26611: PUSH
26612: LD_VAR 0 14
26616: PUSH
26617: FOR_IN
26618: IFFALSE 26788
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26620: LD_ADDR_VAR 0 9
26624: PUSH
26625: LD_VAR 0 10
26629: PPUSH
26630: LD_VAR 0 8
26634: PPUSH
26635: LD_INT 5
26637: PPUSH
26638: CALL_OW 272
26642: PUSH
26643: LD_VAR 0 11
26647: PPUSH
26648: LD_VAR 0 8
26652: PPUSH
26653: LD_INT 5
26655: PPUSH
26656: CALL_OW 273
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26665: LD_VAR 0 9
26669: PUSH
26670: LD_INT 1
26672: ARRAY
26673: PPUSH
26674: LD_VAR 0 9
26678: PUSH
26679: LD_INT 2
26681: ARRAY
26682: PPUSH
26683: CALL_OW 488
26687: IFFALSE 26786
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26689: LD_ADDR_VAR 0 4
26693: PUSH
26694: LD_VAR 0 9
26698: PUSH
26699: LD_INT 1
26701: ARRAY
26702: PPUSH
26703: LD_VAR 0 9
26707: PUSH
26708: LD_INT 2
26710: ARRAY
26711: PPUSH
26712: CALL_OW 546
26716: ST_TO_ADDR
// if hex [ 1 ] then
26717: LD_VAR 0 4
26721: PUSH
26722: LD_INT 1
26724: ARRAY
26725: IFFALSE 26729
// continue ;
26727: GO 26617
// h := hex [ 2 ] ;
26729: LD_ADDR_VAR 0 13
26733: PUSH
26734: LD_VAR 0 4
26738: PUSH
26739: LD_INT 2
26741: ARRAY
26742: ST_TO_ADDR
// if h + 7 < height then
26743: LD_VAR 0 13
26747: PUSH
26748: LD_INT 7
26750: PLUS
26751: PUSH
26752: LD_VAR 0 15
26756: LESS
26757: IFFALSE 26786
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26759: LD_ADDR_VAR 0 18
26763: PUSH
26764: LD_INT 7
26766: PUSH
26767: LD_INT 28
26769: PUSH
26770: LD_INT 45
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: LIST
26777: PUSH
26778: LD_VAR 0 12
26782: ARRAY
26783: ST_TO_ADDR
// break ;
26784: GO 26788
// end ; end ; end ;
26786: GO 26617
26788: POP
26789: POP
// end ; if not weapon then
26790: LD_VAR 0 18
26794: NOT
26795: IFFALSE 26855
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26797: LD_ADDR_VAR 0 5
26801: PUSH
26802: LD_VAR 0 5
26806: PUSH
26807: LD_INT 11
26809: PUSH
26810: LD_INT 30
26812: PUSH
26813: LD_INT 49
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: LIST
26820: DIFF
26821: ST_TO_ADDR
// if not list then
26822: LD_VAR 0 5
26826: NOT
26827: IFFALSE 26831
// exit ;
26829: GO 26973
// weapon := list [ rand ( 1 , list ) ] ;
26831: LD_ADDR_VAR 0 18
26835: PUSH
26836: LD_VAR 0 5
26840: PUSH
26841: LD_INT 1
26843: PPUSH
26844: LD_VAR 0 5
26848: PPUSH
26849: CALL_OW 12
26853: ARRAY
26854: ST_TO_ADDR
// end ; if weapon then
26855: LD_VAR 0 18
26859: IFFALSE 26973
// begin tmp := CostOfWeapon ( weapon ) ;
26861: LD_ADDR_VAR 0 14
26865: PUSH
26866: LD_VAR 0 18
26870: PPUSH
26871: CALL_OW 451
26875: ST_TO_ADDR
// j := GetBase ( tower ) ;
26876: LD_ADDR_VAR 0 9
26880: PUSH
26881: LD_VAR 0 1
26885: PPUSH
26886: CALL_OW 274
26890: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26891: LD_VAR 0 9
26895: PPUSH
26896: LD_INT 1
26898: PPUSH
26899: CALL_OW 275
26903: PUSH
26904: LD_VAR 0 14
26908: PUSH
26909: LD_INT 1
26911: ARRAY
26912: GREATEREQUAL
26913: PUSH
26914: LD_VAR 0 9
26918: PPUSH
26919: LD_INT 2
26921: PPUSH
26922: CALL_OW 275
26926: PUSH
26927: LD_VAR 0 14
26931: PUSH
26932: LD_INT 2
26934: ARRAY
26935: GREATEREQUAL
26936: AND
26937: PUSH
26938: LD_VAR 0 9
26942: PPUSH
26943: LD_INT 3
26945: PPUSH
26946: CALL_OW 275
26950: PUSH
26951: LD_VAR 0 14
26955: PUSH
26956: LD_INT 3
26958: ARRAY
26959: GREATEREQUAL
26960: AND
26961: IFFALSE 26973
// result := weapon ;
26963: LD_ADDR_VAR 0 3
26967: PUSH
26968: LD_VAR 0 18
26972: ST_TO_ADDR
// end ; end ;
26973: LD_VAR 0 3
26977: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26978: LD_INT 0
26980: PPUSH
26981: PPUSH
// result := true ;
26982: LD_ADDR_VAR 0 3
26986: PUSH
26987: LD_INT 1
26989: ST_TO_ADDR
// if array1 = array2 then
26990: LD_VAR 0 1
26994: PUSH
26995: LD_VAR 0 2
26999: EQUAL
27000: IFFALSE 27060
// begin for i = 1 to array1 do
27002: LD_ADDR_VAR 0 4
27006: PUSH
27007: DOUBLE
27008: LD_INT 1
27010: DEC
27011: ST_TO_ADDR
27012: LD_VAR 0 1
27016: PUSH
27017: FOR_TO
27018: IFFALSE 27056
// if array1 [ i ] <> array2 [ i ] then
27020: LD_VAR 0 1
27024: PUSH
27025: LD_VAR 0 4
27029: ARRAY
27030: PUSH
27031: LD_VAR 0 2
27035: PUSH
27036: LD_VAR 0 4
27040: ARRAY
27041: NONEQUAL
27042: IFFALSE 27054
// begin result := false ;
27044: LD_ADDR_VAR 0 3
27048: PUSH
27049: LD_INT 0
27051: ST_TO_ADDR
// break ;
27052: GO 27056
// end ;
27054: GO 27017
27056: POP
27057: POP
// end else
27058: GO 27068
// result := false ;
27060: LD_ADDR_VAR 0 3
27064: PUSH
27065: LD_INT 0
27067: ST_TO_ADDR
// end ;
27068: LD_VAR 0 3
27072: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27073: LD_INT 0
27075: PPUSH
27076: PPUSH
// if not array1 or not array2 then
27077: LD_VAR 0 1
27081: NOT
27082: PUSH
27083: LD_VAR 0 2
27087: NOT
27088: OR
27089: IFFALSE 27093
// exit ;
27091: GO 27157
// result := true ;
27093: LD_ADDR_VAR 0 3
27097: PUSH
27098: LD_INT 1
27100: ST_TO_ADDR
// for i = 1 to array1 do
27101: LD_ADDR_VAR 0 4
27105: PUSH
27106: DOUBLE
27107: LD_INT 1
27109: DEC
27110: ST_TO_ADDR
27111: LD_VAR 0 1
27115: PUSH
27116: FOR_TO
27117: IFFALSE 27155
// if array1 [ i ] <> array2 [ i ] then
27119: LD_VAR 0 1
27123: PUSH
27124: LD_VAR 0 4
27128: ARRAY
27129: PUSH
27130: LD_VAR 0 2
27134: PUSH
27135: LD_VAR 0 4
27139: ARRAY
27140: NONEQUAL
27141: IFFALSE 27153
// begin result := false ;
27143: LD_ADDR_VAR 0 3
27147: PUSH
27148: LD_INT 0
27150: ST_TO_ADDR
// break ;
27151: GO 27155
// end ;
27153: GO 27116
27155: POP
27156: POP
// end ;
27157: LD_VAR 0 3
27161: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27162: LD_INT 0
27164: PPUSH
27165: PPUSH
27166: PPUSH
// pom := GetBase ( fac ) ;
27167: LD_ADDR_VAR 0 5
27171: PUSH
27172: LD_VAR 0 1
27176: PPUSH
27177: CALL_OW 274
27181: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27182: LD_ADDR_VAR 0 4
27186: PUSH
27187: LD_VAR 0 2
27191: PUSH
27192: LD_INT 1
27194: ARRAY
27195: PPUSH
27196: LD_VAR 0 2
27200: PUSH
27201: LD_INT 2
27203: ARRAY
27204: PPUSH
27205: LD_VAR 0 2
27209: PUSH
27210: LD_INT 3
27212: ARRAY
27213: PPUSH
27214: LD_VAR 0 2
27218: PUSH
27219: LD_INT 4
27221: ARRAY
27222: PPUSH
27223: CALL_OW 449
27227: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27228: LD_ADDR_VAR 0 3
27232: PUSH
27233: LD_VAR 0 5
27237: PPUSH
27238: LD_INT 1
27240: PPUSH
27241: CALL_OW 275
27245: PUSH
27246: LD_VAR 0 4
27250: PUSH
27251: LD_INT 1
27253: ARRAY
27254: GREATEREQUAL
27255: PUSH
27256: LD_VAR 0 5
27260: PPUSH
27261: LD_INT 2
27263: PPUSH
27264: CALL_OW 275
27268: PUSH
27269: LD_VAR 0 4
27273: PUSH
27274: LD_INT 2
27276: ARRAY
27277: GREATEREQUAL
27278: AND
27279: PUSH
27280: LD_VAR 0 5
27284: PPUSH
27285: LD_INT 3
27287: PPUSH
27288: CALL_OW 275
27292: PUSH
27293: LD_VAR 0 4
27297: PUSH
27298: LD_INT 3
27300: ARRAY
27301: GREATEREQUAL
27302: AND
27303: ST_TO_ADDR
// end ;
27304: LD_VAR 0 3
27308: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27309: LD_INT 0
27311: PPUSH
27312: PPUSH
27313: PPUSH
27314: PPUSH
// pom := GetBase ( building ) ;
27315: LD_ADDR_VAR 0 3
27319: PUSH
27320: LD_VAR 0 1
27324: PPUSH
27325: CALL_OW 274
27329: ST_TO_ADDR
// if not pom then
27330: LD_VAR 0 3
27334: NOT
27335: IFFALSE 27339
// exit ;
27337: GO 27509
// btype := GetBType ( building ) ;
27339: LD_ADDR_VAR 0 5
27343: PUSH
27344: LD_VAR 0 1
27348: PPUSH
27349: CALL_OW 266
27353: ST_TO_ADDR
// if btype = b_armoury then
27354: LD_VAR 0 5
27358: PUSH
27359: LD_INT 4
27361: EQUAL
27362: IFFALSE 27372
// btype := b_barracks ;
27364: LD_ADDR_VAR 0 5
27368: PUSH
27369: LD_INT 5
27371: ST_TO_ADDR
// if btype = b_depot then
27372: LD_VAR 0 5
27376: PUSH
27377: LD_INT 0
27379: EQUAL
27380: IFFALSE 27390
// btype := b_warehouse ;
27382: LD_ADDR_VAR 0 5
27386: PUSH
27387: LD_INT 1
27389: ST_TO_ADDR
// if btype = b_workshop then
27390: LD_VAR 0 5
27394: PUSH
27395: LD_INT 2
27397: EQUAL
27398: IFFALSE 27408
// btype := b_factory ;
27400: LD_ADDR_VAR 0 5
27404: PUSH
27405: LD_INT 3
27407: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27408: LD_ADDR_VAR 0 4
27412: PUSH
27413: LD_VAR 0 5
27417: PPUSH
27418: LD_VAR 0 1
27422: PPUSH
27423: CALL_OW 248
27427: PPUSH
27428: CALL_OW 450
27432: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27433: LD_ADDR_VAR 0 2
27437: PUSH
27438: LD_VAR 0 3
27442: PPUSH
27443: LD_INT 1
27445: PPUSH
27446: CALL_OW 275
27450: PUSH
27451: LD_VAR 0 4
27455: PUSH
27456: LD_INT 1
27458: ARRAY
27459: GREATEREQUAL
27460: PUSH
27461: LD_VAR 0 3
27465: PPUSH
27466: LD_INT 2
27468: PPUSH
27469: CALL_OW 275
27473: PUSH
27474: LD_VAR 0 4
27478: PUSH
27479: LD_INT 2
27481: ARRAY
27482: GREATEREQUAL
27483: AND
27484: PUSH
27485: LD_VAR 0 3
27489: PPUSH
27490: LD_INT 3
27492: PPUSH
27493: CALL_OW 275
27497: PUSH
27498: LD_VAR 0 4
27502: PUSH
27503: LD_INT 3
27505: ARRAY
27506: GREATEREQUAL
27507: AND
27508: ST_TO_ADDR
// end ;
27509: LD_VAR 0 2
27513: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27514: LD_INT 0
27516: PPUSH
27517: PPUSH
27518: PPUSH
// pom := GetBase ( building ) ;
27519: LD_ADDR_VAR 0 4
27523: PUSH
27524: LD_VAR 0 1
27528: PPUSH
27529: CALL_OW 274
27533: ST_TO_ADDR
// if not pom then
27534: LD_VAR 0 4
27538: NOT
27539: IFFALSE 27543
// exit ;
27541: GO 27644
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27543: LD_ADDR_VAR 0 5
27547: PUSH
27548: LD_VAR 0 2
27552: PPUSH
27553: LD_VAR 0 1
27557: PPUSH
27558: CALL_OW 248
27562: PPUSH
27563: CALL_OW 450
27567: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27568: LD_ADDR_VAR 0 3
27572: PUSH
27573: LD_VAR 0 4
27577: PPUSH
27578: LD_INT 1
27580: PPUSH
27581: CALL_OW 275
27585: PUSH
27586: LD_VAR 0 5
27590: PUSH
27591: LD_INT 1
27593: ARRAY
27594: GREATEREQUAL
27595: PUSH
27596: LD_VAR 0 4
27600: PPUSH
27601: LD_INT 2
27603: PPUSH
27604: CALL_OW 275
27608: PUSH
27609: LD_VAR 0 5
27613: PUSH
27614: LD_INT 2
27616: ARRAY
27617: GREATEREQUAL
27618: AND
27619: PUSH
27620: LD_VAR 0 4
27624: PPUSH
27625: LD_INT 3
27627: PPUSH
27628: CALL_OW 275
27632: PUSH
27633: LD_VAR 0 5
27637: PUSH
27638: LD_INT 3
27640: ARRAY
27641: GREATEREQUAL
27642: AND
27643: ST_TO_ADDR
// end ;
27644: LD_VAR 0 3
27648: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27649: LD_INT 0
27651: PPUSH
27652: PPUSH
27653: PPUSH
27654: PPUSH
27655: PPUSH
27656: PPUSH
27657: PPUSH
27658: PPUSH
27659: PPUSH
27660: PPUSH
27661: PPUSH
// result := false ;
27662: LD_ADDR_VAR 0 8
27666: PUSH
27667: LD_INT 0
27669: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27670: LD_VAR 0 5
27674: NOT
27675: PUSH
27676: LD_VAR 0 1
27680: NOT
27681: OR
27682: PUSH
27683: LD_VAR 0 2
27687: NOT
27688: OR
27689: PUSH
27690: LD_VAR 0 3
27694: NOT
27695: OR
27696: IFFALSE 27700
// exit ;
27698: GO 28514
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27700: LD_ADDR_VAR 0 14
27704: PUSH
27705: LD_VAR 0 1
27709: PPUSH
27710: LD_VAR 0 2
27714: PPUSH
27715: LD_VAR 0 3
27719: PPUSH
27720: LD_VAR 0 4
27724: PPUSH
27725: LD_VAR 0 5
27729: PUSH
27730: LD_INT 1
27732: ARRAY
27733: PPUSH
27734: CALL_OW 248
27738: PPUSH
27739: LD_INT 0
27741: PPUSH
27742: CALL 29767 0 6
27746: ST_TO_ADDR
// if not hexes then
27747: LD_VAR 0 14
27751: NOT
27752: IFFALSE 27756
// exit ;
27754: GO 28514
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27756: LD_ADDR_VAR 0 17
27760: PUSH
27761: LD_VAR 0 5
27765: PPUSH
27766: LD_INT 22
27768: PUSH
27769: LD_VAR 0 13
27773: PPUSH
27774: CALL_OW 255
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 2
27785: PUSH
27786: LD_INT 30
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 30
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PPUSH
27815: CALL_OW 72
27819: ST_TO_ADDR
// for i = 1 to hexes do
27820: LD_ADDR_VAR 0 9
27824: PUSH
27825: DOUBLE
27826: LD_INT 1
27828: DEC
27829: ST_TO_ADDR
27830: LD_VAR 0 14
27834: PUSH
27835: FOR_TO
27836: IFFALSE 28512
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27838: LD_ADDR_VAR 0 13
27842: PUSH
27843: LD_VAR 0 14
27847: PUSH
27848: LD_VAR 0 9
27852: ARRAY
27853: PUSH
27854: LD_INT 1
27856: ARRAY
27857: PPUSH
27858: LD_VAR 0 14
27862: PUSH
27863: LD_VAR 0 9
27867: ARRAY
27868: PUSH
27869: LD_INT 2
27871: ARRAY
27872: PPUSH
27873: CALL_OW 428
27877: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27878: LD_VAR 0 14
27882: PUSH
27883: LD_VAR 0 9
27887: ARRAY
27888: PUSH
27889: LD_INT 1
27891: ARRAY
27892: PPUSH
27893: LD_VAR 0 14
27897: PUSH
27898: LD_VAR 0 9
27902: ARRAY
27903: PUSH
27904: LD_INT 2
27906: ARRAY
27907: PPUSH
27908: CALL_OW 351
27912: PUSH
27913: LD_VAR 0 14
27917: PUSH
27918: LD_VAR 0 9
27922: ARRAY
27923: PUSH
27924: LD_INT 1
27926: ARRAY
27927: PPUSH
27928: LD_VAR 0 14
27932: PUSH
27933: LD_VAR 0 9
27937: ARRAY
27938: PUSH
27939: LD_INT 2
27941: ARRAY
27942: PPUSH
27943: CALL_OW 488
27947: NOT
27948: OR
27949: PUSH
27950: LD_VAR 0 13
27954: PPUSH
27955: CALL_OW 247
27959: PUSH
27960: LD_INT 3
27962: EQUAL
27963: OR
27964: IFFALSE 27970
// exit ;
27966: POP
27967: POP
27968: GO 28514
// if not tmp then
27970: LD_VAR 0 13
27974: NOT
27975: IFFALSE 27979
// continue ;
27977: GO 27835
// result := true ;
27979: LD_ADDR_VAR 0 8
27983: PUSH
27984: LD_INT 1
27986: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27987: LD_VAR 0 6
27991: PUSH
27992: LD_VAR 0 13
27996: PPUSH
27997: CALL_OW 247
28001: PUSH
28002: LD_INT 2
28004: EQUAL
28005: AND
28006: PUSH
28007: LD_VAR 0 13
28011: PPUSH
28012: CALL_OW 263
28016: PUSH
28017: LD_INT 1
28019: EQUAL
28020: AND
28021: IFFALSE 28185
// begin if IsDrivenBy ( tmp ) then
28023: LD_VAR 0 13
28027: PPUSH
28028: CALL_OW 311
28032: IFFALSE 28036
// continue ;
28034: GO 27835
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28036: LD_VAR 0 6
28040: PPUSH
28041: LD_INT 3
28043: PUSH
28044: LD_INT 60
28046: PUSH
28047: EMPTY
28048: LIST
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 3
28056: PUSH
28057: LD_INT 55
28059: PUSH
28060: EMPTY
28061: LIST
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PPUSH
28071: CALL_OW 72
28075: IFFALSE 28183
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28077: LD_ADDR_VAR 0 18
28081: PUSH
28082: LD_VAR 0 6
28086: PPUSH
28087: LD_INT 3
28089: PUSH
28090: LD_INT 60
28092: PUSH
28093: EMPTY
28094: LIST
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 3
28102: PUSH
28103: LD_INT 55
28105: PUSH
28106: EMPTY
28107: LIST
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PPUSH
28117: CALL_OW 72
28121: PUSH
28122: LD_INT 1
28124: ARRAY
28125: ST_TO_ADDR
// if IsInUnit ( driver ) then
28126: LD_VAR 0 18
28130: PPUSH
28131: CALL_OW 310
28135: IFFALSE 28146
// ComExit ( driver ) ;
28137: LD_VAR 0 18
28141: PPUSH
28142: CALL 53559 0 1
// AddComEnterUnit ( driver , tmp ) ;
28146: LD_VAR 0 18
28150: PPUSH
28151: LD_VAR 0 13
28155: PPUSH
28156: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28160: LD_VAR 0 18
28164: PPUSH
28165: LD_VAR 0 7
28169: PPUSH
28170: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28174: LD_VAR 0 18
28178: PPUSH
28179: CALL_OW 181
// end ; continue ;
28183: GO 27835
// end ; if not cleaners or not tmp in cleaners then
28185: LD_VAR 0 6
28189: NOT
28190: PUSH
28191: LD_VAR 0 13
28195: PUSH
28196: LD_VAR 0 6
28200: IN
28201: NOT
28202: OR
28203: IFFALSE 28510
// begin if dep then
28205: LD_VAR 0 17
28209: IFFALSE 28345
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28211: LD_ADDR_VAR 0 16
28215: PUSH
28216: LD_VAR 0 17
28220: PUSH
28221: LD_INT 1
28223: ARRAY
28224: PPUSH
28225: CALL_OW 250
28229: PPUSH
28230: LD_VAR 0 17
28234: PUSH
28235: LD_INT 1
28237: ARRAY
28238: PPUSH
28239: CALL_OW 254
28243: PPUSH
28244: LD_INT 5
28246: PPUSH
28247: CALL_OW 272
28251: PUSH
28252: LD_VAR 0 17
28256: PUSH
28257: LD_INT 1
28259: ARRAY
28260: PPUSH
28261: CALL_OW 251
28265: PPUSH
28266: LD_VAR 0 17
28270: PUSH
28271: LD_INT 1
28273: ARRAY
28274: PPUSH
28275: CALL_OW 254
28279: PPUSH
28280: LD_INT 5
28282: PPUSH
28283: CALL_OW 273
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28292: LD_VAR 0 16
28296: PUSH
28297: LD_INT 1
28299: ARRAY
28300: PPUSH
28301: LD_VAR 0 16
28305: PUSH
28306: LD_INT 2
28308: ARRAY
28309: PPUSH
28310: CALL_OW 488
28314: IFFALSE 28345
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28316: LD_VAR 0 13
28320: PPUSH
28321: LD_VAR 0 16
28325: PUSH
28326: LD_INT 1
28328: ARRAY
28329: PPUSH
28330: LD_VAR 0 16
28334: PUSH
28335: LD_INT 2
28337: ARRAY
28338: PPUSH
28339: CALL_OW 111
// continue ;
28343: GO 27835
// end ; end ; r := GetDir ( tmp ) ;
28345: LD_ADDR_VAR 0 15
28349: PUSH
28350: LD_VAR 0 13
28354: PPUSH
28355: CALL_OW 254
28359: ST_TO_ADDR
// if r = 5 then
28360: LD_VAR 0 15
28364: PUSH
28365: LD_INT 5
28367: EQUAL
28368: IFFALSE 28378
// r := 0 ;
28370: LD_ADDR_VAR 0 15
28374: PUSH
28375: LD_INT 0
28377: ST_TO_ADDR
// for j = r to 5 do
28378: LD_ADDR_VAR 0 10
28382: PUSH
28383: DOUBLE
28384: LD_VAR 0 15
28388: DEC
28389: ST_TO_ADDR
28390: LD_INT 5
28392: PUSH
28393: FOR_TO
28394: IFFALSE 28508
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28396: LD_ADDR_VAR 0 11
28400: PUSH
28401: LD_VAR 0 13
28405: PPUSH
28406: CALL_OW 250
28410: PPUSH
28411: LD_VAR 0 10
28415: PPUSH
28416: LD_INT 2
28418: PPUSH
28419: CALL_OW 272
28423: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28424: LD_ADDR_VAR 0 12
28428: PUSH
28429: LD_VAR 0 13
28433: PPUSH
28434: CALL_OW 251
28438: PPUSH
28439: LD_VAR 0 10
28443: PPUSH
28444: LD_INT 2
28446: PPUSH
28447: CALL_OW 273
28451: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28452: LD_VAR 0 11
28456: PPUSH
28457: LD_VAR 0 12
28461: PPUSH
28462: CALL_OW 488
28466: PUSH
28467: LD_VAR 0 11
28471: PPUSH
28472: LD_VAR 0 12
28476: PPUSH
28477: CALL_OW 428
28481: NOT
28482: AND
28483: IFFALSE 28506
// begin ComMoveXY ( tmp , _x , _y ) ;
28485: LD_VAR 0 13
28489: PPUSH
28490: LD_VAR 0 11
28494: PPUSH
28495: LD_VAR 0 12
28499: PPUSH
28500: CALL_OW 111
// break ;
28504: GO 28508
// end ; end ;
28506: GO 28393
28508: POP
28509: POP
// end ; end ;
28510: GO 27835
28512: POP
28513: POP
// end ;
28514: LD_VAR 0 8
28518: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28519: LD_INT 0
28521: PPUSH
// result := true ;
28522: LD_ADDR_VAR 0 3
28526: PUSH
28527: LD_INT 1
28529: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28530: LD_VAR 0 2
28534: PUSH
28535: LD_INT 24
28537: DOUBLE
28538: EQUAL
28539: IFTRUE 28549
28541: LD_INT 33
28543: DOUBLE
28544: EQUAL
28545: IFTRUE 28549
28547: GO 28574
28549: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28550: LD_ADDR_VAR 0 3
28554: PUSH
28555: LD_INT 32
28557: PPUSH
28558: LD_VAR 0 1
28562: PPUSH
28563: CALL_OW 321
28567: PUSH
28568: LD_INT 2
28570: EQUAL
28571: ST_TO_ADDR
28572: GO 28890
28574: LD_INT 20
28576: DOUBLE
28577: EQUAL
28578: IFTRUE 28582
28580: GO 28607
28582: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28583: LD_ADDR_VAR 0 3
28587: PUSH
28588: LD_INT 6
28590: PPUSH
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 321
28600: PUSH
28601: LD_INT 2
28603: EQUAL
28604: ST_TO_ADDR
28605: GO 28890
28607: LD_INT 22
28609: DOUBLE
28610: EQUAL
28611: IFTRUE 28621
28613: LD_INT 36
28615: DOUBLE
28616: EQUAL
28617: IFTRUE 28621
28619: GO 28646
28621: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28622: LD_ADDR_VAR 0 3
28626: PUSH
28627: LD_INT 15
28629: PPUSH
28630: LD_VAR 0 1
28634: PPUSH
28635: CALL_OW 321
28639: PUSH
28640: LD_INT 2
28642: EQUAL
28643: ST_TO_ADDR
28644: GO 28890
28646: LD_INT 30
28648: DOUBLE
28649: EQUAL
28650: IFTRUE 28654
28652: GO 28679
28654: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28655: LD_ADDR_VAR 0 3
28659: PUSH
28660: LD_INT 20
28662: PPUSH
28663: LD_VAR 0 1
28667: PPUSH
28668: CALL_OW 321
28672: PUSH
28673: LD_INT 2
28675: EQUAL
28676: ST_TO_ADDR
28677: GO 28890
28679: LD_INT 28
28681: DOUBLE
28682: EQUAL
28683: IFTRUE 28693
28685: LD_INT 21
28687: DOUBLE
28688: EQUAL
28689: IFTRUE 28693
28691: GO 28718
28693: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: LD_INT 21
28701: PPUSH
28702: LD_VAR 0 1
28706: PPUSH
28707: CALL_OW 321
28711: PUSH
28712: LD_INT 2
28714: EQUAL
28715: ST_TO_ADDR
28716: GO 28890
28718: LD_INT 16
28720: DOUBLE
28721: EQUAL
28722: IFTRUE 28726
28724: GO 28751
28726: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28727: LD_ADDR_VAR 0 3
28731: PUSH
28732: LD_INT 84
28734: PPUSH
28735: LD_VAR 0 1
28739: PPUSH
28740: CALL_OW 321
28744: PUSH
28745: LD_INT 2
28747: EQUAL
28748: ST_TO_ADDR
28749: GO 28890
28751: LD_INT 19
28753: DOUBLE
28754: EQUAL
28755: IFTRUE 28765
28757: LD_INT 23
28759: DOUBLE
28760: EQUAL
28761: IFTRUE 28765
28763: GO 28790
28765: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28766: LD_ADDR_VAR 0 3
28770: PUSH
28771: LD_INT 83
28773: PPUSH
28774: LD_VAR 0 1
28778: PPUSH
28779: CALL_OW 321
28783: PUSH
28784: LD_INT 2
28786: EQUAL
28787: ST_TO_ADDR
28788: GO 28890
28790: LD_INT 17
28792: DOUBLE
28793: EQUAL
28794: IFTRUE 28798
28796: GO 28823
28798: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28799: LD_ADDR_VAR 0 3
28803: PUSH
28804: LD_INT 39
28806: PPUSH
28807: LD_VAR 0 1
28811: PPUSH
28812: CALL_OW 321
28816: PUSH
28817: LD_INT 2
28819: EQUAL
28820: ST_TO_ADDR
28821: GO 28890
28823: LD_INT 18
28825: DOUBLE
28826: EQUAL
28827: IFTRUE 28831
28829: GO 28856
28831: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28832: LD_ADDR_VAR 0 3
28836: PUSH
28837: LD_INT 40
28839: PPUSH
28840: LD_VAR 0 1
28844: PPUSH
28845: CALL_OW 321
28849: PUSH
28850: LD_INT 2
28852: EQUAL
28853: ST_TO_ADDR
28854: GO 28890
28856: LD_INT 27
28858: DOUBLE
28859: EQUAL
28860: IFTRUE 28864
28862: GO 28889
28864: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28865: LD_ADDR_VAR 0 3
28869: PUSH
28870: LD_INT 35
28872: PPUSH
28873: LD_VAR 0 1
28877: PPUSH
28878: CALL_OW 321
28882: PUSH
28883: LD_INT 2
28885: EQUAL
28886: ST_TO_ADDR
28887: GO 28890
28889: POP
// end ;
28890: LD_VAR 0 3
28894: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28895: LD_INT 0
28897: PPUSH
28898: PPUSH
28899: PPUSH
28900: PPUSH
28901: PPUSH
28902: PPUSH
28903: PPUSH
28904: PPUSH
28905: PPUSH
28906: PPUSH
28907: PPUSH
// result := false ;
28908: LD_ADDR_VAR 0 6
28912: PUSH
28913: LD_INT 0
28915: ST_TO_ADDR
// if btype = b_depot then
28916: LD_VAR 0 2
28920: PUSH
28921: LD_INT 0
28923: EQUAL
28924: IFFALSE 28936
// begin result := true ;
28926: LD_ADDR_VAR 0 6
28930: PUSH
28931: LD_INT 1
28933: ST_TO_ADDR
// exit ;
28934: GO 29762
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28936: LD_VAR 0 1
28940: NOT
28941: PUSH
28942: LD_VAR 0 1
28946: PPUSH
28947: CALL_OW 266
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: IN
28962: NOT
28963: OR
28964: PUSH
28965: LD_VAR 0 2
28969: NOT
28970: OR
28971: PUSH
28972: LD_VAR 0 5
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: LD_INT 3
28988: PUSH
28989: LD_INT 4
28991: PUSH
28992: LD_INT 5
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: IN
29003: NOT
29004: OR
29005: PUSH
29006: LD_VAR 0 3
29010: PPUSH
29011: LD_VAR 0 4
29015: PPUSH
29016: CALL_OW 488
29020: NOT
29021: OR
29022: IFFALSE 29026
// exit ;
29024: GO 29762
// side := GetSide ( depot ) ;
29026: LD_ADDR_VAR 0 9
29030: PUSH
29031: LD_VAR 0 1
29035: PPUSH
29036: CALL_OW 255
29040: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29041: LD_VAR 0 9
29045: PPUSH
29046: LD_VAR 0 2
29050: PPUSH
29051: CALL 28519 0 2
29055: NOT
29056: IFFALSE 29060
// exit ;
29058: GO 29762
// pom := GetBase ( depot ) ;
29060: LD_ADDR_VAR 0 10
29064: PUSH
29065: LD_VAR 0 1
29069: PPUSH
29070: CALL_OW 274
29074: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29075: LD_ADDR_VAR 0 11
29079: PUSH
29080: LD_VAR 0 2
29084: PPUSH
29085: LD_VAR 0 1
29089: PPUSH
29090: CALL_OW 248
29094: PPUSH
29095: CALL_OW 450
29099: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29100: LD_VAR 0 10
29104: PPUSH
29105: LD_INT 1
29107: PPUSH
29108: CALL_OW 275
29112: PUSH
29113: LD_VAR 0 11
29117: PUSH
29118: LD_INT 1
29120: ARRAY
29121: GREATEREQUAL
29122: PUSH
29123: LD_VAR 0 10
29127: PPUSH
29128: LD_INT 2
29130: PPUSH
29131: CALL_OW 275
29135: PUSH
29136: LD_VAR 0 11
29140: PUSH
29141: LD_INT 2
29143: ARRAY
29144: GREATEREQUAL
29145: AND
29146: PUSH
29147: LD_VAR 0 10
29151: PPUSH
29152: LD_INT 3
29154: PPUSH
29155: CALL_OW 275
29159: PUSH
29160: LD_VAR 0 11
29164: PUSH
29165: LD_INT 3
29167: ARRAY
29168: GREATEREQUAL
29169: AND
29170: NOT
29171: IFFALSE 29175
// exit ;
29173: GO 29762
// if GetBType ( depot ) = b_depot then
29175: LD_VAR 0 1
29179: PPUSH
29180: CALL_OW 266
29184: PUSH
29185: LD_INT 0
29187: EQUAL
29188: IFFALSE 29200
// dist := 28 else
29190: LD_ADDR_VAR 0 14
29194: PUSH
29195: LD_INT 28
29197: ST_TO_ADDR
29198: GO 29208
// dist := 36 ;
29200: LD_ADDR_VAR 0 14
29204: PUSH
29205: LD_INT 36
29207: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29208: LD_VAR 0 1
29212: PPUSH
29213: LD_VAR 0 3
29217: PPUSH
29218: LD_VAR 0 4
29222: PPUSH
29223: CALL_OW 297
29227: PUSH
29228: LD_VAR 0 14
29232: GREATER
29233: IFFALSE 29237
// exit ;
29235: GO 29762
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29237: LD_ADDR_VAR 0 12
29241: PUSH
29242: LD_VAR 0 2
29246: PPUSH
29247: LD_VAR 0 3
29251: PPUSH
29252: LD_VAR 0 4
29256: PPUSH
29257: LD_VAR 0 5
29261: PPUSH
29262: LD_VAR 0 1
29266: PPUSH
29267: CALL_OW 248
29271: PPUSH
29272: LD_INT 0
29274: PPUSH
29275: CALL 29767 0 6
29279: ST_TO_ADDR
// if not hexes then
29280: LD_VAR 0 12
29284: NOT
29285: IFFALSE 29289
// exit ;
29287: GO 29762
// hex := GetHexInfo ( x , y ) ;
29289: LD_ADDR_VAR 0 15
29293: PUSH
29294: LD_VAR 0 3
29298: PPUSH
29299: LD_VAR 0 4
29303: PPUSH
29304: CALL_OW 546
29308: ST_TO_ADDR
// if hex [ 1 ] then
29309: LD_VAR 0 15
29313: PUSH
29314: LD_INT 1
29316: ARRAY
29317: IFFALSE 29321
// exit ;
29319: GO 29762
// height := hex [ 2 ] ;
29321: LD_ADDR_VAR 0 13
29325: PUSH
29326: LD_VAR 0 15
29330: PUSH
29331: LD_INT 2
29333: ARRAY
29334: ST_TO_ADDR
// for i = 1 to hexes do
29335: LD_ADDR_VAR 0 7
29339: PUSH
29340: DOUBLE
29341: LD_INT 1
29343: DEC
29344: ST_TO_ADDR
29345: LD_VAR 0 12
29349: PUSH
29350: FOR_TO
29351: IFFALSE 29681
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29353: LD_VAR 0 12
29357: PUSH
29358: LD_VAR 0 7
29362: ARRAY
29363: PUSH
29364: LD_INT 1
29366: ARRAY
29367: PPUSH
29368: LD_VAR 0 12
29372: PUSH
29373: LD_VAR 0 7
29377: ARRAY
29378: PUSH
29379: LD_INT 2
29381: ARRAY
29382: PPUSH
29383: CALL_OW 488
29387: NOT
29388: PUSH
29389: LD_VAR 0 12
29393: PUSH
29394: LD_VAR 0 7
29398: ARRAY
29399: PUSH
29400: LD_INT 1
29402: ARRAY
29403: PPUSH
29404: LD_VAR 0 12
29408: PUSH
29409: LD_VAR 0 7
29413: ARRAY
29414: PUSH
29415: LD_INT 2
29417: ARRAY
29418: PPUSH
29419: CALL_OW 428
29423: PUSH
29424: LD_INT 0
29426: GREATER
29427: OR
29428: PUSH
29429: LD_VAR 0 12
29433: PUSH
29434: LD_VAR 0 7
29438: ARRAY
29439: PUSH
29440: LD_INT 1
29442: ARRAY
29443: PPUSH
29444: LD_VAR 0 12
29448: PUSH
29449: LD_VAR 0 7
29453: ARRAY
29454: PUSH
29455: LD_INT 2
29457: ARRAY
29458: PPUSH
29459: CALL_OW 351
29463: OR
29464: IFFALSE 29470
// exit ;
29466: POP
29467: POP
29468: GO 29762
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29470: LD_ADDR_VAR 0 8
29474: PUSH
29475: LD_VAR 0 12
29479: PUSH
29480: LD_VAR 0 7
29484: ARRAY
29485: PUSH
29486: LD_INT 1
29488: ARRAY
29489: PPUSH
29490: LD_VAR 0 12
29494: PUSH
29495: LD_VAR 0 7
29499: ARRAY
29500: PUSH
29501: LD_INT 2
29503: ARRAY
29504: PPUSH
29505: CALL_OW 546
29509: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29510: LD_VAR 0 8
29514: PUSH
29515: LD_INT 1
29517: ARRAY
29518: PUSH
29519: LD_VAR 0 8
29523: PUSH
29524: LD_INT 2
29526: ARRAY
29527: PUSH
29528: LD_VAR 0 13
29532: PUSH
29533: LD_INT 2
29535: PLUS
29536: GREATER
29537: OR
29538: PUSH
29539: LD_VAR 0 8
29543: PUSH
29544: LD_INT 2
29546: ARRAY
29547: PUSH
29548: LD_VAR 0 13
29552: PUSH
29553: LD_INT 2
29555: MINUS
29556: LESS
29557: OR
29558: PUSH
29559: LD_VAR 0 8
29563: PUSH
29564: LD_INT 3
29566: ARRAY
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: LD_INT 8
29573: PUSH
29574: LD_INT 9
29576: PUSH
29577: LD_INT 10
29579: PUSH
29580: LD_INT 11
29582: PUSH
29583: LD_INT 12
29585: PUSH
29586: LD_INT 13
29588: PUSH
29589: LD_INT 16
29591: PUSH
29592: LD_INT 17
29594: PUSH
29595: LD_INT 18
29597: PUSH
29598: LD_INT 19
29600: PUSH
29601: LD_INT 20
29603: PUSH
29604: LD_INT 21
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: IN
29622: NOT
29623: OR
29624: PUSH
29625: LD_VAR 0 8
29629: PUSH
29630: LD_INT 5
29632: ARRAY
29633: NOT
29634: OR
29635: PUSH
29636: LD_VAR 0 8
29640: PUSH
29641: LD_INT 6
29643: ARRAY
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: LD_INT 2
29650: PUSH
29651: LD_INT 7
29653: PUSH
29654: LD_INT 9
29656: PUSH
29657: LD_INT 10
29659: PUSH
29660: LD_INT 11
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: IN
29671: NOT
29672: OR
29673: IFFALSE 29679
// exit ;
29675: POP
29676: POP
29677: GO 29762
// end ;
29679: GO 29350
29681: POP
29682: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29683: LD_VAR 0 9
29687: PPUSH
29688: LD_VAR 0 3
29692: PPUSH
29693: LD_VAR 0 4
29697: PPUSH
29698: LD_INT 20
29700: PPUSH
29701: CALL 21685 0 4
29705: PUSH
29706: LD_INT 4
29708: ARRAY
29709: IFFALSE 29713
// exit ;
29711: GO 29762
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29713: LD_VAR 0 2
29717: PUSH
29718: LD_INT 29
29720: PUSH
29721: LD_INT 30
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: IN
29728: PUSH
29729: LD_VAR 0 3
29733: PPUSH
29734: LD_VAR 0 4
29738: PPUSH
29739: LD_VAR 0 9
29743: PPUSH
29744: CALL_OW 440
29748: NOT
29749: AND
29750: IFFALSE 29754
// exit ;
29752: GO 29762
// result := true ;
29754: LD_ADDR_VAR 0 6
29758: PUSH
29759: LD_INT 1
29761: ST_TO_ADDR
// end ;
29762: LD_VAR 0 6
29766: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29767: LD_INT 0
29769: PPUSH
29770: PPUSH
29771: PPUSH
29772: PPUSH
29773: PPUSH
29774: PPUSH
29775: PPUSH
29776: PPUSH
29777: PPUSH
29778: PPUSH
29779: PPUSH
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
29787: PPUSH
29788: PPUSH
29789: PPUSH
29790: PPUSH
29791: PPUSH
29792: PPUSH
29793: PPUSH
29794: PPUSH
29795: PPUSH
29796: PPUSH
29797: PPUSH
29798: PPUSH
29799: PPUSH
29800: PPUSH
29801: PPUSH
29802: PPUSH
29803: PPUSH
29804: PPUSH
29805: PPUSH
29806: PPUSH
29807: PPUSH
29808: PPUSH
29809: PPUSH
29810: PPUSH
29811: PPUSH
29812: PPUSH
29813: PPUSH
29814: PPUSH
29815: PPUSH
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
// result = [ ] ;
29827: LD_ADDR_VAR 0 7
29831: PUSH
29832: EMPTY
29833: ST_TO_ADDR
// temp_list = [ ] ;
29834: LD_ADDR_VAR 0 9
29838: PUSH
29839: EMPTY
29840: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29841: LD_VAR 0 4
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: LD_INT 2
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: LD_INT 4
29860: PUSH
29861: LD_INT 5
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: IN
29872: NOT
29873: PUSH
29874: LD_VAR 0 1
29878: PUSH
29879: LD_INT 0
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: IN
29889: PUSH
29890: LD_VAR 0 5
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: LD_INT 2
29900: PUSH
29901: LD_INT 3
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: IN
29909: NOT
29910: AND
29911: OR
29912: IFFALSE 29916
// exit ;
29914: GO 48307
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29916: LD_VAR 0 1
29920: PUSH
29921: LD_INT 6
29923: PUSH
29924: LD_INT 7
29926: PUSH
29927: LD_INT 8
29929: PUSH
29930: LD_INT 13
29932: PUSH
29933: LD_INT 12
29935: PUSH
29936: LD_INT 15
29938: PUSH
29939: LD_INT 11
29941: PUSH
29942: LD_INT 14
29944: PUSH
29945: LD_INT 10
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: IN
29959: IFFALSE 29969
// btype = b_lab ;
29961: LD_ADDR_VAR 0 1
29965: PUSH
29966: LD_INT 6
29968: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29969: LD_VAR 0 6
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: LD_INT 2
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: LIST
29987: IN
29988: NOT
29989: PUSH
29990: LD_VAR 0 1
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: LD_INT 3
30006: PUSH
30007: LD_INT 6
30009: PUSH
30010: LD_INT 36
30012: PUSH
30013: LD_INT 4
30015: PUSH
30016: LD_INT 5
30018: PUSH
30019: LD_INT 31
30021: PUSH
30022: LD_INT 32
30024: PUSH
30025: LD_INT 33
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: IN
30041: NOT
30042: PUSH
30043: LD_VAR 0 6
30047: PUSH
30048: LD_INT 1
30050: EQUAL
30051: AND
30052: OR
30053: PUSH
30054: LD_VAR 0 1
30058: PUSH
30059: LD_INT 2
30061: PUSH
30062: LD_INT 3
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: IN
30069: NOT
30070: PUSH
30071: LD_VAR 0 6
30075: PUSH
30076: LD_INT 2
30078: EQUAL
30079: AND
30080: OR
30081: IFFALSE 30091
// mode = 0 ;
30083: LD_ADDR_VAR 0 6
30087: PUSH
30088: LD_INT 0
30090: ST_TO_ADDR
// case mode of 0 :
30091: LD_VAR 0 6
30095: PUSH
30096: LD_INT 0
30098: DOUBLE
30099: EQUAL
30100: IFTRUE 30104
30102: GO 41557
30104: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30105: LD_ADDR_VAR 0 11
30109: PUSH
30110: LD_INT 0
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 1
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: LD_INT 1
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 1
30163: NEG
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 1
30186: NEG
30187: PUSH
30188: LD_INT 2
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 0
30198: PUSH
30199: LD_INT 2
30201: NEG
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: PUSH
30210: LD_INT 1
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: LD_INT 2
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: LD_INT 3
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: LD_INT 3
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30298: LD_ADDR_VAR 0 12
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: LD_INT 0
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 1
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 1
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: NEG
30368: PUSH
30369: LD_INT 1
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 1
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: PUSH
30412: LD_INT 1
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: LD_INT 0
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 2
30432: NEG
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 2
30444: NEG
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 3
30455: NEG
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 3
30466: NEG
30467: PUSH
30468: LD_INT 1
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30494: LD_ADDR_VAR 0 13
30498: PUSH
30499: LD_INT 0
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 0
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 1
30532: PUSH
30533: LD_INT 1
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: NEG
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: LD_INT 2
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 2
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 2
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 1
30607: PUSH
30608: LD_INT 2
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 2
30617: NEG
30618: PUSH
30619: LD_INT 1
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 2
30629: NEG
30630: PUSH
30631: LD_INT 2
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 2
30641: NEG
30642: PUSH
30643: LD_INT 3
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 3
30653: NEG
30654: PUSH
30655: LD_INT 2
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 3
30665: NEG
30666: PUSH
30667: LD_INT 3
30669: NEG
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30693: LD_ADDR_VAR 0 14
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: LD_INT 0
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: LD_INT 1
30713: NEG
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: LD_INT 0
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 1
30751: NEG
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 1
30762: NEG
30763: PUSH
30764: LD_INT 1
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: LD_INT 2
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 0
30786: PUSH
30787: LD_INT 2
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 0
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 1
30828: NEG
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 1
30839: NEG
30840: PUSH
30841: LD_INT 3
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 0
30851: PUSH
30852: LD_INT 3
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: PUSH
30863: LD_INT 2
30865: NEG
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30889: LD_ADDR_VAR 0 15
30893: PUSH
30894: LD_INT 0
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: LD_INT 1
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 1
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 1
30927: PUSH
30928: LD_INT 1
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: NEG
30948: PUSH
30949: LD_INT 0
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 1
30970: PUSH
30971: LD_INT 1
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 2
30981: PUSH
30982: LD_INT 0
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 1
31001: NEG
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 2
31012: NEG
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 2
31023: NEG
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 2
31035: PUSH
31036: LD_INT 1
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 3
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 3
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31082: LD_ADDR_VAR 0 16
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: LD_INT 1
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 0
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: LD_INT 1
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 1
31163: NEG
31164: PUSH
31165: LD_INT 2
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 2
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 2
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 2
31205: NEG
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 2
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 3
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: LD_INT 3
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31275: LD_ADDR_VAR 0 17
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: LD_INT 2
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: LD_INT 1
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 2
31410: PUSH
31411: LD_INT 2
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: LD_INT 2
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: LD_INT 2
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 2
31451: NEG
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 2
31462: NEG
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: NEG
31475: PUSH
31476: LD_INT 2
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31505: LD_ADDR_VAR 0 18
31509: PUSH
31510: LD_INT 0
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 0
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: LD_INT 2
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 0
31598: PUSH
31599: LD_INT 2
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 2
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: LD_INT 2
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: LD_INT 2
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: LD_INT 2
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 2
31681: NEG
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: NEG
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 2
31704: NEG
31705: PUSH
31706: LD_INT 2
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31735: LD_ADDR_VAR 0 19
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: LD_INT 1
31755: NEG
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 1
31804: NEG
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 1
31816: NEG
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: LD_INT 2
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: NEG
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 2
31922: NEG
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: LD_INT 2
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31965: LD_ADDR_VAR 0 20
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: LD_INT 1
31985: NEG
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: LD_INT 1
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: LD_INT 2
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 2
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: NEG
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 2
32152: NEG
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32195: LD_ADDR_VAR 0 21
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: NEG
32265: PUSH
32266: LD_INT 1
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: LD_INT 2
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: LD_INT 2
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 1
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: LD_INT 2
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 2
32371: NEG
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 2
32382: NEG
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 2
32394: NEG
32395: PUSH
32396: LD_INT 2
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32425: LD_ADDR_VAR 0 22
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: LD_INT 1
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: LD_INT 2
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 2
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 2
32601: NEG
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 2
32612: NEG
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: LD_INT 2
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32655: LD_ADDR_VAR 0 23
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 0
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 1
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: NEG
32737: PUSH
32738: LD_INT 2
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: LD_INT 2
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 2
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 2
32790: PUSH
32791: LD_INT 2
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: NEG
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 2
32842: NEG
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: LD_INT 2
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: NEG
32867: PUSH
32868: LD_INT 3
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 1
32878: NEG
32879: PUSH
32880: LD_INT 3
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: LD_INT 2
32893: NEG
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: LD_INT 1
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32935: LD_ADDR_VAR 0 24
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: NEG
33005: PUSH
33006: LD_INT 1
33008: NEG
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: LD_INT 2
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: LD_INT 2
33031: NEG
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: LD_INT 1
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: PUSH
33061: LD_INT 1
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: NEG
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 2
33122: NEG
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: LD_INT 2
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: LD_INT 2
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: LD_INT 1
33160: NEG
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 3
33168: PUSH
33169: LD_INT 1
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33211: LD_ADDR_VAR 0 25
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 1
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: LD_INT 1
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 1
33280: NEG
33281: PUSH
33282: LD_INT 1
33284: NEG
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: LD_INT 2
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: LD_INT 2
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 2
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 2
33387: NEG
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 3
33422: PUSH
33423: LD_INT 1
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 3
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: LD_INT 3
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33485: LD_ADDR_VAR 0 26
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 0
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: LD_INT 1
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: LD_INT 0
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: NEG
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 1
33566: NEG
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: LD_INT 2
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 2
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 2
33620: PUSH
33621: LD_INT 2
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: LD_INT 2
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: LD_INT 2
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 2
33661: NEG
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 2
33672: NEG
33673: PUSH
33674: LD_INT 1
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 2
33684: NEG
33685: PUSH
33686: LD_INT 2
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 3
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: LD_INT 3
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 2
33727: NEG
33728: PUSH
33729: LD_INT 1
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33761: LD_ADDR_VAR 0 27
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: LD_INT 0
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: LD_INT 1
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 1
33819: NEG
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 1
33830: NEG
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: LD_INT 2
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 2
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: LD_INT 1
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 2
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 2
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 2
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: LD_INT 2
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: LD_INT 2
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 1
33926: NEG
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 2
33937: NEG
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 2
33948: NEG
33949: PUSH
33950: LD_INT 1
33952: NEG
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 2
33960: NEG
33961: PUSH
33962: LD_INT 2
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: LD_INT 2
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 3
33994: NEG
33995: PUSH
33996: LD_INT 1
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 3
34006: NEG
34007: PUSH
34008: LD_INT 2
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34041: LD_ADDR_VAR 0 28
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: LD_INT 0
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: LD_INT 1
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 0
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 1
34099: NEG
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: LD_INT 2
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 0
34134: PUSH
34135: LD_INT 2
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 1
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 2
34156: PUSH
34157: LD_INT 0
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: LD_INT 1
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: LD_INT 2
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: LD_INT 2
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: LD_INT 1
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 2
34217: NEG
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 2
34228: NEG
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 2
34240: NEG
34241: PUSH
34242: LD_INT 2
34244: NEG
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 2
34252: NEG
34253: PUSH
34254: LD_INT 3
34256: NEG
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 1
34264: NEG
34265: PUSH
34266: LD_INT 3
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 3
34276: NEG
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 3
34288: NEG
34289: PUSH
34290: LD_INT 2
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34323: LD_ADDR_VAR 0 29
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 1
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: LD_INT 1
34396: NEG
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: NEG
34405: PUSH
34406: LD_INT 2
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 2
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 2
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: LD_INT 2
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: LD_INT 1
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 2
34501: NEG
34502: PUSH
34503: LD_INT 2
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: LD_INT 3
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: LD_INT 1
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 3
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: LD_INT 3
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: NEG
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 3
34567: NEG
34568: PUSH
34569: LD_INT 2
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34602: LD_ADDR_VAR 0 30
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: LD_INT 1
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: LD_INT 1
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: NEG
34672: PUSH
34673: LD_INT 1
34675: NEG
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 2
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: PUSH
34728: LD_INT 1
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: PUSH
34738: LD_INT 2
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 1
34757: NEG
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 2
34768: NEG
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 2
34779: NEG
34780: PUSH
34781: LD_INT 1
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: LD_INT 3
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: LD_INT 2
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 3
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: LD_INT 3
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 2
34834: NEG
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 3
34845: NEG
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34880: LD_ADDR_VAR 0 31
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: LD_INT 1
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 0
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 1
34938: NEG
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 1
34961: NEG
34962: PUSH
34963: LD_INT 2
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 2
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 2
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: LD_INT 2
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: LD_INT 2
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: LD_INT 1
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 2
35057: NEG
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 2
35069: NEG
35070: PUSH
35071: LD_INT 3
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 3
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: LD_INT 3
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 3
35123: NEG
35124: PUSH
35125: LD_INT 2
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35158: LD_ADDR_VAR 0 32
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: LD_INT 1
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: NEG
35228: PUSH
35229: LD_INT 1
35231: NEG
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 1
35239: NEG
35240: PUSH
35241: LD_INT 2
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 2
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: LD_INT 1
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 2
35324: NEG
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 2
35335: NEG
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 1
35347: NEG
35348: PUSH
35349: LD_INT 3
35351: NEG
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: LD_INT 2
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 3
35370: PUSH
35371: LD_INT 2
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 2
35380: PUSH
35381: LD_INT 3
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 2
35390: NEG
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 3
35401: NEG
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35436: LD_ADDR_VAR 0 33
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 2
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: LD_INT 1
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: NEG
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 2
35614: NEG
35615: PUSH
35616: LD_INT 2
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 2
35626: NEG
35627: PUSH
35628: LD_INT 3
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 3
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: LD_INT 3
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: LD_INT 2
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 3
35680: NEG
35681: PUSH
35682: LD_INT 2
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35715: LD_ADDR_VAR 0 34
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: LD_INT 1
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 1
35784: NEG
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: LD_INT 2
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: LD_INT 2
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 2
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: PUSH
35851: LD_INT 2
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 1
35860: NEG
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 2
35871: NEG
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 2
35882: NEG
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 2
35894: NEG
35895: PUSH
35896: LD_INT 2
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: LD_INT 3
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: LD_INT 2
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 3
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: LD_INT 3
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 2
35949: NEG
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 3
35960: NEG
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35995: LD_ADDR_VAR 0 35
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 1
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: NEG
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: LD_INT 1
36068: NEG
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 2
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 2
36086: NEG
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36107: LD_ADDR_VAR 0 36
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: LD_INT 1
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 1
36188: NEG
36189: PUSH
36190: LD_INT 2
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: LD_INT 2
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36219: LD_ADDR_VAR 0 37
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: NEG
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36331: LD_ADDR_VAR 0 38
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: LD_INT 1
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: LD_INT 1
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: LD_INT 1
36404: NEG
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 2
36412: PUSH
36413: LD_INT 1
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 2
36422: NEG
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36443: LD_ADDR_VAR 0 39
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: LD_INT 1
36516: NEG
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: LD_INT 2
36528: NEG
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: LD_INT 2
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36555: LD_ADDR_VAR 0 40
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 1
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 1
36647: NEG
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36667: LD_ADDR_VAR 0 41
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 2
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 2
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 1
36811: NEG
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 2
36822: NEG
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 2
36833: NEG
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: LD_INT 2
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 2
36857: NEG
36858: PUSH
36859: LD_INT 3
36861: NEG
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 3
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 3
36890: PUSH
36891: LD_INT 1
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 3
36900: PUSH
36901: LD_INT 2
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 3
36910: PUSH
36911: LD_INT 3
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 2
36920: PUSH
36921: LD_INT 3
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 3
36941: NEG
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 3
36952: NEG
36953: PUSH
36954: LD_INT 1
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 3
36964: NEG
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 3
36976: NEG
36977: PUSH
36978: LD_INT 3
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37017: LD_ADDR_VAR 0 42
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 1
37098: NEG
37099: PUSH
37100: LD_INT 2
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 2
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 2
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 2
37142: PUSH
37143: LD_INT 2
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: LD_INT 2
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 2
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 2
37183: NEG
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 2
37195: NEG
37196: PUSH
37197: LD_INT 2
37199: NEG
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 2
37207: NEG
37208: PUSH
37209: LD_INT 3
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: LD_INT 3
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: LD_INT 3
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: LD_INT 2
37245: NEG
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 3
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 3
37263: PUSH
37264: LD_INT 3
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 2
37273: PUSH
37274: LD_INT 3
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: LD_INT 3
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: LD_INT 3
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: LD_INT 2
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 3
37314: NEG
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 3
37326: NEG
37327: PUSH
37328: LD_INT 3
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37367: LD_ADDR_VAR 0 43
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: NEG
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: LD_INT 2
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 2
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: LD_INT 1
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 3
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 3
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: LD_INT 2
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 2
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 3
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 3
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: LD_INT 3
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: LD_INT 2
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 2
37652: NEG
37653: PUSH
37654: LD_INT 1
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 3
37663: NEG
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 3
37674: NEG
37675: PUSH
37676: LD_INT 1
37678: NEG
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37715: LD_ADDR_VAR 0 44
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 1
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 1
37773: NEG
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: LD_INT 1
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: LD_INT 2
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: NEG
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 2
37870: NEG
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: NEG
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 2
37893: NEG
37894: PUSH
37895: LD_INT 2
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: LD_INT 3
37909: NEG
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 3
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 3
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 3
37948: PUSH
37949: LD_INT 2
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 3
37958: PUSH
37959: LD_INT 3
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: LD_INT 3
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 2
37978: NEG
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 3
37989: NEG
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 3
38000: NEG
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 3
38012: NEG
38013: PUSH
38014: LD_INT 2
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 3
38024: NEG
38025: PUSH
38026: LD_INT 3
38028: NEG
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38065: LD_ADDR_VAR 0 45
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 1
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: NEG
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 2
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 2
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: LD_INT 2
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: LD_INT 2
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: NEG
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 2
38231: NEG
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 2
38243: NEG
38244: PUSH
38245: LD_INT 2
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 2
38255: NEG
38256: PUSH
38257: LD_INT 3
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: LD_INT 3
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: LD_INT 3
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 1
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 3
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 3
38311: PUSH
38312: LD_INT 3
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 3
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 3
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 3
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 3
38362: NEG
38363: PUSH
38364: LD_INT 2
38366: NEG
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 3
38374: NEG
38375: PUSH
38376: LD_INT 3
38378: NEG
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38415: LD_ADDR_VAR 0 46
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 0
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: LD_INT 1
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: LD_INT 1
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: LD_INT 2
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: LD_INT 2
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 2
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 1
38550: PUSH
38551: LD_INT 2
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 1
38570: NEG
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: LD_INT 3
38608: NEG
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: LD_INT 3
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: LD_INT 2
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 3
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 3
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: LD_INT 3
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: LD_INT 3
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: NEG
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 3
38711: NEG
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 3
38722: NEG
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38763: LD_ADDR_VAR 0 47
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 1
38821: NEG
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: NEG
38845: PUSH
38846: LD_INT 2
38848: NEG
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 1
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 2
38890: NEG
38891: PUSH
38892: LD_INT 2
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38914: LD_ADDR_VAR 0 48
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: LD_INT 0
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 2
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: LD_INT 1
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39061: LD_ADDR_VAR 0 49
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: LD_INT 1
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39205: LD_ADDR_VAR 0 50
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: LD_INT 1
39225: NEG
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 2
39296: PUSH
39297: LD_INT 2
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: LD_INT 2
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: LD_INT 2
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 1
39326: NEG
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39349: LD_ADDR_VAR 0 51
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 2
39461: NEG
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 2
39472: NEG
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39496: LD_ADDR_VAR 0 52
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: LD_INT 1
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: LD_INT 2
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39647: LD_ADDR_VAR 0 53
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: NEG
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: LD_INT 2
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 2
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: LD_INT 2
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 2
39823: NEG
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 2
39846: NEG
39847: PUSH
39848: LD_INT 2
39850: NEG
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39877: LD_ADDR_VAR 0 54
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: LD_INT 2
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 2
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 2
40076: NEG
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40107: LD_ADDR_VAR 0 55
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: LD_INT 2
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 2
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: NEG
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40337: LD_ADDR_VAR 0 56
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 2
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: LD_INT 2
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 2
40513: NEG
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: NEG
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: NEG
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40567: LD_ADDR_VAR 0 57
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 1
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: LD_INT 2
40652: NEG
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 2
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: PUSH
40703: LD_INT 2
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: LD_INT 2
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 2
40743: NEG
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 2
40754: NEG
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 2
40766: NEG
40767: PUSH
40768: LD_INT 2
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40797: LD_ADDR_VAR 0 58
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: LD_INT 2
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 2
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: LD_INT 2
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: NEG
40997: PUSH
40998: LD_INT 2
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41027: LD_ADDR_VAR 0 59
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41115: LD_ADDR_VAR 0 60
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41203: LD_ADDR_VAR 0 61
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41291: LD_ADDR_VAR 0 62
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41379: LD_ADDR_VAR 0 63
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41467: LD_ADDR_VAR 0 64
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
// end ; 1 :
41555: GO 47452
41557: LD_INT 1
41559: DOUBLE
41560: EQUAL
41561: IFTRUE 41565
41563: GO 44188
41565: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41566: LD_ADDR_VAR 0 11
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: LD_INT 3
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 3
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 2
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41610: LD_ADDR_VAR 0 12
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 3
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 3
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: LIST
41650: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41651: LD_ADDR_VAR 0 13
41655: PUSH
41656: LD_INT 3
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 3
41668: PUSH
41669: LD_INT 3
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 2
41678: PUSH
41679: LD_INT 3
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: LIST
41690: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41691: LD_ADDR_VAR 0 14
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: LD_INT 3
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: LD_INT 3
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41732: LD_ADDR_VAR 0 15
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 3
41750: NEG
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 3
41761: NEG
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: LIST
41775: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41776: LD_ADDR_VAR 0 16
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: LD_INT 3
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 3
41795: NEG
41796: PUSH
41797: LD_INT 2
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 3
41807: NEG
41808: PUSH
41809: LD_INT 3
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: LIST
41821: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41822: LD_ADDR_VAR 0 17
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 3
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 3
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: LIST
41865: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41866: LD_ADDR_VAR 0 18
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 3
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: LIST
41906: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41907: LD_ADDR_VAR 0 19
41911: PUSH
41912: LD_INT 3
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 3
41924: PUSH
41925: LD_INT 3
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 3
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: LIST
41946: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41947: LD_ADDR_VAR 0 20
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: LD_INT 3
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 3
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: LD_INT 2
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: LIST
41987: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41988: LD_ADDR_VAR 0 21
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 3
42006: NEG
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 3
42017: NEG
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: LIST
42031: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42032: LD_ADDR_VAR 0 22
42036: PUSH
42037: LD_INT 2
42039: NEG
42040: PUSH
42041: LD_INT 3
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 3
42051: NEG
42052: PUSH
42053: LD_INT 2
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 3
42063: NEG
42064: PUSH
42065: LD_INT 3
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42078: LD_ADDR_VAR 0 23
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: LD_INT 3
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 4
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 3
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42122: LD_ADDR_VAR 0 24
42126: PUSH
42127: LD_INT 3
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 3
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 4
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: LIST
42162: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42163: LD_ADDR_VAR 0 25
42167: PUSH
42168: LD_INT 3
42170: PUSH
42171: LD_INT 3
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 4
42180: PUSH
42181: LD_INT 3
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 3
42190: PUSH
42191: LD_INT 4
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: LIST
42202: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42203: LD_ADDR_VAR 0 26
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 3
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: LD_INT 4
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 3
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: LIST
42243: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42244: LD_ADDR_VAR 0 27
42248: PUSH
42249: LD_INT 3
42251: NEG
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 3
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 4
42273: NEG
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42288: LD_ADDR_VAR 0 28
42292: PUSH
42293: LD_INT 3
42295: NEG
42296: PUSH
42297: LD_INT 3
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 3
42307: NEG
42308: PUSH
42309: LD_INT 4
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 4
42319: NEG
42320: PUSH
42321: LD_INT 3
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: LIST
42333: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42334: LD_ADDR_VAR 0 29
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: LD_INT 3
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 3
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: LD_INT 4
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 4
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 3
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: LD_INT 5
42413: NEG
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: LD_INT 5
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: LD_INT 4
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: LD_INT 6
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 6
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 5
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42489: LD_ADDR_VAR 0 30
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 3
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 3
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 3
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 4
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 4
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 4
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 5
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 5
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 5
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 6
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 6
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42632: LD_ADDR_VAR 0 31
42636: PUSH
42637: LD_INT 3
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 3
42649: PUSH
42650: LD_INT 3
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: LD_INT 3
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 4
42669: PUSH
42670: LD_INT 3
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 4
42679: PUSH
42680: LD_INT 4
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 3
42689: PUSH
42690: LD_INT 4
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 5
42699: PUSH
42700: LD_INT 4
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 5
42709: PUSH
42710: LD_INT 5
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 4
42719: PUSH
42720: LD_INT 5
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 6
42729: PUSH
42730: LD_INT 5
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 6
42739: PUSH
42740: LD_INT 6
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 5
42749: PUSH
42750: LD_INT 6
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42771: LD_ADDR_VAR 0 32
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 3
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 4
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: LD_INT 4
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 3
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: LD_INT 5
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 5
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: LD_INT 4
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 6
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: LD_INT 6
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: LD_INT 5
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42914: LD_ADDR_VAR 0 33
42918: PUSH
42919: LD_INT 2
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 3
42932: NEG
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 3
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 3
42955: NEG
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 4
42966: NEG
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 4
42977: NEG
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 4
42989: NEG
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 5
43000: NEG
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 5
43011: NEG
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 5
43023: NEG
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 6
43034: NEG
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 6
43045: NEG
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43069: LD_ADDR_VAR 0 34
43073: PUSH
43074: LD_INT 2
43076: NEG
43077: PUSH
43078: LD_INT 3
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 3
43088: NEG
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 3
43100: NEG
43101: PUSH
43102: LD_INT 3
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 3
43112: NEG
43113: PUSH
43114: LD_INT 4
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 4
43124: NEG
43125: PUSH
43126: LD_INT 3
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 4
43136: NEG
43137: PUSH
43138: LD_INT 4
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 4
43148: NEG
43149: PUSH
43150: LD_INT 5
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 5
43160: NEG
43161: PUSH
43162: LD_INT 4
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 5
43172: NEG
43173: PUSH
43174: LD_INT 5
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 5
43184: NEG
43185: PUSH
43186: LD_INT 6
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 6
43196: NEG
43197: PUSH
43198: LD_INT 5
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 6
43208: NEG
43209: PUSH
43210: LD_INT 6
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43232: LD_ADDR_VAR 0 41
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 2
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: LD_INT 3
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 2
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43276: LD_ADDR_VAR 0 42
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 3
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43317: LD_ADDR_VAR 0 43
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 3
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: LD_INT 3
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43357: LD_ADDR_VAR 0 44
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: LIST
43397: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43398: LD_ADDR_VAR 0 45
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 3
43427: NEG
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: LIST
43441: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43442: LD_ADDR_VAR 0 46
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: NEG
43462: PUSH
43463: LD_INT 3
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 3
43473: NEG
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: LIST
43487: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43488: LD_ADDR_VAR 0 47
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: LD_INT 3
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: LD_INT 3
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43521: LD_ADDR_VAR 0 48
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: LD_INT 2
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43552: LD_ADDR_VAR 0 49
43556: PUSH
43557: LD_INT 3
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 3
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43581: LD_ADDR_VAR 0 50
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: LD_INT 3
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 3
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43610: LD_ADDR_VAR 0 51
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 2
43628: NEG
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43641: LD_ADDR_VAR 0 52
43645: PUSH
43646: LD_INT 3
43648: NEG
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 3
43660: NEG
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43674: LD_ADDR_VAR 0 53
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: LD_INT 3
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 3
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43718: LD_ADDR_VAR 0 54
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 3
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: LIST
43758: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43759: LD_ADDR_VAR 0 55
43763: PUSH
43764: LD_INT 3
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 3
43776: PUSH
43777: LD_INT 3
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: LD_INT 3
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: LIST
43798: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43799: LD_ADDR_VAR 0 56
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: LD_INT 3
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 3
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: LIST
43839: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43840: LD_ADDR_VAR 0 57
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 3
43858: NEG
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 3
43869: NEG
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: LIST
43883: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43884: LD_ADDR_VAR 0 58
43888: PUSH
43889: LD_INT 2
43891: NEG
43892: PUSH
43893: LD_INT 3
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 3
43903: NEG
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 3
43915: NEG
43916: PUSH
43917: LD_INT 3
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: LIST
43929: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43930: LD_ADDR_VAR 0 59
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43974: LD_ADDR_VAR 0 60
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: LIST
44014: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44015: LD_ADDR_VAR 0 61
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 2
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: LIST
44054: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44055: LD_ADDR_VAR 0 62
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44096: LD_ADDR_VAR 0 63
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44140: LD_ADDR_VAR 0 64
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: LIST
44185: ST_TO_ADDR
// end ; 2 :
44186: GO 47452
44188: LD_INT 2
44190: DOUBLE
44191: EQUAL
44192: IFTRUE 44196
44194: GO 47451
44196: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44197: LD_ADDR_VAR 0 29
44201: PUSH
44202: LD_INT 4
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 4
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 5
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 5
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 4
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 3
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 3
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 5
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 3
44297: PUSH
44298: LD_INT 3
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 3
44307: PUSH
44308: LD_INT 2
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 4
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 4
44327: PUSH
44328: LD_INT 4
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 3
44337: PUSH
44338: LD_INT 4
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: LD_INT 3
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 4
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: LD_INT 4
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 4
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 3
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: LD_INT 4
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: LD_INT 5
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_INT 5
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: LD_INT 4
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: LD_INT 3
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 5
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: LD_INT 3
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 3
44480: NEG
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 3
44491: NEG
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: NEG
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 3
44525: NEG
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 4
44536: NEG
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 4
44547: NEG
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 4
44559: NEG
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 4
44582: NEG
44583: PUSH
44584: LD_INT 4
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 4
44594: NEG
44595: PUSH
44596: LD_INT 5
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 3
44606: NEG
44607: PUSH
44608: LD_INT 4
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 3
44618: NEG
44619: PUSH
44620: LD_INT 3
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 4
44630: NEG
44631: PUSH
44632: LD_INT 3
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 5
44642: NEG
44643: PUSH
44644: LD_INT 4
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 5
44654: NEG
44655: PUSH
44656: LD_INT 5
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 3
44666: NEG
44667: PUSH
44668: LD_INT 5
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 5
44678: NEG
44679: PUSH
44680: LD_INT 3
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44735: LD_ADDR_VAR 0 30
44739: PUSH
44740: LD_INT 4
44742: PUSH
44743: LD_INT 4
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 4
44752: PUSH
44753: LD_INT 3
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 5
44762: PUSH
44763: LD_INT 4
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 5
44772: PUSH
44773: LD_INT 5
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 4
44782: PUSH
44783: LD_INT 5
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 3
44792: PUSH
44793: LD_INT 4
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 3
44802: PUSH
44803: LD_INT 3
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 5
44812: PUSH
44813: LD_INT 3
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 3
44822: PUSH
44823: LD_INT 5
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 3
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 4
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 4
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: LD_INT 3
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 4
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 4
44925: NEG
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 4
44936: NEG
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 3
44948: NEG
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 3
44959: NEG
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 4
44970: NEG
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 5
44981: NEG
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 5
44992: NEG
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 5
45004: NEG
45005: PUSH
45006: LD_INT 2
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 3
45016: NEG
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 3
45027: NEG
45028: PUSH
45029: LD_INT 3
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 3
45039: NEG
45040: PUSH
45041: LD_INT 4
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: LD_INT 3
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 3
45075: NEG
45076: PUSH
45077: LD_INT 2
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 4
45087: NEG
45088: PUSH
45089: LD_INT 3
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 4
45099: NEG
45100: PUSH
45101: LD_INT 4
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: LD_INT 4
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 4
45123: NEG
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 4
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 5
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 4
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 3
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 3
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: LD_INT 4
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: LD_INT 5
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: LD_INT 3
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 5
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45282: LD_ADDR_VAR 0 31
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 4
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: LD_INT 4
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: LD_INT 5
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: LD_INT 5
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: LD_INT 4
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 3
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: LD_INT 5
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: LD_INT 3
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 3
45382: NEG
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 3
45393: NEG
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 3
45427: NEG
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 4
45438: NEG
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 4
45449: NEG
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 4
45461: NEG
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 4
45484: NEG
45485: PUSH
45486: LD_INT 4
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 4
45496: NEG
45497: PUSH
45498: LD_INT 5
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 3
45508: NEG
45509: PUSH
45510: LD_INT 4
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 3
45520: NEG
45521: PUSH
45522: LD_INT 3
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 4
45532: NEG
45533: PUSH
45534: LD_INT 3
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 5
45544: NEG
45545: PUSH
45546: LD_INT 4
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 5
45556: NEG
45557: PUSH
45558: LD_INT 5
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: LD_INT 5
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 5
45580: NEG
45581: PUSH
45582: LD_INT 3
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 3
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 4
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 3
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: LD_INT 3
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 4
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 2
45682: NEG
45683: PUSH
45684: LD_INT 4
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 4
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 4
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 5
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 5
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 4
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 3
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 3
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 3
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 5
45777: PUSH
45778: LD_INT 2
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45832: LD_ADDR_VAR 0 32
45836: PUSH
45837: LD_INT 4
45839: NEG
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 4
45850: NEG
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: NEG
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 4
45884: NEG
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 5
45895: NEG
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 5
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 5
45918: NEG
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 3
45930: NEG
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: LD_INT 3
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 3
45953: NEG
45954: PUSH
45955: LD_INT 4
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: LD_INT 3
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 3
45989: NEG
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 4
46001: NEG
46002: PUSH
46003: LD_INT 3
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 4
46013: NEG
46014: PUSH
46015: LD_INT 4
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: LD_INT 4
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 4
46037: NEG
46038: PUSH
46039: LD_INT 2
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 4
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 5
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 4
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 3
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: LD_INT 3
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 4
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: LD_INT 5
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: LD_INT 3
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: LD_INT 5
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 3
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 3
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 4
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 4
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 3
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 4
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 4
46244: PUSH
46245: LD_INT 4
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 4
46254: PUSH
46255: LD_INT 3
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 5
46264: PUSH
46265: LD_INT 4
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 5
46274: PUSH
46275: LD_INT 5
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 4
46284: PUSH
46285: LD_INT 5
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 3
46294: PUSH
46295: LD_INT 4
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 3
46304: PUSH
46305: LD_INT 3
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 5
46314: PUSH
46315: LD_INT 3
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 3
46324: PUSH
46325: LD_INT 5
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46379: LD_ADDR_VAR 0 33
46383: PUSH
46384: LD_INT 4
46386: NEG
46387: PUSH
46388: LD_INT 4
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 4
46398: NEG
46399: PUSH
46400: LD_INT 5
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 3
46410: NEG
46411: PUSH
46412: LD_INT 4
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 3
46422: NEG
46423: PUSH
46424: LD_INT 3
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 4
46434: NEG
46435: PUSH
46436: LD_INT 3
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 5
46446: NEG
46447: PUSH
46448: LD_INT 4
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 5
46458: NEG
46459: PUSH
46460: LD_INT 5
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 3
46470: NEG
46471: PUSH
46472: LD_INT 5
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 5
46482: NEG
46483: PUSH
46484: LD_INT 3
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 4
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: LD_INT 3
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 3
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 4
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: LD_INT 4
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 4
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 4
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 5
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 5
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 4
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 3
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: LD_INT 2
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 5
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 4
46709: PUSH
46710: LD_INT 3
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 4
46719: PUSH
46720: LD_INT 4
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 3
46729: PUSH
46730: LD_INT 4
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: LD_INT 3
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 4
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 4
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 4
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 3
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 4
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 5
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 5
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 4
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 3
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 5
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: LD_INT 3
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46917: LD_ADDR_VAR 0 34
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: LD_INT 4
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 5
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 4
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 3
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 3
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 4
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 5
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: LD_INT 3
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: NEG
47015: PUSH
47016: LD_INT 5
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 3
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 4
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 4
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 3
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 4
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 4
47119: PUSH
47120: LD_INT 4
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 4
47129: PUSH
47130: LD_INT 3
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 5
47139: PUSH
47140: LD_INT 4
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 5
47149: PUSH
47150: LD_INT 5
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 4
47159: PUSH
47160: LD_INT 5
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 3
47169: PUSH
47170: LD_INT 4
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 3
47179: PUSH
47180: LD_INT 3
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 5
47189: PUSH
47190: LD_INT 3
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: PUSH
47200: LD_INT 5
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 3
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: LD_INT 3
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 4
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: LD_INT 4
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 3
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: LD_INT 4
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 4
47302: NEG
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 4
47313: NEG
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 3
47325: NEG
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 3
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 4
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 5
47358: NEG
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 5
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 5
47381: NEG
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 3
47393: NEG
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: ST_TO_ADDR
// end ; end ;
47449: GO 47452
47451: POP
// case btype of b_depot , b_warehouse :
47452: LD_VAR 0 1
47456: PUSH
47457: LD_INT 0
47459: DOUBLE
47460: EQUAL
47461: IFTRUE 47471
47463: LD_INT 1
47465: DOUBLE
47466: EQUAL
47467: IFTRUE 47471
47469: GO 47672
47471: POP
// case nation of nation_american :
47472: LD_VAR 0 5
47476: PUSH
47477: LD_INT 1
47479: DOUBLE
47480: EQUAL
47481: IFTRUE 47485
47483: GO 47541
47485: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47486: LD_ADDR_VAR 0 9
47490: PUSH
47491: LD_VAR 0 11
47495: PUSH
47496: LD_VAR 0 12
47500: PUSH
47501: LD_VAR 0 13
47505: PUSH
47506: LD_VAR 0 14
47510: PUSH
47511: LD_VAR 0 15
47515: PUSH
47516: LD_VAR 0 16
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: PUSH
47529: LD_VAR 0 4
47533: PUSH
47534: LD_INT 1
47536: PLUS
47537: ARRAY
47538: ST_TO_ADDR
47539: GO 47670
47541: LD_INT 2
47543: DOUBLE
47544: EQUAL
47545: IFTRUE 47549
47547: GO 47605
47549: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47550: LD_ADDR_VAR 0 9
47554: PUSH
47555: LD_VAR 0 17
47559: PUSH
47560: LD_VAR 0 18
47564: PUSH
47565: LD_VAR 0 19
47569: PUSH
47570: LD_VAR 0 20
47574: PUSH
47575: LD_VAR 0 21
47579: PUSH
47580: LD_VAR 0 22
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: PUSH
47593: LD_VAR 0 4
47597: PUSH
47598: LD_INT 1
47600: PLUS
47601: ARRAY
47602: ST_TO_ADDR
47603: GO 47670
47605: LD_INT 3
47607: DOUBLE
47608: EQUAL
47609: IFTRUE 47613
47611: GO 47669
47613: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47614: LD_ADDR_VAR 0 9
47618: PUSH
47619: LD_VAR 0 23
47623: PUSH
47624: LD_VAR 0 24
47628: PUSH
47629: LD_VAR 0 25
47633: PUSH
47634: LD_VAR 0 26
47638: PUSH
47639: LD_VAR 0 27
47643: PUSH
47644: LD_VAR 0 28
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: PUSH
47657: LD_VAR 0 4
47661: PUSH
47662: LD_INT 1
47664: PLUS
47665: ARRAY
47666: ST_TO_ADDR
47667: GO 47670
47669: POP
47670: GO 48225
47672: LD_INT 2
47674: DOUBLE
47675: EQUAL
47676: IFTRUE 47686
47678: LD_INT 3
47680: DOUBLE
47681: EQUAL
47682: IFTRUE 47686
47684: GO 47742
47686: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47687: LD_ADDR_VAR 0 9
47691: PUSH
47692: LD_VAR 0 29
47696: PUSH
47697: LD_VAR 0 30
47701: PUSH
47702: LD_VAR 0 31
47706: PUSH
47707: LD_VAR 0 32
47711: PUSH
47712: LD_VAR 0 33
47716: PUSH
47717: LD_VAR 0 34
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: PUSH
47730: LD_VAR 0 4
47734: PUSH
47735: LD_INT 1
47737: PLUS
47738: ARRAY
47739: ST_TO_ADDR
47740: GO 48225
47742: LD_INT 16
47744: DOUBLE
47745: EQUAL
47746: IFTRUE 47804
47748: LD_INT 17
47750: DOUBLE
47751: EQUAL
47752: IFTRUE 47804
47754: LD_INT 18
47756: DOUBLE
47757: EQUAL
47758: IFTRUE 47804
47760: LD_INT 19
47762: DOUBLE
47763: EQUAL
47764: IFTRUE 47804
47766: LD_INT 22
47768: DOUBLE
47769: EQUAL
47770: IFTRUE 47804
47772: LD_INT 20
47774: DOUBLE
47775: EQUAL
47776: IFTRUE 47804
47778: LD_INT 21
47780: DOUBLE
47781: EQUAL
47782: IFTRUE 47804
47784: LD_INT 23
47786: DOUBLE
47787: EQUAL
47788: IFTRUE 47804
47790: LD_INT 24
47792: DOUBLE
47793: EQUAL
47794: IFTRUE 47804
47796: LD_INT 25
47798: DOUBLE
47799: EQUAL
47800: IFTRUE 47804
47802: GO 47860
47804: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47805: LD_ADDR_VAR 0 9
47809: PUSH
47810: LD_VAR 0 35
47814: PUSH
47815: LD_VAR 0 36
47819: PUSH
47820: LD_VAR 0 37
47824: PUSH
47825: LD_VAR 0 38
47829: PUSH
47830: LD_VAR 0 39
47834: PUSH
47835: LD_VAR 0 40
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: PUSH
47848: LD_VAR 0 4
47852: PUSH
47853: LD_INT 1
47855: PLUS
47856: ARRAY
47857: ST_TO_ADDR
47858: GO 48225
47860: LD_INT 6
47862: DOUBLE
47863: EQUAL
47864: IFTRUE 47916
47866: LD_INT 7
47868: DOUBLE
47869: EQUAL
47870: IFTRUE 47916
47872: LD_INT 8
47874: DOUBLE
47875: EQUAL
47876: IFTRUE 47916
47878: LD_INT 13
47880: DOUBLE
47881: EQUAL
47882: IFTRUE 47916
47884: LD_INT 12
47886: DOUBLE
47887: EQUAL
47888: IFTRUE 47916
47890: LD_INT 15
47892: DOUBLE
47893: EQUAL
47894: IFTRUE 47916
47896: LD_INT 11
47898: DOUBLE
47899: EQUAL
47900: IFTRUE 47916
47902: LD_INT 14
47904: DOUBLE
47905: EQUAL
47906: IFTRUE 47916
47908: LD_INT 10
47910: DOUBLE
47911: EQUAL
47912: IFTRUE 47916
47914: GO 47972
47916: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47917: LD_ADDR_VAR 0 9
47921: PUSH
47922: LD_VAR 0 41
47926: PUSH
47927: LD_VAR 0 42
47931: PUSH
47932: LD_VAR 0 43
47936: PUSH
47937: LD_VAR 0 44
47941: PUSH
47942: LD_VAR 0 45
47946: PUSH
47947: LD_VAR 0 46
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: PUSH
47960: LD_VAR 0 4
47964: PUSH
47965: LD_INT 1
47967: PLUS
47968: ARRAY
47969: ST_TO_ADDR
47970: GO 48225
47972: LD_INT 36
47974: DOUBLE
47975: EQUAL
47976: IFTRUE 47980
47978: GO 48036
47980: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47981: LD_ADDR_VAR 0 9
47985: PUSH
47986: LD_VAR 0 47
47990: PUSH
47991: LD_VAR 0 48
47995: PUSH
47996: LD_VAR 0 49
48000: PUSH
48001: LD_VAR 0 50
48005: PUSH
48006: LD_VAR 0 51
48010: PUSH
48011: LD_VAR 0 52
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: PUSH
48024: LD_VAR 0 4
48028: PUSH
48029: LD_INT 1
48031: PLUS
48032: ARRAY
48033: ST_TO_ADDR
48034: GO 48225
48036: LD_INT 4
48038: DOUBLE
48039: EQUAL
48040: IFTRUE 48062
48042: LD_INT 5
48044: DOUBLE
48045: EQUAL
48046: IFTRUE 48062
48048: LD_INT 34
48050: DOUBLE
48051: EQUAL
48052: IFTRUE 48062
48054: LD_INT 37
48056: DOUBLE
48057: EQUAL
48058: IFTRUE 48062
48060: GO 48118
48062: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48063: LD_ADDR_VAR 0 9
48067: PUSH
48068: LD_VAR 0 53
48072: PUSH
48073: LD_VAR 0 54
48077: PUSH
48078: LD_VAR 0 55
48082: PUSH
48083: LD_VAR 0 56
48087: PUSH
48088: LD_VAR 0 57
48092: PUSH
48093: LD_VAR 0 58
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: PUSH
48106: LD_VAR 0 4
48110: PUSH
48111: LD_INT 1
48113: PLUS
48114: ARRAY
48115: ST_TO_ADDR
48116: GO 48225
48118: LD_INT 31
48120: DOUBLE
48121: EQUAL
48122: IFTRUE 48168
48124: LD_INT 32
48126: DOUBLE
48127: EQUAL
48128: IFTRUE 48168
48130: LD_INT 33
48132: DOUBLE
48133: EQUAL
48134: IFTRUE 48168
48136: LD_INT 27
48138: DOUBLE
48139: EQUAL
48140: IFTRUE 48168
48142: LD_INT 26
48144: DOUBLE
48145: EQUAL
48146: IFTRUE 48168
48148: LD_INT 28
48150: DOUBLE
48151: EQUAL
48152: IFTRUE 48168
48154: LD_INT 29
48156: DOUBLE
48157: EQUAL
48158: IFTRUE 48168
48160: LD_INT 30
48162: DOUBLE
48163: EQUAL
48164: IFTRUE 48168
48166: GO 48224
48168: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48169: LD_ADDR_VAR 0 9
48173: PUSH
48174: LD_VAR 0 59
48178: PUSH
48179: LD_VAR 0 60
48183: PUSH
48184: LD_VAR 0 61
48188: PUSH
48189: LD_VAR 0 62
48193: PUSH
48194: LD_VAR 0 63
48198: PUSH
48199: LD_VAR 0 64
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: PUSH
48212: LD_VAR 0 4
48216: PUSH
48217: LD_INT 1
48219: PLUS
48220: ARRAY
48221: ST_TO_ADDR
48222: GO 48225
48224: POP
// temp_list2 = [ ] ;
48225: LD_ADDR_VAR 0 10
48229: PUSH
48230: EMPTY
48231: ST_TO_ADDR
// for i in temp_list do
48232: LD_ADDR_VAR 0 8
48236: PUSH
48237: LD_VAR 0 9
48241: PUSH
48242: FOR_IN
48243: IFFALSE 48295
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48245: LD_ADDR_VAR 0 10
48249: PUSH
48250: LD_VAR 0 10
48254: PUSH
48255: LD_VAR 0 8
48259: PUSH
48260: LD_INT 1
48262: ARRAY
48263: PUSH
48264: LD_VAR 0 2
48268: PLUS
48269: PUSH
48270: LD_VAR 0 8
48274: PUSH
48275: LD_INT 2
48277: ARRAY
48278: PUSH
48279: LD_VAR 0 3
48283: PLUS
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: EMPTY
48290: LIST
48291: ADD
48292: ST_TO_ADDR
48293: GO 48242
48295: POP
48296: POP
// result = temp_list2 ;
48297: LD_ADDR_VAR 0 7
48301: PUSH
48302: LD_VAR 0 10
48306: ST_TO_ADDR
// end ;
48307: LD_VAR 0 7
48311: RET
// export function EnemyInRange ( unit , dist ) ; begin
48312: LD_INT 0
48314: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48315: LD_ADDR_VAR 0 3
48319: PUSH
48320: LD_VAR 0 1
48324: PPUSH
48325: CALL_OW 255
48329: PPUSH
48330: LD_VAR 0 1
48334: PPUSH
48335: CALL_OW 250
48339: PPUSH
48340: LD_VAR 0 1
48344: PPUSH
48345: CALL_OW 251
48349: PPUSH
48350: LD_VAR 0 2
48354: PPUSH
48355: CALL 21685 0 4
48359: PUSH
48360: LD_INT 4
48362: ARRAY
48363: ST_TO_ADDR
// end ;
48364: LD_VAR 0 3
48368: RET
// export function PlayerSeeMe ( unit ) ; begin
48369: LD_INT 0
48371: PPUSH
// result := See ( your_side , unit ) ;
48372: LD_ADDR_VAR 0 2
48376: PUSH
48377: LD_OWVAR 2
48381: PPUSH
48382: LD_VAR 0 1
48386: PPUSH
48387: CALL_OW 292
48391: ST_TO_ADDR
// end ;
48392: LD_VAR 0 2
48396: RET
// export function ReverseDir ( unit ) ; begin
48397: LD_INT 0
48399: PPUSH
// if not unit then
48400: LD_VAR 0 1
48404: NOT
48405: IFFALSE 48409
// exit ;
48407: GO 48432
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48409: LD_ADDR_VAR 0 2
48413: PUSH
48414: LD_VAR 0 1
48418: PPUSH
48419: CALL_OW 254
48423: PUSH
48424: LD_INT 3
48426: PLUS
48427: PUSH
48428: LD_INT 6
48430: MOD
48431: ST_TO_ADDR
// end ;
48432: LD_VAR 0 2
48436: RET
// export function ReverseArray ( array ) ; var i ; begin
48437: LD_INT 0
48439: PPUSH
48440: PPUSH
// if not array then
48441: LD_VAR 0 1
48445: NOT
48446: IFFALSE 48450
// exit ;
48448: GO 48505
// result := [ ] ;
48450: LD_ADDR_VAR 0 2
48454: PUSH
48455: EMPTY
48456: ST_TO_ADDR
// for i := array downto 1 do
48457: LD_ADDR_VAR 0 3
48461: PUSH
48462: DOUBLE
48463: LD_VAR 0 1
48467: INC
48468: ST_TO_ADDR
48469: LD_INT 1
48471: PUSH
48472: FOR_DOWNTO
48473: IFFALSE 48503
// result := Join ( result , array [ i ] ) ;
48475: LD_ADDR_VAR 0 2
48479: PUSH
48480: LD_VAR 0 2
48484: PPUSH
48485: LD_VAR 0 1
48489: PUSH
48490: LD_VAR 0 3
48494: ARRAY
48495: PPUSH
48496: CALL 53161 0 2
48500: ST_TO_ADDR
48501: GO 48472
48503: POP
48504: POP
// end ;
48505: LD_VAR 0 2
48509: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48510: LD_INT 0
48512: PPUSH
48513: PPUSH
48514: PPUSH
48515: PPUSH
48516: PPUSH
48517: PPUSH
// if not unit or not hexes then
48518: LD_VAR 0 1
48522: NOT
48523: PUSH
48524: LD_VAR 0 2
48528: NOT
48529: OR
48530: IFFALSE 48534
// exit ;
48532: GO 48657
// dist := 9999 ;
48534: LD_ADDR_VAR 0 5
48538: PUSH
48539: LD_INT 9999
48541: ST_TO_ADDR
// for i = 1 to hexes do
48542: LD_ADDR_VAR 0 4
48546: PUSH
48547: DOUBLE
48548: LD_INT 1
48550: DEC
48551: ST_TO_ADDR
48552: LD_VAR 0 2
48556: PUSH
48557: FOR_TO
48558: IFFALSE 48645
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48560: LD_ADDR_VAR 0 6
48564: PUSH
48565: LD_VAR 0 1
48569: PPUSH
48570: LD_VAR 0 2
48574: PUSH
48575: LD_VAR 0 4
48579: ARRAY
48580: PUSH
48581: LD_INT 1
48583: ARRAY
48584: PPUSH
48585: LD_VAR 0 2
48589: PUSH
48590: LD_VAR 0 4
48594: ARRAY
48595: PUSH
48596: LD_INT 2
48598: ARRAY
48599: PPUSH
48600: CALL_OW 297
48604: ST_TO_ADDR
// if tdist < dist then
48605: LD_VAR 0 6
48609: PUSH
48610: LD_VAR 0 5
48614: LESS
48615: IFFALSE 48643
// begin hex := hexes [ i ] ;
48617: LD_ADDR_VAR 0 8
48621: PUSH
48622: LD_VAR 0 2
48626: PUSH
48627: LD_VAR 0 4
48631: ARRAY
48632: ST_TO_ADDR
// dist := tdist ;
48633: LD_ADDR_VAR 0 5
48637: PUSH
48638: LD_VAR 0 6
48642: ST_TO_ADDR
// end ; end ;
48643: GO 48557
48645: POP
48646: POP
// result := hex ;
48647: LD_ADDR_VAR 0 3
48651: PUSH
48652: LD_VAR 0 8
48656: ST_TO_ADDR
// end ;
48657: LD_VAR 0 3
48661: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48662: LD_INT 0
48664: PPUSH
48665: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48666: LD_VAR 0 1
48670: NOT
48671: PUSH
48672: LD_VAR 0 1
48676: PUSH
48677: LD_INT 21
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 23
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PPUSH
48701: CALL_OW 69
48705: IN
48706: NOT
48707: OR
48708: IFFALSE 48712
// exit ;
48710: GO 48759
// for i = 1 to 3 do
48712: LD_ADDR_VAR 0 3
48716: PUSH
48717: DOUBLE
48718: LD_INT 1
48720: DEC
48721: ST_TO_ADDR
48722: LD_INT 3
48724: PUSH
48725: FOR_TO
48726: IFFALSE 48757
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48728: LD_VAR 0 1
48732: PPUSH
48733: CALL_OW 250
48737: PPUSH
48738: LD_VAR 0 1
48742: PPUSH
48743: CALL_OW 251
48747: PPUSH
48748: LD_INT 1
48750: PPUSH
48751: CALL_OW 453
48755: GO 48725
48757: POP
48758: POP
// end ;
48759: LD_VAR 0 2
48763: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48764: LD_INT 0
48766: PPUSH
48767: PPUSH
48768: PPUSH
48769: PPUSH
48770: PPUSH
48771: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48772: LD_VAR 0 1
48776: NOT
48777: PUSH
48778: LD_VAR 0 2
48782: NOT
48783: OR
48784: PUSH
48785: LD_VAR 0 1
48789: PPUSH
48790: CALL_OW 314
48794: OR
48795: IFFALSE 48799
// exit ;
48797: GO 49266
// if GetLives ( i ) < 250 then
48799: LD_VAR 0 4
48803: PPUSH
48804: CALL_OW 256
48808: PUSH
48809: LD_INT 250
48811: LESS
48812: IFFALSE 48825
// begin ComAutodestruct ( i ) ;
48814: LD_VAR 0 4
48818: PPUSH
48819: CALL 48662 0 1
// exit ;
48823: GO 49266
// end ; x := GetX ( enemy_unit ) ;
48825: LD_ADDR_VAR 0 7
48829: PUSH
48830: LD_VAR 0 2
48834: PPUSH
48835: CALL_OW 250
48839: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48840: LD_ADDR_VAR 0 8
48844: PUSH
48845: LD_VAR 0 2
48849: PPUSH
48850: CALL_OW 251
48854: ST_TO_ADDR
// if not x or not y then
48855: LD_VAR 0 7
48859: NOT
48860: PUSH
48861: LD_VAR 0 8
48865: NOT
48866: OR
48867: IFFALSE 48871
// exit ;
48869: GO 49266
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48871: LD_ADDR_VAR 0 6
48875: PUSH
48876: LD_VAR 0 7
48880: PPUSH
48881: LD_INT 0
48883: PPUSH
48884: LD_INT 4
48886: PPUSH
48887: CALL_OW 272
48891: PUSH
48892: LD_VAR 0 8
48896: PPUSH
48897: LD_INT 0
48899: PPUSH
48900: LD_INT 4
48902: PPUSH
48903: CALL_OW 273
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_VAR 0 7
48916: PPUSH
48917: LD_INT 1
48919: PPUSH
48920: LD_INT 4
48922: PPUSH
48923: CALL_OW 272
48927: PUSH
48928: LD_VAR 0 8
48932: PPUSH
48933: LD_INT 1
48935: PPUSH
48936: LD_INT 4
48938: PPUSH
48939: CALL_OW 273
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_VAR 0 7
48952: PPUSH
48953: LD_INT 2
48955: PPUSH
48956: LD_INT 4
48958: PPUSH
48959: CALL_OW 272
48963: PUSH
48964: LD_VAR 0 8
48968: PPUSH
48969: LD_INT 2
48971: PPUSH
48972: LD_INT 4
48974: PPUSH
48975: CALL_OW 273
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_VAR 0 7
48988: PPUSH
48989: LD_INT 3
48991: PPUSH
48992: LD_INT 4
48994: PPUSH
48995: CALL_OW 272
48999: PUSH
49000: LD_VAR 0 8
49004: PPUSH
49005: LD_INT 3
49007: PPUSH
49008: LD_INT 4
49010: PPUSH
49011: CALL_OW 273
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_VAR 0 7
49024: PPUSH
49025: LD_INT 4
49027: PPUSH
49028: LD_INT 4
49030: PPUSH
49031: CALL_OW 272
49035: PUSH
49036: LD_VAR 0 8
49040: PPUSH
49041: LD_INT 4
49043: PPUSH
49044: LD_INT 4
49046: PPUSH
49047: CALL_OW 273
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_VAR 0 7
49060: PPUSH
49061: LD_INT 5
49063: PPUSH
49064: LD_INT 4
49066: PPUSH
49067: CALL_OW 272
49071: PUSH
49072: LD_VAR 0 8
49076: PPUSH
49077: LD_INT 5
49079: PPUSH
49080: LD_INT 4
49082: PPUSH
49083: CALL_OW 273
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: ST_TO_ADDR
// for i = tmp downto 1 do
49100: LD_ADDR_VAR 0 4
49104: PUSH
49105: DOUBLE
49106: LD_VAR 0 6
49110: INC
49111: ST_TO_ADDR
49112: LD_INT 1
49114: PUSH
49115: FOR_DOWNTO
49116: IFFALSE 49217
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49118: LD_VAR 0 6
49122: PUSH
49123: LD_VAR 0 4
49127: ARRAY
49128: PUSH
49129: LD_INT 1
49131: ARRAY
49132: PPUSH
49133: LD_VAR 0 6
49137: PUSH
49138: LD_VAR 0 4
49142: ARRAY
49143: PUSH
49144: LD_INT 2
49146: ARRAY
49147: PPUSH
49148: CALL_OW 488
49152: NOT
49153: PUSH
49154: LD_VAR 0 6
49158: PUSH
49159: LD_VAR 0 4
49163: ARRAY
49164: PUSH
49165: LD_INT 1
49167: ARRAY
49168: PPUSH
49169: LD_VAR 0 6
49173: PUSH
49174: LD_VAR 0 4
49178: ARRAY
49179: PUSH
49180: LD_INT 2
49182: ARRAY
49183: PPUSH
49184: CALL_OW 428
49188: PUSH
49189: LD_INT 0
49191: NONEQUAL
49192: OR
49193: IFFALSE 49215
// tmp := Delete ( tmp , i ) ;
49195: LD_ADDR_VAR 0 6
49199: PUSH
49200: LD_VAR 0 6
49204: PPUSH
49205: LD_VAR 0 4
49209: PPUSH
49210: CALL_OW 3
49214: ST_TO_ADDR
49215: GO 49115
49217: POP
49218: POP
// j := GetClosestHex ( unit , tmp ) ;
49219: LD_ADDR_VAR 0 5
49223: PUSH
49224: LD_VAR 0 1
49228: PPUSH
49229: LD_VAR 0 6
49233: PPUSH
49234: CALL 48510 0 2
49238: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49239: LD_VAR 0 1
49243: PPUSH
49244: LD_VAR 0 5
49248: PUSH
49249: LD_INT 1
49251: ARRAY
49252: PPUSH
49253: LD_VAR 0 5
49257: PUSH
49258: LD_INT 2
49260: ARRAY
49261: PPUSH
49262: CALL_OW 111
// end ;
49266: LD_VAR 0 3
49270: RET
// export function PrepareApemanSoldier ( ) ; begin
49271: LD_INT 0
49273: PPUSH
// uc_nation := 0 ;
49274: LD_ADDR_OWVAR 21
49278: PUSH
49279: LD_INT 0
49281: ST_TO_ADDR
// hc_sex := sex_male ;
49282: LD_ADDR_OWVAR 27
49286: PUSH
49287: LD_INT 1
49289: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49290: LD_ADDR_OWVAR 28
49294: PUSH
49295: LD_INT 15
49297: ST_TO_ADDR
// hc_gallery :=  ;
49298: LD_ADDR_OWVAR 33
49302: PUSH
49303: LD_STRING 
49305: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49306: LD_ADDR_OWVAR 31
49310: PUSH
49311: LD_INT 0
49313: PPUSH
49314: LD_INT 3
49316: PPUSH
49317: CALL_OW 12
49321: PUSH
49322: LD_INT 0
49324: PPUSH
49325: LD_INT 3
49327: PPUSH
49328: CALL_OW 12
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: ST_TO_ADDR
// end ;
49345: LD_VAR 0 1
49349: RET
// export function PrepareApemanEngineer ( ) ; begin
49350: LD_INT 0
49352: PPUSH
// uc_nation := 0 ;
49353: LD_ADDR_OWVAR 21
49357: PUSH
49358: LD_INT 0
49360: ST_TO_ADDR
// hc_sex := sex_male ;
49361: LD_ADDR_OWVAR 27
49365: PUSH
49366: LD_INT 1
49368: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49369: LD_ADDR_OWVAR 28
49373: PUSH
49374: LD_INT 16
49376: ST_TO_ADDR
// hc_gallery :=  ;
49377: LD_ADDR_OWVAR 33
49381: PUSH
49382: LD_STRING 
49384: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49385: LD_ADDR_OWVAR 31
49389: PUSH
49390: LD_INT 0
49392: PPUSH
49393: LD_INT 3
49395: PPUSH
49396: CALL_OW 12
49400: PUSH
49401: LD_INT 0
49403: PPUSH
49404: LD_INT 3
49406: PPUSH
49407: CALL_OW 12
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: ST_TO_ADDR
// end ;
49424: LD_VAR 0 1
49428: RET
// export function PrepareApeman ( agressivity ) ; begin
49429: LD_INT 0
49431: PPUSH
// uc_side := 0 ;
49432: LD_ADDR_OWVAR 20
49436: PUSH
49437: LD_INT 0
49439: ST_TO_ADDR
// uc_nation := 0 ;
49440: LD_ADDR_OWVAR 21
49444: PUSH
49445: LD_INT 0
49447: ST_TO_ADDR
// hc_sex := sex_male ;
49448: LD_ADDR_OWVAR 27
49452: PUSH
49453: LD_INT 1
49455: ST_TO_ADDR
// hc_class := class_apeman ;
49456: LD_ADDR_OWVAR 28
49460: PUSH
49461: LD_INT 12
49463: ST_TO_ADDR
// hc_gallery :=  ;
49464: LD_ADDR_OWVAR 33
49468: PUSH
49469: LD_STRING 
49471: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49472: LD_ADDR_OWVAR 35
49476: PUSH
49477: LD_VAR 0 1
49481: NEG
49482: PPUSH
49483: LD_VAR 0 1
49487: PPUSH
49488: CALL_OW 12
49492: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49493: LD_ADDR_OWVAR 31
49497: PUSH
49498: LD_INT 0
49500: PPUSH
49501: LD_INT 3
49503: PPUSH
49504: CALL_OW 12
49508: PUSH
49509: LD_INT 0
49511: PPUSH
49512: LD_INT 3
49514: PPUSH
49515: CALL_OW 12
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: ST_TO_ADDR
// end ;
49532: LD_VAR 0 2
49536: RET
// export function PrepareTiger ( agressivity ) ; begin
49537: LD_INT 0
49539: PPUSH
// uc_side := 0 ;
49540: LD_ADDR_OWVAR 20
49544: PUSH
49545: LD_INT 0
49547: ST_TO_ADDR
// uc_nation := 0 ;
49548: LD_ADDR_OWVAR 21
49552: PUSH
49553: LD_INT 0
49555: ST_TO_ADDR
// hc_class := class_tiger ;
49556: LD_ADDR_OWVAR 28
49560: PUSH
49561: LD_INT 14
49563: ST_TO_ADDR
// hc_gallery :=  ;
49564: LD_ADDR_OWVAR 33
49568: PUSH
49569: LD_STRING 
49571: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49572: LD_ADDR_OWVAR 35
49576: PUSH
49577: LD_VAR 0 1
49581: NEG
49582: PPUSH
49583: LD_VAR 0 1
49587: PPUSH
49588: CALL_OW 12
49592: ST_TO_ADDR
// end ;
49593: LD_VAR 0 2
49597: RET
// export function PrepareEnchidna ( ) ; begin
49598: LD_INT 0
49600: PPUSH
// uc_side := 0 ;
49601: LD_ADDR_OWVAR 20
49605: PUSH
49606: LD_INT 0
49608: ST_TO_ADDR
// uc_nation := 0 ;
49609: LD_ADDR_OWVAR 21
49613: PUSH
49614: LD_INT 0
49616: ST_TO_ADDR
// hc_class := class_baggie ;
49617: LD_ADDR_OWVAR 28
49621: PUSH
49622: LD_INT 13
49624: ST_TO_ADDR
// hc_gallery :=  ;
49625: LD_ADDR_OWVAR 33
49629: PUSH
49630: LD_STRING 
49632: ST_TO_ADDR
// end ;
49633: LD_VAR 0 1
49637: RET
// export function PrepareFrog ( ) ; begin
49638: LD_INT 0
49640: PPUSH
// uc_side := 0 ;
49641: LD_ADDR_OWVAR 20
49645: PUSH
49646: LD_INT 0
49648: ST_TO_ADDR
// uc_nation := 0 ;
49649: LD_ADDR_OWVAR 21
49653: PUSH
49654: LD_INT 0
49656: ST_TO_ADDR
// hc_class := class_frog ;
49657: LD_ADDR_OWVAR 28
49661: PUSH
49662: LD_INT 19
49664: ST_TO_ADDR
// hc_gallery :=  ;
49665: LD_ADDR_OWVAR 33
49669: PUSH
49670: LD_STRING 
49672: ST_TO_ADDR
// end ;
49673: LD_VAR 0 1
49677: RET
// export function PrepareFish ( ) ; begin
49678: LD_INT 0
49680: PPUSH
// uc_side := 0 ;
49681: LD_ADDR_OWVAR 20
49685: PUSH
49686: LD_INT 0
49688: ST_TO_ADDR
// uc_nation := 0 ;
49689: LD_ADDR_OWVAR 21
49693: PUSH
49694: LD_INT 0
49696: ST_TO_ADDR
// hc_class := class_fish ;
49697: LD_ADDR_OWVAR 28
49701: PUSH
49702: LD_INT 20
49704: ST_TO_ADDR
// hc_gallery :=  ;
49705: LD_ADDR_OWVAR 33
49709: PUSH
49710: LD_STRING 
49712: ST_TO_ADDR
// end ;
49713: LD_VAR 0 1
49717: RET
// export function PrepareBird ( ) ; begin
49718: LD_INT 0
49720: PPUSH
// uc_side := 0 ;
49721: LD_ADDR_OWVAR 20
49725: PUSH
49726: LD_INT 0
49728: ST_TO_ADDR
// uc_nation := 0 ;
49729: LD_ADDR_OWVAR 21
49733: PUSH
49734: LD_INT 0
49736: ST_TO_ADDR
// hc_class := class_phororhacos ;
49737: LD_ADDR_OWVAR 28
49741: PUSH
49742: LD_INT 18
49744: ST_TO_ADDR
// hc_gallery :=  ;
49745: LD_ADDR_OWVAR 33
49749: PUSH
49750: LD_STRING 
49752: ST_TO_ADDR
// end ;
49753: LD_VAR 0 1
49757: RET
// export function PrepareHorse ( ) ; begin
49758: LD_INT 0
49760: PPUSH
// uc_side := 0 ;
49761: LD_ADDR_OWVAR 20
49765: PUSH
49766: LD_INT 0
49768: ST_TO_ADDR
// uc_nation := 0 ;
49769: LD_ADDR_OWVAR 21
49773: PUSH
49774: LD_INT 0
49776: ST_TO_ADDR
// hc_class := class_horse ;
49777: LD_ADDR_OWVAR 28
49781: PUSH
49782: LD_INT 21
49784: ST_TO_ADDR
// hc_gallery :=  ;
49785: LD_ADDR_OWVAR 33
49789: PUSH
49790: LD_STRING 
49792: ST_TO_ADDR
// end ;
49793: LD_VAR 0 1
49797: RET
// export function PrepareMastodont ( ) ; begin
49798: LD_INT 0
49800: PPUSH
// uc_side := 0 ;
49801: LD_ADDR_OWVAR 20
49805: PUSH
49806: LD_INT 0
49808: ST_TO_ADDR
// uc_nation := 0 ;
49809: LD_ADDR_OWVAR 21
49813: PUSH
49814: LD_INT 0
49816: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49817: LD_ADDR_OWVAR 37
49821: PUSH
49822: LD_INT 31
49824: ST_TO_ADDR
// vc_control := control_rider ;
49825: LD_ADDR_OWVAR 38
49829: PUSH
49830: LD_INT 4
49832: ST_TO_ADDR
// end ;
49833: LD_VAR 0 1
49837: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49838: LD_INT 0
49840: PPUSH
49841: PPUSH
49842: PPUSH
// uc_side = 0 ;
49843: LD_ADDR_OWVAR 20
49847: PUSH
49848: LD_INT 0
49850: ST_TO_ADDR
// uc_nation = 0 ;
49851: LD_ADDR_OWVAR 21
49855: PUSH
49856: LD_INT 0
49858: ST_TO_ADDR
// InitHc_All ( ) ;
49859: CALL_OW 584
// InitVc ;
49863: CALL_OW 20
// if mastodonts then
49867: LD_VAR 0 6
49871: IFFALSE 49938
// for i = 1 to mastodonts do
49873: LD_ADDR_VAR 0 11
49877: PUSH
49878: DOUBLE
49879: LD_INT 1
49881: DEC
49882: ST_TO_ADDR
49883: LD_VAR 0 6
49887: PUSH
49888: FOR_TO
49889: IFFALSE 49936
// begin vc_chassis := 31 ;
49891: LD_ADDR_OWVAR 37
49895: PUSH
49896: LD_INT 31
49898: ST_TO_ADDR
// vc_control := control_rider ;
49899: LD_ADDR_OWVAR 38
49903: PUSH
49904: LD_INT 4
49906: ST_TO_ADDR
// animal := CreateVehicle ;
49907: LD_ADDR_VAR 0 12
49911: PUSH
49912: CALL_OW 45
49916: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49917: LD_VAR 0 12
49921: PPUSH
49922: LD_VAR 0 8
49926: PPUSH
49927: LD_INT 0
49929: PPUSH
49930: CALL 52066 0 3
// end ;
49934: GO 49888
49936: POP
49937: POP
// if horses then
49938: LD_VAR 0 5
49942: IFFALSE 50009
// for i = 1 to horses do
49944: LD_ADDR_VAR 0 11
49948: PUSH
49949: DOUBLE
49950: LD_INT 1
49952: DEC
49953: ST_TO_ADDR
49954: LD_VAR 0 5
49958: PUSH
49959: FOR_TO
49960: IFFALSE 50007
// begin hc_class := 21 ;
49962: LD_ADDR_OWVAR 28
49966: PUSH
49967: LD_INT 21
49969: ST_TO_ADDR
// hc_gallery :=  ;
49970: LD_ADDR_OWVAR 33
49974: PUSH
49975: LD_STRING 
49977: ST_TO_ADDR
// animal := CreateHuman ;
49978: LD_ADDR_VAR 0 12
49982: PUSH
49983: CALL_OW 44
49987: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49988: LD_VAR 0 12
49992: PPUSH
49993: LD_VAR 0 8
49997: PPUSH
49998: LD_INT 0
50000: PPUSH
50001: CALL 52066 0 3
// end ;
50005: GO 49959
50007: POP
50008: POP
// if birds then
50009: LD_VAR 0 1
50013: IFFALSE 50080
// for i = 1 to birds do
50015: LD_ADDR_VAR 0 11
50019: PUSH
50020: DOUBLE
50021: LD_INT 1
50023: DEC
50024: ST_TO_ADDR
50025: LD_VAR 0 1
50029: PUSH
50030: FOR_TO
50031: IFFALSE 50078
// begin hc_class := 18 ;
50033: LD_ADDR_OWVAR 28
50037: PUSH
50038: LD_INT 18
50040: ST_TO_ADDR
// hc_gallery =  ;
50041: LD_ADDR_OWVAR 33
50045: PUSH
50046: LD_STRING 
50048: ST_TO_ADDR
// animal := CreateHuman ;
50049: LD_ADDR_VAR 0 12
50053: PUSH
50054: CALL_OW 44
50058: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50059: LD_VAR 0 12
50063: PPUSH
50064: LD_VAR 0 8
50068: PPUSH
50069: LD_INT 0
50071: PPUSH
50072: CALL 52066 0 3
// end ;
50076: GO 50030
50078: POP
50079: POP
// if tigers then
50080: LD_VAR 0 2
50084: IFFALSE 50168
// for i = 1 to tigers do
50086: LD_ADDR_VAR 0 11
50090: PUSH
50091: DOUBLE
50092: LD_INT 1
50094: DEC
50095: ST_TO_ADDR
50096: LD_VAR 0 2
50100: PUSH
50101: FOR_TO
50102: IFFALSE 50166
// begin hc_class = class_tiger ;
50104: LD_ADDR_OWVAR 28
50108: PUSH
50109: LD_INT 14
50111: ST_TO_ADDR
// hc_gallery =  ;
50112: LD_ADDR_OWVAR 33
50116: PUSH
50117: LD_STRING 
50119: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50120: LD_ADDR_OWVAR 35
50124: PUSH
50125: LD_INT 7
50127: NEG
50128: PPUSH
50129: LD_INT 7
50131: PPUSH
50132: CALL_OW 12
50136: ST_TO_ADDR
// animal := CreateHuman ;
50137: LD_ADDR_VAR 0 12
50141: PUSH
50142: CALL_OW 44
50146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50147: LD_VAR 0 12
50151: PPUSH
50152: LD_VAR 0 8
50156: PPUSH
50157: LD_INT 0
50159: PPUSH
50160: CALL 52066 0 3
// end ;
50164: GO 50101
50166: POP
50167: POP
// if apemans then
50168: LD_VAR 0 3
50172: IFFALSE 50295
// for i = 1 to apemans do
50174: LD_ADDR_VAR 0 11
50178: PUSH
50179: DOUBLE
50180: LD_INT 1
50182: DEC
50183: ST_TO_ADDR
50184: LD_VAR 0 3
50188: PUSH
50189: FOR_TO
50190: IFFALSE 50293
// begin hc_class = class_apeman ;
50192: LD_ADDR_OWVAR 28
50196: PUSH
50197: LD_INT 12
50199: ST_TO_ADDR
// hc_gallery =  ;
50200: LD_ADDR_OWVAR 33
50204: PUSH
50205: LD_STRING 
50207: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50208: LD_ADDR_OWVAR 35
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PPUSH
50217: LD_INT 2
50219: PPUSH
50220: CALL_OW 12
50224: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50225: LD_ADDR_OWVAR 31
50229: PUSH
50230: LD_INT 1
50232: PPUSH
50233: LD_INT 3
50235: PPUSH
50236: CALL_OW 12
50240: PUSH
50241: LD_INT 1
50243: PPUSH
50244: LD_INT 3
50246: PPUSH
50247: CALL_OW 12
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: ST_TO_ADDR
// animal := CreateHuman ;
50264: LD_ADDR_VAR 0 12
50268: PUSH
50269: CALL_OW 44
50273: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50274: LD_VAR 0 12
50278: PPUSH
50279: LD_VAR 0 8
50283: PPUSH
50284: LD_INT 0
50286: PPUSH
50287: CALL 52066 0 3
// end ;
50291: GO 50189
50293: POP
50294: POP
// if enchidnas then
50295: LD_VAR 0 4
50299: IFFALSE 50366
// for i = 1 to enchidnas do
50301: LD_ADDR_VAR 0 11
50305: PUSH
50306: DOUBLE
50307: LD_INT 1
50309: DEC
50310: ST_TO_ADDR
50311: LD_VAR 0 4
50315: PUSH
50316: FOR_TO
50317: IFFALSE 50364
// begin hc_class = 13 ;
50319: LD_ADDR_OWVAR 28
50323: PUSH
50324: LD_INT 13
50326: ST_TO_ADDR
// hc_gallery =  ;
50327: LD_ADDR_OWVAR 33
50331: PUSH
50332: LD_STRING 
50334: ST_TO_ADDR
// animal := CreateHuman ;
50335: LD_ADDR_VAR 0 12
50339: PUSH
50340: CALL_OW 44
50344: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50345: LD_VAR 0 12
50349: PPUSH
50350: LD_VAR 0 8
50354: PPUSH
50355: LD_INT 0
50357: PPUSH
50358: CALL 52066 0 3
// end ;
50362: GO 50316
50364: POP
50365: POP
// if fishes then
50366: LD_VAR 0 7
50370: IFFALSE 50437
// for i = 1 to fishes do
50372: LD_ADDR_VAR 0 11
50376: PUSH
50377: DOUBLE
50378: LD_INT 1
50380: DEC
50381: ST_TO_ADDR
50382: LD_VAR 0 7
50386: PUSH
50387: FOR_TO
50388: IFFALSE 50435
// begin hc_class = 20 ;
50390: LD_ADDR_OWVAR 28
50394: PUSH
50395: LD_INT 20
50397: ST_TO_ADDR
// hc_gallery =  ;
50398: LD_ADDR_OWVAR 33
50402: PUSH
50403: LD_STRING 
50405: ST_TO_ADDR
// animal := CreateHuman ;
50406: LD_ADDR_VAR 0 12
50410: PUSH
50411: CALL_OW 44
50415: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50416: LD_VAR 0 12
50420: PPUSH
50421: LD_VAR 0 9
50425: PPUSH
50426: LD_INT 0
50428: PPUSH
50429: CALL 52066 0 3
// end ;
50433: GO 50387
50435: POP
50436: POP
// end ;
50437: LD_VAR 0 10
50441: RET
// export function WantHeal ( sci , unit ) ; begin
50442: LD_INT 0
50444: PPUSH
// if GetTaskList ( sci ) > 0 then
50445: LD_VAR 0 1
50449: PPUSH
50450: CALL_OW 437
50454: PUSH
50455: LD_INT 0
50457: GREATER
50458: IFFALSE 50528
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50460: LD_VAR 0 1
50464: PPUSH
50465: CALL_OW 437
50469: PUSH
50470: LD_INT 1
50472: ARRAY
50473: PUSH
50474: LD_INT 1
50476: ARRAY
50477: PUSH
50478: LD_STRING l
50480: EQUAL
50481: PUSH
50482: LD_VAR 0 1
50486: PPUSH
50487: CALL_OW 437
50491: PUSH
50492: LD_INT 1
50494: ARRAY
50495: PUSH
50496: LD_INT 4
50498: ARRAY
50499: PUSH
50500: LD_VAR 0 2
50504: EQUAL
50505: AND
50506: IFFALSE 50518
// result := true else
50508: LD_ADDR_VAR 0 3
50512: PUSH
50513: LD_INT 1
50515: ST_TO_ADDR
50516: GO 50526
// result := false ;
50518: LD_ADDR_VAR 0 3
50522: PUSH
50523: LD_INT 0
50525: ST_TO_ADDR
// end else
50526: GO 50536
// result := false ;
50528: LD_ADDR_VAR 0 3
50532: PUSH
50533: LD_INT 0
50535: ST_TO_ADDR
// end ;
50536: LD_VAR 0 3
50540: RET
// export function HealTarget ( sci ) ; begin
50541: LD_INT 0
50543: PPUSH
// if not sci then
50544: LD_VAR 0 1
50548: NOT
50549: IFFALSE 50553
// exit ;
50551: GO 50618
// result := 0 ;
50553: LD_ADDR_VAR 0 2
50557: PUSH
50558: LD_INT 0
50560: ST_TO_ADDR
// if GetTaskList ( sci ) then
50561: LD_VAR 0 1
50565: PPUSH
50566: CALL_OW 437
50570: IFFALSE 50618
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50572: LD_VAR 0 1
50576: PPUSH
50577: CALL_OW 437
50581: PUSH
50582: LD_INT 1
50584: ARRAY
50585: PUSH
50586: LD_INT 1
50588: ARRAY
50589: PUSH
50590: LD_STRING l
50592: EQUAL
50593: IFFALSE 50618
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50595: LD_ADDR_VAR 0 2
50599: PUSH
50600: LD_VAR 0 1
50604: PPUSH
50605: CALL_OW 437
50609: PUSH
50610: LD_INT 1
50612: ARRAY
50613: PUSH
50614: LD_INT 4
50616: ARRAY
50617: ST_TO_ADDR
// end ;
50618: LD_VAR 0 2
50622: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50623: LD_INT 0
50625: PPUSH
50626: PPUSH
50627: PPUSH
50628: PPUSH
// if not base_units then
50629: LD_VAR 0 1
50633: NOT
50634: IFFALSE 50638
// exit ;
50636: GO 50725
// result := false ;
50638: LD_ADDR_VAR 0 2
50642: PUSH
50643: LD_INT 0
50645: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50646: LD_ADDR_VAR 0 5
50650: PUSH
50651: LD_VAR 0 1
50655: PPUSH
50656: LD_INT 21
50658: PUSH
50659: LD_INT 3
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PPUSH
50666: CALL_OW 72
50670: ST_TO_ADDR
// if not tmp then
50671: LD_VAR 0 5
50675: NOT
50676: IFFALSE 50680
// exit ;
50678: GO 50725
// for i in tmp do
50680: LD_ADDR_VAR 0 3
50684: PUSH
50685: LD_VAR 0 5
50689: PUSH
50690: FOR_IN
50691: IFFALSE 50723
// begin result := EnemyInRange ( i , 22 ) ;
50693: LD_ADDR_VAR 0 2
50697: PUSH
50698: LD_VAR 0 3
50702: PPUSH
50703: LD_INT 22
50705: PPUSH
50706: CALL 48312 0 2
50710: ST_TO_ADDR
// if result then
50711: LD_VAR 0 2
50715: IFFALSE 50721
// exit ;
50717: POP
50718: POP
50719: GO 50725
// end ;
50721: GO 50690
50723: POP
50724: POP
// end ;
50725: LD_VAR 0 2
50729: RET
// export function FilterByTag ( units , tag ) ; begin
50730: LD_INT 0
50732: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50733: LD_ADDR_VAR 0 3
50737: PUSH
50738: LD_VAR 0 1
50742: PPUSH
50743: LD_INT 120
50745: PUSH
50746: LD_VAR 0 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PPUSH
50755: CALL_OW 72
50759: ST_TO_ADDR
// end ;
50760: LD_VAR 0 3
50764: RET
// export function IsDriver ( un ) ; begin
50765: LD_INT 0
50767: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50768: LD_ADDR_VAR 0 2
50772: PUSH
50773: LD_VAR 0 1
50777: PUSH
50778: LD_INT 55
50780: PUSH
50781: EMPTY
50782: LIST
50783: PPUSH
50784: CALL_OW 69
50788: IN
50789: ST_TO_ADDR
// end ;
50790: LD_VAR 0 2
50794: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50795: LD_INT 0
50797: PPUSH
50798: PPUSH
// list := [ ] ;
50799: LD_ADDR_VAR 0 5
50803: PUSH
50804: EMPTY
50805: ST_TO_ADDR
// case d of 0 :
50806: LD_VAR 0 3
50810: PUSH
50811: LD_INT 0
50813: DOUBLE
50814: EQUAL
50815: IFTRUE 50819
50817: GO 50952
50819: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50820: LD_ADDR_VAR 0 5
50824: PUSH
50825: LD_VAR 0 1
50829: PUSH
50830: LD_INT 4
50832: MINUS
50833: PUSH
50834: LD_VAR 0 2
50838: PUSH
50839: LD_INT 4
50841: MINUS
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: LIST
50850: PUSH
50851: LD_VAR 0 1
50855: PUSH
50856: LD_INT 3
50858: MINUS
50859: PUSH
50860: LD_VAR 0 2
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: LIST
50872: PUSH
50873: LD_VAR 0 1
50877: PUSH
50878: LD_INT 4
50880: PLUS
50881: PUSH
50882: LD_VAR 0 2
50886: PUSH
50887: LD_INT 4
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: LIST
50894: PUSH
50895: LD_VAR 0 1
50899: PUSH
50900: LD_INT 3
50902: PLUS
50903: PUSH
50904: LD_VAR 0 2
50908: PUSH
50909: LD_INT 3
50911: PLUS
50912: PUSH
50913: LD_INT 5
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: LIST
50920: PUSH
50921: LD_VAR 0 1
50925: PUSH
50926: LD_VAR 0 2
50930: PUSH
50931: LD_INT 4
50933: PLUS
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: LIST
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: ST_TO_ADDR
// end ; 1 :
50950: GO 51650
50952: LD_INT 1
50954: DOUBLE
50955: EQUAL
50956: IFTRUE 50960
50958: GO 51093
50960: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50961: LD_ADDR_VAR 0 5
50965: PUSH
50966: LD_VAR 0 1
50970: PUSH
50971: LD_VAR 0 2
50975: PUSH
50976: LD_INT 4
50978: MINUS
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: PUSH
50988: LD_VAR 0 1
50992: PUSH
50993: LD_INT 3
50995: MINUS
50996: PUSH
50997: LD_VAR 0 2
51001: PUSH
51002: LD_INT 3
51004: MINUS
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: PUSH
51014: LD_VAR 0 1
51018: PUSH
51019: LD_INT 4
51021: MINUS
51022: PUSH
51023: LD_VAR 0 2
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: PUSH
51036: LD_VAR 0 1
51040: PUSH
51041: LD_VAR 0 2
51045: PUSH
51046: LD_INT 3
51048: PLUS
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: PUSH
51058: LD_VAR 0 1
51062: PUSH
51063: LD_INT 4
51065: PLUS
51066: PUSH
51067: LD_VAR 0 2
51071: PUSH
51072: LD_INT 4
51074: PLUS
51075: PUSH
51076: LD_INT 5
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: ST_TO_ADDR
// end ; 2 :
51091: GO 51650
51093: LD_INT 2
51095: DOUBLE
51096: EQUAL
51097: IFTRUE 51101
51099: GO 51230
51101: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51102: LD_ADDR_VAR 0 5
51106: PUSH
51107: LD_VAR 0 1
51111: PUSH
51112: LD_VAR 0 2
51116: PUSH
51117: LD_INT 3
51119: MINUS
51120: PUSH
51121: LD_INT 3
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: LIST
51128: PUSH
51129: LD_VAR 0 1
51133: PUSH
51134: LD_INT 4
51136: PLUS
51137: PUSH
51138: LD_VAR 0 2
51142: PUSH
51143: LD_INT 4
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: LIST
51150: PUSH
51151: LD_VAR 0 1
51155: PUSH
51156: LD_VAR 0 2
51160: PUSH
51161: LD_INT 4
51163: PLUS
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: LIST
51172: PUSH
51173: LD_VAR 0 1
51177: PUSH
51178: LD_INT 3
51180: MINUS
51181: PUSH
51182: LD_VAR 0 2
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: LIST
51194: PUSH
51195: LD_VAR 0 1
51199: PUSH
51200: LD_INT 4
51202: MINUS
51203: PUSH
51204: LD_VAR 0 2
51208: PUSH
51209: LD_INT 4
51211: MINUS
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: LIST
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: ST_TO_ADDR
// end ; 3 :
51228: GO 51650
51230: LD_INT 3
51232: DOUBLE
51233: EQUAL
51234: IFTRUE 51238
51236: GO 51371
51238: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51239: LD_ADDR_VAR 0 5
51243: PUSH
51244: LD_VAR 0 1
51248: PUSH
51249: LD_INT 3
51251: PLUS
51252: PUSH
51253: LD_VAR 0 2
51257: PUSH
51258: LD_INT 4
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: PUSH
51266: LD_VAR 0 1
51270: PUSH
51271: LD_INT 4
51273: PLUS
51274: PUSH
51275: LD_VAR 0 2
51279: PUSH
51280: LD_INT 4
51282: PLUS
51283: PUSH
51284: LD_INT 5
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: PUSH
51292: LD_VAR 0 1
51296: PUSH
51297: LD_INT 4
51299: MINUS
51300: PUSH
51301: LD_VAR 0 2
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: PUSH
51314: LD_VAR 0 1
51318: PUSH
51319: LD_VAR 0 2
51323: PUSH
51324: LD_INT 4
51326: MINUS
51327: PUSH
51328: LD_INT 3
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: LIST
51335: PUSH
51336: LD_VAR 0 1
51340: PUSH
51341: LD_INT 3
51343: MINUS
51344: PUSH
51345: LD_VAR 0 2
51349: PUSH
51350: LD_INT 3
51352: MINUS
51353: PUSH
51354: LD_INT 2
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: LIST
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: ST_TO_ADDR
// end ; 4 :
51369: GO 51650
51371: LD_INT 4
51373: DOUBLE
51374: EQUAL
51375: IFTRUE 51379
51377: GO 51512
51379: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51380: LD_ADDR_VAR 0 5
51384: PUSH
51385: LD_VAR 0 1
51389: PUSH
51390: LD_VAR 0 2
51394: PUSH
51395: LD_INT 4
51397: PLUS
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: LIST
51406: PUSH
51407: LD_VAR 0 1
51411: PUSH
51412: LD_INT 3
51414: PLUS
51415: PUSH
51416: LD_VAR 0 2
51420: PUSH
51421: LD_INT 3
51423: PLUS
51424: PUSH
51425: LD_INT 5
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: PUSH
51433: LD_VAR 0 1
51437: PUSH
51438: LD_INT 4
51440: PLUS
51441: PUSH
51442: LD_VAR 0 2
51446: PUSH
51447: LD_INT 4
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: LIST
51454: PUSH
51455: LD_VAR 0 1
51459: PUSH
51460: LD_VAR 0 2
51464: PUSH
51465: LD_INT 3
51467: MINUS
51468: PUSH
51469: LD_INT 3
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: LIST
51476: PUSH
51477: LD_VAR 0 1
51481: PUSH
51482: LD_INT 4
51484: MINUS
51485: PUSH
51486: LD_VAR 0 2
51490: PUSH
51491: LD_INT 4
51493: MINUS
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: ST_TO_ADDR
// end ; 5 :
51510: GO 51650
51512: LD_INT 5
51514: DOUBLE
51515: EQUAL
51516: IFTRUE 51520
51518: GO 51649
51520: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51521: LD_ADDR_VAR 0 5
51525: PUSH
51526: LD_VAR 0 1
51530: PUSH
51531: LD_INT 4
51533: MINUS
51534: PUSH
51535: LD_VAR 0 2
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: LIST
51547: PUSH
51548: LD_VAR 0 1
51552: PUSH
51553: LD_VAR 0 2
51557: PUSH
51558: LD_INT 4
51560: MINUS
51561: PUSH
51562: LD_INT 3
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: LIST
51569: PUSH
51570: LD_VAR 0 1
51574: PUSH
51575: LD_INT 4
51577: PLUS
51578: PUSH
51579: LD_VAR 0 2
51583: PUSH
51584: LD_INT 4
51586: PLUS
51587: PUSH
51588: LD_INT 5
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: LIST
51595: PUSH
51596: LD_VAR 0 1
51600: PUSH
51601: LD_INT 3
51603: PLUS
51604: PUSH
51605: LD_VAR 0 2
51609: PUSH
51610: LD_INT 4
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: LIST
51617: PUSH
51618: LD_VAR 0 1
51622: PUSH
51623: LD_VAR 0 2
51627: PUSH
51628: LD_INT 3
51630: PLUS
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: LIST
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: ST_TO_ADDR
// end ; end ;
51647: GO 51650
51649: POP
// result := list ;
51650: LD_ADDR_VAR 0 4
51654: PUSH
51655: LD_VAR 0 5
51659: ST_TO_ADDR
// end ;
51660: LD_VAR 0 4
51664: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51665: LD_INT 0
51667: PPUSH
51668: PPUSH
51669: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51670: LD_VAR 0 1
51674: NOT
51675: PUSH
51676: LD_VAR 0 2
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: LD_INT 4
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: IN
51699: NOT
51700: OR
51701: IFFALSE 51705
// exit ;
51703: GO 51788
// tmp := [ ] ;
51705: LD_ADDR_VAR 0 5
51709: PUSH
51710: EMPTY
51711: ST_TO_ADDR
// for i in units do
51712: LD_ADDR_VAR 0 4
51716: PUSH
51717: LD_VAR 0 1
51721: PUSH
51722: FOR_IN
51723: IFFALSE 51757
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51725: LD_ADDR_VAR 0 5
51729: PUSH
51730: LD_VAR 0 5
51734: PPUSH
51735: LD_VAR 0 4
51739: PPUSH
51740: LD_VAR 0 2
51744: PPUSH
51745: CALL_OW 259
51749: PPUSH
51750: CALL 53161 0 2
51754: ST_TO_ADDR
51755: GO 51722
51757: POP
51758: POP
// if not tmp then
51759: LD_VAR 0 5
51763: NOT
51764: IFFALSE 51768
// exit ;
51766: GO 51788
// result := SortListByListDesc ( units , tmp ) ;
51768: LD_ADDR_VAR 0 3
51772: PUSH
51773: LD_VAR 0 1
51777: PPUSH
51778: LD_VAR 0 5
51782: PPUSH
51783: CALL_OW 77
51787: ST_TO_ADDR
// end ;
51788: LD_VAR 0 3
51792: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51793: LD_INT 0
51795: PPUSH
51796: PPUSH
51797: PPUSH
// result := false ;
51798: LD_ADDR_VAR 0 3
51802: PUSH
51803: LD_INT 0
51805: ST_TO_ADDR
// if not building then
51806: LD_VAR 0 2
51810: NOT
51811: IFFALSE 51815
// exit ;
51813: GO 51953
// x := GetX ( building ) ;
51815: LD_ADDR_VAR 0 4
51819: PUSH
51820: LD_VAR 0 2
51824: PPUSH
51825: CALL_OW 250
51829: ST_TO_ADDR
// y := GetY ( building ) ;
51830: LD_ADDR_VAR 0 5
51834: PUSH
51835: LD_VAR 0 2
51839: PPUSH
51840: CALL_OW 251
51844: ST_TO_ADDR
// if not x or not y then
51845: LD_VAR 0 4
51849: NOT
51850: PUSH
51851: LD_VAR 0 5
51855: NOT
51856: OR
51857: IFFALSE 51861
// exit ;
51859: GO 51953
// if GetTaskList ( unit ) then
51861: LD_VAR 0 1
51865: PPUSH
51866: CALL_OW 437
51870: IFFALSE 51953
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51872: LD_STRING e
51874: PUSH
51875: LD_VAR 0 1
51879: PPUSH
51880: CALL_OW 437
51884: PUSH
51885: LD_INT 1
51887: ARRAY
51888: PUSH
51889: LD_INT 1
51891: ARRAY
51892: EQUAL
51893: PUSH
51894: LD_VAR 0 4
51898: PUSH
51899: LD_VAR 0 1
51903: PPUSH
51904: CALL_OW 437
51908: PUSH
51909: LD_INT 1
51911: ARRAY
51912: PUSH
51913: LD_INT 2
51915: ARRAY
51916: EQUAL
51917: AND
51918: PUSH
51919: LD_VAR 0 5
51923: PUSH
51924: LD_VAR 0 1
51928: PPUSH
51929: CALL_OW 437
51933: PUSH
51934: LD_INT 1
51936: ARRAY
51937: PUSH
51938: LD_INT 3
51940: ARRAY
51941: EQUAL
51942: AND
51943: IFFALSE 51953
// result := true end ;
51945: LD_ADDR_VAR 0 3
51949: PUSH
51950: LD_INT 1
51952: ST_TO_ADDR
// end ;
51953: LD_VAR 0 3
51957: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51958: LD_INT 0
51960: PPUSH
// result := false ;
51961: LD_ADDR_VAR 0 4
51965: PUSH
51966: LD_INT 0
51968: ST_TO_ADDR
// if GetTaskList ( unit ) then
51969: LD_VAR 0 1
51973: PPUSH
51974: CALL_OW 437
51978: IFFALSE 52061
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51980: LD_STRING M
51982: PUSH
51983: LD_VAR 0 1
51987: PPUSH
51988: CALL_OW 437
51992: PUSH
51993: LD_INT 1
51995: ARRAY
51996: PUSH
51997: LD_INT 1
51999: ARRAY
52000: EQUAL
52001: PUSH
52002: LD_VAR 0 2
52006: PUSH
52007: LD_VAR 0 1
52011: PPUSH
52012: CALL_OW 437
52016: PUSH
52017: LD_INT 1
52019: ARRAY
52020: PUSH
52021: LD_INT 2
52023: ARRAY
52024: EQUAL
52025: AND
52026: PUSH
52027: LD_VAR 0 3
52031: PUSH
52032: LD_VAR 0 1
52036: PPUSH
52037: CALL_OW 437
52041: PUSH
52042: LD_INT 1
52044: ARRAY
52045: PUSH
52046: LD_INT 3
52048: ARRAY
52049: EQUAL
52050: AND
52051: IFFALSE 52061
// result := true ;
52053: LD_ADDR_VAR 0 4
52057: PUSH
52058: LD_INT 1
52060: ST_TO_ADDR
// end ; end ;
52061: LD_VAR 0 4
52065: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52066: LD_INT 0
52068: PPUSH
52069: PPUSH
52070: PPUSH
52071: PPUSH
// if not unit or not area then
52072: LD_VAR 0 1
52076: NOT
52077: PUSH
52078: LD_VAR 0 2
52082: NOT
52083: OR
52084: IFFALSE 52088
// exit ;
52086: GO 52264
// tmp := AreaToList ( area , i ) ;
52088: LD_ADDR_VAR 0 6
52092: PUSH
52093: LD_VAR 0 2
52097: PPUSH
52098: LD_VAR 0 5
52102: PPUSH
52103: CALL_OW 517
52107: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52108: LD_ADDR_VAR 0 5
52112: PUSH
52113: DOUBLE
52114: LD_INT 1
52116: DEC
52117: ST_TO_ADDR
52118: LD_VAR 0 6
52122: PUSH
52123: LD_INT 1
52125: ARRAY
52126: PUSH
52127: FOR_TO
52128: IFFALSE 52262
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52130: LD_ADDR_VAR 0 7
52134: PUSH
52135: LD_VAR 0 6
52139: PUSH
52140: LD_INT 1
52142: ARRAY
52143: PUSH
52144: LD_VAR 0 5
52148: ARRAY
52149: PUSH
52150: LD_VAR 0 6
52154: PUSH
52155: LD_INT 2
52157: ARRAY
52158: PUSH
52159: LD_VAR 0 5
52163: ARRAY
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52169: LD_INT 92
52171: PUSH
52172: LD_VAR 0 7
52176: PUSH
52177: LD_INT 1
52179: ARRAY
52180: PUSH
52181: LD_VAR 0 7
52185: PUSH
52186: LD_INT 2
52188: ARRAY
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: PPUSH
52199: CALL_OW 69
52203: PUSH
52204: LD_INT 0
52206: EQUAL
52207: IFFALSE 52260
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52209: LD_VAR 0 1
52213: PPUSH
52214: LD_VAR 0 7
52218: PUSH
52219: LD_INT 1
52221: ARRAY
52222: PPUSH
52223: LD_VAR 0 7
52227: PUSH
52228: LD_INT 2
52230: ARRAY
52231: PPUSH
52232: LD_VAR 0 3
52236: PPUSH
52237: CALL_OW 48
// result := IsPlaced ( unit ) ;
52241: LD_ADDR_VAR 0 4
52245: PUSH
52246: LD_VAR 0 1
52250: PPUSH
52251: CALL_OW 305
52255: ST_TO_ADDR
// exit ;
52256: POP
52257: POP
52258: GO 52264
// end ; end ;
52260: GO 52127
52262: POP
52263: POP
// end ;
52264: LD_VAR 0 4
52268: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52269: LD_INT 0
52271: PPUSH
52272: PPUSH
52273: PPUSH
// if not side or side > 8 then
52274: LD_VAR 0 1
52278: NOT
52279: PUSH
52280: LD_VAR 0 1
52284: PUSH
52285: LD_INT 8
52287: GREATER
52288: OR
52289: IFFALSE 52293
// exit ;
52291: GO 52480
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52293: LD_ADDR_VAR 0 4
52297: PUSH
52298: LD_INT 22
52300: PUSH
52301: LD_VAR 0 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 21
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PPUSH
52324: CALL_OW 69
52328: ST_TO_ADDR
// if not tmp then
52329: LD_VAR 0 4
52333: NOT
52334: IFFALSE 52338
// exit ;
52336: GO 52480
// enable_addtolog := true ;
52338: LD_ADDR_OWVAR 81
52342: PUSH
52343: LD_INT 1
52345: ST_TO_ADDR
// AddToLog ( [ ) ;
52346: LD_STRING [
52348: PPUSH
52349: CALL_OW 561
// for i in tmp do
52353: LD_ADDR_VAR 0 3
52357: PUSH
52358: LD_VAR 0 4
52362: PUSH
52363: FOR_IN
52364: IFFALSE 52471
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52366: LD_STRING [
52368: PUSH
52369: LD_VAR 0 3
52373: PPUSH
52374: CALL_OW 266
52378: STR
52379: PUSH
52380: LD_STRING , 
52382: STR
52383: PUSH
52384: LD_VAR 0 3
52388: PPUSH
52389: CALL_OW 250
52393: STR
52394: PUSH
52395: LD_STRING , 
52397: STR
52398: PUSH
52399: LD_VAR 0 3
52403: PPUSH
52404: CALL_OW 251
52408: STR
52409: PUSH
52410: LD_STRING , 
52412: STR
52413: PUSH
52414: LD_VAR 0 3
52418: PPUSH
52419: CALL_OW 254
52423: STR
52424: PUSH
52425: LD_STRING , 
52427: STR
52428: PUSH
52429: LD_VAR 0 3
52433: PPUSH
52434: LD_INT 1
52436: PPUSH
52437: CALL_OW 268
52441: STR
52442: PUSH
52443: LD_STRING , 
52445: STR
52446: PUSH
52447: LD_VAR 0 3
52451: PPUSH
52452: LD_INT 2
52454: PPUSH
52455: CALL_OW 268
52459: STR
52460: PUSH
52461: LD_STRING ],
52463: STR
52464: PPUSH
52465: CALL_OW 561
// end ;
52469: GO 52363
52471: POP
52472: POP
// AddToLog ( ]; ) ;
52473: LD_STRING ];
52475: PPUSH
52476: CALL_OW 561
// end ;
52480: LD_VAR 0 2
52484: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52485: LD_INT 0
52487: PPUSH
52488: PPUSH
52489: PPUSH
52490: PPUSH
52491: PPUSH
// if not area or not rate or not max then
52492: LD_VAR 0 1
52496: NOT
52497: PUSH
52498: LD_VAR 0 2
52502: NOT
52503: OR
52504: PUSH
52505: LD_VAR 0 4
52509: NOT
52510: OR
52511: IFFALSE 52515
// exit ;
52513: GO 52704
// while 1 do
52515: LD_INT 1
52517: IFFALSE 52704
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52519: LD_ADDR_VAR 0 9
52523: PUSH
52524: LD_VAR 0 1
52528: PPUSH
52529: LD_INT 1
52531: PPUSH
52532: CALL_OW 287
52536: PUSH
52537: LD_INT 10
52539: MUL
52540: ST_TO_ADDR
// r := rate / 10 ;
52541: LD_ADDR_VAR 0 7
52545: PUSH
52546: LD_VAR 0 2
52550: PUSH
52551: LD_INT 10
52553: DIVREAL
52554: ST_TO_ADDR
// time := 1 1$00 ;
52555: LD_ADDR_VAR 0 8
52559: PUSH
52560: LD_INT 2100
52562: ST_TO_ADDR
// if amount < min then
52563: LD_VAR 0 9
52567: PUSH
52568: LD_VAR 0 3
52572: LESS
52573: IFFALSE 52591
// r := r * 2 else
52575: LD_ADDR_VAR 0 7
52579: PUSH
52580: LD_VAR 0 7
52584: PUSH
52585: LD_INT 2
52587: MUL
52588: ST_TO_ADDR
52589: GO 52617
// if amount > max then
52591: LD_VAR 0 9
52595: PUSH
52596: LD_VAR 0 4
52600: GREATER
52601: IFFALSE 52617
// r := r / 2 ;
52603: LD_ADDR_VAR 0 7
52607: PUSH
52608: LD_VAR 0 7
52612: PUSH
52613: LD_INT 2
52615: DIVREAL
52616: ST_TO_ADDR
// time := time / r ;
52617: LD_ADDR_VAR 0 8
52621: PUSH
52622: LD_VAR 0 8
52626: PUSH
52627: LD_VAR 0 7
52631: DIVREAL
52632: ST_TO_ADDR
// if time < 0 then
52633: LD_VAR 0 8
52637: PUSH
52638: LD_INT 0
52640: LESS
52641: IFFALSE 52658
// time := time * - 1 ;
52643: LD_ADDR_VAR 0 8
52647: PUSH
52648: LD_VAR 0 8
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: MUL
52657: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52658: LD_VAR 0 8
52662: PUSH
52663: LD_INT 35
52665: PPUSH
52666: LD_INT 875
52668: PPUSH
52669: CALL_OW 12
52673: PLUS
52674: PPUSH
52675: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52679: LD_INT 1
52681: PPUSH
52682: LD_INT 5
52684: PPUSH
52685: CALL_OW 12
52689: PPUSH
52690: LD_VAR 0 1
52694: PPUSH
52695: LD_INT 1
52697: PPUSH
52698: CALL_OW 55
// end ;
52702: GO 52515
// end ;
52704: LD_VAR 0 5
52708: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52709: LD_INT 0
52711: PPUSH
52712: PPUSH
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
52717: PPUSH
52718: PPUSH
// if not turrets or not factories then
52719: LD_VAR 0 1
52723: NOT
52724: PUSH
52725: LD_VAR 0 2
52729: NOT
52730: OR
52731: IFFALSE 52735
// exit ;
52733: GO 53042
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52735: LD_ADDR_VAR 0 10
52739: PUSH
52740: LD_INT 5
52742: PUSH
52743: LD_INT 6
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 4
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: LD_INT 5
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 24
52777: PUSH
52778: LD_INT 25
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 23
52787: PUSH
52788: LD_INT 27
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 42
52801: PUSH
52802: LD_INT 43
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 44
52811: PUSH
52812: LD_INT 46
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 45
52821: PUSH
52822: LD_INT 47
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: LIST
52838: ST_TO_ADDR
// result := [ ] ;
52839: LD_ADDR_VAR 0 3
52843: PUSH
52844: EMPTY
52845: ST_TO_ADDR
// for i in turrets do
52846: LD_ADDR_VAR 0 4
52850: PUSH
52851: LD_VAR 0 1
52855: PUSH
52856: FOR_IN
52857: IFFALSE 53040
// begin nat := GetNation ( i ) ;
52859: LD_ADDR_VAR 0 7
52863: PUSH
52864: LD_VAR 0 4
52868: PPUSH
52869: CALL_OW 248
52873: ST_TO_ADDR
// weapon := 0 ;
52874: LD_ADDR_VAR 0 8
52878: PUSH
52879: LD_INT 0
52881: ST_TO_ADDR
// if not nat then
52882: LD_VAR 0 7
52886: NOT
52887: IFFALSE 52891
// continue ;
52889: GO 52856
// for j in list [ nat ] do
52891: LD_ADDR_VAR 0 5
52895: PUSH
52896: LD_VAR 0 10
52900: PUSH
52901: LD_VAR 0 7
52905: ARRAY
52906: PUSH
52907: FOR_IN
52908: IFFALSE 52949
// if GetBWeapon ( i ) = j [ 1 ] then
52910: LD_VAR 0 4
52914: PPUSH
52915: CALL_OW 269
52919: PUSH
52920: LD_VAR 0 5
52924: PUSH
52925: LD_INT 1
52927: ARRAY
52928: EQUAL
52929: IFFALSE 52947
// begin weapon := j [ 2 ] ;
52931: LD_ADDR_VAR 0 8
52935: PUSH
52936: LD_VAR 0 5
52940: PUSH
52941: LD_INT 2
52943: ARRAY
52944: ST_TO_ADDR
// break ;
52945: GO 52949
// end ;
52947: GO 52907
52949: POP
52950: POP
// if not weapon then
52951: LD_VAR 0 8
52955: NOT
52956: IFFALSE 52960
// continue ;
52958: GO 52856
// for k in factories do
52960: LD_ADDR_VAR 0 6
52964: PUSH
52965: LD_VAR 0 2
52969: PUSH
52970: FOR_IN
52971: IFFALSE 53036
// begin weapons := AvailableWeaponList ( k ) ;
52973: LD_ADDR_VAR 0 9
52977: PUSH
52978: LD_VAR 0 6
52982: PPUSH
52983: CALL_OW 478
52987: ST_TO_ADDR
// if not weapons then
52988: LD_VAR 0 9
52992: NOT
52993: IFFALSE 52997
// continue ;
52995: GO 52970
// if weapon in weapons then
52997: LD_VAR 0 8
53001: PUSH
53002: LD_VAR 0 9
53006: IN
53007: IFFALSE 53034
// begin result := [ i , weapon ] ;
53009: LD_ADDR_VAR 0 3
53013: PUSH
53014: LD_VAR 0 4
53018: PUSH
53019: LD_VAR 0 8
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: ST_TO_ADDR
// exit ;
53028: POP
53029: POP
53030: POP
53031: POP
53032: GO 53042
// end ; end ;
53034: GO 52970
53036: POP
53037: POP
// end ;
53038: GO 52856
53040: POP
53041: POP
// end ;
53042: LD_VAR 0 3
53046: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53047: LD_INT 0
53049: PPUSH
// if not side or side > 8 then
53050: LD_VAR 0 3
53054: NOT
53055: PUSH
53056: LD_VAR 0 3
53060: PUSH
53061: LD_INT 8
53063: GREATER
53064: OR
53065: IFFALSE 53069
// exit ;
53067: GO 53128
// if not range then
53069: LD_VAR 0 4
53073: NOT
53074: IFFALSE 53085
// range := - 12 ;
53076: LD_ADDR_VAR 0 4
53080: PUSH
53081: LD_INT 12
53083: NEG
53084: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53085: LD_VAR 0 1
53089: PPUSH
53090: LD_VAR 0 2
53094: PPUSH
53095: LD_VAR 0 3
53099: PPUSH
53100: LD_VAR 0 4
53104: PPUSH
53105: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53109: LD_VAR 0 1
53113: PPUSH
53114: LD_VAR 0 2
53118: PPUSH
53119: LD_VAR 0 3
53123: PPUSH
53124: CALL_OW 331
// end ;
53128: LD_VAR 0 5
53132: RET
// export function Video ( mode ) ; begin
53133: LD_INT 0
53135: PPUSH
// ingame_video = mode ;
53136: LD_ADDR_OWVAR 52
53140: PUSH
53141: LD_VAR 0 1
53145: ST_TO_ADDR
// interface_hidden = mode ;
53146: LD_ADDR_OWVAR 54
53150: PUSH
53151: LD_VAR 0 1
53155: ST_TO_ADDR
// end ;
53156: LD_VAR 0 2
53160: RET
// export function Join ( array , element ) ; begin
53161: LD_INT 0
53163: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53164: LD_ADDR_VAR 0 3
53168: PUSH
53169: LD_VAR 0 1
53173: PPUSH
53174: LD_VAR 0 1
53178: PUSH
53179: LD_INT 1
53181: PLUS
53182: PPUSH
53183: LD_VAR 0 2
53187: PPUSH
53188: CALL_OW 1
53192: ST_TO_ADDR
// end ;
53193: LD_VAR 0 3
53197: RET
// export function JoinUnion ( array , element ) ; begin
53198: LD_INT 0
53200: PPUSH
// result := array union element ;
53201: LD_ADDR_VAR 0 3
53205: PUSH
53206: LD_VAR 0 1
53210: PUSH
53211: LD_VAR 0 2
53215: UNION
53216: ST_TO_ADDR
// end ;
53217: LD_VAR 0 3
53221: RET
// export function GetBehemoths ( side ) ; begin
53222: LD_INT 0
53224: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53225: LD_ADDR_VAR 0 2
53229: PUSH
53230: LD_INT 22
53232: PUSH
53233: LD_VAR 0 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 31
53244: PUSH
53245: LD_INT 25
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PPUSH
53256: CALL_OW 69
53260: ST_TO_ADDR
// end ;
53261: LD_VAR 0 2
53265: RET
// export function Shuffle ( array ) ; var i , index ; begin
53266: LD_INT 0
53268: PPUSH
53269: PPUSH
53270: PPUSH
// result := [ ] ;
53271: LD_ADDR_VAR 0 2
53275: PUSH
53276: EMPTY
53277: ST_TO_ADDR
// if not array then
53278: LD_VAR 0 1
53282: NOT
53283: IFFALSE 53287
// exit ;
53285: GO 53386
// Randomize ;
53287: CALL_OW 10
// for i = array downto 1 do
53291: LD_ADDR_VAR 0 3
53295: PUSH
53296: DOUBLE
53297: LD_VAR 0 1
53301: INC
53302: ST_TO_ADDR
53303: LD_INT 1
53305: PUSH
53306: FOR_DOWNTO
53307: IFFALSE 53384
// begin index := rand ( 1 , array ) ;
53309: LD_ADDR_VAR 0 4
53313: PUSH
53314: LD_INT 1
53316: PPUSH
53317: LD_VAR 0 1
53321: PPUSH
53322: CALL_OW 12
53326: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53327: LD_ADDR_VAR 0 2
53331: PUSH
53332: LD_VAR 0 2
53336: PPUSH
53337: LD_VAR 0 2
53341: PUSH
53342: LD_INT 1
53344: PLUS
53345: PPUSH
53346: LD_VAR 0 1
53350: PUSH
53351: LD_VAR 0 4
53355: ARRAY
53356: PPUSH
53357: CALL_OW 2
53361: ST_TO_ADDR
// array := Delete ( array , index ) ;
53362: LD_ADDR_VAR 0 1
53366: PUSH
53367: LD_VAR 0 1
53371: PPUSH
53372: LD_VAR 0 4
53376: PPUSH
53377: CALL_OW 3
53381: ST_TO_ADDR
// end ;
53382: GO 53306
53384: POP
53385: POP
// end ;
53386: LD_VAR 0 2
53390: RET
// export function GetBaseMaterials ( base ) ; begin
53391: LD_INT 0
53393: PPUSH
// result := [ 0 , 0 , 0 ] ;
53394: LD_ADDR_VAR 0 2
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: LIST
53412: ST_TO_ADDR
// if not base then
53413: LD_VAR 0 1
53417: NOT
53418: IFFALSE 53422
// exit ;
53420: GO 53471
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53422: LD_ADDR_VAR 0 2
53426: PUSH
53427: LD_VAR 0 1
53431: PPUSH
53432: LD_INT 1
53434: PPUSH
53435: CALL_OW 275
53439: PUSH
53440: LD_VAR 0 1
53444: PPUSH
53445: LD_INT 2
53447: PPUSH
53448: CALL_OW 275
53452: PUSH
53453: LD_VAR 0 1
53457: PPUSH
53458: LD_INT 3
53460: PPUSH
53461: CALL_OW 275
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: LIST
53470: ST_TO_ADDR
// end ;
53471: LD_VAR 0 2
53475: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53476: LD_INT 0
53478: PPUSH
53479: PPUSH
// result := array ;
53480: LD_ADDR_VAR 0 3
53484: PUSH
53485: LD_VAR 0 1
53489: ST_TO_ADDR
// if size >= result then
53490: LD_VAR 0 2
53494: PUSH
53495: LD_VAR 0 3
53499: GREATEREQUAL
53500: IFFALSE 53504
// exit ;
53502: GO 53554
// if size then
53504: LD_VAR 0 2
53508: IFFALSE 53554
// for i := array downto size do
53510: LD_ADDR_VAR 0 4
53514: PUSH
53515: DOUBLE
53516: LD_VAR 0 1
53520: INC
53521: ST_TO_ADDR
53522: LD_VAR 0 2
53526: PUSH
53527: FOR_DOWNTO
53528: IFFALSE 53552
// result := Delete ( result , result ) ;
53530: LD_ADDR_VAR 0 3
53534: PUSH
53535: LD_VAR 0 3
53539: PPUSH
53540: LD_VAR 0 3
53544: PPUSH
53545: CALL_OW 3
53549: ST_TO_ADDR
53550: GO 53527
53552: POP
53553: POP
// end ;
53554: LD_VAR 0 3
53558: RET
// export function ComExit ( unit ) ; var tmp ; begin
53559: LD_INT 0
53561: PPUSH
53562: PPUSH
// if not IsInUnit ( unit ) then
53563: LD_VAR 0 1
53567: PPUSH
53568: CALL_OW 310
53572: NOT
53573: IFFALSE 53577
// exit ;
53575: GO 53637
// tmp := IsInUnit ( unit ) ;
53577: LD_ADDR_VAR 0 3
53581: PUSH
53582: LD_VAR 0 1
53586: PPUSH
53587: CALL_OW 310
53591: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53592: LD_VAR 0 3
53596: PPUSH
53597: CALL_OW 247
53601: PUSH
53602: LD_INT 2
53604: EQUAL
53605: IFFALSE 53618
// ComExitVehicle ( unit ) else
53607: LD_VAR 0 1
53611: PPUSH
53612: CALL_OW 121
53616: GO 53627
// ComExitBuilding ( unit ) ;
53618: LD_VAR 0 1
53622: PPUSH
53623: CALL_OW 122
// result := tmp ;
53627: LD_ADDR_VAR 0 2
53631: PUSH
53632: LD_VAR 0 3
53636: ST_TO_ADDR
// end ;
53637: LD_VAR 0 2
53641: RET
// export function ComExitAll ( units ) ; var i ; begin
53642: LD_INT 0
53644: PPUSH
53645: PPUSH
// if not units then
53646: LD_VAR 0 1
53650: NOT
53651: IFFALSE 53655
// exit ;
53653: GO 53681
// for i in units do
53655: LD_ADDR_VAR 0 3
53659: PUSH
53660: LD_VAR 0 1
53664: PUSH
53665: FOR_IN
53666: IFFALSE 53679
// ComExit ( i ) ;
53668: LD_VAR 0 3
53672: PPUSH
53673: CALL 53559 0 1
53677: GO 53665
53679: POP
53680: POP
// end ;
53681: LD_VAR 0 2
53685: RET
// export function ResetHc ; begin
53686: LD_INT 0
53688: PPUSH
// InitHc ;
53689: CALL_OW 19
// hc_importance := 0 ;
53693: LD_ADDR_OWVAR 32
53697: PUSH
53698: LD_INT 0
53700: ST_TO_ADDR
// end ;
53701: LD_VAR 0 1
53705: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53706: LD_INT 0
53708: PPUSH
53709: PPUSH
53710: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53711: LD_ADDR_VAR 0 6
53715: PUSH
53716: LD_VAR 0 1
53720: PUSH
53721: LD_VAR 0 3
53725: PLUS
53726: PUSH
53727: LD_INT 2
53729: DIV
53730: ST_TO_ADDR
// if _x < 0 then
53731: LD_VAR 0 6
53735: PUSH
53736: LD_INT 0
53738: LESS
53739: IFFALSE 53756
// _x := _x * - 1 ;
53741: LD_ADDR_VAR 0 6
53745: PUSH
53746: LD_VAR 0 6
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: MUL
53755: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53756: LD_ADDR_VAR 0 7
53760: PUSH
53761: LD_VAR 0 2
53765: PUSH
53766: LD_VAR 0 4
53770: PLUS
53771: PUSH
53772: LD_INT 2
53774: DIV
53775: ST_TO_ADDR
// if _y < 0 then
53776: LD_VAR 0 7
53780: PUSH
53781: LD_INT 0
53783: LESS
53784: IFFALSE 53801
// _y := _y * - 1 ;
53786: LD_ADDR_VAR 0 7
53790: PUSH
53791: LD_VAR 0 7
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: MUL
53800: ST_TO_ADDR
// result := [ _x , _y ] ;
53801: LD_ADDR_VAR 0 5
53805: PUSH
53806: LD_VAR 0 6
53810: PUSH
53811: LD_VAR 0 7
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: ST_TO_ADDR
// end ;
53820: LD_VAR 0 5
53824: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53825: LD_INT 0
53827: PPUSH
53828: PPUSH
53829: PPUSH
53830: PPUSH
// task := GetTaskList ( unit ) ;
53831: LD_ADDR_VAR 0 7
53835: PUSH
53836: LD_VAR 0 1
53840: PPUSH
53841: CALL_OW 437
53845: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53846: LD_VAR 0 7
53850: NOT
53851: PUSH
53852: LD_VAR 0 1
53856: PPUSH
53857: LD_VAR 0 2
53861: PPUSH
53862: CALL_OW 308
53866: NOT
53867: AND
53868: IFFALSE 53872
// exit ;
53870: GO 53990
// if IsInArea ( unit , area ) then
53872: LD_VAR 0 1
53876: PPUSH
53877: LD_VAR 0 2
53881: PPUSH
53882: CALL_OW 308
53886: IFFALSE 53904
// begin ComMoveToArea ( unit , goAway ) ;
53888: LD_VAR 0 1
53892: PPUSH
53893: LD_VAR 0 3
53897: PPUSH
53898: CALL_OW 113
// exit ;
53902: GO 53990
// end ; if task [ 1 ] [ 1 ] <> M then
53904: LD_VAR 0 7
53908: PUSH
53909: LD_INT 1
53911: ARRAY
53912: PUSH
53913: LD_INT 1
53915: ARRAY
53916: PUSH
53917: LD_STRING M
53919: NONEQUAL
53920: IFFALSE 53924
// exit ;
53922: GO 53990
// x := task [ 1 ] [ 2 ] ;
53924: LD_ADDR_VAR 0 5
53928: PUSH
53929: LD_VAR 0 7
53933: PUSH
53934: LD_INT 1
53936: ARRAY
53937: PUSH
53938: LD_INT 2
53940: ARRAY
53941: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53942: LD_ADDR_VAR 0 6
53946: PUSH
53947: LD_VAR 0 7
53951: PUSH
53952: LD_INT 1
53954: ARRAY
53955: PUSH
53956: LD_INT 3
53958: ARRAY
53959: ST_TO_ADDR
// if InArea ( x , y , area ) then
53960: LD_VAR 0 5
53964: PPUSH
53965: LD_VAR 0 6
53969: PPUSH
53970: LD_VAR 0 2
53974: PPUSH
53975: CALL_OW 309
53979: IFFALSE 53990
// ComStop ( unit ) ;
53981: LD_VAR 0 1
53985: PPUSH
53986: CALL_OW 141
// end ;
53990: LD_VAR 0 4
53994: RET
// export function Abs ( value ) ; begin
53995: LD_INT 0
53997: PPUSH
// result := value ;
53998: LD_ADDR_VAR 0 2
54002: PUSH
54003: LD_VAR 0 1
54007: ST_TO_ADDR
// if value < 0 then
54008: LD_VAR 0 1
54012: PUSH
54013: LD_INT 0
54015: LESS
54016: IFFALSE 54033
// result := value * - 1 ;
54018: LD_ADDR_VAR 0 2
54022: PUSH
54023: LD_VAR 0 1
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: MUL
54032: ST_TO_ADDR
// end ;
54033: LD_VAR 0 2
54037: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54038: LD_INT 0
54040: PPUSH
54041: PPUSH
54042: PPUSH
54043: PPUSH
54044: PPUSH
54045: PPUSH
54046: PPUSH
54047: PPUSH
// if not unit or not building then
54048: LD_VAR 0 1
54052: NOT
54053: PUSH
54054: LD_VAR 0 2
54058: NOT
54059: OR
54060: IFFALSE 54064
// exit ;
54062: GO 54290
// x := GetX ( building ) ;
54064: LD_ADDR_VAR 0 4
54068: PUSH
54069: LD_VAR 0 2
54073: PPUSH
54074: CALL_OW 250
54078: ST_TO_ADDR
// y := GetY ( building ) ;
54079: LD_ADDR_VAR 0 6
54083: PUSH
54084: LD_VAR 0 2
54088: PPUSH
54089: CALL_OW 251
54093: ST_TO_ADDR
// d := GetDir ( building ) ;
54094: LD_ADDR_VAR 0 8
54098: PUSH
54099: LD_VAR 0 2
54103: PPUSH
54104: CALL_OW 254
54108: ST_TO_ADDR
// r := 4 ;
54109: LD_ADDR_VAR 0 9
54113: PUSH
54114: LD_INT 4
54116: ST_TO_ADDR
// for i := 1 to 5 do
54117: LD_ADDR_VAR 0 10
54121: PUSH
54122: DOUBLE
54123: LD_INT 1
54125: DEC
54126: ST_TO_ADDR
54127: LD_INT 5
54129: PUSH
54130: FOR_TO
54131: IFFALSE 54288
// begin _x := ShiftX ( x , d , r + i ) ;
54133: LD_ADDR_VAR 0 5
54137: PUSH
54138: LD_VAR 0 4
54142: PPUSH
54143: LD_VAR 0 8
54147: PPUSH
54148: LD_VAR 0 9
54152: PUSH
54153: LD_VAR 0 10
54157: PLUS
54158: PPUSH
54159: CALL_OW 272
54163: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54164: LD_ADDR_VAR 0 7
54168: PUSH
54169: LD_VAR 0 6
54173: PPUSH
54174: LD_VAR 0 8
54178: PPUSH
54179: LD_VAR 0 9
54183: PUSH
54184: LD_VAR 0 10
54188: PLUS
54189: PPUSH
54190: CALL_OW 273
54194: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54195: LD_VAR 0 5
54199: PPUSH
54200: LD_VAR 0 7
54204: PPUSH
54205: CALL_OW 488
54209: PUSH
54210: LD_VAR 0 5
54214: PPUSH
54215: LD_VAR 0 7
54219: PPUSH
54220: CALL_OW 428
54224: PPUSH
54225: CALL_OW 247
54229: PUSH
54230: LD_INT 3
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: IN
54240: NOT
54241: AND
54242: IFFALSE 54286
// begin ComMoveXY ( unit , _x , _y ) ;
54244: LD_VAR 0 1
54248: PPUSH
54249: LD_VAR 0 5
54253: PPUSH
54254: LD_VAR 0 7
54258: PPUSH
54259: CALL_OW 111
// result := [ _x , _y ] ;
54263: LD_ADDR_VAR 0 3
54267: PUSH
54268: LD_VAR 0 5
54272: PUSH
54273: LD_VAR 0 7
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: ST_TO_ADDR
// exit ;
54282: POP
54283: POP
54284: GO 54290
// end ; end ;
54286: GO 54130
54288: POP
54289: POP
// end ;
54290: LD_VAR 0 3
54294: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54295: LD_INT 0
54297: PPUSH
54298: PPUSH
54299: PPUSH
// result := 0 ;
54300: LD_ADDR_VAR 0 3
54304: PUSH
54305: LD_INT 0
54307: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54308: LD_VAR 0 1
54312: PUSH
54313: LD_INT 0
54315: LESS
54316: PUSH
54317: LD_VAR 0 1
54321: PUSH
54322: LD_INT 8
54324: GREATER
54325: OR
54326: PUSH
54327: LD_VAR 0 2
54331: PUSH
54332: LD_INT 0
54334: LESS
54335: OR
54336: PUSH
54337: LD_VAR 0 2
54341: PUSH
54342: LD_INT 8
54344: GREATER
54345: OR
54346: IFFALSE 54350
// exit ;
54348: GO 54425
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54350: LD_ADDR_VAR 0 4
54354: PUSH
54355: LD_INT 22
54357: PUSH
54358: LD_VAR 0 2
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PPUSH
54367: CALL_OW 69
54371: PUSH
54372: FOR_IN
54373: IFFALSE 54423
// begin un := UnitShoot ( i ) ;
54375: LD_ADDR_VAR 0 5
54379: PUSH
54380: LD_VAR 0 4
54384: PPUSH
54385: CALL_OW 504
54389: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54390: LD_VAR 0 5
54394: PPUSH
54395: CALL_OW 255
54399: PUSH
54400: LD_VAR 0 1
54404: EQUAL
54405: IFFALSE 54421
// begin result := un ;
54407: LD_ADDR_VAR 0 3
54411: PUSH
54412: LD_VAR 0 5
54416: ST_TO_ADDR
// exit ;
54417: POP
54418: POP
54419: GO 54425
// end ; end ;
54421: GO 54372
54423: POP
54424: POP
// end ;
54425: LD_VAR 0 3
54429: RET
// export function GetCargoBay ( units ) ; begin
54430: LD_INT 0
54432: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54433: LD_ADDR_VAR 0 2
54437: PUSH
54438: LD_VAR 0 1
54442: PPUSH
54443: LD_INT 2
54445: PUSH
54446: LD_INT 34
54448: PUSH
54449: LD_INT 12
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 34
54458: PUSH
54459: LD_INT 51
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 34
54468: PUSH
54469: LD_INT 32
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 34
54478: PUSH
54479: LD_INT 89
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: PPUSH
54493: CALL_OW 72
54497: ST_TO_ADDR
// end ;
54498: LD_VAR 0 2
54502: RET
// export function Negate ( value ) ; begin
54503: LD_INT 0
54505: PPUSH
// result := not value ;
54506: LD_ADDR_VAR 0 2
54510: PUSH
54511: LD_VAR 0 1
54515: NOT
54516: ST_TO_ADDR
// end ;
54517: LD_VAR 0 2
54521: RET
// export function Inc ( value ) ; begin
54522: LD_INT 0
54524: PPUSH
// result := value + 1 ;
54525: LD_ADDR_VAR 0 2
54529: PUSH
54530: LD_VAR 0 1
54534: PUSH
54535: LD_INT 1
54537: PLUS
54538: ST_TO_ADDR
// end ;
54539: LD_VAR 0 2
54543: RET
// export function Dec ( value ) ; begin
54544: LD_INT 0
54546: PPUSH
// result := value - 1 ;
54547: LD_ADDR_VAR 0 2
54551: PUSH
54552: LD_VAR 0 1
54556: PUSH
54557: LD_INT 1
54559: MINUS
54560: ST_TO_ADDR
// end ;
54561: LD_VAR 0 2
54565: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54566: LD_INT 0
54568: PPUSH
54569: PPUSH
54570: PPUSH
54571: PPUSH
54572: PPUSH
54573: PPUSH
54574: PPUSH
54575: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54576: LD_VAR 0 1
54580: PPUSH
54581: LD_VAR 0 2
54585: PPUSH
54586: CALL_OW 488
54590: NOT
54591: PUSH
54592: LD_VAR 0 3
54596: PPUSH
54597: LD_VAR 0 4
54601: PPUSH
54602: CALL_OW 488
54606: NOT
54607: OR
54608: IFFALSE 54621
// begin result := - 1 ;
54610: LD_ADDR_VAR 0 5
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: ST_TO_ADDR
// exit ;
54619: GO 54856
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54621: LD_ADDR_VAR 0 12
54625: PUSH
54626: LD_VAR 0 1
54630: PPUSH
54631: LD_VAR 0 2
54635: PPUSH
54636: LD_VAR 0 3
54640: PPUSH
54641: LD_VAR 0 4
54645: PPUSH
54646: CALL 53706 0 4
54650: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54651: LD_ADDR_VAR 0 11
54655: PUSH
54656: LD_VAR 0 1
54660: PPUSH
54661: LD_VAR 0 2
54665: PPUSH
54666: LD_VAR 0 12
54670: PUSH
54671: LD_INT 1
54673: ARRAY
54674: PPUSH
54675: LD_VAR 0 12
54679: PUSH
54680: LD_INT 2
54682: ARRAY
54683: PPUSH
54684: CALL_OW 298
54688: ST_TO_ADDR
// distance := 9999 ;
54689: LD_ADDR_VAR 0 10
54693: PUSH
54694: LD_INT 9999
54696: ST_TO_ADDR
// for i := 0 to 5 do
54697: LD_ADDR_VAR 0 6
54701: PUSH
54702: DOUBLE
54703: LD_INT 0
54705: DEC
54706: ST_TO_ADDR
54707: LD_INT 5
54709: PUSH
54710: FOR_TO
54711: IFFALSE 54854
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54713: LD_ADDR_VAR 0 7
54717: PUSH
54718: LD_VAR 0 1
54722: PPUSH
54723: LD_VAR 0 6
54727: PPUSH
54728: LD_VAR 0 11
54732: PPUSH
54733: CALL_OW 272
54737: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54738: LD_ADDR_VAR 0 8
54742: PUSH
54743: LD_VAR 0 2
54747: PPUSH
54748: LD_VAR 0 6
54752: PPUSH
54753: LD_VAR 0 11
54757: PPUSH
54758: CALL_OW 273
54762: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54763: LD_VAR 0 7
54767: PPUSH
54768: LD_VAR 0 8
54772: PPUSH
54773: CALL_OW 488
54777: NOT
54778: IFFALSE 54782
// continue ;
54780: GO 54710
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54782: LD_ADDR_VAR 0 9
54786: PUSH
54787: LD_VAR 0 12
54791: PUSH
54792: LD_INT 1
54794: ARRAY
54795: PPUSH
54796: LD_VAR 0 12
54800: PUSH
54801: LD_INT 2
54803: ARRAY
54804: PPUSH
54805: LD_VAR 0 7
54809: PPUSH
54810: LD_VAR 0 8
54814: PPUSH
54815: CALL_OW 298
54819: ST_TO_ADDR
// if tmp < distance then
54820: LD_VAR 0 9
54824: PUSH
54825: LD_VAR 0 10
54829: LESS
54830: IFFALSE 54852
// begin result := i ;
54832: LD_ADDR_VAR 0 5
54836: PUSH
54837: LD_VAR 0 6
54841: ST_TO_ADDR
// distance := tmp ;
54842: LD_ADDR_VAR 0 10
54846: PUSH
54847: LD_VAR 0 9
54851: ST_TO_ADDR
// end ; end ;
54852: GO 54710
54854: POP
54855: POP
// end ;
54856: LD_VAR 0 5
54860: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54861: LD_INT 0
54863: PPUSH
54864: PPUSH
// if not driver or not IsInUnit ( driver ) then
54865: LD_VAR 0 1
54869: NOT
54870: PUSH
54871: LD_VAR 0 1
54875: PPUSH
54876: CALL_OW 310
54880: NOT
54881: OR
54882: IFFALSE 54886
// exit ;
54884: GO 54976
// vehicle := IsInUnit ( driver ) ;
54886: LD_ADDR_VAR 0 3
54890: PUSH
54891: LD_VAR 0 1
54895: PPUSH
54896: CALL_OW 310
54900: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54901: LD_VAR 0 1
54905: PPUSH
54906: LD_STRING \
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: PUSH
54936: LD_STRING E
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_VAR 0 3
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PPUSH
54972: CALL_OW 446
// end ;
54976: LD_VAR 0 2
54980: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54981: LD_INT 0
54983: PPUSH
54984: PPUSH
// if not driver or not IsInUnit ( driver ) then
54985: LD_VAR 0 1
54989: NOT
54990: PUSH
54991: LD_VAR 0 1
54995: PPUSH
54996: CALL_OW 310
55000: NOT
55001: OR
55002: IFFALSE 55006
// exit ;
55004: GO 55096
// vehicle := IsInUnit ( driver ) ;
55006: LD_ADDR_VAR 0 3
55010: PUSH
55011: LD_VAR 0 1
55015: PPUSH
55016: CALL_OW 310
55020: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55021: LD_VAR 0 1
55025: PPUSH
55026: LD_STRING \
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: PUSH
55056: LD_STRING E
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_VAR 0 3
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PPUSH
55092: CALL_OW 447
// end ;
55096: LD_VAR 0 2
55100: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55101: LD_INT 0
55103: PPUSH
55104: PPUSH
55105: PPUSH
// tmp := [ ] ;
55106: LD_ADDR_VAR 0 5
55110: PUSH
55111: EMPTY
55112: ST_TO_ADDR
// for i in units do
55113: LD_ADDR_VAR 0 4
55117: PUSH
55118: LD_VAR 0 1
55122: PUSH
55123: FOR_IN
55124: IFFALSE 55162
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55126: LD_ADDR_VAR 0 5
55130: PUSH
55131: LD_VAR 0 5
55135: PPUSH
55136: LD_VAR 0 5
55140: PUSH
55141: LD_INT 1
55143: PLUS
55144: PPUSH
55145: LD_VAR 0 4
55149: PPUSH
55150: CALL_OW 256
55154: PPUSH
55155: CALL_OW 2
55159: ST_TO_ADDR
55160: GO 55123
55162: POP
55163: POP
// if not tmp then
55164: LD_VAR 0 5
55168: NOT
55169: IFFALSE 55173
// exit ;
55171: GO 55221
// if asc then
55173: LD_VAR 0 2
55177: IFFALSE 55201
// result := SortListByListAsc ( units , tmp ) else
55179: LD_ADDR_VAR 0 3
55183: PUSH
55184: LD_VAR 0 1
55188: PPUSH
55189: LD_VAR 0 5
55193: PPUSH
55194: CALL_OW 76
55198: ST_TO_ADDR
55199: GO 55221
// result := SortListByListDesc ( units , tmp ) ;
55201: LD_ADDR_VAR 0 3
55205: PUSH
55206: LD_VAR 0 1
55210: PPUSH
55211: LD_VAR 0 5
55215: PPUSH
55216: CALL_OW 77
55220: ST_TO_ADDR
// end ;
55221: LD_VAR 0 3
55225: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55226: LD_INT 0
55228: PPUSH
55229: PPUSH
// task := GetTaskList ( mech ) ;
55230: LD_ADDR_VAR 0 4
55234: PUSH
55235: LD_VAR 0 1
55239: PPUSH
55240: CALL_OW 437
55244: ST_TO_ADDR
// if not task then
55245: LD_VAR 0 4
55249: NOT
55250: IFFALSE 55254
// exit ;
55252: GO 55296
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55254: LD_ADDR_VAR 0 3
55258: PUSH
55259: LD_VAR 0 4
55263: PUSH
55264: LD_INT 1
55266: ARRAY
55267: PUSH
55268: LD_INT 1
55270: ARRAY
55271: PUSH
55272: LD_STRING r
55274: EQUAL
55275: PUSH
55276: LD_VAR 0 4
55280: PUSH
55281: LD_INT 1
55283: ARRAY
55284: PUSH
55285: LD_INT 4
55287: ARRAY
55288: PUSH
55289: LD_VAR 0 2
55293: EQUAL
55294: AND
55295: ST_TO_ADDR
// end ;
55296: LD_VAR 0 3
55300: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55301: LD_INT 0
55303: PPUSH
// SetDir ( unit , d ) ;
55304: LD_VAR 0 1
55308: PPUSH
55309: LD_VAR 0 4
55313: PPUSH
55314: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55318: LD_VAR 0 1
55322: PPUSH
55323: LD_VAR 0 2
55327: PPUSH
55328: LD_VAR 0 3
55332: PPUSH
55333: LD_VAR 0 5
55337: PPUSH
55338: CALL_OW 48
// end ;
55342: LD_VAR 0 6
55346: RET
// export function ToNaturalNumber ( number ) ; begin
55347: LD_INT 0
55349: PPUSH
// result := number div 1 ;
55350: LD_ADDR_VAR 0 2
55354: PUSH
55355: LD_VAR 0 1
55359: PUSH
55360: LD_INT 1
55362: DIV
55363: ST_TO_ADDR
// if number < 0 then
55364: LD_VAR 0 1
55368: PUSH
55369: LD_INT 0
55371: LESS
55372: IFFALSE 55382
// result := 0 ;
55374: LD_ADDR_VAR 0 2
55378: PUSH
55379: LD_INT 0
55381: ST_TO_ADDR
// end ;
55382: LD_VAR 0 2
55386: RET
// export function SortByClass ( units , class ) ; var un ; begin
55387: LD_INT 0
55389: PPUSH
55390: PPUSH
// if not units or not class then
55391: LD_VAR 0 1
55395: NOT
55396: PUSH
55397: LD_VAR 0 2
55401: NOT
55402: OR
55403: IFFALSE 55407
// exit ;
55405: GO 55502
// result := [ ] ;
55407: LD_ADDR_VAR 0 3
55411: PUSH
55412: EMPTY
55413: ST_TO_ADDR
// for un in units do
55414: LD_ADDR_VAR 0 4
55418: PUSH
55419: LD_VAR 0 1
55423: PUSH
55424: FOR_IN
55425: IFFALSE 55500
// if GetClass ( un ) = class then
55427: LD_VAR 0 4
55431: PPUSH
55432: CALL_OW 257
55436: PUSH
55437: LD_VAR 0 2
55441: EQUAL
55442: IFFALSE 55469
// result := Insert ( result , 1 , un ) else
55444: LD_ADDR_VAR 0 3
55448: PUSH
55449: LD_VAR 0 3
55453: PPUSH
55454: LD_INT 1
55456: PPUSH
55457: LD_VAR 0 4
55461: PPUSH
55462: CALL_OW 2
55466: ST_TO_ADDR
55467: GO 55498
// result := Replace ( result , result + 1 , un ) ;
55469: LD_ADDR_VAR 0 3
55473: PUSH
55474: LD_VAR 0 3
55478: PPUSH
55479: LD_VAR 0 3
55483: PUSH
55484: LD_INT 1
55486: PLUS
55487: PPUSH
55488: LD_VAR 0 4
55492: PPUSH
55493: CALL_OW 1
55497: ST_TO_ADDR
55498: GO 55424
55500: POP
55501: POP
// end ;
55502: LD_VAR 0 3
55506: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55507: LD_INT 0
55509: PPUSH
55510: PPUSH
55511: PPUSH
55512: PPUSH
55513: PPUSH
55514: PPUSH
55515: PPUSH
// result := [ ] ;
55516: LD_ADDR_VAR 0 4
55520: PUSH
55521: EMPTY
55522: ST_TO_ADDR
// if x - r < 0 then
55523: LD_VAR 0 1
55527: PUSH
55528: LD_VAR 0 3
55532: MINUS
55533: PUSH
55534: LD_INT 0
55536: LESS
55537: IFFALSE 55549
// min_x := 0 else
55539: LD_ADDR_VAR 0 8
55543: PUSH
55544: LD_INT 0
55546: ST_TO_ADDR
55547: GO 55565
// min_x := x - r ;
55549: LD_ADDR_VAR 0 8
55553: PUSH
55554: LD_VAR 0 1
55558: PUSH
55559: LD_VAR 0 3
55563: MINUS
55564: ST_TO_ADDR
// if y - r < 0 then
55565: LD_VAR 0 2
55569: PUSH
55570: LD_VAR 0 3
55574: MINUS
55575: PUSH
55576: LD_INT 0
55578: LESS
55579: IFFALSE 55591
// min_y := 0 else
55581: LD_ADDR_VAR 0 7
55585: PUSH
55586: LD_INT 0
55588: ST_TO_ADDR
55589: GO 55607
// min_y := y - r ;
55591: LD_ADDR_VAR 0 7
55595: PUSH
55596: LD_VAR 0 2
55600: PUSH
55601: LD_VAR 0 3
55605: MINUS
55606: ST_TO_ADDR
// max_x := x + r ;
55607: LD_ADDR_VAR 0 9
55611: PUSH
55612: LD_VAR 0 1
55616: PUSH
55617: LD_VAR 0 3
55621: PLUS
55622: ST_TO_ADDR
// max_y := y + r ;
55623: LD_ADDR_VAR 0 10
55627: PUSH
55628: LD_VAR 0 2
55632: PUSH
55633: LD_VAR 0 3
55637: PLUS
55638: ST_TO_ADDR
// for _x = min_x to max_x do
55639: LD_ADDR_VAR 0 5
55643: PUSH
55644: DOUBLE
55645: LD_VAR 0 8
55649: DEC
55650: ST_TO_ADDR
55651: LD_VAR 0 9
55655: PUSH
55656: FOR_TO
55657: IFFALSE 55758
// for _y = min_y to max_y do
55659: LD_ADDR_VAR 0 6
55663: PUSH
55664: DOUBLE
55665: LD_VAR 0 7
55669: DEC
55670: ST_TO_ADDR
55671: LD_VAR 0 10
55675: PUSH
55676: FOR_TO
55677: IFFALSE 55754
// begin if not ValidHex ( _x , _y ) then
55679: LD_VAR 0 5
55683: PPUSH
55684: LD_VAR 0 6
55688: PPUSH
55689: CALL_OW 488
55693: NOT
55694: IFFALSE 55698
// continue ;
55696: GO 55676
// if GetResourceTypeXY ( _x , _y ) then
55698: LD_VAR 0 5
55702: PPUSH
55703: LD_VAR 0 6
55707: PPUSH
55708: CALL_OW 283
55712: IFFALSE 55752
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55714: LD_ADDR_VAR 0 4
55718: PUSH
55719: LD_VAR 0 4
55723: PPUSH
55724: LD_VAR 0 4
55728: PUSH
55729: LD_INT 1
55731: PLUS
55732: PPUSH
55733: LD_VAR 0 5
55737: PUSH
55738: LD_VAR 0 6
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PPUSH
55747: CALL_OW 1
55751: ST_TO_ADDR
// end ;
55752: GO 55676
55754: POP
55755: POP
55756: GO 55656
55758: POP
55759: POP
// end ;
55760: LD_VAR 0 4
55764: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55765: LD_INT 0
55767: PPUSH
55768: PPUSH
55769: PPUSH
55770: PPUSH
55771: PPUSH
55772: PPUSH
55773: PPUSH
55774: PPUSH
// if not units then
55775: LD_VAR 0 1
55779: NOT
55780: IFFALSE 55784
// exit ;
55782: GO 56308
// result := UnitFilter ( units , [ f_ok ] ) ;
55784: LD_ADDR_VAR 0 3
55788: PUSH
55789: LD_VAR 0 1
55793: PPUSH
55794: LD_INT 50
55796: PUSH
55797: EMPTY
55798: LIST
55799: PPUSH
55800: CALL_OW 72
55804: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55805: LD_ADDR_VAR 0 8
55809: PUSH
55810: LD_VAR 0 1
55814: PUSH
55815: LD_INT 1
55817: ARRAY
55818: PPUSH
55819: CALL_OW 255
55823: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55824: LD_ADDR_VAR 0 10
55828: PUSH
55829: LD_INT 29
55831: PUSH
55832: LD_INT 91
55834: PUSH
55835: LD_INT 49
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: LIST
55842: ST_TO_ADDR
// if not result then
55843: LD_VAR 0 3
55847: NOT
55848: IFFALSE 55852
// exit ;
55850: GO 56308
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55852: LD_ADDR_VAR 0 5
55856: PUSH
55857: LD_INT 81
55859: PUSH
55860: LD_VAR 0 8
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PPUSH
55869: CALL_OW 69
55873: ST_TO_ADDR
// for i in result do
55874: LD_ADDR_VAR 0 4
55878: PUSH
55879: LD_VAR 0 3
55883: PUSH
55884: FOR_IN
55885: IFFALSE 56306
// begin tag := GetTag ( i ) + 1 ;
55887: LD_ADDR_VAR 0 9
55891: PUSH
55892: LD_VAR 0 4
55896: PPUSH
55897: CALL_OW 110
55901: PUSH
55902: LD_INT 1
55904: PLUS
55905: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55906: LD_ADDR_VAR 0 7
55910: PUSH
55911: LD_VAR 0 4
55915: PPUSH
55916: CALL_OW 250
55920: PPUSH
55921: LD_VAR 0 4
55925: PPUSH
55926: CALL_OW 251
55930: PPUSH
55931: LD_INT 6
55933: PPUSH
55934: CALL 55507 0 3
55938: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55939: LD_VAR 0 4
55943: PPUSH
55944: CALL_OW 247
55948: PUSH
55949: LD_INT 2
55951: EQUAL
55952: PUSH
55953: LD_VAR 0 7
55957: AND
55958: PUSH
55959: LD_VAR 0 4
55963: PPUSH
55964: CALL_OW 264
55968: PUSH
55969: LD_VAR 0 10
55973: IN
55974: NOT
55975: AND
55976: IFFALSE 56015
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55978: LD_VAR 0 4
55982: PPUSH
55983: LD_VAR 0 7
55987: PUSH
55988: LD_INT 1
55990: ARRAY
55991: PUSH
55992: LD_INT 1
55994: ARRAY
55995: PPUSH
55996: LD_VAR 0 7
56000: PUSH
56001: LD_INT 1
56003: ARRAY
56004: PUSH
56005: LD_INT 2
56007: ARRAY
56008: PPUSH
56009: CALL_OW 116
56013: GO 56304
// if path > tag then
56015: LD_VAR 0 2
56019: PUSH
56020: LD_VAR 0 9
56024: GREATER
56025: IFFALSE 56233
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56027: LD_ADDR_VAR 0 6
56031: PUSH
56032: LD_VAR 0 5
56036: PPUSH
56037: LD_INT 91
56039: PUSH
56040: LD_VAR 0 4
56044: PUSH
56045: LD_INT 8
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: LIST
56052: PPUSH
56053: CALL_OW 72
56057: ST_TO_ADDR
// if nearEnemy then
56058: LD_VAR 0 6
56062: IFFALSE 56131
// begin if GetWeapon ( i ) = ru_time_lapser then
56064: LD_VAR 0 4
56068: PPUSH
56069: CALL_OW 264
56073: PUSH
56074: LD_INT 49
56076: EQUAL
56077: IFFALSE 56105
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56079: LD_VAR 0 4
56083: PPUSH
56084: LD_VAR 0 6
56088: PPUSH
56089: LD_VAR 0 4
56093: PPUSH
56094: CALL_OW 74
56098: PPUSH
56099: CALL_OW 112
56103: GO 56129
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56105: LD_VAR 0 4
56109: PPUSH
56110: LD_VAR 0 6
56114: PPUSH
56115: LD_VAR 0 4
56119: PPUSH
56120: CALL_OW 74
56124: PPUSH
56125: CALL 57233 0 2
// end else
56129: GO 56231
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56131: LD_VAR 0 4
56135: PPUSH
56136: LD_VAR 0 2
56140: PUSH
56141: LD_VAR 0 9
56145: ARRAY
56146: PUSH
56147: LD_INT 1
56149: ARRAY
56150: PPUSH
56151: LD_VAR 0 2
56155: PUSH
56156: LD_VAR 0 9
56160: ARRAY
56161: PUSH
56162: LD_INT 2
56164: ARRAY
56165: PPUSH
56166: CALL_OW 297
56170: PUSH
56171: LD_INT 6
56173: GREATER
56174: IFFALSE 56217
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56176: LD_VAR 0 4
56180: PPUSH
56181: LD_VAR 0 2
56185: PUSH
56186: LD_VAR 0 9
56190: ARRAY
56191: PUSH
56192: LD_INT 1
56194: ARRAY
56195: PPUSH
56196: LD_VAR 0 2
56200: PUSH
56201: LD_VAR 0 9
56205: ARRAY
56206: PUSH
56207: LD_INT 2
56209: ARRAY
56210: PPUSH
56211: CALL_OW 114
56215: GO 56231
// SetTag ( i , tag ) ;
56217: LD_VAR 0 4
56221: PPUSH
56222: LD_VAR 0 9
56226: PPUSH
56227: CALL_OW 109
// end else
56231: GO 56304
// if enemy then
56233: LD_VAR 0 5
56237: IFFALSE 56304
// begin if GetWeapon ( i ) = ru_time_lapser then
56239: LD_VAR 0 4
56243: PPUSH
56244: CALL_OW 264
56248: PUSH
56249: LD_INT 49
56251: EQUAL
56252: IFFALSE 56280
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56254: LD_VAR 0 4
56258: PPUSH
56259: LD_VAR 0 5
56263: PPUSH
56264: LD_VAR 0 4
56268: PPUSH
56269: CALL_OW 74
56273: PPUSH
56274: CALL_OW 112
56278: GO 56304
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56280: LD_VAR 0 4
56284: PPUSH
56285: LD_VAR 0 5
56289: PPUSH
56290: LD_VAR 0 4
56294: PPUSH
56295: CALL_OW 74
56299: PPUSH
56300: CALL 57233 0 2
// end ; end ;
56304: GO 55884
56306: POP
56307: POP
// end ;
56308: LD_VAR 0 3
56312: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56313: LD_INT 0
56315: PPUSH
56316: PPUSH
56317: PPUSH
// if not unit or IsInUnit ( unit ) then
56318: LD_VAR 0 1
56322: NOT
56323: PUSH
56324: LD_VAR 0 1
56328: PPUSH
56329: CALL_OW 310
56333: OR
56334: IFFALSE 56338
// exit ;
56336: GO 56429
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56338: LD_ADDR_VAR 0 4
56342: PUSH
56343: LD_VAR 0 1
56347: PPUSH
56348: CALL_OW 250
56352: PPUSH
56353: LD_VAR 0 2
56357: PPUSH
56358: LD_INT 1
56360: PPUSH
56361: CALL_OW 272
56365: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56366: LD_ADDR_VAR 0 5
56370: PUSH
56371: LD_VAR 0 1
56375: PPUSH
56376: CALL_OW 251
56380: PPUSH
56381: LD_VAR 0 2
56385: PPUSH
56386: LD_INT 1
56388: PPUSH
56389: CALL_OW 273
56393: ST_TO_ADDR
// if ValidHex ( x , y ) then
56394: LD_VAR 0 4
56398: PPUSH
56399: LD_VAR 0 5
56403: PPUSH
56404: CALL_OW 488
56408: IFFALSE 56429
// ComTurnXY ( unit , x , y ) ;
56410: LD_VAR 0 1
56414: PPUSH
56415: LD_VAR 0 4
56419: PPUSH
56420: LD_VAR 0 5
56424: PPUSH
56425: CALL_OW 118
// end ;
56429: LD_VAR 0 3
56433: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56434: LD_INT 0
56436: PPUSH
56437: PPUSH
// result := false ;
56438: LD_ADDR_VAR 0 3
56442: PUSH
56443: LD_INT 0
56445: ST_TO_ADDR
// if not units then
56446: LD_VAR 0 2
56450: NOT
56451: IFFALSE 56455
// exit ;
56453: GO 56500
// for i in units do
56455: LD_ADDR_VAR 0 4
56459: PUSH
56460: LD_VAR 0 2
56464: PUSH
56465: FOR_IN
56466: IFFALSE 56498
// if See ( side , i ) then
56468: LD_VAR 0 1
56472: PPUSH
56473: LD_VAR 0 4
56477: PPUSH
56478: CALL_OW 292
56482: IFFALSE 56496
// begin result := true ;
56484: LD_ADDR_VAR 0 3
56488: PUSH
56489: LD_INT 1
56491: ST_TO_ADDR
// exit ;
56492: POP
56493: POP
56494: GO 56500
// end ;
56496: GO 56465
56498: POP
56499: POP
// end ;
56500: LD_VAR 0 3
56504: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56505: LD_INT 0
56507: PPUSH
56508: PPUSH
56509: PPUSH
56510: PPUSH
// if not unit or not points then
56511: LD_VAR 0 1
56515: NOT
56516: PUSH
56517: LD_VAR 0 2
56521: NOT
56522: OR
56523: IFFALSE 56527
// exit ;
56525: GO 56617
// dist := 99999 ;
56527: LD_ADDR_VAR 0 5
56531: PUSH
56532: LD_INT 99999
56534: ST_TO_ADDR
// for i in points do
56535: LD_ADDR_VAR 0 4
56539: PUSH
56540: LD_VAR 0 2
56544: PUSH
56545: FOR_IN
56546: IFFALSE 56615
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56548: LD_ADDR_VAR 0 6
56552: PUSH
56553: LD_VAR 0 1
56557: PPUSH
56558: LD_VAR 0 4
56562: PUSH
56563: LD_INT 1
56565: ARRAY
56566: PPUSH
56567: LD_VAR 0 4
56571: PUSH
56572: LD_INT 2
56574: ARRAY
56575: PPUSH
56576: CALL_OW 297
56580: ST_TO_ADDR
// if tmpDist < dist then
56581: LD_VAR 0 6
56585: PUSH
56586: LD_VAR 0 5
56590: LESS
56591: IFFALSE 56613
// begin result := i ;
56593: LD_ADDR_VAR 0 3
56597: PUSH
56598: LD_VAR 0 4
56602: ST_TO_ADDR
// dist := tmpDist ;
56603: LD_ADDR_VAR 0 5
56607: PUSH
56608: LD_VAR 0 6
56612: ST_TO_ADDR
// end ; end ;
56613: GO 56545
56615: POP
56616: POP
// end ;
56617: LD_VAR 0 3
56621: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56622: LD_INT 0
56624: PPUSH
// uc_side := side ;
56625: LD_ADDR_OWVAR 20
56629: PUSH
56630: LD_VAR 0 1
56634: ST_TO_ADDR
// uc_nation := 3 ;
56635: LD_ADDR_OWVAR 21
56639: PUSH
56640: LD_INT 3
56642: ST_TO_ADDR
// vc_chassis := 25 ;
56643: LD_ADDR_OWVAR 37
56647: PUSH
56648: LD_INT 25
56650: ST_TO_ADDR
// vc_engine := engine_siberite ;
56651: LD_ADDR_OWVAR 39
56655: PUSH
56656: LD_INT 3
56658: ST_TO_ADDR
// vc_control := control_computer ;
56659: LD_ADDR_OWVAR 38
56663: PUSH
56664: LD_INT 3
56666: ST_TO_ADDR
// vc_weapon := 59 ;
56667: LD_ADDR_OWVAR 40
56671: PUSH
56672: LD_INT 59
56674: ST_TO_ADDR
// result := CreateVehicle ;
56675: LD_ADDR_VAR 0 5
56679: PUSH
56680: CALL_OW 45
56684: ST_TO_ADDR
// SetDir ( result , d ) ;
56685: LD_VAR 0 5
56689: PPUSH
56690: LD_VAR 0 4
56694: PPUSH
56695: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56699: LD_VAR 0 5
56703: PPUSH
56704: LD_VAR 0 2
56708: PPUSH
56709: LD_VAR 0 3
56713: PPUSH
56714: LD_INT 0
56716: PPUSH
56717: CALL_OW 48
// end ;
56721: LD_VAR 0 5
56725: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56726: LD_INT 0
56728: PPUSH
56729: PPUSH
56730: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56731: LD_ADDR_VAR 0 2
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56754: LD_VAR 0 1
56758: NOT
56759: PUSH
56760: LD_VAR 0 1
56764: PPUSH
56765: CALL_OW 264
56769: PUSH
56770: LD_INT 12
56772: PUSH
56773: LD_INT 51
56775: PUSH
56776: LD_INT 32
56778: PUSH
56779: LD_INT 89
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: IN
56788: NOT
56789: OR
56790: IFFALSE 56794
// exit ;
56792: GO 56892
// for i := 1 to 3 do
56794: LD_ADDR_VAR 0 3
56798: PUSH
56799: DOUBLE
56800: LD_INT 1
56802: DEC
56803: ST_TO_ADDR
56804: LD_INT 3
56806: PUSH
56807: FOR_TO
56808: IFFALSE 56890
// begin tmp := GetCargo ( cargo , i ) ;
56810: LD_ADDR_VAR 0 4
56814: PUSH
56815: LD_VAR 0 1
56819: PPUSH
56820: LD_VAR 0 3
56824: PPUSH
56825: CALL_OW 289
56829: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56830: LD_ADDR_VAR 0 2
56834: PUSH
56835: LD_VAR 0 2
56839: PPUSH
56840: LD_VAR 0 3
56844: PPUSH
56845: LD_VAR 0 4
56849: PPUSH
56850: CALL_OW 1
56854: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56855: LD_ADDR_VAR 0 2
56859: PUSH
56860: LD_VAR 0 2
56864: PPUSH
56865: LD_INT 4
56867: PPUSH
56868: LD_VAR 0 2
56872: PUSH
56873: LD_INT 4
56875: ARRAY
56876: PUSH
56877: LD_VAR 0 4
56881: PLUS
56882: PPUSH
56883: CALL_OW 1
56887: ST_TO_ADDR
// end ;
56888: GO 56807
56890: POP
56891: POP
// end ;
56892: LD_VAR 0 2
56896: RET
// export function Length ( array ) ; begin
56897: LD_INT 0
56899: PPUSH
// result := array + 0 ;
56900: LD_ADDR_VAR 0 2
56904: PUSH
56905: LD_VAR 0 1
56909: PUSH
56910: LD_INT 0
56912: PLUS
56913: ST_TO_ADDR
// end ;
56914: LD_VAR 0 2
56918: RET
// export function PrepareArray ( array ) ; begin
56919: LD_INT 0
56921: PPUSH
// result := array diff 0 ;
56922: LD_ADDR_VAR 0 2
56926: PUSH
56927: LD_VAR 0 1
56931: PUSH
56932: LD_INT 0
56934: DIFF
56935: ST_TO_ADDR
// if not result [ 1 ] then
56936: LD_VAR 0 2
56940: PUSH
56941: LD_INT 1
56943: ARRAY
56944: NOT
56945: IFFALSE 56965
// result := Delete ( result , 1 ) ;
56947: LD_ADDR_VAR 0 2
56951: PUSH
56952: LD_VAR 0 2
56956: PPUSH
56957: LD_INT 1
56959: PPUSH
56960: CALL_OW 3
56964: ST_TO_ADDR
// end ;
56965: LD_VAR 0 2
56969: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56970: LD_INT 0
56972: PPUSH
56973: PPUSH
56974: PPUSH
56975: PPUSH
// sibRocketRange := 25 ;
56976: LD_ADDR_VAR 0 6
56980: PUSH
56981: LD_INT 25
56983: ST_TO_ADDR
// result := false ;
56984: LD_ADDR_VAR 0 4
56988: PUSH
56989: LD_INT 0
56991: ST_TO_ADDR
// for i := 0 to 5 do
56992: LD_ADDR_VAR 0 5
56996: PUSH
56997: DOUBLE
56998: LD_INT 0
57000: DEC
57001: ST_TO_ADDR
57002: LD_INT 5
57004: PUSH
57005: FOR_TO
57006: IFFALSE 57073
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57008: LD_VAR 0 1
57012: PPUSH
57013: LD_VAR 0 5
57017: PPUSH
57018: LD_VAR 0 6
57022: PPUSH
57023: CALL_OW 272
57027: PPUSH
57028: LD_VAR 0 2
57032: PPUSH
57033: LD_VAR 0 5
57037: PPUSH
57038: LD_VAR 0 6
57042: PPUSH
57043: CALL_OW 273
57047: PPUSH
57048: LD_VAR 0 3
57052: PPUSH
57053: CALL_OW 309
57057: IFFALSE 57071
// begin result := true ;
57059: LD_ADDR_VAR 0 4
57063: PUSH
57064: LD_INT 1
57066: ST_TO_ADDR
// exit ;
57067: POP
57068: POP
57069: GO 57075
// end ;
57071: GO 57005
57073: POP
57074: POP
// end ;
57075: LD_VAR 0 4
57079: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57080: LD_INT 0
57082: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57083: LD_VAR 0 1
57087: PPUSH
57088: LD_VAR 0 2
57092: PPUSH
57093: LD_INT 0
57095: PPUSH
57096: LD_INT 0
57098: PPUSH
57099: LD_INT 1
57101: PPUSH
57102: LD_INT 0
57104: PPUSH
57105: CALL_OW 587
// end ;
57109: LD_VAR 0 3
57113: RET
// export function CenterOnNow ( unit ) ; begin
57114: LD_INT 0
57116: PPUSH
// result := IsInUnit ( unit ) ;
57117: LD_ADDR_VAR 0 2
57121: PUSH
57122: LD_VAR 0 1
57126: PPUSH
57127: CALL_OW 310
57131: ST_TO_ADDR
// if not result then
57132: LD_VAR 0 2
57136: NOT
57137: IFFALSE 57149
// result := unit ;
57139: LD_ADDR_VAR 0 2
57143: PUSH
57144: LD_VAR 0 1
57148: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57149: LD_VAR 0 1
57153: PPUSH
57154: CALL_OW 87
// end ;
57158: LD_VAR 0 2
57162: RET
// export function ComMoveHex ( unit , hex ) ; begin
57163: LD_INT 0
57165: PPUSH
// if not hex then
57166: LD_VAR 0 2
57170: NOT
57171: IFFALSE 57175
// exit ;
57173: GO 57228
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57175: LD_VAR 0 2
57179: PUSH
57180: LD_INT 1
57182: ARRAY
57183: PPUSH
57184: LD_VAR 0 2
57188: PUSH
57189: LD_INT 2
57191: ARRAY
57192: PPUSH
57193: CALL_OW 428
57197: IFFALSE 57201
// exit ;
57199: GO 57228
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57201: LD_VAR 0 1
57205: PPUSH
57206: LD_VAR 0 2
57210: PUSH
57211: LD_INT 1
57213: ARRAY
57214: PPUSH
57215: LD_VAR 0 2
57219: PUSH
57220: LD_INT 2
57222: ARRAY
57223: PPUSH
57224: CALL_OW 111
// end ;
57228: LD_VAR 0 3
57232: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57233: LD_INT 0
57235: PPUSH
57236: PPUSH
57237: PPUSH
// if not unit or not enemy then
57238: LD_VAR 0 1
57242: NOT
57243: PUSH
57244: LD_VAR 0 2
57248: NOT
57249: OR
57250: IFFALSE 57254
// exit ;
57252: GO 57378
// x := GetX ( enemy ) ;
57254: LD_ADDR_VAR 0 4
57258: PUSH
57259: LD_VAR 0 2
57263: PPUSH
57264: CALL_OW 250
57268: ST_TO_ADDR
// y := GetY ( enemy ) ;
57269: LD_ADDR_VAR 0 5
57273: PUSH
57274: LD_VAR 0 2
57278: PPUSH
57279: CALL_OW 251
57283: ST_TO_ADDR
// if ValidHex ( x , y ) then
57284: LD_VAR 0 4
57288: PPUSH
57289: LD_VAR 0 5
57293: PPUSH
57294: CALL_OW 488
57298: IFFALSE 57378
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
57300: LD_VAR 0 2
57304: PPUSH
57305: CALL_OW 247
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: IN
57320: PUSH
57321: LD_VAR 0 1
57325: PPUSH
57326: CALL_OW 255
57330: PPUSH
57331: LD_VAR 0 2
57335: PPUSH
57336: CALL_OW 292
57340: AND
57341: IFFALSE 57359
// ComAttackUnit ( unit , enemy ) else
57343: LD_VAR 0 1
57347: PPUSH
57348: LD_VAR 0 2
57352: PPUSH
57353: CALL_OW 115
57357: GO 57378
// ComAgressiveMove ( unit , x , y ) ;
57359: LD_VAR 0 1
57363: PPUSH
57364: LD_VAR 0 4
57368: PPUSH
57369: LD_VAR 0 5
57373: PPUSH
57374: CALL_OW 114
// end ; end_of_file end_of_file
57378: LD_VAR 0 3
57382: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
57383: LD_VAR 0 1
57387: PPUSH
57388: LD_VAR 0 2
57392: PPUSH
57393: LD_VAR 0 3
57397: PPUSH
57398: LD_VAR 0 4
57402: PPUSH
57403: LD_VAR 0 5
57407: PPUSH
57408: LD_VAR 0 6
57412: PPUSH
57413: CALL 57597 0 6
// end ;
57417: PPOPN 6
57419: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
57420: LD_INT 0
57422: PPUSH
// begin if not units then
57423: LD_VAR 0 1
57427: NOT
57428: IFFALSE 57432
// exit ;
57430: GO 57432
// end ;
57432: PPOPN 7
57434: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
57435: CALL 57501 0 0
// end ; end_of_file
57439: PPOPN 1
57441: END
// export globalGameSaveCounter ; every 0 0$1 do
57442: GO 57444
57444: DISABLE
// begin enable ;
57445: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57446: LD_STRING updateTimer(
57448: PUSH
57449: LD_OWVAR 1
57453: STR
57454: PUSH
57455: LD_STRING );
57457: STR
57458: PPUSH
57459: CALL_OW 559
// end ;
57463: END
// every 0 0$1 do
57464: GO 57466
57466: DISABLE
// begin globalGameSaveCounter := 0 ;
57467: LD_ADDR_EXP 37
57471: PUSH
57472: LD_INT 0
57474: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
57475: LD_STRING setGameSaveCounter(0)
57477: PPUSH
57478: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
57482: LD_STRING initStreamRollete();
57484: PPUSH
57485: CALL_OW 559
// InitStreamMode ;
57489: CALL 58815 0 0
// DefineStreamItems ( false ) ;
57493: LD_INT 0
57495: PPUSH
57496: CALL 59279 0 1
// end ;
57500: END
// export function SOS_MapStart ( ) ; begin
57501: LD_INT 0
57503: PPUSH
// if streamModeActive then
57504: LD_EXP 38
57508: IFFALSE 57517
// DefineStreamItems ( true ) ;
57510: LD_INT 1
57512: PPUSH
57513: CALL 59279 0 1
// UpdateLuaVariables ( ) ;
57517: CALL 57534 0 0
// UpdateFactoryWaypoints ( ) ;
57521: CALL 72148 0 0
// UpdateWarehouseGatheringPoints ( ) ;
57525: CALL 72405 0 0
// end ;
57529: LD_VAR 0 1
57533: RET
// function UpdateLuaVariables ( ) ; begin
57534: LD_INT 0
57536: PPUSH
// if globalGameSaveCounter then
57537: LD_EXP 37
57541: IFFALSE 57575
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
57543: LD_ADDR_EXP 37
57547: PUSH
57548: LD_EXP 37
57552: PPUSH
57553: CALL 54522 0 1
57557: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
57558: LD_STRING setGameSaveCounter(
57560: PUSH
57561: LD_EXP 37
57565: STR
57566: PUSH
57567: LD_STRING )
57569: STR
57570: PPUSH
57571: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
57575: LD_STRING setGameDifficulty(
57577: PUSH
57578: LD_OWVAR 67
57582: STR
57583: PUSH
57584: LD_STRING )
57586: STR
57587: PPUSH
57588: CALL_OW 559
// end ;
57592: LD_VAR 0 1
57596: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57597: LD_INT 0
57599: PPUSH
// if p2 = stream_mode then
57600: LD_VAR 0 2
57604: PUSH
57605: LD_INT 100
57607: EQUAL
57608: IFFALSE 58611
// begin if not StreamModeActive then
57610: LD_EXP 38
57614: NOT
57615: IFFALSE 57625
// StreamModeActive := true ;
57617: LD_ADDR_EXP 38
57621: PUSH
57622: LD_INT 1
57624: ST_TO_ADDR
// if p3 = 0 then
57625: LD_VAR 0 3
57629: PUSH
57630: LD_INT 0
57632: EQUAL
57633: IFFALSE 57639
// InitStreamMode ;
57635: CALL 58815 0 0
// if p3 = 1 then
57639: LD_VAR 0 3
57643: PUSH
57644: LD_INT 1
57646: EQUAL
57647: IFFALSE 57657
// sRocket := true ;
57649: LD_ADDR_EXP 43
57653: PUSH
57654: LD_INT 1
57656: ST_TO_ADDR
// if p3 = 2 then
57657: LD_VAR 0 3
57661: PUSH
57662: LD_INT 2
57664: EQUAL
57665: IFFALSE 57675
// sSpeed := true ;
57667: LD_ADDR_EXP 42
57671: PUSH
57672: LD_INT 1
57674: ST_TO_ADDR
// if p3 = 3 then
57675: LD_VAR 0 3
57679: PUSH
57680: LD_INT 3
57682: EQUAL
57683: IFFALSE 57693
// sEngine := true ;
57685: LD_ADDR_EXP 44
57689: PUSH
57690: LD_INT 1
57692: ST_TO_ADDR
// if p3 = 4 then
57693: LD_VAR 0 3
57697: PUSH
57698: LD_INT 4
57700: EQUAL
57701: IFFALSE 57711
// sSpec := true ;
57703: LD_ADDR_EXP 41
57707: PUSH
57708: LD_INT 1
57710: ST_TO_ADDR
// if p3 = 5 then
57711: LD_VAR 0 3
57715: PUSH
57716: LD_INT 5
57718: EQUAL
57719: IFFALSE 57729
// sLevel := true ;
57721: LD_ADDR_EXP 45
57725: PUSH
57726: LD_INT 1
57728: ST_TO_ADDR
// if p3 = 6 then
57729: LD_VAR 0 3
57733: PUSH
57734: LD_INT 6
57736: EQUAL
57737: IFFALSE 57747
// sArmoury := true ;
57739: LD_ADDR_EXP 46
57743: PUSH
57744: LD_INT 1
57746: ST_TO_ADDR
// if p3 = 7 then
57747: LD_VAR 0 3
57751: PUSH
57752: LD_INT 7
57754: EQUAL
57755: IFFALSE 57765
// sRadar := true ;
57757: LD_ADDR_EXP 47
57761: PUSH
57762: LD_INT 1
57764: ST_TO_ADDR
// if p3 = 8 then
57765: LD_VAR 0 3
57769: PUSH
57770: LD_INT 8
57772: EQUAL
57773: IFFALSE 57783
// sBunker := true ;
57775: LD_ADDR_EXP 48
57779: PUSH
57780: LD_INT 1
57782: ST_TO_ADDR
// if p3 = 9 then
57783: LD_VAR 0 3
57787: PUSH
57788: LD_INT 9
57790: EQUAL
57791: IFFALSE 57801
// sHack := true ;
57793: LD_ADDR_EXP 49
57797: PUSH
57798: LD_INT 1
57800: ST_TO_ADDR
// if p3 = 10 then
57801: LD_VAR 0 3
57805: PUSH
57806: LD_INT 10
57808: EQUAL
57809: IFFALSE 57819
// sFire := true ;
57811: LD_ADDR_EXP 50
57815: PUSH
57816: LD_INT 1
57818: ST_TO_ADDR
// if p3 = 11 then
57819: LD_VAR 0 3
57823: PUSH
57824: LD_INT 11
57826: EQUAL
57827: IFFALSE 57837
// sRefresh := true ;
57829: LD_ADDR_EXP 51
57833: PUSH
57834: LD_INT 1
57836: ST_TO_ADDR
// if p3 = 12 then
57837: LD_VAR 0 3
57841: PUSH
57842: LD_INT 12
57844: EQUAL
57845: IFFALSE 57855
// sExp := true ;
57847: LD_ADDR_EXP 52
57851: PUSH
57852: LD_INT 1
57854: ST_TO_ADDR
// if p3 = 13 then
57855: LD_VAR 0 3
57859: PUSH
57860: LD_INT 13
57862: EQUAL
57863: IFFALSE 57873
// sDepot := true ;
57865: LD_ADDR_EXP 53
57869: PUSH
57870: LD_INT 1
57872: ST_TO_ADDR
// if p3 = 14 then
57873: LD_VAR 0 3
57877: PUSH
57878: LD_INT 14
57880: EQUAL
57881: IFFALSE 57891
// sFlag := true ;
57883: LD_ADDR_EXP 54
57887: PUSH
57888: LD_INT 1
57890: ST_TO_ADDR
// if p3 = 15 then
57891: LD_VAR 0 3
57895: PUSH
57896: LD_INT 15
57898: EQUAL
57899: IFFALSE 57909
// sKamikadze := true ;
57901: LD_ADDR_EXP 62
57905: PUSH
57906: LD_INT 1
57908: ST_TO_ADDR
// if p3 = 16 then
57909: LD_VAR 0 3
57913: PUSH
57914: LD_INT 16
57916: EQUAL
57917: IFFALSE 57927
// sTroll := true ;
57919: LD_ADDR_EXP 63
57923: PUSH
57924: LD_INT 1
57926: ST_TO_ADDR
// if p3 = 17 then
57927: LD_VAR 0 3
57931: PUSH
57932: LD_INT 17
57934: EQUAL
57935: IFFALSE 57945
// sSlow := true ;
57937: LD_ADDR_EXP 64
57941: PUSH
57942: LD_INT 1
57944: ST_TO_ADDR
// if p3 = 18 then
57945: LD_VAR 0 3
57949: PUSH
57950: LD_INT 18
57952: EQUAL
57953: IFFALSE 57963
// sLack := true ;
57955: LD_ADDR_EXP 65
57959: PUSH
57960: LD_INT 1
57962: ST_TO_ADDR
// if p3 = 19 then
57963: LD_VAR 0 3
57967: PUSH
57968: LD_INT 19
57970: EQUAL
57971: IFFALSE 57981
// sTank := true ;
57973: LD_ADDR_EXP 67
57977: PUSH
57978: LD_INT 1
57980: ST_TO_ADDR
// if p3 = 20 then
57981: LD_VAR 0 3
57985: PUSH
57986: LD_INT 20
57988: EQUAL
57989: IFFALSE 57999
// sRemote := true ;
57991: LD_ADDR_EXP 68
57995: PUSH
57996: LD_INT 1
57998: ST_TO_ADDR
// if p3 = 21 then
57999: LD_VAR 0 3
58003: PUSH
58004: LD_INT 21
58006: EQUAL
58007: IFFALSE 58017
// sPowell := true ;
58009: LD_ADDR_EXP 69
58013: PUSH
58014: LD_INT 1
58016: ST_TO_ADDR
// if p3 = 22 then
58017: LD_VAR 0 3
58021: PUSH
58022: LD_INT 22
58024: EQUAL
58025: IFFALSE 58035
// sTeleport := true ;
58027: LD_ADDR_EXP 72
58031: PUSH
58032: LD_INT 1
58034: ST_TO_ADDR
// if p3 = 23 then
58035: LD_VAR 0 3
58039: PUSH
58040: LD_INT 23
58042: EQUAL
58043: IFFALSE 58053
// sOilTower := true ;
58045: LD_ADDR_EXP 74
58049: PUSH
58050: LD_INT 1
58052: ST_TO_ADDR
// if p3 = 24 then
58053: LD_VAR 0 3
58057: PUSH
58058: LD_INT 24
58060: EQUAL
58061: IFFALSE 58071
// sShovel := true ;
58063: LD_ADDR_EXP 75
58067: PUSH
58068: LD_INT 1
58070: ST_TO_ADDR
// if p3 = 25 then
58071: LD_VAR 0 3
58075: PUSH
58076: LD_INT 25
58078: EQUAL
58079: IFFALSE 58089
// sSheik := true ;
58081: LD_ADDR_EXP 76
58085: PUSH
58086: LD_INT 1
58088: ST_TO_ADDR
// if p3 = 26 then
58089: LD_VAR 0 3
58093: PUSH
58094: LD_INT 26
58096: EQUAL
58097: IFFALSE 58107
// sEarthquake := true ;
58099: LD_ADDR_EXP 78
58103: PUSH
58104: LD_INT 1
58106: ST_TO_ADDR
// if p3 = 27 then
58107: LD_VAR 0 3
58111: PUSH
58112: LD_INT 27
58114: EQUAL
58115: IFFALSE 58125
// sAI := true ;
58117: LD_ADDR_EXP 79
58121: PUSH
58122: LD_INT 1
58124: ST_TO_ADDR
// if p3 = 28 then
58125: LD_VAR 0 3
58129: PUSH
58130: LD_INT 28
58132: EQUAL
58133: IFFALSE 58143
// sCargo := true ;
58135: LD_ADDR_EXP 82
58139: PUSH
58140: LD_INT 1
58142: ST_TO_ADDR
// if p3 = 29 then
58143: LD_VAR 0 3
58147: PUSH
58148: LD_INT 29
58150: EQUAL
58151: IFFALSE 58161
// sDLaser := true ;
58153: LD_ADDR_EXP 83
58157: PUSH
58158: LD_INT 1
58160: ST_TO_ADDR
// if p3 = 30 then
58161: LD_VAR 0 3
58165: PUSH
58166: LD_INT 30
58168: EQUAL
58169: IFFALSE 58179
// sExchange := true ;
58171: LD_ADDR_EXP 84
58175: PUSH
58176: LD_INT 1
58178: ST_TO_ADDR
// if p3 = 31 then
58179: LD_VAR 0 3
58183: PUSH
58184: LD_INT 31
58186: EQUAL
58187: IFFALSE 58197
// sFac := true ;
58189: LD_ADDR_EXP 85
58193: PUSH
58194: LD_INT 1
58196: ST_TO_ADDR
// if p3 = 32 then
58197: LD_VAR 0 3
58201: PUSH
58202: LD_INT 32
58204: EQUAL
58205: IFFALSE 58215
// sPower := true ;
58207: LD_ADDR_EXP 86
58211: PUSH
58212: LD_INT 1
58214: ST_TO_ADDR
// if p3 = 33 then
58215: LD_VAR 0 3
58219: PUSH
58220: LD_INT 33
58222: EQUAL
58223: IFFALSE 58233
// sRandom := true ;
58225: LD_ADDR_EXP 87
58229: PUSH
58230: LD_INT 1
58232: ST_TO_ADDR
// if p3 = 34 then
58233: LD_VAR 0 3
58237: PUSH
58238: LD_INT 34
58240: EQUAL
58241: IFFALSE 58251
// sShield := true ;
58243: LD_ADDR_EXP 88
58247: PUSH
58248: LD_INT 1
58250: ST_TO_ADDR
// if p3 = 35 then
58251: LD_VAR 0 3
58255: PUSH
58256: LD_INT 35
58258: EQUAL
58259: IFFALSE 58269
// sTime := true ;
58261: LD_ADDR_EXP 89
58265: PUSH
58266: LD_INT 1
58268: ST_TO_ADDR
// if p3 = 36 then
58269: LD_VAR 0 3
58273: PUSH
58274: LD_INT 36
58276: EQUAL
58277: IFFALSE 58287
// sTools := true ;
58279: LD_ADDR_EXP 90
58283: PUSH
58284: LD_INT 1
58286: ST_TO_ADDR
// if p3 = 101 then
58287: LD_VAR 0 3
58291: PUSH
58292: LD_INT 101
58294: EQUAL
58295: IFFALSE 58305
// sSold := true ;
58297: LD_ADDR_EXP 55
58301: PUSH
58302: LD_INT 1
58304: ST_TO_ADDR
// if p3 = 102 then
58305: LD_VAR 0 3
58309: PUSH
58310: LD_INT 102
58312: EQUAL
58313: IFFALSE 58323
// sDiff := true ;
58315: LD_ADDR_EXP 56
58319: PUSH
58320: LD_INT 1
58322: ST_TO_ADDR
// if p3 = 103 then
58323: LD_VAR 0 3
58327: PUSH
58328: LD_INT 103
58330: EQUAL
58331: IFFALSE 58341
// sFog := true ;
58333: LD_ADDR_EXP 59
58337: PUSH
58338: LD_INT 1
58340: ST_TO_ADDR
// if p3 = 104 then
58341: LD_VAR 0 3
58345: PUSH
58346: LD_INT 104
58348: EQUAL
58349: IFFALSE 58359
// sReset := true ;
58351: LD_ADDR_EXP 60
58355: PUSH
58356: LD_INT 1
58358: ST_TO_ADDR
// if p3 = 105 then
58359: LD_VAR 0 3
58363: PUSH
58364: LD_INT 105
58366: EQUAL
58367: IFFALSE 58377
// sSun := true ;
58369: LD_ADDR_EXP 61
58373: PUSH
58374: LD_INT 1
58376: ST_TO_ADDR
// if p3 = 106 then
58377: LD_VAR 0 3
58381: PUSH
58382: LD_INT 106
58384: EQUAL
58385: IFFALSE 58395
// sTiger := true ;
58387: LD_ADDR_EXP 57
58391: PUSH
58392: LD_INT 1
58394: ST_TO_ADDR
// if p3 = 107 then
58395: LD_VAR 0 3
58399: PUSH
58400: LD_INT 107
58402: EQUAL
58403: IFFALSE 58413
// sBomb := true ;
58405: LD_ADDR_EXP 58
58409: PUSH
58410: LD_INT 1
58412: ST_TO_ADDR
// if p3 = 108 then
58413: LD_VAR 0 3
58417: PUSH
58418: LD_INT 108
58420: EQUAL
58421: IFFALSE 58431
// sWound := true ;
58423: LD_ADDR_EXP 66
58427: PUSH
58428: LD_INT 1
58430: ST_TO_ADDR
// if p3 = 109 then
58431: LD_VAR 0 3
58435: PUSH
58436: LD_INT 109
58438: EQUAL
58439: IFFALSE 58449
// sBetray := true ;
58441: LD_ADDR_EXP 70
58445: PUSH
58446: LD_INT 1
58448: ST_TO_ADDR
// if p3 = 110 then
58449: LD_VAR 0 3
58453: PUSH
58454: LD_INT 110
58456: EQUAL
58457: IFFALSE 58467
// sContamin := true ;
58459: LD_ADDR_EXP 71
58463: PUSH
58464: LD_INT 1
58466: ST_TO_ADDR
// if p3 = 111 then
58467: LD_VAR 0 3
58471: PUSH
58472: LD_INT 111
58474: EQUAL
58475: IFFALSE 58485
// sOil := true ;
58477: LD_ADDR_EXP 73
58481: PUSH
58482: LD_INT 1
58484: ST_TO_ADDR
// if p3 = 112 then
58485: LD_VAR 0 3
58489: PUSH
58490: LD_INT 112
58492: EQUAL
58493: IFFALSE 58503
// sStu := true ;
58495: LD_ADDR_EXP 77
58499: PUSH
58500: LD_INT 1
58502: ST_TO_ADDR
// if p3 = 113 then
58503: LD_VAR 0 3
58507: PUSH
58508: LD_INT 113
58510: EQUAL
58511: IFFALSE 58521
// sBazooka := true ;
58513: LD_ADDR_EXP 80
58517: PUSH
58518: LD_INT 1
58520: ST_TO_ADDR
// if p3 = 114 then
58521: LD_VAR 0 3
58525: PUSH
58526: LD_INT 114
58528: EQUAL
58529: IFFALSE 58539
// sMortar := true ;
58531: LD_ADDR_EXP 81
58535: PUSH
58536: LD_INT 1
58538: ST_TO_ADDR
// if p3 = 115 then
58539: LD_VAR 0 3
58543: PUSH
58544: LD_INT 115
58546: EQUAL
58547: IFFALSE 58557
// sRanger := true ;
58549: LD_ADDR_EXP 91
58553: PUSH
58554: LD_INT 1
58556: ST_TO_ADDR
// if p3 = 116 then
58557: LD_VAR 0 3
58561: PUSH
58562: LD_INT 116
58564: EQUAL
58565: IFFALSE 58575
// sComputer := true ;
58567: LD_ADDR_EXP 92
58571: PUSH
58572: LD_INT 1
58574: ST_TO_ADDR
// if p3 = 117 then
58575: LD_VAR 0 3
58579: PUSH
58580: LD_INT 117
58582: EQUAL
58583: IFFALSE 58593
// s30 := true ;
58585: LD_ADDR_EXP 93
58589: PUSH
58590: LD_INT 1
58592: ST_TO_ADDR
// if p3 = 118 then
58593: LD_VAR 0 3
58597: PUSH
58598: LD_INT 118
58600: EQUAL
58601: IFFALSE 58611
// s60 := true ;
58603: LD_ADDR_EXP 94
58607: PUSH
58608: LD_INT 1
58610: ST_TO_ADDR
// end ; if p2 = hack_mode then
58611: LD_VAR 0 2
58615: PUSH
58616: LD_INT 101
58618: EQUAL
58619: IFFALSE 58747
// begin case p3 of 1 :
58621: LD_VAR 0 3
58625: PUSH
58626: LD_INT 1
58628: DOUBLE
58629: EQUAL
58630: IFTRUE 58634
58632: GO 58641
58634: POP
// hHackUnlimitedResources ; 2 :
58635: CALL 70894 0 0
58639: GO 58747
58641: LD_INT 2
58643: DOUBLE
58644: EQUAL
58645: IFTRUE 58649
58647: GO 58656
58649: POP
// hHackSetLevel10 ; 3 :
58650: CALL 71027 0 0
58654: GO 58747
58656: LD_INT 3
58658: DOUBLE
58659: EQUAL
58660: IFTRUE 58664
58662: GO 58671
58664: POP
// hHackSetLevel10YourUnits ; 4 :
58665: CALL 71112 0 0
58669: GO 58747
58671: LD_INT 4
58673: DOUBLE
58674: EQUAL
58675: IFTRUE 58679
58677: GO 58686
58679: POP
// hHackInvincible ; 5 :
58680: CALL 71560 0 0
58684: GO 58747
58686: LD_INT 5
58688: DOUBLE
58689: EQUAL
58690: IFTRUE 58694
58692: GO 58701
58694: POP
// hHackInvisible ; 6 :
58695: CALL 71671 0 0
58699: GO 58747
58701: LD_INT 6
58703: DOUBLE
58704: EQUAL
58705: IFTRUE 58709
58707: GO 58716
58709: POP
// hHackChangeYourSide ; 7 :
58710: CALL 71728 0 0
58714: GO 58747
58716: LD_INT 7
58718: DOUBLE
58719: EQUAL
58720: IFTRUE 58724
58722: GO 58731
58724: POP
// hHackChangeUnitSide ; 8 :
58725: CALL 71770 0 0
58729: GO 58747
58731: LD_INT 8
58733: DOUBLE
58734: EQUAL
58735: IFTRUE 58739
58737: GO 58746
58739: POP
// hHackFog ; end ;
58740: CALL 71871 0 0
58744: GO 58747
58746: POP
// end ; if p2 = game_save_mode then
58747: LD_VAR 0 2
58751: PUSH
58752: LD_INT 102
58754: EQUAL
58755: IFFALSE 58810
// begin if p3 = 1 then
58757: LD_VAR 0 3
58761: PUSH
58762: LD_INT 1
58764: EQUAL
58765: IFFALSE 58777
// globalGameSaveCounter := p4 ;
58767: LD_ADDR_EXP 37
58771: PUSH
58772: LD_VAR 0 4
58776: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
58777: LD_VAR 0 3
58781: PUSH
58782: LD_INT 2
58784: EQUAL
58785: PUSH
58786: LD_EXP 37
58790: AND
58791: IFFALSE 58810
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58793: LD_STRING setGameSaveCounter(
58795: PUSH
58796: LD_EXP 37
58800: STR
58801: PUSH
58802: LD_STRING )
58804: STR
58805: PPUSH
58806: CALL_OW 559
// end ; end ;
58810: LD_VAR 0 7
58814: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
58815: LD_INT 0
58817: PPUSH
// streamModeActive := false ;
58818: LD_ADDR_EXP 38
58822: PUSH
58823: LD_INT 0
58825: ST_TO_ADDR
// normalCounter := 36 ;
58826: LD_ADDR_EXP 39
58830: PUSH
58831: LD_INT 36
58833: ST_TO_ADDR
// hardcoreCounter := 18 ;
58834: LD_ADDR_EXP 40
58838: PUSH
58839: LD_INT 18
58841: ST_TO_ADDR
// sRocket := false ;
58842: LD_ADDR_EXP 43
58846: PUSH
58847: LD_INT 0
58849: ST_TO_ADDR
// sSpeed := false ;
58850: LD_ADDR_EXP 42
58854: PUSH
58855: LD_INT 0
58857: ST_TO_ADDR
// sEngine := false ;
58858: LD_ADDR_EXP 44
58862: PUSH
58863: LD_INT 0
58865: ST_TO_ADDR
// sSpec := false ;
58866: LD_ADDR_EXP 41
58870: PUSH
58871: LD_INT 0
58873: ST_TO_ADDR
// sLevel := false ;
58874: LD_ADDR_EXP 45
58878: PUSH
58879: LD_INT 0
58881: ST_TO_ADDR
// sArmoury := false ;
58882: LD_ADDR_EXP 46
58886: PUSH
58887: LD_INT 0
58889: ST_TO_ADDR
// sRadar := false ;
58890: LD_ADDR_EXP 47
58894: PUSH
58895: LD_INT 0
58897: ST_TO_ADDR
// sBunker := false ;
58898: LD_ADDR_EXP 48
58902: PUSH
58903: LD_INT 0
58905: ST_TO_ADDR
// sHack := false ;
58906: LD_ADDR_EXP 49
58910: PUSH
58911: LD_INT 0
58913: ST_TO_ADDR
// sFire := false ;
58914: LD_ADDR_EXP 50
58918: PUSH
58919: LD_INT 0
58921: ST_TO_ADDR
// sRefresh := false ;
58922: LD_ADDR_EXP 51
58926: PUSH
58927: LD_INT 0
58929: ST_TO_ADDR
// sExp := false ;
58930: LD_ADDR_EXP 52
58934: PUSH
58935: LD_INT 0
58937: ST_TO_ADDR
// sDepot := false ;
58938: LD_ADDR_EXP 53
58942: PUSH
58943: LD_INT 0
58945: ST_TO_ADDR
// sFlag := false ;
58946: LD_ADDR_EXP 54
58950: PUSH
58951: LD_INT 0
58953: ST_TO_ADDR
// sKamikadze := false ;
58954: LD_ADDR_EXP 62
58958: PUSH
58959: LD_INT 0
58961: ST_TO_ADDR
// sTroll := false ;
58962: LD_ADDR_EXP 63
58966: PUSH
58967: LD_INT 0
58969: ST_TO_ADDR
// sSlow := false ;
58970: LD_ADDR_EXP 64
58974: PUSH
58975: LD_INT 0
58977: ST_TO_ADDR
// sLack := false ;
58978: LD_ADDR_EXP 65
58982: PUSH
58983: LD_INT 0
58985: ST_TO_ADDR
// sTank := false ;
58986: LD_ADDR_EXP 67
58990: PUSH
58991: LD_INT 0
58993: ST_TO_ADDR
// sRemote := false ;
58994: LD_ADDR_EXP 68
58998: PUSH
58999: LD_INT 0
59001: ST_TO_ADDR
// sPowell := false ;
59002: LD_ADDR_EXP 69
59006: PUSH
59007: LD_INT 0
59009: ST_TO_ADDR
// sTeleport := false ;
59010: LD_ADDR_EXP 72
59014: PUSH
59015: LD_INT 0
59017: ST_TO_ADDR
// sOilTower := false ;
59018: LD_ADDR_EXP 74
59022: PUSH
59023: LD_INT 0
59025: ST_TO_ADDR
// sShovel := false ;
59026: LD_ADDR_EXP 75
59030: PUSH
59031: LD_INT 0
59033: ST_TO_ADDR
// sSheik := false ;
59034: LD_ADDR_EXP 76
59038: PUSH
59039: LD_INT 0
59041: ST_TO_ADDR
// sEarthquake := false ;
59042: LD_ADDR_EXP 78
59046: PUSH
59047: LD_INT 0
59049: ST_TO_ADDR
// sAI := false ;
59050: LD_ADDR_EXP 79
59054: PUSH
59055: LD_INT 0
59057: ST_TO_ADDR
// sCargo := false ;
59058: LD_ADDR_EXP 82
59062: PUSH
59063: LD_INT 0
59065: ST_TO_ADDR
// sDLaser := false ;
59066: LD_ADDR_EXP 83
59070: PUSH
59071: LD_INT 0
59073: ST_TO_ADDR
// sExchange := false ;
59074: LD_ADDR_EXP 84
59078: PUSH
59079: LD_INT 0
59081: ST_TO_ADDR
// sFac := false ;
59082: LD_ADDR_EXP 85
59086: PUSH
59087: LD_INT 0
59089: ST_TO_ADDR
// sPower := false ;
59090: LD_ADDR_EXP 86
59094: PUSH
59095: LD_INT 0
59097: ST_TO_ADDR
// sRandom := false ;
59098: LD_ADDR_EXP 87
59102: PUSH
59103: LD_INT 0
59105: ST_TO_ADDR
// sShield := false ;
59106: LD_ADDR_EXP 88
59110: PUSH
59111: LD_INT 0
59113: ST_TO_ADDR
// sTime := false ;
59114: LD_ADDR_EXP 89
59118: PUSH
59119: LD_INT 0
59121: ST_TO_ADDR
// sTools := false ;
59122: LD_ADDR_EXP 90
59126: PUSH
59127: LD_INT 0
59129: ST_TO_ADDR
// sSold := false ;
59130: LD_ADDR_EXP 55
59134: PUSH
59135: LD_INT 0
59137: ST_TO_ADDR
// sDiff := false ;
59138: LD_ADDR_EXP 56
59142: PUSH
59143: LD_INT 0
59145: ST_TO_ADDR
// sFog := false ;
59146: LD_ADDR_EXP 59
59150: PUSH
59151: LD_INT 0
59153: ST_TO_ADDR
// sReset := false ;
59154: LD_ADDR_EXP 60
59158: PUSH
59159: LD_INT 0
59161: ST_TO_ADDR
// sSun := false ;
59162: LD_ADDR_EXP 61
59166: PUSH
59167: LD_INT 0
59169: ST_TO_ADDR
// sTiger := false ;
59170: LD_ADDR_EXP 57
59174: PUSH
59175: LD_INT 0
59177: ST_TO_ADDR
// sBomb := false ;
59178: LD_ADDR_EXP 58
59182: PUSH
59183: LD_INT 0
59185: ST_TO_ADDR
// sWound := false ;
59186: LD_ADDR_EXP 66
59190: PUSH
59191: LD_INT 0
59193: ST_TO_ADDR
// sBetray := false ;
59194: LD_ADDR_EXP 70
59198: PUSH
59199: LD_INT 0
59201: ST_TO_ADDR
// sContamin := false ;
59202: LD_ADDR_EXP 71
59206: PUSH
59207: LD_INT 0
59209: ST_TO_ADDR
// sOil := false ;
59210: LD_ADDR_EXP 73
59214: PUSH
59215: LD_INT 0
59217: ST_TO_ADDR
// sStu := false ;
59218: LD_ADDR_EXP 77
59222: PUSH
59223: LD_INT 0
59225: ST_TO_ADDR
// sBazooka := false ;
59226: LD_ADDR_EXP 80
59230: PUSH
59231: LD_INT 0
59233: ST_TO_ADDR
// sMortar := false ;
59234: LD_ADDR_EXP 81
59238: PUSH
59239: LD_INT 0
59241: ST_TO_ADDR
// sRanger := false ;
59242: LD_ADDR_EXP 91
59246: PUSH
59247: LD_INT 0
59249: ST_TO_ADDR
// sComputer := false ;
59250: LD_ADDR_EXP 92
59254: PUSH
59255: LD_INT 0
59257: ST_TO_ADDR
// s30 := false ;
59258: LD_ADDR_EXP 93
59262: PUSH
59263: LD_INT 0
59265: ST_TO_ADDR
// s60 := false ;
59266: LD_ADDR_EXP 94
59270: PUSH
59271: LD_INT 0
59273: ST_TO_ADDR
// end ;
59274: LD_VAR 0 1
59278: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59279: LD_INT 0
59281: PPUSH
59282: PPUSH
59283: PPUSH
59284: PPUSH
59285: PPUSH
59286: PPUSH
59287: PPUSH
// result := [ ] ;
59288: LD_ADDR_VAR 0 2
59292: PUSH
59293: EMPTY
59294: ST_TO_ADDR
// if campaign_id = 1 then
59295: LD_OWVAR 69
59299: PUSH
59300: LD_INT 1
59302: EQUAL
59303: IFFALSE 62469
// begin case mission_number of 1 :
59305: LD_OWVAR 70
59309: PUSH
59310: LD_INT 1
59312: DOUBLE
59313: EQUAL
59314: IFTRUE 59318
59316: GO 59394
59318: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59319: LD_ADDR_VAR 0 2
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: LD_INT 4
59329: PUSH
59330: LD_INT 11
59332: PUSH
59333: LD_INT 12
59335: PUSH
59336: LD_INT 15
59338: PUSH
59339: LD_INT 16
59341: PUSH
59342: LD_INT 22
59344: PUSH
59345: LD_INT 23
59347: PUSH
59348: LD_INT 26
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 101
59364: PUSH
59365: LD_INT 102
59367: PUSH
59368: LD_INT 106
59370: PUSH
59371: LD_INT 116
59373: PUSH
59374: LD_INT 117
59376: PUSH
59377: LD_INT 118
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: ST_TO_ADDR
59392: GO 62467
59394: LD_INT 2
59396: DOUBLE
59397: EQUAL
59398: IFTRUE 59402
59400: GO 59486
59402: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59403: LD_ADDR_VAR 0 2
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: LD_INT 4
59413: PUSH
59414: LD_INT 11
59416: PUSH
59417: LD_INT 12
59419: PUSH
59420: LD_INT 15
59422: PUSH
59423: LD_INT 16
59425: PUSH
59426: LD_INT 22
59428: PUSH
59429: LD_INT 23
59431: PUSH
59432: LD_INT 26
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 101
59448: PUSH
59449: LD_INT 102
59451: PUSH
59452: LD_INT 105
59454: PUSH
59455: LD_INT 106
59457: PUSH
59458: LD_INT 108
59460: PUSH
59461: LD_INT 116
59463: PUSH
59464: LD_INT 117
59466: PUSH
59467: LD_INT 118
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: ST_TO_ADDR
59484: GO 62467
59486: LD_INT 3
59488: DOUBLE
59489: EQUAL
59490: IFTRUE 59494
59492: GO 59582
59494: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
59495: LD_ADDR_VAR 0 2
59499: PUSH
59500: LD_INT 2
59502: PUSH
59503: LD_INT 4
59505: PUSH
59506: LD_INT 5
59508: PUSH
59509: LD_INT 11
59511: PUSH
59512: LD_INT 12
59514: PUSH
59515: LD_INT 15
59517: PUSH
59518: LD_INT 16
59520: PUSH
59521: LD_INT 22
59523: PUSH
59524: LD_INT 26
59526: PUSH
59527: LD_INT 36
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 101
59544: PUSH
59545: LD_INT 102
59547: PUSH
59548: LD_INT 105
59550: PUSH
59551: LD_INT 106
59553: PUSH
59554: LD_INT 108
59556: PUSH
59557: LD_INT 116
59559: PUSH
59560: LD_INT 117
59562: PUSH
59563: LD_INT 118
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: ST_TO_ADDR
59580: GO 62467
59582: LD_INT 4
59584: DOUBLE
59585: EQUAL
59586: IFTRUE 59590
59588: GO 59686
59590: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
59591: LD_ADDR_VAR 0 2
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: LD_INT 4
59601: PUSH
59602: LD_INT 5
59604: PUSH
59605: LD_INT 8
59607: PUSH
59608: LD_INT 11
59610: PUSH
59611: LD_INT 12
59613: PUSH
59614: LD_INT 15
59616: PUSH
59617: LD_INT 16
59619: PUSH
59620: LD_INT 22
59622: PUSH
59623: LD_INT 23
59625: PUSH
59626: LD_INT 26
59628: PUSH
59629: LD_INT 36
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 101
59648: PUSH
59649: LD_INT 102
59651: PUSH
59652: LD_INT 105
59654: PUSH
59655: LD_INT 106
59657: PUSH
59658: LD_INT 108
59660: PUSH
59661: LD_INT 116
59663: PUSH
59664: LD_INT 117
59666: PUSH
59667: LD_INT 118
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: ST_TO_ADDR
59684: GO 62467
59686: LD_INT 5
59688: DOUBLE
59689: EQUAL
59690: IFTRUE 59694
59692: GO 59806
59694: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
59695: LD_ADDR_VAR 0 2
59699: PUSH
59700: LD_INT 2
59702: PUSH
59703: LD_INT 4
59705: PUSH
59706: LD_INT 5
59708: PUSH
59709: LD_INT 6
59711: PUSH
59712: LD_INT 8
59714: PUSH
59715: LD_INT 11
59717: PUSH
59718: LD_INT 12
59720: PUSH
59721: LD_INT 15
59723: PUSH
59724: LD_INT 16
59726: PUSH
59727: LD_INT 22
59729: PUSH
59730: LD_INT 23
59732: PUSH
59733: LD_INT 25
59735: PUSH
59736: LD_INT 26
59738: PUSH
59739: LD_INT 36
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 101
59760: PUSH
59761: LD_INT 102
59763: PUSH
59764: LD_INT 105
59766: PUSH
59767: LD_INT 106
59769: PUSH
59770: LD_INT 108
59772: PUSH
59773: LD_INT 109
59775: PUSH
59776: LD_INT 112
59778: PUSH
59779: LD_INT 116
59781: PUSH
59782: LD_INT 117
59784: PUSH
59785: LD_INT 118
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: ST_TO_ADDR
59804: GO 62467
59806: LD_INT 6
59808: DOUBLE
59809: EQUAL
59810: IFTRUE 59814
59812: GO 59946
59814: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
59815: LD_ADDR_VAR 0 2
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: LD_INT 4
59825: PUSH
59826: LD_INT 5
59828: PUSH
59829: LD_INT 6
59831: PUSH
59832: LD_INT 8
59834: PUSH
59835: LD_INT 11
59837: PUSH
59838: LD_INT 12
59840: PUSH
59841: LD_INT 15
59843: PUSH
59844: LD_INT 16
59846: PUSH
59847: LD_INT 20
59849: PUSH
59850: LD_INT 21
59852: PUSH
59853: LD_INT 22
59855: PUSH
59856: LD_INT 23
59858: PUSH
59859: LD_INT 25
59861: PUSH
59862: LD_INT 26
59864: PUSH
59865: LD_INT 30
59867: PUSH
59868: LD_INT 31
59870: PUSH
59871: LD_INT 32
59873: PUSH
59874: LD_INT 36
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 101
59900: PUSH
59901: LD_INT 102
59903: PUSH
59904: LD_INT 105
59906: PUSH
59907: LD_INT 106
59909: PUSH
59910: LD_INT 108
59912: PUSH
59913: LD_INT 109
59915: PUSH
59916: LD_INT 112
59918: PUSH
59919: LD_INT 116
59921: PUSH
59922: LD_INT 117
59924: PUSH
59925: LD_INT 118
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: ST_TO_ADDR
59944: GO 62467
59946: LD_INT 7
59948: DOUBLE
59949: EQUAL
59950: IFTRUE 59954
59952: GO 60066
59954: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
59955: LD_ADDR_VAR 0 2
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: LD_INT 4
59965: PUSH
59966: LD_INT 5
59968: PUSH
59969: LD_INT 7
59971: PUSH
59972: LD_INT 11
59974: PUSH
59975: LD_INT 12
59977: PUSH
59978: LD_INT 15
59980: PUSH
59981: LD_INT 16
59983: PUSH
59984: LD_INT 20
59986: PUSH
59987: LD_INT 21
59989: PUSH
59990: LD_INT 22
59992: PUSH
59993: LD_INT 23
59995: PUSH
59996: LD_INT 25
59998: PUSH
59999: LD_INT 26
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 101
60020: PUSH
60021: LD_INT 102
60023: PUSH
60024: LD_INT 103
60026: PUSH
60027: LD_INT 105
60029: PUSH
60030: LD_INT 106
60032: PUSH
60033: LD_INT 108
60035: PUSH
60036: LD_INT 112
60038: PUSH
60039: LD_INT 116
60041: PUSH
60042: LD_INT 117
60044: PUSH
60045: LD_INT 118
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: ST_TO_ADDR
60064: GO 62467
60066: LD_INT 8
60068: DOUBLE
60069: EQUAL
60070: IFTRUE 60074
60072: GO 60214
60074: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60075: LD_ADDR_VAR 0 2
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 4
60085: PUSH
60086: LD_INT 5
60088: PUSH
60089: LD_INT 6
60091: PUSH
60092: LD_INT 7
60094: PUSH
60095: LD_INT 8
60097: PUSH
60098: LD_INT 11
60100: PUSH
60101: LD_INT 12
60103: PUSH
60104: LD_INT 15
60106: PUSH
60107: LD_INT 16
60109: PUSH
60110: LD_INT 20
60112: PUSH
60113: LD_INT 21
60115: PUSH
60116: LD_INT 22
60118: PUSH
60119: LD_INT 23
60121: PUSH
60122: LD_INT 25
60124: PUSH
60125: LD_INT 26
60127: PUSH
60128: LD_INT 30
60130: PUSH
60131: LD_INT 31
60133: PUSH
60134: LD_INT 32
60136: PUSH
60137: LD_INT 36
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 101
60164: PUSH
60165: LD_INT 102
60167: PUSH
60168: LD_INT 103
60170: PUSH
60171: LD_INT 105
60173: PUSH
60174: LD_INT 106
60176: PUSH
60177: LD_INT 108
60179: PUSH
60180: LD_INT 109
60182: PUSH
60183: LD_INT 112
60185: PUSH
60186: LD_INT 116
60188: PUSH
60189: LD_INT 117
60191: PUSH
60192: LD_INT 118
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: ST_TO_ADDR
60212: GO 62467
60214: LD_INT 9
60216: DOUBLE
60217: EQUAL
60218: IFTRUE 60222
60220: GO 60370
60222: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60223: LD_ADDR_VAR 0 2
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: LD_INT 4
60233: PUSH
60234: LD_INT 5
60236: PUSH
60237: LD_INT 6
60239: PUSH
60240: LD_INT 7
60242: PUSH
60243: LD_INT 8
60245: PUSH
60246: LD_INT 11
60248: PUSH
60249: LD_INT 12
60251: PUSH
60252: LD_INT 15
60254: PUSH
60255: LD_INT 16
60257: PUSH
60258: LD_INT 20
60260: PUSH
60261: LD_INT 21
60263: PUSH
60264: LD_INT 22
60266: PUSH
60267: LD_INT 23
60269: PUSH
60270: LD_INT 25
60272: PUSH
60273: LD_INT 26
60275: PUSH
60276: LD_INT 28
60278: PUSH
60279: LD_INT 30
60281: PUSH
60282: LD_INT 31
60284: PUSH
60285: LD_INT 32
60287: PUSH
60288: LD_INT 36
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 101
60316: PUSH
60317: LD_INT 102
60319: PUSH
60320: LD_INT 103
60322: PUSH
60323: LD_INT 105
60325: PUSH
60326: LD_INT 106
60328: PUSH
60329: LD_INT 108
60331: PUSH
60332: LD_INT 109
60334: PUSH
60335: LD_INT 112
60337: PUSH
60338: LD_INT 114
60340: PUSH
60341: LD_INT 116
60343: PUSH
60344: LD_INT 117
60346: PUSH
60347: LD_INT 118
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: ST_TO_ADDR
60368: GO 62467
60370: LD_INT 10
60372: DOUBLE
60373: EQUAL
60374: IFTRUE 60378
60376: GO 60574
60378: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60379: LD_ADDR_VAR 0 2
60383: PUSH
60384: LD_INT 2
60386: PUSH
60387: LD_INT 4
60389: PUSH
60390: LD_INT 5
60392: PUSH
60393: LD_INT 6
60395: PUSH
60396: LD_INT 7
60398: PUSH
60399: LD_INT 8
60401: PUSH
60402: LD_INT 9
60404: PUSH
60405: LD_INT 10
60407: PUSH
60408: LD_INT 11
60410: PUSH
60411: LD_INT 12
60413: PUSH
60414: LD_INT 13
60416: PUSH
60417: LD_INT 14
60419: PUSH
60420: LD_INT 15
60422: PUSH
60423: LD_INT 16
60425: PUSH
60426: LD_INT 17
60428: PUSH
60429: LD_INT 18
60431: PUSH
60432: LD_INT 19
60434: PUSH
60435: LD_INT 20
60437: PUSH
60438: LD_INT 21
60440: PUSH
60441: LD_INT 22
60443: PUSH
60444: LD_INT 23
60446: PUSH
60447: LD_INT 24
60449: PUSH
60450: LD_INT 25
60452: PUSH
60453: LD_INT 26
60455: PUSH
60456: LD_INT 28
60458: PUSH
60459: LD_INT 30
60461: PUSH
60462: LD_INT 31
60464: PUSH
60465: LD_INT 32
60467: PUSH
60468: LD_INT 36
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 101
60504: PUSH
60505: LD_INT 102
60507: PUSH
60508: LD_INT 103
60510: PUSH
60511: LD_INT 104
60513: PUSH
60514: LD_INT 105
60516: PUSH
60517: LD_INT 106
60519: PUSH
60520: LD_INT 107
60522: PUSH
60523: LD_INT 108
60525: PUSH
60526: LD_INT 109
60528: PUSH
60529: LD_INT 110
60531: PUSH
60532: LD_INT 111
60534: PUSH
60535: LD_INT 112
60537: PUSH
60538: LD_INT 114
60540: PUSH
60541: LD_INT 116
60543: PUSH
60544: LD_INT 117
60546: PUSH
60547: LD_INT 118
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: ST_TO_ADDR
60572: GO 62467
60574: LD_INT 11
60576: DOUBLE
60577: EQUAL
60578: IFTRUE 60582
60580: GO 60786
60582: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
60583: LD_ADDR_VAR 0 2
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: LD_INT 3
60593: PUSH
60594: LD_INT 4
60596: PUSH
60597: LD_INT 5
60599: PUSH
60600: LD_INT 6
60602: PUSH
60603: LD_INT 7
60605: PUSH
60606: LD_INT 8
60608: PUSH
60609: LD_INT 9
60611: PUSH
60612: LD_INT 10
60614: PUSH
60615: LD_INT 11
60617: PUSH
60618: LD_INT 12
60620: PUSH
60621: LD_INT 13
60623: PUSH
60624: LD_INT 14
60626: PUSH
60627: LD_INT 15
60629: PUSH
60630: LD_INT 16
60632: PUSH
60633: LD_INT 17
60635: PUSH
60636: LD_INT 18
60638: PUSH
60639: LD_INT 19
60641: PUSH
60642: LD_INT 20
60644: PUSH
60645: LD_INT 21
60647: PUSH
60648: LD_INT 22
60650: PUSH
60651: LD_INT 23
60653: PUSH
60654: LD_INT 24
60656: PUSH
60657: LD_INT 25
60659: PUSH
60660: LD_INT 26
60662: PUSH
60663: LD_INT 28
60665: PUSH
60666: LD_INT 30
60668: PUSH
60669: LD_INT 31
60671: PUSH
60672: LD_INT 32
60674: PUSH
60675: LD_INT 34
60677: PUSH
60678: LD_INT 36
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 101
60716: PUSH
60717: LD_INT 102
60719: PUSH
60720: LD_INT 103
60722: PUSH
60723: LD_INT 104
60725: PUSH
60726: LD_INT 105
60728: PUSH
60729: LD_INT 106
60731: PUSH
60732: LD_INT 107
60734: PUSH
60735: LD_INT 108
60737: PUSH
60738: LD_INT 109
60740: PUSH
60741: LD_INT 110
60743: PUSH
60744: LD_INT 111
60746: PUSH
60747: LD_INT 112
60749: PUSH
60750: LD_INT 114
60752: PUSH
60753: LD_INT 116
60755: PUSH
60756: LD_INT 117
60758: PUSH
60759: LD_INT 118
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: ST_TO_ADDR
60784: GO 62467
60786: LD_INT 12
60788: DOUBLE
60789: EQUAL
60790: IFTRUE 60794
60792: GO 61014
60794: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
60795: LD_ADDR_VAR 0 2
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: LD_INT 2
60805: PUSH
60806: LD_INT 3
60808: PUSH
60809: LD_INT 4
60811: PUSH
60812: LD_INT 5
60814: PUSH
60815: LD_INT 6
60817: PUSH
60818: LD_INT 7
60820: PUSH
60821: LD_INT 8
60823: PUSH
60824: LD_INT 9
60826: PUSH
60827: LD_INT 10
60829: PUSH
60830: LD_INT 11
60832: PUSH
60833: LD_INT 12
60835: PUSH
60836: LD_INT 13
60838: PUSH
60839: LD_INT 14
60841: PUSH
60842: LD_INT 15
60844: PUSH
60845: LD_INT 16
60847: PUSH
60848: LD_INT 17
60850: PUSH
60851: LD_INT 18
60853: PUSH
60854: LD_INT 19
60856: PUSH
60857: LD_INT 20
60859: PUSH
60860: LD_INT 21
60862: PUSH
60863: LD_INT 22
60865: PUSH
60866: LD_INT 23
60868: PUSH
60869: LD_INT 24
60871: PUSH
60872: LD_INT 25
60874: PUSH
60875: LD_INT 26
60877: PUSH
60878: LD_INT 27
60880: PUSH
60881: LD_INT 28
60883: PUSH
60884: LD_INT 30
60886: PUSH
60887: LD_INT 31
60889: PUSH
60890: LD_INT 32
60892: PUSH
60893: LD_INT 33
60895: PUSH
60896: LD_INT 34
60898: PUSH
60899: LD_INT 36
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 101
60940: PUSH
60941: LD_INT 102
60943: PUSH
60944: LD_INT 103
60946: PUSH
60947: LD_INT 104
60949: PUSH
60950: LD_INT 105
60952: PUSH
60953: LD_INT 106
60955: PUSH
60956: LD_INT 107
60958: PUSH
60959: LD_INT 108
60961: PUSH
60962: LD_INT 109
60964: PUSH
60965: LD_INT 110
60967: PUSH
60968: LD_INT 111
60970: PUSH
60971: LD_INT 112
60973: PUSH
60974: LD_INT 113
60976: PUSH
60977: LD_INT 114
60979: PUSH
60980: LD_INT 116
60982: PUSH
60983: LD_INT 117
60985: PUSH
60986: LD_INT 118
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: ST_TO_ADDR
61012: GO 62467
61014: LD_INT 13
61016: DOUBLE
61017: EQUAL
61018: IFTRUE 61022
61020: GO 61230
61022: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61023: LD_ADDR_VAR 0 2
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: LD_INT 3
61036: PUSH
61037: LD_INT 4
61039: PUSH
61040: LD_INT 5
61042: PUSH
61043: LD_INT 8
61045: PUSH
61046: LD_INT 9
61048: PUSH
61049: LD_INT 10
61051: PUSH
61052: LD_INT 11
61054: PUSH
61055: LD_INT 12
61057: PUSH
61058: LD_INT 14
61060: PUSH
61061: LD_INT 15
61063: PUSH
61064: LD_INT 16
61066: PUSH
61067: LD_INT 17
61069: PUSH
61070: LD_INT 18
61072: PUSH
61073: LD_INT 19
61075: PUSH
61076: LD_INT 20
61078: PUSH
61079: LD_INT 21
61081: PUSH
61082: LD_INT 22
61084: PUSH
61085: LD_INT 23
61087: PUSH
61088: LD_INT 24
61090: PUSH
61091: LD_INT 25
61093: PUSH
61094: LD_INT 26
61096: PUSH
61097: LD_INT 27
61099: PUSH
61100: LD_INT 28
61102: PUSH
61103: LD_INT 30
61105: PUSH
61106: LD_INT 31
61108: PUSH
61109: LD_INT 32
61111: PUSH
61112: LD_INT 33
61114: PUSH
61115: LD_INT 34
61117: PUSH
61118: LD_INT 36
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 101
61156: PUSH
61157: LD_INT 102
61159: PUSH
61160: LD_INT 103
61162: PUSH
61163: LD_INT 104
61165: PUSH
61166: LD_INT 105
61168: PUSH
61169: LD_INT 106
61171: PUSH
61172: LD_INT 107
61174: PUSH
61175: LD_INT 108
61177: PUSH
61178: LD_INT 109
61180: PUSH
61181: LD_INT 110
61183: PUSH
61184: LD_INT 111
61186: PUSH
61187: LD_INT 112
61189: PUSH
61190: LD_INT 113
61192: PUSH
61193: LD_INT 114
61195: PUSH
61196: LD_INT 116
61198: PUSH
61199: LD_INT 117
61201: PUSH
61202: LD_INT 118
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: ST_TO_ADDR
61228: GO 62467
61230: LD_INT 14
61232: DOUBLE
61233: EQUAL
61234: IFTRUE 61238
61236: GO 61462
61238: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61239: LD_ADDR_VAR 0 2
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: LD_INT 2
61249: PUSH
61250: LD_INT 3
61252: PUSH
61253: LD_INT 4
61255: PUSH
61256: LD_INT 5
61258: PUSH
61259: LD_INT 6
61261: PUSH
61262: LD_INT 7
61264: PUSH
61265: LD_INT 8
61267: PUSH
61268: LD_INT 9
61270: PUSH
61271: LD_INT 10
61273: PUSH
61274: LD_INT 11
61276: PUSH
61277: LD_INT 12
61279: PUSH
61280: LD_INT 13
61282: PUSH
61283: LD_INT 14
61285: PUSH
61286: LD_INT 15
61288: PUSH
61289: LD_INT 16
61291: PUSH
61292: LD_INT 17
61294: PUSH
61295: LD_INT 18
61297: PUSH
61298: LD_INT 19
61300: PUSH
61301: LD_INT 20
61303: PUSH
61304: LD_INT 21
61306: PUSH
61307: LD_INT 22
61309: PUSH
61310: LD_INT 23
61312: PUSH
61313: LD_INT 24
61315: PUSH
61316: LD_INT 25
61318: PUSH
61319: LD_INT 26
61321: PUSH
61322: LD_INT 27
61324: PUSH
61325: LD_INT 28
61327: PUSH
61328: LD_INT 29
61330: PUSH
61331: LD_INT 30
61333: PUSH
61334: LD_INT 31
61336: PUSH
61337: LD_INT 32
61339: PUSH
61340: LD_INT 33
61342: PUSH
61343: LD_INT 34
61345: PUSH
61346: LD_INT 36
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 101
61388: PUSH
61389: LD_INT 102
61391: PUSH
61392: LD_INT 103
61394: PUSH
61395: LD_INT 104
61397: PUSH
61398: LD_INT 105
61400: PUSH
61401: LD_INT 106
61403: PUSH
61404: LD_INT 107
61406: PUSH
61407: LD_INT 108
61409: PUSH
61410: LD_INT 109
61412: PUSH
61413: LD_INT 110
61415: PUSH
61416: LD_INT 111
61418: PUSH
61419: LD_INT 112
61421: PUSH
61422: LD_INT 113
61424: PUSH
61425: LD_INT 114
61427: PUSH
61428: LD_INT 116
61430: PUSH
61431: LD_INT 117
61433: PUSH
61434: LD_INT 118
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: ST_TO_ADDR
61460: GO 62467
61462: LD_INT 15
61464: DOUBLE
61465: EQUAL
61466: IFTRUE 61470
61468: GO 61694
61470: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
61471: LD_ADDR_VAR 0 2
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: LD_INT 3
61484: PUSH
61485: LD_INT 4
61487: PUSH
61488: LD_INT 5
61490: PUSH
61491: LD_INT 6
61493: PUSH
61494: LD_INT 7
61496: PUSH
61497: LD_INT 8
61499: PUSH
61500: LD_INT 9
61502: PUSH
61503: LD_INT 10
61505: PUSH
61506: LD_INT 11
61508: PUSH
61509: LD_INT 12
61511: PUSH
61512: LD_INT 13
61514: PUSH
61515: LD_INT 14
61517: PUSH
61518: LD_INT 15
61520: PUSH
61521: LD_INT 16
61523: PUSH
61524: LD_INT 17
61526: PUSH
61527: LD_INT 18
61529: PUSH
61530: LD_INT 19
61532: PUSH
61533: LD_INT 20
61535: PUSH
61536: LD_INT 21
61538: PUSH
61539: LD_INT 22
61541: PUSH
61542: LD_INT 23
61544: PUSH
61545: LD_INT 24
61547: PUSH
61548: LD_INT 25
61550: PUSH
61551: LD_INT 26
61553: PUSH
61554: LD_INT 27
61556: PUSH
61557: LD_INT 28
61559: PUSH
61560: LD_INT 29
61562: PUSH
61563: LD_INT 30
61565: PUSH
61566: LD_INT 31
61568: PUSH
61569: LD_INT 32
61571: PUSH
61572: LD_INT 33
61574: PUSH
61575: LD_INT 34
61577: PUSH
61578: LD_INT 36
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 101
61620: PUSH
61621: LD_INT 102
61623: PUSH
61624: LD_INT 103
61626: PUSH
61627: LD_INT 104
61629: PUSH
61630: LD_INT 105
61632: PUSH
61633: LD_INT 106
61635: PUSH
61636: LD_INT 107
61638: PUSH
61639: LD_INT 108
61641: PUSH
61642: LD_INT 109
61644: PUSH
61645: LD_INT 110
61647: PUSH
61648: LD_INT 111
61650: PUSH
61651: LD_INT 112
61653: PUSH
61654: LD_INT 113
61656: PUSH
61657: LD_INT 114
61659: PUSH
61660: LD_INT 116
61662: PUSH
61663: LD_INT 117
61665: PUSH
61666: LD_INT 118
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: ST_TO_ADDR
61692: GO 62467
61694: LD_INT 16
61696: DOUBLE
61697: EQUAL
61698: IFTRUE 61702
61700: GO 61838
61702: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
61703: LD_ADDR_VAR 0 2
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: LD_INT 4
61713: PUSH
61714: LD_INT 5
61716: PUSH
61717: LD_INT 7
61719: PUSH
61720: LD_INT 11
61722: PUSH
61723: LD_INT 12
61725: PUSH
61726: LD_INT 15
61728: PUSH
61729: LD_INT 16
61731: PUSH
61732: LD_INT 20
61734: PUSH
61735: LD_INT 21
61737: PUSH
61738: LD_INT 22
61740: PUSH
61741: LD_INT 23
61743: PUSH
61744: LD_INT 25
61746: PUSH
61747: LD_INT 26
61749: PUSH
61750: LD_INT 30
61752: PUSH
61753: LD_INT 31
61755: PUSH
61756: LD_INT 32
61758: PUSH
61759: LD_INT 33
61761: PUSH
61762: LD_INT 34
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 101
61788: PUSH
61789: LD_INT 102
61791: PUSH
61792: LD_INT 103
61794: PUSH
61795: LD_INT 106
61797: PUSH
61798: LD_INT 108
61800: PUSH
61801: LD_INT 112
61803: PUSH
61804: LD_INT 113
61806: PUSH
61807: LD_INT 114
61809: PUSH
61810: LD_INT 116
61812: PUSH
61813: LD_INT 117
61815: PUSH
61816: LD_INT 118
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: ST_TO_ADDR
61836: GO 62467
61838: LD_INT 17
61840: DOUBLE
61841: EQUAL
61842: IFTRUE 61846
61844: GO 62070
61846: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
61847: LD_ADDR_VAR 0 2
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: LD_INT 2
61857: PUSH
61858: LD_INT 3
61860: PUSH
61861: LD_INT 4
61863: PUSH
61864: LD_INT 5
61866: PUSH
61867: LD_INT 6
61869: PUSH
61870: LD_INT 7
61872: PUSH
61873: LD_INT 8
61875: PUSH
61876: LD_INT 9
61878: PUSH
61879: LD_INT 10
61881: PUSH
61882: LD_INT 11
61884: PUSH
61885: LD_INT 12
61887: PUSH
61888: LD_INT 13
61890: PUSH
61891: LD_INT 14
61893: PUSH
61894: LD_INT 15
61896: PUSH
61897: LD_INT 16
61899: PUSH
61900: LD_INT 17
61902: PUSH
61903: LD_INT 18
61905: PUSH
61906: LD_INT 19
61908: PUSH
61909: LD_INT 20
61911: PUSH
61912: LD_INT 21
61914: PUSH
61915: LD_INT 22
61917: PUSH
61918: LD_INT 23
61920: PUSH
61921: LD_INT 24
61923: PUSH
61924: LD_INT 25
61926: PUSH
61927: LD_INT 26
61929: PUSH
61930: LD_INT 27
61932: PUSH
61933: LD_INT 28
61935: PUSH
61936: LD_INT 29
61938: PUSH
61939: LD_INT 30
61941: PUSH
61942: LD_INT 31
61944: PUSH
61945: LD_INT 32
61947: PUSH
61948: LD_INT 33
61950: PUSH
61951: LD_INT 34
61953: PUSH
61954: LD_INT 36
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 101
61996: PUSH
61997: LD_INT 102
61999: PUSH
62000: LD_INT 103
62002: PUSH
62003: LD_INT 104
62005: PUSH
62006: LD_INT 105
62008: PUSH
62009: LD_INT 106
62011: PUSH
62012: LD_INT 107
62014: PUSH
62015: LD_INT 108
62017: PUSH
62018: LD_INT 109
62020: PUSH
62021: LD_INT 110
62023: PUSH
62024: LD_INT 111
62026: PUSH
62027: LD_INT 112
62029: PUSH
62030: LD_INT 113
62032: PUSH
62033: LD_INT 114
62035: PUSH
62036: LD_INT 116
62038: PUSH
62039: LD_INT 117
62041: PUSH
62042: LD_INT 118
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: ST_TO_ADDR
62068: GO 62467
62070: LD_INT 18
62072: DOUBLE
62073: EQUAL
62074: IFTRUE 62078
62076: GO 62226
62078: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62079: LD_ADDR_VAR 0 2
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: LD_INT 4
62089: PUSH
62090: LD_INT 5
62092: PUSH
62093: LD_INT 7
62095: PUSH
62096: LD_INT 11
62098: PUSH
62099: LD_INT 12
62101: PUSH
62102: LD_INT 15
62104: PUSH
62105: LD_INT 16
62107: PUSH
62108: LD_INT 20
62110: PUSH
62111: LD_INT 21
62113: PUSH
62114: LD_INT 22
62116: PUSH
62117: LD_INT 23
62119: PUSH
62120: LD_INT 25
62122: PUSH
62123: LD_INT 26
62125: PUSH
62126: LD_INT 30
62128: PUSH
62129: LD_INT 31
62131: PUSH
62132: LD_INT 32
62134: PUSH
62135: LD_INT 33
62137: PUSH
62138: LD_INT 34
62140: PUSH
62141: LD_INT 35
62143: PUSH
62144: LD_INT 36
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 101
62172: PUSH
62173: LD_INT 102
62175: PUSH
62176: LD_INT 103
62178: PUSH
62179: LD_INT 106
62181: PUSH
62182: LD_INT 108
62184: PUSH
62185: LD_INT 112
62187: PUSH
62188: LD_INT 113
62190: PUSH
62191: LD_INT 114
62193: PUSH
62194: LD_INT 115
62196: PUSH
62197: LD_INT 116
62199: PUSH
62200: LD_INT 117
62202: PUSH
62203: LD_INT 118
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: ST_TO_ADDR
62224: GO 62467
62226: LD_INT 19
62228: DOUBLE
62229: EQUAL
62230: IFTRUE 62234
62232: GO 62466
62234: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62235: LD_ADDR_VAR 0 2
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: LD_INT 2
62245: PUSH
62246: LD_INT 3
62248: PUSH
62249: LD_INT 4
62251: PUSH
62252: LD_INT 5
62254: PUSH
62255: LD_INT 6
62257: PUSH
62258: LD_INT 7
62260: PUSH
62261: LD_INT 8
62263: PUSH
62264: LD_INT 9
62266: PUSH
62267: LD_INT 10
62269: PUSH
62270: LD_INT 11
62272: PUSH
62273: LD_INT 12
62275: PUSH
62276: LD_INT 13
62278: PUSH
62279: LD_INT 14
62281: PUSH
62282: LD_INT 15
62284: PUSH
62285: LD_INT 16
62287: PUSH
62288: LD_INT 17
62290: PUSH
62291: LD_INT 18
62293: PUSH
62294: LD_INT 19
62296: PUSH
62297: LD_INT 20
62299: PUSH
62300: LD_INT 21
62302: PUSH
62303: LD_INT 22
62305: PUSH
62306: LD_INT 23
62308: PUSH
62309: LD_INT 24
62311: PUSH
62312: LD_INT 25
62314: PUSH
62315: LD_INT 26
62317: PUSH
62318: LD_INT 27
62320: PUSH
62321: LD_INT 28
62323: PUSH
62324: LD_INT 29
62326: PUSH
62327: LD_INT 30
62329: PUSH
62330: LD_INT 31
62332: PUSH
62333: LD_INT 32
62335: PUSH
62336: LD_INT 33
62338: PUSH
62339: LD_INT 34
62341: PUSH
62342: LD_INT 35
62344: PUSH
62345: LD_INT 36
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 101
62388: PUSH
62389: LD_INT 102
62391: PUSH
62392: LD_INT 103
62394: PUSH
62395: LD_INT 104
62397: PUSH
62398: LD_INT 105
62400: PUSH
62401: LD_INT 106
62403: PUSH
62404: LD_INT 107
62406: PUSH
62407: LD_INT 108
62409: PUSH
62410: LD_INT 109
62412: PUSH
62413: LD_INT 110
62415: PUSH
62416: LD_INT 111
62418: PUSH
62419: LD_INT 112
62421: PUSH
62422: LD_INT 113
62424: PUSH
62425: LD_INT 114
62427: PUSH
62428: LD_INT 115
62430: PUSH
62431: LD_INT 116
62433: PUSH
62434: LD_INT 117
62436: PUSH
62437: LD_INT 118
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: ST_TO_ADDR
62464: GO 62467
62466: POP
// end else
62467: GO 62698
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
62469: LD_ADDR_VAR 0 2
62473: PUSH
62474: LD_INT 1
62476: PUSH
62477: LD_INT 2
62479: PUSH
62480: LD_INT 3
62482: PUSH
62483: LD_INT 4
62485: PUSH
62486: LD_INT 5
62488: PUSH
62489: LD_INT 6
62491: PUSH
62492: LD_INT 7
62494: PUSH
62495: LD_INT 8
62497: PUSH
62498: LD_INT 9
62500: PUSH
62501: LD_INT 10
62503: PUSH
62504: LD_INT 11
62506: PUSH
62507: LD_INT 12
62509: PUSH
62510: LD_INT 13
62512: PUSH
62513: LD_INT 14
62515: PUSH
62516: LD_INT 15
62518: PUSH
62519: LD_INT 16
62521: PUSH
62522: LD_INT 17
62524: PUSH
62525: LD_INT 18
62527: PUSH
62528: LD_INT 19
62530: PUSH
62531: LD_INT 20
62533: PUSH
62534: LD_INT 21
62536: PUSH
62537: LD_INT 22
62539: PUSH
62540: LD_INT 23
62542: PUSH
62543: LD_INT 24
62545: PUSH
62546: LD_INT 25
62548: PUSH
62549: LD_INT 26
62551: PUSH
62552: LD_INT 27
62554: PUSH
62555: LD_INT 28
62557: PUSH
62558: LD_INT 29
62560: PUSH
62561: LD_INT 30
62563: PUSH
62564: LD_INT 31
62566: PUSH
62567: LD_INT 32
62569: PUSH
62570: LD_INT 33
62572: PUSH
62573: LD_INT 34
62575: PUSH
62576: LD_INT 35
62578: PUSH
62579: LD_INT 36
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 101
62622: PUSH
62623: LD_INT 102
62625: PUSH
62626: LD_INT 103
62628: PUSH
62629: LD_INT 104
62631: PUSH
62632: LD_INT 105
62634: PUSH
62635: LD_INT 106
62637: PUSH
62638: LD_INT 107
62640: PUSH
62641: LD_INT 108
62643: PUSH
62644: LD_INT 109
62646: PUSH
62647: LD_INT 110
62649: PUSH
62650: LD_INT 111
62652: PUSH
62653: LD_INT 112
62655: PUSH
62656: LD_INT 113
62658: PUSH
62659: LD_INT 114
62661: PUSH
62662: LD_INT 115
62664: PUSH
62665: LD_INT 116
62667: PUSH
62668: LD_INT 117
62670: PUSH
62671: LD_INT 118
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: ST_TO_ADDR
// if result then
62698: LD_VAR 0 2
62702: IFFALSE 63488
// begin normal :=  ;
62704: LD_ADDR_VAR 0 5
62708: PUSH
62709: LD_STRING 
62711: ST_TO_ADDR
// hardcore :=  ;
62712: LD_ADDR_VAR 0 6
62716: PUSH
62717: LD_STRING 
62719: ST_TO_ADDR
// active :=  ;
62720: LD_ADDR_VAR 0 7
62724: PUSH
62725: LD_STRING 
62727: ST_TO_ADDR
// for i = 1 to normalCounter do
62728: LD_ADDR_VAR 0 8
62732: PUSH
62733: DOUBLE
62734: LD_INT 1
62736: DEC
62737: ST_TO_ADDR
62738: LD_EXP 39
62742: PUSH
62743: FOR_TO
62744: IFFALSE 62845
// begin tmp := 0 ;
62746: LD_ADDR_VAR 0 3
62750: PUSH
62751: LD_STRING 0
62753: ST_TO_ADDR
// if result [ 1 ] then
62754: LD_VAR 0 2
62758: PUSH
62759: LD_INT 1
62761: ARRAY
62762: IFFALSE 62827
// if result [ 1 ] [ 1 ] = i then
62764: LD_VAR 0 2
62768: PUSH
62769: LD_INT 1
62771: ARRAY
62772: PUSH
62773: LD_INT 1
62775: ARRAY
62776: PUSH
62777: LD_VAR 0 8
62781: EQUAL
62782: IFFALSE 62827
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
62784: LD_ADDR_VAR 0 2
62788: PUSH
62789: LD_VAR 0 2
62793: PPUSH
62794: LD_INT 1
62796: PPUSH
62797: LD_VAR 0 2
62801: PUSH
62802: LD_INT 1
62804: ARRAY
62805: PPUSH
62806: LD_INT 1
62808: PPUSH
62809: CALL_OW 3
62813: PPUSH
62814: CALL_OW 1
62818: ST_TO_ADDR
// tmp := 1 ;
62819: LD_ADDR_VAR 0 3
62823: PUSH
62824: LD_STRING 1
62826: ST_TO_ADDR
// end ; normal := normal & tmp ;
62827: LD_ADDR_VAR 0 5
62831: PUSH
62832: LD_VAR 0 5
62836: PUSH
62837: LD_VAR 0 3
62841: STR
62842: ST_TO_ADDR
// end ;
62843: GO 62743
62845: POP
62846: POP
// for i = 1 to hardcoreCounter do
62847: LD_ADDR_VAR 0 8
62851: PUSH
62852: DOUBLE
62853: LD_INT 1
62855: DEC
62856: ST_TO_ADDR
62857: LD_EXP 40
62861: PUSH
62862: FOR_TO
62863: IFFALSE 62968
// begin tmp := 0 ;
62865: LD_ADDR_VAR 0 3
62869: PUSH
62870: LD_STRING 0
62872: ST_TO_ADDR
// if result [ 2 ] then
62873: LD_VAR 0 2
62877: PUSH
62878: LD_INT 2
62880: ARRAY
62881: IFFALSE 62950
// if result [ 2 ] [ 1 ] = 100 + i then
62883: LD_VAR 0 2
62887: PUSH
62888: LD_INT 2
62890: ARRAY
62891: PUSH
62892: LD_INT 1
62894: ARRAY
62895: PUSH
62896: LD_INT 100
62898: PUSH
62899: LD_VAR 0 8
62903: PLUS
62904: EQUAL
62905: IFFALSE 62950
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
62907: LD_ADDR_VAR 0 2
62911: PUSH
62912: LD_VAR 0 2
62916: PPUSH
62917: LD_INT 2
62919: PPUSH
62920: LD_VAR 0 2
62924: PUSH
62925: LD_INT 2
62927: ARRAY
62928: PPUSH
62929: LD_INT 1
62931: PPUSH
62932: CALL_OW 3
62936: PPUSH
62937: CALL_OW 1
62941: ST_TO_ADDR
// tmp := 1 ;
62942: LD_ADDR_VAR 0 3
62946: PUSH
62947: LD_STRING 1
62949: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
62950: LD_ADDR_VAR 0 6
62954: PUSH
62955: LD_VAR 0 6
62959: PUSH
62960: LD_VAR 0 3
62964: STR
62965: ST_TO_ADDR
// end ;
62966: GO 62862
62968: POP
62969: POP
// if isGameLoad then
62970: LD_VAR 0 1
62974: IFFALSE 63449
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
62976: LD_ADDR_VAR 0 4
62980: PUSH
62981: LD_EXP 43
62985: PUSH
62986: LD_EXP 42
62990: PUSH
62991: LD_EXP 44
62995: PUSH
62996: LD_EXP 41
63000: PUSH
63001: LD_EXP 45
63005: PUSH
63006: LD_EXP 46
63010: PUSH
63011: LD_EXP 47
63015: PUSH
63016: LD_EXP 48
63020: PUSH
63021: LD_EXP 49
63025: PUSH
63026: LD_EXP 50
63030: PUSH
63031: LD_EXP 51
63035: PUSH
63036: LD_EXP 52
63040: PUSH
63041: LD_EXP 53
63045: PUSH
63046: LD_EXP 54
63050: PUSH
63051: LD_EXP 62
63055: PUSH
63056: LD_EXP 63
63060: PUSH
63061: LD_EXP 64
63065: PUSH
63066: LD_EXP 65
63070: PUSH
63071: LD_EXP 67
63075: PUSH
63076: LD_EXP 68
63080: PUSH
63081: LD_EXP 69
63085: PUSH
63086: LD_EXP 72
63090: PUSH
63091: LD_EXP 74
63095: PUSH
63096: LD_EXP 75
63100: PUSH
63101: LD_EXP 76
63105: PUSH
63106: LD_EXP 78
63110: PUSH
63111: LD_EXP 79
63115: PUSH
63116: LD_EXP 82
63120: PUSH
63121: LD_EXP 83
63125: PUSH
63126: LD_EXP 84
63130: PUSH
63131: LD_EXP 85
63135: PUSH
63136: LD_EXP 86
63140: PUSH
63141: LD_EXP 87
63145: PUSH
63146: LD_EXP 88
63150: PUSH
63151: LD_EXP 89
63155: PUSH
63156: LD_EXP 90
63160: PUSH
63161: LD_EXP 55
63165: PUSH
63166: LD_EXP 56
63170: PUSH
63171: LD_EXP 59
63175: PUSH
63176: LD_EXP 60
63180: PUSH
63181: LD_EXP 61
63185: PUSH
63186: LD_EXP 57
63190: PUSH
63191: LD_EXP 58
63195: PUSH
63196: LD_EXP 66
63200: PUSH
63201: LD_EXP 70
63205: PUSH
63206: LD_EXP 71
63210: PUSH
63211: LD_EXP 73
63215: PUSH
63216: LD_EXP 77
63220: PUSH
63221: LD_EXP 80
63225: PUSH
63226: LD_EXP 81
63230: PUSH
63231: LD_EXP 91
63235: PUSH
63236: LD_EXP 92
63240: PUSH
63241: LD_EXP 93
63245: PUSH
63246: LD_EXP 94
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: ST_TO_ADDR
// tmp :=  ;
63307: LD_ADDR_VAR 0 3
63311: PUSH
63312: LD_STRING 
63314: ST_TO_ADDR
// for i = 1 to normalCounter do
63315: LD_ADDR_VAR 0 8
63319: PUSH
63320: DOUBLE
63321: LD_INT 1
63323: DEC
63324: ST_TO_ADDR
63325: LD_EXP 39
63329: PUSH
63330: FOR_TO
63331: IFFALSE 63367
// begin if flags [ i ] then
63333: LD_VAR 0 4
63337: PUSH
63338: LD_VAR 0 8
63342: ARRAY
63343: IFFALSE 63365
// tmp := tmp & i & ; ;
63345: LD_ADDR_VAR 0 3
63349: PUSH
63350: LD_VAR 0 3
63354: PUSH
63355: LD_VAR 0 8
63359: STR
63360: PUSH
63361: LD_STRING ;
63363: STR
63364: ST_TO_ADDR
// end ;
63365: GO 63330
63367: POP
63368: POP
// for i = 1 to hardcoreCounter do
63369: LD_ADDR_VAR 0 8
63373: PUSH
63374: DOUBLE
63375: LD_INT 1
63377: DEC
63378: ST_TO_ADDR
63379: LD_EXP 40
63383: PUSH
63384: FOR_TO
63385: IFFALSE 63431
// begin if flags [ normalCounter + i ] then
63387: LD_VAR 0 4
63391: PUSH
63392: LD_EXP 39
63396: PUSH
63397: LD_VAR 0 8
63401: PLUS
63402: ARRAY
63403: IFFALSE 63429
// tmp := tmp & ( 100 + i ) & ; ;
63405: LD_ADDR_VAR 0 3
63409: PUSH
63410: LD_VAR 0 3
63414: PUSH
63415: LD_INT 100
63417: PUSH
63418: LD_VAR 0 8
63422: PLUS
63423: STR
63424: PUSH
63425: LD_STRING ;
63427: STR
63428: ST_TO_ADDR
// end ;
63429: GO 63384
63431: POP
63432: POP
// if tmp then
63433: LD_VAR 0 3
63437: IFFALSE 63449
// active := tmp ;
63439: LD_ADDR_VAR 0 7
63443: PUSH
63444: LD_VAR 0 3
63448: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
63449: LD_STRING getStreamItemsFromMission("
63451: PUSH
63452: LD_VAR 0 5
63456: STR
63457: PUSH
63458: LD_STRING ","
63460: STR
63461: PUSH
63462: LD_VAR 0 6
63466: STR
63467: PUSH
63468: LD_STRING ","
63470: STR
63471: PUSH
63472: LD_VAR 0 7
63476: STR
63477: PUSH
63478: LD_STRING ")
63480: STR
63481: PPUSH
63482: CALL_OW 559
// end else
63486: GO 63495
// ToLua ( getStreamItemsFromMission("","","") ) ;
63488: LD_STRING getStreamItemsFromMission("","","")
63490: PPUSH
63491: CALL_OW 559
// end ;
63495: LD_VAR 0 2
63499: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63500: LD_EXP 38
63504: PUSH
63505: LD_EXP 43
63509: AND
63510: IFFALSE 63634
63512: GO 63514
63514: DISABLE
63515: LD_INT 0
63517: PPUSH
63518: PPUSH
// begin enable ;
63519: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63520: LD_ADDR_VAR 0 2
63524: PUSH
63525: LD_INT 22
63527: PUSH
63528: LD_OWVAR 2
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 2
63539: PUSH
63540: LD_INT 34
63542: PUSH
63543: LD_INT 7
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 34
63552: PUSH
63553: LD_INT 45
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 34
63562: PUSH
63563: LD_INT 28
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 34
63572: PUSH
63573: LD_INT 47
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PPUSH
63591: CALL_OW 69
63595: ST_TO_ADDR
// if not tmp then
63596: LD_VAR 0 2
63600: NOT
63601: IFFALSE 63605
// exit ;
63603: GO 63634
// for i in tmp do
63605: LD_ADDR_VAR 0 1
63609: PUSH
63610: LD_VAR 0 2
63614: PUSH
63615: FOR_IN
63616: IFFALSE 63632
// begin SetLives ( i , 0 ) ;
63618: LD_VAR 0 1
63622: PPUSH
63623: LD_INT 0
63625: PPUSH
63626: CALL_OW 234
// end ;
63630: GO 63615
63632: POP
63633: POP
// end ;
63634: PPOPN 2
63636: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63637: LD_EXP 38
63641: PUSH
63642: LD_EXP 44
63646: AND
63647: IFFALSE 63731
63649: GO 63651
63651: DISABLE
63652: LD_INT 0
63654: PPUSH
63655: PPUSH
// begin enable ;
63656: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63657: LD_ADDR_VAR 0 2
63661: PUSH
63662: LD_INT 22
63664: PUSH
63665: LD_OWVAR 2
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 32
63676: PUSH
63677: LD_INT 3
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PPUSH
63688: CALL_OW 69
63692: ST_TO_ADDR
// if not tmp then
63693: LD_VAR 0 2
63697: NOT
63698: IFFALSE 63702
// exit ;
63700: GO 63731
// for i in tmp do
63702: LD_ADDR_VAR 0 1
63706: PUSH
63707: LD_VAR 0 2
63711: PUSH
63712: FOR_IN
63713: IFFALSE 63729
// begin SetLives ( i , 0 ) ;
63715: LD_VAR 0 1
63719: PPUSH
63720: LD_INT 0
63722: PPUSH
63723: CALL_OW 234
// end ;
63727: GO 63712
63729: POP
63730: POP
// end ;
63731: PPOPN 2
63733: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
63734: LD_EXP 38
63738: PUSH
63739: LD_EXP 41
63743: AND
63744: IFFALSE 63837
63746: GO 63748
63748: DISABLE
63749: LD_INT 0
63751: PPUSH
// begin enable ;
63752: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
63753: LD_ADDR_VAR 0 1
63757: PUSH
63758: LD_INT 22
63760: PUSH
63761: LD_OWVAR 2
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: PUSH
63773: LD_INT 25
63775: PUSH
63776: LD_INT 5
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 25
63785: PUSH
63786: LD_INT 9
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 25
63795: PUSH
63796: LD_INT 8
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PPUSH
63813: CALL_OW 69
63817: PUSH
63818: FOR_IN
63819: IFFALSE 63835
// begin SetClass ( i , 1 ) ;
63821: LD_VAR 0 1
63825: PPUSH
63826: LD_INT 1
63828: PPUSH
63829: CALL_OW 336
// end ;
63833: GO 63818
63835: POP
63836: POP
// end ;
63837: PPOPN 1
63839: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
63840: LD_EXP 38
63844: PUSH
63845: LD_EXP 42
63849: AND
63850: PUSH
63851: LD_OWVAR 65
63855: PUSH
63856: LD_INT 7
63858: LESS
63859: AND
63860: IFFALSE 63874
63862: GO 63864
63864: DISABLE
// begin enable ;
63865: ENABLE
// game_speed := 7 ;
63866: LD_ADDR_OWVAR 65
63870: PUSH
63871: LD_INT 7
63873: ST_TO_ADDR
// end ;
63874: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
63875: LD_EXP 38
63879: PUSH
63880: LD_EXP 45
63884: AND
63885: IFFALSE 64087
63887: GO 63889
63889: DISABLE
63890: LD_INT 0
63892: PPUSH
63893: PPUSH
63894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63895: LD_ADDR_VAR 0 3
63899: PUSH
63900: LD_INT 81
63902: PUSH
63903: LD_OWVAR 2
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 21
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PPUSH
63926: CALL_OW 69
63930: ST_TO_ADDR
// if not tmp then
63931: LD_VAR 0 3
63935: NOT
63936: IFFALSE 63940
// exit ;
63938: GO 64087
// if tmp > 5 then
63940: LD_VAR 0 3
63944: PUSH
63945: LD_INT 5
63947: GREATER
63948: IFFALSE 63960
// k := 5 else
63950: LD_ADDR_VAR 0 2
63954: PUSH
63955: LD_INT 5
63957: ST_TO_ADDR
63958: GO 63970
// k := tmp ;
63960: LD_ADDR_VAR 0 2
63964: PUSH
63965: LD_VAR 0 3
63969: ST_TO_ADDR
// for i := 1 to k do
63970: LD_ADDR_VAR 0 1
63974: PUSH
63975: DOUBLE
63976: LD_INT 1
63978: DEC
63979: ST_TO_ADDR
63980: LD_VAR 0 2
63984: PUSH
63985: FOR_TO
63986: IFFALSE 64085
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
63988: LD_VAR 0 3
63992: PUSH
63993: LD_VAR 0 1
63997: ARRAY
63998: PPUSH
63999: LD_VAR 0 1
64003: PUSH
64004: LD_INT 4
64006: MOD
64007: PUSH
64008: LD_INT 1
64010: PLUS
64011: PPUSH
64012: CALL_OW 259
64016: PUSH
64017: LD_INT 10
64019: LESS
64020: IFFALSE 64083
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64022: LD_VAR 0 3
64026: PUSH
64027: LD_VAR 0 1
64031: ARRAY
64032: PPUSH
64033: LD_VAR 0 1
64037: PUSH
64038: LD_INT 4
64040: MOD
64041: PUSH
64042: LD_INT 1
64044: PLUS
64045: PPUSH
64046: LD_VAR 0 3
64050: PUSH
64051: LD_VAR 0 1
64055: ARRAY
64056: PPUSH
64057: LD_VAR 0 1
64061: PUSH
64062: LD_INT 4
64064: MOD
64065: PUSH
64066: LD_INT 1
64068: PLUS
64069: PPUSH
64070: CALL_OW 259
64074: PUSH
64075: LD_INT 1
64077: PLUS
64078: PPUSH
64079: CALL_OW 237
64083: GO 63985
64085: POP
64086: POP
// end ;
64087: PPOPN 3
64089: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64090: LD_EXP 38
64094: PUSH
64095: LD_EXP 46
64099: AND
64100: IFFALSE 64120
64102: GO 64104
64104: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64105: LD_INT 4
64107: PPUSH
64108: LD_OWVAR 2
64112: PPUSH
64113: LD_INT 0
64115: PPUSH
64116: CALL_OW 324
64120: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64121: LD_EXP 38
64125: PUSH
64126: LD_EXP 75
64130: AND
64131: IFFALSE 64151
64133: GO 64135
64135: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64136: LD_INT 19
64138: PPUSH
64139: LD_OWVAR 2
64143: PPUSH
64144: LD_INT 0
64146: PPUSH
64147: CALL_OW 324
64151: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64152: LD_EXP 38
64156: PUSH
64157: LD_EXP 47
64161: AND
64162: IFFALSE 64264
64164: GO 64166
64166: DISABLE
64167: LD_INT 0
64169: PPUSH
64170: PPUSH
// begin enable ;
64171: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64172: LD_ADDR_VAR 0 2
64176: PUSH
64177: LD_INT 22
64179: PUSH
64180: LD_OWVAR 2
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 2
64191: PUSH
64192: LD_INT 34
64194: PUSH
64195: LD_INT 11
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 34
64204: PUSH
64205: LD_INT 30
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PPUSH
64221: CALL_OW 69
64225: ST_TO_ADDR
// if not tmp then
64226: LD_VAR 0 2
64230: NOT
64231: IFFALSE 64235
// exit ;
64233: GO 64264
// for i in tmp do
64235: LD_ADDR_VAR 0 1
64239: PUSH
64240: LD_VAR 0 2
64244: PUSH
64245: FOR_IN
64246: IFFALSE 64262
// begin SetLives ( i , 0 ) ;
64248: LD_VAR 0 1
64252: PPUSH
64253: LD_INT 0
64255: PPUSH
64256: CALL_OW 234
// end ;
64260: GO 64245
64262: POP
64263: POP
// end ;
64264: PPOPN 2
64266: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64267: LD_EXP 38
64271: PUSH
64272: LD_EXP 48
64276: AND
64277: IFFALSE 64297
64279: GO 64281
64281: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64282: LD_INT 32
64284: PPUSH
64285: LD_OWVAR 2
64289: PPUSH
64290: LD_INT 0
64292: PPUSH
64293: CALL_OW 324
64297: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64298: LD_EXP 38
64302: PUSH
64303: LD_EXP 49
64307: AND
64308: IFFALSE 64489
64310: GO 64312
64312: DISABLE
64313: LD_INT 0
64315: PPUSH
64316: PPUSH
64317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64318: LD_ADDR_VAR 0 2
64322: PUSH
64323: LD_INT 22
64325: PUSH
64326: LD_OWVAR 2
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 33
64337: PUSH
64338: LD_INT 3
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PPUSH
64349: CALL_OW 69
64353: ST_TO_ADDR
// if not tmp then
64354: LD_VAR 0 2
64358: NOT
64359: IFFALSE 64363
// exit ;
64361: GO 64489
// side := 0 ;
64363: LD_ADDR_VAR 0 3
64367: PUSH
64368: LD_INT 0
64370: ST_TO_ADDR
// for i := 1 to 8 do
64371: LD_ADDR_VAR 0 1
64375: PUSH
64376: DOUBLE
64377: LD_INT 1
64379: DEC
64380: ST_TO_ADDR
64381: LD_INT 8
64383: PUSH
64384: FOR_TO
64385: IFFALSE 64433
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64387: LD_OWVAR 2
64391: PUSH
64392: LD_VAR 0 1
64396: NONEQUAL
64397: PUSH
64398: LD_OWVAR 2
64402: PPUSH
64403: LD_VAR 0 1
64407: PPUSH
64408: CALL_OW 81
64412: PUSH
64413: LD_INT 2
64415: EQUAL
64416: AND
64417: IFFALSE 64431
// begin side := i ;
64419: LD_ADDR_VAR 0 3
64423: PUSH
64424: LD_VAR 0 1
64428: ST_TO_ADDR
// break ;
64429: GO 64433
// end ;
64431: GO 64384
64433: POP
64434: POP
// if not side then
64435: LD_VAR 0 3
64439: NOT
64440: IFFALSE 64444
// exit ;
64442: GO 64489
// for i := 1 to tmp do
64444: LD_ADDR_VAR 0 1
64448: PUSH
64449: DOUBLE
64450: LD_INT 1
64452: DEC
64453: ST_TO_ADDR
64454: LD_VAR 0 2
64458: PUSH
64459: FOR_TO
64460: IFFALSE 64487
// if Prob ( 60 ) then
64462: LD_INT 60
64464: PPUSH
64465: CALL_OW 13
64469: IFFALSE 64485
// SetSide ( i , side ) ;
64471: LD_VAR 0 1
64475: PPUSH
64476: LD_VAR 0 3
64480: PPUSH
64481: CALL_OW 235
64485: GO 64459
64487: POP
64488: POP
// end ;
64489: PPOPN 3
64491: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64492: LD_EXP 38
64496: PUSH
64497: LD_EXP 51
64501: AND
64502: IFFALSE 64621
64504: GO 64506
64506: DISABLE
64507: LD_INT 0
64509: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64510: LD_ADDR_VAR 0 1
64514: PUSH
64515: LD_INT 22
64517: PUSH
64518: LD_OWVAR 2
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 21
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 3
64539: PUSH
64540: LD_INT 23
64542: PUSH
64543: LD_INT 0
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: PPUSH
64559: CALL_OW 69
64563: PUSH
64564: FOR_IN
64565: IFFALSE 64619
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64567: LD_VAR 0 1
64571: PPUSH
64572: CALL_OW 257
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: LD_INT 2
64582: PUSH
64583: LD_INT 3
64585: PUSH
64586: LD_INT 4
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: IN
64595: IFFALSE 64617
// SetClass ( un , rand ( 1 , 4 ) ) ;
64597: LD_VAR 0 1
64601: PPUSH
64602: LD_INT 1
64604: PPUSH
64605: LD_INT 4
64607: PPUSH
64608: CALL_OW 12
64612: PPUSH
64613: CALL_OW 336
64617: GO 64564
64619: POP
64620: POP
// end ;
64621: PPOPN 1
64623: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64624: LD_EXP 38
64628: PUSH
64629: LD_EXP 50
64633: AND
64634: IFFALSE 64713
64636: GO 64638
64638: DISABLE
64639: LD_INT 0
64641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64642: LD_ADDR_VAR 0 1
64646: PUSH
64647: LD_INT 22
64649: PUSH
64650: LD_OWVAR 2
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 21
64661: PUSH
64662: LD_INT 3
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PPUSH
64673: CALL_OW 69
64677: ST_TO_ADDR
// if not tmp then
64678: LD_VAR 0 1
64682: NOT
64683: IFFALSE 64687
// exit ;
64685: GO 64713
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
64687: LD_VAR 0 1
64691: PUSH
64692: LD_INT 1
64694: PPUSH
64695: LD_VAR 0 1
64699: PPUSH
64700: CALL_OW 12
64704: ARRAY
64705: PPUSH
64706: LD_INT 100
64708: PPUSH
64709: CALL_OW 234
// end ;
64713: PPOPN 1
64715: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
64716: LD_EXP 38
64720: PUSH
64721: LD_EXP 52
64725: AND
64726: IFFALSE 64824
64728: GO 64730
64730: DISABLE
64731: LD_INT 0
64733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64734: LD_ADDR_VAR 0 1
64738: PUSH
64739: LD_INT 22
64741: PUSH
64742: LD_OWVAR 2
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 21
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PPUSH
64765: CALL_OW 69
64769: ST_TO_ADDR
// if not tmp then
64770: LD_VAR 0 1
64774: NOT
64775: IFFALSE 64779
// exit ;
64777: GO 64824
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
64779: LD_VAR 0 1
64783: PUSH
64784: LD_INT 1
64786: PPUSH
64787: LD_VAR 0 1
64791: PPUSH
64792: CALL_OW 12
64796: ARRAY
64797: PPUSH
64798: LD_INT 1
64800: PPUSH
64801: LD_INT 4
64803: PPUSH
64804: CALL_OW 12
64808: PPUSH
64809: LD_INT 3000
64811: PPUSH
64812: LD_INT 9000
64814: PPUSH
64815: CALL_OW 12
64819: PPUSH
64820: CALL_OW 492
// end ;
64824: PPOPN 1
64826: END
// every 0 0$1 trigger StreamModeActive and sDepot do
64827: LD_EXP 38
64831: PUSH
64832: LD_EXP 53
64836: AND
64837: IFFALSE 64857
64839: GO 64841
64841: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
64842: LD_INT 1
64844: PPUSH
64845: LD_OWVAR 2
64849: PPUSH
64850: LD_INT 0
64852: PPUSH
64853: CALL_OW 324
64857: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
64858: LD_EXP 38
64862: PUSH
64863: LD_EXP 54
64867: AND
64868: IFFALSE 64951
64870: GO 64872
64872: DISABLE
64873: LD_INT 0
64875: PPUSH
64876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64877: LD_ADDR_VAR 0 2
64881: PUSH
64882: LD_INT 22
64884: PUSH
64885: LD_OWVAR 2
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 21
64896: PUSH
64897: LD_INT 3
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PPUSH
64908: CALL_OW 69
64912: ST_TO_ADDR
// if not tmp then
64913: LD_VAR 0 2
64917: NOT
64918: IFFALSE 64922
// exit ;
64920: GO 64951
// for i in tmp do
64922: LD_ADDR_VAR 0 1
64926: PUSH
64927: LD_VAR 0 2
64931: PUSH
64932: FOR_IN
64933: IFFALSE 64949
// SetBLevel ( i , 10 ) ;
64935: LD_VAR 0 1
64939: PPUSH
64940: LD_INT 10
64942: PPUSH
64943: CALL_OW 241
64947: GO 64932
64949: POP
64950: POP
// end ;
64951: PPOPN 2
64953: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
64954: LD_EXP 38
64958: PUSH
64959: LD_EXP 55
64963: AND
64964: IFFALSE 65075
64966: GO 64968
64968: DISABLE
64969: LD_INT 0
64971: PPUSH
64972: PPUSH
64973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64974: LD_ADDR_VAR 0 3
64978: PUSH
64979: LD_INT 22
64981: PUSH
64982: LD_OWVAR 2
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 25
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PPUSH
65005: CALL_OW 69
65009: ST_TO_ADDR
// if not tmp then
65010: LD_VAR 0 3
65014: NOT
65015: IFFALSE 65019
// exit ;
65017: GO 65075
// un := tmp [ rand ( 1 , tmp ) ] ;
65019: LD_ADDR_VAR 0 2
65023: PUSH
65024: LD_VAR 0 3
65028: PUSH
65029: LD_INT 1
65031: PPUSH
65032: LD_VAR 0 3
65036: PPUSH
65037: CALL_OW 12
65041: ARRAY
65042: ST_TO_ADDR
// if Crawls ( un ) then
65043: LD_VAR 0 2
65047: PPUSH
65048: CALL_OW 318
65052: IFFALSE 65063
// ComWalk ( un ) ;
65054: LD_VAR 0 2
65058: PPUSH
65059: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65063: LD_VAR 0 2
65067: PPUSH
65068: LD_INT 5
65070: PPUSH
65071: CALL_OW 336
// end ;
65075: PPOPN 3
65077: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65078: LD_EXP 38
65082: PUSH
65083: LD_EXP 56
65087: AND
65088: PUSH
65089: LD_OWVAR 67
65093: PUSH
65094: LD_INT 4
65096: LESS
65097: AND
65098: IFFALSE 65117
65100: GO 65102
65102: DISABLE
// begin Difficulty := Difficulty + 1 ;
65103: LD_ADDR_OWVAR 67
65107: PUSH
65108: LD_OWVAR 67
65112: PUSH
65113: LD_INT 1
65115: PLUS
65116: ST_TO_ADDR
// end ;
65117: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65118: LD_EXP 38
65122: PUSH
65123: LD_EXP 57
65127: AND
65128: IFFALSE 65231
65130: GO 65132
65132: DISABLE
65133: LD_INT 0
65135: PPUSH
// begin for i := 1 to 5 do
65136: LD_ADDR_VAR 0 1
65140: PUSH
65141: DOUBLE
65142: LD_INT 1
65144: DEC
65145: ST_TO_ADDR
65146: LD_INT 5
65148: PUSH
65149: FOR_TO
65150: IFFALSE 65229
// begin uc_nation := nation_nature ;
65152: LD_ADDR_OWVAR 21
65156: PUSH
65157: LD_INT 0
65159: ST_TO_ADDR
// uc_side := 0 ;
65160: LD_ADDR_OWVAR 20
65164: PUSH
65165: LD_INT 0
65167: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65168: LD_ADDR_OWVAR 29
65172: PUSH
65173: LD_INT 12
65175: PUSH
65176: LD_INT 12
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: ST_TO_ADDR
// hc_agressivity := 20 ;
65183: LD_ADDR_OWVAR 35
65187: PUSH
65188: LD_INT 20
65190: ST_TO_ADDR
// hc_class := class_tiger ;
65191: LD_ADDR_OWVAR 28
65195: PUSH
65196: LD_INT 14
65198: ST_TO_ADDR
// hc_gallery :=  ;
65199: LD_ADDR_OWVAR 33
65203: PUSH
65204: LD_STRING 
65206: ST_TO_ADDR
// hc_name :=  ;
65207: LD_ADDR_OWVAR 26
65211: PUSH
65212: LD_STRING 
65214: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65215: CALL_OW 44
65219: PPUSH
65220: LD_INT 0
65222: PPUSH
65223: CALL_OW 51
// end ;
65227: GO 65149
65229: POP
65230: POP
// end ;
65231: PPOPN 1
65233: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65234: LD_EXP 38
65238: PUSH
65239: LD_EXP 58
65243: AND
65244: IFFALSE 65253
65246: GO 65248
65248: DISABLE
// StreamSibBomb ;
65249: CALL 65254 0 0
65253: END
// export function StreamSibBomb ; var i , x , y ; begin
65254: LD_INT 0
65256: PPUSH
65257: PPUSH
65258: PPUSH
65259: PPUSH
// result := false ;
65260: LD_ADDR_VAR 0 1
65264: PUSH
65265: LD_INT 0
65267: ST_TO_ADDR
// for i := 1 to 16 do
65268: LD_ADDR_VAR 0 2
65272: PUSH
65273: DOUBLE
65274: LD_INT 1
65276: DEC
65277: ST_TO_ADDR
65278: LD_INT 16
65280: PUSH
65281: FOR_TO
65282: IFFALSE 65481
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65284: LD_ADDR_VAR 0 3
65288: PUSH
65289: LD_INT 10
65291: PUSH
65292: LD_INT 20
65294: PUSH
65295: LD_INT 30
65297: PUSH
65298: LD_INT 40
65300: PUSH
65301: LD_INT 50
65303: PUSH
65304: LD_INT 60
65306: PUSH
65307: LD_INT 70
65309: PUSH
65310: LD_INT 80
65312: PUSH
65313: LD_INT 90
65315: PUSH
65316: LD_INT 100
65318: PUSH
65319: LD_INT 110
65321: PUSH
65322: LD_INT 120
65324: PUSH
65325: LD_INT 130
65327: PUSH
65328: LD_INT 140
65330: PUSH
65331: LD_INT 150
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 1
65353: PPUSH
65354: LD_INT 15
65356: PPUSH
65357: CALL_OW 12
65361: ARRAY
65362: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65363: LD_ADDR_VAR 0 4
65367: PUSH
65368: LD_INT 10
65370: PUSH
65371: LD_INT 20
65373: PUSH
65374: LD_INT 30
65376: PUSH
65377: LD_INT 40
65379: PUSH
65380: LD_INT 50
65382: PUSH
65383: LD_INT 60
65385: PUSH
65386: LD_INT 70
65388: PUSH
65389: LD_INT 80
65391: PUSH
65392: LD_INT 90
65394: PUSH
65395: LD_INT 100
65397: PUSH
65398: LD_INT 110
65400: PUSH
65401: LD_INT 120
65403: PUSH
65404: LD_INT 130
65406: PUSH
65407: LD_INT 140
65409: PUSH
65410: LD_INT 150
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 1
65432: PPUSH
65433: LD_INT 15
65435: PPUSH
65436: CALL_OW 12
65440: ARRAY
65441: ST_TO_ADDR
// if ValidHex ( x , y ) then
65442: LD_VAR 0 3
65446: PPUSH
65447: LD_VAR 0 4
65451: PPUSH
65452: CALL_OW 488
65456: IFFALSE 65479
// begin result := [ x , y ] ;
65458: LD_ADDR_VAR 0 1
65462: PUSH
65463: LD_VAR 0 3
65467: PUSH
65468: LD_VAR 0 4
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: ST_TO_ADDR
// break ;
65477: GO 65481
// end ; end ;
65479: GO 65281
65481: POP
65482: POP
// if result then
65483: LD_VAR 0 1
65487: IFFALSE 65547
// begin ToLua ( playSibBomb() ) ;
65489: LD_STRING playSibBomb()
65491: PPUSH
65492: CALL_OW 559
// wait ( 0 0$14 ) ;
65496: LD_INT 490
65498: PPUSH
65499: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65503: LD_VAR 0 1
65507: PUSH
65508: LD_INT 1
65510: ARRAY
65511: PPUSH
65512: LD_VAR 0 1
65516: PUSH
65517: LD_INT 2
65519: ARRAY
65520: PPUSH
65521: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65525: LD_VAR 0 1
65529: PUSH
65530: LD_INT 1
65532: ARRAY
65533: PPUSH
65534: LD_VAR 0 1
65538: PUSH
65539: LD_INT 2
65541: ARRAY
65542: PPUSH
65543: CALL_OW 429
// end ; end ;
65547: LD_VAR 0 1
65551: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65552: LD_EXP 38
65556: PUSH
65557: LD_EXP 60
65561: AND
65562: IFFALSE 65574
65564: GO 65566
65566: DISABLE
// YouLost (  ) ;
65567: LD_STRING 
65569: PPUSH
65570: CALL_OW 104
65574: END
// every 0 0$1 trigger StreamModeActive and sFog do
65575: LD_EXP 38
65579: PUSH
65580: LD_EXP 59
65584: AND
65585: IFFALSE 65599
65587: GO 65589
65589: DISABLE
// FogOff ( your_side ) ;
65590: LD_OWVAR 2
65594: PPUSH
65595: CALL_OW 344
65599: END
// every 0 0$1 trigger StreamModeActive and sSun do
65600: LD_EXP 38
65604: PUSH
65605: LD_EXP 61
65609: AND
65610: IFFALSE 65638
65612: GO 65614
65614: DISABLE
// begin solar_recharge_percent := 0 ;
65615: LD_ADDR_OWVAR 79
65619: PUSH
65620: LD_INT 0
65622: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65623: LD_INT 10500
65625: PPUSH
65626: CALL_OW 67
// solar_recharge_percent := 100 ;
65630: LD_ADDR_OWVAR 79
65634: PUSH
65635: LD_INT 100
65637: ST_TO_ADDR
// end ;
65638: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65639: LD_EXP 38
65643: PUSH
65644: LD_EXP 62
65648: AND
65649: IFFALSE 65888
65651: GO 65653
65653: DISABLE
65654: LD_INT 0
65656: PPUSH
65657: PPUSH
65658: PPUSH
// begin tmp := [ ] ;
65659: LD_ADDR_VAR 0 3
65663: PUSH
65664: EMPTY
65665: ST_TO_ADDR
// for i := 1 to 6 do
65666: LD_ADDR_VAR 0 1
65670: PUSH
65671: DOUBLE
65672: LD_INT 1
65674: DEC
65675: ST_TO_ADDR
65676: LD_INT 6
65678: PUSH
65679: FOR_TO
65680: IFFALSE 65785
// begin uc_nation := nation_nature ;
65682: LD_ADDR_OWVAR 21
65686: PUSH
65687: LD_INT 0
65689: ST_TO_ADDR
// uc_side := 0 ;
65690: LD_ADDR_OWVAR 20
65694: PUSH
65695: LD_INT 0
65697: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65698: LD_ADDR_OWVAR 29
65702: PUSH
65703: LD_INT 12
65705: PUSH
65706: LD_INT 12
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: ST_TO_ADDR
// hc_agressivity := 20 ;
65713: LD_ADDR_OWVAR 35
65717: PUSH
65718: LD_INT 20
65720: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
65721: LD_ADDR_OWVAR 28
65725: PUSH
65726: LD_INT 17
65728: ST_TO_ADDR
// hc_gallery :=  ;
65729: LD_ADDR_OWVAR 33
65733: PUSH
65734: LD_STRING 
65736: ST_TO_ADDR
// hc_name :=  ;
65737: LD_ADDR_OWVAR 26
65741: PUSH
65742: LD_STRING 
65744: ST_TO_ADDR
// un := CreateHuman ;
65745: LD_ADDR_VAR 0 2
65749: PUSH
65750: CALL_OW 44
65754: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
65755: LD_VAR 0 2
65759: PPUSH
65760: LD_INT 1
65762: PPUSH
65763: CALL_OW 51
// tmp := tmp ^ un ;
65767: LD_ADDR_VAR 0 3
65771: PUSH
65772: LD_VAR 0 3
65776: PUSH
65777: LD_VAR 0 2
65781: ADD
65782: ST_TO_ADDR
// end ;
65783: GO 65679
65785: POP
65786: POP
// repeat wait ( 0 0$1 ) ;
65787: LD_INT 35
65789: PPUSH
65790: CALL_OW 67
// for un in tmp do
65794: LD_ADDR_VAR 0 2
65798: PUSH
65799: LD_VAR 0 3
65803: PUSH
65804: FOR_IN
65805: IFFALSE 65879
// begin if IsDead ( un ) then
65807: LD_VAR 0 2
65811: PPUSH
65812: CALL_OW 301
65816: IFFALSE 65836
// begin tmp := tmp diff un ;
65818: LD_ADDR_VAR 0 3
65822: PUSH
65823: LD_VAR 0 3
65827: PUSH
65828: LD_VAR 0 2
65832: DIFF
65833: ST_TO_ADDR
// continue ;
65834: GO 65804
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
65836: LD_VAR 0 2
65840: PPUSH
65841: LD_INT 3
65843: PUSH
65844: LD_INT 22
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PPUSH
65858: CALL_OW 69
65862: PPUSH
65863: LD_VAR 0 2
65867: PPUSH
65868: CALL_OW 74
65872: PPUSH
65873: CALL_OW 115
// end ;
65877: GO 65804
65879: POP
65880: POP
// until not tmp ;
65881: LD_VAR 0 3
65885: NOT
65886: IFFALSE 65787
// end ;
65888: PPOPN 3
65890: END
// every 0 0$1 trigger StreamModeActive and sTroll do
65891: LD_EXP 38
65895: PUSH
65896: LD_EXP 63
65900: AND
65901: IFFALSE 65955
65903: GO 65905
65905: DISABLE
// begin ToLua ( displayTroll(); ) ;
65906: LD_STRING displayTroll();
65908: PPUSH
65909: CALL_OW 559
// wait ( 3 3$00 ) ;
65913: LD_INT 6300
65915: PPUSH
65916: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65920: LD_STRING hideTroll();
65922: PPUSH
65923: CALL_OW 559
// wait ( 1 1$00 ) ;
65927: LD_INT 2100
65929: PPUSH
65930: CALL_OW 67
// ToLua ( displayTroll(); ) ;
65934: LD_STRING displayTroll();
65936: PPUSH
65937: CALL_OW 559
// wait ( 1 1$00 ) ;
65941: LD_INT 2100
65943: PPUSH
65944: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65948: LD_STRING hideTroll();
65950: PPUSH
65951: CALL_OW 559
// end ;
65955: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
65956: LD_EXP 38
65960: PUSH
65961: LD_EXP 64
65965: AND
65966: IFFALSE 66029
65968: GO 65970
65970: DISABLE
65971: LD_INT 0
65973: PPUSH
// begin p := 0 ;
65974: LD_ADDR_VAR 0 1
65978: PUSH
65979: LD_INT 0
65981: ST_TO_ADDR
// repeat game_speed := 1 ;
65982: LD_ADDR_OWVAR 65
65986: PUSH
65987: LD_INT 1
65989: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65990: LD_INT 35
65992: PPUSH
65993: CALL_OW 67
// p := p + 1 ;
65997: LD_ADDR_VAR 0 1
66001: PUSH
66002: LD_VAR 0 1
66006: PUSH
66007: LD_INT 1
66009: PLUS
66010: ST_TO_ADDR
// until p >= 60 ;
66011: LD_VAR 0 1
66015: PUSH
66016: LD_INT 60
66018: GREATEREQUAL
66019: IFFALSE 65982
// game_speed := 4 ;
66021: LD_ADDR_OWVAR 65
66025: PUSH
66026: LD_INT 4
66028: ST_TO_ADDR
// end ;
66029: PPOPN 1
66031: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66032: LD_EXP 38
66036: PUSH
66037: LD_EXP 65
66041: AND
66042: IFFALSE 66188
66044: GO 66046
66046: DISABLE
66047: LD_INT 0
66049: PPUSH
66050: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66051: LD_ADDR_VAR 0 1
66055: PUSH
66056: LD_INT 22
66058: PUSH
66059: LD_OWVAR 2
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 2
66070: PUSH
66071: LD_INT 30
66073: PUSH
66074: LD_INT 0
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 30
66083: PUSH
66084: LD_INT 1
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: LIST
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PPUSH
66100: CALL_OW 69
66104: ST_TO_ADDR
// if not depot then
66105: LD_VAR 0 1
66109: NOT
66110: IFFALSE 66114
// exit ;
66112: GO 66188
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66114: LD_ADDR_VAR 0 2
66118: PUSH
66119: LD_VAR 0 1
66123: PUSH
66124: LD_INT 1
66126: PPUSH
66127: LD_VAR 0 1
66131: PPUSH
66132: CALL_OW 12
66136: ARRAY
66137: PPUSH
66138: CALL_OW 274
66142: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66143: LD_VAR 0 2
66147: PPUSH
66148: LD_INT 1
66150: PPUSH
66151: LD_INT 0
66153: PPUSH
66154: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66158: LD_VAR 0 2
66162: PPUSH
66163: LD_INT 2
66165: PPUSH
66166: LD_INT 0
66168: PPUSH
66169: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66173: LD_VAR 0 2
66177: PPUSH
66178: LD_INT 3
66180: PPUSH
66181: LD_INT 0
66183: PPUSH
66184: CALL_OW 277
// end ;
66188: PPOPN 2
66190: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66191: LD_EXP 38
66195: PUSH
66196: LD_EXP 66
66200: AND
66201: IFFALSE 66298
66203: GO 66205
66205: DISABLE
66206: LD_INT 0
66208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66209: LD_ADDR_VAR 0 1
66213: PUSH
66214: LD_INT 22
66216: PUSH
66217: LD_OWVAR 2
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 21
66228: PUSH
66229: LD_INT 1
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 3
66238: PUSH
66239: LD_INT 23
66241: PUSH
66242: LD_INT 0
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: LIST
66257: PPUSH
66258: CALL_OW 69
66262: ST_TO_ADDR
// if not tmp then
66263: LD_VAR 0 1
66267: NOT
66268: IFFALSE 66272
// exit ;
66270: GO 66298
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66272: LD_VAR 0 1
66276: PUSH
66277: LD_INT 1
66279: PPUSH
66280: LD_VAR 0 1
66284: PPUSH
66285: CALL_OW 12
66289: ARRAY
66290: PPUSH
66291: LD_INT 200
66293: PPUSH
66294: CALL_OW 234
// end ;
66298: PPOPN 1
66300: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66301: LD_EXP 38
66305: PUSH
66306: LD_EXP 67
66310: AND
66311: IFFALSE 66390
66313: GO 66315
66315: DISABLE
66316: LD_INT 0
66318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66319: LD_ADDR_VAR 0 1
66323: PUSH
66324: LD_INT 22
66326: PUSH
66327: LD_OWVAR 2
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 21
66338: PUSH
66339: LD_INT 2
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PPUSH
66350: CALL_OW 69
66354: ST_TO_ADDR
// if not tmp then
66355: LD_VAR 0 1
66359: NOT
66360: IFFALSE 66364
// exit ;
66362: GO 66390
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66364: LD_VAR 0 1
66368: PUSH
66369: LD_INT 1
66371: PPUSH
66372: LD_VAR 0 1
66376: PPUSH
66377: CALL_OW 12
66381: ARRAY
66382: PPUSH
66383: LD_INT 60
66385: PPUSH
66386: CALL_OW 234
// end ;
66390: PPOPN 1
66392: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66393: LD_EXP 38
66397: PUSH
66398: LD_EXP 68
66402: AND
66403: IFFALSE 66502
66405: GO 66407
66407: DISABLE
66408: LD_INT 0
66410: PPUSH
66411: PPUSH
// begin enable ;
66412: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66413: LD_ADDR_VAR 0 1
66417: PUSH
66418: LD_INT 22
66420: PUSH
66421: LD_OWVAR 2
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 61
66432: PUSH
66433: EMPTY
66434: LIST
66435: PUSH
66436: LD_INT 33
66438: PUSH
66439: LD_INT 2
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: LIST
66450: PPUSH
66451: CALL_OW 69
66455: ST_TO_ADDR
// if not tmp then
66456: LD_VAR 0 1
66460: NOT
66461: IFFALSE 66465
// exit ;
66463: GO 66502
// for i in tmp do
66465: LD_ADDR_VAR 0 2
66469: PUSH
66470: LD_VAR 0 1
66474: PUSH
66475: FOR_IN
66476: IFFALSE 66500
// if IsControledBy ( i ) then
66478: LD_VAR 0 2
66482: PPUSH
66483: CALL_OW 312
66487: IFFALSE 66498
// ComUnlink ( i ) ;
66489: LD_VAR 0 2
66493: PPUSH
66494: CALL_OW 136
66498: GO 66475
66500: POP
66501: POP
// end ;
66502: PPOPN 2
66504: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66505: LD_EXP 38
66509: PUSH
66510: LD_EXP 69
66514: AND
66515: IFFALSE 66655
66517: GO 66519
66519: DISABLE
66520: LD_INT 0
66522: PPUSH
66523: PPUSH
// begin ToLua ( displayPowell(); ) ;
66524: LD_STRING displayPowell();
66526: PPUSH
66527: CALL_OW 559
// uc_side := 0 ;
66531: LD_ADDR_OWVAR 20
66535: PUSH
66536: LD_INT 0
66538: ST_TO_ADDR
// uc_nation := 2 ;
66539: LD_ADDR_OWVAR 21
66543: PUSH
66544: LD_INT 2
66546: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66547: LD_ADDR_OWVAR 37
66551: PUSH
66552: LD_INT 14
66554: ST_TO_ADDR
// vc_engine := engine_siberite ;
66555: LD_ADDR_OWVAR 39
66559: PUSH
66560: LD_INT 3
66562: ST_TO_ADDR
// vc_control := control_apeman ;
66563: LD_ADDR_OWVAR 38
66567: PUSH
66568: LD_INT 5
66570: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66571: LD_ADDR_OWVAR 40
66575: PUSH
66576: LD_INT 29
66578: ST_TO_ADDR
// un := CreateVehicle ;
66579: LD_ADDR_VAR 0 2
66583: PUSH
66584: CALL_OW 45
66588: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66589: LD_VAR 0 2
66593: PPUSH
66594: LD_INT 1
66596: PPUSH
66597: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66601: LD_INT 35
66603: PPUSH
66604: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66608: LD_VAR 0 2
66612: PPUSH
66613: LD_INT 22
66615: PUSH
66616: LD_OWVAR 2
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PPUSH
66625: CALL_OW 69
66629: PPUSH
66630: LD_VAR 0 2
66634: PPUSH
66635: CALL_OW 74
66639: PPUSH
66640: CALL_OW 115
// until IsDead ( un ) ;
66644: LD_VAR 0 2
66648: PPUSH
66649: CALL_OW 301
66653: IFFALSE 66601
// end ;
66655: PPOPN 2
66657: END
// every 0 0$1 trigger StreamModeActive and sStu do
66658: LD_EXP 38
66662: PUSH
66663: LD_EXP 77
66667: AND
66668: IFFALSE 66684
66670: GO 66672
66672: DISABLE
// begin ToLua ( displayStucuk(); ) ;
66673: LD_STRING displayStucuk();
66675: PPUSH
66676: CALL_OW 559
// ResetFog ;
66680: CALL_OW 335
// end ;
66684: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
66685: LD_EXP 38
66689: PUSH
66690: LD_EXP 70
66694: AND
66695: IFFALSE 66836
66697: GO 66699
66699: DISABLE
66700: LD_INT 0
66702: PPUSH
66703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66704: LD_ADDR_VAR 0 2
66708: PUSH
66709: LD_INT 22
66711: PUSH
66712: LD_OWVAR 2
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 21
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PPUSH
66735: CALL_OW 69
66739: ST_TO_ADDR
// if not tmp then
66740: LD_VAR 0 2
66744: NOT
66745: IFFALSE 66749
// exit ;
66747: GO 66836
// un := tmp [ rand ( 1 , tmp ) ] ;
66749: LD_ADDR_VAR 0 1
66753: PUSH
66754: LD_VAR 0 2
66758: PUSH
66759: LD_INT 1
66761: PPUSH
66762: LD_VAR 0 2
66766: PPUSH
66767: CALL_OW 12
66771: ARRAY
66772: ST_TO_ADDR
// SetSide ( un , 0 ) ;
66773: LD_VAR 0 1
66777: PPUSH
66778: LD_INT 0
66780: PPUSH
66781: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
66785: LD_VAR 0 1
66789: PPUSH
66790: LD_OWVAR 3
66794: PUSH
66795: LD_VAR 0 1
66799: DIFF
66800: PPUSH
66801: LD_VAR 0 1
66805: PPUSH
66806: CALL_OW 74
66810: PPUSH
66811: CALL_OW 115
// wait ( 0 0$20 ) ;
66815: LD_INT 700
66817: PPUSH
66818: CALL_OW 67
// SetSide ( un , your_side ) ;
66822: LD_VAR 0 1
66826: PPUSH
66827: LD_OWVAR 2
66831: PPUSH
66832: CALL_OW 235
// end ;
66836: PPOPN 2
66838: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
66839: LD_EXP 38
66843: PUSH
66844: LD_EXP 71
66848: AND
66849: IFFALSE 66955
66851: GO 66853
66853: DISABLE
66854: LD_INT 0
66856: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66857: LD_ADDR_VAR 0 1
66861: PUSH
66862: LD_INT 22
66864: PUSH
66865: LD_OWVAR 2
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 2
66876: PUSH
66877: LD_INT 30
66879: PUSH
66880: LD_INT 0
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 30
66889: PUSH
66890: LD_INT 1
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: LIST
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PPUSH
66906: CALL_OW 69
66910: ST_TO_ADDR
// if not depot then
66911: LD_VAR 0 1
66915: NOT
66916: IFFALSE 66920
// exit ;
66918: GO 66955
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
66920: LD_VAR 0 1
66924: PUSH
66925: LD_INT 1
66927: ARRAY
66928: PPUSH
66929: CALL_OW 250
66933: PPUSH
66934: LD_VAR 0 1
66938: PUSH
66939: LD_INT 1
66941: ARRAY
66942: PPUSH
66943: CALL_OW 251
66947: PPUSH
66948: LD_INT 70
66950: PPUSH
66951: CALL_OW 495
// end ;
66955: PPOPN 1
66957: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
66958: LD_EXP 38
66962: PUSH
66963: LD_EXP 72
66967: AND
66968: IFFALSE 67179
66970: GO 66972
66972: DISABLE
66973: LD_INT 0
66975: PPUSH
66976: PPUSH
66977: PPUSH
66978: PPUSH
66979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66980: LD_ADDR_VAR 0 5
66984: PUSH
66985: LD_INT 22
66987: PUSH
66988: LD_OWVAR 2
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 21
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PPUSH
67011: CALL_OW 69
67015: ST_TO_ADDR
// if not tmp then
67016: LD_VAR 0 5
67020: NOT
67021: IFFALSE 67025
// exit ;
67023: GO 67179
// for i in tmp do
67025: LD_ADDR_VAR 0 1
67029: PUSH
67030: LD_VAR 0 5
67034: PUSH
67035: FOR_IN
67036: IFFALSE 67177
// begin d := rand ( 0 , 5 ) ;
67038: LD_ADDR_VAR 0 4
67042: PUSH
67043: LD_INT 0
67045: PPUSH
67046: LD_INT 5
67048: PPUSH
67049: CALL_OW 12
67053: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67054: LD_ADDR_VAR 0 2
67058: PUSH
67059: LD_VAR 0 1
67063: PPUSH
67064: CALL_OW 250
67068: PPUSH
67069: LD_VAR 0 4
67073: PPUSH
67074: LD_INT 3
67076: PPUSH
67077: LD_INT 12
67079: PPUSH
67080: CALL_OW 12
67084: PPUSH
67085: CALL_OW 272
67089: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67090: LD_ADDR_VAR 0 3
67094: PUSH
67095: LD_VAR 0 1
67099: PPUSH
67100: CALL_OW 251
67104: PPUSH
67105: LD_VAR 0 4
67109: PPUSH
67110: LD_INT 3
67112: PPUSH
67113: LD_INT 12
67115: PPUSH
67116: CALL_OW 12
67120: PPUSH
67121: CALL_OW 273
67125: ST_TO_ADDR
// if ValidHex ( x , y ) then
67126: LD_VAR 0 2
67130: PPUSH
67131: LD_VAR 0 3
67135: PPUSH
67136: CALL_OW 488
67140: IFFALSE 67175
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67142: LD_VAR 0 1
67146: PPUSH
67147: LD_VAR 0 2
67151: PPUSH
67152: LD_VAR 0 3
67156: PPUSH
67157: LD_INT 3
67159: PPUSH
67160: LD_INT 6
67162: PPUSH
67163: CALL_OW 12
67167: PPUSH
67168: LD_INT 1
67170: PPUSH
67171: CALL_OW 483
// end ;
67175: GO 67035
67177: POP
67178: POP
// end ;
67179: PPOPN 5
67181: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67182: LD_EXP 38
67186: PUSH
67187: LD_EXP 73
67191: AND
67192: IFFALSE 67286
67194: GO 67196
67196: DISABLE
67197: LD_INT 0
67199: PPUSH
67200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67201: LD_ADDR_VAR 0 2
67205: PUSH
67206: LD_INT 22
67208: PUSH
67209: LD_OWVAR 2
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 32
67220: PUSH
67221: LD_INT 1
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 21
67230: PUSH
67231: LD_INT 2
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: LIST
67242: PPUSH
67243: CALL_OW 69
67247: ST_TO_ADDR
// if not tmp then
67248: LD_VAR 0 2
67252: NOT
67253: IFFALSE 67257
// exit ;
67255: GO 67286
// for i in tmp do
67257: LD_ADDR_VAR 0 1
67261: PUSH
67262: LD_VAR 0 2
67266: PUSH
67267: FOR_IN
67268: IFFALSE 67284
// SetFuel ( i , 0 ) ;
67270: LD_VAR 0 1
67274: PPUSH
67275: LD_INT 0
67277: PPUSH
67278: CALL_OW 240
67282: GO 67267
67284: POP
67285: POP
// end ;
67286: PPOPN 2
67288: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67289: LD_EXP 38
67293: PUSH
67294: LD_EXP 74
67298: AND
67299: IFFALSE 67365
67301: GO 67303
67303: DISABLE
67304: LD_INT 0
67306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67307: LD_ADDR_VAR 0 1
67311: PUSH
67312: LD_INT 22
67314: PUSH
67315: LD_OWVAR 2
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 30
67326: PUSH
67327: LD_INT 29
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PPUSH
67338: CALL_OW 69
67342: ST_TO_ADDR
// if not tmp then
67343: LD_VAR 0 1
67347: NOT
67348: IFFALSE 67352
// exit ;
67350: GO 67365
// DestroyUnit ( tmp [ 1 ] ) ;
67352: LD_VAR 0 1
67356: PUSH
67357: LD_INT 1
67359: ARRAY
67360: PPUSH
67361: CALL_OW 65
// end ;
67365: PPOPN 1
67367: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67368: LD_EXP 38
67372: PUSH
67373: LD_EXP 76
67377: AND
67378: IFFALSE 67507
67380: GO 67382
67382: DISABLE
67383: LD_INT 0
67385: PPUSH
// begin uc_side := 0 ;
67386: LD_ADDR_OWVAR 20
67390: PUSH
67391: LD_INT 0
67393: ST_TO_ADDR
// uc_nation := nation_arabian ;
67394: LD_ADDR_OWVAR 21
67398: PUSH
67399: LD_INT 2
67401: ST_TO_ADDR
// hc_gallery :=  ;
67402: LD_ADDR_OWVAR 33
67406: PUSH
67407: LD_STRING 
67409: ST_TO_ADDR
// hc_name :=  ;
67410: LD_ADDR_OWVAR 26
67414: PUSH
67415: LD_STRING 
67417: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67418: LD_INT 1
67420: PPUSH
67421: LD_INT 11
67423: PPUSH
67424: LD_INT 10
67426: PPUSH
67427: CALL_OW 380
// un := CreateHuman ;
67431: LD_ADDR_VAR 0 1
67435: PUSH
67436: CALL_OW 44
67440: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67441: LD_VAR 0 1
67445: PPUSH
67446: LD_INT 1
67448: PPUSH
67449: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67453: LD_INT 35
67455: PPUSH
67456: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67460: LD_VAR 0 1
67464: PPUSH
67465: LD_INT 22
67467: PUSH
67468: LD_OWVAR 2
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PPUSH
67477: CALL_OW 69
67481: PPUSH
67482: LD_VAR 0 1
67486: PPUSH
67487: CALL_OW 74
67491: PPUSH
67492: CALL_OW 115
// until IsDead ( un ) ;
67496: LD_VAR 0 1
67500: PPUSH
67501: CALL_OW 301
67505: IFFALSE 67453
// end ;
67507: PPOPN 1
67509: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67510: LD_EXP 38
67514: PUSH
67515: LD_EXP 78
67519: AND
67520: IFFALSE 67532
67522: GO 67524
67524: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67525: LD_STRING earthquake(getX(game), 0, 32)
67527: PPUSH
67528: CALL_OW 559
67532: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67533: LD_EXP 38
67537: PUSH
67538: LD_EXP 79
67542: AND
67543: IFFALSE 67634
67545: GO 67547
67547: DISABLE
67548: LD_INT 0
67550: PPUSH
// begin enable ;
67551: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67552: LD_ADDR_VAR 0 1
67556: PUSH
67557: LD_INT 22
67559: PUSH
67560: LD_OWVAR 2
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 21
67571: PUSH
67572: LD_INT 2
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 33
67581: PUSH
67582: LD_INT 3
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: PPUSH
67594: CALL_OW 69
67598: ST_TO_ADDR
// if not tmp then
67599: LD_VAR 0 1
67603: NOT
67604: IFFALSE 67608
// exit ;
67606: GO 67634
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67608: LD_VAR 0 1
67612: PUSH
67613: LD_INT 1
67615: PPUSH
67616: LD_VAR 0 1
67620: PPUSH
67621: CALL_OW 12
67625: ARRAY
67626: PPUSH
67627: LD_INT 1
67629: PPUSH
67630: CALL_OW 234
// end ;
67634: PPOPN 1
67636: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67637: LD_EXP 38
67641: PUSH
67642: LD_EXP 80
67646: AND
67647: IFFALSE 67788
67649: GO 67651
67651: DISABLE
67652: LD_INT 0
67654: PPUSH
67655: PPUSH
67656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67657: LD_ADDR_VAR 0 3
67661: PUSH
67662: LD_INT 22
67664: PUSH
67665: LD_OWVAR 2
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 25
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PPUSH
67688: CALL_OW 69
67692: ST_TO_ADDR
// if not tmp then
67693: LD_VAR 0 3
67697: NOT
67698: IFFALSE 67702
// exit ;
67700: GO 67788
// un := tmp [ rand ( 1 , tmp ) ] ;
67702: LD_ADDR_VAR 0 2
67706: PUSH
67707: LD_VAR 0 3
67711: PUSH
67712: LD_INT 1
67714: PPUSH
67715: LD_VAR 0 3
67719: PPUSH
67720: CALL_OW 12
67724: ARRAY
67725: ST_TO_ADDR
// if Crawls ( un ) then
67726: LD_VAR 0 2
67730: PPUSH
67731: CALL_OW 318
67735: IFFALSE 67746
// ComWalk ( un ) ;
67737: LD_VAR 0 2
67741: PPUSH
67742: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
67746: LD_VAR 0 2
67750: PPUSH
67751: LD_INT 9
67753: PPUSH
67754: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
67758: LD_INT 28
67760: PPUSH
67761: LD_OWVAR 2
67765: PPUSH
67766: LD_INT 2
67768: PPUSH
67769: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
67773: LD_INT 29
67775: PPUSH
67776: LD_OWVAR 2
67780: PPUSH
67781: LD_INT 2
67783: PPUSH
67784: CALL_OW 322
// end ;
67788: PPOPN 3
67790: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
67791: LD_EXP 38
67795: PUSH
67796: LD_EXP 81
67800: AND
67801: IFFALSE 67912
67803: GO 67805
67805: DISABLE
67806: LD_INT 0
67808: PPUSH
67809: PPUSH
67810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67811: LD_ADDR_VAR 0 3
67815: PUSH
67816: LD_INT 22
67818: PUSH
67819: LD_OWVAR 2
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 25
67830: PUSH
67831: LD_INT 1
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PPUSH
67842: CALL_OW 69
67846: ST_TO_ADDR
// if not tmp then
67847: LD_VAR 0 3
67851: NOT
67852: IFFALSE 67856
// exit ;
67854: GO 67912
// un := tmp [ rand ( 1 , tmp ) ] ;
67856: LD_ADDR_VAR 0 2
67860: PUSH
67861: LD_VAR 0 3
67865: PUSH
67866: LD_INT 1
67868: PPUSH
67869: LD_VAR 0 3
67873: PPUSH
67874: CALL_OW 12
67878: ARRAY
67879: ST_TO_ADDR
// if Crawls ( un ) then
67880: LD_VAR 0 2
67884: PPUSH
67885: CALL_OW 318
67889: IFFALSE 67900
// ComWalk ( un ) ;
67891: LD_VAR 0 2
67895: PPUSH
67896: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67900: LD_VAR 0 2
67904: PPUSH
67905: LD_INT 8
67907: PPUSH
67908: CALL_OW 336
// end ;
67912: PPOPN 3
67914: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
67915: LD_EXP 38
67919: PUSH
67920: LD_EXP 82
67924: AND
67925: IFFALSE 68069
67927: GO 67929
67929: DISABLE
67930: LD_INT 0
67932: PPUSH
67933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
67934: LD_ADDR_VAR 0 2
67938: PUSH
67939: LD_INT 22
67941: PUSH
67942: LD_OWVAR 2
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 21
67953: PUSH
67954: LD_INT 2
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 2
67963: PUSH
67964: LD_INT 34
67966: PUSH
67967: LD_INT 12
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 34
67976: PUSH
67977: LD_INT 51
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 34
67986: PUSH
67987: LD_INT 32
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: LIST
68004: PPUSH
68005: CALL_OW 69
68009: ST_TO_ADDR
// if not tmp then
68010: LD_VAR 0 2
68014: NOT
68015: IFFALSE 68019
// exit ;
68017: GO 68069
// for i in tmp do
68019: LD_ADDR_VAR 0 1
68023: PUSH
68024: LD_VAR 0 2
68028: PUSH
68029: FOR_IN
68030: IFFALSE 68067
// if GetCargo ( i , mat_artifact ) = 0 then
68032: LD_VAR 0 1
68036: PPUSH
68037: LD_INT 4
68039: PPUSH
68040: CALL_OW 289
68044: PUSH
68045: LD_INT 0
68047: EQUAL
68048: IFFALSE 68065
// SetCargo ( i , mat_siberit , 100 ) ;
68050: LD_VAR 0 1
68054: PPUSH
68055: LD_INT 3
68057: PPUSH
68058: LD_INT 100
68060: PPUSH
68061: CALL_OW 290
68065: GO 68029
68067: POP
68068: POP
// end ;
68069: PPOPN 2
68071: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68072: LD_EXP 38
68076: PUSH
68077: LD_EXP 83
68081: AND
68082: IFFALSE 68265
68084: GO 68086
68086: DISABLE
68087: LD_INT 0
68089: PPUSH
68090: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68091: LD_ADDR_VAR 0 2
68095: PUSH
68096: LD_INT 22
68098: PUSH
68099: LD_OWVAR 2
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PPUSH
68108: CALL_OW 69
68112: ST_TO_ADDR
// if not tmp then
68113: LD_VAR 0 2
68117: NOT
68118: IFFALSE 68122
// exit ;
68120: GO 68265
// for i := 1 to 2 do
68122: LD_ADDR_VAR 0 1
68126: PUSH
68127: DOUBLE
68128: LD_INT 1
68130: DEC
68131: ST_TO_ADDR
68132: LD_INT 2
68134: PUSH
68135: FOR_TO
68136: IFFALSE 68263
// begin uc_side := your_side ;
68138: LD_ADDR_OWVAR 20
68142: PUSH
68143: LD_OWVAR 2
68147: ST_TO_ADDR
// uc_nation := nation_american ;
68148: LD_ADDR_OWVAR 21
68152: PUSH
68153: LD_INT 1
68155: ST_TO_ADDR
// vc_chassis := us_morphling ;
68156: LD_ADDR_OWVAR 37
68160: PUSH
68161: LD_INT 5
68163: ST_TO_ADDR
// vc_engine := engine_siberite ;
68164: LD_ADDR_OWVAR 39
68168: PUSH
68169: LD_INT 3
68171: ST_TO_ADDR
// vc_control := control_computer ;
68172: LD_ADDR_OWVAR 38
68176: PUSH
68177: LD_INT 3
68179: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68180: LD_ADDR_OWVAR 40
68184: PUSH
68185: LD_INT 10
68187: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68188: LD_VAR 0 2
68192: PUSH
68193: LD_INT 1
68195: ARRAY
68196: PPUSH
68197: CALL_OW 310
68201: NOT
68202: IFFALSE 68249
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68204: CALL_OW 45
68208: PPUSH
68209: LD_VAR 0 2
68213: PUSH
68214: LD_INT 1
68216: ARRAY
68217: PPUSH
68218: CALL_OW 250
68222: PPUSH
68223: LD_VAR 0 2
68227: PUSH
68228: LD_INT 1
68230: ARRAY
68231: PPUSH
68232: CALL_OW 251
68236: PPUSH
68237: LD_INT 12
68239: PPUSH
68240: LD_INT 1
68242: PPUSH
68243: CALL_OW 50
68247: GO 68261
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68249: CALL_OW 45
68253: PPUSH
68254: LD_INT 1
68256: PPUSH
68257: CALL_OW 51
// end ;
68261: GO 68135
68263: POP
68264: POP
// end ;
68265: PPOPN 2
68267: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68268: LD_EXP 38
68272: PUSH
68273: LD_EXP 84
68277: AND
68278: IFFALSE 68500
68280: GO 68282
68282: DISABLE
68283: LD_INT 0
68285: PPUSH
68286: PPUSH
68287: PPUSH
68288: PPUSH
68289: PPUSH
68290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68291: LD_ADDR_VAR 0 6
68295: PUSH
68296: LD_INT 22
68298: PUSH
68299: LD_OWVAR 2
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 21
68310: PUSH
68311: LD_INT 1
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 3
68320: PUSH
68321: LD_INT 23
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: LIST
68339: PPUSH
68340: CALL_OW 69
68344: ST_TO_ADDR
// if not tmp then
68345: LD_VAR 0 6
68349: NOT
68350: IFFALSE 68354
// exit ;
68352: GO 68500
// s1 := rand ( 1 , 4 ) ;
68354: LD_ADDR_VAR 0 2
68358: PUSH
68359: LD_INT 1
68361: PPUSH
68362: LD_INT 4
68364: PPUSH
68365: CALL_OW 12
68369: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68370: LD_ADDR_VAR 0 4
68374: PUSH
68375: LD_VAR 0 6
68379: PUSH
68380: LD_INT 1
68382: ARRAY
68383: PPUSH
68384: LD_VAR 0 2
68388: PPUSH
68389: CALL_OW 259
68393: ST_TO_ADDR
// if s1 = 1 then
68394: LD_VAR 0 2
68398: PUSH
68399: LD_INT 1
68401: EQUAL
68402: IFFALSE 68422
// s2 := rand ( 2 , 4 ) else
68404: LD_ADDR_VAR 0 3
68408: PUSH
68409: LD_INT 2
68411: PPUSH
68412: LD_INT 4
68414: PPUSH
68415: CALL_OW 12
68419: ST_TO_ADDR
68420: GO 68430
// s2 := 1 ;
68422: LD_ADDR_VAR 0 3
68426: PUSH
68427: LD_INT 1
68429: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68430: LD_ADDR_VAR 0 5
68434: PUSH
68435: LD_VAR 0 6
68439: PUSH
68440: LD_INT 1
68442: ARRAY
68443: PPUSH
68444: LD_VAR 0 3
68448: PPUSH
68449: CALL_OW 259
68453: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68454: LD_VAR 0 6
68458: PUSH
68459: LD_INT 1
68461: ARRAY
68462: PPUSH
68463: LD_VAR 0 2
68467: PPUSH
68468: LD_VAR 0 5
68472: PPUSH
68473: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68477: LD_VAR 0 6
68481: PUSH
68482: LD_INT 1
68484: ARRAY
68485: PPUSH
68486: LD_VAR 0 3
68490: PPUSH
68491: LD_VAR 0 4
68495: PPUSH
68496: CALL_OW 237
// end ;
68500: PPOPN 6
68502: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68503: LD_EXP 38
68507: PUSH
68508: LD_EXP 85
68512: AND
68513: IFFALSE 68592
68515: GO 68517
68517: DISABLE
68518: LD_INT 0
68520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68521: LD_ADDR_VAR 0 1
68525: PUSH
68526: LD_INT 22
68528: PUSH
68529: LD_OWVAR 2
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 30
68540: PUSH
68541: LD_INT 3
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PPUSH
68552: CALL_OW 69
68556: ST_TO_ADDR
// if not tmp then
68557: LD_VAR 0 1
68561: NOT
68562: IFFALSE 68566
// exit ;
68564: GO 68592
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68566: LD_VAR 0 1
68570: PUSH
68571: LD_INT 1
68573: PPUSH
68574: LD_VAR 0 1
68578: PPUSH
68579: CALL_OW 12
68583: ARRAY
68584: PPUSH
68585: LD_INT 1
68587: PPUSH
68588: CALL_OW 234
// end ;
68592: PPOPN 1
68594: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68595: LD_EXP 38
68599: PUSH
68600: LD_EXP 86
68604: AND
68605: IFFALSE 68717
68607: GO 68609
68609: DISABLE
68610: LD_INT 0
68612: PPUSH
68613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68614: LD_ADDR_VAR 0 2
68618: PUSH
68619: LD_INT 22
68621: PUSH
68622: LD_OWVAR 2
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 2
68633: PUSH
68634: LD_INT 30
68636: PUSH
68637: LD_INT 27
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 30
68646: PUSH
68647: LD_INT 26
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 30
68656: PUSH
68657: LD_INT 28
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PPUSH
68674: CALL_OW 69
68678: ST_TO_ADDR
// if not tmp then
68679: LD_VAR 0 2
68683: NOT
68684: IFFALSE 68688
// exit ;
68686: GO 68717
// for i in tmp do
68688: LD_ADDR_VAR 0 1
68692: PUSH
68693: LD_VAR 0 2
68697: PUSH
68698: FOR_IN
68699: IFFALSE 68715
// SetLives ( i , 1 ) ;
68701: LD_VAR 0 1
68705: PPUSH
68706: LD_INT 1
68708: PPUSH
68709: CALL_OW 234
68713: GO 68698
68715: POP
68716: POP
// end ;
68717: PPOPN 2
68719: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
68720: LD_EXP 38
68724: PUSH
68725: LD_EXP 87
68729: AND
68730: IFFALSE 69017
68732: GO 68734
68734: DISABLE
68735: LD_INT 0
68737: PPUSH
68738: PPUSH
68739: PPUSH
// begin i := rand ( 1 , 7 ) ;
68740: LD_ADDR_VAR 0 1
68744: PUSH
68745: LD_INT 1
68747: PPUSH
68748: LD_INT 7
68750: PPUSH
68751: CALL_OW 12
68755: ST_TO_ADDR
// case i of 1 :
68756: LD_VAR 0 1
68760: PUSH
68761: LD_INT 1
68763: DOUBLE
68764: EQUAL
68765: IFTRUE 68769
68767: GO 68779
68769: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
68770: LD_STRING earthquake(getX(game), 0, 32)
68772: PPUSH
68773: CALL_OW 559
68777: GO 69017
68779: LD_INT 2
68781: DOUBLE
68782: EQUAL
68783: IFTRUE 68787
68785: GO 68801
68787: POP
// begin ToLua ( displayStucuk(); ) ;
68788: LD_STRING displayStucuk();
68790: PPUSH
68791: CALL_OW 559
// ResetFog ;
68795: CALL_OW 335
// end ; 3 :
68799: GO 69017
68801: LD_INT 3
68803: DOUBLE
68804: EQUAL
68805: IFTRUE 68809
68807: GO 68913
68809: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68810: LD_ADDR_VAR 0 2
68814: PUSH
68815: LD_INT 22
68817: PUSH
68818: LD_OWVAR 2
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 25
68829: PUSH
68830: LD_INT 1
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PPUSH
68841: CALL_OW 69
68845: ST_TO_ADDR
// if not tmp then
68846: LD_VAR 0 2
68850: NOT
68851: IFFALSE 68855
// exit ;
68853: GO 69017
// un := tmp [ rand ( 1 , tmp ) ] ;
68855: LD_ADDR_VAR 0 3
68859: PUSH
68860: LD_VAR 0 2
68864: PUSH
68865: LD_INT 1
68867: PPUSH
68868: LD_VAR 0 2
68872: PPUSH
68873: CALL_OW 12
68877: ARRAY
68878: ST_TO_ADDR
// if Crawls ( un ) then
68879: LD_VAR 0 3
68883: PPUSH
68884: CALL_OW 318
68888: IFFALSE 68899
// ComWalk ( un ) ;
68890: LD_VAR 0 3
68894: PPUSH
68895: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68899: LD_VAR 0 3
68903: PPUSH
68904: LD_INT 8
68906: PPUSH
68907: CALL_OW 336
// end ; 4 :
68911: GO 69017
68913: LD_INT 4
68915: DOUBLE
68916: EQUAL
68917: IFTRUE 68921
68919: GO 68995
68921: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68922: LD_ADDR_VAR 0 2
68926: PUSH
68927: LD_INT 22
68929: PUSH
68930: LD_OWVAR 2
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 30
68941: PUSH
68942: LD_INT 29
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PPUSH
68953: CALL_OW 69
68957: ST_TO_ADDR
// if not tmp then
68958: LD_VAR 0 2
68962: NOT
68963: IFFALSE 68967
// exit ;
68965: GO 69017
// CenterNowOnUnits ( tmp [ 1 ] ) ;
68967: LD_VAR 0 2
68971: PUSH
68972: LD_INT 1
68974: ARRAY
68975: PPUSH
68976: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
68980: LD_VAR 0 2
68984: PUSH
68985: LD_INT 1
68987: ARRAY
68988: PPUSH
68989: CALL_OW 65
// end ; 5 .. 7 :
68993: GO 69017
68995: LD_INT 5
68997: DOUBLE
68998: GREATEREQUAL
68999: IFFALSE 69007
69001: LD_INT 7
69003: DOUBLE
69004: LESSEQUAL
69005: IFTRUE 69009
69007: GO 69016
69009: POP
// StreamSibBomb ; end ;
69010: CALL 65254 0 0
69014: GO 69017
69016: POP
// end ;
69017: PPOPN 3
69019: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69020: LD_EXP 38
69024: PUSH
69025: LD_EXP 88
69029: AND
69030: IFFALSE 69186
69032: GO 69034
69034: DISABLE
69035: LD_INT 0
69037: PPUSH
69038: PPUSH
69039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69040: LD_ADDR_VAR 0 2
69044: PUSH
69045: LD_INT 81
69047: PUSH
69048: LD_OWVAR 2
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 2
69059: PUSH
69060: LD_INT 21
69062: PUSH
69063: LD_INT 1
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 21
69072: PUSH
69073: LD_INT 2
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: LIST
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PPUSH
69089: CALL_OW 69
69093: ST_TO_ADDR
// if not tmp then
69094: LD_VAR 0 2
69098: NOT
69099: IFFALSE 69103
// exit ;
69101: GO 69186
// p := 0 ;
69103: LD_ADDR_VAR 0 3
69107: PUSH
69108: LD_INT 0
69110: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69111: LD_INT 35
69113: PPUSH
69114: CALL_OW 67
// p := p + 1 ;
69118: LD_ADDR_VAR 0 3
69122: PUSH
69123: LD_VAR 0 3
69127: PUSH
69128: LD_INT 1
69130: PLUS
69131: ST_TO_ADDR
// for i in tmp do
69132: LD_ADDR_VAR 0 1
69136: PUSH
69137: LD_VAR 0 2
69141: PUSH
69142: FOR_IN
69143: IFFALSE 69174
// if GetLives ( i ) < 1000 then
69145: LD_VAR 0 1
69149: PPUSH
69150: CALL_OW 256
69154: PUSH
69155: LD_INT 1000
69157: LESS
69158: IFFALSE 69172
// SetLives ( i , 1000 ) ;
69160: LD_VAR 0 1
69164: PPUSH
69165: LD_INT 1000
69167: PPUSH
69168: CALL_OW 234
69172: GO 69142
69174: POP
69175: POP
// until p > 20 ;
69176: LD_VAR 0 3
69180: PUSH
69181: LD_INT 20
69183: GREATER
69184: IFFALSE 69111
// end ;
69186: PPOPN 3
69188: END
// every 0 0$1 trigger StreamModeActive and sTime do
69189: LD_EXP 38
69193: PUSH
69194: LD_EXP 89
69198: AND
69199: IFFALSE 69234
69201: GO 69203
69203: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69204: LD_INT 28
69206: PPUSH
69207: LD_OWVAR 2
69211: PPUSH
69212: LD_INT 2
69214: PPUSH
69215: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69219: LD_INT 30
69221: PPUSH
69222: LD_OWVAR 2
69226: PPUSH
69227: LD_INT 2
69229: PPUSH
69230: CALL_OW 322
// end ;
69234: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69235: LD_EXP 38
69239: PUSH
69240: LD_EXP 90
69244: AND
69245: IFFALSE 69366
69247: GO 69249
69249: DISABLE
69250: LD_INT 0
69252: PPUSH
69253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69254: LD_ADDR_VAR 0 2
69258: PUSH
69259: LD_INT 22
69261: PUSH
69262: LD_OWVAR 2
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 21
69273: PUSH
69274: LD_INT 1
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 3
69283: PUSH
69284: LD_INT 23
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: LIST
69302: PPUSH
69303: CALL_OW 69
69307: ST_TO_ADDR
// if not tmp then
69308: LD_VAR 0 2
69312: NOT
69313: IFFALSE 69317
// exit ;
69315: GO 69366
// for i in tmp do
69317: LD_ADDR_VAR 0 1
69321: PUSH
69322: LD_VAR 0 2
69326: PUSH
69327: FOR_IN
69328: IFFALSE 69364
// begin if Crawls ( i ) then
69330: LD_VAR 0 1
69334: PPUSH
69335: CALL_OW 318
69339: IFFALSE 69350
// ComWalk ( i ) ;
69341: LD_VAR 0 1
69345: PPUSH
69346: CALL_OW 138
// SetClass ( i , 2 ) ;
69350: LD_VAR 0 1
69354: PPUSH
69355: LD_INT 2
69357: PPUSH
69358: CALL_OW 336
// end ;
69362: GO 69327
69364: POP
69365: POP
// end ;
69366: PPOPN 2
69368: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69369: LD_EXP 38
69373: PUSH
69374: LD_EXP 91
69378: AND
69379: IFFALSE 69667
69381: GO 69383
69383: DISABLE
69384: LD_INT 0
69386: PPUSH
69387: PPUSH
69388: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69389: LD_OWVAR 2
69393: PPUSH
69394: LD_INT 9
69396: PPUSH
69397: LD_INT 1
69399: PPUSH
69400: LD_INT 1
69402: PPUSH
69403: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69407: LD_INT 9
69409: PPUSH
69410: LD_OWVAR 2
69414: PPUSH
69415: CALL_OW 343
// uc_side := 9 ;
69419: LD_ADDR_OWVAR 20
69423: PUSH
69424: LD_INT 9
69426: ST_TO_ADDR
// uc_nation := 2 ;
69427: LD_ADDR_OWVAR 21
69431: PUSH
69432: LD_INT 2
69434: ST_TO_ADDR
// hc_name := Dark Warrior ;
69435: LD_ADDR_OWVAR 26
69439: PUSH
69440: LD_STRING Dark Warrior
69442: ST_TO_ADDR
// hc_gallery :=  ;
69443: LD_ADDR_OWVAR 33
69447: PUSH
69448: LD_STRING 
69450: ST_TO_ADDR
// hc_noskilllimit := true ;
69451: LD_ADDR_OWVAR 76
69455: PUSH
69456: LD_INT 1
69458: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69459: LD_ADDR_OWVAR 31
69463: PUSH
69464: LD_INT 30
69466: PUSH
69467: LD_INT 30
69469: PUSH
69470: LD_INT 30
69472: PUSH
69473: LD_INT 30
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: ST_TO_ADDR
// un := CreateHuman ;
69482: LD_ADDR_VAR 0 3
69486: PUSH
69487: CALL_OW 44
69491: ST_TO_ADDR
// hc_noskilllimit := false ;
69492: LD_ADDR_OWVAR 76
69496: PUSH
69497: LD_INT 0
69499: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69500: LD_VAR 0 3
69504: PPUSH
69505: LD_INT 1
69507: PPUSH
69508: CALL_OW 51
// ToLua ( playRanger() ) ;
69512: LD_STRING playRanger()
69514: PPUSH
69515: CALL_OW 559
// p := 0 ;
69519: LD_ADDR_VAR 0 2
69523: PUSH
69524: LD_INT 0
69526: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69527: LD_INT 35
69529: PPUSH
69530: CALL_OW 67
// p := p + 1 ;
69534: LD_ADDR_VAR 0 2
69538: PUSH
69539: LD_VAR 0 2
69543: PUSH
69544: LD_INT 1
69546: PLUS
69547: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69548: LD_VAR 0 3
69552: PPUSH
69553: CALL_OW 256
69557: PUSH
69558: LD_INT 1000
69560: LESS
69561: IFFALSE 69575
// SetLives ( un , 1000 ) ;
69563: LD_VAR 0 3
69567: PPUSH
69568: LD_INT 1000
69570: PPUSH
69571: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69575: LD_VAR 0 3
69579: PPUSH
69580: LD_INT 81
69582: PUSH
69583: LD_OWVAR 2
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 91
69594: PUSH
69595: LD_VAR 0 3
69599: PUSH
69600: LD_INT 30
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: LIST
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PPUSH
69612: CALL_OW 69
69616: PPUSH
69617: LD_VAR 0 3
69621: PPUSH
69622: CALL_OW 74
69626: PPUSH
69627: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
69631: LD_VAR 0 2
69635: PUSH
69636: LD_INT 80
69638: GREATER
69639: PUSH
69640: LD_VAR 0 3
69644: PPUSH
69645: CALL_OW 301
69649: OR
69650: IFFALSE 69527
// if un then
69652: LD_VAR 0 3
69656: IFFALSE 69667
// RemoveUnit ( un ) ;
69658: LD_VAR 0 3
69662: PPUSH
69663: CALL_OW 64
// end ;
69667: PPOPN 3
69669: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
69670: LD_EXP 92
69674: IFFALSE 69790
69676: GO 69678
69678: DISABLE
69679: LD_INT 0
69681: PPUSH
69682: PPUSH
69683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69684: LD_ADDR_VAR 0 2
69688: PUSH
69689: LD_INT 81
69691: PUSH
69692: LD_OWVAR 2
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 21
69703: PUSH
69704: LD_INT 1
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PPUSH
69715: CALL_OW 69
69719: ST_TO_ADDR
// ToLua ( playComputer() ) ;
69720: LD_STRING playComputer()
69722: PPUSH
69723: CALL_OW 559
// if not tmp then
69727: LD_VAR 0 2
69731: NOT
69732: IFFALSE 69736
// exit ;
69734: GO 69790
// for i in tmp do
69736: LD_ADDR_VAR 0 1
69740: PUSH
69741: LD_VAR 0 2
69745: PUSH
69746: FOR_IN
69747: IFFALSE 69788
// for j := 1 to 4 do
69749: LD_ADDR_VAR 0 3
69753: PUSH
69754: DOUBLE
69755: LD_INT 1
69757: DEC
69758: ST_TO_ADDR
69759: LD_INT 4
69761: PUSH
69762: FOR_TO
69763: IFFALSE 69784
// SetSkill ( i , j , 10 ) ;
69765: LD_VAR 0 1
69769: PPUSH
69770: LD_VAR 0 3
69774: PPUSH
69775: LD_INT 10
69777: PPUSH
69778: CALL_OW 237
69782: GO 69762
69784: POP
69785: POP
69786: GO 69746
69788: POP
69789: POP
// end ;
69790: PPOPN 3
69792: END
// every 0 0$1 trigger s30 do var i , tmp ;
69793: LD_EXP 93
69797: IFFALSE 69866
69799: GO 69801
69801: DISABLE
69802: LD_INT 0
69804: PPUSH
69805: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69806: LD_ADDR_VAR 0 2
69810: PUSH
69811: LD_INT 22
69813: PUSH
69814: LD_OWVAR 2
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PPUSH
69823: CALL_OW 69
69827: ST_TO_ADDR
// if not tmp then
69828: LD_VAR 0 2
69832: NOT
69833: IFFALSE 69837
// exit ;
69835: GO 69866
// for i in tmp do
69837: LD_ADDR_VAR 0 1
69841: PUSH
69842: LD_VAR 0 2
69846: PUSH
69847: FOR_IN
69848: IFFALSE 69864
// SetLives ( i , 300 ) ;
69850: LD_VAR 0 1
69854: PPUSH
69855: LD_INT 300
69857: PPUSH
69858: CALL_OW 234
69862: GO 69847
69864: POP
69865: POP
// end ;
69866: PPOPN 2
69868: END
// every 0 0$1 trigger s60 do var i , tmp ;
69869: LD_EXP 94
69873: IFFALSE 69942
69875: GO 69877
69877: DISABLE
69878: LD_INT 0
69880: PPUSH
69881: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69882: LD_ADDR_VAR 0 2
69886: PUSH
69887: LD_INT 22
69889: PUSH
69890: LD_OWVAR 2
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PPUSH
69899: CALL_OW 69
69903: ST_TO_ADDR
// if not tmp then
69904: LD_VAR 0 2
69908: NOT
69909: IFFALSE 69913
// exit ;
69911: GO 69942
// for i in tmp do
69913: LD_ADDR_VAR 0 1
69917: PUSH
69918: LD_VAR 0 2
69922: PUSH
69923: FOR_IN
69924: IFFALSE 69940
// SetLives ( i , 600 ) ;
69926: LD_VAR 0 1
69930: PPUSH
69931: LD_INT 600
69933: PPUSH
69934: CALL_OW 234
69938: GO 69923
69940: POP
69941: POP
// end ;
69942: PPOPN 2
69944: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69945: LD_INT 0
69947: PPUSH
// case cmd of 301 :
69948: LD_VAR 0 1
69952: PUSH
69953: LD_INT 301
69955: DOUBLE
69956: EQUAL
69957: IFTRUE 69961
69959: GO 69993
69961: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
69962: LD_VAR 0 6
69966: PPUSH
69967: LD_VAR 0 7
69971: PPUSH
69972: LD_VAR 0 8
69976: PPUSH
69977: LD_VAR 0 4
69981: PPUSH
69982: LD_VAR 0 5
69986: PPUSH
69987: CALL 71202 0 5
69991: GO 70114
69993: LD_INT 302
69995: DOUBLE
69996: EQUAL
69997: IFTRUE 70001
69999: GO 70038
70001: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70002: LD_VAR 0 6
70006: PPUSH
70007: LD_VAR 0 7
70011: PPUSH
70012: LD_VAR 0 8
70016: PPUSH
70017: LD_VAR 0 9
70021: PPUSH
70022: LD_VAR 0 4
70026: PPUSH
70027: LD_VAR 0 5
70031: PPUSH
70032: CALL 71293 0 6
70036: GO 70114
70038: LD_INT 303
70040: DOUBLE
70041: EQUAL
70042: IFTRUE 70046
70044: GO 70083
70046: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70047: LD_VAR 0 6
70051: PPUSH
70052: LD_VAR 0 7
70056: PPUSH
70057: LD_VAR 0 8
70061: PPUSH
70062: LD_VAR 0 9
70066: PPUSH
70067: LD_VAR 0 4
70071: PPUSH
70072: LD_VAR 0 5
70076: PPUSH
70077: CALL 70119 0 6
70081: GO 70114
70083: LD_INT 304
70085: DOUBLE
70086: EQUAL
70087: IFTRUE 70091
70089: GO 70113
70091: POP
// hHackTeleport ( unit , x , y ) ; end ;
70092: LD_VAR 0 2
70096: PPUSH
70097: LD_VAR 0 4
70101: PPUSH
70102: LD_VAR 0 5
70106: PPUSH
70107: CALL 71886 0 3
70111: GO 70114
70113: POP
// end ;
70114: LD_VAR 0 12
70118: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70119: LD_INT 0
70121: PPUSH
70122: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70123: LD_VAR 0 1
70127: PUSH
70128: LD_INT 1
70130: LESS
70131: PUSH
70132: LD_VAR 0 1
70136: PUSH
70137: LD_INT 3
70139: GREATER
70140: OR
70141: PUSH
70142: LD_VAR 0 5
70146: PPUSH
70147: LD_VAR 0 6
70151: PPUSH
70152: CALL_OW 428
70156: OR
70157: IFFALSE 70161
// exit ;
70159: GO 70889
// uc_side := your_side ;
70161: LD_ADDR_OWVAR 20
70165: PUSH
70166: LD_OWVAR 2
70170: ST_TO_ADDR
// uc_nation := nation ;
70171: LD_ADDR_OWVAR 21
70175: PUSH
70176: LD_VAR 0 1
70180: ST_TO_ADDR
// bc_level = 1 ;
70181: LD_ADDR_OWVAR 43
70185: PUSH
70186: LD_INT 1
70188: ST_TO_ADDR
// case btype of 1 :
70189: LD_VAR 0 2
70193: PUSH
70194: LD_INT 1
70196: DOUBLE
70197: EQUAL
70198: IFTRUE 70202
70200: GO 70213
70202: POP
// bc_type := b_depot ; 2 :
70203: LD_ADDR_OWVAR 42
70207: PUSH
70208: LD_INT 0
70210: ST_TO_ADDR
70211: GO 70833
70213: LD_INT 2
70215: DOUBLE
70216: EQUAL
70217: IFTRUE 70221
70219: GO 70232
70221: POP
// bc_type := b_warehouse ; 3 :
70222: LD_ADDR_OWVAR 42
70226: PUSH
70227: LD_INT 1
70229: ST_TO_ADDR
70230: GO 70833
70232: LD_INT 3
70234: DOUBLE
70235: EQUAL
70236: IFTRUE 70240
70238: GO 70251
70240: POP
// bc_type := b_lab ; 4 .. 9 :
70241: LD_ADDR_OWVAR 42
70245: PUSH
70246: LD_INT 6
70248: ST_TO_ADDR
70249: GO 70833
70251: LD_INT 4
70253: DOUBLE
70254: GREATEREQUAL
70255: IFFALSE 70263
70257: LD_INT 9
70259: DOUBLE
70260: LESSEQUAL
70261: IFTRUE 70265
70263: GO 70325
70265: POP
// begin bc_type := b_lab_half ;
70266: LD_ADDR_OWVAR 42
70270: PUSH
70271: LD_INT 7
70273: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70274: LD_ADDR_OWVAR 44
70278: PUSH
70279: LD_INT 10
70281: PUSH
70282: LD_INT 11
70284: PUSH
70285: LD_INT 12
70287: PUSH
70288: LD_INT 15
70290: PUSH
70291: LD_INT 14
70293: PUSH
70294: LD_INT 13
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: PUSH
70305: LD_VAR 0 2
70309: PUSH
70310: LD_INT 3
70312: MINUS
70313: ARRAY
70314: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
70315: LD_ADDR_OWVAR 45
70319: PUSH
70320: LD_INT 9
70322: ST_TO_ADDR
// end ; 10 .. 13 :
70323: GO 70833
70325: LD_INT 10
70327: DOUBLE
70328: GREATEREQUAL
70329: IFFALSE 70337
70331: LD_INT 13
70333: DOUBLE
70334: LESSEQUAL
70335: IFTRUE 70339
70337: GO 70416
70339: POP
// begin bc_type := b_lab_full ;
70340: LD_ADDR_OWVAR 42
70344: PUSH
70345: LD_INT 8
70347: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70348: LD_ADDR_OWVAR 44
70352: PUSH
70353: LD_INT 10
70355: PUSH
70356: LD_INT 12
70358: PUSH
70359: LD_INT 14
70361: PUSH
70362: LD_INT 13
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: PUSH
70371: LD_VAR 0 2
70375: PUSH
70376: LD_INT 9
70378: MINUS
70379: ARRAY
70380: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70381: LD_ADDR_OWVAR 45
70385: PUSH
70386: LD_INT 11
70388: PUSH
70389: LD_INT 15
70391: PUSH
70392: LD_INT 12
70394: PUSH
70395: LD_INT 15
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: PUSH
70404: LD_VAR 0 2
70408: PUSH
70409: LD_INT 9
70411: MINUS
70412: ARRAY
70413: ST_TO_ADDR
// end ; 14 :
70414: GO 70833
70416: LD_INT 14
70418: DOUBLE
70419: EQUAL
70420: IFTRUE 70424
70422: GO 70435
70424: POP
// bc_type := b_workshop ; 15 :
70425: LD_ADDR_OWVAR 42
70429: PUSH
70430: LD_INT 2
70432: ST_TO_ADDR
70433: GO 70833
70435: LD_INT 15
70437: DOUBLE
70438: EQUAL
70439: IFTRUE 70443
70441: GO 70454
70443: POP
// bc_type := b_factory ; 16 :
70444: LD_ADDR_OWVAR 42
70448: PUSH
70449: LD_INT 3
70451: ST_TO_ADDR
70452: GO 70833
70454: LD_INT 16
70456: DOUBLE
70457: EQUAL
70458: IFTRUE 70462
70460: GO 70473
70462: POP
// bc_type := b_ext_gun ; 17 :
70463: LD_ADDR_OWVAR 42
70467: PUSH
70468: LD_INT 17
70470: ST_TO_ADDR
70471: GO 70833
70473: LD_INT 17
70475: DOUBLE
70476: EQUAL
70477: IFTRUE 70481
70479: GO 70509
70481: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70482: LD_ADDR_OWVAR 42
70486: PUSH
70487: LD_INT 19
70489: PUSH
70490: LD_INT 23
70492: PUSH
70493: LD_INT 19
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: LIST
70500: PUSH
70501: LD_VAR 0 1
70505: ARRAY
70506: ST_TO_ADDR
70507: GO 70833
70509: LD_INT 18
70511: DOUBLE
70512: EQUAL
70513: IFTRUE 70517
70515: GO 70528
70517: POP
// bc_type := b_ext_radar ; 19 :
70518: LD_ADDR_OWVAR 42
70522: PUSH
70523: LD_INT 20
70525: ST_TO_ADDR
70526: GO 70833
70528: LD_INT 19
70530: DOUBLE
70531: EQUAL
70532: IFTRUE 70536
70534: GO 70547
70536: POP
// bc_type := b_ext_radio ; 20 :
70537: LD_ADDR_OWVAR 42
70541: PUSH
70542: LD_INT 22
70544: ST_TO_ADDR
70545: GO 70833
70547: LD_INT 20
70549: DOUBLE
70550: EQUAL
70551: IFTRUE 70555
70553: GO 70566
70555: POP
// bc_type := b_ext_siberium ; 21 :
70556: LD_ADDR_OWVAR 42
70560: PUSH
70561: LD_INT 21
70563: ST_TO_ADDR
70564: GO 70833
70566: LD_INT 21
70568: DOUBLE
70569: EQUAL
70570: IFTRUE 70574
70572: GO 70585
70574: POP
// bc_type := b_ext_computer ; 22 :
70575: LD_ADDR_OWVAR 42
70579: PUSH
70580: LD_INT 24
70582: ST_TO_ADDR
70583: GO 70833
70585: LD_INT 22
70587: DOUBLE
70588: EQUAL
70589: IFTRUE 70593
70591: GO 70604
70593: POP
// bc_type := b_ext_track ; 23 :
70594: LD_ADDR_OWVAR 42
70598: PUSH
70599: LD_INT 16
70601: ST_TO_ADDR
70602: GO 70833
70604: LD_INT 23
70606: DOUBLE
70607: EQUAL
70608: IFTRUE 70612
70610: GO 70623
70612: POP
// bc_type := b_ext_laser ; 24 :
70613: LD_ADDR_OWVAR 42
70617: PUSH
70618: LD_INT 25
70620: ST_TO_ADDR
70621: GO 70833
70623: LD_INT 24
70625: DOUBLE
70626: EQUAL
70627: IFTRUE 70631
70629: GO 70642
70631: POP
// bc_type := b_control_tower ; 25 :
70632: LD_ADDR_OWVAR 42
70636: PUSH
70637: LD_INT 36
70639: ST_TO_ADDR
70640: GO 70833
70642: LD_INT 25
70644: DOUBLE
70645: EQUAL
70646: IFTRUE 70650
70648: GO 70661
70650: POP
// bc_type := b_breastwork ; 26 :
70651: LD_ADDR_OWVAR 42
70655: PUSH
70656: LD_INT 31
70658: ST_TO_ADDR
70659: GO 70833
70661: LD_INT 26
70663: DOUBLE
70664: EQUAL
70665: IFTRUE 70669
70667: GO 70680
70669: POP
// bc_type := b_bunker ; 27 :
70670: LD_ADDR_OWVAR 42
70674: PUSH
70675: LD_INT 32
70677: ST_TO_ADDR
70678: GO 70833
70680: LD_INT 27
70682: DOUBLE
70683: EQUAL
70684: IFTRUE 70688
70686: GO 70699
70688: POP
// bc_type := b_turret ; 28 :
70689: LD_ADDR_OWVAR 42
70693: PUSH
70694: LD_INT 33
70696: ST_TO_ADDR
70697: GO 70833
70699: LD_INT 28
70701: DOUBLE
70702: EQUAL
70703: IFTRUE 70707
70705: GO 70718
70707: POP
// bc_type := b_armoury ; 29 :
70708: LD_ADDR_OWVAR 42
70712: PUSH
70713: LD_INT 4
70715: ST_TO_ADDR
70716: GO 70833
70718: LD_INT 29
70720: DOUBLE
70721: EQUAL
70722: IFTRUE 70726
70724: GO 70737
70726: POP
// bc_type := b_barracks ; 30 :
70727: LD_ADDR_OWVAR 42
70731: PUSH
70732: LD_INT 5
70734: ST_TO_ADDR
70735: GO 70833
70737: LD_INT 30
70739: DOUBLE
70740: EQUAL
70741: IFTRUE 70745
70743: GO 70756
70745: POP
// bc_type := b_solar_power ; 31 :
70746: LD_ADDR_OWVAR 42
70750: PUSH
70751: LD_INT 27
70753: ST_TO_ADDR
70754: GO 70833
70756: LD_INT 31
70758: DOUBLE
70759: EQUAL
70760: IFTRUE 70764
70762: GO 70775
70764: POP
// bc_type := b_oil_power ; 32 :
70765: LD_ADDR_OWVAR 42
70769: PUSH
70770: LD_INT 26
70772: ST_TO_ADDR
70773: GO 70833
70775: LD_INT 32
70777: DOUBLE
70778: EQUAL
70779: IFTRUE 70783
70781: GO 70794
70783: POP
// bc_type := b_siberite_power ; 33 :
70784: LD_ADDR_OWVAR 42
70788: PUSH
70789: LD_INT 28
70791: ST_TO_ADDR
70792: GO 70833
70794: LD_INT 33
70796: DOUBLE
70797: EQUAL
70798: IFTRUE 70802
70800: GO 70813
70802: POP
// bc_type := b_oil_mine ; 34 :
70803: LD_ADDR_OWVAR 42
70807: PUSH
70808: LD_INT 29
70810: ST_TO_ADDR
70811: GO 70833
70813: LD_INT 34
70815: DOUBLE
70816: EQUAL
70817: IFTRUE 70821
70819: GO 70832
70821: POP
// bc_type := b_siberite_mine ; end ;
70822: LD_ADDR_OWVAR 42
70826: PUSH
70827: LD_INT 30
70829: ST_TO_ADDR
70830: GO 70833
70832: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70833: LD_ADDR_VAR 0 8
70837: PUSH
70838: LD_VAR 0 5
70842: PPUSH
70843: LD_VAR 0 6
70847: PPUSH
70848: LD_VAR 0 3
70852: PPUSH
70853: CALL_OW 47
70857: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70858: LD_OWVAR 42
70862: PUSH
70863: LD_INT 32
70865: PUSH
70866: LD_INT 33
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: IN
70873: IFFALSE 70889
// PlaceWeaponTurret ( b , weapon ) ;
70875: LD_VAR 0 8
70879: PPUSH
70880: LD_VAR 0 4
70884: PPUSH
70885: CALL_OW 431
// end ;
70889: LD_VAR 0 7
70893: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70894: LD_INT 0
70896: PPUSH
70897: PPUSH
70898: PPUSH
70899: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70900: LD_ADDR_VAR 0 4
70904: PUSH
70905: LD_INT 22
70907: PUSH
70908: LD_OWVAR 2
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 2
70919: PUSH
70920: LD_INT 30
70922: PUSH
70923: LD_INT 0
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 30
70932: PUSH
70933: LD_INT 1
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: LIST
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PPUSH
70949: CALL_OW 69
70953: ST_TO_ADDR
// if not tmp then
70954: LD_VAR 0 4
70958: NOT
70959: IFFALSE 70963
// exit ;
70961: GO 71022
// for i in tmp do
70963: LD_ADDR_VAR 0 2
70967: PUSH
70968: LD_VAR 0 4
70972: PUSH
70973: FOR_IN
70974: IFFALSE 71020
// for j = 1 to 3 do
70976: LD_ADDR_VAR 0 3
70980: PUSH
70981: DOUBLE
70982: LD_INT 1
70984: DEC
70985: ST_TO_ADDR
70986: LD_INT 3
70988: PUSH
70989: FOR_TO
70990: IFFALSE 71016
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70992: LD_VAR 0 2
70996: PPUSH
70997: CALL_OW 274
71001: PPUSH
71002: LD_VAR 0 3
71006: PPUSH
71007: LD_INT 99999
71009: PPUSH
71010: CALL_OW 277
71014: GO 70989
71016: POP
71017: POP
71018: GO 70973
71020: POP
71021: POP
// end ;
71022: LD_VAR 0 1
71026: RET
// export function hHackSetLevel10 ; var i , j ; begin
71027: LD_INT 0
71029: PPUSH
71030: PPUSH
71031: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71032: LD_ADDR_VAR 0 2
71036: PUSH
71037: LD_INT 21
71039: PUSH
71040: LD_INT 1
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PPUSH
71047: CALL_OW 69
71051: PUSH
71052: FOR_IN
71053: IFFALSE 71105
// if IsSelected ( i ) then
71055: LD_VAR 0 2
71059: PPUSH
71060: CALL_OW 306
71064: IFFALSE 71103
// begin for j := 1 to 4 do
71066: LD_ADDR_VAR 0 3
71070: PUSH
71071: DOUBLE
71072: LD_INT 1
71074: DEC
71075: ST_TO_ADDR
71076: LD_INT 4
71078: PUSH
71079: FOR_TO
71080: IFFALSE 71101
// SetSkill ( i , j , 10 ) ;
71082: LD_VAR 0 2
71086: PPUSH
71087: LD_VAR 0 3
71091: PPUSH
71092: LD_INT 10
71094: PPUSH
71095: CALL_OW 237
71099: GO 71079
71101: POP
71102: POP
// end ;
71103: GO 71052
71105: POP
71106: POP
// end ;
71107: LD_VAR 0 1
71111: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71112: LD_INT 0
71114: PPUSH
71115: PPUSH
71116: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71117: LD_ADDR_VAR 0 2
71121: PUSH
71122: LD_INT 22
71124: PUSH
71125: LD_OWVAR 2
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 21
71136: PUSH
71137: LD_INT 1
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PPUSH
71148: CALL_OW 69
71152: PUSH
71153: FOR_IN
71154: IFFALSE 71195
// begin for j := 1 to 4 do
71156: LD_ADDR_VAR 0 3
71160: PUSH
71161: DOUBLE
71162: LD_INT 1
71164: DEC
71165: ST_TO_ADDR
71166: LD_INT 4
71168: PUSH
71169: FOR_TO
71170: IFFALSE 71191
// SetSkill ( i , j , 10 ) ;
71172: LD_VAR 0 2
71176: PPUSH
71177: LD_VAR 0 3
71181: PPUSH
71182: LD_INT 10
71184: PPUSH
71185: CALL_OW 237
71189: GO 71169
71191: POP
71192: POP
// end ;
71193: GO 71153
71195: POP
71196: POP
// end ;
71197: LD_VAR 0 1
71201: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71202: LD_INT 0
71204: PPUSH
// uc_side := your_side ;
71205: LD_ADDR_OWVAR 20
71209: PUSH
71210: LD_OWVAR 2
71214: ST_TO_ADDR
// uc_nation := nation ;
71215: LD_ADDR_OWVAR 21
71219: PUSH
71220: LD_VAR 0 1
71224: ST_TO_ADDR
// InitHc ;
71225: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71229: LD_INT 0
71231: PPUSH
71232: LD_VAR 0 2
71236: PPUSH
71237: LD_VAR 0 3
71241: PPUSH
71242: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71246: LD_VAR 0 4
71250: PPUSH
71251: LD_VAR 0 5
71255: PPUSH
71256: CALL_OW 428
71260: PUSH
71261: LD_INT 0
71263: EQUAL
71264: IFFALSE 71288
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71266: CALL_OW 44
71270: PPUSH
71271: LD_VAR 0 4
71275: PPUSH
71276: LD_VAR 0 5
71280: PPUSH
71281: LD_INT 1
71283: PPUSH
71284: CALL_OW 48
// end ;
71288: LD_VAR 0 6
71292: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71293: LD_INT 0
71295: PPUSH
71296: PPUSH
// uc_side := your_side ;
71297: LD_ADDR_OWVAR 20
71301: PUSH
71302: LD_OWVAR 2
71306: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71307: LD_VAR 0 1
71311: PUSH
71312: LD_INT 1
71314: PUSH
71315: LD_INT 2
71317: PUSH
71318: LD_INT 3
71320: PUSH
71321: LD_INT 4
71323: PUSH
71324: LD_INT 5
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: IN
71334: IFFALSE 71346
// uc_nation := nation_american else
71336: LD_ADDR_OWVAR 21
71340: PUSH
71341: LD_INT 1
71343: ST_TO_ADDR
71344: GO 71389
// if chassis in [ 11 , 12 , 13 , 14 ] then
71346: LD_VAR 0 1
71350: PUSH
71351: LD_INT 11
71353: PUSH
71354: LD_INT 12
71356: PUSH
71357: LD_INT 13
71359: PUSH
71360: LD_INT 14
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: IN
71369: IFFALSE 71381
// uc_nation := nation_arabian else
71371: LD_ADDR_OWVAR 21
71375: PUSH
71376: LD_INT 2
71378: ST_TO_ADDR
71379: GO 71389
// uc_nation := nation_russian ;
71381: LD_ADDR_OWVAR 21
71385: PUSH
71386: LD_INT 3
71388: ST_TO_ADDR
// vc_chassis := chassis ;
71389: LD_ADDR_OWVAR 37
71393: PUSH
71394: LD_VAR 0 1
71398: ST_TO_ADDR
// vc_engine := engine ;
71399: LD_ADDR_OWVAR 39
71403: PUSH
71404: LD_VAR 0 2
71408: ST_TO_ADDR
// vc_control := control ;
71409: LD_ADDR_OWVAR 38
71413: PUSH
71414: LD_VAR 0 3
71418: ST_TO_ADDR
// vc_weapon := weapon ;
71419: LD_ADDR_OWVAR 40
71423: PUSH
71424: LD_VAR 0 4
71428: ST_TO_ADDR
// un := CreateVehicle ;
71429: LD_ADDR_VAR 0 8
71433: PUSH
71434: CALL_OW 45
71438: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71439: LD_VAR 0 8
71443: PPUSH
71444: LD_INT 0
71446: PPUSH
71447: LD_INT 5
71449: PPUSH
71450: CALL_OW 12
71454: PPUSH
71455: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71459: LD_VAR 0 8
71463: PPUSH
71464: LD_VAR 0 5
71468: PPUSH
71469: LD_VAR 0 6
71473: PPUSH
71474: LD_INT 1
71476: PPUSH
71477: CALL_OW 48
// end ;
71481: LD_VAR 0 7
71485: RET
// export hInvincible ; every 1 do
71486: GO 71488
71488: DISABLE
// hInvincible := [ ] ;
71489: LD_ADDR_EXP 95
71493: PUSH
71494: EMPTY
71495: ST_TO_ADDR
71496: END
// every 10 do var i ;
71497: GO 71499
71499: DISABLE
71500: LD_INT 0
71502: PPUSH
// begin enable ;
71503: ENABLE
// if not hInvincible then
71504: LD_EXP 95
71508: NOT
71509: IFFALSE 71513
// exit ;
71511: GO 71557
// for i in hInvincible do
71513: LD_ADDR_VAR 0 1
71517: PUSH
71518: LD_EXP 95
71522: PUSH
71523: FOR_IN
71524: IFFALSE 71555
// if GetLives ( i ) < 1000 then
71526: LD_VAR 0 1
71530: PPUSH
71531: CALL_OW 256
71535: PUSH
71536: LD_INT 1000
71538: LESS
71539: IFFALSE 71553
// SetLives ( i , 1000 ) ;
71541: LD_VAR 0 1
71545: PPUSH
71546: LD_INT 1000
71548: PPUSH
71549: CALL_OW 234
71553: GO 71523
71555: POP
71556: POP
// end ;
71557: PPOPN 1
71559: END
// export function hHackInvincible ; var i ; begin
71560: LD_INT 0
71562: PPUSH
71563: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71564: LD_ADDR_VAR 0 2
71568: PUSH
71569: LD_INT 2
71571: PUSH
71572: LD_INT 21
71574: PUSH
71575: LD_INT 1
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 21
71584: PUSH
71585: LD_INT 2
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: LIST
71596: PPUSH
71597: CALL_OW 69
71601: PUSH
71602: FOR_IN
71603: IFFALSE 71664
// if IsSelected ( i ) then
71605: LD_VAR 0 2
71609: PPUSH
71610: CALL_OW 306
71614: IFFALSE 71662
// begin if i in hInvincible then
71616: LD_VAR 0 2
71620: PUSH
71621: LD_EXP 95
71625: IN
71626: IFFALSE 71646
// hInvincible := hInvincible diff i else
71628: LD_ADDR_EXP 95
71632: PUSH
71633: LD_EXP 95
71637: PUSH
71638: LD_VAR 0 2
71642: DIFF
71643: ST_TO_ADDR
71644: GO 71662
// hInvincible := hInvincible union i ;
71646: LD_ADDR_EXP 95
71650: PUSH
71651: LD_EXP 95
71655: PUSH
71656: LD_VAR 0 2
71660: UNION
71661: ST_TO_ADDR
// end ;
71662: GO 71602
71664: POP
71665: POP
// end ;
71666: LD_VAR 0 1
71670: RET
// export function hHackInvisible ; var i , j ; begin
71671: LD_INT 0
71673: PPUSH
71674: PPUSH
71675: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71676: LD_ADDR_VAR 0 2
71680: PUSH
71681: LD_INT 21
71683: PUSH
71684: LD_INT 1
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PPUSH
71691: CALL_OW 69
71695: PUSH
71696: FOR_IN
71697: IFFALSE 71721
// if IsSelected ( i ) then
71699: LD_VAR 0 2
71703: PPUSH
71704: CALL_OW 306
71708: IFFALSE 71719
// ComForceInvisible ( i ) ;
71710: LD_VAR 0 2
71714: PPUSH
71715: CALL_OW 496
71719: GO 71696
71721: POP
71722: POP
// end ;
71723: LD_VAR 0 1
71727: RET
// export function hHackChangeYourSide ; begin
71728: LD_INT 0
71730: PPUSH
// if your_side = 8 then
71731: LD_OWVAR 2
71735: PUSH
71736: LD_INT 8
71738: EQUAL
71739: IFFALSE 71751
// your_side := 0 else
71741: LD_ADDR_OWVAR 2
71745: PUSH
71746: LD_INT 0
71748: ST_TO_ADDR
71749: GO 71765
// your_side := your_side + 1 ;
71751: LD_ADDR_OWVAR 2
71755: PUSH
71756: LD_OWVAR 2
71760: PUSH
71761: LD_INT 1
71763: PLUS
71764: ST_TO_ADDR
// end ;
71765: LD_VAR 0 1
71769: RET
// export function hHackChangeUnitSide ; var i , j ; begin
71770: LD_INT 0
71772: PPUSH
71773: PPUSH
71774: PPUSH
// for i in all_units do
71775: LD_ADDR_VAR 0 2
71779: PUSH
71780: LD_OWVAR 3
71784: PUSH
71785: FOR_IN
71786: IFFALSE 71864
// if IsSelected ( i ) then
71788: LD_VAR 0 2
71792: PPUSH
71793: CALL_OW 306
71797: IFFALSE 71862
// begin j := GetSide ( i ) ;
71799: LD_ADDR_VAR 0 3
71803: PUSH
71804: LD_VAR 0 2
71808: PPUSH
71809: CALL_OW 255
71813: ST_TO_ADDR
// if j = 8 then
71814: LD_VAR 0 3
71818: PUSH
71819: LD_INT 8
71821: EQUAL
71822: IFFALSE 71834
// j := 0 else
71824: LD_ADDR_VAR 0 3
71828: PUSH
71829: LD_INT 0
71831: ST_TO_ADDR
71832: GO 71848
// j := j + 1 ;
71834: LD_ADDR_VAR 0 3
71838: PUSH
71839: LD_VAR 0 3
71843: PUSH
71844: LD_INT 1
71846: PLUS
71847: ST_TO_ADDR
// SetSide ( i , j ) ;
71848: LD_VAR 0 2
71852: PPUSH
71853: LD_VAR 0 3
71857: PPUSH
71858: CALL_OW 235
// end ;
71862: GO 71785
71864: POP
71865: POP
// end ;
71866: LD_VAR 0 1
71870: RET
// export function hHackFog ; begin
71871: LD_INT 0
71873: PPUSH
// FogOff ( true ) ;
71874: LD_INT 1
71876: PPUSH
71877: CALL_OW 344
// end ;
71881: LD_VAR 0 1
71885: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71886: LD_INT 0
71888: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71889: LD_VAR 0 1
71893: PPUSH
71894: LD_VAR 0 2
71898: PPUSH
71899: LD_VAR 0 3
71903: PPUSH
71904: LD_INT 1
71906: PPUSH
71907: LD_INT 1
71909: PPUSH
71910: CALL_OW 483
// CenterOnXY ( x , y ) ;
71914: LD_VAR 0 2
71918: PPUSH
71919: LD_VAR 0 3
71923: PPUSH
71924: CALL_OW 84
// end ;
71928: LD_VAR 0 4
71932: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
71933: LD_INT 0
71935: PPUSH
71936: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
71937: LD_VAR 0 1
71941: NOT
71942: PUSH
71943: LD_VAR 0 2
71947: PPUSH
71948: LD_VAR 0 3
71952: PPUSH
71953: CALL_OW 488
71957: NOT
71958: OR
71959: PUSH
71960: LD_VAR 0 1
71964: PPUSH
71965: CALL_OW 266
71969: PUSH
71970: LD_INT 3
71972: NONEQUAL
71973: PUSH
71974: LD_VAR 0 1
71978: PPUSH
71979: CALL_OW 247
71983: PUSH
71984: LD_INT 1
71986: EQUAL
71987: NOT
71988: AND
71989: OR
71990: IFFALSE 71994
// exit ;
71992: GO 72143
// if GetType ( factory ) = unit_human then
71994: LD_VAR 0 1
71998: PPUSH
71999: CALL_OW 247
72003: PUSH
72004: LD_INT 1
72006: EQUAL
72007: IFFALSE 72024
// factory := IsInUnit ( factory ) ;
72009: LD_ADDR_VAR 0 1
72013: PUSH
72014: LD_VAR 0 1
72018: PPUSH
72019: CALL_OW 310
72023: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72024: LD_VAR 0 1
72028: PPUSH
72029: CALL_OW 266
72033: PUSH
72034: LD_INT 3
72036: NONEQUAL
72037: IFFALSE 72041
// exit ;
72039: GO 72143
// if HexInfo ( x , y ) = factory then
72041: LD_VAR 0 2
72045: PPUSH
72046: LD_VAR 0 3
72050: PPUSH
72051: CALL_OW 428
72055: PUSH
72056: LD_VAR 0 1
72060: EQUAL
72061: IFFALSE 72088
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72063: LD_ADDR_EXP 96
72067: PUSH
72068: LD_EXP 96
72072: PPUSH
72073: LD_VAR 0 1
72077: PPUSH
72078: LD_INT 0
72080: PPUSH
72081: CALL_OW 1
72085: ST_TO_ADDR
72086: GO 72139
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72088: LD_ADDR_EXP 96
72092: PUSH
72093: LD_EXP 96
72097: PPUSH
72098: LD_VAR 0 1
72102: PPUSH
72103: LD_VAR 0 1
72107: PPUSH
72108: CALL_OW 255
72112: PUSH
72113: LD_VAR 0 1
72117: PUSH
72118: LD_VAR 0 2
72122: PUSH
72123: LD_VAR 0 3
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: PPUSH
72134: CALL_OW 1
72138: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72139: CALL 72148 0 0
// end ;
72143: LD_VAR 0 4
72147: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72148: LD_INT 0
72150: PPUSH
72151: PPUSH
72152: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72153: LD_STRING resetFactoryWaypoint();
72155: PPUSH
72156: CALL_OW 559
// if factoryWaypoints then
72160: LD_EXP 96
72164: IFFALSE 72290
// begin list := PrepareArray ( factoryWaypoints ) ;
72166: LD_ADDR_VAR 0 3
72170: PUSH
72171: LD_EXP 96
72175: PPUSH
72176: CALL 56919 0 1
72180: ST_TO_ADDR
// for i := 1 to list do
72181: LD_ADDR_VAR 0 2
72185: PUSH
72186: DOUBLE
72187: LD_INT 1
72189: DEC
72190: ST_TO_ADDR
72191: LD_VAR 0 3
72195: PUSH
72196: FOR_TO
72197: IFFALSE 72288
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72199: LD_STRING setFactoryWaypointXY(
72201: PUSH
72202: LD_VAR 0 3
72206: PUSH
72207: LD_VAR 0 2
72211: ARRAY
72212: PUSH
72213: LD_INT 1
72215: ARRAY
72216: STR
72217: PUSH
72218: LD_STRING ,
72220: STR
72221: PUSH
72222: LD_VAR 0 3
72226: PUSH
72227: LD_VAR 0 2
72231: ARRAY
72232: PUSH
72233: LD_INT 2
72235: ARRAY
72236: STR
72237: PUSH
72238: LD_STRING ,
72240: STR
72241: PUSH
72242: LD_VAR 0 3
72246: PUSH
72247: LD_VAR 0 2
72251: ARRAY
72252: PUSH
72253: LD_INT 3
72255: ARRAY
72256: STR
72257: PUSH
72258: LD_STRING ,
72260: STR
72261: PUSH
72262: LD_VAR 0 3
72266: PUSH
72267: LD_VAR 0 2
72271: ARRAY
72272: PUSH
72273: LD_INT 4
72275: ARRAY
72276: STR
72277: PUSH
72278: LD_STRING )
72280: STR
72281: PPUSH
72282: CALL_OW 559
72286: GO 72196
72288: POP
72289: POP
// end ; end ;
72290: LD_VAR 0 1
72294: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72295: LD_INT 0
72297: PPUSH
// if HexInfo ( x , y ) = warehouse then
72298: LD_VAR 0 2
72302: PPUSH
72303: LD_VAR 0 3
72307: PPUSH
72308: CALL_OW 428
72312: PUSH
72313: LD_VAR 0 1
72317: EQUAL
72318: IFFALSE 72345
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72320: LD_ADDR_EXP 97
72324: PUSH
72325: LD_EXP 97
72329: PPUSH
72330: LD_VAR 0 1
72334: PPUSH
72335: LD_INT 0
72337: PPUSH
72338: CALL_OW 1
72342: ST_TO_ADDR
72343: GO 72396
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72345: LD_ADDR_EXP 97
72349: PUSH
72350: LD_EXP 97
72354: PPUSH
72355: LD_VAR 0 1
72359: PPUSH
72360: LD_VAR 0 1
72364: PPUSH
72365: CALL_OW 255
72369: PUSH
72370: LD_VAR 0 1
72374: PUSH
72375: LD_VAR 0 2
72379: PUSH
72380: LD_VAR 0 3
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: PPUSH
72391: CALL_OW 1
72395: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72396: CALL 72405 0 0
// end ;
72400: LD_VAR 0 4
72404: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72405: LD_INT 0
72407: PPUSH
72408: PPUSH
72409: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72410: LD_STRING resetWarehouseGatheringPoints();
72412: PPUSH
72413: CALL_OW 559
// if warehouseGatheringPoints then
72417: LD_EXP 97
72421: IFFALSE 72547
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72423: LD_ADDR_VAR 0 3
72427: PUSH
72428: LD_EXP 97
72432: PPUSH
72433: CALL 56919 0 1
72437: ST_TO_ADDR
// for i := 1 to list do
72438: LD_ADDR_VAR 0 2
72442: PUSH
72443: DOUBLE
72444: LD_INT 1
72446: DEC
72447: ST_TO_ADDR
72448: LD_VAR 0 3
72452: PUSH
72453: FOR_TO
72454: IFFALSE 72545
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72456: LD_STRING setWarehouseGatheringPointXY(
72458: PUSH
72459: LD_VAR 0 3
72463: PUSH
72464: LD_VAR 0 2
72468: ARRAY
72469: PUSH
72470: LD_INT 1
72472: ARRAY
72473: STR
72474: PUSH
72475: LD_STRING ,
72477: STR
72478: PUSH
72479: LD_VAR 0 3
72483: PUSH
72484: LD_VAR 0 2
72488: ARRAY
72489: PUSH
72490: LD_INT 2
72492: ARRAY
72493: STR
72494: PUSH
72495: LD_STRING ,
72497: STR
72498: PUSH
72499: LD_VAR 0 3
72503: PUSH
72504: LD_VAR 0 2
72508: ARRAY
72509: PUSH
72510: LD_INT 3
72512: ARRAY
72513: STR
72514: PUSH
72515: LD_STRING ,
72517: STR
72518: PUSH
72519: LD_VAR 0 3
72523: PUSH
72524: LD_VAR 0 2
72528: ARRAY
72529: PUSH
72530: LD_INT 4
72532: ARRAY
72533: STR
72534: PUSH
72535: LD_STRING )
72537: STR
72538: PPUSH
72539: CALL_OW 559
72543: GO 72453
72545: POP
72546: POP
// end ; end ;
72547: LD_VAR 0 1
72551: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
72552: LD_EXP 97
72556: IFFALSE 73241
72558: GO 72560
72560: DISABLE
72561: LD_INT 0
72563: PPUSH
72564: PPUSH
72565: PPUSH
72566: PPUSH
72567: PPUSH
72568: PPUSH
72569: PPUSH
72570: PPUSH
72571: PPUSH
// begin enable ;
72572: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
72573: LD_ADDR_VAR 0 3
72577: PUSH
72578: LD_EXP 97
72582: PPUSH
72583: CALL 56919 0 1
72587: ST_TO_ADDR
// if not list then
72588: LD_VAR 0 3
72592: NOT
72593: IFFALSE 72597
// exit ;
72595: GO 73241
// for i := 1 to list do
72597: LD_ADDR_VAR 0 1
72601: PUSH
72602: DOUBLE
72603: LD_INT 1
72605: DEC
72606: ST_TO_ADDR
72607: LD_VAR 0 3
72611: PUSH
72612: FOR_TO
72613: IFFALSE 73239
// begin depot := list [ i ] [ 2 ] ;
72615: LD_ADDR_VAR 0 8
72619: PUSH
72620: LD_VAR 0 3
72624: PUSH
72625: LD_VAR 0 1
72629: ARRAY
72630: PUSH
72631: LD_INT 2
72633: ARRAY
72634: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
72635: LD_ADDR_VAR 0 5
72639: PUSH
72640: LD_VAR 0 3
72644: PUSH
72645: LD_VAR 0 1
72649: ARRAY
72650: PUSH
72651: LD_INT 1
72653: ARRAY
72654: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
72655: LD_VAR 0 8
72659: PPUSH
72660: CALL_OW 301
72664: PUSH
72665: LD_VAR 0 5
72669: PUSH
72670: LD_VAR 0 8
72674: PPUSH
72675: CALL_OW 255
72679: NONEQUAL
72680: OR
72681: IFFALSE 72710
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
72683: LD_ADDR_EXP 97
72687: PUSH
72688: LD_EXP 97
72692: PPUSH
72693: LD_VAR 0 8
72697: PPUSH
72698: LD_INT 0
72700: PPUSH
72701: CALL_OW 1
72705: ST_TO_ADDR
// exit ;
72706: POP
72707: POP
72708: GO 73241
// end ; x := list [ i ] [ 3 ] ;
72710: LD_ADDR_VAR 0 6
72714: PUSH
72715: LD_VAR 0 3
72719: PUSH
72720: LD_VAR 0 1
72724: ARRAY
72725: PUSH
72726: LD_INT 3
72728: ARRAY
72729: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
72730: LD_ADDR_VAR 0 7
72734: PUSH
72735: LD_VAR 0 3
72739: PUSH
72740: LD_VAR 0 1
72744: ARRAY
72745: PUSH
72746: LD_INT 4
72748: ARRAY
72749: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
72750: LD_ADDR_VAR 0 9
72754: PUSH
72755: LD_VAR 0 6
72759: PPUSH
72760: LD_VAR 0 7
72764: PPUSH
72765: LD_INT 16
72767: PPUSH
72768: CALL 55507 0 3
72772: ST_TO_ADDR
// if not cratesNearbyPoint then
72773: LD_VAR 0 9
72777: NOT
72778: IFFALSE 72784
// exit ;
72780: POP
72781: POP
72782: GO 73241
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
72784: LD_ADDR_VAR 0 4
72788: PUSH
72789: LD_INT 22
72791: PUSH
72792: LD_VAR 0 5
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 3
72803: PUSH
72804: LD_INT 60
72806: PUSH
72807: EMPTY
72808: LIST
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 91
72816: PUSH
72817: LD_VAR 0 8
72821: PUSH
72822: LD_INT 6
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 2
72832: PUSH
72833: LD_INT 25
72835: PUSH
72836: LD_INT 2
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: PUSH
72843: LD_INT 25
72845: PUSH
72846: LD_INT 16
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: LIST
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: PPUSH
72864: CALL_OW 69
72868: PUSH
72869: LD_VAR 0 8
72873: PPUSH
72874: CALL_OW 313
72878: PPUSH
72879: LD_INT 3
72881: PUSH
72882: LD_INT 60
72884: PUSH
72885: EMPTY
72886: LIST
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: PUSH
72892: LD_INT 2
72894: PUSH
72895: LD_INT 25
72897: PUSH
72898: LD_INT 2
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 25
72907: PUSH
72908: LD_INT 16
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: LIST
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PPUSH
72924: CALL_OW 72
72928: UNION
72929: ST_TO_ADDR
// if tmp then
72930: LD_VAR 0 4
72934: IFFALSE 73014
// begin tmp := ShrinkArray ( tmp , 3 ) ;
72936: LD_ADDR_VAR 0 4
72940: PUSH
72941: LD_VAR 0 4
72945: PPUSH
72946: LD_INT 3
72948: PPUSH
72949: CALL 53476 0 2
72953: ST_TO_ADDR
// for j in tmp do
72954: LD_ADDR_VAR 0 2
72958: PUSH
72959: LD_VAR 0 4
72963: PUSH
72964: FOR_IN
72965: IFFALSE 73008
// begin if IsInUnit ( j ) then
72967: LD_VAR 0 2
72971: PPUSH
72972: CALL_OW 310
72976: IFFALSE 72987
// ComExit ( j ) ;
72978: LD_VAR 0 2
72982: PPUSH
72983: CALL 53559 0 1
// AddComCollect ( j , x , y ) ;
72987: LD_VAR 0 2
72991: PPUSH
72992: LD_VAR 0 6
72996: PPUSH
72997: LD_VAR 0 7
73001: PPUSH
73002: CALL_OW 177
// end ;
73006: GO 72964
73008: POP
73009: POP
// exit ;
73010: POP
73011: POP
73012: GO 73241
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73014: LD_ADDR_VAR 0 4
73018: PUSH
73019: LD_INT 22
73021: PUSH
73022: LD_VAR 0 5
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 91
73033: PUSH
73034: LD_VAR 0 8
73038: PUSH
73039: LD_INT 8
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: LIST
73046: PUSH
73047: LD_INT 2
73049: PUSH
73050: LD_INT 34
73052: PUSH
73053: LD_INT 12
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 34
73062: PUSH
73063: LD_INT 51
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: LD_INT 34
73072: PUSH
73073: LD_INT 32
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 34
73082: PUSH
73083: LD_INT 89
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: LIST
73101: PPUSH
73102: CALL_OW 69
73106: ST_TO_ADDR
// if tmp then
73107: LD_VAR 0 4
73111: IFFALSE 73237
// begin for j in tmp do
73113: LD_ADDR_VAR 0 2
73117: PUSH
73118: LD_VAR 0 4
73122: PUSH
73123: FOR_IN
73124: IFFALSE 73235
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73126: LD_VAR 0 2
73130: PPUSH
73131: CALL_OW 262
73135: PUSH
73136: LD_INT 3
73138: EQUAL
73139: PUSH
73140: LD_VAR 0 2
73144: PPUSH
73145: CALL_OW 261
73149: PUSH
73150: LD_INT 20
73152: GREATER
73153: OR
73154: PUSH
73155: LD_VAR 0 2
73159: PPUSH
73160: CALL_OW 314
73164: NOT
73165: AND
73166: PUSH
73167: LD_VAR 0 2
73171: PPUSH
73172: CALL_OW 263
73176: PUSH
73177: LD_INT 1
73179: NONEQUAL
73180: PUSH
73181: LD_VAR 0 2
73185: PPUSH
73186: CALL_OW 311
73190: OR
73191: AND
73192: IFFALSE 73233
// begin ComCollect ( j , x , y ) ;
73194: LD_VAR 0 2
73198: PPUSH
73199: LD_VAR 0 6
73203: PPUSH
73204: LD_VAR 0 7
73208: PPUSH
73209: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73213: LD_VAR 0 2
73217: PPUSH
73218: LD_VAR 0 8
73222: PPUSH
73223: CALL_OW 172
// exit ;
73227: POP
73228: POP
73229: POP
73230: POP
73231: GO 73241
// end ;
73233: GO 73123
73235: POP
73236: POP
// end ; end ;
73237: GO 72612
73239: POP
73240: POP
// end ; end_of_file
73241: PPOPN 9
73243: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73244: LD_VAR 0 1
73248: PUSH
73249: LD_INT 200
73251: DOUBLE
73252: GREATEREQUAL
73253: IFFALSE 73261
73255: LD_INT 299
73257: DOUBLE
73258: LESSEQUAL
73259: IFTRUE 73263
73261: GO 73295
73263: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73264: LD_VAR 0 1
73268: PPUSH
73269: LD_VAR 0 2
73273: PPUSH
73274: LD_VAR 0 3
73278: PPUSH
73279: LD_VAR 0 4
73283: PPUSH
73284: LD_VAR 0 5
73288: PPUSH
73289: CALL 73783 0 5
73293: GO 73372
73295: LD_INT 300
73297: DOUBLE
73298: GREATEREQUAL
73299: IFFALSE 73307
73301: LD_INT 399
73303: DOUBLE
73304: LESSEQUAL
73305: IFTRUE 73309
73307: GO 73371
73309: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73310: LD_VAR 0 1
73314: PPUSH
73315: LD_VAR 0 2
73319: PPUSH
73320: LD_VAR 0 3
73324: PPUSH
73325: LD_VAR 0 4
73329: PPUSH
73330: LD_VAR 0 5
73334: PPUSH
73335: LD_VAR 0 6
73339: PPUSH
73340: LD_VAR 0 7
73344: PPUSH
73345: LD_VAR 0 8
73349: PPUSH
73350: LD_VAR 0 9
73354: PPUSH
73355: LD_VAR 0 10
73359: PPUSH
73360: LD_VAR 0 11
73364: PPUSH
73365: CALL 69945 0 11
73369: GO 73372
73371: POP
// end ;
73372: PPOPN 11
73374: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73375: LD_VAR 0 1
73379: PPUSH
73380: LD_VAR 0 2
73384: PPUSH
73385: LD_VAR 0 3
73389: PPUSH
73390: LD_VAR 0 4
73394: PPUSH
73395: LD_VAR 0 5
73399: PPUSH
73400: CALL 73519 0 5
// end ; end_of_file
73404: PPOPN 5
73406: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
73407: LD_INT 0
73409: PPUSH
73410: PPUSH
73411: PPUSH
73412: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
73413: LD_VAR 0 1
73417: PPUSH
73418: CALL_OW 264
73422: PUSH
73423: LD_INT 91
73425: EQUAL
73426: IFFALSE 73498
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
73428: LD_INT 68
73430: PPUSH
73431: LD_VAR 0 1
73435: PPUSH
73436: CALL_OW 255
73440: PPUSH
73441: CALL_OW 321
73445: PUSH
73446: LD_INT 2
73448: EQUAL
73449: IFFALSE 73461
// eff := 70 else
73451: LD_ADDR_VAR 0 4
73455: PUSH
73456: LD_INT 70
73458: ST_TO_ADDR
73459: GO 73469
// eff := 30 ;
73461: LD_ADDR_VAR 0 4
73465: PUSH
73466: LD_INT 30
73468: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
73469: LD_VAR 0 1
73473: PPUSH
73474: CALL_OW 250
73478: PPUSH
73479: LD_VAR 0 1
73483: PPUSH
73484: CALL_OW 251
73488: PPUSH
73489: LD_VAR 0 4
73493: PPUSH
73494: CALL_OW 495
// end ; end ;
73498: LD_VAR 0 2
73502: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
73503: LD_INT 0
73505: PPUSH
// end ;
73506: LD_VAR 0 4
73510: RET
// export function SOS_Command ( cmd ) ; begin
73511: LD_INT 0
73513: PPUSH
// end ;
73514: LD_VAR 0 2
73518: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73519: LD_INT 0
73521: PPUSH
// end ;
73522: LD_VAR 0 6
73526: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
73527: LD_INT 0
73529: PPUSH
73530: PPUSH
// if not vehicle or not factory then
73531: LD_VAR 0 1
73535: NOT
73536: PUSH
73537: LD_VAR 0 2
73541: NOT
73542: OR
73543: IFFALSE 73547
// exit ;
73545: GO 73778
// if factoryWaypoints >= factory then
73547: LD_EXP 96
73551: PUSH
73552: LD_VAR 0 2
73556: GREATEREQUAL
73557: IFFALSE 73778
// if factoryWaypoints [ factory ] then
73559: LD_EXP 96
73563: PUSH
73564: LD_VAR 0 2
73568: ARRAY
73569: IFFALSE 73778
// begin if GetControl ( vehicle ) = control_manual then
73571: LD_VAR 0 1
73575: PPUSH
73576: CALL_OW 263
73580: PUSH
73581: LD_INT 1
73583: EQUAL
73584: IFFALSE 73665
// begin driver := IsDrivenBy ( vehicle ) ;
73586: LD_ADDR_VAR 0 4
73590: PUSH
73591: LD_VAR 0 1
73595: PPUSH
73596: CALL_OW 311
73600: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73601: LD_VAR 0 4
73605: PPUSH
73606: LD_EXP 96
73610: PUSH
73611: LD_VAR 0 2
73615: ARRAY
73616: PUSH
73617: LD_INT 3
73619: ARRAY
73620: PPUSH
73621: LD_EXP 96
73625: PUSH
73626: LD_VAR 0 2
73630: ARRAY
73631: PUSH
73632: LD_INT 4
73634: ARRAY
73635: PPUSH
73636: CALL_OW 171
// AddComExitVehicle ( driver ) ;
73640: LD_VAR 0 4
73644: PPUSH
73645: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
73649: LD_VAR 0 4
73653: PPUSH
73654: LD_VAR 0 2
73658: PPUSH
73659: CALL_OW 180
// end else
73663: GO 73778
// if GetControl ( vehicle ) = control_remote then
73665: LD_VAR 0 1
73669: PPUSH
73670: CALL_OW 263
73674: PUSH
73675: LD_INT 2
73677: EQUAL
73678: IFFALSE 73739
// begin wait ( 0 0$2 ) ;
73680: LD_INT 70
73682: PPUSH
73683: CALL_OW 67
// if Connect ( vehicle ) then
73687: LD_VAR 0 1
73691: PPUSH
73692: CALL 23767 0 1
73696: IFFALSE 73737
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73698: LD_VAR 0 1
73702: PPUSH
73703: LD_EXP 96
73707: PUSH
73708: LD_VAR 0 2
73712: ARRAY
73713: PUSH
73714: LD_INT 3
73716: ARRAY
73717: PPUSH
73718: LD_EXP 96
73722: PUSH
73723: LD_VAR 0 2
73727: ARRAY
73728: PUSH
73729: LD_INT 4
73731: ARRAY
73732: PPUSH
73733: CALL_OW 171
// end else
73737: GO 73778
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73739: LD_VAR 0 1
73743: PPUSH
73744: LD_EXP 96
73748: PUSH
73749: LD_VAR 0 2
73753: ARRAY
73754: PUSH
73755: LD_INT 3
73757: ARRAY
73758: PPUSH
73759: LD_EXP 96
73763: PUSH
73764: LD_VAR 0 2
73768: ARRAY
73769: PUSH
73770: LD_INT 4
73772: ARRAY
73773: PPUSH
73774: CALL_OW 171
// end ; end ;
73778: LD_VAR 0 3
73782: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
73783: LD_INT 0
73785: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
73786: LD_VAR 0 1
73790: PUSH
73791: LD_INT 250
73793: EQUAL
73794: PUSH
73795: LD_VAR 0 2
73799: PPUSH
73800: CALL_OW 264
73804: PUSH
73805: LD_INT 81
73807: EQUAL
73808: AND
73809: IFFALSE 73830
// MinerPlaceMine ( unit , x , y ) ;
73811: LD_VAR 0 2
73815: PPUSH
73816: LD_VAR 0 4
73820: PPUSH
73821: LD_VAR 0 5
73825: PPUSH
73826: CALL 76654 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
73830: LD_VAR 0 1
73834: PUSH
73835: LD_INT 251
73837: EQUAL
73838: PUSH
73839: LD_VAR 0 2
73843: PPUSH
73844: CALL_OW 264
73848: PUSH
73849: LD_INT 81
73851: EQUAL
73852: AND
73853: IFFALSE 73874
// MinerDetonateMine ( unit , x , y ) ;
73855: LD_VAR 0 2
73859: PPUSH
73860: LD_VAR 0 4
73864: PPUSH
73865: LD_VAR 0 5
73869: PPUSH
73870: CALL 76929 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
73874: LD_VAR 0 1
73878: PUSH
73879: LD_INT 252
73881: EQUAL
73882: PUSH
73883: LD_VAR 0 2
73887: PPUSH
73888: CALL_OW 264
73892: PUSH
73893: LD_INT 81
73895: EQUAL
73896: AND
73897: IFFALSE 73918
// MinerCreateMinefield ( unit , x , y ) ;
73899: LD_VAR 0 2
73903: PPUSH
73904: LD_VAR 0 4
73908: PPUSH
73909: LD_VAR 0 5
73913: PPUSH
73914: CALL 77346 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
73918: LD_VAR 0 1
73922: PUSH
73923: LD_INT 253
73925: EQUAL
73926: PUSH
73927: LD_VAR 0 2
73931: PPUSH
73932: CALL_OW 257
73936: PUSH
73937: LD_INT 5
73939: EQUAL
73940: AND
73941: IFFALSE 73962
// ComBinocular ( unit , x , y ) ;
73943: LD_VAR 0 2
73947: PPUSH
73948: LD_VAR 0 4
73952: PPUSH
73953: LD_VAR 0 5
73957: PPUSH
73958: CALL 77715 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
73962: LD_VAR 0 1
73966: PUSH
73967: LD_INT 254
73969: EQUAL
73970: PUSH
73971: LD_VAR 0 2
73975: PPUSH
73976: CALL_OW 264
73980: PUSH
73981: LD_INT 99
73983: EQUAL
73984: AND
73985: PUSH
73986: LD_VAR 0 3
73990: PPUSH
73991: CALL_OW 263
73995: PUSH
73996: LD_INT 3
73998: EQUAL
73999: AND
74000: IFFALSE 74016
// HackDestroyVehicle ( unit , selectedUnit ) ;
74002: LD_VAR 0 2
74006: PPUSH
74007: LD_VAR 0 3
74011: PPUSH
74012: CALL 76018 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74016: LD_VAR 0 1
74020: PUSH
74021: LD_INT 255
74023: EQUAL
74024: PUSH
74025: LD_VAR 0 2
74029: PPUSH
74030: CALL_OW 264
74034: PUSH
74035: LD_INT 14
74037: PUSH
74038: LD_INT 53
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: IN
74045: AND
74046: PUSH
74047: LD_VAR 0 4
74051: PPUSH
74052: LD_VAR 0 5
74056: PPUSH
74057: CALL_OW 488
74061: AND
74062: IFFALSE 74086
// CutTreeXYR ( unit , x , y , 12 ) ;
74064: LD_VAR 0 2
74068: PPUSH
74069: LD_VAR 0 4
74073: PPUSH
74074: LD_VAR 0 5
74078: PPUSH
74079: LD_INT 12
74081: PPUSH
74082: CALL 74181 0 4
// if cmd = 256 then
74086: LD_VAR 0 1
74090: PUSH
74091: LD_INT 256
74093: EQUAL
74094: IFFALSE 74115
// SetFactoryWaypoint ( unit , x , y ) ;
74096: LD_VAR 0 2
74100: PPUSH
74101: LD_VAR 0 4
74105: PPUSH
74106: LD_VAR 0 5
74110: PPUSH
74111: CALL 71933 0 3
// if cmd = 257 then
74115: LD_VAR 0 1
74119: PUSH
74120: LD_INT 257
74122: EQUAL
74123: IFFALSE 74144
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74125: LD_VAR 0 2
74129: PPUSH
74130: LD_VAR 0 4
74134: PPUSH
74135: LD_VAR 0 5
74139: PPUSH
74140: CALL 72295 0 3
// if cmd = 258 then
74144: LD_VAR 0 1
74148: PUSH
74149: LD_INT 258
74151: EQUAL
74152: IFFALSE 74176
// BurnTreeXYR ( unit , x , y , 8 ) ;
74154: LD_VAR 0 2
74158: PPUSH
74159: LD_VAR 0 4
74163: PPUSH
74164: LD_VAR 0 5
74168: PPUSH
74169: LD_INT 8
74171: PPUSH
74172: CALL 74575 0 4
// end ;
74176: LD_VAR 0 6
74180: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74181: LD_INT 0
74183: PPUSH
74184: PPUSH
74185: PPUSH
74186: PPUSH
74187: PPUSH
74188: PPUSH
74189: PPUSH
74190: PPUSH
74191: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
74192: LD_VAR 0 1
74196: PPUSH
74197: CALL_OW 302
74201: NOT
74202: PUSH
74203: LD_VAR 0 2
74207: PPUSH
74208: LD_VAR 0 3
74212: PPUSH
74213: CALL_OW 488
74217: NOT
74218: OR
74219: PUSH
74220: LD_VAR 0 4
74224: NOT
74225: OR
74226: IFFALSE 74230
// exit ;
74228: GO 74570
// list := [ ] ;
74230: LD_ADDR_VAR 0 13
74234: PUSH
74235: EMPTY
74236: ST_TO_ADDR
// if x - r < 0 then
74237: LD_VAR 0 2
74241: PUSH
74242: LD_VAR 0 4
74246: MINUS
74247: PUSH
74248: LD_INT 0
74250: LESS
74251: IFFALSE 74263
// min_x := 0 else
74253: LD_ADDR_VAR 0 7
74257: PUSH
74258: LD_INT 0
74260: ST_TO_ADDR
74261: GO 74279
// min_x := x - r ;
74263: LD_ADDR_VAR 0 7
74267: PUSH
74268: LD_VAR 0 2
74272: PUSH
74273: LD_VAR 0 4
74277: MINUS
74278: ST_TO_ADDR
// if y - r < 0 then
74279: LD_VAR 0 3
74283: PUSH
74284: LD_VAR 0 4
74288: MINUS
74289: PUSH
74290: LD_INT 0
74292: LESS
74293: IFFALSE 74305
// min_y := 0 else
74295: LD_ADDR_VAR 0 8
74299: PUSH
74300: LD_INT 0
74302: ST_TO_ADDR
74303: GO 74321
// min_y := y - r ;
74305: LD_ADDR_VAR 0 8
74309: PUSH
74310: LD_VAR 0 3
74314: PUSH
74315: LD_VAR 0 4
74319: MINUS
74320: ST_TO_ADDR
// max_x := x + r ;
74321: LD_ADDR_VAR 0 9
74325: PUSH
74326: LD_VAR 0 2
74330: PUSH
74331: LD_VAR 0 4
74335: PLUS
74336: ST_TO_ADDR
// max_y := y + r ;
74337: LD_ADDR_VAR 0 10
74341: PUSH
74342: LD_VAR 0 3
74346: PUSH
74347: LD_VAR 0 4
74351: PLUS
74352: ST_TO_ADDR
// for _x = min_x to max_x do
74353: LD_ADDR_VAR 0 11
74357: PUSH
74358: DOUBLE
74359: LD_VAR 0 7
74363: DEC
74364: ST_TO_ADDR
74365: LD_VAR 0 9
74369: PUSH
74370: FOR_TO
74371: IFFALSE 74488
// for _y = min_y to max_y do
74373: LD_ADDR_VAR 0 12
74377: PUSH
74378: DOUBLE
74379: LD_VAR 0 8
74383: DEC
74384: ST_TO_ADDR
74385: LD_VAR 0 10
74389: PUSH
74390: FOR_TO
74391: IFFALSE 74484
// begin if not ValidHex ( _x , _y ) then
74393: LD_VAR 0 11
74397: PPUSH
74398: LD_VAR 0 12
74402: PPUSH
74403: CALL_OW 488
74407: NOT
74408: IFFALSE 74412
// continue ;
74410: GO 74390
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74412: LD_VAR 0 11
74416: PPUSH
74417: LD_VAR 0 12
74421: PPUSH
74422: CALL_OW 351
74426: PUSH
74427: LD_VAR 0 11
74431: PPUSH
74432: LD_VAR 0 12
74436: PPUSH
74437: CALL_OW 554
74441: AND
74442: IFFALSE 74482
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74444: LD_ADDR_VAR 0 13
74448: PUSH
74449: LD_VAR 0 13
74453: PPUSH
74454: LD_VAR 0 13
74458: PUSH
74459: LD_INT 1
74461: PLUS
74462: PPUSH
74463: LD_VAR 0 11
74467: PUSH
74468: LD_VAR 0 12
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: PPUSH
74477: CALL_OW 2
74481: ST_TO_ADDR
// end ;
74482: GO 74390
74484: POP
74485: POP
74486: GO 74370
74488: POP
74489: POP
// if not list then
74490: LD_VAR 0 13
74494: NOT
74495: IFFALSE 74499
// exit ;
74497: GO 74570
// for i in list do
74499: LD_ADDR_VAR 0 6
74503: PUSH
74504: LD_VAR 0 13
74508: PUSH
74509: FOR_IN
74510: IFFALSE 74568
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
74512: LD_VAR 0 1
74516: PPUSH
74517: LD_STRING M
74519: PUSH
74520: LD_VAR 0 6
74524: PUSH
74525: LD_INT 1
74527: ARRAY
74528: PUSH
74529: LD_VAR 0 6
74533: PUSH
74534: LD_INT 2
74536: ARRAY
74537: PUSH
74538: LD_INT 0
74540: PUSH
74541: LD_INT 0
74543: PUSH
74544: LD_INT 0
74546: PUSH
74547: LD_INT 0
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: LIST
74554: LIST
74555: LIST
74556: LIST
74557: LIST
74558: PUSH
74559: EMPTY
74560: LIST
74561: PPUSH
74562: CALL_OW 447
74566: GO 74509
74568: POP
74569: POP
// end ;
74570: LD_VAR 0 5
74574: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74575: LD_INT 0
74577: PPUSH
74578: PPUSH
74579: PPUSH
74580: PPUSH
74581: PPUSH
74582: PPUSH
74583: PPUSH
74584: PPUSH
74585: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
74586: LD_VAR 0 1
74590: PPUSH
74591: CALL_OW 302
74595: NOT
74596: PUSH
74597: LD_VAR 0 2
74601: PPUSH
74602: LD_VAR 0 3
74606: PPUSH
74607: CALL_OW 488
74611: NOT
74612: OR
74613: PUSH
74614: LD_VAR 0 4
74618: NOT
74619: OR
74620: IFFALSE 74624
// exit ;
74622: GO 74972
// list := [ ] ;
74624: LD_ADDR_VAR 0 13
74628: PUSH
74629: EMPTY
74630: ST_TO_ADDR
// if x - r < 0 then
74631: LD_VAR 0 2
74635: PUSH
74636: LD_VAR 0 4
74640: MINUS
74641: PUSH
74642: LD_INT 0
74644: LESS
74645: IFFALSE 74657
// min_x := 0 else
74647: LD_ADDR_VAR 0 7
74651: PUSH
74652: LD_INT 0
74654: ST_TO_ADDR
74655: GO 74673
// min_x := x - r ;
74657: LD_ADDR_VAR 0 7
74661: PUSH
74662: LD_VAR 0 2
74666: PUSH
74667: LD_VAR 0 4
74671: MINUS
74672: ST_TO_ADDR
// if y - r < 0 then
74673: LD_VAR 0 3
74677: PUSH
74678: LD_VAR 0 4
74682: MINUS
74683: PUSH
74684: LD_INT 0
74686: LESS
74687: IFFALSE 74699
// min_y := 0 else
74689: LD_ADDR_VAR 0 8
74693: PUSH
74694: LD_INT 0
74696: ST_TO_ADDR
74697: GO 74715
// min_y := y - r ;
74699: LD_ADDR_VAR 0 8
74703: PUSH
74704: LD_VAR 0 3
74708: PUSH
74709: LD_VAR 0 4
74713: MINUS
74714: ST_TO_ADDR
// max_x := x + r ;
74715: LD_ADDR_VAR 0 9
74719: PUSH
74720: LD_VAR 0 2
74724: PUSH
74725: LD_VAR 0 4
74729: PLUS
74730: ST_TO_ADDR
// max_y := y + r ;
74731: LD_ADDR_VAR 0 10
74735: PUSH
74736: LD_VAR 0 3
74740: PUSH
74741: LD_VAR 0 4
74745: PLUS
74746: ST_TO_ADDR
// for _x = min_x to max_x do
74747: LD_ADDR_VAR 0 11
74751: PUSH
74752: DOUBLE
74753: LD_VAR 0 7
74757: DEC
74758: ST_TO_ADDR
74759: LD_VAR 0 9
74763: PUSH
74764: FOR_TO
74765: IFFALSE 74882
// for _y = min_y to max_y do
74767: LD_ADDR_VAR 0 12
74771: PUSH
74772: DOUBLE
74773: LD_VAR 0 8
74777: DEC
74778: ST_TO_ADDR
74779: LD_VAR 0 10
74783: PUSH
74784: FOR_TO
74785: IFFALSE 74878
// begin if not ValidHex ( _x , _y ) then
74787: LD_VAR 0 11
74791: PPUSH
74792: LD_VAR 0 12
74796: PPUSH
74797: CALL_OW 488
74801: NOT
74802: IFFALSE 74806
// continue ;
74804: GO 74784
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74806: LD_VAR 0 11
74810: PPUSH
74811: LD_VAR 0 12
74815: PPUSH
74816: CALL_OW 351
74820: PUSH
74821: LD_VAR 0 11
74825: PPUSH
74826: LD_VAR 0 12
74830: PPUSH
74831: CALL_OW 554
74835: AND
74836: IFFALSE 74876
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74838: LD_ADDR_VAR 0 13
74842: PUSH
74843: LD_VAR 0 13
74847: PPUSH
74848: LD_VAR 0 13
74852: PUSH
74853: LD_INT 1
74855: PLUS
74856: PPUSH
74857: LD_VAR 0 11
74861: PUSH
74862: LD_VAR 0 12
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PPUSH
74871: CALL_OW 2
74875: ST_TO_ADDR
// end ;
74876: GO 74784
74878: POP
74879: POP
74880: GO 74764
74882: POP
74883: POP
// if not list then
74884: LD_VAR 0 13
74888: NOT
74889: IFFALSE 74893
// exit ;
74891: GO 74972
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
74893: LD_ADDR_VAR 0 13
74897: PUSH
74898: LD_VAR 0 1
74902: PPUSH
74903: LD_VAR 0 13
74907: PPUSH
74908: LD_INT 1
74910: PPUSH
74911: LD_INT 1
74913: PPUSH
74914: CALL 20909 0 4
74918: ST_TO_ADDR
// ComStop ( flame ) ;
74919: LD_VAR 0 1
74923: PPUSH
74924: CALL_OW 141
// for i in list do
74928: LD_ADDR_VAR 0 6
74932: PUSH
74933: LD_VAR 0 13
74937: PUSH
74938: FOR_IN
74939: IFFALSE 74970
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
74941: LD_VAR 0 1
74945: PPUSH
74946: LD_VAR 0 6
74950: PUSH
74951: LD_INT 1
74953: ARRAY
74954: PPUSH
74955: LD_VAR 0 6
74959: PUSH
74960: LD_INT 2
74962: ARRAY
74963: PPUSH
74964: CALL_OW 176
74968: GO 74938
74970: POP
74971: POP
// end ;
74972: LD_VAR 0 5
74976: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
74977: LD_EXP 99
74981: NOT
74982: IFFALSE 75032
74984: GO 74986
74986: DISABLE
// begin initHack := true ;
74987: LD_ADDR_EXP 99
74991: PUSH
74992: LD_INT 1
74994: ST_TO_ADDR
// hackTanks := [ ] ;
74995: LD_ADDR_EXP 100
74999: PUSH
75000: EMPTY
75001: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75002: LD_ADDR_EXP 101
75006: PUSH
75007: EMPTY
75008: ST_TO_ADDR
// hackLimit := 3 ;
75009: LD_ADDR_EXP 102
75013: PUSH
75014: LD_INT 3
75016: ST_TO_ADDR
// hackDist := 12 ;
75017: LD_ADDR_EXP 103
75021: PUSH
75022: LD_INT 12
75024: ST_TO_ADDR
// hackCounter := [ ] ;
75025: LD_ADDR_EXP 104
75029: PUSH
75030: EMPTY
75031: ST_TO_ADDR
// end ;
75032: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75033: LD_EXP 99
75037: PUSH
75038: LD_INT 34
75040: PUSH
75041: LD_INT 99
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: PPUSH
75048: CALL_OW 69
75052: AND
75053: IFFALSE 75306
75055: GO 75057
75057: DISABLE
75058: LD_INT 0
75060: PPUSH
75061: PPUSH
// begin enable ;
75062: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75063: LD_ADDR_VAR 0 1
75067: PUSH
75068: LD_INT 34
75070: PUSH
75071: LD_INT 99
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: PPUSH
75078: CALL_OW 69
75082: PUSH
75083: FOR_IN
75084: IFFALSE 75304
// begin if not i in hackTanks then
75086: LD_VAR 0 1
75090: PUSH
75091: LD_EXP 100
75095: IN
75096: NOT
75097: IFFALSE 75180
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75099: LD_ADDR_EXP 100
75103: PUSH
75104: LD_EXP 100
75108: PPUSH
75109: LD_EXP 100
75113: PUSH
75114: LD_INT 1
75116: PLUS
75117: PPUSH
75118: LD_VAR 0 1
75122: PPUSH
75123: CALL_OW 1
75127: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75128: LD_ADDR_EXP 101
75132: PUSH
75133: LD_EXP 101
75137: PPUSH
75138: LD_EXP 101
75142: PUSH
75143: LD_INT 1
75145: PLUS
75146: PPUSH
75147: EMPTY
75148: PPUSH
75149: CALL_OW 1
75153: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75154: LD_ADDR_EXP 104
75158: PUSH
75159: LD_EXP 104
75163: PPUSH
75164: LD_EXP 104
75168: PUSH
75169: LD_INT 1
75171: PLUS
75172: PPUSH
75173: EMPTY
75174: PPUSH
75175: CALL_OW 1
75179: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75180: LD_VAR 0 1
75184: PPUSH
75185: CALL_OW 302
75189: NOT
75190: IFFALSE 75203
// begin HackUnlinkAll ( i ) ;
75192: LD_VAR 0 1
75196: PPUSH
75197: CALL 75309 0 1
// continue ;
75201: GO 75083
// end ; HackCheckCapturedStatus ( i ) ;
75203: LD_VAR 0 1
75207: PPUSH
75208: CALL 75752 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75212: LD_ADDR_VAR 0 2
75216: PUSH
75217: LD_INT 81
75219: PUSH
75220: LD_VAR 0 1
75224: PPUSH
75225: CALL_OW 255
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: PUSH
75234: LD_INT 33
75236: PUSH
75237: LD_INT 3
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: PUSH
75244: LD_INT 91
75246: PUSH
75247: LD_VAR 0 1
75251: PUSH
75252: LD_EXP 103
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: LIST
75261: PUSH
75262: LD_INT 50
75264: PUSH
75265: EMPTY
75266: LIST
75267: PUSH
75268: EMPTY
75269: LIST
75270: LIST
75271: LIST
75272: LIST
75273: PPUSH
75274: CALL_OW 69
75278: ST_TO_ADDR
// if not tmp then
75279: LD_VAR 0 2
75283: NOT
75284: IFFALSE 75288
// continue ;
75286: GO 75083
// HackLink ( i , tmp ) ;
75288: LD_VAR 0 1
75292: PPUSH
75293: LD_VAR 0 2
75297: PPUSH
75298: CALL 75445 0 2
// end ;
75302: GO 75083
75304: POP
75305: POP
// end ;
75306: PPOPN 2
75308: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75309: LD_INT 0
75311: PPUSH
75312: PPUSH
75313: PPUSH
// if not hack in hackTanks then
75314: LD_VAR 0 1
75318: PUSH
75319: LD_EXP 100
75323: IN
75324: NOT
75325: IFFALSE 75329
// exit ;
75327: GO 75440
// index := GetElementIndex ( hackTanks , hack ) ;
75329: LD_ADDR_VAR 0 4
75333: PUSH
75334: LD_EXP 100
75338: PPUSH
75339: LD_VAR 0 1
75343: PPUSH
75344: CALL 20206 0 2
75348: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75349: LD_EXP 101
75353: PUSH
75354: LD_VAR 0 4
75358: ARRAY
75359: IFFALSE 75440
// begin for i in hackTanksCaptured [ index ] do
75361: LD_ADDR_VAR 0 3
75365: PUSH
75366: LD_EXP 101
75370: PUSH
75371: LD_VAR 0 4
75375: ARRAY
75376: PUSH
75377: FOR_IN
75378: IFFALSE 75404
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75380: LD_VAR 0 3
75384: PUSH
75385: LD_INT 1
75387: ARRAY
75388: PPUSH
75389: LD_VAR 0 3
75393: PUSH
75394: LD_INT 2
75396: ARRAY
75397: PPUSH
75398: CALL_OW 235
75402: GO 75377
75404: POP
75405: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75406: LD_ADDR_EXP 101
75410: PUSH
75411: LD_EXP 101
75415: PPUSH
75416: LD_VAR 0 4
75420: PPUSH
75421: EMPTY
75422: PPUSH
75423: CALL_OW 1
75427: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75428: LD_VAR 0 1
75432: PPUSH
75433: LD_INT 0
75435: PPUSH
75436: CALL_OW 505
// end ; end ;
75440: LD_VAR 0 2
75444: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75445: LD_INT 0
75447: PPUSH
75448: PPUSH
75449: PPUSH
// if not hack in hackTanks or not vehicles then
75450: LD_VAR 0 1
75454: PUSH
75455: LD_EXP 100
75459: IN
75460: NOT
75461: PUSH
75462: LD_VAR 0 2
75466: NOT
75467: OR
75468: IFFALSE 75472
// exit ;
75470: GO 75747
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75472: LD_ADDR_VAR 0 2
75476: PUSH
75477: LD_VAR 0 1
75481: PPUSH
75482: LD_VAR 0 2
75486: PPUSH
75487: LD_INT 1
75489: PPUSH
75490: LD_INT 1
75492: PPUSH
75493: CALL 20856 0 4
75497: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
75498: LD_ADDR_VAR 0 5
75502: PUSH
75503: LD_EXP 100
75507: PPUSH
75508: LD_VAR 0 1
75512: PPUSH
75513: CALL 20206 0 2
75517: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
75518: LD_EXP 101
75522: PUSH
75523: LD_VAR 0 5
75527: ARRAY
75528: PUSH
75529: LD_EXP 102
75533: LESS
75534: IFFALSE 75723
// begin for i := 1 to vehicles do
75536: LD_ADDR_VAR 0 4
75540: PUSH
75541: DOUBLE
75542: LD_INT 1
75544: DEC
75545: ST_TO_ADDR
75546: LD_VAR 0 2
75550: PUSH
75551: FOR_TO
75552: IFFALSE 75721
// begin if hackTanksCaptured [ index ] = hackLimit then
75554: LD_EXP 101
75558: PUSH
75559: LD_VAR 0 5
75563: ARRAY
75564: PUSH
75565: LD_EXP 102
75569: EQUAL
75570: IFFALSE 75574
// break ;
75572: GO 75721
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
75574: LD_ADDR_EXP 104
75578: PUSH
75579: LD_EXP 104
75583: PPUSH
75584: LD_VAR 0 5
75588: PPUSH
75589: LD_EXP 104
75593: PUSH
75594: LD_VAR 0 5
75598: ARRAY
75599: PUSH
75600: LD_INT 1
75602: PLUS
75603: PPUSH
75604: CALL_OW 1
75608: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
75609: LD_ADDR_EXP 101
75613: PUSH
75614: LD_EXP 101
75618: PPUSH
75619: LD_VAR 0 5
75623: PUSH
75624: LD_EXP 101
75628: PUSH
75629: LD_VAR 0 5
75633: ARRAY
75634: PUSH
75635: LD_INT 1
75637: PLUS
75638: PUSH
75639: EMPTY
75640: LIST
75641: LIST
75642: PPUSH
75643: LD_VAR 0 2
75647: PUSH
75648: LD_VAR 0 4
75652: ARRAY
75653: PUSH
75654: LD_VAR 0 2
75658: PUSH
75659: LD_VAR 0 4
75663: ARRAY
75664: PPUSH
75665: CALL_OW 255
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: PPUSH
75674: CALL 20421 0 3
75678: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
75679: LD_VAR 0 2
75683: PUSH
75684: LD_VAR 0 4
75688: ARRAY
75689: PPUSH
75690: LD_VAR 0 1
75694: PPUSH
75695: CALL_OW 255
75699: PPUSH
75700: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
75704: LD_VAR 0 2
75708: PUSH
75709: LD_VAR 0 4
75713: ARRAY
75714: PPUSH
75715: CALL_OW 141
// end ;
75719: GO 75551
75721: POP
75722: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
75723: LD_VAR 0 1
75727: PPUSH
75728: LD_EXP 101
75732: PUSH
75733: LD_VAR 0 5
75737: ARRAY
75738: PUSH
75739: LD_INT 0
75741: PLUS
75742: PPUSH
75743: CALL_OW 505
// end ;
75747: LD_VAR 0 3
75751: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
75752: LD_INT 0
75754: PPUSH
75755: PPUSH
75756: PPUSH
75757: PPUSH
// if not hack in hackTanks then
75758: LD_VAR 0 1
75762: PUSH
75763: LD_EXP 100
75767: IN
75768: NOT
75769: IFFALSE 75773
// exit ;
75771: GO 76013
// index := GetElementIndex ( hackTanks , hack ) ;
75773: LD_ADDR_VAR 0 4
75777: PUSH
75778: LD_EXP 100
75782: PPUSH
75783: LD_VAR 0 1
75787: PPUSH
75788: CALL 20206 0 2
75792: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
75793: LD_ADDR_VAR 0 3
75797: PUSH
75798: DOUBLE
75799: LD_EXP 101
75803: PUSH
75804: LD_VAR 0 4
75808: ARRAY
75809: INC
75810: ST_TO_ADDR
75811: LD_INT 1
75813: PUSH
75814: FOR_DOWNTO
75815: IFFALSE 75987
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
75817: LD_ADDR_VAR 0 5
75821: PUSH
75822: LD_EXP 101
75826: PUSH
75827: LD_VAR 0 4
75831: ARRAY
75832: PUSH
75833: LD_VAR 0 3
75837: ARRAY
75838: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
75839: LD_VAR 0 5
75843: PUSH
75844: LD_INT 1
75846: ARRAY
75847: PPUSH
75848: CALL_OW 302
75852: NOT
75853: PUSH
75854: LD_VAR 0 5
75858: PUSH
75859: LD_INT 1
75861: ARRAY
75862: PPUSH
75863: CALL_OW 255
75867: PUSH
75868: LD_VAR 0 1
75872: PPUSH
75873: CALL_OW 255
75877: NONEQUAL
75878: OR
75879: IFFALSE 75985
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
75881: LD_VAR 0 5
75885: PUSH
75886: LD_INT 1
75888: ARRAY
75889: PPUSH
75890: CALL_OW 305
75894: PUSH
75895: LD_VAR 0 5
75899: PUSH
75900: LD_INT 1
75902: ARRAY
75903: PPUSH
75904: CALL_OW 255
75908: PUSH
75909: LD_VAR 0 1
75913: PPUSH
75914: CALL_OW 255
75918: EQUAL
75919: AND
75920: IFFALSE 75944
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
75922: LD_VAR 0 5
75926: PUSH
75927: LD_INT 1
75929: ARRAY
75930: PPUSH
75931: LD_VAR 0 5
75935: PUSH
75936: LD_INT 2
75938: ARRAY
75939: PPUSH
75940: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
75944: LD_ADDR_EXP 101
75948: PUSH
75949: LD_EXP 101
75953: PPUSH
75954: LD_VAR 0 4
75958: PPUSH
75959: LD_EXP 101
75963: PUSH
75964: LD_VAR 0 4
75968: ARRAY
75969: PPUSH
75970: LD_VAR 0 3
75974: PPUSH
75975: CALL_OW 3
75979: PPUSH
75980: CALL_OW 1
75984: ST_TO_ADDR
// end ; end ;
75985: GO 75814
75987: POP
75988: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
75989: LD_VAR 0 1
75993: PPUSH
75994: LD_EXP 101
75998: PUSH
75999: LD_VAR 0 4
76003: ARRAY
76004: PUSH
76005: LD_INT 0
76007: PLUS
76008: PPUSH
76009: CALL_OW 505
// end ;
76013: LD_VAR 0 2
76017: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76018: LD_INT 0
76020: PPUSH
76021: PPUSH
76022: PPUSH
76023: PPUSH
// if not hack in hackTanks then
76024: LD_VAR 0 1
76028: PUSH
76029: LD_EXP 100
76033: IN
76034: NOT
76035: IFFALSE 76039
// exit ;
76037: GO 76124
// index := GetElementIndex ( hackTanks , hack ) ;
76039: LD_ADDR_VAR 0 5
76043: PUSH
76044: LD_EXP 100
76048: PPUSH
76049: LD_VAR 0 1
76053: PPUSH
76054: CALL 20206 0 2
76058: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76059: LD_ADDR_VAR 0 4
76063: PUSH
76064: DOUBLE
76065: LD_INT 1
76067: DEC
76068: ST_TO_ADDR
76069: LD_EXP 101
76073: PUSH
76074: LD_VAR 0 5
76078: ARRAY
76079: PUSH
76080: FOR_TO
76081: IFFALSE 76122
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76083: LD_EXP 101
76087: PUSH
76088: LD_VAR 0 5
76092: ARRAY
76093: PUSH
76094: LD_VAR 0 4
76098: ARRAY
76099: PUSH
76100: LD_INT 1
76102: ARRAY
76103: PUSH
76104: LD_VAR 0 2
76108: EQUAL
76109: IFFALSE 76120
// KillUnit ( vehicle ) ;
76111: LD_VAR 0 2
76115: PPUSH
76116: CALL_OW 66
76120: GO 76080
76122: POP
76123: POP
// end ;
76124: LD_VAR 0 3
76128: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76129: LD_EXP 105
76133: NOT
76134: IFFALSE 76169
76136: GO 76138
76138: DISABLE
// begin initMiner := true ;
76139: LD_ADDR_EXP 105
76143: PUSH
76144: LD_INT 1
76146: ST_TO_ADDR
// minersList := [ ] ;
76147: LD_ADDR_EXP 106
76151: PUSH
76152: EMPTY
76153: ST_TO_ADDR
// minerMinesList := [ ] ;
76154: LD_ADDR_EXP 107
76158: PUSH
76159: EMPTY
76160: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76161: LD_ADDR_EXP 108
76165: PUSH
76166: LD_INT 5
76168: ST_TO_ADDR
// end ;
76169: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76170: LD_EXP 105
76174: PUSH
76175: LD_INT 34
76177: PUSH
76178: LD_INT 81
76180: PUSH
76181: EMPTY
76182: LIST
76183: LIST
76184: PPUSH
76185: CALL_OW 69
76189: AND
76190: IFFALSE 76651
76192: GO 76194
76194: DISABLE
76195: LD_INT 0
76197: PPUSH
76198: PPUSH
76199: PPUSH
76200: PPUSH
// begin enable ;
76201: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76202: LD_ADDR_VAR 0 1
76206: PUSH
76207: LD_INT 34
76209: PUSH
76210: LD_INT 81
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: PPUSH
76217: CALL_OW 69
76221: PUSH
76222: FOR_IN
76223: IFFALSE 76295
// begin if not i in minersList then
76225: LD_VAR 0 1
76229: PUSH
76230: LD_EXP 106
76234: IN
76235: NOT
76236: IFFALSE 76293
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76238: LD_ADDR_EXP 106
76242: PUSH
76243: LD_EXP 106
76247: PPUSH
76248: LD_EXP 106
76252: PUSH
76253: LD_INT 1
76255: PLUS
76256: PPUSH
76257: LD_VAR 0 1
76261: PPUSH
76262: CALL_OW 1
76266: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76267: LD_ADDR_EXP 107
76271: PUSH
76272: LD_EXP 107
76276: PPUSH
76277: LD_EXP 107
76281: PUSH
76282: LD_INT 1
76284: PLUS
76285: PPUSH
76286: EMPTY
76287: PPUSH
76288: CALL_OW 1
76292: ST_TO_ADDR
// end end ;
76293: GO 76222
76295: POP
76296: POP
// for i := minerMinesList downto 1 do
76297: LD_ADDR_VAR 0 1
76301: PUSH
76302: DOUBLE
76303: LD_EXP 107
76307: INC
76308: ST_TO_ADDR
76309: LD_INT 1
76311: PUSH
76312: FOR_DOWNTO
76313: IFFALSE 76649
// begin if IsLive ( minersList [ i ] ) then
76315: LD_EXP 106
76319: PUSH
76320: LD_VAR 0 1
76324: ARRAY
76325: PPUSH
76326: CALL_OW 300
76330: IFFALSE 76358
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76332: LD_EXP 106
76336: PUSH
76337: LD_VAR 0 1
76341: ARRAY
76342: PPUSH
76343: LD_EXP 107
76347: PUSH
76348: LD_VAR 0 1
76352: ARRAY
76353: PPUSH
76354: CALL_OW 505
// if not minerMinesList [ i ] then
76358: LD_EXP 107
76362: PUSH
76363: LD_VAR 0 1
76367: ARRAY
76368: NOT
76369: IFFALSE 76373
// continue ;
76371: GO 76312
// for j := minerMinesList [ i ] downto 1 do
76373: LD_ADDR_VAR 0 2
76377: PUSH
76378: DOUBLE
76379: LD_EXP 107
76383: PUSH
76384: LD_VAR 0 1
76388: ARRAY
76389: INC
76390: ST_TO_ADDR
76391: LD_INT 1
76393: PUSH
76394: FOR_DOWNTO
76395: IFFALSE 76645
// begin side := GetSide ( minersList [ i ] ) ;
76397: LD_ADDR_VAR 0 3
76401: PUSH
76402: LD_EXP 106
76406: PUSH
76407: LD_VAR 0 1
76411: ARRAY
76412: PPUSH
76413: CALL_OW 255
76417: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76418: LD_ADDR_VAR 0 4
76422: PUSH
76423: LD_EXP 107
76427: PUSH
76428: LD_VAR 0 1
76432: ARRAY
76433: PUSH
76434: LD_VAR 0 2
76438: ARRAY
76439: PUSH
76440: LD_INT 1
76442: ARRAY
76443: PPUSH
76444: LD_EXP 107
76448: PUSH
76449: LD_VAR 0 1
76453: ARRAY
76454: PUSH
76455: LD_VAR 0 2
76459: ARRAY
76460: PUSH
76461: LD_INT 2
76463: ARRAY
76464: PPUSH
76465: CALL_OW 428
76469: ST_TO_ADDR
// if not tmp then
76470: LD_VAR 0 4
76474: NOT
76475: IFFALSE 76479
// continue ;
76477: GO 76394
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76479: LD_VAR 0 4
76483: PUSH
76484: LD_INT 81
76486: PUSH
76487: LD_VAR 0 3
76491: PUSH
76492: EMPTY
76493: LIST
76494: LIST
76495: PPUSH
76496: CALL_OW 69
76500: IN
76501: PUSH
76502: LD_EXP 107
76506: PUSH
76507: LD_VAR 0 1
76511: ARRAY
76512: PUSH
76513: LD_VAR 0 2
76517: ARRAY
76518: PUSH
76519: LD_INT 1
76521: ARRAY
76522: PPUSH
76523: LD_EXP 107
76527: PUSH
76528: LD_VAR 0 1
76532: ARRAY
76533: PUSH
76534: LD_VAR 0 2
76538: ARRAY
76539: PUSH
76540: LD_INT 2
76542: ARRAY
76543: PPUSH
76544: CALL_OW 458
76548: AND
76549: IFFALSE 76643
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
76551: LD_EXP 107
76555: PUSH
76556: LD_VAR 0 1
76560: ARRAY
76561: PUSH
76562: LD_VAR 0 2
76566: ARRAY
76567: PUSH
76568: LD_INT 1
76570: ARRAY
76571: PPUSH
76572: LD_EXP 107
76576: PUSH
76577: LD_VAR 0 1
76581: ARRAY
76582: PUSH
76583: LD_VAR 0 2
76587: ARRAY
76588: PUSH
76589: LD_INT 2
76591: ARRAY
76592: PPUSH
76593: LD_VAR 0 3
76597: PPUSH
76598: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
76602: LD_ADDR_EXP 107
76606: PUSH
76607: LD_EXP 107
76611: PPUSH
76612: LD_VAR 0 1
76616: PPUSH
76617: LD_EXP 107
76621: PUSH
76622: LD_VAR 0 1
76626: ARRAY
76627: PPUSH
76628: LD_VAR 0 2
76632: PPUSH
76633: CALL_OW 3
76637: PPUSH
76638: CALL_OW 1
76642: ST_TO_ADDR
// end ; end ;
76643: GO 76394
76645: POP
76646: POP
// end ;
76647: GO 76312
76649: POP
76650: POP
// end ;
76651: PPOPN 4
76653: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
76654: LD_INT 0
76656: PPUSH
76657: PPUSH
// result := false ;
76658: LD_ADDR_VAR 0 4
76662: PUSH
76663: LD_INT 0
76665: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
76666: LD_VAR 0 1
76670: PPUSH
76671: CALL_OW 264
76675: PUSH
76676: LD_INT 81
76678: EQUAL
76679: NOT
76680: IFFALSE 76684
// exit ;
76682: GO 76924
// index := GetElementIndex ( minersList , unit ) ;
76684: LD_ADDR_VAR 0 5
76688: PUSH
76689: LD_EXP 106
76693: PPUSH
76694: LD_VAR 0 1
76698: PPUSH
76699: CALL 20206 0 2
76703: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
76704: LD_EXP 107
76708: PUSH
76709: LD_VAR 0 5
76713: ARRAY
76714: PUSH
76715: LD_EXP 108
76719: GREATEREQUAL
76720: IFFALSE 76724
// exit ;
76722: GO 76924
// ComMoveXY ( unit , x , y ) ;
76724: LD_VAR 0 1
76728: PPUSH
76729: LD_VAR 0 2
76733: PPUSH
76734: LD_VAR 0 3
76738: PPUSH
76739: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
76743: LD_INT 35
76745: PPUSH
76746: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
76750: LD_VAR 0 1
76754: PPUSH
76755: LD_VAR 0 2
76759: PPUSH
76760: LD_VAR 0 3
76764: PPUSH
76765: CALL 51958 0 3
76769: NOT
76770: PUSH
76771: LD_VAR 0 1
76775: PPUSH
76776: CALL_OW 314
76780: AND
76781: IFFALSE 76785
// exit ;
76783: GO 76924
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
76785: LD_VAR 0 2
76789: PPUSH
76790: LD_VAR 0 3
76794: PPUSH
76795: CALL_OW 428
76799: PUSH
76800: LD_VAR 0 1
76804: EQUAL
76805: PUSH
76806: LD_VAR 0 1
76810: PPUSH
76811: CALL_OW 314
76815: NOT
76816: AND
76817: IFFALSE 76743
// PlaySoundXY ( x , y , PlantMine ) ;
76819: LD_VAR 0 2
76823: PPUSH
76824: LD_VAR 0 3
76828: PPUSH
76829: LD_STRING PlantMine
76831: PPUSH
76832: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
76836: LD_VAR 0 2
76840: PPUSH
76841: LD_VAR 0 3
76845: PPUSH
76846: LD_VAR 0 1
76850: PPUSH
76851: CALL_OW 255
76855: PPUSH
76856: LD_INT 0
76858: PPUSH
76859: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
76863: LD_ADDR_EXP 107
76867: PUSH
76868: LD_EXP 107
76872: PPUSH
76873: LD_VAR 0 5
76877: PUSH
76878: LD_EXP 107
76882: PUSH
76883: LD_VAR 0 5
76887: ARRAY
76888: PUSH
76889: LD_INT 1
76891: PLUS
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PPUSH
76897: LD_VAR 0 2
76901: PUSH
76902: LD_VAR 0 3
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: PPUSH
76911: CALL 20421 0 3
76915: ST_TO_ADDR
// result := true ;
76916: LD_ADDR_VAR 0 4
76920: PUSH
76921: LD_INT 1
76923: ST_TO_ADDR
// end ;
76924: LD_VAR 0 4
76928: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
76929: LD_INT 0
76931: PPUSH
76932: PPUSH
76933: PPUSH
// if not unit in minersList then
76934: LD_VAR 0 1
76938: PUSH
76939: LD_EXP 106
76943: IN
76944: NOT
76945: IFFALSE 76949
// exit ;
76947: GO 77341
// index := GetElementIndex ( minersList , unit ) ;
76949: LD_ADDR_VAR 0 6
76953: PUSH
76954: LD_EXP 106
76958: PPUSH
76959: LD_VAR 0 1
76963: PPUSH
76964: CALL 20206 0 2
76968: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
76969: LD_ADDR_VAR 0 5
76973: PUSH
76974: DOUBLE
76975: LD_EXP 107
76979: PUSH
76980: LD_VAR 0 6
76984: ARRAY
76985: INC
76986: ST_TO_ADDR
76987: LD_INT 1
76989: PUSH
76990: FOR_DOWNTO
76991: IFFALSE 77152
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
76993: LD_EXP 107
76997: PUSH
76998: LD_VAR 0 6
77002: ARRAY
77003: PUSH
77004: LD_VAR 0 5
77008: ARRAY
77009: PUSH
77010: LD_INT 1
77012: ARRAY
77013: PUSH
77014: LD_VAR 0 2
77018: EQUAL
77019: PUSH
77020: LD_EXP 107
77024: PUSH
77025: LD_VAR 0 6
77029: ARRAY
77030: PUSH
77031: LD_VAR 0 5
77035: ARRAY
77036: PUSH
77037: LD_INT 2
77039: ARRAY
77040: PUSH
77041: LD_VAR 0 3
77045: EQUAL
77046: AND
77047: IFFALSE 77150
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77049: LD_EXP 107
77053: PUSH
77054: LD_VAR 0 6
77058: ARRAY
77059: PUSH
77060: LD_VAR 0 5
77064: ARRAY
77065: PUSH
77066: LD_INT 1
77068: ARRAY
77069: PPUSH
77070: LD_EXP 107
77074: PUSH
77075: LD_VAR 0 6
77079: ARRAY
77080: PUSH
77081: LD_VAR 0 5
77085: ARRAY
77086: PUSH
77087: LD_INT 2
77089: ARRAY
77090: PPUSH
77091: LD_VAR 0 1
77095: PPUSH
77096: CALL_OW 255
77100: PPUSH
77101: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77105: LD_ADDR_EXP 107
77109: PUSH
77110: LD_EXP 107
77114: PPUSH
77115: LD_VAR 0 6
77119: PPUSH
77120: LD_EXP 107
77124: PUSH
77125: LD_VAR 0 6
77129: ARRAY
77130: PPUSH
77131: LD_VAR 0 5
77135: PPUSH
77136: CALL_OW 3
77140: PPUSH
77141: CALL_OW 1
77145: ST_TO_ADDR
// exit ;
77146: POP
77147: POP
77148: GO 77341
// end ; end ;
77150: GO 76990
77152: POP
77153: POP
// for i := minerMinesList [ index ] downto 1 do
77154: LD_ADDR_VAR 0 5
77158: PUSH
77159: DOUBLE
77160: LD_EXP 107
77164: PUSH
77165: LD_VAR 0 6
77169: ARRAY
77170: INC
77171: ST_TO_ADDR
77172: LD_INT 1
77174: PUSH
77175: FOR_DOWNTO
77176: IFFALSE 77339
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77178: LD_EXP 107
77182: PUSH
77183: LD_VAR 0 6
77187: ARRAY
77188: PUSH
77189: LD_VAR 0 5
77193: ARRAY
77194: PUSH
77195: LD_INT 1
77197: ARRAY
77198: PPUSH
77199: LD_EXP 107
77203: PUSH
77204: LD_VAR 0 6
77208: ARRAY
77209: PUSH
77210: LD_VAR 0 5
77214: ARRAY
77215: PUSH
77216: LD_INT 2
77218: ARRAY
77219: PPUSH
77220: LD_VAR 0 2
77224: PPUSH
77225: LD_VAR 0 3
77229: PPUSH
77230: CALL_OW 298
77234: PUSH
77235: LD_INT 6
77237: LESS
77238: IFFALSE 77337
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77240: LD_EXP 107
77244: PUSH
77245: LD_VAR 0 6
77249: ARRAY
77250: PUSH
77251: LD_VAR 0 5
77255: ARRAY
77256: PUSH
77257: LD_INT 1
77259: ARRAY
77260: PPUSH
77261: LD_EXP 107
77265: PUSH
77266: LD_VAR 0 6
77270: ARRAY
77271: PUSH
77272: LD_VAR 0 5
77276: ARRAY
77277: PUSH
77278: LD_INT 2
77280: ARRAY
77281: PPUSH
77282: LD_VAR 0 1
77286: PPUSH
77287: CALL_OW 255
77291: PPUSH
77292: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77296: LD_ADDR_EXP 107
77300: PUSH
77301: LD_EXP 107
77305: PPUSH
77306: LD_VAR 0 6
77310: PPUSH
77311: LD_EXP 107
77315: PUSH
77316: LD_VAR 0 6
77320: ARRAY
77321: PPUSH
77322: LD_VAR 0 5
77326: PPUSH
77327: CALL_OW 3
77331: PPUSH
77332: CALL_OW 1
77336: ST_TO_ADDR
// end ; end ;
77337: GO 77175
77339: POP
77340: POP
// end ;
77341: LD_VAR 0 4
77345: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77346: LD_INT 0
77348: PPUSH
77349: PPUSH
77350: PPUSH
77351: PPUSH
77352: PPUSH
77353: PPUSH
77354: PPUSH
77355: PPUSH
77356: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77357: LD_VAR 0 1
77361: PPUSH
77362: CALL_OW 264
77366: PUSH
77367: LD_INT 81
77369: EQUAL
77370: NOT
77371: PUSH
77372: LD_VAR 0 1
77376: PUSH
77377: LD_EXP 106
77381: IN
77382: NOT
77383: OR
77384: IFFALSE 77388
// exit ;
77386: GO 77710
// index := GetElementIndex ( minersList , unit ) ;
77388: LD_ADDR_VAR 0 6
77392: PUSH
77393: LD_EXP 106
77397: PPUSH
77398: LD_VAR 0 1
77402: PPUSH
77403: CALL 20206 0 2
77407: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77408: LD_ADDR_VAR 0 8
77412: PUSH
77413: LD_EXP 108
77417: PUSH
77418: LD_EXP 107
77422: PUSH
77423: LD_VAR 0 6
77427: ARRAY
77428: MINUS
77429: ST_TO_ADDR
// if not minesFreeAmount then
77430: LD_VAR 0 8
77434: NOT
77435: IFFALSE 77439
// exit ;
77437: GO 77710
// tmp := [ ] ;
77439: LD_ADDR_VAR 0 7
77443: PUSH
77444: EMPTY
77445: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77446: LD_ADDR_VAR 0 5
77450: PUSH
77451: DOUBLE
77452: LD_INT 1
77454: DEC
77455: ST_TO_ADDR
77456: LD_VAR 0 8
77460: PUSH
77461: FOR_TO
77462: IFFALSE 77657
// begin _d := rand ( 0 , 5 ) ;
77464: LD_ADDR_VAR 0 11
77468: PUSH
77469: LD_INT 0
77471: PPUSH
77472: LD_INT 5
77474: PPUSH
77475: CALL_OW 12
77479: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77480: LD_ADDR_VAR 0 12
77484: PUSH
77485: LD_INT 2
77487: PPUSH
77488: LD_INT 6
77490: PPUSH
77491: CALL_OW 12
77495: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
77496: LD_ADDR_VAR 0 9
77500: PUSH
77501: LD_VAR 0 2
77505: PPUSH
77506: LD_VAR 0 11
77510: PPUSH
77511: LD_VAR 0 12
77515: PPUSH
77516: CALL_OW 272
77520: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
77521: LD_ADDR_VAR 0 10
77525: PUSH
77526: LD_VAR 0 3
77530: PPUSH
77531: LD_VAR 0 11
77535: PPUSH
77536: LD_VAR 0 12
77540: PPUSH
77541: CALL_OW 273
77545: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
77546: LD_VAR 0 9
77550: PPUSH
77551: LD_VAR 0 10
77555: PPUSH
77556: CALL_OW 488
77560: PUSH
77561: LD_VAR 0 9
77565: PUSH
77566: LD_VAR 0 10
77570: PUSH
77571: EMPTY
77572: LIST
77573: LIST
77574: PUSH
77575: LD_VAR 0 7
77579: IN
77580: NOT
77581: AND
77582: PUSH
77583: LD_VAR 0 9
77587: PPUSH
77588: LD_VAR 0 10
77592: PPUSH
77593: CALL_OW 458
77597: NOT
77598: AND
77599: IFFALSE 77641
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
77601: LD_ADDR_VAR 0 7
77605: PUSH
77606: LD_VAR 0 7
77610: PPUSH
77611: LD_VAR 0 7
77615: PUSH
77616: LD_INT 1
77618: PLUS
77619: PPUSH
77620: LD_VAR 0 9
77624: PUSH
77625: LD_VAR 0 10
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: PPUSH
77634: CALL_OW 1
77638: ST_TO_ADDR
77639: GO 77655
// i := i - 1 ;
77641: LD_ADDR_VAR 0 5
77645: PUSH
77646: LD_VAR 0 5
77650: PUSH
77651: LD_INT 1
77653: MINUS
77654: ST_TO_ADDR
// end ;
77655: GO 77461
77657: POP
77658: POP
// for i in tmp do
77659: LD_ADDR_VAR 0 5
77663: PUSH
77664: LD_VAR 0 7
77668: PUSH
77669: FOR_IN
77670: IFFALSE 77708
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
77672: LD_VAR 0 1
77676: PPUSH
77677: LD_VAR 0 5
77681: PUSH
77682: LD_INT 1
77684: ARRAY
77685: PPUSH
77686: LD_VAR 0 5
77690: PUSH
77691: LD_INT 2
77693: ARRAY
77694: PPUSH
77695: CALL 76654 0 3
77699: NOT
77700: IFFALSE 77706
// exit ;
77702: POP
77703: POP
77704: GO 77710
77706: GO 77669
77708: POP
77709: POP
// end ;
77710: LD_VAR 0 4
77714: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
77715: LD_INT 0
77717: PPUSH
77718: PPUSH
77719: PPUSH
77720: PPUSH
77721: PPUSH
77722: PPUSH
77723: PPUSH
// if not GetClass ( unit ) = class_sniper then
77724: LD_VAR 0 1
77728: PPUSH
77729: CALL_OW 257
77733: PUSH
77734: LD_INT 5
77736: EQUAL
77737: NOT
77738: IFFALSE 77742
// exit ;
77740: GO 78130
// dist := 8 ;
77742: LD_ADDR_VAR 0 5
77746: PUSH
77747: LD_INT 8
77749: ST_TO_ADDR
// viewRange := 12 ;
77750: LD_ADDR_VAR 0 7
77754: PUSH
77755: LD_INT 12
77757: ST_TO_ADDR
// side := GetSide ( unit ) ;
77758: LD_ADDR_VAR 0 6
77762: PUSH
77763: LD_VAR 0 1
77767: PPUSH
77768: CALL_OW 255
77772: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
77773: LD_INT 61
77775: PPUSH
77776: LD_VAR 0 6
77780: PPUSH
77781: CALL_OW 321
77785: PUSH
77786: LD_INT 2
77788: EQUAL
77789: IFFALSE 77799
// viewRange := 16 ;
77791: LD_ADDR_VAR 0 7
77795: PUSH
77796: LD_INT 16
77798: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
77799: LD_VAR 0 1
77803: PPUSH
77804: LD_VAR 0 2
77808: PPUSH
77809: LD_VAR 0 3
77813: PPUSH
77814: CALL_OW 297
77818: PUSH
77819: LD_VAR 0 5
77823: GREATER
77824: IFFALSE 77903
// begin ComMoveXY ( unit , x , y ) ;
77826: LD_VAR 0 1
77830: PPUSH
77831: LD_VAR 0 2
77835: PPUSH
77836: LD_VAR 0 3
77840: PPUSH
77841: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77845: LD_INT 35
77847: PPUSH
77848: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
77852: LD_VAR 0 1
77856: PPUSH
77857: LD_VAR 0 2
77861: PPUSH
77862: LD_VAR 0 3
77866: PPUSH
77867: CALL 51958 0 3
77871: NOT
77872: IFFALSE 77876
// exit ;
77874: GO 78130
// until GetDistUnitXY ( unit , x , y ) < dist ;
77876: LD_VAR 0 1
77880: PPUSH
77881: LD_VAR 0 2
77885: PPUSH
77886: LD_VAR 0 3
77890: PPUSH
77891: CALL_OW 297
77895: PUSH
77896: LD_VAR 0 5
77900: LESS
77901: IFFALSE 77845
// end ; ComTurnXY ( unit , x , y ) ;
77903: LD_VAR 0 1
77907: PPUSH
77908: LD_VAR 0 2
77912: PPUSH
77913: LD_VAR 0 3
77917: PPUSH
77918: CALL_OW 118
// wait ( 5 ) ;
77922: LD_INT 5
77924: PPUSH
77925: CALL_OW 67
// _d := GetDir ( unit ) ;
77929: LD_ADDR_VAR 0 10
77933: PUSH
77934: LD_VAR 0 1
77938: PPUSH
77939: CALL_OW 254
77943: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
77944: LD_ADDR_VAR 0 8
77948: PUSH
77949: LD_VAR 0 1
77953: PPUSH
77954: CALL_OW 250
77958: PPUSH
77959: LD_VAR 0 10
77963: PPUSH
77964: LD_VAR 0 5
77968: PPUSH
77969: CALL_OW 272
77973: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
77974: LD_ADDR_VAR 0 9
77978: PUSH
77979: LD_VAR 0 1
77983: PPUSH
77984: CALL_OW 251
77988: PPUSH
77989: LD_VAR 0 10
77993: PPUSH
77994: LD_VAR 0 5
77998: PPUSH
77999: CALL_OW 273
78003: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78004: LD_VAR 0 8
78008: PPUSH
78009: LD_VAR 0 9
78013: PPUSH
78014: CALL_OW 488
78018: NOT
78019: IFFALSE 78023
// exit ;
78021: GO 78130
// ComAnimCustom ( unit , 1 ) ;
78023: LD_VAR 0 1
78027: PPUSH
78028: LD_INT 1
78030: PPUSH
78031: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78035: LD_VAR 0 8
78039: PPUSH
78040: LD_VAR 0 9
78044: PPUSH
78045: LD_VAR 0 6
78049: PPUSH
78050: LD_VAR 0 7
78054: PPUSH
78055: CALL_OW 330
// repeat wait ( 1 ) ;
78059: LD_INT 1
78061: PPUSH
78062: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78066: LD_VAR 0 1
78070: PPUSH
78071: CALL_OW 316
78075: PUSH
78076: LD_VAR 0 1
78080: PPUSH
78081: CALL_OW 314
78085: OR
78086: PUSH
78087: LD_VAR 0 1
78091: PPUSH
78092: CALL_OW 302
78096: NOT
78097: OR
78098: PUSH
78099: LD_VAR 0 1
78103: PPUSH
78104: CALL_OW 301
78108: OR
78109: IFFALSE 78059
// RemoveSeeing ( _x , _y , side ) ;
78111: LD_VAR 0 8
78115: PPUSH
78116: LD_VAR 0 9
78120: PPUSH
78121: LD_VAR 0 6
78125: PPUSH
78126: CALL_OW 331
// end ;
78130: LD_VAR 0 4
78134: RET
