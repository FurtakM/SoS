// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 6121 0 0
// LoadEnv ;
  16: CALL 5719 0 0
// LoadCam ;
  20: CALL 6335 0 0
// LoadTech ;
  24: CALL 6411 0 0
// LoadBase ;
  28: CALL 6897 0 0
// PrepareArabian ;
  32: CALL 186 0 0
// PrepareRussian ;
  36: CALL 3050 0 0
// Action ;
  40: CALL 7758 0 0
// end ;
  44: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; export wave , strength ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 09c_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 09c_
  63: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 09_tick
  71: PPUSH
  72: LD_INT 31500
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 09c_tick
  87: PPUSH
  88: LD_INT 10500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// playerInBase := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// kamikazeTrained := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// apeDriver := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 120
 127: PUSH
 128: LD_INT 150
 130: PUSH
 131: LD_INT 180
 133: PUSH
 134: LD_INT 220
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// missionTime := 0 0$00 ;
 149: LD_ADDR_EXP 9
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// ruDefeated := false ;
 157: LD_ADDR_EXP 10
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// wave := 0 ;
 165: LD_ADDR_EXP 11
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// strength := 0 ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ; end_of_file
 181: LD_VAR 0 1
 185: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 197: LD_STRING 05_DrugsTested
 199: PPUSH
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 30
 209: IFFALSE 224
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 211: LD_INT 5
 213: PPUSH
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 2
 219: PPUSH
 220: CALL_OW 322
// uc_side := 2 ;
 224: LD_ADDR_OWVAR 20
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// uc_nation := nation_nature ;
 232: LD_ADDR_OWVAR 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 240: LD_ADDR_VAR 0 3
 244: PUSH
 245: LD_STRING 09_apes
 247: PPUSH
 248: CALL_OW 31
 252: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 253: LD_ADDR_VAR 0 6
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 30
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: ST_TO_ADDR
// if apes then
 305: LD_VAR 0 3
 309: IFFALSE 388
// for i in apes do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: LD_VAR 0 3
 320: PUSH
 321: FOR_IN
 322: IFFALSE 386
// if UnitsInside ( b [ 1 ] ) < 6 then
 324: LD_VAR 0 6
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: CALL_OW 313
 337: PUSH
 338: LD_INT 6
 340: LESS
 341: IFFALSE 363
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_VAR 0 6
 352: PUSH
 353: LD_INT 1
 355: ARRAY
 356: PPUSH
 357: CALL_OW 52
 361: GO 384
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 363: LD_VAR 0 2
 367: PPUSH
 368: LD_INT 82
 370: PPUSH
 371: LD_INT 27
 373: PPUSH
 374: LD_INT 6
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 50
 384: GO 321
 386: POP
 387: POP
// InitHC_All ( ) ;
 388: CALL_OW 584
// uc_nation := nation_arabian ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 2
 399: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 400: LD_ADDR_VAR 0 6
 404: PUSH
 405: LD_INT 22
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 5
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 474: LD_ADDR_EXP 33
 478: PUSH
 479: LD_STRING Rolf
 481: PPUSH
 482: LD_EXP 1
 486: NOT
 487: PPUSH
 488: LD_STRING 06_
 490: PPUSH
 491: CALL 10709 0 3
 495: ST_TO_ADDR
// if Rolf then
 496: LD_EXP 33
 500: IFFALSE 709
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 502: LD_ADDR_EXP 32
 506: PUSH
 507: LD_STRING 06_RolfSquad
 509: PPUSH
 510: CALL_OW 31
 514: ST_TO_ADDR
// if rolfSquad < 3 then
 515: LD_EXP 32
 519: PUSH
 520: LD_INT 3
 522: LESS
 523: IFFALSE 586
// for i := 1 to 3 - Count ( rolfSquad ) do
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: DOUBLE
 531: LD_INT 1
 533: DEC
 534: ST_TO_ADDR
 535: LD_INT 3
 537: PUSH
 538: LD_EXP 32
 542: PPUSH
 543: CALL 12811 0 1
 547: MINUS
 548: PUSH
 549: FOR_TO
 550: IFFALSE 584
// begin PrepareSoldier ( false , 4 ) ;
 552: LD_INT 0
 554: PPUSH
 555: LD_INT 4
 557: PPUSH
 558: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 562: LD_ADDR_EXP 32
 566: PUSH
 567: LD_EXP 32
 571: PPUSH
 572: CALL_OW 44
 576: PPUSH
 577: CALL 48001 0 2
 581: ST_TO_ADDR
// end ;
 582: GO 549
 584: POP
 585: POP
// if b then
 586: LD_VAR 0 6
 590: IFFALSE 665
// begin for i in rolfSquad union Rolf do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_EXP 32
 601: PUSH
 602: LD_EXP 33
 606: UNION
 607: PUSH
 608: FOR_IN
 609: IFFALSE 661
// begin SetClass ( i , 1 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_VAR 0 6
 632: PPUSH
 633: LD_INT 3
 635: PUSH
 636: LD_INT 62
 638: PUSH
 639: EMPTY
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 52
// end ;
 659: GO 608
 661: POP
 662: POP
// end else
 663: GO 709
// for i in rolfSquad union Rolf do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_EXP 32
 674: PUSH
 675: LD_EXP 33
 679: UNION
 680: PUSH
 681: FOR_IN
 682: IFFALSE 707
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 684: LD_VAR 0 2
 688: PPUSH
 689: LD_INT 82
 691: PPUSH
 692: LD_INT 27
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 50
 705: GO 681
 707: POP
 708: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 13
 713: PUSH
 714: LD_STRING Heike
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 10709 0 3
 732: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 16
 737: PUSH
 738: LD_STRING Ibrahim
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 10709 0 3
 756: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 14
 761: PUSH
 762: LD_STRING Givi
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 10709 0 3
 780: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 17
 785: PUSH
 786: LD_STRING Kamil
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 10709 0 3
 804: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 18
 809: PUSH
 810: LD_STRING Kaia
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 10709 0 3
 828: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 19
 833: PUSH
 834: LD_STRING Sophia
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 10709 0 3
 852: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 20
 857: PUSH
 858: LD_STRING Markov
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 10709 0 3
 876: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 23
 881: PUSH
 882: LD_STRING Aviradze
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 10709 0 3
 900: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 22
 905: PUSH
 906: LD_STRING Kurt
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 10709 0 3
 924: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_STRING Mike
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 10709 0 3
 948: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 21
 953: PUSH
 954: LD_STRING Olaf
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 10709 0 3
 972: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 973: LD_ADDR_EXP 30
 977: PUSH
 978: LD_STRING 09c_heikeSecondSquad
 980: PPUSH
 981: CALL_OW 31
 985: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 986: LD_ADDR_EXP 24
 990: PUSH
 991: LD_STRING Schulz
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_EXP 2
1004: PPUSH
1005: CALL 10709 0 3
1009: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
1010: LD_ADDR_EXP 25
1014: PUSH
1015: LD_STRING Basim
1017: PPUSH
1018: LD_EXP 1
1022: NOT
1023: PPUSH
1024: LD_EXP 2
1028: PPUSH
1029: CALL 10709 0 3
1033: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1034: LD_ADDR_EXP 26
1038: PUSH
1039: LD_STRING Lemmy
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 2
1052: PPUSH
1053: CALL 10709 0 3
1057: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1058: LD_ADDR_EXP 27
1062: PUSH
1063: LD_STRING Mia
1065: PPUSH
1066: LD_EXP 1
1070: NOT
1071: PPUSH
1072: LD_EXP 2
1076: PPUSH
1077: CALL 10709 0 3
1081: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1082: LD_ADDR_EXP 28
1086: PUSH
1087: LD_STRING Nia
1089: PPUSH
1090: LD_EXP 1
1094: NOT
1095: PPUSH
1096: LD_EXP 2
1100: PPUSH
1101: CALL 10709 0 3
1105: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1106: LD_ADDR_EXP 29
1110: PUSH
1111: LD_STRING Jenna
1113: PPUSH
1114: LD_EXP 1
1118: NOT
1119: PPUSH
1120: LD_EXP 2
1124: PPUSH
1125: CALL 10709 0 3
1129: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING 09c_schulzSecondSquad
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// if debug then
1143: LD_EXP 1
1147: IFFALSE 1227
// begin schulzSecondSquad := [ ] ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: EMPTY
1155: ST_TO_ADDR
// for i := 1 to 3 do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_INT 3
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1225
// begin uc_side := 2 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
// uc_nation := nation_arabian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 2
1187: ST_TO_ADDR
// PrepareHuman ( false , i , 0 ) ;
1188: LD_INT 0
1190: PPUSH
1191: LD_VAR 0 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PPUSH
1213: CALL_OW 44
1217: PPUSH
1218: CALL 48001 0 2
1222: ST_TO_ADDR
// end ;
1223: GO 1169
1225: POP
1226: POP
// end ; vehicles := LoadVariable ( 09c_vehicles , [ [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 36 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 41 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 37 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 35 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 34 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 38 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 40 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 39 ] ] ) ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_STRING 09c_vehicles
1234: PPUSH
1235: LD_INT 13
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 28
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 36
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 13
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 28
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 0
1289: PUSH
1290: LD_INT 41
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 13
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: LD_INT 28
1314: PUSH
1315: LD_INT 2
1317: PUSH
1318: LD_INT 0
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 37
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 13
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 28
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 35
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 13
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 28
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: LD_INT 34
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 13
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 28
1416: PUSH
1417: LD_INT 2
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 38
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 13
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 28
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 40
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 13
1475: PUSH
1476: LD_INT 3
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 28
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 39
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 30
1521: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Heike , LoadVariable ( 09c_Heike_ID , - 1 ) , vehicles ) ;
1522: LD_ADDR_VAR 0 9
1526: PUSH
1527: LD_VAR 0 9
1531: PUSH
1532: LD_EXP 13
1536: PPUSH
1537: LD_STRING 09c_Heike_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2764 0 3
1558: DIFF
1559: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Givi , LoadVariable ( 09c_Givi_ID , - 1 ) , vehicles ) ;
1560: LD_ADDR_VAR 0 9
1564: PUSH
1565: LD_VAR 0 9
1569: PUSH
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING 09c_Givi_ID
1577: PPUSH
1578: LD_INT 1
1580: NEG
1581: PPUSH
1582: CALL_OW 30
1586: PPUSH
1587: LD_VAR 0 9
1591: PPUSH
1592: CALL 2764 0 3
1596: DIFF
1597: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mike , LoadVariable ( 09c_Mike_ID , - 1 ) , vehicles ) ;
1598: LD_ADDR_VAR 0 9
1602: PUSH
1603: LD_VAR 0 9
1607: PUSH
1608: LD_EXP 15
1612: PPUSH
1613: LD_STRING 09c_Mike_ID
1615: PPUSH
1616: LD_INT 1
1618: NEG
1619: PPUSH
1620: CALL_OW 30
1624: PPUSH
1625: LD_VAR 0 9
1629: PPUSH
1630: CALL 2764 0 3
1634: DIFF
1635: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Ibrahim , LoadVariable ( 09c_Ibrahim_ID , - 1 ) , vehicles ) ;
1636: LD_ADDR_VAR 0 9
1640: PUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_EXP 16
1650: PPUSH
1651: LD_STRING 09c_Ibrahim_ID
1653: PPUSH
1654: LD_INT 1
1656: NEG
1657: PPUSH
1658: CALL_OW 30
1662: PPUSH
1663: LD_VAR 0 9
1667: PPUSH
1668: CALL 2764 0 3
1672: DIFF
1673: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kamil , LoadVariable ( 09c_Kamil_ID , - 1 ) , vehicles ) ;
1674: LD_ADDR_VAR 0 9
1678: PUSH
1679: LD_VAR 0 9
1683: PUSH
1684: LD_EXP 17
1688: PPUSH
1689: LD_STRING 09c_Kamil_ID
1691: PPUSH
1692: LD_INT 1
1694: NEG
1695: PPUSH
1696: CALL_OW 30
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL 2764 0 3
1710: DIFF
1711: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kaia , LoadVariable ( 09c_Kaia_ID , - 1 ) , vehicles ) ;
1712: LD_ADDR_VAR 0 9
1716: PUSH
1717: LD_VAR 0 9
1721: PUSH
1722: LD_EXP 18
1726: PPUSH
1727: LD_STRING 09c_Kaia_ID
1729: PPUSH
1730: LD_INT 1
1732: NEG
1733: PPUSH
1734: CALL_OW 30
1738: PPUSH
1739: LD_VAR 0 9
1743: PPUSH
1744: CALL 2764 0 3
1748: DIFF
1749: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Sophia , LoadVariable ( 09c_Sophia_ID , - 1 ) , vehicles ) ;
1750: LD_ADDR_VAR 0 9
1754: PUSH
1755: LD_VAR 0 9
1759: PUSH
1760: LD_EXP 19
1764: PPUSH
1765: LD_STRING 09c_Sophia_ID
1767: PPUSH
1768: LD_INT 1
1770: NEG
1771: PPUSH
1772: CALL_OW 30
1776: PPUSH
1777: LD_VAR 0 9
1781: PPUSH
1782: CALL 2764 0 3
1786: DIFF
1787: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Markov , LoadVariable ( 09c_Markov_ID , - 1 ) , vehicles ) ;
1788: LD_ADDR_VAR 0 9
1792: PUSH
1793: LD_VAR 0 9
1797: PUSH
1798: LD_EXP 20
1802: PPUSH
1803: LD_STRING 09c_Markov_ID
1805: PPUSH
1806: LD_INT 1
1808: NEG
1809: PPUSH
1810: CALL_OW 30
1814: PPUSH
1815: LD_VAR 0 9
1819: PPUSH
1820: CALL 2764 0 3
1824: DIFF
1825: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Olaf , LoadVariable ( 09c_Olaf_ID , - 1 ) , vehicles ) ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_VAR 0 9
1835: PUSH
1836: LD_EXP 21
1840: PPUSH
1841: LD_STRING 09c_Olaf_ID
1843: PPUSH
1844: LD_INT 1
1846: NEG
1847: PPUSH
1848: CALL_OW 30
1852: PPUSH
1853: LD_VAR 0 9
1857: PPUSH
1858: CALL 2764 0 3
1862: DIFF
1863: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kurt , LoadVariable ( 09c_Kurt_ID , - 1 ) , vehicles ) ;
1864: LD_ADDR_VAR 0 9
1868: PUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_STRING 09c_Kurt_ID
1881: PPUSH
1882: LD_INT 1
1884: NEG
1885: PPUSH
1886: CALL_OW 30
1890: PPUSH
1891: LD_VAR 0 9
1895: PPUSH
1896: CALL 2764 0 3
1900: DIFF
1901: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Aviradze , LoadVariable ( 09c_Aviradze_ID , - 1 ) , vehicles ) ;
1902: LD_ADDR_VAR 0 9
1906: PUSH
1907: LD_VAR 0 9
1911: PUSH
1912: LD_EXP 23
1916: PPUSH
1917: LD_STRING 09c_Aviradze_ID
1919: PPUSH
1920: LD_INT 1
1922: NEG
1923: PPUSH
1924: CALL_OW 30
1928: PPUSH
1929: LD_VAR 0 9
1933: PPUSH
1934: CALL 2764 0 3
1938: DIFF
1939: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Schulz , LoadVariable ( 09c_Schulz_ID , 34 ) , vehicles ) ;
1940: LD_ADDR_VAR 0 9
1944: PUSH
1945: LD_VAR 0 9
1949: PUSH
1950: LD_EXP 24
1954: PPUSH
1955: LD_STRING 09c_Schulz_ID
1957: PPUSH
1958: LD_INT 34
1960: PPUSH
1961: CALL_OW 30
1965: PPUSH
1966: LD_VAR 0 9
1970: PPUSH
1971: CALL 2764 0 3
1975: DIFF
1976: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Lemmy , LoadVariable ( 09c_Lemmy_ID , 35 ) , vehicles ) ;
1977: LD_ADDR_VAR 0 9
1981: PUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_EXP 26
1991: PPUSH
1992: LD_STRING 09c_Lemmy_ID
1994: PPUSH
1995: LD_INT 35
1997: PPUSH
1998: CALL_OW 30
2002: PPUSH
2003: LD_VAR 0 9
2007: PPUSH
2008: CALL 2764 0 3
2012: DIFF
2013: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mia , LoadVariable ( 09c_Mia_ID , 36 ) , vehicles ) ;
2014: LD_ADDR_VAR 0 9
2018: PUSH
2019: LD_VAR 0 9
2023: PUSH
2024: LD_EXP 27
2028: PPUSH
2029: LD_STRING 09c_Mia_ID
2031: PPUSH
2032: LD_INT 36
2034: PPUSH
2035: CALL_OW 30
2039: PPUSH
2040: LD_VAR 0 9
2044: PPUSH
2045: CALL 2764 0 3
2049: DIFF
2050: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Nia , LoadVariable ( 09c_Nia_ID , 37 ) , vehicles ) ;
2051: LD_ADDR_VAR 0 9
2055: PUSH
2056: LD_VAR 0 9
2060: PUSH
2061: LD_EXP 28
2065: PPUSH
2066: LD_STRING 09c_Nia_ID
2068: PPUSH
2069: LD_INT 37
2071: PPUSH
2072: CALL_OW 30
2076: PPUSH
2077: LD_VAR 0 9
2081: PPUSH
2082: CALL 2764 0 3
2086: DIFF
2087: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Jenna , LoadVariable ( 09c_Jenna_ID , 38 ) , vehicles ) ;
2088: LD_ADDR_VAR 0 9
2092: PUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_EXP 29
2102: PPUSH
2103: LD_STRING 09c_Jenna_ID
2105: PPUSH
2106: LD_INT 38
2108: PPUSH
2109: CALL_OW 30
2113: PPUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: CALL 2764 0 3
2123: DIFF
2124: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Basim , LoadVariable ( 09c_Basim_ID , - 1 ) , vehicles ) ;
2125: LD_ADDR_VAR 0 9
2129: PUSH
2130: LD_VAR 0 9
2134: PUSH
2135: LD_EXP 25
2139: PPUSH
2140: LD_STRING 09c_Basim_ID
2142: PPUSH
2143: LD_INT 1
2145: NEG
2146: PPUSH
2147: CALL_OW 30
2151: PPUSH
2152: LD_VAR 0 9
2156: PPUSH
2157: CALL 2764 0 3
2161: DIFF
2162: ST_TO_ADDR
// for i := 1 to schulzSecondSquad do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_EXP 31
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2238
// vehicles := vehicles diff SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 38 + i ) , vehicles ) ;
2181: LD_ADDR_VAR 0 9
2185: PUSH
2186: LD_VAR 0 9
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_VAR 0 2
2200: ARRAY
2201: PPUSH
2202: LD_STRING 09c_random_ID_
2204: PUSH
2205: LD_VAR 0 2
2209: STR
2210: PPUSH
2211: LD_INT 38
2213: PUSH
2214: LD_VAR 0 2
2218: PLUS
2219: PPUSH
2220: CALL_OW 30
2224: PPUSH
2225: LD_VAR 0 9
2229: PPUSH
2230: CALL 2764 0 3
2234: DIFF
2235: ST_TO_ADDR
2236: GO 2178
2238: POP
2239: POP
// for i := 1 to heikeSecondSquad do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 30
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2310
// vehicles := vehicles diff SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_hrandom_ID_ & i , - 1 ) , vehicles ) ;
2258: LD_ADDR_VAR 0 9
2262: PUSH
2263: LD_VAR 0 9
2267: PUSH
2268: LD_EXP 30
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_STRING 09c_hrandom_ID_
2281: PUSH
2282: LD_VAR 0 2
2286: STR
2287: PPUSH
2288: LD_INT 1
2290: NEG
2291: PPUSH
2292: CALL_OW 30
2296: PPUSH
2297: LD_VAR 0 9
2301: PPUSH
2302: CALL 2764 0 3
2306: DIFF
2307: ST_TO_ADDR
2308: GO 2255
2310: POP
2311: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2312: LD_INT 22
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 34
2324: PUSH
2325: LD_INT 31
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: IFFALSE 2543
// begin for j := Count ( vehicles ) downto 1 do
2342: LD_ADDR_VAR 0 7
2346: PUSH
2347: DOUBLE
2348: LD_VAR 0 9
2352: PPUSH
2353: CALL 12811 0 1
2357: INC
2358: ST_TO_ADDR
2359: LD_INT 1
2361: PUSH
2362: FOR_DOWNTO
2363: IFFALSE 2541
// begin i := vehicles [ j ] ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 9
2374: PUSH
2375: LD_VAR 0 7
2379: ARRAY
2380: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2381: LD_VAR 0 2
2385: PUSH
2386: LD_INT 3
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: IFFALSE 2539
// begin uc_side := 2 ;
2395: LD_ADDR_OWVAR 20
2399: PUSH
2400: LD_INT 2
2402: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2403: LD_ADDR_OWVAR 21
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 5
2415: ARRAY
2416: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 2
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 6
2460: ARRAY
2461: PPUSH
2462: CALL 15549 0 5
// veh := CreateVehicle ;
2466: LD_ADDR_VAR 0 8
2470: PUSH
2471: CALL_OW 45
2475: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2488: LD_VAR 0 8
2492: PPUSH
2493: LD_INT 7
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2503: LD_ADDR_VAR 0 9
2507: PUSH
2508: LD_VAR 0 9
2512: PPUSH
2513: LD_VAR 0 7
2517: PPUSH
2518: CALL_OW 3
2522: ST_TO_ADDR
// Connect ( veh ) ;
2523: LD_VAR 0 8
2527: PPUSH
2528: CALL 18640 0 1
// wait ( 0 0$0.3 ) ;
2532: LD_INT 10
2534: PPUSH
2535: CALL_OW 67
// end ; end ;
2539: GO 2362
2541: POP
2542: POP
// end ; vehicles := LoadVariable ( 09_otherVehicles , [ ] ) ;
2543: LD_ADDR_VAR 0 9
2547: PUSH
2548: LD_STRING 09_otherVehicles
2550: PPUSH
2551: EMPTY
2552: PPUSH
2553: CALL_OW 30
2557: ST_TO_ADDR
// if vehicles then
2558: LD_VAR 0 9
2562: IFFALSE 2759
// begin for i in vehicles do
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_VAR 0 9
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2757
// begin uc_side := 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 5
2597: ARRAY
2598: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 2
2612: PUSH
2613: LD_INT 2
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 2
2621: PUSH
2622: LD_INT 3
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 4
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 6
2642: ARRAY
2643: PPUSH
2644: CALL 15549 0 5
// veh := CreateVehicle ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2658: LD_VAR 0 8
2662: PPUSH
2663: LD_INT 5
2665: PPUSH
2666: CALL_OW 233
// if i [ 7 ] then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 7
2677: ARRAY
2678: IFFALSE 2698
// SetMark ( veh , i [ 7 ] ) ;
2680: LD_VAR 0 8
2684: PPUSH
2685: LD_VAR 0 2
2689: PUSH
2690: LD_INT 7
2692: ARRAY
2693: PPUSH
2694: CALL_OW 242
// PlaceUnitXYD ( veh , i [ 8 ] , i [ 9 ] , i [ 10 ] , false ) ;
2698: LD_VAR 0 8
2702: PPUSH
2703: LD_VAR 0 2
2707: PUSH
2708: LD_INT 8
2710: ARRAY
2711: PPUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 9
2719: ARRAY
2720: PPUSH
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 10
2728: ARRAY
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: CALL 50141 0 5
// SetFuel ( veh , i [ 6 ] ) ;
2737: LD_VAR 0 8
2741: PPUSH
2742: LD_VAR 0 2
2746: PUSH
2747: LD_INT 6
2749: ARRAY
2750: PPUSH
2751: CALL_OW 240
// end ;
2755: GO 2574
2757: POP
2758: POP
// end ; end ;
2759: LD_VAR 0 1
2763: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
// for i in vehicles do
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3016
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 8
2789: ARRAY
2790: PUSH
2791: LD_VAR 0 2
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 5
2801: PUSH
2802: LD_INT 3
2804: ARRAY
2805: PUSH
2806: LD_INT 1
2808: EQUAL
2809: AND
2810: IFFALSE 3014
// begin result := i ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_VAR 0 5
2821: ST_TO_ADDR
// uc_side := 2 ;
2822: LD_ADDR_OWVAR 20
2826: PUSH
2827: LD_INT 2
2829: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2830: LD_ADDR_OWVAR 21
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 5
2842: ARRAY
2843: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 1
2851: ARRAY
2852: PPUSH
2853: LD_VAR 0 5
2857: PUSH
2858: LD_INT 2
2860: ARRAY
2861: PPUSH
2862: LD_VAR 0 5
2866: PUSH
2867: LD_INT 3
2869: ARRAY
2870: PPUSH
2871: LD_VAR 0 5
2875: PUSH
2876: LD_INT 4
2878: ARRAY
2879: PPUSH
2880: LD_VAR 0 5
2884: PUSH
2885: LD_INT 6
2887: ARRAY
2888: PPUSH
2889: CALL 15549 0 5
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2903: LD_VAR 0 6
2907: PPUSH
2908: LD_INT 5
2910: PPUSH
2911: CALL_OW 233
// if i [ 7 ] < 0 then
2915: LD_VAR 0 5
2919: PUSH
2920: LD_INT 7
2922: ARRAY
2923: PUSH
2924: LD_INT 0
2926: LESS
2927: IFFALSE 2947
// SetMark ( veh , i [ 7 ] ) ;
2929: LD_VAR 0 6
2933: PPUSH
2934: LD_VAR 0 5
2938: PUSH
2939: LD_INT 7
2941: ARRAY
2942: PPUSH
2943: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2947: LD_VAR 0 6
2951: PPUSH
2952: LD_INT 7
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL 46919 0 3
2962: NOT
2963: IFFALSE 2996
// begin SetDir ( unit , 5 ) ;
2965: LD_VAR 0 1
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2977: LD_VAR 0 1
2981: PPUSH
2982: LD_INT 8
2984: PPUSH
2985: LD_INT 0
2987: PPUSH
2988: CALL_OW 49
// exit ;
2992: POP
2993: POP
2994: GO 3045
// end ; PlaceHumanInUnit ( unit , veh ) ;
2996: LD_VAR 0 1
3000: PPUSH
3001: LD_VAR 0 6
3005: PPUSH
3006: CALL_OW 52
// exit ;
3010: POP
3011: POP
3012: GO 3045
// end ;
3014: GO 2779
3016: POP
3017: POP
// SetDir ( unit , 5 ) ;
3018: LD_VAR 0 1
3022: PPUSH
3023: LD_INT 5
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
3030: LD_VAR 0 1
3034: PPUSH
3035: LD_INT 8
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 49
// end ; end_of_file
3045: LD_VAR 0 4
3049: RET
// export function PrepareRussian ; begin
3050: LD_INT 0
3052: PPUSH
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
3053: LD_INT 48
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: LD_INT 2
3061: PPUSH
3062: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
3066: LD_INT 49
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 2
3074: PPUSH
3075: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
3079: LD_INT 50
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
3092: LD_INT 51
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3105: LD_INT 57
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 2
3113: PPUSH
3114: CALL_OW 322
// if Difficulty >= 2 then
3118: LD_OWVAR 67
3122: PUSH
3123: LD_INT 2
3125: GREATEREQUAL
3126: IFFALSE 3167
// begin SetTech ( tech_Weap2 , 3 , state_researched ) ;
3128: LD_INT 52
3130: PPUSH
3131: LD_INT 3
3133: PPUSH
3134: LD_INT 2
3136: PPUSH
3137: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3141: LD_INT 58
3143: PPUSH
3144: LD_INT 3
3146: PPUSH
3147: LD_INT 2
3149: PPUSH
3150: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3154: LD_INT 63
3156: PPUSH
3157: LD_INT 3
3159: PPUSH
3160: LD_INT 2
3162: PPUSH
3163: CALL_OW 322
// end ; if Difficulty > 2 then
3167: LD_OWVAR 67
3171: PUSH
3172: LD_INT 2
3174: GREATER
3175: IFFALSE 3216
// begin SetTech ( tech_Weap3 , 3 , state_researched ) ;
3177: LD_INT 53
3179: PPUSH
3180: LD_INT 3
3182: PPUSH
3183: LD_INT 2
3185: PPUSH
3186: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3190: LD_INT 59
3192: PPUSH
3193: LD_INT 3
3195: PPUSH
3196: LD_INT 2
3198: PPUSH
3199: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3203: LD_INT 64
3205: PPUSH
3206: LD_INT 3
3208: PPUSH
3209: LD_INT 2
3211: PPUSH
3212: CALL_OW 322
// end ; end ;
3216: LD_VAR 0 1
3220: RET
// function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
3221: LD_INT 0
3223: PPUSH
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
3228: PPUSH
3229: PPUSH
3230: PPUSH
3231: PPUSH
3232: PPUSH
// result := [ ] ;
3233: LD_ADDR_VAR 0 3
3237: PUSH
3238: EMPTY
3239: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
3240: LD_ADDR_VAR 0 8
3244: PUSH
3245: LD_INT 7
3247: PUSH
3248: LD_INT 8
3250: PUSH
3251: LD_INT 9
3253: PUSH
3254: LD_INT 10
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_OWVAR 67
3267: ARRAY
3268: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
3269: LD_ADDR_VAR 0 9
3273: PUSH
3274: LD_INT 15
3276: PUSH
3277: LD_INT 17
3279: PUSH
3280: LD_INT 19
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: LIST
3287: PUSH
3288: LD_VAR 0 1
3292: ARRAY
3293: ST_TO_ADDR
// parking := [ ruGatPoint1Area , ruGatPoint2Area , ruGatPoint3Area ] [ spot ] ;
3294: LD_ADDR_VAR 0 10
3298: PUSH
3299: LD_INT 16
3301: PUSH
3302: LD_INT 18
3304: PUSH
3305: LD_INT 20
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: LIST
3312: PUSH
3313: LD_VAR 0 1
3317: ARRAY
3318: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
3319: LD_ADDR_VAR 0 11
3323: PUSH
3324: LD_INT 5
3326: PUSH
3327: LD_INT 0
3329: PUSH
3330: LD_INT 2
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: LIST
3337: PUSH
3338: LD_VAR 0 1
3342: ARRAY
3343: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) then
3344: LD_VAR 0 9
3348: PPUSH
3349: LD_INT 2
3351: PUSH
3352: LD_INT 22
3354: PUSH
3355: LD_INT 0
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 22
3364: PUSH
3365: LD_INT 3
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: PPUSH
3377: CALL_OW 70
3381: IFFALSE 3442
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) do
3383: LD_ADDR_VAR 0 4
3387: PUSH
3388: LD_VAR 0 9
3392: PPUSH
3393: LD_INT 2
3395: PUSH
3396: LD_INT 22
3398: PUSH
3399: LD_INT 0
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 22
3408: PUSH
3409: LD_INT 3
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: PPUSH
3421: CALL_OW 70
3425: PUSH
3426: FOR_IN
3427: IFFALSE 3440
// RemoveUnit ( i ) ;
3429: LD_VAR 0 4
3433: PPUSH
3434: CALL_OW 64
3438: GO 3426
3440: POP
3441: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
3442: LD_VAR 0 9
3446: PPUSH
3447: LD_INT 3
3449: PUSH
3450: LD_INT 21
3452: PUSH
3453: LD_INT 1
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 22
3466: PUSH
3467: LD_INT 2
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PPUSH
3478: CALL_OW 70
3482: IFFALSE 3546
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
3484: LD_ADDR_VAR 0 4
3488: PUSH
3489: LD_VAR 0 9
3493: PPUSH
3494: LD_INT 3
3496: PUSH
3497: LD_INT 21
3499: PUSH
3500: LD_INT 1
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 22
3513: PUSH
3514: LD_INT 2
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 70
3529: PUSH
3530: FOR_IN
3531: IFFALSE 3544
// KillUnit ( i ) ;
3533: LD_VAR 0 4
3537: PPUSH
3538: CALL_OW 66
3542: GO 3530
3544: POP
3545: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
3546: LD_VAR 0 9
3550: PPUSH
3551: LD_INT 21
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: LD_INT 22
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PPUSH
3575: CALL_OW 70
3579: IFFALSE 3642
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
3581: LD_ADDR_VAR 0 4
3585: PUSH
3586: LD_VAR 0 9
3590: PPUSH
3591: LD_INT 21
3593: PUSH
3594: LD_INT 1
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 22
3603: PUSH
3604: LD_INT 2
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: PPUSH
3615: CALL_OW 70
3619: PUSH
3620: FOR_IN
3621: IFFALSE 3640
// ComMoveXY ( i , 91 , 56 ) ;
3623: LD_VAR 0 4
3627: PPUSH
3628: LD_INT 91
3630: PPUSH
3631: LD_INT 56
3633: PPUSH
3634: CALL_OW 111
3638: GO 3620
3640: POP
3641: POP
// repeat wait ( 0 0$1 ) ;
3642: LD_INT 35
3644: PPUSH
3645: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
3649: LD_VAR 0 9
3653: PPUSH
3654: LD_INT 50
3656: PUSH
3657: EMPTY
3658: LIST
3659: PPUSH
3660: CALL_OW 70
3664: NOT
3665: IFFALSE 3642
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] + strength do
3667: LD_ADDR_VAR 0 4
3671: PUSH
3672: DOUBLE
3673: LD_INT 1
3675: DEC
3676: ST_TO_ADDR
3677: LD_INT 5
3679: PUSH
3680: LD_INT 6
3682: PUSH
3683: LD_INT 7
3685: PUSH
3686: LD_INT 8
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: PUSH
3695: LD_OWVAR 67
3699: ARRAY
3700: PUSH
3701: LD_VAR 0 2
3705: PLUS
3706: PUSH
3707: FOR_TO
3708: IFFALSE 4025
// begin uc_side := 3 ;
3710: LD_ADDR_OWVAR 20
3714: PUSH
3715: LD_INT 3
3717: ST_TO_ADDR
// uc_nation := nation_russian ;
3718: LD_ADDR_OWVAR 21
3722: PUSH
3723: LD_INT 3
3725: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer ] [ rand ( 1 , 3 ) ] ;
3726: LD_ADDR_VAR 0 12
3730: PUSH
3731: LD_INT 1
3733: PUSH
3734: LD_INT 3
3736: PUSH
3737: LD_INT 3
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: PUSH
3745: LD_INT 1
3747: PPUSH
3748: LD_INT 3
3750: PPUSH
3751: CALL_OW 12
3755: ARRAY
3756: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
3757: LD_INT 22
3759: PUSH
3760: LD_INT 24
3762: PUSH
3763: LD_INT 23
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_VAR 0 4
3775: PUSH
3776: LD_INT 3
3778: MOD
3779: PUSH
3780: LD_INT 1
3782: PLUS
3783: ARRAY
3784: PPUSH
3785: LD_INT 3
3787: PUSH
3788: LD_INT 1
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ARRAY
3806: PPUSH
3807: LD_VAR 0 12
3811: PPUSH
3812: LD_INT 45
3814: PUSH
3815: LD_INT 46
3817: PUSH
3818: LD_INT 43
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: LIST
3825: PUSH
3826: LD_VAR 0 4
3830: PUSH
3831: LD_INT 3
3833: MOD
3834: PUSH
3835: LD_INT 1
3837: PLUS
3838: ARRAY
3839: PPUSH
3840: LD_INT 100
3842: PPUSH
3843: CALL 15549 0 5
// veh := CreateVehicle ;
3847: LD_ADDR_VAR 0 7
3851: PUSH
3852: CALL_OW 45
3856: ST_TO_ADDR
// SetDir ( veh , dir ) ;
3857: LD_VAR 0 7
3861: PPUSH
3862: LD_VAR 0 11
3866: PPUSH
3867: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3871: LD_VAR 0 7
3875: PPUSH
3876: LD_VAR 0 9
3880: PPUSH
3881: LD_INT 0
3883: PPUSH
3884: CALL_OW 49
// if control = control_manual then
3888: LD_VAR 0 12
3892: PUSH
3893: LD_INT 1
3895: EQUAL
3896: IFFALSE 3964
// begin uc_side := 3 ;
3898: LD_ADDR_OWVAR 20
3902: PUSH
3903: LD_INT 3
3905: ST_TO_ADDR
// uc_nation := nation_russian ;
3906: LD_ADDR_OWVAR 21
3910: PUSH
3911: LD_INT 3
3913: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
3914: LD_INT 0
3916: PPUSH
3917: LD_VAR 0 8
3921: PPUSH
3922: CALL_OW 383
// un := CreateHuman ;
3926: LD_ADDR_VAR 0 6
3930: PUSH
3931: CALL_OW 44
3935: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3936: LD_VAR 0 6
3940: PPUSH
3941: LD_VAR 0 7
3945: PPUSH
3946: CALL_OW 52
// SetTag ( un , spot ) ;
3950: LD_VAR 0 6
3954: PPUSH
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 109
// end ; repeat ComMoveToArea ( veh , parking ) ;
3964: LD_VAR 0 7
3968: PPUSH
3969: LD_VAR 0 10
3973: PPUSH
3974: CALL_OW 113
// wait ( 0 0$3 ) ;
3978: LD_INT 105
3980: PPUSH
3981: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
3985: LD_VAR 0 9
3989: PPUSH
3990: LD_INT 50
3992: PUSH
3993: EMPTY
3994: LIST
3995: PPUSH
3996: CALL_OW 70
4000: NOT
4001: IFFALSE 3964
// result := Join ( result , veh ) ;
4003: LD_ADDR_VAR 0 3
4007: PUSH
4008: LD_VAR 0 3
4012: PPUSH
4013: LD_VAR 0 7
4017: PPUSH
4018: CALL 48001 0 2
4022: ST_TO_ADDR
// end ;
4023: GO 3707
4025: POP
4026: POP
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] + strength do
4027: LD_ADDR_VAR 0 4
4031: PUSH
4032: DOUBLE
4033: LD_INT 1
4035: DEC
4036: ST_TO_ADDR
4037: LD_INT 2
4039: PUSH
4040: LD_INT 2
4042: PUSH
4043: LD_INT 3
4045: PUSH
4046: LD_INT 3
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: PUSH
4055: LD_OWVAR 67
4059: ARRAY
4060: PUSH
4061: LD_VAR 0 2
4065: PLUS
4066: PUSH
4067: FOR_TO
4068: IFFALSE 4238
// begin uc_side := 3 ;
4070: LD_ADDR_OWVAR 20
4074: PUSH
4075: LD_INT 3
4077: ST_TO_ADDR
// uc_nation := nation_russian ;
4078: LD_ADDR_OWVAR 21
4082: PUSH
4083: LD_INT 3
4085: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
4086: LD_INT 0
4088: PPUSH
4089: LD_VAR 0 8
4093: PPUSH
4094: CALL_OW 381
// un := CreateHuman ;
4098: LD_ADDR_VAR 0 6
4102: PUSH
4103: CALL_OW 44
4107: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
4108: LD_INT 30
4110: PUSH
4111: LD_INT 40
4113: PUSH
4114: LD_INT 50
4116: PUSH
4117: LD_INT 50
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: PUSH
4126: LD_OWVAR 67
4130: ARRAY
4131: PPUSH
4132: CALL_OW 13
4136: IFFALSE 4150
// SetClass ( un , class_bazooker ) ;
4138: LD_VAR 0 6
4142: PPUSH
4143: LD_INT 9
4145: PPUSH
4146: CALL_OW 336
// SetDir ( un , dir ) ;
4150: LD_VAR 0 6
4154: PPUSH
4155: LD_VAR 0 11
4159: PPUSH
4160: CALL_OW 233
// SetTag ( un , spot ) ;
4164: LD_VAR 0 6
4168: PPUSH
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
4178: LD_VAR 0 6
4182: PPUSH
4183: LD_VAR 0 9
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
4195: LD_VAR 0 6
4199: PPUSH
4200: LD_VAR 0 10
4204: PPUSH
4205: CALL_OW 113
// wait ( 0 0$1 ) ;
4209: LD_INT 35
4211: PPUSH
4212: CALL_OW 67
// result := Join ( result , un ) ;
4216: LD_ADDR_VAR 0 3
4220: PUSH
4221: LD_VAR 0 3
4225: PPUSH
4226: LD_VAR 0 6
4230: PPUSH
4231: CALL 48001 0 2
4235: ST_TO_ADDR
// end ;
4236: GO 4067
4238: POP
4239: POP
// end ;
4240: LD_VAR 0 3
4244: RET
// function PrepareRussianExtraInfantry ; var i , un ; begin
4245: LD_INT 0
4247: PPUSH
4248: PPUSH
4249: PPUSH
// result := [ ] ;
4250: LD_ADDR_VAR 0 1
4254: PUSH
4255: EMPTY
4256: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
4257: LD_ADDR_VAR 0 2
4261: PUSH
4262: DOUBLE
4263: LD_INT 1
4265: DEC
4266: ST_TO_ADDR
4267: LD_INT 3
4269: PUSH
4270: LD_INT 4
4272: PUSH
4273: LD_INT 5
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: LIST
4280: PUSH
4281: LD_OWVAR 67
4285: PUSH
4286: LD_INT 1
4288: PLUS
4289: ARRAY
4290: PUSH
4291: FOR_TO
4292: IFFALSE 4430
// begin uc_side := 3 ;
4294: LD_ADDR_OWVAR 20
4298: PUSH
4299: LD_INT 3
4301: ST_TO_ADDR
// uc_nation := nation_russian ;
4302: LD_ADDR_OWVAR 21
4306: PUSH
4307: LD_INT 3
4309: ST_TO_ADDR
// PrepareSoldier ( false , [ 7 , 8 , 9 ] [ Difficulty + 1 ] ) ;
4310: LD_INT 0
4312: PPUSH
4313: LD_INT 7
4315: PUSH
4316: LD_INT 8
4318: PUSH
4319: LD_INT 9
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: LIST
4326: PUSH
4327: LD_OWVAR 67
4331: PUSH
4332: LD_INT 1
4334: PLUS
4335: ARRAY
4336: PPUSH
4337: CALL_OW 381
// un := CreateHuman ;
4341: LD_ADDR_VAR 0 3
4345: PUSH
4346: CALL_OW 44
4350: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
4351: LD_INT 30
4353: PUSH
4354: LD_INT 40
4356: PUSH
4357: LD_INT 50
4359: PUSH
4360: LD_INT 50
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: PUSH
4369: LD_OWVAR 67
4373: ARRAY
4374: PPUSH
4375: CALL_OW 13
4379: IFFALSE 4393
// SetClass ( un , class_bazooker ) ;
4381: LD_VAR 0 3
4385: PPUSH
4386: LD_INT 9
4388: PPUSH
4389: CALL_OW 336
// PlaceUnitArea ( un , extraSpawnAttackArea , false ) ;
4393: LD_VAR 0 3
4397: PPUSH
4398: LD_INT 25
4400: PPUSH
4401: LD_INT 0
4403: PPUSH
4404: CALL_OW 49
// result := Join ( result , un ) ;
4408: LD_ADDR_VAR 0 1
4412: PUSH
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_VAR 0 3
4422: PPUSH
4423: CALL 48001 0 2
4427: ST_TO_ADDR
// end ;
4428: GO 4291
4430: POP
4431: POP
// end ;
4432: LD_VAR 0 1
4436: RET
// function SendBulldozer ; var un ; begin
4437: LD_INT 0
4439: PPUSH
4440: PPUSH
// uc_side := 3 ;
4441: LD_ADDR_OWVAR 20
4445: PUSH
4446: LD_INT 3
4448: ST_TO_ADDR
// uc_nation := nation_russian ;
4449: LD_ADDR_OWVAR 21
4453: PUSH
4454: LD_INT 3
4456: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4457: LD_INT 23
4459: PPUSH
4460: LD_INT 3
4462: PPUSH
4463: LD_INT 3
4465: PPUSH
4466: LD_INT 53
4468: PPUSH
4469: LD_INT 100
4471: PPUSH
4472: CALL 15549 0 5
// un := CreateVehicle ;
4476: LD_ADDR_VAR 0 2
4480: PUSH
4481: CALL_OW 45
4485: ST_TO_ADDR
// PlaceUnitXYD ( un , 7 , 8 , 1 , false ) ;
4486: LD_VAR 0 2
4490: PPUSH
4491: LD_INT 7
4493: PPUSH
4494: LD_INT 8
4496: PPUSH
4497: LD_INT 1
4499: PPUSH
4500: LD_INT 0
4502: PPUSH
4503: CALL 50141 0 5
// wait ( 0 0$1 ) ;
4507: LD_INT 35
4509: PPUSH
4510: CALL_OW 67
// CutTreeInArea ( un , cutTreeWArea ) ;
4514: LD_VAR 0 2
4518: PPUSH
4519: LD_INT 24
4521: PPUSH
4522: CALL 7332 0 2
// end ;
4526: LD_VAR 0 1
4530: RET
// every 0 0$3 trigger wave >= [ 5 , 6 , 6 , 7 ] [ Difficulty ] do
4531: LD_EXP 11
4535: PUSH
4536: LD_INT 5
4538: PUSH
4539: LD_INT 6
4541: PUSH
4542: LD_INT 6
4544: PUSH
4545: LD_INT 7
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: GREATEREQUAL
4560: IFFALSE 4583
4562: GO 4564
4564: DISABLE
// begin ChangeSideFog ( 3 , 2 ) ;
4565: LD_INT 3
4567: PPUSH
4568: LD_INT 2
4570: PPUSH
4571: CALL_OW 343
// ruDefeated := true ;
4575: LD_ADDR_EXP 10
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// end ;
4583: END
// every 3 3$20 + 4 4$00 trigger wave < [ 5 , 6 , 6 , 7 ] [ Difficulty ] do var i , e , attackers , extraAttackers , spot , extraSpot , paths , enemy ;
4584: LD_EXP 11
4588: PUSH
4589: LD_INT 5
4591: PUSH
4592: LD_INT 6
4594: PUSH
4595: LD_INT 6
4597: PUSH
4598: LD_INT 7
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: PUSH
4607: LD_OWVAR 67
4611: ARRAY
4612: LESS
4613: IFFALSE 5716
4615: GO 4617
4617: DISABLE
4618: LD_INT 0
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
// begin enable ;
4628: ENABLE
// attackers := [ ] ;
4629: LD_ADDR_VAR 0 3
4633: PUSH
4634: EMPTY
4635: ST_TO_ADDR
// extraAttackers := [ ] ;
4636: LD_ADDR_VAR 0 4
4640: PUSH
4641: EMPTY
4642: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 87 , 141 ] , [ 80 , 120 ] , [ 66 , 95 ] , [ 51 , 69 ] , [ 36 , 40 ] , [ 47 , 31 ] , [ 60 , 28 ] ] , [ [ 21 , 17 ] , [ 35 , 30 ] , [ 49 , 31 ] ] ] ;
4643: LD_ADDR_VAR 0 7
4647: PUSH
4648: LD_INT 176
4650: PUSH
4651: LD_INT 152
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 157
4660: PUSH
4661: LD_INT 122
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: LD_INT 146
4670: PUSH
4671: LD_INT 89
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: LD_INT 125
4680: PUSH
4681: LD_INT 46
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 87
4696: PUSH
4697: LD_INT 141
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 80
4706: PUSH
4707: LD_INT 120
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: LD_INT 66
4716: PUSH
4717: LD_INT 95
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 51
4726: PUSH
4727: LD_INT 69
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 36
4736: PUSH
4737: LD_INT 40
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 47
4746: PUSH
4747: LD_INT 31
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: LD_INT 60
4756: PUSH
4757: LD_INT 28
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: PUSH
4773: LD_INT 21
4775: PUSH
4776: LD_INT 17
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 35
4785: PUSH
4786: LD_INT 30
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 49
4795: PUSH
4796: LD_INT 31
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: LIST
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: ST_TO_ADDR
// wave := Inc ( wave ) ;
4813: LD_ADDR_EXP 11
4817: PUSH
4818: LD_EXP 11
4822: PPUSH
4823: CALL 49362 0 1
4827: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
4828: LD_ADDR_VAR 0 5
4832: PUSH
4833: LD_INT 1
4835: PPUSH
4836: LD_INT 3
4838: PPUSH
4839: CALL_OW 12
4843: ST_TO_ADDR
// if wave mod 2 = 0 then
4844: LD_EXP 11
4848: PUSH
4849: LD_INT 2
4851: MOD
4852: PUSH
4853: LD_INT 0
4855: EQUAL
4856: IFFALSE 4873
// strength := Inc ( strength ) ;
4858: LD_ADDR_EXP 12
4862: PUSH
4863: LD_EXP 12
4867: PPUSH
4868: CALL 49362 0 1
4872: ST_TO_ADDR
// if Count ( ListEnvironmentArea ( cutTreeWArea ) ) then
4873: LD_INT 24
4875: PPUSH
4876: CALL_OW 353
4880: PPUSH
4881: CALL 12811 0 1
4885: IFFALSE 4891
// SendBulldozer ;
4887: CALL 4437 0 0
// attackers := PrepareRussianAttack ( spot , strength ) ;
4891: LD_ADDR_VAR 0 3
4895: PUSH
4896: LD_VAR 0 5
4900: PPUSH
4901: LD_EXP 12
4905: PPUSH
4906: CALL 3221 0 2
4910: ST_TO_ADDR
// if wave + [ 2 , 2 , 3 , 3 ] [ Difficulty ] >= [ 6 , 7 , 8 , 9 ] [ Difficulty ] then
4911: LD_EXP 11
4915: PUSH
4916: LD_INT 2
4918: PUSH
4919: LD_INT 2
4921: PUSH
4922: LD_INT 3
4924: PUSH
4925: LD_INT 3
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_OWVAR 67
4938: ARRAY
4939: PLUS
4940: PUSH
4941: LD_INT 6
4943: PUSH
4944: LD_INT 7
4946: PUSH
4947: LD_INT 8
4949: PUSH
4950: LD_INT 9
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: PUSH
4959: LD_OWVAR 67
4963: ARRAY
4964: GREATEREQUAL
4965: IFFALSE 5033
// begin extraSpot := spot - 1 ;
4967: LD_ADDR_VAR 0 6
4971: PUSH
4972: LD_VAR 0 5
4976: PUSH
4977: LD_INT 1
4979: MINUS
4980: ST_TO_ADDR
// if extraSpot < 1 then
4981: LD_VAR 0 6
4985: PUSH
4986: LD_INT 1
4988: LESS
4989: IFFALSE 4999
// extraSpot := 3 ;
4991: LD_ADDR_VAR 0 6
4995: PUSH
4996: LD_INT 3
4998: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , strength ) ;
4999: LD_ADDR_VAR 0 4
5003: PUSH
5004: LD_VAR 0 6
5008: PPUSH
5009: LD_EXP 12
5013: PPUSH
5014: CALL 3221 0 2
5018: ST_TO_ADDR
// if Difficulty > 1 then
5019: LD_OWVAR 67
5023: PUSH
5024: LD_INT 1
5026: GREATER
5027: IFFALSE 5033
// PrepareRussianExtraInfantry ;
5029: CALL 4245 0 0
// end ; repeat wait ( 0 0$2 ) ;
5033: LD_INT 70
5035: PPUSH
5036: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
5040: LD_ADDR_VAR 0 8
5044: PUSH
5045: LD_INT 22
5047: PUSH
5048: LD_INT 2
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PPUSH
5055: CALL_OW 69
5059: ST_TO_ADDR
// for i in attackers do
5060: LD_ADDR_VAR 0 1
5064: PUSH
5065: LD_VAR 0 3
5069: PUSH
5070: FOR_IN
5071: IFFALSE 5376
// begin if not IsOk ( i ) then
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 302
5082: NOT
5083: IFFALSE 5103
// begin attackers := attackers diff i ;
5085: LD_ADDR_VAR 0 3
5089: PUSH
5090: LD_VAR 0 3
5094: PUSH
5095: LD_VAR 0 1
5099: DIFF
5100: ST_TO_ADDR
// continue ;
5101: GO 5070
// end ; if GetType ( i ) = unit_vehicle then
5103: LD_VAR 0 1
5107: PPUSH
5108: CALL_OW 247
5112: PUSH
5113: LD_INT 2
5115: EQUAL
5116: IFFALSE 5140
// AgressiveMove ( i , paths [ spot ] ) else
5118: LD_VAR 0 1
5122: PPUSH
5123: LD_VAR 0 7
5127: PUSH
5128: LD_VAR 0 5
5132: ARRAY
5133: PPUSH
5134: CALL 50605 0 2
5138: GO 5374
// begin if GetClass ( i ) = class_bazooker then
5140: LD_VAR 0 1
5144: PPUSH
5145: CALL_OW 257
5149: PUSH
5150: LD_INT 9
5152: EQUAL
5153: IFFALSE 5350
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
5155: LD_VAR 0 1
5159: PPUSH
5160: LD_VAR 0 8
5164: PPUSH
5165: LD_VAR 0 1
5169: PPUSH
5170: CALL_OW 74
5174: PPUSH
5175: CALL_OW 296
5179: PUSH
5180: LD_INT 12
5182: GREATER
5183: IFFALSE 5211
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
5185: LD_VAR 0 1
5189: PPUSH
5190: LD_VAR 0 8
5194: PPUSH
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL_OW 74
5204: PPUSH
5205: CALL_OW 115
5209: GO 5348
// begin e := NearestUnitToUnit ( enemy , i ) ;
5211: LD_ADDR_VAR 0 2
5215: PUSH
5216: LD_VAR 0 8
5220: PPUSH
5221: LD_VAR 0 1
5225: PPUSH
5226: CALL_OW 74
5230: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
5231: LD_INT 1
5233: PPUSH
5234: LD_INT 3
5236: PPUSH
5237: CALL_OW 12
5241: PUSH
5242: LD_INT 1
5244: DOUBLE
5245: EQUAL
5246: IFTRUE 5250
5248: GO 5267
5250: POP
// ComAttackUnit ( i , e ) ; 2 :
5251: LD_VAR 0 1
5255: PPUSH
5256: LD_VAR 0 2
5260: PPUSH
5261: CALL_OW 115
5265: GO 5348
5267: LD_INT 2
5269: DOUBLE
5270: EQUAL
5271: IFTRUE 5275
5273: GO 5307
5275: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
5276: LD_VAR 0 1
5280: PPUSH
5281: LD_VAR 0 2
5285: PPUSH
5286: CALL_OW 250
5290: PPUSH
5291: LD_VAR 0 2
5295: PPUSH
5296: CALL_OW 251
5300: PPUSH
5301: CALL_OW 153
5305: GO 5348
5307: LD_INT 3
5309: DOUBLE
5310: EQUAL
5311: IFTRUE 5315
5313: GO 5347
5315: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_VAR 0 2
5325: PPUSH
5326: CALL_OW 250
5330: PPUSH
5331: LD_VAR 0 2
5335: PPUSH
5336: CALL_OW 251
5340: PPUSH
5341: CALL_OW 154
5345: GO 5348
5347: POP
// end ; end else
5348: GO 5374
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5350: LD_VAR 0 1
5354: PPUSH
5355: LD_VAR 0 8
5359: PPUSH
5360: LD_VAR 0 1
5364: PPUSH
5365: CALL_OW 74
5369: PPUSH
5370: CALL_OW 115
// end ; end ;
5374: GO 5070
5376: POP
5377: POP
// if extraAttackers then
5378: LD_VAR 0 4
5382: IFFALSE 5702
// begin for i in extraAttackers do
5384: LD_ADDR_VAR 0 1
5388: PUSH
5389: LD_VAR 0 4
5393: PUSH
5394: FOR_IN
5395: IFFALSE 5700
// begin if not IsOk ( i ) then
5397: LD_VAR 0 1
5401: PPUSH
5402: CALL_OW 302
5406: NOT
5407: IFFALSE 5427
// begin extraAttackers := extraAttackers diff i ;
5409: LD_ADDR_VAR 0 4
5413: PUSH
5414: LD_VAR 0 4
5418: PUSH
5419: LD_VAR 0 1
5423: DIFF
5424: ST_TO_ADDR
// continue ;
5425: GO 5394
// end ; if GetType ( i ) = unit_vehicle then
5427: LD_VAR 0 1
5431: PPUSH
5432: CALL_OW 247
5436: PUSH
5437: LD_INT 2
5439: EQUAL
5440: IFFALSE 5464
// AgressiveMove ( i , paths [ extraSpot ] ) else
5442: LD_VAR 0 1
5446: PPUSH
5447: LD_VAR 0 7
5451: PUSH
5452: LD_VAR 0 6
5456: ARRAY
5457: PPUSH
5458: CALL 50605 0 2
5462: GO 5698
// begin if GetClass ( i ) = class_bazooker then
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL_OW 257
5473: PUSH
5474: LD_INT 9
5476: EQUAL
5477: IFFALSE 5674
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
5479: LD_VAR 0 1
5483: PPUSH
5484: LD_VAR 0 8
5488: PPUSH
5489: LD_VAR 0 1
5493: PPUSH
5494: CALL_OW 74
5498: PPUSH
5499: CALL_OW 296
5503: PUSH
5504: LD_INT 12
5506: GREATER
5507: IFFALSE 5535
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
5509: LD_VAR 0 1
5513: PPUSH
5514: LD_VAR 0 8
5518: PPUSH
5519: LD_VAR 0 1
5523: PPUSH
5524: CALL_OW 74
5528: PPUSH
5529: CALL_OW 115
5533: GO 5672
// begin e := NearestUnitToUnit ( enemy , i ) ;
5535: LD_ADDR_VAR 0 2
5539: PUSH
5540: LD_VAR 0 8
5544: PPUSH
5545: LD_VAR 0 1
5549: PPUSH
5550: CALL_OW 74
5554: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
5555: LD_INT 1
5557: PPUSH
5558: LD_INT 3
5560: PPUSH
5561: CALL_OW 12
5565: PUSH
5566: LD_INT 1
5568: DOUBLE
5569: EQUAL
5570: IFTRUE 5574
5572: GO 5591
5574: POP
// ComAttackUnit ( i , e ) ; 2 :
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_VAR 0 2
5584: PPUSH
5585: CALL_OW 115
5589: GO 5672
5591: LD_INT 2
5593: DOUBLE
5594: EQUAL
5595: IFTRUE 5599
5597: GO 5631
5599: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
5600: LD_VAR 0 1
5604: PPUSH
5605: LD_VAR 0 2
5609: PPUSH
5610: CALL_OW 250
5614: PPUSH
5615: LD_VAR 0 2
5619: PPUSH
5620: CALL_OW 251
5624: PPUSH
5625: CALL_OW 153
5629: GO 5672
5631: LD_INT 3
5633: DOUBLE
5634: EQUAL
5635: IFTRUE 5639
5637: GO 5671
5639: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
5640: LD_VAR 0 1
5644: PPUSH
5645: LD_VAR 0 2
5649: PPUSH
5650: CALL_OW 250
5654: PPUSH
5655: LD_VAR 0 2
5659: PPUSH
5660: CALL_OW 251
5664: PPUSH
5665: CALL_OW 154
5669: GO 5672
5671: POP
// end ; end else
5672: GO 5698
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5674: LD_VAR 0 1
5678: PPUSH
5679: LD_VAR 0 8
5683: PPUSH
5684: LD_VAR 0 1
5688: PPUSH
5689: CALL_OW 74
5693: PPUSH
5694: CALL_OW 115
// end ; end ;
5698: GO 5394
5700: POP
5701: POP
// end ; until not attackers and not extraAttackers ;
5702: LD_VAR 0 3
5706: NOT
5707: PUSH
5708: LD_VAR 0 4
5712: NOT
5713: AND
5714: IFFALSE 5033
// end ; end_of_file
5716: PPOPN 8
5718: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
5719: LD_INT 0
5721: PPUSH
5722: PPUSH
5723: PPUSH
5724: PPUSH
5725: PPUSH
5726: PPUSH
5727: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
5728: LD_ADDR_VAR 0 2
5732: PUSH
5733: LD_STRING 09_env
5735: PPUSH
5736: EMPTY
5737: PPUSH
5738: CALL_OW 30
5742: ST_TO_ADDR
// if not tmp then
5743: LD_VAR 0 2
5747: NOT
5748: IFFALSE 5752
// exit ;
5750: GO 6116
// list := ListEnvironmentArea ( mapArea ) ;
5752: LD_ADDR_VAR 0 7
5756: PUSH
5757: LD_INT 4
5759: PPUSH
5760: CALL_OW 353
5764: ST_TO_ADDR
// if not list then
5765: LD_VAR 0 7
5769: NOT
5770: IFFALSE 5774
// exit ;
5772: GO 6116
// for i in list do
5774: LD_ADDR_VAR 0 3
5778: PUSH
5779: LD_VAR 0 7
5783: PUSH
5784: FOR_IN
5785: IFFALSE 5893
// begin exist := false ;
5787: LD_ADDR_VAR 0 6
5791: PUSH
5792: LD_INT 0
5794: ST_TO_ADDR
// for j in tmp do
5795: LD_ADDR_VAR 0 4
5799: PUSH
5800: LD_VAR 0 2
5804: PUSH
5805: FOR_IN
5806: IFFALSE 5860
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
5808: LD_VAR 0 3
5812: PUSH
5813: LD_INT 1
5815: ARRAY
5816: PUSH
5817: LD_VAR 0 4
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: EQUAL
5826: PUSH
5827: LD_VAR 0 3
5831: PUSH
5832: LD_INT 2
5834: ARRAY
5835: PUSH
5836: LD_VAR 0 4
5840: PUSH
5841: LD_INT 2
5843: ARRAY
5844: EQUAL
5845: AND
5846: IFFALSE 5858
// begin exist := true ;
5848: LD_ADDR_VAR 0 6
5852: PUSH
5853: LD_INT 1
5855: ST_TO_ADDR
// break ;
5856: GO 5860
// end ;
5858: GO 5805
5860: POP
5861: POP
// if not exist then
5862: LD_VAR 0 6
5866: NOT
5867: IFFALSE 5891
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
5869: LD_VAR 0 3
5873: PUSH
5874: LD_INT 1
5876: ARRAY
5877: PPUSH
5878: LD_VAR 0 3
5882: PUSH
5883: LD_INT 2
5885: ARRAY
5886: PPUSH
5887: CALL_OW 347
// end ;
5891: GO 5784
5893: POP
5894: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_STRING 09_animals
5902: PPUSH
5903: EMPTY
5904: PPUSH
5905: CALL_OW 30
5909: ST_TO_ADDR
// if not tmp then
5910: LD_VAR 0 2
5914: NOT
5915: IFFALSE 5919
// exit ;
5917: GO 6116
// InitHc_All ( ) ;
5919: CALL_OW 584
// for i in tmp do
5923: LD_ADDR_VAR 0 3
5927: PUSH
5928: LD_VAR 0 2
5932: PUSH
5933: FOR_IN
5934: IFFALSE 6051
// begin uc_side := 0 ;
5936: LD_ADDR_OWVAR 20
5940: PUSH
5941: LD_INT 0
5943: ST_TO_ADDR
// uc_nation := nation_nature ;
5944: LD_ADDR_OWVAR 21
5948: PUSH
5949: LD_INT 0
5951: ST_TO_ADDR
// hc_gallery :=  ;
5952: LD_ADDR_OWVAR 33
5956: PUSH
5957: LD_STRING 
5959: ST_TO_ADDR
// hc_name :=  ;
5960: LD_ADDR_OWVAR 26
5964: PUSH
5965: LD_STRING 
5967: ST_TO_ADDR
// hc_class := i [ 1 ] ;
5968: LD_ADDR_OWVAR 28
5972: PUSH
5973: LD_VAR 0 3
5977: PUSH
5978: LD_INT 1
5980: ARRAY
5981: ST_TO_ADDR
// un := CreateHuman ;
5982: LD_ADDR_VAR 0 5
5986: PUSH
5987: CALL_OW 44
5991: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
5992: LD_VAR 0 5
5996: PPUSH
5997: LD_VAR 0 3
6001: PUSH
6002: LD_INT 2
6004: ARRAY
6005: PPUSH
6006: LD_VAR 0 3
6010: PUSH
6011: LD_INT 3
6013: ARRAY
6014: PPUSH
6015: LD_VAR 0 3
6019: PUSH
6020: LD_INT 4
6022: ARRAY
6023: PPUSH
6024: LD_INT 0
6026: PPUSH
6027: CALL 50141 0 5
// SetLives ( un , i [ 5 ] ) ;
6031: LD_VAR 0 5
6035: PPUSH
6036: LD_VAR 0 3
6040: PUSH
6041: LD_INT 5
6043: ARRAY
6044: PPUSH
6045: CALL_OW 234
// end ;
6049: GO 5933
6051: POP
6052: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: DOUBLE
6059: LD_INT 1
6061: DEC
6062: ST_TO_ADDR
6063: LD_INT 6
6065: PUSH
6066: LD_INT 5
6068: PUSH
6069: LD_INT 4
6071: PUSH
6072: LD_INT 3
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: PUSH
6081: LD_OWVAR 67
6085: ARRAY
6086: PUSH
6087: FOR_TO
6088: IFFALSE 6114
// begin PrepareApeman ( 5 ) ;
6090: LD_INT 5
6092: PPUSH
6093: CALL 44282 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
6097: CALL_OW 44
6101: PPUSH
6102: LD_INT 5
6104: PPUSH
6105: LD_INT 0
6107: PPUSH
6108: CALL_OW 49
// end ;
6112: GO 6087
6114: POP
6115: POP
// end ;
6116: LD_VAR 0 1
6120: RET
// export function CreateDeposits ; var i , oil , sib ; begin
6121: LD_INT 0
6123: PPUSH
6124: PPUSH
6125: PPUSH
6126: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: LD_INT 91
6134: PUSH
6135: LD_INT 13
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PUSH
6142: LD_INT 52
6144: PUSH
6145: LD_INT 23
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PUSH
6152: LD_INT 115
6154: PUSH
6155: LD_INT 150
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
6167: LD_ADDR_VAR 0 4
6171: PUSH
6172: LD_INT 82
6174: PUSH
6175: LD_INT 42
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 128
6184: PUSH
6185: LD_INT 132
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: ST_TO_ADDR
// for i in oil do
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_VAR 0 3
6205: PUSH
6206: FOR_IN
6207: IFFALSE 6261
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
6209: LD_VAR 0 2
6213: PUSH
6214: LD_INT 1
6216: ARRAY
6217: PPUSH
6218: LD_VAR 0 2
6222: PUSH
6223: LD_INT 2
6225: ARRAY
6226: PPUSH
6227: LD_INT 2
6229: PPUSH
6230: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
6234: LD_VAR 0 2
6238: PUSH
6239: LD_INT 1
6241: ARRAY
6242: PPUSH
6243: LD_VAR 0 2
6247: PUSH
6248: LD_INT 2
6250: ARRAY
6251: PPUSH
6252: LD_INT 2
6254: PPUSH
6255: CALL_OW 441
// end ;
6259: GO 6206
6261: POP
6262: POP
// for i in sib do
6263: LD_ADDR_VAR 0 2
6267: PUSH
6268: LD_VAR 0 4
6272: PUSH
6273: FOR_IN
6274: IFFALSE 6328
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
6276: LD_VAR 0 2
6280: PUSH
6281: LD_INT 1
6283: ARRAY
6284: PPUSH
6285: LD_VAR 0 2
6289: PUSH
6290: LD_INT 2
6292: ARRAY
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
6301: LD_VAR 0 2
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 2
6314: PUSH
6315: LD_INT 2
6317: ARRAY
6318: PPUSH
6319: LD_INT 2
6321: PPUSH
6322: CALL_OW 441
// end ;
6326: GO 6273
6328: POP
6329: POP
// end ;
6330: LD_VAR 0 1
6334: RET
// export function LoadCam ; var i , tmp ; begin
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
6339: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: LD_STRING 09_cameras
6347: PPUSH
6348: EMPTY
6349: PPUSH
6350: CALL_OW 30
6354: ST_TO_ADDR
// if not tmp then
6355: LD_VAR 0 3
6359: NOT
6360: IFFALSE 6364
// exit ;
6362: GO 6406
// for i in tmp do
6364: LD_ADDR_VAR 0 2
6368: PUSH
6369: LD_VAR 0 3
6373: PUSH
6374: FOR_IN
6375: IFFALSE 6404
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 1
6384: ARRAY
6385: PPUSH
6386: LD_VAR 0 2
6390: PUSH
6391: LD_INT 2
6393: ARRAY
6394: PPUSH
6395: LD_INT 2
6397: PPUSH
6398: CALL_OW 244
6402: GO 6374
6404: POP
6405: POP
// end ;
6406: LD_VAR 0 1
6410: RET
// export function LoadTech ; var i , tmp , default ; begin
6411: LD_INT 0
6413: PPUSH
6414: PPUSH
6415: PPUSH
6416: PPUSH
// default := [ 2 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
6417: LD_ADDR_VAR 0 4
6421: PUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: LD_INT 0
6430: PUSH
6431: LD_INT 0
6433: PUSH
6434: LD_INT 0
6436: PUSH
6437: LD_INT 2
6439: PUSH
6440: LD_INT 2
6442: PUSH
6443: LD_INT 0
6445: PUSH
6446: LD_INT 1
6448: PUSH
6449: LD_INT 0
6451: PUSH
6452: LD_INT 2
6454: PUSH
6455: LD_INT 0
6457: PUSH
6458: LD_INT 0
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: LD_INT 0
6469: PUSH
6470: LD_INT 2
6472: PUSH
6473: LD_INT 1
6475: PUSH
6476: LD_INT 0
6478: PUSH
6479: LD_INT 2
6481: PUSH
6482: LD_INT 1
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: LD_INT 0
6490: PUSH
6491: LD_INT 0
6493: PUSH
6494: LD_INT 0
6496: PUSH
6497: LD_INT 0
6499: PUSH
6500: LD_INT 0
6502: PUSH
6503: LD_INT 0
6505: PUSH
6506: LD_INT 0
6508: PUSH
6509: LD_INT 0
6511: PUSH
6512: LD_INT 0
6514: PUSH
6515: LD_INT 0
6517: PUSH
6518: LD_INT 0
6520: PUSH
6521: LD_INT 0
6523: PUSH
6524: LD_INT 2
6526: PUSH
6527: LD_INT 0
6529: PUSH
6530: LD_INT 0
6532: PUSH
6533: LD_INT 0
6535: PUSH
6536: LD_INT 1
6538: PUSH
6539: LD_INT 1
6541: PUSH
6542: LD_INT 1
6544: PUSH
6545: LD_INT 1
6547: PUSH
6548: LD_INT 0
6550: PUSH
6551: LD_INT 0
6553: PUSH
6554: LD_INT 2
6556: PUSH
6557: LD_INT 2
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: LD_INT 2
6565: PUSH
6566: LD_INT 2
6568: PUSH
6569: LD_INT 2
6571: PUSH
6572: LD_INT 1
6574: PUSH
6575: LD_INT 1
6577: PUSH
6578: LD_INT 0
6580: PUSH
6581: LD_INT 1
6583: PUSH
6584: LD_INT 0
6586: PUSH
6587: LD_INT 0
6589: PUSH
6590: LD_INT 0
6592: PUSH
6593: LD_INT 0
6595: PUSH
6596: LD_INT 0
6598: PUSH
6599: LD_INT 2
6601: PUSH
6602: LD_INT 1
6604: PUSH
6605: LD_INT 0
6607: PUSH
6608: LD_INT 0
6610: PUSH
6611: LD_INT 0
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: LD_INT 1
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: LD_INT 0
6625: PUSH
6626: LD_INT 2
6628: PUSH
6629: LD_INT 2
6631: PUSH
6632: LD_INT 0
6634: PUSH
6635: LD_INT 0
6637: PUSH
6638: LD_INT 1
6640: PUSH
6641: LD_INT 1
6643: PUSH
6644: LD_INT 1
6646: PUSH
6647: LD_INT 1
6649: PUSH
6650: LD_INT 1
6652: PUSH
6653: LD_INT 1
6655: PUSH
6656: LD_INT 1
6658: PUSH
6659: LD_INT 0
6661: PUSH
6662: LD_INT 0
6664: PUSH
6665: LD_INT 2
6667: PUSH
6668: LD_INT 2
6670: PUSH
6671: LD_INT 1
6673: PUSH
6674: LD_INT 1
6676: PUSH
6677: LD_INT 0
6679: PUSH
6680: LD_INT 0
6682: PUSH
6683: LD_INT 0
6685: PUSH
6686: LD_INT 1
6688: PUSH
6689: LD_INT 1
6691: PUSH
6692: LD_INT 1
6694: PUSH
6695: LD_INT 1
6697: PUSH
6698: LD_INT 1
6700: PUSH
6701: LD_INT 1
6703: PUSH
6704: LD_INT 1
6706: PUSH
6707: LD_INT 1
6709: PUSH
6710: LD_INT 1
6712: PUSH
6713: LD_INT 1
6715: PUSH
6716: LD_INT 1
6718: PUSH
6719: LD_INT 1
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: ST_TO_ADDR
// tmp := LoadVariable ( 09_tech , default ) ;
6824: LD_ADDR_VAR 0 3
6828: PUSH
6829: LD_STRING 09_tech
6831: PPUSH
6832: LD_VAR 0 4
6836: PPUSH
6837: CALL_OW 30
6841: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_VAR 0 3
6856: PPUSH
6857: CALL 12811 0 1
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6890
// SetTech ( i , 2 , tmp [ i ] ) ;
6865: LD_VAR 0 2
6869: PPUSH
6870: LD_INT 2
6872: PPUSH
6873: LD_VAR 0 3
6877: PUSH
6878: LD_VAR 0 2
6882: ARRAY
6883: PPUSH
6884: CALL_OW 322
6888: GO 6862
6890: POP
6891: POP
// end ;
6892: LD_VAR 0 1
6896: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
6905: LD_ADDR_VAR 0 3
6909: PUSH
6910: LD_STRING 09_buildings
6912: PPUSH
6913: EMPTY
6914: PPUSH
6915: CALL_OW 30
6919: ST_TO_ADDR
// for i in tmp do
6920: LD_ADDR_VAR 0 2
6924: PUSH
6925: LD_VAR 0 3
6929: PUSH
6930: FOR_IN
6931: IFFALSE 7325
// begin uc_side := 2 ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_INT 2
6940: ST_TO_ADDR
// uc_nation := nation_arabian ;
6941: LD_ADDR_OWVAR 21
6945: PUSH
6946: LD_INT 2
6948: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6949: LD_ADDR_OWVAR 42
6953: PUSH
6954: LD_VAR 0 2
6958: PUSH
6959: LD_INT 1
6961: ARRAY
6962: ST_TO_ADDR
// bc_level := i [ 5 ] ;
6963: LD_ADDR_OWVAR 43
6967: PUSH
6968: LD_VAR 0 2
6972: PUSH
6973: LD_INT 5
6975: ARRAY
6976: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
6977: LD_ADDR_OWVAR 44
6981: PUSH
6982: LD_INT 9
6984: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
6985: LD_ADDR_OWVAR 45
6989: PUSH
6990: LD_INT 9
6992: ST_TO_ADDR
// if i [ 7 ] then
6993: LD_VAR 0 2
6997: PUSH
6998: LD_INT 7
7000: ARRAY
7001: IFFALSE 7041
// begin bc_kind1 := i [ 7 ] ;
7003: LD_ADDR_OWVAR 44
7007: PUSH
7008: LD_VAR 0 2
7012: PUSH
7013: LD_INT 7
7015: ARRAY
7016: ST_TO_ADDR
// if i [ 8 ] then
7017: LD_VAR 0 2
7021: PUSH
7022: LD_INT 8
7024: ARRAY
7025: IFFALSE 7041
// bc_kind2 := i [ 8 ] ;
7027: LD_ADDR_OWVAR 45
7031: PUSH
7032: LD_VAR 0 2
7036: PUSH
7037: LD_INT 8
7039: ARRAY
7040: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
7041: LD_ADDR_VAR 0 4
7045: PUSH
7046: LD_VAR 0 2
7050: PUSH
7051: LD_INT 2
7053: ARRAY
7054: PPUSH
7055: LD_VAR 0 2
7059: PUSH
7060: LD_INT 3
7062: ARRAY
7063: PPUSH
7064: LD_VAR 0 2
7068: PUSH
7069: LD_INT 4
7071: ARRAY
7072: PPUSH
7073: CALL_OW 47
7077: ST_TO_ADDR
// if i [ 8 ] then
7078: LD_VAR 0 2
7082: PUSH
7083: LD_INT 8
7085: ARRAY
7086: IFFALSE 7106
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
7088: LD_VAR 0 4
7092: PPUSH
7093: LD_VAR 0 2
7097: PUSH
7098: LD_INT 8
7100: ARRAY
7101: PPUSH
7102: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
7106: LD_VAR 0 2
7110: PUSH
7111: LD_INT 1
7113: ARRAY
7114: PUSH
7115: LD_INT 0
7117: PUSH
7118: LD_INT 1
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: IN
7125: IFFALSE 7323
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
7127: LD_ADDR_VAR 0 6
7131: PUSH
7132: LD_STRING 09_materials
7134: PPUSH
7135: LD_INT 100
7137: PUSH
7138: LD_INT 50
7140: PUSH
7141: LD_INT 30
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: PPUSH
7152: CALL_OW 30
7156: ST_TO_ADDR
// for j := 1 to 3 do
7157: LD_ADDR_VAR 0 5
7161: PUSH
7162: DOUBLE
7163: LD_INT 1
7165: DEC
7166: ST_TO_ADDR
7167: LD_INT 3
7169: PUSH
7170: FOR_TO
7171: IFFALSE 7321
// if mat [ 1 ] [ j ] then
7173: LD_VAR 0 6
7177: PUSH
7178: LD_INT 1
7180: ARRAY
7181: PUSH
7182: LD_VAR 0 5
7186: ARRAY
7187: IFFALSE 7319
// if j > 1 then
7189: LD_VAR 0 5
7193: PUSH
7194: LD_INT 1
7196: GREATER
7197: IFFALSE 7260
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 35 , 25 , 20 , 10 ] [ Difficulty ] ) else
7199: LD_VAR 0 4
7203: PPUSH
7204: CALL_OW 274
7208: PPUSH
7209: LD_VAR 0 5
7213: PPUSH
7214: LD_VAR 0 6
7218: PUSH
7219: LD_INT 1
7221: ARRAY
7222: PUSH
7223: LD_VAR 0 5
7227: ARRAY
7228: PUSH
7229: LD_INT 35
7231: PUSH
7232: LD_INT 25
7234: PUSH
7235: LD_INT 20
7237: PUSH
7238: LD_INT 10
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: PUSH
7247: LD_OWVAR 67
7251: ARRAY
7252: PLUS
7253: PPUSH
7254: CALL_OW 277
7258: GO 7319
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 350 , 250 , 150 , 100 ] [ Difficulty ] ) ;
7260: LD_VAR 0 4
7264: PPUSH
7265: CALL_OW 274
7269: PPUSH
7270: LD_VAR 0 5
7274: PPUSH
7275: LD_VAR 0 6
7279: PUSH
7280: LD_INT 1
7282: ARRAY
7283: PUSH
7284: LD_VAR 0 5
7288: ARRAY
7289: PUSH
7290: LD_INT 350
7292: PUSH
7293: LD_INT 250
7295: PUSH
7296: LD_INT 150
7298: PUSH
7299: LD_INT 100
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: PUSH
7308: LD_OWVAR 67
7312: ARRAY
7313: PLUS
7314: PPUSH
7315: CALL_OW 277
7319: GO 7170
7321: POP
7322: POP
// end ; end ;
7323: GO 6930
7325: POP
7326: POP
// end ;
7327: LD_VAR 0 1
7331: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
// area = ListEnvironmentArea ( area ) ;
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: LD_VAR 0 2
7345: PPUSH
7346: CALL_OW 353
7350: ST_TO_ADDR
// if bulldozer > 0 then
7351: LD_VAR 0 1
7355: PUSH
7356: LD_INT 0
7358: GREATER
7359: IFFALSE 7470
// for i = area downto 1 do
7361: LD_ADDR_VAR 0 4
7365: PUSH
7366: DOUBLE
7367: LD_VAR 0 2
7371: INC
7372: ST_TO_ADDR
7373: LD_INT 1
7375: PUSH
7376: FOR_DOWNTO
7377: IFFALSE 7468
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
7379: LD_VAR 0 2
7383: PUSH
7384: LD_VAR 0 4
7388: ARRAY
7389: PUSH
7390: LD_INT 1
7392: ARRAY
7393: PPUSH
7394: LD_VAR 0 2
7398: PUSH
7399: LD_VAR 0 4
7403: ARRAY
7404: PUSH
7405: LD_INT 2
7407: ARRAY
7408: PPUSH
7409: CALL_OW 351
7413: IFFALSE 7466
// if not HasTask ( bulldozer ) then
7415: LD_VAR 0 1
7419: PPUSH
7420: CALL_OW 314
7424: NOT
7425: IFFALSE 7466
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
7427: LD_VAR 0 1
7431: PPUSH
7432: LD_VAR 0 2
7436: PUSH
7437: LD_VAR 0 4
7441: ARRAY
7442: PUSH
7443: LD_INT 1
7445: ARRAY
7446: PPUSH
7447: LD_VAR 0 2
7451: PUSH
7452: LD_VAR 0 4
7456: ARRAY
7457: PUSH
7458: LD_INT 2
7460: ARRAY
7461: PPUSH
7462: CALL_OW 171
7466: GO 7376
7468: POP
7469: POP
// end ; end_of_file
7470: LD_VAR 0 3
7474: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL 68139 0 2
// if GetControl ( vehicle ) = control_apeman then
7489: LD_VAR 0 1
7493: PPUSH
7494: CALL_OW 263
7498: PUSH
7499: LD_INT 5
7501: EQUAL
7502: IFFALSE 7512
// apeDriver := true ;
7504: LD_ADDR_EXP 8
7508: PUSH
7509: LD_INT 1
7511: ST_TO_ADDR
// end ;
7512: PPOPN 2
7514: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area ;
7515: LD_INT 0
7517: PPUSH
7518: PPUSH
// begin if GetSide ( driver ) = 3 then
7519: LD_VAR 0 1
7523: PPUSH
7524: CALL_OW 255
7528: PUSH
7529: LD_INT 3
7531: EQUAL
7532: IFFALSE 7669
// begin tag := GetTag ( driver ) ;
7534: LD_ADDR_VAR 0 5
7538: PUSH
7539: LD_VAR 0 1
7543: PPUSH
7544: CALL_OW 110
7548: ST_TO_ADDR
// area := [ ruSpawn1AArea , ruSpawn2AArea , ruSpawn3AArea ] [ tag ] ;
7549: LD_ADDR_VAR 0 6
7553: PUSH
7554: LD_INT 21
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_INT 23
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: LIST
7567: PUSH
7568: LD_VAR 0 5
7572: ARRAY
7573: ST_TO_ADDR
// if not area then
7574: LD_VAR 0 6
7578: NOT
7579: IFFALSE 7583
// exit ;
7581: GO 7669
// repeat ComMoveToArea ( driver , area ) ;
7583: LD_VAR 0 1
7587: PPUSH
7588: LD_VAR 0 6
7592: PPUSH
7593: CALL_OW 113
// wait ( 0 0$3 ) ;
7597: LD_INT 105
7599: PPUSH
7600: CALL_OW 67
// if not IsOk ( driver ) then
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 302
7613: NOT
7614: IFFALSE 7618
// exit ;
7616: GO 7669
// until IsInArea ( driver , ruSpawn1Area ) or IsInArea ( driver , ruSpawn2Area ) or IsInArea ( driver , ruSpawn3Area ) ;
7618: LD_VAR 0 1
7622: PPUSH
7623: LD_INT 15
7625: PPUSH
7626: CALL_OW 308
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: LD_INT 17
7638: PPUSH
7639: CALL_OW 308
7643: OR
7644: PUSH
7645: LD_VAR 0 1
7649: PPUSH
7650: LD_INT 19
7652: PPUSH
7653: CALL_OW 308
7657: OR
7658: IFFALSE 7583
// RemoveUnit ( driver ) ;
7660: LD_VAR 0 1
7664: PPUSH
7665: CALL_OW 64
// end ; end ;
7669: PPOPN 6
7671: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
7672: LD_VAR 0 3
7676: PUSH
7677: LD_INT 17
7679: EQUAL
7680: IFFALSE 7690
// kamikazeTrained := true ;
7682: LD_ADDR_EXP 6
7686: PUSH
7687: LD_INT 1
7689: ST_TO_ADDR
// end ;
7690: PPOPN 3
7692: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7693: LD_VAR 0 1
7697: PPUSH
7698: CALL 68019 0 1
// if un = Schulz then
7702: LD_VAR 0 1
7706: PUSH
7707: LD_EXP 24
7711: EQUAL
7712: IFFALSE 7721
// YouLost ( Schulz ) ;
7714: LD_STRING Schulz
7716: PPUSH
7717: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
7721: LD_VAR 0 1
7725: PUSH
7726: LD_EXP 13
7730: EQUAL
7731: PUSH
7732: LD_VAR 0 1
7736: PPUSH
7737: CALL_OW 255
7741: PUSH
7742: LD_INT 2
7744: EQUAL
7745: AND
7746: IFFALSE 7755
// YouLost ( Heike ) ;
7748: LD_STRING Heike
7750: PPUSH
7751: CALL_OW 104
// end ; end_of_file
7755: PPOPN 1
7757: END
// export function Action ; begin
7758: LD_INT 0
7760: PPUSH
// InGameOn ;
7761: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
7765: LD_INT 1
7767: PPUSH
7768: LD_INT 1
7770: PPUSH
7771: LD_INT 2
7773: PPUSH
7774: LD_INT 32963
7776: NEG
7777: PPUSH
7778: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
7782: LD_INT 1
7784: PPUSH
7785: LD_INT 1
7787: PPUSH
7788: LD_INT 2
7790: PPUSH
7791: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
7795: LD_INT 173
7797: PPUSH
7798: LD_INT 149
7800: PPUSH
7801: CALL_OW 86
// wait ( 0 0$2 ) ;
7805: LD_INT 70
7807: PPUSH
7808: CALL_OW 67
// InGameOff ;
7812: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
7816: LD_STRING M6
7818: PPUSH
7819: CALL_OW 337
// if Count ( UnitFilter ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] , [ f_ok ] ) ) = Count ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] ) then
7823: LD_EXP 14
7827: PUSH
7828: LD_EXP 15
7832: PUSH
7833: LD_EXP 17
7837: PUSH
7838: LD_EXP 18
7842: PUSH
7843: LD_EXP 20
7847: PUSH
7848: LD_EXP 21
7852: PUSH
7853: LD_EXP 22
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: PPUSH
7867: LD_INT 50
7869: PUSH
7870: EMPTY
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: PPUSH
7878: CALL 12811 0 1
7882: PUSH
7883: LD_EXP 14
7887: PUSH
7888: LD_EXP 15
7892: PUSH
7893: LD_EXP 17
7897: PUSH
7898: LD_EXP 18
7902: PUSH
7903: LD_EXP 20
7907: PUSH
7908: LD_EXP 21
7912: PUSH
7913: LD_EXP 22
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL 12811 0 1
7931: EQUAL
7932: IFFALSE 7941
// SetAchievement ( ACH_KNIGHT ) ;
7934: LD_STRING ACH_KNIGHT
7936: PPUSH
7937: CALL_OW 543
// SaveForQuickRestart ;
7941: CALL_OW 22
// end ;
7945: LD_VAR 0 1
7949: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
7950: LD_EXP 5
7954: PUSH
7955: LD_EXP 33
7959: PPUSH
7960: CALL_OW 302
7964: AND
7965: PUSH
7966: LD_EXP 13
7970: PPUSH
7971: CALL_OW 302
7975: AND
7976: PUSH
7977: LD_EXP 13
7981: PPUSH
7982: LD_EXP 33
7986: PPUSH
7987: CALL_OW 296
7991: PUSH
7992: LD_INT 9
7994: LESS
7995: PUSH
7996: LD_INT 22
7998: PUSH
7999: LD_INT 2
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 91
8008: PUSH
8009: LD_EXP 13
8013: PUSH
8014: LD_INT 7
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: PUSH
8022: LD_INT 21
8024: PUSH
8025: LD_INT 3
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PPUSH
8037: CALL_OW 69
8041: OR
8042: AND
8043: IFFALSE 8197
8045: GO 8047
8047: DISABLE
// begin ComExit ( Rolf ) ;
8048: LD_EXP 33
8052: PPUSH
8053: CALL 48399 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
8057: LD_EXP 33
8061: PPUSH
8062: LD_EXP 13
8066: PPUSH
8067: CALL_OW 172
// InGameOn ;
8071: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8075: LD_EXP 13
8079: PPUSH
8080: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
8084: LD_EXP 33
8088: PPUSH
8089: LD_STRING DRf-Reunion-1
8091: PPUSH
8092: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
8096: LD_EXP 33
8100: PPUSH
8101: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
8105: LD_EXP 13
8109: PPUSH
8110: LD_EXP 33
8114: PPUSH
8115: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
8119: LD_EXP 33
8123: PPUSH
8124: LD_EXP 13
8128: PPUSH
8129: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
8133: LD_EXP 13
8137: PPUSH
8138: LD_STRING DH-Reunion-2
8140: PPUSH
8141: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
8145: LD_EXP 33
8149: PPUSH
8150: LD_STRING DRf-Reunion-3
8152: PPUSH
8153: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
8157: LD_EXP 13
8161: PPUSH
8162: LD_STRING DH-Reunion-4
8164: PPUSH
8165: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
8169: LD_EXP 33
8173: PPUSH
8174: LD_STRING DRf-Reunion-5
8176: PPUSH
8177: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
8181: LD_EXP 13
8185: PPUSH
8186: LD_STRING DH-Reunion-6
8188: PPUSH
8189: CALL_OW 88
// InGameOff ;
8193: CALL_OW 9
// end ;
8197: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
8198: LD_EXP 5
8202: NOT
8203: PUSH
8204: LD_INT 22
8206: PUSH
8207: LD_INT 2
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 91
8216: PUSH
8217: LD_EXP 24
8221: PUSH
8222: LD_INT 10
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 21
8232: PUSH
8233: LD_INT 3
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: PPUSH
8245: CALL_OW 69
8249: AND
8250: IFFALSE 9037
8252: GO 8254
8254: DISABLE
// begin InGameOn ;
8255: CALL_OW 8
// ComExit ( Schulz ) ;
8259: LD_EXP 24
8263: PPUSH
8264: CALL 48399 0 1
// CenterNowOnUnits ( Schulz ) ;
8268: LD_EXP 24
8272: PPUSH
8273: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8277: LD_INT 10
8279: PPUSH
8280: CALL_OW 67
// DialogueOn ;
8284: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
8288: LD_EXP 24
8292: PPUSH
8293: LD_STRING DL-Def-1
8295: PPUSH
8296: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
8300: LD_EXP 24
8304: PPUSH
8305: LD_STRING DL-Def-2
8307: PPUSH
8308: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
8312: LD_EXP 24
8316: PPUSH
8317: LD_STRING DL-Def-3
8319: PPUSH
8320: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
8324: LD_EXP 25
8328: PPUSH
8329: CALL_OW 302
8333: PUSH
8334: LD_EXP 23
8338: PPUSH
8339: CALL_OW 302
8343: AND
8344: IFFALSE 8691
// begin Say ( Basim , DBs-Def-4 ) ;
8346: LD_EXP 25
8350: PPUSH
8351: LD_STRING DBs-Def-4
8353: PPUSH
8354: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
8358: LD_EXP 25
8362: PPUSH
8363: LD_STRING DBs-Def-5
8365: PPUSH
8366: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
8370: LD_EXP 23
8374: PPUSH
8375: LD_STRING DA-Def-6
8377: PPUSH
8378: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
8382: LD_EXP 25
8386: PPUSH
8387: LD_STRING DBs-Def-7
8389: PPUSH
8390: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
8394: LD_EXP 23
8398: PPUSH
8399: LD_STRING DA-Def-8
8401: PPUSH
8402: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
8406: LD_EXP 23
8410: PPUSH
8411: LD_STRING DA-Def-9
8413: PPUSH
8414: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
8418: LD_EXP 25
8422: PPUSH
8423: LD_STRING DBs-Def-10
8425: PPUSH
8426: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
8430: LD_EXP 23
8434: PPUSH
8435: LD_STRING DA-Def-11
8437: PPUSH
8438: CALL_OW 88
// if Query ( QTech ) = 1 then
8442: LD_STRING QTech
8444: PPUSH
8445: CALL_OW 97
8449: PUSH
8450: LD_INT 1
8452: EQUAL
8453: IFFALSE 8561
// begin Say ( Schulz , DL-Tech-1 ) ;
8455: LD_EXP 24
8459: PPUSH
8460: LD_STRING DL-Tech-1
8462: PPUSH
8463: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
8467: LD_EXP 24
8471: PPUSH
8472: LD_STRING DL-Tech-2
8474: PPUSH
8475: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
8479: LD_EXP 23
8483: PPUSH
8484: LD_STRING DA-Tech-3
8486: PPUSH
8487: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
8491: LD_EXP 18
8495: PPUSH
8496: LD_STRING DK-Tech-4
8498: PPUSH
8499: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
8503: LD_EXP 18
8507: PPUSH
8508: LD_STRING DK-Tech-5
8510: PPUSH
8511: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
8515: LD_EXP 25
8519: PPUSH
8520: LD_STRING DBs-Tech-6
8522: PPUSH
8523: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
8527: LD_EXP 18
8531: PPUSH
8532: LD_STRING DK-Tech-7
8534: PPUSH
8535: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
8539: LD_INT 3
8541: PPUSH
8542: LD_INT 2
8544: PPUSH
8545: LD_INT 1
8547: PPUSH
8548: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
8552: LD_STRING M7a
8554: PPUSH
8555: CALL_OW 604
// end else
8559: GO 8689
// begin Say ( Schulz , DL-Tech-a-1 ) ;
8561: LD_EXP 24
8565: PPUSH
8566: LD_STRING DL-Tech-a-1
8568: PPUSH
8569: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
8573: LD_EXP 24
8577: PPUSH
8578: LD_STRING DL-Tech-a-2
8580: PPUSH
8581: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
8585: LD_EXP 25
8589: PPUSH
8590: LD_STRING DBs-Tech-a-3
8592: PPUSH
8593: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
8597: LD_EXP 18
8601: PPUSH
8602: LD_STRING DK-Tech-a-4
8604: PPUSH
8605: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
8609: LD_EXP 18
8613: PPUSH
8614: LD_STRING DK-Tech-a-5
8616: PPUSH
8617: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
8621: LD_EXP 23
8625: PPUSH
8626: LD_STRING DA-Tech-a-6
8628: PPUSH
8629: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
8633: LD_EXP 23
8637: PPUSH
8638: LD_STRING DA-Tech-a-7
8640: PPUSH
8641: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
8645: LD_EXP 24
8649: PPUSH
8650: LD_STRING DL-Tech-a-8
8652: PPUSH
8653: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
8657: LD_EXP 23
8661: PPUSH
8662: LD_STRING DA-Tech-a-9
8664: PPUSH
8665: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
8669: LD_INT 4
8671: PPUSH
8672: LD_INT 2
8674: PPUSH
8675: LD_INT 1
8677: PPUSH
8678: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
8682: LD_STRING M7b
8684: PPUSH
8685: CALL_OW 604
// end ; end else
8689: GO 8739
// if IsOk ( Basim ) then
8691: LD_EXP 25
8695: PPUSH
8696: CALL_OW 302
8700: IFFALSE 8739
// begin Say ( Basim , DBs-Def-4 ) ;
8702: LD_EXP 25
8706: PPUSH
8707: LD_STRING DBs-Def-4
8709: PPUSH
8710: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
8714: LD_EXP 25
8718: PPUSH
8719: LD_STRING DBs-Def-5
8721: PPUSH
8722: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
8726: LD_INT 4
8728: PPUSH
8729: LD_INT 2
8731: PPUSH
8732: LD_INT 1
8734: PPUSH
8735: CALL_OW 322
// end ; DialogueOff ;
8739: CALL_OW 7
// InGameOff ;
8743: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
8747: LD_STRING M7
8749: PPUSH
8750: CALL_OW 337
// playerInBase := true ;
8754: LD_ADDR_EXP 5
8758: PUSH
8759: LD_INT 1
8761: ST_TO_ADDR
// wait ( 0 0$30 ) ;
8762: LD_INT 1050
8764: PPUSH
8765: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8769: LD_INT 35
8771: PPUSH
8772: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) ;
8776: LD_INT 22
8778: PUSH
8779: LD_INT 2
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 50
8788: PUSH
8789: EMPTY
8790: LIST
8791: PUSH
8792: LD_INT 3
8794: PUSH
8795: LD_INT 57
8797: PUSH
8798: EMPTY
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: LD_INT 30
8807: PUSH
8808: LD_INT 30
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 69
8825: IFFALSE 8769
// if IsOk ( Kurt ) then
8827: LD_EXP 22
8831: PPUSH
8832: CALL_OW 302
8836: IFFALSE 9024
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
8838: LD_INT 22
8840: PUSH
8841: LD_INT 2
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 50
8850: PUSH
8851: EMPTY
8852: LIST
8853: PUSH
8854: LD_INT 3
8856: PUSH
8857: LD_INT 57
8859: PUSH
8860: EMPTY
8861: LIST
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 30
8869: PUSH
8870: LD_INT 30
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: PPUSH
8883: CALL_OW 69
8887: PUSH
8888: LD_INT 1
8890: ARRAY
8891: PPUSH
8892: CALL_OW 87
// DialogueOn ;
8896: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
8900: LD_EXP 22
8904: PPUSH
8905: LD_STRING DKs-Med-1
8907: PPUSH
8908: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
8912: LD_EXP 22
8916: PPUSH
8917: LD_STRING DKs-Med-2
8919: PPUSH
8920: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
8924: LD_EXP 24
8928: PPUSH
8929: LD_STRING DL-Med-3
8931: PPUSH
8932: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
8936: LD_EXP 24
8940: PPUSH
8941: LD_STRING DL-Med-4
8943: PPUSH
8944: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
8948: LD_EXP 22
8952: PPUSH
8953: LD_STRING DKs-Med-5
8955: PPUSH
8956: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
8960: LD_EXP 22
8964: PPUSH
8965: LD_STRING DKs-Med-6
8967: PPUSH
8968: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
8972: LD_EXP 22
8976: PPUSH
8977: LD_STRING DKs-Med-7
8979: PPUSH
8980: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
8984: LD_EXP 22
8988: PPUSH
8989: LD_STRING DKs-Med-8
8991: PPUSH
8992: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
8996: LD_EXP 24
9000: PPUSH
9001: LD_STRING DL-Med-9
9003: PPUSH
9004: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
9008: LD_EXP 24
9012: PPUSH
9013: LD_STRING DL-Med-10
9015: PPUSH
9016: CALL_OW 88
// DialogueOff ;
9020: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
9024: LD_STRING M8-
9026: PUSH
9027: LD_OWVAR 67
9031: STR
9032: PPUSH
9033: CALL_OW 337
// end ;
9037: END
// every 0 0$1 trigger playerInBase do
9038: LD_EXP 5
9042: IFFALSE 9062
9044: GO 9046
9046: DISABLE
// begin enable ;
9047: ENABLE
// missionTime := missionTime + 0 0$1 ;
9048: LD_ADDR_EXP 9
9052: PUSH
9053: LD_EXP 9
9057: PUSH
9058: LD_INT 35
9060: PLUS
9061: ST_TO_ADDR
// end ;
9062: END
// every 0 0$2 trigger playerInBase and apeDriver do
9063: LD_EXP 5
9067: PUSH
9068: LD_EXP 8
9072: AND
9073: IFFALSE 9470
9075: GO 9077
9077: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
9078: LD_STRING M7a_out
9080: PPUSH
9081: CALL_OW 337
// wait ( 0 0$2 ) ;
9085: LD_INT 70
9087: PPUSH
9088: CALL_OW 67
// DialogueOn ;
9092: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
9096: LD_INT 22
9098: PUSH
9099: LD_INT 2
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 33
9108: PUSH
9109: LD_INT 5
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 69
9124: PUSH
9125: LD_INT 1
9127: ARRAY
9128: PPUSH
9129: CALL_OW 87
// if IsOk ( Mia ) then
9133: LD_EXP 27
9137: PPUSH
9138: CALL_OW 302
9142: IFFALSE 9168
// begin Say ( Mia , DMm-Apedrive-1 ) ;
9144: LD_EXP 27
9148: PPUSH
9149: LD_STRING DMm-Apedrive-1
9151: PPUSH
9152: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
9156: LD_EXP 15
9160: PPUSH
9161: LD_STRING DM-Apedrive-2
9163: PPUSH
9164: CALL_OW 88
// end ; if IsOk ( Jenna ) then
9168: LD_EXP 29
9172: PPUSH
9173: CALL_OW 302
9177: IFFALSE 9466
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
9179: LD_EXP 29
9183: PPUSH
9184: LD_STRING DJm-Apedrive-3
9186: PPUSH
9187: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
9191: LD_EXP 29
9195: PPUSH
9196: LD_STRING DJm-Apedrive-4
9198: PPUSH
9199: CALL_OW 88
// if IsOk ( Basim ) then
9203: LD_EXP 25
9207: PPUSH
9208: CALL_OW 302
9212: IFFALSE 9466
// begin Say ( Basim , DBs-Apedrive-5 ) ;
9214: LD_EXP 25
9218: PPUSH
9219: LD_STRING DBs-Apedrive-5
9221: PPUSH
9222: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
9226: LD_EXP 25
9230: PPUSH
9231: LD_STRING DBs-Apedrive-6
9233: PPUSH
9234: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
9238: LD_EXP 29
9242: PPUSH
9243: LD_STRING DJm-Apedrive-7
9245: PPUSH
9246: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
9250: LD_EXP 25
9254: PPUSH
9255: LD_STRING DBs-Apedrive-8
9257: PPUSH
9258: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
9262: LD_EXP 29
9266: PPUSH
9267: LD_STRING DJm-Apedrive-9
9269: PPUSH
9270: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
9274: LD_EXP 25
9278: PPUSH
9279: LD_STRING DBs-Apedrive-10
9281: PPUSH
9282: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
9286: LD_EXP 29
9290: PPUSH
9291: LD_STRING DJm-Apedrive-11
9293: PPUSH
9294: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
9298: LD_EXP 18
9302: PPUSH
9303: LD_STRING DK-Apedrive-12
9305: PPUSH
9306: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
9310: LD_EXP 29
9314: PPUSH
9315: LD_STRING DJm-Apedrive-13
9317: PPUSH
9318: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
9322: LD_EXP 29
9326: PPUSH
9327: LD_STRING DJm-Apedrive-14
9329: PPUSH
9330: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
9334: LD_EXP 29
9338: PPUSH
9339: LD_STRING DJm-Apedrive-15
9341: PPUSH
9342: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
9346: LD_EXP 29
9350: PPUSH
9351: LD_STRING DJm-Apedrive-16
9353: PPUSH
9354: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
9358: LD_EXP 27
9362: PPUSH
9363: LD_STRING DMm-Apedrive-17
9365: PPUSH
9366: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
9370: LD_EXP 27
9374: PPUSH
9375: LD_STRING DMm-Apedrive-18
9377: PPUSH
9378: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
9382: LD_EXP 27
9386: PPUSH
9387: LD_STRING DMm-Apedrive-19
9389: PPUSH
9390: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
9394: LD_EXP 27
9398: PPUSH
9399: LD_STRING DMm-Apedrive-20
9401: PPUSH
9402: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
9406: LD_EXP 18
9410: PPUSH
9411: LD_STRING DK-Apedrive-21
9413: PPUSH
9414: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
9418: LD_EXP 18
9422: PPUSH
9423: LD_STRING DK-Apedrive-22
9425: PPUSH
9426: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
9430: LD_EXP 13
9434: PPUSH
9435: LD_STRING DH-Apedrive-23
9437: PPUSH
9438: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
9442: LD_EXP 26
9446: PPUSH
9447: LD_STRING DLt-Apedrive-24
9449: PPUSH
9450: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
9454: LD_EXP 26
9458: PPUSH
9459: LD_STRING DLt-Apedrive-25
9461: PPUSH
9462: CALL_OW 88
// end ; end ; DialogueOff ;
9466: CALL_OW 7
// end ;
9470: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
9471: LD_EXP 5
9475: PUSH
9476: LD_EXP 6
9480: AND
9481: IFFALSE 9493
9483: GO 9485
9485: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
9486: LD_STRING M7b_out
9488: PPUSH
9489: CALL_OW 337
9493: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
9494: LD_EXP 5
9498: PUSH
9499: LD_INT 22
9501: PUSH
9502: LD_INT 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 30
9511: PUSH
9512: LD_INT 3
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 3
9521: PUSH
9522: LD_INT 58
9524: PUSH
9525: EMPTY
9526: LIST
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: PPUSH
9537: CALL_OW 69
9541: AND
9542: PUSH
9543: LD_EXP 13
9547: PPUSH
9548: CALL_OW 302
9552: AND
9553: PUSH
9554: LD_EXP 24
9558: PPUSH
9559: CALL_OW 302
9563: AND
9564: IFFALSE 9737
9566: GO 9568
9568: DISABLE
// begin DialogueOn ;
9569: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
9573: LD_EXP 24
9577: PPUSH
9578: LD_STRING DL-Mort-1
9580: PPUSH
9581: CALL_OW 88
// if IsOk ( Markov ) then
9585: LD_EXP 20
9589: PPUSH
9590: CALL_OW 302
9594: IFFALSE 9647
// begin Say ( Heike , DH-Mort-2 ) ;
9596: LD_EXP 13
9600: PPUSH
9601: LD_STRING DH-Mort-2
9603: PPUSH
9604: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
9608: LD_EXP 20
9612: PPUSH
9613: LD_STRING DMar-Mort-3
9615: PPUSH
9616: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
9620: LD_EXP 20
9624: PPUSH
9625: LD_STRING DMar-Mort-4
9627: PPUSH
9628: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
9632: LD_INT 88
9634: PPUSH
9635: LD_INT 2
9637: PPUSH
9638: LD_INT 1
9640: PPUSH
9641: CALL_OW 322
// end else
9645: GO 9733
// if IsOk ( Olaf ) then
9647: LD_EXP 21
9651: PPUSH
9652: CALL_OW 302
9656: IFFALSE 9709
// begin Say ( Heike , DH-Mort-a-2 ) ;
9658: LD_EXP 13
9662: PPUSH
9663: LD_STRING DH-Mort-a-2
9665: PPUSH
9666: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
9670: LD_EXP 21
9674: PPUSH
9675: LD_STRING DO-Mort-a-3
9677: PPUSH
9678: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
9682: LD_EXP 21
9686: PPUSH
9687: LD_STRING DO-Mort-a-4
9689: PPUSH
9690: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
9694: LD_INT 88
9696: PPUSH
9697: LD_INT 2
9699: PPUSH
9700: LD_INT 1
9702: PPUSH
9703: CALL_OW 322
// end else
9707: GO 9733
// begin Say ( Heike , DH-Mort-a-5 ) ;
9709: LD_EXP 13
9713: PPUSH
9714: LD_STRING DH-Mort-a-5
9716: PPUSH
9717: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
9721: LD_EXP 13
9725: PPUSH
9726: LD_STRING DH-Mort-a-6
9728: PPUSH
9729: CALL_OW 88
// end ; DialogueOff ;
9733: CALL_OW 7
// end ;
9737: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
9738: LD_EXP 18
9742: PPUSH
9743: CALL_OW 256
9747: PUSH
9748: LD_INT 10
9750: LESS
9751: IFFALSE 9853
9753: GO 9755
9755: DISABLE
// begin DialogueOn ;
9756: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9760: LD_EXP 18
9764: PPUSH
9765: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
9769: LD_EXP 18
9773: PPUSH
9774: LD_STRING DK-Death-1
9776: PPUSH
9777: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
9781: LD_EXP 18
9785: PPUSH
9786: LD_STRING DK-Death-2
9788: PPUSH
9789: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
9793: LD_EXP 18
9797: PPUSH
9798: LD_STRING DK-Death-3
9800: PPUSH
9801: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
9805: LD_EXP 13
9809: PPUSH
9810: LD_STRING DH-Death-4
9812: PPUSH
9813: CALL_OW 88
// if IsOk ( Markov ) then
9817: LD_EXP 20
9821: PPUSH
9822: CALL_OW 302
9826: IFFALSE 9840
// Say ( Markov , DMar-Death-5 ) ;
9828: LD_EXP 20
9832: PPUSH
9833: LD_STRING DMar-Death-5
9835: PPUSH
9836: CALL_OW 88
// DialogueOff ;
9840: CALL_OW 7
// KillUnit ( Kaia ) ;
9844: LD_EXP 18
9848: PPUSH
9849: CALL_OW 66
// end ;
9853: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib ;
9854: LD_EXP 10
9858: PUSH
9859: LD_INT 81
9861: PUSH
9862: LD_INT 2
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 50
9871: PUSH
9872: EMPTY
9873: LIST
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PPUSH
9879: CALL_OW 69
9883: NOT
9884: AND
9885: IFFALSE 10598
9887: GO 9889
9889: DISABLE
9890: LD_INT 0
9892: PPUSH
9893: PPUSH
// begin InGameOn ;
9894: CALL_OW 8
// DialogueOn ;
9898: CALL_OW 6
// if time09 + time09c + tick < 80 80$00 then
9902: LD_EXP 3
9906: PUSH
9907: LD_EXP 4
9911: PLUS
9912: PUSH
9913: LD_OWVAR 1
9917: PLUS
9918: PUSH
9919: LD_INT 168000
9921: LESS
9922: IFFALSE 9931
// SetAchievement ( ACH_HSPEED_9 ) ;
9924: LD_STRING ACH_HSPEED_9
9926: PPUSH
9927: CALL_OW 543
// CenterOnNow ( Schulz ) ;
9931: LD_EXP 24
9935: PPUSH
9936: CALL 51954 0 1
// dwait ( 0 0$0.3 ) ;
9940: LD_INT 10
9942: PPUSH
9943: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
9947: LD_EXP 24
9951: PPUSH
9952: LD_STRING DL-End-1
9954: PPUSH
9955: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
9959: LD_EXP 13
9963: PPUSH
9964: LD_STRING DH-End-2
9966: PPUSH
9967: CALL_OW 88
// if IsOk ( Kaia ) then
9971: LD_EXP 18
9975: PPUSH
9976: CALL_OW 302
9980: IFFALSE 10042
// begin SaveCharacters ( Kaia , 09_Kaia ) ;
9982: LD_EXP 18
9986: PPUSH
9987: LD_STRING 09_Kaia
9989: PPUSH
9990: CALL_OW 38
// Say ( Kaia , DK-End-a-3 ) ;
9994: LD_EXP 18
9998: PPUSH
9999: LD_STRING DK-End-a-3
10001: PPUSH
10002: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
10006: LD_EXP 18
10010: PPUSH
10011: LD_STRING DK-End-a-4
10013: PPUSH
10014: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
10018: LD_EXP 24
10022: PPUSH
10023: LD_STRING DL-End-a-5
10025: PPUSH
10026: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
10030: LD_EXP 24
10034: PPUSH
10035: LD_STRING DL-End-a-6
10037: PPUSH
10038: CALL_OW 88
// end ; SaveCharacters ( Heike , 09_Heike ) ;
10042: LD_EXP 13
10046: PPUSH
10047: LD_STRING 09_Heike
10049: PPUSH
10050: CALL_OW 38
// SaveCharacters ( Schulz , 09_Schulz ) ;
10054: LD_EXP 24
10058: PPUSH
10059: LD_STRING 09_Schulz
10061: PPUSH
10062: CALL_OW 38
// if IsOk ( Basim ) then
10066: LD_EXP 25
10070: PPUSH
10071: CALL_OW 302
10075: IFFALSE 10089
// SaveCharacters ( Basim , 09_Basim ) ;
10077: LD_EXP 25
10081: PPUSH
10082: LD_STRING 09_Basim
10084: PPUSH
10085: CALL_OW 38
// if IsOk ( Givi ) then
10089: LD_EXP 14
10093: PPUSH
10094: CALL_OW 302
10098: IFFALSE 10112
// SaveCharacters ( Givi , 09_Givi ) ;
10100: LD_EXP 14
10104: PPUSH
10105: LD_STRING 09_Givi
10107: PPUSH
10108: CALL_OW 38
// if IsOk ( Mike ) then
10112: LD_EXP 15
10116: PPUSH
10117: CALL_OW 302
10121: IFFALSE 10135
// SaveCharacters ( Mike , 09_Mike ) ;
10123: LD_EXP 15
10127: PPUSH
10128: LD_STRING 09_Mike
10130: PPUSH
10131: CALL_OW 38
// if IsOk ( Ibrahim ) then
10135: LD_EXP 16
10139: PPUSH
10140: CALL_OW 302
10144: IFFALSE 10158
// SaveCharacters ( Ibrahim , 09_Ibrahim ) ;
10146: LD_EXP 16
10150: PPUSH
10151: LD_STRING 09_Ibrahim
10153: PPUSH
10154: CALL_OW 38
// if IsOk ( Kamil ) then
10158: LD_EXP 17
10162: PPUSH
10163: CALL_OW 302
10167: IFFALSE 10181
// SaveCharacters ( Kamil , 09_Kamil ) ;
10169: LD_EXP 17
10173: PPUSH
10174: LD_STRING 09_Kamil
10176: PPUSH
10177: CALL_OW 38
// if IsOk ( Sophia ) then
10181: LD_EXP 19
10185: PPUSH
10186: CALL_OW 302
10190: IFFALSE 10204
// SaveCharacters ( Sophia , 09_Sophia ) ;
10192: LD_EXP 19
10196: PPUSH
10197: LD_STRING 09_Sophia
10199: PPUSH
10200: CALL_OW 38
// if IsOk ( Markov ) then
10204: LD_EXP 20
10208: PPUSH
10209: CALL_OW 302
10213: IFFALSE 10227
// SaveCharacters ( Markov , 09_Markov ) ;
10215: LD_EXP 20
10219: PPUSH
10220: LD_STRING 09_Markov
10222: PPUSH
10223: CALL_OW 38
// if IsOk ( Olaf ) then
10227: LD_EXP 21
10231: PPUSH
10232: CALL_OW 302
10236: IFFALSE 10250
// SaveCharacters ( Olaf , 09_Olaf ) ;
10238: LD_EXP 21
10242: PPUSH
10243: LD_STRING 09_Olaf
10245: PPUSH
10246: CALL_OW 38
// if IsOk ( Kurt ) then
10250: LD_EXP 22
10254: PPUSH
10255: CALL_OW 302
10259: IFFALSE 10273
// SaveCharacters ( Kurt , 09_Kurt ) ;
10261: LD_EXP 22
10265: PPUSH
10266: LD_STRING 09_Kurt
10268: PPUSH
10269: CALL_OW 38
// if IsOk ( Aviradze ) then
10273: LD_EXP 23
10277: PPUSH
10278: CALL_OW 302
10282: IFFALSE 10296
// SaveCharacters ( Aviradze , 09_Aviradze ) ;
10284: LD_EXP 23
10288: PPUSH
10289: LD_STRING 09_Aviradze
10291: PPUSH
10292: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09_heikeSecondSquad ) ;
10296: LD_EXP 30
10300: PPUSH
10301: LD_INT 50
10303: PUSH
10304: EMPTY
10305: LIST
10306: PPUSH
10307: CALL_OW 72
10311: PPUSH
10312: LD_STRING 09_heikeSecondSquad
10314: PPUSH
10315: CALL_OW 38
// sib := 0 ;
10319: LD_ADDR_VAR 0 2
10323: PUSH
10324: LD_INT 0
10326: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
10327: LD_ADDR_VAR 0 1
10331: PUSH
10332: LD_INT 22
10334: PUSH
10335: LD_INT 2
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 2
10344: PUSH
10345: LD_INT 30
10347: PUSH
10348: LD_INT 0
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 30
10357: PUSH
10358: LD_INT 1
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PPUSH
10374: CALL_OW 69
10378: PUSH
10379: FOR_IN
10380: IFFALSE 10413
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10382: LD_ADDR_VAR 0 2
10386: PUSH
10387: LD_VAR 0 2
10391: PUSH
10392: LD_VAR 0 1
10396: PPUSH
10397: CALL_OW 274
10401: PPUSH
10402: LD_INT 3
10404: PPUSH
10405: CALL_OW 275
10409: PLUS
10410: ST_TO_ADDR
10411: GO 10379
10413: POP
10414: POP
// if sib >= sibToCollect then
10415: LD_VAR 0 2
10419: PUSH
10420: LD_EXP 7
10424: GREATEREQUAL
10425: IFFALSE 10439
// AddMedal ( med1 , 1 ) else
10427: LD_STRING med1
10429: PPUSH
10430: LD_INT 1
10432: PPUSH
10433: CALL_OW 101
10437: GO 10450
// AddMedal ( med1 , - 1 ) ;
10439: LD_STRING med1
10441: PPUSH
10442: LD_INT 1
10444: NEG
10445: PPUSH
10446: CALL_OW 101
// if apeDriver or kamikazeTrained then
10450: LD_EXP 8
10454: PUSH
10455: LD_EXP 6
10459: OR
10460: IFFALSE 10474
// AddMedal ( med2 , 1 ) else
10462: LD_STRING med2
10464: PPUSH
10465: LD_INT 1
10467: PPUSH
10468: CALL_OW 101
10472: GO 10485
// AddMedal ( med2 , - 1 ) ;
10474: LD_STRING med2
10476: PPUSH
10477: LD_INT 1
10479: NEG
10480: PPUSH
10481: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
10485: LD_EXP 14
10489: PUSH
10490: LD_EXP 15
10494: PUSH
10495: LD_EXP 16
10499: PUSH
10500: LD_EXP 17
10504: PUSH
10505: LD_EXP 18
10509: PUSH
10510: LD_EXP 19
10514: PUSH
10515: LD_EXP 20
10519: PUSH
10520: LD_EXP 21
10524: PUSH
10525: LD_EXP 22
10529: PUSH
10530: LD_EXP 23
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: PPUSH
10547: LD_INT 50
10549: PUSH
10550: EMPTY
10551: LIST
10552: PPUSH
10553: CALL_OW 72
10557: NOT
10558: IFFALSE 10573
// AddMedal ( med3 , - 1 ) else
10560: LD_STRING med3
10562: PPUSH
10563: LD_INT 1
10565: NEG
10566: PPUSH
10567: CALL_OW 101
10571: GO 10583
// AddMedal ( med3 , 1 ) ;
10573: LD_STRING med3
10575: PPUSH
10576: LD_INT 1
10578: PPUSH
10579: CALL_OW 101
// GiveMedals ( MAIN ) ;
10583: LD_STRING MAIN
10585: PPUSH
10586: CALL_OW 102
// YouWin ;
10590: CALL_OW 103
// DialogueOff ;
10594: CALL_OW 7
// end ; end_of_file
10598: PPOPN 2
10600: END
// every 0 0$30 + 0 0$20 trigger playerInBase do var i , tmp ;
10601: LD_EXP 5
10605: IFFALSE 10706
10607: GO 10609
10609: DISABLE
10610: LD_INT 0
10612: PPUSH
10613: PPUSH
// begin enable ;
10614: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
10615: LD_ADDR_VAR 0 2
10619: PUSH
10620: LD_INT 9
10622: PUSH
10623: LD_INT 10
10625: PUSH
10626: LD_INT 11
10628: PUSH
10629: LD_INT 12
10631: PUSH
10632: LD_INT 13
10634: PUSH
10635: LD_INT 14
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
10646: LD_ADDR_VAR 0 1
10650: PUSH
10651: LD_VAR 0 2
10655: PUSH
10656: LD_INT 1
10658: PPUSH
10659: LD_INT 6
10661: PPUSH
10662: CALL_OW 12
10666: ARRAY
10667: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 6 then
10668: LD_VAR 0 1
10672: PPUSH
10673: CALL_OW 435
10677: PUSH
10678: LD_INT 6
10680: LESS
10681: IFFALSE 10706
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
10683: LD_INT 1
10685: PPUSH
10686: LD_INT 5
10688: PPUSH
10689: CALL_OW 12
10693: PPUSH
10694: LD_VAR 0 1
10698: PPUSH
10699: LD_INT 1
10701: PPUSH
10702: CALL_OW 55
// end ; end_of_file
10706: PPOPN 2
10708: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10709: LD_INT 0
10711: PPUSH
10712: PPUSH
// if exist_mode then
10713: LD_VAR 0 2
10717: IFFALSE 10742
// unit := CreateCharacter ( prefix & ident ) else
10719: LD_ADDR_VAR 0 5
10723: PUSH
10724: LD_VAR 0 3
10728: PUSH
10729: LD_VAR 0 1
10733: STR
10734: PPUSH
10735: CALL_OW 34
10739: ST_TO_ADDR
10740: GO 10757
// unit := NewCharacter ( ident ) ;
10742: LD_ADDR_VAR 0 5
10746: PUSH
10747: LD_VAR 0 1
10751: PPUSH
10752: CALL_OW 25
10756: ST_TO_ADDR
// result := unit ;
10757: LD_ADDR_VAR 0 4
10761: PUSH
10762: LD_VAR 0 5
10766: ST_TO_ADDR
// end ;
10767: LD_VAR 0 4
10771: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10772: LD_INT 0
10774: PPUSH
10775: PPUSH
// if not side or not nation then
10776: LD_VAR 0 1
10780: NOT
10781: PUSH
10782: LD_VAR 0 2
10786: NOT
10787: OR
10788: IFFALSE 10792
// exit ;
10790: GO 11560
// case nation of nation_american :
10792: LD_VAR 0 2
10796: PUSH
10797: LD_INT 1
10799: DOUBLE
10800: EQUAL
10801: IFTRUE 10805
10803: GO 11019
10805: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10806: LD_ADDR_VAR 0 4
10810: PUSH
10811: LD_INT 35
10813: PUSH
10814: LD_INT 45
10816: PUSH
10817: LD_INT 46
10819: PUSH
10820: LD_INT 47
10822: PUSH
10823: LD_INT 82
10825: PUSH
10826: LD_INT 83
10828: PUSH
10829: LD_INT 84
10831: PUSH
10832: LD_INT 85
10834: PUSH
10835: LD_INT 86
10837: PUSH
10838: LD_INT 1
10840: PUSH
10841: LD_INT 2
10843: PUSH
10844: LD_INT 6
10846: PUSH
10847: LD_INT 15
10849: PUSH
10850: LD_INT 16
10852: PUSH
10853: LD_INT 7
10855: PUSH
10856: LD_INT 12
10858: PUSH
10859: LD_INT 13
10861: PUSH
10862: LD_INT 10
10864: PUSH
10865: LD_INT 14
10867: PUSH
10868: LD_INT 20
10870: PUSH
10871: LD_INT 21
10873: PUSH
10874: LD_INT 22
10876: PUSH
10877: LD_INT 25
10879: PUSH
10880: LD_INT 32
10882: PUSH
10883: LD_INT 27
10885: PUSH
10886: LD_INT 36
10888: PUSH
10889: LD_INT 69
10891: PUSH
10892: LD_INT 39
10894: PUSH
10895: LD_INT 34
10897: PUSH
10898: LD_INT 40
10900: PUSH
10901: LD_INT 48
10903: PUSH
10904: LD_INT 49
10906: PUSH
10907: LD_INT 50
10909: PUSH
10910: LD_INT 51
10912: PUSH
10913: LD_INT 52
10915: PUSH
10916: LD_INT 53
10918: PUSH
10919: LD_INT 54
10921: PUSH
10922: LD_INT 55
10924: PUSH
10925: LD_INT 56
10927: PUSH
10928: LD_INT 57
10930: PUSH
10931: LD_INT 58
10933: PUSH
10934: LD_INT 59
10936: PUSH
10937: LD_INT 60
10939: PUSH
10940: LD_INT 61
10942: PUSH
10943: LD_INT 62
10945: PUSH
10946: LD_INT 80
10948: PUSH
10949: LD_INT 82
10951: PUSH
10952: LD_INT 83
10954: PUSH
10955: LD_INT 84
10957: PUSH
10958: LD_INT 85
10960: PUSH
10961: LD_INT 86
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: ST_TO_ADDR
11017: GO 11484
11019: LD_INT 2
11021: DOUBLE
11022: EQUAL
11023: IFTRUE 11027
11025: GO 11253
11027: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
11028: LD_ADDR_VAR 0 4
11032: PUSH
11033: LD_INT 35
11035: PUSH
11036: LD_INT 45
11038: PUSH
11039: LD_INT 46
11041: PUSH
11042: LD_INT 47
11044: PUSH
11045: LD_INT 82
11047: PUSH
11048: LD_INT 83
11050: PUSH
11051: LD_INT 84
11053: PUSH
11054: LD_INT 85
11056: PUSH
11057: LD_INT 87
11059: PUSH
11060: LD_INT 70
11062: PUSH
11063: LD_INT 1
11065: PUSH
11066: LD_INT 11
11068: PUSH
11069: LD_INT 3
11071: PUSH
11072: LD_INT 4
11074: PUSH
11075: LD_INT 5
11077: PUSH
11078: LD_INT 6
11080: PUSH
11081: LD_INT 15
11083: PUSH
11084: LD_INT 18
11086: PUSH
11087: LD_INT 7
11089: PUSH
11090: LD_INT 17
11092: PUSH
11093: LD_INT 8
11095: PUSH
11096: LD_INT 20
11098: PUSH
11099: LD_INT 21
11101: PUSH
11102: LD_INT 22
11104: PUSH
11105: LD_INT 72
11107: PUSH
11108: LD_INT 26
11110: PUSH
11111: LD_INT 69
11113: PUSH
11114: LD_INT 39
11116: PUSH
11117: LD_INT 40
11119: PUSH
11120: LD_INT 41
11122: PUSH
11123: LD_INT 42
11125: PUSH
11126: LD_INT 43
11128: PUSH
11129: LD_INT 48
11131: PUSH
11132: LD_INT 49
11134: PUSH
11135: LD_INT 50
11137: PUSH
11138: LD_INT 51
11140: PUSH
11141: LD_INT 52
11143: PUSH
11144: LD_INT 53
11146: PUSH
11147: LD_INT 54
11149: PUSH
11150: LD_INT 55
11152: PUSH
11153: LD_INT 56
11155: PUSH
11156: LD_INT 60
11158: PUSH
11159: LD_INT 61
11161: PUSH
11162: LD_INT 62
11164: PUSH
11165: LD_INT 66
11167: PUSH
11168: LD_INT 67
11170: PUSH
11171: LD_INT 68
11173: PUSH
11174: LD_INT 81
11176: PUSH
11177: LD_INT 82
11179: PUSH
11180: LD_INT 83
11182: PUSH
11183: LD_INT 84
11185: PUSH
11186: LD_INT 85
11188: PUSH
11189: LD_INT 87
11191: PUSH
11192: LD_INT 88
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: ST_TO_ADDR
11251: GO 11484
11253: LD_INT 3
11255: DOUBLE
11256: EQUAL
11257: IFTRUE 11261
11259: GO 11483
11261: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
11262: LD_ADDR_VAR 0 4
11266: PUSH
11267: LD_INT 46
11269: PUSH
11270: LD_INT 47
11272: PUSH
11273: LD_INT 1
11275: PUSH
11276: LD_INT 2
11278: PUSH
11279: LD_INT 82
11281: PUSH
11282: LD_INT 83
11284: PUSH
11285: LD_INT 84
11287: PUSH
11288: LD_INT 85
11290: PUSH
11291: LD_INT 86
11293: PUSH
11294: LD_INT 11
11296: PUSH
11297: LD_INT 9
11299: PUSH
11300: LD_INT 20
11302: PUSH
11303: LD_INT 19
11305: PUSH
11306: LD_INT 21
11308: PUSH
11309: LD_INT 24
11311: PUSH
11312: LD_INT 22
11314: PUSH
11315: LD_INT 25
11317: PUSH
11318: LD_INT 28
11320: PUSH
11321: LD_INT 29
11323: PUSH
11324: LD_INT 30
11326: PUSH
11327: LD_INT 31
11329: PUSH
11330: LD_INT 37
11332: PUSH
11333: LD_INT 38
11335: PUSH
11336: LD_INT 32
11338: PUSH
11339: LD_INT 27
11341: PUSH
11342: LD_INT 33
11344: PUSH
11345: LD_INT 69
11347: PUSH
11348: LD_INT 39
11350: PUSH
11351: LD_INT 34
11353: PUSH
11354: LD_INT 40
11356: PUSH
11357: LD_INT 71
11359: PUSH
11360: LD_INT 23
11362: PUSH
11363: LD_INT 44
11365: PUSH
11366: LD_INT 48
11368: PUSH
11369: LD_INT 49
11371: PUSH
11372: LD_INT 50
11374: PUSH
11375: LD_INT 51
11377: PUSH
11378: LD_INT 52
11380: PUSH
11381: LD_INT 53
11383: PUSH
11384: LD_INT 54
11386: PUSH
11387: LD_INT 55
11389: PUSH
11390: LD_INT 56
11392: PUSH
11393: LD_INT 57
11395: PUSH
11396: LD_INT 58
11398: PUSH
11399: LD_INT 59
11401: PUSH
11402: LD_INT 63
11404: PUSH
11405: LD_INT 64
11407: PUSH
11408: LD_INT 65
11410: PUSH
11411: LD_INT 82
11413: PUSH
11414: LD_INT 83
11416: PUSH
11417: LD_INT 84
11419: PUSH
11420: LD_INT 85
11422: PUSH
11423: LD_INT 86
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: ST_TO_ADDR
11481: GO 11484
11483: POP
// if state > - 1 and state < 3 then
11484: LD_VAR 0 3
11488: PUSH
11489: LD_INT 1
11491: NEG
11492: GREATER
11493: PUSH
11494: LD_VAR 0 3
11498: PUSH
11499: LD_INT 3
11501: LESS
11502: AND
11503: IFFALSE 11560
// for i in result do
11505: LD_ADDR_VAR 0 5
11509: PUSH
11510: LD_VAR 0 4
11514: PUSH
11515: FOR_IN
11516: IFFALSE 11558
// if GetTech ( i , side ) <> state then
11518: LD_VAR 0 5
11522: PPUSH
11523: LD_VAR 0 1
11527: PPUSH
11528: CALL_OW 321
11532: PUSH
11533: LD_VAR 0 3
11537: NONEQUAL
11538: IFFALSE 11556
// result := result diff i ;
11540: LD_ADDR_VAR 0 4
11544: PUSH
11545: LD_VAR 0 4
11549: PUSH
11550: LD_VAR 0 5
11554: DIFF
11555: ST_TO_ADDR
11556: GO 11515
11558: POP
11559: POP
// end ;
11560: LD_VAR 0 4
11564: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11565: LD_INT 0
11567: PPUSH
11568: PPUSH
11569: PPUSH
// result := true ;
11570: LD_ADDR_VAR 0 3
11574: PUSH
11575: LD_INT 1
11577: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11578: LD_ADDR_VAR 0 5
11582: PUSH
11583: LD_VAR 0 2
11587: PPUSH
11588: CALL_OW 480
11592: ST_TO_ADDR
// if not tmp then
11593: LD_VAR 0 5
11597: NOT
11598: IFFALSE 11602
// exit ;
11600: GO 11651
// for i in tmp do
11602: LD_ADDR_VAR 0 4
11606: PUSH
11607: LD_VAR 0 5
11611: PUSH
11612: FOR_IN
11613: IFFALSE 11649
// if GetTech ( i , side ) <> state_researched then
11615: LD_VAR 0 4
11619: PPUSH
11620: LD_VAR 0 1
11624: PPUSH
11625: CALL_OW 321
11629: PUSH
11630: LD_INT 2
11632: NONEQUAL
11633: IFFALSE 11647
// begin result := false ;
11635: LD_ADDR_VAR 0 3
11639: PUSH
11640: LD_INT 0
11642: ST_TO_ADDR
// exit ;
11643: POP
11644: POP
11645: GO 11651
// end ;
11647: GO 11612
11649: POP
11650: POP
// end ;
11651: LD_VAR 0 3
11655: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11656: LD_INT 0
11658: PPUSH
11659: PPUSH
11660: PPUSH
11661: PPUSH
11662: PPUSH
11663: PPUSH
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
11668: PPUSH
11669: PPUSH
11670: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11671: LD_VAR 0 1
11675: NOT
11676: PUSH
11677: LD_VAR 0 1
11681: PPUSH
11682: CALL_OW 257
11686: PUSH
11687: LD_INT 9
11689: NONEQUAL
11690: OR
11691: IFFALSE 11695
// exit ;
11693: GO 12268
// side := GetSide ( unit ) ;
11695: LD_ADDR_VAR 0 9
11699: PUSH
11700: LD_VAR 0 1
11704: PPUSH
11705: CALL_OW 255
11709: ST_TO_ADDR
// tech_space := tech_spacanom ;
11710: LD_ADDR_VAR 0 12
11714: PUSH
11715: LD_INT 29
11717: ST_TO_ADDR
// tech_time := tech_taurad ;
11718: LD_ADDR_VAR 0 13
11722: PUSH
11723: LD_INT 28
11725: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11726: LD_ADDR_VAR 0 11
11730: PUSH
11731: LD_VAR 0 1
11735: PPUSH
11736: CALL_OW 310
11740: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11741: LD_VAR 0 11
11745: PPUSH
11746: CALL_OW 247
11750: PUSH
11751: LD_INT 2
11753: EQUAL
11754: IFFALSE 11758
// exit ;
11756: GO 12268
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11758: LD_ADDR_VAR 0 8
11762: PUSH
11763: LD_INT 81
11765: PUSH
11766: LD_VAR 0 9
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 3
11777: PUSH
11778: LD_INT 21
11780: PUSH
11781: LD_INT 3
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PPUSH
11796: CALL_OW 69
11800: ST_TO_ADDR
// if not tmp then
11801: LD_VAR 0 8
11805: NOT
11806: IFFALSE 11810
// exit ;
11808: GO 12268
// if in_unit then
11810: LD_VAR 0 11
11814: IFFALSE 11838
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11816: LD_ADDR_VAR 0 10
11820: PUSH
11821: LD_VAR 0 8
11825: PPUSH
11826: LD_VAR 0 11
11830: PPUSH
11831: CALL_OW 74
11835: ST_TO_ADDR
11836: GO 11858
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11838: LD_ADDR_VAR 0 10
11842: PUSH
11843: LD_VAR 0 8
11847: PPUSH
11848: LD_VAR 0 1
11852: PPUSH
11853: CALL_OW 74
11857: ST_TO_ADDR
// if not enemy then
11858: LD_VAR 0 10
11862: NOT
11863: IFFALSE 11867
// exit ;
11865: GO 12268
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11867: LD_VAR 0 11
11871: PUSH
11872: LD_VAR 0 11
11876: PPUSH
11877: LD_VAR 0 10
11881: PPUSH
11882: CALL_OW 296
11886: PUSH
11887: LD_INT 13
11889: GREATER
11890: AND
11891: PUSH
11892: LD_VAR 0 1
11896: PPUSH
11897: LD_VAR 0 10
11901: PPUSH
11902: CALL_OW 296
11906: PUSH
11907: LD_INT 12
11909: GREATER
11910: OR
11911: IFFALSE 11915
// exit ;
11913: GO 12268
// missile := [ 1 ] ;
11915: LD_ADDR_VAR 0 14
11919: PUSH
11920: LD_INT 1
11922: PUSH
11923: EMPTY
11924: LIST
11925: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11926: LD_VAR 0 9
11930: PPUSH
11931: LD_VAR 0 12
11935: PPUSH
11936: CALL_OW 325
11940: IFFALSE 11969
// missile := Replace ( missile , missile + 1 , 2 ) ;
11942: LD_ADDR_VAR 0 14
11946: PUSH
11947: LD_VAR 0 14
11951: PPUSH
11952: LD_VAR 0 14
11956: PUSH
11957: LD_INT 1
11959: PLUS
11960: PPUSH
11961: LD_INT 2
11963: PPUSH
11964: CALL_OW 1
11968: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11969: LD_VAR 0 9
11973: PPUSH
11974: LD_VAR 0 13
11978: PPUSH
11979: CALL_OW 325
11983: PUSH
11984: LD_VAR 0 10
11988: PPUSH
11989: CALL_OW 255
11993: PPUSH
11994: LD_VAR 0 13
11998: PPUSH
11999: CALL_OW 325
12003: NOT
12004: AND
12005: IFFALSE 12034
// missile := Replace ( missile , missile + 1 , 3 ) ;
12007: LD_ADDR_VAR 0 14
12011: PUSH
12012: LD_VAR 0 14
12016: PPUSH
12017: LD_VAR 0 14
12021: PUSH
12022: LD_INT 1
12024: PLUS
12025: PPUSH
12026: LD_INT 3
12028: PPUSH
12029: CALL_OW 1
12033: ST_TO_ADDR
// if missile < 2 then
12034: LD_VAR 0 14
12038: PUSH
12039: LD_INT 2
12041: LESS
12042: IFFALSE 12046
// exit ;
12044: GO 12268
// x := GetX ( enemy ) ;
12046: LD_ADDR_VAR 0 4
12050: PUSH
12051: LD_VAR 0 10
12055: PPUSH
12056: CALL_OW 250
12060: ST_TO_ADDR
// y := GetY ( enemy ) ;
12061: LD_ADDR_VAR 0 5
12065: PUSH
12066: LD_VAR 0 10
12070: PPUSH
12071: CALL_OW 251
12075: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12076: LD_ADDR_VAR 0 6
12080: PUSH
12081: LD_VAR 0 4
12085: PUSH
12086: LD_INT 1
12088: NEG
12089: PPUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 12
12097: PLUS
12098: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12099: LD_ADDR_VAR 0 7
12103: PUSH
12104: LD_VAR 0 5
12108: PUSH
12109: LD_INT 1
12111: NEG
12112: PPUSH
12113: LD_INT 1
12115: PPUSH
12116: CALL_OW 12
12120: PLUS
12121: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12122: LD_VAR 0 6
12126: PPUSH
12127: LD_VAR 0 7
12131: PPUSH
12132: CALL_OW 488
12136: NOT
12137: IFFALSE 12159
// begin _x := x ;
12139: LD_ADDR_VAR 0 6
12143: PUSH
12144: LD_VAR 0 4
12148: ST_TO_ADDR
// _y := y ;
12149: LD_ADDR_VAR 0 7
12153: PUSH
12154: LD_VAR 0 5
12158: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: LD_INT 1
12166: PPUSH
12167: LD_VAR 0 14
12171: PPUSH
12172: CALL_OW 12
12176: ST_TO_ADDR
// case i of 1 :
12177: LD_VAR 0 3
12181: PUSH
12182: LD_INT 1
12184: DOUBLE
12185: EQUAL
12186: IFTRUE 12190
12188: GO 12207
12190: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12191: LD_VAR 0 1
12195: PPUSH
12196: LD_VAR 0 10
12200: PPUSH
12201: CALL_OW 115
12205: GO 12268
12207: LD_INT 2
12209: DOUBLE
12210: EQUAL
12211: IFTRUE 12215
12213: GO 12237
12215: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12216: LD_VAR 0 1
12220: PPUSH
12221: LD_VAR 0 6
12225: PPUSH
12226: LD_VAR 0 7
12230: PPUSH
12231: CALL_OW 153
12235: GO 12268
12237: LD_INT 3
12239: DOUBLE
12240: EQUAL
12241: IFTRUE 12245
12243: GO 12267
12245: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12246: LD_VAR 0 1
12250: PPUSH
12251: LD_VAR 0 6
12255: PPUSH
12256: LD_VAR 0 7
12260: PPUSH
12261: CALL_OW 154
12265: GO 12268
12267: POP
// end ;
12268: LD_VAR 0 2
12272: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12273: LD_INT 0
12275: PPUSH
12276: PPUSH
12277: PPUSH
12278: PPUSH
12279: PPUSH
12280: PPUSH
// if not unit or not building then
12281: LD_VAR 0 1
12285: NOT
12286: PUSH
12287: LD_VAR 0 2
12291: NOT
12292: OR
12293: IFFALSE 12297
// exit ;
12295: GO 12455
// x := GetX ( building ) ;
12297: LD_ADDR_VAR 0 5
12301: PUSH
12302: LD_VAR 0 2
12306: PPUSH
12307: CALL_OW 250
12311: ST_TO_ADDR
// y := GetY ( building ) ;
12312: LD_ADDR_VAR 0 6
12316: PUSH
12317: LD_VAR 0 2
12321: PPUSH
12322: CALL_OW 251
12326: ST_TO_ADDR
// for i = 0 to 5 do
12327: LD_ADDR_VAR 0 4
12331: PUSH
12332: DOUBLE
12333: LD_INT 0
12335: DEC
12336: ST_TO_ADDR
12337: LD_INT 5
12339: PUSH
12340: FOR_TO
12341: IFFALSE 12453
// begin _x := ShiftX ( x , i , 3 ) ;
12343: LD_ADDR_VAR 0 7
12347: PUSH
12348: LD_VAR 0 5
12352: PPUSH
12353: LD_VAR 0 4
12357: PPUSH
12358: LD_INT 3
12360: PPUSH
12361: CALL_OW 272
12365: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12366: LD_ADDR_VAR 0 8
12370: PUSH
12371: LD_VAR 0 6
12375: PPUSH
12376: LD_VAR 0 4
12380: PPUSH
12381: LD_INT 3
12383: PPUSH
12384: CALL_OW 273
12388: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12389: LD_VAR 0 7
12393: PPUSH
12394: LD_VAR 0 8
12398: PPUSH
12399: CALL_OW 488
12403: NOT
12404: IFFALSE 12408
// continue ;
12406: GO 12340
// if HexInfo ( _x , _y ) = 0 then
12408: LD_VAR 0 7
12412: PPUSH
12413: LD_VAR 0 8
12417: PPUSH
12418: CALL_OW 428
12422: PUSH
12423: LD_INT 0
12425: EQUAL
12426: IFFALSE 12451
// begin ComMoveXY ( unit , _x , _y ) ;
12428: LD_VAR 0 1
12432: PPUSH
12433: LD_VAR 0 7
12437: PPUSH
12438: LD_VAR 0 8
12442: PPUSH
12443: CALL_OW 111
// exit ;
12447: POP
12448: POP
12449: GO 12455
// end ; end ;
12451: GO 12340
12453: POP
12454: POP
// end ;
12455: LD_VAR 0 3
12459: RET
// export function ScanBase ( side , base_area ) ; begin
12460: LD_INT 0
12462: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12463: LD_ADDR_VAR 0 3
12467: PUSH
12468: LD_VAR 0 2
12472: PPUSH
12473: LD_INT 81
12475: PUSH
12476: LD_VAR 0 1
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PPUSH
12485: CALL_OW 70
12489: ST_TO_ADDR
// end ;
12490: LD_VAR 0 3
12494: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12495: LD_INT 0
12497: PPUSH
12498: PPUSH
12499: PPUSH
12500: PPUSH
// result := false ;
12501: LD_ADDR_VAR 0 2
12505: PUSH
12506: LD_INT 0
12508: ST_TO_ADDR
// side := GetSide ( unit ) ;
12509: LD_ADDR_VAR 0 3
12513: PUSH
12514: LD_VAR 0 1
12518: PPUSH
12519: CALL_OW 255
12523: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12524: LD_ADDR_VAR 0 4
12528: PUSH
12529: LD_VAR 0 1
12533: PPUSH
12534: CALL_OW 248
12538: ST_TO_ADDR
// case nat of 1 :
12539: LD_VAR 0 4
12543: PUSH
12544: LD_INT 1
12546: DOUBLE
12547: EQUAL
12548: IFTRUE 12552
12550: GO 12563
12552: POP
// tech := tech_lassight ; 2 :
12553: LD_ADDR_VAR 0 5
12557: PUSH
12558: LD_INT 12
12560: ST_TO_ADDR
12561: GO 12602
12563: LD_INT 2
12565: DOUBLE
12566: EQUAL
12567: IFTRUE 12571
12569: GO 12582
12571: POP
// tech := tech_mortar ; 3 :
12572: LD_ADDR_VAR 0 5
12576: PUSH
12577: LD_INT 41
12579: ST_TO_ADDR
12580: GO 12602
12582: LD_INT 3
12584: DOUBLE
12585: EQUAL
12586: IFTRUE 12590
12588: GO 12601
12590: POP
// tech := tech_bazooka ; end ;
12591: LD_ADDR_VAR 0 5
12595: PUSH
12596: LD_INT 44
12598: ST_TO_ADDR
12599: GO 12602
12601: POP
// if Researched ( side , tech ) then
12602: LD_VAR 0 3
12606: PPUSH
12607: LD_VAR 0 5
12611: PPUSH
12612: CALL_OW 325
12616: IFFALSE 12643
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12618: LD_ADDR_VAR 0 2
12622: PUSH
12623: LD_INT 5
12625: PUSH
12626: LD_INT 8
12628: PUSH
12629: LD_INT 9
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: PUSH
12637: LD_VAR 0 4
12641: ARRAY
12642: ST_TO_ADDR
// end ;
12643: LD_VAR 0 2
12647: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12648: LD_INT 0
12650: PPUSH
12651: PPUSH
12652: PPUSH
// if not mines then
12653: LD_VAR 0 2
12657: NOT
12658: IFFALSE 12662
// exit ;
12660: GO 12806
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12662: LD_ADDR_VAR 0 5
12666: PUSH
12667: LD_INT 81
12669: PUSH
12670: LD_VAR 0 1
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 3
12681: PUSH
12682: LD_INT 21
12684: PUSH
12685: LD_INT 3
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 69
12704: ST_TO_ADDR
// for i in mines do
12705: LD_ADDR_VAR 0 4
12709: PUSH
12710: LD_VAR 0 2
12714: PUSH
12715: FOR_IN
12716: IFFALSE 12804
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12718: LD_VAR 0 4
12722: PUSH
12723: LD_INT 1
12725: ARRAY
12726: PPUSH
12727: LD_VAR 0 4
12731: PUSH
12732: LD_INT 2
12734: ARRAY
12735: PPUSH
12736: CALL_OW 458
12740: NOT
12741: IFFALSE 12745
// continue ;
12743: GO 12715
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12745: LD_VAR 0 4
12749: PUSH
12750: LD_INT 1
12752: ARRAY
12753: PPUSH
12754: LD_VAR 0 4
12758: PUSH
12759: LD_INT 2
12761: ARRAY
12762: PPUSH
12763: CALL_OW 428
12767: PUSH
12768: LD_VAR 0 5
12772: IN
12773: IFFALSE 12802
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12775: LD_VAR 0 4
12779: PUSH
12780: LD_INT 1
12782: ARRAY
12783: PPUSH
12784: LD_VAR 0 4
12788: PUSH
12789: LD_INT 2
12791: ARRAY
12792: PPUSH
12793: LD_VAR 0 1
12797: PPUSH
12798: CALL_OW 456
// end ;
12802: GO 12715
12804: POP
12805: POP
// end ;
12806: LD_VAR 0 3
12810: RET
// export function Count ( array ) ; begin
12811: LD_INT 0
12813: PPUSH
// result := array + 0 ;
12814: LD_ADDR_VAR 0 2
12818: PUSH
12819: LD_VAR 0 1
12823: PUSH
12824: LD_INT 0
12826: PLUS
12827: ST_TO_ADDR
// end ;
12828: LD_VAR 0 2
12832: RET
// export function IsEmpty ( building ) ; begin
12833: LD_INT 0
12835: PPUSH
// if not building then
12836: LD_VAR 0 1
12840: NOT
12841: IFFALSE 12845
// exit ;
12843: GO 12888
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12845: LD_ADDR_VAR 0 2
12849: PUSH
12850: LD_VAR 0 1
12854: PUSH
12855: LD_INT 22
12857: PUSH
12858: LD_VAR 0 1
12862: PPUSH
12863: CALL_OW 255
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 58
12874: PUSH
12875: EMPTY
12876: LIST
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PPUSH
12882: CALL_OW 69
12886: IN
12887: ST_TO_ADDR
// end ;
12888: LD_VAR 0 2
12892: RET
// export function IsNotFull ( building ) ; var places ; begin
12893: LD_INT 0
12895: PPUSH
12896: PPUSH
// if not building then
12897: LD_VAR 0 1
12901: NOT
12902: IFFALSE 12906
// exit ;
12904: GO 12934
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12906: LD_ADDR_VAR 0 2
12910: PUSH
12911: LD_VAR 0 1
12915: PPUSH
12916: LD_INT 3
12918: PUSH
12919: LD_INT 62
12921: PUSH
12922: EMPTY
12923: LIST
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PPUSH
12929: CALL_OW 72
12933: ST_TO_ADDR
// end ;
12934: LD_VAR 0 2
12938: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12939: LD_INT 0
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
// tmp := [ ] ;
12945: LD_ADDR_VAR 0 3
12949: PUSH
12950: EMPTY
12951: ST_TO_ADDR
// list := [ ] ;
12952: LD_ADDR_VAR 0 5
12956: PUSH
12957: EMPTY
12958: ST_TO_ADDR
// for i = 16 to 25 do
12959: LD_ADDR_VAR 0 4
12963: PUSH
12964: DOUBLE
12965: LD_INT 16
12967: DEC
12968: ST_TO_ADDR
12969: LD_INT 25
12971: PUSH
12972: FOR_TO
12973: IFFALSE 13046
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12975: LD_ADDR_VAR 0 3
12979: PUSH
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 22
12987: PUSH
12988: LD_VAR 0 1
12992: PPUSH
12993: CALL_OW 255
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 91
13004: PUSH
13005: LD_VAR 0 1
13009: PUSH
13010: LD_INT 6
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 30
13020: PUSH
13021: LD_VAR 0 4
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: PPUSH
13038: CALL_OW 69
13042: ADD
13043: ST_TO_ADDR
13044: GO 12972
13046: POP
13047: POP
// for i = 1 to tmp do
13048: LD_ADDR_VAR 0 4
13052: PUSH
13053: DOUBLE
13054: LD_INT 1
13056: DEC
13057: ST_TO_ADDR
13058: LD_VAR 0 3
13062: PUSH
13063: FOR_TO
13064: IFFALSE 13152
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13066: LD_ADDR_VAR 0 5
13070: PUSH
13071: LD_VAR 0 5
13075: PUSH
13076: LD_VAR 0 3
13080: PUSH
13081: LD_VAR 0 4
13085: ARRAY
13086: PPUSH
13087: CALL_OW 266
13091: PUSH
13092: LD_VAR 0 3
13096: PUSH
13097: LD_VAR 0 4
13101: ARRAY
13102: PPUSH
13103: CALL_OW 250
13107: PUSH
13108: LD_VAR 0 3
13112: PUSH
13113: LD_VAR 0 4
13117: ARRAY
13118: PPUSH
13119: CALL_OW 251
13123: PUSH
13124: LD_VAR 0 3
13128: PUSH
13129: LD_VAR 0 4
13133: ARRAY
13134: PPUSH
13135: CALL_OW 254
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: ADD
13149: ST_TO_ADDR
13150: GO 13063
13152: POP
13153: POP
// result := list ;
13154: LD_ADDR_VAR 0 2
13158: PUSH
13159: LD_VAR 0 5
13163: ST_TO_ADDR
// end ;
13164: LD_VAR 0 2
13168: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13169: LD_INT 0
13171: PPUSH
13172: PPUSH
13173: PPUSH
13174: PPUSH
13175: PPUSH
13176: PPUSH
13177: PPUSH
// if not factory then
13178: LD_VAR 0 1
13182: NOT
13183: IFFALSE 13187
// exit ;
13185: GO 13780
// if control = control_apeman then
13187: LD_VAR 0 4
13191: PUSH
13192: LD_INT 5
13194: EQUAL
13195: IFFALSE 13304
// begin tmp := UnitsInside ( factory ) ;
13197: LD_ADDR_VAR 0 8
13201: PUSH
13202: LD_VAR 0 1
13206: PPUSH
13207: CALL_OW 313
13211: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13212: LD_VAR 0 8
13216: PPUSH
13217: LD_INT 25
13219: PUSH
13220: LD_INT 12
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 72
13231: NOT
13232: IFFALSE 13242
// control := control_manual ;
13234: LD_ADDR_VAR 0 4
13238: PUSH
13239: LD_INT 1
13241: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13242: LD_ADDR_VAR 0 8
13246: PUSH
13247: LD_VAR 0 1
13251: PPUSH
13252: CALL 12939 0 1
13256: ST_TO_ADDR
// if tmp then
13257: LD_VAR 0 8
13261: IFFALSE 13304
// begin for i in tmp do
13263: LD_ADDR_VAR 0 7
13267: PUSH
13268: LD_VAR 0 8
13272: PUSH
13273: FOR_IN
13274: IFFALSE 13302
// if i [ 1 ] = b_ext_radio then
13276: LD_VAR 0 7
13280: PUSH
13281: LD_INT 1
13283: ARRAY
13284: PUSH
13285: LD_INT 22
13287: EQUAL
13288: IFFALSE 13300
// begin control := control_remote ;
13290: LD_ADDR_VAR 0 4
13294: PUSH
13295: LD_INT 2
13297: ST_TO_ADDR
// break ;
13298: GO 13302
// end ;
13300: GO 13273
13302: POP
13303: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13304: LD_VAR 0 1
13308: PPUSH
13309: LD_VAR 0 2
13313: PPUSH
13314: LD_VAR 0 3
13318: PPUSH
13319: LD_VAR 0 4
13323: PPUSH
13324: LD_VAR 0 5
13328: PPUSH
13329: CALL_OW 448
13333: IFFALSE 13368
// begin result := [ chassis , engine , control , weapon ] ;
13335: LD_ADDR_VAR 0 6
13339: PUSH
13340: LD_VAR 0 2
13344: PUSH
13345: LD_VAR 0 3
13349: PUSH
13350: LD_VAR 0 4
13354: PUSH
13355: LD_VAR 0 5
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: ST_TO_ADDR
// exit ;
13366: GO 13780
// end ; _chassis := AvailableChassisList ( factory ) ;
13368: LD_ADDR_VAR 0 9
13372: PUSH
13373: LD_VAR 0 1
13377: PPUSH
13378: CALL_OW 475
13382: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13383: LD_ADDR_VAR 0 11
13387: PUSH
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 476
13397: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13398: LD_ADDR_VAR 0 12
13402: PUSH
13403: LD_VAR 0 1
13407: PPUSH
13408: CALL_OW 477
13412: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13413: LD_ADDR_VAR 0 10
13417: PUSH
13418: LD_VAR 0 1
13422: PPUSH
13423: CALL_OW 478
13427: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13428: LD_VAR 0 9
13432: NOT
13433: PUSH
13434: LD_VAR 0 11
13438: NOT
13439: OR
13440: PUSH
13441: LD_VAR 0 12
13445: NOT
13446: OR
13447: PUSH
13448: LD_VAR 0 10
13452: NOT
13453: OR
13454: IFFALSE 13489
// begin result := [ chassis , engine , control , weapon ] ;
13456: LD_ADDR_VAR 0 6
13460: PUSH
13461: LD_VAR 0 2
13465: PUSH
13466: LD_VAR 0 3
13470: PUSH
13471: LD_VAR 0 4
13475: PUSH
13476: LD_VAR 0 5
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: ST_TO_ADDR
// exit ;
13487: GO 13780
// end ; if not chassis in _chassis then
13489: LD_VAR 0 2
13493: PUSH
13494: LD_VAR 0 9
13498: IN
13499: NOT
13500: IFFALSE 13526
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13502: LD_ADDR_VAR 0 2
13506: PUSH
13507: LD_VAR 0 9
13511: PUSH
13512: LD_INT 1
13514: PPUSH
13515: LD_VAR 0 9
13519: PPUSH
13520: CALL_OW 12
13524: ARRAY
13525: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13526: LD_VAR 0 2
13530: PPUSH
13531: LD_VAR 0 3
13535: PPUSH
13536: CALL 13785 0 2
13540: NOT
13541: IFFALSE 13600
// repeat engine := _engine [ 1 ] ;
13543: LD_ADDR_VAR 0 3
13547: PUSH
13548: LD_VAR 0 11
13552: PUSH
13553: LD_INT 1
13555: ARRAY
13556: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13557: LD_ADDR_VAR 0 11
13561: PUSH
13562: LD_VAR 0 11
13566: PPUSH
13567: LD_INT 1
13569: PPUSH
13570: CALL_OW 3
13574: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13575: LD_VAR 0 2
13579: PPUSH
13580: LD_VAR 0 3
13584: PPUSH
13585: CALL 13785 0 2
13589: PUSH
13590: LD_VAR 0 11
13594: PUSH
13595: EMPTY
13596: EQUAL
13597: OR
13598: IFFALSE 13543
// if not control in _control then
13600: LD_VAR 0 4
13604: PUSH
13605: LD_VAR 0 12
13609: IN
13610: NOT
13611: IFFALSE 13637
// control := _control [ rand ( 1 , _control ) ] ;
13613: LD_ADDR_VAR 0 4
13617: PUSH
13618: LD_VAR 0 12
13622: PUSH
13623: LD_INT 1
13625: PPUSH
13626: LD_VAR 0 12
13630: PPUSH
13631: CALL_OW 12
13635: ARRAY
13636: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13637: LD_VAR 0 2
13641: PPUSH
13642: LD_VAR 0 5
13646: PPUSH
13647: CALL 14005 0 2
13651: NOT
13652: IFFALSE 13711
// repeat weapon := _weapon [ 1 ] ;
13654: LD_ADDR_VAR 0 5
13658: PUSH
13659: LD_VAR 0 10
13663: PUSH
13664: LD_INT 1
13666: ARRAY
13667: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13668: LD_ADDR_VAR 0 10
13672: PUSH
13673: LD_VAR 0 10
13677: PPUSH
13678: LD_INT 1
13680: PPUSH
13681: CALL_OW 3
13685: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13686: LD_VAR 0 2
13690: PPUSH
13691: LD_VAR 0 5
13695: PPUSH
13696: CALL 14005 0 2
13700: PUSH
13701: LD_VAR 0 10
13705: PUSH
13706: EMPTY
13707: EQUAL
13708: OR
13709: IFFALSE 13654
// result := [ ] ;
13711: LD_ADDR_VAR 0 6
13715: PUSH
13716: EMPTY
13717: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13718: LD_VAR 0 1
13722: PPUSH
13723: LD_VAR 0 2
13727: PPUSH
13728: LD_VAR 0 3
13732: PPUSH
13733: LD_VAR 0 4
13737: PPUSH
13738: LD_VAR 0 5
13742: PPUSH
13743: CALL_OW 448
13747: IFFALSE 13780
// result := [ chassis , engine , control , weapon ] ;
13749: LD_ADDR_VAR 0 6
13753: PUSH
13754: LD_VAR 0 2
13758: PUSH
13759: LD_VAR 0 3
13763: PUSH
13764: LD_VAR 0 4
13768: PUSH
13769: LD_VAR 0 5
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: ST_TO_ADDR
// end ;
13780: LD_VAR 0 6
13784: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13785: LD_INT 0
13787: PPUSH
// if not chassis or not engine then
13788: LD_VAR 0 1
13792: NOT
13793: PUSH
13794: LD_VAR 0 2
13798: NOT
13799: OR
13800: IFFALSE 13804
// exit ;
13802: GO 14000
// case engine of engine_solar :
13804: LD_VAR 0 2
13808: PUSH
13809: LD_INT 2
13811: DOUBLE
13812: EQUAL
13813: IFTRUE 13817
13815: GO 13855
13817: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13818: LD_ADDR_VAR 0 3
13822: PUSH
13823: LD_INT 11
13825: PUSH
13826: LD_INT 12
13828: PUSH
13829: LD_INT 13
13831: PUSH
13832: LD_INT 14
13834: PUSH
13835: LD_INT 1
13837: PUSH
13838: LD_INT 2
13840: PUSH
13841: LD_INT 3
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: ST_TO_ADDR
13853: GO 13984
13855: LD_INT 1
13857: DOUBLE
13858: EQUAL
13859: IFTRUE 13863
13861: GO 13925
13863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13864: LD_ADDR_VAR 0 3
13868: PUSH
13869: LD_INT 11
13871: PUSH
13872: LD_INT 12
13874: PUSH
13875: LD_INT 13
13877: PUSH
13878: LD_INT 14
13880: PUSH
13881: LD_INT 1
13883: PUSH
13884: LD_INT 2
13886: PUSH
13887: LD_INT 3
13889: PUSH
13890: LD_INT 4
13892: PUSH
13893: LD_INT 5
13895: PUSH
13896: LD_INT 21
13898: PUSH
13899: LD_INT 23
13901: PUSH
13902: LD_INT 22
13904: PUSH
13905: LD_INT 24
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: ST_TO_ADDR
13923: GO 13984
13925: LD_INT 3
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 13983
13933: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13934: LD_ADDR_VAR 0 3
13938: PUSH
13939: LD_INT 13
13941: PUSH
13942: LD_INT 14
13944: PUSH
13945: LD_INT 2
13947: PUSH
13948: LD_INT 3
13950: PUSH
13951: LD_INT 4
13953: PUSH
13954: LD_INT 5
13956: PUSH
13957: LD_INT 21
13959: PUSH
13960: LD_INT 22
13962: PUSH
13963: LD_INT 23
13965: PUSH
13966: LD_INT 24
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: ST_TO_ADDR
13981: GO 13984
13983: POP
// result := ( chassis in result ) ;
13984: LD_ADDR_VAR 0 3
13988: PUSH
13989: LD_VAR 0 1
13993: PUSH
13994: LD_VAR 0 3
13998: IN
13999: ST_TO_ADDR
// end ;
14000: LD_VAR 0 3
14004: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14005: LD_INT 0
14007: PPUSH
// if not chassis or not weapon then
14008: LD_VAR 0 1
14012: NOT
14013: PUSH
14014: LD_VAR 0 2
14018: NOT
14019: OR
14020: IFFALSE 14024
// exit ;
14022: GO 15084
// case weapon of us_machine_gun :
14024: LD_VAR 0 2
14028: PUSH
14029: LD_INT 2
14031: DOUBLE
14032: EQUAL
14033: IFTRUE 14037
14035: GO 14067
14037: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14038: LD_ADDR_VAR 0 3
14042: PUSH
14043: LD_INT 1
14045: PUSH
14046: LD_INT 2
14048: PUSH
14049: LD_INT 3
14051: PUSH
14052: LD_INT 4
14054: PUSH
14055: LD_INT 5
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: ST_TO_ADDR
14065: GO 15068
14067: LD_INT 3
14069: DOUBLE
14070: EQUAL
14071: IFTRUE 14075
14073: GO 14105
14075: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14076: LD_ADDR_VAR 0 3
14080: PUSH
14081: LD_INT 1
14083: PUSH
14084: LD_INT 2
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: LD_INT 4
14092: PUSH
14093: LD_INT 5
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: ST_TO_ADDR
14103: GO 15068
14105: LD_INT 11
14107: DOUBLE
14108: EQUAL
14109: IFTRUE 14113
14111: GO 14143
14113: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14114: LD_ADDR_VAR 0 3
14118: PUSH
14119: LD_INT 1
14121: PUSH
14122: LD_INT 2
14124: PUSH
14125: LD_INT 3
14127: PUSH
14128: LD_INT 4
14130: PUSH
14131: LD_INT 5
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: ST_TO_ADDR
14141: GO 15068
14143: LD_INT 4
14145: DOUBLE
14146: EQUAL
14147: IFTRUE 14151
14149: GO 14177
14151: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14152: LD_ADDR_VAR 0 3
14156: PUSH
14157: LD_INT 2
14159: PUSH
14160: LD_INT 3
14162: PUSH
14163: LD_INT 4
14165: PUSH
14166: LD_INT 5
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: ST_TO_ADDR
14175: GO 15068
14177: LD_INT 5
14179: DOUBLE
14180: EQUAL
14181: IFTRUE 14185
14183: GO 14211
14185: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14186: LD_ADDR_VAR 0 3
14190: PUSH
14191: LD_INT 2
14193: PUSH
14194: LD_INT 3
14196: PUSH
14197: LD_INT 4
14199: PUSH
14200: LD_INT 5
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: ST_TO_ADDR
14209: GO 15068
14211: LD_INT 9
14213: DOUBLE
14214: EQUAL
14215: IFTRUE 14219
14217: GO 14245
14219: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14220: LD_ADDR_VAR 0 3
14224: PUSH
14225: LD_INT 2
14227: PUSH
14228: LD_INT 3
14230: PUSH
14231: LD_INT 4
14233: PUSH
14234: LD_INT 5
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: ST_TO_ADDR
14243: GO 15068
14245: LD_INT 7
14247: DOUBLE
14248: EQUAL
14249: IFTRUE 14253
14251: GO 14279
14253: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14254: LD_ADDR_VAR 0 3
14258: PUSH
14259: LD_INT 2
14261: PUSH
14262: LD_INT 3
14264: PUSH
14265: LD_INT 4
14267: PUSH
14268: LD_INT 5
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: ST_TO_ADDR
14277: GO 15068
14279: LD_INT 12
14281: DOUBLE
14282: EQUAL
14283: IFTRUE 14287
14285: GO 14313
14287: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14288: LD_ADDR_VAR 0 3
14292: PUSH
14293: LD_INT 2
14295: PUSH
14296: LD_INT 3
14298: PUSH
14299: LD_INT 4
14301: PUSH
14302: LD_INT 5
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: ST_TO_ADDR
14311: GO 15068
14313: LD_INT 13
14315: DOUBLE
14316: EQUAL
14317: IFTRUE 14321
14319: GO 14347
14321: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14322: LD_ADDR_VAR 0 3
14326: PUSH
14327: LD_INT 2
14329: PUSH
14330: LD_INT 3
14332: PUSH
14333: LD_INT 4
14335: PUSH
14336: LD_INT 5
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: ST_TO_ADDR
14345: GO 15068
14347: LD_INT 14
14349: DOUBLE
14350: EQUAL
14351: IFTRUE 14355
14353: GO 14373
14355: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14356: LD_ADDR_VAR 0 3
14360: PUSH
14361: LD_INT 4
14363: PUSH
14364: LD_INT 5
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: ST_TO_ADDR
14371: GO 15068
14373: LD_INT 6
14375: DOUBLE
14376: EQUAL
14377: IFTRUE 14381
14379: GO 14399
14381: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_INT 4
14389: PUSH
14390: LD_INT 5
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: ST_TO_ADDR
14397: GO 15068
14399: LD_INT 10
14401: DOUBLE
14402: EQUAL
14403: IFTRUE 14407
14405: GO 14425
14407: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14408: LD_ADDR_VAR 0 3
14412: PUSH
14413: LD_INT 4
14415: PUSH
14416: LD_INT 5
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: ST_TO_ADDR
14423: GO 15068
14425: LD_INT 22
14427: DOUBLE
14428: EQUAL
14429: IFTRUE 14433
14431: GO 14459
14433: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14434: LD_ADDR_VAR 0 3
14438: PUSH
14439: LD_INT 11
14441: PUSH
14442: LD_INT 12
14444: PUSH
14445: LD_INT 13
14447: PUSH
14448: LD_INT 14
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: ST_TO_ADDR
14457: GO 15068
14459: LD_INT 23
14461: DOUBLE
14462: EQUAL
14463: IFTRUE 14467
14465: GO 14493
14467: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14468: LD_ADDR_VAR 0 3
14472: PUSH
14473: LD_INT 11
14475: PUSH
14476: LD_INT 12
14478: PUSH
14479: LD_INT 13
14481: PUSH
14482: LD_INT 14
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: ST_TO_ADDR
14491: GO 15068
14493: LD_INT 24
14495: DOUBLE
14496: EQUAL
14497: IFTRUE 14501
14499: GO 14527
14501: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14502: LD_ADDR_VAR 0 3
14506: PUSH
14507: LD_INT 11
14509: PUSH
14510: LD_INT 12
14512: PUSH
14513: LD_INT 13
14515: PUSH
14516: LD_INT 14
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: ST_TO_ADDR
14525: GO 15068
14527: LD_INT 30
14529: DOUBLE
14530: EQUAL
14531: IFTRUE 14535
14533: GO 14561
14535: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14536: LD_ADDR_VAR 0 3
14540: PUSH
14541: LD_INT 11
14543: PUSH
14544: LD_INT 12
14546: PUSH
14547: LD_INT 13
14549: PUSH
14550: LD_INT 14
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: ST_TO_ADDR
14559: GO 15068
14561: LD_INT 25
14563: DOUBLE
14564: EQUAL
14565: IFTRUE 14569
14567: GO 14587
14569: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14570: LD_ADDR_VAR 0 3
14574: PUSH
14575: LD_INT 13
14577: PUSH
14578: LD_INT 14
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: ST_TO_ADDR
14585: GO 15068
14587: LD_INT 27
14589: DOUBLE
14590: EQUAL
14591: IFTRUE 14595
14593: GO 14613
14595: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14596: LD_ADDR_VAR 0 3
14600: PUSH
14601: LD_INT 13
14603: PUSH
14604: LD_INT 14
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: ST_TO_ADDR
14611: GO 15068
14613: LD_INT 92
14615: DOUBLE
14616: EQUAL
14617: IFTRUE 14621
14619: GO 14647
14621: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14622: LD_ADDR_VAR 0 3
14626: PUSH
14627: LD_INT 11
14629: PUSH
14630: LD_INT 12
14632: PUSH
14633: LD_INT 13
14635: PUSH
14636: LD_INT 14
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: ST_TO_ADDR
14645: GO 15068
14647: LD_INT 28
14649: DOUBLE
14650: EQUAL
14651: IFTRUE 14655
14653: GO 14673
14655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14656: LD_ADDR_VAR 0 3
14660: PUSH
14661: LD_INT 13
14663: PUSH
14664: LD_INT 14
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: ST_TO_ADDR
14671: GO 15068
14673: LD_INT 29
14675: DOUBLE
14676: EQUAL
14677: IFTRUE 14681
14679: GO 14699
14681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14682: LD_ADDR_VAR 0 3
14686: PUSH
14687: LD_INT 13
14689: PUSH
14690: LD_INT 14
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: ST_TO_ADDR
14697: GO 15068
14699: LD_INT 31
14701: DOUBLE
14702: EQUAL
14703: IFTRUE 14707
14705: GO 14725
14707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14708: LD_ADDR_VAR 0 3
14712: PUSH
14713: LD_INT 13
14715: PUSH
14716: LD_INT 14
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: ST_TO_ADDR
14723: GO 15068
14725: LD_INT 26
14727: DOUBLE
14728: EQUAL
14729: IFTRUE 14733
14731: GO 14751
14733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14734: LD_ADDR_VAR 0 3
14738: PUSH
14739: LD_INT 13
14741: PUSH
14742: LD_INT 14
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: ST_TO_ADDR
14749: GO 15068
14751: LD_INT 42
14753: DOUBLE
14754: EQUAL
14755: IFTRUE 14759
14757: GO 14785
14759: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14760: LD_ADDR_VAR 0 3
14764: PUSH
14765: LD_INT 21
14767: PUSH
14768: LD_INT 22
14770: PUSH
14771: LD_INT 23
14773: PUSH
14774: LD_INT 24
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: ST_TO_ADDR
14783: GO 15068
14785: LD_INT 43
14787: DOUBLE
14788: EQUAL
14789: IFTRUE 14793
14791: GO 14819
14793: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14794: LD_ADDR_VAR 0 3
14798: PUSH
14799: LD_INT 21
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_INT 23
14807: PUSH
14808: LD_INT 24
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: ST_TO_ADDR
14817: GO 15068
14819: LD_INT 44
14821: DOUBLE
14822: EQUAL
14823: IFTRUE 14827
14825: GO 14853
14827: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14828: LD_ADDR_VAR 0 3
14832: PUSH
14833: LD_INT 21
14835: PUSH
14836: LD_INT 22
14838: PUSH
14839: LD_INT 23
14841: PUSH
14842: LD_INT 24
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: ST_TO_ADDR
14851: GO 15068
14853: LD_INT 45
14855: DOUBLE
14856: EQUAL
14857: IFTRUE 14861
14859: GO 14887
14861: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14862: LD_ADDR_VAR 0 3
14866: PUSH
14867: LD_INT 21
14869: PUSH
14870: LD_INT 22
14872: PUSH
14873: LD_INT 23
14875: PUSH
14876: LD_INT 24
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: ST_TO_ADDR
14885: GO 15068
14887: LD_INT 49
14889: DOUBLE
14890: EQUAL
14891: IFTRUE 14895
14893: GO 14921
14895: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14896: LD_ADDR_VAR 0 3
14900: PUSH
14901: LD_INT 21
14903: PUSH
14904: LD_INT 22
14906: PUSH
14907: LD_INT 23
14909: PUSH
14910: LD_INT 24
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: ST_TO_ADDR
14919: GO 15068
14921: LD_INT 51
14923: DOUBLE
14924: EQUAL
14925: IFTRUE 14929
14927: GO 14955
14929: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14930: LD_ADDR_VAR 0 3
14934: PUSH
14935: LD_INT 21
14937: PUSH
14938: LD_INT 22
14940: PUSH
14941: LD_INT 23
14943: PUSH
14944: LD_INT 24
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: ST_TO_ADDR
14953: GO 15068
14955: LD_INT 52
14957: DOUBLE
14958: EQUAL
14959: IFTRUE 14963
14961: GO 14989
14963: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14964: LD_ADDR_VAR 0 3
14968: PUSH
14969: LD_INT 21
14971: PUSH
14972: LD_INT 22
14974: PUSH
14975: LD_INT 23
14977: PUSH
14978: LD_INT 24
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: ST_TO_ADDR
14987: GO 15068
14989: LD_INT 53
14991: DOUBLE
14992: EQUAL
14993: IFTRUE 14997
14995: GO 15015
14997: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14998: LD_ADDR_VAR 0 3
15002: PUSH
15003: LD_INT 23
15005: PUSH
15006: LD_INT 24
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: ST_TO_ADDR
15013: GO 15068
15015: LD_INT 46
15017: DOUBLE
15018: EQUAL
15019: IFTRUE 15023
15021: GO 15041
15023: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15024: LD_ADDR_VAR 0 3
15028: PUSH
15029: LD_INT 23
15031: PUSH
15032: LD_INT 24
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: ST_TO_ADDR
15039: GO 15068
15041: LD_INT 47
15043: DOUBLE
15044: EQUAL
15045: IFTRUE 15049
15047: GO 15067
15049: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15050: LD_ADDR_VAR 0 3
15054: PUSH
15055: LD_INT 23
15057: PUSH
15058: LD_INT 24
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: ST_TO_ADDR
15065: GO 15068
15067: POP
// result := ( chassis in result ) ;
15068: LD_ADDR_VAR 0 3
15072: PUSH
15073: LD_VAR 0 1
15077: PUSH
15078: LD_VAR 0 3
15082: IN
15083: ST_TO_ADDR
// end ;
15084: LD_VAR 0 3
15088: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15089: LD_INT 0
15091: PPUSH
15092: PPUSH
15093: PPUSH
15094: PPUSH
15095: PPUSH
15096: PPUSH
15097: PPUSH
// result := array ;
15098: LD_ADDR_VAR 0 5
15102: PUSH
15103: LD_VAR 0 1
15107: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15108: LD_VAR 0 1
15112: NOT
15113: PUSH
15114: LD_VAR 0 2
15118: NOT
15119: OR
15120: PUSH
15121: LD_VAR 0 3
15125: NOT
15126: OR
15127: PUSH
15128: LD_VAR 0 2
15132: PUSH
15133: LD_VAR 0 1
15137: GREATER
15138: OR
15139: PUSH
15140: LD_VAR 0 3
15144: PUSH
15145: LD_VAR 0 1
15149: GREATER
15150: OR
15151: IFFALSE 15155
// exit ;
15153: GO 15451
// if direction then
15155: LD_VAR 0 4
15159: IFFALSE 15223
// begin d := 1 ;
15161: LD_ADDR_VAR 0 9
15165: PUSH
15166: LD_INT 1
15168: ST_TO_ADDR
// if i_from > i_to then
15169: LD_VAR 0 2
15173: PUSH
15174: LD_VAR 0 3
15178: GREATER
15179: IFFALSE 15205
// length := ( array - i_from ) + i_to else
15181: LD_ADDR_VAR 0 11
15185: PUSH
15186: LD_VAR 0 1
15190: PUSH
15191: LD_VAR 0 2
15195: MINUS
15196: PUSH
15197: LD_VAR 0 3
15201: PLUS
15202: ST_TO_ADDR
15203: GO 15221
// length := i_to - i_from ;
15205: LD_ADDR_VAR 0 11
15209: PUSH
15210: LD_VAR 0 3
15214: PUSH
15215: LD_VAR 0 2
15219: MINUS
15220: ST_TO_ADDR
// end else
15221: GO 15284
// begin d := - 1 ;
15223: LD_ADDR_VAR 0 9
15227: PUSH
15228: LD_INT 1
15230: NEG
15231: ST_TO_ADDR
// if i_from > i_to then
15232: LD_VAR 0 2
15236: PUSH
15237: LD_VAR 0 3
15241: GREATER
15242: IFFALSE 15262
// length := i_from - i_to else
15244: LD_ADDR_VAR 0 11
15248: PUSH
15249: LD_VAR 0 2
15253: PUSH
15254: LD_VAR 0 3
15258: MINUS
15259: ST_TO_ADDR
15260: GO 15284
// length := ( array - i_to ) + i_from ;
15262: LD_ADDR_VAR 0 11
15266: PUSH
15267: LD_VAR 0 1
15271: PUSH
15272: LD_VAR 0 3
15276: MINUS
15277: PUSH
15278: LD_VAR 0 2
15282: PLUS
15283: ST_TO_ADDR
// end ; if not length then
15284: LD_VAR 0 11
15288: NOT
15289: IFFALSE 15293
// exit ;
15291: GO 15451
// tmp := array ;
15293: LD_ADDR_VAR 0 10
15297: PUSH
15298: LD_VAR 0 1
15302: ST_TO_ADDR
// for i = 1 to length do
15303: LD_ADDR_VAR 0 6
15307: PUSH
15308: DOUBLE
15309: LD_INT 1
15311: DEC
15312: ST_TO_ADDR
15313: LD_VAR 0 11
15317: PUSH
15318: FOR_TO
15319: IFFALSE 15439
// begin for j = 1 to array do
15321: LD_ADDR_VAR 0 7
15325: PUSH
15326: DOUBLE
15327: LD_INT 1
15329: DEC
15330: ST_TO_ADDR
15331: LD_VAR 0 1
15335: PUSH
15336: FOR_TO
15337: IFFALSE 15425
// begin k := j + d ;
15339: LD_ADDR_VAR 0 8
15343: PUSH
15344: LD_VAR 0 7
15348: PUSH
15349: LD_VAR 0 9
15353: PLUS
15354: ST_TO_ADDR
// if k > array then
15355: LD_VAR 0 8
15359: PUSH
15360: LD_VAR 0 1
15364: GREATER
15365: IFFALSE 15375
// k := 1 ;
15367: LD_ADDR_VAR 0 8
15371: PUSH
15372: LD_INT 1
15374: ST_TO_ADDR
// if not k then
15375: LD_VAR 0 8
15379: NOT
15380: IFFALSE 15392
// k := array ;
15382: LD_ADDR_VAR 0 8
15386: PUSH
15387: LD_VAR 0 1
15391: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15392: LD_ADDR_VAR 0 10
15396: PUSH
15397: LD_VAR 0 10
15401: PPUSH
15402: LD_VAR 0 8
15406: PPUSH
15407: LD_VAR 0 1
15411: PUSH
15412: LD_VAR 0 7
15416: ARRAY
15417: PPUSH
15418: CALL_OW 1
15422: ST_TO_ADDR
// end ;
15423: GO 15336
15425: POP
15426: POP
// array := tmp ;
15427: LD_ADDR_VAR 0 1
15431: PUSH
15432: LD_VAR 0 10
15436: ST_TO_ADDR
// end ;
15437: GO 15318
15439: POP
15440: POP
// result := array ;
15441: LD_ADDR_VAR 0 5
15445: PUSH
15446: LD_VAR 0 1
15450: ST_TO_ADDR
// end ;
15451: LD_VAR 0 5
15455: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15456: LD_INT 0
15458: PPUSH
15459: PPUSH
// result := 0 ;
15460: LD_ADDR_VAR 0 3
15464: PUSH
15465: LD_INT 0
15467: ST_TO_ADDR
// if not array or not value in array then
15468: LD_VAR 0 1
15472: NOT
15473: PUSH
15474: LD_VAR 0 2
15478: PUSH
15479: LD_VAR 0 1
15483: IN
15484: NOT
15485: OR
15486: IFFALSE 15490
// exit ;
15488: GO 15544
// for i = 1 to array do
15490: LD_ADDR_VAR 0 4
15494: PUSH
15495: DOUBLE
15496: LD_INT 1
15498: DEC
15499: ST_TO_ADDR
15500: LD_VAR 0 1
15504: PUSH
15505: FOR_TO
15506: IFFALSE 15542
// if value = array [ i ] then
15508: LD_VAR 0 2
15512: PUSH
15513: LD_VAR 0 1
15517: PUSH
15518: LD_VAR 0 4
15522: ARRAY
15523: EQUAL
15524: IFFALSE 15540
// begin result := i ;
15526: LD_ADDR_VAR 0 3
15530: PUSH
15531: LD_VAR 0 4
15535: ST_TO_ADDR
// exit ;
15536: POP
15537: POP
15538: GO 15544
// end ;
15540: GO 15505
15542: POP
15543: POP
// end ;
15544: LD_VAR 0 3
15548: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15549: LD_INT 0
15551: PPUSH
// vc_chassis := chassis ;
15552: LD_ADDR_OWVAR 37
15556: PUSH
15557: LD_VAR 0 1
15561: ST_TO_ADDR
// vc_engine := engine ;
15562: LD_ADDR_OWVAR 39
15566: PUSH
15567: LD_VAR 0 2
15571: ST_TO_ADDR
// vc_control := control ;
15572: LD_ADDR_OWVAR 38
15576: PUSH
15577: LD_VAR 0 3
15581: ST_TO_ADDR
// vc_weapon := weapon ;
15582: LD_ADDR_OWVAR 40
15586: PUSH
15587: LD_VAR 0 4
15591: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15592: LD_ADDR_OWVAR 41
15596: PUSH
15597: LD_VAR 0 5
15601: ST_TO_ADDR
// end ;
15602: LD_VAR 0 6
15606: RET
// export function WantPlant ( unit ) ; var task ; begin
15607: LD_INT 0
15609: PPUSH
15610: PPUSH
// result := false ;
15611: LD_ADDR_VAR 0 2
15615: PUSH
15616: LD_INT 0
15618: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15619: LD_ADDR_VAR 0 3
15623: PUSH
15624: LD_VAR 0 1
15628: PPUSH
15629: CALL_OW 437
15633: ST_TO_ADDR
// if task then
15634: LD_VAR 0 3
15638: IFFALSE 15666
// if task [ 1 ] [ 1 ] = p then
15640: LD_VAR 0 3
15644: PUSH
15645: LD_INT 1
15647: ARRAY
15648: PUSH
15649: LD_INT 1
15651: ARRAY
15652: PUSH
15653: LD_STRING p
15655: EQUAL
15656: IFFALSE 15666
// result := true ;
15658: LD_ADDR_VAR 0 2
15662: PUSH
15663: LD_INT 1
15665: ST_TO_ADDR
// end ;
15666: LD_VAR 0 2
15670: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15671: LD_INT 0
15673: PPUSH
15674: PPUSH
15675: PPUSH
15676: PPUSH
// if pos < 1 then
15677: LD_VAR 0 2
15681: PUSH
15682: LD_INT 1
15684: LESS
15685: IFFALSE 15689
// exit ;
15687: GO 15992
// if pos = 1 then
15689: LD_VAR 0 2
15693: PUSH
15694: LD_INT 1
15696: EQUAL
15697: IFFALSE 15730
// result := Replace ( arr , pos [ 1 ] , value ) else
15699: LD_ADDR_VAR 0 4
15703: PUSH
15704: LD_VAR 0 1
15708: PPUSH
15709: LD_VAR 0 2
15713: PUSH
15714: LD_INT 1
15716: ARRAY
15717: PPUSH
15718: LD_VAR 0 3
15722: PPUSH
15723: CALL_OW 1
15727: ST_TO_ADDR
15728: GO 15992
// begin tmp := arr ;
15730: LD_ADDR_VAR 0 6
15734: PUSH
15735: LD_VAR 0 1
15739: ST_TO_ADDR
// s_arr := [ tmp ] ;
15740: LD_ADDR_VAR 0 7
15744: PUSH
15745: LD_VAR 0 6
15749: PUSH
15750: EMPTY
15751: LIST
15752: ST_TO_ADDR
// for i = 1 to pos - 1 do
15753: LD_ADDR_VAR 0 5
15757: PUSH
15758: DOUBLE
15759: LD_INT 1
15761: DEC
15762: ST_TO_ADDR
15763: LD_VAR 0 2
15767: PUSH
15768: LD_INT 1
15770: MINUS
15771: PUSH
15772: FOR_TO
15773: IFFALSE 15818
// begin tmp := tmp [ pos [ i ] ] ;
15775: LD_ADDR_VAR 0 6
15779: PUSH
15780: LD_VAR 0 6
15784: PUSH
15785: LD_VAR 0 2
15789: PUSH
15790: LD_VAR 0 5
15794: ARRAY
15795: ARRAY
15796: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15797: LD_ADDR_VAR 0 7
15801: PUSH
15802: LD_VAR 0 7
15806: PUSH
15807: LD_VAR 0 6
15811: PUSH
15812: EMPTY
15813: LIST
15814: ADD
15815: ST_TO_ADDR
// end ;
15816: GO 15772
15818: POP
15819: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15820: LD_ADDR_VAR 0 6
15824: PUSH
15825: LD_VAR 0 6
15829: PPUSH
15830: LD_VAR 0 2
15834: PUSH
15835: LD_VAR 0 2
15839: ARRAY
15840: PPUSH
15841: LD_VAR 0 3
15845: PPUSH
15846: CALL_OW 1
15850: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15851: LD_ADDR_VAR 0 7
15855: PUSH
15856: LD_VAR 0 7
15860: PPUSH
15861: LD_VAR 0 7
15865: PPUSH
15866: LD_VAR 0 6
15870: PPUSH
15871: CALL_OW 1
15875: ST_TO_ADDR
// for i = s_arr downto 2 do
15876: LD_ADDR_VAR 0 5
15880: PUSH
15881: DOUBLE
15882: LD_VAR 0 7
15886: INC
15887: ST_TO_ADDR
15888: LD_INT 2
15890: PUSH
15891: FOR_DOWNTO
15892: IFFALSE 15976
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15894: LD_ADDR_VAR 0 6
15898: PUSH
15899: LD_VAR 0 7
15903: PUSH
15904: LD_VAR 0 5
15908: PUSH
15909: LD_INT 1
15911: MINUS
15912: ARRAY
15913: PPUSH
15914: LD_VAR 0 2
15918: PUSH
15919: LD_VAR 0 5
15923: PUSH
15924: LD_INT 1
15926: MINUS
15927: ARRAY
15928: PPUSH
15929: LD_VAR 0 7
15933: PUSH
15934: LD_VAR 0 5
15938: ARRAY
15939: PPUSH
15940: CALL_OW 1
15944: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15945: LD_ADDR_VAR 0 7
15949: PUSH
15950: LD_VAR 0 7
15954: PPUSH
15955: LD_VAR 0 5
15959: PUSH
15960: LD_INT 1
15962: MINUS
15963: PPUSH
15964: LD_VAR 0 6
15968: PPUSH
15969: CALL_OW 1
15973: ST_TO_ADDR
// end ;
15974: GO 15891
15976: POP
15977: POP
// result := s_arr [ 1 ] ;
15978: LD_ADDR_VAR 0 4
15982: PUSH
15983: LD_VAR 0 7
15987: PUSH
15988: LD_INT 1
15990: ARRAY
15991: ST_TO_ADDR
// end ; end ;
15992: LD_VAR 0 4
15996: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15997: LD_INT 0
15999: PPUSH
16000: PPUSH
// if not list then
16001: LD_VAR 0 1
16005: NOT
16006: IFFALSE 16010
// exit ;
16008: GO 16101
// i := list [ pos1 ] ;
16010: LD_ADDR_VAR 0 5
16014: PUSH
16015: LD_VAR 0 1
16019: PUSH
16020: LD_VAR 0 2
16024: ARRAY
16025: ST_TO_ADDR
// if not i then
16026: LD_VAR 0 5
16030: NOT
16031: IFFALSE 16035
// exit ;
16033: GO 16101
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16035: LD_ADDR_VAR 0 1
16039: PUSH
16040: LD_VAR 0 1
16044: PPUSH
16045: LD_VAR 0 2
16049: PPUSH
16050: LD_VAR 0 1
16054: PUSH
16055: LD_VAR 0 3
16059: ARRAY
16060: PPUSH
16061: CALL_OW 1
16065: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16066: LD_ADDR_VAR 0 1
16070: PUSH
16071: LD_VAR 0 1
16075: PPUSH
16076: LD_VAR 0 3
16080: PPUSH
16081: LD_VAR 0 5
16085: PPUSH
16086: CALL_OW 1
16090: ST_TO_ADDR
// result := list ;
16091: LD_ADDR_VAR 0 4
16095: PUSH
16096: LD_VAR 0 1
16100: ST_TO_ADDR
// end ;
16101: LD_VAR 0 4
16105: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16106: LD_INT 0
16108: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16109: LD_ADDR_VAR 0 5
16113: PUSH
16114: LD_VAR 0 1
16118: PPUSH
16119: CALL_OW 250
16123: PPUSH
16124: LD_VAR 0 1
16128: PPUSH
16129: CALL_OW 251
16133: PPUSH
16134: LD_VAR 0 2
16138: PPUSH
16139: LD_VAR 0 3
16143: PPUSH
16144: LD_VAR 0 4
16148: PPUSH
16149: CALL 16159 0 5
16153: ST_TO_ADDR
// end ;
16154: LD_VAR 0 5
16158: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16159: LD_INT 0
16161: PPUSH
16162: PPUSH
16163: PPUSH
16164: PPUSH
// if not list then
16165: LD_VAR 0 3
16169: NOT
16170: IFFALSE 16174
// exit ;
16172: GO 16562
// result := [ ] ;
16174: LD_ADDR_VAR 0 6
16178: PUSH
16179: EMPTY
16180: ST_TO_ADDR
// for i in list do
16181: LD_ADDR_VAR 0 7
16185: PUSH
16186: LD_VAR 0 3
16190: PUSH
16191: FOR_IN
16192: IFFALSE 16394
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16194: LD_ADDR_VAR 0 9
16198: PUSH
16199: LD_VAR 0 7
16203: PPUSH
16204: LD_VAR 0 1
16208: PPUSH
16209: LD_VAR 0 2
16213: PPUSH
16214: CALL_OW 297
16218: ST_TO_ADDR
// if not result then
16219: LD_VAR 0 6
16223: NOT
16224: IFFALSE 16250
// result := [ [ i , tmp ] ] else
16226: LD_ADDR_VAR 0 6
16230: PUSH
16231: LD_VAR 0 7
16235: PUSH
16236: LD_VAR 0 9
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: EMPTY
16246: LIST
16247: ST_TO_ADDR
16248: GO 16392
// begin if result [ result ] [ 2 ] < tmp then
16250: LD_VAR 0 6
16254: PUSH
16255: LD_VAR 0 6
16259: ARRAY
16260: PUSH
16261: LD_INT 2
16263: ARRAY
16264: PUSH
16265: LD_VAR 0 9
16269: LESS
16270: IFFALSE 16312
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16272: LD_ADDR_VAR 0 6
16276: PUSH
16277: LD_VAR 0 6
16281: PPUSH
16282: LD_VAR 0 6
16286: PUSH
16287: LD_INT 1
16289: PLUS
16290: PPUSH
16291: LD_VAR 0 7
16295: PUSH
16296: LD_VAR 0 9
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PPUSH
16305: CALL_OW 2
16309: ST_TO_ADDR
16310: GO 16392
// for j = 1 to result do
16312: LD_ADDR_VAR 0 8
16316: PUSH
16317: DOUBLE
16318: LD_INT 1
16320: DEC
16321: ST_TO_ADDR
16322: LD_VAR 0 6
16326: PUSH
16327: FOR_TO
16328: IFFALSE 16390
// begin if tmp < result [ j ] [ 2 ] then
16330: LD_VAR 0 9
16334: PUSH
16335: LD_VAR 0 6
16339: PUSH
16340: LD_VAR 0 8
16344: ARRAY
16345: PUSH
16346: LD_INT 2
16348: ARRAY
16349: LESS
16350: IFFALSE 16388
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16352: LD_ADDR_VAR 0 6
16356: PUSH
16357: LD_VAR 0 6
16361: PPUSH
16362: LD_VAR 0 8
16366: PPUSH
16367: LD_VAR 0 7
16371: PUSH
16372: LD_VAR 0 9
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PPUSH
16381: CALL_OW 2
16385: ST_TO_ADDR
// break ;
16386: GO 16390
// end ; end ;
16388: GO 16327
16390: POP
16391: POP
// end ; end ;
16392: GO 16191
16394: POP
16395: POP
// if result and not asc then
16396: LD_VAR 0 6
16400: PUSH
16401: LD_VAR 0 4
16405: NOT
16406: AND
16407: IFFALSE 16482
// begin tmp := result ;
16409: LD_ADDR_VAR 0 9
16413: PUSH
16414: LD_VAR 0 6
16418: ST_TO_ADDR
// for i = tmp downto 1 do
16419: LD_ADDR_VAR 0 7
16423: PUSH
16424: DOUBLE
16425: LD_VAR 0 9
16429: INC
16430: ST_TO_ADDR
16431: LD_INT 1
16433: PUSH
16434: FOR_DOWNTO
16435: IFFALSE 16480
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16437: LD_ADDR_VAR 0 6
16441: PUSH
16442: LD_VAR 0 6
16446: PPUSH
16447: LD_VAR 0 9
16451: PUSH
16452: LD_VAR 0 7
16456: MINUS
16457: PUSH
16458: LD_INT 1
16460: PLUS
16461: PPUSH
16462: LD_VAR 0 9
16466: PUSH
16467: LD_VAR 0 7
16471: ARRAY
16472: PPUSH
16473: CALL_OW 1
16477: ST_TO_ADDR
16478: GO 16434
16480: POP
16481: POP
// end ; tmp := [ ] ;
16482: LD_ADDR_VAR 0 9
16486: PUSH
16487: EMPTY
16488: ST_TO_ADDR
// if mode then
16489: LD_VAR 0 5
16493: IFFALSE 16562
// begin for i = 1 to result do
16495: LD_ADDR_VAR 0 7
16499: PUSH
16500: DOUBLE
16501: LD_INT 1
16503: DEC
16504: ST_TO_ADDR
16505: LD_VAR 0 6
16509: PUSH
16510: FOR_TO
16511: IFFALSE 16550
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16513: LD_ADDR_VAR 0 9
16517: PUSH
16518: LD_VAR 0 9
16522: PPUSH
16523: LD_VAR 0 7
16527: PPUSH
16528: LD_VAR 0 6
16532: PUSH
16533: LD_VAR 0 7
16537: ARRAY
16538: PUSH
16539: LD_INT 1
16541: ARRAY
16542: PPUSH
16543: CALL_OW 1
16547: ST_TO_ADDR
16548: GO 16510
16550: POP
16551: POP
// result := tmp ;
16552: LD_ADDR_VAR 0 6
16556: PUSH
16557: LD_VAR 0 9
16561: ST_TO_ADDR
// end ; end ;
16562: LD_VAR 0 6
16566: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16567: LD_INT 0
16569: PPUSH
16570: PPUSH
16571: PPUSH
16572: PPUSH
16573: PPUSH
16574: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16575: LD_ADDR_VAR 0 5
16579: PUSH
16580: LD_INT 0
16582: PUSH
16583: LD_INT 0
16585: PUSH
16586: LD_INT 0
16588: PUSH
16589: EMPTY
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: ST_TO_ADDR
// if not x or not y then
16597: LD_VAR 0 2
16601: NOT
16602: PUSH
16603: LD_VAR 0 3
16607: NOT
16608: OR
16609: IFFALSE 16613
// exit ;
16611: GO 18263
// if not range then
16613: LD_VAR 0 4
16617: NOT
16618: IFFALSE 16628
// range := 10 ;
16620: LD_ADDR_VAR 0 4
16624: PUSH
16625: LD_INT 10
16627: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16628: LD_ADDR_VAR 0 8
16632: PUSH
16633: LD_INT 81
16635: PUSH
16636: LD_VAR 0 1
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 92
16647: PUSH
16648: LD_VAR 0 2
16652: PUSH
16653: LD_VAR 0 3
16657: PUSH
16658: LD_VAR 0 4
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 3
16671: PUSH
16672: LD_INT 21
16674: PUSH
16675: LD_INT 3
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: PPUSH
16691: CALL_OW 69
16695: ST_TO_ADDR
// if not tmp then
16696: LD_VAR 0 8
16700: NOT
16701: IFFALSE 16705
// exit ;
16703: GO 18263
// for i in tmp do
16705: LD_ADDR_VAR 0 6
16709: PUSH
16710: LD_VAR 0 8
16714: PUSH
16715: FOR_IN
16716: IFFALSE 18238
// begin points := [ 0 , 0 , 0 ] ;
16718: LD_ADDR_VAR 0 9
16722: PUSH
16723: LD_INT 0
16725: PUSH
16726: LD_INT 0
16728: PUSH
16729: LD_INT 0
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: LIST
16736: ST_TO_ADDR
// bpoints := 1 ;
16737: LD_ADDR_VAR 0 10
16741: PUSH
16742: LD_INT 1
16744: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16745: LD_VAR 0 6
16749: PPUSH
16750: CALL_OW 247
16754: PUSH
16755: LD_INT 1
16757: DOUBLE
16758: EQUAL
16759: IFTRUE 16763
16761: GO 17341
16763: POP
// begin if GetClass ( i ) = 1 then
16764: LD_VAR 0 6
16768: PPUSH
16769: CALL_OW 257
16773: PUSH
16774: LD_INT 1
16776: EQUAL
16777: IFFALSE 16798
// points := [ 10 , 5 , 3 ] ;
16779: LD_ADDR_VAR 0 9
16783: PUSH
16784: LD_INT 10
16786: PUSH
16787: LD_INT 5
16789: PUSH
16790: LD_INT 3
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: LIST
16797: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16798: LD_VAR 0 6
16802: PPUSH
16803: CALL_OW 257
16807: PUSH
16808: LD_INT 2
16810: PUSH
16811: LD_INT 3
16813: PUSH
16814: LD_INT 4
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: IN
16822: IFFALSE 16843
// points := [ 3 , 2 , 1 ] ;
16824: LD_ADDR_VAR 0 9
16828: PUSH
16829: LD_INT 3
16831: PUSH
16832: LD_INT 2
16834: PUSH
16835: LD_INT 1
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: LIST
16842: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16843: LD_VAR 0 6
16847: PPUSH
16848: CALL_OW 257
16852: PUSH
16853: LD_INT 5
16855: EQUAL
16856: IFFALSE 16877
// points := [ 130 , 5 , 2 ] ;
16858: LD_ADDR_VAR 0 9
16862: PUSH
16863: LD_INT 130
16865: PUSH
16866: LD_INT 5
16868: PUSH
16869: LD_INT 2
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: LIST
16876: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16877: LD_VAR 0 6
16881: PPUSH
16882: CALL_OW 257
16886: PUSH
16887: LD_INT 8
16889: EQUAL
16890: IFFALSE 16911
// points := [ 35 , 35 , 30 ] ;
16892: LD_ADDR_VAR 0 9
16896: PUSH
16897: LD_INT 35
16899: PUSH
16900: LD_INT 35
16902: PUSH
16903: LD_INT 30
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: LIST
16910: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16911: LD_VAR 0 6
16915: PPUSH
16916: CALL_OW 257
16920: PUSH
16921: LD_INT 9
16923: EQUAL
16924: IFFALSE 16945
// points := [ 20 , 55 , 40 ] ;
16926: LD_ADDR_VAR 0 9
16930: PUSH
16931: LD_INT 20
16933: PUSH
16934: LD_INT 55
16936: PUSH
16937: LD_INT 40
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: LIST
16944: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16945: LD_VAR 0 6
16949: PPUSH
16950: CALL_OW 257
16954: PUSH
16955: LD_INT 12
16957: PUSH
16958: LD_INT 16
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: IN
16965: IFFALSE 16986
// points := [ 5 , 3 , 2 ] ;
16967: LD_ADDR_VAR 0 9
16971: PUSH
16972: LD_INT 5
16974: PUSH
16975: LD_INT 3
16977: PUSH
16978: LD_INT 2
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: LIST
16985: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16986: LD_VAR 0 6
16990: PPUSH
16991: CALL_OW 257
16995: PUSH
16996: LD_INT 17
16998: EQUAL
16999: IFFALSE 17020
// points := [ 100 , 50 , 75 ] ;
17001: LD_ADDR_VAR 0 9
17005: PUSH
17006: LD_INT 100
17008: PUSH
17009: LD_INT 50
17011: PUSH
17012: LD_INT 75
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17020: LD_VAR 0 6
17024: PPUSH
17025: CALL_OW 257
17029: PUSH
17030: LD_INT 15
17032: EQUAL
17033: IFFALSE 17054
// points := [ 10 , 5 , 3 ] ;
17035: LD_ADDR_VAR 0 9
17039: PUSH
17040: LD_INT 10
17042: PUSH
17043: LD_INT 5
17045: PUSH
17046: LD_INT 3
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17054: LD_VAR 0 6
17058: PPUSH
17059: CALL_OW 257
17063: PUSH
17064: LD_INT 14
17066: EQUAL
17067: IFFALSE 17088
// points := [ 10 , 0 , 0 ] ;
17069: LD_ADDR_VAR 0 9
17073: PUSH
17074: LD_INT 10
17076: PUSH
17077: LD_INT 0
17079: PUSH
17080: LD_INT 0
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17088: LD_VAR 0 6
17092: PPUSH
17093: CALL_OW 257
17097: PUSH
17098: LD_INT 11
17100: EQUAL
17101: IFFALSE 17122
// points := [ 30 , 10 , 5 ] ;
17103: LD_ADDR_VAR 0 9
17107: PUSH
17108: LD_INT 30
17110: PUSH
17111: LD_INT 10
17113: PUSH
17114: LD_INT 5
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: LIST
17121: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17122: LD_VAR 0 1
17126: PPUSH
17127: LD_INT 5
17129: PPUSH
17130: CALL_OW 321
17134: PUSH
17135: LD_INT 2
17137: EQUAL
17138: IFFALSE 17155
// bpoints := bpoints * 1.8 ;
17140: LD_ADDR_VAR 0 10
17144: PUSH
17145: LD_VAR 0 10
17149: PUSH
17150: LD_REAL  1.80000000000000E+0000
17153: MUL
17154: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17155: LD_VAR 0 6
17159: PPUSH
17160: CALL_OW 257
17164: PUSH
17165: LD_INT 1
17167: PUSH
17168: LD_INT 2
17170: PUSH
17171: LD_INT 3
17173: PUSH
17174: LD_INT 4
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: IN
17183: PUSH
17184: LD_VAR 0 1
17188: PPUSH
17189: LD_INT 51
17191: PPUSH
17192: CALL_OW 321
17196: PUSH
17197: LD_INT 2
17199: EQUAL
17200: AND
17201: IFFALSE 17218
// bpoints := bpoints * 1.2 ;
17203: LD_ADDR_VAR 0 10
17207: PUSH
17208: LD_VAR 0 10
17212: PUSH
17213: LD_REAL  1.20000000000000E+0000
17216: MUL
17217: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17218: LD_VAR 0 6
17222: PPUSH
17223: CALL_OW 257
17227: PUSH
17228: LD_INT 5
17230: PUSH
17231: LD_INT 7
17233: PUSH
17234: LD_INT 9
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: LIST
17241: IN
17242: PUSH
17243: LD_VAR 0 1
17247: PPUSH
17248: LD_INT 52
17250: PPUSH
17251: CALL_OW 321
17255: PUSH
17256: LD_INT 2
17258: EQUAL
17259: AND
17260: IFFALSE 17277
// bpoints := bpoints * 1.5 ;
17262: LD_ADDR_VAR 0 10
17266: PUSH
17267: LD_VAR 0 10
17271: PUSH
17272: LD_REAL  1.50000000000000E+0000
17275: MUL
17276: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17277: LD_VAR 0 1
17281: PPUSH
17282: LD_INT 66
17284: PPUSH
17285: CALL_OW 321
17289: PUSH
17290: LD_INT 2
17292: EQUAL
17293: IFFALSE 17310
// bpoints := bpoints * 1.1 ;
17295: LD_ADDR_VAR 0 10
17299: PUSH
17300: LD_VAR 0 10
17304: PUSH
17305: LD_REAL  1.10000000000000E+0000
17308: MUL
17309: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17310: LD_ADDR_VAR 0 10
17314: PUSH
17315: LD_VAR 0 10
17319: PUSH
17320: LD_VAR 0 6
17324: PPUSH
17325: LD_INT 1
17327: PPUSH
17328: CALL_OW 259
17332: PUSH
17333: LD_REAL  1.15000000000000E+0000
17336: MUL
17337: MUL
17338: ST_TO_ADDR
// end ; unit_vehicle :
17339: GO 18167
17341: LD_INT 2
17343: DOUBLE
17344: EQUAL
17345: IFTRUE 17349
17347: GO 18155
17349: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17350: LD_VAR 0 6
17354: PPUSH
17355: CALL_OW 264
17359: PUSH
17360: LD_INT 2
17362: PUSH
17363: LD_INT 42
17365: PUSH
17366: LD_INT 24
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: IN
17374: IFFALSE 17395
// points := [ 25 , 5 , 3 ] ;
17376: LD_ADDR_VAR 0 9
17380: PUSH
17381: LD_INT 25
17383: PUSH
17384: LD_INT 5
17386: PUSH
17387: LD_INT 3
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17395: LD_VAR 0 6
17399: PPUSH
17400: CALL_OW 264
17404: PUSH
17405: LD_INT 4
17407: PUSH
17408: LD_INT 43
17410: PUSH
17411: LD_INT 25
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: LIST
17418: IN
17419: IFFALSE 17440
// points := [ 40 , 15 , 5 ] ;
17421: LD_ADDR_VAR 0 9
17425: PUSH
17426: LD_INT 40
17428: PUSH
17429: LD_INT 15
17431: PUSH
17432: LD_INT 5
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: LIST
17439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17440: LD_VAR 0 6
17444: PPUSH
17445: CALL_OW 264
17449: PUSH
17450: LD_INT 3
17452: PUSH
17453: LD_INT 23
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: IN
17460: IFFALSE 17481
// points := [ 7 , 25 , 8 ] ;
17462: LD_ADDR_VAR 0 9
17466: PUSH
17467: LD_INT 7
17469: PUSH
17470: LD_INT 25
17472: PUSH
17473: LD_INT 8
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: LIST
17480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17481: LD_VAR 0 6
17485: PPUSH
17486: CALL_OW 264
17490: PUSH
17491: LD_INT 5
17493: PUSH
17494: LD_INT 27
17496: PUSH
17497: LD_INT 44
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: IN
17505: IFFALSE 17526
// points := [ 14 , 50 , 16 ] ;
17507: LD_ADDR_VAR 0 9
17511: PUSH
17512: LD_INT 14
17514: PUSH
17515: LD_INT 50
17517: PUSH
17518: LD_INT 16
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17526: LD_VAR 0 6
17530: PPUSH
17531: CALL_OW 264
17535: PUSH
17536: LD_INT 6
17538: PUSH
17539: LD_INT 46
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: IN
17546: IFFALSE 17567
// points := [ 32 , 120 , 70 ] ;
17548: LD_ADDR_VAR 0 9
17552: PUSH
17553: LD_INT 32
17555: PUSH
17556: LD_INT 120
17558: PUSH
17559: LD_INT 70
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17567: LD_VAR 0 6
17571: PPUSH
17572: CALL_OW 264
17576: PUSH
17577: LD_INT 7
17579: PUSH
17580: LD_INT 28
17582: PUSH
17583: LD_INT 45
17585: PUSH
17586: LD_INT 92
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: IN
17595: IFFALSE 17616
// points := [ 35 , 20 , 45 ] ;
17597: LD_ADDR_VAR 0 9
17601: PUSH
17602: LD_INT 35
17604: PUSH
17605: LD_INT 20
17607: PUSH
17608: LD_INT 45
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17616: LD_VAR 0 6
17620: PPUSH
17621: CALL_OW 264
17625: PUSH
17626: LD_INT 47
17628: PUSH
17629: EMPTY
17630: LIST
17631: IN
17632: IFFALSE 17653
// points := [ 67 , 45 , 75 ] ;
17634: LD_ADDR_VAR 0 9
17638: PUSH
17639: LD_INT 67
17641: PUSH
17642: LD_INT 45
17644: PUSH
17645: LD_INT 75
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17653: LD_VAR 0 6
17657: PPUSH
17658: CALL_OW 264
17662: PUSH
17663: LD_INT 26
17665: PUSH
17666: EMPTY
17667: LIST
17668: IN
17669: IFFALSE 17690
// points := [ 120 , 30 , 80 ] ;
17671: LD_ADDR_VAR 0 9
17675: PUSH
17676: LD_INT 120
17678: PUSH
17679: LD_INT 30
17681: PUSH
17682: LD_INT 80
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: LIST
17689: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17690: LD_VAR 0 6
17694: PPUSH
17695: CALL_OW 264
17699: PUSH
17700: LD_INT 22
17702: PUSH
17703: EMPTY
17704: LIST
17705: IN
17706: IFFALSE 17727
// points := [ 40 , 1 , 1 ] ;
17708: LD_ADDR_VAR 0 9
17712: PUSH
17713: LD_INT 40
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: LD_INT 1
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17727: LD_VAR 0 6
17731: PPUSH
17732: CALL_OW 264
17736: PUSH
17737: LD_INT 29
17739: PUSH
17740: EMPTY
17741: LIST
17742: IN
17743: IFFALSE 17764
// points := [ 70 , 200 , 400 ] ;
17745: LD_ADDR_VAR 0 9
17749: PUSH
17750: LD_INT 70
17752: PUSH
17753: LD_INT 200
17755: PUSH
17756: LD_INT 400
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17764: LD_VAR 0 6
17768: PPUSH
17769: CALL_OW 264
17773: PUSH
17774: LD_INT 14
17776: PUSH
17777: LD_INT 53
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: IN
17784: IFFALSE 17805
// points := [ 40 , 10 , 20 ] ;
17786: LD_ADDR_VAR 0 9
17790: PUSH
17791: LD_INT 40
17793: PUSH
17794: LD_INT 10
17796: PUSH
17797: LD_INT 20
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: LIST
17804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17805: LD_VAR 0 6
17809: PPUSH
17810: CALL_OW 264
17814: PUSH
17815: LD_INT 9
17817: PUSH
17818: EMPTY
17819: LIST
17820: IN
17821: IFFALSE 17842
// points := [ 5 , 70 , 20 ] ;
17823: LD_ADDR_VAR 0 9
17827: PUSH
17828: LD_INT 5
17830: PUSH
17831: LD_INT 70
17833: PUSH
17834: LD_INT 20
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: LIST
17841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17842: LD_VAR 0 6
17846: PPUSH
17847: CALL_OW 264
17851: PUSH
17852: LD_INT 10
17854: PUSH
17855: EMPTY
17856: LIST
17857: IN
17858: IFFALSE 17879
// points := [ 35 , 110 , 70 ] ;
17860: LD_ADDR_VAR 0 9
17864: PUSH
17865: LD_INT 35
17867: PUSH
17868: LD_INT 110
17870: PUSH
17871: LD_INT 70
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17879: LD_VAR 0 6
17883: PPUSH
17884: CALL_OW 265
17888: PUSH
17889: LD_INT 25
17891: EQUAL
17892: IFFALSE 17913
// points := [ 80 , 65 , 100 ] ;
17894: LD_ADDR_VAR 0 9
17898: PUSH
17899: LD_INT 80
17901: PUSH
17902: LD_INT 65
17904: PUSH
17905: LD_INT 100
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: LIST
17912: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17913: LD_VAR 0 6
17917: PPUSH
17918: CALL_OW 263
17922: PUSH
17923: LD_INT 1
17925: EQUAL
17926: IFFALSE 17961
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17928: LD_ADDR_VAR 0 10
17932: PUSH
17933: LD_VAR 0 10
17937: PUSH
17938: LD_VAR 0 6
17942: PPUSH
17943: CALL_OW 311
17947: PPUSH
17948: LD_INT 3
17950: PPUSH
17951: CALL_OW 259
17955: PUSH
17956: LD_INT 4
17958: MUL
17959: MUL
17960: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17961: LD_VAR 0 6
17965: PPUSH
17966: CALL_OW 263
17970: PUSH
17971: LD_INT 2
17973: EQUAL
17974: IFFALSE 18025
// begin j := IsControledBy ( i ) ;
17976: LD_ADDR_VAR 0 7
17980: PUSH
17981: LD_VAR 0 6
17985: PPUSH
17986: CALL_OW 312
17990: ST_TO_ADDR
// if j then
17991: LD_VAR 0 7
17995: IFFALSE 18025
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17997: LD_ADDR_VAR 0 10
18001: PUSH
18002: LD_VAR 0 10
18006: PUSH
18007: LD_VAR 0 7
18011: PPUSH
18012: LD_INT 3
18014: PPUSH
18015: CALL_OW 259
18019: PUSH
18020: LD_INT 3
18022: MUL
18023: MUL
18024: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18025: LD_VAR 0 6
18029: PPUSH
18030: CALL_OW 264
18034: PUSH
18035: LD_INT 5
18037: PUSH
18038: LD_INT 6
18040: PUSH
18041: LD_INT 46
18043: PUSH
18044: LD_INT 44
18046: PUSH
18047: LD_INT 47
18049: PUSH
18050: LD_INT 45
18052: PUSH
18053: LD_INT 28
18055: PUSH
18056: LD_INT 7
18058: PUSH
18059: LD_INT 27
18061: PUSH
18062: LD_INT 29
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: IN
18077: PUSH
18078: LD_VAR 0 1
18082: PPUSH
18083: LD_INT 52
18085: PPUSH
18086: CALL_OW 321
18090: PUSH
18091: LD_INT 2
18093: EQUAL
18094: AND
18095: IFFALSE 18112
// bpoints := bpoints * 1.2 ;
18097: LD_ADDR_VAR 0 10
18101: PUSH
18102: LD_VAR 0 10
18106: PUSH
18107: LD_REAL  1.20000000000000E+0000
18110: MUL
18111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18112: LD_VAR 0 6
18116: PPUSH
18117: CALL_OW 264
18121: PUSH
18122: LD_INT 6
18124: PUSH
18125: LD_INT 46
18127: PUSH
18128: LD_INT 47
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: LIST
18135: IN
18136: IFFALSE 18153
// bpoints := bpoints * 1.2 ;
18138: LD_ADDR_VAR 0 10
18142: PUSH
18143: LD_VAR 0 10
18147: PUSH
18148: LD_REAL  1.20000000000000E+0000
18151: MUL
18152: ST_TO_ADDR
// end ; unit_building :
18153: GO 18167
18155: LD_INT 3
18157: DOUBLE
18158: EQUAL
18159: IFTRUE 18163
18161: GO 18166
18163: POP
// ; end ;
18164: GO 18167
18166: POP
// for j = 1 to 3 do
18167: LD_ADDR_VAR 0 7
18171: PUSH
18172: DOUBLE
18173: LD_INT 1
18175: DEC
18176: ST_TO_ADDR
18177: LD_INT 3
18179: PUSH
18180: FOR_TO
18181: IFFALSE 18234
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18183: LD_ADDR_VAR 0 5
18187: PUSH
18188: LD_VAR 0 5
18192: PPUSH
18193: LD_VAR 0 7
18197: PPUSH
18198: LD_VAR 0 5
18202: PUSH
18203: LD_VAR 0 7
18207: ARRAY
18208: PUSH
18209: LD_VAR 0 9
18213: PUSH
18214: LD_VAR 0 7
18218: ARRAY
18219: PUSH
18220: LD_VAR 0 10
18224: MUL
18225: PLUS
18226: PPUSH
18227: CALL_OW 1
18231: ST_TO_ADDR
18232: GO 18180
18234: POP
18235: POP
// end ;
18236: GO 16715
18238: POP
18239: POP
// result := Replace ( result , 4 , tmp ) ;
18240: LD_ADDR_VAR 0 5
18244: PUSH
18245: LD_VAR 0 5
18249: PPUSH
18250: LD_INT 4
18252: PPUSH
18253: LD_VAR 0 8
18257: PPUSH
18258: CALL_OW 1
18262: ST_TO_ADDR
// end ;
18263: LD_VAR 0 5
18267: RET
// export function DangerAtRange ( unit , range ) ; begin
18268: LD_INT 0
18270: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18271: LD_ADDR_VAR 0 3
18275: PUSH
18276: LD_VAR 0 1
18280: PPUSH
18281: CALL_OW 255
18285: PPUSH
18286: LD_VAR 0 1
18290: PPUSH
18291: CALL_OW 250
18295: PPUSH
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL_OW 251
18305: PPUSH
18306: LD_VAR 0 2
18310: PPUSH
18311: CALL 16567 0 4
18315: ST_TO_ADDR
// end ;
18316: LD_VAR 0 3
18320: RET
// export function DangerInArea ( side , area ) ; begin
18321: LD_INT 0
18323: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18324: LD_ADDR_VAR 0 3
18328: PUSH
18329: LD_VAR 0 2
18333: PPUSH
18334: LD_INT 81
18336: PUSH
18337: LD_VAR 0 1
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PPUSH
18346: CALL_OW 70
18350: ST_TO_ADDR
// end ;
18351: LD_VAR 0 3
18355: RET
// export function IsExtension ( b ) ; begin
18356: LD_INT 0
18358: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18359: LD_ADDR_VAR 0 2
18363: PUSH
18364: LD_VAR 0 1
18368: PUSH
18369: LD_INT 23
18371: PUSH
18372: LD_INT 20
18374: PUSH
18375: LD_INT 22
18377: PUSH
18378: LD_INT 17
18380: PUSH
18381: LD_INT 24
18383: PUSH
18384: LD_INT 21
18386: PUSH
18387: LD_INT 19
18389: PUSH
18390: LD_INT 16
18392: PUSH
18393: LD_INT 25
18395: PUSH
18396: LD_INT 18
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: IN
18411: ST_TO_ADDR
// end ;
18412: LD_VAR 0 2
18416: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18417: LD_INT 0
18419: PPUSH
18420: PPUSH
18421: PPUSH
// result := [ ] ;
18422: LD_ADDR_VAR 0 4
18426: PUSH
18427: EMPTY
18428: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18429: LD_ADDR_VAR 0 5
18433: PUSH
18434: LD_VAR 0 2
18438: PPUSH
18439: LD_INT 21
18441: PUSH
18442: LD_INT 3
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PPUSH
18449: CALL_OW 70
18453: ST_TO_ADDR
// if not tmp then
18454: LD_VAR 0 5
18458: NOT
18459: IFFALSE 18463
// exit ;
18461: GO 18527
// if checkLink then
18463: LD_VAR 0 3
18467: IFFALSE 18517
// begin for i in tmp do
18469: LD_ADDR_VAR 0 6
18473: PUSH
18474: LD_VAR 0 5
18478: PUSH
18479: FOR_IN
18480: IFFALSE 18515
// if GetBase ( i ) <> base then
18482: LD_VAR 0 6
18486: PPUSH
18487: CALL_OW 274
18491: PUSH
18492: LD_VAR 0 1
18496: NONEQUAL
18497: IFFALSE 18513
// ComLinkToBase ( base , i ) ;
18499: LD_VAR 0 1
18503: PPUSH
18504: LD_VAR 0 6
18508: PPUSH
18509: CALL_OW 169
18513: GO 18479
18515: POP
18516: POP
// end ; result := tmp ;
18517: LD_ADDR_VAR 0 4
18521: PUSH
18522: LD_VAR 0 5
18526: ST_TO_ADDR
// end ;
18527: LD_VAR 0 4
18531: RET
// export function ComComplete ( units , b ) ; var i ; begin
18532: LD_INT 0
18534: PPUSH
18535: PPUSH
// if not units then
18536: LD_VAR 0 1
18540: NOT
18541: IFFALSE 18545
// exit ;
18543: GO 18635
// for i in units do
18545: LD_ADDR_VAR 0 4
18549: PUSH
18550: LD_VAR 0 1
18554: PUSH
18555: FOR_IN
18556: IFFALSE 18633
// if BuildingStatus ( b ) = bs_build then
18558: LD_VAR 0 2
18562: PPUSH
18563: CALL_OW 461
18567: PUSH
18568: LD_INT 1
18570: EQUAL
18571: IFFALSE 18631
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18573: LD_VAR 0 4
18577: PPUSH
18578: LD_STRING h
18580: PUSH
18581: LD_VAR 0 2
18585: PPUSH
18586: CALL_OW 250
18590: PUSH
18591: LD_VAR 0 2
18595: PPUSH
18596: CALL_OW 251
18600: PUSH
18601: LD_VAR 0 2
18605: PUSH
18606: LD_INT 0
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: LD_INT 0
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: PUSH
18624: EMPTY
18625: LIST
18626: PPUSH
18627: CALL_OW 446
18631: GO 18555
18633: POP
18634: POP
// end ;
18635: LD_VAR 0 3
18639: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18640: LD_INT 0
18642: PPUSH
18643: PPUSH
18644: PPUSH
18645: PPUSH
18646: PPUSH
18647: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18648: LD_VAR 0 1
18652: NOT
18653: PUSH
18654: LD_VAR 0 1
18658: PPUSH
18659: CALL_OW 263
18663: PUSH
18664: LD_INT 2
18666: NONEQUAL
18667: OR
18668: IFFALSE 18672
// exit ;
18670: GO 18988
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18672: LD_ADDR_VAR 0 6
18676: PUSH
18677: LD_INT 22
18679: PUSH
18680: LD_VAR 0 1
18684: PPUSH
18685: CALL_OW 255
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 2
18696: PUSH
18697: LD_INT 30
18699: PUSH
18700: LD_INT 36
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 34
18709: PUSH
18710: LD_INT 31
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PPUSH
18726: CALL_OW 69
18730: ST_TO_ADDR
// if not tmp then
18731: LD_VAR 0 6
18735: NOT
18736: IFFALSE 18740
// exit ;
18738: GO 18988
// result := [ ] ;
18740: LD_ADDR_VAR 0 2
18744: PUSH
18745: EMPTY
18746: ST_TO_ADDR
// for i in tmp do
18747: LD_ADDR_VAR 0 3
18751: PUSH
18752: LD_VAR 0 6
18756: PUSH
18757: FOR_IN
18758: IFFALSE 18829
// begin t := UnitsInside ( i ) ;
18760: LD_ADDR_VAR 0 4
18764: PUSH
18765: LD_VAR 0 3
18769: PPUSH
18770: CALL_OW 313
18774: ST_TO_ADDR
// if t then
18775: LD_VAR 0 4
18779: IFFALSE 18827
// for j in t do
18781: LD_ADDR_VAR 0 7
18785: PUSH
18786: LD_VAR 0 4
18790: PUSH
18791: FOR_IN
18792: IFFALSE 18825
// result := Replace ( result , result + 1 , j ) ;
18794: LD_ADDR_VAR 0 2
18798: PUSH
18799: LD_VAR 0 2
18803: PPUSH
18804: LD_VAR 0 2
18808: PUSH
18809: LD_INT 1
18811: PLUS
18812: PPUSH
18813: LD_VAR 0 7
18817: PPUSH
18818: CALL_OW 1
18822: ST_TO_ADDR
18823: GO 18791
18825: POP
18826: POP
// end ;
18827: GO 18757
18829: POP
18830: POP
// if not result then
18831: LD_VAR 0 2
18835: NOT
18836: IFFALSE 18840
// exit ;
18838: GO 18988
// mech := result [ 1 ] ;
18840: LD_ADDR_VAR 0 5
18844: PUSH
18845: LD_VAR 0 2
18849: PUSH
18850: LD_INT 1
18852: ARRAY
18853: ST_TO_ADDR
// if result > 1 then
18854: LD_VAR 0 2
18858: PUSH
18859: LD_INT 1
18861: GREATER
18862: IFFALSE 18974
// begin for i = 2 to result do
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: DOUBLE
18870: LD_INT 2
18872: DEC
18873: ST_TO_ADDR
18874: LD_VAR 0 2
18878: PUSH
18879: FOR_TO
18880: IFFALSE 18972
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18882: LD_ADDR_VAR 0 4
18886: PUSH
18887: LD_VAR 0 2
18891: PUSH
18892: LD_VAR 0 3
18896: ARRAY
18897: PPUSH
18898: LD_INT 3
18900: PPUSH
18901: CALL_OW 259
18905: PUSH
18906: LD_VAR 0 2
18910: PUSH
18911: LD_VAR 0 3
18915: ARRAY
18916: PPUSH
18917: CALL_OW 432
18921: MINUS
18922: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18923: LD_VAR 0 4
18927: PUSH
18928: LD_VAR 0 5
18932: PPUSH
18933: LD_INT 3
18935: PPUSH
18936: CALL_OW 259
18940: PUSH
18941: LD_VAR 0 5
18945: PPUSH
18946: CALL_OW 432
18950: MINUS
18951: GREATEREQUAL
18952: IFFALSE 18970
// mech := result [ i ] ;
18954: LD_ADDR_VAR 0 5
18958: PUSH
18959: LD_VAR 0 2
18963: PUSH
18964: LD_VAR 0 3
18968: ARRAY
18969: ST_TO_ADDR
// end ;
18970: GO 18879
18972: POP
18973: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18974: LD_VAR 0 1
18978: PPUSH
18979: LD_VAR 0 5
18983: PPUSH
18984: CALL_OW 135
// end ;
18988: LD_VAR 0 2
18992: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18993: LD_INT 0
18995: PPUSH
18996: PPUSH
18997: PPUSH
18998: PPUSH
18999: PPUSH
19000: PPUSH
19001: PPUSH
19002: PPUSH
19003: PPUSH
19004: PPUSH
19005: PPUSH
19006: PPUSH
19007: PPUSH
// result := [ ] ;
19008: LD_ADDR_VAR 0 7
19012: PUSH
19013: EMPTY
19014: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19015: LD_VAR 0 1
19019: PPUSH
19020: CALL_OW 266
19024: PUSH
19025: LD_INT 0
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: IN
19035: NOT
19036: IFFALSE 19040
// exit ;
19038: GO 20674
// if name then
19040: LD_VAR 0 3
19044: IFFALSE 19060
// SetBName ( base_dep , name ) ;
19046: LD_VAR 0 1
19050: PPUSH
19051: LD_VAR 0 3
19055: PPUSH
19056: CALL_OW 500
// base := GetBase ( base_dep ) ;
19060: LD_ADDR_VAR 0 15
19064: PUSH
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 274
19074: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19075: LD_ADDR_VAR 0 16
19079: PUSH
19080: LD_VAR 0 1
19084: PPUSH
19085: CALL_OW 255
19089: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19090: LD_ADDR_VAR 0 17
19094: PUSH
19095: LD_VAR 0 1
19099: PPUSH
19100: CALL_OW 248
19104: ST_TO_ADDR
// if sources then
19105: LD_VAR 0 5
19109: IFFALSE 19156
// for i = 1 to 3 do
19111: LD_ADDR_VAR 0 8
19115: PUSH
19116: DOUBLE
19117: LD_INT 1
19119: DEC
19120: ST_TO_ADDR
19121: LD_INT 3
19123: PUSH
19124: FOR_TO
19125: IFFALSE 19154
// AddResourceType ( base , i , sources [ i ] ) ;
19127: LD_VAR 0 15
19131: PPUSH
19132: LD_VAR 0 8
19136: PPUSH
19137: LD_VAR 0 5
19141: PUSH
19142: LD_VAR 0 8
19146: ARRAY
19147: PPUSH
19148: CALL_OW 276
19152: GO 19124
19154: POP
19155: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19156: LD_ADDR_VAR 0 18
19160: PUSH
19161: LD_VAR 0 15
19165: PPUSH
19166: LD_VAR 0 2
19170: PPUSH
19171: LD_INT 1
19173: PPUSH
19174: CALL 18417 0 3
19178: ST_TO_ADDR
// InitHc ;
19179: CALL_OW 19
// InitUc ;
19183: CALL_OW 18
// uc_side := side ;
19187: LD_ADDR_OWVAR 20
19191: PUSH
19192: LD_VAR 0 16
19196: ST_TO_ADDR
// uc_nation := nation ;
19197: LD_ADDR_OWVAR 21
19201: PUSH
19202: LD_VAR 0 17
19206: ST_TO_ADDR
// if buildings then
19207: LD_VAR 0 18
19211: IFFALSE 20533
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19213: LD_ADDR_VAR 0 19
19217: PUSH
19218: LD_VAR 0 18
19222: PPUSH
19223: LD_INT 2
19225: PUSH
19226: LD_INT 30
19228: PUSH
19229: LD_INT 29
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 30
19238: PUSH
19239: LD_INT 30
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: LIST
19250: PPUSH
19251: CALL_OW 72
19255: ST_TO_ADDR
// if tmp then
19256: LD_VAR 0 19
19260: IFFALSE 19308
// for i in tmp do
19262: LD_ADDR_VAR 0 8
19266: PUSH
19267: LD_VAR 0 19
19271: PUSH
19272: FOR_IN
19273: IFFALSE 19306
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19275: LD_VAR 0 8
19279: PPUSH
19280: CALL_OW 250
19284: PPUSH
19285: LD_VAR 0 8
19289: PPUSH
19290: CALL_OW 251
19294: PPUSH
19295: LD_VAR 0 16
19299: PPUSH
19300: CALL_OW 441
19304: GO 19272
19306: POP
19307: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19308: LD_VAR 0 18
19312: PPUSH
19313: LD_INT 2
19315: PUSH
19316: LD_INT 30
19318: PUSH
19319: LD_INT 32
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 30
19328: PUSH
19329: LD_INT 33
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: LIST
19340: PPUSH
19341: CALL_OW 72
19345: IFFALSE 19433
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19347: LD_ADDR_VAR 0 8
19351: PUSH
19352: LD_VAR 0 18
19356: PPUSH
19357: LD_INT 2
19359: PUSH
19360: LD_INT 30
19362: PUSH
19363: LD_INT 32
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 30
19372: PUSH
19373: LD_INT 33
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: PPUSH
19385: CALL_OW 72
19389: PUSH
19390: FOR_IN
19391: IFFALSE 19431
// begin if not GetBWeapon ( i ) then
19393: LD_VAR 0 8
19397: PPUSH
19398: CALL_OW 269
19402: NOT
19403: IFFALSE 19429
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19405: LD_VAR 0 8
19409: PPUSH
19410: LD_VAR 0 8
19414: PPUSH
19415: LD_VAR 0 2
19419: PPUSH
19420: CALL 20679 0 2
19424: PPUSH
19425: CALL_OW 431
// end ;
19429: GO 19390
19431: POP
19432: POP
// end ; for i = 1 to personel do
19433: LD_ADDR_VAR 0 8
19437: PUSH
19438: DOUBLE
19439: LD_INT 1
19441: DEC
19442: ST_TO_ADDR
19443: LD_VAR 0 6
19447: PUSH
19448: FOR_TO
19449: IFFALSE 20513
// begin if i > 4 then
19451: LD_VAR 0 8
19455: PUSH
19456: LD_INT 4
19458: GREATER
19459: IFFALSE 19463
// break ;
19461: GO 20513
// case i of 1 :
19463: LD_VAR 0 8
19467: PUSH
19468: LD_INT 1
19470: DOUBLE
19471: EQUAL
19472: IFTRUE 19476
19474: GO 19556
19476: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19477: LD_ADDR_VAR 0 12
19481: PUSH
19482: LD_VAR 0 18
19486: PPUSH
19487: LD_INT 22
19489: PUSH
19490: LD_VAR 0 16
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 58
19501: PUSH
19502: EMPTY
19503: LIST
19504: PUSH
19505: LD_INT 2
19507: PUSH
19508: LD_INT 30
19510: PUSH
19511: LD_INT 32
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 30
19520: PUSH
19521: LD_INT 4
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 30
19530: PUSH
19531: LD_INT 5
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: LIST
19548: PPUSH
19549: CALL_OW 72
19553: ST_TO_ADDR
19554: GO 19778
19556: LD_INT 2
19558: DOUBLE
19559: EQUAL
19560: IFTRUE 19564
19562: GO 19626
19564: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19565: LD_ADDR_VAR 0 12
19569: PUSH
19570: LD_VAR 0 18
19574: PPUSH
19575: LD_INT 22
19577: PUSH
19578: LD_VAR 0 16
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: LD_INT 30
19592: PUSH
19593: LD_INT 0
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 30
19602: PUSH
19603: LD_INT 1
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PPUSH
19619: CALL_OW 72
19623: ST_TO_ADDR
19624: GO 19778
19626: LD_INT 3
19628: DOUBLE
19629: EQUAL
19630: IFTRUE 19634
19632: GO 19696
19634: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19635: LD_ADDR_VAR 0 12
19639: PUSH
19640: LD_VAR 0 18
19644: PPUSH
19645: LD_INT 22
19647: PUSH
19648: LD_VAR 0 16
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: LD_INT 30
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 30
19672: PUSH
19673: LD_INT 3
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: LIST
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PPUSH
19689: CALL_OW 72
19693: ST_TO_ADDR
19694: GO 19778
19696: LD_INT 4
19698: DOUBLE
19699: EQUAL
19700: IFTRUE 19704
19702: GO 19777
19704: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19705: LD_ADDR_VAR 0 12
19709: PUSH
19710: LD_VAR 0 18
19714: PPUSH
19715: LD_INT 22
19717: PUSH
19718: LD_VAR 0 16
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 2
19729: PUSH
19730: LD_INT 30
19732: PUSH
19733: LD_INT 6
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 30
19742: PUSH
19743: LD_INT 7
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 30
19752: PUSH
19753: LD_INT 8
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PPUSH
19770: CALL_OW 72
19774: ST_TO_ADDR
19775: GO 19778
19777: POP
// if i = 1 then
19778: LD_VAR 0 8
19782: PUSH
19783: LD_INT 1
19785: EQUAL
19786: IFFALSE 19897
// begin tmp := [ ] ;
19788: LD_ADDR_VAR 0 19
19792: PUSH
19793: EMPTY
19794: ST_TO_ADDR
// for j in f do
19795: LD_ADDR_VAR 0 9
19799: PUSH
19800: LD_VAR 0 12
19804: PUSH
19805: FOR_IN
19806: IFFALSE 19879
// if GetBType ( j ) = b_bunker then
19808: LD_VAR 0 9
19812: PPUSH
19813: CALL_OW 266
19817: PUSH
19818: LD_INT 32
19820: EQUAL
19821: IFFALSE 19848
// tmp := Insert ( tmp , 1 , j ) else
19823: LD_ADDR_VAR 0 19
19827: PUSH
19828: LD_VAR 0 19
19832: PPUSH
19833: LD_INT 1
19835: PPUSH
19836: LD_VAR 0 9
19840: PPUSH
19841: CALL_OW 2
19845: ST_TO_ADDR
19846: GO 19877
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19848: LD_ADDR_VAR 0 19
19852: PUSH
19853: LD_VAR 0 19
19857: PPUSH
19858: LD_VAR 0 19
19862: PUSH
19863: LD_INT 1
19865: PLUS
19866: PPUSH
19867: LD_VAR 0 9
19871: PPUSH
19872: CALL_OW 2
19876: ST_TO_ADDR
19877: GO 19805
19879: POP
19880: POP
// if tmp then
19881: LD_VAR 0 19
19885: IFFALSE 19897
// f := tmp ;
19887: LD_ADDR_VAR 0 12
19891: PUSH
19892: LD_VAR 0 19
19896: ST_TO_ADDR
// end ; x := personel [ i ] ;
19897: LD_ADDR_VAR 0 13
19901: PUSH
19902: LD_VAR 0 6
19906: PUSH
19907: LD_VAR 0 8
19911: ARRAY
19912: ST_TO_ADDR
// if x = - 1 then
19913: LD_VAR 0 13
19917: PUSH
19918: LD_INT 1
19920: NEG
19921: EQUAL
19922: IFFALSE 20131
// begin for j in f do
19924: LD_ADDR_VAR 0 9
19928: PUSH
19929: LD_VAR 0 12
19933: PUSH
19934: FOR_IN
19935: IFFALSE 20127
// repeat InitHc ;
19937: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19941: LD_VAR 0 9
19945: PPUSH
19946: CALL_OW 266
19950: PUSH
19951: LD_INT 5
19953: EQUAL
19954: IFFALSE 20024
// begin if UnitsInside ( j ) < 3 then
19956: LD_VAR 0 9
19960: PPUSH
19961: CALL_OW 313
19965: PUSH
19966: LD_INT 3
19968: LESS
19969: IFFALSE 20005
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19971: LD_INT 0
19973: PPUSH
19974: LD_INT 5
19976: PUSH
19977: LD_INT 8
19979: PUSH
19980: LD_INT 9
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: LIST
19987: PUSH
19988: LD_VAR 0 17
19992: ARRAY
19993: PPUSH
19994: LD_VAR 0 4
19998: PPUSH
19999: CALL_OW 380
20003: GO 20022
// PrepareHuman ( false , i , skill ) ;
20005: LD_INT 0
20007: PPUSH
20008: LD_VAR 0 8
20012: PPUSH
20013: LD_VAR 0 4
20017: PPUSH
20018: CALL_OW 380
// end else
20022: GO 20041
// PrepareHuman ( false , i , skill ) ;
20024: LD_INT 0
20026: PPUSH
20027: LD_VAR 0 8
20031: PPUSH
20032: LD_VAR 0 4
20036: PPUSH
20037: CALL_OW 380
// un := CreateHuman ;
20041: LD_ADDR_VAR 0 14
20045: PUSH
20046: CALL_OW 44
20050: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20051: LD_ADDR_VAR 0 7
20055: PUSH
20056: LD_VAR 0 7
20060: PPUSH
20061: LD_INT 1
20063: PPUSH
20064: LD_VAR 0 14
20068: PPUSH
20069: CALL_OW 2
20073: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20074: LD_VAR 0 14
20078: PPUSH
20079: LD_VAR 0 9
20083: PPUSH
20084: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20088: LD_VAR 0 9
20092: PPUSH
20093: CALL_OW 313
20097: PUSH
20098: LD_INT 6
20100: EQUAL
20101: PUSH
20102: LD_VAR 0 9
20106: PPUSH
20107: CALL_OW 266
20111: PUSH
20112: LD_INT 32
20114: PUSH
20115: LD_INT 31
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: IN
20122: OR
20123: IFFALSE 19937
20125: GO 19934
20127: POP
20128: POP
// end else
20129: GO 20511
// for j = 1 to x do
20131: LD_ADDR_VAR 0 9
20135: PUSH
20136: DOUBLE
20137: LD_INT 1
20139: DEC
20140: ST_TO_ADDR
20141: LD_VAR 0 13
20145: PUSH
20146: FOR_TO
20147: IFFALSE 20509
// begin InitHc ;
20149: CALL_OW 19
// if not f then
20153: LD_VAR 0 12
20157: NOT
20158: IFFALSE 20247
// begin PrepareHuman ( false , i , skill ) ;
20160: LD_INT 0
20162: PPUSH
20163: LD_VAR 0 8
20167: PPUSH
20168: LD_VAR 0 4
20172: PPUSH
20173: CALL_OW 380
// un := CreateHuman ;
20177: LD_ADDR_VAR 0 14
20181: PUSH
20182: CALL_OW 44
20186: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20187: LD_ADDR_VAR 0 7
20191: PUSH
20192: LD_VAR 0 7
20196: PPUSH
20197: LD_INT 1
20199: PPUSH
20200: LD_VAR 0 14
20204: PPUSH
20205: CALL_OW 2
20209: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20210: LD_VAR 0 14
20214: PPUSH
20215: LD_VAR 0 1
20219: PPUSH
20220: CALL_OW 250
20224: PPUSH
20225: LD_VAR 0 1
20229: PPUSH
20230: CALL_OW 251
20234: PPUSH
20235: LD_INT 10
20237: PPUSH
20238: LD_INT 0
20240: PPUSH
20241: CALL_OW 50
// continue ;
20245: GO 20146
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20247: LD_VAR 0 12
20251: PUSH
20252: LD_INT 1
20254: ARRAY
20255: PPUSH
20256: CALL_OW 313
20260: PUSH
20261: LD_VAR 0 12
20265: PUSH
20266: LD_INT 1
20268: ARRAY
20269: PPUSH
20270: CALL_OW 266
20274: PUSH
20275: LD_INT 32
20277: PUSH
20278: LD_INT 31
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: IN
20285: AND
20286: PUSH
20287: LD_VAR 0 12
20291: PUSH
20292: LD_INT 1
20294: ARRAY
20295: PPUSH
20296: CALL_OW 313
20300: PUSH
20301: LD_INT 6
20303: EQUAL
20304: OR
20305: IFFALSE 20325
// f := Delete ( f , 1 ) ;
20307: LD_ADDR_VAR 0 12
20311: PUSH
20312: LD_VAR 0 12
20316: PPUSH
20317: LD_INT 1
20319: PPUSH
20320: CALL_OW 3
20324: ST_TO_ADDR
// if not f then
20325: LD_VAR 0 12
20329: NOT
20330: IFFALSE 20348
// begin x := x + 2 ;
20332: LD_ADDR_VAR 0 13
20336: PUSH
20337: LD_VAR 0 13
20341: PUSH
20342: LD_INT 2
20344: PLUS
20345: ST_TO_ADDR
// continue ;
20346: GO 20146
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20348: LD_VAR 0 12
20352: PUSH
20353: LD_INT 1
20355: ARRAY
20356: PPUSH
20357: CALL_OW 266
20361: PUSH
20362: LD_INT 5
20364: EQUAL
20365: IFFALSE 20439
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20367: LD_VAR 0 12
20371: PUSH
20372: LD_INT 1
20374: ARRAY
20375: PPUSH
20376: CALL_OW 313
20380: PUSH
20381: LD_INT 3
20383: LESS
20384: IFFALSE 20420
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20386: LD_INT 0
20388: PPUSH
20389: LD_INT 5
20391: PUSH
20392: LD_INT 8
20394: PUSH
20395: LD_INT 9
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: LIST
20402: PUSH
20403: LD_VAR 0 17
20407: ARRAY
20408: PPUSH
20409: LD_VAR 0 4
20413: PPUSH
20414: CALL_OW 380
20418: GO 20437
// PrepareHuman ( false , i , skill ) ;
20420: LD_INT 0
20422: PPUSH
20423: LD_VAR 0 8
20427: PPUSH
20428: LD_VAR 0 4
20432: PPUSH
20433: CALL_OW 380
// end else
20437: GO 20456
// PrepareHuman ( false , i , skill ) ;
20439: LD_INT 0
20441: PPUSH
20442: LD_VAR 0 8
20446: PPUSH
20447: LD_VAR 0 4
20451: PPUSH
20452: CALL_OW 380
// un := CreateHuman ;
20456: LD_ADDR_VAR 0 14
20460: PUSH
20461: CALL_OW 44
20465: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20466: LD_ADDR_VAR 0 7
20470: PUSH
20471: LD_VAR 0 7
20475: PPUSH
20476: LD_INT 1
20478: PPUSH
20479: LD_VAR 0 14
20483: PPUSH
20484: CALL_OW 2
20488: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20489: LD_VAR 0 14
20493: PPUSH
20494: LD_VAR 0 12
20498: PUSH
20499: LD_INT 1
20501: ARRAY
20502: PPUSH
20503: CALL_OW 52
// end ;
20507: GO 20146
20509: POP
20510: POP
// end ;
20511: GO 19448
20513: POP
20514: POP
// result := result ^ buildings ;
20515: LD_ADDR_VAR 0 7
20519: PUSH
20520: LD_VAR 0 7
20524: PUSH
20525: LD_VAR 0 18
20529: ADD
20530: ST_TO_ADDR
// end else
20531: GO 20674
// begin for i = 1 to personel do
20533: LD_ADDR_VAR 0 8
20537: PUSH
20538: DOUBLE
20539: LD_INT 1
20541: DEC
20542: ST_TO_ADDR
20543: LD_VAR 0 6
20547: PUSH
20548: FOR_TO
20549: IFFALSE 20672
// begin if i > 4 then
20551: LD_VAR 0 8
20555: PUSH
20556: LD_INT 4
20558: GREATER
20559: IFFALSE 20563
// break ;
20561: GO 20672
// x := personel [ i ] ;
20563: LD_ADDR_VAR 0 13
20567: PUSH
20568: LD_VAR 0 6
20572: PUSH
20573: LD_VAR 0 8
20577: ARRAY
20578: ST_TO_ADDR
// if x = - 1 then
20579: LD_VAR 0 13
20583: PUSH
20584: LD_INT 1
20586: NEG
20587: EQUAL
20588: IFFALSE 20592
// continue ;
20590: GO 20548
// PrepareHuman ( false , i , skill ) ;
20592: LD_INT 0
20594: PPUSH
20595: LD_VAR 0 8
20599: PPUSH
20600: LD_VAR 0 4
20604: PPUSH
20605: CALL_OW 380
// un := CreateHuman ;
20609: LD_ADDR_VAR 0 14
20613: PUSH
20614: CALL_OW 44
20618: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20619: LD_VAR 0 14
20623: PPUSH
20624: LD_VAR 0 1
20628: PPUSH
20629: CALL_OW 250
20633: PPUSH
20634: LD_VAR 0 1
20638: PPUSH
20639: CALL_OW 251
20643: PPUSH
20644: LD_INT 10
20646: PPUSH
20647: LD_INT 0
20649: PPUSH
20650: CALL_OW 50
// result := result ^ un ;
20654: LD_ADDR_VAR 0 7
20658: PUSH
20659: LD_VAR 0 7
20663: PUSH
20664: LD_VAR 0 14
20668: ADD
20669: ST_TO_ADDR
// end ;
20670: GO 20548
20672: POP
20673: POP
// end ; end ;
20674: LD_VAR 0 7
20678: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20679: LD_INT 0
20681: PPUSH
20682: PPUSH
20683: PPUSH
20684: PPUSH
20685: PPUSH
20686: PPUSH
20687: PPUSH
20688: PPUSH
20689: PPUSH
20690: PPUSH
20691: PPUSH
20692: PPUSH
20693: PPUSH
20694: PPUSH
20695: PPUSH
20696: PPUSH
// result := false ;
20697: LD_ADDR_VAR 0 3
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20705: LD_VAR 0 1
20709: NOT
20710: PUSH
20711: LD_VAR 0 1
20715: PPUSH
20716: CALL_OW 266
20720: PUSH
20721: LD_INT 32
20723: PUSH
20724: LD_INT 33
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: IN
20731: NOT
20732: OR
20733: IFFALSE 20737
// exit ;
20735: GO 21846
// nat := GetNation ( tower ) ;
20737: LD_ADDR_VAR 0 12
20741: PUSH
20742: LD_VAR 0 1
20746: PPUSH
20747: CALL_OW 248
20751: ST_TO_ADDR
// side := GetSide ( tower ) ;
20752: LD_ADDR_VAR 0 16
20756: PUSH
20757: LD_VAR 0 1
20761: PPUSH
20762: CALL_OW 255
20766: ST_TO_ADDR
// x := GetX ( tower ) ;
20767: LD_ADDR_VAR 0 10
20771: PUSH
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL_OW 250
20781: ST_TO_ADDR
// y := GetY ( tower ) ;
20782: LD_ADDR_VAR 0 11
20786: PUSH
20787: LD_VAR 0 1
20791: PPUSH
20792: CALL_OW 251
20796: ST_TO_ADDR
// if not x or not y then
20797: LD_VAR 0 10
20801: NOT
20802: PUSH
20803: LD_VAR 0 11
20807: NOT
20808: OR
20809: IFFALSE 20813
// exit ;
20811: GO 21846
// weapon := 0 ;
20813: LD_ADDR_VAR 0 18
20817: PUSH
20818: LD_INT 0
20820: ST_TO_ADDR
// fac_list := [ ] ;
20821: LD_ADDR_VAR 0 17
20825: PUSH
20826: EMPTY
20827: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20828: LD_ADDR_VAR 0 6
20832: PUSH
20833: LD_VAR 0 1
20837: PPUSH
20838: CALL_OW 274
20842: PPUSH
20843: LD_VAR 0 2
20847: PPUSH
20848: LD_INT 0
20850: PPUSH
20851: CALL 18417 0 3
20855: PPUSH
20856: LD_INT 30
20858: PUSH
20859: LD_INT 3
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PPUSH
20866: CALL_OW 72
20870: ST_TO_ADDR
// if not factories then
20871: LD_VAR 0 6
20875: NOT
20876: IFFALSE 20880
// exit ;
20878: GO 21846
// for i in factories do
20880: LD_ADDR_VAR 0 8
20884: PUSH
20885: LD_VAR 0 6
20889: PUSH
20890: FOR_IN
20891: IFFALSE 20916
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20893: LD_ADDR_VAR 0 17
20897: PUSH
20898: LD_VAR 0 17
20902: PUSH
20903: LD_VAR 0 8
20907: PPUSH
20908: CALL_OW 478
20912: UNION
20913: ST_TO_ADDR
20914: GO 20890
20916: POP
20917: POP
// if not fac_list then
20918: LD_VAR 0 17
20922: NOT
20923: IFFALSE 20927
// exit ;
20925: GO 21846
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20927: LD_ADDR_VAR 0 5
20931: PUSH
20932: LD_INT 4
20934: PUSH
20935: LD_INT 5
20937: PUSH
20938: LD_INT 9
20940: PUSH
20941: LD_INT 10
20943: PUSH
20944: LD_INT 6
20946: PUSH
20947: LD_INT 7
20949: PUSH
20950: LD_INT 11
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 27
20964: PUSH
20965: LD_INT 28
20967: PUSH
20968: LD_INT 26
20970: PUSH
20971: LD_INT 30
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 43
20982: PUSH
20983: LD_INT 44
20985: PUSH
20986: LD_INT 46
20988: PUSH
20989: LD_INT 45
20991: PUSH
20992: LD_INT 47
20994: PUSH
20995: LD_INT 49
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: LIST
21010: PUSH
21011: LD_VAR 0 12
21015: ARRAY
21016: ST_TO_ADDR
// list := list isect fac_list ;
21017: LD_ADDR_VAR 0 5
21021: PUSH
21022: LD_VAR 0 5
21026: PUSH
21027: LD_VAR 0 17
21031: ISECT
21032: ST_TO_ADDR
// if not list then
21033: LD_VAR 0 5
21037: NOT
21038: IFFALSE 21042
// exit ;
21040: GO 21846
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21042: LD_VAR 0 12
21046: PUSH
21047: LD_INT 3
21049: EQUAL
21050: PUSH
21051: LD_INT 49
21053: PUSH
21054: LD_VAR 0 5
21058: IN
21059: AND
21060: PUSH
21061: LD_INT 31
21063: PPUSH
21064: LD_VAR 0 16
21068: PPUSH
21069: CALL_OW 321
21073: PUSH
21074: LD_INT 2
21076: EQUAL
21077: AND
21078: IFFALSE 21138
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21080: LD_INT 22
21082: PUSH
21083: LD_VAR 0 16
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 35
21094: PUSH
21095: LD_INT 49
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 91
21104: PUSH
21105: LD_VAR 0 1
21109: PUSH
21110: LD_INT 10
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: LIST
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: PPUSH
21123: CALL_OW 69
21127: NOT
21128: IFFALSE 21138
// weapon := ru_time_lapser ;
21130: LD_ADDR_VAR 0 18
21134: PUSH
21135: LD_INT 49
21137: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21138: LD_VAR 0 12
21142: PUSH
21143: LD_INT 1
21145: PUSH
21146: LD_INT 2
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: IN
21153: PUSH
21154: LD_INT 11
21156: PUSH
21157: LD_VAR 0 5
21161: IN
21162: PUSH
21163: LD_INT 30
21165: PUSH
21166: LD_VAR 0 5
21170: IN
21171: OR
21172: AND
21173: PUSH
21174: LD_INT 6
21176: PPUSH
21177: LD_VAR 0 16
21181: PPUSH
21182: CALL_OW 321
21186: PUSH
21187: LD_INT 2
21189: EQUAL
21190: AND
21191: IFFALSE 21356
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21193: LD_INT 22
21195: PUSH
21196: LD_VAR 0 16
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 35
21210: PUSH
21211: LD_INT 11
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 35
21220: PUSH
21221: LD_INT 30
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 91
21235: PUSH
21236: LD_VAR 0 1
21240: PUSH
21241: LD_INT 18
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: LIST
21253: PPUSH
21254: CALL_OW 69
21258: NOT
21259: PUSH
21260: LD_INT 22
21262: PUSH
21263: LD_VAR 0 16
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 2
21274: PUSH
21275: LD_INT 30
21277: PUSH
21278: LD_INT 32
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 30
21287: PUSH
21288: LD_INT 33
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 91
21302: PUSH
21303: LD_VAR 0 1
21307: PUSH
21308: LD_INT 12
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: PPUSH
21324: CALL_OW 69
21328: PUSH
21329: LD_INT 2
21331: GREATER
21332: AND
21333: IFFALSE 21356
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21335: LD_ADDR_VAR 0 18
21339: PUSH
21340: LD_INT 11
21342: PUSH
21343: LD_INT 30
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_VAR 0 12
21354: ARRAY
21355: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21356: LD_VAR 0 18
21360: NOT
21361: PUSH
21362: LD_INT 40
21364: PPUSH
21365: LD_VAR 0 16
21369: PPUSH
21370: CALL_OW 321
21374: PUSH
21375: LD_INT 2
21377: EQUAL
21378: AND
21379: PUSH
21380: LD_INT 7
21382: PUSH
21383: LD_VAR 0 5
21387: IN
21388: PUSH
21389: LD_INT 28
21391: PUSH
21392: LD_VAR 0 5
21396: IN
21397: OR
21398: PUSH
21399: LD_INT 45
21401: PUSH
21402: LD_VAR 0 5
21406: IN
21407: OR
21408: AND
21409: IFFALSE 21663
// begin hex := GetHexInfo ( x , y ) ;
21411: LD_ADDR_VAR 0 4
21415: PUSH
21416: LD_VAR 0 10
21420: PPUSH
21421: LD_VAR 0 11
21425: PPUSH
21426: CALL_OW 546
21430: ST_TO_ADDR
// if hex [ 1 ] then
21431: LD_VAR 0 4
21435: PUSH
21436: LD_INT 1
21438: ARRAY
21439: IFFALSE 21443
// exit ;
21441: GO 21846
// height := hex [ 2 ] ;
21443: LD_ADDR_VAR 0 15
21447: PUSH
21448: LD_VAR 0 4
21452: PUSH
21453: LD_INT 2
21455: ARRAY
21456: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21457: LD_ADDR_VAR 0 14
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: LD_INT 3
21470: PUSH
21471: LD_INT 5
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: ST_TO_ADDR
// for i in tmp do
21480: LD_ADDR_VAR 0 8
21484: PUSH
21485: LD_VAR 0 14
21489: PUSH
21490: FOR_IN
21491: IFFALSE 21661
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21493: LD_ADDR_VAR 0 9
21497: PUSH
21498: LD_VAR 0 10
21502: PPUSH
21503: LD_VAR 0 8
21507: PPUSH
21508: LD_INT 5
21510: PPUSH
21511: CALL_OW 272
21515: PUSH
21516: LD_VAR 0 11
21520: PPUSH
21521: LD_VAR 0 8
21525: PPUSH
21526: LD_INT 5
21528: PPUSH
21529: CALL_OW 273
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21538: LD_VAR 0 9
21542: PUSH
21543: LD_INT 1
21545: ARRAY
21546: PPUSH
21547: LD_VAR 0 9
21551: PUSH
21552: LD_INT 2
21554: ARRAY
21555: PPUSH
21556: CALL_OW 488
21560: IFFALSE 21659
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21562: LD_ADDR_VAR 0 4
21566: PUSH
21567: LD_VAR 0 9
21571: PUSH
21572: LD_INT 1
21574: ARRAY
21575: PPUSH
21576: LD_VAR 0 9
21580: PUSH
21581: LD_INT 2
21583: ARRAY
21584: PPUSH
21585: CALL_OW 546
21589: ST_TO_ADDR
// if hex [ 1 ] then
21590: LD_VAR 0 4
21594: PUSH
21595: LD_INT 1
21597: ARRAY
21598: IFFALSE 21602
// continue ;
21600: GO 21490
// h := hex [ 2 ] ;
21602: LD_ADDR_VAR 0 13
21606: PUSH
21607: LD_VAR 0 4
21611: PUSH
21612: LD_INT 2
21614: ARRAY
21615: ST_TO_ADDR
// if h + 7 < height then
21616: LD_VAR 0 13
21620: PUSH
21621: LD_INT 7
21623: PLUS
21624: PUSH
21625: LD_VAR 0 15
21629: LESS
21630: IFFALSE 21659
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21632: LD_ADDR_VAR 0 18
21636: PUSH
21637: LD_INT 7
21639: PUSH
21640: LD_INT 28
21642: PUSH
21643: LD_INT 45
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: LIST
21650: PUSH
21651: LD_VAR 0 12
21655: ARRAY
21656: ST_TO_ADDR
// break ;
21657: GO 21661
// end ; end ; end ;
21659: GO 21490
21661: POP
21662: POP
// end ; if not weapon then
21663: LD_VAR 0 18
21667: NOT
21668: IFFALSE 21728
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21670: LD_ADDR_VAR 0 5
21674: PUSH
21675: LD_VAR 0 5
21679: PUSH
21680: LD_INT 11
21682: PUSH
21683: LD_INT 30
21685: PUSH
21686: LD_INT 49
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: LIST
21693: DIFF
21694: ST_TO_ADDR
// if not list then
21695: LD_VAR 0 5
21699: NOT
21700: IFFALSE 21704
// exit ;
21702: GO 21846
// weapon := list [ rand ( 1 , list ) ] ;
21704: LD_ADDR_VAR 0 18
21708: PUSH
21709: LD_VAR 0 5
21713: PUSH
21714: LD_INT 1
21716: PPUSH
21717: LD_VAR 0 5
21721: PPUSH
21722: CALL_OW 12
21726: ARRAY
21727: ST_TO_ADDR
// end ; if weapon then
21728: LD_VAR 0 18
21732: IFFALSE 21846
// begin tmp := CostOfWeapon ( weapon ) ;
21734: LD_ADDR_VAR 0 14
21738: PUSH
21739: LD_VAR 0 18
21743: PPUSH
21744: CALL_OW 451
21748: ST_TO_ADDR
// j := GetBase ( tower ) ;
21749: LD_ADDR_VAR 0 9
21753: PUSH
21754: LD_VAR 0 1
21758: PPUSH
21759: CALL_OW 274
21763: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21764: LD_VAR 0 9
21768: PPUSH
21769: LD_INT 1
21771: PPUSH
21772: CALL_OW 275
21776: PUSH
21777: LD_VAR 0 14
21781: PUSH
21782: LD_INT 1
21784: ARRAY
21785: GREATEREQUAL
21786: PUSH
21787: LD_VAR 0 9
21791: PPUSH
21792: LD_INT 2
21794: PPUSH
21795: CALL_OW 275
21799: PUSH
21800: LD_VAR 0 14
21804: PUSH
21805: LD_INT 2
21807: ARRAY
21808: GREATEREQUAL
21809: AND
21810: PUSH
21811: LD_VAR 0 9
21815: PPUSH
21816: LD_INT 3
21818: PPUSH
21819: CALL_OW 275
21823: PUSH
21824: LD_VAR 0 14
21828: PUSH
21829: LD_INT 3
21831: ARRAY
21832: GREATEREQUAL
21833: AND
21834: IFFALSE 21846
// result := weapon ;
21836: LD_ADDR_VAR 0 3
21840: PUSH
21841: LD_VAR 0 18
21845: ST_TO_ADDR
// end ; end ;
21846: LD_VAR 0 3
21850: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21851: LD_INT 0
21853: PPUSH
21854: PPUSH
// result := true ;
21855: LD_ADDR_VAR 0 3
21859: PUSH
21860: LD_INT 1
21862: ST_TO_ADDR
// if array1 = array2 then
21863: LD_VAR 0 1
21867: PUSH
21868: LD_VAR 0 2
21872: EQUAL
21873: IFFALSE 21933
// begin for i = 1 to array1 do
21875: LD_ADDR_VAR 0 4
21879: PUSH
21880: DOUBLE
21881: LD_INT 1
21883: DEC
21884: ST_TO_ADDR
21885: LD_VAR 0 1
21889: PUSH
21890: FOR_TO
21891: IFFALSE 21929
// if array1 [ i ] <> array2 [ i ] then
21893: LD_VAR 0 1
21897: PUSH
21898: LD_VAR 0 4
21902: ARRAY
21903: PUSH
21904: LD_VAR 0 2
21908: PUSH
21909: LD_VAR 0 4
21913: ARRAY
21914: NONEQUAL
21915: IFFALSE 21927
// begin result := false ;
21917: LD_ADDR_VAR 0 3
21921: PUSH
21922: LD_INT 0
21924: ST_TO_ADDR
// break ;
21925: GO 21929
// end ;
21927: GO 21890
21929: POP
21930: POP
// end else
21931: GO 21941
// result := false ;
21933: LD_ADDR_VAR 0 3
21937: PUSH
21938: LD_INT 0
21940: ST_TO_ADDR
// end ;
21941: LD_VAR 0 3
21945: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21946: LD_INT 0
21948: PPUSH
21949: PPUSH
// if not array1 or not array2 then
21950: LD_VAR 0 1
21954: NOT
21955: PUSH
21956: LD_VAR 0 2
21960: NOT
21961: OR
21962: IFFALSE 21966
// exit ;
21964: GO 22030
// result := true ;
21966: LD_ADDR_VAR 0 3
21970: PUSH
21971: LD_INT 1
21973: ST_TO_ADDR
// for i = 1 to array1 do
21974: LD_ADDR_VAR 0 4
21978: PUSH
21979: DOUBLE
21980: LD_INT 1
21982: DEC
21983: ST_TO_ADDR
21984: LD_VAR 0 1
21988: PUSH
21989: FOR_TO
21990: IFFALSE 22028
// if array1 [ i ] <> array2 [ i ] then
21992: LD_VAR 0 1
21996: PUSH
21997: LD_VAR 0 4
22001: ARRAY
22002: PUSH
22003: LD_VAR 0 2
22007: PUSH
22008: LD_VAR 0 4
22012: ARRAY
22013: NONEQUAL
22014: IFFALSE 22026
// begin result := false ;
22016: LD_ADDR_VAR 0 3
22020: PUSH
22021: LD_INT 0
22023: ST_TO_ADDR
// break ;
22024: GO 22028
// end ;
22026: GO 21989
22028: POP
22029: POP
// end ;
22030: LD_VAR 0 3
22034: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22035: LD_INT 0
22037: PPUSH
22038: PPUSH
22039: PPUSH
// pom := GetBase ( fac ) ;
22040: LD_ADDR_VAR 0 5
22044: PUSH
22045: LD_VAR 0 1
22049: PPUSH
22050: CALL_OW 274
22054: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22055: LD_ADDR_VAR 0 4
22059: PUSH
22060: LD_VAR 0 2
22064: PUSH
22065: LD_INT 1
22067: ARRAY
22068: PPUSH
22069: LD_VAR 0 2
22073: PUSH
22074: LD_INT 2
22076: ARRAY
22077: PPUSH
22078: LD_VAR 0 2
22082: PUSH
22083: LD_INT 3
22085: ARRAY
22086: PPUSH
22087: LD_VAR 0 2
22091: PUSH
22092: LD_INT 4
22094: ARRAY
22095: PPUSH
22096: CALL_OW 449
22100: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22101: LD_ADDR_VAR 0 3
22105: PUSH
22106: LD_VAR 0 5
22110: PPUSH
22111: LD_INT 1
22113: PPUSH
22114: CALL_OW 275
22118: PUSH
22119: LD_VAR 0 4
22123: PUSH
22124: LD_INT 1
22126: ARRAY
22127: GREATEREQUAL
22128: PUSH
22129: LD_VAR 0 5
22133: PPUSH
22134: LD_INT 2
22136: PPUSH
22137: CALL_OW 275
22141: PUSH
22142: LD_VAR 0 4
22146: PUSH
22147: LD_INT 2
22149: ARRAY
22150: GREATEREQUAL
22151: AND
22152: PUSH
22153: LD_VAR 0 5
22157: PPUSH
22158: LD_INT 3
22160: PPUSH
22161: CALL_OW 275
22165: PUSH
22166: LD_VAR 0 4
22170: PUSH
22171: LD_INT 3
22173: ARRAY
22174: GREATEREQUAL
22175: AND
22176: ST_TO_ADDR
// end ;
22177: LD_VAR 0 3
22181: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22182: LD_INT 0
22184: PPUSH
22185: PPUSH
22186: PPUSH
22187: PPUSH
// pom := GetBase ( building ) ;
22188: LD_ADDR_VAR 0 3
22192: PUSH
22193: LD_VAR 0 1
22197: PPUSH
22198: CALL_OW 274
22202: ST_TO_ADDR
// if not pom then
22203: LD_VAR 0 3
22207: NOT
22208: IFFALSE 22212
// exit ;
22210: GO 22382
// btype := GetBType ( building ) ;
22212: LD_ADDR_VAR 0 5
22216: PUSH
22217: LD_VAR 0 1
22221: PPUSH
22222: CALL_OW 266
22226: ST_TO_ADDR
// if btype = b_armoury then
22227: LD_VAR 0 5
22231: PUSH
22232: LD_INT 4
22234: EQUAL
22235: IFFALSE 22245
// btype := b_barracks ;
22237: LD_ADDR_VAR 0 5
22241: PUSH
22242: LD_INT 5
22244: ST_TO_ADDR
// if btype = b_depot then
22245: LD_VAR 0 5
22249: PUSH
22250: LD_INT 0
22252: EQUAL
22253: IFFALSE 22263
// btype := b_warehouse ;
22255: LD_ADDR_VAR 0 5
22259: PUSH
22260: LD_INT 1
22262: ST_TO_ADDR
// if btype = b_workshop then
22263: LD_VAR 0 5
22267: PUSH
22268: LD_INT 2
22270: EQUAL
22271: IFFALSE 22281
// btype := b_factory ;
22273: LD_ADDR_VAR 0 5
22277: PUSH
22278: LD_INT 3
22280: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22281: LD_ADDR_VAR 0 4
22285: PUSH
22286: LD_VAR 0 5
22290: PPUSH
22291: LD_VAR 0 1
22295: PPUSH
22296: CALL_OW 248
22300: PPUSH
22301: CALL_OW 450
22305: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22306: LD_ADDR_VAR 0 2
22310: PUSH
22311: LD_VAR 0 3
22315: PPUSH
22316: LD_INT 1
22318: PPUSH
22319: CALL_OW 275
22323: PUSH
22324: LD_VAR 0 4
22328: PUSH
22329: LD_INT 1
22331: ARRAY
22332: GREATEREQUAL
22333: PUSH
22334: LD_VAR 0 3
22338: PPUSH
22339: LD_INT 2
22341: PPUSH
22342: CALL_OW 275
22346: PUSH
22347: LD_VAR 0 4
22351: PUSH
22352: LD_INT 2
22354: ARRAY
22355: GREATEREQUAL
22356: AND
22357: PUSH
22358: LD_VAR 0 3
22362: PPUSH
22363: LD_INT 3
22365: PPUSH
22366: CALL_OW 275
22370: PUSH
22371: LD_VAR 0 4
22375: PUSH
22376: LD_INT 3
22378: ARRAY
22379: GREATEREQUAL
22380: AND
22381: ST_TO_ADDR
// end ;
22382: LD_VAR 0 2
22386: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22387: LD_INT 0
22389: PPUSH
22390: PPUSH
22391: PPUSH
// pom := GetBase ( building ) ;
22392: LD_ADDR_VAR 0 4
22396: PUSH
22397: LD_VAR 0 1
22401: PPUSH
22402: CALL_OW 274
22406: ST_TO_ADDR
// if not pom then
22407: LD_VAR 0 4
22411: NOT
22412: IFFALSE 22416
// exit ;
22414: GO 22517
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22416: LD_ADDR_VAR 0 5
22420: PUSH
22421: LD_VAR 0 2
22425: PPUSH
22426: LD_VAR 0 1
22430: PPUSH
22431: CALL_OW 248
22435: PPUSH
22436: CALL_OW 450
22440: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22441: LD_ADDR_VAR 0 3
22445: PUSH
22446: LD_VAR 0 4
22450: PPUSH
22451: LD_INT 1
22453: PPUSH
22454: CALL_OW 275
22458: PUSH
22459: LD_VAR 0 5
22463: PUSH
22464: LD_INT 1
22466: ARRAY
22467: GREATEREQUAL
22468: PUSH
22469: LD_VAR 0 4
22473: PPUSH
22474: LD_INT 2
22476: PPUSH
22477: CALL_OW 275
22481: PUSH
22482: LD_VAR 0 5
22486: PUSH
22487: LD_INT 2
22489: ARRAY
22490: GREATEREQUAL
22491: AND
22492: PUSH
22493: LD_VAR 0 4
22497: PPUSH
22498: LD_INT 3
22500: PPUSH
22501: CALL_OW 275
22505: PUSH
22506: LD_VAR 0 5
22510: PUSH
22511: LD_INT 3
22513: ARRAY
22514: GREATEREQUAL
22515: AND
22516: ST_TO_ADDR
// end ;
22517: LD_VAR 0 3
22521: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22522: LD_INT 0
22524: PPUSH
22525: PPUSH
22526: PPUSH
22527: PPUSH
22528: PPUSH
22529: PPUSH
22530: PPUSH
22531: PPUSH
22532: PPUSH
22533: PPUSH
22534: PPUSH
// result := false ;
22535: LD_ADDR_VAR 0 8
22539: PUSH
22540: LD_INT 0
22542: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22543: LD_VAR 0 5
22547: NOT
22548: PUSH
22549: LD_VAR 0 1
22553: NOT
22554: OR
22555: PUSH
22556: LD_VAR 0 2
22560: NOT
22561: OR
22562: PUSH
22563: LD_VAR 0 3
22567: NOT
22568: OR
22569: IFFALSE 22573
// exit ;
22571: GO 23387
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22573: LD_ADDR_VAR 0 14
22577: PUSH
22578: LD_VAR 0 1
22582: PPUSH
22583: LD_VAR 0 2
22587: PPUSH
22588: LD_VAR 0 3
22592: PPUSH
22593: LD_VAR 0 4
22597: PPUSH
22598: LD_VAR 0 5
22602: PUSH
22603: LD_INT 1
22605: ARRAY
22606: PPUSH
22607: CALL_OW 248
22611: PPUSH
22612: LD_INT 0
22614: PPUSH
22615: CALL 24620 0 6
22619: ST_TO_ADDR
// if not hexes then
22620: LD_VAR 0 14
22624: NOT
22625: IFFALSE 22629
// exit ;
22627: GO 23387
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22629: LD_ADDR_VAR 0 17
22633: PUSH
22634: LD_VAR 0 5
22638: PPUSH
22639: LD_INT 22
22641: PUSH
22642: LD_VAR 0 13
22646: PPUSH
22647: CALL_OW 255
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: LD_INT 30
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 30
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PPUSH
22688: CALL_OW 72
22692: ST_TO_ADDR
// for i = 1 to hexes do
22693: LD_ADDR_VAR 0 9
22697: PUSH
22698: DOUBLE
22699: LD_INT 1
22701: DEC
22702: ST_TO_ADDR
22703: LD_VAR 0 14
22707: PUSH
22708: FOR_TO
22709: IFFALSE 23385
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22711: LD_ADDR_VAR 0 13
22715: PUSH
22716: LD_VAR 0 14
22720: PUSH
22721: LD_VAR 0 9
22725: ARRAY
22726: PUSH
22727: LD_INT 1
22729: ARRAY
22730: PPUSH
22731: LD_VAR 0 14
22735: PUSH
22736: LD_VAR 0 9
22740: ARRAY
22741: PUSH
22742: LD_INT 2
22744: ARRAY
22745: PPUSH
22746: CALL_OW 428
22750: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22751: LD_VAR 0 14
22755: PUSH
22756: LD_VAR 0 9
22760: ARRAY
22761: PUSH
22762: LD_INT 1
22764: ARRAY
22765: PPUSH
22766: LD_VAR 0 14
22770: PUSH
22771: LD_VAR 0 9
22775: ARRAY
22776: PUSH
22777: LD_INT 2
22779: ARRAY
22780: PPUSH
22781: CALL_OW 351
22785: PUSH
22786: LD_VAR 0 14
22790: PUSH
22791: LD_VAR 0 9
22795: ARRAY
22796: PUSH
22797: LD_INT 1
22799: ARRAY
22800: PPUSH
22801: LD_VAR 0 14
22805: PUSH
22806: LD_VAR 0 9
22810: ARRAY
22811: PUSH
22812: LD_INT 2
22814: ARRAY
22815: PPUSH
22816: CALL_OW 488
22820: NOT
22821: OR
22822: PUSH
22823: LD_VAR 0 13
22827: PPUSH
22828: CALL_OW 247
22832: PUSH
22833: LD_INT 3
22835: EQUAL
22836: OR
22837: IFFALSE 22843
// exit ;
22839: POP
22840: POP
22841: GO 23387
// if not tmp then
22843: LD_VAR 0 13
22847: NOT
22848: IFFALSE 22852
// continue ;
22850: GO 22708
// result := true ;
22852: LD_ADDR_VAR 0 8
22856: PUSH
22857: LD_INT 1
22859: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22860: LD_VAR 0 6
22864: PUSH
22865: LD_VAR 0 13
22869: PPUSH
22870: CALL_OW 247
22874: PUSH
22875: LD_INT 2
22877: EQUAL
22878: AND
22879: PUSH
22880: LD_VAR 0 13
22884: PPUSH
22885: CALL_OW 263
22889: PUSH
22890: LD_INT 1
22892: EQUAL
22893: AND
22894: IFFALSE 23058
// begin if IsDrivenBy ( tmp ) then
22896: LD_VAR 0 13
22900: PPUSH
22901: CALL_OW 311
22905: IFFALSE 22909
// continue ;
22907: GO 22708
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22909: LD_VAR 0 6
22913: PPUSH
22914: LD_INT 3
22916: PUSH
22917: LD_INT 60
22919: PUSH
22920: EMPTY
22921: LIST
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 3
22929: PUSH
22930: LD_INT 55
22932: PUSH
22933: EMPTY
22934: LIST
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PPUSH
22944: CALL_OW 72
22948: IFFALSE 23056
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22950: LD_ADDR_VAR 0 18
22954: PUSH
22955: LD_VAR 0 6
22959: PPUSH
22960: LD_INT 3
22962: PUSH
22963: LD_INT 60
22965: PUSH
22966: EMPTY
22967: LIST
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 3
22975: PUSH
22976: LD_INT 55
22978: PUSH
22979: EMPTY
22980: LIST
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PPUSH
22990: CALL_OW 72
22994: PUSH
22995: LD_INT 1
22997: ARRAY
22998: ST_TO_ADDR
// if IsInUnit ( driver ) then
22999: LD_VAR 0 18
23003: PPUSH
23004: CALL_OW 310
23008: IFFALSE 23019
// ComExit ( driver ) ;
23010: LD_VAR 0 18
23014: PPUSH
23015: CALL 48399 0 1
// AddComEnterUnit ( driver , tmp ) ;
23019: LD_VAR 0 18
23023: PPUSH
23024: LD_VAR 0 13
23028: PPUSH
23029: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23033: LD_VAR 0 18
23037: PPUSH
23038: LD_VAR 0 7
23042: PPUSH
23043: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23047: LD_VAR 0 18
23051: PPUSH
23052: CALL_OW 181
// end ; continue ;
23056: GO 22708
// end ; if not cleaners or not tmp in cleaners then
23058: LD_VAR 0 6
23062: NOT
23063: PUSH
23064: LD_VAR 0 13
23068: PUSH
23069: LD_VAR 0 6
23073: IN
23074: NOT
23075: OR
23076: IFFALSE 23383
// begin if dep then
23078: LD_VAR 0 17
23082: IFFALSE 23218
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23084: LD_ADDR_VAR 0 16
23088: PUSH
23089: LD_VAR 0 17
23093: PUSH
23094: LD_INT 1
23096: ARRAY
23097: PPUSH
23098: CALL_OW 250
23102: PPUSH
23103: LD_VAR 0 17
23107: PUSH
23108: LD_INT 1
23110: ARRAY
23111: PPUSH
23112: CALL_OW 254
23116: PPUSH
23117: LD_INT 5
23119: PPUSH
23120: CALL_OW 272
23124: PUSH
23125: LD_VAR 0 17
23129: PUSH
23130: LD_INT 1
23132: ARRAY
23133: PPUSH
23134: CALL_OW 251
23138: PPUSH
23139: LD_VAR 0 17
23143: PUSH
23144: LD_INT 1
23146: ARRAY
23147: PPUSH
23148: CALL_OW 254
23152: PPUSH
23153: LD_INT 5
23155: PPUSH
23156: CALL_OW 273
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23165: LD_VAR 0 16
23169: PUSH
23170: LD_INT 1
23172: ARRAY
23173: PPUSH
23174: LD_VAR 0 16
23178: PUSH
23179: LD_INT 2
23181: ARRAY
23182: PPUSH
23183: CALL_OW 488
23187: IFFALSE 23218
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23189: LD_VAR 0 13
23193: PPUSH
23194: LD_VAR 0 16
23198: PUSH
23199: LD_INT 1
23201: ARRAY
23202: PPUSH
23203: LD_VAR 0 16
23207: PUSH
23208: LD_INT 2
23210: ARRAY
23211: PPUSH
23212: CALL_OW 111
// continue ;
23216: GO 22708
// end ; end ; r := GetDir ( tmp ) ;
23218: LD_ADDR_VAR 0 15
23222: PUSH
23223: LD_VAR 0 13
23227: PPUSH
23228: CALL_OW 254
23232: ST_TO_ADDR
// if r = 5 then
23233: LD_VAR 0 15
23237: PUSH
23238: LD_INT 5
23240: EQUAL
23241: IFFALSE 23251
// r := 0 ;
23243: LD_ADDR_VAR 0 15
23247: PUSH
23248: LD_INT 0
23250: ST_TO_ADDR
// for j = r to 5 do
23251: LD_ADDR_VAR 0 10
23255: PUSH
23256: DOUBLE
23257: LD_VAR 0 15
23261: DEC
23262: ST_TO_ADDR
23263: LD_INT 5
23265: PUSH
23266: FOR_TO
23267: IFFALSE 23381
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23269: LD_ADDR_VAR 0 11
23273: PUSH
23274: LD_VAR 0 13
23278: PPUSH
23279: CALL_OW 250
23283: PPUSH
23284: LD_VAR 0 10
23288: PPUSH
23289: LD_INT 2
23291: PPUSH
23292: CALL_OW 272
23296: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23297: LD_ADDR_VAR 0 12
23301: PUSH
23302: LD_VAR 0 13
23306: PPUSH
23307: CALL_OW 251
23311: PPUSH
23312: LD_VAR 0 10
23316: PPUSH
23317: LD_INT 2
23319: PPUSH
23320: CALL_OW 273
23324: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23325: LD_VAR 0 11
23329: PPUSH
23330: LD_VAR 0 12
23334: PPUSH
23335: CALL_OW 488
23339: PUSH
23340: LD_VAR 0 11
23344: PPUSH
23345: LD_VAR 0 12
23349: PPUSH
23350: CALL_OW 428
23354: NOT
23355: AND
23356: IFFALSE 23379
// begin ComMoveXY ( tmp , _x , _y ) ;
23358: LD_VAR 0 13
23362: PPUSH
23363: LD_VAR 0 11
23367: PPUSH
23368: LD_VAR 0 12
23372: PPUSH
23373: CALL_OW 111
// break ;
23377: GO 23381
// end ; end ;
23379: GO 23266
23381: POP
23382: POP
// end ; end ;
23383: GO 22708
23385: POP
23386: POP
// end ;
23387: LD_VAR 0 8
23391: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23392: LD_INT 0
23394: PPUSH
// result := true ;
23395: LD_ADDR_VAR 0 3
23399: PUSH
23400: LD_INT 1
23402: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23403: LD_VAR 0 2
23407: PUSH
23408: LD_INT 24
23410: DOUBLE
23411: EQUAL
23412: IFTRUE 23422
23414: LD_INT 33
23416: DOUBLE
23417: EQUAL
23418: IFTRUE 23422
23420: GO 23447
23422: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23423: LD_ADDR_VAR 0 3
23427: PUSH
23428: LD_INT 32
23430: PPUSH
23431: LD_VAR 0 1
23435: PPUSH
23436: CALL_OW 321
23440: PUSH
23441: LD_INT 2
23443: EQUAL
23444: ST_TO_ADDR
23445: GO 23763
23447: LD_INT 20
23449: DOUBLE
23450: EQUAL
23451: IFTRUE 23455
23453: GO 23480
23455: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23456: LD_ADDR_VAR 0 3
23460: PUSH
23461: LD_INT 6
23463: PPUSH
23464: LD_VAR 0 1
23468: PPUSH
23469: CALL_OW 321
23473: PUSH
23474: LD_INT 2
23476: EQUAL
23477: ST_TO_ADDR
23478: GO 23763
23480: LD_INT 22
23482: DOUBLE
23483: EQUAL
23484: IFTRUE 23494
23486: LD_INT 36
23488: DOUBLE
23489: EQUAL
23490: IFTRUE 23494
23492: GO 23519
23494: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23495: LD_ADDR_VAR 0 3
23499: PUSH
23500: LD_INT 15
23502: PPUSH
23503: LD_VAR 0 1
23507: PPUSH
23508: CALL_OW 321
23512: PUSH
23513: LD_INT 2
23515: EQUAL
23516: ST_TO_ADDR
23517: GO 23763
23519: LD_INT 30
23521: DOUBLE
23522: EQUAL
23523: IFTRUE 23527
23525: GO 23552
23527: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23528: LD_ADDR_VAR 0 3
23532: PUSH
23533: LD_INT 20
23535: PPUSH
23536: LD_VAR 0 1
23540: PPUSH
23541: CALL_OW 321
23545: PUSH
23546: LD_INT 2
23548: EQUAL
23549: ST_TO_ADDR
23550: GO 23763
23552: LD_INT 28
23554: DOUBLE
23555: EQUAL
23556: IFTRUE 23566
23558: LD_INT 21
23560: DOUBLE
23561: EQUAL
23562: IFTRUE 23566
23564: GO 23591
23566: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23567: LD_ADDR_VAR 0 3
23571: PUSH
23572: LD_INT 21
23574: PPUSH
23575: LD_VAR 0 1
23579: PPUSH
23580: CALL_OW 321
23584: PUSH
23585: LD_INT 2
23587: EQUAL
23588: ST_TO_ADDR
23589: GO 23763
23591: LD_INT 16
23593: DOUBLE
23594: EQUAL
23595: IFTRUE 23599
23597: GO 23624
23599: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23600: LD_ADDR_VAR 0 3
23604: PUSH
23605: LD_INT 84
23607: PPUSH
23608: LD_VAR 0 1
23612: PPUSH
23613: CALL_OW 321
23617: PUSH
23618: LD_INT 2
23620: EQUAL
23621: ST_TO_ADDR
23622: GO 23763
23624: LD_INT 19
23626: DOUBLE
23627: EQUAL
23628: IFTRUE 23638
23630: LD_INT 23
23632: DOUBLE
23633: EQUAL
23634: IFTRUE 23638
23636: GO 23663
23638: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23639: LD_ADDR_VAR 0 3
23643: PUSH
23644: LD_INT 83
23646: PPUSH
23647: LD_VAR 0 1
23651: PPUSH
23652: CALL_OW 321
23656: PUSH
23657: LD_INT 2
23659: EQUAL
23660: ST_TO_ADDR
23661: GO 23763
23663: LD_INT 17
23665: DOUBLE
23666: EQUAL
23667: IFTRUE 23671
23669: GO 23696
23671: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23672: LD_ADDR_VAR 0 3
23676: PUSH
23677: LD_INT 39
23679: PPUSH
23680: LD_VAR 0 1
23684: PPUSH
23685: CALL_OW 321
23689: PUSH
23690: LD_INT 2
23692: EQUAL
23693: ST_TO_ADDR
23694: GO 23763
23696: LD_INT 18
23698: DOUBLE
23699: EQUAL
23700: IFTRUE 23704
23702: GO 23729
23704: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23705: LD_ADDR_VAR 0 3
23709: PUSH
23710: LD_INT 40
23712: PPUSH
23713: LD_VAR 0 1
23717: PPUSH
23718: CALL_OW 321
23722: PUSH
23723: LD_INT 2
23725: EQUAL
23726: ST_TO_ADDR
23727: GO 23763
23729: LD_INT 27
23731: DOUBLE
23732: EQUAL
23733: IFTRUE 23737
23735: GO 23762
23737: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23738: LD_ADDR_VAR 0 3
23742: PUSH
23743: LD_INT 35
23745: PPUSH
23746: LD_VAR 0 1
23750: PPUSH
23751: CALL_OW 321
23755: PUSH
23756: LD_INT 2
23758: EQUAL
23759: ST_TO_ADDR
23760: GO 23763
23762: POP
// end ;
23763: LD_VAR 0 3
23767: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23768: LD_INT 0
23770: PPUSH
23771: PPUSH
23772: PPUSH
23773: PPUSH
23774: PPUSH
23775: PPUSH
23776: PPUSH
23777: PPUSH
23778: PPUSH
23779: PPUSH
23780: PPUSH
// result := false ;
23781: LD_ADDR_VAR 0 6
23785: PUSH
23786: LD_INT 0
23788: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23789: LD_VAR 0 1
23793: NOT
23794: PUSH
23795: LD_VAR 0 1
23799: PPUSH
23800: CALL_OW 266
23804: PUSH
23805: LD_INT 0
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: IN
23815: NOT
23816: OR
23817: PUSH
23818: LD_VAR 0 2
23822: NOT
23823: OR
23824: PUSH
23825: LD_VAR 0 5
23829: PUSH
23830: LD_INT 0
23832: PUSH
23833: LD_INT 1
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: LD_INT 3
23841: PUSH
23842: LD_INT 4
23844: PUSH
23845: LD_INT 5
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: IN
23856: NOT
23857: OR
23858: PUSH
23859: LD_VAR 0 3
23863: PPUSH
23864: LD_VAR 0 4
23868: PPUSH
23869: CALL_OW 488
23873: NOT
23874: OR
23875: IFFALSE 23879
// exit ;
23877: GO 24615
// side := GetSide ( depot ) ;
23879: LD_ADDR_VAR 0 9
23883: PUSH
23884: LD_VAR 0 1
23888: PPUSH
23889: CALL_OW 255
23893: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23894: LD_VAR 0 9
23898: PPUSH
23899: LD_VAR 0 2
23903: PPUSH
23904: CALL 23392 0 2
23908: NOT
23909: IFFALSE 23913
// exit ;
23911: GO 24615
// pom := GetBase ( depot ) ;
23913: LD_ADDR_VAR 0 10
23917: PUSH
23918: LD_VAR 0 1
23922: PPUSH
23923: CALL_OW 274
23927: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23928: LD_ADDR_VAR 0 11
23932: PUSH
23933: LD_VAR 0 2
23937: PPUSH
23938: LD_VAR 0 1
23942: PPUSH
23943: CALL_OW 248
23947: PPUSH
23948: CALL_OW 450
23952: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23953: LD_VAR 0 10
23957: PPUSH
23958: LD_INT 1
23960: PPUSH
23961: CALL_OW 275
23965: PUSH
23966: LD_VAR 0 11
23970: PUSH
23971: LD_INT 1
23973: ARRAY
23974: GREATEREQUAL
23975: PUSH
23976: LD_VAR 0 10
23980: PPUSH
23981: LD_INT 2
23983: PPUSH
23984: CALL_OW 275
23988: PUSH
23989: LD_VAR 0 11
23993: PUSH
23994: LD_INT 2
23996: ARRAY
23997: GREATEREQUAL
23998: AND
23999: PUSH
24000: LD_VAR 0 10
24004: PPUSH
24005: LD_INT 3
24007: PPUSH
24008: CALL_OW 275
24012: PUSH
24013: LD_VAR 0 11
24017: PUSH
24018: LD_INT 3
24020: ARRAY
24021: GREATEREQUAL
24022: AND
24023: NOT
24024: IFFALSE 24028
// exit ;
24026: GO 24615
// if GetBType ( depot ) = b_depot then
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 266
24037: PUSH
24038: LD_INT 0
24040: EQUAL
24041: IFFALSE 24053
// dist := 28 else
24043: LD_ADDR_VAR 0 14
24047: PUSH
24048: LD_INT 28
24050: ST_TO_ADDR
24051: GO 24061
// dist := 36 ;
24053: LD_ADDR_VAR 0 14
24057: PUSH
24058: LD_INT 36
24060: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24061: LD_VAR 0 1
24065: PPUSH
24066: LD_VAR 0 3
24070: PPUSH
24071: LD_VAR 0 4
24075: PPUSH
24076: CALL_OW 297
24080: PUSH
24081: LD_VAR 0 14
24085: GREATER
24086: IFFALSE 24090
// exit ;
24088: GO 24615
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24090: LD_ADDR_VAR 0 12
24094: PUSH
24095: LD_VAR 0 2
24099: PPUSH
24100: LD_VAR 0 3
24104: PPUSH
24105: LD_VAR 0 4
24109: PPUSH
24110: LD_VAR 0 5
24114: PPUSH
24115: LD_VAR 0 1
24119: PPUSH
24120: CALL_OW 248
24124: PPUSH
24125: LD_INT 0
24127: PPUSH
24128: CALL 24620 0 6
24132: ST_TO_ADDR
// if not hexes then
24133: LD_VAR 0 12
24137: NOT
24138: IFFALSE 24142
// exit ;
24140: GO 24615
// hex := GetHexInfo ( x , y ) ;
24142: LD_ADDR_VAR 0 15
24146: PUSH
24147: LD_VAR 0 3
24151: PPUSH
24152: LD_VAR 0 4
24156: PPUSH
24157: CALL_OW 546
24161: ST_TO_ADDR
// if hex [ 1 ] then
24162: LD_VAR 0 15
24166: PUSH
24167: LD_INT 1
24169: ARRAY
24170: IFFALSE 24174
// exit ;
24172: GO 24615
// height := hex [ 2 ] ;
24174: LD_ADDR_VAR 0 13
24178: PUSH
24179: LD_VAR 0 15
24183: PUSH
24184: LD_INT 2
24186: ARRAY
24187: ST_TO_ADDR
// for i = 1 to hexes do
24188: LD_ADDR_VAR 0 7
24192: PUSH
24193: DOUBLE
24194: LD_INT 1
24196: DEC
24197: ST_TO_ADDR
24198: LD_VAR 0 12
24202: PUSH
24203: FOR_TO
24204: IFFALSE 24534
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24206: LD_VAR 0 12
24210: PUSH
24211: LD_VAR 0 7
24215: ARRAY
24216: PUSH
24217: LD_INT 1
24219: ARRAY
24220: PPUSH
24221: LD_VAR 0 12
24225: PUSH
24226: LD_VAR 0 7
24230: ARRAY
24231: PUSH
24232: LD_INT 2
24234: ARRAY
24235: PPUSH
24236: CALL_OW 488
24240: NOT
24241: PUSH
24242: LD_VAR 0 12
24246: PUSH
24247: LD_VAR 0 7
24251: ARRAY
24252: PUSH
24253: LD_INT 1
24255: ARRAY
24256: PPUSH
24257: LD_VAR 0 12
24261: PUSH
24262: LD_VAR 0 7
24266: ARRAY
24267: PUSH
24268: LD_INT 2
24270: ARRAY
24271: PPUSH
24272: CALL_OW 428
24276: PUSH
24277: LD_INT 0
24279: GREATER
24280: OR
24281: PUSH
24282: LD_VAR 0 12
24286: PUSH
24287: LD_VAR 0 7
24291: ARRAY
24292: PUSH
24293: LD_INT 1
24295: ARRAY
24296: PPUSH
24297: LD_VAR 0 12
24301: PUSH
24302: LD_VAR 0 7
24306: ARRAY
24307: PUSH
24308: LD_INT 2
24310: ARRAY
24311: PPUSH
24312: CALL_OW 351
24316: OR
24317: IFFALSE 24323
// exit ;
24319: POP
24320: POP
24321: GO 24615
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24323: LD_ADDR_VAR 0 8
24327: PUSH
24328: LD_VAR 0 12
24332: PUSH
24333: LD_VAR 0 7
24337: ARRAY
24338: PUSH
24339: LD_INT 1
24341: ARRAY
24342: PPUSH
24343: LD_VAR 0 12
24347: PUSH
24348: LD_VAR 0 7
24352: ARRAY
24353: PUSH
24354: LD_INT 2
24356: ARRAY
24357: PPUSH
24358: CALL_OW 546
24362: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24363: LD_VAR 0 8
24367: PUSH
24368: LD_INT 1
24370: ARRAY
24371: PUSH
24372: LD_VAR 0 8
24376: PUSH
24377: LD_INT 2
24379: ARRAY
24380: PUSH
24381: LD_VAR 0 13
24385: PUSH
24386: LD_INT 2
24388: PLUS
24389: GREATER
24390: OR
24391: PUSH
24392: LD_VAR 0 8
24396: PUSH
24397: LD_INT 2
24399: ARRAY
24400: PUSH
24401: LD_VAR 0 13
24405: PUSH
24406: LD_INT 2
24408: MINUS
24409: LESS
24410: OR
24411: PUSH
24412: LD_VAR 0 8
24416: PUSH
24417: LD_INT 3
24419: ARRAY
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: LD_INT 8
24426: PUSH
24427: LD_INT 9
24429: PUSH
24430: LD_INT 10
24432: PUSH
24433: LD_INT 11
24435: PUSH
24436: LD_INT 12
24438: PUSH
24439: LD_INT 13
24441: PUSH
24442: LD_INT 16
24444: PUSH
24445: LD_INT 17
24447: PUSH
24448: LD_INT 18
24450: PUSH
24451: LD_INT 19
24453: PUSH
24454: LD_INT 20
24456: PUSH
24457: LD_INT 21
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: IN
24475: NOT
24476: OR
24477: PUSH
24478: LD_VAR 0 8
24482: PUSH
24483: LD_INT 5
24485: ARRAY
24486: NOT
24487: OR
24488: PUSH
24489: LD_VAR 0 8
24493: PUSH
24494: LD_INT 6
24496: ARRAY
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: LD_INT 2
24503: PUSH
24504: LD_INT 7
24506: PUSH
24507: LD_INT 9
24509: PUSH
24510: LD_INT 10
24512: PUSH
24513: LD_INT 11
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: IN
24524: NOT
24525: OR
24526: IFFALSE 24532
// exit ;
24528: POP
24529: POP
24530: GO 24615
// end ;
24532: GO 24203
24534: POP
24535: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24536: LD_VAR 0 9
24540: PPUSH
24541: LD_VAR 0 3
24545: PPUSH
24546: LD_VAR 0 4
24550: PPUSH
24551: LD_INT 20
24553: PPUSH
24554: CALL 16567 0 4
24558: PUSH
24559: LD_INT 4
24561: ARRAY
24562: IFFALSE 24566
// exit ;
24564: GO 24615
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24566: LD_VAR 0 2
24570: PUSH
24571: LD_INT 29
24573: PUSH
24574: LD_INT 30
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: IN
24581: PUSH
24582: LD_VAR 0 3
24586: PPUSH
24587: LD_VAR 0 4
24591: PPUSH
24592: LD_VAR 0 9
24596: PPUSH
24597: CALL_OW 440
24601: NOT
24602: AND
24603: IFFALSE 24607
// exit ;
24605: GO 24615
// result := true ;
24607: LD_ADDR_VAR 0 6
24611: PUSH
24612: LD_INT 1
24614: ST_TO_ADDR
// end ;
24615: LD_VAR 0 6
24619: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24620: LD_INT 0
24622: PPUSH
24623: PPUSH
24624: PPUSH
24625: PPUSH
24626: PPUSH
24627: PPUSH
24628: PPUSH
24629: PPUSH
24630: PPUSH
24631: PPUSH
24632: PPUSH
24633: PPUSH
24634: PPUSH
24635: PPUSH
24636: PPUSH
24637: PPUSH
24638: PPUSH
24639: PPUSH
24640: PPUSH
24641: PPUSH
24642: PPUSH
24643: PPUSH
24644: PPUSH
24645: PPUSH
24646: PPUSH
24647: PPUSH
24648: PPUSH
24649: PPUSH
24650: PPUSH
24651: PPUSH
24652: PPUSH
24653: PPUSH
24654: PPUSH
24655: PPUSH
24656: PPUSH
24657: PPUSH
24658: PPUSH
24659: PPUSH
24660: PPUSH
24661: PPUSH
24662: PPUSH
24663: PPUSH
24664: PPUSH
24665: PPUSH
24666: PPUSH
24667: PPUSH
24668: PPUSH
24669: PPUSH
24670: PPUSH
24671: PPUSH
24672: PPUSH
24673: PPUSH
24674: PPUSH
24675: PPUSH
24676: PPUSH
24677: PPUSH
24678: PPUSH
24679: PPUSH
// result = [ ] ;
24680: LD_ADDR_VAR 0 7
24684: PUSH
24685: EMPTY
24686: ST_TO_ADDR
// temp_list = [ ] ;
24687: LD_ADDR_VAR 0 9
24691: PUSH
24692: EMPTY
24693: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24694: LD_VAR 0 4
24698: PUSH
24699: LD_INT 0
24701: PUSH
24702: LD_INT 1
24704: PUSH
24705: LD_INT 2
24707: PUSH
24708: LD_INT 3
24710: PUSH
24711: LD_INT 4
24713: PUSH
24714: LD_INT 5
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: IN
24725: NOT
24726: PUSH
24727: LD_VAR 0 1
24731: PUSH
24732: LD_INT 0
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: IN
24742: PUSH
24743: LD_VAR 0 5
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: LD_INT 2
24753: PUSH
24754: LD_INT 3
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: LIST
24761: IN
24762: NOT
24763: AND
24764: OR
24765: IFFALSE 24769
// exit ;
24767: GO 43160
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24769: LD_VAR 0 1
24773: PUSH
24774: LD_INT 6
24776: PUSH
24777: LD_INT 7
24779: PUSH
24780: LD_INT 8
24782: PUSH
24783: LD_INT 13
24785: PUSH
24786: LD_INT 12
24788: PUSH
24789: LD_INT 15
24791: PUSH
24792: LD_INT 11
24794: PUSH
24795: LD_INT 14
24797: PUSH
24798: LD_INT 10
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: IN
24812: IFFALSE 24822
// btype = b_lab ;
24814: LD_ADDR_VAR 0 1
24818: PUSH
24819: LD_INT 6
24821: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24822: LD_VAR 0 6
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: LD_INT 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: LIST
24840: IN
24841: NOT
24842: PUSH
24843: LD_VAR 0 1
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: LD_INT 3
24859: PUSH
24860: LD_INT 6
24862: PUSH
24863: LD_INT 36
24865: PUSH
24866: LD_INT 4
24868: PUSH
24869: LD_INT 5
24871: PUSH
24872: LD_INT 31
24874: PUSH
24875: LD_INT 32
24877: PUSH
24878: LD_INT 33
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: IN
24894: NOT
24895: PUSH
24896: LD_VAR 0 6
24900: PUSH
24901: LD_INT 1
24903: EQUAL
24904: AND
24905: OR
24906: PUSH
24907: LD_VAR 0 1
24911: PUSH
24912: LD_INT 2
24914: PUSH
24915: LD_INT 3
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: IN
24922: NOT
24923: PUSH
24924: LD_VAR 0 6
24928: PUSH
24929: LD_INT 2
24931: EQUAL
24932: AND
24933: OR
24934: IFFALSE 24944
// mode = 0 ;
24936: LD_ADDR_VAR 0 6
24940: PUSH
24941: LD_INT 0
24943: ST_TO_ADDR
// case mode of 0 :
24944: LD_VAR 0 6
24948: PUSH
24949: LD_INT 0
24951: DOUBLE
24952: EQUAL
24953: IFTRUE 24957
24955: GO 36410
24957: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24958: LD_ADDR_VAR 0 11
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: NEG
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: LD_INT 2
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: LD_INT 2
25054: NEG
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: LD_INT 1
25065: NEG
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 1
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: LD_INT 3
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: LD_INT 3
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: NEG
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25151: LD_ADDR_VAR 0 12
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 1
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: NEG
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 2
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 2
25253: PUSH
25254: LD_INT 1
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 2
25274: NEG
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 2
25285: NEG
25286: PUSH
25287: LD_INT 1
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 2
25297: NEG
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 3
25308: NEG
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 3
25319: NEG
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25347: LD_ADDR_VAR 0 13
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: LD_INT 1
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 0
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: NEG
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: NEG
25429: PUSH
25430: LD_INT 2
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 2
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 2
25450: PUSH
25451: LD_INT 2
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: LD_INT 2
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 2
25470: NEG
25471: PUSH
25472: LD_INT 1
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 2
25482: NEG
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: NEG
25495: PUSH
25496: LD_INT 3
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 3
25506: NEG
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 3
25518: NEG
25519: PUSH
25520: LD_INT 3
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25546: LD_ADDR_VAR 0 14
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: LD_INT 0
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: LD_INT 1
25566: NEG
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: LD_INT 1
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: LD_INT 1
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 1
25604: NEG
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: NEG
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: LD_INT 2
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: LD_INT 2
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: LD_INT 1
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: NEG
25693: PUSH
25694: LD_INT 3
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: LD_INT 3
25707: NEG
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: LD_INT 2
25718: NEG
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25742: LD_ADDR_VAR 0 15
25746: PUSH
25747: LD_INT 0
25749: PUSH
25750: LD_INT 0
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: LD_INT 1
25762: NEG
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 1
25800: NEG
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: LD_INT 1
25826: NEG
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: LD_INT 0
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 2
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 1
25854: NEG
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 2
25865: NEG
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 2
25876: NEG
25877: PUSH
25878: LD_INT 1
25880: NEG
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: LD_INT 1
25891: NEG
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 3
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 3
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25935: LD_ADDR_VAR 0 16
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 0
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: LD_INT 0
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 0
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: LD_INT 0
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: LD_INT 1
26008: NEG
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 2
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 2
26058: NEG
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: LD_INT 2
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 3
26092: PUSH
26093: LD_INT 3
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 2
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26128: LD_ADDR_VAR 0 17
26132: PUSH
26133: LD_INT 0
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: LD_INT 2
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 0
26221: PUSH
26222: LD_INT 2
26224: NEG
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: LD_INT 0
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 2
26253: PUSH
26254: LD_INT 1
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: LD_INT 2
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: LD_INT 2
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 1
26293: NEG
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 2
26304: NEG
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 2
26315: NEG
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: LD_INT 2
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26358: LD_ADDR_VAR 0 18
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: LD_INT 2
26443: NEG
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: LD_INT 2
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 1
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 2
26483: PUSH
26484: LD_INT 1
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 2
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 2
26534: NEG
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: NEG
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26588: LD_ADDR_VAR 0 19
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 1
26608: NEG
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: LD_INT 1
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: NEG
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: LD_INT 1
26661: NEG
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 1
26669: NEG
26670: PUSH
26671: LD_INT 2
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: LD_INT 2
26684: NEG
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 1
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 2
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 2
26764: NEG
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 2
26775: NEG
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: NEG
26788: PUSH
26789: LD_INT 2
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26818: LD_ADDR_VAR 0 20
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: LD_INT 2
26903: NEG
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: LD_INT 2
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 1
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 2
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 2
26953: PUSH
26954: LD_INT 2
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 2
26994: NEG
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 2
27005: NEG
27006: PUSH
27007: LD_INT 1
27009: NEG
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 2
27017: NEG
27018: PUSH
27019: LD_INT 2
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27048: LD_ADDR_VAR 0 21
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: LD_INT 2
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: LD_INT 2
27144: NEG
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: LD_INT 1
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 2
27173: PUSH
27174: LD_INT 1
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 2
27183: PUSH
27184: LD_INT 2
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: LD_INT 2
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: LD_INT 2
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: NEG
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 2
27224: NEG
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: NEG
27248: PUSH
27249: LD_INT 2
27251: NEG
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27278: LD_ADDR_VAR 0 22
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: NEG
27360: PUSH
27361: LD_INT 2
27363: NEG
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: LD_INT 2
27374: NEG
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: LD_INT 1
27385: NEG
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 2
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 2
27413: PUSH
27414: LD_INT 2
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: LD_INT 2
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 0
27433: PUSH
27434: LD_INT 2
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 2
27465: NEG
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 2
27477: NEG
27478: PUSH
27479: LD_INT 2
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27508: LD_ADDR_VAR 0 23
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: LD_INT 2
27593: NEG
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 2
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 2
27643: PUSH
27644: LD_INT 2
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: LD_INT 2
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: LD_INT 2
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: NEG
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: LD_INT 1
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 2
27707: NEG
27708: PUSH
27709: LD_INT 2
27711: NEG
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 2
27719: NEG
27720: PUSH
27721: LD_INT 3
27723: NEG
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: LD_INT 3
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: LD_INT 2
27746: NEG
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 2
27754: PUSH
27755: LD_INT 1
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27788: LD_ADDR_VAR 0 24
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 0
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: LD_INT 2
27884: NEG
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 2
27923: PUSH
27924: LD_INT 2
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: LD_INT 2
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 2
27964: NEG
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 2
27975: NEG
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 2
27987: NEG
27988: PUSH
27989: LD_INT 2
27991: NEG
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: LD_INT 2
28002: NEG
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: LD_INT 1
28013: NEG
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 3
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 3
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28064: LD_ADDR_VAR 0 25
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: LD_INT 0
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: LD_INT 1
28084: NEG
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: LD_INT 2
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: LD_INT 2
28160: NEG
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 2
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: LD_INT 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: NEG
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: LD_INT 2
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 3
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 3
28285: PUSH
28286: LD_INT 2
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 3
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: LD_INT 3
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28338: LD_ADDR_VAR 0 26
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: LD_INT 2
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: LD_INT 2
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 2
28453: PUSH
28454: LD_INT 0
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 2
28463: PUSH
28464: LD_INT 1
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 2
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 1
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: LD_INT 1
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 2
28514: NEG
28515: PUSH
28516: LD_INT 0
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: NEG
28526: PUSH
28527: LD_INT 1
28529: NEG
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 2
28537: NEG
28538: PUSH
28539: LD_INT 2
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: LD_INT 3
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: LD_INT 3
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: LD_INT 2
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 2
28580: NEG
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28614: LD_ADDR_VAR 0 27
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 1
28683: NEG
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: LD_INT 2
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: LD_INT 2
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 2
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 2
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 2
28813: NEG
28814: PUSH
28815: LD_INT 2
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: LD_INT 2
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 3
28847: NEG
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 3
28859: NEG
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28894: LD_ADDR_VAR 0 28
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: LD_INT 2
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: LD_INT 2
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 1
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: NEG
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 2
29081: NEG
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 2
29093: NEG
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 2
29105: NEG
29106: PUSH
29107: LD_INT 3
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: LD_INT 3
29121: NEG
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 3
29129: NEG
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 3
29141: NEG
29142: PUSH
29143: LD_INT 2
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29176: LD_ADDR_VAR 0 29
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: LD_INT 1
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: LD_INT 0
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: LD_INT 1
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 1
29234: NEG
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: LD_INT 1
29249: NEG
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 1
29257: NEG
29258: PUSH
29259: LD_INT 2
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: LD_INT 2
29272: NEG
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 1
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 2
29291: PUSH
29292: LD_INT 0
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: LD_INT 1
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: LD_INT 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: LD_INT 2
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: NEG
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: NEG
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: LD_INT 3
29370: NEG
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 2
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 3
29389: PUSH
29390: LD_INT 1
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: LD_INT 3
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: LD_INT 2
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 3
29420: NEG
29421: PUSH
29422: LD_INT 2
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29455: LD_ADDR_VAR 0 30
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 1
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 1
29513: NEG
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 2
29540: NEG
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 2
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: LD_INT 2
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 2
29621: NEG
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 2
29632: NEG
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: LD_INT 3
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: LD_INT 2
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 3
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 2
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 2
29687: NEG
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 3
29698: NEG
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29733: LD_ADDR_VAR 0 31
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 0
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 1
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: LD_INT 1
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 1
29791: NEG
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: NEG
29815: PUSH
29816: LD_INT 2
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 2
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 2
29857: PUSH
29858: LD_INT 2
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: LD_INT 2
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 2
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: LD_INT 1
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 2
29910: NEG
29911: PUSH
29912: LD_INT 2
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 2
29922: NEG
29923: PUSH
29924: LD_INT 3
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 2
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 3
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: LD_INT 3
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 1
29965: NEG
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 3
29976: NEG
29977: PUSH
29978: LD_INT 2
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30011: LD_ADDR_VAR 0 32
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 1
30069: NEG
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: LD_INT 1
30084: NEG
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: LD_INT 2
30096: NEG
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 0
30104: PUSH
30105: LD_INT 2
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: PUSH
30147: LD_INT 2
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 1
30166: NEG
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 2
30177: NEG
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: LD_INT 3
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: LD_INT 2
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 3
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: LD_INT 3
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 2
30243: NEG
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: NEG
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30289: LD_ADDR_VAR 0 33
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 0
30306: PUSH
30307: LD_INT 1
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: LD_INT 0
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 1
30347: NEG
30348: PUSH
30349: LD_INT 0
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 1
30370: NEG
30371: PUSH
30372: LD_INT 2
30374: NEG
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 2
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: LD_INT 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 2
30444: NEG
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 2
30455: NEG
30456: PUSH
30457: LD_INT 1
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 2
30467: NEG
30468: PUSH
30469: LD_INT 2
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 2
30479: NEG
30480: PUSH
30481: LD_INT 3
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 3
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: NEG
30523: PUSH
30524: LD_INT 2
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 3
30533: NEG
30534: PUSH
30535: LD_INT 2
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30568: LD_ADDR_VAR 0 34
30572: PUSH
30573: LD_INT 0
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 0
30585: PUSH
30586: LD_INT 1
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: LD_INT 1
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: NEG
30650: PUSH
30651: LD_INT 2
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: LD_INT 2
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: LD_INT 1
30675: NEG
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 2
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 1
30713: NEG
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 2
30724: NEG
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 2
30735: NEG
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 2
30747: NEG
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: LD_INT 3
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: LD_INT 2
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 3
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: NEG
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 3
30813: NEG
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30848: LD_ADDR_VAR 0 35
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 1
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 1
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 0
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 1
30906: NEG
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 1
30917: NEG
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30960: LD_ADDR_VAR 0 36
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 0
30977: PUSH
30978: LD_INT 1
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: LD_INT 0
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: PUSH
30999: LD_INT 1
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 1
31018: NEG
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: NEG
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: NEG
31042: PUSH
31043: LD_INT 2
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: LD_INT 2
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31072: LD_ADDR_VAR 0 37
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: LD_INT 1
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: LD_INT 0
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: LD_INT 1
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 1
31130: NEG
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 1
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 1
31164: NEG
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31184: LD_ADDR_VAR 0 38
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: LD_INT 1
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 1
31242: NEG
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: LD_INT 1
31257: NEG
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 2
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 2
31275: NEG
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31296: LD_ADDR_VAR 0 39
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 1
31354: NEG
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31408: LD_ADDR_VAR 0 40
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: LD_INT 1
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: LD_INT 1
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31520: LD_ADDR_VAR 0 41
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 0
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: LD_INT 2
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 2
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: LD_INT 2
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: NEG
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: NEG
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: LD_INT 3
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 3
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 3
31763: PUSH
31764: LD_INT 3
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: LD_INT 3
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 3
31794: NEG
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 3
31805: NEG
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 3
31817: NEG
31818: PUSH
31819: LD_INT 2
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 3
31829: NEG
31830: PUSH
31831: LD_INT 3
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31870: LD_ADDR_VAR 0 42
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: LD_INT 2
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: LD_INT 1
31977: NEG
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: LD_INT 2
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: NEG
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: LD_INT 3
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: LD_INT 3
32076: NEG
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 0
32084: PUSH
32085: LD_INT 3
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 3
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: LD_INT 3
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: LD_INT 3
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: LD_INT 3
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: LD_INT 3
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 3
32167: NEG
32168: PUSH
32169: LD_INT 2
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 3
32179: NEG
32180: PUSH
32181: LD_INT 3
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32220: LD_ADDR_VAR 0 43
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: NEG
32302: PUSH
32303: LD_INT 2
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 1
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 2
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: LD_INT 2
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: LD_INT 2
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 2
32386: NEG
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 2
32397: NEG
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 3
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: LD_INT 2
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 3
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: LD_INT 3
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 0
32484: PUSH
32485: LD_INT 3
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 2
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 3
32516: NEG
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 3
32527: NEG
32528: PUSH
32529: LD_INT 1
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32568: LD_ADDR_VAR 0 44
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: NEG
32650: PUSH
32651: LD_INT 2
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 2
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: PUSH
32693: LD_INT 2
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: LD_INT 1
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 2
32723: NEG
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 2
32734: NEG
32735: PUSH
32736: LD_INT 1
32738: NEG
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: NEG
32747: PUSH
32748: LD_INT 2
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 2
32758: NEG
32759: PUSH
32760: LD_INT 3
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: PUSH
32771: LD_INT 1
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 3
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 3
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 3
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 3
32811: PUSH
32812: LD_INT 3
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: LD_INT 3
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: NEG
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 3
32842: NEG
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 3
32853: NEG
32854: PUSH
32855: LD_INT 1
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 3
32865: NEG
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 3
32877: NEG
32878: PUSH
32879: LD_INT 3
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32918: LD_ADDR_VAR 0 45
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 1
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: LD_INT 1
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 1
32976: NEG
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: LD_INT 2
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 2
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: NEG
33097: PUSH
33098: LD_INT 2
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: LD_INT 3
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: NEG
33121: PUSH
33122: LD_INT 3
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: LD_INT 3
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: LD_INT 2
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 3
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 3
33164: PUSH
33165: LD_INT 3
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: LD_INT 3
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: LD_INT 3
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 3
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: LD_INT 2
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 3
33215: NEG
33216: PUSH
33217: LD_INT 2
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 3
33227: NEG
33228: PUSH
33229: LD_INT 3
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33268: LD_ADDR_VAR 0 46
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: LD_INT 2
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 2
33434: NEG
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: NEG
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: LD_INT 3
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: LD_INT 3
33472: NEG
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 2
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 3
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 3
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: LD_INT 2
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 2
33553: NEG
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 3
33564: NEG
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 3
33575: NEG
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33616: LD_ADDR_VAR 0 47
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: NEG
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: LD_INT 2
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 2
33731: NEG
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 2
33743: NEG
33744: PUSH
33745: LD_INT 2
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33767: LD_ADDR_VAR 0 48
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: LD_INT 0
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 1
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: LD_INT 2
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 2
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 2
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33914: LD_ADDR_VAR 0 49
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 0
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 1
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 2
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: PUSH
34027: LD_INT 2
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 1
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34058: LD_ADDR_VAR 0 50
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: LD_INT 0
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 1
34127: NEG
34128: PUSH
34129: LD_INT 1
34131: NEG
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: LD_INT 2
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 1
34179: NEG
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34202: LD_ADDR_VAR 0 51
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 0
34219: PUSH
34220: LD_INT 1
34222: NEG
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: LD_INT 0
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: LD_INT 1
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 2
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: NEG
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34349: LD_ADDR_VAR 0 52
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: LD_INT 0
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: LD_INT 2
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 2
34464: NEG
34465: PUSH
34466: LD_INT 1
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 2
34476: NEG
34477: PUSH
34478: LD_INT 2
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34500: LD_ADDR_VAR 0 53
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: LD_INT 0
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: LD_INT 1
34520: NEG
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: PUSH
34539: LD_INT 1
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: LD_INT 2
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 2
34596: NEG
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: LD_INT 2
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: LD_INT 2
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 2
34676: NEG
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 2
34699: NEG
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34730: LD_ADDR_VAR 0 54
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: LD_INT 2
34815: NEG
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: LD_INT 2
34826: NEG
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: LD_INT 1
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 2
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 2
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 2
34906: NEG
34907: PUSH
34908: LD_INT 0
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 2
34917: NEG
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: NEG
34930: PUSH
34931: LD_INT 2
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34960: LD_ADDR_VAR 0 55
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: LD_INT 2
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 1
35064: PUSH
35065: LD_INT 1
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 2
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 2
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: LD_INT 2
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 2
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 2
35147: NEG
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 2
35159: NEG
35160: PUSH
35161: LD_INT 2
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35190: LD_ADDR_VAR 0 56
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 1
35271: NEG
35272: PUSH
35273: LD_INT 2
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: LD_INT 2
35286: NEG
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 1
35294: PUSH
35295: LD_INT 1
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 2
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: LD_INT 2
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 2
35366: NEG
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 2
35377: NEG
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 2
35389: NEG
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35420: LD_ADDR_VAR 0 57
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: NEG
35502: PUSH
35503: LD_INT 2
35505: NEG
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: LD_INT 2
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 2
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: LD_INT 2
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 2
35596: NEG
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 2
35607: NEG
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35650: LD_ADDR_VAR 0 58
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 0
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: LD_INT 1
35723: NEG
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: LD_INT 2
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: LD_INT 2
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 2
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: LD_INT 2
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 2
35826: NEG
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: NEG
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: LD_INT 2
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35880: LD_ADDR_VAR 0 59
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: LD_INT 1
35953: NEG
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35968: LD_ADDR_VAR 0 60
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 1
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: LD_INT 1
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36056: LD_ADDR_VAR 0 61
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 1
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 1
36125: NEG
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36144: LD_ADDR_VAR 0 62
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 1
36213: NEG
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36232: LD_ADDR_VAR 0 63
36236: PUSH
36237: LD_INT 0
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36320: LD_ADDR_VAR 0 64
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// end ; 1 :
36408: GO 42305
36410: LD_INT 1
36412: DOUBLE
36413: EQUAL
36414: IFTRUE 36418
36416: GO 39041
36418: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36419: LD_ADDR_VAR 0 11
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: LD_INT 3
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: LD_INT 3
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: LD_INT 2
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: LIST
36462: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36463: LD_ADDR_VAR 0 12
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 3
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 3
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36504: LD_ADDR_VAR 0 13
36508: PUSH
36509: LD_INT 3
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 3
36521: PUSH
36522: LD_INT 3
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: LD_INT 3
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: LIST
36543: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36544: LD_ADDR_VAR 0 14
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: LD_INT 3
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 3
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36585: LD_ADDR_VAR 0 15
36589: PUSH
36590: LD_INT 2
36592: NEG
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 3
36603: NEG
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 3
36614: NEG
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: LIST
36628: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36629: LD_ADDR_VAR 0 16
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: LD_INT 3
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 3
36648: NEG
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 3
36660: NEG
36661: PUSH
36662: LD_INT 3
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: LIST
36674: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36675: LD_ADDR_VAR 0 17
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: LD_INT 3
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: LD_INT 3
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36719: LD_ADDR_VAR 0 18
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 3
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 3
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36760: LD_ADDR_VAR 0 19
36764: PUSH
36765: LD_INT 3
36767: PUSH
36768: LD_INT 2
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 3
36777: PUSH
36778: LD_INT 3
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 2
36787: PUSH
36788: LD_INT 3
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36800: LD_ADDR_VAR 0 20
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 3
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 3
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36841: LD_ADDR_VAR 0 21
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 3
36859: NEG
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 3
36870: NEG
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36885: LD_ADDR_VAR 0 22
36889: PUSH
36890: LD_INT 2
36892: NEG
36893: PUSH
36894: LD_INT 3
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 3
36904: NEG
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 3
36916: NEG
36917: PUSH
36918: LD_INT 3
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36931: LD_ADDR_VAR 0 23
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: LD_INT 3
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 4
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: LD_INT 3
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36975: LD_ADDR_VAR 0 24
36979: PUSH
36980: LD_INT 3
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 3
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 4
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37016: LD_ADDR_VAR 0 25
37020: PUSH
37021: LD_INT 3
37023: PUSH
37024: LD_INT 3
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 4
37033: PUSH
37034: LD_INT 3
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 3
37043: PUSH
37044: LD_INT 4
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37056: LD_ADDR_VAR 0 26
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 3
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: LD_INT 4
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: LD_INT 3
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37097: LD_ADDR_VAR 0 27
37101: PUSH
37102: LD_INT 3
37104: NEG
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 3
37115: NEG
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 4
37126: NEG
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37141: LD_ADDR_VAR 0 28
37145: PUSH
37146: LD_INT 3
37148: NEG
37149: PUSH
37150: LD_INT 3
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 3
37160: NEG
37161: PUSH
37162: LD_INT 4
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 4
37172: NEG
37173: PUSH
37174: LD_INT 3
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37187: LD_ADDR_VAR 0 29
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: LD_INT 3
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 3
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: LD_INT 2
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: LD_INT 4
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: LD_INT 4
37243: NEG
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: LD_INT 3
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: LD_INT 5
37266: NEG
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: LD_INT 5
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: LD_INT 4
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: NEG
37297: PUSH
37298: LD_INT 6
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 6
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: LD_INT 5
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37342: LD_ADDR_VAR 0 30
37346: PUSH
37347: LD_INT 2
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 3
37360: PUSH
37361: LD_INT 0
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 3
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 3
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 4
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 4
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 4
37411: PUSH
37412: LD_INT 1
37414: NEG
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 5
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 5
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 5
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 6
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 6
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37485: LD_ADDR_VAR 0 31
37489: PUSH
37490: LD_INT 3
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 3
37502: PUSH
37503: LD_INT 3
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 3
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 4
37522: PUSH
37523: LD_INT 3
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 4
37532: PUSH
37533: LD_INT 4
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 3
37542: PUSH
37543: LD_INT 4
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 5
37552: PUSH
37553: LD_INT 4
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 5
37562: PUSH
37563: LD_INT 5
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 4
37572: PUSH
37573: LD_INT 5
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 6
37582: PUSH
37583: LD_INT 5
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 6
37592: PUSH
37593: LD_INT 6
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 5
37602: PUSH
37603: LD_INT 6
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37624: LD_ADDR_VAR 0 32
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: LD_INT 3
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: LD_INT 2
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: LD_INT 4
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: LD_INT 4
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: LD_INT 3
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: LD_INT 5
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: LD_INT 5
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: LD_INT 4
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: LD_INT 6
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: LD_INT 6
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: LD_INT 5
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37767: LD_ADDR_VAR 0 33
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 3
37785: NEG
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 3
37796: NEG
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 3
37808: NEG
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 4
37819: NEG
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 4
37830: NEG
37831: PUSH
37832: LD_INT 1
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 4
37842: NEG
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 5
37853: NEG
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 5
37864: NEG
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 5
37876: NEG
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 6
37887: NEG
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 6
37898: NEG
37899: PUSH
37900: LD_INT 1
37902: NEG
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37922: LD_ADDR_VAR 0 34
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: LD_INT 3
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 3
37941: NEG
37942: PUSH
37943: LD_INT 2
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 3
37953: NEG
37954: PUSH
37955: LD_INT 3
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 3
37965: NEG
37966: PUSH
37967: LD_INT 4
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 4
37977: NEG
37978: PUSH
37979: LD_INT 3
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 4
37989: NEG
37990: PUSH
37991: LD_INT 4
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 4
38001: NEG
38002: PUSH
38003: LD_INT 5
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 5
38013: NEG
38014: PUSH
38015: LD_INT 4
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 5
38025: NEG
38026: PUSH
38027: LD_INT 5
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 5
38037: NEG
38038: PUSH
38039: LD_INT 6
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 6
38049: NEG
38050: PUSH
38051: LD_INT 5
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 6
38061: NEG
38062: PUSH
38063: LD_INT 6
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38085: LD_ADDR_VAR 0 41
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: LD_INT 3
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: LIST
38128: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38129: LD_ADDR_VAR 0 42
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 3
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38170: LD_ADDR_VAR 0 43
38174: PUSH
38175: LD_INT 2
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 3
38187: PUSH
38188: LD_INT 2
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: LD_INT 3
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38210: LD_ADDR_VAR 0 44
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: LD_INT 2
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 2
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38251: LD_ADDR_VAR 0 45
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 2
38269: NEG
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 3
38280: NEG
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38295: LD_ADDR_VAR 0 46
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: LD_INT 3
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 3
38326: NEG
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38341: LD_ADDR_VAR 0 47
38345: PUSH
38346: LD_INT 2
38348: NEG
38349: PUSH
38350: LD_INT 3
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: LD_INT 3
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38374: LD_ADDR_VAR 0 48
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: LD_INT 1
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38405: LD_ADDR_VAR 0 49
38409: PUSH
38410: LD_INT 3
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 3
38422: PUSH
38423: LD_INT 2
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38434: LD_ADDR_VAR 0 50
38438: PUSH
38439: LD_INT 2
38441: PUSH
38442: LD_INT 3
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38463: LD_ADDR_VAR 0 51
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: LD_INT 2
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 2
38481: NEG
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38494: LD_ADDR_VAR 0 52
38498: PUSH
38499: LD_INT 3
38501: NEG
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 3
38513: NEG
38514: PUSH
38515: LD_INT 2
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38527: LD_ADDR_VAR 0 53
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: LD_INT 3
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: LD_INT 3
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38571: LD_ADDR_VAR 0 54
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: LIST
38611: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38612: LD_ADDR_VAR 0 55
38616: PUSH
38617: LD_INT 3
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 3
38629: PUSH
38630: LD_INT 3
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: LD_INT 3
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38652: LD_ADDR_VAR 0 56
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: LD_INT 3
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: LD_INT 3
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38693: LD_ADDR_VAR 0 57
38697: PUSH
38698: LD_INT 2
38700: NEG
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 3
38711: NEG
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 3
38722: NEG
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38737: LD_ADDR_VAR 0 58
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: LD_INT 3
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 3
38756: NEG
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 3
38768: NEG
38769: PUSH
38770: LD_INT 3
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38783: LD_ADDR_VAR 0 59
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: LD_INT 2
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38827: LD_ADDR_VAR 0 60
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38868: LD_ADDR_VAR 0 61
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 2
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38908: LD_ADDR_VAR 0 62
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38949: LD_ADDR_VAR 0 63
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: LIST
38992: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38993: LD_ADDR_VAR 0 64
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: LD_INT 2
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: NEG
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 2
39024: NEG
39025: PUSH
39026: LD_INT 2
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: ST_TO_ADDR
// end ; 2 :
39039: GO 42305
39041: LD_INT 2
39043: DOUBLE
39044: EQUAL
39045: IFTRUE 39049
39047: GO 42304
39049: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39050: LD_ADDR_VAR 0 29
39054: PUSH
39055: LD_INT 4
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 4
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 5
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 5
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 4
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 3
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 3
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 3
39129: PUSH
39130: LD_INT 2
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 5
39140: PUSH
39141: LD_INT 2
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 3
39150: PUSH
39151: LD_INT 3
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 3
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 4
39170: PUSH
39171: LD_INT 3
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 4
39180: PUSH
39181: LD_INT 4
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 3
39190: PUSH
39191: LD_INT 4
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 4
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: LD_INT 4
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 4
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: LD_INT 3
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: LD_INT 4
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: LD_INT 5
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 5
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: LD_INT 4
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: LD_INT 3
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: PUSH
39313: LD_INT 5
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: NEG
39323: PUSH
39324: LD_INT 3
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 3
39333: NEG
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 3
39344: NEG
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 2
39356: NEG
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: NEG
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 3
39378: NEG
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 4
39389: NEG
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 4
39400: NEG
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 4
39412: NEG
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 4
39435: NEG
39436: PUSH
39437: LD_INT 4
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 4
39447: NEG
39448: PUSH
39449: LD_INT 5
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 3
39459: NEG
39460: PUSH
39461: LD_INT 4
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 3
39471: NEG
39472: PUSH
39473: LD_INT 3
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 4
39483: NEG
39484: PUSH
39485: LD_INT 3
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 5
39495: NEG
39496: PUSH
39497: LD_INT 4
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 5
39507: NEG
39508: PUSH
39509: LD_INT 5
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 3
39519: NEG
39520: PUSH
39521: LD_INT 5
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 5
39531: NEG
39532: PUSH
39533: LD_INT 3
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39588: LD_ADDR_VAR 0 30
39592: PUSH
39593: LD_INT 4
39595: PUSH
39596: LD_INT 4
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 4
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 5
39615: PUSH
39616: LD_INT 4
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 5
39625: PUSH
39626: LD_INT 5
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 4
39635: PUSH
39636: LD_INT 5
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 3
39645: PUSH
39646: LD_INT 4
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 3
39655: PUSH
39656: LD_INT 3
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 5
39665: PUSH
39666: LD_INT 3
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 3
39675: PUSH
39676: LD_INT 5
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: LD_INT 3
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 3
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: LD_INT 4
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: LD_INT 4
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: LD_INT 3
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: LD_INT 4
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 4
39778: NEG
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 4
39789: NEG
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 3
39801: NEG
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 3
39812: NEG
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 4
39823: NEG
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 5
39834: NEG
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 5
39845: NEG
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 5
39857: NEG
39858: PUSH
39859: LD_INT 2
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 3
39869: NEG
39870: PUSH
39871: LD_INT 2
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 3
39880: NEG
39881: PUSH
39882: LD_INT 3
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 3
39892: NEG
39893: PUSH
39894: LD_INT 4
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 2
39904: NEG
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 3
39928: NEG
39929: PUSH
39930: LD_INT 2
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 4
39940: NEG
39941: PUSH
39942: LD_INT 3
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 4
39952: NEG
39953: PUSH
39954: LD_INT 4
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: LD_INT 4
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 4
39976: NEG
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: LD_INT 4
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 5
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: LD_INT 4
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 3
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 3
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: LD_INT 4
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: LD_INT 5
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 3
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: NEG
40079: PUSH
40080: LD_INT 5
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40135: LD_ADDR_VAR 0 31
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 4
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 4
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 5
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: LD_INT 5
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: LD_INT 4
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 5
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: NEG
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 3
40235: NEG
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 3
40246: NEG
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: NEG
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 2
40269: NEG
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 3
40280: NEG
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 4
40291: NEG
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 4
40302: NEG
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 4
40314: NEG
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 4
40337: NEG
40338: PUSH
40339: LD_INT 4
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 4
40349: NEG
40350: PUSH
40351: LD_INT 5
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 3
40361: NEG
40362: PUSH
40363: LD_INT 4
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: LD_INT 3
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 4
40385: NEG
40386: PUSH
40387: LD_INT 3
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 5
40397: NEG
40398: PUSH
40399: LD_INT 4
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 5
40409: NEG
40410: PUSH
40411: LD_INT 5
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 3
40421: NEG
40422: PUSH
40423: LD_INT 5
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 5
40433: NEG
40434: PUSH
40435: LD_INT 3
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: LD_INT 3
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 4
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 3
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: LD_INT 3
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 4
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: LD_INT 4
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 4
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 4
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 5
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 5
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 4
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 3
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 3
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 3
40619: PUSH
40620: LD_INT 2
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 5
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40685: LD_ADDR_VAR 0 32
40689: PUSH
40690: LD_INT 4
40692: NEG
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 4
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 3
40715: NEG
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 3
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 4
40737: NEG
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 5
40748: NEG
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 5
40759: NEG
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 5
40771: NEG
40772: PUSH
40773: LD_INT 2
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 3
40783: NEG
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 3
40794: NEG
40795: PUSH
40796: LD_INT 3
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 3
40806: NEG
40807: PUSH
40808: LD_INT 4
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 2
40818: NEG
40819: PUSH
40820: LD_INT 3
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 3
40842: NEG
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 4
40854: NEG
40855: PUSH
40856: LD_INT 3
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 4
40866: NEG
40867: PUSH
40868: LD_INT 4
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: LD_INT 4
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 4
40890: NEG
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 4
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 5
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: LD_INT 4
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 3
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 3
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: LD_INT 4
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 5
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 2
40981: PUSH
40982: LD_INT 3
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: LD_INT 5
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 3
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 4
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 4
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 3
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 4
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 4
41097: PUSH
41098: LD_INT 4
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 4
41107: PUSH
41108: LD_INT 3
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 5
41117: PUSH
41118: LD_INT 4
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 5
41127: PUSH
41128: LD_INT 5
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 4
41137: PUSH
41138: LD_INT 5
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 3
41147: PUSH
41148: LD_INT 4
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: LD_INT 3
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 5
41167: PUSH
41168: LD_INT 3
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 3
41177: PUSH
41178: LD_INT 5
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41232: LD_ADDR_VAR 0 33
41236: PUSH
41237: LD_INT 4
41239: NEG
41240: PUSH
41241: LD_INT 4
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 4
41251: NEG
41252: PUSH
41253: LD_INT 5
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 3
41263: NEG
41264: PUSH
41265: LD_INT 4
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 3
41275: NEG
41276: PUSH
41277: LD_INT 3
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 4
41287: NEG
41288: PUSH
41289: LD_INT 3
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 5
41299: NEG
41300: PUSH
41301: LD_INT 4
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 5
41311: NEG
41312: PUSH
41313: LD_INT 5
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 3
41323: NEG
41324: PUSH
41325: LD_INT 5
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 5
41335: NEG
41336: PUSH
41337: LD_INT 3
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 3
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 4
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 3
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: LD_INT 3
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: LD_INT 4
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: LD_INT 2
41429: NEG
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: LD_INT 4
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 4
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 4
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 5
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 5
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 4
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 3
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 3
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 3
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 5
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 3
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 3
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 4
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 4
41572: PUSH
41573: LD_INT 4
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 3
41582: PUSH
41583: LD_INT 4
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 2
41592: PUSH
41593: LD_INT 3
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 4
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: PUSH
41623: LD_INT 4
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: LD_INT 4
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 3
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: LD_INT 4
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: LD_INT 5
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 5
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: LD_INT 4
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: LD_INT 5
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41770: LD_ADDR_VAR 0 34
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: LD_INT 4
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 5
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 4
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: LD_INT 3
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 3
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 4
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: LD_INT 5
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: LD_INT 3
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: LD_INT 5
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 3
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 3
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 4
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 4
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 3
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 4
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 4
41972: PUSH
41973: LD_INT 4
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 4
41982: PUSH
41983: LD_INT 3
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 5
41992: PUSH
41993: LD_INT 4
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 5
42002: PUSH
42003: LD_INT 5
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 4
42012: PUSH
42013: LD_INT 5
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 3
42022: PUSH
42023: LD_INT 4
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 5
42042: PUSH
42043: LD_INT 3
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 3
42052: PUSH
42053: LD_INT 5
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 3
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: LD_INT 4
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: LD_INT 4
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: LD_INT 4
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 4
42155: NEG
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 4
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 3
42178: NEG
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 3
42189: NEG
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 4
42200: NEG
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 5
42211: NEG
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 5
42222: NEG
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 5
42234: NEG
42235: PUSH
42236: LD_INT 2
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 3
42246: NEG
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: ST_TO_ADDR
// end ; end ;
42302: GO 42305
42304: POP
// case btype of b_depot , b_warehouse :
42305: LD_VAR 0 1
42309: PUSH
42310: LD_INT 0
42312: DOUBLE
42313: EQUAL
42314: IFTRUE 42324
42316: LD_INT 1
42318: DOUBLE
42319: EQUAL
42320: IFTRUE 42324
42322: GO 42525
42324: POP
// case nation of nation_american :
42325: LD_VAR 0 5
42329: PUSH
42330: LD_INT 1
42332: DOUBLE
42333: EQUAL
42334: IFTRUE 42338
42336: GO 42394
42338: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42339: LD_ADDR_VAR 0 9
42343: PUSH
42344: LD_VAR 0 11
42348: PUSH
42349: LD_VAR 0 12
42353: PUSH
42354: LD_VAR 0 13
42358: PUSH
42359: LD_VAR 0 14
42363: PUSH
42364: LD_VAR 0 15
42368: PUSH
42369: LD_VAR 0 16
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: PUSH
42382: LD_VAR 0 4
42386: PUSH
42387: LD_INT 1
42389: PLUS
42390: ARRAY
42391: ST_TO_ADDR
42392: GO 42523
42394: LD_INT 2
42396: DOUBLE
42397: EQUAL
42398: IFTRUE 42402
42400: GO 42458
42402: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42403: LD_ADDR_VAR 0 9
42407: PUSH
42408: LD_VAR 0 17
42412: PUSH
42413: LD_VAR 0 18
42417: PUSH
42418: LD_VAR 0 19
42422: PUSH
42423: LD_VAR 0 20
42427: PUSH
42428: LD_VAR 0 21
42432: PUSH
42433: LD_VAR 0 22
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: PUSH
42446: LD_VAR 0 4
42450: PUSH
42451: LD_INT 1
42453: PLUS
42454: ARRAY
42455: ST_TO_ADDR
42456: GO 42523
42458: LD_INT 3
42460: DOUBLE
42461: EQUAL
42462: IFTRUE 42466
42464: GO 42522
42466: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42467: LD_ADDR_VAR 0 9
42471: PUSH
42472: LD_VAR 0 23
42476: PUSH
42477: LD_VAR 0 24
42481: PUSH
42482: LD_VAR 0 25
42486: PUSH
42487: LD_VAR 0 26
42491: PUSH
42492: LD_VAR 0 27
42496: PUSH
42497: LD_VAR 0 28
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: PUSH
42510: LD_VAR 0 4
42514: PUSH
42515: LD_INT 1
42517: PLUS
42518: ARRAY
42519: ST_TO_ADDR
42520: GO 42523
42522: POP
42523: GO 43078
42525: LD_INT 2
42527: DOUBLE
42528: EQUAL
42529: IFTRUE 42539
42531: LD_INT 3
42533: DOUBLE
42534: EQUAL
42535: IFTRUE 42539
42537: GO 42595
42539: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42540: LD_ADDR_VAR 0 9
42544: PUSH
42545: LD_VAR 0 29
42549: PUSH
42550: LD_VAR 0 30
42554: PUSH
42555: LD_VAR 0 31
42559: PUSH
42560: LD_VAR 0 32
42564: PUSH
42565: LD_VAR 0 33
42569: PUSH
42570: LD_VAR 0 34
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: PUSH
42583: LD_VAR 0 4
42587: PUSH
42588: LD_INT 1
42590: PLUS
42591: ARRAY
42592: ST_TO_ADDR
42593: GO 43078
42595: LD_INT 16
42597: DOUBLE
42598: EQUAL
42599: IFTRUE 42657
42601: LD_INT 17
42603: DOUBLE
42604: EQUAL
42605: IFTRUE 42657
42607: LD_INT 18
42609: DOUBLE
42610: EQUAL
42611: IFTRUE 42657
42613: LD_INT 19
42615: DOUBLE
42616: EQUAL
42617: IFTRUE 42657
42619: LD_INT 22
42621: DOUBLE
42622: EQUAL
42623: IFTRUE 42657
42625: LD_INT 20
42627: DOUBLE
42628: EQUAL
42629: IFTRUE 42657
42631: LD_INT 21
42633: DOUBLE
42634: EQUAL
42635: IFTRUE 42657
42637: LD_INT 23
42639: DOUBLE
42640: EQUAL
42641: IFTRUE 42657
42643: LD_INT 24
42645: DOUBLE
42646: EQUAL
42647: IFTRUE 42657
42649: LD_INT 25
42651: DOUBLE
42652: EQUAL
42653: IFTRUE 42657
42655: GO 42713
42657: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42658: LD_ADDR_VAR 0 9
42662: PUSH
42663: LD_VAR 0 35
42667: PUSH
42668: LD_VAR 0 36
42672: PUSH
42673: LD_VAR 0 37
42677: PUSH
42678: LD_VAR 0 38
42682: PUSH
42683: LD_VAR 0 39
42687: PUSH
42688: LD_VAR 0 40
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: PUSH
42701: LD_VAR 0 4
42705: PUSH
42706: LD_INT 1
42708: PLUS
42709: ARRAY
42710: ST_TO_ADDR
42711: GO 43078
42713: LD_INT 6
42715: DOUBLE
42716: EQUAL
42717: IFTRUE 42769
42719: LD_INT 7
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42769
42725: LD_INT 8
42727: DOUBLE
42728: EQUAL
42729: IFTRUE 42769
42731: LD_INT 13
42733: DOUBLE
42734: EQUAL
42735: IFTRUE 42769
42737: LD_INT 12
42739: DOUBLE
42740: EQUAL
42741: IFTRUE 42769
42743: LD_INT 15
42745: DOUBLE
42746: EQUAL
42747: IFTRUE 42769
42749: LD_INT 11
42751: DOUBLE
42752: EQUAL
42753: IFTRUE 42769
42755: LD_INT 14
42757: DOUBLE
42758: EQUAL
42759: IFTRUE 42769
42761: LD_INT 10
42763: DOUBLE
42764: EQUAL
42765: IFTRUE 42769
42767: GO 42825
42769: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42770: LD_ADDR_VAR 0 9
42774: PUSH
42775: LD_VAR 0 41
42779: PUSH
42780: LD_VAR 0 42
42784: PUSH
42785: LD_VAR 0 43
42789: PUSH
42790: LD_VAR 0 44
42794: PUSH
42795: LD_VAR 0 45
42799: PUSH
42800: LD_VAR 0 46
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: PUSH
42813: LD_VAR 0 4
42817: PUSH
42818: LD_INT 1
42820: PLUS
42821: ARRAY
42822: ST_TO_ADDR
42823: GO 43078
42825: LD_INT 36
42827: DOUBLE
42828: EQUAL
42829: IFTRUE 42833
42831: GO 42889
42833: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42834: LD_ADDR_VAR 0 9
42838: PUSH
42839: LD_VAR 0 47
42843: PUSH
42844: LD_VAR 0 48
42848: PUSH
42849: LD_VAR 0 49
42853: PUSH
42854: LD_VAR 0 50
42858: PUSH
42859: LD_VAR 0 51
42863: PUSH
42864: LD_VAR 0 52
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: PUSH
42877: LD_VAR 0 4
42881: PUSH
42882: LD_INT 1
42884: PLUS
42885: ARRAY
42886: ST_TO_ADDR
42887: GO 43078
42889: LD_INT 4
42891: DOUBLE
42892: EQUAL
42893: IFTRUE 42915
42895: LD_INT 5
42897: DOUBLE
42898: EQUAL
42899: IFTRUE 42915
42901: LD_INT 34
42903: DOUBLE
42904: EQUAL
42905: IFTRUE 42915
42907: LD_INT 37
42909: DOUBLE
42910: EQUAL
42911: IFTRUE 42915
42913: GO 42971
42915: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42916: LD_ADDR_VAR 0 9
42920: PUSH
42921: LD_VAR 0 53
42925: PUSH
42926: LD_VAR 0 54
42930: PUSH
42931: LD_VAR 0 55
42935: PUSH
42936: LD_VAR 0 56
42940: PUSH
42941: LD_VAR 0 57
42945: PUSH
42946: LD_VAR 0 58
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: PUSH
42959: LD_VAR 0 4
42963: PUSH
42964: LD_INT 1
42966: PLUS
42967: ARRAY
42968: ST_TO_ADDR
42969: GO 43078
42971: LD_INT 31
42973: DOUBLE
42974: EQUAL
42975: IFTRUE 43021
42977: LD_INT 32
42979: DOUBLE
42980: EQUAL
42981: IFTRUE 43021
42983: LD_INT 33
42985: DOUBLE
42986: EQUAL
42987: IFTRUE 43021
42989: LD_INT 27
42991: DOUBLE
42992: EQUAL
42993: IFTRUE 43021
42995: LD_INT 26
42997: DOUBLE
42998: EQUAL
42999: IFTRUE 43021
43001: LD_INT 28
43003: DOUBLE
43004: EQUAL
43005: IFTRUE 43021
43007: LD_INT 29
43009: DOUBLE
43010: EQUAL
43011: IFTRUE 43021
43013: LD_INT 30
43015: DOUBLE
43016: EQUAL
43017: IFTRUE 43021
43019: GO 43077
43021: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43022: LD_ADDR_VAR 0 9
43026: PUSH
43027: LD_VAR 0 59
43031: PUSH
43032: LD_VAR 0 60
43036: PUSH
43037: LD_VAR 0 61
43041: PUSH
43042: LD_VAR 0 62
43046: PUSH
43047: LD_VAR 0 63
43051: PUSH
43052: LD_VAR 0 64
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: PUSH
43065: LD_VAR 0 4
43069: PUSH
43070: LD_INT 1
43072: PLUS
43073: ARRAY
43074: ST_TO_ADDR
43075: GO 43078
43077: POP
// temp_list2 = [ ] ;
43078: LD_ADDR_VAR 0 10
43082: PUSH
43083: EMPTY
43084: ST_TO_ADDR
// for i in temp_list do
43085: LD_ADDR_VAR 0 8
43089: PUSH
43090: LD_VAR 0 9
43094: PUSH
43095: FOR_IN
43096: IFFALSE 43148
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43098: LD_ADDR_VAR 0 10
43102: PUSH
43103: LD_VAR 0 10
43107: PUSH
43108: LD_VAR 0 8
43112: PUSH
43113: LD_INT 1
43115: ARRAY
43116: PUSH
43117: LD_VAR 0 2
43121: PLUS
43122: PUSH
43123: LD_VAR 0 8
43127: PUSH
43128: LD_INT 2
43130: ARRAY
43131: PUSH
43132: LD_VAR 0 3
43136: PLUS
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: EMPTY
43143: LIST
43144: ADD
43145: ST_TO_ADDR
43146: GO 43095
43148: POP
43149: POP
// result = temp_list2 ;
43150: LD_ADDR_VAR 0 7
43154: PUSH
43155: LD_VAR 0 10
43159: ST_TO_ADDR
// end ;
43160: LD_VAR 0 7
43164: RET
// export function EnemyInRange ( unit , dist ) ; begin
43165: LD_INT 0
43167: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43168: LD_ADDR_VAR 0 3
43172: PUSH
43173: LD_VAR 0 1
43177: PPUSH
43178: CALL_OW 255
43182: PPUSH
43183: LD_VAR 0 1
43187: PPUSH
43188: CALL_OW 250
43192: PPUSH
43193: LD_VAR 0 1
43197: PPUSH
43198: CALL_OW 251
43202: PPUSH
43203: LD_VAR 0 2
43207: PPUSH
43208: CALL 16567 0 4
43212: PUSH
43213: LD_INT 4
43215: ARRAY
43216: ST_TO_ADDR
// end ;
43217: LD_VAR 0 3
43221: RET
// export function PlayerSeeMe ( unit ) ; begin
43222: LD_INT 0
43224: PPUSH
// result := See ( your_side , unit ) ;
43225: LD_ADDR_VAR 0 2
43229: PUSH
43230: LD_OWVAR 2
43234: PPUSH
43235: LD_VAR 0 1
43239: PPUSH
43240: CALL_OW 292
43244: ST_TO_ADDR
// end ;
43245: LD_VAR 0 2
43249: RET
// export function ReverseDir ( unit ) ; begin
43250: LD_INT 0
43252: PPUSH
// if not unit then
43253: LD_VAR 0 1
43257: NOT
43258: IFFALSE 43262
// exit ;
43260: GO 43285
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43262: LD_ADDR_VAR 0 2
43266: PUSH
43267: LD_VAR 0 1
43271: PPUSH
43272: CALL_OW 254
43276: PUSH
43277: LD_INT 3
43279: PLUS
43280: PUSH
43281: LD_INT 6
43283: MOD
43284: ST_TO_ADDR
// end ;
43285: LD_VAR 0 2
43289: RET
// export function ReverseArray ( array ) ; var i ; begin
43290: LD_INT 0
43292: PPUSH
43293: PPUSH
// if not array then
43294: LD_VAR 0 1
43298: NOT
43299: IFFALSE 43303
// exit ;
43301: GO 43358
// result := [ ] ;
43303: LD_ADDR_VAR 0 2
43307: PUSH
43308: EMPTY
43309: ST_TO_ADDR
// for i := array downto 1 do
43310: LD_ADDR_VAR 0 3
43314: PUSH
43315: DOUBLE
43316: LD_VAR 0 1
43320: INC
43321: ST_TO_ADDR
43322: LD_INT 1
43324: PUSH
43325: FOR_DOWNTO
43326: IFFALSE 43356
// result := Join ( result , array [ i ] ) ;
43328: LD_ADDR_VAR 0 2
43332: PUSH
43333: LD_VAR 0 2
43337: PPUSH
43338: LD_VAR 0 1
43342: PUSH
43343: LD_VAR 0 3
43347: ARRAY
43348: PPUSH
43349: CALL 48001 0 2
43353: ST_TO_ADDR
43354: GO 43325
43356: POP
43357: POP
// end ;
43358: LD_VAR 0 2
43362: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43363: LD_INT 0
43365: PPUSH
43366: PPUSH
43367: PPUSH
43368: PPUSH
43369: PPUSH
43370: PPUSH
// if not unit or not hexes then
43371: LD_VAR 0 1
43375: NOT
43376: PUSH
43377: LD_VAR 0 2
43381: NOT
43382: OR
43383: IFFALSE 43387
// exit ;
43385: GO 43510
// dist := 9999 ;
43387: LD_ADDR_VAR 0 5
43391: PUSH
43392: LD_INT 9999
43394: ST_TO_ADDR
// for i = 1 to hexes do
43395: LD_ADDR_VAR 0 4
43399: PUSH
43400: DOUBLE
43401: LD_INT 1
43403: DEC
43404: ST_TO_ADDR
43405: LD_VAR 0 2
43409: PUSH
43410: FOR_TO
43411: IFFALSE 43498
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43413: LD_ADDR_VAR 0 6
43417: PUSH
43418: LD_VAR 0 1
43422: PPUSH
43423: LD_VAR 0 2
43427: PUSH
43428: LD_VAR 0 4
43432: ARRAY
43433: PUSH
43434: LD_INT 1
43436: ARRAY
43437: PPUSH
43438: LD_VAR 0 2
43442: PUSH
43443: LD_VAR 0 4
43447: ARRAY
43448: PUSH
43449: LD_INT 2
43451: ARRAY
43452: PPUSH
43453: CALL_OW 297
43457: ST_TO_ADDR
// if tdist < dist then
43458: LD_VAR 0 6
43462: PUSH
43463: LD_VAR 0 5
43467: LESS
43468: IFFALSE 43496
// begin hex := hexes [ i ] ;
43470: LD_ADDR_VAR 0 8
43474: PUSH
43475: LD_VAR 0 2
43479: PUSH
43480: LD_VAR 0 4
43484: ARRAY
43485: ST_TO_ADDR
// dist := tdist ;
43486: LD_ADDR_VAR 0 5
43490: PUSH
43491: LD_VAR 0 6
43495: ST_TO_ADDR
// end ; end ;
43496: GO 43410
43498: POP
43499: POP
// result := hex ;
43500: LD_ADDR_VAR 0 3
43504: PUSH
43505: LD_VAR 0 8
43509: ST_TO_ADDR
// end ;
43510: LD_VAR 0 3
43514: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43515: LD_INT 0
43517: PPUSH
43518: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43519: LD_VAR 0 1
43523: NOT
43524: PUSH
43525: LD_VAR 0 1
43529: PUSH
43530: LD_INT 21
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 23
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PPUSH
43554: CALL_OW 69
43558: IN
43559: NOT
43560: OR
43561: IFFALSE 43565
// exit ;
43563: GO 43612
// for i = 1 to 3 do
43565: LD_ADDR_VAR 0 3
43569: PUSH
43570: DOUBLE
43571: LD_INT 1
43573: DEC
43574: ST_TO_ADDR
43575: LD_INT 3
43577: PUSH
43578: FOR_TO
43579: IFFALSE 43610
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43581: LD_VAR 0 1
43585: PPUSH
43586: CALL_OW 250
43590: PPUSH
43591: LD_VAR 0 1
43595: PPUSH
43596: CALL_OW 251
43600: PPUSH
43601: LD_INT 1
43603: PPUSH
43604: CALL_OW 453
43608: GO 43578
43610: POP
43611: POP
// end ;
43612: LD_VAR 0 2
43616: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43617: LD_INT 0
43619: PPUSH
43620: PPUSH
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
43625: LD_VAR 0 1
43629: NOT
43630: PUSH
43631: LD_VAR 0 2
43635: NOT
43636: OR
43637: PUSH
43638: LD_VAR 0 1
43642: PPUSH
43643: CALL_OW 314
43647: OR
43648: IFFALSE 43652
// exit ;
43650: GO 44119
// if GetLives ( i ) < 250 then
43652: LD_VAR 0 4
43656: PPUSH
43657: CALL_OW 256
43661: PUSH
43662: LD_INT 250
43664: LESS
43665: IFFALSE 43678
// begin ComAutodestruct ( i ) ;
43667: LD_VAR 0 4
43671: PPUSH
43672: CALL 43515 0 1
// exit ;
43676: GO 44119
// end ; x := GetX ( enemy_unit ) ;
43678: LD_ADDR_VAR 0 7
43682: PUSH
43683: LD_VAR 0 2
43687: PPUSH
43688: CALL_OW 250
43692: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43693: LD_ADDR_VAR 0 8
43697: PUSH
43698: LD_VAR 0 2
43702: PPUSH
43703: CALL_OW 251
43707: ST_TO_ADDR
// if not x or not y then
43708: LD_VAR 0 7
43712: NOT
43713: PUSH
43714: LD_VAR 0 8
43718: NOT
43719: OR
43720: IFFALSE 43724
// exit ;
43722: GO 44119
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43724: LD_ADDR_VAR 0 6
43728: PUSH
43729: LD_VAR 0 7
43733: PPUSH
43734: LD_INT 0
43736: PPUSH
43737: LD_INT 4
43739: PPUSH
43740: CALL_OW 272
43744: PUSH
43745: LD_VAR 0 8
43749: PPUSH
43750: LD_INT 0
43752: PPUSH
43753: LD_INT 4
43755: PPUSH
43756: CALL_OW 273
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_VAR 0 7
43769: PPUSH
43770: LD_INT 1
43772: PPUSH
43773: LD_INT 4
43775: PPUSH
43776: CALL_OW 272
43780: PUSH
43781: LD_VAR 0 8
43785: PPUSH
43786: LD_INT 1
43788: PPUSH
43789: LD_INT 4
43791: PPUSH
43792: CALL_OW 273
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_VAR 0 7
43805: PPUSH
43806: LD_INT 2
43808: PPUSH
43809: LD_INT 4
43811: PPUSH
43812: CALL_OW 272
43816: PUSH
43817: LD_VAR 0 8
43821: PPUSH
43822: LD_INT 2
43824: PPUSH
43825: LD_INT 4
43827: PPUSH
43828: CALL_OW 273
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_VAR 0 7
43841: PPUSH
43842: LD_INT 3
43844: PPUSH
43845: LD_INT 4
43847: PPUSH
43848: CALL_OW 272
43852: PUSH
43853: LD_VAR 0 8
43857: PPUSH
43858: LD_INT 3
43860: PPUSH
43861: LD_INT 4
43863: PPUSH
43864: CALL_OW 273
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_VAR 0 7
43877: PPUSH
43878: LD_INT 4
43880: PPUSH
43881: LD_INT 4
43883: PPUSH
43884: CALL_OW 272
43888: PUSH
43889: LD_VAR 0 8
43893: PPUSH
43894: LD_INT 4
43896: PPUSH
43897: LD_INT 4
43899: PPUSH
43900: CALL_OW 273
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_VAR 0 7
43913: PPUSH
43914: LD_INT 5
43916: PPUSH
43917: LD_INT 4
43919: PPUSH
43920: CALL_OW 272
43924: PUSH
43925: LD_VAR 0 8
43929: PPUSH
43930: LD_INT 5
43932: PPUSH
43933: LD_INT 4
43935: PPUSH
43936: CALL_OW 273
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: ST_TO_ADDR
// for i = tmp downto 1 do
43953: LD_ADDR_VAR 0 4
43957: PUSH
43958: DOUBLE
43959: LD_VAR 0 6
43963: INC
43964: ST_TO_ADDR
43965: LD_INT 1
43967: PUSH
43968: FOR_DOWNTO
43969: IFFALSE 44070
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43971: LD_VAR 0 6
43975: PUSH
43976: LD_VAR 0 4
43980: ARRAY
43981: PUSH
43982: LD_INT 1
43984: ARRAY
43985: PPUSH
43986: LD_VAR 0 6
43990: PUSH
43991: LD_VAR 0 4
43995: ARRAY
43996: PUSH
43997: LD_INT 2
43999: ARRAY
44000: PPUSH
44001: CALL_OW 488
44005: NOT
44006: PUSH
44007: LD_VAR 0 6
44011: PUSH
44012: LD_VAR 0 4
44016: ARRAY
44017: PUSH
44018: LD_INT 1
44020: ARRAY
44021: PPUSH
44022: LD_VAR 0 6
44026: PUSH
44027: LD_VAR 0 4
44031: ARRAY
44032: PUSH
44033: LD_INT 2
44035: ARRAY
44036: PPUSH
44037: CALL_OW 428
44041: PUSH
44042: LD_INT 0
44044: NONEQUAL
44045: OR
44046: IFFALSE 44068
// tmp := Delete ( tmp , i ) ;
44048: LD_ADDR_VAR 0 6
44052: PUSH
44053: LD_VAR 0 6
44057: PPUSH
44058: LD_VAR 0 4
44062: PPUSH
44063: CALL_OW 3
44067: ST_TO_ADDR
44068: GO 43968
44070: POP
44071: POP
// j := GetClosestHex ( unit , tmp ) ;
44072: LD_ADDR_VAR 0 5
44076: PUSH
44077: LD_VAR 0 1
44081: PPUSH
44082: LD_VAR 0 6
44086: PPUSH
44087: CALL 43363 0 2
44091: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44092: LD_VAR 0 1
44096: PPUSH
44097: LD_VAR 0 5
44101: PUSH
44102: LD_INT 1
44104: ARRAY
44105: PPUSH
44106: LD_VAR 0 5
44110: PUSH
44111: LD_INT 2
44113: ARRAY
44114: PPUSH
44115: CALL_OW 111
// end ;
44119: LD_VAR 0 3
44123: RET
// export function PrepareApemanSoldier ( ) ; begin
44124: LD_INT 0
44126: PPUSH
// uc_nation := 0 ;
44127: LD_ADDR_OWVAR 21
44131: PUSH
44132: LD_INT 0
44134: ST_TO_ADDR
// hc_sex := sex_male ;
44135: LD_ADDR_OWVAR 27
44139: PUSH
44140: LD_INT 1
44142: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44143: LD_ADDR_OWVAR 28
44147: PUSH
44148: LD_INT 15
44150: ST_TO_ADDR
// hc_gallery :=  ;
44151: LD_ADDR_OWVAR 33
44155: PUSH
44156: LD_STRING 
44158: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44159: LD_ADDR_OWVAR 31
44163: PUSH
44164: LD_INT 0
44166: PPUSH
44167: LD_INT 3
44169: PPUSH
44170: CALL_OW 12
44174: PUSH
44175: LD_INT 0
44177: PPUSH
44178: LD_INT 3
44180: PPUSH
44181: CALL_OW 12
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: ST_TO_ADDR
// end ;
44198: LD_VAR 0 1
44202: RET
// export function PrepareApemanEngineer ( ) ; begin
44203: LD_INT 0
44205: PPUSH
// uc_nation := 0 ;
44206: LD_ADDR_OWVAR 21
44210: PUSH
44211: LD_INT 0
44213: ST_TO_ADDR
// hc_sex := sex_male ;
44214: LD_ADDR_OWVAR 27
44218: PUSH
44219: LD_INT 1
44221: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44222: LD_ADDR_OWVAR 28
44226: PUSH
44227: LD_INT 16
44229: ST_TO_ADDR
// hc_gallery :=  ;
44230: LD_ADDR_OWVAR 33
44234: PUSH
44235: LD_STRING 
44237: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44238: LD_ADDR_OWVAR 31
44242: PUSH
44243: LD_INT 0
44245: PPUSH
44246: LD_INT 3
44248: PPUSH
44249: CALL_OW 12
44253: PUSH
44254: LD_INT 0
44256: PPUSH
44257: LD_INT 3
44259: PPUSH
44260: CALL_OW 12
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: ST_TO_ADDR
// end ;
44277: LD_VAR 0 1
44281: RET
// export function PrepareApeman ( agressivity ) ; begin
44282: LD_INT 0
44284: PPUSH
// uc_side := 0 ;
44285: LD_ADDR_OWVAR 20
44289: PUSH
44290: LD_INT 0
44292: ST_TO_ADDR
// uc_nation := 0 ;
44293: LD_ADDR_OWVAR 21
44297: PUSH
44298: LD_INT 0
44300: ST_TO_ADDR
// hc_sex := sex_male ;
44301: LD_ADDR_OWVAR 27
44305: PUSH
44306: LD_INT 1
44308: ST_TO_ADDR
// hc_class := class_apeman ;
44309: LD_ADDR_OWVAR 28
44313: PUSH
44314: LD_INT 12
44316: ST_TO_ADDR
// hc_gallery :=  ;
44317: LD_ADDR_OWVAR 33
44321: PUSH
44322: LD_STRING 
44324: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44325: LD_ADDR_OWVAR 35
44329: PUSH
44330: LD_VAR 0 1
44334: NEG
44335: PPUSH
44336: LD_VAR 0 1
44340: PPUSH
44341: CALL_OW 12
44345: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44346: LD_ADDR_OWVAR 31
44350: PUSH
44351: LD_INT 0
44353: PPUSH
44354: LD_INT 3
44356: PPUSH
44357: CALL_OW 12
44361: PUSH
44362: LD_INT 0
44364: PPUSH
44365: LD_INT 3
44367: PPUSH
44368: CALL_OW 12
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: ST_TO_ADDR
// end ;
44385: LD_VAR 0 2
44389: RET
// export function PrepareTiger ( agressivity ) ; begin
44390: LD_INT 0
44392: PPUSH
// uc_side := 0 ;
44393: LD_ADDR_OWVAR 20
44397: PUSH
44398: LD_INT 0
44400: ST_TO_ADDR
// uc_nation := 0 ;
44401: LD_ADDR_OWVAR 21
44405: PUSH
44406: LD_INT 0
44408: ST_TO_ADDR
// hc_class := class_tiger ;
44409: LD_ADDR_OWVAR 28
44413: PUSH
44414: LD_INT 14
44416: ST_TO_ADDR
// hc_gallery :=  ;
44417: LD_ADDR_OWVAR 33
44421: PUSH
44422: LD_STRING 
44424: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44425: LD_ADDR_OWVAR 35
44429: PUSH
44430: LD_VAR 0 1
44434: NEG
44435: PPUSH
44436: LD_VAR 0 1
44440: PPUSH
44441: CALL_OW 12
44445: ST_TO_ADDR
// end ;
44446: LD_VAR 0 2
44450: RET
// export function PrepareEnchidna ( ) ; begin
44451: LD_INT 0
44453: PPUSH
// uc_side := 0 ;
44454: LD_ADDR_OWVAR 20
44458: PUSH
44459: LD_INT 0
44461: ST_TO_ADDR
// uc_nation := 0 ;
44462: LD_ADDR_OWVAR 21
44466: PUSH
44467: LD_INT 0
44469: ST_TO_ADDR
// hc_class := class_baggie ;
44470: LD_ADDR_OWVAR 28
44474: PUSH
44475: LD_INT 13
44477: ST_TO_ADDR
// hc_gallery :=  ;
44478: LD_ADDR_OWVAR 33
44482: PUSH
44483: LD_STRING 
44485: ST_TO_ADDR
// end ;
44486: LD_VAR 0 1
44490: RET
// export function PrepareFrog ( ) ; begin
44491: LD_INT 0
44493: PPUSH
// uc_side := 0 ;
44494: LD_ADDR_OWVAR 20
44498: PUSH
44499: LD_INT 0
44501: ST_TO_ADDR
// uc_nation := 0 ;
44502: LD_ADDR_OWVAR 21
44506: PUSH
44507: LD_INT 0
44509: ST_TO_ADDR
// hc_class := class_frog ;
44510: LD_ADDR_OWVAR 28
44514: PUSH
44515: LD_INT 19
44517: ST_TO_ADDR
// hc_gallery :=  ;
44518: LD_ADDR_OWVAR 33
44522: PUSH
44523: LD_STRING 
44525: ST_TO_ADDR
// end ;
44526: LD_VAR 0 1
44530: RET
// export function PrepareFish ( ) ; begin
44531: LD_INT 0
44533: PPUSH
// uc_side := 0 ;
44534: LD_ADDR_OWVAR 20
44538: PUSH
44539: LD_INT 0
44541: ST_TO_ADDR
// uc_nation := 0 ;
44542: LD_ADDR_OWVAR 21
44546: PUSH
44547: LD_INT 0
44549: ST_TO_ADDR
// hc_class := class_fish ;
44550: LD_ADDR_OWVAR 28
44554: PUSH
44555: LD_INT 20
44557: ST_TO_ADDR
// hc_gallery :=  ;
44558: LD_ADDR_OWVAR 33
44562: PUSH
44563: LD_STRING 
44565: ST_TO_ADDR
// end ;
44566: LD_VAR 0 1
44570: RET
// export function PrepareBird ( ) ; begin
44571: LD_INT 0
44573: PPUSH
// uc_side := 0 ;
44574: LD_ADDR_OWVAR 20
44578: PUSH
44579: LD_INT 0
44581: ST_TO_ADDR
// uc_nation := 0 ;
44582: LD_ADDR_OWVAR 21
44586: PUSH
44587: LD_INT 0
44589: ST_TO_ADDR
// hc_class := class_phororhacos ;
44590: LD_ADDR_OWVAR 28
44594: PUSH
44595: LD_INT 18
44597: ST_TO_ADDR
// hc_gallery :=  ;
44598: LD_ADDR_OWVAR 33
44602: PUSH
44603: LD_STRING 
44605: ST_TO_ADDR
// end ;
44606: LD_VAR 0 1
44610: RET
// export function PrepareHorse ( ) ; begin
44611: LD_INT 0
44613: PPUSH
// uc_side := 0 ;
44614: LD_ADDR_OWVAR 20
44618: PUSH
44619: LD_INT 0
44621: ST_TO_ADDR
// uc_nation := 0 ;
44622: LD_ADDR_OWVAR 21
44626: PUSH
44627: LD_INT 0
44629: ST_TO_ADDR
// hc_class := class_horse ;
44630: LD_ADDR_OWVAR 28
44634: PUSH
44635: LD_INT 21
44637: ST_TO_ADDR
// hc_gallery :=  ;
44638: LD_ADDR_OWVAR 33
44642: PUSH
44643: LD_STRING 
44645: ST_TO_ADDR
// end ;
44646: LD_VAR 0 1
44650: RET
// export function PrepareMastodont ( ) ; begin
44651: LD_INT 0
44653: PPUSH
// uc_side := 0 ;
44654: LD_ADDR_OWVAR 20
44658: PUSH
44659: LD_INT 0
44661: ST_TO_ADDR
// uc_nation := 0 ;
44662: LD_ADDR_OWVAR 21
44666: PUSH
44667: LD_INT 0
44669: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44670: LD_ADDR_OWVAR 37
44674: PUSH
44675: LD_INT 31
44677: ST_TO_ADDR
// vc_control := control_rider ;
44678: LD_ADDR_OWVAR 38
44682: PUSH
44683: LD_INT 4
44685: ST_TO_ADDR
// end ;
44686: LD_VAR 0 1
44690: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44691: LD_INT 0
44693: PPUSH
44694: PPUSH
44695: PPUSH
// uc_side = 0 ;
44696: LD_ADDR_OWVAR 20
44700: PUSH
44701: LD_INT 0
44703: ST_TO_ADDR
// uc_nation = 0 ;
44704: LD_ADDR_OWVAR 21
44708: PUSH
44709: LD_INT 0
44711: ST_TO_ADDR
// InitHc_All ( ) ;
44712: CALL_OW 584
// InitVc ;
44716: CALL_OW 20
// if mastodonts then
44720: LD_VAR 0 6
44724: IFFALSE 44791
// for i = 1 to mastodonts do
44726: LD_ADDR_VAR 0 11
44730: PUSH
44731: DOUBLE
44732: LD_INT 1
44734: DEC
44735: ST_TO_ADDR
44736: LD_VAR 0 6
44740: PUSH
44741: FOR_TO
44742: IFFALSE 44789
// begin vc_chassis := 31 ;
44744: LD_ADDR_OWVAR 37
44748: PUSH
44749: LD_INT 31
44751: ST_TO_ADDR
// vc_control := control_rider ;
44752: LD_ADDR_OWVAR 38
44756: PUSH
44757: LD_INT 4
44759: ST_TO_ADDR
// animal := CreateVehicle ;
44760: LD_ADDR_VAR 0 12
44764: PUSH
44765: CALL_OW 45
44769: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44770: LD_VAR 0 12
44774: PPUSH
44775: LD_VAR 0 8
44779: PPUSH
44780: LD_INT 0
44782: PPUSH
44783: CALL 46919 0 3
// end ;
44787: GO 44741
44789: POP
44790: POP
// if horses then
44791: LD_VAR 0 5
44795: IFFALSE 44862
// for i = 1 to horses do
44797: LD_ADDR_VAR 0 11
44801: PUSH
44802: DOUBLE
44803: LD_INT 1
44805: DEC
44806: ST_TO_ADDR
44807: LD_VAR 0 5
44811: PUSH
44812: FOR_TO
44813: IFFALSE 44860
// begin hc_class := 21 ;
44815: LD_ADDR_OWVAR 28
44819: PUSH
44820: LD_INT 21
44822: ST_TO_ADDR
// hc_gallery :=  ;
44823: LD_ADDR_OWVAR 33
44827: PUSH
44828: LD_STRING 
44830: ST_TO_ADDR
// animal := CreateHuman ;
44831: LD_ADDR_VAR 0 12
44835: PUSH
44836: CALL_OW 44
44840: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44841: LD_VAR 0 12
44845: PPUSH
44846: LD_VAR 0 8
44850: PPUSH
44851: LD_INT 0
44853: PPUSH
44854: CALL 46919 0 3
// end ;
44858: GO 44812
44860: POP
44861: POP
// if birds then
44862: LD_VAR 0 1
44866: IFFALSE 44933
// for i = 1 to birds do
44868: LD_ADDR_VAR 0 11
44872: PUSH
44873: DOUBLE
44874: LD_INT 1
44876: DEC
44877: ST_TO_ADDR
44878: LD_VAR 0 1
44882: PUSH
44883: FOR_TO
44884: IFFALSE 44931
// begin hc_class = 18 ;
44886: LD_ADDR_OWVAR 28
44890: PUSH
44891: LD_INT 18
44893: ST_TO_ADDR
// hc_gallery =  ;
44894: LD_ADDR_OWVAR 33
44898: PUSH
44899: LD_STRING 
44901: ST_TO_ADDR
// animal := CreateHuman ;
44902: LD_ADDR_VAR 0 12
44906: PUSH
44907: CALL_OW 44
44911: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44912: LD_VAR 0 12
44916: PPUSH
44917: LD_VAR 0 8
44921: PPUSH
44922: LD_INT 0
44924: PPUSH
44925: CALL 46919 0 3
// end ;
44929: GO 44883
44931: POP
44932: POP
// if tigers then
44933: LD_VAR 0 2
44937: IFFALSE 45021
// for i = 1 to tigers do
44939: LD_ADDR_VAR 0 11
44943: PUSH
44944: DOUBLE
44945: LD_INT 1
44947: DEC
44948: ST_TO_ADDR
44949: LD_VAR 0 2
44953: PUSH
44954: FOR_TO
44955: IFFALSE 45019
// begin hc_class = class_tiger ;
44957: LD_ADDR_OWVAR 28
44961: PUSH
44962: LD_INT 14
44964: ST_TO_ADDR
// hc_gallery =  ;
44965: LD_ADDR_OWVAR 33
44969: PUSH
44970: LD_STRING 
44972: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44973: LD_ADDR_OWVAR 35
44977: PUSH
44978: LD_INT 7
44980: NEG
44981: PPUSH
44982: LD_INT 7
44984: PPUSH
44985: CALL_OW 12
44989: ST_TO_ADDR
// animal := CreateHuman ;
44990: LD_ADDR_VAR 0 12
44994: PUSH
44995: CALL_OW 44
44999: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45000: LD_VAR 0 12
45004: PPUSH
45005: LD_VAR 0 8
45009: PPUSH
45010: LD_INT 0
45012: PPUSH
45013: CALL 46919 0 3
// end ;
45017: GO 44954
45019: POP
45020: POP
// if apemans then
45021: LD_VAR 0 3
45025: IFFALSE 45148
// for i = 1 to apemans do
45027: LD_ADDR_VAR 0 11
45031: PUSH
45032: DOUBLE
45033: LD_INT 1
45035: DEC
45036: ST_TO_ADDR
45037: LD_VAR 0 3
45041: PUSH
45042: FOR_TO
45043: IFFALSE 45146
// begin hc_class = class_apeman ;
45045: LD_ADDR_OWVAR 28
45049: PUSH
45050: LD_INT 12
45052: ST_TO_ADDR
// hc_gallery =  ;
45053: LD_ADDR_OWVAR 33
45057: PUSH
45058: LD_STRING 
45060: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45061: LD_ADDR_OWVAR 35
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PPUSH
45070: LD_INT 2
45072: PPUSH
45073: CALL_OW 12
45077: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45078: LD_ADDR_OWVAR 31
45082: PUSH
45083: LD_INT 1
45085: PPUSH
45086: LD_INT 3
45088: PPUSH
45089: CALL_OW 12
45093: PUSH
45094: LD_INT 1
45096: PPUSH
45097: LD_INT 3
45099: PPUSH
45100: CALL_OW 12
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: ST_TO_ADDR
// animal := CreateHuman ;
45117: LD_ADDR_VAR 0 12
45121: PUSH
45122: CALL_OW 44
45126: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45127: LD_VAR 0 12
45131: PPUSH
45132: LD_VAR 0 8
45136: PPUSH
45137: LD_INT 0
45139: PPUSH
45140: CALL 46919 0 3
// end ;
45144: GO 45042
45146: POP
45147: POP
// if enchidnas then
45148: LD_VAR 0 4
45152: IFFALSE 45219
// for i = 1 to enchidnas do
45154: LD_ADDR_VAR 0 11
45158: PUSH
45159: DOUBLE
45160: LD_INT 1
45162: DEC
45163: ST_TO_ADDR
45164: LD_VAR 0 4
45168: PUSH
45169: FOR_TO
45170: IFFALSE 45217
// begin hc_class = 13 ;
45172: LD_ADDR_OWVAR 28
45176: PUSH
45177: LD_INT 13
45179: ST_TO_ADDR
// hc_gallery =  ;
45180: LD_ADDR_OWVAR 33
45184: PUSH
45185: LD_STRING 
45187: ST_TO_ADDR
// animal := CreateHuman ;
45188: LD_ADDR_VAR 0 12
45192: PUSH
45193: CALL_OW 44
45197: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45198: LD_VAR 0 12
45202: PPUSH
45203: LD_VAR 0 8
45207: PPUSH
45208: LD_INT 0
45210: PPUSH
45211: CALL 46919 0 3
// end ;
45215: GO 45169
45217: POP
45218: POP
// if fishes then
45219: LD_VAR 0 7
45223: IFFALSE 45290
// for i = 1 to fishes do
45225: LD_ADDR_VAR 0 11
45229: PUSH
45230: DOUBLE
45231: LD_INT 1
45233: DEC
45234: ST_TO_ADDR
45235: LD_VAR 0 7
45239: PUSH
45240: FOR_TO
45241: IFFALSE 45288
// begin hc_class = 20 ;
45243: LD_ADDR_OWVAR 28
45247: PUSH
45248: LD_INT 20
45250: ST_TO_ADDR
// hc_gallery =  ;
45251: LD_ADDR_OWVAR 33
45255: PUSH
45256: LD_STRING 
45258: ST_TO_ADDR
// animal := CreateHuman ;
45259: LD_ADDR_VAR 0 12
45263: PUSH
45264: CALL_OW 44
45268: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45269: LD_VAR 0 12
45273: PPUSH
45274: LD_VAR 0 9
45278: PPUSH
45279: LD_INT 0
45281: PPUSH
45282: CALL 46919 0 3
// end ;
45286: GO 45240
45288: POP
45289: POP
// end ;
45290: LD_VAR 0 10
45294: RET
// export function WantHeal ( sci , unit ) ; begin
45295: LD_INT 0
45297: PPUSH
// if GetTaskList ( sci ) > 0 then
45298: LD_VAR 0 1
45302: PPUSH
45303: CALL_OW 437
45307: PUSH
45308: LD_INT 0
45310: GREATER
45311: IFFALSE 45381
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45313: LD_VAR 0 1
45317: PPUSH
45318: CALL_OW 437
45322: PUSH
45323: LD_INT 1
45325: ARRAY
45326: PUSH
45327: LD_INT 1
45329: ARRAY
45330: PUSH
45331: LD_STRING l
45333: EQUAL
45334: PUSH
45335: LD_VAR 0 1
45339: PPUSH
45340: CALL_OW 437
45344: PUSH
45345: LD_INT 1
45347: ARRAY
45348: PUSH
45349: LD_INT 4
45351: ARRAY
45352: PUSH
45353: LD_VAR 0 2
45357: EQUAL
45358: AND
45359: IFFALSE 45371
// result := true else
45361: LD_ADDR_VAR 0 3
45365: PUSH
45366: LD_INT 1
45368: ST_TO_ADDR
45369: GO 45379
// result := false ;
45371: LD_ADDR_VAR 0 3
45375: PUSH
45376: LD_INT 0
45378: ST_TO_ADDR
// end else
45379: GO 45389
// result := false ;
45381: LD_ADDR_VAR 0 3
45385: PUSH
45386: LD_INT 0
45388: ST_TO_ADDR
// end ;
45389: LD_VAR 0 3
45393: RET
// export function HealTarget ( sci ) ; begin
45394: LD_INT 0
45396: PPUSH
// if not sci then
45397: LD_VAR 0 1
45401: NOT
45402: IFFALSE 45406
// exit ;
45404: GO 45471
// result := 0 ;
45406: LD_ADDR_VAR 0 2
45410: PUSH
45411: LD_INT 0
45413: ST_TO_ADDR
// if GetTaskList ( sci ) then
45414: LD_VAR 0 1
45418: PPUSH
45419: CALL_OW 437
45423: IFFALSE 45471
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45425: LD_VAR 0 1
45429: PPUSH
45430: CALL_OW 437
45434: PUSH
45435: LD_INT 1
45437: ARRAY
45438: PUSH
45439: LD_INT 1
45441: ARRAY
45442: PUSH
45443: LD_STRING l
45445: EQUAL
45446: IFFALSE 45471
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45448: LD_ADDR_VAR 0 2
45452: PUSH
45453: LD_VAR 0 1
45457: PPUSH
45458: CALL_OW 437
45462: PUSH
45463: LD_INT 1
45465: ARRAY
45466: PUSH
45467: LD_INT 4
45469: ARRAY
45470: ST_TO_ADDR
// end ;
45471: LD_VAR 0 2
45475: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45476: LD_INT 0
45478: PPUSH
45479: PPUSH
45480: PPUSH
45481: PPUSH
// if not base_units then
45482: LD_VAR 0 1
45486: NOT
45487: IFFALSE 45491
// exit ;
45489: GO 45578
// result := false ;
45491: LD_ADDR_VAR 0 2
45495: PUSH
45496: LD_INT 0
45498: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45499: LD_ADDR_VAR 0 5
45503: PUSH
45504: LD_VAR 0 1
45508: PPUSH
45509: LD_INT 21
45511: PUSH
45512: LD_INT 3
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PPUSH
45519: CALL_OW 72
45523: ST_TO_ADDR
// if not tmp then
45524: LD_VAR 0 5
45528: NOT
45529: IFFALSE 45533
// exit ;
45531: GO 45578
// for i in tmp do
45533: LD_ADDR_VAR 0 3
45537: PUSH
45538: LD_VAR 0 5
45542: PUSH
45543: FOR_IN
45544: IFFALSE 45576
// begin result := EnemyInRange ( i , 22 ) ;
45546: LD_ADDR_VAR 0 2
45550: PUSH
45551: LD_VAR 0 3
45555: PPUSH
45556: LD_INT 22
45558: PPUSH
45559: CALL 43165 0 2
45563: ST_TO_ADDR
// if result then
45564: LD_VAR 0 2
45568: IFFALSE 45574
// exit ;
45570: POP
45571: POP
45572: GO 45578
// end ;
45574: GO 45543
45576: POP
45577: POP
// end ;
45578: LD_VAR 0 2
45582: RET
// export function FilterByTag ( units , tag ) ; begin
45583: LD_INT 0
45585: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45586: LD_ADDR_VAR 0 3
45590: PUSH
45591: LD_VAR 0 1
45595: PPUSH
45596: LD_INT 120
45598: PUSH
45599: LD_VAR 0 2
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PPUSH
45608: CALL_OW 72
45612: ST_TO_ADDR
// end ;
45613: LD_VAR 0 3
45617: RET
// export function IsDriver ( un ) ; begin
45618: LD_INT 0
45620: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45621: LD_ADDR_VAR 0 2
45625: PUSH
45626: LD_VAR 0 1
45630: PUSH
45631: LD_INT 55
45633: PUSH
45634: EMPTY
45635: LIST
45636: PPUSH
45637: CALL_OW 69
45641: IN
45642: ST_TO_ADDR
// end ;
45643: LD_VAR 0 2
45647: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45648: LD_INT 0
45650: PPUSH
45651: PPUSH
// list := [ ] ;
45652: LD_ADDR_VAR 0 5
45656: PUSH
45657: EMPTY
45658: ST_TO_ADDR
// case d of 0 :
45659: LD_VAR 0 3
45663: PUSH
45664: LD_INT 0
45666: DOUBLE
45667: EQUAL
45668: IFTRUE 45672
45670: GO 45805
45672: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45673: LD_ADDR_VAR 0 5
45677: PUSH
45678: LD_VAR 0 1
45682: PUSH
45683: LD_INT 4
45685: MINUS
45686: PUSH
45687: LD_VAR 0 2
45691: PUSH
45692: LD_INT 4
45694: MINUS
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: LIST
45703: PUSH
45704: LD_VAR 0 1
45708: PUSH
45709: LD_INT 3
45711: MINUS
45712: PUSH
45713: LD_VAR 0 2
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: LIST
45725: PUSH
45726: LD_VAR 0 1
45730: PUSH
45731: LD_INT 4
45733: PLUS
45734: PUSH
45735: LD_VAR 0 2
45739: PUSH
45740: LD_INT 4
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: PUSH
45748: LD_VAR 0 1
45752: PUSH
45753: LD_INT 3
45755: PLUS
45756: PUSH
45757: LD_VAR 0 2
45761: PUSH
45762: LD_INT 3
45764: PLUS
45765: PUSH
45766: LD_INT 5
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: LIST
45773: PUSH
45774: LD_VAR 0 1
45778: PUSH
45779: LD_VAR 0 2
45783: PUSH
45784: LD_INT 4
45786: PLUS
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: ST_TO_ADDR
// end ; 1 :
45803: GO 46503
45805: LD_INT 1
45807: DOUBLE
45808: EQUAL
45809: IFTRUE 45813
45811: GO 45946
45813: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45814: LD_ADDR_VAR 0 5
45818: PUSH
45819: LD_VAR 0 1
45823: PUSH
45824: LD_VAR 0 2
45828: PUSH
45829: LD_INT 4
45831: MINUS
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: PUSH
45841: LD_VAR 0 1
45845: PUSH
45846: LD_INT 3
45848: MINUS
45849: PUSH
45850: LD_VAR 0 2
45854: PUSH
45855: LD_INT 3
45857: MINUS
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: PUSH
45867: LD_VAR 0 1
45871: PUSH
45872: LD_INT 4
45874: MINUS
45875: PUSH
45876: LD_VAR 0 2
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: LIST
45888: PUSH
45889: LD_VAR 0 1
45893: PUSH
45894: LD_VAR 0 2
45898: PUSH
45899: LD_INT 3
45901: PLUS
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: LIST
45910: PUSH
45911: LD_VAR 0 1
45915: PUSH
45916: LD_INT 4
45918: PLUS
45919: PUSH
45920: LD_VAR 0 2
45924: PUSH
45925: LD_INT 4
45927: PLUS
45928: PUSH
45929: LD_INT 5
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: LIST
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: ST_TO_ADDR
// end ; 2 :
45944: GO 46503
45946: LD_INT 2
45948: DOUBLE
45949: EQUAL
45950: IFTRUE 45954
45952: GO 46083
45954: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45955: LD_ADDR_VAR 0 5
45959: PUSH
45960: LD_VAR 0 1
45964: PUSH
45965: LD_VAR 0 2
45969: PUSH
45970: LD_INT 3
45972: MINUS
45973: PUSH
45974: LD_INT 3
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: PUSH
45982: LD_VAR 0 1
45986: PUSH
45987: LD_INT 4
45989: PLUS
45990: PUSH
45991: LD_VAR 0 2
45995: PUSH
45996: LD_INT 4
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: LIST
46003: PUSH
46004: LD_VAR 0 1
46008: PUSH
46009: LD_VAR 0 2
46013: PUSH
46014: LD_INT 4
46016: PLUS
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: LIST
46025: PUSH
46026: LD_VAR 0 1
46030: PUSH
46031: LD_INT 3
46033: MINUS
46034: PUSH
46035: LD_VAR 0 2
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: LIST
46047: PUSH
46048: LD_VAR 0 1
46052: PUSH
46053: LD_INT 4
46055: MINUS
46056: PUSH
46057: LD_VAR 0 2
46061: PUSH
46062: LD_INT 4
46064: MINUS
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: LIST
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: ST_TO_ADDR
// end ; 3 :
46081: GO 46503
46083: LD_INT 3
46085: DOUBLE
46086: EQUAL
46087: IFTRUE 46091
46089: GO 46224
46091: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46092: LD_ADDR_VAR 0 5
46096: PUSH
46097: LD_VAR 0 1
46101: PUSH
46102: LD_INT 3
46104: PLUS
46105: PUSH
46106: LD_VAR 0 2
46110: PUSH
46111: LD_INT 4
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: LIST
46118: PUSH
46119: LD_VAR 0 1
46123: PUSH
46124: LD_INT 4
46126: PLUS
46127: PUSH
46128: LD_VAR 0 2
46132: PUSH
46133: LD_INT 4
46135: PLUS
46136: PUSH
46137: LD_INT 5
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: PUSH
46145: LD_VAR 0 1
46149: PUSH
46150: LD_INT 4
46152: MINUS
46153: PUSH
46154: LD_VAR 0 2
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: PUSH
46167: LD_VAR 0 1
46171: PUSH
46172: LD_VAR 0 2
46176: PUSH
46177: LD_INT 4
46179: MINUS
46180: PUSH
46181: LD_INT 3
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: LIST
46188: PUSH
46189: LD_VAR 0 1
46193: PUSH
46194: LD_INT 3
46196: MINUS
46197: PUSH
46198: LD_VAR 0 2
46202: PUSH
46203: LD_INT 3
46205: MINUS
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: LIST
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: ST_TO_ADDR
// end ; 4 :
46222: GO 46503
46224: LD_INT 4
46226: DOUBLE
46227: EQUAL
46228: IFTRUE 46232
46230: GO 46365
46232: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46233: LD_ADDR_VAR 0 5
46237: PUSH
46238: LD_VAR 0 1
46242: PUSH
46243: LD_VAR 0 2
46247: PUSH
46248: LD_INT 4
46250: PLUS
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: LIST
46259: PUSH
46260: LD_VAR 0 1
46264: PUSH
46265: LD_INT 3
46267: PLUS
46268: PUSH
46269: LD_VAR 0 2
46273: PUSH
46274: LD_INT 3
46276: PLUS
46277: PUSH
46278: LD_INT 5
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: LIST
46285: PUSH
46286: LD_VAR 0 1
46290: PUSH
46291: LD_INT 4
46293: PLUS
46294: PUSH
46295: LD_VAR 0 2
46299: PUSH
46300: LD_INT 4
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: LIST
46307: PUSH
46308: LD_VAR 0 1
46312: PUSH
46313: LD_VAR 0 2
46317: PUSH
46318: LD_INT 3
46320: MINUS
46321: PUSH
46322: LD_INT 3
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: LIST
46329: PUSH
46330: LD_VAR 0 1
46334: PUSH
46335: LD_INT 4
46337: MINUS
46338: PUSH
46339: LD_VAR 0 2
46343: PUSH
46344: LD_INT 4
46346: MINUS
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: LIST
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: ST_TO_ADDR
// end ; 5 :
46363: GO 46503
46365: LD_INT 5
46367: DOUBLE
46368: EQUAL
46369: IFTRUE 46373
46371: GO 46502
46373: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46374: LD_ADDR_VAR 0 5
46378: PUSH
46379: LD_VAR 0 1
46383: PUSH
46384: LD_INT 4
46386: MINUS
46387: PUSH
46388: LD_VAR 0 2
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: LIST
46400: PUSH
46401: LD_VAR 0 1
46405: PUSH
46406: LD_VAR 0 2
46410: PUSH
46411: LD_INT 4
46413: MINUS
46414: PUSH
46415: LD_INT 3
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: LIST
46422: PUSH
46423: LD_VAR 0 1
46427: PUSH
46428: LD_INT 4
46430: PLUS
46431: PUSH
46432: LD_VAR 0 2
46436: PUSH
46437: LD_INT 4
46439: PLUS
46440: PUSH
46441: LD_INT 5
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: PUSH
46449: LD_VAR 0 1
46453: PUSH
46454: LD_INT 3
46456: PLUS
46457: PUSH
46458: LD_VAR 0 2
46462: PUSH
46463: LD_INT 4
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: LIST
46470: PUSH
46471: LD_VAR 0 1
46475: PUSH
46476: LD_VAR 0 2
46480: PUSH
46481: LD_INT 3
46483: PLUS
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: LIST
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: ST_TO_ADDR
// end ; end ;
46500: GO 46503
46502: POP
// result := list ;
46503: LD_ADDR_VAR 0 4
46507: PUSH
46508: LD_VAR 0 5
46512: ST_TO_ADDR
// end ;
46513: LD_VAR 0 4
46517: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46518: LD_INT 0
46520: PPUSH
46521: PPUSH
46522: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46523: LD_VAR 0 1
46527: NOT
46528: PUSH
46529: LD_VAR 0 2
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 3
46542: PUSH
46543: LD_INT 4
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: IN
46552: NOT
46553: OR
46554: IFFALSE 46558
// exit ;
46556: GO 46641
// tmp := [ ] ;
46558: LD_ADDR_VAR 0 5
46562: PUSH
46563: EMPTY
46564: ST_TO_ADDR
// for i in units do
46565: LD_ADDR_VAR 0 4
46569: PUSH
46570: LD_VAR 0 1
46574: PUSH
46575: FOR_IN
46576: IFFALSE 46610
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46578: LD_ADDR_VAR 0 5
46582: PUSH
46583: LD_VAR 0 5
46587: PPUSH
46588: LD_VAR 0 4
46592: PPUSH
46593: LD_VAR 0 2
46597: PPUSH
46598: CALL_OW 259
46602: PPUSH
46603: CALL 48001 0 2
46607: ST_TO_ADDR
46608: GO 46575
46610: POP
46611: POP
// if not tmp then
46612: LD_VAR 0 5
46616: NOT
46617: IFFALSE 46621
// exit ;
46619: GO 46641
// result := SortListByListDesc ( units , tmp ) ;
46621: LD_ADDR_VAR 0 3
46625: PUSH
46626: LD_VAR 0 1
46630: PPUSH
46631: LD_VAR 0 5
46635: PPUSH
46636: CALL_OW 77
46640: ST_TO_ADDR
// end ;
46641: LD_VAR 0 3
46645: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46646: LD_INT 0
46648: PPUSH
46649: PPUSH
46650: PPUSH
// result := false ;
46651: LD_ADDR_VAR 0 3
46655: PUSH
46656: LD_INT 0
46658: ST_TO_ADDR
// if not building then
46659: LD_VAR 0 2
46663: NOT
46664: IFFALSE 46668
// exit ;
46666: GO 46806
// x := GetX ( building ) ;
46668: LD_ADDR_VAR 0 4
46672: PUSH
46673: LD_VAR 0 2
46677: PPUSH
46678: CALL_OW 250
46682: ST_TO_ADDR
// y := GetY ( building ) ;
46683: LD_ADDR_VAR 0 5
46687: PUSH
46688: LD_VAR 0 2
46692: PPUSH
46693: CALL_OW 251
46697: ST_TO_ADDR
// if not x or not y then
46698: LD_VAR 0 4
46702: NOT
46703: PUSH
46704: LD_VAR 0 5
46708: NOT
46709: OR
46710: IFFALSE 46714
// exit ;
46712: GO 46806
// if GetTaskList ( unit ) then
46714: LD_VAR 0 1
46718: PPUSH
46719: CALL_OW 437
46723: IFFALSE 46806
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46725: LD_STRING e
46727: PUSH
46728: LD_VAR 0 1
46732: PPUSH
46733: CALL_OW 437
46737: PUSH
46738: LD_INT 1
46740: ARRAY
46741: PUSH
46742: LD_INT 1
46744: ARRAY
46745: EQUAL
46746: PUSH
46747: LD_VAR 0 4
46751: PUSH
46752: LD_VAR 0 1
46756: PPUSH
46757: CALL_OW 437
46761: PUSH
46762: LD_INT 1
46764: ARRAY
46765: PUSH
46766: LD_INT 2
46768: ARRAY
46769: EQUAL
46770: AND
46771: PUSH
46772: LD_VAR 0 5
46776: PUSH
46777: LD_VAR 0 1
46781: PPUSH
46782: CALL_OW 437
46786: PUSH
46787: LD_INT 1
46789: ARRAY
46790: PUSH
46791: LD_INT 3
46793: ARRAY
46794: EQUAL
46795: AND
46796: IFFALSE 46806
// result := true end ;
46798: LD_ADDR_VAR 0 3
46802: PUSH
46803: LD_INT 1
46805: ST_TO_ADDR
// end ;
46806: LD_VAR 0 3
46810: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46811: LD_INT 0
46813: PPUSH
// result := false ;
46814: LD_ADDR_VAR 0 4
46818: PUSH
46819: LD_INT 0
46821: ST_TO_ADDR
// if GetTaskList ( unit ) then
46822: LD_VAR 0 1
46826: PPUSH
46827: CALL_OW 437
46831: IFFALSE 46914
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46833: LD_STRING M
46835: PUSH
46836: LD_VAR 0 1
46840: PPUSH
46841: CALL_OW 437
46845: PUSH
46846: LD_INT 1
46848: ARRAY
46849: PUSH
46850: LD_INT 1
46852: ARRAY
46853: EQUAL
46854: PUSH
46855: LD_VAR 0 2
46859: PUSH
46860: LD_VAR 0 1
46864: PPUSH
46865: CALL_OW 437
46869: PUSH
46870: LD_INT 1
46872: ARRAY
46873: PUSH
46874: LD_INT 2
46876: ARRAY
46877: EQUAL
46878: AND
46879: PUSH
46880: LD_VAR 0 3
46884: PUSH
46885: LD_VAR 0 1
46889: PPUSH
46890: CALL_OW 437
46894: PUSH
46895: LD_INT 1
46897: ARRAY
46898: PUSH
46899: LD_INT 3
46901: ARRAY
46902: EQUAL
46903: AND
46904: IFFALSE 46914
// result := true ;
46906: LD_ADDR_VAR 0 4
46910: PUSH
46911: LD_INT 1
46913: ST_TO_ADDR
// end ; end ;
46914: LD_VAR 0 4
46918: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46919: LD_INT 0
46921: PPUSH
46922: PPUSH
46923: PPUSH
46924: PPUSH
// if not unit or not area then
46925: LD_VAR 0 1
46929: NOT
46930: PUSH
46931: LD_VAR 0 2
46935: NOT
46936: OR
46937: IFFALSE 46941
// exit ;
46939: GO 47104
// tmp := AreaToList ( area , i ) ;
46941: LD_ADDR_VAR 0 6
46945: PUSH
46946: LD_VAR 0 2
46950: PPUSH
46951: LD_VAR 0 5
46955: PPUSH
46956: CALL_OW 517
46960: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46961: LD_ADDR_VAR 0 5
46965: PUSH
46966: DOUBLE
46967: LD_INT 1
46969: DEC
46970: ST_TO_ADDR
46971: LD_VAR 0 6
46975: PUSH
46976: LD_INT 1
46978: ARRAY
46979: PUSH
46980: FOR_TO
46981: IFFALSE 47102
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46983: LD_ADDR_VAR 0 7
46987: PUSH
46988: LD_VAR 0 6
46992: PUSH
46993: LD_INT 1
46995: ARRAY
46996: PUSH
46997: LD_VAR 0 5
47001: ARRAY
47002: PUSH
47003: LD_VAR 0 6
47007: PUSH
47008: LD_INT 2
47010: ARRAY
47011: PUSH
47012: LD_VAR 0 5
47016: ARRAY
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
47022: LD_INT 92
47024: PUSH
47025: LD_VAR 0 7
47029: PUSH
47030: LD_INT 1
47032: ARRAY
47033: PUSH
47034: LD_VAR 0 7
47038: PUSH
47039: LD_INT 2
47041: ARRAY
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: PPUSH
47052: CALL_OW 69
47056: PUSH
47057: LD_INT 0
47059: EQUAL
47060: IFFALSE 47100
// begin PlaceUnitArea ( unit , area , mode ) ;
47062: LD_VAR 0 1
47066: PPUSH
47067: LD_VAR 0 2
47071: PPUSH
47072: LD_VAR 0 3
47076: PPUSH
47077: CALL_OW 49
// result := IsPlaced ( unit ) ;
47081: LD_ADDR_VAR 0 4
47085: PUSH
47086: LD_VAR 0 1
47090: PPUSH
47091: CALL_OW 305
47095: ST_TO_ADDR
// exit ;
47096: POP
47097: POP
47098: GO 47104
// end ; end ;
47100: GO 46980
47102: POP
47103: POP
// end ;
47104: LD_VAR 0 4
47108: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47109: LD_INT 0
47111: PPUSH
47112: PPUSH
47113: PPUSH
// if not side or side > 8 then
47114: LD_VAR 0 1
47118: NOT
47119: PUSH
47120: LD_VAR 0 1
47124: PUSH
47125: LD_INT 8
47127: GREATER
47128: OR
47129: IFFALSE 47133
// exit ;
47131: GO 47320
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47133: LD_ADDR_VAR 0 4
47137: PUSH
47138: LD_INT 22
47140: PUSH
47141: LD_VAR 0 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 21
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PPUSH
47164: CALL_OW 69
47168: ST_TO_ADDR
// if not tmp then
47169: LD_VAR 0 4
47173: NOT
47174: IFFALSE 47178
// exit ;
47176: GO 47320
// enable_addtolog := true ;
47178: LD_ADDR_OWVAR 81
47182: PUSH
47183: LD_INT 1
47185: ST_TO_ADDR
// AddToLog ( [ ) ;
47186: LD_STRING [
47188: PPUSH
47189: CALL_OW 561
// for i in tmp do
47193: LD_ADDR_VAR 0 3
47197: PUSH
47198: LD_VAR 0 4
47202: PUSH
47203: FOR_IN
47204: IFFALSE 47311
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47206: LD_STRING [
47208: PUSH
47209: LD_VAR 0 3
47213: PPUSH
47214: CALL_OW 266
47218: STR
47219: PUSH
47220: LD_STRING , 
47222: STR
47223: PUSH
47224: LD_VAR 0 3
47228: PPUSH
47229: CALL_OW 250
47233: STR
47234: PUSH
47235: LD_STRING , 
47237: STR
47238: PUSH
47239: LD_VAR 0 3
47243: PPUSH
47244: CALL_OW 251
47248: STR
47249: PUSH
47250: LD_STRING , 
47252: STR
47253: PUSH
47254: LD_VAR 0 3
47258: PPUSH
47259: CALL_OW 254
47263: STR
47264: PUSH
47265: LD_STRING , 
47267: STR
47268: PUSH
47269: LD_VAR 0 3
47273: PPUSH
47274: LD_INT 1
47276: PPUSH
47277: CALL_OW 268
47281: STR
47282: PUSH
47283: LD_STRING , 
47285: STR
47286: PUSH
47287: LD_VAR 0 3
47291: PPUSH
47292: LD_INT 2
47294: PPUSH
47295: CALL_OW 268
47299: STR
47300: PUSH
47301: LD_STRING ],
47303: STR
47304: PPUSH
47305: CALL_OW 561
// end ;
47309: GO 47203
47311: POP
47312: POP
// AddToLog ( ]; ) ;
47313: LD_STRING ];
47315: PPUSH
47316: CALL_OW 561
// end ;
47320: LD_VAR 0 2
47324: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47325: LD_INT 0
47327: PPUSH
47328: PPUSH
47329: PPUSH
47330: PPUSH
47331: PPUSH
// if not area or not rate or not max then
47332: LD_VAR 0 1
47336: NOT
47337: PUSH
47338: LD_VAR 0 2
47342: NOT
47343: OR
47344: PUSH
47345: LD_VAR 0 4
47349: NOT
47350: OR
47351: IFFALSE 47355
// exit ;
47353: GO 47544
// while 1 do
47355: LD_INT 1
47357: IFFALSE 47544
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47359: LD_ADDR_VAR 0 9
47363: PUSH
47364: LD_VAR 0 1
47368: PPUSH
47369: LD_INT 1
47371: PPUSH
47372: CALL_OW 287
47376: PUSH
47377: LD_INT 10
47379: MUL
47380: ST_TO_ADDR
// r := rate / 10 ;
47381: LD_ADDR_VAR 0 7
47385: PUSH
47386: LD_VAR 0 2
47390: PUSH
47391: LD_INT 10
47393: DIVREAL
47394: ST_TO_ADDR
// time := 1 1$00 ;
47395: LD_ADDR_VAR 0 8
47399: PUSH
47400: LD_INT 2100
47402: ST_TO_ADDR
// if amount < min then
47403: LD_VAR 0 9
47407: PUSH
47408: LD_VAR 0 3
47412: LESS
47413: IFFALSE 47431
// r := r * 2 else
47415: LD_ADDR_VAR 0 7
47419: PUSH
47420: LD_VAR 0 7
47424: PUSH
47425: LD_INT 2
47427: MUL
47428: ST_TO_ADDR
47429: GO 47457
// if amount > max then
47431: LD_VAR 0 9
47435: PUSH
47436: LD_VAR 0 4
47440: GREATER
47441: IFFALSE 47457
// r := r / 2 ;
47443: LD_ADDR_VAR 0 7
47447: PUSH
47448: LD_VAR 0 7
47452: PUSH
47453: LD_INT 2
47455: DIVREAL
47456: ST_TO_ADDR
// time := time / r ;
47457: LD_ADDR_VAR 0 8
47461: PUSH
47462: LD_VAR 0 8
47466: PUSH
47467: LD_VAR 0 7
47471: DIVREAL
47472: ST_TO_ADDR
// if time < 0 then
47473: LD_VAR 0 8
47477: PUSH
47478: LD_INT 0
47480: LESS
47481: IFFALSE 47498
// time := time * - 1 ;
47483: LD_ADDR_VAR 0 8
47487: PUSH
47488: LD_VAR 0 8
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: MUL
47497: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47498: LD_VAR 0 8
47502: PUSH
47503: LD_INT 35
47505: PPUSH
47506: LD_INT 875
47508: PPUSH
47509: CALL_OW 12
47513: PLUS
47514: PPUSH
47515: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47519: LD_INT 1
47521: PPUSH
47522: LD_INT 5
47524: PPUSH
47525: CALL_OW 12
47529: PPUSH
47530: LD_VAR 0 1
47534: PPUSH
47535: LD_INT 1
47537: PPUSH
47538: CALL_OW 55
// end ;
47542: GO 47355
// end ;
47544: LD_VAR 0 5
47548: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47549: LD_INT 0
47551: PPUSH
47552: PPUSH
47553: PPUSH
47554: PPUSH
47555: PPUSH
47556: PPUSH
47557: PPUSH
47558: PPUSH
// if not turrets or not factories then
47559: LD_VAR 0 1
47563: NOT
47564: PUSH
47565: LD_VAR 0 2
47569: NOT
47570: OR
47571: IFFALSE 47575
// exit ;
47573: GO 47882
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47575: LD_ADDR_VAR 0 10
47579: PUSH
47580: LD_INT 5
47582: PUSH
47583: LD_INT 6
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: LD_INT 4
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 3
47602: PUSH
47603: LD_INT 5
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 24
47617: PUSH
47618: LD_INT 25
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 23
47627: PUSH
47628: LD_INT 27
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 42
47641: PUSH
47642: LD_INT 43
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 44
47651: PUSH
47652: LD_INT 46
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 45
47661: PUSH
47662: LD_INT 47
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: LIST
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: ST_TO_ADDR
// result := [ ] ;
47679: LD_ADDR_VAR 0 3
47683: PUSH
47684: EMPTY
47685: ST_TO_ADDR
// for i in turrets do
47686: LD_ADDR_VAR 0 4
47690: PUSH
47691: LD_VAR 0 1
47695: PUSH
47696: FOR_IN
47697: IFFALSE 47880
// begin nat := GetNation ( i ) ;
47699: LD_ADDR_VAR 0 7
47703: PUSH
47704: LD_VAR 0 4
47708: PPUSH
47709: CALL_OW 248
47713: ST_TO_ADDR
// weapon := 0 ;
47714: LD_ADDR_VAR 0 8
47718: PUSH
47719: LD_INT 0
47721: ST_TO_ADDR
// if not nat then
47722: LD_VAR 0 7
47726: NOT
47727: IFFALSE 47731
// continue ;
47729: GO 47696
// for j in list [ nat ] do
47731: LD_ADDR_VAR 0 5
47735: PUSH
47736: LD_VAR 0 10
47740: PUSH
47741: LD_VAR 0 7
47745: ARRAY
47746: PUSH
47747: FOR_IN
47748: IFFALSE 47789
// if GetBWeapon ( i ) = j [ 1 ] then
47750: LD_VAR 0 4
47754: PPUSH
47755: CALL_OW 269
47759: PUSH
47760: LD_VAR 0 5
47764: PUSH
47765: LD_INT 1
47767: ARRAY
47768: EQUAL
47769: IFFALSE 47787
// begin weapon := j [ 2 ] ;
47771: LD_ADDR_VAR 0 8
47775: PUSH
47776: LD_VAR 0 5
47780: PUSH
47781: LD_INT 2
47783: ARRAY
47784: ST_TO_ADDR
// break ;
47785: GO 47789
// end ;
47787: GO 47747
47789: POP
47790: POP
// if not weapon then
47791: LD_VAR 0 8
47795: NOT
47796: IFFALSE 47800
// continue ;
47798: GO 47696
// for k in factories do
47800: LD_ADDR_VAR 0 6
47804: PUSH
47805: LD_VAR 0 2
47809: PUSH
47810: FOR_IN
47811: IFFALSE 47876
// begin weapons := AvailableWeaponList ( k ) ;
47813: LD_ADDR_VAR 0 9
47817: PUSH
47818: LD_VAR 0 6
47822: PPUSH
47823: CALL_OW 478
47827: ST_TO_ADDR
// if not weapons then
47828: LD_VAR 0 9
47832: NOT
47833: IFFALSE 47837
// continue ;
47835: GO 47810
// if weapon in weapons then
47837: LD_VAR 0 8
47841: PUSH
47842: LD_VAR 0 9
47846: IN
47847: IFFALSE 47874
// begin result := [ i , weapon ] ;
47849: LD_ADDR_VAR 0 3
47853: PUSH
47854: LD_VAR 0 4
47858: PUSH
47859: LD_VAR 0 8
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: ST_TO_ADDR
// exit ;
47868: POP
47869: POP
47870: POP
47871: POP
47872: GO 47882
// end ; end ;
47874: GO 47810
47876: POP
47877: POP
// end ;
47878: GO 47696
47880: POP
47881: POP
// end ;
47882: LD_VAR 0 3
47886: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47887: LD_INT 0
47889: PPUSH
// if not side or side > 8 then
47890: LD_VAR 0 3
47894: NOT
47895: PUSH
47896: LD_VAR 0 3
47900: PUSH
47901: LD_INT 8
47903: GREATER
47904: OR
47905: IFFALSE 47909
// exit ;
47907: GO 47968
// if not range then
47909: LD_VAR 0 4
47913: NOT
47914: IFFALSE 47925
// range := - 12 ;
47916: LD_ADDR_VAR 0 4
47920: PUSH
47921: LD_INT 12
47923: NEG
47924: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47925: LD_VAR 0 1
47929: PPUSH
47930: LD_VAR 0 2
47934: PPUSH
47935: LD_VAR 0 3
47939: PPUSH
47940: LD_VAR 0 4
47944: PPUSH
47945: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47949: LD_VAR 0 1
47953: PPUSH
47954: LD_VAR 0 2
47958: PPUSH
47959: LD_VAR 0 3
47963: PPUSH
47964: CALL_OW 331
// end ;
47968: LD_VAR 0 5
47972: RET
// export function Video ( mode ) ; begin
47973: LD_INT 0
47975: PPUSH
// ingame_video = mode ;
47976: LD_ADDR_OWVAR 52
47980: PUSH
47981: LD_VAR 0 1
47985: ST_TO_ADDR
// interface_hidden = mode ;
47986: LD_ADDR_OWVAR 54
47990: PUSH
47991: LD_VAR 0 1
47995: ST_TO_ADDR
// end ;
47996: LD_VAR 0 2
48000: RET
// export function Join ( array , element ) ; begin
48001: LD_INT 0
48003: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48004: LD_ADDR_VAR 0 3
48008: PUSH
48009: LD_VAR 0 1
48013: PPUSH
48014: LD_VAR 0 1
48018: PUSH
48019: LD_INT 1
48021: PLUS
48022: PPUSH
48023: LD_VAR 0 2
48027: PPUSH
48028: CALL_OW 1
48032: ST_TO_ADDR
// end ;
48033: LD_VAR 0 3
48037: RET
// export function JoinUnion ( array , element ) ; begin
48038: LD_INT 0
48040: PPUSH
// result := array union element ;
48041: LD_ADDR_VAR 0 3
48045: PUSH
48046: LD_VAR 0 1
48050: PUSH
48051: LD_VAR 0 2
48055: UNION
48056: ST_TO_ADDR
// end ;
48057: LD_VAR 0 3
48061: RET
// export function GetBehemoths ( side ) ; begin
48062: LD_INT 0
48064: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48065: LD_ADDR_VAR 0 2
48069: PUSH
48070: LD_INT 22
48072: PUSH
48073: LD_VAR 0 1
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 31
48084: PUSH
48085: LD_INT 25
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PPUSH
48096: CALL_OW 69
48100: ST_TO_ADDR
// end ;
48101: LD_VAR 0 2
48105: RET
// export function Shuffle ( array ) ; var i , index ; begin
48106: LD_INT 0
48108: PPUSH
48109: PPUSH
48110: PPUSH
// result := [ ] ;
48111: LD_ADDR_VAR 0 2
48115: PUSH
48116: EMPTY
48117: ST_TO_ADDR
// if not array then
48118: LD_VAR 0 1
48122: NOT
48123: IFFALSE 48127
// exit ;
48125: GO 48226
// Randomize ;
48127: CALL_OW 10
// for i = array downto 1 do
48131: LD_ADDR_VAR 0 3
48135: PUSH
48136: DOUBLE
48137: LD_VAR 0 1
48141: INC
48142: ST_TO_ADDR
48143: LD_INT 1
48145: PUSH
48146: FOR_DOWNTO
48147: IFFALSE 48224
// begin index := rand ( 1 , array ) ;
48149: LD_ADDR_VAR 0 4
48153: PUSH
48154: LD_INT 1
48156: PPUSH
48157: LD_VAR 0 1
48161: PPUSH
48162: CALL_OW 12
48166: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48167: LD_ADDR_VAR 0 2
48171: PUSH
48172: LD_VAR 0 2
48176: PPUSH
48177: LD_VAR 0 2
48181: PUSH
48182: LD_INT 1
48184: PLUS
48185: PPUSH
48186: LD_VAR 0 1
48190: PUSH
48191: LD_VAR 0 4
48195: ARRAY
48196: PPUSH
48197: CALL_OW 2
48201: ST_TO_ADDR
// array := Delete ( array , index ) ;
48202: LD_ADDR_VAR 0 1
48206: PUSH
48207: LD_VAR 0 1
48211: PPUSH
48212: LD_VAR 0 4
48216: PPUSH
48217: CALL_OW 3
48221: ST_TO_ADDR
// end ;
48222: GO 48146
48224: POP
48225: POP
// end ;
48226: LD_VAR 0 2
48230: RET
// export function GetBaseMaterials ( base ) ; begin
48231: LD_INT 0
48233: PPUSH
// result := [ 0 , 0 , 0 ] ;
48234: LD_ADDR_VAR 0 2
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: LIST
48252: ST_TO_ADDR
// if not base then
48253: LD_VAR 0 1
48257: NOT
48258: IFFALSE 48262
// exit ;
48260: GO 48311
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48262: LD_ADDR_VAR 0 2
48266: PUSH
48267: LD_VAR 0 1
48271: PPUSH
48272: LD_INT 1
48274: PPUSH
48275: CALL_OW 275
48279: PUSH
48280: LD_VAR 0 1
48284: PPUSH
48285: LD_INT 2
48287: PPUSH
48288: CALL_OW 275
48292: PUSH
48293: LD_VAR 0 1
48297: PPUSH
48298: LD_INT 3
48300: PPUSH
48301: CALL_OW 275
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: LIST
48310: ST_TO_ADDR
// end ;
48311: LD_VAR 0 2
48315: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48316: LD_INT 0
48318: PPUSH
48319: PPUSH
// result := array ;
48320: LD_ADDR_VAR 0 3
48324: PUSH
48325: LD_VAR 0 1
48329: ST_TO_ADDR
// if size >= result then
48330: LD_VAR 0 2
48334: PUSH
48335: LD_VAR 0 3
48339: GREATEREQUAL
48340: IFFALSE 48344
// exit ;
48342: GO 48394
// if size then
48344: LD_VAR 0 2
48348: IFFALSE 48394
// for i := array downto size do
48350: LD_ADDR_VAR 0 4
48354: PUSH
48355: DOUBLE
48356: LD_VAR 0 1
48360: INC
48361: ST_TO_ADDR
48362: LD_VAR 0 2
48366: PUSH
48367: FOR_DOWNTO
48368: IFFALSE 48392
// result := Delete ( result , result ) ;
48370: LD_ADDR_VAR 0 3
48374: PUSH
48375: LD_VAR 0 3
48379: PPUSH
48380: LD_VAR 0 3
48384: PPUSH
48385: CALL_OW 3
48389: ST_TO_ADDR
48390: GO 48367
48392: POP
48393: POP
// end ;
48394: LD_VAR 0 3
48398: RET
// export function ComExit ( unit ) ; var tmp ; begin
48399: LD_INT 0
48401: PPUSH
48402: PPUSH
// if not IsInUnit ( unit ) then
48403: LD_VAR 0 1
48407: PPUSH
48408: CALL_OW 310
48412: NOT
48413: IFFALSE 48417
// exit ;
48415: GO 48477
// tmp := IsInUnit ( unit ) ;
48417: LD_ADDR_VAR 0 3
48421: PUSH
48422: LD_VAR 0 1
48426: PPUSH
48427: CALL_OW 310
48431: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48432: LD_VAR 0 3
48436: PPUSH
48437: CALL_OW 247
48441: PUSH
48442: LD_INT 2
48444: EQUAL
48445: IFFALSE 48458
// ComExitVehicle ( unit ) else
48447: LD_VAR 0 1
48451: PPUSH
48452: CALL_OW 121
48456: GO 48467
// ComExitBuilding ( unit ) ;
48458: LD_VAR 0 1
48462: PPUSH
48463: CALL_OW 122
// result := tmp ;
48467: LD_ADDR_VAR 0 2
48471: PUSH
48472: LD_VAR 0 3
48476: ST_TO_ADDR
// end ;
48477: LD_VAR 0 2
48481: RET
// export function ComExitAll ( units ) ; var i ; begin
48482: LD_INT 0
48484: PPUSH
48485: PPUSH
// if not units then
48486: LD_VAR 0 1
48490: NOT
48491: IFFALSE 48495
// exit ;
48493: GO 48521
// for i in units do
48495: LD_ADDR_VAR 0 3
48499: PUSH
48500: LD_VAR 0 1
48504: PUSH
48505: FOR_IN
48506: IFFALSE 48519
// ComExit ( i ) ;
48508: LD_VAR 0 3
48512: PPUSH
48513: CALL 48399 0 1
48517: GO 48505
48519: POP
48520: POP
// end ;
48521: LD_VAR 0 2
48525: RET
// export function ResetHc ; begin
48526: LD_INT 0
48528: PPUSH
// InitHc ;
48529: CALL_OW 19
// hc_importance := 0 ;
48533: LD_ADDR_OWVAR 32
48537: PUSH
48538: LD_INT 0
48540: ST_TO_ADDR
// end ;
48541: LD_VAR 0 1
48545: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48546: LD_INT 0
48548: PPUSH
48549: PPUSH
48550: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48551: LD_ADDR_VAR 0 6
48555: PUSH
48556: LD_VAR 0 1
48560: PUSH
48561: LD_VAR 0 3
48565: PLUS
48566: PUSH
48567: LD_INT 2
48569: DIV
48570: ST_TO_ADDR
// if _x < 0 then
48571: LD_VAR 0 6
48575: PUSH
48576: LD_INT 0
48578: LESS
48579: IFFALSE 48596
// _x := _x * - 1 ;
48581: LD_ADDR_VAR 0 6
48585: PUSH
48586: LD_VAR 0 6
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: MUL
48595: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48596: LD_ADDR_VAR 0 7
48600: PUSH
48601: LD_VAR 0 2
48605: PUSH
48606: LD_VAR 0 4
48610: PLUS
48611: PUSH
48612: LD_INT 2
48614: DIV
48615: ST_TO_ADDR
// if _y < 0 then
48616: LD_VAR 0 7
48620: PUSH
48621: LD_INT 0
48623: LESS
48624: IFFALSE 48641
// _y := _y * - 1 ;
48626: LD_ADDR_VAR 0 7
48630: PUSH
48631: LD_VAR 0 7
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: MUL
48640: ST_TO_ADDR
// result := [ _x , _y ] ;
48641: LD_ADDR_VAR 0 5
48645: PUSH
48646: LD_VAR 0 6
48650: PUSH
48651: LD_VAR 0 7
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: ST_TO_ADDR
// end ;
48660: LD_VAR 0 5
48664: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48665: LD_INT 0
48667: PPUSH
48668: PPUSH
48669: PPUSH
48670: PPUSH
// task := GetTaskList ( unit ) ;
48671: LD_ADDR_VAR 0 7
48675: PUSH
48676: LD_VAR 0 1
48680: PPUSH
48681: CALL_OW 437
48685: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48686: LD_VAR 0 7
48690: NOT
48691: PUSH
48692: LD_VAR 0 1
48696: PPUSH
48697: LD_VAR 0 2
48701: PPUSH
48702: CALL_OW 308
48706: NOT
48707: AND
48708: IFFALSE 48712
// exit ;
48710: GO 48830
// if IsInArea ( unit , area ) then
48712: LD_VAR 0 1
48716: PPUSH
48717: LD_VAR 0 2
48721: PPUSH
48722: CALL_OW 308
48726: IFFALSE 48744
// begin ComMoveToArea ( unit , goAway ) ;
48728: LD_VAR 0 1
48732: PPUSH
48733: LD_VAR 0 3
48737: PPUSH
48738: CALL_OW 113
// exit ;
48742: GO 48830
// end ; if task [ 1 ] [ 1 ] <> M then
48744: LD_VAR 0 7
48748: PUSH
48749: LD_INT 1
48751: ARRAY
48752: PUSH
48753: LD_INT 1
48755: ARRAY
48756: PUSH
48757: LD_STRING M
48759: NONEQUAL
48760: IFFALSE 48764
// exit ;
48762: GO 48830
// x := task [ 1 ] [ 2 ] ;
48764: LD_ADDR_VAR 0 5
48768: PUSH
48769: LD_VAR 0 7
48773: PUSH
48774: LD_INT 1
48776: ARRAY
48777: PUSH
48778: LD_INT 2
48780: ARRAY
48781: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48782: LD_ADDR_VAR 0 6
48786: PUSH
48787: LD_VAR 0 7
48791: PUSH
48792: LD_INT 1
48794: ARRAY
48795: PUSH
48796: LD_INT 3
48798: ARRAY
48799: ST_TO_ADDR
// if InArea ( x , y , area ) then
48800: LD_VAR 0 5
48804: PPUSH
48805: LD_VAR 0 6
48809: PPUSH
48810: LD_VAR 0 2
48814: PPUSH
48815: CALL_OW 309
48819: IFFALSE 48830
// ComStop ( unit ) ;
48821: LD_VAR 0 1
48825: PPUSH
48826: CALL_OW 141
// end ;
48830: LD_VAR 0 4
48834: RET
// export function Abs ( value ) ; begin
48835: LD_INT 0
48837: PPUSH
// result := value ;
48838: LD_ADDR_VAR 0 2
48842: PUSH
48843: LD_VAR 0 1
48847: ST_TO_ADDR
// if value < 0 then
48848: LD_VAR 0 1
48852: PUSH
48853: LD_INT 0
48855: LESS
48856: IFFALSE 48873
// result := value * - 1 ;
48858: LD_ADDR_VAR 0 2
48862: PUSH
48863: LD_VAR 0 1
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: MUL
48872: ST_TO_ADDR
// end ;
48873: LD_VAR 0 2
48877: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48878: LD_INT 0
48880: PPUSH
48881: PPUSH
48882: PPUSH
48883: PPUSH
48884: PPUSH
48885: PPUSH
48886: PPUSH
48887: PPUSH
// if not unit or not building then
48888: LD_VAR 0 1
48892: NOT
48893: PUSH
48894: LD_VAR 0 2
48898: NOT
48899: OR
48900: IFFALSE 48904
// exit ;
48902: GO 49130
// x := GetX ( building ) ;
48904: LD_ADDR_VAR 0 4
48908: PUSH
48909: LD_VAR 0 2
48913: PPUSH
48914: CALL_OW 250
48918: ST_TO_ADDR
// y := GetY ( building ) ;
48919: LD_ADDR_VAR 0 6
48923: PUSH
48924: LD_VAR 0 2
48928: PPUSH
48929: CALL_OW 251
48933: ST_TO_ADDR
// d := GetDir ( building ) ;
48934: LD_ADDR_VAR 0 8
48938: PUSH
48939: LD_VAR 0 2
48943: PPUSH
48944: CALL_OW 254
48948: ST_TO_ADDR
// r := 4 ;
48949: LD_ADDR_VAR 0 9
48953: PUSH
48954: LD_INT 4
48956: ST_TO_ADDR
// for i := 1 to 5 do
48957: LD_ADDR_VAR 0 10
48961: PUSH
48962: DOUBLE
48963: LD_INT 1
48965: DEC
48966: ST_TO_ADDR
48967: LD_INT 5
48969: PUSH
48970: FOR_TO
48971: IFFALSE 49128
// begin _x := ShiftX ( x , d , r + i ) ;
48973: LD_ADDR_VAR 0 5
48977: PUSH
48978: LD_VAR 0 4
48982: PPUSH
48983: LD_VAR 0 8
48987: PPUSH
48988: LD_VAR 0 9
48992: PUSH
48993: LD_VAR 0 10
48997: PLUS
48998: PPUSH
48999: CALL_OW 272
49003: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49004: LD_ADDR_VAR 0 7
49008: PUSH
49009: LD_VAR 0 6
49013: PPUSH
49014: LD_VAR 0 8
49018: PPUSH
49019: LD_VAR 0 9
49023: PUSH
49024: LD_VAR 0 10
49028: PLUS
49029: PPUSH
49030: CALL_OW 273
49034: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49035: LD_VAR 0 5
49039: PPUSH
49040: LD_VAR 0 7
49044: PPUSH
49045: CALL_OW 488
49049: PUSH
49050: LD_VAR 0 5
49054: PPUSH
49055: LD_VAR 0 7
49059: PPUSH
49060: CALL_OW 428
49064: PPUSH
49065: CALL_OW 247
49069: PUSH
49070: LD_INT 3
49072: PUSH
49073: LD_INT 2
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: IN
49080: NOT
49081: AND
49082: IFFALSE 49126
// begin ComMoveXY ( unit , _x , _y ) ;
49084: LD_VAR 0 1
49088: PPUSH
49089: LD_VAR 0 5
49093: PPUSH
49094: LD_VAR 0 7
49098: PPUSH
49099: CALL_OW 111
// result := [ _x , _y ] ;
49103: LD_ADDR_VAR 0 3
49107: PUSH
49108: LD_VAR 0 5
49112: PUSH
49113: LD_VAR 0 7
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: ST_TO_ADDR
// exit ;
49122: POP
49123: POP
49124: GO 49130
// end ; end ;
49126: GO 48970
49128: POP
49129: POP
// end ;
49130: LD_VAR 0 3
49134: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49135: LD_INT 0
49137: PPUSH
49138: PPUSH
49139: PPUSH
// result := 0 ;
49140: LD_ADDR_VAR 0 3
49144: PUSH
49145: LD_INT 0
49147: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49148: LD_VAR 0 1
49152: PUSH
49153: LD_INT 0
49155: LESS
49156: PUSH
49157: LD_VAR 0 1
49161: PUSH
49162: LD_INT 8
49164: GREATER
49165: OR
49166: PUSH
49167: LD_VAR 0 2
49171: PUSH
49172: LD_INT 0
49174: LESS
49175: OR
49176: PUSH
49177: LD_VAR 0 2
49181: PUSH
49182: LD_INT 8
49184: GREATER
49185: OR
49186: IFFALSE 49190
// exit ;
49188: GO 49265
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49190: LD_ADDR_VAR 0 4
49194: PUSH
49195: LD_INT 22
49197: PUSH
49198: LD_VAR 0 2
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PPUSH
49207: CALL_OW 69
49211: PUSH
49212: FOR_IN
49213: IFFALSE 49263
// begin un := UnitShoot ( i ) ;
49215: LD_ADDR_VAR 0 5
49219: PUSH
49220: LD_VAR 0 4
49224: PPUSH
49225: CALL_OW 504
49229: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49230: LD_VAR 0 5
49234: PPUSH
49235: CALL_OW 255
49239: PUSH
49240: LD_VAR 0 1
49244: EQUAL
49245: IFFALSE 49261
// begin result := un ;
49247: LD_ADDR_VAR 0 3
49251: PUSH
49252: LD_VAR 0 5
49256: ST_TO_ADDR
// exit ;
49257: POP
49258: POP
49259: GO 49265
// end ; end ;
49261: GO 49212
49263: POP
49264: POP
// end ;
49265: LD_VAR 0 3
49269: RET
// export function GetCargoBay ( units ) ; begin
49270: LD_INT 0
49272: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49273: LD_ADDR_VAR 0 2
49277: PUSH
49278: LD_VAR 0 1
49282: PPUSH
49283: LD_INT 2
49285: PUSH
49286: LD_INT 34
49288: PUSH
49289: LD_INT 12
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 34
49298: PUSH
49299: LD_INT 51
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 34
49308: PUSH
49309: LD_INT 32
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 34
49318: PUSH
49319: LD_INT 89
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: PPUSH
49333: CALL_OW 72
49337: ST_TO_ADDR
// end ;
49338: LD_VAR 0 2
49342: RET
// export function Negate ( value ) ; begin
49343: LD_INT 0
49345: PPUSH
// result := not value ;
49346: LD_ADDR_VAR 0 2
49350: PUSH
49351: LD_VAR 0 1
49355: NOT
49356: ST_TO_ADDR
// end ;
49357: LD_VAR 0 2
49361: RET
// export function Inc ( value ) ; begin
49362: LD_INT 0
49364: PPUSH
// result := value + 1 ;
49365: LD_ADDR_VAR 0 2
49369: PUSH
49370: LD_VAR 0 1
49374: PUSH
49375: LD_INT 1
49377: PLUS
49378: ST_TO_ADDR
// end ;
49379: LD_VAR 0 2
49383: RET
// export function Dec ( value ) ; begin
49384: LD_INT 0
49386: PPUSH
// result := value - 1 ;
49387: LD_ADDR_VAR 0 2
49391: PUSH
49392: LD_VAR 0 1
49396: PUSH
49397: LD_INT 1
49399: MINUS
49400: ST_TO_ADDR
// end ;
49401: LD_VAR 0 2
49405: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49406: LD_INT 0
49408: PPUSH
49409: PPUSH
49410: PPUSH
49411: PPUSH
49412: PPUSH
49413: PPUSH
49414: PPUSH
49415: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49416: LD_VAR 0 1
49420: PPUSH
49421: LD_VAR 0 2
49425: PPUSH
49426: CALL_OW 488
49430: NOT
49431: PUSH
49432: LD_VAR 0 3
49436: PPUSH
49437: LD_VAR 0 4
49441: PPUSH
49442: CALL_OW 488
49446: NOT
49447: OR
49448: IFFALSE 49461
// begin result := - 1 ;
49450: LD_ADDR_VAR 0 5
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: ST_TO_ADDR
// exit ;
49459: GO 49696
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49461: LD_ADDR_VAR 0 12
49465: PUSH
49466: LD_VAR 0 1
49470: PPUSH
49471: LD_VAR 0 2
49475: PPUSH
49476: LD_VAR 0 3
49480: PPUSH
49481: LD_VAR 0 4
49485: PPUSH
49486: CALL 48546 0 4
49490: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49491: LD_ADDR_VAR 0 11
49495: PUSH
49496: LD_VAR 0 1
49500: PPUSH
49501: LD_VAR 0 2
49505: PPUSH
49506: LD_VAR 0 12
49510: PUSH
49511: LD_INT 1
49513: ARRAY
49514: PPUSH
49515: LD_VAR 0 12
49519: PUSH
49520: LD_INT 2
49522: ARRAY
49523: PPUSH
49524: CALL_OW 298
49528: ST_TO_ADDR
// distance := 9999 ;
49529: LD_ADDR_VAR 0 10
49533: PUSH
49534: LD_INT 9999
49536: ST_TO_ADDR
// for i := 0 to 5 do
49537: LD_ADDR_VAR 0 6
49541: PUSH
49542: DOUBLE
49543: LD_INT 0
49545: DEC
49546: ST_TO_ADDR
49547: LD_INT 5
49549: PUSH
49550: FOR_TO
49551: IFFALSE 49694
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49553: LD_ADDR_VAR 0 7
49557: PUSH
49558: LD_VAR 0 1
49562: PPUSH
49563: LD_VAR 0 6
49567: PPUSH
49568: LD_VAR 0 11
49572: PPUSH
49573: CALL_OW 272
49577: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49578: LD_ADDR_VAR 0 8
49582: PUSH
49583: LD_VAR 0 2
49587: PPUSH
49588: LD_VAR 0 6
49592: PPUSH
49593: LD_VAR 0 11
49597: PPUSH
49598: CALL_OW 273
49602: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49603: LD_VAR 0 7
49607: PPUSH
49608: LD_VAR 0 8
49612: PPUSH
49613: CALL_OW 488
49617: NOT
49618: IFFALSE 49622
// continue ;
49620: GO 49550
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49622: LD_ADDR_VAR 0 9
49626: PUSH
49627: LD_VAR 0 12
49631: PUSH
49632: LD_INT 1
49634: ARRAY
49635: PPUSH
49636: LD_VAR 0 12
49640: PUSH
49641: LD_INT 2
49643: ARRAY
49644: PPUSH
49645: LD_VAR 0 7
49649: PPUSH
49650: LD_VAR 0 8
49654: PPUSH
49655: CALL_OW 298
49659: ST_TO_ADDR
// if tmp < distance then
49660: LD_VAR 0 9
49664: PUSH
49665: LD_VAR 0 10
49669: LESS
49670: IFFALSE 49692
// begin result := i ;
49672: LD_ADDR_VAR 0 5
49676: PUSH
49677: LD_VAR 0 6
49681: ST_TO_ADDR
// distance := tmp ;
49682: LD_ADDR_VAR 0 10
49686: PUSH
49687: LD_VAR 0 9
49691: ST_TO_ADDR
// end ; end ;
49692: GO 49550
49694: POP
49695: POP
// end ;
49696: LD_VAR 0 5
49700: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49701: LD_INT 0
49703: PPUSH
49704: PPUSH
// if not driver or not IsInUnit ( driver ) then
49705: LD_VAR 0 1
49709: NOT
49710: PUSH
49711: LD_VAR 0 1
49715: PPUSH
49716: CALL_OW 310
49720: NOT
49721: OR
49722: IFFALSE 49726
// exit ;
49724: GO 49816
// vehicle := IsInUnit ( driver ) ;
49726: LD_ADDR_VAR 0 3
49730: PUSH
49731: LD_VAR 0 1
49735: PPUSH
49736: CALL_OW 310
49740: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49741: LD_VAR 0 1
49745: PPUSH
49746: LD_STRING \
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: PUSH
49776: LD_STRING E
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_VAR 0 3
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PPUSH
49812: CALL_OW 446
// end ;
49816: LD_VAR 0 2
49820: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49821: LD_INT 0
49823: PPUSH
49824: PPUSH
// if not driver or not IsInUnit ( driver ) then
49825: LD_VAR 0 1
49829: NOT
49830: PUSH
49831: LD_VAR 0 1
49835: PPUSH
49836: CALL_OW 310
49840: NOT
49841: OR
49842: IFFALSE 49846
// exit ;
49844: GO 49936
// vehicle := IsInUnit ( driver ) ;
49846: LD_ADDR_VAR 0 3
49850: PUSH
49851: LD_VAR 0 1
49855: PPUSH
49856: CALL_OW 310
49860: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49861: LD_VAR 0 1
49865: PPUSH
49866: LD_STRING \
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: PUSH
49896: LD_STRING E
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_VAR 0 3
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PPUSH
49932: CALL_OW 447
// end ;
49936: LD_VAR 0 2
49940: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49941: LD_INT 0
49943: PPUSH
49944: PPUSH
49945: PPUSH
// tmp := [ ] ;
49946: LD_ADDR_VAR 0 5
49950: PUSH
49951: EMPTY
49952: ST_TO_ADDR
// for i in units do
49953: LD_ADDR_VAR 0 4
49957: PUSH
49958: LD_VAR 0 1
49962: PUSH
49963: FOR_IN
49964: IFFALSE 50002
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49966: LD_ADDR_VAR 0 5
49970: PUSH
49971: LD_VAR 0 5
49975: PPUSH
49976: LD_VAR 0 5
49980: PUSH
49981: LD_INT 1
49983: PLUS
49984: PPUSH
49985: LD_VAR 0 4
49989: PPUSH
49990: CALL_OW 256
49994: PPUSH
49995: CALL_OW 2
49999: ST_TO_ADDR
50000: GO 49963
50002: POP
50003: POP
// if not tmp then
50004: LD_VAR 0 5
50008: NOT
50009: IFFALSE 50013
// exit ;
50011: GO 50061
// if asc then
50013: LD_VAR 0 2
50017: IFFALSE 50041
// result := SortListByListAsc ( units , tmp ) else
50019: LD_ADDR_VAR 0 3
50023: PUSH
50024: LD_VAR 0 1
50028: PPUSH
50029: LD_VAR 0 5
50033: PPUSH
50034: CALL_OW 76
50038: ST_TO_ADDR
50039: GO 50061
// result := SortListByListDesc ( units , tmp ) ;
50041: LD_ADDR_VAR 0 3
50045: PUSH
50046: LD_VAR 0 1
50050: PPUSH
50051: LD_VAR 0 5
50055: PPUSH
50056: CALL_OW 77
50060: ST_TO_ADDR
// end ;
50061: LD_VAR 0 3
50065: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50066: LD_INT 0
50068: PPUSH
50069: PPUSH
// task := GetTaskList ( mech ) ;
50070: LD_ADDR_VAR 0 4
50074: PUSH
50075: LD_VAR 0 1
50079: PPUSH
50080: CALL_OW 437
50084: ST_TO_ADDR
// if not task then
50085: LD_VAR 0 4
50089: NOT
50090: IFFALSE 50094
// exit ;
50092: GO 50136
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50094: LD_ADDR_VAR 0 3
50098: PUSH
50099: LD_VAR 0 4
50103: PUSH
50104: LD_INT 1
50106: ARRAY
50107: PUSH
50108: LD_INT 1
50110: ARRAY
50111: PUSH
50112: LD_STRING r
50114: EQUAL
50115: PUSH
50116: LD_VAR 0 4
50120: PUSH
50121: LD_INT 1
50123: ARRAY
50124: PUSH
50125: LD_INT 4
50127: ARRAY
50128: PUSH
50129: LD_VAR 0 2
50133: EQUAL
50134: AND
50135: ST_TO_ADDR
// end ;
50136: LD_VAR 0 3
50140: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50141: LD_INT 0
50143: PPUSH
// SetDir ( unit , d ) ;
50144: LD_VAR 0 1
50148: PPUSH
50149: LD_VAR 0 4
50153: PPUSH
50154: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
50158: LD_VAR 0 1
50162: PPUSH
50163: LD_VAR 0 2
50167: PPUSH
50168: LD_VAR 0 3
50172: PPUSH
50173: LD_VAR 0 5
50177: PPUSH
50178: CALL_OW 48
// end ;
50182: LD_VAR 0 6
50186: RET
// export function ToNaturalNumber ( number ) ; begin
50187: LD_INT 0
50189: PPUSH
// result := number div 1 ;
50190: LD_ADDR_VAR 0 2
50194: PUSH
50195: LD_VAR 0 1
50199: PUSH
50200: LD_INT 1
50202: DIV
50203: ST_TO_ADDR
// if number < 0 then
50204: LD_VAR 0 1
50208: PUSH
50209: LD_INT 0
50211: LESS
50212: IFFALSE 50222
// result := 0 ;
50214: LD_ADDR_VAR 0 2
50218: PUSH
50219: LD_INT 0
50221: ST_TO_ADDR
// end ;
50222: LD_VAR 0 2
50226: RET
// export function SortByClass ( units , class ) ; var un ; begin
50227: LD_INT 0
50229: PPUSH
50230: PPUSH
// if not units or not class then
50231: LD_VAR 0 1
50235: NOT
50236: PUSH
50237: LD_VAR 0 2
50241: NOT
50242: OR
50243: IFFALSE 50247
// exit ;
50245: GO 50342
// result := [ ] ;
50247: LD_ADDR_VAR 0 3
50251: PUSH
50252: EMPTY
50253: ST_TO_ADDR
// for un in units do
50254: LD_ADDR_VAR 0 4
50258: PUSH
50259: LD_VAR 0 1
50263: PUSH
50264: FOR_IN
50265: IFFALSE 50340
// if GetClass ( un ) = class then
50267: LD_VAR 0 4
50271: PPUSH
50272: CALL_OW 257
50276: PUSH
50277: LD_VAR 0 2
50281: EQUAL
50282: IFFALSE 50309
// result := Insert ( result , 1 , un ) else
50284: LD_ADDR_VAR 0 3
50288: PUSH
50289: LD_VAR 0 3
50293: PPUSH
50294: LD_INT 1
50296: PPUSH
50297: LD_VAR 0 4
50301: PPUSH
50302: CALL_OW 2
50306: ST_TO_ADDR
50307: GO 50338
// result := Replace ( result , result + 1 , un ) ;
50309: LD_ADDR_VAR 0 3
50313: PUSH
50314: LD_VAR 0 3
50318: PPUSH
50319: LD_VAR 0 3
50323: PUSH
50324: LD_INT 1
50326: PLUS
50327: PPUSH
50328: LD_VAR 0 4
50332: PPUSH
50333: CALL_OW 1
50337: ST_TO_ADDR
50338: GO 50264
50340: POP
50341: POP
// end ;
50342: LD_VAR 0 3
50346: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50347: LD_INT 0
50349: PPUSH
50350: PPUSH
50351: PPUSH
50352: PPUSH
50353: PPUSH
50354: PPUSH
50355: PPUSH
// result := [ ] ;
50356: LD_ADDR_VAR 0 4
50360: PUSH
50361: EMPTY
50362: ST_TO_ADDR
// if x - r < 0 then
50363: LD_VAR 0 1
50367: PUSH
50368: LD_VAR 0 3
50372: MINUS
50373: PUSH
50374: LD_INT 0
50376: LESS
50377: IFFALSE 50389
// min_x := 0 else
50379: LD_ADDR_VAR 0 8
50383: PUSH
50384: LD_INT 0
50386: ST_TO_ADDR
50387: GO 50405
// min_x := x - r ;
50389: LD_ADDR_VAR 0 8
50393: PUSH
50394: LD_VAR 0 1
50398: PUSH
50399: LD_VAR 0 3
50403: MINUS
50404: ST_TO_ADDR
// if y - r < 0 then
50405: LD_VAR 0 2
50409: PUSH
50410: LD_VAR 0 3
50414: MINUS
50415: PUSH
50416: LD_INT 0
50418: LESS
50419: IFFALSE 50431
// min_y := 0 else
50421: LD_ADDR_VAR 0 7
50425: PUSH
50426: LD_INT 0
50428: ST_TO_ADDR
50429: GO 50447
// min_y := y - r ;
50431: LD_ADDR_VAR 0 7
50435: PUSH
50436: LD_VAR 0 2
50440: PUSH
50441: LD_VAR 0 3
50445: MINUS
50446: ST_TO_ADDR
// max_x := x + r ;
50447: LD_ADDR_VAR 0 9
50451: PUSH
50452: LD_VAR 0 1
50456: PUSH
50457: LD_VAR 0 3
50461: PLUS
50462: ST_TO_ADDR
// max_y := y + r ;
50463: LD_ADDR_VAR 0 10
50467: PUSH
50468: LD_VAR 0 2
50472: PUSH
50473: LD_VAR 0 3
50477: PLUS
50478: ST_TO_ADDR
// for _x = min_x to max_x do
50479: LD_ADDR_VAR 0 5
50483: PUSH
50484: DOUBLE
50485: LD_VAR 0 8
50489: DEC
50490: ST_TO_ADDR
50491: LD_VAR 0 9
50495: PUSH
50496: FOR_TO
50497: IFFALSE 50598
// for _y = min_y to max_y do
50499: LD_ADDR_VAR 0 6
50503: PUSH
50504: DOUBLE
50505: LD_VAR 0 7
50509: DEC
50510: ST_TO_ADDR
50511: LD_VAR 0 10
50515: PUSH
50516: FOR_TO
50517: IFFALSE 50594
// begin if not ValidHex ( _x , _y ) then
50519: LD_VAR 0 5
50523: PPUSH
50524: LD_VAR 0 6
50528: PPUSH
50529: CALL_OW 488
50533: NOT
50534: IFFALSE 50538
// continue ;
50536: GO 50516
// if GetResourceTypeXY ( _x , _y ) then
50538: LD_VAR 0 5
50542: PPUSH
50543: LD_VAR 0 6
50547: PPUSH
50548: CALL_OW 283
50552: IFFALSE 50592
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50554: LD_ADDR_VAR 0 4
50558: PUSH
50559: LD_VAR 0 4
50563: PPUSH
50564: LD_VAR 0 4
50568: PUSH
50569: LD_INT 1
50571: PLUS
50572: PPUSH
50573: LD_VAR 0 5
50577: PUSH
50578: LD_VAR 0 6
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PPUSH
50587: CALL_OW 1
50591: ST_TO_ADDR
// end ;
50592: GO 50516
50594: POP
50595: POP
50596: GO 50496
50598: POP
50599: POP
// end ;
50600: LD_VAR 0 4
50604: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50605: LD_INT 0
50607: PPUSH
50608: PPUSH
50609: PPUSH
50610: PPUSH
50611: PPUSH
50612: PPUSH
50613: PPUSH
50614: PPUSH
// if not units then
50615: LD_VAR 0 1
50619: NOT
50620: IFFALSE 50624
// exit ;
50622: GO 51148
// result := UnitFilter ( units , [ f_ok ] ) ;
50624: LD_ADDR_VAR 0 3
50628: PUSH
50629: LD_VAR 0 1
50633: PPUSH
50634: LD_INT 50
50636: PUSH
50637: EMPTY
50638: LIST
50639: PPUSH
50640: CALL_OW 72
50644: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50645: LD_ADDR_VAR 0 8
50649: PUSH
50650: LD_VAR 0 1
50654: PUSH
50655: LD_INT 1
50657: ARRAY
50658: PPUSH
50659: CALL_OW 255
50663: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50664: LD_ADDR_VAR 0 10
50668: PUSH
50669: LD_INT 29
50671: PUSH
50672: LD_INT 91
50674: PUSH
50675: LD_INT 49
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// if not result then
50683: LD_VAR 0 3
50687: NOT
50688: IFFALSE 50692
// exit ;
50690: GO 51148
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50692: LD_ADDR_VAR 0 5
50696: PUSH
50697: LD_INT 81
50699: PUSH
50700: LD_VAR 0 8
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PPUSH
50709: CALL_OW 69
50713: ST_TO_ADDR
// for i in result do
50714: LD_ADDR_VAR 0 4
50718: PUSH
50719: LD_VAR 0 3
50723: PUSH
50724: FOR_IN
50725: IFFALSE 51146
// begin tag := GetTag ( i ) + 1 ;
50727: LD_ADDR_VAR 0 9
50731: PUSH
50732: LD_VAR 0 4
50736: PPUSH
50737: CALL_OW 110
50741: PUSH
50742: LD_INT 1
50744: PLUS
50745: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
50746: LD_ADDR_VAR 0 7
50750: PUSH
50751: LD_VAR 0 4
50755: PPUSH
50756: CALL_OW 250
50760: PPUSH
50761: LD_VAR 0 4
50765: PPUSH
50766: CALL_OW 251
50770: PPUSH
50771: LD_INT 6
50773: PPUSH
50774: CALL 50347 0 3
50778: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
50779: LD_VAR 0 4
50783: PPUSH
50784: CALL_OW 247
50788: PUSH
50789: LD_INT 2
50791: EQUAL
50792: PUSH
50793: LD_VAR 0 7
50797: AND
50798: PUSH
50799: LD_VAR 0 4
50803: PPUSH
50804: CALL_OW 264
50808: PUSH
50809: LD_VAR 0 10
50813: IN
50814: NOT
50815: AND
50816: IFFALSE 50855
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50818: LD_VAR 0 4
50822: PPUSH
50823: LD_VAR 0 7
50827: PUSH
50828: LD_INT 1
50830: ARRAY
50831: PUSH
50832: LD_INT 1
50834: ARRAY
50835: PPUSH
50836: LD_VAR 0 7
50840: PUSH
50841: LD_INT 1
50843: ARRAY
50844: PUSH
50845: LD_INT 2
50847: ARRAY
50848: PPUSH
50849: CALL_OW 116
50853: GO 51144
// if path > tag then
50855: LD_VAR 0 2
50859: PUSH
50860: LD_VAR 0 9
50864: GREATER
50865: IFFALSE 51073
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
50867: LD_ADDR_VAR 0 6
50871: PUSH
50872: LD_VAR 0 5
50876: PPUSH
50877: LD_INT 91
50879: PUSH
50880: LD_VAR 0 4
50884: PUSH
50885: LD_INT 8
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: LIST
50892: PPUSH
50893: CALL_OW 72
50897: ST_TO_ADDR
// if nearEnemy then
50898: LD_VAR 0 6
50902: IFFALSE 50971
// begin if GetWeapon ( i ) = ru_time_lapser then
50904: LD_VAR 0 4
50908: PPUSH
50909: CALL_OW 264
50913: PUSH
50914: LD_INT 49
50916: EQUAL
50917: IFFALSE 50945
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50919: LD_VAR 0 4
50923: PPUSH
50924: LD_VAR 0 6
50928: PPUSH
50929: LD_VAR 0 4
50933: PPUSH
50934: CALL_OW 74
50938: PPUSH
50939: CALL_OW 112
50943: GO 50969
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50945: LD_VAR 0 4
50949: PPUSH
50950: LD_VAR 0 6
50954: PPUSH
50955: LD_VAR 0 4
50959: PPUSH
50960: CALL_OW 74
50964: PPUSH
50965: CALL_OW 115
// end else
50969: GO 51071
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50971: LD_VAR 0 4
50975: PPUSH
50976: LD_VAR 0 2
50980: PUSH
50981: LD_VAR 0 9
50985: ARRAY
50986: PUSH
50987: LD_INT 1
50989: ARRAY
50990: PPUSH
50991: LD_VAR 0 2
50995: PUSH
50996: LD_VAR 0 9
51000: ARRAY
51001: PUSH
51002: LD_INT 2
51004: ARRAY
51005: PPUSH
51006: CALL_OW 297
51010: PUSH
51011: LD_INT 6
51013: GREATER
51014: IFFALSE 51057
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51016: LD_VAR 0 4
51020: PPUSH
51021: LD_VAR 0 2
51025: PUSH
51026: LD_VAR 0 9
51030: ARRAY
51031: PUSH
51032: LD_INT 1
51034: ARRAY
51035: PPUSH
51036: LD_VAR 0 2
51040: PUSH
51041: LD_VAR 0 9
51045: ARRAY
51046: PUSH
51047: LD_INT 2
51049: ARRAY
51050: PPUSH
51051: CALL_OW 114
51055: GO 51071
// SetTag ( i , tag ) ;
51057: LD_VAR 0 4
51061: PPUSH
51062: LD_VAR 0 9
51066: PPUSH
51067: CALL_OW 109
// end else
51071: GO 51144
// if enemy then
51073: LD_VAR 0 5
51077: IFFALSE 51144
// begin if GetWeapon ( i ) = ru_time_lapser then
51079: LD_VAR 0 4
51083: PPUSH
51084: CALL_OW 264
51088: PUSH
51089: LD_INT 49
51091: EQUAL
51092: IFFALSE 51120
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51094: LD_VAR 0 4
51098: PPUSH
51099: LD_VAR 0 5
51103: PPUSH
51104: LD_VAR 0 4
51108: PPUSH
51109: CALL_OW 74
51113: PPUSH
51114: CALL_OW 112
51118: GO 51144
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51120: LD_VAR 0 4
51124: PPUSH
51125: LD_VAR 0 5
51129: PPUSH
51130: LD_VAR 0 4
51134: PPUSH
51135: CALL_OW 74
51139: PPUSH
51140: CALL_OW 115
// end ; end ;
51144: GO 50724
51146: POP
51147: POP
// end ;
51148: LD_VAR 0 3
51152: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51153: LD_INT 0
51155: PPUSH
51156: PPUSH
51157: PPUSH
// if not unit or IsInUnit ( unit ) then
51158: LD_VAR 0 1
51162: NOT
51163: PUSH
51164: LD_VAR 0 1
51168: PPUSH
51169: CALL_OW 310
51173: OR
51174: IFFALSE 51178
// exit ;
51176: GO 51269
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51178: LD_ADDR_VAR 0 4
51182: PUSH
51183: LD_VAR 0 1
51187: PPUSH
51188: CALL_OW 250
51192: PPUSH
51193: LD_VAR 0 2
51197: PPUSH
51198: LD_INT 1
51200: PPUSH
51201: CALL_OW 272
51205: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51206: LD_ADDR_VAR 0 5
51210: PUSH
51211: LD_VAR 0 1
51215: PPUSH
51216: CALL_OW 251
51220: PPUSH
51221: LD_VAR 0 2
51225: PPUSH
51226: LD_INT 1
51228: PPUSH
51229: CALL_OW 273
51233: ST_TO_ADDR
// if ValidHex ( x , y ) then
51234: LD_VAR 0 4
51238: PPUSH
51239: LD_VAR 0 5
51243: PPUSH
51244: CALL_OW 488
51248: IFFALSE 51269
// ComTurnXY ( unit , x , y ) ;
51250: LD_VAR 0 1
51254: PPUSH
51255: LD_VAR 0 4
51259: PPUSH
51260: LD_VAR 0 5
51264: PPUSH
51265: CALL_OW 118
// end ;
51269: LD_VAR 0 3
51273: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51274: LD_INT 0
51276: PPUSH
51277: PPUSH
// result := false ;
51278: LD_ADDR_VAR 0 3
51282: PUSH
51283: LD_INT 0
51285: ST_TO_ADDR
// if not units then
51286: LD_VAR 0 2
51290: NOT
51291: IFFALSE 51295
// exit ;
51293: GO 51340
// for i in units do
51295: LD_ADDR_VAR 0 4
51299: PUSH
51300: LD_VAR 0 2
51304: PUSH
51305: FOR_IN
51306: IFFALSE 51338
// if See ( side , i ) then
51308: LD_VAR 0 1
51312: PPUSH
51313: LD_VAR 0 4
51317: PPUSH
51318: CALL_OW 292
51322: IFFALSE 51336
// begin result := true ;
51324: LD_ADDR_VAR 0 3
51328: PUSH
51329: LD_INT 1
51331: ST_TO_ADDR
// exit ;
51332: POP
51333: POP
51334: GO 51340
// end ;
51336: GO 51305
51338: POP
51339: POP
// end ;
51340: LD_VAR 0 3
51344: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51345: LD_INT 0
51347: PPUSH
51348: PPUSH
51349: PPUSH
51350: PPUSH
// if not unit or not points then
51351: LD_VAR 0 1
51355: NOT
51356: PUSH
51357: LD_VAR 0 2
51361: NOT
51362: OR
51363: IFFALSE 51367
// exit ;
51365: GO 51457
// dist := 99999 ;
51367: LD_ADDR_VAR 0 5
51371: PUSH
51372: LD_INT 99999
51374: ST_TO_ADDR
// for i in points do
51375: LD_ADDR_VAR 0 4
51379: PUSH
51380: LD_VAR 0 2
51384: PUSH
51385: FOR_IN
51386: IFFALSE 51455
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51388: LD_ADDR_VAR 0 6
51392: PUSH
51393: LD_VAR 0 1
51397: PPUSH
51398: LD_VAR 0 4
51402: PUSH
51403: LD_INT 1
51405: ARRAY
51406: PPUSH
51407: LD_VAR 0 4
51411: PUSH
51412: LD_INT 2
51414: ARRAY
51415: PPUSH
51416: CALL_OW 297
51420: ST_TO_ADDR
// if tmpDist < dist then
51421: LD_VAR 0 6
51425: PUSH
51426: LD_VAR 0 5
51430: LESS
51431: IFFALSE 51453
// begin result := i ;
51433: LD_ADDR_VAR 0 3
51437: PUSH
51438: LD_VAR 0 4
51442: ST_TO_ADDR
// dist := tmpDist ;
51443: LD_ADDR_VAR 0 5
51447: PUSH
51448: LD_VAR 0 6
51452: ST_TO_ADDR
// end ; end ;
51453: GO 51385
51455: POP
51456: POP
// end ;
51457: LD_VAR 0 3
51461: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51462: LD_INT 0
51464: PPUSH
// uc_side := side ;
51465: LD_ADDR_OWVAR 20
51469: PUSH
51470: LD_VAR 0 1
51474: ST_TO_ADDR
// uc_nation := 3 ;
51475: LD_ADDR_OWVAR 21
51479: PUSH
51480: LD_INT 3
51482: ST_TO_ADDR
// vc_chassis := 25 ;
51483: LD_ADDR_OWVAR 37
51487: PUSH
51488: LD_INT 25
51490: ST_TO_ADDR
// vc_engine := engine_siberite ;
51491: LD_ADDR_OWVAR 39
51495: PUSH
51496: LD_INT 3
51498: ST_TO_ADDR
// vc_control := control_computer ;
51499: LD_ADDR_OWVAR 38
51503: PUSH
51504: LD_INT 3
51506: ST_TO_ADDR
// vc_weapon := 59 ;
51507: LD_ADDR_OWVAR 40
51511: PUSH
51512: LD_INT 59
51514: ST_TO_ADDR
// result := CreateVehicle ;
51515: LD_ADDR_VAR 0 5
51519: PUSH
51520: CALL_OW 45
51524: ST_TO_ADDR
// SetDir ( result , d ) ;
51525: LD_VAR 0 5
51529: PPUSH
51530: LD_VAR 0 4
51534: PPUSH
51535: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51539: LD_VAR 0 5
51543: PPUSH
51544: LD_VAR 0 2
51548: PPUSH
51549: LD_VAR 0 3
51553: PPUSH
51554: LD_INT 0
51556: PPUSH
51557: CALL_OW 48
// end ;
51561: LD_VAR 0 5
51565: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51566: LD_INT 0
51568: PPUSH
51569: PPUSH
51570: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51571: LD_ADDR_VAR 0 2
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51594: LD_VAR 0 1
51598: NOT
51599: PUSH
51600: LD_VAR 0 1
51604: PPUSH
51605: CALL_OW 264
51609: PUSH
51610: LD_INT 12
51612: PUSH
51613: LD_INT 51
51615: PUSH
51616: LD_INT 32
51618: PUSH
51619: LD_INT 89
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: IN
51628: NOT
51629: OR
51630: IFFALSE 51634
// exit ;
51632: GO 51732
// for i := 1 to 3 do
51634: LD_ADDR_VAR 0 3
51638: PUSH
51639: DOUBLE
51640: LD_INT 1
51642: DEC
51643: ST_TO_ADDR
51644: LD_INT 3
51646: PUSH
51647: FOR_TO
51648: IFFALSE 51730
// begin tmp := GetCargo ( cargo , i ) ;
51650: LD_ADDR_VAR 0 4
51654: PUSH
51655: LD_VAR 0 1
51659: PPUSH
51660: LD_VAR 0 3
51664: PPUSH
51665: CALL_OW 289
51669: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51670: LD_ADDR_VAR 0 2
51674: PUSH
51675: LD_VAR 0 2
51679: PPUSH
51680: LD_VAR 0 3
51684: PPUSH
51685: LD_VAR 0 4
51689: PPUSH
51690: CALL_OW 1
51694: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51695: LD_ADDR_VAR 0 2
51699: PUSH
51700: LD_VAR 0 2
51704: PPUSH
51705: LD_INT 4
51707: PPUSH
51708: LD_VAR 0 2
51712: PUSH
51713: LD_INT 4
51715: ARRAY
51716: PUSH
51717: LD_VAR 0 4
51721: PLUS
51722: PPUSH
51723: CALL_OW 1
51727: ST_TO_ADDR
// end ;
51728: GO 51647
51730: POP
51731: POP
// end ;
51732: LD_VAR 0 2
51736: RET
// export function Length ( array ) ; begin
51737: LD_INT 0
51739: PPUSH
// result := array + 0 ;
51740: LD_ADDR_VAR 0 2
51744: PUSH
51745: LD_VAR 0 1
51749: PUSH
51750: LD_INT 0
51752: PLUS
51753: ST_TO_ADDR
// end ;
51754: LD_VAR 0 2
51758: RET
// export function PrepareArray ( array ) ; begin
51759: LD_INT 0
51761: PPUSH
// result := array diff 0 ;
51762: LD_ADDR_VAR 0 2
51766: PUSH
51767: LD_VAR 0 1
51771: PUSH
51772: LD_INT 0
51774: DIFF
51775: ST_TO_ADDR
// if not result [ 1 ] then
51776: LD_VAR 0 2
51780: PUSH
51781: LD_INT 1
51783: ARRAY
51784: NOT
51785: IFFALSE 51805
// result := Delete ( result , 1 ) ;
51787: LD_ADDR_VAR 0 2
51791: PUSH
51792: LD_VAR 0 2
51796: PPUSH
51797: LD_INT 1
51799: PPUSH
51800: CALL_OW 3
51804: ST_TO_ADDR
// end ;
51805: LD_VAR 0 2
51809: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
51810: LD_INT 0
51812: PPUSH
51813: PPUSH
51814: PPUSH
51815: PPUSH
// sibRocketRange := 25 ;
51816: LD_ADDR_VAR 0 6
51820: PUSH
51821: LD_INT 25
51823: ST_TO_ADDR
// result := false ;
51824: LD_ADDR_VAR 0 4
51828: PUSH
51829: LD_INT 0
51831: ST_TO_ADDR
// for i := 0 to 5 do
51832: LD_ADDR_VAR 0 5
51836: PUSH
51837: DOUBLE
51838: LD_INT 0
51840: DEC
51841: ST_TO_ADDR
51842: LD_INT 5
51844: PUSH
51845: FOR_TO
51846: IFFALSE 51913
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
51848: LD_VAR 0 1
51852: PPUSH
51853: LD_VAR 0 5
51857: PPUSH
51858: LD_VAR 0 6
51862: PPUSH
51863: CALL_OW 272
51867: PPUSH
51868: LD_VAR 0 2
51872: PPUSH
51873: LD_VAR 0 5
51877: PPUSH
51878: LD_VAR 0 6
51882: PPUSH
51883: CALL_OW 273
51887: PPUSH
51888: LD_VAR 0 3
51892: PPUSH
51893: CALL_OW 309
51897: IFFALSE 51911
// begin result := true ;
51899: LD_ADDR_VAR 0 4
51903: PUSH
51904: LD_INT 1
51906: ST_TO_ADDR
// exit ;
51907: POP
51908: POP
51909: GO 51915
// end ;
51911: GO 51845
51913: POP
51914: POP
// end ;
51915: LD_VAR 0 4
51919: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
51920: LD_INT 0
51922: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
51923: LD_VAR 0 1
51927: PPUSH
51928: LD_VAR 0 2
51932: PPUSH
51933: LD_INT 0
51935: PPUSH
51936: LD_INT 0
51938: PPUSH
51939: LD_INT 1
51941: PPUSH
51942: LD_INT 0
51944: PPUSH
51945: CALL_OW 587
// end ;
51949: LD_VAR 0 3
51953: RET
// export function CenterOnNow ( unit ) ; begin
51954: LD_INT 0
51956: PPUSH
// result := IsInUnit ( unit ) ;
51957: LD_ADDR_VAR 0 2
51961: PUSH
51962: LD_VAR 0 1
51966: PPUSH
51967: CALL_OW 310
51971: ST_TO_ADDR
// if not result then
51972: LD_VAR 0 2
51976: NOT
51977: IFFALSE 51989
// result := unit ;
51979: LD_ADDR_VAR 0 2
51983: PUSH
51984: LD_VAR 0 1
51988: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
51989: LD_VAR 0 1
51993: PPUSH
51994: CALL_OW 87
// end ; end_of_file end_of_file
51998: LD_VAR 0 2
52002: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
52003: LD_VAR 0 1
52007: PPUSH
52008: LD_VAR 0 2
52012: PPUSH
52013: LD_VAR 0 3
52017: PPUSH
52018: LD_VAR 0 4
52022: PPUSH
52023: LD_VAR 0 5
52027: PPUSH
52028: LD_VAR 0 6
52032: PPUSH
52033: CALL 52217 0 6
// end ;
52037: PPOPN 6
52039: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
52040: LD_INT 0
52042: PPUSH
// begin if not units then
52043: LD_VAR 0 1
52047: NOT
52048: IFFALSE 52052
// exit ;
52050: GO 52052
// end ;
52052: PPOPN 7
52054: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
52055: CALL 52121 0 0
// end ; end_of_file
52059: PPOPN 1
52061: END
// export globalGameSaveCounter ; every 0 0$1 do
52062: GO 52064
52064: DISABLE
// begin enable ;
52065: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
52066: LD_STRING updateTimer(
52068: PUSH
52069: LD_OWVAR 1
52073: STR
52074: PUSH
52075: LD_STRING );
52077: STR
52078: PPUSH
52079: CALL_OW 559
// end ;
52083: END
// every 0 0$1 do
52084: GO 52086
52086: DISABLE
// begin globalGameSaveCounter := 0 ;
52087: LD_ADDR_EXP 34
52091: PUSH
52092: LD_INT 0
52094: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
52095: LD_STRING setGameSaveCounter(0)
52097: PPUSH
52098: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
52102: LD_STRING initStreamRollete();
52104: PPUSH
52105: CALL_OW 559
// InitStreamMode ;
52109: CALL 53435 0 0
// DefineStreamItems ( false ) ;
52113: LD_INT 0
52115: PPUSH
52116: CALL 53899 0 1
// end ;
52120: END
// export function SOS_MapStart ( ) ; begin
52121: LD_INT 0
52123: PPUSH
// if streamModeActive then
52124: LD_EXP 35
52128: IFFALSE 52137
// DefineStreamItems ( true ) ;
52130: LD_INT 1
52132: PPUSH
52133: CALL 53899 0 1
// UpdateLuaVariables ( ) ;
52137: CALL 52154 0 0
// UpdateFactoryWaypoints ( ) ;
52141: CALL 66760 0 0
// UpdateWarehouseGatheringPoints ( ) ;
52145: CALL 67017 0 0
// end ;
52149: LD_VAR 0 1
52153: RET
// function UpdateLuaVariables ( ) ; begin
52154: LD_INT 0
52156: PPUSH
// if globalGameSaveCounter then
52157: LD_EXP 34
52161: IFFALSE 52195
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
52163: LD_ADDR_EXP 34
52167: PUSH
52168: LD_EXP 34
52172: PPUSH
52173: CALL 49362 0 1
52177: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
52178: LD_STRING setGameSaveCounter(
52180: PUSH
52181: LD_EXP 34
52185: STR
52186: PUSH
52187: LD_STRING )
52189: STR
52190: PPUSH
52191: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
52195: LD_STRING setGameDifficulty(
52197: PUSH
52198: LD_OWVAR 67
52202: STR
52203: PUSH
52204: LD_STRING )
52206: STR
52207: PPUSH
52208: CALL_OW 559
// end ;
52212: LD_VAR 0 1
52216: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
52217: LD_INT 0
52219: PPUSH
// if p2 = stream_mode then
52220: LD_VAR 0 2
52224: PUSH
52225: LD_INT 100
52227: EQUAL
52228: IFFALSE 53231
// begin if not StreamModeActive then
52230: LD_EXP 35
52234: NOT
52235: IFFALSE 52245
// StreamModeActive := true ;
52237: LD_ADDR_EXP 35
52241: PUSH
52242: LD_INT 1
52244: ST_TO_ADDR
// if p3 = 0 then
52245: LD_VAR 0 3
52249: PUSH
52250: LD_INT 0
52252: EQUAL
52253: IFFALSE 52259
// InitStreamMode ;
52255: CALL 53435 0 0
// if p3 = 1 then
52259: LD_VAR 0 3
52263: PUSH
52264: LD_INT 1
52266: EQUAL
52267: IFFALSE 52277
// sRocket := true ;
52269: LD_ADDR_EXP 40
52273: PUSH
52274: LD_INT 1
52276: ST_TO_ADDR
// if p3 = 2 then
52277: LD_VAR 0 3
52281: PUSH
52282: LD_INT 2
52284: EQUAL
52285: IFFALSE 52295
// sSpeed := true ;
52287: LD_ADDR_EXP 39
52291: PUSH
52292: LD_INT 1
52294: ST_TO_ADDR
// if p3 = 3 then
52295: LD_VAR 0 3
52299: PUSH
52300: LD_INT 3
52302: EQUAL
52303: IFFALSE 52313
// sEngine := true ;
52305: LD_ADDR_EXP 41
52309: PUSH
52310: LD_INT 1
52312: ST_TO_ADDR
// if p3 = 4 then
52313: LD_VAR 0 3
52317: PUSH
52318: LD_INT 4
52320: EQUAL
52321: IFFALSE 52331
// sSpec := true ;
52323: LD_ADDR_EXP 38
52327: PUSH
52328: LD_INT 1
52330: ST_TO_ADDR
// if p3 = 5 then
52331: LD_VAR 0 3
52335: PUSH
52336: LD_INT 5
52338: EQUAL
52339: IFFALSE 52349
// sLevel := true ;
52341: LD_ADDR_EXP 42
52345: PUSH
52346: LD_INT 1
52348: ST_TO_ADDR
// if p3 = 6 then
52349: LD_VAR 0 3
52353: PUSH
52354: LD_INT 6
52356: EQUAL
52357: IFFALSE 52367
// sArmoury := true ;
52359: LD_ADDR_EXP 43
52363: PUSH
52364: LD_INT 1
52366: ST_TO_ADDR
// if p3 = 7 then
52367: LD_VAR 0 3
52371: PUSH
52372: LD_INT 7
52374: EQUAL
52375: IFFALSE 52385
// sRadar := true ;
52377: LD_ADDR_EXP 44
52381: PUSH
52382: LD_INT 1
52384: ST_TO_ADDR
// if p3 = 8 then
52385: LD_VAR 0 3
52389: PUSH
52390: LD_INT 8
52392: EQUAL
52393: IFFALSE 52403
// sBunker := true ;
52395: LD_ADDR_EXP 45
52399: PUSH
52400: LD_INT 1
52402: ST_TO_ADDR
// if p3 = 9 then
52403: LD_VAR 0 3
52407: PUSH
52408: LD_INT 9
52410: EQUAL
52411: IFFALSE 52421
// sHack := true ;
52413: LD_ADDR_EXP 46
52417: PUSH
52418: LD_INT 1
52420: ST_TO_ADDR
// if p3 = 10 then
52421: LD_VAR 0 3
52425: PUSH
52426: LD_INT 10
52428: EQUAL
52429: IFFALSE 52439
// sFire := true ;
52431: LD_ADDR_EXP 47
52435: PUSH
52436: LD_INT 1
52438: ST_TO_ADDR
// if p3 = 11 then
52439: LD_VAR 0 3
52443: PUSH
52444: LD_INT 11
52446: EQUAL
52447: IFFALSE 52457
// sRefresh := true ;
52449: LD_ADDR_EXP 48
52453: PUSH
52454: LD_INT 1
52456: ST_TO_ADDR
// if p3 = 12 then
52457: LD_VAR 0 3
52461: PUSH
52462: LD_INT 12
52464: EQUAL
52465: IFFALSE 52475
// sExp := true ;
52467: LD_ADDR_EXP 49
52471: PUSH
52472: LD_INT 1
52474: ST_TO_ADDR
// if p3 = 13 then
52475: LD_VAR 0 3
52479: PUSH
52480: LD_INT 13
52482: EQUAL
52483: IFFALSE 52493
// sDepot := true ;
52485: LD_ADDR_EXP 50
52489: PUSH
52490: LD_INT 1
52492: ST_TO_ADDR
// if p3 = 14 then
52493: LD_VAR 0 3
52497: PUSH
52498: LD_INT 14
52500: EQUAL
52501: IFFALSE 52511
// sFlag := true ;
52503: LD_ADDR_EXP 51
52507: PUSH
52508: LD_INT 1
52510: ST_TO_ADDR
// if p3 = 15 then
52511: LD_VAR 0 3
52515: PUSH
52516: LD_INT 15
52518: EQUAL
52519: IFFALSE 52529
// sKamikadze := true ;
52521: LD_ADDR_EXP 59
52525: PUSH
52526: LD_INT 1
52528: ST_TO_ADDR
// if p3 = 16 then
52529: LD_VAR 0 3
52533: PUSH
52534: LD_INT 16
52536: EQUAL
52537: IFFALSE 52547
// sTroll := true ;
52539: LD_ADDR_EXP 60
52543: PUSH
52544: LD_INT 1
52546: ST_TO_ADDR
// if p3 = 17 then
52547: LD_VAR 0 3
52551: PUSH
52552: LD_INT 17
52554: EQUAL
52555: IFFALSE 52565
// sSlow := true ;
52557: LD_ADDR_EXP 61
52561: PUSH
52562: LD_INT 1
52564: ST_TO_ADDR
// if p3 = 18 then
52565: LD_VAR 0 3
52569: PUSH
52570: LD_INT 18
52572: EQUAL
52573: IFFALSE 52583
// sLack := true ;
52575: LD_ADDR_EXP 62
52579: PUSH
52580: LD_INT 1
52582: ST_TO_ADDR
// if p3 = 19 then
52583: LD_VAR 0 3
52587: PUSH
52588: LD_INT 19
52590: EQUAL
52591: IFFALSE 52601
// sTank := true ;
52593: LD_ADDR_EXP 64
52597: PUSH
52598: LD_INT 1
52600: ST_TO_ADDR
// if p3 = 20 then
52601: LD_VAR 0 3
52605: PUSH
52606: LD_INT 20
52608: EQUAL
52609: IFFALSE 52619
// sRemote := true ;
52611: LD_ADDR_EXP 65
52615: PUSH
52616: LD_INT 1
52618: ST_TO_ADDR
// if p3 = 21 then
52619: LD_VAR 0 3
52623: PUSH
52624: LD_INT 21
52626: EQUAL
52627: IFFALSE 52637
// sPowell := true ;
52629: LD_ADDR_EXP 66
52633: PUSH
52634: LD_INT 1
52636: ST_TO_ADDR
// if p3 = 22 then
52637: LD_VAR 0 3
52641: PUSH
52642: LD_INT 22
52644: EQUAL
52645: IFFALSE 52655
// sTeleport := true ;
52647: LD_ADDR_EXP 69
52651: PUSH
52652: LD_INT 1
52654: ST_TO_ADDR
// if p3 = 23 then
52655: LD_VAR 0 3
52659: PUSH
52660: LD_INT 23
52662: EQUAL
52663: IFFALSE 52673
// sOilTower := true ;
52665: LD_ADDR_EXP 71
52669: PUSH
52670: LD_INT 1
52672: ST_TO_ADDR
// if p3 = 24 then
52673: LD_VAR 0 3
52677: PUSH
52678: LD_INT 24
52680: EQUAL
52681: IFFALSE 52691
// sShovel := true ;
52683: LD_ADDR_EXP 72
52687: PUSH
52688: LD_INT 1
52690: ST_TO_ADDR
// if p3 = 25 then
52691: LD_VAR 0 3
52695: PUSH
52696: LD_INT 25
52698: EQUAL
52699: IFFALSE 52709
// sSheik := true ;
52701: LD_ADDR_EXP 73
52705: PUSH
52706: LD_INT 1
52708: ST_TO_ADDR
// if p3 = 26 then
52709: LD_VAR 0 3
52713: PUSH
52714: LD_INT 26
52716: EQUAL
52717: IFFALSE 52727
// sEarthquake := true ;
52719: LD_ADDR_EXP 75
52723: PUSH
52724: LD_INT 1
52726: ST_TO_ADDR
// if p3 = 27 then
52727: LD_VAR 0 3
52731: PUSH
52732: LD_INT 27
52734: EQUAL
52735: IFFALSE 52745
// sAI := true ;
52737: LD_ADDR_EXP 76
52741: PUSH
52742: LD_INT 1
52744: ST_TO_ADDR
// if p3 = 28 then
52745: LD_VAR 0 3
52749: PUSH
52750: LD_INT 28
52752: EQUAL
52753: IFFALSE 52763
// sCargo := true ;
52755: LD_ADDR_EXP 79
52759: PUSH
52760: LD_INT 1
52762: ST_TO_ADDR
// if p3 = 29 then
52763: LD_VAR 0 3
52767: PUSH
52768: LD_INT 29
52770: EQUAL
52771: IFFALSE 52781
// sDLaser := true ;
52773: LD_ADDR_EXP 80
52777: PUSH
52778: LD_INT 1
52780: ST_TO_ADDR
// if p3 = 30 then
52781: LD_VAR 0 3
52785: PUSH
52786: LD_INT 30
52788: EQUAL
52789: IFFALSE 52799
// sExchange := true ;
52791: LD_ADDR_EXP 81
52795: PUSH
52796: LD_INT 1
52798: ST_TO_ADDR
// if p3 = 31 then
52799: LD_VAR 0 3
52803: PUSH
52804: LD_INT 31
52806: EQUAL
52807: IFFALSE 52817
// sFac := true ;
52809: LD_ADDR_EXP 82
52813: PUSH
52814: LD_INT 1
52816: ST_TO_ADDR
// if p3 = 32 then
52817: LD_VAR 0 3
52821: PUSH
52822: LD_INT 32
52824: EQUAL
52825: IFFALSE 52835
// sPower := true ;
52827: LD_ADDR_EXP 83
52831: PUSH
52832: LD_INT 1
52834: ST_TO_ADDR
// if p3 = 33 then
52835: LD_VAR 0 3
52839: PUSH
52840: LD_INT 33
52842: EQUAL
52843: IFFALSE 52853
// sRandom := true ;
52845: LD_ADDR_EXP 84
52849: PUSH
52850: LD_INT 1
52852: ST_TO_ADDR
// if p3 = 34 then
52853: LD_VAR 0 3
52857: PUSH
52858: LD_INT 34
52860: EQUAL
52861: IFFALSE 52871
// sShield := true ;
52863: LD_ADDR_EXP 85
52867: PUSH
52868: LD_INT 1
52870: ST_TO_ADDR
// if p3 = 35 then
52871: LD_VAR 0 3
52875: PUSH
52876: LD_INT 35
52878: EQUAL
52879: IFFALSE 52889
// sTime := true ;
52881: LD_ADDR_EXP 86
52885: PUSH
52886: LD_INT 1
52888: ST_TO_ADDR
// if p3 = 36 then
52889: LD_VAR 0 3
52893: PUSH
52894: LD_INT 36
52896: EQUAL
52897: IFFALSE 52907
// sTools := true ;
52899: LD_ADDR_EXP 87
52903: PUSH
52904: LD_INT 1
52906: ST_TO_ADDR
// if p3 = 101 then
52907: LD_VAR 0 3
52911: PUSH
52912: LD_INT 101
52914: EQUAL
52915: IFFALSE 52925
// sSold := true ;
52917: LD_ADDR_EXP 52
52921: PUSH
52922: LD_INT 1
52924: ST_TO_ADDR
// if p3 = 102 then
52925: LD_VAR 0 3
52929: PUSH
52930: LD_INT 102
52932: EQUAL
52933: IFFALSE 52943
// sDiff := true ;
52935: LD_ADDR_EXP 53
52939: PUSH
52940: LD_INT 1
52942: ST_TO_ADDR
// if p3 = 103 then
52943: LD_VAR 0 3
52947: PUSH
52948: LD_INT 103
52950: EQUAL
52951: IFFALSE 52961
// sFog := true ;
52953: LD_ADDR_EXP 56
52957: PUSH
52958: LD_INT 1
52960: ST_TO_ADDR
// if p3 = 104 then
52961: LD_VAR 0 3
52965: PUSH
52966: LD_INT 104
52968: EQUAL
52969: IFFALSE 52979
// sReset := true ;
52971: LD_ADDR_EXP 57
52975: PUSH
52976: LD_INT 1
52978: ST_TO_ADDR
// if p3 = 105 then
52979: LD_VAR 0 3
52983: PUSH
52984: LD_INT 105
52986: EQUAL
52987: IFFALSE 52997
// sSun := true ;
52989: LD_ADDR_EXP 58
52993: PUSH
52994: LD_INT 1
52996: ST_TO_ADDR
// if p3 = 106 then
52997: LD_VAR 0 3
53001: PUSH
53002: LD_INT 106
53004: EQUAL
53005: IFFALSE 53015
// sTiger := true ;
53007: LD_ADDR_EXP 54
53011: PUSH
53012: LD_INT 1
53014: ST_TO_ADDR
// if p3 = 107 then
53015: LD_VAR 0 3
53019: PUSH
53020: LD_INT 107
53022: EQUAL
53023: IFFALSE 53033
// sBomb := true ;
53025: LD_ADDR_EXP 55
53029: PUSH
53030: LD_INT 1
53032: ST_TO_ADDR
// if p3 = 108 then
53033: LD_VAR 0 3
53037: PUSH
53038: LD_INT 108
53040: EQUAL
53041: IFFALSE 53051
// sWound := true ;
53043: LD_ADDR_EXP 63
53047: PUSH
53048: LD_INT 1
53050: ST_TO_ADDR
// if p3 = 109 then
53051: LD_VAR 0 3
53055: PUSH
53056: LD_INT 109
53058: EQUAL
53059: IFFALSE 53069
// sBetray := true ;
53061: LD_ADDR_EXP 67
53065: PUSH
53066: LD_INT 1
53068: ST_TO_ADDR
// if p3 = 110 then
53069: LD_VAR 0 3
53073: PUSH
53074: LD_INT 110
53076: EQUAL
53077: IFFALSE 53087
// sContamin := true ;
53079: LD_ADDR_EXP 68
53083: PUSH
53084: LD_INT 1
53086: ST_TO_ADDR
// if p3 = 111 then
53087: LD_VAR 0 3
53091: PUSH
53092: LD_INT 111
53094: EQUAL
53095: IFFALSE 53105
// sOil := true ;
53097: LD_ADDR_EXP 70
53101: PUSH
53102: LD_INT 1
53104: ST_TO_ADDR
// if p3 = 112 then
53105: LD_VAR 0 3
53109: PUSH
53110: LD_INT 112
53112: EQUAL
53113: IFFALSE 53123
// sStu := true ;
53115: LD_ADDR_EXP 74
53119: PUSH
53120: LD_INT 1
53122: ST_TO_ADDR
// if p3 = 113 then
53123: LD_VAR 0 3
53127: PUSH
53128: LD_INT 113
53130: EQUAL
53131: IFFALSE 53141
// sBazooka := true ;
53133: LD_ADDR_EXP 77
53137: PUSH
53138: LD_INT 1
53140: ST_TO_ADDR
// if p3 = 114 then
53141: LD_VAR 0 3
53145: PUSH
53146: LD_INT 114
53148: EQUAL
53149: IFFALSE 53159
// sMortar := true ;
53151: LD_ADDR_EXP 78
53155: PUSH
53156: LD_INT 1
53158: ST_TO_ADDR
// if p3 = 115 then
53159: LD_VAR 0 3
53163: PUSH
53164: LD_INT 115
53166: EQUAL
53167: IFFALSE 53177
// sRanger := true ;
53169: LD_ADDR_EXP 88
53173: PUSH
53174: LD_INT 1
53176: ST_TO_ADDR
// if p3 = 116 then
53177: LD_VAR 0 3
53181: PUSH
53182: LD_INT 116
53184: EQUAL
53185: IFFALSE 53195
// sComputer := true ;
53187: LD_ADDR_EXP 89
53191: PUSH
53192: LD_INT 1
53194: ST_TO_ADDR
// if p3 = 117 then
53195: LD_VAR 0 3
53199: PUSH
53200: LD_INT 117
53202: EQUAL
53203: IFFALSE 53213
// s30 := true ;
53205: LD_ADDR_EXP 90
53209: PUSH
53210: LD_INT 1
53212: ST_TO_ADDR
// if p3 = 118 then
53213: LD_VAR 0 3
53217: PUSH
53218: LD_INT 118
53220: EQUAL
53221: IFFALSE 53231
// s60 := true ;
53223: LD_ADDR_EXP 91
53227: PUSH
53228: LD_INT 1
53230: ST_TO_ADDR
// end ; if p2 = hack_mode then
53231: LD_VAR 0 2
53235: PUSH
53236: LD_INT 101
53238: EQUAL
53239: IFFALSE 53367
// begin case p3 of 1 :
53241: LD_VAR 0 3
53245: PUSH
53246: LD_INT 1
53248: DOUBLE
53249: EQUAL
53250: IFTRUE 53254
53252: GO 53261
53254: POP
// hHackUnlimitedResources ; 2 :
53255: CALL 65506 0 0
53259: GO 53367
53261: LD_INT 2
53263: DOUBLE
53264: EQUAL
53265: IFTRUE 53269
53267: GO 53276
53269: POP
// hHackSetLevel10 ; 3 :
53270: CALL 65639 0 0
53274: GO 53367
53276: LD_INT 3
53278: DOUBLE
53279: EQUAL
53280: IFTRUE 53284
53282: GO 53291
53284: POP
// hHackSetLevel10YourUnits ; 4 :
53285: CALL 65724 0 0
53289: GO 53367
53291: LD_INT 4
53293: DOUBLE
53294: EQUAL
53295: IFTRUE 53299
53297: GO 53306
53299: POP
// hHackInvincible ; 5 :
53300: CALL 66172 0 0
53304: GO 53367
53306: LD_INT 5
53308: DOUBLE
53309: EQUAL
53310: IFTRUE 53314
53312: GO 53321
53314: POP
// hHackInvisible ; 6 :
53315: CALL 66283 0 0
53319: GO 53367
53321: LD_INT 6
53323: DOUBLE
53324: EQUAL
53325: IFTRUE 53329
53327: GO 53336
53329: POP
// hHackChangeYourSide ; 7 :
53330: CALL 66340 0 0
53334: GO 53367
53336: LD_INT 7
53338: DOUBLE
53339: EQUAL
53340: IFTRUE 53344
53342: GO 53351
53344: POP
// hHackChangeUnitSide ; 8 :
53345: CALL 66382 0 0
53349: GO 53367
53351: LD_INT 8
53353: DOUBLE
53354: EQUAL
53355: IFTRUE 53359
53357: GO 53366
53359: POP
// hHackFog ; end ;
53360: CALL 66483 0 0
53364: GO 53367
53366: POP
// end ; if p2 = game_save_mode then
53367: LD_VAR 0 2
53371: PUSH
53372: LD_INT 102
53374: EQUAL
53375: IFFALSE 53430
// begin if p3 = 1 then
53377: LD_VAR 0 3
53381: PUSH
53382: LD_INT 1
53384: EQUAL
53385: IFFALSE 53397
// globalGameSaveCounter := p4 ;
53387: LD_ADDR_EXP 34
53391: PUSH
53392: LD_VAR 0 4
53396: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
53397: LD_VAR 0 3
53401: PUSH
53402: LD_INT 2
53404: EQUAL
53405: PUSH
53406: LD_EXP 34
53410: AND
53411: IFFALSE 53430
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53413: LD_STRING setGameSaveCounter(
53415: PUSH
53416: LD_EXP 34
53420: STR
53421: PUSH
53422: LD_STRING )
53424: STR
53425: PPUSH
53426: CALL_OW 559
// end ; end ;
53430: LD_VAR 0 7
53434: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
53435: LD_INT 0
53437: PPUSH
// streamModeActive := false ;
53438: LD_ADDR_EXP 35
53442: PUSH
53443: LD_INT 0
53445: ST_TO_ADDR
// normalCounter := 36 ;
53446: LD_ADDR_EXP 36
53450: PUSH
53451: LD_INT 36
53453: ST_TO_ADDR
// hardcoreCounter := 18 ;
53454: LD_ADDR_EXP 37
53458: PUSH
53459: LD_INT 18
53461: ST_TO_ADDR
// sRocket := false ;
53462: LD_ADDR_EXP 40
53466: PUSH
53467: LD_INT 0
53469: ST_TO_ADDR
// sSpeed := false ;
53470: LD_ADDR_EXP 39
53474: PUSH
53475: LD_INT 0
53477: ST_TO_ADDR
// sEngine := false ;
53478: LD_ADDR_EXP 41
53482: PUSH
53483: LD_INT 0
53485: ST_TO_ADDR
// sSpec := false ;
53486: LD_ADDR_EXP 38
53490: PUSH
53491: LD_INT 0
53493: ST_TO_ADDR
// sLevel := false ;
53494: LD_ADDR_EXP 42
53498: PUSH
53499: LD_INT 0
53501: ST_TO_ADDR
// sArmoury := false ;
53502: LD_ADDR_EXP 43
53506: PUSH
53507: LD_INT 0
53509: ST_TO_ADDR
// sRadar := false ;
53510: LD_ADDR_EXP 44
53514: PUSH
53515: LD_INT 0
53517: ST_TO_ADDR
// sBunker := false ;
53518: LD_ADDR_EXP 45
53522: PUSH
53523: LD_INT 0
53525: ST_TO_ADDR
// sHack := false ;
53526: LD_ADDR_EXP 46
53530: PUSH
53531: LD_INT 0
53533: ST_TO_ADDR
// sFire := false ;
53534: LD_ADDR_EXP 47
53538: PUSH
53539: LD_INT 0
53541: ST_TO_ADDR
// sRefresh := false ;
53542: LD_ADDR_EXP 48
53546: PUSH
53547: LD_INT 0
53549: ST_TO_ADDR
// sExp := false ;
53550: LD_ADDR_EXP 49
53554: PUSH
53555: LD_INT 0
53557: ST_TO_ADDR
// sDepot := false ;
53558: LD_ADDR_EXP 50
53562: PUSH
53563: LD_INT 0
53565: ST_TO_ADDR
// sFlag := false ;
53566: LD_ADDR_EXP 51
53570: PUSH
53571: LD_INT 0
53573: ST_TO_ADDR
// sKamikadze := false ;
53574: LD_ADDR_EXP 59
53578: PUSH
53579: LD_INT 0
53581: ST_TO_ADDR
// sTroll := false ;
53582: LD_ADDR_EXP 60
53586: PUSH
53587: LD_INT 0
53589: ST_TO_ADDR
// sSlow := false ;
53590: LD_ADDR_EXP 61
53594: PUSH
53595: LD_INT 0
53597: ST_TO_ADDR
// sLack := false ;
53598: LD_ADDR_EXP 62
53602: PUSH
53603: LD_INT 0
53605: ST_TO_ADDR
// sTank := false ;
53606: LD_ADDR_EXP 64
53610: PUSH
53611: LD_INT 0
53613: ST_TO_ADDR
// sRemote := false ;
53614: LD_ADDR_EXP 65
53618: PUSH
53619: LD_INT 0
53621: ST_TO_ADDR
// sPowell := false ;
53622: LD_ADDR_EXP 66
53626: PUSH
53627: LD_INT 0
53629: ST_TO_ADDR
// sTeleport := false ;
53630: LD_ADDR_EXP 69
53634: PUSH
53635: LD_INT 0
53637: ST_TO_ADDR
// sOilTower := false ;
53638: LD_ADDR_EXP 71
53642: PUSH
53643: LD_INT 0
53645: ST_TO_ADDR
// sShovel := false ;
53646: LD_ADDR_EXP 72
53650: PUSH
53651: LD_INT 0
53653: ST_TO_ADDR
// sSheik := false ;
53654: LD_ADDR_EXP 73
53658: PUSH
53659: LD_INT 0
53661: ST_TO_ADDR
// sEarthquake := false ;
53662: LD_ADDR_EXP 75
53666: PUSH
53667: LD_INT 0
53669: ST_TO_ADDR
// sAI := false ;
53670: LD_ADDR_EXP 76
53674: PUSH
53675: LD_INT 0
53677: ST_TO_ADDR
// sCargo := false ;
53678: LD_ADDR_EXP 79
53682: PUSH
53683: LD_INT 0
53685: ST_TO_ADDR
// sDLaser := false ;
53686: LD_ADDR_EXP 80
53690: PUSH
53691: LD_INT 0
53693: ST_TO_ADDR
// sExchange := false ;
53694: LD_ADDR_EXP 81
53698: PUSH
53699: LD_INT 0
53701: ST_TO_ADDR
// sFac := false ;
53702: LD_ADDR_EXP 82
53706: PUSH
53707: LD_INT 0
53709: ST_TO_ADDR
// sPower := false ;
53710: LD_ADDR_EXP 83
53714: PUSH
53715: LD_INT 0
53717: ST_TO_ADDR
// sRandom := false ;
53718: LD_ADDR_EXP 84
53722: PUSH
53723: LD_INT 0
53725: ST_TO_ADDR
// sShield := false ;
53726: LD_ADDR_EXP 85
53730: PUSH
53731: LD_INT 0
53733: ST_TO_ADDR
// sTime := false ;
53734: LD_ADDR_EXP 86
53738: PUSH
53739: LD_INT 0
53741: ST_TO_ADDR
// sTools := false ;
53742: LD_ADDR_EXP 87
53746: PUSH
53747: LD_INT 0
53749: ST_TO_ADDR
// sSold := false ;
53750: LD_ADDR_EXP 52
53754: PUSH
53755: LD_INT 0
53757: ST_TO_ADDR
// sDiff := false ;
53758: LD_ADDR_EXP 53
53762: PUSH
53763: LD_INT 0
53765: ST_TO_ADDR
// sFog := false ;
53766: LD_ADDR_EXP 56
53770: PUSH
53771: LD_INT 0
53773: ST_TO_ADDR
// sReset := false ;
53774: LD_ADDR_EXP 57
53778: PUSH
53779: LD_INT 0
53781: ST_TO_ADDR
// sSun := false ;
53782: LD_ADDR_EXP 58
53786: PUSH
53787: LD_INT 0
53789: ST_TO_ADDR
// sTiger := false ;
53790: LD_ADDR_EXP 54
53794: PUSH
53795: LD_INT 0
53797: ST_TO_ADDR
// sBomb := false ;
53798: LD_ADDR_EXP 55
53802: PUSH
53803: LD_INT 0
53805: ST_TO_ADDR
// sWound := false ;
53806: LD_ADDR_EXP 63
53810: PUSH
53811: LD_INT 0
53813: ST_TO_ADDR
// sBetray := false ;
53814: LD_ADDR_EXP 67
53818: PUSH
53819: LD_INT 0
53821: ST_TO_ADDR
// sContamin := false ;
53822: LD_ADDR_EXP 68
53826: PUSH
53827: LD_INT 0
53829: ST_TO_ADDR
// sOil := false ;
53830: LD_ADDR_EXP 70
53834: PUSH
53835: LD_INT 0
53837: ST_TO_ADDR
// sStu := false ;
53838: LD_ADDR_EXP 74
53842: PUSH
53843: LD_INT 0
53845: ST_TO_ADDR
// sBazooka := false ;
53846: LD_ADDR_EXP 77
53850: PUSH
53851: LD_INT 0
53853: ST_TO_ADDR
// sMortar := false ;
53854: LD_ADDR_EXP 78
53858: PUSH
53859: LD_INT 0
53861: ST_TO_ADDR
// sRanger := false ;
53862: LD_ADDR_EXP 88
53866: PUSH
53867: LD_INT 0
53869: ST_TO_ADDR
// sComputer := false ;
53870: LD_ADDR_EXP 89
53874: PUSH
53875: LD_INT 0
53877: ST_TO_ADDR
// s30 := false ;
53878: LD_ADDR_EXP 90
53882: PUSH
53883: LD_INT 0
53885: ST_TO_ADDR
// s60 := false ;
53886: LD_ADDR_EXP 91
53890: PUSH
53891: LD_INT 0
53893: ST_TO_ADDR
// end ;
53894: LD_VAR 0 1
53898: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
53899: LD_INT 0
53901: PPUSH
53902: PPUSH
53903: PPUSH
53904: PPUSH
53905: PPUSH
53906: PPUSH
53907: PPUSH
// result := [ ] ;
53908: LD_ADDR_VAR 0 2
53912: PUSH
53913: EMPTY
53914: ST_TO_ADDR
// if campaign_id = 1 then
53915: LD_OWVAR 69
53919: PUSH
53920: LD_INT 1
53922: EQUAL
53923: IFFALSE 57089
// begin case mission_number of 1 :
53925: LD_OWVAR 70
53929: PUSH
53930: LD_INT 1
53932: DOUBLE
53933: EQUAL
53934: IFTRUE 53938
53936: GO 54014
53938: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
53939: LD_ADDR_VAR 0 2
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: LD_INT 4
53949: PUSH
53950: LD_INT 11
53952: PUSH
53953: LD_INT 12
53955: PUSH
53956: LD_INT 15
53958: PUSH
53959: LD_INT 16
53961: PUSH
53962: LD_INT 22
53964: PUSH
53965: LD_INT 23
53967: PUSH
53968: LD_INT 26
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 101
53984: PUSH
53985: LD_INT 102
53987: PUSH
53988: LD_INT 106
53990: PUSH
53991: LD_INT 116
53993: PUSH
53994: LD_INT 117
53996: PUSH
53997: LD_INT 118
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: ST_TO_ADDR
54012: GO 57087
54014: LD_INT 2
54016: DOUBLE
54017: EQUAL
54018: IFTRUE 54022
54020: GO 54106
54022: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
54023: LD_ADDR_VAR 0 2
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: LD_INT 4
54033: PUSH
54034: LD_INT 11
54036: PUSH
54037: LD_INT 12
54039: PUSH
54040: LD_INT 15
54042: PUSH
54043: LD_INT 16
54045: PUSH
54046: LD_INT 22
54048: PUSH
54049: LD_INT 23
54051: PUSH
54052: LD_INT 26
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 101
54068: PUSH
54069: LD_INT 102
54071: PUSH
54072: LD_INT 105
54074: PUSH
54075: LD_INT 106
54077: PUSH
54078: LD_INT 108
54080: PUSH
54081: LD_INT 116
54083: PUSH
54084: LD_INT 117
54086: PUSH
54087: LD_INT 118
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: ST_TO_ADDR
54104: GO 57087
54106: LD_INT 3
54108: DOUBLE
54109: EQUAL
54110: IFTRUE 54114
54112: GO 54202
54114: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
54115: LD_ADDR_VAR 0 2
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: LD_INT 4
54125: PUSH
54126: LD_INT 5
54128: PUSH
54129: LD_INT 11
54131: PUSH
54132: LD_INT 12
54134: PUSH
54135: LD_INT 15
54137: PUSH
54138: LD_INT 16
54140: PUSH
54141: LD_INT 22
54143: PUSH
54144: LD_INT 26
54146: PUSH
54147: LD_INT 36
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 101
54164: PUSH
54165: LD_INT 102
54167: PUSH
54168: LD_INT 105
54170: PUSH
54171: LD_INT 106
54173: PUSH
54174: LD_INT 108
54176: PUSH
54177: LD_INT 116
54179: PUSH
54180: LD_INT 117
54182: PUSH
54183: LD_INT 118
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: ST_TO_ADDR
54200: GO 57087
54202: LD_INT 4
54204: DOUBLE
54205: EQUAL
54206: IFTRUE 54210
54208: GO 54306
54210: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
54211: LD_ADDR_VAR 0 2
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: LD_INT 4
54221: PUSH
54222: LD_INT 5
54224: PUSH
54225: LD_INT 8
54227: PUSH
54228: LD_INT 11
54230: PUSH
54231: LD_INT 12
54233: PUSH
54234: LD_INT 15
54236: PUSH
54237: LD_INT 16
54239: PUSH
54240: LD_INT 22
54242: PUSH
54243: LD_INT 23
54245: PUSH
54246: LD_INT 26
54248: PUSH
54249: LD_INT 36
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 101
54268: PUSH
54269: LD_INT 102
54271: PUSH
54272: LD_INT 105
54274: PUSH
54275: LD_INT 106
54277: PUSH
54278: LD_INT 108
54280: PUSH
54281: LD_INT 116
54283: PUSH
54284: LD_INT 117
54286: PUSH
54287: LD_INT 118
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: ST_TO_ADDR
54304: GO 57087
54306: LD_INT 5
54308: DOUBLE
54309: EQUAL
54310: IFTRUE 54314
54312: GO 54426
54314: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
54315: LD_ADDR_VAR 0 2
54319: PUSH
54320: LD_INT 2
54322: PUSH
54323: LD_INT 4
54325: PUSH
54326: LD_INT 5
54328: PUSH
54329: LD_INT 6
54331: PUSH
54332: LD_INT 8
54334: PUSH
54335: LD_INT 11
54337: PUSH
54338: LD_INT 12
54340: PUSH
54341: LD_INT 15
54343: PUSH
54344: LD_INT 16
54346: PUSH
54347: LD_INT 22
54349: PUSH
54350: LD_INT 23
54352: PUSH
54353: LD_INT 25
54355: PUSH
54356: LD_INT 26
54358: PUSH
54359: LD_INT 36
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 101
54380: PUSH
54381: LD_INT 102
54383: PUSH
54384: LD_INT 105
54386: PUSH
54387: LD_INT 106
54389: PUSH
54390: LD_INT 108
54392: PUSH
54393: LD_INT 109
54395: PUSH
54396: LD_INT 112
54398: PUSH
54399: LD_INT 116
54401: PUSH
54402: LD_INT 117
54404: PUSH
54405: LD_INT 118
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: ST_TO_ADDR
54424: GO 57087
54426: LD_INT 6
54428: DOUBLE
54429: EQUAL
54430: IFTRUE 54434
54432: GO 54566
54434: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
54435: LD_ADDR_VAR 0 2
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: LD_INT 4
54445: PUSH
54446: LD_INT 5
54448: PUSH
54449: LD_INT 6
54451: PUSH
54452: LD_INT 8
54454: PUSH
54455: LD_INT 11
54457: PUSH
54458: LD_INT 12
54460: PUSH
54461: LD_INT 15
54463: PUSH
54464: LD_INT 16
54466: PUSH
54467: LD_INT 20
54469: PUSH
54470: LD_INT 21
54472: PUSH
54473: LD_INT 22
54475: PUSH
54476: LD_INT 23
54478: PUSH
54479: LD_INT 25
54481: PUSH
54482: LD_INT 26
54484: PUSH
54485: LD_INT 30
54487: PUSH
54488: LD_INT 31
54490: PUSH
54491: LD_INT 32
54493: PUSH
54494: LD_INT 36
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 101
54520: PUSH
54521: LD_INT 102
54523: PUSH
54524: LD_INT 105
54526: PUSH
54527: LD_INT 106
54529: PUSH
54530: LD_INT 108
54532: PUSH
54533: LD_INT 109
54535: PUSH
54536: LD_INT 112
54538: PUSH
54539: LD_INT 116
54541: PUSH
54542: LD_INT 117
54544: PUSH
54545: LD_INT 118
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: ST_TO_ADDR
54564: GO 57087
54566: LD_INT 7
54568: DOUBLE
54569: EQUAL
54570: IFTRUE 54574
54572: GO 54686
54574: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
54575: LD_ADDR_VAR 0 2
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: LD_INT 4
54585: PUSH
54586: LD_INT 5
54588: PUSH
54589: LD_INT 7
54591: PUSH
54592: LD_INT 11
54594: PUSH
54595: LD_INT 12
54597: PUSH
54598: LD_INT 15
54600: PUSH
54601: LD_INT 16
54603: PUSH
54604: LD_INT 20
54606: PUSH
54607: LD_INT 21
54609: PUSH
54610: LD_INT 22
54612: PUSH
54613: LD_INT 23
54615: PUSH
54616: LD_INT 25
54618: PUSH
54619: LD_INT 26
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 101
54640: PUSH
54641: LD_INT 102
54643: PUSH
54644: LD_INT 103
54646: PUSH
54647: LD_INT 105
54649: PUSH
54650: LD_INT 106
54652: PUSH
54653: LD_INT 108
54655: PUSH
54656: LD_INT 112
54658: PUSH
54659: LD_INT 116
54661: PUSH
54662: LD_INT 117
54664: PUSH
54665: LD_INT 118
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: ST_TO_ADDR
54684: GO 57087
54686: LD_INT 8
54688: DOUBLE
54689: EQUAL
54690: IFTRUE 54694
54692: GO 54834
54694: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
54695: LD_ADDR_VAR 0 2
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: LD_INT 4
54705: PUSH
54706: LD_INT 5
54708: PUSH
54709: LD_INT 6
54711: PUSH
54712: LD_INT 7
54714: PUSH
54715: LD_INT 8
54717: PUSH
54718: LD_INT 11
54720: PUSH
54721: LD_INT 12
54723: PUSH
54724: LD_INT 15
54726: PUSH
54727: LD_INT 16
54729: PUSH
54730: LD_INT 20
54732: PUSH
54733: LD_INT 21
54735: PUSH
54736: LD_INT 22
54738: PUSH
54739: LD_INT 23
54741: PUSH
54742: LD_INT 25
54744: PUSH
54745: LD_INT 26
54747: PUSH
54748: LD_INT 30
54750: PUSH
54751: LD_INT 31
54753: PUSH
54754: LD_INT 32
54756: PUSH
54757: LD_INT 36
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 101
54784: PUSH
54785: LD_INT 102
54787: PUSH
54788: LD_INT 103
54790: PUSH
54791: LD_INT 105
54793: PUSH
54794: LD_INT 106
54796: PUSH
54797: LD_INT 108
54799: PUSH
54800: LD_INT 109
54802: PUSH
54803: LD_INT 112
54805: PUSH
54806: LD_INT 116
54808: PUSH
54809: LD_INT 117
54811: PUSH
54812: LD_INT 118
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: ST_TO_ADDR
54832: GO 57087
54834: LD_INT 9
54836: DOUBLE
54837: EQUAL
54838: IFTRUE 54842
54840: GO 54990
54842: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
54843: LD_ADDR_VAR 0 2
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: LD_INT 4
54853: PUSH
54854: LD_INT 5
54856: PUSH
54857: LD_INT 6
54859: PUSH
54860: LD_INT 7
54862: PUSH
54863: LD_INT 8
54865: PUSH
54866: LD_INT 11
54868: PUSH
54869: LD_INT 12
54871: PUSH
54872: LD_INT 15
54874: PUSH
54875: LD_INT 16
54877: PUSH
54878: LD_INT 20
54880: PUSH
54881: LD_INT 21
54883: PUSH
54884: LD_INT 22
54886: PUSH
54887: LD_INT 23
54889: PUSH
54890: LD_INT 25
54892: PUSH
54893: LD_INT 26
54895: PUSH
54896: LD_INT 28
54898: PUSH
54899: LD_INT 30
54901: PUSH
54902: LD_INT 31
54904: PUSH
54905: LD_INT 32
54907: PUSH
54908: LD_INT 36
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 101
54936: PUSH
54937: LD_INT 102
54939: PUSH
54940: LD_INT 103
54942: PUSH
54943: LD_INT 105
54945: PUSH
54946: LD_INT 106
54948: PUSH
54949: LD_INT 108
54951: PUSH
54952: LD_INT 109
54954: PUSH
54955: LD_INT 112
54957: PUSH
54958: LD_INT 114
54960: PUSH
54961: LD_INT 116
54963: PUSH
54964: LD_INT 117
54966: PUSH
54967: LD_INT 118
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: ST_TO_ADDR
54988: GO 57087
54990: LD_INT 10
54992: DOUBLE
54993: EQUAL
54994: IFTRUE 54998
54996: GO 55194
54998: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
54999: LD_ADDR_VAR 0 2
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: LD_INT 4
55009: PUSH
55010: LD_INT 5
55012: PUSH
55013: LD_INT 6
55015: PUSH
55016: LD_INT 7
55018: PUSH
55019: LD_INT 8
55021: PUSH
55022: LD_INT 9
55024: PUSH
55025: LD_INT 10
55027: PUSH
55028: LD_INT 11
55030: PUSH
55031: LD_INT 12
55033: PUSH
55034: LD_INT 13
55036: PUSH
55037: LD_INT 14
55039: PUSH
55040: LD_INT 15
55042: PUSH
55043: LD_INT 16
55045: PUSH
55046: LD_INT 17
55048: PUSH
55049: LD_INT 18
55051: PUSH
55052: LD_INT 19
55054: PUSH
55055: LD_INT 20
55057: PUSH
55058: LD_INT 21
55060: PUSH
55061: LD_INT 22
55063: PUSH
55064: LD_INT 23
55066: PUSH
55067: LD_INT 24
55069: PUSH
55070: LD_INT 25
55072: PUSH
55073: LD_INT 26
55075: PUSH
55076: LD_INT 28
55078: PUSH
55079: LD_INT 30
55081: PUSH
55082: LD_INT 31
55084: PUSH
55085: LD_INT 32
55087: PUSH
55088: LD_INT 36
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 101
55124: PUSH
55125: LD_INT 102
55127: PUSH
55128: LD_INT 103
55130: PUSH
55131: LD_INT 104
55133: PUSH
55134: LD_INT 105
55136: PUSH
55137: LD_INT 106
55139: PUSH
55140: LD_INT 107
55142: PUSH
55143: LD_INT 108
55145: PUSH
55146: LD_INT 109
55148: PUSH
55149: LD_INT 110
55151: PUSH
55152: LD_INT 111
55154: PUSH
55155: LD_INT 112
55157: PUSH
55158: LD_INT 114
55160: PUSH
55161: LD_INT 116
55163: PUSH
55164: LD_INT 117
55166: PUSH
55167: LD_INT 118
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: ST_TO_ADDR
55192: GO 57087
55194: LD_INT 11
55196: DOUBLE
55197: EQUAL
55198: IFTRUE 55202
55200: GO 55406
55202: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
55203: LD_ADDR_VAR 0 2
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: LD_INT 4
55216: PUSH
55217: LD_INT 5
55219: PUSH
55220: LD_INT 6
55222: PUSH
55223: LD_INT 7
55225: PUSH
55226: LD_INT 8
55228: PUSH
55229: LD_INT 9
55231: PUSH
55232: LD_INT 10
55234: PUSH
55235: LD_INT 11
55237: PUSH
55238: LD_INT 12
55240: PUSH
55241: LD_INT 13
55243: PUSH
55244: LD_INT 14
55246: PUSH
55247: LD_INT 15
55249: PUSH
55250: LD_INT 16
55252: PUSH
55253: LD_INT 17
55255: PUSH
55256: LD_INT 18
55258: PUSH
55259: LD_INT 19
55261: PUSH
55262: LD_INT 20
55264: PUSH
55265: LD_INT 21
55267: PUSH
55268: LD_INT 22
55270: PUSH
55271: LD_INT 23
55273: PUSH
55274: LD_INT 24
55276: PUSH
55277: LD_INT 25
55279: PUSH
55280: LD_INT 26
55282: PUSH
55283: LD_INT 28
55285: PUSH
55286: LD_INT 30
55288: PUSH
55289: LD_INT 31
55291: PUSH
55292: LD_INT 32
55294: PUSH
55295: LD_INT 34
55297: PUSH
55298: LD_INT 36
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 101
55336: PUSH
55337: LD_INT 102
55339: PUSH
55340: LD_INT 103
55342: PUSH
55343: LD_INT 104
55345: PUSH
55346: LD_INT 105
55348: PUSH
55349: LD_INT 106
55351: PUSH
55352: LD_INT 107
55354: PUSH
55355: LD_INT 108
55357: PUSH
55358: LD_INT 109
55360: PUSH
55361: LD_INT 110
55363: PUSH
55364: LD_INT 111
55366: PUSH
55367: LD_INT 112
55369: PUSH
55370: LD_INT 114
55372: PUSH
55373: LD_INT 116
55375: PUSH
55376: LD_INT 117
55378: PUSH
55379: LD_INT 118
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: ST_TO_ADDR
55404: GO 57087
55406: LD_INT 12
55408: DOUBLE
55409: EQUAL
55410: IFTRUE 55414
55412: GO 55634
55414: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
55415: LD_ADDR_VAR 0 2
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 3
55428: PUSH
55429: LD_INT 4
55431: PUSH
55432: LD_INT 5
55434: PUSH
55435: LD_INT 6
55437: PUSH
55438: LD_INT 7
55440: PUSH
55441: LD_INT 8
55443: PUSH
55444: LD_INT 9
55446: PUSH
55447: LD_INT 10
55449: PUSH
55450: LD_INT 11
55452: PUSH
55453: LD_INT 12
55455: PUSH
55456: LD_INT 13
55458: PUSH
55459: LD_INT 14
55461: PUSH
55462: LD_INT 15
55464: PUSH
55465: LD_INT 16
55467: PUSH
55468: LD_INT 17
55470: PUSH
55471: LD_INT 18
55473: PUSH
55474: LD_INT 19
55476: PUSH
55477: LD_INT 20
55479: PUSH
55480: LD_INT 21
55482: PUSH
55483: LD_INT 22
55485: PUSH
55486: LD_INT 23
55488: PUSH
55489: LD_INT 24
55491: PUSH
55492: LD_INT 25
55494: PUSH
55495: LD_INT 26
55497: PUSH
55498: LD_INT 27
55500: PUSH
55501: LD_INT 28
55503: PUSH
55504: LD_INT 30
55506: PUSH
55507: LD_INT 31
55509: PUSH
55510: LD_INT 32
55512: PUSH
55513: LD_INT 33
55515: PUSH
55516: LD_INT 34
55518: PUSH
55519: LD_INT 36
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 101
55560: PUSH
55561: LD_INT 102
55563: PUSH
55564: LD_INT 103
55566: PUSH
55567: LD_INT 104
55569: PUSH
55570: LD_INT 105
55572: PUSH
55573: LD_INT 106
55575: PUSH
55576: LD_INT 107
55578: PUSH
55579: LD_INT 108
55581: PUSH
55582: LD_INT 109
55584: PUSH
55585: LD_INT 110
55587: PUSH
55588: LD_INT 111
55590: PUSH
55591: LD_INT 112
55593: PUSH
55594: LD_INT 113
55596: PUSH
55597: LD_INT 114
55599: PUSH
55600: LD_INT 116
55602: PUSH
55603: LD_INT 117
55605: PUSH
55606: LD_INT 118
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: ST_TO_ADDR
55632: GO 57087
55634: LD_INT 13
55636: DOUBLE
55637: EQUAL
55638: IFTRUE 55642
55640: GO 55850
55642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
55643: LD_ADDR_VAR 0 2
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: LD_INT 4
55659: PUSH
55660: LD_INT 5
55662: PUSH
55663: LD_INT 8
55665: PUSH
55666: LD_INT 9
55668: PUSH
55669: LD_INT 10
55671: PUSH
55672: LD_INT 11
55674: PUSH
55675: LD_INT 12
55677: PUSH
55678: LD_INT 14
55680: PUSH
55681: LD_INT 15
55683: PUSH
55684: LD_INT 16
55686: PUSH
55687: LD_INT 17
55689: PUSH
55690: LD_INT 18
55692: PUSH
55693: LD_INT 19
55695: PUSH
55696: LD_INT 20
55698: PUSH
55699: LD_INT 21
55701: PUSH
55702: LD_INT 22
55704: PUSH
55705: LD_INT 23
55707: PUSH
55708: LD_INT 24
55710: PUSH
55711: LD_INT 25
55713: PUSH
55714: LD_INT 26
55716: PUSH
55717: LD_INT 27
55719: PUSH
55720: LD_INT 28
55722: PUSH
55723: LD_INT 30
55725: PUSH
55726: LD_INT 31
55728: PUSH
55729: LD_INT 32
55731: PUSH
55732: LD_INT 33
55734: PUSH
55735: LD_INT 34
55737: PUSH
55738: LD_INT 36
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 101
55776: PUSH
55777: LD_INT 102
55779: PUSH
55780: LD_INT 103
55782: PUSH
55783: LD_INT 104
55785: PUSH
55786: LD_INT 105
55788: PUSH
55789: LD_INT 106
55791: PUSH
55792: LD_INT 107
55794: PUSH
55795: LD_INT 108
55797: PUSH
55798: LD_INT 109
55800: PUSH
55801: LD_INT 110
55803: PUSH
55804: LD_INT 111
55806: PUSH
55807: LD_INT 112
55809: PUSH
55810: LD_INT 113
55812: PUSH
55813: LD_INT 114
55815: PUSH
55816: LD_INT 116
55818: PUSH
55819: LD_INT 117
55821: PUSH
55822: LD_INT 118
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: ST_TO_ADDR
55848: GO 57087
55850: LD_INT 14
55852: DOUBLE
55853: EQUAL
55854: IFTRUE 55858
55856: GO 56082
55858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
55859: LD_ADDR_VAR 0 2
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: LD_INT 4
55875: PUSH
55876: LD_INT 5
55878: PUSH
55879: LD_INT 6
55881: PUSH
55882: LD_INT 7
55884: PUSH
55885: LD_INT 8
55887: PUSH
55888: LD_INT 9
55890: PUSH
55891: LD_INT 10
55893: PUSH
55894: LD_INT 11
55896: PUSH
55897: LD_INT 12
55899: PUSH
55900: LD_INT 13
55902: PUSH
55903: LD_INT 14
55905: PUSH
55906: LD_INT 15
55908: PUSH
55909: LD_INT 16
55911: PUSH
55912: LD_INT 17
55914: PUSH
55915: LD_INT 18
55917: PUSH
55918: LD_INT 19
55920: PUSH
55921: LD_INT 20
55923: PUSH
55924: LD_INT 21
55926: PUSH
55927: LD_INT 22
55929: PUSH
55930: LD_INT 23
55932: PUSH
55933: LD_INT 24
55935: PUSH
55936: LD_INT 25
55938: PUSH
55939: LD_INT 26
55941: PUSH
55942: LD_INT 27
55944: PUSH
55945: LD_INT 28
55947: PUSH
55948: LD_INT 29
55950: PUSH
55951: LD_INT 30
55953: PUSH
55954: LD_INT 31
55956: PUSH
55957: LD_INT 32
55959: PUSH
55960: LD_INT 33
55962: PUSH
55963: LD_INT 34
55965: PUSH
55966: LD_INT 36
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 101
56008: PUSH
56009: LD_INT 102
56011: PUSH
56012: LD_INT 103
56014: PUSH
56015: LD_INT 104
56017: PUSH
56018: LD_INT 105
56020: PUSH
56021: LD_INT 106
56023: PUSH
56024: LD_INT 107
56026: PUSH
56027: LD_INT 108
56029: PUSH
56030: LD_INT 109
56032: PUSH
56033: LD_INT 110
56035: PUSH
56036: LD_INT 111
56038: PUSH
56039: LD_INT 112
56041: PUSH
56042: LD_INT 113
56044: PUSH
56045: LD_INT 114
56047: PUSH
56048: LD_INT 116
56050: PUSH
56051: LD_INT 117
56053: PUSH
56054: LD_INT 118
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: ST_TO_ADDR
56080: GO 57087
56082: LD_INT 15
56084: DOUBLE
56085: EQUAL
56086: IFTRUE 56090
56088: GO 56314
56090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
56091: LD_ADDR_VAR 0 2
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: LD_INT 3
56104: PUSH
56105: LD_INT 4
56107: PUSH
56108: LD_INT 5
56110: PUSH
56111: LD_INT 6
56113: PUSH
56114: LD_INT 7
56116: PUSH
56117: LD_INT 8
56119: PUSH
56120: LD_INT 9
56122: PUSH
56123: LD_INT 10
56125: PUSH
56126: LD_INT 11
56128: PUSH
56129: LD_INT 12
56131: PUSH
56132: LD_INT 13
56134: PUSH
56135: LD_INT 14
56137: PUSH
56138: LD_INT 15
56140: PUSH
56141: LD_INT 16
56143: PUSH
56144: LD_INT 17
56146: PUSH
56147: LD_INT 18
56149: PUSH
56150: LD_INT 19
56152: PUSH
56153: LD_INT 20
56155: PUSH
56156: LD_INT 21
56158: PUSH
56159: LD_INT 22
56161: PUSH
56162: LD_INT 23
56164: PUSH
56165: LD_INT 24
56167: PUSH
56168: LD_INT 25
56170: PUSH
56171: LD_INT 26
56173: PUSH
56174: LD_INT 27
56176: PUSH
56177: LD_INT 28
56179: PUSH
56180: LD_INT 29
56182: PUSH
56183: LD_INT 30
56185: PUSH
56186: LD_INT 31
56188: PUSH
56189: LD_INT 32
56191: PUSH
56192: LD_INT 33
56194: PUSH
56195: LD_INT 34
56197: PUSH
56198: LD_INT 36
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 101
56240: PUSH
56241: LD_INT 102
56243: PUSH
56244: LD_INT 103
56246: PUSH
56247: LD_INT 104
56249: PUSH
56250: LD_INT 105
56252: PUSH
56253: LD_INT 106
56255: PUSH
56256: LD_INT 107
56258: PUSH
56259: LD_INT 108
56261: PUSH
56262: LD_INT 109
56264: PUSH
56265: LD_INT 110
56267: PUSH
56268: LD_INT 111
56270: PUSH
56271: LD_INT 112
56273: PUSH
56274: LD_INT 113
56276: PUSH
56277: LD_INT 114
56279: PUSH
56280: LD_INT 116
56282: PUSH
56283: LD_INT 117
56285: PUSH
56286: LD_INT 118
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: ST_TO_ADDR
56312: GO 57087
56314: LD_INT 16
56316: DOUBLE
56317: EQUAL
56318: IFTRUE 56322
56320: GO 56458
56322: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
56323: LD_ADDR_VAR 0 2
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: LD_INT 4
56333: PUSH
56334: LD_INT 5
56336: PUSH
56337: LD_INT 7
56339: PUSH
56340: LD_INT 11
56342: PUSH
56343: LD_INT 12
56345: PUSH
56346: LD_INT 15
56348: PUSH
56349: LD_INT 16
56351: PUSH
56352: LD_INT 20
56354: PUSH
56355: LD_INT 21
56357: PUSH
56358: LD_INT 22
56360: PUSH
56361: LD_INT 23
56363: PUSH
56364: LD_INT 25
56366: PUSH
56367: LD_INT 26
56369: PUSH
56370: LD_INT 30
56372: PUSH
56373: LD_INT 31
56375: PUSH
56376: LD_INT 32
56378: PUSH
56379: LD_INT 33
56381: PUSH
56382: LD_INT 34
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 101
56408: PUSH
56409: LD_INT 102
56411: PUSH
56412: LD_INT 103
56414: PUSH
56415: LD_INT 106
56417: PUSH
56418: LD_INT 108
56420: PUSH
56421: LD_INT 112
56423: PUSH
56424: LD_INT 113
56426: PUSH
56427: LD_INT 114
56429: PUSH
56430: LD_INT 116
56432: PUSH
56433: LD_INT 117
56435: PUSH
56436: LD_INT 118
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: ST_TO_ADDR
56456: GO 57087
56458: LD_INT 17
56460: DOUBLE
56461: EQUAL
56462: IFTRUE 56466
56464: GO 56690
56466: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
56467: LD_ADDR_VAR 0 2
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: LD_INT 3
56480: PUSH
56481: LD_INT 4
56483: PUSH
56484: LD_INT 5
56486: PUSH
56487: LD_INT 6
56489: PUSH
56490: LD_INT 7
56492: PUSH
56493: LD_INT 8
56495: PUSH
56496: LD_INT 9
56498: PUSH
56499: LD_INT 10
56501: PUSH
56502: LD_INT 11
56504: PUSH
56505: LD_INT 12
56507: PUSH
56508: LD_INT 13
56510: PUSH
56511: LD_INT 14
56513: PUSH
56514: LD_INT 15
56516: PUSH
56517: LD_INT 16
56519: PUSH
56520: LD_INT 17
56522: PUSH
56523: LD_INT 18
56525: PUSH
56526: LD_INT 19
56528: PUSH
56529: LD_INT 20
56531: PUSH
56532: LD_INT 21
56534: PUSH
56535: LD_INT 22
56537: PUSH
56538: LD_INT 23
56540: PUSH
56541: LD_INT 24
56543: PUSH
56544: LD_INT 25
56546: PUSH
56547: LD_INT 26
56549: PUSH
56550: LD_INT 27
56552: PUSH
56553: LD_INT 28
56555: PUSH
56556: LD_INT 29
56558: PUSH
56559: LD_INT 30
56561: PUSH
56562: LD_INT 31
56564: PUSH
56565: LD_INT 32
56567: PUSH
56568: LD_INT 33
56570: PUSH
56571: LD_INT 34
56573: PUSH
56574: LD_INT 36
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 101
56616: PUSH
56617: LD_INT 102
56619: PUSH
56620: LD_INT 103
56622: PUSH
56623: LD_INT 104
56625: PUSH
56626: LD_INT 105
56628: PUSH
56629: LD_INT 106
56631: PUSH
56632: LD_INT 107
56634: PUSH
56635: LD_INT 108
56637: PUSH
56638: LD_INT 109
56640: PUSH
56641: LD_INT 110
56643: PUSH
56644: LD_INT 111
56646: PUSH
56647: LD_INT 112
56649: PUSH
56650: LD_INT 113
56652: PUSH
56653: LD_INT 114
56655: PUSH
56656: LD_INT 116
56658: PUSH
56659: LD_INT 117
56661: PUSH
56662: LD_INT 118
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: ST_TO_ADDR
56688: GO 57087
56690: LD_INT 18
56692: DOUBLE
56693: EQUAL
56694: IFTRUE 56698
56696: GO 56846
56698: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
56699: LD_ADDR_VAR 0 2
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: LD_INT 4
56709: PUSH
56710: LD_INT 5
56712: PUSH
56713: LD_INT 7
56715: PUSH
56716: LD_INT 11
56718: PUSH
56719: LD_INT 12
56721: PUSH
56722: LD_INT 15
56724: PUSH
56725: LD_INT 16
56727: PUSH
56728: LD_INT 20
56730: PUSH
56731: LD_INT 21
56733: PUSH
56734: LD_INT 22
56736: PUSH
56737: LD_INT 23
56739: PUSH
56740: LD_INT 25
56742: PUSH
56743: LD_INT 26
56745: PUSH
56746: LD_INT 30
56748: PUSH
56749: LD_INT 31
56751: PUSH
56752: LD_INT 32
56754: PUSH
56755: LD_INT 33
56757: PUSH
56758: LD_INT 34
56760: PUSH
56761: LD_INT 35
56763: PUSH
56764: LD_INT 36
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 101
56792: PUSH
56793: LD_INT 102
56795: PUSH
56796: LD_INT 103
56798: PUSH
56799: LD_INT 106
56801: PUSH
56802: LD_INT 108
56804: PUSH
56805: LD_INT 112
56807: PUSH
56808: LD_INT 113
56810: PUSH
56811: LD_INT 114
56813: PUSH
56814: LD_INT 115
56816: PUSH
56817: LD_INT 116
56819: PUSH
56820: LD_INT 117
56822: PUSH
56823: LD_INT 118
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: ST_TO_ADDR
56844: GO 57087
56846: LD_INT 19
56848: DOUBLE
56849: EQUAL
56850: IFTRUE 56854
56852: GO 57086
56854: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
56855: LD_ADDR_VAR 0 2
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: LD_INT 3
56868: PUSH
56869: LD_INT 4
56871: PUSH
56872: LD_INT 5
56874: PUSH
56875: LD_INT 6
56877: PUSH
56878: LD_INT 7
56880: PUSH
56881: LD_INT 8
56883: PUSH
56884: LD_INT 9
56886: PUSH
56887: LD_INT 10
56889: PUSH
56890: LD_INT 11
56892: PUSH
56893: LD_INT 12
56895: PUSH
56896: LD_INT 13
56898: PUSH
56899: LD_INT 14
56901: PUSH
56902: LD_INT 15
56904: PUSH
56905: LD_INT 16
56907: PUSH
56908: LD_INT 17
56910: PUSH
56911: LD_INT 18
56913: PUSH
56914: LD_INT 19
56916: PUSH
56917: LD_INT 20
56919: PUSH
56920: LD_INT 21
56922: PUSH
56923: LD_INT 22
56925: PUSH
56926: LD_INT 23
56928: PUSH
56929: LD_INT 24
56931: PUSH
56932: LD_INT 25
56934: PUSH
56935: LD_INT 26
56937: PUSH
56938: LD_INT 27
56940: PUSH
56941: LD_INT 28
56943: PUSH
56944: LD_INT 29
56946: PUSH
56947: LD_INT 30
56949: PUSH
56950: LD_INT 31
56952: PUSH
56953: LD_INT 32
56955: PUSH
56956: LD_INT 33
56958: PUSH
56959: LD_INT 34
56961: PUSH
56962: LD_INT 35
56964: PUSH
56965: LD_INT 36
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 101
57008: PUSH
57009: LD_INT 102
57011: PUSH
57012: LD_INT 103
57014: PUSH
57015: LD_INT 104
57017: PUSH
57018: LD_INT 105
57020: PUSH
57021: LD_INT 106
57023: PUSH
57024: LD_INT 107
57026: PUSH
57027: LD_INT 108
57029: PUSH
57030: LD_INT 109
57032: PUSH
57033: LD_INT 110
57035: PUSH
57036: LD_INT 111
57038: PUSH
57039: LD_INT 112
57041: PUSH
57042: LD_INT 113
57044: PUSH
57045: LD_INT 114
57047: PUSH
57048: LD_INT 115
57050: PUSH
57051: LD_INT 116
57053: PUSH
57054: LD_INT 117
57056: PUSH
57057: LD_INT 118
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: ST_TO_ADDR
57084: GO 57087
57086: POP
// end else
57087: GO 57318
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
57089: LD_ADDR_VAR 0 2
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: LD_INT 3
57102: PUSH
57103: LD_INT 4
57105: PUSH
57106: LD_INT 5
57108: PUSH
57109: LD_INT 6
57111: PUSH
57112: LD_INT 7
57114: PUSH
57115: LD_INT 8
57117: PUSH
57118: LD_INT 9
57120: PUSH
57121: LD_INT 10
57123: PUSH
57124: LD_INT 11
57126: PUSH
57127: LD_INT 12
57129: PUSH
57130: LD_INT 13
57132: PUSH
57133: LD_INT 14
57135: PUSH
57136: LD_INT 15
57138: PUSH
57139: LD_INT 16
57141: PUSH
57142: LD_INT 17
57144: PUSH
57145: LD_INT 18
57147: PUSH
57148: LD_INT 19
57150: PUSH
57151: LD_INT 20
57153: PUSH
57154: LD_INT 21
57156: PUSH
57157: LD_INT 22
57159: PUSH
57160: LD_INT 23
57162: PUSH
57163: LD_INT 24
57165: PUSH
57166: LD_INT 25
57168: PUSH
57169: LD_INT 26
57171: PUSH
57172: LD_INT 27
57174: PUSH
57175: LD_INT 28
57177: PUSH
57178: LD_INT 29
57180: PUSH
57181: LD_INT 30
57183: PUSH
57184: LD_INT 31
57186: PUSH
57187: LD_INT 32
57189: PUSH
57190: LD_INT 33
57192: PUSH
57193: LD_INT 34
57195: PUSH
57196: LD_INT 35
57198: PUSH
57199: LD_INT 36
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 101
57242: PUSH
57243: LD_INT 102
57245: PUSH
57246: LD_INT 103
57248: PUSH
57249: LD_INT 104
57251: PUSH
57252: LD_INT 105
57254: PUSH
57255: LD_INT 106
57257: PUSH
57258: LD_INT 107
57260: PUSH
57261: LD_INT 108
57263: PUSH
57264: LD_INT 109
57266: PUSH
57267: LD_INT 110
57269: PUSH
57270: LD_INT 111
57272: PUSH
57273: LD_INT 112
57275: PUSH
57276: LD_INT 113
57278: PUSH
57279: LD_INT 114
57281: PUSH
57282: LD_INT 115
57284: PUSH
57285: LD_INT 116
57287: PUSH
57288: LD_INT 117
57290: PUSH
57291: LD_INT 118
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: ST_TO_ADDR
// if result then
57318: LD_VAR 0 2
57322: IFFALSE 58108
// begin normal :=  ;
57324: LD_ADDR_VAR 0 5
57328: PUSH
57329: LD_STRING 
57331: ST_TO_ADDR
// hardcore :=  ;
57332: LD_ADDR_VAR 0 6
57336: PUSH
57337: LD_STRING 
57339: ST_TO_ADDR
// active :=  ;
57340: LD_ADDR_VAR 0 7
57344: PUSH
57345: LD_STRING 
57347: ST_TO_ADDR
// for i = 1 to normalCounter do
57348: LD_ADDR_VAR 0 8
57352: PUSH
57353: DOUBLE
57354: LD_INT 1
57356: DEC
57357: ST_TO_ADDR
57358: LD_EXP 36
57362: PUSH
57363: FOR_TO
57364: IFFALSE 57465
// begin tmp := 0 ;
57366: LD_ADDR_VAR 0 3
57370: PUSH
57371: LD_STRING 0
57373: ST_TO_ADDR
// if result [ 1 ] then
57374: LD_VAR 0 2
57378: PUSH
57379: LD_INT 1
57381: ARRAY
57382: IFFALSE 57447
// if result [ 1 ] [ 1 ] = i then
57384: LD_VAR 0 2
57388: PUSH
57389: LD_INT 1
57391: ARRAY
57392: PUSH
57393: LD_INT 1
57395: ARRAY
57396: PUSH
57397: LD_VAR 0 8
57401: EQUAL
57402: IFFALSE 57447
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
57404: LD_ADDR_VAR 0 2
57408: PUSH
57409: LD_VAR 0 2
57413: PPUSH
57414: LD_INT 1
57416: PPUSH
57417: LD_VAR 0 2
57421: PUSH
57422: LD_INT 1
57424: ARRAY
57425: PPUSH
57426: LD_INT 1
57428: PPUSH
57429: CALL_OW 3
57433: PPUSH
57434: CALL_OW 1
57438: ST_TO_ADDR
// tmp := 1 ;
57439: LD_ADDR_VAR 0 3
57443: PUSH
57444: LD_STRING 1
57446: ST_TO_ADDR
// end ; normal := normal & tmp ;
57447: LD_ADDR_VAR 0 5
57451: PUSH
57452: LD_VAR 0 5
57456: PUSH
57457: LD_VAR 0 3
57461: STR
57462: ST_TO_ADDR
// end ;
57463: GO 57363
57465: POP
57466: POP
// for i = 1 to hardcoreCounter do
57467: LD_ADDR_VAR 0 8
57471: PUSH
57472: DOUBLE
57473: LD_INT 1
57475: DEC
57476: ST_TO_ADDR
57477: LD_EXP 37
57481: PUSH
57482: FOR_TO
57483: IFFALSE 57588
// begin tmp := 0 ;
57485: LD_ADDR_VAR 0 3
57489: PUSH
57490: LD_STRING 0
57492: ST_TO_ADDR
// if result [ 2 ] then
57493: LD_VAR 0 2
57497: PUSH
57498: LD_INT 2
57500: ARRAY
57501: IFFALSE 57570
// if result [ 2 ] [ 1 ] = 100 + i then
57503: LD_VAR 0 2
57507: PUSH
57508: LD_INT 2
57510: ARRAY
57511: PUSH
57512: LD_INT 1
57514: ARRAY
57515: PUSH
57516: LD_INT 100
57518: PUSH
57519: LD_VAR 0 8
57523: PLUS
57524: EQUAL
57525: IFFALSE 57570
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
57527: LD_ADDR_VAR 0 2
57531: PUSH
57532: LD_VAR 0 2
57536: PPUSH
57537: LD_INT 2
57539: PPUSH
57540: LD_VAR 0 2
57544: PUSH
57545: LD_INT 2
57547: ARRAY
57548: PPUSH
57549: LD_INT 1
57551: PPUSH
57552: CALL_OW 3
57556: PPUSH
57557: CALL_OW 1
57561: ST_TO_ADDR
// tmp := 1 ;
57562: LD_ADDR_VAR 0 3
57566: PUSH
57567: LD_STRING 1
57569: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
57570: LD_ADDR_VAR 0 6
57574: PUSH
57575: LD_VAR 0 6
57579: PUSH
57580: LD_VAR 0 3
57584: STR
57585: ST_TO_ADDR
// end ;
57586: GO 57482
57588: POP
57589: POP
// if isGameLoad then
57590: LD_VAR 0 1
57594: IFFALSE 58069
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
57596: LD_ADDR_VAR 0 4
57600: PUSH
57601: LD_EXP 40
57605: PUSH
57606: LD_EXP 39
57610: PUSH
57611: LD_EXP 41
57615: PUSH
57616: LD_EXP 38
57620: PUSH
57621: LD_EXP 42
57625: PUSH
57626: LD_EXP 43
57630: PUSH
57631: LD_EXP 44
57635: PUSH
57636: LD_EXP 45
57640: PUSH
57641: LD_EXP 46
57645: PUSH
57646: LD_EXP 47
57650: PUSH
57651: LD_EXP 48
57655: PUSH
57656: LD_EXP 49
57660: PUSH
57661: LD_EXP 50
57665: PUSH
57666: LD_EXP 51
57670: PUSH
57671: LD_EXP 59
57675: PUSH
57676: LD_EXP 60
57680: PUSH
57681: LD_EXP 61
57685: PUSH
57686: LD_EXP 62
57690: PUSH
57691: LD_EXP 64
57695: PUSH
57696: LD_EXP 65
57700: PUSH
57701: LD_EXP 66
57705: PUSH
57706: LD_EXP 69
57710: PUSH
57711: LD_EXP 71
57715: PUSH
57716: LD_EXP 72
57720: PUSH
57721: LD_EXP 73
57725: PUSH
57726: LD_EXP 75
57730: PUSH
57731: LD_EXP 76
57735: PUSH
57736: LD_EXP 79
57740: PUSH
57741: LD_EXP 80
57745: PUSH
57746: LD_EXP 81
57750: PUSH
57751: LD_EXP 82
57755: PUSH
57756: LD_EXP 83
57760: PUSH
57761: LD_EXP 84
57765: PUSH
57766: LD_EXP 85
57770: PUSH
57771: LD_EXP 86
57775: PUSH
57776: LD_EXP 87
57780: PUSH
57781: LD_EXP 52
57785: PUSH
57786: LD_EXP 53
57790: PUSH
57791: LD_EXP 56
57795: PUSH
57796: LD_EXP 57
57800: PUSH
57801: LD_EXP 58
57805: PUSH
57806: LD_EXP 54
57810: PUSH
57811: LD_EXP 55
57815: PUSH
57816: LD_EXP 63
57820: PUSH
57821: LD_EXP 67
57825: PUSH
57826: LD_EXP 68
57830: PUSH
57831: LD_EXP 70
57835: PUSH
57836: LD_EXP 74
57840: PUSH
57841: LD_EXP 77
57845: PUSH
57846: LD_EXP 78
57850: PUSH
57851: LD_EXP 88
57855: PUSH
57856: LD_EXP 89
57860: PUSH
57861: LD_EXP 90
57865: PUSH
57866: LD_EXP 91
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: ST_TO_ADDR
// tmp :=  ;
57927: LD_ADDR_VAR 0 3
57931: PUSH
57932: LD_STRING 
57934: ST_TO_ADDR
// for i = 1 to normalCounter do
57935: LD_ADDR_VAR 0 8
57939: PUSH
57940: DOUBLE
57941: LD_INT 1
57943: DEC
57944: ST_TO_ADDR
57945: LD_EXP 36
57949: PUSH
57950: FOR_TO
57951: IFFALSE 57987
// begin if flags [ i ] then
57953: LD_VAR 0 4
57957: PUSH
57958: LD_VAR 0 8
57962: ARRAY
57963: IFFALSE 57985
// tmp := tmp & i & ; ;
57965: LD_ADDR_VAR 0 3
57969: PUSH
57970: LD_VAR 0 3
57974: PUSH
57975: LD_VAR 0 8
57979: STR
57980: PUSH
57981: LD_STRING ;
57983: STR
57984: ST_TO_ADDR
// end ;
57985: GO 57950
57987: POP
57988: POP
// for i = 1 to hardcoreCounter do
57989: LD_ADDR_VAR 0 8
57993: PUSH
57994: DOUBLE
57995: LD_INT 1
57997: DEC
57998: ST_TO_ADDR
57999: LD_EXP 37
58003: PUSH
58004: FOR_TO
58005: IFFALSE 58051
// begin if flags [ normalCounter + i ] then
58007: LD_VAR 0 4
58011: PUSH
58012: LD_EXP 36
58016: PUSH
58017: LD_VAR 0 8
58021: PLUS
58022: ARRAY
58023: IFFALSE 58049
// tmp := tmp & ( 100 + i ) & ; ;
58025: LD_ADDR_VAR 0 3
58029: PUSH
58030: LD_VAR 0 3
58034: PUSH
58035: LD_INT 100
58037: PUSH
58038: LD_VAR 0 8
58042: PLUS
58043: STR
58044: PUSH
58045: LD_STRING ;
58047: STR
58048: ST_TO_ADDR
// end ;
58049: GO 58004
58051: POP
58052: POP
// if tmp then
58053: LD_VAR 0 3
58057: IFFALSE 58069
// active := tmp ;
58059: LD_ADDR_VAR 0 7
58063: PUSH
58064: LD_VAR 0 3
58068: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
58069: LD_STRING getStreamItemsFromMission("
58071: PUSH
58072: LD_VAR 0 5
58076: STR
58077: PUSH
58078: LD_STRING ","
58080: STR
58081: PUSH
58082: LD_VAR 0 6
58086: STR
58087: PUSH
58088: LD_STRING ","
58090: STR
58091: PUSH
58092: LD_VAR 0 7
58096: STR
58097: PUSH
58098: LD_STRING ")
58100: STR
58101: PPUSH
58102: CALL_OW 559
// end else
58106: GO 58115
// ToLua ( getStreamItemsFromMission("","","") ) ;
58108: LD_STRING getStreamItemsFromMission("","","")
58110: PPUSH
58111: CALL_OW 559
// end ;
58115: LD_VAR 0 2
58119: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
58120: LD_EXP 35
58124: PUSH
58125: LD_EXP 40
58129: AND
58130: IFFALSE 58254
58132: GO 58134
58134: DISABLE
58135: LD_INT 0
58137: PPUSH
58138: PPUSH
// begin enable ;
58139: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
58140: LD_ADDR_VAR 0 2
58144: PUSH
58145: LD_INT 22
58147: PUSH
58148: LD_OWVAR 2
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 34
58162: PUSH
58163: LD_INT 7
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 34
58172: PUSH
58173: LD_INT 45
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 34
58182: PUSH
58183: LD_INT 28
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 34
58192: PUSH
58193: LD_INT 47
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PPUSH
58211: CALL_OW 69
58215: ST_TO_ADDR
// if not tmp then
58216: LD_VAR 0 2
58220: NOT
58221: IFFALSE 58225
// exit ;
58223: GO 58254
// for i in tmp do
58225: LD_ADDR_VAR 0 1
58229: PUSH
58230: LD_VAR 0 2
58234: PUSH
58235: FOR_IN
58236: IFFALSE 58252
// begin SetLives ( i , 0 ) ;
58238: LD_VAR 0 1
58242: PPUSH
58243: LD_INT 0
58245: PPUSH
58246: CALL_OW 234
// end ;
58250: GO 58235
58252: POP
58253: POP
// end ;
58254: PPOPN 2
58256: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
58257: LD_EXP 35
58261: PUSH
58262: LD_EXP 41
58266: AND
58267: IFFALSE 58351
58269: GO 58271
58271: DISABLE
58272: LD_INT 0
58274: PPUSH
58275: PPUSH
// begin enable ;
58276: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
58277: LD_ADDR_VAR 0 2
58281: PUSH
58282: LD_INT 22
58284: PUSH
58285: LD_OWVAR 2
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 32
58296: PUSH
58297: LD_INT 3
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PPUSH
58308: CALL_OW 69
58312: ST_TO_ADDR
// if not tmp then
58313: LD_VAR 0 2
58317: NOT
58318: IFFALSE 58322
// exit ;
58320: GO 58351
// for i in tmp do
58322: LD_ADDR_VAR 0 1
58326: PUSH
58327: LD_VAR 0 2
58331: PUSH
58332: FOR_IN
58333: IFFALSE 58349
// begin SetLives ( i , 0 ) ;
58335: LD_VAR 0 1
58339: PPUSH
58340: LD_INT 0
58342: PPUSH
58343: CALL_OW 234
// end ;
58347: GO 58332
58349: POP
58350: POP
// end ;
58351: PPOPN 2
58353: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
58354: LD_EXP 35
58358: PUSH
58359: LD_EXP 38
58363: AND
58364: IFFALSE 58457
58366: GO 58368
58368: DISABLE
58369: LD_INT 0
58371: PPUSH
// begin enable ;
58372: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
58373: LD_ADDR_VAR 0 1
58377: PUSH
58378: LD_INT 22
58380: PUSH
58381: LD_OWVAR 2
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: LD_INT 25
58395: PUSH
58396: LD_INT 5
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 25
58405: PUSH
58406: LD_INT 9
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 25
58415: PUSH
58416: LD_INT 8
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PPUSH
58433: CALL_OW 69
58437: PUSH
58438: FOR_IN
58439: IFFALSE 58455
// begin SetClass ( i , 1 ) ;
58441: LD_VAR 0 1
58445: PPUSH
58446: LD_INT 1
58448: PPUSH
58449: CALL_OW 336
// end ;
58453: GO 58438
58455: POP
58456: POP
// end ;
58457: PPOPN 1
58459: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
58460: LD_EXP 35
58464: PUSH
58465: LD_EXP 39
58469: AND
58470: PUSH
58471: LD_OWVAR 65
58475: PUSH
58476: LD_INT 7
58478: LESS
58479: AND
58480: IFFALSE 58494
58482: GO 58484
58484: DISABLE
// begin enable ;
58485: ENABLE
// game_speed := 7 ;
58486: LD_ADDR_OWVAR 65
58490: PUSH
58491: LD_INT 7
58493: ST_TO_ADDR
// end ;
58494: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
58495: LD_EXP 35
58499: PUSH
58500: LD_EXP 42
58504: AND
58505: IFFALSE 58707
58507: GO 58509
58509: DISABLE
58510: LD_INT 0
58512: PPUSH
58513: PPUSH
58514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58515: LD_ADDR_VAR 0 3
58519: PUSH
58520: LD_INT 81
58522: PUSH
58523: LD_OWVAR 2
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 21
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PPUSH
58546: CALL_OW 69
58550: ST_TO_ADDR
// if not tmp then
58551: LD_VAR 0 3
58555: NOT
58556: IFFALSE 58560
// exit ;
58558: GO 58707
// if tmp > 5 then
58560: LD_VAR 0 3
58564: PUSH
58565: LD_INT 5
58567: GREATER
58568: IFFALSE 58580
// k := 5 else
58570: LD_ADDR_VAR 0 2
58574: PUSH
58575: LD_INT 5
58577: ST_TO_ADDR
58578: GO 58590
// k := tmp ;
58580: LD_ADDR_VAR 0 2
58584: PUSH
58585: LD_VAR 0 3
58589: ST_TO_ADDR
// for i := 1 to k do
58590: LD_ADDR_VAR 0 1
58594: PUSH
58595: DOUBLE
58596: LD_INT 1
58598: DEC
58599: ST_TO_ADDR
58600: LD_VAR 0 2
58604: PUSH
58605: FOR_TO
58606: IFFALSE 58705
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
58608: LD_VAR 0 3
58612: PUSH
58613: LD_VAR 0 1
58617: ARRAY
58618: PPUSH
58619: LD_VAR 0 1
58623: PUSH
58624: LD_INT 4
58626: MOD
58627: PUSH
58628: LD_INT 1
58630: PLUS
58631: PPUSH
58632: CALL_OW 259
58636: PUSH
58637: LD_INT 10
58639: LESS
58640: IFFALSE 58703
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
58642: LD_VAR 0 3
58646: PUSH
58647: LD_VAR 0 1
58651: ARRAY
58652: PPUSH
58653: LD_VAR 0 1
58657: PUSH
58658: LD_INT 4
58660: MOD
58661: PUSH
58662: LD_INT 1
58664: PLUS
58665: PPUSH
58666: LD_VAR 0 3
58670: PUSH
58671: LD_VAR 0 1
58675: ARRAY
58676: PPUSH
58677: LD_VAR 0 1
58681: PUSH
58682: LD_INT 4
58684: MOD
58685: PUSH
58686: LD_INT 1
58688: PLUS
58689: PPUSH
58690: CALL_OW 259
58694: PUSH
58695: LD_INT 1
58697: PLUS
58698: PPUSH
58699: CALL_OW 237
58703: GO 58605
58705: POP
58706: POP
// end ;
58707: PPOPN 3
58709: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
58710: LD_EXP 35
58714: PUSH
58715: LD_EXP 43
58719: AND
58720: IFFALSE 58740
58722: GO 58724
58724: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
58725: LD_INT 4
58727: PPUSH
58728: LD_OWVAR 2
58732: PPUSH
58733: LD_INT 0
58735: PPUSH
58736: CALL_OW 324
58740: END
// every 0 0$1 trigger StreamModeActive and sShovel do
58741: LD_EXP 35
58745: PUSH
58746: LD_EXP 72
58750: AND
58751: IFFALSE 58771
58753: GO 58755
58755: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
58756: LD_INT 19
58758: PPUSH
58759: LD_OWVAR 2
58763: PPUSH
58764: LD_INT 0
58766: PPUSH
58767: CALL_OW 324
58771: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
58772: LD_EXP 35
58776: PUSH
58777: LD_EXP 44
58781: AND
58782: IFFALSE 58884
58784: GO 58786
58786: DISABLE
58787: LD_INT 0
58789: PPUSH
58790: PPUSH
// begin enable ;
58791: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
58792: LD_ADDR_VAR 0 2
58796: PUSH
58797: LD_INT 22
58799: PUSH
58800: LD_OWVAR 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: LD_INT 34
58814: PUSH
58815: LD_INT 11
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 34
58824: PUSH
58825: LD_INT 30
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PPUSH
58841: CALL_OW 69
58845: ST_TO_ADDR
// if not tmp then
58846: LD_VAR 0 2
58850: NOT
58851: IFFALSE 58855
// exit ;
58853: GO 58884
// for i in tmp do
58855: LD_ADDR_VAR 0 1
58859: PUSH
58860: LD_VAR 0 2
58864: PUSH
58865: FOR_IN
58866: IFFALSE 58882
// begin SetLives ( i , 0 ) ;
58868: LD_VAR 0 1
58872: PPUSH
58873: LD_INT 0
58875: PPUSH
58876: CALL_OW 234
// end ;
58880: GO 58865
58882: POP
58883: POP
// end ;
58884: PPOPN 2
58886: END
// every 0 0$1 trigger StreamModeActive and sBunker do
58887: LD_EXP 35
58891: PUSH
58892: LD_EXP 45
58896: AND
58897: IFFALSE 58917
58899: GO 58901
58901: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
58902: LD_INT 32
58904: PPUSH
58905: LD_OWVAR 2
58909: PPUSH
58910: LD_INT 0
58912: PPUSH
58913: CALL_OW 324
58917: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
58918: LD_EXP 35
58922: PUSH
58923: LD_EXP 46
58927: AND
58928: IFFALSE 59109
58930: GO 58932
58932: DISABLE
58933: LD_INT 0
58935: PPUSH
58936: PPUSH
58937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
58938: LD_ADDR_VAR 0 2
58942: PUSH
58943: LD_INT 22
58945: PUSH
58946: LD_OWVAR 2
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 33
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PPUSH
58969: CALL_OW 69
58973: ST_TO_ADDR
// if not tmp then
58974: LD_VAR 0 2
58978: NOT
58979: IFFALSE 58983
// exit ;
58981: GO 59109
// side := 0 ;
58983: LD_ADDR_VAR 0 3
58987: PUSH
58988: LD_INT 0
58990: ST_TO_ADDR
// for i := 1 to 8 do
58991: LD_ADDR_VAR 0 1
58995: PUSH
58996: DOUBLE
58997: LD_INT 1
58999: DEC
59000: ST_TO_ADDR
59001: LD_INT 8
59003: PUSH
59004: FOR_TO
59005: IFFALSE 59053
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
59007: LD_OWVAR 2
59011: PUSH
59012: LD_VAR 0 1
59016: NONEQUAL
59017: PUSH
59018: LD_OWVAR 2
59022: PPUSH
59023: LD_VAR 0 1
59027: PPUSH
59028: CALL_OW 81
59032: PUSH
59033: LD_INT 2
59035: EQUAL
59036: AND
59037: IFFALSE 59051
// begin side := i ;
59039: LD_ADDR_VAR 0 3
59043: PUSH
59044: LD_VAR 0 1
59048: ST_TO_ADDR
// break ;
59049: GO 59053
// end ;
59051: GO 59004
59053: POP
59054: POP
// if not side then
59055: LD_VAR 0 3
59059: NOT
59060: IFFALSE 59064
// exit ;
59062: GO 59109
// for i := 1 to tmp do
59064: LD_ADDR_VAR 0 1
59068: PUSH
59069: DOUBLE
59070: LD_INT 1
59072: DEC
59073: ST_TO_ADDR
59074: LD_VAR 0 2
59078: PUSH
59079: FOR_TO
59080: IFFALSE 59107
// if Prob ( 60 ) then
59082: LD_INT 60
59084: PPUSH
59085: CALL_OW 13
59089: IFFALSE 59105
// SetSide ( i , side ) ;
59091: LD_VAR 0 1
59095: PPUSH
59096: LD_VAR 0 3
59100: PPUSH
59101: CALL_OW 235
59105: GO 59079
59107: POP
59108: POP
// end ;
59109: PPOPN 3
59111: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
59112: LD_EXP 35
59116: PUSH
59117: LD_EXP 48
59121: AND
59122: IFFALSE 59241
59124: GO 59126
59126: DISABLE
59127: LD_INT 0
59129: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
59130: LD_ADDR_VAR 0 1
59134: PUSH
59135: LD_INT 22
59137: PUSH
59138: LD_OWVAR 2
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 21
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: LD_INT 23
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: LIST
59178: PPUSH
59179: CALL_OW 69
59183: PUSH
59184: FOR_IN
59185: IFFALSE 59239
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
59187: LD_VAR 0 1
59191: PPUSH
59192: CALL_OW 257
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: LD_INT 3
59205: PUSH
59206: LD_INT 4
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: IN
59215: IFFALSE 59237
// SetClass ( un , rand ( 1 , 4 ) ) ;
59217: LD_VAR 0 1
59221: PPUSH
59222: LD_INT 1
59224: PPUSH
59225: LD_INT 4
59227: PPUSH
59228: CALL_OW 12
59232: PPUSH
59233: CALL_OW 336
59237: GO 59184
59239: POP
59240: POP
// end ;
59241: PPOPN 1
59243: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
59244: LD_EXP 35
59248: PUSH
59249: LD_EXP 47
59253: AND
59254: IFFALSE 59333
59256: GO 59258
59258: DISABLE
59259: LD_INT 0
59261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59262: LD_ADDR_VAR 0 1
59266: PUSH
59267: LD_INT 22
59269: PUSH
59270: LD_OWVAR 2
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 21
59281: PUSH
59282: LD_INT 3
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PPUSH
59293: CALL_OW 69
59297: ST_TO_ADDR
// if not tmp then
59298: LD_VAR 0 1
59302: NOT
59303: IFFALSE 59307
// exit ;
59305: GO 59333
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
59307: LD_VAR 0 1
59311: PUSH
59312: LD_INT 1
59314: PPUSH
59315: LD_VAR 0 1
59319: PPUSH
59320: CALL_OW 12
59324: ARRAY
59325: PPUSH
59326: LD_INT 100
59328: PPUSH
59329: CALL_OW 234
// end ;
59333: PPOPN 1
59335: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
59336: LD_EXP 35
59340: PUSH
59341: LD_EXP 49
59345: AND
59346: IFFALSE 59444
59348: GO 59350
59350: DISABLE
59351: LD_INT 0
59353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59354: LD_ADDR_VAR 0 1
59358: PUSH
59359: LD_INT 22
59361: PUSH
59362: LD_OWVAR 2
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 21
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PPUSH
59385: CALL_OW 69
59389: ST_TO_ADDR
// if not tmp then
59390: LD_VAR 0 1
59394: NOT
59395: IFFALSE 59399
// exit ;
59397: GO 59444
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
59399: LD_VAR 0 1
59403: PUSH
59404: LD_INT 1
59406: PPUSH
59407: LD_VAR 0 1
59411: PPUSH
59412: CALL_OW 12
59416: ARRAY
59417: PPUSH
59418: LD_INT 1
59420: PPUSH
59421: LD_INT 4
59423: PPUSH
59424: CALL_OW 12
59428: PPUSH
59429: LD_INT 3000
59431: PPUSH
59432: LD_INT 9000
59434: PPUSH
59435: CALL_OW 12
59439: PPUSH
59440: CALL_OW 492
// end ;
59444: PPOPN 1
59446: END
// every 0 0$1 trigger StreamModeActive and sDepot do
59447: LD_EXP 35
59451: PUSH
59452: LD_EXP 50
59456: AND
59457: IFFALSE 59477
59459: GO 59461
59461: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
59462: LD_INT 1
59464: PPUSH
59465: LD_OWVAR 2
59469: PPUSH
59470: LD_INT 0
59472: PPUSH
59473: CALL_OW 324
59477: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
59478: LD_EXP 35
59482: PUSH
59483: LD_EXP 51
59487: AND
59488: IFFALSE 59571
59490: GO 59492
59492: DISABLE
59493: LD_INT 0
59495: PPUSH
59496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59497: LD_ADDR_VAR 0 2
59501: PUSH
59502: LD_INT 22
59504: PUSH
59505: LD_OWVAR 2
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 21
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PPUSH
59528: CALL_OW 69
59532: ST_TO_ADDR
// if not tmp then
59533: LD_VAR 0 2
59537: NOT
59538: IFFALSE 59542
// exit ;
59540: GO 59571
// for i in tmp do
59542: LD_ADDR_VAR 0 1
59546: PUSH
59547: LD_VAR 0 2
59551: PUSH
59552: FOR_IN
59553: IFFALSE 59569
// SetBLevel ( i , 10 ) ;
59555: LD_VAR 0 1
59559: PPUSH
59560: LD_INT 10
59562: PPUSH
59563: CALL_OW 241
59567: GO 59552
59569: POP
59570: POP
// end ;
59571: PPOPN 2
59573: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
59574: LD_EXP 35
59578: PUSH
59579: LD_EXP 52
59583: AND
59584: IFFALSE 59695
59586: GO 59588
59588: DISABLE
59589: LD_INT 0
59591: PPUSH
59592: PPUSH
59593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59594: LD_ADDR_VAR 0 3
59598: PUSH
59599: LD_INT 22
59601: PUSH
59602: LD_OWVAR 2
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 25
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PPUSH
59625: CALL_OW 69
59629: ST_TO_ADDR
// if not tmp then
59630: LD_VAR 0 3
59634: NOT
59635: IFFALSE 59639
// exit ;
59637: GO 59695
// un := tmp [ rand ( 1 , tmp ) ] ;
59639: LD_ADDR_VAR 0 2
59643: PUSH
59644: LD_VAR 0 3
59648: PUSH
59649: LD_INT 1
59651: PPUSH
59652: LD_VAR 0 3
59656: PPUSH
59657: CALL_OW 12
59661: ARRAY
59662: ST_TO_ADDR
// if Crawls ( un ) then
59663: LD_VAR 0 2
59667: PPUSH
59668: CALL_OW 318
59672: IFFALSE 59683
// ComWalk ( un ) ;
59674: LD_VAR 0 2
59678: PPUSH
59679: CALL_OW 138
// SetClass ( un , class_sniper ) ;
59683: LD_VAR 0 2
59687: PPUSH
59688: LD_INT 5
59690: PPUSH
59691: CALL_OW 336
// end ;
59695: PPOPN 3
59697: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
59698: LD_EXP 35
59702: PUSH
59703: LD_EXP 53
59707: AND
59708: PUSH
59709: LD_OWVAR 67
59713: PUSH
59714: LD_INT 4
59716: LESS
59717: AND
59718: IFFALSE 59737
59720: GO 59722
59722: DISABLE
// begin Difficulty := Difficulty + 1 ;
59723: LD_ADDR_OWVAR 67
59727: PUSH
59728: LD_OWVAR 67
59732: PUSH
59733: LD_INT 1
59735: PLUS
59736: ST_TO_ADDR
// end ;
59737: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
59738: LD_EXP 35
59742: PUSH
59743: LD_EXP 54
59747: AND
59748: IFFALSE 59851
59750: GO 59752
59752: DISABLE
59753: LD_INT 0
59755: PPUSH
// begin for i := 1 to 5 do
59756: LD_ADDR_VAR 0 1
59760: PUSH
59761: DOUBLE
59762: LD_INT 1
59764: DEC
59765: ST_TO_ADDR
59766: LD_INT 5
59768: PUSH
59769: FOR_TO
59770: IFFALSE 59849
// begin uc_nation := nation_nature ;
59772: LD_ADDR_OWVAR 21
59776: PUSH
59777: LD_INT 0
59779: ST_TO_ADDR
// uc_side := 0 ;
59780: LD_ADDR_OWVAR 20
59784: PUSH
59785: LD_INT 0
59787: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59788: LD_ADDR_OWVAR 29
59792: PUSH
59793: LD_INT 12
59795: PUSH
59796: LD_INT 12
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: ST_TO_ADDR
// hc_agressivity := 20 ;
59803: LD_ADDR_OWVAR 35
59807: PUSH
59808: LD_INT 20
59810: ST_TO_ADDR
// hc_class := class_tiger ;
59811: LD_ADDR_OWVAR 28
59815: PUSH
59816: LD_INT 14
59818: ST_TO_ADDR
// hc_gallery :=  ;
59819: LD_ADDR_OWVAR 33
59823: PUSH
59824: LD_STRING 
59826: ST_TO_ADDR
// hc_name :=  ;
59827: LD_ADDR_OWVAR 26
59831: PUSH
59832: LD_STRING 
59834: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59835: CALL_OW 44
59839: PPUSH
59840: LD_INT 0
59842: PPUSH
59843: CALL_OW 51
// end ;
59847: GO 59769
59849: POP
59850: POP
// end ;
59851: PPOPN 1
59853: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59854: LD_EXP 35
59858: PUSH
59859: LD_EXP 55
59863: AND
59864: IFFALSE 59873
59866: GO 59868
59868: DISABLE
// StreamSibBomb ;
59869: CALL 59874 0 0
59873: END
// export function StreamSibBomb ; var i , x , y ; begin
59874: LD_INT 0
59876: PPUSH
59877: PPUSH
59878: PPUSH
59879: PPUSH
// result := false ;
59880: LD_ADDR_VAR 0 1
59884: PUSH
59885: LD_INT 0
59887: ST_TO_ADDR
// for i := 1 to 16 do
59888: LD_ADDR_VAR 0 2
59892: PUSH
59893: DOUBLE
59894: LD_INT 1
59896: DEC
59897: ST_TO_ADDR
59898: LD_INT 16
59900: PUSH
59901: FOR_TO
59902: IFFALSE 60101
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59904: LD_ADDR_VAR 0 3
59908: PUSH
59909: LD_INT 10
59911: PUSH
59912: LD_INT 20
59914: PUSH
59915: LD_INT 30
59917: PUSH
59918: LD_INT 40
59920: PUSH
59921: LD_INT 50
59923: PUSH
59924: LD_INT 60
59926: PUSH
59927: LD_INT 70
59929: PUSH
59930: LD_INT 80
59932: PUSH
59933: LD_INT 90
59935: PUSH
59936: LD_INT 100
59938: PUSH
59939: LD_INT 110
59941: PUSH
59942: LD_INT 120
59944: PUSH
59945: LD_INT 130
59947: PUSH
59948: LD_INT 140
59950: PUSH
59951: LD_INT 150
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: PPUSH
59974: LD_INT 15
59976: PPUSH
59977: CALL_OW 12
59981: ARRAY
59982: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59983: LD_ADDR_VAR 0 4
59987: PUSH
59988: LD_INT 10
59990: PUSH
59991: LD_INT 20
59993: PUSH
59994: LD_INT 30
59996: PUSH
59997: LD_INT 40
59999: PUSH
60000: LD_INT 50
60002: PUSH
60003: LD_INT 60
60005: PUSH
60006: LD_INT 70
60008: PUSH
60009: LD_INT 80
60011: PUSH
60012: LD_INT 90
60014: PUSH
60015: LD_INT 100
60017: PUSH
60018: LD_INT 110
60020: PUSH
60021: LD_INT 120
60023: PUSH
60024: LD_INT 130
60026: PUSH
60027: LD_INT 140
60029: PUSH
60030: LD_INT 150
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: PPUSH
60053: LD_INT 15
60055: PPUSH
60056: CALL_OW 12
60060: ARRAY
60061: ST_TO_ADDR
// if ValidHex ( x , y ) then
60062: LD_VAR 0 3
60066: PPUSH
60067: LD_VAR 0 4
60071: PPUSH
60072: CALL_OW 488
60076: IFFALSE 60099
// begin result := [ x , y ] ;
60078: LD_ADDR_VAR 0 1
60082: PUSH
60083: LD_VAR 0 3
60087: PUSH
60088: LD_VAR 0 4
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: ST_TO_ADDR
// break ;
60097: GO 60101
// end ; end ;
60099: GO 59901
60101: POP
60102: POP
// if result then
60103: LD_VAR 0 1
60107: IFFALSE 60167
// begin ToLua ( playSibBomb() ) ;
60109: LD_STRING playSibBomb()
60111: PPUSH
60112: CALL_OW 559
// wait ( 0 0$14 ) ;
60116: LD_INT 490
60118: PPUSH
60119: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
60123: LD_VAR 0 1
60127: PUSH
60128: LD_INT 1
60130: ARRAY
60131: PPUSH
60132: LD_VAR 0 1
60136: PUSH
60137: LD_INT 2
60139: ARRAY
60140: PPUSH
60141: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
60145: LD_VAR 0 1
60149: PUSH
60150: LD_INT 1
60152: ARRAY
60153: PPUSH
60154: LD_VAR 0 1
60158: PUSH
60159: LD_INT 2
60161: ARRAY
60162: PPUSH
60163: CALL_OW 429
// end ; end ;
60167: LD_VAR 0 1
60171: RET
// every 0 0$1 trigger StreamModeActive and sReset do
60172: LD_EXP 35
60176: PUSH
60177: LD_EXP 57
60181: AND
60182: IFFALSE 60194
60184: GO 60186
60186: DISABLE
// YouLost (  ) ;
60187: LD_STRING 
60189: PPUSH
60190: CALL_OW 104
60194: END
// every 0 0$1 trigger StreamModeActive and sFog do
60195: LD_EXP 35
60199: PUSH
60200: LD_EXP 56
60204: AND
60205: IFFALSE 60219
60207: GO 60209
60209: DISABLE
// FogOff ( your_side ) ;
60210: LD_OWVAR 2
60214: PPUSH
60215: CALL_OW 344
60219: END
// every 0 0$1 trigger StreamModeActive and sSun do
60220: LD_EXP 35
60224: PUSH
60225: LD_EXP 58
60229: AND
60230: IFFALSE 60258
60232: GO 60234
60234: DISABLE
// begin solar_recharge_percent := 0 ;
60235: LD_ADDR_OWVAR 79
60239: PUSH
60240: LD_INT 0
60242: ST_TO_ADDR
// wait ( 5 5$00 ) ;
60243: LD_INT 10500
60245: PPUSH
60246: CALL_OW 67
// solar_recharge_percent := 100 ;
60250: LD_ADDR_OWVAR 79
60254: PUSH
60255: LD_INT 100
60257: ST_TO_ADDR
// end ;
60258: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
60259: LD_EXP 35
60263: PUSH
60264: LD_EXP 59
60268: AND
60269: IFFALSE 60508
60271: GO 60273
60273: DISABLE
60274: LD_INT 0
60276: PPUSH
60277: PPUSH
60278: PPUSH
// begin tmp := [ ] ;
60279: LD_ADDR_VAR 0 3
60283: PUSH
60284: EMPTY
60285: ST_TO_ADDR
// for i := 1 to 6 do
60286: LD_ADDR_VAR 0 1
60290: PUSH
60291: DOUBLE
60292: LD_INT 1
60294: DEC
60295: ST_TO_ADDR
60296: LD_INT 6
60298: PUSH
60299: FOR_TO
60300: IFFALSE 60405
// begin uc_nation := nation_nature ;
60302: LD_ADDR_OWVAR 21
60306: PUSH
60307: LD_INT 0
60309: ST_TO_ADDR
// uc_side := 0 ;
60310: LD_ADDR_OWVAR 20
60314: PUSH
60315: LD_INT 0
60317: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60318: LD_ADDR_OWVAR 29
60322: PUSH
60323: LD_INT 12
60325: PUSH
60326: LD_INT 12
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: ST_TO_ADDR
// hc_agressivity := 20 ;
60333: LD_ADDR_OWVAR 35
60337: PUSH
60338: LD_INT 20
60340: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
60341: LD_ADDR_OWVAR 28
60345: PUSH
60346: LD_INT 17
60348: ST_TO_ADDR
// hc_gallery :=  ;
60349: LD_ADDR_OWVAR 33
60353: PUSH
60354: LD_STRING 
60356: ST_TO_ADDR
// hc_name :=  ;
60357: LD_ADDR_OWVAR 26
60361: PUSH
60362: LD_STRING 
60364: ST_TO_ADDR
// un := CreateHuman ;
60365: LD_ADDR_VAR 0 2
60369: PUSH
60370: CALL_OW 44
60374: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
60375: LD_VAR 0 2
60379: PPUSH
60380: LD_INT 1
60382: PPUSH
60383: CALL_OW 51
// tmp := tmp ^ un ;
60387: LD_ADDR_VAR 0 3
60391: PUSH
60392: LD_VAR 0 3
60396: PUSH
60397: LD_VAR 0 2
60401: ADD
60402: ST_TO_ADDR
// end ;
60403: GO 60299
60405: POP
60406: POP
// repeat wait ( 0 0$1 ) ;
60407: LD_INT 35
60409: PPUSH
60410: CALL_OW 67
// for un in tmp do
60414: LD_ADDR_VAR 0 2
60418: PUSH
60419: LD_VAR 0 3
60423: PUSH
60424: FOR_IN
60425: IFFALSE 60499
// begin if IsDead ( un ) then
60427: LD_VAR 0 2
60431: PPUSH
60432: CALL_OW 301
60436: IFFALSE 60456
// begin tmp := tmp diff un ;
60438: LD_ADDR_VAR 0 3
60442: PUSH
60443: LD_VAR 0 3
60447: PUSH
60448: LD_VAR 0 2
60452: DIFF
60453: ST_TO_ADDR
// continue ;
60454: GO 60424
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
60456: LD_VAR 0 2
60460: PPUSH
60461: LD_INT 3
60463: PUSH
60464: LD_INT 22
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PPUSH
60478: CALL_OW 69
60482: PPUSH
60483: LD_VAR 0 2
60487: PPUSH
60488: CALL_OW 74
60492: PPUSH
60493: CALL_OW 115
// end ;
60497: GO 60424
60499: POP
60500: POP
// until not tmp ;
60501: LD_VAR 0 3
60505: NOT
60506: IFFALSE 60407
// end ;
60508: PPOPN 3
60510: END
// every 0 0$1 trigger StreamModeActive and sTroll do
60511: LD_EXP 35
60515: PUSH
60516: LD_EXP 60
60520: AND
60521: IFFALSE 60575
60523: GO 60525
60525: DISABLE
// begin ToLua ( displayTroll(); ) ;
60526: LD_STRING displayTroll();
60528: PPUSH
60529: CALL_OW 559
// wait ( 3 3$00 ) ;
60533: LD_INT 6300
60535: PPUSH
60536: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60540: LD_STRING hideTroll();
60542: PPUSH
60543: CALL_OW 559
// wait ( 1 1$00 ) ;
60547: LD_INT 2100
60549: PPUSH
60550: CALL_OW 67
// ToLua ( displayTroll(); ) ;
60554: LD_STRING displayTroll();
60556: PPUSH
60557: CALL_OW 559
// wait ( 1 1$00 ) ;
60561: LD_INT 2100
60563: PPUSH
60564: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60568: LD_STRING hideTroll();
60570: PPUSH
60571: CALL_OW 559
// end ;
60575: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
60576: LD_EXP 35
60580: PUSH
60581: LD_EXP 61
60585: AND
60586: IFFALSE 60649
60588: GO 60590
60590: DISABLE
60591: LD_INT 0
60593: PPUSH
// begin p := 0 ;
60594: LD_ADDR_VAR 0 1
60598: PUSH
60599: LD_INT 0
60601: ST_TO_ADDR
// repeat game_speed := 1 ;
60602: LD_ADDR_OWVAR 65
60606: PUSH
60607: LD_INT 1
60609: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60610: LD_INT 35
60612: PPUSH
60613: CALL_OW 67
// p := p + 1 ;
60617: LD_ADDR_VAR 0 1
60621: PUSH
60622: LD_VAR 0 1
60626: PUSH
60627: LD_INT 1
60629: PLUS
60630: ST_TO_ADDR
// until p >= 60 ;
60631: LD_VAR 0 1
60635: PUSH
60636: LD_INT 60
60638: GREATEREQUAL
60639: IFFALSE 60602
// game_speed := 4 ;
60641: LD_ADDR_OWVAR 65
60645: PUSH
60646: LD_INT 4
60648: ST_TO_ADDR
// end ;
60649: PPOPN 1
60651: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
60652: LD_EXP 35
60656: PUSH
60657: LD_EXP 62
60661: AND
60662: IFFALSE 60808
60664: GO 60666
60666: DISABLE
60667: LD_INT 0
60669: PPUSH
60670: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60671: LD_ADDR_VAR 0 1
60675: PUSH
60676: LD_INT 22
60678: PUSH
60679: LD_OWVAR 2
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: LD_INT 30
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 30
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: LIST
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PPUSH
60720: CALL_OW 69
60724: ST_TO_ADDR
// if not depot then
60725: LD_VAR 0 1
60729: NOT
60730: IFFALSE 60734
// exit ;
60732: GO 60808
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
60734: LD_ADDR_VAR 0 2
60738: PUSH
60739: LD_VAR 0 1
60743: PUSH
60744: LD_INT 1
60746: PPUSH
60747: LD_VAR 0 1
60751: PPUSH
60752: CALL_OW 12
60756: ARRAY
60757: PPUSH
60758: CALL_OW 274
60762: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
60763: LD_VAR 0 2
60767: PPUSH
60768: LD_INT 1
60770: PPUSH
60771: LD_INT 0
60773: PPUSH
60774: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
60778: LD_VAR 0 2
60782: PPUSH
60783: LD_INT 2
60785: PPUSH
60786: LD_INT 0
60788: PPUSH
60789: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
60793: LD_VAR 0 2
60797: PPUSH
60798: LD_INT 3
60800: PPUSH
60801: LD_INT 0
60803: PPUSH
60804: CALL_OW 277
// end ;
60808: PPOPN 2
60810: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60811: LD_EXP 35
60815: PUSH
60816: LD_EXP 63
60820: AND
60821: IFFALSE 60918
60823: GO 60825
60825: DISABLE
60826: LD_INT 0
60828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60829: LD_ADDR_VAR 0 1
60833: PUSH
60834: LD_INT 22
60836: PUSH
60837: LD_OWVAR 2
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 21
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 3
60858: PUSH
60859: LD_INT 23
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: LIST
60877: PPUSH
60878: CALL_OW 69
60882: ST_TO_ADDR
// if not tmp then
60883: LD_VAR 0 1
60887: NOT
60888: IFFALSE 60892
// exit ;
60890: GO 60918
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
60892: LD_VAR 0 1
60896: PUSH
60897: LD_INT 1
60899: PPUSH
60900: LD_VAR 0 1
60904: PPUSH
60905: CALL_OW 12
60909: ARRAY
60910: PPUSH
60911: LD_INT 200
60913: PPUSH
60914: CALL_OW 234
// end ;
60918: PPOPN 1
60920: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
60921: LD_EXP 35
60925: PUSH
60926: LD_EXP 64
60930: AND
60931: IFFALSE 61010
60933: GO 60935
60935: DISABLE
60936: LD_INT 0
60938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
60939: LD_ADDR_VAR 0 1
60943: PUSH
60944: LD_INT 22
60946: PUSH
60947: LD_OWVAR 2
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 21
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PPUSH
60970: CALL_OW 69
60974: ST_TO_ADDR
// if not tmp then
60975: LD_VAR 0 1
60979: NOT
60980: IFFALSE 60984
// exit ;
60982: GO 61010
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
60984: LD_VAR 0 1
60988: PUSH
60989: LD_INT 1
60991: PPUSH
60992: LD_VAR 0 1
60996: PPUSH
60997: CALL_OW 12
61001: ARRAY
61002: PPUSH
61003: LD_INT 60
61005: PPUSH
61006: CALL_OW 234
// end ;
61010: PPOPN 1
61012: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
61013: LD_EXP 35
61017: PUSH
61018: LD_EXP 65
61022: AND
61023: IFFALSE 61122
61025: GO 61027
61027: DISABLE
61028: LD_INT 0
61030: PPUSH
61031: PPUSH
// begin enable ;
61032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
61033: LD_ADDR_VAR 0 1
61037: PUSH
61038: LD_INT 22
61040: PUSH
61041: LD_OWVAR 2
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 61
61052: PUSH
61053: EMPTY
61054: LIST
61055: PUSH
61056: LD_INT 33
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: LIST
61070: PPUSH
61071: CALL_OW 69
61075: ST_TO_ADDR
// if not tmp then
61076: LD_VAR 0 1
61080: NOT
61081: IFFALSE 61085
// exit ;
61083: GO 61122
// for i in tmp do
61085: LD_ADDR_VAR 0 2
61089: PUSH
61090: LD_VAR 0 1
61094: PUSH
61095: FOR_IN
61096: IFFALSE 61120
// if IsControledBy ( i ) then
61098: LD_VAR 0 2
61102: PPUSH
61103: CALL_OW 312
61107: IFFALSE 61118
// ComUnlink ( i ) ;
61109: LD_VAR 0 2
61113: PPUSH
61114: CALL_OW 136
61118: GO 61095
61120: POP
61121: POP
// end ;
61122: PPOPN 2
61124: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
61125: LD_EXP 35
61129: PUSH
61130: LD_EXP 66
61134: AND
61135: IFFALSE 61275
61137: GO 61139
61139: DISABLE
61140: LD_INT 0
61142: PPUSH
61143: PPUSH
// begin ToLua ( displayPowell(); ) ;
61144: LD_STRING displayPowell();
61146: PPUSH
61147: CALL_OW 559
// uc_side := 0 ;
61151: LD_ADDR_OWVAR 20
61155: PUSH
61156: LD_INT 0
61158: ST_TO_ADDR
// uc_nation := 2 ;
61159: LD_ADDR_OWVAR 21
61163: PUSH
61164: LD_INT 2
61166: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
61167: LD_ADDR_OWVAR 37
61171: PUSH
61172: LD_INT 14
61174: ST_TO_ADDR
// vc_engine := engine_siberite ;
61175: LD_ADDR_OWVAR 39
61179: PUSH
61180: LD_INT 3
61182: ST_TO_ADDR
// vc_control := control_apeman ;
61183: LD_ADDR_OWVAR 38
61187: PUSH
61188: LD_INT 5
61190: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
61191: LD_ADDR_OWVAR 40
61195: PUSH
61196: LD_INT 29
61198: ST_TO_ADDR
// un := CreateVehicle ;
61199: LD_ADDR_VAR 0 2
61203: PUSH
61204: CALL_OW 45
61208: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61209: LD_VAR 0 2
61213: PPUSH
61214: LD_INT 1
61216: PPUSH
61217: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61221: LD_INT 35
61223: PPUSH
61224: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61228: LD_VAR 0 2
61232: PPUSH
61233: LD_INT 22
61235: PUSH
61236: LD_OWVAR 2
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PPUSH
61245: CALL_OW 69
61249: PPUSH
61250: LD_VAR 0 2
61254: PPUSH
61255: CALL_OW 74
61259: PPUSH
61260: CALL_OW 115
// until IsDead ( un ) ;
61264: LD_VAR 0 2
61268: PPUSH
61269: CALL_OW 301
61273: IFFALSE 61221
// end ;
61275: PPOPN 2
61277: END
// every 0 0$1 trigger StreamModeActive and sStu do
61278: LD_EXP 35
61282: PUSH
61283: LD_EXP 74
61287: AND
61288: IFFALSE 61304
61290: GO 61292
61292: DISABLE
// begin ToLua ( displayStucuk(); ) ;
61293: LD_STRING displayStucuk();
61295: PPUSH
61296: CALL_OW 559
// ResetFog ;
61300: CALL_OW 335
// end ;
61304: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
61305: LD_EXP 35
61309: PUSH
61310: LD_EXP 67
61314: AND
61315: IFFALSE 61456
61317: GO 61319
61319: DISABLE
61320: LD_INT 0
61322: PPUSH
61323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61324: LD_ADDR_VAR 0 2
61328: PUSH
61329: LD_INT 22
61331: PUSH
61332: LD_OWVAR 2
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 21
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PPUSH
61355: CALL_OW 69
61359: ST_TO_ADDR
// if not tmp then
61360: LD_VAR 0 2
61364: NOT
61365: IFFALSE 61369
// exit ;
61367: GO 61456
// un := tmp [ rand ( 1 , tmp ) ] ;
61369: LD_ADDR_VAR 0 1
61373: PUSH
61374: LD_VAR 0 2
61378: PUSH
61379: LD_INT 1
61381: PPUSH
61382: LD_VAR 0 2
61386: PPUSH
61387: CALL_OW 12
61391: ARRAY
61392: ST_TO_ADDR
// SetSide ( un , 0 ) ;
61393: LD_VAR 0 1
61397: PPUSH
61398: LD_INT 0
61400: PPUSH
61401: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
61405: LD_VAR 0 1
61409: PPUSH
61410: LD_OWVAR 3
61414: PUSH
61415: LD_VAR 0 1
61419: DIFF
61420: PPUSH
61421: LD_VAR 0 1
61425: PPUSH
61426: CALL_OW 74
61430: PPUSH
61431: CALL_OW 115
// wait ( 0 0$20 ) ;
61435: LD_INT 700
61437: PPUSH
61438: CALL_OW 67
// SetSide ( un , your_side ) ;
61442: LD_VAR 0 1
61446: PPUSH
61447: LD_OWVAR 2
61451: PPUSH
61452: CALL_OW 235
// end ;
61456: PPOPN 2
61458: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
61459: LD_EXP 35
61463: PUSH
61464: LD_EXP 68
61468: AND
61469: IFFALSE 61575
61471: GO 61473
61473: DISABLE
61474: LD_INT 0
61476: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61477: LD_ADDR_VAR 0 1
61481: PUSH
61482: LD_INT 22
61484: PUSH
61485: LD_OWVAR 2
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: LD_INT 30
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 30
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PPUSH
61526: CALL_OW 69
61530: ST_TO_ADDR
// if not depot then
61531: LD_VAR 0 1
61535: NOT
61536: IFFALSE 61540
// exit ;
61538: GO 61575
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
61540: LD_VAR 0 1
61544: PUSH
61545: LD_INT 1
61547: ARRAY
61548: PPUSH
61549: CALL_OW 250
61553: PPUSH
61554: LD_VAR 0 1
61558: PUSH
61559: LD_INT 1
61561: ARRAY
61562: PPUSH
61563: CALL_OW 251
61567: PPUSH
61568: LD_INT 70
61570: PPUSH
61571: CALL_OW 495
// end ;
61575: PPOPN 1
61577: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
61578: LD_EXP 35
61582: PUSH
61583: LD_EXP 69
61587: AND
61588: IFFALSE 61799
61590: GO 61592
61592: DISABLE
61593: LD_INT 0
61595: PPUSH
61596: PPUSH
61597: PPUSH
61598: PPUSH
61599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61600: LD_ADDR_VAR 0 5
61604: PUSH
61605: LD_INT 22
61607: PUSH
61608: LD_OWVAR 2
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 21
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PPUSH
61631: CALL_OW 69
61635: ST_TO_ADDR
// if not tmp then
61636: LD_VAR 0 5
61640: NOT
61641: IFFALSE 61645
// exit ;
61643: GO 61799
// for i in tmp do
61645: LD_ADDR_VAR 0 1
61649: PUSH
61650: LD_VAR 0 5
61654: PUSH
61655: FOR_IN
61656: IFFALSE 61797
// begin d := rand ( 0 , 5 ) ;
61658: LD_ADDR_VAR 0 4
61662: PUSH
61663: LD_INT 0
61665: PPUSH
61666: LD_INT 5
61668: PPUSH
61669: CALL_OW 12
61673: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
61674: LD_ADDR_VAR 0 2
61678: PUSH
61679: LD_VAR 0 1
61683: PPUSH
61684: CALL_OW 250
61688: PPUSH
61689: LD_VAR 0 4
61693: PPUSH
61694: LD_INT 3
61696: PPUSH
61697: LD_INT 12
61699: PPUSH
61700: CALL_OW 12
61704: PPUSH
61705: CALL_OW 272
61709: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
61710: LD_ADDR_VAR 0 3
61714: PUSH
61715: LD_VAR 0 1
61719: PPUSH
61720: CALL_OW 251
61724: PPUSH
61725: LD_VAR 0 4
61729: PPUSH
61730: LD_INT 3
61732: PPUSH
61733: LD_INT 12
61735: PPUSH
61736: CALL_OW 12
61740: PPUSH
61741: CALL_OW 273
61745: ST_TO_ADDR
// if ValidHex ( x , y ) then
61746: LD_VAR 0 2
61750: PPUSH
61751: LD_VAR 0 3
61755: PPUSH
61756: CALL_OW 488
61760: IFFALSE 61795
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
61762: LD_VAR 0 1
61766: PPUSH
61767: LD_VAR 0 2
61771: PPUSH
61772: LD_VAR 0 3
61776: PPUSH
61777: LD_INT 3
61779: PPUSH
61780: LD_INT 6
61782: PPUSH
61783: CALL_OW 12
61787: PPUSH
61788: LD_INT 1
61790: PPUSH
61791: CALL_OW 483
// end ;
61795: GO 61655
61797: POP
61798: POP
// end ;
61799: PPOPN 5
61801: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
61802: LD_EXP 35
61806: PUSH
61807: LD_EXP 70
61811: AND
61812: IFFALSE 61906
61814: GO 61816
61816: DISABLE
61817: LD_INT 0
61819: PPUSH
61820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61821: LD_ADDR_VAR 0 2
61825: PUSH
61826: LD_INT 22
61828: PUSH
61829: LD_OWVAR 2
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 32
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 21
61850: PUSH
61851: LD_INT 2
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: LIST
61862: PPUSH
61863: CALL_OW 69
61867: ST_TO_ADDR
// if not tmp then
61868: LD_VAR 0 2
61872: NOT
61873: IFFALSE 61877
// exit ;
61875: GO 61906
// for i in tmp do
61877: LD_ADDR_VAR 0 1
61881: PUSH
61882: LD_VAR 0 2
61886: PUSH
61887: FOR_IN
61888: IFFALSE 61904
// SetFuel ( i , 0 ) ;
61890: LD_VAR 0 1
61894: PPUSH
61895: LD_INT 0
61897: PPUSH
61898: CALL_OW 240
61902: GO 61887
61904: POP
61905: POP
// end ;
61906: PPOPN 2
61908: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
61909: LD_EXP 35
61913: PUSH
61914: LD_EXP 71
61918: AND
61919: IFFALSE 61985
61921: GO 61923
61923: DISABLE
61924: LD_INT 0
61926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61927: LD_ADDR_VAR 0 1
61931: PUSH
61932: LD_INT 22
61934: PUSH
61935: LD_OWVAR 2
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 30
61946: PUSH
61947: LD_INT 29
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PPUSH
61958: CALL_OW 69
61962: ST_TO_ADDR
// if not tmp then
61963: LD_VAR 0 1
61967: NOT
61968: IFFALSE 61972
// exit ;
61970: GO 61985
// DestroyUnit ( tmp [ 1 ] ) ;
61972: LD_VAR 0 1
61976: PUSH
61977: LD_INT 1
61979: ARRAY
61980: PPUSH
61981: CALL_OW 65
// end ;
61985: PPOPN 1
61987: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
61988: LD_EXP 35
61992: PUSH
61993: LD_EXP 73
61997: AND
61998: IFFALSE 62127
62000: GO 62002
62002: DISABLE
62003: LD_INT 0
62005: PPUSH
// begin uc_side := 0 ;
62006: LD_ADDR_OWVAR 20
62010: PUSH
62011: LD_INT 0
62013: ST_TO_ADDR
// uc_nation := nation_arabian ;
62014: LD_ADDR_OWVAR 21
62018: PUSH
62019: LD_INT 2
62021: ST_TO_ADDR
// hc_gallery :=  ;
62022: LD_ADDR_OWVAR 33
62026: PUSH
62027: LD_STRING 
62029: ST_TO_ADDR
// hc_name :=  ;
62030: LD_ADDR_OWVAR 26
62034: PUSH
62035: LD_STRING 
62037: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
62038: LD_INT 1
62040: PPUSH
62041: LD_INT 11
62043: PPUSH
62044: LD_INT 10
62046: PPUSH
62047: CALL_OW 380
// un := CreateHuman ;
62051: LD_ADDR_VAR 0 1
62055: PUSH
62056: CALL_OW 44
62060: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62061: LD_VAR 0 1
62065: PPUSH
62066: LD_INT 1
62068: PPUSH
62069: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62073: LD_INT 35
62075: PPUSH
62076: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62080: LD_VAR 0 1
62084: PPUSH
62085: LD_INT 22
62087: PUSH
62088: LD_OWVAR 2
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PPUSH
62097: CALL_OW 69
62101: PPUSH
62102: LD_VAR 0 1
62106: PPUSH
62107: CALL_OW 74
62111: PPUSH
62112: CALL_OW 115
// until IsDead ( un ) ;
62116: LD_VAR 0 1
62120: PPUSH
62121: CALL_OW 301
62125: IFFALSE 62073
// end ;
62127: PPOPN 1
62129: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
62130: LD_EXP 35
62134: PUSH
62135: LD_EXP 75
62139: AND
62140: IFFALSE 62152
62142: GO 62144
62144: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
62145: LD_STRING earthquake(getX(game), 0, 32)
62147: PPUSH
62148: CALL_OW 559
62152: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
62153: LD_EXP 35
62157: PUSH
62158: LD_EXP 76
62162: AND
62163: IFFALSE 62254
62165: GO 62167
62167: DISABLE
62168: LD_INT 0
62170: PPUSH
// begin enable ;
62171: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
62172: LD_ADDR_VAR 0 1
62176: PUSH
62177: LD_INT 22
62179: PUSH
62180: LD_OWVAR 2
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 21
62191: PUSH
62192: LD_INT 2
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 33
62201: PUSH
62202: LD_INT 3
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: PPUSH
62214: CALL_OW 69
62218: ST_TO_ADDR
// if not tmp then
62219: LD_VAR 0 1
62223: NOT
62224: IFFALSE 62228
// exit ;
62226: GO 62254
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62228: LD_VAR 0 1
62232: PUSH
62233: LD_INT 1
62235: PPUSH
62236: LD_VAR 0 1
62240: PPUSH
62241: CALL_OW 12
62245: ARRAY
62246: PPUSH
62247: LD_INT 1
62249: PPUSH
62250: CALL_OW 234
// end ;
62254: PPOPN 1
62256: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
62257: LD_EXP 35
62261: PUSH
62262: LD_EXP 77
62266: AND
62267: IFFALSE 62408
62269: GO 62271
62271: DISABLE
62272: LD_INT 0
62274: PPUSH
62275: PPUSH
62276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62277: LD_ADDR_VAR 0 3
62281: PUSH
62282: LD_INT 22
62284: PUSH
62285: LD_OWVAR 2
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 25
62296: PUSH
62297: LD_INT 1
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PPUSH
62308: CALL_OW 69
62312: ST_TO_ADDR
// if not tmp then
62313: LD_VAR 0 3
62317: NOT
62318: IFFALSE 62322
// exit ;
62320: GO 62408
// un := tmp [ rand ( 1 , tmp ) ] ;
62322: LD_ADDR_VAR 0 2
62326: PUSH
62327: LD_VAR 0 3
62331: PUSH
62332: LD_INT 1
62334: PPUSH
62335: LD_VAR 0 3
62339: PPUSH
62340: CALL_OW 12
62344: ARRAY
62345: ST_TO_ADDR
// if Crawls ( un ) then
62346: LD_VAR 0 2
62350: PPUSH
62351: CALL_OW 318
62355: IFFALSE 62366
// ComWalk ( un ) ;
62357: LD_VAR 0 2
62361: PPUSH
62362: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
62366: LD_VAR 0 2
62370: PPUSH
62371: LD_INT 9
62373: PPUSH
62374: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
62378: LD_INT 28
62380: PPUSH
62381: LD_OWVAR 2
62385: PPUSH
62386: LD_INT 2
62388: PPUSH
62389: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
62393: LD_INT 29
62395: PPUSH
62396: LD_OWVAR 2
62400: PPUSH
62401: LD_INT 2
62403: PPUSH
62404: CALL_OW 322
// end ;
62408: PPOPN 3
62410: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
62411: LD_EXP 35
62415: PUSH
62416: LD_EXP 78
62420: AND
62421: IFFALSE 62532
62423: GO 62425
62425: DISABLE
62426: LD_INT 0
62428: PPUSH
62429: PPUSH
62430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62431: LD_ADDR_VAR 0 3
62435: PUSH
62436: LD_INT 22
62438: PUSH
62439: LD_OWVAR 2
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 25
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PPUSH
62462: CALL_OW 69
62466: ST_TO_ADDR
// if not tmp then
62467: LD_VAR 0 3
62471: NOT
62472: IFFALSE 62476
// exit ;
62474: GO 62532
// un := tmp [ rand ( 1 , tmp ) ] ;
62476: LD_ADDR_VAR 0 2
62480: PUSH
62481: LD_VAR 0 3
62485: PUSH
62486: LD_INT 1
62488: PPUSH
62489: LD_VAR 0 3
62493: PPUSH
62494: CALL_OW 12
62498: ARRAY
62499: ST_TO_ADDR
// if Crawls ( un ) then
62500: LD_VAR 0 2
62504: PPUSH
62505: CALL_OW 318
62509: IFFALSE 62520
// ComWalk ( un ) ;
62511: LD_VAR 0 2
62515: PPUSH
62516: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62520: LD_VAR 0 2
62524: PPUSH
62525: LD_INT 8
62527: PPUSH
62528: CALL_OW 336
// end ;
62532: PPOPN 3
62534: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
62535: LD_EXP 35
62539: PUSH
62540: LD_EXP 79
62544: AND
62545: IFFALSE 62689
62547: GO 62549
62549: DISABLE
62550: LD_INT 0
62552: PPUSH
62553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
62554: LD_ADDR_VAR 0 2
62558: PUSH
62559: LD_INT 22
62561: PUSH
62562: LD_OWVAR 2
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 21
62573: PUSH
62574: LD_INT 2
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: LD_INT 34
62586: PUSH
62587: LD_INT 12
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 34
62596: PUSH
62597: LD_INT 51
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 34
62606: PUSH
62607: LD_INT 32
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: PPUSH
62625: CALL_OW 69
62629: ST_TO_ADDR
// if not tmp then
62630: LD_VAR 0 2
62634: NOT
62635: IFFALSE 62639
// exit ;
62637: GO 62689
// for i in tmp do
62639: LD_ADDR_VAR 0 1
62643: PUSH
62644: LD_VAR 0 2
62648: PUSH
62649: FOR_IN
62650: IFFALSE 62687
// if GetCargo ( i , mat_artifact ) = 0 then
62652: LD_VAR 0 1
62656: PPUSH
62657: LD_INT 4
62659: PPUSH
62660: CALL_OW 289
62664: PUSH
62665: LD_INT 0
62667: EQUAL
62668: IFFALSE 62685
// SetCargo ( i , mat_siberit , 100 ) ;
62670: LD_VAR 0 1
62674: PPUSH
62675: LD_INT 3
62677: PPUSH
62678: LD_INT 100
62680: PPUSH
62681: CALL_OW 290
62685: GO 62649
62687: POP
62688: POP
// end ;
62689: PPOPN 2
62691: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
62692: LD_EXP 35
62696: PUSH
62697: LD_EXP 80
62701: AND
62702: IFFALSE 62885
62704: GO 62706
62706: DISABLE
62707: LD_INT 0
62709: PPUSH
62710: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62711: LD_ADDR_VAR 0 2
62715: PUSH
62716: LD_INT 22
62718: PUSH
62719: LD_OWVAR 2
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PPUSH
62728: CALL_OW 69
62732: ST_TO_ADDR
// if not tmp then
62733: LD_VAR 0 2
62737: NOT
62738: IFFALSE 62742
// exit ;
62740: GO 62885
// for i := 1 to 2 do
62742: LD_ADDR_VAR 0 1
62746: PUSH
62747: DOUBLE
62748: LD_INT 1
62750: DEC
62751: ST_TO_ADDR
62752: LD_INT 2
62754: PUSH
62755: FOR_TO
62756: IFFALSE 62883
// begin uc_side := your_side ;
62758: LD_ADDR_OWVAR 20
62762: PUSH
62763: LD_OWVAR 2
62767: ST_TO_ADDR
// uc_nation := nation_american ;
62768: LD_ADDR_OWVAR 21
62772: PUSH
62773: LD_INT 1
62775: ST_TO_ADDR
// vc_chassis := us_morphling ;
62776: LD_ADDR_OWVAR 37
62780: PUSH
62781: LD_INT 5
62783: ST_TO_ADDR
// vc_engine := engine_siberite ;
62784: LD_ADDR_OWVAR 39
62788: PUSH
62789: LD_INT 3
62791: ST_TO_ADDR
// vc_control := control_computer ;
62792: LD_ADDR_OWVAR 38
62796: PUSH
62797: LD_INT 3
62799: ST_TO_ADDR
// vc_weapon := us_double_laser ;
62800: LD_ADDR_OWVAR 40
62804: PUSH
62805: LD_INT 10
62807: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62808: LD_VAR 0 2
62812: PUSH
62813: LD_INT 1
62815: ARRAY
62816: PPUSH
62817: CALL_OW 310
62821: NOT
62822: IFFALSE 62869
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62824: CALL_OW 45
62828: PPUSH
62829: LD_VAR 0 2
62833: PUSH
62834: LD_INT 1
62836: ARRAY
62837: PPUSH
62838: CALL_OW 250
62842: PPUSH
62843: LD_VAR 0 2
62847: PUSH
62848: LD_INT 1
62850: ARRAY
62851: PPUSH
62852: CALL_OW 251
62856: PPUSH
62857: LD_INT 12
62859: PPUSH
62860: LD_INT 1
62862: PPUSH
62863: CALL_OW 50
62867: GO 62881
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
62869: CALL_OW 45
62873: PPUSH
62874: LD_INT 1
62876: PPUSH
62877: CALL_OW 51
// end ;
62881: GO 62755
62883: POP
62884: POP
// end ;
62885: PPOPN 2
62887: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
62888: LD_EXP 35
62892: PUSH
62893: LD_EXP 81
62897: AND
62898: IFFALSE 63120
62900: GO 62902
62902: DISABLE
62903: LD_INT 0
62905: PPUSH
62906: PPUSH
62907: PPUSH
62908: PPUSH
62909: PPUSH
62910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62911: LD_ADDR_VAR 0 6
62915: PUSH
62916: LD_INT 22
62918: PUSH
62919: LD_OWVAR 2
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 21
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 3
62940: PUSH
62941: LD_INT 23
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: LIST
62959: PPUSH
62960: CALL_OW 69
62964: ST_TO_ADDR
// if not tmp then
62965: LD_VAR 0 6
62969: NOT
62970: IFFALSE 62974
// exit ;
62972: GO 63120
// s1 := rand ( 1 , 4 ) ;
62974: LD_ADDR_VAR 0 2
62978: PUSH
62979: LD_INT 1
62981: PPUSH
62982: LD_INT 4
62984: PPUSH
62985: CALL_OW 12
62989: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
62990: LD_ADDR_VAR 0 4
62994: PUSH
62995: LD_VAR 0 6
62999: PUSH
63000: LD_INT 1
63002: ARRAY
63003: PPUSH
63004: LD_VAR 0 2
63008: PPUSH
63009: CALL_OW 259
63013: ST_TO_ADDR
// if s1 = 1 then
63014: LD_VAR 0 2
63018: PUSH
63019: LD_INT 1
63021: EQUAL
63022: IFFALSE 63042
// s2 := rand ( 2 , 4 ) else
63024: LD_ADDR_VAR 0 3
63028: PUSH
63029: LD_INT 2
63031: PPUSH
63032: LD_INT 4
63034: PPUSH
63035: CALL_OW 12
63039: ST_TO_ADDR
63040: GO 63050
// s2 := 1 ;
63042: LD_ADDR_VAR 0 3
63046: PUSH
63047: LD_INT 1
63049: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
63050: LD_ADDR_VAR 0 5
63054: PUSH
63055: LD_VAR 0 6
63059: PUSH
63060: LD_INT 1
63062: ARRAY
63063: PPUSH
63064: LD_VAR 0 3
63068: PPUSH
63069: CALL_OW 259
63073: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
63074: LD_VAR 0 6
63078: PUSH
63079: LD_INT 1
63081: ARRAY
63082: PPUSH
63083: LD_VAR 0 2
63087: PPUSH
63088: LD_VAR 0 5
63092: PPUSH
63093: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
63097: LD_VAR 0 6
63101: PUSH
63102: LD_INT 1
63104: ARRAY
63105: PPUSH
63106: LD_VAR 0 3
63110: PPUSH
63111: LD_VAR 0 4
63115: PPUSH
63116: CALL_OW 237
// end ;
63120: PPOPN 6
63122: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
63123: LD_EXP 35
63127: PUSH
63128: LD_EXP 82
63132: AND
63133: IFFALSE 63212
63135: GO 63137
63137: DISABLE
63138: LD_INT 0
63140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
63141: LD_ADDR_VAR 0 1
63145: PUSH
63146: LD_INT 22
63148: PUSH
63149: LD_OWVAR 2
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 30
63160: PUSH
63161: LD_INT 3
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PPUSH
63172: CALL_OW 69
63176: ST_TO_ADDR
// if not tmp then
63177: LD_VAR 0 1
63181: NOT
63182: IFFALSE 63186
// exit ;
63184: GO 63212
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63186: LD_VAR 0 1
63190: PUSH
63191: LD_INT 1
63193: PPUSH
63194: LD_VAR 0 1
63198: PPUSH
63199: CALL_OW 12
63203: ARRAY
63204: PPUSH
63205: LD_INT 1
63207: PPUSH
63208: CALL_OW 234
// end ;
63212: PPOPN 1
63214: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
63215: LD_EXP 35
63219: PUSH
63220: LD_EXP 83
63224: AND
63225: IFFALSE 63337
63227: GO 63229
63229: DISABLE
63230: LD_INT 0
63232: PPUSH
63233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
63234: LD_ADDR_VAR 0 2
63238: PUSH
63239: LD_INT 22
63241: PUSH
63242: LD_OWVAR 2
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: LD_INT 30
63256: PUSH
63257: LD_INT 27
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 30
63266: PUSH
63267: LD_INT 26
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 30
63276: PUSH
63277: LD_INT 28
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PPUSH
63294: CALL_OW 69
63298: ST_TO_ADDR
// if not tmp then
63299: LD_VAR 0 2
63303: NOT
63304: IFFALSE 63308
// exit ;
63306: GO 63337
// for i in tmp do
63308: LD_ADDR_VAR 0 1
63312: PUSH
63313: LD_VAR 0 2
63317: PUSH
63318: FOR_IN
63319: IFFALSE 63335
// SetLives ( i , 1 ) ;
63321: LD_VAR 0 1
63325: PPUSH
63326: LD_INT 1
63328: PPUSH
63329: CALL_OW 234
63333: GO 63318
63335: POP
63336: POP
// end ;
63337: PPOPN 2
63339: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
63340: LD_EXP 35
63344: PUSH
63345: LD_EXP 84
63349: AND
63350: IFFALSE 63637
63352: GO 63354
63354: DISABLE
63355: LD_INT 0
63357: PPUSH
63358: PPUSH
63359: PPUSH
// begin i := rand ( 1 , 7 ) ;
63360: LD_ADDR_VAR 0 1
63364: PUSH
63365: LD_INT 1
63367: PPUSH
63368: LD_INT 7
63370: PPUSH
63371: CALL_OW 12
63375: ST_TO_ADDR
// case i of 1 :
63376: LD_VAR 0 1
63380: PUSH
63381: LD_INT 1
63383: DOUBLE
63384: EQUAL
63385: IFTRUE 63389
63387: GO 63399
63389: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
63390: LD_STRING earthquake(getX(game), 0, 32)
63392: PPUSH
63393: CALL_OW 559
63397: GO 63637
63399: LD_INT 2
63401: DOUBLE
63402: EQUAL
63403: IFTRUE 63407
63405: GO 63421
63407: POP
// begin ToLua ( displayStucuk(); ) ;
63408: LD_STRING displayStucuk();
63410: PPUSH
63411: CALL_OW 559
// ResetFog ;
63415: CALL_OW 335
// end ; 3 :
63419: GO 63637
63421: LD_INT 3
63423: DOUBLE
63424: EQUAL
63425: IFTRUE 63429
63427: GO 63533
63429: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63430: LD_ADDR_VAR 0 2
63434: PUSH
63435: LD_INT 22
63437: PUSH
63438: LD_OWVAR 2
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 25
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PPUSH
63461: CALL_OW 69
63465: ST_TO_ADDR
// if not tmp then
63466: LD_VAR 0 2
63470: NOT
63471: IFFALSE 63475
// exit ;
63473: GO 63637
// un := tmp [ rand ( 1 , tmp ) ] ;
63475: LD_ADDR_VAR 0 3
63479: PUSH
63480: LD_VAR 0 2
63484: PUSH
63485: LD_INT 1
63487: PPUSH
63488: LD_VAR 0 2
63492: PPUSH
63493: CALL_OW 12
63497: ARRAY
63498: ST_TO_ADDR
// if Crawls ( un ) then
63499: LD_VAR 0 3
63503: PPUSH
63504: CALL_OW 318
63508: IFFALSE 63519
// ComWalk ( un ) ;
63510: LD_VAR 0 3
63514: PPUSH
63515: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63519: LD_VAR 0 3
63523: PPUSH
63524: LD_INT 8
63526: PPUSH
63527: CALL_OW 336
// end ; 4 :
63531: GO 63637
63533: LD_INT 4
63535: DOUBLE
63536: EQUAL
63537: IFTRUE 63541
63539: GO 63615
63541: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63542: LD_ADDR_VAR 0 2
63546: PUSH
63547: LD_INT 22
63549: PUSH
63550: LD_OWVAR 2
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 30
63561: PUSH
63562: LD_INT 29
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PPUSH
63573: CALL_OW 69
63577: ST_TO_ADDR
// if not tmp then
63578: LD_VAR 0 2
63582: NOT
63583: IFFALSE 63587
// exit ;
63585: GO 63637
// CenterNowOnUnits ( tmp [ 1 ] ) ;
63587: LD_VAR 0 2
63591: PUSH
63592: LD_INT 1
63594: ARRAY
63595: PPUSH
63596: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
63600: LD_VAR 0 2
63604: PUSH
63605: LD_INT 1
63607: ARRAY
63608: PPUSH
63609: CALL_OW 65
// end ; 5 .. 7 :
63613: GO 63637
63615: LD_INT 5
63617: DOUBLE
63618: GREATEREQUAL
63619: IFFALSE 63627
63621: LD_INT 7
63623: DOUBLE
63624: LESSEQUAL
63625: IFTRUE 63629
63627: GO 63636
63629: POP
// StreamSibBomb ; end ;
63630: CALL 59874 0 0
63634: GO 63637
63636: POP
// end ;
63637: PPOPN 3
63639: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
63640: LD_EXP 35
63644: PUSH
63645: LD_EXP 85
63649: AND
63650: IFFALSE 63806
63652: GO 63654
63654: DISABLE
63655: LD_INT 0
63657: PPUSH
63658: PPUSH
63659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
63660: LD_ADDR_VAR 0 2
63664: PUSH
63665: LD_INT 81
63667: PUSH
63668: LD_OWVAR 2
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 2
63679: PUSH
63680: LD_INT 21
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 21
63692: PUSH
63693: LD_INT 2
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: LIST
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PPUSH
63709: CALL_OW 69
63713: ST_TO_ADDR
// if not tmp then
63714: LD_VAR 0 2
63718: NOT
63719: IFFALSE 63723
// exit ;
63721: GO 63806
// p := 0 ;
63723: LD_ADDR_VAR 0 3
63727: PUSH
63728: LD_INT 0
63730: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63731: LD_INT 35
63733: PPUSH
63734: CALL_OW 67
// p := p + 1 ;
63738: LD_ADDR_VAR 0 3
63742: PUSH
63743: LD_VAR 0 3
63747: PUSH
63748: LD_INT 1
63750: PLUS
63751: ST_TO_ADDR
// for i in tmp do
63752: LD_ADDR_VAR 0 1
63756: PUSH
63757: LD_VAR 0 2
63761: PUSH
63762: FOR_IN
63763: IFFALSE 63794
// if GetLives ( i ) < 1000 then
63765: LD_VAR 0 1
63769: PPUSH
63770: CALL_OW 256
63774: PUSH
63775: LD_INT 1000
63777: LESS
63778: IFFALSE 63792
// SetLives ( i , 1000 ) ;
63780: LD_VAR 0 1
63784: PPUSH
63785: LD_INT 1000
63787: PPUSH
63788: CALL_OW 234
63792: GO 63762
63794: POP
63795: POP
// until p > 20 ;
63796: LD_VAR 0 3
63800: PUSH
63801: LD_INT 20
63803: GREATER
63804: IFFALSE 63731
// end ;
63806: PPOPN 3
63808: END
// every 0 0$1 trigger StreamModeActive and sTime do
63809: LD_EXP 35
63813: PUSH
63814: LD_EXP 86
63818: AND
63819: IFFALSE 63854
63821: GO 63823
63823: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63824: LD_INT 28
63826: PPUSH
63827: LD_OWVAR 2
63831: PPUSH
63832: LD_INT 2
63834: PPUSH
63835: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63839: LD_INT 30
63841: PPUSH
63842: LD_OWVAR 2
63846: PPUSH
63847: LD_INT 2
63849: PPUSH
63850: CALL_OW 322
// end ;
63854: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63855: LD_EXP 35
63859: PUSH
63860: LD_EXP 87
63864: AND
63865: IFFALSE 63986
63867: GO 63869
63869: DISABLE
63870: LD_INT 0
63872: PPUSH
63873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63874: LD_ADDR_VAR 0 2
63878: PUSH
63879: LD_INT 22
63881: PUSH
63882: LD_OWVAR 2
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 21
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 3
63903: PUSH
63904: LD_INT 23
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: LIST
63922: PPUSH
63923: CALL_OW 69
63927: ST_TO_ADDR
// if not tmp then
63928: LD_VAR 0 2
63932: NOT
63933: IFFALSE 63937
// exit ;
63935: GO 63986
// for i in tmp do
63937: LD_ADDR_VAR 0 1
63941: PUSH
63942: LD_VAR 0 2
63946: PUSH
63947: FOR_IN
63948: IFFALSE 63984
// begin if Crawls ( i ) then
63950: LD_VAR 0 1
63954: PPUSH
63955: CALL_OW 318
63959: IFFALSE 63970
// ComWalk ( i ) ;
63961: LD_VAR 0 1
63965: PPUSH
63966: CALL_OW 138
// SetClass ( i , 2 ) ;
63970: LD_VAR 0 1
63974: PPUSH
63975: LD_INT 2
63977: PPUSH
63978: CALL_OW 336
// end ;
63982: GO 63947
63984: POP
63985: POP
// end ;
63986: PPOPN 2
63988: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
63989: LD_EXP 35
63993: PUSH
63994: LD_EXP 88
63998: AND
63999: IFFALSE 64287
64001: GO 64003
64003: DISABLE
64004: LD_INT 0
64006: PPUSH
64007: PPUSH
64008: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
64009: LD_OWVAR 2
64013: PPUSH
64014: LD_INT 9
64016: PPUSH
64017: LD_INT 1
64019: PPUSH
64020: LD_INT 1
64022: PPUSH
64023: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
64027: LD_INT 9
64029: PPUSH
64030: LD_OWVAR 2
64034: PPUSH
64035: CALL_OW 343
// uc_side := 9 ;
64039: LD_ADDR_OWVAR 20
64043: PUSH
64044: LD_INT 9
64046: ST_TO_ADDR
// uc_nation := 2 ;
64047: LD_ADDR_OWVAR 21
64051: PUSH
64052: LD_INT 2
64054: ST_TO_ADDR
// hc_name := Dark Warrior ;
64055: LD_ADDR_OWVAR 26
64059: PUSH
64060: LD_STRING Dark Warrior
64062: ST_TO_ADDR
// hc_gallery :=  ;
64063: LD_ADDR_OWVAR 33
64067: PUSH
64068: LD_STRING 
64070: ST_TO_ADDR
// hc_noskilllimit := true ;
64071: LD_ADDR_OWVAR 76
64075: PUSH
64076: LD_INT 1
64078: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
64079: LD_ADDR_OWVAR 31
64083: PUSH
64084: LD_INT 30
64086: PUSH
64087: LD_INT 30
64089: PUSH
64090: LD_INT 30
64092: PUSH
64093: LD_INT 30
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: ST_TO_ADDR
// un := CreateHuman ;
64102: LD_ADDR_VAR 0 3
64106: PUSH
64107: CALL_OW 44
64111: ST_TO_ADDR
// hc_noskilllimit := false ;
64112: LD_ADDR_OWVAR 76
64116: PUSH
64117: LD_INT 0
64119: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64120: LD_VAR 0 3
64124: PPUSH
64125: LD_INT 1
64127: PPUSH
64128: CALL_OW 51
// ToLua ( playRanger() ) ;
64132: LD_STRING playRanger()
64134: PPUSH
64135: CALL_OW 559
// p := 0 ;
64139: LD_ADDR_VAR 0 2
64143: PUSH
64144: LD_INT 0
64146: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64147: LD_INT 35
64149: PPUSH
64150: CALL_OW 67
// p := p + 1 ;
64154: LD_ADDR_VAR 0 2
64158: PUSH
64159: LD_VAR 0 2
64163: PUSH
64164: LD_INT 1
64166: PLUS
64167: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
64168: LD_VAR 0 3
64172: PPUSH
64173: CALL_OW 256
64177: PUSH
64178: LD_INT 1000
64180: LESS
64181: IFFALSE 64195
// SetLives ( un , 1000 ) ;
64183: LD_VAR 0 3
64187: PPUSH
64188: LD_INT 1000
64190: PPUSH
64191: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
64195: LD_VAR 0 3
64199: PPUSH
64200: LD_INT 81
64202: PUSH
64203: LD_OWVAR 2
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 91
64214: PUSH
64215: LD_VAR 0 3
64219: PUSH
64220: LD_INT 30
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PPUSH
64232: CALL_OW 69
64236: PPUSH
64237: LD_VAR 0 3
64241: PPUSH
64242: CALL_OW 74
64246: PPUSH
64247: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
64251: LD_VAR 0 2
64255: PUSH
64256: LD_INT 80
64258: GREATER
64259: PUSH
64260: LD_VAR 0 3
64264: PPUSH
64265: CALL_OW 301
64269: OR
64270: IFFALSE 64147
// if un then
64272: LD_VAR 0 3
64276: IFFALSE 64287
// RemoveUnit ( un ) ;
64278: LD_VAR 0 3
64282: PPUSH
64283: CALL_OW 64
// end ;
64287: PPOPN 3
64289: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
64290: LD_EXP 89
64294: IFFALSE 64410
64296: GO 64298
64298: DISABLE
64299: LD_INT 0
64301: PPUSH
64302: PPUSH
64303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64304: LD_ADDR_VAR 0 2
64308: PUSH
64309: LD_INT 81
64311: PUSH
64312: LD_OWVAR 2
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 21
64323: PUSH
64324: LD_INT 1
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PPUSH
64335: CALL_OW 69
64339: ST_TO_ADDR
// ToLua ( playComputer() ) ;
64340: LD_STRING playComputer()
64342: PPUSH
64343: CALL_OW 559
// if not tmp then
64347: LD_VAR 0 2
64351: NOT
64352: IFFALSE 64356
// exit ;
64354: GO 64410
// for i in tmp do
64356: LD_ADDR_VAR 0 1
64360: PUSH
64361: LD_VAR 0 2
64365: PUSH
64366: FOR_IN
64367: IFFALSE 64408
// for j := 1 to 4 do
64369: LD_ADDR_VAR 0 3
64373: PUSH
64374: DOUBLE
64375: LD_INT 1
64377: DEC
64378: ST_TO_ADDR
64379: LD_INT 4
64381: PUSH
64382: FOR_TO
64383: IFFALSE 64404
// SetSkill ( i , j , 10 ) ;
64385: LD_VAR 0 1
64389: PPUSH
64390: LD_VAR 0 3
64394: PPUSH
64395: LD_INT 10
64397: PPUSH
64398: CALL_OW 237
64402: GO 64382
64404: POP
64405: POP
64406: GO 64366
64408: POP
64409: POP
// end ;
64410: PPOPN 3
64412: END
// every 0 0$1 trigger s30 do var i , tmp ;
64413: LD_EXP 90
64417: IFFALSE 64486
64419: GO 64421
64421: DISABLE
64422: LD_INT 0
64424: PPUSH
64425: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64426: LD_ADDR_VAR 0 2
64430: PUSH
64431: LD_INT 22
64433: PUSH
64434: LD_OWVAR 2
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PPUSH
64443: CALL_OW 69
64447: ST_TO_ADDR
// if not tmp then
64448: LD_VAR 0 2
64452: NOT
64453: IFFALSE 64457
// exit ;
64455: GO 64486
// for i in tmp do
64457: LD_ADDR_VAR 0 1
64461: PUSH
64462: LD_VAR 0 2
64466: PUSH
64467: FOR_IN
64468: IFFALSE 64484
// SetLives ( i , 300 ) ;
64470: LD_VAR 0 1
64474: PPUSH
64475: LD_INT 300
64477: PPUSH
64478: CALL_OW 234
64482: GO 64467
64484: POP
64485: POP
// end ;
64486: PPOPN 2
64488: END
// every 0 0$1 trigger s60 do var i , tmp ;
64489: LD_EXP 91
64493: IFFALSE 64562
64495: GO 64497
64497: DISABLE
64498: LD_INT 0
64500: PPUSH
64501: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64502: LD_ADDR_VAR 0 2
64506: PUSH
64507: LD_INT 22
64509: PUSH
64510: LD_OWVAR 2
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PPUSH
64519: CALL_OW 69
64523: ST_TO_ADDR
// if not tmp then
64524: LD_VAR 0 2
64528: NOT
64529: IFFALSE 64533
// exit ;
64531: GO 64562
// for i in tmp do
64533: LD_ADDR_VAR 0 1
64537: PUSH
64538: LD_VAR 0 2
64542: PUSH
64543: FOR_IN
64544: IFFALSE 64560
// SetLives ( i , 600 ) ;
64546: LD_VAR 0 1
64550: PPUSH
64551: LD_INT 600
64553: PPUSH
64554: CALL_OW 234
64558: GO 64543
64560: POP
64561: POP
// end ;
64562: PPOPN 2
64564: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64565: LD_INT 0
64567: PPUSH
// case cmd of 301 :
64568: LD_VAR 0 1
64572: PUSH
64573: LD_INT 301
64575: DOUBLE
64576: EQUAL
64577: IFTRUE 64581
64579: GO 64613
64581: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
64582: LD_VAR 0 6
64586: PPUSH
64587: LD_VAR 0 7
64591: PPUSH
64592: LD_VAR 0 8
64596: PPUSH
64597: LD_VAR 0 4
64601: PPUSH
64602: LD_VAR 0 5
64606: PPUSH
64607: CALL 65814 0 5
64611: GO 64734
64613: LD_INT 302
64615: DOUBLE
64616: EQUAL
64617: IFTRUE 64621
64619: GO 64658
64621: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
64622: LD_VAR 0 6
64626: PPUSH
64627: LD_VAR 0 7
64631: PPUSH
64632: LD_VAR 0 8
64636: PPUSH
64637: LD_VAR 0 9
64641: PPUSH
64642: LD_VAR 0 4
64646: PPUSH
64647: LD_VAR 0 5
64651: PPUSH
64652: CALL 65905 0 6
64656: GO 64734
64658: LD_INT 303
64660: DOUBLE
64661: EQUAL
64662: IFTRUE 64666
64664: GO 64703
64666: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
64667: LD_VAR 0 6
64671: PPUSH
64672: LD_VAR 0 7
64676: PPUSH
64677: LD_VAR 0 8
64681: PPUSH
64682: LD_VAR 0 9
64686: PPUSH
64687: LD_VAR 0 4
64691: PPUSH
64692: LD_VAR 0 5
64696: PPUSH
64697: CALL 64739 0 6
64701: GO 64734
64703: LD_INT 304
64705: DOUBLE
64706: EQUAL
64707: IFTRUE 64711
64709: GO 64733
64711: POP
// hHackTeleport ( unit , x , y ) ; end ;
64712: LD_VAR 0 2
64716: PPUSH
64717: LD_VAR 0 4
64721: PPUSH
64722: LD_VAR 0 5
64726: PPUSH
64727: CALL 66498 0 3
64731: GO 64734
64733: POP
// end ;
64734: LD_VAR 0 12
64738: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
64739: LD_INT 0
64741: PPUSH
64742: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
64743: LD_VAR 0 1
64747: PUSH
64748: LD_INT 1
64750: LESS
64751: PUSH
64752: LD_VAR 0 1
64756: PUSH
64757: LD_INT 3
64759: GREATER
64760: OR
64761: PUSH
64762: LD_VAR 0 5
64766: PPUSH
64767: LD_VAR 0 6
64771: PPUSH
64772: CALL_OW 428
64776: OR
64777: IFFALSE 64781
// exit ;
64779: GO 65501
// uc_side := your_side ;
64781: LD_ADDR_OWVAR 20
64785: PUSH
64786: LD_OWVAR 2
64790: ST_TO_ADDR
// uc_nation := nation ;
64791: LD_ADDR_OWVAR 21
64795: PUSH
64796: LD_VAR 0 1
64800: ST_TO_ADDR
// bc_level = 1 ;
64801: LD_ADDR_OWVAR 43
64805: PUSH
64806: LD_INT 1
64808: ST_TO_ADDR
// case btype of 1 :
64809: LD_VAR 0 2
64813: PUSH
64814: LD_INT 1
64816: DOUBLE
64817: EQUAL
64818: IFTRUE 64822
64820: GO 64833
64822: POP
// bc_type := b_depot ; 2 :
64823: LD_ADDR_OWVAR 42
64827: PUSH
64828: LD_INT 0
64830: ST_TO_ADDR
64831: GO 65445
64833: LD_INT 2
64835: DOUBLE
64836: EQUAL
64837: IFTRUE 64841
64839: GO 64852
64841: POP
// bc_type := b_warehouse ; 3 :
64842: LD_ADDR_OWVAR 42
64846: PUSH
64847: LD_INT 1
64849: ST_TO_ADDR
64850: GO 65445
64852: LD_INT 3
64854: DOUBLE
64855: EQUAL
64856: IFTRUE 64860
64858: GO 64871
64860: POP
// bc_type := b_lab ; 4 .. 9 :
64861: LD_ADDR_OWVAR 42
64865: PUSH
64866: LD_INT 6
64868: ST_TO_ADDR
64869: GO 65445
64871: LD_INT 4
64873: DOUBLE
64874: GREATEREQUAL
64875: IFFALSE 64883
64877: LD_INT 9
64879: DOUBLE
64880: LESSEQUAL
64881: IFTRUE 64885
64883: GO 64937
64885: POP
// begin bc_type := b_lab_half ;
64886: LD_ADDR_OWVAR 42
64890: PUSH
64891: LD_INT 7
64893: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
64894: LD_ADDR_OWVAR 44
64898: PUSH
64899: LD_INT 10
64901: PUSH
64902: LD_INT 11
64904: PUSH
64905: LD_INT 12
64907: PUSH
64908: LD_INT 15
64910: PUSH
64911: LD_INT 14
64913: PUSH
64914: LD_INT 13
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: PUSH
64925: LD_VAR 0 2
64929: PUSH
64930: LD_INT 3
64932: MINUS
64933: ARRAY
64934: ST_TO_ADDR
// end ; 10 .. 13 :
64935: GO 65445
64937: LD_INT 10
64939: DOUBLE
64940: GREATEREQUAL
64941: IFFALSE 64949
64943: LD_INT 13
64945: DOUBLE
64946: LESSEQUAL
64947: IFTRUE 64951
64949: GO 65028
64951: POP
// begin bc_type := b_lab_full ;
64952: LD_ADDR_OWVAR 42
64956: PUSH
64957: LD_INT 8
64959: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
64960: LD_ADDR_OWVAR 44
64964: PUSH
64965: LD_INT 10
64967: PUSH
64968: LD_INT 12
64970: PUSH
64971: LD_INT 14
64973: PUSH
64974: LD_INT 13
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: PUSH
64983: LD_VAR 0 2
64987: PUSH
64988: LD_INT 9
64990: MINUS
64991: ARRAY
64992: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
64993: LD_ADDR_OWVAR 45
64997: PUSH
64998: LD_INT 11
65000: PUSH
65001: LD_INT 15
65003: PUSH
65004: LD_INT 12
65006: PUSH
65007: LD_INT 15
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: PUSH
65016: LD_VAR 0 2
65020: PUSH
65021: LD_INT 9
65023: MINUS
65024: ARRAY
65025: ST_TO_ADDR
// end ; 14 :
65026: GO 65445
65028: LD_INT 14
65030: DOUBLE
65031: EQUAL
65032: IFTRUE 65036
65034: GO 65047
65036: POP
// bc_type := b_workshop ; 15 :
65037: LD_ADDR_OWVAR 42
65041: PUSH
65042: LD_INT 2
65044: ST_TO_ADDR
65045: GO 65445
65047: LD_INT 15
65049: DOUBLE
65050: EQUAL
65051: IFTRUE 65055
65053: GO 65066
65055: POP
// bc_type := b_factory ; 16 :
65056: LD_ADDR_OWVAR 42
65060: PUSH
65061: LD_INT 3
65063: ST_TO_ADDR
65064: GO 65445
65066: LD_INT 16
65068: DOUBLE
65069: EQUAL
65070: IFTRUE 65074
65072: GO 65085
65074: POP
// bc_type := b_ext_gun ; 17 :
65075: LD_ADDR_OWVAR 42
65079: PUSH
65080: LD_INT 17
65082: ST_TO_ADDR
65083: GO 65445
65085: LD_INT 17
65087: DOUBLE
65088: EQUAL
65089: IFTRUE 65093
65091: GO 65121
65093: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
65094: LD_ADDR_OWVAR 42
65098: PUSH
65099: LD_INT 19
65101: PUSH
65102: LD_INT 23
65104: PUSH
65105: LD_INT 19
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: LIST
65112: PUSH
65113: LD_VAR 0 1
65117: ARRAY
65118: ST_TO_ADDR
65119: GO 65445
65121: LD_INT 18
65123: DOUBLE
65124: EQUAL
65125: IFTRUE 65129
65127: GO 65140
65129: POP
// bc_type := b_ext_radar ; 19 :
65130: LD_ADDR_OWVAR 42
65134: PUSH
65135: LD_INT 20
65137: ST_TO_ADDR
65138: GO 65445
65140: LD_INT 19
65142: DOUBLE
65143: EQUAL
65144: IFTRUE 65148
65146: GO 65159
65148: POP
// bc_type := b_ext_radio ; 20 :
65149: LD_ADDR_OWVAR 42
65153: PUSH
65154: LD_INT 22
65156: ST_TO_ADDR
65157: GO 65445
65159: LD_INT 20
65161: DOUBLE
65162: EQUAL
65163: IFTRUE 65167
65165: GO 65178
65167: POP
// bc_type := b_ext_siberium ; 21 :
65168: LD_ADDR_OWVAR 42
65172: PUSH
65173: LD_INT 21
65175: ST_TO_ADDR
65176: GO 65445
65178: LD_INT 21
65180: DOUBLE
65181: EQUAL
65182: IFTRUE 65186
65184: GO 65197
65186: POP
// bc_type := b_ext_computer ; 22 :
65187: LD_ADDR_OWVAR 42
65191: PUSH
65192: LD_INT 24
65194: ST_TO_ADDR
65195: GO 65445
65197: LD_INT 22
65199: DOUBLE
65200: EQUAL
65201: IFTRUE 65205
65203: GO 65216
65205: POP
// bc_type := b_ext_track ; 23 :
65206: LD_ADDR_OWVAR 42
65210: PUSH
65211: LD_INT 16
65213: ST_TO_ADDR
65214: GO 65445
65216: LD_INT 23
65218: DOUBLE
65219: EQUAL
65220: IFTRUE 65224
65222: GO 65235
65224: POP
// bc_type := b_ext_laser ; 24 :
65225: LD_ADDR_OWVAR 42
65229: PUSH
65230: LD_INT 25
65232: ST_TO_ADDR
65233: GO 65445
65235: LD_INT 24
65237: DOUBLE
65238: EQUAL
65239: IFTRUE 65243
65241: GO 65254
65243: POP
// bc_type := b_control_tower ; 25 :
65244: LD_ADDR_OWVAR 42
65248: PUSH
65249: LD_INT 36
65251: ST_TO_ADDR
65252: GO 65445
65254: LD_INT 25
65256: DOUBLE
65257: EQUAL
65258: IFTRUE 65262
65260: GO 65273
65262: POP
// bc_type := b_breastwork ; 26 :
65263: LD_ADDR_OWVAR 42
65267: PUSH
65268: LD_INT 31
65270: ST_TO_ADDR
65271: GO 65445
65273: LD_INT 26
65275: DOUBLE
65276: EQUAL
65277: IFTRUE 65281
65279: GO 65292
65281: POP
// bc_type := b_bunker ; 27 :
65282: LD_ADDR_OWVAR 42
65286: PUSH
65287: LD_INT 32
65289: ST_TO_ADDR
65290: GO 65445
65292: LD_INT 27
65294: DOUBLE
65295: EQUAL
65296: IFTRUE 65300
65298: GO 65311
65300: POP
// bc_type := b_turret ; 28 :
65301: LD_ADDR_OWVAR 42
65305: PUSH
65306: LD_INT 33
65308: ST_TO_ADDR
65309: GO 65445
65311: LD_INT 28
65313: DOUBLE
65314: EQUAL
65315: IFTRUE 65319
65317: GO 65330
65319: POP
// bc_type := b_armoury ; 29 :
65320: LD_ADDR_OWVAR 42
65324: PUSH
65325: LD_INT 4
65327: ST_TO_ADDR
65328: GO 65445
65330: LD_INT 29
65332: DOUBLE
65333: EQUAL
65334: IFTRUE 65338
65336: GO 65349
65338: POP
// bc_type := b_barracks ; 30 :
65339: LD_ADDR_OWVAR 42
65343: PUSH
65344: LD_INT 5
65346: ST_TO_ADDR
65347: GO 65445
65349: LD_INT 30
65351: DOUBLE
65352: EQUAL
65353: IFTRUE 65357
65355: GO 65368
65357: POP
// bc_type := b_solar_power ; 31 :
65358: LD_ADDR_OWVAR 42
65362: PUSH
65363: LD_INT 27
65365: ST_TO_ADDR
65366: GO 65445
65368: LD_INT 31
65370: DOUBLE
65371: EQUAL
65372: IFTRUE 65376
65374: GO 65387
65376: POP
// bc_type := b_oil_power ; 32 :
65377: LD_ADDR_OWVAR 42
65381: PUSH
65382: LD_INT 26
65384: ST_TO_ADDR
65385: GO 65445
65387: LD_INT 32
65389: DOUBLE
65390: EQUAL
65391: IFTRUE 65395
65393: GO 65406
65395: POP
// bc_type := b_siberite_power ; 33 :
65396: LD_ADDR_OWVAR 42
65400: PUSH
65401: LD_INT 28
65403: ST_TO_ADDR
65404: GO 65445
65406: LD_INT 33
65408: DOUBLE
65409: EQUAL
65410: IFTRUE 65414
65412: GO 65425
65414: POP
// bc_type := b_oil_mine ; 34 :
65415: LD_ADDR_OWVAR 42
65419: PUSH
65420: LD_INT 29
65422: ST_TO_ADDR
65423: GO 65445
65425: LD_INT 34
65427: DOUBLE
65428: EQUAL
65429: IFTRUE 65433
65431: GO 65444
65433: POP
// bc_type := b_siberite_mine ; end ;
65434: LD_ADDR_OWVAR 42
65438: PUSH
65439: LD_INT 30
65441: ST_TO_ADDR
65442: GO 65445
65444: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
65445: LD_ADDR_VAR 0 8
65449: PUSH
65450: LD_VAR 0 5
65454: PPUSH
65455: LD_VAR 0 6
65459: PPUSH
65460: LD_VAR 0 3
65464: PPUSH
65465: CALL_OW 47
65469: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
65470: LD_OWVAR 42
65474: PUSH
65475: LD_INT 32
65477: PUSH
65478: LD_INT 33
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: IN
65485: IFFALSE 65501
// PlaceWeaponTurret ( b , weapon ) ;
65487: LD_VAR 0 8
65491: PPUSH
65492: LD_VAR 0 4
65496: PPUSH
65497: CALL_OW 431
// end ;
65501: LD_VAR 0 7
65505: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
65506: LD_INT 0
65508: PPUSH
65509: PPUSH
65510: PPUSH
65511: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65512: LD_ADDR_VAR 0 4
65516: PUSH
65517: LD_INT 22
65519: PUSH
65520: LD_OWVAR 2
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 2
65531: PUSH
65532: LD_INT 30
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 30
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: LIST
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PPUSH
65561: CALL_OW 69
65565: ST_TO_ADDR
// if not tmp then
65566: LD_VAR 0 4
65570: NOT
65571: IFFALSE 65575
// exit ;
65573: GO 65634
// for i in tmp do
65575: LD_ADDR_VAR 0 2
65579: PUSH
65580: LD_VAR 0 4
65584: PUSH
65585: FOR_IN
65586: IFFALSE 65632
// for j = 1 to 3 do
65588: LD_ADDR_VAR 0 3
65592: PUSH
65593: DOUBLE
65594: LD_INT 1
65596: DEC
65597: ST_TO_ADDR
65598: LD_INT 3
65600: PUSH
65601: FOR_TO
65602: IFFALSE 65628
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
65604: LD_VAR 0 2
65608: PPUSH
65609: CALL_OW 274
65613: PPUSH
65614: LD_VAR 0 3
65618: PPUSH
65619: LD_INT 99999
65621: PPUSH
65622: CALL_OW 277
65626: GO 65601
65628: POP
65629: POP
65630: GO 65585
65632: POP
65633: POP
// end ;
65634: LD_VAR 0 1
65638: RET
// export function hHackSetLevel10 ; var i , j ; begin
65639: LD_INT 0
65641: PPUSH
65642: PPUSH
65643: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65644: LD_ADDR_VAR 0 2
65648: PUSH
65649: LD_INT 21
65651: PUSH
65652: LD_INT 1
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PPUSH
65659: CALL_OW 69
65663: PUSH
65664: FOR_IN
65665: IFFALSE 65717
// if IsSelected ( i ) then
65667: LD_VAR 0 2
65671: PPUSH
65672: CALL_OW 306
65676: IFFALSE 65715
// begin for j := 1 to 4 do
65678: LD_ADDR_VAR 0 3
65682: PUSH
65683: DOUBLE
65684: LD_INT 1
65686: DEC
65687: ST_TO_ADDR
65688: LD_INT 4
65690: PUSH
65691: FOR_TO
65692: IFFALSE 65713
// SetSkill ( i , j , 10 ) ;
65694: LD_VAR 0 2
65698: PPUSH
65699: LD_VAR 0 3
65703: PPUSH
65704: LD_INT 10
65706: PPUSH
65707: CALL_OW 237
65711: GO 65691
65713: POP
65714: POP
// end ;
65715: GO 65664
65717: POP
65718: POP
// end ;
65719: LD_VAR 0 1
65723: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
65724: LD_INT 0
65726: PPUSH
65727: PPUSH
65728: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
65729: LD_ADDR_VAR 0 2
65733: PUSH
65734: LD_INT 22
65736: PUSH
65737: LD_OWVAR 2
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 21
65748: PUSH
65749: LD_INT 1
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PPUSH
65760: CALL_OW 69
65764: PUSH
65765: FOR_IN
65766: IFFALSE 65807
// begin for j := 1 to 4 do
65768: LD_ADDR_VAR 0 3
65772: PUSH
65773: DOUBLE
65774: LD_INT 1
65776: DEC
65777: ST_TO_ADDR
65778: LD_INT 4
65780: PUSH
65781: FOR_TO
65782: IFFALSE 65803
// SetSkill ( i , j , 10 ) ;
65784: LD_VAR 0 2
65788: PPUSH
65789: LD_VAR 0 3
65793: PPUSH
65794: LD_INT 10
65796: PPUSH
65797: CALL_OW 237
65801: GO 65781
65803: POP
65804: POP
// end ;
65805: GO 65765
65807: POP
65808: POP
// end ;
65809: LD_VAR 0 1
65813: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65814: LD_INT 0
65816: PPUSH
// uc_side := your_side ;
65817: LD_ADDR_OWVAR 20
65821: PUSH
65822: LD_OWVAR 2
65826: ST_TO_ADDR
// uc_nation := nation ;
65827: LD_ADDR_OWVAR 21
65831: PUSH
65832: LD_VAR 0 1
65836: ST_TO_ADDR
// InitHc ;
65837: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65841: LD_INT 0
65843: PPUSH
65844: LD_VAR 0 2
65848: PPUSH
65849: LD_VAR 0 3
65853: PPUSH
65854: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
65858: LD_VAR 0 4
65862: PPUSH
65863: LD_VAR 0 5
65867: PPUSH
65868: CALL_OW 428
65872: PUSH
65873: LD_INT 0
65875: EQUAL
65876: IFFALSE 65900
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
65878: CALL_OW 44
65882: PPUSH
65883: LD_VAR 0 4
65887: PPUSH
65888: LD_VAR 0 5
65892: PPUSH
65893: LD_INT 1
65895: PPUSH
65896: CALL_OW 48
// end ;
65900: LD_VAR 0 6
65904: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
65905: LD_INT 0
65907: PPUSH
65908: PPUSH
// uc_side := your_side ;
65909: LD_ADDR_OWVAR 20
65913: PUSH
65914: LD_OWVAR 2
65918: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
65919: LD_VAR 0 1
65923: PUSH
65924: LD_INT 1
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: LD_INT 3
65932: PUSH
65933: LD_INT 4
65935: PUSH
65936: LD_INT 5
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: IN
65946: IFFALSE 65958
// uc_nation := nation_american else
65948: LD_ADDR_OWVAR 21
65952: PUSH
65953: LD_INT 1
65955: ST_TO_ADDR
65956: GO 66001
// if chassis in [ 11 , 12 , 13 , 14 ] then
65958: LD_VAR 0 1
65962: PUSH
65963: LD_INT 11
65965: PUSH
65966: LD_INT 12
65968: PUSH
65969: LD_INT 13
65971: PUSH
65972: LD_INT 14
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: IN
65981: IFFALSE 65993
// uc_nation := nation_arabian else
65983: LD_ADDR_OWVAR 21
65987: PUSH
65988: LD_INT 2
65990: ST_TO_ADDR
65991: GO 66001
// uc_nation := nation_russian ;
65993: LD_ADDR_OWVAR 21
65997: PUSH
65998: LD_INT 3
66000: ST_TO_ADDR
// vc_chassis := chassis ;
66001: LD_ADDR_OWVAR 37
66005: PUSH
66006: LD_VAR 0 1
66010: ST_TO_ADDR
// vc_engine := engine ;
66011: LD_ADDR_OWVAR 39
66015: PUSH
66016: LD_VAR 0 2
66020: ST_TO_ADDR
// vc_control := control ;
66021: LD_ADDR_OWVAR 38
66025: PUSH
66026: LD_VAR 0 3
66030: ST_TO_ADDR
// vc_weapon := weapon ;
66031: LD_ADDR_OWVAR 40
66035: PUSH
66036: LD_VAR 0 4
66040: ST_TO_ADDR
// un := CreateVehicle ;
66041: LD_ADDR_VAR 0 8
66045: PUSH
66046: CALL_OW 45
66050: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
66051: LD_VAR 0 8
66055: PPUSH
66056: LD_INT 0
66058: PPUSH
66059: LD_INT 5
66061: PPUSH
66062: CALL_OW 12
66066: PPUSH
66067: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
66071: LD_VAR 0 8
66075: PPUSH
66076: LD_VAR 0 5
66080: PPUSH
66081: LD_VAR 0 6
66085: PPUSH
66086: LD_INT 1
66088: PPUSH
66089: CALL_OW 48
// end ;
66093: LD_VAR 0 7
66097: RET
// export hInvincible ; every 1 do
66098: GO 66100
66100: DISABLE
// hInvincible := [ ] ;
66101: LD_ADDR_EXP 92
66105: PUSH
66106: EMPTY
66107: ST_TO_ADDR
66108: END
// every 10 do var i ;
66109: GO 66111
66111: DISABLE
66112: LD_INT 0
66114: PPUSH
// begin enable ;
66115: ENABLE
// if not hInvincible then
66116: LD_EXP 92
66120: NOT
66121: IFFALSE 66125
// exit ;
66123: GO 66169
// for i in hInvincible do
66125: LD_ADDR_VAR 0 1
66129: PUSH
66130: LD_EXP 92
66134: PUSH
66135: FOR_IN
66136: IFFALSE 66167
// if GetLives ( i ) < 1000 then
66138: LD_VAR 0 1
66142: PPUSH
66143: CALL_OW 256
66147: PUSH
66148: LD_INT 1000
66150: LESS
66151: IFFALSE 66165
// SetLives ( i , 1000 ) ;
66153: LD_VAR 0 1
66157: PPUSH
66158: LD_INT 1000
66160: PPUSH
66161: CALL_OW 234
66165: GO 66135
66167: POP
66168: POP
// end ;
66169: PPOPN 1
66171: END
// export function hHackInvincible ; var i ; begin
66172: LD_INT 0
66174: PPUSH
66175: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
66176: LD_ADDR_VAR 0 2
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: LD_INT 21
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 21
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: LIST
66208: PPUSH
66209: CALL_OW 69
66213: PUSH
66214: FOR_IN
66215: IFFALSE 66276
// if IsSelected ( i ) then
66217: LD_VAR 0 2
66221: PPUSH
66222: CALL_OW 306
66226: IFFALSE 66274
// begin if i in hInvincible then
66228: LD_VAR 0 2
66232: PUSH
66233: LD_EXP 92
66237: IN
66238: IFFALSE 66258
// hInvincible := hInvincible diff i else
66240: LD_ADDR_EXP 92
66244: PUSH
66245: LD_EXP 92
66249: PUSH
66250: LD_VAR 0 2
66254: DIFF
66255: ST_TO_ADDR
66256: GO 66274
// hInvincible := hInvincible union i ;
66258: LD_ADDR_EXP 92
66262: PUSH
66263: LD_EXP 92
66267: PUSH
66268: LD_VAR 0 2
66272: UNION
66273: ST_TO_ADDR
// end ;
66274: GO 66214
66276: POP
66277: POP
// end ;
66278: LD_VAR 0 1
66282: RET
// export function hHackInvisible ; var i , j ; begin
66283: LD_INT 0
66285: PPUSH
66286: PPUSH
66287: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66288: LD_ADDR_VAR 0 2
66292: PUSH
66293: LD_INT 21
66295: PUSH
66296: LD_INT 1
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PPUSH
66303: CALL_OW 69
66307: PUSH
66308: FOR_IN
66309: IFFALSE 66333
// if IsSelected ( i ) then
66311: LD_VAR 0 2
66315: PPUSH
66316: CALL_OW 306
66320: IFFALSE 66331
// ComForceInvisible ( i ) ;
66322: LD_VAR 0 2
66326: PPUSH
66327: CALL_OW 496
66331: GO 66308
66333: POP
66334: POP
// end ;
66335: LD_VAR 0 1
66339: RET
// export function hHackChangeYourSide ; begin
66340: LD_INT 0
66342: PPUSH
// if your_side = 8 then
66343: LD_OWVAR 2
66347: PUSH
66348: LD_INT 8
66350: EQUAL
66351: IFFALSE 66363
// your_side := 0 else
66353: LD_ADDR_OWVAR 2
66357: PUSH
66358: LD_INT 0
66360: ST_TO_ADDR
66361: GO 66377
// your_side := your_side + 1 ;
66363: LD_ADDR_OWVAR 2
66367: PUSH
66368: LD_OWVAR 2
66372: PUSH
66373: LD_INT 1
66375: PLUS
66376: ST_TO_ADDR
// end ;
66377: LD_VAR 0 1
66381: RET
// export function hHackChangeUnitSide ; var i , j ; begin
66382: LD_INT 0
66384: PPUSH
66385: PPUSH
66386: PPUSH
// for i in all_units do
66387: LD_ADDR_VAR 0 2
66391: PUSH
66392: LD_OWVAR 3
66396: PUSH
66397: FOR_IN
66398: IFFALSE 66476
// if IsSelected ( i ) then
66400: LD_VAR 0 2
66404: PPUSH
66405: CALL_OW 306
66409: IFFALSE 66474
// begin j := GetSide ( i ) ;
66411: LD_ADDR_VAR 0 3
66415: PUSH
66416: LD_VAR 0 2
66420: PPUSH
66421: CALL_OW 255
66425: ST_TO_ADDR
// if j = 8 then
66426: LD_VAR 0 3
66430: PUSH
66431: LD_INT 8
66433: EQUAL
66434: IFFALSE 66446
// j := 0 else
66436: LD_ADDR_VAR 0 3
66440: PUSH
66441: LD_INT 0
66443: ST_TO_ADDR
66444: GO 66460
// j := j + 1 ;
66446: LD_ADDR_VAR 0 3
66450: PUSH
66451: LD_VAR 0 3
66455: PUSH
66456: LD_INT 1
66458: PLUS
66459: ST_TO_ADDR
// SetSide ( i , j ) ;
66460: LD_VAR 0 2
66464: PPUSH
66465: LD_VAR 0 3
66469: PPUSH
66470: CALL_OW 235
// end ;
66474: GO 66397
66476: POP
66477: POP
// end ;
66478: LD_VAR 0 1
66482: RET
// export function hHackFog ; begin
66483: LD_INT 0
66485: PPUSH
// FogOff ( true ) ;
66486: LD_INT 1
66488: PPUSH
66489: CALL_OW 344
// end ;
66493: LD_VAR 0 1
66497: RET
// export function hHackTeleport ( unit , x , y ) ; begin
66498: LD_INT 0
66500: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
66501: LD_VAR 0 1
66505: PPUSH
66506: LD_VAR 0 2
66510: PPUSH
66511: LD_VAR 0 3
66515: PPUSH
66516: LD_INT 1
66518: PPUSH
66519: LD_INT 1
66521: PPUSH
66522: CALL_OW 483
// CenterOnXY ( x , y ) ;
66526: LD_VAR 0 2
66530: PPUSH
66531: LD_VAR 0 3
66535: PPUSH
66536: CALL_OW 84
// end ;
66540: LD_VAR 0 4
66544: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66545: LD_INT 0
66547: PPUSH
66548: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66549: LD_VAR 0 1
66553: NOT
66554: PUSH
66555: LD_VAR 0 2
66559: PPUSH
66560: LD_VAR 0 3
66564: PPUSH
66565: CALL_OW 488
66569: NOT
66570: OR
66571: PUSH
66572: LD_VAR 0 1
66576: PPUSH
66577: CALL_OW 266
66581: PUSH
66582: LD_INT 3
66584: NONEQUAL
66585: PUSH
66586: LD_VAR 0 1
66590: PPUSH
66591: CALL_OW 247
66595: PUSH
66596: LD_INT 1
66598: EQUAL
66599: NOT
66600: AND
66601: OR
66602: IFFALSE 66606
// exit ;
66604: GO 66755
// if GetType ( factory ) = unit_human then
66606: LD_VAR 0 1
66610: PPUSH
66611: CALL_OW 247
66615: PUSH
66616: LD_INT 1
66618: EQUAL
66619: IFFALSE 66636
// factory := IsInUnit ( factory ) ;
66621: LD_ADDR_VAR 0 1
66625: PUSH
66626: LD_VAR 0 1
66630: PPUSH
66631: CALL_OW 310
66635: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66636: LD_VAR 0 1
66640: PPUSH
66641: CALL_OW 266
66645: PUSH
66646: LD_INT 3
66648: NONEQUAL
66649: IFFALSE 66653
// exit ;
66651: GO 66755
// if HexInfo ( x , y ) = factory then
66653: LD_VAR 0 2
66657: PPUSH
66658: LD_VAR 0 3
66662: PPUSH
66663: CALL_OW 428
66667: PUSH
66668: LD_VAR 0 1
66672: EQUAL
66673: IFFALSE 66700
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
66675: LD_ADDR_EXP 93
66679: PUSH
66680: LD_EXP 93
66684: PPUSH
66685: LD_VAR 0 1
66689: PPUSH
66690: LD_INT 0
66692: PPUSH
66693: CALL_OW 1
66697: ST_TO_ADDR
66698: GO 66751
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
66700: LD_ADDR_EXP 93
66704: PUSH
66705: LD_EXP 93
66709: PPUSH
66710: LD_VAR 0 1
66714: PPUSH
66715: LD_VAR 0 1
66719: PPUSH
66720: CALL_OW 255
66724: PUSH
66725: LD_VAR 0 1
66729: PUSH
66730: LD_VAR 0 2
66734: PUSH
66735: LD_VAR 0 3
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: PPUSH
66746: CALL_OW 1
66750: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66751: CALL 66760 0 0
// end ;
66755: LD_VAR 0 4
66759: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
66760: LD_INT 0
66762: PPUSH
66763: PPUSH
66764: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66765: LD_STRING resetFactoryWaypoint();
66767: PPUSH
66768: CALL_OW 559
// if factoryWaypoints then
66772: LD_EXP 93
66776: IFFALSE 66902
// begin list := PrepareArray ( factoryWaypoints ) ;
66778: LD_ADDR_VAR 0 3
66782: PUSH
66783: LD_EXP 93
66787: PPUSH
66788: CALL 51759 0 1
66792: ST_TO_ADDR
// for i := 1 to list do
66793: LD_ADDR_VAR 0 2
66797: PUSH
66798: DOUBLE
66799: LD_INT 1
66801: DEC
66802: ST_TO_ADDR
66803: LD_VAR 0 3
66807: PUSH
66808: FOR_TO
66809: IFFALSE 66900
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66811: LD_STRING setFactoryWaypointXY(
66813: PUSH
66814: LD_VAR 0 3
66818: PUSH
66819: LD_VAR 0 2
66823: ARRAY
66824: PUSH
66825: LD_INT 1
66827: ARRAY
66828: STR
66829: PUSH
66830: LD_STRING ,
66832: STR
66833: PUSH
66834: LD_VAR 0 3
66838: PUSH
66839: LD_VAR 0 2
66843: ARRAY
66844: PUSH
66845: LD_INT 2
66847: ARRAY
66848: STR
66849: PUSH
66850: LD_STRING ,
66852: STR
66853: PUSH
66854: LD_VAR 0 3
66858: PUSH
66859: LD_VAR 0 2
66863: ARRAY
66864: PUSH
66865: LD_INT 3
66867: ARRAY
66868: STR
66869: PUSH
66870: LD_STRING ,
66872: STR
66873: PUSH
66874: LD_VAR 0 3
66878: PUSH
66879: LD_VAR 0 2
66883: ARRAY
66884: PUSH
66885: LD_INT 4
66887: ARRAY
66888: STR
66889: PUSH
66890: LD_STRING )
66892: STR
66893: PPUSH
66894: CALL_OW 559
66898: GO 66808
66900: POP
66901: POP
// end ; end ;
66902: LD_VAR 0 1
66906: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
66907: LD_INT 0
66909: PPUSH
// if HexInfo ( x , y ) = warehouse then
66910: LD_VAR 0 2
66914: PPUSH
66915: LD_VAR 0 3
66919: PPUSH
66920: CALL_OW 428
66924: PUSH
66925: LD_VAR 0 1
66929: EQUAL
66930: IFFALSE 66957
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66932: LD_ADDR_EXP 94
66936: PUSH
66937: LD_EXP 94
66941: PPUSH
66942: LD_VAR 0 1
66946: PPUSH
66947: LD_INT 0
66949: PPUSH
66950: CALL_OW 1
66954: ST_TO_ADDR
66955: GO 67008
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66957: LD_ADDR_EXP 94
66961: PUSH
66962: LD_EXP 94
66966: PPUSH
66967: LD_VAR 0 1
66971: PPUSH
66972: LD_VAR 0 1
66976: PPUSH
66977: CALL_OW 255
66981: PUSH
66982: LD_VAR 0 1
66986: PUSH
66987: LD_VAR 0 2
66991: PUSH
66992: LD_VAR 0 3
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: PPUSH
67003: CALL_OW 1
67007: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
67008: CALL 67017 0 0
// end ;
67012: LD_VAR 0 4
67016: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
67017: LD_INT 0
67019: PPUSH
67020: PPUSH
67021: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
67022: LD_STRING resetWarehouseGatheringPoints();
67024: PPUSH
67025: CALL_OW 559
// if warehouseGatheringPoints then
67029: LD_EXP 94
67033: IFFALSE 67159
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
67035: LD_ADDR_VAR 0 3
67039: PUSH
67040: LD_EXP 94
67044: PPUSH
67045: CALL 51759 0 1
67049: ST_TO_ADDR
// for i := 1 to list do
67050: LD_ADDR_VAR 0 2
67054: PUSH
67055: DOUBLE
67056: LD_INT 1
67058: DEC
67059: ST_TO_ADDR
67060: LD_VAR 0 3
67064: PUSH
67065: FOR_TO
67066: IFFALSE 67157
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67068: LD_STRING setWarehouseGatheringPointXY(
67070: PUSH
67071: LD_VAR 0 3
67075: PUSH
67076: LD_VAR 0 2
67080: ARRAY
67081: PUSH
67082: LD_INT 1
67084: ARRAY
67085: STR
67086: PUSH
67087: LD_STRING ,
67089: STR
67090: PUSH
67091: LD_VAR 0 3
67095: PUSH
67096: LD_VAR 0 2
67100: ARRAY
67101: PUSH
67102: LD_INT 2
67104: ARRAY
67105: STR
67106: PUSH
67107: LD_STRING ,
67109: STR
67110: PUSH
67111: LD_VAR 0 3
67115: PUSH
67116: LD_VAR 0 2
67120: ARRAY
67121: PUSH
67122: LD_INT 3
67124: ARRAY
67125: STR
67126: PUSH
67127: LD_STRING ,
67129: STR
67130: PUSH
67131: LD_VAR 0 3
67135: PUSH
67136: LD_VAR 0 2
67140: ARRAY
67141: PUSH
67142: LD_INT 4
67144: ARRAY
67145: STR
67146: PUSH
67147: LD_STRING )
67149: STR
67150: PPUSH
67151: CALL_OW 559
67155: GO 67065
67157: POP
67158: POP
// end ; end ;
67159: LD_VAR 0 1
67163: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
67164: LD_EXP 94
67168: IFFALSE 67853
67170: GO 67172
67172: DISABLE
67173: LD_INT 0
67175: PPUSH
67176: PPUSH
67177: PPUSH
67178: PPUSH
67179: PPUSH
67180: PPUSH
67181: PPUSH
67182: PPUSH
67183: PPUSH
// begin enable ;
67184: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
67185: LD_ADDR_VAR 0 3
67189: PUSH
67190: LD_EXP 94
67194: PPUSH
67195: CALL 51759 0 1
67199: ST_TO_ADDR
// if not list then
67200: LD_VAR 0 3
67204: NOT
67205: IFFALSE 67209
// exit ;
67207: GO 67853
// for i := 1 to list do
67209: LD_ADDR_VAR 0 1
67213: PUSH
67214: DOUBLE
67215: LD_INT 1
67217: DEC
67218: ST_TO_ADDR
67219: LD_VAR 0 3
67223: PUSH
67224: FOR_TO
67225: IFFALSE 67851
// begin depot := list [ i ] [ 2 ] ;
67227: LD_ADDR_VAR 0 8
67231: PUSH
67232: LD_VAR 0 3
67236: PUSH
67237: LD_VAR 0 1
67241: ARRAY
67242: PUSH
67243: LD_INT 2
67245: ARRAY
67246: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
67247: LD_ADDR_VAR 0 5
67251: PUSH
67252: LD_VAR 0 3
67256: PUSH
67257: LD_VAR 0 1
67261: ARRAY
67262: PUSH
67263: LD_INT 1
67265: ARRAY
67266: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
67267: LD_VAR 0 8
67271: PPUSH
67272: CALL_OW 301
67276: PUSH
67277: LD_VAR 0 5
67281: PUSH
67282: LD_VAR 0 8
67286: PPUSH
67287: CALL_OW 255
67291: NONEQUAL
67292: OR
67293: IFFALSE 67322
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
67295: LD_ADDR_EXP 94
67299: PUSH
67300: LD_EXP 94
67304: PPUSH
67305: LD_VAR 0 8
67309: PPUSH
67310: LD_INT 0
67312: PPUSH
67313: CALL_OW 1
67317: ST_TO_ADDR
// exit ;
67318: POP
67319: POP
67320: GO 67853
// end ; x := list [ i ] [ 3 ] ;
67322: LD_ADDR_VAR 0 6
67326: PUSH
67327: LD_VAR 0 3
67331: PUSH
67332: LD_VAR 0 1
67336: ARRAY
67337: PUSH
67338: LD_INT 3
67340: ARRAY
67341: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
67342: LD_ADDR_VAR 0 7
67346: PUSH
67347: LD_VAR 0 3
67351: PUSH
67352: LD_VAR 0 1
67356: ARRAY
67357: PUSH
67358: LD_INT 4
67360: ARRAY
67361: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
67362: LD_ADDR_VAR 0 9
67366: PUSH
67367: LD_VAR 0 6
67371: PPUSH
67372: LD_VAR 0 7
67376: PPUSH
67377: LD_INT 16
67379: PPUSH
67380: CALL 50347 0 3
67384: ST_TO_ADDR
// if not cratesNearbyPoint then
67385: LD_VAR 0 9
67389: NOT
67390: IFFALSE 67396
// exit ;
67392: POP
67393: POP
67394: GO 67853
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
67396: LD_ADDR_VAR 0 4
67400: PUSH
67401: LD_INT 22
67403: PUSH
67404: LD_VAR 0 5
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 3
67415: PUSH
67416: LD_INT 60
67418: PUSH
67419: EMPTY
67420: LIST
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 91
67428: PUSH
67429: LD_VAR 0 8
67433: PUSH
67434: LD_INT 6
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 2
67444: PUSH
67445: LD_INT 25
67447: PUSH
67448: LD_INT 2
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 25
67457: PUSH
67458: LD_INT 16
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: LIST
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: PPUSH
67476: CALL_OW 69
67480: PUSH
67481: LD_VAR 0 8
67485: PPUSH
67486: CALL_OW 313
67490: PPUSH
67491: LD_INT 3
67493: PUSH
67494: LD_INT 60
67496: PUSH
67497: EMPTY
67498: LIST
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 2
67506: PUSH
67507: LD_INT 25
67509: PUSH
67510: LD_INT 2
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 25
67519: PUSH
67520: LD_INT 16
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PPUSH
67536: CALL_OW 72
67540: UNION
67541: ST_TO_ADDR
// if tmp then
67542: LD_VAR 0 4
67546: IFFALSE 67626
// begin tmp := ShrinkArray ( tmp , 3 ) ;
67548: LD_ADDR_VAR 0 4
67552: PUSH
67553: LD_VAR 0 4
67557: PPUSH
67558: LD_INT 3
67560: PPUSH
67561: CALL 48316 0 2
67565: ST_TO_ADDR
// for j in tmp do
67566: LD_ADDR_VAR 0 2
67570: PUSH
67571: LD_VAR 0 4
67575: PUSH
67576: FOR_IN
67577: IFFALSE 67620
// begin if IsInUnit ( j ) then
67579: LD_VAR 0 2
67583: PPUSH
67584: CALL_OW 310
67588: IFFALSE 67599
// ComExit ( j ) ;
67590: LD_VAR 0 2
67594: PPUSH
67595: CALL 48399 0 1
// AddComCollect ( j , x , y ) ;
67599: LD_VAR 0 2
67603: PPUSH
67604: LD_VAR 0 6
67608: PPUSH
67609: LD_VAR 0 7
67613: PPUSH
67614: CALL_OW 177
// end ;
67618: GO 67576
67620: POP
67621: POP
// exit ;
67622: POP
67623: POP
67624: GO 67853
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
67626: LD_ADDR_VAR 0 4
67630: PUSH
67631: LD_INT 22
67633: PUSH
67634: LD_VAR 0 5
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 91
67645: PUSH
67646: LD_VAR 0 8
67650: PUSH
67651: LD_INT 8
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 2
67661: PUSH
67662: LD_INT 34
67664: PUSH
67665: LD_INT 12
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 34
67674: PUSH
67675: LD_INT 51
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 34
67684: PUSH
67685: LD_INT 32
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 34
67694: PUSH
67695: LD_INT 89
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: LIST
67713: PPUSH
67714: CALL_OW 69
67718: ST_TO_ADDR
// if tmp then
67719: LD_VAR 0 4
67723: IFFALSE 67849
// begin for j in tmp do
67725: LD_ADDR_VAR 0 2
67729: PUSH
67730: LD_VAR 0 4
67734: PUSH
67735: FOR_IN
67736: IFFALSE 67847
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
67738: LD_VAR 0 2
67742: PPUSH
67743: CALL_OW 262
67747: PUSH
67748: LD_INT 3
67750: EQUAL
67751: PUSH
67752: LD_VAR 0 2
67756: PPUSH
67757: CALL_OW 261
67761: PUSH
67762: LD_INT 20
67764: GREATER
67765: OR
67766: PUSH
67767: LD_VAR 0 2
67771: PPUSH
67772: CALL_OW 314
67776: NOT
67777: AND
67778: PUSH
67779: LD_VAR 0 2
67783: PPUSH
67784: CALL_OW 263
67788: PUSH
67789: LD_INT 1
67791: NONEQUAL
67792: PUSH
67793: LD_VAR 0 2
67797: PPUSH
67798: CALL_OW 311
67802: OR
67803: AND
67804: IFFALSE 67845
// begin ComCollect ( j , x , y ) ;
67806: LD_VAR 0 2
67810: PPUSH
67811: LD_VAR 0 6
67815: PPUSH
67816: LD_VAR 0 7
67820: PPUSH
67821: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
67825: LD_VAR 0 2
67829: PPUSH
67830: LD_VAR 0 8
67834: PPUSH
67835: CALL_OW 172
// exit ;
67839: POP
67840: POP
67841: POP
67842: POP
67843: GO 67853
// end ;
67845: GO 67735
67847: POP
67848: POP
// end ; end ;
67849: GO 67224
67851: POP
67852: POP
// end ; end_of_file
67853: PPOPN 9
67855: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67856: LD_VAR 0 1
67860: PUSH
67861: LD_INT 200
67863: DOUBLE
67864: GREATEREQUAL
67865: IFFALSE 67873
67867: LD_INT 299
67869: DOUBLE
67870: LESSEQUAL
67871: IFTRUE 67875
67873: GO 67907
67875: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67876: LD_VAR 0 1
67880: PPUSH
67881: LD_VAR 0 2
67885: PPUSH
67886: LD_VAR 0 3
67890: PPUSH
67891: LD_VAR 0 4
67895: PPUSH
67896: LD_VAR 0 5
67900: PPUSH
67901: CALL 68395 0 5
67905: GO 67984
67907: LD_INT 300
67909: DOUBLE
67910: GREATEREQUAL
67911: IFFALSE 67919
67913: LD_INT 399
67915: DOUBLE
67916: LESSEQUAL
67917: IFTRUE 67921
67919: GO 67983
67921: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67922: LD_VAR 0 1
67926: PPUSH
67927: LD_VAR 0 2
67931: PPUSH
67932: LD_VAR 0 3
67936: PPUSH
67937: LD_VAR 0 4
67941: PPUSH
67942: LD_VAR 0 5
67946: PPUSH
67947: LD_VAR 0 6
67951: PPUSH
67952: LD_VAR 0 7
67956: PPUSH
67957: LD_VAR 0 8
67961: PPUSH
67962: LD_VAR 0 9
67966: PPUSH
67967: LD_VAR 0 10
67971: PPUSH
67972: LD_VAR 0 11
67976: PPUSH
67977: CALL 64565 0 11
67981: GO 67984
67983: POP
// end ;
67984: PPOPN 11
67986: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67987: LD_VAR 0 1
67991: PPUSH
67992: LD_VAR 0 2
67996: PPUSH
67997: LD_VAR 0 3
68001: PPUSH
68002: LD_VAR 0 4
68006: PPUSH
68007: LD_VAR 0 5
68011: PPUSH
68012: CALL 68131 0 5
// end ; end_of_file
68016: PPOPN 5
68018: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
68019: LD_INT 0
68021: PPUSH
68022: PPUSH
68023: PPUSH
68024: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
68025: LD_VAR 0 1
68029: PPUSH
68030: CALL_OW 264
68034: PUSH
68035: LD_INT 91
68037: EQUAL
68038: IFFALSE 68110
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
68040: LD_INT 68
68042: PPUSH
68043: LD_VAR 0 1
68047: PPUSH
68048: CALL_OW 255
68052: PPUSH
68053: CALL_OW 321
68057: PUSH
68058: LD_INT 2
68060: EQUAL
68061: IFFALSE 68073
// eff := 70 else
68063: LD_ADDR_VAR 0 4
68067: PUSH
68068: LD_INT 70
68070: ST_TO_ADDR
68071: GO 68081
// eff := 30 ;
68073: LD_ADDR_VAR 0 4
68077: PUSH
68078: LD_INT 30
68080: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
68081: LD_VAR 0 1
68085: PPUSH
68086: CALL_OW 250
68090: PPUSH
68091: LD_VAR 0 1
68095: PPUSH
68096: CALL_OW 251
68100: PPUSH
68101: LD_VAR 0 4
68105: PPUSH
68106: CALL_OW 495
// end ; end ;
68110: LD_VAR 0 2
68114: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
68115: LD_INT 0
68117: PPUSH
// end ;
68118: LD_VAR 0 4
68122: RET
// export function SOS_Command ( cmd ) ; begin
68123: LD_INT 0
68125: PPUSH
// end ;
68126: LD_VAR 0 2
68130: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
68131: LD_INT 0
68133: PPUSH
// end ;
68134: LD_VAR 0 6
68138: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
68139: LD_INT 0
68141: PPUSH
68142: PPUSH
// if not vehicle or not factory then
68143: LD_VAR 0 1
68147: NOT
68148: PUSH
68149: LD_VAR 0 2
68153: NOT
68154: OR
68155: IFFALSE 68159
// exit ;
68157: GO 68390
// if factoryWaypoints >= factory then
68159: LD_EXP 93
68163: PUSH
68164: LD_VAR 0 2
68168: GREATEREQUAL
68169: IFFALSE 68390
// if factoryWaypoints [ factory ] then
68171: LD_EXP 93
68175: PUSH
68176: LD_VAR 0 2
68180: ARRAY
68181: IFFALSE 68390
// begin if GetControl ( vehicle ) = control_manual then
68183: LD_VAR 0 1
68187: PPUSH
68188: CALL_OW 263
68192: PUSH
68193: LD_INT 1
68195: EQUAL
68196: IFFALSE 68277
// begin driver := IsDrivenBy ( vehicle ) ;
68198: LD_ADDR_VAR 0 4
68202: PUSH
68203: LD_VAR 0 1
68207: PPUSH
68208: CALL_OW 311
68212: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68213: LD_VAR 0 4
68217: PPUSH
68218: LD_EXP 93
68222: PUSH
68223: LD_VAR 0 2
68227: ARRAY
68228: PUSH
68229: LD_INT 3
68231: ARRAY
68232: PPUSH
68233: LD_EXP 93
68237: PUSH
68238: LD_VAR 0 2
68242: ARRAY
68243: PUSH
68244: LD_INT 4
68246: ARRAY
68247: PPUSH
68248: CALL_OW 171
// AddComExitVehicle ( driver ) ;
68252: LD_VAR 0 4
68256: PPUSH
68257: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
68261: LD_VAR 0 4
68265: PPUSH
68266: LD_VAR 0 2
68270: PPUSH
68271: CALL_OW 180
// end else
68275: GO 68390
// if GetControl ( vehicle ) = control_remote then
68277: LD_VAR 0 1
68281: PPUSH
68282: CALL_OW 263
68286: PUSH
68287: LD_INT 2
68289: EQUAL
68290: IFFALSE 68351
// begin wait ( 0 0$2 ) ;
68292: LD_INT 70
68294: PPUSH
68295: CALL_OW 67
// if Connect ( vehicle ) then
68299: LD_VAR 0 1
68303: PPUSH
68304: CALL 18640 0 1
68308: IFFALSE 68349
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68310: LD_VAR 0 1
68314: PPUSH
68315: LD_EXP 93
68319: PUSH
68320: LD_VAR 0 2
68324: ARRAY
68325: PUSH
68326: LD_INT 3
68328: ARRAY
68329: PPUSH
68330: LD_EXP 93
68334: PUSH
68335: LD_VAR 0 2
68339: ARRAY
68340: PUSH
68341: LD_INT 4
68343: ARRAY
68344: PPUSH
68345: CALL_OW 171
// end else
68349: GO 68390
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68351: LD_VAR 0 1
68355: PPUSH
68356: LD_EXP 93
68360: PUSH
68361: LD_VAR 0 2
68365: ARRAY
68366: PUSH
68367: LD_INT 3
68369: ARRAY
68370: PPUSH
68371: LD_EXP 93
68375: PUSH
68376: LD_VAR 0 2
68380: ARRAY
68381: PUSH
68382: LD_INT 4
68384: ARRAY
68385: PPUSH
68386: CALL_OW 171
// end ; end ;
68390: LD_VAR 0 3
68394: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
68395: LD_INT 0
68397: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
68398: LD_VAR 0 1
68402: PUSH
68403: LD_INT 250
68405: EQUAL
68406: PUSH
68407: LD_VAR 0 2
68411: PPUSH
68412: CALL_OW 264
68416: PUSH
68417: LD_INT 81
68419: EQUAL
68420: AND
68421: IFFALSE 68442
// MinerPlaceMine ( unit , x , y ) ;
68423: LD_VAR 0 2
68427: PPUSH
68428: LD_VAR 0 4
68432: PPUSH
68433: LD_VAR 0 5
68437: PPUSH
68438: CALL 70827 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
68442: LD_VAR 0 1
68446: PUSH
68447: LD_INT 251
68449: EQUAL
68450: PUSH
68451: LD_VAR 0 2
68455: PPUSH
68456: CALL_OW 264
68460: PUSH
68461: LD_INT 81
68463: EQUAL
68464: AND
68465: IFFALSE 68486
// MinerDetonateMine ( unit , x , y ) ;
68467: LD_VAR 0 2
68471: PPUSH
68472: LD_VAR 0 4
68476: PPUSH
68477: LD_VAR 0 5
68481: PPUSH
68482: CALL 71102 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
68486: LD_VAR 0 1
68490: PUSH
68491: LD_INT 252
68493: EQUAL
68494: PUSH
68495: LD_VAR 0 2
68499: PPUSH
68500: CALL_OW 264
68504: PUSH
68505: LD_INT 81
68507: EQUAL
68508: AND
68509: IFFALSE 68530
// MinerCreateMinefield ( unit , x , y ) ;
68511: LD_VAR 0 2
68515: PPUSH
68516: LD_VAR 0 4
68520: PPUSH
68521: LD_VAR 0 5
68525: PPUSH
68526: CALL 71519 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
68530: LD_VAR 0 1
68534: PUSH
68535: LD_INT 253
68537: EQUAL
68538: PUSH
68539: LD_VAR 0 2
68543: PPUSH
68544: CALL_OW 257
68548: PUSH
68549: LD_INT 5
68551: EQUAL
68552: AND
68553: IFFALSE 68574
// ComBinocular ( unit , x , y ) ;
68555: LD_VAR 0 2
68559: PPUSH
68560: LD_VAR 0 4
68564: PPUSH
68565: LD_VAR 0 5
68569: PPUSH
68570: CALL 71888 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
68574: LD_VAR 0 1
68578: PUSH
68579: LD_INT 254
68581: EQUAL
68582: PUSH
68583: LD_VAR 0 2
68587: PPUSH
68588: CALL_OW 264
68592: PUSH
68593: LD_INT 99
68595: EQUAL
68596: AND
68597: PUSH
68598: LD_VAR 0 3
68602: PPUSH
68603: CALL_OW 263
68607: PUSH
68608: LD_INT 3
68610: EQUAL
68611: AND
68612: IFFALSE 68628
// HackDestroyVehicle ( unit , selectedUnit ) ;
68614: LD_VAR 0 2
68618: PPUSH
68619: LD_VAR 0 3
68623: PPUSH
68624: CALL 70191 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
68628: LD_VAR 0 1
68632: PUSH
68633: LD_INT 255
68635: EQUAL
68636: PUSH
68637: LD_VAR 0 2
68641: PPUSH
68642: CALL_OW 264
68646: PUSH
68647: LD_INT 14
68649: PUSH
68650: LD_INT 53
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: IN
68657: AND
68658: PUSH
68659: LD_VAR 0 4
68663: PPUSH
68664: LD_VAR 0 5
68668: PPUSH
68669: CALL_OW 488
68673: AND
68674: IFFALSE 68698
// CutTreeXYR ( unit , x , y , 12 ) ;
68676: LD_VAR 0 2
68680: PPUSH
68681: LD_VAR 0 4
68685: PPUSH
68686: LD_VAR 0 5
68690: PPUSH
68691: LD_INT 12
68693: PPUSH
68694: CALL 68761 0 4
// if cmd = 256 then
68698: LD_VAR 0 1
68702: PUSH
68703: LD_INT 256
68705: EQUAL
68706: IFFALSE 68727
// SetFactoryWaypoint ( unit , x , y ) ;
68708: LD_VAR 0 2
68712: PPUSH
68713: LD_VAR 0 4
68717: PPUSH
68718: LD_VAR 0 5
68722: PPUSH
68723: CALL 66545 0 3
// if cmd = 257 then
68727: LD_VAR 0 1
68731: PUSH
68732: LD_INT 257
68734: EQUAL
68735: IFFALSE 68756
// SetWarehouseGatheringPoint ( unit , x , y ) ;
68737: LD_VAR 0 2
68741: PPUSH
68742: LD_VAR 0 4
68746: PPUSH
68747: LD_VAR 0 5
68751: PPUSH
68752: CALL 66907 0 3
// end ;
68756: LD_VAR 0 6
68760: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
68761: LD_INT 0
68763: PPUSH
68764: PPUSH
68765: PPUSH
68766: PPUSH
68767: PPUSH
68768: PPUSH
68769: PPUSH
68770: PPUSH
68771: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
68772: LD_VAR 0 1
68776: NOT
68777: PUSH
68778: LD_VAR 0 2
68782: PPUSH
68783: LD_VAR 0 3
68787: PPUSH
68788: CALL_OW 488
68792: NOT
68793: OR
68794: PUSH
68795: LD_VAR 0 4
68799: NOT
68800: OR
68801: IFFALSE 68805
// exit ;
68803: GO 69145
// list := [ ] ;
68805: LD_ADDR_VAR 0 13
68809: PUSH
68810: EMPTY
68811: ST_TO_ADDR
// if x - r < 0 then
68812: LD_VAR 0 2
68816: PUSH
68817: LD_VAR 0 4
68821: MINUS
68822: PUSH
68823: LD_INT 0
68825: LESS
68826: IFFALSE 68838
// min_x := 0 else
68828: LD_ADDR_VAR 0 7
68832: PUSH
68833: LD_INT 0
68835: ST_TO_ADDR
68836: GO 68854
// min_x := x - r ;
68838: LD_ADDR_VAR 0 7
68842: PUSH
68843: LD_VAR 0 2
68847: PUSH
68848: LD_VAR 0 4
68852: MINUS
68853: ST_TO_ADDR
// if y - r < 0 then
68854: LD_VAR 0 3
68858: PUSH
68859: LD_VAR 0 4
68863: MINUS
68864: PUSH
68865: LD_INT 0
68867: LESS
68868: IFFALSE 68880
// min_y := 0 else
68870: LD_ADDR_VAR 0 8
68874: PUSH
68875: LD_INT 0
68877: ST_TO_ADDR
68878: GO 68896
// min_y := y - r ;
68880: LD_ADDR_VAR 0 8
68884: PUSH
68885: LD_VAR 0 3
68889: PUSH
68890: LD_VAR 0 4
68894: MINUS
68895: ST_TO_ADDR
// max_x := x + r ;
68896: LD_ADDR_VAR 0 9
68900: PUSH
68901: LD_VAR 0 2
68905: PUSH
68906: LD_VAR 0 4
68910: PLUS
68911: ST_TO_ADDR
// max_y := y + r ;
68912: LD_ADDR_VAR 0 10
68916: PUSH
68917: LD_VAR 0 3
68921: PUSH
68922: LD_VAR 0 4
68926: PLUS
68927: ST_TO_ADDR
// for _x = min_x to max_x do
68928: LD_ADDR_VAR 0 11
68932: PUSH
68933: DOUBLE
68934: LD_VAR 0 7
68938: DEC
68939: ST_TO_ADDR
68940: LD_VAR 0 9
68944: PUSH
68945: FOR_TO
68946: IFFALSE 69063
// for _y = min_y to max_y do
68948: LD_ADDR_VAR 0 12
68952: PUSH
68953: DOUBLE
68954: LD_VAR 0 8
68958: DEC
68959: ST_TO_ADDR
68960: LD_VAR 0 10
68964: PUSH
68965: FOR_TO
68966: IFFALSE 69059
// begin if not ValidHex ( _x , _y ) then
68968: LD_VAR 0 11
68972: PPUSH
68973: LD_VAR 0 12
68977: PPUSH
68978: CALL_OW 488
68982: NOT
68983: IFFALSE 68987
// continue ;
68985: GO 68965
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68987: LD_VAR 0 11
68991: PPUSH
68992: LD_VAR 0 12
68996: PPUSH
68997: CALL_OW 351
69001: PUSH
69002: LD_VAR 0 11
69006: PPUSH
69007: LD_VAR 0 12
69011: PPUSH
69012: CALL_OW 554
69016: AND
69017: IFFALSE 69057
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69019: LD_ADDR_VAR 0 13
69023: PUSH
69024: LD_VAR 0 13
69028: PPUSH
69029: LD_VAR 0 13
69033: PUSH
69034: LD_INT 1
69036: PLUS
69037: PPUSH
69038: LD_VAR 0 11
69042: PUSH
69043: LD_VAR 0 12
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PPUSH
69052: CALL_OW 2
69056: ST_TO_ADDR
// end ;
69057: GO 68965
69059: POP
69060: POP
69061: GO 68945
69063: POP
69064: POP
// if not list then
69065: LD_VAR 0 13
69069: NOT
69070: IFFALSE 69074
// exit ;
69072: GO 69145
// for i in list do
69074: LD_ADDR_VAR 0 6
69078: PUSH
69079: LD_VAR 0 13
69083: PUSH
69084: FOR_IN
69085: IFFALSE 69143
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
69087: LD_VAR 0 1
69091: PPUSH
69092: LD_STRING M
69094: PUSH
69095: LD_VAR 0 6
69099: PUSH
69100: LD_INT 1
69102: ARRAY
69103: PUSH
69104: LD_VAR 0 6
69108: PUSH
69109: LD_INT 2
69111: ARRAY
69112: PUSH
69113: LD_INT 0
69115: PUSH
69116: LD_INT 0
69118: PUSH
69119: LD_INT 0
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: PUSH
69134: EMPTY
69135: LIST
69136: PPUSH
69137: CALL_OW 447
69141: GO 69084
69143: POP
69144: POP
// end ;
69145: LD_VAR 0 5
69149: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69150: LD_EXP 96
69154: NOT
69155: IFFALSE 69205
69157: GO 69159
69159: DISABLE
// begin initHack := true ;
69160: LD_ADDR_EXP 96
69164: PUSH
69165: LD_INT 1
69167: ST_TO_ADDR
// hackTanks := [ ] ;
69168: LD_ADDR_EXP 97
69172: PUSH
69173: EMPTY
69174: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
69175: LD_ADDR_EXP 98
69179: PUSH
69180: EMPTY
69181: ST_TO_ADDR
// hackLimit := 3 ;
69182: LD_ADDR_EXP 99
69186: PUSH
69187: LD_INT 3
69189: ST_TO_ADDR
// hackDist := 12 ;
69190: LD_ADDR_EXP 100
69194: PUSH
69195: LD_INT 12
69197: ST_TO_ADDR
// hackCounter := [ ] ;
69198: LD_ADDR_EXP 101
69202: PUSH
69203: EMPTY
69204: ST_TO_ADDR
// end ;
69205: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
69206: LD_EXP 96
69210: PUSH
69211: LD_INT 34
69213: PUSH
69214: LD_INT 99
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PPUSH
69221: CALL_OW 69
69225: AND
69226: IFFALSE 69479
69228: GO 69230
69230: DISABLE
69231: LD_INT 0
69233: PPUSH
69234: PPUSH
// begin enable ;
69235: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
69236: LD_ADDR_VAR 0 1
69240: PUSH
69241: LD_INT 34
69243: PUSH
69244: LD_INT 99
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PPUSH
69251: CALL_OW 69
69255: PUSH
69256: FOR_IN
69257: IFFALSE 69477
// begin if not i in hackTanks then
69259: LD_VAR 0 1
69263: PUSH
69264: LD_EXP 97
69268: IN
69269: NOT
69270: IFFALSE 69353
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
69272: LD_ADDR_EXP 97
69276: PUSH
69277: LD_EXP 97
69281: PPUSH
69282: LD_EXP 97
69286: PUSH
69287: LD_INT 1
69289: PLUS
69290: PPUSH
69291: LD_VAR 0 1
69295: PPUSH
69296: CALL_OW 1
69300: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
69301: LD_ADDR_EXP 98
69305: PUSH
69306: LD_EXP 98
69310: PPUSH
69311: LD_EXP 98
69315: PUSH
69316: LD_INT 1
69318: PLUS
69319: PPUSH
69320: EMPTY
69321: PPUSH
69322: CALL_OW 1
69326: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
69327: LD_ADDR_EXP 101
69331: PUSH
69332: LD_EXP 101
69336: PPUSH
69337: LD_EXP 101
69341: PUSH
69342: LD_INT 1
69344: PLUS
69345: PPUSH
69346: EMPTY
69347: PPUSH
69348: CALL_OW 1
69352: ST_TO_ADDR
// end ; if not IsOk ( i ) then
69353: LD_VAR 0 1
69357: PPUSH
69358: CALL_OW 302
69362: NOT
69363: IFFALSE 69376
// begin HackUnlinkAll ( i ) ;
69365: LD_VAR 0 1
69369: PPUSH
69370: CALL 69482 0 1
// continue ;
69374: GO 69256
// end ; HackCheckCapturedStatus ( i ) ;
69376: LD_VAR 0 1
69380: PPUSH
69381: CALL 69925 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69385: LD_ADDR_VAR 0 2
69389: PUSH
69390: LD_INT 81
69392: PUSH
69393: LD_VAR 0 1
69397: PPUSH
69398: CALL_OW 255
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 33
69409: PUSH
69410: LD_INT 3
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 91
69419: PUSH
69420: LD_VAR 0 1
69424: PUSH
69425: LD_EXP 100
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 50
69437: PUSH
69438: EMPTY
69439: LIST
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: PPUSH
69447: CALL_OW 69
69451: ST_TO_ADDR
// if not tmp then
69452: LD_VAR 0 2
69456: NOT
69457: IFFALSE 69461
// continue ;
69459: GO 69256
// HackLink ( i , tmp ) ;
69461: LD_VAR 0 1
69465: PPUSH
69466: LD_VAR 0 2
69470: PPUSH
69471: CALL 69618 0 2
// end ;
69475: GO 69256
69477: POP
69478: POP
// end ;
69479: PPOPN 2
69481: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
69482: LD_INT 0
69484: PPUSH
69485: PPUSH
69486: PPUSH
// if not hack in hackTanks then
69487: LD_VAR 0 1
69491: PUSH
69492: LD_EXP 97
69496: IN
69497: NOT
69498: IFFALSE 69502
// exit ;
69500: GO 69613
// index := GetElementIndex ( hackTanks , hack ) ;
69502: LD_ADDR_VAR 0 4
69506: PUSH
69507: LD_EXP 97
69511: PPUSH
69512: LD_VAR 0 1
69516: PPUSH
69517: CALL 15456 0 2
69521: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
69522: LD_EXP 98
69526: PUSH
69527: LD_VAR 0 4
69531: ARRAY
69532: IFFALSE 69613
// begin for i in hackTanksCaptured [ index ] do
69534: LD_ADDR_VAR 0 3
69538: PUSH
69539: LD_EXP 98
69543: PUSH
69544: LD_VAR 0 4
69548: ARRAY
69549: PUSH
69550: FOR_IN
69551: IFFALSE 69577
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
69553: LD_VAR 0 3
69557: PUSH
69558: LD_INT 1
69560: ARRAY
69561: PPUSH
69562: LD_VAR 0 3
69566: PUSH
69567: LD_INT 2
69569: ARRAY
69570: PPUSH
69571: CALL_OW 235
69575: GO 69550
69577: POP
69578: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
69579: LD_ADDR_EXP 98
69583: PUSH
69584: LD_EXP 98
69588: PPUSH
69589: LD_VAR 0 4
69593: PPUSH
69594: EMPTY
69595: PPUSH
69596: CALL_OW 1
69600: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
69601: LD_VAR 0 1
69605: PPUSH
69606: LD_INT 0
69608: PPUSH
69609: CALL_OW 505
// end ; end ;
69613: LD_VAR 0 2
69617: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
69618: LD_INT 0
69620: PPUSH
69621: PPUSH
69622: PPUSH
// if not hack in hackTanks or not vehicles then
69623: LD_VAR 0 1
69627: PUSH
69628: LD_EXP 97
69632: IN
69633: NOT
69634: PUSH
69635: LD_VAR 0 2
69639: NOT
69640: OR
69641: IFFALSE 69645
// exit ;
69643: GO 69920
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
69645: LD_ADDR_VAR 0 2
69649: PUSH
69650: LD_VAR 0 1
69654: PPUSH
69655: LD_VAR 0 2
69659: PPUSH
69660: LD_INT 1
69662: PPUSH
69663: LD_INT 1
69665: PPUSH
69666: CALL 16106 0 4
69670: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
69671: LD_ADDR_VAR 0 5
69675: PUSH
69676: LD_EXP 97
69680: PPUSH
69681: LD_VAR 0 1
69685: PPUSH
69686: CALL 15456 0 2
69690: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
69691: LD_EXP 98
69695: PUSH
69696: LD_VAR 0 5
69700: ARRAY
69701: PUSH
69702: LD_EXP 99
69706: LESS
69707: IFFALSE 69896
// begin for i := 1 to vehicles do
69709: LD_ADDR_VAR 0 4
69713: PUSH
69714: DOUBLE
69715: LD_INT 1
69717: DEC
69718: ST_TO_ADDR
69719: LD_VAR 0 2
69723: PUSH
69724: FOR_TO
69725: IFFALSE 69894
// begin if hackTanksCaptured [ index ] = hackLimit then
69727: LD_EXP 98
69731: PUSH
69732: LD_VAR 0 5
69736: ARRAY
69737: PUSH
69738: LD_EXP 99
69742: EQUAL
69743: IFFALSE 69747
// break ;
69745: GO 69894
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
69747: LD_ADDR_EXP 101
69751: PUSH
69752: LD_EXP 101
69756: PPUSH
69757: LD_VAR 0 5
69761: PPUSH
69762: LD_EXP 101
69766: PUSH
69767: LD_VAR 0 5
69771: ARRAY
69772: PUSH
69773: LD_INT 1
69775: PLUS
69776: PPUSH
69777: CALL_OW 1
69781: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
69782: LD_ADDR_EXP 98
69786: PUSH
69787: LD_EXP 98
69791: PPUSH
69792: LD_VAR 0 5
69796: PUSH
69797: LD_EXP 98
69801: PUSH
69802: LD_VAR 0 5
69806: ARRAY
69807: PUSH
69808: LD_INT 1
69810: PLUS
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PPUSH
69816: LD_VAR 0 2
69820: PUSH
69821: LD_VAR 0 4
69825: ARRAY
69826: PUSH
69827: LD_VAR 0 2
69831: PUSH
69832: LD_VAR 0 4
69836: ARRAY
69837: PPUSH
69838: CALL_OW 255
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PPUSH
69847: CALL 15671 0 3
69851: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
69852: LD_VAR 0 2
69856: PUSH
69857: LD_VAR 0 4
69861: ARRAY
69862: PPUSH
69863: LD_VAR 0 1
69867: PPUSH
69868: CALL_OW 255
69872: PPUSH
69873: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
69877: LD_VAR 0 2
69881: PUSH
69882: LD_VAR 0 4
69886: ARRAY
69887: PPUSH
69888: CALL_OW 141
// end ;
69892: GO 69724
69894: POP
69895: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69896: LD_VAR 0 1
69900: PPUSH
69901: LD_EXP 98
69905: PUSH
69906: LD_VAR 0 5
69910: ARRAY
69911: PUSH
69912: LD_INT 0
69914: PLUS
69915: PPUSH
69916: CALL_OW 505
// end ;
69920: LD_VAR 0 3
69924: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
69925: LD_INT 0
69927: PPUSH
69928: PPUSH
69929: PPUSH
69930: PPUSH
// if not hack in hackTanks then
69931: LD_VAR 0 1
69935: PUSH
69936: LD_EXP 97
69940: IN
69941: NOT
69942: IFFALSE 69946
// exit ;
69944: GO 70186
// index := GetElementIndex ( hackTanks , hack ) ;
69946: LD_ADDR_VAR 0 4
69950: PUSH
69951: LD_EXP 97
69955: PPUSH
69956: LD_VAR 0 1
69960: PPUSH
69961: CALL 15456 0 2
69965: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
69966: LD_ADDR_VAR 0 3
69970: PUSH
69971: DOUBLE
69972: LD_EXP 98
69976: PUSH
69977: LD_VAR 0 4
69981: ARRAY
69982: INC
69983: ST_TO_ADDR
69984: LD_INT 1
69986: PUSH
69987: FOR_DOWNTO
69988: IFFALSE 70160
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
69990: LD_ADDR_VAR 0 5
69994: PUSH
69995: LD_EXP 98
69999: PUSH
70000: LD_VAR 0 4
70004: ARRAY
70005: PUSH
70006: LD_VAR 0 3
70010: ARRAY
70011: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
70012: LD_VAR 0 5
70016: PUSH
70017: LD_INT 1
70019: ARRAY
70020: PPUSH
70021: CALL_OW 302
70025: NOT
70026: PUSH
70027: LD_VAR 0 5
70031: PUSH
70032: LD_INT 1
70034: ARRAY
70035: PPUSH
70036: CALL_OW 255
70040: PUSH
70041: LD_VAR 0 1
70045: PPUSH
70046: CALL_OW 255
70050: NONEQUAL
70051: OR
70052: IFFALSE 70158
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70054: LD_VAR 0 5
70058: PUSH
70059: LD_INT 1
70061: ARRAY
70062: PPUSH
70063: CALL_OW 305
70067: PUSH
70068: LD_VAR 0 5
70072: PUSH
70073: LD_INT 1
70075: ARRAY
70076: PPUSH
70077: CALL_OW 255
70081: PUSH
70082: LD_VAR 0 1
70086: PPUSH
70087: CALL_OW 255
70091: EQUAL
70092: AND
70093: IFFALSE 70117
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70095: LD_VAR 0 5
70099: PUSH
70100: LD_INT 1
70102: ARRAY
70103: PPUSH
70104: LD_VAR 0 5
70108: PUSH
70109: LD_INT 2
70111: ARRAY
70112: PPUSH
70113: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70117: LD_ADDR_EXP 98
70121: PUSH
70122: LD_EXP 98
70126: PPUSH
70127: LD_VAR 0 4
70131: PPUSH
70132: LD_EXP 98
70136: PUSH
70137: LD_VAR 0 4
70141: ARRAY
70142: PPUSH
70143: LD_VAR 0 3
70147: PPUSH
70148: CALL_OW 3
70152: PPUSH
70153: CALL_OW 1
70157: ST_TO_ADDR
// end ; end ;
70158: GO 69987
70160: POP
70161: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70162: LD_VAR 0 1
70166: PPUSH
70167: LD_EXP 98
70171: PUSH
70172: LD_VAR 0 4
70176: ARRAY
70177: PUSH
70178: LD_INT 0
70180: PLUS
70181: PPUSH
70182: CALL_OW 505
// end ;
70186: LD_VAR 0 2
70190: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
70191: LD_INT 0
70193: PPUSH
70194: PPUSH
70195: PPUSH
70196: PPUSH
// if not hack in hackTanks then
70197: LD_VAR 0 1
70201: PUSH
70202: LD_EXP 97
70206: IN
70207: NOT
70208: IFFALSE 70212
// exit ;
70210: GO 70297
// index := GetElementIndex ( hackTanks , hack ) ;
70212: LD_ADDR_VAR 0 5
70216: PUSH
70217: LD_EXP 97
70221: PPUSH
70222: LD_VAR 0 1
70226: PPUSH
70227: CALL 15456 0 2
70231: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
70232: LD_ADDR_VAR 0 4
70236: PUSH
70237: DOUBLE
70238: LD_INT 1
70240: DEC
70241: ST_TO_ADDR
70242: LD_EXP 98
70246: PUSH
70247: LD_VAR 0 5
70251: ARRAY
70252: PUSH
70253: FOR_TO
70254: IFFALSE 70295
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
70256: LD_EXP 98
70260: PUSH
70261: LD_VAR 0 5
70265: ARRAY
70266: PUSH
70267: LD_VAR 0 4
70271: ARRAY
70272: PUSH
70273: LD_INT 1
70275: ARRAY
70276: PUSH
70277: LD_VAR 0 2
70281: EQUAL
70282: IFFALSE 70293
// KillUnit ( vehicle ) ;
70284: LD_VAR 0 2
70288: PPUSH
70289: CALL_OW 66
70293: GO 70253
70295: POP
70296: POP
// end ;
70297: LD_VAR 0 3
70301: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
70302: LD_EXP 102
70306: NOT
70307: IFFALSE 70342
70309: GO 70311
70311: DISABLE
// begin initMiner := true ;
70312: LD_ADDR_EXP 102
70316: PUSH
70317: LD_INT 1
70319: ST_TO_ADDR
// minersList := [ ] ;
70320: LD_ADDR_EXP 103
70324: PUSH
70325: EMPTY
70326: ST_TO_ADDR
// minerMinesList := [ ] ;
70327: LD_ADDR_EXP 104
70331: PUSH
70332: EMPTY
70333: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
70334: LD_ADDR_EXP 105
70338: PUSH
70339: LD_INT 5
70341: ST_TO_ADDR
// end ;
70342: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
70343: LD_EXP 102
70347: PUSH
70348: LD_INT 34
70350: PUSH
70351: LD_INT 81
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PPUSH
70358: CALL_OW 69
70362: AND
70363: IFFALSE 70824
70365: GO 70367
70367: DISABLE
70368: LD_INT 0
70370: PPUSH
70371: PPUSH
70372: PPUSH
70373: PPUSH
// begin enable ;
70374: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
70375: LD_ADDR_VAR 0 1
70379: PUSH
70380: LD_INT 34
70382: PUSH
70383: LD_INT 81
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PPUSH
70390: CALL_OW 69
70394: PUSH
70395: FOR_IN
70396: IFFALSE 70468
// begin if not i in minersList then
70398: LD_VAR 0 1
70402: PUSH
70403: LD_EXP 103
70407: IN
70408: NOT
70409: IFFALSE 70466
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70411: LD_ADDR_EXP 103
70415: PUSH
70416: LD_EXP 103
70420: PPUSH
70421: LD_EXP 103
70425: PUSH
70426: LD_INT 1
70428: PLUS
70429: PPUSH
70430: LD_VAR 0 1
70434: PPUSH
70435: CALL_OW 1
70439: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70440: LD_ADDR_EXP 104
70444: PUSH
70445: LD_EXP 104
70449: PPUSH
70450: LD_EXP 104
70454: PUSH
70455: LD_INT 1
70457: PLUS
70458: PPUSH
70459: EMPTY
70460: PPUSH
70461: CALL_OW 1
70465: ST_TO_ADDR
// end end ;
70466: GO 70395
70468: POP
70469: POP
// for i := minerMinesList downto 1 do
70470: LD_ADDR_VAR 0 1
70474: PUSH
70475: DOUBLE
70476: LD_EXP 104
70480: INC
70481: ST_TO_ADDR
70482: LD_INT 1
70484: PUSH
70485: FOR_DOWNTO
70486: IFFALSE 70822
// begin if IsLive ( minersList [ i ] ) then
70488: LD_EXP 103
70492: PUSH
70493: LD_VAR 0 1
70497: ARRAY
70498: PPUSH
70499: CALL_OW 300
70503: IFFALSE 70531
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
70505: LD_EXP 103
70509: PUSH
70510: LD_VAR 0 1
70514: ARRAY
70515: PPUSH
70516: LD_EXP 104
70520: PUSH
70521: LD_VAR 0 1
70525: ARRAY
70526: PPUSH
70527: CALL_OW 505
// if not minerMinesList [ i ] then
70531: LD_EXP 104
70535: PUSH
70536: LD_VAR 0 1
70540: ARRAY
70541: NOT
70542: IFFALSE 70546
// continue ;
70544: GO 70485
// for j := minerMinesList [ i ] downto 1 do
70546: LD_ADDR_VAR 0 2
70550: PUSH
70551: DOUBLE
70552: LD_EXP 104
70556: PUSH
70557: LD_VAR 0 1
70561: ARRAY
70562: INC
70563: ST_TO_ADDR
70564: LD_INT 1
70566: PUSH
70567: FOR_DOWNTO
70568: IFFALSE 70818
// begin side := GetSide ( minersList [ i ] ) ;
70570: LD_ADDR_VAR 0 3
70574: PUSH
70575: LD_EXP 103
70579: PUSH
70580: LD_VAR 0 1
70584: ARRAY
70585: PPUSH
70586: CALL_OW 255
70590: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
70591: LD_ADDR_VAR 0 4
70595: PUSH
70596: LD_EXP 104
70600: PUSH
70601: LD_VAR 0 1
70605: ARRAY
70606: PUSH
70607: LD_VAR 0 2
70611: ARRAY
70612: PUSH
70613: LD_INT 1
70615: ARRAY
70616: PPUSH
70617: LD_EXP 104
70621: PUSH
70622: LD_VAR 0 1
70626: ARRAY
70627: PUSH
70628: LD_VAR 0 2
70632: ARRAY
70633: PUSH
70634: LD_INT 2
70636: ARRAY
70637: PPUSH
70638: CALL_OW 428
70642: ST_TO_ADDR
// if not tmp then
70643: LD_VAR 0 4
70647: NOT
70648: IFFALSE 70652
// continue ;
70650: GO 70567
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
70652: LD_VAR 0 4
70656: PUSH
70657: LD_INT 81
70659: PUSH
70660: LD_VAR 0 3
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PPUSH
70669: CALL_OW 69
70673: IN
70674: PUSH
70675: LD_EXP 104
70679: PUSH
70680: LD_VAR 0 1
70684: ARRAY
70685: PUSH
70686: LD_VAR 0 2
70690: ARRAY
70691: PUSH
70692: LD_INT 1
70694: ARRAY
70695: PPUSH
70696: LD_EXP 104
70700: PUSH
70701: LD_VAR 0 1
70705: ARRAY
70706: PUSH
70707: LD_VAR 0 2
70711: ARRAY
70712: PUSH
70713: LD_INT 2
70715: ARRAY
70716: PPUSH
70717: CALL_OW 458
70721: AND
70722: IFFALSE 70816
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
70724: LD_EXP 104
70728: PUSH
70729: LD_VAR 0 1
70733: ARRAY
70734: PUSH
70735: LD_VAR 0 2
70739: ARRAY
70740: PUSH
70741: LD_INT 1
70743: ARRAY
70744: PPUSH
70745: LD_EXP 104
70749: PUSH
70750: LD_VAR 0 1
70754: ARRAY
70755: PUSH
70756: LD_VAR 0 2
70760: ARRAY
70761: PUSH
70762: LD_INT 2
70764: ARRAY
70765: PPUSH
70766: LD_VAR 0 3
70770: PPUSH
70771: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
70775: LD_ADDR_EXP 104
70779: PUSH
70780: LD_EXP 104
70784: PPUSH
70785: LD_VAR 0 1
70789: PPUSH
70790: LD_EXP 104
70794: PUSH
70795: LD_VAR 0 1
70799: ARRAY
70800: PPUSH
70801: LD_VAR 0 2
70805: PPUSH
70806: CALL_OW 3
70810: PPUSH
70811: CALL_OW 1
70815: ST_TO_ADDR
// end ; end ;
70816: GO 70567
70818: POP
70819: POP
// end ;
70820: GO 70485
70822: POP
70823: POP
// end ;
70824: PPOPN 4
70826: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
70827: LD_INT 0
70829: PPUSH
70830: PPUSH
// result := false ;
70831: LD_ADDR_VAR 0 4
70835: PUSH
70836: LD_INT 0
70838: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
70839: LD_VAR 0 1
70843: PPUSH
70844: CALL_OW 264
70848: PUSH
70849: LD_INT 81
70851: EQUAL
70852: NOT
70853: IFFALSE 70857
// exit ;
70855: GO 71097
// index := GetElementIndex ( minersList , unit ) ;
70857: LD_ADDR_VAR 0 5
70861: PUSH
70862: LD_EXP 103
70866: PPUSH
70867: LD_VAR 0 1
70871: PPUSH
70872: CALL 15456 0 2
70876: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
70877: LD_EXP 104
70881: PUSH
70882: LD_VAR 0 5
70886: ARRAY
70887: PUSH
70888: LD_EXP 105
70892: GREATEREQUAL
70893: IFFALSE 70897
// exit ;
70895: GO 71097
// ComMoveXY ( unit , x , y ) ;
70897: LD_VAR 0 1
70901: PPUSH
70902: LD_VAR 0 2
70906: PPUSH
70907: LD_VAR 0 3
70911: PPUSH
70912: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70916: LD_INT 35
70918: PPUSH
70919: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
70923: LD_VAR 0 1
70927: PPUSH
70928: LD_VAR 0 2
70932: PPUSH
70933: LD_VAR 0 3
70937: PPUSH
70938: CALL 46811 0 3
70942: NOT
70943: PUSH
70944: LD_VAR 0 1
70948: PPUSH
70949: CALL_OW 314
70953: AND
70954: IFFALSE 70958
// exit ;
70956: GO 71097
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
70958: LD_VAR 0 2
70962: PPUSH
70963: LD_VAR 0 3
70967: PPUSH
70968: CALL_OW 428
70972: PUSH
70973: LD_VAR 0 1
70977: EQUAL
70978: PUSH
70979: LD_VAR 0 1
70983: PPUSH
70984: CALL_OW 314
70988: NOT
70989: AND
70990: IFFALSE 70916
// PlaySoundXY ( x , y , PlantMine ) ;
70992: LD_VAR 0 2
70996: PPUSH
70997: LD_VAR 0 3
71001: PPUSH
71002: LD_STRING PlantMine
71004: PPUSH
71005: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
71009: LD_VAR 0 2
71013: PPUSH
71014: LD_VAR 0 3
71018: PPUSH
71019: LD_VAR 0 1
71023: PPUSH
71024: CALL_OW 255
71028: PPUSH
71029: LD_INT 0
71031: PPUSH
71032: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
71036: LD_ADDR_EXP 104
71040: PUSH
71041: LD_EXP 104
71045: PPUSH
71046: LD_VAR 0 5
71050: PUSH
71051: LD_EXP 104
71055: PUSH
71056: LD_VAR 0 5
71060: ARRAY
71061: PUSH
71062: LD_INT 1
71064: PLUS
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PPUSH
71070: LD_VAR 0 2
71074: PUSH
71075: LD_VAR 0 3
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PPUSH
71084: CALL 15671 0 3
71088: ST_TO_ADDR
// result := true ;
71089: LD_ADDR_VAR 0 4
71093: PUSH
71094: LD_INT 1
71096: ST_TO_ADDR
// end ;
71097: LD_VAR 0 4
71101: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
71102: LD_INT 0
71104: PPUSH
71105: PPUSH
71106: PPUSH
// if not unit in minersList then
71107: LD_VAR 0 1
71111: PUSH
71112: LD_EXP 103
71116: IN
71117: NOT
71118: IFFALSE 71122
// exit ;
71120: GO 71514
// index := GetElementIndex ( minersList , unit ) ;
71122: LD_ADDR_VAR 0 6
71126: PUSH
71127: LD_EXP 103
71131: PPUSH
71132: LD_VAR 0 1
71136: PPUSH
71137: CALL 15456 0 2
71141: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
71142: LD_ADDR_VAR 0 5
71146: PUSH
71147: DOUBLE
71148: LD_EXP 104
71152: PUSH
71153: LD_VAR 0 6
71157: ARRAY
71158: INC
71159: ST_TO_ADDR
71160: LD_INT 1
71162: PUSH
71163: FOR_DOWNTO
71164: IFFALSE 71325
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
71166: LD_EXP 104
71170: PUSH
71171: LD_VAR 0 6
71175: ARRAY
71176: PUSH
71177: LD_VAR 0 5
71181: ARRAY
71182: PUSH
71183: LD_INT 1
71185: ARRAY
71186: PUSH
71187: LD_VAR 0 2
71191: EQUAL
71192: PUSH
71193: LD_EXP 104
71197: PUSH
71198: LD_VAR 0 6
71202: ARRAY
71203: PUSH
71204: LD_VAR 0 5
71208: ARRAY
71209: PUSH
71210: LD_INT 2
71212: ARRAY
71213: PUSH
71214: LD_VAR 0 3
71218: EQUAL
71219: AND
71220: IFFALSE 71323
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71222: LD_EXP 104
71226: PUSH
71227: LD_VAR 0 6
71231: ARRAY
71232: PUSH
71233: LD_VAR 0 5
71237: ARRAY
71238: PUSH
71239: LD_INT 1
71241: ARRAY
71242: PPUSH
71243: LD_EXP 104
71247: PUSH
71248: LD_VAR 0 6
71252: ARRAY
71253: PUSH
71254: LD_VAR 0 5
71258: ARRAY
71259: PUSH
71260: LD_INT 2
71262: ARRAY
71263: PPUSH
71264: LD_VAR 0 1
71268: PPUSH
71269: CALL_OW 255
71273: PPUSH
71274: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71278: LD_ADDR_EXP 104
71282: PUSH
71283: LD_EXP 104
71287: PPUSH
71288: LD_VAR 0 6
71292: PPUSH
71293: LD_EXP 104
71297: PUSH
71298: LD_VAR 0 6
71302: ARRAY
71303: PPUSH
71304: LD_VAR 0 5
71308: PPUSH
71309: CALL_OW 3
71313: PPUSH
71314: CALL_OW 1
71318: ST_TO_ADDR
// exit ;
71319: POP
71320: POP
71321: GO 71514
// end ; end ;
71323: GO 71163
71325: POP
71326: POP
// for i := minerMinesList [ index ] downto 1 do
71327: LD_ADDR_VAR 0 5
71331: PUSH
71332: DOUBLE
71333: LD_EXP 104
71337: PUSH
71338: LD_VAR 0 6
71342: ARRAY
71343: INC
71344: ST_TO_ADDR
71345: LD_INT 1
71347: PUSH
71348: FOR_DOWNTO
71349: IFFALSE 71512
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
71351: LD_EXP 104
71355: PUSH
71356: LD_VAR 0 6
71360: ARRAY
71361: PUSH
71362: LD_VAR 0 5
71366: ARRAY
71367: PUSH
71368: LD_INT 1
71370: ARRAY
71371: PPUSH
71372: LD_EXP 104
71376: PUSH
71377: LD_VAR 0 6
71381: ARRAY
71382: PUSH
71383: LD_VAR 0 5
71387: ARRAY
71388: PUSH
71389: LD_INT 2
71391: ARRAY
71392: PPUSH
71393: LD_VAR 0 2
71397: PPUSH
71398: LD_VAR 0 3
71402: PPUSH
71403: CALL_OW 298
71407: PUSH
71408: LD_INT 6
71410: LESS
71411: IFFALSE 71510
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71413: LD_EXP 104
71417: PUSH
71418: LD_VAR 0 6
71422: ARRAY
71423: PUSH
71424: LD_VAR 0 5
71428: ARRAY
71429: PUSH
71430: LD_INT 1
71432: ARRAY
71433: PPUSH
71434: LD_EXP 104
71438: PUSH
71439: LD_VAR 0 6
71443: ARRAY
71444: PUSH
71445: LD_VAR 0 5
71449: ARRAY
71450: PUSH
71451: LD_INT 2
71453: ARRAY
71454: PPUSH
71455: LD_VAR 0 1
71459: PPUSH
71460: CALL_OW 255
71464: PPUSH
71465: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71469: LD_ADDR_EXP 104
71473: PUSH
71474: LD_EXP 104
71478: PPUSH
71479: LD_VAR 0 6
71483: PPUSH
71484: LD_EXP 104
71488: PUSH
71489: LD_VAR 0 6
71493: ARRAY
71494: PPUSH
71495: LD_VAR 0 5
71499: PPUSH
71500: CALL_OW 3
71504: PPUSH
71505: CALL_OW 1
71509: ST_TO_ADDR
// end ; end ;
71510: GO 71348
71512: POP
71513: POP
// end ;
71514: LD_VAR 0 4
71518: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
71519: LD_INT 0
71521: PPUSH
71522: PPUSH
71523: PPUSH
71524: PPUSH
71525: PPUSH
71526: PPUSH
71527: PPUSH
71528: PPUSH
71529: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
71530: LD_VAR 0 1
71534: PPUSH
71535: CALL_OW 264
71539: PUSH
71540: LD_INT 81
71542: EQUAL
71543: NOT
71544: PUSH
71545: LD_VAR 0 1
71549: PUSH
71550: LD_EXP 103
71554: IN
71555: NOT
71556: OR
71557: IFFALSE 71561
// exit ;
71559: GO 71883
// index := GetElementIndex ( minersList , unit ) ;
71561: LD_ADDR_VAR 0 6
71565: PUSH
71566: LD_EXP 103
71570: PPUSH
71571: LD_VAR 0 1
71575: PPUSH
71576: CALL 15456 0 2
71580: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
71581: LD_ADDR_VAR 0 8
71585: PUSH
71586: LD_EXP 105
71590: PUSH
71591: LD_EXP 104
71595: PUSH
71596: LD_VAR 0 6
71600: ARRAY
71601: MINUS
71602: ST_TO_ADDR
// if not minesFreeAmount then
71603: LD_VAR 0 8
71607: NOT
71608: IFFALSE 71612
// exit ;
71610: GO 71883
// tmp := [ ] ;
71612: LD_ADDR_VAR 0 7
71616: PUSH
71617: EMPTY
71618: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
71619: LD_ADDR_VAR 0 5
71623: PUSH
71624: DOUBLE
71625: LD_INT 1
71627: DEC
71628: ST_TO_ADDR
71629: LD_VAR 0 8
71633: PUSH
71634: FOR_TO
71635: IFFALSE 71830
// begin _d := rand ( 0 , 5 ) ;
71637: LD_ADDR_VAR 0 11
71641: PUSH
71642: LD_INT 0
71644: PPUSH
71645: LD_INT 5
71647: PPUSH
71648: CALL_OW 12
71652: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
71653: LD_ADDR_VAR 0 12
71657: PUSH
71658: LD_INT 2
71660: PPUSH
71661: LD_INT 6
71663: PPUSH
71664: CALL_OW 12
71668: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
71669: LD_ADDR_VAR 0 9
71673: PUSH
71674: LD_VAR 0 2
71678: PPUSH
71679: LD_VAR 0 11
71683: PPUSH
71684: LD_VAR 0 12
71688: PPUSH
71689: CALL_OW 272
71693: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
71694: LD_ADDR_VAR 0 10
71698: PUSH
71699: LD_VAR 0 3
71703: PPUSH
71704: LD_VAR 0 11
71708: PPUSH
71709: LD_VAR 0 12
71713: PPUSH
71714: CALL_OW 273
71718: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
71719: LD_VAR 0 9
71723: PPUSH
71724: LD_VAR 0 10
71728: PPUSH
71729: CALL_OW 488
71733: PUSH
71734: LD_VAR 0 9
71738: PUSH
71739: LD_VAR 0 10
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_VAR 0 7
71752: IN
71753: NOT
71754: AND
71755: PUSH
71756: LD_VAR 0 9
71760: PPUSH
71761: LD_VAR 0 10
71765: PPUSH
71766: CALL_OW 458
71770: NOT
71771: AND
71772: IFFALSE 71814
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
71774: LD_ADDR_VAR 0 7
71778: PUSH
71779: LD_VAR 0 7
71783: PPUSH
71784: LD_VAR 0 7
71788: PUSH
71789: LD_INT 1
71791: PLUS
71792: PPUSH
71793: LD_VAR 0 9
71797: PUSH
71798: LD_VAR 0 10
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PPUSH
71807: CALL_OW 1
71811: ST_TO_ADDR
71812: GO 71828
// i := i - 1 ;
71814: LD_ADDR_VAR 0 5
71818: PUSH
71819: LD_VAR 0 5
71823: PUSH
71824: LD_INT 1
71826: MINUS
71827: ST_TO_ADDR
// end ;
71828: GO 71634
71830: POP
71831: POP
// for i in tmp do
71832: LD_ADDR_VAR 0 5
71836: PUSH
71837: LD_VAR 0 7
71841: PUSH
71842: FOR_IN
71843: IFFALSE 71881
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
71845: LD_VAR 0 1
71849: PPUSH
71850: LD_VAR 0 5
71854: PUSH
71855: LD_INT 1
71857: ARRAY
71858: PPUSH
71859: LD_VAR 0 5
71863: PUSH
71864: LD_INT 2
71866: ARRAY
71867: PPUSH
71868: CALL 70827 0 3
71872: NOT
71873: IFFALSE 71879
// exit ;
71875: POP
71876: POP
71877: GO 71883
71879: GO 71842
71881: POP
71882: POP
// end ;
71883: LD_VAR 0 4
71887: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
71888: LD_INT 0
71890: PPUSH
71891: PPUSH
71892: PPUSH
71893: PPUSH
71894: PPUSH
71895: PPUSH
71896: PPUSH
// if not GetClass ( unit ) = class_sniper then
71897: LD_VAR 0 1
71901: PPUSH
71902: CALL_OW 257
71906: PUSH
71907: LD_INT 5
71909: EQUAL
71910: NOT
71911: IFFALSE 71915
// exit ;
71913: GO 72303
// dist := 8 ;
71915: LD_ADDR_VAR 0 5
71919: PUSH
71920: LD_INT 8
71922: ST_TO_ADDR
// viewRange := 12 ;
71923: LD_ADDR_VAR 0 7
71927: PUSH
71928: LD_INT 12
71930: ST_TO_ADDR
// side := GetSide ( unit ) ;
71931: LD_ADDR_VAR 0 6
71935: PUSH
71936: LD_VAR 0 1
71940: PPUSH
71941: CALL_OW 255
71945: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
71946: LD_INT 61
71948: PPUSH
71949: LD_VAR 0 6
71953: PPUSH
71954: CALL_OW 321
71958: PUSH
71959: LD_INT 2
71961: EQUAL
71962: IFFALSE 71972
// viewRange := 16 ;
71964: LD_ADDR_VAR 0 7
71968: PUSH
71969: LD_INT 16
71971: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
71972: LD_VAR 0 1
71976: PPUSH
71977: LD_VAR 0 2
71981: PPUSH
71982: LD_VAR 0 3
71986: PPUSH
71987: CALL_OW 297
71991: PUSH
71992: LD_VAR 0 5
71996: GREATER
71997: IFFALSE 72076
// begin ComMoveXY ( unit , x , y ) ;
71999: LD_VAR 0 1
72003: PPUSH
72004: LD_VAR 0 2
72008: PPUSH
72009: LD_VAR 0 3
72013: PPUSH
72014: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72018: LD_INT 35
72020: PPUSH
72021: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
72025: LD_VAR 0 1
72029: PPUSH
72030: LD_VAR 0 2
72034: PPUSH
72035: LD_VAR 0 3
72039: PPUSH
72040: CALL 46811 0 3
72044: NOT
72045: IFFALSE 72049
// exit ;
72047: GO 72303
// until GetDistUnitXY ( unit , x , y ) < dist ;
72049: LD_VAR 0 1
72053: PPUSH
72054: LD_VAR 0 2
72058: PPUSH
72059: LD_VAR 0 3
72063: PPUSH
72064: CALL_OW 297
72068: PUSH
72069: LD_VAR 0 5
72073: LESS
72074: IFFALSE 72018
// end ; ComTurnXY ( unit , x , y ) ;
72076: LD_VAR 0 1
72080: PPUSH
72081: LD_VAR 0 2
72085: PPUSH
72086: LD_VAR 0 3
72090: PPUSH
72091: CALL_OW 118
// wait ( 5 ) ;
72095: LD_INT 5
72097: PPUSH
72098: CALL_OW 67
// _d := GetDir ( unit ) ;
72102: LD_ADDR_VAR 0 10
72106: PUSH
72107: LD_VAR 0 1
72111: PPUSH
72112: CALL_OW 254
72116: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
72117: LD_ADDR_VAR 0 8
72121: PUSH
72122: LD_VAR 0 1
72126: PPUSH
72127: CALL_OW 250
72131: PPUSH
72132: LD_VAR 0 10
72136: PPUSH
72137: LD_VAR 0 5
72141: PPUSH
72142: CALL_OW 272
72146: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
72147: LD_ADDR_VAR 0 9
72151: PUSH
72152: LD_VAR 0 1
72156: PPUSH
72157: CALL_OW 251
72161: PPUSH
72162: LD_VAR 0 10
72166: PPUSH
72167: LD_VAR 0 5
72171: PPUSH
72172: CALL_OW 273
72176: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72177: LD_VAR 0 8
72181: PPUSH
72182: LD_VAR 0 9
72186: PPUSH
72187: CALL_OW 488
72191: NOT
72192: IFFALSE 72196
// exit ;
72194: GO 72303
// ComAnimCustom ( unit , 1 ) ;
72196: LD_VAR 0 1
72200: PPUSH
72201: LD_INT 1
72203: PPUSH
72204: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
72208: LD_VAR 0 8
72212: PPUSH
72213: LD_VAR 0 9
72217: PPUSH
72218: LD_VAR 0 6
72222: PPUSH
72223: LD_VAR 0 7
72227: PPUSH
72228: CALL_OW 330
// repeat wait ( 1 ) ;
72232: LD_INT 1
72234: PPUSH
72235: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
72239: LD_VAR 0 1
72243: PPUSH
72244: CALL_OW 316
72248: PUSH
72249: LD_VAR 0 1
72253: PPUSH
72254: CALL_OW 314
72258: OR
72259: PUSH
72260: LD_VAR 0 1
72264: PPUSH
72265: CALL_OW 302
72269: NOT
72270: OR
72271: PUSH
72272: LD_VAR 0 1
72276: PPUSH
72277: CALL_OW 301
72281: OR
72282: IFFALSE 72232
// RemoveSeeing ( _x , _y , side ) ;
72284: LD_VAR 0 8
72288: PPUSH
72289: LD_VAR 0 9
72293: PPUSH
72294: LD_VAR 0 6
72298: PPUSH
72299: CALL_OW 331
// end ;
72303: LD_VAR 0 4
72307: RET
