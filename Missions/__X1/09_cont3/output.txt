// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 10239 0 0
// LoadEnv ;
  16: CALL 9837 0 0
// LoadCam ;
  20: CALL 10503 0 0
// LoadTech ;
  24: CALL 10579 0 0
// LoadBase ;
  28: CALL 11065 0 0
// PrepareArabian ;
  32: CALL 186 0 0
// PrepareRussian ;
  36: CALL 3050 0 0
// Action ;
  40: CALL 12369 0 0
// end ;
  44: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; export wave , strength ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 09c_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 09c_
  63: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 09_tick
  71: PPUSH
  72: LD_INT 31500
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 09c_tick
  87: PPUSH
  88: LD_INT 10500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// playerInBase := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// kamikazeTrained := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// apeDriver := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 120
 127: PUSH
 128: LD_INT 150
 130: PUSH
 131: LD_INT 180
 133: PUSH
 134: LD_INT 220
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// missionTime := 0 0$00 ;
 149: LD_ADDR_EXP 9
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// ruDefeated := false ;
 157: LD_ADDR_EXP 10
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// wave := 0 ;
 165: LD_ADDR_EXP 11
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// strength := 0 ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ; end_of_file
 181: LD_VAR 0 1
 185: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 197: LD_STRING 05_DrugsTested
 199: PPUSH
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 30
 209: IFFALSE 224
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 211: LD_INT 5
 213: PPUSH
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 2
 219: PPUSH
 220: CALL_OW 322
// uc_side := 2 ;
 224: LD_ADDR_OWVAR 20
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// uc_nation := nation_nature ;
 232: LD_ADDR_OWVAR 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 240: LD_ADDR_VAR 0 3
 244: PUSH
 245: LD_STRING 09_apes
 247: PPUSH
 248: CALL_OW 31
 252: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 253: LD_ADDR_VAR 0 6
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 30
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: ST_TO_ADDR
// if apes then
 305: LD_VAR 0 3
 309: IFFALSE 388
// for i in apes do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: LD_VAR 0 3
 320: PUSH
 321: FOR_IN
 322: IFFALSE 386
// if UnitsInside ( b [ 1 ] ) < 6 then
 324: LD_VAR 0 6
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: CALL_OW 313
 337: PUSH
 338: LD_INT 6
 340: LESS
 341: IFFALSE 363
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_VAR 0 6
 352: PUSH
 353: LD_INT 1
 355: ARRAY
 356: PPUSH
 357: CALL_OW 52
 361: GO 384
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 363: LD_VAR 0 2
 367: PPUSH
 368: LD_INT 82
 370: PPUSH
 371: LD_INT 27
 373: PPUSH
 374: LD_INT 6
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 50
 384: GO 321
 386: POP
 387: POP
// InitHC_All ( ) ;
 388: CALL_OW 584
// uc_nation := nation_arabian ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 2
 399: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 400: LD_ADDR_VAR 0 6
 404: PUSH
 405: LD_INT 22
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 5
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 474: LD_ADDR_EXP 33
 478: PUSH
 479: LD_STRING Rolf
 481: PPUSH
 482: LD_EXP 1
 486: NOT
 487: PPUSH
 488: LD_STRING 06_
 490: PPUSH
 491: CALL 15376 0 3
 495: ST_TO_ADDR
// if Rolf then
 496: LD_EXP 33
 500: IFFALSE 709
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 502: LD_ADDR_EXP 32
 506: PUSH
 507: LD_STRING 06_RolfSquad
 509: PPUSH
 510: CALL_OW 31
 514: ST_TO_ADDR
// if rolfSquad < 3 then
 515: LD_EXP 32
 519: PUSH
 520: LD_INT 3
 522: LESS
 523: IFFALSE 586
// for i := 1 to 3 - Count ( rolfSquad ) do
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: DOUBLE
 531: LD_INT 1
 533: DEC
 534: ST_TO_ADDR
 535: LD_INT 3
 537: PUSH
 538: LD_EXP 32
 542: PPUSH
 543: CALL 17478 0 1
 547: MINUS
 548: PUSH
 549: FOR_TO
 550: IFFALSE 584
// begin PrepareSoldier ( false , 4 ) ;
 552: LD_INT 0
 554: PPUSH
 555: LD_INT 4
 557: PPUSH
 558: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 562: LD_ADDR_EXP 32
 566: PUSH
 567: LD_EXP 32
 571: PPUSH
 572: CALL_OW 44
 576: PPUSH
 577: CALL 53065 0 2
 581: ST_TO_ADDR
// end ;
 582: GO 549
 584: POP
 585: POP
// if b then
 586: LD_VAR 0 6
 590: IFFALSE 665
// begin for i in rolfSquad union Rolf do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_EXP 32
 601: PUSH
 602: LD_EXP 33
 606: UNION
 607: PUSH
 608: FOR_IN
 609: IFFALSE 661
// begin SetClass ( i , 1 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_VAR 0 6
 632: PPUSH
 633: LD_INT 3
 635: PUSH
 636: LD_INT 62
 638: PUSH
 639: EMPTY
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 52
// end ;
 659: GO 608
 661: POP
 662: POP
// end else
 663: GO 709
// for i in rolfSquad union Rolf do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_EXP 32
 674: PUSH
 675: LD_EXP 33
 679: UNION
 680: PUSH
 681: FOR_IN
 682: IFFALSE 707
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 684: LD_VAR 0 2
 688: PPUSH
 689: LD_INT 82
 691: PPUSH
 692: LD_INT 27
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 50
 705: GO 681
 707: POP
 708: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 13
 713: PUSH
 714: LD_STRING Heike
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 15376 0 3
 732: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 16
 737: PUSH
 738: LD_STRING Ibrahim
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 15376 0 3
 756: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 14
 761: PUSH
 762: LD_STRING Givi
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 15376 0 3
 780: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 17
 785: PUSH
 786: LD_STRING Kamil
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 15376 0 3
 804: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 18
 809: PUSH
 810: LD_STRING Kaia
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 15376 0 3
 828: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 19
 833: PUSH
 834: LD_STRING Sophia
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 15376 0 3
 852: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 20
 857: PUSH
 858: LD_STRING Markov
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 15376 0 3
 876: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 23
 881: PUSH
 882: LD_STRING Aviradze
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 15376 0 3
 900: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 22
 905: PUSH
 906: LD_STRING Kurt
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 15376 0 3
 924: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_STRING Mike
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 15376 0 3
 948: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 21
 953: PUSH
 954: LD_STRING Olaf
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 15376 0 3
 972: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 973: LD_ADDR_EXP 30
 977: PUSH
 978: LD_STRING 09c_heikeSecondSquad
 980: PPUSH
 981: CALL_OW 31
 985: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 986: LD_ADDR_EXP 24
 990: PUSH
 991: LD_STRING Schulz
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_EXP 2
1004: PPUSH
1005: CALL 15376 0 3
1009: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
1010: LD_ADDR_EXP 25
1014: PUSH
1015: LD_STRING Basim
1017: PPUSH
1018: LD_EXP 1
1022: NOT
1023: PPUSH
1024: LD_EXP 2
1028: PPUSH
1029: CALL 15376 0 3
1033: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1034: LD_ADDR_EXP 26
1038: PUSH
1039: LD_STRING Lemmy
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 2
1052: PPUSH
1053: CALL 15376 0 3
1057: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1058: LD_ADDR_EXP 27
1062: PUSH
1063: LD_STRING Mia
1065: PPUSH
1066: LD_EXP 1
1070: NOT
1071: PPUSH
1072: LD_EXP 2
1076: PPUSH
1077: CALL 15376 0 3
1081: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1082: LD_ADDR_EXP 28
1086: PUSH
1087: LD_STRING Nia
1089: PPUSH
1090: LD_EXP 1
1094: NOT
1095: PPUSH
1096: LD_EXP 2
1100: PPUSH
1101: CALL 15376 0 3
1105: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1106: LD_ADDR_EXP 29
1110: PUSH
1111: LD_STRING Jenna
1113: PPUSH
1114: LD_EXP 1
1118: NOT
1119: PPUSH
1120: LD_EXP 2
1124: PPUSH
1125: CALL 15376 0 3
1129: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING 09c_schulzSecondSquad
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// if debug then
1143: LD_EXP 1
1147: IFFALSE 1227
// begin schulzSecondSquad := [ ] ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: EMPTY
1155: ST_TO_ADDR
// for i := 1 to 3 do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_INT 3
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1225
// begin uc_side := 2 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
// uc_nation := nation_arabian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 2
1187: ST_TO_ADDR
// PrepareHuman ( false , i , 0 ) ;
1188: LD_INT 0
1190: PPUSH
1191: LD_VAR 0 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PPUSH
1213: CALL_OW 44
1217: PPUSH
1218: CALL 53065 0 2
1222: ST_TO_ADDR
// end ;
1223: GO 1169
1225: POP
1226: POP
// end ; vehicles := LoadVariable ( 09c_vehicles , [ [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 36 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 41 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 37 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 35 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 34 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 38 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 40 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 39 ] ] ) ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_STRING 09c_vehicles
1234: PPUSH
1235: LD_INT 13
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 28
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 36
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 13
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 28
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 0
1289: PUSH
1290: LD_INT 41
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 13
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: LD_INT 28
1314: PUSH
1315: LD_INT 2
1317: PUSH
1318: LD_INT 0
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 37
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 13
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 28
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 35
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 13
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 28
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: LD_INT 34
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 13
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 28
1416: PUSH
1417: LD_INT 2
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 38
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 13
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 28
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 40
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 13
1475: PUSH
1476: LD_INT 3
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 28
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 39
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 30
1521: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Heike , LoadVariable ( 09c_Heike_ID , - 1 ) , vehicles ) ;
1522: LD_ADDR_VAR 0 9
1526: PUSH
1527: LD_VAR 0 9
1531: PUSH
1532: LD_EXP 13
1536: PPUSH
1537: LD_STRING 09c_Heike_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2764 0 3
1558: DIFF
1559: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Givi , LoadVariable ( 09c_Givi_ID , - 1 ) , vehicles ) ;
1560: LD_ADDR_VAR 0 9
1564: PUSH
1565: LD_VAR 0 9
1569: PUSH
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING 09c_Givi_ID
1577: PPUSH
1578: LD_INT 1
1580: NEG
1581: PPUSH
1582: CALL_OW 30
1586: PPUSH
1587: LD_VAR 0 9
1591: PPUSH
1592: CALL 2764 0 3
1596: DIFF
1597: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mike , LoadVariable ( 09c_Mike_ID , - 1 ) , vehicles ) ;
1598: LD_ADDR_VAR 0 9
1602: PUSH
1603: LD_VAR 0 9
1607: PUSH
1608: LD_EXP 15
1612: PPUSH
1613: LD_STRING 09c_Mike_ID
1615: PPUSH
1616: LD_INT 1
1618: NEG
1619: PPUSH
1620: CALL_OW 30
1624: PPUSH
1625: LD_VAR 0 9
1629: PPUSH
1630: CALL 2764 0 3
1634: DIFF
1635: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Ibrahim , LoadVariable ( 09c_Ibrahim_ID , - 1 ) , vehicles ) ;
1636: LD_ADDR_VAR 0 9
1640: PUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_EXP 16
1650: PPUSH
1651: LD_STRING 09c_Ibrahim_ID
1653: PPUSH
1654: LD_INT 1
1656: NEG
1657: PPUSH
1658: CALL_OW 30
1662: PPUSH
1663: LD_VAR 0 9
1667: PPUSH
1668: CALL 2764 0 3
1672: DIFF
1673: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kamil , LoadVariable ( 09c_Kamil_ID , - 1 ) , vehicles ) ;
1674: LD_ADDR_VAR 0 9
1678: PUSH
1679: LD_VAR 0 9
1683: PUSH
1684: LD_EXP 17
1688: PPUSH
1689: LD_STRING 09c_Kamil_ID
1691: PPUSH
1692: LD_INT 1
1694: NEG
1695: PPUSH
1696: CALL_OW 30
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL 2764 0 3
1710: DIFF
1711: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kaia , LoadVariable ( 09c_Kaia_ID , - 1 ) , vehicles ) ;
1712: LD_ADDR_VAR 0 9
1716: PUSH
1717: LD_VAR 0 9
1721: PUSH
1722: LD_EXP 18
1726: PPUSH
1727: LD_STRING 09c_Kaia_ID
1729: PPUSH
1730: LD_INT 1
1732: NEG
1733: PPUSH
1734: CALL_OW 30
1738: PPUSH
1739: LD_VAR 0 9
1743: PPUSH
1744: CALL 2764 0 3
1748: DIFF
1749: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Sophia , LoadVariable ( 09c_Sophia_ID , - 1 ) , vehicles ) ;
1750: LD_ADDR_VAR 0 9
1754: PUSH
1755: LD_VAR 0 9
1759: PUSH
1760: LD_EXP 19
1764: PPUSH
1765: LD_STRING 09c_Sophia_ID
1767: PPUSH
1768: LD_INT 1
1770: NEG
1771: PPUSH
1772: CALL_OW 30
1776: PPUSH
1777: LD_VAR 0 9
1781: PPUSH
1782: CALL 2764 0 3
1786: DIFF
1787: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Markov , LoadVariable ( 09c_Markov_ID , - 1 ) , vehicles ) ;
1788: LD_ADDR_VAR 0 9
1792: PUSH
1793: LD_VAR 0 9
1797: PUSH
1798: LD_EXP 20
1802: PPUSH
1803: LD_STRING 09c_Markov_ID
1805: PPUSH
1806: LD_INT 1
1808: NEG
1809: PPUSH
1810: CALL_OW 30
1814: PPUSH
1815: LD_VAR 0 9
1819: PPUSH
1820: CALL 2764 0 3
1824: DIFF
1825: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Olaf , LoadVariable ( 09c_Olaf_ID , - 1 ) , vehicles ) ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_VAR 0 9
1835: PUSH
1836: LD_EXP 21
1840: PPUSH
1841: LD_STRING 09c_Olaf_ID
1843: PPUSH
1844: LD_INT 1
1846: NEG
1847: PPUSH
1848: CALL_OW 30
1852: PPUSH
1853: LD_VAR 0 9
1857: PPUSH
1858: CALL 2764 0 3
1862: DIFF
1863: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kurt , LoadVariable ( 09c_Kurt_ID , - 1 ) , vehicles ) ;
1864: LD_ADDR_VAR 0 9
1868: PUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_STRING 09c_Kurt_ID
1881: PPUSH
1882: LD_INT 1
1884: NEG
1885: PPUSH
1886: CALL_OW 30
1890: PPUSH
1891: LD_VAR 0 9
1895: PPUSH
1896: CALL 2764 0 3
1900: DIFF
1901: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Aviradze , LoadVariable ( 09c_Aviradze_ID , - 1 ) , vehicles ) ;
1902: LD_ADDR_VAR 0 9
1906: PUSH
1907: LD_VAR 0 9
1911: PUSH
1912: LD_EXP 23
1916: PPUSH
1917: LD_STRING 09c_Aviradze_ID
1919: PPUSH
1920: LD_INT 1
1922: NEG
1923: PPUSH
1924: CALL_OW 30
1928: PPUSH
1929: LD_VAR 0 9
1933: PPUSH
1934: CALL 2764 0 3
1938: DIFF
1939: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Schulz , LoadVariable ( 09c_Schulz_ID , 34 ) , vehicles ) ;
1940: LD_ADDR_VAR 0 9
1944: PUSH
1945: LD_VAR 0 9
1949: PUSH
1950: LD_EXP 24
1954: PPUSH
1955: LD_STRING 09c_Schulz_ID
1957: PPUSH
1958: LD_INT 34
1960: PPUSH
1961: CALL_OW 30
1965: PPUSH
1966: LD_VAR 0 9
1970: PPUSH
1971: CALL 2764 0 3
1975: DIFF
1976: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Lemmy , LoadVariable ( 09c_Lemmy_ID , 35 ) , vehicles ) ;
1977: LD_ADDR_VAR 0 9
1981: PUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_EXP 26
1991: PPUSH
1992: LD_STRING 09c_Lemmy_ID
1994: PPUSH
1995: LD_INT 35
1997: PPUSH
1998: CALL_OW 30
2002: PPUSH
2003: LD_VAR 0 9
2007: PPUSH
2008: CALL 2764 0 3
2012: DIFF
2013: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mia , LoadVariable ( 09c_Mia_ID , 36 ) , vehicles ) ;
2014: LD_ADDR_VAR 0 9
2018: PUSH
2019: LD_VAR 0 9
2023: PUSH
2024: LD_EXP 27
2028: PPUSH
2029: LD_STRING 09c_Mia_ID
2031: PPUSH
2032: LD_INT 36
2034: PPUSH
2035: CALL_OW 30
2039: PPUSH
2040: LD_VAR 0 9
2044: PPUSH
2045: CALL 2764 0 3
2049: DIFF
2050: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Nia , LoadVariable ( 09c_Nia_ID , 37 ) , vehicles ) ;
2051: LD_ADDR_VAR 0 9
2055: PUSH
2056: LD_VAR 0 9
2060: PUSH
2061: LD_EXP 28
2065: PPUSH
2066: LD_STRING 09c_Nia_ID
2068: PPUSH
2069: LD_INT 37
2071: PPUSH
2072: CALL_OW 30
2076: PPUSH
2077: LD_VAR 0 9
2081: PPUSH
2082: CALL 2764 0 3
2086: DIFF
2087: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Jenna , LoadVariable ( 09c_Jenna_ID , 38 ) , vehicles ) ;
2088: LD_ADDR_VAR 0 9
2092: PUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_EXP 29
2102: PPUSH
2103: LD_STRING 09c_Jenna_ID
2105: PPUSH
2106: LD_INT 38
2108: PPUSH
2109: CALL_OW 30
2113: PPUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: CALL 2764 0 3
2123: DIFF
2124: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Basim , LoadVariable ( 09c_Basim_ID , - 1 ) , vehicles ) ;
2125: LD_ADDR_VAR 0 9
2129: PUSH
2130: LD_VAR 0 9
2134: PUSH
2135: LD_EXP 25
2139: PPUSH
2140: LD_STRING 09c_Basim_ID
2142: PPUSH
2143: LD_INT 1
2145: NEG
2146: PPUSH
2147: CALL_OW 30
2151: PPUSH
2152: LD_VAR 0 9
2156: PPUSH
2157: CALL 2764 0 3
2161: DIFF
2162: ST_TO_ADDR
// for i := 1 to schulzSecondSquad do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_EXP 31
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2238
// vehicles := vehicles diff SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 38 + i ) , vehicles ) ;
2181: LD_ADDR_VAR 0 9
2185: PUSH
2186: LD_VAR 0 9
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_VAR 0 2
2200: ARRAY
2201: PPUSH
2202: LD_STRING 09c_random_ID_
2204: PUSH
2205: LD_VAR 0 2
2209: STR
2210: PPUSH
2211: LD_INT 38
2213: PUSH
2214: LD_VAR 0 2
2218: PLUS
2219: PPUSH
2220: CALL_OW 30
2224: PPUSH
2225: LD_VAR 0 9
2229: PPUSH
2230: CALL 2764 0 3
2234: DIFF
2235: ST_TO_ADDR
2236: GO 2178
2238: POP
2239: POP
// for i := 1 to heikeSecondSquad do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 30
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2310
// vehicles := vehicles diff SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_hrandom_ID_ & i , - 1 ) , vehicles ) ;
2258: LD_ADDR_VAR 0 9
2262: PUSH
2263: LD_VAR 0 9
2267: PUSH
2268: LD_EXP 30
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_STRING 09c_hrandom_ID_
2281: PUSH
2282: LD_VAR 0 2
2286: STR
2287: PPUSH
2288: LD_INT 1
2290: NEG
2291: PPUSH
2292: CALL_OW 30
2296: PPUSH
2297: LD_VAR 0 9
2301: PPUSH
2302: CALL 2764 0 3
2306: DIFF
2307: ST_TO_ADDR
2308: GO 2255
2310: POP
2311: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2312: LD_INT 22
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 34
2324: PUSH
2325: LD_INT 31
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: IFFALSE 2543
// begin for j := Count ( vehicles ) downto 1 do
2342: LD_ADDR_VAR 0 7
2346: PUSH
2347: DOUBLE
2348: LD_VAR 0 9
2352: PPUSH
2353: CALL 17478 0 1
2357: INC
2358: ST_TO_ADDR
2359: LD_INT 1
2361: PUSH
2362: FOR_DOWNTO
2363: IFFALSE 2541
// begin i := vehicles [ j ] ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 9
2374: PUSH
2375: LD_VAR 0 7
2379: ARRAY
2380: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2381: LD_VAR 0 2
2385: PUSH
2386: LD_INT 3
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: IFFALSE 2539
// begin uc_side := 2 ;
2395: LD_ADDR_OWVAR 20
2399: PUSH
2400: LD_INT 2
2402: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2403: LD_ADDR_OWVAR 21
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 5
2415: ARRAY
2416: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 2
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 6
2460: ARRAY
2461: PPUSH
2462: CALL 20216 0 5
// veh := CreateVehicle ;
2466: LD_ADDR_VAR 0 8
2470: PUSH
2471: CALL_OW 45
2475: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2488: LD_VAR 0 8
2492: PPUSH
2493: LD_INT 7
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2503: LD_ADDR_VAR 0 9
2507: PUSH
2508: LD_VAR 0 9
2512: PPUSH
2513: LD_VAR 0 7
2517: PPUSH
2518: CALL_OW 3
2522: ST_TO_ADDR
// Connect ( veh ) ;
2523: LD_VAR 0 8
2527: PPUSH
2528: CALL 23684 0 1
// wait ( 0 0$0.3 ) ;
2532: LD_INT 10
2534: PPUSH
2535: CALL_OW 67
// end ; end ;
2539: GO 2362
2541: POP
2542: POP
// end ; vehicles := LoadVariable ( 09_otherVehicles , [ ] ) ;
2543: LD_ADDR_VAR 0 9
2547: PUSH
2548: LD_STRING 09_otherVehicles
2550: PPUSH
2551: EMPTY
2552: PPUSH
2553: CALL_OW 30
2557: ST_TO_ADDR
// if vehicles then
2558: LD_VAR 0 9
2562: IFFALSE 2759
// begin for i in vehicles do
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_VAR 0 9
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2757
// begin uc_side := 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 5
2597: ARRAY
2598: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 2
2612: PUSH
2613: LD_INT 2
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 2
2621: PUSH
2622: LD_INT 3
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 4
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 6
2642: ARRAY
2643: PPUSH
2644: CALL 20216 0 5
// veh := CreateVehicle ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2658: LD_VAR 0 8
2662: PPUSH
2663: LD_INT 5
2665: PPUSH
2666: CALL_OW 233
// if i [ 7 ] then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 7
2677: ARRAY
2678: IFFALSE 2698
// SetMark ( veh , i [ 7 ] ) ;
2680: LD_VAR 0 8
2684: PPUSH
2685: LD_VAR 0 2
2689: PUSH
2690: LD_INT 7
2692: ARRAY
2693: PPUSH
2694: CALL_OW 242
// PlaceUnitXYD ( veh , i [ 8 ] , i [ 9 ] , i [ 10 ] , false ) ;
2698: LD_VAR 0 8
2702: PPUSH
2703: LD_VAR 0 2
2707: PUSH
2708: LD_INT 8
2710: ARRAY
2711: PPUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 9
2719: ARRAY
2720: PPUSH
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 10
2728: ARRAY
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: CALL 55205 0 5
// SetFuel ( veh , i [ 6 ] ) ;
2737: LD_VAR 0 8
2741: PPUSH
2742: LD_VAR 0 2
2746: PUSH
2747: LD_INT 6
2749: ARRAY
2750: PPUSH
2751: CALL_OW 240
// end ;
2755: GO 2574
2757: POP
2758: POP
// end ; end ;
2759: LD_VAR 0 1
2763: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
// for i in vehicles do
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3016
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 8
2789: ARRAY
2790: PUSH
2791: LD_VAR 0 2
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 5
2801: PUSH
2802: LD_INT 3
2804: ARRAY
2805: PUSH
2806: LD_INT 1
2808: EQUAL
2809: AND
2810: IFFALSE 3014
// begin result := i ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_VAR 0 5
2821: ST_TO_ADDR
// uc_side := 2 ;
2822: LD_ADDR_OWVAR 20
2826: PUSH
2827: LD_INT 2
2829: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2830: LD_ADDR_OWVAR 21
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 5
2842: ARRAY
2843: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 1
2851: ARRAY
2852: PPUSH
2853: LD_VAR 0 5
2857: PUSH
2858: LD_INT 2
2860: ARRAY
2861: PPUSH
2862: LD_VAR 0 5
2866: PUSH
2867: LD_INT 3
2869: ARRAY
2870: PPUSH
2871: LD_VAR 0 5
2875: PUSH
2876: LD_INT 4
2878: ARRAY
2879: PPUSH
2880: LD_VAR 0 5
2884: PUSH
2885: LD_INT 6
2887: ARRAY
2888: PPUSH
2889: CALL 20216 0 5
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2903: LD_VAR 0 6
2907: PPUSH
2908: LD_INT 5
2910: PPUSH
2911: CALL_OW 233
// if i [ 7 ] < 0 then
2915: LD_VAR 0 5
2919: PUSH
2920: LD_INT 7
2922: ARRAY
2923: PUSH
2924: LD_INT 0
2926: LESS
2927: IFFALSE 2947
// SetMark ( veh , i [ 7 ] ) ;
2929: LD_VAR 0 6
2933: PPUSH
2934: LD_VAR 0 5
2938: PUSH
2939: LD_INT 7
2941: ARRAY
2942: PPUSH
2943: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2947: LD_VAR 0 6
2951: PPUSH
2952: LD_INT 7
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL 51983 0 3
2962: NOT
2963: IFFALSE 2996
// begin SetDir ( unit , 5 ) ;
2965: LD_VAR 0 1
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2977: LD_VAR 0 1
2981: PPUSH
2982: LD_INT 8
2984: PPUSH
2985: LD_INT 0
2987: PPUSH
2988: CALL_OW 49
// exit ;
2992: POP
2993: POP
2994: GO 3045
// end ; PlaceHumanInUnit ( unit , veh ) ;
2996: LD_VAR 0 1
3000: PPUSH
3001: LD_VAR 0 6
3005: PPUSH
3006: CALL_OW 52
// exit ;
3010: POP
3011: POP
3012: GO 3045
// end ;
3014: GO 2779
3016: POP
3017: POP
// SetDir ( unit , 5 ) ;
3018: LD_VAR 0 1
3022: PPUSH
3023: LD_INT 5
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
3030: LD_VAR 0 1
3034: PPUSH
3035: LD_INT 8
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 49
// end ; end_of_file
3045: LD_VAR 0 4
3049: RET
// export function PrepareRussian ; begin
3050: LD_INT 0
3052: PPUSH
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
3053: LD_INT 48
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: LD_INT 2
3061: PPUSH
3062: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
3066: LD_INT 49
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 2
3074: PPUSH
3075: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
3079: LD_INT 50
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
3092: LD_INT 51
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3105: LD_INT 57
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 2
3113: PPUSH
3114: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
3118: LD_INT 48
3120: PPUSH
3121: LD_INT 6
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
3131: LD_INT 49
3133: PPUSH
3134: LD_INT 6
3136: PPUSH
3137: LD_INT 2
3139: PPUSH
3140: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
3144: LD_INT 50
3146: PPUSH
3147: LD_INT 6
3149: PPUSH
3150: LD_INT 2
3152: PPUSH
3153: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
3157: LD_INT 51
3159: PPUSH
3160: LD_INT 6
3162: PPUSH
3163: LD_INT 2
3165: PPUSH
3166: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3170: LD_INT 57
3172: PPUSH
3173: LD_INT 6
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: CALL_OW 322
// if Difficulty >= 2 then
3183: LD_OWVAR 67
3187: PUSH
3188: LD_INT 2
3190: GREATEREQUAL
3191: IFFALSE 3271
// begin SetTech ( tech_Weap2 , 3 , state_researched ) ;
3193: LD_INT 52
3195: PPUSH
3196: LD_INT 3
3198: PPUSH
3199: LD_INT 2
3201: PPUSH
3202: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3206: LD_INT 58
3208: PPUSH
3209: LD_INT 3
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3219: LD_INT 63
3221: PPUSH
3222: LD_INT 3
3224: PPUSH
3225: LD_INT 2
3227: PPUSH
3228: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3232: LD_INT 52
3234: PPUSH
3235: LD_INT 6
3237: PPUSH
3238: LD_INT 2
3240: PPUSH
3241: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3245: LD_INT 58
3247: PPUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
3258: LD_INT 63
3260: PPUSH
3261: LD_INT 6
3263: PPUSH
3264: LD_INT 2
3266: PPUSH
3267: CALL_OW 322
// end ; if Difficulty > 2 then
3271: LD_OWVAR 67
3275: PUSH
3276: LD_INT 2
3278: GREATER
3279: IFFALSE 3359
// begin SetTech ( tech_Weap3 , 3 , state_researched ) ;
3281: LD_INT 53
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: LD_INT 2
3289: PPUSH
3290: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3294: LD_INT 59
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_INT 2
3302: PPUSH
3303: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3307: LD_INT 64
3309: PPUSH
3310: LD_INT 3
3312: PPUSH
3313: LD_INT 2
3315: PPUSH
3316: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
3320: LD_INT 53
3322: PPUSH
3323: LD_INT 6
3325: PPUSH
3326: LD_INT 2
3328: PPUSH
3329: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
3333: LD_INT 59
3335: PPUSH
3336: LD_INT 6
3338: PPUSH
3339: LD_INT 2
3341: PPUSH
3342: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
3346: LD_INT 64
3348: PPUSH
3349: LD_INT 6
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 322
// end ; end ;
3359: LD_VAR 0 1
3363: RET
// export ruForces , ruConstructList , ruTanks ; export function PrepareExtraRussianBase ; var i , j , tmp , un , side , skill , b ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
3370: PPUSH
3371: PPUSH
3372: PPUSH
3373: PPUSH
// side := 6 ;
3374: LD_ADDR_VAR 0 6
3378: PUSH
3379: LD_INT 6
3381: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
3382: LD_ADDR_VAR 0 7
3386: PUSH
3387: LD_INT 7
3389: PUSH
3390: LD_INT 8
3392: PUSH
3393: LD_INT 9
3395: PUSH
3396: LD_INT 10
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_OWVAR 67
3409: ARRAY
3410: ST_TO_ADDR
// ruForces := [ ] ;
3411: LD_ADDR_EXP 34
3415: PUSH
3416: EMPTY
3417: ST_TO_ADDR
// ruConstructList := [ ] ;
3418: LD_ADDR_EXP 35
3422: PUSH
3423: EMPTY
3424: ST_TO_ADDR
// ruTanks := [ ] ;
3425: LD_ADDR_EXP 36
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// tmp := [ [ b_warehouse , 107 , 149 , 4 ] , [ b_oil_mine , 115 , 150 , 4 ] , [ b_factory , 101 , 160 , 0 ] , [ b_ext_computer , 97 , 156 , 2 ] , [ b_ext_siberium , 98 , 160 , 1 ] , [ b_ext_noncombat , 101 , 164 , 0 ] , [ b_ext_gun , 104 , 163 , 5 ] , [ b_ext_rocket , 105 , 160 , 4 ] , [ b_siberite_mine , 128 , 132 , 0 ] , [ b_lab_full , 94 , 142 , 1 , b_lab_weapon , b_lab_spacetime ] , [ b_oil_power , 93 , 137 , 0 ] , [ b_oil_power , 111 , 157 , 0 ] , [ b_oil_power , 109 , 158 , 0 ] , [ b_oil_power , 121 , 150 , 0 ] , [ b_siberite_power , 118 , 151 , 0 ] , [ b_barracks , 97 , 133 , 2 ] , [ b_barracks , 117 , 143 , 4 ] , [ b_turret , 100 , 132 , 2 ] , [ b_turret , 130 , 159 , 4 ] , [ b_turret , 131 , 155 , 4 ] , [ b_turret , 90 , 133 , 2 ] , [ b_turret , 70 , 135 , 3 ] ] ;
3432: LD_ADDR_VAR 0 4
3436: PUSH
3437: LD_INT 1
3439: PUSH
3440: LD_INT 107
3442: PUSH
3443: LD_INT 149
3445: PUSH
3446: LD_INT 4
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 29
3457: PUSH
3458: LD_INT 115
3460: PUSH
3461: LD_INT 150
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 3
3475: PUSH
3476: LD_INT 101
3478: PUSH
3479: LD_INT 160
3481: PUSH
3482: LD_INT 0
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 24
3493: PUSH
3494: LD_INT 97
3496: PUSH
3497: LD_INT 156
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 21
3511: PUSH
3512: LD_INT 98
3514: PUSH
3515: LD_INT 160
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_INT 19
3529: PUSH
3530: LD_INT 101
3532: PUSH
3533: LD_INT 164
3535: PUSH
3536: LD_INT 0
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: PUSH
3545: LD_INT 17
3547: PUSH
3548: LD_INT 104
3550: PUSH
3551: LD_INT 163
3553: PUSH
3554: LD_INT 5
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 18
3565: PUSH
3566: LD_INT 105
3568: PUSH
3569: LD_INT 160
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 30
3583: PUSH
3584: LD_INT 128
3586: PUSH
3587: LD_INT 132
3589: PUSH
3590: LD_INT 0
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 8
3601: PUSH
3602: LD_INT 94
3604: PUSH
3605: LD_INT 142
3607: PUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 10
3613: PUSH
3614: LD_INT 14
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 26
3627: PUSH
3628: LD_INT 93
3630: PUSH
3631: LD_INT 137
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 26
3645: PUSH
3646: LD_INT 111
3648: PUSH
3649: LD_INT 157
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 26
3663: PUSH
3664: LD_INT 109
3666: PUSH
3667: LD_INT 158
3669: PUSH
3670: LD_INT 0
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PUSH
3679: LD_INT 26
3681: PUSH
3682: LD_INT 121
3684: PUSH
3685: LD_INT 150
3687: PUSH
3688: LD_INT 0
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 28
3699: PUSH
3700: LD_INT 118
3702: PUSH
3703: LD_INT 151
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 5
3717: PUSH
3718: LD_INT 97
3720: PUSH
3721: LD_INT 133
3723: PUSH
3724: LD_INT 2
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 5
3735: PUSH
3736: LD_INT 117
3738: PUSH
3739: LD_INT 143
3741: PUSH
3742: LD_INT 4
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 33
3753: PUSH
3754: LD_INT 100
3756: PUSH
3757: LD_INT 132
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 33
3771: PUSH
3772: LD_INT 130
3774: PUSH
3775: LD_INT 159
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 33
3789: PUSH
3790: LD_INT 131
3792: PUSH
3793: LD_INT 155
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 33
3807: PUSH
3808: LD_INT 90
3810: PUSH
3811: LD_INT 133
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 33
3825: PUSH
3826: LD_INT 70
3828: PUSH
3829: LD_INT 135
3831: PUSH
3832: LD_INT 3
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: ST_TO_ADDR
// uc_side := side ;
3865: LD_ADDR_OWVAR 20
3869: PUSH
3870: LD_VAR 0 6
3874: ST_TO_ADDR
// uc_nation := nation_russian ;
3875: LD_ADDR_OWVAR 21
3879: PUSH
3880: LD_INT 3
3882: ST_TO_ADDR
// for i in tmp do
3883: LD_ADDR_VAR 0 2
3887: PUSH
3888: LD_VAR 0 4
3892: PUSH
3893: FOR_IN
3894: IFFALSE 4032
// begin InitBc ;
3896: CALL_OW 21
// bc_type := i [ 1 ] ;
3900: LD_ADDR_OWVAR 42
3904: PUSH
3905: LD_VAR 0 2
3909: PUSH
3910: LD_INT 1
3912: ARRAY
3913: ST_TO_ADDR
// bc_level := 6 ;
3914: LD_ADDR_OWVAR 43
3918: PUSH
3919: LD_INT 6
3921: ST_TO_ADDR
// if i > 4 then
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 4
3929: GREATER
3930: IFFALSE 3960
// begin bc_kind1 := i [ 5 ] ;
3932: LD_ADDR_OWVAR 44
3936: PUSH
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 5
3944: ARRAY
3945: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
3946: LD_ADDR_OWVAR 45
3950: PUSH
3951: LD_VAR 0 2
3955: PUSH
3956: LD_INT 6
3958: ARRAY
3959: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3960: LD_ADDR_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 2
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 3
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 4
3990: ARRAY
3991: PPUSH
3992: CALL_OW 47
3996: ST_TO_ADDR
// if i [ 1 ] in [ b_bunker , b_turret ] then
3997: LD_VAR 0 2
4001: PUSH
4002: LD_INT 1
4004: ARRAY
4005: PUSH
4006: LD_INT 32
4008: PUSH
4009: LD_INT 33
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: IN
4016: IFFALSE 4030
// PlaceWeaponTurret ( b , ru_rocket_launcher ) ;
4018: LD_VAR 0 8
4022: PPUSH
4023: LD_INT 45
4025: PPUSH
4026: CALL_OW 431
// end ;
4030: GO 3893
4032: POP
4033: POP
// InitHC_All ( ) ;
4034: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_VAR 0 6
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 30
4057: PUSH
4058: LD_INT 5
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PPUSH
4069: CALL_OW 69
4073: ST_TO_ADDR
// for i in tmp do
4074: LD_ADDR_VAR 0 2
4078: PUSH
4079: LD_VAR 0 4
4083: PUSH
4084: FOR_IN
4085: IFFALSE 4212
// begin for j := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: DOUBLE
4093: LD_INT 1
4095: DEC
4096: ST_TO_ADDR
4097: LD_INT 2
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: LD_INT 4
4105: PUSH
4106: LD_INT 4
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: PUSH
4115: LD_OWVAR 67
4119: ARRAY
4120: PUSH
4121: FOR_TO
4122: IFFALSE 4208
// begin PrepareSoldier ( false , skill ) ;
4124: LD_INT 0
4126: PPUSH
4127: LD_VAR 0 7
4131: PPUSH
4132: CALL_OW 381
// un := CreateHuman ;
4136: LD_ADDR_VAR 0 5
4140: PUSH
4141: CALL_OW 44
4145: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4146: LD_ADDR_EXP 34
4150: PUSH
4151: LD_EXP 34
4155: PPUSH
4156: LD_VAR 0 5
4160: PPUSH
4161: CALL 53065 0 2
4165: ST_TO_ADDR
// if j mod 2 = 0 then
4166: LD_VAR 0 3
4170: PUSH
4171: LD_INT 2
4173: MOD
4174: PUSH
4175: LD_INT 0
4177: EQUAL
4178: IFFALSE 4192
// SetClass ( un , class_bazooker ) ;
4180: LD_VAR 0 5
4184: PPUSH
4185: LD_INT 9
4187: PPUSH
4188: CALL_OW 336
// PlaceHumanInUnit ( un , i ) ;
4192: LD_VAR 0 5
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: CALL_OW 52
// end ;
4206: GO 4121
4208: POP
4209: POP
// end ;
4210: GO 4084
4212: POP
4213: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
4214: LD_ADDR_VAR 0 4
4218: PUSH
4219: LD_INT 22
4221: PUSH
4222: LD_VAR 0 6
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 30
4233: PUSH
4234: LD_INT 1
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: ST_TO_ADDR
// for i in tmp do
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_VAR 0 4
4259: PUSH
4260: FOR_IN
4261: IFFALSE 4485
// begin for j := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
4263: LD_ADDR_VAR 0 3
4267: PUSH
4268: DOUBLE
4269: LD_INT 1
4271: DEC
4272: ST_TO_ADDR
4273: LD_INT 3
4275: PUSH
4276: LD_INT 3
4278: PUSH
4279: LD_INT 4
4281: PUSH
4282: LD_INT 4
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: PUSH
4297: FOR_TO
4298: IFFALSE 4358
// begin PrepareEngineer ( false , skill ) ;
4300: LD_INT 0
4302: PPUSH
4303: LD_VAR 0 7
4307: PPUSH
4308: CALL_OW 382
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 5
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4322: LD_ADDR_EXP 34
4326: PUSH
4327: LD_EXP 34
4331: PPUSH
4332: LD_VAR 0 5
4336: PPUSH
4337: CALL 53065 0 2
4341: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4342: LD_VAR 0 5
4346: PPUSH
4347: LD_VAR 0 2
4351: PPUSH
4352: CALL_OW 52
// end ;
4356: GO 4297
4358: POP
4359: POP
// SetResourceType ( GetBase ( i ) , mat_cans , [ 550 , 600 , 780 , 820 ] [ Difficulty ] ) ;
4360: LD_VAR 0 2
4364: PPUSH
4365: CALL_OW 274
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_INT 550
4375: PUSH
4376: LD_INT 600
4378: PUSH
4379: LD_INT 780
4381: PUSH
4382: LD_INT 820
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_OWVAR 67
4395: ARRAY
4396: PPUSH
4397: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , [ 160 , 160 , 210 , 240 ] [ Difficulty ] ) ;
4401: LD_VAR 0 2
4405: PPUSH
4406: CALL_OW 274
4410: PPUSH
4411: LD_INT 2
4413: PPUSH
4414: LD_INT 160
4416: PUSH
4417: LD_INT 160
4419: PUSH
4420: LD_INT 210
4422: PUSH
4423: LD_INT 240
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_OWVAR 67
4436: ARRAY
4437: PPUSH
4438: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , [ 60 , 60 , 70 , 80 ] [ Difficulty ] ) ;
4442: LD_VAR 0 2
4446: PPUSH
4447: CALL_OW 274
4451: PPUSH
4452: LD_INT 3
4454: PPUSH
4455: LD_INT 60
4457: PUSH
4458: LD_INT 60
4460: PUSH
4461: LD_INT 70
4463: PUSH
4464: LD_INT 80
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: PPUSH
4479: CALL_OW 277
// end ;
4483: GO 4260
4485: POP
4486: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
4487: LD_ADDR_VAR 0 4
4491: PUSH
4492: LD_INT 22
4494: PUSH
4495: LD_VAR 0 6
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 30
4506: PUSH
4507: LD_INT 3
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: ST_TO_ADDR
// for i in tmp do
4523: LD_ADDR_VAR 0 2
4527: PUSH
4528: LD_VAR 0 4
4532: PUSH
4533: FOR_IN
4534: IFFALSE 4629
// begin for j := 1 to 6 do
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: DOUBLE
4542: LD_INT 1
4544: DEC
4545: ST_TO_ADDR
4546: LD_INT 6
4548: PUSH
4549: FOR_TO
4550: IFFALSE 4625
// begin PrepareMechanic ( false , skill ) ;
4552: LD_INT 0
4554: PPUSH
4555: LD_VAR 0 7
4559: PPUSH
4560: CALL_OW 383
// hc_attr := [ 12 , 12 ] ;
4564: LD_ADDR_OWVAR 29
4568: PUSH
4569: LD_INT 12
4571: PUSH
4572: LD_INT 12
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: ST_TO_ADDR
// un := CreateHuman ;
4579: LD_ADDR_VAR 0 5
4583: PUSH
4584: CALL_OW 44
4588: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4589: LD_ADDR_EXP 34
4593: PUSH
4594: LD_EXP 34
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: CALL 53065 0 2
4608: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4609: LD_VAR 0 5
4613: PPUSH
4614: LD_VAR 0 2
4618: PPUSH
4619: CALL_OW 52
// end ;
4623: GO 4549
4625: POP
4626: POP
// end ;
4627: GO 4533
4629: POP
4630: POP
// InitHC_All ( ) ;
4631: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
4635: LD_ADDR_VAR 0 4
4639: PUSH
4640: LD_INT 22
4642: PUSH
4643: LD_VAR 0 6
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 8
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PPUSH
4666: CALL_OW 69
4670: ST_TO_ADDR
// for i in tmp do
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_VAR 0 4
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4762
// begin for j := 1 to 2 do
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: DOUBLE
4690: LD_INT 1
4692: DEC
4693: ST_TO_ADDR
4694: LD_INT 2
4696: PUSH
4697: FOR_TO
4698: IFFALSE 4758
// begin PrepareScientist ( false , skill ) ;
4700: LD_INT 0
4702: PPUSH
4703: LD_VAR 0 7
4707: PPUSH
4708: CALL_OW 384
// un := CreateHuman ;
4712: LD_ADDR_VAR 0 5
4716: PUSH
4717: CALL_OW 44
4721: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4722: LD_ADDR_EXP 34
4726: PUSH
4727: LD_EXP 34
4731: PPUSH
4732: LD_VAR 0 5
4736: PPUSH
4737: CALL 53065 0 2
4741: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4742: LD_VAR 0 5
4746: PPUSH
4747: LD_VAR 0 2
4751: PPUSH
4752: CALL_OW 52
// end ;
4756: GO 4697
4758: POP
4759: POP
// end ;
4760: GO 4681
4762: POP
4763: POP
// end ;
4764: LD_VAR 0 1
4768: RET
// function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
4769: LD_INT 0
4771: PPUSH
4772: PPUSH
4773: PPUSH
4774: PPUSH
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// result := [ ] ;
4781: LD_ADDR_VAR 0 3
4785: PUSH
4786: EMPTY
4787: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
4788: LD_ADDR_VAR 0 8
4792: PUSH
4793: LD_INT 7
4795: PUSH
4796: LD_INT 8
4798: PUSH
4799: LD_INT 9
4801: PUSH
4802: LD_INT 10
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_OWVAR 67
4815: ARRAY
4816: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
4817: LD_ADDR_VAR 0 9
4821: PUSH
4822: LD_INT 15
4824: PUSH
4825: LD_INT 17
4827: PUSH
4828: LD_INT 19
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_VAR 0 1
4840: ARRAY
4841: ST_TO_ADDR
// parking := [ ruGatPoint1Area , ruGatPoint2Area , ruGatPoint3Area ] [ spot ] ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_INT 16
4849: PUSH
4850: LD_INT 18
4852: PUSH
4853: LD_INT 20
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: LD_VAR 0 1
4865: ARRAY
4866: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
4867: LD_ADDR_VAR 0 11
4871: PUSH
4872: LD_INT 5
4874: PUSH
4875: LD_INT 0
4877: PUSH
4878: LD_INT 2
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: ARRAY
4891: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) then
4892: LD_VAR 0 9
4896: PPUSH
4897: LD_INT 2
4899: PUSH
4900: LD_INT 22
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 22
4912: PUSH
4913: LD_INT 3
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: IFFALSE 4990
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) do
4931: LD_ADDR_VAR 0 4
4935: PUSH
4936: LD_VAR 0 9
4940: PPUSH
4941: LD_INT 2
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: PPUSH
4969: CALL_OW 70
4973: PUSH
4974: FOR_IN
4975: IFFALSE 4988
// RemoveUnit ( i ) ;
4977: LD_VAR 0 4
4981: PPUSH
4982: CALL_OW 64
4986: GO 4974
4988: POP
4989: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
4990: LD_VAR 0 9
4994: PPUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 21
5000: PUSH
5001: LD_INT 1
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 70
5030: IFFALSE 5094
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: LD_VAR 0 9
5041: PPUSH
5042: LD_INT 3
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: LD_INT 22
5061: PUSH
5062: LD_INT 2
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: PUSH
5078: FOR_IN
5079: IFFALSE 5092
// KillUnit ( i ) ;
5081: LD_VAR 0 4
5085: PPUSH
5086: CALL_OW 66
5090: GO 5078
5092: POP
5093: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
5094: LD_VAR 0 9
5098: PPUSH
5099: LD_INT 21
5101: PUSH
5102: LD_INT 1
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5190
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
5129: LD_ADDR_VAR 0 4
5133: PUSH
5134: LD_VAR 0 9
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 22
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5188
// ComMoveXY ( i , 91 , 56 ) ;
5171: LD_VAR 0 4
5175: PPUSH
5176: LD_INT 91
5178: PPUSH
5179: LD_INT 56
5181: PPUSH
5182: CALL_OW 111
5186: GO 5168
5188: POP
5189: POP
// repeat wait ( 0 0$1 ) ;
5190: LD_INT 35
5192: PPUSH
5193: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5197: LD_VAR 0 9
5201: PPUSH
5202: LD_INT 50
5204: PUSH
5205: EMPTY
5206: LIST
5207: PPUSH
5208: CALL_OW 70
5212: NOT
5213: IFFALSE 5190
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] + strength do
5215: LD_ADDR_VAR 0 4
5219: PUSH
5220: DOUBLE
5221: LD_INT 1
5223: DEC
5224: ST_TO_ADDR
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 5
5233: PUSH
5234: LD_INT 6
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: PUSH
5243: LD_OWVAR 67
5247: ARRAY
5248: PUSH
5249: LD_VAR 0 2
5253: PLUS
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5577
// begin uc_side := 3 ;
5258: LD_ADDR_OWVAR 20
5262: PUSH
5263: LD_INT 3
5265: ST_TO_ADDR
// uc_nation := nation_russian ;
5266: LD_ADDR_OWVAR 21
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
5274: LD_ADDR_VAR 0 12
5278: PUSH
5279: LD_INT 1
5281: PUSH
5282: LD_INT 3
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 12
5307: ARRAY
5308: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
5309: LD_INT 22
5311: PUSH
5312: LD_INT 24
5314: PUSH
5315: LD_INT 23
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_VAR 0 4
5327: PUSH
5328: LD_INT 3
5330: MOD
5331: PUSH
5332: LD_INT 1
5334: PLUS
5335: ARRAY
5336: PPUSH
5337: LD_INT 3
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: LD_INT 1
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: CALL_OW 12
5357: ARRAY
5358: PPUSH
5359: LD_VAR 0 12
5363: PPUSH
5364: LD_INT 45
5366: PUSH
5367: LD_INT 46
5369: PUSH
5370: LD_INT 43
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: LD_VAR 0 4
5382: PUSH
5383: LD_INT 3
5385: MOD
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: ARRAY
5391: PPUSH
5392: LD_INT 100
5394: PPUSH
5395: CALL 20216 0 5
// veh := CreateVehicle ;
5399: LD_ADDR_VAR 0 7
5403: PUSH
5404: CALL_OW 45
5408: ST_TO_ADDR
// SetDir ( veh , dir ) ;
5409: LD_VAR 0 7
5413: PPUSH
5414: LD_VAR 0 11
5418: PPUSH
5419: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
5423: LD_VAR 0 7
5427: PPUSH
5428: LD_VAR 0 9
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: CALL_OW 49
// if control = control_manual then
5440: LD_VAR 0 12
5444: PUSH
5445: LD_INT 1
5447: EQUAL
5448: IFFALSE 5516
// begin uc_side := 3 ;
5450: LD_ADDR_OWVAR 20
5454: PUSH
5455: LD_INT 3
5457: ST_TO_ADDR
// uc_nation := nation_russian ;
5458: LD_ADDR_OWVAR 21
5462: PUSH
5463: LD_INT 3
5465: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5466: LD_INT 0
5468: PPUSH
5469: LD_VAR 0 8
5473: PPUSH
5474: CALL_OW 383
// un := CreateHuman ;
5478: LD_ADDR_VAR 0 6
5482: PUSH
5483: CALL_OW 44
5487: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5488: LD_VAR 0 6
5492: PPUSH
5493: LD_VAR 0 7
5497: PPUSH
5498: CALL_OW 52
// SetTag ( un , spot ) ;
5502: LD_VAR 0 6
5506: PPUSH
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 109
// end ; repeat ComMoveToArea ( veh , parking ) ;
5516: LD_VAR 0 7
5520: PPUSH
5521: LD_VAR 0 10
5525: PPUSH
5526: CALL_OW 113
// wait ( 0 0$3 ) ;
5530: LD_INT 105
5532: PPUSH
5533: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5537: LD_VAR 0 9
5541: PPUSH
5542: LD_INT 50
5544: PUSH
5545: EMPTY
5546: LIST
5547: PPUSH
5548: CALL_OW 70
5552: NOT
5553: IFFALSE 5516
// result := Join ( result , veh ) ;
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_VAR 0 3
5564: PPUSH
5565: LD_VAR 0 7
5569: PPUSH
5570: CALL 53065 0 2
5574: ST_TO_ADDR
// end ;
5575: GO 5255
5577: POP
5578: POP
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
5579: LD_ADDR_VAR 0 4
5583: PUSH
5584: DOUBLE
5585: LD_INT 1
5587: DEC
5588: ST_TO_ADDR
5589: LD_INT 2
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: LD_INT 3
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: PUSH
5607: LD_OWVAR 67
5611: ARRAY
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5784
// begin uc_side := 3 ;
5616: LD_ADDR_OWVAR 20
5620: PUSH
5621: LD_INT 3
5623: ST_TO_ADDR
// uc_nation := nation_russian ;
5624: LD_ADDR_OWVAR 21
5628: PUSH
5629: LD_INT 3
5631: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5632: LD_INT 0
5634: PPUSH
5635: LD_VAR 0 8
5639: PPUSH
5640: CALL_OW 381
// un := CreateHuman ;
5644: LD_ADDR_VAR 0 6
5648: PUSH
5649: CALL_OW 44
5653: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5654: LD_INT 30
5656: PUSH
5657: LD_INT 40
5659: PUSH
5660: LD_INT 50
5662: PUSH
5663: LD_INT 50
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_OWVAR 67
5676: ARRAY
5677: PPUSH
5678: CALL_OW 13
5682: IFFALSE 5696
// SetClass ( un , class_bazooker ) ;
5684: LD_VAR 0 6
5688: PPUSH
5689: LD_INT 9
5691: PPUSH
5692: CALL_OW 336
// SetDir ( un , dir ) ;
5696: LD_VAR 0 6
5700: PPUSH
5701: LD_VAR 0 11
5705: PPUSH
5706: CALL_OW 233
// SetTag ( un , spot ) ;
5710: LD_VAR 0 6
5714: PPUSH
5715: LD_VAR 0 1
5719: PPUSH
5720: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
5724: LD_VAR 0 6
5728: PPUSH
5729: LD_VAR 0 9
5733: PPUSH
5734: LD_INT 0
5736: PPUSH
5737: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
5741: LD_VAR 0 6
5745: PPUSH
5746: LD_VAR 0 10
5750: PPUSH
5751: CALL_OW 113
// wait ( 0 0$1 ) ;
5755: LD_INT 35
5757: PPUSH
5758: CALL_OW 67
// result := Join ( result , un ) ;
5762: LD_ADDR_VAR 0 3
5766: PUSH
5767: LD_VAR 0 3
5771: PPUSH
5772: LD_VAR 0 6
5776: PPUSH
5777: CALL 53065 0 2
5781: ST_TO_ADDR
// end ;
5782: GO 5613
5784: POP
5785: POP
// end ;
5786: LD_VAR 0 3
5790: RET
// function PrepareRussianExtraInfantry ; var i , un ; begin
5791: LD_INT 0
5793: PPUSH
5794: PPUSH
5795: PPUSH
// result := [ ] ;
5796: LD_ADDR_VAR 0 1
5800: PUSH
5801: EMPTY
5802: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty + 1 ] do
5803: LD_ADDR_VAR 0 2
5807: PUSH
5808: DOUBLE
5809: LD_INT 1
5811: DEC
5812: ST_TO_ADDR
5813: LD_INT 3
5815: PUSH
5816: LD_INT 3
5818: PUSH
5819: LD_INT 4
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: PUSH
5827: LD_OWVAR 67
5831: PUSH
5832: LD_INT 1
5834: PLUS
5835: ARRAY
5836: PUSH
5837: FOR_TO
5838: IFFALSE 5976
// begin uc_side := 3 ;
5840: LD_ADDR_OWVAR 20
5844: PUSH
5845: LD_INT 3
5847: ST_TO_ADDR
// uc_nation := nation_russian ;
5848: LD_ADDR_OWVAR 21
5852: PUSH
5853: LD_INT 3
5855: ST_TO_ADDR
// PrepareSoldier ( false , [ 7 , 8 , 9 ] [ Difficulty + 1 ] ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_INT 7
5861: PUSH
5862: LD_INT 8
5864: PUSH
5865: LD_INT 9
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: PUSH
5873: LD_OWVAR 67
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ARRAY
5882: PPUSH
5883: CALL_OW 381
// un := CreateHuman ;
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: CALL_OW 44
5896: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5897: LD_INT 30
5899: PUSH
5900: LD_INT 40
5902: PUSH
5903: LD_INT 50
5905: PUSH
5906: LD_INT 50
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: PUSH
5915: LD_OWVAR 67
5919: ARRAY
5920: PPUSH
5921: CALL_OW 13
5925: IFFALSE 5939
// SetClass ( un , class_bazooker ) ;
5927: LD_VAR 0 3
5931: PPUSH
5932: LD_INT 9
5934: PPUSH
5935: CALL_OW 336
// PlaceUnitArea ( un , extraSpawnAttackArea , false ) ;
5939: LD_VAR 0 3
5943: PPUSH
5944: LD_INT 25
5946: PPUSH
5947: LD_INT 0
5949: PPUSH
5950: CALL_OW 49
// result := Join ( result , un ) ;
5954: LD_ADDR_VAR 0 1
5958: PUSH
5959: LD_VAR 0 1
5963: PPUSH
5964: LD_VAR 0 3
5968: PPUSH
5969: CALL 53065 0 2
5973: ST_TO_ADDR
// end ;
5974: GO 5837
5976: POP
5977: POP
// end ;
5978: LD_VAR 0 1
5982: RET
// function SendBulldozer ; var un ; begin
5983: LD_INT 0
5985: PPUSH
5986: PPUSH
// uc_side := 3 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 3
5994: ST_TO_ADDR
// uc_nation := nation_russian ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 3
6002: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
6003: LD_INT 23
6005: PPUSH
6006: LD_INT 3
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: LD_INT 53
6014: PPUSH
6015: LD_INT 100
6017: PPUSH
6018: CALL 20216 0 5
// un := CreateVehicle ;
6022: LD_ADDR_VAR 0 2
6026: PUSH
6027: CALL_OW 45
6031: ST_TO_ADDR
// PlaceUnitXYD ( un , 7 , 8 , 1 , false ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_INT 7
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_INT 1
6045: PPUSH
6046: LD_INT 0
6048: PPUSH
6049: CALL 55205 0 5
// wait ( 0 0$1 ) ;
6053: LD_INT 35
6055: PPUSH
6056: CALL_OW 67
// CutTreeInArea ( un , cutTreeWArea ) ;
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_INT 24
6067: PPUSH
6068: CALL 11500 0 2
// end ;
6072: LD_VAR 0 1
6076: RET
// every 0 0$3 trigger wave >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
6077: LD_EXP 11
6081: PUSH
6082: LD_INT 4
6084: PUSH
6085: LD_INT 5
6087: PUSH
6088: LD_INT 6
6090: PUSH
6091: LD_INT 7
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: LD_OWVAR 67
6104: ARRAY
6105: GREATEREQUAL
6106: IFFALSE 6170
6108: GO 6110
6110: DISABLE
// begin ChangeSideFog ( 3 , 2 ) ;
6111: LD_INT 3
6113: PPUSH
6114: LD_INT 2
6116: PPUSH
6117: CALL_OW 343
// repeat wait ( 0 0$1 ) ;
6121: LD_INT 35
6123: PPUSH
6124: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 ;
6128: LD_INT 22
6130: PUSH
6131: LD_INT 6
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 21
6140: PUSH
6141: LD_INT 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PPUSH
6152: CALL_OW 69
6156: PUSH
6157: LD_INT 0
6159: EQUAL
6160: IFFALSE 6121
// ruDefeated := true ;
6162: LD_ADDR_EXP 10
6166: PUSH
6167: LD_INT 1
6169: ST_TO_ADDR
// end ;
6170: END
// every 6 6$20 + 4 4$00 trigger wave < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do var i , e , attackers , extraAttackers , spot , extraSpot , paths , enemy ;
6171: LD_EXP 11
6175: PUSH
6176: LD_INT 4
6178: PUSH
6179: LD_INT 5
6181: PUSH
6182: LD_INT 6
6184: PUSH
6185: LD_INT 7
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: LD_OWVAR 67
6198: ARRAY
6199: LESS
6200: IFFALSE 7303
6202: GO 6204
6204: DISABLE
6205: LD_INT 0
6207: PPUSH
6208: PPUSH
6209: PPUSH
6210: PPUSH
6211: PPUSH
6212: PPUSH
6213: PPUSH
6214: PPUSH
// begin enable ;
6215: ENABLE
// attackers := [ ] ;
6216: LD_ADDR_VAR 0 3
6220: PUSH
6221: EMPTY
6222: ST_TO_ADDR
// extraAttackers := [ ] ;
6223: LD_ADDR_VAR 0 4
6227: PUSH
6228: EMPTY
6229: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 87 , 141 ] , [ 80 , 120 ] , [ 66 , 95 ] , [ 51 , 69 ] , [ 36 , 40 ] , [ 47 , 31 ] , [ 60 , 28 ] ] , [ [ 21 , 17 ] , [ 35 , 30 ] , [ 49 , 31 ] ] ] ;
6230: LD_ADDR_VAR 0 7
6234: PUSH
6235: LD_INT 176
6237: PUSH
6238: LD_INT 152
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 157
6247: PUSH
6248: LD_INT 122
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 146
6257: PUSH
6258: LD_INT 89
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 125
6267: PUSH
6268: LD_INT 46
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 87
6283: PUSH
6284: LD_INT 141
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 80
6293: PUSH
6294: LD_INT 120
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 66
6303: PUSH
6304: LD_INT 95
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 51
6313: PUSH
6314: LD_INT 69
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 36
6323: PUSH
6324: LD_INT 40
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 47
6333: PUSH
6334: LD_INT 31
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 60
6343: PUSH
6344: LD_INT 28
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 21
6362: PUSH
6363: LD_INT 17
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 35
6372: PUSH
6373: LD_INT 30
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 49
6382: PUSH
6383: LD_INT 31
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: ST_TO_ADDR
// wave := Inc ( wave ) ;
6400: LD_ADDR_EXP 11
6404: PUSH
6405: LD_EXP 11
6409: PPUSH
6410: CALL 54426 0 1
6414: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
6415: LD_ADDR_VAR 0 5
6419: PUSH
6420: LD_INT 1
6422: PPUSH
6423: LD_INT 3
6425: PPUSH
6426: CALL_OW 12
6430: ST_TO_ADDR
// if wave mod 2 = 0 then
6431: LD_EXP 11
6435: PUSH
6436: LD_INT 2
6438: MOD
6439: PUSH
6440: LD_INT 0
6442: EQUAL
6443: IFFALSE 6460
// strength := Inc ( strength ) ;
6445: LD_ADDR_EXP 12
6449: PUSH
6450: LD_EXP 12
6454: PPUSH
6455: CALL 54426 0 1
6459: ST_TO_ADDR
// if Count ( ListEnvironmentArea ( cutTreeWArea ) ) then
6460: LD_INT 24
6462: PPUSH
6463: CALL_OW 353
6467: PPUSH
6468: CALL 17478 0 1
6472: IFFALSE 6478
// SendBulldozer ;
6474: CALL 5983 0 0
// attackers := PrepareRussianAttack ( spot , strength ) ;
6478: LD_ADDR_VAR 0 3
6482: PUSH
6483: LD_VAR 0 5
6487: PPUSH
6488: LD_EXP 12
6492: PPUSH
6493: CALL 4769 0 2
6497: ST_TO_ADDR
// if wave + [ 2 , 2 , 3 , 3 ] [ Difficulty ] >= [ 6 , 7 , 8 , 9 ] [ Difficulty ] then
6498: LD_EXP 11
6502: PUSH
6503: LD_INT 2
6505: PUSH
6506: LD_INT 2
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 3
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_OWVAR 67
6525: ARRAY
6526: PLUS
6527: PUSH
6528: LD_INT 6
6530: PUSH
6531: LD_INT 7
6533: PUSH
6534: LD_INT 8
6536: PUSH
6537: LD_INT 9
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_OWVAR 67
6550: ARRAY
6551: GREATEREQUAL
6552: IFFALSE 6620
// begin extraSpot := spot - 1 ;
6554: LD_ADDR_VAR 0 6
6558: PUSH
6559: LD_VAR 0 5
6563: PUSH
6564: LD_INT 1
6566: MINUS
6567: ST_TO_ADDR
// if extraSpot < 1 then
6568: LD_VAR 0 6
6572: PUSH
6573: LD_INT 1
6575: LESS
6576: IFFALSE 6586
// extraSpot := 3 ;
6578: LD_ADDR_VAR 0 6
6582: PUSH
6583: LD_INT 3
6585: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , strength ) ;
6586: LD_ADDR_VAR 0 4
6590: PUSH
6591: LD_VAR 0 6
6595: PPUSH
6596: LD_EXP 12
6600: PPUSH
6601: CALL 4769 0 2
6605: ST_TO_ADDR
// if Difficulty > 1 then
6606: LD_OWVAR 67
6610: PUSH
6611: LD_INT 1
6613: GREATER
6614: IFFALSE 6620
// PrepareRussianExtraInfantry ;
6616: CALL 5791 0 0
// end ; repeat wait ( 0 0$2 ) ;
6620: LD_INT 70
6622: PPUSH
6623: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
6627: LD_ADDR_VAR 0 8
6631: PUSH
6632: LD_INT 22
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: ST_TO_ADDR
// for i in attackers do
6647: LD_ADDR_VAR 0 1
6651: PUSH
6652: LD_VAR 0 3
6656: PUSH
6657: FOR_IN
6658: IFFALSE 6963
// begin if not IsOk ( i ) then
6660: LD_VAR 0 1
6664: PPUSH
6665: CALL_OW 302
6669: NOT
6670: IFFALSE 6690
// begin attackers := attackers diff i ;
6672: LD_ADDR_VAR 0 3
6676: PUSH
6677: LD_VAR 0 3
6681: PUSH
6682: LD_VAR 0 1
6686: DIFF
6687: ST_TO_ADDR
// continue ;
6688: GO 6657
// end ; if GetType ( i ) = unit_vehicle then
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 247
6699: PUSH
6700: LD_INT 2
6702: EQUAL
6703: IFFALSE 6727
// AgressiveMove ( i , paths [ spot ] ) else
6705: LD_VAR 0 1
6709: PPUSH
6710: LD_VAR 0 7
6714: PUSH
6715: LD_VAR 0 5
6719: ARRAY
6720: PPUSH
6721: CALL 55669 0 2
6725: GO 6961
// begin if GetClass ( i ) = class_bazooker then
6727: LD_VAR 0 1
6731: PPUSH
6732: CALL_OW 257
6736: PUSH
6737: LD_INT 9
6739: EQUAL
6740: IFFALSE 6937
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
6742: LD_VAR 0 1
6746: PPUSH
6747: LD_VAR 0 8
6751: PPUSH
6752: LD_VAR 0 1
6756: PPUSH
6757: CALL_OW 74
6761: PPUSH
6762: CALL_OW 296
6766: PUSH
6767: LD_INT 12
6769: GREATER
6770: IFFALSE 6798
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
6772: LD_VAR 0 1
6776: PPUSH
6777: LD_VAR 0 8
6781: PPUSH
6782: LD_VAR 0 1
6786: PPUSH
6787: CALL_OW 74
6791: PPUSH
6792: CALL 57137 0 2
6796: GO 6935
// begin e := NearestUnitToUnit ( enemy , i ) ;
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: LD_VAR 0 8
6807: PPUSH
6808: LD_VAR 0 1
6812: PPUSH
6813: CALL_OW 74
6817: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
6818: LD_INT 1
6820: PPUSH
6821: LD_INT 3
6823: PPUSH
6824: CALL_OW 12
6828: PUSH
6829: LD_INT 1
6831: DOUBLE
6832: EQUAL
6833: IFTRUE 6837
6835: GO 6854
6837: POP
// ComAttackUnit ( i , e ) ; 2 :
6838: LD_VAR 0 1
6842: PPUSH
6843: LD_VAR 0 2
6847: PPUSH
6848: CALL_OW 115
6852: GO 6935
6854: LD_INT 2
6856: DOUBLE
6857: EQUAL
6858: IFTRUE 6862
6860: GO 6894
6862: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
6863: LD_VAR 0 1
6867: PPUSH
6868: LD_VAR 0 2
6872: PPUSH
6873: CALL_OW 250
6877: PPUSH
6878: LD_VAR 0 2
6882: PPUSH
6883: CALL_OW 251
6887: PPUSH
6888: CALL_OW 153
6892: GO 6935
6894: LD_INT 3
6896: DOUBLE
6897: EQUAL
6898: IFTRUE 6902
6900: GO 6934
6902: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
6903: LD_VAR 0 1
6907: PPUSH
6908: LD_VAR 0 2
6912: PPUSH
6913: CALL_OW 250
6917: PPUSH
6918: LD_VAR 0 2
6922: PPUSH
6923: CALL_OW 251
6927: PPUSH
6928: CALL_OW 154
6932: GO 6935
6934: POP
// end ; end else
6935: GO 6961
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6937: LD_VAR 0 1
6941: PPUSH
6942: LD_VAR 0 8
6946: PPUSH
6947: LD_VAR 0 1
6951: PPUSH
6952: CALL_OW 74
6956: PPUSH
6957: CALL 57137 0 2
// end ; end ;
6961: GO 6657
6963: POP
6964: POP
// if extraAttackers then
6965: LD_VAR 0 4
6969: IFFALSE 7289
// begin for i in extraAttackers do
6971: LD_ADDR_VAR 0 1
6975: PUSH
6976: LD_VAR 0 4
6980: PUSH
6981: FOR_IN
6982: IFFALSE 7287
// begin if not IsOk ( i ) then
6984: LD_VAR 0 1
6988: PPUSH
6989: CALL_OW 302
6993: NOT
6994: IFFALSE 7014
// begin extraAttackers := extraAttackers diff i ;
6996: LD_ADDR_VAR 0 4
7000: PUSH
7001: LD_VAR 0 4
7005: PUSH
7006: LD_VAR 0 1
7010: DIFF
7011: ST_TO_ADDR
// continue ;
7012: GO 6981
// end ; if GetType ( i ) = unit_vehicle then
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL_OW 247
7023: PUSH
7024: LD_INT 2
7026: EQUAL
7027: IFFALSE 7051
// AgressiveMove ( i , paths [ extraSpot ] ) else
7029: LD_VAR 0 1
7033: PPUSH
7034: LD_VAR 0 7
7038: PUSH
7039: LD_VAR 0 6
7043: ARRAY
7044: PPUSH
7045: CALL 55669 0 2
7049: GO 7285
// begin if GetClass ( i ) = class_bazooker then
7051: LD_VAR 0 1
7055: PPUSH
7056: CALL_OW 257
7060: PUSH
7061: LD_INT 9
7063: EQUAL
7064: IFFALSE 7261
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
7066: LD_VAR 0 1
7070: PPUSH
7071: LD_VAR 0 8
7075: PPUSH
7076: LD_VAR 0 1
7080: PPUSH
7081: CALL_OW 74
7085: PPUSH
7086: CALL_OW 296
7090: PUSH
7091: LD_INT 12
7093: GREATER
7094: IFFALSE 7122
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
7096: LD_VAR 0 1
7100: PPUSH
7101: LD_VAR 0 8
7105: PPUSH
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 74
7115: PPUSH
7116: CALL 57137 0 2
7120: GO 7259
// begin e := NearestUnitToUnit ( enemy , i ) ;
7122: LD_ADDR_VAR 0 2
7126: PUSH
7127: LD_VAR 0 8
7131: PPUSH
7132: LD_VAR 0 1
7136: PPUSH
7137: CALL_OW 74
7141: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
7142: LD_INT 1
7144: PPUSH
7145: LD_INT 3
7147: PPUSH
7148: CALL_OW 12
7152: PUSH
7153: LD_INT 1
7155: DOUBLE
7156: EQUAL
7157: IFTRUE 7161
7159: GO 7178
7161: POP
// ComAttackUnit ( i , e ) ; 2 :
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_VAR 0 2
7171: PPUSH
7172: CALL_OW 115
7176: GO 7259
7178: LD_INT 2
7180: DOUBLE
7181: EQUAL
7182: IFTRUE 7186
7184: GO 7218
7186: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 250
7201: PPUSH
7202: LD_VAR 0 2
7206: PPUSH
7207: CALL_OW 251
7211: PPUSH
7212: CALL_OW 153
7216: GO 7259
7218: LD_INT 3
7220: DOUBLE
7221: EQUAL
7222: IFTRUE 7226
7224: GO 7258
7226: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
7227: LD_VAR 0 1
7231: PPUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: CALL_OW 250
7241: PPUSH
7242: LD_VAR 0 2
7246: PPUSH
7247: CALL_OW 251
7251: PPUSH
7252: CALL_OW 154
7256: GO 7259
7258: POP
// end ; end else
7259: GO 7285
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7261: LD_VAR 0 1
7265: PPUSH
7266: LD_VAR 0 8
7270: PPUSH
7271: LD_VAR 0 1
7275: PPUSH
7276: CALL_OW 74
7280: PPUSH
7281: CALL 57137 0 2
// end ; end ;
7285: GO 6981
7287: POP
7288: POP
// end ; until not attackers and not extraAttackers ;
7289: LD_VAR 0 3
7293: NOT
7294: PUSH
7295: LD_VAR 0 4
7299: NOT
7300: AND
7301: IFFALSE 6620
// end ;
7303: PPOPN 8
7305: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] ] ) do var i , tmp , lab , eng , tag , un , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , ruBase , fac ;
7306: LD_INT 22
7308: PUSH
7309: LD_INT 6
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 50
7318: PUSH
7319: EMPTY
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 69
7330: IFFALSE 9019
7332: GO 7334
7334: DISABLE
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
7346: PPUSH
7347: PPUSH
7348: PPUSH
7349: PPUSH
7350: PPUSH
7351: PPUSH
// begin enable ;
7352: ENABLE
// ruBase := FilterUnitsInARea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_warehouse ] , [ f_ok ] ] ) ;
7353: LD_ADDR_VAR 0 14
7357: PUSH
7358: LD_INT 26
7360: PPUSH
7361: LD_INT 22
7363: PUSH
7364: LD_INT 6
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 30
7373: PUSH
7374: LD_INT 1
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: LD_INT 50
7383: PUSH
7384: EMPTY
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 70
7396: ST_TO_ADDR
// if ruBase then
7397: LD_VAR 0 14
7401: IFFALSE 7417
// ruBase := ruBase [ 1 ] ;
7403: LD_ADDR_VAR 0 14
7407: PUSH
7408: LD_VAR 0 14
7412: PUSH
7413: LD_INT 1
7415: ARRAY
7416: ST_TO_ADDR
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7417: LD_ADDR_VAR 0 15
7421: PUSH
7422: LD_INT 26
7424: PPUSH
7425: LD_INT 22
7427: PUSH
7428: LD_INT 6
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 30
7437: PUSH
7438: LD_INT 3
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 50
7447: PUSH
7448: EMPTY
7449: LIST
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 70
7460: ST_TO_ADDR
// if ruConstructList and fac then
7461: LD_EXP 35
7465: PUSH
7466: LD_VAR 0 15
7470: AND
7471: IFFALSE 7624
// if BuildingStatus ( fac [ 1 ] ) = bs_idle and CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
7473: LD_VAR 0 15
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: CALL_OW 461
7486: PUSH
7487: LD_INT 2
7489: EQUAL
7490: PUSH
7491: LD_VAR 0 15
7495: PUSH
7496: LD_INT 1
7498: ARRAY
7499: PPUSH
7500: LD_EXP 35
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: ARRAY
7512: PPUSH
7513: LD_EXP 35
7517: PUSH
7518: LD_INT 1
7520: ARRAY
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PPUSH
7526: LD_EXP 35
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: PUSH
7535: LD_INT 3
7537: ARRAY
7538: PPUSH
7539: LD_EXP 35
7543: PUSH
7544: LD_INT 1
7546: ARRAY
7547: PUSH
7548: LD_INT 4
7550: ARRAY
7551: PPUSH
7552: CALL_OW 448
7556: AND
7557: IFFALSE 7624
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
7559: LD_VAR 0 15
7563: PUSH
7564: LD_INT 1
7566: ARRAY
7567: PPUSH
7568: LD_EXP 35
7572: PUSH
7573: LD_INT 1
7575: ARRAY
7576: PUSH
7577: LD_INT 1
7579: ARRAY
7580: PPUSH
7581: LD_EXP 35
7585: PUSH
7586: LD_INT 1
7588: ARRAY
7589: PUSH
7590: LD_INT 2
7592: ARRAY
7593: PPUSH
7594: LD_EXP 35
7598: PUSH
7599: LD_INT 1
7601: ARRAY
7602: PUSH
7603: LD_INT 3
7605: ARRAY
7606: PPUSH
7607: LD_EXP 35
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PUSH
7616: LD_INT 4
7618: ARRAY
7619: PPUSH
7620: CALL_OW 125
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: LD_INT 26
7631: PPUSH
7632: LD_INT 21
7634: PUSH
7635: LD_INT 3
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 3
7644: PUSH
7645: LD_INT 24
7647: PUSH
7648: LD_INT 1000
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PPUSH
7663: CALL_OW 70
7667: ST_TO_ADDR
// cr := GetListOfCratesInArea ( crates6Area ) ;
7668: LD_ADDR_VAR 0 8
7672: PUSH
7673: LD_INT 14
7675: PPUSH
7676: CALL_OW 435
7680: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7681: LD_ADDR_VAR 0 9
7685: PUSH
7686: LD_EXP 34
7690: PPUSH
7691: LD_INT 25
7693: PUSH
7694: LD_INT 4
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 50
7703: PUSH
7704: EMPTY
7705: LIST
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PPUSH
7711: CALL_OW 72
7715: ST_TO_ADDR
// if sci then
7716: LD_VAR 0 9
7720: IFFALSE 7947
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
7722: LD_ADDR_VAR 0 11
7726: PUSH
7727: LD_EXP 34
7731: PPUSH
7732: LD_INT 95
7734: PUSH
7735: LD_INT 26
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 120
7744: PUSH
7745: LD_INT 3
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PPUSH
7756: CALL_OW 72
7760: ST_TO_ADDR
// lab := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7761: LD_ADDR_VAR 0 3
7765: PUSH
7766: LD_EXP 34
7770: PPUSH
7771: LD_INT 95
7773: PUSH
7774: LD_INT 26
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 2
7783: PUSH
7784: LD_INT 30
7786: PUSH
7787: LD_INT 6
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 30
7796: PUSH
7797: LD_INT 7
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 30
7806: PUSH
7807: LD_INT 8
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 72
7828: ST_TO_ADDR
// if hurtUnits then
7829: LD_VAR 0 11
7833: IFFALSE 7894
// begin for i in sci do
7835: LD_ADDR_VAR 0 1
7839: PUSH
7840: LD_VAR 0 9
7844: PUSH
7845: FOR_IN
7846: IFFALSE 7890
// if IsInUnit ( i ) then
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 310
7857: IFFALSE 7870
// ComExitBuilding ( i ) else
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 122
7868: GO 7888
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7870: LD_VAR 0 1
7874: PPUSH
7875: LD_VAR 0 11
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PPUSH
7884: CALL_OW 128
7888: GO 7845
7890: POP
7891: POP
// end else
7892: GO 7947
// if lab then
7894: LD_VAR 0 3
7898: IFFALSE 7947
// begin for i in sci do
7900: LD_ADDR_VAR 0 1
7904: PUSH
7905: LD_VAR 0 9
7909: PUSH
7910: FOR_IN
7911: IFFALSE 7945
// if not IsInUnit ( i ) then
7913: LD_VAR 0 1
7917: PPUSH
7918: CALL_OW 310
7922: NOT
7923: IFFALSE 7943
// ComEnterUnit ( i , lab [ 1 ] ) ;
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_VAR 0 3
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PPUSH
7939: CALL_OW 120
7943: GO 7910
7945: POP
7946: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
7947: LD_ADDR_VAR 0 4
7951: PUSH
7952: LD_EXP 34
7956: PPUSH
7957: LD_INT 25
7959: PUSH
7960: LD_INT 2
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PPUSH
7967: CALL_OW 72
7971: ST_TO_ADDR
// if eng then
7972: LD_VAR 0 4
7976: IFFALSE 8416
// begin for i in eng do
7978: LD_ADDR_VAR 0 1
7982: PUSH
7983: LD_VAR 0 4
7987: PUSH
7988: FOR_IN
7989: IFFALSE 8414
// begin tag := GetTag ( i ) ;
7991: LD_ADDR_VAR 0 5
7995: PUSH
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 110
8005: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 256
8015: PUSH
8016: LD_INT 800
8018: LESS
8019: PUSH
8020: LD_VAR 0 5
8024: PUSH
8025: LD_INT 3
8027: NONEQUAL
8028: AND
8029: IFFALSE 8067
// begin SetTag ( i , tHeal ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 3
8038: PPUSH
8039: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8043: LD_VAR 0 1
8047: PPUSH
8048: LD_INT 97
8050: PPUSH
8051: LD_INT 139
8053: PPUSH
8054: CALL_OW 111
// AddComHold ( i ) ;
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8067: LD_VAR 0 5
8071: PUSH
8072: LD_INT 3
8074: EQUAL
8075: PUSH
8076: LD_VAR 0 1
8080: PPUSH
8081: CALL_OW 256
8085: PUSH
8086: LD_INT 1000
8088: EQUAL
8089: AND
8090: IFFALSE 8104
// SetTag ( i , 0 ) ;
8092: LD_VAR 0 1
8096: PPUSH
8097: LD_INT 0
8099: PPUSH
8100: CALL_OW 109
// if not tag then
8104: LD_VAR 0 5
8108: NOT
8109: IFFALSE 8203
// begin if cr or tmp then
8111: LD_VAR 0 8
8115: PUSH
8116: LD_VAR 0 2
8120: OR
8121: IFFALSE 8177
// begin if IsInUnit ( i ) then
8123: LD_VAR 0 1
8127: PPUSH
8128: CALL_OW 310
8132: IFFALSE 8143
// ComExitBuilding ( i ) ;
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 122
// if tmp then
8143: LD_VAR 0 2
8147: IFFALSE 8163
// SetTag ( i , tRepair ) else
8149: LD_VAR 0 1
8153: PPUSH
8154: LD_INT 1
8156: PPUSH
8157: CALL_OW 109
8161: GO 8175
// SetTag ( i , tCrates ) ;
8163: LD_VAR 0 1
8167: PPUSH
8168: LD_INT 2
8170: PPUSH
8171: CALL_OW 109
// end else
8175: GO 8203
// if not IsInUnit ( i ) then
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 310
8186: NOT
8187: IFFALSE 8203
// ComEnterUnit ( i , ruBase ) ;
8189: LD_VAR 0 1
8193: PPUSH
8194: LD_VAR 0 14
8198: PPUSH
8199: CALL_OW 120
// end ; if tag = tRepair then
8203: LD_VAR 0 5
8207: PUSH
8208: LD_INT 1
8210: EQUAL
8211: IFFALSE 8291
// begin if not tmp then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8234
// begin SetTag ( i , 0 ) ;
8220: LD_VAR 0 1
8224: PPUSH
8225: LD_INT 0
8227: PPUSH
8228: CALL_OW 109
// continue ;
8232: GO 7988
// end ; if not HasTask ( i ) then
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL_OW 314
8243: NOT
8244: IFFALSE 8264
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8246: LD_VAR 0 1
8250: PPUSH
8251: LD_VAR 0 2
8255: PUSH
8256: LD_INT 1
8258: ARRAY
8259: PPUSH
8260: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
8264: LD_VAR 0 1
8268: PPUSH
8269: LD_INT 26
8271: PPUSH
8272: CALL_OW 308
8276: NOT
8277: IFFALSE 8291
// ComMoveToArea ( i , ruBaseArea ) ;
8279: LD_VAR 0 1
8283: PPUSH
8284: LD_INT 26
8286: PPUSH
8287: CALL_OW 113
// end ; if tag = tCrates then
8291: LD_VAR 0 5
8295: PUSH
8296: LD_INT 2
8298: EQUAL
8299: IFFALSE 8412
// begin if not cr then
8301: LD_VAR 0 8
8305: NOT
8306: IFFALSE 8322
// begin SetTag ( i , 0 ) ;
8308: LD_VAR 0 1
8312: PPUSH
8313: LD_INT 0
8315: PPUSH
8316: CALL_OW 109
// continue ;
8320: GO 7988
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8322: LD_VAR 0 1
8326: PPUSH
8327: CALL_OW 314
8331: NOT
8332: PUSH
8333: LD_INT 81
8335: PUSH
8336: LD_INT 6
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 92
8345: PUSH
8346: LD_VAR 0 8
8350: PUSH
8351: LD_INT 1
8353: ARRAY
8354: PUSH
8355: LD_VAR 0 8
8359: PUSH
8360: LD_INT 2
8362: ARRAY
8363: PUSH
8364: LD_INT 12
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PPUSH
8377: CALL_OW 69
8381: NOT
8382: AND
8383: IFFALSE 8412
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8385: LD_VAR 0 1
8389: PPUSH
8390: LD_VAR 0 8
8394: PUSH
8395: LD_INT 1
8397: ARRAY
8398: PPUSH
8399: LD_VAR 0 8
8403: PUSH
8404: LD_INT 2
8406: ARRAY
8407: PPUSH
8408: CALL_OW 117
// end ; end ;
8412: GO 7988
8414: POP
8415: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8416: LD_ADDR_VAR 0 10
8420: PUSH
8421: LD_EXP 34
8425: PPUSH
8426: LD_INT 2
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 1
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: LD_INT 25
8441: PUSH
8442: LD_INT 9
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 50
8456: PUSH
8457: EMPTY
8458: LIST
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PPUSH
8464: CALL_OW 72
8468: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
8469: LD_ADDR_VAR 0 12
8473: PUSH
8474: LD_INT 26
8476: PPUSH
8477: LD_INT 81
8479: PUSH
8480: LD_INT 6
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 70
8491: ST_TO_ADDR
// if sol then
8492: LD_VAR 0 10
8496: IFFALSE 9019
// begin if enemyInBase then
8498: LD_VAR 0 12
8502: IFFALSE 8721
// begin for i in sol do
8504: LD_ADDR_VAR 0 1
8508: PUSH
8509: LD_VAR 0 10
8513: PUSH
8514: FOR_IN
8515: IFFALSE 8717
// begin tw := IsInUnit ( i ) ;
8517: LD_ADDR_VAR 0 7
8521: PUSH
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 310
8531: ST_TO_ADDR
// if tw then
8532: LD_VAR 0 7
8536: IFFALSE 8626
// begin if not tw in FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8538: LD_VAR 0 7
8542: PUSH
8543: LD_INT 22
8545: PUSH
8546: LD_INT 6
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 101
8555: PUSH
8556: LD_INT 2
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: LD_INT 30
8568: PUSH
8569: LD_INT 5
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 30
8578: PUSH
8579: LD_INT 32
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 30
8588: PUSH
8589: LD_INT 31
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: PPUSH
8607: CALL_OW 69
8611: IN
8612: NOT
8613: IFFALSE 8624
// ComExitBuilding ( i ) ;
8615: LD_VAR 0 1
8619: PPUSH
8620: CALL_OW 122
// end else
8624: GO 8715
// begin un := NearestUnitToUnit ( enemyInBase , i ) ;
8626: LD_ADDR_VAR 0 6
8630: PUSH
8631: LD_VAR 0 12
8635: PPUSH
8636: LD_VAR 0 1
8640: PPUSH
8641: CALL_OW 74
8645: ST_TO_ADDR
// if GetClass ( i ) = class_bazooker and Prob ( 30 ) then
8646: LD_VAR 0 1
8650: PPUSH
8651: CALL_OW 257
8655: PUSH
8656: LD_INT 9
8658: EQUAL
8659: PUSH
8660: LD_INT 30
8662: PPUSH
8663: CALL_OW 13
8667: AND
8668: IFFALSE 8701
// ComTimeShift ( i , GetX ( un ) , GetY ( un ) ) else
8670: LD_VAR 0 1
8674: PPUSH
8675: LD_VAR 0 6
8679: PPUSH
8680: CALL_OW 250
8684: PPUSH
8685: LD_VAR 0 6
8689: PPUSH
8690: CALL_OW 251
8694: PPUSH
8695: CALL_OW 154
8699: GO 8715
// ComAttackUnit ( i , un ) ;
8701: LD_VAR 0 1
8705: PPUSH
8706: LD_VAR 0 6
8710: PPUSH
8711: CALL_OW 115
// end ; end ;
8715: GO 8514
8717: POP
8718: POP
// end else
8719: GO 9019
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8721: LD_ADDR_VAR 0 13
8725: PUSH
8726: LD_INT 26
8728: PPUSH
8729: LD_INT 3
8731: PUSH
8732: LD_INT 62
8734: PUSH
8735: EMPTY
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PUSH
8742: LD_INT 2
8744: PUSH
8745: LD_INT 30
8747: PUSH
8748: LD_INT 32
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 30
8757: PUSH
8758: LD_INT 4
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 30
8767: PUSH
8768: LD_INT 31
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 70
8789: ST_TO_ADDR
// if empty then
8790: LD_VAR 0 13
8794: IFFALSE 8811
// empty := ReverseArray ( empty ) ;
8796: LD_ADDR_VAR 0 13
8800: PUSH
8801: LD_VAR 0 13
8805: PPUSH
8806: CALL 48354 0 1
8810: ST_TO_ADDR
// for i in sol do
8811: LD_ADDR_VAR 0 1
8815: PUSH
8816: LD_VAR 0 10
8820: PUSH
8821: FOR_IN
8822: IFFALSE 9017
// begin tag := GetTag ( i ) ;
8824: LD_ADDR_VAR 0 5
8828: PUSH
8829: LD_VAR 0 1
8833: PPUSH
8834: CALL_OW 110
8838: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8839: LD_VAR 0 1
8843: PPUSH
8844: CALL_OW 256
8848: PUSH
8849: LD_INT 1000
8851: LESS
8852: PUSH
8853: LD_VAR 0 5
8857: PUSH
8858: LD_INT 3
8860: NONEQUAL
8861: AND
8862: IFFALSE 8902
// begin SetTag ( i , tHeal ) ;
8864: LD_VAR 0 1
8868: PPUSH
8869: LD_INT 3
8871: PPUSH
8872: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8876: LD_VAR 0 1
8880: PPUSH
8881: LD_INT 97
8883: PPUSH
8884: LD_INT 139
8886: PPUSH
8887: CALL_OW 111
// AddComHold ( i ) ;
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 200
// continue ;
8900: GO 8821
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 256
8911: PUSH
8912: LD_INT 1000
8914: EQUAL
8915: PUSH
8916: LD_VAR 0 5
8920: PUSH
8921: LD_INT 3
8923: EQUAL
8924: AND
8925: IFFALSE 8941
// begin SetTag ( i , 0 ) ;
8927: LD_VAR 0 1
8931: PPUSH
8932: LD_INT 0
8934: PPUSH
8935: CALL_OW 109
// continue ;
8939: GO 8821
// end ; if HasTask ( i ) then
8941: LD_VAR 0 1
8945: PPUSH
8946: CALL_OW 314
8950: IFFALSE 8954
// continue ;
8952: GO 8821
// if not IsInUnit ( i ) and not tag and empty then
8954: LD_VAR 0 1
8958: PPUSH
8959: CALL_OW 310
8963: NOT
8964: PUSH
8965: LD_VAR 0 5
8969: NOT
8970: AND
8971: PUSH
8972: LD_VAR 0 13
8976: AND
8977: IFFALSE 9015
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8979: LD_VAR 0 1
8983: PPUSH
8984: LD_VAR 0 13
8988: PUSH
8989: LD_INT 1
8991: ARRAY
8992: PPUSH
8993: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
8997: LD_ADDR_VAR 0 13
9001: PUSH
9002: LD_VAR 0 13
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: CALL_OW 3
9014: ST_TO_ADDR
// end ; end ;
9015: GO 8821
9017: POP
9018: POP
// end ; end ; end ;
9019: PPOPN 15
9021: END
// every 0 0$1 trigger ruTanks do var i , mech , enemy ;
9022: LD_EXP 36
9026: IFFALSE 9602
9028: GO 9030
9030: DISABLE
9031: LD_INT 0
9033: PPUSH
9034: PPUSH
9035: PPUSH
// begin enable ;
9036: ENABLE
// if not ruTanks then
9037: LD_EXP 36
9041: NOT
9042: IFFALSE 9046
// exit ;
9044: GO 9602
// for i in ruTanks do
9046: LD_ADDR_VAR 0 1
9050: PUSH
9051: LD_EXP 36
9055: PUSH
9056: FOR_IN
9057: IFFALSE 9600
// begin if not IsOk ( i ) or GetSide ( i ) <> 6 then
9059: LD_VAR 0 1
9063: PPUSH
9064: CALL_OW 302
9068: NOT
9069: PUSH
9070: LD_VAR 0 1
9074: PPUSH
9075: CALL_OW 255
9079: PUSH
9080: LD_INT 6
9082: NONEQUAL
9083: OR
9084: IFFALSE 9104
// begin ruTanks := ruTanks diff i ;
9086: LD_ADDR_EXP 36
9090: PUSH
9091: LD_EXP 36
9095: PUSH
9096: LD_VAR 0 1
9100: DIFF
9101: ST_TO_ADDR
// continue ;
9102: GO 9056
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 110
9113: NOT
9114: PUSH
9115: LD_VAR 0 1
9119: PPUSH
9120: CALL_OW 110
9124: PUSH
9125: LD_INT 0
9127: EQUAL
9128: OR
9129: IFFALSE 9259
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9131: LD_VAR 0 1
9135: PPUSH
9136: CALL_OW 261
9140: PUSH
9141: LD_INT 50
9143: LESS
9144: PUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 262
9154: PUSH
9155: LD_INT 1
9157: EQUAL
9158: AND
9159: IFFALSE 9218
// begin ComMoveXY ( i , 103 , 149 ) ;
9161: LD_VAR 0 1
9165: PPUSH
9166: LD_INT 103
9168: PPUSH
9169: LD_INT 149
9171: PPUSH
9172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9176: LD_INT 35
9178: PPUSH
9179: CALL_OW 67
// until GetDistUnitXY ( i , 103 , 149 ) < 4 ;
9183: LD_VAR 0 1
9187: PPUSH
9188: LD_INT 103
9190: PPUSH
9191: LD_INT 149
9193: PPUSH
9194: CALL_OW 297
9198: PUSH
9199: LD_INT 4
9201: LESS
9202: IFFALSE 9176
// SetFuel ( i , 100 ) ;
9204: LD_VAR 0 1
9208: PPUSH
9209: LD_INT 100
9211: PPUSH
9212: CALL_OW 240
// end else
9216: GO 9259
// if not IsInArea ( i , ruParkingArea ) then
9218: LD_VAR 0 1
9222: PPUSH
9223: LD_INT 27
9225: PPUSH
9226: CALL_OW 308
9230: NOT
9231: IFFALSE 9247
// ComMoveToArea ( i , ruParkingArea ) else
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 27
9240: PPUSH
9241: CALL_OW 113
9245: GO 9259
// SetTag ( i , tParking ) ;
9247: LD_VAR 0 1
9251: PPUSH
9252: LD_INT 11
9254: PPUSH
9255: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9259: LD_VAR 0 1
9263: PPUSH
9264: CALL_OW 110
9268: PUSH
9269: LD_INT 11
9271: EQUAL
9272: IFFALSE 9402
// begin if GetLives ( i ) < 650 then
9274: LD_VAR 0 1
9278: PPUSH
9279: CALL_OW 256
9283: PUSH
9284: LD_INT 650
9286: LESS
9287: IFFALSE 9379
// begin if not IsDrivenBy ( i ) then
9289: LD_VAR 0 1
9293: PPUSH
9294: CALL_OW 311
9298: NOT
9299: IFFALSE 9303
// continue ;
9301: GO 9056
// mech := IsDrivenBy ( i ) ;
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: LD_VAR 0 1
9312: PPUSH
9313: CALL_OW 311
9317: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9318: LD_VAR 0 2
9322: PPUSH
9323: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9327: LD_VAR 0 2
9331: PPUSH
9332: LD_VAR 0 1
9336: PPUSH
9337: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9341: LD_INT 35
9343: PPUSH
9344: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9348: LD_VAR 0 1
9352: PPUSH
9353: CALL_OW 256
9357: PUSH
9358: LD_INT 1000
9360: EQUAL
9361: IFFALSE 9341
// ComEnterUnit ( mech , i ) ;
9363: LD_VAR 0 2
9367: PPUSH
9368: LD_VAR 0 1
9372: PPUSH
9373: CALL_OW 120
// end else
9377: GO 9402
// if IsDrivenBy ( i ) then
9379: LD_VAR 0 1
9383: PPUSH
9384: CALL_OW 311
9388: IFFALSE 9402
// SetTag ( i , tAttack ) ;
9390: LD_VAR 0 1
9394: PPUSH
9395: LD_INT 12
9397: PPUSH
9398: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9402: LD_VAR 0 1
9406: PPUSH
9407: CALL_OW 110
9411: PUSH
9412: LD_INT 12
9414: EQUAL
9415: IFFALSE 9598
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
9417: LD_ADDR_VAR 0 3
9421: PUSH
9422: LD_INT 26
9424: PPUSH
9425: LD_INT 81
9427: PUSH
9428: LD_INT 6
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 70
9439: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9440: LD_VAR 0 1
9444: PPUSH
9445: CALL_OW 256
9449: PUSH
9450: LD_INT 650
9452: LESS
9453: IFFALSE 9478
// begin ComStop ( i ) ;
9455: LD_VAR 0 1
9459: PPUSH
9460: CALL_OW 141
// SetTag ( i , 0 ) ;
9464: LD_VAR 0 1
9468: PPUSH
9469: LD_INT 0
9471: PPUSH
9472: CALL_OW 109
// continue ;
9476: GO 9056
// end ; if enemy then
9478: LD_VAR 0 3
9482: IFFALSE 9522
// begin if not HasTask ( i ) then
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 314
9493: NOT
9494: IFFALSE 9520
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9496: LD_VAR 0 1
9500: PPUSH
9501: LD_VAR 0 3
9505: PPUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 74
9515: PPUSH
9516: CALL 57137 0 2
// end else
9520: GO 9598
// if ruTanks > 1 then
9522: LD_EXP 36
9526: PUSH
9527: LD_INT 1
9529: GREATER
9530: IFFALSE 9598
// AgressiveMove ( i , [ [ 78 , 112 ] , [ 104 , 106 ] , [ 130 , 107 ] , [ 143 , 83 ] , [ 120 , 35 ] ] ) ;
9532: LD_VAR 0 1
9536: PPUSH
9537: LD_INT 78
9539: PUSH
9540: LD_INT 112
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 104
9549: PUSH
9550: LD_INT 106
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 130
9559: PUSH
9560: LD_INT 107
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 143
9569: PUSH
9570: LD_INT 83
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 120
9579: PUSH
9580: LD_INT 35
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PPUSH
9594: CALL 55669 0 2
// end ; end ;
9598: GO 9056
9600: POP
9601: POP
// end ;
9602: PPOPN 3
9604: END
// every 0 0$1 trigger InBattle ( 6 ) or playerInBase do
9605: LD_INT 6
9607: PPUSH
9608: CALL_OW 463
9612: PUSH
9613: LD_EXP 5
9617: OR
9618: IFFALSE 9836
9620: GO 9622
9622: DISABLE
// begin wait ( 0 0$10 ) ;
9623: LD_INT 350
9625: PPUSH
9626: CALL_OW 67
// if playerInBase then
9630: LD_EXP 5
9634: IFFALSE 9643
// wait ( 3 3$00 ) ;
9636: LD_INT 6300
9638: PPUSH
9639: CALL_OW 67
// ruConstructList := [ [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] ] ;
9643: LD_ADDR_EXP 35
9647: PUSH
9648: LD_INT 21
9650: PUSH
9651: LD_INT 3
9653: PUSH
9654: LD_INT 1
9656: PUSH
9657: LD_INT 45
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 21
9668: PUSH
9669: LD_INT 3
9671: PUSH
9672: LD_INT 1
9674: PUSH
9675: LD_INT 45
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 3
9689: PUSH
9690: LD_INT 1
9692: PUSH
9693: LD_INT 45
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: ST_TO_ADDR
// if Difficulty > 1 then
9707: LD_OWVAR 67
9711: PUSH
9712: LD_INT 1
9714: GREATER
9715: IFFALSE 9750
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gatling_gun ] ) ;
9717: LD_ADDR_EXP 35
9721: PUSH
9722: LD_EXP 35
9726: PPUSH
9727: LD_INT 21
9729: PUSH
9730: LD_INT 3
9732: PUSH
9733: LD_INT 1
9735: PUSH
9736: LD_INT 43
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL 53065 0 2
9749: ST_TO_ADDR
// if Difficulty > 2 then
9750: LD_OWVAR 67
9754: PUSH
9755: LD_INT 2
9757: GREATER
9758: IFFALSE 9793
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9760: LD_ADDR_EXP 35
9764: PUSH
9765: LD_EXP 35
9769: PPUSH
9770: LD_INT 21
9772: PUSH
9773: LD_INT 3
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: LD_INT 44
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PPUSH
9788: CALL 53065 0 2
9792: ST_TO_ADDR
// if Difficulty > 3 then
9793: LD_OWVAR 67
9797: PUSH
9798: LD_INT 3
9800: GREATER
9801: IFFALSE 9836
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9803: LD_ADDR_EXP 35
9807: PUSH
9808: LD_EXP 35
9812: PPUSH
9813: LD_INT 21
9815: PUSH
9816: LD_INT 3
9818: PUSH
9819: LD_INT 1
9821: PUSH
9822: LD_INT 44
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: PPUSH
9831: CALL 53065 0 2
9835: ST_TO_ADDR
// end ; end_of_file
9836: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
9837: LD_INT 0
9839: PPUSH
9840: PPUSH
9841: PPUSH
9842: PPUSH
9843: PPUSH
9844: PPUSH
9845: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
9846: LD_ADDR_VAR 0 2
9850: PUSH
9851: LD_STRING 09_env
9853: PPUSH
9854: EMPTY
9855: PPUSH
9856: CALL_OW 30
9860: ST_TO_ADDR
// if not tmp then
9861: LD_VAR 0 2
9865: NOT
9866: IFFALSE 9870
// exit ;
9868: GO 10234
// list := ListEnvironmentArea ( mapArea ) ;
9870: LD_ADDR_VAR 0 7
9874: PUSH
9875: LD_INT 4
9877: PPUSH
9878: CALL_OW 353
9882: ST_TO_ADDR
// if not list then
9883: LD_VAR 0 7
9887: NOT
9888: IFFALSE 9892
// exit ;
9890: GO 10234
// for i in list do
9892: LD_ADDR_VAR 0 3
9896: PUSH
9897: LD_VAR 0 7
9901: PUSH
9902: FOR_IN
9903: IFFALSE 10011
// begin exist := false ;
9905: LD_ADDR_VAR 0 6
9909: PUSH
9910: LD_INT 0
9912: ST_TO_ADDR
// for j in tmp do
9913: LD_ADDR_VAR 0 4
9917: PUSH
9918: LD_VAR 0 2
9922: PUSH
9923: FOR_IN
9924: IFFALSE 9978
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
9926: LD_VAR 0 3
9930: PUSH
9931: LD_INT 1
9933: ARRAY
9934: PUSH
9935: LD_VAR 0 4
9939: PUSH
9940: LD_INT 1
9942: ARRAY
9943: EQUAL
9944: PUSH
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 2
9952: ARRAY
9953: PUSH
9954: LD_VAR 0 4
9958: PUSH
9959: LD_INT 2
9961: ARRAY
9962: EQUAL
9963: AND
9964: IFFALSE 9976
// begin exist := true ;
9966: LD_ADDR_VAR 0 6
9970: PUSH
9971: LD_INT 1
9973: ST_TO_ADDR
// break ;
9974: GO 9978
// end ;
9976: GO 9923
9978: POP
9979: POP
// if not exist then
9980: LD_VAR 0 6
9984: NOT
9985: IFFALSE 10009
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
9987: LD_VAR 0 3
9991: PUSH
9992: LD_INT 1
9994: ARRAY
9995: PPUSH
9996: LD_VAR 0 3
10000: PUSH
10001: LD_INT 2
10003: ARRAY
10004: PPUSH
10005: CALL_OW 347
// end ;
10009: GO 9902
10011: POP
10012: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
10013: LD_ADDR_VAR 0 2
10017: PUSH
10018: LD_STRING 09_animals
10020: PPUSH
10021: EMPTY
10022: PPUSH
10023: CALL_OW 30
10027: ST_TO_ADDR
// if not tmp then
10028: LD_VAR 0 2
10032: NOT
10033: IFFALSE 10037
// exit ;
10035: GO 10234
// InitHc_All ( ) ;
10037: CALL_OW 584
// for i in tmp do
10041: LD_ADDR_VAR 0 3
10045: PUSH
10046: LD_VAR 0 2
10050: PUSH
10051: FOR_IN
10052: IFFALSE 10169
// begin uc_side := 0 ;
10054: LD_ADDR_OWVAR 20
10058: PUSH
10059: LD_INT 0
10061: ST_TO_ADDR
// uc_nation := nation_nature ;
10062: LD_ADDR_OWVAR 21
10066: PUSH
10067: LD_INT 0
10069: ST_TO_ADDR
// hc_gallery :=  ;
10070: LD_ADDR_OWVAR 33
10074: PUSH
10075: LD_STRING 
10077: ST_TO_ADDR
// hc_name :=  ;
10078: LD_ADDR_OWVAR 26
10082: PUSH
10083: LD_STRING 
10085: ST_TO_ADDR
// hc_class := i [ 1 ] ;
10086: LD_ADDR_OWVAR 28
10090: PUSH
10091: LD_VAR 0 3
10095: PUSH
10096: LD_INT 1
10098: ARRAY
10099: ST_TO_ADDR
// un := CreateHuman ;
10100: LD_ADDR_VAR 0 5
10104: PUSH
10105: CALL_OW 44
10109: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
10110: LD_VAR 0 5
10114: PPUSH
10115: LD_VAR 0 3
10119: PUSH
10120: LD_INT 2
10122: ARRAY
10123: PPUSH
10124: LD_VAR 0 3
10128: PUSH
10129: LD_INT 3
10131: ARRAY
10132: PPUSH
10133: LD_VAR 0 3
10137: PUSH
10138: LD_INT 4
10140: ARRAY
10141: PPUSH
10142: LD_INT 0
10144: PPUSH
10145: CALL 55205 0 5
// SetLives ( un , i [ 5 ] ) ;
10149: LD_VAR 0 5
10153: PPUSH
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 5
10161: ARRAY
10162: PPUSH
10163: CALL_OW 234
// end ;
10167: GO 10051
10169: POP
10170: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
10171: LD_ADDR_VAR 0 3
10175: PUSH
10176: DOUBLE
10177: LD_INT 1
10179: DEC
10180: ST_TO_ADDR
10181: LD_INT 6
10183: PUSH
10184: LD_INT 5
10186: PUSH
10187: LD_INT 4
10189: PUSH
10190: LD_INT 3
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: PUSH
10199: LD_OWVAR 67
10203: ARRAY
10204: PUSH
10205: FOR_TO
10206: IFFALSE 10232
// begin PrepareApeman ( 5 ) ;
10208: LD_INT 5
10210: PPUSH
10211: CALL 49346 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10215: CALL_OW 44
10219: PPUSH
10220: LD_INT 5
10222: PPUSH
10223: LD_INT 0
10225: PPUSH
10226: CALL_OW 49
// end ;
10230: GO 10205
10232: POP
10233: POP
// end ;
10234: LD_VAR 0 1
10238: RET
// export function CreateDeposits ; var i , oil , sib ; begin
10239: LD_INT 0
10241: PPUSH
10242: PPUSH
10243: PPUSH
10244: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
10245: LD_ADDR_VAR 0 3
10249: PUSH
10250: LD_INT 91
10252: PUSH
10253: LD_INT 13
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 52
10262: PUSH
10263: LD_INT 23
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 115
10272: PUSH
10273: LD_INT 150
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
10285: LD_ADDR_VAR 0 4
10289: PUSH
10290: LD_INT 82
10292: PUSH
10293: LD_INT 42
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 128
10302: PUSH
10303: LD_INT 132
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: ST_TO_ADDR
// for i in oil do
10314: LD_ADDR_VAR 0 2
10318: PUSH
10319: LD_VAR 0 3
10323: PUSH
10324: FOR_IN
10325: IFFALSE 10404
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
10327: LD_VAR 0 2
10331: PUSH
10332: LD_INT 1
10334: ARRAY
10335: PPUSH
10336: LD_VAR 0 2
10340: PUSH
10341: LD_INT 2
10343: ARRAY
10344: PPUSH
10345: LD_INT 2
10347: PPUSH
10348: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10352: LD_VAR 0 2
10356: PUSH
10357: LD_INT 1
10359: ARRAY
10360: PPUSH
10361: LD_VAR 0 2
10365: PUSH
10366: LD_INT 2
10368: ARRAY
10369: PPUSH
10370: LD_INT 2
10372: PPUSH
10373: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10377: LD_VAR 0 2
10381: PUSH
10382: LD_INT 1
10384: ARRAY
10385: PPUSH
10386: LD_VAR 0 2
10390: PUSH
10391: LD_INT 2
10393: ARRAY
10394: PPUSH
10395: LD_INT 6
10397: PPUSH
10398: CALL_OW 441
// end ;
10402: GO 10324
10404: POP
10405: POP
// for i in sib do
10406: LD_ADDR_VAR 0 2
10410: PUSH
10411: LD_VAR 0 4
10415: PUSH
10416: FOR_IN
10417: IFFALSE 10496
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
10419: LD_VAR 0 2
10423: PUSH
10424: LD_INT 1
10426: ARRAY
10427: PPUSH
10428: LD_VAR 0 2
10432: PUSH
10433: LD_INT 2
10435: ARRAY
10436: PPUSH
10437: LD_INT 3
10439: PPUSH
10440: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10444: LD_VAR 0 2
10448: PUSH
10449: LD_INT 1
10451: ARRAY
10452: PPUSH
10453: LD_VAR 0 2
10457: PUSH
10458: LD_INT 2
10460: ARRAY
10461: PPUSH
10462: LD_INT 2
10464: PPUSH
10465: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10469: LD_VAR 0 2
10473: PUSH
10474: LD_INT 1
10476: ARRAY
10477: PPUSH
10478: LD_VAR 0 2
10482: PUSH
10483: LD_INT 2
10485: ARRAY
10486: PPUSH
10487: LD_INT 6
10489: PPUSH
10490: CALL_OW 441
// end ;
10494: GO 10416
10496: POP
10497: POP
// end ;
10498: LD_VAR 0 1
10502: RET
// export function LoadCam ; var i , tmp ; begin
10503: LD_INT 0
10505: PPUSH
10506: PPUSH
10507: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
10508: LD_ADDR_VAR 0 3
10512: PUSH
10513: LD_STRING 09_cameras
10515: PPUSH
10516: EMPTY
10517: PPUSH
10518: CALL_OW 30
10522: ST_TO_ADDR
// if not tmp then
10523: LD_VAR 0 3
10527: NOT
10528: IFFALSE 10532
// exit ;
10530: GO 10574
// for i in tmp do
10532: LD_ADDR_VAR 0 2
10536: PUSH
10537: LD_VAR 0 3
10541: PUSH
10542: FOR_IN
10543: IFFALSE 10572
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
10545: LD_VAR 0 2
10549: PUSH
10550: LD_INT 1
10552: ARRAY
10553: PPUSH
10554: LD_VAR 0 2
10558: PUSH
10559: LD_INT 2
10561: ARRAY
10562: PPUSH
10563: LD_INT 2
10565: PPUSH
10566: CALL_OW 244
10570: GO 10542
10572: POP
10573: POP
// end ;
10574: LD_VAR 0 1
10578: RET
// export function LoadTech ; var i , tmp , default ; begin
10579: LD_INT 0
10581: PPUSH
10582: PPUSH
10583: PPUSH
10584: PPUSH
// default := [ 2 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
10585: LD_ADDR_VAR 0 4
10589: PUSH
10590: LD_INT 2
10592: PUSH
10593: LD_INT 2
10595: PUSH
10596: LD_INT 0
10598: PUSH
10599: LD_INT 0
10601: PUSH
10602: LD_INT 0
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 2
10610: PUSH
10611: LD_INT 0
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: LD_INT 0
10619: PUSH
10620: LD_INT 2
10622: PUSH
10623: LD_INT 0
10625: PUSH
10626: LD_INT 0
10628: PUSH
10629: LD_INT 0
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: LD_INT 0
10637: PUSH
10638: LD_INT 2
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: LD_INT 0
10646: PUSH
10647: LD_INT 2
10649: PUSH
10650: LD_INT 1
10652: PUSH
10653: LD_INT 1
10655: PUSH
10656: LD_INT 0
10658: PUSH
10659: LD_INT 0
10661: PUSH
10662: LD_INT 0
10664: PUSH
10665: LD_INT 0
10667: PUSH
10668: LD_INT 0
10670: PUSH
10671: LD_INT 0
10673: PUSH
10674: LD_INT 0
10676: PUSH
10677: LD_INT 0
10679: PUSH
10680: LD_INT 0
10682: PUSH
10683: LD_INT 0
10685: PUSH
10686: LD_INT 0
10688: PUSH
10689: LD_INT 0
10691: PUSH
10692: LD_INT 2
10694: PUSH
10695: LD_INT 0
10697: PUSH
10698: LD_INT 0
10700: PUSH
10701: LD_INT 0
10703: PUSH
10704: LD_INT 1
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: LD_INT 1
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: LD_INT 0
10718: PUSH
10719: LD_INT 0
10721: PUSH
10722: LD_INT 2
10724: PUSH
10725: LD_INT 2
10727: PUSH
10728: LD_INT 2
10730: PUSH
10731: LD_INT 2
10733: PUSH
10734: LD_INT 2
10736: PUSH
10737: LD_INT 2
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: LD_INT 1
10745: PUSH
10746: LD_INT 0
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: LD_INT 0
10754: PUSH
10755: LD_INT 0
10757: PUSH
10758: LD_INT 0
10760: PUSH
10761: LD_INT 0
10763: PUSH
10764: LD_INT 0
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 1
10772: PUSH
10773: LD_INT 0
10775: PUSH
10776: LD_INT 0
10778: PUSH
10779: LD_INT 0
10781: PUSH
10782: LD_INT 0
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: LD_INT 0
10790: PUSH
10791: LD_INT 0
10793: PUSH
10794: LD_INT 2
10796: PUSH
10797: LD_INT 2
10799: PUSH
10800: LD_INT 0
10802: PUSH
10803: LD_INT 0
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: LD_INT 1
10811: PUSH
10812: LD_INT 1
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: LD_INT 1
10820: PUSH
10821: LD_INT 1
10823: PUSH
10824: LD_INT 1
10826: PUSH
10827: LD_INT 0
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: LD_INT 0
10847: PUSH
10848: LD_INT 0
10850: PUSH
10851: LD_INT 0
10853: PUSH
10854: LD_INT 1
10856: PUSH
10857: LD_INT 1
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: LD_INT 1
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: LD_INT 1
10877: PUSH
10878: LD_INT 1
10880: PUSH
10881: LD_INT 1
10883: PUSH
10884: LD_INT 1
10886: PUSH
10887: LD_INT 1
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: ST_TO_ADDR
// tmp := LoadVariable ( 09_tech , default ) ;
10992: LD_ADDR_VAR 0 3
10996: PUSH
10997: LD_STRING 09_tech
10999: PPUSH
11000: LD_VAR 0 4
11004: PPUSH
11005: CALL_OW 30
11009: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
11010: LD_ADDR_VAR 0 2
11014: PUSH
11015: DOUBLE
11016: LD_INT 1
11018: DEC
11019: ST_TO_ADDR
11020: LD_VAR 0 3
11024: PPUSH
11025: CALL 17478 0 1
11029: PUSH
11030: FOR_TO
11031: IFFALSE 11058
// SetTech ( i , 2 , tmp [ i ] ) ;
11033: LD_VAR 0 2
11037: PPUSH
11038: LD_INT 2
11040: PPUSH
11041: LD_VAR 0 3
11045: PUSH
11046: LD_VAR 0 2
11050: ARRAY
11051: PPUSH
11052: CALL_OW 322
11056: GO 11030
11058: POP
11059: POP
// end ;
11060: LD_VAR 0 1
11064: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
11065: LD_INT 0
11067: PPUSH
11068: PPUSH
11069: PPUSH
11070: PPUSH
11071: PPUSH
11072: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
11073: LD_ADDR_VAR 0 3
11077: PUSH
11078: LD_STRING 09_buildings
11080: PPUSH
11081: EMPTY
11082: PPUSH
11083: CALL_OW 30
11087: ST_TO_ADDR
// for i in tmp do
11088: LD_ADDR_VAR 0 2
11092: PUSH
11093: LD_VAR 0 3
11097: PUSH
11098: FOR_IN
11099: IFFALSE 11493
// begin uc_side := 2 ;
11101: LD_ADDR_OWVAR 20
11105: PUSH
11106: LD_INT 2
11108: ST_TO_ADDR
// uc_nation := nation_arabian ;
11109: LD_ADDR_OWVAR 21
11113: PUSH
11114: LD_INT 2
11116: ST_TO_ADDR
// bc_type := i [ 1 ] ;
11117: LD_ADDR_OWVAR 42
11121: PUSH
11122: LD_VAR 0 2
11126: PUSH
11127: LD_INT 1
11129: ARRAY
11130: ST_TO_ADDR
// bc_level := i [ 5 ] ;
11131: LD_ADDR_OWVAR 43
11135: PUSH
11136: LD_VAR 0 2
11140: PUSH
11141: LD_INT 5
11143: ARRAY
11144: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
11145: LD_ADDR_OWVAR 44
11149: PUSH
11150: LD_INT 9
11152: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
11153: LD_ADDR_OWVAR 45
11157: PUSH
11158: LD_INT 9
11160: ST_TO_ADDR
// if i [ 7 ] then
11161: LD_VAR 0 2
11165: PUSH
11166: LD_INT 7
11168: ARRAY
11169: IFFALSE 11209
// begin bc_kind1 := i [ 7 ] ;
11171: LD_ADDR_OWVAR 44
11175: PUSH
11176: LD_VAR 0 2
11180: PUSH
11181: LD_INT 7
11183: ARRAY
11184: ST_TO_ADDR
// if i [ 8 ] then
11185: LD_VAR 0 2
11189: PUSH
11190: LD_INT 8
11192: ARRAY
11193: IFFALSE 11209
// bc_kind2 := i [ 8 ] ;
11195: LD_ADDR_OWVAR 45
11199: PUSH
11200: LD_VAR 0 2
11204: PUSH
11205: LD_INT 8
11207: ARRAY
11208: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
11209: LD_ADDR_VAR 0 4
11213: PUSH
11214: LD_VAR 0 2
11218: PUSH
11219: LD_INT 2
11221: ARRAY
11222: PPUSH
11223: LD_VAR 0 2
11227: PUSH
11228: LD_INT 3
11230: ARRAY
11231: PPUSH
11232: LD_VAR 0 2
11236: PUSH
11237: LD_INT 4
11239: ARRAY
11240: PPUSH
11241: CALL_OW 47
11245: ST_TO_ADDR
// if i [ 8 ] then
11246: LD_VAR 0 2
11250: PUSH
11251: LD_INT 8
11253: ARRAY
11254: IFFALSE 11274
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
11256: LD_VAR 0 4
11260: PPUSH
11261: LD_VAR 0 2
11265: PUSH
11266: LD_INT 8
11268: ARRAY
11269: PPUSH
11270: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
11274: LD_VAR 0 2
11278: PUSH
11279: LD_INT 1
11281: ARRAY
11282: PUSH
11283: LD_INT 0
11285: PUSH
11286: LD_INT 1
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: IN
11293: IFFALSE 11491
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
11295: LD_ADDR_VAR 0 6
11299: PUSH
11300: LD_STRING 09_materials
11302: PPUSH
11303: LD_INT 100
11305: PUSH
11306: LD_INT 50
11308: PUSH
11309: LD_INT 30
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: PPUSH
11320: CALL_OW 30
11324: ST_TO_ADDR
// for j := 1 to 3 do
11325: LD_ADDR_VAR 0 5
11329: PUSH
11330: DOUBLE
11331: LD_INT 1
11333: DEC
11334: ST_TO_ADDR
11335: LD_INT 3
11337: PUSH
11338: FOR_TO
11339: IFFALSE 11489
// if mat [ 1 ] [ j ] then
11341: LD_VAR 0 6
11345: PUSH
11346: LD_INT 1
11348: ARRAY
11349: PUSH
11350: LD_VAR 0 5
11354: ARRAY
11355: IFFALSE 11487
// if j > 1 then
11357: LD_VAR 0 5
11361: PUSH
11362: LD_INT 1
11364: GREATER
11365: IFFALSE 11428
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 35 , 25 , 20 , 10 ] [ Difficulty ] ) else
11367: LD_VAR 0 4
11371: PPUSH
11372: CALL_OW 274
11376: PPUSH
11377: LD_VAR 0 5
11381: PPUSH
11382: LD_VAR 0 6
11386: PUSH
11387: LD_INT 1
11389: ARRAY
11390: PUSH
11391: LD_VAR 0 5
11395: ARRAY
11396: PUSH
11397: LD_INT 35
11399: PUSH
11400: LD_INT 25
11402: PUSH
11403: LD_INT 20
11405: PUSH
11406: LD_INT 10
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: LD_OWVAR 67
11419: ARRAY
11420: PLUS
11421: PPUSH
11422: CALL_OW 277
11426: GO 11487
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 350 , 250 , 150 , 100 ] [ Difficulty ] ) ;
11428: LD_VAR 0 4
11432: PPUSH
11433: CALL_OW 274
11437: PPUSH
11438: LD_VAR 0 5
11442: PPUSH
11443: LD_VAR 0 6
11447: PUSH
11448: LD_INT 1
11450: ARRAY
11451: PUSH
11452: LD_VAR 0 5
11456: ARRAY
11457: PUSH
11458: LD_INT 350
11460: PUSH
11461: LD_INT 250
11463: PUSH
11464: LD_INT 150
11466: PUSH
11467: LD_INT 100
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: PUSH
11476: LD_OWVAR 67
11480: ARRAY
11481: PLUS
11482: PPUSH
11483: CALL_OW 277
11487: GO 11338
11489: POP
11490: POP
// end ; end ;
11491: GO 11098
11493: POP
11494: POP
// end ;
11495: LD_VAR 0 1
11499: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
11500: LD_INT 0
11502: PPUSH
11503: PPUSH
// area = ListEnvironmentArea ( area ) ;
11504: LD_ADDR_VAR 0 2
11508: PUSH
11509: LD_VAR 0 2
11513: PPUSH
11514: CALL_OW 353
11518: ST_TO_ADDR
// if bulldozer > 0 then
11519: LD_VAR 0 1
11523: PUSH
11524: LD_INT 0
11526: GREATER
11527: IFFALSE 11638
// for i = area downto 1 do
11529: LD_ADDR_VAR 0 4
11533: PUSH
11534: DOUBLE
11535: LD_VAR 0 2
11539: INC
11540: ST_TO_ADDR
11541: LD_INT 1
11543: PUSH
11544: FOR_DOWNTO
11545: IFFALSE 11636
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
11547: LD_VAR 0 2
11551: PUSH
11552: LD_VAR 0 4
11556: ARRAY
11557: PUSH
11558: LD_INT 1
11560: ARRAY
11561: PPUSH
11562: LD_VAR 0 2
11566: PUSH
11567: LD_VAR 0 4
11571: ARRAY
11572: PUSH
11573: LD_INT 2
11575: ARRAY
11576: PPUSH
11577: CALL_OW 351
11581: IFFALSE 11634
// if not HasTask ( bulldozer ) then
11583: LD_VAR 0 1
11587: PPUSH
11588: CALL_OW 314
11592: NOT
11593: IFFALSE 11634
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
11595: LD_VAR 0 1
11599: PPUSH
11600: LD_VAR 0 2
11604: PUSH
11605: LD_VAR 0 4
11609: ARRAY
11610: PUSH
11611: LD_INT 1
11613: ARRAY
11614: PPUSH
11615: LD_VAR 0 2
11619: PUSH
11620: LD_VAR 0 4
11624: ARRAY
11625: PUSH
11626: LD_INT 2
11628: ARRAY
11629: PPUSH
11630: CALL_OW 171
11634: GO 11544
11636: POP
11637: POP
// end ; end_of_file
11638: LD_VAR 0 3
11642: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11643: LD_VAR 0 1
11647: PPUSH
11648: LD_VAR 0 2
11652: PPUSH
11653: CALL 73431 0 2
// if GetControl ( vehicle ) = control_apeman then
11657: LD_VAR 0 1
11661: PPUSH
11662: CALL_OW 263
11666: PUSH
11667: LD_INT 5
11669: EQUAL
11670: IFFALSE 11682
// begin apeDriver := true ;
11672: LD_ADDR_EXP 8
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// exit ;
11680: GO 11735
// end ; if GetSide ( factory ) = 6 then
11682: LD_VAR 0 2
11686: PPUSH
11687: CALL_OW 255
11691: PUSH
11692: LD_INT 6
11694: EQUAL
11695: IFFALSE 11735
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
11697: LD_ADDR_EXP 35
11701: PUSH
11702: LD_EXP 35
11706: PPUSH
11707: LD_INT 1
11709: PPUSH
11710: CALL_OW 3
11714: ST_TO_ADDR
// ruTanks := Join ( ruTanks , vehicle ) ;
11715: LD_ADDR_EXP 36
11719: PUSH
11720: LD_EXP 36
11724: PPUSH
11725: LD_VAR 0 1
11729: PPUSH
11730: CALL 53065 0 2
11734: ST_TO_ADDR
// end ; end ;
11735: PPOPN 2
11737: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) = 6 and not See ( 2 , unit ) then
11738: LD_VAR 0 2
11742: PPUSH
11743: CALL_OW 255
11747: PUSH
11748: LD_INT 6
11750: EQUAL
11751: PUSH
11752: LD_INT 2
11754: PPUSH
11755: LD_VAR 0 2
11759: PPUSH
11760: CALL_OW 292
11764: NOT
11765: AND
11766: IFFALSE 11780
// SetLives ( unit , 1000 ) ;
11768: LD_VAR 0 2
11772: PPUSH
11773: LD_INT 1000
11775: PPUSH
11776: CALL_OW 234
// end ;
11780: PPOPN 2
11782: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area , fac , arm ;
11783: LD_INT 0
11785: PPUSH
11786: PPUSH
11787: PPUSH
11788: PPUSH
// begin if GetSide ( driver ) = 3 then
11789: LD_VAR 0 1
11793: PPUSH
11794: CALL_OW 255
11798: PUSH
11799: LD_INT 3
11801: EQUAL
11802: IFFALSE 11939
// begin tag := GetTag ( driver ) ;
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL_OW 110
11818: ST_TO_ADDR
// area := [ ruSpawn1AArea , ruSpawn2AArea , ruSpawn3AArea ] [ tag ] ;
11819: LD_ADDR_VAR 0 6
11823: PUSH
11824: LD_INT 21
11826: PUSH
11827: LD_INT 22
11829: PUSH
11830: LD_INT 23
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: PUSH
11838: LD_VAR 0 5
11842: ARRAY
11843: ST_TO_ADDR
// if not area then
11844: LD_VAR 0 6
11848: NOT
11849: IFFALSE 11853
// exit ;
11851: GO 12207
// repeat ComMoveToArea ( driver , area ) ;
11853: LD_VAR 0 1
11857: PPUSH
11858: LD_VAR 0 6
11862: PPUSH
11863: CALL_OW 113
// wait ( 0 0$3 ) ;
11867: LD_INT 105
11869: PPUSH
11870: CALL_OW 67
// if not IsOk ( driver ) then
11874: LD_VAR 0 1
11878: PPUSH
11879: CALL_OW 302
11883: NOT
11884: IFFALSE 11888
// exit ;
11886: GO 12207
// until IsInArea ( driver , ruSpawn1Area ) or IsInArea ( driver , ruSpawn2Area ) or IsInArea ( driver , ruSpawn3Area ) ;
11888: LD_VAR 0 1
11892: PPUSH
11893: LD_INT 15
11895: PPUSH
11896: CALL_OW 308
11900: PUSH
11901: LD_VAR 0 1
11905: PPUSH
11906: LD_INT 17
11908: PPUSH
11909: CALL_OW 308
11913: OR
11914: PUSH
11915: LD_VAR 0 1
11919: PPUSH
11920: LD_INT 19
11922: PPUSH
11923: CALL_OW 308
11927: OR
11928: IFFALSE 11853
// RemoveUnit ( driver ) ;
11930: LD_VAR 0 1
11934: PPUSH
11935: CALL_OW 64
// end ; if GetSide ( driver ) = 6 then
11939: LD_VAR 0 1
11943: PPUSH
11944: CALL_OW 255
11948: PUSH
11949: LD_INT 6
11951: EQUAL
11952: IFFALSE 12207
// begin ComMoveXY ( driver , 97 , 139 ) ;
11954: LD_VAR 0 1
11958: PPUSH
11959: LD_INT 97
11961: PPUSH
11962: LD_INT 139
11964: PPUSH
11965: CALL_OW 111
// if GetLives ( driver ) < 1000 then
11969: LD_VAR 0 1
11973: PPUSH
11974: CALL_OW 256
11978: PUSH
11979: LD_INT 1000
11981: LESS
11982: IFFALSE 11996
// SetTag ( driver , tHeal ) ;
11984: LD_VAR 0 1
11988: PPUSH
11989: LD_INT 3
11991: PPUSH
11992: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
11996: LD_INT 35
11998: PPUSH
11999: CALL_OW 67
// if IsDead ( driver ) then
12003: LD_VAR 0 1
12007: PPUSH
12008: CALL_OW 301
12012: IFFALSE 12016
// exit ;
12014: GO 12207
// until GetLives ( driver ) = 1000 ;
12016: LD_VAR 0 1
12020: PPUSH
12021: CALL_OW 256
12025: PUSH
12026: LD_INT 1000
12028: EQUAL
12029: IFFALSE 11996
// SetTag ( driver , 0 ) ;
12031: LD_VAR 0 1
12035: PPUSH
12036: LD_INT 0
12038: PPUSH
12039: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12043: LD_ADDR_VAR 0 7
12047: PUSH
12048: LD_INT 26
12050: PPUSH
12051: LD_INT 22
12053: PUSH
12054: LD_INT 6
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 30
12063: PUSH
12064: LD_INT 3
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 50
12073: PUSH
12074: EMPTY
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 70
12086: ST_TO_ADDR
// if fac then
12087: LD_VAR 0 7
12091: IFFALSE 12113
// begin ComEnterUnit ( driver , fac [ 1 ] ) ;
12093: LD_VAR 0 1
12097: PPUSH
12098: LD_VAR 0 7
12102: PUSH
12103: LD_INT 1
12105: ARRAY
12106: PPUSH
12107: CALL_OW 120
// exit ;
12111: GO 12207
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_barracks ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
12113: LD_ADDR_VAR 0 8
12117: PUSH
12118: LD_INT 26
12120: PPUSH
12121: LD_INT 22
12123: PUSH
12124: LD_INT 6
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 5
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 3
12143: PUSH
12144: LD_INT 62
12146: PUSH
12147: EMPTY
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 50
12156: PUSH
12157: EMPTY
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 70
12170: ST_TO_ADDR
// if arm then
12171: LD_VAR 0 8
12175: IFFALSE 12207
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
12177: LD_VAR 0 1
12181: PPUSH
12182: LD_VAR 0 8
12186: PUSH
12187: LD_INT 1
12189: ARRAY
12190: PPUSH
12191: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
12195: LD_VAR 0 1
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 183
// end ; end ; end ;
12207: PPOPN 8
12209: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
12210: LD_VAR 0 3
12214: PUSH
12215: LD_INT 17
12217: EQUAL
12218: IFFALSE 12228
// kamikazeTrained := true ;
12220: LD_ADDR_EXP 6
12224: PUSH
12225: LD_INT 1
12227: ST_TO_ADDR
// end ;
12228: PPOPN 3
12230: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL 73311 0 1
// if un in ruTanks then
12240: LD_VAR 0 1
12244: PUSH
12245: LD_EXP 36
12249: IN
12250: IFFALSE 12313
// ruConstructList := Join ( ruConstructList , [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ) ;
12252: LD_ADDR_EXP 35
12256: PUSH
12257: LD_EXP 35
12261: PPUSH
12262: LD_VAR 0 1
12266: PPUSH
12267: CALL_OW 265
12271: PUSH
12272: LD_VAR 0 1
12276: PPUSH
12277: CALL_OW 262
12281: PUSH
12282: LD_VAR 0 1
12286: PPUSH
12287: CALL_OW 263
12291: PUSH
12292: LD_VAR 0 1
12296: PPUSH
12297: CALL_OW 264
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL 53065 0 2
12312: ST_TO_ADDR
// if un = Schulz then
12313: LD_VAR 0 1
12317: PUSH
12318: LD_EXP 24
12322: EQUAL
12323: IFFALSE 12332
// YouLost ( Schulz ) ;
12325: LD_STRING Schulz
12327: PPUSH
12328: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
12332: LD_VAR 0 1
12336: PUSH
12337: LD_EXP 13
12341: EQUAL
12342: PUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: CALL_OW 255
12352: PUSH
12353: LD_INT 2
12355: EQUAL
12356: AND
12357: IFFALSE 12366
// YouLost ( Heike ) ;
12359: LD_STRING Heike
12361: PPUSH
12362: CALL_OW 104
// end ; end_of_file
12366: PPOPN 1
12368: END
// export function Action ; begin
12369: LD_INT 0
12371: PPUSH
// InGameOn ;
12372: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
12376: LD_INT 1
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_INT 2
12384: PPUSH
12385: LD_INT 32963
12387: NEG
12388: PPUSH
12389: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
12393: LD_INT 1
12395: PPUSH
12396: LD_INT 1
12398: PPUSH
12399: LD_INT 2
12401: PPUSH
12402: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
12406: LD_INT 173
12408: PPUSH
12409: LD_INT 149
12411: PPUSH
12412: CALL_OW 86
// PrepareExtraRussianBase ;
12416: CALL 3364 0 0
// wait ( 0 0$2 ) ;
12420: LD_INT 70
12422: PPUSH
12423: CALL_OW 67
// InGameOff ;
12427: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
12431: LD_STRING M6
12433: PPUSH
12434: CALL_OW 337
// if Count ( UnitFilter ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] , [ f_ok ] ) ) = Count ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] ) then
12438: LD_EXP 14
12442: PUSH
12443: LD_EXP 15
12447: PUSH
12448: LD_EXP 17
12452: PUSH
12453: LD_EXP 18
12457: PUSH
12458: LD_EXP 20
12462: PUSH
12463: LD_EXP 21
12467: PUSH
12468: LD_EXP 22
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PPUSH
12482: LD_INT 50
12484: PUSH
12485: EMPTY
12486: LIST
12487: PPUSH
12488: CALL_OW 72
12492: PPUSH
12493: CALL 17478 0 1
12497: PUSH
12498: LD_EXP 14
12502: PUSH
12503: LD_EXP 15
12507: PUSH
12508: LD_EXP 17
12512: PUSH
12513: LD_EXP 18
12517: PUSH
12518: LD_EXP 20
12522: PUSH
12523: LD_EXP 21
12527: PUSH
12528: LD_EXP 22
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL 17478 0 1
12546: EQUAL
12547: IFFALSE 12556
// SetAchievement ( ACH_KNIGHT ) ;
12549: LD_STRING ACH_KNIGHT
12551: PPUSH
12552: CALL_OW 543
// SaveForQuickRestart ;
12556: CALL_OW 22
// end ;
12560: LD_VAR 0 1
12564: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
12565: LD_EXP 5
12569: PUSH
12570: LD_EXP 33
12574: PPUSH
12575: CALL_OW 302
12579: AND
12580: PUSH
12581: LD_EXP 13
12585: PPUSH
12586: CALL_OW 302
12590: AND
12591: PUSH
12592: LD_EXP 13
12596: PPUSH
12597: LD_EXP 33
12601: PPUSH
12602: CALL_OW 296
12606: PUSH
12607: LD_INT 9
12609: LESS
12610: PUSH
12611: LD_INT 22
12613: PUSH
12614: LD_INT 2
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 91
12623: PUSH
12624: LD_EXP 13
12628: PUSH
12629: LD_INT 7
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 21
12639: PUSH
12640: LD_INT 3
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: PPUSH
12652: CALL_OW 69
12656: OR
12657: AND
12658: IFFALSE 12812
12660: GO 12662
12662: DISABLE
// begin ComExit ( Rolf ) ;
12663: LD_EXP 33
12667: PPUSH
12668: CALL 53463 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
12672: LD_EXP 33
12676: PPUSH
12677: LD_EXP 13
12681: PPUSH
12682: CALL_OW 172
// InGameOn ;
12686: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
12690: LD_EXP 13
12694: PPUSH
12695: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
12699: LD_EXP 33
12703: PPUSH
12704: LD_STRING DRf-Reunion-1
12706: PPUSH
12707: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
12711: LD_EXP 33
12715: PPUSH
12716: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
12720: LD_EXP 13
12724: PPUSH
12725: LD_EXP 33
12729: PPUSH
12730: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
12734: LD_EXP 33
12738: PPUSH
12739: LD_EXP 13
12743: PPUSH
12744: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
12748: LD_EXP 13
12752: PPUSH
12753: LD_STRING DH-Reunion-2
12755: PPUSH
12756: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
12760: LD_EXP 33
12764: PPUSH
12765: LD_STRING DRf-Reunion-3
12767: PPUSH
12768: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
12772: LD_EXP 13
12776: PPUSH
12777: LD_STRING DH-Reunion-4
12779: PPUSH
12780: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
12784: LD_EXP 33
12788: PPUSH
12789: LD_STRING DRf-Reunion-5
12791: PPUSH
12792: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
12796: LD_EXP 13
12800: PPUSH
12801: LD_STRING DH-Reunion-6
12803: PPUSH
12804: CALL_OW 88
// InGameOff ;
12808: CALL_OW 9
// end ;
12812: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
12813: LD_EXP 5
12817: NOT
12818: PUSH
12819: LD_INT 22
12821: PUSH
12822: LD_INT 2
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 91
12831: PUSH
12832: LD_EXP 24
12836: PUSH
12837: LD_INT 10
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 21
12847: PUSH
12848: LD_INT 3
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 69
12864: AND
12865: IFFALSE 13652
12867: GO 12869
12869: DISABLE
// begin InGameOn ;
12870: CALL_OW 8
// ComExit ( Schulz ) ;
12874: LD_EXP 24
12878: PPUSH
12879: CALL 53463 0 1
// CenterNowOnUnits ( Schulz ) ;
12883: LD_EXP 24
12887: PPUSH
12888: CALL_OW 87
// wait ( 0 0$0.3 ) ;
12892: LD_INT 10
12894: PPUSH
12895: CALL_OW 67
// DialogueOn ;
12899: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
12903: LD_EXP 24
12907: PPUSH
12908: LD_STRING DL-Def-1
12910: PPUSH
12911: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
12915: LD_EXP 24
12919: PPUSH
12920: LD_STRING DL-Def-2
12922: PPUSH
12923: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
12927: LD_EXP 24
12931: PPUSH
12932: LD_STRING DL-Def-3
12934: PPUSH
12935: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
12939: LD_EXP 25
12943: PPUSH
12944: CALL_OW 302
12948: PUSH
12949: LD_EXP 23
12953: PPUSH
12954: CALL_OW 302
12958: AND
12959: IFFALSE 13306
// begin Say ( Basim , DBs-Def-4 ) ;
12961: LD_EXP 25
12965: PPUSH
12966: LD_STRING DBs-Def-4
12968: PPUSH
12969: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
12973: LD_EXP 25
12977: PPUSH
12978: LD_STRING DBs-Def-5
12980: PPUSH
12981: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
12985: LD_EXP 23
12989: PPUSH
12990: LD_STRING DA-Def-6
12992: PPUSH
12993: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
12997: LD_EXP 25
13001: PPUSH
13002: LD_STRING DBs-Def-7
13004: PPUSH
13005: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
13009: LD_EXP 23
13013: PPUSH
13014: LD_STRING DA-Def-8
13016: PPUSH
13017: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
13021: LD_EXP 23
13025: PPUSH
13026: LD_STRING DA-Def-9
13028: PPUSH
13029: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
13033: LD_EXP 25
13037: PPUSH
13038: LD_STRING DBs-Def-10
13040: PPUSH
13041: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
13045: LD_EXP 23
13049: PPUSH
13050: LD_STRING DA-Def-11
13052: PPUSH
13053: CALL_OW 88
// if Query ( QTech ) = 1 then
13057: LD_STRING QTech
13059: PPUSH
13060: CALL_OW 97
13064: PUSH
13065: LD_INT 1
13067: EQUAL
13068: IFFALSE 13176
// begin Say ( Schulz , DL-Tech-1 ) ;
13070: LD_EXP 24
13074: PPUSH
13075: LD_STRING DL-Tech-1
13077: PPUSH
13078: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
13082: LD_EXP 24
13086: PPUSH
13087: LD_STRING DL-Tech-2
13089: PPUSH
13090: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
13094: LD_EXP 23
13098: PPUSH
13099: LD_STRING DA-Tech-3
13101: PPUSH
13102: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
13106: LD_EXP 18
13110: PPUSH
13111: LD_STRING DK-Tech-4
13113: PPUSH
13114: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
13118: LD_EXP 18
13122: PPUSH
13123: LD_STRING DK-Tech-5
13125: PPUSH
13126: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
13130: LD_EXP 25
13134: PPUSH
13135: LD_STRING DBs-Tech-6
13137: PPUSH
13138: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
13142: LD_EXP 18
13146: PPUSH
13147: LD_STRING DK-Tech-7
13149: PPUSH
13150: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
13154: LD_INT 3
13156: PPUSH
13157: LD_INT 2
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
13167: LD_STRING M7a
13169: PPUSH
13170: CALL_OW 604
// end else
13174: GO 13304
// begin Say ( Schulz , DL-Tech-a-1 ) ;
13176: LD_EXP 24
13180: PPUSH
13181: LD_STRING DL-Tech-a-1
13183: PPUSH
13184: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
13188: LD_EXP 24
13192: PPUSH
13193: LD_STRING DL-Tech-a-2
13195: PPUSH
13196: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
13200: LD_EXP 25
13204: PPUSH
13205: LD_STRING DBs-Tech-a-3
13207: PPUSH
13208: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
13212: LD_EXP 18
13216: PPUSH
13217: LD_STRING DK-Tech-a-4
13219: PPUSH
13220: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
13224: LD_EXP 18
13228: PPUSH
13229: LD_STRING DK-Tech-a-5
13231: PPUSH
13232: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
13236: LD_EXP 23
13240: PPUSH
13241: LD_STRING DA-Tech-a-6
13243: PPUSH
13244: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
13248: LD_EXP 23
13252: PPUSH
13253: LD_STRING DA-Tech-a-7
13255: PPUSH
13256: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
13260: LD_EXP 24
13264: PPUSH
13265: LD_STRING DL-Tech-a-8
13267: PPUSH
13268: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
13272: LD_EXP 23
13276: PPUSH
13277: LD_STRING DA-Tech-a-9
13279: PPUSH
13280: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13284: LD_INT 4
13286: PPUSH
13287: LD_INT 2
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
13297: LD_STRING M7b
13299: PPUSH
13300: CALL_OW 604
// end ; end else
13304: GO 13354
// if IsOk ( Basim ) then
13306: LD_EXP 25
13310: PPUSH
13311: CALL_OW 302
13315: IFFALSE 13354
// begin Say ( Basim , DBs-Def-4 ) ;
13317: LD_EXP 25
13321: PPUSH
13322: LD_STRING DBs-Def-4
13324: PPUSH
13325: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13329: LD_EXP 25
13333: PPUSH
13334: LD_STRING DBs-Def-5
13336: PPUSH
13337: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13341: LD_INT 4
13343: PPUSH
13344: LD_INT 2
13346: PPUSH
13347: LD_INT 1
13349: PPUSH
13350: CALL_OW 322
// end ; DialogueOff ;
13354: CALL_OW 7
// InGameOff ;
13358: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
13362: LD_STRING M7
13364: PPUSH
13365: CALL_OW 337
// playerInBase := true ;
13369: LD_ADDR_EXP 5
13373: PUSH
13374: LD_INT 1
13376: ST_TO_ADDR
// wait ( 0 0$30 ) ;
13377: LD_INT 1050
13379: PPUSH
13380: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13384: LD_INT 35
13386: PPUSH
13387: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) ;
13391: LD_INT 22
13393: PUSH
13394: LD_INT 2
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 50
13403: PUSH
13404: EMPTY
13405: LIST
13406: PUSH
13407: LD_INT 3
13409: PUSH
13410: LD_INT 57
13412: PUSH
13413: EMPTY
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 30
13422: PUSH
13423: LD_INT 30
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 69
13440: IFFALSE 13384
// if IsOk ( Kurt ) then
13442: LD_EXP 22
13446: PPUSH
13447: CALL_OW 302
13451: IFFALSE 13639
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
13453: LD_INT 22
13455: PUSH
13456: LD_INT 2
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 50
13465: PUSH
13466: EMPTY
13467: LIST
13468: PUSH
13469: LD_INT 3
13471: PUSH
13472: LD_INT 57
13474: PUSH
13475: EMPTY
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 30
13484: PUSH
13485: LD_INT 30
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: PUSH
13503: LD_INT 1
13505: ARRAY
13506: PPUSH
13507: CALL_OW 87
// DialogueOn ;
13511: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
13515: LD_EXP 22
13519: PPUSH
13520: LD_STRING DKs-Med-1
13522: PPUSH
13523: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
13527: LD_EXP 22
13531: PPUSH
13532: LD_STRING DKs-Med-2
13534: PPUSH
13535: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
13539: LD_EXP 24
13543: PPUSH
13544: LD_STRING DL-Med-3
13546: PPUSH
13547: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
13551: LD_EXP 24
13555: PPUSH
13556: LD_STRING DL-Med-4
13558: PPUSH
13559: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
13563: LD_EXP 22
13567: PPUSH
13568: LD_STRING DKs-Med-5
13570: PPUSH
13571: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
13575: LD_EXP 22
13579: PPUSH
13580: LD_STRING DKs-Med-6
13582: PPUSH
13583: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
13587: LD_EXP 22
13591: PPUSH
13592: LD_STRING DKs-Med-7
13594: PPUSH
13595: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
13599: LD_EXP 22
13603: PPUSH
13604: LD_STRING DKs-Med-8
13606: PPUSH
13607: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
13611: LD_EXP 24
13615: PPUSH
13616: LD_STRING DL-Med-9
13618: PPUSH
13619: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
13623: LD_EXP 24
13627: PPUSH
13628: LD_STRING DL-Med-10
13630: PPUSH
13631: CALL_OW 88
// DialogueOff ;
13635: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
13639: LD_STRING M8-
13641: PUSH
13642: LD_OWVAR 67
13646: STR
13647: PPUSH
13648: CALL_OW 337
// end ;
13652: END
// every 0 0$1 trigger playerInBase do
13653: LD_EXP 5
13657: IFFALSE 13677
13659: GO 13661
13661: DISABLE
// begin enable ;
13662: ENABLE
// missionTime := missionTime + 0 0$1 ;
13663: LD_ADDR_EXP 9
13667: PUSH
13668: LD_EXP 9
13672: PUSH
13673: LD_INT 35
13675: PLUS
13676: ST_TO_ADDR
// end ;
13677: END
// every 0 0$2 trigger playerInBase and apeDriver do
13678: LD_EXP 5
13682: PUSH
13683: LD_EXP 8
13687: AND
13688: IFFALSE 14085
13690: GO 13692
13692: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
13693: LD_STRING M7a_out
13695: PPUSH
13696: CALL_OW 337
// wait ( 0 0$2 ) ;
13700: LD_INT 70
13702: PPUSH
13703: CALL_OW 67
// DialogueOn ;
13707: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
13711: LD_INT 22
13713: PUSH
13714: LD_INT 2
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 33
13723: PUSH
13724: LD_INT 5
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: PUSH
13740: LD_INT 1
13742: ARRAY
13743: PPUSH
13744: CALL_OW 87
// if IsOk ( Mia ) then
13748: LD_EXP 27
13752: PPUSH
13753: CALL_OW 302
13757: IFFALSE 13783
// begin Say ( Mia , DMm-Apedrive-1 ) ;
13759: LD_EXP 27
13763: PPUSH
13764: LD_STRING DMm-Apedrive-1
13766: PPUSH
13767: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
13771: LD_EXP 15
13775: PPUSH
13776: LD_STRING DM-Apedrive-2
13778: PPUSH
13779: CALL_OW 88
// end ; if IsOk ( Jenna ) then
13783: LD_EXP 29
13787: PPUSH
13788: CALL_OW 302
13792: IFFALSE 14081
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
13794: LD_EXP 29
13798: PPUSH
13799: LD_STRING DJm-Apedrive-3
13801: PPUSH
13802: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
13806: LD_EXP 29
13810: PPUSH
13811: LD_STRING DJm-Apedrive-4
13813: PPUSH
13814: CALL_OW 88
// if IsOk ( Basim ) then
13818: LD_EXP 25
13822: PPUSH
13823: CALL_OW 302
13827: IFFALSE 14081
// begin Say ( Basim , DBs-Apedrive-5 ) ;
13829: LD_EXP 25
13833: PPUSH
13834: LD_STRING DBs-Apedrive-5
13836: PPUSH
13837: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
13841: LD_EXP 25
13845: PPUSH
13846: LD_STRING DBs-Apedrive-6
13848: PPUSH
13849: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
13853: LD_EXP 29
13857: PPUSH
13858: LD_STRING DJm-Apedrive-7
13860: PPUSH
13861: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
13865: LD_EXP 25
13869: PPUSH
13870: LD_STRING DBs-Apedrive-8
13872: PPUSH
13873: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
13877: LD_EXP 29
13881: PPUSH
13882: LD_STRING DJm-Apedrive-9
13884: PPUSH
13885: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
13889: LD_EXP 25
13893: PPUSH
13894: LD_STRING DBs-Apedrive-10
13896: PPUSH
13897: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
13901: LD_EXP 29
13905: PPUSH
13906: LD_STRING DJm-Apedrive-11
13908: PPUSH
13909: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
13913: LD_EXP 18
13917: PPUSH
13918: LD_STRING DK-Apedrive-12
13920: PPUSH
13921: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
13925: LD_EXP 29
13929: PPUSH
13930: LD_STRING DJm-Apedrive-13
13932: PPUSH
13933: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
13937: LD_EXP 29
13941: PPUSH
13942: LD_STRING DJm-Apedrive-14
13944: PPUSH
13945: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
13949: LD_EXP 29
13953: PPUSH
13954: LD_STRING DJm-Apedrive-15
13956: PPUSH
13957: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
13961: LD_EXP 29
13965: PPUSH
13966: LD_STRING DJm-Apedrive-16
13968: PPUSH
13969: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
13973: LD_EXP 27
13977: PPUSH
13978: LD_STRING DMm-Apedrive-17
13980: PPUSH
13981: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
13985: LD_EXP 27
13989: PPUSH
13990: LD_STRING DMm-Apedrive-18
13992: PPUSH
13993: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
13997: LD_EXP 27
14001: PPUSH
14002: LD_STRING DMm-Apedrive-19
14004: PPUSH
14005: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
14009: LD_EXP 27
14013: PPUSH
14014: LD_STRING DMm-Apedrive-20
14016: PPUSH
14017: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
14021: LD_EXP 18
14025: PPUSH
14026: LD_STRING DK-Apedrive-21
14028: PPUSH
14029: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
14033: LD_EXP 18
14037: PPUSH
14038: LD_STRING DK-Apedrive-22
14040: PPUSH
14041: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
14045: LD_EXP 13
14049: PPUSH
14050: LD_STRING DH-Apedrive-23
14052: PPUSH
14053: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
14057: LD_EXP 26
14061: PPUSH
14062: LD_STRING DLt-Apedrive-24
14064: PPUSH
14065: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
14069: LD_EXP 26
14073: PPUSH
14074: LD_STRING DLt-Apedrive-25
14076: PPUSH
14077: CALL_OW 88
// end ; end ; DialogueOff ;
14081: CALL_OW 7
// end ;
14085: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
14086: LD_EXP 5
14090: PUSH
14091: LD_EXP 6
14095: AND
14096: IFFALSE 14108
14098: GO 14100
14100: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
14101: LD_STRING M7b_out
14103: PPUSH
14104: CALL_OW 337
14108: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
14109: LD_EXP 5
14113: PUSH
14114: LD_INT 22
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: LD_INT 3
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 3
14136: PUSH
14137: LD_INT 58
14139: PUSH
14140: EMPTY
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: LIST
14151: PPUSH
14152: CALL_OW 69
14156: AND
14157: PUSH
14158: LD_EXP 13
14162: PPUSH
14163: CALL_OW 302
14167: AND
14168: PUSH
14169: LD_EXP 24
14173: PPUSH
14174: CALL_OW 302
14178: AND
14179: IFFALSE 14352
14181: GO 14183
14183: DISABLE
// begin DialogueOn ;
14184: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
14188: LD_EXP 24
14192: PPUSH
14193: LD_STRING DL-Mort-1
14195: PPUSH
14196: CALL_OW 88
// if IsOk ( Markov ) then
14200: LD_EXP 20
14204: PPUSH
14205: CALL_OW 302
14209: IFFALSE 14262
// begin Say ( Heike , DH-Mort-2 ) ;
14211: LD_EXP 13
14215: PPUSH
14216: LD_STRING DH-Mort-2
14218: PPUSH
14219: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
14223: LD_EXP 20
14227: PPUSH
14228: LD_STRING DMar-Mort-3
14230: PPUSH
14231: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
14235: LD_EXP 20
14239: PPUSH
14240: LD_STRING DMar-Mort-4
14242: PPUSH
14243: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14247: LD_INT 88
14249: PPUSH
14250: LD_INT 2
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: CALL_OW 322
// end else
14260: GO 14348
// if IsOk ( Olaf ) then
14262: LD_EXP 21
14266: PPUSH
14267: CALL_OW 302
14271: IFFALSE 14324
// begin Say ( Heike , DH-Mort-a-2 ) ;
14273: LD_EXP 13
14277: PPUSH
14278: LD_STRING DH-Mort-a-2
14280: PPUSH
14281: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
14285: LD_EXP 21
14289: PPUSH
14290: LD_STRING DO-Mort-a-3
14292: PPUSH
14293: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
14297: LD_EXP 21
14301: PPUSH
14302: LD_STRING DO-Mort-a-4
14304: PPUSH
14305: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14309: LD_INT 88
14311: PPUSH
14312: LD_INT 2
14314: PPUSH
14315: LD_INT 1
14317: PPUSH
14318: CALL_OW 322
// end else
14322: GO 14348
// begin Say ( Heike , DH-Mort-a-5 ) ;
14324: LD_EXP 13
14328: PPUSH
14329: LD_STRING DH-Mort-a-5
14331: PPUSH
14332: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
14336: LD_EXP 13
14340: PPUSH
14341: LD_STRING DH-Mort-a-6
14343: PPUSH
14344: CALL_OW 88
// end ; DialogueOff ;
14348: CALL_OW 7
// end ;
14352: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
14353: LD_EXP 18
14357: PPUSH
14358: CALL_OW 256
14362: PUSH
14363: LD_INT 10
14365: LESS
14366: IFFALSE 14468
14368: GO 14370
14370: DISABLE
// begin DialogueOn ;
14371: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14375: LD_EXP 18
14379: PPUSH
14380: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
14384: LD_EXP 18
14388: PPUSH
14389: LD_STRING DK-Death-1
14391: PPUSH
14392: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
14396: LD_EXP 18
14400: PPUSH
14401: LD_STRING DK-Death-2
14403: PPUSH
14404: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
14408: LD_EXP 18
14412: PPUSH
14413: LD_STRING DK-Death-3
14415: PPUSH
14416: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
14420: LD_EXP 13
14424: PPUSH
14425: LD_STRING DH-Death-4
14427: PPUSH
14428: CALL_OW 88
// if IsOk ( Markov ) then
14432: LD_EXP 20
14436: PPUSH
14437: CALL_OW 302
14441: IFFALSE 14455
// Say ( Markov , DMar-Death-5 ) ;
14443: LD_EXP 20
14447: PPUSH
14448: LD_STRING DMar-Death-5
14450: PPUSH
14451: CALL_OW 88
// DialogueOff ;
14455: CALL_OW 7
// KillUnit ( Kaia ) ;
14459: LD_EXP 18
14463: PPUSH
14464: CALL_OW 66
// end ;
14468: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib ;
14469: LD_EXP 10
14473: PUSH
14474: LD_INT 81
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 50
14486: PUSH
14487: EMPTY
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PPUSH
14494: CALL_OW 69
14498: NOT
14499: AND
14500: IFFALSE 15265
14502: GO 14504
14504: DISABLE
14505: LD_INT 0
14507: PPUSH
14508: PPUSH
// begin InGameOn ;
14509: CALL_OW 8
// DialogueOn ;
14513: CALL_OW 6
// if time09 + time09c + tick < 80 80$00 then
14517: LD_EXP 3
14521: PUSH
14522: LD_EXP 4
14526: PLUS
14527: PUSH
14528: LD_OWVAR 1
14532: PLUS
14533: PUSH
14534: LD_INT 168000
14536: LESS
14537: IFFALSE 14546
// SetAchievement ( ACH_HSPEED_9 ) ;
14539: LD_STRING ACH_HSPEED_9
14541: PPUSH
14542: CALL_OW 543
// CenterOnNow ( Schulz ) ;
14546: LD_EXP 24
14550: PPUSH
14551: CALL 57018 0 1
// dwait ( 0 0$0.3 ) ;
14555: LD_INT 10
14557: PPUSH
14558: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
14562: LD_EXP 24
14566: PPUSH
14567: LD_STRING DL-End-1
14569: PPUSH
14570: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
14574: LD_EXP 13
14578: PPUSH
14579: LD_STRING DH-End-2
14581: PPUSH
14582: CALL_OW 88
// if IsOk ( Kaia ) then
14586: LD_EXP 18
14590: PPUSH
14591: CALL_OW 302
14595: IFFALSE 14657
// begin SaveCharacters ( Kaia , 09_Kaia ) ;
14597: LD_EXP 18
14601: PPUSH
14602: LD_STRING 09_Kaia
14604: PPUSH
14605: CALL_OW 38
// Say ( Kaia , DK-End-a-3 ) ;
14609: LD_EXP 18
14613: PPUSH
14614: LD_STRING DK-End-a-3
14616: PPUSH
14617: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
14621: LD_EXP 18
14625: PPUSH
14626: LD_STRING DK-End-a-4
14628: PPUSH
14629: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
14633: LD_EXP 24
14637: PPUSH
14638: LD_STRING DL-End-a-5
14640: PPUSH
14641: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
14645: LD_EXP 24
14649: PPUSH
14650: LD_STRING DL-End-a-6
14652: PPUSH
14653: CALL_OW 88
// end ; SaveCharacters ( Heike , 09_Heike ) ;
14657: LD_EXP 13
14661: PPUSH
14662: LD_STRING 09_Heike
14664: PPUSH
14665: CALL_OW 38
// SaveCharacters ( Schulz , 09_Schulz ) ;
14669: LD_EXP 24
14673: PPUSH
14674: LD_STRING 09_Schulz
14676: PPUSH
14677: CALL_OW 38
// if IsOk ( Basim ) then
14681: LD_EXP 25
14685: PPUSH
14686: CALL_OW 302
14690: IFFALSE 14704
// SaveCharacters ( Basim , 09_Basim ) ;
14692: LD_EXP 25
14696: PPUSH
14697: LD_STRING 09_Basim
14699: PPUSH
14700: CALL_OW 38
// if IsOk ( Givi ) then
14704: LD_EXP 14
14708: PPUSH
14709: CALL_OW 302
14713: IFFALSE 14727
// SaveCharacters ( Givi , 09_Givi ) ;
14715: LD_EXP 14
14719: PPUSH
14720: LD_STRING 09_Givi
14722: PPUSH
14723: CALL_OW 38
// if IsOk ( Mike ) then
14727: LD_EXP 15
14731: PPUSH
14732: CALL_OW 302
14736: IFFALSE 14750
// SaveCharacters ( Mike , 09_Mike ) ;
14738: LD_EXP 15
14742: PPUSH
14743: LD_STRING 09_Mike
14745: PPUSH
14746: CALL_OW 38
// if IsOk ( Ibrahim ) then
14750: LD_EXP 16
14754: PPUSH
14755: CALL_OW 302
14759: IFFALSE 14773
// SaveCharacters ( Ibrahim , 09_Ibrahim ) ;
14761: LD_EXP 16
14765: PPUSH
14766: LD_STRING 09_Ibrahim
14768: PPUSH
14769: CALL_OW 38
// if IsOk ( Kamil ) then
14773: LD_EXP 17
14777: PPUSH
14778: CALL_OW 302
14782: IFFALSE 14796
// SaveCharacters ( Kamil , 09_Kamil ) ;
14784: LD_EXP 17
14788: PPUSH
14789: LD_STRING 09_Kamil
14791: PPUSH
14792: CALL_OW 38
// if IsOk ( Sophia ) then
14796: LD_EXP 19
14800: PPUSH
14801: CALL_OW 302
14805: IFFALSE 14819
// SaveCharacters ( Sophia , 09_Sophia ) ;
14807: LD_EXP 19
14811: PPUSH
14812: LD_STRING 09_Sophia
14814: PPUSH
14815: CALL_OW 38
// if IsOk ( Markov ) then
14819: LD_EXP 20
14823: PPUSH
14824: CALL_OW 302
14828: IFFALSE 14842
// SaveCharacters ( Markov , 09_Markov ) ;
14830: LD_EXP 20
14834: PPUSH
14835: LD_STRING 09_Markov
14837: PPUSH
14838: CALL_OW 38
// if IsOk ( Olaf ) then
14842: LD_EXP 21
14846: PPUSH
14847: CALL_OW 302
14851: IFFALSE 14865
// SaveCharacters ( Olaf , 09_Olaf ) ;
14853: LD_EXP 21
14857: PPUSH
14858: LD_STRING 09_Olaf
14860: PPUSH
14861: CALL_OW 38
// if IsOk ( Kurt ) then
14865: LD_EXP 22
14869: PPUSH
14870: CALL_OW 302
14874: IFFALSE 14888
// SaveCharacters ( Kurt , 09_Kurt ) ;
14876: LD_EXP 22
14880: PPUSH
14881: LD_STRING 09_Kurt
14883: PPUSH
14884: CALL_OW 38
// if IsOk ( Aviradze ) then
14888: LD_EXP 23
14892: PPUSH
14893: CALL_OW 302
14897: IFFALSE 14911
// SaveCharacters ( Aviradze , 09_Aviradze ) ;
14899: LD_EXP 23
14903: PPUSH
14904: LD_STRING 09_Aviradze
14906: PPUSH
14907: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09_heikeSecondSquad ) ;
14911: LD_EXP 30
14915: PPUSH
14916: LD_INT 50
14918: PUSH
14919: EMPTY
14920: LIST
14921: PPUSH
14922: CALL_OW 72
14926: PPUSH
14927: LD_STRING 09_heikeSecondSquad
14929: PPUSH
14930: CALL_OW 38
// if GetTech ( tech_apeBrain , 2 ) = state_researched then
14934: LD_INT 4
14936: PPUSH
14937: LD_INT 2
14939: PPUSH
14940: CALL_OW 321
14944: PUSH
14945: LD_INT 2
14947: EQUAL
14948: IFFALSE 14960
// SaveVariable ( 1 , 09_ApeBrain ) ;
14950: LD_INT 1
14952: PPUSH
14953: LD_STRING 09_ApeBrain
14955: PPUSH
14956: CALL_OW 39
// if GetTech ( tech_apeNeural , 2 ) = state_researched then
14960: LD_INT 3
14962: PPUSH
14963: LD_INT 2
14965: PPUSH
14966: CALL_OW 321
14970: PUSH
14971: LD_INT 2
14973: EQUAL
14974: IFFALSE 14986
// SaveVariable ( 1 , 09_ApeNeural ) ;
14976: LD_INT 1
14978: PPUSH
14979: LD_STRING 09_ApeNeural
14981: PPUSH
14982: CALL_OW 39
// sib := 0 ;
14986: LD_ADDR_VAR 0 2
14990: PUSH
14991: LD_INT 0
14993: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
14994: LD_ADDR_VAR 0 1
14998: PUSH
14999: LD_INT 22
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 2
15011: PUSH
15012: LD_INT 30
15014: PUSH
15015: LD_INT 0
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 30
15024: PUSH
15025: LD_INT 1
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: LIST
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PPUSH
15041: CALL_OW 69
15045: PUSH
15046: FOR_IN
15047: IFFALSE 15080
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
15049: LD_ADDR_VAR 0 2
15053: PUSH
15054: LD_VAR 0 2
15058: PUSH
15059: LD_VAR 0 1
15063: PPUSH
15064: CALL_OW 274
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: CALL_OW 275
15076: PLUS
15077: ST_TO_ADDR
15078: GO 15046
15080: POP
15081: POP
// if sib >= sibToCollect then
15082: LD_VAR 0 2
15086: PUSH
15087: LD_EXP 7
15091: GREATEREQUAL
15092: IFFALSE 15106
// AddMedal ( med1 , 1 ) else
15094: LD_STRING med1
15096: PPUSH
15097: LD_INT 1
15099: PPUSH
15100: CALL_OW 101
15104: GO 15117
// AddMedal ( med1 , - 1 ) ;
15106: LD_STRING med1
15108: PPUSH
15109: LD_INT 1
15111: NEG
15112: PPUSH
15113: CALL_OW 101
// if apeDriver or kamikazeTrained then
15117: LD_EXP 8
15121: PUSH
15122: LD_EXP 6
15126: OR
15127: IFFALSE 15141
// AddMedal ( med2 , 1 ) else
15129: LD_STRING med2
15131: PPUSH
15132: LD_INT 1
15134: PPUSH
15135: CALL_OW 101
15139: GO 15152
// AddMedal ( med2 , - 1 ) ;
15141: LD_STRING med2
15143: PPUSH
15144: LD_INT 1
15146: NEG
15147: PPUSH
15148: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
15152: LD_EXP 14
15156: PUSH
15157: LD_EXP 15
15161: PUSH
15162: LD_EXP 16
15166: PUSH
15167: LD_EXP 17
15171: PUSH
15172: LD_EXP 18
15176: PUSH
15177: LD_EXP 19
15181: PUSH
15182: LD_EXP 20
15186: PUSH
15187: LD_EXP 21
15191: PUSH
15192: LD_EXP 22
15196: PUSH
15197: LD_EXP 23
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: PPUSH
15214: LD_INT 50
15216: PUSH
15217: EMPTY
15218: LIST
15219: PPUSH
15220: CALL_OW 72
15224: NOT
15225: IFFALSE 15240
// AddMedal ( med3 , - 1 ) else
15227: LD_STRING med3
15229: PPUSH
15230: LD_INT 1
15232: NEG
15233: PPUSH
15234: CALL_OW 101
15238: GO 15250
// AddMedal ( med3 , 1 ) ;
15240: LD_STRING med3
15242: PPUSH
15243: LD_INT 1
15245: PPUSH
15246: CALL_OW 101
// GiveMedals ( MAIN ) ;
15250: LD_STRING MAIN
15252: PPUSH
15253: CALL_OW 102
// YouWin ;
15257: CALL_OW 103
// DialogueOff ;
15261: CALL_OW 7
// end ; end_of_file
15265: PPOPN 2
15267: END
// every 0 0$25 + 0 0$20 trigger playerInBase do var i , tmp ;
15268: LD_EXP 5
15272: IFFALSE 15373
15274: GO 15276
15276: DISABLE
15277: LD_INT 0
15279: PPUSH
15280: PPUSH
// begin enable ;
15281: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
15282: LD_ADDR_VAR 0 2
15286: PUSH
15287: LD_INT 9
15289: PUSH
15290: LD_INT 10
15292: PUSH
15293: LD_INT 11
15295: PUSH
15296: LD_INT 12
15298: PUSH
15299: LD_INT 13
15301: PUSH
15302: LD_INT 14
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
15313: LD_ADDR_VAR 0 1
15317: PUSH
15318: LD_VAR 0 2
15322: PUSH
15323: LD_INT 1
15325: PPUSH
15326: LD_INT 6
15328: PPUSH
15329: CALL_OW 12
15333: ARRAY
15334: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 16 then
15335: LD_VAR 0 1
15339: PPUSH
15340: CALL_OW 435
15344: PUSH
15345: LD_INT 16
15347: LESS
15348: IFFALSE 15373
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
15350: LD_INT 1
15352: PPUSH
15353: LD_INT 5
15355: PPUSH
15356: CALL_OW 12
15360: PPUSH
15361: LD_VAR 0 1
15365: PPUSH
15366: LD_INT 1
15368: PPUSH
15369: CALL_OW 55
// end ; end_of_file
15373: PPOPN 2
15375: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
// if exist_mode then
15380: LD_VAR 0 2
15384: IFFALSE 15409
// unit := CreateCharacter ( prefix & ident ) else
15386: LD_ADDR_VAR 0 5
15390: PUSH
15391: LD_VAR 0 3
15395: PUSH
15396: LD_VAR 0 1
15400: STR
15401: PPUSH
15402: CALL_OW 34
15406: ST_TO_ADDR
15407: GO 15424
// unit := NewCharacter ( ident ) ;
15409: LD_ADDR_VAR 0 5
15413: PUSH
15414: LD_VAR 0 1
15418: PPUSH
15419: CALL_OW 25
15423: ST_TO_ADDR
// result := unit ;
15424: LD_ADDR_VAR 0 4
15428: PUSH
15429: LD_VAR 0 5
15433: ST_TO_ADDR
// end ;
15434: LD_VAR 0 4
15438: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15439: LD_INT 0
15441: PPUSH
15442: PPUSH
// if not side or not nation then
15443: LD_VAR 0 1
15447: NOT
15448: PUSH
15449: LD_VAR 0 2
15453: NOT
15454: OR
15455: IFFALSE 15459
// exit ;
15457: GO 16227
// case nation of nation_american :
15459: LD_VAR 0 2
15463: PUSH
15464: LD_INT 1
15466: DOUBLE
15467: EQUAL
15468: IFTRUE 15472
15470: GO 15686
15472: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15473: LD_ADDR_VAR 0 4
15477: PUSH
15478: LD_INT 35
15480: PUSH
15481: LD_INT 45
15483: PUSH
15484: LD_INT 46
15486: PUSH
15487: LD_INT 47
15489: PUSH
15490: LD_INT 82
15492: PUSH
15493: LD_INT 83
15495: PUSH
15496: LD_INT 84
15498: PUSH
15499: LD_INT 85
15501: PUSH
15502: LD_INT 86
15504: PUSH
15505: LD_INT 1
15507: PUSH
15508: LD_INT 2
15510: PUSH
15511: LD_INT 6
15513: PUSH
15514: LD_INT 15
15516: PUSH
15517: LD_INT 16
15519: PUSH
15520: LD_INT 7
15522: PUSH
15523: LD_INT 12
15525: PUSH
15526: LD_INT 13
15528: PUSH
15529: LD_INT 10
15531: PUSH
15532: LD_INT 14
15534: PUSH
15535: LD_INT 20
15537: PUSH
15538: LD_INT 21
15540: PUSH
15541: LD_INT 22
15543: PUSH
15544: LD_INT 25
15546: PUSH
15547: LD_INT 32
15549: PUSH
15550: LD_INT 27
15552: PUSH
15553: LD_INT 36
15555: PUSH
15556: LD_INT 69
15558: PUSH
15559: LD_INT 39
15561: PUSH
15562: LD_INT 34
15564: PUSH
15565: LD_INT 40
15567: PUSH
15568: LD_INT 48
15570: PUSH
15571: LD_INT 49
15573: PUSH
15574: LD_INT 50
15576: PUSH
15577: LD_INT 51
15579: PUSH
15580: LD_INT 52
15582: PUSH
15583: LD_INT 53
15585: PUSH
15586: LD_INT 54
15588: PUSH
15589: LD_INT 55
15591: PUSH
15592: LD_INT 56
15594: PUSH
15595: LD_INT 57
15597: PUSH
15598: LD_INT 58
15600: PUSH
15601: LD_INT 59
15603: PUSH
15604: LD_INT 60
15606: PUSH
15607: LD_INT 61
15609: PUSH
15610: LD_INT 62
15612: PUSH
15613: LD_INT 80
15615: PUSH
15616: LD_INT 82
15618: PUSH
15619: LD_INT 83
15621: PUSH
15622: LD_INT 84
15624: PUSH
15625: LD_INT 85
15627: PUSH
15628: LD_INT 86
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: ST_TO_ADDR
15684: GO 16151
15686: LD_INT 2
15688: DOUBLE
15689: EQUAL
15690: IFTRUE 15694
15692: GO 15920
15694: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15695: LD_ADDR_VAR 0 4
15699: PUSH
15700: LD_INT 35
15702: PUSH
15703: LD_INT 45
15705: PUSH
15706: LD_INT 46
15708: PUSH
15709: LD_INT 47
15711: PUSH
15712: LD_INT 82
15714: PUSH
15715: LD_INT 83
15717: PUSH
15718: LD_INT 84
15720: PUSH
15721: LD_INT 85
15723: PUSH
15724: LD_INT 87
15726: PUSH
15727: LD_INT 70
15729: PUSH
15730: LD_INT 1
15732: PUSH
15733: LD_INT 11
15735: PUSH
15736: LD_INT 3
15738: PUSH
15739: LD_INT 4
15741: PUSH
15742: LD_INT 5
15744: PUSH
15745: LD_INT 6
15747: PUSH
15748: LD_INT 15
15750: PUSH
15751: LD_INT 18
15753: PUSH
15754: LD_INT 7
15756: PUSH
15757: LD_INT 17
15759: PUSH
15760: LD_INT 8
15762: PUSH
15763: LD_INT 20
15765: PUSH
15766: LD_INT 21
15768: PUSH
15769: LD_INT 22
15771: PUSH
15772: LD_INT 72
15774: PUSH
15775: LD_INT 26
15777: PUSH
15778: LD_INT 69
15780: PUSH
15781: LD_INT 39
15783: PUSH
15784: LD_INT 40
15786: PUSH
15787: LD_INT 41
15789: PUSH
15790: LD_INT 42
15792: PUSH
15793: LD_INT 43
15795: PUSH
15796: LD_INT 48
15798: PUSH
15799: LD_INT 49
15801: PUSH
15802: LD_INT 50
15804: PUSH
15805: LD_INT 51
15807: PUSH
15808: LD_INT 52
15810: PUSH
15811: LD_INT 53
15813: PUSH
15814: LD_INT 54
15816: PUSH
15817: LD_INT 55
15819: PUSH
15820: LD_INT 56
15822: PUSH
15823: LD_INT 60
15825: PUSH
15826: LD_INT 61
15828: PUSH
15829: LD_INT 62
15831: PUSH
15832: LD_INT 66
15834: PUSH
15835: LD_INT 67
15837: PUSH
15838: LD_INT 68
15840: PUSH
15841: LD_INT 81
15843: PUSH
15844: LD_INT 82
15846: PUSH
15847: LD_INT 83
15849: PUSH
15850: LD_INT 84
15852: PUSH
15853: LD_INT 85
15855: PUSH
15856: LD_INT 87
15858: PUSH
15859: LD_INT 88
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: ST_TO_ADDR
15918: GO 16151
15920: LD_INT 3
15922: DOUBLE
15923: EQUAL
15924: IFTRUE 15928
15926: GO 16150
15928: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15929: LD_ADDR_VAR 0 4
15933: PUSH
15934: LD_INT 46
15936: PUSH
15937: LD_INT 47
15939: PUSH
15940: LD_INT 1
15942: PUSH
15943: LD_INT 2
15945: PUSH
15946: LD_INT 82
15948: PUSH
15949: LD_INT 83
15951: PUSH
15952: LD_INT 84
15954: PUSH
15955: LD_INT 85
15957: PUSH
15958: LD_INT 86
15960: PUSH
15961: LD_INT 11
15963: PUSH
15964: LD_INT 9
15966: PUSH
15967: LD_INT 20
15969: PUSH
15970: LD_INT 19
15972: PUSH
15973: LD_INT 21
15975: PUSH
15976: LD_INT 24
15978: PUSH
15979: LD_INT 22
15981: PUSH
15982: LD_INT 25
15984: PUSH
15985: LD_INT 28
15987: PUSH
15988: LD_INT 29
15990: PUSH
15991: LD_INT 30
15993: PUSH
15994: LD_INT 31
15996: PUSH
15997: LD_INT 37
15999: PUSH
16000: LD_INT 38
16002: PUSH
16003: LD_INT 32
16005: PUSH
16006: LD_INT 27
16008: PUSH
16009: LD_INT 33
16011: PUSH
16012: LD_INT 69
16014: PUSH
16015: LD_INT 39
16017: PUSH
16018: LD_INT 34
16020: PUSH
16021: LD_INT 40
16023: PUSH
16024: LD_INT 71
16026: PUSH
16027: LD_INT 23
16029: PUSH
16030: LD_INT 44
16032: PUSH
16033: LD_INT 48
16035: PUSH
16036: LD_INT 49
16038: PUSH
16039: LD_INT 50
16041: PUSH
16042: LD_INT 51
16044: PUSH
16045: LD_INT 52
16047: PUSH
16048: LD_INT 53
16050: PUSH
16051: LD_INT 54
16053: PUSH
16054: LD_INT 55
16056: PUSH
16057: LD_INT 56
16059: PUSH
16060: LD_INT 57
16062: PUSH
16063: LD_INT 58
16065: PUSH
16066: LD_INT 59
16068: PUSH
16069: LD_INT 63
16071: PUSH
16072: LD_INT 64
16074: PUSH
16075: LD_INT 65
16077: PUSH
16078: LD_INT 82
16080: PUSH
16081: LD_INT 83
16083: PUSH
16084: LD_INT 84
16086: PUSH
16087: LD_INT 85
16089: PUSH
16090: LD_INT 86
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: ST_TO_ADDR
16148: GO 16151
16150: POP
// if state > - 1 and state < 3 then
16151: LD_VAR 0 3
16155: PUSH
16156: LD_INT 1
16158: NEG
16159: GREATER
16160: PUSH
16161: LD_VAR 0 3
16165: PUSH
16166: LD_INT 3
16168: LESS
16169: AND
16170: IFFALSE 16227
// for i in result do
16172: LD_ADDR_VAR 0 5
16176: PUSH
16177: LD_VAR 0 4
16181: PUSH
16182: FOR_IN
16183: IFFALSE 16225
// if GetTech ( i , side ) <> state then
16185: LD_VAR 0 5
16189: PPUSH
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL_OW 321
16199: PUSH
16200: LD_VAR 0 3
16204: NONEQUAL
16205: IFFALSE 16223
// result := result diff i ;
16207: LD_ADDR_VAR 0 4
16211: PUSH
16212: LD_VAR 0 4
16216: PUSH
16217: LD_VAR 0 5
16221: DIFF
16222: ST_TO_ADDR
16223: GO 16182
16225: POP
16226: POP
// end ;
16227: LD_VAR 0 4
16231: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16232: LD_INT 0
16234: PPUSH
16235: PPUSH
16236: PPUSH
// result := true ;
16237: LD_ADDR_VAR 0 3
16241: PUSH
16242: LD_INT 1
16244: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16245: LD_ADDR_VAR 0 5
16249: PUSH
16250: LD_VAR 0 2
16254: PPUSH
16255: CALL_OW 480
16259: ST_TO_ADDR
// if not tmp then
16260: LD_VAR 0 5
16264: NOT
16265: IFFALSE 16269
// exit ;
16267: GO 16318
// for i in tmp do
16269: LD_ADDR_VAR 0 4
16273: PUSH
16274: LD_VAR 0 5
16278: PUSH
16279: FOR_IN
16280: IFFALSE 16316
// if GetTech ( i , side ) <> state_researched then
16282: LD_VAR 0 4
16286: PPUSH
16287: LD_VAR 0 1
16291: PPUSH
16292: CALL_OW 321
16296: PUSH
16297: LD_INT 2
16299: NONEQUAL
16300: IFFALSE 16314
// begin result := false ;
16302: LD_ADDR_VAR 0 3
16306: PUSH
16307: LD_INT 0
16309: ST_TO_ADDR
// exit ;
16310: POP
16311: POP
16312: GO 16318
// end ;
16314: GO 16279
16316: POP
16317: POP
// end ;
16318: LD_VAR 0 3
16322: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16323: LD_INT 0
16325: PPUSH
16326: PPUSH
16327: PPUSH
16328: PPUSH
16329: PPUSH
16330: PPUSH
16331: PPUSH
16332: PPUSH
16333: PPUSH
16334: PPUSH
16335: PPUSH
16336: PPUSH
16337: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16338: LD_VAR 0 1
16342: NOT
16343: PUSH
16344: LD_VAR 0 1
16348: PPUSH
16349: CALL_OW 257
16353: PUSH
16354: LD_INT 9
16356: NONEQUAL
16357: OR
16358: IFFALSE 16362
// exit ;
16360: GO 16935
// side := GetSide ( unit ) ;
16362: LD_ADDR_VAR 0 9
16366: PUSH
16367: LD_VAR 0 1
16371: PPUSH
16372: CALL_OW 255
16376: ST_TO_ADDR
// tech_space := tech_spacanom ;
16377: LD_ADDR_VAR 0 12
16381: PUSH
16382: LD_INT 29
16384: ST_TO_ADDR
// tech_time := tech_taurad ;
16385: LD_ADDR_VAR 0 13
16389: PUSH
16390: LD_INT 28
16392: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16393: LD_ADDR_VAR 0 11
16397: PUSH
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 310
16407: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16408: LD_VAR 0 11
16412: PPUSH
16413: CALL_OW 247
16417: PUSH
16418: LD_INT 2
16420: EQUAL
16421: IFFALSE 16425
// exit ;
16423: GO 16935
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16425: LD_ADDR_VAR 0 8
16429: PUSH
16430: LD_INT 81
16432: PUSH
16433: LD_VAR 0 9
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 3
16444: PUSH
16445: LD_INT 21
16447: PUSH
16448: LD_INT 3
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PPUSH
16463: CALL_OW 69
16467: ST_TO_ADDR
// if not tmp then
16468: LD_VAR 0 8
16472: NOT
16473: IFFALSE 16477
// exit ;
16475: GO 16935
// if in_unit then
16477: LD_VAR 0 11
16481: IFFALSE 16505
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16483: LD_ADDR_VAR 0 10
16487: PUSH
16488: LD_VAR 0 8
16492: PPUSH
16493: LD_VAR 0 11
16497: PPUSH
16498: CALL_OW 74
16502: ST_TO_ADDR
16503: GO 16525
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16505: LD_ADDR_VAR 0 10
16509: PUSH
16510: LD_VAR 0 8
16514: PPUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: CALL_OW 74
16524: ST_TO_ADDR
// if not enemy then
16525: LD_VAR 0 10
16529: NOT
16530: IFFALSE 16534
// exit ;
16532: GO 16935
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16534: LD_VAR 0 11
16538: PUSH
16539: LD_VAR 0 11
16543: PPUSH
16544: LD_VAR 0 10
16548: PPUSH
16549: CALL_OW 296
16553: PUSH
16554: LD_INT 13
16556: GREATER
16557: AND
16558: PUSH
16559: LD_VAR 0 1
16563: PPUSH
16564: LD_VAR 0 10
16568: PPUSH
16569: CALL_OW 296
16573: PUSH
16574: LD_INT 12
16576: GREATER
16577: OR
16578: IFFALSE 16582
// exit ;
16580: GO 16935
// missile := [ 1 ] ;
16582: LD_ADDR_VAR 0 14
16586: PUSH
16587: LD_INT 1
16589: PUSH
16590: EMPTY
16591: LIST
16592: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16593: LD_VAR 0 9
16597: PPUSH
16598: LD_VAR 0 12
16602: PPUSH
16603: CALL_OW 325
16607: IFFALSE 16636
// missile := Replace ( missile , missile + 1 , 2 ) ;
16609: LD_ADDR_VAR 0 14
16613: PUSH
16614: LD_VAR 0 14
16618: PPUSH
16619: LD_VAR 0 14
16623: PUSH
16624: LD_INT 1
16626: PLUS
16627: PPUSH
16628: LD_INT 2
16630: PPUSH
16631: CALL_OW 1
16635: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16636: LD_VAR 0 9
16640: PPUSH
16641: LD_VAR 0 13
16645: PPUSH
16646: CALL_OW 325
16650: PUSH
16651: LD_VAR 0 10
16655: PPUSH
16656: CALL_OW 255
16660: PPUSH
16661: LD_VAR 0 13
16665: PPUSH
16666: CALL_OW 325
16670: NOT
16671: AND
16672: IFFALSE 16701
// missile := Replace ( missile , missile + 1 , 3 ) ;
16674: LD_ADDR_VAR 0 14
16678: PUSH
16679: LD_VAR 0 14
16683: PPUSH
16684: LD_VAR 0 14
16688: PUSH
16689: LD_INT 1
16691: PLUS
16692: PPUSH
16693: LD_INT 3
16695: PPUSH
16696: CALL_OW 1
16700: ST_TO_ADDR
// if missile < 2 then
16701: LD_VAR 0 14
16705: PUSH
16706: LD_INT 2
16708: LESS
16709: IFFALSE 16713
// exit ;
16711: GO 16935
// x := GetX ( enemy ) ;
16713: LD_ADDR_VAR 0 4
16717: PUSH
16718: LD_VAR 0 10
16722: PPUSH
16723: CALL_OW 250
16727: ST_TO_ADDR
// y := GetY ( enemy ) ;
16728: LD_ADDR_VAR 0 5
16732: PUSH
16733: LD_VAR 0 10
16737: PPUSH
16738: CALL_OW 251
16742: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16743: LD_ADDR_VAR 0 6
16747: PUSH
16748: LD_VAR 0 4
16752: PUSH
16753: LD_INT 1
16755: NEG
16756: PPUSH
16757: LD_INT 1
16759: PPUSH
16760: CALL_OW 12
16764: PLUS
16765: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16766: LD_ADDR_VAR 0 7
16770: PUSH
16771: LD_VAR 0 5
16775: PUSH
16776: LD_INT 1
16778: NEG
16779: PPUSH
16780: LD_INT 1
16782: PPUSH
16783: CALL_OW 12
16787: PLUS
16788: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16789: LD_VAR 0 6
16793: PPUSH
16794: LD_VAR 0 7
16798: PPUSH
16799: CALL_OW 488
16803: NOT
16804: IFFALSE 16826
// begin _x := x ;
16806: LD_ADDR_VAR 0 6
16810: PUSH
16811: LD_VAR 0 4
16815: ST_TO_ADDR
// _y := y ;
16816: LD_ADDR_VAR 0 7
16820: PUSH
16821: LD_VAR 0 5
16825: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16826: LD_ADDR_VAR 0 3
16830: PUSH
16831: LD_INT 1
16833: PPUSH
16834: LD_VAR 0 14
16838: PPUSH
16839: CALL_OW 12
16843: ST_TO_ADDR
// case i of 1 :
16844: LD_VAR 0 3
16848: PUSH
16849: LD_INT 1
16851: DOUBLE
16852: EQUAL
16853: IFTRUE 16857
16855: GO 16874
16857: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16858: LD_VAR 0 1
16862: PPUSH
16863: LD_VAR 0 10
16867: PPUSH
16868: CALL_OW 115
16872: GO 16935
16874: LD_INT 2
16876: DOUBLE
16877: EQUAL
16878: IFTRUE 16882
16880: GO 16904
16882: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16883: LD_VAR 0 1
16887: PPUSH
16888: LD_VAR 0 6
16892: PPUSH
16893: LD_VAR 0 7
16897: PPUSH
16898: CALL_OW 153
16902: GO 16935
16904: LD_INT 3
16906: DOUBLE
16907: EQUAL
16908: IFTRUE 16912
16910: GO 16934
16912: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16913: LD_VAR 0 1
16917: PPUSH
16918: LD_VAR 0 6
16922: PPUSH
16923: LD_VAR 0 7
16927: PPUSH
16928: CALL_OW 154
16932: GO 16935
16934: POP
// end ;
16935: LD_VAR 0 2
16939: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16940: LD_INT 0
16942: PPUSH
16943: PPUSH
16944: PPUSH
16945: PPUSH
16946: PPUSH
16947: PPUSH
// if not unit or not building then
16948: LD_VAR 0 1
16952: NOT
16953: PUSH
16954: LD_VAR 0 2
16958: NOT
16959: OR
16960: IFFALSE 16964
// exit ;
16962: GO 17122
// x := GetX ( building ) ;
16964: LD_ADDR_VAR 0 5
16968: PUSH
16969: LD_VAR 0 2
16973: PPUSH
16974: CALL_OW 250
16978: ST_TO_ADDR
// y := GetY ( building ) ;
16979: LD_ADDR_VAR 0 6
16983: PUSH
16984: LD_VAR 0 2
16988: PPUSH
16989: CALL_OW 251
16993: ST_TO_ADDR
// for i = 0 to 5 do
16994: LD_ADDR_VAR 0 4
16998: PUSH
16999: DOUBLE
17000: LD_INT 0
17002: DEC
17003: ST_TO_ADDR
17004: LD_INT 5
17006: PUSH
17007: FOR_TO
17008: IFFALSE 17120
// begin _x := ShiftX ( x , i , 3 ) ;
17010: LD_ADDR_VAR 0 7
17014: PUSH
17015: LD_VAR 0 5
17019: PPUSH
17020: LD_VAR 0 4
17024: PPUSH
17025: LD_INT 3
17027: PPUSH
17028: CALL_OW 272
17032: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17033: LD_ADDR_VAR 0 8
17037: PUSH
17038: LD_VAR 0 6
17042: PPUSH
17043: LD_VAR 0 4
17047: PPUSH
17048: LD_INT 3
17050: PPUSH
17051: CALL_OW 273
17055: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17056: LD_VAR 0 7
17060: PPUSH
17061: LD_VAR 0 8
17065: PPUSH
17066: CALL_OW 488
17070: NOT
17071: IFFALSE 17075
// continue ;
17073: GO 17007
// if HexInfo ( _x , _y ) = 0 then
17075: LD_VAR 0 7
17079: PPUSH
17080: LD_VAR 0 8
17084: PPUSH
17085: CALL_OW 428
17089: PUSH
17090: LD_INT 0
17092: EQUAL
17093: IFFALSE 17118
// begin ComMoveXY ( unit , _x , _y ) ;
17095: LD_VAR 0 1
17099: PPUSH
17100: LD_VAR 0 7
17104: PPUSH
17105: LD_VAR 0 8
17109: PPUSH
17110: CALL_OW 111
// exit ;
17114: POP
17115: POP
17116: GO 17122
// end ; end ;
17118: GO 17007
17120: POP
17121: POP
// end ;
17122: LD_VAR 0 3
17126: RET
// export function ScanBase ( side , base_area ) ; begin
17127: LD_INT 0
17129: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17130: LD_ADDR_VAR 0 3
17134: PUSH
17135: LD_VAR 0 2
17139: PPUSH
17140: LD_INT 81
17142: PUSH
17143: LD_VAR 0 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PPUSH
17152: CALL_OW 70
17156: ST_TO_ADDR
// end ;
17157: LD_VAR 0 3
17161: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17162: LD_INT 0
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
// result := false ;
17168: LD_ADDR_VAR 0 2
17172: PUSH
17173: LD_INT 0
17175: ST_TO_ADDR
// side := GetSide ( unit ) ;
17176: LD_ADDR_VAR 0 3
17180: PUSH
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL_OW 255
17190: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17191: LD_ADDR_VAR 0 4
17195: PUSH
17196: LD_VAR 0 1
17200: PPUSH
17201: CALL_OW 248
17205: ST_TO_ADDR
// case nat of 1 :
17206: LD_VAR 0 4
17210: PUSH
17211: LD_INT 1
17213: DOUBLE
17214: EQUAL
17215: IFTRUE 17219
17217: GO 17230
17219: POP
// tech := tech_lassight ; 2 :
17220: LD_ADDR_VAR 0 5
17224: PUSH
17225: LD_INT 12
17227: ST_TO_ADDR
17228: GO 17269
17230: LD_INT 2
17232: DOUBLE
17233: EQUAL
17234: IFTRUE 17238
17236: GO 17249
17238: POP
// tech := tech_mortar ; 3 :
17239: LD_ADDR_VAR 0 5
17243: PUSH
17244: LD_INT 41
17246: ST_TO_ADDR
17247: GO 17269
17249: LD_INT 3
17251: DOUBLE
17252: EQUAL
17253: IFTRUE 17257
17255: GO 17268
17257: POP
// tech := tech_bazooka ; end ;
17258: LD_ADDR_VAR 0 5
17262: PUSH
17263: LD_INT 44
17265: ST_TO_ADDR
17266: GO 17269
17268: POP
// if Researched ( side , tech ) then
17269: LD_VAR 0 3
17273: PPUSH
17274: LD_VAR 0 5
17278: PPUSH
17279: CALL_OW 325
17283: IFFALSE 17310
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17285: LD_ADDR_VAR 0 2
17289: PUSH
17290: LD_INT 5
17292: PUSH
17293: LD_INT 8
17295: PUSH
17296: LD_INT 9
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: LD_VAR 0 4
17308: ARRAY
17309: ST_TO_ADDR
// end ;
17310: LD_VAR 0 2
17314: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17315: LD_INT 0
17317: PPUSH
17318: PPUSH
17319: PPUSH
// if not mines then
17320: LD_VAR 0 2
17324: NOT
17325: IFFALSE 17329
// exit ;
17327: GO 17473
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17329: LD_ADDR_VAR 0 5
17333: PUSH
17334: LD_INT 81
17336: PUSH
17337: LD_VAR 0 1
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 3
17348: PUSH
17349: LD_INT 21
17351: PUSH
17352: LD_INT 3
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PPUSH
17367: CALL_OW 69
17371: ST_TO_ADDR
// for i in mines do
17372: LD_ADDR_VAR 0 4
17376: PUSH
17377: LD_VAR 0 2
17381: PUSH
17382: FOR_IN
17383: IFFALSE 17471
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17385: LD_VAR 0 4
17389: PUSH
17390: LD_INT 1
17392: ARRAY
17393: PPUSH
17394: LD_VAR 0 4
17398: PUSH
17399: LD_INT 2
17401: ARRAY
17402: PPUSH
17403: CALL_OW 458
17407: NOT
17408: IFFALSE 17412
// continue ;
17410: GO 17382
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17412: LD_VAR 0 4
17416: PUSH
17417: LD_INT 1
17419: ARRAY
17420: PPUSH
17421: LD_VAR 0 4
17425: PUSH
17426: LD_INT 2
17428: ARRAY
17429: PPUSH
17430: CALL_OW 428
17434: PUSH
17435: LD_VAR 0 5
17439: IN
17440: IFFALSE 17469
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17442: LD_VAR 0 4
17446: PUSH
17447: LD_INT 1
17449: ARRAY
17450: PPUSH
17451: LD_VAR 0 4
17455: PUSH
17456: LD_INT 2
17458: ARRAY
17459: PPUSH
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 456
// end ;
17469: GO 17382
17471: POP
17472: POP
// end ;
17473: LD_VAR 0 3
17477: RET
// export function Count ( array ) ; begin
17478: LD_INT 0
17480: PPUSH
// result := array + 0 ;
17481: LD_ADDR_VAR 0 2
17485: PUSH
17486: LD_VAR 0 1
17490: PUSH
17491: LD_INT 0
17493: PLUS
17494: ST_TO_ADDR
// end ;
17495: LD_VAR 0 2
17499: RET
// export function IsEmpty ( building ) ; begin
17500: LD_INT 0
17502: PPUSH
// if not building then
17503: LD_VAR 0 1
17507: NOT
17508: IFFALSE 17512
// exit ;
17510: GO 17555
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17512: LD_ADDR_VAR 0 2
17516: PUSH
17517: LD_VAR 0 1
17521: PUSH
17522: LD_INT 22
17524: PUSH
17525: LD_VAR 0 1
17529: PPUSH
17530: CALL_OW 255
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 58
17541: PUSH
17542: EMPTY
17543: LIST
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PPUSH
17549: CALL_OW 69
17553: IN
17554: ST_TO_ADDR
// end ;
17555: LD_VAR 0 2
17559: RET
// export function IsNotFull ( building ) ; var places ; begin
17560: LD_INT 0
17562: PPUSH
17563: PPUSH
// if not building then
17564: LD_VAR 0 1
17568: NOT
17569: IFFALSE 17573
// exit ;
17571: GO 17601
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17573: LD_ADDR_VAR 0 2
17577: PUSH
17578: LD_VAR 0 1
17582: PPUSH
17583: LD_INT 3
17585: PUSH
17586: LD_INT 62
17588: PUSH
17589: EMPTY
17590: LIST
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 72
17600: ST_TO_ADDR
// end ;
17601: LD_VAR 0 2
17605: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17606: LD_INT 0
17608: PPUSH
17609: PPUSH
17610: PPUSH
17611: PPUSH
// tmp := [ ] ;
17612: LD_ADDR_VAR 0 3
17616: PUSH
17617: EMPTY
17618: ST_TO_ADDR
// list := [ ] ;
17619: LD_ADDR_VAR 0 5
17623: PUSH
17624: EMPTY
17625: ST_TO_ADDR
// for i = 16 to 25 do
17626: LD_ADDR_VAR 0 4
17630: PUSH
17631: DOUBLE
17632: LD_INT 16
17634: DEC
17635: ST_TO_ADDR
17636: LD_INT 25
17638: PUSH
17639: FOR_TO
17640: IFFALSE 17713
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17642: LD_ADDR_VAR 0 3
17646: PUSH
17647: LD_VAR 0 3
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 255
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 91
17671: PUSH
17672: LD_VAR 0 1
17676: PUSH
17677: LD_INT 6
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 30
17687: PUSH
17688: LD_VAR 0 4
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: PUSH
17702: EMPTY
17703: LIST
17704: PPUSH
17705: CALL_OW 69
17709: ADD
17710: ST_TO_ADDR
17711: GO 17639
17713: POP
17714: POP
// for i = 1 to tmp do
17715: LD_ADDR_VAR 0 4
17719: PUSH
17720: DOUBLE
17721: LD_INT 1
17723: DEC
17724: ST_TO_ADDR
17725: LD_VAR 0 3
17729: PUSH
17730: FOR_TO
17731: IFFALSE 17819
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17733: LD_ADDR_VAR 0 5
17737: PUSH
17738: LD_VAR 0 5
17742: PUSH
17743: LD_VAR 0 3
17747: PUSH
17748: LD_VAR 0 4
17752: ARRAY
17753: PPUSH
17754: CALL_OW 266
17758: PUSH
17759: LD_VAR 0 3
17763: PUSH
17764: LD_VAR 0 4
17768: ARRAY
17769: PPUSH
17770: CALL_OW 250
17774: PUSH
17775: LD_VAR 0 3
17779: PUSH
17780: LD_VAR 0 4
17784: ARRAY
17785: PPUSH
17786: CALL_OW 251
17790: PUSH
17791: LD_VAR 0 3
17795: PUSH
17796: LD_VAR 0 4
17800: ARRAY
17801: PPUSH
17802: CALL_OW 254
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: PUSH
17813: EMPTY
17814: LIST
17815: ADD
17816: ST_TO_ADDR
17817: GO 17730
17819: POP
17820: POP
// result := list ;
17821: LD_ADDR_VAR 0 2
17825: PUSH
17826: LD_VAR 0 5
17830: ST_TO_ADDR
// end ;
17831: LD_VAR 0 2
17835: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17836: LD_INT 0
17838: PPUSH
17839: PPUSH
17840: PPUSH
17841: PPUSH
17842: PPUSH
17843: PPUSH
17844: PPUSH
// if not factory then
17845: LD_VAR 0 1
17849: NOT
17850: IFFALSE 17854
// exit ;
17852: GO 18447
// if control = control_apeman then
17854: LD_VAR 0 4
17858: PUSH
17859: LD_INT 5
17861: EQUAL
17862: IFFALSE 17971
// begin tmp := UnitsInside ( factory ) ;
17864: LD_ADDR_VAR 0 8
17868: PUSH
17869: LD_VAR 0 1
17873: PPUSH
17874: CALL_OW 313
17878: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17879: LD_VAR 0 8
17883: PPUSH
17884: LD_INT 25
17886: PUSH
17887: LD_INT 12
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PPUSH
17894: CALL_OW 72
17898: NOT
17899: IFFALSE 17909
// control := control_manual ;
17901: LD_ADDR_VAR 0 4
17905: PUSH
17906: LD_INT 1
17908: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17909: LD_ADDR_VAR 0 8
17913: PUSH
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL 17606 0 1
17923: ST_TO_ADDR
// if tmp then
17924: LD_VAR 0 8
17928: IFFALSE 17971
// begin for i in tmp do
17930: LD_ADDR_VAR 0 7
17934: PUSH
17935: LD_VAR 0 8
17939: PUSH
17940: FOR_IN
17941: IFFALSE 17969
// if i [ 1 ] = b_ext_radio then
17943: LD_VAR 0 7
17947: PUSH
17948: LD_INT 1
17950: ARRAY
17951: PUSH
17952: LD_INT 22
17954: EQUAL
17955: IFFALSE 17967
// begin control := control_remote ;
17957: LD_ADDR_VAR 0 4
17961: PUSH
17962: LD_INT 2
17964: ST_TO_ADDR
// break ;
17965: GO 17969
// end ;
17967: GO 17940
17969: POP
17970: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17971: LD_VAR 0 1
17975: PPUSH
17976: LD_VAR 0 2
17980: PPUSH
17981: LD_VAR 0 3
17985: PPUSH
17986: LD_VAR 0 4
17990: PPUSH
17991: LD_VAR 0 5
17995: PPUSH
17996: CALL_OW 448
18000: IFFALSE 18035
// begin result := [ chassis , engine , control , weapon ] ;
18002: LD_ADDR_VAR 0 6
18006: PUSH
18007: LD_VAR 0 2
18011: PUSH
18012: LD_VAR 0 3
18016: PUSH
18017: LD_VAR 0 4
18021: PUSH
18022: LD_VAR 0 5
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: ST_TO_ADDR
// exit ;
18033: GO 18447
// end ; _chassis := AvailableChassisList ( factory ) ;
18035: LD_ADDR_VAR 0 9
18039: PUSH
18040: LD_VAR 0 1
18044: PPUSH
18045: CALL_OW 475
18049: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18050: LD_ADDR_VAR 0 11
18054: PUSH
18055: LD_VAR 0 1
18059: PPUSH
18060: CALL_OW 476
18064: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18065: LD_ADDR_VAR 0 12
18069: PUSH
18070: LD_VAR 0 1
18074: PPUSH
18075: CALL_OW 477
18079: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18080: LD_ADDR_VAR 0 10
18084: PUSH
18085: LD_VAR 0 1
18089: PPUSH
18090: CALL_OW 478
18094: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18095: LD_VAR 0 9
18099: NOT
18100: PUSH
18101: LD_VAR 0 11
18105: NOT
18106: OR
18107: PUSH
18108: LD_VAR 0 12
18112: NOT
18113: OR
18114: PUSH
18115: LD_VAR 0 10
18119: NOT
18120: OR
18121: IFFALSE 18156
// begin result := [ chassis , engine , control , weapon ] ;
18123: LD_ADDR_VAR 0 6
18127: PUSH
18128: LD_VAR 0 2
18132: PUSH
18133: LD_VAR 0 3
18137: PUSH
18138: LD_VAR 0 4
18142: PUSH
18143: LD_VAR 0 5
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: ST_TO_ADDR
// exit ;
18154: GO 18447
// end ; if not chassis in _chassis then
18156: LD_VAR 0 2
18160: PUSH
18161: LD_VAR 0 9
18165: IN
18166: NOT
18167: IFFALSE 18193
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18169: LD_ADDR_VAR 0 2
18173: PUSH
18174: LD_VAR 0 9
18178: PUSH
18179: LD_INT 1
18181: PPUSH
18182: LD_VAR 0 9
18186: PPUSH
18187: CALL_OW 12
18191: ARRAY
18192: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18193: LD_VAR 0 2
18197: PPUSH
18198: LD_VAR 0 3
18202: PPUSH
18203: CALL 18452 0 2
18207: NOT
18208: IFFALSE 18267
// repeat engine := _engine [ 1 ] ;
18210: LD_ADDR_VAR 0 3
18214: PUSH
18215: LD_VAR 0 11
18219: PUSH
18220: LD_INT 1
18222: ARRAY
18223: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18224: LD_ADDR_VAR 0 11
18228: PUSH
18229: LD_VAR 0 11
18233: PPUSH
18234: LD_INT 1
18236: PPUSH
18237: CALL_OW 3
18241: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18242: LD_VAR 0 2
18246: PPUSH
18247: LD_VAR 0 3
18251: PPUSH
18252: CALL 18452 0 2
18256: PUSH
18257: LD_VAR 0 11
18261: PUSH
18262: EMPTY
18263: EQUAL
18264: OR
18265: IFFALSE 18210
// if not control in _control then
18267: LD_VAR 0 4
18271: PUSH
18272: LD_VAR 0 12
18276: IN
18277: NOT
18278: IFFALSE 18304
// control := _control [ rand ( 1 , _control ) ] ;
18280: LD_ADDR_VAR 0 4
18284: PUSH
18285: LD_VAR 0 12
18289: PUSH
18290: LD_INT 1
18292: PPUSH
18293: LD_VAR 0 12
18297: PPUSH
18298: CALL_OW 12
18302: ARRAY
18303: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18304: LD_VAR 0 2
18308: PPUSH
18309: LD_VAR 0 5
18313: PPUSH
18314: CALL 18672 0 2
18318: NOT
18319: IFFALSE 18378
// repeat weapon := _weapon [ 1 ] ;
18321: LD_ADDR_VAR 0 5
18325: PUSH
18326: LD_VAR 0 10
18330: PUSH
18331: LD_INT 1
18333: ARRAY
18334: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18335: LD_ADDR_VAR 0 10
18339: PUSH
18340: LD_VAR 0 10
18344: PPUSH
18345: LD_INT 1
18347: PPUSH
18348: CALL_OW 3
18352: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18353: LD_VAR 0 2
18357: PPUSH
18358: LD_VAR 0 5
18362: PPUSH
18363: CALL 18672 0 2
18367: PUSH
18368: LD_VAR 0 10
18372: PUSH
18373: EMPTY
18374: EQUAL
18375: OR
18376: IFFALSE 18321
// result := [ ] ;
18378: LD_ADDR_VAR 0 6
18382: PUSH
18383: EMPTY
18384: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18385: LD_VAR 0 1
18389: PPUSH
18390: LD_VAR 0 2
18394: PPUSH
18395: LD_VAR 0 3
18399: PPUSH
18400: LD_VAR 0 4
18404: PPUSH
18405: LD_VAR 0 5
18409: PPUSH
18410: CALL_OW 448
18414: IFFALSE 18447
// result := [ chassis , engine , control , weapon ] ;
18416: LD_ADDR_VAR 0 6
18420: PUSH
18421: LD_VAR 0 2
18425: PUSH
18426: LD_VAR 0 3
18430: PUSH
18431: LD_VAR 0 4
18435: PUSH
18436: LD_VAR 0 5
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: ST_TO_ADDR
// end ;
18447: LD_VAR 0 6
18451: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18452: LD_INT 0
18454: PPUSH
// if not chassis or not engine then
18455: LD_VAR 0 1
18459: NOT
18460: PUSH
18461: LD_VAR 0 2
18465: NOT
18466: OR
18467: IFFALSE 18471
// exit ;
18469: GO 18667
// case engine of engine_solar :
18471: LD_VAR 0 2
18475: PUSH
18476: LD_INT 2
18478: DOUBLE
18479: EQUAL
18480: IFTRUE 18484
18482: GO 18522
18484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18485: LD_ADDR_VAR 0 3
18489: PUSH
18490: LD_INT 11
18492: PUSH
18493: LD_INT 12
18495: PUSH
18496: LD_INT 13
18498: PUSH
18499: LD_INT 14
18501: PUSH
18502: LD_INT 1
18504: PUSH
18505: LD_INT 2
18507: PUSH
18508: LD_INT 3
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: ST_TO_ADDR
18520: GO 18651
18522: LD_INT 1
18524: DOUBLE
18525: EQUAL
18526: IFTRUE 18530
18528: GO 18592
18530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18531: LD_ADDR_VAR 0 3
18535: PUSH
18536: LD_INT 11
18538: PUSH
18539: LD_INT 12
18541: PUSH
18542: LD_INT 13
18544: PUSH
18545: LD_INT 14
18547: PUSH
18548: LD_INT 1
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: LD_INT 3
18556: PUSH
18557: LD_INT 4
18559: PUSH
18560: LD_INT 5
18562: PUSH
18563: LD_INT 21
18565: PUSH
18566: LD_INT 23
18568: PUSH
18569: LD_INT 22
18571: PUSH
18572: LD_INT 24
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: ST_TO_ADDR
18590: GO 18651
18592: LD_INT 3
18594: DOUBLE
18595: EQUAL
18596: IFTRUE 18600
18598: GO 18650
18600: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18601: LD_ADDR_VAR 0 3
18605: PUSH
18606: LD_INT 13
18608: PUSH
18609: LD_INT 14
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: LD_INT 3
18617: PUSH
18618: LD_INT 4
18620: PUSH
18621: LD_INT 5
18623: PUSH
18624: LD_INT 21
18626: PUSH
18627: LD_INT 22
18629: PUSH
18630: LD_INT 23
18632: PUSH
18633: LD_INT 24
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: ST_TO_ADDR
18648: GO 18651
18650: POP
// result := ( chassis in result ) ;
18651: LD_ADDR_VAR 0 3
18655: PUSH
18656: LD_VAR 0 1
18660: PUSH
18661: LD_VAR 0 3
18665: IN
18666: ST_TO_ADDR
// end ;
18667: LD_VAR 0 3
18671: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18672: LD_INT 0
18674: PPUSH
// if not chassis or not weapon then
18675: LD_VAR 0 1
18679: NOT
18680: PUSH
18681: LD_VAR 0 2
18685: NOT
18686: OR
18687: IFFALSE 18691
// exit ;
18689: GO 19751
// case weapon of us_machine_gun :
18691: LD_VAR 0 2
18695: PUSH
18696: LD_INT 2
18698: DOUBLE
18699: EQUAL
18700: IFTRUE 18704
18702: GO 18734
18704: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18705: LD_ADDR_VAR 0 3
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: LD_INT 2
18715: PUSH
18716: LD_INT 3
18718: PUSH
18719: LD_INT 4
18721: PUSH
18722: LD_INT 5
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: ST_TO_ADDR
18732: GO 19735
18734: LD_INT 3
18736: DOUBLE
18737: EQUAL
18738: IFTRUE 18742
18740: GO 18772
18742: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18743: LD_ADDR_VAR 0 3
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: LD_INT 3
18756: PUSH
18757: LD_INT 4
18759: PUSH
18760: LD_INT 5
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: ST_TO_ADDR
18770: GO 19735
18772: LD_INT 11
18774: DOUBLE
18775: EQUAL
18776: IFTRUE 18780
18778: GO 18810
18780: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18781: LD_ADDR_VAR 0 3
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: LD_INT 2
18791: PUSH
18792: LD_INT 3
18794: PUSH
18795: LD_INT 4
18797: PUSH
18798: LD_INT 5
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: ST_TO_ADDR
18808: GO 19735
18810: LD_INT 4
18812: DOUBLE
18813: EQUAL
18814: IFTRUE 18818
18816: GO 18844
18818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18819: LD_ADDR_VAR 0 3
18823: PUSH
18824: LD_INT 2
18826: PUSH
18827: LD_INT 3
18829: PUSH
18830: LD_INT 4
18832: PUSH
18833: LD_INT 5
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: ST_TO_ADDR
18842: GO 19735
18844: LD_INT 5
18846: DOUBLE
18847: EQUAL
18848: IFTRUE 18852
18850: GO 18878
18852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18853: LD_ADDR_VAR 0 3
18857: PUSH
18858: LD_INT 2
18860: PUSH
18861: LD_INT 3
18863: PUSH
18864: LD_INT 4
18866: PUSH
18867: LD_INT 5
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: ST_TO_ADDR
18876: GO 19735
18878: LD_INT 9
18880: DOUBLE
18881: EQUAL
18882: IFTRUE 18886
18884: GO 18912
18886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18887: LD_ADDR_VAR 0 3
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: LD_INT 3
18897: PUSH
18898: LD_INT 4
18900: PUSH
18901: LD_INT 5
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: ST_TO_ADDR
18910: GO 19735
18912: LD_INT 7
18914: DOUBLE
18915: EQUAL
18916: IFTRUE 18920
18918: GO 18946
18920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18921: LD_ADDR_VAR 0 3
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: LD_INT 3
18931: PUSH
18932: LD_INT 4
18934: PUSH
18935: LD_INT 5
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: ST_TO_ADDR
18944: GO 19735
18946: LD_INT 12
18948: DOUBLE
18949: EQUAL
18950: IFTRUE 18954
18952: GO 18980
18954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18955: LD_ADDR_VAR 0 3
18959: PUSH
18960: LD_INT 2
18962: PUSH
18963: LD_INT 3
18965: PUSH
18966: LD_INT 4
18968: PUSH
18969: LD_INT 5
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: ST_TO_ADDR
18978: GO 19735
18980: LD_INT 13
18982: DOUBLE
18983: EQUAL
18984: IFTRUE 18988
18986: GO 19014
18988: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18989: LD_ADDR_VAR 0 3
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: LD_INT 3
18999: PUSH
19000: LD_INT 4
19002: PUSH
19003: LD_INT 5
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: ST_TO_ADDR
19012: GO 19735
19014: LD_INT 14
19016: DOUBLE
19017: EQUAL
19018: IFTRUE 19022
19020: GO 19040
19022: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19023: LD_ADDR_VAR 0 3
19027: PUSH
19028: LD_INT 4
19030: PUSH
19031: LD_INT 5
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: ST_TO_ADDR
19038: GO 19735
19040: LD_INT 6
19042: DOUBLE
19043: EQUAL
19044: IFTRUE 19048
19046: GO 19066
19048: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19049: LD_ADDR_VAR 0 3
19053: PUSH
19054: LD_INT 4
19056: PUSH
19057: LD_INT 5
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: ST_TO_ADDR
19064: GO 19735
19066: LD_INT 10
19068: DOUBLE
19069: EQUAL
19070: IFTRUE 19074
19072: GO 19092
19074: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19075: LD_ADDR_VAR 0 3
19079: PUSH
19080: LD_INT 4
19082: PUSH
19083: LD_INT 5
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: ST_TO_ADDR
19090: GO 19735
19092: LD_INT 22
19094: DOUBLE
19095: EQUAL
19096: IFTRUE 19100
19098: GO 19126
19100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19101: LD_ADDR_VAR 0 3
19105: PUSH
19106: LD_INT 11
19108: PUSH
19109: LD_INT 12
19111: PUSH
19112: LD_INT 13
19114: PUSH
19115: LD_INT 14
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: ST_TO_ADDR
19124: GO 19735
19126: LD_INT 23
19128: DOUBLE
19129: EQUAL
19130: IFTRUE 19134
19132: GO 19160
19134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19135: LD_ADDR_VAR 0 3
19139: PUSH
19140: LD_INT 11
19142: PUSH
19143: LD_INT 12
19145: PUSH
19146: LD_INT 13
19148: PUSH
19149: LD_INT 14
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: ST_TO_ADDR
19158: GO 19735
19160: LD_INT 24
19162: DOUBLE
19163: EQUAL
19164: IFTRUE 19168
19166: GO 19194
19168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19169: LD_ADDR_VAR 0 3
19173: PUSH
19174: LD_INT 11
19176: PUSH
19177: LD_INT 12
19179: PUSH
19180: LD_INT 13
19182: PUSH
19183: LD_INT 14
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: ST_TO_ADDR
19192: GO 19735
19194: LD_INT 30
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19202
19200: GO 19228
19202: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19203: LD_ADDR_VAR 0 3
19207: PUSH
19208: LD_INT 11
19210: PUSH
19211: LD_INT 12
19213: PUSH
19214: LD_INT 13
19216: PUSH
19217: LD_INT 14
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: ST_TO_ADDR
19226: GO 19735
19228: LD_INT 25
19230: DOUBLE
19231: EQUAL
19232: IFTRUE 19236
19234: GO 19254
19236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19237: LD_ADDR_VAR 0 3
19241: PUSH
19242: LD_INT 13
19244: PUSH
19245: LD_INT 14
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: ST_TO_ADDR
19252: GO 19735
19254: LD_INT 27
19256: DOUBLE
19257: EQUAL
19258: IFTRUE 19262
19260: GO 19280
19262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19263: LD_ADDR_VAR 0 3
19267: PUSH
19268: LD_INT 13
19270: PUSH
19271: LD_INT 14
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: ST_TO_ADDR
19278: GO 19735
19280: LD_INT 92
19282: DOUBLE
19283: EQUAL
19284: IFTRUE 19288
19286: GO 19314
19288: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19289: LD_ADDR_VAR 0 3
19293: PUSH
19294: LD_INT 11
19296: PUSH
19297: LD_INT 12
19299: PUSH
19300: LD_INT 13
19302: PUSH
19303: LD_INT 14
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: ST_TO_ADDR
19312: GO 19735
19314: LD_INT 28
19316: DOUBLE
19317: EQUAL
19318: IFTRUE 19322
19320: GO 19340
19322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19323: LD_ADDR_VAR 0 3
19327: PUSH
19328: LD_INT 13
19330: PUSH
19331: LD_INT 14
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: ST_TO_ADDR
19338: GO 19735
19340: LD_INT 29
19342: DOUBLE
19343: EQUAL
19344: IFTRUE 19348
19346: GO 19366
19348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19349: LD_ADDR_VAR 0 3
19353: PUSH
19354: LD_INT 13
19356: PUSH
19357: LD_INT 14
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: ST_TO_ADDR
19364: GO 19735
19366: LD_INT 31
19368: DOUBLE
19369: EQUAL
19370: IFTRUE 19374
19372: GO 19392
19374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19375: LD_ADDR_VAR 0 3
19379: PUSH
19380: LD_INT 13
19382: PUSH
19383: LD_INT 14
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: ST_TO_ADDR
19390: GO 19735
19392: LD_INT 26
19394: DOUBLE
19395: EQUAL
19396: IFTRUE 19400
19398: GO 19418
19400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19401: LD_ADDR_VAR 0 3
19405: PUSH
19406: LD_INT 13
19408: PUSH
19409: LD_INT 14
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: ST_TO_ADDR
19416: GO 19735
19418: LD_INT 42
19420: DOUBLE
19421: EQUAL
19422: IFTRUE 19426
19424: GO 19452
19426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19427: LD_ADDR_VAR 0 3
19431: PUSH
19432: LD_INT 21
19434: PUSH
19435: LD_INT 22
19437: PUSH
19438: LD_INT 23
19440: PUSH
19441: LD_INT 24
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: ST_TO_ADDR
19450: GO 19735
19452: LD_INT 43
19454: DOUBLE
19455: EQUAL
19456: IFTRUE 19460
19458: GO 19486
19460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19461: LD_ADDR_VAR 0 3
19465: PUSH
19466: LD_INT 21
19468: PUSH
19469: LD_INT 22
19471: PUSH
19472: LD_INT 23
19474: PUSH
19475: LD_INT 24
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: ST_TO_ADDR
19484: GO 19735
19486: LD_INT 44
19488: DOUBLE
19489: EQUAL
19490: IFTRUE 19494
19492: GO 19520
19494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19495: LD_ADDR_VAR 0 3
19499: PUSH
19500: LD_INT 21
19502: PUSH
19503: LD_INT 22
19505: PUSH
19506: LD_INT 23
19508: PUSH
19509: LD_INT 24
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: ST_TO_ADDR
19518: GO 19735
19520: LD_INT 45
19522: DOUBLE
19523: EQUAL
19524: IFTRUE 19528
19526: GO 19554
19528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19529: LD_ADDR_VAR 0 3
19533: PUSH
19534: LD_INT 21
19536: PUSH
19537: LD_INT 22
19539: PUSH
19540: LD_INT 23
19542: PUSH
19543: LD_INT 24
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: ST_TO_ADDR
19552: GO 19735
19554: LD_INT 49
19556: DOUBLE
19557: EQUAL
19558: IFTRUE 19562
19560: GO 19588
19562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19563: LD_ADDR_VAR 0 3
19567: PUSH
19568: LD_INT 21
19570: PUSH
19571: LD_INT 22
19573: PUSH
19574: LD_INT 23
19576: PUSH
19577: LD_INT 24
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: ST_TO_ADDR
19586: GO 19735
19588: LD_INT 51
19590: DOUBLE
19591: EQUAL
19592: IFTRUE 19596
19594: GO 19622
19596: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19597: LD_ADDR_VAR 0 3
19601: PUSH
19602: LD_INT 21
19604: PUSH
19605: LD_INT 22
19607: PUSH
19608: LD_INT 23
19610: PUSH
19611: LD_INT 24
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: ST_TO_ADDR
19620: GO 19735
19622: LD_INT 52
19624: DOUBLE
19625: EQUAL
19626: IFTRUE 19630
19628: GO 19656
19630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19631: LD_ADDR_VAR 0 3
19635: PUSH
19636: LD_INT 21
19638: PUSH
19639: LD_INT 22
19641: PUSH
19642: LD_INT 23
19644: PUSH
19645: LD_INT 24
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: ST_TO_ADDR
19654: GO 19735
19656: LD_INT 53
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19682
19664: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19665: LD_ADDR_VAR 0 3
19669: PUSH
19670: LD_INT 23
19672: PUSH
19673: LD_INT 24
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: ST_TO_ADDR
19680: GO 19735
19682: LD_INT 46
19684: DOUBLE
19685: EQUAL
19686: IFTRUE 19690
19688: GO 19708
19690: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19691: LD_ADDR_VAR 0 3
19695: PUSH
19696: LD_INT 23
19698: PUSH
19699: LD_INT 24
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: ST_TO_ADDR
19706: GO 19735
19708: LD_INT 47
19710: DOUBLE
19711: EQUAL
19712: IFTRUE 19716
19714: GO 19734
19716: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19717: LD_ADDR_VAR 0 3
19721: PUSH
19722: LD_INT 23
19724: PUSH
19725: LD_INT 24
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: ST_TO_ADDR
19732: GO 19735
19734: POP
// result := ( chassis in result ) ;
19735: LD_ADDR_VAR 0 3
19739: PUSH
19740: LD_VAR 0 1
19744: PUSH
19745: LD_VAR 0 3
19749: IN
19750: ST_TO_ADDR
// end ;
19751: LD_VAR 0 3
19755: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19756: LD_INT 0
19758: PPUSH
19759: PPUSH
19760: PPUSH
19761: PPUSH
19762: PPUSH
19763: PPUSH
19764: PPUSH
// result := array ;
19765: LD_ADDR_VAR 0 5
19769: PUSH
19770: LD_VAR 0 1
19774: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19775: LD_VAR 0 1
19779: NOT
19780: PUSH
19781: LD_VAR 0 2
19785: NOT
19786: OR
19787: PUSH
19788: LD_VAR 0 3
19792: NOT
19793: OR
19794: PUSH
19795: LD_VAR 0 2
19799: PUSH
19800: LD_VAR 0 1
19804: GREATER
19805: OR
19806: PUSH
19807: LD_VAR 0 3
19811: PUSH
19812: LD_VAR 0 1
19816: GREATER
19817: OR
19818: IFFALSE 19822
// exit ;
19820: GO 20118
// if direction then
19822: LD_VAR 0 4
19826: IFFALSE 19890
// begin d := 1 ;
19828: LD_ADDR_VAR 0 9
19832: PUSH
19833: LD_INT 1
19835: ST_TO_ADDR
// if i_from > i_to then
19836: LD_VAR 0 2
19840: PUSH
19841: LD_VAR 0 3
19845: GREATER
19846: IFFALSE 19872
// length := ( array - i_from ) + i_to else
19848: LD_ADDR_VAR 0 11
19852: PUSH
19853: LD_VAR 0 1
19857: PUSH
19858: LD_VAR 0 2
19862: MINUS
19863: PUSH
19864: LD_VAR 0 3
19868: PLUS
19869: ST_TO_ADDR
19870: GO 19888
// length := i_to - i_from ;
19872: LD_ADDR_VAR 0 11
19876: PUSH
19877: LD_VAR 0 3
19881: PUSH
19882: LD_VAR 0 2
19886: MINUS
19887: ST_TO_ADDR
// end else
19888: GO 19951
// begin d := - 1 ;
19890: LD_ADDR_VAR 0 9
19894: PUSH
19895: LD_INT 1
19897: NEG
19898: ST_TO_ADDR
// if i_from > i_to then
19899: LD_VAR 0 2
19903: PUSH
19904: LD_VAR 0 3
19908: GREATER
19909: IFFALSE 19929
// length := i_from - i_to else
19911: LD_ADDR_VAR 0 11
19915: PUSH
19916: LD_VAR 0 2
19920: PUSH
19921: LD_VAR 0 3
19925: MINUS
19926: ST_TO_ADDR
19927: GO 19951
// length := ( array - i_to ) + i_from ;
19929: LD_ADDR_VAR 0 11
19933: PUSH
19934: LD_VAR 0 1
19938: PUSH
19939: LD_VAR 0 3
19943: MINUS
19944: PUSH
19945: LD_VAR 0 2
19949: PLUS
19950: ST_TO_ADDR
// end ; if not length then
19951: LD_VAR 0 11
19955: NOT
19956: IFFALSE 19960
// exit ;
19958: GO 20118
// tmp := array ;
19960: LD_ADDR_VAR 0 10
19964: PUSH
19965: LD_VAR 0 1
19969: ST_TO_ADDR
// for i = 1 to length do
19970: LD_ADDR_VAR 0 6
19974: PUSH
19975: DOUBLE
19976: LD_INT 1
19978: DEC
19979: ST_TO_ADDR
19980: LD_VAR 0 11
19984: PUSH
19985: FOR_TO
19986: IFFALSE 20106
// begin for j = 1 to array do
19988: LD_ADDR_VAR 0 7
19992: PUSH
19993: DOUBLE
19994: LD_INT 1
19996: DEC
19997: ST_TO_ADDR
19998: LD_VAR 0 1
20002: PUSH
20003: FOR_TO
20004: IFFALSE 20092
// begin k := j + d ;
20006: LD_ADDR_VAR 0 8
20010: PUSH
20011: LD_VAR 0 7
20015: PUSH
20016: LD_VAR 0 9
20020: PLUS
20021: ST_TO_ADDR
// if k > array then
20022: LD_VAR 0 8
20026: PUSH
20027: LD_VAR 0 1
20031: GREATER
20032: IFFALSE 20042
// k := 1 ;
20034: LD_ADDR_VAR 0 8
20038: PUSH
20039: LD_INT 1
20041: ST_TO_ADDR
// if not k then
20042: LD_VAR 0 8
20046: NOT
20047: IFFALSE 20059
// k := array ;
20049: LD_ADDR_VAR 0 8
20053: PUSH
20054: LD_VAR 0 1
20058: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20059: LD_ADDR_VAR 0 10
20063: PUSH
20064: LD_VAR 0 10
20068: PPUSH
20069: LD_VAR 0 8
20073: PPUSH
20074: LD_VAR 0 1
20078: PUSH
20079: LD_VAR 0 7
20083: ARRAY
20084: PPUSH
20085: CALL_OW 1
20089: ST_TO_ADDR
// end ;
20090: GO 20003
20092: POP
20093: POP
// array := tmp ;
20094: LD_ADDR_VAR 0 1
20098: PUSH
20099: LD_VAR 0 10
20103: ST_TO_ADDR
// end ;
20104: GO 19985
20106: POP
20107: POP
// result := array ;
20108: LD_ADDR_VAR 0 5
20112: PUSH
20113: LD_VAR 0 1
20117: ST_TO_ADDR
// end ;
20118: LD_VAR 0 5
20122: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20123: LD_INT 0
20125: PPUSH
20126: PPUSH
// result := 0 ;
20127: LD_ADDR_VAR 0 3
20131: PUSH
20132: LD_INT 0
20134: ST_TO_ADDR
// if not array or not value in array then
20135: LD_VAR 0 1
20139: NOT
20140: PUSH
20141: LD_VAR 0 2
20145: PUSH
20146: LD_VAR 0 1
20150: IN
20151: NOT
20152: OR
20153: IFFALSE 20157
// exit ;
20155: GO 20211
// for i = 1 to array do
20157: LD_ADDR_VAR 0 4
20161: PUSH
20162: DOUBLE
20163: LD_INT 1
20165: DEC
20166: ST_TO_ADDR
20167: LD_VAR 0 1
20171: PUSH
20172: FOR_TO
20173: IFFALSE 20209
// if value = array [ i ] then
20175: LD_VAR 0 2
20179: PUSH
20180: LD_VAR 0 1
20184: PUSH
20185: LD_VAR 0 4
20189: ARRAY
20190: EQUAL
20191: IFFALSE 20207
// begin result := i ;
20193: LD_ADDR_VAR 0 3
20197: PUSH
20198: LD_VAR 0 4
20202: ST_TO_ADDR
// exit ;
20203: POP
20204: POP
20205: GO 20211
// end ;
20207: GO 20172
20209: POP
20210: POP
// end ;
20211: LD_VAR 0 3
20215: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20216: LD_INT 0
20218: PPUSH
// vc_chassis := chassis ;
20219: LD_ADDR_OWVAR 37
20223: PUSH
20224: LD_VAR 0 1
20228: ST_TO_ADDR
// vc_engine := engine ;
20229: LD_ADDR_OWVAR 39
20233: PUSH
20234: LD_VAR 0 2
20238: ST_TO_ADDR
// vc_control := control ;
20239: LD_ADDR_OWVAR 38
20243: PUSH
20244: LD_VAR 0 3
20248: ST_TO_ADDR
// vc_weapon := weapon ;
20249: LD_ADDR_OWVAR 40
20253: PUSH
20254: LD_VAR 0 4
20258: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20259: LD_ADDR_OWVAR 41
20263: PUSH
20264: LD_VAR 0 5
20268: ST_TO_ADDR
// end ;
20269: LD_VAR 0 6
20273: RET
// export function WantPlant ( unit ) ; var task ; begin
20274: LD_INT 0
20276: PPUSH
20277: PPUSH
// result := false ;
20278: LD_ADDR_VAR 0 2
20282: PUSH
20283: LD_INT 0
20285: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20286: LD_ADDR_VAR 0 3
20290: PUSH
20291: LD_VAR 0 1
20295: PPUSH
20296: CALL_OW 437
20300: ST_TO_ADDR
// if task then
20301: LD_VAR 0 3
20305: IFFALSE 20333
// if task [ 1 ] [ 1 ] = p then
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 1
20314: ARRAY
20315: PUSH
20316: LD_INT 1
20318: ARRAY
20319: PUSH
20320: LD_STRING p
20322: EQUAL
20323: IFFALSE 20333
// result := true ;
20325: LD_ADDR_VAR 0 2
20329: PUSH
20330: LD_INT 1
20332: ST_TO_ADDR
// end ;
20333: LD_VAR 0 2
20337: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20338: LD_INT 0
20340: PPUSH
20341: PPUSH
20342: PPUSH
20343: PPUSH
// if pos < 1 then
20344: LD_VAR 0 2
20348: PUSH
20349: LD_INT 1
20351: LESS
20352: IFFALSE 20356
// exit ;
20354: GO 20659
// if pos = 1 then
20356: LD_VAR 0 2
20360: PUSH
20361: LD_INT 1
20363: EQUAL
20364: IFFALSE 20397
// result := Replace ( arr , pos [ 1 ] , value ) else
20366: LD_ADDR_VAR 0 4
20370: PUSH
20371: LD_VAR 0 1
20375: PPUSH
20376: LD_VAR 0 2
20380: PUSH
20381: LD_INT 1
20383: ARRAY
20384: PPUSH
20385: LD_VAR 0 3
20389: PPUSH
20390: CALL_OW 1
20394: ST_TO_ADDR
20395: GO 20659
// begin tmp := arr ;
20397: LD_ADDR_VAR 0 6
20401: PUSH
20402: LD_VAR 0 1
20406: ST_TO_ADDR
// s_arr := [ tmp ] ;
20407: LD_ADDR_VAR 0 7
20411: PUSH
20412: LD_VAR 0 6
20416: PUSH
20417: EMPTY
20418: LIST
20419: ST_TO_ADDR
// for i = 1 to pos - 1 do
20420: LD_ADDR_VAR 0 5
20424: PUSH
20425: DOUBLE
20426: LD_INT 1
20428: DEC
20429: ST_TO_ADDR
20430: LD_VAR 0 2
20434: PUSH
20435: LD_INT 1
20437: MINUS
20438: PUSH
20439: FOR_TO
20440: IFFALSE 20485
// begin tmp := tmp [ pos [ i ] ] ;
20442: LD_ADDR_VAR 0 6
20446: PUSH
20447: LD_VAR 0 6
20451: PUSH
20452: LD_VAR 0 2
20456: PUSH
20457: LD_VAR 0 5
20461: ARRAY
20462: ARRAY
20463: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20464: LD_ADDR_VAR 0 7
20468: PUSH
20469: LD_VAR 0 7
20473: PUSH
20474: LD_VAR 0 6
20478: PUSH
20479: EMPTY
20480: LIST
20481: ADD
20482: ST_TO_ADDR
// end ;
20483: GO 20439
20485: POP
20486: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20487: LD_ADDR_VAR 0 6
20491: PUSH
20492: LD_VAR 0 6
20496: PPUSH
20497: LD_VAR 0 2
20501: PUSH
20502: LD_VAR 0 2
20506: ARRAY
20507: PPUSH
20508: LD_VAR 0 3
20512: PPUSH
20513: CALL_OW 1
20517: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20518: LD_ADDR_VAR 0 7
20522: PUSH
20523: LD_VAR 0 7
20527: PPUSH
20528: LD_VAR 0 7
20532: PPUSH
20533: LD_VAR 0 6
20537: PPUSH
20538: CALL_OW 1
20542: ST_TO_ADDR
// for i = s_arr downto 2 do
20543: LD_ADDR_VAR 0 5
20547: PUSH
20548: DOUBLE
20549: LD_VAR 0 7
20553: INC
20554: ST_TO_ADDR
20555: LD_INT 2
20557: PUSH
20558: FOR_DOWNTO
20559: IFFALSE 20643
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20561: LD_ADDR_VAR 0 6
20565: PUSH
20566: LD_VAR 0 7
20570: PUSH
20571: LD_VAR 0 5
20575: PUSH
20576: LD_INT 1
20578: MINUS
20579: ARRAY
20580: PPUSH
20581: LD_VAR 0 2
20585: PUSH
20586: LD_VAR 0 5
20590: PUSH
20591: LD_INT 1
20593: MINUS
20594: ARRAY
20595: PPUSH
20596: LD_VAR 0 7
20600: PUSH
20601: LD_VAR 0 5
20605: ARRAY
20606: PPUSH
20607: CALL_OW 1
20611: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20612: LD_ADDR_VAR 0 7
20616: PUSH
20617: LD_VAR 0 7
20621: PPUSH
20622: LD_VAR 0 5
20626: PUSH
20627: LD_INT 1
20629: MINUS
20630: PPUSH
20631: LD_VAR 0 6
20635: PPUSH
20636: CALL_OW 1
20640: ST_TO_ADDR
// end ;
20641: GO 20558
20643: POP
20644: POP
// result := s_arr [ 1 ] ;
20645: LD_ADDR_VAR 0 4
20649: PUSH
20650: LD_VAR 0 7
20654: PUSH
20655: LD_INT 1
20657: ARRAY
20658: ST_TO_ADDR
// end ; end ;
20659: LD_VAR 0 4
20663: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20664: LD_INT 0
20666: PPUSH
20667: PPUSH
// if not list then
20668: LD_VAR 0 1
20672: NOT
20673: IFFALSE 20677
// exit ;
20675: GO 20768
// i := list [ pos1 ] ;
20677: LD_ADDR_VAR 0 5
20681: PUSH
20682: LD_VAR 0 1
20686: PUSH
20687: LD_VAR 0 2
20691: ARRAY
20692: ST_TO_ADDR
// if not i then
20693: LD_VAR 0 5
20697: NOT
20698: IFFALSE 20702
// exit ;
20700: GO 20768
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20702: LD_ADDR_VAR 0 1
20706: PUSH
20707: LD_VAR 0 1
20711: PPUSH
20712: LD_VAR 0 2
20716: PPUSH
20717: LD_VAR 0 1
20721: PUSH
20722: LD_VAR 0 3
20726: ARRAY
20727: PPUSH
20728: CALL_OW 1
20732: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20733: LD_ADDR_VAR 0 1
20737: PUSH
20738: LD_VAR 0 1
20742: PPUSH
20743: LD_VAR 0 3
20747: PPUSH
20748: LD_VAR 0 5
20752: PPUSH
20753: CALL_OW 1
20757: ST_TO_ADDR
// result := list ;
20758: LD_ADDR_VAR 0 4
20762: PUSH
20763: LD_VAR 0 1
20767: ST_TO_ADDR
// end ;
20768: LD_VAR 0 4
20772: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20773: LD_INT 0
20775: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20776: LD_ADDR_VAR 0 5
20780: PUSH
20781: LD_VAR 0 1
20785: PPUSH
20786: CALL_OW 250
20790: PPUSH
20791: LD_VAR 0 1
20795: PPUSH
20796: CALL_OW 251
20800: PPUSH
20801: LD_VAR 0 2
20805: PPUSH
20806: LD_VAR 0 3
20810: PPUSH
20811: LD_VAR 0 4
20815: PPUSH
20816: CALL 21194 0 5
20820: ST_TO_ADDR
// end ;
20821: LD_VAR 0 5
20825: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20826: LD_INT 0
20828: PPUSH
20829: PPUSH
20830: PPUSH
20831: PPUSH
// if not list or not unit then
20832: LD_VAR 0 2
20836: NOT
20837: PUSH
20838: LD_VAR 0 1
20842: NOT
20843: OR
20844: IFFALSE 20848
// exit ;
20846: GO 21189
// result := [ ] ;
20848: LD_ADDR_VAR 0 5
20852: PUSH
20853: EMPTY
20854: ST_TO_ADDR
// for i in list do
20855: LD_ADDR_VAR 0 6
20859: PUSH
20860: LD_VAR 0 2
20864: PUSH
20865: FOR_IN
20866: IFFALSE 21084
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20868: LD_ADDR_VAR 0 8
20872: PUSH
20873: LD_VAR 0 1
20877: PPUSH
20878: LD_VAR 0 6
20882: PUSH
20883: LD_INT 1
20885: ARRAY
20886: PPUSH
20887: LD_VAR 0 6
20891: PUSH
20892: LD_INT 2
20894: ARRAY
20895: PPUSH
20896: CALL_OW 297
20900: ST_TO_ADDR
// if not Count ( result ) then
20901: LD_VAR 0 5
20905: PPUSH
20906: CALL 17478 0 1
20910: NOT
20911: IFFALSE 20944
// begin result := Join ( result , [ i , tmp ] ) ;
20913: LD_ADDR_VAR 0 5
20917: PUSH
20918: LD_VAR 0 5
20922: PPUSH
20923: LD_VAR 0 6
20927: PUSH
20928: LD_VAR 0 8
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PPUSH
20937: CALL 53065 0 2
20941: ST_TO_ADDR
// continue ;
20942: GO 20865
// end ; if result [ result ] [ 2 ] <= tmp then
20944: LD_VAR 0 5
20948: PUSH
20949: LD_VAR 0 5
20953: ARRAY
20954: PUSH
20955: LD_INT 2
20957: ARRAY
20958: PUSH
20959: LD_VAR 0 8
20963: LESSEQUAL
20964: IFFALSE 20997
// result := Join ( result , [ i , tmp ] ) else
20966: LD_ADDR_VAR 0 5
20970: PUSH
20971: LD_VAR 0 5
20975: PPUSH
20976: LD_VAR 0 6
20980: PUSH
20981: LD_VAR 0 8
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PPUSH
20990: CALL 53065 0 2
20994: ST_TO_ADDR
20995: GO 21082
// begin for j := 1 to Count ( result ) do
20997: LD_ADDR_VAR 0 7
21001: PUSH
21002: DOUBLE
21003: LD_INT 1
21005: DEC
21006: ST_TO_ADDR
21007: LD_VAR 0 5
21011: PPUSH
21012: CALL 17478 0 1
21016: PUSH
21017: FOR_TO
21018: IFFALSE 21080
// begin if tmp < result [ j ] [ 2 ] then
21020: LD_VAR 0 8
21024: PUSH
21025: LD_VAR 0 5
21029: PUSH
21030: LD_VAR 0 7
21034: ARRAY
21035: PUSH
21036: LD_INT 2
21038: ARRAY
21039: LESS
21040: IFFALSE 21078
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21042: LD_ADDR_VAR 0 5
21046: PUSH
21047: LD_VAR 0 5
21051: PPUSH
21052: LD_VAR 0 7
21056: PPUSH
21057: LD_VAR 0 6
21061: PUSH
21062: LD_VAR 0 8
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PPUSH
21071: CALL_OW 2
21075: ST_TO_ADDR
// break ;
21076: GO 21080
// end ; end ;
21078: GO 21017
21080: POP
21081: POP
// end ; end ;
21082: GO 20865
21084: POP
21085: POP
// if result and not asc then
21086: LD_VAR 0 5
21090: PUSH
21091: LD_VAR 0 3
21095: NOT
21096: AND
21097: IFFALSE 21114
// result := ReverseArray ( result ) ;
21099: LD_ADDR_VAR 0 5
21103: PUSH
21104: LD_VAR 0 5
21108: PPUSH
21109: CALL 48354 0 1
21113: ST_TO_ADDR
// tmp := [ ] ;
21114: LD_ADDR_VAR 0 8
21118: PUSH
21119: EMPTY
21120: ST_TO_ADDR
// if mode then
21121: LD_VAR 0 4
21125: IFFALSE 21189
// begin for i := 1 to result do
21127: LD_ADDR_VAR 0 6
21131: PUSH
21132: DOUBLE
21133: LD_INT 1
21135: DEC
21136: ST_TO_ADDR
21137: LD_VAR 0 5
21141: PUSH
21142: FOR_TO
21143: IFFALSE 21177
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21145: LD_ADDR_VAR 0 8
21149: PUSH
21150: LD_VAR 0 8
21154: PPUSH
21155: LD_VAR 0 5
21159: PUSH
21160: LD_VAR 0 6
21164: ARRAY
21165: PUSH
21166: LD_INT 1
21168: ARRAY
21169: PPUSH
21170: CALL 53065 0 2
21174: ST_TO_ADDR
21175: GO 21142
21177: POP
21178: POP
// result := tmp ;
21179: LD_ADDR_VAR 0 5
21183: PUSH
21184: LD_VAR 0 8
21188: ST_TO_ADDR
// end ; end ;
21189: LD_VAR 0 5
21193: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21194: LD_INT 0
21196: PPUSH
21197: PPUSH
21198: PPUSH
21199: PPUSH
// if not list then
21200: LD_VAR 0 3
21204: NOT
21205: IFFALSE 21209
// exit ;
21207: GO 21597
// result := [ ] ;
21209: LD_ADDR_VAR 0 6
21213: PUSH
21214: EMPTY
21215: ST_TO_ADDR
// for i in list do
21216: LD_ADDR_VAR 0 7
21220: PUSH
21221: LD_VAR 0 3
21225: PUSH
21226: FOR_IN
21227: IFFALSE 21429
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21229: LD_ADDR_VAR 0 9
21233: PUSH
21234: LD_VAR 0 7
21238: PPUSH
21239: LD_VAR 0 1
21243: PPUSH
21244: LD_VAR 0 2
21248: PPUSH
21249: CALL_OW 297
21253: ST_TO_ADDR
// if not result then
21254: LD_VAR 0 6
21258: NOT
21259: IFFALSE 21285
// result := [ [ i , tmp ] ] else
21261: LD_ADDR_VAR 0 6
21265: PUSH
21266: LD_VAR 0 7
21270: PUSH
21271: LD_VAR 0 9
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: EMPTY
21281: LIST
21282: ST_TO_ADDR
21283: GO 21427
// begin if result [ result ] [ 2 ] < tmp then
21285: LD_VAR 0 6
21289: PUSH
21290: LD_VAR 0 6
21294: ARRAY
21295: PUSH
21296: LD_INT 2
21298: ARRAY
21299: PUSH
21300: LD_VAR 0 9
21304: LESS
21305: IFFALSE 21347
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21307: LD_ADDR_VAR 0 6
21311: PUSH
21312: LD_VAR 0 6
21316: PPUSH
21317: LD_VAR 0 6
21321: PUSH
21322: LD_INT 1
21324: PLUS
21325: PPUSH
21326: LD_VAR 0 7
21330: PUSH
21331: LD_VAR 0 9
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PPUSH
21340: CALL_OW 2
21344: ST_TO_ADDR
21345: GO 21427
// for j = 1 to result do
21347: LD_ADDR_VAR 0 8
21351: PUSH
21352: DOUBLE
21353: LD_INT 1
21355: DEC
21356: ST_TO_ADDR
21357: LD_VAR 0 6
21361: PUSH
21362: FOR_TO
21363: IFFALSE 21425
// begin if tmp < result [ j ] [ 2 ] then
21365: LD_VAR 0 9
21369: PUSH
21370: LD_VAR 0 6
21374: PUSH
21375: LD_VAR 0 8
21379: ARRAY
21380: PUSH
21381: LD_INT 2
21383: ARRAY
21384: LESS
21385: IFFALSE 21423
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21387: LD_ADDR_VAR 0 6
21391: PUSH
21392: LD_VAR 0 6
21396: PPUSH
21397: LD_VAR 0 8
21401: PPUSH
21402: LD_VAR 0 7
21406: PUSH
21407: LD_VAR 0 9
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PPUSH
21416: CALL_OW 2
21420: ST_TO_ADDR
// break ;
21421: GO 21425
// end ; end ;
21423: GO 21362
21425: POP
21426: POP
// end ; end ;
21427: GO 21226
21429: POP
21430: POP
// if result and not asc then
21431: LD_VAR 0 6
21435: PUSH
21436: LD_VAR 0 4
21440: NOT
21441: AND
21442: IFFALSE 21517
// begin tmp := result ;
21444: LD_ADDR_VAR 0 9
21448: PUSH
21449: LD_VAR 0 6
21453: ST_TO_ADDR
// for i = tmp downto 1 do
21454: LD_ADDR_VAR 0 7
21458: PUSH
21459: DOUBLE
21460: LD_VAR 0 9
21464: INC
21465: ST_TO_ADDR
21466: LD_INT 1
21468: PUSH
21469: FOR_DOWNTO
21470: IFFALSE 21515
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21472: LD_ADDR_VAR 0 6
21476: PUSH
21477: LD_VAR 0 6
21481: PPUSH
21482: LD_VAR 0 9
21486: PUSH
21487: LD_VAR 0 7
21491: MINUS
21492: PUSH
21493: LD_INT 1
21495: PLUS
21496: PPUSH
21497: LD_VAR 0 9
21501: PUSH
21502: LD_VAR 0 7
21506: ARRAY
21507: PPUSH
21508: CALL_OW 1
21512: ST_TO_ADDR
21513: GO 21469
21515: POP
21516: POP
// end ; tmp := [ ] ;
21517: LD_ADDR_VAR 0 9
21521: PUSH
21522: EMPTY
21523: ST_TO_ADDR
// if mode then
21524: LD_VAR 0 5
21528: IFFALSE 21597
// begin for i = 1 to result do
21530: LD_ADDR_VAR 0 7
21534: PUSH
21535: DOUBLE
21536: LD_INT 1
21538: DEC
21539: ST_TO_ADDR
21540: LD_VAR 0 6
21544: PUSH
21545: FOR_TO
21546: IFFALSE 21585
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21548: LD_ADDR_VAR 0 9
21552: PUSH
21553: LD_VAR 0 9
21557: PPUSH
21558: LD_VAR 0 7
21562: PPUSH
21563: LD_VAR 0 6
21567: PUSH
21568: LD_VAR 0 7
21572: ARRAY
21573: PUSH
21574: LD_INT 1
21576: ARRAY
21577: PPUSH
21578: CALL_OW 1
21582: ST_TO_ADDR
21583: GO 21545
21585: POP
21586: POP
// result := tmp ;
21587: LD_ADDR_VAR 0 6
21591: PUSH
21592: LD_VAR 0 9
21596: ST_TO_ADDR
// end ; end ;
21597: LD_VAR 0 6
21601: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21602: LD_INT 0
21604: PPUSH
21605: PPUSH
21606: PPUSH
21607: PPUSH
21608: PPUSH
21609: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21610: LD_ADDR_VAR 0 5
21614: PUSH
21615: LD_INT 0
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: EMPTY
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: ST_TO_ADDR
// if not x or not y then
21632: LD_VAR 0 2
21636: NOT
21637: PUSH
21638: LD_VAR 0 3
21642: NOT
21643: OR
21644: IFFALSE 21648
// exit ;
21646: GO 23298
// if not range then
21648: LD_VAR 0 4
21652: NOT
21653: IFFALSE 21663
// range := 10 ;
21655: LD_ADDR_VAR 0 4
21659: PUSH
21660: LD_INT 10
21662: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21663: LD_ADDR_VAR 0 8
21667: PUSH
21668: LD_INT 81
21670: PUSH
21671: LD_VAR 0 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 92
21682: PUSH
21683: LD_VAR 0 2
21687: PUSH
21688: LD_VAR 0 3
21692: PUSH
21693: LD_VAR 0 4
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 3
21706: PUSH
21707: LD_INT 21
21709: PUSH
21710: LD_INT 3
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: PPUSH
21726: CALL_OW 69
21730: ST_TO_ADDR
// if not tmp then
21731: LD_VAR 0 8
21735: NOT
21736: IFFALSE 21740
// exit ;
21738: GO 23298
// for i in tmp do
21740: LD_ADDR_VAR 0 6
21744: PUSH
21745: LD_VAR 0 8
21749: PUSH
21750: FOR_IN
21751: IFFALSE 23273
// begin points := [ 0 , 0 , 0 ] ;
21753: LD_ADDR_VAR 0 9
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: ST_TO_ADDR
// bpoints := 1 ;
21772: LD_ADDR_VAR 0 10
21776: PUSH
21777: LD_INT 1
21779: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21780: LD_VAR 0 6
21784: PPUSH
21785: CALL_OW 247
21789: PUSH
21790: LD_INT 1
21792: DOUBLE
21793: EQUAL
21794: IFTRUE 21798
21796: GO 22376
21798: POP
// begin if GetClass ( i ) = 1 then
21799: LD_VAR 0 6
21803: PPUSH
21804: CALL_OW 257
21808: PUSH
21809: LD_INT 1
21811: EQUAL
21812: IFFALSE 21833
// points := [ 10 , 5 , 3 ] ;
21814: LD_ADDR_VAR 0 9
21818: PUSH
21819: LD_INT 10
21821: PUSH
21822: LD_INT 5
21824: PUSH
21825: LD_INT 3
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: LIST
21832: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21833: LD_VAR 0 6
21837: PPUSH
21838: CALL_OW 257
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: LD_INT 3
21848: PUSH
21849: LD_INT 4
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: IN
21857: IFFALSE 21878
// points := [ 3 , 2 , 1 ] ;
21859: LD_ADDR_VAR 0 9
21863: PUSH
21864: LD_INT 3
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21878: LD_VAR 0 6
21882: PPUSH
21883: CALL_OW 257
21887: PUSH
21888: LD_INT 5
21890: EQUAL
21891: IFFALSE 21912
// points := [ 130 , 5 , 2 ] ;
21893: LD_ADDR_VAR 0 9
21897: PUSH
21898: LD_INT 130
21900: PUSH
21901: LD_INT 5
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: LIST
21911: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21912: LD_VAR 0 6
21916: PPUSH
21917: CALL_OW 257
21921: PUSH
21922: LD_INT 8
21924: EQUAL
21925: IFFALSE 21946
// points := [ 35 , 35 , 30 ] ;
21927: LD_ADDR_VAR 0 9
21931: PUSH
21932: LD_INT 35
21934: PUSH
21935: LD_INT 35
21937: PUSH
21938: LD_INT 30
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21946: LD_VAR 0 6
21950: PPUSH
21951: CALL_OW 257
21955: PUSH
21956: LD_INT 9
21958: EQUAL
21959: IFFALSE 21980
// points := [ 20 , 55 , 40 ] ;
21961: LD_ADDR_VAR 0 9
21965: PUSH
21966: LD_INT 20
21968: PUSH
21969: LD_INT 55
21971: PUSH
21972: LD_INT 40
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: LIST
21979: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21980: LD_VAR 0 6
21984: PPUSH
21985: CALL_OW 257
21989: PUSH
21990: LD_INT 12
21992: PUSH
21993: LD_INT 16
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: IN
22000: IFFALSE 22021
// points := [ 5 , 3 , 2 ] ;
22002: LD_ADDR_VAR 0 9
22006: PUSH
22007: LD_INT 5
22009: PUSH
22010: LD_INT 3
22012: PUSH
22013: LD_INT 2
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: LIST
22020: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22021: LD_VAR 0 6
22025: PPUSH
22026: CALL_OW 257
22030: PUSH
22031: LD_INT 17
22033: EQUAL
22034: IFFALSE 22055
// points := [ 100 , 50 , 75 ] ;
22036: LD_ADDR_VAR 0 9
22040: PUSH
22041: LD_INT 100
22043: PUSH
22044: LD_INT 50
22046: PUSH
22047: LD_INT 75
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22055: LD_VAR 0 6
22059: PPUSH
22060: CALL_OW 257
22064: PUSH
22065: LD_INT 15
22067: EQUAL
22068: IFFALSE 22089
// points := [ 10 , 5 , 3 ] ;
22070: LD_ADDR_VAR 0 9
22074: PUSH
22075: LD_INT 10
22077: PUSH
22078: LD_INT 5
22080: PUSH
22081: LD_INT 3
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22089: LD_VAR 0 6
22093: PPUSH
22094: CALL_OW 257
22098: PUSH
22099: LD_INT 14
22101: EQUAL
22102: IFFALSE 22123
// points := [ 10 , 0 , 0 ] ;
22104: LD_ADDR_VAR 0 9
22108: PUSH
22109: LD_INT 10
22111: PUSH
22112: LD_INT 0
22114: PUSH
22115: LD_INT 0
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22123: LD_VAR 0 6
22127: PPUSH
22128: CALL_OW 257
22132: PUSH
22133: LD_INT 11
22135: EQUAL
22136: IFFALSE 22157
// points := [ 30 , 10 , 5 ] ;
22138: LD_ADDR_VAR 0 9
22142: PUSH
22143: LD_INT 30
22145: PUSH
22146: LD_INT 10
22148: PUSH
22149: LD_INT 5
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22157: LD_VAR 0 1
22161: PPUSH
22162: LD_INT 5
22164: PPUSH
22165: CALL_OW 321
22169: PUSH
22170: LD_INT 2
22172: EQUAL
22173: IFFALSE 22190
// bpoints := bpoints * 1.8 ;
22175: LD_ADDR_VAR 0 10
22179: PUSH
22180: LD_VAR 0 10
22184: PUSH
22185: LD_REAL  1.80000000000000E+0000
22188: MUL
22189: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22190: LD_VAR 0 6
22194: PPUSH
22195: CALL_OW 257
22199: PUSH
22200: LD_INT 1
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: LD_INT 4
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: IN
22218: PUSH
22219: LD_VAR 0 1
22223: PPUSH
22224: LD_INT 51
22226: PPUSH
22227: CALL_OW 321
22231: PUSH
22232: LD_INT 2
22234: EQUAL
22235: AND
22236: IFFALSE 22253
// bpoints := bpoints * 1.2 ;
22238: LD_ADDR_VAR 0 10
22242: PUSH
22243: LD_VAR 0 10
22247: PUSH
22248: LD_REAL  1.20000000000000E+0000
22251: MUL
22252: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22253: LD_VAR 0 6
22257: PPUSH
22258: CALL_OW 257
22262: PUSH
22263: LD_INT 5
22265: PUSH
22266: LD_INT 7
22268: PUSH
22269: LD_INT 9
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: LIST
22276: IN
22277: PUSH
22278: LD_VAR 0 1
22282: PPUSH
22283: LD_INT 52
22285: PPUSH
22286: CALL_OW 321
22290: PUSH
22291: LD_INT 2
22293: EQUAL
22294: AND
22295: IFFALSE 22312
// bpoints := bpoints * 1.5 ;
22297: LD_ADDR_VAR 0 10
22301: PUSH
22302: LD_VAR 0 10
22306: PUSH
22307: LD_REAL  1.50000000000000E+0000
22310: MUL
22311: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22312: LD_VAR 0 1
22316: PPUSH
22317: LD_INT 66
22319: PPUSH
22320: CALL_OW 321
22324: PUSH
22325: LD_INT 2
22327: EQUAL
22328: IFFALSE 22345
// bpoints := bpoints * 1.1 ;
22330: LD_ADDR_VAR 0 10
22334: PUSH
22335: LD_VAR 0 10
22339: PUSH
22340: LD_REAL  1.10000000000000E+0000
22343: MUL
22344: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22345: LD_ADDR_VAR 0 10
22349: PUSH
22350: LD_VAR 0 10
22354: PUSH
22355: LD_VAR 0 6
22359: PPUSH
22360: LD_INT 1
22362: PPUSH
22363: CALL_OW 259
22367: PUSH
22368: LD_REAL  1.15000000000000E+0000
22371: MUL
22372: MUL
22373: ST_TO_ADDR
// end ; unit_vehicle :
22374: GO 23202
22376: LD_INT 2
22378: DOUBLE
22379: EQUAL
22380: IFTRUE 22384
22382: GO 23190
22384: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22385: LD_VAR 0 6
22389: PPUSH
22390: CALL_OW 264
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: LD_INT 42
22400: PUSH
22401: LD_INT 24
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: IN
22409: IFFALSE 22430
// points := [ 25 , 5 , 3 ] ;
22411: LD_ADDR_VAR 0 9
22415: PUSH
22416: LD_INT 25
22418: PUSH
22419: LD_INT 5
22421: PUSH
22422: LD_INT 3
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: LIST
22429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22430: LD_VAR 0 6
22434: PPUSH
22435: CALL_OW 264
22439: PUSH
22440: LD_INT 4
22442: PUSH
22443: LD_INT 43
22445: PUSH
22446: LD_INT 25
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: LIST
22453: IN
22454: IFFALSE 22475
// points := [ 40 , 15 , 5 ] ;
22456: LD_ADDR_VAR 0 9
22460: PUSH
22461: LD_INT 40
22463: PUSH
22464: LD_INT 15
22466: PUSH
22467: LD_INT 5
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22475: LD_VAR 0 6
22479: PPUSH
22480: CALL_OW 264
22484: PUSH
22485: LD_INT 3
22487: PUSH
22488: LD_INT 23
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: IN
22495: IFFALSE 22516
// points := [ 7 , 25 , 8 ] ;
22497: LD_ADDR_VAR 0 9
22501: PUSH
22502: LD_INT 7
22504: PUSH
22505: LD_INT 25
22507: PUSH
22508: LD_INT 8
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: LIST
22515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22516: LD_VAR 0 6
22520: PPUSH
22521: CALL_OW 264
22525: PUSH
22526: LD_INT 5
22528: PUSH
22529: LD_INT 27
22531: PUSH
22532: LD_INT 44
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: IN
22540: IFFALSE 22561
// points := [ 14 , 50 , 16 ] ;
22542: LD_ADDR_VAR 0 9
22546: PUSH
22547: LD_INT 14
22549: PUSH
22550: LD_INT 50
22552: PUSH
22553: LD_INT 16
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: LIST
22560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22561: LD_VAR 0 6
22565: PPUSH
22566: CALL_OW 264
22570: PUSH
22571: LD_INT 6
22573: PUSH
22574: LD_INT 46
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: IN
22581: IFFALSE 22602
// points := [ 32 , 120 , 70 ] ;
22583: LD_ADDR_VAR 0 9
22587: PUSH
22588: LD_INT 32
22590: PUSH
22591: LD_INT 120
22593: PUSH
22594: LD_INT 70
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22602: LD_VAR 0 6
22606: PPUSH
22607: CALL_OW 264
22611: PUSH
22612: LD_INT 7
22614: PUSH
22615: LD_INT 28
22617: PUSH
22618: LD_INT 45
22620: PUSH
22621: LD_INT 92
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: IN
22630: IFFALSE 22651
// points := [ 35 , 20 , 45 ] ;
22632: LD_ADDR_VAR 0 9
22636: PUSH
22637: LD_INT 35
22639: PUSH
22640: LD_INT 20
22642: PUSH
22643: LD_INT 45
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: LIST
22650: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22651: LD_VAR 0 6
22655: PPUSH
22656: CALL_OW 264
22660: PUSH
22661: LD_INT 47
22663: PUSH
22664: EMPTY
22665: LIST
22666: IN
22667: IFFALSE 22688
// points := [ 67 , 45 , 75 ] ;
22669: LD_ADDR_VAR 0 9
22673: PUSH
22674: LD_INT 67
22676: PUSH
22677: LD_INT 45
22679: PUSH
22680: LD_INT 75
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: LIST
22687: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22688: LD_VAR 0 6
22692: PPUSH
22693: CALL_OW 264
22697: PUSH
22698: LD_INT 26
22700: PUSH
22701: EMPTY
22702: LIST
22703: IN
22704: IFFALSE 22725
// points := [ 120 , 30 , 80 ] ;
22706: LD_ADDR_VAR 0 9
22710: PUSH
22711: LD_INT 120
22713: PUSH
22714: LD_INT 30
22716: PUSH
22717: LD_INT 80
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: LIST
22724: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22725: LD_VAR 0 6
22729: PPUSH
22730: CALL_OW 264
22734: PUSH
22735: LD_INT 22
22737: PUSH
22738: EMPTY
22739: LIST
22740: IN
22741: IFFALSE 22762
// points := [ 40 , 1 , 1 ] ;
22743: LD_ADDR_VAR 0 9
22747: PUSH
22748: LD_INT 40
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22762: LD_VAR 0 6
22766: PPUSH
22767: CALL_OW 264
22771: PUSH
22772: LD_INT 29
22774: PUSH
22775: EMPTY
22776: LIST
22777: IN
22778: IFFALSE 22799
// points := [ 70 , 200 , 400 ] ;
22780: LD_ADDR_VAR 0 9
22784: PUSH
22785: LD_INT 70
22787: PUSH
22788: LD_INT 200
22790: PUSH
22791: LD_INT 400
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: LIST
22798: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22799: LD_VAR 0 6
22803: PPUSH
22804: CALL_OW 264
22808: PUSH
22809: LD_INT 14
22811: PUSH
22812: LD_INT 53
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: IN
22819: IFFALSE 22840
// points := [ 40 , 10 , 20 ] ;
22821: LD_ADDR_VAR 0 9
22825: PUSH
22826: LD_INT 40
22828: PUSH
22829: LD_INT 10
22831: PUSH
22832: LD_INT 20
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: LIST
22839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22840: LD_VAR 0 6
22844: PPUSH
22845: CALL_OW 264
22849: PUSH
22850: LD_INT 9
22852: PUSH
22853: EMPTY
22854: LIST
22855: IN
22856: IFFALSE 22877
// points := [ 5 , 70 , 20 ] ;
22858: LD_ADDR_VAR 0 9
22862: PUSH
22863: LD_INT 5
22865: PUSH
22866: LD_INT 70
22868: PUSH
22869: LD_INT 20
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: LIST
22876: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22877: LD_VAR 0 6
22881: PPUSH
22882: CALL_OW 264
22886: PUSH
22887: LD_INT 10
22889: PUSH
22890: EMPTY
22891: LIST
22892: IN
22893: IFFALSE 22914
// points := [ 35 , 110 , 70 ] ;
22895: LD_ADDR_VAR 0 9
22899: PUSH
22900: LD_INT 35
22902: PUSH
22903: LD_INT 110
22905: PUSH
22906: LD_INT 70
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22914: LD_VAR 0 6
22918: PPUSH
22919: CALL_OW 265
22923: PUSH
22924: LD_INT 25
22926: EQUAL
22927: IFFALSE 22948
// points := [ 80 , 65 , 100 ] ;
22929: LD_ADDR_VAR 0 9
22933: PUSH
22934: LD_INT 80
22936: PUSH
22937: LD_INT 65
22939: PUSH
22940: LD_INT 100
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: LIST
22947: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22948: LD_VAR 0 6
22952: PPUSH
22953: CALL_OW 263
22957: PUSH
22958: LD_INT 1
22960: EQUAL
22961: IFFALSE 22996
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22963: LD_ADDR_VAR 0 10
22967: PUSH
22968: LD_VAR 0 10
22972: PUSH
22973: LD_VAR 0 6
22977: PPUSH
22978: CALL_OW 311
22982: PPUSH
22983: LD_INT 3
22985: PPUSH
22986: CALL_OW 259
22990: PUSH
22991: LD_INT 4
22993: MUL
22994: MUL
22995: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22996: LD_VAR 0 6
23000: PPUSH
23001: CALL_OW 263
23005: PUSH
23006: LD_INT 2
23008: EQUAL
23009: IFFALSE 23060
// begin j := IsControledBy ( i ) ;
23011: LD_ADDR_VAR 0 7
23015: PUSH
23016: LD_VAR 0 6
23020: PPUSH
23021: CALL_OW 312
23025: ST_TO_ADDR
// if j then
23026: LD_VAR 0 7
23030: IFFALSE 23060
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23032: LD_ADDR_VAR 0 10
23036: PUSH
23037: LD_VAR 0 10
23041: PUSH
23042: LD_VAR 0 7
23046: PPUSH
23047: LD_INT 3
23049: PPUSH
23050: CALL_OW 259
23054: PUSH
23055: LD_INT 3
23057: MUL
23058: MUL
23059: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23060: LD_VAR 0 6
23064: PPUSH
23065: CALL_OW 264
23069: PUSH
23070: LD_INT 5
23072: PUSH
23073: LD_INT 6
23075: PUSH
23076: LD_INT 46
23078: PUSH
23079: LD_INT 44
23081: PUSH
23082: LD_INT 47
23084: PUSH
23085: LD_INT 45
23087: PUSH
23088: LD_INT 28
23090: PUSH
23091: LD_INT 7
23093: PUSH
23094: LD_INT 27
23096: PUSH
23097: LD_INT 29
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: IN
23112: PUSH
23113: LD_VAR 0 1
23117: PPUSH
23118: LD_INT 52
23120: PPUSH
23121: CALL_OW 321
23125: PUSH
23126: LD_INT 2
23128: EQUAL
23129: AND
23130: IFFALSE 23147
// bpoints := bpoints * 1.2 ;
23132: LD_ADDR_VAR 0 10
23136: PUSH
23137: LD_VAR 0 10
23141: PUSH
23142: LD_REAL  1.20000000000000E+0000
23145: MUL
23146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23147: LD_VAR 0 6
23151: PPUSH
23152: CALL_OW 264
23156: PUSH
23157: LD_INT 6
23159: PUSH
23160: LD_INT 46
23162: PUSH
23163: LD_INT 47
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: IN
23171: IFFALSE 23188
// bpoints := bpoints * 1.2 ;
23173: LD_ADDR_VAR 0 10
23177: PUSH
23178: LD_VAR 0 10
23182: PUSH
23183: LD_REAL  1.20000000000000E+0000
23186: MUL
23187: ST_TO_ADDR
// end ; unit_building :
23188: GO 23202
23190: LD_INT 3
23192: DOUBLE
23193: EQUAL
23194: IFTRUE 23198
23196: GO 23201
23198: POP
// ; end ;
23199: GO 23202
23201: POP
// for j = 1 to 3 do
23202: LD_ADDR_VAR 0 7
23206: PUSH
23207: DOUBLE
23208: LD_INT 1
23210: DEC
23211: ST_TO_ADDR
23212: LD_INT 3
23214: PUSH
23215: FOR_TO
23216: IFFALSE 23269
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23218: LD_ADDR_VAR 0 5
23222: PUSH
23223: LD_VAR 0 5
23227: PPUSH
23228: LD_VAR 0 7
23232: PPUSH
23233: LD_VAR 0 5
23237: PUSH
23238: LD_VAR 0 7
23242: ARRAY
23243: PUSH
23244: LD_VAR 0 9
23248: PUSH
23249: LD_VAR 0 7
23253: ARRAY
23254: PUSH
23255: LD_VAR 0 10
23259: MUL
23260: PLUS
23261: PPUSH
23262: CALL_OW 1
23266: ST_TO_ADDR
23267: GO 23215
23269: POP
23270: POP
// end ;
23271: GO 21750
23273: POP
23274: POP
// result := Replace ( result , 4 , tmp ) ;
23275: LD_ADDR_VAR 0 5
23279: PUSH
23280: LD_VAR 0 5
23284: PPUSH
23285: LD_INT 4
23287: PPUSH
23288: LD_VAR 0 8
23292: PPUSH
23293: CALL_OW 1
23297: ST_TO_ADDR
// end ;
23298: LD_VAR 0 5
23302: RET
// export function DangerAtRange ( unit , range ) ; begin
23303: LD_INT 0
23305: PPUSH
// if not unit then
23306: LD_VAR 0 1
23310: NOT
23311: IFFALSE 23315
// exit ;
23313: GO 23360
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23315: LD_ADDR_VAR 0 3
23319: PUSH
23320: LD_VAR 0 1
23324: PPUSH
23325: CALL_OW 255
23329: PPUSH
23330: LD_VAR 0 1
23334: PPUSH
23335: CALL_OW 250
23339: PPUSH
23340: LD_VAR 0 1
23344: PPUSH
23345: CALL_OW 251
23349: PPUSH
23350: LD_VAR 0 2
23354: PPUSH
23355: CALL 21602 0 4
23359: ST_TO_ADDR
// end ;
23360: LD_VAR 0 3
23364: RET
// export function DangerInArea ( side , area ) ; begin
23365: LD_INT 0
23367: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23368: LD_ADDR_VAR 0 3
23372: PUSH
23373: LD_VAR 0 2
23377: PPUSH
23378: LD_INT 81
23380: PUSH
23381: LD_VAR 0 1
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PPUSH
23390: CALL_OW 70
23394: ST_TO_ADDR
// end ;
23395: LD_VAR 0 3
23399: RET
// export function IsExtension ( b ) ; begin
23400: LD_INT 0
23402: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23403: LD_ADDR_VAR 0 2
23407: PUSH
23408: LD_VAR 0 1
23412: PUSH
23413: LD_INT 23
23415: PUSH
23416: LD_INT 20
23418: PUSH
23419: LD_INT 22
23421: PUSH
23422: LD_INT 17
23424: PUSH
23425: LD_INT 24
23427: PUSH
23428: LD_INT 21
23430: PUSH
23431: LD_INT 19
23433: PUSH
23434: LD_INT 16
23436: PUSH
23437: LD_INT 25
23439: PUSH
23440: LD_INT 18
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: IN
23455: ST_TO_ADDR
// end ;
23456: LD_VAR 0 2
23460: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23461: LD_INT 0
23463: PPUSH
23464: PPUSH
23465: PPUSH
// result := [ ] ;
23466: LD_ADDR_VAR 0 4
23470: PUSH
23471: EMPTY
23472: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23473: LD_ADDR_VAR 0 5
23477: PUSH
23478: LD_VAR 0 2
23482: PPUSH
23483: LD_INT 21
23485: PUSH
23486: LD_INT 3
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PPUSH
23493: CALL_OW 70
23497: ST_TO_ADDR
// if not tmp then
23498: LD_VAR 0 5
23502: NOT
23503: IFFALSE 23507
// exit ;
23505: GO 23571
// if checkLink then
23507: LD_VAR 0 3
23511: IFFALSE 23561
// begin for i in tmp do
23513: LD_ADDR_VAR 0 6
23517: PUSH
23518: LD_VAR 0 5
23522: PUSH
23523: FOR_IN
23524: IFFALSE 23559
// if GetBase ( i ) <> base then
23526: LD_VAR 0 6
23530: PPUSH
23531: CALL_OW 274
23535: PUSH
23536: LD_VAR 0 1
23540: NONEQUAL
23541: IFFALSE 23557
// ComLinkToBase ( base , i ) ;
23543: LD_VAR 0 1
23547: PPUSH
23548: LD_VAR 0 6
23552: PPUSH
23553: CALL_OW 169
23557: GO 23523
23559: POP
23560: POP
// end ; result := tmp ;
23561: LD_ADDR_VAR 0 4
23565: PUSH
23566: LD_VAR 0 5
23570: ST_TO_ADDR
// end ;
23571: LD_VAR 0 4
23575: RET
// export function ComComplete ( units , b ) ; var i ; begin
23576: LD_INT 0
23578: PPUSH
23579: PPUSH
// if not units then
23580: LD_VAR 0 1
23584: NOT
23585: IFFALSE 23589
// exit ;
23587: GO 23679
// for i in units do
23589: LD_ADDR_VAR 0 4
23593: PUSH
23594: LD_VAR 0 1
23598: PUSH
23599: FOR_IN
23600: IFFALSE 23677
// if BuildingStatus ( b ) = bs_build then
23602: LD_VAR 0 2
23606: PPUSH
23607: CALL_OW 461
23611: PUSH
23612: LD_INT 1
23614: EQUAL
23615: IFFALSE 23675
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23617: LD_VAR 0 4
23621: PPUSH
23622: LD_STRING h
23624: PUSH
23625: LD_VAR 0 2
23629: PPUSH
23630: CALL_OW 250
23634: PUSH
23635: LD_VAR 0 2
23639: PPUSH
23640: CALL_OW 251
23644: PUSH
23645: LD_VAR 0 2
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: PUSH
23668: EMPTY
23669: LIST
23670: PPUSH
23671: CALL_OW 446
23675: GO 23599
23677: POP
23678: POP
// end ;
23679: LD_VAR 0 3
23683: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23684: LD_INT 0
23686: PPUSH
23687: PPUSH
23688: PPUSH
23689: PPUSH
23690: PPUSH
23691: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23692: LD_VAR 0 1
23696: NOT
23697: PUSH
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL_OW 263
23707: PUSH
23708: LD_INT 2
23710: NONEQUAL
23711: OR
23712: IFFALSE 23716
// exit ;
23714: GO 24032
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23716: LD_ADDR_VAR 0 6
23720: PUSH
23721: LD_INT 22
23723: PUSH
23724: LD_VAR 0 1
23728: PPUSH
23729: CALL_OW 255
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 2
23740: PUSH
23741: LD_INT 30
23743: PUSH
23744: LD_INT 36
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 34
23753: PUSH
23754: LD_INT 31
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: LIST
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PPUSH
23770: CALL_OW 69
23774: ST_TO_ADDR
// if not tmp then
23775: LD_VAR 0 6
23779: NOT
23780: IFFALSE 23784
// exit ;
23782: GO 24032
// result := [ ] ;
23784: LD_ADDR_VAR 0 2
23788: PUSH
23789: EMPTY
23790: ST_TO_ADDR
// for i in tmp do
23791: LD_ADDR_VAR 0 3
23795: PUSH
23796: LD_VAR 0 6
23800: PUSH
23801: FOR_IN
23802: IFFALSE 23873
// begin t := UnitsInside ( i ) ;
23804: LD_ADDR_VAR 0 4
23808: PUSH
23809: LD_VAR 0 3
23813: PPUSH
23814: CALL_OW 313
23818: ST_TO_ADDR
// if t then
23819: LD_VAR 0 4
23823: IFFALSE 23871
// for j in t do
23825: LD_ADDR_VAR 0 7
23829: PUSH
23830: LD_VAR 0 4
23834: PUSH
23835: FOR_IN
23836: IFFALSE 23869
// result := Replace ( result , result + 1 , j ) ;
23838: LD_ADDR_VAR 0 2
23842: PUSH
23843: LD_VAR 0 2
23847: PPUSH
23848: LD_VAR 0 2
23852: PUSH
23853: LD_INT 1
23855: PLUS
23856: PPUSH
23857: LD_VAR 0 7
23861: PPUSH
23862: CALL_OW 1
23866: ST_TO_ADDR
23867: GO 23835
23869: POP
23870: POP
// end ;
23871: GO 23801
23873: POP
23874: POP
// if not result then
23875: LD_VAR 0 2
23879: NOT
23880: IFFALSE 23884
// exit ;
23882: GO 24032
// mech := result [ 1 ] ;
23884: LD_ADDR_VAR 0 5
23888: PUSH
23889: LD_VAR 0 2
23893: PUSH
23894: LD_INT 1
23896: ARRAY
23897: ST_TO_ADDR
// if result > 1 then
23898: LD_VAR 0 2
23902: PUSH
23903: LD_INT 1
23905: GREATER
23906: IFFALSE 24018
// begin for i = 2 to result do
23908: LD_ADDR_VAR 0 3
23912: PUSH
23913: DOUBLE
23914: LD_INT 2
23916: DEC
23917: ST_TO_ADDR
23918: LD_VAR 0 2
23922: PUSH
23923: FOR_TO
23924: IFFALSE 24016
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23926: LD_ADDR_VAR 0 4
23930: PUSH
23931: LD_VAR 0 2
23935: PUSH
23936: LD_VAR 0 3
23940: ARRAY
23941: PPUSH
23942: LD_INT 3
23944: PPUSH
23945: CALL_OW 259
23949: PUSH
23950: LD_VAR 0 2
23954: PUSH
23955: LD_VAR 0 3
23959: ARRAY
23960: PPUSH
23961: CALL_OW 432
23965: MINUS
23966: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23967: LD_VAR 0 4
23971: PUSH
23972: LD_VAR 0 5
23976: PPUSH
23977: LD_INT 3
23979: PPUSH
23980: CALL_OW 259
23984: PUSH
23985: LD_VAR 0 5
23989: PPUSH
23990: CALL_OW 432
23994: MINUS
23995: GREATEREQUAL
23996: IFFALSE 24014
// mech := result [ i ] ;
23998: LD_ADDR_VAR 0 5
24002: PUSH
24003: LD_VAR 0 2
24007: PUSH
24008: LD_VAR 0 3
24012: ARRAY
24013: ST_TO_ADDR
// end ;
24014: GO 23923
24016: POP
24017: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24018: LD_VAR 0 1
24022: PPUSH
24023: LD_VAR 0 5
24027: PPUSH
24028: CALL_OW 135
// end ;
24032: LD_VAR 0 2
24036: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24037: LD_INT 0
24039: PPUSH
24040: PPUSH
24041: PPUSH
24042: PPUSH
24043: PPUSH
24044: PPUSH
24045: PPUSH
24046: PPUSH
24047: PPUSH
24048: PPUSH
24049: PPUSH
24050: PPUSH
24051: PPUSH
// result := [ ] ;
24052: LD_ADDR_VAR 0 7
24056: PUSH
24057: EMPTY
24058: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24059: LD_VAR 0 1
24063: PPUSH
24064: CALL_OW 266
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: IN
24079: NOT
24080: IFFALSE 24084
// exit ;
24082: GO 25718
// if name then
24084: LD_VAR 0 3
24088: IFFALSE 24104
// SetBName ( base_dep , name ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_VAR 0 3
24099: PPUSH
24100: CALL_OW 500
// base := GetBase ( base_dep ) ;
24104: LD_ADDR_VAR 0 15
24108: PUSH
24109: LD_VAR 0 1
24113: PPUSH
24114: CALL_OW 274
24118: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24119: LD_ADDR_VAR 0 16
24123: PUSH
24124: LD_VAR 0 1
24128: PPUSH
24129: CALL_OW 255
24133: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24134: LD_ADDR_VAR 0 17
24138: PUSH
24139: LD_VAR 0 1
24143: PPUSH
24144: CALL_OW 248
24148: ST_TO_ADDR
// if sources then
24149: LD_VAR 0 5
24153: IFFALSE 24200
// for i = 1 to 3 do
24155: LD_ADDR_VAR 0 8
24159: PUSH
24160: DOUBLE
24161: LD_INT 1
24163: DEC
24164: ST_TO_ADDR
24165: LD_INT 3
24167: PUSH
24168: FOR_TO
24169: IFFALSE 24198
// AddResourceType ( base , i , sources [ i ] ) ;
24171: LD_VAR 0 15
24175: PPUSH
24176: LD_VAR 0 8
24180: PPUSH
24181: LD_VAR 0 5
24185: PUSH
24186: LD_VAR 0 8
24190: ARRAY
24191: PPUSH
24192: CALL_OW 276
24196: GO 24168
24198: POP
24199: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24200: LD_ADDR_VAR 0 18
24204: PUSH
24205: LD_VAR 0 15
24209: PPUSH
24210: LD_VAR 0 2
24214: PPUSH
24215: LD_INT 1
24217: PPUSH
24218: CALL 23461 0 3
24222: ST_TO_ADDR
// InitHc ;
24223: CALL_OW 19
// InitUc ;
24227: CALL_OW 18
// uc_side := side ;
24231: LD_ADDR_OWVAR 20
24235: PUSH
24236: LD_VAR 0 16
24240: ST_TO_ADDR
// uc_nation := nation ;
24241: LD_ADDR_OWVAR 21
24245: PUSH
24246: LD_VAR 0 17
24250: ST_TO_ADDR
// if buildings then
24251: LD_VAR 0 18
24255: IFFALSE 25577
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24257: LD_ADDR_VAR 0 19
24261: PUSH
24262: LD_VAR 0 18
24266: PPUSH
24267: LD_INT 2
24269: PUSH
24270: LD_INT 30
24272: PUSH
24273: LD_INT 29
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 30
24282: PUSH
24283: LD_INT 30
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: PPUSH
24295: CALL_OW 72
24299: ST_TO_ADDR
// if tmp then
24300: LD_VAR 0 19
24304: IFFALSE 24352
// for i in tmp do
24306: LD_ADDR_VAR 0 8
24310: PUSH
24311: LD_VAR 0 19
24315: PUSH
24316: FOR_IN
24317: IFFALSE 24350
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24319: LD_VAR 0 8
24323: PPUSH
24324: CALL_OW 250
24328: PPUSH
24329: LD_VAR 0 8
24333: PPUSH
24334: CALL_OW 251
24338: PPUSH
24339: LD_VAR 0 16
24343: PPUSH
24344: CALL_OW 441
24348: GO 24316
24350: POP
24351: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24352: LD_VAR 0 18
24356: PPUSH
24357: LD_INT 2
24359: PUSH
24360: LD_INT 30
24362: PUSH
24363: LD_INT 32
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 30
24372: PUSH
24373: LD_INT 33
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: PPUSH
24385: CALL_OW 72
24389: IFFALSE 24477
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24391: LD_ADDR_VAR 0 8
24395: PUSH
24396: LD_VAR 0 18
24400: PPUSH
24401: LD_INT 2
24403: PUSH
24404: LD_INT 30
24406: PUSH
24407: LD_INT 32
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 30
24416: PUSH
24417: LD_INT 33
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: LIST
24428: PPUSH
24429: CALL_OW 72
24433: PUSH
24434: FOR_IN
24435: IFFALSE 24475
// begin if not GetBWeapon ( i ) then
24437: LD_VAR 0 8
24441: PPUSH
24442: CALL_OW 269
24446: NOT
24447: IFFALSE 24473
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24449: LD_VAR 0 8
24453: PPUSH
24454: LD_VAR 0 8
24458: PPUSH
24459: LD_VAR 0 2
24463: PPUSH
24464: CALL 25723 0 2
24468: PPUSH
24469: CALL_OW 431
// end ;
24473: GO 24434
24475: POP
24476: POP
// end ; for i = 1 to personel do
24477: LD_ADDR_VAR 0 8
24481: PUSH
24482: DOUBLE
24483: LD_INT 1
24485: DEC
24486: ST_TO_ADDR
24487: LD_VAR 0 6
24491: PUSH
24492: FOR_TO
24493: IFFALSE 25557
// begin if i > 4 then
24495: LD_VAR 0 8
24499: PUSH
24500: LD_INT 4
24502: GREATER
24503: IFFALSE 24507
// break ;
24505: GO 25557
// case i of 1 :
24507: LD_VAR 0 8
24511: PUSH
24512: LD_INT 1
24514: DOUBLE
24515: EQUAL
24516: IFTRUE 24520
24518: GO 24600
24520: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24521: LD_ADDR_VAR 0 12
24525: PUSH
24526: LD_VAR 0 18
24530: PPUSH
24531: LD_INT 22
24533: PUSH
24534: LD_VAR 0 16
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 58
24545: PUSH
24546: EMPTY
24547: LIST
24548: PUSH
24549: LD_INT 2
24551: PUSH
24552: LD_INT 30
24554: PUSH
24555: LD_INT 32
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 30
24564: PUSH
24565: LD_INT 4
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 30
24574: PUSH
24575: LD_INT 5
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: LIST
24592: PPUSH
24593: CALL_OW 72
24597: ST_TO_ADDR
24598: GO 24822
24600: LD_INT 2
24602: DOUBLE
24603: EQUAL
24604: IFTRUE 24608
24606: GO 24670
24608: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24609: LD_ADDR_VAR 0 12
24613: PUSH
24614: LD_VAR 0 18
24618: PPUSH
24619: LD_INT 22
24621: PUSH
24622: LD_VAR 0 16
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: LD_INT 30
24636: PUSH
24637: LD_INT 0
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 30
24646: PUSH
24647: LD_INT 1
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: LIST
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PPUSH
24663: CALL_OW 72
24667: ST_TO_ADDR
24668: GO 24822
24670: LD_INT 3
24672: DOUBLE
24673: EQUAL
24674: IFTRUE 24678
24676: GO 24740
24678: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24679: LD_ADDR_VAR 0 12
24683: PUSH
24684: LD_VAR 0 18
24688: PPUSH
24689: LD_INT 22
24691: PUSH
24692: LD_VAR 0 16
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: LD_INT 30
24706: PUSH
24707: LD_INT 2
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 30
24716: PUSH
24717: LD_INT 3
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: LIST
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PPUSH
24733: CALL_OW 72
24737: ST_TO_ADDR
24738: GO 24822
24740: LD_INT 4
24742: DOUBLE
24743: EQUAL
24744: IFTRUE 24748
24746: GO 24821
24748: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24749: LD_ADDR_VAR 0 12
24753: PUSH
24754: LD_VAR 0 18
24758: PPUSH
24759: LD_INT 22
24761: PUSH
24762: LD_VAR 0 16
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 2
24773: PUSH
24774: LD_INT 30
24776: PUSH
24777: LD_INT 6
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 30
24786: PUSH
24787: LD_INT 7
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 30
24796: PUSH
24797: LD_INT 8
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PPUSH
24814: CALL_OW 72
24818: ST_TO_ADDR
24819: GO 24822
24821: POP
// if i = 1 then
24822: LD_VAR 0 8
24826: PUSH
24827: LD_INT 1
24829: EQUAL
24830: IFFALSE 24941
// begin tmp := [ ] ;
24832: LD_ADDR_VAR 0 19
24836: PUSH
24837: EMPTY
24838: ST_TO_ADDR
// for j in f do
24839: LD_ADDR_VAR 0 9
24843: PUSH
24844: LD_VAR 0 12
24848: PUSH
24849: FOR_IN
24850: IFFALSE 24923
// if GetBType ( j ) = b_bunker then
24852: LD_VAR 0 9
24856: PPUSH
24857: CALL_OW 266
24861: PUSH
24862: LD_INT 32
24864: EQUAL
24865: IFFALSE 24892
// tmp := Insert ( tmp , 1 , j ) else
24867: LD_ADDR_VAR 0 19
24871: PUSH
24872: LD_VAR 0 19
24876: PPUSH
24877: LD_INT 1
24879: PPUSH
24880: LD_VAR 0 9
24884: PPUSH
24885: CALL_OW 2
24889: ST_TO_ADDR
24890: GO 24921
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24892: LD_ADDR_VAR 0 19
24896: PUSH
24897: LD_VAR 0 19
24901: PPUSH
24902: LD_VAR 0 19
24906: PUSH
24907: LD_INT 1
24909: PLUS
24910: PPUSH
24911: LD_VAR 0 9
24915: PPUSH
24916: CALL_OW 2
24920: ST_TO_ADDR
24921: GO 24849
24923: POP
24924: POP
// if tmp then
24925: LD_VAR 0 19
24929: IFFALSE 24941
// f := tmp ;
24931: LD_ADDR_VAR 0 12
24935: PUSH
24936: LD_VAR 0 19
24940: ST_TO_ADDR
// end ; x := personel [ i ] ;
24941: LD_ADDR_VAR 0 13
24945: PUSH
24946: LD_VAR 0 6
24950: PUSH
24951: LD_VAR 0 8
24955: ARRAY
24956: ST_TO_ADDR
// if x = - 1 then
24957: LD_VAR 0 13
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: EQUAL
24966: IFFALSE 25175
// begin for j in f do
24968: LD_ADDR_VAR 0 9
24972: PUSH
24973: LD_VAR 0 12
24977: PUSH
24978: FOR_IN
24979: IFFALSE 25171
// repeat InitHc ;
24981: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24985: LD_VAR 0 9
24989: PPUSH
24990: CALL_OW 266
24994: PUSH
24995: LD_INT 5
24997: EQUAL
24998: IFFALSE 25068
// begin if UnitsInside ( j ) < 3 then
25000: LD_VAR 0 9
25004: PPUSH
25005: CALL_OW 313
25009: PUSH
25010: LD_INT 3
25012: LESS
25013: IFFALSE 25049
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25015: LD_INT 0
25017: PPUSH
25018: LD_INT 5
25020: PUSH
25021: LD_INT 8
25023: PUSH
25024: LD_INT 9
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: LIST
25031: PUSH
25032: LD_VAR 0 17
25036: ARRAY
25037: PPUSH
25038: LD_VAR 0 4
25042: PPUSH
25043: CALL_OW 380
25047: GO 25066
// PrepareHuman ( false , i , skill ) ;
25049: LD_INT 0
25051: PPUSH
25052: LD_VAR 0 8
25056: PPUSH
25057: LD_VAR 0 4
25061: PPUSH
25062: CALL_OW 380
// end else
25066: GO 25085
// PrepareHuman ( false , i , skill ) ;
25068: LD_INT 0
25070: PPUSH
25071: LD_VAR 0 8
25075: PPUSH
25076: LD_VAR 0 4
25080: PPUSH
25081: CALL_OW 380
// un := CreateHuman ;
25085: LD_ADDR_VAR 0 14
25089: PUSH
25090: CALL_OW 44
25094: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25095: LD_ADDR_VAR 0 7
25099: PUSH
25100: LD_VAR 0 7
25104: PPUSH
25105: LD_INT 1
25107: PPUSH
25108: LD_VAR 0 14
25112: PPUSH
25113: CALL_OW 2
25117: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25118: LD_VAR 0 14
25122: PPUSH
25123: LD_VAR 0 9
25127: PPUSH
25128: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25132: LD_VAR 0 9
25136: PPUSH
25137: CALL_OW 313
25141: PUSH
25142: LD_INT 6
25144: EQUAL
25145: PUSH
25146: LD_VAR 0 9
25150: PPUSH
25151: CALL_OW 266
25155: PUSH
25156: LD_INT 32
25158: PUSH
25159: LD_INT 31
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: IN
25166: OR
25167: IFFALSE 24981
25169: GO 24978
25171: POP
25172: POP
// end else
25173: GO 25555
// for j = 1 to x do
25175: LD_ADDR_VAR 0 9
25179: PUSH
25180: DOUBLE
25181: LD_INT 1
25183: DEC
25184: ST_TO_ADDR
25185: LD_VAR 0 13
25189: PUSH
25190: FOR_TO
25191: IFFALSE 25553
// begin InitHc ;
25193: CALL_OW 19
// if not f then
25197: LD_VAR 0 12
25201: NOT
25202: IFFALSE 25291
// begin PrepareHuman ( false , i , skill ) ;
25204: LD_INT 0
25206: PPUSH
25207: LD_VAR 0 8
25211: PPUSH
25212: LD_VAR 0 4
25216: PPUSH
25217: CALL_OW 380
// un := CreateHuman ;
25221: LD_ADDR_VAR 0 14
25225: PUSH
25226: CALL_OW 44
25230: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25231: LD_ADDR_VAR 0 7
25235: PUSH
25236: LD_VAR 0 7
25240: PPUSH
25241: LD_INT 1
25243: PPUSH
25244: LD_VAR 0 14
25248: PPUSH
25249: CALL_OW 2
25253: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25254: LD_VAR 0 14
25258: PPUSH
25259: LD_VAR 0 1
25263: PPUSH
25264: CALL_OW 250
25268: PPUSH
25269: LD_VAR 0 1
25273: PPUSH
25274: CALL_OW 251
25278: PPUSH
25279: LD_INT 10
25281: PPUSH
25282: LD_INT 0
25284: PPUSH
25285: CALL_OW 50
// continue ;
25289: GO 25190
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25291: LD_VAR 0 12
25295: PUSH
25296: LD_INT 1
25298: ARRAY
25299: PPUSH
25300: CALL_OW 313
25304: PUSH
25305: LD_VAR 0 12
25309: PUSH
25310: LD_INT 1
25312: ARRAY
25313: PPUSH
25314: CALL_OW 266
25318: PUSH
25319: LD_INT 32
25321: PUSH
25322: LD_INT 31
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: IN
25329: AND
25330: PUSH
25331: LD_VAR 0 12
25335: PUSH
25336: LD_INT 1
25338: ARRAY
25339: PPUSH
25340: CALL_OW 313
25344: PUSH
25345: LD_INT 6
25347: EQUAL
25348: OR
25349: IFFALSE 25369
// f := Delete ( f , 1 ) ;
25351: LD_ADDR_VAR 0 12
25355: PUSH
25356: LD_VAR 0 12
25360: PPUSH
25361: LD_INT 1
25363: PPUSH
25364: CALL_OW 3
25368: ST_TO_ADDR
// if not f then
25369: LD_VAR 0 12
25373: NOT
25374: IFFALSE 25392
// begin x := x + 2 ;
25376: LD_ADDR_VAR 0 13
25380: PUSH
25381: LD_VAR 0 13
25385: PUSH
25386: LD_INT 2
25388: PLUS
25389: ST_TO_ADDR
// continue ;
25390: GO 25190
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25392: LD_VAR 0 12
25396: PUSH
25397: LD_INT 1
25399: ARRAY
25400: PPUSH
25401: CALL_OW 266
25405: PUSH
25406: LD_INT 5
25408: EQUAL
25409: IFFALSE 25483
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25411: LD_VAR 0 12
25415: PUSH
25416: LD_INT 1
25418: ARRAY
25419: PPUSH
25420: CALL_OW 313
25424: PUSH
25425: LD_INT 3
25427: LESS
25428: IFFALSE 25464
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25430: LD_INT 0
25432: PPUSH
25433: LD_INT 5
25435: PUSH
25436: LD_INT 8
25438: PUSH
25439: LD_INT 9
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: LIST
25446: PUSH
25447: LD_VAR 0 17
25451: ARRAY
25452: PPUSH
25453: LD_VAR 0 4
25457: PPUSH
25458: CALL_OW 380
25462: GO 25481
// PrepareHuman ( false , i , skill ) ;
25464: LD_INT 0
25466: PPUSH
25467: LD_VAR 0 8
25471: PPUSH
25472: LD_VAR 0 4
25476: PPUSH
25477: CALL_OW 380
// end else
25481: GO 25500
// PrepareHuman ( false , i , skill ) ;
25483: LD_INT 0
25485: PPUSH
25486: LD_VAR 0 8
25490: PPUSH
25491: LD_VAR 0 4
25495: PPUSH
25496: CALL_OW 380
// un := CreateHuman ;
25500: LD_ADDR_VAR 0 14
25504: PUSH
25505: CALL_OW 44
25509: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25510: LD_ADDR_VAR 0 7
25514: PUSH
25515: LD_VAR 0 7
25519: PPUSH
25520: LD_INT 1
25522: PPUSH
25523: LD_VAR 0 14
25527: PPUSH
25528: CALL_OW 2
25532: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25533: LD_VAR 0 14
25537: PPUSH
25538: LD_VAR 0 12
25542: PUSH
25543: LD_INT 1
25545: ARRAY
25546: PPUSH
25547: CALL_OW 52
// end ;
25551: GO 25190
25553: POP
25554: POP
// end ;
25555: GO 24492
25557: POP
25558: POP
// result := result ^ buildings ;
25559: LD_ADDR_VAR 0 7
25563: PUSH
25564: LD_VAR 0 7
25568: PUSH
25569: LD_VAR 0 18
25573: ADD
25574: ST_TO_ADDR
// end else
25575: GO 25718
// begin for i = 1 to personel do
25577: LD_ADDR_VAR 0 8
25581: PUSH
25582: DOUBLE
25583: LD_INT 1
25585: DEC
25586: ST_TO_ADDR
25587: LD_VAR 0 6
25591: PUSH
25592: FOR_TO
25593: IFFALSE 25716
// begin if i > 4 then
25595: LD_VAR 0 8
25599: PUSH
25600: LD_INT 4
25602: GREATER
25603: IFFALSE 25607
// break ;
25605: GO 25716
// x := personel [ i ] ;
25607: LD_ADDR_VAR 0 13
25611: PUSH
25612: LD_VAR 0 6
25616: PUSH
25617: LD_VAR 0 8
25621: ARRAY
25622: ST_TO_ADDR
// if x = - 1 then
25623: LD_VAR 0 13
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: EQUAL
25632: IFFALSE 25636
// continue ;
25634: GO 25592
// PrepareHuman ( false , i , skill ) ;
25636: LD_INT 0
25638: PPUSH
25639: LD_VAR 0 8
25643: PPUSH
25644: LD_VAR 0 4
25648: PPUSH
25649: CALL_OW 380
// un := CreateHuman ;
25653: LD_ADDR_VAR 0 14
25657: PUSH
25658: CALL_OW 44
25662: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25663: LD_VAR 0 14
25667: PPUSH
25668: LD_VAR 0 1
25672: PPUSH
25673: CALL_OW 250
25677: PPUSH
25678: LD_VAR 0 1
25682: PPUSH
25683: CALL_OW 251
25687: PPUSH
25688: LD_INT 10
25690: PPUSH
25691: LD_INT 0
25693: PPUSH
25694: CALL_OW 50
// result := result ^ un ;
25698: LD_ADDR_VAR 0 7
25702: PUSH
25703: LD_VAR 0 7
25707: PUSH
25708: LD_VAR 0 14
25712: ADD
25713: ST_TO_ADDR
// end ;
25714: GO 25592
25716: POP
25717: POP
// end ; end ;
25718: LD_VAR 0 7
25722: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25723: LD_INT 0
25725: PPUSH
25726: PPUSH
25727: PPUSH
25728: PPUSH
25729: PPUSH
25730: PPUSH
25731: PPUSH
25732: PPUSH
25733: PPUSH
25734: PPUSH
25735: PPUSH
25736: PPUSH
25737: PPUSH
25738: PPUSH
25739: PPUSH
25740: PPUSH
// result := false ;
25741: LD_ADDR_VAR 0 3
25745: PUSH
25746: LD_INT 0
25748: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25749: LD_VAR 0 1
25753: NOT
25754: PUSH
25755: LD_VAR 0 1
25759: PPUSH
25760: CALL_OW 266
25764: PUSH
25765: LD_INT 32
25767: PUSH
25768: LD_INT 33
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: IN
25775: NOT
25776: OR
25777: IFFALSE 25781
// exit ;
25779: GO 26890
// nat := GetNation ( tower ) ;
25781: LD_ADDR_VAR 0 12
25785: PUSH
25786: LD_VAR 0 1
25790: PPUSH
25791: CALL_OW 248
25795: ST_TO_ADDR
// side := GetSide ( tower ) ;
25796: LD_ADDR_VAR 0 16
25800: PUSH
25801: LD_VAR 0 1
25805: PPUSH
25806: CALL_OW 255
25810: ST_TO_ADDR
// x := GetX ( tower ) ;
25811: LD_ADDR_VAR 0 10
25815: PUSH
25816: LD_VAR 0 1
25820: PPUSH
25821: CALL_OW 250
25825: ST_TO_ADDR
// y := GetY ( tower ) ;
25826: LD_ADDR_VAR 0 11
25830: PUSH
25831: LD_VAR 0 1
25835: PPUSH
25836: CALL_OW 251
25840: ST_TO_ADDR
// if not x or not y then
25841: LD_VAR 0 10
25845: NOT
25846: PUSH
25847: LD_VAR 0 11
25851: NOT
25852: OR
25853: IFFALSE 25857
// exit ;
25855: GO 26890
// weapon := 0 ;
25857: LD_ADDR_VAR 0 18
25861: PUSH
25862: LD_INT 0
25864: ST_TO_ADDR
// fac_list := [ ] ;
25865: LD_ADDR_VAR 0 17
25869: PUSH
25870: EMPTY
25871: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25872: LD_ADDR_VAR 0 6
25876: PUSH
25877: LD_VAR 0 1
25881: PPUSH
25882: CALL_OW 274
25886: PPUSH
25887: LD_VAR 0 2
25891: PPUSH
25892: LD_INT 0
25894: PPUSH
25895: CALL 23461 0 3
25899: PPUSH
25900: LD_INT 30
25902: PUSH
25903: LD_INT 3
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PPUSH
25910: CALL_OW 72
25914: ST_TO_ADDR
// if not factories then
25915: LD_VAR 0 6
25919: NOT
25920: IFFALSE 25924
// exit ;
25922: GO 26890
// for i in factories do
25924: LD_ADDR_VAR 0 8
25928: PUSH
25929: LD_VAR 0 6
25933: PUSH
25934: FOR_IN
25935: IFFALSE 25960
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25937: LD_ADDR_VAR 0 17
25941: PUSH
25942: LD_VAR 0 17
25946: PUSH
25947: LD_VAR 0 8
25951: PPUSH
25952: CALL_OW 478
25956: UNION
25957: ST_TO_ADDR
25958: GO 25934
25960: POP
25961: POP
// if not fac_list then
25962: LD_VAR 0 17
25966: NOT
25967: IFFALSE 25971
// exit ;
25969: GO 26890
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25971: LD_ADDR_VAR 0 5
25975: PUSH
25976: LD_INT 4
25978: PUSH
25979: LD_INT 5
25981: PUSH
25982: LD_INT 9
25984: PUSH
25985: LD_INT 10
25987: PUSH
25988: LD_INT 6
25990: PUSH
25991: LD_INT 7
25993: PUSH
25994: LD_INT 11
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 27
26008: PUSH
26009: LD_INT 28
26011: PUSH
26012: LD_INT 26
26014: PUSH
26015: LD_INT 30
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 43
26026: PUSH
26027: LD_INT 44
26029: PUSH
26030: LD_INT 46
26032: PUSH
26033: LD_INT 45
26035: PUSH
26036: LD_INT 47
26038: PUSH
26039: LD_INT 49
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: PUSH
26055: LD_VAR 0 12
26059: ARRAY
26060: ST_TO_ADDR
// list := list isect fac_list ;
26061: LD_ADDR_VAR 0 5
26065: PUSH
26066: LD_VAR 0 5
26070: PUSH
26071: LD_VAR 0 17
26075: ISECT
26076: ST_TO_ADDR
// if not list then
26077: LD_VAR 0 5
26081: NOT
26082: IFFALSE 26086
// exit ;
26084: GO 26890
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26086: LD_VAR 0 12
26090: PUSH
26091: LD_INT 3
26093: EQUAL
26094: PUSH
26095: LD_INT 49
26097: PUSH
26098: LD_VAR 0 5
26102: IN
26103: AND
26104: PUSH
26105: LD_INT 31
26107: PPUSH
26108: LD_VAR 0 16
26112: PPUSH
26113: CALL_OW 321
26117: PUSH
26118: LD_INT 2
26120: EQUAL
26121: AND
26122: IFFALSE 26182
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26124: LD_INT 22
26126: PUSH
26127: LD_VAR 0 16
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 35
26138: PUSH
26139: LD_INT 49
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 91
26148: PUSH
26149: LD_VAR 0 1
26153: PUSH
26154: LD_INT 10
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: LIST
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: LIST
26166: PPUSH
26167: CALL_OW 69
26171: NOT
26172: IFFALSE 26182
// weapon := ru_time_lapser ;
26174: LD_ADDR_VAR 0 18
26178: PUSH
26179: LD_INT 49
26181: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26182: LD_VAR 0 12
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: IN
26197: PUSH
26198: LD_INT 11
26200: PUSH
26201: LD_VAR 0 5
26205: IN
26206: PUSH
26207: LD_INT 30
26209: PUSH
26210: LD_VAR 0 5
26214: IN
26215: OR
26216: AND
26217: PUSH
26218: LD_INT 6
26220: PPUSH
26221: LD_VAR 0 16
26225: PPUSH
26226: CALL_OW 321
26230: PUSH
26231: LD_INT 2
26233: EQUAL
26234: AND
26235: IFFALSE 26400
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26237: LD_INT 22
26239: PUSH
26240: LD_VAR 0 16
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: LD_INT 35
26254: PUSH
26255: LD_INT 11
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 35
26264: PUSH
26265: LD_INT 30
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 91
26279: PUSH
26280: LD_VAR 0 1
26284: PUSH
26285: LD_INT 18
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: PPUSH
26298: CALL_OW 69
26302: NOT
26303: PUSH
26304: LD_INT 22
26306: PUSH
26307: LD_VAR 0 16
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 2
26318: PUSH
26319: LD_INT 30
26321: PUSH
26322: LD_INT 32
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 30
26331: PUSH
26332: LD_INT 33
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 91
26346: PUSH
26347: LD_VAR 0 1
26351: PUSH
26352: LD_INT 12
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: LIST
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: LIST
26364: PUSH
26365: EMPTY
26366: LIST
26367: PPUSH
26368: CALL_OW 69
26372: PUSH
26373: LD_INT 2
26375: GREATER
26376: AND
26377: IFFALSE 26400
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26379: LD_ADDR_VAR 0 18
26383: PUSH
26384: LD_INT 11
26386: PUSH
26387: LD_INT 30
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_VAR 0 12
26398: ARRAY
26399: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26400: LD_VAR 0 18
26404: NOT
26405: PUSH
26406: LD_INT 40
26408: PPUSH
26409: LD_VAR 0 16
26413: PPUSH
26414: CALL_OW 321
26418: PUSH
26419: LD_INT 2
26421: EQUAL
26422: AND
26423: PUSH
26424: LD_INT 7
26426: PUSH
26427: LD_VAR 0 5
26431: IN
26432: PUSH
26433: LD_INT 28
26435: PUSH
26436: LD_VAR 0 5
26440: IN
26441: OR
26442: PUSH
26443: LD_INT 45
26445: PUSH
26446: LD_VAR 0 5
26450: IN
26451: OR
26452: AND
26453: IFFALSE 26707
// begin hex := GetHexInfo ( x , y ) ;
26455: LD_ADDR_VAR 0 4
26459: PUSH
26460: LD_VAR 0 10
26464: PPUSH
26465: LD_VAR 0 11
26469: PPUSH
26470: CALL_OW 546
26474: ST_TO_ADDR
// if hex [ 1 ] then
26475: LD_VAR 0 4
26479: PUSH
26480: LD_INT 1
26482: ARRAY
26483: IFFALSE 26487
// exit ;
26485: GO 26890
// height := hex [ 2 ] ;
26487: LD_ADDR_VAR 0 15
26491: PUSH
26492: LD_VAR 0 4
26496: PUSH
26497: LD_INT 2
26499: ARRAY
26500: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26501: LD_ADDR_VAR 0 14
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: LD_INT 2
26511: PUSH
26512: LD_INT 3
26514: PUSH
26515: LD_INT 5
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: ST_TO_ADDR
// for i in tmp do
26524: LD_ADDR_VAR 0 8
26528: PUSH
26529: LD_VAR 0 14
26533: PUSH
26534: FOR_IN
26535: IFFALSE 26705
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26537: LD_ADDR_VAR 0 9
26541: PUSH
26542: LD_VAR 0 10
26546: PPUSH
26547: LD_VAR 0 8
26551: PPUSH
26552: LD_INT 5
26554: PPUSH
26555: CALL_OW 272
26559: PUSH
26560: LD_VAR 0 11
26564: PPUSH
26565: LD_VAR 0 8
26569: PPUSH
26570: LD_INT 5
26572: PPUSH
26573: CALL_OW 273
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26582: LD_VAR 0 9
26586: PUSH
26587: LD_INT 1
26589: ARRAY
26590: PPUSH
26591: LD_VAR 0 9
26595: PUSH
26596: LD_INT 2
26598: ARRAY
26599: PPUSH
26600: CALL_OW 488
26604: IFFALSE 26703
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26606: LD_ADDR_VAR 0 4
26610: PUSH
26611: LD_VAR 0 9
26615: PUSH
26616: LD_INT 1
26618: ARRAY
26619: PPUSH
26620: LD_VAR 0 9
26624: PUSH
26625: LD_INT 2
26627: ARRAY
26628: PPUSH
26629: CALL_OW 546
26633: ST_TO_ADDR
// if hex [ 1 ] then
26634: LD_VAR 0 4
26638: PUSH
26639: LD_INT 1
26641: ARRAY
26642: IFFALSE 26646
// continue ;
26644: GO 26534
// h := hex [ 2 ] ;
26646: LD_ADDR_VAR 0 13
26650: PUSH
26651: LD_VAR 0 4
26655: PUSH
26656: LD_INT 2
26658: ARRAY
26659: ST_TO_ADDR
// if h + 7 < height then
26660: LD_VAR 0 13
26664: PUSH
26665: LD_INT 7
26667: PLUS
26668: PUSH
26669: LD_VAR 0 15
26673: LESS
26674: IFFALSE 26703
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26676: LD_ADDR_VAR 0 18
26680: PUSH
26681: LD_INT 7
26683: PUSH
26684: LD_INT 28
26686: PUSH
26687: LD_INT 45
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: PUSH
26695: LD_VAR 0 12
26699: ARRAY
26700: ST_TO_ADDR
// break ;
26701: GO 26705
// end ; end ; end ;
26703: GO 26534
26705: POP
26706: POP
// end ; if not weapon then
26707: LD_VAR 0 18
26711: NOT
26712: IFFALSE 26772
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26714: LD_ADDR_VAR 0 5
26718: PUSH
26719: LD_VAR 0 5
26723: PUSH
26724: LD_INT 11
26726: PUSH
26727: LD_INT 30
26729: PUSH
26730: LD_INT 49
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: DIFF
26738: ST_TO_ADDR
// if not list then
26739: LD_VAR 0 5
26743: NOT
26744: IFFALSE 26748
// exit ;
26746: GO 26890
// weapon := list [ rand ( 1 , list ) ] ;
26748: LD_ADDR_VAR 0 18
26752: PUSH
26753: LD_VAR 0 5
26757: PUSH
26758: LD_INT 1
26760: PPUSH
26761: LD_VAR 0 5
26765: PPUSH
26766: CALL_OW 12
26770: ARRAY
26771: ST_TO_ADDR
// end ; if weapon then
26772: LD_VAR 0 18
26776: IFFALSE 26890
// begin tmp := CostOfWeapon ( weapon ) ;
26778: LD_ADDR_VAR 0 14
26782: PUSH
26783: LD_VAR 0 18
26787: PPUSH
26788: CALL_OW 451
26792: ST_TO_ADDR
// j := GetBase ( tower ) ;
26793: LD_ADDR_VAR 0 9
26797: PUSH
26798: LD_VAR 0 1
26802: PPUSH
26803: CALL_OW 274
26807: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26808: LD_VAR 0 9
26812: PPUSH
26813: LD_INT 1
26815: PPUSH
26816: CALL_OW 275
26820: PUSH
26821: LD_VAR 0 14
26825: PUSH
26826: LD_INT 1
26828: ARRAY
26829: GREATEREQUAL
26830: PUSH
26831: LD_VAR 0 9
26835: PPUSH
26836: LD_INT 2
26838: PPUSH
26839: CALL_OW 275
26843: PUSH
26844: LD_VAR 0 14
26848: PUSH
26849: LD_INT 2
26851: ARRAY
26852: GREATEREQUAL
26853: AND
26854: PUSH
26855: LD_VAR 0 9
26859: PPUSH
26860: LD_INT 3
26862: PPUSH
26863: CALL_OW 275
26867: PUSH
26868: LD_VAR 0 14
26872: PUSH
26873: LD_INT 3
26875: ARRAY
26876: GREATEREQUAL
26877: AND
26878: IFFALSE 26890
// result := weapon ;
26880: LD_ADDR_VAR 0 3
26884: PUSH
26885: LD_VAR 0 18
26889: ST_TO_ADDR
// end ; end ;
26890: LD_VAR 0 3
26894: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26895: LD_INT 0
26897: PPUSH
26898: PPUSH
// result := true ;
26899: LD_ADDR_VAR 0 3
26903: PUSH
26904: LD_INT 1
26906: ST_TO_ADDR
// if array1 = array2 then
26907: LD_VAR 0 1
26911: PUSH
26912: LD_VAR 0 2
26916: EQUAL
26917: IFFALSE 26977
// begin for i = 1 to array1 do
26919: LD_ADDR_VAR 0 4
26923: PUSH
26924: DOUBLE
26925: LD_INT 1
26927: DEC
26928: ST_TO_ADDR
26929: LD_VAR 0 1
26933: PUSH
26934: FOR_TO
26935: IFFALSE 26973
// if array1 [ i ] <> array2 [ i ] then
26937: LD_VAR 0 1
26941: PUSH
26942: LD_VAR 0 4
26946: ARRAY
26947: PUSH
26948: LD_VAR 0 2
26952: PUSH
26953: LD_VAR 0 4
26957: ARRAY
26958: NONEQUAL
26959: IFFALSE 26971
// begin result := false ;
26961: LD_ADDR_VAR 0 3
26965: PUSH
26966: LD_INT 0
26968: ST_TO_ADDR
// break ;
26969: GO 26973
// end ;
26971: GO 26934
26973: POP
26974: POP
// end else
26975: GO 26985
// result := false ;
26977: LD_ADDR_VAR 0 3
26981: PUSH
26982: LD_INT 0
26984: ST_TO_ADDR
// end ;
26985: LD_VAR 0 3
26989: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26990: LD_INT 0
26992: PPUSH
26993: PPUSH
// if not array1 or not array2 then
26994: LD_VAR 0 1
26998: NOT
26999: PUSH
27000: LD_VAR 0 2
27004: NOT
27005: OR
27006: IFFALSE 27010
// exit ;
27008: GO 27074
// result := true ;
27010: LD_ADDR_VAR 0 3
27014: PUSH
27015: LD_INT 1
27017: ST_TO_ADDR
// for i = 1 to array1 do
27018: LD_ADDR_VAR 0 4
27022: PUSH
27023: DOUBLE
27024: LD_INT 1
27026: DEC
27027: ST_TO_ADDR
27028: LD_VAR 0 1
27032: PUSH
27033: FOR_TO
27034: IFFALSE 27072
// if array1 [ i ] <> array2 [ i ] then
27036: LD_VAR 0 1
27040: PUSH
27041: LD_VAR 0 4
27045: ARRAY
27046: PUSH
27047: LD_VAR 0 2
27051: PUSH
27052: LD_VAR 0 4
27056: ARRAY
27057: NONEQUAL
27058: IFFALSE 27070
// begin result := false ;
27060: LD_ADDR_VAR 0 3
27064: PUSH
27065: LD_INT 0
27067: ST_TO_ADDR
// break ;
27068: GO 27072
// end ;
27070: GO 27033
27072: POP
27073: POP
// end ;
27074: LD_VAR 0 3
27078: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27079: LD_INT 0
27081: PPUSH
27082: PPUSH
27083: PPUSH
// pom := GetBase ( fac ) ;
27084: LD_ADDR_VAR 0 5
27088: PUSH
27089: LD_VAR 0 1
27093: PPUSH
27094: CALL_OW 274
27098: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27099: LD_ADDR_VAR 0 4
27103: PUSH
27104: LD_VAR 0 2
27108: PUSH
27109: LD_INT 1
27111: ARRAY
27112: PPUSH
27113: LD_VAR 0 2
27117: PUSH
27118: LD_INT 2
27120: ARRAY
27121: PPUSH
27122: LD_VAR 0 2
27126: PUSH
27127: LD_INT 3
27129: ARRAY
27130: PPUSH
27131: LD_VAR 0 2
27135: PUSH
27136: LD_INT 4
27138: ARRAY
27139: PPUSH
27140: CALL_OW 449
27144: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27145: LD_ADDR_VAR 0 3
27149: PUSH
27150: LD_VAR 0 5
27154: PPUSH
27155: LD_INT 1
27157: PPUSH
27158: CALL_OW 275
27162: PUSH
27163: LD_VAR 0 4
27167: PUSH
27168: LD_INT 1
27170: ARRAY
27171: GREATEREQUAL
27172: PUSH
27173: LD_VAR 0 5
27177: PPUSH
27178: LD_INT 2
27180: PPUSH
27181: CALL_OW 275
27185: PUSH
27186: LD_VAR 0 4
27190: PUSH
27191: LD_INT 2
27193: ARRAY
27194: GREATEREQUAL
27195: AND
27196: PUSH
27197: LD_VAR 0 5
27201: PPUSH
27202: LD_INT 3
27204: PPUSH
27205: CALL_OW 275
27209: PUSH
27210: LD_VAR 0 4
27214: PUSH
27215: LD_INT 3
27217: ARRAY
27218: GREATEREQUAL
27219: AND
27220: ST_TO_ADDR
// end ;
27221: LD_VAR 0 3
27225: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27226: LD_INT 0
27228: PPUSH
27229: PPUSH
27230: PPUSH
27231: PPUSH
// pom := GetBase ( building ) ;
27232: LD_ADDR_VAR 0 3
27236: PUSH
27237: LD_VAR 0 1
27241: PPUSH
27242: CALL_OW 274
27246: ST_TO_ADDR
// if not pom then
27247: LD_VAR 0 3
27251: NOT
27252: IFFALSE 27256
// exit ;
27254: GO 27426
// btype := GetBType ( building ) ;
27256: LD_ADDR_VAR 0 5
27260: PUSH
27261: LD_VAR 0 1
27265: PPUSH
27266: CALL_OW 266
27270: ST_TO_ADDR
// if btype = b_armoury then
27271: LD_VAR 0 5
27275: PUSH
27276: LD_INT 4
27278: EQUAL
27279: IFFALSE 27289
// btype := b_barracks ;
27281: LD_ADDR_VAR 0 5
27285: PUSH
27286: LD_INT 5
27288: ST_TO_ADDR
// if btype = b_depot then
27289: LD_VAR 0 5
27293: PUSH
27294: LD_INT 0
27296: EQUAL
27297: IFFALSE 27307
// btype := b_warehouse ;
27299: LD_ADDR_VAR 0 5
27303: PUSH
27304: LD_INT 1
27306: ST_TO_ADDR
// if btype = b_workshop then
27307: LD_VAR 0 5
27311: PUSH
27312: LD_INT 2
27314: EQUAL
27315: IFFALSE 27325
// btype := b_factory ;
27317: LD_ADDR_VAR 0 5
27321: PUSH
27322: LD_INT 3
27324: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27325: LD_ADDR_VAR 0 4
27329: PUSH
27330: LD_VAR 0 5
27334: PPUSH
27335: LD_VAR 0 1
27339: PPUSH
27340: CALL_OW 248
27344: PPUSH
27345: CALL_OW 450
27349: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27350: LD_ADDR_VAR 0 2
27354: PUSH
27355: LD_VAR 0 3
27359: PPUSH
27360: LD_INT 1
27362: PPUSH
27363: CALL_OW 275
27367: PUSH
27368: LD_VAR 0 4
27372: PUSH
27373: LD_INT 1
27375: ARRAY
27376: GREATEREQUAL
27377: PUSH
27378: LD_VAR 0 3
27382: PPUSH
27383: LD_INT 2
27385: PPUSH
27386: CALL_OW 275
27390: PUSH
27391: LD_VAR 0 4
27395: PUSH
27396: LD_INT 2
27398: ARRAY
27399: GREATEREQUAL
27400: AND
27401: PUSH
27402: LD_VAR 0 3
27406: PPUSH
27407: LD_INT 3
27409: PPUSH
27410: CALL_OW 275
27414: PUSH
27415: LD_VAR 0 4
27419: PUSH
27420: LD_INT 3
27422: ARRAY
27423: GREATEREQUAL
27424: AND
27425: ST_TO_ADDR
// end ;
27426: LD_VAR 0 2
27430: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27431: LD_INT 0
27433: PPUSH
27434: PPUSH
27435: PPUSH
// pom := GetBase ( building ) ;
27436: LD_ADDR_VAR 0 4
27440: PUSH
27441: LD_VAR 0 1
27445: PPUSH
27446: CALL_OW 274
27450: ST_TO_ADDR
// if not pom then
27451: LD_VAR 0 4
27455: NOT
27456: IFFALSE 27460
// exit ;
27458: GO 27561
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27460: LD_ADDR_VAR 0 5
27464: PUSH
27465: LD_VAR 0 2
27469: PPUSH
27470: LD_VAR 0 1
27474: PPUSH
27475: CALL_OW 248
27479: PPUSH
27480: CALL_OW 450
27484: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27485: LD_ADDR_VAR 0 3
27489: PUSH
27490: LD_VAR 0 4
27494: PPUSH
27495: LD_INT 1
27497: PPUSH
27498: CALL_OW 275
27502: PUSH
27503: LD_VAR 0 5
27507: PUSH
27508: LD_INT 1
27510: ARRAY
27511: GREATEREQUAL
27512: PUSH
27513: LD_VAR 0 4
27517: PPUSH
27518: LD_INT 2
27520: PPUSH
27521: CALL_OW 275
27525: PUSH
27526: LD_VAR 0 5
27530: PUSH
27531: LD_INT 2
27533: ARRAY
27534: GREATEREQUAL
27535: AND
27536: PUSH
27537: LD_VAR 0 4
27541: PPUSH
27542: LD_INT 3
27544: PPUSH
27545: CALL_OW 275
27549: PUSH
27550: LD_VAR 0 5
27554: PUSH
27555: LD_INT 3
27557: ARRAY
27558: GREATEREQUAL
27559: AND
27560: ST_TO_ADDR
// end ;
27561: LD_VAR 0 3
27565: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27566: LD_INT 0
27568: PPUSH
27569: PPUSH
27570: PPUSH
27571: PPUSH
27572: PPUSH
27573: PPUSH
27574: PPUSH
27575: PPUSH
27576: PPUSH
27577: PPUSH
27578: PPUSH
// result := false ;
27579: LD_ADDR_VAR 0 8
27583: PUSH
27584: LD_INT 0
27586: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27587: LD_VAR 0 5
27591: NOT
27592: PUSH
27593: LD_VAR 0 1
27597: NOT
27598: OR
27599: PUSH
27600: LD_VAR 0 2
27604: NOT
27605: OR
27606: PUSH
27607: LD_VAR 0 3
27611: NOT
27612: OR
27613: IFFALSE 27617
// exit ;
27615: GO 28431
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27617: LD_ADDR_VAR 0 14
27621: PUSH
27622: LD_VAR 0 1
27626: PPUSH
27627: LD_VAR 0 2
27631: PPUSH
27632: LD_VAR 0 3
27636: PPUSH
27637: LD_VAR 0 4
27641: PPUSH
27642: LD_VAR 0 5
27646: PUSH
27647: LD_INT 1
27649: ARRAY
27650: PPUSH
27651: CALL_OW 248
27655: PPUSH
27656: LD_INT 0
27658: PPUSH
27659: CALL 29684 0 6
27663: ST_TO_ADDR
// if not hexes then
27664: LD_VAR 0 14
27668: NOT
27669: IFFALSE 27673
// exit ;
27671: GO 28431
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27673: LD_ADDR_VAR 0 17
27677: PUSH
27678: LD_VAR 0 5
27682: PPUSH
27683: LD_INT 22
27685: PUSH
27686: LD_VAR 0 13
27690: PPUSH
27691: CALL_OW 255
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 2
27702: PUSH
27703: LD_INT 30
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 30
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PPUSH
27732: CALL_OW 72
27736: ST_TO_ADDR
// for i = 1 to hexes do
27737: LD_ADDR_VAR 0 9
27741: PUSH
27742: DOUBLE
27743: LD_INT 1
27745: DEC
27746: ST_TO_ADDR
27747: LD_VAR 0 14
27751: PUSH
27752: FOR_TO
27753: IFFALSE 28429
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27755: LD_ADDR_VAR 0 13
27759: PUSH
27760: LD_VAR 0 14
27764: PUSH
27765: LD_VAR 0 9
27769: ARRAY
27770: PUSH
27771: LD_INT 1
27773: ARRAY
27774: PPUSH
27775: LD_VAR 0 14
27779: PUSH
27780: LD_VAR 0 9
27784: ARRAY
27785: PUSH
27786: LD_INT 2
27788: ARRAY
27789: PPUSH
27790: CALL_OW 428
27794: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27795: LD_VAR 0 14
27799: PUSH
27800: LD_VAR 0 9
27804: ARRAY
27805: PUSH
27806: LD_INT 1
27808: ARRAY
27809: PPUSH
27810: LD_VAR 0 14
27814: PUSH
27815: LD_VAR 0 9
27819: ARRAY
27820: PUSH
27821: LD_INT 2
27823: ARRAY
27824: PPUSH
27825: CALL_OW 351
27829: PUSH
27830: LD_VAR 0 14
27834: PUSH
27835: LD_VAR 0 9
27839: ARRAY
27840: PUSH
27841: LD_INT 1
27843: ARRAY
27844: PPUSH
27845: LD_VAR 0 14
27849: PUSH
27850: LD_VAR 0 9
27854: ARRAY
27855: PUSH
27856: LD_INT 2
27858: ARRAY
27859: PPUSH
27860: CALL_OW 488
27864: NOT
27865: OR
27866: PUSH
27867: LD_VAR 0 13
27871: PPUSH
27872: CALL_OW 247
27876: PUSH
27877: LD_INT 3
27879: EQUAL
27880: OR
27881: IFFALSE 27887
// exit ;
27883: POP
27884: POP
27885: GO 28431
// if not tmp then
27887: LD_VAR 0 13
27891: NOT
27892: IFFALSE 27896
// continue ;
27894: GO 27752
// result := true ;
27896: LD_ADDR_VAR 0 8
27900: PUSH
27901: LD_INT 1
27903: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27904: LD_VAR 0 6
27908: PUSH
27909: LD_VAR 0 13
27913: PPUSH
27914: CALL_OW 247
27918: PUSH
27919: LD_INT 2
27921: EQUAL
27922: AND
27923: PUSH
27924: LD_VAR 0 13
27928: PPUSH
27929: CALL_OW 263
27933: PUSH
27934: LD_INT 1
27936: EQUAL
27937: AND
27938: IFFALSE 28102
// begin if IsDrivenBy ( tmp ) then
27940: LD_VAR 0 13
27944: PPUSH
27945: CALL_OW 311
27949: IFFALSE 27953
// continue ;
27951: GO 27752
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27953: LD_VAR 0 6
27957: PPUSH
27958: LD_INT 3
27960: PUSH
27961: LD_INT 60
27963: PUSH
27964: EMPTY
27965: LIST
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 3
27973: PUSH
27974: LD_INT 55
27976: PUSH
27977: EMPTY
27978: LIST
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PPUSH
27988: CALL_OW 72
27992: IFFALSE 28100
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27994: LD_ADDR_VAR 0 18
27998: PUSH
27999: LD_VAR 0 6
28003: PPUSH
28004: LD_INT 3
28006: PUSH
28007: LD_INT 60
28009: PUSH
28010: EMPTY
28011: LIST
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 3
28019: PUSH
28020: LD_INT 55
28022: PUSH
28023: EMPTY
28024: LIST
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PPUSH
28034: CALL_OW 72
28038: PUSH
28039: LD_INT 1
28041: ARRAY
28042: ST_TO_ADDR
// if IsInUnit ( driver ) then
28043: LD_VAR 0 18
28047: PPUSH
28048: CALL_OW 310
28052: IFFALSE 28063
// ComExit ( driver ) ;
28054: LD_VAR 0 18
28058: PPUSH
28059: CALL 53463 0 1
// AddComEnterUnit ( driver , tmp ) ;
28063: LD_VAR 0 18
28067: PPUSH
28068: LD_VAR 0 13
28072: PPUSH
28073: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28077: LD_VAR 0 18
28081: PPUSH
28082: LD_VAR 0 7
28086: PPUSH
28087: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28091: LD_VAR 0 18
28095: PPUSH
28096: CALL_OW 181
// end ; continue ;
28100: GO 27752
// end ; if not cleaners or not tmp in cleaners then
28102: LD_VAR 0 6
28106: NOT
28107: PUSH
28108: LD_VAR 0 13
28112: PUSH
28113: LD_VAR 0 6
28117: IN
28118: NOT
28119: OR
28120: IFFALSE 28427
// begin if dep then
28122: LD_VAR 0 17
28126: IFFALSE 28262
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28128: LD_ADDR_VAR 0 16
28132: PUSH
28133: LD_VAR 0 17
28137: PUSH
28138: LD_INT 1
28140: ARRAY
28141: PPUSH
28142: CALL_OW 250
28146: PPUSH
28147: LD_VAR 0 17
28151: PUSH
28152: LD_INT 1
28154: ARRAY
28155: PPUSH
28156: CALL_OW 254
28160: PPUSH
28161: LD_INT 5
28163: PPUSH
28164: CALL_OW 272
28168: PUSH
28169: LD_VAR 0 17
28173: PUSH
28174: LD_INT 1
28176: ARRAY
28177: PPUSH
28178: CALL_OW 251
28182: PPUSH
28183: LD_VAR 0 17
28187: PUSH
28188: LD_INT 1
28190: ARRAY
28191: PPUSH
28192: CALL_OW 254
28196: PPUSH
28197: LD_INT 5
28199: PPUSH
28200: CALL_OW 273
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28209: LD_VAR 0 16
28213: PUSH
28214: LD_INT 1
28216: ARRAY
28217: PPUSH
28218: LD_VAR 0 16
28222: PUSH
28223: LD_INT 2
28225: ARRAY
28226: PPUSH
28227: CALL_OW 488
28231: IFFALSE 28262
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28233: LD_VAR 0 13
28237: PPUSH
28238: LD_VAR 0 16
28242: PUSH
28243: LD_INT 1
28245: ARRAY
28246: PPUSH
28247: LD_VAR 0 16
28251: PUSH
28252: LD_INT 2
28254: ARRAY
28255: PPUSH
28256: CALL_OW 111
// continue ;
28260: GO 27752
// end ; end ; r := GetDir ( tmp ) ;
28262: LD_ADDR_VAR 0 15
28266: PUSH
28267: LD_VAR 0 13
28271: PPUSH
28272: CALL_OW 254
28276: ST_TO_ADDR
// if r = 5 then
28277: LD_VAR 0 15
28281: PUSH
28282: LD_INT 5
28284: EQUAL
28285: IFFALSE 28295
// r := 0 ;
28287: LD_ADDR_VAR 0 15
28291: PUSH
28292: LD_INT 0
28294: ST_TO_ADDR
// for j = r to 5 do
28295: LD_ADDR_VAR 0 10
28299: PUSH
28300: DOUBLE
28301: LD_VAR 0 15
28305: DEC
28306: ST_TO_ADDR
28307: LD_INT 5
28309: PUSH
28310: FOR_TO
28311: IFFALSE 28425
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28313: LD_ADDR_VAR 0 11
28317: PUSH
28318: LD_VAR 0 13
28322: PPUSH
28323: CALL_OW 250
28327: PPUSH
28328: LD_VAR 0 10
28332: PPUSH
28333: LD_INT 2
28335: PPUSH
28336: CALL_OW 272
28340: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28341: LD_ADDR_VAR 0 12
28345: PUSH
28346: LD_VAR 0 13
28350: PPUSH
28351: CALL_OW 251
28355: PPUSH
28356: LD_VAR 0 10
28360: PPUSH
28361: LD_INT 2
28363: PPUSH
28364: CALL_OW 273
28368: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28369: LD_VAR 0 11
28373: PPUSH
28374: LD_VAR 0 12
28378: PPUSH
28379: CALL_OW 488
28383: PUSH
28384: LD_VAR 0 11
28388: PPUSH
28389: LD_VAR 0 12
28393: PPUSH
28394: CALL_OW 428
28398: NOT
28399: AND
28400: IFFALSE 28423
// begin ComMoveXY ( tmp , _x , _y ) ;
28402: LD_VAR 0 13
28406: PPUSH
28407: LD_VAR 0 11
28411: PPUSH
28412: LD_VAR 0 12
28416: PPUSH
28417: CALL_OW 111
// break ;
28421: GO 28425
// end ; end ;
28423: GO 28310
28425: POP
28426: POP
// end ; end ;
28427: GO 27752
28429: POP
28430: POP
// end ;
28431: LD_VAR 0 8
28435: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28436: LD_INT 0
28438: PPUSH
// result := true ;
28439: LD_ADDR_VAR 0 3
28443: PUSH
28444: LD_INT 1
28446: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28447: LD_VAR 0 2
28451: PUSH
28452: LD_INT 24
28454: DOUBLE
28455: EQUAL
28456: IFTRUE 28466
28458: LD_INT 33
28460: DOUBLE
28461: EQUAL
28462: IFTRUE 28466
28464: GO 28491
28466: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28467: LD_ADDR_VAR 0 3
28471: PUSH
28472: LD_INT 32
28474: PPUSH
28475: LD_VAR 0 1
28479: PPUSH
28480: CALL_OW 321
28484: PUSH
28485: LD_INT 2
28487: EQUAL
28488: ST_TO_ADDR
28489: GO 28807
28491: LD_INT 20
28493: DOUBLE
28494: EQUAL
28495: IFTRUE 28499
28497: GO 28524
28499: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28500: LD_ADDR_VAR 0 3
28504: PUSH
28505: LD_INT 6
28507: PPUSH
28508: LD_VAR 0 1
28512: PPUSH
28513: CALL_OW 321
28517: PUSH
28518: LD_INT 2
28520: EQUAL
28521: ST_TO_ADDR
28522: GO 28807
28524: LD_INT 22
28526: DOUBLE
28527: EQUAL
28528: IFTRUE 28538
28530: LD_INT 36
28532: DOUBLE
28533: EQUAL
28534: IFTRUE 28538
28536: GO 28563
28538: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28539: LD_ADDR_VAR 0 3
28543: PUSH
28544: LD_INT 15
28546: PPUSH
28547: LD_VAR 0 1
28551: PPUSH
28552: CALL_OW 321
28556: PUSH
28557: LD_INT 2
28559: EQUAL
28560: ST_TO_ADDR
28561: GO 28807
28563: LD_INT 30
28565: DOUBLE
28566: EQUAL
28567: IFTRUE 28571
28569: GO 28596
28571: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28572: LD_ADDR_VAR 0 3
28576: PUSH
28577: LD_INT 20
28579: PPUSH
28580: LD_VAR 0 1
28584: PPUSH
28585: CALL_OW 321
28589: PUSH
28590: LD_INT 2
28592: EQUAL
28593: ST_TO_ADDR
28594: GO 28807
28596: LD_INT 28
28598: DOUBLE
28599: EQUAL
28600: IFTRUE 28610
28602: LD_INT 21
28604: DOUBLE
28605: EQUAL
28606: IFTRUE 28610
28608: GO 28635
28610: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28611: LD_ADDR_VAR 0 3
28615: PUSH
28616: LD_INT 21
28618: PPUSH
28619: LD_VAR 0 1
28623: PPUSH
28624: CALL_OW 321
28628: PUSH
28629: LD_INT 2
28631: EQUAL
28632: ST_TO_ADDR
28633: GO 28807
28635: LD_INT 16
28637: DOUBLE
28638: EQUAL
28639: IFTRUE 28643
28641: GO 28668
28643: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28644: LD_ADDR_VAR 0 3
28648: PUSH
28649: LD_INT 84
28651: PPUSH
28652: LD_VAR 0 1
28656: PPUSH
28657: CALL_OW 321
28661: PUSH
28662: LD_INT 2
28664: EQUAL
28665: ST_TO_ADDR
28666: GO 28807
28668: LD_INT 19
28670: DOUBLE
28671: EQUAL
28672: IFTRUE 28682
28674: LD_INT 23
28676: DOUBLE
28677: EQUAL
28678: IFTRUE 28682
28680: GO 28707
28682: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28683: LD_ADDR_VAR 0 3
28687: PUSH
28688: LD_INT 83
28690: PPUSH
28691: LD_VAR 0 1
28695: PPUSH
28696: CALL_OW 321
28700: PUSH
28701: LD_INT 2
28703: EQUAL
28704: ST_TO_ADDR
28705: GO 28807
28707: LD_INT 17
28709: DOUBLE
28710: EQUAL
28711: IFTRUE 28715
28713: GO 28740
28715: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28716: LD_ADDR_VAR 0 3
28720: PUSH
28721: LD_INT 39
28723: PPUSH
28724: LD_VAR 0 1
28728: PPUSH
28729: CALL_OW 321
28733: PUSH
28734: LD_INT 2
28736: EQUAL
28737: ST_TO_ADDR
28738: GO 28807
28740: LD_INT 18
28742: DOUBLE
28743: EQUAL
28744: IFTRUE 28748
28746: GO 28773
28748: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28749: LD_ADDR_VAR 0 3
28753: PUSH
28754: LD_INT 40
28756: PPUSH
28757: LD_VAR 0 1
28761: PPUSH
28762: CALL_OW 321
28766: PUSH
28767: LD_INT 2
28769: EQUAL
28770: ST_TO_ADDR
28771: GO 28807
28773: LD_INT 27
28775: DOUBLE
28776: EQUAL
28777: IFTRUE 28781
28779: GO 28806
28781: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28782: LD_ADDR_VAR 0 3
28786: PUSH
28787: LD_INT 35
28789: PPUSH
28790: LD_VAR 0 1
28794: PPUSH
28795: CALL_OW 321
28799: PUSH
28800: LD_INT 2
28802: EQUAL
28803: ST_TO_ADDR
28804: GO 28807
28806: POP
// end ;
28807: LD_VAR 0 3
28811: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28812: LD_INT 0
28814: PPUSH
28815: PPUSH
28816: PPUSH
28817: PPUSH
28818: PPUSH
28819: PPUSH
28820: PPUSH
28821: PPUSH
28822: PPUSH
28823: PPUSH
28824: PPUSH
// result := false ;
28825: LD_ADDR_VAR 0 6
28829: PUSH
28830: LD_INT 0
28832: ST_TO_ADDR
// if btype = b_depot then
28833: LD_VAR 0 2
28837: PUSH
28838: LD_INT 0
28840: EQUAL
28841: IFFALSE 28853
// begin result := true ;
28843: LD_ADDR_VAR 0 6
28847: PUSH
28848: LD_INT 1
28850: ST_TO_ADDR
// exit ;
28851: GO 29679
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28853: LD_VAR 0 1
28857: NOT
28858: PUSH
28859: LD_VAR 0 1
28863: PPUSH
28864: CALL_OW 266
28868: PUSH
28869: LD_INT 0
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: IN
28879: NOT
28880: OR
28881: PUSH
28882: LD_VAR 0 2
28886: NOT
28887: OR
28888: PUSH
28889: LD_VAR 0 5
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: LD_INT 2
28902: PUSH
28903: LD_INT 3
28905: PUSH
28906: LD_INT 4
28908: PUSH
28909: LD_INT 5
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: IN
28920: NOT
28921: OR
28922: PUSH
28923: LD_VAR 0 3
28927: PPUSH
28928: LD_VAR 0 4
28932: PPUSH
28933: CALL_OW 488
28937: NOT
28938: OR
28939: IFFALSE 28943
// exit ;
28941: GO 29679
// side := GetSide ( depot ) ;
28943: LD_ADDR_VAR 0 9
28947: PUSH
28948: LD_VAR 0 1
28952: PPUSH
28953: CALL_OW 255
28957: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28958: LD_VAR 0 9
28962: PPUSH
28963: LD_VAR 0 2
28967: PPUSH
28968: CALL 28436 0 2
28972: NOT
28973: IFFALSE 28977
// exit ;
28975: GO 29679
// pom := GetBase ( depot ) ;
28977: LD_ADDR_VAR 0 10
28981: PUSH
28982: LD_VAR 0 1
28986: PPUSH
28987: CALL_OW 274
28991: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28992: LD_ADDR_VAR 0 11
28996: PUSH
28997: LD_VAR 0 2
29001: PPUSH
29002: LD_VAR 0 1
29006: PPUSH
29007: CALL_OW 248
29011: PPUSH
29012: CALL_OW 450
29016: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29017: LD_VAR 0 10
29021: PPUSH
29022: LD_INT 1
29024: PPUSH
29025: CALL_OW 275
29029: PUSH
29030: LD_VAR 0 11
29034: PUSH
29035: LD_INT 1
29037: ARRAY
29038: GREATEREQUAL
29039: PUSH
29040: LD_VAR 0 10
29044: PPUSH
29045: LD_INT 2
29047: PPUSH
29048: CALL_OW 275
29052: PUSH
29053: LD_VAR 0 11
29057: PUSH
29058: LD_INT 2
29060: ARRAY
29061: GREATEREQUAL
29062: AND
29063: PUSH
29064: LD_VAR 0 10
29068: PPUSH
29069: LD_INT 3
29071: PPUSH
29072: CALL_OW 275
29076: PUSH
29077: LD_VAR 0 11
29081: PUSH
29082: LD_INT 3
29084: ARRAY
29085: GREATEREQUAL
29086: AND
29087: NOT
29088: IFFALSE 29092
// exit ;
29090: GO 29679
// if GetBType ( depot ) = b_depot then
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 266
29101: PUSH
29102: LD_INT 0
29104: EQUAL
29105: IFFALSE 29117
// dist := 28 else
29107: LD_ADDR_VAR 0 14
29111: PUSH
29112: LD_INT 28
29114: ST_TO_ADDR
29115: GO 29125
// dist := 36 ;
29117: LD_ADDR_VAR 0 14
29121: PUSH
29122: LD_INT 36
29124: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29125: LD_VAR 0 1
29129: PPUSH
29130: LD_VAR 0 3
29134: PPUSH
29135: LD_VAR 0 4
29139: PPUSH
29140: CALL_OW 297
29144: PUSH
29145: LD_VAR 0 14
29149: GREATER
29150: IFFALSE 29154
// exit ;
29152: GO 29679
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29154: LD_ADDR_VAR 0 12
29158: PUSH
29159: LD_VAR 0 2
29163: PPUSH
29164: LD_VAR 0 3
29168: PPUSH
29169: LD_VAR 0 4
29173: PPUSH
29174: LD_VAR 0 5
29178: PPUSH
29179: LD_VAR 0 1
29183: PPUSH
29184: CALL_OW 248
29188: PPUSH
29189: LD_INT 0
29191: PPUSH
29192: CALL 29684 0 6
29196: ST_TO_ADDR
// if not hexes then
29197: LD_VAR 0 12
29201: NOT
29202: IFFALSE 29206
// exit ;
29204: GO 29679
// hex := GetHexInfo ( x , y ) ;
29206: LD_ADDR_VAR 0 15
29210: PUSH
29211: LD_VAR 0 3
29215: PPUSH
29216: LD_VAR 0 4
29220: PPUSH
29221: CALL_OW 546
29225: ST_TO_ADDR
// if hex [ 1 ] then
29226: LD_VAR 0 15
29230: PUSH
29231: LD_INT 1
29233: ARRAY
29234: IFFALSE 29238
// exit ;
29236: GO 29679
// height := hex [ 2 ] ;
29238: LD_ADDR_VAR 0 13
29242: PUSH
29243: LD_VAR 0 15
29247: PUSH
29248: LD_INT 2
29250: ARRAY
29251: ST_TO_ADDR
// for i = 1 to hexes do
29252: LD_ADDR_VAR 0 7
29256: PUSH
29257: DOUBLE
29258: LD_INT 1
29260: DEC
29261: ST_TO_ADDR
29262: LD_VAR 0 12
29266: PUSH
29267: FOR_TO
29268: IFFALSE 29598
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29270: LD_VAR 0 12
29274: PUSH
29275: LD_VAR 0 7
29279: ARRAY
29280: PUSH
29281: LD_INT 1
29283: ARRAY
29284: PPUSH
29285: LD_VAR 0 12
29289: PUSH
29290: LD_VAR 0 7
29294: ARRAY
29295: PUSH
29296: LD_INT 2
29298: ARRAY
29299: PPUSH
29300: CALL_OW 488
29304: NOT
29305: PUSH
29306: LD_VAR 0 12
29310: PUSH
29311: LD_VAR 0 7
29315: ARRAY
29316: PUSH
29317: LD_INT 1
29319: ARRAY
29320: PPUSH
29321: LD_VAR 0 12
29325: PUSH
29326: LD_VAR 0 7
29330: ARRAY
29331: PUSH
29332: LD_INT 2
29334: ARRAY
29335: PPUSH
29336: CALL_OW 428
29340: PUSH
29341: LD_INT 0
29343: GREATER
29344: OR
29345: PUSH
29346: LD_VAR 0 12
29350: PUSH
29351: LD_VAR 0 7
29355: ARRAY
29356: PUSH
29357: LD_INT 1
29359: ARRAY
29360: PPUSH
29361: LD_VAR 0 12
29365: PUSH
29366: LD_VAR 0 7
29370: ARRAY
29371: PUSH
29372: LD_INT 2
29374: ARRAY
29375: PPUSH
29376: CALL_OW 351
29380: OR
29381: IFFALSE 29387
// exit ;
29383: POP
29384: POP
29385: GO 29679
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29387: LD_ADDR_VAR 0 8
29391: PUSH
29392: LD_VAR 0 12
29396: PUSH
29397: LD_VAR 0 7
29401: ARRAY
29402: PUSH
29403: LD_INT 1
29405: ARRAY
29406: PPUSH
29407: LD_VAR 0 12
29411: PUSH
29412: LD_VAR 0 7
29416: ARRAY
29417: PUSH
29418: LD_INT 2
29420: ARRAY
29421: PPUSH
29422: CALL_OW 546
29426: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29427: LD_VAR 0 8
29431: PUSH
29432: LD_INT 1
29434: ARRAY
29435: PUSH
29436: LD_VAR 0 8
29440: PUSH
29441: LD_INT 2
29443: ARRAY
29444: PUSH
29445: LD_VAR 0 13
29449: PUSH
29450: LD_INT 2
29452: PLUS
29453: GREATER
29454: OR
29455: PUSH
29456: LD_VAR 0 8
29460: PUSH
29461: LD_INT 2
29463: ARRAY
29464: PUSH
29465: LD_VAR 0 13
29469: PUSH
29470: LD_INT 2
29472: MINUS
29473: LESS
29474: OR
29475: PUSH
29476: LD_VAR 0 8
29480: PUSH
29481: LD_INT 3
29483: ARRAY
29484: PUSH
29485: LD_INT 0
29487: PUSH
29488: LD_INT 8
29490: PUSH
29491: LD_INT 9
29493: PUSH
29494: LD_INT 10
29496: PUSH
29497: LD_INT 11
29499: PUSH
29500: LD_INT 12
29502: PUSH
29503: LD_INT 13
29505: PUSH
29506: LD_INT 16
29508: PUSH
29509: LD_INT 17
29511: PUSH
29512: LD_INT 18
29514: PUSH
29515: LD_INT 19
29517: PUSH
29518: LD_INT 20
29520: PUSH
29521: LD_INT 21
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: IN
29539: NOT
29540: OR
29541: PUSH
29542: LD_VAR 0 8
29546: PUSH
29547: LD_INT 5
29549: ARRAY
29550: NOT
29551: OR
29552: PUSH
29553: LD_VAR 0 8
29557: PUSH
29558: LD_INT 6
29560: ARRAY
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: LD_INT 2
29567: PUSH
29568: LD_INT 7
29570: PUSH
29571: LD_INT 9
29573: PUSH
29574: LD_INT 10
29576: PUSH
29577: LD_INT 11
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: IN
29588: NOT
29589: OR
29590: IFFALSE 29596
// exit ;
29592: POP
29593: POP
29594: GO 29679
// end ;
29596: GO 29267
29598: POP
29599: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29600: LD_VAR 0 9
29604: PPUSH
29605: LD_VAR 0 3
29609: PPUSH
29610: LD_VAR 0 4
29614: PPUSH
29615: LD_INT 20
29617: PPUSH
29618: CALL 21602 0 4
29622: PUSH
29623: LD_INT 4
29625: ARRAY
29626: IFFALSE 29630
// exit ;
29628: GO 29679
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29630: LD_VAR 0 2
29634: PUSH
29635: LD_INT 29
29637: PUSH
29638: LD_INT 30
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: IN
29645: PUSH
29646: LD_VAR 0 3
29650: PPUSH
29651: LD_VAR 0 4
29655: PPUSH
29656: LD_VAR 0 9
29660: PPUSH
29661: CALL_OW 440
29665: NOT
29666: AND
29667: IFFALSE 29671
// exit ;
29669: GO 29679
// result := true ;
29671: LD_ADDR_VAR 0 6
29675: PUSH
29676: LD_INT 1
29678: ST_TO_ADDR
// end ;
29679: LD_VAR 0 6
29683: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29684: LD_INT 0
29686: PPUSH
29687: PPUSH
29688: PPUSH
29689: PPUSH
29690: PPUSH
29691: PPUSH
29692: PPUSH
29693: PPUSH
29694: PPUSH
29695: PPUSH
29696: PPUSH
29697: PPUSH
29698: PPUSH
29699: PPUSH
29700: PPUSH
29701: PPUSH
29702: PPUSH
29703: PPUSH
29704: PPUSH
29705: PPUSH
29706: PPUSH
29707: PPUSH
29708: PPUSH
29709: PPUSH
29710: PPUSH
29711: PPUSH
29712: PPUSH
29713: PPUSH
29714: PPUSH
29715: PPUSH
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
29727: PPUSH
29728: PPUSH
29729: PPUSH
29730: PPUSH
29731: PPUSH
29732: PPUSH
29733: PPUSH
29734: PPUSH
29735: PPUSH
29736: PPUSH
29737: PPUSH
29738: PPUSH
29739: PPUSH
29740: PPUSH
29741: PPUSH
29742: PPUSH
29743: PPUSH
// result = [ ] ;
29744: LD_ADDR_VAR 0 7
29748: PUSH
29749: EMPTY
29750: ST_TO_ADDR
// temp_list = [ ] ;
29751: LD_ADDR_VAR 0 9
29755: PUSH
29756: EMPTY
29757: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29758: LD_VAR 0 4
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: LD_INT 1
29768: PUSH
29769: LD_INT 2
29771: PUSH
29772: LD_INT 3
29774: PUSH
29775: LD_INT 4
29777: PUSH
29778: LD_INT 5
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: IN
29789: NOT
29790: PUSH
29791: LD_VAR 0 1
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: IN
29806: PUSH
29807: LD_VAR 0 5
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: LD_INT 2
29817: PUSH
29818: LD_INT 3
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: LIST
29825: IN
29826: NOT
29827: AND
29828: OR
29829: IFFALSE 29833
// exit ;
29831: GO 48224
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29833: LD_VAR 0 1
29837: PUSH
29838: LD_INT 6
29840: PUSH
29841: LD_INT 7
29843: PUSH
29844: LD_INT 8
29846: PUSH
29847: LD_INT 13
29849: PUSH
29850: LD_INT 12
29852: PUSH
29853: LD_INT 15
29855: PUSH
29856: LD_INT 11
29858: PUSH
29859: LD_INT 14
29861: PUSH
29862: LD_INT 10
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: IN
29876: IFFALSE 29886
// btype = b_lab ;
29878: LD_ADDR_VAR 0 1
29882: PUSH
29883: LD_INT 6
29885: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29886: LD_VAR 0 6
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: LD_INT 2
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: IN
29905: NOT
29906: PUSH
29907: LD_VAR 0 1
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: LD_INT 3
29923: PUSH
29924: LD_INT 6
29926: PUSH
29927: LD_INT 36
29929: PUSH
29930: LD_INT 4
29932: PUSH
29933: LD_INT 5
29935: PUSH
29936: LD_INT 31
29938: PUSH
29939: LD_INT 32
29941: PUSH
29942: LD_INT 33
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: IN
29958: NOT
29959: PUSH
29960: LD_VAR 0 6
29964: PUSH
29965: LD_INT 1
29967: EQUAL
29968: AND
29969: OR
29970: PUSH
29971: LD_VAR 0 1
29975: PUSH
29976: LD_INT 2
29978: PUSH
29979: LD_INT 3
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: IN
29986: NOT
29987: PUSH
29988: LD_VAR 0 6
29992: PUSH
29993: LD_INT 2
29995: EQUAL
29996: AND
29997: OR
29998: IFFALSE 30008
// mode = 0 ;
30000: LD_ADDR_VAR 0 6
30004: PUSH
30005: LD_INT 0
30007: ST_TO_ADDR
// case mode of 0 :
30008: LD_VAR 0 6
30012: PUSH
30013: LD_INT 0
30015: DOUBLE
30016: EQUAL
30017: IFTRUE 30021
30019: GO 41474
30021: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30022: LD_ADDR_VAR 0 11
30026: PUSH
30027: LD_INT 0
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 1
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: LD_INT 1
30095: NEG
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 1
30103: NEG
30104: PUSH
30105: LD_INT 2
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: LD_INT 2
30118: NEG
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 1
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: LD_INT 2
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 0
30147: PUSH
30148: LD_INT 2
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: NEG
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: LD_INT 3
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: LD_INT 3
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30215: LD_ADDR_VAR 0 12
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: LD_INT 1
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: LD_INT 0
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: LD_INT 1
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PUSH
30275: LD_INT 0
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: LD_INT 1
30288: NEG
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 2
30307: PUSH
30308: LD_INT 0
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 2
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: LD_INT 1
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 2
30338: NEG
30339: PUSH
30340: LD_INT 0
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 2
30349: NEG
30350: PUSH
30351: LD_INT 1
30353: NEG
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 2
30361: NEG
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 3
30372: NEG
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 3
30383: NEG
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30411: LD_ADDR_VAR 0 13
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: LD_INT 0
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: LD_INT 1
30431: NEG
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 1
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 1
30469: NEG
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: NEG
30481: PUSH
30482: LD_INT 1
30484: NEG
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: LD_INT 2
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 1
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 2
30514: PUSH
30515: LD_INT 2
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 2
30534: NEG
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 2
30546: NEG
30547: PUSH
30548: LD_INT 2
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 2
30558: NEG
30559: PUSH
30560: LD_INT 3
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 3
30570: NEG
30571: PUSH
30572: LD_INT 2
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 3
30582: NEG
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30610: LD_ADDR_VAR 0 14
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: LD_INT 0
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: LD_INT 1
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 1
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 0
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 1
30668: NEG
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 1
30679: NEG
30680: PUSH
30681: LD_INT 1
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: LD_INT 2
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 0
30703: PUSH
30704: LD_INT 2
30706: NEG
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 1
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: LD_INT 2
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 1
30745: NEG
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: PUSH
30758: LD_INT 3
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: LD_INT 3
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: LD_INT 2
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30806: LD_ADDR_VAR 0 15
30810: PUSH
30811: LD_INT 0
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 0
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 1
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 0
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: NEG
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 2
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 2
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: LD_INT 1
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: NEG
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 2
30940: NEG
30941: PUSH
30942: LD_INT 1
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: LD_INT 1
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 3
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 3
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30999: LD_ADDR_VAR 0 16
31003: PUSH
31004: LD_INT 0
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: LD_INT 1
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 1
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 1
31057: NEG
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: NEG
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: LD_INT 2
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 2
31092: PUSH
31093: LD_INT 1
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 2
31102: PUSH
31103: LD_INT 2
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 2
31122: NEG
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 2
31134: NEG
31135: PUSH
31136: LD_INT 2
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 3
31146: PUSH
31147: LD_INT 2
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 3
31156: PUSH
31157: LD_INT 3
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: LD_INT 3
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31192: LD_ADDR_VAR 0 17
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 1
31250: NEG
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: LD_INT 1
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: LD_INT 2
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: LD_INT 1
31299: NEG
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 2
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 2
31368: NEG
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: NEG
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 2
31391: NEG
31392: PUSH
31393: LD_INT 2
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31422: LD_ADDR_VAR 0 18
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: LD_INT 1
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: LD_INT 0
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: LD_INT 1
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 1
31503: NEG
31504: PUSH
31505: LD_INT 2
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 2
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 2
31557: PUSH
31558: LD_INT 2
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 1
31587: NEG
31588: PUSH
31589: LD_INT 1
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: NEG
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: NEG
31622: PUSH
31623: LD_INT 2
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31652: LD_ADDR_VAR 0 19
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 0
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: LD_INT 0
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 1
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 0
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: NEG
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: NEG
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: LD_INT 2
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: LD_INT 0
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 2
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: LD_INT 2
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 2
31828: NEG
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 2
31839: NEG
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 2
31851: NEG
31852: PUSH
31853: LD_INT 2
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31882: LD_ADDR_VAR 0 20
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: LD_INT 1
31902: NEG
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: LD_INT 0
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 1
31940: NEG
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 1
31963: NEG
31964: PUSH
31965: LD_INT 2
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: LD_INT 2
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 2
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: LD_INT 2
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: LD_INT 2
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 2
32058: NEG
32059: PUSH
32060: LD_INT 0
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: NEG
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 2
32081: NEG
32082: PUSH
32083: LD_INT 2
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32112: LD_ADDR_VAR 0 21
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 0
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: LD_INT 1
32132: NEG
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: LD_INT 0
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 1
32181: NEG
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 1
32193: NEG
32194: PUSH
32195: LD_INT 2
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: LD_INT 2
32208: NEG
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: LD_INT 1
32219: NEG
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 2
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: LD_INT 2
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: LD_INT 2
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 2
32288: NEG
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 2
32299: NEG
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 2
32311: NEG
32312: PUSH
32313: LD_INT 2
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32342: LD_ADDR_VAR 0 22
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 1
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 1
32400: NEG
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 1
32411: NEG
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PUSH
32425: LD_INT 2
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: LD_INT 2
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: LD_INT 2
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: LD_INT 2
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: LD_INT 1
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 2
32518: NEG
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 2
32529: NEG
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: NEG
32542: PUSH
32543: LD_INT 2
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32572: LD_ADDR_VAR 0 23
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: LD_INT 1
32592: NEG
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: LD_INT 0
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 0
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: NEG
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: LD_INT 2
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 0
32665: PUSH
32666: LD_INT 2
32668: NEG
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: PUSH
32677: LD_INT 1
32679: NEG
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: LD_INT 0
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: LD_INT 1
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 2
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: LD_INT 2
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 2
32748: NEG
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 2
32759: NEG
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: NEG
32772: PUSH
32773: LD_INT 2
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 2
32783: NEG
32784: PUSH
32785: LD_INT 3
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: LD_INT 3
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: LD_INT 2
32810: NEG
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32852: LD_ADDR_VAR 0 24
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: NEG
32922: PUSH
32923: LD_INT 1
32925: NEG
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: LD_INT 2
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: LD_INT 2
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 1
32997: PUSH
32998: LD_INT 2
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: NEG
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 2
33039: NEG
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: LD_INT 2
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 1
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33128: LD_ADDR_VAR 0 25
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: LD_INT 1
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 2
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 2
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 2
33263: PUSH
33264: LD_INT 2
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 1
33273: PUSH
33274: LD_INT 2
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: LD_INT 2
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 2
33327: NEG
33328: PUSH
33329: LD_INT 2
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 3
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 3
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 3
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: LD_INT 3
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33402: LD_ADDR_VAR 0 26
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: LD_INT 1
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: NEG
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 2
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: LD_INT 1
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 2
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 2
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 1
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 0
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: NEG
33568: PUSH
33569: LD_INT 1
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 2
33578: NEG
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 2
33589: NEG
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 2
33601: NEG
33602: PUSH
33603: LD_INT 2
33605: NEG
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: LD_INT 3
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: LD_INT 3
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: LD_INT 1
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33678: LD_ADDR_VAR 0 27
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 0
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: PUSH
33794: LD_INT 0
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: LD_INT 2
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: LD_INT 1
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 2
33854: NEG
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 2
33865: NEG
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 2
33877: NEG
33878: PUSH
33879: LD_INT 2
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 2
33900: NEG
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 3
33911: NEG
33912: PUSH
33913: LD_INT 1
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 3
33923: NEG
33924: PUSH
33925: LD_INT 2
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33958: LD_ADDR_VAR 0 28
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: LD_INT 1
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: LD_INT 2
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 2
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 2
34093: PUSH
34094: LD_INT 2
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: LD_INT 2
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 1
34123: NEG
34124: PUSH
34125: LD_INT 1
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: LD_INT 1
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: NEG
34158: PUSH
34159: LD_INT 2
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: NEG
34170: PUSH
34171: LD_INT 3
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 1
34181: NEG
34182: PUSH
34183: LD_INT 3
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 3
34193: NEG
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 3
34205: NEG
34206: PUSH
34207: LD_INT 2
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34240: LD_ADDR_VAR 0 29
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 1
34309: NEG
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 2
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 2
34365: PUSH
34366: LD_INT 1
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: LD_INT 2
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 2
34406: NEG
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 2
34418: NEG
34419: PUSH
34420: LD_INT 2
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 2
34430: NEG
34431: PUSH
34432: LD_INT 3
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: PUSH
34443: LD_INT 1
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 3
34453: PUSH
34454: LD_INT 1
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: LD_INT 3
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: LD_INT 2
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 3
34484: NEG
34485: PUSH
34486: LD_INT 2
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34519: LD_ADDR_VAR 0 30
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: NEG
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 1
34600: NEG
34601: PUSH
34602: LD_INT 2
34604: NEG
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: LD_INT 2
34615: NEG
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: LD_INT 1
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: LD_INT 1
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: LD_INT 2
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: NEG
34709: PUSH
34710: LD_INT 3
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 3
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: LD_INT 3
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 2
34751: NEG
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 3
34762: NEG
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34797: LD_ADDR_VAR 0 31
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: LD_INT 1
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: NEG
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: LD_INT 2
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: LD_INT 1
34893: NEG
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: PUSH
34922: LD_INT 2
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: LD_INT 2
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: LD_INT 2
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 1
34951: NEG
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 2
34962: NEG
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 2
34974: NEG
34975: PUSH
34976: LD_INT 2
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 2
34986: NEG
34987: PUSH
34988: LD_INT 3
34990: NEG
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 2
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 3
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: LD_INT 3
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: LD_INT 2
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 3
35040: NEG
35041: PUSH
35042: LD_INT 2
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35075: LD_ADDR_VAR 0 32
35079: PUSH
35080: LD_INT 0
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: LD_INT 1
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 2
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: LD_INT 2
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 2
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 2
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: LD_INT 2
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 2
35241: NEG
35242: PUSH
35243: LD_INT 0
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 2
35252: NEG
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: LD_INT 3
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: LD_INT 2
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 3
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: LD_INT 3
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 2
35307: NEG
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 3
35318: NEG
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35353: LD_ADDR_VAR 0 33
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: LD_INT 1
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 1
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 1
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 1
35411: NEG
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 1
35422: NEG
35423: PUSH
35424: LD_INT 1
35426: NEG
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: LD_INT 2
35438: NEG
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 2
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: LD_INT 2
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: NEG
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 2
35519: NEG
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 2
35531: NEG
35532: PUSH
35533: LD_INT 2
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: LD_INT 3
35547: NEG
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 2
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 3
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: LD_INT 3
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 3
35597: NEG
35598: PUSH
35599: LD_INT 2
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35632: LD_ADDR_VAR 0 34
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: LD_INT 2
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: LD_INT 2
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: NEG
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 2
35788: NEG
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 2
35799: NEG
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 2
35811: NEG
35812: PUSH
35813: LD_INT 2
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: LD_INT 3
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: LD_INT 2
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 3
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: LD_INT 3
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 2
35866: NEG
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 3
35877: NEG
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35912: LD_ADDR_VAR 0 35
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: LD_INT 1
35985: NEG
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: LD_INT 1
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 2
36003: NEG
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36024: LD_ADDR_VAR 0 36
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: NEG
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: LD_INT 2
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: LD_INT 2
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36136: LD_ADDR_VAR 0 37
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36248: LD_ADDR_VAR 0 38
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 1
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 2
36339: NEG
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36360: LD_ADDR_VAR 0 39
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: LD_INT 1
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: NEG
36442: PUSH
36443: LD_INT 2
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: PUSH
36454: LD_INT 2
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36472: LD_ADDR_VAR 0 40
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 1
36492: NEG
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: NEG
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36584: LD_ADDR_VAR 0 41
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: LD_INT 1
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: LD_INT 2
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: LD_INT 1
36680: NEG
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: LD_INT 0
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 2
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 2
36708: PUSH
36709: LD_INT 2
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 2
36739: NEG
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 2
36750: NEG
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 2
36762: NEG
36763: PUSH
36764: LD_INT 2
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 2
36774: NEG
36775: PUSH
36776: LD_INT 3
36778: NEG
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 2
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 3
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 3
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 3
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 3
36827: PUSH
36828: LD_INT 3
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 2
36837: PUSH
36838: LD_INT 3
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 2
36847: NEG
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 3
36858: NEG
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 3
36869: NEG
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 3
36881: NEG
36882: PUSH
36883: LD_INT 2
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 3
36893: NEG
36894: PUSH
36895: LD_INT 3
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36934: LD_ADDR_VAR 0 42
36938: PUSH
36939: LD_INT 0
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: LD_INT 1
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 1
37015: NEG
37016: PUSH
37017: LD_INT 2
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: LD_INT 2
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 2
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: LD_INT 2
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 2
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 1
37089: NEG
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: LD_INT 1
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 2
37112: NEG
37113: PUSH
37114: LD_INT 2
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: NEG
37125: PUSH
37126: LD_INT 3
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: LD_INT 3
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: LD_INT 3
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 3
37170: PUSH
37171: LD_INT 2
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 3
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 2
37190: PUSH
37191: LD_INT 3
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: LD_INT 3
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: LD_INT 3
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: LD_INT 2
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 3
37231: NEG
37232: PUSH
37233: LD_INT 2
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 3
37243: NEG
37244: PUSH
37245: LD_INT 3
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37284: LD_ADDR_VAR 0 43
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: NEG
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: LD_INT 2
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 2
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 2
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: LD_INT 2
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 2
37450: NEG
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: LD_INT 3
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: LD_INT 3
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: LD_INT 2
37499: NEG
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: LD_INT 1
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 3
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 3
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: LD_INT 3
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: LD_INT 3
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: LD_INT 2
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 3
37580: NEG
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 3
37591: NEG
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37632: LD_ADDR_VAR 0 44
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 1
37652: NEG
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: NEG
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: LD_INT 2
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: NEG
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: LD_INT 3
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 3
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 3
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 3
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 3
37875: PUSH
37876: LD_INT 3
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 3
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: NEG
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 3
37906: NEG
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 3
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 3
37929: NEG
37930: PUSH
37931: LD_INT 2
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 3
37941: NEG
37942: PUSH
37943: LD_INT 3
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37982: LD_ADDR_VAR 0 45
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: NEG
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: NEG
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 2
38107: PUSH
38108: LD_INT 2
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: LD_INT 2
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 2
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: LD_INT 1
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: NEG
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: NEG
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 2
38172: NEG
38173: PUSH
38174: LD_INT 3
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: LD_INT 3
38188: NEG
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 3
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 3
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 3
38228: PUSH
38229: LD_INT 3
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 2
38238: PUSH
38239: LD_INT 3
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: LD_INT 3
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 3
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 2
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 3
38279: NEG
38280: PUSH
38281: LD_INT 2
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 3
38291: NEG
38292: PUSH
38293: LD_INT 3
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38332: LD_ADDR_VAR 0 46
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 0
38380: PUSH
38381: LD_INT 1
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: LD_INT 2
38428: NEG
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: LD_INT 2
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: LD_INT 2
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 2
38498: NEG
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 2
38509: NEG
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 3
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 3
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 3
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 3
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 3
38628: NEG
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 3
38639: NEG
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38680: LD_ADDR_VAR 0 47
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: LD_INT 2
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: LD_INT 2
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 2
38795: NEG
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38831: LD_ADDR_VAR 0 48
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: LD_INT 2
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 2
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38978: LD_ADDR_VAR 0 49
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 0
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 1
39047: NEG
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 2
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39122: LD_ADDR_VAR 0 50
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: LD_INT 2
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39266: LD_ADDR_VAR 0 51
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: LD_INT 2
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: LD_INT 2
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 2
39389: NEG
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39413: LD_ADDR_VAR 0 52
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: NEG
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: LD_INT 2
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 2
39517: NEG
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 2
39528: NEG
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: LD_INT 2
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39564: LD_ADDR_VAR 0 53
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: LD_INT 1
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: LD_INT 2
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: LD_INT 2
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 1
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 2
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 2
39751: NEG
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 2
39763: NEG
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39794: LD_ADDR_VAR 0 54
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: LD_INT 2
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 2
39970: NEG
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 2
39981: NEG
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 2
39993: NEG
39994: PUSH
39995: LD_INT 2
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40024: LD_ADDR_VAR 0 55
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 2
40211: NEG
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: NEG
40224: PUSH
40225: LD_INT 2
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40254: LD_ADDR_VAR 0 56
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: NEG
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: LD_INT 2
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: LD_INT 1
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 2
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 2
40441: NEG
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40484: LD_ADDR_VAR 0 57
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: LD_INT 2
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 2
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 2
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: LD_INT 2
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: LD_INT 2
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 2
40660: NEG
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40714: LD_ADDR_VAR 0 58
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 2
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: LD_INT 2
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 2
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 2
40890: NEG
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 2
40901: NEG
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 2
40913: NEG
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40944: LD_ADDR_VAR 0 59
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41032: LD_ADDR_VAR 0 60
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41120: LD_ADDR_VAR 0 61
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 1
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41208: LD_ADDR_VAR 0 62
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41296: LD_ADDR_VAR 0 63
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41384: LD_ADDR_VAR 0 64
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: ST_TO_ADDR
// end ; 1 :
41472: GO 47369
41474: LD_INT 1
41476: DOUBLE
41477: EQUAL
41478: IFTRUE 41482
41480: GO 44105
41482: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41483: LD_ADDR_VAR 0 11
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: LD_INT 3
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: LD_INT 3
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: LIST
41526: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41527: LD_ADDR_VAR 0 12
41531: PUSH
41532: LD_INT 2
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 3
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: LIST
41567: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41568: LD_ADDR_VAR 0 13
41572: PUSH
41573: LD_INT 3
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 3
41585: PUSH
41586: LD_INT 3
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: LD_INT 3
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: LIST
41607: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41608: LD_ADDR_VAR 0 14
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 3
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: LIST
41648: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41649: LD_ADDR_VAR 0 15
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 3
41667: NEG
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 3
41678: NEG
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: LIST
41692: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41693: LD_ADDR_VAR 0 16
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: LD_INT 3
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 3
41712: NEG
41713: PUSH
41714: LD_INT 2
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 3
41724: NEG
41725: PUSH
41726: LD_INT 3
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41739: LD_ADDR_VAR 0 17
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 3
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 3
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: LIST
41782: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41783: LD_ADDR_VAR 0 18
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 3
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 3
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: LIST
41823: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41824: LD_ADDR_VAR 0 19
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: LD_INT 3
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: LD_INT 3
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: LIST
41863: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41864: LD_ADDR_VAR 0 20
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: LD_INT 3
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: LD_INT 3
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: LIST
41904: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41905: LD_ADDR_VAR 0 21
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 3
41923: NEG
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 3
41934: NEG
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41949: LD_ADDR_VAR 0 22
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: LD_INT 3
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 3
41968: NEG
41969: PUSH
41970: LD_INT 2
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 3
41980: NEG
41981: PUSH
41982: LD_INT 3
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: LIST
41994: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41995: LD_ADDR_VAR 0 23
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: LD_INT 3
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: LD_INT 4
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 3
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: LIST
42038: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42039: LD_ADDR_VAR 0 24
42043: PUSH
42044: LD_INT 3
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 3
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 4
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: LIST
42079: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42080: LD_ADDR_VAR 0 25
42084: PUSH
42085: LD_INT 3
42087: PUSH
42088: LD_INT 3
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 4
42097: PUSH
42098: LD_INT 3
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 3
42107: PUSH
42108: LD_INT 4
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: LIST
42119: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42120: LD_ADDR_VAR 0 26
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 3
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: LD_INT 4
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 3
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42161: LD_ADDR_VAR 0 27
42165: PUSH
42166: LD_INT 3
42168: NEG
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 3
42179: NEG
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 4
42190: NEG
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: LIST
42204: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42205: LD_ADDR_VAR 0 28
42209: PUSH
42210: LD_INT 3
42212: NEG
42213: PUSH
42214: LD_INT 3
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 3
42224: NEG
42225: PUSH
42226: LD_INT 4
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 4
42236: NEG
42237: PUSH
42238: LD_INT 3
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: LIST
42250: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42251: LD_ADDR_VAR 0 29
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: LD_INT 3
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 3
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 2
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: LD_INT 4
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 4
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 3
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 5
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 5
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: LD_INT 4
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 6
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 6
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: LD_INT 5
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42406: LD_ADDR_VAR 0 30
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 3
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 3
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 3
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 4
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 4
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 4
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 5
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 5
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 5
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 6
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 6
42527: PUSH
42528: LD_INT 1
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42549: LD_ADDR_VAR 0 31
42553: PUSH
42554: LD_INT 3
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 3
42566: PUSH
42567: LD_INT 3
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: LD_INT 3
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 4
42586: PUSH
42587: LD_INT 3
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 4
42596: PUSH
42597: LD_INT 4
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 3
42606: PUSH
42607: LD_INT 4
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 5
42616: PUSH
42617: LD_INT 4
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 5
42626: PUSH
42627: LD_INT 5
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 4
42636: PUSH
42637: LD_INT 5
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 6
42646: PUSH
42647: LD_INT 5
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 6
42656: PUSH
42657: LD_INT 6
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 5
42666: PUSH
42667: LD_INT 6
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42688: LD_ADDR_VAR 0 32
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: LD_INT 3
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 3
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 4
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 4
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: LD_INT 3
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: LD_INT 5
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 5
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: LD_INT 4
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 6
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 6
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 5
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42831: LD_ADDR_VAR 0 33
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 3
42849: NEG
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 3
42860: NEG
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 3
42872: NEG
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 4
42883: NEG
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 4
42894: NEG
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 4
42906: NEG
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 5
42917: NEG
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 5
42928: NEG
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 5
42940: NEG
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 6
42951: NEG
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 6
42962: NEG
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42986: LD_ADDR_VAR 0 34
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: LD_INT 3
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 3
43005: NEG
43006: PUSH
43007: LD_INT 2
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 3
43017: NEG
43018: PUSH
43019: LD_INT 3
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 3
43029: NEG
43030: PUSH
43031: LD_INT 4
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 4
43041: NEG
43042: PUSH
43043: LD_INT 3
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 4
43053: NEG
43054: PUSH
43055: LD_INT 4
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 4
43065: NEG
43066: PUSH
43067: LD_INT 5
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 5
43077: NEG
43078: PUSH
43079: LD_INT 4
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 5
43089: NEG
43090: PUSH
43091: LD_INT 5
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 5
43101: NEG
43102: PUSH
43103: LD_INT 6
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 6
43113: NEG
43114: PUSH
43115: LD_INT 5
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 6
43125: NEG
43126: PUSH
43127: LD_INT 6
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43149: LD_ADDR_VAR 0 41
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: LD_INT 3
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43193: LD_ADDR_VAR 0 42
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 3
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43234: LD_ADDR_VAR 0 43
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 3
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: LD_INT 3
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: LIST
43273: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43274: LD_ADDR_VAR 0 44
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 3
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43315: LD_ADDR_VAR 0 45
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 2
43333: NEG
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 3
43344: NEG
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43359: LD_ADDR_VAR 0 46
43363: PUSH
43364: LD_INT 2
43366: NEG
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: LD_INT 3
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 3
43390: NEG
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: LIST
43404: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43405: LD_ADDR_VAR 0 47
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: LD_INT 3
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: LD_INT 3
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43438: LD_ADDR_VAR 0 48
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43469: LD_ADDR_VAR 0 49
43473: PUSH
43474: LD_INT 3
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 3
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43498: LD_ADDR_VAR 0 50
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: LD_INT 3
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43527: LD_ADDR_VAR 0 51
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43558: LD_ADDR_VAR 0 52
43562: PUSH
43563: LD_INT 3
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 3
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43591: LD_ADDR_VAR 0 53
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 3
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 3
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 2
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43635: LD_ADDR_VAR 0 54
43639: PUSH
43640: LD_INT 2
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 3
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 3
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43676: LD_ADDR_VAR 0 55
43680: PUSH
43681: LD_INT 3
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 3
43693: PUSH
43694: LD_INT 3
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: LD_INT 3
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: LIST
43715: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43716: LD_ADDR_VAR 0 56
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 3
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: LIST
43756: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43757: LD_ADDR_VAR 0 57
43761: PUSH
43762: LD_INT 2
43764: NEG
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 3
43775: NEG
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 3
43786: NEG
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: LIST
43800: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43801: LD_ADDR_VAR 0 58
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: LD_INT 3
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 3
43820: NEG
43821: PUSH
43822: LD_INT 2
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 3
43832: NEG
43833: PUSH
43834: LD_INT 3
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43847: LD_ADDR_VAR 0 59
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43891: LD_ADDR_VAR 0 60
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 2
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: LIST
43931: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43932: LD_ADDR_VAR 0 61
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: LIST
43971: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43972: LD_ADDR_VAR 0 62
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44013: LD_ADDR_VAR 0 63
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: LIST
44056: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44057: LD_ADDR_VAR 0 64
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 2
44088: NEG
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: LIST
44102: ST_TO_ADDR
// end ; 2 :
44103: GO 47369
44105: LD_INT 2
44107: DOUBLE
44108: EQUAL
44109: IFTRUE 44113
44111: GO 47368
44113: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44114: LD_ADDR_VAR 0 29
44118: PUSH
44119: LD_INT 4
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 4
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 5
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 5
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 4
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 3
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 3
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 5
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 3
44214: PUSH
44215: LD_INT 3
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 3
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 4
44234: PUSH
44235: LD_INT 3
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 4
44244: PUSH
44245: LD_INT 4
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 3
44254: PUSH
44255: LD_INT 4
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: LD_INT 3
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 4
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: PUSH
44295: LD_INT 4
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 4
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 3
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: LD_INT 4
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 5
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 5
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: LD_INT 4
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: LD_INT 3
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: LD_INT 5
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: LD_INT 3
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 3
44397: NEG
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 3
44408: NEG
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 3
44442: NEG
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 4
44453: NEG
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 4
44464: NEG
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 4
44476: NEG
44477: PUSH
44478: LD_INT 2
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 4
44499: NEG
44500: PUSH
44501: LD_INT 4
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 4
44511: NEG
44512: PUSH
44513: LD_INT 5
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 3
44523: NEG
44524: PUSH
44525: LD_INT 4
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: NEG
44536: PUSH
44537: LD_INT 3
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 4
44547: NEG
44548: PUSH
44549: LD_INT 3
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 5
44559: NEG
44560: PUSH
44561: LD_INT 4
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 5
44571: NEG
44572: PUSH
44573: LD_INT 5
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 3
44583: NEG
44584: PUSH
44585: LD_INT 5
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 5
44595: NEG
44596: PUSH
44597: LD_INT 3
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44652: LD_ADDR_VAR 0 30
44656: PUSH
44657: LD_INT 4
44659: PUSH
44660: LD_INT 4
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 4
44669: PUSH
44670: LD_INT 3
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 5
44679: PUSH
44680: LD_INT 4
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 5
44689: PUSH
44690: LD_INT 5
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 4
44699: PUSH
44700: LD_INT 5
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 3
44709: PUSH
44710: LD_INT 4
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 3
44719: PUSH
44720: LD_INT 3
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 5
44729: PUSH
44730: LD_INT 3
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: LD_INT 5
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 3
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 4
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: LD_INT 4
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: LD_INT 3
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: LD_INT 4
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 4
44842: NEG
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 4
44853: NEG
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 3
44865: NEG
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 3
44876: NEG
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 4
44887: NEG
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 5
44898: NEG
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 5
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 5
44921: NEG
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 3
44933: NEG
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 3
44944: NEG
44945: PUSH
44946: LD_INT 3
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 3
44956: NEG
44957: PUSH
44958: LD_INT 4
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 3
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 4
45004: NEG
45005: PUSH
45006: LD_INT 3
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 4
45016: NEG
45017: PUSH
45018: LD_INT 4
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: LD_INT 4
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 4
45040: NEG
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: LD_INT 4
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 5
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 4
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 3
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 3
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 4
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: LD_INT 5
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: LD_INT 3
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: LD_INT 5
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45199: LD_ADDR_VAR 0 31
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 4
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: LD_INT 3
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 4
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 5
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: LD_INT 5
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: LD_INT 4
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 5
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 3
45299: NEG
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 3
45310: NEG
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 3
45344: NEG
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 4
45355: NEG
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 4
45366: NEG
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 4
45378: NEG
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 4
45401: NEG
45402: PUSH
45403: LD_INT 4
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 4
45413: NEG
45414: PUSH
45415: LD_INT 5
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 3
45425: NEG
45426: PUSH
45427: LD_INT 4
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 3
45437: NEG
45438: PUSH
45439: LD_INT 3
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 4
45449: NEG
45450: PUSH
45451: LD_INT 3
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 5
45461: NEG
45462: PUSH
45463: LD_INT 4
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 5
45473: NEG
45474: PUSH
45475: LD_INT 5
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 3
45485: NEG
45486: PUSH
45487: LD_INT 5
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 5
45497: NEG
45498: PUSH
45499: LD_INT 3
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 3
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 4
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 3
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: LD_INT 4
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: LD_INT 2
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 4
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 4
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 4
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 5
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 5
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 4
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 3
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 3
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 5
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45749: LD_ADDR_VAR 0 32
45753: PUSH
45754: LD_INT 4
45756: NEG
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 4
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 3
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 4
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 5
45812: NEG
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 5
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 5
45835: NEG
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: NEG
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 3
45858: NEG
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 3
45870: NEG
45871: PUSH
45872: LD_INT 4
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 3
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 4
45918: NEG
45919: PUSH
45920: LD_INT 3
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 4
45930: NEG
45931: PUSH
45932: LD_INT 4
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: LD_INT 4
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 4
45954: NEG
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 4
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 5
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: LD_INT 4
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 3
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 3
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 4
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: LD_INT 5
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: LD_INT 3
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: LD_INT 5
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 3
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 4
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 4
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 3
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 4
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 4
46161: PUSH
46162: LD_INT 4
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 4
46171: PUSH
46172: LD_INT 3
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 5
46181: PUSH
46182: LD_INT 4
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 5
46191: PUSH
46192: LD_INT 5
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 4
46201: PUSH
46202: LD_INT 5
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 3
46211: PUSH
46212: LD_INT 4
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 3
46221: PUSH
46222: LD_INT 3
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 5
46231: PUSH
46232: LD_INT 3
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: LD_INT 5
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46296: LD_ADDR_VAR 0 33
46300: PUSH
46301: LD_INT 4
46303: NEG
46304: PUSH
46305: LD_INT 4
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 4
46315: NEG
46316: PUSH
46317: LD_INT 5
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 3
46327: NEG
46328: PUSH
46329: LD_INT 4
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 3
46339: NEG
46340: PUSH
46341: LD_INT 3
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 4
46351: NEG
46352: PUSH
46353: LD_INT 3
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 5
46363: NEG
46364: PUSH
46365: LD_INT 4
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 5
46375: NEG
46376: PUSH
46377: LD_INT 5
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 3
46387: NEG
46388: PUSH
46389: LD_INT 5
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 5
46399: NEG
46400: PUSH
46401: LD_INT 3
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 3
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: LD_INT 4
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 3
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: LD_INT 3
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 4
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: LD_INT 4
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 4
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 4
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 5
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 5
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 4
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 3
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 3
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 3
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 5
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 3
46606: PUSH
46607: LD_INT 3
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 3
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 4
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 4
46636: PUSH
46637: LD_INT 4
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 3
46646: PUSH
46647: LD_INT 4
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: LD_INT 3
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 4
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: LD_INT 4
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 4
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 4
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 5
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 5
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 4
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 3
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 5
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: LD_INT 3
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46834: LD_ADDR_VAR 0 34
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 4
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 5
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: LD_INT 4
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 3
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 3
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: LD_INT 4
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: LD_INT 5
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: LD_INT 3
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: LD_INT 5
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 3
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 4
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 4
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 4
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 4
47036: PUSH
47037: LD_INT 4
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 4
47046: PUSH
47047: LD_INT 3
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 5
47056: PUSH
47057: LD_INT 4
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 5
47066: PUSH
47067: LD_INT 5
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 4
47076: PUSH
47077: LD_INT 5
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: LD_INT 4
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: LD_INT 3
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 5
47106: PUSH
47107: LD_INT 3
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: LD_INT 5
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 4
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 4
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 3
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: LD_INT 4
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 4
47219: NEG
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 4
47230: NEG
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 3
47242: NEG
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 3
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 4
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 5
47275: NEG
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 5
47286: NEG
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 5
47298: NEG
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 3
47310: NEG
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: ST_TO_ADDR
// end ; end ;
47366: GO 47369
47368: POP
// case btype of b_depot , b_warehouse :
47369: LD_VAR 0 1
47373: PUSH
47374: LD_INT 0
47376: DOUBLE
47377: EQUAL
47378: IFTRUE 47388
47380: LD_INT 1
47382: DOUBLE
47383: EQUAL
47384: IFTRUE 47388
47386: GO 47589
47388: POP
// case nation of nation_american :
47389: LD_VAR 0 5
47393: PUSH
47394: LD_INT 1
47396: DOUBLE
47397: EQUAL
47398: IFTRUE 47402
47400: GO 47458
47402: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47403: LD_ADDR_VAR 0 9
47407: PUSH
47408: LD_VAR 0 11
47412: PUSH
47413: LD_VAR 0 12
47417: PUSH
47418: LD_VAR 0 13
47422: PUSH
47423: LD_VAR 0 14
47427: PUSH
47428: LD_VAR 0 15
47432: PUSH
47433: LD_VAR 0 16
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: PUSH
47446: LD_VAR 0 4
47450: PUSH
47451: LD_INT 1
47453: PLUS
47454: ARRAY
47455: ST_TO_ADDR
47456: GO 47587
47458: LD_INT 2
47460: DOUBLE
47461: EQUAL
47462: IFTRUE 47466
47464: GO 47522
47466: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47467: LD_ADDR_VAR 0 9
47471: PUSH
47472: LD_VAR 0 17
47476: PUSH
47477: LD_VAR 0 18
47481: PUSH
47482: LD_VAR 0 19
47486: PUSH
47487: LD_VAR 0 20
47491: PUSH
47492: LD_VAR 0 21
47496: PUSH
47497: LD_VAR 0 22
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: PUSH
47510: LD_VAR 0 4
47514: PUSH
47515: LD_INT 1
47517: PLUS
47518: ARRAY
47519: ST_TO_ADDR
47520: GO 47587
47522: LD_INT 3
47524: DOUBLE
47525: EQUAL
47526: IFTRUE 47530
47528: GO 47586
47530: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47531: LD_ADDR_VAR 0 9
47535: PUSH
47536: LD_VAR 0 23
47540: PUSH
47541: LD_VAR 0 24
47545: PUSH
47546: LD_VAR 0 25
47550: PUSH
47551: LD_VAR 0 26
47555: PUSH
47556: LD_VAR 0 27
47560: PUSH
47561: LD_VAR 0 28
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: PUSH
47574: LD_VAR 0 4
47578: PUSH
47579: LD_INT 1
47581: PLUS
47582: ARRAY
47583: ST_TO_ADDR
47584: GO 47587
47586: POP
47587: GO 48142
47589: LD_INT 2
47591: DOUBLE
47592: EQUAL
47593: IFTRUE 47603
47595: LD_INT 3
47597: DOUBLE
47598: EQUAL
47599: IFTRUE 47603
47601: GO 47659
47603: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47604: LD_ADDR_VAR 0 9
47608: PUSH
47609: LD_VAR 0 29
47613: PUSH
47614: LD_VAR 0 30
47618: PUSH
47619: LD_VAR 0 31
47623: PUSH
47624: LD_VAR 0 32
47628: PUSH
47629: LD_VAR 0 33
47633: PUSH
47634: LD_VAR 0 34
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: PUSH
47647: LD_VAR 0 4
47651: PUSH
47652: LD_INT 1
47654: PLUS
47655: ARRAY
47656: ST_TO_ADDR
47657: GO 48142
47659: LD_INT 16
47661: DOUBLE
47662: EQUAL
47663: IFTRUE 47721
47665: LD_INT 17
47667: DOUBLE
47668: EQUAL
47669: IFTRUE 47721
47671: LD_INT 18
47673: DOUBLE
47674: EQUAL
47675: IFTRUE 47721
47677: LD_INT 19
47679: DOUBLE
47680: EQUAL
47681: IFTRUE 47721
47683: LD_INT 22
47685: DOUBLE
47686: EQUAL
47687: IFTRUE 47721
47689: LD_INT 20
47691: DOUBLE
47692: EQUAL
47693: IFTRUE 47721
47695: LD_INT 21
47697: DOUBLE
47698: EQUAL
47699: IFTRUE 47721
47701: LD_INT 23
47703: DOUBLE
47704: EQUAL
47705: IFTRUE 47721
47707: LD_INT 24
47709: DOUBLE
47710: EQUAL
47711: IFTRUE 47721
47713: LD_INT 25
47715: DOUBLE
47716: EQUAL
47717: IFTRUE 47721
47719: GO 47777
47721: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47722: LD_ADDR_VAR 0 9
47726: PUSH
47727: LD_VAR 0 35
47731: PUSH
47732: LD_VAR 0 36
47736: PUSH
47737: LD_VAR 0 37
47741: PUSH
47742: LD_VAR 0 38
47746: PUSH
47747: LD_VAR 0 39
47751: PUSH
47752: LD_VAR 0 40
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: PUSH
47765: LD_VAR 0 4
47769: PUSH
47770: LD_INT 1
47772: PLUS
47773: ARRAY
47774: ST_TO_ADDR
47775: GO 48142
47777: LD_INT 6
47779: DOUBLE
47780: EQUAL
47781: IFTRUE 47833
47783: LD_INT 7
47785: DOUBLE
47786: EQUAL
47787: IFTRUE 47833
47789: LD_INT 8
47791: DOUBLE
47792: EQUAL
47793: IFTRUE 47833
47795: LD_INT 13
47797: DOUBLE
47798: EQUAL
47799: IFTRUE 47833
47801: LD_INT 12
47803: DOUBLE
47804: EQUAL
47805: IFTRUE 47833
47807: LD_INT 15
47809: DOUBLE
47810: EQUAL
47811: IFTRUE 47833
47813: LD_INT 11
47815: DOUBLE
47816: EQUAL
47817: IFTRUE 47833
47819: LD_INT 14
47821: DOUBLE
47822: EQUAL
47823: IFTRUE 47833
47825: LD_INT 10
47827: DOUBLE
47828: EQUAL
47829: IFTRUE 47833
47831: GO 47889
47833: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47834: LD_ADDR_VAR 0 9
47838: PUSH
47839: LD_VAR 0 41
47843: PUSH
47844: LD_VAR 0 42
47848: PUSH
47849: LD_VAR 0 43
47853: PUSH
47854: LD_VAR 0 44
47858: PUSH
47859: LD_VAR 0 45
47863: PUSH
47864: LD_VAR 0 46
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: PUSH
47877: LD_VAR 0 4
47881: PUSH
47882: LD_INT 1
47884: PLUS
47885: ARRAY
47886: ST_TO_ADDR
47887: GO 48142
47889: LD_INT 36
47891: DOUBLE
47892: EQUAL
47893: IFTRUE 47897
47895: GO 47953
47897: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47898: LD_ADDR_VAR 0 9
47902: PUSH
47903: LD_VAR 0 47
47907: PUSH
47908: LD_VAR 0 48
47912: PUSH
47913: LD_VAR 0 49
47917: PUSH
47918: LD_VAR 0 50
47922: PUSH
47923: LD_VAR 0 51
47927: PUSH
47928: LD_VAR 0 52
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: PUSH
47941: LD_VAR 0 4
47945: PUSH
47946: LD_INT 1
47948: PLUS
47949: ARRAY
47950: ST_TO_ADDR
47951: GO 48142
47953: LD_INT 4
47955: DOUBLE
47956: EQUAL
47957: IFTRUE 47979
47959: LD_INT 5
47961: DOUBLE
47962: EQUAL
47963: IFTRUE 47979
47965: LD_INT 34
47967: DOUBLE
47968: EQUAL
47969: IFTRUE 47979
47971: LD_INT 37
47973: DOUBLE
47974: EQUAL
47975: IFTRUE 47979
47977: GO 48035
47979: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47980: LD_ADDR_VAR 0 9
47984: PUSH
47985: LD_VAR 0 53
47989: PUSH
47990: LD_VAR 0 54
47994: PUSH
47995: LD_VAR 0 55
47999: PUSH
48000: LD_VAR 0 56
48004: PUSH
48005: LD_VAR 0 57
48009: PUSH
48010: LD_VAR 0 58
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: PUSH
48023: LD_VAR 0 4
48027: PUSH
48028: LD_INT 1
48030: PLUS
48031: ARRAY
48032: ST_TO_ADDR
48033: GO 48142
48035: LD_INT 31
48037: DOUBLE
48038: EQUAL
48039: IFTRUE 48085
48041: LD_INT 32
48043: DOUBLE
48044: EQUAL
48045: IFTRUE 48085
48047: LD_INT 33
48049: DOUBLE
48050: EQUAL
48051: IFTRUE 48085
48053: LD_INT 27
48055: DOUBLE
48056: EQUAL
48057: IFTRUE 48085
48059: LD_INT 26
48061: DOUBLE
48062: EQUAL
48063: IFTRUE 48085
48065: LD_INT 28
48067: DOUBLE
48068: EQUAL
48069: IFTRUE 48085
48071: LD_INT 29
48073: DOUBLE
48074: EQUAL
48075: IFTRUE 48085
48077: LD_INT 30
48079: DOUBLE
48080: EQUAL
48081: IFTRUE 48085
48083: GO 48141
48085: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48086: LD_ADDR_VAR 0 9
48090: PUSH
48091: LD_VAR 0 59
48095: PUSH
48096: LD_VAR 0 60
48100: PUSH
48101: LD_VAR 0 61
48105: PUSH
48106: LD_VAR 0 62
48110: PUSH
48111: LD_VAR 0 63
48115: PUSH
48116: LD_VAR 0 64
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: PUSH
48129: LD_VAR 0 4
48133: PUSH
48134: LD_INT 1
48136: PLUS
48137: ARRAY
48138: ST_TO_ADDR
48139: GO 48142
48141: POP
// temp_list2 = [ ] ;
48142: LD_ADDR_VAR 0 10
48146: PUSH
48147: EMPTY
48148: ST_TO_ADDR
// for i in temp_list do
48149: LD_ADDR_VAR 0 8
48153: PUSH
48154: LD_VAR 0 9
48158: PUSH
48159: FOR_IN
48160: IFFALSE 48212
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48162: LD_ADDR_VAR 0 10
48166: PUSH
48167: LD_VAR 0 10
48171: PUSH
48172: LD_VAR 0 8
48176: PUSH
48177: LD_INT 1
48179: ARRAY
48180: PUSH
48181: LD_VAR 0 2
48185: PLUS
48186: PUSH
48187: LD_VAR 0 8
48191: PUSH
48192: LD_INT 2
48194: ARRAY
48195: PUSH
48196: LD_VAR 0 3
48200: PLUS
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: EMPTY
48207: LIST
48208: ADD
48209: ST_TO_ADDR
48210: GO 48159
48212: POP
48213: POP
// result = temp_list2 ;
48214: LD_ADDR_VAR 0 7
48218: PUSH
48219: LD_VAR 0 10
48223: ST_TO_ADDR
// end ;
48224: LD_VAR 0 7
48228: RET
// export function EnemyInRange ( unit , dist ) ; begin
48229: LD_INT 0
48231: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48232: LD_ADDR_VAR 0 3
48236: PUSH
48237: LD_VAR 0 1
48241: PPUSH
48242: CALL_OW 255
48246: PPUSH
48247: LD_VAR 0 1
48251: PPUSH
48252: CALL_OW 250
48256: PPUSH
48257: LD_VAR 0 1
48261: PPUSH
48262: CALL_OW 251
48266: PPUSH
48267: LD_VAR 0 2
48271: PPUSH
48272: CALL 21602 0 4
48276: PUSH
48277: LD_INT 4
48279: ARRAY
48280: ST_TO_ADDR
// end ;
48281: LD_VAR 0 3
48285: RET
// export function PlayerSeeMe ( unit ) ; begin
48286: LD_INT 0
48288: PPUSH
// result := See ( your_side , unit ) ;
48289: LD_ADDR_VAR 0 2
48293: PUSH
48294: LD_OWVAR 2
48298: PPUSH
48299: LD_VAR 0 1
48303: PPUSH
48304: CALL_OW 292
48308: ST_TO_ADDR
// end ;
48309: LD_VAR 0 2
48313: RET
// export function ReverseDir ( unit ) ; begin
48314: LD_INT 0
48316: PPUSH
// if not unit then
48317: LD_VAR 0 1
48321: NOT
48322: IFFALSE 48326
// exit ;
48324: GO 48349
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48326: LD_ADDR_VAR 0 2
48330: PUSH
48331: LD_VAR 0 1
48335: PPUSH
48336: CALL_OW 254
48340: PUSH
48341: LD_INT 3
48343: PLUS
48344: PUSH
48345: LD_INT 6
48347: MOD
48348: ST_TO_ADDR
// end ;
48349: LD_VAR 0 2
48353: RET
// export function ReverseArray ( array ) ; var i ; begin
48354: LD_INT 0
48356: PPUSH
48357: PPUSH
// if not array then
48358: LD_VAR 0 1
48362: NOT
48363: IFFALSE 48367
// exit ;
48365: GO 48422
// result := [ ] ;
48367: LD_ADDR_VAR 0 2
48371: PUSH
48372: EMPTY
48373: ST_TO_ADDR
// for i := array downto 1 do
48374: LD_ADDR_VAR 0 3
48378: PUSH
48379: DOUBLE
48380: LD_VAR 0 1
48384: INC
48385: ST_TO_ADDR
48386: LD_INT 1
48388: PUSH
48389: FOR_DOWNTO
48390: IFFALSE 48420
// result := Join ( result , array [ i ] ) ;
48392: LD_ADDR_VAR 0 2
48396: PUSH
48397: LD_VAR 0 2
48401: PPUSH
48402: LD_VAR 0 1
48406: PUSH
48407: LD_VAR 0 3
48411: ARRAY
48412: PPUSH
48413: CALL 53065 0 2
48417: ST_TO_ADDR
48418: GO 48389
48420: POP
48421: POP
// end ;
48422: LD_VAR 0 2
48426: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48427: LD_INT 0
48429: PPUSH
48430: PPUSH
48431: PPUSH
48432: PPUSH
48433: PPUSH
48434: PPUSH
// if not unit or not hexes then
48435: LD_VAR 0 1
48439: NOT
48440: PUSH
48441: LD_VAR 0 2
48445: NOT
48446: OR
48447: IFFALSE 48451
// exit ;
48449: GO 48574
// dist := 9999 ;
48451: LD_ADDR_VAR 0 5
48455: PUSH
48456: LD_INT 9999
48458: ST_TO_ADDR
// for i = 1 to hexes do
48459: LD_ADDR_VAR 0 4
48463: PUSH
48464: DOUBLE
48465: LD_INT 1
48467: DEC
48468: ST_TO_ADDR
48469: LD_VAR 0 2
48473: PUSH
48474: FOR_TO
48475: IFFALSE 48562
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48477: LD_ADDR_VAR 0 6
48481: PUSH
48482: LD_VAR 0 1
48486: PPUSH
48487: LD_VAR 0 2
48491: PUSH
48492: LD_VAR 0 4
48496: ARRAY
48497: PUSH
48498: LD_INT 1
48500: ARRAY
48501: PPUSH
48502: LD_VAR 0 2
48506: PUSH
48507: LD_VAR 0 4
48511: ARRAY
48512: PUSH
48513: LD_INT 2
48515: ARRAY
48516: PPUSH
48517: CALL_OW 297
48521: ST_TO_ADDR
// if tdist < dist then
48522: LD_VAR 0 6
48526: PUSH
48527: LD_VAR 0 5
48531: LESS
48532: IFFALSE 48560
// begin hex := hexes [ i ] ;
48534: LD_ADDR_VAR 0 8
48538: PUSH
48539: LD_VAR 0 2
48543: PUSH
48544: LD_VAR 0 4
48548: ARRAY
48549: ST_TO_ADDR
// dist := tdist ;
48550: LD_ADDR_VAR 0 5
48554: PUSH
48555: LD_VAR 0 6
48559: ST_TO_ADDR
// end ; end ;
48560: GO 48474
48562: POP
48563: POP
// result := hex ;
48564: LD_ADDR_VAR 0 3
48568: PUSH
48569: LD_VAR 0 8
48573: ST_TO_ADDR
// end ;
48574: LD_VAR 0 3
48578: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48579: LD_INT 0
48581: PPUSH
48582: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48583: LD_VAR 0 1
48587: NOT
48588: PUSH
48589: LD_VAR 0 1
48593: PUSH
48594: LD_INT 21
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 23
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PPUSH
48618: CALL_OW 69
48622: IN
48623: NOT
48624: OR
48625: IFFALSE 48629
// exit ;
48627: GO 48676
// for i = 1 to 3 do
48629: LD_ADDR_VAR 0 3
48633: PUSH
48634: DOUBLE
48635: LD_INT 1
48637: DEC
48638: ST_TO_ADDR
48639: LD_INT 3
48641: PUSH
48642: FOR_TO
48643: IFFALSE 48674
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48645: LD_VAR 0 1
48649: PPUSH
48650: CALL_OW 250
48654: PPUSH
48655: LD_VAR 0 1
48659: PPUSH
48660: CALL_OW 251
48664: PPUSH
48665: LD_INT 1
48667: PPUSH
48668: CALL_OW 453
48672: GO 48642
48674: POP
48675: POP
// end ;
48676: LD_VAR 0 2
48680: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48681: LD_INT 0
48683: PPUSH
48684: PPUSH
48685: PPUSH
48686: PPUSH
48687: PPUSH
48688: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48689: LD_VAR 0 1
48693: NOT
48694: PUSH
48695: LD_VAR 0 2
48699: NOT
48700: OR
48701: PUSH
48702: LD_VAR 0 1
48706: PPUSH
48707: CALL_OW 314
48711: OR
48712: IFFALSE 48716
// exit ;
48714: GO 49183
// if GetLives ( i ) < 250 then
48716: LD_VAR 0 4
48720: PPUSH
48721: CALL_OW 256
48725: PUSH
48726: LD_INT 250
48728: LESS
48729: IFFALSE 48742
// begin ComAutodestruct ( i ) ;
48731: LD_VAR 0 4
48735: PPUSH
48736: CALL 48579 0 1
// exit ;
48740: GO 49183
// end ; x := GetX ( enemy_unit ) ;
48742: LD_ADDR_VAR 0 7
48746: PUSH
48747: LD_VAR 0 2
48751: PPUSH
48752: CALL_OW 250
48756: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48757: LD_ADDR_VAR 0 8
48761: PUSH
48762: LD_VAR 0 2
48766: PPUSH
48767: CALL_OW 251
48771: ST_TO_ADDR
// if not x or not y then
48772: LD_VAR 0 7
48776: NOT
48777: PUSH
48778: LD_VAR 0 8
48782: NOT
48783: OR
48784: IFFALSE 48788
// exit ;
48786: GO 49183
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48788: LD_ADDR_VAR 0 6
48792: PUSH
48793: LD_VAR 0 7
48797: PPUSH
48798: LD_INT 0
48800: PPUSH
48801: LD_INT 4
48803: PPUSH
48804: CALL_OW 272
48808: PUSH
48809: LD_VAR 0 8
48813: PPUSH
48814: LD_INT 0
48816: PPUSH
48817: LD_INT 4
48819: PPUSH
48820: CALL_OW 273
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_VAR 0 7
48833: PPUSH
48834: LD_INT 1
48836: PPUSH
48837: LD_INT 4
48839: PPUSH
48840: CALL_OW 272
48844: PUSH
48845: LD_VAR 0 8
48849: PPUSH
48850: LD_INT 1
48852: PPUSH
48853: LD_INT 4
48855: PPUSH
48856: CALL_OW 273
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_VAR 0 7
48869: PPUSH
48870: LD_INT 2
48872: PPUSH
48873: LD_INT 4
48875: PPUSH
48876: CALL_OW 272
48880: PUSH
48881: LD_VAR 0 8
48885: PPUSH
48886: LD_INT 2
48888: PPUSH
48889: LD_INT 4
48891: PPUSH
48892: CALL_OW 273
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_VAR 0 7
48905: PPUSH
48906: LD_INT 3
48908: PPUSH
48909: LD_INT 4
48911: PPUSH
48912: CALL_OW 272
48916: PUSH
48917: LD_VAR 0 8
48921: PPUSH
48922: LD_INT 3
48924: PPUSH
48925: LD_INT 4
48927: PPUSH
48928: CALL_OW 273
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_VAR 0 7
48941: PPUSH
48942: LD_INT 4
48944: PPUSH
48945: LD_INT 4
48947: PPUSH
48948: CALL_OW 272
48952: PUSH
48953: LD_VAR 0 8
48957: PPUSH
48958: LD_INT 4
48960: PPUSH
48961: LD_INT 4
48963: PPUSH
48964: CALL_OW 273
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_VAR 0 7
48977: PPUSH
48978: LD_INT 5
48980: PPUSH
48981: LD_INT 4
48983: PPUSH
48984: CALL_OW 272
48988: PUSH
48989: LD_VAR 0 8
48993: PPUSH
48994: LD_INT 5
48996: PPUSH
48997: LD_INT 4
48999: PPUSH
49000: CALL_OW 273
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: ST_TO_ADDR
// for i = tmp downto 1 do
49017: LD_ADDR_VAR 0 4
49021: PUSH
49022: DOUBLE
49023: LD_VAR 0 6
49027: INC
49028: ST_TO_ADDR
49029: LD_INT 1
49031: PUSH
49032: FOR_DOWNTO
49033: IFFALSE 49134
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49035: LD_VAR 0 6
49039: PUSH
49040: LD_VAR 0 4
49044: ARRAY
49045: PUSH
49046: LD_INT 1
49048: ARRAY
49049: PPUSH
49050: LD_VAR 0 6
49054: PUSH
49055: LD_VAR 0 4
49059: ARRAY
49060: PUSH
49061: LD_INT 2
49063: ARRAY
49064: PPUSH
49065: CALL_OW 488
49069: NOT
49070: PUSH
49071: LD_VAR 0 6
49075: PUSH
49076: LD_VAR 0 4
49080: ARRAY
49081: PUSH
49082: LD_INT 1
49084: ARRAY
49085: PPUSH
49086: LD_VAR 0 6
49090: PUSH
49091: LD_VAR 0 4
49095: ARRAY
49096: PUSH
49097: LD_INT 2
49099: ARRAY
49100: PPUSH
49101: CALL_OW 428
49105: PUSH
49106: LD_INT 0
49108: NONEQUAL
49109: OR
49110: IFFALSE 49132
// tmp := Delete ( tmp , i ) ;
49112: LD_ADDR_VAR 0 6
49116: PUSH
49117: LD_VAR 0 6
49121: PPUSH
49122: LD_VAR 0 4
49126: PPUSH
49127: CALL_OW 3
49131: ST_TO_ADDR
49132: GO 49032
49134: POP
49135: POP
// j := GetClosestHex ( unit , tmp ) ;
49136: LD_ADDR_VAR 0 5
49140: PUSH
49141: LD_VAR 0 1
49145: PPUSH
49146: LD_VAR 0 6
49150: PPUSH
49151: CALL 48427 0 2
49155: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49156: LD_VAR 0 1
49160: PPUSH
49161: LD_VAR 0 5
49165: PUSH
49166: LD_INT 1
49168: ARRAY
49169: PPUSH
49170: LD_VAR 0 5
49174: PUSH
49175: LD_INT 2
49177: ARRAY
49178: PPUSH
49179: CALL_OW 111
// end ;
49183: LD_VAR 0 3
49187: RET
// export function PrepareApemanSoldier ( ) ; begin
49188: LD_INT 0
49190: PPUSH
// uc_nation := 0 ;
49191: LD_ADDR_OWVAR 21
49195: PUSH
49196: LD_INT 0
49198: ST_TO_ADDR
// hc_sex := sex_male ;
49199: LD_ADDR_OWVAR 27
49203: PUSH
49204: LD_INT 1
49206: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49207: LD_ADDR_OWVAR 28
49211: PUSH
49212: LD_INT 15
49214: ST_TO_ADDR
// hc_gallery :=  ;
49215: LD_ADDR_OWVAR 33
49219: PUSH
49220: LD_STRING 
49222: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49223: LD_ADDR_OWVAR 31
49227: PUSH
49228: LD_INT 0
49230: PPUSH
49231: LD_INT 3
49233: PPUSH
49234: CALL_OW 12
49238: PUSH
49239: LD_INT 0
49241: PPUSH
49242: LD_INT 3
49244: PPUSH
49245: CALL_OW 12
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: ST_TO_ADDR
// end ;
49262: LD_VAR 0 1
49266: RET
// export function PrepareApemanEngineer ( ) ; begin
49267: LD_INT 0
49269: PPUSH
// uc_nation := 0 ;
49270: LD_ADDR_OWVAR 21
49274: PUSH
49275: LD_INT 0
49277: ST_TO_ADDR
// hc_sex := sex_male ;
49278: LD_ADDR_OWVAR 27
49282: PUSH
49283: LD_INT 1
49285: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49286: LD_ADDR_OWVAR 28
49290: PUSH
49291: LD_INT 16
49293: ST_TO_ADDR
// hc_gallery :=  ;
49294: LD_ADDR_OWVAR 33
49298: PUSH
49299: LD_STRING 
49301: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49302: LD_ADDR_OWVAR 31
49306: PUSH
49307: LD_INT 0
49309: PPUSH
49310: LD_INT 3
49312: PPUSH
49313: CALL_OW 12
49317: PUSH
49318: LD_INT 0
49320: PPUSH
49321: LD_INT 3
49323: PPUSH
49324: CALL_OW 12
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: ST_TO_ADDR
// end ;
49341: LD_VAR 0 1
49345: RET
// export function PrepareApeman ( agressivity ) ; begin
49346: LD_INT 0
49348: PPUSH
// uc_side := 0 ;
49349: LD_ADDR_OWVAR 20
49353: PUSH
49354: LD_INT 0
49356: ST_TO_ADDR
// uc_nation := 0 ;
49357: LD_ADDR_OWVAR 21
49361: PUSH
49362: LD_INT 0
49364: ST_TO_ADDR
// hc_sex := sex_male ;
49365: LD_ADDR_OWVAR 27
49369: PUSH
49370: LD_INT 1
49372: ST_TO_ADDR
// hc_class := class_apeman ;
49373: LD_ADDR_OWVAR 28
49377: PUSH
49378: LD_INT 12
49380: ST_TO_ADDR
// hc_gallery :=  ;
49381: LD_ADDR_OWVAR 33
49385: PUSH
49386: LD_STRING 
49388: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49389: LD_ADDR_OWVAR 35
49393: PUSH
49394: LD_VAR 0 1
49398: NEG
49399: PPUSH
49400: LD_VAR 0 1
49404: PPUSH
49405: CALL_OW 12
49409: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49410: LD_ADDR_OWVAR 31
49414: PUSH
49415: LD_INT 0
49417: PPUSH
49418: LD_INT 3
49420: PPUSH
49421: CALL_OW 12
49425: PUSH
49426: LD_INT 0
49428: PPUSH
49429: LD_INT 3
49431: PPUSH
49432: CALL_OW 12
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: ST_TO_ADDR
// end ;
49449: LD_VAR 0 2
49453: RET
// export function PrepareTiger ( agressivity ) ; begin
49454: LD_INT 0
49456: PPUSH
// uc_side := 0 ;
49457: LD_ADDR_OWVAR 20
49461: PUSH
49462: LD_INT 0
49464: ST_TO_ADDR
// uc_nation := 0 ;
49465: LD_ADDR_OWVAR 21
49469: PUSH
49470: LD_INT 0
49472: ST_TO_ADDR
// hc_class := class_tiger ;
49473: LD_ADDR_OWVAR 28
49477: PUSH
49478: LD_INT 14
49480: ST_TO_ADDR
// hc_gallery :=  ;
49481: LD_ADDR_OWVAR 33
49485: PUSH
49486: LD_STRING 
49488: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49489: LD_ADDR_OWVAR 35
49493: PUSH
49494: LD_VAR 0 1
49498: NEG
49499: PPUSH
49500: LD_VAR 0 1
49504: PPUSH
49505: CALL_OW 12
49509: ST_TO_ADDR
// end ;
49510: LD_VAR 0 2
49514: RET
// export function PrepareEnchidna ( ) ; begin
49515: LD_INT 0
49517: PPUSH
// uc_side := 0 ;
49518: LD_ADDR_OWVAR 20
49522: PUSH
49523: LD_INT 0
49525: ST_TO_ADDR
// uc_nation := 0 ;
49526: LD_ADDR_OWVAR 21
49530: PUSH
49531: LD_INT 0
49533: ST_TO_ADDR
// hc_class := class_baggie ;
49534: LD_ADDR_OWVAR 28
49538: PUSH
49539: LD_INT 13
49541: ST_TO_ADDR
// hc_gallery :=  ;
49542: LD_ADDR_OWVAR 33
49546: PUSH
49547: LD_STRING 
49549: ST_TO_ADDR
// end ;
49550: LD_VAR 0 1
49554: RET
// export function PrepareFrog ( ) ; begin
49555: LD_INT 0
49557: PPUSH
// uc_side := 0 ;
49558: LD_ADDR_OWVAR 20
49562: PUSH
49563: LD_INT 0
49565: ST_TO_ADDR
// uc_nation := 0 ;
49566: LD_ADDR_OWVAR 21
49570: PUSH
49571: LD_INT 0
49573: ST_TO_ADDR
// hc_class := class_frog ;
49574: LD_ADDR_OWVAR 28
49578: PUSH
49579: LD_INT 19
49581: ST_TO_ADDR
// hc_gallery :=  ;
49582: LD_ADDR_OWVAR 33
49586: PUSH
49587: LD_STRING 
49589: ST_TO_ADDR
// end ;
49590: LD_VAR 0 1
49594: RET
// export function PrepareFish ( ) ; begin
49595: LD_INT 0
49597: PPUSH
// uc_side := 0 ;
49598: LD_ADDR_OWVAR 20
49602: PUSH
49603: LD_INT 0
49605: ST_TO_ADDR
// uc_nation := 0 ;
49606: LD_ADDR_OWVAR 21
49610: PUSH
49611: LD_INT 0
49613: ST_TO_ADDR
// hc_class := class_fish ;
49614: LD_ADDR_OWVAR 28
49618: PUSH
49619: LD_INT 20
49621: ST_TO_ADDR
// hc_gallery :=  ;
49622: LD_ADDR_OWVAR 33
49626: PUSH
49627: LD_STRING 
49629: ST_TO_ADDR
// end ;
49630: LD_VAR 0 1
49634: RET
// export function PrepareBird ( ) ; begin
49635: LD_INT 0
49637: PPUSH
// uc_side := 0 ;
49638: LD_ADDR_OWVAR 20
49642: PUSH
49643: LD_INT 0
49645: ST_TO_ADDR
// uc_nation := 0 ;
49646: LD_ADDR_OWVAR 21
49650: PUSH
49651: LD_INT 0
49653: ST_TO_ADDR
// hc_class := class_phororhacos ;
49654: LD_ADDR_OWVAR 28
49658: PUSH
49659: LD_INT 18
49661: ST_TO_ADDR
// hc_gallery :=  ;
49662: LD_ADDR_OWVAR 33
49666: PUSH
49667: LD_STRING 
49669: ST_TO_ADDR
// end ;
49670: LD_VAR 0 1
49674: RET
// export function PrepareHorse ( ) ; begin
49675: LD_INT 0
49677: PPUSH
// uc_side := 0 ;
49678: LD_ADDR_OWVAR 20
49682: PUSH
49683: LD_INT 0
49685: ST_TO_ADDR
// uc_nation := 0 ;
49686: LD_ADDR_OWVAR 21
49690: PUSH
49691: LD_INT 0
49693: ST_TO_ADDR
// hc_class := class_horse ;
49694: LD_ADDR_OWVAR 28
49698: PUSH
49699: LD_INT 21
49701: ST_TO_ADDR
// hc_gallery :=  ;
49702: LD_ADDR_OWVAR 33
49706: PUSH
49707: LD_STRING 
49709: ST_TO_ADDR
// end ;
49710: LD_VAR 0 1
49714: RET
// export function PrepareMastodont ( ) ; begin
49715: LD_INT 0
49717: PPUSH
// uc_side := 0 ;
49718: LD_ADDR_OWVAR 20
49722: PUSH
49723: LD_INT 0
49725: ST_TO_ADDR
// uc_nation := 0 ;
49726: LD_ADDR_OWVAR 21
49730: PUSH
49731: LD_INT 0
49733: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49734: LD_ADDR_OWVAR 37
49738: PUSH
49739: LD_INT 31
49741: ST_TO_ADDR
// vc_control := control_rider ;
49742: LD_ADDR_OWVAR 38
49746: PUSH
49747: LD_INT 4
49749: ST_TO_ADDR
// end ;
49750: LD_VAR 0 1
49754: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49755: LD_INT 0
49757: PPUSH
49758: PPUSH
49759: PPUSH
// uc_side = 0 ;
49760: LD_ADDR_OWVAR 20
49764: PUSH
49765: LD_INT 0
49767: ST_TO_ADDR
// uc_nation = 0 ;
49768: LD_ADDR_OWVAR 21
49772: PUSH
49773: LD_INT 0
49775: ST_TO_ADDR
// InitHc_All ( ) ;
49776: CALL_OW 584
// InitVc ;
49780: CALL_OW 20
// if mastodonts then
49784: LD_VAR 0 6
49788: IFFALSE 49855
// for i = 1 to mastodonts do
49790: LD_ADDR_VAR 0 11
49794: PUSH
49795: DOUBLE
49796: LD_INT 1
49798: DEC
49799: ST_TO_ADDR
49800: LD_VAR 0 6
49804: PUSH
49805: FOR_TO
49806: IFFALSE 49853
// begin vc_chassis := 31 ;
49808: LD_ADDR_OWVAR 37
49812: PUSH
49813: LD_INT 31
49815: ST_TO_ADDR
// vc_control := control_rider ;
49816: LD_ADDR_OWVAR 38
49820: PUSH
49821: LD_INT 4
49823: ST_TO_ADDR
// animal := CreateVehicle ;
49824: LD_ADDR_VAR 0 12
49828: PUSH
49829: CALL_OW 45
49833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49834: LD_VAR 0 12
49838: PPUSH
49839: LD_VAR 0 8
49843: PPUSH
49844: LD_INT 0
49846: PPUSH
49847: CALL 51983 0 3
// end ;
49851: GO 49805
49853: POP
49854: POP
// if horses then
49855: LD_VAR 0 5
49859: IFFALSE 49926
// for i = 1 to horses do
49861: LD_ADDR_VAR 0 11
49865: PUSH
49866: DOUBLE
49867: LD_INT 1
49869: DEC
49870: ST_TO_ADDR
49871: LD_VAR 0 5
49875: PUSH
49876: FOR_TO
49877: IFFALSE 49924
// begin hc_class := 21 ;
49879: LD_ADDR_OWVAR 28
49883: PUSH
49884: LD_INT 21
49886: ST_TO_ADDR
// hc_gallery :=  ;
49887: LD_ADDR_OWVAR 33
49891: PUSH
49892: LD_STRING 
49894: ST_TO_ADDR
// animal := CreateHuman ;
49895: LD_ADDR_VAR 0 12
49899: PUSH
49900: CALL_OW 44
49904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49905: LD_VAR 0 12
49909: PPUSH
49910: LD_VAR 0 8
49914: PPUSH
49915: LD_INT 0
49917: PPUSH
49918: CALL 51983 0 3
// end ;
49922: GO 49876
49924: POP
49925: POP
// if birds then
49926: LD_VAR 0 1
49930: IFFALSE 49997
// for i = 1 to birds do
49932: LD_ADDR_VAR 0 11
49936: PUSH
49937: DOUBLE
49938: LD_INT 1
49940: DEC
49941: ST_TO_ADDR
49942: LD_VAR 0 1
49946: PUSH
49947: FOR_TO
49948: IFFALSE 49995
// begin hc_class := 18 ;
49950: LD_ADDR_OWVAR 28
49954: PUSH
49955: LD_INT 18
49957: ST_TO_ADDR
// hc_gallery =  ;
49958: LD_ADDR_OWVAR 33
49962: PUSH
49963: LD_STRING 
49965: ST_TO_ADDR
// animal := CreateHuman ;
49966: LD_ADDR_VAR 0 12
49970: PUSH
49971: CALL_OW 44
49975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49976: LD_VAR 0 12
49980: PPUSH
49981: LD_VAR 0 8
49985: PPUSH
49986: LD_INT 0
49988: PPUSH
49989: CALL 51983 0 3
// end ;
49993: GO 49947
49995: POP
49996: POP
// if tigers then
49997: LD_VAR 0 2
50001: IFFALSE 50085
// for i = 1 to tigers do
50003: LD_ADDR_VAR 0 11
50007: PUSH
50008: DOUBLE
50009: LD_INT 1
50011: DEC
50012: ST_TO_ADDR
50013: LD_VAR 0 2
50017: PUSH
50018: FOR_TO
50019: IFFALSE 50083
// begin hc_class = class_tiger ;
50021: LD_ADDR_OWVAR 28
50025: PUSH
50026: LD_INT 14
50028: ST_TO_ADDR
// hc_gallery =  ;
50029: LD_ADDR_OWVAR 33
50033: PUSH
50034: LD_STRING 
50036: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50037: LD_ADDR_OWVAR 35
50041: PUSH
50042: LD_INT 7
50044: NEG
50045: PPUSH
50046: LD_INT 7
50048: PPUSH
50049: CALL_OW 12
50053: ST_TO_ADDR
// animal := CreateHuman ;
50054: LD_ADDR_VAR 0 12
50058: PUSH
50059: CALL_OW 44
50063: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50064: LD_VAR 0 12
50068: PPUSH
50069: LD_VAR 0 8
50073: PPUSH
50074: LD_INT 0
50076: PPUSH
50077: CALL 51983 0 3
// end ;
50081: GO 50018
50083: POP
50084: POP
// if apemans then
50085: LD_VAR 0 3
50089: IFFALSE 50212
// for i = 1 to apemans do
50091: LD_ADDR_VAR 0 11
50095: PUSH
50096: DOUBLE
50097: LD_INT 1
50099: DEC
50100: ST_TO_ADDR
50101: LD_VAR 0 3
50105: PUSH
50106: FOR_TO
50107: IFFALSE 50210
// begin hc_class = class_apeman ;
50109: LD_ADDR_OWVAR 28
50113: PUSH
50114: LD_INT 12
50116: ST_TO_ADDR
// hc_gallery =  ;
50117: LD_ADDR_OWVAR 33
50121: PUSH
50122: LD_STRING 
50124: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50125: LD_ADDR_OWVAR 35
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PPUSH
50134: LD_INT 2
50136: PPUSH
50137: CALL_OW 12
50141: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50142: LD_ADDR_OWVAR 31
50146: PUSH
50147: LD_INT 1
50149: PPUSH
50150: LD_INT 3
50152: PPUSH
50153: CALL_OW 12
50157: PUSH
50158: LD_INT 1
50160: PPUSH
50161: LD_INT 3
50163: PPUSH
50164: CALL_OW 12
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: ST_TO_ADDR
// animal := CreateHuman ;
50181: LD_ADDR_VAR 0 12
50185: PUSH
50186: CALL_OW 44
50190: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50191: LD_VAR 0 12
50195: PPUSH
50196: LD_VAR 0 8
50200: PPUSH
50201: LD_INT 0
50203: PPUSH
50204: CALL 51983 0 3
// end ;
50208: GO 50106
50210: POP
50211: POP
// if enchidnas then
50212: LD_VAR 0 4
50216: IFFALSE 50283
// for i = 1 to enchidnas do
50218: LD_ADDR_VAR 0 11
50222: PUSH
50223: DOUBLE
50224: LD_INT 1
50226: DEC
50227: ST_TO_ADDR
50228: LD_VAR 0 4
50232: PUSH
50233: FOR_TO
50234: IFFALSE 50281
// begin hc_class = 13 ;
50236: LD_ADDR_OWVAR 28
50240: PUSH
50241: LD_INT 13
50243: ST_TO_ADDR
// hc_gallery =  ;
50244: LD_ADDR_OWVAR 33
50248: PUSH
50249: LD_STRING 
50251: ST_TO_ADDR
// animal := CreateHuman ;
50252: LD_ADDR_VAR 0 12
50256: PUSH
50257: CALL_OW 44
50261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50262: LD_VAR 0 12
50266: PPUSH
50267: LD_VAR 0 8
50271: PPUSH
50272: LD_INT 0
50274: PPUSH
50275: CALL 51983 0 3
// end ;
50279: GO 50233
50281: POP
50282: POP
// if fishes then
50283: LD_VAR 0 7
50287: IFFALSE 50354
// for i = 1 to fishes do
50289: LD_ADDR_VAR 0 11
50293: PUSH
50294: DOUBLE
50295: LD_INT 1
50297: DEC
50298: ST_TO_ADDR
50299: LD_VAR 0 7
50303: PUSH
50304: FOR_TO
50305: IFFALSE 50352
// begin hc_class = 20 ;
50307: LD_ADDR_OWVAR 28
50311: PUSH
50312: LD_INT 20
50314: ST_TO_ADDR
// hc_gallery =  ;
50315: LD_ADDR_OWVAR 33
50319: PUSH
50320: LD_STRING 
50322: ST_TO_ADDR
// animal := CreateHuman ;
50323: LD_ADDR_VAR 0 12
50327: PUSH
50328: CALL_OW 44
50332: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50333: LD_VAR 0 12
50337: PPUSH
50338: LD_VAR 0 9
50342: PPUSH
50343: LD_INT 0
50345: PPUSH
50346: CALL 51983 0 3
// end ;
50350: GO 50304
50352: POP
50353: POP
// end ;
50354: LD_VAR 0 10
50358: RET
// export function WantHeal ( sci , unit ) ; begin
50359: LD_INT 0
50361: PPUSH
// if GetTaskList ( sci ) > 0 then
50362: LD_VAR 0 1
50366: PPUSH
50367: CALL_OW 437
50371: PUSH
50372: LD_INT 0
50374: GREATER
50375: IFFALSE 50445
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50377: LD_VAR 0 1
50381: PPUSH
50382: CALL_OW 437
50386: PUSH
50387: LD_INT 1
50389: ARRAY
50390: PUSH
50391: LD_INT 1
50393: ARRAY
50394: PUSH
50395: LD_STRING l
50397: EQUAL
50398: PUSH
50399: LD_VAR 0 1
50403: PPUSH
50404: CALL_OW 437
50408: PUSH
50409: LD_INT 1
50411: ARRAY
50412: PUSH
50413: LD_INT 4
50415: ARRAY
50416: PUSH
50417: LD_VAR 0 2
50421: EQUAL
50422: AND
50423: IFFALSE 50435
// result := true else
50425: LD_ADDR_VAR 0 3
50429: PUSH
50430: LD_INT 1
50432: ST_TO_ADDR
50433: GO 50443
// result := false ;
50435: LD_ADDR_VAR 0 3
50439: PUSH
50440: LD_INT 0
50442: ST_TO_ADDR
// end else
50443: GO 50453
// result := false ;
50445: LD_ADDR_VAR 0 3
50449: PUSH
50450: LD_INT 0
50452: ST_TO_ADDR
// end ;
50453: LD_VAR 0 3
50457: RET
// export function HealTarget ( sci ) ; begin
50458: LD_INT 0
50460: PPUSH
// if not sci then
50461: LD_VAR 0 1
50465: NOT
50466: IFFALSE 50470
// exit ;
50468: GO 50535
// result := 0 ;
50470: LD_ADDR_VAR 0 2
50474: PUSH
50475: LD_INT 0
50477: ST_TO_ADDR
// if GetTaskList ( sci ) then
50478: LD_VAR 0 1
50482: PPUSH
50483: CALL_OW 437
50487: IFFALSE 50535
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50489: LD_VAR 0 1
50493: PPUSH
50494: CALL_OW 437
50498: PUSH
50499: LD_INT 1
50501: ARRAY
50502: PUSH
50503: LD_INT 1
50505: ARRAY
50506: PUSH
50507: LD_STRING l
50509: EQUAL
50510: IFFALSE 50535
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50512: LD_ADDR_VAR 0 2
50516: PUSH
50517: LD_VAR 0 1
50521: PPUSH
50522: CALL_OW 437
50526: PUSH
50527: LD_INT 1
50529: ARRAY
50530: PUSH
50531: LD_INT 4
50533: ARRAY
50534: ST_TO_ADDR
// end ;
50535: LD_VAR 0 2
50539: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50540: LD_INT 0
50542: PPUSH
50543: PPUSH
50544: PPUSH
50545: PPUSH
// if not base_units then
50546: LD_VAR 0 1
50550: NOT
50551: IFFALSE 50555
// exit ;
50553: GO 50642
// result := false ;
50555: LD_ADDR_VAR 0 2
50559: PUSH
50560: LD_INT 0
50562: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50563: LD_ADDR_VAR 0 5
50567: PUSH
50568: LD_VAR 0 1
50572: PPUSH
50573: LD_INT 21
50575: PUSH
50576: LD_INT 3
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PPUSH
50583: CALL_OW 72
50587: ST_TO_ADDR
// if not tmp then
50588: LD_VAR 0 5
50592: NOT
50593: IFFALSE 50597
// exit ;
50595: GO 50642
// for i in tmp do
50597: LD_ADDR_VAR 0 3
50601: PUSH
50602: LD_VAR 0 5
50606: PUSH
50607: FOR_IN
50608: IFFALSE 50640
// begin result := EnemyInRange ( i , 22 ) ;
50610: LD_ADDR_VAR 0 2
50614: PUSH
50615: LD_VAR 0 3
50619: PPUSH
50620: LD_INT 22
50622: PPUSH
50623: CALL 48229 0 2
50627: ST_TO_ADDR
// if result then
50628: LD_VAR 0 2
50632: IFFALSE 50638
// exit ;
50634: POP
50635: POP
50636: GO 50642
// end ;
50638: GO 50607
50640: POP
50641: POP
// end ;
50642: LD_VAR 0 2
50646: RET
// export function FilterByTag ( units , tag ) ; begin
50647: LD_INT 0
50649: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50650: LD_ADDR_VAR 0 3
50654: PUSH
50655: LD_VAR 0 1
50659: PPUSH
50660: LD_INT 120
50662: PUSH
50663: LD_VAR 0 2
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PPUSH
50672: CALL_OW 72
50676: ST_TO_ADDR
// end ;
50677: LD_VAR 0 3
50681: RET
// export function IsDriver ( un ) ; begin
50682: LD_INT 0
50684: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50685: LD_ADDR_VAR 0 2
50689: PUSH
50690: LD_VAR 0 1
50694: PUSH
50695: LD_INT 55
50697: PUSH
50698: EMPTY
50699: LIST
50700: PPUSH
50701: CALL_OW 69
50705: IN
50706: ST_TO_ADDR
// end ;
50707: LD_VAR 0 2
50711: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50712: LD_INT 0
50714: PPUSH
50715: PPUSH
// list := [ ] ;
50716: LD_ADDR_VAR 0 5
50720: PUSH
50721: EMPTY
50722: ST_TO_ADDR
// case d of 0 :
50723: LD_VAR 0 3
50727: PUSH
50728: LD_INT 0
50730: DOUBLE
50731: EQUAL
50732: IFTRUE 50736
50734: GO 50869
50736: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50737: LD_ADDR_VAR 0 5
50741: PUSH
50742: LD_VAR 0 1
50746: PUSH
50747: LD_INT 4
50749: MINUS
50750: PUSH
50751: LD_VAR 0 2
50755: PUSH
50756: LD_INT 4
50758: MINUS
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: LIST
50767: PUSH
50768: LD_VAR 0 1
50772: PUSH
50773: LD_INT 3
50775: MINUS
50776: PUSH
50777: LD_VAR 0 2
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: PUSH
50790: LD_VAR 0 1
50794: PUSH
50795: LD_INT 4
50797: PLUS
50798: PUSH
50799: LD_VAR 0 2
50803: PUSH
50804: LD_INT 4
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: LIST
50811: PUSH
50812: LD_VAR 0 1
50816: PUSH
50817: LD_INT 3
50819: PLUS
50820: PUSH
50821: LD_VAR 0 2
50825: PUSH
50826: LD_INT 3
50828: PLUS
50829: PUSH
50830: LD_INT 5
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: PUSH
50838: LD_VAR 0 1
50842: PUSH
50843: LD_VAR 0 2
50847: PUSH
50848: LD_INT 4
50850: PLUS
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: LIST
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: ST_TO_ADDR
// end ; 1 :
50867: GO 51567
50869: LD_INT 1
50871: DOUBLE
50872: EQUAL
50873: IFTRUE 50877
50875: GO 51010
50877: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50878: LD_ADDR_VAR 0 5
50882: PUSH
50883: LD_VAR 0 1
50887: PUSH
50888: LD_VAR 0 2
50892: PUSH
50893: LD_INT 4
50895: MINUS
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: PUSH
50905: LD_VAR 0 1
50909: PUSH
50910: LD_INT 3
50912: MINUS
50913: PUSH
50914: LD_VAR 0 2
50918: PUSH
50919: LD_INT 3
50921: MINUS
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: LIST
50930: PUSH
50931: LD_VAR 0 1
50935: PUSH
50936: LD_INT 4
50938: MINUS
50939: PUSH
50940: LD_VAR 0 2
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: PUSH
50953: LD_VAR 0 1
50957: PUSH
50958: LD_VAR 0 2
50962: PUSH
50963: LD_INT 3
50965: PLUS
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: LIST
50974: PUSH
50975: LD_VAR 0 1
50979: PUSH
50980: LD_INT 4
50982: PLUS
50983: PUSH
50984: LD_VAR 0 2
50988: PUSH
50989: LD_INT 4
50991: PLUS
50992: PUSH
50993: LD_INT 5
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: LIST
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: ST_TO_ADDR
// end ; 2 :
51008: GO 51567
51010: LD_INT 2
51012: DOUBLE
51013: EQUAL
51014: IFTRUE 51018
51016: GO 51147
51018: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51019: LD_ADDR_VAR 0 5
51023: PUSH
51024: LD_VAR 0 1
51028: PUSH
51029: LD_VAR 0 2
51033: PUSH
51034: LD_INT 3
51036: MINUS
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: LIST
51045: PUSH
51046: LD_VAR 0 1
51050: PUSH
51051: LD_INT 4
51053: PLUS
51054: PUSH
51055: LD_VAR 0 2
51059: PUSH
51060: LD_INT 4
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: LIST
51067: PUSH
51068: LD_VAR 0 1
51072: PUSH
51073: LD_VAR 0 2
51077: PUSH
51078: LD_INT 4
51080: PLUS
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: LIST
51089: PUSH
51090: LD_VAR 0 1
51094: PUSH
51095: LD_INT 3
51097: MINUS
51098: PUSH
51099: LD_VAR 0 2
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: LIST
51111: PUSH
51112: LD_VAR 0 1
51116: PUSH
51117: LD_INT 4
51119: MINUS
51120: PUSH
51121: LD_VAR 0 2
51125: PUSH
51126: LD_INT 4
51128: MINUS
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: ST_TO_ADDR
// end ; 3 :
51145: GO 51567
51147: LD_INT 3
51149: DOUBLE
51150: EQUAL
51151: IFTRUE 51155
51153: GO 51288
51155: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51156: LD_ADDR_VAR 0 5
51160: PUSH
51161: LD_VAR 0 1
51165: PUSH
51166: LD_INT 3
51168: PLUS
51169: PUSH
51170: LD_VAR 0 2
51174: PUSH
51175: LD_INT 4
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: LIST
51182: PUSH
51183: LD_VAR 0 1
51187: PUSH
51188: LD_INT 4
51190: PLUS
51191: PUSH
51192: LD_VAR 0 2
51196: PUSH
51197: LD_INT 4
51199: PLUS
51200: PUSH
51201: LD_INT 5
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: LIST
51208: PUSH
51209: LD_VAR 0 1
51213: PUSH
51214: LD_INT 4
51216: MINUS
51217: PUSH
51218: LD_VAR 0 2
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: PUSH
51231: LD_VAR 0 1
51235: PUSH
51236: LD_VAR 0 2
51240: PUSH
51241: LD_INT 4
51243: MINUS
51244: PUSH
51245: LD_INT 3
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: LIST
51252: PUSH
51253: LD_VAR 0 1
51257: PUSH
51258: LD_INT 3
51260: MINUS
51261: PUSH
51262: LD_VAR 0 2
51266: PUSH
51267: LD_INT 3
51269: MINUS
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: LIST
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: ST_TO_ADDR
// end ; 4 :
51286: GO 51567
51288: LD_INT 4
51290: DOUBLE
51291: EQUAL
51292: IFTRUE 51296
51294: GO 51429
51296: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51297: LD_ADDR_VAR 0 5
51301: PUSH
51302: LD_VAR 0 1
51306: PUSH
51307: LD_VAR 0 2
51311: PUSH
51312: LD_INT 4
51314: PLUS
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: PUSH
51324: LD_VAR 0 1
51328: PUSH
51329: LD_INT 3
51331: PLUS
51332: PUSH
51333: LD_VAR 0 2
51337: PUSH
51338: LD_INT 3
51340: PLUS
51341: PUSH
51342: LD_INT 5
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: PUSH
51350: LD_VAR 0 1
51354: PUSH
51355: LD_INT 4
51357: PLUS
51358: PUSH
51359: LD_VAR 0 2
51363: PUSH
51364: LD_INT 4
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: LIST
51371: PUSH
51372: LD_VAR 0 1
51376: PUSH
51377: LD_VAR 0 2
51381: PUSH
51382: LD_INT 3
51384: MINUS
51385: PUSH
51386: LD_INT 3
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: LIST
51393: PUSH
51394: LD_VAR 0 1
51398: PUSH
51399: LD_INT 4
51401: MINUS
51402: PUSH
51403: LD_VAR 0 2
51407: PUSH
51408: LD_INT 4
51410: MINUS
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: LIST
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: ST_TO_ADDR
// end ; 5 :
51427: GO 51567
51429: LD_INT 5
51431: DOUBLE
51432: EQUAL
51433: IFTRUE 51437
51435: GO 51566
51437: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51438: LD_ADDR_VAR 0 5
51442: PUSH
51443: LD_VAR 0 1
51447: PUSH
51448: LD_INT 4
51450: MINUS
51451: PUSH
51452: LD_VAR 0 2
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: LIST
51464: PUSH
51465: LD_VAR 0 1
51469: PUSH
51470: LD_VAR 0 2
51474: PUSH
51475: LD_INT 4
51477: MINUS
51478: PUSH
51479: LD_INT 3
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: LIST
51486: PUSH
51487: LD_VAR 0 1
51491: PUSH
51492: LD_INT 4
51494: PLUS
51495: PUSH
51496: LD_VAR 0 2
51500: PUSH
51501: LD_INT 4
51503: PLUS
51504: PUSH
51505: LD_INT 5
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: PUSH
51513: LD_VAR 0 1
51517: PUSH
51518: LD_INT 3
51520: PLUS
51521: PUSH
51522: LD_VAR 0 2
51526: PUSH
51527: LD_INT 4
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: PUSH
51535: LD_VAR 0 1
51539: PUSH
51540: LD_VAR 0 2
51544: PUSH
51545: LD_INT 3
51547: PLUS
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: LIST
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: ST_TO_ADDR
// end ; end ;
51564: GO 51567
51566: POP
// result := list ;
51567: LD_ADDR_VAR 0 4
51571: PUSH
51572: LD_VAR 0 5
51576: ST_TO_ADDR
// end ;
51577: LD_VAR 0 4
51581: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51582: LD_INT 0
51584: PPUSH
51585: PPUSH
51586: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51587: LD_VAR 0 1
51591: NOT
51592: PUSH
51593: LD_VAR 0 2
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: LD_INT 3
51606: PUSH
51607: LD_INT 4
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: IN
51616: NOT
51617: OR
51618: IFFALSE 51622
// exit ;
51620: GO 51705
// tmp := [ ] ;
51622: LD_ADDR_VAR 0 5
51626: PUSH
51627: EMPTY
51628: ST_TO_ADDR
// for i in units do
51629: LD_ADDR_VAR 0 4
51633: PUSH
51634: LD_VAR 0 1
51638: PUSH
51639: FOR_IN
51640: IFFALSE 51674
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51642: LD_ADDR_VAR 0 5
51646: PUSH
51647: LD_VAR 0 5
51651: PPUSH
51652: LD_VAR 0 4
51656: PPUSH
51657: LD_VAR 0 2
51661: PPUSH
51662: CALL_OW 259
51666: PPUSH
51667: CALL 53065 0 2
51671: ST_TO_ADDR
51672: GO 51639
51674: POP
51675: POP
// if not tmp then
51676: LD_VAR 0 5
51680: NOT
51681: IFFALSE 51685
// exit ;
51683: GO 51705
// result := SortListByListDesc ( units , tmp ) ;
51685: LD_ADDR_VAR 0 3
51689: PUSH
51690: LD_VAR 0 1
51694: PPUSH
51695: LD_VAR 0 5
51699: PPUSH
51700: CALL_OW 77
51704: ST_TO_ADDR
// end ;
51705: LD_VAR 0 3
51709: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51710: LD_INT 0
51712: PPUSH
51713: PPUSH
51714: PPUSH
// result := false ;
51715: LD_ADDR_VAR 0 3
51719: PUSH
51720: LD_INT 0
51722: ST_TO_ADDR
// if not building then
51723: LD_VAR 0 2
51727: NOT
51728: IFFALSE 51732
// exit ;
51730: GO 51870
// x := GetX ( building ) ;
51732: LD_ADDR_VAR 0 4
51736: PUSH
51737: LD_VAR 0 2
51741: PPUSH
51742: CALL_OW 250
51746: ST_TO_ADDR
// y := GetY ( building ) ;
51747: LD_ADDR_VAR 0 5
51751: PUSH
51752: LD_VAR 0 2
51756: PPUSH
51757: CALL_OW 251
51761: ST_TO_ADDR
// if not x or not y then
51762: LD_VAR 0 4
51766: NOT
51767: PUSH
51768: LD_VAR 0 5
51772: NOT
51773: OR
51774: IFFALSE 51778
// exit ;
51776: GO 51870
// if GetTaskList ( unit ) then
51778: LD_VAR 0 1
51782: PPUSH
51783: CALL_OW 437
51787: IFFALSE 51870
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51789: LD_STRING e
51791: PUSH
51792: LD_VAR 0 1
51796: PPUSH
51797: CALL_OW 437
51801: PUSH
51802: LD_INT 1
51804: ARRAY
51805: PUSH
51806: LD_INT 1
51808: ARRAY
51809: EQUAL
51810: PUSH
51811: LD_VAR 0 4
51815: PUSH
51816: LD_VAR 0 1
51820: PPUSH
51821: CALL_OW 437
51825: PUSH
51826: LD_INT 1
51828: ARRAY
51829: PUSH
51830: LD_INT 2
51832: ARRAY
51833: EQUAL
51834: AND
51835: PUSH
51836: LD_VAR 0 5
51840: PUSH
51841: LD_VAR 0 1
51845: PPUSH
51846: CALL_OW 437
51850: PUSH
51851: LD_INT 1
51853: ARRAY
51854: PUSH
51855: LD_INT 3
51857: ARRAY
51858: EQUAL
51859: AND
51860: IFFALSE 51870
// result := true end ;
51862: LD_ADDR_VAR 0 3
51866: PUSH
51867: LD_INT 1
51869: ST_TO_ADDR
// end ;
51870: LD_VAR 0 3
51874: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51875: LD_INT 0
51877: PPUSH
// result := false ;
51878: LD_ADDR_VAR 0 4
51882: PUSH
51883: LD_INT 0
51885: ST_TO_ADDR
// if GetTaskList ( unit ) then
51886: LD_VAR 0 1
51890: PPUSH
51891: CALL_OW 437
51895: IFFALSE 51978
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51897: LD_STRING M
51899: PUSH
51900: LD_VAR 0 1
51904: PPUSH
51905: CALL_OW 437
51909: PUSH
51910: LD_INT 1
51912: ARRAY
51913: PUSH
51914: LD_INT 1
51916: ARRAY
51917: EQUAL
51918: PUSH
51919: LD_VAR 0 2
51923: PUSH
51924: LD_VAR 0 1
51928: PPUSH
51929: CALL_OW 437
51933: PUSH
51934: LD_INT 1
51936: ARRAY
51937: PUSH
51938: LD_INT 2
51940: ARRAY
51941: EQUAL
51942: AND
51943: PUSH
51944: LD_VAR 0 3
51948: PUSH
51949: LD_VAR 0 1
51953: PPUSH
51954: CALL_OW 437
51958: PUSH
51959: LD_INT 1
51961: ARRAY
51962: PUSH
51963: LD_INT 3
51965: ARRAY
51966: EQUAL
51967: AND
51968: IFFALSE 51978
// result := true ;
51970: LD_ADDR_VAR 0 4
51974: PUSH
51975: LD_INT 1
51977: ST_TO_ADDR
// end ; end ;
51978: LD_VAR 0 4
51982: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51983: LD_INT 0
51985: PPUSH
51986: PPUSH
51987: PPUSH
51988: PPUSH
// if not unit or not area then
51989: LD_VAR 0 1
51993: NOT
51994: PUSH
51995: LD_VAR 0 2
51999: NOT
52000: OR
52001: IFFALSE 52005
// exit ;
52003: GO 52168
// tmp := AreaToList ( area , i ) ;
52005: LD_ADDR_VAR 0 6
52009: PUSH
52010: LD_VAR 0 2
52014: PPUSH
52015: LD_VAR 0 5
52019: PPUSH
52020: CALL_OW 517
52024: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52025: LD_ADDR_VAR 0 5
52029: PUSH
52030: DOUBLE
52031: LD_INT 1
52033: DEC
52034: ST_TO_ADDR
52035: LD_VAR 0 6
52039: PUSH
52040: LD_INT 1
52042: ARRAY
52043: PUSH
52044: FOR_TO
52045: IFFALSE 52166
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52047: LD_ADDR_VAR 0 7
52051: PUSH
52052: LD_VAR 0 6
52056: PUSH
52057: LD_INT 1
52059: ARRAY
52060: PUSH
52061: LD_VAR 0 5
52065: ARRAY
52066: PUSH
52067: LD_VAR 0 6
52071: PUSH
52072: LD_INT 2
52074: ARRAY
52075: PUSH
52076: LD_VAR 0 5
52080: ARRAY
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
52086: LD_INT 92
52088: PUSH
52089: LD_VAR 0 7
52093: PUSH
52094: LD_INT 1
52096: ARRAY
52097: PUSH
52098: LD_VAR 0 7
52102: PUSH
52103: LD_INT 2
52105: ARRAY
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: PPUSH
52116: CALL_OW 69
52120: PUSH
52121: LD_INT 0
52123: EQUAL
52124: IFFALSE 52164
// begin PlaceUnitArea ( unit , area , mode ) ;
52126: LD_VAR 0 1
52130: PPUSH
52131: LD_VAR 0 2
52135: PPUSH
52136: LD_VAR 0 3
52140: PPUSH
52141: CALL_OW 49
// result := IsPlaced ( unit ) ;
52145: LD_ADDR_VAR 0 4
52149: PUSH
52150: LD_VAR 0 1
52154: PPUSH
52155: CALL_OW 305
52159: ST_TO_ADDR
// exit ;
52160: POP
52161: POP
52162: GO 52168
// end ; end ;
52164: GO 52044
52166: POP
52167: POP
// end ;
52168: LD_VAR 0 4
52172: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52173: LD_INT 0
52175: PPUSH
52176: PPUSH
52177: PPUSH
// if not side or side > 8 then
52178: LD_VAR 0 1
52182: NOT
52183: PUSH
52184: LD_VAR 0 1
52188: PUSH
52189: LD_INT 8
52191: GREATER
52192: OR
52193: IFFALSE 52197
// exit ;
52195: GO 52384
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52197: LD_ADDR_VAR 0 4
52201: PUSH
52202: LD_INT 22
52204: PUSH
52205: LD_VAR 0 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 21
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PPUSH
52228: CALL_OW 69
52232: ST_TO_ADDR
// if not tmp then
52233: LD_VAR 0 4
52237: NOT
52238: IFFALSE 52242
// exit ;
52240: GO 52384
// enable_addtolog := true ;
52242: LD_ADDR_OWVAR 81
52246: PUSH
52247: LD_INT 1
52249: ST_TO_ADDR
// AddToLog ( [ ) ;
52250: LD_STRING [
52252: PPUSH
52253: CALL_OW 561
// for i in tmp do
52257: LD_ADDR_VAR 0 3
52261: PUSH
52262: LD_VAR 0 4
52266: PUSH
52267: FOR_IN
52268: IFFALSE 52375
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52270: LD_STRING [
52272: PUSH
52273: LD_VAR 0 3
52277: PPUSH
52278: CALL_OW 266
52282: STR
52283: PUSH
52284: LD_STRING , 
52286: STR
52287: PUSH
52288: LD_VAR 0 3
52292: PPUSH
52293: CALL_OW 250
52297: STR
52298: PUSH
52299: LD_STRING , 
52301: STR
52302: PUSH
52303: LD_VAR 0 3
52307: PPUSH
52308: CALL_OW 251
52312: STR
52313: PUSH
52314: LD_STRING , 
52316: STR
52317: PUSH
52318: LD_VAR 0 3
52322: PPUSH
52323: CALL_OW 254
52327: STR
52328: PUSH
52329: LD_STRING , 
52331: STR
52332: PUSH
52333: LD_VAR 0 3
52337: PPUSH
52338: LD_INT 1
52340: PPUSH
52341: CALL_OW 268
52345: STR
52346: PUSH
52347: LD_STRING , 
52349: STR
52350: PUSH
52351: LD_VAR 0 3
52355: PPUSH
52356: LD_INT 2
52358: PPUSH
52359: CALL_OW 268
52363: STR
52364: PUSH
52365: LD_STRING ],
52367: STR
52368: PPUSH
52369: CALL_OW 561
// end ;
52373: GO 52267
52375: POP
52376: POP
// AddToLog ( ]; ) ;
52377: LD_STRING ];
52379: PPUSH
52380: CALL_OW 561
// end ;
52384: LD_VAR 0 2
52388: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52389: LD_INT 0
52391: PPUSH
52392: PPUSH
52393: PPUSH
52394: PPUSH
52395: PPUSH
// if not area or not rate or not max then
52396: LD_VAR 0 1
52400: NOT
52401: PUSH
52402: LD_VAR 0 2
52406: NOT
52407: OR
52408: PUSH
52409: LD_VAR 0 4
52413: NOT
52414: OR
52415: IFFALSE 52419
// exit ;
52417: GO 52608
// while 1 do
52419: LD_INT 1
52421: IFFALSE 52608
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52423: LD_ADDR_VAR 0 9
52427: PUSH
52428: LD_VAR 0 1
52432: PPUSH
52433: LD_INT 1
52435: PPUSH
52436: CALL_OW 287
52440: PUSH
52441: LD_INT 10
52443: MUL
52444: ST_TO_ADDR
// r := rate / 10 ;
52445: LD_ADDR_VAR 0 7
52449: PUSH
52450: LD_VAR 0 2
52454: PUSH
52455: LD_INT 10
52457: DIVREAL
52458: ST_TO_ADDR
// time := 1 1$00 ;
52459: LD_ADDR_VAR 0 8
52463: PUSH
52464: LD_INT 2100
52466: ST_TO_ADDR
// if amount < min then
52467: LD_VAR 0 9
52471: PUSH
52472: LD_VAR 0 3
52476: LESS
52477: IFFALSE 52495
// r := r * 2 else
52479: LD_ADDR_VAR 0 7
52483: PUSH
52484: LD_VAR 0 7
52488: PUSH
52489: LD_INT 2
52491: MUL
52492: ST_TO_ADDR
52493: GO 52521
// if amount > max then
52495: LD_VAR 0 9
52499: PUSH
52500: LD_VAR 0 4
52504: GREATER
52505: IFFALSE 52521
// r := r / 2 ;
52507: LD_ADDR_VAR 0 7
52511: PUSH
52512: LD_VAR 0 7
52516: PUSH
52517: LD_INT 2
52519: DIVREAL
52520: ST_TO_ADDR
// time := time / r ;
52521: LD_ADDR_VAR 0 8
52525: PUSH
52526: LD_VAR 0 8
52530: PUSH
52531: LD_VAR 0 7
52535: DIVREAL
52536: ST_TO_ADDR
// if time < 0 then
52537: LD_VAR 0 8
52541: PUSH
52542: LD_INT 0
52544: LESS
52545: IFFALSE 52562
// time := time * - 1 ;
52547: LD_ADDR_VAR 0 8
52551: PUSH
52552: LD_VAR 0 8
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: MUL
52561: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52562: LD_VAR 0 8
52566: PUSH
52567: LD_INT 35
52569: PPUSH
52570: LD_INT 875
52572: PPUSH
52573: CALL_OW 12
52577: PLUS
52578: PPUSH
52579: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52583: LD_INT 1
52585: PPUSH
52586: LD_INT 5
52588: PPUSH
52589: CALL_OW 12
52593: PPUSH
52594: LD_VAR 0 1
52598: PPUSH
52599: LD_INT 1
52601: PPUSH
52602: CALL_OW 55
// end ;
52606: GO 52419
// end ;
52608: LD_VAR 0 5
52612: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52613: LD_INT 0
52615: PPUSH
52616: PPUSH
52617: PPUSH
52618: PPUSH
52619: PPUSH
52620: PPUSH
52621: PPUSH
52622: PPUSH
// if not turrets or not factories then
52623: LD_VAR 0 1
52627: NOT
52628: PUSH
52629: LD_VAR 0 2
52633: NOT
52634: OR
52635: IFFALSE 52639
// exit ;
52637: GO 52946
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52639: LD_ADDR_VAR 0 10
52643: PUSH
52644: LD_INT 5
52646: PUSH
52647: LD_INT 6
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: LD_INT 4
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 3
52666: PUSH
52667: LD_INT 5
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 24
52681: PUSH
52682: LD_INT 25
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 23
52691: PUSH
52692: LD_INT 27
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 42
52705: PUSH
52706: LD_INT 43
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 44
52715: PUSH
52716: LD_INT 46
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 45
52725: PUSH
52726: LD_INT 47
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: LIST
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: ST_TO_ADDR
// result := [ ] ;
52743: LD_ADDR_VAR 0 3
52747: PUSH
52748: EMPTY
52749: ST_TO_ADDR
// for i in turrets do
52750: LD_ADDR_VAR 0 4
52754: PUSH
52755: LD_VAR 0 1
52759: PUSH
52760: FOR_IN
52761: IFFALSE 52944
// begin nat := GetNation ( i ) ;
52763: LD_ADDR_VAR 0 7
52767: PUSH
52768: LD_VAR 0 4
52772: PPUSH
52773: CALL_OW 248
52777: ST_TO_ADDR
// weapon := 0 ;
52778: LD_ADDR_VAR 0 8
52782: PUSH
52783: LD_INT 0
52785: ST_TO_ADDR
// if not nat then
52786: LD_VAR 0 7
52790: NOT
52791: IFFALSE 52795
// continue ;
52793: GO 52760
// for j in list [ nat ] do
52795: LD_ADDR_VAR 0 5
52799: PUSH
52800: LD_VAR 0 10
52804: PUSH
52805: LD_VAR 0 7
52809: ARRAY
52810: PUSH
52811: FOR_IN
52812: IFFALSE 52853
// if GetBWeapon ( i ) = j [ 1 ] then
52814: LD_VAR 0 4
52818: PPUSH
52819: CALL_OW 269
52823: PUSH
52824: LD_VAR 0 5
52828: PUSH
52829: LD_INT 1
52831: ARRAY
52832: EQUAL
52833: IFFALSE 52851
// begin weapon := j [ 2 ] ;
52835: LD_ADDR_VAR 0 8
52839: PUSH
52840: LD_VAR 0 5
52844: PUSH
52845: LD_INT 2
52847: ARRAY
52848: ST_TO_ADDR
// break ;
52849: GO 52853
// end ;
52851: GO 52811
52853: POP
52854: POP
// if not weapon then
52855: LD_VAR 0 8
52859: NOT
52860: IFFALSE 52864
// continue ;
52862: GO 52760
// for k in factories do
52864: LD_ADDR_VAR 0 6
52868: PUSH
52869: LD_VAR 0 2
52873: PUSH
52874: FOR_IN
52875: IFFALSE 52940
// begin weapons := AvailableWeaponList ( k ) ;
52877: LD_ADDR_VAR 0 9
52881: PUSH
52882: LD_VAR 0 6
52886: PPUSH
52887: CALL_OW 478
52891: ST_TO_ADDR
// if not weapons then
52892: LD_VAR 0 9
52896: NOT
52897: IFFALSE 52901
// continue ;
52899: GO 52874
// if weapon in weapons then
52901: LD_VAR 0 8
52905: PUSH
52906: LD_VAR 0 9
52910: IN
52911: IFFALSE 52938
// begin result := [ i , weapon ] ;
52913: LD_ADDR_VAR 0 3
52917: PUSH
52918: LD_VAR 0 4
52922: PUSH
52923: LD_VAR 0 8
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: ST_TO_ADDR
// exit ;
52932: POP
52933: POP
52934: POP
52935: POP
52936: GO 52946
// end ; end ;
52938: GO 52874
52940: POP
52941: POP
// end ;
52942: GO 52760
52944: POP
52945: POP
// end ;
52946: LD_VAR 0 3
52950: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52951: LD_INT 0
52953: PPUSH
// if not side or side > 8 then
52954: LD_VAR 0 3
52958: NOT
52959: PUSH
52960: LD_VAR 0 3
52964: PUSH
52965: LD_INT 8
52967: GREATER
52968: OR
52969: IFFALSE 52973
// exit ;
52971: GO 53032
// if not range then
52973: LD_VAR 0 4
52977: NOT
52978: IFFALSE 52989
// range := - 12 ;
52980: LD_ADDR_VAR 0 4
52984: PUSH
52985: LD_INT 12
52987: NEG
52988: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52989: LD_VAR 0 1
52993: PPUSH
52994: LD_VAR 0 2
52998: PPUSH
52999: LD_VAR 0 3
53003: PPUSH
53004: LD_VAR 0 4
53008: PPUSH
53009: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53013: LD_VAR 0 1
53017: PPUSH
53018: LD_VAR 0 2
53022: PPUSH
53023: LD_VAR 0 3
53027: PPUSH
53028: CALL_OW 331
// end ;
53032: LD_VAR 0 5
53036: RET
// export function Video ( mode ) ; begin
53037: LD_INT 0
53039: PPUSH
// ingame_video = mode ;
53040: LD_ADDR_OWVAR 52
53044: PUSH
53045: LD_VAR 0 1
53049: ST_TO_ADDR
// interface_hidden = mode ;
53050: LD_ADDR_OWVAR 54
53054: PUSH
53055: LD_VAR 0 1
53059: ST_TO_ADDR
// end ;
53060: LD_VAR 0 2
53064: RET
// export function Join ( array , element ) ; begin
53065: LD_INT 0
53067: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53068: LD_ADDR_VAR 0 3
53072: PUSH
53073: LD_VAR 0 1
53077: PPUSH
53078: LD_VAR 0 1
53082: PUSH
53083: LD_INT 1
53085: PLUS
53086: PPUSH
53087: LD_VAR 0 2
53091: PPUSH
53092: CALL_OW 1
53096: ST_TO_ADDR
// end ;
53097: LD_VAR 0 3
53101: RET
// export function JoinUnion ( array , element ) ; begin
53102: LD_INT 0
53104: PPUSH
// result := array union element ;
53105: LD_ADDR_VAR 0 3
53109: PUSH
53110: LD_VAR 0 1
53114: PUSH
53115: LD_VAR 0 2
53119: UNION
53120: ST_TO_ADDR
// end ;
53121: LD_VAR 0 3
53125: RET
// export function GetBehemoths ( side ) ; begin
53126: LD_INT 0
53128: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53129: LD_ADDR_VAR 0 2
53133: PUSH
53134: LD_INT 22
53136: PUSH
53137: LD_VAR 0 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 31
53148: PUSH
53149: LD_INT 25
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PPUSH
53160: CALL_OW 69
53164: ST_TO_ADDR
// end ;
53165: LD_VAR 0 2
53169: RET
// export function Shuffle ( array ) ; var i , index ; begin
53170: LD_INT 0
53172: PPUSH
53173: PPUSH
53174: PPUSH
// result := [ ] ;
53175: LD_ADDR_VAR 0 2
53179: PUSH
53180: EMPTY
53181: ST_TO_ADDR
// if not array then
53182: LD_VAR 0 1
53186: NOT
53187: IFFALSE 53191
// exit ;
53189: GO 53290
// Randomize ;
53191: CALL_OW 10
// for i = array downto 1 do
53195: LD_ADDR_VAR 0 3
53199: PUSH
53200: DOUBLE
53201: LD_VAR 0 1
53205: INC
53206: ST_TO_ADDR
53207: LD_INT 1
53209: PUSH
53210: FOR_DOWNTO
53211: IFFALSE 53288
// begin index := rand ( 1 , array ) ;
53213: LD_ADDR_VAR 0 4
53217: PUSH
53218: LD_INT 1
53220: PPUSH
53221: LD_VAR 0 1
53225: PPUSH
53226: CALL_OW 12
53230: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53231: LD_ADDR_VAR 0 2
53235: PUSH
53236: LD_VAR 0 2
53240: PPUSH
53241: LD_VAR 0 2
53245: PUSH
53246: LD_INT 1
53248: PLUS
53249: PPUSH
53250: LD_VAR 0 1
53254: PUSH
53255: LD_VAR 0 4
53259: ARRAY
53260: PPUSH
53261: CALL_OW 2
53265: ST_TO_ADDR
// array := Delete ( array , index ) ;
53266: LD_ADDR_VAR 0 1
53270: PUSH
53271: LD_VAR 0 1
53275: PPUSH
53276: LD_VAR 0 4
53280: PPUSH
53281: CALL_OW 3
53285: ST_TO_ADDR
// end ;
53286: GO 53210
53288: POP
53289: POP
// end ;
53290: LD_VAR 0 2
53294: RET
// export function GetBaseMaterials ( base ) ; begin
53295: LD_INT 0
53297: PPUSH
// result := [ 0 , 0 , 0 ] ;
53298: LD_ADDR_VAR 0 2
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: LIST
53316: ST_TO_ADDR
// if not base then
53317: LD_VAR 0 1
53321: NOT
53322: IFFALSE 53326
// exit ;
53324: GO 53375
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53326: LD_ADDR_VAR 0 2
53330: PUSH
53331: LD_VAR 0 1
53335: PPUSH
53336: LD_INT 1
53338: PPUSH
53339: CALL_OW 275
53343: PUSH
53344: LD_VAR 0 1
53348: PPUSH
53349: LD_INT 2
53351: PPUSH
53352: CALL_OW 275
53356: PUSH
53357: LD_VAR 0 1
53361: PPUSH
53362: LD_INT 3
53364: PPUSH
53365: CALL_OW 275
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: LIST
53374: ST_TO_ADDR
// end ;
53375: LD_VAR 0 2
53379: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53380: LD_INT 0
53382: PPUSH
53383: PPUSH
// result := array ;
53384: LD_ADDR_VAR 0 3
53388: PUSH
53389: LD_VAR 0 1
53393: ST_TO_ADDR
// if size >= result then
53394: LD_VAR 0 2
53398: PUSH
53399: LD_VAR 0 3
53403: GREATEREQUAL
53404: IFFALSE 53408
// exit ;
53406: GO 53458
// if size then
53408: LD_VAR 0 2
53412: IFFALSE 53458
// for i := array downto size do
53414: LD_ADDR_VAR 0 4
53418: PUSH
53419: DOUBLE
53420: LD_VAR 0 1
53424: INC
53425: ST_TO_ADDR
53426: LD_VAR 0 2
53430: PUSH
53431: FOR_DOWNTO
53432: IFFALSE 53456
// result := Delete ( result , result ) ;
53434: LD_ADDR_VAR 0 3
53438: PUSH
53439: LD_VAR 0 3
53443: PPUSH
53444: LD_VAR 0 3
53448: PPUSH
53449: CALL_OW 3
53453: ST_TO_ADDR
53454: GO 53431
53456: POP
53457: POP
// end ;
53458: LD_VAR 0 3
53462: RET
// export function ComExit ( unit ) ; var tmp ; begin
53463: LD_INT 0
53465: PPUSH
53466: PPUSH
// if not IsInUnit ( unit ) then
53467: LD_VAR 0 1
53471: PPUSH
53472: CALL_OW 310
53476: NOT
53477: IFFALSE 53481
// exit ;
53479: GO 53541
// tmp := IsInUnit ( unit ) ;
53481: LD_ADDR_VAR 0 3
53485: PUSH
53486: LD_VAR 0 1
53490: PPUSH
53491: CALL_OW 310
53495: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53496: LD_VAR 0 3
53500: PPUSH
53501: CALL_OW 247
53505: PUSH
53506: LD_INT 2
53508: EQUAL
53509: IFFALSE 53522
// ComExitVehicle ( unit ) else
53511: LD_VAR 0 1
53515: PPUSH
53516: CALL_OW 121
53520: GO 53531
// ComExitBuilding ( unit ) ;
53522: LD_VAR 0 1
53526: PPUSH
53527: CALL_OW 122
// result := tmp ;
53531: LD_ADDR_VAR 0 2
53535: PUSH
53536: LD_VAR 0 3
53540: ST_TO_ADDR
// end ;
53541: LD_VAR 0 2
53545: RET
// export function ComExitAll ( units ) ; var i ; begin
53546: LD_INT 0
53548: PPUSH
53549: PPUSH
// if not units then
53550: LD_VAR 0 1
53554: NOT
53555: IFFALSE 53559
// exit ;
53557: GO 53585
// for i in units do
53559: LD_ADDR_VAR 0 3
53563: PUSH
53564: LD_VAR 0 1
53568: PUSH
53569: FOR_IN
53570: IFFALSE 53583
// ComExit ( i ) ;
53572: LD_VAR 0 3
53576: PPUSH
53577: CALL 53463 0 1
53581: GO 53569
53583: POP
53584: POP
// end ;
53585: LD_VAR 0 2
53589: RET
// export function ResetHc ; begin
53590: LD_INT 0
53592: PPUSH
// InitHc ;
53593: CALL_OW 19
// hc_importance := 0 ;
53597: LD_ADDR_OWVAR 32
53601: PUSH
53602: LD_INT 0
53604: ST_TO_ADDR
// end ;
53605: LD_VAR 0 1
53609: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53610: LD_INT 0
53612: PPUSH
53613: PPUSH
53614: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53615: LD_ADDR_VAR 0 6
53619: PUSH
53620: LD_VAR 0 1
53624: PUSH
53625: LD_VAR 0 3
53629: PLUS
53630: PUSH
53631: LD_INT 2
53633: DIV
53634: ST_TO_ADDR
// if _x < 0 then
53635: LD_VAR 0 6
53639: PUSH
53640: LD_INT 0
53642: LESS
53643: IFFALSE 53660
// _x := _x * - 1 ;
53645: LD_ADDR_VAR 0 6
53649: PUSH
53650: LD_VAR 0 6
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: MUL
53659: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53660: LD_ADDR_VAR 0 7
53664: PUSH
53665: LD_VAR 0 2
53669: PUSH
53670: LD_VAR 0 4
53674: PLUS
53675: PUSH
53676: LD_INT 2
53678: DIV
53679: ST_TO_ADDR
// if _y < 0 then
53680: LD_VAR 0 7
53684: PUSH
53685: LD_INT 0
53687: LESS
53688: IFFALSE 53705
// _y := _y * - 1 ;
53690: LD_ADDR_VAR 0 7
53694: PUSH
53695: LD_VAR 0 7
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: MUL
53704: ST_TO_ADDR
// result := [ _x , _y ] ;
53705: LD_ADDR_VAR 0 5
53709: PUSH
53710: LD_VAR 0 6
53714: PUSH
53715: LD_VAR 0 7
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: ST_TO_ADDR
// end ;
53724: LD_VAR 0 5
53728: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53729: LD_INT 0
53731: PPUSH
53732: PPUSH
53733: PPUSH
53734: PPUSH
// task := GetTaskList ( unit ) ;
53735: LD_ADDR_VAR 0 7
53739: PUSH
53740: LD_VAR 0 1
53744: PPUSH
53745: CALL_OW 437
53749: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53750: LD_VAR 0 7
53754: NOT
53755: PUSH
53756: LD_VAR 0 1
53760: PPUSH
53761: LD_VAR 0 2
53765: PPUSH
53766: CALL_OW 308
53770: NOT
53771: AND
53772: IFFALSE 53776
// exit ;
53774: GO 53894
// if IsInArea ( unit , area ) then
53776: LD_VAR 0 1
53780: PPUSH
53781: LD_VAR 0 2
53785: PPUSH
53786: CALL_OW 308
53790: IFFALSE 53808
// begin ComMoveToArea ( unit , goAway ) ;
53792: LD_VAR 0 1
53796: PPUSH
53797: LD_VAR 0 3
53801: PPUSH
53802: CALL_OW 113
// exit ;
53806: GO 53894
// end ; if task [ 1 ] [ 1 ] <> M then
53808: LD_VAR 0 7
53812: PUSH
53813: LD_INT 1
53815: ARRAY
53816: PUSH
53817: LD_INT 1
53819: ARRAY
53820: PUSH
53821: LD_STRING M
53823: NONEQUAL
53824: IFFALSE 53828
// exit ;
53826: GO 53894
// x := task [ 1 ] [ 2 ] ;
53828: LD_ADDR_VAR 0 5
53832: PUSH
53833: LD_VAR 0 7
53837: PUSH
53838: LD_INT 1
53840: ARRAY
53841: PUSH
53842: LD_INT 2
53844: ARRAY
53845: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53846: LD_ADDR_VAR 0 6
53850: PUSH
53851: LD_VAR 0 7
53855: PUSH
53856: LD_INT 1
53858: ARRAY
53859: PUSH
53860: LD_INT 3
53862: ARRAY
53863: ST_TO_ADDR
// if InArea ( x , y , area ) then
53864: LD_VAR 0 5
53868: PPUSH
53869: LD_VAR 0 6
53873: PPUSH
53874: LD_VAR 0 2
53878: PPUSH
53879: CALL_OW 309
53883: IFFALSE 53894
// ComStop ( unit ) ;
53885: LD_VAR 0 1
53889: PPUSH
53890: CALL_OW 141
// end ;
53894: LD_VAR 0 4
53898: RET
// export function Abs ( value ) ; begin
53899: LD_INT 0
53901: PPUSH
// result := value ;
53902: LD_ADDR_VAR 0 2
53906: PUSH
53907: LD_VAR 0 1
53911: ST_TO_ADDR
// if value < 0 then
53912: LD_VAR 0 1
53916: PUSH
53917: LD_INT 0
53919: LESS
53920: IFFALSE 53937
// result := value * - 1 ;
53922: LD_ADDR_VAR 0 2
53926: PUSH
53927: LD_VAR 0 1
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: MUL
53936: ST_TO_ADDR
// end ;
53937: LD_VAR 0 2
53941: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53942: LD_INT 0
53944: PPUSH
53945: PPUSH
53946: PPUSH
53947: PPUSH
53948: PPUSH
53949: PPUSH
53950: PPUSH
53951: PPUSH
// if not unit or not building then
53952: LD_VAR 0 1
53956: NOT
53957: PUSH
53958: LD_VAR 0 2
53962: NOT
53963: OR
53964: IFFALSE 53968
// exit ;
53966: GO 54194
// x := GetX ( building ) ;
53968: LD_ADDR_VAR 0 4
53972: PUSH
53973: LD_VAR 0 2
53977: PPUSH
53978: CALL_OW 250
53982: ST_TO_ADDR
// y := GetY ( building ) ;
53983: LD_ADDR_VAR 0 6
53987: PUSH
53988: LD_VAR 0 2
53992: PPUSH
53993: CALL_OW 251
53997: ST_TO_ADDR
// d := GetDir ( building ) ;
53998: LD_ADDR_VAR 0 8
54002: PUSH
54003: LD_VAR 0 2
54007: PPUSH
54008: CALL_OW 254
54012: ST_TO_ADDR
// r := 4 ;
54013: LD_ADDR_VAR 0 9
54017: PUSH
54018: LD_INT 4
54020: ST_TO_ADDR
// for i := 1 to 5 do
54021: LD_ADDR_VAR 0 10
54025: PUSH
54026: DOUBLE
54027: LD_INT 1
54029: DEC
54030: ST_TO_ADDR
54031: LD_INT 5
54033: PUSH
54034: FOR_TO
54035: IFFALSE 54192
// begin _x := ShiftX ( x , d , r + i ) ;
54037: LD_ADDR_VAR 0 5
54041: PUSH
54042: LD_VAR 0 4
54046: PPUSH
54047: LD_VAR 0 8
54051: PPUSH
54052: LD_VAR 0 9
54056: PUSH
54057: LD_VAR 0 10
54061: PLUS
54062: PPUSH
54063: CALL_OW 272
54067: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54068: LD_ADDR_VAR 0 7
54072: PUSH
54073: LD_VAR 0 6
54077: PPUSH
54078: LD_VAR 0 8
54082: PPUSH
54083: LD_VAR 0 9
54087: PUSH
54088: LD_VAR 0 10
54092: PLUS
54093: PPUSH
54094: CALL_OW 273
54098: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54099: LD_VAR 0 5
54103: PPUSH
54104: LD_VAR 0 7
54108: PPUSH
54109: CALL_OW 488
54113: PUSH
54114: LD_VAR 0 5
54118: PPUSH
54119: LD_VAR 0 7
54123: PPUSH
54124: CALL_OW 428
54128: PPUSH
54129: CALL_OW 247
54133: PUSH
54134: LD_INT 3
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: IN
54144: NOT
54145: AND
54146: IFFALSE 54190
// begin ComMoveXY ( unit , _x , _y ) ;
54148: LD_VAR 0 1
54152: PPUSH
54153: LD_VAR 0 5
54157: PPUSH
54158: LD_VAR 0 7
54162: PPUSH
54163: CALL_OW 111
// result := [ _x , _y ] ;
54167: LD_ADDR_VAR 0 3
54171: PUSH
54172: LD_VAR 0 5
54176: PUSH
54177: LD_VAR 0 7
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: ST_TO_ADDR
// exit ;
54186: POP
54187: POP
54188: GO 54194
// end ; end ;
54190: GO 54034
54192: POP
54193: POP
// end ;
54194: LD_VAR 0 3
54198: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54199: LD_INT 0
54201: PPUSH
54202: PPUSH
54203: PPUSH
// result := 0 ;
54204: LD_ADDR_VAR 0 3
54208: PUSH
54209: LD_INT 0
54211: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54212: LD_VAR 0 1
54216: PUSH
54217: LD_INT 0
54219: LESS
54220: PUSH
54221: LD_VAR 0 1
54225: PUSH
54226: LD_INT 8
54228: GREATER
54229: OR
54230: PUSH
54231: LD_VAR 0 2
54235: PUSH
54236: LD_INT 0
54238: LESS
54239: OR
54240: PUSH
54241: LD_VAR 0 2
54245: PUSH
54246: LD_INT 8
54248: GREATER
54249: OR
54250: IFFALSE 54254
// exit ;
54252: GO 54329
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54254: LD_ADDR_VAR 0 4
54258: PUSH
54259: LD_INT 22
54261: PUSH
54262: LD_VAR 0 2
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PPUSH
54271: CALL_OW 69
54275: PUSH
54276: FOR_IN
54277: IFFALSE 54327
// begin un := UnitShoot ( i ) ;
54279: LD_ADDR_VAR 0 5
54283: PUSH
54284: LD_VAR 0 4
54288: PPUSH
54289: CALL_OW 504
54293: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54294: LD_VAR 0 5
54298: PPUSH
54299: CALL_OW 255
54303: PUSH
54304: LD_VAR 0 1
54308: EQUAL
54309: IFFALSE 54325
// begin result := un ;
54311: LD_ADDR_VAR 0 3
54315: PUSH
54316: LD_VAR 0 5
54320: ST_TO_ADDR
// exit ;
54321: POP
54322: POP
54323: GO 54329
// end ; end ;
54325: GO 54276
54327: POP
54328: POP
// end ;
54329: LD_VAR 0 3
54333: RET
// export function GetCargoBay ( units ) ; begin
54334: LD_INT 0
54336: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54337: LD_ADDR_VAR 0 2
54341: PUSH
54342: LD_VAR 0 1
54346: PPUSH
54347: LD_INT 2
54349: PUSH
54350: LD_INT 34
54352: PUSH
54353: LD_INT 12
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 34
54362: PUSH
54363: LD_INT 51
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 34
54372: PUSH
54373: LD_INT 32
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 34
54382: PUSH
54383: LD_INT 89
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: PPUSH
54397: CALL_OW 72
54401: ST_TO_ADDR
// end ;
54402: LD_VAR 0 2
54406: RET
// export function Negate ( value ) ; begin
54407: LD_INT 0
54409: PPUSH
// result := not value ;
54410: LD_ADDR_VAR 0 2
54414: PUSH
54415: LD_VAR 0 1
54419: NOT
54420: ST_TO_ADDR
// end ;
54421: LD_VAR 0 2
54425: RET
// export function Inc ( value ) ; begin
54426: LD_INT 0
54428: PPUSH
// result := value + 1 ;
54429: LD_ADDR_VAR 0 2
54433: PUSH
54434: LD_VAR 0 1
54438: PUSH
54439: LD_INT 1
54441: PLUS
54442: ST_TO_ADDR
// end ;
54443: LD_VAR 0 2
54447: RET
// export function Dec ( value ) ; begin
54448: LD_INT 0
54450: PPUSH
// result := value - 1 ;
54451: LD_ADDR_VAR 0 2
54455: PUSH
54456: LD_VAR 0 1
54460: PUSH
54461: LD_INT 1
54463: MINUS
54464: ST_TO_ADDR
// end ;
54465: LD_VAR 0 2
54469: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54470: LD_INT 0
54472: PPUSH
54473: PPUSH
54474: PPUSH
54475: PPUSH
54476: PPUSH
54477: PPUSH
54478: PPUSH
54479: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54480: LD_VAR 0 1
54484: PPUSH
54485: LD_VAR 0 2
54489: PPUSH
54490: CALL_OW 488
54494: NOT
54495: PUSH
54496: LD_VAR 0 3
54500: PPUSH
54501: LD_VAR 0 4
54505: PPUSH
54506: CALL_OW 488
54510: NOT
54511: OR
54512: IFFALSE 54525
// begin result := - 1 ;
54514: LD_ADDR_VAR 0 5
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: ST_TO_ADDR
// exit ;
54523: GO 54760
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54525: LD_ADDR_VAR 0 12
54529: PUSH
54530: LD_VAR 0 1
54534: PPUSH
54535: LD_VAR 0 2
54539: PPUSH
54540: LD_VAR 0 3
54544: PPUSH
54545: LD_VAR 0 4
54549: PPUSH
54550: CALL 53610 0 4
54554: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54555: LD_ADDR_VAR 0 11
54559: PUSH
54560: LD_VAR 0 1
54564: PPUSH
54565: LD_VAR 0 2
54569: PPUSH
54570: LD_VAR 0 12
54574: PUSH
54575: LD_INT 1
54577: ARRAY
54578: PPUSH
54579: LD_VAR 0 12
54583: PUSH
54584: LD_INT 2
54586: ARRAY
54587: PPUSH
54588: CALL_OW 298
54592: ST_TO_ADDR
// distance := 9999 ;
54593: LD_ADDR_VAR 0 10
54597: PUSH
54598: LD_INT 9999
54600: ST_TO_ADDR
// for i := 0 to 5 do
54601: LD_ADDR_VAR 0 6
54605: PUSH
54606: DOUBLE
54607: LD_INT 0
54609: DEC
54610: ST_TO_ADDR
54611: LD_INT 5
54613: PUSH
54614: FOR_TO
54615: IFFALSE 54758
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54617: LD_ADDR_VAR 0 7
54621: PUSH
54622: LD_VAR 0 1
54626: PPUSH
54627: LD_VAR 0 6
54631: PPUSH
54632: LD_VAR 0 11
54636: PPUSH
54637: CALL_OW 272
54641: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54642: LD_ADDR_VAR 0 8
54646: PUSH
54647: LD_VAR 0 2
54651: PPUSH
54652: LD_VAR 0 6
54656: PPUSH
54657: LD_VAR 0 11
54661: PPUSH
54662: CALL_OW 273
54666: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54667: LD_VAR 0 7
54671: PPUSH
54672: LD_VAR 0 8
54676: PPUSH
54677: CALL_OW 488
54681: NOT
54682: IFFALSE 54686
// continue ;
54684: GO 54614
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54686: LD_ADDR_VAR 0 9
54690: PUSH
54691: LD_VAR 0 12
54695: PUSH
54696: LD_INT 1
54698: ARRAY
54699: PPUSH
54700: LD_VAR 0 12
54704: PUSH
54705: LD_INT 2
54707: ARRAY
54708: PPUSH
54709: LD_VAR 0 7
54713: PPUSH
54714: LD_VAR 0 8
54718: PPUSH
54719: CALL_OW 298
54723: ST_TO_ADDR
// if tmp < distance then
54724: LD_VAR 0 9
54728: PUSH
54729: LD_VAR 0 10
54733: LESS
54734: IFFALSE 54756
// begin result := i ;
54736: LD_ADDR_VAR 0 5
54740: PUSH
54741: LD_VAR 0 6
54745: ST_TO_ADDR
// distance := tmp ;
54746: LD_ADDR_VAR 0 10
54750: PUSH
54751: LD_VAR 0 9
54755: ST_TO_ADDR
// end ; end ;
54756: GO 54614
54758: POP
54759: POP
// end ;
54760: LD_VAR 0 5
54764: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54765: LD_INT 0
54767: PPUSH
54768: PPUSH
// if not driver or not IsInUnit ( driver ) then
54769: LD_VAR 0 1
54773: NOT
54774: PUSH
54775: LD_VAR 0 1
54779: PPUSH
54780: CALL_OW 310
54784: NOT
54785: OR
54786: IFFALSE 54790
// exit ;
54788: GO 54880
// vehicle := IsInUnit ( driver ) ;
54790: LD_ADDR_VAR 0 3
54794: PUSH
54795: LD_VAR 0 1
54799: PPUSH
54800: CALL_OW 310
54804: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54805: LD_VAR 0 1
54809: PPUSH
54810: LD_STRING \
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: PUSH
54840: LD_STRING E
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_VAR 0 3
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PPUSH
54876: CALL_OW 446
// end ;
54880: LD_VAR 0 2
54884: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54885: LD_INT 0
54887: PPUSH
54888: PPUSH
// if not driver or not IsInUnit ( driver ) then
54889: LD_VAR 0 1
54893: NOT
54894: PUSH
54895: LD_VAR 0 1
54899: PPUSH
54900: CALL_OW 310
54904: NOT
54905: OR
54906: IFFALSE 54910
// exit ;
54908: GO 55000
// vehicle := IsInUnit ( driver ) ;
54910: LD_ADDR_VAR 0 3
54914: PUSH
54915: LD_VAR 0 1
54919: PPUSH
54920: CALL_OW 310
54924: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54925: LD_VAR 0 1
54929: PPUSH
54930: LD_STRING \
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: PUSH
54960: LD_STRING E
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_VAR 0 3
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PPUSH
54996: CALL_OW 447
// end ;
55000: LD_VAR 0 2
55004: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55005: LD_INT 0
55007: PPUSH
55008: PPUSH
55009: PPUSH
// tmp := [ ] ;
55010: LD_ADDR_VAR 0 5
55014: PUSH
55015: EMPTY
55016: ST_TO_ADDR
// for i in units do
55017: LD_ADDR_VAR 0 4
55021: PUSH
55022: LD_VAR 0 1
55026: PUSH
55027: FOR_IN
55028: IFFALSE 55066
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55030: LD_ADDR_VAR 0 5
55034: PUSH
55035: LD_VAR 0 5
55039: PPUSH
55040: LD_VAR 0 5
55044: PUSH
55045: LD_INT 1
55047: PLUS
55048: PPUSH
55049: LD_VAR 0 4
55053: PPUSH
55054: CALL_OW 256
55058: PPUSH
55059: CALL_OW 2
55063: ST_TO_ADDR
55064: GO 55027
55066: POP
55067: POP
// if not tmp then
55068: LD_VAR 0 5
55072: NOT
55073: IFFALSE 55077
// exit ;
55075: GO 55125
// if asc then
55077: LD_VAR 0 2
55081: IFFALSE 55105
// result := SortListByListAsc ( units , tmp ) else
55083: LD_ADDR_VAR 0 3
55087: PUSH
55088: LD_VAR 0 1
55092: PPUSH
55093: LD_VAR 0 5
55097: PPUSH
55098: CALL_OW 76
55102: ST_TO_ADDR
55103: GO 55125
// result := SortListByListDesc ( units , tmp ) ;
55105: LD_ADDR_VAR 0 3
55109: PUSH
55110: LD_VAR 0 1
55114: PPUSH
55115: LD_VAR 0 5
55119: PPUSH
55120: CALL_OW 77
55124: ST_TO_ADDR
// end ;
55125: LD_VAR 0 3
55129: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55130: LD_INT 0
55132: PPUSH
55133: PPUSH
// task := GetTaskList ( mech ) ;
55134: LD_ADDR_VAR 0 4
55138: PUSH
55139: LD_VAR 0 1
55143: PPUSH
55144: CALL_OW 437
55148: ST_TO_ADDR
// if not task then
55149: LD_VAR 0 4
55153: NOT
55154: IFFALSE 55158
// exit ;
55156: GO 55200
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55158: LD_ADDR_VAR 0 3
55162: PUSH
55163: LD_VAR 0 4
55167: PUSH
55168: LD_INT 1
55170: ARRAY
55171: PUSH
55172: LD_INT 1
55174: ARRAY
55175: PUSH
55176: LD_STRING r
55178: EQUAL
55179: PUSH
55180: LD_VAR 0 4
55184: PUSH
55185: LD_INT 1
55187: ARRAY
55188: PUSH
55189: LD_INT 4
55191: ARRAY
55192: PUSH
55193: LD_VAR 0 2
55197: EQUAL
55198: AND
55199: ST_TO_ADDR
// end ;
55200: LD_VAR 0 3
55204: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55205: LD_INT 0
55207: PPUSH
// SetDir ( unit , d ) ;
55208: LD_VAR 0 1
55212: PPUSH
55213: LD_VAR 0 4
55217: PPUSH
55218: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55222: LD_VAR 0 1
55226: PPUSH
55227: LD_VAR 0 2
55231: PPUSH
55232: LD_VAR 0 3
55236: PPUSH
55237: LD_VAR 0 5
55241: PPUSH
55242: CALL_OW 48
// end ;
55246: LD_VAR 0 6
55250: RET
// export function ToNaturalNumber ( number ) ; begin
55251: LD_INT 0
55253: PPUSH
// result := number div 1 ;
55254: LD_ADDR_VAR 0 2
55258: PUSH
55259: LD_VAR 0 1
55263: PUSH
55264: LD_INT 1
55266: DIV
55267: ST_TO_ADDR
// if number < 0 then
55268: LD_VAR 0 1
55272: PUSH
55273: LD_INT 0
55275: LESS
55276: IFFALSE 55286
// result := 0 ;
55278: LD_ADDR_VAR 0 2
55282: PUSH
55283: LD_INT 0
55285: ST_TO_ADDR
// end ;
55286: LD_VAR 0 2
55290: RET
// export function SortByClass ( units , class ) ; var un ; begin
55291: LD_INT 0
55293: PPUSH
55294: PPUSH
// if not units or not class then
55295: LD_VAR 0 1
55299: NOT
55300: PUSH
55301: LD_VAR 0 2
55305: NOT
55306: OR
55307: IFFALSE 55311
// exit ;
55309: GO 55406
// result := [ ] ;
55311: LD_ADDR_VAR 0 3
55315: PUSH
55316: EMPTY
55317: ST_TO_ADDR
// for un in units do
55318: LD_ADDR_VAR 0 4
55322: PUSH
55323: LD_VAR 0 1
55327: PUSH
55328: FOR_IN
55329: IFFALSE 55404
// if GetClass ( un ) = class then
55331: LD_VAR 0 4
55335: PPUSH
55336: CALL_OW 257
55340: PUSH
55341: LD_VAR 0 2
55345: EQUAL
55346: IFFALSE 55373
// result := Insert ( result , 1 , un ) else
55348: LD_ADDR_VAR 0 3
55352: PUSH
55353: LD_VAR 0 3
55357: PPUSH
55358: LD_INT 1
55360: PPUSH
55361: LD_VAR 0 4
55365: PPUSH
55366: CALL_OW 2
55370: ST_TO_ADDR
55371: GO 55402
// result := Replace ( result , result + 1 , un ) ;
55373: LD_ADDR_VAR 0 3
55377: PUSH
55378: LD_VAR 0 3
55382: PPUSH
55383: LD_VAR 0 3
55387: PUSH
55388: LD_INT 1
55390: PLUS
55391: PPUSH
55392: LD_VAR 0 4
55396: PPUSH
55397: CALL_OW 1
55401: ST_TO_ADDR
55402: GO 55328
55404: POP
55405: POP
// end ;
55406: LD_VAR 0 3
55410: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55411: LD_INT 0
55413: PPUSH
55414: PPUSH
55415: PPUSH
55416: PPUSH
55417: PPUSH
55418: PPUSH
55419: PPUSH
// result := [ ] ;
55420: LD_ADDR_VAR 0 4
55424: PUSH
55425: EMPTY
55426: ST_TO_ADDR
// if x - r < 0 then
55427: LD_VAR 0 1
55431: PUSH
55432: LD_VAR 0 3
55436: MINUS
55437: PUSH
55438: LD_INT 0
55440: LESS
55441: IFFALSE 55453
// min_x := 0 else
55443: LD_ADDR_VAR 0 8
55447: PUSH
55448: LD_INT 0
55450: ST_TO_ADDR
55451: GO 55469
// min_x := x - r ;
55453: LD_ADDR_VAR 0 8
55457: PUSH
55458: LD_VAR 0 1
55462: PUSH
55463: LD_VAR 0 3
55467: MINUS
55468: ST_TO_ADDR
// if y - r < 0 then
55469: LD_VAR 0 2
55473: PUSH
55474: LD_VAR 0 3
55478: MINUS
55479: PUSH
55480: LD_INT 0
55482: LESS
55483: IFFALSE 55495
// min_y := 0 else
55485: LD_ADDR_VAR 0 7
55489: PUSH
55490: LD_INT 0
55492: ST_TO_ADDR
55493: GO 55511
// min_y := y - r ;
55495: LD_ADDR_VAR 0 7
55499: PUSH
55500: LD_VAR 0 2
55504: PUSH
55505: LD_VAR 0 3
55509: MINUS
55510: ST_TO_ADDR
// max_x := x + r ;
55511: LD_ADDR_VAR 0 9
55515: PUSH
55516: LD_VAR 0 1
55520: PUSH
55521: LD_VAR 0 3
55525: PLUS
55526: ST_TO_ADDR
// max_y := y + r ;
55527: LD_ADDR_VAR 0 10
55531: PUSH
55532: LD_VAR 0 2
55536: PUSH
55537: LD_VAR 0 3
55541: PLUS
55542: ST_TO_ADDR
// for _x = min_x to max_x do
55543: LD_ADDR_VAR 0 5
55547: PUSH
55548: DOUBLE
55549: LD_VAR 0 8
55553: DEC
55554: ST_TO_ADDR
55555: LD_VAR 0 9
55559: PUSH
55560: FOR_TO
55561: IFFALSE 55662
// for _y = min_y to max_y do
55563: LD_ADDR_VAR 0 6
55567: PUSH
55568: DOUBLE
55569: LD_VAR 0 7
55573: DEC
55574: ST_TO_ADDR
55575: LD_VAR 0 10
55579: PUSH
55580: FOR_TO
55581: IFFALSE 55658
// begin if not ValidHex ( _x , _y ) then
55583: LD_VAR 0 5
55587: PPUSH
55588: LD_VAR 0 6
55592: PPUSH
55593: CALL_OW 488
55597: NOT
55598: IFFALSE 55602
// continue ;
55600: GO 55580
// if GetResourceTypeXY ( _x , _y ) then
55602: LD_VAR 0 5
55606: PPUSH
55607: LD_VAR 0 6
55611: PPUSH
55612: CALL_OW 283
55616: IFFALSE 55656
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55618: LD_ADDR_VAR 0 4
55622: PUSH
55623: LD_VAR 0 4
55627: PPUSH
55628: LD_VAR 0 4
55632: PUSH
55633: LD_INT 1
55635: PLUS
55636: PPUSH
55637: LD_VAR 0 5
55641: PUSH
55642: LD_VAR 0 6
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PPUSH
55651: CALL_OW 1
55655: ST_TO_ADDR
// end ;
55656: GO 55580
55658: POP
55659: POP
55660: GO 55560
55662: POP
55663: POP
// end ;
55664: LD_VAR 0 4
55668: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55669: LD_INT 0
55671: PPUSH
55672: PPUSH
55673: PPUSH
55674: PPUSH
55675: PPUSH
55676: PPUSH
55677: PPUSH
55678: PPUSH
// if not units then
55679: LD_VAR 0 1
55683: NOT
55684: IFFALSE 55688
// exit ;
55686: GO 56212
// result := UnitFilter ( units , [ f_ok ] ) ;
55688: LD_ADDR_VAR 0 3
55692: PUSH
55693: LD_VAR 0 1
55697: PPUSH
55698: LD_INT 50
55700: PUSH
55701: EMPTY
55702: LIST
55703: PPUSH
55704: CALL_OW 72
55708: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55709: LD_ADDR_VAR 0 8
55713: PUSH
55714: LD_VAR 0 1
55718: PUSH
55719: LD_INT 1
55721: ARRAY
55722: PPUSH
55723: CALL_OW 255
55727: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55728: LD_ADDR_VAR 0 10
55732: PUSH
55733: LD_INT 29
55735: PUSH
55736: LD_INT 91
55738: PUSH
55739: LD_INT 49
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: LIST
55746: ST_TO_ADDR
// if not result then
55747: LD_VAR 0 3
55751: NOT
55752: IFFALSE 55756
// exit ;
55754: GO 56212
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55756: LD_ADDR_VAR 0 5
55760: PUSH
55761: LD_INT 81
55763: PUSH
55764: LD_VAR 0 8
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PPUSH
55773: CALL_OW 69
55777: ST_TO_ADDR
// for i in result do
55778: LD_ADDR_VAR 0 4
55782: PUSH
55783: LD_VAR 0 3
55787: PUSH
55788: FOR_IN
55789: IFFALSE 56210
// begin tag := GetTag ( i ) + 1 ;
55791: LD_ADDR_VAR 0 9
55795: PUSH
55796: LD_VAR 0 4
55800: PPUSH
55801: CALL_OW 110
55805: PUSH
55806: LD_INT 1
55808: PLUS
55809: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55810: LD_ADDR_VAR 0 7
55814: PUSH
55815: LD_VAR 0 4
55819: PPUSH
55820: CALL_OW 250
55824: PPUSH
55825: LD_VAR 0 4
55829: PPUSH
55830: CALL_OW 251
55834: PPUSH
55835: LD_INT 6
55837: PPUSH
55838: CALL 55411 0 3
55842: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55843: LD_VAR 0 4
55847: PPUSH
55848: CALL_OW 247
55852: PUSH
55853: LD_INT 2
55855: EQUAL
55856: PUSH
55857: LD_VAR 0 7
55861: AND
55862: PUSH
55863: LD_VAR 0 4
55867: PPUSH
55868: CALL_OW 264
55872: PUSH
55873: LD_VAR 0 10
55877: IN
55878: NOT
55879: AND
55880: IFFALSE 55919
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55882: LD_VAR 0 4
55886: PPUSH
55887: LD_VAR 0 7
55891: PUSH
55892: LD_INT 1
55894: ARRAY
55895: PUSH
55896: LD_INT 1
55898: ARRAY
55899: PPUSH
55900: LD_VAR 0 7
55904: PUSH
55905: LD_INT 1
55907: ARRAY
55908: PUSH
55909: LD_INT 2
55911: ARRAY
55912: PPUSH
55913: CALL_OW 116
55917: GO 56208
// if path > tag then
55919: LD_VAR 0 2
55923: PUSH
55924: LD_VAR 0 9
55928: GREATER
55929: IFFALSE 56137
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55931: LD_ADDR_VAR 0 6
55935: PUSH
55936: LD_VAR 0 5
55940: PPUSH
55941: LD_INT 91
55943: PUSH
55944: LD_VAR 0 4
55948: PUSH
55949: LD_INT 8
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: LIST
55956: PPUSH
55957: CALL_OW 72
55961: ST_TO_ADDR
// if nearEnemy then
55962: LD_VAR 0 6
55966: IFFALSE 56035
// begin if GetWeapon ( i ) = ru_time_lapser then
55968: LD_VAR 0 4
55972: PPUSH
55973: CALL_OW 264
55977: PUSH
55978: LD_INT 49
55980: EQUAL
55981: IFFALSE 56009
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55983: LD_VAR 0 4
55987: PPUSH
55988: LD_VAR 0 6
55992: PPUSH
55993: LD_VAR 0 4
55997: PPUSH
55998: CALL_OW 74
56002: PPUSH
56003: CALL_OW 112
56007: GO 56033
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56009: LD_VAR 0 4
56013: PPUSH
56014: LD_VAR 0 6
56018: PPUSH
56019: LD_VAR 0 4
56023: PPUSH
56024: CALL_OW 74
56028: PPUSH
56029: CALL 57137 0 2
// end else
56033: GO 56135
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56035: LD_VAR 0 4
56039: PPUSH
56040: LD_VAR 0 2
56044: PUSH
56045: LD_VAR 0 9
56049: ARRAY
56050: PUSH
56051: LD_INT 1
56053: ARRAY
56054: PPUSH
56055: LD_VAR 0 2
56059: PUSH
56060: LD_VAR 0 9
56064: ARRAY
56065: PUSH
56066: LD_INT 2
56068: ARRAY
56069: PPUSH
56070: CALL_OW 297
56074: PUSH
56075: LD_INT 6
56077: GREATER
56078: IFFALSE 56121
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56080: LD_VAR 0 4
56084: PPUSH
56085: LD_VAR 0 2
56089: PUSH
56090: LD_VAR 0 9
56094: ARRAY
56095: PUSH
56096: LD_INT 1
56098: ARRAY
56099: PPUSH
56100: LD_VAR 0 2
56104: PUSH
56105: LD_VAR 0 9
56109: ARRAY
56110: PUSH
56111: LD_INT 2
56113: ARRAY
56114: PPUSH
56115: CALL_OW 114
56119: GO 56135
// SetTag ( i , tag ) ;
56121: LD_VAR 0 4
56125: PPUSH
56126: LD_VAR 0 9
56130: PPUSH
56131: CALL_OW 109
// end else
56135: GO 56208
// if enemy then
56137: LD_VAR 0 5
56141: IFFALSE 56208
// begin if GetWeapon ( i ) = ru_time_lapser then
56143: LD_VAR 0 4
56147: PPUSH
56148: CALL_OW 264
56152: PUSH
56153: LD_INT 49
56155: EQUAL
56156: IFFALSE 56184
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56158: LD_VAR 0 4
56162: PPUSH
56163: LD_VAR 0 5
56167: PPUSH
56168: LD_VAR 0 4
56172: PPUSH
56173: CALL_OW 74
56177: PPUSH
56178: CALL_OW 112
56182: GO 56208
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56184: LD_VAR 0 4
56188: PPUSH
56189: LD_VAR 0 5
56193: PPUSH
56194: LD_VAR 0 4
56198: PPUSH
56199: CALL_OW 74
56203: PPUSH
56204: CALL 57137 0 2
// end ; end ;
56208: GO 55788
56210: POP
56211: POP
// end ;
56212: LD_VAR 0 3
56216: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56217: LD_INT 0
56219: PPUSH
56220: PPUSH
56221: PPUSH
// if not unit or IsInUnit ( unit ) then
56222: LD_VAR 0 1
56226: NOT
56227: PUSH
56228: LD_VAR 0 1
56232: PPUSH
56233: CALL_OW 310
56237: OR
56238: IFFALSE 56242
// exit ;
56240: GO 56333
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56242: LD_ADDR_VAR 0 4
56246: PUSH
56247: LD_VAR 0 1
56251: PPUSH
56252: CALL_OW 250
56256: PPUSH
56257: LD_VAR 0 2
56261: PPUSH
56262: LD_INT 1
56264: PPUSH
56265: CALL_OW 272
56269: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56270: LD_ADDR_VAR 0 5
56274: PUSH
56275: LD_VAR 0 1
56279: PPUSH
56280: CALL_OW 251
56284: PPUSH
56285: LD_VAR 0 2
56289: PPUSH
56290: LD_INT 1
56292: PPUSH
56293: CALL_OW 273
56297: ST_TO_ADDR
// if ValidHex ( x , y ) then
56298: LD_VAR 0 4
56302: PPUSH
56303: LD_VAR 0 5
56307: PPUSH
56308: CALL_OW 488
56312: IFFALSE 56333
// ComTurnXY ( unit , x , y ) ;
56314: LD_VAR 0 1
56318: PPUSH
56319: LD_VAR 0 4
56323: PPUSH
56324: LD_VAR 0 5
56328: PPUSH
56329: CALL_OW 118
// end ;
56333: LD_VAR 0 3
56337: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56338: LD_INT 0
56340: PPUSH
56341: PPUSH
// result := false ;
56342: LD_ADDR_VAR 0 3
56346: PUSH
56347: LD_INT 0
56349: ST_TO_ADDR
// if not units then
56350: LD_VAR 0 2
56354: NOT
56355: IFFALSE 56359
// exit ;
56357: GO 56404
// for i in units do
56359: LD_ADDR_VAR 0 4
56363: PUSH
56364: LD_VAR 0 2
56368: PUSH
56369: FOR_IN
56370: IFFALSE 56402
// if See ( side , i ) then
56372: LD_VAR 0 1
56376: PPUSH
56377: LD_VAR 0 4
56381: PPUSH
56382: CALL_OW 292
56386: IFFALSE 56400
// begin result := true ;
56388: LD_ADDR_VAR 0 3
56392: PUSH
56393: LD_INT 1
56395: ST_TO_ADDR
// exit ;
56396: POP
56397: POP
56398: GO 56404
// end ;
56400: GO 56369
56402: POP
56403: POP
// end ;
56404: LD_VAR 0 3
56408: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56409: LD_INT 0
56411: PPUSH
56412: PPUSH
56413: PPUSH
56414: PPUSH
// if not unit or not points then
56415: LD_VAR 0 1
56419: NOT
56420: PUSH
56421: LD_VAR 0 2
56425: NOT
56426: OR
56427: IFFALSE 56431
// exit ;
56429: GO 56521
// dist := 99999 ;
56431: LD_ADDR_VAR 0 5
56435: PUSH
56436: LD_INT 99999
56438: ST_TO_ADDR
// for i in points do
56439: LD_ADDR_VAR 0 4
56443: PUSH
56444: LD_VAR 0 2
56448: PUSH
56449: FOR_IN
56450: IFFALSE 56519
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56452: LD_ADDR_VAR 0 6
56456: PUSH
56457: LD_VAR 0 1
56461: PPUSH
56462: LD_VAR 0 4
56466: PUSH
56467: LD_INT 1
56469: ARRAY
56470: PPUSH
56471: LD_VAR 0 4
56475: PUSH
56476: LD_INT 2
56478: ARRAY
56479: PPUSH
56480: CALL_OW 297
56484: ST_TO_ADDR
// if tmpDist < dist then
56485: LD_VAR 0 6
56489: PUSH
56490: LD_VAR 0 5
56494: LESS
56495: IFFALSE 56517
// begin result := i ;
56497: LD_ADDR_VAR 0 3
56501: PUSH
56502: LD_VAR 0 4
56506: ST_TO_ADDR
// dist := tmpDist ;
56507: LD_ADDR_VAR 0 5
56511: PUSH
56512: LD_VAR 0 6
56516: ST_TO_ADDR
// end ; end ;
56517: GO 56449
56519: POP
56520: POP
// end ;
56521: LD_VAR 0 3
56525: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56526: LD_INT 0
56528: PPUSH
// uc_side := side ;
56529: LD_ADDR_OWVAR 20
56533: PUSH
56534: LD_VAR 0 1
56538: ST_TO_ADDR
// uc_nation := 3 ;
56539: LD_ADDR_OWVAR 21
56543: PUSH
56544: LD_INT 3
56546: ST_TO_ADDR
// vc_chassis := 25 ;
56547: LD_ADDR_OWVAR 37
56551: PUSH
56552: LD_INT 25
56554: ST_TO_ADDR
// vc_engine := engine_siberite ;
56555: LD_ADDR_OWVAR 39
56559: PUSH
56560: LD_INT 3
56562: ST_TO_ADDR
// vc_control := control_computer ;
56563: LD_ADDR_OWVAR 38
56567: PUSH
56568: LD_INT 3
56570: ST_TO_ADDR
// vc_weapon := 59 ;
56571: LD_ADDR_OWVAR 40
56575: PUSH
56576: LD_INT 59
56578: ST_TO_ADDR
// result := CreateVehicle ;
56579: LD_ADDR_VAR 0 5
56583: PUSH
56584: CALL_OW 45
56588: ST_TO_ADDR
// SetDir ( result , d ) ;
56589: LD_VAR 0 5
56593: PPUSH
56594: LD_VAR 0 4
56598: PPUSH
56599: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56603: LD_VAR 0 5
56607: PPUSH
56608: LD_VAR 0 2
56612: PPUSH
56613: LD_VAR 0 3
56617: PPUSH
56618: LD_INT 0
56620: PPUSH
56621: CALL_OW 48
// end ;
56625: LD_VAR 0 5
56629: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56630: LD_INT 0
56632: PPUSH
56633: PPUSH
56634: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56635: LD_ADDR_VAR 0 2
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56658: LD_VAR 0 1
56662: NOT
56663: PUSH
56664: LD_VAR 0 1
56668: PPUSH
56669: CALL_OW 264
56673: PUSH
56674: LD_INT 12
56676: PUSH
56677: LD_INT 51
56679: PUSH
56680: LD_INT 32
56682: PUSH
56683: LD_INT 89
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: IN
56692: NOT
56693: OR
56694: IFFALSE 56698
// exit ;
56696: GO 56796
// for i := 1 to 3 do
56698: LD_ADDR_VAR 0 3
56702: PUSH
56703: DOUBLE
56704: LD_INT 1
56706: DEC
56707: ST_TO_ADDR
56708: LD_INT 3
56710: PUSH
56711: FOR_TO
56712: IFFALSE 56794
// begin tmp := GetCargo ( cargo , i ) ;
56714: LD_ADDR_VAR 0 4
56718: PUSH
56719: LD_VAR 0 1
56723: PPUSH
56724: LD_VAR 0 3
56728: PPUSH
56729: CALL_OW 289
56733: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56734: LD_ADDR_VAR 0 2
56738: PUSH
56739: LD_VAR 0 2
56743: PPUSH
56744: LD_VAR 0 3
56748: PPUSH
56749: LD_VAR 0 4
56753: PPUSH
56754: CALL_OW 1
56758: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56759: LD_ADDR_VAR 0 2
56763: PUSH
56764: LD_VAR 0 2
56768: PPUSH
56769: LD_INT 4
56771: PPUSH
56772: LD_VAR 0 2
56776: PUSH
56777: LD_INT 4
56779: ARRAY
56780: PUSH
56781: LD_VAR 0 4
56785: PLUS
56786: PPUSH
56787: CALL_OW 1
56791: ST_TO_ADDR
// end ;
56792: GO 56711
56794: POP
56795: POP
// end ;
56796: LD_VAR 0 2
56800: RET
// export function Length ( array ) ; begin
56801: LD_INT 0
56803: PPUSH
// result := array + 0 ;
56804: LD_ADDR_VAR 0 2
56808: PUSH
56809: LD_VAR 0 1
56813: PUSH
56814: LD_INT 0
56816: PLUS
56817: ST_TO_ADDR
// end ;
56818: LD_VAR 0 2
56822: RET
// export function PrepareArray ( array ) ; begin
56823: LD_INT 0
56825: PPUSH
// result := array diff 0 ;
56826: LD_ADDR_VAR 0 2
56830: PUSH
56831: LD_VAR 0 1
56835: PUSH
56836: LD_INT 0
56838: DIFF
56839: ST_TO_ADDR
// if not result [ 1 ] then
56840: LD_VAR 0 2
56844: PUSH
56845: LD_INT 1
56847: ARRAY
56848: NOT
56849: IFFALSE 56869
// result := Delete ( result , 1 ) ;
56851: LD_ADDR_VAR 0 2
56855: PUSH
56856: LD_VAR 0 2
56860: PPUSH
56861: LD_INT 1
56863: PPUSH
56864: CALL_OW 3
56868: ST_TO_ADDR
// end ;
56869: LD_VAR 0 2
56873: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56874: LD_INT 0
56876: PPUSH
56877: PPUSH
56878: PPUSH
56879: PPUSH
// sibRocketRange := 25 ;
56880: LD_ADDR_VAR 0 6
56884: PUSH
56885: LD_INT 25
56887: ST_TO_ADDR
// result := false ;
56888: LD_ADDR_VAR 0 4
56892: PUSH
56893: LD_INT 0
56895: ST_TO_ADDR
// for i := 0 to 5 do
56896: LD_ADDR_VAR 0 5
56900: PUSH
56901: DOUBLE
56902: LD_INT 0
56904: DEC
56905: ST_TO_ADDR
56906: LD_INT 5
56908: PUSH
56909: FOR_TO
56910: IFFALSE 56977
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56912: LD_VAR 0 1
56916: PPUSH
56917: LD_VAR 0 5
56921: PPUSH
56922: LD_VAR 0 6
56926: PPUSH
56927: CALL_OW 272
56931: PPUSH
56932: LD_VAR 0 2
56936: PPUSH
56937: LD_VAR 0 5
56941: PPUSH
56942: LD_VAR 0 6
56946: PPUSH
56947: CALL_OW 273
56951: PPUSH
56952: LD_VAR 0 3
56956: PPUSH
56957: CALL_OW 309
56961: IFFALSE 56975
// begin result := true ;
56963: LD_ADDR_VAR 0 4
56967: PUSH
56968: LD_INT 1
56970: ST_TO_ADDR
// exit ;
56971: POP
56972: POP
56973: GO 56979
// end ;
56975: GO 56909
56977: POP
56978: POP
// end ;
56979: LD_VAR 0 4
56983: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56984: LD_INT 0
56986: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56987: LD_VAR 0 1
56991: PPUSH
56992: LD_VAR 0 2
56996: PPUSH
56997: LD_INT 0
56999: PPUSH
57000: LD_INT 0
57002: PPUSH
57003: LD_INT 1
57005: PPUSH
57006: LD_INT 0
57008: PPUSH
57009: CALL_OW 587
// end ;
57013: LD_VAR 0 3
57017: RET
// export function CenterOnNow ( unit ) ; begin
57018: LD_INT 0
57020: PPUSH
// result := IsInUnit ( unit ) ;
57021: LD_ADDR_VAR 0 2
57025: PUSH
57026: LD_VAR 0 1
57030: PPUSH
57031: CALL_OW 310
57035: ST_TO_ADDR
// if not result then
57036: LD_VAR 0 2
57040: NOT
57041: IFFALSE 57053
// result := unit ;
57043: LD_ADDR_VAR 0 2
57047: PUSH
57048: LD_VAR 0 1
57052: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57053: LD_VAR 0 1
57057: PPUSH
57058: CALL_OW 87
// end ;
57062: LD_VAR 0 2
57066: RET
// export function ComMoveHex ( unit , hex ) ; begin
57067: LD_INT 0
57069: PPUSH
// if not hex then
57070: LD_VAR 0 2
57074: NOT
57075: IFFALSE 57079
// exit ;
57077: GO 57132
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57079: LD_VAR 0 2
57083: PUSH
57084: LD_INT 1
57086: ARRAY
57087: PPUSH
57088: LD_VAR 0 2
57092: PUSH
57093: LD_INT 2
57095: ARRAY
57096: PPUSH
57097: CALL_OW 428
57101: IFFALSE 57105
// exit ;
57103: GO 57132
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57105: LD_VAR 0 1
57109: PPUSH
57110: LD_VAR 0 2
57114: PUSH
57115: LD_INT 1
57117: ARRAY
57118: PPUSH
57119: LD_VAR 0 2
57123: PUSH
57124: LD_INT 2
57126: ARRAY
57127: PPUSH
57128: CALL_OW 111
// end ;
57132: LD_VAR 0 3
57136: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57137: LD_INT 0
57139: PPUSH
57140: PPUSH
57141: PPUSH
// if not unit or not enemy then
57142: LD_VAR 0 1
57146: NOT
57147: PUSH
57148: LD_VAR 0 2
57152: NOT
57153: OR
57154: IFFALSE 57158
// exit ;
57156: GO 57282
// x := GetX ( enemy ) ;
57158: LD_ADDR_VAR 0 4
57162: PUSH
57163: LD_VAR 0 2
57167: PPUSH
57168: CALL_OW 250
57172: ST_TO_ADDR
// y := GetY ( enemy ) ;
57173: LD_ADDR_VAR 0 5
57177: PUSH
57178: LD_VAR 0 2
57182: PPUSH
57183: CALL_OW 251
57187: ST_TO_ADDR
// if ValidHex ( x , y ) then
57188: LD_VAR 0 4
57192: PPUSH
57193: LD_VAR 0 5
57197: PPUSH
57198: CALL_OW 488
57202: IFFALSE 57282
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
57204: LD_VAR 0 2
57208: PPUSH
57209: CALL_OW 247
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: IN
57224: PUSH
57225: LD_VAR 0 1
57229: PPUSH
57230: CALL_OW 255
57234: PPUSH
57235: LD_VAR 0 2
57239: PPUSH
57240: CALL_OW 292
57244: AND
57245: IFFALSE 57263
// ComAttackUnit ( unit , enemy ) else
57247: LD_VAR 0 1
57251: PPUSH
57252: LD_VAR 0 2
57256: PPUSH
57257: CALL_OW 115
57261: GO 57282
// ComAgressiveMove ( unit , x , y ) ;
57263: LD_VAR 0 1
57267: PPUSH
57268: LD_VAR 0 4
57272: PPUSH
57273: LD_VAR 0 5
57277: PPUSH
57278: CALL_OW 114
// end ; end_of_file end_of_file
57282: LD_VAR 0 3
57286: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
57287: LD_VAR 0 1
57291: PPUSH
57292: LD_VAR 0 2
57296: PPUSH
57297: LD_VAR 0 3
57301: PPUSH
57302: LD_VAR 0 4
57306: PPUSH
57307: LD_VAR 0 5
57311: PPUSH
57312: LD_VAR 0 6
57316: PPUSH
57317: CALL 57501 0 6
// end ;
57321: PPOPN 6
57323: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
57324: LD_INT 0
57326: PPUSH
// begin if not units then
57327: LD_VAR 0 1
57331: NOT
57332: IFFALSE 57336
// exit ;
57334: GO 57336
// end ;
57336: PPOPN 7
57338: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
57339: CALL 57405 0 0
// end ; end_of_file
57343: PPOPN 1
57345: END
// export globalGameSaveCounter ; every 0 0$1 do
57346: GO 57348
57348: DISABLE
// begin enable ;
57349: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57350: LD_STRING updateTimer(
57352: PUSH
57353: LD_OWVAR 1
57357: STR
57358: PUSH
57359: LD_STRING );
57361: STR
57362: PPUSH
57363: CALL_OW 559
// end ;
57367: END
// every 0 0$1 do
57368: GO 57370
57370: DISABLE
// begin globalGameSaveCounter := 0 ;
57371: LD_ADDR_EXP 37
57375: PUSH
57376: LD_INT 0
57378: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
57379: LD_STRING setGameSaveCounter(0)
57381: PPUSH
57382: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
57386: LD_STRING initStreamRollete();
57388: PPUSH
57389: CALL_OW 559
// InitStreamMode ;
57393: CALL 58719 0 0
// DefineStreamItems ( false ) ;
57397: LD_INT 0
57399: PPUSH
57400: CALL 59183 0 1
// end ;
57404: END
// export function SOS_MapStart ( ) ; begin
57405: LD_INT 0
57407: PPUSH
// if streamModeActive then
57408: LD_EXP 38
57412: IFFALSE 57421
// DefineStreamItems ( true ) ;
57414: LD_INT 1
57416: PPUSH
57417: CALL 59183 0 1
// UpdateLuaVariables ( ) ;
57421: CALL 57438 0 0
// UpdateFactoryWaypoints ( ) ;
57425: CALL 72052 0 0
// UpdateWarehouseGatheringPoints ( ) ;
57429: CALL 72309 0 0
// end ;
57433: LD_VAR 0 1
57437: RET
// function UpdateLuaVariables ( ) ; begin
57438: LD_INT 0
57440: PPUSH
// if globalGameSaveCounter then
57441: LD_EXP 37
57445: IFFALSE 57479
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
57447: LD_ADDR_EXP 37
57451: PUSH
57452: LD_EXP 37
57456: PPUSH
57457: CALL 54426 0 1
57461: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
57462: LD_STRING setGameSaveCounter(
57464: PUSH
57465: LD_EXP 37
57469: STR
57470: PUSH
57471: LD_STRING )
57473: STR
57474: PPUSH
57475: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
57479: LD_STRING setGameDifficulty(
57481: PUSH
57482: LD_OWVAR 67
57486: STR
57487: PUSH
57488: LD_STRING )
57490: STR
57491: PPUSH
57492: CALL_OW 559
// end ;
57496: LD_VAR 0 1
57500: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57501: LD_INT 0
57503: PPUSH
// if p2 = stream_mode then
57504: LD_VAR 0 2
57508: PUSH
57509: LD_INT 100
57511: EQUAL
57512: IFFALSE 58515
// begin if not StreamModeActive then
57514: LD_EXP 38
57518: NOT
57519: IFFALSE 57529
// StreamModeActive := true ;
57521: LD_ADDR_EXP 38
57525: PUSH
57526: LD_INT 1
57528: ST_TO_ADDR
// if p3 = 0 then
57529: LD_VAR 0 3
57533: PUSH
57534: LD_INT 0
57536: EQUAL
57537: IFFALSE 57543
// InitStreamMode ;
57539: CALL 58719 0 0
// if p3 = 1 then
57543: LD_VAR 0 3
57547: PUSH
57548: LD_INT 1
57550: EQUAL
57551: IFFALSE 57561
// sRocket := true ;
57553: LD_ADDR_EXP 43
57557: PUSH
57558: LD_INT 1
57560: ST_TO_ADDR
// if p3 = 2 then
57561: LD_VAR 0 3
57565: PUSH
57566: LD_INT 2
57568: EQUAL
57569: IFFALSE 57579
// sSpeed := true ;
57571: LD_ADDR_EXP 42
57575: PUSH
57576: LD_INT 1
57578: ST_TO_ADDR
// if p3 = 3 then
57579: LD_VAR 0 3
57583: PUSH
57584: LD_INT 3
57586: EQUAL
57587: IFFALSE 57597
// sEngine := true ;
57589: LD_ADDR_EXP 44
57593: PUSH
57594: LD_INT 1
57596: ST_TO_ADDR
// if p3 = 4 then
57597: LD_VAR 0 3
57601: PUSH
57602: LD_INT 4
57604: EQUAL
57605: IFFALSE 57615
// sSpec := true ;
57607: LD_ADDR_EXP 41
57611: PUSH
57612: LD_INT 1
57614: ST_TO_ADDR
// if p3 = 5 then
57615: LD_VAR 0 3
57619: PUSH
57620: LD_INT 5
57622: EQUAL
57623: IFFALSE 57633
// sLevel := true ;
57625: LD_ADDR_EXP 45
57629: PUSH
57630: LD_INT 1
57632: ST_TO_ADDR
// if p3 = 6 then
57633: LD_VAR 0 3
57637: PUSH
57638: LD_INT 6
57640: EQUAL
57641: IFFALSE 57651
// sArmoury := true ;
57643: LD_ADDR_EXP 46
57647: PUSH
57648: LD_INT 1
57650: ST_TO_ADDR
// if p3 = 7 then
57651: LD_VAR 0 3
57655: PUSH
57656: LD_INT 7
57658: EQUAL
57659: IFFALSE 57669
// sRadar := true ;
57661: LD_ADDR_EXP 47
57665: PUSH
57666: LD_INT 1
57668: ST_TO_ADDR
// if p3 = 8 then
57669: LD_VAR 0 3
57673: PUSH
57674: LD_INT 8
57676: EQUAL
57677: IFFALSE 57687
// sBunker := true ;
57679: LD_ADDR_EXP 48
57683: PUSH
57684: LD_INT 1
57686: ST_TO_ADDR
// if p3 = 9 then
57687: LD_VAR 0 3
57691: PUSH
57692: LD_INT 9
57694: EQUAL
57695: IFFALSE 57705
// sHack := true ;
57697: LD_ADDR_EXP 49
57701: PUSH
57702: LD_INT 1
57704: ST_TO_ADDR
// if p3 = 10 then
57705: LD_VAR 0 3
57709: PUSH
57710: LD_INT 10
57712: EQUAL
57713: IFFALSE 57723
// sFire := true ;
57715: LD_ADDR_EXP 50
57719: PUSH
57720: LD_INT 1
57722: ST_TO_ADDR
// if p3 = 11 then
57723: LD_VAR 0 3
57727: PUSH
57728: LD_INT 11
57730: EQUAL
57731: IFFALSE 57741
// sRefresh := true ;
57733: LD_ADDR_EXP 51
57737: PUSH
57738: LD_INT 1
57740: ST_TO_ADDR
// if p3 = 12 then
57741: LD_VAR 0 3
57745: PUSH
57746: LD_INT 12
57748: EQUAL
57749: IFFALSE 57759
// sExp := true ;
57751: LD_ADDR_EXP 52
57755: PUSH
57756: LD_INT 1
57758: ST_TO_ADDR
// if p3 = 13 then
57759: LD_VAR 0 3
57763: PUSH
57764: LD_INT 13
57766: EQUAL
57767: IFFALSE 57777
// sDepot := true ;
57769: LD_ADDR_EXP 53
57773: PUSH
57774: LD_INT 1
57776: ST_TO_ADDR
// if p3 = 14 then
57777: LD_VAR 0 3
57781: PUSH
57782: LD_INT 14
57784: EQUAL
57785: IFFALSE 57795
// sFlag := true ;
57787: LD_ADDR_EXP 54
57791: PUSH
57792: LD_INT 1
57794: ST_TO_ADDR
// if p3 = 15 then
57795: LD_VAR 0 3
57799: PUSH
57800: LD_INT 15
57802: EQUAL
57803: IFFALSE 57813
// sKamikadze := true ;
57805: LD_ADDR_EXP 62
57809: PUSH
57810: LD_INT 1
57812: ST_TO_ADDR
// if p3 = 16 then
57813: LD_VAR 0 3
57817: PUSH
57818: LD_INT 16
57820: EQUAL
57821: IFFALSE 57831
// sTroll := true ;
57823: LD_ADDR_EXP 63
57827: PUSH
57828: LD_INT 1
57830: ST_TO_ADDR
// if p3 = 17 then
57831: LD_VAR 0 3
57835: PUSH
57836: LD_INT 17
57838: EQUAL
57839: IFFALSE 57849
// sSlow := true ;
57841: LD_ADDR_EXP 64
57845: PUSH
57846: LD_INT 1
57848: ST_TO_ADDR
// if p3 = 18 then
57849: LD_VAR 0 3
57853: PUSH
57854: LD_INT 18
57856: EQUAL
57857: IFFALSE 57867
// sLack := true ;
57859: LD_ADDR_EXP 65
57863: PUSH
57864: LD_INT 1
57866: ST_TO_ADDR
// if p3 = 19 then
57867: LD_VAR 0 3
57871: PUSH
57872: LD_INT 19
57874: EQUAL
57875: IFFALSE 57885
// sTank := true ;
57877: LD_ADDR_EXP 67
57881: PUSH
57882: LD_INT 1
57884: ST_TO_ADDR
// if p3 = 20 then
57885: LD_VAR 0 3
57889: PUSH
57890: LD_INT 20
57892: EQUAL
57893: IFFALSE 57903
// sRemote := true ;
57895: LD_ADDR_EXP 68
57899: PUSH
57900: LD_INT 1
57902: ST_TO_ADDR
// if p3 = 21 then
57903: LD_VAR 0 3
57907: PUSH
57908: LD_INT 21
57910: EQUAL
57911: IFFALSE 57921
// sPowell := true ;
57913: LD_ADDR_EXP 69
57917: PUSH
57918: LD_INT 1
57920: ST_TO_ADDR
// if p3 = 22 then
57921: LD_VAR 0 3
57925: PUSH
57926: LD_INT 22
57928: EQUAL
57929: IFFALSE 57939
// sTeleport := true ;
57931: LD_ADDR_EXP 72
57935: PUSH
57936: LD_INT 1
57938: ST_TO_ADDR
// if p3 = 23 then
57939: LD_VAR 0 3
57943: PUSH
57944: LD_INT 23
57946: EQUAL
57947: IFFALSE 57957
// sOilTower := true ;
57949: LD_ADDR_EXP 74
57953: PUSH
57954: LD_INT 1
57956: ST_TO_ADDR
// if p3 = 24 then
57957: LD_VAR 0 3
57961: PUSH
57962: LD_INT 24
57964: EQUAL
57965: IFFALSE 57975
// sShovel := true ;
57967: LD_ADDR_EXP 75
57971: PUSH
57972: LD_INT 1
57974: ST_TO_ADDR
// if p3 = 25 then
57975: LD_VAR 0 3
57979: PUSH
57980: LD_INT 25
57982: EQUAL
57983: IFFALSE 57993
// sSheik := true ;
57985: LD_ADDR_EXP 76
57989: PUSH
57990: LD_INT 1
57992: ST_TO_ADDR
// if p3 = 26 then
57993: LD_VAR 0 3
57997: PUSH
57998: LD_INT 26
58000: EQUAL
58001: IFFALSE 58011
// sEarthquake := true ;
58003: LD_ADDR_EXP 78
58007: PUSH
58008: LD_INT 1
58010: ST_TO_ADDR
// if p3 = 27 then
58011: LD_VAR 0 3
58015: PUSH
58016: LD_INT 27
58018: EQUAL
58019: IFFALSE 58029
// sAI := true ;
58021: LD_ADDR_EXP 79
58025: PUSH
58026: LD_INT 1
58028: ST_TO_ADDR
// if p3 = 28 then
58029: LD_VAR 0 3
58033: PUSH
58034: LD_INT 28
58036: EQUAL
58037: IFFALSE 58047
// sCargo := true ;
58039: LD_ADDR_EXP 82
58043: PUSH
58044: LD_INT 1
58046: ST_TO_ADDR
// if p3 = 29 then
58047: LD_VAR 0 3
58051: PUSH
58052: LD_INT 29
58054: EQUAL
58055: IFFALSE 58065
// sDLaser := true ;
58057: LD_ADDR_EXP 83
58061: PUSH
58062: LD_INT 1
58064: ST_TO_ADDR
// if p3 = 30 then
58065: LD_VAR 0 3
58069: PUSH
58070: LD_INT 30
58072: EQUAL
58073: IFFALSE 58083
// sExchange := true ;
58075: LD_ADDR_EXP 84
58079: PUSH
58080: LD_INT 1
58082: ST_TO_ADDR
// if p3 = 31 then
58083: LD_VAR 0 3
58087: PUSH
58088: LD_INT 31
58090: EQUAL
58091: IFFALSE 58101
// sFac := true ;
58093: LD_ADDR_EXP 85
58097: PUSH
58098: LD_INT 1
58100: ST_TO_ADDR
// if p3 = 32 then
58101: LD_VAR 0 3
58105: PUSH
58106: LD_INT 32
58108: EQUAL
58109: IFFALSE 58119
// sPower := true ;
58111: LD_ADDR_EXP 86
58115: PUSH
58116: LD_INT 1
58118: ST_TO_ADDR
// if p3 = 33 then
58119: LD_VAR 0 3
58123: PUSH
58124: LD_INT 33
58126: EQUAL
58127: IFFALSE 58137
// sRandom := true ;
58129: LD_ADDR_EXP 87
58133: PUSH
58134: LD_INT 1
58136: ST_TO_ADDR
// if p3 = 34 then
58137: LD_VAR 0 3
58141: PUSH
58142: LD_INT 34
58144: EQUAL
58145: IFFALSE 58155
// sShield := true ;
58147: LD_ADDR_EXP 88
58151: PUSH
58152: LD_INT 1
58154: ST_TO_ADDR
// if p3 = 35 then
58155: LD_VAR 0 3
58159: PUSH
58160: LD_INT 35
58162: EQUAL
58163: IFFALSE 58173
// sTime := true ;
58165: LD_ADDR_EXP 89
58169: PUSH
58170: LD_INT 1
58172: ST_TO_ADDR
// if p3 = 36 then
58173: LD_VAR 0 3
58177: PUSH
58178: LD_INT 36
58180: EQUAL
58181: IFFALSE 58191
// sTools := true ;
58183: LD_ADDR_EXP 90
58187: PUSH
58188: LD_INT 1
58190: ST_TO_ADDR
// if p3 = 101 then
58191: LD_VAR 0 3
58195: PUSH
58196: LD_INT 101
58198: EQUAL
58199: IFFALSE 58209
// sSold := true ;
58201: LD_ADDR_EXP 55
58205: PUSH
58206: LD_INT 1
58208: ST_TO_ADDR
// if p3 = 102 then
58209: LD_VAR 0 3
58213: PUSH
58214: LD_INT 102
58216: EQUAL
58217: IFFALSE 58227
// sDiff := true ;
58219: LD_ADDR_EXP 56
58223: PUSH
58224: LD_INT 1
58226: ST_TO_ADDR
// if p3 = 103 then
58227: LD_VAR 0 3
58231: PUSH
58232: LD_INT 103
58234: EQUAL
58235: IFFALSE 58245
// sFog := true ;
58237: LD_ADDR_EXP 59
58241: PUSH
58242: LD_INT 1
58244: ST_TO_ADDR
// if p3 = 104 then
58245: LD_VAR 0 3
58249: PUSH
58250: LD_INT 104
58252: EQUAL
58253: IFFALSE 58263
// sReset := true ;
58255: LD_ADDR_EXP 60
58259: PUSH
58260: LD_INT 1
58262: ST_TO_ADDR
// if p3 = 105 then
58263: LD_VAR 0 3
58267: PUSH
58268: LD_INT 105
58270: EQUAL
58271: IFFALSE 58281
// sSun := true ;
58273: LD_ADDR_EXP 61
58277: PUSH
58278: LD_INT 1
58280: ST_TO_ADDR
// if p3 = 106 then
58281: LD_VAR 0 3
58285: PUSH
58286: LD_INT 106
58288: EQUAL
58289: IFFALSE 58299
// sTiger := true ;
58291: LD_ADDR_EXP 57
58295: PUSH
58296: LD_INT 1
58298: ST_TO_ADDR
// if p3 = 107 then
58299: LD_VAR 0 3
58303: PUSH
58304: LD_INT 107
58306: EQUAL
58307: IFFALSE 58317
// sBomb := true ;
58309: LD_ADDR_EXP 58
58313: PUSH
58314: LD_INT 1
58316: ST_TO_ADDR
// if p3 = 108 then
58317: LD_VAR 0 3
58321: PUSH
58322: LD_INT 108
58324: EQUAL
58325: IFFALSE 58335
// sWound := true ;
58327: LD_ADDR_EXP 66
58331: PUSH
58332: LD_INT 1
58334: ST_TO_ADDR
// if p3 = 109 then
58335: LD_VAR 0 3
58339: PUSH
58340: LD_INT 109
58342: EQUAL
58343: IFFALSE 58353
// sBetray := true ;
58345: LD_ADDR_EXP 70
58349: PUSH
58350: LD_INT 1
58352: ST_TO_ADDR
// if p3 = 110 then
58353: LD_VAR 0 3
58357: PUSH
58358: LD_INT 110
58360: EQUAL
58361: IFFALSE 58371
// sContamin := true ;
58363: LD_ADDR_EXP 71
58367: PUSH
58368: LD_INT 1
58370: ST_TO_ADDR
// if p3 = 111 then
58371: LD_VAR 0 3
58375: PUSH
58376: LD_INT 111
58378: EQUAL
58379: IFFALSE 58389
// sOil := true ;
58381: LD_ADDR_EXP 73
58385: PUSH
58386: LD_INT 1
58388: ST_TO_ADDR
// if p3 = 112 then
58389: LD_VAR 0 3
58393: PUSH
58394: LD_INT 112
58396: EQUAL
58397: IFFALSE 58407
// sStu := true ;
58399: LD_ADDR_EXP 77
58403: PUSH
58404: LD_INT 1
58406: ST_TO_ADDR
// if p3 = 113 then
58407: LD_VAR 0 3
58411: PUSH
58412: LD_INT 113
58414: EQUAL
58415: IFFALSE 58425
// sBazooka := true ;
58417: LD_ADDR_EXP 80
58421: PUSH
58422: LD_INT 1
58424: ST_TO_ADDR
// if p3 = 114 then
58425: LD_VAR 0 3
58429: PUSH
58430: LD_INT 114
58432: EQUAL
58433: IFFALSE 58443
// sMortar := true ;
58435: LD_ADDR_EXP 81
58439: PUSH
58440: LD_INT 1
58442: ST_TO_ADDR
// if p3 = 115 then
58443: LD_VAR 0 3
58447: PUSH
58448: LD_INT 115
58450: EQUAL
58451: IFFALSE 58461
// sRanger := true ;
58453: LD_ADDR_EXP 91
58457: PUSH
58458: LD_INT 1
58460: ST_TO_ADDR
// if p3 = 116 then
58461: LD_VAR 0 3
58465: PUSH
58466: LD_INT 116
58468: EQUAL
58469: IFFALSE 58479
// sComputer := true ;
58471: LD_ADDR_EXP 92
58475: PUSH
58476: LD_INT 1
58478: ST_TO_ADDR
// if p3 = 117 then
58479: LD_VAR 0 3
58483: PUSH
58484: LD_INT 117
58486: EQUAL
58487: IFFALSE 58497
// s30 := true ;
58489: LD_ADDR_EXP 93
58493: PUSH
58494: LD_INT 1
58496: ST_TO_ADDR
// if p3 = 118 then
58497: LD_VAR 0 3
58501: PUSH
58502: LD_INT 118
58504: EQUAL
58505: IFFALSE 58515
// s60 := true ;
58507: LD_ADDR_EXP 94
58511: PUSH
58512: LD_INT 1
58514: ST_TO_ADDR
// end ; if p2 = hack_mode then
58515: LD_VAR 0 2
58519: PUSH
58520: LD_INT 101
58522: EQUAL
58523: IFFALSE 58651
// begin case p3 of 1 :
58525: LD_VAR 0 3
58529: PUSH
58530: LD_INT 1
58532: DOUBLE
58533: EQUAL
58534: IFTRUE 58538
58536: GO 58545
58538: POP
// hHackUnlimitedResources ; 2 :
58539: CALL 70798 0 0
58543: GO 58651
58545: LD_INT 2
58547: DOUBLE
58548: EQUAL
58549: IFTRUE 58553
58551: GO 58560
58553: POP
// hHackSetLevel10 ; 3 :
58554: CALL 70931 0 0
58558: GO 58651
58560: LD_INT 3
58562: DOUBLE
58563: EQUAL
58564: IFTRUE 58568
58566: GO 58575
58568: POP
// hHackSetLevel10YourUnits ; 4 :
58569: CALL 71016 0 0
58573: GO 58651
58575: LD_INT 4
58577: DOUBLE
58578: EQUAL
58579: IFTRUE 58583
58581: GO 58590
58583: POP
// hHackInvincible ; 5 :
58584: CALL 71464 0 0
58588: GO 58651
58590: LD_INT 5
58592: DOUBLE
58593: EQUAL
58594: IFTRUE 58598
58596: GO 58605
58598: POP
// hHackInvisible ; 6 :
58599: CALL 71575 0 0
58603: GO 58651
58605: LD_INT 6
58607: DOUBLE
58608: EQUAL
58609: IFTRUE 58613
58611: GO 58620
58613: POP
// hHackChangeYourSide ; 7 :
58614: CALL 71632 0 0
58618: GO 58651
58620: LD_INT 7
58622: DOUBLE
58623: EQUAL
58624: IFTRUE 58628
58626: GO 58635
58628: POP
// hHackChangeUnitSide ; 8 :
58629: CALL 71674 0 0
58633: GO 58651
58635: LD_INT 8
58637: DOUBLE
58638: EQUAL
58639: IFTRUE 58643
58641: GO 58650
58643: POP
// hHackFog ; end ;
58644: CALL 71775 0 0
58648: GO 58651
58650: POP
// end ; if p2 = game_save_mode then
58651: LD_VAR 0 2
58655: PUSH
58656: LD_INT 102
58658: EQUAL
58659: IFFALSE 58714
// begin if p3 = 1 then
58661: LD_VAR 0 3
58665: PUSH
58666: LD_INT 1
58668: EQUAL
58669: IFFALSE 58681
// globalGameSaveCounter := p4 ;
58671: LD_ADDR_EXP 37
58675: PUSH
58676: LD_VAR 0 4
58680: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
58681: LD_VAR 0 3
58685: PUSH
58686: LD_INT 2
58688: EQUAL
58689: PUSH
58690: LD_EXP 37
58694: AND
58695: IFFALSE 58714
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58697: LD_STRING setGameSaveCounter(
58699: PUSH
58700: LD_EXP 37
58704: STR
58705: PUSH
58706: LD_STRING )
58708: STR
58709: PPUSH
58710: CALL_OW 559
// end ; end ;
58714: LD_VAR 0 7
58718: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
58719: LD_INT 0
58721: PPUSH
// streamModeActive := false ;
58722: LD_ADDR_EXP 38
58726: PUSH
58727: LD_INT 0
58729: ST_TO_ADDR
// normalCounter := 36 ;
58730: LD_ADDR_EXP 39
58734: PUSH
58735: LD_INT 36
58737: ST_TO_ADDR
// hardcoreCounter := 18 ;
58738: LD_ADDR_EXP 40
58742: PUSH
58743: LD_INT 18
58745: ST_TO_ADDR
// sRocket := false ;
58746: LD_ADDR_EXP 43
58750: PUSH
58751: LD_INT 0
58753: ST_TO_ADDR
// sSpeed := false ;
58754: LD_ADDR_EXP 42
58758: PUSH
58759: LD_INT 0
58761: ST_TO_ADDR
// sEngine := false ;
58762: LD_ADDR_EXP 44
58766: PUSH
58767: LD_INT 0
58769: ST_TO_ADDR
// sSpec := false ;
58770: LD_ADDR_EXP 41
58774: PUSH
58775: LD_INT 0
58777: ST_TO_ADDR
// sLevel := false ;
58778: LD_ADDR_EXP 45
58782: PUSH
58783: LD_INT 0
58785: ST_TO_ADDR
// sArmoury := false ;
58786: LD_ADDR_EXP 46
58790: PUSH
58791: LD_INT 0
58793: ST_TO_ADDR
// sRadar := false ;
58794: LD_ADDR_EXP 47
58798: PUSH
58799: LD_INT 0
58801: ST_TO_ADDR
// sBunker := false ;
58802: LD_ADDR_EXP 48
58806: PUSH
58807: LD_INT 0
58809: ST_TO_ADDR
// sHack := false ;
58810: LD_ADDR_EXP 49
58814: PUSH
58815: LD_INT 0
58817: ST_TO_ADDR
// sFire := false ;
58818: LD_ADDR_EXP 50
58822: PUSH
58823: LD_INT 0
58825: ST_TO_ADDR
// sRefresh := false ;
58826: LD_ADDR_EXP 51
58830: PUSH
58831: LD_INT 0
58833: ST_TO_ADDR
// sExp := false ;
58834: LD_ADDR_EXP 52
58838: PUSH
58839: LD_INT 0
58841: ST_TO_ADDR
// sDepot := false ;
58842: LD_ADDR_EXP 53
58846: PUSH
58847: LD_INT 0
58849: ST_TO_ADDR
// sFlag := false ;
58850: LD_ADDR_EXP 54
58854: PUSH
58855: LD_INT 0
58857: ST_TO_ADDR
// sKamikadze := false ;
58858: LD_ADDR_EXP 62
58862: PUSH
58863: LD_INT 0
58865: ST_TO_ADDR
// sTroll := false ;
58866: LD_ADDR_EXP 63
58870: PUSH
58871: LD_INT 0
58873: ST_TO_ADDR
// sSlow := false ;
58874: LD_ADDR_EXP 64
58878: PUSH
58879: LD_INT 0
58881: ST_TO_ADDR
// sLack := false ;
58882: LD_ADDR_EXP 65
58886: PUSH
58887: LD_INT 0
58889: ST_TO_ADDR
// sTank := false ;
58890: LD_ADDR_EXP 67
58894: PUSH
58895: LD_INT 0
58897: ST_TO_ADDR
// sRemote := false ;
58898: LD_ADDR_EXP 68
58902: PUSH
58903: LD_INT 0
58905: ST_TO_ADDR
// sPowell := false ;
58906: LD_ADDR_EXP 69
58910: PUSH
58911: LD_INT 0
58913: ST_TO_ADDR
// sTeleport := false ;
58914: LD_ADDR_EXP 72
58918: PUSH
58919: LD_INT 0
58921: ST_TO_ADDR
// sOilTower := false ;
58922: LD_ADDR_EXP 74
58926: PUSH
58927: LD_INT 0
58929: ST_TO_ADDR
// sShovel := false ;
58930: LD_ADDR_EXP 75
58934: PUSH
58935: LD_INT 0
58937: ST_TO_ADDR
// sSheik := false ;
58938: LD_ADDR_EXP 76
58942: PUSH
58943: LD_INT 0
58945: ST_TO_ADDR
// sEarthquake := false ;
58946: LD_ADDR_EXP 78
58950: PUSH
58951: LD_INT 0
58953: ST_TO_ADDR
// sAI := false ;
58954: LD_ADDR_EXP 79
58958: PUSH
58959: LD_INT 0
58961: ST_TO_ADDR
// sCargo := false ;
58962: LD_ADDR_EXP 82
58966: PUSH
58967: LD_INT 0
58969: ST_TO_ADDR
// sDLaser := false ;
58970: LD_ADDR_EXP 83
58974: PUSH
58975: LD_INT 0
58977: ST_TO_ADDR
// sExchange := false ;
58978: LD_ADDR_EXP 84
58982: PUSH
58983: LD_INT 0
58985: ST_TO_ADDR
// sFac := false ;
58986: LD_ADDR_EXP 85
58990: PUSH
58991: LD_INT 0
58993: ST_TO_ADDR
// sPower := false ;
58994: LD_ADDR_EXP 86
58998: PUSH
58999: LD_INT 0
59001: ST_TO_ADDR
// sRandom := false ;
59002: LD_ADDR_EXP 87
59006: PUSH
59007: LD_INT 0
59009: ST_TO_ADDR
// sShield := false ;
59010: LD_ADDR_EXP 88
59014: PUSH
59015: LD_INT 0
59017: ST_TO_ADDR
// sTime := false ;
59018: LD_ADDR_EXP 89
59022: PUSH
59023: LD_INT 0
59025: ST_TO_ADDR
// sTools := false ;
59026: LD_ADDR_EXP 90
59030: PUSH
59031: LD_INT 0
59033: ST_TO_ADDR
// sSold := false ;
59034: LD_ADDR_EXP 55
59038: PUSH
59039: LD_INT 0
59041: ST_TO_ADDR
// sDiff := false ;
59042: LD_ADDR_EXP 56
59046: PUSH
59047: LD_INT 0
59049: ST_TO_ADDR
// sFog := false ;
59050: LD_ADDR_EXP 59
59054: PUSH
59055: LD_INT 0
59057: ST_TO_ADDR
// sReset := false ;
59058: LD_ADDR_EXP 60
59062: PUSH
59063: LD_INT 0
59065: ST_TO_ADDR
// sSun := false ;
59066: LD_ADDR_EXP 61
59070: PUSH
59071: LD_INT 0
59073: ST_TO_ADDR
// sTiger := false ;
59074: LD_ADDR_EXP 57
59078: PUSH
59079: LD_INT 0
59081: ST_TO_ADDR
// sBomb := false ;
59082: LD_ADDR_EXP 58
59086: PUSH
59087: LD_INT 0
59089: ST_TO_ADDR
// sWound := false ;
59090: LD_ADDR_EXP 66
59094: PUSH
59095: LD_INT 0
59097: ST_TO_ADDR
// sBetray := false ;
59098: LD_ADDR_EXP 70
59102: PUSH
59103: LD_INT 0
59105: ST_TO_ADDR
// sContamin := false ;
59106: LD_ADDR_EXP 71
59110: PUSH
59111: LD_INT 0
59113: ST_TO_ADDR
// sOil := false ;
59114: LD_ADDR_EXP 73
59118: PUSH
59119: LD_INT 0
59121: ST_TO_ADDR
// sStu := false ;
59122: LD_ADDR_EXP 77
59126: PUSH
59127: LD_INT 0
59129: ST_TO_ADDR
// sBazooka := false ;
59130: LD_ADDR_EXP 80
59134: PUSH
59135: LD_INT 0
59137: ST_TO_ADDR
// sMortar := false ;
59138: LD_ADDR_EXP 81
59142: PUSH
59143: LD_INT 0
59145: ST_TO_ADDR
// sRanger := false ;
59146: LD_ADDR_EXP 91
59150: PUSH
59151: LD_INT 0
59153: ST_TO_ADDR
// sComputer := false ;
59154: LD_ADDR_EXP 92
59158: PUSH
59159: LD_INT 0
59161: ST_TO_ADDR
// s30 := false ;
59162: LD_ADDR_EXP 93
59166: PUSH
59167: LD_INT 0
59169: ST_TO_ADDR
// s60 := false ;
59170: LD_ADDR_EXP 94
59174: PUSH
59175: LD_INT 0
59177: ST_TO_ADDR
// end ;
59178: LD_VAR 0 1
59182: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59183: LD_INT 0
59185: PPUSH
59186: PPUSH
59187: PPUSH
59188: PPUSH
59189: PPUSH
59190: PPUSH
59191: PPUSH
// result := [ ] ;
59192: LD_ADDR_VAR 0 2
59196: PUSH
59197: EMPTY
59198: ST_TO_ADDR
// if campaign_id = 1 then
59199: LD_OWVAR 69
59203: PUSH
59204: LD_INT 1
59206: EQUAL
59207: IFFALSE 62373
// begin case mission_number of 1 :
59209: LD_OWVAR 70
59213: PUSH
59214: LD_INT 1
59216: DOUBLE
59217: EQUAL
59218: IFTRUE 59222
59220: GO 59298
59222: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59223: LD_ADDR_VAR 0 2
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 4
59233: PUSH
59234: LD_INT 11
59236: PUSH
59237: LD_INT 12
59239: PUSH
59240: LD_INT 15
59242: PUSH
59243: LD_INT 16
59245: PUSH
59246: LD_INT 22
59248: PUSH
59249: LD_INT 23
59251: PUSH
59252: LD_INT 26
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 101
59268: PUSH
59269: LD_INT 102
59271: PUSH
59272: LD_INT 106
59274: PUSH
59275: LD_INT 116
59277: PUSH
59278: LD_INT 117
59280: PUSH
59281: LD_INT 118
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: ST_TO_ADDR
59296: GO 62371
59298: LD_INT 2
59300: DOUBLE
59301: EQUAL
59302: IFTRUE 59306
59304: GO 59390
59306: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59307: LD_ADDR_VAR 0 2
59311: PUSH
59312: LD_INT 2
59314: PUSH
59315: LD_INT 4
59317: PUSH
59318: LD_INT 11
59320: PUSH
59321: LD_INT 12
59323: PUSH
59324: LD_INT 15
59326: PUSH
59327: LD_INT 16
59329: PUSH
59330: LD_INT 22
59332: PUSH
59333: LD_INT 23
59335: PUSH
59336: LD_INT 26
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 101
59352: PUSH
59353: LD_INT 102
59355: PUSH
59356: LD_INT 105
59358: PUSH
59359: LD_INT 106
59361: PUSH
59362: LD_INT 108
59364: PUSH
59365: LD_INT 116
59367: PUSH
59368: LD_INT 117
59370: PUSH
59371: LD_INT 118
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: ST_TO_ADDR
59388: GO 62371
59390: LD_INT 3
59392: DOUBLE
59393: EQUAL
59394: IFTRUE 59398
59396: GO 59486
59398: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
59399: LD_ADDR_VAR 0 2
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: LD_INT 4
59409: PUSH
59410: LD_INT 5
59412: PUSH
59413: LD_INT 11
59415: PUSH
59416: LD_INT 12
59418: PUSH
59419: LD_INT 15
59421: PUSH
59422: LD_INT 16
59424: PUSH
59425: LD_INT 22
59427: PUSH
59428: LD_INT 26
59430: PUSH
59431: LD_INT 36
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 101
59448: PUSH
59449: LD_INT 102
59451: PUSH
59452: LD_INT 105
59454: PUSH
59455: LD_INT 106
59457: PUSH
59458: LD_INT 108
59460: PUSH
59461: LD_INT 116
59463: PUSH
59464: LD_INT 117
59466: PUSH
59467: LD_INT 118
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: ST_TO_ADDR
59484: GO 62371
59486: LD_INT 4
59488: DOUBLE
59489: EQUAL
59490: IFTRUE 59494
59492: GO 59590
59494: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
59495: LD_ADDR_VAR 0 2
59499: PUSH
59500: LD_INT 2
59502: PUSH
59503: LD_INT 4
59505: PUSH
59506: LD_INT 5
59508: PUSH
59509: LD_INT 8
59511: PUSH
59512: LD_INT 11
59514: PUSH
59515: LD_INT 12
59517: PUSH
59518: LD_INT 15
59520: PUSH
59521: LD_INT 16
59523: PUSH
59524: LD_INT 22
59526: PUSH
59527: LD_INT 23
59529: PUSH
59530: LD_INT 26
59532: PUSH
59533: LD_INT 36
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 101
59552: PUSH
59553: LD_INT 102
59555: PUSH
59556: LD_INT 105
59558: PUSH
59559: LD_INT 106
59561: PUSH
59562: LD_INT 108
59564: PUSH
59565: LD_INT 116
59567: PUSH
59568: LD_INT 117
59570: PUSH
59571: LD_INT 118
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: ST_TO_ADDR
59588: GO 62371
59590: LD_INT 5
59592: DOUBLE
59593: EQUAL
59594: IFTRUE 59598
59596: GO 59710
59598: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
59599: LD_ADDR_VAR 0 2
59603: PUSH
59604: LD_INT 2
59606: PUSH
59607: LD_INT 4
59609: PUSH
59610: LD_INT 5
59612: PUSH
59613: LD_INT 6
59615: PUSH
59616: LD_INT 8
59618: PUSH
59619: LD_INT 11
59621: PUSH
59622: LD_INT 12
59624: PUSH
59625: LD_INT 15
59627: PUSH
59628: LD_INT 16
59630: PUSH
59631: LD_INT 22
59633: PUSH
59634: LD_INT 23
59636: PUSH
59637: LD_INT 25
59639: PUSH
59640: LD_INT 26
59642: PUSH
59643: LD_INT 36
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 101
59664: PUSH
59665: LD_INT 102
59667: PUSH
59668: LD_INT 105
59670: PUSH
59671: LD_INT 106
59673: PUSH
59674: LD_INT 108
59676: PUSH
59677: LD_INT 109
59679: PUSH
59680: LD_INT 112
59682: PUSH
59683: LD_INT 116
59685: PUSH
59686: LD_INT 117
59688: PUSH
59689: LD_INT 118
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: ST_TO_ADDR
59708: GO 62371
59710: LD_INT 6
59712: DOUBLE
59713: EQUAL
59714: IFTRUE 59718
59716: GO 59850
59718: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
59719: LD_ADDR_VAR 0 2
59723: PUSH
59724: LD_INT 2
59726: PUSH
59727: LD_INT 4
59729: PUSH
59730: LD_INT 5
59732: PUSH
59733: LD_INT 6
59735: PUSH
59736: LD_INT 8
59738: PUSH
59739: LD_INT 11
59741: PUSH
59742: LD_INT 12
59744: PUSH
59745: LD_INT 15
59747: PUSH
59748: LD_INT 16
59750: PUSH
59751: LD_INT 20
59753: PUSH
59754: LD_INT 21
59756: PUSH
59757: LD_INT 22
59759: PUSH
59760: LD_INT 23
59762: PUSH
59763: LD_INT 25
59765: PUSH
59766: LD_INT 26
59768: PUSH
59769: LD_INT 30
59771: PUSH
59772: LD_INT 31
59774: PUSH
59775: LD_INT 32
59777: PUSH
59778: LD_INT 36
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 101
59804: PUSH
59805: LD_INT 102
59807: PUSH
59808: LD_INT 105
59810: PUSH
59811: LD_INT 106
59813: PUSH
59814: LD_INT 108
59816: PUSH
59817: LD_INT 109
59819: PUSH
59820: LD_INT 112
59822: PUSH
59823: LD_INT 116
59825: PUSH
59826: LD_INT 117
59828: PUSH
59829: LD_INT 118
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: ST_TO_ADDR
59848: GO 62371
59850: LD_INT 7
59852: DOUBLE
59853: EQUAL
59854: IFTRUE 59858
59856: GO 59970
59858: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
59859: LD_ADDR_VAR 0 2
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: LD_INT 4
59869: PUSH
59870: LD_INT 5
59872: PUSH
59873: LD_INT 7
59875: PUSH
59876: LD_INT 11
59878: PUSH
59879: LD_INT 12
59881: PUSH
59882: LD_INT 15
59884: PUSH
59885: LD_INT 16
59887: PUSH
59888: LD_INT 20
59890: PUSH
59891: LD_INT 21
59893: PUSH
59894: LD_INT 22
59896: PUSH
59897: LD_INT 23
59899: PUSH
59900: LD_INT 25
59902: PUSH
59903: LD_INT 26
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 101
59924: PUSH
59925: LD_INT 102
59927: PUSH
59928: LD_INT 103
59930: PUSH
59931: LD_INT 105
59933: PUSH
59934: LD_INT 106
59936: PUSH
59937: LD_INT 108
59939: PUSH
59940: LD_INT 112
59942: PUSH
59943: LD_INT 116
59945: PUSH
59946: LD_INT 117
59948: PUSH
59949: LD_INT 118
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: ST_TO_ADDR
59968: GO 62371
59970: LD_INT 8
59972: DOUBLE
59973: EQUAL
59974: IFTRUE 59978
59976: GO 60118
59978: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
59979: LD_ADDR_VAR 0 2
59983: PUSH
59984: LD_INT 2
59986: PUSH
59987: LD_INT 4
59989: PUSH
59990: LD_INT 5
59992: PUSH
59993: LD_INT 6
59995: PUSH
59996: LD_INT 7
59998: PUSH
59999: LD_INT 8
60001: PUSH
60002: LD_INT 11
60004: PUSH
60005: LD_INT 12
60007: PUSH
60008: LD_INT 15
60010: PUSH
60011: LD_INT 16
60013: PUSH
60014: LD_INT 20
60016: PUSH
60017: LD_INT 21
60019: PUSH
60020: LD_INT 22
60022: PUSH
60023: LD_INT 23
60025: PUSH
60026: LD_INT 25
60028: PUSH
60029: LD_INT 26
60031: PUSH
60032: LD_INT 30
60034: PUSH
60035: LD_INT 31
60037: PUSH
60038: LD_INT 32
60040: PUSH
60041: LD_INT 36
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 101
60068: PUSH
60069: LD_INT 102
60071: PUSH
60072: LD_INT 103
60074: PUSH
60075: LD_INT 105
60077: PUSH
60078: LD_INT 106
60080: PUSH
60081: LD_INT 108
60083: PUSH
60084: LD_INT 109
60086: PUSH
60087: LD_INT 112
60089: PUSH
60090: LD_INT 116
60092: PUSH
60093: LD_INT 117
60095: PUSH
60096: LD_INT 118
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: ST_TO_ADDR
60116: GO 62371
60118: LD_INT 9
60120: DOUBLE
60121: EQUAL
60122: IFTRUE 60126
60124: GO 60274
60126: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60127: LD_ADDR_VAR 0 2
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 4
60137: PUSH
60138: LD_INT 5
60140: PUSH
60141: LD_INT 6
60143: PUSH
60144: LD_INT 7
60146: PUSH
60147: LD_INT 8
60149: PUSH
60150: LD_INT 11
60152: PUSH
60153: LD_INT 12
60155: PUSH
60156: LD_INT 15
60158: PUSH
60159: LD_INT 16
60161: PUSH
60162: LD_INT 20
60164: PUSH
60165: LD_INT 21
60167: PUSH
60168: LD_INT 22
60170: PUSH
60171: LD_INT 23
60173: PUSH
60174: LD_INT 25
60176: PUSH
60177: LD_INT 26
60179: PUSH
60180: LD_INT 28
60182: PUSH
60183: LD_INT 30
60185: PUSH
60186: LD_INT 31
60188: PUSH
60189: LD_INT 32
60191: PUSH
60192: LD_INT 36
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 101
60220: PUSH
60221: LD_INT 102
60223: PUSH
60224: LD_INT 103
60226: PUSH
60227: LD_INT 105
60229: PUSH
60230: LD_INT 106
60232: PUSH
60233: LD_INT 108
60235: PUSH
60236: LD_INT 109
60238: PUSH
60239: LD_INT 112
60241: PUSH
60242: LD_INT 114
60244: PUSH
60245: LD_INT 116
60247: PUSH
60248: LD_INT 117
60250: PUSH
60251: LD_INT 118
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: ST_TO_ADDR
60272: GO 62371
60274: LD_INT 10
60276: DOUBLE
60277: EQUAL
60278: IFTRUE 60282
60280: GO 60478
60282: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60283: LD_ADDR_VAR 0 2
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: LD_INT 4
60293: PUSH
60294: LD_INT 5
60296: PUSH
60297: LD_INT 6
60299: PUSH
60300: LD_INT 7
60302: PUSH
60303: LD_INT 8
60305: PUSH
60306: LD_INT 9
60308: PUSH
60309: LD_INT 10
60311: PUSH
60312: LD_INT 11
60314: PUSH
60315: LD_INT 12
60317: PUSH
60318: LD_INT 13
60320: PUSH
60321: LD_INT 14
60323: PUSH
60324: LD_INT 15
60326: PUSH
60327: LD_INT 16
60329: PUSH
60330: LD_INT 17
60332: PUSH
60333: LD_INT 18
60335: PUSH
60336: LD_INT 19
60338: PUSH
60339: LD_INT 20
60341: PUSH
60342: LD_INT 21
60344: PUSH
60345: LD_INT 22
60347: PUSH
60348: LD_INT 23
60350: PUSH
60351: LD_INT 24
60353: PUSH
60354: LD_INT 25
60356: PUSH
60357: LD_INT 26
60359: PUSH
60360: LD_INT 28
60362: PUSH
60363: LD_INT 30
60365: PUSH
60366: LD_INT 31
60368: PUSH
60369: LD_INT 32
60371: PUSH
60372: LD_INT 36
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 101
60408: PUSH
60409: LD_INT 102
60411: PUSH
60412: LD_INT 103
60414: PUSH
60415: LD_INT 104
60417: PUSH
60418: LD_INT 105
60420: PUSH
60421: LD_INT 106
60423: PUSH
60424: LD_INT 107
60426: PUSH
60427: LD_INT 108
60429: PUSH
60430: LD_INT 109
60432: PUSH
60433: LD_INT 110
60435: PUSH
60436: LD_INT 111
60438: PUSH
60439: LD_INT 112
60441: PUSH
60442: LD_INT 114
60444: PUSH
60445: LD_INT 116
60447: PUSH
60448: LD_INT 117
60450: PUSH
60451: LD_INT 118
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: ST_TO_ADDR
60476: GO 62371
60478: LD_INT 11
60480: DOUBLE
60481: EQUAL
60482: IFTRUE 60486
60484: GO 60690
60486: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
60487: LD_ADDR_VAR 0 2
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: LD_INT 3
60497: PUSH
60498: LD_INT 4
60500: PUSH
60501: LD_INT 5
60503: PUSH
60504: LD_INT 6
60506: PUSH
60507: LD_INT 7
60509: PUSH
60510: LD_INT 8
60512: PUSH
60513: LD_INT 9
60515: PUSH
60516: LD_INT 10
60518: PUSH
60519: LD_INT 11
60521: PUSH
60522: LD_INT 12
60524: PUSH
60525: LD_INT 13
60527: PUSH
60528: LD_INT 14
60530: PUSH
60531: LD_INT 15
60533: PUSH
60534: LD_INT 16
60536: PUSH
60537: LD_INT 17
60539: PUSH
60540: LD_INT 18
60542: PUSH
60543: LD_INT 19
60545: PUSH
60546: LD_INT 20
60548: PUSH
60549: LD_INT 21
60551: PUSH
60552: LD_INT 22
60554: PUSH
60555: LD_INT 23
60557: PUSH
60558: LD_INT 24
60560: PUSH
60561: LD_INT 25
60563: PUSH
60564: LD_INT 26
60566: PUSH
60567: LD_INT 28
60569: PUSH
60570: LD_INT 30
60572: PUSH
60573: LD_INT 31
60575: PUSH
60576: LD_INT 32
60578: PUSH
60579: LD_INT 34
60581: PUSH
60582: LD_INT 36
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 101
60620: PUSH
60621: LD_INT 102
60623: PUSH
60624: LD_INT 103
60626: PUSH
60627: LD_INT 104
60629: PUSH
60630: LD_INT 105
60632: PUSH
60633: LD_INT 106
60635: PUSH
60636: LD_INT 107
60638: PUSH
60639: LD_INT 108
60641: PUSH
60642: LD_INT 109
60644: PUSH
60645: LD_INT 110
60647: PUSH
60648: LD_INT 111
60650: PUSH
60651: LD_INT 112
60653: PUSH
60654: LD_INT 114
60656: PUSH
60657: LD_INT 116
60659: PUSH
60660: LD_INT 117
60662: PUSH
60663: LD_INT 118
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: ST_TO_ADDR
60688: GO 62371
60690: LD_INT 12
60692: DOUBLE
60693: EQUAL
60694: IFTRUE 60698
60696: GO 60918
60698: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
60699: LD_ADDR_VAR 0 2
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: LD_INT 4
60715: PUSH
60716: LD_INT 5
60718: PUSH
60719: LD_INT 6
60721: PUSH
60722: LD_INT 7
60724: PUSH
60725: LD_INT 8
60727: PUSH
60728: LD_INT 9
60730: PUSH
60731: LD_INT 10
60733: PUSH
60734: LD_INT 11
60736: PUSH
60737: LD_INT 12
60739: PUSH
60740: LD_INT 13
60742: PUSH
60743: LD_INT 14
60745: PUSH
60746: LD_INT 15
60748: PUSH
60749: LD_INT 16
60751: PUSH
60752: LD_INT 17
60754: PUSH
60755: LD_INT 18
60757: PUSH
60758: LD_INT 19
60760: PUSH
60761: LD_INT 20
60763: PUSH
60764: LD_INT 21
60766: PUSH
60767: LD_INT 22
60769: PUSH
60770: LD_INT 23
60772: PUSH
60773: LD_INT 24
60775: PUSH
60776: LD_INT 25
60778: PUSH
60779: LD_INT 26
60781: PUSH
60782: LD_INT 27
60784: PUSH
60785: LD_INT 28
60787: PUSH
60788: LD_INT 30
60790: PUSH
60791: LD_INT 31
60793: PUSH
60794: LD_INT 32
60796: PUSH
60797: LD_INT 33
60799: PUSH
60800: LD_INT 34
60802: PUSH
60803: LD_INT 36
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 101
60844: PUSH
60845: LD_INT 102
60847: PUSH
60848: LD_INT 103
60850: PUSH
60851: LD_INT 104
60853: PUSH
60854: LD_INT 105
60856: PUSH
60857: LD_INT 106
60859: PUSH
60860: LD_INT 107
60862: PUSH
60863: LD_INT 108
60865: PUSH
60866: LD_INT 109
60868: PUSH
60869: LD_INT 110
60871: PUSH
60872: LD_INT 111
60874: PUSH
60875: LD_INT 112
60877: PUSH
60878: LD_INT 113
60880: PUSH
60881: LD_INT 114
60883: PUSH
60884: LD_INT 116
60886: PUSH
60887: LD_INT 117
60889: PUSH
60890: LD_INT 118
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: ST_TO_ADDR
60916: GO 62371
60918: LD_INT 13
60920: DOUBLE
60921: EQUAL
60922: IFTRUE 60926
60924: GO 61134
60926: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
60927: LD_ADDR_VAR 0 2
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: LD_INT 4
60943: PUSH
60944: LD_INT 5
60946: PUSH
60947: LD_INT 8
60949: PUSH
60950: LD_INT 9
60952: PUSH
60953: LD_INT 10
60955: PUSH
60956: LD_INT 11
60958: PUSH
60959: LD_INT 12
60961: PUSH
60962: LD_INT 14
60964: PUSH
60965: LD_INT 15
60967: PUSH
60968: LD_INT 16
60970: PUSH
60971: LD_INT 17
60973: PUSH
60974: LD_INT 18
60976: PUSH
60977: LD_INT 19
60979: PUSH
60980: LD_INT 20
60982: PUSH
60983: LD_INT 21
60985: PUSH
60986: LD_INT 22
60988: PUSH
60989: LD_INT 23
60991: PUSH
60992: LD_INT 24
60994: PUSH
60995: LD_INT 25
60997: PUSH
60998: LD_INT 26
61000: PUSH
61001: LD_INT 27
61003: PUSH
61004: LD_INT 28
61006: PUSH
61007: LD_INT 30
61009: PUSH
61010: LD_INT 31
61012: PUSH
61013: LD_INT 32
61015: PUSH
61016: LD_INT 33
61018: PUSH
61019: LD_INT 34
61021: PUSH
61022: LD_INT 36
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 101
61060: PUSH
61061: LD_INT 102
61063: PUSH
61064: LD_INT 103
61066: PUSH
61067: LD_INT 104
61069: PUSH
61070: LD_INT 105
61072: PUSH
61073: LD_INT 106
61075: PUSH
61076: LD_INT 107
61078: PUSH
61079: LD_INT 108
61081: PUSH
61082: LD_INT 109
61084: PUSH
61085: LD_INT 110
61087: PUSH
61088: LD_INT 111
61090: PUSH
61091: LD_INT 112
61093: PUSH
61094: LD_INT 113
61096: PUSH
61097: LD_INT 114
61099: PUSH
61100: LD_INT 116
61102: PUSH
61103: LD_INT 117
61105: PUSH
61106: LD_INT 118
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: ST_TO_ADDR
61132: GO 62371
61134: LD_INT 14
61136: DOUBLE
61137: EQUAL
61138: IFTRUE 61142
61140: GO 61366
61142: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61143: LD_ADDR_VAR 0 2
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: LD_INT 2
61153: PUSH
61154: LD_INT 3
61156: PUSH
61157: LD_INT 4
61159: PUSH
61160: LD_INT 5
61162: PUSH
61163: LD_INT 6
61165: PUSH
61166: LD_INT 7
61168: PUSH
61169: LD_INT 8
61171: PUSH
61172: LD_INT 9
61174: PUSH
61175: LD_INT 10
61177: PUSH
61178: LD_INT 11
61180: PUSH
61181: LD_INT 12
61183: PUSH
61184: LD_INT 13
61186: PUSH
61187: LD_INT 14
61189: PUSH
61190: LD_INT 15
61192: PUSH
61193: LD_INT 16
61195: PUSH
61196: LD_INT 17
61198: PUSH
61199: LD_INT 18
61201: PUSH
61202: LD_INT 19
61204: PUSH
61205: LD_INT 20
61207: PUSH
61208: LD_INT 21
61210: PUSH
61211: LD_INT 22
61213: PUSH
61214: LD_INT 23
61216: PUSH
61217: LD_INT 24
61219: PUSH
61220: LD_INT 25
61222: PUSH
61223: LD_INT 26
61225: PUSH
61226: LD_INT 27
61228: PUSH
61229: LD_INT 28
61231: PUSH
61232: LD_INT 29
61234: PUSH
61235: LD_INT 30
61237: PUSH
61238: LD_INT 31
61240: PUSH
61241: LD_INT 32
61243: PUSH
61244: LD_INT 33
61246: PUSH
61247: LD_INT 34
61249: PUSH
61250: LD_INT 36
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 101
61292: PUSH
61293: LD_INT 102
61295: PUSH
61296: LD_INT 103
61298: PUSH
61299: LD_INT 104
61301: PUSH
61302: LD_INT 105
61304: PUSH
61305: LD_INT 106
61307: PUSH
61308: LD_INT 107
61310: PUSH
61311: LD_INT 108
61313: PUSH
61314: LD_INT 109
61316: PUSH
61317: LD_INT 110
61319: PUSH
61320: LD_INT 111
61322: PUSH
61323: LD_INT 112
61325: PUSH
61326: LD_INT 113
61328: PUSH
61329: LD_INT 114
61331: PUSH
61332: LD_INT 116
61334: PUSH
61335: LD_INT 117
61337: PUSH
61338: LD_INT 118
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: ST_TO_ADDR
61364: GO 62371
61366: LD_INT 15
61368: DOUBLE
61369: EQUAL
61370: IFTRUE 61374
61372: GO 61598
61374: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
61375: LD_ADDR_VAR 0 2
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: LD_INT 3
61388: PUSH
61389: LD_INT 4
61391: PUSH
61392: LD_INT 5
61394: PUSH
61395: LD_INT 6
61397: PUSH
61398: LD_INT 7
61400: PUSH
61401: LD_INT 8
61403: PUSH
61404: LD_INT 9
61406: PUSH
61407: LD_INT 10
61409: PUSH
61410: LD_INT 11
61412: PUSH
61413: LD_INT 12
61415: PUSH
61416: LD_INT 13
61418: PUSH
61419: LD_INT 14
61421: PUSH
61422: LD_INT 15
61424: PUSH
61425: LD_INT 16
61427: PUSH
61428: LD_INT 17
61430: PUSH
61431: LD_INT 18
61433: PUSH
61434: LD_INT 19
61436: PUSH
61437: LD_INT 20
61439: PUSH
61440: LD_INT 21
61442: PUSH
61443: LD_INT 22
61445: PUSH
61446: LD_INT 23
61448: PUSH
61449: LD_INT 24
61451: PUSH
61452: LD_INT 25
61454: PUSH
61455: LD_INT 26
61457: PUSH
61458: LD_INT 27
61460: PUSH
61461: LD_INT 28
61463: PUSH
61464: LD_INT 29
61466: PUSH
61467: LD_INT 30
61469: PUSH
61470: LD_INT 31
61472: PUSH
61473: LD_INT 32
61475: PUSH
61476: LD_INT 33
61478: PUSH
61479: LD_INT 34
61481: PUSH
61482: LD_INT 36
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 101
61524: PUSH
61525: LD_INT 102
61527: PUSH
61528: LD_INT 103
61530: PUSH
61531: LD_INT 104
61533: PUSH
61534: LD_INT 105
61536: PUSH
61537: LD_INT 106
61539: PUSH
61540: LD_INT 107
61542: PUSH
61543: LD_INT 108
61545: PUSH
61546: LD_INT 109
61548: PUSH
61549: LD_INT 110
61551: PUSH
61552: LD_INT 111
61554: PUSH
61555: LD_INT 112
61557: PUSH
61558: LD_INT 113
61560: PUSH
61561: LD_INT 114
61563: PUSH
61564: LD_INT 116
61566: PUSH
61567: LD_INT 117
61569: PUSH
61570: LD_INT 118
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: ST_TO_ADDR
61596: GO 62371
61598: LD_INT 16
61600: DOUBLE
61601: EQUAL
61602: IFTRUE 61606
61604: GO 61742
61606: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
61607: LD_ADDR_VAR 0 2
61611: PUSH
61612: LD_INT 2
61614: PUSH
61615: LD_INT 4
61617: PUSH
61618: LD_INT 5
61620: PUSH
61621: LD_INT 7
61623: PUSH
61624: LD_INT 11
61626: PUSH
61627: LD_INT 12
61629: PUSH
61630: LD_INT 15
61632: PUSH
61633: LD_INT 16
61635: PUSH
61636: LD_INT 20
61638: PUSH
61639: LD_INT 21
61641: PUSH
61642: LD_INT 22
61644: PUSH
61645: LD_INT 23
61647: PUSH
61648: LD_INT 25
61650: PUSH
61651: LD_INT 26
61653: PUSH
61654: LD_INT 30
61656: PUSH
61657: LD_INT 31
61659: PUSH
61660: LD_INT 32
61662: PUSH
61663: LD_INT 33
61665: PUSH
61666: LD_INT 34
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 101
61692: PUSH
61693: LD_INT 102
61695: PUSH
61696: LD_INT 103
61698: PUSH
61699: LD_INT 106
61701: PUSH
61702: LD_INT 108
61704: PUSH
61705: LD_INT 112
61707: PUSH
61708: LD_INT 113
61710: PUSH
61711: LD_INT 114
61713: PUSH
61714: LD_INT 116
61716: PUSH
61717: LD_INT 117
61719: PUSH
61720: LD_INT 118
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: ST_TO_ADDR
61740: GO 62371
61742: LD_INT 17
61744: DOUBLE
61745: EQUAL
61746: IFTRUE 61750
61748: GO 61974
61750: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
61751: LD_ADDR_VAR 0 2
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: LD_INT 3
61764: PUSH
61765: LD_INT 4
61767: PUSH
61768: LD_INT 5
61770: PUSH
61771: LD_INT 6
61773: PUSH
61774: LD_INT 7
61776: PUSH
61777: LD_INT 8
61779: PUSH
61780: LD_INT 9
61782: PUSH
61783: LD_INT 10
61785: PUSH
61786: LD_INT 11
61788: PUSH
61789: LD_INT 12
61791: PUSH
61792: LD_INT 13
61794: PUSH
61795: LD_INT 14
61797: PUSH
61798: LD_INT 15
61800: PUSH
61801: LD_INT 16
61803: PUSH
61804: LD_INT 17
61806: PUSH
61807: LD_INT 18
61809: PUSH
61810: LD_INT 19
61812: PUSH
61813: LD_INT 20
61815: PUSH
61816: LD_INT 21
61818: PUSH
61819: LD_INT 22
61821: PUSH
61822: LD_INT 23
61824: PUSH
61825: LD_INT 24
61827: PUSH
61828: LD_INT 25
61830: PUSH
61831: LD_INT 26
61833: PUSH
61834: LD_INT 27
61836: PUSH
61837: LD_INT 28
61839: PUSH
61840: LD_INT 29
61842: PUSH
61843: LD_INT 30
61845: PUSH
61846: LD_INT 31
61848: PUSH
61849: LD_INT 32
61851: PUSH
61852: LD_INT 33
61854: PUSH
61855: LD_INT 34
61857: PUSH
61858: LD_INT 36
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 101
61900: PUSH
61901: LD_INT 102
61903: PUSH
61904: LD_INT 103
61906: PUSH
61907: LD_INT 104
61909: PUSH
61910: LD_INT 105
61912: PUSH
61913: LD_INT 106
61915: PUSH
61916: LD_INT 107
61918: PUSH
61919: LD_INT 108
61921: PUSH
61922: LD_INT 109
61924: PUSH
61925: LD_INT 110
61927: PUSH
61928: LD_INT 111
61930: PUSH
61931: LD_INT 112
61933: PUSH
61934: LD_INT 113
61936: PUSH
61937: LD_INT 114
61939: PUSH
61940: LD_INT 116
61942: PUSH
61943: LD_INT 117
61945: PUSH
61946: LD_INT 118
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: ST_TO_ADDR
61972: GO 62371
61974: LD_INT 18
61976: DOUBLE
61977: EQUAL
61978: IFTRUE 61982
61980: GO 62130
61982: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
61983: LD_ADDR_VAR 0 2
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: LD_INT 4
61993: PUSH
61994: LD_INT 5
61996: PUSH
61997: LD_INT 7
61999: PUSH
62000: LD_INT 11
62002: PUSH
62003: LD_INT 12
62005: PUSH
62006: LD_INT 15
62008: PUSH
62009: LD_INT 16
62011: PUSH
62012: LD_INT 20
62014: PUSH
62015: LD_INT 21
62017: PUSH
62018: LD_INT 22
62020: PUSH
62021: LD_INT 23
62023: PUSH
62024: LD_INT 25
62026: PUSH
62027: LD_INT 26
62029: PUSH
62030: LD_INT 30
62032: PUSH
62033: LD_INT 31
62035: PUSH
62036: LD_INT 32
62038: PUSH
62039: LD_INT 33
62041: PUSH
62042: LD_INT 34
62044: PUSH
62045: LD_INT 35
62047: PUSH
62048: LD_INT 36
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 101
62076: PUSH
62077: LD_INT 102
62079: PUSH
62080: LD_INT 103
62082: PUSH
62083: LD_INT 106
62085: PUSH
62086: LD_INT 108
62088: PUSH
62089: LD_INT 112
62091: PUSH
62092: LD_INT 113
62094: PUSH
62095: LD_INT 114
62097: PUSH
62098: LD_INT 115
62100: PUSH
62101: LD_INT 116
62103: PUSH
62104: LD_INT 117
62106: PUSH
62107: LD_INT 118
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: ST_TO_ADDR
62128: GO 62371
62130: LD_INT 19
62132: DOUBLE
62133: EQUAL
62134: IFTRUE 62138
62136: GO 62370
62138: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62139: LD_ADDR_VAR 0 2
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: LD_INT 3
62152: PUSH
62153: LD_INT 4
62155: PUSH
62156: LD_INT 5
62158: PUSH
62159: LD_INT 6
62161: PUSH
62162: LD_INT 7
62164: PUSH
62165: LD_INT 8
62167: PUSH
62168: LD_INT 9
62170: PUSH
62171: LD_INT 10
62173: PUSH
62174: LD_INT 11
62176: PUSH
62177: LD_INT 12
62179: PUSH
62180: LD_INT 13
62182: PUSH
62183: LD_INT 14
62185: PUSH
62186: LD_INT 15
62188: PUSH
62189: LD_INT 16
62191: PUSH
62192: LD_INT 17
62194: PUSH
62195: LD_INT 18
62197: PUSH
62198: LD_INT 19
62200: PUSH
62201: LD_INT 20
62203: PUSH
62204: LD_INT 21
62206: PUSH
62207: LD_INT 22
62209: PUSH
62210: LD_INT 23
62212: PUSH
62213: LD_INT 24
62215: PUSH
62216: LD_INT 25
62218: PUSH
62219: LD_INT 26
62221: PUSH
62222: LD_INT 27
62224: PUSH
62225: LD_INT 28
62227: PUSH
62228: LD_INT 29
62230: PUSH
62231: LD_INT 30
62233: PUSH
62234: LD_INT 31
62236: PUSH
62237: LD_INT 32
62239: PUSH
62240: LD_INT 33
62242: PUSH
62243: LD_INT 34
62245: PUSH
62246: LD_INT 35
62248: PUSH
62249: LD_INT 36
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 101
62292: PUSH
62293: LD_INT 102
62295: PUSH
62296: LD_INT 103
62298: PUSH
62299: LD_INT 104
62301: PUSH
62302: LD_INT 105
62304: PUSH
62305: LD_INT 106
62307: PUSH
62308: LD_INT 107
62310: PUSH
62311: LD_INT 108
62313: PUSH
62314: LD_INT 109
62316: PUSH
62317: LD_INT 110
62319: PUSH
62320: LD_INT 111
62322: PUSH
62323: LD_INT 112
62325: PUSH
62326: LD_INT 113
62328: PUSH
62329: LD_INT 114
62331: PUSH
62332: LD_INT 115
62334: PUSH
62335: LD_INT 116
62337: PUSH
62338: LD_INT 117
62340: PUSH
62341: LD_INT 118
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: ST_TO_ADDR
62368: GO 62371
62370: POP
// end else
62371: GO 62602
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
62373: LD_ADDR_VAR 0 2
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: LD_INT 2
62383: PUSH
62384: LD_INT 3
62386: PUSH
62387: LD_INT 4
62389: PUSH
62390: LD_INT 5
62392: PUSH
62393: LD_INT 6
62395: PUSH
62396: LD_INT 7
62398: PUSH
62399: LD_INT 8
62401: PUSH
62402: LD_INT 9
62404: PUSH
62405: LD_INT 10
62407: PUSH
62408: LD_INT 11
62410: PUSH
62411: LD_INT 12
62413: PUSH
62414: LD_INT 13
62416: PUSH
62417: LD_INT 14
62419: PUSH
62420: LD_INT 15
62422: PUSH
62423: LD_INT 16
62425: PUSH
62426: LD_INT 17
62428: PUSH
62429: LD_INT 18
62431: PUSH
62432: LD_INT 19
62434: PUSH
62435: LD_INT 20
62437: PUSH
62438: LD_INT 21
62440: PUSH
62441: LD_INT 22
62443: PUSH
62444: LD_INT 23
62446: PUSH
62447: LD_INT 24
62449: PUSH
62450: LD_INT 25
62452: PUSH
62453: LD_INT 26
62455: PUSH
62456: LD_INT 27
62458: PUSH
62459: LD_INT 28
62461: PUSH
62462: LD_INT 29
62464: PUSH
62465: LD_INT 30
62467: PUSH
62468: LD_INT 31
62470: PUSH
62471: LD_INT 32
62473: PUSH
62474: LD_INT 33
62476: PUSH
62477: LD_INT 34
62479: PUSH
62480: LD_INT 35
62482: PUSH
62483: LD_INT 36
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 101
62526: PUSH
62527: LD_INT 102
62529: PUSH
62530: LD_INT 103
62532: PUSH
62533: LD_INT 104
62535: PUSH
62536: LD_INT 105
62538: PUSH
62539: LD_INT 106
62541: PUSH
62542: LD_INT 107
62544: PUSH
62545: LD_INT 108
62547: PUSH
62548: LD_INT 109
62550: PUSH
62551: LD_INT 110
62553: PUSH
62554: LD_INT 111
62556: PUSH
62557: LD_INT 112
62559: PUSH
62560: LD_INT 113
62562: PUSH
62563: LD_INT 114
62565: PUSH
62566: LD_INT 115
62568: PUSH
62569: LD_INT 116
62571: PUSH
62572: LD_INT 117
62574: PUSH
62575: LD_INT 118
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: ST_TO_ADDR
// if result then
62602: LD_VAR 0 2
62606: IFFALSE 63392
// begin normal :=  ;
62608: LD_ADDR_VAR 0 5
62612: PUSH
62613: LD_STRING 
62615: ST_TO_ADDR
// hardcore :=  ;
62616: LD_ADDR_VAR 0 6
62620: PUSH
62621: LD_STRING 
62623: ST_TO_ADDR
// active :=  ;
62624: LD_ADDR_VAR 0 7
62628: PUSH
62629: LD_STRING 
62631: ST_TO_ADDR
// for i = 1 to normalCounter do
62632: LD_ADDR_VAR 0 8
62636: PUSH
62637: DOUBLE
62638: LD_INT 1
62640: DEC
62641: ST_TO_ADDR
62642: LD_EXP 39
62646: PUSH
62647: FOR_TO
62648: IFFALSE 62749
// begin tmp := 0 ;
62650: LD_ADDR_VAR 0 3
62654: PUSH
62655: LD_STRING 0
62657: ST_TO_ADDR
// if result [ 1 ] then
62658: LD_VAR 0 2
62662: PUSH
62663: LD_INT 1
62665: ARRAY
62666: IFFALSE 62731
// if result [ 1 ] [ 1 ] = i then
62668: LD_VAR 0 2
62672: PUSH
62673: LD_INT 1
62675: ARRAY
62676: PUSH
62677: LD_INT 1
62679: ARRAY
62680: PUSH
62681: LD_VAR 0 8
62685: EQUAL
62686: IFFALSE 62731
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
62688: LD_ADDR_VAR 0 2
62692: PUSH
62693: LD_VAR 0 2
62697: PPUSH
62698: LD_INT 1
62700: PPUSH
62701: LD_VAR 0 2
62705: PUSH
62706: LD_INT 1
62708: ARRAY
62709: PPUSH
62710: LD_INT 1
62712: PPUSH
62713: CALL_OW 3
62717: PPUSH
62718: CALL_OW 1
62722: ST_TO_ADDR
// tmp := 1 ;
62723: LD_ADDR_VAR 0 3
62727: PUSH
62728: LD_STRING 1
62730: ST_TO_ADDR
// end ; normal := normal & tmp ;
62731: LD_ADDR_VAR 0 5
62735: PUSH
62736: LD_VAR 0 5
62740: PUSH
62741: LD_VAR 0 3
62745: STR
62746: ST_TO_ADDR
// end ;
62747: GO 62647
62749: POP
62750: POP
// for i = 1 to hardcoreCounter do
62751: LD_ADDR_VAR 0 8
62755: PUSH
62756: DOUBLE
62757: LD_INT 1
62759: DEC
62760: ST_TO_ADDR
62761: LD_EXP 40
62765: PUSH
62766: FOR_TO
62767: IFFALSE 62872
// begin tmp := 0 ;
62769: LD_ADDR_VAR 0 3
62773: PUSH
62774: LD_STRING 0
62776: ST_TO_ADDR
// if result [ 2 ] then
62777: LD_VAR 0 2
62781: PUSH
62782: LD_INT 2
62784: ARRAY
62785: IFFALSE 62854
// if result [ 2 ] [ 1 ] = 100 + i then
62787: LD_VAR 0 2
62791: PUSH
62792: LD_INT 2
62794: ARRAY
62795: PUSH
62796: LD_INT 1
62798: ARRAY
62799: PUSH
62800: LD_INT 100
62802: PUSH
62803: LD_VAR 0 8
62807: PLUS
62808: EQUAL
62809: IFFALSE 62854
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
62811: LD_ADDR_VAR 0 2
62815: PUSH
62816: LD_VAR 0 2
62820: PPUSH
62821: LD_INT 2
62823: PPUSH
62824: LD_VAR 0 2
62828: PUSH
62829: LD_INT 2
62831: ARRAY
62832: PPUSH
62833: LD_INT 1
62835: PPUSH
62836: CALL_OW 3
62840: PPUSH
62841: CALL_OW 1
62845: ST_TO_ADDR
// tmp := 1 ;
62846: LD_ADDR_VAR 0 3
62850: PUSH
62851: LD_STRING 1
62853: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
62854: LD_ADDR_VAR 0 6
62858: PUSH
62859: LD_VAR 0 6
62863: PUSH
62864: LD_VAR 0 3
62868: STR
62869: ST_TO_ADDR
// end ;
62870: GO 62766
62872: POP
62873: POP
// if isGameLoad then
62874: LD_VAR 0 1
62878: IFFALSE 63353
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
62880: LD_ADDR_VAR 0 4
62884: PUSH
62885: LD_EXP 43
62889: PUSH
62890: LD_EXP 42
62894: PUSH
62895: LD_EXP 44
62899: PUSH
62900: LD_EXP 41
62904: PUSH
62905: LD_EXP 45
62909: PUSH
62910: LD_EXP 46
62914: PUSH
62915: LD_EXP 47
62919: PUSH
62920: LD_EXP 48
62924: PUSH
62925: LD_EXP 49
62929: PUSH
62930: LD_EXP 50
62934: PUSH
62935: LD_EXP 51
62939: PUSH
62940: LD_EXP 52
62944: PUSH
62945: LD_EXP 53
62949: PUSH
62950: LD_EXP 54
62954: PUSH
62955: LD_EXP 62
62959: PUSH
62960: LD_EXP 63
62964: PUSH
62965: LD_EXP 64
62969: PUSH
62970: LD_EXP 65
62974: PUSH
62975: LD_EXP 67
62979: PUSH
62980: LD_EXP 68
62984: PUSH
62985: LD_EXP 69
62989: PUSH
62990: LD_EXP 72
62994: PUSH
62995: LD_EXP 74
62999: PUSH
63000: LD_EXP 75
63004: PUSH
63005: LD_EXP 76
63009: PUSH
63010: LD_EXP 78
63014: PUSH
63015: LD_EXP 79
63019: PUSH
63020: LD_EXP 82
63024: PUSH
63025: LD_EXP 83
63029: PUSH
63030: LD_EXP 84
63034: PUSH
63035: LD_EXP 85
63039: PUSH
63040: LD_EXP 86
63044: PUSH
63045: LD_EXP 87
63049: PUSH
63050: LD_EXP 88
63054: PUSH
63055: LD_EXP 89
63059: PUSH
63060: LD_EXP 90
63064: PUSH
63065: LD_EXP 55
63069: PUSH
63070: LD_EXP 56
63074: PUSH
63075: LD_EXP 59
63079: PUSH
63080: LD_EXP 60
63084: PUSH
63085: LD_EXP 61
63089: PUSH
63090: LD_EXP 57
63094: PUSH
63095: LD_EXP 58
63099: PUSH
63100: LD_EXP 66
63104: PUSH
63105: LD_EXP 70
63109: PUSH
63110: LD_EXP 71
63114: PUSH
63115: LD_EXP 73
63119: PUSH
63120: LD_EXP 77
63124: PUSH
63125: LD_EXP 80
63129: PUSH
63130: LD_EXP 81
63134: PUSH
63135: LD_EXP 91
63139: PUSH
63140: LD_EXP 92
63144: PUSH
63145: LD_EXP 93
63149: PUSH
63150: LD_EXP 94
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: ST_TO_ADDR
// tmp :=  ;
63211: LD_ADDR_VAR 0 3
63215: PUSH
63216: LD_STRING 
63218: ST_TO_ADDR
// for i = 1 to normalCounter do
63219: LD_ADDR_VAR 0 8
63223: PUSH
63224: DOUBLE
63225: LD_INT 1
63227: DEC
63228: ST_TO_ADDR
63229: LD_EXP 39
63233: PUSH
63234: FOR_TO
63235: IFFALSE 63271
// begin if flags [ i ] then
63237: LD_VAR 0 4
63241: PUSH
63242: LD_VAR 0 8
63246: ARRAY
63247: IFFALSE 63269
// tmp := tmp & i & ; ;
63249: LD_ADDR_VAR 0 3
63253: PUSH
63254: LD_VAR 0 3
63258: PUSH
63259: LD_VAR 0 8
63263: STR
63264: PUSH
63265: LD_STRING ;
63267: STR
63268: ST_TO_ADDR
// end ;
63269: GO 63234
63271: POP
63272: POP
// for i = 1 to hardcoreCounter do
63273: LD_ADDR_VAR 0 8
63277: PUSH
63278: DOUBLE
63279: LD_INT 1
63281: DEC
63282: ST_TO_ADDR
63283: LD_EXP 40
63287: PUSH
63288: FOR_TO
63289: IFFALSE 63335
// begin if flags [ normalCounter + i ] then
63291: LD_VAR 0 4
63295: PUSH
63296: LD_EXP 39
63300: PUSH
63301: LD_VAR 0 8
63305: PLUS
63306: ARRAY
63307: IFFALSE 63333
// tmp := tmp & ( 100 + i ) & ; ;
63309: LD_ADDR_VAR 0 3
63313: PUSH
63314: LD_VAR 0 3
63318: PUSH
63319: LD_INT 100
63321: PUSH
63322: LD_VAR 0 8
63326: PLUS
63327: STR
63328: PUSH
63329: LD_STRING ;
63331: STR
63332: ST_TO_ADDR
// end ;
63333: GO 63288
63335: POP
63336: POP
// if tmp then
63337: LD_VAR 0 3
63341: IFFALSE 63353
// active := tmp ;
63343: LD_ADDR_VAR 0 7
63347: PUSH
63348: LD_VAR 0 3
63352: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
63353: LD_STRING getStreamItemsFromMission("
63355: PUSH
63356: LD_VAR 0 5
63360: STR
63361: PUSH
63362: LD_STRING ","
63364: STR
63365: PUSH
63366: LD_VAR 0 6
63370: STR
63371: PUSH
63372: LD_STRING ","
63374: STR
63375: PUSH
63376: LD_VAR 0 7
63380: STR
63381: PUSH
63382: LD_STRING ")
63384: STR
63385: PPUSH
63386: CALL_OW 559
// end else
63390: GO 63399
// ToLua ( getStreamItemsFromMission("","","") ) ;
63392: LD_STRING getStreamItemsFromMission("","","")
63394: PPUSH
63395: CALL_OW 559
// end ;
63399: LD_VAR 0 2
63403: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63404: LD_EXP 38
63408: PUSH
63409: LD_EXP 43
63413: AND
63414: IFFALSE 63538
63416: GO 63418
63418: DISABLE
63419: LD_INT 0
63421: PPUSH
63422: PPUSH
// begin enable ;
63423: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63424: LD_ADDR_VAR 0 2
63428: PUSH
63429: LD_INT 22
63431: PUSH
63432: LD_OWVAR 2
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 2
63443: PUSH
63444: LD_INT 34
63446: PUSH
63447: LD_INT 7
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 34
63456: PUSH
63457: LD_INT 45
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 34
63466: PUSH
63467: LD_INT 28
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 34
63476: PUSH
63477: LD_INT 47
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PPUSH
63495: CALL_OW 69
63499: ST_TO_ADDR
// if not tmp then
63500: LD_VAR 0 2
63504: NOT
63505: IFFALSE 63509
// exit ;
63507: GO 63538
// for i in tmp do
63509: LD_ADDR_VAR 0 1
63513: PUSH
63514: LD_VAR 0 2
63518: PUSH
63519: FOR_IN
63520: IFFALSE 63536
// begin SetLives ( i , 0 ) ;
63522: LD_VAR 0 1
63526: PPUSH
63527: LD_INT 0
63529: PPUSH
63530: CALL_OW 234
// end ;
63534: GO 63519
63536: POP
63537: POP
// end ;
63538: PPOPN 2
63540: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63541: LD_EXP 38
63545: PUSH
63546: LD_EXP 44
63550: AND
63551: IFFALSE 63635
63553: GO 63555
63555: DISABLE
63556: LD_INT 0
63558: PPUSH
63559: PPUSH
// begin enable ;
63560: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63561: LD_ADDR_VAR 0 2
63565: PUSH
63566: LD_INT 22
63568: PUSH
63569: LD_OWVAR 2
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 32
63580: PUSH
63581: LD_INT 3
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PPUSH
63592: CALL_OW 69
63596: ST_TO_ADDR
// if not tmp then
63597: LD_VAR 0 2
63601: NOT
63602: IFFALSE 63606
// exit ;
63604: GO 63635
// for i in tmp do
63606: LD_ADDR_VAR 0 1
63610: PUSH
63611: LD_VAR 0 2
63615: PUSH
63616: FOR_IN
63617: IFFALSE 63633
// begin SetLives ( i , 0 ) ;
63619: LD_VAR 0 1
63623: PPUSH
63624: LD_INT 0
63626: PPUSH
63627: CALL_OW 234
// end ;
63631: GO 63616
63633: POP
63634: POP
// end ;
63635: PPOPN 2
63637: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
63638: LD_EXP 38
63642: PUSH
63643: LD_EXP 41
63647: AND
63648: IFFALSE 63741
63650: GO 63652
63652: DISABLE
63653: LD_INT 0
63655: PPUSH
// begin enable ;
63656: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
63657: LD_ADDR_VAR 0 1
63661: PUSH
63662: LD_INT 22
63664: PUSH
63665: LD_OWVAR 2
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 2
63676: PUSH
63677: LD_INT 25
63679: PUSH
63680: LD_INT 5
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 25
63689: PUSH
63690: LD_INT 9
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 25
63699: PUSH
63700: LD_INT 8
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PPUSH
63717: CALL_OW 69
63721: PUSH
63722: FOR_IN
63723: IFFALSE 63739
// begin SetClass ( i , 1 ) ;
63725: LD_VAR 0 1
63729: PPUSH
63730: LD_INT 1
63732: PPUSH
63733: CALL_OW 336
// end ;
63737: GO 63722
63739: POP
63740: POP
// end ;
63741: PPOPN 1
63743: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
63744: LD_EXP 38
63748: PUSH
63749: LD_EXP 42
63753: AND
63754: PUSH
63755: LD_OWVAR 65
63759: PUSH
63760: LD_INT 7
63762: LESS
63763: AND
63764: IFFALSE 63778
63766: GO 63768
63768: DISABLE
// begin enable ;
63769: ENABLE
// game_speed := 7 ;
63770: LD_ADDR_OWVAR 65
63774: PUSH
63775: LD_INT 7
63777: ST_TO_ADDR
// end ;
63778: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
63779: LD_EXP 38
63783: PUSH
63784: LD_EXP 45
63788: AND
63789: IFFALSE 63991
63791: GO 63793
63793: DISABLE
63794: LD_INT 0
63796: PPUSH
63797: PPUSH
63798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63799: LD_ADDR_VAR 0 3
63803: PUSH
63804: LD_INT 81
63806: PUSH
63807: LD_OWVAR 2
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 21
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PPUSH
63830: CALL_OW 69
63834: ST_TO_ADDR
// if not tmp then
63835: LD_VAR 0 3
63839: NOT
63840: IFFALSE 63844
// exit ;
63842: GO 63991
// if tmp > 5 then
63844: LD_VAR 0 3
63848: PUSH
63849: LD_INT 5
63851: GREATER
63852: IFFALSE 63864
// k := 5 else
63854: LD_ADDR_VAR 0 2
63858: PUSH
63859: LD_INT 5
63861: ST_TO_ADDR
63862: GO 63874
// k := tmp ;
63864: LD_ADDR_VAR 0 2
63868: PUSH
63869: LD_VAR 0 3
63873: ST_TO_ADDR
// for i := 1 to k do
63874: LD_ADDR_VAR 0 1
63878: PUSH
63879: DOUBLE
63880: LD_INT 1
63882: DEC
63883: ST_TO_ADDR
63884: LD_VAR 0 2
63888: PUSH
63889: FOR_TO
63890: IFFALSE 63989
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
63892: LD_VAR 0 3
63896: PUSH
63897: LD_VAR 0 1
63901: ARRAY
63902: PPUSH
63903: LD_VAR 0 1
63907: PUSH
63908: LD_INT 4
63910: MOD
63911: PUSH
63912: LD_INT 1
63914: PLUS
63915: PPUSH
63916: CALL_OW 259
63920: PUSH
63921: LD_INT 10
63923: LESS
63924: IFFALSE 63987
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
63926: LD_VAR 0 3
63930: PUSH
63931: LD_VAR 0 1
63935: ARRAY
63936: PPUSH
63937: LD_VAR 0 1
63941: PUSH
63942: LD_INT 4
63944: MOD
63945: PUSH
63946: LD_INT 1
63948: PLUS
63949: PPUSH
63950: LD_VAR 0 3
63954: PUSH
63955: LD_VAR 0 1
63959: ARRAY
63960: PPUSH
63961: LD_VAR 0 1
63965: PUSH
63966: LD_INT 4
63968: MOD
63969: PUSH
63970: LD_INT 1
63972: PLUS
63973: PPUSH
63974: CALL_OW 259
63978: PUSH
63979: LD_INT 1
63981: PLUS
63982: PPUSH
63983: CALL_OW 237
63987: GO 63889
63989: POP
63990: POP
// end ;
63991: PPOPN 3
63993: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
63994: LD_EXP 38
63998: PUSH
63999: LD_EXP 46
64003: AND
64004: IFFALSE 64024
64006: GO 64008
64008: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64009: LD_INT 4
64011: PPUSH
64012: LD_OWVAR 2
64016: PPUSH
64017: LD_INT 0
64019: PPUSH
64020: CALL_OW 324
64024: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64025: LD_EXP 38
64029: PUSH
64030: LD_EXP 75
64034: AND
64035: IFFALSE 64055
64037: GO 64039
64039: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64040: LD_INT 19
64042: PPUSH
64043: LD_OWVAR 2
64047: PPUSH
64048: LD_INT 0
64050: PPUSH
64051: CALL_OW 324
64055: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64056: LD_EXP 38
64060: PUSH
64061: LD_EXP 47
64065: AND
64066: IFFALSE 64168
64068: GO 64070
64070: DISABLE
64071: LD_INT 0
64073: PPUSH
64074: PPUSH
// begin enable ;
64075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64076: LD_ADDR_VAR 0 2
64080: PUSH
64081: LD_INT 22
64083: PUSH
64084: LD_OWVAR 2
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 2
64095: PUSH
64096: LD_INT 34
64098: PUSH
64099: LD_INT 11
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 34
64108: PUSH
64109: LD_INT 30
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: LIST
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PPUSH
64125: CALL_OW 69
64129: ST_TO_ADDR
// if not tmp then
64130: LD_VAR 0 2
64134: NOT
64135: IFFALSE 64139
// exit ;
64137: GO 64168
// for i in tmp do
64139: LD_ADDR_VAR 0 1
64143: PUSH
64144: LD_VAR 0 2
64148: PUSH
64149: FOR_IN
64150: IFFALSE 64166
// begin SetLives ( i , 0 ) ;
64152: LD_VAR 0 1
64156: PPUSH
64157: LD_INT 0
64159: PPUSH
64160: CALL_OW 234
// end ;
64164: GO 64149
64166: POP
64167: POP
// end ;
64168: PPOPN 2
64170: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64171: LD_EXP 38
64175: PUSH
64176: LD_EXP 48
64180: AND
64181: IFFALSE 64201
64183: GO 64185
64185: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64186: LD_INT 32
64188: PPUSH
64189: LD_OWVAR 2
64193: PPUSH
64194: LD_INT 0
64196: PPUSH
64197: CALL_OW 324
64201: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64202: LD_EXP 38
64206: PUSH
64207: LD_EXP 49
64211: AND
64212: IFFALSE 64393
64214: GO 64216
64216: DISABLE
64217: LD_INT 0
64219: PPUSH
64220: PPUSH
64221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64222: LD_ADDR_VAR 0 2
64226: PUSH
64227: LD_INT 22
64229: PUSH
64230: LD_OWVAR 2
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 33
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PPUSH
64253: CALL_OW 69
64257: ST_TO_ADDR
// if not tmp then
64258: LD_VAR 0 2
64262: NOT
64263: IFFALSE 64267
// exit ;
64265: GO 64393
// side := 0 ;
64267: LD_ADDR_VAR 0 3
64271: PUSH
64272: LD_INT 0
64274: ST_TO_ADDR
// for i := 1 to 8 do
64275: LD_ADDR_VAR 0 1
64279: PUSH
64280: DOUBLE
64281: LD_INT 1
64283: DEC
64284: ST_TO_ADDR
64285: LD_INT 8
64287: PUSH
64288: FOR_TO
64289: IFFALSE 64337
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64291: LD_OWVAR 2
64295: PUSH
64296: LD_VAR 0 1
64300: NONEQUAL
64301: PUSH
64302: LD_OWVAR 2
64306: PPUSH
64307: LD_VAR 0 1
64311: PPUSH
64312: CALL_OW 81
64316: PUSH
64317: LD_INT 2
64319: EQUAL
64320: AND
64321: IFFALSE 64335
// begin side := i ;
64323: LD_ADDR_VAR 0 3
64327: PUSH
64328: LD_VAR 0 1
64332: ST_TO_ADDR
// break ;
64333: GO 64337
// end ;
64335: GO 64288
64337: POP
64338: POP
// if not side then
64339: LD_VAR 0 3
64343: NOT
64344: IFFALSE 64348
// exit ;
64346: GO 64393
// for i := 1 to tmp do
64348: LD_ADDR_VAR 0 1
64352: PUSH
64353: DOUBLE
64354: LD_INT 1
64356: DEC
64357: ST_TO_ADDR
64358: LD_VAR 0 2
64362: PUSH
64363: FOR_TO
64364: IFFALSE 64391
// if Prob ( 60 ) then
64366: LD_INT 60
64368: PPUSH
64369: CALL_OW 13
64373: IFFALSE 64389
// SetSide ( i , side ) ;
64375: LD_VAR 0 1
64379: PPUSH
64380: LD_VAR 0 3
64384: PPUSH
64385: CALL_OW 235
64389: GO 64363
64391: POP
64392: POP
// end ;
64393: PPOPN 3
64395: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64396: LD_EXP 38
64400: PUSH
64401: LD_EXP 51
64405: AND
64406: IFFALSE 64525
64408: GO 64410
64410: DISABLE
64411: LD_INT 0
64413: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64414: LD_ADDR_VAR 0 1
64418: PUSH
64419: LD_INT 22
64421: PUSH
64422: LD_OWVAR 2
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 21
64433: PUSH
64434: LD_INT 1
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 3
64443: PUSH
64444: LD_INT 23
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: LIST
64462: PPUSH
64463: CALL_OW 69
64467: PUSH
64468: FOR_IN
64469: IFFALSE 64523
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64471: LD_VAR 0 1
64475: PPUSH
64476: CALL_OW 257
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: LD_INT 2
64486: PUSH
64487: LD_INT 3
64489: PUSH
64490: LD_INT 4
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: IN
64499: IFFALSE 64521
// SetClass ( un , rand ( 1 , 4 ) ) ;
64501: LD_VAR 0 1
64505: PPUSH
64506: LD_INT 1
64508: PPUSH
64509: LD_INT 4
64511: PPUSH
64512: CALL_OW 12
64516: PPUSH
64517: CALL_OW 336
64521: GO 64468
64523: POP
64524: POP
// end ;
64525: PPOPN 1
64527: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64528: LD_EXP 38
64532: PUSH
64533: LD_EXP 50
64537: AND
64538: IFFALSE 64617
64540: GO 64542
64542: DISABLE
64543: LD_INT 0
64545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64546: LD_ADDR_VAR 0 1
64550: PUSH
64551: LD_INT 22
64553: PUSH
64554: LD_OWVAR 2
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 21
64565: PUSH
64566: LD_INT 3
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PPUSH
64577: CALL_OW 69
64581: ST_TO_ADDR
// if not tmp then
64582: LD_VAR 0 1
64586: NOT
64587: IFFALSE 64591
// exit ;
64589: GO 64617
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
64591: LD_VAR 0 1
64595: PUSH
64596: LD_INT 1
64598: PPUSH
64599: LD_VAR 0 1
64603: PPUSH
64604: CALL_OW 12
64608: ARRAY
64609: PPUSH
64610: LD_INT 100
64612: PPUSH
64613: CALL_OW 234
// end ;
64617: PPOPN 1
64619: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
64620: LD_EXP 38
64624: PUSH
64625: LD_EXP 52
64629: AND
64630: IFFALSE 64728
64632: GO 64634
64634: DISABLE
64635: LD_INT 0
64637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64638: LD_ADDR_VAR 0 1
64642: PUSH
64643: LD_INT 22
64645: PUSH
64646: LD_OWVAR 2
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 21
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PPUSH
64669: CALL_OW 69
64673: ST_TO_ADDR
// if not tmp then
64674: LD_VAR 0 1
64678: NOT
64679: IFFALSE 64683
// exit ;
64681: GO 64728
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
64683: LD_VAR 0 1
64687: PUSH
64688: LD_INT 1
64690: PPUSH
64691: LD_VAR 0 1
64695: PPUSH
64696: CALL_OW 12
64700: ARRAY
64701: PPUSH
64702: LD_INT 1
64704: PPUSH
64705: LD_INT 4
64707: PPUSH
64708: CALL_OW 12
64712: PPUSH
64713: LD_INT 3000
64715: PPUSH
64716: LD_INT 9000
64718: PPUSH
64719: CALL_OW 12
64723: PPUSH
64724: CALL_OW 492
// end ;
64728: PPOPN 1
64730: END
// every 0 0$1 trigger StreamModeActive and sDepot do
64731: LD_EXP 38
64735: PUSH
64736: LD_EXP 53
64740: AND
64741: IFFALSE 64761
64743: GO 64745
64745: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
64746: LD_INT 1
64748: PPUSH
64749: LD_OWVAR 2
64753: PPUSH
64754: LD_INT 0
64756: PPUSH
64757: CALL_OW 324
64761: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
64762: LD_EXP 38
64766: PUSH
64767: LD_EXP 54
64771: AND
64772: IFFALSE 64855
64774: GO 64776
64776: DISABLE
64777: LD_INT 0
64779: PPUSH
64780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64781: LD_ADDR_VAR 0 2
64785: PUSH
64786: LD_INT 22
64788: PUSH
64789: LD_OWVAR 2
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 21
64800: PUSH
64801: LD_INT 3
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PPUSH
64812: CALL_OW 69
64816: ST_TO_ADDR
// if not tmp then
64817: LD_VAR 0 2
64821: NOT
64822: IFFALSE 64826
// exit ;
64824: GO 64855
// for i in tmp do
64826: LD_ADDR_VAR 0 1
64830: PUSH
64831: LD_VAR 0 2
64835: PUSH
64836: FOR_IN
64837: IFFALSE 64853
// SetBLevel ( i , 10 ) ;
64839: LD_VAR 0 1
64843: PPUSH
64844: LD_INT 10
64846: PPUSH
64847: CALL_OW 241
64851: GO 64836
64853: POP
64854: POP
// end ;
64855: PPOPN 2
64857: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
64858: LD_EXP 38
64862: PUSH
64863: LD_EXP 55
64867: AND
64868: IFFALSE 64979
64870: GO 64872
64872: DISABLE
64873: LD_INT 0
64875: PPUSH
64876: PPUSH
64877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64878: LD_ADDR_VAR 0 3
64882: PUSH
64883: LD_INT 22
64885: PUSH
64886: LD_OWVAR 2
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 25
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PPUSH
64909: CALL_OW 69
64913: ST_TO_ADDR
// if not tmp then
64914: LD_VAR 0 3
64918: NOT
64919: IFFALSE 64923
// exit ;
64921: GO 64979
// un := tmp [ rand ( 1 , tmp ) ] ;
64923: LD_ADDR_VAR 0 2
64927: PUSH
64928: LD_VAR 0 3
64932: PUSH
64933: LD_INT 1
64935: PPUSH
64936: LD_VAR 0 3
64940: PPUSH
64941: CALL_OW 12
64945: ARRAY
64946: ST_TO_ADDR
// if Crawls ( un ) then
64947: LD_VAR 0 2
64951: PPUSH
64952: CALL_OW 318
64956: IFFALSE 64967
// ComWalk ( un ) ;
64958: LD_VAR 0 2
64962: PPUSH
64963: CALL_OW 138
// SetClass ( un , class_sniper ) ;
64967: LD_VAR 0 2
64971: PPUSH
64972: LD_INT 5
64974: PPUSH
64975: CALL_OW 336
// end ;
64979: PPOPN 3
64981: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
64982: LD_EXP 38
64986: PUSH
64987: LD_EXP 56
64991: AND
64992: PUSH
64993: LD_OWVAR 67
64997: PUSH
64998: LD_INT 4
65000: LESS
65001: AND
65002: IFFALSE 65021
65004: GO 65006
65006: DISABLE
// begin Difficulty := Difficulty + 1 ;
65007: LD_ADDR_OWVAR 67
65011: PUSH
65012: LD_OWVAR 67
65016: PUSH
65017: LD_INT 1
65019: PLUS
65020: ST_TO_ADDR
// end ;
65021: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65022: LD_EXP 38
65026: PUSH
65027: LD_EXP 57
65031: AND
65032: IFFALSE 65135
65034: GO 65036
65036: DISABLE
65037: LD_INT 0
65039: PPUSH
// begin for i := 1 to 5 do
65040: LD_ADDR_VAR 0 1
65044: PUSH
65045: DOUBLE
65046: LD_INT 1
65048: DEC
65049: ST_TO_ADDR
65050: LD_INT 5
65052: PUSH
65053: FOR_TO
65054: IFFALSE 65133
// begin uc_nation := nation_nature ;
65056: LD_ADDR_OWVAR 21
65060: PUSH
65061: LD_INT 0
65063: ST_TO_ADDR
// uc_side := 0 ;
65064: LD_ADDR_OWVAR 20
65068: PUSH
65069: LD_INT 0
65071: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65072: LD_ADDR_OWVAR 29
65076: PUSH
65077: LD_INT 12
65079: PUSH
65080: LD_INT 12
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// hc_agressivity := 20 ;
65087: LD_ADDR_OWVAR 35
65091: PUSH
65092: LD_INT 20
65094: ST_TO_ADDR
// hc_class := class_tiger ;
65095: LD_ADDR_OWVAR 28
65099: PUSH
65100: LD_INT 14
65102: ST_TO_ADDR
// hc_gallery :=  ;
65103: LD_ADDR_OWVAR 33
65107: PUSH
65108: LD_STRING 
65110: ST_TO_ADDR
// hc_name :=  ;
65111: LD_ADDR_OWVAR 26
65115: PUSH
65116: LD_STRING 
65118: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65119: CALL_OW 44
65123: PPUSH
65124: LD_INT 0
65126: PPUSH
65127: CALL_OW 51
// end ;
65131: GO 65053
65133: POP
65134: POP
// end ;
65135: PPOPN 1
65137: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65138: LD_EXP 38
65142: PUSH
65143: LD_EXP 58
65147: AND
65148: IFFALSE 65157
65150: GO 65152
65152: DISABLE
// StreamSibBomb ;
65153: CALL 65158 0 0
65157: END
// export function StreamSibBomb ; var i , x , y ; begin
65158: LD_INT 0
65160: PPUSH
65161: PPUSH
65162: PPUSH
65163: PPUSH
// result := false ;
65164: LD_ADDR_VAR 0 1
65168: PUSH
65169: LD_INT 0
65171: ST_TO_ADDR
// for i := 1 to 16 do
65172: LD_ADDR_VAR 0 2
65176: PUSH
65177: DOUBLE
65178: LD_INT 1
65180: DEC
65181: ST_TO_ADDR
65182: LD_INT 16
65184: PUSH
65185: FOR_TO
65186: IFFALSE 65385
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65188: LD_ADDR_VAR 0 3
65192: PUSH
65193: LD_INT 10
65195: PUSH
65196: LD_INT 20
65198: PUSH
65199: LD_INT 30
65201: PUSH
65202: LD_INT 40
65204: PUSH
65205: LD_INT 50
65207: PUSH
65208: LD_INT 60
65210: PUSH
65211: LD_INT 70
65213: PUSH
65214: LD_INT 80
65216: PUSH
65217: LD_INT 90
65219: PUSH
65220: LD_INT 100
65222: PUSH
65223: LD_INT 110
65225: PUSH
65226: LD_INT 120
65228: PUSH
65229: LD_INT 130
65231: PUSH
65232: LD_INT 140
65234: PUSH
65235: LD_INT 150
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 1
65257: PPUSH
65258: LD_INT 15
65260: PPUSH
65261: CALL_OW 12
65265: ARRAY
65266: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65267: LD_ADDR_VAR 0 4
65271: PUSH
65272: LD_INT 10
65274: PUSH
65275: LD_INT 20
65277: PUSH
65278: LD_INT 30
65280: PUSH
65281: LD_INT 40
65283: PUSH
65284: LD_INT 50
65286: PUSH
65287: LD_INT 60
65289: PUSH
65290: LD_INT 70
65292: PUSH
65293: LD_INT 80
65295: PUSH
65296: LD_INT 90
65298: PUSH
65299: LD_INT 100
65301: PUSH
65302: LD_INT 110
65304: PUSH
65305: LD_INT 120
65307: PUSH
65308: LD_INT 130
65310: PUSH
65311: LD_INT 140
65313: PUSH
65314: LD_INT 150
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 1
65336: PPUSH
65337: LD_INT 15
65339: PPUSH
65340: CALL_OW 12
65344: ARRAY
65345: ST_TO_ADDR
// if ValidHex ( x , y ) then
65346: LD_VAR 0 3
65350: PPUSH
65351: LD_VAR 0 4
65355: PPUSH
65356: CALL_OW 488
65360: IFFALSE 65383
// begin result := [ x , y ] ;
65362: LD_ADDR_VAR 0 1
65366: PUSH
65367: LD_VAR 0 3
65371: PUSH
65372: LD_VAR 0 4
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: ST_TO_ADDR
// break ;
65381: GO 65385
// end ; end ;
65383: GO 65185
65385: POP
65386: POP
// if result then
65387: LD_VAR 0 1
65391: IFFALSE 65451
// begin ToLua ( playSibBomb() ) ;
65393: LD_STRING playSibBomb()
65395: PPUSH
65396: CALL_OW 559
// wait ( 0 0$14 ) ;
65400: LD_INT 490
65402: PPUSH
65403: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65407: LD_VAR 0 1
65411: PUSH
65412: LD_INT 1
65414: ARRAY
65415: PPUSH
65416: LD_VAR 0 1
65420: PUSH
65421: LD_INT 2
65423: ARRAY
65424: PPUSH
65425: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65429: LD_VAR 0 1
65433: PUSH
65434: LD_INT 1
65436: ARRAY
65437: PPUSH
65438: LD_VAR 0 1
65442: PUSH
65443: LD_INT 2
65445: ARRAY
65446: PPUSH
65447: CALL_OW 429
// end ; end ;
65451: LD_VAR 0 1
65455: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65456: LD_EXP 38
65460: PUSH
65461: LD_EXP 60
65465: AND
65466: IFFALSE 65478
65468: GO 65470
65470: DISABLE
// YouLost (  ) ;
65471: LD_STRING 
65473: PPUSH
65474: CALL_OW 104
65478: END
// every 0 0$1 trigger StreamModeActive and sFog do
65479: LD_EXP 38
65483: PUSH
65484: LD_EXP 59
65488: AND
65489: IFFALSE 65503
65491: GO 65493
65493: DISABLE
// FogOff ( your_side ) ;
65494: LD_OWVAR 2
65498: PPUSH
65499: CALL_OW 344
65503: END
// every 0 0$1 trigger StreamModeActive and sSun do
65504: LD_EXP 38
65508: PUSH
65509: LD_EXP 61
65513: AND
65514: IFFALSE 65542
65516: GO 65518
65518: DISABLE
// begin solar_recharge_percent := 0 ;
65519: LD_ADDR_OWVAR 79
65523: PUSH
65524: LD_INT 0
65526: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65527: LD_INT 10500
65529: PPUSH
65530: CALL_OW 67
// solar_recharge_percent := 100 ;
65534: LD_ADDR_OWVAR 79
65538: PUSH
65539: LD_INT 100
65541: ST_TO_ADDR
// end ;
65542: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65543: LD_EXP 38
65547: PUSH
65548: LD_EXP 62
65552: AND
65553: IFFALSE 65792
65555: GO 65557
65557: DISABLE
65558: LD_INT 0
65560: PPUSH
65561: PPUSH
65562: PPUSH
// begin tmp := [ ] ;
65563: LD_ADDR_VAR 0 3
65567: PUSH
65568: EMPTY
65569: ST_TO_ADDR
// for i := 1 to 6 do
65570: LD_ADDR_VAR 0 1
65574: PUSH
65575: DOUBLE
65576: LD_INT 1
65578: DEC
65579: ST_TO_ADDR
65580: LD_INT 6
65582: PUSH
65583: FOR_TO
65584: IFFALSE 65689
// begin uc_nation := nation_nature ;
65586: LD_ADDR_OWVAR 21
65590: PUSH
65591: LD_INT 0
65593: ST_TO_ADDR
// uc_side := 0 ;
65594: LD_ADDR_OWVAR 20
65598: PUSH
65599: LD_INT 0
65601: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65602: LD_ADDR_OWVAR 29
65606: PUSH
65607: LD_INT 12
65609: PUSH
65610: LD_INT 12
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: ST_TO_ADDR
// hc_agressivity := 20 ;
65617: LD_ADDR_OWVAR 35
65621: PUSH
65622: LD_INT 20
65624: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
65625: LD_ADDR_OWVAR 28
65629: PUSH
65630: LD_INT 17
65632: ST_TO_ADDR
// hc_gallery :=  ;
65633: LD_ADDR_OWVAR 33
65637: PUSH
65638: LD_STRING 
65640: ST_TO_ADDR
// hc_name :=  ;
65641: LD_ADDR_OWVAR 26
65645: PUSH
65646: LD_STRING 
65648: ST_TO_ADDR
// un := CreateHuman ;
65649: LD_ADDR_VAR 0 2
65653: PUSH
65654: CALL_OW 44
65658: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
65659: LD_VAR 0 2
65663: PPUSH
65664: LD_INT 1
65666: PPUSH
65667: CALL_OW 51
// tmp := tmp ^ un ;
65671: LD_ADDR_VAR 0 3
65675: PUSH
65676: LD_VAR 0 3
65680: PUSH
65681: LD_VAR 0 2
65685: ADD
65686: ST_TO_ADDR
// end ;
65687: GO 65583
65689: POP
65690: POP
// repeat wait ( 0 0$1 ) ;
65691: LD_INT 35
65693: PPUSH
65694: CALL_OW 67
// for un in tmp do
65698: LD_ADDR_VAR 0 2
65702: PUSH
65703: LD_VAR 0 3
65707: PUSH
65708: FOR_IN
65709: IFFALSE 65783
// begin if IsDead ( un ) then
65711: LD_VAR 0 2
65715: PPUSH
65716: CALL_OW 301
65720: IFFALSE 65740
// begin tmp := tmp diff un ;
65722: LD_ADDR_VAR 0 3
65726: PUSH
65727: LD_VAR 0 3
65731: PUSH
65732: LD_VAR 0 2
65736: DIFF
65737: ST_TO_ADDR
// continue ;
65738: GO 65708
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
65740: LD_VAR 0 2
65744: PPUSH
65745: LD_INT 3
65747: PUSH
65748: LD_INT 22
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PPUSH
65762: CALL_OW 69
65766: PPUSH
65767: LD_VAR 0 2
65771: PPUSH
65772: CALL_OW 74
65776: PPUSH
65777: CALL_OW 115
// end ;
65781: GO 65708
65783: POP
65784: POP
// until not tmp ;
65785: LD_VAR 0 3
65789: NOT
65790: IFFALSE 65691
// end ;
65792: PPOPN 3
65794: END
// every 0 0$1 trigger StreamModeActive and sTroll do
65795: LD_EXP 38
65799: PUSH
65800: LD_EXP 63
65804: AND
65805: IFFALSE 65859
65807: GO 65809
65809: DISABLE
// begin ToLua ( displayTroll(); ) ;
65810: LD_STRING displayTroll();
65812: PPUSH
65813: CALL_OW 559
// wait ( 3 3$00 ) ;
65817: LD_INT 6300
65819: PPUSH
65820: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65824: LD_STRING hideTroll();
65826: PPUSH
65827: CALL_OW 559
// wait ( 1 1$00 ) ;
65831: LD_INT 2100
65833: PPUSH
65834: CALL_OW 67
// ToLua ( displayTroll(); ) ;
65838: LD_STRING displayTroll();
65840: PPUSH
65841: CALL_OW 559
// wait ( 1 1$00 ) ;
65845: LD_INT 2100
65847: PPUSH
65848: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65852: LD_STRING hideTroll();
65854: PPUSH
65855: CALL_OW 559
// end ;
65859: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
65860: LD_EXP 38
65864: PUSH
65865: LD_EXP 64
65869: AND
65870: IFFALSE 65933
65872: GO 65874
65874: DISABLE
65875: LD_INT 0
65877: PPUSH
// begin p := 0 ;
65878: LD_ADDR_VAR 0 1
65882: PUSH
65883: LD_INT 0
65885: ST_TO_ADDR
// repeat game_speed := 1 ;
65886: LD_ADDR_OWVAR 65
65890: PUSH
65891: LD_INT 1
65893: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65894: LD_INT 35
65896: PPUSH
65897: CALL_OW 67
// p := p + 1 ;
65901: LD_ADDR_VAR 0 1
65905: PUSH
65906: LD_VAR 0 1
65910: PUSH
65911: LD_INT 1
65913: PLUS
65914: ST_TO_ADDR
// until p >= 60 ;
65915: LD_VAR 0 1
65919: PUSH
65920: LD_INT 60
65922: GREATEREQUAL
65923: IFFALSE 65886
// game_speed := 4 ;
65925: LD_ADDR_OWVAR 65
65929: PUSH
65930: LD_INT 4
65932: ST_TO_ADDR
// end ;
65933: PPOPN 1
65935: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
65936: LD_EXP 38
65940: PUSH
65941: LD_EXP 65
65945: AND
65946: IFFALSE 66092
65948: GO 65950
65950: DISABLE
65951: LD_INT 0
65953: PPUSH
65954: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65955: LD_ADDR_VAR 0 1
65959: PUSH
65960: LD_INT 22
65962: PUSH
65963: LD_OWVAR 2
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 2
65974: PUSH
65975: LD_INT 30
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 30
65987: PUSH
65988: LD_INT 1
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: LIST
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PPUSH
66004: CALL_OW 69
66008: ST_TO_ADDR
// if not depot then
66009: LD_VAR 0 1
66013: NOT
66014: IFFALSE 66018
// exit ;
66016: GO 66092
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66018: LD_ADDR_VAR 0 2
66022: PUSH
66023: LD_VAR 0 1
66027: PUSH
66028: LD_INT 1
66030: PPUSH
66031: LD_VAR 0 1
66035: PPUSH
66036: CALL_OW 12
66040: ARRAY
66041: PPUSH
66042: CALL_OW 274
66046: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66047: LD_VAR 0 2
66051: PPUSH
66052: LD_INT 1
66054: PPUSH
66055: LD_INT 0
66057: PPUSH
66058: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66062: LD_VAR 0 2
66066: PPUSH
66067: LD_INT 2
66069: PPUSH
66070: LD_INT 0
66072: PPUSH
66073: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66077: LD_VAR 0 2
66081: PPUSH
66082: LD_INT 3
66084: PPUSH
66085: LD_INT 0
66087: PPUSH
66088: CALL_OW 277
// end ;
66092: PPOPN 2
66094: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66095: LD_EXP 38
66099: PUSH
66100: LD_EXP 66
66104: AND
66105: IFFALSE 66202
66107: GO 66109
66109: DISABLE
66110: LD_INT 0
66112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66113: LD_ADDR_VAR 0 1
66117: PUSH
66118: LD_INT 22
66120: PUSH
66121: LD_OWVAR 2
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 21
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 3
66142: PUSH
66143: LD_INT 23
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: LIST
66161: PPUSH
66162: CALL_OW 69
66166: ST_TO_ADDR
// if not tmp then
66167: LD_VAR 0 1
66171: NOT
66172: IFFALSE 66176
// exit ;
66174: GO 66202
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66176: LD_VAR 0 1
66180: PUSH
66181: LD_INT 1
66183: PPUSH
66184: LD_VAR 0 1
66188: PPUSH
66189: CALL_OW 12
66193: ARRAY
66194: PPUSH
66195: LD_INT 200
66197: PPUSH
66198: CALL_OW 234
// end ;
66202: PPOPN 1
66204: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66205: LD_EXP 38
66209: PUSH
66210: LD_EXP 67
66214: AND
66215: IFFALSE 66294
66217: GO 66219
66219: DISABLE
66220: LD_INT 0
66222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66223: LD_ADDR_VAR 0 1
66227: PUSH
66228: LD_INT 22
66230: PUSH
66231: LD_OWVAR 2
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 21
66242: PUSH
66243: LD_INT 2
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PPUSH
66254: CALL_OW 69
66258: ST_TO_ADDR
// if not tmp then
66259: LD_VAR 0 1
66263: NOT
66264: IFFALSE 66268
// exit ;
66266: GO 66294
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66268: LD_VAR 0 1
66272: PUSH
66273: LD_INT 1
66275: PPUSH
66276: LD_VAR 0 1
66280: PPUSH
66281: CALL_OW 12
66285: ARRAY
66286: PPUSH
66287: LD_INT 60
66289: PPUSH
66290: CALL_OW 234
// end ;
66294: PPOPN 1
66296: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66297: LD_EXP 38
66301: PUSH
66302: LD_EXP 68
66306: AND
66307: IFFALSE 66406
66309: GO 66311
66311: DISABLE
66312: LD_INT 0
66314: PPUSH
66315: PPUSH
// begin enable ;
66316: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66317: LD_ADDR_VAR 0 1
66321: PUSH
66322: LD_INT 22
66324: PUSH
66325: LD_OWVAR 2
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 61
66336: PUSH
66337: EMPTY
66338: LIST
66339: PUSH
66340: LD_INT 33
66342: PUSH
66343: LD_INT 2
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: LIST
66354: PPUSH
66355: CALL_OW 69
66359: ST_TO_ADDR
// if not tmp then
66360: LD_VAR 0 1
66364: NOT
66365: IFFALSE 66369
// exit ;
66367: GO 66406
// for i in tmp do
66369: LD_ADDR_VAR 0 2
66373: PUSH
66374: LD_VAR 0 1
66378: PUSH
66379: FOR_IN
66380: IFFALSE 66404
// if IsControledBy ( i ) then
66382: LD_VAR 0 2
66386: PPUSH
66387: CALL_OW 312
66391: IFFALSE 66402
// ComUnlink ( i ) ;
66393: LD_VAR 0 2
66397: PPUSH
66398: CALL_OW 136
66402: GO 66379
66404: POP
66405: POP
// end ;
66406: PPOPN 2
66408: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66409: LD_EXP 38
66413: PUSH
66414: LD_EXP 69
66418: AND
66419: IFFALSE 66559
66421: GO 66423
66423: DISABLE
66424: LD_INT 0
66426: PPUSH
66427: PPUSH
// begin ToLua ( displayPowell(); ) ;
66428: LD_STRING displayPowell();
66430: PPUSH
66431: CALL_OW 559
// uc_side := 0 ;
66435: LD_ADDR_OWVAR 20
66439: PUSH
66440: LD_INT 0
66442: ST_TO_ADDR
// uc_nation := 2 ;
66443: LD_ADDR_OWVAR 21
66447: PUSH
66448: LD_INT 2
66450: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66451: LD_ADDR_OWVAR 37
66455: PUSH
66456: LD_INT 14
66458: ST_TO_ADDR
// vc_engine := engine_siberite ;
66459: LD_ADDR_OWVAR 39
66463: PUSH
66464: LD_INT 3
66466: ST_TO_ADDR
// vc_control := control_apeman ;
66467: LD_ADDR_OWVAR 38
66471: PUSH
66472: LD_INT 5
66474: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66475: LD_ADDR_OWVAR 40
66479: PUSH
66480: LD_INT 29
66482: ST_TO_ADDR
// un := CreateVehicle ;
66483: LD_ADDR_VAR 0 2
66487: PUSH
66488: CALL_OW 45
66492: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66493: LD_VAR 0 2
66497: PPUSH
66498: LD_INT 1
66500: PPUSH
66501: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66505: LD_INT 35
66507: PPUSH
66508: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66512: LD_VAR 0 2
66516: PPUSH
66517: LD_INT 22
66519: PUSH
66520: LD_OWVAR 2
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PPUSH
66529: CALL_OW 69
66533: PPUSH
66534: LD_VAR 0 2
66538: PPUSH
66539: CALL_OW 74
66543: PPUSH
66544: CALL_OW 115
// until IsDead ( un ) ;
66548: LD_VAR 0 2
66552: PPUSH
66553: CALL_OW 301
66557: IFFALSE 66505
// end ;
66559: PPOPN 2
66561: END
// every 0 0$1 trigger StreamModeActive and sStu do
66562: LD_EXP 38
66566: PUSH
66567: LD_EXP 77
66571: AND
66572: IFFALSE 66588
66574: GO 66576
66576: DISABLE
// begin ToLua ( displayStucuk(); ) ;
66577: LD_STRING displayStucuk();
66579: PPUSH
66580: CALL_OW 559
// ResetFog ;
66584: CALL_OW 335
// end ;
66588: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
66589: LD_EXP 38
66593: PUSH
66594: LD_EXP 70
66598: AND
66599: IFFALSE 66740
66601: GO 66603
66603: DISABLE
66604: LD_INT 0
66606: PPUSH
66607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66608: LD_ADDR_VAR 0 2
66612: PUSH
66613: LD_INT 22
66615: PUSH
66616: LD_OWVAR 2
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 21
66627: PUSH
66628: LD_INT 1
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PPUSH
66639: CALL_OW 69
66643: ST_TO_ADDR
// if not tmp then
66644: LD_VAR 0 2
66648: NOT
66649: IFFALSE 66653
// exit ;
66651: GO 66740
// un := tmp [ rand ( 1 , tmp ) ] ;
66653: LD_ADDR_VAR 0 1
66657: PUSH
66658: LD_VAR 0 2
66662: PUSH
66663: LD_INT 1
66665: PPUSH
66666: LD_VAR 0 2
66670: PPUSH
66671: CALL_OW 12
66675: ARRAY
66676: ST_TO_ADDR
// SetSide ( un , 0 ) ;
66677: LD_VAR 0 1
66681: PPUSH
66682: LD_INT 0
66684: PPUSH
66685: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
66689: LD_VAR 0 1
66693: PPUSH
66694: LD_OWVAR 3
66698: PUSH
66699: LD_VAR 0 1
66703: DIFF
66704: PPUSH
66705: LD_VAR 0 1
66709: PPUSH
66710: CALL_OW 74
66714: PPUSH
66715: CALL_OW 115
// wait ( 0 0$20 ) ;
66719: LD_INT 700
66721: PPUSH
66722: CALL_OW 67
// SetSide ( un , your_side ) ;
66726: LD_VAR 0 1
66730: PPUSH
66731: LD_OWVAR 2
66735: PPUSH
66736: CALL_OW 235
// end ;
66740: PPOPN 2
66742: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
66743: LD_EXP 38
66747: PUSH
66748: LD_EXP 71
66752: AND
66753: IFFALSE 66859
66755: GO 66757
66757: DISABLE
66758: LD_INT 0
66760: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66761: LD_ADDR_VAR 0 1
66765: PUSH
66766: LD_INT 22
66768: PUSH
66769: LD_OWVAR 2
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 2
66780: PUSH
66781: LD_INT 30
66783: PUSH
66784: LD_INT 0
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 30
66793: PUSH
66794: LD_INT 1
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: LIST
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PPUSH
66810: CALL_OW 69
66814: ST_TO_ADDR
// if not depot then
66815: LD_VAR 0 1
66819: NOT
66820: IFFALSE 66824
// exit ;
66822: GO 66859
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
66824: LD_VAR 0 1
66828: PUSH
66829: LD_INT 1
66831: ARRAY
66832: PPUSH
66833: CALL_OW 250
66837: PPUSH
66838: LD_VAR 0 1
66842: PUSH
66843: LD_INT 1
66845: ARRAY
66846: PPUSH
66847: CALL_OW 251
66851: PPUSH
66852: LD_INT 70
66854: PPUSH
66855: CALL_OW 495
// end ;
66859: PPOPN 1
66861: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
66862: LD_EXP 38
66866: PUSH
66867: LD_EXP 72
66871: AND
66872: IFFALSE 67083
66874: GO 66876
66876: DISABLE
66877: LD_INT 0
66879: PPUSH
66880: PPUSH
66881: PPUSH
66882: PPUSH
66883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66884: LD_ADDR_VAR 0 5
66888: PUSH
66889: LD_INT 22
66891: PUSH
66892: LD_OWVAR 2
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 21
66903: PUSH
66904: LD_INT 1
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PPUSH
66915: CALL_OW 69
66919: ST_TO_ADDR
// if not tmp then
66920: LD_VAR 0 5
66924: NOT
66925: IFFALSE 66929
// exit ;
66927: GO 67083
// for i in tmp do
66929: LD_ADDR_VAR 0 1
66933: PUSH
66934: LD_VAR 0 5
66938: PUSH
66939: FOR_IN
66940: IFFALSE 67081
// begin d := rand ( 0 , 5 ) ;
66942: LD_ADDR_VAR 0 4
66946: PUSH
66947: LD_INT 0
66949: PPUSH
66950: LD_INT 5
66952: PPUSH
66953: CALL_OW 12
66957: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
66958: LD_ADDR_VAR 0 2
66962: PUSH
66963: LD_VAR 0 1
66967: PPUSH
66968: CALL_OW 250
66972: PPUSH
66973: LD_VAR 0 4
66977: PPUSH
66978: LD_INT 3
66980: PPUSH
66981: LD_INT 12
66983: PPUSH
66984: CALL_OW 12
66988: PPUSH
66989: CALL_OW 272
66993: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
66994: LD_ADDR_VAR 0 3
66998: PUSH
66999: LD_VAR 0 1
67003: PPUSH
67004: CALL_OW 251
67008: PPUSH
67009: LD_VAR 0 4
67013: PPUSH
67014: LD_INT 3
67016: PPUSH
67017: LD_INT 12
67019: PPUSH
67020: CALL_OW 12
67024: PPUSH
67025: CALL_OW 273
67029: ST_TO_ADDR
// if ValidHex ( x , y ) then
67030: LD_VAR 0 2
67034: PPUSH
67035: LD_VAR 0 3
67039: PPUSH
67040: CALL_OW 488
67044: IFFALSE 67079
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67046: LD_VAR 0 1
67050: PPUSH
67051: LD_VAR 0 2
67055: PPUSH
67056: LD_VAR 0 3
67060: PPUSH
67061: LD_INT 3
67063: PPUSH
67064: LD_INT 6
67066: PPUSH
67067: CALL_OW 12
67071: PPUSH
67072: LD_INT 1
67074: PPUSH
67075: CALL_OW 483
// end ;
67079: GO 66939
67081: POP
67082: POP
// end ;
67083: PPOPN 5
67085: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67086: LD_EXP 38
67090: PUSH
67091: LD_EXP 73
67095: AND
67096: IFFALSE 67190
67098: GO 67100
67100: DISABLE
67101: LD_INT 0
67103: PPUSH
67104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67105: LD_ADDR_VAR 0 2
67109: PUSH
67110: LD_INT 22
67112: PUSH
67113: LD_OWVAR 2
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 32
67124: PUSH
67125: LD_INT 1
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 21
67134: PUSH
67135: LD_INT 2
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: LIST
67146: PPUSH
67147: CALL_OW 69
67151: ST_TO_ADDR
// if not tmp then
67152: LD_VAR 0 2
67156: NOT
67157: IFFALSE 67161
// exit ;
67159: GO 67190
// for i in tmp do
67161: LD_ADDR_VAR 0 1
67165: PUSH
67166: LD_VAR 0 2
67170: PUSH
67171: FOR_IN
67172: IFFALSE 67188
// SetFuel ( i , 0 ) ;
67174: LD_VAR 0 1
67178: PPUSH
67179: LD_INT 0
67181: PPUSH
67182: CALL_OW 240
67186: GO 67171
67188: POP
67189: POP
// end ;
67190: PPOPN 2
67192: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67193: LD_EXP 38
67197: PUSH
67198: LD_EXP 74
67202: AND
67203: IFFALSE 67269
67205: GO 67207
67207: DISABLE
67208: LD_INT 0
67210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67211: LD_ADDR_VAR 0 1
67215: PUSH
67216: LD_INT 22
67218: PUSH
67219: LD_OWVAR 2
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 30
67230: PUSH
67231: LD_INT 29
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PPUSH
67242: CALL_OW 69
67246: ST_TO_ADDR
// if not tmp then
67247: LD_VAR 0 1
67251: NOT
67252: IFFALSE 67256
// exit ;
67254: GO 67269
// DestroyUnit ( tmp [ 1 ] ) ;
67256: LD_VAR 0 1
67260: PUSH
67261: LD_INT 1
67263: ARRAY
67264: PPUSH
67265: CALL_OW 65
// end ;
67269: PPOPN 1
67271: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67272: LD_EXP 38
67276: PUSH
67277: LD_EXP 76
67281: AND
67282: IFFALSE 67411
67284: GO 67286
67286: DISABLE
67287: LD_INT 0
67289: PPUSH
// begin uc_side := 0 ;
67290: LD_ADDR_OWVAR 20
67294: PUSH
67295: LD_INT 0
67297: ST_TO_ADDR
// uc_nation := nation_arabian ;
67298: LD_ADDR_OWVAR 21
67302: PUSH
67303: LD_INT 2
67305: ST_TO_ADDR
// hc_gallery :=  ;
67306: LD_ADDR_OWVAR 33
67310: PUSH
67311: LD_STRING 
67313: ST_TO_ADDR
// hc_name :=  ;
67314: LD_ADDR_OWVAR 26
67318: PUSH
67319: LD_STRING 
67321: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67322: LD_INT 1
67324: PPUSH
67325: LD_INT 11
67327: PPUSH
67328: LD_INT 10
67330: PPUSH
67331: CALL_OW 380
// un := CreateHuman ;
67335: LD_ADDR_VAR 0 1
67339: PUSH
67340: CALL_OW 44
67344: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67345: LD_VAR 0 1
67349: PPUSH
67350: LD_INT 1
67352: PPUSH
67353: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67357: LD_INT 35
67359: PPUSH
67360: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67364: LD_VAR 0 1
67368: PPUSH
67369: LD_INT 22
67371: PUSH
67372: LD_OWVAR 2
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PPUSH
67381: CALL_OW 69
67385: PPUSH
67386: LD_VAR 0 1
67390: PPUSH
67391: CALL_OW 74
67395: PPUSH
67396: CALL_OW 115
// until IsDead ( un ) ;
67400: LD_VAR 0 1
67404: PPUSH
67405: CALL_OW 301
67409: IFFALSE 67357
// end ;
67411: PPOPN 1
67413: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67414: LD_EXP 38
67418: PUSH
67419: LD_EXP 78
67423: AND
67424: IFFALSE 67436
67426: GO 67428
67428: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67429: LD_STRING earthquake(getX(game), 0, 32)
67431: PPUSH
67432: CALL_OW 559
67436: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67437: LD_EXP 38
67441: PUSH
67442: LD_EXP 79
67446: AND
67447: IFFALSE 67538
67449: GO 67451
67451: DISABLE
67452: LD_INT 0
67454: PPUSH
// begin enable ;
67455: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67456: LD_ADDR_VAR 0 1
67460: PUSH
67461: LD_INT 22
67463: PUSH
67464: LD_OWVAR 2
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 21
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 33
67485: PUSH
67486: LD_INT 3
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: LIST
67497: PPUSH
67498: CALL_OW 69
67502: ST_TO_ADDR
// if not tmp then
67503: LD_VAR 0 1
67507: NOT
67508: IFFALSE 67512
// exit ;
67510: GO 67538
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67512: LD_VAR 0 1
67516: PUSH
67517: LD_INT 1
67519: PPUSH
67520: LD_VAR 0 1
67524: PPUSH
67525: CALL_OW 12
67529: ARRAY
67530: PPUSH
67531: LD_INT 1
67533: PPUSH
67534: CALL_OW 234
// end ;
67538: PPOPN 1
67540: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67541: LD_EXP 38
67545: PUSH
67546: LD_EXP 80
67550: AND
67551: IFFALSE 67692
67553: GO 67555
67555: DISABLE
67556: LD_INT 0
67558: PPUSH
67559: PPUSH
67560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67561: LD_ADDR_VAR 0 3
67565: PUSH
67566: LD_INT 22
67568: PUSH
67569: LD_OWVAR 2
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 25
67580: PUSH
67581: LD_INT 1
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PPUSH
67592: CALL_OW 69
67596: ST_TO_ADDR
// if not tmp then
67597: LD_VAR 0 3
67601: NOT
67602: IFFALSE 67606
// exit ;
67604: GO 67692
// un := tmp [ rand ( 1 , tmp ) ] ;
67606: LD_ADDR_VAR 0 2
67610: PUSH
67611: LD_VAR 0 3
67615: PUSH
67616: LD_INT 1
67618: PPUSH
67619: LD_VAR 0 3
67623: PPUSH
67624: CALL_OW 12
67628: ARRAY
67629: ST_TO_ADDR
// if Crawls ( un ) then
67630: LD_VAR 0 2
67634: PPUSH
67635: CALL_OW 318
67639: IFFALSE 67650
// ComWalk ( un ) ;
67641: LD_VAR 0 2
67645: PPUSH
67646: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
67650: LD_VAR 0 2
67654: PPUSH
67655: LD_INT 9
67657: PPUSH
67658: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
67662: LD_INT 28
67664: PPUSH
67665: LD_OWVAR 2
67669: PPUSH
67670: LD_INT 2
67672: PPUSH
67673: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
67677: LD_INT 29
67679: PPUSH
67680: LD_OWVAR 2
67684: PPUSH
67685: LD_INT 2
67687: PPUSH
67688: CALL_OW 322
// end ;
67692: PPOPN 3
67694: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
67695: LD_EXP 38
67699: PUSH
67700: LD_EXP 81
67704: AND
67705: IFFALSE 67816
67707: GO 67709
67709: DISABLE
67710: LD_INT 0
67712: PPUSH
67713: PPUSH
67714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67715: LD_ADDR_VAR 0 3
67719: PUSH
67720: LD_INT 22
67722: PUSH
67723: LD_OWVAR 2
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 25
67734: PUSH
67735: LD_INT 1
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PPUSH
67746: CALL_OW 69
67750: ST_TO_ADDR
// if not tmp then
67751: LD_VAR 0 3
67755: NOT
67756: IFFALSE 67760
// exit ;
67758: GO 67816
// un := tmp [ rand ( 1 , tmp ) ] ;
67760: LD_ADDR_VAR 0 2
67764: PUSH
67765: LD_VAR 0 3
67769: PUSH
67770: LD_INT 1
67772: PPUSH
67773: LD_VAR 0 3
67777: PPUSH
67778: CALL_OW 12
67782: ARRAY
67783: ST_TO_ADDR
// if Crawls ( un ) then
67784: LD_VAR 0 2
67788: PPUSH
67789: CALL_OW 318
67793: IFFALSE 67804
// ComWalk ( un ) ;
67795: LD_VAR 0 2
67799: PPUSH
67800: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67804: LD_VAR 0 2
67808: PPUSH
67809: LD_INT 8
67811: PPUSH
67812: CALL_OW 336
// end ;
67816: PPOPN 3
67818: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
67819: LD_EXP 38
67823: PUSH
67824: LD_EXP 82
67828: AND
67829: IFFALSE 67973
67831: GO 67833
67833: DISABLE
67834: LD_INT 0
67836: PPUSH
67837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
67838: LD_ADDR_VAR 0 2
67842: PUSH
67843: LD_INT 22
67845: PUSH
67846: LD_OWVAR 2
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 21
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 2
67867: PUSH
67868: LD_INT 34
67870: PUSH
67871: LD_INT 12
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 34
67880: PUSH
67881: LD_INT 51
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 34
67890: PUSH
67891: LD_INT 32
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: LIST
67908: PPUSH
67909: CALL_OW 69
67913: ST_TO_ADDR
// if not tmp then
67914: LD_VAR 0 2
67918: NOT
67919: IFFALSE 67923
// exit ;
67921: GO 67973
// for i in tmp do
67923: LD_ADDR_VAR 0 1
67927: PUSH
67928: LD_VAR 0 2
67932: PUSH
67933: FOR_IN
67934: IFFALSE 67971
// if GetCargo ( i , mat_artifact ) = 0 then
67936: LD_VAR 0 1
67940: PPUSH
67941: LD_INT 4
67943: PPUSH
67944: CALL_OW 289
67948: PUSH
67949: LD_INT 0
67951: EQUAL
67952: IFFALSE 67969
// SetCargo ( i , mat_siberit , 100 ) ;
67954: LD_VAR 0 1
67958: PPUSH
67959: LD_INT 3
67961: PPUSH
67962: LD_INT 100
67964: PPUSH
67965: CALL_OW 290
67969: GO 67933
67971: POP
67972: POP
// end ;
67973: PPOPN 2
67975: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
67976: LD_EXP 38
67980: PUSH
67981: LD_EXP 83
67985: AND
67986: IFFALSE 68169
67988: GO 67990
67990: DISABLE
67991: LD_INT 0
67993: PPUSH
67994: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67995: LD_ADDR_VAR 0 2
67999: PUSH
68000: LD_INT 22
68002: PUSH
68003: LD_OWVAR 2
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PPUSH
68012: CALL_OW 69
68016: ST_TO_ADDR
// if not tmp then
68017: LD_VAR 0 2
68021: NOT
68022: IFFALSE 68026
// exit ;
68024: GO 68169
// for i := 1 to 2 do
68026: LD_ADDR_VAR 0 1
68030: PUSH
68031: DOUBLE
68032: LD_INT 1
68034: DEC
68035: ST_TO_ADDR
68036: LD_INT 2
68038: PUSH
68039: FOR_TO
68040: IFFALSE 68167
// begin uc_side := your_side ;
68042: LD_ADDR_OWVAR 20
68046: PUSH
68047: LD_OWVAR 2
68051: ST_TO_ADDR
// uc_nation := nation_american ;
68052: LD_ADDR_OWVAR 21
68056: PUSH
68057: LD_INT 1
68059: ST_TO_ADDR
// vc_chassis := us_morphling ;
68060: LD_ADDR_OWVAR 37
68064: PUSH
68065: LD_INT 5
68067: ST_TO_ADDR
// vc_engine := engine_siberite ;
68068: LD_ADDR_OWVAR 39
68072: PUSH
68073: LD_INT 3
68075: ST_TO_ADDR
// vc_control := control_computer ;
68076: LD_ADDR_OWVAR 38
68080: PUSH
68081: LD_INT 3
68083: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68084: LD_ADDR_OWVAR 40
68088: PUSH
68089: LD_INT 10
68091: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68092: LD_VAR 0 2
68096: PUSH
68097: LD_INT 1
68099: ARRAY
68100: PPUSH
68101: CALL_OW 310
68105: NOT
68106: IFFALSE 68153
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68108: CALL_OW 45
68112: PPUSH
68113: LD_VAR 0 2
68117: PUSH
68118: LD_INT 1
68120: ARRAY
68121: PPUSH
68122: CALL_OW 250
68126: PPUSH
68127: LD_VAR 0 2
68131: PUSH
68132: LD_INT 1
68134: ARRAY
68135: PPUSH
68136: CALL_OW 251
68140: PPUSH
68141: LD_INT 12
68143: PPUSH
68144: LD_INT 1
68146: PPUSH
68147: CALL_OW 50
68151: GO 68165
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68153: CALL_OW 45
68157: PPUSH
68158: LD_INT 1
68160: PPUSH
68161: CALL_OW 51
// end ;
68165: GO 68039
68167: POP
68168: POP
// end ;
68169: PPOPN 2
68171: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68172: LD_EXP 38
68176: PUSH
68177: LD_EXP 84
68181: AND
68182: IFFALSE 68404
68184: GO 68186
68186: DISABLE
68187: LD_INT 0
68189: PPUSH
68190: PPUSH
68191: PPUSH
68192: PPUSH
68193: PPUSH
68194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68195: LD_ADDR_VAR 0 6
68199: PUSH
68200: LD_INT 22
68202: PUSH
68203: LD_OWVAR 2
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 21
68214: PUSH
68215: LD_INT 1
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 3
68224: PUSH
68225: LD_INT 23
68227: PUSH
68228: LD_INT 0
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: LIST
68243: PPUSH
68244: CALL_OW 69
68248: ST_TO_ADDR
// if not tmp then
68249: LD_VAR 0 6
68253: NOT
68254: IFFALSE 68258
// exit ;
68256: GO 68404
// s1 := rand ( 1 , 4 ) ;
68258: LD_ADDR_VAR 0 2
68262: PUSH
68263: LD_INT 1
68265: PPUSH
68266: LD_INT 4
68268: PPUSH
68269: CALL_OW 12
68273: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68274: LD_ADDR_VAR 0 4
68278: PUSH
68279: LD_VAR 0 6
68283: PUSH
68284: LD_INT 1
68286: ARRAY
68287: PPUSH
68288: LD_VAR 0 2
68292: PPUSH
68293: CALL_OW 259
68297: ST_TO_ADDR
// if s1 = 1 then
68298: LD_VAR 0 2
68302: PUSH
68303: LD_INT 1
68305: EQUAL
68306: IFFALSE 68326
// s2 := rand ( 2 , 4 ) else
68308: LD_ADDR_VAR 0 3
68312: PUSH
68313: LD_INT 2
68315: PPUSH
68316: LD_INT 4
68318: PPUSH
68319: CALL_OW 12
68323: ST_TO_ADDR
68324: GO 68334
// s2 := 1 ;
68326: LD_ADDR_VAR 0 3
68330: PUSH
68331: LD_INT 1
68333: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68334: LD_ADDR_VAR 0 5
68338: PUSH
68339: LD_VAR 0 6
68343: PUSH
68344: LD_INT 1
68346: ARRAY
68347: PPUSH
68348: LD_VAR 0 3
68352: PPUSH
68353: CALL_OW 259
68357: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68358: LD_VAR 0 6
68362: PUSH
68363: LD_INT 1
68365: ARRAY
68366: PPUSH
68367: LD_VAR 0 2
68371: PPUSH
68372: LD_VAR 0 5
68376: PPUSH
68377: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68381: LD_VAR 0 6
68385: PUSH
68386: LD_INT 1
68388: ARRAY
68389: PPUSH
68390: LD_VAR 0 3
68394: PPUSH
68395: LD_VAR 0 4
68399: PPUSH
68400: CALL_OW 237
// end ;
68404: PPOPN 6
68406: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68407: LD_EXP 38
68411: PUSH
68412: LD_EXP 85
68416: AND
68417: IFFALSE 68496
68419: GO 68421
68421: DISABLE
68422: LD_INT 0
68424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68425: LD_ADDR_VAR 0 1
68429: PUSH
68430: LD_INT 22
68432: PUSH
68433: LD_OWVAR 2
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 30
68444: PUSH
68445: LD_INT 3
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PPUSH
68456: CALL_OW 69
68460: ST_TO_ADDR
// if not tmp then
68461: LD_VAR 0 1
68465: NOT
68466: IFFALSE 68470
// exit ;
68468: GO 68496
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68470: LD_VAR 0 1
68474: PUSH
68475: LD_INT 1
68477: PPUSH
68478: LD_VAR 0 1
68482: PPUSH
68483: CALL_OW 12
68487: ARRAY
68488: PPUSH
68489: LD_INT 1
68491: PPUSH
68492: CALL_OW 234
// end ;
68496: PPOPN 1
68498: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68499: LD_EXP 38
68503: PUSH
68504: LD_EXP 86
68508: AND
68509: IFFALSE 68621
68511: GO 68513
68513: DISABLE
68514: LD_INT 0
68516: PPUSH
68517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68518: LD_ADDR_VAR 0 2
68522: PUSH
68523: LD_INT 22
68525: PUSH
68526: LD_OWVAR 2
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 2
68537: PUSH
68538: LD_INT 30
68540: PUSH
68541: LD_INT 27
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 30
68550: PUSH
68551: LD_INT 26
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 30
68560: PUSH
68561: LD_INT 28
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PPUSH
68578: CALL_OW 69
68582: ST_TO_ADDR
// if not tmp then
68583: LD_VAR 0 2
68587: NOT
68588: IFFALSE 68592
// exit ;
68590: GO 68621
// for i in tmp do
68592: LD_ADDR_VAR 0 1
68596: PUSH
68597: LD_VAR 0 2
68601: PUSH
68602: FOR_IN
68603: IFFALSE 68619
// SetLives ( i , 1 ) ;
68605: LD_VAR 0 1
68609: PPUSH
68610: LD_INT 1
68612: PPUSH
68613: CALL_OW 234
68617: GO 68602
68619: POP
68620: POP
// end ;
68621: PPOPN 2
68623: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
68624: LD_EXP 38
68628: PUSH
68629: LD_EXP 87
68633: AND
68634: IFFALSE 68921
68636: GO 68638
68638: DISABLE
68639: LD_INT 0
68641: PPUSH
68642: PPUSH
68643: PPUSH
// begin i := rand ( 1 , 7 ) ;
68644: LD_ADDR_VAR 0 1
68648: PUSH
68649: LD_INT 1
68651: PPUSH
68652: LD_INT 7
68654: PPUSH
68655: CALL_OW 12
68659: ST_TO_ADDR
// case i of 1 :
68660: LD_VAR 0 1
68664: PUSH
68665: LD_INT 1
68667: DOUBLE
68668: EQUAL
68669: IFTRUE 68673
68671: GO 68683
68673: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
68674: LD_STRING earthquake(getX(game), 0, 32)
68676: PPUSH
68677: CALL_OW 559
68681: GO 68921
68683: LD_INT 2
68685: DOUBLE
68686: EQUAL
68687: IFTRUE 68691
68689: GO 68705
68691: POP
// begin ToLua ( displayStucuk(); ) ;
68692: LD_STRING displayStucuk();
68694: PPUSH
68695: CALL_OW 559
// ResetFog ;
68699: CALL_OW 335
// end ; 3 :
68703: GO 68921
68705: LD_INT 3
68707: DOUBLE
68708: EQUAL
68709: IFTRUE 68713
68711: GO 68817
68713: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68714: LD_ADDR_VAR 0 2
68718: PUSH
68719: LD_INT 22
68721: PUSH
68722: LD_OWVAR 2
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 25
68733: PUSH
68734: LD_INT 1
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PPUSH
68745: CALL_OW 69
68749: ST_TO_ADDR
// if not tmp then
68750: LD_VAR 0 2
68754: NOT
68755: IFFALSE 68759
// exit ;
68757: GO 68921
// un := tmp [ rand ( 1 , tmp ) ] ;
68759: LD_ADDR_VAR 0 3
68763: PUSH
68764: LD_VAR 0 2
68768: PUSH
68769: LD_INT 1
68771: PPUSH
68772: LD_VAR 0 2
68776: PPUSH
68777: CALL_OW 12
68781: ARRAY
68782: ST_TO_ADDR
// if Crawls ( un ) then
68783: LD_VAR 0 3
68787: PPUSH
68788: CALL_OW 318
68792: IFFALSE 68803
// ComWalk ( un ) ;
68794: LD_VAR 0 3
68798: PPUSH
68799: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68803: LD_VAR 0 3
68807: PPUSH
68808: LD_INT 8
68810: PPUSH
68811: CALL_OW 336
// end ; 4 :
68815: GO 68921
68817: LD_INT 4
68819: DOUBLE
68820: EQUAL
68821: IFTRUE 68825
68823: GO 68899
68825: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68826: LD_ADDR_VAR 0 2
68830: PUSH
68831: LD_INT 22
68833: PUSH
68834: LD_OWVAR 2
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 30
68845: PUSH
68846: LD_INT 29
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PPUSH
68857: CALL_OW 69
68861: ST_TO_ADDR
// if not tmp then
68862: LD_VAR 0 2
68866: NOT
68867: IFFALSE 68871
// exit ;
68869: GO 68921
// CenterNowOnUnits ( tmp [ 1 ] ) ;
68871: LD_VAR 0 2
68875: PUSH
68876: LD_INT 1
68878: ARRAY
68879: PPUSH
68880: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
68884: LD_VAR 0 2
68888: PUSH
68889: LD_INT 1
68891: ARRAY
68892: PPUSH
68893: CALL_OW 65
// end ; 5 .. 7 :
68897: GO 68921
68899: LD_INT 5
68901: DOUBLE
68902: GREATEREQUAL
68903: IFFALSE 68911
68905: LD_INT 7
68907: DOUBLE
68908: LESSEQUAL
68909: IFTRUE 68913
68911: GO 68920
68913: POP
// StreamSibBomb ; end ;
68914: CALL 65158 0 0
68918: GO 68921
68920: POP
// end ;
68921: PPOPN 3
68923: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
68924: LD_EXP 38
68928: PUSH
68929: LD_EXP 88
68933: AND
68934: IFFALSE 69090
68936: GO 68938
68938: DISABLE
68939: LD_INT 0
68941: PPUSH
68942: PPUSH
68943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
68944: LD_ADDR_VAR 0 2
68948: PUSH
68949: LD_INT 81
68951: PUSH
68952: LD_OWVAR 2
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 2
68963: PUSH
68964: LD_INT 21
68966: PUSH
68967: LD_INT 1
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 21
68976: PUSH
68977: LD_INT 2
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: LIST
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PPUSH
68993: CALL_OW 69
68997: ST_TO_ADDR
// if not tmp then
68998: LD_VAR 0 2
69002: NOT
69003: IFFALSE 69007
// exit ;
69005: GO 69090
// p := 0 ;
69007: LD_ADDR_VAR 0 3
69011: PUSH
69012: LD_INT 0
69014: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69015: LD_INT 35
69017: PPUSH
69018: CALL_OW 67
// p := p + 1 ;
69022: LD_ADDR_VAR 0 3
69026: PUSH
69027: LD_VAR 0 3
69031: PUSH
69032: LD_INT 1
69034: PLUS
69035: ST_TO_ADDR
// for i in tmp do
69036: LD_ADDR_VAR 0 1
69040: PUSH
69041: LD_VAR 0 2
69045: PUSH
69046: FOR_IN
69047: IFFALSE 69078
// if GetLives ( i ) < 1000 then
69049: LD_VAR 0 1
69053: PPUSH
69054: CALL_OW 256
69058: PUSH
69059: LD_INT 1000
69061: LESS
69062: IFFALSE 69076
// SetLives ( i , 1000 ) ;
69064: LD_VAR 0 1
69068: PPUSH
69069: LD_INT 1000
69071: PPUSH
69072: CALL_OW 234
69076: GO 69046
69078: POP
69079: POP
// until p > 20 ;
69080: LD_VAR 0 3
69084: PUSH
69085: LD_INT 20
69087: GREATER
69088: IFFALSE 69015
// end ;
69090: PPOPN 3
69092: END
// every 0 0$1 trigger StreamModeActive and sTime do
69093: LD_EXP 38
69097: PUSH
69098: LD_EXP 89
69102: AND
69103: IFFALSE 69138
69105: GO 69107
69107: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69108: LD_INT 28
69110: PPUSH
69111: LD_OWVAR 2
69115: PPUSH
69116: LD_INT 2
69118: PPUSH
69119: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69123: LD_INT 30
69125: PPUSH
69126: LD_OWVAR 2
69130: PPUSH
69131: LD_INT 2
69133: PPUSH
69134: CALL_OW 322
// end ;
69138: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69139: LD_EXP 38
69143: PUSH
69144: LD_EXP 90
69148: AND
69149: IFFALSE 69270
69151: GO 69153
69153: DISABLE
69154: LD_INT 0
69156: PPUSH
69157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69158: LD_ADDR_VAR 0 2
69162: PUSH
69163: LD_INT 22
69165: PUSH
69166: LD_OWVAR 2
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 21
69177: PUSH
69178: LD_INT 1
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 3
69187: PUSH
69188: LD_INT 23
69190: PUSH
69191: LD_INT 0
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: LIST
69206: PPUSH
69207: CALL_OW 69
69211: ST_TO_ADDR
// if not tmp then
69212: LD_VAR 0 2
69216: NOT
69217: IFFALSE 69221
// exit ;
69219: GO 69270
// for i in tmp do
69221: LD_ADDR_VAR 0 1
69225: PUSH
69226: LD_VAR 0 2
69230: PUSH
69231: FOR_IN
69232: IFFALSE 69268
// begin if Crawls ( i ) then
69234: LD_VAR 0 1
69238: PPUSH
69239: CALL_OW 318
69243: IFFALSE 69254
// ComWalk ( i ) ;
69245: LD_VAR 0 1
69249: PPUSH
69250: CALL_OW 138
// SetClass ( i , 2 ) ;
69254: LD_VAR 0 1
69258: PPUSH
69259: LD_INT 2
69261: PPUSH
69262: CALL_OW 336
// end ;
69266: GO 69231
69268: POP
69269: POP
// end ;
69270: PPOPN 2
69272: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69273: LD_EXP 38
69277: PUSH
69278: LD_EXP 91
69282: AND
69283: IFFALSE 69571
69285: GO 69287
69287: DISABLE
69288: LD_INT 0
69290: PPUSH
69291: PPUSH
69292: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69293: LD_OWVAR 2
69297: PPUSH
69298: LD_INT 9
69300: PPUSH
69301: LD_INT 1
69303: PPUSH
69304: LD_INT 1
69306: PPUSH
69307: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69311: LD_INT 9
69313: PPUSH
69314: LD_OWVAR 2
69318: PPUSH
69319: CALL_OW 343
// uc_side := 9 ;
69323: LD_ADDR_OWVAR 20
69327: PUSH
69328: LD_INT 9
69330: ST_TO_ADDR
// uc_nation := 2 ;
69331: LD_ADDR_OWVAR 21
69335: PUSH
69336: LD_INT 2
69338: ST_TO_ADDR
// hc_name := Dark Warrior ;
69339: LD_ADDR_OWVAR 26
69343: PUSH
69344: LD_STRING Dark Warrior
69346: ST_TO_ADDR
// hc_gallery :=  ;
69347: LD_ADDR_OWVAR 33
69351: PUSH
69352: LD_STRING 
69354: ST_TO_ADDR
// hc_noskilllimit := true ;
69355: LD_ADDR_OWVAR 76
69359: PUSH
69360: LD_INT 1
69362: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69363: LD_ADDR_OWVAR 31
69367: PUSH
69368: LD_INT 30
69370: PUSH
69371: LD_INT 30
69373: PUSH
69374: LD_INT 30
69376: PUSH
69377: LD_INT 30
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: ST_TO_ADDR
// un := CreateHuman ;
69386: LD_ADDR_VAR 0 3
69390: PUSH
69391: CALL_OW 44
69395: ST_TO_ADDR
// hc_noskilllimit := false ;
69396: LD_ADDR_OWVAR 76
69400: PUSH
69401: LD_INT 0
69403: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69404: LD_VAR 0 3
69408: PPUSH
69409: LD_INT 1
69411: PPUSH
69412: CALL_OW 51
// ToLua ( playRanger() ) ;
69416: LD_STRING playRanger()
69418: PPUSH
69419: CALL_OW 559
// p := 0 ;
69423: LD_ADDR_VAR 0 2
69427: PUSH
69428: LD_INT 0
69430: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69431: LD_INT 35
69433: PPUSH
69434: CALL_OW 67
// p := p + 1 ;
69438: LD_ADDR_VAR 0 2
69442: PUSH
69443: LD_VAR 0 2
69447: PUSH
69448: LD_INT 1
69450: PLUS
69451: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69452: LD_VAR 0 3
69456: PPUSH
69457: CALL_OW 256
69461: PUSH
69462: LD_INT 1000
69464: LESS
69465: IFFALSE 69479
// SetLives ( un , 1000 ) ;
69467: LD_VAR 0 3
69471: PPUSH
69472: LD_INT 1000
69474: PPUSH
69475: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69479: LD_VAR 0 3
69483: PPUSH
69484: LD_INT 81
69486: PUSH
69487: LD_OWVAR 2
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 91
69498: PUSH
69499: LD_VAR 0 3
69503: PUSH
69504: LD_INT 30
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: LIST
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PPUSH
69516: CALL_OW 69
69520: PPUSH
69521: LD_VAR 0 3
69525: PPUSH
69526: CALL_OW 74
69530: PPUSH
69531: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
69535: LD_VAR 0 2
69539: PUSH
69540: LD_INT 80
69542: GREATER
69543: PUSH
69544: LD_VAR 0 3
69548: PPUSH
69549: CALL_OW 301
69553: OR
69554: IFFALSE 69431
// if un then
69556: LD_VAR 0 3
69560: IFFALSE 69571
// RemoveUnit ( un ) ;
69562: LD_VAR 0 3
69566: PPUSH
69567: CALL_OW 64
// end ;
69571: PPOPN 3
69573: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
69574: LD_EXP 92
69578: IFFALSE 69694
69580: GO 69582
69582: DISABLE
69583: LD_INT 0
69585: PPUSH
69586: PPUSH
69587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69588: LD_ADDR_VAR 0 2
69592: PUSH
69593: LD_INT 81
69595: PUSH
69596: LD_OWVAR 2
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 21
69607: PUSH
69608: LD_INT 1
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PPUSH
69619: CALL_OW 69
69623: ST_TO_ADDR
// ToLua ( playComputer() ) ;
69624: LD_STRING playComputer()
69626: PPUSH
69627: CALL_OW 559
// if not tmp then
69631: LD_VAR 0 2
69635: NOT
69636: IFFALSE 69640
// exit ;
69638: GO 69694
// for i in tmp do
69640: LD_ADDR_VAR 0 1
69644: PUSH
69645: LD_VAR 0 2
69649: PUSH
69650: FOR_IN
69651: IFFALSE 69692
// for j := 1 to 4 do
69653: LD_ADDR_VAR 0 3
69657: PUSH
69658: DOUBLE
69659: LD_INT 1
69661: DEC
69662: ST_TO_ADDR
69663: LD_INT 4
69665: PUSH
69666: FOR_TO
69667: IFFALSE 69688
// SetSkill ( i , j , 10 ) ;
69669: LD_VAR 0 1
69673: PPUSH
69674: LD_VAR 0 3
69678: PPUSH
69679: LD_INT 10
69681: PPUSH
69682: CALL_OW 237
69686: GO 69666
69688: POP
69689: POP
69690: GO 69650
69692: POP
69693: POP
// end ;
69694: PPOPN 3
69696: END
// every 0 0$1 trigger s30 do var i , tmp ;
69697: LD_EXP 93
69701: IFFALSE 69770
69703: GO 69705
69705: DISABLE
69706: LD_INT 0
69708: PPUSH
69709: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69710: LD_ADDR_VAR 0 2
69714: PUSH
69715: LD_INT 22
69717: PUSH
69718: LD_OWVAR 2
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PPUSH
69727: CALL_OW 69
69731: ST_TO_ADDR
// if not tmp then
69732: LD_VAR 0 2
69736: NOT
69737: IFFALSE 69741
// exit ;
69739: GO 69770
// for i in tmp do
69741: LD_ADDR_VAR 0 1
69745: PUSH
69746: LD_VAR 0 2
69750: PUSH
69751: FOR_IN
69752: IFFALSE 69768
// SetLives ( i , 300 ) ;
69754: LD_VAR 0 1
69758: PPUSH
69759: LD_INT 300
69761: PPUSH
69762: CALL_OW 234
69766: GO 69751
69768: POP
69769: POP
// end ;
69770: PPOPN 2
69772: END
// every 0 0$1 trigger s60 do var i , tmp ;
69773: LD_EXP 94
69777: IFFALSE 69846
69779: GO 69781
69781: DISABLE
69782: LD_INT 0
69784: PPUSH
69785: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69786: LD_ADDR_VAR 0 2
69790: PUSH
69791: LD_INT 22
69793: PUSH
69794: LD_OWVAR 2
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PPUSH
69803: CALL_OW 69
69807: ST_TO_ADDR
// if not tmp then
69808: LD_VAR 0 2
69812: NOT
69813: IFFALSE 69817
// exit ;
69815: GO 69846
// for i in tmp do
69817: LD_ADDR_VAR 0 1
69821: PUSH
69822: LD_VAR 0 2
69826: PUSH
69827: FOR_IN
69828: IFFALSE 69844
// SetLives ( i , 600 ) ;
69830: LD_VAR 0 1
69834: PPUSH
69835: LD_INT 600
69837: PPUSH
69838: CALL_OW 234
69842: GO 69827
69844: POP
69845: POP
// end ;
69846: PPOPN 2
69848: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69849: LD_INT 0
69851: PPUSH
// case cmd of 301 :
69852: LD_VAR 0 1
69856: PUSH
69857: LD_INT 301
69859: DOUBLE
69860: EQUAL
69861: IFTRUE 69865
69863: GO 69897
69865: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
69866: LD_VAR 0 6
69870: PPUSH
69871: LD_VAR 0 7
69875: PPUSH
69876: LD_VAR 0 8
69880: PPUSH
69881: LD_VAR 0 4
69885: PPUSH
69886: LD_VAR 0 5
69890: PPUSH
69891: CALL 71106 0 5
69895: GO 70018
69897: LD_INT 302
69899: DOUBLE
69900: EQUAL
69901: IFTRUE 69905
69903: GO 69942
69905: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
69906: LD_VAR 0 6
69910: PPUSH
69911: LD_VAR 0 7
69915: PPUSH
69916: LD_VAR 0 8
69920: PPUSH
69921: LD_VAR 0 9
69925: PPUSH
69926: LD_VAR 0 4
69930: PPUSH
69931: LD_VAR 0 5
69935: PPUSH
69936: CALL 71197 0 6
69940: GO 70018
69942: LD_INT 303
69944: DOUBLE
69945: EQUAL
69946: IFTRUE 69950
69948: GO 69987
69950: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
69951: LD_VAR 0 6
69955: PPUSH
69956: LD_VAR 0 7
69960: PPUSH
69961: LD_VAR 0 8
69965: PPUSH
69966: LD_VAR 0 9
69970: PPUSH
69971: LD_VAR 0 4
69975: PPUSH
69976: LD_VAR 0 5
69980: PPUSH
69981: CALL 70023 0 6
69985: GO 70018
69987: LD_INT 304
69989: DOUBLE
69990: EQUAL
69991: IFTRUE 69995
69993: GO 70017
69995: POP
// hHackTeleport ( unit , x , y ) ; end ;
69996: LD_VAR 0 2
70000: PPUSH
70001: LD_VAR 0 4
70005: PPUSH
70006: LD_VAR 0 5
70010: PPUSH
70011: CALL 71790 0 3
70015: GO 70018
70017: POP
// end ;
70018: LD_VAR 0 12
70022: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70023: LD_INT 0
70025: PPUSH
70026: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70027: LD_VAR 0 1
70031: PUSH
70032: LD_INT 1
70034: LESS
70035: PUSH
70036: LD_VAR 0 1
70040: PUSH
70041: LD_INT 3
70043: GREATER
70044: OR
70045: PUSH
70046: LD_VAR 0 5
70050: PPUSH
70051: LD_VAR 0 6
70055: PPUSH
70056: CALL_OW 428
70060: OR
70061: IFFALSE 70065
// exit ;
70063: GO 70793
// uc_side := your_side ;
70065: LD_ADDR_OWVAR 20
70069: PUSH
70070: LD_OWVAR 2
70074: ST_TO_ADDR
// uc_nation := nation ;
70075: LD_ADDR_OWVAR 21
70079: PUSH
70080: LD_VAR 0 1
70084: ST_TO_ADDR
// bc_level = 1 ;
70085: LD_ADDR_OWVAR 43
70089: PUSH
70090: LD_INT 1
70092: ST_TO_ADDR
// case btype of 1 :
70093: LD_VAR 0 2
70097: PUSH
70098: LD_INT 1
70100: DOUBLE
70101: EQUAL
70102: IFTRUE 70106
70104: GO 70117
70106: POP
// bc_type := b_depot ; 2 :
70107: LD_ADDR_OWVAR 42
70111: PUSH
70112: LD_INT 0
70114: ST_TO_ADDR
70115: GO 70737
70117: LD_INT 2
70119: DOUBLE
70120: EQUAL
70121: IFTRUE 70125
70123: GO 70136
70125: POP
// bc_type := b_warehouse ; 3 :
70126: LD_ADDR_OWVAR 42
70130: PUSH
70131: LD_INT 1
70133: ST_TO_ADDR
70134: GO 70737
70136: LD_INT 3
70138: DOUBLE
70139: EQUAL
70140: IFTRUE 70144
70142: GO 70155
70144: POP
// bc_type := b_lab ; 4 .. 9 :
70145: LD_ADDR_OWVAR 42
70149: PUSH
70150: LD_INT 6
70152: ST_TO_ADDR
70153: GO 70737
70155: LD_INT 4
70157: DOUBLE
70158: GREATEREQUAL
70159: IFFALSE 70167
70161: LD_INT 9
70163: DOUBLE
70164: LESSEQUAL
70165: IFTRUE 70169
70167: GO 70229
70169: POP
// begin bc_type := b_lab_half ;
70170: LD_ADDR_OWVAR 42
70174: PUSH
70175: LD_INT 7
70177: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70178: LD_ADDR_OWVAR 44
70182: PUSH
70183: LD_INT 10
70185: PUSH
70186: LD_INT 11
70188: PUSH
70189: LD_INT 12
70191: PUSH
70192: LD_INT 15
70194: PUSH
70195: LD_INT 14
70197: PUSH
70198: LD_INT 13
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: PUSH
70209: LD_VAR 0 2
70213: PUSH
70214: LD_INT 3
70216: MINUS
70217: ARRAY
70218: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
70219: LD_ADDR_OWVAR 45
70223: PUSH
70224: LD_INT 9
70226: ST_TO_ADDR
// end ; 10 .. 13 :
70227: GO 70737
70229: LD_INT 10
70231: DOUBLE
70232: GREATEREQUAL
70233: IFFALSE 70241
70235: LD_INT 13
70237: DOUBLE
70238: LESSEQUAL
70239: IFTRUE 70243
70241: GO 70320
70243: POP
// begin bc_type := b_lab_full ;
70244: LD_ADDR_OWVAR 42
70248: PUSH
70249: LD_INT 8
70251: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70252: LD_ADDR_OWVAR 44
70256: PUSH
70257: LD_INT 10
70259: PUSH
70260: LD_INT 12
70262: PUSH
70263: LD_INT 14
70265: PUSH
70266: LD_INT 13
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: PUSH
70275: LD_VAR 0 2
70279: PUSH
70280: LD_INT 9
70282: MINUS
70283: ARRAY
70284: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70285: LD_ADDR_OWVAR 45
70289: PUSH
70290: LD_INT 11
70292: PUSH
70293: LD_INT 15
70295: PUSH
70296: LD_INT 12
70298: PUSH
70299: LD_INT 15
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: PUSH
70308: LD_VAR 0 2
70312: PUSH
70313: LD_INT 9
70315: MINUS
70316: ARRAY
70317: ST_TO_ADDR
// end ; 14 :
70318: GO 70737
70320: LD_INT 14
70322: DOUBLE
70323: EQUAL
70324: IFTRUE 70328
70326: GO 70339
70328: POP
// bc_type := b_workshop ; 15 :
70329: LD_ADDR_OWVAR 42
70333: PUSH
70334: LD_INT 2
70336: ST_TO_ADDR
70337: GO 70737
70339: LD_INT 15
70341: DOUBLE
70342: EQUAL
70343: IFTRUE 70347
70345: GO 70358
70347: POP
// bc_type := b_factory ; 16 :
70348: LD_ADDR_OWVAR 42
70352: PUSH
70353: LD_INT 3
70355: ST_TO_ADDR
70356: GO 70737
70358: LD_INT 16
70360: DOUBLE
70361: EQUAL
70362: IFTRUE 70366
70364: GO 70377
70366: POP
// bc_type := b_ext_gun ; 17 :
70367: LD_ADDR_OWVAR 42
70371: PUSH
70372: LD_INT 17
70374: ST_TO_ADDR
70375: GO 70737
70377: LD_INT 17
70379: DOUBLE
70380: EQUAL
70381: IFTRUE 70385
70383: GO 70413
70385: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70386: LD_ADDR_OWVAR 42
70390: PUSH
70391: LD_INT 19
70393: PUSH
70394: LD_INT 23
70396: PUSH
70397: LD_INT 19
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: LIST
70404: PUSH
70405: LD_VAR 0 1
70409: ARRAY
70410: ST_TO_ADDR
70411: GO 70737
70413: LD_INT 18
70415: DOUBLE
70416: EQUAL
70417: IFTRUE 70421
70419: GO 70432
70421: POP
// bc_type := b_ext_radar ; 19 :
70422: LD_ADDR_OWVAR 42
70426: PUSH
70427: LD_INT 20
70429: ST_TO_ADDR
70430: GO 70737
70432: LD_INT 19
70434: DOUBLE
70435: EQUAL
70436: IFTRUE 70440
70438: GO 70451
70440: POP
// bc_type := b_ext_radio ; 20 :
70441: LD_ADDR_OWVAR 42
70445: PUSH
70446: LD_INT 22
70448: ST_TO_ADDR
70449: GO 70737
70451: LD_INT 20
70453: DOUBLE
70454: EQUAL
70455: IFTRUE 70459
70457: GO 70470
70459: POP
// bc_type := b_ext_siberium ; 21 :
70460: LD_ADDR_OWVAR 42
70464: PUSH
70465: LD_INT 21
70467: ST_TO_ADDR
70468: GO 70737
70470: LD_INT 21
70472: DOUBLE
70473: EQUAL
70474: IFTRUE 70478
70476: GO 70489
70478: POP
// bc_type := b_ext_computer ; 22 :
70479: LD_ADDR_OWVAR 42
70483: PUSH
70484: LD_INT 24
70486: ST_TO_ADDR
70487: GO 70737
70489: LD_INT 22
70491: DOUBLE
70492: EQUAL
70493: IFTRUE 70497
70495: GO 70508
70497: POP
// bc_type := b_ext_track ; 23 :
70498: LD_ADDR_OWVAR 42
70502: PUSH
70503: LD_INT 16
70505: ST_TO_ADDR
70506: GO 70737
70508: LD_INT 23
70510: DOUBLE
70511: EQUAL
70512: IFTRUE 70516
70514: GO 70527
70516: POP
// bc_type := b_ext_laser ; 24 :
70517: LD_ADDR_OWVAR 42
70521: PUSH
70522: LD_INT 25
70524: ST_TO_ADDR
70525: GO 70737
70527: LD_INT 24
70529: DOUBLE
70530: EQUAL
70531: IFTRUE 70535
70533: GO 70546
70535: POP
// bc_type := b_control_tower ; 25 :
70536: LD_ADDR_OWVAR 42
70540: PUSH
70541: LD_INT 36
70543: ST_TO_ADDR
70544: GO 70737
70546: LD_INT 25
70548: DOUBLE
70549: EQUAL
70550: IFTRUE 70554
70552: GO 70565
70554: POP
// bc_type := b_breastwork ; 26 :
70555: LD_ADDR_OWVAR 42
70559: PUSH
70560: LD_INT 31
70562: ST_TO_ADDR
70563: GO 70737
70565: LD_INT 26
70567: DOUBLE
70568: EQUAL
70569: IFTRUE 70573
70571: GO 70584
70573: POP
// bc_type := b_bunker ; 27 :
70574: LD_ADDR_OWVAR 42
70578: PUSH
70579: LD_INT 32
70581: ST_TO_ADDR
70582: GO 70737
70584: LD_INT 27
70586: DOUBLE
70587: EQUAL
70588: IFTRUE 70592
70590: GO 70603
70592: POP
// bc_type := b_turret ; 28 :
70593: LD_ADDR_OWVAR 42
70597: PUSH
70598: LD_INT 33
70600: ST_TO_ADDR
70601: GO 70737
70603: LD_INT 28
70605: DOUBLE
70606: EQUAL
70607: IFTRUE 70611
70609: GO 70622
70611: POP
// bc_type := b_armoury ; 29 :
70612: LD_ADDR_OWVAR 42
70616: PUSH
70617: LD_INT 4
70619: ST_TO_ADDR
70620: GO 70737
70622: LD_INT 29
70624: DOUBLE
70625: EQUAL
70626: IFTRUE 70630
70628: GO 70641
70630: POP
// bc_type := b_barracks ; 30 :
70631: LD_ADDR_OWVAR 42
70635: PUSH
70636: LD_INT 5
70638: ST_TO_ADDR
70639: GO 70737
70641: LD_INT 30
70643: DOUBLE
70644: EQUAL
70645: IFTRUE 70649
70647: GO 70660
70649: POP
// bc_type := b_solar_power ; 31 :
70650: LD_ADDR_OWVAR 42
70654: PUSH
70655: LD_INT 27
70657: ST_TO_ADDR
70658: GO 70737
70660: LD_INT 31
70662: DOUBLE
70663: EQUAL
70664: IFTRUE 70668
70666: GO 70679
70668: POP
// bc_type := b_oil_power ; 32 :
70669: LD_ADDR_OWVAR 42
70673: PUSH
70674: LD_INT 26
70676: ST_TO_ADDR
70677: GO 70737
70679: LD_INT 32
70681: DOUBLE
70682: EQUAL
70683: IFTRUE 70687
70685: GO 70698
70687: POP
// bc_type := b_siberite_power ; 33 :
70688: LD_ADDR_OWVAR 42
70692: PUSH
70693: LD_INT 28
70695: ST_TO_ADDR
70696: GO 70737
70698: LD_INT 33
70700: DOUBLE
70701: EQUAL
70702: IFTRUE 70706
70704: GO 70717
70706: POP
// bc_type := b_oil_mine ; 34 :
70707: LD_ADDR_OWVAR 42
70711: PUSH
70712: LD_INT 29
70714: ST_TO_ADDR
70715: GO 70737
70717: LD_INT 34
70719: DOUBLE
70720: EQUAL
70721: IFTRUE 70725
70723: GO 70736
70725: POP
// bc_type := b_siberite_mine ; end ;
70726: LD_ADDR_OWVAR 42
70730: PUSH
70731: LD_INT 30
70733: ST_TO_ADDR
70734: GO 70737
70736: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70737: LD_ADDR_VAR 0 8
70741: PUSH
70742: LD_VAR 0 5
70746: PPUSH
70747: LD_VAR 0 6
70751: PPUSH
70752: LD_VAR 0 3
70756: PPUSH
70757: CALL_OW 47
70761: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70762: LD_OWVAR 42
70766: PUSH
70767: LD_INT 32
70769: PUSH
70770: LD_INT 33
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: IN
70777: IFFALSE 70793
// PlaceWeaponTurret ( b , weapon ) ;
70779: LD_VAR 0 8
70783: PPUSH
70784: LD_VAR 0 4
70788: PPUSH
70789: CALL_OW 431
// end ;
70793: LD_VAR 0 7
70797: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70798: LD_INT 0
70800: PPUSH
70801: PPUSH
70802: PPUSH
70803: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70804: LD_ADDR_VAR 0 4
70808: PUSH
70809: LD_INT 22
70811: PUSH
70812: LD_OWVAR 2
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 2
70823: PUSH
70824: LD_INT 30
70826: PUSH
70827: LD_INT 0
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 30
70836: PUSH
70837: LD_INT 1
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: LIST
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PPUSH
70853: CALL_OW 69
70857: ST_TO_ADDR
// if not tmp then
70858: LD_VAR 0 4
70862: NOT
70863: IFFALSE 70867
// exit ;
70865: GO 70926
// for i in tmp do
70867: LD_ADDR_VAR 0 2
70871: PUSH
70872: LD_VAR 0 4
70876: PUSH
70877: FOR_IN
70878: IFFALSE 70924
// for j = 1 to 3 do
70880: LD_ADDR_VAR 0 3
70884: PUSH
70885: DOUBLE
70886: LD_INT 1
70888: DEC
70889: ST_TO_ADDR
70890: LD_INT 3
70892: PUSH
70893: FOR_TO
70894: IFFALSE 70920
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70896: LD_VAR 0 2
70900: PPUSH
70901: CALL_OW 274
70905: PPUSH
70906: LD_VAR 0 3
70910: PPUSH
70911: LD_INT 99999
70913: PPUSH
70914: CALL_OW 277
70918: GO 70893
70920: POP
70921: POP
70922: GO 70877
70924: POP
70925: POP
// end ;
70926: LD_VAR 0 1
70930: RET
// export function hHackSetLevel10 ; var i , j ; begin
70931: LD_INT 0
70933: PPUSH
70934: PPUSH
70935: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70936: LD_ADDR_VAR 0 2
70940: PUSH
70941: LD_INT 21
70943: PUSH
70944: LD_INT 1
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PPUSH
70951: CALL_OW 69
70955: PUSH
70956: FOR_IN
70957: IFFALSE 71009
// if IsSelected ( i ) then
70959: LD_VAR 0 2
70963: PPUSH
70964: CALL_OW 306
70968: IFFALSE 71007
// begin for j := 1 to 4 do
70970: LD_ADDR_VAR 0 3
70974: PUSH
70975: DOUBLE
70976: LD_INT 1
70978: DEC
70979: ST_TO_ADDR
70980: LD_INT 4
70982: PUSH
70983: FOR_TO
70984: IFFALSE 71005
// SetSkill ( i , j , 10 ) ;
70986: LD_VAR 0 2
70990: PPUSH
70991: LD_VAR 0 3
70995: PPUSH
70996: LD_INT 10
70998: PPUSH
70999: CALL_OW 237
71003: GO 70983
71005: POP
71006: POP
// end ;
71007: GO 70956
71009: POP
71010: POP
// end ;
71011: LD_VAR 0 1
71015: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71016: LD_INT 0
71018: PPUSH
71019: PPUSH
71020: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71021: LD_ADDR_VAR 0 2
71025: PUSH
71026: LD_INT 22
71028: PUSH
71029: LD_OWVAR 2
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 21
71040: PUSH
71041: LD_INT 1
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PPUSH
71052: CALL_OW 69
71056: PUSH
71057: FOR_IN
71058: IFFALSE 71099
// begin for j := 1 to 4 do
71060: LD_ADDR_VAR 0 3
71064: PUSH
71065: DOUBLE
71066: LD_INT 1
71068: DEC
71069: ST_TO_ADDR
71070: LD_INT 4
71072: PUSH
71073: FOR_TO
71074: IFFALSE 71095
// SetSkill ( i , j , 10 ) ;
71076: LD_VAR 0 2
71080: PPUSH
71081: LD_VAR 0 3
71085: PPUSH
71086: LD_INT 10
71088: PPUSH
71089: CALL_OW 237
71093: GO 71073
71095: POP
71096: POP
// end ;
71097: GO 71057
71099: POP
71100: POP
// end ;
71101: LD_VAR 0 1
71105: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71106: LD_INT 0
71108: PPUSH
// uc_side := your_side ;
71109: LD_ADDR_OWVAR 20
71113: PUSH
71114: LD_OWVAR 2
71118: ST_TO_ADDR
// uc_nation := nation ;
71119: LD_ADDR_OWVAR 21
71123: PUSH
71124: LD_VAR 0 1
71128: ST_TO_ADDR
// InitHc ;
71129: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71133: LD_INT 0
71135: PPUSH
71136: LD_VAR 0 2
71140: PPUSH
71141: LD_VAR 0 3
71145: PPUSH
71146: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71150: LD_VAR 0 4
71154: PPUSH
71155: LD_VAR 0 5
71159: PPUSH
71160: CALL_OW 428
71164: PUSH
71165: LD_INT 0
71167: EQUAL
71168: IFFALSE 71192
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71170: CALL_OW 44
71174: PPUSH
71175: LD_VAR 0 4
71179: PPUSH
71180: LD_VAR 0 5
71184: PPUSH
71185: LD_INT 1
71187: PPUSH
71188: CALL_OW 48
// end ;
71192: LD_VAR 0 6
71196: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71197: LD_INT 0
71199: PPUSH
71200: PPUSH
// uc_side := your_side ;
71201: LD_ADDR_OWVAR 20
71205: PUSH
71206: LD_OWVAR 2
71210: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71211: LD_VAR 0 1
71215: PUSH
71216: LD_INT 1
71218: PUSH
71219: LD_INT 2
71221: PUSH
71222: LD_INT 3
71224: PUSH
71225: LD_INT 4
71227: PUSH
71228: LD_INT 5
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: IN
71238: IFFALSE 71250
// uc_nation := nation_american else
71240: LD_ADDR_OWVAR 21
71244: PUSH
71245: LD_INT 1
71247: ST_TO_ADDR
71248: GO 71293
// if chassis in [ 11 , 12 , 13 , 14 ] then
71250: LD_VAR 0 1
71254: PUSH
71255: LD_INT 11
71257: PUSH
71258: LD_INT 12
71260: PUSH
71261: LD_INT 13
71263: PUSH
71264: LD_INT 14
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: IN
71273: IFFALSE 71285
// uc_nation := nation_arabian else
71275: LD_ADDR_OWVAR 21
71279: PUSH
71280: LD_INT 2
71282: ST_TO_ADDR
71283: GO 71293
// uc_nation := nation_russian ;
71285: LD_ADDR_OWVAR 21
71289: PUSH
71290: LD_INT 3
71292: ST_TO_ADDR
// vc_chassis := chassis ;
71293: LD_ADDR_OWVAR 37
71297: PUSH
71298: LD_VAR 0 1
71302: ST_TO_ADDR
// vc_engine := engine ;
71303: LD_ADDR_OWVAR 39
71307: PUSH
71308: LD_VAR 0 2
71312: ST_TO_ADDR
// vc_control := control ;
71313: LD_ADDR_OWVAR 38
71317: PUSH
71318: LD_VAR 0 3
71322: ST_TO_ADDR
// vc_weapon := weapon ;
71323: LD_ADDR_OWVAR 40
71327: PUSH
71328: LD_VAR 0 4
71332: ST_TO_ADDR
// un := CreateVehicle ;
71333: LD_ADDR_VAR 0 8
71337: PUSH
71338: CALL_OW 45
71342: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71343: LD_VAR 0 8
71347: PPUSH
71348: LD_INT 0
71350: PPUSH
71351: LD_INT 5
71353: PPUSH
71354: CALL_OW 12
71358: PPUSH
71359: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71363: LD_VAR 0 8
71367: PPUSH
71368: LD_VAR 0 5
71372: PPUSH
71373: LD_VAR 0 6
71377: PPUSH
71378: LD_INT 1
71380: PPUSH
71381: CALL_OW 48
// end ;
71385: LD_VAR 0 7
71389: RET
// export hInvincible ; every 1 do
71390: GO 71392
71392: DISABLE
// hInvincible := [ ] ;
71393: LD_ADDR_EXP 95
71397: PUSH
71398: EMPTY
71399: ST_TO_ADDR
71400: END
// every 10 do var i ;
71401: GO 71403
71403: DISABLE
71404: LD_INT 0
71406: PPUSH
// begin enable ;
71407: ENABLE
// if not hInvincible then
71408: LD_EXP 95
71412: NOT
71413: IFFALSE 71417
// exit ;
71415: GO 71461
// for i in hInvincible do
71417: LD_ADDR_VAR 0 1
71421: PUSH
71422: LD_EXP 95
71426: PUSH
71427: FOR_IN
71428: IFFALSE 71459
// if GetLives ( i ) < 1000 then
71430: LD_VAR 0 1
71434: PPUSH
71435: CALL_OW 256
71439: PUSH
71440: LD_INT 1000
71442: LESS
71443: IFFALSE 71457
// SetLives ( i , 1000 ) ;
71445: LD_VAR 0 1
71449: PPUSH
71450: LD_INT 1000
71452: PPUSH
71453: CALL_OW 234
71457: GO 71427
71459: POP
71460: POP
// end ;
71461: PPOPN 1
71463: END
// export function hHackInvincible ; var i ; begin
71464: LD_INT 0
71466: PPUSH
71467: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71468: LD_ADDR_VAR 0 2
71472: PUSH
71473: LD_INT 2
71475: PUSH
71476: LD_INT 21
71478: PUSH
71479: LD_INT 1
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 21
71488: PUSH
71489: LD_INT 2
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: LIST
71500: PPUSH
71501: CALL_OW 69
71505: PUSH
71506: FOR_IN
71507: IFFALSE 71568
// if IsSelected ( i ) then
71509: LD_VAR 0 2
71513: PPUSH
71514: CALL_OW 306
71518: IFFALSE 71566
// begin if i in hInvincible then
71520: LD_VAR 0 2
71524: PUSH
71525: LD_EXP 95
71529: IN
71530: IFFALSE 71550
// hInvincible := hInvincible diff i else
71532: LD_ADDR_EXP 95
71536: PUSH
71537: LD_EXP 95
71541: PUSH
71542: LD_VAR 0 2
71546: DIFF
71547: ST_TO_ADDR
71548: GO 71566
// hInvincible := hInvincible union i ;
71550: LD_ADDR_EXP 95
71554: PUSH
71555: LD_EXP 95
71559: PUSH
71560: LD_VAR 0 2
71564: UNION
71565: ST_TO_ADDR
// end ;
71566: GO 71506
71568: POP
71569: POP
// end ;
71570: LD_VAR 0 1
71574: RET
// export function hHackInvisible ; var i , j ; begin
71575: LD_INT 0
71577: PPUSH
71578: PPUSH
71579: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71580: LD_ADDR_VAR 0 2
71584: PUSH
71585: LD_INT 21
71587: PUSH
71588: LD_INT 1
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PPUSH
71595: CALL_OW 69
71599: PUSH
71600: FOR_IN
71601: IFFALSE 71625
// if IsSelected ( i ) then
71603: LD_VAR 0 2
71607: PPUSH
71608: CALL_OW 306
71612: IFFALSE 71623
// ComForceInvisible ( i ) ;
71614: LD_VAR 0 2
71618: PPUSH
71619: CALL_OW 496
71623: GO 71600
71625: POP
71626: POP
// end ;
71627: LD_VAR 0 1
71631: RET
// export function hHackChangeYourSide ; begin
71632: LD_INT 0
71634: PPUSH
// if your_side = 8 then
71635: LD_OWVAR 2
71639: PUSH
71640: LD_INT 8
71642: EQUAL
71643: IFFALSE 71655
// your_side := 0 else
71645: LD_ADDR_OWVAR 2
71649: PUSH
71650: LD_INT 0
71652: ST_TO_ADDR
71653: GO 71669
// your_side := your_side + 1 ;
71655: LD_ADDR_OWVAR 2
71659: PUSH
71660: LD_OWVAR 2
71664: PUSH
71665: LD_INT 1
71667: PLUS
71668: ST_TO_ADDR
// end ;
71669: LD_VAR 0 1
71673: RET
// export function hHackChangeUnitSide ; var i , j ; begin
71674: LD_INT 0
71676: PPUSH
71677: PPUSH
71678: PPUSH
// for i in all_units do
71679: LD_ADDR_VAR 0 2
71683: PUSH
71684: LD_OWVAR 3
71688: PUSH
71689: FOR_IN
71690: IFFALSE 71768
// if IsSelected ( i ) then
71692: LD_VAR 0 2
71696: PPUSH
71697: CALL_OW 306
71701: IFFALSE 71766
// begin j := GetSide ( i ) ;
71703: LD_ADDR_VAR 0 3
71707: PUSH
71708: LD_VAR 0 2
71712: PPUSH
71713: CALL_OW 255
71717: ST_TO_ADDR
// if j = 8 then
71718: LD_VAR 0 3
71722: PUSH
71723: LD_INT 8
71725: EQUAL
71726: IFFALSE 71738
// j := 0 else
71728: LD_ADDR_VAR 0 3
71732: PUSH
71733: LD_INT 0
71735: ST_TO_ADDR
71736: GO 71752
// j := j + 1 ;
71738: LD_ADDR_VAR 0 3
71742: PUSH
71743: LD_VAR 0 3
71747: PUSH
71748: LD_INT 1
71750: PLUS
71751: ST_TO_ADDR
// SetSide ( i , j ) ;
71752: LD_VAR 0 2
71756: PPUSH
71757: LD_VAR 0 3
71761: PPUSH
71762: CALL_OW 235
// end ;
71766: GO 71689
71768: POP
71769: POP
// end ;
71770: LD_VAR 0 1
71774: RET
// export function hHackFog ; begin
71775: LD_INT 0
71777: PPUSH
// FogOff ( true ) ;
71778: LD_INT 1
71780: PPUSH
71781: CALL_OW 344
// end ;
71785: LD_VAR 0 1
71789: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71790: LD_INT 0
71792: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71793: LD_VAR 0 1
71797: PPUSH
71798: LD_VAR 0 2
71802: PPUSH
71803: LD_VAR 0 3
71807: PPUSH
71808: LD_INT 1
71810: PPUSH
71811: LD_INT 1
71813: PPUSH
71814: CALL_OW 483
// CenterOnXY ( x , y ) ;
71818: LD_VAR 0 2
71822: PPUSH
71823: LD_VAR 0 3
71827: PPUSH
71828: CALL_OW 84
// end ;
71832: LD_VAR 0 4
71836: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
71837: LD_INT 0
71839: PPUSH
71840: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
71841: LD_VAR 0 1
71845: NOT
71846: PUSH
71847: LD_VAR 0 2
71851: PPUSH
71852: LD_VAR 0 3
71856: PPUSH
71857: CALL_OW 488
71861: NOT
71862: OR
71863: PUSH
71864: LD_VAR 0 1
71868: PPUSH
71869: CALL_OW 266
71873: PUSH
71874: LD_INT 3
71876: NONEQUAL
71877: PUSH
71878: LD_VAR 0 1
71882: PPUSH
71883: CALL_OW 247
71887: PUSH
71888: LD_INT 1
71890: EQUAL
71891: NOT
71892: AND
71893: OR
71894: IFFALSE 71898
// exit ;
71896: GO 72047
// if GetType ( factory ) = unit_human then
71898: LD_VAR 0 1
71902: PPUSH
71903: CALL_OW 247
71907: PUSH
71908: LD_INT 1
71910: EQUAL
71911: IFFALSE 71928
// factory := IsInUnit ( factory ) ;
71913: LD_ADDR_VAR 0 1
71917: PUSH
71918: LD_VAR 0 1
71922: PPUSH
71923: CALL_OW 310
71927: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
71928: LD_VAR 0 1
71932: PPUSH
71933: CALL_OW 266
71937: PUSH
71938: LD_INT 3
71940: NONEQUAL
71941: IFFALSE 71945
// exit ;
71943: GO 72047
// if HexInfo ( x , y ) = factory then
71945: LD_VAR 0 2
71949: PPUSH
71950: LD_VAR 0 3
71954: PPUSH
71955: CALL_OW 428
71959: PUSH
71960: LD_VAR 0 1
71964: EQUAL
71965: IFFALSE 71992
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
71967: LD_ADDR_EXP 96
71971: PUSH
71972: LD_EXP 96
71976: PPUSH
71977: LD_VAR 0 1
71981: PPUSH
71982: LD_INT 0
71984: PPUSH
71985: CALL_OW 1
71989: ST_TO_ADDR
71990: GO 72043
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
71992: LD_ADDR_EXP 96
71996: PUSH
71997: LD_EXP 96
72001: PPUSH
72002: LD_VAR 0 1
72006: PPUSH
72007: LD_VAR 0 1
72011: PPUSH
72012: CALL_OW 255
72016: PUSH
72017: LD_VAR 0 1
72021: PUSH
72022: LD_VAR 0 2
72026: PUSH
72027: LD_VAR 0 3
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: PPUSH
72038: CALL_OW 1
72042: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72043: CALL 72052 0 0
// end ;
72047: LD_VAR 0 4
72051: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72052: LD_INT 0
72054: PPUSH
72055: PPUSH
72056: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72057: LD_STRING resetFactoryWaypoint();
72059: PPUSH
72060: CALL_OW 559
// if factoryWaypoints then
72064: LD_EXP 96
72068: IFFALSE 72194
// begin list := PrepareArray ( factoryWaypoints ) ;
72070: LD_ADDR_VAR 0 3
72074: PUSH
72075: LD_EXP 96
72079: PPUSH
72080: CALL 56823 0 1
72084: ST_TO_ADDR
// for i := 1 to list do
72085: LD_ADDR_VAR 0 2
72089: PUSH
72090: DOUBLE
72091: LD_INT 1
72093: DEC
72094: ST_TO_ADDR
72095: LD_VAR 0 3
72099: PUSH
72100: FOR_TO
72101: IFFALSE 72192
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72103: LD_STRING setFactoryWaypointXY(
72105: PUSH
72106: LD_VAR 0 3
72110: PUSH
72111: LD_VAR 0 2
72115: ARRAY
72116: PUSH
72117: LD_INT 1
72119: ARRAY
72120: STR
72121: PUSH
72122: LD_STRING ,
72124: STR
72125: PUSH
72126: LD_VAR 0 3
72130: PUSH
72131: LD_VAR 0 2
72135: ARRAY
72136: PUSH
72137: LD_INT 2
72139: ARRAY
72140: STR
72141: PUSH
72142: LD_STRING ,
72144: STR
72145: PUSH
72146: LD_VAR 0 3
72150: PUSH
72151: LD_VAR 0 2
72155: ARRAY
72156: PUSH
72157: LD_INT 3
72159: ARRAY
72160: STR
72161: PUSH
72162: LD_STRING ,
72164: STR
72165: PUSH
72166: LD_VAR 0 3
72170: PUSH
72171: LD_VAR 0 2
72175: ARRAY
72176: PUSH
72177: LD_INT 4
72179: ARRAY
72180: STR
72181: PUSH
72182: LD_STRING )
72184: STR
72185: PPUSH
72186: CALL_OW 559
72190: GO 72100
72192: POP
72193: POP
// end ; end ;
72194: LD_VAR 0 1
72198: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72199: LD_INT 0
72201: PPUSH
// if HexInfo ( x , y ) = warehouse then
72202: LD_VAR 0 2
72206: PPUSH
72207: LD_VAR 0 3
72211: PPUSH
72212: CALL_OW 428
72216: PUSH
72217: LD_VAR 0 1
72221: EQUAL
72222: IFFALSE 72249
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72224: LD_ADDR_EXP 97
72228: PUSH
72229: LD_EXP 97
72233: PPUSH
72234: LD_VAR 0 1
72238: PPUSH
72239: LD_INT 0
72241: PPUSH
72242: CALL_OW 1
72246: ST_TO_ADDR
72247: GO 72300
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72249: LD_ADDR_EXP 97
72253: PUSH
72254: LD_EXP 97
72258: PPUSH
72259: LD_VAR 0 1
72263: PPUSH
72264: LD_VAR 0 1
72268: PPUSH
72269: CALL_OW 255
72273: PUSH
72274: LD_VAR 0 1
72278: PUSH
72279: LD_VAR 0 2
72283: PUSH
72284: LD_VAR 0 3
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: PPUSH
72295: CALL_OW 1
72299: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72300: CALL 72309 0 0
// end ;
72304: LD_VAR 0 4
72308: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72309: LD_INT 0
72311: PPUSH
72312: PPUSH
72313: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72314: LD_STRING resetWarehouseGatheringPoints();
72316: PPUSH
72317: CALL_OW 559
// if warehouseGatheringPoints then
72321: LD_EXP 97
72325: IFFALSE 72451
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72327: LD_ADDR_VAR 0 3
72331: PUSH
72332: LD_EXP 97
72336: PPUSH
72337: CALL 56823 0 1
72341: ST_TO_ADDR
// for i := 1 to list do
72342: LD_ADDR_VAR 0 2
72346: PUSH
72347: DOUBLE
72348: LD_INT 1
72350: DEC
72351: ST_TO_ADDR
72352: LD_VAR 0 3
72356: PUSH
72357: FOR_TO
72358: IFFALSE 72449
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72360: LD_STRING setWarehouseGatheringPointXY(
72362: PUSH
72363: LD_VAR 0 3
72367: PUSH
72368: LD_VAR 0 2
72372: ARRAY
72373: PUSH
72374: LD_INT 1
72376: ARRAY
72377: STR
72378: PUSH
72379: LD_STRING ,
72381: STR
72382: PUSH
72383: LD_VAR 0 3
72387: PUSH
72388: LD_VAR 0 2
72392: ARRAY
72393: PUSH
72394: LD_INT 2
72396: ARRAY
72397: STR
72398: PUSH
72399: LD_STRING ,
72401: STR
72402: PUSH
72403: LD_VAR 0 3
72407: PUSH
72408: LD_VAR 0 2
72412: ARRAY
72413: PUSH
72414: LD_INT 3
72416: ARRAY
72417: STR
72418: PUSH
72419: LD_STRING ,
72421: STR
72422: PUSH
72423: LD_VAR 0 3
72427: PUSH
72428: LD_VAR 0 2
72432: ARRAY
72433: PUSH
72434: LD_INT 4
72436: ARRAY
72437: STR
72438: PUSH
72439: LD_STRING )
72441: STR
72442: PPUSH
72443: CALL_OW 559
72447: GO 72357
72449: POP
72450: POP
// end ; end ;
72451: LD_VAR 0 1
72455: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
72456: LD_EXP 97
72460: IFFALSE 73145
72462: GO 72464
72464: DISABLE
72465: LD_INT 0
72467: PPUSH
72468: PPUSH
72469: PPUSH
72470: PPUSH
72471: PPUSH
72472: PPUSH
72473: PPUSH
72474: PPUSH
72475: PPUSH
// begin enable ;
72476: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
72477: LD_ADDR_VAR 0 3
72481: PUSH
72482: LD_EXP 97
72486: PPUSH
72487: CALL 56823 0 1
72491: ST_TO_ADDR
// if not list then
72492: LD_VAR 0 3
72496: NOT
72497: IFFALSE 72501
// exit ;
72499: GO 73145
// for i := 1 to list do
72501: LD_ADDR_VAR 0 1
72505: PUSH
72506: DOUBLE
72507: LD_INT 1
72509: DEC
72510: ST_TO_ADDR
72511: LD_VAR 0 3
72515: PUSH
72516: FOR_TO
72517: IFFALSE 73143
// begin depot := list [ i ] [ 2 ] ;
72519: LD_ADDR_VAR 0 8
72523: PUSH
72524: LD_VAR 0 3
72528: PUSH
72529: LD_VAR 0 1
72533: ARRAY
72534: PUSH
72535: LD_INT 2
72537: ARRAY
72538: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
72539: LD_ADDR_VAR 0 5
72543: PUSH
72544: LD_VAR 0 3
72548: PUSH
72549: LD_VAR 0 1
72553: ARRAY
72554: PUSH
72555: LD_INT 1
72557: ARRAY
72558: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
72559: LD_VAR 0 8
72563: PPUSH
72564: CALL_OW 301
72568: PUSH
72569: LD_VAR 0 5
72573: PUSH
72574: LD_VAR 0 8
72578: PPUSH
72579: CALL_OW 255
72583: NONEQUAL
72584: OR
72585: IFFALSE 72614
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
72587: LD_ADDR_EXP 97
72591: PUSH
72592: LD_EXP 97
72596: PPUSH
72597: LD_VAR 0 8
72601: PPUSH
72602: LD_INT 0
72604: PPUSH
72605: CALL_OW 1
72609: ST_TO_ADDR
// exit ;
72610: POP
72611: POP
72612: GO 73145
// end ; x := list [ i ] [ 3 ] ;
72614: LD_ADDR_VAR 0 6
72618: PUSH
72619: LD_VAR 0 3
72623: PUSH
72624: LD_VAR 0 1
72628: ARRAY
72629: PUSH
72630: LD_INT 3
72632: ARRAY
72633: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
72634: LD_ADDR_VAR 0 7
72638: PUSH
72639: LD_VAR 0 3
72643: PUSH
72644: LD_VAR 0 1
72648: ARRAY
72649: PUSH
72650: LD_INT 4
72652: ARRAY
72653: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
72654: LD_ADDR_VAR 0 9
72658: PUSH
72659: LD_VAR 0 6
72663: PPUSH
72664: LD_VAR 0 7
72668: PPUSH
72669: LD_INT 16
72671: PPUSH
72672: CALL 55411 0 3
72676: ST_TO_ADDR
// if not cratesNearbyPoint then
72677: LD_VAR 0 9
72681: NOT
72682: IFFALSE 72688
// exit ;
72684: POP
72685: POP
72686: GO 73145
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
72688: LD_ADDR_VAR 0 4
72692: PUSH
72693: LD_INT 22
72695: PUSH
72696: LD_VAR 0 5
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: LD_INT 3
72707: PUSH
72708: LD_INT 60
72710: PUSH
72711: EMPTY
72712: LIST
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 91
72720: PUSH
72721: LD_VAR 0 8
72725: PUSH
72726: LD_INT 6
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 2
72736: PUSH
72737: LD_INT 25
72739: PUSH
72740: LD_INT 2
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 25
72749: PUSH
72750: LD_INT 16
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: LIST
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: PPUSH
72768: CALL_OW 69
72772: PUSH
72773: LD_VAR 0 8
72777: PPUSH
72778: CALL_OW 313
72782: PPUSH
72783: LD_INT 3
72785: PUSH
72786: LD_INT 60
72788: PUSH
72789: EMPTY
72790: LIST
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 2
72798: PUSH
72799: LD_INT 25
72801: PUSH
72802: LD_INT 2
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: PUSH
72809: LD_INT 25
72811: PUSH
72812: LD_INT 16
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: LIST
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PPUSH
72828: CALL_OW 72
72832: UNION
72833: ST_TO_ADDR
// if tmp then
72834: LD_VAR 0 4
72838: IFFALSE 72918
// begin tmp := ShrinkArray ( tmp , 3 ) ;
72840: LD_ADDR_VAR 0 4
72844: PUSH
72845: LD_VAR 0 4
72849: PPUSH
72850: LD_INT 3
72852: PPUSH
72853: CALL 53380 0 2
72857: ST_TO_ADDR
// for j in tmp do
72858: LD_ADDR_VAR 0 2
72862: PUSH
72863: LD_VAR 0 4
72867: PUSH
72868: FOR_IN
72869: IFFALSE 72912
// begin if IsInUnit ( j ) then
72871: LD_VAR 0 2
72875: PPUSH
72876: CALL_OW 310
72880: IFFALSE 72891
// ComExit ( j ) ;
72882: LD_VAR 0 2
72886: PPUSH
72887: CALL 53463 0 1
// AddComCollect ( j , x , y ) ;
72891: LD_VAR 0 2
72895: PPUSH
72896: LD_VAR 0 6
72900: PPUSH
72901: LD_VAR 0 7
72905: PPUSH
72906: CALL_OW 177
// end ;
72910: GO 72868
72912: POP
72913: POP
// exit ;
72914: POP
72915: POP
72916: GO 73145
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
72918: LD_ADDR_VAR 0 4
72922: PUSH
72923: LD_INT 22
72925: PUSH
72926: LD_VAR 0 5
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 91
72937: PUSH
72938: LD_VAR 0 8
72942: PUSH
72943: LD_INT 8
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 2
72953: PUSH
72954: LD_INT 34
72956: PUSH
72957: LD_INT 12
72959: PUSH
72960: EMPTY
72961: LIST
72962: LIST
72963: PUSH
72964: LD_INT 34
72966: PUSH
72967: LD_INT 51
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PUSH
72974: LD_INT 34
72976: PUSH
72977: LD_INT 32
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 34
72986: PUSH
72987: LD_INT 89
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: LIST
73005: PPUSH
73006: CALL_OW 69
73010: ST_TO_ADDR
// if tmp then
73011: LD_VAR 0 4
73015: IFFALSE 73141
// begin for j in tmp do
73017: LD_ADDR_VAR 0 2
73021: PUSH
73022: LD_VAR 0 4
73026: PUSH
73027: FOR_IN
73028: IFFALSE 73139
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73030: LD_VAR 0 2
73034: PPUSH
73035: CALL_OW 262
73039: PUSH
73040: LD_INT 3
73042: EQUAL
73043: PUSH
73044: LD_VAR 0 2
73048: PPUSH
73049: CALL_OW 261
73053: PUSH
73054: LD_INT 20
73056: GREATER
73057: OR
73058: PUSH
73059: LD_VAR 0 2
73063: PPUSH
73064: CALL_OW 314
73068: NOT
73069: AND
73070: PUSH
73071: LD_VAR 0 2
73075: PPUSH
73076: CALL_OW 263
73080: PUSH
73081: LD_INT 1
73083: NONEQUAL
73084: PUSH
73085: LD_VAR 0 2
73089: PPUSH
73090: CALL_OW 311
73094: OR
73095: AND
73096: IFFALSE 73137
// begin ComCollect ( j , x , y ) ;
73098: LD_VAR 0 2
73102: PPUSH
73103: LD_VAR 0 6
73107: PPUSH
73108: LD_VAR 0 7
73112: PPUSH
73113: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73117: LD_VAR 0 2
73121: PPUSH
73122: LD_VAR 0 8
73126: PPUSH
73127: CALL_OW 172
// exit ;
73131: POP
73132: POP
73133: POP
73134: POP
73135: GO 73145
// end ;
73137: GO 73027
73139: POP
73140: POP
// end ; end ;
73141: GO 72516
73143: POP
73144: POP
// end ; end_of_file
73145: PPOPN 9
73147: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73148: LD_VAR 0 1
73152: PUSH
73153: LD_INT 200
73155: DOUBLE
73156: GREATEREQUAL
73157: IFFALSE 73165
73159: LD_INT 299
73161: DOUBLE
73162: LESSEQUAL
73163: IFTRUE 73167
73165: GO 73199
73167: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73168: LD_VAR 0 1
73172: PPUSH
73173: LD_VAR 0 2
73177: PPUSH
73178: LD_VAR 0 3
73182: PPUSH
73183: LD_VAR 0 4
73187: PPUSH
73188: LD_VAR 0 5
73192: PPUSH
73193: CALL 73687 0 5
73197: GO 73276
73199: LD_INT 300
73201: DOUBLE
73202: GREATEREQUAL
73203: IFFALSE 73211
73205: LD_INT 399
73207: DOUBLE
73208: LESSEQUAL
73209: IFTRUE 73213
73211: GO 73275
73213: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73214: LD_VAR 0 1
73218: PPUSH
73219: LD_VAR 0 2
73223: PPUSH
73224: LD_VAR 0 3
73228: PPUSH
73229: LD_VAR 0 4
73233: PPUSH
73234: LD_VAR 0 5
73238: PPUSH
73239: LD_VAR 0 6
73243: PPUSH
73244: LD_VAR 0 7
73248: PPUSH
73249: LD_VAR 0 8
73253: PPUSH
73254: LD_VAR 0 9
73258: PPUSH
73259: LD_VAR 0 10
73263: PPUSH
73264: LD_VAR 0 11
73268: PPUSH
73269: CALL 69849 0 11
73273: GO 73276
73275: POP
// end ;
73276: PPOPN 11
73278: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73279: LD_VAR 0 1
73283: PPUSH
73284: LD_VAR 0 2
73288: PPUSH
73289: LD_VAR 0 3
73293: PPUSH
73294: LD_VAR 0 4
73298: PPUSH
73299: LD_VAR 0 5
73303: PPUSH
73304: CALL 73423 0 5
// end ; end_of_file
73308: PPOPN 5
73310: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
73311: LD_INT 0
73313: PPUSH
73314: PPUSH
73315: PPUSH
73316: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
73317: LD_VAR 0 1
73321: PPUSH
73322: CALL_OW 264
73326: PUSH
73327: LD_INT 91
73329: EQUAL
73330: IFFALSE 73402
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
73332: LD_INT 68
73334: PPUSH
73335: LD_VAR 0 1
73339: PPUSH
73340: CALL_OW 255
73344: PPUSH
73345: CALL_OW 321
73349: PUSH
73350: LD_INT 2
73352: EQUAL
73353: IFFALSE 73365
// eff := 70 else
73355: LD_ADDR_VAR 0 4
73359: PUSH
73360: LD_INT 70
73362: ST_TO_ADDR
73363: GO 73373
// eff := 30 ;
73365: LD_ADDR_VAR 0 4
73369: PUSH
73370: LD_INT 30
73372: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
73373: LD_VAR 0 1
73377: PPUSH
73378: CALL_OW 250
73382: PPUSH
73383: LD_VAR 0 1
73387: PPUSH
73388: CALL_OW 251
73392: PPUSH
73393: LD_VAR 0 4
73397: PPUSH
73398: CALL_OW 495
// end ; end ;
73402: LD_VAR 0 2
73406: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
73407: LD_INT 0
73409: PPUSH
// end ;
73410: LD_VAR 0 4
73414: RET
// export function SOS_Command ( cmd ) ; begin
73415: LD_INT 0
73417: PPUSH
// end ;
73418: LD_VAR 0 2
73422: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73423: LD_INT 0
73425: PPUSH
// end ;
73426: LD_VAR 0 6
73430: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
73431: LD_INT 0
73433: PPUSH
73434: PPUSH
// if not vehicle or not factory then
73435: LD_VAR 0 1
73439: NOT
73440: PUSH
73441: LD_VAR 0 2
73445: NOT
73446: OR
73447: IFFALSE 73451
// exit ;
73449: GO 73682
// if factoryWaypoints >= factory then
73451: LD_EXP 96
73455: PUSH
73456: LD_VAR 0 2
73460: GREATEREQUAL
73461: IFFALSE 73682
// if factoryWaypoints [ factory ] then
73463: LD_EXP 96
73467: PUSH
73468: LD_VAR 0 2
73472: ARRAY
73473: IFFALSE 73682
// begin if GetControl ( vehicle ) = control_manual then
73475: LD_VAR 0 1
73479: PPUSH
73480: CALL_OW 263
73484: PUSH
73485: LD_INT 1
73487: EQUAL
73488: IFFALSE 73569
// begin driver := IsDrivenBy ( vehicle ) ;
73490: LD_ADDR_VAR 0 4
73494: PUSH
73495: LD_VAR 0 1
73499: PPUSH
73500: CALL_OW 311
73504: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73505: LD_VAR 0 4
73509: PPUSH
73510: LD_EXP 96
73514: PUSH
73515: LD_VAR 0 2
73519: ARRAY
73520: PUSH
73521: LD_INT 3
73523: ARRAY
73524: PPUSH
73525: LD_EXP 96
73529: PUSH
73530: LD_VAR 0 2
73534: ARRAY
73535: PUSH
73536: LD_INT 4
73538: ARRAY
73539: PPUSH
73540: CALL_OW 171
// AddComExitVehicle ( driver ) ;
73544: LD_VAR 0 4
73548: PPUSH
73549: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
73553: LD_VAR 0 4
73557: PPUSH
73558: LD_VAR 0 2
73562: PPUSH
73563: CALL_OW 180
// end else
73567: GO 73682
// if GetControl ( vehicle ) = control_remote then
73569: LD_VAR 0 1
73573: PPUSH
73574: CALL_OW 263
73578: PUSH
73579: LD_INT 2
73581: EQUAL
73582: IFFALSE 73643
// begin wait ( 0 0$2 ) ;
73584: LD_INT 70
73586: PPUSH
73587: CALL_OW 67
// if Connect ( vehicle ) then
73591: LD_VAR 0 1
73595: PPUSH
73596: CALL 23684 0 1
73600: IFFALSE 73641
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73602: LD_VAR 0 1
73606: PPUSH
73607: LD_EXP 96
73611: PUSH
73612: LD_VAR 0 2
73616: ARRAY
73617: PUSH
73618: LD_INT 3
73620: ARRAY
73621: PPUSH
73622: LD_EXP 96
73626: PUSH
73627: LD_VAR 0 2
73631: ARRAY
73632: PUSH
73633: LD_INT 4
73635: ARRAY
73636: PPUSH
73637: CALL_OW 171
// end else
73641: GO 73682
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73643: LD_VAR 0 1
73647: PPUSH
73648: LD_EXP 96
73652: PUSH
73653: LD_VAR 0 2
73657: ARRAY
73658: PUSH
73659: LD_INT 3
73661: ARRAY
73662: PPUSH
73663: LD_EXP 96
73667: PUSH
73668: LD_VAR 0 2
73672: ARRAY
73673: PUSH
73674: LD_INT 4
73676: ARRAY
73677: PPUSH
73678: CALL_OW 171
// end ; end ;
73682: LD_VAR 0 3
73686: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
73687: LD_INT 0
73689: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
73690: LD_VAR 0 1
73694: PUSH
73695: LD_INT 250
73697: EQUAL
73698: PUSH
73699: LD_VAR 0 2
73703: PPUSH
73704: CALL_OW 264
73708: PUSH
73709: LD_INT 81
73711: EQUAL
73712: AND
73713: IFFALSE 73734
// MinerPlaceMine ( unit , x , y ) ;
73715: LD_VAR 0 2
73719: PPUSH
73720: LD_VAR 0 4
73724: PPUSH
73725: LD_VAR 0 5
73729: PPUSH
73730: CALL 76558 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
73734: LD_VAR 0 1
73738: PUSH
73739: LD_INT 251
73741: EQUAL
73742: PUSH
73743: LD_VAR 0 2
73747: PPUSH
73748: CALL_OW 264
73752: PUSH
73753: LD_INT 81
73755: EQUAL
73756: AND
73757: IFFALSE 73778
// MinerDetonateMine ( unit , x , y ) ;
73759: LD_VAR 0 2
73763: PPUSH
73764: LD_VAR 0 4
73768: PPUSH
73769: LD_VAR 0 5
73773: PPUSH
73774: CALL 76833 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
73778: LD_VAR 0 1
73782: PUSH
73783: LD_INT 252
73785: EQUAL
73786: PUSH
73787: LD_VAR 0 2
73791: PPUSH
73792: CALL_OW 264
73796: PUSH
73797: LD_INT 81
73799: EQUAL
73800: AND
73801: IFFALSE 73822
// MinerCreateMinefield ( unit , x , y ) ;
73803: LD_VAR 0 2
73807: PPUSH
73808: LD_VAR 0 4
73812: PPUSH
73813: LD_VAR 0 5
73817: PPUSH
73818: CALL 77250 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
73822: LD_VAR 0 1
73826: PUSH
73827: LD_INT 253
73829: EQUAL
73830: PUSH
73831: LD_VAR 0 2
73835: PPUSH
73836: CALL_OW 257
73840: PUSH
73841: LD_INT 5
73843: EQUAL
73844: AND
73845: IFFALSE 73866
// ComBinocular ( unit , x , y ) ;
73847: LD_VAR 0 2
73851: PPUSH
73852: LD_VAR 0 4
73856: PPUSH
73857: LD_VAR 0 5
73861: PPUSH
73862: CALL 77619 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
73866: LD_VAR 0 1
73870: PUSH
73871: LD_INT 254
73873: EQUAL
73874: PUSH
73875: LD_VAR 0 2
73879: PPUSH
73880: CALL_OW 264
73884: PUSH
73885: LD_INT 99
73887: EQUAL
73888: AND
73889: PUSH
73890: LD_VAR 0 3
73894: PPUSH
73895: CALL_OW 263
73899: PUSH
73900: LD_INT 3
73902: EQUAL
73903: AND
73904: IFFALSE 73920
// HackDestroyVehicle ( unit , selectedUnit ) ;
73906: LD_VAR 0 2
73910: PPUSH
73911: LD_VAR 0 3
73915: PPUSH
73916: CALL 75922 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
73920: LD_VAR 0 1
73924: PUSH
73925: LD_INT 255
73927: EQUAL
73928: PUSH
73929: LD_VAR 0 2
73933: PPUSH
73934: CALL_OW 264
73938: PUSH
73939: LD_INT 14
73941: PUSH
73942: LD_INT 53
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: IN
73949: AND
73950: PUSH
73951: LD_VAR 0 4
73955: PPUSH
73956: LD_VAR 0 5
73960: PPUSH
73961: CALL_OW 488
73965: AND
73966: IFFALSE 73990
// CutTreeXYR ( unit , x , y , 12 ) ;
73968: LD_VAR 0 2
73972: PPUSH
73973: LD_VAR 0 4
73977: PPUSH
73978: LD_VAR 0 5
73982: PPUSH
73983: LD_INT 12
73985: PPUSH
73986: CALL 74085 0 4
// if cmd = 256 then
73990: LD_VAR 0 1
73994: PUSH
73995: LD_INT 256
73997: EQUAL
73998: IFFALSE 74019
// SetFactoryWaypoint ( unit , x , y ) ;
74000: LD_VAR 0 2
74004: PPUSH
74005: LD_VAR 0 4
74009: PPUSH
74010: LD_VAR 0 5
74014: PPUSH
74015: CALL 71837 0 3
// if cmd = 257 then
74019: LD_VAR 0 1
74023: PUSH
74024: LD_INT 257
74026: EQUAL
74027: IFFALSE 74048
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74029: LD_VAR 0 2
74033: PPUSH
74034: LD_VAR 0 4
74038: PPUSH
74039: LD_VAR 0 5
74043: PPUSH
74044: CALL 72199 0 3
// if cmd = 258 then
74048: LD_VAR 0 1
74052: PUSH
74053: LD_INT 258
74055: EQUAL
74056: IFFALSE 74080
// BurnTreeXYR ( unit , x , y , 8 ) ;
74058: LD_VAR 0 2
74062: PPUSH
74063: LD_VAR 0 4
74067: PPUSH
74068: LD_VAR 0 5
74072: PPUSH
74073: LD_INT 8
74075: PPUSH
74076: CALL 74479 0 4
// end ;
74080: LD_VAR 0 6
74084: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74085: LD_INT 0
74087: PPUSH
74088: PPUSH
74089: PPUSH
74090: PPUSH
74091: PPUSH
74092: PPUSH
74093: PPUSH
74094: PPUSH
74095: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
74096: LD_VAR 0 1
74100: PPUSH
74101: CALL_OW 302
74105: NOT
74106: PUSH
74107: LD_VAR 0 2
74111: PPUSH
74112: LD_VAR 0 3
74116: PPUSH
74117: CALL_OW 488
74121: NOT
74122: OR
74123: PUSH
74124: LD_VAR 0 4
74128: NOT
74129: OR
74130: IFFALSE 74134
// exit ;
74132: GO 74474
// list := [ ] ;
74134: LD_ADDR_VAR 0 13
74138: PUSH
74139: EMPTY
74140: ST_TO_ADDR
// if x - r < 0 then
74141: LD_VAR 0 2
74145: PUSH
74146: LD_VAR 0 4
74150: MINUS
74151: PUSH
74152: LD_INT 0
74154: LESS
74155: IFFALSE 74167
// min_x := 0 else
74157: LD_ADDR_VAR 0 7
74161: PUSH
74162: LD_INT 0
74164: ST_TO_ADDR
74165: GO 74183
// min_x := x - r ;
74167: LD_ADDR_VAR 0 7
74171: PUSH
74172: LD_VAR 0 2
74176: PUSH
74177: LD_VAR 0 4
74181: MINUS
74182: ST_TO_ADDR
// if y - r < 0 then
74183: LD_VAR 0 3
74187: PUSH
74188: LD_VAR 0 4
74192: MINUS
74193: PUSH
74194: LD_INT 0
74196: LESS
74197: IFFALSE 74209
// min_y := 0 else
74199: LD_ADDR_VAR 0 8
74203: PUSH
74204: LD_INT 0
74206: ST_TO_ADDR
74207: GO 74225
// min_y := y - r ;
74209: LD_ADDR_VAR 0 8
74213: PUSH
74214: LD_VAR 0 3
74218: PUSH
74219: LD_VAR 0 4
74223: MINUS
74224: ST_TO_ADDR
// max_x := x + r ;
74225: LD_ADDR_VAR 0 9
74229: PUSH
74230: LD_VAR 0 2
74234: PUSH
74235: LD_VAR 0 4
74239: PLUS
74240: ST_TO_ADDR
// max_y := y + r ;
74241: LD_ADDR_VAR 0 10
74245: PUSH
74246: LD_VAR 0 3
74250: PUSH
74251: LD_VAR 0 4
74255: PLUS
74256: ST_TO_ADDR
// for _x = min_x to max_x do
74257: LD_ADDR_VAR 0 11
74261: PUSH
74262: DOUBLE
74263: LD_VAR 0 7
74267: DEC
74268: ST_TO_ADDR
74269: LD_VAR 0 9
74273: PUSH
74274: FOR_TO
74275: IFFALSE 74392
// for _y = min_y to max_y do
74277: LD_ADDR_VAR 0 12
74281: PUSH
74282: DOUBLE
74283: LD_VAR 0 8
74287: DEC
74288: ST_TO_ADDR
74289: LD_VAR 0 10
74293: PUSH
74294: FOR_TO
74295: IFFALSE 74388
// begin if not ValidHex ( _x , _y ) then
74297: LD_VAR 0 11
74301: PPUSH
74302: LD_VAR 0 12
74306: PPUSH
74307: CALL_OW 488
74311: NOT
74312: IFFALSE 74316
// continue ;
74314: GO 74294
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74316: LD_VAR 0 11
74320: PPUSH
74321: LD_VAR 0 12
74325: PPUSH
74326: CALL_OW 351
74330: PUSH
74331: LD_VAR 0 11
74335: PPUSH
74336: LD_VAR 0 12
74340: PPUSH
74341: CALL_OW 554
74345: AND
74346: IFFALSE 74386
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74348: LD_ADDR_VAR 0 13
74352: PUSH
74353: LD_VAR 0 13
74357: PPUSH
74358: LD_VAR 0 13
74362: PUSH
74363: LD_INT 1
74365: PLUS
74366: PPUSH
74367: LD_VAR 0 11
74371: PUSH
74372: LD_VAR 0 12
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PPUSH
74381: CALL_OW 2
74385: ST_TO_ADDR
// end ;
74386: GO 74294
74388: POP
74389: POP
74390: GO 74274
74392: POP
74393: POP
// if not list then
74394: LD_VAR 0 13
74398: NOT
74399: IFFALSE 74403
// exit ;
74401: GO 74474
// for i in list do
74403: LD_ADDR_VAR 0 6
74407: PUSH
74408: LD_VAR 0 13
74412: PUSH
74413: FOR_IN
74414: IFFALSE 74472
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
74416: LD_VAR 0 1
74420: PPUSH
74421: LD_STRING M
74423: PUSH
74424: LD_VAR 0 6
74428: PUSH
74429: LD_INT 1
74431: ARRAY
74432: PUSH
74433: LD_VAR 0 6
74437: PUSH
74438: LD_INT 2
74440: ARRAY
74441: PUSH
74442: LD_INT 0
74444: PUSH
74445: LD_INT 0
74447: PUSH
74448: LD_INT 0
74450: PUSH
74451: LD_INT 0
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: PUSH
74463: EMPTY
74464: LIST
74465: PPUSH
74466: CALL_OW 447
74470: GO 74413
74472: POP
74473: POP
// end ;
74474: LD_VAR 0 5
74478: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74479: LD_INT 0
74481: PPUSH
74482: PPUSH
74483: PPUSH
74484: PPUSH
74485: PPUSH
74486: PPUSH
74487: PPUSH
74488: PPUSH
74489: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
74490: LD_VAR 0 1
74494: PPUSH
74495: CALL_OW 302
74499: NOT
74500: PUSH
74501: LD_VAR 0 2
74505: PPUSH
74506: LD_VAR 0 3
74510: PPUSH
74511: CALL_OW 488
74515: NOT
74516: OR
74517: PUSH
74518: LD_VAR 0 4
74522: NOT
74523: OR
74524: IFFALSE 74528
// exit ;
74526: GO 74876
// list := [ ] ;
74528: LD_ADDR_VAR 0 13
74532: PUSH
74533: EMPTY
74534: ST_TO_ADDR
// if x - r < 0 then
74535: LD_VAR 0 2
74539: PUSH
74540: LD_VAR 0 4
74544: MINUS
74545: PUSH
74546: LD_INT 0
74548: LESS
74549: IFFALSE 74561
// min_x := 0 else
74551: LD_ADDR_VAR 0 7
74555: PUSH
74556: LD_INT 0
74558: ST_TO_ADDR
74559: GO 74577
// min_x := x - r ;
74561: LD_ADDR_VAR 0 7
74565: PUSH
74566: LD_VAR 0 2
74570: PUSH
74571: LD_VAR 0 4
74575: MINUS
74576: ST_TO_ADDR
// if y - r < 0 then
74577: LD_VAR 0 3
74581: PUSH
74582: LD_VAR 0 4
74586: MINUS
74587: PUSH
74588: LD_INT 0
74590: LESS
74591: IFFALSE 74603
// min_y := 0 else
74593: LD_ADDR_VAR 0 8
74597: PUSH
74598: LD_INT 0
74600: ST_TO_ADDR
74601: GO 74619
// min_y := y - r ;
74603: LD_ADDR_VAR 0 8
74607: PUSH
74608: LD_VAR 0 3
74612: PUSH
74613: LD_VAR 0 4
74617: MINUS
74618: ST_TO_ADDR
// max_x := x + r ;
74619: LD_ADDR_VAR 0 9
74623: PUSH
74624: LD_VAR 0 2
74628: PUSH
74629: LD_VAR 0 4
74633: PLUS
74634: ST_TO_ADDR
// max_y := y + r ;
74635: LD_ADDR_VAR 0 10
74639: PUSH
74640: LD_VAR 0 3
74644: PUSH
74645: LD_VAR 0 4
74649: PLUS
74650: ST_TO_ADDR
// for _x = min_x to max_x do
74651: LD_ADDR_VAR 0 11
74655: PUSH
74656: DOUBLE
74657: LD_VAR 0 7
74661: DEC
74662: ST_TO_ADDR
74663: LD_VAR 0 9
74667: PUSH
74668: FOR_TO
74669: IFFALSE 74786
// for _y = min_y to max_y do
74671: LD_ADDR_VAR 0 12
74675: PUSH
74676: DOUBLE
74677: LD_VAR 0 8
74681: DEC
74682: ST_TO_ADDR
74683: LD_VAR 0 10
74687: PUSH
74688: FOR_TO
74689: IFFALSE 74782
// begin if not ValidHex ( _x , _y ) then
74691: LD_VAR 0 11
74695: PPUSH
74696: LD_VAR 0 12
74700: PPUSH
74701: CALL_OW 488
74705: NOT
74706: IFFALSE 74710
// continue ;
74708: GO 74688
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74710: LD_VAR 0 11
74714: PPUSH
74715: LD_VAR 0 12
74719: PPUSH
74720: CALL_OW 351
74724: PUSH
74725: LD_VAR 0 11
74729: PPUSH
74730: LD_VAR 0 12
74734: PPUSH
74735: CALL_OW 554
74739: AND
74740: IFFALSE 74780
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74742: LD_ADDR_VAR 0 13
74746: PUSH
74747: LD_VAR 0 13
74751: PPUSH
74752: LD_VAR 0 13
74756: PUSH
74757: LD_INT 1
74759: PLUS
74760: PPUSH
74761: LD_VAR 0 11
74765: PUSH
74766: LD_VAR 0 12
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: PPUSH
74775: CALL_OW 2
74779: ST_TO_ADDR
// end ;
74780: GO 74688
74782: POP
74783: POP
74784: GO 74668
74786: POP
74787: POP
// if not list then
74788: LD_VAR 0 13
74792: NOT
74793: IFFALSE 74797
// exit ;
74795: GO 74876
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
74797: LD_ADDR_VAR 0 13
74801: PUSH
74802: LD_VAR 0 1
74806: PPUSH
74807: LD_VAR 0 13
74811: PPUSH
74812: LD_INT 1
74814: PPUSH
74815: LD_INT 1
74817: PPUSH
74818: CALL 20826 0 4
74822: ST_TO_ADDR
// ComStop ( flame ) ;
74823: LD_VAR 0 1
74827: PPUSH
74828: CALL_OW 141
// for i in list do
74832: LD_ADDR_VAR 0 6
74836: PUSH
74837: LD_VAR 0 13
74841: PUSH
74842: FOR_IN
74843: IFFALSE 74874
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
74845: LD_VAR 0 1
74849: PPUSH
74850: LD_VAR 0 6
74854: PUSH
74855: LD_INT 1
74857: ARRAY
74858: PPUSH
74859: LD_VAR 0 6
74863: PUSH
74864: LD_INT 2
74866: ARRAY
74867: PPUSH
74868: CALL_OW 176
74872: GO 74842
74874: POP
74875: POP
// end ;
74876: LD_VAR 0 5
74880: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
74881: LD_EXP 99
74885: NOT
74886: IFFALSE 74936
74888: GO 74890
74890: DISABLE
// begin initHack := true ;
74891: LD_ADDR_EXP 99
74895: PUSH
74896: LD_INT 1
74898: ST_TO_ADDR
// hackTanks := [ ] ;
74899: LD_ADDR_EXP 100
74903: PUSH
74904: EMPTY
74905: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
74906: LD_ADDR_EXP 101
74910: PUSH
74911: EMPTY
74912: ST_TO_ADDR
// hackLimit := 3 ;
74913: LD_ADDR_EXP 102
74917: PUSH
74918: LD_INT 3
74920: ST_TO_ADDR
// hackDist := 12 ;
74921: LD_ADDR_EXP 103
74925: PUSH
74926: LD_INT 12
74928: ST_TO_ADDR
// hackCounter := [ ] ;
74929: LD_ADDR_EXP 104
74933: PUSH
74934: EMPTY
74935: ST_TO_ADDR
// end ;
74936: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
74937: LD_EXP 99
74941: PUSH
74942: LD_INT 34
74944: PUSH
74945: LD_INT 99
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: PPUSH
74952: CALL_OW 69
74956: AND
74957: IFFALSE 75210
74959: GO 74961
74961: DISABLE
74962: LD_INT 0
74964: PPUSH
74965: PPUSH
// begin enable ;
74966: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
74967: LD_ADDR_VAR 0 1
74971: PUSH
74972: LD_INT 34
74974: PUSH
74975: LD_INT 99
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: PPUSH
74982: CALL_OW 69
74986: PUSH
74987: FOR_IN
74988: IFFALSE 75208
// begin if not i in hackTanks then
74990: LD_VAR 0 1
74994: PUSH
74995: LD_EXP 100
74999: IN
75000: NOT
75001: IFFALSE 75084
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75003: LD_ADDR_EXP 100
75007: PUSH
75008: LD_EXP 100
75012: PPUSH
75013: LD_EXP 100
75017: PUSH
75018: LD_INT 1
75020: PLUS
75021: PPUSH
75022: LD_VAR 0 1
75026: PPUSH
75027: CALL_OW 1
75031: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75032: LD_ADDR_EXP 101
75036: PUSH
75037: LD_EXP 101
75041: PPUSH
75042: LD_EXP 101
75046: PUSH
75047: LD_INT 1
75049: PLUS
75050: PPUSH
75051: EMPTY
75052: PPUSH
75053: CALL_OW 1
75057: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75058: LD_ADDR_EXP 104
75062: PUSH
75063: LD_EXP 104
75067: PPUSH
75068: LD_EXP 104
75072: PUSH
75073: LD_INT 1
75075: PLUS
75076: PPUSH
75077: EMPTY
75078: PPUSH
75079: CALL_OW 1
75083: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75084: LD_VAR 0 1
75088: PPUSH
75089: CALL_OW 302
75093: NOT
75094: IFFALSE 75107
// begin HackUnlinkAll ( i ) ;
75096: LD_VAR 0 1
75100: PPUSH
75101: CALL 75213 0 1
// continue ;
75105: GO 74987
// end ; HackCheckCapturedStatus ( i ) ;
75107: LD_VAR 0 1
75111: PPUSH
75112: CALL 75656 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75116: LD_ADDR_VAR 0 2
75120: PUSH
75121: LD_INT 81
75123: PUSH
75124: LD_VAR 0 1
75128: PPUSH
75129: CALL_OW 255
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: PUSH
75138: LD_INT 33
75140: PUSH
75141: LD_INT 3
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: PUSH
75148: LD_INT 91
75150: PUSH
75151: LD_VAR 0 1
75155: PUSH
75156: LD_EXP 103
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: LIST
75165: PUSH
75166: LD_INT 50
75168: PUSH
75169: EMPTY
75170: LIST
75171: PUSH
75172: EMPTY
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: PPUSH
75178: CALL_OW 69
75182: ST_TO_ADDR
// if not tmp then
75183: LD_VAR 0 2
75187: NOT
75188: IFFALSE 75192
// continue ;
75190: GO 74987
// HackLink ( i , tmp ) ;
75192: LD_VAR 0 1
75196: PPUSH
75197: LD_VAR 0 2
75201: PPUSH
75202: CALL 75349 0 2
// end ;
75206: GO 74987
75208: POP
75209: POP
// end ;
75210: PPOPN 2
75212: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75213: LD_INT 0
75215: PPUSH
75216: PPUSH
75217: PPUSH
// if not hack in hackTanks then
75218: LD_VAR 0 1
75222: PUSH
75223: LD_EXP 100
75227: IN
75228: NOT
75229: IFFALSE 75233
// exit ;
75231: GO 75344
// index := GetElementIndex ( hackTanks , hack ) ;
75233: LD_ADDR_VAR 0 4
75237: PUSH
75238: LD_EXP 100
75242: PPUSH
75243: LD_VAR 0 1
75247: PPUSH
75248: CALL 20123 0 2
75252: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75253: LD_EXP 101
75257: PUSH
75258: LD_VAR 0 4
75262: ARRAY
75263: IFFALSE 75344
// begin for i in hackTanksCaptured [ index ] do
75265: LD_ADDR_VAR 0 3
75269: PUSH
75270: LD_EXP 101
75274: PUSH
75275: LD_VAR 0 4
75279: ARRAY
75280: PUSH
75281: FOR_IN
75282: IFFALSE 75308
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75284: LD_VAR 0 3
75288: PUSH
75289: LD_INT 1
75291: ARRAY
75292: PPUSH
75293: LD_VAR 0 3
75297: PUSH
75298: LD_INT 2
75300: ARRAY
75301: PPUSH
75302: CALL_OW 235
75306: GO 75281
75308: POP
75309: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75310: LD_ADDR_EXP 101
75314: PUSH
75315: LD_EXP 101
75319: PPUSH
75320: LD_VAR 0 4
75324: PPUSH
75325: EMPTY
75326: PPUSH
75327: CALL_OW 1
75331: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75332: LD_VAR 0 1
75336: PPUSH
75337: LD_INT 0
75339: PPUSH
75340: CALL_OW 505
// end ; end ;
75344: LD_VAR 0 2
75348: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75349: LD_INT 0
75351: PPUSH
75352: PPUSH
75353: PPUSH
// if not hack in hackTanks or not vehicles then
75354: LD_VAR 0 1
75358: PUSH
75359: LD_EXP 100
75363: IN
75364: NOT
75365: PUSH
75366: LD_VAR 0 2
75370: NOT
75371: OR
75372: IFFALSE 75376
// exit ;
75374: GO 75651
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75376: LD_ADDR_VAR 0 2
75380: PUSH
75381: LD_VAR 0 1
75385: PPUSH
75386: LD_VAR 0 2
75390: PPUSH
75391: LD_INT 1
75393: PPUSH
75394: LD_INT 1
75396: PPUSH
75397: CALL 20773 0 4
75401: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
75402: LD_ADDR_VAR 0 5
75406: PUSH
75407: LD_EXP 100
75411: PPUSH
75412: LD_VAR 0 1
75416: PPUSH
75417: CALL 20123 0 2
75421: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
75422: LD_EXP 101
75426: PUSH
75427: LD_VAR 0 5
75431: ARRAY
75432: PUSH
75433: LD_EXP 102
75437: LESS
75438: IFFALSE 75627
// begin for i := 1 to vehicles do
75440: LD_ADDR_VAR 0 4
75444: PUSH
75445: DOUBLE
75446: LD_INT 1
75448: DEC
75449: ST_TO_ADDR
75450: LD_VAR 0 2
75454: PUSH
75455: FOR_TO
75456: IFFALSE 75625
// begin if hackTanksCaptured [ index ] = hackLimit then
75458: LD_EXP 101
75462: PUSH
75463: LD_VAR 0 5
75467: ARRAY
75468: PUSH
75469: LD_EXP 102
75473: EQUAL
75474: IFFALSE 75478
// break ;
75476: GO 75625
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
75478: LD_ADDR_EXP 104
75482: PUSH
75483: LD_EXP 104
75487: PPUSH
75488: LD_VAR 0 5
75492: PPUSH
75493: LD_EXP 104
75497: PUSH
75498: LD_VAR 0 5
75502: ARRAY
75503: PUSH
75504: LD_INT 1
75506: PLUS
75507: PPUSH
75508: CALL_OW 1
75512: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
75513: LD_ADDR_EXP 101
75517: PUSH
75518: LD_EXP 101
75522: PPUSH
75523: LD_VAR 0 5
75527: PUSH
75528: LD_EXP 101
75532: PUSH
75533: LD_VAR 0 5
75537: ARRAY
75538: PUSH
75539: LD_INT 1
75541: PLUS
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: PPUSH
75547: LD_VAR 0 2
75551: PUSH
75552: LD_VAR 0 4
75556: ARRAY
75557: PUSH
75558: LD_VAR 0 2
75562: PUSH
75563: LD_VAR 0 4
75567: ARRAY
75568: PPUSH
75569: CALL_OW 255
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: PPUSH
75578: CALL 20338 0 3
75582: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
75583: LD_VAR 0 2
75587: PUSH
75588: LD_VAR 0 4
75592: ARRAY
75593: PPUSH
75594: LD_VAR 0 1
75598: PPUSH
75599: CALL_OW 255
75603: PPUSH
75604: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
75608: LD_VAR 0 2
75612: PUSH
75613: LD_VAR 0 4
75617: ARRAY
75618: PPUSH
75619: CALL_OW 141
// end ;
75623: GO 75455
75625: POP
75626: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
75627: LD_VAR 0 1
75631: PPUSH
75632: LD_EXP 101
75636: PUSH
75637: LD_VAR 0 5
75641: ARRAY
75642: PUSH
75643: LD_INT 0
75645: PLUS
75646: PPUSH
75647: CALL_OW 505
// end ;
75651: LD_VAR 0 3
75655: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
75656: LD_INT 0
75658: PPUSH
75659: PPUSH
75660: PPUSH
75661: PPUSH
// if not hack in hackTanks then
75662: LD_VAR 0 1
75666: PUSH
75667: LD_EXP 100
75671: IN
75672: NOT
75673: IFFALSE 75677
// exit ;
75675: GO 75917
// index := GetElementIndex ( hackTanks , hack ) ;
75677: LD_ADDR_VAR 0 4
75681: PUSH
75682: LD_EXP 100
75686: PPUSH
75687: LD_VAR 0 1
75691: PPUSH
75692: CALL 20123 0 2
75696: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
75697: LD_ADDR_VAR 0 3
75701: PUSH
75702: DOUBLE
75703: LD_EXP 101
75707: PUSH
75708: LD_VAR 0 4
75712: ARRAY
75713: INC
75714: ST_TO_ADDR
75715: LD_INT 1
75717: PUSH
75718: FOR_DOWNTO
75719: IFFALSE 75891
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
75721: LD_ADDR_VAR 0 5
75725: PUSH
75726: LD_EXP 101
75730: PUSH
75731: LD_VAR 0 4
75735: ARRAY
75736: PUSH
75737: LD_VAR 0 3
75741: ARRAY
75742: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
75743: LD_VAR 0 5
75747: PUSH
75748: LD_INT 1
75750: ARRAY
75751: PPUSH
75752: CALL_OW 302
75756: NOT
75757: PUSH
75758: LD_VAR 0 5
75762: PUSH
75763: LD_INT 1
75765: ARRAY
75766: PPUSH
75767: CALL_OW 255
75771: PUSH
75772: LD_VAR 0 1
75776: PPUSH
75777: CALL_OW 255
75781: NONEQUAL
75782: OR
75783: IFFALSE 75889
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
75785: LD_VAR 0 5
75789: PUSH
75790: LD_INT 1
75792: ARRAY
75793: PPUSH
75794: CALL_OW 305
75798: PUSH
75799: LD_VAR 0 5
75803: PUSH
75804: LD_INT 1
75806: ARRAY
75807: PPUSH
75808: CALL_OW 255
75812: PUSH
75813: LD_VAR 0 1
75817: PPUSH
75818: CALL_OW 255
75822: EQUAL
75823: AND
75824: IFFALSE 75848
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
75826: LD_VAR 0 5
75830: PUSH
75831: LD_INT 1
75833: ARRAY
75834: PPUSH
75835: LD_VAR 0 5
75839: PUSH
75840: LD_INT 2
75842: ARRAY
75843: PPUSH
75844: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
75848: LD_ADDR_EXP 101
75852: PUSH
75853: LD_EXP 101
75857: PPUSH
75858: LD_VAR 0 4
75862: PPUSH
75863: LD_EXP 101
75867: PUSH
75868: LD_VAR 0 4
75872: ARRAY
75873: PPUSH
75874: LD_VAR 0 3
75878: PPUSH
75879: CALL_OW 3
75883: PPUSH
75884: CALL_OW 1
75888: ST_TO_ADDR
// end ; end ;
75889: GO 75718
75891: POP
75892: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
75893: LD_VAR 0 1
75897: PPUSH
75898: LD_EXP 101
75902: PUSH
75903: LD_VAR 0 4
75907: ARRAY
75908: PUSH
75909: LD_INT 0
75911: PLUS
75912: PPUSH
75913: CALL_OW 505
// end ;
75917: LD_VAR 0 2
75921: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
75922: LD_INT 0
75924: PPUSH
75925: PPUSH
75926: PPUSH
75927: PPUSH
// if not hack in hackTanks then
75928: LD_VAR 0 1
75932: PUSH
75933: LD_EXP 100
75937: IN
75938: NOT
75939: IFFALSE 75943
// exit ;
75941: GO 76028
// index := GetElementIndex ( hackTanks , hack ) ;
75943: LD_ADDR_VAR 0 5
75947: PUSH
75948: LD_EXP 100
75952: PPUSH
75953: LD_VAR 0 1
75957: PPUSH
75958: CALL 20123 0 2
75962: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
75963: LD_ADDR_VAR 0 4
75967: PUSH
75968: DOUBLE
75969: LD_INT 1
75971: DEC
75972: ST_TO_ADDR
75973: LD_EXP 101
75977: PUSH
75978: LD_VAR 0 5
75982: ARRAY
75983: PUSH
75984: FOR_TO
75985: IFFALSE 76026
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
75987: LD_EXP 101
75991: PUSH
75992: LD_VAR 0 5
75996: ARRAY
75997: PUSH
75998: LD_VAR 0 4
76002: ARRAY
76003: PUSH
76004: LD_INT 1
76006: ARRAY
76007: PUSH
76008: LD_VAR 0 2
76012: EQUAL
76013: IFFALSE 76024
// KillUnit ( vehicle ) ;
76015: LD_VAR 0 2
76019: PPUSH
76020: CALL_OW 66
76024: GO 75984
76026: POP
76027: POP
// end ;
76028: LD_VAR 0 3
76032: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76033: LD_EXP 105
76037: NOT
76038: IFFALSE 76073
76040: GO 76042
76042: DISABLE
// begin initMiner := true ;
76043: LD_ADDR_EXP 105
76047: PUSH
76048: LD_INT 1
76050: ST_TO_ADDR
// minersList := [ ] ;
76051: LD_ADDR_EXP 106
76055: PUSH
76056: EMPTY
76057: ST_TO_ADDR
// minerMinesList := [ ] ;
76058: LD_ADDR_EXP 107
76062: PUSH
76063: EMPTY
76064: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76065: LD_ADDR_EXP 108
76069: PUSH
76070: LD_INT 5
76072: ST_TO_ADDR
// end ;
76073: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76074: LD_EXP 105
76078: PUSH
76079: LD_INT 34
76081: PUSH
76082: LD_INT 81
76084: PUSH
76085: EMPTY
76086: LIST
76087: LIST
76088: PPUSH
76089: CALL_OW 69
76093: AND
76094: IFFALSE 76555
76096: GO 76098
76098: DISABLE
76099: LD_INT 0
76101: PPUSH
76102: PPUSH
76103: PPUSH
76104: PPUSH
// begin enable ;
76105: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76106: LD_ADDR_VAR 0 1
76110: PUSH
76111: LD_INT 34
76113: PUSH
76114: LD_INT 81
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: PPUSH
76121: CALL_OW 69
76125: PUSH
76126: FOR_IN
76127: IFFALSE 76199
// begin if not i in minersList then
76129: LD_VAR 0 1
76133: PUSH
76134: LD_EXP 106
76138: IN
76139: NOT
76140: IFFALSE 76197
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76142: LD_ADDR_EXP 106
76146: PUSH
76147: LD_EXP 106
76151: PPUSH
76152: LD_EXP 106
76156: PUSH
76157: LD_INT 1
76159: PLUS
76160: PPUSH
76161: LD_VAR 0 1
76165: PPUSH
76166: CALL_OW 1
76170: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76171: LD_ADDR_EXP 107
76175: PUSH
76176: LD_EXP 107
76180: PPUSH
76181: LD_EXP 107
76185: PUSH
76186: LD_INT 1
76188: PLUS
76189: PPUSH
76190: EMPTY
76191: PPUSH
76192: CALL_OW 1
76196: ST_TO_ADDR
// end end ;
76197: GO 76126
76199: POP
76200: POP
// for i := minerMinesList downto 1 do
76201: LD_ADDR_VAR 0 1
76205: PUSH
76206: DOUBLE
76207: LD_EXP 107
76211: INC
76212: ST_TO_ADDR
76213: LD_INT 1
76215: PUSH
76216: FOR_DOWNTO
76217: IFFALSE 76553
// begin if IsLive ( minersList [ i ] ) then
76219: LD_EXP 106
76223: PUSH
76224: LD_VAR 0 1
76228: ARRAY
76229: PPUSH
76230: CALL_OW 300
76234: IFFALSE 76262
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76236: LD_EXP 106
76240: PUSH
76241: LD_VAR 0 1
76245: ARRAY
76246: PPUSH
76247: LD_EXP 107
76251: PUSH
76252: LD_VAR 0 1
76256: ARRAY
76257: PPUSH
76258: CALL_OW 505
// if not minerMinesList [ i ] then
76262: LD_EXP 107
76266: PUSH
76267: LD_VAR 0 1
76271: ARRAY
76272: NOT
76273: IFFALSE 76277
// continue ;
76275: GO 76216
// for j := minerMinesList [ i ] downto 1 do
76277: LD_ADDR_VAR 0 2
76281: PUSH
76282: DOUBLE
76283: LD_EXP 107
76287: PUSH
76288: LD_VAR 0 1
76292: ARRAY
76293: INC
76294: ST_TO_ADDR
76295: LD_INT 1
76297: PUSH
76298: FOR_DOWNTO
76299: IFFALSE 76549
// begin side := GetSide ( minersList [ i ] ) ;
76301: LD_ADDR_VAR 0 3
76305: PUSH
76306: LD_EXP 106
76310: PUSH
76311: LD_VAR 0 1
76315: ARRAY
76316: PPUSH
76317: CALL_OW 255
76321: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76322: LD_ADDR_VAR 0 4
76326: PUSH
76327: LD_EXP 107
76331: PUSH
76332: LD_VAR 0 1
76336: ARRAY
76337: PUSH
76338: LD_VAR 0 2
76342: ARRAY
76343: PUSH
76344: LD_INT 1
76346: ARRAY
76347: PPUSH
76348: LD_EXP 107
76352: PUSH
76353: LD_VAR 0 1
76357: ARRAY
76358: PUSH
76359: LD_VAR 0 2
76363: ARRAY
76364: PUSH
76365: LD_INT 2
76367: ARRAY
76368: PPUSH
76369: CALL_OW 428
76373: ST_TO_ADDR
// if not tmp then
76374: LD_VAR 0 4
76378: NOT
76379: IFFALSE 76383
// continue ;
76381: GO 76298
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76383: LD_VAR 0 4
76387: PUSH
76388: LD_INT 81
76390: PUSH
76391: LD_VAR 0 3
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: PPUSH
76400: CALL_OW 69
76404: IN
76405: PUSH
76406: LD_EXP 107
76410: PUSH
76411: LD_VAR 0 1
76415: ARRAY
76416: PUSH
76417: LD_VAR 0 2
76421: ARRAY
76422: PUSH
76423: LD_INT 1
76425: ARRAY
76426: PPUSH
76427: LD_EXP 107
76431: PUSH
76432: LD_VAR 0 1
76436: ARRAY
76437: PUSH
76438: LD_VAR 0 2
76442: ARRAY
76443: PUSH
76444: LD_INT 2
76446: ARRAY
76447: PPUSH
76448: CALL_OW 458
76452: AND
76453: IFFALSE 76547
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
76455: LD_EXP 107
76459: PUSH
76460: LD_VAR 0 1
76464: ARRAY
76465: PUSH
76466: LD_VAR 0 2
76470: ARRAY
76471: PUSH
76472: LD_INT 1
76474: ARRAY
76475: PPUSH
76476: LD_EXP 107
76480: PUSH
76481: LD_VAR 0 1
76485: ARRAY
76486: PUSH
76487: LD_VAR 0 2
76491: ARRAY
76492: PUSH
76493: LD_INT 2
76495: ARRAY
76496: PPUSH
76497: LD_VAR 0 3
76501: PPUSH
76502: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
76506: LD_ADDR_EXP 107
76510: PUSH
76511: LD_EXP 107
76515: PPUSH
76516: LD_VAR 0 1
76520: PPUSH
76521: LD_EXP 107
76525: PUSH
76526: LD_VAR 0 1
76530: ARRAY
76531: PPUSH
76532: LD_VAR 0 2
76536: PPUSH
76537: CALL_OW 3
76541: PPUSH
76542: CALL_OW 1
76546: ST_TO_ADDR
// end ; end ;
76547: GO 76298
76549: POP
76550: POP
// end ;
76551: GO 76216
76553: POP
76554: POP
// end ;
76555: PPOPN 4
76557: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
76558: LD_INT 0
76560: PPUSH
76561: PPUSH
// result := false ;
76562: LD_ADDR_VAR 0 4
76566: PUSH
76567: LD_INT 0
76569: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
76570: LD_VAR 0 1
76574: PPUSH
76575: CALL_OW 264
76579: PUSH
76580: LD_INT 81
76582: EQUAL
76583: NOT
76584: IFFALSE 76588
// exit ;
76586: GO 76828
// index := GetElementIndex ( minersList , unit ) ;
76588: LD_ADDR_VAR 0 5
76592: PUSH
76593: LD_EXP 106
76597: PPUSH
76598: LD_VAR 0 1
76602: PPUSH
76603: CALL 20123 0 2
76607: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
76608: LD_EXP 107
76612: PUSH
76613: LD_VAR 0 5
76617: ARRAY
76618: PUSH
76619: LD_EXP 108
76623: GREATEREQUAL
76624: IFFALSE 76628
// exit ;
76626: GO 76828
// ComMoveXY ( unit , x , y ) ;
76628: LD_VAR 0 1
76632: PPUSH
76633: LD_VAR 0 2
76637: PPUSH
76638: LD_VAR 0 3
76642: PPUSH
76643: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
76647: LD_INT 35
76649: PPUSH
76650: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
76654: LD_VAR 0 1
76658: PPUSH
76659: LD_VAR 0 2
76663: PPUSH
76664: LD_VAR 0 3
76668: PPUSH
76669: CALL 51875 0 3
76673: NOT
76674: PUSH
76675: LD_VAR 0 1
76679: PPUSH
76680: CALL_OW 314
76684: AND
76685: IFFALSE 76689
// exit ;
76687: GO 76828
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
76689: LD_VAR 0 2
76693: PPUSH
76694: LD_VAR 0 3
76698: PPUSH
76699: CALL_OW 428
76703: PUSH
76704: LD_VAR 0 1
76708: EQUAL
76709: PUSH
76710: LD_VAR 0 1
76714: PPUSH
76715: CALL_OW 314
76719: NOT
76720: AND
76721: IFFALSE 76647
// PlaySoundXY ( x , y , PlantMine ) ;
76723: LD_VAR 0 2
76727: PPUSH
76728: LD_VAR 0 3
76732: PPUSH
76733: LD_STRING PlantMine
76735: PPUSH
76736: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
76740: LD_VAR 0 2
76744: PPUSH
76745: LD_VAR 0 3
76749: PPUSH
76750: LD_VAR 0 1
76754: PPUSH
76755: CALL_OW 255
76759: PPUSH
76760: LD_INT 0
76762: PPUSH
76763: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
76767: LD_ADDR_EXP 107
76771: PUSH
76772: LD_EXP 107
76776: PPUSH
76777: LD_VAR 0 5
76781: PUSH
76782: LD_EXP 107
76786: PUSH
76787: LD_VAR 0 5
76791: ARRAY
76792: PUSH
76793: LD_INT 1
76795: PLUS
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: PPUSH
76801: LD_VAR 0 2
76805: PUSH
76806: LD_VAR 0 3
76810: PUSH
76811: EMPTY
76812: LIST
76813: LIST
76814: PPUSH
76815: CALL 20338 0 3
76819: ST_TO_ADDR
// result := true ;
76820: LD_ADDR_VAR 0 4
76824: PUSH
76825: LD_INT 1
76827: ST_TO_ADDR
// end ;
76828: LD_VAR 0 4
76832: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
76833: LD_INT 0
76835: PPUSH
76836: PPUSH
76837: PPUSH
// if not unit in minersList then
76838: LD_VAR 0 1
76842: PUSH
76843: LD_EXP 106
76847: IN
76848: NOT
76849: IFFALSE 76853
// exit ;
76851: GO 77245
// index := GetElementIndex ( minersList , unit ) ;
76853: LD_ADDR_VAR 0 6
76857: PUSH
76858: LD_EXP 106
76862: PPUSH
76863: LD_VAR 0 1
76867: PPUSH
76868: CALL 20123 0 2
76872: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
76873: LD_ADDR_VAR 0 5
76877: PUSH
76878: DOUBLE
76879: LD_EXP 107
76883: PUSH
76884: LD_VAR 0 6
76888: ARRAY
76889: INC
76890: ST_TO_ADDR
76891: LD_INT 1
76893: PUSH
76894: FOR_DOWNTO
76895: IFFALSE 77056
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
76897: LD_EXP 107
76901: PUSH
76902: LD_VAR 0 6
76906: ARRAY
76907: PUSH
76908: LD_VAR 0 5
76912: ARRAY
76913: PUSH
76914: LD_INT 1
76916: ARRAY
76917: PUSH
76918: LD_VAR 0 2
76922: EQUAL
76923: PUSH
76924: LD_EXP 107
76928: PUSH
76929: LD_VAR 0 6
76933: ARRAY
76934: PUSH
76935: LD_VAR 0 5
76939: ARRAY
76940: PUSH
76941: LD_INT 2
76943: ARRAY
76944: PUSH
76945: LD_VAR 0 3
76949: EQUAL
76950: AND
76951: IFFALSE 77054
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
76953: LD_EXP 107
76957: PUSH
76958: LD_VAR 0 6
76962: ARRAY
76963: PUSH
76964: LD_VAR 0 5
76968: ARRAY
76969: PUSH
76970: LD_INT 1
76972: ARRAY
76973: PPUSH
76974: LD_EXP 107
76978: PUSH
76979: LD_VAR 0 6
76983: ARRAY
76984: PUSH
76985: LD_VAR 0 5
76989: ARRAY
76990: PUSH
76991: LD_INT 2
76993: ARRAY
76994: PPUSH
76995: LD_VAR 0 1
76999: PPUSH
77000: CALL_OW 255
77004: PPUSH
77005: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77009: LD_ADDR_EXP 107
77013: PUSH
77014: LD_EXP 107
77018: PPUSH
77019: LD_VAR 0 6
77023: PPUSH
77024: LD_EXP 107
77028: PUSH
77029: LD_VAR 0 6
77033: ARRAY
77034: PPUSH
77035: LD_VAR 0 5
77039: PPUSH
77040: CALL_OW 3
77044: PPUSH
77045: CALL_OW 1
77049: ST_TO_ADDR
// exit ;
77050: POP
77051: POP
77052: GO 77245
// end ; end ;
77054: GO 76894
77056: POP
77057: POP
// for i := minerMinesList [ index ] downto 1 do
77058: LD_ADDR_VAR 0 5
77062: PUSH
77063: DOUBLE
77064: LD_EXP 107
77068: PUSH
77069: LD_VAR 0 6
77073: ARRAY
77074: INC
77075: ST_TO_ADDR
77076: LD_INT 1
77078: PUSH
77079: FOR_DOWNTO
77080: IFFALSE 77243
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77082: LD_EXP 107
77086: PUSH
77087: LD_VAR 0 6
77091: ARRAY
77092: PUSH
77093: LD_VAR 0 5
77097: ARRAY
77098: PUSH
77099: LD_INT 1
77101: ARRAY
77102: PPUSH
77103: LD_EXP 107
77107: PUSH
77108: LD_VAR 0 6
77112: ARRAY
77113: PUSH
77114: LD_VAR 0 5
77118: ARRAY
77119: PUSH
77120: LD_INT 2
77122: ARRAY
77123: PPUSH
77124: LD_VAR 0 2
77128: PPUSH
77129: LD_VAR 0 3
77133: PPUSH
77134: CALL_OW 298
77138: PUSH
77139: LD_INT 6
77141: LESS
77142: IFFALSE 77241
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77144: LD_EXP 107
77148: PUSH
77149: LD_VAR 0 6
77153: ARRAY
77154: PUSH
77155: LD_VAR 0 5
77159: ARRAY
77160: PUSH
77161: LD_INT 1
77163: ARRAY
77164: PPUSH
77165: LD_EXP 107
77169: PUSH
77170: LD_VAR 0 6
77174: ARRAY
77175: PUSH
77176: LD_VAR 0 5
77180: ARRAY
77181: PUSH
77182: LD_INT 2
77184: ARRAY
77185: PPUSH
77186: LD_VAR 0 1
77190: PPUSH
77191: CALL_OW 255
77195: PPUSH
77196: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77200: LD_ADDR_EXP 107
77204: PUSH
77205: LD_EXP 107
77209: PPUSH
77210: LD_VAR 0 6
77214: PPUSH
77215: LD_EXP 107
77219: PUSH
77220: LD_VAR 0 6
77224: ARRAY
77225: PPUSH
77226: LD_VAR 0 5
77230: PPUSH
77231: CALL_OW 3
77235: PPUSH
77236: CALL_OW 1
77240: ST_TO_ADDR
// end ; end ;
77241: GO 77079
77243: POP
77244: POP
// end ;
77245: LD_VAR 0 4
77249: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77250: LD_INT 0
77252: PPUSH
77253: PPUSH
77254: PPUSH
77255: PPUSH
77256: PPUSH
77257: PPUSH
77258: PPUSH
77259: PPUSH
77260: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77261: LD_VAR 0 1
77265: PPUSH
77266: CALL_OW 264
77270: PUSH
77271: LD_INT 81
77273: EQUAL
77274: NOT
77275: PUSH
77276: LD_VAR 0 1
77280: PUSH
77281: LD_EXP 106
77285: IN
77286: NOT
77287: OR
77288: IFFALSE 77292
// exit ;
77290: GO 77614
// index := GetElementIndex ( minersList , unit ) ;
77292: LD_ADDR_VAR 0 6
77296: PUSH
77297: LD_EXP 106
77301: PPUSH
77302: LD_VAR 0 1
77306: PPUSH
77307: CALL 20123 0 2
77311: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77312: LD_ADDR_VAR 0 8
77316: PUSH
77317: LD_EXP 108
77321: PUSH
77322: LD_EXP 107
77326: PUSH
77327: LD_VAR 0 6
77331: ARRAY
77332: MINUS
77333: ST_TO_ADDR
// if not minesFreeAmount then
77334: LD_VAR 0 8
77338: NOT
77339: IFFALSE 77343
// exit ;
77341: GO 77614
// tmp := [ ] ;
77343: LD_ADDR_VAR 0 7
77347: PUSH
77348: EMPTY
77349: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77350: LD_ADDR_VAR 0 5
77354: PUSH
77355: DOUBLE
77356: LD_INT 1
77358: DEC
77359: ST_TO_ADDR
77360: LD_VAR 0 8
77364: PUSH
77365: FOR_TO
77366: IFFALSE 77561
// begin _d := rand ( 0 , 5 ) ;
77368: LD_ADDR_VAR 0 11
77372: PUSH
77373: LD_INT 0
77375: PPUSH
77376: LD_INT 5
77378: PPUSH
77379: CALL_OW 12
77383: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77384: LD_ADDR_VAR 0 12
77388: PUSH
77389: LD_INT 2
77391: PPUSH
77392: LD_INT 6
77394: PPUSH
77395: CALL_OW 12
77399: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
77400: LD_ADDR_VAR 0 9
77404: PUSH
77405: LD_VAR 0 2
77409: PPUSH
77410: LD_VAR 0 11
77414: PPUSH
77415: LD_VAR 0 12
77419: PPUSH
77420: CALL_OW 272
77424: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
77425: LD_ADDR_VAR 0 10
77429: PUSH
77430: LD_VAR 0 3
77434: PPUSH
77435: LD_VAR 0 11
77439: PPUSH
77440: LD_VAR 0 12
77444: PPUSH
77445: CALL_OW 273
77449: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
77450: LD_VAR 0 9
77454: PPUSH
77455: LD_VAR 0 10
77459: PPUSH
77460: CALL_OW 488
77464: PUSH
77465: LD_VAR 0 9
77469: PUSH
77470: LD_VAR 0 10
77474: PUSH
77475: EMPTY
77476: LIST
77477: LIST
77478: PUSH
77479: LD_VAR 0 7
77483: IN
77484: NOT
77485: AND
77486: PUSH
77487: LD_VAR 0 9
77491: PPUSH
77492: LD_VAR 0 10
77496: PPUSH
77497: CALL_OW 458
77501: NOT
77502: AND
77503: IFFALSE 77545
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
77505: LD_ADDR_VAR 0 7
77509: PUSH
77510: LD_VAR 0 7
77514: PPUSH
77515: LD_VAR 0 7
77519: PUSH
77520: LD_INT 1
77522: PLUS
77523: PPUSH
77524: LD_VAR 0 9
77528: PUSH
77529: LD_VAR 0 10
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: PPUSH
77538: CALL_OW 1
77542: ST_TO_ADDR
77543: GO 77559
// i := i - 1 ;
77545: LD_ADDR_VAR 0 5
77549: PUSH
77550: LD_VAR 0 5
77554: PUSH
77555: LD_INT 1
77557: MINUS
77558: ST_TO_ADDR
// end ;
77559: GO 77365
77561: POP
77562: POP
// for i in tmp do
77563: LD_ADDR_VAR 0 5
77567: PUSH
77568: LD_VAR 0 7
77572: PUSH
77573: FOR_IN
77574: IFFALSE 77612
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
77576: LD_VAR 0 1
77580: PPUSH
77581: LD_VAR 0 5
77585: PUSH
77586: LD_INT 1
77588: ARRAY
77589: PPUSH
77590: LD_VAR 0 5
77594: PUSH
77595: LD_INT 2
77597: ARRAY
77598: PPUSH
77599: CALL 76558 0 3
77603: NOT
77604: IFFALSE 77610
// exit ;
77606: POP
77607: POP
77608: GO 77614
77610: GO 77573
77612: POP
77613: POP
// end ;
77614: LD_VAR 0 4
77618: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
77619: LD_INT 0
77621: PPUSH
77622: PPUSH
77623: PPUSH
77624: PPUSH
77625: PPUSH
77626: PPUSH
77627: PPUSH
// if not GetClass ( unit ) = class_sniper then
77628: LD_VAR 0 1
77632: PPUSH
77633: CALL_OW 257
77637: PUSH
77638: LD_INT 5
77640: EQUAL
77641: NOT
77642: IFFALSE 77646
// exit ;
77644: GO 78034
// dist := 8 ;
77646: LD_ADDR_VAR 0 5
77650: PUSH
77651: LD_INT 8
77653: ST_TO_ADDR
// viewRange := 12 ;
77654: LD_ADDR_VAR 0 7
77658: PUSH
77659: LD_INT 12
77661: ST_TO_ADDR
// side := GetSide ( unit ) ;
77662: LD_ADDR_VAR 0 6
77666: PUSH
77667: LD_VAR 0 1
77671: PPUSH
77672: CALL_OW 255
77676: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
77677: LD_INT 61
77679: PPUSH
77680: LD_VAR 0 6
77684: PPUSH
77685: CALL_OW 321
77689: PUSH
77690: LD_INT 2
77692: EQUAL
77693: IFFALSE 77703
// viewRange := 16 ;
77695: LD_ADDR_VAR 0 7
77699: PUSH
77700: LD_INT 16
77702: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
77703: LD_VAR 0 1
77707: PPUSH
77708: LD_VAR 0 2
77712: PPUSH
77713: LD_VAR 0 3
77717: PPUSH
77718: CALL_OW 297
77722: PUSH
77723: LD_VAR 0 5
77727: GREATER
77728: IFFALSE 77807
// begin ComMoveXY ( unit , x , y ) ;
77730: LD_VAR 0 1
77734: PPUSH
77735: LD_VAR 0 2
77739: PPUSH
77740: LD_VAR 0 3
77744: PPUSH
77745: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77749: LD_INT 35
77751: PPUSH
77752: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
77756: LD_VAR 0 1
77760: PPUSH
77761: LD_VAR 0 2
77765: PPUSH
77766: LD_VAR 0 3
77770: PPUSH
77771: CALL 51875 0 3
77775: NOT
77776: IFFALSE 77780
// exit ;
77778: GO 78034
// until GetDistUnitXY ( unit , x , y ) < dist ;
77780: LD_VAR 0 1
77784: PPUSH
77785: LD_VAR 0 2
77789: PPUSH
77790: LD_VAR 0 3
77794: PPUSH
77795: CALL_OW 297
77799: PUSH
77800: LD_VAR 0 5
77804: LESS
77805: IFFALSE 77749
// end ; ComTurnXY ( unit , x , y ) ;
77807: LD_VAR 0 1
77811: PPUSH
77812: LD_VAR 0 2
77816: PPUSH
77817: LD_VAR 0 3
77821: PPUSH
77822: CALL_OW 118
// wait ( 5 ) ;
77826: LD_INT 5
77828: PPUSH
77829: CALL_OW 67
// _d := GetDir ( unit ) ;
77833: LD_ADDR_VAR 0 10
77837: PUSH
77838: LD_VAR 0 1
77842: PPUSH
77843: CALL_OW 254
77847: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
77848: LD_ADDR_VAR 0 8
77852: PUSH
77853: LD_VAR 0 1
77857: PPUSH
77858: CALL_OW 250
77862: PPUSH
77863: LD_VAR 0 10
77867: PPUSH
77868: LD_VAR 0 5
77872: PPUSH
77873: CALL_OW 272
77877: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
77878: LD_ADDR_VAR 0 9
77882: PUSH
77883: LD_VAR 0 1
77887: PPUSH
77888: CALL_OW 251
77892: PPUSH
77893: LD_VAR 0 10
77897: PPUSH
77898: LD_VAR 0 5
77902: PPUSH
77903: CALL_OW 273
77907: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77908: LD_VAR 0 8
77912: PPUSH
77913: LD_VAR 0 9
77917: PPUSH
77918: CALL_OW 488
77922: NOT
77923: IFFALSE 77927
// exit ;
77925: GO 78034
// ComAnimCustom ( unit , 1 ) ;
77927: LD_VAR 0 1
77931: PPUSH
77932: LD_INT 1
77934: PPUSH
77935: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
77939: LD_VAR 0 8
77943: PPUSH
77944: LD_VAR 0 9
77948: PPUSH
77949: LD_VAR 0 6
77953: PPUSH
77954: LD_VAR 0 7
77958: PPUSH
77959: CALL_OW 330
// repeat wait ( 1 ) ;
77963: LD_INT 1
77965: PPUSH
77966: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
77970: LD_VAR 0 1
77974: PPUSH
77975: CALL_OW 316
77979: PUSH
77980: LD_VAR 0 1
77984: PPUSH
77985: CALL_OW 314
77989: OR
77990: PUSH
77991: LD_VAR 0 1
77995: PPUSH
77996: CALL_OW 302
78000: NOT
78001: OR
78002: PUSH
78003: LD_VAR 0 1
78007: PPUSH
78008: CALL_OW 301
78012: OR
78013: IFFALSE 77963
// RemoveSeeing ( _x , _y , side ) ;
78015: LD_VAR 0 8
78019: PPUSH
78020: LD_VAR 0 9
78024: PPUSH
78025: LD_VAR 0 6
78029: PPUSH
78030: CALL_OW 331
// end ;
78034: LD_VAR 0 4
78038: RET
