// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 41 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 5120 0 0
// LoadEnv ;
  16: CALL 4718 0 0
// LoadCam ;
  20: CALL 5334 0 0
// LoadTech ;
  24: CALL 5410 0 0
// LoadBase ;
  28: CALL 5485 0 0
// PrepareArabian ;
  32: CALL 166 0 0
// Action ;
  36: CALL 6056 0 0
// end ;
  40: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; function Init ; begin
  41: LD_INT 0
  43: PPUSH
// debug := false ;
  44: LD_ADDR_EXP 1
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// prefix := 09c_ ;
  52: LD_ADDR_EXP 2
  56: PUSH
  57: LD_STRING 09c_
  59: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_STRING 09_tick
  67: PPUSH
  68: LD_INT 31500
  70: PPUSH
  71: CALL_OW 30
  75: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  76: LD_ADDR_EXP 4
  80: PUSH
  81: LD_STRING 09c_tick
  83: PPUSH
  84: LD_INT 10500
  86: PPUSH
  87: CALL_OW 30
  91: ST_TO_ADDR
// playerInBase := false ;
  92: LD_ADDR_EXP 5
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// kamikazeTrained := false ;
 100: LD_ADDR_EXP 6
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// apeDriver := false ;
 108: LD_ADDR_EXP 8
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 116: LD_ADDR_EXP 7
 120: PUSH
 121: LD_INT 120
 123: PUSH
 124: LD_INT 150
 126: PUSH
 127: LD_INT 180
 129: PUSH
 130: LD_INT 220
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: LIST
 137: LIST
 138: PUSH
 139: LD_OWVAR 67
 143: ARRAY
 144: ST_TO_ADDR
// missionTime := 0 0$00 ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// ruDefeated := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// end ; end_of_file
 161: LD_VAR 0 1
 165: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
 170: PPUSH
 171: PPUSH
 172: PPUSH
 173: PPUSH
 174: PPUSH
 175: PPUSH
 176: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 177: LD_STRING 05_DrugsTested
 179: PPUSH
 180: LD_EXP 1
 184: PPUSH
 185: CALL_OW 30
 189: IFFALSE 204
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 191: LD_INT 5
 193: PPUSH
 194: LD_INT 2
 196: PPUSH
 197: LD_INT 2
 199: PPUSH
 200: CALL_OW 322
// uc_side := 2 ;
 204: LD_ADDR_OWVAR 20
 208: PUSH
 209: LD_INT 2
 211: ST_TO_ADDR
// uc_nation := nation_nature ;
 212: LD_ADDR_OWVAR 21
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 220: LD_ADDR_VAR 0 3
 224: PUSH
 225: LD_STRING 09_apes
 227: PPUSH
 228: CALL_OW 31
 232: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 233: LD_ADDR_VAR 0 6
 237: PUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 2
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: LD_INT 30
 253: PUSH
 254: LD_INT 0
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: LD_INT 30
 263: PUSH
 264: LD_INT 1
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: LIST
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PPUSH
 280: CALL_OW 69
 284: ST_TO_ADDR
// if apes then
 285: LD_VAR 0 3
 289: IFFALSE 368
// for i in apes do
 291: LD_ADDR_VAR 0 2
 295: PUSH
 296: LD_VAR 0 3
 300: PUSH
 301: FOR_IN
 302: IFFALSE 366
// if UnitsInside ( b [ 1 ] ) < 6 then
 304: LD_VAR 0 6
 308: PUSH
 309: LD_INT 1
 311: ARRAY
 312: PPUSH
 313: CALL_OW 313
 317: PUSH
 318: LD_INT 6
 320: LESS
 321: IFFALSE 343
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 323: LD_VAR 0 2
 327: PPUSH
 328: LD_VAR 0 6
 332: PUSH
 333: LD_INT 1
 335: ARRAY
 336: PPUSH
 337: CALL_OW 52
 341: GO 364
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_INT 82
 350: PPUSH
 351: LD_INT 27
 353: PPUSH
 354: LD_INT 6
 356: PPUSH
 357: LD_INT 0
 359: PPUSH
 360: CALL_OW 50
 364: GO 301
 366: POP
 367: POP
// InitHC_All ( ) ;
 368: CALL_OW 584
// uc_nation := nation_arabian ;
 372: LD_ADDR_OWVAR 21
 376: PUSH
 377: LD_INT 2
 379: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 380: LD_ADDR_VAR 0 6
 384: PUSH
 385: LD_INT 22
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PUSH
 395: LD_INT 21
 397: PUSH
 398: LD_INT 3
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: LD_INT 2
 407: PUSH
 408: LD_INT 30
 410: PUSH
 411: LD_INT 32
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: LD_INT 30
 420: PUSH
 421: LD_INT 4
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 5
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PPUSH
 449: CALL_OW 69
 453: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 454: LD_ADDR_EXP 31
 458: PUSH
 459: LD_STRING Rolf
 461: PPUSH
 462: LD_EXP 1
 466: NOT
 467: PPUSH
 468: LD_STRING 06_
 470: PPUSH
 471: CALL 8672 0 3
 475: ST_TO_ADDR
// if Rolf then
 476: LD_EXP 31
 480: IFFALSE 689
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 482: LD_ADDR_EXP 30
 486: PUSH
 487: LD_STRING 06_RolfSquad
 489: PPUSH
 490: CALL_OW 31
 494: ST_TO_ADDR
// if rolfSquad < 3 then
 495: LD_EXP 30
 499: PUSH
 500: LD_INT 3
 502: LESS
 503: IFFALSE 566
// for i := 1 to 3 - Count ( rolfSquad ) do
 505: LD_ADDR_VAR 0 2
 509: PUSH
 510: DOUBLE
 511: LD_INT 1
 513: DEC
 514: ST_TO_ADDR
 515: LD_INT 3
 517: PUSH
 518: LD_EXP 30
 522: PPUSH
 523: CALL 10774 0 1
 527: MINUS
 528: PUSH
 529: FOR_TO
 530: IFFALSE 564
// begin PrepareSoldier ( false , 4 ) ;
 532: LD_INT 0
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 542: LD_ADDR_EXP 30
 546: PUSH
 547: LD_EXP 30
 551: PPUSH
 552: CALL_OW 44
 556: PPUSH
 557: CALL 46140 0 2
 561: ST_TO_ADDR
// end ;
 562: GO 529
 564: POP
 565: POP
// if b then
 566: LD_VAR 0 6
 570: IFFALSE 645
// begin for i in rolfSquad union Rolf do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: LD_EXP 30
 581: PUSH
 582: LD_EXP 31
 586: UNION
 587: PUSH
 588: FOR_IN
 589: IFFALSE 641
// begin SetClass ( i , 1 ) ;
 591: LD_VAR 0 2
 595: PPUSH
 596: LD_INT 1
 598: PPUSH
 599: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_VAR 0 6
 612: PPUSH
 613: LD_INT 3
 615: PUSH
 616: LD_INT 62
 618: PUSH
 619: EMPTY
 620: LIST
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: PPUSH
 626: CALL_OW 72
 630: PUSH
 631: LD_INT 1
 633: ARRAY
 634: PPUSH
 635: CALL_OW 52
// end ;
 639: GO 588
 641: POP
 642: POP
// end else
 643: GO 689
// for i in rolfSquad union Rolf do
 645: LD_ADDR_VAR 0 2
 649: PUSH
 650: LD_EXP 30
 654: PUSH
 655: LD_EXP 31
 659: UNION
 660: PUSH
 661: FOR_IN
 662: IFFALSE 687
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 664: LD_VAR 0 2
 668: PPUSH
 669: LD_INT 82
 671: PPUSH
 672: LD_INT 27
 674: PPUSH
 675: LD_INT 6
 677: PPUSH
 678: LD_INT 0
 680: PPUSH
 681: CALL_OW 50
 685: GO 661
 687: POP
 688: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 689: LD_ADDR_EXP 11
 693: PUSH
 694: LD_STRING Heike
 696: PPUSH
 697: LD_EXP 1
 701: NOT
 702: PPUSH
 703: LD_EXP 2
 707: PPUSH
 708: CALL 8672 0 3
 712: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 713: LD_ADDR_EXP 14
 717: PUSH
 718: LD_STRING Ibrahim
 720: PPUSH
 721: LD_EXP 1
 725: NOT
 726: PPUSH
 727: LD_EXP 2
 731: PPUSH
 732: CALL 8672 0 3
 736: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 737: LD_ADDR_EXP 12
 741: PUSH
 742: LD_STRING Givi
 744: PPUSH
 745: LD_EXP 1
 749: NOT
 750: PPUSH
 751: LD_EXP 2
 755: PPUSH
 756: CALL 8672 0 3
 760: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 761: LD_ADDR_EXP 15
 765: PUSH
 766: LD_STRING Kamil
 768: PPUSH
 769: LD_EXP 1
 773: NOT
 774: PPUSH
 775: LD_EXP 2
 779: PPUSH
 780: CALL 8672 0 3
 784: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 785: LD_ADDR_EXP 16
 789: PUSH
 790: LD_STRING Kaia
 792: PPUSH
 793: LD_EXP 1
 797: NOT
 798: PPUSH
 799: LD_EXP 2
 803: PPUSH
 804: CALL 8672 0 3
 808: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 809: LD_ADDR_EXP 17
 813: PUSH
 814: LD_STRING Sophia
 816: PPUSH
 817: LD_EXP 1
 821: NOT
 822: PPUSH
 823: LD_EXP 2
 827: PPUSH
 828: CALL 8672 0 3
 832: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 833: LD_ADDR_EXP 18
 837: PUSH
 838: LD_STRING Markov
 840: PPUSH
 841: LD_EXP 1
 845: NOT
 846: PPUSH
 847: LD_EXP 2
 851: PPUSH
 852: CALL 8672 0 3
 856: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 857: LD_ADDR_EXP 21
 861: PUSH
 862: LD_STRING Aviradze
 864: PPUSH
 865: LD_EXP 1
 869: NOT
 870: PPUSH
 871: LD_EXP 2
 875: PPUSH
 876: CALL 8672 0 3
 880: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 881: LD_ADDR_EXP 20
 885: PUSH
 886: LD_STRING Kurt
 888: PPUSH
 889: LD_EXP 1
 893: NOT
 894: PPUSH
 895: LD_EXP 2
 899: PPUSH
 900: CALL 8672 0 3
 904: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 905: LD_ADDR_EXP 13
 909: PUSH
 910: LD_STRING Mike
 912: PPUSH
 913: LD_EXP 1
 917: NOT
 918: PPUSH
 919: LD_EXP 2
 923: PPUSH
 924: CALL 8672 0 3
 928: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 929: LD_ADDR_EXP 19
 933: PUSH
 934: LD_STRING Olaf
 936: PPUSH
 937: LD_EXP 1
 941: NOT
 942: PPUSH
 943: LD_EXP 2
 947: PPUSH
 948: CALL 8672 0 3
 952: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 953: LD_ADDR_EXP 28
 957: PUSH
 958: LD_STRING 09c_heikeSecondSquad
 960: PPUSH
 961: CALL_OW 31
 965: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 966: LD_ADDR_EXP 22
 970: PUSH
 971: LD_STRING Schulz
 973: PPUSH
 974: LD_EXP 1
 978: NOT
 979: PPUSH
 980: LD_EXP 2
 984: PPUSH
 985: CALL 8672 0 3
 989: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
 990: LD_ADDR_EXP 23
 994: PUSH
 995: LD_STRING Basim
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 2
1008: PPUSH
1009: CALL 8672 0 3
1013: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1014: LD_ADDR_EXP 24
1018: PUSH
1019: LD_STRING Lemmy
1021: PPUSH
1022: LD_EXP 1
1026: NOT
1027: PPUSH
1028: LD_EXP 2
1032: PPUSH
1033: CALL 8672 0 3
1037: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1038: LD_ADDR_EXP 25
1042: PUSH
1043: LD_STRING Mia
1045: PPUSH
1046: LD_EXP 1
1050: NOT
1051: PPUSH
1052: LD_EXP 2
1056: PPUSH
1057: CALL 8672 0 3
1061: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1062: LD_ADDR_EXP 26
1066: PUSH
1067: LD_STRING Nia
1069: PPUSH
1070: LD_EXP 1
1074: NOT
1075: PPUSH
1076: LD_EXP 2
1080: PPUSH
1081: CALL 8672 0 3
1085: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1086: LD_ADDR_EXP 27
1090: PUSH
1091: LD_STRING Jenna
1093: PPUSH
1094: LD_EXP 1
1098: NOT
1099: PPUSH
1100: LD_EXP 2
1104: PPUSH
1105: CALL 8672 0 3
1109: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1110: LD_ADDR_EXP 29
1114: PUSH
1115: LD_STRING 09c_schulzSecondSquad
1117: PPUSH
1118: CALL_OW 31
1122: ST_TO_ADDR
// vehicles := LoadVariable ( 09_vehicles , [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , - 2 , 1 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 2 ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 90 , 0 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 90 , 0 , 3 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , 0 , 4 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 5 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 6 ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 3 , 90 , 0 , 7 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 8 ] , ] ) ;
1123: LD_ADDR_VAR 0 9
1127: PUSH
1128: LD_STRING 09_vehicles
1130: PPUSH
1131: LD_INT 14
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 27
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: LD_INT 90
1148: PUSH
1149: LD_INT 2
1151: NEG
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_INT 14
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 30
1177: PUSH
1178: LD_INT 2
1180: PUSH
1181: LD_INT 90
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 2
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: PUSH
1200: LD_INT 14
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 2
1208: PUSH
1209: LD_INT 27
1211: PUSH
1212: LD_INT 2
1214: PUSH
1215: LD_INT 90
1217: PUSH
1218: LD_INT 0
1220: PUSH
1221: LD_INT 0
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 14
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 1
1242: PUSH
1243: LD_INT 31
1245: PUSH
1246: LD_INT 2
1248: PUSH
1249: LD_INT 90
1251: PUSH
1252: LD_INT 0
1254: PUSH
1255: LD_INT 3
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 14
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 1
1276: PUSH
1277: LD_INT 27
1279: PUSH
1280: LD_INT 2
1282: PUSH
1283: LD_INT 90
1285: PUSH
1286: LD_INT 0
1288: PUSH
1289: LD_INT 4
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 13
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 28
1313: PUSH
1314: LD_INT 2
1316: PUSH
1317: LD_INT 90
1319: PUSH
1320: LD_INT 0
1322: PUSH
1323: LD_INT 5
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: PUSH
1336: LD_INT 13
1338: PUSH
1339: LD_INT 1
1341: PUSH
1342: LD_INT 1
1344: PUSH
1345: LD_INT 28
1347: PUSH
1348: LD_INT 2
1350: PUSH
1351: LD_INT 90
1353: PUSH
1354: LD_INT 0
1356: PUSH
1357: LD_INT 6
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_INT 22
1372: PUSH
1373: LD_INT 1
1375: PUSH
1376: LD_INT 1
1378: PUSH
1379: LD_INT 45
1381: PUSH
1382: LD_INT 3
1384: PUSH
1385: LD_INT 90
1387: PUSH
1388: LD_INT 0
1390: PUSH
1391: LD_INT 7
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 13
1406: PUSH
1407: LD_INT 1
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: LD_INT 30
1415: PUSH
1416: LD_INT 2
1418: PUSH
1419: LD_INT 90
1421: PUSH
1422: LD_INT 0
1424: PUSH
1425: LD_INT 8
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL_OW 30
1453: ST_TO_ADDR
// SpawnInto ( Heike , LoadVariable ( 09_Heike_ID , - 1 ) , vehicles ) ;
1454: LD_EXP 11
1458: PPUSH
1459: LD_STRING 09_Heike_ID
1461: PPUSH
1462: LD_INT 1
1464: NEG
1465: PPUSH
1466: CALL_OW 30
1470: PPUSH
1471: LD_VAR 0 9
1475: PPUSH
1476: CALL 2256 0 3
// SpawnInto ( Givi , LoadVariable ( 09_Givi_ID , - 1 ) , vehicles ) ;
1480: LD_EXP 12
1484: PPUSH
1485: LD_STRING 09_Givi_ID
1487: PPUSH
1488: LD_INT 1
1490: NEG
1491: PPUSH
1492: CALL_OW 30
1496: PPUSH
1497: LD_VAR 0 9
1501: PPUSH
1502: CALL 2256 0 3
// SpawnInto ( Mike , LoadVariable ( 09_Mike_ID , - 1 ) , vehicles ) ;
1506: LD_EXP 13
1510: PPUSH
1511: LD_STRING 09_Mike_ID
1513: PPUSH
1514: LD_INT 1
1516: NEG
1517: PPUSH
1518: CALL_OW 30
1522: PPUSH
1523: LD_VAR 0 9
1527: PPUSH
1528: CALL 2256 0 3
// SpawnInto ( Ibrahim , LoadVariable ( 09_Ibrahim_ID , - 1 ) , vehicles ) ;
1532: LD_EXP 14
1536: PPUSH
1537: LD_STRING 09_Ibrahim_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2256 0 3
// SpawnInto ( Kamil , LoadVariable ( 09_Kamil_ID , - 1 ) , vehicles ) ;
1558: LD_EXP 15
1562: PPUSH
1563: LD_STRING 09_Kamil_ID
1565: PPUSH
1566: LD_INT 1
1568: NEG
1569: PPUSH
1570: CALL_OW 30
1574: PPUSH
1575: LD_VAR 0 9
1579: PPUSH
1580: CALL 2256 0 3
// SpawnInto ( Kaia , LoadVariable ( 09_Kaia_ID , - 1 ) , vehicles ) ;
1584: LD_EXP 16
1588: PPUSH
1589: LD_STRING 09_Kaia_ID
1591: PPUSH
1592: LD_INT 1
1594: NEG
1595: PPUSH
1596: CALL_OW 30
1600: PPUSH
1601: LD_VAR 0 9
1605: PPUSH
1606: CALL 2256 0 3
// SpawnInto ( Sophia , LoadVariable ( 09_Sophia_ID , - 1 ) , vehicles ) ;
1610: LD_EXP 17
1614: PPUSH
1615: LD_STRING 09_Sophia_ID
1617: PPUSH
1618: LD_INT 1
1620: NEG
1621: PPUSH
1622: CALL_OW 30
1626: PPUSH
1627: LD_VAR 0 9
1631: PPUSH
1632: CALL 2256 0 3
// SpawnInto ( Markov , LoadVariable ( 09_Markov_ID , - 1 ) , vehicles ) ;
1636: LD_EXP 18
1640: PPUSH
1641: LD_STRING 09_Markov_ID
1643: PPUSH
1644: LD_INT 1
1646: NEG
1647: PPUSH
1648: CALL_OW 30
1652: PPUSH
1653: LD_VAR 0 9
1657: PPUSH
1658: CALL 2256 0 3
// SpawnInto ( Olaf , LoadVariable ( 09_Olaf_ID , - 1 ) , vehicles ) ;
1662: LD_EXP 19
1666: PPUSH
1667: LD_STRING 09_Olaf_ID
1669: PPUSH
1670: LD_INT 1
1672: NEG
1673: PPUSH
1674: CALL_OW 30
1678: PPUSH
1679: LD_VAR 0 9
1683: PPUSH
1684: CALL 2256 0 3
// SpawnInto ( Kurt , LoadVariable ( 09_Kurt_ID , - 1 ) , vehicles ) ;
1688: LD_EXP 20
1692: PPUSH
1693: LD_STRING 09_Kurt_ID
1695: PPUSH
1696: LD_INT 1
1698: NEG
1699: PPUSH
1700: CALL_OW 30
1704: PPUSH
1705: LD_VAR 0 9
1709: PPUSH
1710: CALL 2256 0 3
// SpawnInto ( Aviradze , LoadVariable ( 09_Aviradze_ID , - 1 ) , vehicles ) ;
1714: LD_EXP 21
1718: PPUSH
1719: LD_STRING 09_Aviradze_ID
1721: PPUSH
1722: LD_INT 1
1724: NEG
1725: PPUSH
1726: CALL_OW 30
1730: PPUSH
1731: LD_VAR 0 9
1735: PPUSH
1736: CALL 2256 0 3
// SpawnInto ( Schulz , LoadVariable ( 09_Schulz_ID , 1 ) , vehicles ) ;
1740: LD_EXP 22
1744: PPUSH
1745: LD_STRING 09_Schulz_ID
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 30
1755: PPUSH
1756: LD_VAR 0 9
1760: PPUSH
1761: CALL 2256 0 3
// SpawnInto ( Lemmy , LoadVariable ( 09_Lemmy_ID , 2 ) , vehicles ) ;
1765: LD_EXP 24
1769: PPUSH
1770: LD_STRING 09_Lemmy_ID
1772: PPUSH
1773: LD_INT 2
1775: PPUSH
1776: CALL_OW 30
1780: PPUSH
1781: LD_VAR 0 9
1785: PPUSH
1786: CALL 2256 0 3
// SpawnInto ( Mia , LoadVariable ( 09_Mia_ID , 3 ) , vehicles ) ;
1790: LD_EXP 25
1794: PPUSH
1795: LD_STRING 09_Mia_ID
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: CALL_OW 30
1805: PPUSH
1806: LD_VAR 0 9
1810: PPUSH
1811: CALL 2256 0 3
// SpawnInto ( Nia , LoadVariable ( 09_Nia_ID , 4 ) , vehicles ) ;
1815: LD_EXP 26
1819: PPUSH
1820: LD_STRING 09_Nia_ID
1822: PPUSH
1823: LD_INT 4
1825: PPUSH
1826: CALL_OW 30
1830: PPUSH
1831: LD_VAR 0 9
1835: PPUSH
1836: CALL 2256 0 3
// SpawnInto ( Jenna , LoadVariable ( 09_Jenna_ID , 5 ) , vehicles ) ;
1840: LD_EXP 27
1844: PPUSH
1845: LD_STRING 09_Jenna_ID
1847: PPUSH
1848: LD_INT 5
1850: PPUSH
1851: CALL_OW 30
1855: PPUSH
1856: LD_VAR 0 9
1860: PPUSH
1861: CALL 2256 0 3
// SpawnInto ( Basim , LoadVariable ( 09_Basim_ID , 0 ) , vehicles ) ;
1865: LD_EXP 23
1869: PPUSH
1870: LD_STRING 09_Basim_ID
1872: PPUSH
1873: LD_INT 0
1875: PPUSH
1876: CALL_OW 30
1880: PPUSH
1881: LD_VAR 0 9
1885: PPUSH
1886: CALL 2256 0 3
// for i := 1 to schulzSecondSquad do
1890: LD_ADDR_VAR 0 2
1894: PUSH
1895: DOUBLE
1896: LD_INT 1
1898: DEC
1899: ST_TO_ADDR
1900: LD_EXP 29
1904: PUSH
1905: FOR_TO
1906: IFFALSE 1953
// SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 5 + i ) , vehicles ) ;
1908: LD_EXP 29
1912: PUSH
1913: LD_VAR 0 2
1917: ARRAY
1918: PPUSH
1919: LD_STRING 09c_random_ID_
1921: PUSH
1922: LD_VAR 0 2
1926: STR
1927: PPUSH
1928: LD_INT 5
1930: PUSH
1931: LD_VAR 0 2
1935: PLUS
1936: PPUSH
1937: CALL_OW 30
1941: PPUSH
1942: LD_VAR 0 9
1946: PPUSH
1947: CALL 2256 0 3
1951: GO 1905
1953: POP
1954: POP
// for i := 1 to heikeSecondSquad do
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: DOUBLE
1961: LD_INT 1
1963: DEC
1964: ST_TO_ADDR
1965: LD_EXP 28
1969: PUSH
1970: FOR_TO
1971: IFFALSE 2018
// SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 5 + i ) , vehicles ) ;
1973: LD_EXP 28
1977: PUSH
1978: LD_VAR 0 2
1982: ARRAY
1983: PPUSH
1984: LD_STRING 09c_random_ID_
1986: PUSH
1987: LD_VAR 0 2
1991: STR
1992: PPUSH
1993: LD_INT 5
1995: PUSH
1996: LD_VAR 0 2
2000: PLUS
2001: PPUSH
2002: CALL_OW 30
2006: PPUSH
2007: LD_VAR 0 9
2011: PPUSH
2012: CALL 2256 0 3
2016: GO 1970
2018: POP
2019: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2020: LD_INT 22
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 34
2032: PUSH
2033: LD_INT 31
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 69
2048: IFFALSE 2251
// begin for j := Count ( vehicles ) downto 1 do
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: DOUBLE
2056: LD_VAR 0 9
2060: PPUSH
2061: CALL 10774 0 1
2065: INC
2066: ST_TO_ADDR
2067: LD_INT 1
2069: PUSH
2070: FOR_DOWNTO
2071: IFFALSE 2249
// begin i := vehicles [ j ] ;
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 7
2087: ARRAY
2088: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2089: LD_VAR 0 2
2093: PUSH
2094: LD_INT 3
2096: ARRAY
2097: PUSH
2098: LD_INT 2
2100: EQUAL
2101: IFFALSE 2247
// begin uc_side := 2 ;
2103: LD_ADDR_OWVAR 20
2107: PUSH
2108: LD_INT 2
2110: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2111: LD_ADDR_OWVAR 21
2115: PUSH
2116: LD_VAR 0 2
2120: PUSH
2121: LD_INT 5
2123: ARRAY
2124: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2125: LD_VAR 0 2
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: LD_VAR 0 2
2138: PUSH
2139: LD_INT 2
2141: ARRAY
2142: PPUSH
2143: LD_VAR 0 2
2147: PUSH
2148: LD_INT 3
2150: ARRAY
2151: PPUSH
2152: LD_VAR 0 2
2156: PUSH
2157: LD_INT 4
2159: ARRAY
2160: PPUSH
2161: LD_VAR 0 2
2165: PUSH
2166: LD_INT 6
2168: ARRAY
2169: PPUSH
2170: CALL 13687 0 5
// veh := CreateVehicle ;
2174: LD_ADDR_VAR 0 8
2178: PUSH
2179: CALL_OW 45
2183: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2184: LD_VAR 0 8
2188: PPUSH
2189: LD_INT 5
2191: PPUSH
2192: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2196: LD_VAR 0 8
2200: PPUSH
2201: LD_INT 7
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2211: LD_ADDR_VAR 0 9
2215: PUSH
2216: LD_VAR 0 9
2220: PPUSH
2221: LD_VAR 0 7
2225: PPUSH
2226: CALL_OW 3
2230: ST_TO_ADDR
// Connect ( veh ) ;
2231: LD_VAR 0 8
2235: PPUSH
2236: CALL 16778 0 1
// wait ( 0 0$0.3 ) ;
2240: LD_INT 10
2242: PPUSH
2243: CALL_OW 67
// end ; end ;
2247: GO 2070
2249: POP
2250: POP
// end ; end ;
2251: LD_VAR 0 1
2255: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2256: LD_INT 0
2258: PPUSH
2259: PPUSH
2260: PPUSH
// for i in vehicles do
2261: LD_ADDR_VAR 0 5
2265: PUSH
2266: LD_VAR 0 3
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2498
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2274: LD_VAR 0 5
2278: PUSH
2279: LD_INT 8
2281: ARRAY
2282: PUSH
2283: LD_VAR 0 2
2287: EQUAL
2288: PUSH
2289: LD_VAR 0 5
2293: PUSH
2294: LD_INT 3
2296: ARRAY
2297: PUSH
2298: LD_INT 1
2300: EQUAL
2301: AND
2302: IFFALSE 2496
// begin uc_side := 2 ;
2304: LD_ADDR_OWVAR 20
2308: PUSH
2309: LD_INT 2
2311: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2312: LD_ADDR_OWVAR 21
2316: PUSH
2317: LD_VAR 0 5
2321: PUSH
2322: LD_INT 5
2324: ARRAY
2325: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2326: LD_VAR 0 5
2330: PUSH
2331: LD_INT 1
2333: ARRAY
2334: PPUSH
2335: LD_VAR 0 5
2339: PUSH
2340: LD_INT 2
2342: ARRAY
2343: PPUSH
2344: LD_VAR 0 5
2348: PUSH
2349: LD_INT 3
2351: ARRAY
2352: PPUSH
2353: LD_VAR 0 5
2357: PUSH
2358: LD_INT 4
2360: ARRAY
2361: PPUSH
2362: LD_VAR 0 5
2366: PUSH
2367: LD_INT 6
2369: ARRAY
2370: PPUSH
2371: CALL 13687 0 5
// veh := CreateVehicle ;
2375: LD_ADDR_VAR 0 6
2379: PUSH
2380: CALL_OW 45
2384: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2385: LD_VAR 0 6
2389: PPUSH
2390: LD_INT 5
2392: PPUSH
2393: CALL_OW 233
// if i [ 7 ] < 0 then
2397: LD_VAR 0 5
2401: PUSH
2402: LD_INT 7
2404: ARRAY
2405: PUSH
2406: LD_INT 0
2408: LESS
2409: IFFALSE 2429
// SetMark ( veh , i [ 7 ] ) ;
2411: LD_VAR 0 6
2415: PPUSH
2416: LD_VAR 0 5
2420: PUSH
2421: LD_INT 7
2423: ARRAY
2424: PPUSH
2425: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2429: LD_VAR 0 6
2433: PPUSH
2434: LD_INT 7
2436: PPUSH
2437: LD_INT 0
2439: PPUSH
2440: CALL 45057 0 3
2444: NOT
2445: IFFALSE 2478
// begin SetDir ( unit , 5 ) ;
2447: LD_VAR 0 1
2451: PPUSH
2452: LD_INT 5
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2459: LD_VAR 0 1
2463: PPUSH
2464: LD_INT 8
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// exit ;
2474: POP
2475: POP
2476: GO 2527
// end ; PlaceHumanInUnit ( unit , veh ) ;
2478: LD_VAR 0 1
2482: PPUSH
2483: LD_VAR 0 6
2487: PPUSH
2488: CALL_OW 52
// exit ;
2492: POP
2493: POP
2494: GO 2527
// end ;
2496: GO 2271
2498: POP
2499: POP
// SetDir ( unit , 5 ) ;
2500: LD_VAR 0 1
2504: PPUSH
2505: LD_INT 5
2507: PPUSH
2508: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2512: LD_VAR 0 1
2516: PPUSH
2517: LD_INT 8
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: CALL_OW 49
// end ; end_of_file
2527: LD_VAR 0 4
2531: RET
// export function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
2532: LD_INT 0
2534: PPUSH
2535: PPUSH
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
2543: PPUSH
// result := [ ] ;
2544: LD_ADDR_VAR 0 3
2548: PUSH
2549: EMPTY
2550: ST_TO_ADDR
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
2551: LD_ADDR_VAR 0 8
2555: PUSH
2556: LD_INT 6
2558: PUSH
2559: LD_INT 7
2561: PUSH
2562: LD_INT 8
2564: PUSH
2565: LD_INT 9
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_OWVAR 67
2578: ARRAY
2579: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
2580: LD_ADDR_VAR 0 9
2584: PUSH
2585: LD_INT 15
2587: PUSH
2588: LD_INT 17
2590: PUSH
2591: LD_INT 19
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: LIST
2598: PUSH
2599: LD_VAR 0 1
2603: ARRAY
2604: ST_TO_ADDR
// parking := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
2605: LD_ADDR_VAR 0 10
2609: PUSH
2610: LD_INT 15
2612: PUSH
2613: LD_INT 17
2615: PUSH
2616: LD_INT 19
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: LIST
2623: PUSH
2624: LD_VAR 0 1
2628: ARRAY
2629: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
2630: LD_ADDR_VAR 0 11
2634: PUSH
2635: LD_INT 5
2637: PUSH
2638: LD_INT 0
2640: PUSH
2641: LD_INT 2
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: PUSH
2649: LD_VAR 0 1
2653: ARRAY
2654: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_side , 0 ] ) then
2655: LD_VAR 0 9
2659: PPUSH
2660: LD_INT 22
2662: PUSH
2663: LD_INT 0
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PPUSH
2670: CALL_OW 70
2674: IFFALSE 2717
// for i in FilterUnitsInArea ( area , [ f_side , 0 ] ) do
2676: LD_ADDR_VAR 0 4
2680: PUSH
2681: LD_VAR 0 9
2685: PPUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 0
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PPUSH
2696: CALL_OW 70
2700: PUSH
2701: FOR_IN
2702: IFFALSE 2715
// RemoveUnit ( i ) ;
2704: LD_VAR 0 4
2708: PPUSH
2709: CALL_OW 64
2713: GO 2701
2715: POP
2716: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
2717: LD_VAR 0 9
2721: PPUSH
2722: LD_INT 3
2724: PUSH
2725: LD_INT 21
2727: PUSH
2728: LD_INT 1
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: LD_INT 22
2741: PUSH
2742: LD_INT 2
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PPUSH
2753: CALL_OW 70
2757: IFFALSE 2821
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
2759: LD_ADDR_VAR 0 4
2763: PUSH
2764: LD_VAR 0 9
2768: PPUSH
2769: LD_INT 3
2771: PUSH
2772: LD_INT 21
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 22
2788: PUSH
2789: LD_INT 2
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 70
2804: PUSH
2805: FOR_IN
2806: IFFALSE 2819
// KillUnit ( i ) ;
2808: LD_VAR 0 4
2812: PPUSH
2813: CALL_OW 66
2817: GO 2805
2819: POP
2820: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
2821: LD_VAR 0 9
2825: PPUSH
2826: LD_INT 21
2828: PUSH
2829: LD_INT 1
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: LD_INT 22
2838: PUSH
2839: LD_INT 2
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PPUSH
2850: CALL_OW 70
2854: IFFALSE 2917
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
2856: LD_ADDR_VAR 0 4
2860: PUSH
2861: LD_VAR 0 9
2865: PPUSH
2866: LD_INT 21
2868: PUSH
2869: LD_INT 1
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PUSH
2876: LD_INT 22
2878: PUSH
2879: LD_INT 2
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PPUSH
2890: CALL_OW 70
2894: PUSH
2895: FOR_IN
2896: IFFALSE 2915
// ComMoveXY ( i , 91 , 56 ) ;
2898: LD_VAR 0 4
2902: PPUSH
2903: LD_INT 91
2905: PPUSH
2906: LD_INT 56
2908: PPUSH
2909: CALL_OW 111
2913: GO 2895
2915: POP
2916: POP
// repeat wait ( 0 0$1 ) ;
2917: LD_INT 35
2919: PPUSH
2920: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
2924: LD_VAR 0 9
2928: PPUSH
2929: LD_INT 50
2931: PUSH
2932: EMPTY
2933: LIST
2934: PPUSH
2935: CALL_OW 70
2939: NOT
2940: IFFALSE 2917
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
2942: LD_ADDR_VAR 0 4
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_INT 3
2954: PUSH
2955: LD_INT 4
2957: PUSH
2958: LD_INT 5
2960: PUSH
2961: LD_INT 6
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: LD_OWVAR 67
2974: ARRAY
2975: PUSH
2976: LD_VAR 0 2
2980: PLUS
2981: PUSH
2982: FOR_TO
2983: IFFALSE 3290
// begin uc_side := 3 ;
2985: LD_ADDR_OWVAR 20
2989: PUSH
2990: LD_INT 3
2992: ST_TO_ADDR
// uc_nation := nation_russian ;
2993: LD_ADDR_OWVAR 21
2997: PUSH
2998: LD_INT 3
3000: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer ] [ rand ( 1 , 3 ) ] ;
3001: LD_ADDR_VAR 0 12
3005: PUSH
3006: LD_INT 1
3008: PUSH
3009: LD_INT 3
3011: PUSH
3012: LD_INT 3
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: PUSH
3020: LD_INT 1
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: CALL_OW 12
3030: ARRAY
3031: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
3032: LD_INT 22
3034: PUSH
3035: LD_INT 24
3037: PUSH
3038: LD_INT 23
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: LIST
3045: PUSH
3046: LD_VAR 0 4
3050: PUSH
3051: LD_INT 3
3053: MOD
3054: PUSH
3055: LD_INT 1
3057: PLUS
3058: ARRAY
3059: PPUSH
3060: LD_INT 3
3062: PUSH
3063: LD_INT 1
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: LD_INT 1
3072: PPUSH
3073: LD_INT 2
3075: PPUSH
3076: CALL_OW 12
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 12
3086: PPUSH
3087: LD_INT 45
3089: PUSH
3090: LD_INT 46
3092: PUSH
3093: LD_INT 43
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PUSH
3101: LD_VAR 0 4
3105: PUSH
3106: LD_INT 3
3108: MOD
3109: PUSH
3110: LD_INT 1
3112: PLUS
3113: ARRAY
3114: PPUSH
3115: LD_INT 100
3117: PPUSH
3118: CALL 13687 0 5
// veh := CreateVehicle ;
3122: LD_ADDR_VAR 0 7
3126: PUSH
3127: CALL_OW 45
3131: ST_TO_ADDR
// SetDir ( veh , dir ) ;
3132: LD_VAR 0 7
3136: PPUSH
3137: LD_VAR 0 11
3141: PPUSH
3142: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3146: LD_VAR 0 7
3150: PPUSH
3151: LD_VAR 0 9
3155: PPUSH
3156: LD_INT 0
3158: PPUSH
3159: CALL_OW 49
// if control = control_manual then
3163: LD_VAR 0 12
3167: PUSH
3168: LD_INT 1
3170: EQUAL
3171: IFFALSE 3229
// begin uc_side := 3 ;
3173: LD_ADDR_OWVAR 20
3177: PUSH
3178: LD_INT 3
3180: ST_TO_ADDR
// uc_nation := nation_russian ;
3181: LD_ADDR_OWVAR 21
3185: PUSH
3186: LD_INT 3
3188: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
3189: LD_INT 0
3191: PPUSH
3192: LD_VAR 0 8
3196: PPUSH
3197: CALL_OW 383
// PlaceHumanInUnit ( un , veh ) ;
3201: LD_VAR 0 6
3205: PPUSH
3206: LD_VAR 0 7
3210: PPUSH
3211: CALL_OW 52
// SetTag ( un , spot ) ;
3215: LD_VAR 0 6
3219: PPUSH
3220: LD_VAR 0 1
3224: PPUSH
3225: CALL_OW 109
// end ; ComMoveToArea ( veh , area ) ;
3229: LD_VAR 0 7
3233: PPUSH
3234: LD_VAR 0 9
3238: PPUSH
3239: CALL_OW 113
// repeat wait ( 0 0$3 ) ;
3243: LD_INT 105
3245: PPUSH
3246: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
3250: LD_VAR 0 9
3254: PPUSH
3255: LD_INT 50
3257: PUSH
3258: EMPTY
3259: LIST
3260: PPUSH
3261: CALL_OW 70
3265: NOT
3266: IFFALSE 3243
// result := Join ( result , veh ) ;
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: LD_VAR 0 3
3277: PPUSH
3278: LD_VAR 0 7
3282: PPUSH
3283: CALL 46140 0 2
3287: ST_TO_ADDR
// end ;
3288: GO 2982
3290: POP
3291: POP
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] + strength do
3292: LD_ADDR_VAR 0 4
3296: PUSH
3297: DOUBLE
3298: LD_INT 1
3300: DEC
3301: ST_TO_ADDR
3302: LD_INT 1
3304: PUSH
3305: LD_INT 2
3307: PUSH
3308: LD_INT 2
3310: PUSH
3311: LD_INT 3
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: PUSH
3320: LD_OWVAR 67
3324: ARRAY
3325: PUSH
3326: LD_VAR 0 2
3330: PLUS
3331: PUSH
3332: FOR_TO
3333: IFFALSE 3503
// begin uc_side := 3 ;
3335: LD_ADDR_OWVAR 20
3339: PUSH
3340: LD_INT 3
3342: ST_TO_ADDR
// uc_nation := nation_russian ;
3343: LD_ADDR_OWVAR 21
3347: PUSH
3348: LD_INT 3
3350: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3351: LD_INT 0
3353: PPUSH
3354: LD_VAR 0 8
3358: PPUSH
3359: CALL_OW 381
// un := CreateHuman ;
3363: LD_ADDR_VAR 0 6
3367: PUSH
3368: CALL_OW 44
3372: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
3373: LD_INT 30
3375: PUSH
3376: LD_INT 40
3378: PUSH
3379: LD_INT 50
3381: PUSH
3382: LD_INT 50
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: PUSH
3391: LD_OWVAR 67
3395: ARRAY
3396: PPUSH
3397: CALL_OW 13
3401: IFFALSE 3415
// SetClass ( un , class_bazooker ) ;
3403: LD_VAR 0 6
3407: PPUSH
3408: LD_INT 9
3410: PPUSH
3411: CALL_OW 336
// SetDir ( un , dir ) ;
3415: LD_VAR 0 6
3419: PPUSH
3420: LD_VAR 0 11
3424: PPUSH
3425: CALL_OW 233
// SetTag ( un , spot ) ;
3429: LD_VAR 0 6
3433: PPUSH
3434: LD_VAR 0 1
3438: PPUSH
3439: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
3443: LD_VAR 0 6
3447: PPUSH
3448: LD_VAR 0 9
3452: PPUSH
3453: LD_INT 0
3455: PPUSH
3456: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
3460: LD_VAR 0 6
3464: PPUSH
3465: LD_VAR 0 10
3469: PPUSH
3470: CALL_OW 113
// wait ( 0 0$1 ) ;
3474: LD_INT 35
3476: PPUSH
3477: CALL_OW 67
// result := Join ( result , un ) ;
3481: LD_ADDR_VAR 0 3
3485: PUSH
3486: LD_VAR 0 3
3490: PPUSH
3491: LD_VAR 0 6
3495: PPUSH
3496: CALL 46140 0 2
3500: ST_TO_ADDR
// end ;
3501: GO 3332
3503: POP
3504: POP
// end ;
3505: LD_VAR 0 3
3509: RET
// every 0 0$10 do var i , e , attackers , extraAttackers , timeToAttack , wave , strength , spot , extraSpot , paths , enemy ;
3510: GO 3512
3512: DISABLE
3513: LD_INT 0
3515: PPUSH
3516: PPUSH
3517: PPUSH
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
3522: PPUSH
3523: PPUSH
3524: PPUSH
3525: PPUSH
// begin timeToAttack := [ 8 8$00 , 7 7$30 , 7 7$20 , 7 7$10 ] [ Difficulty ] ;
3526: LD_ADDR_VAR 0 5
3530: PUSH
3531: LD_INT 16800
3533: PUSH
3534: LD_INT 15750
3536: PUSH
3537: LD_INT 15400
3539: PUSH
3540: LD_INT 15050
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_OWVAR 67
3553: ARRAY
3554: ST_TO_ADDR
// attackers := [ ] ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: EMPTY
3561: ST_TO_ADDR
// extraAttackers := [ ] ;
3562: LD_ADDR_VAR 0 4
3566: PUSH
3567: EMPTY
3568: ST_TO_ADDR
// wave := 0 ;
3569: LD_ADDR_VAR 0 6
3573: PUSH
3574: LD_INT 0
3576: ST_TO_ADDR
// strength := [ 0 , 1 , 1 , 1 ] [ Difficulty ] ;
3577: LD_ADDR_VAR 0 7
3581: PUSH
3582: LD_INT 0
3584: PUSH
3585: LD_INT 1
3587: PUSH
3588: LD_INT 1
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: PUSH
3600: LD_OWVAR 67
3604: ARRAY
3605: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 86 , 133 ] , [ 76 , 111 ] , [ 61 , 85 ] , [ 38 , 44 ] , [ 48 , 31 ] ] , [ [ 25 , 21 ] , [ 47 , 30 ] ] ] ;
3606: LD_ADDR_VAR 0 10
3610: PUSH
3611: LD_INT 176
3613: PUSH
3614: LD_INT 152
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: PUSH
3621: LD_INT 157
3623: PUSH
3624: LD_INT 122
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: PUSH
3631: LD_INT 146
3633: PUSH
3634: LD_INT 89
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: PUSH
3641: LD_INT 125
3643: PUSH
3644: LD_INT 46
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: PUSH
3657: LD_INT 86
3659: PUSH
3660: LD_INT 133
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 76
3669: PUSH
3670: LD_INT 111
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 61
3679: PUSH
3680: LD_INT 85
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: LD_INT 38
3689: PUSH
3690: LD_INT 44
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 48
3699: PUSH
3700: LD_INT 31
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 25
3716: PUSH
3717: LD_INT 21
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 47
3726: PUSH
3727: LD_INT 30
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: ST_TO_ADDR
// repeat wait ( timeToAttack ) ;
3743: LD_VAR 0 5
3747: PPUSH
3748: CALL_OW 67
// wave := Inc ( wave ) ;
3752: LD_ADDR_VAR 0 6
3756: PUSH
3757: LD_VAR 0 6
3761: PPUSH
3762: CALL 47501 0 1
3766: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
3767: LD_ADDR_VAR 0 8
3771: PUSH
3772: LD_INT 1
3774: PPUSH
3775: LD_INT 3
3777: PPUSH
3778: CALL_OW 12
3782: ST_TO_ADDR
// if wave mod 3 = 0 then
3783: LD_VAR 0 6
3787: PUSH
3788: LD_INT 3
3790: MOD
3791: PUSH
3792: LD_INT 0
3794: EQUAL
3795: IFFALSE 3812
// strength := Inc ( strength ) ;
3797: LD_ADDR_VAR 0 7
3801: PUSH
3802: LD_VAR 0 7
3806: PPUSH
3807: CALL 47501 0 1
3811: ST_TO_ADDR
// attackers := PrepareRussianAttack ( spot , strength ) ;
3812: LD_ADDR_VAR 0 3
3816: PUSH
3817: LD_VAR 0 8
3821: PPUSH
3822: LD_VAR 0 7
3826: PPUSH
3827: CALL 2532 0 2
3831: ST_TO_ADDR
// if wave = [ 5 , 6 , 6 , 7 ] [ Difficulty ] then
3832: LD_VAR 0 6
3836: PUSH
3837: LD_INT 5
3839: PUSH
3840: LD_INT 6
3842: PUSH
3843: LD_INT 6
3845: PUSH
3846: LD_INT 7
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: PUSH
3855: LD_OWVAR 67
3859: ARRAY
3860: EQUAL
3861: IFFALSE 3913
// begin extraSpot := spot - 1 ;
3863: LD_ADDR_VAR 0 9
3867: PUSH
3868: LD_VAR 0 8
3872: PUSH
3873: LD_INT 1
3875: MINUS
3876: ST_TO_ADDR
// if extraSpot < 1 then
3877: LD_VAR 0 9
3881: PUSH
3882: LD_INT 1
3884: LESS
3885: IFFALSE 3895
// extraSpot := 3 ;
3887: LD_ADDR_VAR 0 9
3891: PUSH
3892: LD_INT 3
3894: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , 0 ) ;
3895: LD_ADDR_VAR 0 4
3899: PUSH
3900: LD_VAR 0 9
3904: PPUSH
3905: LD_INT 0
3907: PPUSH
3908: CALL 2532 0 2
3912: ST_TO_ADDR
// end ; timeToAttack := timeToAttack - 0 0$20 ;
3913: LD_ADDR_VAR 0 5
3917: PUSH
3918: LD_VAR 0 5
3922: PUSH
3923: LD_INT 700
3925: MINUS
3926: ST_TO_ADDR
// if timeToAttack < 4 4$00 then
3927: LD_VAR 0 5
3931: PUSH
3932: LD_INT 8400
3934: LESS
3935: IFFALSE 3945
// timeToAttack := 4 4$00 ;
3937: LD_ADDR_VAR 0 5
3941: PUSH
3942: LD_INT 8400
3944: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3945: LD_INT 35
3947: PPUSH
3948: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
3952: LD_ADDR_VAR 0 11
3956: PUSH
3957: LD_INT 22
3959: PUSH
3960: LD_INT 2
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PPUSH
3967: CALL_OW 69
3971: ST_TO_ADDR
// for i in attackers do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: LD_VAR 0 3
3981: PUSH
3982: FOR_IN
3983: IFFALSE 4312
// begin if not IsOk ( i ) then
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 302
3994: NOT
3995: IFFALSE 4013
// attackers := attackers diff i ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_VAR 0 3
4006: PUSH
4007: LD_VAR 0 1
4011: DIFF
4012: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle then
4013: LD_VAR 0 1
4017: PPUSH
4018: CALL_OW 247
4022: PUSH
4023: LD_INT 2
4025: EQUAL
4026: IFFALSE 4050
// AgressiveMove ( i , paths [ spot ] ) else
4028: LD_VAR 0 1
4032: PPUSH
4033: LD_VAR 0 10
4037: PUSH
4038: LD_VAR 0 8
4042: ARRAY
4043: PPUSH
4044: CALL 48744 0 2
4048: GO 4310
// begin if GetClass ( i ) = class_bazooker then
4050: LD_VAR 0 1
4054: PPUSH
4055: CALL_OW 257
4059: PUSH
4060: LD_INT 9
4062: EQUAL
4063: IFFALSE 4286
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
4065: LD_VAR 0 1
4069: PPUSH
4070: LD_VAR 0 11
4074: PPUSH
4075: LD_VAR 0 1
4079: PPUSH
4080: CALL_OW 74
4084: PPUSH
4085: CALL_OW 296
4089: PUSH
4090: LD_INT 12
4092: GREATER
4093: IFFALSE 4121
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
4095: LD_VAR 0 1
4099: PPUSH
4100: LD_VAR 0 11
4104: PPUSH
4105: LD_VAR 0 1
4109: PPUSH
4110: CALL_OW 74
4114: PPUSH
4115: CALL_OW 115
4119: GO 4284
// begin e := NearestUnitToUnit ( enemy , i ) ;
4121: LD_ADDR_VAR 0 2
4125: PUSH
4126: LD_VAR 0 11
4130: PPUSH
4131: LD_VAR 0 1
4135: PPUSH
4136: CALL_OW 74
4140: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
4141: LD_INT 1
4143: PPUSH
4144: LD_INT 3
4146: PPUSH
4147: CALL_OW 12
4151: PUSH
4152: LD_INT 1
4154: DOUBLE
4155: EQUAL
4156: IFTRUE 4160
4158: GO 4177
4160: POP
// ComAttackUnit ( i , e ) ; 2 :
4161: LD_VAR 0 1
4165: PPUSH
4166: LD_VAR 0 2
4170: PPUSH
4171: CALL_OW 115
4175: GO 4284
4177: LD_INT 2
4179: DOUBLE
4180: EQUAL
4181: IFTRUE 4185
4183: GO 4243
4185: POP
// ComSpaceShift ( i , GetX ( e ) + rand ( - 1 , 1 ) , GetY ( e ) + rand ( - 1 , 1 ) ) ; 3 :
4186: LD_VAR 0 1
4190: PPUSH
4191: LD_VAR 0 2
4195: PPUSH
4196: CALL_OW 250
4200: PUSH
4201: LD_INT 1
4203: NEG
4204: PPUSH
4205: LD_INT 1
4207: PPUSH
4208: CALL_OW 12
4212: PLUS
4213: PPUSH
4214: LD_VAR 0 2
4218: PPUSH
4219: CALL_OW 251
4223: PUSH
4224: LD_INT 1
4226: NEG
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: CALL_OW 12
4235: PLUS
4236: PPUSH
4237: CALL_OW 153
4241: GO 4284
4243: LD_INT 3
4245: DOUBLE
4246: EQUAL
4247: IFTRUE 4251
4249: GO 4283
4251: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
4252: LD_VAR 0 1
4256: PPUSH
4257: LD_VAR 0 2
4261: PPUSH
4262: CALL_OW 250
4266: PPUSH
4267: LD_VAR 0 2
4271: PPUSH
4272: CALL_OW 251
4276: PPUSH
4277: CALL_OW 154
4281: GO 4284
4283: POP
// end ; end else
4284: GO 4310
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4286: LD_VAR 0 1
4290: PPUSH
4291: LD_VAR 0 11
4295: PPUSH
4296: LD_VAR 0 1
4300: PPUSH
4301: CALL_OW 74
4305: PPUSH
4306: CALL_OW 115
// end ; end ;
4310: GO 3982
4312: POP
4313: POP
// if extraAttackers then
4314: LD_VAR 0 4
4318: IFFALSE 4662
// begin for i in extraAttackers do
4320: LD_ADDR_VAR 0 1
4324: PUSH
4325: LD_VAR 0 4
4329: PUSH
4330: FOR_IN
4331: IFFALSE 4660
// begin if not IsOk ( i ) then
4333: LD_VAR 0 1
4337: PPUSH
4338: CALL_OW 302
4342: NOT
4343: IFFALSE 4361
// extraAttackers := extraAttackers diff i ;
4345: LD_ADDR_VAR 0 4
4349: PUSH
4350: LD_VAR 0 4
4354: PUSH
4355: LD_VAR 0 1
4359: DIFF
4360: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle then
4361: LD_VAR 0 1
4365: PPUSH
4366: CALL_OW 247
4370: PUSH
4371: LD_INT 2
4373: EQUAL
4374: IFFALSE 4398
// AgressiveMove ( i , paths [ spot ] ) else
4376: LD_VAR 0 1
4380: PPUSH
4381: LD_VAR 0 10
4385: PUSH
4386: LD_VAR 0 8
4390: ARRAY
4391: PPUSH
4392: CALL 48744 0 2
4396: GO 4658
// begin if GetClass ( i ) = class_bazooker then
4398: LD_VAR 0 1
4402: PPUSH
4403: CALL_OW 257
4407: PUSH
4408: LD_INT 9
4410: EQUAL
4411: IFFALSE 4634
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_VAR 0 11
4422: PPUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: CALL_OW 74
4432: PPUSH
4433: CALL_OW 296
4437: PUSH
4438: LD_INT 12
4440: GREATER
4441: IFFALSE 4469
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_VAR 0 11
4452: PPUSH
4453: LD_VAR 0 1
4457: PPUSH
4458: CALL_OW 74
4462: PPUSH
4463: CALL_OW 115
4467: GO 4632
// begin e := NearestUnitToUnit ( enemy , i ) ;
4469: LD_ADDR_VAR 0 2
4473: PUSH
4474: LD_VAR 0 11
4478: PPUSH
4479: LD_VAR 0 1
4483: PPUSH
4484: CALL_OW 74
4488: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
4489: LD_INT 1
4491: PPUSH
4492: LD_INT 3
4494: PPUSH
4495: CALL_OW 12
4499: PUSH
4500: LD_INT 1
4502: DOUBLE
4503: EQUAL
4504: IFTRUE 4508
4506: GO 4525
4508: POP
// ComAttackUnit ( i , e ) ; 2 :
4509: LD_VAR 0 1
4513: PPUSH
4514: LD_VAR 0 2
4518: PPUSH
4519: CALL_OW 115
4523: GO 4632
4525: LD_INT 2
4527: DOUBLE
4528: EQUAL
4529: IFTRUE 4533
4531: GO 4591
4533: POP
// ComSpaceShift ( i , GetX ( e ) + rand ( - 1 , 1 ) , GetY ( e ) + rand ( - 1 , 1 ) ) ; 3 :
4534: LD_VAR 0 1
4538: PPUSH
4539: LD_VAR 0 2
4543: PPUSH
4544: CALL_OW 250
4548: PUSH
4549: LD_INT 1
4551: NEG
4552: PPUSH
4553: LD_INT 1
4555: PPUSH
4556: CALL_OW 12
4560: PLUS
4561: PPUSH
4562: LD_VAR 0 2
4566: PPUSH
4567: CALL_OW 251
4571: PUSH
4572: LD_INT 1
4574: NEG
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: CALL_OW 12
4583: PLUS
4584: PPUSH
4585: CALL_OW 153
4589: GO 4632
4591: LD_INT 3
4593: DOUBLE
4594: EQUAL
4595: IFTRUE 4599
4597: GO 4631
4599: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
4600: LD_VAR 0 1
4604: PPUSH
4605: LD_VAR 0 2
4609: PPUSH
4610: CALL_OW 250
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: CALL_OW 251
4624: PPUSH
4625: CALL_OW 154
4629: GO 4632
4631: POP
// end ; end else
4632: GO 4658
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4634: LD_VAR 0 1
4638: PPUSH
4639: LD_VAR 0 11
4643: PPUSH
4644: LD_VAR 0 1
4648: PPUSH
4649: CALL_OW 74
4653: PPUSH
4654: CALL_OW 115
// end ; end ;
4658: GO 4330
4660: POP
4661: POP
// end ; until not attackers and not extraAttackers ;
4662: LD_VAR 0 3
4666: NOT
4667: PUSH
4668: LD_VAR 0 4
4672: NOT
4673: AND
4674: IFFALSE 3945
// until wave >= [ 6 , 7 , 7 , 8 ] [ Difficulty ] ;
4676: LD_VAR 0 6
4680: PUSH
4681: LD_INT 6
4683: PUSH
4684: LD_INT 7
4686: PUSH
4687: LD_INT 7
4689: PUSH
4690: LD_INT 8
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: PUSH
4699: LD_OWVAR 67
4703: ARRAY
4704: GREATEREQUAL
4705: IFFALSE 3743
// ruDefeated := true ;
4707: LD_ADDR_EXP 10
4711: PUSH
4712: LD_INT 1
4714: ST_TO_ADDR
// end ; end_of_file
4715: PPOPN 11
4717: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
4718: LD_INT 0
4720: PPUSH
4721: PPUSH
4722: PPUSH
4723: PPUSH
4724: PPUSH
4725: PPUSH
4726: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: LD_STRING 09_env
4734: PPUSH
4735: EMPTY
4736: PPUSH
4737: CALL_OW 30
4741: ST_TO_ADDR
// if not tmp then
4742: LD_VAR 0 2
4746: NOT
4747: IFFALSE 4751
// exit ;
4749: GO 5115
// list := ListEnvironmentArea ( mapArea ) ;
4751: LD_ADDR_VAR 0 7
4755: PUSH
4756: LD_INT 4
4758: PPUSH
4759: CALL_OW 353
4763: ST_TO_ADDR
// if not list then
4764: LD_VAR 0 7
4768: NOT
4769: IFFALSE 4773
// exit ;
4771: GO 5115
// for i in list do
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: LD_VAR 0 7
4782: PUSH
4783: FOR_IN
4784: IFFALSE 4892
// begin exist := false ;
4786: LD_ADDR_VAR 0 6
4790: PUSH
4791: LD_INT 0
4793: ST_TO_ADDR
// for j in tmp do
4794: LD_ADDR_VAR 0 4
4798: PUSH
4799: LD_VAR 0 2
4803: PUSH
4804: FOR_IN
4805: IFFALSE 4859
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
4807: LD_VAR 0 3
4811: PUSH
4812: LD_INT 1
4814: ARRAY
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: LD_INT 1
4823: ARRAY
4824: EQUAL
4825: PUSH
4826: LD_VAR 0 3
4830: PUSH
4831: LD_INT 2
4833: ARRAY
4834: PUSH
4835: LD_VAR 0 4
4839: PUSH
4840: LD_INT 2
4842: ARRAY
4843: EQUAL
4844: AND
4845: IFFALSE 4857
// begin exist := true ;
4847: LD_ADDR_VAR 0 6
4851: PUSH
4852: LD_INT 1
4854: ST_TO_ADDR
// break ;
4855: GO 4859
// end ;
4857: GO 4804
4859: POP
4860: POP
// if not exist then
4861: LD_VAR 0 6
4865: NOT
4866: IFFALSE 4890
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
4868: LD_VAR 0 3
4872: PUSH
4873: LD_INT 1
4875: ARRAY
4876: PPUSH
4877: LD_VAR 0 3
4881: PUSH
4882: LD_INT 2
4884: ARRAY
4885: PPUSH
4886: CALL_OW 347
// end ;
4890: GO 4783
4892: POP
4893: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
4894: LD_ADDR_VAR 0 2
4898: PUSH
4899: LD_STRING 09_animals
4901: PPUSH
4902: EMPTY
4903: PPUSH
4904: CALL_OW 30
4908: ST_TO_ADDR
// if not tmp then
4909: LD_VAR 0 2
4913: NOT
4914: IFFALSE 4918
// exit ;
4916: GO 5115
// InitHc_All ( ) ;
4918: CALL_OW 584
// for i in tmp do
4922: LD_ADDR_VAR 0 3
4926: PUSH
4927: LD_VAR 0 2
4931: PUSH
4932: FOR_IN
4933: IFFALSE 5050
// begin uc_side := 0 ;
4935: LD_ADDR_OWVAR 20
4939: PUSH
4940: LD_INT 0
4942: ST_TO_ADDR
// uc_nation := nation_nature ;
4943: LD_ADDR_OWVAR 21
4947: PUSH
4948: LD_INT 0
4950: ST_TO_ADDR
// hc_gallery :=  ;
4951: LD_ADDR_OWVAR 33
4955: PUSH
4956: LD_STRING 
4958: ST_TO_ADDR
// hc_name :=  ;
4959: LD_ADDR_OWVAR 26
4963: PUSH
4964: LD_STRING 
4966: ST_TO_ADDR
// hc_class := i [ 1 ] ;
4967: LD_ADDR_OWVAR 28
4971: PUSH
4972: LD_VAR 0 3
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: ST_TO_ADDR
// un := CreateHuman ;
4981: LD_ADDR_VAR 0 5
4985: PUSH
4986: CALL_OW 44
4990: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
4991: LD_VAR 0 5
4995: PPUSH
4996: LD_VAR 0 3
5000: PUSH
5001: LD_INT 2
5003: ARRAY
5004: PPUSH
5005: LD_VAR 0 3
5009: PUSH
5010: LD_INT 3
5012: ARRAY
5013: PPUSH
5014: LD_VAR 0 3
5018: PUSH
5019: LD_INT 4
5021: ARRAY
5022: PPUSH
5023: LD_INT 0
5025: PPUSH
5026: CALL 48280 0 5
// SetLives ( un , i [ 5 ] ) ;
5030: LD_VAR 0 5
5034: PPUSH
5035: LD_VAR 0 3
5039: PUSH
5040: LD_INT 5
5042: ARRAY
5043: PPUSH
5044: CALL_OW 234
// end ;
5048: GO 4932
5050: POP
5051: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
5052: LD_ADDR_VAR 0 3
5056: PUSH
5057: DOUBLE
5058: LD_INT 1
5060: DEC
5061: ST_TO_ADDR
5062: LD_INT 6
5064: PUSH
5065: LD_INT 5
5067: PUSH
5068: LD_INT 4
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: LD_OWVAR 67
5084: ARRAY
5085: PUSH
5086: FOR_TO
5087: IFFALSE 5113
// begin PrepareApeman ( 5 ) ;
5089: LD_INT 5
5091: PPUSH
5092: CALL 42420 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
5096: CALL_OW 44
5100: PPUSH
5101: LD_INT 5
5103: PPUSH
5104: LD_INT 0
5106: PPUSH
5107: CALL_OW 49
// end ;
5111: GO 5086
5113: POP
5114: POP
// end ;
5115: LD_VAR 0 1
5119: RET
// export function CreateDeposits ; var i , oil , sib ; begin
5120: LD_INT 0
5122: PPUSH
5123: PPUSH
5124: PPUSH
5125: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
5126: LD_ADDR_VAR 0 3
5130: PUSH
5131: LD_INT 91
5133: PUSH
5134: LD_INT 13
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: LD_INT 52
5143: PUSH
5144: LD_INT 23
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 115
5153: PUSH
5154: LD_INT 150
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: LIST
5165: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
5166: LD_ADDR_VAR 0 4
5170: PUSH
5171: LD_INT 82
5173: PUSH
5174: LD_INT 42
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: LD_INT 128
5183: PUSH
5184: LD_INT 132
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: ST_TO_ADDR
// for i in oil do
5195: LD_ADDR_VAR 0 2
5199: PUSH
5200: LD_VAR 0 3
5204: PUSH
5205: FOR_IN
5206: IFFALSE 5260
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
5208: LD_VAR 0 2
5212: PUSH
5213: LD_INT 1
5215: ARRAY
5216: PPUSH
5217: LD_VAR 0 2
5221: PUSH
5222: LD_INT 2
5224: ARRAY
5225: PPUSH
5226: LD_INT 2
5228: PPUSH
5229: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
5233: LD_VAR 0 2
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PPUSH
5242: LD_VAR 0 2
5246: PUSH
5247: LD_INT 2
5249: ARRAY
5250: PPUSH
5251: LD_INT 2
5253: PPUSH
5254: CALL_OW 441
// end ;
5258: GO 5205
5260: POP
5261: POP
// for i in sib do
5262: LD_ADDR_VAR 0 2
5266: PUSH
5267: LD_VAR 0 4
5271: PUSH
5272: FOR_IN
5273: IFFALSE 5327
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
5275: LD_VAR 0 2
5279: PUSH
5280: LD_INT 1
5282: ARRAY
5283: PPUSH
5284: LD_VAR 0 2
5288: PUSH
5289: LD_INT 2
5291: ARRAY
5292: PPUSH
5293: LD_INT 3
5295: PPUSH
5296: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
5300: LD_VAR 0 2
5304: PUSH
5305: LD_INT 1
5307: ARRAY
5308: PPUSH
5309: LD_VAR 0 2
5313: PUSH
5314: LD_INT 2
5316: ARRAY
5317: PPUSH
5318: LD_INT 2
5320: PPUSH
5321: CALL_OW 441
// end ;
5325: GO 5272
5327: POP
5328: POP
// end ;
5329: LD_VAR 0 1
5333: RET
// export function LoadCam ; var i , tmp ; begin
5334: LD_INT 0
5336: PPUSH
5337: PPUSH
5338: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
5339: LD_ADDR_VAR 0 3
5343: PUSH
5344: LD_STRING 09_cameras
5346: PPUSH
5347: EMPTY
5348: PPUSH
5349: CALL_OW 30
5353: ST_TO_ADDR
// if not tmp then
5354: LD_VAR 0 3
5358: NOT
5359: IFFALSE 5363
// exit ;
5361: GO 5405
// for i in tmp do
5363: LD_ADDR_VAR 0 2
5367: PUSH
5368: LD_VAR 0 3
5372: PUSH
5373: FOR_IN
5374: IFFALSE 5403
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
5376: LD_VAR 0 2
5380: PUSH
5381: LD_INT 1
5383: ARRAY
5384: PPUSH
5385: LD_VAR 0 2
5389: PUSH
5390: LD_INT 2
5392: ARRAY
5393: PPUSH
5394: LD_INT 2
5396: PPUSH
5397: CALL_OW 244
5401: GO 5373
5403: POP
5404: POP
// end ;
5405: LD_VAR 0 1
5409: RET
// export function LoadTech ; var i , tmp ; begin
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
// tmp := LoadVariable ( 09_tech , [ ] ) ;
5415: LD_ADDR_VAR 0 3
5419: PUSH
5420: LD_STRING 09_tech
5422: PPUSH
5423: EMPTY
5424: PPUSH
5425: CALL_OW 30
5429: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
5430: LD_ADDR_VAR 0 2
5434: PUSH
5435: DOUBLE
5436: LD_INT 1
5438: DEC
5439: ST_TO_ADDR
5440: LD_VAR 0 3
5444: PPUSH
5445: CALL 10774 0 1
5449: PUSH
5450: FOR_TO
5451: IFFALSE 5478
// SetTech ( i , 2 , tmp [ i ] ) ;
5453: LD_VAR 0 2
5457: PPUSH
5458: LD_INT 2
5460: PPUSH
5461: LD_VAR 0 3
5465: PUSH
5466: LD_VAR 0 2
5470: ARRAY
5471: PPUSH
5472: CALL_OW 322
5476: GO 5450
5478: POP
5479: POP
// end ;
5480: LD_VAR 0 1
5484: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
5485: LD_INT 0
5487: PPUSH
5488: PPUSH
5489: PPUSH
5490: PPUSH
5491: PPUSH
5492: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
5493: LD_ADDR_VAR 0 3
5497: PUSH
5498: LD_STRING 09_buildings
5500: PPUSH
5501: EMPTY
5502: PPUSH
5503: CALL_OW 30
5507: ST_TO_ADDR
// for i in tmp do
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_VAR 0 3
5517: PUSH
5518: FOR_IN
5519: IFFALSE 5801
// begin uc_side := 2 ;
5521: LD_ADDR_OWVAR 20
5525: PUSH
5526: LD_INT 2
5528: ST_TO_ADDR
// uc_nation := nation_arabian ;
5529: LD_ADDR_OWVAR 21
5533: PUSH
5534: LD_INT 2
5536: ST_TO_ADDR
// bc_type := i [ 1 ] ;
5537: LD_ADDR_OWVAR 42
5541: PUSH
5542: LD_VAR 0 2
5546: PUSH
5547: LD_INT 1
5549: ARRAY
5550: ST_TO_ADDR
// bc_level := i [ 5 ] ;
5551: LD_ADDR_OWVAR 43
5555: PUSH
5556: LD_VAR 0 2
5560: PUSH
5561: LD_INT 5
5563: ARRAY
5564: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
5565: LD_ADDR_OWVAR 44
5569: PUSH
5570: LD_INT 9
5572: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
5573: LD_ADDR_OWVAR 45
5577: PUSH
5578: LD_INT 9
5580: ST_TO_ADDR
// if i [ 7 ] then
5581: LD_VAR 0 2
5585: PUSH
5586: LD_INT 7
5588: ARRAY
5589: IFFALSE 5629
// begin bc_kind1 := i [ 7 ] ;
5591: LD_ADDR_OWVAR 44
5595: PUSH
5596: LD_VAR 0 2
5600: PUSH
5601: LD_INT 7
5603: ARRAY
5604: ST_TO_ADDR
// if i [ 8 ] then
5605: LD_VAR 0 2
5609: PUSH
5610: LD_INT 8
5612: ARRAY
5613: IFFALSE 5629
// bc_kind2 := i [ 8 ] ;
5615: LD_ADDR_OWVAR 45
5619: PUSH
5620: LD_VAR 0 2
5624: PUSH
5625: LD_INT 8
5627: ARRAY
5628: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5629: LD_ADDR_VAR 0 4
5633: PUSH
5634: LD_VAR 0 2
5638: PUSH
5639: LD_INT 2
5641: ARRAY
5642: PPUSH
5643: LD_VAR 0 2
5647: PUSH
5648: LD_INT 3
5650: ARRAY
5651: PPUSH
5652: LD_VAR 0 2
5656: PUSH
5657: LD_INT 4
5659: ARRAY
5660: PPUSH
5661: CALL_OW 47
5665: ST_TO_ADDR
// if i [ 8 ] then
5666: LD_VAR 0 2
5670: PUSH
5671: LD_INT 8
5673: ARRAY
5674: IFFALSE 5694
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
5676: LD_VAR 0 4
5680: PPUSH
5681: LD_VAR 0 2
5685: PUSH
5686: LD_INT 8
5688: ARRAY
5689: PPUSH
5690: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
5694: LD_VAR 0 2
5698: PUSH
5699: LD_INT 1
5701: ARRAY
5702: PUSH
5703: LD_INT 0
5705: PUSH
5706: LD_INT 1
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: IN
5713: IFFALSE 5799
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
5715: LD_ADDR_VAR 0 6
5719: PUSH
5720: LD_STRING 09_materials
5722: PPUSH
5723: LD_INT 100
5725: PUSH
5726: LD_INT 50
5728: PUSH
5729: LD_INT 30
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: PPUSH
5740: CALL_OW 30
5744: ST_TO_ADDR
// for j := 1 to 3 do
5745: LD_ADDR_VAR 0 5
5749: PUSH
5750: DOUBLE
5751: LD_INT 1
5753: DEC
5754: ST_TO_ADDR
5755: LD_INT 3
5757: PUSH
5758: FOR_TO
5759: IFFALSE 5797
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] ) ;
5761: LD_VAR 0 4
5765: PPUSH
5766: CALL_OW 274
5770: PPUSH
5771: LD_VAR 0 5
5775: PPUSH
5776: LD_VAR 0 6
5780: PUSH
5781: LD_INT 1
5783: ARRAY
5784: PUSH
5785: LD_VAR 0 5
5789: ARRAY
5790: PPUSH
5791: CALL_OW 277
5795: GO 5758
5797: POP
5798: POP
// end ; end ;
5799: GO 5518
5801: POP
5802: POP
// end ; end_of_file
5803: LD_VAR 0 1
5807: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
5808: LD_VAR 0 1
5812: PPUSH
5813: LD_VAR 0 2
5817: PPUSH
5818: CALL 66278 0 2
// if GetControl ( vehicle ) = control_apeman then
5822: LD_VAR 0 1
5826: PPUSH
5827: CALL_OW 263
5831: PUSH
5832: LD_INT 5
5834: EQUAL
5835: IFFALSE 5845
// apeDriver := true ;
5837: LD_ADDR_EXP 8
5841: PUSH
5842: LD_INT 1
5844: ST_TO_ADDR
// end ;
5845: PPOPN 2
5847: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area ;
5848: LD_INT 0
5850: PPUSH
5851: PPUSH
// begin if GetSide ( driver ) = 3 then
5852: LD_VAR 0 1
5856: PPUSH
5857: CALL_OW 255
5861: PUSH
5862: LD_INT 3
5864: EQUAL
5865: IFFALSE 5976
// begin tag := GetTag ( driver ) ;
5867: LD_ADDR_VAR 0 5
5871: PUSH
5872: LD_VAR 0 1
5876: PPUSH
5877: CALL_OW 110
5881: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ tag ] ;
5882: LD_ADDR_VAR 0 6
5886: PUSH
5887: LD_INT 15
5889: PUSH
5890: LD_INT 17
5892: PUSH
5893: LD_INT 19
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: LD_VAR 0 5
5905: ARRAY
5906: ST_TO_ADDR
// if not area then
5907: LD_VAR 0 6
5911: NOT
5912: IFFALSE 5916
// exit ;
5914: GO 5976
// repeat ComMoveToArea ( driver , area ) ;
5916: LD_VAR 0 1
5920: PPUSH
5921: LD_VAR 0 6
5925: PPUSH
5926: CALL_OW 113
// wait ( 0 0$3 ) ;
5930: LD_INT 105
5932: PPUSH
5933: CALL_OW 67
// if not IsOk ( driver ) then
5937: LD_VAR 0 1
5941: PPUSH
5942: CALL_OW 302
5946: NOT
5947: IFFALSE 5951
// exit ;
5949: GO 5976
// until IsInArea ( driver , area ) ;
5951: LD_VAR 0 1
5955: PPUSH
5956: LD_VAR 0 6
5960: PPUSH
5961: CALL_OW 308
5965: IFFALSE 5916
// RemoveUnit ( driver ) ;
5967: LD_VAR 0 1
5971: PPUSH
5972: CALL_OW 64
// end ; end ;
5976: PPOPN 6
5978: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
5979: LD_VAR 0 3
5983: PUSH
5984: LD_INT 17
5986: EQUAL
5987: IFFALSE 5997
// kamikazeTrained := true ;
5989: LD_ADDR_EXP 6
5993: PUSH
5994: LD_INT 1
5996: ST_TO_ADDR
// end ;
5997: PPOPN 3
5999: END
// on UnitDestroyed ( un ) do begin if un = Schulz then
6000: LD_VAR 0 1
6004: PUSH
6005: LD_EXP 22
6009: EQUAL
6010: IFFALSE 6019
// YouLost ( Schulz ) ;
6012: LD_STRING Schulz
6014: PPUSH
6015: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
6019: LD_VAR 0 1
6023: PUSH
6024: LD_EXP 11
6028: EQUAL
6029: PUSH
6030: LD_VAR 0 1
6034: PPUSH
6035: CALL_OW 255
6039: PUSH
6040: LD_INT 2
6042: EQUAL
6043: AND
6044: IFFALSE 6053
// YouLost ( Heike ) ;
6046: LD_STRING Heike
6048: PPUSH
6049: CALL_OW 104
// end ; end_of_file
6053: PPOPN 1
6055: END
// export function Action ; begin
6056: LD_INT 0
6058: PPUSH
// InGameOn ;
6059: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
6063: LD_INT 1
6065: PPUSH
6066: LD_INT 1
6068: PPUSH
6069: LD_INT 2
6071: PPUSH
6072: LD_INT 32963
6074: NEG
6075: PPUSH
6076: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
6080: LD_INT 1
6082: PPUSH
6083: LD_INT 1
6085: PPUSH
6086: LD_INT 2
6088: PPUSH
6089: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
6093: LD_INT 173
6095: PPUSH
6096: LD_INT 149
6098: PPUSH
6099: CALL_OW 86
// wait ( 0 0$2 ) ;
6103: LD_INT 70
6105: PPUSH
6106: CALL_OW 67
// InGameOff ;
6110: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
6114: LD_STRING M6
6116: PPUSH
6117: CALL_OW 337
// SaveForQuickRestart ;
6121: CALL_OW 22
// if Count ( UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) ) = 10 then
6125: LD_EXP 12
6129: PUSH
6130: LD_EXP 13
6134: PUSH
6135: LD_EXP 14
6139: PUSH
6140: LD_EXP 15
6144: PUSH
6145: LD_EXP 16
6149: PUSH
6150: LD_EXP 17
6154: PUSH
6155: LD_EXP 18
6159: PUSH
6160: LD_EXP 19
6164: PUSH
6165: LD_EXP 20
6169: PUSH
6170: LD_EXP 21
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: PPUSH
6187: LD_INT 50
6189: PUSH
6190: EMPTY
6191: LIST
6192: PPUSH
6193: CALL_OW 72
6197: PPUSH
6198: CALL 10774 0 1
6202: PUSH
6203: LD_INT 10
6205: EQUAL
6206: IFFALSE 6215
// SetAchievement ( ACH_KNIGHT ) ;
6208: LD_STRING ACH_KNIGHT
6210: PPUSH
6211: CALL_OW 543
// end ;
6215: LD_VAR 0 1
6219: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
6220: LD_EXP 5
6224: PUSH
6225: LD_EXP 31
6229: PPUSH
6230: CALL_OW 302
6234: AND
6235: PUSH
6236: LD_EXP 11
6240: PPUSH
6241: CALL_OW 302
6245: AND
6246: PUSH
6247: LD_EXP 11
6251: PPUSH
6252: LD_EXP 31
6256: PPUSH
6257: CALL_OW 296
6261: PUSH
6262: LD_INT 9
6264: LESS
6265: PUSH
6266: LD_INT 22
6268: PUSH
6269: LD_INT 2
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PUSH
6276: LD_INT 91
6278: PUSH
6279: LD_EXP 11
6283: PUSH
6284: LD_INT 7
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: LD_INT 21
6294: PUSH
6295: LD_INT 3
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: PPUSH
6307: CALL_OW 69
6311: OR
6312: AND
6313: IFFALSE 6467
6315: GO 6317
6317: DISABLE
// begin ComExit ( Rolf ) ;
6318: LD_EXP 31
6322: PPUSH
6323: CALL 46538 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
6327: LD_EXP 31
6331: PPUSH
6332: LD_EXP 11
6336: PPUSH
6337: CALL_OW 172
// InGameOn ;
6341: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
6345: LD_EXP 11
6349: PPUSH
6350: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
6354: LD_EXP 31
6358: PPUSH
6359: LD_STRING DRf-Reunion-1
6361: PPUSH
6362: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
6366: LD_EXP 31
6370: PPUSH
6371: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
6375: LD_EXP 11
6379: PPUSH
6380: LD_EXP 31
6384: PPUSH
6385: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
6389: LD_EXP 31
6393: PPUSH
6394: LD_EXP 11
6398: PPUSH
6399: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
6403: LD_EXP 11
6407: PPUSH
6408: LD_STRING DH-Reunion-2
6410: PPUSH
6411: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
6415: LD_EXP 31
6419: PPUSH
6420: LD_STRING DRf-Reunion-3
6422: PPUSH
6423: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
6427: LD_EXP 11
6431: PPUSH
6432: LD_STRING DH-Reunion-4
6434: PPUSH
6435: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
6439: LD_EXP 31
6443: PPUSH
6444: LD_STRING DRf-Reunion-5
6446: PPUSH
6447: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
6451: LD_EXP 11
6455: PPUSH
6456: LD_STRING DH-Reunion-6
6458: PPUSH
6459: CALL_OW 88
// InGameOff ;
6463: CALL_OW 9
// end ;
6467: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
6468: LD_EXP 5
6472: NOT
6473: PUSH
6474: LD_INT 22
6476: PUSH
6477: LD_INT 2
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 91
6486: PUSH
6487: LD_EXP 22
6491: PUSH
6492: LD_INT 10
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 21
6502: PUSH
6503: LD_INT 3
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: PPUSH
6515: CALL_OW 69
6519: AND
6520: IFFALSE 7293
6522: GO 6524
6524: DISABLE
// begin InGameOn ;
6525: CALL_OW 8
// ComExit ( Schulz ) ;
6529: LD_EXP 22
6533: PPUSH
6534: CALL 46538 0 1
// CenterNowOnUnits ( Schulz ) ;
6538: LD_EXP 22
6542: PPUSH
6543: CALL_OW 87
// wait ( 0 0$0.3 ) ;
6547: LD_INT 10
6549: PPUSH
6550: CALL_OW 67
// DialogueOn ;
6554: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
6558: LD_EXP 22
6562: PPUSH
6563: LD_STRING DL-Def-1
6565: PPUSH
6566: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
6570: LD_EXP 22
6574: PPUSH
6575: LD_STRING DL-Def-2
6577: PPUSH
6578: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
6582: LD_EXP 22
6586: PPUSH
6587: LD_STRING DL-Def-3
6589: PPUSH
6590: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
6594: LD_EXP 23
6598: PPUSH
6599: CALL_OW 302
6603: PUSH
6604: LD_EXP 21
6608: PPUSH
6609: CALL_OW 302
6613: AND
6614: IFFALSE 6961
// begin Say ( Basim , DBs-Def-4 ) ;
6616: LD_EXP 23
6620: PPUSH
6621: LD_STRING DBs-Def-4
6623: PPUSH
6624: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
6628: LD_EXP 23
6632: PPUSH
6633: LD_STRING DBs-Def-5
6635: PPUSH
6636: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
6640: LD_EXP 21
6644: PPUSH
6645: LD_STRING DA-Def-6
6647: PPUSH
6648: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
6652: LD_EXP 23
6656: PPUSH
6657: LD_STRING DBs-Def-7
6659: PPUSH
6660: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
6664: LD_EXP 21
6668: PPUSH
6669: LD_STRING DA-Def-8
6671: PPUSH
6672: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
6676: LD_EXP 21
6680: PPUSH
6681: LD_STRING DA-Def-9
6683: PPUSH
6684: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
6688: LD_EXP 23
6692: PPUSH
6693: LD_STRING DBs-Def-10
6695: PPUSH
6696: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
6700: LD_EXP 21
6704: PPUSH
6705: LD_STRING DA-Def-11
6707: PPUSH
6708: CALL_OW 88
// if Query ( QTech ) = 1 then
6712: LD_STRING QTech
6714: PPUSH
6715: CALL_OW 97
6719: PUSH
6720: LD_INT 1
6722: EQUAL
6723: IFFALSE 6831
// begin Say ( Schulz , DL-Tech-1 ) ;
6725: LD_EXP 22
6729: PPUSH
6730: LD_STRING DL-Tech-1
6732: PPUSH
6733: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
6737: LD_EXP 22
6741: PPUSH
6742: LD_STRING DL-Tech-2
6744: PPUSH
6745: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
6749: LD_EXP 21
6753: PPUSH
6754: LD_STRING DA-Tech-3
6756: PPUSH
6757: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
6761: LD_EXP 16
6765: PPUSH
6766: LD_STRING DK-Tech-4
6768: PPUSH
6769: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
6773: LD_EXP 16
6777: PPUSH
6778: LD_STRING DK-Tech-5
6780: PPUSH
6781: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
6785: LD_EXP 23
6789: PPUSH
6790: LD_STRING DBs-Tech-6
6792: PPUSH
6793: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
6797: LD_EXP 16
6801: PPUSH
6802: LD_STRING DK-Tech-7
6804: PPUSH
6805: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
6809: LD_INT 3
6811: PPUSH
6812: LD_INT 2
6814: PPUSH
6815: LD_INT 1
6817: PPUSH
6818: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
6822: LD_STRING M7a
6824: PPUSH
6825: CALL_OW 604
// end else
6829: GO 6959
// begin Say ( Schulz , DL-Tech-a-1 ) ;
6831: LD_EXP 22
6835: PPUSH
6836: LD_STRING DL-Tech-a-1
6838: PPUSH
6839: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
6843: LD_EXP 22
6847: PPUSH
6848: LD_STRING DL-Tech-a-2
6850: PPUSH
6851: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
6855: LD_EXP 23
6859: PPUSH
6860: LD_STRING DBs-Tech-a-3
6862: PPUSH
6863: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
6867: LD_EXP 16
6871: PPUSH
6872: LD_STRING DK-Tech-a-4
6874: PPUSH
6875: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
6879: LD_EXP 16
6883: PPUSH
6884: LD_STRING DK-Tech-a-5
6886: PPUSH
6887: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
6891: LD_EXP 21
6895: PPUSH
6896: LD_STRING DA-Tech-a-6
6898: PPUSH
6899: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
6903: LD_EXP 21
6907: PPUSH
6908: LD_STRING DA-Tech-a-7
6910: PPUSH
6911: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
6915: LD_EXP 22
6919: PPUSH
6920: LD_STRING DL-Tech-a-8
6922: PPUSH
6923: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
6927: LD_EXP 21
6931: PPUSH
6932: LD_STRING DA-Tech-a-9
6934: PPUSH
6935: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
6939: LD_INT 4
6941: PPUSH
6942: LD_INT 2
6944: PPUSH
6945: LD_INT 1
6947: PPUSH
6948: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
6952: LD_STRING M7b
6954: PPUSH
6955: CALL_OW 604
// end ; end else
6959: GO 7009
// if IsOk ( Basim ) then
6961: LD_EXP 23
6965: PPUSH
6966: CALL_OW 302
6970: IFFALSE 7009
// begin Say ( Basim , DBs-Def-4 ) ;
6972: LD_EXP 23
6976: PPUSH
6977: LD_STRING DBs-Def-4
6979: PPUSH
6980: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
6984: LD_EXP 23
6988: PPUSH
6989: LD_STRING DBs-Def-5
6991: PPUSH
6992: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
6996: LD_INT 4
6998: PPUSH
6999: LD_INT 2
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: CALL_OW 322
// end ; DialogueOff ;
7009: CALL_OW 7
// InGameOff ;
7013: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
7017: LD_STRING M7
7019: PPUSH
7020: CALL_OW 337
// playerInBase := true ;
7024: LD_ADDR_EXP 5
7028: PUSH
7029: LD_INT 1
7031: ST_TO_ADDR
// wait ( 0 0$30 ) ;
7032: LD_INT 1050
7034: PPUSH
7035: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7039: LD_INT 35
7041: PPUSH
7042: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_constructed ] , [ f_btype , b_siberite_mine ] ] ) ;
7046: LD_INT 22
7048: PUSH
7049: LD_INT 2
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 50
7058: PUSH
7059: EMPTY
7060: LIST
7061: PUSH
7062: LD_INT 57
7064: PUSH
7065: EMPTY
7066: LIST
7067: PUSH
7068: LD_INT 30
7070: PUSH
7071: LD_INT 30
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 69
7088: IFFALSE 7039
// if IsOk ( Kurt ) then
7090: LD_EXP 20
7094: PPUSH
7095: CALL_OW 302
7099: IFFALSE 7280
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_constructed ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
7101: LD_INT 22
7103: PUSH
7104: LD_INT 2
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 50
7113: PUSH
7114: EMPTY
7115: LIST
7116: PUSH
7117: LD_INT 57
7119: PUSH
7120: EMPTY
7121: LIST
7122: PUSH
7123: LD_INT 30
7125: PUSH
7126: LD_INT 30
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 69
7143: PUSH
7144: LD_INT 1
7146: ARRAY
7147: PPUSH
7148: CALL_OW 87
// DialogueOn ;
7152: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
7156: LD_EXP 20
7160: PPUSH
7161: LD_STRING DKs-Med-1
7163: PPUSH
7164: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
7168: LD_EXP 20
7172: PPUSH
7173: LD_STRING DKs-Med-2
7175: PPUSH
7176: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
7180: LD_EXP 22
7184: PPUSH
7185: LD_STRING DL-Med-3
7187: PPUSH
7188: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
7192: LD_EXP 22
7196: PPUSH
7197: LD_STRING DL-Med-4
7199: PPUSH
7200: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
7204: LD_EXP 20
7208: PPUSH
7209: LD_STRING DKs-Med-5
7211: PPUSH
7212: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
7216: LD_EXP 20
7220: PPUSH
7221: LD_STRING DKs-Med-6
7223: PPUSH
7224: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
7228: LD_EXP 20
7232: PPUSH
7233: LD_STRING DKs-Med-7
7235: PPUSH
7236: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
7240: LD_EXP 20
7244: PPUSH
7245: LD_STRING DKs-Med-8
7247: PPUSH
7248: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
7252: LD_EXP 22
7256: PPUSH
7257: LD_STRING DL-Med-9
7259: PPUSH
7260: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
7264: LD_EXP 22
7268: PPUSH
7269: LD_STRING DL-Med-10
7271: PPUSH
7272: CALL_OW 88
// DialogueOff ;
7276: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
7280: LD_STRING M8-
7282: PUSH
7283: LD_OWVAR 67
7287: STR
7288: PPUSH
7289: CALL_OW 337
// end ;
7293: END
// every 0 0$1 trigger playerInBase do
7294: LD_EXP 5
7298: IFFALSE 7318
7300: GO 7302
7302: DISABLE
// begin enable ;
7303: ENABLE
// missionTime := missionTime + 0 0$1 ;
7304: LD_ADDR_EXP 9
7308: PUSH
7309: LD_EXP 9
7313: PUSH
7314: LD_INT 35
7316: PLUS
7317: ST_TO_ADDR
// end ;
7318: END
// every 0 0$2 trigger playerInBase and apeDriver do
7319: LD_EXP 5
7323: PUSH
7324: LD_EXP 8
7328: AND
7329: IFFALSE 7726
7331: GO 7333
7333: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
7334: LD_STRING M7a_out
7336: PPUSH
7337: CALL_OW 337
// wait ( 0 0$2 ) ;
7341: LD_INT 70
7343: PPUSH
7344: CALL_OW 67
// DialogueOn ;
7348: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
7352: LD_INT 22
7354: PUSH
7355: LD_INT 2
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 33
7364: PUSH
7365: LD_INT 5
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PPUSH
7376: CALL_OW 69
7380: PUSH
7381: LD_INT 1
7383: ARRAY
7384: PPUSH
7385: CALL_OW 87
// if IsOk ( Mia ) then
7389: LD_EXP 25
7393: PPUSH
7394: CALL_OW 302
7398: IFFALSE 7424
// begin Say ( Mia , DMm-Apedrive-1 ) ;
7400: LD_EXP 25
7404: PPUSH
7405: LD_STRING DMm-Apedrive-1
7407: PPUSH
7408: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
7412: LD_EXP 13
7416: PPUSH
7417: LD_STRING DM-Apedrive-2
7419: PPUSH
7420: CALL_OW 88
// end ; if IsOk ( Jenna ) then
7424: LD_EXP 27
7428: PPUSH
7429: CALL_OW 302
7433: IFFALSE 7722
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
7435: LD_EXP 27
7439: PPUSH
7440: LD_STRING DJm-Apedrive-3
7442: PPUSH
7443: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
7447: LD_EXP 27
7451: PPUSH
7452: LD_STRING DJm-Apedrive-4
7454: PPUSH
7455: CALL_OW 88
// if IsOk ( Basim ) then
7459: LD_EXP 23
7463: PPUSH
7464: CALL_OW 302
7468: IFFALSE 7722
// begin Say ( Basim , DBs-Apedrive-5 ) ;
7470: LD_EXP 23
7474: PPUSH
7475: LD_STRING DBs-Apedrive-5
7477: PPUSH
7478: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
7482: LD_EXP 23
7486: PPUSH
7487: LD_STRING DBs-Apedrive-6
7489: PPUSH
7490: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
7494: LD_EXP 27
7498: PPUSH
7499: LD_STRING DJm-Apedrive-7
7501: PPUSH
7502: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
7506: LD_EXP 23
7510: PPUSH
7511: LD_STRING DBs-Apedrive-8
7513: PPUSH
7514: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
7518: LD_EXP 27
7522: PPUSH
7523: LD_STRING DJm-Apedrive-9
7525: PPUSH
7526: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
7530: LD_EXP 23
7534: PPUSH
7535: LD_STRING DBs-Apedrive-10
7537: PPUSH
7538: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
7542: LD_EXP 27
7546: PPUSH
7547: LD_STRING DJm-Apedrive-11
7549: PPUSH
7550: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
7554: LD_EXP 16
7558: PPUSH
7559: LD_STRING DK-Apedrive-12
7561: PPUSH
7562: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
7566: LD_EXP 27
7570: PPUSH
7571: LD_STRING DJm-Apedrive-13
7573: PPUSH
7574: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
7578: LD_EXP 27
7582: PPUSH
7583: LD_STRING DJm-Apedrive-14
7585: PPUSH
7586: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
7590: LD_EXP 27
7594: PPUSH
7595: LD_STRING DJm-Apedrive-15
7597: PPUSH
7598: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
7602: LD_EXP 27
7606: PPUSH
7607: LD_STRING DJm-Apedrive-16
7609: PPUSH
7610: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
7614: LD_EXP 25
7618: PPUSH
7619: LD_STRING DMm-Apedrive-17
7621: PPUSH
7622: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
7626: LD_EXP 25
7630: PPUSH
7631: LD_STRING DMm-Apedrive-18
7633: PPUSH
7634: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
7638: LD_EXP 25
7642: PPUSH
7643: LD_STRING DMm-Apedrive-19
7645: PPUSH
7646: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
7650: LD_EXP 25
7654: PPUSH
7655: LD_STRING DMm-Apedrive-20
7657: PPUSH
7658: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
7662: LD_EXP 16
7666: PPUSH
7667: LD_STRING DK-Apedrive-21
7669: PPUSH
7670: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
7674: LD_EXP 16
7678: PPUSH
7679: LD_STRING DK-Apedrive-22
7681: PPUSH
7682: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
7686: LD_EXP 11
7690: PPUSH
7691: LD_STRING DH-Apedrive-23
7693: PPUSH
7694: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
7698: LD_EXP 24
7702: PPUSH
7703: LD_STRING DLt-Apedrive-24
7705: PPUSH
7706: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
7710: LD_EXP 24
7714: PPUSH
7715: LD_STRING DLt-Apedrive-25
7717: PPUSH
7718: CALL_OW 88
// end ; end ; DialogueOff ;
7722: CALL_OW 7
// end ;
7726: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
7727: LD_EXP 5
7731: PUSH
7732: LD_EXP 6
7736: AND
7737: IFFALSE 7749
7739: GO 7741
7741: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
7742: LD_STRING M7b_out
7744: PPUSH
7745: CALL_OW 337
7749: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
7750: LD_EXP 5
7754: PUSH
7755: LD_INT 22
7757: PUSH
7758: LD_INT 2
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 30
7767: PUSH
7768: LD_INT 3
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 3
7777: PUSH
7778: LD_INT 58
7780: PUSH
7781: EMPTY
7782: LIST
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: PPUSH
7793: CALL_OW 69
7797: AND
7798: PUSH
7799: LD_EXP 11
7803: PPUSH
7804: CALL_OW 302
7808: AND
7809: PUSH
7810: LD_EXP 22
7814: PPUSH
7815: CALL_OW 302
7819: AND
7820: IFFALSE 7993
7822: GO 7824
7824: DISABLE
// begin DialogueOn ;
7825: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
7829: LD_EXP 22
7833: PPUSH
7834: LD_STRING DL-Mort-1
7836: PPUSH
7837: CALL_OW 88
// if IsOk ( Markov ) then
7841: LD_EXP 18
7845: PPUSH
7846: CALL_OW 302
7850: IFFALSE 7903
// begin Say ( Heike , DH-Mort-2 ) ;
7852: LD_EXP 11
7856: PPUSH
7857: LD_STRING DH-Mort-2
7859: PPUSH
7860: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
7864: LD_EXP 18
7868: PPUSH
7869: LD_STRING DMar-Mort-3
7871: PPUSH
7872: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
7876: LD_EXP 18
7880: PPUSH
7881: LD_STRING DMar-Mort-4
7883: PPUSH
7884: CALL_OW 88
// SetTech ( tech_mortar , 2 , state_enabled ) ;
7888: LD_INT 41
7890: PPUSH
7891: LD_INT 2
7893: PPUSH
7894: LD_INT 1
7896: PPUSH
7897: CALL_OW 322
// end else
7901: GO 7989
// if IsOk ( Olaf ) then
7903: LD_EXP 19
7907: PPUSH
7908: CALL_OW 302
7912: IFFALSE 7965
// begin Say ( Heike , DH-Mort-a-2 ) ;
7914: LD_EXP 11
7918: PPUSH
7919: LD_STRING DH-Mort-a-2
7921: PPUSH
7922: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
7926: LD_EXP 19
7930: PPUSH
7931: LD_STRING DO-Mort-a-3
7933: PPUSH
7934: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
7938: LD_EXP 19
7942: PPUSH
7943: LD_STRING DO-Mort-a-4
7945: PPUSH
7946: CALL_OW 88
// SetTech ( tech_mortar , 2 , state_enabled ) ;
7950: LD_INT 41
7952: PPUSH
7953: LD_INT 2
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: CALL_OW 322
// end else
7963: GO 7989
// begin Say ( Heike , DH-Mort-a-5 ) ;
7965: LD_EXP 11
7969: PPUSH
7970: LD_STRING DH-Mort-a-5
7972: PPUSH
7973: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
7977: LD_EXP 11
7981: PPUSH
7982: LD_STRING DH-Mort-a-6
7984: PPUSH
7985: CALL_OW 88
// end ; DialogueOff ;
7989: CALL_OW 7
// end ;
7993: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
7994: LD_EXP 16
7998: PPUSH
7999: CALL_OW 256
8003: PUSH
8004: LD_INT 10
8006: LESS
8007: IFFALSE 8109
8009: GO 8011
8011: DISABLE
// begin DialogueOn ;
8012: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
8016: LD_EXP 16
8020: PPUSH
8021: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
8025: LD_EXP 16
8029: PPUSH
8030: LD_STRING DK-Death-1
8032: PPUSH
8033: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
8037: LD_EXP 16
8041: PPUSH
8042: LD_STRING DK-Death-2
8044: PPUSH
8045: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
8049: LD_EXP 16
8053: PPUSH
8054: LD_STRING DK-Death-3
8056: PPUSH
8057: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
8061: LD_EXP 11
8065: PPUSH
8066: LD_STRING DH-Death-4
8068: PPUSH
8069: CALL_OW 88
// if IsOk ( Markov ) then
8073: LD_EXP 18
8077: PPUSH
8078: CALL_OW 302
8082: IFFALSE 8096
// Say ( Markov , DMar-Death-5 ) ;
8084: LD_EXP 18
8088: PPUSH
8089: LD_STRING DMar-Death-5
8091: PPUSH
8092: CALL_OW 88
// DialogueOff ;
8096: CALL_OW 7
// KillUnit ( Kaia ) ;
8100: LD_EXP 16
8104: PPUSH
8105: CALL_OW 66
// end ;
8109: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib ;
8110: LD_EXP 10
8114: PUSH
8115: LD_INT 81
8117: PUSH
8118: LD_INT 2
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: PUSH
8125: LD_INT 50
8127: PUSH
8128: EMPTY
8129: LIST
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PPUSH
8135: CALL_OW 69
8139: NOT
8140: AND
8141: IFFALSE 8561
8143: GO 8145
8145: DISABLE
8146: LD_INT 0
8148: PPUSH
8149: PPUSH
// begin DialogueOn ;
8150: CALL_OW 6
// if time09 + time09c + tick < 60 60$00 then
8154: LD_EXP 3
8158: PUSH
8159: LD_EXP 4
8163: PLUS
8164: PUSH
8165: LD_OWVAR 1
8169: PLUS
8170: PUSH
8171: LD_INT 126000
8173: LESS
8174: IFFALSE 8183
// SetAchievement ( ACH_HSPEED_9 ) ;
8176: LD_STRING ACH_HSPEED_9
8178: PPUSH
8179: CALL_OW 543
// CenterOnNow ( Schulz ) ;
8183: LD_EXP 22
8187: PPUSH
8188: CALL 50093 0 1
// dwait ( 0 0$0.3 ) ;
8192: LD_INT 10
8194: PPUSH
8195: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
8199: LD_EXP 22
8203: PPUSH
8204: LD_STRING DL-End-1
8206: PPUSH
8207: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
8211: LD_EXP 11
8215: PPUSH
8216: LD_STRING DH-End-2
8218: PPUSH
8219: CALL_OW 88
// if IsOk ( Kaia ) then
8223: LD_EXP 16
8227: PPUSH
8228: CALL_OW 302
8232: IFFALSE 8282
// begin Say ( Kaia , DK-End-a-3 ) ;
8234: LD_EXP 16
8238: PPUSH
8239: LD_STRING DK-End-a-3
8241: PPUSH
8242: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
8246: LD_EXP 16
8250: PPUSH
8251: LD_STRING DK-End-a-4
8253: PPUSH
8254: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
8258: LD_EXP 22
8262: PPUSH
8263: LD_STRING DL-End-a-5
8265: PPUSH
8266: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
8270: LD_EXP 22
8274: PPUSH
8275: LD_STRING DL-End-a-6
8277: PPUSH
8278: CALL_OW 88
// end ; sib := 0 ;
8282: LD_ADDR_VAR 0 2
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 22
8297: PUSH
8298: LD_INT 2
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: LD_INT 2
8307: PUSH
8308: LD_INT 30
8310: PUSH
8311: LD_INT 0
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 30
8320: PUSH
8321: LD_INT 1
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PPUSH
8337: CALL_OW 69
8341: PUSH
8342: FOR_IN
8343: IFFALSE 8376
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
8345: LD_ADDR_VAR 0 2
8349: PUSH
8350: LD_VAR 0 2
8354: PUSH
8355: LD_VAR 0 1
8359: PPUSH
8360: CALL_OW 274
8364: PPUSH
8365: LD_INT 3
8367: PPUSH
8368: CALL_OW 275
8372: PLUS
8373: ST_TO_ADDR
8374: GO 8342
8376: POP
8377: POP
// if sib >= sibToCollect then
8378: LD_VAR 0 2
8382: PUSH
8383: LD_EXP 7
8387: GREATEREQUAL
8388: IFFALSE 8402
// AddMedal ( med1 , 1 ) else
8390: LD_STRING med1
8392: PPUSH
8393: LD_INT 1
8395: PPUSH
8396: CALL_OW 101
8400: GO 8413
// AddMedal ( med1 , - 1 ) ;
8402: LD_STRING med1
8404: PPUSH
8405: LD_INT 1
8407: NEG
8408: PPUSH
8409: CALL_OW 101
// if apeDriver or kamikazeTrained then
8413: LD_EXP 8
8417: PUSH
8418: LD_EXP 6
8422: OR
8423: IFFALSE 8437
// AddMedal ( med2 , 1 ) else
8425: LD_STRING med2
8427: PPUSH
8428: LD_INT 1
8430: PPUSH
8431: CALL_OW 101
8435: GO 8448
// AddMedal ( med2 , - 1 ) ;
8437: LD_STRING med2
8439: PPUSH
8440: LD_INT 1
8442: NEG
8443: PPUSH
8444: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
8448: LD_EXP 12
8452: PUSH
8453: LD_EXP 13
8457: PUSH
8458: LD_EXP 14
8462: PUSH
8463: LD_EXP 15
8467: PUSH
8468: LD_EXP 16
8472: PUSH
8473: LD_EXP 17
8477: PUSH
8478: LD_EXP 18
8482: PUSH
8483: LD_EXP 19
8487: PUSH
8488: LD_EXP 20
8492: PUSH
8493: LD_EXP 21
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: PPUSH
8510: LD_INT 50
8512: PUSH
8513: EMPTY
8514: LIST
8515: PPUSH
8516: CALL_OW 72
8520: NOT
8521: IFFALSE 8536
// AddMedal ( med3 , - 1 ) else
8523: LD_STRING med3
8525: PPUSH
8526: LD_INT 1
8528: NEG
8529: PPUSH
8530: CALL_OW 101
8534: GO 8546
// AddMedal ( med3 , 1 ) ;
8536: LD_STRING med3
8538: PPUSH
8539: LD_INT 1
8541: PPUSH
8542: CALL_OW 101
// GiveMedals ( MAIN ) ;
8546: LD_STRING MAIN
8548: PPUSH
8549: CALL_OW 102
// YouWin ;
8553: CALL_OW 103
// DialogueOff ;
8557: CALL_OW 7
// end ; end_of_file
8561: PPOPN 2
8563: END
// every 0 0$30 + 0 0$20 trigger playerInBase do var i , tmp ;
8564: LD_EXP 5
8568: IFFALSE 8669
8570: GO 8572
8572: DISABLE
8573: LD_INT 0
8575: PPUSH
8576: PPUSH
// begin enable ;
8577: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
8578: LD_ADDR_VAR 0 2
8582: PUSH
8583: LD_INT 9
8585: PUSH
8586: LD_INT 10
8588: PUSH
8589: LD_INT 11
8591: PUSH
8592: LD_INT 12
8594: PUSH
8595: LD_INT 13
8597: PUSH
8598: LD_INT 14
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
8609: LD_ADDR_VAR 0 1
8613: PUSH
8614: LD_VAR 0 2
8618: PUSH
8619: LD_INT 1
8621: PPUSH
8622: LD_INT 6
8624: PPUSH
8625: CALL_OW 12
8629: ARRAY
8630: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 6 then
8631: LD_VAR 0 1
8635: PPUSH
8636: CALL_OW 435
8640: PUSH
8641: LD_INT 6
8643: LESS
8644: IFFALSE 8669
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
8646: LD_INT 1
8648: PPUSH
8649: LD_INT 5
8651: PPUSH
8652: CALL_OW 12
8656: PPUSH
8657: LD_VAR 0 1
8661: PPUSH
8662: LD_INT 1
8664: PPUSH
8665: CALL_OW 55
// end ; end_of_file
8669: PPOPN 2
8671: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8672: LD_INT 0
8674: PPUSH
8675: PPUSH
// if exist_mode then
8676: LD_VAR 0 2
8680: IFFALSE 8705
// unit := CreateCharacter ( prefix & ident ) else
8682: LD_ADDR_VAR 0 5
8686: PUSH
8687: LD_VAR 0 3
8691: PUSH
8692: LD_VAR 0 1
8696: STR
8697: PPUSH
8698: CALL_OW 34
8702: ST_TO_ADDR
8703: GO 8720
// unit := NewCharacter ( ident ) ;
8705: LD_ADDR_VAR 0 5
8709: PUSH
8710: LD_VAR 0 1
8714: PPUSH
8715: CALL_OW 25
8719: ST_TO_ADDR
// result := unit ;
8720: LD_ADDR_VAR 0 4
8724: PUSH
8725: LD_VAR 0 5
8729: ST_TO_ADDR
// end ;
8730: LD_VAR 0 4
8734: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8735: LD_INT 0
8737: PPUSH
8738: PPUSH
// if not side or not nation then
8739: LD_VAR 0 1
8743: NOT
8744: PUSH
8745: LD_VAR 0 2
8749: NOT
8750: OR
8751: IFFALSE 8755
// exit ;
8753: GO 9523
// case nation of nation_american :
8755: LD_VAR 0 2
8759: PUSH
8760: LD_INT 1
8762: DOUBLE
8763: EQUAL
8764: IFTRUE 8768
8766: GO 8982
8768: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8769: LD_ADDR_VAR 0 4
8773: PUSH
8774: LD_INT 35
8776: PUSH
8777: LD_INT 45
8779: PUSH
8780: LD_INT 46
8782: PUSH
8783: LD_INT 47
8785: PUSH
8786: LD_INT 82
8788: PUSH
8789: LD_INT 83
8791: PUSH
8792: LD_INT 84
8794: PUSH
8795: LD_INT 85
8797: PUSH
8798: LD_INT 86
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: LD_INT 2
8806: PUSH
8807: LD_INT 6
8809: PUSH
8810: LD_INT 15
8812: PUSH
8813: LD_INT 16
8815: PUSH
8816: LD_INT 7
8818: PUSH
8819: LD_INT 12
8821: PUSH
8822: LD_INT 13
8824: PUSH
8825: LD_INT 10
8827: PUSH
8828: LD_INT 14
8830: PUSH
8831: LD_INT 20
8833: PUSH
8834: LD_INT 21
8836: PUSH
8837: LD_INT 22
8839: PUSH
8840: LD_INT 25
8842: PUSH
8843: LD_INT 32
8845: PUSH
8846: LD_INT 27
8848: PUSH
8849: LD_INT 36
8851: PUSH
8852: LD_INT 69
8854: PUSH
8855: LD_INT 39
8857: PUSH
8858: LD_INT 34
8860: PUSH
8861: LD_INT 40
8863: PUSH
8864: LD_INT 48
8866: PUSH
8867: LD_INT 49
8869: PUSH
8870: LD_INT 50
8872: PUSH
8873: LD_INT 51
8875: PUSH
8876: LD_INT 52
8878: PUSH
8879: LD_INT 53
8881: PUSH
8882: LD_INT 54
8884: PUSH
8885: LD_INT 55
8887: PUSH
8888: LD_INT 56
8890: PUSH
8891: LD_INT 57
8893: PUSH
8894: LD_INT 58
8896: PUSH
8897: LD_INT 59
8899: PUSH
8900: LD_INT 60
8902: PUSH
8903: LD_INT 61
8905: PUSH
8906: LD_INT 62
8908: PUSH
8909: LD_INT 80
8911: PUSH
8912: LD_INT 82
8914: PUSH
8915: LD_INT 83
8917: PUSH
8918: LD_INT 84
8920: PUSH
8921: LD_INT 85
8923: PUSH
8924: LD_INT 86
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: ST_TO_ADDR
8980: GO 9447
8982: LD_INT 2
8984: DOUBLE
8985: EQUAL
8986: IFTRUE 8990
8988: GO 9216
8990: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8991: LD_ADDR_VAR 0 4
8995: PUSH
8996: LD_INT 35
8998: PUSH
8999: LD_INT 45
9001: PUSH
9002: LD_INT 46
9004: PUSH
9005: LD_INT 47
9007: PUSH
9008: LD_INT 82
9010: PUSH
9011: LD_INT 83
9013: PUSH
9014: LD_INT 84
9016: PUSH
9017: LD_INT 85
9019: PUSH
9020: LD_INT 87
9022: PUSH
9023: LD_INT 70
9025: PUSH
9026: LD_INT 1
9028: PUSH
9029: LD_INT 11
9031: PUSH
9032: LD_INT 3
9034: PUSH
9035: LD_INT 4
9037: PUSH
9038: LD_INT 5
9040: PUSH
9041: LD_INT 6
9043: PUSH
9044: LD_INT 15
9046: PUSH
9047: LD_INT 18
9049: PUSH
9050: LD_INT 7
9052: PUSH
9053: LD_INT 17
9055: PUSH
9056: LD_INT 8
9058: PUSH
9059: LD_INT 20
9061: PUSH
9062: LD_INT 21
9064: PUSH
9065: LD_INT 22
9067: PUSH
9068: LD_INT 72
9070: PUSH
9071: LD_INT 26
9073: PUSH
9074: LD_INT 69
9076: PUSH
9077: LD_INT 39
9079: PUSH
9080: LD_INT 40
9082: PUSH
9083: LD_INT 41
9085: PUSH
9086: LD_INT 42
9088: PUSH
9089: LD_INT 43
9091: PUSH
9092: LD_INT 48
9094: PUSH
9095: LD_INT 49
9097: PUSH
9098: LD_INT 50
9100: PUSH
9101: LD_INT 51
9103: PUSH
9104: LD_INT 52
9106: PUSH
9107: LD_INT 53
9109: PUSH
9110: LD_INT 54
9112: PUSH
9113: LD_INT 55
9115: PUSH
9116: LD_INT 56
9118: PUSH
9119: LD_INT 60
9121: PUSH
9122: LD_INT 61
9124: PUSH
9125: LD_INT 62
9127: PUSH
9128: LD_INT 66
9130: PUSH
9131: LD_INT 67
9133: PUSH
9134: LD_INT 68
9136: PUSH
9137: LD_INT 81
9139: PUSH
9140: LD_INT 82
9142: PUSH
9143: LD_INT 83
9145: PUSH
9146: LD_INT 84
9148: PUSH
9149: LD_INT 85
9151: PUSH
9152: LD_INT 87
9154: PUSH
9155: LD_INT 88
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: ST_TO_ADDR
9214: GO 9447
9216: LD_INT 3
9218: DOUBLE
9219: EQUAL
9220: IFTRUE 9224
9222: GO 9446
9224: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9225: LD_ADDR_VAR 0 4
9229: PUSH
9230: LD_INT 46
9232: PUSH
9233: LD_INT 47
9235: PUSH
9236: LD_INT 1
9238: PUSH
9239: LD_INT 2
9241: PUSH
9242: LD_INT 82
9244: PUSH
9245: LD_INT 83
9247: PUSH
9248: LD_INT 84
9250: PUSH
9251: LD_INT 85
9253: PUSH
9254: LD_INT 86
9256: PUSH
9257: LD_INT 11
9259: PUSH
9260: LD_INT 9
9262: PUSH
9263: LD_INT 20
9265: PUSH
9266: LD_INT 19
9268: PUSH
9269: LD_INT 21
9271: PUSH
9272: LD_INT 24
9274: PUSH
9275: LD_INT 22
9277: PUSH
9278: LD_INT 25
9280: PUSH
9281: LD_INT 28
9283: PUSH
9284: LD_INT 29
9286: PUSH
9287: LD_INT 30
9289: PUSH
9290: LD_INT 31
9292: PUSH
9293: LD_INT 37
9295: PUSH
9296: LD_INT 38
9298: PUSH
9299: LD_INT 32
9301: PUSH
9302: LD_INT 27
9304: PUSH
9305: LD_INT 33
9307: PUSH
9308: LD_INT 69
9310: PUSH
9311: LD_INT 39
9313: PUSH
9314: LD_INT 34
9316: PUSH
9317: LD_INT 40
9319: PUSH
9320: LD_INT 71
9322: PUSH
9323: LD_INT 23
9325: PUSH
9326: LD_INT 44
9328: PUSH
9329: LD_INT 48
9331: PUSH
9332: LD_INT 49
9334: PUSH
9335: LD_INT 50
9337: PUSH
9338: LD_INT 51
9340: PUSH
9341: LD_INT 52
9343: PUSH
9344: LD_INT 53
9346: PUSH
9347: LD_INT 54
9349: PUSH
9350: LD_INT 55
9352: PUSH
9353: LD_INT 56
9355: PUSH
9356: LD_INT 57
9358: PUSH
9359: LD_INT 58
9361: PUSH
9362: LD_INT 59
9364: PUSH
9365: LD_INT 63
9367: PUSH
9368: LD_INT 64
9370: PUSH
9371: LD_INT 65
9373: PUSH
9374: LD_INT 82
9376: PUSH
9377: LD_INT 83
9379: PUSH
9380: LD_INT 84
9382: PUSH
9383: LD_INT 85
9385: PUSH
9386: LD_INT 86
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: ST_TO_ADDR
9444: GO 9447
9446: POP
// if state > - 1 and state < 3 then
9447: LD_VAR 0 3
9451: PUSH
9452: LD_INT 1
9454: NEG
9455: GREATER
9456: PUSH
9457: LD_VAR 0 3
9461: PUSH
9462: LD_INT 3
9464: LESS
9465: AND
9466: IFFALSE 9523
// for i in result do
9468: LD_ADDR_VAR 0 5
9472: PUSH
9473: LD_VAR 0 4
9477: PUSH
9478: FOR_IN
9479: IFFALSE 9521
// if GetTech ( i , side ) <> state then
9481: LD_VAR 0 5
9485: PPUSH
9486: LD_VAR 0 1
9490: PPUSH
9491: CALL_OW 321
9495: PUSH
9496: LD_VAR 0 3
9500: NONEQUAL
9501: IFFALSE 9519
// result := result diff i ;
9503: LD_ADDR_VAR 0 4
9507: PUSH
9508: LD_VAR 0 4
9512: PUSH
9513: LD_VAR 0 5
9517: DIFF
9518: ST_TO_ADDR
9519: GO 9478
9521: POP
9522: POP
// end ;
9523: LD_VAR 0 4
9527: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
9532: PPUSH
// result := true ;
9533: LD_ADDR_VAR 0 3
9537: PUSH
9538: LD_INT 1
9540: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9541: LD_ADDR_VAR 0 5
9545: PUSH
9546: LD_VAR 0 2
9550: PPUSH
9551: CALL_OW 480
9555: ST_TO_ADDR
// if not tmp then
9556: LD_VAR 0 5
9560: NOT
9561: IFFALSE 9565
// exit ;
9563: GO 9614
// for i in tmp do
9565: LD_ADDR_VAR 0 4
9569: PUSH
9570: LD_VAR 0 5
9574: PUSH
9575: FOR_IN
9576: IFFALSE 9612
// if GetTech ( i , side ) <> state_researched then
9578: LD_VAR 0 4
9582: PPUSH
9583: LD_VAR 0 1
9587: PPUSH
9588: CALL_OW 321
9592: PUSH
9593: LD_INT 2
9595: NONEQUAL
9596: IFFALSE 9610
// begin result := false ;
9598: LD_ADDR_VAR 0 3
9602: PUSH
9603: LD_INT 0
9605: ST_TO_ADDR
// exit ;
9606: POP
9607: POP
9608: GO 9614
// end ;
9610: GO 9575
9612: POP
9613: POP
// end ;
9614: LD_VAR 0 3
9618: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9619: LD_INT 0
9621: PPUSH
9622: PPUSH
9623: PPUSH
9624: PPUSH
9625: PPUSH
9626: PPUSH
9627: PPUSH
9628: PPUSH
9629: PPUSH
9630: PPUSH
9631: PPUSH
9632: PPUSH
9633: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9634: LD_VAR 0 1
9638: NOT
9639: PUSH
9640: LD_VAR 0 1
9644: PPUSH
9645: CALL_OW 257
9649: PUSH
9650: LD_INT 9
9652: NONEQUAL
9653: OR
9654: IFFALSE 9658
// exit ;
9656: GO 10231
// side := GetSide ( unit ) ;
9658: LD_ADDR_VAR 0 9
9662: PUSH
9663: LD_VAR 0 1
9667: PPUSH
9668: CALL_OW 255
9672: ST_TO_ADDR
// tech_space := tech_spacanom ;
9673: LD_ADDR_VAR 0 12
9677: PUSH
9678: LD_INT 29
9680: ST_TO_ADDR
// tech_time := tech_taurad ;
9681: LD_ADDR_VAR 0 13
9685: PUSH
9686: LD_INT 28
9688: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9689: LD_ADDR_VAR 0 11
9693: PUSH
9694: LD_VAR 0 1
9698: PPUSH
9699: CALL_OW 310
9703: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9704: LD_VAR 0 11
9708: PPUSH
9709: CALL_OW 247
9713: PUSH
9714: LD_INT 2
9716: EQUAL
9717: IFFALSE 9721
// exit ;
9719: GO 10231
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9721: LD_ADDR_VAR 0 8
9725: PUSH
9726: LD_INT 81
9728: PUSH
9729: LD_VAR 0 9
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 3
9740: PUSH
9741: LD_INT 21
9743: PUSH
9744: LD_INT 3
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PPUSH
9759: CALL_OW 69
9763: ST_TO_ADDR
// if not tmp then
9764: LD_VAR 0 8
9768: NOT
9769: IFFALSE 9773
// exit ;
9771: GO 10231
// if in_unit then
9773: LD_VAR 0 11
9777: IFFALSE 9801
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9779: LD_ADDR_VAR 0 10
9783: PUSH
9784: LD_VAR 0 8
9788: PPUSH
9789: LD_VAR 0 11
9793: PPUSH
9794: CALL_OW 74
9798: ST_TO_ADDR
9799: GO 9821
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9801: LD_ADDR_VAR 0 10
9805: PUSH
9806: LD_VAR 0 8
9810: PPUSH
9811: LD_VAR 0 1
9815: PPUSH
9816: CALL_OW 74
9820: ST_TO_ADDR
// if not enemy then
9821: LD_VAR 0 10
9825: NOT
9826: IFFALSE 9830
// exit ;
9828: GO 10231
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9830: LD_VAR 0 11
9834: PUSH
9835: LD_VAR 0 11
9839: PPUSH
9840: LD_VAR 0 10
9844: PPUSH
9845: CALL_OW 296
9849: PUSH
9850: LD_INT 13
9852: GREATER
9853: AND
9854: PUSH
9855: LD_VAR 0 1
9859: PPUSH
9860: LD_VAR 0 10
9864: PPUSH
9865: CALL_OW 296
9869: PUSH
9870: LD_INT 12
9872: GREATER
9873: OR
9874: IFFALSE 9878
// exit ;
9876: GO 10231
// missile := [ 1 ] ;
9878: LD_ADDR_VAR 0 14
9882: PUSH
9883: LD_INT 1
9885: PUSH
9886: EMPTY
9887: LIST
9888: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9889: LD_VAR 0 9
9893: PPUSH
9894: LD_VAR 0 12
9898: PPUSH
9899: CALL_OW 325
9903: IFFALSE 9932
// missile := Replace ( missile , missile + 1 , 2 ) ;
9905: LD_ADDR_VAR 0 14
9909: PUSH
9910: LD_VAR 0 14
9914: PPUSH
9915: LD_VAR 0 14
9919: PUSH
9920: LD_INT 1
9922: PLUS
9923: PPUSH
9924: LD_INT 2
9926: PPUSH
9927: CALL_OW 1
9931: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9932: LD_VAR 0 9
9936: PPUSH
9937: LD_VAR 0 13
9941: PPUSH
9942: CALL_OW 325
9946: PUSH
9947: LD_VAR 0 10
9951: PPUSH
9952: CALL_OW 255
9956: PPUSH
9957: LD_VAR 0 13
9961: PPUSH
9962: CALL_OW 325
9966: NOT
9967: AND
9968: IFFALSE 9997
// missile := Replace ( missile , missile + 1 , 3 ) ;
9970: LD_ADDR_VAR 0 14
9974: PUSH
9975: LD_VAR 0 14
9979: PPUSH
9980: LD_VAR 0 14
9984: PUSH
9985: LD_INT 1
9987: PLUS
9988: PPUSH
9989: LD_INT 3
9991: PPUSH
9992: CALL_OW 1
9996: ST_TO_ADDR
// if missile < 2 then
9997: LD_VAR 0 14
10001: PUSH
10002: LD_INT 2
10004: LESS
10005: IFFALSE 10009
// exit ;
10007: GO 10231
// x := GetX ( enemy ) ;
10009: LD_ADDR_VAR 0 4
10013: PUSH
10014: LD_VAR 0 10
10018: PPUSH
10019: CALL_OW 250
10023: ST_TO_ADDR
// y := GetY ( enemy ) ;
10024: LD_ADDR_VAR 0 5
10028: PUSH
10029: LD_VAR 0 10
10033: PPUSH
10034: CALL_OW 251
10038: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10039: LD_ADDR_VAR 0 6
10043: PUSH
10044: LD_VAR 0 4
10048: PUSH
10049: LD_INT 1
10051: NEG
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: CALL_OW 12
10060: PLUS
10061: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10062: LD_ADDR_VAR 0 7
10066: PUSH
10067: LD_VAR 0 5
10071: PUSH
10072: LD_INT 1
10074: NEG
10075: PPUSH
10076: LD_INT 1
10078: PPUSH
10079: CALL_OW 12
10083: PLUS
10084: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10085: LD_VAR 0 6
10089: PPUSH
10090: LD_VAR 0 7
10094: PPUSH
10095: CALL_OW 488
10099: NOT
10100: IFFALSE 10122
// begin _x := x ;
10102: LD_ADDR_VAR 0 6
10106: PUSH
10107: LD_VAR 0 4
10111: ST_TO_ADDR
// _y := y ;
10112: LD_ADDR_VAR 0 7
10116: PUSH
10117: LD_VAR 0 5
10121: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10122: LD_ADDR_VAR 0 3
10126: PUSH
10127: LD_INT 1
10129: PPUSH
10130: LD_VAR 0 14
10134: PPUSH
10135: CALL_OW 12
10139: ST_TO_ADDR
// case i of 1 :
10140: LD_VAR 0 3
10144: PUSH
10145: LD_INT 1
10147: DOUBLE
10148: EQUAL
10149: IFTRUE 10153
10151: GO 10170
10153: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10154: LD_VAR 0 1
10158: PPUSH
10159: LD_VAR 0 10
10163: PPUSH
10164: CALL_OW 115
10168: GO 10231
10170: LD_INT 2
10172: DOUBLE
10173: EQUAL
10174: IFTRUE 10178
10176: GO 10200
10178: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10179: LD_VAR 0 1
10183: PPUSH
10184: LD_VAR 0 6
10188: PPUSH
10189: LD_VAR 0 7
10193: PPUSH
10194: CALL_OW 153
10198: GO 10231
10200: LD_INT 3
10202: DOUBLE
10203: EQUAL
10204: IFTRUE 10208
10206: GO 10230
10208: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10209: LD_VAR 0 1
10213: PPUSH
10214: LD_VAR 0 6
10218: PPUSH
10219: LD_VAR 0 7
10223: PPUSH
10224: CALL_OW 154
10228: GO 10231
10230: POP
// end ;
10231: LD_VAR 0 2
10235: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10236: LD_INT 0
10238: PPUSH
10239: PPUSH
10240: PPUSH
10241: PPUSH
10242: PPUSH
10243: PPUSH
// if not unit or not building then
10244: LD_VAR 0 1
10248: NOT
10249: PUSH
10250: LD_VAR 0 2
10254: NOT
10255: OR
10256: IFFALSE 10260
// exit ;
10258: GO 10418
// x := GetX ( building ) ;
10260: LD_ADDR_VAR 0 5
10264: PUSH
10265: LD_VAR 0 2
10269: PPUSH
10270: CALL_OW 250
10274: ST_TO_ADDR
// y := GetY ( building ) ;
10275: LD_ADDR_VAR 0 6
10279: PUSH
10280: LD_VAR 0 2
10284: PPUSH
10285: CALL_OW 251
10289: ST_TO_ADDR
// for i = 0 to 5 do
10290: LD_ADDR_VAR 0 4
10294: PUSH
10295: DOUBLE
10296: LD_INT 0
10298: DEC
10299: ST_TO_ADDR
10300: LD_INT 5
10302: PUSH
10303: FOR_TO
10304: IFFALSE 10416
// begin _x := ShiftX ( x , i , 3 ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_VAR 0 5
10315: PPUSH
10316: LD_VAR 0 4
10320: PPUSH
10321: LD_INT 3
10323: PPUSH
10324: CALL_OW 272
10328: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10329: LD_ADDR_VAR 0 8
10333: PUSH
10334: LD_VAR 0 6
10338: PPUSH
10339: LD_VAR 0 4
10343: PPUSH
10344: LD_INT 3
10346: PPUSH
10347: CALL_OW 273
10351: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10352: LD_VAR 0 7
10356: PPUSH
10357: LD_VAR 0 8
10361: PPUSH
10362: CALL_OW 488
10366: NOT
10367: IFFALSE 10371
// continue ;
10369: GO 10303
// if HexInfo ( _x , _y ) = 0 then
10371: LD_VAR 0 7
10375: PPUSH
10376: LD_VAR 0 8
10380: PPUSH
10381: CALL_OW 428
10385: PUSH
10386: LD_INT 0
10388: EQUAL
10389: IFFALSE 10414
// begin ComMoveXY ( unit , _x , _y ) ;
10391: LD_VAR 0 1
10395: PPUSH
10396: LD_VAR 0 7
10400: PPUSH
10401: LD_VAR 0 8
10405: PPUSH
10406: CALL_OW 111
// exit ;
10410: POP
10411: POP
10412: GO 10418
// end ; end ;
10414: GO 10303
10416: POP
10417: POP
// end ;
10418: LD_VAR 0 3
10422: RET
// export function ScanBase ( side , base_area ) ; begin
10423: LD_INT 0
10425: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10426: LD_ADDR_VAR 0 3
10430: PUSH
10431: LD_VAR 0 2
10435: PPUSH
10436: LD_INT 81
10438: PUSH
10439: LD_VAR 0 1
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PPUSH
10448: CALL_OW 70
10452: ST_TO_ADDR
// end ;
10453: LD_VAR 0 3
10457: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10458: LD_INT 0
10460: PPUSH
10461: PPUSH
10462: PPUSH
10463: PPUSH
// result := false ;
10464: LD_ADDR_VAR 0 2
10468: PUSH
10469: LD_INT 0
10471: ST_TO_ADDR
// side := GetSide ( unit ) ;
10472: LD_ADDR_VAR 0 3
10476: PUSH
10477: LD_VAR 0 1
10481: PPUSH
10482: CALL_OW 255
10486: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_VAR 0 1
10496: PPUSH
10497: CALL_OW 248
10501: ST_TO_ADDR
// case nat of 1 :
10502: LD_VAR 0 4
10506: PUSH
10507: LD_INT 1
10509: DOUBLE
10510: EQUAL
10511: IFTRUE 10515
10513: GO 10526
10515: POP
// tech := tech_lassight ; 2 :
10516: LD_ADDR_VAR 0 5
10520: PUSH
10521: LD_INT 12
10523: ST_TO_ADDR
10524: GO 10565
10526: LD_INT 2
10528: DOUBLE
10529: EQUAL
10530: IFTRUE 10534
10532: GO 10545
10534: POP
// tech := tech_mortar ; 3 :
10535: LD_ADDR_VAR 0 5
10539: PUSH
10540: LD_INT 41
10542: ST_TO_ADDR
10543: GO 10565
10545: LD_INT 3
10547: DOUBLE
10548: EQUAL
10549: IFTRUE 10553
10551: GO 10564
10553: POP
// tech := tech_bazooka ; end ;
10554: LD_ADDR_VAR 0 5
10558: PUSH
10559: LD_INT 44
10561: ST_TO_ADDR
10562: GO 10565
10564: POP
// if Researched ( side , tech ) then
10565: LD_VAR 0 3
10569: PPUSH
10570: LD_VAR 0 5
10574: PPUSH
10575: CALL_OW 325
10579: IFFALSE 10606
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10581: LD_ADDR_VAR 0 2
10585: PUSH
10586: LD_INT 5
10588: PUSH
10589: LD_INT 8
10591: PUSH
10592: LD_INT 9
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: PUSH
10600: LD_VAR 0 4
10604: ARRAY
10605: ST_TO_ADDR
// end ;
10606: LD_VAR 0 2
10610: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10611: LD_INT 0
10613: PPUSH
10614: PPUSH
10615: PPUSH
// if not mines then
10616: LD_VAR 0 2
10620: NOT
10621: IFFALSE 10625
// exit ;
10623: GO 10769
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 81
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 3
10644: PUSH
10645: LD_INT 21
10647: PUSH
10648: LD_INT 3
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PPUSH
10663: CALL_OW 69
10667: ST_TO_ADDR
// for i in mines do
10668: LD_ADDR_VAR 0 4
10672: PUSH
10673: LD_VAR 0 2
10677: PUSH
10678: FOR_IN
10679: IFFALSE 10767
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10681: LD_VAR 0 4
10685: PUSH
10686: LD_INT 1
10688: ARRAY
10689: PPUSH
10690: LD_VAR 0 4
10694: PUSH
10695: LD_INT 2
10697: ARRAY
10698: PPUSH
10699: CALL_OW 458
10703: NOT
10704: IFFALSE 10708
// continue ;
10706: GO 10678
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10708: LD_VAR 0 4
10712: PUSH
10713: LD_INT 1
10715: ARRAY
10716: PPUSH
10717: LD_VAR 0 4
10721: PUSH
10722: LD_INT 2
10724: ARRAY
10725: PPUSH
10726: CALL_OW 428
10730: PUSH
10731: LD_VAR 0 5
10735: IN
10736: IFFALSE 10765
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10738: LD_VAR 0 4
10742: PUSH
10743: LD_INT 1
10745: ARRAY
10746: PPUSH
10747: LD_VAR 0 4
10751: PUSH
10752: LD_INT 2
10754: ARRAY
10755: PPUSH
10756: LD_VAR 0 1
10760: PPUSH
10761: CALL_OW 456
// end ;
10765: GO 10678
10767: POP
10768: POP
// end ;
10769: LD_VAR 0 3
10773: RET
// export function Count ( array ) ; var i ; begin
10774: LD_INT 0
10776: PPUSH
10777: PPUSH
// result := 0 ;
10778: LD_ADDR_VAR 0 2
10782: PUSH
10783: LD_INT 0
10785: ST_TO_ADDR
// for i in array do
10786: LD_ADDR_VAR 0 3
10790: PUSH
10791: LD_VAR 0 1
10795: PUSH
10796: FOR_IN
10797: IFFALSE 10821
// if i then
10799: LD_VAR 0 3
10803: IFFALSE 10819
// result := result + 1 ;
10805: LD_ADDR_VAR 0 2
10809: PUSH
10810: LD_VAR 0 2
10814: PUSH
10815: LD_INT 1
10817: PLUS
10818: ST_TO_ADDR
10819: GO 10796
10821: POP
10822: POP
// end ;
10823: LD_VAR 0 2
10827: RET
// export function IsEmpty ( building ) ; begin
10828: LD_INT 0
10830: PPUSH
// if not building then
10831: LD_VAR 0 1
10835: NOT
10836: IFFALSE 10840
// exit ;
10838: GO 10883
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10840: LD_ADDR_VAR 0 2
10844: PUSH
10845: LD_VAR 0 1
10849: PUSH
10850: LD_INT 22
10852: PUSH
10853: LD_VAR 0 1
10857: PPUSH
10858: CALL_OW 255
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: LD_INT 58
10869: PUSH
10870: EMPTY
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PPUSH
10877: CALL_OW 69
10881: IN
10882: ST_TO_ADDR
// end ;
10883: LD_VAR 0 2
10887: RET
// export function IsNotFull ( building ) ; var places ; begin
10888: LD_INT 0
10890: PPUSH
10891: PPUSH
// if not building then
10892: LD_VAR 0 1
10896: NOT
10897: IFFALSE 10901
// exit ;
10899: GO 11072
// result := false ;
10901: LD_ADDR_VAR 0 2
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// places := 0 ;
10909: LD_ADDR_VAR 0 3
10913: PUSH
10914: LD_INT 0
10916: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
10917: LD_VAR 0 1
10921: PPUSH
10922: CALL_OW 266
10926: PUSH
10927: LD_INT 0
10929: DOUBLE
10930: EQUAL
10931: IFTRUE 10989
10933: LD_INT 1
10935: DOUBLE
10936: EQUAL
10937: IFTRUE 10989
10939: LD_INT 6
10941: DOUBLE
10942: EQUAL
10943: IFTRUE 10989
10945: LD_INT 7
10947: DOUBLE
10948: EQUAL
10949: IFTRUE 10989
10951: LD_INT 8
10953: DOUBLE
10954: EQUAL
10955: IFTRUE 10989
10957: LD_INT 4
10959: DOUBLE
10960: EQUAL
10961: IFTRUE 10989
10963: LD_INT 5
10965: DOUBLE
10966: EQUAL
10967: IFTRUE 10989
10969: LD_INT 2
10971: DOUBLE
10972: EQUAL
10973: IFTRUE 10989
10975: LD_INT 3
10977: DOUBLE
10978: EQUAL
10979: IFTRUE 10989
10981: LD_INT 35
10983: DOUBLE
10984: EQUAL
10985: IFTRUE 10989
10987: GO 11000
10989: POP
// places := 6 ; b_bunker , b_breastwork :
10990: LD_ADDR_VAR 0 3
10994: PUSH
10995: LD_INT 6
10997: ST_TO_ADDR
10998: GO 11045
11000: LD_INT 32
11002: DOUBLE
11003: EQUAL
11004: IFTRUE 11014
11006: LD_INT 31
11008: DOUBLE
11009: EQUAL
11010: IFTRUE 11014
11012: GO 11025
11014: POP
// places := 1 ; b_control_tower :
11015: LD_ADDR_VAR 0 3
11019: PUSH
11020: LD_INT 1
11022: ST_TO_ADDR
11023: GO 11045
11025: LD_INT 36
11027: DOUBLE
11028: EQUAL
11029: IFTRUE 11033
11031: GO 11044
11033: POP
// places := 3 ; end ;
11034: LD_ADDR_VAR 0 3
11038: PUSH
11039: LD_INT 3
11041: ST_TO_ADDR
11042: GO 11045
11044: POP
// if places then
11045: LD_VAR 0 3
11049: IFFALSE 11072
// result := UnitsInside ( building ) < places ;
11051: LD_ADDR_VAR 0 2
11055: PUSH
11056: LD_VAR 0 1
11060: PPUSH
11061: CALL_OW 313
11065: PUSH
11066: LD_VAR 0 3
11070: LESS
11071: ST_TO_ADDR
// end ;
11072: LD_VAR 0 2
11076: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11077: LD_INT 0
11079: PPUSH
11080: PPUSH
11081: PPUSH
11082: PPUSH
// tmp := [ ] ;
11083: LD_ADDR_VAR 0 3
11087: PUSH
11088: EMPTY
11089: ST_TO_ADDR
// list := [ ] ;
11090: LD_ADDR_VAR 0 5
11094: PUSH
11095: EMPTY
11096: ST_TO_ADDR
// for i = 16 to 25 do
11097: LD_ADDR_VAR 0 4
11101: PUSH
11102: DOUBLE
11103: LD_INT 16
11105: DEC
11106: ST_TO_ADDR
11107: LD_INT 25
11109: PUSH
11110: FOR_TO
11111: IFFALSE 11184
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11113: LD_ADDR_VAR 0 3
11117: PUSH
11118: LD_VAR 0 3
11122: PUSH
11123: LD_INT 22
11125: PUSH
11126: LD_VAR 0 1
11130: PPUSH
11131: CALL_OW 255
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 91
11142: PUSH
11143: LD_VAR 0 1
11147: PUSH
11148: LD_INT 6
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: PUSH
11156: LD_INT 30
11158: PUSH
11159: LD_VAR 0 4
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: LIST
11172: PUSH
11173: EMPTY
11174: LIST
11175: PPUSH
11176: CALL_OW 69
11180: ADD
11181: ST_TO_ADDR
11182: GO 11110
11184: POP
11185: POP
// for i = 1 to tmp do
11186: LD_ADDR_VAR 0 4
11190: PUSH
11191: DOUBLE
11192: LD_INT 1
11194: DEC
11195: ST_TO_ADDR
11196: LD_VAR 0 3
11200: PUSH
11201: FOR_TO
11202: IFFALSE 11290
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11204: LD_ADDR_VAR 0 5
11208: PUSH
11209: LD_VAR 0 5
11213: PUSH
11214: LD_VAR 0 3
11218: PUSH
11219: LD_VAR 0 4
11223: ARRAY
11224: PPUSH
11225: CALL_OW 266
11229: PUSH
11230: LD_VAR 0 3
11234: PUSH
11235: LD_VAR 0 4
11239: ARRAY
11240: PPUSH
11241: CALL_OW 250
11245: PUSH
11246: LD_VAR 0 3
11250: PUSH
11251: LD_VAR 0 4
11255: ARRAY
11256: PPUSH
11257: CALL_OW 251
11261: PUSH
11262: LD_VAR 0 3
11266: PUSH
11267: LD_VAR 0 4
11271: ARRAY
11272: PPUSH
11273: CALL_OW 254
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: PUSH
11284: EMPTY
11285: LIST
11286: ADD
11287: ST_TO_ADDR
11288: GO 11201
11290: POP
11291: POP
// result := list ;
11292: LD_ADDR_VAR 0 2
11296: PUSH
11297: LD_VAR 0 5
11301: ST_TO_ADDR
// end ;
11302: LD_VAR 0 2
11306: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11307: LD_INT 0
11309: PPUSH
11310: PPUSH
11311: PPUSH
11312: PPUSH
11313: PPUSH
11314: PPUSH
11315: PPUSH
// if not factory then
11316: LD_VAR 0 1
11320: NOT
11321: IFFALSE 11325
// exit ;
11323: GO 11918
// if control = control_apeman then
11325: LD_VAR 0 4
11329: PUSH
11330: LD_INT 5
11332: EQUAL
11333: IFFALSE 11442
// begin tmp := UnitsInside ( factory ) ;
11335: LD_ADDR_VAR 0 8
11339: PUSH
11340: LD_VAR 0 1
11344: PPUSH
11345: CALL_OW 313
11349: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11350: LD_VAR 0 8
11354: PPUSH
11355: LD_INT 25
11357: PUSH
11358: LD_INT 12
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PPUSH
11365: CALL_OW 72
11369: NOT
11370: IFFALSE 11380
// control := control_manual ;
11372: LD_ADDR_VAR 0 4
11376: PUSH
11377: LD_INT 1
11379: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11380: LD_ADDR_VAR 0 8
11384: PUSH
11385: LD_VAR 0 1
11389: PPUSH
11390: CALL 11077 0 1
11394: ST_TO_ADDR
// if tmp then
11395: LD_VAR 0 8
11399: IFFALSE 11442
// begin for i in tmp do
11401: LD_ADDR_VAR 0 7
11405: PUSH
11406: LD_VAR 0 8
11410: PUSH
11411: FOR_IN
11412: IFFALSE 11440
// if i [ 1 ] = b_ext_radio then
11414: LD_VAR 0 7
11418: PUSH
11419: LD_INT 1
11421: ARRAY
11422: PUSH
11423: LD_INT 22
11425: EQUAL
11426: IFFALSE 11438
// begin control := control_remote ;
11428: LD_ADDR_VAR 0 4
11432: PUSH
11433: LD_INT 2
11435: ST_TO_ADDR
// break ;
11436: GO 11440
// end ;
11438: GO 11411
11440: POP
11441: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11442: LD_VAR 0 1
11446: PPUSH
11447: LD_VAR 0 2
11451: PPUSH
11452: LD_VAR 0 3
11456: PPUSH
11457: LD_VAR 0 4
11461: PPUSH
11462: LD_VAR 0 5
11466: PPUSH
11467: CALL_OW 448
11471: IFFALSE 11506
// begin result := [ chassis , engine , control , weapon ] ;
11473: LD_ADDR_VAR 0 6
11477: PUSH
11478: LD_VAR 0 2
11482: PUSH
11483: LD_VAR 0 3
11487: PUSH
11488: LD_VAR 0 4
11492: PUSH
11493: LD_VAR 0 5
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: ST_TO_ADDR
// exit ;
11504: GO 11918
// end ; _chassis := AvailableChassisList ( factory ) ;
11506: LD_ADDR_VAR 0 9
11510: PUSH
11511: LD_VAR 0 1
11515: PPUSH
11516: CALL_OW 475
11520: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11521: LD_ADDR_VAR 0 11
11525: PUSH
11526: LD_VAR 0 1
11530: PPUSH
11531: CALL_OW 476
11535: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11536: LD_ADDR_VAR 0 12
11540: PUSH
11541: LD_VAR 0 1
11545: PPUSH
11546: CALL_OW 477
11550: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11551: LD_ADDR_VAR 0 10
11555: PUSH
11556: LD_VAR 0 1
11560: PPUSH
11561: CALL_OW 478
11565: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11566: LD_VAR 0 9
11570: NOT
11571: PUSH
11572: LD_VAR 0 11
11576: NOT
11577: OR
11578: PUSH
11579: LD_VAR 0 12
11583: NOT
11584: OR
11585: PUSH
11586: LD_VAR 0 10
11590: NOT
11591: OR
11592: IFFALSE 11627
// begin result := [ chassis , engine , control , weapon ] ;
11594: LD_ADDR_VAR 0 6
11598: PUSH
11599: LD_VAR 0 2
11603: PUSH
11604: LD_VAR 0 3
11608: PUSH
11609: LD_VAR 0 4
11613: PUSH
11614: LD_VAR 0 5
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: ST_TO_ADDR
// exit ;
11625: GO 11918
// end ; if not chassis in _chassis then
11627: LD_VAR 0 2
11631: PUSH
11632: LD_VAR 0 9
11636: IN
11637: NOT
11638: IFFALSE 11664
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11640: LD_ADDR_VAR 0 2
11644: PUSH
11645: LD_VAR 0 9
11649: PUSH
11650: LD_INT 1
11652: PPUSH
11653: LD_VAR 0 9
11657: PPUSH
11658: CALL_OW 12
11662: ARRAY
11663: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11664: LD_VAR 0 2
11668: PPUSH
11669: LD_VAR 0 3
11673: PPUSH
11674: CALL 11923 0 2
11678: NOT
11679: IFFALSE 11738
// repeat engine := _engine [ 1 ] ;
11681: LD_ADDR_VAR 0 3
11685: PUSH
11686: LD_VAR 0 11
11690: PUSH
11691: LD_INT 1
11693: ARRAY
11694: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11695: LD_ADDR_VAR 0 11
11699: PUSH
11700: LD_VAR 0 11
11704: PPUSH
11705: LD_INT 1
11707: PPUSH
11708: CALL_OW 3
11712: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11713: LD_VAR 0 2
11717: PPUSH
11718: LD_VAR 0 3
11722: PPUSH
11723: CALL 11923 0 2
11727: PUSH
11728: LD_VAR 0 11
11732: PUSH
11733: EMPTY
11734: EQUAL
11735: OR
11736: IFFALSE 11681
// if not control in _control then
11738: LD_VAR 0 4
11742: PUSH
11743: LD_VAR 0 12
11747: IN
11748: NOT
11749: IFFALSE 11775
// control := _control [ rand ( 1 , _control ) ] ;
11751: LD_ADDR_VAR 0 4
11755: PUSH
11756: LD_VAR 0 12
11760: PUSH
11761: LD_INT 1
11763: PPUSH
11764: LD_VAR 0 12
11768: PPUSH
11769: CALL_OW 12
11773: ARRAY
11774: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11775: LD_VAR 0 2
11779: PPUSH
11780: LD_VAR 0 5
11784: PPUSH
11785: CALL 12143 0 2
11789: NOT
11790: IFFALSE 11849
// repeat weapon := _weapon [ 1 ] ;
11792: LD_ADDR_VAR 0 5
11796: PUSH
11797: LD_VAR 0 10
11801: PUSH
11802: LD_INT 1
11804: ARRAY
11805: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11806: LD_ADDR_VAR 0 10
11810: PUSH
11811: LD_VAR 0 10
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: CALL_OW 3
11823: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11824: LD_VAR 0 2
11828: PPUSH
11829: LD_VAR 0 5
11833: PPUSH
11834: CALL 12143 0 2
11838: PUSH
11839: LD_VAR 0 10
11843: PUSH
11844: EMPTY
11845: EQUAL
11846: OR
11847: IFFALSE 11792
// result := [ ] ;
11849: LD_ADDR_VAR 0 6
11853: PUSH
11854: EMPTY
11855: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11856: LD_VAR 0 1
11860: PPUSH
11861: LD_VAR 0 2
11865: PPUSH
11866: LD_VAR 0 3
11870: PPUSH
11871: LD_VAR 0 4
11875: PPUSH
11876: LD_VAR 0 5
11880: PPUSH
11881: CALL_OW 448
11885: IFFALSE 11918
// result := [ chassis , engine , control , weapon ] ;
11887: LD_ADDR_VAR 0 6
11891: PUSH
11892: LD_VAR 0 2
11896: PUSH
11897: LD_VAR 0 3
11901: PUSH
11902: LD_VAR 0 4
11906: PUSH
11907: LD_VAR 0 5
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: ST_TO_ADDR
// end ;
11918: LD_VAR 0 6
11922: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11923: LD_INT 0
11925: PPUSH
// if not chassis or not engine then
11926: LD_VAR 0 1
11930: NOT
11931: PUSH
11932: LD_VAR 0 2
11936: NOT
11937: OR
11938: IFFALSE 11942
// exit ;
11940: GO 12138
// case engine of engine_solar :
11942: LD_VAR 0 2
11946: PUSH
11947: LD_INT 2
11949: DOUBLE
11950: EQUAL
11951: IFTRUE 11955
11953: GO 11993
11955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11956: LD_ADDR_VAR 0 3
11960: PUSH
11961: LD_INT 11
11963: PUSH
11964: LD_INT 12
11966: PUSH
11967: LD_INT 13
11969: PUSH
11970: LD_INT 14
11972: PUSH
11973: LD_INT 1
11975: PUSH
11976: LD_INT 2
11978: PUSH
11979: LD_INT 3
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: ST_TO_ADDR
11991: GO 12122
11993: LD_INT 1
11995: DOUBLE
11996: EQUAL
11997: IFTRUE 12001
11999: GO 12063
12001: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12002: LD_ADDR_VAR 0 3
12006: PUSH
12007: LD_INT 11
12009: PUSH
12010: LD_INT 12
12012: PUSH
12013: LD_INT 13
12015: PUSH
12016: LD_INT 14
12018: PUSH
12019: LD_INT 1
12021: PUSH
12022: LD_INT 2
12024: PUSH
12025: LD_INT 3
12027: PUSH
12028: LD_INT 4
12030: PUSH
12031: LD_INT 5
12033: PUSH
12034: LD_INT 21
12036: PUSH
12037: LD_INT 23
12039: PUSH
12040: LD_INT 22
12042: PUSH
12043: LD_INT 24
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: ST_TO_ADDR
12061: GO 12122
12063: LD_INT 3
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12121
12071: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12072: LD_ADDR_VAR 0 3
12076: PUSH
12077: LD_INT 13
12079: PUSH
12080: LD_INT 14
12082: PUSH
12083: LD_INT 2
12085: PUSH
12086: LD_INT 3
12088: PUSH
12089: LD_INT 4
12091: PUSH
12092: LD_INT 5
12094: PUSH
12095: LD_INT 21
12097: PUSH
12098: LD_INT 22
12100: PUSH
12101: LD_INT 23
12103: PUSH
12104: LD_INT 24
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: ST_TO_ADDR
12119: GO 12122
12121: POP
// result := ( chassis in result ) ;
12122: LD_ADDR_VAR 0 3
12126: PUSH
12127: LD_VAR 0 1
12131: PUSH
12132: LD_VAR 0 3
12136: IN
12137: ST_TO_ADDR
// end ;
12138: LD_VAR 0 3
12142: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12143: LD_INT 0
12145: PPUSH
// if not chassis or not weapon then
12146: LD_VAR 0 1
12150: NOT
12151: PUSH
12152: LD_VAR 0 2
12156: NOT
12157: OR
12158: IFFALSE 12162
// exit ;
12160: GO 13222
// case weapon of us_machine_gun :
12162: LD_VAR 0 2
12166: PUSH
12167: LD_INT 2
12169: DOUBLE
12170: EQUAL
12171: IFTRUE 12175
12173: GO 12205
12175: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12176: LD_ADDR_VAR 0 3
12180: PUSH
12181: LD_INT 1
12183: PUSH
12184: LD_INT 2
12186: PUSH
12187: LD_INT 3
12189: PUSH
12190: LD_INT 4
12192: PUSH
12193: LD_INT 5
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: ST_TO_ADDR
12203: GO 13206
12205: LD_INT 3
12207: DOUBLE
12208: EQUAL
12209: IFTRUE 12213
12211: GO 12243
12213: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12214: LD_ADDR_VAR 0 3
12218: PUSH
12219: LD_INT 1
12221: PUSH
12222: LD_INT 2
12224: PUSH
12225: LD_INT 3
12227: PUSH
12228: LD_INT 4
12230: PUSH
12231: LD_INT 5
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: ST_TO_ADDR
12241: GO 13206
12243: LD_INT 11
12245: DOUBLE
12246: EQUAL
12247: IFTRUE 12251
12249: GO 12281
12251: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12252: LD_ADDR_VAR 0 3
12256: PUSH
12257: LD_INT 1
12259: PUSH
12260: LD_INT 2
12262: PUSH
12263: LD_INT 3
12265: PUSH
12266: LD_INT 4
12268: PUSH
12269: LD_INT 5
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: ST_TO_ADDR
12279: GO 13206
12281: LD_INT 4
12283: DOUBLE
12284: EQUAL
12285: IFTRUE 12289
12287: GO 12315
12289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12290: LD_ADDR_VAR 0 3
12294: PUSH
12295: LD_INT 2
12297: PUSH
12298: LD_INT 3
12300: PUSH
12301: LD_INT 4
12303: PUSH
12304: LD_INT 5
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: ST_TO_ADDR
12313: GO 13206
12315: LD_INT 5
12317: DOUBLE
12318: EQUAL
12319: IFTRUE 12323
12321: GO 12349
12323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12324: LD_ADDR_VAR 0 3
12328: PUSH
12329: LD_INT 2
12331: PUSH
12332: LD_INT 3
12334: PUSH
12335: LD_INT 4
12337: PUSH
12338: LD_INT 5
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: ST_TO_ADDR
12347: GO 13206
12349: LD_INT 9
12351: DOUBLE
12352: EQUAL
12353: IFTRUE 12357
12355: GO 12383
12357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12358: LD_ADDR_VAR 0 3
12362: PUSH
12363: LD_INT 2
12365: PUSH
12366: LD_INT 3
12368: PUSH
12369: LD_INT 4
12371: PUSH
12372: LD_INT 5
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: ST_TO_ADDR
12381: GO 13206
12383: LD_INT 7
12385: DOUBLE
12386: EQUAL
12387: IFTRUE 12391
12389: GO 12417
12391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12392: LD_ADDR_VAR 0 3
12396: PUSH
12397: LD_INT 2
12399: PUSH
12400: LD_INT 3
12402: PUSH
12403: LD_INT 4
12405: PUSH
12406: LD_INT 5
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: ST_TO_ADDR
12415: GO 13206
12417: LD_INT 12
12419: DOUBLE
12420: EQUAL
12421: IFTRUE 12425
12423: GO 12451
12425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12426: LD_ADDR_VAR 0 3
12430: PUSH
12431: LD_INT 2
12433: PUSH
12434: LD_INT 3
12436: PUSH
12437: LD_INT 4
12439: PUSH
12440: LD_INT 5
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: ST_TO_ADDR
12449: GO 13206
12451: LD_INT 13
12453: DOUBLE
12454: EQUAL
12455: IFTRUE 12459
12457: GO 12485
12459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12460: LD_ADDR_VAR 0 3
12464: PUSH
12465: LD_INT 2
12467: PUSH
12468: LD_INT 3
12470: PUSH
12471: LD_INT 4
12473: PUSH
12474: LD_INT 5
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: ST_TO_ADDR
12483: GO 13206
12485: LD_INT 14
12487: DOUBLE
12488: EQUAL
12489: IFTRUE 12493
12491: GO 12511
12493: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12494: LD_ADDR_VAR 0 3
12498: PUSH
12499: LD_INT 4
12501: PUSH
12502: LD_INT 5
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: ST_TO_ADDR
12509: GO 13206
12511: LD_INT 6
12513: DOUBLE
12514: EQUAL
12515: IFTRUE 12519
12517: GO 12537
12519: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12520: LD_ADDR_VAR 0 3
12524: PUSH
12525: LD_INT 4
12527: PUSH
12528: LD_INT 5
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: ST_TO_ADDR
12535: GO 13206
12537: LD_INT 10
12539: DOUBLE
12540: EQUAL
12541: IFTRUE 12545
12543: GO 12563
12545: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12546: LD_ADDR_VAR 0 3
12550: PUSH
12551: LD_INT 4
12553: PUSH
12554: LD_INT 5
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: ST_TO_ADDR
12561: GO 13206
12563: LD_INT 22
12565: DOUBLE
12566: EQUAL
12567: IFTRUE 12571
12569: GO 12597
12571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_INT 11
12579: PUSH
12580: LD_INT 12
12582: PUSH
12583: LD_INT 13
12585: PUSH
12586: LD_INT 14
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: ST_TO_ADDR
12595: GO 13206
12597: LD_INT 23
12599: DOUBLE
12600: EQUAL
12601: IFTRUE 12605
12603: GO 12631
12605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12606: LD_ADDR_VAR 0 3
12610: PUSH
12611: LD_INT 11
12613: PUSH
12614: LD_INT 12
12616: PUSH
12617: LD_INT 13
12619: PUSH
12620: LD_INT 14
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: ST_TO_ADDR
12629: GO 13206
12631: LD_INT 24
12633: DOUBLE
12634: EQUAL
12635: IFTRUE 12639
12637: GO 12665
12639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12640: LD_ADDR_VAR 0 3
12644: PUSH
12645: LD_INT 11
12647: PUSH
12648: LD_INT 12
12650: PUSH
12651: LD_INT 13
12653: PUSH
12654: LD_INT 14
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: ST_TO_ADDR
12663: GO 13206
12665: LD_INT 30
12667: DOUBLE
12668: EQUAL
12669: IFTRUE 12673
12671: GO 12699
12673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12674: LD_ADDR_VAR 0 3
12678: PUSH
12679: LD_INT 11
12681: PUSH
12682: LD_INT 12
12684: PUSH
12685: LD_INT 13
12687: PUSH
12688: LD_INT 14
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: ST_TO_ADDR
12697: GO 13206
12699: LD_INT 25
12701: DOUBLE
12702: EQUAL
12703: IFTRUE 12707
12705: GO 12725
12707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12708: LD_ADDR_VAR 0 3
12712: PUSH
12713: LD_INT 13
12715: PUSH
12716: LD_INT 14
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: ST_TO_ADDR
12723: GO 13206
12725: LD_INT 27
12727: DOUBLE
12728: EQUAL
12729: IFTRUE 12733
12731: GO 12751
12733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12734: LD_ADDR_VAR 0 3
12738: PUSH
12739: LD_INT 13
12741: PUSH
12742: LD_INT 14
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: ST_TO_ADDR
12749: GO 13206
12751: LD_INT 92
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12785
12759: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12760: LD_ADDR_VAR 0 3
12764: PUSH
12765: LD_INT 11
12767: PUSH
12768: LD_INT 12
12770: PUSH
12771: LD_INT 13
12773: PUSH
12774: LD_INT 14
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: ST_TO_ADDR
12783: GO 13206
12785: LD_INT 28
12787: DOUBLE
12788: EQUAL
12789: IFTRUE 12793
12791: GO 12811
12793: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12794: LD_ADDR_VAR 0 3
12798: PUSH
12799: LD_INT 13
12801: PUSH
12802: LD_INT 14
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: ST_TO_ADDR
12809: GO 13206
12811: LD_INT 29
12813: DOUBLE
12814: EQUAL
12815: IFTRUE 12819
12817: GO 12837
12819: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12820: LD_ADDR_VAR 0 3
12824: PUSH
12825: LD_INT 13
12827: PUSH
12828: LD_INT 14
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: ST_TO_ADDR
12835: GO 13206
12837: LD_INT 31
12839: DOUBLE
12840: EQUAL
12841: IFTRUE 12845
12843: GO 12863
12845: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12846: LD_ADDR_VAR 0 3
12850: PUSH
12851: LD_INT 13
12853: PUSH
12854: LD_INT 14
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: ST_TO_ADDR
12861: GO 13206
12863: LD_INT 26
12865: DOUBLE
12866: EQUAL
12867: IFTRUE 12871
12869: GO 12889
12871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12872: LD_ADDR_VAR 0 3
12876: PUSH
12877: LD_INT 13
12879: PUSH
12880: LD_INT 14
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: ST_TO_ADDR
12887: GO 13206
12889: LD_INT 42
12891: DOUBLE
12892: EQUAL
12893: IFTRUE 12897
12895: GO 12923
12897: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12898: LD_ADDR_VAR 0 3
12902: PUSH
12903: LD_INT 21
12905: PUSH
12906: LD_INT 22
12908: PUSH
12909: LD_INT 23
12911: PUSH
12912: LD_INT 24
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: ST_TO_ADDR
12921: GO 13206
12923: LD_INT 43
12925: DOUBLE
12926: EQUAL
12927: IFTRUE 12931
12929: GO 12957
12931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12932: LD_ADDR_VAR 0 3
12936: PUSH
12937: LD_INT 21
12939: PUSH
12940: LD_INT 22
12942: PUSH
12943: LD_INT 23
12945: PUSH
12946: LD_INT 24
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: ST_TO_ADDR
12955: GO 13206
12957: LD_INT 44
12959: DOUBLE
12960: EQUAL
12961: IFTRUE 12965
12963: GO 12991
12965: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12966: LD_ADDR_VAR 0 3
12970: PUSH
12971: LD_INT 21
12973: PUSH
12974: LD_INT 22
12976: PUSH
12977: LD_INT 23
12979: PUSH
12980: LD_INT 24
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: ST_TO_ADDR
12989: GO 13206
12991: LD_INT 45
12993: DOUBLE
12994: EQUAL
12995: IFTRUE 12999
12997: GO 13025
12999: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13000: LD_ADDR_VAR 0 3
13004: PUSH
13005: LD_INT 21
13007: PUSH
13008: LD_INT 22
13010: PUSH
13011: LD_INT 23
13013: PUSH
13014: LD_INT 24
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: ST_TO_ADDR
13023: GO 13206
13025: LD_INT 49
13027: DOUBLE
13028: EQUAL
13029: IFTRUE 13033
13031: GO 13059
13033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13034: LD_ADDR_VAR 0 3
13038: PUSH
13039: LD_INT 21
13041: PUSH
13042: LD_INT 22
13044: PUSH
13045: LD_INT 23
13047: PUSH
13048: LD_INT 24
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: ST_TO_ADDR
13057: GO 13206
13059: LD_INT 51
13061: DOUBLE
13062: EQUAL
13063: IFTRUE 13067
13065: GO 13093
13067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13068: LD_ADDR_VAR 0 3
13072: PUSH
13073: LD_INT 21
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: LD_INT 23
13081: PUSH
13082: LD_INT 24
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: ST_TO_ADDR
13091: GO 13206
13093: LD_INT 52
13095: DOUBLE
13096: EQUAL
13097: IFTRUE 13101
13099: GO 13127
13101: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13102: LD_ADDR_VAR 0 3
13106: PUSH
13107: LD_INT 21
13109: PUSH
13110: LD_INT 22
13112: PUSH
13113: LD_INT 23
13115: PUSH
13116: LD_INT 24
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: ST_TO_ADDR
13125: GO 13206
13127: LD_INT 53
13129: DOUBLE
13130: EQUAL
13131: IFTRUE 13135
13133: GO 13153
13135: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13136: LD_ADDR_VAR 0 3
13140: PUSH
13141: LD_INT 23
13143: PUSH
13144: LD_INT 24
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: ST_TO_ADDR
13151: GO 13206
13153: LD_INT 46
13155: DOUBLE
13156: EQUAL
13157: IFTRUE 13161
13159: GO 13179
13161: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13162: LD_ADDR_VAR 0 3
13166: PUSH
13167: LD_INT 23
13169: PUSH
13170: LD_INT 24
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: ST_TO_ADDR
13177: GO 13206
13179: LD_INT 47
13181: DOUBLE
13182: EQUAL
13183: IFTRUE 13187
13185: GO 13205
13187: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: LD_INT 23
13195: PUSH
13196: LD_INT 24
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: ST_TO_ADDR
13203: GO 13206
13205: POP
// result := ( chassis in result ) ;
13206: LD_ADDR_VAR 0 3
13210: PUSH
13211: LD_VAR 0 1
13215: PUSH
13216: LD_VAR 0 3
13220: IN
13221: ST_TO_ADDR
// end ;
13222: LD_VAR 0 3
13226: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13227: LD_INT 0
13229: PPUSH
13230: PPUSH
13231: PPUSH
13232: PPUSH
13233: PPUSH
13234: PPUSH
13235: PPUSH
// result := array ;
13236: LD_ADDR_VAR 0 5
13240: PUSH
13241: LD_VAR 0 1
13245: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13246: LD_VAR 0 1
13250: NOT
13251: PUSH
13252: LD_VAR 0 2
13256: NOT
13257: OR
13258: PUSH
13259: LD_VAR 0 3
13263: NOT
13264: OR
13265: PUSH
13266: LD_VAR 0 2
13270: PUSH
13271: LD_VAR 0 1
13275: GREATER
13276: OR
13277: PUSH
13278: LD_VAR 0 3
13282: PUSH
13283: LD_VAR 0 1
13287: GREATER
13288: OR
13289: IFFALSE 13293
// exit ;
13291: GO 13589
// if direction then
13293: LD_VAR 0 4
13297: IFFALSE 13361
// begin d := 1 ;
13299: LD_ADDR_VAR 0 9
13303: PUSH
13304: LD_INT 1
13306: ST_TO_ADDR
// if i_from > i_to then
13307: LD_VAR 0 2
13311: PUSH
13312: LD_VAR 0 3
13316: GREATER
13317: IFFALSE 13343
// length := ( array - i_from ) + i_to else
13319: LD_ADDR_VAR 0 11
13323: PUSH
13324: LD_VAR 0 1
13328: PUSH
13329: LD_VAR 0 2
13333: MINUS
13334: PUSH
13335: LD_VAR 0 3
13339: PLUS
13340: ST_TO_ADDR
13341: GO 13359
// length := i_to - i_from ;
13343: LD_ADDR_VAR 0 11
13347: PUSH
13348: LD_VAR 0 3
13352: PUSH
13353: LD_VAR 0 2
13357: MINUS
13358: ST_TO_ADDR
// end else
13359: GO 13422
// begin d := - 1 ;
13361: LD_ADDR_VAR 0 9
13365: PUSH
13366: LD_INT 1
13368: NEG
13369: ST_TO_ADDR
// if i_from > i_to then
13370: LD_VAR 0 2
13374: PUSH
13375: LD_VAR 0 3
13379: GREATER
13380: IFFALSE 13400
// length := i_from - i_to else
13382: LD_ADDR_VAR 0 11
13386: PUSH
13387: LD_VAR 0 2
13391: PUSH
13392: LD_VAR 0 3
13396: MINUS
13397: ST_TO_ADDR
13398: GO 13422
// length := ( array - i_to ) + i_from ;
13400: LD_ADDR_VAR 0 11
13404: PUSH
13405: LD_VAR 0 1
13409: PUSH
13410: LD_VAR 0 3
13414: MINUS
13415: PUSH
13416: LD_VAR 0 2
13420: PLUS
13421: ST_TO_ADDR
// end ; if not length then
13422: LD_VAR 0 11
13426: NOT
13427: IFFALSE 13431
// exit ;
13429: GO 13589
// tmp := array ;
13431: LD_ADDR_VAR 0 10
13435: PUSH
13436: LD_VAR 0 1
13440: ST_TO_ADDR
// for i = 1 to length do
13441: LD_ADDR_VAR 0 6
13445: PUSH
13446: DOUBLE
13447: LD_INT 1
13449: DEC
13450: ST_TO_ADDR
13451: LD_VAR 0 11
13455: PUSH
13456: FOR_TO
13457: IFFALSE 13577
// begin for j = 1 to array do
13459: LD_ADDR_VAR 0 7
13463: PUSH
13464: DOUBLE
13465: LD_INT 1
13467: DEC
13468: ST_TO_ADDR
13469: LD_VAR 0 1
13473: PUSH
13474: FOR_TO
13475: IFFALSE 13563
// begin k := j + d ;
13477: LD_ADDR_VAR 0 8
13481: PUSH
13482: LD_VAR 0 7
13486: PUSH
13487: LD_VAR 0 9
13491: PLUS
13492: ST_TO_ADDR
// if k > array then
13493: LD_VAR 0 8
13497: PUSH
13498: LD_VAR 0 1
13502: GREATER
13503: IFFALSE 13513
// k := 1 ;
13505: LD_ADDR_VAR 0 8
13509: PUSH
13510: LD_INT 1
13512: ST_TO_ADDR
// if not k then
13513: LD_VAR 0 8
13517: NOT
13518: IFFALSE 13530
// k := array ;
13520: LD_ADDR_VAR 0 8
13524: PUSH
13525: LD_VAR 0 1
13529: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13530: LD_ADDR_VAR 0 10
13534: PUSH
13535: LD_VAR 0 10
13539: PPUSH
13540: LD_VAR 0 8
13544: PPUSH
13545: LD_VAR 0 1
13549: PUSH
13550: LD_VAR 0 7
13554: ARRAY
13555: PPUSH
13556: CALL_OW 1
13560: ST_TO_ADDR
// end ;
13561: GO 13474
13563: POP
13564: POP
// array := tmp ;
13565: LD_ADDR_VAR 0 1
13569: PUSH
13570: LD_VAR 0 10
13574: ST_TO_ADDR
// end ;
13575: GO 13456
13577: POP
13578: POP
// result := array ;
13579: LD_ADDR_VAR 0 5
13583: PUSH
13584: LD_VAR 0 1
13588: ST_TO_ADDR
// end ;
13589: LD_VAR 0 5
13593: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13594: LD_INT 0
13596: PPUSH
13597: PPUSH
// result := 0 ;
13598: LD_ADDR_VAR 0 3
13602: PUSH
13603: LD_INT 0
13605: ST_TO_ADDR
// if not array or not value in array then
13606: LD_VAR 0 1
13610: NOT
13611: PUSH
13612: LD_VAR 0 2
13616: PUSH
13617: LD_VAR 0 1
13621: IN
13622: NOT
13623: OR
13624: IFFALSE 13628
// exit ;
13626: GO 13682
// for i = 1 to array do
13628: LD_ADDR_VAR 0 4
13632: PUSH
13633: DOUBLE
13634: LD_INT 1
13636: DEC
13637: ST_TO_ADDR
13638: LD_VAR 0 1
13642: PUSH
13643: FOR_TO
13644: IFFALSE 13680
// if value = array [ i ] then
13646: LD_VAR 0 2
13650: PUSH
13651: LD_VAR 0 1
13655: PUSH
13656: LD_VAR 0 4
13660: ARRAY
13661: EQUAL
13662: IFFALSE 13678
// begin result := i ;
13664: LD_ADDR_VAR 0 3
13668: PUSH
13669: LD_VAR 0 4
13673: ST_TO_ADDR
// exit ;
13674: POP
13675: POP
13676: GO 13682
// end ;
13678: GO 13643
13680: POP
13681: POP
// end ;
13682: LD_VAR 0 3
13686: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13687: LD_INT 0
13689: PPUSH
// vc_chassis := chassis ;
13690: LD_ADDR_OWVAR 37
13694: PUSH
13695: LD_VAR 0 1
13699: ST_TO_ADDR
// vc_engine := engine ;
13700: LD_ADDR_OWVAR 39
13704: PUSH
13705: LD_VAR 0 2
13709: ST_TO_ADDR
// vc_control := control ;
13710: LD_ADDR_OWVAR 38
13714: PUSH
13715: LD_VAR 0 3
13719: ST_TO_ADDR
// vc_weapon := weapon ;
13720: LD_ADDR_OWVAR 40
13724: PUSH
13725: LD_VAR 0 4
13729: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13730: LD_ADDR_OWVAR 41
13734: PUSH
13735: LD_VAR 0 5
13739: ST_TO_ADDR
// end ;
13740: LD_VAR 0 6
13744: RET
// export function WantPlant ( unit ) ; var task ; begin
13745: LD_INT 0
13747: PPUSH
13748: PPUSH
// result := false ;
13749: LD_ADDR_VAR 0 2
13753: PUSH
13754: LD_INT 0
13756: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13757: LD_ADDR_VAR 0 3
13761: PUSH
13762: LD_VAR 0 1
13766: PPUSH
13767: CALL_OW 437
13771: ST_TO_ADDR
// if task then
13772: LD_VAR 0 3
13776: IFFALSE 13804
// if task [ 1 ] [ 1 ] = p then
13778: LD_VAR 0 3
13782: PUSH
13783: LD_INT 1
13785: ARRAY
13786: PUSH
13787: LD_INT 1
13789: ARRAY
13790: PUSH
13791: LD_STRING p
13793: EQUAL
13794: IFFALSE 13804
// result := true ;
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: LD_INT 1
13803: ST_TO_ADDR
// end ;
13804: LD_VAR 0 2
13808: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13809: LD_INT 0
13811: PPUSH
13812: PPUSH
13813: PPUSH
13814: PPUSH
// if pos < 1 then
13815: LD_VAR 0 2
13819: PUSH
13820: LD_INT 1
13822: LESS
13823: IFFALSE 13827
// exit ;
13825: GO 14130
// if pos = 1 then
13827: LD_VAR 0 2
13831: PUSH
13832: LD_INT 1
13834: EQUAL
13835: IFFALSE 13868
// result := Replace ( arr , pos [ 1 ] , value ) else
13837: LD_ADDR_VAR 0 4
13841: PUSH
13842: LD_VAR 0 1
13846: PPUSH
13847: LD_VAR 0 2
13851: PUSH
13852: LD_INT 1
13854: ARRAY
13855: PPUSH
13856: LD_VAR 0 3
13860: PPUSH
13861: CALL_OW 1
13865: ST_TO_ADDR
13866: GO 14130
// begin tmp := arr ;
13868: LD_ADDR_VAR 0 6
13872: PUSH
13873: LD_VAR 0 1
13877: ST_TO_ADDR
// s_arr := [ tmp ] ;
13878: LD_ADDR_VAR 0 7
13882: PUSH
13883: LD_VAR 0 6
13887: PUSH
13888: EMPTY
13889: LIST
13890: ST_TO_ADDR
// for i = 1 to pos - 1 do
13891: LD_ADDR_VAR 0 5
13895: PUSH
13896: DOUBLE
13897: LD_INT 1
13899: DEC
13900: ST_TO_ADDR
13901: LD_VAR 0 2
13905: PUSH
13906: LD_INT 1
13908: MINUS
13909: PUSH
13910: FOR_TO
13911: IFFALSE 13956
// begin tmp := tmp [ pos [ i ] ] ;
13913: LD_ADDR_VAR 0 6
13917: PUSH
13918: LD_VAR 0 6
13922: PUSH
13923: LD_VAR 0 2
13927: PUSH
13928: LD_VAR 0 5
13932: ARRAY
13933: ARRAY
13934: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13935: LD_ADDR_VAR 0 7
13939: PUSH
13940: LD_VAR 0 7
13944: PUSH
13945: LD_VAR 0 6
13949: PUSH
13950: EMPTY
13951: LIST
13952: ADD
13953: ST_TO_ADDR
// end ;
13954: GO 13910
13956: POP
13957: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13958: LD_ADDR_VAR 0 6
13962: PUSH
13963: LD_VAR 0 6
13967: PPUSH
13968: LD_VAR 0 2
13972: PUSH
13973: LD_VAR 0 2
13977: ARRAY
13978: PPUSH
13979: LD_VAR 0 3
13983: PPUSH
13984: CALL_OW 1
13988: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13989: LD_ADDR_VAR 0 7
13993: PUSH
13994: LD_VAR 0 7
13998: PPUSH
13999: LD_VAR 0 7
14003: PPUSH
14004: LD_VAR 0 6
14008: PPUSH
14009: CALL_OW 1
14013: ST_TO_ADDR
// for i = s_arr downto 2 do
14014: LD_ADDR_VAR 0 5
14018: PUSH
14019: DOUBLE
14020: LD_VAR 0 7
14024: INC
14025: ST_TO_ADDR
14026: LD_INT 2
14028: PUSH
14029: FOR_DOWNTO
14030: IFFALSE 14114
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14032: LD_ADDR_VAR 0 6
14036: PUSH
14037: LD_VAR 0 7
14041: PUSH
14042: LD_VAR 0 5
14046: PUSH
14047: LD_INT 1
14049: MINUS
14050: ARRAY
14051: PPUSH
14052: LD_VAR 0 2
14056: PUSH
14057: LD_VAR 0 5
14061: PUSH
14062: LD_INT 1
14064: MINUS
14065: ARRAY
14066: PPUSH
14067: LD_VAR 0 7
14071: PUSH
14072: LD_VAR 0 5
14076: ARRAY
14077: PPUSH
14078: CALL_OW 1
14082: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14083: LD_ADDR_VAR 0 7
14087: PUSH
14088: LD_VAR 0 7
14092: PPUSH
14093: LD_VAR 0 5
14097: PUSH
14098: LD_INT 1
14100: MINUS
14101: PPUSH
14102: LD_VAR 0 6
14106: PPUSH
14107: CALL_OW 1
14111: ST_TO_ADDR
// end ;
14112: GO 14029
14114: POP
14115: POP
// result := s_arr [ 1 ] ;
14116: LD_ADDR_VAR 0 4
14120: PUSH
14121: LD_VAR 0 7
14125: PUSH
14126: LD_INT 1
14128: ARRAY
14129: ST_TO_ADDR
// end ; end ;
14130: LD_VAR 0 4
14134: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14135: LD_INT 0
14137: PPUSH
14138: PPUSH
// if not list then
14139: LD_VAR 0 1
14143: NOT
14144: IFFALSE 14148
// exit ;
14146: GO 14239
// i := list [ pos1 ] ;
14148: LD_ADDR_VAR 0 5
14152: PUSH
14153: LD_VAR 0 1
14157: PUSH
14158: LD_VAR 0 2
14162: ARRAY
14163: ST_TO_ADDR
// if not i then
14164: LD_VAR 0 5
14168: NOT
14169: IFFALSE 14173
// exit ;
14171: GO 14239
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14173: LD_ADDR_VAR 0 1
14177: PUSH
14178: LD_VAR 0 1
14182: PPUSH
14183: LD_VAR 0 2
14187: PPUSH
14188: LD_VAR 0 1
14192: PUSH
14193: LD_VAR 0 3
14197: ARRAY
14198: PPUSH
14199: CALL_OW 1
14203: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14204: LD_ADDR_VAR 0 1
14208: PUSH
14209: LD_VAR 0 1
14213: PPUSH
14214: LD_VAR 0 3
14218: PPUSH
14219: LD_VAR 0 5
14223: PPUSH
14224: CALL_OW 1
14228: ST_TO_ADDR
// result := list ;
14229: LD_ADDR_VAR 0 4
14233: PUSH
14234: LD_VAR 0 1
14238: ST_TO_ADDR
// end ;
14239: LD_VAR 0 4
14243: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14244: LD_INT 0
14246: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14247: LD_ADDR_VAR 0 5
14251: PUSH
14252: LD_VAR 0 1
14256: PPUSH
14257: CALL_OW 250
14261: PPUSH
14262: LD_VAR 0 1
14266: PPUSH
14267: CALL_OW 251
14271: PPUSH
14272: LD_VAR 0 2
14276: PPUSH
14277: LD_VAR 0 3
14281: PPUSH
14282: LD_VAR 0 4
14286: PPUSH
14287: CALL 14297 0 5
14291: ST_TO_ADDR
// end ;
14292: LD_VAR 0 5
14296: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14297: LD_INT 0
14299: PPUSH
14300: PPUSH
14301: PPUSH
14302: PPUSH
// if not list then
14303: LD_VAR 0 3
14307: NOT
14308: IFFALSE 14312
// exit ;
14310: GO 14700
// result := [ ] ;
14312: LD_ADDR_VAR 0 6
14316: PUSH
14317: EMPTY
14318: ST_TO_ADDR
// for i in list do
14319: LD_ADDR_VAR 0 7
14323: PUSH
14324: LD_VAR 0 3
14328: PUSH
14329: FOR_IN
14330: IFFALSE 14532
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14332: LD_ADDR_VAR 0 9
14336: PUSH
14337: LD_VAR 0 7
14341: PPUSH
14342: LD_VAR 0 1
14346: PPUSH
14347: LD_VAR 0 2
14351: PPUSH
14352: CALL_OW 297
14356: ST_TO_ADDR
// if not result then
14357: LD_VAR 0 6
14361: NOT
14362: IFFALSE 14388
// result := [ [ i , tmp ] ] else
14364: LD_ADDR_VAR 0 6
14368: PUSH
14369: LD_VAR 0 7
14373: PUSH
14374: LD_VAR 0 9
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: EMPTY
14384: LIST
14385: ST_TO_ADDR
14386: GO 14530
// begin if result [ result ] [ 2 ] < tmp then
14388: LD_VAR 0 6
14392: PUSH
14393: LD_VAR 0 6
14397: ARRAY
14398: PUSH
14399: LD_INT 2
14401: ARRAY
14402: PUSH
14403: LD_VAR 0 9
14407: LESS
14408: IFFALSE 14450
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14410: LD_ADDR_VAR 0 6
14414: PUSH
14415: LD_VAR 0 6
14419: PPUSH
14420: LD_VAR 0 6
14424: PUSH
14425: LD_INT 1
14427: PLUS
14428: PPUSH
14429: LD_VAR 0 7
14433: PUSH
14434: LD_VAR 0 9
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PPUSH
14443: CALL_OW 2
14447: ST_TO_ADDR
14448: GO 14530
// for j = 1 to result do
14450: LD_ADDR_VAR 0 8
14454: PUSH
14455: DOUBLE
14456: LD_INT 1
14458: DEC
14459: ST_TO_ADDR
14460: LD_VAR 0 6
14464: PUSH
14465: FOR_TO
14466: IFFALSE 14528
// begin if tmp < result [ j ] [ 2 ] then
14468: LD_VAR 0 9
14472: PUSH
14473: LD_VAR 0 6
14477: PUSH
14478: LD_VAR 0 8
14482: ARRAY
14483: PUSH
14484: LD_INT 2
14486: ARRAY
14487: LESS
14488: IFFALSE 14526
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14490: LD_ADDR_VAR 0 6
14494: PUSH
14495: LD_VAR 0 6
14499: PPUSH
14500: LD_VAR 0 8
14504: PPUSH
14505: LD_VAR 0 7
14509: PUSH
14510: LD_VAR 0 9
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PPUSH
14519: CALL_OW 2
14523: ST_TO_ADDR
// break ;
14524: GO 14528
// end ; end ;
14526: GO 14465
14528: POP
14529: POP
// end ; end ;
14530: GO 14329
14532: POP
14533: POP
// if result and not asc then
14534: LD_VAR 0 6
14538: PUSH
14539: LD_VAR 0 4
14543: NOT
14544: AND
14545: IFFALSE 14620
// begin tmp := result ;
14547: LD_ADDR_VAR 0 9
14551: PUSH
14552: LD_VAR 0 6
14556: ST_TO_ADDR
// for i = tmp downto 1 do
14557: LD_ADDR_VAR 0 7
14561: PUSH
14562: DOUBLE
14563: LD_VAR 0 9
14567: INC
14568: ST_TO_ADDR
14569: LD_INT 1
14571: PUSH
14572: FOR_DOWNTO
14573: IFFALSE 14618
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14575: LD_ADDR_VAR 0 6
14579: PUSH
14580: LD_VAR 0 6
14584: PPUSH
14585: LD_VAR 0 9
14589: PUSH
14590: LD_VAR 0 7
14594: MINUS
14595: PUSH
14596: LD_INT 1
14598: PLUS
14599: PPUSH
14600: LD_VAR 0 9
14604: PUSH
14605: LD_VAR 0 7
14609: ARRAY
14610: PPUSH
14611: CALL_OW 1
14615: ST_TO_ADDR
14616: GO 14572
14618: POP
14619: POP
// end ; tmp := [ ] ;
14620: LD_ADDR_VAR 0 9
14624: PUSH
14625: EMPTY
14626: ST_TO_ADDR
// if mode then
14627: LD_VAR 0 5
14631: IFFALSE 14700
// begin for i = 1 to result do
14633: LD_ADDR_VAR 0 7
14637: PUSH
14638: DOUBLE
14639: LD_INT 1
14641: DEC
14642: ST_TO_ADDR
14643: LD_VAR 0 6
14647: PUSH
14648: FOR_TO
14649: IFFALSE 14688
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14651: LD_ADDR_VAR 0 9
14655: PUSH
14656: LD_VAR 0 9
14660: PPUSH
14661: LD_VAR 0 7
14665: PPUSH
14666: LD_VAR 0 6
14670: PUSH
14671: LD_VAR 0 7
14675: ARRAY
14676: PUSH
14677: LD_INT 1
14679: ARRAY
14680: PPUSH
14681: CALL_OW 1
14685: ST_TO_ADDR
14686: GO 14648
14688: POP
14689: POP
// result := tmp ;
14690: LD_ADDR_VAR 0 6
14694: PUSH
14695: LD_VAR 0 9
14699: ST_TO_ADDR
// end ; end ;
14700: LD_VAR 0 6
14704: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14705: LD_INT 0
14707: PPUSH
14708: PPUSH
14709: PPUSH
14710: PPUSH
14711: PPUSH
14712: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14713: LD_ADDR_VAR 0 5
14717: PUSH
14718: LD_INT 0
14720: PUSH
14721: LD_INT 0
14723: PUSH
14724: LD_INT 0
14726: PUSH
14727: EMPTY
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: ST_TO_ADDR
// if not x or not y then
14735: LD_VAR 0 2
14739: NOT
14740: PUSH
14741: LD_VAR 0 3
14745: NOT
14746: OR
14747: IFFALSE 14751
// exit ;
14749: GO 16401
// if not range then
14751: LD_VAR 0 4
14755: NOT
14756: IFFALSE 14766
// range := 10 ;
14758: LD_ADDR_VAR 0 4
14762: PUSH
14763: LD_INT 10
14765: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14766: LD_ADDR_VAR 0 8
14770: PUSH
14771: LD_INT 81
14773: PUSH
14774: LD_VAR 0 1
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 92
14785: PUSH
14786: LD_VAR 0 2
14790: PUSH
14791: LD_VAR 0 3
14795: PUSH
14796: LD_VAR 0 4
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 3
14809: PUSH
14810: LD_INT 21
14812: PUSH
14813: LD_INT 3
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: PPUSH
14829: CALL_OW 69
14833: ST_TO_ADDR
// if not tmp then
14834: LD_VAR 0 8
14838: NOT
14839: IFFALSE 14843
// exit ;
14841: GO 16401
// for i in tmp do
14843: LD_ADDR_VAR 0 6
14847: PUSH
14848: LD_VAR 0 8
14852: PUSH
14853: FOR_IN
14854: IFFALSE 16376
// begin points := [ 0 , 0 , 0 ] ;
14856: LD_ADDR_VAR 0 9
14860: PUSH
14861: LD_INT 0
14863: PUSH
14864: LD_INT 0
14866: PUSH
14867: LD_INT 0
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: LIST
14874: ST_TO_ADDR
// bpoints := 1 ;
14875: LD_ADDR_VAR 0 10
14879: PUSH
14880: LD_INT 1
14882: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14883: LD_VAR 0 6
14887: PPUSH
14888: CALL_OW 247
14892: PUSH
14893: LD_INT 1
14895: DOUBLE
14896: EQUAL
14897: IFTRUE 14901
14899: GO 15479
14901: POP
// begin if GetClass ( i ) = 1 then
14902: LD_VAR 0 6
14906: PPUSH
14907: CALL_OW 257
14911: PUSH
14912: LD_INT 1
14914: EQUAL
14915: IFFALSE 14936
// points := [ 10 , 5 , 3 ] ;
14917: LD_ADDR_VAR 0 9
14921: PUSH
14922: LD_INT 10
14924: PUSH
14925: LD_INT 5
14927: PUSH
14928: LD_INT 3
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14936: LD_VAR 0 6
14940: PPUSH
14941: CALL_OW 257
14945: PUSH
14946: LD_INT 2
14948: PUSH
14949: LD_INT 3
14951: PUSH
14952: LD_INT 4
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: LIST
14959: IN
14960: IFFALSE 14981
// points := [ 3 , 2 , 1 ] ;
14962: LD_ADDR_VAR 0 9
14966: PUSH
14967: LD_INT 3
14969: PUSH
14970: LD_INT 2
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14981: LD_VAR 0 6
14985: PPUSH
14986: CALL_OW 257
14990: PUSH
14991: LD_INT 5
14993: EQUAL
14994: IFFALSE 15015
// points := [ 130 , 5 , 2 ] ;
14996: LD_ADDR_VAR 0 9
15000: PUSH
15001: LD_INT 130
15003: PUSH
15004: LD_INT 5
15006: PUSH
15007: LD_INT 2
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15015: LD_VAR 0 6
15019: PPUSH
15020: CALL_OW 257
15024: PUSH
15025: LD_INT 8
15027: EQUAL
15028: IFFALSE 15049
// points := [ 35 , 35 , 30 ] ;
15030: LD_ADDR_VAR 0 9
15034: PUSH
15035: LD_INT 35
15037: PUSH
15038: LD_INT 35
15040: PUSH
15041: LD_INT 30
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15049: LD_VAR 0 6
15053: PPUSH
15054: CALL_OW 257
15058: PUSH
15059: LD_INT 9
15061: EQUAL
15062: IFFALSE 15083
// points := [ 20 , 55 , 40 ] ;
15064: LD_ADDR_VAR 0 9
15068: PUSH
15069: LD_INT 20
15071: PUSH
15072: LD_INT 55
15074: PUSH
15075: LD_INT 40
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15083: LD_VAR 0 6
15087: PPUSH
15088: CALL_OW 257
15092: PUSH
15093: LD_INT 12
15095: PUSH
15096: LD_INT 16
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: IN
15103: IFFALSE 15124
// points := [ 5 , 3 , 2 ] ;
15105: LD_ADDR_VAR 0 9
15109: PUSH
15110: LD_INT 5
15112: PUSH
15113: LD_INT 3
15115: PUSH
15116: LD_INT 2
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: LIST
15123: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15124: LD_VAR 0 6
15128: PPUSH
15129: CALL_OW 257
15133: PUSH
15134: LD_INT 17
15136: EQUAL
15137: IFFALSE 15158
// points := [ 100 , 50 , 75 ] ;
15139: LD_ADDR_VAR 0 9
15143: PUSH
15144: LD_INT 100
15146: PUSH
15147: LD_INT 50
15149: PUSH
15150: LD_INT 75
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15158: LD_VAR 0 6
15162: PPUSH
15163: CALL_OW 257
15167: PUSH
15168: LD_INT 15
15170: EQUAL
15171: IFFALSE 15192
// points := [ 10 , 5 , 3 ] ;
15173: LD_ADDR_VAR 0 9
15177: PUSH
15178: LD_INT 10
15180: PUSH
15181: LD_INT 5
15183: PUSH
15184: LD_INT 3
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15192: LD_VAR 0 6
15196: PPUSH
15197: CALL_OW 257
15201: PUSH
15202: LD_INT 14
15204: EQUAL
15205: IFFALSE 15226
// points := [ 10 , 0 , 0 ] ;
15207: LD_ADDR_VAR 0 9
15211: PUSH
15212: LD_INT 10
15214: PUSH
15215: LD_INT 0
15217: PUSH
15218: LD_INT 0
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: LIST
15225: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15226: LD_VAR 0 6
15230: PPUSH
15231: CALL_OW 257
15235: PUSH
15236: LD_INT 11
15238: EQUAL
15239: IFFALSE 15260
// points := [ 30 , 10 , 5 ] ;
15241: LD_ADDR_VAR 0 9
15245: PUSH
15246: LD_INT 30
15248: PUSH
15249: LD_INT 10
15251: PUSH
15252: LD_INT 5
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: LIST
15259: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15260: LD_VAR 0 1
15264: PPUSH
15265: LD_INT 5
15267: PPUSH
15268: CALL_OW 321
15272: PUSH
15273: LD_INT 2
15275: EQUAL
15276: IFFALSE 15293
// bpoints := bpoints * 1.8 ;
15278: LD_ADDR_VAR 0 10
15282: PUSH
15283: LD_VAR 0 10
15287: PUSH
15288: LD_REAL  1.80000000000000E+0000
15291: MUL
15292: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15293: LD_VAR 0 6
15297: PPUSH
15298: CALL_OW 257
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: LD_INT 2
15308: PUSH
15309: LD_INT 3
15311: PUSH
15312: LD_INT 4
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: IN
15321: PUSH
15322: LD_VAR 0 1
15326: PPUSH
15327: LD_INT 51
15329: PPUSH
15330: CALL_OW 321
15334: PUSH
15335: LD_INT 2
15337: EQUAL
15338: AND
15339: IFFALSE 15356
// bpoints := bpoints * 1.2 ;
15341: LD_ADDR_VAR 0 10
15345: PUSH
15346: LD_VAR 0 10
15350: PUSH
15351: LD_REAL  1.20000000000000E+0000
15354: MUL
15355: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15356: LD_VAR 0 6
15360: PPUSH
15361: CALL_OW 257
15365: PUSH
15366: LD_INT 5
15368: PUSH
15369: LD_INT 7
15371: PUSH
15372: LD_INT 9
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: LIST
15379: IN
15380: PUSH
15381: LD_VAR 0 1
15385: PPUSH
15386: LD_INT 52
15388: PPUSH
15389: CALL_OW 321
15393: PUSH
15394: LD_INT 2
15396: EQUAL
15397: AND
15398: IFFALSE 15415
// bpoints := bpoints * 1.5 ;
15400: LD_ADDR_VAR 0 10
15404: PUSH
15405: LD_VAR 0 10
15409: PUSH
15410: LD_REAL  1.50000000000000E+0000
15413: MUL
15414: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15415: LD_VAR 0 1
15419: PPUSH
15420: LD_INT 66
15422: PPUSH
15423: CALL_OW 321
15427: PUSH
15428: LD_INT 2
15430: EQUAL
15431: IFFALSE 15448
// bpoints := bpoints * 1.1 ;
15433: LD_ADDR_VAR 0 10
15437: PUSH
15438: LD_VAR 0 10
15442: PUSH
15443: LD_REAL  1.10000000000000E+0000
15446: MUL
15447: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15448: LD_ADDR_VAR 0 10
15452: PUSH
15453: LD_VAR 0 10
15457: PUSH
15458: LD_VAR 0 6
15462: PPUSH
15463: LD_INT 1
15465: PPUSH
15466: CALL_OW 259
15470: PUSH
15471: LD_REAL  1.15000000000000E+0000
15474: MUL
15475: MUL
15476: ST_TO_ADDR
// end ; unit_vehicle :
15477: GO 16305
15479: LD_INT 2
15481: DOUBLE
15482: EQUAL
15483: IFTRUE 15487
15485: GO 16293
15487: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15488: LD_VAR 0 6
15492: PPUSH
15493: CALL_OW 264
15497: PUSH
15498: LD_INT 2
15500: PUSH
15501: LD_INT 42
15503: PUSH
15504: LD_INT 24
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: IN
15512: IFFALSE 15533
// points := [ 25 , 5 , 3 ] ;
15514: LD_ADDR_VAR 0 9
15518: PUSH
15519: LD_INT 25
15521: PUSH
15522: LD_INT 5
15524: PUSH
15525: LD_INT 3
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15533: LD_VAR 0 6
15537: PPUSH
15538: CALL_OW 264
15542: PUSH
15543: LD_INT 4
15545: PUSH
15546: LD_INT 43
15548: PUSH
15549: LD_INT 25
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: IN
15557: IFFALSE 15578
// points := [ 40 , 15 , 5 ] ;
15559: LD_ADDR_VAR 0 9
15563: PUSH
15564: LD_INT 40
15566: PUSH
15567: LD_INT 15
15569: PUSH
15570: LD_INT 5
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15578: LD_VAR 0 6
15582: PPUSH
15583: CALL_OW 264
15587: PUSH
15588: LD_INT 3
15590: PUSH
15591: LD_INT 23
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: IN
15598: IFFALSE 15619
// points := [ 7 , 25 , 8 ] ;
15600: LD_ADDR_VAR 0 9
15604: PUSH
15605: LD_INT 7
15607: PUSH
15608: LD_INT 25
15610: PUSH
15611: LD_INT 8
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: LIST
15618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15619: LD_VAR 0 6
15623: PPUSH
15624: CALL_OW 264
15628: PUSH
15629: LD_INT 5
15631: PUSH
15632: LD_INT 27
15634: PUSH
15635: LD_INT 44
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: LIST
15642: IN
15643: IFFALSE 15664
// points := [ 14 , 50 , 16 ] ;
15645: LD_ADDR_VAR 0 9
15649: PUSH
15650: LD_INT 14
15652: PUSH
15653: LD_INT 50
15655: PUSH
15656: LD_INT 16
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: LIST
15663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15664: LD_VAR 0 6
15668: PPUSH
15669: CALL_OW 264
15673: PUSH
15674: LD_INT 6
15676: PUSH
15677: LD_INT 46
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: IN
15684: IFFALSE 15705
// points := [ 32 , 120 , 70 ] ;
15686: LD_ADDR_VAR 0 9
15690: PUSH
15691: LD_INT 32
15693: PUSH
15694: LD_INT 120
15696: PUSH
15697: LD_INT 70
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: LIST
15704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
15705: LD_VAR 0 6
15709: PPUSH
15710: CALL_OW 264
15714: PUSH
15715: LD_INT 7
15717: PUSH
15718: LD_INT 28
15720: PUSH
15721: LD_INT 45
15723: PUSH
15724: LD_INT 92
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: IN
15733: IFFALSE 15754
// points := [ 35 , 20 , 45 ] ;
15735: LD_ADDR_VAR 0 9
15739: PUSH
15740: LD_INT 35
15742: PUSH
15743: LD_INT 20
15745: PUSH
15746: LD_INT 45
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15754: LD_VAR 0 6
15758: PPUSH
15759: CALL_OW 264
15763: PUSH
15764: LD_INT 47
15766: PUSH
15767: EMPTY
15768: LIST
15769: IN
15770: IFFALSE 15791
// points := [ 67 , 45 , 75 ] ;
15772: LD_ADDR_VAR 0 9
15776: PUSH
15777: LD_INT 67
15779: PUSH
15780: LD_INT 45
15782: PUSH
15783: LD_INT 75
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: LIST
15790: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15791: LD_VAR 0 6
15795: PPUSH
15796: CALL_OW 264
15800: PUSH
15801: LD_INT 26
15803: PUSH
15804: EMPTY
15805: LIST
15806: IN
15807: IFFALSE 15828
// points := [ 120 , 30 , 80 ] ;
15809: LD_ADDR_VAR 0 9
15813: PUSH
15814: LD_INT 120
15816: PUSH
15817: LD_INT 30
15819: PUSH
15820: LD_INT 80
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: LIST
15827: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15828: LD_VAR 0 6
15832: PPUSH
15833: CALL_OW 264
15837: PUSH
15838: LD_INT 22
15840: PUSH
15841: EMPTY
15842: LIST
15843: IN
15844: IFFALSE 15865
// points := [ 40 , 1 , 1 ] ;
15846: LD_ADDR_VAR 0 9
15850: PUSH
15851: LD_INT 40
15853: PUSH
15854: LD_INT 1
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: LIST
15864: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15865: LD_VAR 0 6
15869: PPUSH
15870: CALL_OW 264
15874: PUSH
15875: LD_INT 29
15877: PUSH
15878: EMPTY
15879: LIST
15880: IN
15881: IFFALSE 15902
// points := [ 70 , 200 , 400 ] ;
15883: LD_ADDR_VAR 0 9
15887: PUSH
15888: LD_INT 70
15890: PUSH
15891: LD_INT 200
15893: PUSH
15894: LD_INT 400
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: LIST
15901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15902: LD_VAR 0 6
15906: PPUSH
15907: CALL_OW 264
15911: PUSH
15912: LD_INT 14
15914: PUSH
15915: LD_INT 53
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: IN
15922: IFFALSE 15943
// points := [ 40 , 10 , 20 ] ;
15924: LD_ADDR_VAR 0 9
15928: PUSH
15929: LD_INT 40
15931: PUSH
15932: LD_INT 10
15934: PUSH
15935: LD_INT 20
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: LIST
15942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15943: LD_VAR 0 6
15947: PPUSH
15948: CALL_OW 264
15952: PUSH
15953: LD_INT 9
15955: PUSH
15956: EMPTY
15957: LIST
15958: IN
15959: IFFALSE 15980
// points := [ 5 , 70 , 20 ] ;
15961: LD_ADDR_VAR 0 9
15965: PUSH
15966: LD_INT 5
15968: PUSH
15969: LD_INT 70
15971: PUSH
15972: LD_INT 20
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: LIST
15979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15980: LD_VAR 0 6
15984: PPUSH
15985: CALL_OW 264
15989: PUSH
15990: LD_INT 10
15992: PUSH
15993: EMPTY
15994: LIST
15995: IN
15996: IFFALSE 16017
// points := [ 35 , 110 , 70 ] ;
15998: LD_ADDR_VAR 0 9
16002: PUSH
16003: LD_INT 35
16005: PUSH
16006: LD_INT 110
16008: PUSH
16009: LD_INT 70
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: LIST
16016: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16017: LD_VAR 0 6
16021: PPUSH
16022: CALL_OW 265
16026: PUSH
16027: LD_INT 25
16029: EQUAL
16030: IFFALSE 16051
// points := [ 80 , 65 , 100 ] ;
16032: LD_ADDR_VAR 0 9
16036: PUSH
16037: LD_INT 80
16039: PUSH
16040: LD_INT 65
16042: PUSH
16043: LD_INT 100
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16051: LD_VAR 0 6
16055: PPUSH
16056: CALL_OW 263
16060: PUSH
16061: LD_INT 1
16063: EQUAL
16064: IFFALSE 16099
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16066: LD_ADDR_VAR 0 10
16070: PUSH
16071: LD_VAR 0 10
16075: PUSH
16076: LD_VAR 0 6
16080: PPUSH
16081: CALL_OW 311
16085: PPUSH
16086: LD_INT 3
16088: PPUSH
16089: CALL_OW 259
16093: PUSH
16094: LD_INT 4
16096: MUL
16097: MUL
16098: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16099: LD_VAR 0 6
16103: PPUSH
16104: CALL_OW 263
16108: PUSH
16109: LD_INT 2
16111: EQUAL
16112: IFFALSE 16163
// begin j := IsControledBy ( i ) ;
16114: LD_ADDR_VAR 0 7
16118: PUSH
16119: LD_VAR 0 6
16123: PPUSH
16124: CALL_OW 312
16128: ST_TO_ADDR
// if j then
16129: LD_VAR 0 7
16133: IFFALSE 16163
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16135: LD_ADDR_VAR 0 10
16139: PUSH
16140: LD_VAR 0 10
16144: PUSH
16145: LD_VAR 0 7
16149: PPUSH
16150: LD_INT 3
16152: PPUSH
16153: CALL_OW 259
16157: PUSH
16158: LD_INT 3
16160: MUL
16161: MUL
16162: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16163: LD_VAR 0 6
16167: PPUSH
16168: CALL_OW 264
16172: PUSH
16173: LD_INT 5
16175: PUSH
16176: LD_INT 6
16178: PUSH
16179: LD_INT 46
16181: PUSH
16182: LD_INT 44
16184: PUSH
16185: LD_INT 47
16187: PUSH
16188: LD_INT 45
16190: PUSH
16191: LD_INT 28
16193: PUSH
16194: LD_INT 7
16196: PUSH
16197: LD_INT 27
16199: PUSH
16200: LD_INT 29
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: IN
16215: PUSH
16216: LD_VAR 0 1
16220: PPUSH
16221: LD_INT 52
16223: PPUSH
16224: CALL_OW 321
16228: PUSH
16229: LD_INT 2
16231: EQUAL
16232: AND
16233: IFFALSE 16250
// bpoints := bpoints * 1.2 ;
16235: LD_ADDR_VAR 0 10
16239: PUSH
16240: LD_VAR 0 10
16244: PUSH
16245: LD_REAL  1.20000000000000E+0000
16248: MUL
16249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16250: LD_VAR 0 6
16254: PPUSH
16255: CALL_OW 264
16259: PUSH
16260: LD_INT 6
16262: PUSH
16263: LD_INT 46
16265: PUSH
16266: LD_INT 47
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: LIST
16273: IN
16274: IFFALSE 16291
// bpoints := bpoints * 1.2 ;
16276: LD_ADDR_VAR 0 10
16280: PUSH
16281: LD_VAR 0 10
16285: PUSH
16286: LD_REAL  1.20000000000000E+0000
16289: MUL
16290: ST_TO_ADDR
// end ; unit_building :
16291: GO 16305
16293: LD_INT 3
16295: DOUBLE
16296: EQUAL
16297: IFTRUE 16301
16299: GO 16304
16301: POP
// ; end ;
16302: GO 16305
16304: POP
// for j = 1 to 3 do
16305: LD_ADDR_VAR 0 7
16309: PUSH
16310: DOUBLE
16311: LD_INT 1
16313: DEC
16314: ST_TO_ADDR
16315: LD_INT 3
16317: PUSH
16318: FOR_TO
16319: IFFALSE 16372
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16321: LD_ADDR_VAR 0 5
16325: PUSH
16326: LD_VAR 0 5
16330: PPUSH
16331: LD_VAR 0 7
16335: PPUSH
16336: LD_VAR 0 5
16340: PUSH
16341: LD_VAR 0 7
16345: ARRAY
16346: PUSH
16347: LD_VAR 0 9
16351: PUSH
16352: LD_VAR 0 7
16356: ARRAY
16357: PUSH
16358: LD_VAR 0 10
16362: MUL
16363: PLUS
16364: PPUSH
16365: CALL_OW 1
16369: ST_TO_ADDR
16370: GO 16318
16372: POP
16373: POP
// end ;
16374: GO 14853
16376: POP
16377: POP
// result := Replace ( result , 4 , tmp ) ;
16378: LD_ADDR_VAR 0 5
16382: PUSH
16383: LD_VAR 0 5
16387: PPUSH
16388: LD_INT 4
16390: PPUSH
16391: LD_VAR 0 8
16395: PPUSH
16396: CALL_OW 1
16400: ST_TO_ADDR
// end ;
16401: LD_VAR 0 5
16405: RET
// export function DangerAtRange ( unit , range ) ; begin
16406: LD_INT 0
16408: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16409: LD_ADDR_VAR 0 3
16413: PUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 255
16423: PPUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 250
16433: PPUSH
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 251
16443: PPUSH
16444: LD_VAR 0 2
16448: PPUSH
16449: CALL 14705 0 4
16453: ST_TO_ADDR
// end ;
16454: LD_VAR 0 3
16458: RET
// export function DangerInArea ( side , area ) ; begin
16459: LD_INT 0
16461: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16462: LD_ADDR_VAR 0 3
16466: PUSH
16467: LD_VAR 0 2
16471: PPUSH
16472: LD_INT 81
16474: PUSH
16475: LD_VAR 0 1
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PPUSH
16484: CALL_OW 70
16488: ST_TO_ADDR
// end ;
16489: LD_VAR 0 3
16493: RET
// export function IsExtension ( b ) ; begin
16494: LD_INT 0
16496: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16497: LD_ADDR_VAR 0 2
16501: PUSH
16502: LD_VAR 0 1
16506: PUSH
16507: LD_INT 23
16509: PUSH
16510: LD_INT 20
16512: PUSH
16513: LD_INT 22
16515: PUSH
16516: LD_INT 17
16518: PUSH
16519: LD_INT 24
16521: PUSH
16522: LD_INT 21
16524: PUSH
16525: LD_INT 19
16527: PUSH
16528: LD_INT 16
16530: PUSH
16531: LD_INT 25
16533: PUSH
16534: LD_INT 18
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: IN
16549: ST_TO_ADDR
// end ;
16550: LD_VAR 0 2
16554: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16555: LD_INT 0
16557: PPUSH
16558: PPUSH
16559: PPUSH
// result := [ ] ;
16560: LD_ADDR_VAR 0 4
16564: PUSH
16565: EMPTY
16566: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16567: LD_ADDR_VAR 0 5
16571: PUSH
16572: LD_VAR 0 2
16576: PPUSH
16577: LD_INT 21
16579: PUSH
16580: LD_INT 3
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PPUSH
16587: CALL_OW 70
16591: ST_TO_ADDR
// if not tmp then
16592: LD_VAR 0 5
16596: NOT
16597: IFFALSE 16601
// exit ;
16599: GO 16665
// if checkLink then
16601: LD_VAR 0 3
16605: IFFALSE 16655
// begin for i in tmp do
16607: LD_ADDR_VAR 0 6
16611: PUSH
16612: LD_VAR 0 5
16616: PUSH
16617: FOR_IN
16618: IFFALSE 16653
// if GetBase ( i ) <> base then
16620: LD_VAR 0 6
16624: PPUSH
16625: CALL_OW 274
16629: PUSH
16630: LD_VAR 0 1
16634: NONEQUAL
16635: IFFALSE 16651
// ComLinkToBase ( base , i ) ;
16637: LD_VAR 0 1
16641: PPUSH
16642: LD_VAR 0 6
16646: PPUSH
16647: CALL_OW 169
16651: GO 16617
16653: POP
16654: POP
// end ; result := tmp ;
16655: LD_ADDR_VAR 0 4
16659: PUSH
16660: LD_VAR 0 5
16664: ST_TO_ADDR
// end ;
16665: LD_VAR 0 4
16669: RET
// export function ComComplete ( units , b ) ; var i ; begin
16670: LD_INT 0
16672: PPUSH
16673: PPUSH
// if not units then
16674: LD_VAR 0 1
16678: NOT
16679: IFFALSE 16683
// exit ;
16681: GO 16773
// for i in units do
16683: LD_ADDR_VAR 0 4
16687: PUSH
16688: LD_VAR 0 1
16692: PUSH
16693: FOR_IN
16694: IFFALSE 16771
// if BuildingStatus ( b ) = bs_build then
16696: LD_VAR 0 2
16700: PPUSH
16701: CALL_OW 461
16705: PUSH
16706: LD_INT 1
16708: EQUAL
16709: IFFALSE 16769
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16711: LD_VAR 0 4
16715: PPUSH
16716: LD_STRING h
16718: PUSH
16719: LD_VAR 0 2
16723: PPUSH
16724: CALL_OW 250
16728: PUSH
16729: LD_VAR 0 2
16733: PPUSH
16734: CALL_OW 251
16738: PUSH
16739: LD_VAR 0 2
16743: PUSH
16744: LD_INT 0
16746: PUSH
16747: LD_INT 0
16749: PUSH
16750: LD_INT 0
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: PUSH
16762: EMPTY
16763: LIST
16764: PPUSH
16765: CALL_OW 446
16769: GO 16693
16771: POP
16772: POP
// end ;
16773: LD_VAR 0 3
16777: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16778: LD_INT 0
16780: PPUSH
16781: PPUSH
16782: PPUSH
16783: PPUSH
16784: PPUSH
16785: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16786: LD_VAR 0 1
16790: NOT
16791: PUSH
16792: LD_VAR 0 1
16796: PPUSH
16797: CALL_OW 263
16801: PUSH
16802: LD_INT 2
16804: NONEQUAL
16805: OR
16806: IFFALSE 16810
// exit ;
16808: GO 17126
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16810: LD_ADDR_VAR 0 6
16814: PUSH
16815: LD_INT 22
16817: PUSH
16818: LD_VAR 0 1
16822: PPUSH
16823: CALL_OW 255
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 2
16834: PUSH
16835: LD_INT 30
16837: PUSH
16838: LD_INT 36
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 34
16847: PUSH
16848: LD_INT 31
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: LIST
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: ST_TO_ADDR
// if not tmp then
16869: LD_VAR 0 6
16873: NOT
16874: IFFALSE 16878
// exit ;
16876: GO 17126
// result := [ ] ;
16878: LD_ADDR_VAR 0 2
16882: PUSH
16883: EMPTY
16884: ST_TO_ADDR
// for i in tmp do
16885: LD_ADDR_VAR 0 3
16889: PUSH
16890: LD_VAR 0 6
16894: PUSH
16895: FOR_IN
16896: IFFALSE 16967
// begin t := UnitsInside ( i ) ;
16898: LD_ADDR_VAR 0 4
16902: PUSH
16903: LD_VAR 0 3
16907: PPUSH
16908: CALL_OW 313
16912: ST_TO_ADDR
// if t then
16913: LD_VAR 0 4
16917: IFFALSE 16965
// for j in t do
16919: LD_ADDR_VAR 0 7
16923: PUSH
16924: LD_VAR 0 4
16928: PUSH
16929: FOR_IN
16930: IFFALSE 16963
// result := Replace ( result , result + 1 , j ) ;
16932: LD_ADDR_VAR 0 2
16936: PUSH
16937: LD_VAR 0 2
16941: PPUSH
16942: LD_VAR 0 2
16946: PUSH
16947: LD_INT 1
16949: PLUS
16950: PPUSH
16951: LD_VAR 0 7
16955: PPUSH
16956: CALL_OW 1
16960: ST_TO_ADDR
16961: GO 16929
16963: POP
16964: POP
// end ;
16965: GO 16895
16967: POP
16968: POP
// if not result then
16969: LD_VAR 0 2
16973: NOT
16974: IFFALSE 16978
// exit ;
16976: GO 17126
// mech := result [ 1 ] ;
16978: LD_ADDR_VAR 0 5
16982: PUSH
16983: LD_VAR 0 2
16987: PUSH
16988: LD_INT 1
16990: ARRAY
16991: ST_TO_ADDR
// if result > 1 then
16992: LD_VAR 0 2
16996: PUSH
16997: LD_INT 1
16999: GREATER
17000: IFFALSE 17112
// begin for i = 2 to result do
17002: LD_ADDR_VAR 0 3
17006: PUSH
17007: DOUBLE
17008: LD_INT 2
17010: DEC
17011: ST_TO_ADDR
17012: LD_VAR 0 2
17016: PUSH
17017: FOR_TO
17018: IFFALSE 17110
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17020: LD_ADDR_VAR 0 4
17024: PUSH
17025: LD_VAR 0 2
17029: PUSH
17030: LD_VAR 0 3
17034: ARRAY
17035: PPUSH
17036: LD_INT 3
17038: PPUSH
17039: CALL_OW 259
17043: PUSH
17044: LD_VAR 0 2
17048: PUSH
17049: LD_VAR 0 3
17053: ARRAY
17054: PPUSH
17055: CALL_OW 432
17059: MINUS
17060: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17061: LD_VAR 0 4
17065: PUSH
17066: LD_VAR 0 5
17070: PPUSH
17071: LD_INT 3
17073: PPUSH
17074: CALL_OW 259
17078: PUSH
17079: LD_VAR 0 5
17083: PPUSH
17084: CALL_OW 432
17088: MINUS
17089: GREATEREQUAL
17090: IFFALSE 17108
// mech := result [ i ] ;
17092: LD_ADDR_VAR 0 5
17096: PUSH
17097: LD_VAR 0 2
17101: PUSH
17102: LD_VAR 0 3
17106: ARRAY
17107: ST_TO_ADDR
// end ;
17108: GO 17017
17110: POP
17111: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17112: LD_VAR 0 1
17116: PPUSH
17117: LD_VAR 0 5
17121: PPUSH
17122: CALL_OW 135
// end ;
17126: LD_VAR 0 2
17130: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17131: LD_INT 0
17133: PPUSH
17134: PPUSH
17135: PPUSH
17136: PPUSH
17137: PPUSH
17138: PPUSH
17139: PPUSH
17140: PPUSH
17141: PPUSH
17142: PPUSH
17143: PPUSH
17144: PPUSH
17145: PPUSH
// result := [ ] ;
17146: LD_ADDR_VAR 0 7
17150: PUSH
17151: EMPTY
17152: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17153: LD_VAR 0 1
17157: PPUSH
17158: CALL_OW 266
17162: PUSH
17163: LD_INT 0
17165: PUSH
17166: LD_INT 1
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: IN
17173: NOT
17174: IFFALSE 17178
// exit ;
17176: GO 18812
// if name then
17178: LD_VAR 0 3
17182: IFFALSE 17198
// SetBName ( base_dep , name ) ;
17184: LD_VAR 0 1
17188: PPUSH
17189: LD_VAR 0 3
17193: PPUSH
17194: CALL_OW 500
// base := GetBase ( base_dep ) ;
17198: LD_ADDR_VAR 0 15
17202: PUSH
17203: LD_VAR 0 1
17207: PPUSH
17208: CALL_OW 274
17212: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17213: LD_ADDR_VAR 0 16
17217: PUSH
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL_OW 255
17227: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17228: LD_ADDR_VAR 0 17
17232: PUSH
17233: LD_VAR 0 1
17237: PPUSH
17238: CALL_OW 248
17242: ST_TO_ADDR
// if sources then
17243: LD_VAR 0 5
17247: IFFALSE 17294
// for i = 1 to 3 do
17249: LD_ADDR_VAR 0 8
17253: PUSH
17254: DOUBLE
17255: LD_INT 1
17257: DEC
17258: ST_TO_ADDR
17259: LD_INT 3
17261: PUSH
17262: FOR_TO
17263: IFFALSE 17292
// AddResourceType ( base , i , sources [ i ] ) ;
17265: LD_VAR 0 15
17269: PPUSH
17270: LD_VAR 0 8
17274: PPUSH
17275: LD_VAR 0 5
17279: PUSH
17280: LD_VAR 0 8
17284: ARRAY
17285: PPUSH
17286: CALL_OW 276
17290: GO 17262
17292: POP
17293: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17294: LD_ADDR_VAR 0 18
17298: PUSH
17299: LD_VAR 0 15
17303: PPUSH
17304: LD_VAR 0 2
17308: PPUSH
17309: LD_INT 1
17311: PPUSH
17312: CALL 16555 0 3
17316: ST_TO_ADDR
// InitHc ;
17317: CALL_OW 19
// InitUc ;
17321: CALL_OW 18
// uc_side := side ;
17325: LD_ADDR_OWVAR 20
17329: PUSH
17330: LD_VAR 0 16
17334: ST_TO_ADDR
// uc_nation := nation ;
17335: LD_ADDR_OWVAR 21
17339: PUSH
17340: LD_VAR 0 17
17344: ST_TO_ADDR
// if buildings then
17345: LD_VAR 0 18
17349: IFFALSE 18671
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17351: LD_ADDR_VAR 0 19
17355: PUSH
17356: LD_VAR 0 18
17360: PPUSH
17361: LD_INT 2
17363: PUSH
17364: LD_INT 30
17366: PUSH
17367: LD_INT 29
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 30
17376: PUSH
17377: LD_INT 30
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: LIST
17388: PPUSH
17389: CALL_OW 72
17393: ST_TO_ADDR
// if tmp then
17394: LD_VAR 0 19
17398: IFFALSE 17446
// for i in tmp do
17400: LD_ADDR_VAR 0 8
17404: PUSH
17405: LD_VAR 0 19
17409: PUSH
17410: FOR_IN
17411: IFFALSE 17444
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17413: LD_VAR 0 8
17417: PPUSH
17418: CALL_OW 250
17422: PPUSH
17423: LD_VAR 0 8
17427: PPUSH
17428: CALL_OW 251
17432: PPUSH
17433: LD_VAR 0 16
17437: PPUSH
17438: CALL_OW 441
17442: GO 17410
17444: POP
17445: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17446: LD_VAR 0 18
17450: PPUSH
17451: LD_INT 2
17453: PUSH
17454: LD_INT 30
17456: PUSH
17457: LD_INT 32
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 30
17466: PUSH
17467: LD_INT 33
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PPUSH
17479: CALL_OW 72
17483: IFFALSE 17571
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17485: LD_ADDR_VAR 0 8
17489: PUSH
17490: LD_VAR 0 18
17494: PPUSH
17495: LD_INT 2
17497: PUSH
17498: LD_INT 30
17500: PUSH
17501: LD_INT 32
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 30
17510: PUSH
17511: LD_INT 33
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: PPUSH
17523: CALL_OW 72
17527: PUSH
17528: FOR_IN
17529: IFFALSE 17569
// begin if not GetBWeapon ( i ) then
17531: LD_VAR 0 8
17535: PPUSH
17536: CALL_OW 269
17540: NOT
17541: IFFALSE 17567
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17543: LD_VAR 0 8
17547: PPUSH
17548: LD_VAR 0 8
17552: PPUSH
17553: LD_VAR 0 2
17557: PPUSH
17558: CALL 18817 0 2
17562: PPUSH
17563: CALL_OW 431
// end ;
17567: GO 17528
17569: POP
17570: POP
// end ; for i = 1 to personel do
17571: LD_ADDR_VAR 0 8
17575: PUSH
17576: DOUBLE
17577: LD_INT 1
17579: DEC
17580: ST_TO_ADDR
17581: LD_VAR 0 6
17585: PUSH
17586: FOR_TO
17587: IFFALSE 18651
// begin if i > 4 then
17589: LD_VAR 0 8
17593: PUSH
17594: LD_INT 4
17596: GREATER
17597: IFFALSE 17601
// break ;
17599: GO 18651
// case i of 1 :
17601: LD_VAR 0 8
17605: PUSH
17606: LD_INT 1
17608: DOUBLE
17609: EQUAL
17610: IFTRUE 17614
17612: GO 17694
17614: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17615: LD_ADDR_VAR 0 12
17619: PUSH
17620: LD_VAR 0 18
17624: PPUSH
17625: LD_INT 22
17627: PUSH
17628: LD_VAR 0 16
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 58
17639: PUSH
17640: EMPTY
17641: LIST
17642: PUSH
17643: LD_INT 2
17645: PUSH
17646: LD_INT 30
17648: PUSH
17649: LD_INT 32
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 30
17658: PUSH
17659: LD_INT 4
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 30
17668: PUSH
17669: LD_INT 5
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: LIST
17686: PPUSH
17687: CALL_OW 72
17691: ST_TO_ADDR
17692: GO 17916
17694: LD_INT 2
17696: DOUBLE
17697: EQUAL
17698: IFTRUE 17702
17700: GO 17764
17702: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17703: LD_ADDR_VAR 0 12
17707: PUSH
17708: LD_VAR 0 18
17712: PPUSH
17713: LD_INT 22
17715: PUSH
17716: LD_VAR 0 16
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 2
17727: PUSH
17728: LD_INT 30
17730: PUSH
17731: LD_INT 0
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 30
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: LIST
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PPUSH
17757: CALL_OW 72
17761: ST_TO_ADDR
17762: GO 17916
17764: LD_INT 3
17766: DOUBLE
17767: EQUAL
17768: IFTRUE 17772
17770: GO 17834
17772: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17773: LD_ADDR_VAR 0 12
17777: PUSH
17778: LD_VAR 0 18
17782: PPUSH
17783: LD_INT 22
17785: PUSH
17786: LD_VAR 0 16
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 2
17797: PUSH
17798: LD_INT 30
17800: PUSH
17801: LD_INT 2
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 30
17810: PUSH
17811: LD_INT 3
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PPUSH
17827: CALL_OW 72
17831: ST_TO_ADDR
17832: GO 17916
17834: LD_INT 4
17836: DOUBLE
17837: EQUAL
17838: IFTRUE 17842
17840: GO 17915
17842: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17843: LD_ADDR_VAR 0 12
17847: PUSH
17848: LD_VAR 0 18
17852: PPUSH
17853: LD_INT 22
17855: PUSH
17856: LD_VAR 0 16
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 30
17870: PUSH
17871: LD_INT 6
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 30
17880: PUSH
17881: LD_INT 7
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 30
17890: PUSH
17891: LD_INT 8
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 72
17912: ST_TO_ADDR
17913: GO 17916
17915: POP
// if i = 1 then
17916: LD_VAR 0 8
17920: PUSH
17921: LD_INT 1
17923: EQUAL
17924: IFFALSE 18035
// begin tmp := [ ] ;
17926: LD_ADDR_VAR 0 19
17930: PUSH
17931: EMPTY
17932: ST_TO_ADDR
// for j in f do
17933: LD_ADDR_VAR 0 9
17937: PUSH
17938: LD_VAR 0 12
17942: PUSH
17943: FOR_IN
17944: IFFALSE 18017
// if GetBType ( j ) = b_bunker then
17946: LD_VAR 0 9
17950: PPUSH
17951: CALL_OW 266
17955: PUSH
17956: LD_INT 32
17958: EQUAL
17959: IFFALSE 17986
// tmp := Insert ( tmp , 1 , j ) else
17961: LD_ADDR_VAR 0 19
17965: PUSH
17966: LD_VAR 0 19
17970: PPUSH
17971: LD_INT 1
17973: PPUSH
17974: LD_VAR 0 9
17978: PPUSH
17979: CALL_OW 2
17983: ST_TO_ADDR
17984: GO 18015
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17986: LD_ADDR_VAR 0 19
17990: PUSH
17991: LD_VAR 0 19
17995: PPUSH
17996: LD_VAR 0 19
18000: PUSH
18001: LD_INT 1
18003: PLUS
18004: PPUSH
18005: LD_VAR 0 9
18009: PPUSH
18010: CALL_OW 2
18014: ST_TO_ADDR
18015: GO 17943
18017: POP
18018: POP
// if tmp then
18019: LD_VAR 0 19
18023: IFFALSE 18035
// f := tmp ;
18025: LD_ADDR_VAR 0 12
18029: PUSH
18030: LD_VAR 0 19
18034: ST_TO_ADDR
// end ; x := personel [ i ] ;
18035: LD_ADDR_VAR 0 13
18039: PUSH
18040: LD_VAR 0 6
18044: PUSH
18045: LD_VAR 0 8
18049: ARRAY
18050: ST_TO_ADDR
// if x = - 1 then
18051: LD_VAR 0 13
18055: PUSH
18056: LD_INT 1
18058: NEG
18059: EQUAL
18060: IFFALSE 18269
// begin for j in f do
18062: LD_ADDR_VAR 0 9
18066: PUSH
18067: LD_VAR 0 12
18071: PUSH
18072: FOR_IN
18073: IFFALSE 18265
// repeat InitHc ;
18075: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18079: LD_VAR 0 9
18083: PPUSH
18084: CALL_OW 266
18088: PUSH
18089: LD_INT 5
18091: EQUAL
18092: IFFALSE 18162
// begin if UnitsInside ( j ) < 3 then
18094: LD_VAR 0 9
18098: PPUSH
18099: CALL_OW 313
18103: PUSH
18104: LD_INT 3
18106: LESS
18107: IFFALSE 18143
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18109: LD_INT 0
18111: PPUSH
18112: LD_INT 5
18114: PUSH
18115: LD_INT 8
18117: PUSH
18118: LD_INT 9
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: PUSH
18126: LD_VAR 0 17
18130: ARRAY
18131: PPUSH
18132: LD_VAR 0 4
18136: PPUSH
18137: CALL_OW 380
18141: GO 18160
// PrepareHuman ( false , i , skill ) ;
18143: LD_INT 0
18145: PPUSH
18146: LD_VAR 0 8
18150: PPUSH
18151: LD_VAR 0 4
18155: PPUSH
18156: CALL_OW 380
// end else
18160: GO 18179
// PrepareHuman ( false , i , skill ) ;
18162: LD_INT 0
18164: PPUSH
18165: LD_VAR 0 8
18169: PPUSH
18170: LD_VAR 0 4
18174: PPUSH
18175: CALL_OW 380
// un := CreateHuman ;
18179: LD_ADDR_VAR 0 14
18183: PUSH
18184: CALL_OW 44
18188: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18189: LD_ADDR_VAR 0 7
18193: PUSH
18194: LD_VAR 0 7
18198: PPUSH
18199: LD_INT 1
18201: PPUSH
18202: LD_VAR 0 14
18206: PPUSH
18207: CALL_OW 2
18211: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18212: LD_VAR 0 14
18216: PPUSH
18217: LD_VAR 0 9
18221: PPUSH
18222: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18226: LD_VAR 0 9
18230: PPUSH
18231: CALL_OW 313
18235: PUSH
18236: LD_INT 6
18238: EQUAL
18239: PUSH
18240: LD_VAR 0 9
18244: PPUSH
18245: CALL_OW 266
18249: PUSH
18250: LD_INT 32
18252: PUSH
18253: LD_INT 31
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: IN
18260: OR
18261: IFFALSE 18075
18263: GO 18072
18265: POP
18266: POP
// end else
18267: GO 18649
// for j = 1 to x do
18269: LD_ADDR_VAR 0 9
18273: PUSH
18274: DOUBLE
18275: LD_INT 1
18277: DEC
18278: ST_TO_ADDR
18279: LD_VAR 0 13
18283: PUSH
18284: FOR_TO
18285: IFFALSE 18647
// begin InitHc ;
18287: CALL_OW 19
// if not f then
18291: LD_VAR 0 12
18295: NOT
18296: IFFALSE 18385
// begin PrepareHuman ( false , i , skill ) ;
18298: LD_INT 0
18300: PPUSH
18301: LD_VAR 0 8
18305: PPUSH
18306: LD_VAR 0 4
18310: PPUSH
18311: CALL_OW 380
// un := CreateHuman ;
18315: LD_ADDR_VAR 0 14
18319: PUSH
18320: CALL_OW 44
18324: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18325: LD_ADDR_VAR 0 7
18329: PUSH
18330: LD_VAR 0 7
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: LD_VAR 0 14
18342: PPUSH
18343: CALL_OW 2
18347: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18348: LD_VAR 0 14
18352: PPUSH
18353: LD_VAR 0 1
18357: PPUSH
18358: CALL_OW 250
18362: PPUSH
18363: LD_VAR 0 1
18367: PPUSH
18368: CALL_OW 251
18372: PPUSH
18373: LD_INT 10
18375: PPUSH
18376: LD_INT 0
18378: PPUSH
18379: CALL_OW 50
// continue ;
18383: GO 18284
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18385: LD_VAR 0 12
18389: PUSH
18390: LD_INT 1
18392: ARRAY
18393: PPUSH
18394: CALL_OW 313
18398: PUSH
18399: LD_VAR 0 12
18403: PUSH
18404: LD_INT 1
18406: ARRAY
18407: PPUSH
18408: CALL_OW 266
18412: PUSH
18413: LD_INT 32
18415: PUSH
18416: LD_INT 31
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: IN
18423: AND
18424: PUSH
18425: LD_VAR 0 12
18429: PUSH
18430: LD_INT 1
18432: ARRAY
18433: PPUSH
18434: CALL_OW 313
18438: PUSH
18439: LD_INT 6
18441: EQUAL
18442: OR
18443: IFFALSE 18463
// f := Delete ( f , 1 ) ;
18445: LD_ADDR_VAR 0 12
18449: PUSH
18450: LD_VAR 0 12
18454: PPUSH
18455: LD_INT 1
18457: PPUSH
18458: CALL_OW 3
18462: ST_TO_ADDR
// if not f then
18463: LD_VAR 0 12
18467: NOT
18468: IFFALSE 18486
// begin x := x + 2 ;
18470: LD_ADDR_VAR 0 13
18474: PUSH
18475: LD_VAR 0 13
18479: PUSH
18480: LD_INT 2
18482: PLUS
18483: ST_TO_ADDR
// continue ;
18484: GO 18284
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18486: LD_VAR 0 12
18490: PUSH
18491: LD_INT 1
18493: ARRAY
18494: PPUSH
18495: CALL_OW 266
18499: PUSH
18500: LD_INT 5
18502: EQUAL
18503: IFFALSE 18577
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18505: LD_VAR 0 12
18509: PUSH
18510: LD_INT 1
18512: ARRAY
18513: PPUSH
18514: CALL_OW 313
18518: PUSH
18519: LD_INT 3
18521: LESS
18522: IFFALSE 18558
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18524: LD_INT 0
18526: PPUSH
18527: LD_INT 5
18529: PUSH
18530: LD_INT 8
18532: PUSH
18533: LD_INT 9
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: LIST
18540: PUSH
18541: LD_VAR 0 17
18545: ARRAY
18546: PPUSH
18547: LD_VAR 0 4
18551: PPUSH
18552: CALL_OW 380
18556: GO 18575
// PrepareHuman ( false , i , skill ) ;
18558: LD_INT 0
18560: PPUSH
18561: LD_VAR 0 8
18565: PPUSH
18566: LD_VAR 0 4
18570: PPUSH
18571: CALL_OW 380
// end else
18575: GO 18594
// PrepareHuman ( false , i , skill ) ;
18577: LD_INT 0
18579: PPUSH
18580: LD_VAR 0 8
18584: PPUSH
18585: LD_VAR 0 4
18589: PPUSH
18590: CALL_OW 380
// un := CreateHuman ;
18594: LD_ADDR_VAR 0 14
18598: PUSH
18599: CALL_OW 44
18603: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18604: LD_ADDR_VAR 0 7
18608: PUSH
18609: LD_VAR 0 7
18613: PPUSH
18614: LD_INT 1
18616: PPUSH
18617: LD_VAR 0 14
18621: PPUSH
18622: CALL_OW 2
18626: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18627: LD_VAR 0 14
18631: PPUSH
18632: LD_VAR 0 12
18636: PUSH
18637: LD_INT 1
18639: ARRAY
18640: PPUSH
18641: CALL_OW 52
// end ;
18645: GO 18284
18647: POP
18648: POP
// end ;
18649: GO 17586
18651: POP
18652: POP
// result := result ^ buildings ;
18653: LD_ADDR_VAR 0 7
18657: PUSH
18658: LD_VAR 0 7
18662: PUSH
18663: LD_VAR 0 18
18667: ADD
18668: ST_TO_ADDR
// end else
18669: GO 18812
// begin for i = 1 to personel do
18671: LD_ADDR_VAR 0 8
18675: PUSH
18676: DOUBLE
18677: LD_INT 1
18679: DEC
18680: ST_TO_ADDR
18681: LD_VAR 0 6
18685: PUSH
18686: FOR_TO
18687: IFFALSE 18810
// begin if i > 4 then
18689: LD_VAR 0 8
18693: PUSH
18694: LD_INT 4
18696: GREATER
18697: IFFALSE 18701
// break ;
18699: GO 18810
// x := personel [ i ] ;
18701: LD_ADDR_VAR 0 13
18705: PUSH
18706: LD_VAR 0 6
18710: PUSH
18711: LD_VAR 0 8
18715: ARRAY
18716: ST_TO_ADDR
// if x = - 1 then
18717: LD_VAR 0 13
18721: PUSH
18722: LD_INT 1
18724: NEG
18725: EQUAL
18726: IFFALSE 18730
// continue ;
18728: GO 18686
// PrepareHuman ( false , i , skill ) ;
18730: LD_INT 0
18732: PPUSH
18733: LD_VAR 0 8
18737: PPUSH
18738: LD_VAR 0 4
18742: PPUSH
18743: CALL_OW 380
// un := CreateHuman ;
18747: LD_ADDR_VAR 0 14
18751: PUSH
18752: CALL_OW 44
18756: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18757: LD_VAR 0 14
18761: PPUSH
18762: LD_VAR 0 1
18766: PPUSH
18767: CALL_OW 250
18771: PPUSH
18772: LD_VAR 0 1
18776: PPUSH
18777: CALL_OW 251
18781: PPUSH
18782: LD_INT 10
18784: PPUSH
18785: LD_INT 0
18787: PPUSH
18788: CALL_OW 50
// result := result ^ un ;
18792: LD_ADDR_VAR 0 7
18796: PUSH
18797: LD_VAR 0 7
18801: PUSH
18802: LD_VAR 0 14
18806: ADD
18807: ST_TO_ADDR
// end ;
18808: GO 18686
18810: POP
18811: POP
// end ; end ;
18812: LD_VAR 0 7
18816: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18817: LD_INT 0
18819: PPUSH
18820: PPUSH
18821: PPUSH
18822: PPUSH
18823: PPUSH
18824: PPUSH
18825: PPUSH
18826: PPUSH
18827: PPUSH
18828: PPUSH
18829: PPUSH
18830: PPUSH
18831: PPUSH
18832: PPUSH
18833: PPUSH
18834: PPUSH
// result := false ;
18835: LD_ADDR_VAR 0 3
18839: PUSH
18840: LD_INT 0
18842: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18843: LD_VAR 0 1
18847: NOT
18848: PUSH
18849: LD_VAR 0 1
18853: PPUSH
18854: CALL_OW 266
18858: PUSH
18859: LD_INT 32
18861: PUSH
18862: LD_INT 33
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: IN
18869: NOT
18870: OR
18871: IFFALSE 18875
// exit ;
18873: GO 19984
// nat := GetNation ( tower ) ;
18875: LD_ADDR_VAR 0 12
18879: PUSH
18880: LD_VAR 0 1
18884: PPUSH
18885: CALL_OW 248
18889: ST_TO_ADDR
// side := GetSide ( tower ) ;
18890: LD_ADDR_VAR 0 16
18894: PUSH
18895: LD_VAR 0 1
18899: PPUSH
18900: CALL_OW 255
18904: ST_TO_ADDR
// x := GetX ( tower ) ;
18905: LD_ADDR_VAR 0 10
18909: PUSH
18910: LD_VAR 0 1
18914: PPUSH
18915: CALL_OW 250
18919: ST_TO_ADDR
// y := GetY ( tower ) ;
18920: LD_ADDR_VAR 0 11
18924: PUSH
18925: LD_VAR 0 1
18929: PPUSH
18930: CALL_OW 251
18934: ST_TO_ADDR
// if not x or not y then
18935: LD_VAR 0 10
18939: NOT
18940: PUSH
18941: LD_VAR 0 11
18945: NOT
18946: OR
18947: IFFALSE 18951
// exit ;
18949: GO 19984
// weapon := 0 ;
18951: LD_ADDR_VAR 0 18
18955: PUSH
18956: LD_INT 0
18958: ST_TO_ADDR
// fac_list := [ ] ;
18959: LD_ADDR_VAR 0 17
18963: PUSH
18964: EMPTY
18965: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18966: LD_ADDR_VAR 0 6
18970: PUSH
18971: LD_VAR 0 1
18975: PPUSH
18976: CALL_OW 274
18980: PPUSH
18981: LD_VAR 0 2
18985: PPUSH
18986: LD_INT 0
18988: PPUSH
18989: CALL 16555 0 3
18993: PPUSH
18994: LD_INT 30
18996: PUSH
18997: LD_INT 3
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PPUSH
19004: CALL_OW 72
19008: ST_TO_ADDR
// if not factories then
19009: LD_VAR 0 6
19013: NOT
19014: IFFALSE 19018
// exit ;
19016: GO 19984
// for i in factories do
19018: LD_ADDR_VAR 0 8
19022: PUSH
19023: LD_VAR 0 6
19027: PUSH
19028: FOR_IN
19029: IFFALSE 19054
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19031: LD_ADDR_VAR 0 17
19035: PUSH
19036: LD_VAR 0 17
19040: PUSH
19041: LD_VAR 0 8
19045: PPUSH
19046: CALL_OW 478
19050: UNION
19051: ST_TO_ADDR
19052: GO 19028
19054: POP
19055: POP
// if not fac_list then
19056: LD_VAR 0 17
19060: NOT
19061: IFFALSE 19065
// exit ;
19063: GO 19984
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19065: LD_ADDR_VAR 0 5
19069: PUSH
19070: LD_INT 4
19072: PUSH
19073: LD_INT 5
19075: PUSH
19076: LD_INT 9
19078: PUSH
19079: LD_INT 10
19081: PUSH
19082: LD_INT 6
19084: PUSH
19085: LD_INT 7
19087: PUSH
19088: LD_INT 11
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 27
19102: PUSH
19103: LD_INT 28
19105: PUSH
19106: LD_INT 26
19108: PUSH
19109: LD_INT 30
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 43
19120: PUSH
19121: LD_INT 44
19123: PUSH
19124: LD_INT 46
19126: PUSH
19127: LD_INT 45
19129: PUSH
19130: LD_INT 47
19132: PUSH
19133: LD_INT 49
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: PUSH
19149: LD_VAR 0 12
19153: ARRAY
19154: ST_TO_ADDR
// list := list isect fac_list ;
19155: LD_ADDR_VAR 0 5
19159: PUSH
19160: LD_VAR 0 5
19164: PUSH
19165: LD_VAR 0 17
19169: ISECT
19170: ST_TO_ADDR
// if not list then
19171: LD_VAR 0 5
19175: NOT
19176: IFFALSE 19180
// exit ;
19178: GO 19984
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19180: LD_VAR 0 12
19184: PUSH
19185: LD_INT 3
19187: EQUAL
19188: PUSH
19189: LD_INT 49
19191: PUSH
19192: LD_VAR 0 5
19196: IN
19197: AND
19198: PUSH
19199: LD_INT 31
19201: PPUSH
19202: LD_VAR 0 16
19206: PPUSH
19207: CALL_OW 321
19211: PUSH
19212: LD_INT 2
19214: EQUAL
19215: AND
19216: IFFALSE 19276
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19218: LD_INT 22
19220: PUSH
19221: LD_VAR 0 16
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 35
19232: PUSH
19233: LD_INT 49
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 91
19242: PUSH
19243: LD_VAR 0 1
19247: PUSH
19248: LD_INT 10
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: LIST
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: LIST
19260: PPUSH
19261: CALL_OW 69
19265: NOT
19266: IFFALSE 19276
// weapon := ru_time_lapser ;
19268: LD_ADDR_VAR 0 18
19272: PUSH
19273: LD_INT 49
19275: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19276: LD_VAR 0 12
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: IN
19291: PUSH
19292: LD_INT 11
19294: PUSH
19295: LD_VAR 0 5
19299: IN
19300: PUSH
19301: LD_INT 30
19303: PUSH
19304: LD_VAR 0 5
19308: IN
19309: OR
19310: AND
19311: PUSH
19312: LD_INT 6
19314: PPUSH
19315: LD_VAR 0 16
19319: PPUSH
19320: CALL_OW 321
19324: PUSH
19325: LD_INT 2
19327: EQUAL
19328: AND
19329: IFFALSE 19494
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19331: LD_INT 22
19333: PUSH
19334: LD_VAR 0 16
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 35
19348: PUSH
19349: LD_INT 11
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 35
19358: PUSH
19359: LD_INT 30
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 91
19373: PUSH
19374: LD_VAR 0 1
19378: PUSH
19379: LD_INT 18
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: PPUSH
19392: CALL_OW 69
19396: NOT
19397: PUSH
19398: LD_INT 22
19400: PUSH
19401: LD_VAR 0 16
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: LD_INT 30
19415: PUSH
19416: LD_INT 32
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 30
19425: PUSH
19426: LD_INT 33
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 91
19440: PUSH
19441: LD_VAR 0 1
19445: PUSH
19446: LD_INT 12
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: LIST
19458: PUSH
19459: EMPTY
19460: LIST
19461: PPUSH
19462: CALL_OW 69
19466: PUSH
19467: LD_INT 2
19469: GREATER
19470: AND
19471: IFFALSE 19494
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19473: LD_ADDR_VAR 0 18
19477: PUSH
19478: LD_INT 11
19480: PUSH
19481: LD_INT 30
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_VAR 0 12
19492: ARRAY
19493: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19494: LD_VAR 0 18
19498: NOT
19499: PUSH
19500: LD_INT 40
19502: PPUSH
19503: LD_VAR 0 16
19507: PPUSH
19508: CALL_OW 321
19512: PUSH
19513: LD_INT 2
19515: EQUAL
19516: AND
19517: PUSH
19518: LD_INT 7
19520: PUSH
19521: LD_VAR 0 5
19525: IN
19526: PUSH
19527: LD_INT 28
19529: PUSH
19530: LD_VAR 0 5
19534: IN
19535: OR
19536: PUSH
19537: LD_INT 45
19539: PUSH
19540: LD_VAR 0 5
19544: IN
19545: OR
19546: AND
19547: IFFALSE 19801
// begin hex := GetHexInfo ( x , y ) ;
19549: LD_ADDR_VAR 0 4
19553: PUSH
19554: LD_VAR 0 10
19558: PPUSH
19559: LD_VAR 0 11
19563: PPUSH
19564: CALL_OW 546
19568: ST_TO_ADDR
// if hex [ 1 ] then
19569: LD_VAR 0 4
19573: PUSH
19574: LD_INT 1
19576: ARRAY
19577: IFFALSE 19581
// exit ;
19579: GO 19984
// height := hex [ 2 ] ;
19581: LD_ADDR_VAR 0 15
19585: PUSH
19586: LD_VAR 0 4
19590: PUSH
19591: LD_INT 2
19593: ARRAY
19594: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19595: LD_ADDR_VAR 0 14
19599: PUSH
19600: LD_INT 0
19602: PUSH
19603: LD_INT 2
19605: PUSH
19606: LD_INT 3
19608: PUSH
19609: LD_INT 5
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: ST_TO_ADDR
// for i in tmp do
19618: LD_ADDR_VAR 0 8
19622: PUSH
19623: LD_VAR 0 14
19627: PUSH
19628: FOR_IN
19629: IFFALSE 19799
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19631: LD_ADDR_VAR 0 9
19635: PUSH
19636: LD_VAR 0 10
19640: PPUSH
19641: LD_VAR 0 8
19645: PPUSH
19646: LD_INT 5
19648: PPUSH
19649: CALL_OW 272
19653: PUSH
19654: LD_VAR 0 11
19658: PPUSH
19659: LD_VAR 0 8
19663: PPUSH
19664: LD_INT 5
19666: PPUSH
19667: CALL_OW 273
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19676: LD_VAR 0 9
19680: PUSH
19681: LD_INT 1
19683: ARRAY
19684: PPUSH
19685: LD_VAR 0 9
19689: PUSH
19690: LD_INT 2
19692: ARRAY
19693: PPUSH
19694: CALL_OW 488
19698: IFFALSE 19797
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19700: LD_ADDR_VAR 0 4
19704: PUSH
19705: LD_VAR 0 9
19709: PUSH
19710: LD_INT 1
19712: ARRAY
19713: PPUSH
19714: LD_VAR 0 9
19718: PUSH
19719: LD_INT 2
19721: ARRAY
19722: PPUSH
19723: CALL_OW 546
19727: ST_TO_ADDR
// if hex [ 1 ] then
19728: LD_VAR 0 4
19732: PUSH
19733: LD_INT 1
19735: ARRAY
19736: IFFALSE 19740
// continue ;
19738: GO 19628
// h := hex [ 2 ] ;
19740: LD_ADDR_VAR 0 13
19744: PUSH
19745: LD_VAR 0 4
19749: PUSH
19750: LD_INT 2
19752: ARRAY
19753: ST_TO_ADDR
// if h + 7 < height then
19754: LD_VAR 0 13
19758: PUSH
19759: LD_INT 7
19761: PLUS
19762: PUSH
19763: LD_VAR 0 15
19767: LESS
19768: IFFALSE 19797
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19770: LD_ADDR_VAR 0 18
19774: PUSH
19775: LD_INT 7
19777: PUSH
19778: LD_INT 28
19780: PUSH
19781: LD_INT 45
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: LIST
19788: PUSH
19789: LD_VAR 0 12
19793: ARRAY
19794: ST_TO_ADDR
// break ;
19795: GO 19799
// end ; end ; end ;
19797: GO 19628
19799: POP
19800: POP
// end ; if not weapon then
19801: LD_VAR 0 18
19805: NOT
19806: IFFALSE 19866
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19808: LD_ADDR_VAR 0 5
19812: PUSH
19813: LD_VAR 0 5
19817: PUSH
19818: LD_INT 11
19820: PUSH
19821: LD_INT 30
19823: PUSH
19824: LD_INT 49
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: LIST
19831: DIFF
19832: ST_TO_ADDR
// if not list then
19833: LD_VAR 0 5
19837: NOT
19838: IFFALSE 19842
// exit ;
19840: GO 19984
// weapon := list [ rand ( 1 , list ) ] ;
19842: LD_ADDR_VAR 0 18
19846: PUSH
19847: LD_VAR 0 5
19851: PUSH
19852: LD_INT 1
19854: PPUSH
19855: LD_VAR 0 5
19859: PPUSH
19860: CALL_OW 12
19864: ARRAY
19865: ST_TO_ADDR
// end ; if weapon then
19866: LD_VAR 0 18
19870: IFFALSE 19984
// begin tmp := CostOfWeapon ( weapon ) ;
19872: LD_ADDR_VAR 0 14
19876: PUSH
19877: LD_VAR 0 18
19881: PPUSH
19882: CALL_OW 451
19886: ST_TO_ADDR
// j := GetBase ( tower ) ;
19887: LD_ADDR_VAR 0 9
19891: PUSH
19892: LD_VAR 0 1
19896: PPUSH
19897: CALL_OW 274
19901: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19902: LD_VAR 0 9
19906: PPUSH
19907: LD_INT 1
19909: PPUSH
19910: CALL_OW 275
19914: PUSH
19915: LD_VAR 0 14
19919: PUSH
19920: LD_INT 1
19922: ARRAY
19923: GREATEREQUAL
19924: PUSH
19925: LD_VAR 0 9
19929: PPUSH
19930: LD_INT 2
19932: PPUSH
19933: CALL_OW 275
19937: PUSH
19938: LD_VAR 0 14
19942: PUSH
19943: LD_INT 2
19945: ARRAY
19946: GREATEREQUAL
19947: AND
19948: PUSH
19949: LD_VAR 0 9
19953: PPUSH
19954: LD_INT 3
19956: PPUSH
19957: CALL_OW 275
19961: PUSH
19962: LD_VAR 0 14
19966: PUSH
19967: LD_INT 3
19969: ARRAY
19970: GREATEREQUAL
19971: AND
19972: IFFALSE 19984
// result := weapon ;
19974: LD_ADDR_VAR 0 3
19978: PUSH
19979: LD_VAR 0 18
19983: ST_TO_ADDR
// end ; end ;
19984: LD_VAR 0 3
19988: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19989: LD_INT 0
19991: PPUSH
19992: PPUSH
// result := true ;
19993: LD_ADDR_VAR 0 3
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// if array1 = array2 then
20001: LD_VAR 0 1
20005: PUSH
20006: LD_VAR 0 2
20010: EQUAL
20011: IFFALSE 20071
// begin for i = 1 to array1 do
20013: LD_ADDR_VAR 0 4
20017: PUSH
20018: DOUBLE
20019: LD_INT 1
20021: DEC
20022: ST_TO_ADDR
20023: LD_VAR 0 1
20027: PUSH
20028: FOR_TO
20029: IFFALSE 20067
// if array1 [ i ] <> array2 [ i ] then
20031: LD_VAR 0 1
20035: PUSH
20036: LD_VAR 0 4
20040: ARRAY
20041: PUSH
20042: LD_VAR 0 2
20046: PUSH
20047: LD_VAR 0 4
20051: ARRAY
20052: NONEQUAL
20053: IFFALSE 20065
// begin result := false ;
20055: LD_ADDR_VAR 0 3
20059: PUSH
20060: LD_INT 0
20062: ST_TO_ADDR
// break ;
20063: GO 20067
// end ;
20065: GO 20028
20067: POP
20068: POP
// end else
20069: GO 20079
// result := false ;
20071: LD_ADDR_VAR 0 3
20075: PUSH
20076: LD_INT 0
20078: ST_TO_ADDR
// end ;
20079: LD_VAR 0 3
20083: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20084: LD_INT 0
20086: PPUSH
20087: PPUSH
// if not array1 or not array2 then
20088: LD_VAR 0 1
20092: NOT
20093: PUSH
20094: LD_VAR 0 2
20098: NOT
20099: OR
20100: IFFALSE 20104
// exit ;
20102: GO 20168
// result := true ;
20104: LD_ADDR_VAR 0 3
20108: PUSH
20109: LD_INT 1
20111: ST_TO_ADDR
// for i = 1 to array1 do
20112: LD_ADDR_VAR 0 4
20116: PUSH
20117: DOUBLE
20118: LD_INT 1
20120: DEC
20121: ST_TO_ADDR
20122: LD_VAR 0 1
20126: PUSH
20127: FOR_TO
20128: IFFALSE 20166
// if array1 [ i ] <> array2 [ i ] then
20130: LD_VAR 0 1
20134: PUSH
20135: LD_VAR 0 4
20139: ARRAY
20140: PUSH
20141: LD_VAR 0 2
20145: PUSH
20146: LD_VAR 0 4
20150: ARRAY
20151: NONEQUAL
20152: IFFALSE 20164
// begin result := false ;
20154: LD_ADDR_VAR 0 3
20158: PUSH
20159: LD_INT 0
20161: ST_TO_ADDR
// break ;
20162: GO 20166
// end ;
20164: GO 20127
20166: POP
20167: POP
// end ;
20168: LD_VAR 0 3
20172: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20173: LD_INT 0
20175: PPUSH
20176: PPUSH
20177: PPUSH
// pom := GetBase ( fac ) ;
20178: LD_ADDR_VAR 0 5
20182: PUSH
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 274
20192: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20193: LD_ADDR_VAR 0 4
20197: PUSH
20198: LD_VAR 0 2
20202: PUSH
20203: LD_INT 1
20205: ARRAY
20206: PPUSH
20207: LD_VAR 0 2
20211: PUSH
20212: LD_INT 2
20214: ARRAY
20215: PPUSH
20216: LD_VAR 0 2
20220: PUSH
20221: LD_INT 3
20223: ARRAY
20224: PPUSH
20225: LD_VAR 0 2
20229: PUSH
20230: LD_INT 4
20232: ARRAY
20233: PPUSH
20234: CALL_OW 449
20238: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20239: LD_ADDR_VAR 0 3
20243: PUSH
20244: LD_VAR 0 5
20248: PPUSH
20249: LD_INT 1
20251: PPUSH
20252: CALL_OW 275
20256: PUSH
20257: LD_VAR 0 4
20261: PUSH
20262: LD_INT 1
20264: ARRAY
20265: GREATEREQUAL
20266: PUSH
20267: LD_VAR 0 5
20271: PPUSH
20272: LD_INT 2
20274: PPUSH
20275: CALL_OW 275
20279: PUSH
20280: LD_VAR 0 4
20284: PUSH
20285: LD_INT 2
20287: ARRAY
20288: GREATEREQUAL
20289: AND
20290: PUSH
20291: LD_VAR 0 5
20295: PPUSH
20296: LD_INT 3
20298: PPUSH
20299: CALL_OW 275
20303: PUSH
20304: LD_VAR 0 4
20308: PUSH
20309: LD_INT 3
20311: ARRAY
20312: GREATEREQUAL
20313: AND
20314: ST_TO_ADDR
// end ;
20315: LD_VAR 0 3
20319: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20320: LD_INT 0
20322: PPUSH
20323: PPUSH
20324: PPUSH
20325: PPUSH
// pom := GetBase ( building ) ;
20326: LD_ADDR_VAR 0 3
20330: PUSH
20331: LD_VAR 0 1
20335: PPUSH
20336: CALL_OW 274
20340: ST_TO_ADDR
// if not pom then
20341: LD_VAR 0 3
20345: NOT
20346: IFFALSE 20350
// exit ;
20348: GO 20520
// btype := GetBType ( building ) ;
20350: LD_ADDR_VAR 0 5
20354: PUSH
20355: LD_VAR 0 1
20359: PPUSH
20360: CALL_OW 266
20364: ST_TO_ADDR
// if btype = b_armoury then
20365: LD_VAR 0 5
20369: PUSH
20370: LD_INT 4
20372: EQUAL
20373: IFFALSE 20383
// btype := b_barracks ;
20375: LD_ADDR_VAR 0 5
20379: PUSH
20380: LD_INT 5
20382: ST_TO_ADDR
// if btype = b_depot then
20383: LD_VAR 0 5
20387: PUSH
20388: LD_INT 0
20390: EQUAL
20391: IFFALSE 20401
// btype := b_warehouse ;
20393: LD_ADDR_VAR 0 5
20397: PUSH
20398: LD_INT 1
20400: ST_TO_ADDR
// if btype = b_workshop then
20401: LD_VAR 0 5
20405: PUSH
20406: LD_INT 2
20408: EQUAL
20409: IFFALSE 20419
// btype := b_factory ;
20411: LD_ADDR_VAR 0 5
20415: PUSH
20416: LD_INT 3
20418: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20419: LD_ADDR_VAR 0 4
20423: PUSH
20424: LD_VAR 0 5
20428: PPUSH
20429: LD_VAR 0 1
20433: PPUSH
20434: CALL_OW 248
20438: PPUSH
20439: CALL_OW 450
20443: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20444: LD_ADDR_VAR 0 2
20448: PUSH
20449: LD_VAR 0 3
20453: PPUSH
20454: LD_INT 1
20456: PPUSH
20457: CALL_OW 275
20461: PUSH
20462: LD_VAR 0 4
20466: PUSH
20467: LD_INT 1
20469: ARRAY
20470: GREATEREQUAL
20471: PUSH
20472: LD_VAR 0 3
20476: PPUSH
20477: LD_INT 2
20479: PPUSH
20480: CALL_OW 275
20484: PUSH
20485: LD_VAR 0 4
20489: PUSH
20490: LD_INT 2
20492: ARRAY
20493: GREATEREQUAL
20494: AND
20495: PUSH
20496: LD_VAR 0 3
20500: PPUSH
20501: LD_INT 3
20503: PPUSH
20504: CALL_OW 275
20508: PUSH
20509: LD_VAR 0 4
20513: PUSH
20514: LD_INT 3
20516: ARRAY
20517: GREATEREQUAL
20518: AND
20519: ST_TO_ADDR
// end ;
20520: LD_VAR 0 2
20524: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20525: LD_INT 0
20527: PPUSH
20528: PPUSH
20529: PPUSH
// pom := GetBase ( building ) ;
20530: LD_ADDR_VAR 0 4
20534: PUSH
20535: LD_VAR 0 1
20539: PPUSH
20540: CALL_OW 274
20544: ST_TO_ADDR
// if not pom then
20545: LD_VAR 0 4
20549: NOT
20550: IFFALSE 20554
// exit ;
20552: GO 20655
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20554: LD_ADDR_VAR 0 5
20558: PUSH
20559: LD_VAR 0 2
20563: PPUSH
20564: LD_VAR 0 1
20568: PPUSH
20569: CALL_OW 248
20573: PPUSH
20574: CALL_OW 450
20578: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_VAR 0 4
20588: PPUSH
20589: LD_INT 1
20591: PPUSH
20592: CALL_OW 275
20596: PUSH
20597: LD_VAR 0 5
20601: PUSH
20602: LD_INT 1
20604: ARRAY
20605: GREATEREQUAL
20606: PUSH
20607: LD_VAR 0 4
20611: PPUSH
20612: LD_INT 2
20614: PPUSH
20615: CALL_OW 275
20619: PUSH
20620: LD_VAR 0 5
20624: PUSH
20625: LD_INT 2
20627: ARRAY
20628: GREATEREQUAL
20629: AND
20630: PUSH
20631: LD_VAR 0 4
20635: PPUSH
20636: LD_INT 3
20638: PPUSH
20639: CALL_OW 275
20643: PUSH
20644: LD_VAR 0 5
20648: PUSH
20649: LD_INT 3
20651: ARRAY
20652: GREATEREQUAL
20653: AND
20654: ST_TO_ADDR
// end ;
20655: LD_VAR 0 3
20659: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20660: LD_INT 0
20662: PPUSH
20663: PPUSH
20664: PPUSH
20665: PPUSH
20666: PPUSH
20667: PPUSH
20668: PPUSH
20669: PPUSH
20670: PPUSH
20671: PPUSH
20672: PPUSH
// result := false ;
20673: LD_ADDR_VAR 0 8
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
20681: LD_VAR 0 5
20685: NOT
20686: PUSH
20687: LD_VAR 0 1
20691: NOT
20692: OR
20693: PUSH
20694: LD_VAR 0 2
20698: NOT
20699: OR
20700: PUSH
20701: LD_VAR 0 3
20705: NOT
20706: OR
20707: IFFALSE 20711
// exit ;
20709: GO 21525
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20711: LD_ADDR_VAR 0 14
20715: PUSH
20716: LD_VAR 0 1
20720: PPUSH
20721: LD_VAR 0 2
20725: PPUSH
20726: LD_VAR 0 3
20730: PPUSH
20731: LD_VAR 0 4
20735: PPUSH
20736: LD_VAR 0 5
20740: PUSH
20741: LD_INT 1
20743: ARRAY
20744: PPUSH
20745: CALL_OW 248
20749: PPUSH
20750: LD_INT 0
20752: PPUSH
20753: CALL 22758 0 6
20757: ST_TO_ADDR
// if not hexes then
20758: LD_VAR 0 14
20762: NOT
20763: IFFALSE 20767
// exit ;
20765: GO 21525
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20767: LD_ADDR_VAR 0 17
20771: PUSH
20772: LD_VAR 0 5
20776: PPUSH
20777: LD_INT 22
20779: PUSH
20780: LD_VAR 0 13
20784: PPUSH
20785: CALL_OW 255
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 2
20796: PUSH
20797: LD_INT 30
20799: PUSH
20800: LD_INT 0
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 30
20809: PUSH
20810: LD_INT 1
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PPUSH
20826: CALL_OW 72
20830: ST_TO_ADDR
// for i = 1 to hexes do
20831: LD_ADDR_VAR 0 9
20835: PUSH
20836: DOUBLE
20837: LD_INT 1
20839: DEC
20840: ST_TO_ADDR
20841: LD_VAR 0 14
20845: PUSH
20846: FOR_TO
20847: IFFALSE 21523
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20849: LD_ADDR_VAR 0 13
20853: PUSH
20854: LD_VAR 0 14
20858: PUSH
20859: LD_VAR 0 9
20863: ARRAY
20864: PUSH
20865: LD_INT 1
20867: ARRAY
20868: PPUSH
20869: LD_VAR 0 14
20873: PUSH
20874: LD_VAR 0 9
20878: ARRAY
20879: PUSH
20880: LD_INT 2
20882: ARRAY
20883: PPUSH
20884: CALL_OW 428
20888: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20889: LD_VAR 0 14
20893: PUSH
20894: LD_VAR 0 9
20898: ARRAY
20899: PUSH
20900: LD_INT 1
20902: ARRAY
20903: PPUSH
20904: LD_VAR 0 14
20908: PUSH
20909: LD_VAR 0 9
20913: ARRAY
20914: PUSH
20915: LD_INT 2
20917: ARRAY
20918: PPUSH
20919: CALL_OW 351
20923: PUSH
20924: LD_VAR 0 14
20928: PUSH
20929: LD_VAR 0 9
20933: ARRAY
20934: PUSH
20935: LD_INT 1
20937: ARRAY
20938: PPUSH
20939: LD_VAR 0 14
20943: PUSH
20944: LD_VAR 0 9
20948: ARRAY
20949: PUSH
20950: LD_INT 2
20952: ARRAY
20953: PPUSH
20954: CALL_OW 488
20958: NOT
20959: OR
20960: PUSH
20961: LD_VAR 0 13
20965: PPUSH
20966: CALL_OW 247
20970: PUSH
20971: LD_INT 3
20973: EQUAL
20974: OR
20975: IFFALSE 20981
// exit ;
20977: POP
20978: POP
20979: GO 21525
// if not tmp then
20981: LD_VAR 0 13
20985: NOT
20986: IFFALSE 20990
// continue ;
20988: GO 20846
// result := true ;
20990: LD_ADDR_VAR 0 8
20994: PUSH
20995: LD_INT 1
20997: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20998: LD_VAR 0 6
21002: PUSH
21003: LD_VAR 0 13
21007: PPUSH
21008: CALL_OW 247
21012: PUSH
21013: LD_INT 2
21015: EQUAL
21016: AND
21017: PUSH
21018: LD_VAR 0 13
21022: PPUSH
21023: CALL_OW 263
21027: PUSH
21028: LD_INT 1
21030: EQUAL
21031: AND
21032: IFFALSE 21196
// begin if IsDrivenBy ( tmp ) then
21034: LD_VAR 0 13
21038: PPUSH
21039: CALL_OW 311
21043: IFFALSE 21047
// continue ;
21045: GO 20846
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21047: LD_VAR 0 6
21051: PPUSH
21052: LD_INT 3
21054: PUSH
21055: LD_INT 60
21057: PUSH
21058: EMPTY
21059: LIST
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 3
21067: PUSH
21068: LD_INT 55
21070: PUSH
21071: EMPTY
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PPUSH
21082: CALL_OW 72
21086: IFFALSE 21194
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21088: LD_ADDR_VAR 0 18
21092: PUSH
21093: LD_VAR 0 6
21097: PPUSH
21098: LD_INT 3
21100: PUSH
21101: LD_INT 60
21103: PUSH
21104: EMPTY
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 3
21113: PUSH
21114: LD_INT 55
21116: PUSH
21117: EMPTY
21118: LIST
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PPUSH
21128: CALL_OW 72
21132: PUSH
21133: LD_INT 1
21135: ARRAY
21136: ST_TO_ADDR
// if IsInUnit ( driver ) then
21137: LD_VAR 0 18
21141: PPUSH
21142: CALL_OW 310
21146: IFFALSE 21157
// ComExit ( driver ) ;
21148: LD_VAR 0 18
21152: PPUSH
21153: CALL 46538 0 1
// AddComEnterUnit ( driver , tmp ) ;
21157: LD_VAR 0 18
21161: PPUSH
21162: LD_VAR 0 13
21166: PPUSH
21167: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21171: LD_VAR 0 18
21175: PPUSH
21176: LD_VAR 0 7
21180: PPUSH
21181: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21185: LD_VAR 0 18
21189: PPUSH
21190: CALL_OW 181
// end ; continue ;
21194: GO 20846
// end ; if not cleaners or not tmp in cleaners then
21196: LD_VAR 0 6
21200: NOT
21201: PUSH
21202: LD_VAR 0 13
21206: PUSH
21207: LD_VAR 0 6
21211: IN
21212: NOT
21213: OR
21214: IFFALSE 21521
// begin if dep then
21216: LD_VAR 0 17
21220: IFFALSE 21356
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21222: LD_ADDR_VAR 0 16
21226: PUSH
21227: LD_VAR 0 17
21231: PUSH
21232: LD_INT 1
21234: ARRAY
21235: PPUSH
21236: CALL_OW 250
21240: PPUSH
21241: LD_VAR 0 17
21245: PUSH
21246: LD_INT 1
21248: ARRAY
21249: PPUSH
21250: CALL_OW 254
21254: PPUSH
21255: LD_INT 5
21257: PPUSH
21258: CALL_OW 272
21262: PUSH
21263: LD_VAR 0 17
21267: PUSH
21268: LD_INT 1
21270: ARRAY
21271: PPUSH
21272: CALL_OW 251
21276: PPUSH
21277: LD_VAR 0 17
21281: PUSH
21282: LD_INT 1
21284: ARRAY
21285: PPUSH
21286: CALL_OW 254
21290: PPUSH
21291: LD_INT 5
21293: PPUSH
21294: CALL_OW 273
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21303: LD_VAR 0 16
21307: PUSH
21308: LD_INT 1
21310: ARRAY
21311: PPUSH
21312: LD_VAR 0 16
21316: PUSH
21317: LD_INT 2
21319: ARRAY
21320: PPUSH
21321: CALL_OW 488
21325: IFFALSE 21356
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21327: LD_VAR 0 13
21331: PPUSH
21332: LD_VAR 0 16
21336: PUSH
21337: LD_INT 1
21339: ARRAY
21340: PPUSH
21341: LD_VAR 0 16
21345: PUSH
21346: LD_INT 2
21348: ARRAY
21349: PPUSH
21350: CALL_OW 111
// continue ;
21354: GO 20846
// end ; end ; r := GetDir ( tmp ) ;
21356: LD_ADDR_VAR 0 15
21360: PUSH
21361: LD_VAR 0 13
21365: PPUSH
21366: CALL_OW 254
21370: ST_TO_ADDR
// if r = 5 then
21371: LD_VAR 0 15
21375: PUSH
21376: LD_INT 5
21378: EQUAL
21379: IFFALSE 21389
// r := 0 ;
21381: LD_ADDR_VAR 0 15
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// for j = r to 5 do
21389: LD_ADDR_VAR 0 10
21393: PUSH
21394: DOUBLE
21395: LD_VAR 0 15
21399: DEC
21400: ST_TO_ADDR
21401: LD_INT 5
21403: PUSH
21404: FOR_TO
21405: IFFALSE 21519
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21407: LD_ADDR_VAR 0 11
21411: PUSH
21412: LD_VAR 0 13
21416: PPUSH
21417: CALL_OW 250
21421: PPUSH
21422: LD_VAR 0 10
21426: PPUSH
21427: LD_INT 2
21429: PPUSH
21430: CALL_OW 272
21434: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21435: LD_ADDR_VAR 0 12
21439: PUSH
21440: LD_VAR 0 13
21444: PPUSH
21445: CALL_OW 251
21449: PPUSH
21450: LD_VAR 0 10
21454: PPUSH
21455: LD_INT 2
21457: PPUSH
21458: CALL_OW 273
21462: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21463: LD_VAR 0 11
21467: PPUSH
21468: LD_VAR 0 12
21472: PPUSH
21473: CALL_OW 488
21477: PUSH
21478: LD_VAR 0 11
21482: PPUSH
21483: LD_VAR 0 12
21487: PPUSH
21488: CALL_OW 428
21492: NOT
21493: AND
21494: IFFALSE 21517
// begin ComMoveXY ( tmp , _x , _y ) ;
21496: LD_VAR 0 13
21500: PPUSH
21501: LD_VAR 0 11
21505: PPUSH
21506: LD_VAR 0 12
21510: PPUSH
21511: CALL_OW 111
// break ;
21515: GO 21519
// end ; end ;
21517: GO 21404
21519: POP
21520: POP
// end ; end ;
21521: GO 20846
21523: POP
21524: POP
// end ;
21525: LD_VAR 0 8
21529: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21530: LD_INT 0
21532: PPUSH
// result := true ;
21533: LD_ADDR_VAR 0 3
21537: PUSH
21538: LD_INT 1
21540: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21541: LD_VAR 0 2
21545: PUSH
21546: LD_INT 24
21548: DOUBLE
21549: EQUAL
21550: IFTRUE 21560
21552: LD_INT 33
21554: DOUBLE
21555: EQUAL
21556: IFTRUE 21560
21558: GO 21585
21560: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21561: LD_ADDR_VAR 0 3
21565: PUSH
21566: LD_INT 32
21568: PPUSH
21569: LD_VAR 0 1
21573: PPUSH
21574: CALL_OW 321
21578: PUSH
21579: LD_INT 2
21581: EQUAL
21582: ST_TO_ADDR
21583: GO 21901
21585: LD_INT 20
21587: DOUBLE
21588: EQUAL
21589: IFTRUE 21593
21591: GO 21618
21593: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21594: LD_ADDR_VAR 0 3
21598: PUSH
21599: LD_INT 6
21601: PPUSH
21602: LD_VAR 0 1
21606: PPUSH
21607: CALL_OW 321
21611: PUSH
21612: LD_INT 2
21614: EQUAL
21615: ST_TO_ADDR
21616: GO 21901
21618: LD_INT 22
21620: DOUBLE
21621: EQUAL
21622: IFTRUE 21632
21624: LD_INT 36
21626: DOUBLE
21627: EQUAL
21628: IFTRUE 21632
21630: GO 21657
21632: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21633: LD_ADDR_VAR 0 3
21637: PUSH
21638: LD_INT 15
21640: PPUSH
21641: LD_VAR 0 1
21645: PPUSH
21646: CALL_OW 321
21650: PUSH
21651: LD_INT 2
21653: EQUAL
21654: ST_TO_ADDR
21655: GO 21901
21657: LD_INT 30
21659: DOUBLE
21660: EQUAL
21661: IFTRUE 21665
21663: GO 21690
21665: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21666: LD_ADDR_VAR 0 3
21670: PUSH
21671: LD_INT 20
21673: PPUSH
21674: LD_VAR 0 1
21678: PPUSH
21679: CALL_OW 321
21683: PUSH
21684: LD_INT 2
21686: EQUAL
21687: ST_TO_ADDR
21688: GO 21901
21690: LD_INT 28
21692: DOUBLE
21693: EQUAL
21694: IFTRUE 21704
21696: LD_INT 21
21698: DOUBLE
21699: EQUAL
21700: IFTRUE 21704
21702: GO 21729
21704: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21705: LD_ADDR_VAR 0 3
21709: PUSH
21710: LD_INT 21
21712: PPUSH
21713: LD_VAR 0 1
21717: PPUSH
21718: CALL_OW 321
21722: PUSH
21723: LD_INT 2
21725: EQUAL
21726: ST_TO_ADDR
21727: GO 21901
21729: LD_INT 16
21731: DOUBLE
21732: EQUAL
21733: IFTRUE 21737
21735: GO 21762
21737: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21738: LD_ADDR_VAR 0 3
21742: PUSH
21743: LD_INT 84
21745: PPUSH
21746: LD_VAR 0 1
21750: PPUSH
21751: CALL_OW 321
21755: PUSH
21756: LD_INT 2
21758: EQUAL
21759: ST_TO_ADDR
21760: GO 21901
21762: LD_INT 19
21764: DOUBLE
21765: EQUAL
21766: IFTRUE 21776
21768: LD_INT 23
21770: DOUBLE
21771: EQUAL
21772: IFTRUE 21776
21774: GO 21801
21776: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21777: LD_ADDR_VAR 0 3
21781: PUSH
21782: LD_INT 83
21784: PPUSH
21785: LD_VAR 0 1
21789: PPUSH
21790: CALL_OW 321
21794: PUSH
21795: LD_INT 2
21797: EQUAL
21798: ST_TO_ADDR
21799: GO 21901
21801: LD_INT 17
21803: DOUBLE
21804: EQUAL
21805: IFTRUE 21809
21807: GO 21834
21809: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21810: LD_ADDR_VAR 0 3
21814: PUSH
21815: LD_INT 39
21817: PPUSH
21818: LD_VAR 0 1
21822: PPUSH
21823: CALL_OW 321
21827: PUSH
21828: LD_INT 2
21830: EQUAL
21831: ST_TO_ADDR
21832: GO 21901
21834: LD_INT 18
21836: DOUBLE
21837: EQUAL
21838: IFTRUE 21842
21840: GO 21867
21842: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
21843: LD_ADDR_VAR 0 3
21847: PUSH
21848: LD_INT 40
21850: PPUSH
21851: LD_VAR 0 1
21855: PPUSH
21856: CALL_OW 321
21860: PUSH
21861: LD_INT 2
21863: EQUAL
21864: ST_TO_ADDR
21865: GO 21901
21867: LD_INT 27
21869: DOUBLE
21870: EQUAL
21871: IFTRUE 21875
21873: GO 21900
21875: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
21876: LD_ADDR_VAR 0 3
21880: PUSH
21881: LD_INT 35
21883: PPUSH
21884: LD_VAR 0 1
21888: PPUSH
21889: CALL_OW 321
21893: PUSH
21894: LD_INT 2
21896: EQUAL
21897: ST_TO_ADDR
21898: GO 21901
21900: POP
// end ;
21901: LD_VAR 0 3
21905: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21906: LD_INT 0
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
21916: PPUSH
21917: PPUSH
21918: PPUSH
// result := false ;
21919: LD_ADDR_VAR 0 6
21923: PUSH
21924: LD_INT 0
21926: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21927: LD_VAR 0 1
21931: NOT
21932: PUSH
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 266
21942: PUSH
21943: LD_INT 0
21945: PUSH
21946: LD_INT 1
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: IN
21953: NOT
21954: OR
21955: PUSH
21956: LD_VAR 0 2
21960: NOT
21961: OR
21962: PUSH
21963: LD_VAR 0 5
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: LD_INT 2
21976: PUSH
21977: LD_INT 3
21979: PUSH
21980: LD_INT 4
21982: PUSH
21983: LD_INT 5
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: IN
21994: NOT
21995: OR
21996: PUSH
21997: LD_VAR 0 3
22001: PPUSH
22002: LD_VAR 0 4
22006: PPUSH
22007: CALL_OW 488
22011: NOT
22012: OR
22013: IFFALSE 22017
// exit ;
22015: GO 22753
// side := GetSide ( depot ) ;
22017: LD_ADDR_VAR 0 9
22021: PUSH
22022: LD_VAR 0 1
22026: PPUSH
22027: CALL_OW 255
22031: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22032: LD_VAR 0 9
22036: PPUSH
22037: LD_VAR 0 2
22041: PPUSH
22042: CALL 21530 0 2
22046: NOT
22047: IFFALSE 22051
// exit ;
22049: GO 22753
// pom := GetBase ( depot ) ;
22051: LD_ADDR_VAR 0 10
22055: PUSH
22056: LD_VAR 0 1
22060: PPUSH
22061: CALL_OW 274
22065: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22066: LD_ADDR_VAR 0 11
22070: PUSH
22071: LD_VAR 0 2
22075: PPUSH
22076: LD_VAR 0 1
22080: PPUSH
22081: CALL_OW 248
22085: PPUSH
22086: CALL_OW 450
22090: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22091: LD_VAR 0 10
22095: PPUSH
22096: LD_INT 1
22098: PPUSH
22099: CALL_OW 275
22103: PUSH
22104: LD_VAR 0 11
22108: PUSH
22109: LD_INT 1
22111: ARRAY
22112: GREATEREQUAL
22113: PUSH
22114: LD_VAR 0 10
22118: PPUSH
22119: LD_INT 2
22121: PPUSH
22122: CALL_OW 275
22126: PUSH
22127: LD_VAR 0 11
22131: PUSH
22132: LD_INT 2
22134: ARRAY
22135: GREATEREQUAL
22136: AND
22137: PUSH
22138: LD_VAR 0 10
22142: PPUSH
22143: LD_INT 3
22145: PPUSH
22146: CALL_OW 275
22150: PUSH
22151: LD_VAR 0 11
22155: PUSH
22156: LD_INT 3
22158: ARRAY
22159: GREATEREQUAL
22160: AND
22161: NOT
22162: IFFALSE 22166
// exit ;
22164: GO 22753
// if GetBType ( depot ) = b_depot then
22166: LD_VAR 0 1
22170: PPUSH
22171: CALL_OW 266
22175: PUSH
22176: LD_INT 0
22178: EQUAL
22179: IFFALSE 22191
// dist := 28 else
22181: LD_ADDR_VAR 0 14
22185: PUSH
22186: LD_INT 28
22188: ST_TO_ADDR
22189: GO 22199
// dist := 36 ;
22191: LD_ADDR_VAR 0 14
22195: PUSH
22196: LD_INT 36
22198: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22199: LD_VAR 0 1
22203: PPUSH
22204: LD_VAR 0 3
22208: PPUSH
22209: LD_VAR 0 4
22213: PPUSH
22214: CALL_OW 297
22218: PUSH
22219: LD_VAR 0 14
22223: GREATER
22224: IFFALSE 22228
// exit ;
22226: GO 22753
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22228: LD_ADDR_VAR 0 12
22232: PUSH
22233: LD_VAR 0 2
22237: PPUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: LD_VAR 0 4
22247: PPUSH
22248: LD_VAR 0 5
22252: PPUSH
22253: LD_VAR 0 1
22257: PPUSH
22258: CALL_OW 248
22262: PPUSH
22263: LD_INT 0
22265: PPUSH
22266: CALL 22758 0 6
22270: ST_TO_ADDR
// if not hexes then
22271: LD_VAR 0 12
22275: NOT
22276: IFFALSE 22280
// exit ;
22278: GO 22753
// hex := GetHexInfo ( x , y ) ;
22280: LD_ADDR_VAR 0 15
22284: PUSH
22285: LD_VAR 0 3
22289: PPUSH
22290: LD_VAR 0 4
22294: PPUSH
22295: CALL_OW 546
22299: ST_TO_ADDR
// if hex [ 1 ] then
22300: LD_VAR 0 15
22304: PUSH
22305: LD_INT 1
22307: ARRAY
22308: IFFALSE 22312
// exit ;
22310: GO 22753
// height := hex [ 2 ] ;
22312: LD_ADDR_VAR 0 13
22316: PUSH
22317: LD_VAR 0 15
22321: PUSH
22322: LD_INT 2
22324: ARRAY
22325: ST_TO_ADDR
// for i = 1 to hexes do
22326: LD_ADDR_VAR 0 7
22330: PUSH
22331: DOUBLE
22332: LD_INT 1
22334: DEC
22335: ST_TO_ADDR
22336: LD_VAR 0 12
22340: PUSH
22341: FOR_TO
22342: IFFALSE 22672
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22344: LD_VAR 0 12
22348: PUSH
22349: LD_VAR 0 7
22353: ARRAY
22354: PUSH
22355: LD_INT 1
22357: ARRAY
22358: PPUSH
22359: LD_VAR 0 12
22363: PUSH
22364: LD_VAR 0 7
22368: ARRAY
22369: PUSH
22370: LD_INT 2
22372: ARRAY
22373: PPUSH
22374: CALL_OW 488
22378: NOT
22379: PUSH
22380: LD_VAR 0 12
22384: PUSH
22385: LD_VAR 0 7
22389: ARRAY
22390: PUSH
22391: LD_INT 1
22393: ARRAY
22394: PPUSH
22395: LD_VAR 0 12
22399: PUSH
22400: LD_VAR 0 7
22404: ARRAY
22405: PUSH
22406: LD_INT 2
22408: ARRAY
22409: PPUSH
22410: CALL_OW 428
22414: PUSH
22415: LD_INT 0
22417: GREATER
22418: OR
22419: PUSH
22420: LD_VAR 0 12
22424: PUSH
22425: LD_VAR 0 7
22429: ARRAY
22430: PUSH
22431: LD_INT 1
22433: ARRAY
22434: PPUSH
22435: LD_VAR 0 12
22439: PUSH
22440: LD_VAR 0 7
22444: ARRAY
22445: PUSH
22446: LD_INT 2
22448: ARRAY
22449: PPUSH
22450: CALL_OW 351
22454: OR
22455: IFFALSE 22461
// exit ;
22457: POP
22458: POP
22459: GO 22753
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22461: LD_ADDR_VAR 0 8
22465: PUSH
22466: LD_VAR 0 12
22470: PUSH
22471: LD_VAR 0 7
22475: ARRAY
22476: PUSH
22477: LD_INT 1
22479: ARRAY
22480: PPUSH
22481: LD_VAR 0 12
22485: PUSH
22486: LD_VAR 0 7
22490: ARRAY
22491: PUSH
22492: LD_INT 2
22494: ARRAY
22495: PPUSH
22496: CALL_OW 546
22500: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22501: LD_VAR 0 8
22505: PUSH
22506: LD_INT 1
22508: ARRAY
22509: PUSH
22510: LD_VAR 0 8
22514: PUSH
22515: LD_INT 2
22517: ARRAY
22518: PUSH
22519: LD_VAR 0 13
22523: PUSH
22524: LD_INT 2
22526: PLUS
22527: GREATER
22528: OR
22529: PUSH
22530: LD_VAR 0 8
22534: PUSH
22535: LD_INT 2
22537: ARRAY
22538: PUSH
22539: LD_VAR 0 13
22543: PUSH
22544: LD_INT 2
22546: MINUS
22547: LESS
22548: OR
22549: PUSH
22550: LD_VAR 0 8
22554: PUSH
22555: LD_INT 3
22557: ARRAY
22558: PUSH
22559: LD_INT 0
22561: PUSH
22562: LD_INT 8
22564: PUSH
22565: LD_INT 9
22567: PUSH
22568: LD_INT 10
22570: PUSH
22571: LD_INT 11
22573: PUSH
22574: LD_INT 12
22576: PUSH
22577: LD_INT 13
22579: PUSH
22580: LD_INT 16
22582: PUSH
22583: LD_INT 17
22585: PUSH
22586: LD_INT 18
22588: PUSH
22589: LD_INT 19
22591: PUSH
22592: LD_INT 20
22594: PUSH
22595: LD_INT 21
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: IN
22613: NOT
22614: OR
22615: PUSH
22616: LD_VAR 0 8
22620: PUSH
22621: LD_INT 5
22623: ARRAY
22624: NOT
22625: OR
22626: PUSH
22627: LD_VAR 0 8
22631: PUSH
22632: LD_INT 6
22634: ARRAY
22635: PUSH
22636: LD_INT 1
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: LD_INT 7
22644: PUSH
22645: LD_INT 9
22647: PUSH
22648: LD_INT 10
22650: PUSH
22651: LD_INT 11
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: IN
22662: NOT
22663: OR
22664: IFFALSE 22670
// exit ;
22666: POP
22667: POP
22668: GO 22753
// end ;
22670: GO 22341
22672: POP
22673: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22674: LD_VAR 0 9
22678: PPUSH
22679: LD_VAR 0 3
22683: PPUSH
22684: LD_VAR 0 4
22688: PPUSH
22689: LD_INT 20
22691: PPUSH
22692: CALL 14705 0 4
22696: PUSH
22697: LD_INT 4
22699: ARRAY
22700: IFFALSE 22704
// exit ;
22702: GO 22753
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22704: LD_VAR 0 2
22708: PUSH
22709: LD_INT 29
22711: PUSH
22712: LD_INT 30
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: IN
22719: PUSH
22720: LD_VAR 0 3
22724: PPUSH
22725: LD_VAR 0 4
22729: PPUSH
22730: LD_VAR 0 9
22734: PPUSH
22735: CALL_OW 440
22739: NOT
22740: AND
22741: IFFALSE 22745
// exit ;
22743: GO 22753
// result := true ;
22745: LD_ADDR_VAR 0 6
22749: PUSH
22750: LD_INT 1
22752: ST_TO_ADDR
// end ;
22753: LD_VAR 0 6
22757: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22758: LD_INT 0
22760: PPUSH
22761: PPUSH
22762: PPUSH
22763: PPUSH
22764: PPUSH
22765: PPUSH
22766: PPUSH
22767: PPUSH
22768: PPUSH
22769: PPUSH
22770: PPUSH
22771: PPUSH
22772: PPUSH
22773: PPUSH
22774: PPUSH
22775: PPUSH
22776: PPUSH
22777: PPUSH
22778: PPUSH
22779: PPUSH
22780: PPUSH
22781: PPUSH
22782: PPUSH
22783: PPUSH
22784: PPUSH
22785: PPUSH
22786: PPUSH
22787: PPUSH
22788: PPUSH
22789: PPUSH
22790: PPUSH
22791: PPUSH
22792: PPUSH
22793: PPUSH
22794: PPUSH
22795: PPUSH
22796: PPUSH
22797: PPUSH
22798: PPUSH
22799: PPUSH
22800: PPUSH
22801: PPUSH
22802: PPUSH
22803: PPUSH
22804: PPUSH
22805: PPUSH
22806: PPUSH
22807: PPUSH
22808: PPUSH
22809: PPUSH
22810: PPUSH
22811: PPUSH
22812: PPUSH
22813: PPUSH
22814: PPUSH
22815: PPUSH
22816: PPUSH
22817: PPUSH
// result = [ ] ;
22818: LD_ADDR_VAR 0 7
22822: PUSH
22823: EMPTY
22824: ST_TO_ADDR
// temp_list = [ ] ;
22825: LD_ADDR_VAR 0 9
22829: PUSH
22830: EMPTY
22831: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22832: LD_VAR 0 4
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: LD_INT 3
22848: PUSH
22849: LD_INT 4
22851: PUSH
22852: LD_INT 5
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: IN
22863: NOT
22864: PUSH
22865: LD_VAR 0 1
22869: PUSH
22870: LD_INT 0
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: IN
22880: PUSH
22881: LD_VAR 0 5
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: LD_INT 3
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: LIST
22899: IN
22900: NOT
22901: AND
22902: OR
22903: IFFALSE 22907
// exit ;
22905: GO 41298
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22907: LD_VAR 0 1
22911: PUSH
22912: LD_INT 6
22914: PUSH
22915: LD_INT 7
22917: PUSH
22918: LD_INT 8
22920: PUSH
22921: LD_INT 13
22923: PUSH
22924: LD_INT 12
22926: PUSH
22927: LD_INT 15
22929: PUSH
22930: LD_INT 11
22932: PUSH
22933: LD_INT 14
22935: PUSH
22936: LD_INT 10
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: IN
22950: IFFALSE 22960
// btype = b_lab ;
22952: LD_ADDR_VAR 0 1
22956: PUSH
22957: LD_INT 6
22959: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22960: LD_VAR 0 6
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: IN
22979: NOT
22980: PUSH
22981: LD_VAR 0 1
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: LD_INT 1
22991: PUSH
22992: LD_INT 2
22994: PUSH
22995: LD_INT 3
22997: PUSH
22998: LD_INT 6
23000: PUSH
23001: LD_INT 36
23003: PUSH
23004: LD_INT 4
23006: PUSH
23007: LD_INT 5
23009: PUSH
23010: LD_INT 31
23012: PUSH
23013: LD_INT 32
23015: PUSH
23016: LD_INT 33
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: IN
23032: NOT
23033: PUSH
23034: LD_VAR 0 6
23038: PUSH
23039: LD_INT 1
23041: EQUAL
23042: AND
23043: OR
23044: PUSH
23045: LD_VAR 0 1
23049: PUSH
23050: LD_INT 2
23052: PUSH
23053: LD_INT 3
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: IN
23060: NOT
23061: PUSH
23062: LD_VAR 0 6
23066: PUSH
23067: LD_INT 2
23069: EQUAL
23070: AND
23071: OR
23072: IFFALSE 23082
// mode = 0 ;
23074: LD_ADDR_VAR 0 6
23078: PUSH
23079: LD_INT 0
23081: ST_TO_ADDR
// case mode of 0 :
23082: LD_VAR 0 6
23086: PUSH
23087: LD_INT 0
23089: DOUBLE
23090: EQUAL
23091: IFTRUE 23095
23093: GO 34548
23095: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23096: LD_ADDR_VAR 0 11
23100: PUSH
23101: LD_INT 0
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: LD_INT 1
23116: NEG
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 1
23124: PUSH
23125: LD_INT 0
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 1
23134: PUSH
23135: LD_INT 1
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 0
23144: PUSH
23145: LD_INT 1
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 1
23154: NEG
23155: PUSH
23156: LD_INT 0
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: NEG
23166: PUSH
23167: LD_INT 1
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 1
23177: NEG
23178: PUSH
23179: LD_INT 2
23181: NEG
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: LD_INT 2
23192: NEG
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 1
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: LD_INT 2
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 0
23221: PUSH
23222: LD_INT 2
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 1
23231: NEG
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: PUSH
23243: LD_INT 3
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 0
23252: PUSH
23253: LD_INT 3
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 1
23262: NEG
23263: PUSH
23264: LD_INT 2
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23289: LD_ADDR_VAR 0 12
23293: PUSH
23294: LD_INT 0
23296: PUSH
23297: LD_INT 0
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: LD_INT 1
23309: NEG
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: LD_INT 0
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 1
23327: PUSH
23328: LD_INT 1
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 0
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 1
23347: NEG
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 1
23358: NEG
23359: PUSH
23360: LD_INT 1
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 1
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 2
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: LD_INT 1
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 2
23412: NEG
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 2
23423: NEG
23424: PUSH
23425: LD_INT 1
23427: NEG
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 3
23446: NEG
23447: PUSH
23448: LD_INT 0
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 3
23457: NEG
23458: PUSH
23459: LD_INT 1
23461: NEG
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23485: LD_ADDR_VAR 0 13
23489: PUSH
23490: LD_INT 0
23492: PUSH
23493: LD_INT 0
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 0
23502: PUSH
23503: LD_INT 1
23505: NEG
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: LD_INT 1
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 0
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: NEG
23555: PUSH
23556: LD_INT 1
23558: NEG
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 1
23566: NEG
23567: PUSH
23568: LD_INT 2
23570: NEG
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 2
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: LD_INT 2
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 1
23598: PUSH
23599: LD_INT 2
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 2
23608: NEG
23609: PUSH
23610: LD_INT 1
23612: NEG
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 2
23620: NEG
23621: PUSH
23622: LD_INT 2
23624: NEG
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 2
23632: NEG
23633: PUSH
23634: LD_INT 3
23636: NEG
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 3
23644: NEG
23645: PUSH
23646: LD_INT 2
23648: NEG
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 3
23656: NEG
23657: PUSH
23658: LD_INT 3
23660: NEG
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23684: LD_ADDR_VAR 0 14
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: LD_INT 0
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: LD_INT 1
23704: NEG
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: LD_INT 0
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 1
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: LD_INT 0
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 1
23765: NEG
23766: PUSH
23767: LD_INT 2
23769: NEG
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 0
23777: PUSH
23778: LD_INT 2
23780: NEG
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 1
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: LD_INT 1
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: NEG
23831: PUSH
23832: LD_INT 3
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 0
23842: PUSH
23843: LD_INT 3
23845: NEG
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: LD_INT 2
23856: NEG
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23880: LD_ADDR_VAR 0 15
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: LD_INT 1
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: NEG
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 1
23949: NEG
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: LD_INT 1
23964: NEG
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 2
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 2
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 2
24003: NEG
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 2
24014: NEG
24015: PUSH
24016: LD_INT 1
24018: NEG
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 3
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 3
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24073: LD_ADDR_VAR 0 16
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: LD_INT 1
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 1
24142: NEG
24143: PUSH
24144: LD_INT 1
24146: NEG
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: LD_INT 2
24158: NEG
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 2
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 2
24176: PUSH
24177: LD_INT 2
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: LD_INT 2
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 2
24196: NEG
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 2
24208: NEG
24209: PUSH
24210: LD_INT 2
24212: NEG
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 3
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 3
24230: PUSH
24231: LD_INT 3
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: LD_INT 3
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24266: LD_ADDR_VAR 0 17
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: LD_INT 1
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: LD_INT 1
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 1
24335: NEG
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: NEG
24348: PUSH
24349: LD_INT 2
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: LD_INT 2
24362: NEG
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 1
24370: PUSH
24371: LD_INT 1
24373: NEG
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 2
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 2
24401: PUSH
24402: LD_INT 2
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: LD_INT 2
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: NEG
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 2
24442: NEG
24443: PUSH
24444: LD_INT 0
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 2
24453: NEG
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 2
24465: NEG
24466: PUSH
24467: LD_INT 2
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24496: LD_ADDR_VAR 0 18
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: PUSH
24535: LD_INT 1
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: LD_INT 1
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 1
24554: NEG
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: NEG
24566: PUSH
24567: LD_INT 1
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: LD_INT 2
24581: NEG
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 0
24589: PUSH
24590: LD_INT 2
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: LD_INT 1
24603: NEG
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 2
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 2
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: LD_INT 2
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 0
24651: PUSH
24652: LD_INT 2
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 1
24661: NEG
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 2
24672: NEG
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 2
24683: NEG
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 2
24695: NEG
24696: PUSH
24697: LD_INT 2
24699: NEG
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24726: LD_ADDR_VAR 0 19
24730: PUSH
24731: LD_INT 0
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: LD_INT 1
24746: NEG
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: LD_INT 0
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: LD_INT 1
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 1
24784: NEG
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 1
24795: NEG
24796: PUSH
24797: LD_INT 1
24799: NEG
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: NEG
24808: PUSH
24809: LD_INT 2
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: LD_INT 2
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 2
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 2
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: LD_INT 2
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: LD_INT 2
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 1
24891: NEG
24892: PUSH
24893: LD_INT 1
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 2
24902: NEG
24903: PUSH
24904: LD_INT 0
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 2
24913: NEG
24914: PUSH
24915: LD_INT 1
24917: NEG
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 2
24925: NEG
24926: PUSH
24927: LD_INT 2
24929: NEG
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24956: LD_ADDR_VAR 0 20
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 0
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: LD_INT 0
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 1
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: LD_INT 1
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: NEG
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 1
25025: NEG
25026: PUSH
25027: LD_INT 1
25029: NEG
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 1
25037: NEG
25038: PUSH
25039: LD_INT 2
25041: NEG
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: LD_INT 2
25052: NEG
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 2
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 2
25091: PUSH
25092: LD_INT 2
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: LD_INT 2
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: LD_INT 2
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: NEG
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: NEG
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 2
25143: NEG
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 2
25155: NEG
25156: PUSH
25157: LD_INT 2
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25186: LD_ADDR_VAR 0 21
25190: PUSH
25191: LD_INT 0
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 0
25203: PUSH
25204: LD_INT 1
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: NEG
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: LD_INT 1
25259: NEG
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 0
25279: PUSH
25280: LD_INT 2
25282: NEG
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 1
25290: PUSH
25291: LD_INT 1
25293: NEG
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 2
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 2
25311: PUSH
25312: LD_INT 1
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 2
25321: PUSH
25322: LD_INT 2
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 2
25362: NEG
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 2
25373: NEG
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: LD_INT 2
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25416: LD_ADDR_VAR 0 22
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 0
25433: PUSH
25434: LD_INT 1
25436: NEG
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: LD_INT 0
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 1
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 0
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 1
25474: NEG
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 1
25485: NEG
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 1
25497: NEG
25498: PUSH
25499: LD_INT 2
25501: NEG
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: LD_INT 2
25512: NEG
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 1
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: LD_INT 0
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 2
25541: PUSH
25542: LD_INT 1
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 2
25551: PUSH
25552: LD_INT 2
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 2
25592: NEG
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 2
25603: NEG
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 2
25615: NEG
25616: PUSH
25617: LD_INT 2
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25646: LD_ADDR_VAR 0 23
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: LD_INT 1
25666: NEG
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: LD_INT 1
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 0
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 1
25715: NEG
25716: PUSH
25717: LD_INT 1
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: LD_INT 2
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: LD_INT 2
25742: NEG
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: PUSH
25751: LD_INT 1
25753: NEG
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 2
25771: PUSH
25772: LD_INT 1
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 2
25781: PUSH
25782: LD_INT 2
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: LD_INT 2
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: LD_INT 2
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 2
25822: NEG
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 2
25833: NEG
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 2
25845: NEG
25846: PUSH
25847: LD_INT 2
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 2
25857: NEG
25858: PUSH
25859: LD_INT 3
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 3
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: LD_INT 2
25884: NEG
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 2
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25926: LD_ADDR_VAR 0 24
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: LD_INT 1
25946: NEG
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: LD_INT 1
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: NEG
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: LD_INT 1
25999: NEG
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: LD_INT 2
26011: NEG
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: LD_INT 2
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 1
26091: NEG
26092: PUSH
26093: LD_INT 1
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 2
26102: NEG
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 2
26113: NEG
26114: PUSH
26115: LD_INT 1
26117: NEG
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 2
26125: NEG
26126: PUSH
26127: LD_INT 2
26129: NEG
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: LD_INT 2
26140: NEG
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 2
26148: PUSH
26149: LD_INT 1
26151: NEG
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 3
26159: PUSH
26160: LD_INT 1
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 3
26169: PUSH
26170: LD_INT 2
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26202: LD_ADDR_VAR 0 25
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: LD_INT 0
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: LD_INT 1
26222: NEG
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 1
26240: PUSH
26241: LD_INT 1
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 0
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 1
26260: NEG
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: LD_INT 2
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: LD_INT 2
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 1
26306: PUSH
26307: LD_INT 1
26309: NEG
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 2
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 2
26337: PUSH
26338: LD_INT 2
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: LD_INT 2
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 2
26378: NEG
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 2
26389: NEG
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 2
26401: NEG
26402: PUSH
26403: LD_INT 2
26405: NEG
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 3
26413: PUSH
26414: LD_INT 1
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 3
26423: PUSH
26424: LD_INT 2
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 3
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: LD_INT 3
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26476: LD_ADDR_VAR 0 26
26480: PUSH
26481: LD_INT 0
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: LD_INT 2
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: LD_INT 1
26583: NEG
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 2
26591: PUSH
26592: LD_INT 0
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 2
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 2
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 2
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 2
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 2
26652: NEG
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 2
26663: NEG
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 2
26675: NEG
26676: PUSH
26677: LD_INT 2
26679: NEG
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 2
26687: PUSH
26688: LD_INT 3
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: LD_INT 3
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: LD_INT 2
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 2
26718: NEG
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26752: LD_ADDR_VAR 0 27
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: NEG
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: LD_INT 2
26837: NEG
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: LD_INT 2
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: LD_INT 1
26859: NEG
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 2
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: LD_INT 1
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 2
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 1
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 2
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 2
26928: NEG
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: NEG
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 2
26951: NEG
26952: PUSH
26953: LD_INT 2
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 2
26974: NEG
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 3
26985: NEG
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 3
26997: NEG
26998: PUSH
26999: LD_INT 2
27001: NEG
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27032: LD_ADDR_VAR 0 28
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: LD_INT 1
27052: NEG
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 1
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: LD_INT 1
27105: NEG
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 1
27113: NEG
27114: PUSH
27115: LD_INT 2
27117: NEG
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 2
27128: NEG
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 2
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 2
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 2
27167: PUSH
27168: LD_INT 2
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: LD_INT 2
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: LD_INT 2
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 2
27231: NEG
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 2
27243: NEG
27244: PUSH
27245: LD_INT 3
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PUSH
27257: LD_INT 3
27259: NEG
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 3
27267: NEG
27268: PUSH
27269: LD_INT 1
27271: NEG
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 3
27279: NEG
27280: PUSH
27281: LD_INT 2
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27314: LD_ADDR_VAR 0 29
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: LD_INT 1
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: NEG
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: NEG
27396: PUSH
27397: LD_INT 2
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 0
27407: PUSH
27408: LD_INT 2
27410: NEG
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 1
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 2
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: LD_INT 2
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 2
27480: NEG
27481: PUSH
27482: LD_INT 1
27484: NEG
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 2
27492: NEG
27493: PUSH
27494: LD_INT 2
27496: NEG
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 2
27504: NEG
27505: PUSH
27506: LD_INT 3
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 2
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 3
27527: PUSH
27528: LD_INT 1
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: LD_INT 3
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: NEG
27548: PUSH
27549: LD_INT 2
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 3
27558: NEG
27559: PUSH
27560: LD_INT 2
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27593: LD_ADDR_VAR 0 30
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 1
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 1
27651: NEG
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: LD_INT 1
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: NEG
27675: PUSH
27676: LD_INT 2
27678: NEG
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 0
27686: PUSH
27687: LD_INT 2
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: LD_INT 1
27700: NEG
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 2
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 2
27728: PUSH
27729: LD_INT 2
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: LD_INT 2
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: NEG
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 2
27759: NEG
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 2
27770: NEG
27771: PUSH
27772: LD_INT 1
27774: NEG
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: NEG
27783: PUSH
27784: LD_INT 3
27786: NEG
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 1
27794: PUSH
27795: LD_INT 2
27797: NEG
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 3
27805: PUSH
27806: LD_INT 2
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: LD_INT 3
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 2
27825: NEG
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 3
27836: NEG
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27871: LD_ADDR_VAR 0 31
27875: PUSH
27876: LD_INT 0
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 1
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 1
27929: NEG
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: NEG
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 1
27952: NEG
27953: PUSH
27954: LD_INT 2
27956: NEG
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 2
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 2
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 2
27995: PUSH
27996: LD_INT 2
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 2
28036: NEG
28037: PUSH
28038: LD_INT 1
28040: NEG
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 2
28048: NEG
28049: PUSH
28050: LD_INT 2
28052: NEG
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 2
28060: NEG
28061: PUSH
28062: LD_INT 3
28064: NEG
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: LD_INT 1
28075: NEG
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 3
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: LD_INT 3
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: LD_INT 2
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 3
28114: NEG
28115: PUSH
28116: LD_INT 2
28118: NEG
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28149: LD_ADDR_VAR 0 32
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: LD_INT 0
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 0
28166: PUSH
28167: LD_INT 1
28169: NEG
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 1
28187: PUSH
28188: LD_INT 1
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: NEG
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 1
28230: NEG
28231: PUSH
28232: LD_INT 2
28234: NEG
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: LD_INT 2
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 2
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 2
28274: PUSH
28275: LD_INT 2
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: LD_INT 2
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: LD_INT 2
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 1
28304: NEG
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 2
28315: NEG
28316: PUSH
28317: LD_INT 0
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 2
28326: NEG
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: LD_INT 3
28342: NEG
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: LD_INT 2
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 3
28361: PUSH
28362: LD_INT 2
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 2
28371: PUSH
28372: LD_INT 3
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 2
28381: NEG
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 3
28392: NEG
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28427: LD_ADDR_VAR 0 33
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: LD_INT 1
28447: NEG
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: LD_INT 0
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: NEG
28497: PUSH
28498: LD_INT 1
28500: NEG
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 1
28508: NEG
28509: PUSH
28510: LD_INT 2
28512: NEG
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 2
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: LD_INT 2
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 0
28561: PUSH
28562: LD_INT 2
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 1
28571: NEG
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 2
28582: NEG
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 2
28593: NEG
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 2
28605: NEG
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 2
28617: NEG
28618: PUSH
28619: LD_INT 3
28621: NEG
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: LD_INT 1
28632: NEG
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 3
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: LD_INT 3
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 3
28671: NEG
28672: PUSH
28673: LD_INT 2
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28706: LD_ADDR_VAR 0 34
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: LD_INT 0
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 0
28723: PUSH
28724: LD_INT 1
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: LD_INT 0
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: LD_INT 1
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 1
28787: NEG
28788: PUSH
28789: LD_INT 2
28791: NEG
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: LD_INT 2
28802: NEG
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 2
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 2
28831: PUSH
28832: LD_INT 2
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 1
28841: PUSH
28842: LD_INT 2
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: LD_INT 1
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 2
28862: NEG
28863: PUSH
28864: LD_INT 0
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 2
28873: NEG
28874: PUSH
28875: LD_INT 1
28877: NEG
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 2
28885: NEG
28886: PUSH
28887: LD_INT 2
28889: NEG
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 1
28897: NEG
28898: PUSH
28899: LD_INT 3
28901: NEG
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 1
28909: PUSH
28910: LD_INT 2
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 3
28920: PUSH
28921: LD_INT 2
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 2
28930: PUSH
28931: LD_INT 3
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 2
28940: NEG
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 3
28951: NEG
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28986: LD_ADDR_VAR 0 35
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: LD_INT 0
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 0
29003: PUSH
29004: LD_INT 1
29006: NEG
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: LD_INT 0
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 1
29024: PUSH
29025: LD_INT 1
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 0
29034: PUSH
29035: LD_INT 1
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: LD_INT 1
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 2
29077: NEG
29078: PUSH
29079: LD_INT 1
29081: NEG
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29098: LD_ADDR_VAR 0 36
29102: PUSH
29103: LD_INT 0
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 0
29115: PUSH
29116: LD_INT 1
29118: NEG
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 1
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: LD_INT 1
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: LD_INT 1
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: LD_INT 0
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 1
29179: NEG
29180: PUSH
29181: LD_INT 2
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: LD_INT 2
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29210: LD_ADDR_VAR 0 37
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: LD_INT 1
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: LD_INT 1
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 1
29268: NEG
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: LD_INT 1
29294: NEG
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29322: LD_ADDR_VAR 0 38
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: LD_INT 1
29342: NEG
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 1
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 0
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 1
29380: NEG
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 1
29391: NEG
29392: PUSH
29393: LD_INT 1
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 2
29403: PUSH
29404: LD_INT 1
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 2
29413: NEG
29414: PUSH
29415: LD_INT 1
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29434: LD_ADDR_VAR 0 39
29438: PUSH
29439: LD_INT 0
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 1
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 0
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: LD_INT 0
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 1
29503: NEG
29504: PUSH
29505: LD_INT 1
29507: NEG
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: LD_INT 2
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29546: LD_ADDR_VAR 0 40
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: LD_INT 0
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 1
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 1
29615: NEG
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 1
29627: PUSH
29628: LD_INT 1
29630: NEG
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 1
29638: NEG
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29658: LD_ADDR_VAR 0 41
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: LD_INT 0
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: LD_INT 1
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: NEG
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 1
29739: NEG
29740: PUSH
29741: LD_INT 2
29743: NEG
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 2
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: LD_INT 2
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 2
29813: NEG
29814: PUSH
29815: LD_INT 0
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 2
29824: NEG
29825: PUSH
29826: LD_INT 1
29828: NEG
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 2
29836: NEG
29837: PUSH
29838: LD_INT 2
29840: NEG
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 2
29848: NEG
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 2
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 3
29871: PUSH
29872: LD_INT 0
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 3
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 3
29891: PUSH
29892: LD_INT 2
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 3
29901: PUSH
29902: LD_INT 3
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 2
29911: PUSH
29912: LD_INT 3
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 2
29921: NEG
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 3
29932: NEG
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 3
29943: NEG
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 3
29955: NEG
29956: PUSH
29957: LD_INT 2
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 3
29967: NEG
29968: PUSH
29969: LD_INT 3
29971: NEG
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30008: LD_ADDR_VAR 0 42
30012: PUSH
30013: LD_INT 0
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 1
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 1
30077: NEG
30078: PUSH
30079: LD_INT 1
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: NEG
30090: PUSH
30091: LD_INT 2
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: LD_INT 2
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 1
30112: PUSH
30113: LD_INT 1
30115: NEG
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 2
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 2
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: LD_INT 2
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 1
30163: NEG
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 2
30174: NEG
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 2
30186: NEG
30187: PUSH
30188: LD_INT 2
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 2
30198: NEG
30199: PUSH
30200: LD_INT 3
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: LD_INT 3
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 3
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: LD_INT 2
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 3
30244: PUSH
30245: LD_INT 2
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 2
30264: PUSH
30265: LD_INT 3
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: LD_INT 3
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: LD_INT 3
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: NEG
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 3
30305: NEG
30306: PUSH
30307: LD_INT 2
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 3
30317: NEG
30318: PUSH
30319: LD_INT 3
30321: NEG
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30358: LD_ADDR_VAR 0 43
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: LD_INT 1
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 1
30386: PUSH
30387: LD_INT 0
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: LD_INT 1
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 1
30416: NEG
30417: PUSH
30418: LD_INT 0
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: LD_INT 1
30431: NEG
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: LD_INT 2
30443: NEG
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 0
30451: PUSH
30452: LD_INT 2
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: LD_INT 1
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 2
30473: PUSH
30474: LD_INT 0
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 2
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: LD_INT 2
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 1
30513: NEG
30514: PUSH
30515: LD_INT 1
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 2
30524: NEG
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 2
30535: NEG
30536: PUSH
30537: LD_INT 1
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 1
30547: NEG
30548: PUSH
30549: LD_INT 3
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 0
30559: PUSH
30560: LD_INT 3
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: LD_INT 2
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 3
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 3
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 3
30654: NEG
30655: PUSH
30656: LD_INT 0
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 3
30665: NEG
30666: PUSH
30667: LD_INT 1
30669: NEG
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30706: LD_ADDR_VAR 0 44
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: LD_INT 2
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: LD_INT 1
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 2
30810: PUSH
30811: LD_INT 0
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: LD_INT 1
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 2
30830: PUSH
30831: LD_INT 2
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 1
30840: PUSH
30841: LD_INT 2
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: LD_INT 1
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 2
30861: NEG
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 2
30872: NEG
30873: PUSH
30874: LD_INT 1
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 2
30884: NEG
30885: PUSH
30886: LD_INT 2
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 2
30896: NEG
30897: PUSH
30898: LD_INT 3
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 2
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 3
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 3
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 3
30949: PUSH
30950: LD_INT 3
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: LD_INT 3
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 2
30969: NEG
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 3
30980: NEG
30981: PUSH
30982: LD_INT 0
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 3
30991: NEG
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 3
31003: NEG
31004: PUSH
31005: LD_INT 2
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 3
31015: NEG
31016: PUSH
31017: LD_INT 3
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31056: LD_ADDR_VAR 0 45
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: LD_INT 1
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 1
31125: NEG
31126: PUSH
31127: LD_INT 1
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: LD_INT 2
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: LD_INT 1
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: LD_INT 2
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: LD_INT 2
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: LD_INT 2
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 2
31222: NEG
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 2
31234: NEG
31235: PUSH
31236: LD_INT 2
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 2
31246: NEG
31247: PUSH
31248: LD_INT 3
31250: NEG
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: LD_INT 3
31262: NEG
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 0
31270: PUSH
31271: LD_INT 3
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: LD_INT 2
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 3
31292: PUSH
31293: LD_INT 2
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 3
31302: PUSH
31303: LD_INT 3
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 2
31312: PUSH
31313: LD_INT 3
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: LD_INT 3
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 0
31332: PUSH
31333: LD_INT 3
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: LD_INT 2
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 3
31353: NEG
31354: PUSH
31355: LD_INT 2
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 3
31365: NEG
31366: PUSH
31367: LD_INT 3
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31406: LD_ADDR_VAR 0 46
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 0
31423: PUSH
31424: LD_INT 1
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: NEG
31465: PUSH
31466: LD_INT 0
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: LD_INT 1
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: PUSH
31489: LD_INT 2
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 0
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: LD_INT 1
31513: NEG
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 2
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: LD_INT 2
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: LD_INT 2
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 2
31572: NEG
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 2
31583: NEG
31584: PUSH
31585: LD_INT 1
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 1
31595: NEG
31596: PUSH
31597: LD_INT 3
31599: NEG
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: LD_INT 3
31610: NEG
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: LD_INT 2
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: PUSH
31630: LD_INT 1
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 3
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 3
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: LD_INT 3
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 0
31670: PUSH
31671: LD_INT 3
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 1
31680: NEG
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 2
31691: NEG
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 3
31702: NEG
31703: PUSH
31704: LD_INT 0
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 3
31713: NEG
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31754: LD_ADDR_VAR 0 47
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 0
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: NEG
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: LD_INT 2
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: LD_INT 2
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: LD_INT 1
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: NEG
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: LD_INT 2
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31905: LD_ADDR_VAR 0 48
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 0
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 1
31963: NEG
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 1
31974: NEG
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: LD_INT 2
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: LD_INT 2
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: LD_INT 1
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 2
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32052: LD_ADDR_VAR 0 49
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 0
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: NEG
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 1
32121: NEG
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 2
32144: PUSH
32145: LD_INT 0
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: LD_INT 2
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: LD_INT 2
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32196: LD_ADDR_VAR 0 50
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: LD_INT 1
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 2
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 1
32317: NEG
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32340: LD_ADDR_VAR 0 51
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 1
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: LD_INT 2
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: LD_INT 2
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 1
32441: NEG
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 2
32452: NEG
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 2
32463: NEG
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32487: LD_ADDR_VAR 0 52
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: LD_INT 1
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 1
32545: NEG
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: LD_INT 1
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 1
32568: NEG
32569: PUSH
32570: LD_INT 2
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 2
32591: NEG
32592: PUSH
32593: LD_INT 0
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 2
32602: NEG
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: NEG
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32638: LD_ADDR_VAR 0 53
32642: PUSH
32643: LD_INT 0
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: LD_INT 1
32658: NEG
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 1
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: PUSH
32677: LD_INT 1
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: LD_INT 1
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: NEG
32708: PUSH
32709: LD_INT 1
32711: NEG
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: LD_INT 2
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: LD_INT 2
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 2
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: PUSH
32774: LD_INT 2
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: LD_INT 2
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: LD_INT 2
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 1
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 2
32814: NEG
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 2
32825: NEG
32826: PUSH
32827: LD_INT 1
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 2
32837: NEG
32838: PUSH
32839: LD_INT 2
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32868: LD_ADDR_VAR 0 54
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: LD_INT 1
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: LD_INT 2
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: LD_INT 0
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 2
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 0
33023: PUSH
33024: LD_INT 2
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 2
33044: NEG
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 2
33055: NEG
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 2
33067: NEG
33068: PUSH
33069: LD_INT 2
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33098: LD_ADDR_VAR 0 55
33102: PUSH
33103: LD_INT 0
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: NEG
33168: PUSH
33169: LD_INT 1
33171: NEG
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 1
33179: NEG
33180: PUSH
33181: LD_INT 2
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: LD_INT 2
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 2
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 2
33233: PUSH
33234: LD_INT 2
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: LD_INT 2
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 0
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: NEG
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 2
33285: NEG
33286: PUSH
33287: LD_INT 1
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 2
33297: NEG
33298: PUSH
33299: LD_INT 2
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33328: LD_ADDR_VAR 0 56
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: LD_INT 1
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: LD_INT 2
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: LD_INT 2
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: LD_INT 2
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: LD_INT 2
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: NEG
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 2
33504: NEG
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 2
33515: NEG
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: NEG
33528: PUSH
33529: LD_INT 2
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33558: LD_ADDR_VAR 0 57
33562: PUSH
33563: LD_INT 0
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: LD_INT 1
33578: NEG
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: NEG
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 1
33627: NEG
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: LD_INT 2
33643: NEG
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: LD_INT 2
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: LD_INT 1
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: PUSH
33684: LD_INT 1
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 2
33734: NEG
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 2
33745: NEG
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 2
33757: NEG
33758: PUSH
33759: LD_INT 2
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33788: LD_ADDR_VAR 0 58
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: LD_INT 0
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 1
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: LD_INT 2
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: LD_INT 2
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 1
33892: PUSH
33893: LD_INT 1
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: LD_INT 0
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: LD_INT 2
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 2
33964: NEG
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 2
33975: NEG
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 2
33987: NEG
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34018: LD_ADDR_VAR 0 59
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34106: LD_ADDR_VAR 0 60
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: LD_INT 0
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: LD_INT 1
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 1
34164: NEG
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 1
34175: NEG
34176: PUSH
34177: LD_INT 1
34179: NEG
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34194: LD_ADDR_VAR 0 61
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 1
34252: NEG
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: LD_INT 1
34267: NEG
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34282: LD_ADDR_VAR 0 62
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34370: LD_ADDR_VAR 0 63
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34458: LD_ADDR_VAR 0 64
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 1
34496: PUSH
34497: LD_INT 1
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: LD_INT 0
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 1
34527: NEG
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: ST_TO_ADDR
// end ; 1 :
34546: GO 40443
34548: LD_INT 1
34550: DOUBLE
34551: EQUAL
34552: IFTRUE 34556
34554: GO 37179
34556: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34557: LD_ADDR_VAR 0 11
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: LD_INT 3
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: LD_INT 3
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 2
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34601: LD_ADDR_VAR 0 12
34605: PUSH
34606: LD_INT 2
34608: PUSH
34609: LD_INT 1
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 3
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 3
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: LIST
34641: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34642: LD_ADDR_VAR 0 13
34646: PUSH
34647: LD_INT 3
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 3
34659: PUSH
34660: LD_INT 3
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: LD_INT 3
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: LIST
34681: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34682: LD_ADDR_VAR 0 14
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: LD_INT 3
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: LD_INT 3
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: PUSH
34711: LD_INT 2
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34723: LD_ADDR_VAR 0 15
34727: PUSH
34728: LD_INT 2
34730: NEG
34731: PUSH
34732: LD_INT 1
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 3
34741: NEG
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 3
34752: NEG
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: LIST
34766: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34767: LD_ADDR_VAR 0 16
34771: PUSH
34772: LD_INT 2
34774: NEG
34775: PUSH
34776: LD_INT 3
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 3
34786: NEG
34787: PUSH
34788: LD_INT 2
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 3
34798: NEG
34799: PUSH
34800: LD_INT 3
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34813: LD_ADDR_VAR 0 17
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 3
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 3
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: LIST
34856: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34857: LD_ADDR_VAR 0 18
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 3
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 3
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: LIST
34897: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34898: LD_ADDR_VAR 0 19
34902: PUSH
34903: LD_INT 3
34905: PUSH
34906: LD_INT 2
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 3
34915: PUSH
34916: LD_INT 3
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 2
34925: PUSH
34926: LD_INT 3
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34938: LD_ADDR_VAR 0 20
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: LD_INT 3
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 3
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 1
34965: NEG
34966: PUSH
34967: LD_INT 2
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: LIST
34978: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34979: LD_ADDR_VAR 0 21
34983: PUSH
34984: LD_INT 2
34986: NEG
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 3
34997: NEG
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 3
35008: NEG
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: LIST
35022: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35023: LD_ADDR_VAR 0 22
35027: PUSH
35028: LD_INT 2
35030: NEG
35031: PUSH
35032: LD_INT 3
35034: NEG
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 3
35042: NEG
35043: PUSH
35044: LD_INT 2
35046: NEG
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 3
35054: NEG
35055: PUSH
35056: LD_INT 3
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: LIST
35068: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35069: LD_ADDR_VAR 0 23
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: LD_INT 3
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: LD_INT 4
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: LD_INT 3
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: LIST
35112: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35113: LD_ADDR_VAR 0 24
35117: PUSH
35118: LD_INT 3
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 3
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 4
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: LIST
35153: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35154: LD_ADDR_VAR 0 25
35158: PUSH
35159: LD_INT 3
35161: PUSH
35162: LD_INT 3
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 4
35171: PUSH
35172: LD_INT 3
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 3
35181: PUSH
35182: LD_INT 4
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35194: LD_ADDR_VAR 0 26
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: LD_INT 3
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: LD_INT 4
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: LD_INT 3
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: LIST
35234: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35235: LD_ADDR_VAR 0 27
35239: PUSH
35240: LD_INT 3
35242: NEG
35243: PUSH
35244: LD_INT 0
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 3
35253: NEG
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 4
35264: NEG
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35279: LD_ADDR_VAR 0 28
35283: PUSH
35284: LD_INT 3
35286: NEG
35287: PUSH
35288: LD_INT 3
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 3
35298: NEG
35299: PUSH
35300: LD_INT 4
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 4
35310: NEG
35311: PUSH
35312: LD_INT 3
35314: NEG
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35325: LD_ADDR_VAR 0 29
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: LD_INT 3
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: LD_INT 3
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: LD_INT 2
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: LD_INT 4
35370: NEG
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: LD_INT 4
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: LD_INT 3
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 1
35400: NEG
35401: PUSH
35402: LD_INT 5
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: LD_INT 5
35415: NEG
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: LD_INT 4
35426: NEG
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: LD_INT 6
35438: NEG
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: LD_INT 6
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: LD_INT 5
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35480: LD_ADDR_VAR 0 30
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 3
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 3
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 3
35518: PUSH
35519: LD_INT 1
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 4
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 4
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 4
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 5
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 5
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 5
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 6
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 6
35601: PUSH
35602: LD_INT 1
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35623: LD_ADDR_VAR 0 31
35627: PUSH
35628: LD_INT 3
35630: PUSH
35631: LD_INT 2
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 3
35640: PUSH
35641: LD_INT 3
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: LD_INT 3
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 4
35660: PUSH
35661: LD_INT 3
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 4
35670: PUSH
35671: LD_INT 4
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 3
35680: PUSH
35681: LD_INT 4
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 5
35690: PUSH
35691: LD_INT 4
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 5
35700: PUSH
35701: LD_INT 5
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 4
35710: PUSH
35711: LD_INT 5
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 6
35720: PUSH
35721: LD_INT 5
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 6
35730: PUSH
35731: LD_INT 6
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 5
35740: PUSH
35741: LD_INT 6
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35762: LD_ADDR_VAR 0 32
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: LD_INT 3
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: LD_INT 3
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: LD_INT 2
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: LD_INT 4
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 4
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: LD_INT 3
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: LD_INT 5
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 0
35841: PUSH
35842: LD_INT 5
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: LD_INT 4
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: LD_INT 6
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: LD_INT 6
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: LD_INT 5
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35905: LD_ADDR_VAR 0 33
35909: PUSH
35910: LD_INT 2
35912: NEG
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 3
35923: NEG
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 3
35934: NEG
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 3
35946: NEG
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 4
35957: NEG
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 4
35968: NEG
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 4
35980: NEG
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 5
35991: NEG
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 5
36002: NEG
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 5
36014: NEG
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 6
36025: NEG
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 6
36036: NEG
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36060: LD_ADDR_VAR 0 34
36064: PUSH
36065: LD_INT 2
36067: NEG
36068: PUSH
36069: LD_INT 3
36071: NEG
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 3
36079: NEG
36080: PUSH
36081: LD_INT 2
36083: NEG
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 3
36091: NEG
36092: PUSH
36093: LD_INT 3
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 3
36103: NEG
36104: PUSH
36105: LD_INT 4
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 4
36115: NEG
36116: PUSH
36117: LD_INT 3
36119: NEG
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 4
36127: NEG
36128: PUSH
36129: LD_INT 4
36131: NEG
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 4
36139: NEG
36140: PUSH
36141: LD_INT 5
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 5
36151: NEG
36152: PUSH
36153: LD_INT 4
36155: NEG
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 5
36163: NEG
36164: PUSH
36165: LD_INT 5
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 5
36175: NEG
36176: PUSH
36177: LD_INT 6
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 6
36187: NEG
36188: PUSH
36189: LD_INT 5
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 6
36199: NEG
36200: PUSH
36201: LD_INT 6
36203: NEG
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36223: LD_ADDR_VAR 0 41
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: LD_INT 2
36233: NEG
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 1
36241: NEG
36242: PUSH
36243: LD_INT 3
36245: NEG
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: LD_INT 2
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: LIST
36266: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36267: LD_ADDR_VAR 0 42
36271: PUSH
36272: LD_INT 2
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 2
36284: PUSH
36285: LD_INT 1
36287: NEG
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 3
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36308: LD_ADDR_VAR 0 43
36312: PUSH
36313: LD_INT 2
36315: PUSH
36316: LD_INT 2
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: LD_INT 2
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 2
36335: PUSH
36336: LD_INT 3
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: LIST
36347: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36348: LD_ADDR_VAR 0 44
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 1
36365: PUSH
36366: LD_INT 3
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: LD_INT 2
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: LIST
36388: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36389: LD_ADDR_VAR 0 45
36393: PUSH
36394: LD_INT 2
36396: NEG
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 2
36407: NEG
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 3
36418: NEG
36419: PUSH
36420: LD_INT 1
36422: NEG
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: LIST
36432: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36433: LD_ADDR_VAR 0 46
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 2
36452: NEG
36453: PUSH
36454: LD_INT 3
36456: NEG
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 3
36464: NEG
36465: PUSH
36466: LD_INT 2
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36479: LD_ADDR_VAR 0 47
36483: PUSH
36484: LD_INT 2
36486: NEG
36487: PUSH
36488: LD_INT 3
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 1
36498: NEG
36499: PUSH
36500: LD_INT 3
36502: NEG
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36512: LD_ADDR_VAR 0 48
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 2
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36543: LD_ADDR_VAR 0 49
36547: PUSH
36548: LD_INT 3
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 3
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36572: LD_ADDR_VAR 0 50
36576: PUSH
36577: LD_INT 2
36579: PUSH
36580: LD_INT 3
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: LD_INT 3
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36601: LD_ADDR_VAR 0 51
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: LD_INT 2
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 2
36619: NEG
36620: PUSH
36621: LD_INT 1
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36632: LD_ADDR_VAR 0 52
36636: PUSH
36637: LD_INT 3
36639: NEG
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 3
36651: NEG
36652: PUSH
36653: LD_INT 2
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36665: LD_ADDR_VAR 0 53
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: LD_INT 3
36676: NEG
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: LD_INT 3
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: LD_INT 2
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: LIST
36708: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36709: LD_ADDR_VAR 0 54
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 3
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 3
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: LIST
36749: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36750: LD_ADDR_VAR 0 55
36754: PUSH
36755: LD_INT 3
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 3
36767: PUSH
36768: LD_INT 3
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 2
36777: PUSH
36778: LD_INT 3
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: LIST
36789: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36790: LD_ADDR_VAR 0 56
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 3
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 3
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: NEG
36818: PUSH
36819: LD_INT 2
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36831: LD_ADDR_VAR 0 57
36835: PUSH
36836: LD_INT 2
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 3
36849: NEG
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 3
36860: NEG
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36875: LD_ADDR_VAR 0 58
36879: PUSH
36880: LD_INT 2
36882: NEG
36883: PUSH
36884: LD_INT 3
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 3
36894: NEG
36895: PUSH
36896: LD_INT 2
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 3
36906: NEG
36907: PUSH
36908: LD_INT 3
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36921: LD_ADDR_VAR 0 59
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: LD_INT 2
36943: NEG
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: LD_INT 1
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: LIST
36964: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36965: LD_ADDR_VAR 0 60
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37006: LD_ADDR_VAR 0 61
37010: PUSH
37011: LD_INT 2
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 2
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: LD_INT 2
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: LIST
37045: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37046: LD_ADDR_VAR 0 62
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: LIST
37086: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37087: LD_ADDR_VAR 0 63
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: NEG
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 2
37116: NEG
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37131: LD_ADDR_VAR 0 64
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: LD_INT 2
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 2
37150: NEG
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: ST_TO_ADDR
// end ; 2 :
37177: GO 40443
37179: LD_INT 2
37181: DOUBLE
37182: EQUAL
37183: IFTRUE 37187
37185: GO 40442
37187: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37188: LD_ADDR_VAR 0 29
37192: PUSH
37193: LD_INT 4
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 4
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 5
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 5
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 4
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 3
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 3
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 3
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 5
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 3
37288: PUSH
37289: LD_INT 3
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 3
37298: PUSH
37299: LD_INT 2
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 4
37308: PUSH
37309: LD_INT 3
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 4
37318: PUSH
37319: LD_INT 4
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 3
37328: PUSH
37329: LD_INT 4
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 2
37338: PUSH
37339: LD_INT 3
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: LD_INT 2
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 4
37358: PUSH
37359: LD_INT 2
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 2
37368: PUSH
37369: LD_INT 4
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 4
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 3
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 4
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: LD_INT 5
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 5
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: LD_INT 4
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: LD_INT 3
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: LD_INT 5
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 2
37460: NEG
37461: PUSH
37462: LD_INT 3
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 3
37471: NEG
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 3
37482: NEG
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: NEG
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: NEG
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 3
37516: NEG
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 4
37527: NEG
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 4
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 4
37550: NEG
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 4
37573: NEG
37574: PUSH
37575: LD_INT 4
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 4
37585: NEG
37586: PUSH
37587: LD_INT 5
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 3
37597: NEG
37598: PUSH
37599: LD_INT 4
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 3
37609: NEG
37610: PUSH
37611: LD_INT 3
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 4
37621: NEG
37622: PUSH
37623: LD_INT 3
37625: NEG
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 5
37633: NEG
37634: PUSH
37635: LD_INT 4
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 5
37645: NEG
37646: PUSH
37647: LD_INT 5
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 3
37657: NEG
37658: PUSH
37659: LD_INT 5
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 5
37669: NEG
37670: PUSH
37671: LD_INT 3
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37726: LD_ADDR_VAR 0 30
37730: PUSH
37731: LD_INT 4
37733: PUSH
37734: LD_INT 4
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 4
37743: PUSH
37744: LD_INT 3
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 5
37753: PUSH
37754: LD_INT 4
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 5
37763: PUSH
37764: LD_INT 5
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 4
37773: PUSH
37774: LD_INT 5
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 3
37783: PUSH
37784: LD_INT 4
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 3
37793: PUSH
37794: LD_INT 3
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 5
37803: PUSH
37804: LD_INT 3
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 3
37813: PUSH
37814: LD_INT 5
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: LD_INT 3
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: LD_INT 2
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: LD_INT 3
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 1
37853: PUSH
37854: LD_INT 4
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: LD_INT 4
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: LD_INT 3
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: LD_INT 2
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: LD_INT 4
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 4
37916: NEG
37917: PUSH
37918: LD_INT 0
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 4
37927: NEG
37928: PUSH
37929: LD_INT 1
37931: NEG
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 3
37939: NEG
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 3
37950: NEG
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 4
37961: NEG
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 5
37972: NEG
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 5
37983: NEG
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 5
37995: NEG
37996: PUSH
37997: LD_INT 2
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 3
38007: NEG
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 3
38018: NEG
38019: PUSH
38020: LD_INT 3
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 3
38030: NEG
38031: PUSH
38032: LD_INT 4
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: LD_INT 3
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: NEG
38055: PUSH
38056: LD_INT 2
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 3
38066: NEG
38067: PUSH
38068: LD_INT 2
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 4
38078: NEG
38079: PUSH
38080: LD_INT 3
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 4
38090: NEG
38091: PUSH
38092: LD_INT 4
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PUSH
38104: LD_INT 4
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 4
38114: NEG
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: LD_INT 4
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: LD_INT 5
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: LD_INT 4
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 3
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: LD_INT 3
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: LD_INT 4
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: PUSH
38195: LD_INT 5
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 2
38205: PUSH
38206: LD_INT 3
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: NEG
38217: PUSH
38218: LD_INT 5
38220: NEG
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38273: LD_ADDR_VAR 0 31
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 4
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: LD_INT 3
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 4
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 5
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: LD_INT 5
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: LD_INT 4
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 3
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 2
38352: PUSH
38353: LD_INT 5
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 2
38362: NEG
38363: PUSH
38364: LD_INT 3
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 3
38373: NEG
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 3
38384: NEG
38385: PUSH
38386: LD_INT 1
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: NEG
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 3
38418: NEG
38419: PUSH
38420: LD_INT 1
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 4
38429: NEG
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 4
38440: NEG
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 4
38452: NEG
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: LD_INT 2
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 4
38475: NEG
38476: PUSH
38477: LD_INT 4
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 4
38487: NEG
38488: PUSH
38489: LD_INT 5
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 3
38499: NEG
38500: PUSH
38501: LD_INT 4
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 3
38511: NEG
38512: PUSH
38513: LD_INT 3
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 4
38523: NEG
38524: PUSH
38525: LD_INT 3
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 5
38535: NEG
38536: PUSH
38537: LD_INT 4
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 5
38547: NEG
38548: PUSH
38549: LD_INT 5
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 3
38559: NEG
38560: PUSH
38561: LD_INT 5
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 5
38571: NEG
38572: PUSH
38573: LD_INT 3
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: LD_INT 3
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 4
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 3
38608: NEG
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: LD_INT 2
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: LD_INT 2
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: LD_INT 3
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: LD_INT 4
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 2
38662: PUSH
38663: LD_INT 2
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: NEG
38674: PUSH
38675: LD_INT 4
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 4
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 4
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 5
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 5
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 4
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 3
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 3
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 3
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 5
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38823: LD_ADDR_VAR 0 32
38827: PUSH
38828: LD_INT 4
38830: NEG
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 4
38841: NEG
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 3
38853: NEG
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 3
38864: NEG
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 4
38875: NEG
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 5
38886: NEG
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 5
38897: NEG
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 5
38909: NEG
38910: PUSH
38911: LD_INT 2
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: NEG
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 3
38932: NEG
38933: PUSH
38934: LD_INT 3
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 3
38944: NEG
38945: PUSH
38946: LD_INT 4
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 2
38956: NEG
38957: PUSH
38958: LD_INT 3
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: LD_INT 2
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 3
38980: NEG
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 4
38992: NEG
38993: PUSH
38994: LD_INT 3
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 4
39004: NEG
39005: PUSH
39006: LD_INT 4
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: NEG
39017: PUSH
39018: LD_INT 4
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 4
39028: NEG
39029: PUSH
39030: LD_INT 2
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: LD_INT 4
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: LD_INT 5
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: LD_INT 4
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: LD_INT 3
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: LD_INT 3
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: LD_INT 4
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: LD_INT 5
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 2
39119: PUSH
39120: LD_INT 3
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 2
39130: NEG
39131: PUSH
39132: LD_INT 5
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 3
39152: PUSH
39153: LD_INT 1
39155: NEG
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 4
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 4
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 3
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: LD_INT 2
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 4
39225: PUSH
39226: LD_INT 2
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 4
39235: PUSH
39236: LD_INT 4
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 4
39245: PUSH
39246: LD_INT 3
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 5
39255: PUSH
39256: LD_INT 4
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 5
39265: PUSH
39266: LD_INT 5
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 4
39275: PUSH
39276: LD_INT 5
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 3
39285: PUSH
39286: LD_INT 4
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 3
39295: PUSH
39296: LD_INT 3
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 5
39305: PUSH
39306: LD_INT 3
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 3
39315: PUSH
39316: LD_INT 5
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39370: LD_ADDR_VAR 0 33
39374: PUSH
39375: LD_INT 4
39377: NEG
39378: PUSH
39379: LD_INT 4
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 4
39389: NEG
39390: PUSH
39391: LD_INT 5
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 3
39401: NEG
39402: PUSH
39403: LD_INT 4
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 3
39413: NEG
39414: PUSH
39415: LD_INT 3
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 4
39425: NEG
39426: PUSH
39427: LD_INT 3
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 5
39437: NEG
39438: PUSH
39439: LD_INT 4
39441: NEG
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 5
39449: NEG
39450: PUSH
39451: LD_INT 5
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 3
39461: NEG
39462: PUSH
39463: LD_INT 5
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 5
39473: NEG
39474: PUSH
39475: LD_INT 3
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: LD_INT 3
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: LD_INT 4
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: LD_INT 3
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: LD_INT 2
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: LD_INT 2
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: LD_INT 3
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: LD_INT 4
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 2
39564: PUSH
39565: LD_INT 2
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 2
39575: NEG
39576: PUSH
39577: LD_INT 4
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 4
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 4
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 5
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 5
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 4
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 3
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 3
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 5
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 3
39680: PUSH
39681: LD_INT 3
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 3
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 4
39700: PUSH
39701: LD_INT 3
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 4
39710: PUSH
39711: LD_INT 4
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 3
39720: PUSH
39721: LD_INT 4
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: LD_INT 3
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 4
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 2
39760: PUSH
39761: LD_INT 4
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 4
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: LD_INT 3
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: LD_INT 4
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: LD_INT 5
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 5
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 4
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: LD_INT 3
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: LD_INT 5
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: LD_INT 3
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39908: LD_ADDR_VAR 0 34
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: LD_INT 4
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: LD_INT 5
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: LD_INT 4
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: LD_INT 3
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 3
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: LD_INT 4
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 5
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: LD_INT 3
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: NEG
40006: PUSH
40007: LD_INT 5
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 3
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 3
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 4
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 4
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 3
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 4
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 4
40110: PUSH
40111: LD_INT 4
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 4
40120: PUSH
40121: LD_INT 3
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 5
40130: PUSH
40131: LD_INT 4
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 5
40140: PUSH
40141: LD_INT 5
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 4
40150: PUSH
40151: LD_INT 5
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 3
40160: PUSH
40161: LD_INT 4
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 3
40170: PUSH
40171: LD_INT 3
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 5
40180: PUSH
40181: LD_INT 3
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 3
40190: PUSH
40191: LD_INT 5
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 3
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: LD_INT 4
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 4
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 3
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: LD_INT 4
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 4
40293: NEG
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 4
40304: NEG
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 3
40316: NEG
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 3
40327: NEG
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 4
40338: NEG
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 5
40349: NEG
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 5
40360: NEG
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 5
40372: NEG
40373: PUSH
40374: LD_INT 2
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 3
40384: NEG
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: ST_TO_ADDR
// end ; end ;
40440: GO 40443
40442: POP
// case btype of b_depot , b_warehouse :
40443: LD_VAR 0 1
40447: PUSH
40448: LD_INT 0
40450: DOUBLE
40451: EQUAL
40452: IFTRUE 40462
40454: LD_INT 1
40456: DOUBLE
40457: EQUAL
40458: IFTRUE 40462
40460: GO 40663
40462: POP
// case nation of nation_american :
40463: LD_VAR 0 5
40467: PUSH
40468: LD_INT 1
40470: DOUBLE
40471: EQUAL
40472: IFTRUE 40476
40474: GO 40532
40476: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40477: LD_ADDR_VAR 0 9
40481: PUSH
40482: LD_VAR 0 11
40486: PUSH
40487: LD_VAR 0 12
40491: PUSH
40492: LD_VAR 0 13
40496: PUSH
40497: LD_VAR 0 14
40501: PUSH
40502: LD_VAR 0 15
40506: PUSH
40507: LD_VAR 0 16
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: PUSH
40520: LD_VAR 0 4
40524: PUSH
40525: LD_INT 1
40527: PLUS
40528: ARRAY
40529: ST_TO_ADDR
40530: GO 40661
40532: LD_INT 2
40534: DOUBLE
40535: EQUAL
40536: IFTRUE 40540
40538: GO 40596
40540: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40541: LD_ADDR_VAR 0 9
40545: PUSH
40546: LD_VAR 0 17
40550: PUSH
40551: LD_VAR 0 18
40555: PUSH
40556: LD_VAR 0 19
40560: PUSH
40561: LD_VAR 0 20
40565: PUSH
40566: LD_VAR 0 21
40570: PUSH
40571: LD_VAR 0 22
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: PUSH
40584: LD_VAR 0 4
40588: PUSH
40589: LD_INT 1
40591: PLUS
40592: ARRAY
40593: ST_TO_ADDR
40594: GO 40661
40596: LD_INT 3
40598: DOUBLE
40599: EQUAL
40600: IFTRUE 40604
40602: GO 40660
40604: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40605: LD_ADDR_VAR 0 9
40609: PUSH
40610: LD_VAR 0 23
40614: PUSH
40615: LD_VAR 0 24
40619: PUSH
40620: LD_VAR 0 25
40624: PUSH
40625: LD_VAR 0 26
40629: PUSH
40630: LD_VAR 0 27
40634: PUSH
40635: LD_VAR 0 28
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: PUSH
40648: LD_VAR 0 4
40652: PUSH
40653: LD_INT 1
40655: PLUS
40656: ARRAY
40657: ST_TO_ADDR
40658: GO 40661
40660: POP
40661: GO 41216
40663: LD_INT 2
40665: DOUBLE
40666: EQUAL
40667: IFTRUE 40677
40669: LD_INT 3
40671: DOUBLE
40672: EQUAL
40673: IFTRUE 40677
40675: GO 40733
40677: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40678: LD_ADDR_VAR 0 9
40682: PUSH
40683: LD_VAR 0 29
40687: PUSH
40688: LD_VAR 0 30
40692: PUSH
40693: LD_VAR 0 31
40697: PUSH
40698: LD_VAR 0 32
40702: PUSH
40703: LD_VAR 0 33
40707: PUSH
40708: LD_VAR 0 34
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: PUSH
40721: LD_VAR 0 4
40725: PUSH
40726: LD_INT 1
40728: PLUS
40729: ARRAY
40730: ST_TO_ADDR
40731: GO 41216
40733: LD_INT 16
40735: DOUBLE
40736: EQUAL
40737: IFTRUE 40795
40739: LD_INT 17
40741: DOUBLE
40742: EQUAL
40743: IFTRUE 40795
40745: LD_INT 18
40747: DOUBLE
40748: EQUAL
40749: IFTRUE 40795
40751: LD_INT 19
40753: DOUBLE
40754: EQUAL
40755: IFTRUE 40795
40757: LD_INT 22
40759: DOUBLE
40760: EQUAL
40761: IFTRUE 40795
40763: LD_INT 20
40765: DOUBLE
40766: EQUAL
40767: IFTRUE 40795
40769: LD_INT 21
40771: DOUBLE
40772: EQUAL
40773: IFTRUE 40795
40775: LD_INT 23
40777: DOUBLE
40778: EQUAL
40779: IFTRUE 40795
40781: LD_INT 24
40783: DOUBLE
40784: EQUAL
40785: IFTRUE 40795
40787: LD_INT 25
40789: DOUBLE
40790: EQUAL
40791: IFTRUE 40795
40793: GO 40851
40795: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40796: LD_ADDR_VAR 0 9
40800: PUSH
40801: LD_VAR 0 35
40805: PUSH
40806: LD_VAR 0 36
40810: PUSH
40811: LD_VAR 0 37
40815: PUSH
40816: LD_VAR 0 38
40820: PUSH
40821: LD_VAR 0 39
40825: PUSH
40826: LD_VAR 0 40
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: PUSH
40839: LD_VAR 0 4
40843: PUSH
40844: LD_INT 1
40846: PLUS
40847: ARRAY
40848: ST_TO_ADDR
40849: GO 41216
40851: LD_INT 6
40853: DOUBLE
40854: EQUAL
40855: IFTRUE 40907
40857: LD_INT 7
40859: DOUBLE
40860: EQUAL
40861: IFTRUE 40907
40863: LD_INT 8
40865: DOUBLE
40866: EQUAL
40867: IFTRUE 40907
40869: LD_INT 13
40871: DOUBLE
40872: EQUAL
40873: IFTRUE 40907
40875: LD_INT 12
40877: DOUBLE
40878: EQUAL
40879: IFTRUE 40907
40881: LD_INT 15
40883: DOUBLE
40884: EQUAL
40885: IFTRUE 40907
40887: LD_INT 11
40889: DOUBLE
40890: EQUAL
40891: IFTRUE 40907
40893: LD_INT 14
40895: DOUBLE
40896: EQUAL
40897: IFTRUE 40907
40899: LD_INT 10
40901: DOUBLE
40902: EQUAL
40903: IFTRUE 40907
40905: GO 40963
40907: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40908: LD_ADDR_VAR 0 9
40912: PUSH
40913: LD_VAR 0 41
40917: PUSH
40918: LD_VAR 0 42
40922: PUSH
40923: LD_VAR 0 43
40927: PUSH
40928: LD_VAR 0 44
40932: PUSH
40933: LD_VAR 0 45
40937: PUSH
40938: LD_VAR 0 46
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: PUSH
40951: LD_VAR 0 4
40955: PUSH
40956: LD_INT 1
40958: PLUS
40959: ARRAY
40960: ST_TO_ADDR
40961: GO 41216
40963: LD_INT 36
40965: DOUBLE
40966: EQUAL
40967: IFTRUE 40971
40969: GO 41027
40971: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40972: LD_ADDR_VAR 0 9
40976: PUSH
40977: LD_VAR 0 47
40981: PUSH
40982: LD_VAR 0 48
40986: PUSH
40987: LD_VAR 0 49
40991: PUSH
40992: LD_VAR 0 50
40996: PUSH
40997: LD_VAR 0 51
41001: PUSH
41002: LD_VAR 0 52
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: PUSH
41015: LD_VAR 0 4
41019: PUSH
41020: LD_INT 1
41022: PLUS
41023: ARRAY
41024: ST_TO_ADDR
41025: GO 41216
41027: LD_INT 4
41029: DOUBLE
41030: EQUAL
41031: IFTRUE 41053
41033: LD_INT 5
41035: DOUBLE
41036: EQUAL
41037: IFTRUE 41053
41039: LD_INT 34
41041: DOUBLE
41042: EQUAL
41043: IFTRUE 41053
41045: LD_INT 37
41047: DOUBLE
41048: EQUAL
41049: IFTRUE 41053
41051: GO 41109
41053: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41054: LD_ADDR_VAR 0 9
41058: PUSH
41059: LD_VAR 0 53
41063: PUSH
41064: LD_VAR 0 54
41068: PUSH
41069: LD_VAR 0 55
41073: PUSH
41074: LD_VAR 0 56
41078: PUSH
41079: LD_VAR 0 57
41083: PUSH
41084: LD_VAR 0 58
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: PUSH
41097: LD_VAR 0 4
41101: PUSH
41102: LD_INT 1
41104: PLUS
41105: ARRAY
41106: ST_TO_ADDR
41107: GO 41216
41109: LD_INT 31
41111: DOUBLE
41112: EQUAL
41113: IFTRUE 41159
41115: LD_INT 32
41117: DOUBLE
41118: EQUAL
41119: IFTRUE 41159
41121: LD_INT 33
41123: DOUBLE
41124: EQUAL
41125: IFTRUE 41159
41127: LD_INT 27
41129: DOUBLE
41130: EQUAL
41131: IFTRUE 41159
41133: LD_INT 26
41135: DOUBLE
41136: EQUAL
41137: IFTRUE 41159
41139: LD_INT 28
41141: DOUBLE
41142: EQUAL
41143: IFTRUE 41159
41145: LD_INT 29
41147: DOUBLE
41148: EQUAL
41149: IFTRUE 41159
41151: LD_INT 30
41153: DOUBLE
41154: EQUAL
41155: IFTRUE 41159
41157: GO 41215
41159: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41160: LD_ADDR_VAR 0 9
41164: PUSH
41165: LD_VAR 0 59
41169: PUSH
41170: LD_VAR 0 60
41174: PUSH
41175: LD_VAR 0 61
41179: PUSH
41180: LD_VAR 0 62
41184: PUSH
41185: LD_VAR 0 63
41189: PUSH
41190: LD_VAR 0 64
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: PUSH
41203: LD_VAR 0 4
41207: PUSH
41208: LD_INT 1
41210: PLUS
41211: ARRAY
41212: ST_TO_ADDR
41213: GO 41216
41215: POP
// temp_list2 = [ ] ;
41216: LD_ADDR_VAR 0 10
41220: PUSH
41221: EMPTY
41222: ST_TO_ADDR
// for i in temp_list do
41223: LD_ADDR_VAR 0 8
41227: PUSH
41228: LD_VAR 0 9
41232: PUSH
41233: FOR_IN
41234: IFFALSE 41286
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41236: LD_ADDR_VAR 0 10
41240: PUSH
41241: LD_VAR 0 10
41245: PUSH
41246: LD_VAR 0 8
41250: PUSH
41251: LD_INT 1
41253: ARRAY
41254: PUSH
41255: LD_VAR 0 2
41259: PLUS
41260: PUSH
41261: LD_VAR 0 8
41265: PUSH
41266: LD_INT 2
41268: ARRAY
41269: PUSH
41270: LD_VAR 0 3
41274: PLUS
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: EMPTY
41281: LIST
41282: ADD
41283: ST_TO_ADDR
41284: GO 41233
41286: POP
41287: POP
// result = temp_list2 ;
41288: LD_ADDR_VAR 0 7
41292: PUSH
41293: LD_VAR 0 10
41297: ST_TO_ADDR
// end ;
41298: LD_VAR 0 7
41302: RET
// export function EnemyInRange ( unit , dist ) ; begin
41303: LD_INT 0
41305: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41306: LD_ADDR_VAR 0 3
41310: PUSH
41311: LD_VAR 0 1
41315: PPUSH
41316: CALL_OW 255
41320: PPUSH
41321: LD_VAR 0 1
41325: PPUSH
41326: CALL_OW 250
41330: PPUSH
41331: LD_VAR 0 1
41335: PPUSH
41336: CALL_OW 251
41340: PPUSH
41341: LD_VAR 0 2
41345: PPUSH
41346: CALL 14705 0 4
41350: PUSH
41351: LD_INT 4
41353: ARRAY
41354: ST_TO_ADDR
// end ;
41355: LD_VAR 0 3
41359: RET
// export function PlayerSeeMe ( unit ) ; begin
41360: LD_INT 0
41362: PPUSH
// result := See ( your_side , unit ) ;
41363: LD_ADDR_VAR 0 2
41367: PUSH
41368: LD_OWVAR 2
41372: PPUSH
41373: LD_VAR 0 1
41377: PPUSH
41378: CALL_OW 292
41382: ST_TO_ADDR
// end ;
41383: LD_VAR 0 2
41387: RET
// export function ReverseDir ( unit ) ; begin
41388: LD_INT 0
41390: PPUSH
// if not unit then
41391: LD_VAR 0 1
41395: NOT
41396: IFFALSE 41400
// exit ;
41398: GO 41423
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41400: LD_ADDR_VAR 0 2
41404: PUSH
41405: LD_VAR 0 1
41409: PPUSH
41410: CALL_OW 254
41414: PUSH
41415: LD_INT 3
41417: PLUS
41418: PUSH
41419: LD_INT 6
41421: MOD
41422: ST_TO_ADDR
// end ;
41423: LD_VAR 0 2
41427: RET
// export function ReverseArray ( array ) ; var i ; begin
41428: LD_INT 0
41430: PPUSH
41431: PPUSH
// if not array then
41432: LD_VAR 0 1
41436: NOT
41437: IFFALSE 41441
// exit ;
41439: GO 41496
// result := [ ] ;
41441: LD_ADDR_VAR 0 2
41445: PUSH
41446: EMPTY
41447: ST_TO_ADDR
// for i := array downto 1 do
41448: LD_ADDR_VAR 0 3
41452: PUSH
41453: DOUBLE
41454: LD_VAR 0 1
41458: INC
41459: ST_TO_ADDR
41460: LD_INT 1
41462: PUSH
41463: FOR_DOWNTO
41464: IFFALSE 41494
// result := Join ( result , array [ i ] ) ;
41466: LD_ADDR_VAR 0 2
41470: PUSH
41471: LD_VAR 0 2
41475: PPUSH
41476: LD_VAR 0 1
41480: PUSH
41481: LD_VAR 0 3
41485: ARRAY
41486: PPUSH
41487: CALL 46140 0 2
41491: ST_TO_ADDR
41492: GO 41463
41494: POP
41495: POP
// end ;
41496: LD_VAR 0 2
41500: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41501: LD_INT 0
41503: PPUSH
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
// if not unit or not hexes then
41509: LD_VAR 0 1
41513: NOT
41514: PUSH
41515: LD_VAR 0 2
41519: NOT
41520: OR
41521: IFFALSE 41525
// exit ;
41523: GO 41648
// dist := 9999 ;
41525: LD_ADDR_VAR 0 5
41529: PUSH
41530: LD_INT 9999
41532: ST_TO_ADDR
// for i = 1 to hexes do
41533: LD_ADDR_VAR 0 4
41537: PUSH
41538: DOUBLE
41539: LD_INT 1
41541: DEC
41542: ST_TO_ADDR
41543: LD_VAR 0 2
41547: PUSH
41548: FOR_TO
41549: IFFALSE 41636
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41551: LD_ADDR_VAR 0 6
41555: PUSH
41556: LD_VAR 0 1
41560: PPUSH
41561: LD_VAR 0 2
41565: PUSH
41566: LD_VAR 0 4
41570: ARRAY
41571: PUSH
41572: LD_INT 1
41574: ARRAY
41575: PPUSH
41576: LD_VAR 0 2
41580: PUSH
41581: LD_VAR 0 4
41585: ARRAY
41586: PUSH
41587: LD_INT 2
41589: ARRAY
41590: PPUSH
41591: CALL_OW 297
41595: ST_TO_ADDR
// if tdist < dist then
41596: LD_VAR 0 6
41600: PUSH
41601: LD_VAR 0 5
41605: LESS
41606: IFFALSE 41634
// begin hex := hexes [ i ] ;
41608: LD_ADDR_VAR 0 8
41612: PUSH
41613: LD_VAR 0 2
41617: PUSH
41618: LD_VAR 0 4
41622: ARRAY
41623: ST_TO_ADDR
// dist := tdist ;
41624: LD_ADDR_VAR 0 5
41628: PUSH
41629: LD_VAR 0 6
41633: ST_TO_ADDR
// end ; end ;
41634: GO 41548
41636: POP
41637: POP
// result := hex ;
41638: LD_ADDR_VAR 0 3
41642: PUSH
41643: LD_VAR 0 8
41647: ST_TO_ADDR
// end ;
41648: LD_VAR 0 3
41652: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41653: LD_INT 0
41655: PPUSH
41656: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41657: LD_VAR 0 1
41661: NOT
41662: PUSH
41663: LD_VAR 0 1
41667: PUSH
41668: LD_INT 21
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 23
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PPUSH
41692: CALL_OW 69
41696: IN
41697: NOT
41698: OR
41699: IFFALSE 41703
// exit ;
41701: GO 41750
// for i = 1 to 3 do
41703: LD_ADDR_VAR 0 3
41707: PUSH
41708: DOUBLE
41709: LD_INT 1
41711: DEC
41712: ST_TO_ADDR
41713: LD_INT 3
41715: PUSH
41716: FOR_TO
41717: IFFALSE 41748
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41719: LD_VAR 0 1
41723: PPUSH
41724: CALL_OW 250
41728: PPUSH
41729: LD_VAR 0 1
41733: PPUSH
41734: CALL_OW 251
41738: PPUSH
41739: LD_INT 1
41741: PPUSH
41742: CALL_OW 453
41746: GO 41716
41748: POP
41749: POP
// end ;
41750: LD_VAR 0 2
41754: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41755: LD_INT 0
41757: PPUSH
41758: PPUSH
41759: PPUSH
41760: PPUSH
41761: PPUSH
41762: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41763: LD_VAR 0 1
41767: NOT
41768: PUSH
41769: LD_VAR 0 2
41773: NOT
41774: OR
41775: PUSH
41776: LD_VAR 0 1
41780: PPUSH
41781: CALL_OW 314
41785: OR
41786: IFFALSE 41790
// exit ;
41788: GO 42257
// if GetLives ( i ) < 250 then
41790: LD_VAR 0 4
41794: PPUSH
41795: CALL_OW 256
41799: PUSH
41800: LD_INT 250
41802: LESS
41803: IFFALSE 41816
// begin ComAutodestruct ( i ) ;
41805: LD_VAR 0 4
41809: PPUSH
41810: CALL 41653 0 1
// exit ;
41814: GO 42257
// end ; x := GetX ( enemy_unit ) ;
41816: LD_ADDR_VAR 0 7
41820: PUSH
41821: LD_VAR 0 2
41825: PPUSH
41826: CALL_OW 250
41830: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41831: LD_ADDR_VAR 0 8
41835: PUSH
41836: LD_VAR 0 2
41840: PPUSH
41841: CALL_OW 251
41845: ST_TO_ADDR
// if not x or not y then
41846: LD_VAR 0 7
41850: NOT
41851: PUSH
41852: LD_VAR 0 8
41856: NOT
41857: OR
41858: IFFALSE 41862
// exit ;
41860: GO 42257
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41862: LD_ADDR_VAR 0 6
41866: PUSH
41867: LD_VAR 0 7
41871: PPUSH
41872: LD_INT 0
41874: PPUSH
41875: LD_INT 4
41877: PPUSH
41878: CALL_OW 272
41882: PUSH
41883: LD_VAR 0 8
41887: PPUSH
41888: LD_INT 0
41890: PPUSH
41891: LD_INT 4
41893: PPUSH
41894: CALL_OW 273
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_VAR 0 7
41907: PPUSH
41908: LD_INT 1
41910: PPUSH
41911: LD_INT 4
41913: PPUSH
41914: CALL_OW 272
41918: PUSH
41919: LD_VAR 0 8
41923: PPUSH
41924: LD_INT 1
41926: PPUSH
41927: LD_INT 4
41929: PPUSH
41930: CALL_OW 273
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_VAR 0 7
41943: PPUSH
41944: LD_INT 2
41946: PPUSH
41947: LD_INT 4
41949: PPUSH
41950: CALL_OW 272
41954: PUSH
41955: LD_VAR 0 8
41959: PPUSH
41960: LD_INT 2
41962: PPUSH
41963: LD_INT 4
41965: PPUSH
41966: CALL_OW 273
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_VAR 0 7
41979: PPUSH
41980: LD_INT 3
41982: PPUSH
41983: LD_INT 4
41985: PPUSH
41986: CALL_OW 272
41990: PUSH
41991: LD_VAR 0 8
41995: PPUSH
41996: LD_INT 3
41998: PPUSH
41999: LD_INT 4
42001: PPUSH
42002: CALL_OW 273
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_VAR 0 7
42015: PPUSH
42016: LD_INT 4
42018: PPUSH
42019: LD_INT 4
42021: PPUSH
42022: CALL_OW 272
42026: PUSH
42027: LD_VAR 0 8
42031: PPUSH
42032: LD_INT 4
42034: PPUSH
42035: LD_INT 4
42037: PPUSH
42038: CALL_OW 273
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_VAR 0 7
42051: PPUSH
42052: LD_INT 5
42054: PPUSH
42055: LD_INT 4
42057: PPUSH
42058: CALL_OW 272
42062: PUSH
42063: LD_VAR 0 8
42067: PPUSH
42068: LD_INT 5
42070: PPUSH
42071: LD_INT 4
42073: PPUSH
42074: CALL_OW 273
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: ST_TO_ADDR
// for i = tmp downto 1 do
42091: LD_ADDR_VAR 0 4
42095: PUSH
42096: DOUBLE
42097: LD_VAR 0 6
42101: INC
42102: ST_TO_ADDR
42103: LD_INT 1
42105: PUSH
42106: FOR_DOWNTO
42107: IFFALSE 42208
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42109: LD_VAR 0 6
42113: PUSH
42114: LD_VAR 0 4
42118: ARRAY
42119: PUSH
42120: LD_INT 1
42122: ARRAY
42123: PPUSH
42124: LD_VAR 0 6
42128: PUSH
42129: LD_VAR 0 4
42133: ARRAY
42134: PUSH
42135: LD_INT 2
42137: ARRAY
42138: PPUSH
42139: CALL_OW 488
42143: NOT
42144: PUSH
42145: LD_VAR 0 6
42149: PUSH
42150: LD_VAR 0 4
42154: ARRAY
42155: PUSH
42156: LD_INT 1
42158: ARRAY
42159: PPUSH
42160: LD_VAR 0 6
42164: PUSH
42165: LD_VAR 0 4
42169: ARRAY
42170: PUSH
42171: LD_INT 2
42173: ARRAY
42174: PPUSH
42175: CALL_OW 428
42179: PUSH
42180: LD_INT 0
42182: NONEQUAL
42183: OR
42184: IFFALSE 42206
// tmp := Delete ( tmp , i ) ;
42186: LD_ADDR_VAR 0 6
42190: PUSH
42191: LD_VAR 0 6
42195: PPUSH
42196: LD_VAR 0 4
42200: PPUSH
42201: CALL_OW 3
42205: ST_TO_ADDR
42206: GO 42106
42208: POP
42209: POP
// j := GetClosestHex ( unit , tmp ) ;
42210: LD_ADDR_VAR 0 5
42214: PUSH
42215: LD_VAR 0 1
42219: PPUSH
42220: LD_VAR 0 6
42224: PPUSH
42225: CALL 41501 0 2
42229: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42230: LD_VAR 0 1
42234: PPUSH
42235: LD_VAR 0 5
42239: PUSH
42240: LD_INT 1
42242: ARRAY
42243: PPUSH
42244: LD_VAR 0 5
42248: PUSH
42249: LD_INT 2
42251: ARRAY
42252: PPUSH
42253: CALL_OW 111
// end ;
42257: LD_VAR 0 3
42261: RET
// export function PrepareApemanSoldier ( ) ; begin
42262: LD_INT 0
42264: PPUSH
// uc_nation := 0 ;
42265: LD_ADDR_OWVAR 21
42269: PUSH
42270: LD_INT 0
42272: ST_TO_ADDR
// hc_sex := sex_male ;
42273: LD_ADDR_OWVAR 27
42277: PUSH
42278: LD_INT 1
42280: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42281: LD_ADDR_OWVAR 28
42285: PUSH
42286: LD_INT 15
42288: ST_TO_ADDR
// hc_gallery :=  ;
42289: LD_ADDR_OWVAR 33
42293: PUSH
42294: LD_STRING 
42296: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42297: LD_ADDR_OWVAR 31
42301: PUSH
42302: LD_INT 0
42304: PPUSH
42305: LD_INT 3
42307: PPUSH
42308: CALL_OW 12
42312: PUSH
42313: LD_INT 0
42315: PPUSH
42316: LD_INT 3
42318: PPUSH
42319: CALL_OW 12
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: ST_TO_ADDR
// end ;
42336: LD_VAR 0 1
42340: RET
// export function PrepareApemanEngineer ( ) ; begin
42341: LD_INT 0
42343: PPUSH
// uc_nation := 0 ;
42344: LD_ADDR_OWVAR 21
42348: PUSH
42349: LD_INT 0
42351: ST_TO_ADDR
// hc_sex := sex_male ;
42352: LD_ADDR_OWVAR 27
42356: PUSH
42357: LD_INT 1
42359: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42360: LD_ADDR_OWVAR 28
42364: PUSH
42365: LD_INT 16
42367: ST_TO_ADDR
// hc_gallery :=  ;
42368: LD_ADDR_OWVAR 33
42372: PUSH
42373: LD_STRING 
42375: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42376: LD_ADDR_OWVAR 31
42380: PUSH
42381: LD_INT 0
42383: PPUSH
42384: LD_INT 3
42386: PPUSH
42387: CALL_OW 12
42391: PUSH
42392: LD_INT 0
42394: PPUSH
42395: LD_INT 3
42397: PPUSH
42398: CALL_OW 12
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: ST_TO_ADDR
// end ;
42415: LD_VAR 0 1
42419: RET
// export function PrepareApeman ( agressivity ) ; begin
42420: LD_INT 0
42422: PPUSH
// uc_side := 0 ;
42423: LD_ADDR_OWVAR 20
42427: PUSH
42428: LD_INT 0
42430: ST_TO_ADDR
// uc_nation := 0 ;
42431: LD_ADDR_OWVAR 21
42435: PUSH
42436: LD_INT 0
42438: ST_TO_ADDR
// hc_sex := sex_male ;
42439: LD_ADDR_OWVAR 27
42443: PUSH
42444: LD_INT 1
42446: ST_TO_ADDR
// hc_class := class_apeman ;
42447: LD_ADDR_OWVAR 28
42451: PUSH
42452: LD_INT 12
42454: ST_TO_ADDR
// hc_gallery :=  ;
42455: LD_ADDR_OWVAR 33
42459: PUSH
42460: LD_STRING 
42462: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42463: LD_ADDR_OWVAR 35
42467: PUSH
42468: LD_VAR 0 1
42472: NEG
42473: PPUSH
42474: LD_VAR 0 1
42478: PPUSH
42479: CALL_OW 12
42483: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42484: LD_ADDR_OWVAR 31
42488: PUSH
42489: LD_INT 0
42491: PPUSH
42492: LD_INT 3
42494: PPUSH
42495: CALL_OW 12
42499: PUSH
42500: LD_INT 0
42502: PPUSH
42503: LD_INT 3
42505: PPUSH
42506: CALL_OW 12
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: ST_TO_ADDR
// end ;
42523: LD_VAR 0 2
42527: RET
// export function PrepareTiger ( agressivity ) ; begin
42528: LD_INT 0
42530: PPUSH
// uc_side := 0 ;
42531: LD_ADDR_OWVAR 20
42535: PUSH
42536: LD_INT 0
42538: ST_TO_ADDR
// uc_nation := 0 ;
42539: LD_ADDR_OWVAR 21
42543: PUSH
42544: LD_INT 0
42546: ST_TO_ADDR
// hc_class := class_tiger ;
42547: LD_ADDR_OWVAR 28
42551: PUSH
42552: LD_INT 14
42554: ST_TO_ADDR
// hc_gallery :=  ;
42555: LD_ADDR_OWVAR 33
42559: PUSH
42560: LD_STRING 
42562: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42563: LD_ADDR_OWVAR 35
42567: PUSH
42568: LD_VAR 0 1
42572: NEG
42573: PPUSH
42574: LD_VAR 0 1
42578: PPUSH
42579: CALL_OW 12
42583: ST_TO_ADDR
// end ;
42584: LD_VAR 0 2
42588: RET
// export function PrepareEnchidna ( ) ; begin
42589: LD_INT 0
42591: PPUSH
// uc_side := 0 ;
42592: LD_ADDR_OWVAR 20
42596: PUSH
42597: LD_INT 0
42599: ST_TO_ADDR
// uc_nation := 0 ;
42600: LD_ADDR_OWVAR 21
42604: PUSH
42605: LD_INT 0
42607: ST_TO_ADDR
// hc_class := class_baggie ;
42608: LD_ADDR_OWVAR 28
42612: PUSH
42613: LD_INT 13
42615: ST_TO_ADDR
// hc_gallery :=  ;
42616: LD_ADDR_OWVAR 33
42620: PUSH
42621: LD_STRING 
42623: ST_TO_ADDR
// end ;
42624: LD_VAR 0 1
42628: RET
// export function PrepareFrog ( ) ; begin
42629: LD_INT 0
42631: PPUSH
// uc_side := 0 ;
42632: LD_ADDR_OWVAR 20
42636: PUSH
42637: LD_INT 0
42639: ST_TO_ADDR
// uc_nation := 0 ;
42640: LD_ADDR_OWVAR 21
42644: PUSH
42645: LD_INT 0
42647: ST_TO_ADDR
// hc_class := class_frog ;
42648: LD_ADDR_OWVAR 28
42652: PUSH
42653: LD_INT 19
42655: ST_TO_ADDR
// hc_gallery :=  ;
42656: LD_ADDR_OWVAR 33
42660: PUSH
42661: LD_STRING 
42663: ST_TO_ADDR
// end ;
42664: LD_VAR 0 1
42668: RET
// export function PrepareFish ( ) ; begin
42669: LD_INT 0
42671: PPUSH
// uc_side := 0 ;
42672: LD_ADDR_OWVAR 20
42676: PUSH
42677: LD_INT 0
42679: ST_TO_ADDR
// uc_nation := 0 ;
42680: LD_ADDR_OWVAR 21
42684: PUSH
42685: LD_INT 0
42687: ST_TO_ADDR
// hc_class := class_fish ;
42688: LD_ADDR_OWVAR 28
42692: PUSH
42693: LD_INT 20
42695: ST_TO_ADDR
// hc_gallery :=  ;
42696: LD_ADDR_OWVAR 33
42700: PUSH
42701: LD_STRING 
42703: ST_TO_ADDR
// end ;
42704: LD_VAR 0 1
42708: RET
// export function PrepareBird ( ) ; begin
42709: LD_INT 0
42711: PPUSH
// uc_side := 0 ;
42712: LD_ADDR_OWVAR 20
42716: PUSH
42717: LD_INT 0
42719: ST_TO_ADDR
// uc_nation := 0 ;
42720: LD_ADDR_OWVAR 21
42724: PUSH
42725: LD_INT 0
42727: ST_TO_ADDR
// hc_class := class_phororhacos ;
42728: LD_ADDR_OWVAR 28
42732: PUSH
42733: LD_INT 18
42735: ST_TO_ADDR
// hc_gallery :=  ;
42736: LD_ADDR_OWVAR 33
42740: PUSH
42741: LD_STRING 
42743: ST_TO_ADDR
// end ;
42744: LD_VAR 0 1
42748: RET
// export function PrepareHorse ( ) ; begin
42749: LD_INT 0
42751: PPUSH
// uc_side := 0 ;
42752: LD_ADDR_OWVAR 20
42756: PUSH
42757: LD_INT 0
42759: ST_TO_ADDR
// uc_nation := 0 ;
42760: LD_ADDR_OWVAR 21
42764: PUSH
42765: LD_INT 0
42767: ST_TO_ADDR
// hc_class := class_horse ;
42768: LD_ADDR_OWVAR 28
42772: PUSH
42773: LD_INT 21
42775: ST_TO_ADDR
// hc_gallery :=  ;
42776: LD_ADDR_OWVAR 33
42780: PUSH
42781: LD_STRING 
42783: ST_TO_ADDR
// end ;
42784: LD_VAR 0 1
42788: RET
// export function PrepareMastodont ( ) ; begin
42789: LD_INT 0
42791: PPUSH
// uc_side := 0 ;
42792: LD_ADDR_OWVAR 20
42796: PUSH
42797: LD_INT 0
42799: ST_TO_ADDR
// uc_nation := 0 ;
42800: LD_ADDR_OWVAR 21
42804: PUSH
42805: LD_INT 0
42807: ST_TO_ADDR
// vc_chassis := class_mastodont ;
42808: LD_ADDR_OWVAR 37
42812: PUSH
42813: LD_INT 31
42815: ST_TO_ADDR
// vc_control := control_rider ;
42816: LD_ADDR_OWVAR 38
42820: PUSH
42821: LD_INT 4
42823: ST_TO_ADDR
// end ;
42824: LD_VAR 0 1
42828: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42829: LD_INT 0
42831: PPUSH
42832: PPUSH
42833: PPUSH
// uc_side = 0 ;
42834: LD_ADDR_OWVAR 20
42838: PUSH
42839: LD_INT 0
42841: ST_TO_ADDR
// uc_nation = 0 ;
42842: LD_ADDR_OWVAR 21
42846: PUSH
42847: LD_INT 0
42849: ST_TO_ADDR
// InitHc_All ( ) ;
42850: CALL_OW 584
// InitVc ;
42854: CALL_OW 20
// if mastodonts then
42858: LD_VAR 0 6
42862: IFFALSE 42929
// for i = 1 to mastodonts do
42864: LD_ADDR_VAR 0 11
42868: PUSH
42869: DOUBLE
42870: LD_INT 1
42872: DEC
42873: ST_TO_ADDR
42874: LD_VAR 0 6
42878: PUSH
42879: FOR_TO
42880: IFFALSE 42927
// begin vc_chassis := 31 ;
42882: LD_ADDR_OWVAR 37
42886: PUSH
42887: LD_INT 31
42889: ST_TO_ADDR
// vc_control := control_rider ;
42890: LD_ADDR_OWVAR 38
42894: PUSH
42895: LD_INT 4
42897: ST_TO_ADDR
// animal := CreateVehicle ;
42898: LD_ADDR_VAR 0 12
42902: PUSH
42903: CALL_OW 45
42907: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42908: LD_VAR 0 12
42912: PPUSH
42913: LD_VAR 0 8
42917: PPUSH
42918: LD_INT 0
42920: PPUSH
42921: CALL 45057 0 3
// end ;
42925: GO 42879
42927: POP
42928: POP
// if horses then
42929: LD_VAR 0 5
42933: IFFALSE 43000
// for i = 1 to horses do
42935: LD_ADDR_VAR 0 11
42939: PUSH
42940: DOUBLE
42941: LD_INT 1
42943: DEC
42944: ST_TO_ADDR
42945: LD_VAR 0 5
42949: PUSH
42950: FOR_TO
42951: IFFALSE 42998
// begin hc_class := 21 ;
42953: LD_ADDR_OWVAR 28
42957: PUSH
42958: LD_INT 21
42960: ST_TO_ADDR
// hc_gallery :=  ;
42961: LD_ADDR_OWVAR 33
42965: PUSH
42966: LD_STRING 
42968: ST_TO_ADDR
// animal := CreateHuman ;
42969: LD_ADDR_VAR 0 12
42973: PUSH
42974: CALL_OW 44
42978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42979: LD_VAR 0 12
42983: PPUSH
42984: LD_VAR 0 8
42988: PPUSH
42989: LD_INT 0
42991: PPUSH
42992: CALL 45057 0 3
// end ;
42996: GO 42950
42998: POP
42999: POP
// if birds then
43000: LD_VAR 0 1
43004: IFFALSE 43071
// for i = 1 to birds do
43006: LD_ADDR_VAR 0 11
43010: PUSH
43011: DOUBLE
43012: LD_INT 1
43014: DEC
43015: ST_TO_ADDR
43016: LD_VAR 0 1
43020: PUSH
43021: FOR_TO
43022: IFFALSE 43069
// begin hc_class = 18 ;
43024: LD_ADDR_OWVAR 28
43028: PUSH
43029: LD_INT 18
43031: ST_TO_ADDR
// hc_gallery =  ;
43032: LD_ADDR_OWVAR 33
43036: PUSH
43037: LD_STRING 
43039: ST_TO_ADDR
// animal := CreateHuman ;
43040: LD_ADDR_VAR 0 12
43044: PUSH
43045: CALL_OW 44
43049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43050: LD_VAR 0 12
43054: PPUSH
43055: LD_VAR 0 8
43059: PPUSH
43060: LD_INT 0
43062: PPUSH
43063: CALL 45057 0 3
// end ;
43067: GO 43021
43069: POP
43070: POP
// if tigers then
43071: LD_VAR 0 2
43075: IFFALSE 43159
// for i = 1 to tigers do
43077: LD_ADDR_VAR 0 11
43081: PUSH
43082: DOUBLE
43083: LD_INT 1
43085: DEC
43086: ST_TO_ADDR
43087: LD_VAR 0 2
43091: PUSH
43092: FOR_TO
43093: IFFALSE 43157
// begin hc_class = class_tiger ;
43095: LD_ADDR_OWVAR 28
43099: PUSH
43100: LD_INT 14
43102: ST_TO_ADDR
// hc_gallery =  ;
43103: LD_ADDR_OWVAR 33
43107: PUSH
43108: LD_STRING 
43110: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43111: LD_ADDR_OWVAR 35
43115: PUSH
43116: LD_INT 7
43118: NEG
43119: PPUSH
43120: LD_INT 7
43122: PPUSH
43123: CALL_OW 12
43127: ST_TO_ADDR
// animal := CreateHuman ;
43128: LD_ADDR_VAR 0 12
43132: PUSH
43133: CALL_OW 44
43137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43138: LD_VAR 0 12
43142: PPUSH
43143: LD_VAR 0 8
43147: PPUSH
43148: LD_INT 0
43150: PPUSH
43151: CALL 45057 0 3
// end ;
43155: GO 43092
43157: POP
43158: POP
// if apemans then
43159: LD_VAR 0 3
43163: IFFALSE 43286
// for i = 1 to apemans do
43165: LD_ADDR_VAR 0 11
43169: PUSH
43170: DOUBLE
43171: LD_INT 1
43173: DEC
43174: ST_TO_ADDR
43175: LD_VAR 0 3
43179: PUSH
43180: FOR_TO
43181: IFFALSE 43284
// begin hc_class = class_apeman ;
43183: LD_ADDR_OWVAR 28
43187: PUSH
43188: LD_INT 12
43190: ST_TO_ADDR
// hc_gallery =  ;
43191: LD_ADDR_OWVAR 33
43195: PUSH
43196: LD_STRING 
43198: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43199: LD_ADDR_OWVAR 35
43203: PUSH
43204: LD_INT 2
43206: NEG
43207: PPUSH
43208: LD_INT 2
43210: PPUSH
43211: CALL_OW 12
43215: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43216: LD_ADDR_OWVAR 31
43220: PUSH
43221: LD_INT 1
43223: PPUSH
43224: LD_INT 3
43226: PPUSH
43227: CALL_OW 12
43231: PUSH
43232: LD_INT 1
43234: PPUSH
43235: LD_INT 3
43237: PPUSH
43238: CALL_OW 12
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: ST_TO_ADDR
// animal := CreateHuman ;
43255: LD_ADDR_VAR 0 12
43259: PUSH
43260: CALL_OW 44
43264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43265: LD_VAR 0 12
43269: PPUSH
43270: LD_VAR 0 8
43274: PPUSH
43275: LD_INT 0
43277: PPUSH
43278: CALL 45057 0 3
// end ;
43282: GO 43180
43284: POP
43285: POP
// if enchidnas then
43286: LD_VAR 0 4
43290: IFFALSE 43357
// for i = 1 to enchidnas do
43292: LD_ADDR_VAR 0 11
43296: PUSH
43297: DOUBLE
43298: LD_INT 1
43300: DEC
43301: ST_TO_ADDR
43302: LD_VAR 0 4
43306: PUSH
43307: FOR_TO
43308: IFFALSE 43355
// begin hc_class = 13 ;
43310: LD_ADDR_OWVAR 28
43314: PUSH
43315: LD_INT 13
43317: ST_TO_ADDR
// hc_gallery =  ;
43318: LD_ADDR_OWVAR 33
43322: PUSH
43323: LD_STRING 
43325: ST_TO_ADDR
// animal := CreateHuman ;
43326: LD_ADDR_VAR 0 12
43330: PUSH
43331: CALL_OW 44
43335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43336: LD_VAR 0 12
43340: PPUSH
43341: LD_VAR 0 8
43345: PPUSH
43346: LD_INT 0
43348: PPUSH
43349: CALL 45057 0 3
// end ;
43353: GO 43307
43355: POP
43356: POP
// if fishes then
43357: LD_VAR 0 7
43361: IFFALSE 43428
// for i = 1 to fishes do
43363: LD_ADDR_VAR 0 11
43367: PUSH
43368: DOUBLE
43369: LD_INT 1
43371: DEC
43372: ST_TO_ADDR
43373: LD_VAR 0 7
43377: PUSH
43378: FOR_TO
43379: IFFALSE 43426
// begin hc_class = 20 ;
43381: LD_ADDR_OWVAR 28
43385: PUSH
43386: LD_INT 20
43388: ST_TO_ADDR
// hc_gallery =  ;
43389: LD_ADDR_OWVAR 33
43393: PUSH
43394: LD_STRING 
43396: ST_TO_ADDR
// animal := CreateHuman ;
43397: LD_ADDR_VAR 0 12
43401: PUSH
43402: CALL_OW 44
43406: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43407: LD_VAR 0 12
43411: PPUSH
43412: LD_VAR 0 9
43416: PPUSH
43417: LD_INT 0
43419: PPUSH
43420: CALL 45057 0 3
// end ;
43424: GO 43378
43426: POP
43427: POP
// end ;
43428: LD_VAR 0 10
43432: RET
// export function WantHeal ( sci , unit ) ; begin
43433: LD_INT 0
43435: PPUSH
// if GetTaskList ( sci ) > 0 then
43436: LD_VAR 0 1
43440: PPUSH
43441: CALL_OW 437
43445: PUSH
43446: LD_INT 0
43448: GREATER
43449: IFFALSE 43519
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43451: LD_VAR 0 1
43455: PPUSH
43456: CALL_OW 437
43460: PUSH
43461: LD_INT 1
43463: ARRAY
43464: PUSH
43465: LD_INT 1
43467: ARRAY
43468: PUSH
43469: LD_STRING l
43471: EQUAL
43472: PUSH
43473: LD_VAR 0 1
43477: PPUSH
43478: CALL_OW 437
43482: PUSH
43483: LD_INT 1
43485: ARRAY
43486: PUSH
43487: LD_INT 4
43489: ARRAY
43490: PUSH
43491: LD_VAR 0 2
43495: EQUAL
43496: AND
43497: IFFALSE 43509
// result := true else
43499: LD_ADDR_VAR 0 3
43503: PUSH
43504: LD_INT 1
43506: ST_TO_ADDR
43507: GO 43517
// result := false ;
43509: LD_ADDR_VAR 0 3
43513: PUSH
43514: LD_INT 0
43516: ST_TO_ADDR
// end else
43517: GO 43527
// result := false ;
43519: LD_ADDR_VAR 0 3
43523: PUSH
43524: LD_INT 0
43526: ST_TO_ADDR
// end ;
43527: LD_VAR 0 3
43531: RET
// export function HealTarget ( sci ) ; begin
43532: LD_INT 0
43534: PPUSH
// if not sci then
43535: LD_VAR 0 1
43539: NOT
43540: IFFALSE 43544
// exit ;
43542: GO 43609
// result := 0 ;
43544: LD_ADDR_VAR 0 2
43548: PUSH
43549: LD_INT 0
43551: ST_TO_ADDR
// if GetTaskList ( sci ) then
43552: LD_VAR 0 1
43556: PPUSH
43557: CALL_OW 437
43561: IFFALSE 43609
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43563: LD_VAR 0 1
43567: PPUSH
43568: CALL_OW 437
43572: PUSH
43573: LD_INT 1
43575: ARRAY
43576: PUSH
43577: LD_INT 1
43579: ARRAY
43580: PUSH
43581: LD_STRING l
43583: EQUAL
43584: IFFALSE 43609
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43586: LD_ADDR_VAR 0 2
43590: PUSH
43591: LD_VAR 0 1
43595: PPUSH
43596: CALL_OW 437
43600: PUSH
43601: LD_INT 1
43603: ARRAY
43604: PUSH
43605: LD_INT 4
43607: ARRAY
43608: ST_TO_ADDR
// end ;
43609: LD_VAR 0 2
43613: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43614: LD_INT 0
43616: PPUSH
43617: PPUSH
43618: PPUSH
43619: PPUSH
// if not base_units then
43620: LD_VAR 0 1
43624: NOT
43625: IFFALSE 43629
// exit ;
43627: GO 43716
// result := false ;
43629: LD_ADDR_VAR 0 2
43633: PUSH
43634: LD_INT 0
43636: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43637: LD_ADDR_VAR 0 5
43641: PUSH
43642: LD_VAR 0 1
43646: PPUSH
43647: LD_INT 21
43649: PUSH
43650: LD_INT 3
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PPUSH
43657: CALL_OW 72
43661: ST_TO_ADDR
// if not tmp then
43662: LD_VAR 0 5
43666: NOT
43667: IFFALSE 43671
// exit ;
43669: GO 43716
// for i in tmp do
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_VAR 0 5
43680: PUSH
43681: FOR_IN
43682: IFFALSE 43714
// begin result := EnemyInRange ( i , 22 ) ;
43684: LD_ADDR_VAR 0 2
43688: PUSH
43689: LD_VAR 0 3
43693: PPUSH
43694: LD_INT 22
43696: PPUSH
43697: CALL 41303 0 2
43701: ST_TO_ADDR
// if result then
43702: LD_VAR 0 2
43706: IFFALSE 43712
// exit ;
43708: POP
43709: POP
43710: GO 43716
// end ;
43712: GO 43681
43714: POP
43715: POP
// end ;
43716: LD_VAR 0 2
43720: RET
// export function FilterByTag ( units , tag ) ; begin
43721: LD_INT 0
43723: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
43724: LD_ADDR_VAR 0 3
43728: PUSH
43729: LD_VAR 0 1
43733: PPUSH
43734: LD_INT 120
43736: PUSH
43737: LD_VAR 0 2
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PPUSH
43746: CALL_OW 72
43750: ST_TO_ADDR
// end ;
43751: LD_VAR 0 3
43755: RET
// export function IsDriver ( un ) ; begin
43756: LD_INT 0
43758: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43759: LD_ADDR_VAR 0 2
43763: PUSH
43764: LD_VAR 0 1
43768: PUSH
43769: LD_INT 55
43771: PUSH
43772: EMPTY
43773: LIST
43774: PPUSH
43775: CALL_OW 69
43779: IN
43780: ST_TO_ADDR
// end ;
43781: LD_VAR 0 2
43785: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43786: LD_INT 0
43788: PPUSH
43789: PPUSH
// list := [ ] ;
43790: LD_ADDR_VAR 0 5
43794: PUSH
43795: EMPTY
43796: ST_TO_ADDR
// case d of 0 :
43797: LD_VAR 0 3
43801: PUSH
43802: LD_INT 0
43804: DOUBLE
43805: EQUAL
43806: IFTRUE 43810
43808: GO 43943
43810: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43811: LD_ADDR_VAR 0 5
43815: PUSH
43816: LD_VAR 0 1
43820: PUSH
43821: LD_INT 4
43823: MINUS
43824: PUSH
43825: LD_VAR 0 2
43829: PUSH
43830: LD_INT 4
43832: MINUS
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: LIST
43841: PUSH
43842: LD_VAR 0 1
43846: PUSH
43847: LD_INT 3
43849: MINUS
43850: PUSH
43851: LD_VAR 0 2
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: LIST
43863: PUSH
43864: LD_VAR 0 1
43868: PUSH
43869: LD_INT 4
43871: PLUS
43872: PUSH
43873: LD_VAR 0 2
43877: PUSH
43878: LD_INT 4
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: PUSH
43886: LD_VAR 0 1
43890: PUSH
43891: LD_INT 3
43893: PLUS
43894: PUSH
43895: LD_VAR 0 2
43899: PUSH
43900: LD_INT 3
43902: PLUS
43903: PUSH
43904: LD_INT 5
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: PUSH
43912: LD_VAR 0 1
43916: PUSH
43917: LD_VAR 0 2
43921: PUSH
43922: LD_INT 4
43924: PLUS
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: ST_TO_ADDR
// end ; 1 :
43941: GO 44641
43943: LD_INT 1
43945: DOUBLE
43946: EQUAL
43947: IFTRUE 43951
43949: GO 44084
43951: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
43952: LD_ADDR_VAR 0 5
43956: PUSH
43957: LD_VAR 0 1
43961: PUSH
43962: LD_VAR 0 2
43966: PUSH
43967: LD_INT 4
43969: MINUS
43970: PUSH
43971: LD_INT 3
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: LIST
43978: PUSH
43979: LD_VAR 0 1
43983: PUSH
43984: LD_INT 3
43986: MINUS
43987: PUSH
43988: LD_VAR 0 2
43992: PUSH
43993: LD_INT 3
43995: MINUS
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: PUSH
44005: LD_VAR 0 1
44009: PUSH
44010: LD_INT 4
44012: MINUS
44013: PUSH
44014: LD_VAR 0 2
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: LIST
44026: PUSH
44027: LD_VAR 0 1
44031: PUSH
44032: LD_VAR 0 2
44036: PUSH
44037: LD_INT 3
44039: PLUS
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: LIST
44048: PUSH
44049: LD_VAR 0 1
44053: PUSH
44054: LD_INT 4
44056: PLUS
44057: PUSH
44058: LD_VAR 0 2
44062: PUSH
44063: LD_INT 4
44065: PLUS
44066: PUSH
44067: LD_INT 5
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: LIST
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: ST_TO_ADDR
// end ; 2 :
44082: GO 44641
44084: LD_INT 2
44086: DOUBLE
44087: EQUAL
44088: IFTRUE 44092
44090: GO 44221
44092: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44093: LD_ADDR_VAR 0 5
44097: PUSH
44098: LD_VAR 0 1
44102: PUSH
44103: LD_VAR 0 2
44107: PUSH
44108: LD_INT 3
44110: MINUS
44111: PUSH
44112: LD_INT 3
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: PUSH
44120: LD_VAR 0 1
44124: PUSH
44125: LD_INT 4
44127: PLUS
44128: PUSH
44129: LD_VAR 0 2
44133: PUSH
44134: LD_INT 4
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: PUSH
44142: LD_VAR 0 1
44146: PUSH
44147: LD_VAR 0 2
44151: PUSH
44152: LD_INT 4
44154: PLUS
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: LIST
44163: PUSH
44164: LD_VAR 0 1
44168: PUSH
44169: LD_INT 3
44171: MINUS
44172: PUSH
44173: LD_VAR 0 2
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: LIST
44185: PUSH
44186: LD_VAR 0 1
44190: PUSH
44191: LD_INT 4
44193: MINUS
44194: PUSH
44195: LD_VAR 0 2
44199: PUSH
44200: LD_INT 4
44202: MINUS
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: ST_TO_ADDR
// end ; 3 :
44219: GO 44641
44221: LD_INT 3
44223: DOUBLE
44224: EQUAL
44225: IFTRUE 44229
44227: GO 44362
44229: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44230: LD_ADDR_VAR 0 5
44234: PUSH
44235: LD_VAR 0 1
44239: PUSH
44240: LD_INT 3
44242: PLUS
44243: PUSH
44244: LD_VAR 0 2
44248: PUSH
44249: LD_INT 4
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: LIST
44256: PUSH
44257: LD_VAR 0 1
44261: PUSH
44262: LD_INT 4
44264: PLUS
44265: PUSH
44266: LD_VAR 0 2
44270: PUSH
44271: LD_INT 4
44273: PLUS
44274: PUSH
44275: LD_INT 5
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: PUSH
44283: LD_VAR 0 1
44287: PUSH
44288: LD_INT 4
44290: MINUS
44291: PUSH
44292: LD_VAR 0 2
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: LIST
44304: PUSH
44305: LD_VAR 0 1
44309: PUSH
44310: LD_VAR 0 2
44314: PUSH
44315: LD_INT 4
44317: MINUS
44318: PUSH
44319: LD_INT 3
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: PUSH
44327: LD_VAR 0 1
44331: PUSH
44332: LD_INT 3
44334: MINUS
44335: PUSH
44336: LD_VAR 0 2
44340: PUSH
44341: LD_INT 3
44343: MINUS
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: ST_TO_ADDR
// end ; 4 :
44360: GO 44641
44362: LD_INT 4
44364: DOUBLE
44365: EQUAL
44366: IFTRUE 44370
44368: GO 44503
44370: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44371: LD_ADDR_VAR 0 5
44375: PUSH
44376: LD_VAR 0 1
44380: PUSH
44381: LD_VAR 0 2
44385: PUSH
44386: LD_INT 4
44388: PLUS
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: PUSH
44398: LD_VAR 0 1
44402: PUSH
44403: LD_INT 3
44405: PLUS
44406: PUSH
44407: LD_VAR 0 2
44411: PUSH
44412: LD_INT 3
44414: PLUS
44415: PUSH
44416: LD_INT 5
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: PUSH
44424: LD_VAR 0 1
44428: PUSH
44429: LD_INT 4
44431: PLUS
44432: PUSH
44433: LD_VAR 0 2
44437: PUSH
44438: LD_INT 4
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: LIST
44445: PUSH
44446: LD_VAR 0 1
44450: PUSH
44451: LD_VAR 0 2
44455: PUSH
44456: LD_INT 3
44458: MINUS
44459: PUSH
44460: LD_INT 3
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: LIST
44467: PUSH
44468: LD_VAR 0 1
44472: PUSH
44473: LD_INT 4
44475: MINUS
44476: PUSH
44477: LD_VAR 0 2
44481: PUSH
44482: LD_INT 4
44484: MINUS
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: ST_TO_ADDR
// end ; 5 :
44501: GO 44641
44503: LD_INT 5
44505: DOUBLE
44506: EQUAL
44507: IFTRUE 44511
44509: GO 44640
44511: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44512: LD_ADDR_VAR 0 5
44516: PUSH
44517: LD_VAR 0 1
44521: PUSH
44522: LD_INT 4
44524: MINUS
44525: PUSH
44526: LD_VAR 0 2
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: PUSH
44539: LD_VAR 0 1
44543: PUSH
44544: LD_VAR 0 2
44548: PUSH
44549: LD_INT 4
44551: MINUS
44552: PUSH
44553: LD_INT 3
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: LIST
44560: PUSH
44561: LD_VAR 0 1
44565: PUSH
44566: LD_INT 4
44568: PLUS
44569: PUSH
44570: LD_VAR 0 2
44574: PUSH
44575: LD_INT 4
44577: PLUS
44578: PUSH
44579: LD_INT 5
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: LIST
44586: PUSH
44587: LD_VAR 0 1
44591: PUSH
44592: LD_INT 3
44594: PLUS
44595: PUSH
44596: LD_VAR 0 2
44600: PUSH
44601: LD_INT 4
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: PUSH
44609: LD_VAR 0 1
44613: PUSH
44614: LD_VAR 0 2
44618: PUSH
44619: LD_INT 3
44621: PLUS
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: LIST
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: ST_TO_ADDR
// end ; end ;
44638: GO 44641
44640: POP
// result := list ;
44641: LD_ADDR_VAR 0 4
44645: PUSH
44646: LD_VAR 0 5
44650: ST_TO_ADDR
// end ;
44651: LD_VAR 0 4
44655: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44656: LD_INT 0
44658: PPUSH
44659: PPUSH
44660: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44661: LD_VAR 0 1
44665: NOT
44666: PUSH
44667: LD_VAR 0 2
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: LD_INT 2
44677: PUSH
44678: LD_INT 3
44680: PUSH
44681: LD_INT 4
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: IN
44690: NOT
44691: OR
44692: IFFALSE 44696
// exit ;
44694: GO 44779
// tmp := [ ] ;
44696: LD_ADDR_VAR 0 5
44700: PUSH
44701: EMPTY
44702: ST_TO_ADDR
// for i in units do
44703: LD_ADDR_VAR 0 4
44707: PUSH
44708: LD_VAR 0 1
44712: PUSH
44713: FOR_IN
44714: IFFALSE 44748
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
44716: LD_ADDR_VAR 0 5
44720: PUSH
44721: LD_VAR 0 5
44725: PPUSH
44726: LD_VAR 0 4
44730: PPUSH
44731: LD_VAR 0 2
44735: PPUSH
44736: CALL_OW 259
44740: PPUSH
44741: CALL 46140 0 2
44745: ST_TO_ADDR
44746: GO 44713
44748: POP
44749: POP
// if not tmp then
44750: LD_VAR 0 5
44754: NOT
44755: IFFALSE 44759
// exit ;
44757: GO 44779
// result := SortListByListDesc ( units , tmp ) ;
44759: LD_ADDR_VAR 0 3
44763: PUSH
44764: LD_VAR 0 1
44768: PPUSH
44769: LD_VAR 0 5
44773: PPUSH
44774: CALL_OW 77
44778: ST_TO_ADDR
// end ;
44779: LD_VAR 0 3
44783: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44784: LD_INT 0
44786: PPUSH
44787: PPUSH
44788: PPUSH
// result := false ;
44789: LD_ADDR_VAR 0 3
44793: PUSH
44794: LD_INT 0
44796: ST_TO_ADDR
// if not building then
44797: LD_VAR 0 2
44801: NOT
44802: IFFALSE 44806
// exit ;
44804: GO 44944
// x := GetX ( building ) ;
44806: LD_ADDR_VAR 0 4
44810: PUSH
44811: LD_VAR 0 2
44815: PPUSH
44816: CALL_OW 250
44820: ST_TO_ADDR
// y := GetY ( building ) ;
44821: LD_ADDR_VAR 0 5
44825: PUSH
44826: LD_VAR 0 2
44830: PPUSH
44831: CALL_OW 251
44835: ST_TO_ADDR
// if not x or not y then
44836: LD_VAR 0 4
44840: NOT
44841: PUSH
44842: LD_VAR 0 5
44846: NOT
44847: OR
44848: IFFALSE 44852
// exit ;
44850: GO 44944
// if GetTaskList ( unit ) then
44852: LD_VAR 0 1
44856: PPUSH
44857: CALL_OW 437
44861: IFFALSE 44944
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44863: LD_STRING e
44865: PUSH
44866: LD_VAR 0 1
44870: PPUSH
44871: CALL_OW 437
44875: PUSH
44876: LD_INT 1
44878: ARRAY
44879: PUSH
44880: LD_INT 1
44882: ARRAY
44883: EQUAL
44884: PUSH
44885: LD_VAR 0 4
44889: PUSH
44890: LD_VAR 0 1
44894: PPUSH
44895: CALL_OW 437
44899: PUSH
44900: LD_INT 1
44902: ARRAY
44903: PUSH
44904: LD_INT 2
44906: ARRAY
44907: EQUAL
44908: AND
44909: PUSH
44910: LD_VAR 0 5
44914: PUSH
44915: LD_VAR 0 1
44919: PPUSH
44920: CALL_OW 437
44924: PUSH
44925: LD_INT 1
44927: ARRAY
44928: PUSH
44929: LD_INT 3
44931: ARRAY
44932: EQUAL
44933: AND
44934: IFFALSE 44944
// result := true end ;
44936: LD_ADDR_VAR 0 3
44940: PUSH
44941: LD_INT 1
44943: ST_TO_ADDR
// end ;
44944: LD_VAR 0 3
44948: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
44949: LD_INT 0
44951: PPUSH
// result := false ;
44952: LD_ADDR_VAR 0 4
44956: PUSH
44957: LD_INT 0
44959: ST_TO_ADDR
// if GetTaskList ( unit ) then
44960: LD_VAR 0 1
44964: PPUSH
44965: CALL_OW 437
44969: IFFALSE 45052
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44971: LD_STRING M
44973: PUSH
44974: LD_VAR 0 1
44978: PPUSH
44979: CALL_OW 437
44983: PUSH
44984: LD_INT 1
44986: ARRAY
44987: PUSH
44988: LD_INT 1
44990: ARRAY
44991: EQUAL
44992: PUSH
44993: LD_VAR 0 2
44997: PUSH
44998: LD_VAR 0 1
45002: PPUSH
45003: CALL_OW 437
45007: PUSH
45008: LD_INT 1
45010: ARRAY
45011: PUSH
45012: LD_INT 2
45014: ARRAY
45015: EQUAL
45016: AND
45017: PUSH
45018: LD_VAR 0 3
45022: PUSH
45023: LD_VAR 0 1
45027: PPUSH
45028: CALL_OW 437
45032: PUSH
45033: LD_INT 1
45035: ARRAY
45036: PUSH
45037: LD_INT 3
45039: ARRAY
45040: EQUAL
45041: AND
45042: IFFALSE 45052
// result := true ;
45044: LD_ADDR_VAR 0 4
45048: PUSH
45049: LD_INT 1
45051: ST_TO_ADDR
// end ; end ;
45052: LD_VAR 0 4
45056: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45057: LD_INT 0
45059: PPUSH
45060: PPUSH
45061: PPUSH
45062: PPUSH
// if not unit or not area then
45063: LD_VAR 0 1
45067: NOT
45068: PUSH
45069: LD_VAR 0 2
45073: NOT
45074: OR
45075: IFFALSE 45079
// exit ;
45077: GO 45243
// tmp := AreaToList ( area , i ) ;
45079: LD_ADDR_VAR 0 6
45083: PUSH
45084: LD_VAR 0 2
45088: PPUSH
45089: LD_VAR 0 5
45093: PPUSH
45094: CALL_OW 517
45098: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45099: LD_ADDR_VAR 0 5
45103: PUSH
45104: DOUBLE
45105: LD_INT 1
45107: DEC
45108: ST_TO_ADDR
45109: LD_VAR 0 6
45113: PUSH
45114: LD_INT 1
45116: ARRAY
45117: PUSH
45118: FOR_TO
45119: IFFALSE 45241
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45121: LD_ADDR_VAR 0 7
45125: PUSH
45126: LD_VAR 0 6
45130: PUSH
45131: LD_INT 1
45133: ARRAY
45134: PUSH
45135: LD_VAR 0 5
45139: ARRAY
45140: PUSH
45141: LD_VAR 0 6
45145: PUSH
45146: LD_INT 2
45148: ARRAY
45149: PUSH
45150: LD_VAR 0 5
45154: ARRAY
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
45160: LD_VAR 0 7
45164: PUSH
45165: LD_INT 1
45167: ARRAY
45168: PPUSH
45169: LD_VAR 0 7
45173: PUSH
45174: LD_INT 2
45176: ARRAY
45177: PPUSH
45178: CALL_OW 428
45182: PUSH
45183: LD_INT 0
45185: EQUAL
45186: IFFALSE 45239
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45188: LD_VAR 0 1
45192: PPUSH
45193: LD_VAR 0 7
45197: PUSH
45198: LD_INT 1
45200: ARRAY
45201: PPUSH
45202: LD_VAR 0 7
45206: PUSH
45207: LD_INT 2
45209: ARRAY
45210: PPUSH
45211: LD_VAR 0 3
45215: PPUSH
45216: CALL_OW 48
// result := IsPlaced ( unit ) ;
45220: LD_ADDR_VAR 0 4
45224: PUSH
45225: LD_VAR 0 1
45229: PPUSH
45230: CALL_OW 305
45234: ST_TO_ADDR
// exit ;
45235: POP
45236: POP
45237: GO 45243
// end ; end ;
45239: GO 45118
45241: POP
45242: POP
// end ;
45243: LD_VAR 0 4
45247: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45248: LD_INT 0
45250: PPUSH
45251: PPUSH
45252: PPUSH
// if not side or side > 8 then
45253: LD_VAR 0 1
45257: NOT
45258: PUSH
45259: LD_VAR 0 1
45263: PUSH
45264: LD_INT 8
45266: GREATER
45267: OR
45268: IFFALSE 45272
// exit ;
45270: GO 45459
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45272: LD_ADDR_VAR 0 4
45276: PUSH
45277: LD_INT 22
45279: PUSH
45280: LD_VAR 0 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 21
45291: PUSH
45292: LD_INT 3
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PPUSH
45303: CALL_OW 69
45307: ST_TO_ADDR
// if not tmp then
45308: LD_VAR 0 4
45312: NOT
45313: IFFALSE 45317
// exit ;
45315: GO 45459
// enable_addtolog := true ;
45317: LD_ADDR_OWVAR 81
45321: PUSH
45322: LD_INT 1
45324: ST_TO_ADDR
// AddToLog ( [ ) ;
45325: LD_STRING [
45327: PPUSH
45328: CALL_OW 561
// for i in tmp do
45332: LD_ADDR_VAR 0 3
45336: PUSH
45337: LD_VAR 0 4
45341: PUSH
45342: FOR_IN
45343: IFFALSE 45450
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45345: LD_STRING [
45347: PUSH
45348: LD_VAR 0 3
45352: PPUSH
45353: CALL_OW 266
45357: STR
45358: PUSH
45359: LD_STRING , 
45361: STR
45362: PUSH
45363: LD_VAR 0 3
45367: PPUSH
45368: CALL_OW 250
45372: STR
45373: PUSH
45374: LD_STRING , 
45376: STR
45377: PUSH
45378: LD_VAR 0 3
45382: PPUSH
45383: CALL_OW 251
45387: STR
45388: PUSH
45389: LD_STRING , 
45391: STR
45392: PUSH
45393: LD_VAR 0 3
45397: PPUSH
45398: CALL_OW 254
45402: STR
45403: PUSH
45404: LD_STRING , 
45406: STR
45407: PUSH
45408: LD_VAR 0 3
45412: PPUSH
45413: LD_INT 1
45415: PPUSH
45416: CALL_OW 268
45420: STR
45421: PUSH
45422: LD_STRING , 
45424: STR
45425: PUSH
45426: LD_VAR 0 3
45430: PPUSH
45431: LD_INT 2
45433: PPUSH
45434: CALL_OW 268
45438: STR
45439: PUSH
45440: LD_STRING ],
45442: STR
45443: PPUSH
45444: CALL_OW 561
// end ;
45448: GO 45342
45450: POP
45451: POP
// AddToLog ( ]; ) ;
45452: LD_STRING ];
45454: PPUSH
45455: CALL_OW 561
// end ;
45459: LD_VAR 0 2
45463: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45464: LD_INT 0
45466: PPUSH
45467: PPUSH
45468: PPUSH
45469: PPUSH
45470: PPUSH
// if not area or not rate or not max then
45471: LD_VAR 0 1
45475: NOT
45476: PUSH
45477: LD_VAR 0 2
45481: NOT
45482: OR
45483: PUSH
45484: LD_VAR 0 4
45488: NOT
45489: OR
45490: IFFALSE 45494
// exit ;
45492: GO 45683
// while 1 do
45494: LD_INT 1
45496: IFFALSE 45683
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45498: LD_ADDR_VAR 0 9
45502: PUSH
45503: LD_VAR 0 1
45507: PPUSH
45508: LD_INT 1
45510: PPUSH
45511: CALL_OW 287
45515: PUSH
45516: LD_INT 10
45518: MUL
45519: ST_TO_ADDR
// r := rate / 10 ;
45520: LD_ADDR_VAR 0 7
45524: PUSH
45525: LD_VAR 0 2
45529: PUSH
45530: LD_INT 10
45532: DIVREAL
45533: ST_TO_ADDR
// time := 1 1$00 ;
45534: LD_ADDR_VAR 0 8
45538: PUSH
45539: LD_INT 2100
45541: ST_TO_ADDR
// if amount < min then
45542: LD_VAR 0 9
45546: PUSH
45547: LD_VAR 0 3
45551: LESS
45552: IFFALSE 45570
// r := r * 2 else
45554: LD_ADDR_VAR 0 7
45558: PUSH
45559: LD_VAR 0 7
45563: PUSH
45564: LD_INT 2
45566: MUL
45567: ST_TO_ADDR
45568: GO 45596
// if amount > max then
45570: LD_VAR 0 9
45574: PUSH
45575: LD_VAR 0 4
45579: GREATER
45580: IFFALSE 45596
// r := r / 2 ;
45582: LD_ADDR_VAR 0 7
45586: PUSH
45587: LD_VAR 0 7
45591: PUSH
45592: LD_INT 2
45594: DIVREAL
45595: ST_TO_ADDR
// time := time / r ;
45596: LD_ADDR_VAR 0 8
45600: PUSH
45601: LD_VAR 0 8
45605: PUSH
45606: LD_VAR 0 7
45610: DIVREAL
45611: ST_TO_ADDR
// if time < 0 then
45612: LD_VAR 0 8
45616: PUSH
45617: LD_INT 0
45619: LESS
45620: IFFALSE 45637
// time := time * - 1 ;
45622: LD_ADDR_VAR 0 8
45626: PUSH
45627: LD_VAR 0 8
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: MUL
45636: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
45637: LD_VAR 0 8
45641: PUSH
45642: LD_INT 35
45644: PPUSH
45645: LD_INT 875
45647: PPUSH
45648: CALL_OW 12
45652: PLUS
45653: PPUSH
45654: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
45658: LD_INT 1
45660: PPUSH
45661: LD_INT 5
45663: PPUSH
45664: CALL_OW 12
45668: PPUSH
45669: LD_VAR 0 1
45673: PPUSH
45674: LD_INT 1
45676: PPUSH
45677: CALL_OW 55
// end ;
45681: GO 45494
// end ;
45683: LD_VAR 0 5
45687: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
45688: LD_INT 0
45690: PPUSH
45691: PPUSH
45692: PPUSH
45693: PPUSH
45694: PPUSH
45695: PPUSH
45696: PPUSH
45697: PPUSH
// if not turrets or not factories then
45698: LD_VAR 0 1
45702: NOT
45703: PUSH
45704: LD_VAR 0 2
45708: NOT
45709: OR
45710: IFFALSE 45714
// exit ;
45712: GO 46021
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45714: LD_ADDR_VAR 0 10
45718: PUSH
45719: LD_INT 5
45721: PUSH
45722: LD_INT 6
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 4
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: LD_INT 5
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 24
45756: PUSH
45757: LD_INT 25
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 23
45766: PUSH
45767: LD_INT 27
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 42
45780: PUSH
45781: LD_INT 43
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 44
45790: PUSH
45791: LD_INT 46
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 45
45800: PUSH
45801: LD_INT 47
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: LIST
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: LIST
45817: ST_TO_ADDR
// result := [ ] ;
45818: LD_ADDR_VAR 0 3
45822: PUSH
45823: EMPTY
45824: ST_TO_ADDR
// for i in turrets do
45825: LD_ADDR_VAR 0 4
45829: PUSH
45830: LD_VAR 0 1
45834: PUSH
45835: FOR_IN
45836: IFFALSE 46019
// begin nat := GetNation ( i ) ;
45838: LD_ADDR_VAR 0 7
45842: PUSH
45843: LD_VAR 0 4
45847: PPUSH
45848: CALL_OW 248
45852: ST_TO_ADDR
// weapon := 0 ;
45853: LD_ADDR_VAR 0 8
45857: PUSH
45858: LD_INT 0
45860: ST_TO_ADDR
// if not nat then
45861: LD_VAR 0 7
45865: NOT
45866: IFFALSE 45870
// continue ;
45868: GO 45835
// for j in list [ nat ] do
45870: LD_ADDR_VAR 0 5
45874: PUSH
45875: LD_VAR 0 10
45879: PUSH
45880: LD_VAR 0 7
45884: ARRAY
45885: PUSH
45886: FOR_IN
45887: IFFALSE 45928
// if GetBWeapon ( i ) = j [ 1 ] then
45889: LD_VAR 0 4
45893: PPUSH
45894: CALL_OW 269
45898: PUSH
45899: LD_VAR 0 5
45903: PUSH
45904: LD_INT 1
45906: ARRAY
45907: EQUAL
45908: IFFALSE 45926
// begin weapon := j [ 2 ] ;
45910: LD_ADDR_VAR 0 8
45914: PUSH
45915: LD_VAR 0 5
45919: PUSH
45920: LD_INT 2
45922: ARRAY
45923: ST_TO_ADDR
// break ;
45924: GO 45928
// end ;
45926: GO 45886
45928: POP
45929: POP
// if not weapon then
45930: LD_VAR 0 8
45934: NOT
45935: IFFALSE 45939
// continue ;
45937: GO 45835
// for k in factories do
45939: LD_ADDR_VAR 0 6
45943: PUSH
45944: LD_VAR 0 2
45948: PUSH
45949: FOR_IN
45950: IFFALSE 46015
// begin weapons := AvailableWeaponList ( k ) ;
45952: LD_ADDR_VAR 0 9
45956: PUSH
45957: LD_VAR 0 6
45961: PPUSH
45962: CALL_OW 478
45966: ST_TO_ADDR
// if not weapons then
45967: LD_VAR 0 9
45971: NOT
45972: IFFALSE 45976
// continue ;
45974: GO 45949
// if weapon in weapons then
45976: LD_VAR 0 8
45980: PUSH
45981: LD_VAR 0 9
45985: IN
45986: IFFALSE 46013
// begin result := [ i , weapon ] ;
45988: LD_ADDR_VAR 0 3
45992: PUSH
45993: LD_VAR 0 4
45997: PUSH
45998: LD_VAR 0 8
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// exit ;
46007: POP
46008: POP
46009: POP
46010: POP
46011: GO 46021
// end ; end ;
46013: GO 45949
46015: POP
46016: POP
// end ;
46017: GO 45835
46019: POP
46020: POP
// end ;
46021: LD_VAR 0 3
46025: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46026: LD_INT 0
46028: PPUSH
// if not side or side > 8 then
46029: LD_VAR 0 3
46033: NOT
46034: PUSH
46035: LD_VAR 0 3
46039: PUSH
46040: LD_INT 8
46042: GREATER
46043: OR
46044: IFFALSE 46048
// exit ;
46046: GO 46107
// if not range then
46048: LD_VAR 0 4
46052: NOT
46053: IFFALSE 46064
// range := - 12 ;
46055: LD_ADDR_VAR 0 4
46059: PUSH
46060: LD_INT 12
46062: NEG
46063: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46064: LD_VAR 0 1
46068: PPUSH
46069: LD_VAR 0 2
46073: PPUSH
46074: LD_VAR 0 3
46078: PPUSH
46079: LD_VAR 0 4
46083: PPUSH
46084: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46088: LD_VAR 0 1
46092: PPUSH
46093: LD_VAR 0 2
46097: PPUSH
46098: LD_VAR 0 3
46102: PPUSH
46103: CALL_OW 331
// end ;
46107: LD_VAR 0 5
46111: RET
// export function Video ( mode ) ; begin
46112: LD_INT 0
46114: PPUSH
// ingame_video = mode ;
46115: LD_ADDR_OWVAR 52
46119: PUSH
46120: LD_VAR 0 1
46124: ST_TO_ADDR
// interface_hidden = mode ;
46125: LD_ADDR_OWVAR 54
46129: PUSH
46130: LD_VAR 0 1
46134: ST_TO_ADDR
// end ;
46135: LD_VAR 0 2
46139: RET
// export function Join ( array , element ) ; begin
46140: LD_INT 0
46142: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46143: LD_ADDR_VAR 0 3
46147: PUSH
46148: LD_VAR 0 1
46152: PPUSH
46153: LD_VAR 0 1
46157: PUSH
46158: LD_INT 1
46160: PLUS
46161: PPUSH
46162: LD_VAR 0 2
46166: PPUSH
46167: CALL_OW 1
46171: ST_TO_ADDR
// end ;
46172: LD_VAR 0 3
46176: RET
// export function JoinUnion ( array , element ) ; begin
46177: LD_INT 0
46179: PPUSH
// result := array union element ;
46180: LD_ADDR_VAR 0 3
46184: PUSH
46185: LD_VAR 0 1
46189: PUSH
46190: LD_VAR 0 2
46194: UNION
46195: ST_TO_ADDR
// end ;
46196: LD_VAR 0 3
46200: RET
// export function GetBehemoths ( side ) ; begin
46201: LD_INT 0
46203: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46204: LD_ADDR_VAR 0 2
46208: PUSH
46209: LD_INT 22
46211: PUSH
46212: LD_VAR 0 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 31
46223: PUSH
46224: LD_INT 25
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PPUSH
46235: CALL_OW 69
46239: ST_TO_ADDR
// end ;
46240: LD_VAR 0 2
46244: RET
// export function Shuffle ( array ) ; var i , index ; begin
46245: LD_INT 0
46247: PPUSH
46248: PPUSH
46249: PPUSH
// result := [ ] ;
46250: LD_ADDR_VAR 0 2
46254: PUSH
46255: EMPTY
46256: ST_TO_ADDR
// if not array then
46257: LD_VAR 0 1
46261: NOT
46262: IFFALSE 46266
// exit ;
46264: GO 46365
// Randomize ;
46266: CALL_OW 10
// for i = array downto 1 do
46270: LD_ADDR_VAR 0 3
46274: PUSH
46275: DOUBLE
46276: LD_VAR 0 1
46280: INC
46281: ST_TO_ADDR
46282: LD_INT 1
46284: PUSH
46285: FOR_DOWNTO
46286: IFFALSE 46363
// begin index := rand ( 1 , array ) ;
46288: LD_ADDR_VAR 0 4
46292: PUSH
46293: LD_INT 1
46295: PPUSH
46296: LD_VAR 0 1
46300: PPUSH
46301: CALL_OW 12
46305: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46306: LD_ADDR_VAR 0 2
46310: PUSH
46311: LD_VAR 0 2
46315: PPUSH
46316: LD_VAR 0 2
46320: PUSH
46321: LD_INT 1
46323: PLUS
46324: PPUSH
46325: LD_VAR 0 1
46329: PUSH
46330: LD_VAR 0 4
46334: ARRAY
46335: PPUSH
46336: CALL_OW 2
46340: ST_TO_ADDR
// array := Delete ( array , index ) ;
46341: LD_ADDR_VAR 0 1
46345: PUSH
46346: LD_VAR 0 1
46350: PPUSH
46351: LD_VAR 0 4
46355: PPUSH
46356: CALL_OW 3
46360: ST_TO_ADDR
// end ;
46361: GO 46285
46363: POP
46364: POP
// end ;
46365: LD_VAR 0 2
46369: RET
// export function GetBaseMaterials ( base ) ; begin
46370: LD_INT 0
46372: PPUSH
// result := [ 0 , 0 , 0 ] ;
46373: LD_ADDR_VAR 0 2
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: LIST
46391: ST_TO_ADDR
// if not base then
46392: LD_VAR 0 1
46396: NOT
46397: IFFALSE 46401
// exit ;
46399: GO 46450
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46401: LD_ADDR_VAR 0 2
46405: PUSH
46406: LD_VAR 0 1
46410: PPUSH
46411: LD_INT 1
46413: PPUSH
46414: CALL_OW 275
46418: PUSH
46419: LD_VAR 0 1
46423: PPUSH
46424: LD_INT 2
46426: PPUSH
46427: CALL_OW 275
46431: PUSH
46432: LD_VAR 0 1
46436: PPUSH
46437: LD_INT 3
46439: PPUSH
46440: CALL_OW 275
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: ST_TO_ADDR
// end ;
46450: LD_VAR 0 2
46454: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46455: LD_INT 0
46457: PPUSH
46458: PPUSH
// result := array ;
46459: LD_ADDR_VAR 0 3
46463: PUSH
46464: LD_VAR 0 1
46468: ST_TO_ADDR
// if size >= result then
46469: LD_VAR 0 2
46473: PUSH
46474: LD_VAR 0 3
46478: GREATEREQUAL
46479: IFFALSE 46483
// exit ;
46481: GO 46533
// if size then
46483: LD_VAR 0 2
46487: IFFALSE 46533
// for i := array downto size do
46489: LD_ADDR_VAR 0 4
46493: PUSH
46494: DOUBLE
46495: LD_VAR 0 1
46499: INC
46500: ST_TO_ADDR
46501: LD_VAR 0 2
46505: PUSH
46506: FOR_DOWNTO
46507: IFFALSE 46531
// result := Delete ( result , result ) ;
46509: LD_ADDR_VAR 0 3
46513: PUSH
46514: LD_VAR 0 3
46518: PPUSH
46519: LD_VAR 0 3
46523: PPUSH
46524: CALL_OW 3
46528: ST_TO_ADDR
46529: GO 46506
46531: POP
46532: POP
// end ;
46533: LD_VAR 0 3
46537: RET
// export function ComExit ( unit ) ; var tmp ; begin
46538: LD_INT 0
46540: PPUSH
46541: PPUSH
// if not IsInUnit ( unit ) then
46542: LD_VAR 0 1
46546: PPUSH
46547: CALL_OW 310
46551: NOT
46552: IFFALSE 46556
// exit ;
46554: GO 46616
// tmp := IsInUnit ( unit ) ;
46556: LD_ADDR_VAR 0 3
46560: PUSH
46561: LD_VAR 0 1
46565: PPUSH
46566: CALL_OW 310
46570: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46571: LD_VAR 0 3
46575: PPUSH
46576: CALL_OW 247
46580: PUSH
46581: LD_INT 2
46583: EQUAL
46584: IFFALSE 46597
// ComExitVehicle ( unit ) else
46586: LD_VAR 0 1
46590: PPUSH
46591: CALL_OW 121
46595: GO 46606
// ComExitBuilding ( unit ) ;
46597: LD_VAR 0 1
46601: PPUSH
46602: CALL_OW 122
// result := tmp ;
46606: LD_ADDR_VAR 0 2
46610: PUSH
46611: LD_VAR 0 3
46615: ST_TO_ADDR
// end ;
46616: LD_VAR 0 2
46620: RET
// export function ComExitAll ( units ) ; var i ; begin
46621: LD_INT 0
46623: PPUSH
46624: PPUSH
// if not units then
46625: LD_VAR 0 1
46629: NOT
46630: IFFALSE 46634
// exit ;
46632: GO 46660
// for i in units do
46634: LD_ADDR_VAR 0 3
46638: PUSH
46639: LD_VAR 0 1
46643: PUSH
46644: FOR_IN
46645: IFFALSE 46658
// ComExit ( i ) ;
46647: LD_VAR 0 3
46651: PPUSH
46652: CALL 46538 0 1
46656: GO 46644
46658: POP
46659: POP
// end ;
46660: LD_VAR 0 2
46664: RET
// export function ResetHc ; begin
46665: LD_INT 0
46667: PPUSH
// InitHc ;
46668: CALL_OW 19
// hc_importance := 0 ;
46672: LD_ADDR_OWVAR 32
46676: PUSH
46677: LD_INT 0
46679: ST_TO_ADDR
// end ;
46680: LD_VAR 0 1
46684: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
46685: LD_INT 0
46687: PPUSH
46688: PPUSH
46689: PPUSH
// _x := ( x1 + x2 ) div 2 ;
46690: LD_ADDR_VAR 0 6
46694: PUSH
46695: LD_VAR 0 1
46699: PUSH
46700: LD_VAR 0 3
46704: PLUS
46705: PUSH
46706: LD_INT 2
46708: DIV
46709: ST_TO_ADDR
// if _x < 0 then
46710: LD_VAR 0 6
46714: PUSH
46715: LD_INT 0
46717: LESS
46718: IFFALSE 46735
// _x := _x * - 1 ;
46720: LD_ADDR_VAR 0 6
46724: PUSH
46725: LD_VAR 0 6
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: MUL
46734: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46735: LD_ADDR_VAR 0 7
46739: PUSH
46740: LD_VAR 0 2
46744: PUSH
46745: LD_VAR 0 4
46749: PLUS
46750: PUSH
46751: LD_INT 2
46753: DIV
46754: ST_TO_ADDR
// if _y < 0 then
46755: LD_VAR 0 7
46759: PUSH
46760: LD_INT 0
46762: LESS
46763: IFFALSE 46780
// _y := _y * - 1 ;
46765: LD_ADDR_VAR 0 7
46769: PUSH
46770: LD_VAR 0 7
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: MUL
46779: ST_TO_ADDR
// result := [ _x , _y ] ;
46780: LD_ADDR_VAR 0 5
46784: PUSH
46785: LD_VAR 0 6
46789: PUSH
46790: LD_VAR 0 7
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: ST_TO_ADDR
// end ;
46799: LD_VAR 0 5
46803: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46804: LD_INT 0
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
// task := GetTaskList ( unit ) ;
46810: LD_ADDR_VAR 0 7
46814: PUSH
46815: LD_VAR 0 1
46819: PPUSH
46820: CALL_OW 437
46824: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
46825: LD_VAR 0 7
46829: NOT
46830: PUSH
46831: LD_VAR 0 1
46835: PPUSH
46836: LD_VAR 0 2
46840: PPUSH
46841: CALL_OW 308
46845: NOT
46846: AND
46847: IFFALSE 46851
// exit ;
46849: GO 46969
// if IsInArea ( unit , area ) then
46851: LD_VAR 0 1
46855: PPUSH
46856: LD_VAR 0 2
46860: PPUSH
46861: CALL_OW 308
46865: IFFALSE 46883
// begin ComMoveToArea ( unit , goAway ) ;
46867: LD_VAR 0 1
46871: PPUSH
46872: LD_VAR 0 3
46876: PPUSH
46877: CALL_OW 113
// exit ;
46881: GO 46969
// end ; if task [ 1 ] [ 1 ] <> M then
46883: LD_VAR 0 7
46887: PUSH
46888: LD_INT 1
46890: ARRAY
46891: PUSH
46892: LD_INT 1
46894: ARRAY
46895: PUSH
46896: LD_STRING M
46898: NONEQUAL
46899: IFFALSE 46903
// exit ;
46901: GO 46969
// x := task [ 1 ] [ 2 ] ;
46903: LD_ADDR_VAR 0 5
46907: PUSH
46908: LD_VAR 0 7
46912: PUSH
46913: LD_INT 1
46915: ARRAY
46916: PUSH
46917: LD_INT 2
46919: ARRAY
46920: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
46921: LD_ADDR_VAR 0 6
46925: PUSH
46926: LD_VAR 0 7
46930: PUSH
46931: LD_INT 1
46933: ARRAY
46934: PUSH
46935: LD_INT 3
46937: ARRAY
46938: ST_TO_ADDR
// if InArea ( x , y , area ) then
46939: LD_VAR 0 5
46943: PPUSH
46944: LD_VAR 0 6
46948: PPUSH
46949: LD_VAR 0 2
46953: PPUSH
46954: CALL_OW 309
46958: IFFALSE 46969
// ComStop ( unit ) ;
46960: LD_VAR 0 1
46964: PPUSH
46965: CALL_OW 141
// end ;
46969: LD_VAR 0 4
46973: RET
// export function Abs ( value ) ; begin
46974: LD_INT 0
46976: PPUSH
// result := value ;
46977: LD_ADDR_VAR 0 2
46981: PUSH
46982: LD_VAR 0 1
46986: ST_TO_ADDR
// if value < 0 then
46987: LD_VAR 0 1
46991: PUSH
46992: LD_INT 0
46994: LESS
46995: IFFALSE 47012
// result := value * - 1 ;
46997: LD_ADDR_VAR 0 2
47001: PUSH
47002: LD_VAR 0 1
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: MUL
47011: ST_TO_ADDR
// end ;
47012: LD_VAR 0 2
47016: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47017: LD_INT 0
47019: PPUSH
47020: PPUSH
47021: PPUSH
47022: PPUSH
47023: PPUSH
47024: PPUSH
47025: PPUSH
47026: PPUSH
// if not unit or not building then
47027: LD_VAR 0 1
47031: NOT
47032: PUSH
47033: LD_VAR 0 2
47037: NOT
47038: OR
47039: IFFALSE 47043
// exit ;
47041: GO 47269
// x := GetX ( building ) ;
47043: LD_ADDR_VAR 0 4
47047: PUSH
47048: LD_VAR 0 2
47052: PPUSH
47053: CALL_OW 250
47057: ST_TO_ADDR
// y := GetY ( building ) ;
47058: LD_ADDR_VAR 0 6
47062: PUSH
47063: LD_VAR 0 2
47067: PPUSH
47068: CALL_OW 251
47072: ST_TO_ADDR
// d := GetDir ( building ) ;
47073: LD_ADDR_VAR 0 8
47077: PUSH
47078: LD_VAR 0 2
47082: PPUSH
47083: CALL_OW 254
47087: ST_TO_ADDR
// r := 4 ;
47088: LD_ADDR_VAR 0 9
47092: PUSH
47093: LD_INT 4
47095: ST_TO_ADDR
// for i := 1 to 5 do
47096: LD_ADDR_VAR 0 10
47100: PUSH
47101: DOUBLE
47102: LD_INT 1
47104: DEC
47105: ST_TO_ADDR
47106: LD_INT 5
47108: PUSH
47109: FOR_TO
47110: IFFALSE 47267
// begin _x := ShiftX ( x , d , r + i ) ;
47112: LD_ADDR_VAR 0 5
47116: PUSH
47117: LD_VAR 0 4
47121: PPUSH
47122: LD_VAR 0 8
47126: PPUSH
47127: LD_VAR 0 9
47131: PUSH
47132: LD_VAR 0 10
47136: PLUS
47137: PPUSH
47138: CALL_OW 272
47142: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47143: LD_ADDR_VAR 0 7
47147: PUSH
47148: LD_VAR 0 6
47152: PPUSH
47153: LD_VAR 0 8
47157: PPUSH
47158: LD_VAR 0 9
47162: PUSH
47163: LD_VAR 0 10
47167: PLUS
47168: PPUSH
47169: CALL_OW 273
47173: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47174: LD_VAR 0 5
47178: PPUSH
47179: LD_VAR 0 7
47183: PPUSH
47184: CALL_OW 488
47188: PUSH
47189: LD_VAR 0 5
47193: PPUSH
47194: LD_VAR 0 7
47198: PPUSH
47199: CALL_OW 428
47203: PPUSH
47204: CALL_OW 247
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: IN
47219: NOT
47220: AND
47221: IFFALSE 47265
// begin ComMoveXY ( unit , _x , _y ) ;
47223: LD_VAR 0 1
47227: PPUSH
47228: LD_VAR 0 5
47232: PPUSH
47233: LD_VAR 0 7
47237: PPUSH
47238: CALL_OW 111
// result := [ _x , _y ] ;
47242: LD_ADDR_VAR 0 3
47246: PUSH
47247: LD_VAR 0 5
47251: PUSH
47252: LD_VAR 0 7
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: ST_TO_ADDR
// exit ;
47261: POP
47262: POP
47263: GO 47269
// end ; end ;
47265: GO 47109
47267: POP
47268: POP
// end ;
47269: LD_VAR 0 3
47273: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47274: LD_INT 0
47276: PPUSH
47277: PPUSH
47278: PPUSH
// result := 0 ;
47279: LD_ADDR_VAR 0 3
47283: PUSH
47284: LD_INT 0
47286: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47287: LD_VAR 0 1
47291: PUSH
47292: LD_INT 0
47294: LESS
47295: PUSH
47296: LD_VAR 0 1
47300: PUSH
47301: LD_INT 8
47303: GREATER
47304: OR
47305: PUSH
47306: LD_VAR 0 2
47310: PUSH
47311: LD_INT 0
47313: LESS
47314: OR
47315: PUSH
47316: LD_VAR 0 2
47320: PUSH
47321: LD_INT 8
47323: GREATER
47324: OR
47325: IFFALSE 47329
// exit ;
47327: GO 47404
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47329: LD_ADDR_VAR 0 4
47333: PUSH
47334: LD_INT 22
47336: PUSH
47337: LD_VAR 0 2
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PPUSH
47346: CALL_OW 69
47350: PUSH
47351: FOR_IN
47352: IFFALSE 47402
// begin un := UnitShoot ( i ) ;
47354: LD_ADDR_VAR 0 5
47358: PUSH
47359: LD_VAR 0 4
47363: PPUSH
47364: CALL_OW 504
47368: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47369: LD_VAR 0 5
47373: PPUSH
47374: CALL_OW 255
47378: PUSH
47379: LD_VAR 0 1
47383: EQUAL
47384: IFFALSE 47400
// begin result := un ;
47386: LD_ADDR_VAR 0 3
47390: PUSH
47391: LD_VAR 0 5
47395: ST_TO_ADDR
// exit ;
47396: POP
47397: POP
47398: GO 47404
// end ; end ;
47400: GO 47351
47402: POP
47403: POP
// end ;
47404: LD_VAR 0 3
47408: RET
// export function GetCargoBay ( units ) ; begin
47409: LD_INT 0
47411: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47412: LD_ADDR_VAR 0 2
47416: PUSH
47417: LD_VAR 0 1
47421: PPUSH
47422: LD_INT 2
47424: PUSH
47425: LD_INT 34
47427: PUSH
47428: LD_INT 12
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 34
47437: PUSH
47438: LD_INT 51
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 34
47447: PUSH
47448: LD_INT 32
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 34
47457: PUSH
47458: LD_INT 89
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: PPUSH
47472: CALL_OW 72
47476: ST_TO_ADDR
// end ;
47477: LD_VAR 0 2
47481: RET
// export function Negate ( value ) ; begin
47482: LD_INT 0
47484: PPUSH
// result := not value ;
47485: LD_ADDR_VAR 0 2
47489: PUSH
47490: LD_VAR 0 1
47494: NOT
47495: ST_TO_ADDR
// end ;
47496: LD_VAR 0 2
47500: RET
// export function Inc ( value ) ; begin
47501: LD_INT 0
47503: PPUSH
// result := value + 1 ;
47504: LD_ADDR_VAR 0 2
47508: PUSH
47509: LD_VAR 0 1
47513: PUSH
47514: LD_INT 1
47516: PLUS
47517: ST_TO_ADDR
// end ;
47518: LD_VAR 0 2
47522: RET
// export function Dec ( value ) ; begin
47523: LD_INT 0
47525: PPUSH
// result := value - 1 ;
47526: LD_ADDR_VAR 0 2
47530: PUSH
47531: LD_VAR 0 1
47535: PUSH
47536: LD_INT 1
47538: MINUS
47539: ST_TO_ADDR
// end ;
47540: LD_VAR 0 2
47544: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47545: LD_INT 0
47547: PPUSH
47548: PPUSH
47549: PPUSH
47550: PPUSH
47551: PPUSH
47552: PPUSH
47553: PPUSH
47554: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47555: LD_VAR 0 1
47559: PPUSH
47560: LD_VAR 0 2
47564: PPUSH
47565: CALL_OW 488
47569: NOT
47570: PUSH
47571: LD_VAR 0 3
47575: PPUSH
47576: LD_VAR 0 4
47580: PPUSH
47581: CALL_OW 488
47585: NOT
47586: OR
47587: IFFALSE 47600
// begin result := - 1 ;
47589: LD_ADDR_VAR 0 5
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: ST_TO_ADDR
// exit ;
47598: GO 47835
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
47600: LD_ADDR_VAR 0 12
47604: PUSH
47605: LD_VAR 0 1
47609: PPUSH
47610: LD_VAR 0 2
47614: PPUSH
47615: LD_VAR 0 3
47619: PPUSH
47620: LD_VAR 0 4
47624: PPUSH
47625: CALL 46685 0 4
47629: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
47630: LD_ADDR_VAR 0 11
47634: PUSH
47635: LD_VAR 0 1
47639: PPUSH
47640: LD_VAR 0 2
47644: PPUSH
47645: LD_VAR 0 12
47649: PUSH
47650: LD_INT 1
47652: ARRAY
47653: PPUSH
47654: LD_VAR 0 12
47658: PUSH
47659: LD_INT 2
47661: ARRAY
47662: PPUSH
47663: CALL_OW 298
47667: ST_TO_ADDR
// distance := 9999 ;
47668: LD_ADDR_VAR 0 10
47672: PUSH
47673: LD_INT 9999
47675: ST_TO_ADDR
// for i := 0 to 5 do
47676: LD_ADDR_VAR 0 6
47680: PUSH
47681: DOUBLE
47682: LD_INT 0
47684: DEC
47685: ST_TO_ADDR
47686: LD_INT 5
47688: PUSH
47689: FOR_TO
47690: IFFALSE 47833
// begin _x := ShiftX ( x1 , i , centerDist ) ;
47692: LD_ADDR_VAR 0 7
47696: PUSH
47697: LD_VAR 0 1
47701: PPUSH
47702: LD_VAR 0 6
47706: PPUSH
47707: LD_VAR 0 11
47711: PPUSH
47712: CALL_OW 272
47716: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
47717: LD_ADDR_VAR 0 8
47721: PUSH
47722: LD_VAR 0 2
47726: PPUSH
47727: LD_VAR 0 6
47731: PPUSH
47732: LD_VAR 0 11
47736: PPUSH
47737: CALL_OW 273
47741: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47742: LD_VAR 0 7
47746: PPUSH
47747: LD_VAR 0 8
47751: PPUSH
47752: CALL_OW 488
47756: NOT
47757: IFFALSE 47761
// continue ;
47759: GO 47689
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
47761: LD_ADDR_VAR 0 9
47765: PUSH
47766: LD_VAR 0 12
47770: PUSH
47771: LD_INT 1
47773: ARRAY
47774: PPUSH
47775: LD_VAR 0 12
47779: PUSH
47780: LD_INT 2
47782: ARRAY
47783: PPUSH
47784: LD_VAR 0 7
47788: PPUSH
47789: LD_VAR 0 8
47793: PPUSH
47794: CALL_OW 298
47798: ST_TO_ADDR
// if tmp < distance then
47799: LD_VAR 0 9
47803: PUSH
47804: LD_VAR 0 10
47808: LESS
47809: IFFALSE 47831
// begin result := i ;
47811: LD_ADDR_VAR 0 5
47815: PUSH
47816: LD_VAR 0 6
47820: ST_TO_ADDR
// distance := tmp ;
47821: LD_ADDR_VAR 0 10
47825: PUSH
47826: LD_VAR 0 9
47830: ST_TO_ADDR
// end ; end ;
47831: GO 47689
47833: POP
47834: POP
// end ;
47835: LD_VAR 0 5
47839: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47840: LD_INT 0
47842: PPUSH
47843: PPUSH
// if not driver or not IsInUnit ( driver ) then
47844: LD_VAR 0 1
47848: NOT
47849: PUSH
47850: LD_VAR 0 1
47854: PPUSH
47855: CALL_OW 310
47859: NOT
47860: OR
47861: IFFALSE 47865
// exit ;
47863: GO 47955
// vehicle := IsInUnit ( driver ) ;
47865: LD_ADDR_VAR 0 3
47869: PUSH
47870: LD_VAR 0 1
47874: PPUSH
47875: CALL_OW 310
47879: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47880: LD_VAR 0 1
47884: PPUSH
47885: LD_STRING \
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: PUSH
47915: LD_STRING E
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: LD_VAR 0 3
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PPUSH
47951: CALL_OW 446
// end ;
47955: LD_VAR 0 2
47959: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47960: LD_INT 0
47962: PPUSH
47963: PPUSH
// if not driver or not IsInUnit ( driver ) then
47964: LD_VAR 0 1
47968: NOT
47969: PUSH
47970: LD_VAR 0 1
47974: PPUSH
47975: CALL_OW 310
47979: NOT
47980: OR
47981: IFFALSE 47985
// exit ;
47983: GO 48075
// vehicle := IsInUnit ( driver ) ;
47985: LD_ADDR_VAR 0 3
47989: PUSH
47990: LD_VAR 0 1
47994: PPUSH
47995: CALL_OW 310
47999: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48000: LD_VAR 0 1
48004: PPUSH
48005: LD_STRING \
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: PUSH
48035: LD_STRING E
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_VAR 0 3
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PPUSH
48071: CALL_OW 447
// end ;
48075: LD_VAR 0 2
48079: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48080: LD_INT 0
48082: PPUSH
48083: PPUSH
48084: PPUSH
// tmp := [ ] ;
48085: LD_ADDR_VAR 0 5
48089: PUSH
48090: EMPTY
48091: ST_TO_ADDR
// for i in units do
48092: LD_ADDR_VAR 0 4
48096: PUSH
48097: LD_VAR 0 1
48101: PUSH
48102: FOR_IN
48103: IFFALSE 48141
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48105: LD_ADDR_VAR 0 5
48109: PUSH
48110: LD_VAR 0 5
48114: PPUSH
48115: LD_VAR 0 5
48119: PUSH
48120: LD_INT 1
48122: PLUS
48123: PPUSH
48124: LD_VAR 0 4
48128: PPUSH
48129: CALL_OW 256
48133: PPUSH
48134: CALL_OW 2
48138: ST_TO_ADDR
48139: GO 48102
48141: POP
48142: POP
// if not tmp then
48143: LD_VAR 0 5
48147: NOT
48148: IFFALSE 48152
// exit ;
48150: GO 48200
// if asc then
48152: LD_VAR 0 2
48156: IFFALSE 48180
// result := SortListByListAsc ( units , tmp ) else
48158: LD_ADDR_VAR 0 3
48162: PUSH
48163: LD_VAR 0 1
48167: PPUSH
48168: LD_VAR 0 5
48172: PPUSH
48173: CALL_OW 76
48177: ST_TO_ADDR
48178: GO 48200
// result := SortListByListDesc ( units , tmp ) ;
48180: LD_ADDR_VAR 0 3
48184: PUSH
48185: LD_VAR 0 1
48189: PPUSH
48190: LD_VAR 0 5
48194: PPUSH
48195: CALL_OW 77
48199: ST_TO_ADDR
// end ;
48200: LD_VAR 0 3
48204: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48205: LD_INT 0
48207: PPUSH
48208: PPUSH
// task := GetTaskList ( mech ) ;
48209: LD_ADDR_VAR 0 4
48213: PUSH
48214: LD_VAR 0 1
48218: PPUSH
48219: CALL_OW 437
48223: ST_TO_ADDR
// if not task then
48224: LD_VAR 0 4
48228: NOT
48229: IFFALSE 48233
// exit ;
48231: GO 48275
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48233: LD_ADDR_VAR 0 3
48237: PUSH
48238: LD_VAR 0 4
48242: PUSH
48243: LD_INT 1
48245: ARRAY
48246: PUSH
48247: LD_INT 1
48249: ARRAY
48250: PUSH
48251: LD_STRING r
48253: EQUAL
48254: PUSH
48255: LD_VAR 0 4
48259: PUSH
48260: LD_INT 1
48262: ARRAY
48263: PUSH
48264: LD_INT 4
48266: ARRAY
48267: PUSH
48268: LD_VAR 0 2
48272: EQUAL
48273: AND
48274: ST_TO_ADDR
// end ;
48275: LD_VAR 0 3
48279: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48280: LD_INT 0
48282: PPUSH
// SetDir ( unit , d ) ;
48283: LD_VAR 0 1
48287: PPUSH
48288: LD_VAR 0 4
48292: PPUSH
48293: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48297: LD_VAR 0 1
48301: PPUSH
48302: LD_VAR 0 2
48306: PPUSH
48307: LD_VAR 0 3
48311: PPUSH
48312: LD_VAR 0 5
48316: PPUSH
48317: CALL_OW 48
// end ;
48321: LD_VAR 0 6
48325: RET
// export function ToNaturalNumber ( number ) ; begin
48326: LD_INT 0
48328: PPUSH
// result := number div 1 ;
48329: LD_ADDR_VAR 0 2
48333: PUSH
48334: LD_VAR 0 1
48338: PUSH
48339: LD_INT 1
48341: DIV
48342: ST_TO_ADDR
// if number < 0 then
48343: LD_VAR 0 1
48347: PUSH
48348: LD_INT 0
48350: LESS
48351: IFFALSE 48361
// result := 0 ;
48353: LD_ADDR_VAR 0 2
48357: PUSH
48358: LD_INT 0
48360: ST_TO_ADDR
// end ;
48361: LD_VAR 0 2
48365: RET
// export function SortByClass ( units , class ) ; var un ; begin
48366: LD_INT 0
48368: PPUSH
48369: PPUSH
// if not units or not class then
48370: LD_VAR 0 1
48374: NOT
48375: PUSH
48376: LD_VAR 0 2
48380: NOT
48381: OR
48382: IFFALSE 48386
// exit ;
48384: GO 48481
// result := [ ] ;
48386: LD_ADDR_VAR 0 3
48390: PUSH
48391: EMPTY
48392: ST_TO_ADDR
// for un in units do
48393: LD_ADDR_VAR 0 4
48397: PUSH
48398: LD_VAR 0 1
48402: PUSH
48403: FOR_IN
48404: IFFALSE 48479
// if GetClass ( un ) = class then
48406: LD_VAR 0 4
48410: PPUSH
48411: CALL_OW 257
48415: PUSH
48416: LD_VAR 0 2
48420: EQUAL
48421: IFFALSE 48448
// result := Insert ( result , 1 , un ) else
48423: LD_ADDR_VAR 0 3
48427: PUSH
48428: LD_VAR 0 3
48432: PPUSH
48433: LD_INT 1
48435: PPUSH
48436: LD_VAR 0 4
48440: PPUSH
48441: CALL_OW 2
48445: ST_TO_ADDR
48446: GO 48477
// result := Replace ( result , result + 1 , un ) ;
48448: LD_ADDR_VAR 0 3
48452: PUSH
48453: LD_VAR 0 3
48457: PPUSH
48458: LD_VAR 0 3
48462: PUSH
48463: LD_INT 1
48465: PLUS
48466: PPUSH
48467: LD_VAR 0 4
48471: PPUSH
48472: CALL_OW 1
48476: ST_TO_ADDR
48477: GO 48403
48479: POP
48480: POP
// end ;
48481: LD_VAR 0 3
48485: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48486: LD_INT 0
48488: PPUSH
48489: PPUSH
48490: PPUSH
48491: PPUSH
48492: PPUSH
48493: PPUSH
48494: PPUSH
// result := [ ] ;
48495: LD_ADDR_VAR 0 4
48499: PUSH
48500: EMPTY
48501: ST_TO_ADDR
// if x - r < 0 then
48502: LD_VAR 0 1
48506: PUSH
48507: LD_VAR 0 3
48511: MINUS
48512: PUSH
48513: LD_INT 0
48515: LESS
48516: IFFALSE 48528
// min_x := 0 else
48518: LD_ADDR_VAR 0 8
48522: PUSH
48523: LD_INT 0
48525: ST_TO_ADDR
48526: GO 48544
// min_x := x - r ;
48528: LD_ADDR_VAR 0 8
48532: PUSH
48533: LD_VAR 0 1
48537: PUSH
48538: LD_VAR 0 3
48542: MINUS
48543: ST_TO_ADDR
// if y - r < 0 then
48544: LD_VAR 0 2
48548: PUSH
48549: LD_VAR 0 3
48553: MINUS
48554: PUSH
48555: LD_INT 0
48557: LESS
48558: IFFALSE 48570
// min_y := 0 else
48560: LD_ADDR_VAR 0 7
48564: PUSH
48565: LD_INT 0
48567: ST_TO_ADDR
48568: GO 48586
// min_y := y - r ;
48570: LD_ADDR_VAR 0 7
48574: PUSH
48575: LD_VAR 0 2
48579: PUSH
48580: LD_VAR 0 3
48584: MINUS
48585: ST_TO_ADDR
// max_x := x + r ;
48586: LD_ADDR_VAR 0 9
48590: PUSH
48591: LD_VAR 0 1
48595: PUSH
48596: LD_VAR 0 3
48600: PLUS
48601: ST_TO_ADDR
// max_y := y + r ;
48602: LD_ADDR_VAR 0 10
48606: PUSH
48607: LD_VAR 0 2
48611: PUSH
48612: LD_VAR 0 3
48616: PLUS
48617: ST_TO_ADDR
// for _x = min_x to max_x do
48618: LD_ADDR_VAR 0 5
48622: PUSH
48623: DOUBLE
48624: LD_VAR 0 8
48628: DEC
48629: ST_TO_ADDR
48630: LD_VAR 0 9
48634: PUSH
48635: FOR_TO
48636: IFFALSE 48737
// for _y = min_y to max_y do
48638: LD_ADDR_VAR 0 6
48642: PUSH
48643: DOUBLE
48644: LD_VAR 0 7
48648: DEC
48649: ST_TO_ADDR
48650: LD_VAR 0 10
48654: PUSH
48655: FOR_TO
48656: IFFALSE 48733
// begin if not ValidHex ( _x , _y ) then
48658: LD_VAR 0 5
48662: PPUSH
48663: LD_VAR 0 6
48667: PPUSH
48668: CALL_OW 488
48672: NOT
48673: IFFALSE 48677
// continue ;
48675: GO 48655
// if GetResourceTypeXY ( _x , _y ) then
48677: LD_VAR 0 5
48681: PPUSH
48682: LD_VAR 0 6
48686: PPUSH
48687: CALL_OW 283
48691: IFFALSE 48731
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
48693: LD_ADDR_VAR 0 4
48697: PUSH
48698: LD_VAR 0 4
48702: PPUSH
48703: LD_VAR 0 4
48707: PUSH
48708: LD_INT 1
48710: PLUS
48711: PPUSH
48712: LD_VAR 0 5
48716: PUSH
48717: LD_VAR 0 6
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PPUSH
48726: CALL_OW 1
48730: ST_TO_ADDR
// end ;
48731: GO 48655
48733: POP
48734: POP
48735: GO 48635
48737: POP
48738: POP
// end ;
48739: LD_VAR 0 4
48743: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
48744: LD_INT 0
48746: PPUSH
48747: PPUSH
48748: PPUSH
48749: PPUSH
48750: PPUSH
48751: PPUSH
48752: PPUSH
48753: PPUSH
// if not units then
48754: LD_VAR 0 1
48758: NOT
48759: IFFALSE 48763
// exit ;
48761: GO 49287
// result := UnitFilter ( units , [ f_ok ] ) ;
48763: LD_ADDR_VAR 0 3
48767: PUSH
48768: LD_VAR 0 1
48772: PPUSH
48773: LD_INT 50
48775: PUSH
48776: EMPTY
48777: LIST
48778: PPUSH
48779: CALL_OW 72
48783: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
48784: LD_ADDR_VAR 0 8
48788: PUSH
48789: LD_VAR 0 1
48793: PUSH
48794: LD_INT 1
48796: ARRAY
48797: PPUSH
48798: CALL_OW 255
48802: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
48803: LD_ADDR_VAR 0 10
48807: PUSH
48808: LD_INT 29
48810: PUSH
48811: LD_INT 91
48813: PUSH
48814: LD_INT 49
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: LIST
48821: ST_TO_ADDR
// if not result then
48822: LD_VAR 0 3
48826: NOT
48827: IFFALSE 48831
// exit ;
48829: GO 49287
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
48831: LD_ADDR_VAR 0 5
48835: PUSH
48836: LD_INT 81
48838: PUSH
48839: LD_VAR 0 8
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PPUSH
48848: CALL_OW 69
48852: ST_TO_ADDR
// for i in result do
48853: LD_ADDR_VAR 0 4
48857: PUSH
48858: LD_VAR 0 3
48862: PUSH
48863: FOR_IN
48864: IFFALSE 49285
// begin tag := GetTag ( i ) + 1 ;
48866: LD_ADDR_VAR 0 9
48870: PUSH
48871: LD_VAR 0 4
48875: PPUSH
48876: CALL_OW 110
48880: PUSH
48881: LD_INT 1
48883: PLUS
48884: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
48885: LD_ADDR_VAR 0 7
48889: PUSH
48890: LD_VAR 0 4
48894: PPUSH
48895: CALL_OW 250
48899: PPUSH
48900: LD_VAR 0 4
48904: PPUSH
48905: CALL_OW 251
48909: PPUSH
48910: LD_INT 6
48912: PPUSH
48913: CALL 48486 0 3
48917: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
48918: LD_VAR 0 4
48922: PPUSH
48923: CALL_OW 247
48927: PUSH
48928: LD_INT 2
48930: EQUAL
48931: PUSH
48932: LD_VAR 0 7
48936: AND
48937: PUSH
48938: LD_VAR 0 4
48942: PPUSH
48943: CALL_OW 264
48947: PUSH
48948: LD_VAR 0 10
48952: IN
48953: NOT
48954: AND
48955: IFFALSE 48994
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
48957: LD_VAR 0 4
48961: PPUSH
48962: LD_VAR 0 7
48966: PUSH
48967: LD_INT 1
48969: ARRAY
48970: PUSH
48971: LD_INT 1
48973: ARRAY
48974: PPUSH
48975: LD_VAR 0 7
48979: PUSH
48980: LD_INT 1
48982: ARRAY
48983: PUSH
48984: LD_INT 2
48986: ARRAY
48987: PPUSH
48988: CALL_OW 116
48992: GO 49283
// if path > tag then
48994: LD_VAR 0 2
48998: PUSH
48999: LD_VAR 0 9
49003: GREATER
49004: IFFALSE 49212
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49006: LD_ADDR_VAR 0 6
49010: PUSH
49011: LD_VAR 0 5
49015: PPUSH
49016: LD_INT 91
49018: PUSH
49019: LD_VAR 0 4
49023: PUSH
49024: LD_INT 8
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: LIST
49031: PPUSH
49032: CALL_OW 72
49036: ST_TO_ADDR
// if nearEnemy then
49037: LD_VAR 0 6
49041: IFFALSE 49110
// begin if GetWeapon ( i ) = ru_time_lapser then
49043: LD_VAR 0 4
49047: PPUSH
49048: CALL_OW 264
49052: PUSH
49053: LD_INT 49
49055: EQUAL
49056: IFFALSE 49084
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49058: LD_VAR 0 4
49062: PPUSH
49063: LD_VAR 0 6
49067: PPUSH
49068: LD_VAR 0 4
49072: PPUSH
49073: CALL_OW 74
49077: PPUSH
49078: CALL_OW 112
49082: GO 49108
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49084: LD_VAR 0 4
49088: PPUSH
49089: LD_VAR 0 6
49093: PPUSH
49094: LD_VAR 0 4
49098: PPUSH
49099: CALL_OW 74
49103: PPUSH
49104: CALL_OW 115
// end else
49108: GO 49210
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49110: LD_VAR 0 4
49114: PPUSH
49115: LD_VAR 0 2
49119: PUSH
49120: LD_VAR 0 9
49124: ARRAY
49125: PUSH
49126: LD_INT 1
49128: ARRAY
49129: PPUSH
49130: LD_VAR 0 2
49134: PUSH
49135: LD_VAR 0 9
49139: ARRAY
49140: PUSH
49141: LD_INT 2
49143: ARRAY
49144: PPUSH
49145: CALL_OW 297
49149: PUSH
49150: LD_INT 6
49152: GREATER
49153: IFFALSE 49196
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49155: LD_VAR 0 4
49159: PPUSH
49160: LD_VAR 0 2
49164: PUSH
49165: LD_VAR 0 9
49169: ARRAY
49170: PUSH
49171: LD_INT 1
49173: ARRAY
49174: PPUSH
49175: LD_VAR 0 2
49179: PUSH
49180: LD_VAR 0 9
49184: ARRAY
49185: PUSH
49186: LD_INT 2
49188: ARRAY
49189: PPUSH
49190: CALL_OW 114
49194: GO 49210
// SetTag ( i , tag ) ;
49196: LD_VAR 0 4
49200: PPUSH
49201: LD_VAR 0 9
49205: PPUSH
49206: CALL_OW 109
// end else
49210: GO 49283
// if enemy then
49212: LD_VAR 0 5
49216: IFFALSE 49283
// begin if GetWeapon ( i ) = ru_time_lapser then
49218: LD_VAR 0 4
49222: PPUSH
49223: CALL_OW 264
49227: PUSH
49228: LD_INT 49
49230: EQUAL
49231: IFFALSE 49259
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49233: LD_VAR 0 4
49237: PPUSH
49238: LD_VAR 0 5
49242: PPUSH
49243: LD_VAR 0 4
49247: PPUSH
49248: CALL_OW 74
49252: PPUSH
49253: CALL_OW 112
49257: GO 49283
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49259: LD_VAR 0 4
49263: PPUSH
49264: LD_VAR 0 5
49268: PPUSH
49269: LD_VAR 0 4
49273: PPUSH
49274: CALL_OW 74
49278: PPUSH
49279: CALL_OW 115
// end ; end ;
49283: GO 48863
49285: POP
49286: POP
// end ;
49287: LD_VAR 0 3
49291: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49292: LD_INT 0
49294: PPUSH
49295: PPUSH
49296: PPUSH
// if not unit or IsInUnit ( unit ) then
49297: LD_VAR 0 1
49301: NOT
49302: PUSH
49303: LD_VAR 0 1
49307: PPUSH
49308: CALL_OW 310
49312: OR
49313: IFFALSE 49317
// exit ;
49315: GO 49408
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49317: LD_ADDR_VAR 0 4
49321: PUSH
49322: LD_VAR 0 1
49326: PPUSH
49327: CALL_OW 250
49331: PPUSH
49332: LD_VAR 0 2
49336: PPUSH
49337: LD_INT 1
49339: PPUSH
49340: CALL_OW 272
49344: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49345: LD_ADDR_VAR 0 5
49349: PUSH
49350: LD_VAR 0 1
49354: PPUSH
49355: CALL_OW 251
49359: PPUSH
49360: LD_VAR 0 2
49364: PPUSH
49365: LD_INT 1
49367: PPUSH
49368: CALL_OW 273
49372: ST_TO_ADDR
// if ValidHex ( x , y ) then
49373: LD_VAR 0 4
49377: PPUSH
49378: LD_VAR 0 5
49382: PPUSH
49383: CALL_OW 488
49387: IFFALSE 49408
// ComTurnXY ( unit , x , y ) ;
49389: LD_VAR 0 1
49393: PPUSH
49394: LD_VAR 0 4
49398: PPUSH
49399: LD_VAR 0 5
49403: PPUSH
49404: CALL_OW 118
// end ;
49408: LD_VAR 0 3
49412: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49413: LD_INT 0
49415: PPUSH
49416: PPUSH
// result := false ;
49417: LD_ADDR_VAR 0 3
49421: PUSH
49422: LD_INT 0
49424: ST_TO_ADDR
// if not units then
49425: LD_VAR 0 2
49429: NOT
49430: IFFALSE 49434
// exit ;
49432: GO 49479
// for i in units do
49434: LD_ADDR_VAR 0 4
49438: PUSH
49439: LD_VAR 0 2
49443: PUSH
49444: FOR_IN
49445: IFFALSE 49477
// if See ( side , i ) then
49447: LD_VAR 0 1
49451: PPUSH
49452: LD_VAR 0 4
49456: PPUSH
49457: CALL_OW 292
49461: IFFALSE 49475
// begin result := true ;
49463: LD_ADDR_VAR 0 3
49467: PUSH
49468: LD_INT 1
49470: ST_TO_ADDR
// exit ;
49471: POP
49472: POP
49473: GO 49479
// end ;
49475: GO 49444
49477: POP
49478: POP
// end ;
49479: LD_VAR 0 3
49483: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49484: LD_INT 0
49486: PPUSH
49487: PPUSH
49488: PPUSH
49489: PPUSH
// if not unit or not points then
49490: LD_VAR 0 1
49494: NOT
49495: PUSH
49496: LD_VAR 0 2
49500: NOT
49501: OR
49502: IFFALSE 49506
// exit ;
49504: GO 49596
// dist := 99999 ;
49506: LD_ADDR_VAR 0 5
49510: PUSH
49511: LD_INT 99999
49513: ST_TO_ADDR
// for i in points do
49514: LD_ADDR_VAR 0 4
49518: PUSH
49519: LD_VAR 0 2
49523: PUSH
49524: FOR_IN
49525: IFFALSE 49594
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49527: LD_ADDR_VAR 0 6
49531: PUSH
49532: LD_VAR 0 1
49536: PPUSH
49537: LD_VAR 0 4
49541: PUSH
49542: LD_INT 1
49544: ARRAY
49545: PPUSH
49546: LD_VAR 0 4
49550: PUSH
49551: LD_INT 2
49553: ARRAY
49554: PPUSH
49555: CALL_OW 297
49559: ST_TO_ADDR
// if tmpDist < dist then
49560: LD_VAR 0 6
49564: PUSH
49565: LD_VAR 0 5
49569: LESS
49570: IFFALSE 49592
// begin result := i ;
49572: LD_ADDR_VAR 0 3
49576: PUSH
49577: LD_VAR 0 4
49581: ST_TO_ADDR
// dist := tmpDist ;
49582: LD_ADDR_VAR 0 5
49586: PUSH
49587: LD_VAR 0 6
49591: ST_TO_ADDR
// end ; end ;
49592: GO 49524
49594: POP
49595: POP
// end ;
49596: LD_VAR 0 3
49600: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49601: LD_INT 0
49603: PPUSH
// uc_side := side ;
49604: LD_ADDR_OWVAR 20
49608: PUSH
49609: LD_VAR 0 1
49613: ST_TO_ADDR
// uc_nation := 3 ;
49614: LD_ADDR_OWVAR 21
49618: PUSH
49619: LD_INT 3
49621: ST_TO_ADDR
// vc_chassis := 25 ;
49622: LD_ADDR_OWVAR 37
49626: PUSH
49627: LD_INT 25
49629: ST_TO_ADDR
// vc_engine := engine_siberite ;
49630: LD_ADDR_OWVAR 39
49634: PUSH
49635: LD_INT 3
49637: ST_TO_ADDR
// vc_control := control_computer ;
49638: LD_ADDR_OWVAR 38
49642: PUSH
49643: LD_INT 3
49645: ST_TO_ADDR
// vc_weapon := 59 ;
49646: LD_ADDR_OWVAR 40
49650: PUSH
49651: LD_INT 59
49653: ST_TO_ADDR
// result := CreateVehicle ;
49654: LD_ADDR_VAR 0 5
49658: PUSH
49659: CALL_OW 45
49663: ST_TO_ADDR
// SetDir ( result , d ) ;
49664: LD_VAR 0 5
49668: PPUSH
49669: LD_VAR 0 4
49673: PPUSH
49674: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
49678: LD_VAR 0 5
49682: PPUSH
49683: LD_VAR 0 2
49687: PPUSH
49688: LD_VAR 0 3
49692: PPUSH
49693: LD_INT 0
49695: PPUSH
49696: CALL_OW 48
// end ;
49700: LD_VAR 0 5
49704: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
49705: LD_INT 0
49707: PPUSH
49708: PPUSH
49709: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
49710: LD_ADDR_VAR 0 2
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
49733: LD_VAR 0 1
49737: NOT
49738: PUSH
49739: LD_VAR 0 1
49743: PPUSH
49744: CALL_OW 264
49748: PUSH
49749: LD_INT 12
49751: PUSH
49752: LD_INT 51
49754: PUSH
49755: LD_INT 32
49757: PUSH
49758: LD_INT 89
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: IN
49767: NOT
49768: OR
49769: IFFALSE 49773
// exit ;
49771: GO 49871
// for i := 1 to 3 do
49773: LD_ADDR_VAR 0 3
49777: PUSH
49778: DOUBLE
49779: LD_INT 1
49781: DEC
49782: ST_TO_ADDR
49783: LD_INT 3
49785: PUSH
49786: FOR_TO
49787: IFFALSE 49869
// begin tmp := GetCargo ( cargo , i ) ;
49789: LD_ADDR_VAR 0 4
49793: PUSH
49794: LD_VAR 0 1
49798: PPUSH
49799: LD_VAR 0 3
49803: PPUSH
49804: CALL_OW 289
49808: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
49809: LD_ADDR_VAR 0 2
49813: PUSH
49814: LD_VAR 0 2
49818: PPUSH
49819: LD_VAR 0 3
49823: PPUSH
49824: LD_VAR 0 4
49828: PPUSH
49829: CALL_OW 1
49833: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
49834: LD_ADDR_VAR 0 2
49838: PUSH
49839: LD_VAR 0 2
49843: PPUSH
49844: LD_INT 4
49846: PPUSH
49847: LD_VAR 0 2
49851: PUSH
49852: LD_INT 4
49854: ARRAY
49855: PUSH
49856: LD_VAR 0 4
49860: PLUS
49861: PPUSH
49862: CALL_OW 1
49866: ST_TO_ADDR
// end ;
49867: GO 49786
49869: POP
49870: POP
// end ;
49871: LD_VAR 0 2
49875: RET
// export function Length ( array ) ; begin
49876: LD_INT 0
49878: PPUSH
// result := array + 0 ;
49879: LD_ADDR_VAR 0 2
49883: PUSH
49884: LD_VAR 0 1
49888: PUSH
49889: LD_INT 0
49891: PLUS
49892: ST_TO_ADDR
// end ;
49893: LD_VAR 0 2
49897: RET
// export function PrepareArray ( array ) ; begin
49898: LD_INT 0
49900: PPUSH
// result := array diff 0 ;
49901: LD_ADDR_VAR 0 2
49905: PUSH
49906: LD_VAR 0 1
49910: PUSH
49911: LD_INT 0
49913: DIFF
49914: ST_TO_ADDR
// if not result [ 1 ] then
49915: LD_VAR 0 2
49919: PUSH
49920: LD_INT 1
49922: ARRAY
49923: NOT
49924: IFFALSE 49944
// result := Delete ( result , 1 ) ;
49926: LD_ADDR_VAR 0 2
49930: PUSH
49931: LD_VAR 0 2
49935: PPUSH
49936: LD_INT 1
49938: PPUSH
49939: CALL_OW 3
49943: ST_TO_ADDR
// end ;
49944: LD_VAR 0 2
49948: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
49949: LD_INT 0
49951: PPUSH
49952: PPUSH
49953: PPUSH
49954: PPUSH
// sibRocketRange := 25 ;
49955: LD_ADDR_VAR 0 6
49959: PUSH
49960: LD_INT 25
49962: ST_TO_ADDR
// result := false ;
49963: LD_ADDR_VAR 0 4
49967: PUSH
49968: LD_INT 0
49970: ST_TO_ADDR
// for i := 0 to 5 do
49971: LD_ADDR_VAR 0 5
49975: PUSH
49976: DOUBLE
49977: LD_INT 0
49979: DEC
49980: ST_TO_ADDR
49981: LD_INT 5
49983: PUSH
49984: FOR_TO
49985: IFFALSE 50052
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
49987: LD_VAR 0 1
49991: PPUSH
49992: LD_VAR 0 5
49996: PPUSH
49997: LD_VAR 0 6
50001: PPUSH
50002: CALL_OW 272
50006: PPUSH
50007: LD_VAR 0 2
50011: PPUSH
50012: LD_VAR 0 5
50016: PPUSH
50017: LD_VAR 0 6
50021: PPUSH
50022: CALL_OW 273
50026: PPUSH
50027: LD_VAR 0 3
50031: PPUSH
50032: CALL_OW 309
50036: IFFALSE 50050
// begin result := true ;
50038: LD_ADDR_VAR 0 4
50042: PUSH
50043: LD_INT 1
50045: ST_TO_ADDR
// exit ;
50046: POP
50047: POP
50048: GO 50054
// end ;
50050: GO 49984
50052: POP
50053: POP
// end ;
50054: LD_VAR 0 4
50058: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50059: LD_INT 0
50061: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50062: LD_VAR 0 1
50066: PPUSH
50067: LD_VAR 0 2
50071: PPUSH
50072: LD_INT 0
50074: PPUSH
50075: LD_INT 0
50077: PPUSH
50078: LD_INT 1
50080: PPUSH
50081: LD_INT 0
50083: PPUSH
50084: CALL_OW 587
// end ;
50088: LD_VAR 0 3
50092: RET
// export function CenterOnNow ( unit ) ; begin
50093: LD_INT 0
50095: PPUSH
// result := IsInUnit ( unit ) ;
50096: LD_ADDR_VAR 0 2
50100: PUSH
50101: LD_VAR 0 1
50105: PPUSH
50106: CALL_OW 310
50110: ST_TO_ADDR
// if not result then
50111: LD_VAR 0 2
50115: NOT
50116: IFFALSE 50128
// result := unit ;
50118: LD_ADDR_VAR 0 2
50122: PUSH
50123: LD_VAR 0 1
50127: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50128: LD_VAR 0 1
50132: PPUSH
50133: CALL_OW 87
// end ; end_of_file end_of_file
50137: LD_VAR 0 2
50141: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
50142: LD_VAR 0 1
50146: PPUSH
50147: LD_VAR 0 2
50151: PPUSH
50152: LD_VAR 0 3
50156: PPUSH
50157: LD_VAR 0 4
50161: PPUSH
50162: LD_VAR 0 5
50166: PPUSH
50167: LD_VAR 0 6
50171: PPUSH
50172: CALL 50356 0 6
// end ;
50176: PPOPN 6
50178: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
50179: LD_INT 0
50181: PPUSH
// begin if not units then
50182: LD_VAR 0 1
50186: NOT
50187: IFFALSE 50191
// exit ;
50189: GO 50191
// end ;
50191: PPOPN 7
50193: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
50194: CALL 50260 0 0
// end ; end_of_file
50198: PPOPN 1
50200: END
// export globalGameSaveCounter ; every 0 0$1 do
50201: GO 50203
50203: DISABLE
// begin enable ;
50204: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50205: LD_STRING updateTimer(
50207: PUSH
50208: LD_OWVAR 1
50212: STR
50213: PUSH
50214: LD_STRING );
50216: STR
50217: PPUSH
50218: CALL_OW 559
// end ;
50222: END
// every 0 0$1 do
50223: GO 50225
50225: DISABLE
// begin globalGameSaveCounter := 0 ;
50226: LD_ADDR_EXP 32
50230: PUSH
50231: LD_INT 0
50233: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50234: LD_STRING setGameSaveCounter(0)
50236: PPUSH
50237: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50241: LD_STRING initStreamRollete();
50243: PPUSH
50244: CALL_OW 559
// InitStreamMode ;
50248: CALL 51574 0 0
// DefineStreamItems ( false ) ;
50252: LD_INT 0
50254: PPUSH
50255: CALL 52038 0 1
// end ;
50259: END
// export function SOS_MapStart ( ) ; begin
50260: LD_INT 0
50262: PPUSH
// if streamModeActive then
50263: LD_EXP 33
50267: IFFALSE 50276
// DefineStreamItems ( true ) ;
50269: LD_INT 1
50271: PPUSH
50272: CALL 52038 0 1
// UpdateLuaVariables ( ) ;
50276: CALL 50293 0 0
// UpdateFactoryWaypoints ( ) ;
50280: CALL 64899 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50284: CALL 65156 0 0
// end ;
50288: LD_VAR 0 1
50292: RET
// function UpdateLuaVariables ( ) ; begin
50293: LD_INT 0
50295: PPUSH
// if globalGameSaveCounter then
50296: LD_EXP 32
50300: IFFALSE 50334
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50302: LD_ADDR_EXP 32
50306: PUSH
50307: LD_EXP 32
50311: PPUSH
50312: CALL 47501 0 1
50316: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50317: LD_STRING setGameSaveCounter(
50319: PUSH
50320: LD_EXP 32
50324: STR
50325: PUSH
50326: LD_STRING )
50328: STR
50329: PPUSH
50330: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50334: LD_STRING setGameDifficulty(
50336: PUSH
50337: LD_OWVAR 67
50341: STR
50342: PUSH
50343: LD_STRING )
50345: STR
50346: PPUSH
50347: CALL_OW 559
// end ;
50351: LD_VAR 0 1
50355: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50356: LD_INT 0
50358: PPUSH
// if p2 = stream_mode then
50359: LD_VAR 0 2
50363: PUSH
50364: LD_INT 100
50366: EQUAL
50367: IFFALSE 51370
// begin if not StreamModeActive then
50369: LD_EXP 33
50373: NOT
50374: IFFALSE 50384
// StreamModeActive := true ;
50376: LD_ADDR_EXP 33
50380: PUSH
50381: LD_INT 1
50383: ST_TO_ADDR
// if p3 = 0 then
50384: LD_VAR 0 3
50388: PUSH
50389: LD_INT 0
50391: EQUAL
50392: IFFALSE 50398
// InitStreamMode ;
50394: CALL 51574 0 0
// if p3 = 1 then
50398: LD_VAR 0 3
50402: PUSH
50403: LD_INT 1
50405: EQUAL
50406: IFFALSE 50416
// sRocket := true ;
50408: LD_ADDR_EXP 38
50412: PUSH
50413: LD_INT 1
50415: ST_TO_ADDR
// if p3 = 2 then
50416: LD_VAR 0 3
50420: PUSH
50421: LD_INT 2
50423: EQUAL
50424: IFFALSE 50434
// sSpeed := true ;
50426: LD_ADDR_EXP 37
50430: PUSH
50431: LD_INT 1
50433: ST_TO_ADDR
// if p3 = 3 then
50434: LD_VAR 0 3
50438: PUSH
50439: LD_INT 3
50441: EQUAL
50442: IFFALSE 50452
// sEngine := true ;
50444: LD_ADDR_EXP 39
50448: PUSH
50449: LD_INT 1
50451: ST_TO_ADDR
// if p3 = 4 then
50452: LD_VAR 0 3
50456: PUSH
50457: LD_INT 4
50459: EQUAL
50460: IFFALSE 50470
// sSpec := true ;
50462: LD_ADDR_EXP 36
50466: PUSH
50467: LD_INT 1
50469: ST_TO_ADDR
// if p3 = 5 then
50470: LD_VAR 0 3
50474: PUSH
50475: LD_INT 5
50477: EQUAL
50478: IFFALSE 50488
// sLevel := true ;
50480: LD_ADDR_EXP 40
50484: PUSH
50485: LD_INT 1
50487: ST_TO_ADDR
// if p3 = 6 then
50488: LD_VAR 0 3
50492: PUSH
50493: LD_INT 6
50495: EQUAL
50496: IFFALSE 50506
// sArmoury := true ;
50498: LD_ADDR_EXP 41
50502: PUSH
50503: LD_INT 1
50505: ST_TO_ADDR
// if p3 = 7 then
50506: LD_VAR 0 3
50510: PUSH
50511: LD_INT 7
50513: EQUAL
50514: IFFALSE 50524
// sRadar := true ;
50516: LD_ADDR_EXP 42
50520: PUSH
50521: LD_INT 1
50523: ST_TO_ADDR
// if p3 = 8 then
50524: LD_VAR 0 3
50528: PUSH
50529: LD_INT 8
50531: EQUAL
50532: IFFALSE 50542
// sBunker := true ;
50534: LD_ADDR_EXP 43
50538: PUSH
50539: LD_INT 1
50541: ST_TO_ADDR
// if p3 = 9 then
50542: LD_VAR 0 3
50546: PUSH
50547: LD_INT 9
50549: EQUAL
50550: IFFALSE 50560
// sHack := true ;
50552: LD_ADDR_EXP 44
50556: PUSH
50557: LD_INT 1
50559: ST_TO_ADDR
// if p3 = 10 then
50560: LD_VAR 0 3
50564: PUSH
50565: LD_INT 10
50567: EQUAL
50568: IFFALSE 50578
// sFire := true ;
50570: LD_ADDR_EXP 45
50574: PUSH
50575: LD_INT 1
50577: ST_TO_ADDR
// if p3 = 11 then
50578: LD_VAR 0 3
50582: PUSH
50583: LD_INT 11
50585: EQUAL
50586: IFFALSE 50596
// sRefresh := true ;
50588: LD_ADDR_EXP 46
50592: PUSH
50593: LD_INT 1
50595: ST_TO_ADDR
// if p3 = 12 then
50596: LD_VAR 0 3
50600: PUSH
50601: LD_INT 12
50603: EQUAL
50604: IFFALSE 50614
// sExp := true ;
50606: LD_ADDR_EXP 47
50610: PUSH
50611: LD_INT 1
50613: ST_TO_ADDR
// if p3 = 13 then
50614: LD_VAR 0 3
50618: PUSH
50619: LD_INT 13
50621: EQUAL
50622: IFFALSE 50632
// sDepot := true ;
50624: LD_ADDR_EXP 48
50628: PUSH
50629: LD_INT 1
50631: ST_TO_ADDR
// if p3 = 14 then
50632: LD_VAR 0 3
50636: PUSH
50637: LD_INT 14
50639: EQUAL
50640: IFFALSE 50650
// sFlag := true ;
50642: LD_ADDR_EXP 49
50646: PUSH
50647: LD_INT 1
50649: ST_TO_ADDR
// if p3 = 15 then
50650: LD_VAR 0 3
50654: PUSH
50655: LD_INT 15
50657: EQUAL
50658: IFFALSE 50668
// sKamikadze := true ;
50660: LD_ADDR_EXP 57
50664: PUSH
50665: LD_INT 1
50667: ST_TO_ADDR
// if p3 = 16 then
50668: LD_VAR 0 3
50672: PUSH
50673: LD_INT 16
50675: EQUAL
50676: IFFALSE 50686
// sTroll := true ;
50678: LD_ADDR_EXP 58
50682: PUSH
50683: LD_INT 1
50685: ST_TO_ADDR
// if p3 = 17 then
50686: LD_VAR 0 3
50690: PUSH
50691: LD_INT 17
50693: EQUAL
50694: IFFALSE 50704
// sSlow := true ;
50696: LD_ADDR_EXP 59
50700: PUSH
50701: LD_INT 1
50703: ST_TO_ADDR
// if p3 = 18 then
50704: LD_VAR 0 3
50708: PUSH
50709: LD_INT 18
50711: EQUAL
50712: IFFALSE 50722
// sLack := true ;
50714: LD_ADDR_EXP 60
50718: PUSH
50719: LD_INT 1
50721: ST_TO_ADDR
// if p3 = 19 then
50722: LD_VAR 0 3
50726: PUSH
50727: LD_INT 19
50729: EQUAL
50730: IFFALSE 50740
// sTank := true ;
50732: LD_ADDR_EXP 62
50736: PUSH
50737: LD_INT 1
50739: ST_TO_ADDR
// if p3 = 20 then
50740: LD_VAR 0 3
50744: PUSH
50745: LD_INT 20
50747: EQUAL
50748: IFFALSE 50758
// sRemote := true ;
50750: LD_ADDR_EXP 63
50754: PUSH
50755: LD_INT 1
50757: ST_TO_ADDR
// if p3 = 21 then
50758: LD_VAR 0 3
50762: PUSH
50763: LD_INT 21
50765: EQUAL
50766: IFFALSE 50776
// sPowell := true ;
50768: LD_ADDR_EXP 64
50772: PUSH
50773: LD_INT 1
50775: ST_TO_ADDR
// if p3 = 22 then
50776: LD_VAR 0 3
50780: PUSH
50781: LD_INT 22
50783: EQUAL
50784: IFFALSE 50794
// sTeleport := true ;
50786: LD_ADDR_EXP 67
50790: PUSH
50791: LD_INT 1
50793: ST_TO_ADDR
// if p3 = 23 then
50794: LD_VAR 0 3
50798: PUSH
50799: LD_INT 23
50801: EQUAL
50802: IFFALSE 50812
// sOilTower := true ;
50804: LD_ADDR_EXP 69
50808: PUSH
50809: LD_INT 1
50811: ST_TO_ADDR
// if p3 = 24 then
50812: LD_VAR 0 3
50816: PUSH
50817: LD_INT 24
50819: EQUAL
50820: IFFALSE 50830
// sShovel := true ;
50822: LD_ADDR_EXP 70
50826: PUSH
50827: LD_INT 1
50829: ST_TO_ADDR
// if p3 = 25 then
50830: LD_VAR 0 3
50834: PUSH
50835: LD_INT 25
50837: EQUAL
50838: IFFALSE 50848
// sSheik := true ;
50840: LD_ADDR_EXP 71
50844: PUSH
50845: LD_INT 1
50847: ST_TO_ADDR
// if p3 = 26 then
50848: LD_VAR 0 3
50852: PUSH
50853: LD_INT 26
50855: EQUAL
50856: IFFALSE 50866
// sEarthquake := true ;
50858: LD_ADDR_EXP 73
50862: PUSH
50863: LD_INT 1
50865: ST_TO_ADDR
// if p3 = 27 then
50866: LD_VAR 0 3
50870: PUSH
50871: LD_INT 27
50873: EQUAL
50874: IFFALSE 50884
// sAI := true ;
50876: LD_ADDR_EXP 74
50880: PUSH
50881: LD_INT 1
50883: ST_TO_ADDR
// if p3 = 28 then
50884: LD_VAR 0 3
50888: PUSH
50889: LD_INT 28
50891: EQUAL
50892: IFFALSE 50902
// sCargo := true ;
50894: LD_ADDR_EXP 77
50898: PUSH
50899: LD_INT 1
50901: ST_TO_ADDR
// if p3 = 29 then
50902: LD_VAR 0 3
50906: PUSH
50907: LD_INT 29
50909: EQUAL
50910: IFFALSE 50920
// sDLaser := true ;
50912: LD_ADDR_EXP 78
50916: PUSH
50917: LD_INT 1
50919: ST_TO_ADDR
// if p3 = 30 then
50920: LD_VAR 0 3
50924: PUSH
50925: LD_INT 30
50927: EQUAL
50928: IFFALSE 50938
// sExchange := true ;
50930: LD_ADDR_EXP 79
50934: PUSH
50935: LD_INT 1
50937: ST_TO_ADDR
// if p3 = 31 then
50938: LD_VAR 0 3
50942: PUSH
50943: LD_INT 31
50945: EQUAL
50946: IFFALSE 50956
// sFac := true ;
50948: LD_ADDR_EXP 80
50952: PUSH
50953: LD_INT 1
50955: ST_TO_ADDR
// if p3 = 32 then
50956: LD_VAR 0 3
50960: PUSH
50961: LD_INT 32
50963: EQUAL
50964: IFFALSE 50974
// sPower := true ;
50966: LD_ADDR_EXP 81
50970: PUSH
50971: LD_INT 1
50973: ST_TO_ADDR
// if p3 = 33 then
50974: LD_VAR 0 3
50978: PUSH
50979: LD_INT 33
50981: EQUAL
50982: IFFALSE 50992
// sRandom := true ;
50984: LD_ADDR_EXP 82
50988: PUSH
50989: LD_INT 1
50991: ST_TO_ADDR
// if p3 = 34 then
50992: LD_VAR 0 3
50996: PUSH
50997: LD_INT 34
50999: EQUAL
51000: IFFALSE 51010
// sShield := true ;
51002: LD_ADDR_EXP 83
51006: PUSH
51007: LD_INT 1
51009: ST_TO_ADDR
// if p3 = 35 then
51010: LD_VAR 0 3
51014: PUSH
51015: LD_INT 35
51017: EQUAL
51018: IFFALSE 51028
// sTime := true ;
51020: LD_ADDR_EXP 84
51024: PUSH
51025: LD_INT 1
51027: ST_TO_ADDR
// if p3 = 36 then
51028: LD_VAR 0 3
51032: PUSH
51033: LD_INT 36
51035: EQUAL
51036: IFFALSE 51046
// sTools := true ;
51038: LD_ADDR_EXP 85
51042: PUSH
51043: LD_INT 1
51045: ST_TO_ADDR
// if p3 = 101 then
51046: LD_VAR 0 3
51050: PUSH
51051: LD_INT 101
51053: EQUAL
51054: IFFALSE 51064
// sSold := true ;
51056: LD_ADDR_EXP 50
51060: PUSH
51061: LD_INT 1
51063: ST_TO_ADDR
// if p3 = 102 then
51064: LD_VAR 0 3
51068: PUSH
51069: LD_INT 102
51071: EQUAL
51072: IFFALSE 51082
// sDiff := true ;
51074: LD_ADDR_EXP 51
51078: PUSH
51079: LD_INT 1
51081: ST_TO_ADDR
// if p3 = 103 then
51082: LD_VAR 0 3
51086: PUSH
51087: LD_INT 103
51089: EQUAL
51090: IFFALSE 51100
// sFog := true ;
51092: LD_ADDR_EXP 54
51096: PUSH
51097: LD_INT 1
51099: ST_TO_ADDR
// if p3 = 104 then
51100: LD_VAR 0 3
51104: PUSH
51105: LD_INT 104
51107: EQUAL
51108: IFFALSE 51118
// sReset := true ;
51110: LD_ADDR_EXP 55
51114: PUSH
51115: LD_INT 1
51117: ST_TO_ADDR
// if p3 = 105 then
51118: LD_VAR 0 3
51122: PUSH
51123: LD_INT 105
51125: EQUAL
51126: IFFALSE 51136
// sSun := true ;
51128: LD_ADDR_EXP 56
51132: PUSH
51133: LD_INT 1
51135: ST_TO_ADDR
// if p3 = 106 then
51136: LD_VAR 0 3
51140: PUSH
51141: LD_INT 106
51143: EQUAL
51144: IFFALSE 51154
// sTiger := true ;
51146: LD_ADDR_EXP 52
51150: PUSH
51151: LD_INT 1
51153: ST_TO_ADDR
// if p3 = 107 then
51154: LD_VAR 0 3
51158: PUSH
51159: LD_INT 107
51161: EQUAL
51162: IFFALSE 51172
// sBomb := true ;
51164: LD_ADDR_EXP 53
51168: PUSH
51169: LD_INT 1
51171: ST_TO_ADDR
// if p3 = 108 then
51172: LD_VAR 0 3
51176: PUSH
51177: LD_INT 108
51179: EQUAL
51180: IFFALSE 51190
// sWound := true ;
51182: LD_ADDR_EXP 61
51186: PUSH
51187: LD_INT 1
51189: ST_TO_ADDR
// if p3 = 109 then
51190: LD_VAR 0 3
51194: PUSH
51195: LD_INT 109
51197: EQUAL
51198: IFFALSE 51208
// sBetray := true ;
51200: LD_ADDR_EXP 65
51204: PUSH
51205: LD_INT 1
51207: ST_TO_ADDR
// if p3 = 110 then
51208: LD_VAR 0 3
51212: PUSH
51213: LD_INT 110
51215: EQUAL
51216: IFFALSE 51226
// sContamin := true ;
51218: LD_ADDR_EXP 66
51222: PUSH
51223: LD_INT 1
51225: ST_TO_ADDR
// if p3 = 111 then
51226: LD_VAR 0 3
51230: PUSH
51231: LD_INT 111
51233: EQUAL
51234: IFFALSE 51244
// sOil := true ;
51236: LD_ADDR_EXP 68
51240: PUSH
51241: LD_INT 1
51243: ST_TO_ADDR
// if p3 = 112 then
51244: LD_VAR 0 3
51248: PUSH
51249: LD_INT 112
51251: EQUAL
51252: IFFALSE 51262
// sStu := true ;
51254: LD_ADDR_EXP 72
51258: PUSH
51259: LD_INT 1
51261: ST_TO_ADDR
// if p3 = 113 then
51262: LD_VAR 0 3
51266: PUSH
51267: LD_INT 113
51269: EQUAL
51270: IFFALSE 51280
// sBazooka := true ;
51272: LD_ADDR_EXP 75
51276: PUSH
51277: LD_INT 1
51279: ST_TO_ADDR
// if p3 = 114 then
51280: LD_VAR 0 3
51284: PUSH
51285: LD_INT 114
51287: EQUAL
51288: IFFALSE 51298
// sMortar := true ;
51290: LD_ADDR_EXP 76
51294: PUSH
51295: LD_INT 1
51297: ST_TO_ADDR
// if p3 = 115 then
51298: LD_VAR 0 3
51302: PUSH
51303: LD_INT 115
51305: EQUAL
51306: IFFALSE 51316
// sRanger := true ;
51308: LD_ADDR_EXP 86
51312: PUSH
51313: LD_INT 1
51315: ST_TO_ADDR
// if p3 = 116 then
51316: LD_VAR 0 3
51320: PUSH
51321: LD_INT 116
51323: EQUAL
51324: IFFALSE 51334
// sComputer := true ;
51326: LD_ADDR_EXP 87
51330: PUSH
51331: LD_INT 1
51333: ST_TO_ADDR
// if p3 = 117 then
51334: LD_VAR 0 3
51338: PUSH
51339: LD_INT 117
51341: EQUAL
51342: IFFALSE 51352
// s30 := true ;
51344: LD_ADDR_EXP 88
51348: PUSH
51349: LD_INT 1
51351: ST_TO_ADDR
// if p3 = 118 then
51352: LD_VAR 0 3
51356: PUSH
51357: LD_INT 118
51359: EQUAL
51360: IFFALSE 51370
// s60 := true ;
51362: LD_ADDR_EXP 89
51366: PUSH
51367: LD_INT 1
51369: ST_TO_ADDR
// end ; if p2 = hack_mode then
51370: LD_VAR 0 2
51374: PUSH
51375: LD_INT 101
51377: EQUAL
51378: IFFALSE 51506
// begin case p3 of 1 :
51380: LD_VAR 0 3
51384: PUSH
51385: LD_INT 1
51387: DOUBLE
51388: EQUAL
51389: IFTRUE 51393
51391: GO 51400
51393: POP
// hHackUnlimitedResources ; 2 :
51394: CALL 63645 0 0
51398: GO 51506
51400: LD_INT 2
51402: DOUBLE
51403: EQUAL
51404: IFTRUE 51408
51406: GO 51415
51408: POP
// hHackSetLevel10 ; 3 :
51409: CALL 63778 0 0
51413: GO 51506
51415: LD_INT 3
51417: DOUBLE
51418: EQUAL
51419: IFTRUE 51423
51421: GO 51430
51423: POP
// hHackSetLevel10YourUnits ; 4 :
51424: CALL 63863 0 0
51428: GO 51506
51430: LD_INT 4
51432: DOUBLE
51433: EQUAL
51434: IFTRUE 51438
51436: GO 51445
51438: POP
// hHackInvincible ; 5 :
51439: CALL 64311 0 0
51443: GO 51506
51445: LD_INT 5
51447: DOUBLE
51448: EQUAL
51449: IFTRUE 51453
51451: GO 51460
51453: POP
// hHackInvisible ; 6 :
51454: CALL 64422 0 0
51458: GO 51506
51460: LD_INT 6
51462: DOUBLE
51463: EQUAL
51464: IFTRUE 51468
51466: GO 51475
51468: POP
// hHackChangeYourSide ; 7 :
51469: CALL 64479 0 0
51473: GO 51506
51475: LD_INT 7
51477: DOUBLE
51478: EQUAL
51479: IFTRUE 51483
51481: GO 51490
51483: POP
// hHackChangeUnitSide ; 8 :
51484: CALL 64521 0 0
51488: GO 51506
51490: LD_INT 8
51492: DOUBLE
51493: EQUAL
51494: IFTRUE 51498
51496: GO 51505
51498: POP
// hHackFog ; end ;
51499: CALL 64622 0 0
51503: GO 51506
51505: POP
// end ; if p2 = game_save_mode then
51506: LD_VAR 0 2
51510: PUSH
51511: LD_INT 102
51513: EQUAL
51514: IFFALSE 51569
// begin if p3 = 1 then
51516: LD_VAR 0 3
51520: PUSH
51521: LD_INT 1
51523: EQUAL
51524: IFFALSE 51536
// globalGameSaveCounter := p4 ;
51526: LD_ADDR_EXP 32
51530: PUSH
51531: LD_VAR 0 4
51535: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51536: LD_VAR 0 3
51540: PUSH
51541: LD_INT 2
51543: EQUAL
51544: PUSH
51545: LD_EXP 32
51549: AND
51550: IFFALSE 51569
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51552: LD_STRING setGameSaveCounter(
51554: PUSH
51555: LD_EXP 32
51559: STR
51560: PUSH
51561: LD_STRING )
51563: STR
51564: PPUSH
51565: CALL_OW 559
// end ; end ;
51569: LD_VAR 0 7
51573: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51574: LD_INT 0
51576: PPUSH
// streamModeActive := false ;
51577: LD_ADDR_EXP 33
51581: PUSH
51582: LD_INT 0
51584: ST_TO_ADDR
// normalCounter := 36 ;
51585: LD_ADDR_EXP 34
51589: PUSH
51590: LD_INT 36
51592: ST_TO_ADDR
// hardcoreCounter := 18 ;
51593: LD_ADDR_EXP 35
51597: PUSH
51598: LD_INT 18
51600: ST_TO_ADDR
// sRocket := false ;
51601: LD_ADDR_EXP 38
51605: PUSH
51606: LD_INT 0
51608: ST_TO_ADDR
// sSpeed := false ;
51609: LD_ADDR_EXP 37
51613: PUSH
51614: LD_INT 0
51616: ST_TO_ADDR
// sEngine := false ;
51617: LD_ADDR_EXP 39
51621: PUSH
51622: LD_INT 0
51624: ST_TO_ADDR
// sSpec := false ;
51625: LD_ADDR_EXP 36
51629: PUSH
51630: LD_INT 0
51632: ST_TO_ADDR
// sLevel := false ;
51633: LD_ADDR_EXP 40
51637: PUSH
51638: LD_INT 0
51640: ST_TO_ADDR
// sArmoury := false ;
51641: LD_ADDR_EXP 41
51645: PUSH
51646: LD_INT 0
51648: ST_TO_ADDR
// sRadar := false ;
51649: LD_ADDR_EXP 42
51653: PUSH
51654: LD_INT 0
51656: ST_TO_ADDR
// sBunker := false ;
51657: LD_ADDR_EXP 43
51661: PUSH
51662: LD_INT 0
51664: ST_TO_ADDR
// sHack := false ;
51665: LD_ADDR_EXP 44
51669: PUSH
51670: LD_INT 0
51672: ST_TO_ADDR
// sFire := false ;
51673: LD_ADDR_EXP 45
51677: PUSH
51678: LD_INT 0
51680: ST_TO_ADDR
// sRefresh := false ;
51681: LD_ADDR_EXP 46
51685: PUSH
51686: LD_INT 0
51688: ST_TO_ADDR
// sExp := false ;
51689: LD_ADDR_EXP 47
51693: PUSH
51694: LD_INT 0
51696: ST_TO_ADDR
// sDepot := false ;
51697: LD_ADDR_EXP 48
51701: PUSH
51702: LD_INT 0
51704: ST_TO_ADDR
// sFlag := false ;
51705: LD_ADDR_EXP 49
51709: PUSH
51710: LD_INT 0
51712: ST_TO_ADDR
// sKamikadze := false ;
51713: LD_ADDR_EXP 57
51717: PUSH
51718: LD_INT 0
51720: ST_TO_ADDR
// sTroll := false ;
51721: LD_ADDR_EXP 58
51725: PUSH
51726: LD_INT 0
51728: ST_TO_ADDR
// sSlow := false ;
51729: LD_ADDR_EXP 59
51733: PUSH
51734: LD_INT 0
51736: ST_TO_ADDR
// sLack := false ;
51737: LD_ADDR_EXP 60
51741: PUSH
51742: LD_INT 0
51744: ST_TO_ADDR
// sTank := false ;
51745: LD_ADDR_EXP 62
51749: PUSH
51750: LD_INT 0
51752: ST_TO_ADDR
// sRemote := false ;
51753: LD_ADDR_EXP 63
51757: PUSH
51758: LD_INT 0
51760: ST_TO_ADDR
// sPowell := false ;
51761: LD_ADDR_EXP 64
51765: PUSH
51766: LD_INT 0
51768: ST_TO_ADDR
// sTeleport := false ;
51769: LD_ADDR_EXP 67
51773: PUSH
51774: LD_INT 0
51776: ST_TO_ADDR
// sOilTower := false ;
51777: LD_ADDR_EXP 69
51781: PUSH
51782: LD_INT 0
51784: ST_TO_ADDR
// sShovel := false ;
51785: LD_ADDR_EXP 70
51789: PUSH
51790: LD_INT 0
51792: ST_TO_ADDR
// sSheik := false ;
51793: LD_ADDR_EXP 71
51797: PUSH
51798: LD_INT 0
51800: ST_TO_ADDR
// sEarthquake := false ;
51801: LD_ADDR_EXP 73
51805: PUSH
51806: LD_INT 0
51808: ST_TO_ADDR
// sAI := false ;
51809: LD_ADDR_EXP 74
51813: PUSH
51814: LD_INT 0
51816: ST_TO_ADDR
// sCargo := false ;
51817: LD_ADDR_EXP 77
51821: PUSH
51822: LD_INT 0
51824: ST_TO_ADDR
// sDLaser := false ;
51825: LD_ADDR_EXP 78
51829: PUSH
51830: LD_INT 0
51832: ST_TO_ADDR
// sExchange := false ;
51833: LD_ADDR_EXP 79
51837: PUSH
51838: LD_INT 0
51840: ST_TO_ADDR
// sFac := false ;
51841: LD_ADDR_EXP 80
51845: PUSH
51846: LD_INT 0
51848: ST_TO_ADDR
// sPower := false ;
51849: LD_ADDR_EXP 81
51853: PUSH
51854: LD_INT 0
51856: ST_TO_ADDR
// sRandom := false ;
51857: LD_ADDR_EXP 82
51861: PUSH
51862: LD_INT 0
51864: ST_TO_ADDR
// sShield := false ;
51865: LD_ADDR_EXP 83
51869: PUSH
51870: LD_INT 0
51872: ST_TO_ADDR
// sTime := false ;
51873: LD_ADDR_EXP 84
51877: PUSH
51878: LD_INT 0
51880: ST_TO_ADDR
// sTools := false ;
51881: LD_ADDR_EXP 85
51885: PUSH
51886: LD_INT 0
51888: ST_TO_ADDR
// sSold := false ;
51889: LD_ADDR_EXP 50
51893: PUSH
51894: LD_INT 0
51896: ST_TO_ADDR
// sDiff := false ;
51897: LD_ADDR_EXP 51
51901: PUSH
51902: LD_INT 0
51904: ST_TO_ADDR
// sFog := false ;
51905: LD_ADDR_EXP 54
51909: PUSH
51910: LD_INT 0
51912: ST_TO_ADDR
// sReset := false ;
51913: LD_ADDR_EXP 55
51917: PUSH
51918: LD_INT 0
51920: ST_TO_ADDR
// sSun := false ;
51921: LD_ADDR_EXP 56
51925: PUSH
51926: LD_INT 0
51928: ST_TO_ADDR
// sTiger := false ;
51929: LD_ADDR_EXP 52
51933: PUSH
51934: LD_INT 0
51936: ST_TO_ADDR
// sBomb := false ;
51937: LD_ADDR_EXP 53
51941: PUSH
51942: LD_INT 0
51944: ST_TO_ADDR
// sWound := false ;
51945: LD_ADDR_EXP 61
51949: PUSH
51950: LD_INT 0
51952: ST_TO_ADDR
// sBetray := false ;
51953: LD_ADDR_EXP 65
51957: PUSH
51958: LD_INT 0
51960: ST_TO_ADDR
// sContamin := false ;
51961: LD_ADDR_EXP 66
51965: PUSH
51966: LD_INT 0
51968: ST_TO_ADDR
// sOil := false ;
51969: LD_ADDR_EXP 68
51973: PUSH
51974: LD_INT 0
51976: ST_TO_ADDR
// sStu := false ;
51977: LD_ADDR_EXP 72
51981: PUSH
51982: LD_INT 0
51984: ST_TO_ADDR
// sBazooka := false ;
51985: LD_ADDR_EXP 75
51989: PUSH
51990: LD_INT 0
51992: ST_TO_ADDR
// sMortar := false ;
51993: LD_ADDR_EXP 76
51997: PUSH
51998: LD_INT 0
52000: ST_TO_ADDR
// sRanger := false ;
52001: LD_ADDR_EXP 86
52005: PUSH
52006: LD_INT 0
52008: ST_TO_ADDR
// sComputer := false ;
52009: LD_ADDR_EXP 87
52013: PUSH
52014: LD_INT 0
52016: ST_TO_ADDR
// s30 := false ;
52017: LD_ADDR_EXP 88
52021: PUSH
52022: LD_INT 0
52024: ST_TO_ADDR
// s60 := false ;
52025: LD_ADDR_EXP 89
52029: PUSH
52030: LD_INT 0
52032: ST_TO_ADDR
// end ;
52033: LD_VAR 0 1
52037: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52038: LD_INT 0
52040: PPUSH
52041: PPUSH
52042: PPUSH
52043: PPUSH
52044: PPUSH
52045: PPUSH
52046: PPUSH
// result := [ ] ;
52047: LD_ADDR_VAR 0 2
52051: PUSH
52052: EMPTY
52053: ST_TO_ADDR
// if campaign_id = 1 then
52054: LD_OWVAR 69
52058: PUSH
52059: LD_INT 1
52061: EQUAL
52062: IFFALSE 55228
// begin case mission_number of 1 :
52064: LD_OWVAR 70
52068: PUSH
52069: LD_INT 1
52071: DOUBLE
52072: EQUAL
52073: IFTRUE 52077
52075: GO 52153
52077: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52078: LD_ADDR_VAR 0 2
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: LD_INT 4
52088: PUSH
52089: LD_INT 11
52091: PUSH
52092: LD_INT 12
52094: PUSH
52095: LD_INT 15
52097: PUSH
52098: LD_INT 16
52100: PUSH
52101: LD_INT 22
52103: PUSH
52104: LD_INT 23
52106: PUSH
52107: LD_INT 26
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 101
52123: PUSH
52124: LD_INT 102
52126: PUSH
52127: LD_INT 106
52129: PUSH
52130: LD_INT 116
52132: PUSH
52133: LD_INT 117
52135: PUSH
52136: LD_INT 118
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: ST_TO_ADDR
52151: GO 55226
52153: LD_INT 2
52155: DOUBLE
52156: EQUAL
52157: IFTRUE 52161
52159: GO 52245
52161: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52162: LD_ADDR_VAR 0 2
52166: PUSH
52167: LD_INT 2
52169: PUSH
52170: LD_INT 4
52172: PUSH
52173: LD_INT 11
52175: PUSH
52176: LD_INT 12
52178: PUSH
52179: LD_INT 15
52181: PUSH
52182: LD_INT 16
52184: PUSH
52185: LD_INT 22
52187: PUSH
52188: LD_INT 23
52190: PUSH
52191: LD_INT 26
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 101
52207: PUSH
52208: LD_INT 102
52210: PUSH
52211: LD_INT 105
52213: PUSH
52214: LD_INT 106
52216: PUSH
52217: LD_INT 108
52219: PUSH
52220: LD_INT 116
52222: PUSH
52223: LD_INT 117
52225: PUSH
52226: LD_INT 118
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: ST_TO_ADDR
52243: GO 55226
52245: LD_INT 3
52247: DOUBLE
52248: EQUAL
52249: IFTRUE 52253
52251: GO 52341
52253: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52254: LD_ADDR_VAR 0 2
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: LD_INT 4
52264: PUSH
52265: LD_INT 5
52267: PUSH
52268: LD_INT 11
52270: PUSH
52271: LD_INT 12
52273: PUSH
52274: LD_INT 15
52276: PUSH
52277: LD_INT 16
52279: PUSH
52280: LD_INT 22
52282: PUSH
52283: LD_INT 26
52285: PUSH
52286: LD_INT 36
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 101
52303: PUSH
52304: LD_INT 102
52306: PUSH
52307: LD_INT 105
52309: PUSH
52310: LD_INT 106
52312: PUSH
52313: LD_INT 108
52315: PUSH
52316: LD_INT 116
52318: PUSH
52319: LD_INT 117
52321: PUSH
52322: LD_INT 118
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: ST_TO_ADDR
52339: GO 55226
52341: LD_INT 4
52343: DOUBLE
52344: EQUAL
52345: IFTRUE 52349
52347: GO 52445
52349: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52350: LD_ADDR_VAR 0 2
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 4
52360: PUSH
52361: LD_INT 5
52363: PUSH
52364: LD_INT 8
52366: PUSH
52367: LD_INT 11
52369: PUSH
52370: LD_INT 12
52372: PUSH
52373: LD_INT 15
52375: PUSH
52376: LD_INT 16
52378: PUSH
52379: LD_INT 22
52381: PUSH
52382: LD_INT 23
52384: PUSH
52385: LD_INT 26
52387: PUSH
52388: LD_INT 36
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 101
52407: PUSH
52408: LD_INT 102
52410: PUSH
52411: LD_INT 105
52413: PUSH
52414: LD_INT 106
52416: PUSH
52417: LD_INT 108
52419: PUSH
52420: LD_INT 116
52422: PUSH
52423: LD_INT 117
52425: PUSH
52426: LD_INT 118
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: ST_TO_ADDR
52443: GO 55226
52445: LD_INT 5
52447: DOUBLE
52448: EQUAL
52449: IFTRUE 52453
52451: GO 52565
52453: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52454: LD_ADDR_VAR 0 2
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: LD_INT 4
52464: PUSH
52465: LD_INT 5
52467: PUSH
52468: LD_INT 6
52470: PUSH
52471: LD_INT 8
52473: PUSH
52474: LD_INT 11
52476: PUSH
52477: LD_INT 12
52479: PUSH
52480: LD_INT 15
52482: PUSH
52483: LD_INT 16
52485: PUSH
52486: LD_INT 22
52488: PUSH
52489: LD_INT 23
52491: PUSH
52492: LD_INT 25
52494: PUSH
52495: LD_INT 26
52497: PUSH
52498: LD_INT 36
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 101
52519: PUSH
52520: LD_INT 102
52522: PUSH
52523: LD_INT 105
52525: PUSH
52526: LD_INT 106
52528: PUSH
52529: LD_INT 108
52531: PUSH
52532: LD_INT 109
52534: PUSH
52535: LD_INT 112
52537: PUSH
52538: LD_INT 116
52540: PUSH
52541: LD_INT 117
52543: PUSH
52544: LD_INT 118
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: ST_TO_ADDR
52563: GO 55226
52565: LD_INT 6
52567: DOUBLE
52568: EQUAL
52569: IFTRUE 52573
52571: GO 52705
52573: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52574: LD_ADDR_VAR 0 2
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 4
52584: PUSH
52585: LD_INT 5
52587: PUSH
52588: LD_INT 6
52590: PUSH
52591: LD_INT 8
52593: PUSH
52594: LD_INT 11
52596: PUSH
52597: LD_INT 12
52599: PUSH
52600: LD_INT 15
52602: PUSH
52603: LD_INT 16
52605: PUSH
52606: LD_INT 20
52608: PUSH
52609: LD_INT 21
52611: PUSH
52612: LD_INT 22
52614: PUSH
52615: LD_INT 23
52617: PUSH
52618: LD_INT 25
52620: PUSH
52621: LD_INT 26
52623: PUSH
52624: LD_INT 30
52626: PUSH
52627: LD_INT 31
52629: PUSH
52630: LD_INT 32
52632: PUSH
52633: LD_INT 36
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 101
52659: PUSH
52660: LD_INT 102
52662: PUSH
52663: LD_INT 105
52665: PUSH
52666: LD_INT 106
52668: PUSH
52669: LD_INT 108
52671: PUSH
52672: LD_INT 109
52674: PUSH
52675: LD_INT 112
52677: PUSH
52678: LD_INT 116
52680: PUSH
52681: LD_INT 117
52683: PUSH
52684: LD_INT 118
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: ST_TO_ADDR
52703: GO 55226
52705: LD_INT 7
52707: DOUBLE
52708: EQUAL
52709: IFTRUE 52713
52711: GO 52825
52713: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52714: LD_ADDR_VAR 0 2
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 4
52724: PUSH
52725: LD_INT 5
52727: PUSH
52728: LD_INT 7
52730: PUSH
52731: LD_INT 11
52733: PUSH
52734: LD_INT 12
52736: PUSH
52737: LD_INT 15
52739: PUSH
52740: LD_INT 16
52742: PUSH
52743: LD_INT 20
52745: PUSH
52746: LD_INT 21
52748: PUSH
52749: LD_INT 22
52751: PUSH
52752: LD_INT 23
52754: PUSH
52755: LD_INT 25
52757: PUSH
52758: LD_INT 26
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 101
52779: PUSH
52780: LD_INT 102
52782: PUSH
52783: LD_INT 103
52785: PUSH
52786: LD_INT 105
52788: PUSH
52789: LD_INT 106
52791: PUSH
52792: LD_INT 108
52794: PUSH
52795: LD_INT 112
52797: PUSH
52798: LD_INT 116
52800: PUSH
52801: LD_INT 117
52803: PUSH
52804: LD_INT 118
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: ST_TO_ADDR
52823: GO 55226
52825: LD_INT 8
52827: DOUBLE
52828: EQUAL
52829: IFTRUE 52833
52831: GO 52973
52833: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52834: LD_ADDR_VAR 0 2
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: LD_INT 4
52844: PUSH
52845: LD_INT 5
52847: PUSH
52848: LD_INT 6
52850: PUSH
52851: LD_INT 7
52853: PUSH
52854: LD_INT 8
52856: PUSH
52857: LD_INT 11
52859: PUSH
52860: LD_INT 12
52862: PUSH
52863: LD_INT 15
52865: PUSH
52866: LD_INT 16
52868: PUSH
52869: LD_INT 20
52871: PUSH
52872: LD_INT 21
52874: PUSH
52875: LD_INT 22
52877: PUSH
52878: LD_INT 23
52880: PUSH
52881: LD_INT 25
52883: PUSH
52884: LD_INT 26
52886: PUSH
52887: LD_INT 30
52889: PUSH
52890: LD_INT 31
52892: PUSH
52893: LD_INT 32
52895: PUSH
52896: LD_INT 36
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 101
52923: PUSH
52924: LD_INT 102
52926: PUSH
52927: LD_INT 103
52929: PUSH
52930: LD_INT 105
52932: PUSH
52933: LD_INT 106
52935: PUSH
52936: LD_INT 108
52938: PUSH
52939: LD_INT 109
52941: PUSH
52942: LD_INT 112
52944: PUSH
52945: LD_INT 116
52947: PUSH
52948: LD_INT 117
52950: PUSH
52951: LD_INT 118
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: ST_TO_ADDR
52971: GO 55226
52973: LD_INT 9
52975: DOUBLE
52976: EQUAL
52977: IFTRUE 52981
52979: GO 53129
52981: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
52982: LD_ADDR_VAR 0 2
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: LD_INT 4
52992: PUSH
52993: LD_INT 5
52995: PUSH
52996: LD_INT 6
52998: PUSH
52999: LD_INT 7
53001: PUSH
53002: LD_INT 8
53004: PUSH
53005: LD_INT 11
53007: PUSH
53008: LD_INT 12
53010: PUSH
53011: LD_INT 15
53013: PUSH
53014: LD_INT 16
53016: PUSH
53017: LD_INT 20
53019: PUSH
53020: LD_INT 21
53022: PUSH
53023: LD_INT 22
53025: PUSH
53026: LD_INT 23
53028: PUSH
53029: LD_INT 25
53031: PUSH
53032: LD_INT 26
53034: PUSH
53035: LD_INT 28
53037: PUSH
53038: LD_INT 30
53040: PUSH
53041: LD_INT 31
53043: PUSH
53044: LD_INT 32
53046: PUSH
53047: LD_INT 36
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 101
53075: PUSH
53076: LD_INT 102
53078: PUSH
53079: LD_INT 103
53081: PUSH
53082: LD_INT 105
53084: PUSH
53085: LD_INT 106
53087: PUSH
53088: LD_INT 108
53090: PUSH
53091: LD_INT 109
53093: PUSH
53094: LD_INT 112
53096: PUSH
53097: LD_INT 114
53099: PUSH
53100: LD_INT 116
53102: PUSH
53103: LD_INT 117
53105: PUSH
53106: LD_INT 118
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: ST_TO_ADDR
53127: GO 55226
53129: LD_INT 10
53131: DOUBLE
53132: EQUAL
53133: IFTRUE 53137
53135: GO 53333
53137: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53138: LD_ADDR_VAR 0 2
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 4
53148: PUSH
53149: LD_INT 5
53151: PUSH
53152: LD_INT 6
53154: PUSH
53155: LD_INT 7
53157: PUSH
53158: LD_INT 8
53160: PUSH
53161: LD_INT 9
53163: PUSH
53164: LD_INT 10
53166: PUSH
53167: LD_INT 11
53169: PUSH
53170: LD_INT 12
53172: PUSH
53173: LD_INT 13
53175: PUSH
53176: LD_INT 14
53178: PUSH
53179: LD_INT 15
53181: PUSH
53182: LD_INT 16
53184: PUSH
53185: LD_INT 17
53187: PUSH
53188: LD_INT 18
53190: PUSH
53191: LD_INT 19
53193: PUSH
53194: LD_INT 20
53196: PUSH
53197: LD_INT 21
53199: PUSH
53200: LD_INT 22
53202: PUSH
53203: LD_INT 23
53205: PUSH
53206: LD_INT 24
53208: PUSH
53209: LD_INT 25
53211: PUSH
53212: LD_INT 26
53214: PUSH
53215: LD_INT 28
53217: PUSH
53218: LD_INT 30
53220: PUSH
53221: LD_INT 31
53223: PUSH
53224: LD_INT 32
53226: PUSH
53227: LD_INT 36
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 101
53263: PUSH
53264: LD_INT 102
53266: PUSH
53267: LD_INT 103
53269: PUSH
53270: LD_INT 104
53272: PUSH
53273: LD_INT 105
53275: PUSH
53276: LD_INT 106
53278: PUSH
53279: LD_INT 107
53281: PUSH
53282: LD_INT 108
53284: PUSH
53285: LD_INT 109
53287: PUSH
53288: LD_INT 110
53290: PUSH
53291: LD_INT 111
53293: PUSH
53294: LD_INT 112
53296: PUSH
53297: LD_INT 114
53299: PUSH
53300: LD_INT 116
53302: PUSH
53303: LD_INT 117
53305: PUSH
53306: LD_INT 118
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: ST_TO_ADDR
53331: GO 55226
53333: LD_INT 11
53335: DOUBLE
53336: EQUAL
53337: IFTRUE 53341
53339: GO 53545
53341: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53342: LD_ADDR_VAR 0 2
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: LD_INT 3
53352: PUSH
53353: LD_INT 4
53355: PUSH
53356: LD_INT 5
53358: PUSH
53359: LD_INT 6
53361: PUSH
53362: LD_INT 7
53364: PUSH
53365: LD_INT 8
53367: PUSH
53368: LD_INT 9
53370: PUSH
53371: LD_INT 10
53373: PUSH
53374: LD_INT 11
53376: PUSH
53377: LD_INT 12
53379: PUSH
53380: LD_INT 13
53382: PUSH
53383: LD_INT 14
53385: PUSH
53386: LD_INT 15
53388: PUSH
53389: LD_INT 16
53391: PUSH
53392: LD_INT 17
53394: PUSH
53395: LD_INT 18
53397: PUSH
53398: LD_INT 19
53400: PUSH
53401: LD_INT 20
53403: PUSH
53404: LD_INT 21
53406: PUSH
53407: LD_INT 22
53409: PUSH
53410: LD_INT 23
53412: PUSH
53413: LD_INT 24
53415: PUSH
53416: LD_INT 25
53418: PUSH
53419: LD_INT 26
53421: PUSH
53422: LD_INT 28
53424: PUSH
53425: LD_INT 30
53427: PUSH
53428: LD_INT 31
53430: PUSH
53431: LD_INT 32
53433: PUSH
53434: LD_INT 34
53436: PUSH
53437: LD_INT 36
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 101
53475: PUSH
53476: LD_INT 102
53478: PUSH
53479: LD_INT 103
53481: PUSH
53482: LD_INT 104
53484: PUSH
53485: LD_INT 105
53487: PUSH
53488: LD_INT 106
53490: PUSH
53491: LD_INT 107
53493: PUSH
53494: LD_INT 108
53496: PUSH
53497: LD_INT 109
53499: PUSH
53500: LD_INT 110
53502: PUSH
53503: LD_INT 111
53505: PUSH
53506: LD_INT 112
53508: PUSH
53509: LD_INT 114
53511: PUSH
53512: LD_INT 116
53514: PUSH
53515: LD_INT 117
53517: PUSH
53518: LD_INT 118
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: ST_TO_ADDR
53543: GO 55226
53545: LD_INT 12
53547: DOUBLE
53548: EQUAL
53549: IFTRUE 53553
53551: GO 53773
53553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53554: LD_ADDR_VAR 0 2
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 2
53564: PUSH
53565: LD_INT 3
53567: PUSH
53568: LD_INT 4
53570: PUSH
53571: LD_INT 5
53573: PUSH
53574: LD_INT 6
53576: PUSH
53577: LD_INT 7
53579: PUSH
53580: LD_INT 8
53582: PUSH
53583: LD_INT 9
53585: PUSH
53586: LD_INT 10
53588: PUSH
53589: LD_INT 11
53591: PUSH
53592: LD_INT 12
53594: PUSH
53595: LD_INT 13
53597: PUSH
53598: LD_INT 14
53600: PUSH
53601: LD_INT 15
53603: PUSH
53604: LD_INT 16
53606: PUSH
53607: LD_INT 17
53609: PUSH
53610: LD_INT 18
53612: PUSH
53613: LD_INT 19
53615: PUSH
53616: LD_INT 20
53618: PUSH
53619: LD_INT 21
53621: PUSH
53622: LD_INT 22
53624: PUSH
53625: LD_INT 23
53627: PUSH
53628: LD_INT 24
53630: PUSH
53631: LD_INT 25
53633: PUSH
53634: LD_INT 26
53636: PUSH
53637: LD_INT 27
53639: PUSH
53640: LD_INT 28
53642: PUSH
53643: LD_INT 30
53645: PUSH
53646: LD_INT 31
53648: PUSH
53649: LD_INT 32
53651: PUSH
53652: LD_INT 33
53654: PUSH
53655: LD_INT 34
53657: PUSH
53658: LD_INT 36
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 101
53699: PUSH
53700: LD_INT 102
53702: PUSH
53703: LD_INT 103
53705: PUSH
53706: LD_INT 104
53708: PUSH
53709: LD_INT 105
53711: PUSH
53712: LD_INT 106
53714: PUSH
53715: LD_INT 107
53717: PUSH
53718: LD_INT 108
53720: PUSH
53721: LD_INT 109
53723: PUSH
53724: LD_INT 110
53726: PUSH
53727: LD_INT 111
53729: PUSH
53730: LD_INT 112
53732: PUSH
53733: LD_INT 113
53735: PUSH
53736: LD_INT 114
53738: PUSH
53739: LD_INT 116
53741: PUSH
53742: LD_INT 117
53744: PUSH
53745: LD_INT 118
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: ST_TO_ADDR
53771: GO 55226
53773: LD_INT 13
53775: DOUBLE
53776: EQUAL
53777: IFTRUE 53781
53779: GO 53989
53781: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53782: LD_ADDR_VAR 0 2
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 3
53795: PUSH
53796: LD_INT 4
53798: PUSH
53799: LD_INT 5
53801: PUSH
53802: LD_INT 8
53804: PUSH
53805: LD_INT 9
53807: PUSH
53808: LD_INT 10
53810: PUSH
53811: LD_INT 11
53813: PUSH
53814: LD_INT 12
53816: PUSH
53817: LD_INT 14
53819: PUSH
53820: LD_INT 15
53822: PUSH
53823: LD_INT 16
53825: PUSH
53826: LD_INT 17
53828: PUSH
53829: LD_INT 18
53831: PUSH
53832: LD_INT 19
53834: PUSH
53835: LD_INT 20
53837: PUSH
53838: LD_INT 21
53840: PUSH
53841: LD_INT 22
53843: PUSH
53844: LD_INT 23
53846: PUSH
53847: LD_INT 24
53849: PUSH
53850: LD_INT 25
53852: PUSH
53853: LD_INT 26
53855: PUSH
53856: LD_INT 27
53858: PUSH
53859: LD_INT 28
53861: PUSH
53862: LD_INT 30
53864: PUSH
53865: LD_INT 31
53867: PUSH
53868: LD_INT 32
53870: PUSH
53871: LD_INT 33
53873: PUSH
53874: LD_INT 34
53876: PUSH
53877: LD_INT 36
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 101
53915: PUSH
53916: LD_INT 102
53918: PUSH
53919: LD_INT 103
53921: PUSH
53922: LD_INT 104
53924: PUSH
53925: LD_INT 105
53927: PUSH
53928: LD_INT 106
53930: PUSH
53931: LD_INT 107
53933: PUSH
53934: LD_INT 108
53936: PUSH
53937: LD_INT 109
53939: PUSH
53940: LD_INT 110
53942: PUSH
53943: LD_INT 111
53945: PUSH
53946: LD_INT 112
53948: PUSH
53949: LD_INT 113
53951: PUSH
53952: LD_INT 114
53954: PUSH
53955: LD_INT 116
53957: PUSH
53958: LD_INT 117
53960: PUSH
53961: LD_INT 118
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: ST_TO_ADDR
53987: GO 55226
53989: LD_INT 14
53991: DOUBLE
53992: EQUAL
53993: IFTRUE 53997
53995: GO 54221
53997: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
53998: LD_ADDR_VAR 0 2
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 2
54008: PUSH
54009: LD_INT 3
54011: PUSH
54012: LD_INT 4
54014: PUSH
54015: LD_INT 5
54017: PUSH
54018: LD_INT 6
54020: PUSH
54021: LD_INT 7
54023: PUSH
54024: LD_INT 8
54026: PUSH
54027: LD_INT 9
54029: PUSH
54030: LD_INT 10
54032: PUSH
54033: LD_INT 11
54035: PUSH
54036: LD_INT 12
54038: PUSH
54039: LD_INT 13
54041: PUSH
54042: LD_INT 14
54044: PUSH
54045: LD_INT 15
54047: PUSH
54048: LD_INT 16
54050: PUSH
54051: LD_INT 17
54053: PUSH
54054: LD_INT 18
54056: PUSH
54057: LD_INT 19
54059: PUSH
54060: LD_INT 20
54062: PUSH
54063: LD_INT 21
54065: PUSH
54066: LD_INT 22
54068: PUSH
54069: LD_INT 23
54071: PUSH
54072: LD_INT 24
54074: PUSH
54075: LD_INT 25
54077: PUSH
54078: LD_INT 26
54080: PUSH
54081: LD_INT 27
54083: PUSH
54084: LD_INT 28
54086: PUSH
54087: LD_INT 29
54089: PUSH
54090: LD_INT 30
54092: PUSH
54093: LD_INT 31
54095: PUSH
54096: LD_INT 32
54098: PUSH
54099: LD_INT 33
54101: PUSH
54102: LD_INT 34
54104: PUSH
54105: LD_INT 36
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 101
54147: PUSH
54148: LD_INT 102
54150: PUSH
54151: LD_INT 103
54153: PUSH
54154: LD_INT 104
54156: PUSH
54157: LD_INT 105
54159: PUSH
54160: LD_INT 106
54162: PUSH
54163: LD_INT 107
54165: PUSH
54166: LD_INT 108
54168: PUSH
54169: LD_INT 109
54171: PUSH
54172: LD_INT 110
54174: PUSH
54175: LD_INT 111
54177: PUSH
54178: LD_INT 112
54180: PUSH
54181: LD_INT 113
54183: PUSH
54184: LD_INT 114
54186: PUSH
54187: LD_INT 116
54189: PUSH
54190: LD_INT 117
54192: PUSH
54193: LD_INT 118
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: ST_TO_ADDR
54219: GO 55226
54221: LD_INT 15
54223: DOUBLE
54224: EQUAL
54225: IFTRUE 54229
54227: GO 54453
54229: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54230: LD_ADDR_VAR 0 2
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: LD_INT 4
54246: PUSH
54247: LD_INT 5
54249: PUSH
54250: LD_INT 6
54252: PUSH
54253: LD_INT 7
54255: PUSH
54256: LD_INT 8
54258: PUSH
54259: LD_INT 9
54261: PUSH
54262: LD_INT 10
54264: PUSH
54265: LD_INT 11
54267: PUSH
54268: LD_INT 12
54270: PUSH
54271: LD_INT 13
54273: PUSH
54274: LD_INT 14
54276: PUSH
54277: LD_INT 15
54279: PUSH
54280: LD_INT 16
54282: PUSH
54283: LD_INT 17
54285: PUSH
54286: LD_INT 18
54288: PUSH
54289: LD_INT 19
54291: PUSH
54292: LD_INT 20
54294: PUSH
54295: LD_INT 21
54297: PUSH
54298: LD_INT 22
54300: PUSH
54301: LD_INT 23
54303: PUSH
54304: LD_INT 24
54306: PUSH
54307: LD_INT 25
54309: PUSH
54310: LD_INT 26
54312: PUSH
54313: LD_INT 27
54315: PUSH
54316: LD_INT 28
54318: PUSH
54319: LD_INT 29
54321: PUSH
54322: LD_INT 30
54324: PUSH
54325: LD_INT 31
54327: PUSH
54328: LD_INT 32
54330: PUSH
54331: LD_INT 33
54333: PUSH
54334: LD_INT 34
54336: PUSH
54337: LD_INT 36
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 101
54379: PUSH
54380: LD_INT 102
54382: PUSH
54383: LD_INT 103
54385: PUSH
54386: LD_INT 104
54388: PUSH
54389: LD_INT 105
54391: PUSH
54392: LD_INT 106
54394: PUSH
54395: LD_INT 107
54397: PUSH
54398: LD_INT 108
54400: PUSH
54401: LD_INT 109
54403: PUSH
54404: LD_INT 110
54406: PUSH
54407: LD_INT 111
54409: PUSH
54410: LD_INT 112
54412: PUSH
54413: LD_INT 113
54415: PUSH
54416: LD_INT 114
54418: PUSH
54419: LD_INT 116
54421: PUSH
54422: LD_INT 117
54424: PUSH
54425: LD_INT 118
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: ST_TO_ADDR
54451: GO 55226
54453: LD_INT 16
54455: DOUBLE
54456: EQUAL
54457: IFTRUE 54461
54459: GO 54597
54461: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54462: LD_ADDR_VAR 0 2
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: LD_INT 4
54472: PUSH
54473: LD_INT 5
54475: PUSH
54476: LD_INT 7
54478: PUSH
54479: LD_INT 11
54481: PUSH
54482: LD_INT 12
54484: PUSH
54485: LD_INT 15
54487: PUSH
54488: LD_INT 16
54490: PUSH
54491: LD_INT 20
54493: PUSH
54494: LD_INT 21
54496: PUSH
54497: LD_INT 22
54499: PUSH
54500: LD_INT 23
54502: PUSH
54503: LD_INT 25
54505: PUSH
54506: LD_INT 26
54508: PUSH
54509: LD_INT 30
54511: PUSH
54512: LD_INT 31
54514: PUSH
54515: LD_INT 32
54517: PUSH
54518: LD_INT 33
54520: PUSH
54521: LD_INT 34
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 101
54547: PUSH
54548: LD_INT 102
54550: PUSH
54551: LD_INT 103
54553: PUSH
54554: LD_INT 106
54556: PUSH
54557: LD_INT 108
54559: PUSH
54560: LD_INT 112
54562: PUSH
54563: LD_INT 113
54565: PUSH
54566: LD_INT 114
54568: PUSH
54569: LD_INT 116
54571: PUSH
54572: LD_INT 117
54574: PUSH
54575: LD_INT 118
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: ST_TO_ADDR
54595: GO 55226
54597: LD_INT 17
54599: DOUBLE
54600: EQUAL
54601: IFTRUE 54605
54603: GO 54829
54605: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54606: LD_ADDR_VAR 0 2
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: LD_INT 3
54619: PUSH
54620: LD_INT 4
54622: PUSH
54623: LD_INT 5
54625: PUSH
54626: LD_INT 6
54628: PUSH
54629: LD_INT 7
54631: PUSH
54632: LD_INT 8
54634: PUSH
54635: LD_INT 9
54637: PUSH
54638: LD_INT 10
54640: PUSH
54641: LD_INT 11
54643: PUSH
54644: LD_INT 12
54646: PUSH
54647: LD_INT 13
54649: PUSH
54650: LD_INT 14
54652: PUSH
54653: LD_INT 15
54655: PUSH
54656: LD_INT 16
54658: PUSH
54659: LD_INT 17
54661: PUSH
54662: LD_INT 18
54664: PUSH
54665: LD_INT 19
54667: PUSH
54668: LD_INT 20
54670: PUSH
54671: LD_INT 21
54673: PUSH
54674: LD_INT 22
54676: PUSH
54677: LD_INT 23
54679: PUSH
54680: LD_INT 24
54682: PUSH
54683: LD_INT 25
54685: PUSH
54686: LD_INT 26
54688: PUSH
54689: LD_INT 27
54691: PUSH
54692: LD_INT 28
54694: PUSH
54695: LD_INT 29
54697: PUSH
54698: LD_INT 30
54700: PUSH
54701: LD_INT 31
54703: PUSH
54704: LD_INT 32
54706: PUSH
54707: LD_INT 33
54709: PUSH
54710: LD_INT 34
54712: PUSH
54713: LD_INT 36
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 101
54755: PUSH
54756: LD_INT 102
54758: PUSH
54759: LD_INT 103
54761: PUSH
54762: LD_INT 104
54764: PUSH
54765: LD_INT 105
54767: PUSH
54768: LD_INT 106
54770: PUSH
54771: LD_INT 107
54773: PUSH
54774: LD_INT 108
54776: PUSH
54777: LD_INT 109
54779: PUSH
54780: LD_INT 110
54782: PUSH
54783: LD_INT 111
54785: PUSH
54786: LD_INT 112
54788: PUSH
54789: LD_INT 113
54791: PUSH
54792: LD_INT 114
54794: PUSH
54795: LD_INT 116
54797: PUSH
54798: LD_INT 117
54800: PUSH
54801: LD_INT 118
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: ST_TO_ADDR
54827: GO 55226
54829: LD_INT 18
54831: DOUBLE
54832: EQUAL
54833: IFTRUE 54837
54835: GO 54985
54837: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54838: LD_ADDR_VAR 0 2
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 4
54848: PUSH
54849: LD_INT 5
54851: PUSH
54852: LD_INT 7
54854: PUSH
54855: LD_INT 11
54857: PUSH
54858: LD_INT 12
54860: PUSH
54861: LD_INT 15
54863: PUSH
54864: LD_INT 16
54866: PUSH
54867: LD_INT 20
54869: PUSH
54870: LD_INT 21
54872: PUSH
54873: LD_INT 22
54875: PUSH
54876: LD_INT 23
54878: PUSH
54879: LD_INT 25
54881: PUSH
54882: LD_INT 26
54884: PUSH
54885: LD_INT 30
54887: PUSH
54888: LD_INT 31
54890: PUSH
54891: LD_INT 32
54893: PUSH
54894: LD_INT 33
54896: PUSH
54897: LD_INT 34
54899: PUSH
54900: LD_INT 35
54902: PUSH
54903: LD_INT 36
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 101
54931: PUSH
54932: LD_INT 102
54934: PUSH
54935: LD_INT 103
54937: PUSH
54938: LD_INT 106
54940: PUSH
54941: LD_INT 108
54943: PUSH
54944: LD_INT 112
54946: PUSH
54947: LD_INT 113
54949: PUSH
54950: LD_INT 114
54952: PUSH
54953: LD_INT 115
54955: PUSH
54956: LD_INT 116
54958: PUSH
54959: LD_INT 117
54961: PUSH
54962: LD_INT 118
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: ST_TO_ADDR
54983: GO 55226
54985: LD_INT 19
54987: DOUBLE
54988: EQUAL
54989: IFTRUE 54993
54991: GO 55225
54993: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
54994: LD_ADDR_VAR 0 2
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: LD_INT 3
55007: PUSH
55008: LD_INT 4
55010: PUSH
55011: LD_INT 5
55013: PUSH
55014: LD_INT 6
55016: PUSH
55017: LD_INT 7
55019: PUSH
55020: LD_INT 8
55022: PUSH
55023: LD_INT 9
55025: PUSH
55026: LD_INT 10
55028: PUSH
55029: LD_INT 11
55031: PUSH
55032: LD_INT 12
55034: PUSH
55035: LD_INT 13
55037: PUSH
55038: LD_INT 14
55040: PUSH
55041: LD_INT 15
55043: PUSH
55044: LD_INT 16
55046: PUSH
55047: LD_INT 17
55049: PUSH
55050: LD_INT 18
55052: PUSH
55053: LD_INT 19
55055: PUSH
55056: LD_INT 20
55058: PUSH
55059: LD_INT 21
55061: PUSH
55062: LD_INT 22
55064: PUSH
55065: LD_INT 23
55067: PUSH
55068: LD_INT 24
55070: PUSH
55071: LD_INT 25
55073: PUSH
55074: LD_INT 26
55076: PUSH
55077: LD_INT 27
55079: PUSH
55080: LD_INT 28
55082: PUSH
55083: LD_INT 29
55085: PUSH
55086: LD_INT 30
55088: PUSH
55089: LD_INT 31
55091: PUSH
55092: LD_INT 32
55094: PUSH
55095: LD_INT 33
55097: PUSH
55098: LD_INT 34
55100: PUSH
55101: LD_INT 35
55103: PUSH
55104: LD_INT 36
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 101
55147: PUSH
55148: LD_INT 102
55150: PUSH
55151: LD_INT 103
55153: PUSH
55154: LD_INT 104
55156: PUSH
55157: LD_INT 105
55159: PUSH
55160: LD_INT 106
55162: PUSH
55163: LD_INT 107
55165: PUSH
55166: LD_INT 108
55168: PUSH
55169: LD_INT 109
55171: PUSH
55172: LD_INT 110
55174: PUSH
55175: LD_INT 111
55177: PUSH
55178: LD_INT 112
55180: PUSH
55181: LD_INT 113
55183: PUSH
55184: LD_INT 114
55186: PUSH
55187: LD_INT 115
55189: PUSH
55190: LD_INT 116
55192: PUSH
55193: LD_INT 117
55195: PUSH
55196: LD_INT 118
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: ST_TO_ADDR
55223: GO 55226
55225: POP
// end else
55226: GO 55457
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55228: LD_ADDR_VAR 0 2
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: LD_INT 4
55244: PUSH
55245: LD_INT 5
55247: PUSH
55248: LD_INT 6
55250: PUSH
55251: LD_INT 7
55253: PUSH
55254: LD_INT 8
55256: PUSH
55257: LD_INT 9
55259: PUSH
55260: LD_INT 10
55262: PUSH
55263: LD_INT 11
55265: PUSH
55266: LD_INT 12
55268: PUSH
55269: LD_INT 13
55271: PUSH
55272: LD_INT 14
55274: PUSH
55275: LD_INT 15
55277: PUSH
55278: LD_INT 16
55280: PUSH
55281: LD_INT 17
55283: PUSH
55284: LD_INT 18
55286: PUSH
55287: LD_INT 19
55289: PUSH
55290: LD_INT 20
55292: PUSH
55293: LD_INT 21
55295: PUSH
55296: LD_INT 22
55298: PUSH
55299: LD_INT 23
55301: PUSH
55302: LD_INT 24
55304: PUSH
55305: LD_INT 25
55307: PUSH
55308: LD_INT 26
55310: PUSH
55311: LD_INT 27
55313: PUSH
55314: LD_INT 28
55316: PUSH
55317: LD_INT 29
55319: PUSH
55320: LD_INT 30
55322: PUSH
55323: LD_INT 31
55325: PUSH
55326: LD_INT 32
55328: PUSH
55329: LD_INT 33
55331: PUSH
55332: LD_INT 34
55334: PUSH
55335: LD_INT 35
55337: PUSH
55338: LD_INT 36
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 101
55381: PUSH
55382: LD_INT 102
55384: PUSH
55385: LD_INT 103
55387: PUSH
55388: LD_INT 104
55390: PUSH
55391: LD_INT 105
55393: PUSH
55394: LD_INT 106
55396: PUSH
55397: LD_INT 107
55399: PUSH
55400: LD_INT 108
55402: PUSH
55403: LD_INT 109
55405: PUSH
55406: LD_INT 110
55408: PUSH
55409: LD_INT 111
55411: PUSH
55412: LD_INT 112
55414: PUSH
55415: LD_INT 113
55417: PUSH
55418: LD_INT 114
55420: PUSH
55421: LD_INT 115
55423: PUSH
55424: LD_INT 116
55426: PUSH
55427: LD_INT 117
55429: PUSH
55430: LD_INT 118
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: ST_TO_ADDR
// if result then
55457: LD_VAR 0 2
55461: IFFALSE 56247
// begin normal :=  ;
55463: LD_ADDR_VAR 0 5
55467: PUSH
55468: LD_STRING 
55470: ST_TO_ADDR
// hardcore :=  ;
55471: LD_ADDR_VAR 0 6
55475: PUSH
55476: LD_STRING 
55478: ST_TO_ADDR
// active :=  ;
55479: LD_ADDR_VAR 0 7
55483: PUSH
55484: LD_STRING 
55486: ST_TO_ADDR
// for i = 1 to normalCounter do
55487: LD_ADDR_VAR 0 8
55491: PUSH
55492: DOUBLE
55493: LD_INT 1
55495: DEC
55496: ST_TO_ADDR
55497: LD_EXP 34
55501: PUSH
55502: FOR_TO
55503: IFFALSE 55604
// begin tmp := 0 ;
55505: LD_ADDR_VAR 0 3
55509: PUSH
55510: LD_STRING 0
55512: ST_TO_ADDR
// if result [ 1 ] then
55513: LD_VAR 0 2
55517: PUSH
55518: LD_INT 1
55520: ARRAY
55521: IFFALSE 55586
// if result [ 1 ] [ 1 ] = i then
55523: LD_VAR 0 2
55527: PUSH
55528: LD_INT 1
55530: ARRAY
55531: PUSH
55532: LD_INT 1
55534: ARRAY
55535: PUSH
55536: LD_VAR 0 8
55540: EQUAL
55541: IFFALSE 55586
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55543: LD_ADDR_VAR 0 2
55547: PUSH
55548: LD_VAR 0 2
55552: PPUSH
55553: LD_INT 1
55555: PPUSH
55556: LD_VAR 0 2
55560: PUSH
55561: LD_INT 1
55563: ARRAY
55564: PPUSH
55565: LD_INT 1
55567: PPUSH
55568: CALL_OW 3
55572: PPUSH
55573: CALL_OW 1
55577: ST_TO_ADDR
// tmp := 1 ;
55578: LD_ADDR_VAR 0 3
55582: PUSH
55583: LD_STRING 1
55585: ST_TO_ADDR
// end ; normal := normal & tmp ;
55586: LD_ADDR_VAR 0 5
55590: PUSH
55591: LD_VAR 0 5
55595: PUSH
55596: LD_VAR 0 3
55600: STR
55601: ST_TO_ADDR
// end ;
55602: GO 55502
55604: POP
55605: POP
// for i = 1 to hardcoreCounter do
55606: LD_ADDR_VAR 0 8
55610: PUSH
55611: DOUBLE
55612: LD_INT 1
55614: DEC
55615: ST_TO_ADDR
55616: LD_EXP 35
55620: PUSH
55621: FOR_TO
55622: IFFALSE 55727
// begin tmp := 0 ;
55624: LD_ADDR_VAR 0 3
55628: PUSH
55629: LD_STRING 0
55631: ST_TO_ADDR
// if result [ 2 ] then
55632: LD_VAR 0 2
55636: PUSH
55637: LD_INT 2
55639: ARRAY
55640: IFFALSE 55709
// if result [ 2 ] [ 1 ] = 100 + i then
55642: LD_VAR 0 2
55646: PUSH
55647: LD_INT 2
55649: ARRAY
55650: PUSH
55651: LD_INT 1
55653: ARRAY
55654: PUSH
55655: LD_INT 100
55657: PUSH
55658: LD_VAR 0 8
55662: PLUS
55663: EQUAL
55664: IFFALSE 55709
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55666: LD_ADDR_VAR 0 2
55670: PUSH
55671: LD_VAR 0 2
55675: PPUSH
55676: LD_INT 2
55678: PPUSH
55679: LD_VAR 0 2
55683: PUSH
55684: LD_INT 2
55686: ARRAY
55687: PPUSH
55688: LD_INT 1
55690: PPUSH
55691: CALL_OW 3
55695: PPUSH
55696: CALL_OW 1
55700: ST_TO_ADDR
// tmp := 1 ;
55701: LD_ADDR_VAR 0 3
55705: PUSH
55706: LD_STRING 1
55708: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55709: LD_ADDR_VAR 0 6
55713: PUSH
55714: LD_VAR 0 6
55718: PUSH
55719: LD_VAR 0 3
55723: STR
55724: ST_TO_ADDR
// end ;
55725: GO 55621
55727: POP
55728: POP
// if isGameLoad then
55729: LD_VAR 0 1
55733: IFFALSE 56208
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55735: LD_ADDR_VAR 0 4
55739: PUSH
55740: LD_EXP 38
55744: PUSH
55745: LD_EXP 37
55749: PUSH
55750: LD_EXP 39
55754: PUSH
55755: LD_EXP 36
55759: PUSH
55760: LD_EXP 40
55764: PUSH
55765: LD_EXP 41
55769: PUSH
55770: LD_EXP 42
55774: PUSH
55775: LD_EXP 43
55779: PUSH
55780: LD_EXP 44
55784: PUSH
55785: LD_EXP 45
55789: PUSH
55790: LD_EXP 46
55794: PUSH
55795: LD_EXP 47
55799: PUSH
55800: LD_EXP 48
55804: PUSH
55805: LD_EXP 49
55809: PUSH
55810: LD_EXP 57
55814: PUSH
55815: LD_EXP 58
55819: PUSH
55820: LD_EXP 59
55824: PUSH
55825: LD_EXP 60
55829: PUSH
55830: LD_EXP 62
55834: PUSH
55835: LD_EXP 63
55839: PUSH
55840: LD_EXP 64
55844: PUSH
55845: LD_EXP 67
55849: PUSH
55850: LD_EXP 69
55854: PUSH
55855: LD_EXP 70
55859: PUSH
55860: LD_EXP 71
55864: PUSH
55865: LD_EXP 73
55869: PUSH
55870: LD_EXP 74
55874: PUSH
55875: LD_EXP 77
55879: PUSH
55880: LD_EXP 78
55884: PUSH
55885: LD_EXP 79
55889: PUSH
55890: LD_EXP 80
55894: PUSH
55895: LD_EXP 81
55899: PUSH
55900: LD_EXP 82
55904: PUSH
55905: LD_EXP 83
55909: PUSH
55910: LD_EXP 84
55914: PUSH
55915: LD_EXP 85
55919: PUSH
55920: LD_EXP 50
55924: PUSH
55925: LD_EXP 51
55929: PUSH
55930: LD_EXP 54
55934: PUSH
55935: LD_EXP 55
55939: PUSH
55940: LD_EXP 56
55944: PUSH
55945: LD_EXP 52
55949: PUSH
55950: LD_EXP 53
55954: PUSH
55955: LD_EXP 61
55959: PUSH
55960: LD_EXP 65
55964: PUSH
55965: LD_EXP 66
55969: PUSH
55970: LD_EXP 68
55974: PUSH
55975: LD_EXP 72
55979: PUSH
55980: LD_EXP 75
55984: PUSH
55985: LD_EXP 76
55989: PUSH
55990: LD_EXP 86
55994: PUSH
55995: LD_EXP 87
55999: PUSH
56000: LD_EXP 88
56004: PUSH
56005: LD_EXP 89
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: ST_TO_ADDR
// tmp :=  ;
56066: LD_ADDR_VAR 0 3
56070: PUSH
56071: LD_STRING 
56073: ST_TO_ADDR
// for i = 1 to normalCounter do
56074: LD_ADDR_VAR 0 8
56078: PUSH
56079: DOUBLE
56080: LD_INT 1
56082: DEC
56083: ST_TO_ADDR
56084: LD_EXP 34
56088: PUSH
56089: FOR_TO
56090: IFFALSE 56126
// begin if flags [ i ] then
56092: LD_VAR 0 4
56096: PUSH
56097: LD_VAR 0 8
56101: ARRAY
56102: IFFALSE 56124
// tmp := tmp & i & ; ;
56104: LD_ADDR_VAR 0 3
56108: PUSH
56109: LD_VAR 0 3
56113: PUSH
56114: LD_VAR 0 8
56118: STR
56119: PUSH
56120: LD_STRING ;
56122: STR
56123: ST_TO_ADDR
// end ;
56124: GO 56089
56126: POP
56127: POP
// for i = 1 to hardcoreCounter do
56128: LD_ADDR_VAR 0 8
56132: PUSH
56133: DOUBLE
56134: LD_INT 1
56136: DEC
56137: ST_TO_ADDR
56138: LD_EXP 35
56142: PUSH
56143: FOR_TO
56144: IFFALSE 56190
// begin if flags [ normalCounter + i ] then
56146: LD_VAR 0 4
56150: PUSH
56151: LD_EXP 34
56155: PUSH
56156: LD_VAR 0 8
56160: PLUS
56161: ARRAY
56162: IFFALSE 56188
// tmp := tmp & ( 100 + i ) & ; ;
56164: LD_ADDR_VAR 0 3
56168: PUSH
56169: LD_VAR 0 3
56173: PUSH
56174: LD_INT 100
56176: PUSH
56177: LD_VAR 0 8
56181: PLUS
56182: STR
56183: PUSH
56184: LD_STRING ;
56186: STR
56187: ST_TO_ADDR
// end ;
56188: GO 56143
56190: POP
56191: POP
// if tmp then
56192: LD_VAR 0 3
56196: IFFALSE 56208
// active := tmp ;
56198: LD_ADDR_VAR 0 7
56202: PUSH
56203: LD_VAR 0 3
56207: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56208: LD_STRING getStreamItemsFromMission("
56210: PUSH
56211: LD_VAR 0 5
56215: STR
56216: PUSH
56217: LD_STRING ","
56219: STR
56220: PUSH
56221: LD_VAR 0 6
56225: STR
56226: PUSH
56227: LD_STRING ","
56229: STR
56230: PUSH
56231: LD_VAR 0 7
56235: STR
56236: PUSH
56237: LD_STRING ")
56239: STR
56240: PPUSH
56241: CALL_OW 559
// end else
56245: GO 56254
// ToLua ( getStreamItemsFromMission("","","") ) ;
56247: LD_STRING getStreamItemsFromMission("","","")
56249: PPUSH
56250: CALL_OW 559
// end ;
56254: LD_VAR 0 2
56258: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56259: LD_EXP 33
56263: PUSH
56264: LD_EXP 38
56268: AND
56269: IFFALSE 56393
56271: GO 56273
56273: DISABLE
56274: LD_INT 0
56276: PPUSH
56277: PPUSH
// begin enable ;
56278: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56279: LD_ADDR_VAR 0 2
56283: PUSH
56284: LD_INT 22
56286: PUSH
56287: LD_OWVAR 2
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: LD_INT 34
56301: PUSH
56302: LD_INT 7
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 34
56311: PUSH
56312: LD_INT 45
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 34
56321: PUSH
56322: LD_INT 28
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 34
56331: PUSH
56332: LD_INT 47
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PPUSH
56350: CALL_OW 69
56354: ST_TO_ADDR
// if not tmp then
56355: LD_VAR 0 2
56359: NOT
56360: IFFALSE 56364
// exit ;
56362: GO 56393
// for i in tmp do
56364: LD_ADDR_VAR 0 1
56368: PUSH
56369: LD_VAR 0 2
56373: PUSH
56374: FOR_IN
56375: IFFALSE 56391
// begin SetLives ( i , 0 ) ;
56377: LD_VAR 0 1
56381: PPUSH
56382: LD_INT 0
56384: PPUSH
56385: CALL_OW 234
// end ;
56389: GO 56374
56391: POP
56392: POP
// end ;
56393: PPOPN 2
56395: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56396: LD_EXP 33
56400: PUSH
56401: LD_EXP 39
56405: AND
56406: IFFALSE 56490
56408: GO 56410
56410: DISABLE
56411: LD_INT 0
56413: PPUSH
56414: PPUSH
// begin enable ;
56415: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56416: LD_ADDR_VAR 0 2
56420: PUSH
56421: LD_INT 22
56423: PUSH
56424: LD_OWVAR 2
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 32
56435: PUSH
56436: LD_INT 3
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PPUSH
56447: CALL_OW 69
56451: ST_TO_ADDR
// if not tmp then
56452: LD_VAR 0 2
56456: NOT
56457: IFFALSE 56461
// exit ;
56459: GO 56490
// for i in tmp do
56461: LD_ADDR_VAR 0 1
56465: PUSH
56466: LD_VAR 0 2
56470: PUSH
56471: FOR_IN
56472: IFFALSE 56488
// begin SetLives ( i , 0 ) ;
56474: LD_VAR 0 1
56478: PPUSH
56479: LD_INT 0
56481: PPUSH
56482: CALL_OW 234
// end ;
56486: GO 56471
56488: POP
56489: POP
// end ;
56490: PPOPN 2
56492: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56493: LD_EXP 33
56497: PUSH
56498: LD_EXP 36
56502: AND
56503: IFFALSE 56596
56505: GO 56507
56507: DISABLE
56508: LD_INT 0
56510: PPUSH
// begin enable ;
56511: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56512: LD_ADDR_VAR 0 1
56516: PUSH
56517: LD_INT 22
56519: PUSH
56520: LD_OWVAR 2
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 25
56534: PUSH
56535: LD_INT 5
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 25
56544: PUSH
56545: LD_INT 9
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 25
56554: PUSH
56555: LD_INT 8
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PPUSH
56572: CALL_OW 69
56576: PUSH
56577: FOR_IN
56578: IFFALSE 56594
// begin SetClass ( i , 1 ) ;
56580: LD_VAR 0 1
56584: PPUSH
56585: LD_INT 1
56587: PPUSH
56588: CALL_OW 336
// end ;
56592: GO 56577
56594: POP
56595: POP
// end ;
56596: PPOPN 1
56598: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56599: LD_EXP 33
56603: PUSH
56604: LD_EXP 37
56608: AND
56609: PUSH
56610: LD_OWVAR 65
56614: PUSH
56615: LD_INT 7
56617: LESS
56618: AND
56619: IFFALSE 56633
56621: GO 56623
56623: DISABLE
// begin enable ;
56624: ENABLE
// game_speed := 7 ;
56625: LD_ADDR_OWVAR 65
56629: PUSH
56630: LD_INT 7
56632: ST_TO_ADDR
// end ;
56633: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56634: LD_EXP 33
56638: PUSH
56639: LD_EXP 40
56643: AND
56644: IFFALSE 56846
56646: GO 56648
56648: DISABLE
56649: LD_INT 0
56651: PPUSH
56652: PPUSH
56653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56654: LD_ADDR_VAR 0 3
56658: PUSH
56659: LD_INT 81
56661: PUSH
56662: LD_OWVAR 2
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 21
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PPUSH
56685: CALL_OW 69
56689: ST_TO_ADDR
// if not tmp then
56690: LD_VAR 0 3
56694: NOT
56695: IFFALSE 56699
// exit ;
56697: GO 56846
// if tmp > 5 then
56699: LD_VAR 0 3
56703: PUSH
56704: LD_INT 5
56706: GREATER
56707: IFFALSE 56719
// k := 5 else
56709: LD_ADDR_VAR 0 2
56713: PUSH
56714: LD_INT 5
56716: ST_TO_ADDR
56717: GO 56729
// k := tmp ;
56719: LD_ADDR_VAR 0 2
56723: PUSH
56724: LD_VAR 0 3
56728: ST_TO_ADDR
// for i := 1 to k do
56729: LD_ADDR_VAR 0 1
56733: PUSH
56734: DOUBLE
56735: LD_INT 1
56737: DEC
56738: ST_TO_ADDR
56739: LD_VAR 0 2
56743: PUSH
56744: FOR_TO
56745: IFFALSE 56844
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56747: LD_VAR 0 3
56751: PUSH
56752: LD_VAR 0 1
56756: ARRAY
56757: PPUSH
56758: LD_VAR 0 1
56762: PUSH
56763: LD_INT 4
56765: MOD
56766: PUSH
56767: LD_INT 1
56769: PLUS
56770: PPUSH
56771: CALL_OW 259
56775: PUSH
56776: LD_INT 10
56778: LESS
56779: IFFALSE 56842
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56781: LD_VAR 0 3
56785: PUSH
56786: LD_VAR 0 1
56790: ARRAY
56791: PPUSH
56792: LD_VAR 0 1
56796: PUSH
56797: LD_INT 4
56799: MOD
56800: PUSH
56801: LD_INT 1
56803: PLUS
56804: PPUSH
56805: LD_VAR 0 3
56809: PUSH
56810: LD_VAR 0 1
56814: ARRAY
56815: PPUSH
56816: LD_VAR 0 1
56820: PUSH
56821: LD_INT 4
56823: MOD
56824: PUSH
56825: LD_INT 1
56827: PLUS
56828: PPUSH
56829: CALL_OW 259
56833: PUSH
56834: LD_INT 1
56836: PLUS
56837: PPUSH
56838: CALL_OW 237
56842: GO 56744
56844: POP
56845: POP
// end ;
56846: PPOPN 3
56848: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56849: LD_EXP 33
56853: PUSH
56854: LD_EXP 41
56858: AND
56859: IFFALSE 56879
56861: GO 56863
56863: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56864: LD_INT 4
56866: PPUSH
56867: LD_OWVAR 2
56871: PPUSH
56872: LD_INT 0
56874: PPUSH
56875: CALL_OW 324
56879: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56880: LD_EXP 33
56884: PUSH
56885: LD_EXP 70
56889: AND
56890: IFFALSE 56910
56892: GO 56894
56894: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56895: LD_INT 19
56897: PPUSH
56898: LD_OWVAR 2
56902: PPUSH
56903: LD_INT 0
56905: PPUSH
56906: CALL_OW 324
56910: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56911: LD_EXP 33
56915: PUSH
56916: LD_EXP 42
56920: AND
56921: IFFALSE 57023
56923: GO 56925
56925: DISABLE
56926: LD_INT 0
56928: PPUSH
56929: PPUSH
// begin enable ;
56930: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56931: LD_ADDR_VAR 0 2
56935: PUSH
56936: LD_INT 22
56938: PUSH
56939: LD_OWVAR 2
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: LD_INT 34
56953: PUSH
56954: LD_INT 11
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 34
56963: PUSH
56964: LD_INT 30
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: LIST
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PPUSH
56980: CALL_OW 69
56984: ST_TO_ADDR
// if not tmp then
56985: LD_VAR 0 2
56989: NOT
56990: IFFALSE 56994
// exit ;
56992: GO 57023
// for i in tmp do
56994: LD_ADDR_VAR 0 1
56998: PUSH
56999: LD_VAR 0 2
57003: PUSH
57004: FOR_IN
57005: IFFALSE 57021
// begin SetLives ( i , 0 ) ;
57007: LD_VAR 0 1
57011: PPUSH
57012: LD_INT 0
57014: PPUSH
57015: CALL_OW 234
// end ;
57019: GO 57004
57021: POP
57022: POP
// end ;
57023: PPOPN 2
57025: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57026: LD_EXP 33
57030: PUSH
57031: LD_EXP 43
57035: AND
57036: IFFALSE 57056
57038: GO 57040
57040: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57041: LD_INT 32
57043: PPUSH
57044: LD_OWVAR 2
57048: PPUSH
57049: LD_INT 0
57051: PPUSH
57052: CALL_OW 324
57056: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57057: LD_EXP 33
57061: PUSH
57062: LD_EXP 44
57066: AND
57067: IFFALSE 57248
57069: GO 57071
57071: DISABLE
57072: LD_INT 0
57074: PPUSH
57075: PPUSH
57076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57077: LD_ADDR_VAR 0 2
57081: PUSH
57082: LD_INT 22
57084: PUSH
57085: LD_OWVAR 2
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 33
57096: PUSH
57097: LD_INT 3
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PPUSH
57108: CALL_OW 69
57112: ST_TO_ADDR
// if not tmp then
57113: LD_VAR 0 2
57117: NOT
57118: IFFALSE 57122
// exit ;
57120: GO 57248
// side := 0 ;
57122: LD_ADDR_VAR 0 3
57126: PUSH
57127: LD_INT 0
57129: ST_TO_ADDR
// for i := 1 to 8 do
57130: LD_ADDR_VAR 0 1
57134: PUSH
57135: DOUBLE
57136: LD_INT 1
57138: DEC
57139: ST_TO_ADDR
57140: LD_INT 8
57142: PUSH
57143: FOR_TO
57144: IFFALSE 57192
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57146: LD_OWVAR 2
57150: PUSH
57151: LD_VAR 0 1
57155: NONEQUAL
57156: PUSH
57157: LD_OWVAR 2
57161: PPUSH
57162: LD_VAR 0 1
57166: PPUSH
57167: CALL_OW 81
57171: PUSH
57172: LD_INT 2
57174: EQUAL
57175: AND
57176: IFFALSE 57190
// begin side := i ;
57178: LD_ADDR_VAR 0 3
57182: PUSH
57183: LD_VAR 0 1
57187: ST_TO_ADDR
// break ;
57188: GO 57192
// end ;
57190: GO 57143
57192: POP
57193: POP
// if not side then
57194: LD_VAR 0 3
57198: NOT
57199: IFFALSE 57203
// exit ;
57201: GO 57248
// for i := 1 to tmp do
57203: LD_ADDR_VAR 0 1
57207: PUSH
57208: DOUBLE
57209: LD_INT 1
57211: DEC
57212: ST_TO_ADDR
57213: LD_VAR 0 2
57217: PUSH
57218: FOR_TO
57219: IFFALSE 57246
// if Prob ( 60 ) then
57221: LD_INT 60
57223: PPUSH
57224: CALL_OW 13
57228: IFFALSE 57244
// SetSide ( i , side ) ;
57230: LD_VAR 0 1
57234: PPUSH
57235: LD_VAR 0 3
57239: PPUSH
57240: CALL_OW 235
57244: GO 57218
57246: POP
57247: POP
// end ;
57248: PPOPN 3
57250: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57251: LD_EXP 33
57255: PUSH
57256: LD_EXP 46
57260: AND
57261: IFFALSE 57380
57263: GO 57265
57265: DISABLE
57266: LD_INT 0
57268: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57269: LD_ADDR_VAR 0 1
57273: PUSH
57274: LD_INT 22
57276: PUSH
57277: LD_OWVAR 2
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 21
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 3
57298: PUSH
57299: LD_INT 23
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: LIST
57317: PPUSH
57318: CALL_OW 69
57322: PUSH
57323: FOR_IN
57324: IFFALSE 57378
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57326: LD_VAR 0 1
57330: PPUSH
57331: CALL_OW 257
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: LD_INT 4
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: IN
57354: IFFALSE 57376
// SetClass ( un , rand ( 1 , 4 ) ) ;
57356: LD_VAR 0 1
57360: PPUSH
57361: LD_INT 1
57363: PPUSH
57364: LD_INT 4
57366: PPUSH
57367: CALL_OW 12
57371: PPUSH
57372: CALL_OW 336
57376: GO 57323
57378: POP
57379: POP
// end ;
57380: PPOPN 1
57382: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57383: LD_EXP 33
57387: PUSH
57388: LD_EXP 45
57392: AND
57393: IFFALSE 57472
57395: GO 57397
57397: DISABLE
57398: LD_INT 0
57400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57401: LD_ADDR_VAR 0 1
57405: PUSH
57406: LD_INT 22
57408: PUSH
57409: LD_OWVAR 2
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 21
57420: PUSH
57421: LD_INT 3
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PPUSH
57432: CALL_OW 69
57436: ST_TO_ADDR
// if not tmp then
57437: LD_VAR 0 1
57441: NOT
57442: IFFALSE 57446
// exit ;
57444: GO 57472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57446: LD_VAR 0 1
57450: PUSH
57451: LD_INT 1
57453: PPUSH
57454: LD_VAR 0 1
57458: PPUSH
57459: CALL_OW 12
57463: ARRAY
57464: PPUSH
57465: LD_INT 100
57467: PPUSH
57468: CALL_OW 234
// end ;
57472: PPOPN 1
57474: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57475: LD_EXP 33
57479: PUSH
57480: LD_EXP 47
57484: AND
57485: IFFALSE 57583
57487: GO 57489
57489: DISABLE
57490: LD_INT 0
57492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57493: LD_ADDR_VAR 0 1
57497: PUSH
57498: LD_INT 22
57500: PUSH
57501: LD_OWVAR 2
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 21
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PPUSH
57524: CALL_OW 69
57528: ST_TO_ADDR
// if not tmp then
57529: LD_VAR 0 1
57533: NOT
57534: IFFALSE 57538
// exit ;
57536: GO 57583
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57538: LD_VAR 0 1
57542: PUSH
57543: LD_INT 1
57545: PPUSH
57546: LD_VAR 0 1
57550: PPUSH
57551: CALL_OW 12
57555: ARRAY
57556: PPUSH
57557: LD_INT 1
57559: PPUSH
57560: LD_INT 4
57562: PPUSH
57563: CALL_OW 12
57567: PPUSH
57568: LD_INT 3000
57570: PPUSH
57571: LD_INT 9000
57573: PPUSH
57574: CALL_OW 12
57578: PPUSH
57579: CALL_OW 492
// end ;
57583: PPOPN 1
57585: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57586: LD_EXP 33
57590: PUSH
57591: LD_EXP 48
57595: AND
57596: IFFALSE 57616
57598: GO 57600
57600: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57601: LD_INT 1
57603: PPUSH
57604: LD_OWVAR 2
57608: PPUSH
57609: LD_INT 0
57611: PPUSH
57612: CALL_OW 324
57616: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57617: LD_EXP 33
57621: PUSH
57622: LD_EXP 49
57626: AND
57627: IFFALSE 57710
57629: GO 57631
57631: DISABLE
57632: LD_INT 0
57634: PPUSH
57635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57636: LD_ADDR_VAR 0 2
57640: PUSH
57641: LD_INT 22
57643: PUSH
57644: LD_OWVAR 2
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 21
57655: PUSH
57656: LD_INT 3
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PPUSH
57667: CALL_OW 69
57671: ST_TO_ADDR
// if not tmp then
57672: LD_VAR 0 2
57676: NOT
57677: IFFALSE 57681
// exit ;
57679: GO 57710
// for i in tmp do
57681: LD_ADDR_VAR 0 1
57685: PUSH
57686: LD_VAR 0 2
57690: PUSH
57691: FOR_IN
57692: IFFALSE 57708
// SetBLevel ( i , 10 ) ;
57694: LD_VAR 0 1
57698: PPUSH
57699: LD_INT 10
57701: PPUSH
57702: CALL_OW 241
57706: GO 57691
57708: POP
57709: POP
// end ;
57710: PPOPN 2
57712: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57713: LD_EXP 33
57717: PUSH
57718: LD_EXP 50
57722: AND
57723: IFFALSE 57834
57725: GO 57727
57727: DISABLE
57728: LD_INT 0
57730: PPUSH
57731: PPUSH
57732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57733: LD_ADDR_VAR 0 3
57737: PUSH
57738: LD_INT 22
57740: PUSH
57741: LD_OWVAR 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 25
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PPUSH
57764: CALL_OW 69
57768: ST_TO_ADDR
// if not tmp then
57769: LD_VAR 0 3
57773: NOT
57774: IFFALSE 57778
// exit ;
57776: GO 57834
// un := tmp [ rand ( 1 , tmp ) ] ;
57778: LD_ADDR_VAR 0 2
57782: PUSH
57783: LD_VAR 0 3
57787: PUSH
57788: LD_INT 1
57790: PPUSH
57791: LD_VAR 0 3
57795: PPUSH
57796: CALL_OW 12
57800: ARRAY
57801: ST_TO_ADDR
// if Crawls ( un ) then
57802: LD_VAR 0 2
57806: PPUSH
57807: CALL_OW 318
57811: IFFALSE 57822
// ComWalk ( un ) ;
57813: LD_VAR 0 2
57817: PPUSH
57818: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57822: LD_VAR 0 2
57826: PPUSH
57827: LD_INT 5
57829: PPUSH
57830: CALL_OW 336
// end ;
57834: PPOPN 3
57836: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57837: LD_EXP 33
57841: PUSH
57842: LD_EXP 51
57846: AND
57847: PUSH
57848: LD_OWVAR 67
57852: PUSH
57853: LD_INT 4
57855: LESS
57856: AND
57857: IFFALSE 57876
57859: GO 57861
57861: DISABLE
// begin Difficulty := Difficulty + 1 ;
57862: LD_ADDR_OWVAR 67
57866: PUSH
57867: LD_OWVAR 67
57871: PUSH
57872: LD_INT 1
57874: PLUS
57875: ST_TO_ADDR
// end ;
57876: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57877: LD_EXP 33
57881: PUSH
57882: LD_EXP 52
57886: AND
57887: IFFALSE 57990
57889: GO 57891
57891: DISABLE
57892: LD_INT 0
57894: PPUSH
// begin for i := 1 to 5 do
57895: LD_ADDR_VAR 0 1
57899: PUSH
57900: DOUBLE
57901: LD_INT 1
57903: DEC
57904: ST_TO_ADDR
57905: LD_INT 5
57907: PUSH
57908: FOR_TO
57909: IFFALSE 57988
// begin uc_nation := nation_nature ;
57911: LD_ADDR_OWVAR 21
57915: PUSH
57916: LD_INT 0
57918: ST_TO_ADDR
// uc_side := 0 ;
57919: LD_ADDR_OWVAR 20
57923: PUSH
57924: LD_INT 0
57926: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57927: LD_ADDR_OWVAR 29
57931: PUSH
57932: LD_INT 12
57934: PUSH
57935: LD_INT 12
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: ST_TO_ADDR
// hc_agressivity := 20 ;
57942: LD_ADDR_OWVAR 35
57946: PUSH
57947: LD_INT 20
57949: ST_TO_ADDR
// hc_class := class_tiger ;
57950: LD_ADDR_OWVAR 28
57954: PUSH
57955: LD_INT 14
57957: ST_TO_ADDR
// hc_gallery :=  ;
57958: LD_ADDR_OWVAR 33
57962: PUSH
57963: LD_STRING 
57965: ST_TO_ADDR
// hc_name :=  ;
57966: LD_ADDR_OWVAR 26
57970: PUSH
57971: LD_STRING 
57973: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57974: CALL_OW 44
57978: PPUSH
57979: LD_INT 0
57981: PPUSH
57982: CALL_OW 51
// end ;
57986: GO 57908
57988: POP
57989: POP
// end ;
57990: PPOPN 1
57992: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57993: LD_EXP 33
57997: PUSH
57998: LD_EXP 53
58002: AND
58003: IFFALSE 58012
58005: GO 58007
58007: DISABLE
// StreamSibBomb ;
58008: CALL 58013 0 0
58012: END
// export function StreamSibBomb ; var i , x , y ; begin
58013: LD_INT 0
58015: PPUSH
58016: PPUSH
58017: PPUSH
58018: PPUSH
// result := false ;
58019: LD_ADDR_VAR 0 1
58023: PUSH
58024: LD_INT 0
58026: ST_TO_ADDR
// for i := 1 to 16 do
58027: LD_ADDR_VAR 0 2
58031: PUSH
58032: DOUBLE
58033: LD_INT 1
58035: DEC
58036: ST_TO_ADDR
58037: LD_INT 16
58039: PUSH
58040: FOR_TO
58041: IFFALSE 58240
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58043: LD_ADDR_VAR 0 3
58047: PUSH
58048: LD_INT 10
58050: PUSH
58051: LD_INT 20
58053: PUSH
58054: LD_INT 30
58056: PUSH
58057: LD_INT 40
58059: PUSH
58060: LD_INT 50
58062: PUSH
58063: LD_INT 60
58065: PUSH
58066: LD_INT 70
58068: PUSH
58069: LD_INT 80
58071: PUSH
58072: LD_INT 90
58074: PUSH
58075: LD_INT 100
58077: PUSH
58078: LD_INT 110
58080: PUSH
58081: LD_INT 120
58083: PUSH
58084: LD_INT 130
58086: PUSH
58087: LD_INT 140
58089: PUSH
58090: LD_INT 150
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: PPUSH
58113: LD_INT 15
58115: PPUSH
58116: CALL_OW 12
58120: ARRAY
58121: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58122: LD_ADDR_VAR 0 4
58126: PUSH
58127: LD_INT 10
58129: PUSH
58130: LD_INT 20
58132: PUSH
58133: LD_INT 30
58135: PUSH
58136: LD_INT 40
58138: PUSH
58139: LD_INT 50
58141: PUSH
58142: LD_INT 60
58144: PUSH
58145: LD_INT 70
58147: PUSH
58148: LD_INT 80
58150: PUSH
58151: LD_INT 90
58153: PUSH
58154: LD_INT 100
58156: PUSH
58157: LD_INT 110
58159: PUSH
58160: LD_INT 120
58162: PUSH
58163: LD_INT 130
58165: PUSH
58166: LD_INT 140
58168: PUSH
58169: LD_INT 150
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PPUSH
58192: LD_INT 15
58194: PPUSH
58195: CALL_OW 12
58199: ARRAY
58200: ST_TO_ADDR
// if ValidHex ( x , y ) then
58201: LD_VAR 0 3
58205: PPUSH
58206: LD_VAR 0 4
58210: PPUSH
58211: CALL_OW 488
58215: IFFALSE 58238
// begin result := [ x , y ] ;
58217: LD_ADDR_VAR 0 1
58221: PUSH
58222: LD_VAR 0 3
58226: PUSH
58227: LD_VAR 0 4
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: ST_TO_ADDR
// break ;
58236: GO 58240
// end ; end ;
58238: GO 58040
58240: POP
58241: POP
// if result then
58242: LD_VAR 0 1
58246: IFFALSE 58306
// begin ToLua ( playSibBomb() ) ;
58248: LD_STRING playSibBomb()
58250: PPUSH
58251: CALL_OW 559
// wait ( 0 0$14 ) ;
58255: LD_INT 490
58257: PPUSH
58258: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58262: LD_VAR 0 1
58266: PUSH
58267: LD_INT 1
58269: ARRAY
58270: PPUSH
58271: LD_VAR 0 1
58275: PUSH
58276: LD_INT 2
58278: ARRAY
58279: PPUSH
58280: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58284: LD_VAR 0 1
58288: PUSH
58289: LD_INT 1
58291: ARRAY
58292: PPUSH
58293: LD_VAR 0 1
58297: PUSH
58298: LD_INT 2
58300: ARRAY
58301: PPUSH
58302: CALL_OW 429
// end ; end ;
58306: LD_VAR 0 1
58310: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58311: LD_EXP 33
58315: PUSH
58316: LD_EXP 55
58320: AND
58321: IFFALSE 58333
58323: GO 58325
58325: DISABLE
// YouLost (  ) ;
58326: LD_STRING 
58328: PPUSH
58329: CALL_OW 104
58333: END
// every 0 0$1 trigger StreamModeActive and sFog do
58334: LD_EXP 33
58338: PUSH
58339: LD_EXP 54
58343: AND
58344: IFFALSE 58358
58346: GO 58348
58348: DISABLE
// FogOff ( your_side ) ;
58349: LD_OWVAR 2
58353: PPUSH
58354: CALL_OW 344
58358: END
// every 0 0$1 trigger StreamModeActive and sSun do
58359: LD_EXP 33
58363: PUSH
58364: LD_EXP 56
58368: AND
58369: IFFALSE 58397
58371: GO 58373
58373: DISABLE
// begin solar_recharge_percent := 0 ;
58374: LD_ADDR_OWVAR 79
58378: PUSH
58379: LD_INT 0
58381: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58382: LD_INT 10500
58384: PPUSH
58385: CALL_OW 67
// solar_recharge_percent := 100 ;
58389: LD_ADDR_OWVAR 79
58393: PUSH
58394: LD_INT 100
58396: ST_TO_ADDR
// end ;
58397: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58398: LD_EXP 33
58402: PUSH
58403: LD_EXP 57
58407: AND
58408: IFFALSE 58647
58410: GO 58412
58412: DISABLE
58413: LD_INT 0
58415: PPUSH
58416: PPUSH
58417: PPUSH
// begin tmp := [ ] ;
58418: LD_ADDR_VAR 0 3
58422: PUSH
58423: EMPTY
58424: ST_TO_ADDR
// for i := 1 to 6 do
58425: LD_ADDR_VAR 0 1
58429: PUSH
58430: DOUBLE
58431: LD_INT 1
58433: DEC
58434: ST_TO_ADDR
58435: LD_INT 6
58437: PUSH
58438: FOR_TO
58439: IFFALSE 58544
// begin uc_nation := nation_nature ;
58441: LD_ADDR_OWVAR 21
58445: PUSH
58446: LD_INT 0
58448: ST_TO_ADDR
// uc_side := 0 ;
58449: LD_ADDR_OWVAR 20
58453: PUSH
58454: LD_INT 0
58456: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58457: LD_ADDR_OWVAR 29
58461: PUSH
58462: LD_INT 12
58464: PUSH
58465: LD_INT 12
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: ST_TO_ADDR
// hc_agressivity := 20 ;
58472: LD_ADDR_OWVAR 35
58476: PUSH
58477: LD_INT 20
58479: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58480: LD_ADDR_OWVAR 28
58484: PUSH
58485: LD_INT 17
58487: ST_TO_ADDR
// hc_gallery :=  ;
58488: LD_ADDR_OWVAR 33
58492: PUSH
58493: LD_STRING 
58495: ST_TO_ADDR
// hc_name :=  ;
58496: LD_ADDR_OWVAR 26
58500: PUSH
58501: LD_STRING 
58503: ST_TO_ADDR
// un := CreateHuman ;
58504: LD_ADDR_VAR 0 2
58508: PUSH
58509: CALL_OW 44
58513: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58514: LD_VAR 0 2
58518: PPUSH
58519: LD_INT 1
58521: PPUSH
58522: CALL_OW 51
// tmp := tmp ^ un ;
58526: LD_ADDR_VAR 0 3
58530: PUSH
58531: LD_VAR 0 3
58535: PUSH
58536: LD_VAR 0 2
58540: ADD
58541: ST_TO_ADDR
// end ;
58542: GO 58438
58544: POP
58545: POP
// repeat wait ( 0 0$1 ) ;
58546: LD_INT 35
58548: PPUSH
58549: CALL_OW 67
// for un in tmp do
58553: LD_ADDR_VAR 0 2
58557: PUSH
58558: LD_VAR 0 3
58562: PUSH
58563: FOR_IN
58564: IFFALSE 58638
// begin if IsDead ( un ) then
58566: LD_VAR 0 2
58570: PPUSH
58571: CALL_OW 301
58575: IFFALSE 58595
// begin tmp := tmp diff un ;
58577: LD_ADDR_VAR 0 3
58581: PUSH
58582: LD_VAR 0 3
58586: PUSH
58587: LD_VAR 0 2
58591: DIFF
58592: ST_TO_ADDR
// continue ;
58593: GO 58563
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58595: LD_VAR 0 2
58599: PPUSH
58600: LD_INT 3
58602: PUSH
58603: LD_INT 22
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PPUSH
58617: CALL_OW 69
58621: PPUSH
58622: LD_VAR 0 2
58626: PPUSH
58627: CALL_OW 74
58631: PPUSH
58632: CALL_OW 115
// end ;
58636: GO 58563
58638: POP
58639: POP
// until not tmp ;
58640: LD_VAR 0 3
58644: NOT
58645: IFFALSE 58546
// end ;
58647: PPOPN 3
58649: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58650: LD_EXP 33
58654: PUSH
58655: LD_EXP 58
58659: AND
58660: IFFALSE 58714
58662: GO 58664
58664: DISABLE
// begin ToLua ( displayTroll(); ) ;
58665: LD_STRING displayTroll();
58667: PPUSH
58668: CALL_OW 559
// wait ( 3 3$00 ) ;
58672: LD_INT 6300
58674: PPUSH
58675: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58679: LD_STRING hideTroll();
58681: PPUSH
58682: CALL_OW 559
// wait ( 1 1$00 ) ;
58686: LD_INT 2100
58688: PPUSH
58689: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58693: LD_STRING displayTroll();
58695: PPUSH
58696: CALL_OW 559
// wait ( 1 1$00 ) ;
58700: LD_INT 2100
58702: PPUSH
58703: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58707: LD_STRING hideTroll();
58709: PPUSH
58710: CALL_OW 559
// end ;
58714: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58715: LD_EXP 33
58719: PUSH
58720: LD_EXP 59
58724: AND
58725: IFFALSE 58788
58727: GO 58729
58729: DISABLE
58730: LD_INT 0
58732: PPUSH
// begin p := 0 ;
58733: LD_ADDR_VAR 0 1
58737: PUSH
58738: LD_INT 0
58740: ST_TO_ADDR
// repeat game_speed := 1 ;
58741: LD_ADDR_OWVAR 65
58745: PUSH
58746: LD_INT 1
58748: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58749: LD_INT 35
58751: PPUSH
58752: CALL_OW 67
// p := p + 1 ;
58756: LD_ADDR_VAR 0 1
58760: PUSH
58761: LD_VAR 0 1
58765: PUSH
58766: LD_INT 1
58768: PLUS
58769: ST_TO_ADDR
// until p >= 60 ;
58770: LD_VAR 0 1
58774: PUSH
58775: LD_INT 60
58777: GREATEREQUAL
58778: IFFALSE 58741
// game_speed := 4 ;
58780: LD_ADDR_OWVAR 65
58784: PUSH
58785: LD_INT 4
58787: ST_TO_ADDR
// end ;
58788: PPOPN 1
58790: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58791: LD_EXP 33
58795: PUSH
58796: LD_EXP 60
58800: AND
58801: IFFALSE 58947
58803: GO 58805
58805: DISABLE
58806: LD_INT 0
58808: PPUSH
58809: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58810: LD_ADDR_VAR 0 1
58814: PUSH
58815: LD_INT 22
58817: PUSH
58818: LD_OWVAR 2
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 30
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 30
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PPUSH
58859: CALL_OW 69
58863: ST_TO_ADDR
// if not depot then
58864: LD_VAR 0 1
58868: NOT
58869: IFFALSE 58873
// exit ;
58871: GO 58947
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58873: LD_ADDR_VAR 0 2
58877: PUSH
58878: LD_VAR 0 1
58882: PUSH
58883: LD_INT 1
58885: PPUSH
58886: LD_VAR 0 1
58890: PPUSH
58891: CALL_OW 12
58895: ARRAY
58896: PPUSH
58897: CALL_OW 274
58901: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58902: LD_VAR 0 2
58906: PPUSH
58907: LD_INT 1
58909: PPUSH
58910: LD_INT 0
58912: PPUSH
58913: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58917: LD_VAR 0 2
58921: PPUSH
58922: LD_INT 2
58924: PPUSH
58925: LD_INT 0
58927: PPUSH
58928: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58932: LD_VAR 0 2
58936: PPUSH
58937: LD_INT 3
58939: PPUSH
58940: LD_INT 0
58942: PPUSH
58943: CALL_OW 277
// end ;
58947: PPOPN 2
58949: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58950: LD_EXP 33
58954: PUSH
58955: LD_EXP 61
58959: AND
58960: IFFALSE 59057
58962: GO 58964
58964: DISABLE
58965: LD_INT 0
58967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58968: LD_ADDR_VAR 0 1
58972: PUSH
58973: LD_INT 22
58975: PUSH
58976: LD_OWVAR 2
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 21
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: LD_INT 23
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: LIST
59016: PPUSH
59017: CALL_OW 69
59021: ST_TO_ADDR
// if not tmp then
59022: LD_VAR 0 1
59026: NOT
59027: IFFALSE 59031
// exit ;
59029: GO 59057
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59031: LD_VAR 0 1
59035: PUSH
59036: LD_INT 1
59038: PPUSH
59039: LD_VAR 0 1
59043: PPUSH
59044: CALL_OW 12
59048: ARRAY
59049: PPUSH
59050: LD_INT 200
59052: PPUSH
59053: CALL_OW 234
// end ;
59057: PPOPN 1
59059: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59060: LD_EXP 33
59064: PUSH
59065: LD_EXP 62
59069: AND
59070: IFFALSE 59149
59072: GO 59074
59074: DISABLE
59075: LD_INT 0
59077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59078: LD_ADDR_VAR 0 1
59082: PUSH
59083: LD_INT 22
59085: PUSH
59086: LD_OWVAR 2
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 21
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PPUSH
59109: CALL_OW 69
59113: ST_TO_ADDR
// if not tmp then
59114: LD_VAR 0 1
59118: NOT
59119: IFFALSE 59123
// exit ;
59121: GO 59149
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59123: LD_VAR 0 1
59127: PUSH
59128: LD_INT 1
59130: PPUSH
59131: LD_VAR 0 1
59135: PPUSH
59136: CALL_OW 12
59140: ARRAY
59141: PPUSH
59142: LD_INT 60
59144: PPUSH
59145: CALL_OW 234
// end ;
59149: PPOPN 1
59151: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59152: LD_EXP 33
59156: PUSH
59157: LD_EXP 63
59161: AND
59162: IFFALSE 59261
59164: GO 59166
59166: DISABLE
59167: LD_INT 0
59169: PPUSH
59170: PPUSH
// begin enable ;
59171: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59172: LD_ADDR_VAR 0 1
59176: PUSH
59177: LD_INT 22
59179: PUSH
59180: LD_OWVAR 2
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 61
59191: PUSH
59192: EMPTY
59193: LIST
59194: PUSH
59195: LD_INT 33
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: LIST
59209: PPUSH
59210: CALL_OW 69
59214: ST_TO_ADDR
// if not tmp then
59215: LD_VAR 0 1
59219: NOT
59220: IFFALSE 59224
// exit ;
59222: GO 59261
// for i in tmp do
59224: LD_ADDR_VAR 0 2
59228: PUSH
59229: LD_VAR 0 1
59233: PUSH
59234: FOR_IN
59235: IFFALSE 59259
// if IsControledBy ( i ) then
59237: LD_VAR 0 2
59241: PPUSH
59242: CALL_OW 312
59246: IFFALSE 59257
// ComUnlink ( i ) ;
59248: LD_VAR 0 2
59252: PPUSH
59253: CALL_OW 136
59257: GO 59234
59259: POP
59260: POP
// end ;
59261: PPOPN 2
59263: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59264: LD_EXP 33
59268: PUSH
59269: LD_EXP 64
59273: AND
59274: IFFALSE 59414
59276: GO 59278
59278: DISABLE
59279: LD_INT 0
59281: PPUSH
59282: PPUSH
// begin ToLua ( displayPowell(); ) ;
59283: LD_STRING displayPowell();
59285: PPUSH
59286: CALL_OW 559
// uc_side := 0 ;
59290: LD_ADDR_OWVAR 20
59294: PUSH
59295: LD_INT 0
59297: ST_TO_ADDR
// uc_nation := 2 ;
59298: LD_ADDR_OWVAR 21
59302: PUSH
59303: LD_INT 2
59305: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59306: LD_ADDR_OWVAR 37
59310: PUSH
59311: LD_INT 14
59313: ST_TO_ADDR
// vc_engine := engine_siberite ;
59314: LD_ADDR_OWVAR 39
59318: PUSH
59319: LD_INT 3
59321: ST_TO_ADDR
// vc_control := control_apeman ;
59322: LD_ADDR_OWVAR 38
59326: PUSH
59327: LD_INT 5
59329: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59330: LD_ADDR_OWVAR 40
59334: PUSH
59335: LD_INT 29
59337: ST_TO_ADDR
// un := CreateVehicle ;
59338: LD_ADDR_VAR 0 2
59342: PUSH
59343: CALL_OW 45
59347: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59348: LD_VAR 0 2
59352: PPUSH
59353: LD_INT 1
59355: PPUSH
59356: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59360: LD_INT 35
59362: PPUSH
59363: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59367: LD_VAR 0 2
59371: PPUSH
59372: LD_INT 22
59374: PUSH
59375: LD_OWVAR 2
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PPUSH
59384: CALL_OW 69
59388: PPUSH
59389: LD_VAR 0 2
59393: PPUSH
59394: CALL_OW 74
59398: PPUSH
59399: CALL_OW 115
// until IsDead ( un ) ;
59403: LD_VAR 0 2
59407: PPUSH
59408: CALL_OW 301
59412: IFFALSE 59360
// end ;
59414: PPOPN 2
59416: END
// every 0 0$1 trigger StreamModeActive and sStu do
59417: LD_EXP 33
59421: PUSH
59422: LD_EXP 72
59426: AND
59427: IFFALSE 59443
59429: GO 59431
59431: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59432: LD_STRING displayStucuk();
59434: PPUSH
59435: CALL_OW 559
// ResetFog ;
59439: CALL_OW 335
// end ;
59443: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59444: LD_EXP 33
59448: PUSH
59449: LD_EXP 65
59453: AND
59454: IFFALSE 59595
59456: GO 59458
59458: DISABLE
59459: LD_INT 0
59461: PPUSH
59462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59463: LD_ADDR_VAR 0 2
59467: PUSH
59468: LD_INT 22
59470: PUSH
59471: LD_OWVAR 2
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 21
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PPUSH
59494: CALL_OW 69
59498: ST_TO_ADDR
// if not tmp then
59499: LD_VAR 0 2
59503: NOT
59504: IFFALSE 59508
// exit ;
59506: GO 59595
// un := tmp [ rand ( 1 , tmp ) ] ;
59508: LD_ADDR_VAR 0 1
59512: PUSH
59513: LD_VAR 0 2
59517: PUSH
59518: LD_INT 1
59520: PPUSH
59521: LD_VAR 0 2
59525: PPUSH
59526: CALL_OW 12
59530: ARRAY
59531: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59532: LD_VAR 0 1
59536: PPUSH
59537: LD_INT 0
59539: PPUSH
59540: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59544: LD_VAR 0 1
59548: PPUSH
59549: LD_OWVAR 3
59553: PUSH
59554: LD_VAR 0 1
59558: DIFF
59559: PPUSH
59560: LD_VAR 0 1
59564: PPUSH
59565: CALL_OW 74
59569: PPUSH
59570: CALL_OW 115
// wait ( 0 0$20 ) ;
59574: LD_INT 700
59576: PPUSH
59577: CALL_OW 67
// SetSide ( un , your_side ) ;
59581: LD_VAR 0 1
59585: PPUSH
59586: LD_OWVAR 2
59590: PPUSH
59591: CALL_OW 235
// end ;
59595: PPOPN 2
59597: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59598: LD_EXP 33
59602: PUSH
59603: LD_EXP 66
59607: AND
59608: IFFALSE 59714
59610: GO 59612
59612: DISABLE
59613: LD_INT 0
59615: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59616: LD_ADDR_VAR 0 1
59620: PUSH
59621: LD_INT 22
59623: PUSH
59624: LD_OWVAR 2
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: LD_INT 30
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 30
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: LIST
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PPUSH
59665: CALL_OW 69
59669: ST_TO_ADDR
// if not depot then
59670: LD_VAR 0 1
59674: NOT
59675: IFFALSE 59679
// exit ;
59677: GO 59714
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59679: LD_VAR 0 1
59683: PUSH
59684: LD_INT 1
59686: ARRAY
59687: PPUSH
59688: CALL_OW 250
59692: PPUSH
59693: LD_VAR 0 1
59697: PUSH
59698: LD_INT 1
59700: ARRAY
59701: PPUSH
59702: CALL_OW 251
59706: PPUSH
59707: LD_INT 70
59709: PPUSH
59710: CALL_OW 495
// end ;
59714: PPOPN 1
59716: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59717: LD_EXP 33
59721: PUSH
59722: LD_EXP 67
59726: AND
59727: IFFALSE 59938
59729: GO 59731
59731: DISABLE
59732: LD_INT 0
59734: PPUSH
59735: PPUSH
59736: PPUSH
59737: PPUSH
59738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59739: LD_ADDR_VAR 0 5
59743: PUSH
59744: LD_INT 22
59746: PUSH
59747: LD_OWVAR 2
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 21
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PPUSH
59770: CALL_OW 69
59774: ST_TO_ADDR
// if not tmp then
59775: LD_VAR 0 5
59779: NOT
59780: IFFALSE 59784
// exit ;
59782: GO 59938
// for i in tmp do
59784: LD_ADDR_VAR 0 1
59788: PUSH
59789: LD_VAR 0 5
59793: PUSH
59794: FOR_IN
59795: IFFALSE 59936
// begin d := rand ( 0 , 5 ) ;
59797: LD_ADDR_VAR 0 4
59801: PUSH
59802: LD_INT 0
59804: PPUSH
59805: LD_INT 5
59807: PPUSH
59808: CALL_OW 12
59812: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59813: LD_ADDR_VAR 0 2
59817: PUSH
59818: LD_VAR 0 1
59822: PPUSH
59823: CALL_OW 250
59827: PPUSH
59828: LD_VAR 0 4
59832: PPUSH
59833: LD_INT 3
59835: PPUSH
59836: LD_INT 12
59838: PPUSH
59839: CALL_OW 12
59843: PPUSH
59844: CALL_OW 272
59848: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59849: LD_ADDR_VAR 0 3
59853: PUSH
59854: LD_VAR 0 1
59858: PPUSH
59859: CALL_OW 251
59863: PPUSH
59864: LD_VAR 0 4
59868: PPUSH
59869: LD_INT 3
59871: PPUSH
59872: LD_INT 12
59874: PPUSH
59875: CALL_OW 12
59879: PPUSH
59880: CALL_OW 273
59884: ST_TO_ADDR
// if ValidHex ( x , y ) then
59885: LD_VAR 0 2
59889: PPUSH
59890: LD_VAR 0 3
59894: PPUSH
59895: CALL_OW 488
59899: IFFALSE 59934
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59901: LD_VAR 0 1
59905: PPUSH
59906: LD_VAR 0 2
59910: PPUSH
59911: LD_VAR 0 3
59915: PPUSH
59916: LD_INT 3
59918: PPUSH
59919: LD_INT 6
59921: PPUSH
59922: CALL_OW 12
59926: PPUSH
59927: LD_INT 1
59929: PPUSH
59930: CALL_OW 483
// end ;
59934: GO 59794
59936: POP
59937: POP
// end ;
59938: PPOPN 5
59940: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59941: LD_EXP 33
59945: PUSH
59946: LD_EXP 68
59950: AND
59951: IFFALSE 60045
59953: GO 59955
59955: DISABLE
59956: LD_INT 0
59958: PPUSH
59959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59960: LD_ADDR_VAR 0 2
59964: PUSH
59965: LD_INT 22
59967: PUSH
59968: LD_OWVAR 2
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 32
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 21
59989: PUSH
59990: LD_INT 2
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: LIST
60001: PPUSH
60002: CALL_OW 69
60006: ST_TO_ADDR
// if not tmp then
60007: LD_VAR 0 2
60011: NOT
60012: IFFALSE 60016
// exit ;
60014: GO 60045
// for i in tmp do
60016: LD_ADDR_VAR 0 1
60020: PUSH
60021: LD_VAR 0 2
60025: PUSH
60026: FOR_IN
60027: IFFALSE 60043
// SetFuel ( i , 0 ) ;
60029: LD_VAR 0 1
60033: PPUSH
60034: LD_INT 0
60036: PPUSH
60037: CALL_OW 240
60041: GO 60026
60043: POP
60044: POP
// end ;
60045: PPOPN 2
60047: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60048: LD_EXP 33
60052: PUSH
60053: LD_EXP 69
60057: AND
60058: IFFALSE 60124
60060: GO 60062
60062: DISABLE
60063: LD_INT 0
60065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60066: LD_ADDR_VAR 0 1
60070: PUSH
60071: LD_INT 22
60073: PUSH
60074: LD_OWVAR 2
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 30
60085: PUSH
60086: LD_INT 29
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PPUSH
60097: CALL_OW 69
60101: ST_TO_ADDR
// if not tmp then
60102: LD_VAR 0 1
60106: NOT
60107: IFFALSE 60111
// exit ;
60109: GO 60124
// DestroyUnit ( tmp [ 1 ] ) ;
60111: LD_VAR 0 1
60115: PUSH
60116: LD_INT 1
60118: ARRAY
60119: PPUSH
60120: CALL_OW 65
// end ;
60124: PPOPN 1
60126: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60127: LD_EXP 33
60131: PUSH
60132: LD_EXP 71
60136: AND
60137: IFFALSE 60266
60139: GO 60141
60141: DISABLE
60142: LD_INT 0
60144: PPUSH
// begin uc_side := 0 ;
60145: LD_ADDR_OWVAR 20
60149: PUSH
60150: LD_INT 0
60152: ST_TO_ADDR
// uc_nation := nation_arabian ;
60153: LD_ADDR_OWVAR 21
60157: PUSH
60158: LD_INT 2
60160: ST_TO_ADDR
// hc_gallery :=  ;
60161: LD_ADDR_OWVAR 33
60165: PUSH
60166: LD_STRING 
60168: ST_TO_ADDR
// hc_name :=  ;
60169: LD_ADDR_OWVAR 26
60173: PUSH
60174: LD_STRING 
60176: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60177: LD_INT 1
60179: PPUSH
60180: LD_INT 11
60182: PPUSH
60183: LD_INT 10
60185: PPUSH
60186: CALL_OW 380
// un := CreateHuman ;
60190: LD_ADDR_VAR 0 1
60194: PUSH
60195: CALL_OW 44
60199: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60200: LD_VAR 0 1
60204: PPUSH
60205: LD_INT 1
60207: PPUSH
60208: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60212: LD_INT 35
60214: PPUSH
60215: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60219: LD_VAR 0 1
60223: PPUSH
60224: LD_INT 22
60226: PUSH
60227: LD_OWVAR 2
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PPUSH
60236: CALL_OW 69
60240: PPUSH
60241: LD_VAR 0 1
60245: PPUSH
60246: CALL_OW 74
60250: PPUSH
60251: CALL_OW 115
// until IsDead ( un ) ;
60255: LD_VAR 0 1
60259: PPUSH
60260: CALL_OW 301
60264: IFFALSE 60212
// end ;
60266: PPOPN 1
60268: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60269: LD_EXP 33
60273: PUSH
60274: LD_EXP 73
60278: AND
60279: IFFALSE 60291
60281: GO 60283
60283: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60284: LD_STRING earthquake(getX(game), 0, 32)
60286: PPUSH
60287: CALL_OW 559
60291: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60292: LD_EXP 33
60296: PUSH
60297: LD_EXP 74
60301: AND
60302: IFFALSE 60393
60304: GO 60306
60306: DISABLE
60307: LD_INT 0
60309: PPUSH
// begin enable ;
60310: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60311: LD_ADDR_VAR 0 1
60315: PUSH
60316: LD_INT 22
60318: PUSH
60319: LD_OWVAR 2
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 21
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 33
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: PPUSH
60353: CALL_OW 69
60357: ST_TO_ADDR
// if not tmp then
60358: LD_VAR 0 1
60362: NOT
60363: IFFALSE 60367
// exit ;
60365: GO 60393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60367: LD_VAR 0 1
60371: PUSH
60372: LD_INT 1
60374: PPUSH
60375: LD_VAR 0 1
60379: PPUSH
60380: CALL_OW 12
60384: ARRAY
60385: PPUSH
60386: LD_INT 1
60388: PPUSH
60389: CALL_OW 234
// end ;
60393: PPOPN 1
60395: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60396: LD_EXP 33
60400: PUSH
60401: LD_EXP 75
60405: AND
60406: IFFALSE 60547
60408: GO 60410
60410: DISABLE
60411: LD_INT 0
60413: PPUSH
60414: PPUSH
60415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60416: LD_ADDR_VAR 0 3
60420: PUSH
60421: LD_INT 22
60423: PUSH
60424: LD_OWVAR 2
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 25
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PPUSH
60447: CALL_OW 69
60451: ST_TO_ADDR
// if not tmp then
60452: LD_VAR 0 3
60456: NOT
60457: IFFALSE 60461
// exit ;
60459: GO 60547
// un := tmp [ rand ( 1 , tmp ) ] ;
60461: LD_ADDR_VAR 0 2
60465: PUSH
60466: LD_VAR 0 3
60470: PUSH
60471: LD_INT 1
60473: PPUSH
60474: LD_VAR 0 3
60478: PPUSH
60479: CALL_OW 12
60483: ARRAY
60484: ST_TO_ADDR
// if Crawls ( un ) then
60485: LD_VAR 0 2
60489: PPUSH
60490: CALL_OW 318
60494: IFFALSE 60505
// ComWalk ( un ) ;
60496: LD_VAR 0 2
60500: PPUSH
60501: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60505: LD_VAR 0 2
60509: PPUSH
60510: LD_INT 9
60512: PPUSH
60513: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60517: LD_INT 28
60519: PPUSH
60520: LD_OWVAR 2
60524: PPUSH
60525: LD_INT 2
60527: PPUSH
60528: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60532: LD_INT 29
60534: PPUSH
60535: LD_OWVAR 2
60539: PPUSH
60540: LD_INT 2
60542: PPUSH
60543: CALL_OW 322
// end ;
60547: PPOPN 3
60549: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60550: LD_EXP 33
60554: PUSH
60555: LD_EXP 76
60559: AND
60560: IFFALSE 60671
60562: GO 60564
60564: DISABLE
60565: LD_INT 0
60567: PPUSH
60568: PPUSH
60569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60570: LD_ADDR_VAR 0 3
60574: PUSH
60575: LD_INT 22
60577: PUSH
60578: LD_OWVAR 2
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 25
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PPUSH
60601: CALL_OW 69
60605: ST_TO_ADDR
// if not tmp then
60606: LD_VAR 0 3
60610: NOT
60611: IFFALSE 60615
// exit ;
60613: GO 60671
// un := tmp [ rand ( 1 , tmp ) ] ;
60615: LD_ADDR_VAR 0 2
60619: PUSH
60620: LD_VAR 0 3
60624: PUSH
60625: LD_INT 1
60627: PPUSH
60628: LD_VAR 0 3
60632: PPUSH
60633: CALL_OW 12
60637: ARRAY
60638: ST_TO_ADDR
// if Crawls ( un ) then
60639: LD_VAR 0 2
60643: PPUSH
60644: CALL_OW 318
60648: IFFALSE 60659
// ComWalk ( un ) ;
60650: LD_VAR 0 2
60654: PPUSH
60655: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60659: LD_VAR 0 2
60663: PPUSH
60664: LD_INT 8
60666: PPUSH
60667: CALL_OW 336
// end ;
60671: PPOPN 3
60673: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60674: LD_EXP 33
60678: PUSH
60679: LD_EXP 77
60683: AND
60684: IFFALSE 60828
60686: GO 60688
60688: DISABLE
60689: LD_INT 0
60691: PPUSH
60692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60693: LD_ADDR_VAR 0 2
60697: PUSH
60698: LD_INT 22
60700: PUSH
60701: LD_OWVAR 2
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 21
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 2
60722: PUSH
60723: LD_INT 34
60725: PUSH
60726: LD_INT 12
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 34
60735: PUSH
60736: LD_INT 51
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 34
60745: PUSH
60746: LD_INT 32
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: LIST
60763: PPUSH
60764: CALL_OW 69
60768: ST_TO_ADDR
// if not tmp then
60769: LD_VAR 0 2
60773: NOT
60774: IFFALSE 60778
// exit ;
60776: GO 60828
// for i in tmp do
60778: LD_ADDR_VAR 0 1
60782: PUSH
60783: LD_VAR 0 2
60787: PUSH
60788: FOR_IN
60789: IFFALSE 60826
// if GetCargo ( i , mat_artifact ) = 0 then
60791: LD_VAR 0 1
60795: PPUSH
60796: LD_INT 4
60798: PPUSH
60799: CALL_OW 289
60803: PUSH
60804: LD_INT 0
60806: EQUAL
60807: IFFALSE 60824
// SetCargo ( i , mat_siberit , 100 ) ;
60809: LD_VAR 0 1
60813: PPUSH
60814: LD_INT 3
60816: PPUSH
60817: LD_INT 100
60819: PPUSH
60820: CALL_OW 290
60824: GO 60788
60826: POP
60827: POP
// end ;
60828: PPOPN 2
60830: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60831: LD_EXP 33
60835: PUSH
60836: LD_EXP 78
60840: AND
60841: IFFALSE 61024
60843: GO 60845
60845: DISABLE
60846: LD_INT 0
60848: PPUSH
60849: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60850: LD_ADDR_VAR 0 2
60854: PUSH
60855: LD_INT 22
60857: PUSH
60858: LD_OWVAR 2
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PPUSH
60867: CALL_OW 69
60871: ST_TO_ADDR
// if not tmp then
60872: LD_VAR 0 2
60876: NOT
60877: IFFALSE 60881
// exit ;
60879: GO 61024
// for i := 1 to 2 do
60881: LD_ADDR_VAR 0 1
60885: PUSH
60886: DOUBLE
60887: LD_INT 1
60889: DEC
60890: ST_TO_ADDR
60891: LD_INT 2
60893: PUSH
60894: FOR_TO
60895: IFFALSE 61022
// begin uc_side := your_side ;
60897: LD_ADDR_OWVAR 20
60901: PUSH
60902: LD_OWVAR 2
60906: ST_TO_ADDR
// uc_nation := nation_american ;
60907: LD_ADDR_OWVAR 21
60911: PUSH
60912: LD_INT 1
60914: ST_TO_ADDR
// vc_chassis := us_morphling ;
60915: LD_ADDR_OWVAR 37
60919: PUSH
60920: LD_INT 5
60922: ST_TO_ADDR
// vc_engine := engine_siberite ;
60923: LD_ADDR_OWVAR 39
60927: PUSH
60928: LD_INT 3
60930: ST_TO_ADDR
// vc_control := control_computer ;
60931: LD_ADDR_OWVAR 38
60935: PUSH
60936: LD_INT 3
60938: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60939: LD_ADDR_OWVAR 40
60943: PUSH
60944: LD_INT 10
60946: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60947: LD_VAR 0 2
60951: PUSH
60952: LD_INT 1
60954: ARRAY
60955: PPUSH
60956: CALL_OW 310
60960: NOT
60961: IFFALSE 61008
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60963: CALL_OW 45
60967: PPUSH
60968: LD_VAR 0 2
60972: PUSH
60973: LD_INT 1
60975: ARRAY
60976: PPUSH
60977: CALL_OW 250
60981: PPUSH
60982: LD_VAR 0 2
60986: PUSH
60987: LD_INT 1
60989: ARRAY
60990: PPUSH
60991: CALL_OW 251
60995: PPUSH
60996: LD_INT 12
60998: PPUSH
60999: LD_INT 1
61001: PPUSH
61002: CALL_OW 50
61006: GO 61020
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61008: CALL_OW 45
61012: PPUSH
61013: LD_INT 1
61015: PPUSH
61016: CALL_OW 51
// end ;
61020: GO 60894
61022: POP
61023: POP
// end ;
61024: PPOPN 2
61026: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61027: LD_EXP 33
61031: PUSH
61032: LD_EXP 79
61036: AND
61037: IFFALSE 61259
61039: GO 61041
61041: DISABLE
61042: LD_INT 0
61044: PPUSH
61045: PPUSH
61046: PPUSH
61047: PPUSH
61048: PPUSH
61049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61050: LD_ADDR_VAR 0 6
61054: PUSH
61055: LD_INT 22
61057: PUSH
61058: LD_OWVAR 2
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 21
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 3
61079: PUSH
61080: LD_INT 23
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: LIST
61098: PPUSH
61099: CALL_OW 69
61103: ST_TO_ADDR
// if not tmp then
61104: LD_VAR 0 6
61108: NOT
61109: IFFALSE 61113
// exit ;
61111: GO 61259
// s1 := rand ( 1 , 4 ) ;
61113: LD_ADDR_VAR 0 2
61117: PUSH
61118: LD_INT 1
61120: PPUSH
61121: LD_INT 4
61123: PPUSH
61124: CALL_OW 12
61128: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61129: LD_ADDR_VAR 0 4
61133: PUSH
61134: LD_VAR 0 6
61138: PUSH
61139: LD_INT 1
61141: ARRAY
61142: PPUSH
61143: LD_VAR 0 2
61147: PPUSH
61148: CALL_OW 259
61152: ST_TO_ADDR
// if s1 = 1 then
61153: LD_VAR 0 2
61157: PUSH
61158: LD_INT 1
61160: EQUAL
61161: IFFALSE 61181
// s2 := rand ( 2 , 4 ) else
61163: LD_ADDR_VAR 0 3
61167: PUSH
61168: LD_INT 2
61170: PPUSH
61171: LD_INT 4
61173: PPUSH
61174: CALL_OW 12
61178: ST_TO_ADDR
61179: GO 61189
// s2 := 1 ;
61181: LD_ADDR_VAR 0 3
61185: PUSH
61186: LD_INT 1
61188: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61189: LD_ADDR_VAR 0 5
61193: PUSH
61194: LD_VAR 0 6
61198: PUSH
61199: LD_INT 1
61201: ARRAY
61202: PPUSH
61203: LD_VAR 0 3
61207: PPUSH
61208: CALL_OW 259
61212: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61213: LD_VAR 0 6
61217: PUSH
61218: LD_INT 1
61220: ARRAY
61221: PPUSH
61222: LD_VAR 0 2
61226: PPUSH
61227: LD_VAR 0 5
61231: PPUSH
61232: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61236: LD_VAR 0 6
61240: PUSH
61241: LD_INT 1
61243: ARRAY
61244: PPUSH
61245: LD_VAR 0 3
61249: PPUSH
61250: LD_VAR 0 4
61254: PPUSH
61255: CALL_OW 237
// end ;
61259: PPOPN 6
61261: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61262: LD_EXP 33
61266: PUSH
61267: LD_EXP 80
61271: AND
61272: IFFALSE 61351
61274: GO 61276
61276: DISABLE
61277: LD_INT 0
61279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61280: LD_ADDR_VAR 0 1
61284: PUSH
61285: LD_INT 22
61287: PUSH
61288: LD_OWVAR 2
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 30
61299: PUSH
61300: LD_INT 3
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PPUSH
61311: CALL_OW 69
61315: ST_TO_ADDR
// if not tmp then
61316: LD_VAR 0 1
61320: NOT
61321: IFFALSE 61325
// exit ;
61323: GO 61351
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61325: LD_VAR 0 1
61329: PUSH
61330: LD_INT 1
61332: PPUSH
61333: LD_VAR 0 1
61337: PPUSH
61338: CALL_OW 12
61342: ARRAY
61343: PPUSH
61344: LD_INT 1
61346: PPUSH
61347: CALL_OW 234
// end ;
61351: PPOPN 1
61353: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61354: LD_EXP 33
61358: PUSH
61359: LD_EXP 81
61363: AND
61364: IFFALSE 61476
61366: GO 61368
61368: DISABLE
61369: LD_INT 0
61371: PPUSH
61372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61373: LD_ADDR_VAR 0 2
61377: PUSH
61378: LD_INT 22
61380: PUSH
61381: LD_OWVAR 2
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: LD_INT 30
61395: PUSH
61396: LD_INT 27
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 30
61405: PUSH
61406: LD_INT 26
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 30
61415: PUSH
61416: LD_INT 28
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PPUSH
61433: CALL_OW 69
61437: ST_TO_ADDR
// if not tmp then
61438: LD_VAR 0 2
61442: NOT
61443: IFFALSE 61447
// exit ;
61445: GO 61476
// for i in tmp do
61447: LD_ADDR_VAR 0 1
61451: PUSH
61452: LD_VAR 0 2
61456: PUSH
61457: FOR_IN
61458: IFFALSE 61474
// SetLives ( i , 1 ) ;
61460: LD_VAR 0 1
61464: PPUSH
61465: LD_INT 1
61467: PPUSH
61468: CALL_OW 234
61472: GO 61457
61474: POP
61475: POP
// end ;
61476: PPOPN 2
61478: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61479: LD_EXP 33
61483: PUSH
61484: LD_EXP 82
61488: AND
61489: IFFALSE 61776
61491: GO 61493
61493: DISABLE
61494: LD_INT 0
61496: PPUSH
61497: PPUSH
61498: PPUSH
// begin i := rand ( 1 , 7 ) ;
61499: LD_ADDR_VAR 0 1
61503: PUSH
61504: LD_INT 1
61506: PPUSH
61507: LD_INT 7
61509: PPUSH
61510: CALL_OW 12
61514: ST_TO_ADDR
// case i of 1 :
61515: LD_VAR 0 1
61519: PUSH
61520: LD_INT 1
61522: DOUBLE
61523: EQUAL
61524: IFTRUE 61528
61526: GO 61538
61528: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61529: LD_STRING earthquake(getX(game), 0, 32)
61531: PPUSH
61532: CALL_OW 559
61536: GO 61776
61538: LD_INT 2
61540: DOUBLE
61541: EQUAL
61542: IFTRUE 61546
61544: GO 61560
61546: POP
// begin ToLua ( displayStucuk(); ) ;
61547: LD_STRING displayStucuk();
61549: PPUSH
61550: CALL_OW 559
// ResetFog ;
61554: CALL_OW 335
// end ; 3 :
61558: GO 61776
61560: LD_INT 3
61562: DOUBLE
61563: EQUAL
61564: IFTRUE 61568
61566: GO 61672
61568: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61569: LD_ADDR_VAR 0 2
61573: PUSH
61574: LD_INT 22
61576: PUSH
61577: LD_OWVAR 2
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 25
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PPUSH
61600: CALL_OW 69
61604: ST_TO_ADDR
// if not tmp then
61605: LD_VAR 0 2
61609: NOT
61610: IFFALSE 61614
// exit ;
61612: GO 61776
// un := tmp [ rand ( 1 , tmp ) ] ;
61614: LD_ADDR_VAR 0 3
61618: PUSH
61619: LD_VAR 0 2
61623: PUSH
61624: LD_INT 1
61626: PPUSH
61627: LD_VAR 0 2
61631: PPUSH
61632: CALL_OW 12
61636: ARRAY
61637: ST_TO_ADDR
// if Crawls ( un ) then
61638: LD_VAR 0 3
61642: PPUSH
61643: CALL_OW 318
61647: IFFALSE 61658
// ComWalk ( un ) ;
61649: LD_VAR 0 3
61653: PPUSH
61654: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61658: LD_VAR 0 3
61662: PPUSH
61663: LD_INT 8
61665: PPUSH
61666: CALL_OW 336
// end ; 4 :
61670: GO 61776
61672: LD_INT 4
61674: DOUBLE
61675: EQUAL
61676: IFTRUE 61680
61678: GO 61754
61680: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61681: LD_ADDR_VAR 0 2
61685: PUSH
61686: LD_INT 22
61688: PUSH
61689: LD_OWVAR 2
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 30
61700: PUSH
61701: LD_INT 29
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PPUSH
61712: CALL_OW 69
61716: ST_TO_ADDR
// if not tmp then
61717: LD_VAR 0 2
61721: NOT
61722: IFFALSE 61726
// exit ;
61724: GO 61776
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61726: LD_VAR 0 2
61730: PUSH
61731: LD_INT 1
61733: ARRAY
61734: PPUSH
61735: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61739: LD_VAR 0 2
61743: PUSH
61744: LD_INT 1
61746: ARRAY
61747: PPUSH
61748: CALL_OW 65
// end ; 5 .. 7 :
61752: GO 61776
61754: LD_INT 5
61756: DOUBLE
61757: GREATEREQUAL
61758: IFFALSE 61766
61760: LD_INT 7
61762: DOUBLE
61763: LESSEQUAL
61764: IFTRUE 61768
61766: GO 61775
61768: POP
// StreamSibBomb ; end ;
61769: CALL 58013 0 0
61773: GO 61776
61775: POP
// end ;
61776: PPOPN 3
61778: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61779: LD_EXP 33
61783: PUSH
61784: LD_EXP 83
61788: AND
61789: IFFALSE 61945
61791: GO 61793
61793: DISABLE
61794: LD_INT 0
61796: PPUSH
61797: PPUSH
61798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61799: LD_ADDR_VAR 0 2
61803: PUSH
61804: LD_INT 81
61806: PUSH
61807: LD_OWVAR 2
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 2
61818: PUSH
61819: LD_INT 21
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 21
61831: PUSH
61832: LD_INT 2
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: LIST
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PPUSH
61848: CALL_OW 69
61852: ST_TO_ADDR
// if not tmp then
61853: LD_VAR 0 2
61857: NOT
61858: IFFALSE 61862
// exit ;
61860: GO 61945
// p := 0 ;
61862: LD_ADDR_VAR 0 3
61866: PUSH
61867: LD_INT 0
61869: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61870: LD_INT 35
61872: PPUSH
61873: CALL_OW 67
// p := p + 1 ;
61877: LD_ADDR_VAR 0 3
61881: PUSH
61882: LD_VAR 0 3
61886: PUSH
61887: LD_INT 1
61889: PLUS
61890: ST_TO_ADDR
// for i in tmp do
61891: LD_ADDR_VAR 0 1
61895: PUSH
61896: LD_VAR 0 2
61900: PUSH
61901: FOR_IN
61902: IFFALSE 61933
// if GetLives ( i ) < 1000 then
61904: LD_VAR 0 1
61908: PPUSH
61909: CALL_OW 256
61913: PUSH
61914: LD_INT 1000
61916: LESS
61917: IFFALSE 61931
// SetLives ( i , 1000 ) ;
61919: LD_VAR 0 1
61923: PPUSH
61924: LD_INT 1000
61926: PPUSH
61927: CALL_OW 234
61931: GO 61901
61933: POP
61934: POP
// until p > 20 ;
61935: LD_VAR 0 3
61939: PUSH
61940: LD_INT 20
61942: GREATER
61943: IFFALSE 61870
// end ;
61945: PPOPN 3
61947: END
// every 0 0$1 trigger StreamModeActive and sTime do
61948: LD_EXP 33
61952: PUSH
61953: LD_EXP 84
61957: AND
61958: IFFALSE 61993
61960: GO 61962
61962: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61963: LD_INT 28
61965: PPUSH
61966: LD_OWVAR 2
61970: PPUSH
61971: LD_INT 2
61973: PPUSH
61974: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61978: LD_INT 30
61980: PPUSH
61981: LD_OWVAR 2
61985: PPUSH
61986: LD_INT 2
61988: PPUSH
61989: CALL_OW 322
// end ;
61993: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
61994: LD_EXP 33
61998: PUSH
61999: LD_EXP 85
62003: AND
62004: IFFALSE 62125
62006: GO 62008
62008: DISABLE
62009: LD_INT 0
62011: PPUSH
62012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62013: LD_ADDR_VAR 0 2
62017: PUSH
62018: LD_INT 22
62020: PUSH
62021: LD_OWVAR 2
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 21
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 3
62042: PUSH
62043: LD_INT 23
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: LIST
62061: PPUSH
62062: CALL_OW 69
62066: ST_TO_ADDR
// if not tmp then
62067: LD_VAR 0 2
62071: NOT
62072: IFFALSE 62076
// exit ;
62074: GO 62125
// for i in tmp do
62076: LD_ADDR_VAR 0 1
62080: PUSH
62081: LD_VAR 0 2
62085: PUSH
62086: FOR_IN
62087: IFFALSE 62123
// begin if Crawls ( i ) then
62089: LD_VAR 0 1
62093: PPUSH
62094: CALL_OW 318
62098: IFFALSE 62109
// ComWalk ( i ) ;
62100: LD_VAR 0 1
62104: PPUSH
62105: CALL_OW 138
// SetClass ( i , 2 ) ;
62109: LD_VAR 0 1
62113: PPUSH
62114: LD_INT 2
62116: PPUSH
62117: CALL_OW 336
// end ;
62121: GO 62086
62123: POP
62124: POP
// end ;
62125: PPOPN 2
62127: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62128: LD_EXP 33
62132: PUSH
62133: LD_EXP 86
62137: AND
62138: IFFALSE 62426
62140: GO 62142
62142: DISABLE
62143: LD_INT 0
62145: PPUSH
62146: PPUSH
62147: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62148: LD_OWVAR 2
62152: PPUSH
62153: LD_INT 9
62155: PPUSH
62156: LD_INT 1
62158: PPUSH
62159: LD_INT 1
62161: PPUSH
62162: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62166: LD_INT 9
62168: PPUSH
62169: LD_OWVAR 2
62173: PPUSH
62174: CALL_OW 343
// uc_side := 9 ;
62178: LD_ADDR_OWVAR 20
62182: PUSH
62183: LD_INT 9
62185: ST_TO_ADDR
// uc_nation := 2 ;
62186: LD_ADDR_OWVAR 21
62190: PUSH
62191: LD_INT 2
62193: ST_TO_ADDR
// hc_name := Dark Warrior ;
62194: LD_ADDR_OWVAR 26
62198: PUSH
62199: LD_STRING Dark Warrior
62201: ST_TO_ADDR
// hc_gallery :=  ;
62202: LD_ADDR_OWVAR 33
62206: PUSH
62207: LD_STRING 
62209: ST_TO_ADDR
// hc_noskilllimit := true ;
62210: LD_ADDR_OWVAR 76
62214: PUSH
62215: LD_INT 1
62217: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62218: LD_ADDR_OWVAR 31
62222: PUSH
62223: LD_INT 30
62225: PUSH
62226: LD_INT 30
62228: PUSH
62229: LD_INT 30
62231: PUSH
62232: LD_INT 30
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: ST_TO_ADDR
// un := CreateHuman ;
62241: LD_ADDR_VAR 0 3
62245: PUSH
62246: CALL_OW 44
62250: ST_TO_ADDR
// hc_noskilllimit := false ;
62251: LD_ADDR_OWVAR 76
62255: PUSH
62256: LD_INT 0
62258: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62259: LD_VAR 0 3
62263: PPUSH
62264: LD_INT 1
62266: PPUSH
62267: CALL_OW 51
// ToLua ( playRanger() ) ;
62271: LD_STRING playRanger()
62273: PPUSH
62274: CALL_OW 559
// p := 0 ;
62278: LD_ADDR_VAR 0 2
62282: PUSH
62283: LD_INT 0
62285: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62286: LD_INT 35
62288: PPUSH
62289: CALL_OW 67
// p := p + 1 ;
62293: LD_ADDR_VAR 0 2
62297: PUSH
62298: LD_VAR 0 2
62302: PUSH
62303: LD_INT 1
62305: PLUS
62306: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62307: LD_VAR 0 3
62311: PPUSH
62312: CALL_OW 256
62316: PUSH
62317: LD_INT 1000
62319: LESS
62320: IFFALSE 62334
// SetLives ( un , 1000 ) ;
62322: LD_VAR 0 3
62326: PPUSH
62327: LD_INT 1000
62329: PPUSH
62330: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62334: LD_VAR 0 3
62338: PPUSH
62339: LD_INT 81
62341: PUSH
62342: LD_OWVAR 2
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 91
62353: PUSH
62354: LD_VAR 0 3
62358: PUSH
62359: LD_INT 30
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PPUSH
62371: CALL_OW 69
62375: PPUSH
62376: LD_VAR 0 3
62380: PPUSH
62381: CALL_OW 74
62385: PPUSH
62386: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62390: LD_VAR 0 2
62394: PUSH
62395: LD_INT 80
62397: GREATER
62398: PUSH
62399: LD_VAR 0 3
62403: PPUSH
62404: CALL_OW 301
62408: OR
62409: IFFALSE 62286
// if un then
62411: LD_VAR 0 3
62415: IFFALSE 62426
// RemoveUnit ( un ) ;
62417: LD_VAR 0 3
62421: PPUSH
62422: CALL_OW 64
// end ;
62426: PPOPN 3
62428: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62429: LD_EXP 87
62433: IFFALSE 62549
62435: GO 62437
62437: DISABLE
62438: LD_INT 0
62440: PPUSH
62441: PPUSH
62442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62443: LD_ADDR_VAR 0 2
62447: PUSH
62448: LD_INT 81
62450: PUSH
62451: LD_OWVAR 2
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 21
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PPUSH
62474: CALL_OW 69
62478: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62479: LD_STRING playComputer()
62481: PPUSH
62482: CALL_OW 559
// if not tmp then
62486: LD_VAR 0 2
62490: NOT
62491: IFFALSE 62495
// exit ;
62493: GO 62549
// for i in tmp do
62495: LD_ADDR_VAR 0 1
62499: PUSH
62500: LD_VAR 0 2
62504: PUSH
62505: FOR_IN
62506: IFFALSE 62547
// for j := 1 to 4 do
62508: LD_ADDR_VAR 0 3
62512: PUSH
62513: DOUBLE
62514: LD_INT 1
62516: DEC
62517: ST_TO_ADDR
62518: LD_INT 4
62520: PUSH
62521: FOR_TO
62522: IFFALSE 62543
// SetSkill ( i , j , 10 ) ;
62524: LD_VAR 0 1
62528: PPUSH
62529: LD_VAR 0 3
62533: PPUSH
62534: LD_INT 10
62536: PPUSH
62537: CALL_OW 237
62541: GO 62521
62543: POP
62544: POP
62545: GO 62505
62547: POP
62548: POP
// end ;
62549: PPOPN 3
62551: END
// every 0 0$1 trigger s30 do var i , tmp ;
62552: LD_EXP 88
62556: IFFALSE 62625
62558: GO 62560
62560: DISABLE
62561: LD_INT 0
62563: PPUSH
62564: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62565: LD_ADDR_VAR 0 2
62569: PUSH
62570: LD_INT 22
62572: PUSH
62573: LD_OWVAR 2
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PPUSH
62582: CALL_OW 69
62586: ST_TO_ADDR
// if not tmp then
62587: LD_VAR 0 2
62591: NOT
62592: IFFALSE 62596
// exit ;
62594: GO 62625
// for i in tmp do
62596: LD_ADDR_VAR 0 1
62600: PUSH
62601: LD_VAR 0 2
62605: PUSH
62606: FOR_IN
62607: IFFALSE 62623
// SetLives ( i , 300 ) ;
62609: LD_VAR 0 1
62613: PPUSH
62614: LD_INT 300
62616: PPUSH
62617: CALL_OW 234
62621: GO 62606
62623: POP
62624: POP
// end ;
62625: PPOPN 2
62627: END
// every 0 0$1 trigger s60 do var i , tmp ;
62628: LD_EXP 89
62632: IFFALSE 62701
62634: GO 62636
62636: DISABLE
62637: LD_INT 0
62639: PPUSH
62640: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62641: LD_ADDR_VAR 0 2
62645: PUSH
62646: LD_INT 22
62648: PUSH
62649: LD_OWVAR 2
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PPUSH
62658: CALL_OW 69
62662: ST_TO_ADDR
// if not tmp then
62663: LD_VAR 0 2
62667: NOT
62668: IFFALSE 62672
// exit ;
62670: GO 62701
// for i in tmp do
62672: LD_ADDR_VAR 0 1
62676: PUSH
62677: LD_VAR 0 2
62681: PUSH
62682: FOR_IN
62683: IFFALSE 62699
// SetLives ( i , 600 ) ;
62685: LD_VAR 0 1
62689: PPUSH
62690: LD_INT 600
62692: PPUSH
62693: CALL_OW 234
62697: GO 62682
62699: POP
62700: POP
// end ;
62701: PPOPN 2
62703: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62704: LD_INT 0
62706: PPUSH
// case cmd of 301 :
62707: LD_VAR 0 1
62711: PUSH
62712: LD_INT 301
62714: DOUBLE
62715: EQUAL
62716: IFTRUE 62720
62718: GO 62752
62720: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62721: LD_VAR 0 6
62725: PPUSH
62726: LD_VAR 0 7
62730: PPUSH
62731: LD_VAR 0 8
62735: PPUSH
62736: LD_VAR 0 4
62740: PPUSH
62741: LD_VAR 0 5
62745: PPUSH
62746: CALL 63953 0 5
62750: GO 62873
62752: LD_INT 302
62754: DOUBLE
62755: EQUAL
62756: IFTRUE 62760
62758: GO 62797
62760: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62761: LD_VAR 0 6
62765: PPUSH
62766: LD_VAR 0 7
62770: PPUSH
62771: LD_VAR 0 8
62775: PPUSH
62776: LD_VAR 0 9
62780: PPUSH
62781: LD_VAR 0 4
62785: PPUSH
62786: LD_VAR 0 5
62790: PPUSH
62791: CALL 64044 0 6
62795: GO 62873
62797: LD_INT 303
62799: DOUBLE
62800: EQUAL
62801: IFTRUE 62805
62803: GO 62842
62805: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62806: LD_VAR 0 6
62810: PPUSH
62811: LD_VAR 0 7
62815: PPUSH
62816: LD_VAR 0 8
62820: PPUSH
62821: LD_VAR 0 9
62825: PPUSH
62826: LD_VAR 0 4
62830: PPUSH
62831: LD_VAR 0 5
62835: PPUSH
62836: CALL 62878 0 6
62840: GO 62873
62842: LD_INT 304
62844: DOUBLE
62845: EQUAL
62846: IFTRUE 62850
62848: GO 62872
62850: POP
// hHackTeleport ( unit , x , y ) ; end ;
62851: LD_VAR 0 2
62855: PPUSH
62856: LD_VAR 0 4
62860: PPUSH
62861: LD_VAR 0 5
62865: PPUSH
62866: CALL 64637 0 3
62870: GO 62873
62872: POP
// end ;
62873: LD_VAR 0 12
62877: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62878: LD_INT 0
62880: PPUSH
62881: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62882: LD_VAR 0 1
62886: PUSH
62887: LD_INT 1
62889: LESS
62890: PUSH
62891: LD_VAR 0 1
62895: PUSH
62896: LD_INT 3
62898: GREATER
62899: OR
62900: PUSH
62901: LD_VAR 0 5
62905: PPUSH
62906: LD_VAR 0 6
62910: PPUSH
62911: CALL_OW 428
62915: OR
62916: IFFALSE 62920
// exit ;
62918: GO 63640
// uc_side := your_side ;
62920: LD_ADDR_OWVAR 20
62924: PUSH
62925: LD_OWVAR 2
62929: ST_TO_ADDR
// uc_nation := nation ;
62930: LD_ADDR_OWVAR 21
62934: PUSH
62935: LD_VAR 0 1
62939: ST_TO_ADDR
// bc_level = 1 ;
62940: LD_ADDR_OWVAR 43
62944: PUSH
62945: LD_INT 1
62947: ST_TO_ADDR
// case btype of 1 :
62948: LD_VAR 0 2
62952: PUSH
62953: LD_INT 1
62955: DOUBLE
62956: EQUAL
62957: IFTRUE 62961
62959: GO 62972
62961: POP
// bc_type := b_depot ; 2 :
62962: LD_ADDR_OWVAR 42
62966: PUSH
62967: LD_INT 0
62969: ST_TO_ADDR
62970: GO 63584
62972: LD_INT 2
62974: DOUBLE
62975: EQUAL
62976: IFTRUE 62980
62978: GO 62991
62980: POP
// bc_type := b_warehouse ; 3 :
62981: LD_ADDR_OWVAR 42
62985: PUSH
62986: LD_INT 1
62988: ST_TO_ADDR
62989: GO 63584
62991: LD_INT 3
62993: DOUBLE
62994: EQUAL
62995: IFTRUE 62999
62997: GO 63010
62999: POP
// bc_type := b_lab ; 4 .. 9 :
63000: LD_ADDR_OWVAR 42
63004: PUSH
63005: LD_INT 6
63007: ST_TO_ADDR
63008: GO 63584
63010: LD_INT 4
63012: DOUBLE
63013: GREATEREQUAL
63014: IFFALSE 63022
63016: LD_INT 9
63018: DOUBLE
63019: LESSEQUAL
63020: IFTRUE 63024
63022: GO 63076
63024: POP
// begin bc_type := b_lab_half ;
63025: LD_ADDR_OWVAR 42
63029: PUSH
63030: LD_INT 7
63032: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63033: LD_ADDR_OWVAR 44
63037: PUSH
63038: LD_INT 10
63040: PUSH
63041: LD_INT 11
63043: PUSH
63044: LD_INT 12
63046: PUSH
63047: LD_INT 15
63049: PUSH
63050: LD_INT 14
63052: PUSH
63053: LD_INT 13
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: PUSH
63064: LD_VAR 0 2
63068: PUSH
63069: LD_INT 3
63071: MINUS
63072: ARRAY
63073: ST_TO_ADDR
// end ; 10 .. 13 :
63074: GO 63584
63076: LD_INT 10
63078: DOUBLE
63079: GREATEREQUAL
63080: IFFALSE 63088
63082: LD_INT 13
63084: DOUBLE
63085: LESSEQUAL
63086: IFTRUE 63090
63088: GO 63167
63090: POP
// begin bc_type := b_lab_full ;
63091: LD_ADDR_OWVAR 42
63095: PUSH
63096: LD_INT 8
63098: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63099: LD_ADDR_OWVAR 44
63103: PUSH
63104: LD_INT 10
63106: PUSH
63107: LD_INT 12
63109: PUSH
63110: LD_INT 14
63112: PUSH
63113: LD_INT 13
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: PUSH
63122: LD_VAR 0 2
63126: PUSH
63127: LD_INT 9
63129: MINUS
63130: ARRAY
63131: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63132: LD_ADDR_OWVAR 45
63136: PUSH
63137: LD_INT 11
63139: PUSH
63140: LD_INT 15
63142: PUSH
63143: LD_INT 12
63145: PUSH
63146: LD_INT 15
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: PUSH
63155: LD_VAR 0 2
63159: PUSH
63160: LD_INT 9
63162: MINUS
63163: ARRAY
63164: ST_TO_ADDR
// end ; 14 :
63165: GO 63584
63167: LD_INT 14
63169: DOUBLE
63170: EQUAL
63171: IFTRUE 63175
63173: GO 63186
63175: POP
// bc_type := b_workshop ; 15 :
63176: LD_ADDR_OWVAR 42
63180: PUSH
63181: LD_INT 2
63183: ST_TO_ADDR
63184: GO 63584
63186: LD_INT 15
63188: DOUBLE
63189: EQUAL
63190: IFTRUE 63194
63192: GO 63205
63194: POP
// bc_type := b_factory ; 16 :
63195: LD_ADDR_OWVAR 42
63199: PUSH
63200: LD_INT 3
63202: ST_TO_ADDR
63203: GO 63584
63205: LD_INT 16
63207: DOUBLE
63208: EQUAL
63209: IFTRUE 63213
63211: GO 63224
63213: POP
// bc_type := b_ext_gun ; 17 :
63214: LD_ADDR_OWVAR 42
63218: PUSH
63219: LD_INT 17
63221: ST_TO_ADDR
63222: GO 63584
63224: LD_INT 17
63226: DOUBLE
63227: EQUAL
63228: IFTRUE 63232
63230: GO 63260
63232: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63233: LD_ADDR_OWVAR 42
63237: PUSH
63238: LD_INT 19
63240: PUSH
63241: LD_INT 23
63243: PUSH
63244: LD_INT 19
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: LIST
63251: PUSH
63252: LD_VAR 0 1
63256: ARRAY
63257: ST_TO_ADDR
63258: GO 63584
63260: LD_INT 18
63262: DOUBLE
63263: EQUAL
63264: IFTRUE 63268
63266: GO 63279
63268: POP
// bc_type := b_ext_radar ; 19 :
63269: LD_ADDR_OWVAR 42
63273: PUSH
63274: LD_INT 20
63276: ST_TO_ADDR
63277: GO 63584
63279: LD_INT 19
63281: DOUBLE
63282: EQUAL
63283: IFTRUE 63287
63285: GO 63298
63287: POP
// bc_type := b_ext_radio ; 20 :
63288: LD_ADDR_OWVAR 42
63292: PUSH
63293: LD_INT 22
63295: ST_TO_ADDR
63296: GO 63584
63298: LD_INT 20
63300: DOUBLE
63301: EQUAL
63302: IFTRUE 63306
63304: GO 63317
63306: POP
// bc_type := b_ext_siberium ; 21 :
63307: LD_ADDR_OWVAR 42
63311: PUSH
63312: LD_INT 21
63314: ST_TO_ADDR
63315: GO 63584
63317: LD_INT 21
63319: DOUBLE
63320: EQUAL
63321: IFTRUE 63325
63323: GO 63336
63325: POP
// bc_type := b_ext_computer ; 22 :
63326: LD_ADDR_OWVAR 42
63330: PUSH
63331: LD_INT 24
63333: ST_TO_ADDR
63334: GO 63584
63336: LD_INT 22
63338: DOUBLE
63339: EQUAL
63340: IFTRUE 63344
63342: GO 63355
63344: POP
// bc_type := b_ext_track ; 23 :
63345: LD_ADDR_OWVAR 42
63349: PUSH
63350: LD_INT 16
63352: ST_TO_ADDR
63353: GO 63584
63355: LD_INT 23
63357: DOUBLE
63358: EQUAL
63359: IFTRUE 63363
63361: GO 63374
63363: POP
// bc_type := b_ext_laser ; 24 :
63364: LD_ADDR_OWVAR 42
63368: PUSH
63369: LD_INT 25
63371: ST_TO_ADDR
63372: GO 63584
63374: LD_INT 24
63376: DOUBLE
63377: EQUAL
63378: IFTRUE 63382
63380: GO 63393
63382: POP
// bc_type := b_control_tower ; 25 :
63383: LD_ADDR_OWVAR 42
63387: PUSH
63388: LD_INT 36
63390: ST_TO_ADDR
63391: GO 63584
63393: LD_INT 25
63395: DOUBLE
63396: EQUAL
63397: IFTRUE 63401
63399: GO 63412
63401: POP
// bc_type := b_breastwork ; 26 :
63402: LD_ADDR_OWVAR 42
63406: PUSH
63407: LD_INT 31
63409: ST_TO_ADDR
63410: GO 63584
63412: LD_INT 26
63414: DOUBLE
63415: EQUAL
63416: IFTRUE 63420
63418: GO 63431
63420: POP
// bc_type := b_bunker ; 27 :
63421: LD_ADDR_OWVAR 42
63425: PUSH
63426: LD_INT 32
63428: ST_TO_ADDR
63429: GO 63584
63431: LD_INT 27
63433: DOUBLE
63434: EQUAL
63435: IFTRUE 63439
63437: GO 63450
63439: POP
// bc_type := b_turret ; 28 :
63440: LD_ADDR_OWVAR 42
63444: PUSH
63445: LD_INT 33
63447: ST_TO_ADDR
63448: GO 63584
63450: LD_INT 28
63452: DOUBLE
63453: EQUAL
63454: IFTRUE 63458
63456: GO 63469
63458: POP
// bc_type := b_armoury ; 29 :
63459: LD_ADDR_OWVAR 42
63463: PUSH
63464: LD_INT 4
63466: ST_TO_ADDR
63467: GO 63584
63469: LD_INT 29
63471: DOUBLE
63472: EQUAL
63473: IFTRUE 63477
63475: GO 63488
63477: POP
// bc_type := b_barracks ; 30 :
63478: LD_ADDR_OWVAR 42
63482: PUSH
63483: LD_INT 5
63485: ST_TO_ADDR
63486: GO 63584
63488: LD_INT 30
63490: DOUBLE
63491: EQUAL
63492: IFTRUE 63496
63494: GO 63507
63496: POP
// bc_type := b_solar_power ; 31 :
63497: LD_ADDR_OWVAR 42
63501: PUSH
63502: LD_INT 27
63504: ST_TO_ADDR
63505: GO 63584
63507: LD_INT 31
63509: DOUBLE
63510: EQUAL
63511: IFTRUE 63515
63513: GO 63526
63515: POP
// bc_type := b_oil_power ; 32 :
63516: LD_ADDR_OWVAR 42
63520: PUSH
63521: LD_INT 26
63523: ST_TO_ADDR
63524: GO 63584
63526: LD_INT 32
63528: DOUBLE
63529: EQUAL
63530: IFTRUE 63534
63532: GO 63545
63534: POP
// bc_type := b_siberite_power ; 33 :
63535: LD_ADDR_OWVAR 42
63539: PUSH
63540: LD_INT 28
63542: ST_TO_ADDR
63543: GO 63584
63545: LD_INT 33
63547: DOUBLE
63548: EQUAL
63549: IFTRUE 63553
63551: GO 63564
63553: POP
// bc_type := b_oil_mine ; 34 :
63554: LD_ADDR_OWVAR 42
63558: PUSH
63559: LD_INT 29
63561: ST_TO_ADDR
63562: GO 63584
63564: LD_INT 34
63566: DOUBLE
63567: EQUAL
63568: IFTRUE 63572
63570: GO 63583
63572: POP
// bc_type := b_siberite_mine ; end ;
63573: LD_ADDR_OWVAR 42
63577: PUSH
63578: LD_INT 30
63580: ST_TO_ADDR
63581: GO 63584
63583: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63584: LD_ADDR_VAR 0 8
63588: PUSH
63589: LD_VAR 0 5
63593: PPUSH
63594: LD_VAR 0 6
63598: PPUSH
63599: LD_VAR 0 3
63603: PPUSH
63604: CALL_OW 47
63608: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63609: LD_OWVAR 42
63613: PUSH
63614: LD_INT 32
63616: PUSH
63617: LD_INT 33
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: IN
63624: IFFALSE 63640
// PlaceWeaponTurret ( b , weapon ) ;
63626: LD_VAR 0 8
63630: PPUSH
63631: LD_VAR 0 4
63635: PPUSH
63636: CALL_OW 431
// end ;
63640: LD_VAR 0 7
63644: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63645: LD_INT 0
63647: PPUSH
63648: PPUSH
63649: PPUSH
63650: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63651: LD_ADDR_VAR 0 4
63655: PUSH
63656: LD_INT 22
63658: PUSH
63659: LD_OWVAR 2
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 2
63670: PUSH
63671: LD_INT 30
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 30
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: LIST
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PPUSH
63700: CALL_OW 69
63704: ST_TO_ADDR
// if not tmp then
63705: LD_VAR 0 4
63709: NOT
63710: IFFALSE 63714
// exit ;
63712: GO 63773
// for i in tmp do
63714: LD_ADDR_VAR 0 2
63718: PUSH
63719: LD_VAR 0 4
63723: PUSH
63724: FOR_IN
63725: IFFALSE 63771
// for j = 1 to 3 do
63727: LD_ADDR_VAR 0 3
63731: PUSH
63732: DOUBLE
63733: LD_INT 1
63735: DEC
63736: ST_TO_ADDR
63737: LD_INT 3
63739: PUSH
63740: FOR_TO
63741: IFFALSE 63767
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63743: LD_VAR 0 2
63747: PPUSH
63748: CALL_OW 274
63752: PPUSH
63753: LD_VAR 0 3
63757: PPUSH
63758: LD_INT 99999
63760: PPUSH
63761: CALL_OW 277
63765: GO 63740
63767: POP
63768: POP
63769: GO 63724
63771: POP
63772: POP
// end ;
63773: LD_VAR 0 1
63777: RET
// export function hHackSetLevel10 ; var i , j ; begin
63778: LD_INT 0
63780: PPUSH
63781: PPUSH
63782: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63783: LD_ADDR_VAR 0 2
63787: PUSH
63788: LD_INT 21
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PPUSH
63798: CALL_OW 69
63802: PUSH
63803: FOR_IN
63804: IFFALSE 63856
// if IsSelected ( i ) then
63806: LD_VAR 0 2
63810: PPUSH
63811: CALL_OW 306
63815: IFFALSE 63854
// begin for j := 1 to 4 do
63817: LD_ADDR_VAR 0 3
63821: PUSH
63822: DOUBLE
63823: LD_INT 1
63825: DEC
63826: ST_TO_ADDR
63827: LD_INT 4
63829: PUSH
63830: FOR_TO
63831: IFFALSE 63852
// SetSkill ( i , j , 10 ) ;
63833: LD_VAR 0 2
63837: PPUSH
63838: LD_VAR 0 3
63842: PPUSH
63843: LD_INT 10
63845: PPUSH
63846: CALL_OW 237
63850: GO 63830
63852: POP
63853: POP
// end ;
63854: GO 63803
63856: POP
63857: POP
// end ;
63858: LD_VAR 0 1
63862: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63863: LD_INT 0
63865: PPUSH
63866: PPUSH
63867: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63868: LD_ADDR_VAR 0 2
63872: PUSH
63873: LD_INT 22
63875: PUSH
63876: LD_OWVAR 2
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 21
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PPUSH
63899: CALL_OW 69
63903: PUSH
63904: FOR_IN
63905: IFFALSE 63946
// begin for j := 1 to 4 do
63907: LD_ADDR_VAR 0 3
63911: PUSH
63912: DOUBLE
63913: LD_INT 1
63915: DEC
63916: ST_TO_ADDR
63917: LD_INT 4
63919: PUSH
63920: FOR_TO
63921: IFFALSE 63942
// SetSkill ( i , j , 10 ) ;
63923: LD_VAR 0 2
63927: PPUSH
63928: LD_VAR 0 3
63932: PPUSH
63933: LD_INT 10
63935: PPUSH
63936: CALL_OW 237
63940: GO 63920
63942: POP
63943: POP
// end ;
63944: GO 63904
63946: POP
63947: POP
// end ;
63948: LD_VAR 0 1
63952: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63953: LD_INT 0
63955: PPUSH
// uc_side := your_side ;
63956: LD_ADDR_OWVAR 20
63960: PUSH
63961: LD_OWVAR 2
63965: ST_TO_ADDR
// uc_nation := nation ;
63966: LD_ADDR_OWVAR 21
63970: PUSH
63971: LD_VAR 0 1
63975: ST_TO_ADDR
// InitHc ;
63976: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
63980: LD_INT 0
63982: PPUSH
63983: LD_VAR 0 2
63987: PPUSH
63988: LD_VAR 0 3
63992: PPUSH
63993: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
63997: LD_VAR 0 4
64001: PPUSH
64002: LD_VAR 0 5
64006: PPUSH
64007: CALL_OW 428
64011: PUSH
64012: LD_INT 0
64014: EQUAL
64015: IFFALSE 64039
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64017: CALL_OW 44
64021: PPUSH
64022: LD_VAR 0 4
64026: PPUSH
64027: LD_VAR 0 5
64031: PPUSH
64032: LD_INT 1
64034: PPUSH
64035: CALL_OW 48
// end ;
64039: LD_VAR 0 6
64043: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64044: LD_INT 0
64046: PPUSH
64047: PPUSH
// uc_side := your_side ;
64048: LD_ADDR_OWVAR 20
64052: PUSH
64053: LD_OWVAR 2
64057: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64058: LD_VAR 0 1
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: LD_INT 3
64071: PUSH
64072: LD_INT 4
64074: PUSH
64075: LD_INT 5
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: IN
64085: IFFALSE 64097
// uc_nation := nation_american else
64087: LD_ADDR_OWVAR 21
64091: PUSH
64092: LD_INT 1
64094: ST_TO_ADDR
64095: GO 64140
// if chassis in [ 11 , 12 , 13 , 14 ] then
64097: LD_VAR 0 1
64101: PUSH
64102: LD_INT 11
64104: PUSH
64105: LD_INT 12
64107: PUSH
64108: LD_INT 13
64110: PUSH
64111: LD_INT 14
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: IN
64120: IFFALSE 64132
// uc_nation := nation_arabian else
64122: LD_ADDR_OWVAR 21
64126: PUSH
64127: LD_INT 2
64129: ST_TO_ADDR
64130: GO 64140
// uc_nation := nation_russian ;
64132: LD_ADDR_OWVAR 21
64136: PUSH
64137: LD_INT 3
64139: ST_TO_ADDR
// vc_chassis := chassis ;
64140: LD_ADDR_OWVAR 37
64144: PUSH
64145: LD_VAR 0 1
64149: ST_TO_ADDR
// vc_engine := engine ;
64150: LD_ADDR_OWVAR 39
64154: PUSH
64155: LD_VAR 0 2
64159: ST_TO_ADDR
// vc_control := control ;
64160: LD_ADDR_OWVAR 38
64164: PUSH
64165: LD_VAR 0 3
64169: ST_TO_ADDR
// vc_weapon := weapon ;
64170: LD_ADDR_OWVAR 40
64174: PUSH
64175: LD_VAR 0 4
64179: ST_TO_ADDR
// un := CreateVehicle ;
64180: LD_ADDR_VAR 0 8
64184: PUSH
64185: CALL_OW 45
64189: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64190: LD_VAR 0 8
64194: PPUSH
64195: LD_INT 0
64197: PPUSH
64198: LD_INT 5
64200: PPUSH
64201: CALL_OW 12
64205: PPUSH
64206: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64210: LD_VAR 0 8
64214: PPUSH
64215: LD_VAR 0 5
64219: PPUSH
64220: LD_VAR 0 6
64224: PPUSH
64225: LD_INT 1
64227: PPUSH
64228: CALL_OW 48
// end ;
64232: LD_VAR 0 7
64236: RET
// export hInvincible ; every 1 do
64237: GO 64239
64239: DISABLE
// hInvincible := [ ] ;
64240: LD_ADDR_EXP 90
64244: PUSH
64245: EMPTY
64246: ST_TO_ADDR
64247: END
// every 10 do var i ;
64248: GO 64250
64250: DISABLE
64251: LD_INT 0
64253: PPUSH
// begin enable ;
64254: ENABLE
// if not hInvincible then
64255: LD_EXP 90
64259: NOT
64260: IFFALSE 64264
// exit ;
64262: GO 64308
// for i in hInvincible do
64264: LD_ADDR_VAR 0 1
64268: PUSH
64269: LD_EXP 90
64273: PUSH
64274: FOR_IN
64275: IFFALSE 64306
// if GetLives ( i ) < 1000 then
64277: LD_VAR 0 1
64281: PPUSH
64282: CALL_OW 256
64286: PUSH
64287: LD_INT 1000
64289: LESS
64290: IFFALSE 64304
// SetLives ( i , 1000 ) ;
64292: LD_VAR 0 1
64296: PPUSH
64297: LD_INT 1000
64299: PPUSH
64300: CALL_OW 234
64304: GO 64274
64306: POP
64307: POP
// end ;
64308: PPOPN 1
64310: END
// export function hHackInvincible ; var i ; begin
64311: LD_INT 0
64313: PPUSH
64314: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64315: LD_ADDR_VAR 0 2
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: LD_INT 21
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 21
64335: PUSH
64336: LD_INT 2
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: LIST
64347: PPUSH
64348: CALL_OW 69
64352: PUSH
64353: FOR_IN
64354: IFFALSE 64415
// if IsSelected ( i ) then
64356: LD_VAR 0 2
64360: PPUSH
64361: CALL_OW 306
64365: IFFALSE 64413
// begin if i in hInvincible then
64367: LD_VAR 0 2
64371: PUSH
64372: LD_EXP 90
64376: IN
64377: IFFALSE 64397
// hInvincible := hInvincible diff i else
64379: LD_ADDR_EXP 90
64383: PUSH
64384: LD_EXP 90
64388: PUSH
64389: LD_VAR 0 2
64393: DIFF
64394: ST_TO_ADDR
64395: GO 64413
// hInvincible := hInvincible union i ;
64397: LD_ADDR_EXP 90
64401: PUSH
64402: LD_EXP 90
64406: PUSH
64407: LD_VAR 0 2
64411: UNION
64412: ST_TO_ADDR
// end ;
64413: GO 64353
64415: POP
64416: POP
// end ;
64417: LD_VAR 0 1
64421: RET
// export function hHackInvisible ; var i , j ; begin
64422: LD_INT 0
64424: PPUSH
64425: PPUSH
64426: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64427: LD_ADDR_VAR 0 2
64431: PUSH
64432: LD_INT 21
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PPUSH
64442: CALL_OW 69
64446: PUSH
64447: FOR_IN
64448: IFFALSE 64472
// if IsSelected ( i ) then
64450: LD_VAR 0 2
64454: PPUSH
64455: CALL_OW 306
64459: IFFALSE 64470
// ComForceInvisible ( i ) ;
64461: LD_VAR 0 2
64465: PPUSH
64466: CALL_OW 496
64470: GO 64447
64472: POP
64473: POP
// end ;
64474: LD_VAR 0 1
64478: RET
// export function hHackChangeYourSide ; begin
64479: LD_INT 0
64481: PPUSH
// if your_side = 8 then
64482: LD_OWVAR 2
64486: PUSH
64487: LD_INT 8
64489: EQUAL
64490: IFFALSE 64502
// your_side := 0 else
64492: LD_ADDR_OWVAR 2
64496: PUSH
64497: LD_INT 0
64499: ST_TO_ADDR
64500: GO 64516
// your_side := your_side + 1 ;
64502: LD_ADDR_OWVAR 2
64506: PUSH
64507: LD_OWVAR 2
64511: PUSH
64512: LD_INT 1
64514: PLUS
64515: ST_TO_ADDR
// end ;
64516: LD_VAR 0 1
64520: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64521: LD_INT 0
64523: PPUSH
64524: PPUSH
64525: PPUSH
// for i in all_units do
64526: LD_ADDR_VAR 0 2
64530: PUSH
64531: LD_OWVAR 3
64535: PUSH
64536: FOR_IN
64537: IFFALSE 64615
// if IsSelected ( i ) then
64539: LD_VAR 0 2
64543: PPUSH
64544: CALL_OW 306
64548: IFFALSE 64613
// begin j := GetSide ( i ) ;
64550: LD_ADDR_VAR 0 3
64554: PUSH
64555: LD_VAR 0 2
64559: PPUSH
64560: CALL_OW 255
64564: ST_TO_ADDR
// if j = 8 then
64565: LD_VAR 0 3
64569: PUSH
64570: LD_INT 8
64572: EQUAL
64573: IFFALSE 64585
// j := 0 else
64575: LD_ADDR_VAR 0 3
64579: PUSH
64580: LD_INT 0
64582: ST_TO_ADDR
64583: GO 64599
// j := j + 1 ;
64585: LD_ADDR_VAR 0 3
64589: PUSH
64590: LD_VAR 0 3
64594: PUSH
64595: LD_INT 1
64597: PLUS
64598: ST_TO_ADDR
// SetSide ( i , j ) ;
64599: LD_VAR 0 2
64603: PPUSH
64604: LD_VAR 0 3
64608: PPUSH
64609: CALL_OW 235
// end ;
64613: GO 64536
64615: POP
64616: POP
// end ;
64617: LD_VAR 0 1
64621: RET
// export function hHackFog ; begin
64622: LD_INT 0
64624: PPUSH
// FogOff ( true ) ;
64625: LD_INT 1
64627: PPUSH
64628: CALL_OW 344
// end ;
64632: LD_VAR 0 1
64636: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64637: LD_INT 0
64639: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64640: LD_VAR 0 1
64644: PPUSH
64645: LD_VAR 0 2
64649: PPUSH
64650: LD_VAR 0 3
64654: PPUSH
64655: LD_INT 1
64657: PPUSH
64658: LD_INT 1
64660: PPUSH
64661: CALL_OW 483
// CenterOnXY ( x , y ) ;
64665: LD_VAR 0 2
64669: PPUSH
64670: LD_VAR 0 3
64674: PPUSH
64675: CALL_OW 84
// end ;
64679: LD_VAR 0 4
64683: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64684: LD_INT 0
64686: PPUSH
64687: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64688: LD_VAR 0 1
64692: NOT
64693: PUSH
64694: LD_VAR 0 2
64698: PPUSH
64699: LD_VAR 0 3
64703: PPUSH
64704: CALL_OW 488
64708: NOT
64709: OR
64710: PUSH
64711: LD_VAR 0 1
64715: PPUSH
64716: CALL_OW 266
64720: PUSH
64721: LD_INT 3
64723: NONEQUAL
64724: PUSH
64725: LD_VAR 0 1
64729: PPUSH
64730: CALL_OW 247
64734: PUSH
64735: LD_INT 1
64737: EQUAL
64738: NOT
64739: AND
64740: OR
64741: IFFALSE 64745
// exit ;
64743: GO 64894
// if GetType ( factory ) = unit_human then
64745: LD_VAR 0 1
64749: PPUSH
64750: CALL_OW 247
64754: PUSH
64755: LD_INT 1
64757: EQUAL
64758: IFFALSE 64775
// factory := IsInUnit ( factory ) ;
64760: LD_ADDR_VAR 0 1
64764: PUSH
64765: LD_VAR 0 1
64769: PPUSH
64770: CALL_OW 310
64774: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64775: LD_VAR 0 1
64779: PPUSH
64780: CALL_OW 266
64784: PUSH
64785: LD_INT 3
64787: NONEQUAL
64788: IFFALSE 64792
// exit ;
64790: GO 64894
// if HexInfo ( x , y ) = factory then
64792: LD_VAR 0 2
64796: PPUSH
64797: LD_VAR 0 3
64801: PPUSH
64802: CALL_OW 428
64806: PUSH
64807: LD_VAR 0 1
64811: EQUAL
64812: IFFALSE 64839
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
64814: LD_ADDR_EXP 91
64818: PUSH
64819: LD_EXP 91
64823: PPUSH
64824: LD_VAR 0 1
64828: PPUSH
64829: LD_INT 0
64831: PPUSH
64832: CALL_OW 1
64836: ST_TO_ADDR
64837: GO 64890
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
64839: LD_ADDR_EXP 91
64843: PUSH
64844: LD_EXP 91
64848: PPUSH
64849: LD_VAR 0 1
64853: PPUSH
64854: LD_VAR 0 1
64858: PPUSH
64859: CALL_OW 255
64863: PUSH
64864: LD_VAR 0 1
64868: PUSH
64869: LD_VAR 0 2
64873: PUSH
64874: LD_VAR 0 3
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: PPUSH
64885: CALL_OW 1
64889: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64890: CALL 64899 0 0
// end ;
64894: LD_VAR 0 4
64898: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64899: LD_INT 0
64901: PPUSH
64902: PPUSH
64903: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64904: LD_STRING resetFactoryWaypoint();
64906: PPUSH
64907: CALL_OW 559
// if factoryWaypoints then
64911: LD_EXP 91
64915: IFFALSE 65041
// begin list := PrepareArray ( factoryWaypoints ) ;
64917: LD_ADDR_VAR 0 3
64921: PUSH
64922: LD_EXP 91
64926: PPUSH
64927: CALL 49898 0 1
64931: ST_TO_ADDR
// for i := 1 to list do
64932: LD_ADDR_VAR 0 2
64936: PUSH
64937: DOUBLE
64938: LD_INT 1
64940: DEC
64941: ST_TO_ADDR
64942: LD_VAR 0 3
64946: PUSH
64947: FOR_TO
64948: IFFALSE 65039
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64950: LD_STRING setFactoryWaypointXY(
64952: PUSH
64953: LD_VAR 0 3
64957: PUSH
64958: LD_VAR 0 2
64962: ARRAY
64963: PUSH
64964: LD_INT 1
64966: ARRAY
64967: STR
64968: PUSH
64969: LD_STRING ,
64971: STR
64972: PUSH
64973: LD_VAR 0 3
64977: PUSH
64978: LD_VAR 0 2
64982: ARRAY
64983: PUSH
64984: LD_INT 2
64986: ARRAY
64987: STR
64988: PUSH
64989: LD_STRING ,
64991: STR
64992: PUSH
64993: LD_VAR 0 3
64997: PUSH
64998: LD_VAR 0 2
65002: ARRAY
65003: PUSH
65004: LD_INT 3
65006: ARRAY
65007: STR
65008: PUSH
65009: LD_STRING ,
65011: STR
65012: PUSH
65013: LD_VAR 0 3
65017: PUSH
65018: LD_VAR 0 2
65022: ARRAY
65023: PUSH
65024: LD_INT 4
65026: ARRAY
65027: STR
65028: PUSH
65029: LD_STRING )
65031: STR
65032: PPUSH
65033: CALL_OW 559
65037: GO 64947
65039: POP
65040: POP
// end ; end ;
65041: LD_VAR 0 1
65045: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65046: LD_INT 0
65048: PPUSH
// if HexInfo ( x , y ) = warehouse then
65049: LD_VAR 0 2
65053: PPUSH
65054: LD_VAR 0 3
65058: PPUSH
65059: CALL_OW 428
65063: PUSH
65064: LD_VAR 0 1
65068: EQUAL
65069: IFFALSE 65096
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65071: LD_ADDR_EXP 92
65075: PUSH
65076: LD_EXP 92
65080: PPUSH
65081: LD_VAR 0 1
65085: PPUSH
65086: LD_INT 0
65088: PPUSH
65089: CALL_OW 1
65093: ST_TO_ADDR
65094: GO 65147
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65096: LD_ADDR_EXP 92
65100: PUSH
65101: LD_EXP 92
65105: PPUSH
65106: LD_VAR 0 1
65110: PPUSH
65111: LD_VAR 0 1
65115: PPUSH
65116: CALL_OW 255
65120: PUSH
65121: LD_VAR 0 1
65125: PUSH
65126: LD_VAR 0 2
65130: PUSH
65131: LD_VAR 0 3
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: PPUSH
65142: CALL_OW 1
65146: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65147: CALL 65156 0 0
// end ;
65151: LD_VAR 0 4
65155: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65156: LD_INT 0
65158: PPUSH
65159: PPUSH
65160: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65161: LD_STRING resetWarehouseGatheringPoints();
65163: PPUSH
65164: CALL_OW 559
// if warehouseGatheringPoints then
65168: LD_EXP 92
65172: IFFALSE 65298
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65174: LD_ADDR_VAR 0 3
65178: PUSH
65179: LD_EXP 92
65183: PPUSH
65184: CALL 49898 0 1
65188: ST_TO_ADDR
// for i := 1 to list do
65189: LD_ADDR_VAR 0 2
65193: PUSH
65194: DOUBLE
65195: LD_INT 1
65197: DEC
65198: ST_TO_ADDR
65199: LD_VAR 0 3
65203: PUSH
65204: FOR_TO
65205: IFFALSE 65296
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65207: LD_STRING setWarehouseGatheringPointXY(
65209: PUSH
65210: LD_VAR 0 3
65214: PUSH
65215: LD_VAR 0 2
65219: ARRAY
65220: PUSH
65221: LD_INT 1
65223: ARRAY
65224: STR
65225: PUSH
65226: LD_STRING ,
65228: STR
65229: PUSH
65230: LD_VAR 0 3
65234: PUSH
65235: LD_VAR 0 2
65239: ARRAY
65240: PUSH
65241: LD_INT 2
65243: ARRAY
65244: STR
65245: PUSH
65246: LD_STRING ,
65248: STR
65249: PUSH
65250: LD_VAR 0 3
65254: PUSH
65255: LD_VAR 0 2
65259: ARRAY
65260: PUSH
65261: LD_INT 3
65263: ARRAY
65264: STR
65265: PUSH
65266: LD_STRING ,
65268: STR
65269: PUSH
65270: LD_VAR 0 3
65274: PUSH
65275: LD_VAR 0 2
65279: ARRAY
65280: PUSH
65281: LD_INT 4
65283: ARRAY
65284: STR
65285: PUSH
65286: LD_STRING )
65288: STR
65289: PPUSH
65290: CALL_OW 559
65294: GO 65204
65296: POP
65297: POP
// end ; end ;
65298: LD_VAR 0 1
65302: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65303: LD_EXP 92
65307: IFFALSE 65992
65309: GO 65311
65311: DISABLE
65312: LD_INT 0
65314: PPUSH
65315: PPUSH
65316: PPUSH
65317: PPUSH
65318: PPUSH
65319: PPUSH
65320: PPUSH
65321: PPUSH
65322: PPUSH
// begin enable ;
65323: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65324: LD_ADDR_VAR 0 3
65328: PUSH
65329: LD_EXP 92
65333: PPUSH
65334: CALL 49898 0 1
65338: ST_TO_ADDR
// if not list then
65339: LD_VAR 0 3
65343: NOT
65344: IFFALSE 65348
// exit ;
65346: GO 65992
// for i := 1 to list do
65348: LD_ADDR_VAR 0 1
65352: PUSH
65353: DOUBLE
65354: LD_INT 1
65356: DEC
65357: ST_TO_ADDR
65358: LD_VAR 0 3
65362: PUSH
65363: FOR_TO
65364: IFFALSE 65990
// begin depot := list [ i ] [ 2 ] ;
65366: LD_ADDR_VAR 0 8
65370: PUSH
65371: LD_VAR 0 3
65375: PUSH
65376: LD_VAR 0 1
65380: ARRAY
65381: PUSH
65382: LD_INT 2
65384: ARRAY
65385: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65386: LD_ADDR_VAR 0 5
65390: PUSH
65391: LD_VAR 0 3
65395: PUSH
65396: LD_VAR 0 1
65400: ARRAY
65401: PUSH
65402: LD_INT 1
65404: ARRAY
65405: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65406: LD_VAR 0 8
65410: PPUSH
65411: CALL_OW 301
65415: PUSH
65416: LD_VAR 0 5
65420: PUSH
65421: LD_VAR 0 8
65425: PPUSH
65426: CALL_OW 255
65430: NONEQUAL
65431: OR
65432: IFFALSE 65461
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65434: LD_ADDR_EXP 92
65438: PUSH
65439: LD_EXP 92
65443: PPUSH
65444: LD_VAR 0 8
65448: PPUSH
65449: LD_INT 0
65451: PPUSH
65452: CALL_OW 1
65456: ST_TO_ADDR
// exit ;
65457: POP
65458: POP
65459: GO 65992
// end ; x := list [ i ] [ 3 ] ;
65461: LD_ADDR_VAR 0 6
65465: PUSH
65466: LD_VAR 0 3
65470: PUSH
65471: LD_VAR 0 1
65475: ARRAY
65476: PUSH
65477: LD_INT 3
65479: ARRAY
65480: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65481: LD_ADDR_VAR 0 7
65485: PUSH
65486: LD_VAR 0 3
65490: PUSH
65491: LD_VAR 0 1
65495: ARRAY
65496: PUSH
65497: LD_INT 4
65499: ARRAY
65500: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65501: LD_ADDR_VAR 0 9
65505: PUSH
65506: LD_VAR 0 6
65510: PPUSH
65511: LD_VAR 0 7
65515: PPUSH
65516: LD_INT 16
65518: PPUSH
65519: CALL 48486 0 3
65523: ST_TO_ADDR
// if not cratesNearbyPoint then
65524: LD_VAR 0 9
65528: NOT
65529: IFFALSE 65535
// exit ;
65531: POP
65532: POP
65533: GO 65992
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65535: LD_ADDR_VAR 0 4
65539: PUSH
65540: LD_INT 22
65542: PUSH
65543: LD_VAR 0 5
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 3
65554: PUSH
65555: LD_INT 60
65557: PUSH
65558: EMPTY
65559: LIST
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 91
65567: PUSH
65568: LD_VAR 0 8
65572: PUSH
65573: LD_INT 6
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 2
65583: PUSH
65584: LD_INT 25
65586: PUSH
65587: LD_INT 2
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 25
65596: PUSH
65597: LD_INT 16
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: LIST
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: PPUSH
65615: CALL_OW 69
65619: PUSH
65620: LD_VAR 0 8
65624: PPUSH
65625: CALL_OW 313
65629: PPUSH
65630: LD_INT 3
65632: PUSH
65633: LD_INT 60
65635: PUSH
65636: EMPTY
65637: LIST
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 2
65645: PUSH
65646: LD_INT 25
65648: PUSH
65649: LD_INT 2
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 25
65658: PUSH
65659: LD_INT 16
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: LIST
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PPUSH
65675: CALL_OW 72
65679: UNION
65680: ST_TO_ADDR
// if tmp then
65681: LD_VAR 0 4
65685: IFFALSE 65765
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65687: LD_ADDR_VAR 0 4
65691: PUSH
65692: LD_VAR 0 4
65696: PPUSH
65697: LD_INT 3
65699: PPUSH
65700: CALL 46455 0 2
65704: ST_TO_ADDR
// for j in tmp do
65705: LD_ADDR_VAR 0 2
65709: PUSH
65710: LD_VAR 0 4
65714: PUSH
65715: FOR_IN
65716: IFFALSE 65759
// begin if IsInUnit ( j ) then
65718: LD_VAR 0 2
65722: PPUSH
65723: CALL_OW 310
65727: IFFALSE 65738
// ComExit ( j ) ;
65729: LD_VAR 0 2
65733: PPUSH
65734: CALL 46538 0 1
// AddComCollect ( j , x , y ) ;
65738: LD_VAR 0 2
65742: PPUSH
65743: LD_VAR 0 6
65747: PPUSH
65748: LD_VAR 0 7
65752: PPUSH
65753: CALL_OW 177
// end ;
65757: GO 65715
65759: POP
65760: POP
// exit ;
65761: POP
65762: POP
65763: GO 65992
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65765: LD_ADDR_VAR 0 4
65769: PUSH
65770: LD_INT 22
65772: PUSH
65773: LD_VAR 0 5
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 91
65784: PUSH
65785: LD_VAR 0 8
65789: PUSH
65790: LD_INT 8
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 2
65800: PUSH
65801: LD_INT 34
65803: PUSH
65804: LD_INT 12
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 34
65813: PUSH
65814: LD_INT 51
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 34
65823: PUSH
65824: LD_INT 32
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 34
65833: PUSH
65834: LD_INT 89
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: LIST
65852: PPUSH
65853: CALL_OW 69
65857: ST_TO_ADDR
// if tmp then
65858: LD_VAR 0 4
65862: IFFALSE 65988
// begin for j in tmp do
65864: LD_ADDR_VAR 0 2
65868: PUSH
65869: LD_VAR 0 4
65873: PUSH
65874: FOR_IN
65875: IFFALSE 65986
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
65877: LD_VAR 0 2
65881: PPUSH
65882: CALL_OW 262
65886: PUSH
65887: LD_INT 3
65889: EQUAL
65890: PUSH
65891: LD_VAR 0 2
65895: PPUSH
65896: CALL_OW 261
65900: PUSH
65901: LD_INT 20
65903: GREATER
65904: OR
65905: PUSH
65906: LD_VAR 0 2
65910: PPUSH
65911: CALL_OW 314
65915: NOT
65916: AND
65917: PUSH
65918: LD_VAR 0 2
65922: PPUSH
65923: CALL_OW 263
65927: PUSH
65928: LD_INT 1
65930: NONEQUAL
65931: PUSH
65932: LD_VAR 0 2
65936: PPUSH
65937: CALL_OW 311
65941: OR
65942: AND
65943: IFFALSE 65984
// begin ComCollect ( j , x , y ) ;
65945: LD_VAR 0 2
65949: PPUSH
65950: LD_VAR 0 6
65954: PPUSH
65955: LD_VAR 0 7
65959: PPUSH
65960: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
65964: LD_VAR 0 2
65968: PPUSH
65969: LD_VAR 0 8
65973: PPUSH
65974: CALL_OW 172
// exit ;
65978: POP
65979: POP
65980: POP
65981: POP
65982: GO 65992
// end ;
65984: GO 65874
65986: POP
65987: POP
// end ; end ;
65988: GO 65363
65990: POP
65991: POP
// end ; end_of_file
65992: PPOPN 9
65994: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65995: LD_VAR 0 1
65999: PUSH
66000: LD_INT 200
66002: DOUBLE
66003: GREATEREQUAL
66004: IFFALSE 66012
66006: LD_INT 299
66008: DOUBLE
66009: LESSEQUAL
66010: IFTRUE 66014
66012: GO 66046
66014: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66015: LD_VAR 0 1
66019: PPUSH
66020: LD_VAR 0 2
66024: PPUSH
66025: LD_VAR 0 3
66029: PPUSH
66030: LD_VAR 0 4
66034: PPUSH
66035: LD_VAR 0 5
66039: PPUSH
66040: CALL 66534 0 5
66044: GO 66123
66046: LD_INT 300
66048: DOUBLE
66049: GREATEREQUAL
66050: IFFALSE 66058
66052: LD_INT 399
66054: DOUBLE
66055: LESSEQUAL
66056: IFTRUE 66060
66058: GO 66122
66060: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66061: LD_VAR 0 1
66065: PPUSH
66066: LD_VAR 0 2
66070: PPUSH
66071: LD_VAR 0 3
66075: PPUSH
66076: LD_VAR 0 4
66080: PPUSH
66081: LD_VAR 0 5
66085: PPUSH
66086: LD_VAR 0 6
66090: PPUSH
66091: LD_VAR 0 7
66095: PPUSH
66096: LD_VAR 0 8
66100: PPUSH
66101: LD_VAR 0 9
66105: PPUSH
66106: LD_VAR 0 10
66110: PPUSH
66111: LD_VAR 0 11
66115: PPUSH
66116: CALL 62704 0 11
66120: GO 66123
66122: POP
// end ;
66123: PPOPN 11
66125: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66126: LD_VAR 0 1
66130: PPUSH
66131: LD_VAR 0 2
66135: PPUSH
66136: LD_VAR 0 3
66140: PPUSH
66141: LD_VAR 0 4
66145: PPUSH
66146: LD_VAR 0 5
66150: PPUSH
66151: CALL 66270 0 5
// end ; end_of_file
66155: PPOPN 5
66157: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
66158: LD_INT 0
66160: PPUSH
66161: PPUSH
66162: PPUSH
66163: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
66164: LD_VAR 0 1
66168: PPUSH
66169: CALL_OW 264
66173: PUSH
66174: LD_INT 91
66176: EQUAL
66177: IFFALSE 66249
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
66179: LD_INT 68
66181: PPUSH
66182: LD_VAR 0 1
66186: PPUSH
66187: CALL_OW 255
66191: PPUSH
66192: CALL_OW 321
66196: PUSH
66197: LD_INT 2
66199: EQUAL
66200: IFFALSE 66212
// eff := 70 else
66202: LD_ADDR_VAR 0 4
66206: PUSH
66207: LD_INT 70
66209: ST_TO_ADDR
66210: GO 66220
// eff := 30 ;
66212: LD_ADDR_VAR 0 4
66216: PUSH
66217: LD_INT 30
66219: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
66220: LD_VAR 0 1
66224: PPUSH
66225: CALL_OW 250
66229: PPUSH
66230: LD_VAR 0 1
66234: PPUSH
66235: CALL_OW 251
66239: PPUSH
66240: LD_VAR 0 4
66244: PPUSH
66245: CALL_OW 495
// end ; end ;
66249: LD_VAR 0 2
66253: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
66254: LD_INT 0
66256: PPUSH
// end ;
66257: LD_VAR 0 4
66261: RET
// export function SOS_Command ( cmd ) ; begin
66262: LD_INT 0
66264: PPUSH
// end ;
66265: LD_VAR 0 2
66269: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
66270: LD_INT 0
66272: PPUSH
// end ;
66273: LD_VAR 0 6
66277: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
66278: LD_INT 0
66280: PPUSH
66281: PPUSH
// if not vehicle or not factory then
66282: LD_VAR 0 1
66286: NOT
66287: PUSH
66288: LD_VAR 0 2
66292: NOT
66293: OR
66294: IFFALSE 66298
// exit ;
66296: GO 66529
// if factoryWaypoints >= factory then
66298: LD_EXP 91
66302: PUSH
66303: LD_VAR 0 2
66307: GREATEREQUAL
66308: IFFALSE 66529
// if factoryWaypoints [ factory ] then
66310: LD_EXP 91
66314: PUSH
66315: LD_VAR 0 2
66319: ARRAY
66320: IFFALSE 66529
// begin if GetControl ( vehicle ) = control_manual then
66322: LD_VAR 0 1
66326: PPUSH
66327: CALL_OW 263
66331: PUSH
66332: LD_INT 1
66334: EQUAL
66335: IFFALSE 66416
// begin driver := IsDrivenBy ( vehicle ) ;
66337: LD_ADDR_VAR 0 4
66341: PUSH
66342: LD_VAR 0 1
66346: PPUSH
66347: CALL_OW 311
66351: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66352: LD_VAR 0 4
66356: PPUSH
66357: LD_EXP 91
66361: PUSH
66362: LD_VAR 0 2
66366: ARRAY
66367: PUSH
66368: LD_INT 3
66370: ARRAY
66371: PPUSH
66372: LD_EXP 91
66376: PUSH
66377: LD_VAR 0 2
66381: ARRAY
66382: PUSH
66383: LD_INT 4
66385: ARRAY
66386: PPUSH
66387: CALL_OW 171
// AddComExitVehicle ( driver ) ;
66391: LD_VAR 0 4
66395: PPUSH
66396: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
66400: LD_VAR 0 4
66404: PPUSH
66405: LD_VAR 0 2
66409: PPUSH
66410: CALL_OW 180
// end else
66414: GO 66529
// if GetControl ( vehicle ) = control_remote then
66416: LD_VAR 0 1
66420: PPUSH
66421: CALL_OW 263
66425: PUSH
66426: LD_INT 2
66428: EQUAL
66429: IFFALSE 66490
// begin wait ( 0 0$2 ) ;
66431: LD_INT 70
66433: PPUSH
66434: CALL_OW 67
// if Connect ( vehicle ) then
66438: LD_VAR 0 1
66442: PPUSH
66443: CALL 16778 0 1
66447: IFFALSE 66488
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66449: LD_VAR 0 1
66453: PPUSH
66454: LD_EXP 91
66458: PUSH
66459: LD_VAR 0 2
66463: ARRAY
66464: PUSH
66465: LD_INT 3
66467: ARRAY
66468: PPUSH
66469: LD_EXP 91
66473: PUSH
66474: LD_VAR 0 2
66478: ARRAY
66479: PUSH
66480: LD_INT 4
66482: ARRAY
66483: PPUSH
66484: CALL_OW 171
// end else
66488: GO 66529
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66490: LD_VAR 0 1
66494: PPUSH
66495: LD_EXP 91
66499: PUSH
66500: LD_VAR 0 2
66504: ARRAY
66505: PUSH
66506: LD_INT 3
66508: ARRAY
66509: PPUSH
66510: LD_EXP 91
66514: PUSH
66515: LD_VAR 0 2
66519: ARRAY
66520: PUSH
66521: LD_INT 4
66523: ARRAY
66524: PPUSH
66525: CALL_OW 171
// end ; end ;
66529: LD_VAR 0 3
66533: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
66534: LD_INT 0
66536: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
66537: LD_VAR 0 1
66541: PUSH
66542: LD_INT 250
66544: EQUAL
66545: PUSH
66546: LD_VAR 0 2
66550: PPUSH
66551: CALL_OW 264
66555: PUSH
66556: LD_INT 81
66558: EQUAL
66559: AND
66560: IFFALSE 66581
// MinerPlaceMine ( unit , x , y ) ;
66562: LD_VAR 0 2
66566: PPUSH
66567: LD_VAR 0 4
66571: PPUSH
66572: LD_VAR 0 5
66576: PPUSH
66577: CALL 68966 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
66581: LD_VAR 0 1
66585: PUSH
66586: LD_INT 251
66588: EQUAL
66589: PUSH
66590: LD_VAR 0 2
66594: PPUSH
66595: CALL_OW 264
66599: PUSH
66600: LD_INT 81
66602: EQUAL
66603: AND
66604: IFFALSE 66625
// MinerDetonateMine ( unit , x , y ) ;
66606: LD_VAR 0 2
66610: PPUSH
66611: LD_VAR 0 4
66615: PPUSH
66616: LD_VAR 0 5
66620: PPUSH
66621: CALL 69241 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
66625: LD_VAR 0 1
66629: PUSH
66630: LD_INT 252
66632: EQUAL
66633: PUSH
66634: LD_VAR 0 2
66638: PPUSH
66639: CALL_OW 264
66643: PUSH
66644: LD_INT 81
66646: EQUAL
66647: AND
66648: IFFALSE 66669
// MinerCreateMinefield ( unit , x , y ) ;
66650: LD_VAR 0 2
66654: PPUSH
66655: LD_VAR 0 4
66659: PPUSH
66660: LD_VAR 0 5
66664: PPUSH
66665: CALL 69658 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
66669: LD_VAR 0 1
66673: PUSH
66674: LD_INT 253
66676: EQUAL
66677: PUSH
66678: LD_VAR 0 2
66682: PPUSH
66683: CALL_OW 257
66687: PUSH
66688: LD_INT 5
66690: EQUAL
66691: AND
66692: IFFALSE 66713
// ComBinocular ( unit , x , y ) ;
66694: LD_VAR 0 2
66698: PPUSH
66699: LD_VAR 0 4
66703: PPUSH
66704: LD_VAR 0 5
66708: PPUSH
66709: CALL 70027 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
66713: LD_VAR 0 1
66717: PUSH
66718: LD_INT 254
66720: EQUAL
66721: PUSH
66722: LD_VAR 0 2
66726: PPUSH
66727: CALL_OW 264
66731: PUSH
66732: LD_INT 99
66734: EQUAL
66735: AND
66736: PUSH
66737: LD_VAR 0 3
66741: PPUSH
66742: CALL_OW 263
66746: PUSH
66747: LD_INT 3
66749: EQUAL
66750: AND
66751: IFFALSE 66767
// HackDestroyVehicle ( unit , selectedUnit ) ;
66753: LD_VAR 0 2
66757: PPUSH
66758: LD_VAR 0 3
66762: PPUSH
66763: CALL 68330 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
66767: LD_VAR 0 1
66771: PUSH
66772: LD_INT 255
66774: EQUAL
66775: PUSH
66776: LD_VAR 0 2
66780: PPUSH
66781: CALL_OW 264
66785: PUSH
66786: LD_INT 14
66788: PUSH
66789: LD_INT 53
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: IN
66796: AND
66797: PUSH
66798: LD_VAR 0 4
66802: PPUSH
66803: LD_VAR 0 5
66807: PPUSH
66808: CALL_OW 488
66812: AND
66813: IFFALSE 66837
// CutTreeXYR ( unit , x , y , 12 ) ;
66815: LD_VAR 0 2
66819: PPUSH
66820: LD_VAR 0 4
66824: PPUSH
66825: LD_VAR 0 5
66829: PPUSH
66830: LD_INT 12
66832: PPUSH
66833: CALL 66900 0 4
// if cmd = 256 then
66837: LD_VAR 0 1
66841: PUSH
66842: LD_INT 256
66844: EQUAL
66845: IFFALSE 66866
// SetFactoryWaypoint ( unit , x , y ) ;
66847: LD_VAR 0 2
66851: PPUSH
66852: LD_VAR 0 4
66856: PPUSH
66857: LD_VAR 0 5
66861: PPUSH
66862: CALL 64684 0 3
// if cmd = 257 then
66866: LD_VAR 0 1
66870: PUSH
66871: LD_INT 257
66873: EQUAL
66874: IFFALSE 66895
// SetWarehouseGatheringPoint ( unit , x , y ) ;
66876: LD_VAR 0 2
66880: PPUSH
66881: LD_VAR 0 4
66885: PPUSH
66886: LD_VAR 0 5
66890: PPUSH
66891: CALL 65046 0 3
// end ;
66895: LD_VAR 0 6
66899: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66900: LD_INT 0
66902: PPUSH
66903: PPUSH
66904: PPUSH
66905: PPUSH
66906: PPUSH
66907: PPUSH
66908: PPUSH
66909: PPUSH
66910: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
66911: LD_VAR 0 1
66915: NOT
66916: PUSH
66917: LD_VAR 0 2
66921: PPUSH
66922: LD_VAR 0 3
66926: PPUSH
66927: CALL_OW 488
66931: NOT
66932: OR
66933: PUSH
66934: LD_VAR 0 4
66938: NOT
66939: OR
66940: IFFALSE 66944
// exit ;
66942: GO 67284
// list := [ ] ;
66944: LD_ADDR_VAR 0 13
66948: PUSH
66949: EMPTY
66950: ST_TO_ADDR
// if x - r < 0 then
66951: LD_VAR 0 2
66955: PUSH
66956: LD_VAR 0 4
66960: MINUS
66961: PUSH
66962: LD_INT 0
66964: LESS
66965: IFFALSE 66977
// min_x := 0 else
66967: LD_ADDR_VAR 0 7
66971: PUSH
66972: LD_INT 0
66974: ST_TO_ADDR
66975: GO 66993
// min_x := x - r ;
66977: LD_ADDR_VAR 0 7
66981: PUSH
66982: LD_VAR 0 2
66986: PUSH
66987: LD_VAR 0 4
66991: MINUS
66992: ST_TO_ADDR
// if y - r < 0 then
66993: LD_VAR 0 3
66997: PUSH
66998: LD_VAR 0 4
67002: MINUS
67003: PUSH
67004: LD_INT 0
67006: LESS
67007: IFFALSE 67019
// min_y := 0 else
67009: LD_ADDR_VAR 0 8
67013: PUSH
67014: LD_INT 0
67016: ST_TO_ADDR
67017: GO 67035
// min_y := y - r ;
67019: LD_ADDR_VAR 0 8
67023: PUSH
67024: LD_VAR 0 3
67028: PUSH
67029: LD_VAR 0 4
67033: MINUS
67034: ST_TO_ADDR
// max_x := x + r ;
67035: LD_ADDR_VAR 0 9
67039: PUSH
67040: LD_VAR 0 2
67044: PUSH
67045: LD_VAR 0 4
67049: PLUS
67050: ST_TO_ADDR
// max_y := y + r ;
67051: LD_ADDR_VAR 0 10
67055: PUSH
67056: LD_VAR 0 3
67060: PUSH
67061: LD_VAR 0 4
67065: PLUS
67066: ST_TO_ADDR
// for _x = min_x to max_x do
67067: LD_ADDR_VAR 0 11
67071: PUSH
67072: DOUBLE
67073: LD_VAR 0 7
67077: DEC
67078: ST_TO_ADDR
67079: LD_VAR 0 9
67083: PUSH
67084: FOR_TO
67085: IFFALSE 67202
// for _y = min_y to max_y do
67087: LD_ADDR_VAR 0 12
67091: PUSH
67092: DOUBLE
67093: LD_VAR 0 8
67097: DEC
67098: ST_TO_ADDR
67099: LD_VAR 0 10
67103: PUSH
67104: FOR_TO
67105: IFFALSE 67198
// begin if not ValidHex ( _x , _y ) then
67107: LD_VAR 0 11
67111: PPUSH
67112: LD_VAR 0 12
67116: PPUSH
67117: CALL_OW 488
67121: NOT
67122: IFFALSE 67126
// continue ;
67124: GO 67104
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67126: LD_VAR 0 11
67130: PPUSH
67131: LD_VAR 0 12
67135: PPUSH
67136: CALL_OW 351
67140: PUSH
67141: LD_VAR 0 11
67145: PPUSH
67146: LD_VAR 0 12
67150: PPUSH
67151: CALL_OW 554
67155: AND
67156: IFFALSE 67196
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67158: LD_ADDR_VAR 0 13
67162: PUSH
67163: LD_VAR 0 13
67167: PPUSH
67168: LD_VAR 0 13
67172: PUSH
67173: LD_INT 1
67175: PLUS
67176: PPUSH
67177: LD_VAR 0 11
67181: PUSH
67182: LD_VAR 0 12
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PPUSH
67191: CALL_OW 2
67195: ST_TO_ADDR
// end ;
67196: GO 67104
67198: POP
67199: POP
67200: GO 67084
67202: POP
67203: POP
// if not list then
67204: LD_VAR 0 13
67208: NOT
67209: IFFALSE 67213
// exit ;
67211: GO 67284
// for i in list do
67213: LD_ADDR_VAR 0 6
67217: PUSH
67218: LD_VAR 0 13
67222: PUSH
67223: FOR_IN
67224: IFFALSE 67282
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
67226: LD_VAR 0 1
67230: PPUSH
67231: LD_STRING M
67233: PUSH
67234: LD_VAR 0 6
67238: PUSH
67239: LD_INT 1
67241: ARRAY
67242: PUSH
67243: LD_VAR 0 6
67247: PUSH
67248: LD_INT 2
67250: ARRAY
67251: PUSH
67252: LD_INT 0
67254: PUSH
67255: LD_INT 0
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: PUSH
67273: EMPTY
67274: LIST
67275: PPUSH
67276: CALL_OW 447
67280: GO 67223
67282: POP
67283: POP
// end ;
67284: LD_VAR 0 5
67288: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
67289: LD_EXP 94
67293: NOT
67294: IFFALSE 67344
67296: GO 67298
67298: DISABLE
// begin initHack := true ;
67299: LD_ADDR_EXP 94
67303: PUSH
67304: LD_INT 1
67306: ST_TO_ADDR
// hackTanks := [ ] ;
67307: LD_ADDR_EXP 95
67311: PUSH
67312: EMPTY
67313: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
67314: LD_ADDR_EXP 96
67318: PUSH
67319: EMPTY
67320: ST_TO_ADDR
// hackLimit := 3 ;
67321: LD_ADDR_EXP 97
67325: PUSH
67326: LD_INT 3
67328: ST_TO_ADDR
// hackDist := 12 ;
67329: LD_ADDR_EXP 98
67333: PUSH
67334: LD_INT 12
67336: ST_TO_ADDR
// hackCounter := [ ] ;
67337: LD_ADDR_EXP 99
67341: PUSH
67342: EMPTY
67343: ST_TO_ADDR
// end ;
67344: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
67345: LD_EXP 94
67349: PUSH
67350: LD_INT 34
67352: PUSH
67353: LD_INT 99
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PPUSH
67360: CALL_OW 69
67364: AND
67365: IFFALSE 67618
67367: GO 67369
67369: DISABLE
67370: LD_INT 0
67372: PPUSH
67373: PPUSH
// begin enable ;
67374: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
67375: LD_ADDR_VAR 0 1
67379: PUSH
67380: LD_INT 34
67382: PUSH
67383: LD_INT 99
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PPUSH
67390: CALL_OW 69
67394: PUSH
67395: FOR_IN
67396: IFFALSE 67616
// begin if not i in hackTanks then
67398: LD_VAR 0 1
67402: PUSH
67403: LD_EXP 95
67407: IN
67408: NOT
67409: IFFALSE 67492
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
67411: LD_ADDR_EXP 95
67415: PUSH
67416: LD_EXP 95
67420: PPUSH
67421: LD_EXP 95
67425: PUSH
67426: LD_INT 1
67428: PLUS
67429: PPUSH
67430: LD_VAR 0 1
67434: PPUSH
67435: CALL_OW 1
67439: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
67440: LD_ADDR_EXP 96
67444: PUSH
67445: LD_EXP 96
67449: PPUSH
67450: LD_EXP 96
67454: PUSH
67455: LD_INT 1
67457: PLUS
67458: PPUSH
67459: EMPTY
67460: PPUSH
67461: CALL_OW 1
67465: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
67466: LD_ADDR_EXP 99
67470: PUSH
67471: LD_EXP 99
67475: PPUSH
67476: LD_EXP 99
67480: PUSH
67481: LD_INT 1
67483: PLUS
67484: PPUSH
67485: EMPTY
67486: PPUSH
67487: CALL_OW 1
67491: ST_TO_ADDR
// end ; if not IsOk ( i ) then
67492: LD_VAR 0 1
67496: PPUSH
67497: CALL_OW 302
67501: NOT
67502: IFFALSE 67515
// begin HackUnlinkAll ( i ) ;
67504: LD_VAR 0 1
67508: PPUSH
67509: CALL 67621 0 1
// continue ;
67513: GO 67395
// end ; HackCheckCapturedStatus ( i ) ;
67515: LD_VAR 0 1
67519: PPUSH
67520: CALL 68064 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
67524: LD_ADDR_VAR 0 2
67528: PUSH
67529: LD_INT 81
67531: PUSH
67532: LD_VAR 0 1
67536: PPUSH
67537: CALL_OW 255
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 33
67548: PUSH
67549: LD_INT 3
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 91
67558: PUSH
67559: LD_VAR 0 1
67563: PUSH
67564: LD_EXP 98
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 50
67576: PUSH
67577: EMPTY
67578: LIST
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: PPUSH
67586: CALL_OW 69
67590: ST_TO_ADDR
// if not tmp then
67591: LD_VAR 0 2
67595: NOT
67596: IFFALSE 67600
// continue ;
67598: GO 67395
// HackLink ( i , tmp ) ;
67600: LD_VAR 0 1
67604: PPUSH
67605: LD_VAR 0 2
67609: PPUSH
67610: CALL 67757 0 2
// end ;
67614: GO 67395
67616: POP
67617: POP
// end ;
67618: PPOPN 2
67620: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67621: LD_INT 0
67623: PPUSH
67624: PPUSH
67625: PPUSH
// if not hack in hackTanks then
67626: LD_VAR 0 1
67630: PUSH
67631: LD_EXP 95
67635: IN
67636: NOT
67637: IFFALSE 67641
// exit ;
67639: GO 67752
// index := GetElementIndex ( hackTanks , hack ) ;
67641: LD_ADDR_VAR 0 4
67645: PUSH
67646: LD_EXP 95
67650: PPUSH
67651: LD_VAR 0 1
67655: PPUSH
67656: CALL 13594 0 2
67660: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67661: LD_EXP 96
67665: PUSH
67666: LD_VAR 0 4
67670: ARRAY
67671: IFFALSE 67752
// begin for i in hackTanksCaptured [ index ] do
67673: LD_ADDR_VAR 0 3
67677: PUSH
67678: LD_EXP 96
67682: PUSH
67683: LD_VAR 0 4
67687: ARRAY
67688: PUSH
67689: FOR_IN
67690: IFFALSE 67716
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67692: LD_VAR 0 3
67696: PUSH
67697: LD_INT 1
67699: ARRAY
67700: PPUSH
67701: LD_VAR 0 3
67705: PUSH
67706: LD_INT 2
67708: ARRAY
67709: PPUSH
67710: CALL_OW 235
67714: GO 67689
67716: POP
67717: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67718: LD_ADDR_EXP 96
67722: PUSH
67723: LD_EXP 96
67727: PPUSH
67728: LD_VAR 0 4
67732: PPUSH
67733: EMPTY
67734: PPUSH
67735: CALL_OW 1
67739: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67740: LD_VAR 0 1
67744: PPUSH
67745: LD_INT 0
67747: PPUSH
67748: CALL_OW 505
// end ; end ;
67752: LD_VAR 0 2
67756: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67757: LD_INT 0
67759: PPUSH
67760: PPUSH
67761: PPUSH
// if not hack in hackTanks or not vehicles then
67762: LD_VAR 0 1
67766: PUSH
67767: LD_EXP 95
67771: IN
67772: NOT
67773: PUSH
67774: LD_VAR 0 2
67778: NOT
67779: OR
67780: IFFALSE 67784
// exit ;
67782: GO 68059
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67784: LD_ADDR_VAR 0 2
67788: PUSH
67789: LD_VAR 0 1
67793: PPUSH
67794: LD_VAR 0 2
67798: PPUSH
67799: LD_INT 1
67801: PPUSH
67802: LD_INT 1
67804: PPUSH
67805: CALL 14244 0 4
67809: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67810: LD_ADDR_VAR 0 5
67814: PUSH
67815: LD_EXP 95
67819: PPUSH
67820: LD_VAR 0 1
67824: PPUSH
67825: CALL 13594 0 2
67829: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67830: LD_EXP 96
67834: PUSH
67835: LD_VAR 0 5
67839: ARRAY
67840: PUSH
67841: LD_EXP 97
67845: LESS
67846: IFFALSE 68035
// begin for i := 1 to vehicles do
67848: LD_ADDR_VAR 0 4
67852: PUSH
67853: DOUBLE
67854: LD_INT 1
67856: DEC
67857: ST_TO_ADDR
67858: LD_VAR 0 2
67862: PUSH
67863: FOR_TO
67864: IFFALSE 68033
// begin if hackTanksCaptured [ index ] = hackLimit then
67866: LD_EXP 96
67870: PUSH
67871: LD_VAR 0 5
67875: ARRAY
67876: PUSH
67877: LD_EXP 97
67881: EQUAL
67882: IFFALSE 67886
// break ;
67884: GO 68033
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
67886: LD_ADDR_EXP 99
67890: PUSH
67891: LD_EXP 99
67895: PPUSH
67896: LD_VAR 0 5
67900: PPUSH
67901: LD_EXP 99
67905: PUSH
67906: LD_VAR 0 5
67910: ARRAY
67911: PUSH
67912: LD_INT 1
67914: PLUS
67915: PPUSH
67916: CALL_OW 1
67920: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
67921: LD_ADDR_EXP 96
67925: PUSH
67926: LD_EXP 96
67930: PPUSH
67931: LD_VAR 0 5
67935: PUSH
67936: LD_EXP 96
67940: PUSH
67941: LD_VAR 0 5
67945: ARRAY
67946: PUSH
67947: LD_INT 1
67949: PLUS
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PPUSH
67955: LD_VAR 0 2
67959: PUSH
67960: LD_VAR 0 4
67964: ARRAY
67965: PUSH
67966: LD_VAR 0 2
67970: PUSH
67971: LD_VAR 0 4
67975: ARRAY
67976: PPUSH
67977: CALL_OW 255
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PPUSH
67986: CALL 13809 0 3
67990: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67991: LD_VAR 0 2
67995: PUSH
67996: LD_VAR 0 4
68000: ARRAY
68001: PPUSH
68002: LD_VAR 0 1
68006: PPUSH
68007: CALL_OW 255
68011: PPUSH
68012: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
68016: LD_VAR 0 2
68020: PUSH
68021: LD_VAR 0 4
68025: ARRAY
68026: PPUSH
68027: CALL_OW 141
// end ;
68031: GO 67863
68033: POP
68034: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68035: LD_VAR 0 1
68039: PPUSH
68040: LD_EXP 96
68044: PUSH
68045: LD_VAR 0 5
68049: ARRAY
68050: PUSH
68051: LD_INT 0
68053: PLUS
68054: PPUSH
68055: CALL_OW 505
// end ;
68059: LD_VAR 0 3
68063: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
68064: LD_INT 0
68066: PPUSH
68067: PPUSH
68068: PPUSH
68069: PPUSH
// if not hack in hackTanks then
68070: LD_VAR 0 1
68074: PUSH
68075: LD_EXP 95
68079: IN
68080: NOT
68081: IFFALSE 68085
// exit ;
68083: GO 68325
// index := GetElementIndex ( hackTanks , hack ) ;
68085: LD_ADDR_VAR 0 4
68089: PUSH
68090: LD_EXP 95
68094: PPUSH
68095: LD_VAR 0 1
68099: PPUSH
68100: CALL 13594 0 2
68104: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
68105: LD_ADDR_VAR 0 3
68109: PUSH
68110: DOUBLE
68111: LD_EXP 96
68115: PUSH
68116: LD_VAR 0 4
68120: ARRAY
68121: INC
68122: ST_TO_ADDR
68123: LD_INT 1
68125: PUSH
68126: FOR_DOWNTO
68127: IFFALSE 68299
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
68129: LD_ADDR_VAR 0 5
68133: PUSH
68134: LD_EXP 96
68138: PUSH
68139: LD_VAR 0 4
68143: ARRAY
68144: PUSH
68145: LD_VAR 0 3
68149: ARRAY
68150: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
68151: LD_VAR 0 5
68155: PUSH
68156: LD_INT 1
68158: ARRAY
68159: PPUSH
68160: CALL_OW 302
68164: NOT
68165: PUSH
68166: LD_VAR 0 5
68170: PUSH
68171: LD_INT 1
68173: ARRAY
68174: PPUSH
68175: CALL_OW 255
68179: PUSH
68180: LD_VAR 0 1
68184: PPUSH
68185: CALL_OW 255
68189: NONEQUAL
68190: OR
68191: IFFALSE 68297
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
68193: LD_VAR 0 5
68197: PUSH
68198: LD_INT 1
68200: ARRAY
68201: PPUSH
68202: CALL_OW 305
68206: PUSH
68207: LD_VAR 0 5
68211: PUSH
68212: LD_INT 1
68214: ARRAY
68215: PPUSH
68216: CALL_OW 255
68220: PUSH
68221: LD_VAR 0 1
68225: PPUSH
68226: CALL_OW 255
68230: EQUAL
68231: AND
68232: IFFALSE 68256
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
68234: LD_VAR 0 5
68238: PUSH
68239: LD_INT 1
68241: ARRAY
68242: PPUSH
68243: LD_VAR 0 5
68247: PUSH
68248: LD_INT 2
68250: ARRAY
68251: PPUSH
68252: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
68256: LD_ADDR_EXP 96
68260: PUSH
68261: LD_EXP 96
68265: PPUSH
68266: LD_VAR 0 4
68270: PPUSH
68271: LD_EXP 96
68275: PUSH
68276: LD_VAR 0 4
68280: ARRAY
68281: PPUSH
68282: LD_VAR 0 3
68286: PPUSH
68287: CALL_OW 3
68291: PPUSH
68292: CALL_OW 1
68296: ST_TO_ADDR
// end ; end ;
68297: GO 68126
68299: POP
68300: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68301: LD_VAR 0 1
68305: PPUSH
68306: LD_EXP 96
68310: PUSH
68311: LD_VAR 0 4
68315: ARRAY
68316: PUSH
68317: LD_INT 0
68319: PLUS
68320: PPUSH
68321: CALL_OW 505
// end ;
68325: LD_VAR 0 2
68329: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
68330: LD_INT 0
68332: PPUSH
68333: PPUSH
68334: PPUSH
68335: PPUSH
// if not hack in hackTanks then
68336: LD_VAR 0 1
68340: PUSH
68341: LD_EXP 95
68345: IN
68346: NOT
68347: IFFALSE 68351
// exit ;
68349: GO 68436
// index := GetElementIndex ( hackTanks , hack ) ;
68351: LD_ADDR_VAR 0 5
68355: PUSH
68356: LD_EXP 95
68360: PPUSH
68361: LD_VAR 0 1
68365: PPUSH
68366: CALL 13594 0 2
68370: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
68371: LD_ADDR_VAR 0 4
68375: PUSH
68376: DOUBLE
68377: LD_INT 1
68379: DEC
68380: ST_TO_ADDR
68381: LD_EXP 96
68385: PUSH
68386: LD_VAR 0 5
68390: ARRAY
68391: PUSH
68392: FOR_TO
68393: IFFALSE 68434
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
68395: LD_EXP 96
68399: PUSH
68400: LD_VAR 0 5
68404: ARRAY
68405: PUSH
68406: LD_VAR 0 4
68410: ARRAY
68411: PUSH
68412: LD_INT 1
68414: ARRAY
68415: PUSH
68416: LD_VAR 0 2
68420: EQUAL
68421: IFFALSE 68432
// KillUnit ( vehicle ) ;
68423: LD_VAR 0 2
68427: PPUSH
68428: CALL_OW 66
68432: GO 68392
68434: POP
68435: POP
// end ;
68436: LD_VAR 0 3
68440: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
68441: LD_EXP 100
68445: NOT
68446: IFFALSE 68481
68448: GO 68450
68450: DISABLE
// begin initMiner := true ;
68451: LD_ADDR_EXP 100
68455: PUSH
68456: LD_INT 1
68458: ST_TO_ADDR
// minersList := [ ] ;
68459: LD_ADDR_EXP 101
68463: PUSH
68464: EMPTY
68465: ST_TO_ADDR
// minerMinesList := [ ] ;
68466: LD_ADDR_EXP 102
68470: PUSH
68471: EMPTY
68472: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
68473: LD_ADDR_EXP 103
68477: PUSH
68478: LD_INT 5
68480: ST_TO_ADDR
// end ;
68481: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
68482: LD_EXP 100
68486: PUSH
68487: LD_INT 34
68489: PUSH
68490: LD_INT 81
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PPUSH
68497: CALL_OW 69
68501: AND
68502: IFFALSE 68963
68504: GO 68506
68506: DISABLE
68507: LD_INT 0
68509: PPUSH
68510: PPUSH
68511: PPUSH
68512: PPUSH
// begin enable ;
68513: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
68514: LD_ADDR_VAR 0 1
68518: PUSH
68519: LD_INT 34
68521: PUSH
68522: LD_INT 81
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PPUSH
68529: CALL_OW 69
68533: PUSH
68534: FOR_IN
68535: IFFALSE 68607
// begin if not i in minersList then
68537: LD_VAR 0 1
68541: PUSH
68542: LD_EXP 101
68546: IN
68547: NOT
68548: IFFALSE 68605
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68550: LD_ADDR_EXP 101
68554: PUSH
68555: LD_EXP 101
68559: PPUSH
68560: LD_EXP 101
68564: PUSH
68565: LD_INT 1
68567: PLUS
68568: PPUSH
68569: LD_VAR 0 1
68573: PPUSH
68574: CALL_OW 1
68578: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68579: LD_ADDR_EXP 102
68583: PUSH
68584: LD_EXP 102
68588: PPUSH
68589: LD_EXP 102
68593: PUSH
68594: LD_INT 1
68596: PLUS
68597: PPUSH
68598: EMPTY
68599: PPUSH
68600: CALL_OW 1
68604: ST_TO_ADDR
// end end ;
68605: GO 68534
68607: POP
68608: POP
// for i := minerMinesList downto 1 do
68609: LD_ADDR_VAR 0 1
68613: PUSH
68614: DOUBLE
68615: LD_EXP 102
68619: INC
68620: ST_TO_ADDR
68621: LD_INT 1
68623: PUSH
68624: FOR_DOWNTO
68625: IFFALSE 68961
// begin if IsLive ( minersList [ i ] ) then
68627: LD_EXP 101
68631: PUSH
68632: LD_VAR 0 1
68636: ARRAY
68637: PPUSH
68638: CALL_OW 300
68642: IFFALSE 68670
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
68644: LD_EXP 101
68648: PUSH
68649: LD_VAR 0 1
68653: ARRAY
68654: PPUSH
68655: LD_EXP 102
68659: PUSH
68660: LD_VAR 0 1
68664: ARRAY
68665: PPUSH
68666: CALL_OW 505
// if not minerMinesList [ i ] then
68670: LD_EXP 102
68674: PUSH
68675: LD_VAR 0 1
68679: ARRAY
68680: NOT
68681: IFFALSE 68685
// continue ;
68683: GO 68624
// for j := minerMinesList [ i ] downto 1 do
68685: LD_ADDR_VAR 0 2
68689: PUSH
68690: DOUBLE
68691: LD_EXP 102
68695: PUSH
68696: LD_VAR 0 1
68700: ARRAY
68701: INC
68702: ST_TO_ADDR
68703: LD_INT 1
68705: PUSH
68706: FOR_DOWNTO
68707: IFFALSE 68957
// begin side := GetSide ( minersList [ i ] ) ;
68709: LD_ADDR_VAR 0 3
68713: PUSH
68714: LD_EXP 101
68718: PUSH
68719: LD_VAR 0 1
68723: ARRAY
68724: PPUSH
68725: CALL_OW 255
68729: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68730: LD_ADDR_VAR 0 4
68734: PUSH
68735: LD_EXP 102
68739: PUSH
68740: LD_VAR 0 1
68744: ARRAY
68745: PUSH
68746: LD_VAR 0 2
68750: ARRAY
68751: PUSH
68752: LD_INT 1
68754: ARRAY
68755: PPUSH
68756: LD_EXP 102
68760: PUSH
68761: LD_VAR 0 1
68765: ARRAY
68766: PUSH
68767: LD_VAR 0 2
68771: ARRAY
68772: PUSH
68773: LD_INT 2
68775: ARRAY
68776: PPUSH
68777: CALL_OW 428
68781: ST_TO_ADDR
// if not tmp then
68782: LD_VAR 0 4
68786: NOT
68787: IFFALSE 68791
// continue ;
68789: GO 68706
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68791: LD_VAR 0 4
68795: PUSH
68796: LD_INT 81
68798: PUSH
68799: LD_VAR 0 3
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PPUSH
68808: CALL_OW 69
68812: IN
68813: PUSH
68814: LD_EXP 102
68818: PUSH
68819: LD_VAR 0 1
68823: ARRAY
68824: PUSH
68825: LD_VAR 0 2
68829: ARRAY
68830: PUSH
68831: LD_INT 1
68833: ARRAY
68834: PPUSH
68835: LD_EXP 102
68839: PUSH
68840: LD_VAR 0 1
68844: ARRAY
68845: PUSH
68846: LD_VAR 0 2
68850: ARRAY
68851: PUSH
68852: LD_INT 2
68854: ARRAY
68855: PPUSH
68856: CALL_OW 458
68860: AND
68861: IFFALSE 68955
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
68863: LD_EXP 102
68867: PUSH
68868: LD_VAR 0 1
68872: ARRAY
68873: PUSH
68874: LD_VAR 0 2
68878: ARRAY
68879: PUSH
68880: LD_INT 1
68882: ARRAY
68883: PPUSH
68884: LD_EXP 102
68888: PUSH
68889: LD_VAR 0 1
68893: ARRAY
68894: PUSH
68895: LD_VAR 0 2
68899: ARRAY
68900: PUSH
68901: LD_INT 2
68903: ARRAY
68904: PPUSH
68905: LD_VAR 0 3
68909: PPUSH
68910: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68914: LD_ADDR_EXP 102
68918: PUSH
68919: LD_EXP 102
68923: PPUSH
68924: LD_VAR 0 1
68928: PPUSH
68929: LD_EXP 102
68933: PUSH
68934: LD_VAR 0 1
68938: ARRAY
68939: PPUSH
68940: LD_VAR 0 2
68944: PPUSH
68945: CALL_OW 3
68949: PPUSH
68950: CALL_OW 1
68954: ST_TO_ADDR
// end ; end ;
68955: GO 68706
68957: POP
68958: POP
// end ;
68959: GO 68624
68961: POP
68962: POP
// end ;
68963: PPOPN 4
68965: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
68966: LD_INT 0
68968: PPUSH
68969: PPUSH
// result := false ;
68970: LD_ADDR_VAR 0 4
68974: PUSH
68975: LD_INT 0
68977: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68978: LD_VAR 0 1
68982: PPUSH
68983: CALL_OW 264
68987: PUSH
68988: LD_INT 81
68990: EQUAL
68991: NOT
68992: IFFALSE 68996
// exit ;
68994: GO 69236
// index := GetElementIndex ( minersList , unit ) ;
68996: LD_ADDR_VAR 0 5
69000: PUSH
69001: LD_EXP 101
69005: PPUSH
69006: LD_VAR 0 1
69010: PPUSH
69011: CALL 13594 0 2
69015: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
69016: LD_EXP 102
69020: PUSH
69021: LD_VAR 0 5
69025: ARRAY
69026: PUSH
69027: LD_EXP 103
69031: GREATEREQUAL
69032: IFFALSE 69036
// exit ;
69034: GO 69236
// ComMoveXY ( unit , x , y ) ;
69036: LD_VAR 0 1
69040: PPUSH
69041: LD_VAR 0 2
69045: PPUSH
69046: LD_VAR 0 3
69050: PPUSH
69051: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69055: LD_INT 35
69057: PPUSH
69058: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
69062: LD_VAR 0 1
69066: PPUSH
69067: LD_VAR 0 2
69071: PPUSH
69072: LD_VAR 0 3
69076: PPUSH
69077: CALL 44949 0 3
69081: NOT
69082: PUSH
69083: LD_VAR 0 1
69087: PPUSH
69088: CALL_OW 314
69092: AND
69093: IFFALSE 69097
// exit ;
69095: GO 69236
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
69097: LD_VAR 0 2
69101: PPUSH
69102: LD_VAR 0 3
69106: PPUSH
69107: CALL_OW 428
69111: PUSH
69112: LD_VAR 0 1
69116: EQUAL
69117: PUSH
69118: LD_VAR 0 1
69122: PPUSH
69123: CALL_OW 314
69127: NOT
69128: AND
69129: IFFALSE 69055
// PlaySoundXY ( x , y , PlantMine ) ;
69131: LD_VAR 0 2
69135: PPUSH
69136: LD_VAR 0 3
69140: PPUSH
69141: LD_STRING PlantMine
69143: PPUSH
69144: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
69148: LD_VAR 0 2
69152: PPUSH
69153: LD_VAR 0 3
69157: PPUSH
69158: LD_VAR 0 1
69162: PPUSH
69163: CALL_OW 255
69167: PPUSH
69168: LD_INT 0
69170: PPUSH
69171: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
69175: LD_ADDR_EXP 102
69179: PUSH
69180: LD_EXP 102
69184: PPUSH
69185: LD_VAR 0 5
69189: PUSH
69190: LD_EXP 102
69194: PUSH
69195: LD_VAR 0 5
69199: ARRAY
69200: PUSH
69201: LD_INT 1
69203: PLUS
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PPUSH
69209: LD_VAR 0 2
69213: PUSH
69214: LD_VAR 0 3
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PPUSH
69223: CALL 13809 0 3
69227: ST_TO_ADDR
// result := true ;
69228: LD_ADDR_VAR 0 4
69232: PUSH
69233: LD_INT 1
69235: ST_TO_ADDR
// end ;
69236: LD_VAR 0 4
69240: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
69241: LD_INT 0
69243: PPUSH
69244: PPUSH
69245: PPUSH
// if not unit in minersList then
69246: LD_VAR 0 1
69250: PUSH
69251: LD_EXP 101
69255: IN
69256: NOT
69257: IFFALSE 69261
// exit ;
69259: GO 69653
// index := GetElementIndex ( minersList , unit ) ;
69261: LD_ADDR_VAR 0 6
69265: PUSH
69266: LD_EXP 101
69270: PPUSH
69271: LD_VAR 0 1
69275: PPUSH
69276: CALL 13594 0 2
69280: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
69281: LD_ADDR_VAR 0 5
69285: PUSH
69286: DOUBLE
69287: LD_EXP 102
69291: PUSH
69292: LD_VAR 0 6
69296: ARRAY
69297: INC
69298: ST_TO_ADDR
69299: LD_INT 1
69301: PUSH
69302: FOR_DOWNTO
69303: IFFALSE 69464
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
69305: LD_EXP 102
69309: PUSH
69310: LD_VAR 0 6
69314: ARRAY
69315: PUSH
69316: LD_VAR 0 5
69320: ARRAY
69321: PUSH
69322: LD_INT 1
69324: ARRAY
69325: PUSH
69326: LD_VAR 0 2
69330: EQUAL
69331: PUSH
69332: LD_EXP 102
69336: PUSH
69337: LD_VAR 0 6
69341: ARRAY
69342: PUSH
69343: LD_VAR 0 5
69347: ARRAY
69348: PUSH
69349: LD_INT 2
69351: ARRAY
69352: PUSH
69353: LD_VAR 0 3
69357: EQUAL
69358: AND
69359: IFFALSE 69462
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69361: LD_EXP 102
69365: PUSH
69366: LD_VAR 0 6
69370: ARRAY
69371: PUSH
69372: LD_VAR 0 5
69376: ARRAY
69377: PUSH
69378: LD_INT 1
69380: ARRAY
69381: PPUSH
69382: LD_EXP 102
69386: PUSH
69387: LD_VAR 0 6
69391: ARRAY
69392: PUSH
69393: LD_VAR 0 5
69397: ARRAY
69398: PUSH
69399: LD_INT 2
69401: ARRAY
69402: PPUSH
69403: LD_VAR 0 1
69407: PPUSH
69408: CALL_OW 255
69412: PPUSH
69413: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69417: LD_ADDR_EXP 102
69421: PUSH
69422: LD_EXP 102
69426: PPUSH
69427: LD_VAR 0 6
69431: PPUSH
69432: LD_EXP 102
69436: PUSH
69437: LD_VAR 0 6
69441: ARRAY
69442: PPUSH
69443: LD_VAR 0 5
69447: PPUSH
69448: CALL_OW 3
69452: PPUSH
69453: CALL_OW 1
69457: ST_TO_ADDR
// exit ;
69458: POP
69459: POP
69460: GO 69653
// end ; end ;
69462: GO 69302
69464: POP
69465: POP
// for i := minerMinesList [ index ] downto 1 do
69466: LD_ADDR_VAR 0 5
69470: PUSH
69471: DOUBLE
69472: LD_EXP 102
69476: PUSH
69477: LD_VAR 0 6
69481: ARRAY
69482: INC
69483: ST_TO_ADDR
69484: LD_INT 1
69486: PUSH
69487: FOR_DOWNTO
69488: IFFALSE 69651
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
69490: LD_EXP 102
69494: PUSH
69495: LD_VAR 0 6
69499: ARRAY
69500: PUSH
69501: LD_VAR 0 5
69505: ARRAY
69506: PUSH
69507: LD_INT 1
69509: ARRAY
69510: PPUSH
69511: LD_EXP 102
69515: PUSH
69516: LD_VAR 0 6
69520: ARRAY
69521: PUSH
69522: LD_VAR 0 5
69526: ARRAY
69527: PUSH
69528: LD_INT 2
69530: ARRAY
69531: PPUSH
69532: LD_VAR 0 2
69536: PPUSH
69537: LD_VAR 0 3
69541: PPUSH
69542: CALL_OW 298
69546: PUSH
69547: LD_INT 6
69549: LESS
69550: IFFALSE 69649
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69552: LD_EXP 102
69556: PUSH
69557: LD_VAR 0 6
69561: ARRAY
69562: PUSH
69563: LD_VAR 0 5
69567: ARRAY
69568: PUSH
69569: LD_INT 1
69571: ARRAY
69572: PPUSH
69573: LD_EXP 102
69577: PUSH
69578: LD_VAR 0 6
69582: ARRAY
69583: PUSH
69584: LD_VAR 0 5
69588: ARRAY
69589: PUSH
69590: LD_INT 2
69592: ARRAY
69593: PPUSH
69594: LD_VAR 0 1
69598: PPUSH
69599: CALL_OW 255
69603: PPUSH
69604: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69608: LD_ADDR_EXP 102
69612: PUSH
69613: LD_EXP 102
69617: PPUSH
69618: LD_VAR 0 6
69622: PPUSH
69623: LD_EXP 102
69627: PUSH
69628: LD_VAR 0 6
69632: ARRAY
69633: PPUSH
69634: LD_VAR 0 5
69638: PPUSH
69639: CALL_OW 3
69643: PPUSH
69644: CALL_OW 1
69648: ST_TO_ADDR
// end ; end ;
69649: GO 69487
69651: POP
69652: POP
// end ;
69653: LD_VAR 0 4
69657: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69658: LD_INT 0
69660: PPUSH
69661: PPUSH
69662: PPUSH
69663: PPUSH
69664: PPUSH
69665: PPUSH
69666: PPUSH
69667: PPUSH
69668: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69669: LD_VAR 0 1
69673: PPUSH
69674: CALL_OW 264
69678: PUSH
69679: LD_INT 81
69681: EQUAL
69682: NOT
69683: PUSH
69684: LD_VAR 0 1
69688: PUSH
69689: LD_EXP 101
69693: IN
69694: NOT
69695: OR
69696: IFFALSE 69700
// exit ;
69698: GO 70022
// index := GetElementIndex ( minersList , unit ) ;
69700: LD_ADDR_VAR 0 6
69704: PUSH
69705: LD_EXP 101
69709: PPUSH
69710: LD_VAR 0 1
69714: PPUSH
69715: CALL 13594 0 2
69719: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69720: LD_ADDR_VAR 0 8
69724: PUSH
69725: LD_EXP 103
69729: PUSH
69730: LD_EXP 102
69734: PUSH
69735: LD_VAR 0 6
69739: ARRAY
69740: MINUS
69741: ST_TO_ADDR
// if not minesFreeAmount then
69742: LD_VAR 0 8
69746: NOT
69747: IFFALSE 69751
// exit ;
69749: GO 70022
// tmp := [ ] ;
69751: LD_ADDR_VAR 0 7
69755: PUSH
69756: EMPTY
69757: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69758: LD_ADDR_VAR 0 5
69762: PUSH
69763: DOUBLE
69764: LD_INT 1
69766: DEC
69767: ST_TO_ADDR
69768: LD_VAR 0 8
69772: PUSH
69773: FOR_TO
69774: IFFALSE 69969
// begin _d := rand ( 0 , 5 ) ;
69776: LD_ADDR_VAR 0 11
69780: PUSH
69781: LD_INT 0
69783: PPUSH
69784: LD_INT 5
69786: PPUSH
69787: CALL_OW 12
69791: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69792: LD_ADDR_VAR 0 12
69796: PUSH
69797: LD_INT 2
69799: PPUSH
69800: LD_INT 6
69802: PPUSH
69803: CALL_OW 12
69807: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69808: LD_ADDR_VAR 0 9
69812: PUSH
69813: LD_VAR 0 2
69817: PPUSH
69818: LD_VAR 0 11
69822: PPUSH
69823: LD_VAR 0 12
69827: PPUSH
69828: CALL_OW 272
69832: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
69833: LD_ADDR_VAR 0 10
69837: PUSH
69838: LD_VAR 0 3
69842: PPUSH
69843: LD_VAR 0 11
69847: PPUSH
69848: LD_VAR 0 12
69852: PPUSH
69853: CALL_OW 273
69857: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
69858: LD_VAR 0 9
69862: PPUSH
69863: LD_VAR 0 10
69867: PPUSH
69868: CALL_OW 488
69872: PUSH
69873: LD_VAR 0 9
69877: PUSH
69878: LD_VAR 0 10
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_VAR 0 7
69891: IN
69892: NOT
69893: AND
69894: PUSH
69895: LD_VAR 0 9
69899: PPUSH
69900: LD_VAR 0 10
69904: PPUSH
69905: CALL_OW 458
69909: NOT
69910: AND
69911: IFFALSE 69953
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
69913: LD_ADDR_VAR 0 7
69917: PUSH
69918: LD_VAR 0 7
69922: PPUSH
69923: LD_VAR 0 7
69927: PUSH
69928: LD_INT 1
69930: PLUS
69931: PPUSH
69932: LD_VAR 0 9
69936: PUSH
69937: LD_VAR 0 10
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PPUSH
69946: CALL_OW 1
69950: ST_TO_ADDR
69951: GO 69967
// i := i - 1 ;
69953: LD_ADDR_VAR 0 5
69957: PUSH
69958: LD_VAR 0 5
69962: PUSH
69963: LD_INT 1
69965: MINUS
69966: ST_TO_ADDR
// end ;
69967: GO 69773
69969: POP
69970: POP
// for i in tmp do
69971: LD_ADDR_VAR 0 5
69975: PUSH
69976: LD_VAR 0 7
69980: PUSH
69981: FOR_IN
69982: IFFALSE 70020
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69984: LD_VAR 0 1
69988: PPUSH
69989: LD_VAR 0 5
69993: PUSH
69994: LD_INT 1
69996: ARRAY
69997: PPUSH
69998: LD_VAR 0 5
70002: PUSH
70003: LD_INT 2
70005: ARRAY
70006: PPUSH
70007: CALL 68966 0 3
70011: NOT
70012: IFFALSE 70018
// exit ;
70014: POP
70015: POP
70016: GO 70022
70018: GO 69981
70020: POP
70021: POP
// end ;
70022: LD_VAR 0 4
70026: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
70027: LD_INT 0
70029: PPUSH
70030: PPUSH
70031: PPUSH
70032: PPUSH
70033: PPUSH
70034: PPUSH
70035: PPUSH
// if not GetClass ( unit ) = class_sniper then
70036: LD_VAR 0 1
70040: PPUSH
70041: CALL_OW 257
70045: PUSH
70046: LD_INT 5
70048: EQUAL
70049: NOT
70050: IFFALSE 70054
// exit ;
70052: GO 70442
// dist := 8 ;
70054: LD_ADDR_VAR 0 5
70058: PUSH
70059: LD_INT 8
70061: ST_TO_ADDR
// viewRange := 12 ;
70062: LD_ADDR_VAR 0 7
70066: PUSH
70067: LD_INT 12
70069: ST_TO_ADDR
// side := GetSide ( unit ) ;
70070: LD_ADDR_VAR 0 6
70074: PUSH
70075: LD_VAR 0 1
70079: PPUSH
70080: CALL_OW 255
70084: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
70085: LD_INT 61
70087: PPUSH
70088: LD_VAR 0 6
70092: PPUSH
70093: CALL_OW 321
70097: PUSH
70098: LD_INT 2
70100: EQUAL
70101: IFFALSE 70111
// viewRange := 16 ;
70103: LD_ADDR_VAR 0 7
70107: PUSH
70108: LD_INT 16
70110: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
70111: LD_VAR 0 1
70115: PPUSH
70116: LD_VAR 0 2
70120: PPUSH
70121: LD_VAR 0 3
70125: PPUSH
70126: CALL_OW 297
70130: PUSH
70131: LD_VAR 0 5
70135: GREATER
70136: IFFALSE 70215
// begin ComMoveXY ( unit , x , y ) ;
70138: LD_VAR 0 1
70142: PPUSH
70143: LD_VAR 0 2
70147: PPUSH
70148: LD_VAR 0 3
70152: PPUSH
70153: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70157: LD_INT 35
70159: PPUSH
70160: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
70164: LD_VAR 0 1
70168: PPUSH
70169: LD_VAR 0 2
70173: PPUSH
70174: LD_VAR 0 3
70178: PPUSH
70179: CALL 44949 0 3
70183: NOT
70184: IFFALSE 70188
// exit ;
70186: GO 70442
// until GetDistUnitXY ( unit , x , y ) < dist ;
70188: LD_VAR 0 1
70192: PPUSH
70193: LD_VAR 0 2
70197: PPUSH
70198: LD_VAR 0 3
70202: PPUSH
70203: CALL_OW 297
70207: PUSH
70208: LD_VAR 0 5
70212: LESS
70213: IFFALSE 70157
// end ; ComTurnXY ( unit , x , y ) ;
70215: LD_VAR 0 1
70219: PPUSH
70220: LD_VAR 0 2
70224: PPUSH
70225: LD_VAR 0 3
70229: PPUSH
70230: CALL_OW 118
// wait ( 5 ) ;
70234: LD_INT 5
70236: PPUSH
70237: CALL_OW 67
// _d := GetDir ( unit ) ;
70241: LD_ADDR_VAR 0 10
70245: PUSH
70246: LD_VAR 0 1
70250: PPUSH
70251: CALL_OW 254
70255: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
70256: LD_ADDR_VAR 0 8
70260: PUSH
70261: LD_VAR 0 1
70265: PPUSH
70266: CALL_OW 250
70270: PPUSH
70271: LD_VAR 0 10
70275: PPUSH
70276: LD_VAR 0 5
70280: PPUSH
70281: CALL_OW 272
70285: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
70286: LD_ADDR_VAR 0 9
70290: PUSH
70291: LD_VAR 0 1
70295: PPUSH
70296: CALL_OW 251
70300: PPUSH
70301: LD_VAR 0 10
70305: PPUSH
70306: LD_VAR 0 5
70310: PPUSH
70311: CALL_OW 273
70315: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70316: LD_VAR 0 8
70320: PPUSH
70321: LD_VAR 0 9
70325: PPUSH
70326: CALL_OW 488
70330: NOT
70331: IFFALSE 70335
// exit ;
70333: GO 70442
// ComAnimCustom ( unit , 1 ) ;
70335: LD_VAR 0 1
70339: PPUSH
70340: LD_INT 1
70342: PPUSH
70343: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
70347: LD_VAR 0 8
70351: PPUSH
70352: LD_VAR 0 9
70356: PPUSH
70357: LD_VAR 0 6
70361: PPUSH
70362: LD_VAR 0 7
70366: PPUSH
70367: CALL_OW 330
// repeat wait ( 1 ) ;
70371: LD_INT 1
70373: PPUSH
70374: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
70378: LD_VAR 0 1
70382: PPUSH
70383: CALL_OW 316
70387: PUSH
70388: LD_VAR 0 1
70392: PPUSH
70393: CALL_OW 314
70397: OR
70398: PUSH
70399: LD_VAR 0 1
70403: PPUSH
70404: CALL_OW 302
70408: NOT
70409: OR
70410: PUSH
70411: LD_VAR 0 1
70415: PPUSH
70416: CALL_OW 301
70420: OR
70421: IFFALSE 70371
// RemoveSeeing ( _x , _y , side ) ;
70423: LD_VAR 0 8
70427: PPUSH
70428: LD_VAR 0 9
70432: PPUSH
70433: LD_VAR 0 6
70437: PPUSH
70438: CALL_OW 331
// end ;
70442: LD_VAR 0 4
70446: RET
