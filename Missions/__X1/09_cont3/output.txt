// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 10304 0 0
// LoadEnv ;
  16: CALL 9861 0 0
// LoadCam ;
  20: CALL 10568 0 0
// LoadTech ;
  24: CALL 10644 0 0
// LoadBase ;
  28: CALL 11130 0 0
// PrepareArabian ;
  32: CALL 186 0 0
// PrepareRussian ;
  36: CALL 3052 0 0
// Action ;
  40: CALL 12442 0 0
// end ;
  44: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; export wave , strength ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 09c_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 09c_
  63: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 09_tick
  71: PPUSH
  72: LD_INT 31500
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 09c_tick
  87: PPUSH
  88: LD_INT 10500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// playerInBase := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// kamikazeTrained := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// apeDriver := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 120
 127: PUSH
 128: LD_INT 150
 130: PUSH
 131: LD_INT 180
 133: PUSH
 134: LD_INT 220
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// missionTime := 0 0$00 ;
 149: LD_ADDR_EXP 9
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// ruDefeated := false ;
 157: LD_ADDR_EXP 10
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// wave := 0 ;
 165: LD_ADDR_EXP 11
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// strength := 0 ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ; end_of_file
 181: LD_VAR 0 1
 185: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 197: LD_STRING 05_DrugsTested
 199: PPUSH
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 30
 209: IFFALSE 224
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 211: LD_INT 5
 213: PPUSH
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 2
 219: PPUSH
 220: CALL_OW 322
// uc_side := 2 ;
 224: LD_ADDR_OWVAR 20
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// uc_nation := nation_nature ;
 232: LD_ADDR_OWVAR 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 240: LD_ADDR_VAR 0 3
 244: PUSH
 245: LD_STRING 09_apes
 247: PPUSH
 248: CALL_OW 31
 252: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 253: LD_ADDR_VAR 0 6
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 30
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: ST_TO_ADDR
// if apes then
 305: LD_VAR 0 3
 309: IFFALSE 388
// for i in apes do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: LD_VAR 0 3
 320: PUSH
 321: FOR_IN
 322: IFFALSE 386
// if UnitsInside ( b [ 1 ] ) < 6 then
 324: LD_VAR 0 6
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: CALL_OW 313
 337: PUSH
 338: LD_INT 6
 340: LESS
 341: IFFALSE 363
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_VAR 0 6
 352: PUSH
 353: LD_INT 1
 355: ARRAY
 356: PPUSH
 357: CALL_OW 52
 361: GO 384
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 363: LD_VAR 0 2
 367: PPUSH
 368: LD_INT 82
 370: PPUSH
 371: LD_INT 27
 373: PPUSH
 374: LD_INT 6
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 50
 384: GO 321
 386: POP
 387: POP
// InitHC_All ( ) ;
 388: CALL_OW 584
// uc_nation := nation_arabian ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 2
 399: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 400: LD_ADDR_VAR 0 6
 404: PUSH
 405: LD_INT 22
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 5
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 474: LD_ADDR_EXP 33
 478: PUSH
 479: LD_STRING Rolf
 481: PPUSH
 482: LD_EXP 1
 486: NOT
 487: PPUSH
 488: LD_STRING 06_
 490: PPUSH
 491: CALL 15653 0 3
 495: ST_TO_ADDR
// if Rolf then
 496: LD_EXP 33
 500: IFFALSE 709
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 502: LD_ADDR_EXP 32
 506: PUSH
 507: LD_STRING 06_RolfSquad
 509: PPUSH
 510: CALL_OW 31
 514: ST_TO_ADDR
// if rolfSquad < 3 then
 515: LD_EXP 32
 519: PUSH
 520: LD_INT 3
 522: LESS
 523: IFFALSE 586
// for i := 1 to 3 - Count ( rolfSquad ) do
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: DOUBLE
 531: LD_INT 1
 533: DEC
 534: ST_TO_ADDR
 535: LD_INT 3
 537: PUSH
 538: LD_EXP 32
 542: PPUSH
 543: CALL 17877 0 1
 547: MINUS
 548: PUSH
 549: FOR_TO
 550: IFFALSE 584
// begin PrepareSoldier ( false , 4 ) ;
 552: LD_INT 0
 554: PPUSH
 555: LD_INT 4
 557: PPUSH
 558: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 562: LD_ADDR_EXP 32
 566: PUSH
 567: LD_EXP 32
 571: PPUSH
 572: CALL_OW 44
 576: PPUSH
 577: CALL 53853 0 2
 581: ST_TO_ADDR
// end ;
 582: GO 549
 584: POP
 585: POP
// if b then
 586: LD_VAR 0 6
 590: IFFALSE 665
// begin for i in rolfSquad union Rolf do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_EXP 32
 601: PUSH
 602: LD_EXP 33
 606: UNION
 607: PUSH
 608: FOR_IN
 609: IFFALSE 661
// begin SetClass ( i , 1 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_VAR 0 6
 632: PPUSH
 633: LD_INT 3
 635: PUSH
 636: LD_INT 62
 638: PUSH
 639: EMPTY
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 52
// end ;
 659: GO 608
 661: POP
 662: POP
// end else
 663: GO 709
// for i in rolfSquad union Rolf do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_EXP 32
 674: PUSH
 675: LD_EXP 33
 679: UNION
 680: PUSH
 681: FOR_IN
 682: IFFALSE 707
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 684: LD_VAR 0 2
 688: PPUSH
 689: LD_INT 82
 691: PPUSH
 692: LD_INT 27
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 50
 705: GO 681
 707: POP
 708: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 13
 713: PUSH
 714: LD_STRING Heike
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 15653 0 3
 732: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 16
 737: PUSH
 738: LD_STRING Ibrahim
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 15653 0 3
 756: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 14
 761: PUSH
 762: LD_STRING Givi
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 15653 0 3
 780: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 17
 785: PUSH
 786: LD_STRING Kamil
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 15653 0 3
 804: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 18
 809: PUSH
 810: LD_STRING Kaia
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 15653 0 3
 828: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 19
 833: PUSH
 834: LD_STRING Sophia
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 15653 0 3
 852: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 20
 857: PUSH
 858: LD_STRING Markov
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 15653 0 3
 876: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 23
 881: PUSH
 882: LD_STRING Aviradze
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 15653 0 3
 900: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 22
 905: PUSH
 906: LD_STRING Kurt
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 15653 0 3
 924: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_STRING Mike
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 15653 0 3
 948: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 21
 953: PUSH
 954: LD_STRING Olaf
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 15653 0 3
 972: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 973: LD_ADDR_EXP 30
 977: PUSH
 978: LD_STRING 09c_heikeSecondSquad
 980: PPUSH
 981: CALL_OW 31
 985: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 986: LD_ADDR_EXP 24
 990: PUSH
 991: LD_STRING Schulz
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_EXP 2
1004: PPUSH
1005: CALL 15653 0 3
1009: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
1010: LD_ADDR_EXP 25
1014: PUSH
1015: LD_STRING Basim
1017: PPUSH
1018: LD_EXP 1
1022: NOT
1023: PPUSH
1024: LD_EXP 2
1028: PPUSH
1029: CALL 15653 0 3
1033: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1034: LD_ADDR_EXP 26
1038: PUSH
1039: LD_STRING Lemmy
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 2
1052: PPUSH
1053: CALL 15653 0 3
1057: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1058: LD_ADDR_EXP 27
1062: PUSH
1063: LD_STRING Mia
1065: PPUSH
1066: LD_EXP 1
1070: NOT
1071: PPUSH
1072: LD_EXP 2
1076: PPUSH
1077: CALL 15653 0 3
1081: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1082: LD_ADDR_EXP 28
1086: PUSH
1087: LD_STRING Nia
1089: PPUSH
1090: LD_EXP 1
1094: NOT
1095: PPUSH
1096: LD_EXP 2
1100: PPUSH
1101: CALL 15653 0 3
1105: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1106: LD_ADDR_EXP 29
1110: PUSH
1111: LD_STRING Jenna
1113: PPUSH
1114: LD_EXP 1
1118: NOT
1119: PPUSH
1120: LD_EXP 2
1124: PPUSH
1125: CALL 15653 0 3
1129: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING 09c_schulzSecondSquad
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// if debug then
1143: LD_EXP 1
1147: IFFALSE 1227
// begin schulzSecondSquad := [ ] ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: EMPTY
1155: ST_TO_ADDR
// for i := 1 to 3 do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_INT 3
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1225
// begin uc_side := 2 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
// uc_nation := nation_arabian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 2
1187: ST_TO_ADDR
// PrepareHuman ( false , i , 0 ) ;
1188: LD_INT 0
1190: PPUSH
1191: LD_VAR 0 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PPUSH
1213: CALL_OW 44
1217: PPUSH
1218: CALL 53853 0 2
1222: ST_TO_ADDR
// end ;
1223: GO 1169
1225: POP
1226: POP
// end ; vehicles := LoadVariable ( 09c_vehicles , [ [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 36 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 41 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 37 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 35 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 34 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 38 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 40 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 39 ] ] ) ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_STRING 09c_vehicles
1234: PPUSH
1235: LD_INT 13
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 28
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 36
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 13
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 28
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 0
1289: PUSH
1290: LD_INT 41
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 13
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: LD_INT 28
1314: PUSH
1315: LD_INT 2
1317: PUSH
1318: LD_INT 0
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 37
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 13
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 28
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 35
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 13
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 28
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: LD_INT 34
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 13
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 28
1416: PUSH
1417: LD_INT 2
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 38
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 13
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 28
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 40
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 13
1475: PUSH
1476: LD_INT 3
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 28
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 39
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 30
1521: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Heike , LoadVariable ( 09c_Heike_ID , - 1 ) , vehicles ) ;
1522: LD_ADDR_VAR 0 9
1526: PUSH
1527: LD_VAR 0 9
1531: PUSH
1532: LD_EXP 13
1536: PPUSH
1537: LD_STRING 09c_Heike_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2764 0 3
1558: DIFF
1559: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Givi , LoadVariable ( 09c_Givi_ID , - 1 ) , vehicles ) ;
1560: LD_ADDR_VAR 0 9
1564: PUSH
1565: LD_VAR 0 9
1569: PUSH
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING 09c_Givi_ID
1577: PPUSH
1578: LD_INT 1
1580: NEG
1581: PPUSH
1582: CALL_OW 30
1586: PPUSH
1587: LD_VAR 0 9
1591: PPUSH
1592: CALL 2764 0 3
1596: DIFF
1597: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mike , LoadVariable ( 09c_Mike_ID , - 1 ) , vehicles ) ;
1598: LD_ADDR_VAR 0 9
1602: PUSH
1603: LD_VAR 0 9
1607: PUSH
1608: LD_EXP 15
1612: PPUSH
1613: LD_STRING 09c_Mike_ID
1615: PPUSH
1616: LD_INT 1
1618: NEG
1619: PPUSH
1620: CALL_OW 30
1624: PPUSH
1625: LD_VAR 0 9
1629: PPUSH
1630: CALL 2764 0 3
1634: DIFF
1635: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Ibrahim , LoadVariable ( 09c_Ibrahim_ID , - 1 ) , vehicles ) ;
1636: LD_ADDR_VAR 0 9
1640: PUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_EXP 16
1650: PPUSH
1651: LD_STRING 09c_Ibrahim_ID
1653: PPUSH
1654: LD_INT 1
1656: NEG
1657: PPUSH
1658: CALL_OW 30
1662: PPUSH
1663: LD_VAR 0 9
1667: PPUSH
1668: CALL 2764 0 3
1672: DIFF
1673: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kamil , LoadVariable ( 09c_Kamil_ID , - 1 ) , vehicles ) ;
1674: LD_ADDR_VAR 0 9
1678: PUSH
1679: LD_VAR 0 9
1683: PUSH
1684: LD_EXP 17
1688: PPUSH
1689: LD_STRING 09c_Kamil_ID
1691: PPUSH
1692: LD_INT 1
1694: NEG
1695: PPUSH
1696: CALL_OW 30
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL 2764 0 3
1710: DIFF
1711: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kaia , LoadVariable ( 09c_Kaia_ID , - 1 ) , vehicles ) ;
1712: LD_ADDR_VAR 0 9
1716: PUSH
1717: LD_VAR 0 9
1721: PUSH
1722: LD_EXP 18
1726: PPUSH
1727: LD_STRING 09c_Kaia_ID
1729: PPUSH
1730: LD_INT 1
1732: NEG
1733: PPUSH
1734: CALL_OW 30
1738: PPUSH
1739: LD_VAR 0 9
1743: PPUSH
1744: CALL 2764 0 3
1748: DIFF
1749: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Sophia , LoadVariable ( 09c_Sophia_ID , - 1 ) , vehicles ) ;
1750: LD_ADDR_VAR 0 9
1754: PUSH
1755: LD_VAR 0 9
1759: PUSH
1760: LD_EXP 19
1764: PPUSH
1765: LD_STRING 09c_Sophia_ID
1767: PPUSH
1768: LD_INT 1
1770: NEG
1771: PPUSH
1772: CALL_OW 30
1776: PPUSH
1777: LD_VAR 0 9
1781: PPUSH
1782: CALL 2764 0 3
1786: DIFF
1787: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Markov , LoadVariable ( 09c_Markov_ID , - 1 ) , vehicles ) ;
1788: LD_ADDR_VAR 0 9
1792: PUSH
1793: LD_VAR 0 9
1797: PUSH
1798: LD_EXP 20
1802: PPUSH
1803: LD_STRING 09c_Markov_ID
1805: PPUSH
1806: LD_INT 1
1808: NEG
1809: PPUSH
1810: CALL_OW 30
1814: PPUSH
1815: LD_VAR 0 9
1819: PPUSH
1820: CALL 2764 0 3
1824: DIFF
1825: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Olaf , LoadVariable ( 09c_Olaf_ID , - 1 ) , vehicles ) ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_VAR 0 9
1835: PUSH
1836: LD_EXP 21
1840: PPUSH
1841: LD_STRING 09c_Olaf_ID
1843: PPUSH
1844: LD_INT 1
1846: NEG
1847: PPUSH
1848: CALL_OW 30
1852: PPUSH
1853: LD_VAR 0 9
1857: PPUSH
1858: CALL 2764 0 3
1862: DIFF
1863: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kurt , LoadVariable ( 09c_Kurt_ID , - 1 ) , vehicles ) ;
1864: LD_ADDR_VAR 0 9
1868: PUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_STRING 09c_Kurt_ID
1881: PPUSH
1882: LD_INT 1
1884: NEG
1885: PPUSH
1886: CALL_OW 30
1890: PPUSH
1891: LD_VAR 0 9
1895: PPUSH
1896: CALL 2764 0 3
1900: DIFF
1901: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Aviradze , LoadVariable ( 09c_Aviradze_ID , - 1 ) , vehicles ) ;
1902: LD_ADDR_VAR 0 9
1906: PUSH
1907: LD_VAR 0 9
1911: PUSH
1912: LD_EXP 23
1916: PPUSH
1917: LD_STRING 09c_Aviradze_ID
1919: PPUSH
1920: LD_INT 1
1922: NEG
1923: PPUSH
1924: CALL_OW 30
1928: PPUSH
1929: LD_VAR 0 9
1933: PPUSH
1934: CALL 2764 0 3
1938: DIFF
1939: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Schulz , LoadVariable ( 09c_Schulz_ID , 34 ) , vehicles ) ;
1940: LD_ADDR_VAR 0 9
1944: PUSH
1945: LD_VAR 0 9
1949: PUSH
1950: LD_EXP 24
1954: PPUSH
1955: LD_STRING 09c_Schulz_ID
1957: PPUSH
1958: LD_INT 34
1960: PPUSH
1961: CALL_OW 30
1965: PPUSH
1966: LD_VAR 0 9
1970: PPUSH
1971: CALL 2764 0 3
1975: DIFF
1976: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Lemmy , LoadVariable ( 09c_Lemmy_ID , 35 ) , vehicles ) ;
1977: LD_ADDR_VAR 0 9
1981: PUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_EXP 26
1991: PPUSH
1992: LD_STRING 09c_Lemmy_ID
1994: PPUSH
1995: LD_INT 35
1997: PPUSH
1998: CALL_OW 30
2002: PPUSH
2003: LD_VAR 0 9
2007: PPUSH
2008: CALL 2764 0 3
2012: DIFF
2013: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mia , LoadVariable ( 09c_Mia_ID , 36 ) , vehicles ) ;
2014: LD_ADDR_VAR 0 9
2018: PUSH
2019: LD_VAR 0 9
2023: PUSH
2024: LD_EXP 27
2028: PPUSH
2029: LD_STRING 09c_Mia_ID
2031: PPUSH
2032: LD_INT 36
2034: PPUSH
2035: CALL_OW 30
2039: PPUSH
2040: LD_VAR 0 9
2044: PPUSH
2045: CALL 2764 0 3
2049: DIFF
2050: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Nia , LoadVariable ( 09c_Nia_ID , 37 ) , vehicles ) ;
2051: LD_ADDR_VAR 0 9
2055: PUSH
2056: LD_VAR 0 9
2060: PUSH
2061: LD_EXP 28
2065: PPUSH
2066: LD_STRING 09c_Nia_ID
2068: PPUSH
2069: LD_INT 37
2071: PPUSH
2072: CALL_OW 30
2076: PPUSH
2077: LD_VAR 0 9
2081: PPUSH
2082: CALL 2764 0 3
2086: DIFF
2087: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Jenna , LoadVariable ( 09c_Jenna_ID , 38 ) , vehicles ) ;
2088: LD_ADDR_VAR 0 9
2092: PUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_EXP 29
2102: PPUSH
2103: LD_STRING 09c_Jenna_ID
2105: PPUSH
2106: LD_INT 38
2108: PPUSH
2109: CALL_OW 30
2113: PPUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: CALL 2764 0 3
2123: DIFF
2124: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Basim , LoadVariable ( 09c_Basim_ID , - 1 ) , vehicles ) ;
2125: LD_ADDR_VAR 0 9
2129: PUSH
2130: LD_VAR 0 9
2134: PUSH
2135: LD_EXP 25
2139: PPUSH
2140: LD_STRING 09c_Basim_ID
2142: PPUSH
2143: LD_INT 1
2145: NEG
2146: PPUSH
2147: CALL_OW 30
2151: PPUSH
2152: LD_VAR 0 9
2156: PPUSH
2157: CALL 2764 0 3
2161: DIFF
2162: ST_TO_ADDR
// for i := 1 to schulzSecondSquad do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_EXP 31
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2238
// vehicles := vehicles diff SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 38 + i ) , vehicles ) ;
2181: LD_ADDR_VAR 0 9
2185: PUSH
2186: LD_VAR 0 9
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_VAR 0 2
2200: ARRAY
2201: PPUSH
2202: LD_STRING 09c_random_ID_
2204: PUSH
2205: LD_VAR 0 2
2209: STR
2210: PPUSH
2211: LD_INT 38
2213: PUSH
2214: LD_VAR 0 2
2218: PLUS
2219: PPUSH
2220: CALL_OW 30
2224: PPUSH
2225: LD_VAR 0 9
2229: PPUSH
2230: CALL 2764 0 3
2234: DIFF
2235: ST_TO_ADDR
2236: GO 2178
2238: POP
2239: POP
// for i := 1 to heikeSecondSquad do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 30
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2310
// vehicles := vehicles diff SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_hrandom_ID_ & i , - 1 ) , vehicles ) ;
2258: LD_ADDR_VAR 0 9
2262: PUSH
2263: LD_VAR 0 9
2267: PUSH
2268: LD_EXP 30
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_STRING 09c_hrandom_ID_
2281: PUSH
2282: LD_VAR 0 2
2286: STR
2287: PPUSH
2288: LD_INT 1
2290: NEG
2291: PPUSH
2292: CALL_OW 30
2296: PPUSH
2297: LD_VAR 0 9
2301: PPUSH
2302: CALL 2764 0 3
2306: DIFF
2307: ST_TO_ADDR
2308: GO 2255
2310: POP
2311: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2312: LD_INT 22
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 34
2324: PUSH
2325: LD_INT 31
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: IFFALSE 2543
// begin for j := Count ( vehicles ) downto 1 do
2342: LD_ADDR_VAR 0 7
2346: PUSH
2347: DOUBLE
2348: LD_VAR 0 9
2352: PPUSH
2353: CALL 17877 0 1
2357: INC
2358: ST_TO_ADDR
2359: LD_INT 1
2361: PUSH
2362: FOR_DOWNTO
2363: IFFALSE 2541
// begin i := vehicles [ j ] ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 9
2374: PUSH
2375: LD_VAR 0 7
2379: ARRAY
2380: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2381: LD_VAR 0 2
2385: PUSH
2386: LD_INT 3
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: IFFALSE 2539
// begin uc_side := 2 ;
2395: LD_ADDR_OWVAR 20
2399: PUSH
2400: LD_INT 2
2402: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2403: LD_ADDR_OWVAR 21
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 5
2415: ARRAY
2416: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 2
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 6
2460: ARRAY
2461: PPUSH
2462: CALL 20673 0 5
// veh := CreateVehicle ;
2466: LD_ADDR_VAR 0 8
2470: PUSH
2471: CALL_OW 45
2475: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2488: LD_VAR 0 8
2492: PPUSH
2493: LD_INT 7
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2503: LD_ADDR_VAR 0 9
2507: PUSH
2508: LD_VAR 0 9
2512: PPUSH
2513: LD_VAR 0 7
2517: PPUSH
2518: CALL_OW 3
2522: ST_TO_ADDR
// Connect ( veh ) ;
2523: LD_VAR 0 8
2527: PPUSH
2528: CALL 24155 0 1
// wait ( 0 0$0.3 ) ;
2532: LD_INT 10
2534: PPUSH
2535: CALL_OW 67
// end ; end ;
2539: GO 2362
2541: POP
2542: POP
// end ; vehicles := LoadVariable ( 09_otherVehicles , [ ] ) ;
2543: LD_ADDR_VAR 0 9
2547: PUSH
2548: LD_STRING 09_otherVehicles
2550: PPUSH
2551: EMPTY
2552: PPUSH
2553: CALL_OW 30
2557: ST_TO_ADDR
// if vehicles then
2558: LD_VAR 0 9
2562: IFFALSE 2759
// begin for i in vehicles do
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_VAR 0 9
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2757
// begin uc_side := 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 5
2597: ARRAY
2598: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 2
2612: PUSH
2613: LD_INT 2
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 2
2621: PUSH
2622: LD_INT 3
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 4
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 6
2642: ARRAY
2643: PPUSH
2644: CALL 20673 0 5
// veh := CreateVehicle ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2658: LD_VAR 0 8
2662: PPUSH
2663: LD_INT 5
2665: PPUSH
2666: CALL_OW 233
// if i [ 7 ] then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 7
2677: ARRAY
2678: IFFALSE 2698
// SetMark ( veh , i [ 7 ] ) ;
2680: LD_VAR 0 8
2684: PPUSH
2685: LD_VAR 0 2
2689: PUSH
2690: LD_INT 7
2692: ARRAY
2693: PPUSH
2694: CALL_OW 242
// PlaceUnitXYD ( veh , i [ 8 ] , i [ 9 ] , i [ 10 ] , false ) ;
2698: LD_VAR 0 8
2702: PPUSH
2703: LD_VAR 0 2
2707: PUSH
2708: LD_INT 8
2710: ARRAY
2711: PPUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 9
2719: ARRAY
2720: PPUSH
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 10
2728: ARRAY
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: CALL 56013 0 5
// SetFuel ( veh , i [ 6 ] ) ;
2737: LD_VAR 0 8
2741: PPUSH
2742: LD_VAR 0 2
2746: PUSH
2747: LD_INT 6
2749: ARRAY
2750: PPUSH
2751: CALL_OW 240
// end ;
2755: GO 2574
2757: POP
2758: POP
// end ; end ;
2759: LD_VAR 0 1
2763: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
// for i in vehicles do
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3018
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 8
2789: ARRAY
2790: PUSH
2791: LD_VAR 0 2
2795: EQUAL
2796: IFFALSE 2812
2798: PUSH
2799: LD_VAR 0 5
2803: PUSH
2804: LD_INT 3
2806: ARRAY
2807: PUSH
2808: LD_INT 1
2810: EQUAL
2811: AND
2812: IFFALSE 3016
// begin result := i ;
2814: LD_ADDR_VAR 0 4
2818: PUSH
2819: LD_VAR 0 5
2823: ST_TO_ADDR
// uc_side := 2 ;
2824: LD_ADDR_OWVAR 20
2828: PUSH
2829: LD_INT 2
2831: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2832: LD_ADDR_OWVAR 21
2836: PUSH
2837: LD_VAR 0 5
2841: PUSH
2842: LD_INT 5
2844: ARRAY
2845: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2846: LD_VAR 0 5
2850: PUSH
2851: LD_INT 1
2853: ARRAY
2854: PPUSH
2855: LD_VAR 0 5
2859: PUSH
2860: LD_INT 2
2862: ARRAY
2863: PPUSH
2864: LD_VAR 0 5
2868: PUSH
2869: LD_INT 3
2871: ARRAY
2872: PPUSH
2873: LD_VAR 0 5
2877: PUSH
2878: LD_INT 4
2880: ARRAY
2881: PPUSH
2882: LD_VAR 0 5
2886: PUSH
2887: LD_INT 6
2889: ARRAY
2890: PPUSH
2891: CALL 20673 0 5
// veh := CreateVehicle ;
2895: LD_ADDR_VAR 0 6
2899: PUSH
2900: CALL_OW 45
2904: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2905: LD_VAR 0 6
2909: PPUSH
2910: LD_INT 5
2912: PPUSH
2913: CALL_OW 233
// if i [ 7 ] < 0 then
2917: LD_VAR 0 5
2921: PUSH
2922: LD_INT 7
2924: ARRAY
2925: PUSH
2926: LD_INT 0
2928: LESS
2929: IFFALSE 2949
// SetMark ( veh , i [ 7 ] ) ;
2931: LD_VAR 0 6
2935: PPUSH
2936: LD_VAR 0 5
2940: PUSH
2941: LD_INT 7
2943: ARRAY
2944: PPUSH
2945: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2949: LD_VAR 0 6
2953: PPUSH
2954: LD_INT 7
2956: PPUSH
2957: LD_INT 0
2959: PPUSH
2960: CALL 52746 0 3
2964: NOT
2965: IFFALSE 2998
// begin SetDir ( unit , 5 ) ;
2967: LD_VAR 0 1
2971: PPUSH
2972: LD_INT 5
2974: PPUSH
2975: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2979: LD_VAR 0 1
2983: PPUSH
2984: LD_INT 8
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 49
// exit ;
2994: POP
2995: POP
2996: GO 3047
// end ; PlaceHumanInUnit ( unit , veh ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_VAR 0 6
3007: PPUSH
3008: CALL_OW 52
// exit ;
3012: POP
3013: POP
3014: GO 3047
// end ;
3016: GO 2779
3018: POP
3019: POP
// SetDir ( unit , 5 ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: LD_INT 5
3027: PPUSH
3028: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
3032: LD_VAR 0 1
3036: PPUSH
3037: LD_INT 8
3039: PPUSH
3040: LD_INT 0
3042: PPUSH
3043: CALL_OW 49
// end ; end_of_file
3047: LD_VAR 0 4
3051: RET
// export function PrepareRussian ; begin
3052: LD_INT 0
3054: PPUSH
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
3055: LD_INT 48
3057: PPUSH
3058: LD_INT 3
3060: PPUSH
3061: LD_INT 2
3063: PPUSH
3064: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
3068: LD_INT 49
3070: PPUSH
3071: LD_INT 3
3073: PPUSH
3074: LD_INT 2
3076: PPUSH
3077: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
3081: LD_INT 50
3083: PPUSH
3084: LD_INT 3
3086: PPUSH
3087: LD_INT 2
3089: PPUSH
3090: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
3094: LD_INT 51
3096: PPUSH
3097: LD_INT 3
3099: PPUSH
3100: LD_INT 2
3102: PPUSH
3103: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3107: LD_INT 57
3109: PPUSH
3110: LD_INT 3
3112: PPUSH
3113: LD_INT 2
3115: PPUSH
3116: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
3120: LD_INT 48
3122: PPUSH
3123: LD_INT 6
3125: PPUSH
3126: LD_INT 2
3128: PPUSH
3129: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
3133: LD_INT 49
3135: PPUSH
3136: LD_INT 6
3138: PPUSH
3139: LD_INT 2
3141: PPUSH
3142: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
3146: LD_INT 50
3148: PPUSH
3149: LD_INT 6
3151: PPUSH
3152: LD_INT 2
3154: PPUSH
3155: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
3159: LD_INT 51
3161: PPUSH
3162: LD_INT 6
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3172: LD_INT 57
3174: PPUSH
3175: LD_INT 6
3177: PPUSH
3178: LD_INT 2
3180: PPUSH
3181: CALL_OW 322
// if Difficulty >= 2 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 2
3192: GREATEREQUAL
3193: IFFALSE 3273
// begin SetTech ( tech_Weap2 , 3 , state_researched ) ;
3195: LD_INT 52
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3208: LD_INT 58
3210: PPUSH
3211: LD_INT 3
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3221: LD_INT 63
3223: PPUSH
3224: LD_INT 3
3226: PPUSH
3227: LD_INT 2
3229: PPUSH
3230: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3234: LD_INT 52
3236: PPUSH
3237: LD_INT 6
3239: PPUSH
3240: LD_INT 2
3242: PPUSH
3243: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3247: LD_INT 58
3249: PPUSH
3250: LD_INT 6
3252: PPUSH
3253: LD_INT 2
3255: PPUSH
3256: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
3260: LD_INT 63
3262: PPUSH
3263: LD_INT 6
3265: PPUSH
3266: LD_INT 2
3268: PPUSH
3269: CALL_OW 322
// end ; if Difficulty > 2 then
3273: LD_OWVAR 67
3277: PUSH
3278: LD_INT 2
3280: GREATER
3281: IFFALSE 3361
// begin SetTech ( tech_Weap3 , 3 , state_researched ) ;
3283: LD_INT 53
3285: PPUSH
3286: LD_INT 3
3288: PPUSH
3289: LD_INT 2
3291: PPUSH
3292: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3296: LD_INT 59
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 2
3304: PPUSH
3305: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3309: LD_INT 64
3311: PPUSH
3312: LD_INT 3
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
3322: LD_INT 53
3324: PPUSH
3325: LD_INT 6
3327: PPUSH
3328: LD_INT 2
3330: PPUSH
3331: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
3335: LD_INT 59
3337: PPUSH
3338: LD_INT 6
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
3348: LD_INT 64
3350: PPUSH
3351: LD_INT 6
3353: PPUSH
3354: LD_INT 2
3356: PPUSH
3357: CALL_OW 322
// end ; end ;
3361: LD_VAR 0 1
3365: RET
// export ruForces , ruConstructList , ruTanks ; export function PrepareExtraRussianBase ; var i , j , tmp , un , side , skill , b ; begin
3366: LD_INT 0
3368: PPUSH
3369: PPUSH
3370: PPUSH
3371: PPUSH
3372: PPUSH
3373: PPUSH
3374: PPUSH
3375: PPUSH
// side := 6 ;
3376: LD_ADDR_VAR 0 6
3380: PUSH
3381: LD_INT 6
3383: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
3384: LD_ADDR_VAR 0 7
3388: PUSH
3389: LD_INT 7
3391: PUSH
3392: LD_INT 8
3394: PUSH
3395: LD_INT 9
3397: PUSH
3398: LD_INT 10
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: LD_OWVAR 67
3411: ARRAY
3412: ST_TO_ADDR
// ruForces := [ ] ;
3413: LD_ADDR_EXP 34
3417: PUSH
3418: EMPTY
3419: ST_TO_ADDR
// ruConstructList := [ ] ;
3420: LD_ADDR_EXP 35
3424: PUSH
3425: EMPTY
3426: ST_TO_ADDR
// ruTanks := [ ] ;
3427: LD_ADDR_EXP 36
3431: PUSH
3432: EMPTY
3433: ST_TO_ADDR
// tmp := [ [ b_warehouse , 107 , 149 , 4 ] , [ b_oil_mine , 115 , 150 , 4 ] , [ b_factory , 101 , 160 , 0 ] , [ b_ext_computer , 97 , 156 , 2 ] , [ b_ext_siberium , 98 , 160 , 1 ] , [ b_ext_noncombat , 101 , 164 , 0 ] , [ b_ext_gun , 104 , 163 , 5 ] , [ b_ext_rocket , 105 , 160 , 4 ] , [ b_siberite_mine , 128 , 132 , 0 ] , [ b_lab_full , 94 , 142 , 1 , b_lab_weapon , b_lab_spacetime ] , [ b_oil_power , 93 , 137 , 0 ] , [ b_oil_power , 111 , 157 , 0 ] , [ b_oil_power , 109 , 158 , 0 ] , [ b_oil_power , 121 , 150 , 0 ] , [ b_siberite_power , 118 , 151 , 0 ] , [ b_barracks , 97 , 133 , 2 ] , [ b_barracks , 117 , 143 , 4 ] , [ b_turret , 100 , 132 , 2 ] , [ b_turret , 130 , 159 , 4 ] , [ b_turret , 131 , 155 , 4 ] , [ b_turret , 90 , 133 , 2 ] , [ b_turret , 70 , 135 , 3 ] ] ;
3434: LD_ADDR_VAR 0 4
3438: PUSH
3439: LD_INT 1
3441: PUSH
3442: LD_INT 107
3444: PUSH
3445: LD_INT 149
3447: PUSH
3448: LD_INT 4
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 115
3462: PUSH
3463: LD_INT 150
3465: PUSH
3466: LD_INT 4
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: LD_INT 101
3480: PUSH
3481: LD_INT 160
3483: PUSH
3484: LD_INT 0
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 24
3495: PUSH
3496: LD_INT 97
3498: PUSH
3499: LD_INT 156
3501: PUSH
3502: LD_INT 2
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 21
3513: PUSH
3514: LD_INT 98
3516: PUSH
3517: LD_INT 160
3519: PUSH
3520: LD_INT 1
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 19
3531: PUSH
3532: LD_INT 101
3534: PUSH
3535: LD_INT 164
3537: PUSH
3538: LD_INT 0
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 17
3549: PUSH
3550: LD_INT 104
3552: PUSH
3553: LD_INT 163
3555: PUSH
3556: LD_INT 5
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_INT 18
3567: PUSH
3568: LD_INT 105
3570: PUSH
3571: LD_INT 160
3573: PUSH
3574: LD_INT 4
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 30
3585: PUSH
3586: LD_INT 128
3588: PUSH
3589: LD_INT 132
3591: PUSH
3592: LD_INT 0
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 8
3603: PUSH
3604: LD_INT 94
3606: PUSH
3607: LD_INT 142
3609: PUSH
3610: LD_INT 1
3612: PUSH
3613: LD_INT 10
3615: PUSH
3616: LD_INT 14
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: PUSH
3627: LD_INT 26
3629: PUSH
3630: LD_INT 93
3632: PUSH
3633: LD_INT 137
3635: PUSH
3636: LD_INT 0
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 26
3647: PUSH
3648: LD_INT 111
3650: PUSH
3651: LD_INT 157
3653: PUSH
3654: LD_INT 0
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 26
3665: PUSH
3666: LD_INT 109
3668: PUSH
3669: LD_INT 158
3671: PUSH
3672: LD_INT 0
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: LD_INT 26
3683: PUSH
3684: LD_INT 121
3686: PUSH
3687: LD_INT 150
3689: PUSH
3690: LD_INT 0
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 28
3701: PUSH
3702: LD_INT 118
3704: PUSH
3705: LD_INT 151
3707: PUSH
3708: LD_INT 0
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 5
3719: PUSH
3720: LD_INT 97
3722: PUSH
3723: LD_INT 133
3725: PUSH
3726: LD_INT 2
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: PUSH
3735: LD_INT 5
3737: PUSH
3738: LD_INT 117
3740: PUSH
3741: LD_INT 143
3743: PUSH
3744: LD_INT 4
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 33
3755: PUSH
3756: LD_INT 100
3758: PUSH
3759: LD_INT 132
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 33
3773: PUSH
3774: LD_INT 130
3776: PUSH
3777: LD_INT 159
3779: PUSH
3780: LD_INT 4
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 33
3791: PUSH
3792: LD_INT 131
3794: PUSH
3795: LD_INT 155
3797: PUSH
3798: LD_INT 4
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: PUSH
3807: LD_INT 33
3809: PUSH
3810: LD_INT 90
3812: PUSH
3813: LD_INT 133
3815: PUSH
3816: LD_INT 2
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 33
3827: PUSH
3828: LD_INT 70
3830: PUSH
3831: LD_INT 135
3833: PUSH
3834: LD_INT 3
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: ST_TO_ADDR
// uc_side := side ;
3867: LD_ADDR_OWVAR 20
3871: PUSH
3872: LD_VAR 0 6
3876: ST_TO_ADDR
// uc_nation := nation_russian ;
3877: LD_ADDR_OWVAR 21
3881: PUSH
3882: LD_INT 3
3884: ST_TO_ADDR
// for i in tmp do
3885: LD_ADDR_VAR 0 2
3889: PUSH
3890: LD_VAR 0 4
3894: PUSH
3895: FOR_IN
3896: IFFALSE 4034
// begin InitBc ;
3898: CALL_OW 21
// bc_type := i [ 1 ] ;
3902: LD_ADDR_OWVAR 42
3906: PUSH
3907: LD_VAR 0 2
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: ST_TO_ADDR
// bc_level := 6 ;
3916: LD_ADDR_OWVAR 43
3920: PUSH
3921: LD_INT 6
3923: ST_TO_ADDR
// if i > 4 then
3924: LD_VAR 0 2
3928: PUSH
3929: LD_INT 4
3931: GREATER
3932: IFFALSE 3962
// begin bc_kind1 := i [ 5 ] ;
3934: LD_ADDR_OWVAR 44
3938: PUSH
3939: LD_VAR 0 2
3943: PUSH
3944: LD_INT 5
3946: ARRAY
3947: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
3948: LD_ADDR_OWVAR 45
3952: PUSH
3953: LD_VAR 0 2
3957: PUSH
3958: LD_INT 6
3960: ARRAY
3961: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3962: LD_ADDR_VAR 0 8
3966: PUSH
3967: LD_VAR 0 2
3971: PUSH
3972: LD_INT 2
3974: ARRAY
3975: PPUSH
3976: LD_VAR 0 2
3980: PUSH
3981: LD_INT 3
3983: ARRAY
3984: PPUSH
3985: LD_VAR 0 2
3989: PUSH
3990: LD_INT 4
3992: ARRAY
3993: PPUSH
3994: CALL_OW 47
3998: ST_TO_ADDR
// if i [ 1 ] in [ b_bunker , b_turret ] then
3999: LD_VAR 0 2
4003: PUSH
4004: LD_INT 1
4006: ARRAY
4007: PUSH
4008: LD_INT 32
4010: PUSH
4011: LD_INT 33
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: IN
4018: IFFALSE 4032
// PlaceWeaponTurret ( b , ru_rocket_launcher ) ;
4020: LD_VAR 0 8
4024: PPUSH
4025: LD_INT 45
4027: PPUSH
4028: CALL_OW 431
// end ;
4032: GO 3895
4034: POP
4035: POP
// InitHC_All ( ) ;
4036: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
4040: LD_ADDR_VAR 0 4
4044: PUSH
4045: LD_INT 22
4047: PUSH
4048: LD_VAR 0 6
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 30
4059: PUSH
4060: LD_INT 5
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: ST_TO_ADDR
// for i in tmp do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: LD_VAR 0 4
4085: PUSH
4086: FOR_IN
4087: IFFALSE 4214
// begin for j := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4089: LD_ADDR_VAR 0 3
4093: PUSH
4094: DOUBLE
4095: LD_INT 1
4097: DEC
4098: ST_TO_ADDR
4099: LD_INT 2
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: LD_INT 4
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: PUSH
4117: LD_OWVAR 67
4121: ARRAY
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4210
// begin PrepareSoldier ( false , skill ) ;
4126: LD_INT 0
4128: PPUSH
4129: LD_VAR 0 7
4133: PPUSH
4134: CALL_OW 381
// un := CreateHuman ;
4138: LD_ADDR_VAR 0 5
4142: PUSH
4143: CALL_OW 44
4147: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4148: LD_ADDR_EXP 34
4152: PUSH
4153: LD_EXP 34
4157: PPUSH
4158: LD_VAR 0 5
4162: PPUSH
4163: CALL 53853 0 2
4167: ST_TO_ADDR
// if j mod 2 = 0 then
4168: LD_VAR 0 3
4172: PUSH
4173: LD_INT 2
4175: MOD
4176: PUSH
4177: LD_INT 0
4179: EQUAL
4180: IFFALSE 4194
// SetClass ( un , class_bazooker ) ;
4182: LD_VAR 0 5
4186: PPUSH
4187: LD_INT 9
4189: PPUSH
4190: CALL_OW 336
// PlaceHumanInUnit ( un , i ) ;
4194: LD_VAR 0 5
4198: PPUSH
4199: LD_VAR 0 2
4203: PPUSH
4204: CALL_OW 52
// end ;
4208: GO 4123
4210: POP
4211: POP
// end ;
4212: GO 4086
4214: POP
4215: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
4216: LD_ADDR_VAR 0 4
4220: PUSH
4221: LD_INT 22
4223: PUSH
4224: LD_VAR 0 6
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 30
4235: PUSH
4236: LD_INT 1
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PPUSH
4247: CALL_OW 69
4251: ST_TO_ADDR
// for i in tmp do
4252: LD_ADDR_VAR 0 2
4256: PUSH
4257: LD_VAR 0 4
4261: PUSH
4262: FOR_IN
4263: IFFALSE 4487
// begin for j := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
4265: LD_ADDR_VAR 0 3
4269: PUSH
4270: DOUBLE
4271: LD_INT 1
4273: DEC
4274: ST_TO_ADDR
4275: LD_INT 3
4277: PUSH
4278: LD_INT 3
4280: PUSH
4281: LD_INT 4
4283: PUSH
4284: LD_INT 4
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: PUSH
4293: LD_OWVAR 67
4297: ARRAY
4298: PUSH
4299: FOR_TO
4300: IFFALSE 4360
// begin PrepareEngineer ( false , skill ) ;
4302: LD_INT 0
4304: PPUSH
4305: LD_VAR 0 7
4309: PPUSH
4310: CALL_OW 382
// un := CreateHuman ;
4314: LD_ADDR_VAR 0 5
4318: PUSH
4319: CALL_OW 44
4323: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4324: LD_ADDR_EXP 34
4328: PUSH
4329: LD_EXP 34
4333: PPUSH
4334: LD_VAR 0 5
4338: PPUSH
4339: CALL 53853 0 2
4343: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4344: LD_VAR 0 5
4348: PPUSH
4349: LD_VAR 0 2
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4299
4360: POP
4361: POP
// SetResourceType ( GetBase ( i ) , mat_cans , [ 550 , 600 , 780 , 820 ] [ Difficulty ] ) ;
4362: LD_VAR 0 2
4366: PPUSH
4367: CALL_OW 274
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: LD_INT 550
4377: PUSH
4378: LD_INT 600
4380: PUSH
4381: LD_INT 780
4383: PUSH
4384: LD_INT 820
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: PUSH
4393: LD_OWVAR 67
4397: ARRAY
4398: PPUSH
4399: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , [ 160 , 160 , 210 , 240 ] [ Difficulty ] ) ;
4403: LD_VAR 0 2
4407: PPUSH
4408: CALL_OW 274
4412: PPUSH
4413: LD_INT 2
4415: PPUSH
4416: LD_INT 160
4418: PUSH
4419: LD_INT 160
4421: PUSH
4422: LD_INT 210
4424: PUSH
4425: LD_INT 240
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: PUSH
4434: LD_OWVAR 67
4438: ARRAY
4439: PPUSH
4440: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , [ 60 , 60 , 70 , 80 ] [ Difficulty ] ) ;
4444: LD_VAR 0 2
4448: PPUSH
4449: CALL_OW 274
4453: PPUSH
4454: LD_INT 3
4456: PPUSH
4457: LD_INT 60
4459: PUSH
4460: LD_INT 60
4462: PUSH
4463: LD_INT 70
4465: PUSH
4466: LD_INT 80
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: PUSH
4475: LD_OWVAR 67
4479: ARRAY
4480: PPUSH
4481: CALL_OW 277
// end ;
4485: GO 4262
4487: POP
4488: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
4489: LD_ADDR_VAR 0 4
4493: PUSH
4494: LD_INT 22
4496: PUSH
4497: LD_VAR 0 6
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 30
4508: PUSH
4509: LD_INT 3
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: PPUSH
4520: CALL_OW 69
4524: ST_TO_ADDR
// for i in tmp do
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_VAR 0 4
4534: PUSH
4535: FOR_IN
4536: IFFALSE 4631
// begin for j := 1 to 6 do
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: DOUBLE
4544: LD_INT 1
4546: DEC
4547: ST_TO_ADDR
4548: LD_INT 6
4550: PUSH
4551: FOR_TO
4552: IFFALSE 4627
// begin PrepareMechanic ( false , skill ) ;
4554: LD_INT 0
4556: PPUSH
4557: LD_VAR 0 7
4561: PPUSH
4562: CALL_OW 383
// hc_attr := [ 12 , 12 ] ;
4566: LD_ADDR_OWVAR 29
4570: PUSH
4571: LD_INT 12
4573: PUSH
4574: LD_INT 12
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: ST_TO_ADDR
// un := CreateHuman ;
4581: LD_ADDR_VAR 0 5
4585: PUSH
4586: CALL_OW 44
4590: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4591: LD_ADDR_EXP 34
4595: PUSH
4596: LD_EXP 34
4600: PPUSH
4601: LD_VAR 0 5
4605: PPUSH
4606: CALL 53853 0 2
4610: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4611: LD_VAR 0 5
4615: PPUSH
4616: LD_VAR 0 2
4620: PPUSH
4621: CALL_OW 52
// end ;
4625: GO 4551
4627: POP
4628: POP
// end ;
4629: GO 4535
4631: POP
4632: POP
// InitHC_All ( ) ;
4633: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
4637: LD_ADDR_VAR 0 4
4641: PUSH
4642: LD_INT 22
4644: PUSH
4645: LD_VAR 0 6
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 30
4656: PUSH
4657: LD_INT 8
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 69
4672: ST_TO_ADDR
// for i in tmp do
4673: LD_ADDR_VAR 0 2
4677: PUSH
4678: LD_VAR 0 4
4682: PUSH
4683: FOR_IN
4684: IFFALSE 4764
// begin for j := 1 to 2 do
4686: LD_ADDR_VAR 0 3
4690: PUSH
4691: DOUBLE
4692: LD_INT 1
4694: DEC
4695: ST_TO_ADDR
4696: LD_INT 2
4698: PUSH
4699: FOR_TO
4700: IFFALSE 4760
// begin PrepareScientist ( false , skill ) ;
4702: LD_INT 0
4704: PPUSH
4705: LD_VAR 0 7
4709: PPUSH
4710: CALL_OW 384
// un := CreateHuman ;
4714: LD_ADDR_VAR 0 5
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4724: LD_ADDR_EXP 34
4728: PUSH
4729: LD_EXP 34
4733: PPUSH
4734: LD_VAR 0 5
4738: PPUSH
4739: CALL 53853 0 2
4743: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4744: LD_VAR 0 5
4748: PPUSH
4749: LD_VAR 0 2
4753: PPUSH
4754: CALL_OW 52
// end ;
4758: GO 4699
4760: POP
4761: POP
// end ;
4762: GO 4683
4764: POP
4765: POP
// end ;
4766: LD_VAR 0 1
4770: RET
// function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
4771: LD_INT 0
4773: PPUSH
4774: PPUSH
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
4781: PPUSH
4782: PPUSH
// result := [ ] ;
4783: LD_ADDR_VAR 0 3
4787: PUSH
4788: EMPTY
4789: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
4790: LD_ADDR_VAR 0 8
4794: PUSH
4795: LD_INT 7
4797: PUSH
4798: LD_INT 8
4800: PUSH
4801: LD_INT 9
4803: PUSH
4804: LD_INT 10
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: PUSH
4813: LD_OWVAR 67
4817: ARRAY
4818: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
4819: LD_ADDR_VAR 0 9
4823: PUSH
4824: LD_INT 15
4826: PUSH
4827: LD_INT 17
4829: PUSH
4830: LD_INT 19
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: LIST
4837: PUSH
4838: LD_VAR 0 1
4842: ARRAY
4843: ST_TO_ADDR
// parking := [ ruGatPoint1Area , ruGatPoint2Area , ruGatPoint3Area ] [ spot ] ;
4844: LD_ADDR_VAR 0 10
4848: PUSH
4849: LD_INT 16
4851: PUSH
4852: LD_INT 18
4854: PUSH
4855: LD_INT 20
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_VAR 0 1
4867: ARRAY
4868: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
4869: LD_ADDR_VAR 0 11
4873: PUSH
4874: LD_INT 5
4876: PUSH
4877: LD_INT 0
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 1
4892: ARRAY
4893: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) then
4894: LD_VAR 0 9
4898: PPUSH
4899: LD_INT 2
4901: PUSH
4902: LD_INT 22
4904: PUSH
4905: LD_INT 0
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: LD_INT 22
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: PPUSH
4927: CALL_OW 70
4931: IFFALSE 4992
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) do
4933: LD_ADDR_VAR 0 4
4937: PUSH
4938: LD_VAR 0 9
4942: PPUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 22
4948: PUSH
4949: LD_INT 0
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 22
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: LIST
4970: PPUSH
4971: CALL_OW 70
4975: PUSH
4976: FOR_IN
4977: IFFALSE 4990
// RemoveUnit ( i ) ;
4979: LD_VAR 0 4
4983: PPUSH
4984: CALL_OW 64
4988: GO 4976
4990: POP
4991: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
4992: LD_VAR 0 9
4996: PPUSH
4997: LD_INT 3
4999: PUSH
5000: LD_INT 21
5002: PUSH
5003: LD_INT 1
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 22
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 70
5032: IFFALSE 5096
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
5034: LD_ADDR_VAR 0 4
5038: PUSH
5039: LD_VAR 0 9
5043: PPUSH
5044: LD_INT 3
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 1
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 70
5079: PUSH
5080: FOR_IN
5081: IFFALSE 5094
// KillUnit ( i ) ;
5083: LD_VAR 0 4
5087: PPUSH
5088: CALL_OW 66
5092: GO 5080
5094: POP
5095: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
5096: LD_VAR 0 9
5100: PPUSH
5101: LD_INT 21
5103: PUSH
5104: LD_INT 1
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PUSH
5111: LD_INT 22
5113: PUSH
5114: LD_INT 2
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PPUSH
5125: CALL_OW 70
5129: IFFALSE 5192
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
5131: LD_ADDR_VAR 0 4
5135: PUSH
5136: LD_VAR 0 9
5140: PPUSH
5141: LD_INT 21
5143: PUSH
5144: LD_INT 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 22
5153: PUSH
5154: LD_INT 2
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PPUSH
5165: CALL_OW 70
5169: PUSH
5170: FOR_IN
5171: IFFALSE 5190
// ComMoveXY ( i , 91 , 56 ) ;
5173: LD_VAR 0 4
5177: PPUSH
5178: LD_INT 91
5180: PPUSH
5181: LD_INT 56
5183: PPUSH
5184: CALL_OW 111
5188: GO 5170
5190: POP
5191: POP
// repeat wait ( 0 0$1 ) ;
5192: LD_INT 35
5194: PPUSH
5195: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5199: LD_VAR 0 9
5203: PPUSH
5204: LD_INT 50
5206: PUSH
5207: EMPTY
5208: LIST
5209: PPUSH
5210: CALL_OW 70
5214: NOT
5215: IFFALSE 5192
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] + strength do
5217: LD_ADDR_VAR 0 4
5221: PUSH
5222: DOUBLE
5223: LD_INT 1
5225: DEC
5226: ST_TO_ADDR
5227: LD_INT 4
5229: PUSH
5230: LD_INT 5
5232: PUSH
5233: LD_INT 5
5235: PUSH
5236: LD_INT 6
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: PUSH
5245: LD_OWVAR 67
5249: ARRAY
5250: PUSH
5251: LD_VAR 0 2
5255: PLUS
5256: PUSH
5257: FOR_TO
5258: IFFALSE 5579
// begin uc_side := 3 ;
5260: LD_ADDR_OWVAR 20
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_nation := nation_russian ;
5268: LD_ADDR_OWVAR 21
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
5276: LD_ADDR_VAR 0 12
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: LD_INT 3
5286: PUSH
5287: LD_INT 3
5289: PUSH
5290: LD_INT 3
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 1
5301: PPUSH
5302: LD_INT 4
5304: PPUSH
5305: CALL_OW 12
5309: ARRAY
5310: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
5311: LD_INT 22
5313: PUSH
5314: LD_INT 24
5316: PUSH
5317: LD_INT 23
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: PUSH
5325: LD_VAR 0 4
5329: PUSH
5330: LD_INT 3
5332: MOD
5333: PUSH
5334: LD_INT 1
5336: PLUS
5337: ARRAY
5338: PPUSH
5339: LD_INT 3
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 1
5351: PPUSH
5352: LD_INT 2
5354: PPUSH
5355: CALL_OW 12
5359: ARRAY
5360: PPUSH
5361: LD_VAR 0 12
5365: PPUSH
5366: LD_INT 45
5368: PUSH
5369: LD_INT 46
5371: PUSH
5372: LD_INT 43
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: LIST
5379: PUSH
5380: LD_VAR 0 4
5384: PUSH
5385: LD_INT 3
5387: MOD
5388: PUSH
5389: LD_INT 1
5391: PLUS
5392: ARRAY
5393: PPUSH
5394: LD_INT 100
5396: PPUSH
5397: CALL 20673 0 5
// veh := CreateVehicle ;
5401: LD_ADDR_VAR 0 7
5405: PUSH
5406: CALL_OW 45
5410: ST_TO_ADDR
// SetDir ( veh , dir ) ;
5411: LD_VAR 0 7
5415: PPUSH
5416: LD_VAR 0 11
5420: PPUSH
5421: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
5425: LD_VAR 0 7
5429: PPUSH
5430: LD_VAR 0 9
5434: PPUSH
5435: LD_INT 0
5437: PPUSH
5438: CALL_OW 49
// if control = control_manual then
5442: LD_VAR 0 12
5446: PUSH
5447: LD_INT 1
5449: EQUAL
5450: IFFALSE 5518
// begin uc_side := 3 ;
5452: LD_ADDR_OWVAR 20
5456: PUSH
5457: LD_INT 3
5459: ST_TO_ADDR
// uc_nation := nation_russian ;
5460: LD_ADDR_OWVAR 21
5464: PUSH
5465: LD_INT 3
5467: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5468: LD_INT 0
5470: PPUSH
5471: LD_VAR 0 8
5475: PPUSH
5476: CALL_OW 383
// un := CreateHuman ;
5480: LD_ADDR_VAR 0 6
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5490: LD_VAR 0 6
5494: PPUSH
5495: LD_VAR 0 7
5499: PPUSH
5500: CALL_OW 52
// SetTag ( un , spot ) ;
5504: LD_VAR 0 6
5508: PPUSH
5509: LD_VAR 0 1
5513: PPUSH
5514: CALL_OW 109
// end ; repeat ComMoveToArea ( veh , parking ) ;
5518: LD_VAR 0 7
5522: PPUSH
5523: LD_VAR 0 10
5527: PPUSH
5528: CALL_OW 113
// wait ( 0 0$3 ) ;
5532: LD_INT 105
5534: PPUSH
5535: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5539: LD_VAR 0 9
5543: PPUSH
5544: LD_INT 50
5546: PUSH
5547: EMPTY
5548: LIST
5549: PPUSH
5550: CALL_OW 70
5554: NOT
5555: IFFALSE 5518
// result := Join ( result , veh ) ;
5557: LD_ADDR_VAR 0 3
5561: PUSH
5562: LD_VAR 0 3
5566: PPUSH
5567: LD_VAR 0 7
5571: PPUSH
5572: CALL 53853 0 2
5576: ST_TO_ADDR
// end ;
5577: GO 5257
5579: POP
5580: POP
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
5581: LD_ADDR_VAR 0 4
5585: PUSH
5586: DOUBLE
5587: LD_INT 1
5589: DEC
5590: ST_TO_ADDR
5591: LD_INT 2
5593: PUSH
5594: LD_INT 2
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: LD_INT 3
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: PUSH
5609: LD_OWVAR 67
5613: ARRAY
5614: PUSH
5615: FOR_TO
5616: IFFALSE 5786
// begin uc_side := 3 ;
5618: LD_ADDR_OWVAR 20
5622: PUSH
5623: LD_INT 3
5625: ST_TO_ADDR
// uc_nation := nation_russian ;
5626: LD_ADDR_OWVAR 21
5630: PUSH
5631: LD_INT 3
5633: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5634: LD_INT 0
5636: PPUSH
5637: LD_VAR 0 8
5641: PPUSH
5642: CALL_OW 381
// un := CreateHuman ;
5646: LD_ADDR_VAR 0 6
5650: PUSH
5651: CALL_OW 44
5655: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5656: LD_INT 30
5658: PUSH
5659: LD_INT 40
5661: PUSH
5662: LD_INT 50
5664: PUSH
5665: LD_INT 50
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: PUSH
5674: LD_OWVAR 67
5678: ARRAY
5679: PPUSH
5680: CALL_OW 13
5684: IFFALSE 5698
// SetClass ( un , class_bazooker ) ;
5686: LD_VAR 0 6
5690: PPUSH
5691: LD_INT 9
5693: PPUSH
5694: CALL_OW 336
// SetDir ( un , dir ) ;
5698: LD_VAR 0 6
5702: PPUSH
5703: LD_VAR 0 11
5707: PPUSH
5708: CALL_OW 233
// SetTag ( un , spot ) ;
5712: LD_VAR 0 6
5716: PPUSH
5717: LD_VAR 0 1
5721: PPUSH
5722: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
5726: LD_VAR 0 6
5730: PPUSH
5731: LD_VAR 0 9
5735: PPUSH
5736: LD_INT 0
5738: PPUSH
5739: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
5743: LD_VAR 0 6
5747: PPUSH
5748: LD_VAR 0 10
5752: PPUSH
5753: CALL_OW 113
// wait ( 0 0$1 ) ;
5757: LD_INT 35
5759: PPUSH
5760: CALL_OW 67
// result := Join ( result , un ) ;
5764: LD_ADDR_VAR 0 3
5768: PUSH
5769: LD_VAR 0 3
5773: PPUSH
5774: LD_VAR 0 6
5778: PPUSH
5779: CALL 53853 0 2
5783: ST_TO_ADDR
// end ;
5784: GO 5615
5786: POP
5787: POP
// end ;
5788: LD_VAR 0 3
5792: RET
// function PrepareRussianExtraInfantry ; var i , un ; begin
5793: LD_INT 0
5795: PPUSH
5796: PPUSH
5797: PPUSH
// result := [ ] ;
5798: LD_ADDR_VAR 0 1
5802: PUSH
5803: EMPTY
5804: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty + 1 ] do
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: DOUBLE
5811: LD_INT 1
5813: DEC
5814: ST_TO_ADDR
5815: LD_INT 3
5817: PUSH
5818: LD_INT 3
5820: PUSH
5821: LD_INT 4
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: LD_OWVAR 67
5833: PUSH
5834: LD_INT 1
5836: PLUS
5837: ARRAY
5838: PUSH
5839: FOR_TO
5840: IFFALSE 5978
// begin uc_side := 3 ;
5842: LD_ADDR_OWVAR 20
5846: PUSH
5847: LD_INT 3
5849: ST_TO_ADDR
// uc_nation := nation_russian ;
5850: LD_ADDR_OWVAR 21
5854: PUSH
5855: LD_INT 3
5857: ST_TO_ADDR
// PrepareSoldier ( false , [ 7 , 8 , 9 ] [ Difficulty + 1 ] ) ;
5858: LD_INT 0
5860: PPUSH
5861: LD_INT 7
5863: PUSH
5864: LD_INT 8
5866: PUSH
5867: LD_INT 9
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: LIST
5874: PUSH
5875: LD_OWVAR 67
5879: PUSH
5880: LD_INT 1
5882: PLUS
5883: ARRAY
5884: PPUSH
5885: CALL_OW 381
// un := CreateHuman ;
5889: LD_ADDR_VAR 0 3
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5899: LD_INT 30
5901: PUSH
5902: LD_INT 40
5904: PUSH
5905: LD_INT 50
5907: PUSH
5908: LD_INT 50
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: LD_OWVAR 67
5921: ARRAY
5922: PPUSH
5923: CALL_OW 13
5927: IFFALSE 5941
// SetClass ( un , class_bazooker ) ;
5929: LD_VAR 0 3
5933: PPUSH
5934: LD_INT 9
5936: PPUSH
5937: CALL_OW 336
// PlaceUnitArea ( un , extraSpawnAttackArea , false ) ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 25
5948: PPUSH
5949: LD_INT 0
5951: PPUSH
5952: CALL_OW 49
// result := Join ( result , un ) ;
5956: LD_ADDR_VAR 0 1
5960: PUSH
5961: LD_VAR 0 1
5965: PPUSH
5966: LD_VAR 0 3
5970: PPUSH
5971: CALL 53853 0 2
5975: ST_TO_ADDR
// end ;
5976: GO 5839
5978: POP
5979: POP
// end ;
5980: LD_VAR 0 1
5984: RET
// function SendBulldozer ; var un ; begin
5985: LD_INT 0
5987: PPUSH
5988: PPUSH
// uc_side := 3 ;
5989: LD_ADDR_OWVAR 20
5993: PUSH
5994: LD_INT 3
5996: ST_TO_ADDR
// uc_nation := nation_russian ;
5997: LD_ADDR_OWVAR 21
6001: PUSH
6002: LD_INT 3
6004: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
6005: LD_INT 23
6007: PPUSH
6008: LD_INT 3
6010: PPUSH
6011: LD_INT 3
6013: PPUSH
6014: LD_INT 53
6016: PPUSH
6017: LD_INT 100
6019: PPUSH
6020: CALL 20673 0 5
// un := CreateVehicle ;
6024: LD_ADDR_VAR 0 2
6028: PUSH
6029: CALL_OW 45
6033: ST_TO_ADDR
// PlaceUnitXYD ( un , 7 , 8 , 1 , false ) ;
6034: LD_VAR 0 2
6038: PPUSH
6039: LD_INT 7
6041: PPUSH
6042: LD_INT 8
6044: PPUSH
6045: LD_INT 1
6047: PPUSH
6048: LD_INT 0
6050: PPUSH
6051: CALL 56013 0 5
// wait ( 0 0$1 ) ;
6055: LD_INT 35
6057: PPUSH
6058: CALL_OW 67
// CutTreeInArea ( un , cutTreeWArea ) ;
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_INT 24
6069: PPUSH
6070: CALL 11565 0 2
// end ;
6074: LD_VAR 0 1
6078: RET
// every 0 0$3 trigger wave >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
6079: LD_EXP 11
6083: PUSH
6084: LD_INT 4
6086: PUSH
6087: LD_INT 5
6089: PUSH
6090: LD_INT 6
6092: PUSH
6093: LD_INT 7
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: PUSH
6102: LD_OWVAR 67
6106: ARRAY
6107: GREATEREQUAL
6108: IFFALSE 6162
6110: GO 6112
6112: DISABLE
// begin repeat wait ( 0 0$1 ) ;
6113: LD_INT 35
6115: PPUSH
6116: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 ;
6120: LD_INT 22
6122: PUSH
6123: LD_INT 6
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PUSH
6130: LD_INT 21
6132: PUSH
6133: LD_INT 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PPUSH
6144: CALL_OW 69
6148: PUSH
6149: LD_INT 0
6151: EQUAL
6152: IFFALSE 6113
// ruDefeated := true ;
6154: LD_ADDR_EXP 10
6158: PUSH
6159: LD_INT 1
6161: ST_TO_ADDR
// end ;
6162: END
// every 6 6$20 + 4 4$00 trigger wave < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do var i , e , attackers , extraAttackers , spot , extraSpot , paths , enemy ;
6163: LD_EXP 11
6167: PUSH
6168: LD_INT 4
6170: PUSH
6171: LD_INT 5
6173: PUSH
6174: LD_INT 6
6176: PUSH
6177: LD_INT 7
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: PUSH
6186: LD_OWVAR 67
6190: ARRAY
6191: LESS
6192: IFFALSE 7297
6194: GO 6196
6196: DISABLE
6197: LD_INT 0
6199: PPUSH
6200: PPUSH
6201: PPUSH
6202: PPUSH
6203: PPUSH
6204: PPUSH
6205: PPUSH
6206: PPUSH
// begin enable ;
6207: ENABLE
// attackers := [ ] ;
6208: LD_ADDR_VAR 0 3
6212: PUSH
6213: EMPTY
6214: ST_TO_ADDR
// extraAttackers := [ ] ;
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: EMPTY
6221: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 87 , 141 ] , [ 80 , 120 ] , [ 66 , 95 ] , [ 51 , 69 ] , [ 36 , 40 ] , [ 47 , 31 ] , [ 60 , 28 ] ] , [ [ 21 , 17 ] , [ 35 , 30 ] , [ 49 , 31 ] ] ] ;
6222: LD_ADDR_VAR 0 7
6226: PUSH
6227: LD_INT 176
6229: PUSH
6230: LD_INT 152
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 157
6239: PUSH
6240: LD_INT 122
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 146
6249: PUSH
6250: LD_INT 89
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 125
6259: PUSH
6260: LD_INT 46
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 87
6275: PUSH
6276: LD_INT 141
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 80
6285: PUSH
6286: LD_INT 120
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 66
6295: PUSH
6296: LD_INT 95
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 51
6305: PUSH
6306: LD_INT 69
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 36
6315: PUSH
6316: LD_INT 40
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 47
6325: PUSH
6326: LD_INT 31
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 60
6335: PUSH
6336: LD_INT 28
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 21
6354: PUSH
6355: LD_INT 17
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 35
6364: PUSH
6365: LD_INT 30
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 49
6374: PUSH
6375: LD_INT 31
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: ST_TO_ADDR
// wave := Inc ( wave ) ;
6392: LD_ADDR_EXP 11
6396: PUSH
6397: LD_EXP 11
6401: PPUSH
6402: CALL 55226 0 1
6406: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
6407: LD_ADDR_VAR 0 5
6411: PUSH
6412: LD_INT 1
6414: PPUSH
6415: LD_INT 3
6417: PPUSH
6418: CALL_OW 12
6422: ST_TO_ADDR
// if wave mod 2 = 0 then
6423: LD_EXP 11
6427: PUSH
6428: LD_INT 2
6430: MOD
6431: PUSH
6432: LD_INT 0
6434: EQUAL
6435: IFFALSE 6452
// strength := Inc ( strength ) ;
6437: LD_ADDR_EXP 12
6441: PUSH
6442: LD_EXP 12
6446: PPUSH
6447: CALL 55226 0 1
6451: ST_TO_ADDR
// if Count ( ListEnvironmentArea ( cutTreeWArea ) ) then
6452: LD_INT 24
6454: PPUSH
6455: CALL_OW 353
6459: PPUSH
6460: CALL 17877 0 1
6464: IFFALSE 6470
// SendBulldozer ;
6466: CALL 5985 0 0
// attackers := PrepareRussianAttack ( spot , strength ) ;
6470: LD_ADDR_VAR 0 3
6474: PUSH
6475: LD_VAR 0 5
6479: PPUSH
6480: LD_EXP 12
6484: PPUSH
6485: CALL 4771 0 2
6489: ST_TO_ADDR
// if wave + [ 2 , 2 , 3 , 3 ] [ Difficulty ] >= [ 6 , 7 , 8 , 9 ] [ Difficulty ] then
6490: LD_EXP 11
6494: PUSH
6495: LD_INT 2
6497: PUSH
6498: LD_INT 2
6500: PUSH
6501: LD_INT 3
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: LD_OWVAR 67
6517: ARRAY
6518: PLUS
6519: PUSH
6520: LD_INT 6
6522: PUSH
6523: LD_INT 7
6525: PUSH
6526: LD_INT 8
6528: PUSH
6529: LD_INT 9
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_OWVAR 67
6542: ARRAY
6543: GREATEREQUAL
6544: IFFALSE 6612
// begin extraSpot := spot - 1 ;
6546: LD_ADDR_VAR 0 6
6550: PUSH
6551: LD_VAR 0 5
6555: PUSH
6556: LD_INT 1
6558: MINUS
6559: ST_TO_ADDR
// if extraSpot < 1 then
6560: LD_VAR 0 6
6564: PUSH
6565: LD_INT 1
6567: LESS
6568: IFFALSE 6578
// extraSpot := 3 ;
6570: LD_ADDR_VAR 0 6
6574: PUSH
6575: LD_INT 3
6577: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , strength ) ;
6578: LD_ADDR_VAR 0 4
6582: PUSH
6583: LD_VAR 0 6
6587: PPUSH
6588: LD_EXP 12
6592: PPUSH
6593: CALL 4771 0 2
6597: ST_TO_ADDR
// if Difficulty > 1 then
6598: LD_OWVAR 67
6602: PUSH
6603: LD_INT 1
6605: GREATER
6606: IFFALSE 6612
// PrepareRussianExtraInfantry ;
6608: CALL 5793 0 0
// end ; repeat wait ( 0 0$2 ) ;
6612: LD_INT 70
6614: PPUSH
6615: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
6619: LD_ADDR_VAR 0 8
6623: PUSH
6624: LD_INT 22
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 69
6638: ST_TO_ADDR
// for i in attackers do
6639: LD_ADDR_VAR 0 1
6643: PUSH
6644: LD_VAR 0 3
6648: PUSH
6649: FOR_IN
6650: IFFALSE 6955
// begin if not IsOk ( i ) then
6652: LD_VAR 0 1
6656: PPUSH
6657: CALL_OW 302
6661: NOT
6662: IFFALSE 6682
// begin attackers := attackers diff i ;
6664: LD_ADDR_VAR 0 3
6668: PUSH
6669: LD_VAR 0 3
6673: PUSH
6674: LD_VAR 0 1
6678: DIFF
6679: ST_TO_ADDR
// continue ;
6680: GO 6649
// end ; if GetType ( i ) = unit_vehicle then
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 247
6691: PUSH
6692: LD_INT 2
6694: EQUAL
6695: IFFALSE 6719
// AgressiveMove ( i , paths [ spot ] ) else
6697: LD_VAR 0 1
6701: PPUSH
6702: LD_VAR 0 7
6706: PUSH
6707: LD_VAR 0 5
6711: ARRAY
6712: PPUSH
6713: CALL 56619 0 2
6717: GO 6953
// begin if GetClass ( i ) = class_bazooker then
6719: LD_VAR 0 1
6723: PPUSH
6724: CALL_OW 257
6728: PUSH
6729: LD_INT 9
6731: EQUAL
6732: IFFALSE 6929
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
6734: LD_VAR 0 1
6738: PPUSH
6739: LD_VAR 0 8
6743: PPUSH
6744: LD_VAR 0 1
6748: PPUSH
6749: CALL_OW 74
6753: PPUSH
6754: CALL_OW 296
6758: PUSH
6759: LD_INT 12
6761: GREATER
6762: IFFALSE 6790
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
6764: LD_VAR 0 1
6768: PPUSH
6769: LD_VAR 0 8
6773: PPUSH
6774: LD_VAR 0 1
6778: PPUSH
6779: CALL_OW 74
6783: PPUSH
6784: CALL 58251 0 2
6788: GO 6927
// begin e := NearestUnitToUnit ( enemy , i ) ;
6790: LD_ADDR_VAR 0 2
6794: PUSH
6795: LD_VAR 0 8
6799: PPUSH
6800: LD_VAR 0 1
6804: PPUSH
6805: CALL_OW 74
6809: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
6810: LD_INT 1
6812: PPUSH
6813: LD_INT 3
6815: PPUSH
6816: CALL_OW 12
6820: PUSH
6821: LD_INT 1
6823: DOUBLE
6824: EQUAL
6825: IFTRUE 6829
6827: GO 6846
6829: POP
// ComAttackUnit ( i , e ) ; 2 :
6830: LD_VAR 0 1
6834: PPUSH
6835: LD_VAR 0 2
6839: PPUSH
6840: CALL_OW 115
6844: GO 6927
6846: LD_INT 2
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6886
6854: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
6855: LD_VAR 0 1
6859: PPUSH
6860: LD_VAR 0 2
6864: PPUSH
6865: CALL_OW 250
6869: PPUSH
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL_OW 251
6879: PPUSH
6880: CALL_OW 153
6884: GO 6927
6886: LD_INT 3
6888: DOUBLE
6889: EQUAL
6890: IFTRUE 6894
6892: GO 6926
6894: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
6895: LD_VAR 0 1
6899: PPUSH
6900: LD_VAR 0 2
6904: PPUSH
6905: CALL_OW 250
6909: PPUSH
6910: LD_VAR 0 2
6914: PPUSH
6915: CALL_OW 251
6919: PPUSH
6920: CALL_OW 154
6924: GO 6927
6926: POP
// end ; end else
6927: GO 6953
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6929: LD_VAR 0 1
6933: PPUSH
6934: LD_VAR 0 8
6938: PPUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 74
6948: PPUSH
6949: CALL 58251 0 2
// end ; end ;
6953: GO 6649
6955: POP
6956: POP
// if extraAttackers then
6957: LD_VAR 0 4
6961: IFFALSE 7281
// begin for i in extraAttackers do
6963: LD_ADDR_VAR 0 1
6967: PUSH
6968: LD_VAR 0 4
6972: PUSH
6973: FOR_IN
6974: IFFALSE 7279
// begin if not IsOk ( i ) then
6976: LD_VAR 0 1
6980: PPUSH
6981: CALL_OW 302
6985: NOT
6986: IFFALSE 7006
// begin extraAttackers := extraAttackers diff i ;
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: LD_VAR 0 4
6997: PUSH
6998: LD_VAR 0 1
7002: DIFF
7003: ST_TO_ADDR
// continue ;
7004: GO 6973
// end ; if GetType ( i ) = unit_vehicle then
7006: LD_VAR 0 1
7010: PPUSH
7011: CALL_OW 247
7015: PUSH
7016: LD_INT 2
7018: EQUAL
7019: IFFALSE 7043
// AgressiveMove ( i , paths [ extraSpot ] ) else
7021: LD_VAR 0 1
7025: PPUSH
7026: LD_VAR 0 7
7030: PUSH
7031: LD_VAR 0 6
7035: ARRAY
7036: PPUSH
7037: CALL 56619 0 2
7041: GO 7277
// begin if GetClass ( i ) = class_bazooker then
7043: LD_VAR 0 1
7047: PPUSH
7048: CALL_OW 257
7052: PUSH
7053: LD_INT 9
7055: EQUAL
7056: IFFALSE 7253
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
7058: LD_VAR 0 1
7062: PPUSH
7063: LD_VAR 0 8
7067: PPUSH
7068: LD_VAR 0 1
7072: PPUSH
7073: CALL_OW 74
7077: PPUSH
7078: CALL_OW 296
7082: PUSH
7083: LD_INT 12
7085: GREATER
7086: IFFALSE 7114
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
7088: LD_VAR 0 1
7092: PPUSH
7093: LD_VAR 0 8
7097: PPUSH
7098: LD_VAR 0 1
7102: PPUSH
7103: CALL_OW 74
7107: PPUSH
7108: CALL 58251 0 2
7112: GO 7251
// begin e := NearestUnitToUnit ( enemy , i ) ;
7114: LD_ADDR_VAR 0 2
7118: PUSH
7119: LD_VAR 0 8
7123: PPUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 74
7133: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
7134: LD_INT 1
7136: PPUSH
7137: LD_INT 3
7139: PPUSH
7140: CALL_OW 12
7144: PUSH
7145: LD_INT 1
7147: DOUBLE
7148: EQUAL
7149: IFTRUE 7153
7151: GO 7170
7153: POP
// ComAttackUnit ( i , e ) ; 2 :
7154: LD_VAR 0 1
7158: PPUSH
7159: LD_VAR 0 2
7163: PPUSH
7164: CALL_OW 115
7168: GO 7251
7170: LD_INT 2
7172: DOUBLE
7173: EQUAL
7174: IFTRUE 7178
7176: GO 7210
7178: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
7179: LD_VAR 0 1
7183: PPUSH
7184: LD_VAR 0 2
7188: PPUSH
7189: CALL_OW 250
7193: PPUSH
7194: LD_VAR 0 2
7198: PPUSH
7199: CALL_OW 251
7203: PPUSH
7204: CALL_OW 153
7208: GO 7251
7210: LD_INT 3
7212: DOUBLE
7213: EQUAL
7214: IFTRUE 7218
7216: GO 7250
7218: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
7219: LD_VAR 0 1
7223: PPUSH
7224: LD_VAR 0 2
7228: PPUSH
7229: CALL_OW 250
7233: PPUSH
7234: LD_VAR 0 2
7238: PPUSH
7239: CALL_OW 251
7243: PPUSH
7244: CALL_OW 154
7248: GO 7251
7250: POP
// end ; end else
7251: GO 7277
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7253: LD_VAR 0 1
7257: PPUSH
7258: LD_VAR 0 8
7262: PPUSH
7263: LD_VAR 0 1
7267: PPUSH
7268: CALL_OW 74
7272: PPUSH
7273: CALL 58251 0 2
// end ; end ;
7277: GO 6973
7279: POP
7280: POP
// end ; until not attackers and not extraAttackers ;
7281: LD_VAR 0 3
7285: NOT
7286: IFFALSE 7295
7288: PUSH
7289: LD_VAR 0 4
7293: NOT
7294: AND
7295: IFFALSE 6612
// end ;
7297: PPOPN 8
7299: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] ] ) do var i , tmp , lab , eng , tag , un , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , ruBase , fac ;
7300: LD_INT 22
7302: PUSH
7303: LD_INT 6
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 50
7312: PUSH
7313: EMPTY
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PPUSH
7320: CALL_OW 69
7324: IFFALSE 9035
7326: GO 7328
7328: DISABLE
7329: LD_INT 0
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
// begin enable ;
7346: ENABLE
// ruBase := FilterUnitsInARea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_warehouse ] , [ f_ok ] ] ) ;
7347: LD_ADDR_VAR 0 14
7351: PUSH
7352: LD_INT 26
7354: PPUSH
7355: LD_INT 22
7357: PUSH
7358: LD_INT 6
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 30
7367: PUSH
7368: LD_INT 1
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 50
7377: PUSH
7378: EMPTY
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 70
7390: ST_TO_ADDR
// if ruBase then
7391: LD_VAR 0 14
7395: IFFALSE 7411
// ruBase := ruBase [ 1 ] ;
7397: LD_ADDR_VAR 0 14
7401: PUSH
7402: LD_VAR 0 14
7406: PUSH
7407: LD_INT 1
7409: ARRAY
7410: ST_TO_ADDR
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7411: LD_ADDR_VAR 0 15
7415: PUSH
7416: LD_INT 26
7418: PPUSH
7419: LD_INT 22
7421: PUSH
7422: LD_INT 6
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: PUSH
7429: LD_INT 30
7431: PUSH
7432: LD_INT 3
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 50
7441: PUSH
7442: EMPTY
7443: LIST
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 70
7454: ST_TO_ADDR
// if ruConstructList and fac then
7455: LD_EXP 35
7459: IFFALSE 7467
7461: PUSH
7462: LD_VAR 0 15
7466: AND
7467: IFFALSE 7622
// if BuildingStatus ( fac [ 1 ] ) = bs_idle and CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
7469: LD_VAR 0 15
7473: PUSH
7474: LD_INT 1
7476: ARRAY
7477: PPUSH
7478: CALL_OW 461
7482: PUSH
7483: LD_INT 2
7485: EQUAL
7486: IFFALSE 7555
7488: PUSH
7489: LD_VAR 0 15
7493: PUSH
7494: LD_INT 1
7496: ARRAY
7497: PPUSH
7498: LD_EXP 35
7502: PUSH
7503: LD_INT 1
7505: ARRAY
7506: PUSH
7507: LD_INT 1
7509: ARRAY
7510: PPUSH
7511: LD_EXP 35
7515: PUSH
7516: LD_INT 1
7518: ARRAY
7519: PUSH
7520: LD_INT 2
7522: ARRAY
7523: PPUSH
7524: LD_EXP 35
7528: PUSH
7529: LD_INT 1
7531: ARRAY
7532: PUSH
7533: LD_INT 3
7535: ARRAY
7536: PPUSH
7537: LD_EXP 35
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: PUSH
7546: LD_INT 4
7548: ARRAY
7549: PPUSH
7550: CALL_OW 448
7554: AND
7555: IFFALSE 7622
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
7557: LD_VAR 0 15
7561: PUSH
7562: LD_INT 1
7564: ARRAY
7565: PPUSH
7566: LD_EXP 35
7570: PUSH
7571: LD_INT 1
7573: ARRAY
7574: PUSH
7575: LD_INT 1
7577: ARRAY
7578: PPUSH
7579: LD_EXP 35
7583: PUSH
7584: LD_INT 1
7586: ARRAY
7587: PUSH
7588: LD_INT 2
7590: ARRAY
7591: PPUSH
7592: LD_EXP 35
7596: PUSH
7597: LD_INT 1
7599: ARRAY
7600: PUSH
7601: LD_INT 3
7603: ARRAY
7604: PPUSH
7605: LD_EXP 35
7609: PUSH
7610: LD_INT 1
7612: ARRAY
7613: PUSH
7614: LD_INT 4
7616: ARRAY
7617: PPUSH
7618: CALL_OW 125
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7622: LD_ADDR_VAR 0 2
7626: PUSH
7627: LD_INT 26
7629: PPUSH
7630: LD_INT 21
7632: PUSH
7633: LD_INT 3
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 3
7642: PUSH
7643: LD_INT 24
7645: PUSH
7646: LD_INT 1000
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 70
7665: ST_TO_ADDR
// cr := GetListOfCratesInArea ( crates6Area ) ;
7666: LD_ADDR_VAR 0 8
7670: PUSH
7671: LD_INT 14
7673: PPUSH
7674: CALL_OW 435
7678: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7679: LD_ADDR_VAR 0 9
7683: PUSH
7684: LD_EXP 34
7688: PPUSH
7689: LD_INT 25
7691: PUSH
7692: LD_INT 4
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: LD_INT 50
7701: PUSH
7702: EMPTY
7703: LIST
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PPUSH
7709: CALL_OW 72
7713: ST_TO_ADDR
// if sci then
7714: LD_VAR 0 9
7718: IFFALSE 7945
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
7720: LD_ADDR_VAR 0 11
7724: PUSH
7725: LD_EXP 34
7729: PPUSH
7730: LD_INT 95
7732: PUSH
7733: LD_INT 26
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 120
7742: PUSH
7743: LD_INT 3
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PPUSH
7754: CALL_OW 72
7758: ST_TO_ADDR
// lab := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7759: LD_ADDR_VAR 0 3
7763: PUSH
7764: LD_EXP 34
7768: PPUSH
7769: LD_INT 95
7771: PUSH
7772: LD_INT 26
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 2
7781: PUSH
7782: LD_INT 30
7784: PUSH
7785: LD_INT 6
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 30
7794: PUSH
7795: LD_INT 7
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: LD_INT 30
7804: PUSH
7805: LD_INT 8
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PPUSH
7822: CALL_OW 72
7826: ST_TO_ADDR
// if hurtUnits then
7827: LD_VAR 0 11
7831: IFFALSE 7892
// begin for i in sci do
7833: LD_ADDR_VAR 0 1
7837: PUSH
7838: LD_VAR 0 9
7842: PUSH
7843: FOR_IN
7844: IFFALSE 7888
// if IsInUnit ( i ) then
7846: LD_VAR 0 1
7850: PPUSH
7851: CALL_OW 310
7855: IFFALSE 7868
// ComExitBuilding ( i ) else
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 122
7866: GO 7886
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7868: LD_VAR 0 1
7872: PPUSH
7873: LD_VAR 0 11
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PPUSH
7882: CALL_OW 128
7886: GO 7843
7888: POP
7889: POP
// end else
7890: GO 7945
// if lab then
7892: LD_VAR 0 3
7896: IFFALSE 7945
// begin for i in sci do
7898: LD_ADDR_VAR 0 1
7902: PUSH
7903: LD_VAR 0 9
7907: PUSH
7908: FOR_IN
7909: IFFALSE 7943
// if not IsInUnit ( i ) then
7911: LD_VAR 0 1
7915: PPUSH
7916: CALL_OW 310
7920: NOT
7921: IFFALSE 7941
// ComEnterUnit ( i , lab [ 1 ] ) ;
7923: LD_VAR 0 1
7927: PPUSH
7928: LD_VAR 0 3
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: CALL_OW 120
7941: GO 7908
7943: POP
7944: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
7945: LD_ADDR_VAR 0 4
7949: PUSH
7950: LD_EXP 34
7954: PPUSH
7955: LD_INT 25
7957: PUSH
7958: LD_INT 2
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 72
7969: ST_TO_ADDR
// if eng then
7970: LD_VAR 0 4
7974: IFFALSE 8422
// begin for i in eng do
7976: LD_ADDR_VAR 0 1
7980: PUSH
7981: LD_VAR 0 4
7985: PUSH
7986: FOR_IN
7987: IFFALSE 8420
// begin tag := GetTag ( i ) ;
7989: LD_ADDR_VAR 0 5
7993: PUSH
7994: LD_VAR 0 1
7998: PPUSH
7999: CALL_OW 110
8003: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 256
8013: PUSH
8014: LD_INT 800
8016: LESS
8017: IFFALSE 8029
8019: PUSH
8020: LD_VAR 0 5
8024: PUSH
8025: LD_INT 3
8027: NONEQUAL
8028: AND
8029: IFFALSE 8067
// begin SetTag ( i , tHeal ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 3
8038: PPUSH
8039: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8043: LD_VAR 0 1
8047: PPUSH
8048: LD_INT 97
8050: PPUSH
8051: LD_INT 139
8053: PPUSH
8054: CALL_OW 111
// AddComHold ( i ) ;
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8067: LD_VAR 0 5
8071: PUSH
8072: LD_INT 3
8074: EQUAL
8075: IFFALSE 8092
8077: PUSH
8078: LD_VAR 0 1
8082: PPUSH
8083: CALL_OW 256
8087: PUSH
8088: LD_INT 1000
8090: EQUAL
8091: AND
8092: IFFALSE 8106
// SetTag ( i , 0 ) ;
8094: LD_VAR 0 1
8098: PPUSH
8099: LD_INT 0
8101: PPUSH
8102: CALL_OW 109
// if not tag then
8106: LD_VAR 0 5
8110: NOT
8111: IFFALSE 8207
// begin if cr or tmp then
8113: LD_VAR 0 8
8117: IFTRUE 8125
8119: PUSH
8120: LD_VAR 0 2
8124: OR
8125: IFFALSE 8181
// begin if IsInUnit ( i ) then
8127: LD_VAR 0 1
8131: PPUSH
8132: CALL_OW 310
8136: IFFALSE 8147
// ComExitBuilding ( i ) ;
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 122
// if tmp then
8147: LD_VAR 0 2
8151: IFFALSE 8167
// SetTag ( i , tRepair ) else
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 1
8160: PPUSH
8161: CALL_OW 109
8165: GO 8179
// SetTag ( i , tCrates ) ;
8167: LD_VAR 0 1
8171: PPUSH
8172: LD_INT 2
8174: PPUSH
8175: CALL_OW 109
// end else
8179: GO 8207
// if not IsInUnit ( i ) then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 310
8190: NOT
8191: IFFALSE 8207
// ComEnterUnit ( i , ruBase ) ;
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_VAR 0 14
8202: PPUSH
8203: CALL_OW 120
// end ; if tag = tRepair then
8207: LD_VAR 0 5
8211: PUSH
8212: LD_INT 1
8214: EQUAL
8215: IFFALSE 8295
// begin if not tmp then
8217: LD_VAR 0 2
8221: NOT
8222: IFFALSE 8238
// begin SetTag ( i , 0 ) ;
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_INT 0
8231: PPUSH
8232: CALL_OW 109
// continue ;
8236: GO 7986
// end ; if not HasTask ( i ) then
8238: LD_VAR 0 1
8242: PPUSH
8243: CALL_OW 314
8247: NOT
8248: IFFALSE 8268
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8250: LD_VAR 0 1
8254: PPUSH
8255: LD_VAR 0 2
8259: PUSH
8260: LD_INT 1
8262: ARRAY
8263: PPUSH
8264: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
8268: LD_VAR 0 1
8272: PPUSH
8273: LD_INT 26
8275: PPUSH
8276: CALL_OW 308
8280: NOT
8281: IFFALSE 8295
// ComMoveToArea ( i , ruBaseArea ) ;
8283: LD_VAR 0 1
8287: PPUSH
8288: LD_INT 26
8290: PPUSH
8291: CALL_OW 113
// end ; if tag = tCrates then
8295: LD_VAR 0 5
8299: PUSH
8300: LD_INT 2
8302: EQUAL
8303: IFFALSE 8418
// begin if not cr then
8305: LD_VAR 0 8
8309: NOT
8310: IFFALSE 8326
// begin SetTag ( i , 0 ) ;
8312: LD_VAR 0 1
8316: PPUSH
8317: LD_INT 0
8319: PPUSH
8320: CALL_OW 109
// continue ;
8324: GO 7986
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 314
8335: NOT
8336: IFFALSE 8389
8338: PUSH
8339: LD_INT 81
8341: PUSH
8342: LD_INT 6
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 92
8351: PUSH
8352: LD_VAR 0 8
8356: PUSH
8357: LD_INT 1
8359: ARRAY
8360: PUSH
8361: LD_VAR 0 8
8365: PUSH
8366: LD_INT 2
8368: ARRAY
8369: PUSH
8370: LD_INT 12
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PPUSH
8383: CALL_OW 69
8387: NOT
8388: AND
8389: IFFALSE 8418
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_VAR 0 8
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PPUSH
8405: LD_VAR 0 8
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: CALL_OW 117
// end ; end ;
8418: GO 7986
8420: POP
8421: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8422: LD_ADDR_VAR 0 10
8426: PUSH
8427: LD_EXP 34
8431: PPUSH
8432: LD_INT 2
8434: PUSH
8435: LD_INT 25
8437: PUSH
8438: LD_INT 1
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 25
8447: PUSH
8448: LD_INT 9
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 50
8462: PUSH
8463: EMPTY
8464: LIST
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PPUSH
8470: CALL_OW 72
8474: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
8475: LD_ADDR_VAR 0 12
8479: PUSH
8480: LD_INT 26
8482: PPUSH
8483: LD_INT 81
8485: PUSH
8486: LD_INT 6
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL_OW 70
8497: ST_TO_ADDR
// if sol then
8498: LD_VAR 0 10
8502: IFFALSE 9035
// begin if enemyInBase then
8504: LD_VAR 0 12
8508: IFFALSE 8729
// begin for i in sol do
8510: LD_ADDR_VAR 0 1
8514: PUSH
8515: LD_VAR 0 10
8519: PUSH
8520: FOR_IN
8521: IFFALSE 8725
// begin tw := IsInUnit ( i ) ;
8523: LD_ADDR_VAR 0 7
8527: PUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 310
8537: ST_TO_ADDR
// if tw then
8538: LD_VAR 0 7
8542: IFFALSE 8632
// begin if not tw in FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8544: LD_VAR 0 7
8548: PUSH
8549: LD_INT 22
8551: PUSH
8552: LD_INT 6
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 101
8561: PUSH
8562: LD_INT 2
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 2
8571: PUSH
8572: LD_INT 30
8574: PUSH
8575: LD_INT 5
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: LD_INT 30
8584: PUSH
8585: LD_INT 32
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: LD_INT 30
8594: PUSH
8595: LD_INT 31
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: IN
8618: NOT
8619: IFFALSE 8630
// ComExitBuilding ( i ) ;
8621: LD_VAR 0 1
8625: PPUSH
8626: CALL_OW 122
// end else
8630: GO 8723
// begin un := NearestUnitToUnit ( enemyInBase , i ) ;
8632: LD_ADDR_VAR 0 6
8636: PUSH
8637: LD_VAR 0 12
8641: PPUSH
8642: LD_VAR 0 1
8646: PPUSH
8647: CALL_OW 74
8651: ST_TO_ADDR
// if GetClass ( i ) = class_bazooker and Prob ( 30 ) then
8652: LD_VAR 0 1
8656: PPUSH
8657: CALL_OW 257
8661: PUSH
8662: LD_INT 9
8664: EQUAL
8665: IFFALSE 8676
8667: PUSH
8668: LD_INT 30
8670: PPUSH
8671: CALL_OW 13
8675: AND
8676: IFFALSE 8709
// ComTimeShift ( i , GetX ( un ) , GetY ( un ) ) else
8678: LD_VAR 0 1
8682: PPUSH
8683: LD_VAR 0 6
8687: PPUSH
8688: CALL_OW 250
8692: PPUSH
8693: LD_VAR 0 6
8697: PPUSH
8698: CALL_OW 251
8702: PPUSH
8703: CALL_OW 154
8707: GO 8723
// ComAttackUnit ( i , un ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: LD_VAR 0 6
8718: PPUSH
8719: CALL_OW 115
// end ; end ;
8723: GO 8520
8725: POP
8726: POP
// end else
8727: GO 9035
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8729: LD_ADDR_VAR 0 13
8733: PUSH
8734: LD_INT 26
8736: PPUSH
8737: LD_INT 3
8739: PUSH
8740: LD_INT 62
8742: PUSH
8743: EMPTY
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 2
8752: PUSH
8753: LD_INT 30
8755: PUSH
8756: LD_INT 32
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 30
8765: PUSH
8766: LD_INT 4
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 30
8775: PUSH
8776: LD_INT 31
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 70
8797: ST_TO_ADDR
// if empty then
8798: LD_VAR 0 13
8802: IFFALSE 8819
// empty := ReverseArray ( empty ) ;
8804: LD_ADDR_VAR 0 13
8808: PUSH
8809: LD_VAR 0 13
8813: PPUSH
8814: CALL 48933 0 1
8818: ST_TO_ADDR
// for i in sol do
8819: LD_ADDR_VAR 0 1
8823: PUSH
8824: LD_VAR 0 10
8828: PUSH
8829: FOR_IN
8830: IFFALSE 9033
// begin tag := GetTag ( i ) ;
8832: LD_ADDR_VAR 0 5
8836: PUSH
8837: LD_VAR 0 1
8841: PPUSH
8842: CALL_OW 110
8846: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8847: LD_VAR 0 1
8851: PPUSH
8852: CALL_OW 256
8856: PUSH
8857: LD_INT 1000
8859: LESS
8860: IFFALSE 8872
8862: PUSH
8863: LD_VAR 0 5
8867: PUSH
8868: LD_INT 3
8870: NONEQUAL
8871: AND
8872: IFFALSE 8912
// begin SetTag ( i , tHeal ) ;
8874: LD_VAR 0 1
8878: PPUSH
8879: LD_INT 3
8881: PPUSH
8882: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8886: LD_VAR 0 1
8890: PPUSH
8891: LD_INT 97
8893: PPUSH
8894: LD_INT 139
8896: PPUSH
8897: CALL_OW 111
// AddComHold ( i ) ;
8901: LD_VAR 0 1
8905: PPUSH
8906: CALL_OW 200
// continue ;
8910: GO 8829
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8912: LD_VAR 0 1
8916: PPUSH
8917: CALL_OW 256
8921: PUSH
8922: LD_INT 1000
8924: EQUAL
8925: IFFALSE 8937
8927: PUSH
8928: LD_VAR 0 5
8932: PUSH
8933: LD_INT 3
8935: EQUAL
8936: AND
8937: IFFALSE 8953
// begin SetTag ( i , 0 ) ;
8939: LD_VAR 0 1
8943: PPUSH
8944: LD_INT 0
8946: PPUSH
8947: CALL_OW 109
// continue ;
8951: GO 8829
// end ; if HasTask ( i ) then
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 314
8962: IFFALSE 8966
// continue ;
8964: GO 8829
// if not IsInUnit ( i ) and not tag and empty then
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 310
8975: NOT
8976: IFFALSE 8985
8978: PUSH
8979: LD_VAR 0 5
8983: NOT
8984: AND
8985: IFFALSE 8993
8987: PUSH
8988: LD_VAR 0 13
8992: AND
8993: IFFALSE 9031
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8995: LD_VAR 0 1
8999: PPUSH
9000: LD_VAR 0 13
9004: PUSH
9005: LD_INT 1
9007: ARRAY
9008: PPUSH
9009: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
9013: LD_ADDR_VAR 0 13
9017: PUSH
9018: LD_VAR 0 13
9022: PPUSH
9023: LD_INT 1
9025: PPUSH
9026: CALL_OW 3
9030: ST_TO_ADDR
// end ; end ;
9031: GO 8829
9033: POP
9034: POP
// end ; end ; end ;
9035: PPOPN 15
9037: END
// every 0 0$1 trigger ruTanks do var i , mech , enemy ;
9038: LD_EXP 36
9042: IFFALSE 9624
9044: GO 9046
9046: DISABLE
9047: LD_INT 0
9049: PPUSH
9050: PPUSH
9051: PPUSH
// begin enable ;
9052: ENABLE
// if not ruTanks then
9053: LD_EXP 36
9057: NOT
9058: IFFALSE 9062
// exit ;
9060: GO 9624
// for i in ruTanks do
9062: LD_ADDR_VAR 0 1
9066: PUSH
9067: LD_EXP 36
9071: PUSH
9072: FOR_IN
9073: IFFALSE 9622
// begin if not IsOk ( i ) or GetSide ( i ) <> 6 then
9075: LD_VAR 0 1
9079: PPUSH
9080: CALL_OW 302
9084: NOT
9085: IFTRUE 9102
9087: PUSH
9088: LD_VAR 0 1
9092: PPUSH
9093: CALL_OW 255
9097: PUSH
9098: LD_INT 6
9100: NONEQUAL
9101: OR
9102: IFFALSE 9122
// begin ruTanks := ruTanks diff i ;
9104: LD_ADDR_EXP 36
9108: PUSH
9109: LD_EXP 36
9113: PUSH
9114: LD_VAR 0 1
9118: DIFF
9119: ST_TO_ADDR
// continue ;
9120: GO 9072
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 110
9131: NOT
9132: IFTRUE 9149
9134: PUSH
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL_OW 110
9144: PUSH
9145: LD_INT 0
9147: EQUAL
9148: OR
9149: IFFALSE 9281
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 261
9160: PUSH
9161: LD_INT 50
9163: LESS
9164: IFFALSE 9181
9166: PUSH
9167: LD_VAR 0 1
9171: PPUSH
9172: CALL_OW 262
9176: PUSH
9177: LD_INT 1
9179: EQUAL
9180: AND
9181: IFFALSE 9240
// begin ComMoveXY ( i , 103 , 149 ) ;
9183: LD_VAR 0 1
9187: PPUSH
9188: LD_INT 103
9190: PPUSH
9191: LD_INT 149
9193: PPUSH
9194: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9198: LD_INT 35
9200: PPUSH
9201: CALL_OW 67
// until GetDistUnitXY ( i , 103 , 149 ) < 4 ;
9205: LD_VAR 0 1
9209: PPUSH
9210: LD_INT 103
9212: PPUSH
9213: LD_INT 149
9215: PPUSH
9216: CALL_OW 297
9220: PUSH
9221: LD_INT 4
9223: LESS
9224: IFFALSE 9198
// SetFuel ( i , 100 ) ;
9226: LD_VAR 0 1
9230: PPUSH
9231: LD_INT 100
9233: PPUSH
9234: CALL_OW 240
// end else
9238: GO 9281
// if not IsInArea ( i , ruParkingArea ) then
9240: LD_VAR 0 1
9244: PPUSH
9245: LD_INT 27
9247: PPUSH
9248: CALL_OW 308
9252: NOT
9253: IFFALSE 9269
// ComMoveToArea ( i , ruParkingArea ) else
9255: LD_VAR 0 1
9259: PPUSH
9260: LD_INT 27
9262: PPUSH
9263: CALL_OW 113
9267: GO 9281
// SetTag ( i , tParking ) ;
9269: LD_VAR 0 1
9273: PPUSH
9274: LD_INT 11
9276: PPUSH
9277: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9281: LD_VAR 0 1
9285: PPUSH
9286: CALL_OW 110
9290: PUSH
9291: LD_INT 11
9293: EQUAL
9294: IFFALSE 9424
// begin if GetLives ( i ) < 650 then
9296: LD_VAR 0 1
9300: PPUSH
9301: CALL_OW 256
9305: PUSH
9306: LD_INT 650
9308: LESS
9309: IFFALSE 9401
// begin if not IsDrivenBy ( i ) then
9311: LD_VAR 0 1
9315: PPUSH
9316: CALL_OW 311
9320: NOT
9321: IFFALSE 9325
// continue ;
9323: GO 9072
// mech := IsDrivenBy ( i ) ;
9325: LD_ADDR_VAR 0 2
9329: PUSH
9330: LD_VAR 0 1
9334: PPUSH
9335: CALL_OW 311
9339: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9340: LD_VAR 0 2
9344: PPUSH
9345: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9349: LD_VAR 0 2
9353: PPUSH
9354: LD_VAR 0 1
9358: PPUSH
9359: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9363: LD_INT 35
9365: PPUSH
9366: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9370: LD_VAR 0 1
9374: PPUSH
9375: CALL_OW 256
9379: PUSH
9380: LD_INT 1000
9382: EQUAL
9383: IFFALSE 9363
// ComEnterUnit ( mech , i ) ;
9385: LD_VAR 0 2
9389: PPUSH
9390: LD_VAR 0 1
9394: PPUSH
9395: CALL_OW 120
// end else
9399: GO 9424
// if IsDrivenBy ( i ) then
9401: LD_VAR 0 1
9405: PPUSH
9406: CALL_OW 311
9410: IFFALSE 9424
// SetTag ( i , tAttack ) ;
9412: LD_VAR 0 1
9416: PPUSH
9417: LD_INT 12
9419: PPUSH
9420: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9424: LD_VAR 0 1
9428: PPUSH
9429: CALL_OW 110
9433: PUSH
9434: LD_INT 12
9436: EQUAL
9437: IFFALSE 9620
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
9439: LD_ADDR_VAR 0 3
9443: PUSH
9444: LD_INT 26
9446: PPUSH
9447: LD_INT 81
9449: PUSH
9450: LD_INT 6
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 70
9461: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 256
9471: PUSH
9472: LD_INT 650
9474: LESS
9475: IFFALSE 9500
// begin ComStop ( i ) ;
9477: LD_VAR 0 1
9481: PPUSH
9482: CALL_OW 141
// SetTag ( i , 0 ) ;
9486: LD_VAR 0 1
9490: PPUSH
9491: LD_INT 0
9493: PPUSH
9494: CALL_OW 109
// continue ;
9498: GO 9072
// end ; if enemy then
9500: LD_VAR 0 3
9504: IFFALSE 9544
// begin if not HasTask ( i ) then
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 314
9515: NOT
9516: IFFALSE 9542
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9518: LD_VAR 0 1
9522: PPUSH
9523: LD_VAR 0 3
9527: PPUSH
9528: LD_VAR 0 1
9532: PPUSH
9533: CALL_OW 74
9537: PPUSH
9538: CALL 58251 0 2
// end else
9542: GO 9620
// if ruTanks > 1 then
9544: LD_EXP 36
9548: PUSH
9549: LD_INT 1
9551: GREATER
9552: IFFALSE 9620
// AgressiveMove ( i , [ [ 78 , 112 ] , [ 104 , 106 ] , [ 130 , 107 ] , [ 143 , 83 ] , [ 120 , 35 ] ] ) ;
9554: LD_VAR 0 1
9558: PPUSH
9559: LD_INT 78
9561: PUSH
9562: LD_INT 112
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 104
9571: PUSH
9572: LD_INT 106
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 130
9581: PUSH
9582: LD_INT 107
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: LD_INT 143
9591: PUSH
9592: LD_INT 83
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 120
9601: PUSH
9602: LD_INT 35
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: PPUSH
9616: CALL 56619 0 2
// end ; end ;
9620: GO 9072
9622: POP
9623: POP
// end ;
9624: PPOPN 3
9626: END
// every 0 0$1 trigger InBattle ( 6 ) or playerInBase do
9627: LD_INT 6
9629: PPUSH
9630: CALL_OW 463
9634: IFTRUE 9642
9636: PUSH
9637: LD_EXP 5
9641: OR
9642: IFFALSE 9860
9644: GO 9646
9646: DISABLE
// begin wait ( 0 0$10 ) ;
9647: LD_INT 350
9649: PPUSH
9650: CALL_OW 67
// if playerInBase then
9654: LD_EXP 5
9658: IFFALSE 9667
// wait ( 3 3$00 ) ;
9660: LD_INT 6300
9662: PPUSH
9663: CALL_OW 67
// ruConstructList := [ [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] ] ;
9667: LD_ADDR_EXP 35
9671: PUSH
9672: LD_INT 21
9674: PUSH
9675: LD_INT 3
9677: PUSH
9678: LD_INT 1
9680: PUSH
9681: LD_INT 45
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 21
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: LD_INT 45
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 21
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 1
9716: PUSH
9717: LD_INT 45
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: ST_TO_ADDR
// if Difficulty > 1 then
9731: LD_OWVAR 67
9735: PUSH
9736: LD_INT 1
9738: GREATER
9739: IFFALSE 9774
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gatling_gun ] ) ;
9741: LD_ADDR_EXP 35
9745: PUSH
9746: LD_EXP 35
9750: PPUSH
9751: LD_INT 21
9753: PUSH
9754: LD_INT 3
9756: PUSH
9757: LD_INT 1
9759: PUSH
9760: LD_INT 43
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: PPUSH
9769: CALL 53853 0 2
9773: ST_TO_ADDR
// if Difficulty > 2 then
9774: LD_OWVAR 67
9778: PUSH
9779: LD_INT 2
9781: GREATER
9782: IFFALSE 9817
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9784: LD_ADDR_EXP 35
9788: PUSH
9789: LD_EXP 35
9793: PPUSH
9794: LD_INT 21
9796: PUSH
9797: LD_INT 3
9799: PUSH
9800: LD_INT 1
9802: PUSH
9803: LD_INT 44
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: PPUSH
9812: CALL 53853 0 2
9816: ST_TO_ADDR
// if Difficulty > 3 then
9817: LD_OWVAR 67
9821: PUSH
9822: LD_INT 3
9824: GREATER
9825: IFFALSE 9860
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9827: LD_ADDR_EXP 35
9831: PUSH
9832: LD_EXP 35
9836: PPUSH
9837: LD_INT 21
9839: PUSH
9840: LD_INT 3
9842: PUSH
9843: LD_INT 1
9845: PUSH
9846: LD_INT 44
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL 53853 0 2
9859: ST_TO_ADDR
// end ; end_of_file
9860: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
9861: LD_INT 0
9863: PPUSH
9864: PPUSH
9865: PPUSH
9866: PPUSH
9867: PPUSH
9868: PPUSH
9869: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
9870: LD_ADDR_VAR 0 2
9874: PUSH
9875: LD_STRING 09_env
9877: PPUSH
9878: EMPTY
9879: PPUSH
9880: CALL_OW 30
9884: ST_TO_ADDR
// if not tmp then
9885: LD_VAR 0 2
9889: NOT
9890: IFFALSE 9894
// exit ;
9892: GO 10299
// list := ListEnvironmentArea ( mapArea ) ;
9894: LD_ADDR_VAR 0 7
9898: PUSH
9899: LD_INT 4
9901: PPUSH
9902: CALL_OW 353
9906: ST_TO_ADDR
// if not list then
9907: LD_VAR 0 7
9911: NOT
9912: IFFALSE 9916
// exit ;
9914: GO 10299
// for i in list do
9916: LD_ADDR_VAR 0 3
9920: PUSH
9921: LD_VAR 0 7
9925: PUSH
9926: FOR_IN
9927: IFFALSE 10037
// begin exist := false ;
9929: LD_ADDR_VAR 0 6
9933: PUSH
9934: LD_INT 0
9936: ST_TO_ADDR
// for j in tmp do
9937: LD_ADDR_VAR 0 4
9941: PUSH
9942: LD_VAR 0 2
9946: PUSH
9947: FOR_IN
9948: IFFALSE 10004
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
9950: LD_VAR 0 3
9954: PUSH
9955: LD_INT 1
9957: ARRAY
9958: PUSH
9959: LD_VAR 0 4
9963: PUSH
9964: LD_INT 1
9966: ARRAY
9967: EQUAL
9968: IFFALSE 9990
9970: PUSH
9971: LD_VAR 0 3
9975: PUSH
9976: LD_INT 2
9978: ARRAY
9979: PUSH
9980: LD_VAR 0 4
9984: PUSH
9985: LD_INT 2
9987: ARRAY
9988: EQUAL
9989: AND
9990: IFFALSE 10002
// begin exist := true ;
9992: LD_ADDR_VAR 0 6
9996: PUSH
9997: LD_INT 1
9999: ST_TO_ADDR
// break ;
10000: GO 10004
// end ;
10002: GO 9947
10004: POP
10005: POP
// if not exist then
10006: LD_VAR 0 6
10010: NOT
10011: IFFALSE 10035
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
10013: LD_VAR 0 3
10017: PUSH
10018: LD_INT 1
10020: ARRAY
10021: PPUSH
10022: LD_VAR 0 3
10026: PUSH
10027: LD_INT 2
10029: ARRAY
10030: PPUSH
10031: CALL_OW 347
// end ;
10035: GO 9926
10037: POP
10038: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
10039: LD_ADDR_VAR 0 2
10043: PUSH
10044: LD_STRING 09_animals
10046: PPUSH
10047: EMPTY
10048: PPUSH
10049: CALL_OW 30
10053: ST_TO_ADDR
// if not tmp then
10054: LD_VAR 0 2
10058: NOT
10059: IFFALSE 10063
// exit ;
10061: GO 10299
// InitHc_All ( ) ;
10063: CALL_OW 584
// for i in tmp do
10067: LD_ADDR_VAR 0 3
10071: PUSH
10072: LD_VAR 0 2
10076: PUSH
10077: FOR_IN
10078: IFFALSE 10195
// begin uc_side := 0 ;
10080: LD_ADDR_OWVAR 20
10084: PUSH
10085: LD_INT 0
10087: ST_TO_ADDR
// uc_nation := nation_nature ;
10088: LD_ADDR_OWVAR 21
10092: PUSH
10093: LD_INT 0
10095: ST_TO_ADDR
// hc_gallery :=  ;
10096: LD_ADDR_OWVAR 33
10100: PUSH
10101: LD_STRING 
10103: ST_TO_ADDR
// hc_name :=  ;
10104: LD_ADDR_OWVAR 26
10108: PUSH
10109: LD_STRING 
10111: ST_TO_ADDR
// hc_class := i [ 1 ] ;
10112: LD_ADDR_OWVAR 28
10116: PUSH
10117: LD_VAR 0 3
10121: PUSH
10122: LD_INT 1
10124: ARRAY
10125: ST_TO_ADDR
// un := CreateHuman ;
10126: LD_ADDR_VAR 0 5
10130: PUSH
10131: CALL_OW 44
10135: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
10136: LD_VAR 0 5
10140: PPUSH
10141: LD_VAR 0 3
10145: PUSH
10146: LD_INT 2
10148: ARRAY
10149: PPUSH
10150: LD_VAR 0 3
10154: PUSH
10155: LD_INT 3
10157: ARRAY
10158: PPUSH
10159: LD_VAR 0 3
10163: PUSH
10164: LD_INT 4
10166: ARRAY
10167: PPUSH
10168: LD_INT 0
10170: PPUSH
10171: CALL 56013 0 5
// SetLives ( un , i [ 5 ] ) ;
10175: LD_VAR 0 5
10179: PPUSH
10180: LD_VAR 0 3
10184: PUSH
10185: LD_INT 5
10187: ARRAY
10188: PPUSH
10189: CALL_OW 234
// end ;
10193: GO 10077
10195: POP
10196: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
10197: LD_ADDR_VAR 0 3
10201: PUSH
10202: DOUBLE
10203: LD_INT 1
10205: DEC
10206: ST_TO_ADDR
10207: LD_INT 6
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: LD_INT 4
10215: PUSH
10216: LD_INT 3
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: PUSH
10225: LD_OWVAR 67
10229: ARRAY
10230: PUSH
10231: FOR_TO
10232: IFFALSE 10258
// begin PrepareApeman ( 5 ) ;
10234: LD_INT 5
10236: PPUSH
10237: CALL 49980 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10241: CALL_OW 44
10245: PPUSH
10246: LD_INT 5
10248: PPUSH
10249: LD_INT 0
10251: PPUSH
10252: CALL_OW 49
// end ;
10256: GO 10231
10258: POP
10259: POP
// for i in FilterUnitsInArea ( ruBaseArea , [ f_side , 0 ] ) do
10260: LD_ADDR_VAR 0 3
10264: PUSH
10265: LD_INT 26
10267: PPUSH
10268: LD_INT 22
10270: PUSH
10271: LD_INT 0
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 70
10282: PUSH
10283: FOR_IN
10284: IFFALSE 10297
// RemoveUnit ( i ) ;
10286: LD_VAR 0 3
10290: PPUSH
10291: CALL_OW 64
10295: GO 10283
10297: POP
10298: POP
// end ;
10299: LD_VAR 0 1
10303: RET
// export function CreateDeposits ; var i , oil , sib ; begin
10304: LD_INT 0
10306: PPUSH
10307: PPUSH
10308: PPUSH
10309: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
10310: LD_ADDR_VAR 0 3
10314: PUSH
10315: LD_INT 91
10317: PUSH
10318: LD_INT 13
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 52
10327: PUSH
10328: LD_INT 23
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 115
10337: PUSH
10338: LD_INT 150
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
10350: LD_ADDR_VAR 0 4
10354: PUSH
10355: LD_INT 82
10357: PUSH
10358: LD_INT 42
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 128
10367: PUSH
10368: LD_INT 132
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: ST_TO_ADDR
// for i in oil do
10379: LD_ADDR_VAR 0 2
10383: PUSH
10384: LD_VAR 0 3
10388: PUSH
10389: FOR_IN
10390: IFFALSE 10469
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
10392: LD_VAR 0 2
10396: PUSH
10397: LD_INT 1
10399: ARRAY
10400: PPUSH
10401: LD_VAR 0 2
10405: PUSH
10406: LD_INT 2
10408: ARRAY
10409: PPUSH
10410: LD_INT 2
10412: PPUSH
10413: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10417: LD_VAR 0 2
10421: PUSH
10422: LD_INT 1
10424: ARRAY
10425: PPUSH
10426: LD_VAR 0 2
10430: PUSH
10431: LD_INT 2
10433: ARRAY
10434: PPUSH
10435: LD_INT 2
10437: PPUSH
10438: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10442: LD_VAR 0 2
10446: PUSH
10447: LD_INT 1
10449: ARRAY
10450: PPUSH
10451: LD_VAR 0 2
10455: PUSH
10456: LD_INT 2
10458: ARRAY
10459: PPUSH
10460: LD_INT 6
10462: PPUSH
10463: CALL_OW 441
// end ;
10467: GO 10389
10469: POP
10470: POP
// for i in sib do
10471: LD_ADDR_VAR 0 2
10475: PUSH
10476: LD_VAR 0 4
10480: PUSH
10481: FOR_IN
10482: IFFALSE 10561
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
10484: LD_VAR 0 2
10488: PUSH
10489: LD_INT 1
10491: ARRAY
10492: PPUSH
10493: LD_VAR 0 2
10497: PUSH
10498: LD_INT 2
10500: ARRAY
10501: PPUSH
10502: LD_INT 3
10504: PPUSH
10505: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10509: LD_VAR 0 2
10513: PUSH
10514: LD_INT 1
10516: ARRAY
10517: PPUSH
10518: LD_VAR 0 2
10522: PUSH
10523: LD_INT 2
10525: ARRAY
10526: PPUSH
10527: LD_INT 2
10529: PPUSH
10530: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10534: LD_VAR 0 2
10538: PUSH
10539: LD_INT 1
10541: ARRAY
10542: PPUSH
10543: LD_VAR 0 2
10547: PUSH
10548: LD_INT 2
10550: ARRAY
10551: PPUSH
10552: LD_INT 6
10554: PPUSH
10555: CALL_OW 441
// end ;
10559: GO 10481
10561: POP
10562: POP
// end ;
10563: LD_VAR 0 1
10567: RET
// export function LoadCam ; var i , tmp ; begin
10568: LD_INT 0
10570: PPUSH
10571: PPUSH
10572: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
10573: LD_ADDR_VAR 0 3
10577: PUSH
10578: LD_STRING 09_cameras
10580: PPUSH
10581: EMPTY
10582: PPUSH
10583: CALL_OW 30
10587: ST_TO_ADDR
// if not tmp then
10588: LD_VAR 0 3
10592: NOT
10593: IFFALSE 10597
// exit ;
10595: GO 10639
// for i in tmp do
10597: LD_ADDR_VAR 0 2
10601: PUSH
10602: LD_VAR 0 3
10606: PUSH
10607: FOR_IN
10608: IFFALSE 10637
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
10610: LD_VAR 0 2
10614: PUSH
10615: LD_INT 1
10617: ARRAY
10618: PPUSH
10619: LD_VAR 0 2
10623: PUSH
10624: LD_INT 2
10626: ARRAY
10627: PPUSH
10628: LD_INT 2
10630: PPUSH
10631: CALL_OW 244
10635: GO 10607
10637: POP
10638: POP
// end ;
10639: LD_VAR 0 1
10643: RET
// export function LoadTech ; var i , tmp , default ; begin
10644: LD_INT 0
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
// default := [ 2 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
10650: LD_ADDR_VAR 0 4
10654: PUSH
10655: LD_INT 2
10657: PUSH
10658: LD_INT 2
10660: PUSH
10661: LD_INT 0
10663: PUSH
10664: LD_INT 0
10666: PUSH
10667: LD_INT 0
10669: PUSH
10670: LD_INT 2
10672: PUSH
10673: LD_INT 2
10675: PUSH
10676: LD_INT 0
10678: PUSH
10679: LD_INT 1
10681: PUSH
10682: LD_INT 0
10684: PUSH
10685: LD_INT 2
10687: PUSH
10688: LD_INT 0
10690: PUSH
10691: LD_INT 0
10693: PUSH
10694: LD_INT 0
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 0
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: LD_INT 1
10708: PUSH
10709: LD_INT 0
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: LD_INT 1
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: LD_INT 0
10723: PUSH
10724: LD_INT 0
10726: PUSH
10727: LD_INT 0
10729: PUSH
10730: LD_INT 0
10732: PUSH
10733: LD_INT 0
10735: PUSH
10736: LD_INT 0
10738: PUSH
10739: LD_INT 0
10741: PUSH
10742: LD_INT 0
10744: PUSH
10745: LD_INT 0
10747: PUSH
10748: LD_INT 0
10750: PUSH
10751: LD_INT 0
10753: PUSH
10754: LD_INT 0
10756: PUSH
10757: LD_INT 2
10759: PUSH
10760: LD_INT 0
10762: PUSH
10763: LD_INT 0
10765: PUSH
10766: LD_INT 0
10768: PUSH
10769: LD_INT 1
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: LD_INT 1
10777: PUSH
10778: LD_INT 1
10780: PUSH
10781: LD_INT 0
10783: PUSH
10784: LD_INT 0
10786: PUSH
10787: LD_INT 2
10789: PUSH
10790: LD_INT 2
10792: PUSH
10793: LD_INT 2
10795: PUSH
10796: LD_INT 2
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 2
10804: PUSH
10805: LD_INT 1
10807: PUSH
10808: LD_INT 1
10810: PUSH
10811: LD_INT 0
10813: PUSH
10814: LD_INT 1
10816: PUSH
10817: LD_INT 0
10819: PUSH
10820: LD_INT 0
10822: PUSH
10823: LD_INT 0
10825: PUSH
10826: LD_INT 0
10828: PUSH
10829: LD_INT 0
10831: PUSH
10832: LD_INT 2
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: LD_INT 0
10840: PUSH
10841: LD_INT 0
10843: PUSH
10844: LD_INT 0
10846: PUSH
10847: LD_INT 0
10849: PUSH
10850: LD_INT 1
10852: PUSH
10853: LD_INT 0
10855: PUSH
10856: LD_INT 0
10858: PUSH
10859: LD_INT 2
10861: PUSH
10862: LD_INT 2
10864: PUSH
10865: LD_INT 0
10867: PUSH
10868: LD_INT 0
10870: PUSH
10871: LD_INT 1
10873: PUSH
10874: LD_INT 1
10876: PUSH
10877: LD_INT 1
10879: PUSH
10880: LD_INT 1
10882: PUSH
10883: LD_INT 1
10885: PUSH
10886: LD_INT 1
10888: PUSH
10889: LD_INT 1
10891: PUSH
10892: LD_INT 0
10894: PUSH
10895: LD_INT 0
10897: PUSH
10898: LD_INT 2
10900: PUSH
10901: LD_INT 2
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: LD_INT 0
10912: PUSH
10913: LD_INT 0
10915: PUSH
10916: LD_INT 0
10918: PUSH
10919: LD_INT 1
10921: PUSH
10922: LD_INT 1
10924: PUSH
10925: LD_INT 1
10927: PUSH
10928: LD_INT 1
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: LD_INT 1
10936: PUSH
10937: LD_INT 1
10939: PUSH
10940: LD_INT 1
10942: PUSH
10943: LD_INT 1
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: LD_INT 1
10951: PUSH
10952: LD_INT 1
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: ST_TO_ADDR
// tmp := LoadVariable ( 09_tech , default ) ;
11057: LD_ADDR_VAR 0 3
11061: PUSH
11062: LD_STRING 09_tech
11064: PPUSH
11065: LD_VAR 0 4
11069: PPUSH
11070: CALL_OW 30
11074: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
11075: LD_ADDR_VAR 0 2
11079: PUSH
11080: DOUBLE
11081: LD_INT 1
11083: DEC
11084: ST_TO_ADDR
11085: LD_VAR 0 3
11089: PPUSH
11090: CALL 17877 0 1
11094: PUSH
11095: FOR_TO
11096: IFFALSE 11123
// SetTech ( i , 2 , tmp [ i ] ) ;
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_INT 2
11105: PPUSH
11106: LD_VAR 0 3
11110: PUSH
11111: LD_VAR 0 2
11115: ARRAY
11116: PPUSH
11117: CALL_OW 322
11121: GO 11095
11123: POP
11124: POP
// end ;
11125: LD_VAR 0 1
11129: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
11130: LD_INT 0
11132: PPUSH
11133: PPUSH
11134: PPUSH
11135: PPUSH
11136: PPUSH
11137: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
11138: LD_ADDR_VAR 0 3
11142: PUSH
11143: LD_STRING 09_buildings
11145: PPUSH
11146: EMPTY
11147: PPUSH
11148: CALL_OW 30
11152: ST_TO_ADDR
// for i in tmp do
11153: LD_ADDR_VAR 0 2
11157: PUSH
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_IN
11164: IFFALSE 11558
// begin uc_side := 2 ;
11166: LD_ADDR_OWVAR 20
11170: PUSH
11171: LD_INT 2
11173: ST_TO_ADDR
// uc_nation := nation_arabian ;
11174: LD_ADDR_OWVAR 21
11178: PUSH
11179: LD_INT 2
11181: ST_TO_ADDR
// bc_type := i [ 1 ] ;
11182: LD_ADDR_OWVAR 42
11186: PUSH
11187: LD_VAR 0 2
11191: PUSH
11192: LD_INT 1
11194: ARRAY
11195: ST_TO_ADDR
// bc_level := i [ 5 ] ;
11196: LD_ADDR_OWVAR 43
11200: PUSH
11201: LD_VAR 0 2
11205: PUSH
11206: LD_INT 5
11208: ARRAY
11209: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
11210: LD_ADDR_OWVAR 44
11214: PUSH
11215: LD_INT 9
11217: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
11218: LD_ADDR_OWVAR 45
11222: PUSH
11223: LD_INT 9
11225: ST_TO_ADDR
// if i [ 7 ] then
11226: LD_VAR 0 2
11230: PUSH
11231: LD_INT 7
11233: ARRAY
11234: IFFALSE 11274
// begin bc_kind1 := i [ 7 ] ;
11236: LD_ADDR_OWVAR 44
11240: PUSH
11241: LD_VAR 0 2
11245: PUSH
11246: LD_INT 7
11248: ARRAY
11249: ST_TO_ADDR
// if i [ 8 ] then
11250: LD_VAR 0 2
11254: PUSH
11255: LD_INT 8
11257: ARRAY
11258: IFFALSE 11274
// bc_kind2 := i [ 8 ] ;
11260: LD_ADDR_OWVAR 45
11264: PUSH
11265: LD_VAR 0 2
11269: PUSH
11270: LD_INT 8
11272: ARRAY
11273: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
11274: LD_ADDR_VAR 0 4
11278: PUSH
11279: LD_VAR 0 2
11283: PUSH
11284: LD_INT 2
11286: ARRAY
11287: PPUSH
11288: LD_VAR 0 2
11292: PUSH
11293: LD_INT 3
11295: ARRAY
11296: PPUSH
11297: LD_VAR 0 2
11301: PUSH
11302: LD_INT 4
11304: ARRAY
11305: PPUSH
11306: CALL_OW 47
11310: ST_TO_ADDR
// if i [ 8 ] then
11311: LD_VAR 0 2
11315: PUSH
11316: LD_INT 8
11318: ARRAY
11319: IFFALSE 11339
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
11321: LD_VAR 0 4
11325: PPUSH
11326: LD_VAR 0 2
11330: PUSH
11331: LD_INT 8
11333: ARRAY
11334: PPUSH
11335: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
11339: LD_VAR 0 2
11343: PUSH
11344: LD_INT 1
11346: ARRAY
11347: PUSH
11348: LD_INT 0
11350: PUSH
11351: LD_INT 1
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: IN
11358: IFFALSE 11556
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
11360: LD_ADDR_VAR 0 6
11364: PUSH
11365: LD_STRING 09_materials
11367: PPUSH
11368: LD_INT 100
11370: PUSH
11371: LD_INT 50
11373: PUSH
11374: LD_INT 30
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: LIST
11381: PUSH
11382: EMPTY
11383: LIST
11384: PPUSH
11385: CALL_OW 30
11389: ST_TO_ADDR
// for j := 1 to 3 do
11390: LD_ADDR_VAR 0 5
11394: PUSH
11395: DOUBLE
11396: LD_INT 1
11398: DEC
11399: ST_TO_ADDR
11400: LD_INT 3
11402: PUSH
11403: FOR_TO
11404: IFFALSE 11554
// if mat [ 1 ] [ j ] then
11406: LD_VAR 0 6
11410: PUSH
11411: LD_INT 1
11413: ARRAY
11414: PUSH
11415: LD_VAR 0 5
11419: ARRAY
11420: IFFALSE 11552
// if j > 1 then
11422: LD_VAR 0 5
11426: PUSH
11427: LD_INT 1
11429: GREATER
11430: IFFALSE 11493
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 35 , 25 , 20 , 10 ] [ Difficulty ] ) else
11432: LD_VAR 0 4
11436: PPUSH
11437: CALL_OW 274
11441: PPUSH
11442: LD_VAR 0 5
11446: PPUSH
11447: LD_VAR 0 6
11451: PUSH
11452: LD_INT 1
11454: ARRAY
11455: PUSH
11456: LD_VAR 0 5
11460: ARRAY
11461: PUSH
11462: LD_INT 35
11464: PUSH
11465: LD_INT 25
11467: PUSH
11468: LD_INT 20
11470: PUSH
11471: LD_INT 10
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: PUSH
11480: LD_OWVAR 67
11484: ARRAY
11485: PLUS
11486: PPUSH
11487: CALL_OW 277
11491: GO 11552
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 350 , 250 , 150 , 100 ] [ Difficulty ] ) ;
11493: LD_VAR 0 4
11497: PPUSH
11498: CALL_OW 274
11502: PPUSH
11503: LD_VAR 0 5
11507: PPUSH
11508: LD_VAR 0 6
11512: PUSH
11513: LD_INT 1
11515: ARRAY
11516: PUSH
11517: LD_VAR 0 5
11521: ARRAY
11522: PUSH
11523: LD_INT 350
11525: PUSH
11526: LD_INT 250
11528: PUSH
11529: LD_INT 150
11531: PUSH
11532: LD_INT 100
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: PUSH
11541: LD_OWVAR 67
11545: ARRAY
11546: PLUS
11547: PPUSH
11548: CALL_OW 277
11552: GO 11403
11554: POP
11555: POP
// end ; end ;
11556: GO 11163
11558: POP
11559: POP
// end ;
11560: LD_VAR 0 1
11564: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
11565: LD_INT 0
11567: PPUSH
11568: PPUSH
// area = ListEnvironmentArea ( area ) ;
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: LD_VAR 0 2
11578: PPUSH
11579: CALL_OW 353
11583: ST_TO_ADDR
// if bulldozer > 0 then
11584: LD_VAR 0 1
11588: PUSH
11589: LD_INT 0
11591: GREATER
11592: IFFALSE 11703
// for i = area downto 1 do
11594: LD_ADDR_VAR 0 4
11598: PUSH
11599: DOUBLE
11600: LD_VAR 0 2
11604: INC
11605: ST_TO_ADDR
11606: LD_INT 1
11608: PUSH
11609: FOR_DOWNTO
11610: IFFALSE 11701
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
11612: LD_VAR 0 2
11616: PUSH
11617: LD_VAR 0 4
11621: ARRAY
11622: PUSH
11623: LD_INT 1
11625: ARRAY
11626: PPUSH
11627: LD_VAR 0 2
11631: PUSH
11632: LD_VAR 0 4
11636: ARRAY
11637: PUSH
11638: LD_INT 2
11640: ARRAY
11641: PPUSH
11642: CALL_OW 351
11646: IFFALSE 11699
// if not HasTask ( bulldozer ) then
11648: LD_VAR 0 1
11652: PPUSH
11653: CALL_OW 314
11657: NOT
11658: IFFALSE 11699
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
11660: LD_VAR 0 1
11664: PPUSH
11665: LD_VAR 0 2
11669: PUSH
11670: LD_VAR 0 4
11674: ARRAY
11675: PUSH
11676: LD_INT 1
11678: ARRAY
11679: PPUSH
11680: LD_VAR 0 2
11684: PUSH
11685: LD_VAR 0 4
11689: ARRAY
11690: PUSH
11691: LD_INT 2
11693: ARRAY
11694: PPUSH
11695: CALL_OW 171
11699: GO 11609
11701: POP
11702: POP
// end ; end_of_file
11703: LD_VAR 0 3
11707: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11708: LD_VAR 0 1
11712: PPUSH
11713: LD_VAR 0 2
11717: PPUSH
11718: CALL 75607 0 2
// if GetControl ( vehicle ) = control_apeman then
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 263
11731: PUSH
11732: LD_INT 5
11734: EQUAL
11735: IFFALSE 11747
// begin apeDriver := true ;
11737: LD_ADDR_EXP 8
11741: PUSH
11742: LD_INT 1
11744: ST_TO_ADDR
// exit ;
11745: GO 11800
// end ; if GetSide ( factory ) = 6 then
11747: LD_VAR 0 2
11751: PPUSH
11752: CALL_OW 255
11756: PUSH
11757: LD_INT 6
11759: EQUAL
11760: IFFALSE 11800
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
11762: LD_ADDR_EXP 35
11766: PUSH
11767: LD_EXP 35
11771: PPUSH
11772: LD_INT 1
11774: PPUSH
11775: CALL_OW 3
11779: ST_TO_ADDR
// ruTanks := Join ( ruTanks , vehicle ) ;
11780: LD_ADDR_EXP 36
11784: PUSH
11785: LD_EXP 36
11789: PPUSH
11790: LD_VAR 0 1
11794: PPUSH
11795: CALL 53853 0 2
11799: ST_TO_ADDR
// end ; end ;
11800: PPOPN 2
11802: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) = 6 and not See ( 2 , unit ) then
11803: LD_VAR 0 2
11807: PPUSH
11808: CALL_OW 255
11812: PUSH
11813: LD_INT 6
11815: EQUAL
11816: IFFALSE 11833
11818: PUSH
11819: LD_INT 2
11821: PPUSH
11822: LD_VAR 0 2
11826: PPUSH
11827: CALL_OW 292
11831: NOT
11832: AND
11833: IFFALSE 11847
// SetLives ( unit , 1000 ) ;
11835: LD_VAR 0 2
11839: PPUSH
11840: LD_INT 1000
11842: PPUSH
11843: CALL_OW 234
// end ;
11847: PPOPN 2
11849: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area , fac , arm ;
11850: LD_INT 0
11852: PPUSH
11853: PPUSH
11854: PPUSH
11855: PPUSH
// begin if GetSide ( driver ) = 3 then
11856: LD_VAR 0 1
11860: PPUSH
11861: CALL_OW 255
11865: PUSH
11866: LD_INT 3
11868: EQUAL
11869: IFFALSE 12010
// begin tag := GetTag ( driver ) ;
11871: LD_ADDR_VAR 0 5
11875: PUSH
11876: LD_VAR 0 1
11880: PPUSH
11881: CALL_OW 110
11885: ST_TO_ADDR
// area := [ ruSpawn1AArea , ruSpawn2AArea , ruSpawn3AArea ] [ tag ] ;
11886: LD_ADDR_VAR 0 6
11890: PUSH
11891: LD_INT 21
11893: PUSH
11894: LD_INT 22
11896: PUSH
11897: LD_INT 23
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: LIST
11904: PUSH
11905: LD_VAR 0 5
11909: ARRAY
11910: ST_TO_ADDR
// if not area then
11911: LD_VAR 0 6
11915: NOT
11916: IFFALSE 11920
// exit ;
11918: GO 12278
// repeat ComMoveToArea ( driver , area ) ;
11920: LD_VAR 0 1
11924: PPUSH
11925: LD_VAR 0 6
11929: PPUSH
11930: CALL_OW 113
// wait ( 0 0$3 ) ;
11934: LD_INT 105
11936: PPUSH
11937: CALL_OW 67
// if not IsOk ( driver ) then
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 302
11950: NOT
11951: IFFALSE 11955
// exit ;
11953: GO 12278
// until IsInArea ( driver , ruSpawn1Area ) or IsInArea ( driver , ruSpawn2Area ) or IsInArea ( driver , ruSpawn3Area ) ;
11955: LD_VAR 0 1
11959: PPUSH
11960: LD_INT 15
11962: PPUSH
11963: CALL_OW 308
11967: IFTRUE 11983
11969: PUSH
11970: LD_VAR 0 1
11974: PPUSH
11975: LD_INT 17
11977: PPUSH
11978: CALL_OW 308
11982: OR
11983: IFTRUE 11999
11985: PUSH
11986: LD_VAR 0 1
11990: PPUSH
11991: LD_INT 19
11993: PPUSH
11994: CALL_OW 308
11998: OR
11999: IFFALSE 11920
// RemoveUnit ( driver ) ;
12001: LD_VAR 0 1
12005: PPUSH
12006: CALL_OW 64
// end ; if GetSide ( driver ) = 6 then
12010: LD_VAR 0 1
12014: PPUSH
12015: CALL_OW 255
12019: PUSH
12020: LD_INT 6
12022: EQUAL
12023: IFFALSE 12278
// begin ComMoveXY ( driver , 97 , 139 ) ;
12025: LD_VAR 0 1
12029: PPUSH
12030: LD_INT 97
12032: PPUSH
12033: LD_INT 139
12035: PPUSH
12036: CALL_OW 111
// if GetLives ( driver ) < 1000 then
12040: LD_VAR 0 1
12044: PPUSH
12045: CALL_OW 256
12049: PUSH
12050: LD_INT 1000
12052: LESS
12053: IFFALSE 12067
// SetTag ( driver , tHeal ) ;
12055: LD_VAR 0 1
12059: PPUSH
12060: LD_INT 3
12062: PPUSH
12063: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
12067: LD_INT 35
12069: PPUSH
12070: CALL_OW 67
// if IsDead ( driver ) then
12074: LD_VAR 0 1
12078: PPUSH
12079: CALL_OW 301
12083: IFFALSE 12087
// exit ;
12085: GO 12278
// until GetLives ( driver ) = 1000 ;
12087: LD_VAR 0 1
12091: PPUSH
12092: CALL_OW 256
12096: PUSH
12097: LD_INT 1000
12099: EQUAL
12100: IFFALSE 12067
// SetTag ( driver , 0 ) ;
12102: LD_VAR 0 1
12106: PPUSH
12107: LD_INT 0
12109: PPUSH
12110: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12114: LD_ADDR_VAR 0 7
12118: PUSH
12119: LD_INT 26
12121: PPUSH
12122: LD_INT 22
12124: PUSH
12125: LD_INT 6
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 30
12134: PUSH
12135: LD_INT 3
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 50
12144: PUSH
12145: EMPTY
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 70
12157: ST_TO_ADDR
// if fac then
12158: LD_VAR 0 7
12162: IFFALSE 12184
// begin ComEnterUnit ( driver , fac [ 1 ] ) ;
12164: LD_VAR 0 1
12168: PPUSH
12169: LD_VAR 0 7
12173: PUSH
12174: LD_INT 1
12176: ARRAY
12177: PPUSH
12178: CALL_OW 120
// exit ;
12182: GO 12278
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_barracks ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
12184: LD_ADDR_VAR 0 8
12188: PUSH
12189: LD_INT 26
12191: PPUSH
12192: LD_INT 22
12194: PUSH
12195: LD_INT 6
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 30
12204: PUSH
12205: LD_INT 5
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 3
12214: PUSH
12215: LD_INT 62
12217: PUSH
12218: EMPTY
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 50
12227: PUSH
12228: EMPTY
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PPUSH
12237: CALL_OW 70
12241: ST_TO_ADDR
// if arm then
12242: LD_VAR 0 8
12246: IFFALSE 12278
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
12248: LD_VAR 0 1
12252: PPUSH
12253: LD_VAR 0 8
12257: PUSH
12258: LD_INT 1
12260: ARRAY
12261: PPUSH
12262: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
12266: LD_VAR 0 1
12270: PPUSH
12271: LD_INT 1
12273: PPUSH
12274: CALL_OW 183
// end ; end ; end ;
12278: PPOPN 8
12280: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
12281: LD_VAR 0 3
12285: PUSH
12286: LD_INT 17
12288: EQUAL
12289: IFFALSE 12299
// kamikazeTrained := true ;
12291: LD_ADDR_EXP 6
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// end ;
12299: PPOPN 3
12301: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
12302: LD_VAR 0 1
12306: PPUSH
12307: CALL 75549 0 1
// if un in ruTanks then
12311: LD_VAR 0 1
12315: PUSH
12316: LD_EXP 36
12320: IN
12321: IFFALSE 12384
// ruConstructList := Join ( ruConstructList , [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ) ;
12323: LD_ADDR_EXP 35
12327: PUSH
12328: LD_EXP 35
12332: PPUSH
12333: LD_VAR 0 1
12337: PPUSH
12338: CALL_OW 265
12342: PUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: CALL_OW 262
12352: PUSH
12353: LD_VAR 0 1
12357: PPUSH
12358: CALL_OW 263
12362: PUSH
12363: LD_VAR 0 1
12367: PPUSH
12368: CALL_OW 264
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: PPUSH
12379: CALL 53853 0 2
12383: ST_TO_ADDR
// if un = Schulz then
12384: LD_VAR 0 1
12388: PUSH
12389: LD_EXP 24
12393: EQUAL
12394: IFFALSE 12403
// YouLost ( Schulz ) ;
12396: LD_STRING Schulz
12398: PPUSH
12399: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
12403: LD_VAR 0 1
12407: PUSH
12408: LD_EXP 13
12412: EQUAL
12413: IFFALSE 12430
12415: PUSH
12416: LD_VAR 0 1
12420: PPUSH
12421: CALL_OW 255
12425: PUSH
12426: LD_INT 2
12428: EQUAL
12429: AND
12430: IFFALSE 12439
// YouLost ( Heike ) ;
12432: LD_STRING Heike
12434: PPUSH
12435: CALL_OW 104
// end ; end_of_file
12439: PPOPN 1
12441: END
// export function Action ; begin
12442: LD_INT 0
12444: PPUSH
// InGameOn ;
12445: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
12449: LD_INT 1
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_INT 2
12457: PPUSH
12458: LD_INT 32963
12460: NEG
12461: PPUSH
12462: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
12466: LD_INT 1
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: LD_INT 2
12474: PPUSH
12475: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
12479: LD_INT 173
12481: PPUSH
12482: LD_INT 149
12484: PPUSH
12485: CALL_OW 86
// PrepareExtraRussianBase ;
12489: CALL 3366 0 0
// wait ( 0 0$2 ) ;
12493: LD_INT 70
12495: PPUSH
12496: CALL_OW 67
// InGameOff ;
12500: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
12504: LD_STRING M6
12506: PPUSH
12507: CALL_OW 337
// if Count ( UnitFilter ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] , [ f_ok ] ) ) = Count ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] ) then
12511: LD_EXP 14
12515: PUSH
12516: LD_EXP 15
12520: PUSH
12521: LD_EXP 17
12525: PUSH
12526: LD_EXP 18
12530: PUSH
12531: LD_EXP 20
12535: PUSH
12536: LD_EXP 21
12540: PUSH
12541: LD_EXP 22
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: PPUSH
12555: LD_INT 50
12557: PUSH
12558: EMPTY
12559: LIST
12560: PPUSH
12561: CALL_OW 72
12565: PPUSH
12566: CALL 17877 0 1
12570: PUSH
12571: LD_EXP 14
12575: PUSH
12576: LD_EXP 15
12580: PUSH
12581: LD_EXP 17
12585: PUSH
12586: LD_EXP 18
12590: PUSH
12591: LD_EXP 20
12595: PUSH
12596: LD_EXP 21
12600: PUSH
12601: LD_EXP 22
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: PPUSH
12615: CALL 17877 0 1
12619: EQUAL
12620: IFFALSE 12629
// SetAchievement ( ACH_KNIGHT ) ;
12622: LD_STRING ACH_KNIGHT
12624: PPUSH
12625: CALL_OW 543
// SaveForQuickRestart ;
12629: CALL_OW 22
// end ;
12633: LD_VAR 0 1
12637: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
12638: LD_EXP 5
12642: IFFALSE 12655
12644: PUSH
12645: LD_EXP 33
12649: PPUSH
12650: CALL_OW 302
12654: AND
12655: IFFALSE 12668
12657: PUSH
12658: LD_EXP 13
12662: PPUSH
12663: CALL_OW 302
12667: AND
12668: IFFALSE 12739
12670: PUSH
12671: LD_EXP 13
12675: PPUSH
12676: LD_EXP 33
12680: PPUSH
12681: CALL_OW 296
12685: PUSH
12686: LD_INT 9
12688: LESS
12689: IFTRUE 12738
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_INT 2
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 91
12704: PUSH
12705: LD_EXP 13
12709: PUSH
12710: LD_INT 7
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 21
12720: PUSH
12721: LD_INT 3
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: LIST
12732: PPUSH
12733: CALL_OW 69
12737: OR
12738: AND
12739: IFFALSE 12893
12741: GO 12743
12743: DISABLE
// begin ComExit ( Rolf ) ;
12744: LD_EXP 33
12748: PPUSH
12749: CALL 54251 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
12753: LD_EXP 33
12757: PPUSH
12758: LD_EXP 13
12762: PPUSH
12763: CALL_OW 172
// InGameOn ;
12767: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
12771: LD_EXP 13
12775: PPUSH
12776: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
12780: LD_EXP 33
12784: PPUSH
12785: LD_STRING DRf-Reunion-1
12787: PPUSH
12788: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
12792: LD_EXP 33
12796: PPUSH
12797: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
12801: LD_EXP 13
12805: PPUSH
12806: LD_EXP 33
12810: PPUSH
12811: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
12815: LD_EXP 33
12819: PPUSH
12820: LD_EXP 13
12824: PPUSH
12825: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
12829: LD_EXP 13
12833: PPUSH
12834: LD_STRING DH-Reunion-2
12836: PPUSH
12837: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
12841: LD_EXP 33
12845: PPUSH
12846: LD_STRING DRf-Reunion-3
12848: PPUSH
12849: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
12853: LD_EXP 13
12857: PPUSH
12858: LD_STRING DH-Reunion-4
12860: PPUSH
12861: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
12865: LD_EXP 33
12869: PPUSH
12870: LD_STRING DRf-Reunion-5
12872: PPUSH
12873: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
12877: LD_EXP 13
12881: PPUSH
12882: LD_STRING DH-Reunion-6
12884: PPUSH
12885: CALL_OW 88
// InGameOff ;
12889: CALL_OW 9
// end ;
12893: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
12894: LD_EXP 5
12898: NOT
12899: IFFALSE 12948
12901: PUSH
12902: LD_INT 22
12904: PUSH
12905: LD_INT 2
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 91
12914: PUSH
12915: LD_EXP 24
12919: PUSH
12920: LD_INT 10
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 21
12930: PUSH
12931: LD_INT 3
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: PPUSH
12943: CALL_OW 69
12947: AND
12948: IFFALSE 13737
12950: GO 12952
12952: DISABLE
// begin InGameOn ;
12953: CALL_OW 8
// ComExit ( Schulz ) ;
12957: LD_EXP 24
12961: PPUSH
12962: CALL 54251 0 1
// CenterNowOnUnits ( Schulz ) ;
12966: LD_EXP 24
12970: PPUSH
12971: CALL_OW 87
// wait ( 0 0$0.3 ) ;
12975: LD_INT 10
12977: PPUSH
12978: CALL_OW 67
// DialogueOn ;
12982: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
12986: LD_EXP 24
12990: PPUSH
12991: LD_STRING DL-Def-1
12993: PPUSH
12994: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
12998: LD_EXP 24
13002: PPUSH
13003: LD_STRING DL-Def-2
13005: PPUSH
13006: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
13010: LD_EXP 24
13014: PPUSH
13015: LD_STRING DL-Def-3
13017: PPUSH
13018: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
13022: LD_EXP 25
13026: PPUSH
13027: CALL_OW 302
13031: IFFALSE 13044
13033: PUSH
13034: LD_EXP 23
13038: PPUSH
13039: CALL_OW 302
13043: AND
13044: IFFALSE 13391
// begin Say ( Basim , DBs-Def-4 ) ;
13046: LD_EXP 25
13050: PPUSH
13051: LD_STRING DBs-Def-4
13053: PPUSH
13054: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13058: LD_EXP 25
13062: PPUSH
13063: LD_STRING DBs-Def-5
13065: PPUSH
13066: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
13070: LD_EXP 23
13074: PPUSH
13075: LD_STRING DA-Def-6
13077: PPUSH
13078: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
13082: LD_EXP 25
13086: PPUSH
13087: LD_STRING DBs-Def-7
13089: PPUSH
13090: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
13094: LD_EXP 23
13098: PPUSH
13099: LD_STRING DA-Def-8
13101: PPUSH
13102: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
13106: LD_EXP 23
13110: PPUSH
13111: LD_STRING DA-Def-9
13113: PPUSH
13114: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
13118: LD_EXP 25
13122: PPUSH
13123: LD_STRING DBs-Def-10
13125: PPUSH
13126: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
13130: LD_EXP 23
13134: PPUSH
13135: LD_STRING DA-Def-11
13137: PPUSH
13138: CALL_OW 88
// if Query ( QTech ) = 1 then
13142: LD_STRING QTech
13144: PPUSH
13145: CALL_OW 97
13149: PUSH
13150: LD_INT 1
13152: EQUAL
13153: IFFALSE 13261
// begin Say ( Schulz , DL-Tech-1 ) ;
13155: LD_EXP 24
13159: PPUSH
13160: LD_STRING DL-Tech-1
13162: PPUSH
13163: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
13167: LD_EXP 24
13171: PPUSH
13172: LD_STRING DL-Tech-2
13174: PPUSH
13175: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
13179: LD_EXP 23
13183: PPUSH
13184: LD_STRING DA-Tech-3
13186: PPUSH
13187: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
13191: LD_EXP 18
13195: PPUSH
13196: LD_STRING DK-Tech-4
13198: PPUSH
13199: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
13203: LD_EXP 18
13207: PPUSH
13208: LD_STRING DK-Tech-5
13210: PPUSH
13211: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
13215: LD_EXP 25
13219: PPUSH
13220: LD_STRING DBs-Tech-6
13222: PPUSH
13223: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
13227: LD_EXP 18
13231: PPUSH
13232: LD_STRING DK-Tech-7
13234: PPUSH
13235: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
13239: LD_INT 3
13241: PPUSH
13242: LD_INT 2
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
13252: LD_STRING M7a
13254: PPUSH
13255: CALL_OW 604
// end else
13259: GO 13389
// begin Say ( Schulz , DL-Tech-a-1 ) ;
13261: LD_EXP 24
13265: PPUSH
13266: LD_STRING DL-Tech-a-1
13268: PPUSH
13269: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
13273: LD_EXP 24
13277: PPUSH
13278: LD_STRING DL-Tech-a-2
13280: PPUSH
13281: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
13285: LD_EXP 25
13289: PPUSH
13290: LD_STRING DBs-Tech-a-3
13292: PPUSH
13293: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
13297: LD_EXP 18
13301: PPUSH
13302: LD_STRING DK-Tech-a-4
13304: PPUSH
13305: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
13309: LD_EXP 18
13313: PPUSH
13314: LD_STRING DK-Tech-a-5
13316: PPUSH
13317: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
13321: LD_EXP 23
13325: PPUSH
13326: LD_STRING DA-Tech-a-6
13328: PPUSH
13329: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
13333: LD_EXP 23
13337: PPUSH
13338: LD_STRING DA-Tech-a-7
13340: PPUSH
13341: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
13345: LD_EXP 24
13349: PPUSH
13350: LD_STRING DL-Tech-a-8
13352: PPUSH
13353: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
13357: LD_EXP 23
13361: PPUSH
13362: LD_STRING DA-Tech-a-9
13364: PPUSH
13365: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13369: LD_INT 4
13371: PPUSH
13372: LD_INT 2
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
13382: LD_STRING M7b
13384: PPUSH
13385: CALL_OW 604
// end ; end else
13389: GO 13439
// if IsOk ( Basim ) then
13391: LD_EXP 25
13395: PPUSH
13396: CALL_OW 302
13400: IFFALSE 13439
// begin Say ( Basim , DBs-Def-4 ) ;
13402: LD_EXP 25
13406: PPUSH
13407: LD_STRING DBs-Def-4
13409: PPUSH
13410: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13414: LD_EXP 25
13418: PPUSH
13419: LD_STRING DBs-Def-5
13421: PPUSH
13422: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13426: LD_INT 4
13428: PPUSH
13429: LD_INT 2
13431: PPUSH
13432: LD_INT 1
13434: PPUSH
13435: CALL_OW 322
// end ; DialogueOff ;
13439: CALL_OW 7
// InGameOff ;
13443: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
13447: LD_STRING M7
13449: PPUSH
13450: CALL_OW 337
// playerInBase := true ;
13454: LD_ADDR_EXP 5
13458: PUSH
13459: LD_INT 1
13461: ST_TO_ADDR
// wait ( 0 0$30 ) ;
13462: LD_INT 1050
13464: PPUSH
13465: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13469: LD_INT 35
13471: PPUSH
13472: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) ;
13476: LD_INT 22
13478: PUSH
13479: LD_INT 2
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: LD_INT 50
13488: PUSH
13489: EMPTY
13490: LIST
13491: PUSH
13492: LD_INT 3
13494: PUSH
13495: LD_INT 57
13497: PUSH
13498: EMPTY
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 30
13507: PUSH
13508: LD_INT 30
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: PPUSH
13521: CALL_OW 69
13525: IFFALSE 13469
// if IsOk ( Kurt ) then
13527: LD_EXP 22
13531: PPUSH
13532: CALL_OW 302
13536: IFFALSE 13724
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
13538: LD_INT 22
13540: PUSH
13541: LD_INT 2
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 50
13550: PUSH
13551: EMPTY
13552: LIST
13553: PUSH
13554: LD_INT 3
13556: PUSH
13557: LD_INT 57
13559: PUSH
13560: EMPTY
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 30
13569: PUSH
13570: LD_INT 30
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PPUSH
13583: CALL_OW 69
13587: PUSH
13588: LD_INT 1
13590: ARRAY
13591: PPUSH
13592: CALL_OW 87
// DialogueOn ;
13596: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
13600: LD_EXP 22
13604: PPUSH
13605: LD_STRING DKs-Med-1
13607: PPUSH
13608: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
13612: LD_EXP 22
13616: PPUSH
13617: LD_STRING DKs-Med-2
13619: PPUSH
13620: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
13624: LD_EXP 24
13628: PPUSH
13629: LD_STRING DL-Med-3
13631: PPUSH
13632: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
13636: LD_EXP 24
13640: PPUSH
13641: LD_STRING DL-Med-4
13643: PPUSH
13644: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
13648: LD_EXP 22
13652: PPUSH
13653: LD_STRING DKs-Med-5
13655: PPUSH
13656: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
13660: LD_EXP 22
13664: PPUSH
13665: LD_STRING DKs-Med-6
13667: PPUSH
13668: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
13672: LD_EXP 22
13676: PPUSH
13677: LD_STRING DKs-Med-7
13679: PPUSH
13680: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
13684: LD_EXP 22
13688: PPUSH
13689: LD_STRING DKs-Med-8
13691: PPUSH
13692: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
13696: LD_EXP 24
13700: PPUSH
13701: LD_STRING DL-Med-9
13703: PPUSH
13704: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
13708: LD_EXP 24
13712: PPUSH
13713: LD_STRING DL-Med-10
13715: PPUSH
13716: CALL_OW 88
// DialogueOff ;
13720: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
13724: LD_STRING M8-
13726: PUSH
13727: LD_OWVAR 67
13731: STR
13732: PPUSH
13733: CALL_OW 337
// end ;
13737: END
// every 0 0$1 trigger playerInBase do
13738: LD_EXP 5
13742: IFFALSE 13762
13744: GO 13746
13746: DISABLE
// begin enable ;
13747: ENABLE
// missionTime := missionTime + 0 0$1 ;
13748: LD_ADDR_EXP 9
13752: PUSH
13753: LD_EXP 9
13757: PUSH
13758: LD_INT 35
13760: PLUS
13761: ST_TO_ADDR
// end ;
13762: END
// every 0 0$2 trigger playerInBase and apeDriver do
13763: LD_EXP 5
13767: IFFALSE 13775
13769: PUSH
13770: LD_EXP 8
13774: AND
13775: IFFALSE 14172
13777: GO 13779
13779: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
13780: LD_STRING M7a_out
13782: PPUSH
13783: CALL_OW 337
// wait ( 0 0$2 ) ;
13787: LD_INT 70
13789: PPUSH
13790: CALL_OW 67
// DialogueOn ;
13794: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
13798: LD_INT 22
13800: PUSH
13801: LD_INT 2
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 33
13810: PUSH
13811: LD_INT 5
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PPUSH
13822: CALL_OW 69
13826: PUSH
13827: LD_INT 1
13829: ARRAY
13830: PPUSH
13831: CALL_OW 87
// if IsOk ( Mia ) then
13835: LD_EXP 27
13839: PPUSH
13840: CALL_OW 302
13844: IFFALSE 13870
// begin Say ( Mia , DMm-Apedrive-1 ) ;
13846: LD_EXP 27
13850: PPUSH
13851: LD_STRING DMm-Apedrive-1
13853: PPUSH
13854: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
13858: LD_EXP 15
13862: PPUSH
13863: LD_STRING DM-Apedrive-2
13865: PPUSH
13866: CALL_OW 88
// end ; if IsOk ( Jenna ) then
13870: LD_EXP 29
13874: PPUSH
13875: CALL_OW 302
13879: IFFALSE 14168
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
13881: LD_EXP 29
13885: PPUSH
13886: LD_STRING DJm-Apedrive-3
13888: PPUSH
13889: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
13893: LD_EXP 29
13897: PPUSH
13898: LD_STRING DJm-Apedrive-4
13900: PPUSH
13901: CALL_OW 88
// if IsOk ( Basim ) then
13905: LD_EXP 25
13909: PPUSH
13910: CALL_OW 302
13914: IFFALSE 14168
// begin Say ( Basim , DBs-Apedrive-5 ) ;
13916: LD_EXP 25
13920: PPUSH
13921: LD_STRING DBs-Apedrive-5
13923: PPUSH
13924: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
13928: LD_EXP 25
13932: PPUSH
13933: LD_STRING DBs-Apedrive-6
13935: PPUSH
13936: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
13940: LD_EXP 29
13944: PPUSH
13945: LD_STRING DJm-Apedrive-7
13947: PPUSH
13948: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
13952: LD_EXP 25
13956: PPUSH
13957: LD_STRING DBs-Apedrive-8
13959: PPUSH
13960: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
13964: LD_EXP 29
13968: PPUSH
13969: LD_STRING DJm-Apedrive-9
13971: PPUSH
13972: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
13976: LD_EXP 25
13980: PPUSH
13981: LD_STRING DBs-Apedrive-10
13983: PPUSH
13984: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
13988: LD_EXP 29
13992: PPUSH
13993: LD_STRING DJm-Apedrive-11
13995: PPUSH
13996: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
14000: LD_EXP 18
14004: PPUSH
14005: LD_STRING DK-Apedrive-12
14007: PPUSH
14008: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
14012: LD_EXP 29
14016: PPUSH
14017: LD_STRING DJm-Apedrive-13
14019: PPUSH
14020: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
14024: LD_EXP 29
14028: PPUSH
14029: LD_STRING DJm-Apedrive-14
14031: PPUSH
14032: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
14036: LD_EXP 29
14040: PPUSH
14041: LD_STRING DJm-Apedrive-15
14043: PPUSH
14044: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
14048: LD_EXP 29
14052: PPUSH
14053: LD_STRING DJm-Apedrive-16
14055: PPUSH
14056: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
14060: LD_EXP 27
14064: PPUSH
14065: LD_STRING DMm-Apedrive-17
14067: PPUSH
14068: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
14072: LD_EXP 27
14076: PPUSH
14077: LD_STRING DMm-Apedrive-18
14079: PPUSH
14080: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
14084: LD_EXP 27
14088: PPUSH
14089: LD_STRING DMm-Apedrive-19
14091: PPUSH
14092: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
14096: LD_EXP 27
14100: PPUSH
14101: LD_STRING DMm-Apedrive-20
14103: PPUSH
14104: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
14108: LD_EXP 18
14112: PPUSH
14113: LD_STRING DK-Apedrive-21
14115: PPUSH
14116: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
14120: LD_EXP 18
14124: PPUSH
14125: LD_STRING DK-Apedrive-22
14127: PPUSH
14128: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
14132: LD_EXP 13
14136: PPUSH
14137: LD_STRING DH-Apedrive-23
14139: PPUSH
14140: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
14144: LD_EXP 26
14148: PPUSH
14149: LD_STRING DLt-Apedrive-24
14151: PPUSH
14152: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
14156: LD_EXP 26
14160: PPUSH
14161: LD_STRING DLt-Apedrive-25
14163: PPUSH
14164: CALL_OW 88
// end ; end ; DialogueOff ;
14168: CALL_OW 7
// end ;
14172: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
14173: LD_EXP 5
14177: IFFALSE 14185
14179: PUSH
14180: LD_EXP 6
14184: AND
14185: IFFALSE 14197
14187: GO 14189
14189: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
14190: LD_STRING M7b_out
14192: PPUSH
14193: CALL_OW 337
14197: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
14198: LD_EXP 5
14202: IFFALSE 14248
14204: PUSH
14205: LD_INT 22
14207: PUSH
14208: LD_INT 2
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 30
14217: PUSH
14218: LD_INT 3
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 3
14227: PUSH
14228: LD_INT 58
14230: PUSH
14231: EMPTY
14232: LIST
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: PPUSH
14243: CALL_OW 69
14247: AND
14248: IFFALSE 14261
14250: PUSH
14251: LD_EXP 13
14255: PPUSH
14256: CALL_OW 302
14260: AND
14261: IFFALSE 14274
14263: PUSH
14264: LD_EXP 24
14268: PPUSH
14269: CALL_OW 302
14273: AND
14274: IFFALSE 14447
14276: GO 14278
14278: DISABLE
// begin DialogueOn ;
14279: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
14283: LD_EXP 24
14287: PPUSH
14288: LD_STRING DL-Mort-1
14290: PPUSH
14291: CALL_OW 88
// if IsOk ( Markov ) then
14295: LD_EXP 20
14299: PPUSH
14300: CALL_OW 302
14304: IFFALSE 14357
// begin Say ( Heike , DH-Mort-2 ) ;
14306: LD_EXP 13
14310: PPUSH
14311: LD_STRING DH-Mort-2
14313: PPUSH
14314: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
14318: LD_EXP 20
14322: PPUSH
14323: LD_STRING DMar-Mort-3
14325: PPUSH
14326: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
14330: LD_EXP 20
14334: PPUSH
14335: LD_STRING DMar-Mort-4
14337: PPUSH
14338: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14342: LD_INT 88
14344: PPUSH
14345: LD_INT 2
14347: PPUSH
14348: LD_INT 1
14350: PPUSH
14351: CALL_OW 322
// end else
14355: GO 14443
// if IsOk ( Olaf ) then
14357: LD_EXP 21
14361: PPUSH
14362: CALL_OW 302
14366: IFFALSE 14419
// begin Say ( Heike , DH-Mort-a-2 ) ;
14368: LD_EXP 13
14372: PPUSH
14373: LD_STRING DH-Mort-a-2
14375: PPUSH
14376: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
14380: LD_EXP 21
14384: PPUSH
14385: LD_STRING DO-Mort-a-3
14387: PPUSH
14388: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
14392: LD_EXP 21
14396: PPUSH
14397: LD_STRING DO-Mort-a-4
14399: PPUSH
14400: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14404: LD_INT 88
14406: PPUSH
14407: LD_INT 2
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: CALL_OW 322
// end else
14417: GO 14443
// begin Say ( Heike , DH-Mort-a-5 ) ;
14419: LD_EXP 13
14423: PPUSH
14424: LD_STRING DH-Mort-a-5
14426: PPUSH
14427: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
14431: LD_EXP 13
14435: PPUSH
14436: LD_STRING DH-Mort-a-6
14438: PPUSH
14439: CALL_OW 88
// end ; DialogueOff ;
14443: CALL_OW 7
// end ;
14447: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
14448: LD_EXP 18
14452: PPUSH
14453: CALL_OW 256
14457: PUSH
14458: LD_INT 10
14460: LESS
14461: IFFALSE 14563
14463: GO 14465
14465: DISABLE
// begin DialogueOn ;
14466: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14470: LD_EXP 18
14474: PPUSH
14475: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
14479: LD_EXP 18
14483: PPUSH
14484: LD_STRING DK-Death-1
14486: PPUSH
14487: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
14491: LD_EXP 18
14495: PPUSH
14496: LD_STRING DK-Death-2
14498: PPUSH
14499: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
14503: LD_EXP 18
14507: PPUSH
14508: LD_STRING DK-Death-3
14510: PPUSH
14511: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
14515: LD_EXP 13
14519: PPUSH
14520: LD_STRING DH-Death-4
14522: PPUSH
14523: CALL_OW 88
// if IsOk ( Markov ) then
14527: LD_EXP 20
14531: PPUSH
14532: CALL_OW 302
14536: IFFALSE 14550
// Say ( Markov , DMar-Death-5 ) ;
14538: LD_EXP 20
14542: PPUSH
14543: LD_STRING DMar-Death-5
14545: PPUSH
14546: CALL_OW 88
// DialogueOff ;
14550: CALL_OW 7
// KillUnit ( Kaia ) ;
14554: LD_EXP 18
14558: PPUSH
14559: CALL_OW 66
// end ;
14563: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib , m1 , m2 , m3 ;
14564: LD_EXP 10
14568: IFFALSE 14597
14570: PUSH
14571: LD_INT 81
14573: PUSH
14574: LD_INT 2
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 50
14583: PUSH
14584: EMPTY
14585: LIST
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PPUSH
14591: CALL_OW 69
14595: NOT
14596: AND
14597: IFFALSE 15542
14599: GO 14601
14601: DISABLE
14602: LD_INT 0
14604: PPUSH
14605: PPUSH
14606: PPUSH
14607: PPUSH
14608: PPUSH
// begin m1 := false ;
14609: LD_ADDR_VAR 0 3
14613: PUSH
14614: LD_INT 0
14616: ST_TO_ADDR
// m2 := false ;
14617: LD_ADDR_VAR 0 4
14621: PUSH
14622: LD_INT 0
14624: ST_TO_ADDR
// m3 := false ;
14625: LD_ADDR_VAR 0 5
14629: PUSH
14630: LD_INT 0
14632: ST_TO_ADDR
// InGameOn ;
14633: CALL_OW 8
// DialogueOn ;
14637: CALL_OW 6
// if time09 + time09c + tick < 80 80$00 then
14641: LD_EXP 3
14645: PUSH
14646: LD_EXP 4
14650: PLUS
14651: PUSH
14652: LD_OWVAR 1
14656: PLUS
14657: PUSH
14658: LD_INT 168000
14660: LESS
14661: IFFALSE 14670
// SetAchievement ( ACH_HSPEED_9 ) ;
14663: LD_STRING ACH_HSPEED_9
14665: PPUSH
14666: CALL_OW 543
// CenterOnNow ( Schulz ) ;
14670: LD_EXP 24
14674: PPUSH
14675: CALL 58132 0 1
// dwait ( 0 0$0.3 ) ;
14679: LD_INT 10
14681: PPUSH
14682: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
14686: LD_EXP 24
14690: PPUSH
14691: LD_STRING DL-End-1
14693: PPUSH
14694: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
14698: LD_EXP 13
14702: PPUSH
14703: LD_STRING DH-End-2
14705: PPUSH
14706: CALL_OW 88
// if IsOk ( Kaia ) then
14710: LD_EXP 18
14714: PPUSH
14715: CALL_OW 302
14719: IFFALSE 14781
// begin SaveCharacters ( Kaia , 09_Kaia ) ;
14721: LD_EXP 18
14725: PPUSH
14726: LD_STRING 09_Kaia
14728: PPUSH
14729: CALL_OW 38
// Say ( Kaia , DK-End-a-3 ) ;
14733: LD_EXP 18
14737: PPUSH
14738: LD_STRING DK-End-a-3
14740: PPUSH
14741: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
14745: LD_EXP 18
14749: PPUSH
14750: LD_STRING DK-End-a-4
14752: PPUSH
14753: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
14757: LD_EXP 24
14761: PPUSH
14762: LD_STRING DL-End-a-5
14764: PPUSH
14765: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
14769: LD_EXP 24
14773: PPUSH
14774: LD_STRING DL-End-a-6
14776: PPUSH
14777: CALL_OW 88
// end ; SaveCharacters ( Heike , 09_Heike ) ;
14781: LD_EXP 13
14785: PPUSH
14786: LD_STRING 09_Heike
14788: PPUSH
14789: CALL_OW 38
// SaveCharacters ( Schulz , 09_Schulz ) ;
14793: LD_EXP 24
14797: PPUSH
14798: LD_STRING 09_Schulz
14800: PPUSH
14801: CALL_OW 38
// if IsOk ( Basim ) then
14805: LD_EXP 25
14809: PPUSH
14810: CALL_OW 302
14814: IFFALSE 14828
// SaveCharacters ( Basim , 09_Basim ) ;
14816: LD_EXP 25
14820: PPUSH
14821: LD_STRING 09_Basim
14823: PPUSH
14824: CALL_OW 38
// if IsOk ( Givi ) then
14828: LD_EXP 14
14832: PPUSH
14833: CALL_OW 302
14837: IFFALSE 14851
// SaveCharacters ( Givi , 09_Givi ) ;
14839: LD_EXP 14
14843: PPUSH
14844: LD_STRING 09_Givi
14846: PPUSH
14847: CALL_OW 38
// if IsOk ( Mike ) then
14851: LD_EXP 15
14855: PPUSH
14856: CALL_OW 302
14860: IFFALSE 14874
// SaveCharacters ( Mike , 09_Mike ) ;
14862: LD_EXP 15
14866: PPUSH
14867: LD_STRING 09_Mike
14869: PPUSH
14870: CALL_OW 38
// if IsOk ( Ibrahim ) then
14874: LD_EXP 16
14878: PPUSH
14879: CALL_OW 302
14883: IFFALSE 14897
// SaveCharacters ( Ibrahim , 09_Ibrahim ) ;
14885: LD_EXP 16
14889: PPUSH
14890: LD_STRING 09_Ibrahim
14892: PPUSH
14893: CALL_OW 38
// if IsOk ( Kamil ) then
14897: LD_EXP 17
14901: PPUSH
14902: CALL_OW 302
14906: IFFALSE 14920
// SaveCharacters ( Kamil , 09_Kamil ) ;
14908: LD_EXP 17
14912: PPUSH
14913: LD_STRING 09_Kamil
14915: PPUSH
14916: CALL_OW 38
// if IsOk ( Sophia ) then
14920: LD_EXP 19
14924: PPUSH
14925: CALL_OW 302
14929: IFFALSE 14943
// SaveCharacters ( Sophia , 09_Sophia ) ;
14931: LD_EXP 19
14935: PPUSH
14936: LD_STRING 09_Sophia
14938: PPUSH
14939: CALL_OW 38
// if IsOk ( Markov ) then
14943: LD_EXP 20
14947: PPUSH
14948: CALL_OW 302
14952: IFFALSE 14966
// SaveCharacters ( Markov , 09_Markov ) ;
14954: LD_EXP 20
14958: PPUSH
14959: LD_STRING 09_Markov
14961: PPUSH
14962: CALL_OW 38
// if IsOk ( Olaf ) then
14966: LD_EXP 21
14970: PPUSH
14971: CALL_OW 302
14975: IFFALSE 14989
// SaveCharacters ( Olaf , 09_Olaf ) ;
14977: LD_EXP 21
14981: PPUSH
14982: LD_STRING 09_Olaf
14984: PPUSH
14985: CALL_OW 38
// if IsOk ( Kurt ) then
14989: LD_EXP 22
14993: PPUSH
14994: CALL_OW 302
14998: IFFALSE 15012
// SaveCharacters ( Kurt , 09_Kurt ) ;
15000: LD_EXP 22
15004: PPUSH
15005: LD_STRING 09_Kurt
15007: PPUSH
15008: CALL_OW 38
// if IsOk ( Aviradze ) then
15012: LD_EXP 23
15016: PPUSH
15017: CALL_OW 302
15021: IFFALSE 15035
// SaveCharacters ( Aviradze , 09_Aviradze ) ;
15023: LD_EXP 23
15027: PPUSH
15028: LD_STRING 09_Aviradze
15030: PPUSH
15031: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09_heikeSecondSquad ) ;
15035: LD_EXP 30
15039: PPUSH
15040: LD_INT 50
15042: PUSH
15043: EMPTY
15044: LIST
15045: PPUSH
15046: CALL_OW 72
15050: PPUSH
15051: LD_STRING 09_heikeSecondSquad
15053: PPUSH
15054: CALL_OW 38
// if GetTech ( tech_apeBrain , 2 ) = state_researched then
15058: LD_INT 4
15060: PPUSH
15061: LD_INT 2
15063: PPUSH
15064: CALL_OW 321
15068: PUSH
15069: LD_INT 2
15071: EQUAL
15072: IFFALSE 15084
// SaveVariable ( 1 , 09_ApeBrain ) ;
15074: LD_INT 1
15076: PPUSH
15077: LD_STRING 09_ApeBrain
15079: PPUSH
15080: CALL_OW 39
// if GetTech ( tech_apeNeural , 2 ) = state_researched then
15084: LD_INT 3
15086: PPUSH
15087: LD_INT 2
15089: PPUSH
15090: CALL_OW 321
15094: PUSH
15095: LD_INT 2
15097: EQUAL
15098: IFFALSE 15110
// SaveVariable ( 1 , 09_ApeNeural ) ;
15100: LD_INT 1
15102: PPUSH
15103: LD_STRING 09_ApeNeural
15105: PPUSH
15106: CALL_OW 39
// sib := 0 ;
15110: LD_ADDR_VAR 0 2
15114: PUSH
15115: LD_INT 0
15117: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
15118: LD_ADDR_VAR 0 1
15122: PUSH
15123: LD_INT 22
15125: PUSH
15126: LD_INT 2
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 2
15135: PUSH
15136: LD_INT 30
15138: PUSH
15139: LD_INT 0
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 30
15148: PUSH
15149: LD_INT 1
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PPUSH
15165: CALL_OW 69
15169: PUSH
15170: FOR_IN
15171: IFFALSE 15204
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
15173: LD_ADDR_VAR 0 2
15177: PUSH
15178: LD_VAR 0 2
15182: PUSH
15183: LD_VAR 0 1
15187: PPUSH
15188: CALL_OW 274
15192: PPUSH
15193: LD_INT 3
15195: PPUSH
15196: CALL_OW 275
15200: PLUS
15201: ST_TO_ADDR
15202: GO 15170
15204: POP
15205: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
15206: LD_ADDR_VAR 0 1
15210: PUSH
15211: LD_INT 22
15213: PUSH
15214: LD_INT 2
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 2
15223: PUSH
15224: LD_INT 34
15226: PUSH
15227: LD_INT 32
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 34
15236: PUSH
15237: LD_INT 51
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PPUSH
15253: CALL_OW 69
15257: PUSH
15258: FOR_IN
15259: IFFALSE 15287
// sib := sib + GetCargo ( i , mat_siberit ) ;
15261: LD_ADDR_VAR 0 2
15265: PUSH
15266: LD_VAR 0 2
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: LD_INT 3
15278: PPUSH
15279: CALL_OW 289
15283: PLUS
15284: ST_TO_ADDR
15285: GO 15258
15287: POP
15288: POP
// if sib >= sibToCollect then
15289: LD_VAR 0 2
15293: PUSH
15294: LD_EXP 7
15298: GREATEREQUAL
15299: IFFALSE 15321
// begin m1 := true ;
15301: LD_ADDR_VAR 0 3
15305: PUSH
15306: LD_INT 1
15308: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
15309: LD_STRING med1
15311: PPUSH
15312: LD_INT 1
15314: PPUSH
15315: CALL_OW 101
// end else
15319: GO 15332
// AddMedal ( med1 , - 1 ) ;
15321: LD_STRING med1
15323: PPUSH
15324: LD_INT 1
15326: NEG
15327: PPUSH
15328: CALL_OW 101
// if apeDriver or kamikazeTrained then
15332: LD_EXP 8
15336: IFTRUE 15344
15338: PUSH
15339: LD_EXP 6
15343: OR
15344: IFFALSE 15366
// begin m2 := true ;
15346: LD_ADDR_VAR 0 4
15350: PUSH
15351: LD_INT 1
15353: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
15354: LD_STRING med2
15356: PPUSH
15357: LD_INT 1
15359: PPUSH
15360: CALL_OW 101
// end else
15364: GO 15377
// AddMedal ( med2 , - 1 ) ;
15366: LD_STRING med2
15368: PPUSH
15369: LD_INT 1
15371: NEG
15372: PPUSH
15373: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
15377: LD_EXP 14
15381: PUSH
15382: LD_EXP 15
15386: PUSH
15387: LD_EXP 16
15391: PUSH
15392: LD_EXP 17
15396: PUSH
15397: LD_EXP 18
15401: PUSH
15402: LD_EXP 19
15406: PUSH
15407: LD_EXP 20
15411: PUSH
15412: LD_EXP 21
15416: PUSH
15417: LD_EXP 22
15421: PUSH
15422: LD_EXP 23
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PPUSH
15439: LD_INT 50
15441: PUSH
15442: EMPTY
15443: LIST
15444: PPUSH
15445: CALL_OW 72
15449: NOT
15450: IFFALSE 15465
// AddMedal ( med3 , - 1 ) else
15452: LD_STRING med3
15454: PPUSH
15455: LD_INT 1
15457: NEG
15458: PPUSH
15459: CALL_OW 101
15463: GO 15483
// begin m3 := true ;
15465: LD_ADDR_VAR 0 5
15469: PUSH
15470: LD_INT 1
15472: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
15473: LD_STRING med3
15475: PPUSH
15476: LD_INT 1
15478: PPUSH
15479: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
15483: LD_VAR 0 3
15487: IFFALSE 15495
15489: PUSH
15490: LD_VAR 0 4
15494: AND
15495: IFFALSE 15503
15497: PUSH
15498: LD_VAR 0 5
15502: AND
15503: IFFALSE 15515
15505: PUSH
15506: LD_OWVAR 67
15510: PUSH
15511: LD_INT 3
15513: GREATEREQUAL
15514: AND
15515: IFFALSE 15527
// SetAchievementEX ( ACH_ARES , 9 ) ;
15517: LD_STRING ACH_ARES
15519: PPUSH
15520: LD_INT 9
15522: PPUSH
15523: CALL_OW 564
// GiveMedals ( MAIN ) ;
15527: LD_STRING MAIN
15529: PPUSH
15530: CALL_OW 102
// YouWin ;
15534: CALL_OW 103
// DialogueOff ;
15538: CALL_OW 7
// end ; end_of_file
15542: PPOPN 5
15544: END
// every 0 0$25 + 0 0$20 trigger playerInBase do var i , tmp ;
15545: LD_EXP 5
15549: IFFALSE 15650
15551: GO 15553
15553: DISABLE
15554: LD_INT 0
15556: PPUSH
15557: PPUSH
// begin enable ;
15558: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
15559: LD_ADDR_VAR 0 2
15563: PUSH
15564: LD_INT 9
15566: PUSH
15567: LD_INT 10
15569: PUSH
15570: LD_INT 11
15572: PUSH
15573: LD_INT 12
15575: PUSH
15576: LD_INT 13
15578: PUSH
15579: LD_INT 14
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
15590: LD_ADDR_VAR 0 1
15594: PUSH
15595: LD_VAR 0 2
15599: PUSH
15600: LD_INT 1
15602: PPUSH
15603: LD_INT 6
15605: PPUSH
15606: CALL_OW 12
15610: ARRAY
15611: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 16 then
15612: LD_VAR 0 1
15616: PPUSH
15617: CALL_OW 435
15621: PUSH
15622: LD_INT 16
15624: LESS
15625: IFFALSE 15650
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
15627: LD_INT 1
15629: PPUSH
15630: LD_INT 5
15632: PPUSH
15633: CALL_OW 12
15637: PPUSH
15638: LD_VAR 0 1
15642: PPUSH
15643: LD_INT 1
15645: PPUSH
15646: CALL_OW 55
// end ; end_of_file
15650: PPOPN 2
15652: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15653: LD_INT 0
15655: PPUSH
15656: PPUSH
// if exist_mode then
15657: LD_VAR 0 2
15661: IFFALSE 15707
// begin unit := CreateCharacter ( prefix & ident ) ;
15663: LD_ADDR_VAR 0 5
15667: PUSH
15668: LD_VAR 0 3
15672: PUSH
15673: LD_VAR 0 1
15677: STR
15678: PPUSH
15679: CALL_OW 34
15683: ST_TO_ADDR
// if unit then
15684: LD_VAR 0 5
15688: IFFALSE 15705
// DeleteCharacters ( prefix & ident ) ;
15690: LD_VAR 0 3
15694: PUSH
15695: LD_VAR 0 1
15699: STR
15700: PPUSH
15701: CALL_OW 40
// end else
15705: GO 15722
// unit := NewCharacter ( ident ) ;
15707: LD_ADDR_VAR 0 5
15711: PUSH
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 25
15721: ST_TO_ADDR
// result := unit ;
15722: LD_ADDR_VAR 0 4
15726: PUSH
15727: LD_VAR 0 5
15731: ST_TO_ADDR
// end ;
15732: LD_VAR 0 4
15736: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15737: LD_INT 0
15739: PPUSH
15740: PPUSH
// if exist_mode then
15741: LD_VAR 0 2
15745: IFFALSE 15770
// unit := CreateCharacter ( prefix & ident ) else
15747: LD_ADDR_VAR 0 5
15751: PUSH
15752: LD_VAR 0 3
15756: PUSH
15757: LD_VAR 0 1
15761: STR
15762: PPUSH
15763: CALL_OW 34
15767: ST_TO_ADDR
15768: GO 15785
// unit := NewCharacter ( ident ) ;
15770: LD_ADDR_VAR 0 5
15774: PUSH
15775: LD_VAR 0 1
15779: PPUSH
15780: CALL_OW 25
15784: ST_TO_ADDR
// result := unit ;
15785: LD_ADDR_VAR 0 4
15789: PUSH
15790: LD_VAR 0 5
15794: ST_TO_ADDR
// end ;
15795: LD_VAR 0 4
15799: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15800: LD_INT 0
15802: PPUSH
15803: PPUSH
// if not side or not nation then
15804: LD_VAR 0 1
15808: NOT
15809: IFTRUE 15818
15811: PUSH
15812: LD_VAR 0 2
15816: NOT
15817: OR
15818: IFFALSE 15822
// exit ;
15820: GO 16616
// case nation of nation_american :
15822: LD_VAR 0 2
15826: PUSH
15827: LD_INT 1
15829: DOUBLE
15830: EQUAL
15831: IFTRUE 15835
15833: GO 16057
15835: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
15836: LD_ADDR_VAR 0 4
15840: PUSH
15841: LD_INT 35
15843: PUSH
15844: LD_INT 45
15846: PUSH
15847: LD_INT 46
15849: PUSH
15850: LD_INT 47
15852: PUSH
15853: LD_INT 82
15855: PUSH
15856: LD_INT 83
15858: PUSH
15859: LD_INT 84
15861: PUSH
15862: LD_INT 85
15864: PUSH
15865: LD_INT 86
15867: PUSH
15868: LD_INT 1
15870: PUSH
15871: LD_INT 2
15873: PUSH
15874: LD_INT 6
15876: PUSH
15877: LD_INT 15
15879: PUSH
15880: LD_INT 16
15882: PUSH
15883: LD_INT 7
15885: PUSH
15886: LD_INT 12
15888: PUSH
15889: LD_INT 13
15891: PUSH
15892: LD_INT 10
15894: PUSH
15895: LD_INT 14
15897: PUSH
15898: LD_INT 20
15900: PUSH
15901: LD_INT 21
15903: PUSH
15904: LD_INT 22
15906: PUSH
15907: LD_INT 25
15909: PUSH
15910: LD_INT 32
15912: PUSH
15913: LD_INT 27
15915: PUSH
15916: LD_INT 36
15918: PUSH
15919: LD_INT 69
15921: PUSH
15922: LD_INT 39
15924: PUSH
15925: LD_INT 34
15927: PUSH
15928: LD_INT 40
15930: PUSH
15931: LD_INT 48
15933: PUSH
15934: LD_INT 49
15936: PUSH
15937: LD_INT 50
15939: PUSH
15940: LD_INT 51
15942: PUSH
15943: LD_INT 52
15945: PUSH
15946: LD_INT 53
15948: PUSH
15949: LD_INT 54
15951: PUSH
15952: LD_INT 55
15954: PUSH
15955: LD_INT 56
15957: PUSH
15958: LD_INT 57
15960: PUSH
15961: LD_INT 58
15963: PUSH
15964: LD_INT 59
15966: PUSH
15967: LD_INT 60
15969: PUSH
15970: LD_INT 61
15972: PUSH
15973: LD_INT 62
15975: PUSH
15976: LD_INT 80
15978: PUSH
15979: LD_INT 82
15981: PUSH
15982: LD_INT 83
15984: PUSH
15985: LD_INT 84
15987: PUSH
15988: LD_INT 85
15990: PUSH
15991: LD_INT 86
15993: PUSH
15994: LD_INT 90
15996: PUSH
15997: LD_INT 93
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: ST_TO_ADDR
16055: GO 16538
16057: LD_INT 2
16059: DOUBLE
16060: EQUAL
16061: IFTRUE 16065
16063: GO 16299
16065: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
16066: LD_ADDR_VAR 0 4
16070: PUSH
16071: LD_INT 35
16073: PUSH
16074: LD_INT 45
16076: PUSH
16077: LD_INT 46
16079: PUSH
16080: LD_INT 47
16082: PUSH
16083: LD_INT 82
16085: PUSH
16086: LD_INT 83
16088: PUSH
16089: LD_INT 84
16091: PUSH
16092: LD_INT 85
16094: PUSH
16095: LD_INT 87
16097: PUSH
16098: LD_INT 70
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: LD_INT 11
16106: PUSH
16107: LD_INT 3
16109: PUSH
16110: LD_INT 4
16112: PUSH
16113: LD_INT 5
16115: PUSH
16116: LD_INT 6
16118: PUSH
16119: LD_INT 15
16121: PUSH
16122: LD_INT 18
16124: PUSH
16125: LD_INT 7
16127: PUSH
16128: LD_INT 17
16130: PUSH
16131: LD_INT 8
16133: PUSH
16134: LD_INT 20
16136: PUSH
16137: LD_INT 21
16139: PUSH
16140: LD_INT 22
16142: PUSH
16143: LD_INT 72
16145: PUSH
16146: LD_INT 26
16148: PUSH
16149: LD_INT 69
16151: PUSH
16152: LD_INT 39
16154: PUSH
16155: LD_INT 40
16157: PUSH
16158: LD_INT 41
16160: PUSH
16161: LD_INT 42
16163: PUSH
16164: LD_INT 43
16166: PUSH
16167: LD_INT 48
16169: PUSH
16170: LD_INT 49
16172: PUSH
16173: LD_INT 50
16175: PUSH
16176: LD_INT 51
16178: PUSH
16179: LD_INT 52
16181: PUSH
16182: LD_INT 53
16184: PUSH
16185: LD_INT 54
16187: PUSH
16188: LD_INT 55
16190: PUSH
16191: LD_INT 56
16193: PUSH
16194: LD_INT 60
16196: PUSH
16197: LD_INT 61
16199: PUSH
16200: LD_INT 62
16202: PUSH
16203: LD_INT 66
16205: PUSH
16206: LD_INT 67
16208: PUSH
16209: LD_INT 68
16211: PUSH
16212: LD_INT 81
16214: PUSH
16215: LD_INT 82
16217: PUSH
16218: LD_INT 83
16220: PUSH
16221: LD_INT 84
16223: PUSH
16224: LD_INT 85
16226: PUSH
16227: LD_INT 87
16229: PUSH
16230: LD_INT 88
16232: PUSH
16233: LD_INT 92
16235: PUSH
16236: LD_INT 94
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: ST_TO_ADDR
16297: GO 16538
16299: LD_INT 3
16301: DOUBLE
16302: EQUAL
16303: IFTRUE 16307
16305: GO 16537
16307: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16308: LD_ADDR_VAR 0 4
16312: PUSH
16313: LD_INT 46
16315: PUSH
16316: LD_INT 47
16318: PUSH
16319: LD_INT 1
16321: PUSH
16322: LD_INT 2
16324: PUSH
16325: LD_INT 82
16327: PUSH
16328: LD_INT 83
16330: PUSH
16331: LD_INT 84
16333: PUSH
16334: LD_INT 85
16336: PUSH
16337: LD_INT 86
16339: PUSH
16340: LD_INT 11
16342: PUSH
16343: LD_INT 9
16345: PUSH
16346: LD_INT 20
16348: PUSH
16349: LD_INT 19
16351: PUSH
16352: LD_INT 21
16354: PUSH
16355: LD_INT 24
16357: PUSH
16358: LD_INT 22
16360: PUSH
16361: LD_INT 25
16363: PUSH
16364: LD_INT 28
16366: PUSH
16367: LD_INT 29
16369: PUSH
16370: LD_INT 30
16372: PUSH
16373: LD_INT 31
16375: PUSH
16376: LD_INT 37
16378: PUSH
16379: LD_INT 38
16381: PUSH
16382: LD_INT 32
16384: PUSH
16385: LD_INT 27
16387: PUSH
16388: LD_INT 33
16390: PUSH
16391: LD_INT 69
16393: PUSH
16394: LD_INT 39
16396: PUSH
16397: LD_INT 34
16399: PUSH
16400: LD_INT 40
16402: PUSH
16403: LD_INT 71
16405: PUSH
16406: LD_INT 23
16408: PUSH
16409: LD_INT 44
16411: PUSH
16412: LD_INT 48
16414: PUSH
16415: LD_INT 49
16417: PUSH
16418: LD_INT 50
16420: PUSH
16421: LD_INT 51
16423: PUSH
16424: LD_INT 52
16426: PUSH
16427: LD_INT 53
16429: PUSH
16430: LD_INT 54
16432: PUSH
16433: LD_INT 55
16435: PUSH
16436: LD_INT 56
16438: PUSH
16439: LD_INT 57
16441: PUSH
16442: LD_INT 58
16444: PUSH
16445: LD_INT 59
16447: PUSH
16448: LD_INT 63
16450: PUSH
16451: LD_INT 64
16453: PUSH
16454: LD_INT 65
16456: PUSH
16457: LD_INT 82
16459: PUSH
16460: LD_INT 83
16462: PUSH
16463: LD_INT 84
16465: PUSH
16466: LD_INT 85
16468: PUSH
16469: LD_INT 86
16471: PUSH
16472: LD_INT 89
16474: PUSH
16475: LD_INT 91
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: ST_TO_ADDR
16535: GO 16538
16537: POP
// if state > - 1 and state < 3 then
16538: LD_VAR 0 3
16542: PUSH
16543: LD_INT 1
16545: NEG
16546: GREATER
16547: IFFALSE 16559
16549: PUSH
16550: LD_VAR 0 3
16554: PUSH
16555: LD_INT 3
16557: LESS
16558: AND
16559: IFFALSE 16616
// for i in result do
16561: LD_ADDR_VAR 0 5
16565: PUSH
16566: LD_VAR 0 4
16570: PUSH
16571: FOR_IN
16572: IFFALSE 16614
// if GetTech ( i , side ) <> state then
16574: LD_VAR 0 5
16578: PPUSH
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL_OW 321
16588: PUSH
16589: LD_VAR 0 3
16593: NONEQUAL
16594: IFFALSE 16612
// result := result diff i ;
16596: LD_ADDR_VAR 0 4
16600: PUSH
16601: LD_VAR 0 4
16605: PUSH
16606: LD_VAR 0 5
16610: DIFF
16611: ST_TO_ADDR
16612: GO 16571
16614: POP
16615: POP
// end ;
16616: LD_VAR 0 4
16620: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16621: LD_INT 0
16623: PPUSH
16624: PPUSH
16625: PPUSH
// result := true ;
16626: LD_ADDR_VAR 0 3
16630: PUSH
16631: LD_INT 1
16633: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16634: LD_ADDR_VAR 0 5
16638: PUSH
16639: LD_VAR 0 2
16643: PPUSH
16644: CALL_OW 480
16648: ST_TO_ADDR
// if not tmp then
16649: LD_VAR 0 5
16653: NOT
16654: IFFALSE 16658
// exit ;
16656: GO 16707
// for i in tmp do
16658: LD_ADDR_VAR 0 4
16662: PUSH
16663: LD_VAR 0 5
16667: PUSH
16668: FOR_IN
16669: IFFALSE 16705
// if GetTech ( i , side ) <> state_researched then
16671: LD_VAR 0 4
16675: PPUSH
16676: LD_VAR 0 1
16680: PPUSH
16681: CALL_OW 321
16685: PUSH
16686: LD_INT 2
16688: NONEQUAL
16689: IFFALSE 16703
// begin result := false ;
16691: LD_ADDR_VAR 0 3
16695: PUSH
16696: LD_INT 0
16698: ST_TO_ADDR
// exit ;
16699: POP
16700: POP
16701: GO 16707
// end ;
16703: GO 16668
16705: POP
16706: POP
// end ;
16707: LD_VAR 0 3
16711: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16712: LD_INT 0
16714: PPUSH
16715: PPUSH
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
16720: PPUSH
16721: PPUSH
16722: PPUSH
16723: PPUSH
16724: PPUSH
16725: PPUSH
16726: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16727: LD_VAR 0 1
16731: NOT
16732: IFTRUE 16749
16734: PUSH
16735: LD_VAR 0 1
16739: PPUSH
16740: CALL_OW 257
16744: PUSH
16745: LD_INT 9
16747: NONEQUAL
16748: OR
16749: IFFALSE 16753
// exit ;
16751: GO 17332
// side := GetSide ( unit ) ;
16753: LD_ADDR_VAR 0 9
16757: PUSH
16758: LD_VAR 0 1
16762: PPUSH
16763: CALL_OW 255
16767: ST_TO_ADDR
// tech_space := tech_spacanom ;
16768: LD_ADDR_VAR 0 12
16772: PUSH
16773: LD_INT 29
16775: ST_TO_ADDR
// tech_time := tech_taurad ;
16776: LD_ADDR_VAR 0 13
16780: PUSH
16781: LD_INT 28
16783: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16784: LD_ADDR_VAR 0 11
16788: PUSH
16789: LD_VAR 0 1
16793: PPUSH
16794: CALL_OW 310
16798: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16799: LD_VAR 0 11
16803: PPUSH
16804: CALL_OW 247
16808: PUSH
16809: LD_INT 2
16811: EQUAL
16812: IFFALSE 16816
// exit ;
16814: GO 17332
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16816: LD_ADDR_VAR 0 8
16820: PUSH
16821: LD_INT 81
16823: PUSH
16824: LD_VAR 0 9
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 3
16835: PUSH
16836: LD_INT 21
16838: PUSH
16839: LD_INT 3
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PPUSH
16854: CALL_OW 69
16858: ST_TO_ADDR
// if not tmp then
16859: LD_VAR 0 8
16863: NOT
16864: IFFALSE 16868
// exit ;
16866: GO 17332
// if in_unit then
16868: LD_VAR 0 11
16872: IFFALSE 16896
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16874: LD_ADDR_VAR 0 10
16878: PUSH
16879: LD_VAR 0 8
16883: PPUSH
16884: LD_VAR 0 11
16888: PPUSH
16889: CALL_OW 74
16893: ST_TO_ADDR
16894: GO 16916
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16896: LD_ADDR_VAR 0 10
16900: PUSH
16901: LD_VAR 0 8
16905: PPUSH
16906: LD_VAR 0 1
16910: PPUSH
16911: CALL_OW 74
16915: ST_TO_ADDR
// if not enemy then
16916: LD_VAR 0 10
16920: NOT
16921: IFFALSE 16925
// exit ;
16923: GO 17332
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16925: LD_VAR 0 11
16929: IFFALSE 16951
16931: PUSH
16932: LD_VAR 0 11
16936: PPUSH
16937: LD_VAR 0 10
16941: PPUSH
16942: CALL_OW 296
16946: PUSH
16947: LD_INT 13
16949: GREATER
16950: AND
16951: IFTRUE 16973
16953: PUSH
16954: LD_VAR 0 1
16958: PPUSH
16959: LD_VAR 0 10
16963: PPUSH
16964: CALL_OW 296
16968: PUSH
16969: LD_INT 12
16971: GREATER
16972: OR
16973: IFFALSE 16977
// exit ;
16975: GO 17332
// missile := [ 1 ] ;
16977: LD_ADDR_VAR 0 14
16981: PUSH
16982: LD_INT 1
16984: PUSH
16985: EMPTY
16986: LIST
16987: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16988: LD_VAR 0 9
16992: PPUSH
16993: LD_VAR 0 12
16997: PPUSH
16998: CALL_OW 325
17002: IFFALSE 17031
// missile := Replace ( missile , missile + 1 , 2 ) ;
17004: LD_ADDR_VAR 0 14
17008: PUSH
17009: LD_VAR 0 14
17013: PPUSH
17014: LD_VAR 0 14
17018: PUSH
17019: LD_INT 1
17021: PLUS
17022: PPUSH
17023: LD_INT 2
17025: PPUSH
17026: CALL_OW 1
17030: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17031: LD_VAR 0 9
17035: PPUSH
17036: LD_VAR 0 13
17040: PPUSH
17041: CALL_OW 325
17045: IFFALSE 17069
17047: PUSH
17048: LD_VAR 0 10
17052: PPUSH
17053: CALL_OW 255
17057: PPUSH
17058: LD_VAR 0 13
17062: PPUSH
17063: CALL_OW 325
17067: NOT
17068: AND
17069: IFFALSE 17098
// missile := Replace ( missile , missile + 1 , 3 ) ;
17071: LD_ADDR_VAR 0 14
17075: PUSH
17076: LD_VAR 0 14
17080: PPUSH
17081: LD_VAR 0 14
17085: PUSH
17086: LD_INT 1
17088: PLUS
17089: PPUSH
17090: LD_INT 3
17092: PPUSH
17093: CALL_OW 1
17097: ST_TO_ADDR
// if missile < 2 then
17098: LD_VAR 0 14
17102: PUSH
17103: LD_INT 2
17105: LESS
17106: IFFALSE 17110
// exit ;
17108: GO 17332
// x := GetX ( enemy ) ;
17110: LD_ADDR_VAR 0 4
17114: PUSH
17115: LD_VAR 0 10
17119: PPUSH
17120: CALL_OW 250
17124: ST_TO_ADDR
// y := GetY ( enemy ) ;
17125: LD_ADDR_VAR 0 5
17129: PUSH
17130: LD_VAR 0 10
17134: PPUSH
17135: CALL_OW 251
17139: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17140: LD_ADDR_VAR 0 6
17144: PUSH
17145: LD_VAR 0 4
17149: PUSH
17150: LD_INT 1
17152: NEG
17153: PPUSH
17154: LD_INT 1
17156: PPUSH
17157: CALL_OW 12
17161: PLUS
17162: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17163: LD_ADDR_VAR 0 7
17167: PUSH
17168: LD_VAR 0 5
17172: PUSH
17173: LD_INT 1
17175: NEG
17176: PPUSH
17177: LD_INT 1
17179: PPUSH
17180: CALL_OW 12
17184: PLUS
17185: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17186: LD_VAR 0 6
17190: PPUSH
17191: LD_VAR 0 7
17195: PPUSH
17196: CALL_OW 488
17200: NOT
17201: IFFALSE 17223
// begin _x := x ;
17203: LD_ADDR_VAR 0 6
17207: PUSH
17208: LD_VAR 0 4
17212: ST_TO_ADDR
// _y := y ;
17213: LD_ADDR_VAR 0 7
17217: PUSH
17218: LD_VAR 0 5
17222: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17223: LD_ADDR_VAR 0 3
17227: PUSH
17228: LD_INT 1
17230: PPUSH
17231: LD_VAR 0 14
17235: PPUSH
17236: CALL_OW 12
17240: ST_TO_ADDR
// case i of 1 :
17241: LD_VAR 0 3
17245: PUSH
17246: LD_INT 1
17248: DOUBLE
17249: EQUAL
17250: IFTRUE 17254
17252: GO 17271
17254: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17255: LD_VAR 0 1
17259: PPUSH
17260: LD_VAR 0 10
17264: PPUSH
17265: CALL_OW 115
17269: GO 17332
17271: LD_INT 2
17273: DOUBLE
17274: EQUAL
17275: IFTRUE 17279
17277: GO 17301
17279: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17280: LD_VAR 0 1
17284: PPUSH
17285: LD_VAR 0 6
17289: PPUSH
17290: LD_VAR 0 7
17294: PPUSH
17295: CALL_OW 153
17299: GO 17332
17301: LD_INT 3
17303: DOUBLE
17304: EQUAL
17305: IFTRUE 17309
17307: GO 17331
17309: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17310: LD_VAR 0 1
17314: PPUSH
17315: LD_VAR 0 6
17319: PPUSH
17320: LD_VAR 0 7
17324: PPUSH
17325: CALL_OW 154
17329: GO 17332
17331: POP
// end ;
17332: LD_VAR 0 2
17336: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17337: LD_INT 0
17339: PPUSH
17340: PPUSH
17341: PPUSH
17342: PPUSH
17343: PPUSH
17344: PPUSH
// if not unit or not building then
17345: LD_VAR 0 1
17349: NOT
17350: IFTRUE 17359
17352: PUSH
17353: LD_VAR 0 2
17357: NOT
17358: OR
17359: IFFALSE 17363
// exit ;
17361: GO 17521
// x := GetX ( building ) ;
17363: LD_ADDR_VAR 0 5
17367: PUSH
17368: LD_VAR 0 2
17372: PPUSH
17373: CALL_OW 250
17377: ST_TO_ADDR
// y := GetY ( building ) ;
17378: LD_ADDR_VAR 0 6
17382: PUSH
17383: LD_VAR 0 2
17387: PPUSH
17388: CALL_OW 251
17392: ST_TO_ADDR
// for i := 0 to 5 do
17393: LD_ADDR_VAR 0 4
17397: PUSH
17398: DOUBLE
17399: LD_INT 0
17401: DEC
17402: ST_TO_ADDR
17403: LD_INT 5
17405: PUSH
17406: FOR_TO
17407: IFFALSE 17519
// begin _x := ShiftX ( x , i , 3 ) ;
17409: LD_ADDR_VAR 0 7
17413: PUSH
17414: LD_VAR 0 5
17418: PPUSH
17419: LD_VAR 0 4
17423: PPUSH
17424: LD_INT 3
17426: PPUSH
17427: CALL_OW 272
17431: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17432: LD_ADDR_VAR 0 8
17436: PUSH
17437: LD_VAR 0 6
17441: PPUSH
17442: LD_VAR 0 4
17446: PPUSH
17447: LD_INT 3
17449: PPUSH
17450: CALL_OW 273
17454: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17455: LD_VAR 0 7
17459: PPUSH
17460: LD_VAR 0 8
17464: PPUSH
17465: CALL_OW 488
17469: NOT
17470: IFFALSE 17474
// continue ;
17472: GO 17406
// if HexInfo ( _x , _y ) = 0 then
17474: LD_VAR 0 7
17478: PPUSH
17479: LD_VAR 0 8
17483: PPUSH
17484: CALL_OW 428
17488: PUSH
17489: LD_INT 0
17491: EQUAL
17492: IFFALSE 17517
// begin ComMoveXY ( unit , _x , _y ) ;
17494: LD_VAR 0 1
17498: PPUSH
17499: LD_VAR 0 7
17503: PPUSH
17504: LD_VAR 0 8
17508: PPUSH
17509: CALL_OW 111
// exit ;
17513: POP
17514: POP
17515: GO 17521
// end ; end ;
17517: GO 17406
17519: POP
17520: POP
// end ;
17521: LD_VAR 0 3
17525: RET
// export function ScanBase ( side , base_area ) ; begin
17526: LD_INT 0
17528: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17529: LD_ADDR_VAR 0 3
17533: PUSH
17534: LD_VAR 0 2
17538: PPUSH
17539: LD_INT 81
17541: PUSH
17542: LD_VAR 0 1
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL_OW 70
17555: ST_TO_ADDR
// end ;
17556: LD_VAR 0 3
17560: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17561: LD_INT 0
17563: PPUSH
17564: PPUSH
17565: PPUSH
17566: PPUSH
// result := false ;
17567: LD_ADDR_VAR 0 2
17571: PUSH
17572: LD_INT 0
17574: ST_TO_ADDR
// side := GetSide ( unit ) ;
17575: LD_ADDR_VAR 0 3
17579: PUSH
17580: LD_VAR 0 1
17584: PPUSH
17585: CALL_OW 255
17589: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17590: LD_ADDR_VAR 0 4
17594: PUSH
17595: LD_VAR 0 1
17599: PPUSH
17600: CALL_OW 248
17604: ST_TO_ADDR
// case nat of 1 :
17605: LD_VAR 0 4
17609: PUSH
17610: LD_INT 1
17612: DOUBLE
17613: EQUAL
17614: IFTRUE 17618
17616: GO 17629
17618: POP
// tech := tech_lassight ; 2 :
17619: LD_ADDR_VAR 0 5
17623: PUSH
17624: LD_INT 12
17626: ST_TO_ADDR
17627: GO 17668
17629: LD_INT 2
17631: DOUBLE
17632: EQUAL
17633: IFTRUE 17637
17635: GO 17648
17637: POP
// tech := tech_mortar ; 3 :
17638: LD_ADDR_VAR 0 5
17642: PUSH
17643: LD_INT 41
17645: ST_TO_ADDR
17646: GO 17668
17648: LD_INT 3
17650: DOUBLE
17651: EQUAL
17652: IFTRUE 17656
17654: GO 17667
17656: POP
// tech := tech_bazooka ; end ;
17657: LD_ADDR_VAR 0 5
17661: PUSH
17662: LD_INT 44
17664: ST_TO_ADDR
17665: GO 17668
17667: POP
// if Researched ( side , tech ) then
17668: LD_VAR 0 3
17672: PPUSH
17673: LD_VAR 0 5
17677: PPUSH
17678: CALL_OW 325
17682: IFFALSE 17709
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17684: LD_ADDR_VAR 0 2
17688: PUSH
17689: LD_INT 5
17691: PUSH
17692: LD_INT 8
17694: PUSH
17695: LD_INT 9
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: PUSH
17703: LD_VAR 0 4
17707: ARRAY
17708: ST_TO_ADDR
// end ;
17709: LD_VAR 0 2
17713: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17714: LD_INT 0
17716: PPUSH
17717: PPUSH
17718: PPUSH
// if not mines then
17719: LD_VAR 0 2
17723: NOT
17724: IFFALSE 17728
// exit ;
17726: GO 17872
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17728: LD_ADDR_VAR 0 5
17732: PUSH
17733: LD_INT 81
17735: PUSH
17736: LD_VAR 0 1
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: LD_INT 21
17750: PUSH
17751: LD_INT 3
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PPUSH
17766: CALL_OW 69
17770: ST_TO_ADDR
// for i in mines do
17771: LD_ADDR_VAR 0 4
17775: PUSH
17776: LD_VAR 0 2
17780: PUSH
17781: FOR_IN
17782: IFFALSE 17870
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17784: LD_VAR 0 4
17788: PUSH
17789: LD_INT 1
17791: ARRAY
17792: PPUSH
17793: LD_VAR 0 4
17797: PUSH
17798: LD_INT 2
17800: ARRAY
17801: PPUSH
17802: CALL_OW 458
17806: NOT
17807: IFFALSE 17811
// continue ;
17809: GO 17781
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17811: LD_VAR 0 4
17815: PUSH
17816: LD_INT 1
17818: ARRAY
17819: PPUSH
17820: LD_VAR 0 4
17824: PUSH
17825: LD_INT 2
17827: ARRAY
17828: PPUSH
17829: CALL_OW 428
17833: PUSH
17834: LD_VAR 0 5
17838: IN
17839: IFFALSE 17868
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17841: LD_VAR 0 4
17845: PUSH
17846: LD_INT 1
17848: ARRAY
17849: PPUSH
17850: LD_VAR 0 4
17854: PUSH
17855: LD_INT 2
17857: ARRAY
17858: PPUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 456
// end ;
17868: GO 17781
17870: POP
17871: POP
// end ;
17872: LD_VAR 0 3
17876: RET
// export function Count ( array ) ; begin
17877: LD_INT 0
17879: PPUSH
// result := array + 0 ;
17880: LD_ADDR_VAR 0 2
17884: PUSH
17885: LD_VAR 0 1
17889: PUSH
17890: LD_INT 0
17892: PLUS
17893: ST_TO_ADDR
// end ;
17894: LD_VAR 0 2
17898: RET
// export function IsEmpty ( building ) ; begin
17899: LD_INT 0
17901: PPUSH
// if not building then
17902: LD_VAR 0 1
17906: NOT
17907: IFFALSE 17911
// exit ;
17909: GO 17954
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17911: LD_ADDR_VAR 0 2
17915: PUSH
17916: LD_VAR 0 1
17920: PUSH
17921: LD_INT 22
17923: PUSH
17924: LD_VAR 0 1
17928: PPUSH
17929: CALL_OW 255
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 58
17940: PUSH
17941: EMPTY
17942: LIST
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PPUSH
17948: CALL_OW 69
17952: IN
17953: ST_TO_ADDR
// end ;
17954: LD_VAR 0 2
17958: RET
// export function IsNotFull ( building ) ; var places ; begin
17959: LD_INT 0
17961: PPUSH
17962: PPUSH
// if not building then
17963: LD_VAR 0 1
17967: NOT
17968: IFFALSE 17972
// exit ;
17970: GO 18000
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17972: LD_ADDR_VAR 0 2
17976: PUSH
17977: LD_VAR 0 1
17981: PPUSH
17982: LD_INT 3
17984: PUSH
17985: LD_INT 62
17987: PUSH
17988: EMPTY
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PPUSH
17995: CALL_OW 72
17999: ST_TO_ADDR
// end ;
18000: LD_VAR 0 2
18004: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18005: LD_INT 0
18007: PPUSH
18008: PPUSH
18009: PPUSH
18010: PPUSH
// tmp := [ ] ;
18011: LD_ADDR_VAR 0 3
18015: PUSH
18016: EMPTY
18017: ST_TO_ADDR
// list := [ ] ;
18018: LD_ADDR_VAR 0 5
18022: PUSH
18023: EMPTY
18024: ST_TO_ADDR
// for i = 16 to 25 do
18025: LD_ADDR_VAR 0 4
18029: PUSH
18030: DOUBLE
18031: LD_INT 16
18033: DEC
18034: ST_TO_ADDR
18035: LD_INT 25
18037: PUSH
18038: FOR_TO
18039: IFFALSE 18112
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18041: LD_ADDR_VAR 0 3
18045: PUSH
18046: LD_VAR 0 3
18050: PUSH
18051: LD_INT 22
18053: PUSH
18054: LD_VAR 0 1
18058: PPUSH
18059: CALL_OW 255
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 91
18070: PUSH
18071: LD_VAR 0 1
18075: PUSH
18076: LD_INT 6
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 30
18086: PUSH
18087: LD_VAR 0 4
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: PUSH
18101: EMPTY
18102: LIST
18103: PPUSH
18104: CALL_OW 69
18108: ADD
18109: ST_TO_ADDR
18110: GO 18038
18112: POP
18113: POP
// for i = 1 to tmp do
18114: LD_ADDR_VAR 0 4
18118: PUSH
18119: DOUBLE
18120: LD_INT 1
18122: DEC
18123: ST_TO_ADDR
18124: LD_VAR 0 3
18128: PUSH
18129: FOR_TO
18130: IFFALSE 18218
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18132: LD_ADDR_VAR 0 5
18136: PUSH
18137: LD_VAR 0 5
18141: PUSH
18142: LD_VAR 0 3
18146: PUSH
18147: LD_VAR 0 4
18151: ARRAY
18152: PPUSH
18153: CALL_OW 266
18157: PUSH
18158: LD_VAR 0 3
18162: PUSH
18163: LD_VAR 0 4
18167: ARRAY
18168: PPUSH
18169: CALL_OW 250
18173: PUSH
18174: LD_VAR 0 3
18178: PUSH
18179: LD_VAR 0 4
18183: ARRAY
18184: PPUSH
18185: CALL_OW 251
18189: PUSH
18190: LD_VAR 0 3
18194: PUSH
18195: LD_VAR 0 4
18199: ARRAY
18200: PPUSH
18201: CALL_OW 254
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: ADD
18215: ST_TO_ADDR
18216: GO 18129
18218: POP
18219: POP
// result := list ;
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: LD_VAR 0 5
18229: ST_TO_ADDR
// end ;
18230: LD_VAR 0 2
18234: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18235: LD_INT 0
18237: PPUSH
18238: PPUSH
18239: PPUSH
18240: PPUSH
18241: PPUSH
18242: PPUSH
18243: PPUSH
// if not factory then
18244: LD_VAR 0 1
18248: NOT
18249: IFFALSE 18253
// exit ;
18251: GO 18856
// if control = control_apeman then
18253: LD_VAR 0 4
18257: PUSH
18258: LD_INT 5
18260: EQUAL
18261: IFFALSE 18370
// begin tmp := UnitsInside ( factory ) ;
18263: LD_ADDR_VAR 0 8
18267: PUSH
18268: LD_VAR 0 1
18272: PPUSH
18273: CALL_OW 313
18277: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18278: LD_VAR 0 8
18282: PPUSH
18283: LD_INT 25
18285: PUSH
18286: LD_INT 12
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PPUSH
18293: CALL_OW 72
18297: NOT
18298: IFFALSE 18308
// control := control_manual ;
18300: LD_ADDR_VAR 0 4
18304: PUSH
18305: LD_INT 1
18307: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18308: LD_ADDR_VAR 0 8
18312: PUSH
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL 18005 0 1
18322: ST_TO_ADDR
// if tmp then
18323: LD_VAR 0 8
18327: IFFALSE 18370
// begin for i in tmp do
18329: LD_ADDR_VAR 0 7
18333: PUSH
18334: LD_VAR 0 8
18338: PUSH
18339: FOR_IN
18340: IFFALSE 18368
// if i [ 1 ] = b_ext_radio then
18342: LD_VAR 0 7
18346: PUSH
18347: LD_INT 1
18349: ARRAY
18350: PUSH
18351: LD_INT 22
18353: EQUAL
18354: IFFALSE 18366
// begin control := control_remote ;
18356: LD_ADDR_VAR 0 4
18360: PUSH
18361: LD_INT 2
18363: ST_TO_ADDR
// break ;
18364: GO 18368
// end ;
18366: GO 18339
18368: POP
18369: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18370: LD_VAR 0 1
18374: PPUSH
18375: LD_VAR 0 2
18379: PPUSH
18380: LD_VAR 0 3
18384: PPUSH
18385: LD_VAR 0 4
18389: PPUSH
18390: LD_VAR 0 5
18394: PPUSH
18395: CALL_OW 448
18399: IFFALSE 18434
// begin result := [ chassis , engine , control , weapon ] ;
18401: LD_ADDR_VAR 0 6
18405: PUSH
18406: LD_VAR 0 2
18410: PUSH
18411: LD_VAR 0 3
18415: PUSH
18416: LD_VAR 0 4
18420: PUSH
18421: LD_VAR 0 5
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: ST_TO_ADDR
// exit ;
18432: GO 18856
// end ; _chassis := AvailableChassisList ( factory ) ;
18434: LD_ADDR_VAR 0 9
18438: PUSH
18439: LD_VAR 0 1
18443: PPUSH
18444: CALL_OW 475
18448: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18449: LD_ADDR_VAR 0 11
18453: PUSH
18454: LD_VAR 0 1
18458: PPUSH
18459: CALL_OW 476
18463: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18464: LD_ADDR_VAR 0 12
18468: PUSH
18469: LD_VAR 0 1
18473: PPUSH
18474: CALL_OW 477
18478: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18479: LD_ADDR_VAR 0 10
18483: PUSH
18484: LD_VAR 0 1
18488: PPUSH
18489: CALL_OW 478
18493: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18494: LD_VAR 0 9
18498: NOT
18499: IFTRUE 18508
18501: PUSH
18502: LD_VAR 0 11
18506: NOT
18507: OR
18508: IFTRUE 18517
18510: PUSH
18511: LD_VAR 0 12
18515: NOT
18516: OR
18517: IFTRUE 18526
18519: PUSH
18520: LD_VAR 0 10
18524: NOT
18525: OR
18526: IFFALSE 18561
// begin result := [ chassis , engine , control , weapon ] ;
18528: LD_ADDR_VAR 0 6
18532: PUSH
18533: LD_VAR 0 2
18537: PUSH
18538: LD_VAR 0 3
18542: PUSH
18543: LD_VAR 0 4
18547: PUSH
18548: LD_VAR 0 5
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: ST_TO_ADDR
// exit ;
18559: GO 18856
// end ; if not chassis in _chassis then
18561: LD_VAR 0 2
18565: PUSH
18566: LD_VAR 0 9
18570: IN
18571: NOT
18572: IFFALSE 18598
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18574: LD_ADDR_VAR 0 2
18578: PUSH
18579: LD_VAR 0 9
18583: PUSH
18584: LD_INT 1
18586: PPUSH
18587: LD_VAR 0 9
18591: PPUSH
18592: CALL_OW 12
18596: ARRAY
18597: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18598: LD_VAR 0 2
18602: PPUSH
18603: LD_VAR 0 3
18607: PPUSH
18608: CALL 18861 0 2
18612: NOT
18613: IFFALSE 18674
// repeat engine := _engine [ 1 ] ;
18615: LD_ADDR_VAR 0 3
18619: PUSH
18620: LD_VAR 0 11
18624: PUSH
18625: LD_INT 1
18627: ARRAY
18628: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18629: LD_ADDR_VAR 0 11
18633: PUSH
18634: LD_VAR 0 11
18638: PPUSH
18639: LD_INT 1
18641: PPUSH
18642: CALL_OW 3
18646: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18647: LD_VAR 0 2
18651: PPUSH
18652: LD_VAR 0 3
18656: PPUSH
18657: CALL 18861 0 2
18661: IFTRUE 18672
18663: PUSH
18664: LD_VAR 0 11
18668: PUSH
18669: EMPTY
18670: EQUAL
18671: OR
18672: IFFALSE 18615
// if not control in _control then
18674: LD_VAR 0 4
18678: PUSH
18679: LD_VAR 0 12
18683: IN
18684: NOT
18685: IFFALSE 18711
// control := _control [ rand ( 1 , _control ) ] ;
18687: LD_ADDR_VAR 0 4
18691: PUSH
18692: LD_VAR 0 12
18696: PUSH
18697: LD_INT 1
18699: PPUSH
18700: LD_VAR 0 12
18704: PPUSH
18705: CALL_OW 12
18709: ARRAY
18710: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18711: LD_VAR 0 2
18715: PPUSH
18716: LD_VAR 0 5
18720: PPUSH
18721: CALL 19083 0 2
18725: NOT
18726: IFFALSE 18787
// repeat weapon := _weapon [ 1 ] ;
18728: LD_ADDR_VAR 0 5
18732: PUSH
18733: LD_VAR 0 10
18737: PUSH
18738: LD_INT 1
18740: ARRAY
18741: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18742: LD_ADDR_VAR 0 10
18746: PUSH
18747: LD_VAR 0 10
18751: PPUSH
18752: LD_INT 1
18754: PPUSH
18755: CALL_OW 3
18759: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18760: LD_VAR 0 2
18764: PPUSH
18765: LD_VAR 0 5
18769: PPUSH
18770: CALL 19083 0 2
18774: IFTRUE 18785
18776: PUSH
18777: LD_VAR 0 10
18781: PUSH
18782: EMPTY
18783: EQUAL
18784: OR
18785: IFFALSE 18728
// result := [ ] ;
18787: LD_ADDR_VAR 0 6
18791: PUSH
18792: EMPTY
18793: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18794: LD_VAR 0 1
18798: PPUSH
18799: LD_VAR 0 2
18803: PPUSH
18804: LD_VAR 0 3
18808: PPUSH
18809: LD_VAR 0 4
18813: PPUSH
18814: LD_VAR 0 5
18818: PPUSH
18819: CALL_OW 448
18823: IFFALSE 18856
// result := [ chassis , engine , control , weapon ] ;
18825: LD_ADDR_VAR 0 6
18829: PUSH
18830: LD_VAR 0 2
18834: PUSH
18835: LD_VAR 0 3
18839: PUSH
18840: LD_VAR 0 4
18844: PUSH
18845: LD_VAR 0 5
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: ST_TO_ADDR
// end ;
18856: LD_VAR 0 6
18860: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18861: LD_INT 0
18863: PPUSH
// if not chassis or not engine then
18864: LD_VAR 0 1
18868: NOT
18869: IFTRUE 18878
18871: PUSH
18872: LD_VAR 0 2
18876: NOT
18877: OR
18878: IFFALSE 18882
// exit ;
18880: GO 19078
// case engine of engine_solar :
18882: LD_VAR 0 2
18886: PUSH
18887: LD_INT 2
18889: DOUBLE
18890: EQUAL
18891: IFTRUE 18895
18893: GO 18933
18895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18896: LD_ADDR_VAR 0 3
18900: PUSH
18901: LD_INT 11
18903: PUSH
18904: LD_INT 12
18906: PUSH
18907: LD_INT 13
18909: PUSH
18910: LD_INT 14
18912: PUSH
18913: LD_INT 1
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: LD_INT 3
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: ST_TO_ADDR
18931: GO 19062
18933: LD_INT 1
18935: DOUBLE
18936: EQUAL
18937: IFTRUE 18941
18939: GO 19003
18941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18942: LD_ADDR_VAR 0 3
18946: PUSH
18947: LD_INT 11
18949: PUSH
18950: LD_INT 12
18952: PUSH
18953: LD_INT 13
18955: PUSH
18956: LD_INT 14
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: LD_INT 2
18964: PUSH
18965: LD_INT 3
18967: PUSH
18968: LD_INT 4
18970: PUSH
18971: LD_INT 5
18973: PUSH
18974: LD_INT 21
18976: PUSH
18977: LD_INT 23
18979: PUSH
18980: LD_INT 22
18982: PUSH
18983: LD_INT 24
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: ST_TO_ADDR
19001: GO 19062
19003: LD_INT 3
19005: DOUBLE
19006: EQUAL
19007: IFTRUE 19011
19009: GO 19061
19011: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19012: LD_ADDR_VAR 0 3
19016: PUSH
19017: LD_INT 13
19019: PUSH
19020: LD_INT 14
19022: PUSH
19023: LD_INT 2
19025: PUSH
19026: LD_INT 3
19028: PUSH
19029: LD_INT 4
19031: PUSH
19032: LD_INT 5
19034: PUSH
19035: LD_INT 21
19037: PUSH
19038: LD_INT 22
19040: PUSH
19041: LD_INT 23
19043: PUSH
19044: LD_INT 24
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: ST_TO_ADDR
19059: GO 19062
19061: POP
// result := ( chassis in result ) ;
19062: LD_ADDR_VAR 0 3
19066: PUSH
19067: LD_VAR 0 1
19071: PUSH
19072: LD_VAR 0 3
19076: IN
19077: ST_TO_ADDR
// end ;
19078: LD_VAR 0 3
19082: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19083: LD_INT 0
19085: PPUSH
// if not chassis or not weapon then
19086: LD_VAR 0 1
19090: NOT
19091: IFTRUE 19100
19093: PUSH
19094: LD_VAR 0 2
19098: NOT
19099: OR
19100: IFFALSE 19104
// exit ;
19102: GO 20198
// case weapon of us_machine_gun :
19104: LD_VAR 0 2
19108: PUSH
19109: LD_INT 2
19111: DOUBLE
19112: EQUAL
19113: IFTRUE 19117
19115: GO 19147
19117: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19118: LD_ADDR_VAR 0 3
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: LD_INT 2
19128: PUSH
19129: LD_INT 3
19131: PUSH
19132: LD_INT 4
19134: PUSH
19135: LD_INT 5
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: ST_TO_ADDR
19145: GO 20182
19147: LD_INT 3
19149: DOUBLE
19150: EQUAL
19151: IFTRUE 19155
19153: GO 19185
19155: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19156: LD_ADDR_VAR 0 3
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: LD_INT 2
19166: PUSH
19167: LD_INT 3
19169: PUSH
19170: LD_INT 4
19172: PUSH
19173: LD_INT 5
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: ST_TO_ADDR
19183: GO 20182
19185: LD_INT 11
19187: DOUBLE
19188: EQUAL
19189: IFTRUE 19193
19191: GO 19223
19193: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19194: LD_ADDR_VAR 0 3
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 3
19207: PUSH
19208: LD_INT 4
19210: PUSH
19211: LD_INT 5
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: ST_TO_ADDR
19221: GO 20182
19223: LD_INT 4
19225: DOUBLE
19226: EQUAL
19227: IFTRUE 19231
19229: GO 19257
19231: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19232: LD_ADDR_VAR 0 3
19236: PUSH
19237: LD_INT 2
19239: PUSH
19240: LD_INT 3
19242: PUSH
19243: LD_INT 4
19245: PUSH
19246: LD_INT 5
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: ST_TO_ADDR
19255: GO 20182
19257: LD_INT 5
19259: DOUBLE
19260: EQUAL
19261: IFTRUE 19265
19263: GO 19291
19265: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19266: LD_ADDR_VAR 0 3
19270: PUSH
19271: LD_INT 2
19273: PUSH
19274: LD_INT 3
19276: PUSH
19277: LD_INT 4
19279: PUSH
19280: LD_INT 5
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: ST_TO_ADDR
19289: GO 20182
19291: LD_INT 9
19293: DOUBLE
19294: EQUAL
19295: IFTRUE 19299
19297: GO 19325
19299: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19300: LD_ADDR_VAR 0 3
19304: PUSH
19305: LD_INT 2
19307: PUSH
19308: LD_INT 3
19310: PUSH
19311: LD_INT 4
19313: PUSH
19314: LD_INT 5
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: ST_TO_ADDR
19323: GO 20182
19325: LD_INT 7
19327: DOUBLE
19328: EQUAL
19329: IFTRUE 19333
19331: GO 19359
19333: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19334: LD_ADDR_VAR 0 3
19338: PUSH
19339: LD_INT 2
19341: PUSH
19342: LD_INT 3
19344: PUSH
19345: LD_INT 4
19347: PUSH
19348: LD_INT 5
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: ST_TO_ADDR
19357: GO 20182
19359: LD_INT 12
19361: DOUBLE
19362: EQUAL
19363: IFTRUE 19367
19365: GO 19393
19367: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19368: LD_ADDR_VAR 0 3
19372: PUSH
19373: LD_INT 2
19375: PUSH
19376: LD_INT 3
19378: PUSH
19379: LD_INT 4
19381: PUSH
19382: LD_INT 5
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: ST_TO_ADDR
19391: GO 20182
19393: LD_INT 13
19395: DOUBLE
19396: EQUAL
19397: IFTRUE 19401
19399: GO 19427
19401: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19402: LD_ADDR_VAR 0 3
19406: PUSH
19407: LD_INT 2
19409: PUSH
19410: LD_INT 3
19412: PUSH
19413: LD_INT 4
19415: PUSH
19416: LD_INT 5
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: ST_TO_ADDR
19425: GO 20182
19427: LD_INT 14
19429: DOUBLE
19430: EQUAL
19431: IFTRUE 19435
19433: GO 19453
19435: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19436: LD_ADDR_VAR 0 3
19440: PUSH
19441: LD_INT 4
19443: PUSH
19444: LD_INT 5
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: ST_TO_ADDR
19451: GO 20182
19453: LD_INT 6
19455: DOUBLE
19456: EQUAL
19457: IFTRUE 19461
19459: GO 19479
19461: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19462: LD_ADDR_VAR 0 3
19466: PUSH
19467: LD_INT 4
19469: PUSH
19470: LD_INT 5
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: ST_TO_ADDR
19477: GO 20182
19479: LD_INT 10
19481: DOUBLE
19482: EQUAL
19483: IFTRUE 19487
19485: GO 19505
19487: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19488: LD_ADDR_VAR 0 3
19492: PUSH
19493: LD_INT 4
19495: PUSH
19496: LD_INT 5
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: ST_TO_ADDR
19503: GO 20182
19505: LD_INT 22
19507: DOUBLE
19508: EQUAL
19509: IFTRUE 19513
19511: GO 19539
19513: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19514: LD_ADDR_VAR 0 3
19518: PUSH
19519: LD_INT 11
19521: PUSH
19522: LD_INT 12
19524: PUSH
19525: LD_INT 13
19527: PUSH
19528: LD_INT 14
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: ST_TO_ADDR
19537: GO 20182
19539: LD_INT 23
19541: DOUBLE
19542: EQUAL
19543: IFTRUE 19547
19545: GO 19573
19547: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19548: LD_ADDR_VAR 0 3
19552: PUSH
19553: LD_INT 11
19555: PUSH
19556: LD_INT 12
19558: PUSH
19559: LD_INT 13
19561: PUSH
19562: LD_INT 14
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: ST_TO_ADDR
19571: GO 20182
19573: LD_INT 24
19575: DOUBLE
19576: EQUAL
19577: IFTRUE 19581
19579: GO 19607
19581: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19582: LD_ADDR_VAR 0 3
19586: PUSH
19587: LD_INT 11
19589: PUSH
19590: LD_INT 12
19592: PUSH
19593: LD_INT 13
19595: PUSH
19596: LD_INT 14
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: ST_TO_ADDR
19605: GO 20182
19607: LD_INT 30
19609: DOUBLE
19610: EQUAL
19611: IFTRUE 19615
19613: GO 19641
19615: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19616: LD_ADDR_VAR 0 3
19620: PUSH
19621: LD_INT 11
19623: PUSH
19624: LD_INT 12
19626: PUSH
19627: LD_INT 13
19629: PUSH
19630: LD_INT 14
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: ST_TO_ADDR
19639: GO 20182
19641: LD_INT 25
19643: DOUBLE
19644: EQUAL
19645: IFTRUE 19649
19647: GO 19667
19649: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19650: LD_ADDR_VAR 0 3
19654: PUSH
19655: LD_INT 13
19657: PUSH
19658: LD_INT 14
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: ST_TO_ADDR
19665: GO 20182
19667: LD_INT 27
19669: DOUBLE
19670: EQUAL
19671: IFTRUE 19675
19673: GO 19693
19675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19676: LD_ADDR_VAR 0 3
19680: PUSH
19681: LD_INT 13
19683: PUSH
19684: LD_INT 14
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: ST_TO_ADDR
19691: GO 20182
19693: LD_INT 92
19695: DOUBLE
19696: EQUAL
19697: IFTRUE 19701
19699: GO 19727
19701: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19702: LD_ADDR_VAR 0 3
19706: PUSH
19707: LD_INT 11
19709: PUSH
19710: LD_INT 12
19712: PUSH
19713: LD_INT 13
19715: PUSH
19716: LD_INT 14
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: ST_TO_ADDR
19725: GO 20182
19727: LD_INT 28
19729: DOUBLE
19730: EQUAL
19731: IFTRUE 19735
19733: GO 19753
19735: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19736: LD_ADDR_VAR 0 3
19740: PUSH
19741: LD_INT 13
19743: PUSH
19744: LD_INT 14
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: ST_TO_ADDR
19751: GO 20182
19753: LD_INT 29
19755: DOUBLE
19756: EQUAL
19757: IFTRUE 19761
19759: GO 19779
19761: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19762: LD_ADDR_VAR 0 3
19766: PUSH
19767: LD_INT 13
19769: PUSH
19770: LD_INT 14
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: ST_TO_ADDR
19777: GO 20182
19779: LD_INT 31
19781: DOUBLE
19782: EQUAL
19783: IFTRUE 19787
19785: GO 19805
19787: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19788: LD_ADDR_VAR 0 3
19792: PUSH
19793: LD_INT 13
19795: PUSH
19796: LD_INT 14
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: ST_TO_ADDR
19803: GO 20182
19805: LD_INT 26
19807: DOUBLE
19808: EQUAL
19809: IFTRUE 19813
19811: GO 19831
19813: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19814: LD_ADDR_VAR 0 3
19818: PUSH
19819: LD_INT 13
19821: PUSH
19822: LD_INT 14
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: ST_TO_ADDR
19829: GO 20182
19831: LD_INT 42
19833: DOUBLE
19834: EQUAL
19835: IFTRUE 19839
19837: GO 19865
19839: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19840: LD_ADDR_VAR 0 3
19844: PUSH
19845: LD_INT 21
19847: PUSH
19848: LD_INT 22
19850: PUSH
19851: LD_INT 23
19853: PUSH
19854: LD_INT 24
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: ST_TO_ADDR
19863: GO 20182
19865: LD_INT 43
19867: DOUBLE
19868: EQUAL
19869: IFTRUE 19873
19871: GO 19899
19873: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19874: LD_ADDR_VAR 0 3
19878: PUSH
19879: LD_INT 21
19881: PUSH
19882: LD_INT 22
19884: PUSH
19885: LD_INT 23
19887: PUSH
19888: LD_INT 24
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: ST_TO_ADDR
19897: GO 20182
19899: LD_INT 44
19901: DOUBLE
19902: EQUAL
19903: IFTRUE 19907
19905: GO 19933
19907: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19908: LD_ADDR_VAR 0 3
19912: PUSH
19913: LD_INT 21
19915: PUSH
19916: LD_INT 22
19918: PUSH
19919: LD_INT 23
19921: PUSH
19922: LD_INT 24
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: ST_TO_ADDR
19931: GO 20182
19933: LD_INT 45
19935: DOUBLE
19936: EQUAL
19937: IFTRUE 19941
19939: GO 19967
19941: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19942: LD_ADDR_VAR 0 3
19946: PUSH
19947: LD_INT 21
19949: PUSH
19950: LD_INT 22
19952: PUSH
19953: LD_INT 23
19955: PUSH
19956: LD_INT 24
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: ST_TO_ADDR
19965: GO 20182
19967: LD_INT 49
19969: DOUBLE
19970: EQUAL
19971: IFTRUE 19975
19973: GO 20001
19975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19976: LD_ADDR_VAR 0 3
19980: PUSH
19981: LD_INT 21
19983: PUSH
19984: LD_INT 22
19986: PUSH
19987: LD_INT 23
19989: PUSH
19990: LD_INT 24
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: ST_TO_ADDR
19999: GO 20182
20001: LD_INT 51
20003: DOUBLE
20004: EQUAL
20005: IFTRUE 20009
20007: GO 20035
20009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20010: LD_ADDR_VAR 0 3
20014: PUSH
20015: LD_INT 21
20017: PUSH
20018: LD_INT 22
20020: PUSH
20021: LD_INT 23
20023: PUSH
20024: LD_INT 24
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: ST_TO_ADDR
20033: GO 20182
20035: LD_INT 52
20037: DOUBLE
20038: EQUAL
20039: IFTRUE 20043
20041: GO 20069
20043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20044: LD_ADDR_VAR 0 3
20048: PUSH
20049: LD_INT 21
20051: PUSH
20052: LD_INT 22
20054: PUSH
20055: LD_INT 23
20057: PUSH
20058: LD_INT 24
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: ST_TO_ADDR
20067: GO 20182
20069: LD_INT 53
20071: DOUBLE
20072: EQUAL
20073: IFTRUE 20077
20075: GO 20095
20077: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20078: LD_ADDR_VAR 0 3
20082: PUSH
20083: LD_INT 23
20085: PUSH
20086: LD_INT 24
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: ST_TO_ADDR
20093: GO 20182
20095: LD_INT 46
20097: DOUBLE
20098: EQUAL
20099: IFTRUE 20103
20101: GO 20121
20103: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20104: LD_ADDR_VAR 0 3
20108: PUSH
20109: LD_INT 23
20111: PUSH
20112: LD_INT 24
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: ST_TO_ADDR
20119: GO 20182
20121: LD_INT 47
20123: DOUBLE
20124: EQUAL
20125: IFTRUE 20129
20127: GO 20147
20129: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
20130: LD_ADDR_VAR 0 3
20134: PUSH
20135: LD_INT 23
20137: PUSH
20138: LD_INT 24
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: ST_TO_ADDR
20145: GO 20182
20147: LD_INT 98
20149: DOUBLE
20150: EQUAL
20151: IFTRUE 20155
20153: GO 20181
20155: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20156: LD_ADDR_VAR 0 3
20160: PUSH
20161: LD_INT 21
20163: PUSH
20164: LD_INT 22
20166: PUSH
20167: LD_INT 23
20169: PUSH
20170: LD_INT 24
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: ST_TO_ADDR
20179: GO 20182
20181: POP
// result := ( chassis in result ) ;
20182: LD_ADDR_VAR 0 3
20186: PUSH
20187: LD_VAR 0 1
20191: PUSH
20192: LD_VAR 0 3
20196: IN
20197: ST_TO_ADDR
// end ;
20198: LD_VAR 0 3
20202: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20203: LD_INT 0
20205: PPUSH
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
20210: PPUSH
20211: PPUSH
// result := array ;
20212: LD_ADDR_VAR 0 5
20216: PUSH
20217: LD_VAR 0 1
20221: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20222: LD_VAR 0 1
20226: NOT
20227: IFTRUE 20236
20229: PUSH
20230: LD_VAR 0 2
20234: NOT
20235: OR
20236: IFTRUE 20245
20238: PUSH
20239: LD_VAR 0 3
20243: NOT
20244: OR
20245: IFTRUE 20259
20247: PUSH
20248: LD_VAR 0 2
20252: PUSH
20253: LD_VAR 0 1
20257: GREATER
20258: OR
20259: IFTRUE 20273
20261: PUSH
20262: LD_VAR 0 3
20266: PUSH
20267: LD_VAR 0 1
20271: GREATER
20272: OR
20273: IFFALSE 20277
// exit ;
20275: GO 20573
// if direction then
20277: LD_VAR 0 4
20281: IFFALSE 20345
// begin d := 1 ;
20283: LD_ADDR_VAR 0 9
20287: PUSH
20288: LD_INT 1
20290: ST_TO_ADDR
// if i_from > i_to then
20291: LD_VAR 0 2
20295: PUSH
20296: LD_VAR 0 3
20300: GREATER
20301: IFFALSE 20327
// length := ( array - i_from ) + i_to else
20303: LD_ADDR_VAR 0 11
20307: PUSH
20308: LD_VAR 0 1
20312: PUSH
20313: LD_VAR 0 2
20317: MINUS
20318: PUSH
20319: LD_VAR 0 3
20323: PLUS
20324: ST_TO_ADDR
20325: GO 20343
// length := i_to - i_from ;
20327: LD_ADDR_VAR 0 11
20331: PUSH
20332: LD_VAR 0 3
20336: PUSH
20337: LD_VAR 0 2
20341: MINUS
20342: ST_TO_ADDR
// end else
20343: GO 20406
// begin d := - 1 ;
20345: LD_ADDR_VAR 0 9
20349: PUSH
20350: LD_INT 1
20352: NEG
20353: ST_TO_ADDR
// if i_from > i_to then
20354: LD_VAR 0 2
20358: PUSH
20359: LD_VAR 0 3
20363: GREATER
20364: IFFALSE 20384
// length := i_from - i_to else
20366: LD_ADDR_VAR 0 11
20370: PUSH
20371: LD_VAR 0 2
20375: PUSH
20376: LD_VAR 0 3
20380: MINUS
20381: ST_TO_ADDR
20382: GO 20406
// length := ( array - i_to ) + i_from ;
20384: LD_ADDR_VAR 0 11
20388: PUSH
20389: LD_VAR 0 1
20393: PUSH
20394: LD_VAR 0 3
20398: MINUS
20399: PUSH
20400: LD_VAR 0 2
20404: PLUS
20405: ST_TO_ADDR
// end ; if not length then
20406: LD_VAR 0 11
20410: NOT
20411: IFFALSE 20415
// exit ;
20413: GO 20573
// tmp := array ;
20415: LD_ADDR_VAR 0 10
20419: PUSH
20420: LD_VAR 0 1
20424: ST_TO_ADDR
// for i = 1 to length do
20425: LD_ADDR_VAR 0 6
20429: PUSH
20430: DOUBLE
20431: LD_INT 1
20433: DEC
20434: ST_TO_ADDR
20435: LD_VAR 0 11
20439: PUSH
20440: FOR_TO
20441: IFFALSE 20561
// begin for j = 1 to array do
20443: LD_ADDR_VAR 0 7
20447: PUSH
20448: DOUBLE
20449: LD_INT 1
20451: DEC
20452: ST_TO_ADDR
20453: LD_VAR 0 1
20457: PUSH
20458: FOR_TO
20459: IFFALSE 20547
// begin k := j + d ;
20461: LD_ADDR_VAR 0 8
20465: PUSH
20466: LD_VAR 0 7
20470: PUSH
20471: LD_VAR 0 9
20475: PLUS
20476: ST_TO_ADDR
// if k > array then
20477: LD_VAR 0 8
20481: PUSH
20482: LD_VAR 0 1
20486: GREATER
20487: IFFALSE 20497
// k := 1 ;
20489: LD_ADDR_VAR 0 8
20493: PUSH
20494: LD_INT 1
20496: ST_TO_ADDR
// if not k then
20497: LD_VAR 0 8
20501: NOT
20502: IFFALSE 20514
// k := array ;
20504: LD_ADDR_VAR 0 8
20508: PUSH
20509: LD_VAR 0 1
20513: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20514: LD_ADDR_VAR 0 10
20518: PUSH
20519: LD_VAR 0 10
20523: PPUSH
20524: LD_VAR 0 8
20528: PPUSH
20529: LD_VAR 0 1
20533: PUSH
20534: LD_VAR 0 7
20538: ARRAY
20539: PPUSH
20540: CALL_OW 1
20544: ST_TO_ADDR
// end ;
20545: GO 20458
20547: POP
20548: POP
// array := tmp ;
20549: LD_ADDR_VAR 0 1
20553: PUSH
20554: LD_VAR 0 10
20558: ST_TO_ADDR
// end ;
20559: GO 20440
20561: POP
20562: POP
// result := array ;
20563: LD_ADDR_VAR 0 5
20567: PUSH
20568: LD_VAR 0 1
20572: ST_TO_ADDR
// end ;
20573: LD_VAR 0 5
20577: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20578: LD_INT 0
20580: PPUSH
20581: PPUSH
// result := 0 ;
20582: LD_ADDR_VAR 0 3
20586: PUSH
20587: LD_INT 0
20589: ST_TO_ADDR
// if not array or not value in array then
20590: LD_VAR 0 1
20594: NOT
20595: IFTRUE 20610
20597: PUSH
20598: LD_VAR 0 2
20602: PUSH
20603: LD_VAR 0 1
20607: IN
20608: NOT
20609: OR
20610: IFFALSE 20614
// exit ;
20612: GO 20668
// for i = 1 to array do
20614: LD_ADDR_VAR 0 4
20618: PUSH
20619: DOUBLE
20620: LD_INT 1
20622: DEC
20623: ST_TO_ADDR
20624: LD_VAR 0 1
20628: PUSH
20629: FOR_TO
20630: IFFALSE 20666
// if value = array [ i ] then
20632: LD_VAR 0 2
20636: PUSH
20637: LD_VAR 0 1
20641: PUSH
20642: LD_VAR 0 4
20646: ARRAY
20647: EQUAL
20648: IFFALSE 20664
// begin result := i ;
20650: LD_ADDR_VAR 0 3
20654: PUSH
20655: LD_VAR 0 4
20659: ST_TO_ADDR
// exit ;
20660: POP
20661: POP
20662: GO 20668
// end ;
20664: GO 20629
20666: POP
20667: POP
// end ;
20668: LD_VAR 0 3
20672: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20673: LD_INT 0
20675: PPUSH
// vc_chassis := chassis ;
20676: LD_ADDR_OWVAR 37
20680: PUSH
20681: LD_VAR 0 1
20685: ST_TO_ADDR
// vc_engine := engine ;
20686: LD_ADDR_OWVAR 39
20690: PUSH
20691: LD_VAR 0 2
20695: ST_TO_ADDR
// vc_control := control ;
20696: LD_ADDR_OWVAR 38
20700: PUSH
20701: LD_VAR 0 3
20705: ST_TO_ADDR
// vc_weapon := weapon ;
20706: LD_ADDR_OWVAR 40
20710: PUSH
20711: LD_VAR 0 4
20715: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20716: LD_ADDR_OWVAR 41
20720: PUSH
20721: LD_VAR 0 5
20725: ST_TO_ADDR
// end ;
20726: LD_VAR 0 6
20730: RET
// export function WantPlant ( unit ) ; var task ; begin
20731: LD_INT 0
20733: PPUSH
20734: PPUSH
// result := false ;
20735: LD_ADDR_VAR 0 2
20739: PUSH
20740: LD_INT 0
20742: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20743: LD_ADDR_VAR 0 3
20747: PUSH
20748: LD_VAR 0 1
20752: PPUSH
20753: CALL_OW 437
20757: ST_TO_ADDR
// if task then
20758: LD_VAR 0 3
20762: IFFALSE 20790
// if task [ 1 ] [ 1 ] = p then
20764: LD_VAR 0 3
20768: PUSH
20769: LD_INT 1
20771: ARRAY
20772: PUSH
20773: LD_INT 1
20775: ARRAY
20776: PUSH
20777: LD_STRING p
20779: EQUAL
20780: IFFALSE 20790
// result := true ;
20782: LD_ADDR_VAR 0 2
20786: PUSH
20787: LD_INT 1
20789: ST_TO_ADDR
// end ;
20790: LD_VAR 0 2
20794: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20795: LD_INT 0
20797: PPUSH
20798: PPUSH
20799: PPUSH
20800: PPUSH
// if pos < 1 then
20801: LD_VAR 0 2
20805: PUSH
20806: LD_INT 1
20808: LESS
20809: IFFALSE 20813
// exit ;
20811: GO 21116
// if pos = 1 then
20813: LD_VAR 0 2
20817: PUSH
20818: LD_INT 1
20820: EQUAL
20821: IFFALSE 20854
// result := Replace ( arr , pos [ 1 ] , value ) else
20823: LD_ADDR_VAR 0 4
20827: PUSH
20828: LD_VAR 0 1
20832: PPUSH
20833: LD_VAR 0 2
20837: PUSH
20838: LD_INT 1
20840: ARRAY
20841: PPUSH
20842: LD_VAR 0 3
20846: PPUSH
20847: CALL_OW 1
20851: ST_TO_ADDR
20852: GO 21116
// begin tmp := arr ;
20854: LD_ADDR_VAR 0 6
20858: PUSH
20859: LD_VAR 0 1
20863: ST_TO_ADDR
// s_arr := [ tmp ] ;
20864: LD_ADDR_VAR 0 7
20868: PUSH
20869: LD_VAR 0 6
20873: PUSH
20874: EMPTY
20875: LIST
20876: ST_TO_ADDR
// for i = 1 to pos - 1 do
20877: LD_ADDR_VAR 0 5
20881: PUSH
20882: DOUBLE
20883: LD_INT 1
20885: DEC
20886: ST_TO_ADDR
20887: LD_VAR 0 2
20891: PUSH
20892: LD_INT 1
20894: MINUS
20895: PUSH
20896: FOR_TO
20897: IFFALSE 20942
// begin tmp := tmp [ pos [ i ] ] ;
20899: LD_ADDR_VAR 0 6
20903: PUSH
20904: LD_VAR 0 6
20908: PUSH
20909: LD_VAR 0 2
20913: PUSH
20914: LD_VAR 0 5
20918: ARRAY
20919: ARRAY
20920: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20921: LD_ADDR_VAR 0 7
20925: PUSH
20926: LD_VAR 0 7
20930: PUSH
20931: LD_VAR 0 6
20935: PUSH
20936: EMPTY
20937: LIST
20938: ADD
20939: ST_TO_ADDR
// end ;
20940: GO 20896
20942: POP
20943: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20944: LD_ADDR_VAR 0 6
20948: PUSH
20949: LD_VAR 0 6
20953: PPUSH
20954: LD_VAR 0 2
20958: PUSH
20959: LD_VAR 0 2
20963: ARRAY
20964: PPUSH
20965: LD_VAR 0 3
20969: PPUSH
20970: CALL_OW 1
20974: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20975: LD_ADDR_VAR 0 7
20979: PUSH
20980: LD_VAR 0 7
20984: PPUSH
20985: LD_VAR 0 7
20989: PPUSH
20990: LD_VAR 0 6
20994: PPUSH
20995: CALL_OW 1
20999: ST_TO_ADDR
// for i = s_arr downto 2 do
21000: LD_ADDR_VAR 0 5
21004: PUSH
21005: DOUBLE
21006: LD_VAR 0 7
21010: INC
21011: ST_TO_ADDR
21012: LD_INT 2
21014: PUSH
21015: FOR_DOWNTO
21016: IFFALSE 21100
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21018: LD_ADDR_VAR 0 6
21022: PUSH
21023: LD_VAR 0 7
21027: PUSH
21028: LD_VAR 0 5
21032: PUSH
21033: LD_INT 1
21035: MINUS
21036: ARRAY
21037: PPUSH
21038: LD_VAR 0 2
21042: PUSH
21043: LD_VAR 0 5
21047: PUSH
21048: LD_INT 1
21050: MINUS
21051: ARRAY
21052: PPUSH
21053: LD_VAR 0 7
21057: PUSH
21058: LD_VAR 0 5
21062: ARRAY
21063: PPUSH
21064: CALL_OW 1
21068: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21069: LD_ADDR_VAR 0 7
21073: PUSH
21074: LD_VAR 0 7
21078: PPUSH
21079: LD_VAR 0 5
21083: PUSH
21084: LD_INT 1
21086: MINUS
21087: PPUSH
21088: LD_VAR 0 6
21092: PPUSH
21093: CALL_OW 1
21097: ST_TO_ADDR
// end ;
21098: GO 21015
21100: POP
21101: POP
// result := s_arr [ 1 ] ;
21102: LD_ADDR_VAR 0 4
21106: PUSH
21107: LD_VAR 0 7
21111: PUSH
21112: LD_INT 1
21114: ARRAY
21115: ST_TO_ADDR
// end ; end ;
21116: LD_VAR 0 4
21120: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21121: LD_INT 0
21123: PPUSH
21124: PPUSH
// if not list then
21125: LD_VAR 0 1
21129: NOT
21130: IFFALSE 21134
// exit ;
21132: GO 21225
// i := list [ pos1 ] ;
21134: LD_ADDR_VAR 0 5
21138: PUSH
21139: LD_VAR 0 1
21143: PUSH
21144: LD_VAR 0 2
21148: ARRAY
21149: ST_TO_ADDR
// if not i then
21150: LD_VAR 0 5
21154: NOT
21155: IFFALSE 21159
// exit ;
21157: GO 21225
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21159: LD_ADDR_VAR 0 1
21163: PUSH
21164: LD_VAR 0 1
21168: PPUSH
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_VAR 0 1
21178: PUSH
21179: LD_VAR 0 3
21183: ARRAY
21184: PPUSH
21185: CALL_OW 1
21189: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21190: LD_ADDR_VAR 0 1
21194: PUSH
21195: LD_VAR 0 1
21199: PPUSH
21200: LD_VAR 0 3
21204: PPUSH
21205: LD_VAR 0 5
21209: PPUSH
21210: CALL_OW 1
21214: ST_TO_ADDR
// result := list ;
21215: LD_ADDR_VAR 0 4
21219: PUSH
21220: LD_VAR 0 1
21224: ST_TO_ADDR
// end ;
21225: LD_VAR 0 4
21229: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21230: LD_INT 0
21232: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21233: LD_ADDR_VAR 0 5
21237: PUSH
21238: LD_VAR 0 1
21242: PPUSH
21243: CALL_OW 250
21247: PPUSH
21248: LD_VAR 0 1
21252: PPUSH
21253: CALL_OW 251
21257: PPUSH
21258: LD_VAR 0 2
21262: PPUSH
21263: LD_VAR 0 3
21267: PPUSH
21268: LD_VAR 0 4
21272: PPUSH
21273: CALL 21655 0 5
21277: ST_TO_ADDR
// end ;
21278: LD_VAR 0 5
21282: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21283: LD_INT 0
21285: PPUSH
21286: PPUSH
21287: PPUSH
21288: PPUSH
// if not list or not unit then
21289: LD_VAR 0 2
21293: NOT
21294: IFTRUE 21303
21296: PUSH
21297: LD_VAR 0 1
21301: NOT
21302: OR
21303: IFFALSE 21307
// exit ;
21305: GO 21650
// result := [ ] ;
21307: LD_ADDR_VAR 0 5
21311: PUSH
21312: EMPTY
21313: ST_TO_ADDR
// for i in list do
21314: LD_ADDR_VAR 0 6
21318: PUSH
21319: LD_VAR 0 2
21323: PUSH
21324: FOR_IN
21325: IFFALSE 21543
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21327: LD_ADDR_VAR 0 8
21331: PUSH
21332: LD_VAR 0 1
21336: PPUSH
21337: LD_VAR 0 6
21341: PUSH
21342: LD_INT 1
21344: ARRAY
21345: PPUSH
21346: LD_VAR 0 6
21350: PUSH
21351: LD_INT 2
21353: ARRAY
21354: PPUSH
21355: CALL_OW 297
21359: ST_TO_ADDR
// if not Count ( result ) then
21360: LD_VAR 0 5
21364: PPUSH
21365: CALL 17877 0 1
21369: NOT
21370: IFFALSE 21403
// begin result := Join ( result , [ i , tmp ] ) ;
21372: LD_ADDR_VAR 0 5
21376: PUSH
21377: LD_VAR 0 5
21381: PPUSH
21382: LD_VAR 0 6
21386: PUSH
21387: LD_VAR 0 8
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PPUSH
21396: CALL 53853 0 2
21400: ST_TO_ADDR
// continue ;
21401: GO 21324
// end ; if result [ result ] [ 2 ] <= tmp then
21403: LD_VAR 0 5
21407: PUSH
21408: LD_VAR 0 5
21412: ARRAY
21413: PUSH
21414: LD_INT 2
21416: ARRAY
21417: PUSH
21418: LD_VAR 0 8
21422: LESSEQUAL
21423: IFFALSE 21456
// result := Join ( result , [ i , tmp ] ) else
21425: LD_ADDR_VAR 0 5
21429: PUSH
21430: LD_VAR 0 5
21434: PPUSH
21435: LD_VAR 0 6
21439: PUSH
21440: LD_VAR 0 8
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PPUSH
21449: CALL 53853 0 2
21453: ST_TO_ADDR
21454: GO 21541
// begin for j := 1 to Count ( result ) do
21456: LD_ADDR_VAR 0 7
21460: PUSH
21461: DOUBLE
21462: LD_INT 1
21464: DEC
21465: ST_TO_ADDR
21466: LD_VAR 0 5
21470: PPUSH
21471: CALL 17877 0 1
21475: PUSH
21476: FOR_TO
21477: IFFALSE 21539
// begin if tmp < result [ j ] [ 2 ] then
21479: LD_VAR 0 8
21483: PUSH
21484: LD_VAR 0 5
21488: PUSH
21489: LD_VAR 0 7
21493: ARRAY
21494: PUSH
21495: LD_INT 2
21497: ARRAY
21498: LESS
21499: IFFALSE 21537
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21501: LD_ADDR_VAR 0 5
21505: PUSH
21506: LD_VAR 0 5
21510: PPUSH
21511: LD_VAR 0 7
21515: PPUSH
21516: LD_VAR 0 6
21520: PUSH
21521: LD_VAR 0 8
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PPUSH
21530: CALL_OW 2
21534: ST_TO_ADDR
// break ;
21535: GO 21539
// end ; end ;
21537: GO 21476
21539: POP
21540: POP
// end ; end ;
21541: GO 21324
21543: POP
21544: POP
// if result and not asc then
21545: LD_VAR 0 5
21549: IFFALSE 21558
21551: PUSH
21552: LD_VAR 0 3
21556: NOT
21557: AND
21558: IFFALSE 21575
// result := ReverseArray ( result ) ;
21560: LD_ADDR_VAR 0 5
21564: PUSH
21565: LD_VAR 0 5
21569: PPUSH
21570: CALL 48933 0 1
21574: ST_TO_ADDR
// tmp := [ ] ;
21575: LD_ADDR_VAR 0 8
21579: PUSH
21580: EMPTY
21581: ST_TO_ADDR
// if mode then
21582: LD_VAR 0 4
21586: IFFALSE 21650
// begin for i := 1 to result do
21588: LD_ADDR_VAR 0 6
21592: PUSH
21593: DOUBLE
21594: LD_INT 1
21596: DEC
21597: ST_TO_ADDR
21598: LD_VAR 0 5
21602: PUSH
21603: FOR_TO
21604: IFFALSE 21638
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21606: LD_ADDR_VAR 0 8
21610: PUSH
21611: LD_VAR 0 8
21615: PPUSH
21616: LD_VAR 0 5
21620: PUSH
21621: LD_VAR 0 6
21625: ARRAY
21626: PUSH
21627: LD_INT 1
21629: ARRAY
21630: PPUSH
21631: CALL 53853 0 2
21635: ST_TO_ADDR
21636: GO 21603
21638: POP
21639: POP
// result := tmp ;
21640: LD_ADDR_VAR 0 5
21644: PUSH
21645: LD_VAR 0 8
21649: ST_TO_ADDR
// end ; end ;
21650: LD_VAR 0 5
21654: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21655: LD_INT 0
21657: PPUSH
21658: PPUSH
21659: PPUSH
21660: PPUSH
// if not list then
21661: LD_VAR 0 3
21665: NOT
21666: IFFALSE 21670
// exit ;
21668: GO 22060
// result := [ ] ;
21670: LD_ADDR_VAR 0 6
21674: PUSH
21675: EMPTY
21676: ST_TO_ADDR
// for i in list do
21677: LD_ADDR_VAR 0 7
21681: PUSH
21682: LD_VAR 0 3
21686: PUSH
21687: FOR_IN
21688: IFFALSE 21890
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21690: LD_ADDR_VAR 0 9
21694: PUSH
21695: LD_VAR 0 7
21699: PPUSH
21700: LD_VAR 0 1
21704: PPUSH
21705: LD_VAR 0 2
21709: PPUSH
21710: CALL_OW 297
21714: ST_TO_ADDR
// if not result then
21715: LD_VAR 0 6
21719: NOT
21720: IFFALSE 21746
// result := [ [ i , tmp ] ] else
21722: LD_ADDR_VAR 0 6
21726: PUSH
21727: LD_VAR 0 7
21731: PUSH
21732: LD_VAR 0 9
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: EMPTY
21742: LIST
21743: ST_TO_ADDR
21744: GO 21888
// begin if result [ result ] [ 2 ] <= tmp then
21746: LD_VAR 0 6
21750: PUSH
21751: LD_VAR 0 6
21755: ARRAY
21756: PUSH
21757: LD_INT 2
21759: ARRAY
21760: PUSH
21761: LD_VAR 0 9
21765: LESSEQUAL
21766: IFFALSE 21808
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21768: LD_ADDR_VAR 0 6
21772: PUSH
21773: LD_VAR 0 6
21777: PPUSH
21778: LD_VAR 0 6
21782: PUSH
21783: LD_INT 1
21785: PLUS
21786: PPUSH
21787: LD_VAR 0 7
21791: PUSH
21792: LD_VAR 0 9
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PPUSH
21801: CALL_OW 2
21805: ST_TO_ADDR
21806: GO 21888
// for j := 1 to result do
21808: LD_ADDR_VAR 0 8
21812: PUSH
21813: DOUBLE
21814: LD_INT 1
21816: DEC
21817: ST_TO_ADDR
21818: LD_VAR 0 6
21822: PUSH
21823: FOR_TO
21824: IFFALSE 21886
// begin if tmp < result [ j ] [ 2 ] then
21826: LD_VAR 0 9
21830: PUSH
21831: LD_VAR 0 6
21835: PUSH
21836: LD_VAR 0 8
21840: ARRAY
21841: PUSH
21842: LD_INT 2
21844: ARRAY
21845: LESS
21846: IFFALSE 21884
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21848: LD_ADDR_VAR 0 6
21852: PUSH
21853: LD_VAR 0 6
21857: PPUSH
21858: LD_VAR 0 8
21862: PPUSH
21863: LD_VAR 0 7
21867: PUSH
21868: LD_VAR 0 9
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PPUSH
21877: CALL_OW 2
21881: ST_TO_ADDR
// break ;
21882: GO 21886
// end ; end ;
21884: GO 21823
21886: POP
21887: POP
// end ; end ;
21888: GO 21687
21890: POP
21891: POP
// if result and not asc then
21892: LD_VAR 0 6
21896: IFFALSE 21905
21898: PUSH
21899: LD_VAR 0 4
21903: NOT
21904: AND
21905: IFFALSE 21980
// begin tmp := result ;
21907: LD_ADDR_VAR 0 9
21911: PUSH
21912: LD_VAR 0 6
21916: ST_TO_ADDR
// for i = tmp downto 1 do
21917: LD_ADDR_VAR 0 7
21921: PUSH
21922: DOUBLE
21923: LD_VAR 0 9
21927: INC
21928: ST_TO_ADDR
21929: LD_INT 1
21931: PUSH
21932: FOR_DOWNTO
21933: IFFALSE 21978
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21935: LD_ADDR_VAR 0 6
21939: PUSH
21940: LD_VAR 0 6
21944: PPUSH
21945: LD_VAR 0 9
21949: PUSH
21950: LD_VAR 0 7
21954: MINUS
21955: PUSH
21956: LD_INT 1
21958: PLUS
21959: PPUSH
21960: LD_VAR 0 9
21964: PUSH
21965: LD_VAR 0 7
21969: ARRAY
21970: PPUSH
21971: CALL_OW 1
21975: ST_TO_ADDR
21976: GO 21932
21978: POP
21979: POP
// end ; tmp := [ ] ;
21980: LD_ADDR_VAR 0 9
21984: PUSH
21985: EMPTY
21986: ST_TO_ADDR
// if mode then
21987: LD_VAR 0 5
21991: IFFALSE 22060
// begin for i = 1 to result do
21993: LD_ADDR_VAR 0 7
21997: PUSH
21998: DOUBLE
21999: LD_INT 1
22001: DEC
22002: ST_TO_ADDR
22003: LD_VAR 0 6
22007: PUSH
22008: FOR_TO
22009: IFFALSE 22048
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22011: LD_ADDR_VAR 0 9
22015: PUSH
22016: LD_VAR 0 9
22020: PPUSH
22021: LD_VAR 0 7
22025: PPUSH
22026: LD_VAR 0 6
22030: PUSH
22031: LD_VAR 0 7
22035: ARRAY
22036: PUSH
22037: LD_INT 1
22039: ARRAY
22040: PPUSH
22041: CALL_OW 1
22045: ST_TO_ADDR
22046: GO 22008
22048: POP
22049: POP
// result := tmp ;
22050: LD_ADDR_VAR 0 6
22054: PUSH
22055: LD_VAR 0 9
22059: ST_TO_ADDR
// end ; end ;
22060: LD_VAR 0 6
22064: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22065: LD_INT 0
22067: PPUSH
22068: PPUSH
22069: PPUSH
22070: PPUSH
22071: PPUSH
22072: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22073: LD_ADDR_VAR 0 5
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: EMPTY
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: ST_TO_ADDR
// if not x or not y then
22095: LD_VAR 0 2
22099: NOT
22100: IFTRUE 22109
22102: PUSH
22103: LD_VAR 0 3
22107: NOT
22108: OR
22109: IFFALSE 22113
// exit ;
22111: GO 23769
// if not range then
22113: LD_VAR 0 4
22117: NOT
22118: IFFALSE 22128
// range := 10 ;
22120: LD_ADDR_VAR 0 4
22124: PUSH
22125: LD_INT 10
22127: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22128: LD_ADDR_VAR 0 8
22132: PUSH
22133: LD_INT 81
22135: PUSH
22136: LD_VAR 0 1
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 92
22147: PUSH
22148: LD_VAR 0 2
22152: PUSH
22153: LD_VAR 0 3
22157: PUSH
22158: LD_VAR 0 4
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 3
22171: PUSH
22172: LD_INT 21
22174: PUSH
22175: LD_INT 3
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: LIST
22190: PPUSH
22191: CALL_OW 69
22195: ST_TO_ADDR
// if not tmp then
22196: LD_VAR 0 8
22200: NOT
22201: IFFALSE 22205
// exit ;
22203: GO 23769
// for i in tmp do
22205: LD_ADDR_VAR 0 6
22209: PUSH
22210: LD_VAR 0 8
22214: PUSH
22215: FOR_IN
22216: IFFALSE 23744
// begin points := [ 0 , 0 , 0 ] ;
22218: LD_ADDR_VAR 0 9
22222: PUSH
22223: LD_INT 0
22225: PUSH
22226: LD_INT 0
22228: PUSH
22229: LD_INT 0
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: LIST
22236: ST_TO_ADDR
// bpoints := 1 ;
22237: LD_ADDR_VAR 0 10
22241: PUSH
22242: LD_INT 1
22244: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22245: LD_VAR 0 6
22249: PPUSH
22250: CALL_OW 247
22254: PUSH
22255: LD_INT 1
22257: DOUBLE
22258: EQUAL
22259: IFTRUE 22263
22261: GO 22845
22263: POP
// begin if GetClass ( i ) = 1 then
22264: LD_VAR 0 6
22268: PPUSH
22269: CALL_OW 257
22273: PUSH
22274: LD_INT 1
22276: EQUAL
22277: IFFALSE 22298
// points := [ 10 , 5 , 3 ] ;
22279: LD_ADDR_VAR 0 9
22283: PUSH
22284: LD_INT 10
22286: PUSH
22287: LD_INT 5
22289: PUSH
22290: LD_INT 3
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22298: LD_VAR 0 6
22302: PPUSH
22303: CALL_OW 257
22307: PUSH
22308: LD_INT 2
22310: PUSH
22311: LD_INT 3
22313: PUSH
22314: LD_INT 4
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: LIST
22321: IN
22322: IFFALSE 22343
// points := [ 3 , 2 , 1 ] ;
22324: LD_ADDR_VAR 0 9
22328: PUSH
22329: LD_INT 3
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: LD_INT 1
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22343: LD_VAR 0 6
22347: PPUSH
22348: CALL_OW 257
22352: PUSH
22353: LD_INT 5
22355: EQUAL
22356: IFFALSE 22377
// points := [ 130 , 5 , 2 ] ;
22358: LD_ADDR_VAR 0 9
22362: PUSH
22363: LD_INT 130
22365: PUSH
22366: LD_INT 5
22368: PUSH
22369: LD_INT 2
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: LIST
22376: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22377: LD_VAR 0 6
22381: PPUSH
22382: CALL_OW 257
22386: PUSH
22387: LD_INT 8
22389: EQUAL
22390: IFFALSE 22411
// points := [ 35 , 35 , 30 ] ;
22392: LD_ADDR_VAR 0 9
22396: PUSH
22397: LD_INT 35
22399: PUSH
22400: LD_INT 35
22402: PUSH
22403: LD_INT 30
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: LIST
22410: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22411: LD_VAR 0 6
22415: PPUSH
22416: CALL_OW 257
22420: PUSH
22421: LD_INT 9
22423: EQUAL
22424: IFFALSE 22445
// points := [ 20 , 55 , 40 ] ;
22426: LD_ADDR_VAR 0 9
22430: PUSH
22431: LD_INT 20
22433: PUSH
22434: LD_INT 55
22436: PUSH
22437: LD_INT 40
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: LIST
22444: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22445: LD_VAR 0 6
22449: PPUSH
22450: CALL_OW 257
22454: PUSH
22455: LD_INT 12
22457: PUSH
22458: LD_INT 16
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: IN
22465: IFFALSE 22486
// points := [ 5 , 3 , 2 ] ;
22467: LD_ADDR_VAR 0 9
22471: PUSH
22472: LD_INT 5
22474: PUSH
22475: LD_INT 3
22477: PUSH
22478: LD_INT 2
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: LIST
22485: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22486: LD_VAR 0 6
22490: PPUSH
22491: CALL_OW 257
22495: PUSH
22496: LD_INT 17
22498: EQUAL
22499: IFFALSE 22520
// points := [ 100 , 50 , 75 ] ;
22501: LD_ADDR_VAR 0 9
22505: PUSH
22506: LD_INT 100
22508: PUSH
22509: LD_INT 50
22511: PUSH
22512: LD_INT 75
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: LIST
22519: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22520: LD_VAR 0 6
22524: PPUSH
22525: CALL_OW 257
22529: PUSH
22530: LD_INT 15
22532: EQUAL
22533: IFFALSE 22554
// points := [ 10 , 5 , 3 ] ;
22535: LD_ADDR_VAR 0 9
22539: PUSH
22540: LD_INT 10
22542: PUSH
22543: LD_INT 5
22545: PUSH
22546: LD_INT 3
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: LIST
22553: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22554: LD_VAR 0 6
22558: PPUSH
22559: CALL_OW 257
22563: PUSH
22564: LD_INT 14
22566: EQUAL
22567: IFFALSE 22588
// points := [ 10 , 0 , 0 ] ;
22569: LD_ADDR_VAR 0 9
22573: PUSH
22574: LD_INT 10
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: LD_INT 0
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22588: LD_VAR 0 6
22592: PPUSH
22593: CALL_OW 257
22597: PUSH
22598: LD_INT 11
22600: EQUAL
22601: IFFALSE 22622
// points := [ 30 , 10 , 5 ] ;
22603: LD_ADDR_VAR 0 9
22607: PUSH
22608: LD_INT 30
22610: PUSH
22611: LD_INT 10
22613: PUSH
22614: LD_INT 5
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22622: LD_VAR 0 1
22626: PPUSH
22627: LD_INT 5
22629: PPUSH
22630: CALL_OW 321
22634: PUSH
22635: LD_INT 2
22637: EQUAL
22638: IFFALSE 22655
// bpoints := bpoints * 1.8 ;
22640: LD_ADDR_VAR 0 10
22644: PUSH
22645: LD_VAR 0 10
22649: PUSH
22650: LD_REAL  1.80000000000000E+0000
22653: MUL
22654: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22655: LD_VAR 0 6
22659: PPUSH
22660: CALL_OW 257
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: LD_INT 2
22670: PUSH
22671: LD_INT 3
22673: PUSH
22674: LD_INT 4
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: IN
22683: IFFALSE 22703
22685: PUSH
22686: LD_VAR 0 1
22690: PPUSH
22691: LD_INT 51
22693: PPUSH
22694: CALL_OW 321
22698: PUSH
22699: LD_INT 2
22701: EQUAL
22702: AND
22703: IFFALSE 22720
// bpoints := bpoints * 1.2 ;
22705: LD_ADDR_VAR 0 10
22709: PUSH
22710: LD_VAR 0 10
22714: PUSH
22715: LD_REAL  1.20000000000000E+0000
22718: MUL
22719: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22720: LD_VAR 0 6
22724: PPUSH
22725: CALL_OW 257
22729: PUSH
22730: LD_INT 5
22732: PUSH
22733: LD_INT 7
22735: PUSH
22736: LD_INT 9
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: IN
22744: IFFALSE 22764
22746: PUSH
22747: LD_VAR 0 1
22751: PPUSH
22752: LD_INT 52
22754: PPUSH
22755: CALL_OW 321
22759: PUSH
22760: LD_INT 2
22762: EQUAL
22763: AND
22764: IFFALSE 22781
// bpoints := bpoints * 1.5 ;
22766: LD_ADDR_VAR 0 10
22770: PUSH
22771: LD_VAR 0 10
22775: PUSH
22776: LD_REAL  1.50000000000000E+0000
22779: MUL
22780: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22781: LD_VAR 0 1
22785: PPUSH
22786: LD_INT 66
22788: PPUSH
22789: CALL_OW 321
22793: PUSH
22794: LD_INT 2
22796: EQUAL
22797: IFFALSE 22814
// bpoints := bpoints * 1.1 ;
22799: LD_ADDR_VAR 0 10
22803: PUSH
22804: LD_VAR 0 10
22808: PUSH
22809: LD_REAL  1.10000000000000E+0000
22812: MUL
22813: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22814: LD_ADDR_VAR 0 10
22818: PUSH
22819: LD_VAR 0 10
22823: PUSH
22824: LD_VAR 0 6
22828: PPUSH
22829: LD_INT 1
22831: PPUSH
22832: CALL_OW 259
22836: PUSH
22837: LD_REAL  1.15000000000000E+0000
22840: MUL
22841: MUL
22842: ST_TO_ADDR
// end ; unit_vehicle :
22843: GO 23673
22845: LD_INT 2
22847: DOUBLE
22848: EQUAL
22849: IFTRUE 22853
22851: GO 23661
22853: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22854: LD_VAR 0 6
22858: PPUSH
22859: CALL_OW 264
22863: PUSH
22864: LD_INT 2
22866: PUSH
22867: LD_INT 42
22869: PUSH
22870: LD_INT 24
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: LIST
22877: IN
22878: IFFALSE 22899
// points := [ 25 , 5 , 3 ] ;
22880: LD_ADDR_VAR 0 9
22884: PUSH
22885: LD_INT 25
22887: PUSH
22888: LD_INT 5
22890: PUSH
22891: LD_INT 3
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22899: LD_VAR 0 6
22903: PPUSH
22904: CALL_OW 264
22908: PUSH
22909: LD_INT 4
22911: PUSH
22912: LD_INT 43
22914: PUSH
22915: LD_INT 25
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: IN
22923: IFFALSE 22944
// points := [ 40 , 15 , 5 ] ;
22925: LD_ADDR_VAR 0 9
22929: PUSH
22930: LD_INT 40
22932: PUSH
22933: LD_INT 15
22935: PUSH
22936: LD_INT 5
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: LIST
22943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22944: LD_VAR 0 6
22948: PPUSH
22949: CALL_OW 264
22953: PUSH
22954: LD_INT 3
22956: PUSH
22957: LD_INT 23
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: IN
22964: IFFALSE 22985
// points := [ 7 , 25 , 8 ] ;
22966: LD_ADDR_VAR 0 9
22970: PUSH
22971: LD_INT 7
22973: PUSH
22974: LD_INT 25
22976: PUSH
22977: LD_INT 8
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22985: LD_VAR 0 6
22989: PPUSH
22990: CALL_OW 264
22994: PUSH
22995: LD_INT 5
22997: PUSH
22998: LD_INT 27
23000: PUSH
23001: LD_INT 44
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: IN
23009: IFFALSE 23030
// points := [ 14 , 50 , 16 ] ;
23011: LD_ADDR_VAR 0 9
23015: PUSH
23016: LD_INT 14
23018: PUSH
23019: LD_INT 50
23021: PUSH
23022: LD_INT 16
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23030: LD_VAR 0 6
23034: PPUSH
23035: CALL_OW 264
23039: PUSH
23040: LD_INT 6
23042: PUSH
23043: LD_INT 46
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: IN
23050: IFFALSE 23071
// points := [ 32 , 120 , 70 ] ;
23052: LD_ADDR_VAR 0 9
23056: PUSH
23057: LD_INT 32
23059: PUSH
23060: LD_INT 120
23062: PUSH
23063: LD_INT 70
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: LIST
23070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23071: LD_VAR 0 6
23075: PPUSH
23076: CALL_OW 264
23080: PUSH
23081: LD_INT 7
23083: PUSH
23084: LD_INT 28
23086: PUSH
23087: LD_INT 45
23089: PUSH
23090: LD_INT 92
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: IN
23099: IFFALSE 23120
// points := [ 35 , 20 , 45 ] ;
23101: LD_ADDR_VAR 0 9
23105: PUSH
23106: LD_INT 35
23108: PUSH
23109: LD_INT 20
23111: PUSH
23112: LD_INT 45
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23120: LD_VAR 0 6
23124: PPUSH
23125: CALL_OW 264
23129: PUSH
23130: LD_INT 47
23132: PUSH
23133: EMPTY
23134: LIST
23135: IN
23136: IFFALSE 23157
// points := [ 67 , 45 , 75 ] ;
23138: LD_ADDR_VAR 0 9
23142: PUSH
23143: LD_INT 67
23145: PUSH
23146: LD_INT 45
23148: PUSH
23149: LD_INT 75
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: LIST
23156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23157: LD_VAR 0 6
23161: PPUSH
23162: CALL_OW 264
23166: PUSH
23167: LD_INT 26
23169: PUSH
23170: EMPTY
23171: LIST
23172: IN
23173: IFFALSE 23194
// points := [ 120 , 30 , 80 ] ;
23175: LD_ADDR_VAR 0 9
23179: PUSH
23180: LD_INT 120
23182: PUSH
23183: LD_INT 30
23185: PUSH
23186: LD_INT 80
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23194: LD_VAR 0 6
23198: PPUSH
23199: CALL_OW 264
23203: PUSH
23204: LD_INT 22
23206: PUSH
23207: EMPTY
23208: LIST
23209: IN
23210: IFFALSE 23231
// points := [ 40 , 1 , 1 ] ;
23212: LD_ADDR_VAR 0 9
23216: PUSH
23217: LD_INT 40
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: LIST
23230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23231: LD_VAR 0 6
23235: PPUSH
23236: CALL_OW 264
23240: PUSH
23241: LD_INT 29
23243: PUSH
23244: EMPTY
23245: LIST
23246: IN
23247: IFFALSE 23268
// points := [ 70 , 200 , 400 ] ;
23249: LD_ADDR_VAR 0 9
23253: PUSH
23254: LD_INT 70
23256: PUSH
23257: LD_INT 200
23259: PUSH
23260: LD_INT 400
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: LIST
23267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23268: LD_VAR 0 6
23272: PPUSH
23273: CALL_OW 264
23277: PUSH
23278: LD_INT 14
23280: PUSH
23281: LD_INT 53
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: IN
23288: IFFALSE 23309
// points := [ 40 , 10 , 20 ] ;
23290: LD_ADDR_VAR 0 9
23294: PUSH
23295: LD_INT 40
23297: PUSH
23298: LD_INT 10
23300: PUSH
23301: LD_INT 20
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: LIST
23308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23309: LD_VAR 0 6
23313: PPUSH
23314: CALL_OW 264
23318: PUSH
23319: LD_INT 9
23321: PUSH
23322: EMPTY
23323: LIST
23324: IN
23325: IFFALSE 23346
// points := [ 5 , 70 , 20 ] ;
23327: LD_ADDR_VAR 0 9
23331: PUSH
23332: LD_INT 5
23334: PUSH
23335: LD_INT 70
23337: PUSH
23338: LD_INT 20
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23346: LD_VAR 0 6
23350: PPUSH
23351: CALL_OW 264
23355: PUSH
23356: LD_INT 10
23358: PUSH
23359: EMPTY
23360: LIST
23361: IN
23362: IFFALSE 23383
// points := [ 35 , 110 , 70 ] ;
23364: LD_ADDR_VAR 0 9
23368: PUSH
23369: LD_INT 35
23371: PUSH
23372: LD_INT 110
23374: PUSH
23375: LD_INT 70
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: LIST
23382: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23383: LD_VAR 0 6
23387: PPUSH
23388: CALL_OW 265
23392: PUSH
23393: LD_INT 25
23395: EQUAL
23396: IFFALSE 23417
// points := [ 80 , 65 , 100 ] ;
23398: LD_ADDR_VAR 0 9
23402: PUSH
23403: LD_INT 80
23405: PUSH
23406: LD_INT 65
23408: PUSH
23409: LD_INT 100
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: LIST
23416: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23417: LD_VAR 0 6
23421: PPUSH
23422: CALL_OW 263
23426: PUSH
23427: LD_INT 1
23429: EQUAL
23430: IFFALSE 23465
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23432: LD_ADDR_VAR 0 10
23436: PUSH
23437: LD_VAR 0 10
23441: PUSH
23442: LD_VAR 0 6
23446: PPUSH
23447: CALL_OW 311
23451: PPUSH
23452: LD_INT 3
23454: PPUSH
23455: CALL_OW 259
23459: PUSH
23460: LD_INT 4
23462: MUL
23463: MUL
23464: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23465: LD_VAR 0 6
23469: PPUSH
23470: CALL_OW 263
23474: PUSH
23475: LD_INT 2
23477: EQUAL
23478: IFFALSE 23529
// begin j := IsControledBy ( i ) ;
23480: LD_ADDR_VAR 0 7
23484: PUSH
23485: LD_VAR 0 6
23489: PPUSH
23490: CALL_OW 312
23494: ST_TO_ADDR
// if j then
23495: LD_VAR 0 7
23499: IFFALSE 23529
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23501: LD_ADDR_VAR 0 10
23505: PUSH
23506: LD_VAR 0 10
23510: PUSH
23511: LD_VAR 0 7
23515: PPUSH
23516: LD_INT 3
23518: PPUSH
23519: CALL_OW 259
23523: PUSH
23524: LD_INT 3
23526: MUL
23527: MUL
23528: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23529: LD_VAR 0 6
23533: PPUSH
23534: CALL_OW 264
23538: PUSH
23539: LD_INT 5
23541: PUSH
23542: LD_INT 6
23544: PUSH
23545: LD_INT 46
23547: PUSH
23548: LD_INT 44
23550: PUSH
23551: LD_INT 47
23553: PUSH
23554: LD_INT 45
23556: PUSH
23557: LD_INT 28
23559: PUSH
23560: LD_INT 7
23562: PUSH
23563: LD_INT 27
23565: PUSH
23566: LD_INT 29
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: IN
23581: IFFALSE 23601
23583: PUSH
23584: LD_VAR 0 1
23588: PPUSH
23589: LD_INT 52
23591: PPUSH
23592: CALL_OW 321
23596: PUSH
23597: LD_INT 2
23599: EQUAL
23600: AND
23601: IFFALSE 23618
// bpoints := bpoints * 1.2 ;
23603: LD_ADDR_VAR 0 10
23607: PUSH
23608: LD_VAR 0 10
23612: PUSH
23613: LD_REAL  1.20000000000000E+0000
23616: MUL
23617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23618: LD_VAR 0 6
23622: PPUSH
23623: CALL_OW 264
23627: PUSH
23628: LD_INT 6
23630: PUSH
23631: LD_INT 46
23633: PUSH
23634: LD_INT 47
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: IN
23642: IFFALSE 23659
// bpoints := bpoints * 1.2 ;
23644: LD_ADDR_VAR 0 10
23648: PUSH
23649: LD_VAR 0 10
23653: PUSH
23654: LD_REAL  1.20000000000000E+0000
23657: MUL
23658: ST_TO_ADDR
// end ; unit_building :
23659: GO 23673
23661: LD_INT 3
23663: DOUBLE
23664: EQUAL
23665: IFTRUE 23669
23667: GO 23672
23669: POP
// ; end ;
23670: GO 23673
23672: POP
// for j = 1 to 3 do
23673: LD_ADDR_VAR 0 7
23677: PUSH
23678: DOUBLE
23679: LD_INT 1
23681: DEC
23682: ST_TO_ADDR
23683: LD_INT 3
23685: PUSH
23686: FOR_TO
23687: IFFALSE 23740
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23689: LD_ADDR_VAR 0 5
23693: PUSH
23694: LD_VAR 0 5
23698: PPUSH
23699: LD_VAR 0 7
23703: PPUSH
23704: LD_VAR 0 5
23708: PUSH
23709: LD_VAR 0 7
23713: ARRAY
23714: PUSH
23715: LD_VAR 0 9
23719: PUSH
23720: LD_VAR 0 7
23724: ARRAY
23725: PUSH
23726: LD_VAR 0 10
23730: MUL
23731: PLUS
23732: PPUSH
23733: CALL_OW 1
23737: ST_TO_ADDR
23738: GO 23686
23740: POP
23741: POP
// end ;
23742: GO 22215
23744: POP
23745: POP
// result := Replace ( result , 4 , tmp ) ;
23746: LD_ADDR_VAR 0 5
23750: PUSH
23751: LD_VAR 0 5
23755: PPUSH
23756: LD_INT 4
23758: PPUSH
23759: LD_VAR 0 8
23763: PPUSH
23764: CALL_OW 1
23768: ST_TO_ADDR
// end ;
23769: LD_VAR 0 5
23773: RET
// export function DangerAtRange ( unit , range ) ; begin
23774: LD_INT 0
23776: PPUSH
// if not unit then
23777: LD_VAR 0 1
23781: NOT
23782: IFFALSE 23786
// exit ;
23784: GO 23831
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23786: LD_ADDR_VAR 0 3
23790: PUSH
23791: LD_VAR 0 1
23795: PPUSH
23796: CALL_OW 255
23800: PPUSH
23801: LD_VAR 0 1
23805: PPUSH
23806: CALL_OW 250
23810: PPUSH
23811: LD_VAR 0 1
23815: PPUSH
23816: CALL_OW 251
23820: PPUSH
23821: LD_VAR 0 2
23825: PPUSH
23826: CALL 22065 0 4
23830: ST_TO_ADDR
// end ;
23831: LD_VAR 0 3
23835: RET
// export function DangerInArea ( side , area ) ; begin
23836: LD_INT 0
23838: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23839: LD_ADDR_VAR 0 3
23843: PUSH
23844: LD_VAR 0 2
23848: PPUSH
23849: LD_INT 81
23851: PUSH
23852: LD_VAR 0 1
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PPUSH
23861: CALL_OW 70
23865: ST_TO_ADDR
// end ;
23866: LD_VAR 0 3
23870: RET
// export function IsExtension ( b ) ; begin
23871: LD_INT 0
23873: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23874: LD_ADDR_VAR 0 2
23878: PUSH
23879: LD_VAR 0 1
23883: PUSH
23884: LD_INT 23
23886: PUSH
23887: LD_INT 20
23889: PUSH
23890: LD_INT 22
23892: PUSH
23893: LD_INT 17
23895: PUSH
23896: LD_INT 24
23898: PUSH
23899: LD_INT 21
23901: PUSH
23902: LD_INT 19
23904: PUSH
23905: LD_INT 16
23907: PUSH
23908: LD_INT 25
23910: PUSH
23911: LD_INT 18
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: IN
23926: ST_TO_ADDR
// end ;
23927: LD_VAR 0 2
23931: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23932: LD_INT 0
23934: PPUSH
23935: PPUSH
23936: PPUSH
// result := [ ] ;
23937: LD_ADDR_VAR 0 4
23941: PUSH
23942: EMPTY
23943: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23944: LD_ADDR_VAR 0 5
23948: PUSH
23949: LD_VAR 0 2
23953: PPUSH
23954: LD_INT 21
23956: PUSH
23957: LD_INT 3
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PPUSH
23964: CALL_OW 70
23968: ST_TO_ADDR
// if not tmp then
23969: LD_VAR 0 5
23973: NOT
23974: IFFALSE 23978
// exit ;
23976: GO 24042
// if checkLink then
23978: LD_VAR 0 3
23982: IFFALSE 24032
// begin for i in tmp do
23984: LD_ADDR_VAR 0 6
23988: PUSH
23989: LD_VAR 0 5
23993: PUSH
23994: FOR_IN
23995: IFFALSE 24030
// if GetBase ( i ) <> base then
23997: LD_VAR 0 6
24001: PPUSH
24002: CALL_OW 274
24006: PUSH
24007: LD_VAR 0 1
24011: NONEQUAL
24012: IFFALSE 24028
// ComLinkToBase ( base , i ) ;
24014: LD_VAR 0 1
24018: PPUSH
24019: LD_VAR 0 6
24023: PPUSH
24024: CALL_OW 169
24028: GO 23994
24030: POP
24031: POP
// end ; result := tmp ;
24032: LD_ADDR_VAR 0 4
24036: PUSH
24037: LD_VAR 0 5
24041: ST_TO_ADDR
// end ;
24042: LD_VAR 0 4
24046: RET
// export function ComComplete ( units , b ) ; var i ; begin
24047: LD_INT 0
24049: PPUSH
24050: PPUSH
// if not units then
24051: LD_VAR 0 1
24055: NOT
24056: IFFALSE 24060
// exit ;
24058: GO 24150
// for i in units do
24060: LD_ADDR_VAR 0 4
24064: PUSH
24065: LD_VAR 0 1
24069: PUSH
24070: FOR_IN
24071: IFFALSE 24148
// if BuildingStatus ( b ) = bs_build then
24073: LD_VAR 0 2
24077: PPUSH
24078: CALL_OW 461
24082: PUSH
24083: LD_INT 1
24085: EQUAL
24086: IFFALSE 24146
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24088: LD_VAR 0 4
24092: PPUSH
24093: LD_STRING h
24095: PUSH
24096: LD_VAR 0 2
24100: PPUSH
24101: CALL_OW 250
24105: PUSH
24106: LD_VAR 0 2
24110: PPUSH
24111: CALL_OW 251
24115: PUSH
24116: LD_VAR 0 2
24120: PUSH
24121: LD_INT 0
24123: PUSH
24124: LD_INT 0
24126: PUSH
24127: LD_INT 0
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: PUSH
24139: EMPTY
24140: LIST
24141: PPUSH
24142: CALL_OW 446
24146: GO 24070
24148: POP
24149: POP
// end ;
24150: LD_VAR 0 3
24154: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24155: LD_INT 0
24157: PPUSH
24158: PPUSH
24159: PPUSH
24160: PPUSH
24161: PPUSH
24162: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24163: LD_VAR 0 1
24167: NOT
24168: IFTRUE 24185
24170: PUSH
24171: LD_VAR 0 1
24175: PPUSH
24176: CALL_OW 263
24180: PUSH
24181: LD_INT 2
24183: NONEQUAL
24184: OR
24185: IFFALSE 24189
// exit ;
24187: GO 24505
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24189: LD_ADDR_VAR 0 6
24193: PUSH
24194: LD_INT 22
24196: PUSH
24197: LD_VAR 0 1
24201: PPUSH
24202: CALL_OW 255
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 30
24216: PUSH
24217: LD_INT 36
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 34
24226: PUSH
24227: LD_INT 31
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PPUSH
24243: CALL_OW 69
24247: ST_TO_ADDR
// if not tmp then
24248: LD_VAR 0 6
24252: NOT
24253: IFFALSE 24257
// exit ;
24255: GO 24505
// result := [ ] ;
24257: LD_ADDR_VAR 0 2
24261: PUSH
24262: EMPTY
24263: ST_TO_ADDR
// for i in tmp do
24264: LD_ADDR_VAR 0 3
24268: PUSH
24269: LD_VAR 0 6
24273: PUSH
24274: FOR_IN
24275: IFFALSE 24346
// begin t := UnitsInside ( i ) ;
24277: LD_ADDR_VAR 0 4
24281: PUSH
24282: LD_VAR 0 3
24286: PPUSH
24287: CALL_OW 313
24291: ST_TO_ADDR
// if t then
24292: LD_VAR 0 4
24296: IFFALSE 24344
// for j in t do
24298: LD_ADDR_VAR 0 7
24302: PUSH
24303: LD_VAR 0 4
24307: PUSH
24308: FOR_IN
24309: IFFALSE 24342
// result := Replace ( result , result + 1 , j ) ;
24311: LD_ADDR_VAR 0 2
24315: PUSH
24316: LD_VAR 0 2
24320: PPUSH
24321: LD_VAR 0 2
24325: PUSH
24326: LD_INT 1
24328: PLUS
24329: PPUSH
24330: LD_VAR 0 7
24334: PPUSH
24335: CALL_OW 1
24339: ST_TO_ADDR
24340: GO 24308
24342: POP
24343: POP
// end ;
24344: GO 24274
24346: POP
24347: POP
// if not result then
24348: LD_VAR 0 2
24352: NOT
24353: IFFALSE 24357
// exit ;
24355: GO 24505
// mech := result [ 1 ] ;
24357: LD_ADDR_VAR 0 5
24361: PUSH
24362: LD_VAR 0 2
24366: PUSH
24367: LD_INT 1
24369: ARRAY
24370: ST_TO_ADDR
// if result > 1 then
24371: LD_VAR 0 2
24375: PUSH
24376: LD_INT 1
24378: GREATER
24379: IFFALSE 24491
// begin for i = 2 to result do
24381: LD_ADDR_VAR 0 3
24385: PUSH
24386: DOUBLE
24387: LD_INT 2
24389: DEC
24390: ST_TO_ADDR
24391: LD_VAR 0 2
24395: PUSH
24396: FOR_TO
24397: IFFALSE 24489
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24399: LD_ADDR_VAR 0 4
24403: PUSH
24404: LD_VAR 0 2
24408: PUSH
24409: LD_VAR 0 3
24413: ARRAY
24414: PPUSH
24415: LD_INT 3
24417: PPUSH
24418: CALL_OW 259
24422: PUSH
24423: LD_VAR 0 2
24427: PUSH
24428: LD_VAR 0 3
24432: ARRAY
24433: PPUSH
24434: CALL_OW 432
24438: MINUS
24439: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24440: LD_VAR 0 4
24444: PUSH
24445: LD_VAR 0 5
24449: PPUSH
24450: LD_INT 3
24452: PPUSH
24453: CALL_OW 259
24457: PUSH
24458: LD_VAR 0 5
24462: PPUSH
24463: CALL_OW 432
24467: MINUS
24468: GREATEREQUAL
24469: IFFALSE 24487
// mech := result [ i ] ;
24471: LD_ADDR_VAR 0 5
24475: PUSH
24476: LD_VAR 0 2
24480: PUSH
24481: LD_VAR 0 3
24485: ARRAY
24486: ST_TO_ADDR
// end ;
24487: GO 24396
24489: POP
24490: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24491: LD_VAR 0 1
24495: PPUSH
24496: LD_VAR 0 5
24500: PPUSH
24501: CALL_OW 135
// end ;
24505: LD_VAR 0 2
24509: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24510: LD_INT 0
24512: PPUSH
24513: PPUSH
24514: PPUSH
24515: PPUSH
24516: PPUSH
24517: PPUSH
24518: PPUSH
24519: PPUSH
24520: PPUSH
24521: PPUSH
24522: PPUSH
24523: PPUSH
24524: PPUSH
// result := [ ] ;
24525: LD_ADDR_VAR 0 7
24529: PUSH
24530: EMPTY
24531: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24532: LD_VAR 0 1
24536: PPUSH
24537: CALL_OW 266
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: LD_INT 1
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: IN
24552: NOT
24553: IFFALSE 24557
// exit ;
24555: GO 26197
// if name then
24557: LD_VAR 0 3
24561: IFFALSE 24577
// SetBName ( base_dep , name ) ;
24563: LD_VAR 0 1
24567: PPUSH
24568: LD_VAR 0 3
24572: PPUSH
24573: CALL_OW 500
// base := GetBase ( base_dep ) ;
24577: LD_ADDR_VAR 0 15
24581: PUSH
24582: LD_VAR 0 1
24586: PPUSH
24587: CALL_OW 274
24591: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24592: LD_ADDR_VAR 0 16
24596: PUSH
24597: LD_VAR 0 1
24601: PPUSH
24602: CALL_OW 255
24606: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24607: LD_ADDR_VAR 0 17
24611: PUSH
24612: LD_VAR 0 1
24616: PPUSH
24617: CALL_OW 248
24621: ST_TO_ADDR
// if sources then
24622: LD_VAR 0 5
24626: IFFALSE 24673
// for i = 1 to 3 do
24628: LD_ADDR_VAR 0 8
24632: PUSH
24633: DOUBLE
24634: LD_INT 1
24636: DEC
24637: ST_TO_ADDR
24638: LD_INT 3
24640: PUSH
24641: FOR_TO
24642: IFFALSE 24671
// AddResourceType ( base , i , sources [ i ] ) ;
24644: LD_VAR 0 15
24648: PPUSH
24649: LD_VAR 0 8
24653: PPUSH
24654: LD_VAR 0 5
24658: PUSH
24659: LD_VAR 0 8
24663: ARRAY
24664: PPUSH
24665: CALL_OW 276
24669: GO 24641
24671: POP
24672: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24673: LD_ADDR_VAR 0 18
24677: PUSH
24678: LD_VAR 0 15
24682: PPUSH
24683: LD_VAR 0 2
24687: PPUSH
24688: LD_INT 1
24690: PPUSH
24691: CALL 23932 0 3
24695: ST_TO_ADDR
// InitHc ;
24696: CALL_OW 19
// InitUc ;
24700: CALL_OW 18
// uc_side := side ;
24704: LD_ADDR_OWVAR 20
24708: PUSH
24709: LD_VAR 0 16
24713: ST_TO_ADDR
// uc_nation := nation ;
24714: LD_ADDR_OWVAR 21
24718: PUSH
24719: LD_VAR 0 17
24723: ST_TO_ADDR
// if buildings then
24724: LD_VAR 0 18
24728: IFFALSE 26056
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24730: LD_ADDR_VAR 0 19
24734: PUSH
24735: LD_VAR 0 18
24739: PPUSH
24740: LD_INT 2
24742: PUSH
24743: LD_INT 30
24745: PUSH
24746: LD_INT 29
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 30
24755: PUSH
24756: LD_INT 30
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: LIST
24767: PPUSH
24768: CALL_OW 72
24772: ST_TO_ADDR
// if tmp then
24773: LD_VAR 0 19
24777: IFFALSE 24825
// for i in tmp do
24779: LD_ADDR_VAR 0 8
24783: PUSH
24784: LD_VAR 0 19
24788: PUSH
24789: FOR_IN
24790: IFFALSE 24823
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24792: LD_VAR 0 8
24796: PPUSH
24797: CALL_OW 250
24801: PPUSH
24802: LD_VAR 0 8
24806: PPUSH
24807: CALL_OW 251
24811: PPUSH
24812: LD_VAR 0 16
24816: PPUSH
24817: CALL_OW 441
24821: GO 24789
24823: POP
24824: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24825: LD_VAR 0 18
24829: PPUSH
24830: LD_INT 2
24832: PUSH
24833: LD_INT 30
24835: PUSH
24836: LD_INT 32
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 30
24845: PUSH
24846: LD_INT 33
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: PPUSH
24858: CALL_OW 72
24862: IFFALSE 24950
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24864: LD_ADDR_VAR 0 8
24868: PUSH
24869: LD_VAR 0 18
24873: PPUSH
24874: LD_INT 2
24876: PUSH
24877: LD_INT 30
24879: PUSH
24880: LD_INT 32
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 30
24889: PUSH
24890: LD_INT 33
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: LIST
24901: PPUSH
24902: CALL_OW 72
24906: PUSH
24907: FOR_IN
24908: IFFALSE 24948
// begin if not GetBWeapon ( i ) then
24910: LD_VAR 0 8
24914: PPUSH
24915: CALL_OW 269
24919: NOT
24920: IFFALSE 24946
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24922: LD_VAR 0 8
24926: PPUSH
24927: LD_VAR 0 8
24931: PPUSH
24932: LD_VAR 0 2
24936: PPUSH
24937: CALL 26202 0 2
24941: PPUSH
24942: CALL_OW 431
// end ;
24946: GO 24907
24948: POP
24949: POP
// end ; for i = 1 to personel do
24950: LD_ADDR_VAR 0 8
24954: PUSH
24955: DOUBLE
24956: LD_INT 1
24958: DEC
24959: ST_TO_ADDR
24960: LD_VAR 0 6
24964: PUSH
24965: FOR_TO
24966: IFFALSE 26036
// begin if i > 4 then
24968: LD_VAR 0 8
24972: PUSH
24973: LD_INT 4
24975: GREATER
24976: IFFALSE 24980
// break ;
24978: GO 26036
// case i of 1 :
24980: LD_VAR 0 8
24984: PUSH
24985: LD_INT 1
24987: DOUBLE
24988: EQUAL
24989: IFTRUE 24993
24991: GO 25073
24993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24994: LD_ADDR_VAR 0 12
24998: PUSH
24999: LD_VAR 0 18
25003: PPUSH
25004: LD_INT 22
25006: PUSH
25007: LD_VAR 0 16
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 58
25018: PUSH
25019: EMPTY
25020: LIST
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: LD_INT 30
25027: PUSH
25028: LD_INT 32
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 30
25037: PUSH
25038: LD_INT 4
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 30
25047: PUSH
25048: LD_INT 5
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: LIST
25065: PPUSH
25066: CALL_OW 72
25070: ST_TO_ADDR
25071: GO 25295
25073: LD_INT 2
25075: DOUBLE
25076: EQUAL
25077: IFTRUE 25081
25079: GO 25143
25081: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25082: LD_ADDR_VAR 0 12
25086: PUSH
25087: LD_VAR 0 18
25091: PPUSH
25092: LD_INT 22
25094: PUSH
25095: LD_VAR 0 16
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 2
25106: PUSH
25107: LD_INT 30
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 30
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: LIST
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PPUSH
25136: CALL_OW 72
25140: ST_TO_ADDR
25141: GO 25295
25143: LD_INT 3
25145: DOUBLE
25146: EQUAL
25147: IFTRUE 25151
25149: GO 25213
25151: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25152: LD_ADDR_VAR 0 12
25156: PUSH
25157: LD_VAR 0 18
25161: PPUSH
25162: LD_INT 22
25164: PUSH
25165: LD_VAR 0 16
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 2
25176: PUSH
25177: LD_INT 30
25179: PUSH
25180: LD_INT 2
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 30
25189: PUSH
25190: LD_INT 3
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PPUSH
25206: CALL_OW 72
25210: ST_TO_ADDR
25211: GO 25295
25213: LD_INT 4
25215: DOUBLE
25216: EQUAL
25217: IFTRUE 25221
25219: GO 25294
25221: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25222: LD_ADDR_VAR 0 12
25226: PUSH
25227: LD_VAR 0 18
25231: PPUSH
25232: LD_INT 22
25234: PUSH
25235: LD_VAR 0 16
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 2
25246: PUSH
25247: LD_INT 30
25249: PUSH
25250: LD_INT 6
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 30
25259: PUSH
25260: LD_INT 7
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 30
25269: PUSH
25270: LD_INT 8
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PPUSH
25287: CALL_OW 72
25291: ST_TO_ADDR
25292: GO 25295
25294: POP
// if i = 1 then
25295: LD_VAR 0 8
25299: PUSH
25300: LD_INT 1
25302: EQUAL
25303: IFFALSE 25414
// begin tmp := [ ] ;
25305: LD_ADDR_VAR 0 19
25309: PUSH
25310: EMPTY
25311: ST_TO_ADDR
// for j in f do
25312: LD_ADDR_VAR 0 9
25316: PUSH
25317: LD_VAR 0 12
25321: PUSH
25322: FOR_IN
25323: IFFALSE 25396
// if GetBType ( j ) = b_bunker then
25325: LD_VAR 0 9
25329: PPUSH
25330: CALL_OW 266
25334: PUSH
25335: LD_INT 32
25337: EQUAL
25338: IFFALSE 25365
// tmp := Insert ( tmp , 1 , j ) else
25340: LD_ADDR_VAR 0 19
25344: PUSH
25345: LD_VAR 0 19
25349: PPUSH
25350: LD_INT 1
25352: PPUSH
25353: LD_VAR 0 9
25357: PPUSH
25358: CALL_OW 2
25362: ST_TO_ADDR
25363: GO 25394
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25365: LD_ADDR_VAR 0 19
25369: PUSH
25370: LD_VAR 0 19
25374: PPUSH
25375: LD_VAR 0 19
25379: PUSH
25380: LD_INT 1
25382: PLUS
25383: PPUSH
25384: LD_VAR 0 9
25388: PPUSH
25389: CALL_OW 2
25393: ST_TO_ADDR
25394: GO 25322
25396: POP
25397: POP
// if tmp then
25398: LD_VAR 0 19
25402: IFFALSE 25414
// f := tmp ;
25404: LD_ADDR_VAR 0 12
25408: PUSH
25409: LD_VAR 0 19
25413: ST_TO_ADDR
// end ; x := personel [ i ] ;
25414: LD_ADDR_VAR 0 13
25418: PUSH
25419: LD_VAR 0 6
25423: PUSH
25424: LD_VAR 0 8
25428: ARRAY
25429: ST_TO_ADDR
// if x = - 1 then
25430: LD_VAR 0 13
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: EQUAL
25439: IFFALSE 25650
// begin for j in f do
25441: LD_ADDR_VAR 0 9
25445: PUSH
25446: LD_VAR 0 12
25450: PUSH
25451: FOR_IN
25452: IFFALSE 25646
// repeat InitHc ;
25454: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25458: LD_VAR 0 9
25462: PPUSH
25463: CALL_OW 266
25467: PUSH
25468: LD_INT 5
25470: EQUAL
25471: IFFALSE 25541
// begin if UnitsInside ( j ) < 3 then
25473: LD_VAR 0 9
25477: PPUSH
25478: CALL_OW 313
25482: PUSH
25483: LD_INT 3
25485: LESS
25486: IFFALSE 25522
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25488: LD_INT 0
25490: PPUSH
25491: LD_INT 5
25493: PUSH
25494: LD_INT 8
25496: PUSH
25497: LD_INT 9
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: LIST
25504: PUSH
25505: LD_VAR 0 17
25509: ARRAY
25510: PPUSH
25511: LD_VAR 0 4
25515: PPUSH
25516: CALL_OW 380
25520: GO 25539
// PrepareHuman ( false , i , skill ) ;
25522: LD_INT 0
25524: PPUSH
25525: LD_VAR 0 8
25529: PPUSH
25530: LD_VAR 0 4
25534: PPUSH
25535: CALL_OW 380
// end else
25539: GO 25558
// PrepareHuman ( false , i , skill ) ;
25541: LD_INT 0
25543: PPUSH
25544: LD_VAR 0 8
25548: PPUSH
25549: LD_VAR 0 4
25553: PPUSH
25554: CALL_OW 380
// un := CreateHuman ;
25558: LD_ADDR_VAR 0 14
25562: PUSH
25563: CALL_OW 44
25567: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25568: LD_ADDR_VAR 0 7
25572: PUSH
25573: LD_VAR 0 7
25577: PPUSH
25578: LD_INT 1
25580: PPUSH
25581: LD_VAR 0 14
25585: PPUSH
25586: CALL_OW 2
25590: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25591: LD_VAR 0 14
25595: PPUSH
25596: LD_VAR 0 9
25600: PPUSH
25601: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25605: LD_VAR 0 9
25609: PPUSH
25610: CALL_OW 313
25614: PUSH
25615: LD_INT 6
25617: EQUAL
25618: IFTRUE 25642
25620: PUSH
25621: LD_VAR 0 9
25625: PPUSH
25626: CALL_OW 266
25630: PUSH
25631: LD_INT 32
25633: PUSH
25634: LD_INT 31
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: IN
25641: OR
25642: IFFALSE 25454
25644: GO 25451
25646: POP
25647: POP
// end else
25648: GO 26034
// for j = 1 to x do
25650: LD_ADDR_VAR 0 9
25654: PUSH
25655: DOUBLE
25656: LD_INT 1
25658: DEC
25659: ST_TO_ADDR
25660: LD_VAR 0 13
25664: PUSH
25665: FOR_TO
25666: IFFALSE 26032
// begin InitHc ;
25668: CALL_OW 19
// if not f then
25672: LD_VAR 0 12
25676: NOT
25677: IFFALSE 25766
// begin PrepareHuman ( false , i , skill ) ;
25679: LD_INT 0
25681: PPUSH
25682: LD_VAR 0 8
25686: PPUSH
25687: LD_VAR 0 4
25691: PPUSH
25692: CALL_OW 380
// un := CreateHuman ;
25696: LD_ADDR_VAR 0 14
25700: PUSH
25701: CALL_OW 44
25705: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25706: LD_ADDR_VAR 0 7
25710: PUSH
25711: LD_VAR 0 7
25715: PPUSH
25716: LD_INT 1
25718: PPUSH
25719: LD_VAR 0 14
25723: PPUSH
25724: CALL_OW 2
25728: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25729: LD_VAR 0 14
25733: PPUSH
25734: LD_VAR 0 1
25738: PPUSH
25739: CALL_OW 250
25743: PPUSH
25744: LD_VAR 0 1
25748: PPUSH
25749: CALL_OW 251
25753: PPUSH
25754: LD_INT 10
25756: PPUSH
25757: LD_INT 0
25759: PPUSH
25760: CALL_OW 50
// continue ;
25764: GO 25665
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25766: LD_VAR 0 12
25770: PUSH
25771: LD_INT 1
25773: ARRAY
25774: PPUSH
25775: CALL_OW 313
25779: IFFALSE 25807
25781: PUSH
25782: LD_VAR 0 12
25786: PUSH
25787: LD_INT 1
25789: ARRAY
25790: PPUSH
25791: CALL_OW 266
25795: PUSH
25796: LD_INT 32
25798: PUSH
25799: LD_INT 31
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: IN
25806: AND
25807: IFTRUE 25828
25809: PUSH
25810: LD_VAR 0 12
25814: PUSH
25815: LD_INT 1
25817: ARRAY
25818: PPUSH
25819: CALL_OW 313
25823: PUSH
25824: LD_INT 6
25826: EQUAL
25827: OR
25828: IFFALSE 25848
// f := Delete ( f , 1 ) ;
25830: LD_ADDR_VAR 0 12
25834: PUSH
25835: LD_VAR 0 12
25839: PPUSH
25840: LD_INT 1
25842: PPUSH
25843: CALL_OW 3
25847: ST_TO_ADDR
// if not f then
25848: LD_VAR 0 12
25852: NOT
25853: IFFALSE 25871
// begin x := x + 2 ;
25855: LD_ADDR_VAR 0 13
25859: PUSH
25860: LD_VAR 0 13
25864: PUSH
25865: LD_INT 2
25867: PLUS
25868: ST_TO_ADDR
// continue ;
25869: GO 25665
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25871: LD_VAR 0 12
25875: PUSH
25876: LD_INT 1
25878: ARRAY
25879: PPUSH
25880: CALL_OW 266
25884: PUSH
25885: LD_INT 5
25887: EQUAL
25888: IFFALSE 25962
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25890: LD_VAR 0 12
25894: PUSH
25895: LD_INT 1
25897: ARRAY
25898: PPUSH
25899: CALL_OW 313
25903: PUSH
25904: LD_INT 3
25906: LESS
25907: IFFALSE 25943
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25909: LD_INT 0
25911: PPUSH
25912: LD_INT 5
25914: PUSH
25915: LD_INT 8
25917: PUSH
25918: LD_INT 9
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: LIST
25925: PUSH
25926: LD_VAR 0 17
25930: ARRAY
25931: PPUSH
25932: LD_VAR 0 4
25936: PPUSH
25937: CALL_OW 380
25941: GO 25960
// PrepareHuman ( false , i , skill ) ;
25943: LD_INT 0
25945: PPUSH
25946: LD_VAR 0 8
25950: PPUSH
25951: LD_VAR 0 4
25955: PPUSH
25956: CALL_OW 380
// end else
25960: GO 25979
// PrepareHuman ( false , i , skill ) ;
25962: LD_INT 0
25964: PPUSH
25965: LD_VAR 0 8
25969: PPUSH
25970: LD_VAR 0 4
25974: PPUSH
25975: CALL_OW 380
// un := CreateHuman ;
25979: LD_ADDR_VAR 0 14
25983: PUSH
25984: CALL_OW 44
25988: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25989: LD_ADDR_VAR 0 7
25993: PUSH
25994: LD_VAR 0 7
25998: PPUSH
25999: LD_INT 1
26001: PPUSH
26002: LD_VAR 0 14
26006: PPUSH
26007: CALL_OW 2
26011: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26012: LD_VAR 0 14
26016: PPUSH
26017: LD_VAR 0 12
26021: PUSH
26022: LD_INT 1
26024: ARRAY
26025: PPUSH
26026: CALL_OW 52
// end ;
26030: GO 25665
26032: POP
26033: POP
// end ;
26034: GO 24965
26036: POP
26037: POP
// result := result ^ buildings ;
26038: LD_ADDR_VAR 0 7
26042: PUSH
26043: LD_VAR 0 7
26047: PUSH
26048: LD_VAR 0 18
26052: ADD
26053: ST_TO_ADDR
// end else
26054: GO 26197
// begin for i = 1 to personel do
26056: LD_ADDR_VAR 0 8
26060: PUSH
26061: DOUBLE
26062: LD_INT 1
26064: DEC
26065: ST_TO_ADDR
26066: LD_VAR 0 6
26070: PUSH
26071: FOR_TO
26072: IFFALSE 26195
// begin if i > 4 then
26074: LD_VAR 0 8
26078: PUSH
26079: LD_INT 4
26081: GREATER
26082: IFFALSE 26086
// break ;
26084: GO 26195
// x := personel [ i ] ;
26086: LD_ADDR_VAR 0 13
26090: PUSH
26091: LD_VAR 0 6
26095: PUSH
26096: LD_VAR 0 8
26100: ARRAY
26101: ST_TO_ADDR
// if x = - 1 then
26102: LD_VAR 0 13
26106: PUSH
26107: LD_INT 1
26109: NEG
26110: EQUAL
26111: IFFALSE 26115
// continue ;
26113: GO 26071
// PrepareHuman ( false , i , skill ) ;
26115: LD_INT 0
26117: PPUSH
26118: LD_VAR 0 8
26122: PPUSH
26123: LD_VAR 0 4
26127: PPUSH
26128: CALL_OW 380
// un := CreateHuman ;
26132: LD_ADDR_VAR 0 14
26136: PUSH
26137: CALL_OW 44
26141: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26142: LD_VAR 0 14
26146: PPUSH
26147: LD_VAR 0 1
26151: PPUSH
26152: CALL_OW 250
26156: PPUSH
26157: LD_VAR 0 1
26161: PPUSH
26162: CALL_OW 251
26166: PPUSH
26167: LD_INT 10
26169: PPUSH
26170: LD_INT 0
26172: PPUSH
26173: CALL_OW 50
// result := result ^ un ;
26177: LD_ADDR_VAR 0 7
26181: PUSH
26182: LD_VAR 0 7
26186: PUSH
26187: LD_VAR 0 14
26191: ADD
26192: ST_TO_ADDR
// end ;
26193: GO 26071
26195: POP
26196: POP
// end ; end ;
26197: LD_VAR 0 7
26201: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26202: LD_INT 0
26204: PPUSH
26205: PPUSH
26206: PPUSH
26207: PPUSH
26208: PPUSH
26209: PPUSH
26210: PPUSH
26211: PPUSH
26212: PPUSH
26213: PPUSH
26214: PPUSH
26215: PPUSH
26216: PPUSH
26217: PPUSH
26218: PPUSH
26219: PPUSH
// result := false ;
26220: LD_ADDR_VAR 0 3
26224: PUSH
26225: LD_INT 0
26227: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26228: LD_VAR 0 1
26232: NOT
26233: IFTRUE 26258
26235: PUSH
26236: LD_VAR 0 1
26240: PPUSH
26241: CALL_OW 266
26245: PUSH
26246: LD_INT 32
26248: PUSH
26249: LD_INT 33
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: IN
26256: NOT
26257: OR
26258: IFFALSE 26262
// exit ;
26260: GO 27397
// nat := GetNation ( tower ) ;
26262: LD_ADDR_VAR 0 12
26266: PUSH
26267: LD_VAR 0 1
26271: PPUSH
26272: CALL_OW 248
26276: ST_TO_ADDR
// side := GetSide ( tower ) ;
26277: LD_ADDR_VAR 0 16
26281: PUSH
26282: LD_VAR 0 1
26286: PPUSH
26287: CALL_OW 255
26291: ST_TO_ADDR
// x := GetX ( tower ) ;
26292: LD_ADDR_VAR 0 10
26296: PUSH
26297: LD_VAR 0 1
26301: PPUSH
26302: CALL_OW 250
26306: ST_TO_ADDR
// y := GetY ( tower ) ;
26307: LD_ADDR_VAR 0 11
26311: PUSH
26312: LD_VAR 0 1
26316: PPUSH
26317: CALL_OW 251
26321: ST_TO_ADDR
// if not x or not y then
26322: LD_VAR 0 10
26326: NOT
26327: IFTRUE 26336
26329: PUSH
26330: LD_VAR 0 11
26334: NOT
26335: OR
26336: IFFALSE 26340
// exit ;
26338: GO 27397
// weapon := 0 ;
26340: LD_ADDR_VAR 0 18
26344: PUSH
26345: LD_INT 0
26347: ST_TO_ADDR
// fac_list := [ ] ;
26348: LD_ADDR_VAR 0 17
26352: PUSH
26353: EMPTY
26354: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26355: LD_ADDR_VAR 0 6
26359: PUSH
26360: LD_VAR 0 1
26364: PPUSH
26365: CALL_OW 274
26369: PPUSH
26370: LD_VAR 0 2
26374: PPUSH
26375: LD_INT 0
26377: PPUSH
26378: CALL 23932 0 3
26382: PPUSH
26383: LD_INT 30
26385: PUSH
26386: LD_INT 3
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PPUSH
26393: CALL_OW 72
26397: ST_TO_ADDR
// if not factories then
26398: LD_VAR 0 6
26402: NOT
26403: IFFALSE 26407
// exit ;
26405: GO 27397
// for i in factories do
26407: LD_ADDR_VAR 0 8
26411: PUSH
26412: LD_VAR 0 6
26416: PUSH
26417: FOR_IN
26418: IFFALSE 26443
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26420: LD_ADDR_VAR 0 17
26424: PUSH
26425: LD_VAR 0 17
26429: PUSH
26430: LD_VAR 0 8
26434: PPUSH
26435: CALL_OW 478
26439: UNION
26440: ST_TO_ADDR
26441: GO 26417
26443: POP
26444: POP
// if not fac_list then
26445: LD_VAR 0 17
26449: NOT
26450: IFFALSE 26454
// exit ;
26452: GO 27397
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26454: LD_ADDR_VAR 0 5
26458: PUSH
26459: LD_INT 4
26461: PUSH
26462: LD_INT 5
26464: PUSH
26465: LD_INT 9
26467: PUSH
26468: LD_INT 10
26470: PUSH
26471: LD_INT 6
26473: PUSH
26474: LD_INT 7
26476: PUSH
26477: LD_INT 11
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 27
26491: PUSH
26492: LD_INT 28
26494: PUSH
26495: LD_INT 26
26497: PUSH
26498: LD_INT 30
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 43
26509: PUSH
26510: LD_INT 44
26512: PUSH
26513: LD_INT 46
26515: PUSH
26516: LD_INT 45
26518: PUSH
26519: LD_INT 47
26521: PUSH
26522: LD_INT 49
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: LIST
26537: PUSH
26538: LD_VAR 0 12
26542: ARRAY
26543: ST_TO_ADDR
// list := list isect fac_list ;
26544: LD_ADDR_VAR 0 5
26548: PUSH
26549: LD_VAR 0 5
26553: PUSH
26554: LD_VAR 0 17
26558: ISECT
26559: ST_TO_ADDR
// if not list then
26560: LD_VAR 0 5
26564: NOT
26565: IFFALSE 26569
// exit ;
26567: GO 27397
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26569: LD_VAR 0 12
26573: PUSH
26574: LD_INT 3
26576: EQUAL
26577: IFFALSE 26589
26579: PUSH
26580: LD_INT 49
26582: PUSH
26583: LD_VAR 0 5
26587: IN
26588: AND
26589: IFFALSE 26609
26591: PUSH
26592: LD_INT 31
26594: PPUSH
26595: LD_VAR 0 16
26599: PPUSH
26600: CALL_OW 321
26604: PUSH
26605: LD_INT 2
26607: EQUAL
26608: AND
26609: IFFALSE 26669
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26611: LD_INT 22
26613: PUSH
26614: LD_VAR 0 16
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 35
26625: PUSH
26626: LD_INT 49
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 91
26635: PUSH
26636: LD_VAR 0 1
26640: PUSH
26641: LD_INT 10
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: LIST
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: LIST
26653: PPUSH
26654: CALL_OW 69
26658: NOT
26659: IFFALSE 26669
// weapon := ru_time_lapser ;
26661: LD_ADDR_VAR 0 18
26665: PUSH
26666: LD_INT 49
26668: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26669: LD_VAR 0 12
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: LD_INT 2
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: IN
26684: IFFALSE 26708
26686: PUSH
26687: LD_INT 11
26689: PUSH
26690: LD_VAR 0 5
26694: IN
26695: IFTRUE 26707
26697: PUSH
26698: LD_INT 30
26700: PUSH
26701: LD_VAR 0 5
26705: IN
26706: OR
26707: AND
26708: IFFALSE 26728
26710: PUSH
26711: LD_INT 6
26713: PPUSH
26714: LD_VAR 0 16
26718: PPUSH
26719: CALL_OW 321
26723: PUSH
26724: LD_INT 2
26726: EQUAL
26727: AND
26728: IFFALSE 26895
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26730: LD_INT 22
26732: PUSH
26733: LD_VAR 0 16
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 2
26744: PUSH
26745: LD_INT 35
26747: PUSH
26748: LD_INT 11
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 35
26757: PUSH
26758: LD_INT 30
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 91
26772: PUSH
26773: LD_VAR 0 1
26777: PUSH
26778: LD_INT 18
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: LIST
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: LIST
26790: PPUSH
26791: CALL_OW 69
26795: NOT
26796: IFFALSE 26872
26798: PUSH
26799: LD_INT 22
26801: PUSH
26802: LD_VAR 0 16
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 2
26813: PUSH
26814: LD_INT 30
26816: PUSH
26817: LD_INT 32
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 30
26826: PUSH
26827: LD_INT 33
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 91
26841: PUSH
26842: LD_VAR 0 1
26846: PUSH
26847: LD_INT 12
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: LIST
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: LIST
26859: PUSH
26860: EMPTY
26861: LIST
26862: PPUSH
26863: CALL_OW 69
26867: PUSH
26868: LD_INT 2
26870: GREATER
26871: AND
26872: IFFALSE 26895
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26874: LD_ADDR_VAR 0 18
26878: PUSH
26879: LD_INT 11
26881: PUSH
26882: LD_INT 30
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_VAR 0 12
26893: ARRAY
26894: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26895: LD_VAR 0 18
26899: NOT
26900: IFFALSE 26920
26902: PUSH
26903: LD_INT 40
26905: PPUSH
26906: LD_VAR 0 16
26910: PPUSH
26911: CALL_OW 321
26915: PUSH
26916: LD_INT 2
26918: EQUAL
26919: AND
26920: IFFALSE 26956
26922: PUSH
26923: LD_INT 7
26925: PUSH
26926: LD_VAR 0 5
26930: IN
26931: IFTRUE 26943
26933: PUSH
26934: LD_INT 28
26936: PUSH
26937: LD_VAR 0 5
26941: IN
26942: OR
26943: IFTRUE 26955
26945: PUSH
26946: LD_INT 45
26948: PUSH
26949: LD_VAR 0 5
26953: IN
26954: OR
26955: AND
26956: IFFALSE 27210
// begin hex := GetHexInfo ( x , y ) ;
26958: LD_ADDR_VAR 0 4
26962: PUSH
26963: LD_VAR 0 10
26967: PPUSH
26968: LD_VAR 0 11
26972: PPUSH
26973: CALL_OW 546
26977: ST_TO_ADDR
// if hex [ 1 ] then
26978: LD_VAR 0 4
26982: PUSH
26983: LD_INT 1
26985: ARRAY
26986: IFFALSE 26990
// exit ;
26988: GO 27397
// height := hex [ 2 ] ;
26990: LD_ADDR_VAR 0 15
26994: PUSH
26995: LD_VAR 0 4
26999: PUSH
27000: LD_INT 2
27002: ARRAY
27003: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27004: LD_ADDR_VAR 0 14
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: LD_INT 3
27017: PUSH
27018: LD_INT 5
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: ST_TO_ADDR
// for i in tmp do
27027: LD_ADDR_VAR 0 8
27031: PUSH
27032: LD_VAR 0 14
27036: PUSH
27037: FOR_IN
27038: IFFALSE 27208
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27040: LD_ADDR_VAR 0 9
27044: PUSH
27045: LD_VAR 0 10
27049: PPUSH
27050: LD_VAR 0 8
27054: PPUSH
27055: LD_INT 5
27057: PPUSH
27058: CALL_OW 272
27062: PUSH
27063: LD_VAR 0 11
27067: PPUSH
27068: LD_VAR 0 8
27072: PPUSH
27073: LD_INT 5
27075: PPUSH
27076: CALL_OW 273
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27085: LD_VAR 0 9
27089: PUSH
27090: LD_INT 1
27092: ARRAY
27093: PPUSH
27094: LD_VAR 0 9
27098: PUSH
27099: LD_INT 2
27101: ARRAY
27102: PPUSH
27103: CALL_OW 488
27107: IFFALSE 27206
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27109: LD_ADDR_VAR 0 4
27113: PUSH
27114: LD_VAR 0 9
27118: PUSH
27119: LD_INT 1
27121: ARRAY
27122: PPUSH
27123: LD_VAR 0 9
27127: PUSH
27128: LD_INT 2
27130: ARRAY
27131: PPUSH
27132: CALL_OW 546
27136: ST_TO_ADDR
// if hex [ 1 ] then
27137: LD_VAR 0 4
27141: PUSH
27142: LD_INT 1
27144: ARRAY
27145: IFFALSE 27149
// continue ;
27147: GO 27037
// h := hex [ 2 ] ;
27149: LD_ADDR_VAR 0 13
27153: PUSH
27154: LD_VAR 0 4
27158: PUSH
27159: LD_INT 2
27161: ARRAY
27162: ST_TO_ADDR
// if h + 7 < height then
27163: LD_VAR 0 13
27167: PUSH
27168: LD_INT 7
27170: PLUS
27171: PUSH
27172: LD_VAR 0 15
27176: LESS
27177: IFFALSE 27206
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27179: LD_ADDR_VAR 0 18
27183: PUSH
27184: LD_INT 7
27186: PUSH
27187: LD_INT 28
27189: PUSH
27190: LD_INT 45
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: LIST
27197: PUSH
27198: LD_VAR 0 12
27202: ARRAY
27203: ST_TO_ADDR
// break ;
27204: GO 27208
// end ; end ; end ;
27206: GO 27037
27208: POP
27209: POP
// end ; if not weapon then
27210: LD_VAR 0 18
27214: NOT
27215: IFFALSE 27275
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27217: LD_ADDR_VAR 0 5
27221: PUSH
27222: LD_VAR 0 5
27226: PUSH
27227: LD_INT 11
27229: PUSH
27230: LD_INT 30
27232: PUSH
27233: LD_INT 49
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: DIFF
27241: ST_TO_ADDR
// if not list then
27242: LD_VAR 0 5
27246: NOT
27247: IFFALSE 27251
// exit ;
27249: GO 27397
// weapon := list [ rand ( 1 , list ) ] ;
27251: LD_ADDR_VAR 0 18
27255: PUSH
27256: LD_VAR 0 5
27260: PUSH
27261: LD_INT 1
27263: PPUSH
27264: LD_VAR 0 5
27268: PPUSH
27269: CALL_OW 12
27273: ARRAY
27274: ST_TO_ADDR
// end ; if weapon then
27275: LD_VAR 0 18
27279: IFFALSE 27397
// begin tmp := CostOfWeapon ( weapon ) ;
27281: LD_ADDR_VAR 0 14
27285: PUSH
27286: LD_VAR 0 18
27290: PPUSH
27291: CALL_OW 451
27295: ST_TO_ADDR
// j := GetBase ( tower ) ;
27296: LD_ADDR_VAR 0 9
27300: PUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 274
27310: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27311: LD_VAR 0 9
27315: PPUSH
27316: LD_INT 1
27318: PPUSH
27319: CALL_OW 275
27323: PUSH
27324: LD_VAR 0 14
27328: PUSH
27329: LD_INT 1
27331: ARRAY
27332: GREATEREQUAL
27333: IFFALSE 27359
27335: PUSH
27336: LD_VAR 0 9
27340: PPUSH
27341: LD_INT 2
27343: PPUSH
27344: CALL_OW 275
27348: PUSH
27349: LD_VAR 0 14
27353: PUSH
27354: LD_INT 2
27356: ARRAY
27357: GREATEREQUAL
27358: AND
27359: IFFALSE 27385
27361: PUSH
27362: LD_VAR 0 9
27366: PPUSH
27367: LD_INT 3
27369: PPUSH
27370: CALL_OW 275
27374: PUSH
27375: LD_VAR 0 14
27379: PUSH
27380: LD_INT 3
27382: ARRAY
27383: GREATEREQUAL
27384: AND
27385: IFFALSE 27397
// result := weapon ;
27387: LD_ADDR_VAR 0 3
27391: PUSH
27392: LD_VAR 0 18
27396: ST_TO_ADDR
// end ; end ;
27397: LD_VAR 0 3
27401: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27402: LD_INT 0
27404: PPUSH
27405: PPUSH
// result := true ;
27406: LD_ADDR_VAR 0 3
27410: PUSH
27411: LD_INT 1
27413: ST_TO_ADDR
// if array1 = array2 then
27414: LD_VAR 0 1
27418: PUSH
27419: LD_VAR 0 2
27423: EQUAL
27424: IFFALSE 27484
// begin for i = 1 to array1 do
27426: LD_ADDR_VAR 0 4
27430: PUSH
27431: DOUBLE
27432: LD_INT 1
27434: DEC
27435: ST_TO_ADDR
27436: LD_VAR 0 1
27440: PUSH
27441: FOR_TO
27442: IFFALSE 27480
// if array1 [ i ] <> array2 [ i ] then
27444: LD_VAR 0 1
27448: PUSH
27449: LD_VAR 0 4
27453: ARRAY
27454: PUSH
27455: LD_VAR 0 2
27459: PUSH
27460: LD_VAR 0 4
27464: ARRAY
27465: NONEQUAL
27466: IFFALSE 27478
// begin result := false ;
27468: LD_ADDR_VAR 0 3
27472: PUSH
27473: LD_INT 0
27475: ST_TO_ADDR
// break ;
27476: GO 27480
// end ;
27478: GO 27441
27480: POP
27481: POP
// end else
27482: GO 27492
// result := false ;
27484: LD_ADDR_VAR 0 3
27488: PUSH
27489: LD_INT 0
27491: ST_TO_ADDR
// end ;
27492: LD_VAR 0 3
27496: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27497: LD_INT 0
27499: PPUSH
27500: PPUSH
// if not array1 or not array2 then
27501: LD_VAR 0 1
27505: NOT
27506: IFTRUE 27515
27508: PUSH
27509: LD_VAR 0 2
27513: NOT
27514: OR
27515: IFFALSE 27519
// exit ;
27517: GO 27583
// result := true ;
27519: LD_ADDR_VAR 0 3
27523: PUSH
27524: LD_INT 1
27526: ST_TO_ADDR
// for i = 1 to array1 do
27527: LD_ADDR_VAR 0 4
27531: PUSH
27532: DOUBLE
27533: LD_INT 1
27535: DEC
27536: ST_TO_ADDR
27537: LD_VAR 0 1
27541: PUSH
27542: FOR_TO
27543: IFFALSE 27581
// if array1 [ i ] <> array2 [ i ] then
27545: LD_VAR 0 1
27549: PUSH
27550: LD_VAR 0 4
27554: ARRAY
27555: PUSH
27556: LD_VAR 0 2
27560: PUSH
27561: LD_VAR 0 4
27565: ARRAY
27566: NONEQUAL
27567: IFFALSE 27579
// begin result := false ;
27569: LD_ADDR_VAR 0 3
27573: PUSH
27574: LD_INT 0
27576: ST_TO_ADDR
// break ;
27577: GO 27581
// end ;
27579: GO 27542
27581: POP
27582: POP
// end ;
27583: LD_VAR 0 3
27587: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27588: LD_INT 0
27590: PPUSH
27591: PPUSH
27592: PPUSH
// pom := GetBase ( fac ) ;
27593: LD_ADDR_VAR 0 5
27597: PUSH
27598: LD_VAR 0 1
27602: PPUSH
27603: CALL_OW 274
27607: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27608: LD_ADDR_VAR 0 4
27612: PUSH
27613: LD_VAR 0 2
27617: PUSH
27618: LD_INT 1
27620: ARRAY
27621: PPUSH
27622: LD_VAR 0 2
27626: PUSH
27627: LD_INT 2
27629: ARRAY
27630: PPUSH
27631: LD_VAR 0 2
27635: PUSH
27636: LD_INT 3
27638: ARRAY
27639: PPUSH
27640: LD_VAR 0 2
27644: PUSH
27645: LD_INT 4
27647: ARRAY
27648: PPUSH
27649: CALL_OW 449
27653: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27654: LD_ADDR_VAR 0 3
27658: PUSH
27659: LD_VAR 0 5
27663: PPUSH
27664: LD_INT 1
27666: PPUSH
27667: CALL_OW 275
27671: PUSH
27672: LD_VAR 0 4
27676: PUSH
27677: LD_INT 1
27679: ARRAY
27680: GREATEREQUAL
27681: IFFALSE 27707
27683: PUSH
27684: LD_VAR 0 5
27688: PPUSH
27689: LD_INT 2
27691: PPUSH
27692: CALL_OW 275
27696: PUSH
27697: LD_VAR 0 4
27701: PUSH
27702: LD_INT 2
27704: ARRAY
27705: GREATEREQUAL
27706: AND
27707: IFFALSE 27733
27709: PUSH
27710: LD_VAR 0 5
27714: PPUSH
27715: LD_INT 3
27717: PPUSH
27718: CALL_OW 275
27722: PUSH
27723: LD_VAR 0 4
27727: PUSH
27728: LD_INT 3
27730: ARRAY
27731: GREATEREQUAL
27732: AND
27733: ST_TO_ADDR
// end ;
27734: LD_VAR 0 3
27738: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27739: LD_INT 0
27741: PPUSH
27742: PPUSH
27743: PPUSH
27744: PPUSH
// pom := GetBase ( building ) ;
27745: LD_ADDR_VAR 0 3
27749: PUSH
27750: LD_VAR 0 1
27754: PPUSH
27755: CALL_OW 274
27759: ST_TO_ADDR
// if not pom then
27760: LD_VAR 0 3
27764: NOT
27765: IFFALSE 27769
// exit ;
27767: GO 27943
// btype := GetBType ( building ) ;
27769: LD_ADDR_VAR 0 5
27773: PUSH
27774: LD_VAR 0 1
27778: PPUSH
27779: CALL_OW 266
27783: ST_TO_ADDR
// if btype = b_armoury then
27784: LD_VAR 0 5
27788: PUSH
27789: LD_INT 4
27791: EQUAL
27792: IFFALSE 27802
// btype := b_barracks ;
27794: LD_ADDR_VAR 0 5
27798: PUSH
27799: LD_INT 5
27801: ST_TO_ADDR
// if btype = b_depot then
27802: LD_VAR 0 5
27806: PUSH
27807: LD_INT 0
27809: EQUAL
27810: IFFALSE 27820
// btype := b_warehouse ;
27812: LD_ADDR_VAR 0 5
27816: PUSH
27817: LD_INT 1
27819: ST_TO_ADDR
// if btype = b_workshop then
27820: LD_VAR 0 5
27824: PUSH
27825: LD_INT 2
27827: EQUAL
27828: IFFALSE 27838
// btype := b_factory ;
27830: LD_ADDR_VAR 0 5
27834: PUSH
27835: LD_INT 3
27837: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27838: LD_ADDR_VAR 0 4
27842: PUSH
27843: LD_VAR 0 5
27847: PPUSH
27848: LD_VAR 0 1
27852: PPUSH
27853: CALL_OW 248
27857: PPUSH
27858: CALL_OW 450
27862: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27863: LD_ADDR_VAR 0 2
27867: PUSH
27868: LD_VAR 0 3
27872: PPUSH
27873: LD_INT 1
27875: PPUSH
27876: CALL_OW 275
27880: PUSH
27881: LD_VAR 0 4
27885: PUSH
27886: LD_INT 1
27888: ARRAY
27889: GREATEREQUAL
27890: IFFALSE 27916
27892: PUSH
27893: LD_VAR 0 3
27897: PPUSH
27898: LD_INT 2
27900: PPUSH
27901: CALL_OW 275
27905: PUSH
27906: LD_VAR 0 4
27910: PUSH
27911: LD_INT 2
27913: ARRAY
27914: GREATEREQUAL
27915: AND
27916: IFFALSE 27942
27918: PUSH
27919: LD_VAR 0 3
27923: PPUSH
27924: LD_INT 3
27926: PPUSH
27927: CALL_OW 275
27931: PUSH
27932: LD_VAR 0 4
27936: PUSH
27937: LD_INT 3
27939: ARRAY
27940: GREATEREQUAL
27941: AND
27942: ST_TO_ADDR
// end ;
27943: LD_VAR 0 2
27947: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27948: LD_INT 0
27950: PPUSH
27951: PPUSH
27952: PPUSH
// pom := GetBase ( building ) ;
27953: LD_ADDR_VAR 0 4
27957: PUSH
27958: LD_VAR 0 1
27962: PPUSH
27963: CALL_OW 274
27967: ST_TO_ADDR
// if not pom then
27968: LD_VAR 0 4
27972: NOT
27973: IFFALSE 27977
// exit ;
27975: GO 28082
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27977: LD_ADDR_VAR 0 5
27981: PUSH
27982: LD_VAR 0 2
27986: PPUSH
27987: LD_VAR 0 1
27991: PPUSH
27992: CALL_OW 248
27996: PPUSH
27997: CALL_OW 450
28001: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28002: LD_ADDR_VAR 0 3
28006: PUSH
28007: LD_VAR 0 4
28011: PPUSH
28012: LD_INT 1
28014: PPUSH
28015: CALL_OW 275
28019: PUSH
28020: LD_VAR 0 5
28024: PUSH
28025: LD_INT 1
28027: ARRAY
28028: GREATEREQUAL
28029: IFFALSE 28055
28031: PUSH
28032: LD_VAR 0 4
28036: PPUSH
28037: LD_INT 2
28039: PPUSH
28040: CALL_OW 275
28044: PUSH
28045: LD_VAR 0 5
28049: PUSH
28050: LD_INT 2
28052: ARRAY
28053: GREATEREQUAL
28054: AND
28055: IFFALSE 28081
28057: PUSH
28058: LD_VAR 0 4
28062: PPUSH
28063: LD_INT 3
28065: PPUSH
28066: CALL_OW 275
28070: PUSH
28071: LD_VAR 0 5
28075: PUSH
28076: LD_INT 3
28078: ARRAY
28079: GREATEREQUAL
28080: AND
28081: ST_TO_ADDR
// end ;
28082: LD_VAR 0 3
28086: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28087: LD_INT 0
28089: PPUSH
28090: PPUSH
28091: PPUSH
28092: PPUSH
28093: PPUSH
28094: PPUSH
28095: PPUSH
28096: PPUSH
28097: PPUSH
28098: PPUSH
28099: PPUSH
// result := false ;
28100: LD_ADDR_VAR 0 8
28104: PUSH
28105: LD_INT 0
28107: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28108: LD_VAR 0 5
28112: NOT
28113: IFTRUE 28122
28115: PUSH
28116: LD_VAR 0 1
28120: NOT
28121: OR
28122: IFTRUE 28131
28124: PUSH
28125: LD_VAR 0 2
28129: NOT
28130: OR
28131: IFTRUE 28140
28133: PUSH
28134: LD_VAR 0 3
28138: NOT
28139: OR
28140: IFFALSE 28144
// exit ;
28142: GO 28970
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28144: LD_ADDR_VAR 0 14
28148: PUSH
28149: LD_VAR 0 1
28153: PPUSH
28154: LD_VAR 0 2
28158: PPUSH
28159: LD_VAR 0 3
28163: PPUSH
28164: LD_VAR 0 4
28168: PPUSH
28169: LD_VAR 0 5
28173: PUSH
28174: LD_INT 1
28176: ARRAY
28177: PPUSH
28178: CALL_OW 248
28182: PPUSH
28183: LD_INT 0
28185: PPUSH
28186: CALL 30251 0 6
28190: ST_TO_ADDR
// if not hexes then
28191: LD_VAR 0 14
28195: NOT
28196: IFFALSE 28200
// exit ;
28198: GO 28970
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28200: LD_ADDR_VAR 0 17
28204: PUSH
28205: LD_VAR 0 5
28209: PPUSH
28210: LD_INT 22
28212: PUSH
28213: LD_VAR 0 13
28217: PPUSH
28218: CALL_OW 255
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 2
28229: PUSH
28230: LD_INT 30
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 30
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: LIST
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PPUSH
28259: CALL_OW 72
28263: ST_TO_ADDR
// for i = 1 to hexes do
28264: LD_ADDR_VAR 0 9
28268: PUSH
28269: DOUBLE
28270: LD_INT 1
28272: DEC
28273: ST_TO_ADDR
28274: LD_VAR 0 14
28278: PUSH
28279: FOR_TO
28280: IFFALSE 28968
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28282: LD_ADDR_VAR 0 13
28286: PUSH
28287: LD_VAR 0 14
28291: PUSH
28292: LD_VAR 0 9
28296: ARRAY
28297: PUSH
28298: LD_INT 1
28300: ARRAY
28301: PPUSH
28302: LD_VAR 0 14
28306: PUSH
28307: LD_VAR 0 9
28311: ARRAY
28312: PUSH
28313: LD_INT 2
28315: ARRAY
28316: PPUSH
28317: CALL_OW 428
28321: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28322: LD_VAR 0 14
28326: PUSH
28327: LD_VAR 0 9
28331: ARRAY
28332: PUSH
28333: LD_INT 1
28335: ARRAY
28336: PPUSH
28337: LD_VAR 0 14
28341: PUSH
28342: LD_VAR 0 9
28346: ARRAY
28347: PUSH
28348: LD_INT 2
28350: ARRAY
28351: PPUSH
28352: CALL_OW 351
28356: IFTRUE 28395
28358: PUSH
28359: LD_VAR 0 14
28363: PUSH
28364: LD_VAR 0 9
28368: ARRAY
28369: PUSH
28370: LD_INT 1
28372: ARRAY
28373: PPUSH
28374: LD_VAR 0 14
28378: PUSH
28379: LD_VAR 0 9
28383: ARRAY
28384: PUSH
28385: LD_INT 2
28387: ARRAY
28388: PPUSH
28389: CALL_OW 488
28393: NOT
28394: OR
28395: IFTRUE 28412
28397: PUSH
28398: LD_VAR 0 13
28402: PPUSH
28403: CALL_OW 247
28407: PUSH
28408: LD_INT 3
28410: EQUAL
28411: OR
28412: IFFALSE 28418
// exit ;
28414: POP
28415: POP
28416: GO 28970
// if not tmp then
28418: LD_VAR 0 13
28422: NOT
28423: IFFALSE 28427
// continue ;
28425: GO 28279
// result := true ;
28427: LD_ADDR_VAR 0 8
28431: PUSH
28432: LD_INT 1
28434: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28435: LD_VAR 0 6
28439: IFFALSE 28456
28441: PUSH
28442: LD_VAR 0 13
28446: PPUSH
28447: CALL_OW 247
28451: PUSH
28452: LD_INT 2
28454: EQUAL
28455: AND
28456: IFFALSE 28473
28458: PUSH
28459: LD_VAR 0 13
28463: PPUSH
28464: CALL_OW 263
28468: PUSH
28469: LD_INT 1
28471: EQUAL
28472: AND
28473: IFFALSE 28637
// begin if IsDrivenBy ( tmp ) then
28475: LD_VAR 0 13
28479: PPUSH
28480: CALL_OW 311
28484: IFFALSE 28488
// continue ;
28486: GO 28279
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28488: LD_VAR 0 6
28492: PPUSH
28493: LD_INT 3
28495: PUSH
28496: LD_INT 60
28498: PUSH
28499: EMPTY
28500: LIST
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 3
28508: PUSH
28509: LD_INT 55
28511: PUSH
28512: EMPTY
28513: LIST
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PPUSH
28523: CALL_OW 72
28527: IFFALSE 28635
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28529: LD_ADDR_VAR 0 18
28533: PUSH
28534: LD_VAR 0 6
28538: PPUSH
28539: LD_INT 3
28541: PUSH
28542: LD_INT 60
28544: PUSH
28545: EMPTY
28546: LIST
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 3
28554: PUSH
28555: LD_INT 55
28557: PUSH
28558: EMPTY
28559: LIST
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PPUSH
28569: CALL_OW 72
28573: PUSH
28574: LD_INT 1
28576: ARRAY
28577: ST_TO_ADDR
// if IsInUnit ( driver ) then
28578: LD_VAR 0 18
28582: PPUSH
28583: CALL_OW 310
28587: IFFALSE 28598
// ComExit ( driver ) ;
28589: LD_VAR 0 18
28593: PPUSH
28594: CALL 54251 0 1
// AddComEnterUnit ( driver , tmp ) ;
28598: LD_VAR 0 18
28602: PPUSH
28603: LD_VAR 0 13
28607: PPUSH
28608: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28612: LD_VAR 0 18
28616: PPUSH
28617: LD_VAR 0 7
28621: PPUSH
28622: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28626: LD_VAR 0 18
28630: PPUSH
28631: CALL_OW 181
// end ; continue ;
28635: GO 28279
// end ; if not cleaners or not tmp in cleaners then
28637: LD_VAR 0 6
28641: NOT
28642: IFTRUE 28657
28644: PUSH
28645: LD_VAR 0 13
28649: PUSH
28650: LD_VAR 0 6
28654: IN
28655: NOT
28656: OR
28657: IFFALSE 28966
// begin if dep then
28659: LD_VAR 0 17
28663: IFFALSE 28799
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28665: LD_ADDR_VAR 0 16
28669: PUSH
28670: LD_VAR 0 17
28674: PUSH
28675: LD_INT 1
28677: ARRAY
28678: PPUSH
28679: CALL_OW 250
28683: PPUSH
28684: LD_VAR 0 17
28688: PUSH
28689: LD_INT 1
28691: ARRAY
28692: PPUSH
28693: CALL_OW 254
28697: PPUSH
28698: LD_INT 5
28700: PPUSH
28701: CALL_OW 272
28705: PUSH
28706: LD_VAR 0 17
28710: PUSH
28711: LD_INT 1
28713: ARRAY
28714: PPUSH
28715: CALL_OW 251
28719: PPUSH
28720: LD_VAR 0 17
28724: PUSH
28725: LD_INT 1
28727: ARRAY
28728: PPUSH
28729: CALL_OW 254
28733: PPUSH
28734: LD_INT 5
28736: PPUSH
28737: CALL_OW 273
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28746: LD_VAR 0 16
28750: PUSH
28751: LD_INT 1
28753: ARRAY
28754: PPUSH
28755: LD_VAR 0 16
28759: PUSH
28760: LD_INT 2
28762: ARRAY
28763: PPUSH
28764: CALL_OW 488
28768: IFFALSE 28799
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28770: LD_VAR 0 13
28774: PPUSH
28775: LD_VAR 0 16
28779: PUSH
28780: LD_INT 1
28782: ARRAY
28783: PPUSH
28784: LD_VAR 0 16
28788: PUSH
28789: LD_INT 2
28791: ARRAY
28792: PPUSH
28793: CALL_OW 111
// continue ;
28797: GO 28279
// end ; end ; r := GetDir ( tmp ) ;
28799: LD_ADDR_VAR 0 15
28803: PUSH
28804: LD_VAR 0 13
28808: PPUSH
28809: CALL_OW 254
28813: ST_TO_ADDR
// if r = 5 then
28814: LD_VAR 0 15
28818: PUSH
28819: LD_INT 5
28821: EQUAL
28822: IFFALSE 28832
// r := 0 ;
28824: LD_ADDR_VAR 0 15
28828: PUSH
28829: LD_INT 0
28831: ST_TO_ADDR
// for j = r to 5 do
28832: LD_ADDR_VAR 0 10
28836: PUSH
28837: DOUBLE
28838: LD_VAR 0 15
28842: DEC
28843: ST_TO_ADDR
28844: LD_INT 5
28846: PUSH
28847: FOR_TO
28848: IFFALSE 28964
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28850: LD_ADDR_VAR 0 11
28854: PUSH
28855: LD_VAR 0 13
28859: PPUSH
28860: CALL_OW 250
28864: PPUSH
28865: LD_VAR 0 10
28869: PPUSH
28870: LD_INT 2
28872: PPUSH
28873: CALL_OW 272
28877: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28878: LD_ADDR_VAR 0 12
28882: PUSH
28883: LD_VAR 0 13
28887: PPUSH
28888: CALL_OW 251
28892: PPUSH
28893: LD_VAR 0 10
28897: PPUSH
28898: LD_INT 2
28900: PPUSH
28901: CALL_OW 273
28905: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28906: LD_VAR 0 11
28910: PPUSH
28911: LD_VAR 0 12
28915: PPUSH
28916: CALL_OW 488
28920: IFFALSE 28939
28922: PUSH
28923: LD_VAR 0 11
28927: PPUSH
28928: LD_VAR 0 12
28932: PPUSH
28933: CALL_OW 428
28937: NOT
28938: AND
28939: IFFALSE 28962
// begin ComMoveXY ( tmp , _x , _y ) ;
28941: LD_VAR 0 13
28945: PPUSH
28946: LD_VAR 0 11
28950: PPUSH
28951: LD_VAR 0 12
28955: PPUSH
28956: CALL_OW 111
// break ;
28960: GO 28964
// end ; end ;
28962: GO 28847
28964: POP
28965: POP
// end ; end ;
28966: GO 28279
28968: POP
28969: POP
// end ;
28970: LD_VAR 0 8
28974: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28975: LD_INT 0
28977: PPUSH
// result := true ;
28978: LD_ADDR_VAR 0 3
28982: PUSH
28983: LD_INT 1
28985: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28986: LD_VAR 0 2
28990: PUSH
28991: LD_INT 24
28993: DOUBLE
28994: EQUAL
28995: IFTRUE 29005
28997: LD_INT 33
28999: DOUBLE
29000: EQUAL
29001: IFTRUE 29005
29003: GO 29030
29005: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29006: LD_ADDR_VAR 0 3
29010: PUSH
29011: LD_INT 32
29013: PPUSH
29014: LD_VAR 0 1
29018: PPUSH
29019: CALL_OW 321
29023: PUSH
29024: LD_INT 2
29026: EQUAL
29027: ST_TO_ADDR
29028: GO 29346
29030: LD_INT 20
29032: DOUBLE
29033: EQUAL
29034: IFTRUE 29038
29036: GO 29063
29038: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29039: LD_ADDR_VAR 0 3
29043: PUSH
29044: LD_INT 6
29046: PPUSH
29047: LD_VAR 0 1
29051: PPUSH
29052: CALL_OW 321
29056: PUSH
29057: LD_INT 2
29059: EQUAL
29060: ST_TO_ADDR
29061: GO 29346
29063: LD_INT 22
29065: DOUBLE
29066: EQUAL
29067: IFTRUE 29077
29069: LD_INT 36
29071: DOUBLE
29072: EQUAL
29073: IFTRUE 29077
29075: GO 29102
29077: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29078: LD_ADDR_VAR 0 3
29082: PUSH
29083: LD_INT 15
29085: PPUSH
29086: LD_VAR 0 1
29090: PPUSH
29091: CALL_OW 321
29095: PUSH
29096: LD_INT 2
29098: EQUAL
29099: ST_TO_ADDR
29100: GO 29346
29102: LD_INT 30
29104: DOUBLE
29105: EQUAL
29106: IFTRUE 29110
29108: GO 29135
29110: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29111: LD_ADDR_VAR 0 3
29115: PUSH
29116: LD_INT 20
29118: PPUSH
29119: LD_VAR 0 1
29123: PPUSH
29124: CALL_OW 321
29128: PUSH
29129: LD_INT 2
29131: EQUAL
29132: ST_TO_ADDR
29133: GO 29346
29135: LD_INT 28
29137: DOUBLE
29138: EQUAL
29139: IFTRUE 29149
29141: LD_INT 21
29143: DOUBLE
29144: EQUAL
29145: IFTRUE 29149
29147: GO 29174
29149: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29150: LD_ADDR_VAR 0 3
29154: PUSH
29155: LD_INT 21
29157: PPUSH
29158: LD_VAR 0 1
29162: PPUSH
29163: CALL_OW 321
29167: PUSH
29168: LD_INT 2
29170: EQUAL
29171: ST_TO_ADDR
29172: GO 29346
29174: LD_INT 16
29176: DOUBLE
29177: EQUAL
29178: IFTRUE 29182
29180: GO 29207
29182: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29183: LD_ADDR_VAR 0 3
29187: PUSH
29188: LD_INT 84
29190: PPUSH
29191: LD_VAR 0 1
29195: PPUSH
29196: CALL_OW 321
29200: PUSH
29201: LD_INT 2
29203: EQUAL
29204: ST_TO_ADDR
29205: GO 29346
29207: LD_INT 19
29209: DOUBLE
29210: EQUAL
29211: IFTRUE 29221
29213: LD_INT 23
29215: DOUBLE
29216: EQUAL
29217: IFTRUE 29221
29219: GO 29246
29221: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29222: LD_ADDR_VAR 0 3
29226: PUSH
29227: LD_INT 83
29229: PPUSH
29230: LD_VAR 0 1
29234: PPUSH
29235: CALL_OW 321
29239: PUSH
29240: LD_INT 2
29242: EQUAL
29243: ST_TO_ADDR
29244: GO 29346
29246: LD_INT 17
29248: DOUBLE
29249: EQUAL
29250: IFTRUE 29254
29252: GO 29279
29254: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29255: LD_ADDR_VAR 0 3
29259: PUSH
29260: LD_INT 39
29262: PPUSH
29263: LD_VAR 0 1
29267: PPUSH
29268: CALL_OW 321
29272: PUSH
29273: LD_INT 2
29275: EQUAL
29276: ST_TO_ADDR
29277: GO 29346
29279: LD_INT 18
29281: DOUBLE
29282: EQUAL
29283: IFTRUE 29287
29285: GO 29312
29287: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29288: LD_ADDR_VAR 0 3
29292: PUSH
29293: LD_INT 40
29295: PPUSH
29296: LD_VAR 0 1
29300: PPUSH
29301: CALL_OW 321
29305: PUSH
29306: LD_INT 2
29308: EQUAL
29309: ST_TO_ADDR
29310: GO 29346
29312: LD_INT 27
29314: DOUBLE
29315: EQUAL
29316: IFTRUE 29320
29318: GO 29345
29320: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29321: LD_ADDR_VAR 0 3
29325: PUSH
29326: LD_INT 35
29328: PPUSH
29329: LD_VAR 0 1
29333: PPUSH
29334: CALL_OW 321
29338: PUSH
29339: LD_INT 2
29341: EQUAL
29342: ST_TO_ADDR
29343: GO 29346
29345: POP
// end ;
29346: LD_VAR 0 3
29350: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29351: LD_INT 0
29353: PPUSH
29354: PPUSH
29355: PPUSH
29356: PPUSH
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
// result := false ;
29364: LD_ADDR_VAR 0 6
29368: PUSH
29369: LD_INT 0
29371: ST_TO_ADDR
// if btype = b_depot then
29372: LD_VAR 0 2
29376: PUSH
29377: LD_INT 0
29379: EQUAL
29380: IFFALSE 29392
// begin result := true ;
29382: LD_ADDR_VAR 0 6
29386: PUSH
29387: LD_INT 1
29389: ST_TO_ADDR
// exit ;
29390: GO 30246
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29392: LD_VAR 0 1
29396: NOT
29397: IFTRUE 29422
29399: PUSH
29400: LD_VAR 0 1
29404: PPUSH
29405: CALL_OW 266
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: IN
29420: NOT
29421: OR
29422: IFTRUE 29431
29424: PUSH
29425: LD_VAR 0 2
29429: NOT
29430: OR
29431: IFTRUE 29467
29433: PUSH
29434: LD_VAR 0 5
29438: PUSH
29439: LD_INT 0
29441: PUSH
29442: LD_INT 1
29444: PUSH
29445: LD_INT 2
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: LD_INT 4
29453: PUSH
29454: LD_INT 5
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: IN
29465: NOT
29466: OR
29467: IFTRUE 29486
29469: PUSH
29470: LD_VAR 0 3
29474: PPUSH
29475: LD_VAR 0 4
29479: PPUSH
29480: CALL_OW 488
29484: NOT
29485: OR
29486: IFFALSE 29490
// exit ;
29488: GO 30246
// side := GetSide ( depot ) ;
29490: LD_ADDR_VAR 0 9
29494: PUSH
29495: LD_VAR 0 1
29499: PPUSH
29500: CALL_OW 255
29504: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29505: LD_VAR 0 9
29509: PPUSH
29510: LD_VAR 0 2
29514: PPUSH
29515: CALL 28975 0 2
29519: NOT
29520: IFFALSE 29524
// exit ;
29522: GO 30246
// pom := GetBase ( depot ) ;
29524: LD_ADDR_VAR 0 10
29528: PUSH
29529: LD_VAR 0 1
29533: PPUSH
29534: CALL_OW 274
29538: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29539: LD_ADDR_VAR 0 11
29543: PUSH
29544: LD_VAR 0 2
29548: PPUSH
29549: LD_VAR 0 1
29553: PPUSH
29554: CALL_OW 248
29558: PPUSH
29559: CALL_OW 450
29563: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29564: LD_VAR 0 10
29568: PPUSH
29569: LD_INT 1
29571: PPUSH
29572: CALL_OW 275
29576: PUSH
29577: LD_VAR 0 11
29581: PUSH
29582: LD_INT 1
29584: ARRAY
29585: GREATEREQUAL
29586: IFFALSE 29612
29588: PUSH
29589: LD_VAR 0 10
29593: PPUSH
29594: LD_INT 2
29596: PPUSH
29597: CALL_OW 275
29601: PUSH
29602: LD_VAR 0 11
29606: PUSH
29607: LD_INT 2
29609: ARRAY
29610: GREATEREQUAL
29611: AND
29612: IFFALSE 29638
29614: PUSH
29615: LD_VAR 0 10
29619: PPUSH
29620: LD_INT 3
29622: PPUSH
29623: CALL_OW 275
29627: PUSH
29628: LD_VAR 0 11
29632: PUSH
29633: LD_INT 3
29635: ARRAY
29636: GREATEREQUAL
29637: AND
29638: NOT
29639: IFFALSE 29643
// exit ;
29641: GO 30246
// if GetBType ( depot ) = b_depot then
29643: LD_VAR 0 1
29647: PPUSH
29648: CALL_OW 266
29652: PUSH
29653: LD_INT 0
29655: EQUAL
29656: IFFALSE 29668
// dist := 28 else
29658: LD_ADDR_VAR 0 14
29662: PUSH
29663: LD_INT 28
29665: ST_TO_ADDR
29666: GO 29676
// dist := 36 ;
29668: LD_ADDR_VAR 0 14
29672: PUSH
29673: LD_INT 36
29675: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29676: LD_VAR 0 1
29680: PPUSH
29681: LD_VAR 0 3
29685: PPUSH
29686: LD_VAR 0 4
29690: PPUSH
29691: CALL_OW 297
29695: PUSH
29696: LD_VAR 0 14
29700: GREATER
29701: IFFALSE 29705
// exit ;
29703: GO 30246
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29705: LD_ADDR_VAR 0 12
29709: PUSH
29710: LD_VAR 0 2
29714: PPUSH
29715: LD_VAR 0 3
29719: PPUSH
29720: LD_VAR 0 4
29724: PPUSH
29725: LD_VAR 0 5
29729: PPUSH
29730: LD_VAR 0 1
29734: PPUSH
29735: CALL_OW 248
29739: PPUSH
29740: LD_INT 0
29742: PPUSH
29743: CALL 30251 0 6
29747: ST_TO_ADDR
// if not hexes then
29748: LD_VAR 0 12
29752: NOT
29753: IFFALSE 29757
// exit ;
29755: GO 30246
// hex := GetHexInfo ( x , y ) ;
29757: LD_ADDR_VAR 0 15
29761: PUSH
29762: LD_VAR 0 3
29766: PPUSH
29767: LD_VAR 0 4
29771: PPUSH
29772: CALL_OW 546
29776: ST_TO_ADDR
// if hex [ 1 ] then
29777: LD_VAR 0 15
29781: PUSH
29782: LD_INT 1
29784: ARRAY
29785: IFFALSE 29789
// exit ;
29787: GO 30246
// height := hex [ 2 ] ;
29789: LD_ADDR_VAR 0 13
29793: PUSH
29794: LD_VAR 0 15
29798: PUSH
29799: LD_INT 2
29801: ARRAY
29802: ST_TO_ADDR
// for i = 1 to hexes do
29803: LD_ADDR_VAR 0 7
29807: PUSH
29808: DOUBLE
29809: LD_INT 1
29811: DEC
29812: ST_TO_ADDR
29813: LD_VAR 0 12
29817: PUSH
29818: FOR_TO
29819: IFFALSE 30163
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29821: LD_VAR 0 12
29825: PUSH
29826: LD_VAR 0 7
29830: ARRAY
29831: PUSH
29832: LD_INT 1
29834: ARRAY
29835: PPUSH
29836: LD_VAR 0 12
29840: PUSH
29841: LD_VAR 0 7
29845: ARRAY
29846: PUSH
29847: LD_INT 2
29849: ARRAY
29850: PPUSH
29851: CALL_OW 488
29855: NOT
29856: IFTRUE 29898
29858: PUSH
29859: LD_VAR 0 12
29863: PUSH
29864: LD_VAR 0 7
29868: ARRAY
29869: PUSH
29870: LD_INT 1
29872: ARRAY
29873: PPUSH
29874: LD_VAR 0 12
29878: PUSH
29879: LD_VAR 0 7
29883: ARRAY
29884: PUSH
29885: LD_INT 2
29887: ARRAY
29888: PPUSH
29889: CALL_OW 428
29893: PUSH
29894: LD_INT 0
29896: GREATER
29897: OR
29898: IFTRUE 29936
29900: PUSH
29901: LD_VAR 0 12
29905: PUSH
29906: LD_VAR 0 7
29910: ARRAY
29911: PUSH
29912: LD_INT 1
29914: ARRAY
29915: PPUSH
29916: LD_VAR 0 12
29920: PUSH
29921: LD_VAR 0 7
29925: ARRAY
29926: PUSH
29927: LD_INT 2
29929: ARRAY
29930: PPUSH
29931: CALL_OW 351
29935: OR
29936: IFFALSE 29942
// exit ;
29938: POP
29939: POP
29940: GO 30246
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29942: LD_ADDR_VAR 0 8
29946: PUSH
29947: LD_VAR 0 12
29951: PUSH
29952: LD_VAR 0 7
29956: ARRAY
29957: PUSH
29958: LD_INT 1
29960: ARRAY
29961: PPUSH
29962: LD_VAR 0 12
29966: PUSH
29967: LD_VAR 0 7
29971: ARRAY
29972: PUSH
29973: LD_INT 2
29975: ARRAY
29976: PPUSH
29977: CALL_OW 546
29981: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29982: LD_VAR 0 8
29986: PUSH
29987: LD_INT 1
29989: ARRAY
29990: IFTRUE 30012
29992: PUSH
29993: LD_VAR 0 8
29997: PUSH
29998: LD_INT 2
30000: ARRAY
30001: PUSH
30002: LD_VAR 0 13
30006: PUSH
30007: LD_INT 2
30009: PLUS
30010: GREATER
30011: OR
30012: IFTRUE 30034
30014: PUSH
30015: LD_VAR 0 8
30019: PUSH
30020: LD_INT 2
30022: ARRAY
30023: PUSH
30024: LD_VAR 0 13
30028: PUSH
30029: LD_INT 2
30031: MINUS
30032: LESS
30033: OR
30034: IFTRUE 30102
30036: PUSH
30037: LD_VAR 0 8
30041: PUSH
30042: LD_INT 3
30044: ARRAY
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: LD_INT 8
30051: PUSH
30052: LD_INT 9
30054: PUSH
30055: LD_INT 10
30057: PUSH
30058: LD_INT 11
30060: PUSH
30061: LD_INT 12
30063: PUSH
30064: LD_INT 13
30066: PUSH
30067: LD_INT 16
30069: PUSH
30070: LD_INT 17
30072: PUSH
30073: LD_INT 18
30075: PUSH
30076: LD_INT 19
30078: PUSH
30079: LD_INT 20
30081: PUSH
30082: LD_INT 21
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: IN
30100: NOT
30101: OR
30102: IFTRUE 30115
30104: PUSH
30105: LD_VAR 0 8
30109: PUSH
30110: LD_INT 5
30112: ARRAY
30113: NOT
30114: OR
30115: IFTRUE 30155
30117: PUSH
30118: LD_VAR 0 8
30122: PUSH
30123: LD_INT 6
30125: ARRAY
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: LD_INT 2
30132: PUSH
30133: LD_INT 7
30135: PUSH
30136: LD_INT 9
30138: PUSH
30139: LD_INT 10
30141: PUSH
30142: LD_INT 11
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: IN
30153: NOT
30154: OR
30155: IFFALSE 30161
// exit ;
30157: POP
30158: POP
30159: GO 30246
// end ;
30161: GO 29818
30163: POP
30164: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30165: LD_VAR 0 9
30169: PPUSH
30170: LD_VAR 0 3
30174: PPUSH
30175: LD_VAR 0 4
30179: PPUSH
30180: LD_INT 20
30182: PPUSH
30183: CALL 22065 0 4
30187: PUSH
30188: LD_INT 4
30190: ARRAY
30191: IFFALSE 30195
// exit ;
30193: GO 30246
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30195: LD_VAR 0 2
30199: PUSH
30200: LD_INT 29
30202: PUSH
30203: LD_INT 30
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: IN
30210: IFFALSE 30234
30212: PUSH
30213: LD_VAR 0 3
30217: PPUSH
30218: LD_VAR 0 4
30222: PPUSH
30223: LD_VAR 0 9
30227: PPUSH
30228: CALL_OW 440
30232: NOT
30233: AND
30234: IFFALSE 30238
// exit ;
30236: GO 30246
// result := true ;
30238: LD_ADDR_VAR 0 6
30242: PUSH
30243: LD_INT 1
30245: ST_TO_ADDR
// end ;
30246: LD_VAR 0 6
30250: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30251: LD_INT 0
30253: PPUSH
30254: PPUSH
30255: PPUSH
30256: PPUSH
30257: PPUSH
30258: PPUSH
30259: PPUSH
30260: PPUSH
30261: PPUSH
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
30270: PPUSH
30271: PPUSH
30272: PPUSH
30273: PPUSH
30274: PPUSH
30275: PPUSH
30276: PPUSH
30277: PPUSH
30278: PPUSH
30279: PPUSH
30280: PPUSH
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
30292: PPUSH
30293: PPUSH
30294: PPUSH
30295: PPUSH
30296: PPUSH
30297: PPUSH
30298: PPUSH
30299: PPUSH
30300: PPUSH
30301: PPUSH
30302: PPUSH
30303: PPUSH
30304: PPUSH
30305: PPUSH
30306: PPUSH
30307: PPUSH
30308: PPUSH
30309: PPUSH
30310: PPUSH
// result = [ ] ;
30311: LD_ADDR_VAR 0 7
30315: PUSH
30316: EMPTY
30317: ST_TO_ADDR
// temp_list = [ ] ;
30318: LD_ADDR_VAR 0 9
30322: PUSH
30323: EMPTY
30324: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30325: LD_VAR 0 4
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 2
30338: PUSH
30339: LD_INT 3
30341: PUSH
30342: LD_INT 4
30344: PUSH
30345: LD_INT 5
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: IN
30356: NOT
30357: IFTRUE 30400
30359: PUSH
30360: LD_VAR 0 1
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: LD_INT 1
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: IN
30375: IFFALSE 30399
30377: PUSH
30378: LD_VAR 0 5
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: LD_INT 3
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: LIST
30396: IN
30397: NOT
30398: AND
30399: OR
30400: IFFALSE 30404
// exit ;
30402: GO 48803
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30404: LD_VAR 0 1
30408: PUSH
30409: LD_INT 6
30411: PUSH
30412: LD_INT 7
30414: PUSH
30415: LD_INT 8
30417: PUSH
30418: LD_INT 13
30420: PUSH
30421: LD_INT 12
30423: PUSH
30424: LD_INT 15
30426: PUSH
30427: LD_INT 11
30429: PUSH
30430: LD_INT 14
30432: PUSH
30433: LD_INT 10
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: IN
30447: IFFALSE 30457
// btype = b_lab ;
30449: LD_ADDR_VAR 0 1
30453: PUSH
30454: LD_INT 6
30456: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30457: LD_VAR 0 6
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: LIST
30475: IN
30476: NOT
30477: IFTRUE 30545
30479: PUSH
30480: LD_VAR 0 1
30484: PUSH
30485: LD_INT 0
30487: PUSH
30488: LD_INT 1
30490: PUSH
30491: LD_INT 2
30493: PUSH
30494: LD_INT 3
30496: PUSH
30497: LD_INT 6
30499: PUSH
30500: LD_INT 36
30502: PUSH
30503: LD_INT 4
30505: PUSH
30506: LD_INT 5
30508: PUSH
30509: LD_INT 31
30511: PUSH
30512: LD_INT 32
30514: PUSH
30515: LD_INT 33
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: IN
30531: NOT
30532: IFFALSE 30544
30534: PUSH
30535: LD_VAR 0 6
30539: PUSH
30540: LD_INT 1
30542: EQUAL
30543: AND
30544: OR
30545: IFTRUE 30577
30547: PUSH
30548: LD_VAR 0 1
30552: PUSH
30553: LD_INT 2
30555: PUSH
30556: LD_INT 3
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: IN
30563: NOT
30564: IFFALSE 30576
30566: PUSH
30567: LD_VAR 0 6
30571: PUSH
30572: LD_INT 2
30574: EQUAL
30575: AND
30576: OR
30577: IFFALSE 30587
// mode = 0 ;
30579: LD_ADDR_VAR 0 6
30583: PUSH
30584: LD_INT 0
30586: ST_TO_ADDR
// case mode of 0 :
30587: LD_VAR 0 6
30591: PUSH
30592: LD_INT 0
30594: DOUBLE
30595: EQUAL
30596: IFTRUE 30600
30598: GO 42053
30600: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30601: LD_ADDR_VAR 0 11
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: LD_INT 0
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 0
30618: PUSH
30619: LD_INT 1
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 1
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: LD_INT 1
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: LD_INT 1
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 1
30659: NEG
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 1
30670: NEG
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 1
30682: NEG
30683: PUSH
30684: LD_INT 2
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: LD_INT 2
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: PUSH
30717: LD_INT 2
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: LD_INT 3
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 0
30757: PUSH
30758: LD_INT 3
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: LD_INT 2
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30794: LD_ADDR_VAR 0 12
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: LD_INT 1
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 2
30886: PUSH
30887: LD_INT 0
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 2
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 1
30906: NEG
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 2
30917: NEG
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 2
30940: NEG
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 3
30951: NEG
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 3
30962: NEG
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30990: LD_ADDR_VAR 0 13
30994: PUSH
30995: LD_INT 0
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 0
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 1
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 1
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 1
31048: NEG
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 1
31059: NEG
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 2
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 2
31093: PUSH
31094: LD_INT 2
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 2
31113: NEG
31114: PUSH
31115: LD_INT 1
31117: NEG
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: LD_INT 2
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 2
31137: NEG
31138: PUSH
31139: LD_INT 3
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 3
31149: NEG
31150: PUSH
31151: LD_INT 2
31153: NEG
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 3
31161: NEG
31162: PUSH
31163: LD_INT 3
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31189: LD_ADDR_VAR 0 14
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: LD_INT 0
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: LD_INT 1
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: LD_INT 1
31262: NEG
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 1
31270: NEG
31271: PUSH
31272: LD_INT 2
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: LD_INT 2
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: LD_INT 1
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: LD_INT 3
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: LD_INT 3
31350: NEG
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: LD_INT 2
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31385: LD_ADDR_VAR 0 15
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 1
31497: NEG
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 2
31508: NEG
31509: PUSH
31510: LD_INT 0
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 2
31519: NEG
31520: PUSH
31521: LD_INT 1
31523: NEG
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 3
31542: PUSH
31543: LD_INT 0
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 3
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31578: LD_ADDR_VAR 0 16
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: LD_INT 2
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 2
31701: NEG
31702: PUSH
31703: LD_INT 1
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 2
31713: NEG
31714: PUSH
31715: LD_INT 2
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: LD_INT 2
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: LD_INT 3
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: LD_INT 3
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31771: LD_ADDR_VAR 0 17
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 0
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: LD_INT 1
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: LD_INT 2
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: LD_INT 2
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: LD_INT 1
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: LD_INT 2
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 1
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 1
31936: NEG
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 2
31947: NEG
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: NEG
31959: PUSH
31960: LD_INT 1
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 2
31970: NEG
31971: PUSH
31972: LD_INT 2
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32001: LD_ADDR_VAR 0 18
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: LD_INT 1
32021: NEG
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: LD_INT 1
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: LD_INT 2
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 1
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 1
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 0
32156: PUSH
32157: LD_INT 2
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 1
32166: NEG
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 2
32177: NEG
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: LD_INT 1
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: NEG
32201: PUSH
32202: LD_INT 2
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32231: LD_ADDR_VAR 0 19
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: NEG
32301: PUSH
32302: LD_INT 1
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 2
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: LD_INT 2
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 0
32386: PUSH
32387: LD_INT 2
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 2
32418: NEG
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 2
32430: NEG
32431: PUSH
32432: LD_INT 2
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32461: LD_ADDR_VAR 0 20
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 0
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 1
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: LD_INT 1
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 1
32530: NEG
32531: PUSH
32532: LD_INT 1
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 1
32542: NEG
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: LD_INT 2
32557: NEG
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: LD_INT 1
32568: NEG
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 2
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 2
32596: PUSH
32597: LD_INT 2
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: LD_INT 2
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 2
32637: NEG
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: LD_INT 2
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32691: LD_ADDR_VAR 0 21
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 1
32711: NEG
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 1
32729: PUSH
32730: LD_INT 1
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: LD_INT 1
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: LD_INT 2
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 2
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: PUSH
32837: LD_INT 2
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: LD_INT 2
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 2
32867: NEG
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: NEG
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: NEG
32891: PUSH
32892: LD_INT 2
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32921: LD_ADDR_VAR 0 22
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: LD_INT 1
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 1
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: NEG
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: LD_INT 2
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: LD_INT 1
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: LD_INT 2
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: LD_INT 2
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: NEG
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 2
33097: NEG
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: NEG
33121: PUSH
33122: LD_INT 2
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33151: LD_ADDR_VAR 0 23
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: LD_INT 1
33171: NEG
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 1
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: LD_INT 1
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: LD_INT 2
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: LD_INT 2
33247: NEG
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 2
33266: PUSH
33267: LD_INT 0
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 2
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 2
33286: PUSH
33287: LD_INT 2
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 2
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: LD_INT 2
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 1
33316: NEG
33317: PUSH
33318: LD_INT 1
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 2
33327: NEG
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 2
33338: NEG
33339: PUSH
33340: LD_INT 1
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 2
33350: NEG
33351: PUSH
33352: LD_INT 2
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 2
33362: NEG
33363: PUSH
33364: LD_INT 3
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: LD_INT 3
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: LD_INT 2
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 2
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33431: LD_ADDR_VAR 0 24
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: LD_INT 0
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: LD_INT 1
33451: NEG
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 1
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 0
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 1
33489: NEG
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: NEG
33513: PUSH
33514: LD_INT 2
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 2
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 2
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: LD_INT 1
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 2
33566: PUSH
33567: LD_INT 2
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: LD_INT 2
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 2
33607: NEG
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 2
33618: NEG
33619: PUSH
33620: LD_INT 1
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 2
33630: NEG
33631: PUSH
33632: LD_INT 2
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 3
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 3
33674: PUSH
33675: LD_INT 2
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33707: LD_ADDR_VAR 0 25
33711: PUSH
33712: LD_INT 0
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: NEG
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: LD_INT 2
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: LD_INT 2
33803: NEG
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 2
33822: PUSH
33823: LD_INT 0
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: LD_INT 2
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: NEG
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: NEG
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 2
33906: NEG
33907: PUSH
33908: LD_INT 2
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 3
33918: PUSH
33919: LD_INT 1
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 3
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: LD_INT 3
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: LD_INT 3
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33981: LD_ADDR_VAR 0 26
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: LD_INT 1
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 1
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: LD_INT 1
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: LD_INT 2
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: LD_INT 2
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 2
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 2
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 1
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: NEG
34147: PUSH
34148: LD_INT 1
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: NEG
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 2
34168: NEG
34169: PUSH
34170: LD_INT 1
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 2
34180: NEG
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 2
34192: PUSH
34193: LD_INT 3
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: LD_INT 3
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: LD_INT 2
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 2
34223: NEG
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34257: LD_ADDR_VAR 0 27
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: LD_INT 1
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: LD_INT 1
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: LD_INT 1
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: LD_INT 0
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PUSH
34328: LD_INT 1
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 1
34338: NEG
34339: PUSH
34340: LD_INT 2
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: LD_INT 2
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 2
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: LD_INT 2
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 2
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PUSH
34435: LD_INT 0
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: NEG
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 2
34456: NEG
34457: PUSH
34458: LD_INT 2
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 1
34468: NEG
34469: PUSH
34470: LD_INT 2
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 2
34479: NEG
34480: PUSH
34481: LD_INT 1
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 3
34490: NEG
34491: PUSH
34492: LD_INT 1
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 3
34502: NEG
34503: PUSH
34504: LD_INT 2
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34537: LD_ADDR_VAR 0 28
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 1
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: LD_INT 1
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: LD_INT 1
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: LD_INT 2
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 2
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: NEG
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: LD_INT 1
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 2
34736: NEG
34737: PUSH
34738: LD_INT 2
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 2
34748: NEG
34749: PUSH
34750: LD_INT 3
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: LD_INT 3
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 3
34772: NEG
34773: PUSH
34774: LD_INT 1
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 3
34784: NEG
34785: PUSH
34786: LD_INT 2
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34819: LD_ADDR_VAR 0 29
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: LD_INT 2
34904: NEG
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 2
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 2
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 2
34985: NEG
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: NEG
34998: PUSH
34999: LD_INT 2
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 2
35009: NEG
35010: PUSH
35011: LD_INT 3
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 2
35021: PUSH
35022: LD_INT 1
35024: NEG
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 3
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: LD_INT 3
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: LD_INT 2
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 3
35063: NEG
35064: PUSH
35065: LD_INT 2
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35098: LD_ADDR_VAR 0 30
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: LD_INT 1
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 1
35179: NEG
35180: PUSH
35181: LD_INT 2
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: LD_INT 2
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 2
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 2
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: LD_INT 2
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 2
35264: NEG
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 2
35275: NEG
35276: PUSH
35277: LD_INT 1
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: LD_INT 3
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 3
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: PUSH
35321: LD_INT 3
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 3
35341: NEG
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35376: LD_ADDR_VAR 0 31
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: LD_INT 2
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 2
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: PUSH
35511: LD_INT 2
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: NEG
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: NEG
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 2
35565: NEG
35566: PUSH
35567: LD_INT 3
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 3
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: LD_INT 3
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: LD_INT 2
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 3
35619: NEG
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35654: LD_ADDR_VAR 0 32
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: NEG
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: NEG
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: LD_INT 2
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: LD_INT 2
35750: NEG
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: LD_INT 1
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 2
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 1
35809: NEG
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 2
35820: NEG
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: LD_INT 1
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: LD_INT 3
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: LD_INT 2
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 3
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 2
35876: PUSH
35877: LD_INT 3
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 2
35886: NEG
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 3
35897: NEG
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35932: LD_ADDR_VAR 0 33
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: LD_INT 1
35952: NEG
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 1
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: LD_INT 2
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 2
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 2
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: LD_INT 2
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: LD_INT 2
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 2
36087: NEG
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 2
36098: NEG
36099: PUSH
36100: LD_INT 1
36102: NEG
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 2
36110: NEG
36111: PUSH
36112: LD_INT 2
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 2
36122: NEG
36123: PUSH
36124: LD_INT 3
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: LD_INT 1
36137: NEG
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 3
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: LD_INT 3
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: LD_INT 2
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 3
36176: NEG
36177: PUSH
36178: LD_INT 2
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36211: LD_ADDR_VAR 0 34
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: LD_INT 1
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: LD_INT 1
36284: NEG
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: LD_INT 2
36296: NEG
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: LD_INT 2
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 2
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: LD_INT 2
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: NEG
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: NEG
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 2
36390: NEG
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: LD_INT 3
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 3
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: PUSH
36436: LD_INT 3
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: NEG
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 3
36456: NEG
36457: PUSH
36458: LD_INT 1
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36491: LD_ADDR_VAR 0 35
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36603: LD_ADDR_VAR 0 36
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: LD_INT 0
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: NEG
36685: PUSH
36686: LD_INT 2
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 2
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36715: LD_ADDR_VAR 0 37
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36827: LD_ADDR_VAR 0 38
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: LD_INT 1
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: LD_INT 1
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 2
36918: NEG
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36939: LD_ADDR_VAR 0 39
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 1
36977: PUSH
36978: LD_INT 1
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: NEG
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: LD_INT 2
37024: NEG
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37051: LD_ADDR_VAR 0 40
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: LD_INT 1
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37163: LD_ADDR_VAR 0 41
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: LD_INT 1
37183: NEG
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: LD_INT 1
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: LD_INT 1
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: LD_INT 2
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 2
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 2
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: LD_INT 1
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 2
37341: NEG
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: LD_INT 3
37357: NEG
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 2
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 3
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 3
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 3
37396: PUSH
37397: LD_INT 2
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 3
37406: PUSH
37407: LD_INT 3
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: LD_INT 3
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 2
37426: NEG
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 3
37437: NEG
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 3
37448: NEG
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 3
37460: NEG
37461: PUSH
37462: LD_INT 2
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 3
37472: NEG
37473: PUSH
37474: LD_INT 3
37476: NEG
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37513: LD_ADDR_VAR 0 42
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: LD_INT 1
37533: NEG
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: LD_INT 2
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 2
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: LD_INT 2
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: PUSH
37649: LD_INT 2
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: LD_INT 2
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 2
37679: NEG
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 2
37691: NEG
37692: PUSH
37693: LD_INT 2
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 2
37703: NEG
37704: PUSH
37705: LD_INT 3
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: LD_INT 3
37719: NEG
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: LD_INT 3
37730: NEG
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: LD_INT 2
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 3
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 3
37759: PUSH
37760: LD_INT 3
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: LD_INT 3
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: LD_INT 3
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 3
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: LD_INT 2
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 3
37810: NEG
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 3
37822: NEG
37823: PUSH
37824: LD_INT 3
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37863: LD_ADDR_VAR 0 43
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: LD_INT 1
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 1
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: LD_INT 2
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: LD_INT 2
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: PUSH
38054: LD_INT 3
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 3
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 2
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 3
38097: PUSH
38098: LD_INT 0
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 3
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: LD_INT 3
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 3
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: NEG
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 3
38159: NEG
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 3
38170: NEG
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38211: LD_ADDR_VAR 0 44
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: LD_INT 1
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: NEG
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: LD_INT 1
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 2
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: LD_INT 2
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 1
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 2
38366: NEG
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 2
38377: NEG
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 2
38389: NEG
38390: PUSH
38391: LD_INT 2
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: LD_INT 3
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 3
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 3
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 3
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: LD_INT 3
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 2
38464: PUSH
38465: LD_INT 3
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 2
38474: NEG
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 3
38485: NEG
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 3
38496: NEG
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 3
38508: NEG
38509: PUSH
38510: LD_INT 2
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 3
38520: NEG
38521: PUSH
38522: LD_INT 3
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38561: LD_ADDR_VAR 0 45
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: LD_INT 1
38634: NEG
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 1
38642: NEG
38643: PUSH
38644: LD_INT 2
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 2
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: LD_INT 2
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 0
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 2
38727: NEG
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 2
38739: NEG
38740: PUSH
38741: LD_INT 2
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: LD_INT 3
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: LD_INT 3
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: LD_INT 3
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 1
38786: PUSH
38787: LD_INT 2
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 3
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 3
38807: PUSH
38808: LD_INT 3
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: LD_INT 3
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: LD_INT 3
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: LD_INT 2
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 3
38858: NEG
38859: PUSH
38860: LD_INT 2
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 3
38870: NEG
38871: PUSH
38872: LD_INT 3
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38911: LD_ADDR_VAR 0 46
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: LD_INT 2
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: LD_INT 2
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: NEG
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: LD_INT 3
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: LD_INT 2
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 3
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 3
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: LD_INT 3
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: LD_INT 3
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 3
39207: NEG
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 3
39218: NEG
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39259: LD_ADDR_VAR 0 47
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: LD_INT 2
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39410: LD_ADDR_VAR 0 48
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 0
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: LD_INT 2
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 2
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39557: LD_ADDR_VAR 0 49
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39701: LD_ADDR_VAR 0 50
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: LD_INT 2
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39845: LD_ADDR_VAR 0 51
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39992: LD_ADDR_VAR 0 52
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 2
40107: NEG
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: NEG
40120: PUSH
40121: LD_INT 2
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40143: LD_ADDR_VAR 0 53
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 2
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40373: LD_ADDR_VAR 0 54
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: LD_INT 2
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: LD_INT 2
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 2
40549: NEG
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 2
40560: NEG
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40603: LD_ADDR_VAR 0 55
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 2
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 2
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: LD_INT 2
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: LD_INT 2
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: LD_INT 2
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40833: LD_ADDR_VAR 0 56
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: LD_INT 2
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 2
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 2
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 2
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: LD_INT 2
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: LD_INT 2
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: NEG
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41063: LD_ADDR_VAR 0 57
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: LD_INT 2
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41293: LD_ADDR_VAR 0 58
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: LD_INT 2
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 2
41428: PUSH
41429: LD_INT 2
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 2
41469: NEG
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 2
41492: NEG
41493: PUSH
41494: LD_INT 2
41496: NEG
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41523: LD_ADDR_VAR 0 59
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41611: LD_ADDR_VAR 0 60
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41699: LD_ADDR_VAR 0 61
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41787: LD_ADDR_VAR 0 62
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41875: LD_ADDR_VAR 0 63
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41963: LD_ADDR_VAR 0 64
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: ST_TO_ADDR
// end ; 1 :
42051: GO 47948
42053: LD_INT 1
42055: DOUBLE
42056: EQUAL
42057: IFTRUE 42061
42059: GO 44684
42061: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42062: LD_ADDR_VAR 0 11
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: LD_INT 3
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: LD_INT 3
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: LD_INT 2
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: LIST
42105: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42106: LD_ADDR_VAR 0 12
42110: PUSH
42111: LD_INT 2
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 3
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 3
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: LIST
42146: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42147: LD_ADDR_VAR 0 13
42151: PUSH
42152: LD_INT 3
42154: PUSH
42155: LD_INT 2
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 3
42164: PUSH
42165: LD_INT 3
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: LD_INT 3
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: LIST
42186: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42187: LD_ADDR_VAR 0 14
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 3
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_INT 3
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: LIST
42227: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42228: LD_ADDR_VAR 0 15
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 3
42246: NEG
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 3
42257: NEG
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42272: LD_ADDR_VAR 0 16
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: LD_INT 3
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 3
42291: NEG
42292: PUSH
42293: LD_INT 2
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 3
42303: NEG
42304: PUSH
42305: LD_INT 3
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: LIST
42317: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42318: LD_ADDR_VAR 0 17
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: LD_INT 3
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 3
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42362: LD_ADDR_VAR 0 18
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 3
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 3
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42403: LD_ADDR_VAR 0 19
42407: PUSH
42408: LD_INT 3
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 3
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: LD_INT 3
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: LIST
42442: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42443: LD_ADDR_VAR 0 20
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: LD_INT 3
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 3
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: LIST
42483: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42484: LD_ADDR_VAR 0 21
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 3
42502: NEG
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 3
42513: NEG
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: LIST
42527: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42528: LD_ADDR_VAR 0 22
42532: PUSH
42533: LD_INT 2
42535: NEG
42536: PUSH
42537: LD_INT 3
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 3
42547: NEG
42548: PUSH
42549: LD_INT 2
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 3
42559: NEG
42560: PUSH
42561: LD_INT 3
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: LIST
42573: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42574: LD_ADDR_VAR 0 23
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: LD_INT 3
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: LD_INT 4
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: LD_INT 3
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: LIST
42617: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42618: LD_ADDR_VAR 0 24
42622: PUSH
42623: LD_INT 3
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 3
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 4
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: LIST
42658: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42659: LD_ADDR_VAR 0 25
42663: PUSH
42664: LD_INT 3
42666: PUSH
42667: LD_INT 3
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 4
42676: PUSH
42677: LD_INT 3
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 3
42686: PUSH
42687: LD_INT 4
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: LIST
42698: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42699: LD_ADDR_VAR 0 26
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 3
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 4
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: LD_INT 3
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42740: LD_ADDR_VAR 0 27
42744: PUSH
42745: LD_INT 3
42747: NEG
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 3
42758: NEG
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 4
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42784: LD_ADDR_VAR 0 28
42788: PUSH
42789: LD_INT 3
42791: NEG
42792: PUSH
42793: LD_INT 3
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 3
42803: NEG
42804: PUSH
42805: LD_INT 4
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 4
42815: NEG
42816: PUSH
42817: LD_INT 3
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: LIST
42829: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42830: LD_ADDR_VAR 0 29
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: LD_INT 3
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 3
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: LD_INT 4
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: LD_INT 4
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 3
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 5
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: LD_INT 5
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: LD_INT 4
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 6
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 6
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: LD_INT 5
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42985: LD_ADDR_VAR 0 30
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 3
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 3
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 3
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 4
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 4
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 4
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 5
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 5
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 5
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 6
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 6
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43128: LD_ADDR_VAR 0 31
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 3
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: LD_INT 3
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 4
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 4
43175: PUSH
43176: LD_INT 4
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 3
43185: PUSH
43186: LD_INT 4
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 5
43195: PUSH
43196: LD_INT 4
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 5
43205: PUSH
43206: LD_INT 5
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 4
43215: PUSH
43216: LD_INT 5
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 6
43225: PUSH
43226: LD_INT 5
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 6
43235: PUSH
43236: LD_INT 6
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 5
43245: PUSH
43246: LD_INT 6
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43267: LD_ADDR_VAR 0 32
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 3
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 3
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 4
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 4
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 5
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 5
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 4
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 6
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: LD_INT 6
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: LD_INT 5
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43410: LD_ADDR_VAR 0 33
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 3
43428: NEG
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 3
43439: NEG
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 3
43451: NEG
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 4
43462: NEG
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 4
43473: NEG
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 4
43485: NEG
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 5
43496: NEG
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 5
43507: NEG
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 5
43519: NEG
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 6
43530: NEG
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 6
43541: NEG
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43565: LD_ADDR_VAR 0 34
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: LD_INT 3
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 3
43584: NEG
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 3
43596: NEG
43597: PUSH
43598: LD_INT 3
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 3
43608: NEG
43609: PUSH
43610: LD_INT 4
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 4
43620: NEG
43621: PUSH
43622: LD_INT 3
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 4
43632: NEG
43633: PUSH
43634: LD_INT 4
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 4
43644: NEG
43645: PUSH
43646: LD_INT 5
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 5
43656: NEG
43657: PUSH
43658: LD_INT 4
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 5
43668: NEG
43669: PUSH
43670: LD_INT 5
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 5
43680: NEG
43681: PUSH
43682: LD_INT 6
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 6
43692: NEG
43693: PUSH
43694: LD_INT 5
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 6
43704: NEG
43705: PUSH
43706: LD_INT 6
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43728: LD_ADDR_VAR 0 41
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 3
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: LIST
43771: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43772: LD_ADDR_VAR 0 42
43776: PUSH
43777: LD_INT 2
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 3
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: LIST
43812: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43813: LD_ADDR_VAR 0 43
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: LD_INT 3
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43853: LD_ADDR_VAR 0 44
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43894: LD_ADDR_VAR 0 45
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 3
43923: NEG
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: LIST
43937: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43938: LD_ADDR_VAR 0 46
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: LD_INT 2
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: LD_INT 3
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 3
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: LIST
43983: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43984: LD_ADDR_VAR 0 47
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: LD_INT 3
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: LD_INT 3
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44017: LD_ADDR_VAR 0 48
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44048: LD_ADDR_VAR 0 49
44052: PUSH
44053: LD_INT 3
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 3
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44077: LD_ADDR_VAR 0 50
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: LD_INT 3
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 3
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44106: LD_ADDR_VAR 0 51
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 2
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44137: LD_ADDR_VAR 0 52
44141: PUSH
44142: LD_INT 3
44144: NEG
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 3
44156: NEG
44157: PUSH
44158: LD_INT 2
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44170: LD_ADDR_VAR 0 53
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: LD_INT 3
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 3
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: LIST
44213: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44214: LD_ADDR_VAR 0 54
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 3
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 3
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: LIST
44254: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44255: LD_ADDR_VAR 0 55
44259: PUSH
44260: LD_INT 3
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: LD_INT 3
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 3
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: LIST
44294: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44295: LD_ADDR_VAR 0 56
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: LIST
44335: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44336: LD_ADDR_VAR 0 57
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 3
44354: NEG
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 3
44365: NEG
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: LIST
44379: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44380: LD_ADDR_VAR 0 58
44384: PUSH
44385: LD_INT 2
44387: NEG
44388: PUSH
44389: LD_INT 3
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 3
44399: NEG
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 3
44411: NEG
44412: PUSH
44413: LD_INT 3
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: LIST
44425: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44426: LD_ADDR_VAR 0 59
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 2
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: LIST
44469: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44470: LD_ADDR_VAR 0 60
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: LIST
44510: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44511: LD_ADDR_VAR 0 61
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: LIST
44550: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44551: LD_ADDR_VAR 0 62
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: LIST
44591: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44592: LD_ADDR_VAR 0 63
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44636: LD_ADDR_VAR 0 64
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: LIST
44681: ST_TO_ADDR
// end ; 2 :
44682: GO 47948
44684: LD_INT 2
44686: DOUBLE
44687: EQUAL
44688: IFTRUE 44692
44690: GO 47947
44692: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44693: LD_ADDR_VAR 0 29
44697: PUSH
44698: LD_INT 4
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 4
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 5
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 5
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 4
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 3
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 3
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 5
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 3
44793: PUSH
44794: LD_INT 3
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 3
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 4
44813: PUSH
44814: LD_INT 3
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 4
44823: PUSH
44824: LD_INT 4
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 3
44833: PUSH
44834: LD_INT 4
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: PUSH
44844: LD_INT 3
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 4
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: LD_INT 4
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 4
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 3
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 4
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 5
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 5
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 4
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 3
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 5
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: LD_INT 3
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 3
44976: NEG
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 3
44987: NEG
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 3
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 4
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 4
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 4
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 4
45078: NEG
45079: PUSH
45080: LD_INT 4
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 4
45090: NEG
45091: PUSH
45092: LD_INT 5
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 3
45102: NEG
45103: PUSH
45104: LD_INT 4
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 3
45114: NEG
45115: PUSH
45116: LD_INT 3
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 4
45126: NEG
45127: PUSH
45128: LD_INT 3
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 5
45138: NEG
45139: PUSH
45140: LD_INT 4
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 5
45150: NEG
45151: PUSH
45152: LD_INT 5
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 3
45162: NEG
45163: PUSH
45164: LD_INT 5
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 5
45174: NEG
45175: PUSH
45176: LD_INT 3
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45231: LD_ADDR_VAR 0 30
45235: PUSH
45236: LD_INT 4
45238: PUSH
45239: LD_INT 4
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 4
45248: PUSH
45249: LD_INT 3
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 5
45258: PUSH
45259: LD_INT 4
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 5
45268: PUSH
45269: LD_INT 5
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 4
45278: PUSH
45279: LD_INT 5
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 3
45288: PUSH
45289: LD_INT 4
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: LD_INT 3
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 5
45308: PUSH
45309: LD_INT 3
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 3
45318: PUSH
45319: LD_INT 5
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 3
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 3
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 4
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 4
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 3
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: LD_INT 4
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 4
45421: NEG
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 4
45432: NEG
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 3
45444: NEG
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: NEG
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 4
45466: NEG
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 5
45477: NEG
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 5
45488: NEG
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 5
45500: NEG
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 3
45512: NEG
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 3
45523: NEG
45524: PUSH
45525: LD_INT 3
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 3
45535: NEG
45536: PUSH
45537: LD_INT 4
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: LD_INT 3
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 3
45571: NEG
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 4
45583: NEG
45584: PUSH
45585: LD_INT 3
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 4
45595: NEG
45596: PUSH
45597: LD_INT 4
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: LD_INT 4
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 4
45619: NEG
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 4
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 5
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 4
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 3
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 3
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 4
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 5
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: LD_INT 3
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: LD_INT 5
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45778: LD_ADDR_VAR 0 31
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 4
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 3
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 4
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 5
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 5
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: LD_INT 4
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 3
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: LD_INT 5
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: LD_INT 3
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 3
45878: NEG
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 3
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 3
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 4
45934: NEG
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 4
45945: NEG
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 4
45957: NEG
45958: PUSH
45959: LD_INT 2
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 4
45980: NEG
45981: PUSH
45982: LD_INT 4
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 4
45992: NEG
45993: PUSH
45994: LD_INT 5
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 3
46004: NEG
46005: PUSH
46006: LD_INT 4
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: LD_INT 3
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 4
46028: NEG
46029: PUSH
46030: LD_INT 3
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 5
46040: NEG
46041: PUSH
46042: LD_INT 4
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 5
46052: NEG
46053: PUSH
46054: LD_INT 5
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 3
46064: NEG
46065: PUSH
46066: LD_INT 5
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 5
46076: NEG
46077: PUSH
46078: LD_INT 3
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 3
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 4
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 3
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 3
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: LD_INT 4
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: LD_INT 4
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 4
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 4
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 5
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 5
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 4
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 3
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 5
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46328: LD_ADDR_VAR 0 32
46332: PUSH
46333: LD_INT 4
46335: NEG
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 4
46346: NEG
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 3
46369: NEG
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 4
46380: NEG
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 5
46391: NEG
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 5
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 5
46414: NEG
46415: PUSH
46416: LD_INT 2
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 3
46426: NEG
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: NEG
46438: PUSH
46439: LD_INT 3
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 3
46449: NEG
46450: PUSH
46451: LD_INT 4
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: LD_INT 3
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 3
46485: NEG
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 4
46497: NEG
46498: PUSH
46499: LD_INT 3
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 4
46509: NEG
46510: PUSH
46511: LD_INT 4
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 4
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 4
46533: NEG
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 4
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 5
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 4
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 3
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 4
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: LD_INT 5
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: LD_INT 3
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: LD_INT 5
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 3
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 4
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 4
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 3
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 4
46730: PUSH
46731: LD_INT 2
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 4
46740: PUSH
46741: LD_INT 4
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 4
46750: PUSH
46751: LD_INT 3
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 5
46760: PUSH
46761: LD_INT 4
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 5
46770: PUSH
46771: LD_INT 5
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 4
46780: PUSH
46781: LD_INT 5
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 3
46790: PUSH
46791: LD_INT 4
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 5
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: LD_INT 5
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46875: LD_ADDR_VAR 0 33
46879: PUSH
46880: LD_INT 4
46882: NEG
46883: PUSH
46884: LD_INT 4
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 4
46894: NEG
46895: PUSH
46896: LD_INT 5
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 3
46906: NEG
46907: PUSH
46908: LD_INT 4
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 3
46918: NEG
46919: PUSH
46920: LD_INT 3
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 4
46930: NEG
46931: PUSH
46932: LD_INT 3
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 5
46942: NEG
46943: PUSH
46944: LD_INT 4
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 5
46954: NEG
46955: PUSH
46956: LD_INT 5
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 3
46966: NEG
46967: PUSH
46968: LD_INT 5
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 5
46978: NEG
46979: PUSH
46980: LD_INT 3
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 3
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 4
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 3
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 3
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: LD_INT 4
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: LD_INT 4
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 4
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 4
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 5
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 5
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 4
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 3
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 3
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 3
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 5
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 3
47185: PUSH
47186: LD_INT 3
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 4
47205: PUSH
47206: LD_INT 3
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 4
47215: PUSH
47216: LD_INT 4
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 3
47225: PUSH
47226: LD_INT 4
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 4
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: LD_INT 4
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 4
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 3
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 4
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 5
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 5
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 4
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: LD_INT 5
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: LD_INT 3
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47413: LD_ADDR_VAR 0 34
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 4
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 5
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 4
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 3
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 3
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: LD_INT 4
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 5
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: LD_INT 3
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: LD_INT 5
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 3
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 4
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 4
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 3
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 4
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 4
47615: PUSH
47616: LD_INT 4
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 4
47625: PUSH
47626: LD_INT 3
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 5
47635: PUSH
47636: LD_INT 4
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 5
47645: PUSH
47646: LD_INT 5
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 4
47655: PUSH
47656: LD_INT 5
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 3
47665: PUSH
47666: LD_INT 4
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 3
47675: PUSH
47676: LD_INT 3
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 5
47685: PUSH
47686: LD_INT 3
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 3
47695: PUSH
47696: LD_INT 5
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 3
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: LD_INT 3
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 4
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 4
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: LD_INT 4
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 4
47798: NEG
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 4
47809: NEG
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 3
47821: NEG
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 3
47832: NEG
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 4
47843: NEG
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 5
47854: NEG
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 5
47865: NEG
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 5
47877: NEG
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 3
47889: NEG
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: ST_TO_ADDR
// end ; end ;
47945: GO 47948
47947: POP
// case btype of b_depot , b_warehouse :
47948: LD_VAR 0 1
47952: PUSH
47953: LD_INT 0
47955: DOUBLE
47956: EQUAL
47957: IFTRUE 47967
47959: LD_INT 1
47961: DOUBLE
47962: EQUAL
47963: IFTRUE 47967
47965: GO 48168
47967: POP
// case nation of nation_american :
47968: LD_VAR 0 5
47972: PUSH
47973: LD_INT 1
47975: DOUBLE
47976: EQUAL
47977: IFTRUE 47981
47979: GO 48037
47981: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47982: LD_ADDR_VAR 0 9
47986: PUSH
47987: LD_VAR 0 11
47991: PUSH
47992: LD_VAR 0 12
47996: PUSH
47997: LD_VAR 0 13
48001: PUSH
48002: LD_VAR 0 14
48006: PUSH
48007: LD_VAR 0 15
48011: PUSH
48012: LD_VAR 0 16
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: PUSH
48025: LD_VAR 0 4
48029: PUSH
48030: LD_INT 1
48032: PLUS
48033: ARRAY
48034: ST_TO_ADDR
48035: GO 48166
48037: LD_INT 2
48039: DOUBLE
48040: EQUAL
48041: IFTRUE 48045
48043: GO 48101
48045: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48046: LD_ADDR_VAR 0 9
48050: PUSH
48051: LD_VAR 0 17
48055: PUSH
48056: LD_VAR 0 18
48060: PUSH
48061: LD_VAR 0 19
48065: PUSH
48066: LD_VAR 0 20
48070: PUSH
48071: LD_VAR 0 21
48075: PUSH
48076: LD_VAR 0 22
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: PUSH
48089: LD_VAR 0 4
48093: PUSH
48094: LD_INT 1
48096: PLUS
48097: ARRAY
48098: ST_TO_ADDR
48099: GO 48166
48101: LD_INT 3
48103: DOUBLE
48104: EQUAL
48105: IFTRUE 48109
48107: GO 48165
48109: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48110: LD_ADDR_VAR 0 9
48114: PUSH
48115: LD_VAR 0 23
48119: PUSH
48120: LD_VAR 0 24
48124: PUSH
48125: LD_VAR 0 25
48129: PUSH
48130: LD_VAR 0 26
48134: PUSH
48135: LD_VAR 0 27
48139: PUSH
48140: LD_VAR 0 28
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: PUSH
48153: LD_VAR 0 4
48157: PUSH
48158: LD_INT 1
48160: PLUS
48161: ARRAY
48162: ST_TO_ADDR
48163: GO 48166
48165: POP
48166: GO 48721
48168: LD_INT 2
48170: DOUBLE
48171: EQUAL
48172: IFTRUE 48182
48174: LD_INT 3
48176: DOUBLE
48177: EQUAL
48178: IFTRUE 48182
48180: GO 48238
48182: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48183: LD_ADDR_VAR 0 9
48187: PUSH
48188: LD_VAR 0 29
48192: PUSH
48193: LD_VAR 0 30
48197: PUSH
48198: LD_VAR 0 31
48202: PUSH
48203: LD_VAR 0 32
48207: PUSH
48208: LD_VAR 0 33
48212: PUSH
48213: LD_VAR 0 34
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: PUSH
48226: LD_VAR 0 4
48230: PUSH
48231: LD_INT 1
48233: PLUS
48234: ARRAY
48235: ST_TO_ADDR
48236: GO 48721
48238: LD_INT 16
48240: DOUBLE
48241: EQUAL
48242: IFTRUE 48300
48244: LD_INT 17
48246: DOUBLE
48247: EQUAL
48248: IFTRUE 48300
48250: LD_INT 18
48252: DOUBLE
48253: EQUAL
48254: IFTRUE 48300
48256: LD_INT 19
48258: DOUBLE
48259: EQUAL
48260: IFTRUE 48300
48262: LD_INT 22
48264: DOUBLE
48265: EQUAL
48266: IFTRUE 48300
48268: LD_INT 20
48270: DOUBLE
48271: EQUAL
48272: IFTRUE 48300
48274: LD_INT 21
48276: DOUBLE
48277: EQUAL
48278: IFTRUE 48300
48280: LD_INT 23
48282: DOUBLE
48283: EQUAL
48284: IFTRUE 48300
48286: LD_INT 24
48288: DOUBLE
48289: EQUAL
48290: IFTRUE 48300
48292: LD_INT 25
48294: DOUBLE
48295: EQUAL
48296: IFTRUE 48300
48298: GO 48356
48300: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48301: LD_ADDR_VAR 0 9
48305: PUSH
48306: LD_VAR 0 35
48310: PUSH
48311: LD_VAR 0 36
48315: PUSH
48316: LD_VAR 0 37
48320: PUSH
48321: LD_VAR 0 38
48325: PUSH
48326: LD_VAR 0 39
48330: PUSH
48331: LD_VAR 0 40
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: PUSH
48344: LD_VAR 0 4
48348: PUSH
48349: LD_INT 1
48351: PLUS
48352: ARRAY
48353: ST_TO_ADDR
48354: GO 48721
48356: LD_INT 6
48358: DOUBLE
48359: EQUAL
48360: IFTRUE 48412
48362: LD_INT 7
48364: DOUBLE
48365: EQUAL
48366: IFTRUE 48412
48368: LD_INT 8
48370: DOUBLE
48371: EQUAL
48372: IFTRUE 48412
48374: LD_INT 13
48376: DOUBLE
48377: EQUAL
48378: IFTRUE 48412
48380: LD_INT 12
48382: DOUBLE
48383: EQUAL
48384: IFTRUE 48412
48386: LD_INT 15
48388: DOUBLE
48389: EQUAL
48390: IFTRUE 48412
48392: LD_INT 11
48394: DOUBLE
48395: EQUAL
48396: IFTRUE 48412
48398: LD_INT 14
48400: DOUBLE
48401: EQUAL
48402: IFTRUE 48412
48404: LD_INT 10
48406: DOUBLE
48407: EQUAL
48408: IFTRUE 48412
48410: GO 48468
48412: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48413: LD_ADDR_VAR 0 9
48417: PUSH
48418: LD_VAR 0 41
48422: PUSH
48423: LD_VAR 0 42
48427: PUSH
48428: LD_VAR 0 43
48432: PUSH
48433: LD_VAR 0 44
48437: PUSH
48438: LD_VAR 0 45
48442: PUSH
48443: LD_VAR 0 46
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: PUSH
48456: LD_VAR 0 4
48460: PUSH
48461: LD_INT 1
48463: PLUS
48464: ARRAY
48465: ST_TO_ADDR
48466: GO 48721
48468: LD_INT 36
48470: DOUBLE
48471: EQUAL
48472: IFTRUE 48476
48474: GO 48532
48476: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48477: LD_ADDR_VAR 0 9
48481: PUSH
48482: LD_VAR 0 47
48486: PUSH
48487: LD_VAR 0 48
48491: PUSH
48492: LD_VAR 0 49
48496: PUSH
48497: LD_VAR 0 50
48501: PUSH
48502: LD_VAR 0 51
48506: PUSH
48507: LD_VAR 0 52
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: PUSH
48520: LD_VAR 0 4
48524: PUSH
48525: LD_INT 1
48527: PLUS
48528: ARRAY
48529: ST_TO_ADDR
48530: GO 48721
48532: LD_INT 4
48534: DOUBLE
48535: EQUAL
48536: IFTRUE 48558
48538: LD_INT 5
48540: DOUBLE
48541: EQUAL
48542: IFTRUE 48558
48544: LD_INT 34
48546: DOUBLE
48547: EQUAL
48548: IFTRUE 48558
48550: LD_INT 37
48552: DOUBLE
48553: EQUAL
48554: IFTRUE 48558
48556: GO 48614
48558: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48559: LD_ADDR_VAR 0 9
48563: PUSH
48564: LD_VAR 0 53
48568: PUSH
48569: LD_VAR 0 54
48573: PUSH
48574: LD_VAR 0 55
48578: PUSH
48579: LD_VAR 0 56
48583: PUSH
48584: LD_VAR 0 57
48588: PUSH
48589: LD_VAR 0 58
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: PUSH
48602: LD_VAR 0 4
48606: PUSH
48607: LD_INT 1
48609: PLUS
48610: ARRAY
48611: ST_TO_ADDR
48612: GO 48721
48614: LD_INT 31
48616: DOUBLE
48617: EQUAL
48618: IFTRUE 48664
48620: LD_INT 32
48622: DOUBLE
48623: EQUAL
48624: IFTRUE 48664
48626: LD_INT 33
48628: DOUBLE
48629: EQUAL
48630: IFTRUE 48664
48632: LD_INT 27
48634: DOUBLE
48635: EQUAL
48636: IFTRUE 48664
48638: LD_INT 26
48640: DOUBLE
48641: EQUAL
48642: IFTRUE 48664
48644: LD_INT 28
48646: DOUBLE
48647: EQUAL
48648: IFTRUE 48664
48650: LD_INT 29
48652: DOUBLE
48653: EQUAL
48654: IFTRUE 48664
48656: LD_INT 30
48658: DOUBLE
48659: EQUAL
48660: IFTRUE 48664
48662: GO 48720
48664: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48665: LD_ADDR_VAR 0 9
48669: PUSH
48670: LD_VAR 0 59
48674: PUSH
48675: LD_VAR 0 60
48679: PUSH
48680: LD_VAR 0 61
48684: PUSH
48685: LD_VAR 0 62
48689: PUSH
48690: LD_VAR 0 63
48694: PUSH
48695: LD_VAR 0 64
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: PUSH
48708: LD_VAR 0 4
48712: PUSH
48713: LD_INT 1
48715: PLUS
48716: ARRAY
48717: ST_TO_ADDR
48718: GO 48721
48720: POP
// temp_list2 = [ ] ;
48721: LD_ADDR_VAR 0 10
48725: PUSH
48726: EMPTY
48727: ST_TO_ADDR
// for i in temp_list do
48728: LD_ADDR_VAR 0 8
48732: PUSH
48733: LD_VAR 0 9
48737: PUSH
48738: FOR_IN
48739: IFFALSE 48791
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48741: LD_ADDR_VAR 0 10
48745: PUSH
48746: LD_VAR 0 10
48750: PUSH
48751: LD_VAR 0 8
48755: PUSH
48756: LD_INT 1
48758: ARRAY
48759: PUSH
48760: LD_VAR 0 2
48764: PLUS
48765: PUSH
48766: LD_VAR 0 8
48770: PUSH
48771: LD_INT 2
48773: ARRAY
48774: PUSH
48775: LD_VAR 0 3
48779: PLUS
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: EMPTY
48786: LIST
48787: ADD
48788: ST_TO_ADDR
48789: GO 48738
48791: POP
48792: POP
// result = temp_list2 ;
48793: LD_ADDR_VAR 0 7
48797: PUSH
48798: LD_VAR 0 10
48802: ST_TO_ADDR
// end ;
48803: LD_VAR 0 7
48807: RET
// export function EnemyInRange ( unit , dist ) ; begin
48808: LD_INT 0
48810: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48811: LD_ADDR_VAR 0 3
48815: PUSH
48816: LD_VAR 0 1
48820: PPUSH
48821: CALL_OW 255
48825: PPUSH
48826: LD_VAR 0 1
48830: PPUSH
48831: CALL_OW 250
48835: PPUSH
48836: LD_VAR 0 1
48840: PPUSH
48841: CALL_OW 251
48845: PPUSH
48846: LD_VAR 0 2
48850: PPUSH
48851: CALL 22065 0 4
48855: PUSH
48856: LD_INT 4
48858: ARRAY
48859: ST_TO_ADDR
// end ;
48860: LD_VAR 0 3
48864: RET
// export function PlayerSeeMe ( unit ) ; begin
48865: LD_INT 0
48867: PPUSH
// result := See ( your_side , unit ) ;
48868: LD_ADDR_VAR 0 2
48872: PUSH
48873: LD_OWVAR 2
48877: PPUSH
48878: LD_VAR 0 1
48882: PPUSH
48883: CALL_OW 292
48887: ST_TO_ADDR
// end ;
48888: LD_VAR 0 2
48892: RET
// export function ReverseDir ( unit ) ; begin
48893: LD_INT 0
48895: PPUSH
// if not unit then
48896: LD_VAR 0 1
48900: NOT
48901: IFFALSE 48905
// exit ;
48903: GO 48928
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48905: LD_ADDR_VAR 0 2
48909: PUSH
48910: LD_VAR 0 1
48914: PPUSH
48915: CALL_OW 254
48919: PUSH
48920: LD_INT 3
48922: PLUS
48923: PUSH
48924: LD_INT 6
48926: MOD
48927: ST_TO_ADDR
// end ;
48928: LD_VAR 0 2
48932: RET
// export function ReverseArray ( array ) ; var i ; begin
48933: LD_INT 0
48935: PPUSH
48936: PPUSH
// if not array then
48937: LD_VAR 0 1
48941: NOT
48942: IFFALSE 48946
// exit ;
48944: GO 49001
// result := [ ] ;
48946: LD_ADDR_VAR 0 2
48950: PUSH
48951: EMPTY
48952: ST_TO_ADDR
// for i := array downto 1 do
48953: LD_ADDR_VAR 0 3
48957: PUSH
48958: DOUBLE
48959: LD_VAR 0 1
48963: INC
48964: ST_TO_ADDR
48965: LD_INT 1
48967: PUSH
48968: FOR_DOWNTO
48969: IFFALSE 48999
// result := Join ( result , array [ i ] ) ;
48971: LD_ADDR_VAR 0 2
48975: PUSH
48976: LD_VAR 0 2
48980: PPUSH
48981: LD_VAR 0 1
48985: PUSH
48986: LD_VAR 0 3
48990: ARRAY
48991: PPUSH
48992: CALL 53853 0 2
48996: ST_TO_ADDR
48997: GO 48968
48999: POP
49000: POP
// end ;
49001: LD_VAR 0 2
49005: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49006: LD_INT 0
49008: PPUSH
49009: PPUSH
49010: PPUSH
49011: PPUSH
49012: PPUSH
49013: PPUSH
// if not unit or not hexes then
49014: LD_VAR 0 1
49018: NOT
49019: IFTRUE 49028
49021: PUSH
49022: LD_VAR 0 2
49026: NOT
49027: OR
49028: IFFALSE 49032
// exit ;
49030: GO 49155
// dist := 9999 ;
49032: LD_ADDR_VAR 0 5
49036: PUSH
49037: LD_INT 9999
49039: ST_TO_ADDR
// for i = 1 to hexes do
49040: LD_ADDR_VAR 0 4
49044: PUSH
49045: DOUBLE
49046: LD_INT 1
49048: DEC
49049: ST_TO_ADDR
49050: LD_VAR 0 2
49054: PUSH
49055: FOR_TO
49056: IFFALSE 49143
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49058: LD_ADDR_VAR 0 6
49062: PUSH
49063: LD_VAR 0 1
49067: PPUSH
49068: LD_VAR 0 2
49072: PUSH
49073: LD_VAR 0 4
49077: ARRAY
49078: PUSH
49079: LD_INT 1
49081: ARRAY
49082: PPUSH
49083: LD_VAR 0 2
49087: PUSH
49088: LD_VAR 0 4
49092: ARRAY
49093: PUSH
49094: LD_INT 2
49096: ARRAY
49097: PPUSH
49098: CALL_OW 297
49102: ST_TO_ADDR
// if tdist < dist then
49103: LD_VAR 0 6
49107: PUSH
49108: LD_VAR 0 5
49112: LESS
49113: IFFALSE 49141
// begin hex := hexes [ i ] ;
49115: LD_ADDR_VAR 0 8
49119: PUSH
49120: LD_VAR 0 2
49124: PUSH
49125: LD_VAR 0 4
49129: ARRAY
49130: ST_TO_ADDR
// dist := tdist ;
49131: LD_ADDR_VAR 0 5
49135: PUSH
49136: LD_VAR 0 6
49140: ST_TO_ADDR
// end ; end ;
49141: GO 49055
49143: POP
49144: POP
// result := hex ;
49145: LD_ADDR_VAR 0 3
49149: PUSH
49150: LD_VAR 0 8
49154: ST_TO_ADDR
// end ;
49155: LD_VAR 0 3
49159: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49160: LD_INT 0
49162: PPUSH
49163: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49164: LD_VAR 0 1
49168: NOT
49169: IFTRUE 49208
49171: PUSH
49172: LD_VAR 0 1
49176: PUSH
49177: LD_INT 21
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 23
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PPUSH
49201: CALL_OW 69
49205: IN
49206: NOT
49207: OR
49208: IFFALSE 49212
// exit ;
49210: GO 49259
// for i = 1 to 3 do
49212: LD_ADDR_VAR 0 3
49216: PUSH
49217: DOUBLE
49218: LD_INT 1
49220: DEC
49221: ST_TO_ADDR
49222: LD_INT 3
49224: PUSH
49225: FOR_TO
49226: IFFALSE 49257
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49228: LD_VAR 0 1
49232: PPUSH
49233: CALL_OW 250
49237: PPUSH
49238: LD_VAR 0 1
49242: PPUSH
49243: CALL_OW 251
49247: PPUSH
49248: LD_INT 1
49250: PPUSH
49251: CALL_OW 453
49255: GO 49225
49257: POP
49258: POP
// end ;
49259: LD_VAR 0 2
49263: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49264: LD_INT 0
49266: PPUSH
49267: PPUSH
49268: PPUSH
49269: PPUSH
49270: PPUSH
49271: PPUSH
// if not unit or not enemy_unit then
49272: LD_VAR 0 1
49276: NOT
49277: IFTRUE 49286
49279: PUSH
49280: LD_VAR 0 2
49284: NOT
49285: OR
49286: IFFALSE 49290
// exit ;
49288: GO 49771
// if GetLives ( i ) < 250 then
49290: LD_VAR 0 4
49294: PPUSH
49295: CALL_OW 256
49299: PUSH
49300: LD_INT 250
49302: LESS
49303: IFFALSE 49316
// begin ComAutodestruct ( i ) ;
49305: LD_VAR 0 4
49309: PPUSH
49310: CALL 49160 0 1
// exit ;
49314: GO 49771
// end ; x := GetX ( enemy_unit ) ;
49316: LD_ADDR_VAR 0 7
49320: PUSH
49321: LD_VAR 0 2
49325: PPUSH
49326: CALL_OW 250
49330: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49331: LD_ADDR_VAR 0 8
49335: PUSH
49336: LD_VAR 0 2
49340: PPUSH
49341: CALL_OW 251
49345: ST_TO_ADDR
// if not x or not y then
49346: LD_VAR 0 7
49350: NOT
49351: IFTRUE 49360
49353: PUSH
49354: LD_VAR 0 8
49358: NOT
49359: OR
49360: IFFALSE 49364
// exit ;
49362: GO 49771
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49364: LD_ADDR_VAR 0 6
49368: PUSH
49369: LD_VAR 0 7
49373: PPUSH
49374: LD_INT 0
49376: PPUSH
49377: LD_INT 4
49379: PPUSH
49380: CALL_OW 272
49384: PUSH
49385: LD_VAR 0 8
49389: PPUSH
49390: LD_INT 0
49392: PPUSH
49393: LD_INT 4
49395: PPUSH
49396: CALL_OW 273
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_VAR 0 7
49409: PPUSH
49410: LD_INT 1
49412: PPUSH
49413: LD_INT 4
49415: PPUSH
49416: CALL_OW 272
49420: PUSH
49421: LD_VAR 0 8
49425: PPUSH
49426: LD_INT 1
49428: PPUSH
49429: LD_INT 4
49431: PPUSH
49432: CALL_OW 273
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_VAR 0 7
49445: PPUSH
49446: LD_INT 2
49448: PPUSH
49449: LD_INT 4
49451: PPUSH
49452: CALL_OW 272
49456: PUSH
49457: LD_VAR 0 8
49461: PPUSH
49462: LD_INT 2
49464: PPUSH
49465: LD_INT 4
49467: PPUSH
49468: CALL_OW 273
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_VAR 0 7
49481: PPUSH
49482: LD_INT 3
49484: PPUSH
49485: LD_INT 4
49487: PPUSH
49488: CALL_OW 272
49492: PUSH
49493: LD_VAR 0 8
49497: PPUSH
49498: LD_INT 3
49500: PPUSH
49501: LD_INT 4
49503: PPUSH
49504: CALL_OW 273
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_VAR 0 7
49517: PPUSH
49518: LD_INT 4
49520: PPUSH
49521: LD_INT 4
49523: PPUSH
49524: CALL_OW 272
49528: PUSH
49529: LD_VAR 0 8
49533: PPUSH
49534: LD_INT 4
49536: PPUSH
49537: LD_INT 4
49539: PPUSH
49540: CALL_OW 273
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_VAR 0 7
49553: PPUSH
49554: LD_INT 5
49556: PPUSH
49557: LD_INT 4
49559: PPUSH
49560: CALL_OW 272
49564: PUSH
49565: LD_VAR 0 8
49569: PPUSH
49570: LD_INT 5
49572: PPUSH
49573: LD_INT 4
49575: PPUSH
49576: CALL_OW 273
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: ST_TO_ADDR
// for i = tmp downto 1 do
49593: LD_ADDR_VAR 0 4
49597: PUSH
49598: DOUBLE
49599: LD_VAR 0 6
49603: INC
49604: ST_TO_ADDR
49605: LD_INT 1
49607: PUSH
49608: FOR_DOWNTO
49609: IFFALSE 49712
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49611: LD_VAR 0 6
49615: PUSH
49616: LD_VAR 0 4
49620: ARRAY
49621: PUSH
49622: LD_INT 1
49624: ARRAY
49625: PPUSH
49626: LD_VAR 0 6
49630: PUSH
49631: LD_VAR 0 4
49635: ARRAY
49636: PUSH
49637: LD_INT 2
49639: ARRAY
49640: PPUSH
49641: CALL_OW 488
49645: NOT
49646: IFTRUE 49688
49648: PUSH
49649: LD_VAR 0 6
49653: PUSH
49654: LD_VAR 0 4
49658: ARRAY
49659: PUSH
49660: LD_INT 1
49662: ARRAY
49663: PPUSH
49664: LD_VAR 0 6
49668: PUSH
49669: LD_VAR 0 4
49673: ARRAY
49674: PUSH
49675: LD_INT 2
49677: ARRAY
49678: PPUSH
49679: CALL_OW 428
49683: PUSH
49684: LD_INT 0
49686: NONEQUAL
49687: OR
49688: IFFALSE 49710
// tmp := Delete ( tmp , i ) ;
49690: LD_ADDR_VAR 0 6
49694: PUSH
49695: LD_VAR 0 6
49699: PPUSH
49700: LD_VAR 0 4
49704: PPUSH
49705: CALL_OW 3
49709: ST_TO_ADDR
49710: GO 49608
49712: POP
49713: POP
// j := GetClosestHex ( unit , tmp ) ;
49714: LD_ADDR_VAR 0 5
49718: PUSH
49719: LD_VAR 0 1
49723: PPUSH
49724: LD_VAR 0 6
49728: PPUSH
49729: CALL 49006 0 2
49733: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49734: LD_VAR 0 1
49738: PPUSH
49739: LD_VAR 0 5
49743: PUSH
49744: LD_INT 1
49746: ARRAY
49747: PPUSH
49748: LD_VAR 0 5
49752: PUSH
49753: LD_INT 2
49755: ARRAY
49756: PPUSH
49757: CALL_OW 111
// result := j ;
49761: LD_ADDR_VAR 0 3
49765: PUSH
49766: LD_VAR 0 5
49770: ST_TO_ADDR
// end ;
49771: LD_VAR 0 3
49775: RET
// export function PrepareApemanSoldier ( ) ; begin
49776: LD_INT 0
49778: PPUSH
// uc_nation := 0 ;
49779: LD_ADDR_OWVAR 21
49783: PUSH
49784: LD_INT 0
49786: ST_TO_ADDR
// hc_sex := sex_male ;
49787: LD_ADDR_OWVAR 27
49791: PUSH
49792: LD_INT 1
49794: ST_TO_ADDR
// hc_name :=  ;
49795: LD_ADDR_OWVAR 26
49799: PUSH
49800: LD_STRING 
49802: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49803: LD_ADDR_OWVAR 28
49807: PUSH
49808: LD_INT 15
49810: ST_TO_ADDR
// hc_gallery :=  ;
49811: LD_ADDR_OWVAR 33
49815: PUSH
49816: LD_STRING 
49818: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49819: LD_ADDR_OWVAR 31
49823: PUSH
49824: LD_INT 0
49826: PPUSH
49827: LD_INT 3
49829: PPUSH
49830: CALL_OW 12
49834: PUSH
49835: LD_INT 0
49837: PPUSH
49838: LD_INT 3
49840: PPUSH
49841: CALL_OW 12
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
49858: LD_ADDR_OWVAR 29
49862: PUSH
49863: LD_INT 10
49865: PUSH
49866: LD_INT 12
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: ST_TO_ADDR
// end ;
49873: LD_VAR 0 1
49877: RET
// export function PrepareApemanEngineer ( ) ; begin
49878: LD_INT 0
49880: PPUSH
// uc_nation := 0 ;
49881: LD_ADDR_OWVAR 21
49885: PUSH
49886: LD_INT 0
49888: ST_TO_ADDR
// hc_sex := sex_male ;
49889: LD_ADDR_OWVAR 27
49893: PUSH
49894: LD_INT 1
49896: ST_TO_ADDR
// hc_name :=  ;
49897: LD_ADDR_OWVAR 26
49901: PUSH
49902: LD_STRING 
49904: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49905: LD_ADDR_OWVAR 28
49909: PUSH
49910: LD_INT 16
49912: ST_TO_ADDR
// hc_gallery :=  ;
49913: LD_ADDR_OWVAR 33
49917: PUSH
49918: LD_STRING 
49920: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49921: LD_ADDR_OWVAR 31
49925: PUSH
49926: LD_INT 0
49928: PPUSH
49929: LD_INT 3
49931: PPUSH
49932: CALL_OW 12
49936: PUSH
49937: LD_INT 0
49939: PPUSH
49940: LD_INT 3
49942: PPUSH
49943: CALL_OW 12
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
49960: LD_ADDR_OWVAR 29
49964: PUSH
49965: LD_INT 10
49967: PUSH
49968: LD_INT 12
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: ST_TO_ADDR
// end ;
49975: LD_VAR 0 1
49979: RET
// export function PrepareApeman ( agressivity ) ; begin
49980: LD_INT 0
49982: PPUSH
// uc_side := 0 ;
49983: LD_ADDR_OWVAR 20
49987: PUSH
49988: LD_INT 0
49990: ST_TO_ADDR
// uc_nation := 0 ;
49991: LD_ADDR_OWVAR 21
49995: PUSH
49996: LD_INT 0
49998: ST_TO_ADDR
// hc_sex := sex_male ;
49999: LD_ADDR_OWVAR 27
50003: PUSH
50004: LD_INT 1
50006: ST_TO_ADDR
// hc_class := class_apeman ;
50007: LD_ADDR_OWVAR 28
50011: PUSH
50012: LD_INT 12
50014: ST_TO_ADDR
// hc_gallery :=  ;
50015: LD_ADDR_OWVAR 33
50019: PUSH
50020: LD_STRING 
50022: ST_TO_ADDR
// hc_name :=  ;
50023: LD_ADDR_OWVAR 26
50027: PUSH
50028: LD_STRING 
50030: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50031: LD_ADDR_OWVAR 29
50035: PUSH
50036: LD_INT 10
50038: PUSH
50039: LD_INT 12
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: ST_TO_ADDR
// if agressivity = 0 then
50046: LD_VAR 0 1
50050: PUSH
50051: LD_INT 0
50053: EQUAL
50054: IFFALSE 50066
// hc_agressivity := 0 else
50056: LD_ADDR_OWVAR 35
50060: PUSH
50061: LD_INT 0
50063: ST_TO_ADDR
50064: GO 50087
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50066: LD_ADDR_OWVAR 35
50070: PUSH
50071: LD_VAR 0 1
50075: NEG
50076: PPUSH
50077: LD_VAR 0 1
50081: PPUSH
50082: CALL_OW 12
50086: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50087: LD_ADDR_OWVAR 31
50091: PUSH
50092: LD_INT 0
50094: PPUSH
50095: LD_INT 3
50097: PPUSH
50098: CALL_OW 12
50102: PUSH
50103: LD_INT 0
50105: PPUSH
50106: LD_INT 3
50108: PPUSH
50109: CALL_OW 12
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: ST_TO_ADDR
// end ;
50126: LD_VAR 0 2
50130: RET
// export function PrepareTiger ( agressivity ) ; begin
50131: LD_INT 0
50133: PPUSH
// uc_side := 0 ;
50134: LD_ADDR_OWVAR 20
50138: PUSH
50139: LD_INT 0
50141: ST_TO_ADDR
// uc_nation := 0 ;
50142: LD_ADDR_OWVAR 21
50146: PUSH
50147: LD_INT 0
50149: ST_TO_ADDR
// InitHc ;
50150: CALL_OW 19
// hc_class := class_tiger ;
50154: LD_ADDR_OWVAR 28
50158: PUSH
50159: LD_INT 14
50161: ST_TO_ADDR
// hc_gallery :=  ;
50162: LD_ADDR_OWVAR 33
50166: PUSH
50167: LD_STRING 
50169: ST_TO_ADDR
// hc_name :=  ;
50170: LD_ADDR_OWVAR 26
50174: PUSH
50175: LD_STRING 
50177: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50178: LD_ADDR_OWVAR 35
50182: PUSH
50183: LD_VAR 0 1
50187: NEG
50188: PPUSH
50189: LD_VAR 0 1
50193: PPUSH
50194: CALL_OW 12
50198: ST_TO_ADDR
// end ;
50199: LD_VAR 0 2
50203: RET
// export function PrepareEnchidna ( ) ; begin
50204: LD_INT 0
50206: PPUSH
// uc_side := 0 ;
50207: LD_ADDR_OWVAR 20
50211: PUSH
50212: LD_INT 0
50214: ST_TO_ADDR
// uc_nation := 0 ;
50215: LD_ADDR_OWVAR 21
50219: PUSH
50220: LD_INT 0
50222: ST_TO_ADDR
// InitHc ;
50223: CALL_OW 19
// hc_class := class_baggie ;
50227: LD_ADDR_OWVAR 28
50231: PUSH
50232: LD_INT 13
50234: ST_TO_ADDR
// hc_gallery :=  ;
50235: LD_ADDR_OWVAR 33
50239: PUSH
50240: LD_STRING 
50242: ST_TO_ADDR
// hc_name :=  ;
50243: LD_ADDR_OWVAR 26
50247: PUSH
50248: LD_STRING 
50250: ST_TO_ADDR
// end ;
50251: LD_VAR 0 1
50255: RET
// export function PrepareFrog ( ) ; begin
50256: LD_INT 0
50258: PPUSH
// uc_side := 0 ;
50259: LD_ADDR_OWVAR 20
50263: PUSH
50264: LD_INT 0
50266: ST_TO_ADDR
// uc_nation := 0 ;
50267: LD_ADDR_OWVAR 21
50271: PUSH
50272: LD_INT 0
50274: ST_TO_ADDR
// InitHc ;
50275: CALL_OW 19
// hc_class := class_frog ;
50279: LD_ADDR_OWVAR 28
50283: PUSH
50284: LD_INT 19
50286: ST_TO_ADDR
// hc_gallery :=  ;
50287: LD_ADDR_OWVAR 33
50291: PUSH
50292: LD_STRING 
50294: ST_TO_ADDR
// hc_name :=  ;
50295: LD_ADDR_OWVAR 26
50299: PUSH
50300: LD_STRING 
50302: ST_TO_ADDR
// end ;
50303: LD_VAR 0 1
50307: RET
// export function PrepareFish ( ) ; begin
50308: LD_INT 0
50310: PPUSH
// uc_side := 0 ;
50311: LD_ADDR_OWVAR 20
50315: PUSH
50316: LD_INT 0
50318: ST_TO_ADDR
// uc_nation := 0 ;
50319: LD_ADDR_OWVAR 21
50323: PUSH
50324: LD_INT 0
50326: ST_TO_ADDR
// InitHc ;
50327: CALL_OW 19
// hc_class := class_fish ;
50331: LD_ADDR_OWVAR 28
50335: PUSH
50336: LD_INT 20
50338: ST_TO_ADDR
// hc_gallery :=  ;
50339: LD_ADDR_OWVAR 33
50343: PUSH
50344: LD_STRING 
50346: ST_TO_ADDR
// hc_name :=  ;
50347: LD_ADDR_OWVAR 26
50351: PUSH
50352: LD_STRING 
50354: ST_TO_ADDR
// end ;
50355: LD_VAR 0 1
50359: RET
// export function PrepareBird ( ) ; begin
50360: LD_INT 0
50362: PPUSH
// uc_side := 0 ;
50363: LD_ADDR_OWVAR 20
50367: PUSH
50368: LD_INT 0
50370: ST_TO_ADDR
// uc_nation := 0 ;
50371: LD_ADDR_OWVAR 21
50375: PUSH
50376: LD_INT 0
50378: ST_TO_ADDR
// InitHc ;
50379: CALL_OW 19
// hc_class := class_phororhacos ;
50383: LD_ADDR_OWVAR 28
50387: PUSH
50388: LD_INT 18
50390: ST_TO_ADDR
// hc_gallery :=  ;
50391: LD_ADDR_OWVAR 33
50395: PUSH
50396: LD_STRING 
50398: ST_TO_ADDR
// hc_name :=  ;
50399: LD_ADDR_OWVAR 26
50403: PUSH
50404: LD_STRING 
50406: ST_TO_ADDR
// end ;
50407: LD_VAR 0 1
50411: RET
// export function PrepareHorse ( ) ; begin
50412: LD_INT 0
50414: PPUSH
// uc_side := 0 ;
50415: LD_ADDR_OWVAR 20
50419: PUSH
50420: LD_INT 0
50422: ST_TO_ADDR
// uc_nation := 0 ;
50423: LD_ADDR_OWVAR 21
50427: PUSH
50428: LD_INT 0
50430: ST_TO_ADDR
// InitHc ;
50431: CALL_OW 19
// hc_class := class_horse ;
50435: LD_ADDR_OWVAR 28
50439: PUSH
50440: LD_INT 21
50442: ST_TO_ADDR
// hc_gallery :=  ;
50443: LD_ADDR_OWVAR 33
50447: PUSH
50448: LD_STRING 
50450: ST_TO_ADDR
// hc_name :=  ;
50451: LD_ADDR_OWVAR 26
50455: PUSH
50456: LD_STRING 
50458: ST_TO_ADDR
// end ;
50459: LD_VAR 0 1
50463: RET
// export function PrepareMastodont ( ) ; begin
50464: LD_INT 0
50466: PPUSH
// uc_side := 0 ;
50467: LD_ADDR_OWVAR 20
50471: PUSH
50472: LD_INT 0
50474: ST_TO_ADDR
// uc_nation := 0 ;
50475: LD_ADDR_OWVAR 21
50479: PUSH
50480: LD_INT 0
50482: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50483: LD_ADDR_OWVAR 37
50487: PUSH
50488: LD_INT 31
50490: ST_TO_ADDR
// vc_control := control_rider ;
50491: LD_ADDR_OWVAR 38
50495: PUSH
50496: LD_INT 4
50498: ST_TO_ADDR
// end ;
50499: LD_VAR 0 1
50503: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50504: LD_INT 0
50506: PPUSH
50507: PPUSH
50508: PPUSH
// uc_side = 0 ;
50509: LD_ADDR_OWVAR 20
50513: PUSH
50514: LD_INT 0
50516: ST_TO_ADDR
// uc_nation = 0 ;
50517: LD_ADDR_OWVAR 21
50521: PUSH
50522: LD_INT 0
50524: ST_TO_ADDR
// InitHc_All ( ) ;
50525: CALL_OW 584
// InitVc ;
50529: CALL_OW 20
// if mastodonts then
50533: LD_VAR 0 6
50537: IFFALSE 50604
// for i = 1 to mastodonts do
50539: LD_ADDR_VAR 0 11
50543: PUSH
50544: DOUBLE
50545: LD_INT 1
50547: DEC
50548: ST_TO_ADDR
50549: LD_VAR 0 6
50553: PUSH
50554: FOR_TO
50555: IFFALSE 50602
// begin vc_chassis := 31 ;
50557: LD_ADDR_OWVAR 37
50561: PUSH
50562: LD_INT 31
50564: ST_TO_ADDR
// vc_control := control_rider ;
50565: LD_ADDR_OWVAR 38
50569: PUSH
50570: LD_INT 4
50572: ST_TO_ADDR
// animal := CreateVehicle ;
50573: LD_ADDR_VAR 0 12
50577: PUSH
50578: CALL_OW 45
50582: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50583: LD_VAR 0 12
50587: PPUSH
50588: LD_VAR 0 8
50592: PPUSH
50593: LD_INT 0
50595: PPUSH
50596: CALL 52746 0 3
// end ;
50600: GO 50554
50602: POP
50603: POP
// if horses then
50604: LD_VAR 0 5
50608: IFFALSE 50675
// for i = 1 to horses do
50610: LD_ADDR_VAR 0 11
50614: PUSH
50615: DOUBLE
50616: LD_INT 1
50618: DEC
50619: ST_TO_ADDR
50620: LD_VAR 0 5
50624: PUSH
50625: FOR_TO
50626: IFFALSE 50673
// begin hc_class := 21 ;
50628: LD_ADDR_OWVAR 28
50632: PUSH
50633: LD_INT 21
50635: ST_TO_ADDR
// hc_gallery :=  ;
50636: LD_ADDR_OWVAR 33
50640: PUSH
50641: LD_STRING 
50643: ST_TO_ADDR
// animal := CreateHuman ;
50644: LD_ADDR_VAR 0 12
50648: PUSH
50649: CALL_OW 44
50653: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50654: LD_VAR 0 12
50658: PPUSH
50659: LD_VAR 0 8
50663: PPUSH
50664: LD_INT 0
50666: PPUSH
50667: CALL 52746 0 3
// end ;
50671: GO 50625
50673: POP
50674: POP
// if birds then
50675: LD_VAR 0 1
50679: IFFALSE 50746
// for i = 1 to birds do
50681: LD_ADDR_VAR 0 11
50685: PUSH
50686: DOUBLE
50687: LD_INT 1
50689: DEC
50690: ST_TO_ADDR
50691: LD_VAR 0 1
50695: PUSH
50696: FOR_TO
50697: IFFALSE 50744
// begin hc_class := 18 ;
50699: LD_ADDR_OWVAR 28
50703: PUSH
50704: LD_INT 18
50706: ST_TO_ADDR
// hc_gallery =  ;
50707: LD_ADDR_OWVAR 33
50711: PUSH
50712: LD_STRING 
50714: ST_TO_ADDR
// animal := CreateHuman ;
50715: LD_ADDR_VAR 0 12
50719: PUSH
50720: CALL_OW 44
50724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50725: LD_VAR 0 12
50729: PPUSH
50730: LD_VAR 0 8
50734: PPUSH
50735: LD_INT 0
50737: PPUSH
50738: CALL 52746 0 3
// end ;
50742: GO 50696
50744: POP
50745: POP
// if tigers then
50746: LD_VAR 0 2
50750: IFFALSE 50834
// for i = 1 to tigers do
50752: LD_ADDR_VAR 0 11
50756: PUSH
50757: DOUBLE
50758: LD_INT 1
50760: DEC
50761: ST_TO_ADDR
50762: LD_VAR 0 2
50766: PUSH
50767: FOR_TO
50768: IFFALSE 50832
// begin hc_class = class_tiger ;
50770: LD_ADDR_OWVAR 28
50774: PUSH
50775: LD_INT 14
50777: ST_TO_ADDR
// hc_gallery =  ;
50778: LD_ADDR_OWVAR 33
50782: PUSH
50783: LD_STRING 
50785: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50786: LD_ADDR_OWVAR 35
50790: PUSH
50791: LD_INT 7
50793: NEG
50794: PPUSH
50795: LD_INT 7
50797: PPUSH
50798: CALL_OW 12
50802: ST_TO_ADDR
// animal := CreateHuman ;
50803: LD_ADDR_VAR 0 12
50807: PUSH
50808: CALL_OW 44
50812: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50813: LD_VAR 0 12
50817: PPUSH
50818: LD_VAR 0 8
50822: PPUSH
50823: LD_INT 0
50825: PPUSH
50826: CALL 52746 0 3
// end ;
50830: GO 50767
50832: POP
50833: POP
// if apemans then
50834: LD_VAR 0 3
50838: IFFALSE 50961
// for i = 1 to apemans do
50840: LD_ADDR_VAR 0 11
50844: PUSH
50845: DOUBLE
50846: LD_INT 1
50848: DEC
50849: ST_TO_ADDR
50850: LD_VAR 0 3
50854: PUSH
50855: FOR_TO
50856: IFFALSE 50959
// begin hc_class = class_apeman ;
50858: LD_ADDR_OWVAR 28
50862: PUSH
50863: LD_INT 12
50865: ST_TO_ADDR
// hc_gallery =  ;
50866: LD_ADDR_OWVAR 33
50870: PUSH
50871: LD_STRING 
50873: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50874: LD_ADDR_OWVAR 35
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PPUSH
50883: LD_INT 2
50885: PPUSH
50886: CALL_OW 12
50890: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50891: LD_ADDR_OWVAR 31
50895: PUSH
50896: LD_INT 1
50898: PPUSH
50899: LD_INT 3
50901: PPUSH
50902: CALL_OW 12
50906: PUSH
50907: LD_INT 1
50909: PPUSH
50910: LD_INT 3
50912: PPUSH
50913: CALL_OW 12
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: ST_TO_ADDR
// animal := CreateHuman ;
50930: LD_ADDR_VAR 0 12
50934: PUSH
50935: CALL_OW 44
50939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50940: LD_VAR 0 12
50944: PPUSH
50945: LD_VAR 0 8
50949: PPUSH
50950: LD_INT 0
50952: PPUSH
50953: CALL 52746 0 3
// end ;
50957: GO 50855
50959: POP
50960: POP
// if enchidnas then
50961: LD_VAR 0 4
50965: IFFALSE 51032
// for i = 1 to enchidnas do
50967: LD_ADDR_VAR 0 11
50971: PUSH
50972: DOUBLE
50973: LD_INT 1
50975: DEC
50976: ST_TO_ADDR
50977: LD_VAR 0 4
50981: PUSH
50982: FOR_TO
50983: IFFALSE 51030
// begin hc_class = 13 ;
50985: LD_ADDR_OWVAR 28
50989: PUSH
50990: LD_INT 13
50992: ST_TO_ADDR
// hc_gallery =  ;
50993: LD_ADDR_OWVAR 33
50997: PUSH
50998: LD_STRING 
51000: ST_TO_ADDR
// animal := CreateHuman ;
51001: LD_ADDR_VAR 0 12
51005: PUSH
51006: CALL_OW 44
51010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51011: LD_VAR 0 12
51015: PPUSH
51016: LD_VAR 0 8
51020: PPUSH
51021: LD_INT 0
51023: PPUSH
51024: CALL 52746 0 3
// end ;
51028: GO 50982
51030: POP
51031: POP
// if fishes then
51032: LD_VAR 0 7
51036: IFFALSE 51103
// for i = 1 to fishes do
51038: LD_ADDR_VAR 0 11
51042: PUSH
51043: DOUBLE
51044: LD_INT 1
51046: DEC
51047: ST_TO_ADDR
51048: LD_VAR 0 7
51052: PUSH
51053: FOR_TO
51054: IFFALSE 51101
// begin hc_class = 20 ;
51056: LD_ADDR_OWVAR 28
51060: PUSH
51061: LD_INT 20
51063: ST_TO_ADDR
// hc_gallery =  ;
51064: LD_ADDR_OWVAR 33
51068: PUSH
51069: LD_STRING 
51071: ST_TO_ADDR
// animal := CreateHuman ;
51072: LD_ADDR_VAR 0 12
51076: PUSH
51077: CALL_OW 44
51081: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51082: LD_VAR 0 12
51086: PPUSH
51087: LD_VAR 0 9
51091: PPUSH
51092: LD_INT 0
51094: PPUSH
51095: CALL 52746 0 3
// end ;
51099: GO 51053
51101: POP
51102: POP
// end ;
51103: LD_VAR 0 10
51107: RET
// export function WantHeal ( sci , unit ) ; begin
51108: LD_INT 0
51110: PPUSH
// if GetTaskList ( sci ) > 0 then
51111: LD_VAR 0 1
51115: PPUSH
51116: CALL_OW 437
51120: PUSH
51121: LD_INT 0
51123: GREATER
51124: IFFALSE 51196
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51126: LD_VAR 0 1
51130: PPUSH
51131: CALL_OW 437
51135: PUSH
51136: LD_INT 1
51138: ARRAY
51139: PUSH
51140: LD_INT 1
51142: ARRAY
51143: PUSH
51144: LD_STRING l
51146: EQUAL
51147: IFFALSE 51174
51149: PUSH
51150: LD_VAR 0 1
51154: PPUSH
51155: CALL_OW 437
51159: PUSH
51160: LD_INT 1
51162: ARRAY
51163: PUSH
51164: LD_INT 4
51166: ARRAY
51167: PUSH
51168: LD_VAR 0 2
51172: EQUAL
51173: AND
51174: IFFALSE 51186
// result := true else
51176: LD_ADDR_VAR 0 3
51180: PUSH
51181: LD_INT 1
51183: ST_TO_ADDR
51184: GO 51194
// result := false ;
51186: LD_ADDR_VAR 0 3
51190: PUSH
51191: LD_INT 0
51193: ST_TO_ADDR
// end else
51194: GO 51204
// result := false ;
51196: LD_ADDR_VAR 0 3
51200: PUSH
51201: LD_INT 0
51203: ST_TO_ADDR
// end ;
51204: LD_VAR 0 3
51208: RET
// export function HealTarget ( sci ) ; begin
51209: LD_INT 0
51211: PPUSH
// if not sci then
51212: LD_VAR 0 1
51216: NOT
51217: IFFALSE 51221
// exit ;
51219: GO 51286
// result := 0 ;
51221: LD_ADDR_VAR 0 2
51225: PUSH
51226: LD_INT 0
51228: ST_TO_ADDR
// if GetTaskList ( sci ) then
51229: LD_VAR 0 1
51233: PPUSH
51234: CALL_OW 437
51238: IFFALSE 51286
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51240: LD_VAR 0 1
51244: PPUSH
51245: CALL_OW 437
51249: PUSH
51250: LD_INT 1
51252: ARRAY
51253: PUSH
51254: LD_INT 1
51256: ARRAY
51257: PUSH
51258: LD_STRING l
51260: EQUAL
51261: IFFALSE 51286
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51263: LD_ADDR_VAR 0 2
51267: PUSH
51268: LD_VAR 0 1
51272: PPUSH
51273: CALL_OW 437
51277: PUSH
51278: LD_INT 1
51280: ARRAY
51281: PUSH
51282: LD_INT 4
51284: ARRAY
51285: ST_TO_ADDR
// end ;
51286: LD_VAR 0 2
51290: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51291: LD_INT 0
51293: PPUSH
51294: PPUSH
51295: PPUSH
51296: PPUSH
// if not base_units then
51297: LD_VAR 0 1
51301: NOT
51302: IFFALSE 51306
// exit ;
51304: GO 51393
// result := false ;
51306: LD_ADDR_VAR 0 2
51310: PUSH
51311: LD_INT 0
51313: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51314: LD_ADDR_VAR 0 5
51318: PUSH
51319: LD_VAR 0 1
51323: PPUSH
51324: LD_INT 21
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PPUSH
51334: CALL_OW 72
51338: ST_TO_ADDR
// if not tmp then
51339: LD_VAR 0 5
51343: NOT
51344: IFFALSE 51348
// exit ;
51346: GO 51393
// for i in tmp do
51348: LD_ADDR_VAR 0 3
51352: PUSH
51353: LD_VAR 0 5
51357: PUSH
51358: FOR_IN
51359: IFFALSE 51391
// begin result := EnemyInRange ( i , 22 ) ;
51361: LD_ADDR_VAR 0 2
51365: PUSH
51366: LD_VAR 0 3
51370: PPUSH
51371: LD_INT 22
51373: PPUSH
51374: CALL 48808 0 2
51378: ST_TO_ADDR
// if result then
51379: LD_VAR 0 2
51383: IFFALSE 51389
// exit ;
51385: POP
51386: POP
51387: GO 51393
// end ;
51389: GO 51358
51391: POP
51392: POP
// end ;
51393: LD_VAR 0 2
51397: RET
// export function FilterByTag ( units , tag ) ; begin
51398: LD_INT 0
51400: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51401: LD_ADDR_VAR 0 3
51405: PUSH
51406: LD_VAR 0 1
51410: PPUSH
51411: LD_INT 120
51413: PUSH
51414: LD_VAR 0 2
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PPUSH
51423: CALL_OW 72
51427: ST_TO_ADDR
// end ;
51428: LD_VAR 0 3
51432: RET
// export function IsDriver ( un ) ; begin
51433: LD_INT 0
51435: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51436: LD_ADDR_VAR 0 2
51440: PUSH
51441: LD_VAR 0 1
51445: PUSH
51446: LD_INT 55
51448: PUSH
51449: EMPTY
51450: LIST
51451: PPUSH
51452: CALL_OW 69
51456: IN
51457: ST_TO_ADDR
// end ;
51458: LD_VAR 0 2
51462: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51463: LD_INT 0
51465: PPUSH
51466: PPUSH
// list := [ ] ;
51467: LD_ADDR_VAR 0 5
51471: PUSH
51472: EMPTY
51473: ST_TO_ADDR
// case d of 0 :
51474: LD_VAR 0 3
51478: PUSH
51479: LD_INT 0
51481: DOUBLE
51482: EQUAL
51483: IFTRUE 51487
51485: GO 51620
51487: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51488: LD_ADDR_VAR 0 5
51492: PUSH
51493: LD_VAR 0 1
51497: PUSH
51498: LD_INT 4
51500: MINUS
51501: PUSH
51502: LD_VAR 0 2
51506: PUSH
51507: LD_INT 4
51509: MINUS
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: PUSH
51519: LD_VAR 0 1
51523: PUSH
51524: LD_INT 3
51526: MINUS
51527: PUSH
51528: LD_VAR 0 2
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: LIST
51540: PUSH
51541: LD_VAR 0 1
51545: PUSH
51546: LD_INT 4
51548: PLUS
51549: PUSH
51550: LD_VAR 0 2
51554: PUSH
51555: LD_INT 4
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: LIST
51562: PUSH
51563: LD_VAR 0 1
51567: PUSH
51568: LD_INT 3
51570: PLUS
51571: PUSH
51572: LD_VAR 0 2
51576: PUSH
51577: LD_INT 3
51579: PLUS
51580: PUSH
51581: LD_INT 5
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: PUSH
51589: LD_VAR 0 1
51593: PUSH
51594: LD_VAR 0 2
51598: PUSH
51599: LD_INT 4
51601: PLUS
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// end ; 1 :
51618: GO 52318
51620: LD_INT 1
51622: DOUBLE
51623: EQUAL
51624: IFTRUE 51628
51626: GO 51761
51628: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51629: LD_ADDR_VAR 0 5
51633: PUSH
51634: LD_VAR 0 1
51638: PUSH
51639: LD_VAR 0 2
51643: PUSH
51644: LD_INT 4
51646: MINUS
51647: PUSH
51648: LD_INT 3
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: PUSH
51656: LD_VAR 0 1
51660: PUSH
51661: LD_INT 3
51663: MINUS
51664: PUSH
51665: LD_VAR 0 2
51669: PUSH
51670: LD_INT 3
51672: MINUS
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: LIST
51681: PUSH
51682: LD_VAR 0 1
51686: PUSH
51687: LD_INT 4
51689: MINUS
51690: PUSH
51691: LD_VAR 0 2
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: PUSH
51704: LD_VAR 0 1
51708: PUSH
51709: LD_VAR 0 2
51713: PUSH
51714: LD_INT 3
51716: PLUS
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: PUSH
51726: LD_VAR 0 1
51730: PUSH
51731: LD_INT 4
51733: PLUS
51734: PUSH
51735: LD_VAR 0 2
51739: PUSH
51740: LD_INT 4
51742: PLUS
51743: PUSH
51744: LD_INT 5
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: ST_TO_ADDR
// end ; 2 :
51759: GO 52318
51761: LD_INT 2
51763: DOUBLE
51764: EQUAL
51765: IFTRUE 51769
51767: GO 51898
51769: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51770: LD_ADDR_VAR 0 5
51774: PUSH
51775: LD_VAR 0 1
51779: PUSH
51780: LD_VAR 0 2
51784: PUSH
51785: LD_INT 3
51787: MINUS
51788: PUSH
51789: LD_INT 3
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: PUSH
51797: LD_VAR 0 1
51801: PUSH
51802: LD_INT 4
51804: PLUS
51805: PUSH
51806: LD_VAR 0 2
51810: PUSH
51811: LD_INT 4
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: LIST
51818: PUSH
51819: LD_VAR 0 1
51823: PUSH
51824: LD_VAR 0 2
51828: PUSH
51829: LD_INT 4
51831: PLUS
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: PUSH
51841: LD_VAR 0 1
51845: PUSH
51846: LD_INT 3
51848: MINUS
51849: PUSH
51850: LD_VAR 0 2
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: PUSH
51863: LD_VAR 0 1
51867: PUSH
51868: LD_INT 4
51870: MINUS
51871: PUSH
51872: LD_VAR 0 2
51876: PUSH
51877: LD_INT 4
51879: MINUS
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: ST_TO_ADDR
// end ; 3 :
51896: GO 52318
51898: LD_INT 3
51900: DOUBLE
51901: EQUAL
51902: IFTRUE 51906
51904: GO 52039
51906: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51907: LD_ADDR_VAR 0 5
51911: PUSH
51912: LD_VAR 0 1
51916: PUSH
51917: LD_INT 3
51919: PLUS
51920: PUSH
51921: LD_VAR 0 2
51925: PUSH
51926: LD_INT 4
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: PUSH
51934: LD_VAR 0 1
51938: PUSH
51939: LD_INT 4
51941: PLUS
51942: PUSH
51943: LD_VAR 0 2
51947: PUSH
51948: LD_INT 4
51950: PLUS
51951: PUSH
51952: LD_INT 5
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: PUSH
51960: LD_VAR 0 1
51964: PUSH
51965: LD_INT 4
51967: MINUS
51968: PUSH
51969: LD_VAR 0 2
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: LIST
51981: PUSH
51982: LD_VAR 0 1
51986: PUSH
51987: LD_VAR 0 2
51991: PUSH
51992: LD_INT 4
51994: MINUS
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: LIST
52003: PUSH
52004: LD_VAR 0 1
52008: PUSH
52009: LD_INT 3
52011: MINUS
52012: PUSH
52013: LD_VAR 0 2
52017: PUSH
52018: LD_INT 3
52020: MINUS
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: LIST
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: ST_TO_ADDR
// end ; 4 :
52037: GO 52318
52039: LD_INT 4
52041: DOUBLE
52042: EQUAL
52043: IFTRUE 52047
52045: GO 52180
52047: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52048: LD_ADDR_VAR 0 5
52052: PUSH
52053: LD_VAR 0 1
52057: PUSH
52058: LD_VAR 0 2
52062: PUSH
52063: LD_INT 4
52065: PLUS
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: PUSH
52075: LD_VAR 0 1
52079: PUSH
52080: LD_INT 3
52082: PLUS
52083: PUSH
52084: LD_VAR 0 2
52088: PUSH
52089: LD_INT 3
52091: PLUS
52092: PUSH
52093: LD_INT 5
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: LIST
52100: PUSH
52101: LD_VAR 0 1
52105: PUSH
52106: LD_INT 4
52108: PLUS
52109: PUSH
52110: LD_VAR 0 2
52114: PUSH
52115: LD_INT 4
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: LIST
52122: PUSH
52123: LD_VAR 0 1
52127: PUSH
52128: LD_VAR 0 2
52132: PUSH
52133: LD_INT 3
52135: MINUS
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: PUSH
52145: LD_VAR 0 1
52149: PUSH
52150: LD_INT 4
52152: MINUS
52153: PUSH
52154: LD_VAR 0 2
52158: PUSH
52159: LD_INT 4
52161: MINUS
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: ST_TO_ADDR
// end ; 5 :
52178: GO 52318
52180: LD_INT 5
52182: DOUBLE
52183: EQUAL
52184: IFTRUE 52188
52186: GO 52317
52188: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52189: LD_ADDR_VAR 0 5
52193: PUSH
52194: LD_VAR 0 1
52198: PUSH
52199: LD_INT 4
52201: MINUS
52202: PUSH
52203: LD_VAR 0 2
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: LIST
52215: PUSH
52216: LD_VAR 0 1
52220: PUSH
52221: LD_VAR 0 2
52225: PUSH
52226: LD_INT 4
52228: MINUS
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: PUSH
52238: LD_VAR 0 1
52242: PUSH
52243: LD_INT 4
52245: PLUS
52246: PUSH
52247: LD_VAR 0 2
52251: PUSH
52252: LD_INT 4
52254: PLUS
52255: PUSH
52256: LD_INT 5
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: PUSH
52264: LD_VAR 0 1
52268: PUSH
52269: LD_INT 3
52271: PLUS
52272: PUSH
52273: LD_VAR 0 2
52277: PUSH
52278: LD_INT 4
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: PUSH
52286: LD_VAR 0 1
52290: PUSH
52291: LD_VAR 0 2
52295: PUSH
52296: LD_INT 3
52298: PLUS
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: LIST
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: ST_TO_ADDR
// end ; end ;
52315: GO 52318
52317: POP
// result := list ;
52318: LD_ADDR_VAR 0 4
52322: PUSH
52323: LD_VAR 0 5
52327: ST_TO_ADDR
// end ;
52328: LD_VAR 0 4
52332: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52333: LD_INT 0
52335: PPUSH
52336: PPUSH
52337: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52338: LD_VAR 0 1
52342: NOT
52343: IFTRUE 52371
52345: PUSH
52346: LD_VAR 0 2
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: LD_INT 4
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: IN
52369: NOT
52370: OR
52371: IFFALSE 52375
// exit ;
52373: GO 52458
// tmp := [ ] ;
52375: LD_ADDR_VAR 0 5
52379: PUSH
52380: EMPTY
52381: ST_TO_ADDR
// for i in units do
52382: LD_ADDR_VAR 0 4
52386: PUSH
52387: LD_VAR 0 1
52391: PUSH
52392: FOR_IN
52393: IFFALSE 52427
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52395: LD_ADDR_VAR 0 5
52399: PUSH
52400: LD_VAR 0 5
52404: PPUSH
52405: LD_VAR 0 4
52409: PPUSH
52410: LD_VAR 0 2
52414: PPUSH
52415: CALL_OW 259
52419: PPUSH
52420: CALL 53853 0 2
52424: ST_TO_ADDR
52425: GO 52392
52427: POP
52428: POP
// if not tmp then
52429: LD_VAR 0 5
52433: NOT
52434: IFFALSE 52438
// exit ;
52436: GO 52458
// result := SortListByListDesc ( units , tmp ) ;
52438: LD_ADDR_VAR 0 3
52442: PUSH
52443: LD_VAR 0 1
52447: PPUSH
52448: LD_VAR 0 5
52452: PPUSH
52453: CALL_OW 77
52457: ST_TO_ADDR
// end ;
52458: LD_VAR 0 3
52462: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52463: LD_INT 0
52465: PPUSH
52466: PPUSH
52467: PPUSH
// result := false ;
52468: LD_ADDR_VAR 0 3
52472: PUSH
52473: LD_INT 0
52475: ST_TO_ADDR
// if not building then
52476: LD_VAR 0 2
52480: NOT
52481: IFFALSE 52485
// exit ;
52483: GO 52629
// x := GetX ( building ) ;
52485: LD_ADDR_VAR 0 4
52489: PUSH
52490: LD_VAR 0 2
52494: PPUSH
52495: CALL_OW 250
52499: ST_TO_ADDR
// y := GetY ( building ) ;
52500: LD_ADDR_VAR 0 5
52504: PUSH
52505: LD_VAR 0 2
52509: PPUSH
52510: CALL_OW 251
52514: ST_TO_ADDR
// if not x or not y then
52515: LD_VAR 0 4
52519: NOT
52520: IFTRUE 52529
52522: PUSH
52523: LD_VAR 0 5
52527: NOT
52528: OR
52529: IFFALSE 52533
// exit ;
52531: GO 52629
// if GetTaskList ( unit ) then
52533: LD_VAR 0 1
52537: PPUSH
52538: CALL_OW 437
52542: IFFALSE 52629
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52544: LD_STRING e
52546: PUSH
52547: LD_VAR 0 1
52551: PPUSH
52552: CALL_OW 437
52556: PUSH
52557: LD_INT 1
52559: ARRAY
52560: PUSH
52561: LD_INT 1
52563: ARRAY
52564: EQUAL
52565: IFFALSE 52592
52567: PUSH
52568: LD_VAR 0 4
52572: PUSH
52573: LD_VAR 0 1
52577: PPUSH
52578: CALL_OW 437
52582: PUSH
52583: LD_INT 1
52585: ARRAY
52586: PUSH
52587: LD_INT 2
52589: ARRAY
52590: EQUAL
52591: AND
52592: IFFALSE 52619
52594: PUSH
52595: LD_VAR 0 5
52599: PUSH
52600: LD_VAR 0 1
52604: PPUSH
52605: CALL_OW 437
52609: PUSH
52610: LD_INT 1
52612: ARRAY
52613: PUSH
52614: LD_INT 3
52616: ARRAY
52617: EQUAL
52618: AND
52619: IFFALSE 52629
// result := true end ;
52621: LD_ADDR_VAR 0 3
52625: PUSH
52626: LD_INT 1
52628: ST_TO_ADDR
// end ;
52629: LD_VAR 0 3
52633: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52634: LD_INT 0
52636: PPUSH
// result := false ;
52637: LD_ADDR_VAR 0 4
52641: PUSH
52642: LD_INT 0
52644: ST_TO_ADDR
// if GetTaskList ( unit ) then
52645: LD_VAR 0 1
52649: PPUSH
52650: CALL_OW 437
52654: IFFALSE 52741
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52656: LD_STRING M
52658: PUSH
52659: LD_VAR 0 1
52663: PPUSH
52664: CALL_OW 437
52668: PUSH
52669: LD_INT 1
52671: ARRAY
52672: PUSH
52673: LD_INT 1
52675: ARRAY
52676: EQUAL
52677: IFFALSE 52704
52679: PUSH
52680: LD_VAR 0 2
52684: PUSH
52685: LD_VAR 0 1
52689: PPUSH
52690: CALL_OW 437
52694: PUSH
52695: LD_INT 1
52697: ARRAY
52698: PUSH
52699: LD_INT 2
52701: ARRAY
52702: EQUAL
52703: AND
52704: IFFALSE 52731
52706: PUSH
52707: LD_VAR 0 3
52711: PUSH
52712: LD_VAR 0 1
52716: PPUSH
52717: CALL_OW 437
52721: PUSH
52722: LD_INT 1
52724: ARRAY
52725: PUSH
52726: LD_INT 3
52728: ARRAY
52729: EQUAL
52730: AND
52731: IFFALSE 52741
// result := true ;
52733: LD_ADDR_VAR 0 4
52737: PUSH
52738: LD_INT 1
52740: ST_TO_ADDR
// end ; end ;
52741: LD_VAR 0 4
52745: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52746: LD_INT 0
52748: PPUSH
52749: PPUSH
52750: PPUSH
52751: PPUSH
// if not unit or not area then
52752: LD_VAR 0 1
52756: NOT
52757: IFTRUE 52766
52759: PUSH
52760: LD_VAR 0 2
52764: NOT
52765: OR
52766: IFFALSE 52770
// exit ;
52768: GO 52946
// tmp := AreaToList ( area , i ) ;
52770: LD_ADDR_VAR 0 6
52774: PUSH
52775: LD_VAR 0 2
52779: PPUSH
52780: LD_VAR 0 5
52784: PPUSH
52785: CALL_OW 517
52789: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52790: LD_ADDR_VAR 0 5
52794: PUSH
52795: DOUBLE
52796: LD_INT 1
52798: DEC
52799: ST_TO_ADDR
52800: LD_VAR 0 6
52804: PUSH
52805: LD_INT 1
52807: ARRAY
52808: PUSH
52809: FOR_TO
52810: IFFALSE 52944
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52812: LD_ADDR_VAR 0 7
52816: PUSH
52817: LD_VAR 0 6
52821: PUSH
52822: LD_INT 1
52824: ARRAY
52825: PUSH
52826: LD_VAR 0 5
52830: ARRAY
52831: PUSH
52832: LD_VAR 0 6
52836: PUSH
52837: LD_INT 2
52839: ARRAY
52840: PUSH
52841: LD_VAR 0 5
52845: ARRAY
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52851: LD_INT 92
52853: PUSH
52854: LD_VAR 0 7
52858: PUSH
52859: LD_INT 1
52861: ARRAY
52862: PUSH
52863: LD_VAR 0 7
52867: PUSH
52868: LD_INT 2
52870: ARRAY
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: PPUSH
52881: CALL_OW 69
52885: PUSH
52886: LD_INT 0
52888: EQUAL
52889: IFFALSE 52942
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52891: LD_VAR 0 1
52895: PPUSH
52896: LD_VAR 0 7
52900: PUSH
52901: LD_INT 1
52903: ARRAY
52904: PPUSH
52905: LD_VAR 0 7
52909: PUSH
52910: LD_INT 2
52912: ARRAY
52913: PPUSH
52914: LD_VAR 0 3
52918: PPUSH
52919: CALL_OW 48
// result := IsPlaced ( unit ) ;
52923: LD_ADDR_VAR 0 4
52927: PUSH
52928: LD_VAR 0 1
52932: PPUSH
52933: CALL_OW 305
52937: ST_TO_ADDR
// exit ;
52938: POP
52939: POP
52940: GO 52946
// end ; end ;
52942: GO 52809
52944: POP
52945: POP
// end ;
52946: LD_VAR 0 4
52950: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52951: LD_INT 0
52953: PPUSH
52954: PPUSH
52955: PPUSH
// if not side or side > 8 then
52956: LD_VAR 0 1
52960: NOT
52961: IFTRUE 52973
52963: PUSH
52964: LD_VAR 0 1
52968: PUSH
52969: LD_INT 8
52971: GREATER
52972: OR
52973: IFFALSE 52977
// exit ;
52975: GO 53164
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52977: LD_ADDR_VAR 0 4
52981: PUSH
52982: LD_INT 22
52984: PUSH
52985: LD_VAR 0 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 21
52996: PUSH
52997: LD_INT 3
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PPUSH
53008: CALL_OW 69
53012: ST_TO_ADDR
// if not tmp then
53013: LD_VAR 0 4
53017: NOT
53018: IFFALSE 53022
// exit ;
53020: GO 53164
// enable_addtolog := true ;
53022: LD_ADDR_OWVAR 81
53026: PUSH
53027: LD_INT 1
53029: ST_TO_ADDR
// AddToLog ( [ ) ;
53030: LD_STRING [
53032: PPUSH
53033: CALL_OW 561
// for i in tmp do
53037: LD_ADDR_VAR 0 3
53041: PUSH
53042: LD_VAR 0 4
53046: PUSH
53047: FOR_IN
53048: IFFALSE 53155
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53050: LD_STRING [
53052: PUSH
53053: LD_VAR 0 3
53057: PPUSH
53058: CALL_OW 266
53062: STR
53063: PUSH
53064: LD_STRING , 
53066: STR
53067: PUSH
53068: LD_VAR 0 3
53072: PPUSH
53073: CALL_OW 250
53077: STR
53078: PUSH
53079: LD_STRING , 
53081: STR
53082: PUSH
53083: LD_VAR 0 3
53087: PPUSH
53088: CALL_OW 251
53092: STR
53093: PUSH
53094: LD_STRING , 
53096: STR
53097: PUSH
53098: LD_VAR 0 3
53102: PPUSH
53103: CALL_OW 254
53107: STR
53108: PUSH
53109: LD_STRING , 
53111: STR
53112: PUSH
53113: LD_VAR 0 3
53117: PPUSH
53118: LD_INT 1
53120: PPUSH
53121: CALL_OW 268
53125: STR
53126: PUSH
53127: LD_STRING , 
53129: STR
53130: PUSH
53131: LD_VAR 0 3
53135: PPUSH
53136: LD_INT 2
53138: PPUSH
53139: CALL_OW 268
53143: STR
53144: PUSH
53145: LD_STRING ],
53147: STR
53148: PPUSH
53149: CALL_OW 561
// end ;
53153: GO 53047
53155: POP
53156: POP
// AddToLog ( ]; ) ;
53157: LD_STRING ];
53159: PPUSH
53160: CALL_OW 561
// end ;
53164: LD_VAR 0 2
53168: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53169: LD_INT 0
53171: PPUSH
53172: PPUSH
53173: PPUSH
53174: PPUSH
53175: PPUSH
// if not area or not rate or not max then
53176: LD_VAR 0 1
53180: NOT
53181: IFTRUE 53190
53183: PUSH
53184: LD_VAR 0 2
53188: NOT
53189: OR
53190: IFTRUE 53199
53192: PUSH
53193: LD_VAR 0 4
53197: NOT
53198: OR
53199: IFFALSE 53203
// exit ;
53201: GO 53392
// while 1 do
53203: LD_INT 1
53205: IFFALSE 53392
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53207: LD_ADDR_VAR 0 9
53211: PUSH
53212: LD_VAR 0 1
53216: PPUSH
53217: LD_INT 1
53219: PPUSH
53220: CALL_OW 287
53224: PUSH
53225: LD_INT 10
53227: MUL
53228: ST_TO_ADDR
// r := rate / 10 ;
53229: LD_ADDR_VAR 0 7
53233: PUSH
53234: LD_VAR 0 2
53238: PUSH
53239: LD_INT 10
53241: DIVREAL
53242: ST_TO_ADDR
// time := 1 1$00 ;
53243: LD_ADDR_VAR 0 8
53247: PUSH
53248: LD_INT 2100
53250: ST_TO_ADDR
// if amount < min then
53251: LD_VAR 0 9
53255: PUSH
53256: LD_VAR 0 3
53260: LESS
53261: IFFALSE 53279
// r := r * 2 else
53263: LD_ADDR_VAR 0 7
53267: PUSH
53268: LD_VAR 0 7
53272: PUSH
53273: LD_INT 2
53275: MUL
53276: ST_TO_ADDR
53277: GO 53305
// if amount > max then
53279: LD_VAR 0 9
53283: PUSH
53284: LD_VAR 0 4
53288: GREATER
53289: IFFALSE 53305
// r := r / 2 ;
53291: LD_ADDR_VAR 0 7
53295: PUSH
53296: LD_VAR 0 7
53300: PUSH
53301: LD_INT 2
53303: DIVREAL
53304: ST_TO_ADDR
// time := time / r ;
53305: LD_ADDR_VAR 0 8
53309: PUSH
53310: LD_VAR 0 8
53314: PUSH
53315: LD_VAR 0 7
53319: DIVREAL
53320: ST_TO_ADDR
// if time < 0 then
53321: LD_VAR 0 8
53325: PUSH
53326: LD_INT 0
53328: LESS
53329: IFFALSE 53346
// time := time * - 1 ;
53331: LD_ADDR_VAR 0 8
53335: PUSH
53336: LD_VAR 0 8
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: MUL
53345: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53346: LD_VAR 0 8
53350: PUSH
53351: LD_INT 35
53353: PPUSH
53354: LD_INT 875
53356: PPUSH
53357: CALL_OW 12
53361: PLUS
53362: PPUSH
53363: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53367: LD_INT 1
53369: PPUSH
53370: LD_INT 5
53372: PPUSH
53373: CALL_OW 12
53377: PPUSH
53378: LD_VAR 0 1
53382: PPUSH
53383: LD_INT 1
53385: PPUSH
53386: CALL_OW 55
// end ;
53390: GO 53203
// end ;
53392: LD_VAR 0 5
53396: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53397: LD_INT 0
53399: PPUSH
53400: PPUSH
53401: PPUSH
53402: PPUSH
53403: PPUSH
53404: PPUSH
53405: PPUSH
53406: PPUSH
// if not turrets or not factories then
53407: LD_VAR 0 1
53411: NOT
53412: IFTRUE 53421
53414: PUSH
53415: LD_VAR 0 2
53419: NOT
53420: OR
53421: IFFALSE 53425
// exit ;
53423: GO 53732
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53425: LD_ADDR_VAR 0 10
53429: PUSH
53430: LD_INT 5
53432: PUSH
53433: LD_INT 6
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: LD_INT 4
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: LD_INT 5
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 24
53467: PUSH
53468: LD_INT 25
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 23
53477: PUSH
53478: LD_INT 27
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 42
53491: PUSH
53492: LD_INT 43
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 44
53501: PUSH
53502: LD_INT 46
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 45
53511: PUSH
53512: LD_INT 47
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: LIST
53528: ST_TO_ADDR
// result := [ ] ;
53529: LD_ADDR_VAR 0 3
53533: PUSH
53534: EMPTY
53535: ST_TO_ADDR
// for i in turrets do
53536: LD_ADDR_VAR 0 4
53540: PUSH
53541: LD_VAR 0 1
53545: PUSH
53546: FOR_IN
53547: IFFALSE 53730
// begin nat := GetNation ( i ) ;
53549: LD_ADDR_VAR 0 7
53553: PUSH
53554: LD_VAR 0 4
53558: PPUSH
53559: CALL_OW 248
53563: ST_TO_ADDR
// weapon := 0 ;
53564: LD_ADDR_VAR 0 8
53568: PUSH
53569: LD_INT 0
53571: ST_TO_ADDR
// if not nat then
53572: LD_VAR 0 7
53576: NOT
53577: IFFALSE 53581
// continue ;
53579: GO 53546
// for j in list [ nat ] do
53581: LD_ADDR_VAR 0 5
53585: PUSH
53586: LD_VAR 0 10
53590: PUSH
53591: LD_VAR 0 7
53595: ARRAY
53596: PUSH
53597: FOR_IN
53598: IFFALSE 53639
// if GetBWeapon ( i ) = j [ 1 ] then
53600: LD_VAR 0 4
53604: PPUSH
53605: CALL_OW 269
53609: PUSH
53610: LD_VAR 0 5
53614: PUSH
53615: LD_INT 1
53617: ARRAY
53618: EQUAL
53619: IFFALSE 53637
// begin weapon := j [ 2 ] ;
53621: LD_ADDR_VAR 0 8
53625: PUSH
53626: LD_VAR 0 5
53630: PUSH
53631: LD_INT 2
53633: ARRAY
53634: ST_TO_ADDR
// break ;
53635: GO 53639
// end ;
53637: GO 53597
53639: POP
53640: POP
// if not weapon then
53641: LD_VAR 0 8
53645: NOT
53646: IFFALSE 53650
// continue ;
53648: GO 53546
// for k in factories do
53650: LD_ADDR_VAR 0 6
53654: PUSH
53655: LD_VAR 0 2
53659: PUSH
53660: FOR_IN
53661: IFFALSE 53726
// begin weapons := AvailableWeaponList ( k ) ;
53663: LD_ADDR_VAR 0 9
53667: PUSH
53668: LD_VAR 0 6
53672: PPUSH
53673: CALL_OW 478
53677: ST_TO_ADDR
// if not weapons then
53678: LD_VAR 0 9
53682: NOT
53683: IFFALSE 53687
// continue ;
53685: GO 53660
// if weapon in weapons then
53687: LD_VAR 0 8
53691: PUSH
53692: LD_VAR 0 9
53696: IN
53697: IFFALSE 53724
// begin result := [ i , weapon ] ;
53699: LD_ADDR_VAR 0 3
53703: PUSH
53704: LD_VAR 0 4
53708: PUSH
53709: LD_VAR 0 8
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: ST_TO_ADDR
// exit ;
53718: POP
53719: POP
53720: POP
53721: POP
53722: GO 53732
// end ; end ;
53724: GO 53660
53726: POP
53727: POP
// end ;
53728: GO 53546
53730: POP
53731: POP
// end ;
53732: LD_VAR 0 3
53736: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53737: LD_INT 0
53739: PPUSH
// if not side or side > 8 then
53740: LD_VAR 0 3
53744: NOT
53745: IFTRUE 53757
53747: PUSH
53748: LD_VAR 0 3
53752: PUSH
53753: LD_INT 8
53755: GREATER
53756: OR
53757: IFFALSE 53761
// exit ;
53759: GO 53820
// if not range then
53761: LD_VAR 0 4
53765: NOT
53766: IFFALSE 53777
// range := - 12 ;
53768: LD_ADDR_VAR 0 4
53772: PUSH
53773: LD_INT 12
53775: NEG
53776: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53777: LD_VAR 0 1
53781: PPUSH
53782: LD_VAR 0 2
53786: PPUSH
53787: LD_VAR 0 3
53791: PPUSH
53792: LD_VAR 0 4
53796: PPUSH
53797: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53801: LD_VAR 0 1
53805: PPUSH
53806: LD_VAR 0 2
53810: PPUSH
53811: LD_VAR 0 3
53815: PPUSH
53816: CALL_OW 331
// end ;
53820: LD_VAR 0 5
53824: RET
// export function Video ( mode ) ; begin
53825: LD_INT 0
53827: PPUSH
// ingame_video = mode ;
53828: LD_ADDR_OWVAR 52
53832: PUSH
53833: LD_VAR 0 1
53837: ST_TO_ADDR
// interface_hidden = mode ;
53838: LD_ADDR_OWVAR 54
53842: PUSH
53843: LD_VAR 0 1
53847: ST_TO_ADDR
// end ;
53848: LD_VAR 0 2
53852: RET
// export function Join ( array , element ) ; begin
53853: LD_INT 0
53855: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53856: LD_ADDR_VAR 0 3
53860: PUSH
53861: LD_VAR 0 1
53865: PPUSH
53866: LD_VAR 0 1
53870: PUSH
53871: LD_INT 1
53873: PLUS
53874: PPUSH
53875: LD_VAR 0 2
53879: PPUSH
53880: CALL_OW 1
53884: ST_TO_ADDR
// end ;
53885: LD_VAR 0 3
53889: RET
// export function JoinUnion ( array , element ) ; begin
53890: LD_INT 0
53892: PPUSH
// result := array union element ;
53893: LD_ADDR_VAR 0 3
53897: PUSH
53898: LD_VAR 0 1
53902: PUSH
53903: LD_VAR 0 2
53907: UNION
53908: ST_TO_ADDR
// end ;
53909: LD_VAR 0 3
53913: RET
// export function GetBehemoths ( side ) ; begin
53914: LD_INT 0
53916: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53917: LD_ADDR_VAR 0 2
53921: PUSH
53922: LD_INT 22
53924: PUSH
53925: LD_VAR 0 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 31
53936: PUSH
53937: LD_INT 25
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PPUSH
53948: CALL_OW 69
53952: ST_TO_ADDR
// end ;
53953: LD_VAR 0 2
53957: RET
// export function Shuffle ( array ) ; var i , index ; begin
53958: LD_INT 0
53960: PPUSH
53961: PPUSH
53962: PPUSH
// result := [ ] ;
53963: LD_ADDR_VAR 0 2
53967: PUSH
53968: EMPTY
53969: ST_TO_ADDR
// if not array then
53970: LD_VAR 0 1
53974: NOT
53975: IFFALSE 53979
// exit ;
53977: GO 54078
// Randomize ;
53979: CALL_OW 10
// for i = array downto 1 do
53983: LD_ADDR_VAR 0 3
53987: PUSH
53988: DOUBLE
53989: LD_VAR 0 1
53993: INC
53994: ST_TO_ADDR
53995: LD_INT 1
53997: PUSH
53998: FOR_DOWNTO
53999: IFFALSE 54076
// begin index := rand ( 1 , array ) ;
54001: LD_ADDR_VAR 0 4
54005: PUSH
54006: LD_INT 1
54008: PPUSH
54009: LD_VAR 0 1
54013: PPUSH
54014: CALL_OW 12
54018: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54019: LD_ADDR_VAR 0 2
54023: PUSH
54024: LD_VAR 0 2
54028: PPUSH
54029: LD_VAR 0 2
54033: PUSH
54034: LD_INT 1
54036: PLUS
54037: PPUSH
54038: LD_VAR 0 1
54042: PUSH
54043: LD_VAR 0 4
54047: ARRAY
54048: PPUSH
54049: CALL_OW 2
54053: ST_TO_ADDR
// array := Delete ( array , index ) ;
54054: LD_ADDR_VAR 0 1
54058: PUSH
54059: LD_VAR 0 1
54063: PPUSH
54064: LD_VAR 0 4
54068: PPUSH
54069: CALL_OW 3
54073: ST_TO_ADDR
// end ;
54074: GO 53998
54076: POP
54077: POP
// end ;
54078: LD_VAR 0 2
54082: RET
// export function GetBaseMaterials ( base ) ; begin
54083: LD_INT 0
54085: PPUSH
// result := [ 0 , 0 , 0 ] ;
54086: LD_ADDR_VAR 0 2
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: LIST
54104: ST_TO_ADDR
// if not base then
54105: LD_VAR 0 1
54109: NOT
54110: IFFALSE 54114
// exit ;
54112: GO 54163
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54114: LD_ADDR_VAR 0 2
54118: PUSH
54119: LD_VAR 0 1
54123: PPUSH
54124: LD_INT 1
54126: PPUSH
54127: CALL_OW 275
54131: PUSH
54132: LD_VAR 0 1
54136: PPUSH
54137: LD_INT 2
54139: PPUSH
54140: CALL_OW 275
54144: PUSH
54145: LD_VAR 0 1
54149: PPUSH
54150: LD_INT 3
54152: PPUSH
54153: CALL_OW 275
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: LIST
54162: ST_TO_ADDR
// end ;
54163: LD_VAR 0 2
54167: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54168: LD_INT 0
54170: PPUSH
54171: PPUSH
// result := array ;
54172: LD_ADDR_VAR 0 3
54176: PUSH
54177: LD_VAR 0 1
54181: ST_TO_ADDR
// if size >= result then
54182: LD_VAR 0 2
54186: PUSH
54187: LD_VAR 0 3
54191: GREATEREQUAL
54192: IFFALSE 54196
// exit ;
54194: GO 54246
// if size then
54196: LD_VAR 0 2
54200: IFFALSE 54246
// for i := array downto size do
54202: LD_ADDR_VAR 0 4
54206: PUSH
54207: DOUBLE
54208: LD_VAR 0 1
54212: INC
54213: ST_TO_ADDR
54214: LD_VAR 0 2
54218: PUSH
54219: FOR_DOWNTO
54220: IFFALSE 54244
// result := Delete ( result , result ) ;
54222: LD_ADDR_VAR 0 3
54226: PUSH
54227: LD_VAR 0 3
54231: PPUSH
54232: LD_VAR 0 3
54236: PPUSH
54237: CALL_OW 3
54241: ST_TO_ADDR
54242: GO 54219
54244: POP
54245: POP
// end ;
54246: LD_VAR 0 3
54250: RET
// export function ComExit ( unit ) ; var tmp ; begin
54251: LD_INT 0
54253: PPUSH
54254: PPUSH
// if not IsInUnit ( unit ) then
54255: LD_VAR 0 1
54259: PPUSH
54260: CALL_OW 310
54264: NOT
54265: IFFALSE 54269
// exit ;
54267: GO 54329
// tmp := IsInUnit ( unit ) ;
54269: LD_ADDR_VAR 0 3
54273: PUSH
54274: LD_VAR 0 1
54278: PPUSH
54279: CALL_OW 310
54283: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54284: LD_VAR 0 3
54288: PPUSH
54289: CALL_OW 247
54293: PUSH
54294: LD_INT 2
54296: EQUAL
54297: IFFALSE 54310
// ComExitVehicle ( unit ) else
54299: LD_VAR 0 1
54303: PPUSH
54304: CALL_OW 121
54308: GO 54319
// ComExitBuilding ( unit ) ;
54310: LD_VAR 0 1
54314: PPUSH
54315: CALL_OW 122
// result := tmp ;
54319: LD_ADDR_VAR 0 2
54323: PUSH
54324: LD_VAR 0 3
54328: ST_TO_ADDR
// end ;
54329: LD_VAR 0 2
54333: RET
// export function ComExitAll ( units ) ; var i ; begin
54334: LD_INT 0
54336: PPUSH
54337: PPUSH
// if not units then
54338: LD_VAR 0 1
54342: NOT
54343: IFFALSE 54347
// exit ;
54345: GO 54373
// for i in units do
54347: LD_ADDR_VAR 0 3
54351: PUSH
54352: LD_VAR 0 1
54356: PUSH
54357: FOR_IN
54358: IFFALSE 54371
// ComExit ( i ) ;
54360: LD_VAR 0 3
54364: PPUSH
54365: CALL 54251 0 1
54369: GO 54357
54371: POP
54372: POP
// end ;
54373: LD_VAR 0 2
54377: RET
// export function ResetHc ; begin
54378: LD_INT 0
54380: PPUSH
// InitHc ;
54381: CALL_OW 19
// hc_importance := 0 ;
54385: LD_ADDR_OWVAR 32
54389: PUSH
54390: LD_INT 0
54392: ST_TO_ADDR
// end ;
54393: LD_VAR 0 1
54397: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54398: LD_INT 0
54400: PPUSH
54401: PPUSH
54402: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54403: LD_ADDR_VAR 0 6
54407: PUSH
54408: LD_VAR 0 1
54412: PUSH
54413: LD_VAR 0 3
54417: PLUS
54418: PUSH
54419: LD_INT 2
54421: DIV
54422: ST_TO_ADDR
// if _x < 0 then
54423: LD_VAR 0 6
54427: PUSH
54428: LD_INT 0
54430: LESS
54431: IFFALSE 54448
// _x := _x * - 1 ;
54433: LD_ADDR_VAR 0 6
54437: PUSH
54438: LD_VAR 0 6
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: MUL
54447: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54448: LD_ADDR_VAR 0 7
54452: PUSH
54453: LD_VAR 0 2
54457: PUSH
54458: LD_VAR 0 4
54462: PLUS
54463: PUSH
54464: LD_INT 2
54466: DIV
54467: ST_TO_ADDR
// if _y < 0 then
54468: LD_VAR 0 7
54472: PUSH
54473: LD_INT 0
54475: LESS
54476: IFFALSE 54493
// _y := _y * - 1 ;
54478: LD_ADDR_VAR 0 7
54482: PUSH
54483: LD_VAR 0 7
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: MUL
54492: ST_TO_ADDR
// result := [ _x , _y ] ;
54493: LD_ADDR_VAR 0 5
54497: PUSH
54498: LD_VAR 0 6
54502: PUSH
54503: LD_VAR 0 7
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: ST_TO_ADDR
// end ;
54512: LD_VAR 0 5
54516: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54517: LD_INT 0
54519: PPUSH
54520: PPUSH
54521: PPUSH
54522: PPUSH
// task := GetTaskList ( unit ) ;
54523: LD_ADDR_VAR 0 7
54527: PUSH
54528: LD_VAR 0 1
54532: PPUSH
54533: CALL_OW 437
54537: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54538: LD_VAR 0 7
54542: NOT
54543: IFFALSE 54562
54545: PUSH
54546: LD_VAR 0 1
54550: PPUSH
54551: LD_VAR 0 2
54555: PPUSH
54556: CALL_OW 308
54560: NOT
54561: AND
54562: IFFALSE 54566
// exit ;
54564: GO 54684
// if IsInArea ( unit , area ) then
54566: LD_VAR 0 1
54570: PPUSH
54571: LD_VAR 0 2
54575: PPUSH
54576: CALL_OW 308
54580: IFFALSE 54598
// begin ComMoveToArea ( unit , goAway ) ;
54582: LD_VAR 0 1
54586: PPUSH
54587: LD_VAR 0 3
54591: PPUSH
54592: CALL_OW 113
// exit ;
54596: GO 54684
// end ; if task [ 1 ] [ 1 ] <> M then
54598: LD_VAR 0 7
54602: PUSH
54603: LD_INT 1
54605: ARRAY
54606: PUSH
54607: LD_INT 1
54609: ARRAY
54610: PUSH
54611: LD_STRING M
54613: NONEQUAL
54614: IFFALSE 54618
// exit ;
54616: GO 54684
// x := task [ 1 ] [ 2 ] ;
54618: LD_ADDR_VAR 0 5
54622: PUSH
54623: LD_VAR 0 7
54627: PUSH
54628: LD_INT 1
54630: ARRAY
54631: PUSH
54632: LD_INT 2
54634: ARRAY
54635: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54636: LD_ADDR_VAR 0 6
54640: PUSH
54641: LD_VAR 0 7
54645: PUSH
54646: LD_INT 1
54648: ARRAY
54649: PUSH
54650: LD_INT 3
54652: ARRAY
54653: ST_TO_ADDR
// if InArea ( x , y , area ) then
54654: LD_VAR 0 5
54658: PPUSH
54659: LD_VAR 0 6
54663: PPUSH
54664: LD_VAR 0 2
54668: PPUSH
54669: CALL_OW 309
54673: IFFALSE 54684
// ComStop ( unit ) ;
54675: LD_VAR 0 1
54679: PPUSH
54680: CALL_OW 141
// end ;
54684: LD_VAR 0 4
54688: RET
// export function Abs ( value ) ; begin
54689: LD_INT 0
54691: PPUSH
// result := value ;
54692: LD_ADDR_VAR 0 2
54696: PUSH
54697: LD_VAR 0 1
54701: ST_TO_ADDR
// if value < 0 then
54702: LD_VAR 0 1
54706: PUSH
54707: LD_INT 0
54709: LESS
54710: IFFALSE 54727
// result := value * - 1 ;
54712: LD_ADDR_VAR 0 2
54716: PUSH
54717: LD_VAR 0 1
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: MUL
54726: ST_TO_ADDR
// end ;
54727: LD_VAR 0 2
54731: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54732: LD_INT 0
54734: PPUSH
54735: PPUSH
54736: PPUSH
54737: PPUSH
54738: PPUSH
54739: PPUSH
54740: PPUSH
54741: PPUSH
// if not unit or not building then
54742: LD_VAR 0 1
54746: NOT
54747: IFTRUE 54756
54749: PUSH
54750: LD_VAR 0 2
54754: NOT
54755: OR
54756: IFFALSE 54760
// exit ;
54758: GO 54988
// x := GetX ( building ) ;
54760: LD_ADDR_VAR 0 4
54764: PUSH
54765: LD_VAR 0 2
54769: PPUSH
54770: CALL_OW 250
54774: ST_TO_ADDR
// y := GetY ( building ) ;
54775: LD_ADDR_VAR 0 6
54779: PUSH
54780: LD_VAR 0 2
54784: PPUSH
54785: CALL_OW 251
54789: ST_TO_ADDR
// d := GetDir ( building ) ;
54790: LD_ADDR_VAR 0 8
54794: PUSH
54795: LD_VAR 0 2
54799: PPUSH
54800: CALL_OW 254
54804: ST_TO_ADDR
// r := 4 ;
54805: LD_ADDR_VAR 0 9
54809: PUSH
54810: LD_INT 4
54812: ST_TO_ADDR
// for i := 1 to 5 do
54813: LD_ADDR_VAR 0 10
54817: PUSH
54818: DOUBLE
54819: LD_INT 1
54821: DEC
54822: ST_TO_ADDR
54823: LD_INT 5
54825: PUSH
54826: FOR_TO
54827: IFFALSE 54986
// begin _x := ShiftX ( x , d , r + i ) ;
54829: LD_ADDR_VAR 0 5
54833: PUSH
54834: LD_VAR 0 4
54838: PPUSH
54839: LD_VAR 0 8
54843: PPUSH
54844: LD_VAR 0 9
54848: PUSH
54849: LD_VAR 0 10
54853: PLUS
54854: PPUSH
54855: CALL_OW 272
54859: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54860: LD_ADDR_VAR 0 7
54864: PUSH
54865: LD_VAR 0 6
54869: PPUSH
54870: LD_VAR 0 8
54874: PPUSH
54875: LD_VAR 0 9
54879: PUSH
54880: LD_VAR 0 10
54884: PLUS
54885: PPUSH
54886: CALL_OW 273
54890: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54891: LD_VAR 0 5
54895: PPUSH
54896: LD_VAR 0 7
54900: PPUSH
54901: CALL_OW 488
54905: IFFALSE 54940
54907: PUSH
54908: LD_VAR 0 5
54912: PPUSH
54913: LD_VAR 0 7
54917: PPUSH
54918: CALL_OW 428
54922: PPUSH
54923: CALL_OW 247
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: IN
54938: NOT
54939: AND
54940: IFFALSE 54984
// begin ComMoveXY ( unit , _x , _y ) ;
54942: LD_VAR 0 1
54946: PPUSH
54947: LD_VAR 0 5
54951: PPUSH
54952: LD_VAR 0 7
54956: PPUSH
54957: CALL_OW 111
// result := [ _x , _y ] ;
54961: LD_ADDR_VAR 0 3
54965: PUSH
54966: LD_VAR 0 5
54970: PUSH
54971: LD_VAR 0 7
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: ST_TO_ADDR
// exit ;
54980: POP
54981: POP
54982: GO 54988
// end ; end ;
54984: GO 54826
54986: POP
54987: POP
// end ;
54988: LD_VAR 0 3
54992: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54993: LD_INT 0
54995: PPUSH
54996: PPUSH
54997: PPUSH
// result := 0 ;
54998: LD_ADDR_VAR 0 3
55002: PUSH
55003: LD_INT 0
55005: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55006: LD_VAR 0 1
55010: PUSH
55011: LD_INT 0
55013: LESS
55014: IFTRUE 55026
55016: PUSH
55017: LD_VAR 0 1
55021: PUSH
55022: LD_INT 8
55024: GREATER
55025: OR
55026: IFTRUE 55038
55028: PUSH
55029: LD_VAR 0 2
55033: PUSH
55034: LD_INT 0
55036: LESS
55037: OR
55038: IFTRUE 55050
55040: PUSH
55041: LD_VAR 0 2
55045: PUSH
55046: LD_INT 8
55048: GREATER
55049: OR
55050: IFFALSE 55054
// exit ;
55052: GO 55129
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55054: LD_ADDR_VAR 0 4
55058: PUSH
55059: LD_INT 22
55061: PUSH
55062: LD_VAR 0 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PPUSH
55071: CALL_OW 69
55075: PUSH
55076: FOR_IN
55077: IFFALSE 55127
// begin un := UnitShoot ( i ) ;
55079: LD_ADDR_VAR 0 5
55083: PUSH
55084: LD_VAR 0 4
55088: PPUSH
55089: CALL_OW 504
55093: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55094: LD_VAR 0 5
55098: PPUSH
55099: CALL_OW 255
55103: PUSH
55104: LD_VAR 0 1
55108: EQUAL
55109: IFFALSE 55125
// begin result := un ;
55111: LD_ADDR_VAR 0 3
55115: PUSH
55116: LD_VAR 0 5
55120: ST_TO_ADDR
// exit ;
55121: POP
55122: POP
55123: GO 55129
// end ; end ;
55125: GO 55076
55127: POP
55128: POP
// end ;
55129: LD_VAR 0 3
55133: RET
// export function GetCargoBay ( units ) ; begin
55134: LD_INT 0
55136: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55137: LD_ADDR_VAR 0 2
55141: PUSH
55142: LD_VAR 0 1
55146: PPUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 34
55152: PUSH
55153: LD_INT 12
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 34
55162: PUSH
55163: LD_INT 51
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 34
55172: PUSH
55173: LD_INT 32
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 34
55182: PUSH
55183: LD_INT 89
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: PPUSH
55197: CALL_OW 72
55201: ST_TO_ADDR
// end ;
55202: LD_VAR 0 2
55206: RET
// export function Negate ( value ) ; begin
55207: LD_INT 0
55209: PPUSH
// result := not value ;
55210: LD_ADDR_VAR 0 2
55214: PUSH
55215: LD_VAR 0 1
55219: NOT
55220: ST_TO_ADDR
// end ;
55221: LD_VAR 0 2
55225: RET
// export function Inc ( value ) ; begin
55226: LD_INT 0
55228: PPUSH
// result := value + 1 ;
55229: LD_ADDR_VAR 0 2
55233: PUSH
55234: LD_VAR 0 1
55238: PUSH
55239: LD_INT 1
55241: PLUS
55242: ST_TO_ADDR
// end ;
55243: LD_VAR 0 2
55247: RET
// export function Dec ( value ) ; begin
55248: LD_INT 0
55250: PPUSH
// result := value - 1 ;
55251: LD_ADDR_VAR 0 2
55255: PUSH
55256: LD_VAR 0 1
55260: PUSH
55261: LD_INT 1
55263: MINUS
55264: ST_TO_ADDR
// end ;
55265: LD_VAR 0 2
55269: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55270: LD_INT 0
55272: PPUSH
55273: PPUSH
55274: PPUSH
55275: PPUSH
55276: PPUSH
55277: PPUSH
55278: PPUSH
55279: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55280: LD_VAR 0 1
55284: PPUSH
55285: LD_VAR 0 2
55289: PPUSH
55290: CALL_OW 488
55294: NOT
55295: IFTRUE 55314
55297: PUSH
55298: LD_VAR 0 3
55302: PPUSH
55303: LD_VAR 0 4
55307: PPUSH
55308: CALL_OW 488
55312: NOT
55313: OR
55314: IFFALSE 55327
// begin result := - 1 ;
55316: LD_ADDR_VAR 0 5
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: ST_TO_ADDR
// exit ;
55325: GO 55562
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55327: LD_ADDR_VAR 0 12
55331: PUSH
55332: LD_VAR 0 1
55336: PPUSH
55337: LD_VAR 0 2
55341: PPUSH
55342: LD_VAR 0 3
55346: PPUSH
55347: LD_VAR 0 4
55351: PPUSH
55352: CALL 54398 0 4
55356: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55357: LD_ADDR_VAR 0 11
55361: PUSH
55362: LD_VAR 0 1
55366: PPUSH
55367: LD_VAR 0 2
55371: PPUSH
55372: LD_VAR 0 12
55376: PUSH
55377: LD_INT 1
55379: ARRAY
55380: PPUSH
55381: LD_VAR 0 12
55385: PUSH
55386: LD_INT 2
55388: ARRAY
55389: PPUSH
55390: CALL_OW 298
55394: ST_TO_ADDR
// distance := 9999 ;
55395: LD_ADDR_VAR 0 10
55399: PUSH
55400: LD_INT 9999
55402: ST_TO_ADDR
// for i := 0 to 5 do
55403: LD_ADDR_VAR 0 6
55407: PUSH
55408: DOUBLE
55409: LD_INT 0
55411: DEC
55412: ST_TO_ADDR
55413: LD_INT 5
55415: PUSH
55416: FOR_TO
55417: IFFALSE 55560
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55419: LD_ADDR_VAR 0 7
55423: PUSH
55424: LD_VAR 0 1
55428: PPUSH
55429: LD_VAR 0 6
55433: PPUSH
55434: LD_VAR 0 11
55438: PPUSH
55439: CALL_OW 272
55443: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55444: LD_ADDR_VAR 0 8
55448: PUSH
55449: LD_VAR 0 2
55453: PPUSH
55454: LD_VAR 0 6
55458: PPUSH
55459: LD_VAR 0 11
55463: PPUSH
55464: CALL_OW 273
55468: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55469: LD_VAR 0 7
55473: PPUSH
55474: LD_VAR 0 8
55478: PPUSH
55479: CALL_OW 488
55483: NOT
55484: IFFALSE 55488
// continue ;
55486: GO 55416
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55488: LD_ADDR_VAR 0 9
55492: PUSH
55493: LD_VAR 0 12
55497: PUSH
55498: LD_INT 1
55500: ARRAY
55501: PPUSH
55502: LD_VAR 0 12
55506: PUSH
55507: LD_INT 2
55509: ARRAY
55510: PPUSH
55511: LD_VAR 0 7
55515: PPUSH
55516: LD_VAR 0 8
55520: PPUSH
55521: CALL_OW 298
55525: ST_TO_ADDR
// if tmp < distance then
55526: LD_VAR 0 9
55530: PUSH
55531: LD_VAR 0 10
55535: LESS
55536: IFFALSE 55558
// begin result := i ;
55538: LD_ADDR_VAR 0 5
55542: PUSH
55543: LD_VAR 0 6
55547: ST_TO_ADDR
// distance := tmp ;
55548: LD_ADDR_VAR 0 10
55552: PUSH
55553: LD_VAR 0 9
55557: ST_TO_ADDR
// end ; end ;
55558: GO 55416
55560: POP
55561: POP
// end ;
55562: LD_VAR 0 5
55566: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55567: LD_INT 0
55569: PPUSH
55570: PPUSH
// if not driver or not IsInUnit ( driver ) then
55571: LD_VAR 0 1
55575: NOT
55576: IFTRUE 55590
55578: PUSH
55579: LD_VAR 0 1
55583: PPUSH
55584: CALL_OW 310
55588: NOT
55589: OR
55590: IFFALSE 55594
// exit ;
55592: GO 55684
// vehicle := IsInUnit ( driver ) ;
55594: LD_ADDR_VAR 0 3
55598: PUSH
55599: LD_VAR 0 1
55603: PPUSH
55604: CALL_OW 310
55608: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55609: LD_VAR 0 1
55613: PPUSH
55614: LD_STRING \
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: PUSH
55644: LD_STRING E
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_VAR 0 3
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PPUSH
55680: CALL_OW 446
// end ;
55684: LD_VAR 0 2
55688: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55689: LD_INT 0
55691: PPUSH
55692: PPUSH
// if not driver or not IsInUnit ( driver ) then
55693: LD_VAR 0 1
55697: NOT
55698: IFTRUE 55712
55700: PUSH
55701: LD_VAR 0 1
55705: PPUSH
55706: CALL_OW 310
55710: NOT
55711: OR
55712: IFFALSE 55716
// exit ;
55714: GO 55806
// vehicle := IsInUnit ( driver ) ;
55716: LD_ADDR_VAR 0 3
55720: PUSH
55721: LD_VAR 0 1
55725: PPUSH
55726: CALL_OW 310
55730: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55731: LD_VAR 0 1
55735: PPUSH
55736: LD_STRING \
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: PUSH
55766: LD_STRING E
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_VAR 0 3
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PPUSH
55802: CALL_OW 447
// end ;
55806: LD_VAR 0 2
55810: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55811: LD_INT 0
55813: PPUSH
55814: PPUSH
55815: PPUSH
// tmp := [ ] ;
55816: LD_ADDR_VAR 0 5
55820: PUSH
55821: EMPTY
55822: ST_TO_ADDR
// for i in units do
55823: LD_ADDR_VAR 0 4
55827: PUSH
55828: LD_VAR 0 1
55832: PUSH
55833: FOR_IN
55834: IFFALSE 55872
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55836: LD_ADDR_VAR 0 5
55840: PUSH
55841: LD_VAR 0 5
55845: PPUSH
55846: LD_VAR 0 5
55850: PUSH
55851: LD_INT 1
55853: PLUS
55854: PPUSH
55855: LD_VAR 0 4
55859: PPUSH
55860: CALL_OW 256
55864: PPUSH
55865: CALL_OW 2
55869: ST_TO_ADDR
55870: GO 55833
55872: POP
55873: POP
// if not tmp then
55874: LD_VAR 0 5
55878: NOT
55879: IFFALSE 55883
// exit ;
55881: GO 55931
// if asc then
55883: LD_VAR 0 2
55887: IFFALSE 55911
// result := SortListByListAsc ( units , tmp ) else
55889: LD_ADDR_VAR 0 3
55893: PUSH
55894: LD_VAR 0 1
55898: PPUSH
55899: LD_VAR 0 5
55903: PPUSH
55904: CALL_OW 76
55908: ST_TO_ADDR
55909: GO 55931
// result := SortListByListDesc ( units , tmp ) ;
55911: LD_ADDR_VAR 0 3
55915: PUSH
55916: LD_VAR 0 1
55920: PPUSH
55921: LD_VAR 0 5
55925: PPUSH
55926: CALL_OW 77
55930: ST_TO_ADDR
// end ;
55931: LD_VAR 0 3
55935: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55936: LD_INT 0
55938: PPUSH
55939: PPUSH
// task := GetTaskList ( mech ) ;
55940: LD_ADDR_VAR 0 4
55944: PUSH
55945: LD_VAR 0 1
55949: PPUSH
55950: CALL_OW 437
55954: ST_TO_ADDR
// if not task then
55955: LD_VAR 0 4
55959: NOT
55960: IFFALSE 55964
// exit ;
55962: GO 56008
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55964: LD_ADDR_VAR 0 3
55968: PUSH
55969: LD_VAR 0 4
55973: PUSH
55974: LD_INT 1
55976: ARRAY
55977: PUSH
55978: LD_INT 1
55980: ARRAY
55981: PUSH
55982: LD_STRING r
55984: EQUAL
55985: IFFALSE 56007
55987: PUSH
55988: LD_VAR 0 4
55992: PUSH
55993: LD_INT 1
55995: ARRAY
55996: PUSH
55997: LD_INT 4
55999: ARRAY
56000: PUSH
56001: LD_VAR 0 2
56005: EQUAL
56006: AND
56007: ST_TO_ADDR
// end ;
56008: LD_VAR 0 3
56012: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56013: LD_INT 0
56015: PPUSH
// SetDir ( unit , d ) ;
56016: LD_VAR 0 1
56020: PPUSH
56021: LD_VAR 0 4
56025: PPUSH
56026: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56030: LD_ADDR_VAR 0 6
56034: PUSH
56035: LD_VAR 0 1
56039: PPUSH
56040: LD_VAR 0 2
56044: PPUSH
56045: LD_VAR 0 3
56049: PPUSH
56050: LD_VAR 0 5
56054: PPUSH
56055: CALL_OW 48
56059: ST_TO_ADDR
// end ;
56060: LD_VAR 0 6
56064: RET
// export function ToNaturalNumber ( number ) ; begin
56065: LD_INT 0
56067: PPUSH
// result := number div 1 ;
56068: LD_ADDR_VAR 0 2
56072: PUSH
56073: LD_VAR 0 1
56077: PUSH
56078: LD_INT 1
56080: DIV
56081: ST_TO_ADDR
// if number < 0 then
56082: LD_VAR 0 1
56086: PUSH
56087: LD_INT 0
56089: LESS
56090: IFFALSE 56100
// result := 0 ;
56092: LD_ADDR_VAR 0 2
56096: PUSH
56097: LD_INT 0
56099: ST_TO_ADDR
// end ;
56100: LD_VAR 0 2
56104: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56105: LD_INT 0
56107: PPUSH
56108: PPUSH
56109: PPUSH
// if not buildings then
56110: LD_VAR 0 1
56114: NOT
56115: IFFALSE 56119
// exit ;
56117: GO 56234
// tmp := [ ] ;
56119: LD_ADDR_VAR 0 5
56123: PUSH
56124: EMPTY
56125: ST_TO_ADDR
// for b in buildings do
56126: LD_ADDR_VAR 0 4
56130: PUSH
56131: LD_VAR 0 1
56135: PUSH
56136: FOR_IN
56137: IFFALSE 56175
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56139: LD_ADDR_VAR 0 5
56143: PUSH
56144: LD_VAR 0 5
56148: PPUSH
56149: LD_VAR 0 5
56153: PUSH
56154: LD_INT 1
56156: PLUS
56157: PPUSH
56158: LD_VAR 0 4
56162: PPUSH
56163: CALL_OW 266
56167: PPUSH
56168: CALL_OW 1
56172: ST_TO_ADDR
56173: GO 56136
56175: POP
56176: POP
// if not tmp then
56177: LD_VAR 0 5
56181: NOT
56182: IFFALSE 56186
// exit ;
56184: GO 56234
// if asc then
56186: LD_VAR 0 2
56190: IFFALSE 56214
// result := SortListByListAsc ( buildings , tmp ) else
56192: LD_ADDR_VAR 0 3
56196: PUSH
56197: LD_VAR 0 1
56201: PPUSH
56202: LD_VAR 0 5
56206: PPUSH
56207: CALL_OW 76
56211: ST_TO_ADDR
56212: GO 56234
// result := SortListByListDesc ( buildings , tmp ) ;
56214: LD_ADDR_VAR 0 3
56218: PUSH
56219: LD_VAR 0 1
56223: PPUSH
56224: LD_VAR 0 5
56228: PPUSH
56229: CALL_OW 77
56233: ST_TO_ADDR
// end ;
56234: LD_VAR 0 3
56238: RET
// export function SortByClass ( units , class ) ; var un ; begin
56239: LD_INT 0
56241: PPUSH
56242: PPUSH
// if not units or not class then
56243: LD_VAR 0 1
56247: NOT
56248: IFTRUE 56257
56250: PUSH
56251: LD_VAR 0 2
56255: NOT
56256: OR
56257: IFFALSE 56261
// exit ;
56259: GO 56356
// result := [ ] ;
56261: LD_ADDR_VAR 0 3
56265: PUSH
56266: EMPTY
56267: ST_TO_ADDR
// for un in units do
56268: LD_ADDR_VAR 0 4
56272: PUSH
56273: LD_VAR 0 1
56277: PUSH
56278: FOR_IN
56279: IFFALSE 56354
// if GetClass ( un ) = class then
56281: LD_VAR 0 4
56285: PPUSH
56286: CALL_OW 257
56290: PUSH
56291: LD_VAR 0 2
56295: EQUAL
56296: IFFALSE 56323
// result := Insert ( result , 1 , un ) else
56298: LD_ADDR_VAR 0 3
56302: PUSH
56303: LD_VAR 0 3
56307: PPUSH
56308: LD_INT 1
56310: PPUSH
56311: LD_VAR 0 4
56315: PPUSH
56316: CALL_OW 2
56320: ST_TO_ADDR
56321: GO 56352
// result := Replace ( result , result + 1 , un ) ;
56323: LD_ADDR_VAR 0 3
56327: PUSH
56328: LD_VAR 0 3
56332: PPUSH
56333: LD_VAR 0 3
56337: PUSH
56338: LD_INT 1
56340: PLUS
56341: PPUSH
56342: LD_VAR 0 4
56346: PPUSH
56347: CALL_OW 1
56351: ST_TO_ADDR
56352: GO 56278
56354: POP
56355: POP
// end ;
56356: LD_VAR 0 3
56360: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56361: LD_INT 0
56363: PPUSH
56364: PPUSH
56365: PPUSH
56366: PPUSH
56367: PPUSH
56368: PPUSH
56369: PPUSH
// result := [ ] ;
56370: LD_ADDR_VAR 0 4
56374: PUSH
56375: EMPTY
56376: ST_TO_ADDR
// if x - r < 0 then
56377: LD_VAR 0 1
56381: PUSH
56382: LD_VAR 0 3
56386: MINUS
56387: PUSH
56388: LD_INT 0
56390: LESS
56391: IFFALSE 56403
// min_x := 0 else
56393: LD_ADDR_VAR 0 8
56397: PUSH
56398: LD_INT 0
56400: ST_TO_ADDR
56401: GO 56419
// min_x := x - r ;
56403: LD_ADDR_VAR 0 8
56407: PUSH
56408: LD_VAR 0 1
56412: PUSH
56413: LD_VAR 0 3
56417: MINUS
56418: ST_TO_ADDR
// if y - r < 0 then
56419: LD_VAR 0 2
56423: PUSH
56424: LD_VAR 0 3
56428: MINUS
56429: PUSH
56430: LD_INT 0
56432: LESS
56433: IFFALSE 56445
// min_y := 0 else
56435: LD_ADDR_VAR 0 7
56439: PUSH
56440: LD_INT 0
56442: ST_TO_ADDR
56443: GO 56461
// min_y := y - r ;
56445: LD_ADDR_VAR 0 7
56449: PUSH
56450: LD_VAR 0 2
56454: PUSH
56455: LD_VAR 0 3
56459: MINUS
56460: ST_TO_ADDR
// max_x := x + r ;
56461: LD_ADDR_VAR 0 9
56465: PUSH
56466: LD_VAR 0 1
56470: PUSH
56471: LD_VAR 0 3
56475: PLUS
56476: ST_TO_ADDR
// max_y := y + r ;
56477: LD_ADDR_VAR 0 10
56481: PUSH
56482: LD_VAR 0 2
56486: PUSH
56487: LD_VAR 0 3
56491: PLUS
56492: ST_TO_ADDR
// for _x = min_x to max_x do
56493: LD_ADDR_VAR 0 5
56497: PUSH
56498: DOUBLE
56499: LD_VAR 0 8
56503: DEC
56504: ST_TO_ADDR
56505: LD_VAR 0 9
56509: PUSH
56510: FOR_TO
56511: IFFALSE 56612
// for _y = min_y to max_y do
56513: LD_ADDR_VAR 0 6
56517: PUSH
56518: DOUBLE
56519: LD_VAR 0 7
56523: DEC
56524: ST_TO_ADDR
56525: LD_VAR 0 10
56529: PUSH
56530: FOR_TO
56531: IFFALSE 56608
// begin if not ValidHex ( _x , _y ) then
56533: LD_VAR 0 5
56537: PPUSH
56538: LD_VAR 0 6
56542: PPUSH
56543: CALL_OW 488
56547: NOT
56548: IFFALSE 56552
// continue ;
56550: GO 56530
// if GetResourceTypeXY ( _x , _y ) then
56552: LD_VAR 0 5
56556: PPUSH
56557: LD_VAR 0 6
56561: PPUSH
56562: CALL_OW 283
56566: IFFALSE 56606
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56568: LD_ADDR_VAR 0 4
56572: PUSH
56573: LD_VAR 0 4
56577: PPUSH
56578: LD_VAR 0 4
56582: PUSH
56583: LD_INT 1
56585: PLUS
56586: PPUSH
56587: LD_VAR 0 5
56591: PUSH
56592: LD_VAR 0 6
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PPUSH
56601: CALL_OW 1
56605: ST_TO_ADDR
// end ;
56606: GO 56530
56608: POP
56609: POP
56610: GO 56510
56612: POP
56613: POP
// end ;
56614: LD_VAR 0 4
56618: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56619: LD_INT 0
56621: PPUSH
56622: PPUSH
56623: PPUSH
56624: PPUSH
56625: PPUSH
56626: PPUSH
56627: PPUSH
56628: PPUSH
// if not units then
56629: LD_VAR 0 1
56633: NOT
56634: IFFALSE 56638
// exit ;
56636: GO 57170
// result := UnitFilter ( units , [ f_ok ] ) ;
56638: LD_ADDR_VAR 0 3
56642: PUSH
56643: LD_VAR 0 1
56647: PPUSH
56648: LD_INT 50
56650: PUSH
56651: EMPTY
56652: LIST
56653: PPUSH
56654: CALL_OW 72
56658: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56659: LD_ADDR_VAR 0 8
56663: PUSH
56664: LD_VAR 0 1
56668: PUSH
56669: LD_INT 1
56671: ARRAY
56672: PPUSH
56673: CALL_OW 255
56677: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56678: LD_ADDR_VAR 0 10
56682: PUSH
56683: LD_INT 29
56685: PUSH
56686: LD_INT 91
56688: PUSH
56689: LD_INT 49
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: LIST
56696: ST_TO_ADDR
// if not result then
56697: LD_VAR 0 3
56701: NOT
56702: IFFALSE 56706
// exit ;
56704: GO 57170
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56706: LD_ADDR_VAR 0 5
56710: PUSH
56711: LD_INT 81
56713: PUSH
56714: LD_VAR 0 8
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PPUSH
56723: CALL_OW 69
56727: ST_TO_ADDR
// for i in result do
56728: LD_ADDR_VAR 0 4
56732: PUSH
56733: LD_VAR 0 3
56737: PUSH
56738: FOR_IN
56739: IFFALSE 57168
// begin tag := GetTag ( i ) + 1 ;
56741: LD_ADDR_VAR 0 9
56745: PUSH
56746: LD_VAR 0 4
56750: PPUSH
56751: CALL_OW 110
56755: PUSH
56756: LD_INT 1
56758: PLUS
56759: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56760: LD_ADDR_VAR 0 7
56764: PUSH
56765: LD_VAR 0 4
56769: PPUSH
56770: CALL_OW 250
56774: PPUSH
56775: LD_VAR 0 4
56779: PPUSH
56780: CALL_OW 251
56784: PPUSH
56785: LD_INT 4
56787: PPUSH
56788: CALL 56361 0 3
56792: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56793: LD_VAR 0 4
56797: PPUSH
56798: CALL_OW 247
56802: PUSH
56803: LD_INT 2
56805: EQUAL
56806: IFFALSE 56818
56808: PUSH
56809: LD_VAR 0 7
56813: PUSH
56814: LD_INT 2
56816: GREATER
56817: AND
56818: IFFALSE 56838
56820: PUSH
56821: LD_VAR 0 4
56825: PPUSH
56826: CALL_OW 264
56830: PUSH
56831: LD_VAR 0 10
56835: IN
56836: NOT
56837: AND
56838: IFFALSE 56877
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56840: LD_VAR 0 4
56844: PPUSH
56845: LD_VAR 0 7
56849: PUSH
56850: LD_INT 1
56852: ARRAY
56853: PUSH
56854: LD_INT 1
56856: ARRAY
56857: PPUSH
56858: LD_VAR 0 7
56862: PUSH
56863: LD_INT 1
56865: ARRAY
56866: PUSH
56867: LD_INT 2
56869: ARRAY
56870: PPUSH
56871: CALL_OW 116
56875: GO 57166
// if path > tag then
56877: LD_VAR 0 2
56881: PUSH
56882: LD_VAR 0 9
56886: GREATER
56887: IFFALSE 57095
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56889: LD_ADDR_VAR 0 6
56893: PUSH
56894: LD_VAR 0 5
56898: PPUSH
56899: LD_INT 91
56901: PUSH
56902: LD_VAR 0 4
56906: PUSH
56907: LD_INT 8
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: PPUSH
56915: CALL_OW 72
56919: ST_TO_ADDR
// if nearEnemy then
56920: LD_VAR 0 6
56924: IFFALSE 56993
// begin if GetWeapon ( i ) = ru_time_lapser then
56926: LD_VAR 0 4
56930: PPUSH
56931: CALL_OW 264
56935: PUSH
56936: LD_INT 49
56938: EQUAL
56939: IFFALSE 56967
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56941: LD_VAR 0 4
56945: PPUSH
56946: LD_VAR 0 6
56950: PPUSH
56951: LD_VAR 0 4
56955: PPUSH
56956: CALL_OW 74
56960: PPUSH
56961: CALL_OW 112
56965: GO 56991
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56967: LD_VAR 0 4
56971: PPUSH
56972: LD_VAR 0 6
56976: PPUSH
56977: LD_VAR 0 4
56981: PPUSH
56982: CALL_OW 74
56986: PPUSH
56987: CALL 58251 0 2
// end else
56991: GO 57093
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56993: LD_VAR 0 4
56997: PPUSH
56998: LD_VAR 0 2
57002: PUSH
57003: LD_VAR 0 9
57007: ARRAY
57008: PUSH
57009: LD_INT 1
57011: ARRAY
57012: PPUSH
57013: LD_VAR 0 2
57017: PUSH
57018: LD_VAR 0 9
57022: ARRAY
57023: PUSH
57024: LD_INT 2
57026: ARRAY
57027: PPUSH
57028: CALL_OW 297
57032: PUSH
57033: LD_INT 6
57035: GREATER
57036: IFFALSE 57079
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57038: LD_VAR 0 4
57042: PPUSH
57043: LD_VAR 0 2
57047: PUSH
57048: LD_VAR 0 9
57052: ARRAY
57053: PUSH
57054: LD_INT 1
57056: ARRAY
57057: PPUSH
57058: LD_VAR 0 2
57062: PUSH
57063: LD_VAR 0 9
57067: ARRAY
57068: PUSH
57069: LD_INT 2
57071: ARRAY
57072: PPUSH
57073: CALL_OW 114
57077: GO 57093
// SetTag ( i , tag ) ;
57079: LD_VAR 0 4
57083: PPUSH
57084: LD_VAR 0 9
57088: PPUSH
57089: CALL_OW 109
// end else
57093: GO 57166
// if enemy then
57095: LD_VAR 0 5
57099: IFFALSE 57166
// begin if GetWeapon ( i ) = ru_time_lapser then
57101: LD_VAR 0 4
57105: PPUSH
57106: CALL_OW 264
57110: PUSH
57111: LD_INT 49
57113: EQUAL
57114: IFFALSE 57142
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57116: LD_VAR 0 4
57120: PPUSH
57121: LD_VAR 0 5
57125: PPUSH
57126: LD_VAR 0 4
57130: PPUSH
57131: CALL_OW 74
57135: PPUSH
57136: CALL_OW 112
57140: GO 57166
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57142: LD_VAR 0 4
57146: PPUSH
57147: LD_VAR 0 5
57151: PPUSH
57152: LD_VAR 0 4
57156: PPUSH
57157: CALL_OW 74
57161: PPUSH
57162: CALL 58251 0 2
// end ; end ;
57166: GO 56738
57168: POP
57169: POP
// end ;
57170: LD_VAR 0 3
57174: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57175: LD_INT 0
57177: PPUSH
57178: PPUSH
57179: PPUSH
// if not unit or IsInUnit ( unit ) then
57180: LD_VAR 0 1
57184: NOT
57185: IFTRUE 57198
57187: PUSH
57188: LD_VAR 0 1
57192: PPUSH
57193: CALL_OW 310
57197: OR
57198: IFFALSE 57202
// exit ;
57200: GO 57293
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57202: LD_ADDR_VAR 0 4
57206: PUSH
57207: LD_VAR 0 1
57211: PPUSH
57212: CALL_OW 250
57216: PPUSH
57217: LD_VAR 0 2
57221: PPUSH
57222: LD_INT 1
57224: PPUSH
57225: CALL_OW 272
57229: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57230: LD_ADDR_VAR 0 5
57234: PUSH
57235: LD_VAR 0 1
57239: PPUSH
57240: CALL_OW 251
57244: PPUSH
57245: LD_VAR 0 2
57249: PPUSH
57250: LD_INT 1
57252: PPUSH
57253: CALL_OW 273
57257: ST_TO_ADDR
// if ValidHex ( x , y ) then
57258: LD_VAR 0 4
57262: PPUSH
57263: LD_VAR 0 5
57267: PPUSH
57268: CALL_OW 488
57272: IFFALSE 57293
// ComTurnXY ( unit , x , y ) ;
57274: LD_VAR 0 1
57278: PPUSH
57279: LD_VAR 0 4
57283: PPUSH
57284: LD_VAR 0 5
57288: PPUSH
57289: CALL_OW 118
// end ;
57293: LD_VAR 0 3
57297: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57298: LD_INT 0
57300: PPUSH
57301: PPUSH
// result := false ;
57302: LD_ADDR_VAR 0 3
57306: PUSH
57307: LD_INT 0
57309: ST_TO_ADDR
// if not units then
57310: LD_VAR 0 2
57314: NOT
57315: IFFALSE 57319
// exit ;
57317: GO 57364
// for i in units do
57319: LD_ADDR_VAR 0 4
57323: PUSH
57324: LD_VAR 0 2
57328: PUSH
57329: FOR_IN
57330: IFFALSE 57362
// if See ( side , i ) then
57332: LD_VAR 0 1
57336: PPUSH
57337: LD_VAR 0 4
57341: PPUSH
57342: CALL_OW 292
57346: IFFALSE 57360
// begin result := true ;
57348: LD_ADDR_VAR 0 3
57352: PUSH
57353: LD_INT 1
57355: ST_TO_ADDR
// exit ;
57356: POP
57357: POP
57358: GO 57364
// end ;
57360: GO 57329
57362: POP
57363: POP
// end ;
57364: LD_VAR 0 3
57368: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57369: LD_INT 0
57371: PPUSH
57372: PPUSH
57373: PPUSH
57374: PPUSH
// if not unit or not points then
57375: LD_VAR 0 1
57379: NOT
57380: IFTRUE 57389
57382: PUSH
57383: LD_VAR 0 2
57387: NOT
57388: OR
57389: IFFALSE 57393
// exit ;
57391: GO 57483
// dist := 99999 ;
57393: LD_ADDR_VAR 0 5
57397: PUSH
57398: LD_INT 99999
57400: ST_TO_ADDR
// for i in points do
57401: LD_ADDR_VAR 0 4
57405: PUSH
57406: LD_VAR 0 2
57410: PUSH
57411: FOR_IN
57412: IFFALSE 57481
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57414: LD_ADDR_VAR 0 6
57418: PUSH
57419: LD_VAR 0 1
57423: PPUSH
57424: LD_VAR 0 4
57428: PUSH
57429: LD_INT 1
57431: ARRAY
57432: PPUSH
57433: LD_VAR 0 4
57437: PUSH
57438: LD_INT 2
57440: ARRAY
57441: PPUSH
57442: CALL_OW 297
57446: ST_TO_ADDR
// if tmpDist < dist then
57447: LD_VAR 0 6
57451: PUSH
57452: LD_VAR 0 5
57456: LESS
57457: IFFALSE 57479
// begin result := i ;
57459: LD_ADDR_VAR 0 3
57463: PUSH
57464: LD_VAR 0 4
57468: ST_TO_ADDR
// dist := tmpDist ;
57469: LD_ADDR_VAR 0 5
57473: PUSH
57474: LD_VAR 0 6
57478: ST_TO_ADDR
// end ; end ;
57479: GO 57411
57481: POP
57482: POP
// end ;
57483: LD_VAR 0 3
57487: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57488: LD_INT 0
57490: PPUSH
// uc_side := side ;
57491: LD_ADDR_OWVAR 20
57495: PUSH
57496: LD_VAR 0 1
57500: ST_TO_ADDR
// uc_nation := 3 ;
57501: LD_ADDR_OWVAR 21
57505: PUSH
57506: LD_INT 3
57508: ST_TO_ADDR
// vc_chassis := 25 ;
57509: LD_ADDR_OWVAR 37
57513: PUSH
57514: LD_INT 25
57516: ST_TO_ADDR
// vc_engine := engine_siberite ;
57517: LD_ADDR_OWVAR 39
57521: PUSH
57522: LD_INT 3
57524: ST_TO_ADDR
// vc_control := control_computer ;
57525: LD_ADDR_OWVAR 38
57529: PUSH
57530: LD_INT 3
57532: ST_TO_ADDR
// vc_weapon := 59 ;
57533: LD_ADDR_OWVAR 40
57537: PUSH
57538: LD_INT 59
57540: ST_TO_ADDR
// result := CreateVehicle ;
57541: LD_ADDR_VAR 0 5
57545: PUSH
57546: CALL_OW 45
57550: ST_TO_ADDR
// SetDir ( result , d ) ;
57551: LD_VAR 0 5
57555: PPUSH
57556: LD_VAR 0 4
57560: PPUSH
57561: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57565: LD_VAR 0 5
57569: PPUSH
57570: LD_VAR 0 2
57574: PPUSH
57575: LD_VAR 0 3
57579: PPUSH
57580: LD_INT 0
57582: PPUSH
57583: CALL_OW 48
// end ;
57587: LD_VAR 0 5
57591: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57592: LD_INT 0
57594: PPUSH
57595: PPUSH
57596: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57597: LD_ADDR_VAR 0 2
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57620: LD_VAR 0 1
57624: NOT
57625: IFTRUE 57658
57627: PUSH
57628: LD_VAR 0 1
57632: PPUSH
57633: CALL_OW 264
57637: PUSH
57638: LD_INT 12
57640: PUSH
57641: LD_INT 51
57643: PUSH
57644: LD_INT 32
57646: PUSH
57647: LD_INT 89
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: IN
57656: NOT
57657: OR
57658: IFFALSE 57662
// exit ;
57660: GO 57760
// for i := 1 to 3 do
57662: LD_ADDR_VAR 0 3
57666: PUSH
57667: DOUBLE
57668: LD_INT 1
57670: DEC
57671: ST_TO_ADDR
57672: LD_INT 3
57674: PUSH
57675: FOR_TO
57676: IFFALSE 57758
// begin tmp := GetCargo ( cargo , i ) ;
57678: LD_ADDR_VAR 0 4
57682: PUSH
57683: LD_VAR 0 1
57687: PPUSH
57688: LD_VAR 0 3
57692: PPUSH
57693: CALL_OW 289
57697: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57698: LD_ADDR_VAR 0 2
57702: PUSH
57703: LD_VAR 0 2
57707: PPUSH
57708: LD_VAR 0 3
57712: PPUSH
57713: LD_VAR 0 4
57717: PPUSH
57718: CALL_OW 1
57722: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57723: LD_ADDR_VAR 0 2
57727: PUSH
57728: LD_VAR 0 2
57732: PPUSH
57733: LD_INT 4
57735: PPUSH
57736: LD_VAR 0 2
57740: PUSH
57741: LD_INT 4
57743: ARRAY
57744: PUSH
57745: LD_VAR 0 4
57749: PLUS
57750: PPUSH
57751: CALL_OW 1
57755: ST_TO_ADDR
// end ;
57756: GO 57675
57758: POP
57759: POP
// end ;
57760: LD_VAR 0 2
57764: RET
// export function Length ( array ) ; begin
57765: LD_INT 0
57767: PPUSH
// result := array + 0 ;
57768: LD_ADDR_VAR 0 2
57772: PUSH
57773: LD_VAR 0 1
57777: PUSH
57778: LD_INT 0
57780: PLUS
57781: ST_TO_ADDR
// end ;
57782: LD_VAR 0 2
57786: RET
// export function PrepareArray ( array ) ; begin
57787: LD_INT 0
57789: PPUSH
// result := array diff 0 ;
57790: LD_ADDR_VAR 0 2
57794: PUSH
57795: LD_VAR 0 1
57799: PUSH
57800: LD_INT 0
57802: DIFF
57803: ST_TO_ADDR
// if not result [ 1 ] then
57804: LD_VAR 0 2
57808: PUSH
57809: LD_INT 1
57811: ARRAY
57812: NOT
57813: IFFALSE 57833
// result := Delete ( result , 1 ) ;
57815: LD_ADDR_VAR 0 2
57819: PUSH
57820: LD_VAR 0 2
57824: PPUSH
57825: LD_INT 1
57827: PPUSH
57828: CALL_OW 3
57832: ST_TO_ADDR
// end ;
57833: LD_VAR 0 2
57837: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57838: LD_INT 0
57840: PPUSH
57841: PPUSH
57842: PPUSH
57843: PPUSH
// sibRocketRange := 25 ;
57844: LD_ADDR_VAR 0 6
57848: PUSH
57849: LD_INT 25
57851: ST_TO_ADDR
// result := false ;
57852: LD_ADDR_VAR 0 4
57856: PUSH
57857: LD_INT 0
57859: ST_TO_ADDR
// for i := 0 to 5 do
57860: LD_ADDR_VAR 0 5
57864: PUSH
57865: DOUBLE
57866: LD_INT 0
57868: DEC
57869: ST_TO_ADDR
57870: LD_INT 5
57872: PUSH
57873: FOR_TO
57874: IFFALSE 57941
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57876: LD_VAR 0 1
57880: PPUSH
57881: LD_VAR 0 5
57885: PPUSH
57886: LD_VAR 0 6
57890: PPUSH
57891: CALL_OW 272
57895: PPUSH
57896: LD_VAR 0 2
57900: PPUSH
57901: LD_VAR 0 5
57905: PPUSH
57906: LD_VAR 0 6
57910: PPUSH
57911: CALL_OW 273
57915: PPUSH
57916: LD_VAR 0 3
57920: PPUSH
57921: CALL_OW 309
57925: IFFALSE 57939
// begin result := true ;
57927: LD_ADDR_VAR 0 4
57931: PUSH
57932: LD_INT 1
57934: ST_TO_ADDR
// exit ;
57935: POP
57936: POP
57937: GO 57943
// end ;
57939: GO 57873
57941: POP
57942: POP
// end ;
57943: LD_VAR 0 4
57947: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57948: LD_INT 0
57950: PPUSH
57951: PPUSH
57952: PPUSH
// if btype = b_depot then
57953: LD_VAR 0 2
57957: PUSH
57958: LD_INT 0
57960: EQUAL
57961: IFFALSE 57973
// begin result := true ;
57963: LD_ADDR_VAR 0 3
57967: PUSH
57968: LD_INT 1
57970: ST_TO_ADDR
// exit ;
57971: GO 58093
// end ; pom := GetBase ( depot ) ;
57973: LD_ADDR_VAR 0 4
57977: PUSH
57978: LD_VAR 0 1
57982: PPUSH
57983: CALL_OW 274
57987: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57988: LD_ADDR_VAR 0 5
57992: PUSH
57993: LD_VAR 0 2
57997: PPUSH
57998: LD_VAR 0 1
58002: PPUSH
58003: CALL_OW 248
58007: PPUSH
58008: CALL_OW 450
58012: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58013: LD_ADDR_VAR 0 3
58017: PUSH
58018: LD_VAR 0 4
58022: PPUSH
58023: LD_INT 1
58025: PPUSH
58026: CALL_OW 275
58030: PUSH
58031: LD_VAR 0 5
58035: PUSH
58036: LD_INT 1
58038: ARRAY
58039: GREATEREQUAL
58040: IFFALSE 58066
58042: PUSH
58043: LD_VAR 0 4
58047: PPUSH
58048: LD_INT 2
58050: PPUSH
58051: CALL_OW 275
58055: PUSH
58056: LD_VAR 0 5
58060: PUSH
58061: LD_INT 2
58063: ARRAY
58064: GREATEREQUAL
58065: AND
58066: IFFALSE 58092
58068: PUSH
58069: LD_VAR 0 4
58073: PPUSH
58074: LD_INT 3
58076: PPUSH
58077: CALL_OW 275
58081: PUSH
58082: LD_VAR 0 5
58086: PUSH
58087: LD_INT 3
58089: ARRAY
58090: GREATEREQUAL
58091: AND
58092: ST_TO_ADDR
// end ;
58093: LD_VAR 0 3
58097: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58098: LD_INT 0
58100: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58101: LD_VAR 0 1
58105: PPUSH
58106: LD_VAR 0 2
58110: PPUSH
58111: LD_INT 0
58113: PPUSH
58114: LD_INT 0
58116: PPUSH
58117: LD_INT 1
58119: PPUSH
58120: LD_INT 0
58122: PPUSH
58123: CALL_OW 587
// end ;
58127: LD_VAR 0 3
58131: RET
// export function CenterOnNow ( unit ) ; begin
58132: LD_INT 0
58134: PPUSH
// result := IsInUnit ( unit ) ;
58135: LD_ADDR_VAR 0 2
58139: PUSH
58140: LD_VAR 0 1
58144: PPUSH
58145: CALL_OW 310
58149: ST_TO_ADDR
// if not result then
58150: LD_VAR 0 2
58154: NOT
58155: IFFALSE 58167
// result := unit ;
58157: LD_ADDR_VAR 0 2
58161: PUSH
58162: LD_VAR 0 1
58166: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58167: LD_VAR 0 1
58171: PPUSH
58172: CALL_OW 87
// end ;
58176: LD_VAR 0 2
58180: RET
// export function ComMoveHex ( unit , hex ) ; begin
58181: LD_INT 0
58183: PPUSH
// if not hex then
58184: LD_VAR 0 2
58188: NOT
58189: IFFALSE 58193
// exit ;
58191: GO 58246
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58193: LD_VAR 0 2
58197: PUSH
58198: LD_INT 1
58200: ARRAY
58201: PPUSH
58202: LD_VAR 0 2
58206: PUSH
58207: LD_INT 2
58209: ARRAY
58210: PPUSH
58211: CALL_OW 428
58215: IFFALSE 58219
// exit ;
58217: GO 58246
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58219: LD_VAR 0 1
58223: PPUSH
58224: LD_VAR 0 2
58228: PUSH
58229: LD_INT 1
58231: ARRAY
58232: PPUSH
58233: LD_VAR 0 2
58237: PUSH
58238: LD_INT 2
58240: ARRAY
58241: PPUSH
58242: CALL_OW 111
// end ;
58246: LD_VAR 0 3
58250: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58251: LD_INT 0
58253: PPUSH
58254: PPUSH
58255: PPUSH
// if not unit or not enemy then
58256: LD_VAR 0 1
58260: NOT
58261: IFTRUE 58270
58263: PUSH
58264: LD_VAR 0 2
58268: NOT
58269: OR
58270: IFFALSE 58274
// exit ;
58272: GO 58400
// x := GetX ( enemy ) ;
58274: LD_ADDR_VAR 0 4
58278: PUSH
58279: LD_VAR 0 2
58283: PPUSH
58284: CALL_OW 250
58288: ST_TO_ADDR
// y := GetY ( enemy ) ;
58289: LD_ADDR_VAR 0 5
58293: PUSH
58294: LD_VAR 0 2
58298: PPUSH
58299: CALL_OW 251
58303: ST_TO_ADDR
// if ValidHex ( x , y ) then
58304: LD_VAR 0 4
58308: PPUSH
58309: LD_VAR 0 5
58313: PPUSH
58314: CALL_OW 488
58318: IFFALSE 58400
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58320: LD_VAR 0 2
58324: PPUSH
58325: CALL_OW 247
58329: PUSH
58330: LD_INT 3
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: IN
58340: IFTRUE 58363
58342: PUSH
58343: LD_VAR 0 1
58347: PPUSH
58348: CALL_OW 255
58352: PPUSH
58353: LD_VAR 0 2
58357: PPUSH
58358: CALL_OW 292
58362: OR
58363: IFFALSE 58381
// ComAttackUnit ( unit , enemy ) else
58365: LD_VAR 0 1
58369: PPUSH
58370: LD_VAR 0 2
58374: PPUSH
58375: CALL_OW 115
58379: GO 58400
// ComAgressiveMove ( unit , x , y ) ;
58381: LD_VAR 0 1
58385: PPUSH
58386: LD_VAR 0 4
58390: PPUSH
58391: LD_VAR 0 5
58395: PPUSH
58396: CALL_OW 114
// end ;
58400: LD_VAR 0 3
58404: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58405: LD_INT 0
58407: PPUSH
58408: PPUSH
58409: PPUSH
// list := AreaToList ( area , 0 ) ;
58410: LD_ADDR_VAR 0 5
58414: PUSH
58415: LD_VAR 0 1
58419: PPUSH
58420: LD_INT 0
58422: PPUSH
58423: CALL_OW 517
58427: ST_TO_ADDR
// if not list then
58428: LD_VAR 0 5
58432: NOT
58433: IFFALSE 58437
// exit ;
58435: GO 58567
// if all then
58437: LD_VAR 0 2
58441: IFFALSE 58529
// begin for i := 1 to list [ 1 ] do
58443: LD_ADDR_VAR 0 4
58447: PUSH
58448: DOUBLE
58449: LD_INT 1
58451: DEC
58452: ST_TO_ADDR
58453: LD_VAR 0 5
58457: PUSH
58458: LD_INT 1
58460: ARRAY
58461: PUSH
58462: FOR_TO
58463: IFFALSE 58525
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58465: LD_ADDR_VAR 0 3
58469: PUSH
58470: LD_VAR 0 3
58474: PPUSH
58475: LD_VAR 0 3
58479: PUSH
58480: LD_INT 1
58482: PLUS
58483: PPUSH
58484: LD_VAR 0 5
58488: PUSH
58489: LD_INT 1
58491: ARRAY
58492: PUSH
58493: LD_VAR 0 4
58497: ARRAY
58498: PUSH
58499: LD_VAR 0 5
58503: PUSH
58504: LD_INT 2
58506: ARRAY
58507: PUSH
58508: LD_VAR 0 4
58512: ARRAY
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PPUSH
58518: CALL_OW 1
58522: ST_TO_ADDR
58523: GO 58462
58525: POP
58526: POP
// exit ;
58527: GO 58567
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58529: LD_ADDR_VAR 0 3
58533: PUSH
58534: LD_VAR 0 5
58538: PUSH
58539: LD_INT 1
58541: ARRAY
58542: PUSH
58543: LD_INT 1
58545: ARRAY
58546: PUSH
58547: LD_VAR 0 5
58551: PUSH
58552: LD_INT 2
58554: ARRAY
58555: PUSH
58556: LD_INT 1
58558: ARRAY
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: EMPTY
58565: LIST
58566: ST_TO_ADDR
// end ;
58567: LD_VAR 0 3
58571: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58572: LD_INT 0
58574: PPUSH
58575: PPUSH
// list := AreaToList ( area , 0 ) ;
58576: LD_ADDR_VAR 0 4
58580: PUSH
58581: LD_VAR 0 1
58585: PPUSH
58586: LD_INT 0
58588: PPUSH
58589: CALL_OW 517
58593: ST_TO_ADDR
// if not list then
58594: LD_VAR 0 4
58598: NOT
58599: IFFALSE 58603
// exit ;
58601: GO 58644
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58603: LD_ADDR_VAR 0 3
58607: PUSH
58608: LD_VAR 0 4
58612: PUSH
58613: LD_INT 1
58615: ARRAY
58616: PUSH
58617: LD_INT 1
58619: ARRAY
58620: PUSH
58621: LD_VAR 0 4
58625: PUSH
58626: LD_INT 2
58628: ARRAY
58629: PUSH
58630: LD_INT 1
58632: ARRAY
58633: PUSH
58634: LD_VAR 0 2
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: ST_TO_ADDR
// end ;
58644: LD_VAR 0 3
58648: RET
// export function First ( array ) ; begin
58649: LD_INT 0
58651: PPUSH
// if not array then
58652: LD_VAR 0 1
58656: NOT
58657: IFFALSE 58661
// exit ;
58659: GO 58675
// result := array [ 1 ] ;
58661: LD_ADDR_VAR 0 2
58665: PUSH
58666: LD_VAR 0 1
58670: PUSH
58671: LD_INT 1
58673: ARRAY
58674: ST_TO_ADDR
// end ;
58675: LD_VAR 0 2
58679: RET
// export function Last ( array ) ; begin
58680: LD_INT 0
58682: PPUSH
// if not array then
58683: LD_VAR 0 1
58687: NOT
58688: IFFALSE 58692
// exit ;
58690: GO 58708
// result := array [ array ] ;
58692: LD_ADDR_VAR 0 2
58696: PUSH
58697: LD_VAR 0 1
58701: PUSH
58702: LD_VAR 0 1
58706: ARRAY
58707: ST_TO_ADDR
// end ;
58708: LD_VAR 0 2
58712: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58713: LD_INT 0
58715: PPUSH
58716: PPUSH
// result := [ ] ;
58717: LD_ADDR_VAR 0 5
58721: PUSH
58722: EMPTY
58723: ST_TO_ADDR
// if not array then
58724: LD_VAR 0 1
58728: NOT
58729: IFFALSE 58733
// exit ;
58731: GO 58845
// for i := 1 to array do
58733: LD_ADDR_VAR 0 6
58737: PUSH
58738: DOUBLE
58739: LD_INT 1
58741: DEC
58742: ST_TO_ADDR
58743: LD_VAR 0 1
58747: PUSH
58748: FOR_TO
58749: IFFALSE 58843
// if array [ i ] [ index ] = value then
58751: LD_VAR 0 1
58755: PUSH
58756: LD_VAR 0 6
58760: ARRAY
58761: PUSH
58762: LD_VAR 0 2
58766: ARRAY
58767: PUSH
58768: LD_VAR 0 3
58772: EQUAL
58773: IFFALSE 58841
// begin if indexColumn then
58775: LD_VAR 0 4
58779: IFFALSE 58815
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58781: LD_ADDR_VAR 0 5
58785: PUSH
58786: LD_VAR 0 5
58790: PPUSH
58791: LD_VAR 0 1
58795: PUSH
58796: LD_VAR 0 6
58800: ARRAY
58801: PUSH
58802: LD_VAR 0 4
58806: ARRAY
58807: PPUSH
58808: CALL 53853 0 2
58812: ST_TO_ADDR
58813: GO 58841
// result := Join ( result , array [ i ] ) ;
58815: LD_ADDR_VAR 0 5
58819: PUSH
58820: LD_VAR 0 5
58824: PPUSH
58825: LD_VAR 0 1
58829: PUSH
58830: LD_VAR 0 6
58834: ARRAY
58835: PPUSH
58836: CALL 53853 0 2
58840: ST_TO_ADDR
// end ;
58841: GO 58748
58843: POP
58844: POP
// end ;
58845: LD_VAR 0 5
58849: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58850: LD_INT 0
58852: PPUSH
// if not vehicles or not parkingPoint then
58853: LD_VAR 0 1
58857: NOT
58858: IFTRUE 58867
58860: PUSH
58861: LD_VAR 0 2
58865: NOT
58866: OR
58867: IFFALSE 58871
// exit ;
58869: GO 58969
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58871: LD_ADDR_VAR 0 1
58875: PUSH
58876: LD_VAR 0 1
58880: PPUSH
58881: LD_INT 50
58883: PUSH
58884: EMPTY
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: LD_INT 92
58892: PUSH
58893: LD_VAR 0 2
58897: PUSH
58898: LD_INT 1
58900: ARRAY
58901: PUSH
58902: LD_VAR 0 2
58906: PUSH
58907: LD_INT 2
58909: ARRAY
58910: PUSH
58911: LD_INT 8
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PPUSH
58928: CALL_OW 72
58932: ST_TO_ADDR
// if not vehicles then
58933: LD_VAR 0 1
58937: NOT
58938: IFFALSE 58942
// exit ;
58940: GO 58969
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58942: LD_VAR 0 1
58946: PPUSH
58947: LD_VAR 0 2
58951: PUSH
58952: LD_INT 1
58954: ARRAY
58955: PPUSH
58956: LD_VAR 0 2
58960: PUSH
58961: LD_INT 2
58963: ARRAY
58964: PPUSH
58965: CALL_OW 111
// end ;
58969: LD_VAR 0 3
58973: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58974: LD_INT 0
58976: PPUSH
58977: PPUSH
58978: PPUSH
// if not side or not area then
58979: LD_VAR 0 1
58983: NOT
58984: IFTRUE 58993
58986: PUSH
58987: LD_VAR 0 2
58991: NOT
58992: OR
58993: IFFALSE 58997
// exit ;
58995: GO 59116
// tmp := AreaToList ( area , 0 ) ;
58997: LD_ADDR_VAR 0 5
59001: PUSH
59002: LD_VAR 0 2
59006: PPUSH
59007: LD_INT 0
59009: PPUSH
59010: CALL_OW 517
59014: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59015: LD_ADDR_VAR 0 4
59019: PUSH
59020: DOUBLE
59021: LD_INT 1
59023: DEC
59024: ST_TO_ADDR
59025: LD_VAR 0 5
59029: PUSH
59030: LD_INT 1
59032: ARRAY
59033: PUSH
59034: FOR_TO
59035: IFFALSE 59114
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59037: LD_VAR 0 5
59041: PUSH
59042: LD_INT 1
59044: ARRAY
59045: PUSH
59046: LD_VAR 0 4
59050: ARRAY
59051: PPUSH
59052: LD_VAR 0 5
59056: PUSH
59057: LD_INT 2
59059: ARRAY
59060: PUSH
59061: LD_VAR 0 4
59065: ARRAY
59066: PPUSH
59067: CALL_OW 351
59071: IFFALSE 59112
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59073: LD_VAR 0 5
59077: PUSH
59078: LD_INT 1
59080: ARRAY
59081: PUSH
59082: LD_VAR 0 4
59086: ARRAY
59087: PPUSH
59088: LD_VAR 0 5
59092: PUSH
59093: LD_INT 2
59095: ARRAY
59096: PUSH
59097: LD_VAR 0 4
59101: ARRAY
59102: PPUSH
59103: LD_VAR 0 1
59107: PPUSH
59108: CALL_OW 244
// end ;
59112: GO 59034
59114: POP
59115: POP
// end ;
59116: LD_VAR 0 3
59120: RET
// export function UniqueArray ( array ) ; var i ; begin
59121: LD_INT 0
59123: PPUSH
59124: PPUSH
// result := [ ] ;
59125: LD_ADDR_VAR 0 2
59129: PUSH
59130: EMPTY
59131: ST_TO_ADDR
// if not array then
59132: LD_VAR 0 1
59136: NOT
59137: IFFALSE 59141
// exit ;
59139: GO 59202
// for i := 1 to array do
59141: LD_ADDR_VAR 0 3
59145: PUSH
59146: DOUBLE
59147: LD_INT 1
59149: DEC
59150: ST_TO_ADDR
59151: LD_VAR 0 1
59155: PUSH
59156: FOR_TO
59157: IFFALSE 59200
// if not array [ i ] in result then
59159: LD_VAR 0 1
59163: PUSH
59164: LD_VAR 0 3
59168: ARRAY
59169: PUSH
59170: LD_VAR 0 2
59174: IN
59175: NOT
59176: IFFALSE 59198
// result := Join ( result , i ) ;
59178: LD_ADDR_VAR 0 2
59182: PUSH
59183: LD_VAR 0 2
59187: PPUSH
59188: LD_VAR 0 3
59192: PPUSH
59193: CALL 53853 0 2
59197: ST_TO_ADDR
59198: GO 59156
59200: POP
59201: POP
// end ; end_of_file end_of_file
59202: LD_VAR 0 2
59206: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59207: LD_VAR 0 1
59211: PPUSH
59212: LD_VAR 0 2
59216: PPUSH
59217: LD_VAR 0 3
59221: PPUSH
59222: LD_VAR 0 4
59226: PPUSH
59227: LD_VAR 0 5
59231: PPUSH
59232: LD_VAR 0 6
59236: PPUSH
59237: CALL 59479 0 6
// end ;
59241: PPOPN 6
59243: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
59244: LD_INT 0
59246: PPUSH
// begin if not units then
59247: LD_VAR 0 1
59251: NOT
59252: IFFALSE 59256
// exit ;
59254: GO 59290
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
59256: LD_VAR 0 1
59260: PPUSH
59261: LD_VAR 0 2
59265: PPUSH
59266: LD_VAR 0 3
59270: PPUSH
59271: LD_VAR 0 4
59275: PPUSH
59276: LD_VAR 0 5
59280: PPUSH
59281: LD_VAR 0 6
59285: PPUSH
59286: CALL 81996 0 6
// end ;
59290: PPOPN 7
59292: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59293: CALL 59359 0 0
// end ; end_of_file
59297: PPOPN 1
59299: END
// export globalGameSaveCounter ; every 0 0$1 do
59300: GO 59302
59302: DISABLE
// begin enable ;
59303: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59304: LD_STRING updateTimer(
59306: PUSH
59307: LD_OWVAR 1
59311: STR
59312: PUSH
59313: LD_STRING );
59315: STR
59316: PPUSH
59317: CALL_OW 559
// end ;
59321: END
// every 0 0$1 do
59322: GO 59324
59324: DISABLE
// begin globalGameSaveCounter := 0 ;
59325: LD_ADDR_EXP 37
59329: PUSH
59330: LD_INT 0
59332: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
59333: LD_STRING setGameSaveCounter(0)
59335: PPUSH
59336: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
59340: LD_STRING initStreamRollete();
59342: PPUSH
59343: CALL_OW 559
// InitStreamMode ;
59347: CALL 60699 0 0
// DefineStreamItems ( false ) ;
59351: LD_INT 0
59353: PPUSH
59354: CALL 61163 0 1
// end ;
59358: END
// export function SOS_MapStart ( ) ; begin
59359: LD_INT 0
59361: PPUSH
// if streamModeActive then
59362: LD_EXP 38
59366: IFFALSE 59375
// DefineStreamItems ( true ) ;
59368: LD_INT 1
59370: PPUSH
59371: CALL 61163 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
59375: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
59377: PPUSH
59378: CALL_OW 559
// UpdateLuaVariables ( ) ;
59382: CALL 59399 0 0
// UpdateFactoryWaypoints ( ) ;
59386: CALL 74285 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59390: CALL 74537 0 0
// end ;
59394: LD_VAR 0 1
59398: RET
// function UpdateLuaVariables ( ) ; begin
59399: LD_INT 0
59401: PPUSH
// if globalGameSaveCounter then
59402: LD_EXP 37
59406: IFFALSE 59440
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
59408: LD_ADDR_EXP 37
59412: PUSH
59413: LD_EXP 37
59417: PPUSH
59418: CALL 55226 0 1
59422: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59423: LD_STRING setGameSaveCounter(
59425: PUSH
59426: LD_EXP 37
59430: STR
59431: PUSH
59432: LD_STRING )
59434: STR
59435: PPUSH
59436: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59440: LD_STRING setGameDifficulty(
59442: PUSH
59443: LD_OWVAR 67
59447: STR
59448: PUSH
59449: LD_STRING )
59451: STR
59452: PPUSH
59453: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59457: LD_STRING displayDifficulty(
59459: PUSH
59460: LD_OWVAR 67
59464: STR
59465: PUSH
59466: LD_STRING )
59468: STR
59469: PPUSH
59470: CALL_OW 559
// end ;
59474: LD_VAR 0 1
59478: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59479: LD_INT 0
59481: PPUSH
// if p2 = stream_mode then
59482: LD_VAR 0 2
59486: PUSH
59487: LD_INT 100
59489: EQUAL
59490: IFFALSE 60493
// begin if not StreamModeActive then
59492: LD_EXP 38
59496: NOT
59497: IFFALSE 59507
// StreamModeActive := true ;
59499: LD_ADDR_EXP 38
59503: PUSH
59504: LD_INT 1
59506: ST_TO_ADDR
// if p3 = 0 then
59507: LD_VAR 0 3
59511: PUSH
59512: LD_INT 0
59514: EQUAL
59515: IFFALSE 59521
// InitStreamMode ;
59517: CALL 60699 0 0
// if p3 = 1 then
59521: LD_VAR 0 3
59525: PUSH
59526: LD_INT 1
59528: EQUAL
59529: IFFALSE 59539
// sRocket := true ;
59531: LD_ADDR_EXP 43
59535: PUSH
59536: LD_INT 1
59538: ST_TO_ADDR
// if p3 = 2 then
59539: LD_VAR 0 3
59543: PUSH
59544: LD_INT 2
59546: EQUAL
59547: IFFALSE 59557
// sSpeed := true ;
59549: LD_ADDR_EXP 42
59553: PUSH
59554: LD_INT 1
59556: ST_TO_ADDR
// if p3 = 3 then
59557: LD_VAR 0 3
59561: PUSH
59562: LD_INT 3
59564: EQUAL
59565: IFFALSE 59575
// sEngine := true ;
59567: LD_ADDR_EXP 44
59571: PUSH
59572: LD_INT 1
59574: ST_TO_ADDR
// if p3 = 4 then
59575: LD_VAR 0 3
59579: PUSH
59580: LD_INT 4
59582: EQUAL
59583: IFFALSE 59593
// sSpec := true ;
59585: LD_ADDR_EXP 41
59589: PUSH
59590: LD_INT 1
59592: ST_TO_ADDR
// if p3 = 5 then
59593: LD_VAR 0 3
59597: PUSH
59598: LD_INT 5
59600: EQUAL
59601: IFFALSE 59611
// sLevel := true ;
59603: LD_ADDR_EXP 45
59607: PUSH
59608: LD_INT 1
59610: ST_TO_ADDR
// if p3 = 6 then
59611: LD_VAR 0 3
59615: PUSH
59616: LD_INT 6
59618: EQUAL
59619: IFFALSE 59629
// sArmoury := true ;
59621: LD_ADDR_EXP 46
59625: PUSH
59626: LD_INT 1
59628: ST_TO_ADDR
// if p3 = 7 then
59629: LD_VAR 0 3
59633: PUSH
59634: LD_INT 7
59636: EQUAL
59637: IFFALSE 59647
// sRadar := true ;
59639: LD_ADDR_EXP 47
59643: PUSH
59644: LD_INT 1
59646: ST_TO_ADDR
// if p3 = 8 then
59647: LD_VAR 0 3
59651: PUSH
59652: LD_INT 8
59654: EQUAL
59655: IFFALSE 59665
// sBunker := true ;
59657: LD_ADDR_EXP 48
59661: PUSH
59662: LD_INT 1
59664: ST_TO_ADDR
// if p3 = 9 then
59665: LD_VAR 0 3
59669: PUSH
59670: LD_INT 9
59672: EQUAL
59673: IFFALSE 59683
// sHack := true ;
59675: LD_ADDR_EXP 49
59679: PUSH
59680: LD_INT 1
59682: ST_TO_ADDR
// if p3 = 10 then
59683: LD_VAR 0 3
59687: PUSH
59688: LD_INT 10
59690: EQUAL
59691: IFFALSE 59701
// sFire := true ;
59693: LD_ADDR_EXP 50
59697: PUSH
59698: LD_INT 1
59700: ST_TO_ADDR
// if p3 = 11 then
59701: LD_VAR 0 3
59705: PUSH
59706: LD_INT 11
59708: EQUAL
59709: IFFALSE 59719
// sRefresh := true ;
59711: LD_ADDR_EXP 51
59715: PUSH
59716: LD_INT 1
59718: ST_TO_ADDR
// if p3 = 12 then
59719: LD_VAR 0 3
59723: PUSH
59724: LD_INT 12
59726: EQUAL
59727: IFFALSE 59737
// sExp := true ;
59729: LD_ADDR_EXP 52
59733: PUSH
59734: LD_INT 1
59736: ST_TO_ADDR
// if p3 = 13 then
59737: LD_VAR 0 3
59741: PUSH
59742: LD_INT 13
59744: EQUAL
59745: IFFALSE 59755
// sDepot := true ;
59747: LD_ADDR_EXP 53
59751: PUSH
59752: LD_INT 1
59754: ST_TO_ADDR
// if p3 = 14 then
59755: LD_VAR 0 3
59759: PUSH
59760: LD_INT 14
59762: EQUAL
59763: IFFALSE 59773
// sFlag := true ;
59765: LD_ADDR_EXP 54
59769: PUSH
59770: LD_INT 1
59772: ST_TO_ADDR
// if p3 = 15 then
59773: LD_VAR 0 3
59777: PUSH
59778: LD_INT 15
59780: EQUAL
59781: IFFALSE 59791
// sKamikadze := true ;
59783: LD_ADDR_EXP 62
59787: PUSH
59788: LD_INT 1
59790: ST_TO_ADDR
// if p3 = 16 then
59791: LD_VAR 0 3
59795: PUSH
59796: LD_INT 16
59798: EQUAL
59799: IFFALSE 59809
// sTroll := true ;
59801: LD_ADDR_EXP 63
59805: PUSH
59806: LD_INT 1
59808: ST_TO_ADDR
// if p3 = 17 then
59809: LD_VAR 0 3
59813: PUSH
59814: LD_INT 17
59816: EQUAL
59817: IFFALSE 59827
// sSlow := true ;
59819: LD_ADDR_EXP 64
59823: PUSH
59824: LD_INT 1
59826: ST_TO_ADDR
// if p3 = 18 then
59827: LD_VAR 0 3
59831: PUSH
59832: LD_INT 18
59834: EQUAL
59835: IFFALSE 59845
// sLack := true ;
59837: LD_ADDR_EXP 65
59841: PUSH
59842: LD_INT 1
59844: ST_TO_ADDR
// if p3 = 19 then
59845: LD_VAR 0 3
59849: PUSH
59850: LD_INT 19
59852: EQUAL
59853: IFFALSE 59863
// sTank := true ;
59855: LD_ADDR_EXP 67
59859: PUSH
59860: LD_INT 1
59862: ST_TO_ADDR
// if p3 = 20 then
59863: LD_VAR 0 3
59867: PUSH
59868: LD_INT 20
59870: EQUAL
59871: IFFALSE 59881
// sRemote := true ;
59873: LD_ADDR_EXP 68
59877: PUSH
59878: LD_INT 1
59880: ST_TO_ADDR
// if p3 = 21 then
59881: LD_VAR 0 3
59885: PUSH
59886: LD_INT 21
59888: EQUAL
59889: IFFALSE 59899
// sPowell := true ;
59891: LD_ADDR_EXP 69
59895: PUSH
59896: LD_INT 1
59898: ST_TO_ADDR
// if p3 = 22 then
59899: LD_VAR 0 3
59903: PUSH
59904: LD_INT 22
59906: EQUAL
59907: IFFALSE 59917
// sTeleport := true ;
59909: LD_ADDR_EXP 72
59913: PUSH
59914: LD_INT 1
59916: ST_TO_ADDR
// if p3 = 23 then
59917: LD_VAR 0 3
59921: PUSH
59922: LD_INT 23
59924: EQUAL
59925: IFFALSE 59935
// sOilTower := true ;
59927: LD_ADDR_EXP 74
59931: PUSH
59932: LD_INT 1
59934: ST_TO_ADDR
// if p3 = 24 then
59935: LD_VAR 0 3
59939: PUSH
59940: LD_INT 24
59942: EQUAL
59943: IFFALSE 59953
// sShovel := true ;
59945: LD_ADDR_EXP 75
59949: PUSH
59950: LD_INT 1
59952: ST_TO_ADDR
// if p3 = 25 then
59953: LD_VAR 0 3
59957: PUSH
59958: LD_INT 25
59960: EQUAL
59961: IFFALSE 59971
// sSheik := true ;
59963: LD_ADDR_EXP 76
59967: PUSH
59968: LD_INT 1
59970: ST_TO_ADDR
// if p3 = 26 then
59971: LD_VAR 0 3
59975: PUSH
59976: LD_INT 26
59978: EQUAL
59979: IFFALSE 59989
// sEarthquake := true ;
59981: LD_ADDR_EXP 78
59985: PUSH
59986: LD_INT 1
59988: ST_TO_ADDR
// if p3 = 27 then
59989: LD_VAR 0 3
59993: PUSH
59994: LD_INT 27
59996: EQUAL
59997: IFFALSE 60007
// sAI := true ;
59999: LD_ADDR_EXP 79
60003: PUSH
60004: LD_INT 1
60006: ST_TO_ADDR
// if p3 = 28 then
60007: LD_VAR 0 3
60011: PUSH
60012: LD_INT 28
60014: EQUAL
60015: IFFALSE 60025
// sCargo := true ;
60017: LD_ADDR_EXP 82
60021: PUSH
60022: LD_INT 1
60024: ST_TO_ADDR
// if p3 = 29 then
60025: LD_VAR 0 3
60029: PUSH
60030: LD_INT 29
60032: EQUAL
60033: IFFALSE 60043
// sDLaser := true ;
60035: LD_ADDR_EXP 83
60039: PUSH
60040: LD_INT 1
60042: ST_TO_ADDR
// if p3 = 30 then
60043: LD_VAR 0 3
60047: PUSH
60048: LD_INT 30
60050: EQUAL
60051: IFFALSE 60061
// sExchange := true ;
60053: LD_ADDR_EXP 84
60057: PUSH
60058: LD_INT 1
60060: ST_TO_ADDR
// if p3 = 31 then
60061: LD_VAR 0 3
60065: PUSH
60066: LD_INT 31
60068: EQUAL
60069: IFFALSE 60079
// sFac := true ;
60071: LD_ADDR_EXP 85
60075: PUSH
60076: LD_INT 1
60078: ST_TO_ADDR
// if p3 = 32 then
60079: LD_VAR 0 3
60083: PUSH
60084: LD_INT 32
60086: EQUAL
60087: IFFALSE 60097
// sPower := true ;
60089: LD_ADDR_EXP 86
60093: PUSH
60094: LD_INT 1
60096: ST_TO_ADDR
// if p3 = 33 then
60097: LD_VAR 0 3
60101: PUSH
60102: LD_INT 33
60104: EQUAL
60105: IFFALSE 60115
// sRandom := true ;
60107: LD_ADDR_EXP 87
60111: PUSH
60112: LD_INT 1
60114: ST_TO_ADDR
// if p3 = 34 then
60115: LD_VAR 0 3
60119: PUSH
60120: LD_INT 34
60122: EQUAL
60123: IFFALSE 60133
// sShield := true ;
60125: LD_ADDR_EXP 88
60129: PUSH
60130: LD_INT 1
60132: ST_TO_ADDR
// if p3 = 35 then
60133: LD_VAR 0 3
60137: PUSH
60138: LD_INT 35
60140: EQUAL
60141: IFFALSE 60151
// sTime := true ;
60143: LD_ADDR_EXP 89
60147: PUSH
60148: LD_INT 1
60150: ST_TO_ADDR
// if p3 = 36 then
60151: LD_VAR 0 3
60155: PUSH
60156: LD_INT 36
60158: EQUAL
60159: IFFALSE 60169
// sTools := true ;
60161: LD_ADDR_EXP 90
60165: PUSH
60166: LD_INT 1
60168: ST_TO_ADDR
// if p3 = 101 then
60169: LD_VAR 0 3
60173: PUSH
60174: LD_INT 101
60176: EQUAL
60177: IFFALSE 60187
// sSold := true ;
60179: LD_ADDR_EXP 55
60183: PUSH
60184: LD_INT 1
60186: ST_TO_ADDR
// if p3 = 102 then
60187: LD_VAR 0 3
60191: PUSH
60192: LD_INT 102
60194: EQUAL
60195: IFFALSE 60205
// sDiff := true ;
60197: LD_ADDR_EXP 56
60201: PUSH
60202: LD_INT 1
60204: ST_TO_ADDR
// if p3 = 103 then
60205: LD_VAR 0 3
60209: PUSH
60210: LD_INT 103
60212: EQUAL
60213: IFFALSE 60223
// sFog := true ;
60215: LD_ADDR_EXP 59
60219: PUSH
60220: LD_INT 1
60222: ST_TO_ADDR
// if p3 = 104 then
60223: LD_VAR 0 3
60227: PUSH
60228: LD_INT 104
60230: EQUAL
60231: IFFALSE 60241
// sReset := true ;
60233: LD_ADDR_EXP 60
60237: PUSH
60238: LD_INT 1
60240: ST_TO_ADDR
// if p3 = 105 then
60241: LD_VAR 0 3
60245: PUSH
60246: LD_INT 105
60248: EQUAL
60249: IFFALSE 60259
// sSun := true ;
60251: LD_ADDR_EXP 61
60255: PUSH
60256: LD_INT 1
60258: ST_TO_ADDR
// if p3 = 106 then
60259: LD_VAR 0 3
60263: PUSH
60264: LD_INT 106
60266: EQUAL
60267: IFFALSE 60277
// sTiger := true ;
60269: LD_ADDR_EXP 57
60273: PUSH
60274: LD_INT 1
60276: ST_TO_ADDR
// if p3 = 107 then
60277: LD_VAR 0 3
60281: PUSH
60282: LD_INT 107
60284: EQUAL
60285: IFFALSE 60295
// sBomb := true ;
60287: LD_ADDR_EXP 58
60291: PUSH
60292: LD_INT 1
60294: ST_TO_ADDR
// if p3 = 108 then
60295: LD_VAR 0 3
60299: PUSH
60300: LD_INT 108
60302: EQUAL
60303: IFFALSE 60313
// sWound := true ;
60305: LD_ADDR_EXP 66
60309: PUSH
60310: LD_INT 1
60312: ST_TO_ADDR
// if p3 = 109 then
60313: LD_VAR 0 3
60317: PUSH
60318: LD_INT 109
60320: EQUAL
60321: IFFALSE 60331
// sBetray := true ;
60323: LD_ADDR_EXP 70
60327: PUSH
60328: LD_INT 1
60330: ST_TO_ADDR
// if p3 = 110 then
60331: LD_VAR 0 3
60335: PUSH
60336: LD_INT 110
60338: EQUAL
60339: IFFALSE 60349
// sContamin := true ;
60341: LD_ADDR_EXP 71
60345: PUSH
60346: LD_INT 1
60348: ST_TO_ADDR
// if p3 = 111 then
60349: LD_VAR 0 3
60353: PUSH
60354: LD_INT 111
60356: EQUAL
60357: IFFALSE 60367
// sOil := true ;
60359: LD_ADDR_EXP 73
60363: PUSH
60364: LD_INT 1
60366: ST_TO_ADDR
// if p3 = 112 then
60367: LD_VAR 0 3
60371: PUSH
60372: LD_INT 112
60374: EQUAL
60375: IFFALSE 60385
// sStu := true ;
60377: LD_ADDR_EXP 77
60381: PUSH
60382: LD_INT 1
60384: ST_TO_ADDR
// if p3 = 113 then
60385: LD_VAR 0 3
60389: PUSH
60390: LD_INT 113
60392: EQUAL
60393: IFFALSE 60403
// sBazooka := true ;
60395: LD_ADDR_EXP 80
60399: PUSH
60400: LD_INT 1
60402: ST_TO_ADDR
// if p3 = 114 then
60403: LD_VAR 0 3
60407: PUSH
60408: LD_INT 114
60410: EQUAL
60411: IFFALSE 60421
// sMortar := true ;
60413: LD_ADDR_EXP 81
60417: PUSH
60418: LD_INT 1
60420: ST_TO_ADDR
// if p3 = 115 then
60421: LD_VAR 0 3
60425: PUSH
60426: LD_INT 115
60428: EQUAL
60429: IFFALSE 60439
// sRanger := true ;
60431: LD_ADDR_EXP 91
60435: PUSH
60436: LD_INT 1
60438: ST_TO_ADDR
// if p3 = 116 then
60439: LD_VAR 0 3
60443: PUSH
60444: LD_INT 116
60446: EQUAL
60447: IFFALSE 60457
// sComputer := true ;
60449: LD_ADDR_EXP 92
60453: PUSH
60454: LD_INT 1
60456: ST_TO_ADDR
// if p3 = 117 then
60457: LD_VAR 0 3
60461: PUSH
60462: LD_INT 117
60464: EQUAL
60465: IFFALSE 60475
// s30 := true ;
60467: LD_ADDR_EXP 93
60471: PUSH
60472: LD_INT 1
60474: ST_TO_ADDR
// if p3 = 118 then
60475: LD_VAR 0 3
60479: PUSH
60480: LD_INT 118
60482: EQUAL
60483: IFFALSE 60493
// s60 := true ;
60485: LD_ADDR_EXP 94
60489: PUSH
60490: LD_INT 1
60492: ST_TO_ADDR
// end ; if p2 = hack_mode then
60493: LD_VAR 0 2
60497: PUSH
60498: LD_INT 101
60500: EQUAL
60501: IFFALSE 60629
// begin case p3 of 1 :
60503: LD_VAR 0 3
60507: PUSH
60508: LD_INT 1
60510: DOUBLE
60511: EQUAL
60512: IFTRUE 60516
60514: GO 60523
60516: POP
// hHackUnlimitedResources ; 2 :
60517: CALL 72892 0 0
60521: GO 60629
60523: LD_INT 2
60525: DOUBLE
60526: EQUAL
60527: IFTRUE 60531
60529: GO 60538
60531: POP
// hHackSetLevel10 ; 3 :
60532: CALL 73025 0 0
60536: GO 60629
60538: LD_INT 3
60540: DOUBLE
60541: EQUAL
60542: IFTRUE 60546
60544: GO 60553
60546: POP
// hHackSetLevel10YourUnits ; 4 :
60547: CALL 73110 0 0
60551: GO 60629
60553: LD_INT 4
60555: DOUBLE
60556: EQUAL
60557: IFTRUE 60561
60559: GO 60568
60561: POP
// hHackInvincible ; 5 :
60562: CALL 73558 0 0
60566: GO 60629
60568: LD_INT 5
60570: DOUBLE
60571: EQUAL
60572: IFTRUE 60576
60574: GO 60583
60576: POP
// hHackInvisible ; 6 :
60577: CALL 73669 0 0
60581: GO 60629
60583: LD_INT 6
60585: DOUBLE
60586: EQUAL
60587: IFTRUE 60591
60589: GO 60598
60591: POP
// hHackChangeYourSide ; 7 :
60592: CALL 73726 0 0
60596: GO 60629
60598: LD_INT 7
60600: DOUBLE
60601: EQUAL
60602: IFTRUE 60606
60604: GO 60613
60606: POP
// hHackChangeUnitSide ; 8 :
60607: CALL 73768 0 0
60611: GO 60629
60613: LD_INT 8
60615: DOUBLE
60616: EQUAL
60617: IFTRUE 60621
60619: GO 60628
60621: POP
// hHackFog ; end ;
60622: CALL 73869 0 0
60626: GO 60629
60628: POP
// end ; if p2 = game_save_mode then
60629: LD_VAR 0 2
60633: PUSH
60634: LD_INT 102
60636: EQUAL
60637: IFFALSE 60694
// begin if p3 = 1 then
60639: LD_VAR 0 3
60643: PUSH
60644: LD_INT 1
60646: EQUAL
60647: IFFALSE 60659
// globalGameSaveCounter := p4 ;
60649: LD_ADDR_EXP 37
60653: PUSH
60654: LD_VAR 0 4
60658: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
60659: LD_VAR 0 3
60663: PUSH
60664: LD_INT 2
60666: EQUAL
60667: IFFALSE 60675
60669: PUSH
60670: LD_EXP 37
60674: AND
60675: IFFALSE 60694
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
60677: LD_STRING setGameSaveCounter(
60679: PUSH
60680: LD_EXP 37
60684: STR
60685: PUSH
60686: LD_STRING )
60688: STR
60689: PPUSH
60690: CALL_OW 559
// end ; end ;
60694: LD_VAR 0 7
60698: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
60699: LD_INT 0
60701: PPUSH
// streamModeActive := false ;
60702: LD_ADDR_EXP 38
60706: PUSH
60707: LD_INT 0
60709: ST_TO_ADDR
// normalCounter := 36 ;
60710: LD_ADDR_EXP 39
60714: PUSH
60715: LD_INT 36
60717: ST_TO_ADDR
// hardcoreCounter := 18 ;
60718: LD_ADDR_EXP 40
60722: PUSH
60723: LD_INT 18
60725: ST_TO_ADDR
// sRocket := false ;
60726: LD_ADDR_EXP 43
60730: PUSH
60731: LD_INT 0
60733: ST_TO_ADDR
// sSpeed := false ;
60734: LD_ADDR_EXP 42
60738: PUSH
60739: LD_INT 0
60741: ST_TO_ADDR
// sEngine := false ;
60742: LD_ADDR_EXP 44
60746: PUSH
60747: LD_INT 0
60749: ST_TO_ADDR
// sSpec := false ;
60750: LD_ADDR_EXP 41
60754: PUSH
60755: LD_INT 0
60757: ST_TO_ADDR
// sLevel := false ;
60758: LD_ADDR_EXP 45
60762: PUSH
60763: LD_INT 0
60765: ST_TO_ADDR
// sArmoury := false ;
60766: LD_ADDR_EXP 46
60770: PUSH
60771: LD_INT 0
60773: ST_TO_ADDR
// sRadar := false ;
60774: LD_ADDR_EXP 47
60778: PUSH
60779: LD_INT 0
60781: ST_TO_ADDR
// sBunker := false ;
60782: LD_ADDR_EXP 48
60786: PUSH
60787: LD_INT 0
60789: ST_TO_ADDR
// sHack := false ;
60790: LD_ADDR_EXP 49
60794: PUSH
60795: LD_INT 0
60797: ST_TO_ADDR
// sFire := false ;
60798: LD_ADDR_EXP 50
60802: PUSH
60803: LD_INT 0
60805: ST_TO_ADDR
// sRefresh := false ;
60806: LD_ADDR_EXP 51
60810: PUSH
60811: LD_INT 0
60813: ST_TO_ADDR
// sExp := false ;
60814: LD_ADDR_EXP 52
60818: PUSH
60819: LD_INT 0
60821: ST_TO_ADDR
// sDepot := false ;
60822: LD_ADDR_EXP 53
60826: PUSH
60827: LD_INT 0
60829: ST_TO_ADDR
// sFlag := false ;
60830: LD_ADDR_EXP 54
60834: PUSH
60835: LD_INT 0
60837: ST_TO_ADDR
// sKamikadze := false ;
60838: LD_ADDR_EXP 62
60842: PUSH
60843: LD_INT 0
60845: ST_TO_ADDR
// sTroll := false ;
60846: LD_ADDR_EXP 63
60850: PUSH
60851: LD_INT 0
60853: ST_TO_ADDR
// sSlow := false ;
60854: LD_ADDR_EXP 64
60858: PUSH
60859: LD_INT 0
60861: ST_TO_ADDR
// sLack := false ;
60862: LD_ADDR_EXP 65
60866: PUSH
60867: LD_INT 0
60869: ST_TO_ADDR
// sTank := false ;
60870: LD_ADDR_EXP 67
60874: PUSH
60875: LD_INT 0
60877: ST_TO_ADDR
// sRemote := false ;
60878: LD_ADDR_EXP 68
60882: PUSH
60883: LD_INT 0
60885: ST_TO_ADDR
// sPowell := false ;
60886: LD_ADDR_EXP 69
60890: PUSH
60891: LD_INT 0
60893: ST_TO_ADDR
// sTeleport := false ;
60894: LD_ADDR_EXP 72
60898: PUSH
60899: LD_INT 0
60901: ST_TO_ADDR
// sOilTower := false ;
60902: LD_ADDR_EXP 74
60906: PUSH
60907: LD_INT 0
60909: ST_TO_ADDR
// sShovel := false ;
60910: LD_ADDR_EXP 75
60914: PUSH
60915: LD_INT 0
60917: ST_TO_ADDR
// sSheik := false ;
60918: LD_ADDR_EXP 76
60922: PUSH
60923: LD_INT 0
60925: ST_TO_ADDR
// sEarthquake := false ;
60926: LD_ADDR_EXP 78
60930: PUSH
60931: LD_INT 0
60933: ST_TO_ADDR
// sAI := false ;
60934: LD_ADDR_EXP 79
60938: PUSH
60939: LD_INT 0
60941: ST_TO_ADDR
// sCargo := false ;
60942: LD_ADDR_EXP 82
60946: PUSH
60947: LD_INT 0
60949: ST_TO_ADDR
// sDLaser := false ;
60950: LD_ADDR_EXP 83
60954: PUSH
60955: LD_INT 0
60957: ST_TO_ADDR
// sExchange := false ;
60958: LD_ADDR_EXP 84
60962: PUSH
60963: LD_INT 0
60965: ST_TO_ADDR
// sFac := false ;
60966: LD_ADDR_EXP 85
60970: PUSH
60971: LD_INT 0
60973: ST_TO_ADDR
// sPower := false ;
60974: LD_ADDR_EXP 86
60978: PUSH
60979: LD_INT 0
60981: ST_TO_ADDR
// sRandom := false ;
60982: LD_ADDR_EXP 87
60986: PUSH
60987: LD_INT 0
60989: ST_TO_ADDR
// sShield := false ;
60990: LD_ADDR_EXP 88
60994: PUSH
60995: LD_INT 0
60997: ST_TO_ADDR
// sTime := false ;
60998: LD_ADDR_EXP 89
61002: PUSH
61003: LD_INT 0
61005: ST_TO_ADDR
// sTools := false ;
61006: LD_ADDR_EXP 90
61010: PUSH
61011: LD_INT 0
61013: ST_TO_ADDR
// sSold := false ;
61014: LD_ADDR_EXP 55
61018: PUSH
61019: LD_INT 0
61021: ST_TO_ADDR
// sDiff := false ;
61022: LD_ADDR_EXP 56
61026: PUSH
61027: LD_INT 0
61029: ST_TO_ADDR
// sFog := false ;
61030: LD_ADDR_EXP 59
61034: PUSH
61035: LD_INT 0
61037: ST_TO_ADDR
// sReset := false ;
61038: LD_ADDR_EXP 60
61042: PUSH
61043: LD_INT 0
61045: ST_TO_ADDR
// sSun := false ;
61046: LD_ADDR_EXP 61
61050: PUSH
61051: LD_INT 0
61053: ST_TO_ADDR
// sTiger := false ;
61054: LD_ADDR_EXP 57
61058: PUSH
61059: LD_INT 0
61061: ST_TO_ADDR
// sBomb := false ;
61062: LD_ADDR_EXP 58
61066: PUSH
61067: LD_INT 0
61069: ST_TO_ADDR
// sWound := false ;
61070: LD_ADDR_EXP 66
61074: PUSH
61075: LD_INT 0
61077: ST_TO_ADDR
// sBetray := false ;
61078: LD_ADDR_EXP 70
61082: PUSH
61083: LD_INT 0
61085: ST_TO_ADDR
// sContamin := false ;
61086: LD_ADDR_EXP 71
61090: PUSH
61091: LD_INT 0
61093: ST_TO_ADDR
// sOil := false ;
61094: LD_ADDR_EXP 73
61098: PUSH
61099: LD_INT 0
61101: ST_TO_ADDR
// sStu := false ;
61102: LD_ADDR_EXP 77
61106: PUSH
61107: LD_INT 0
61109: ST_TO_ADDR
// sBazooka := false ;
61110: LD_ADDR_EXP 80
61114: PUSH
61115: LD_INT 0
61117: ST_TO_ADDR
// sMortar := false ;
61118: LD_ADDR_EXP 81
61122: PUSH
61123: LD_INT 0
61125: ST_TO_ADDR
// sRanger := false ;
61126: LD_ADDR_EXP 91
61130: PUSH
61131: LD_INT 0
61133: ST_TO_ADDR
// sComputer := false ;
61134: LD_ADDR_EXP 92
61138: PUSH
61139: LD_INT 0
61141: ST_TO_ADDR
// s30 := false ;
61142: LD_ADDR_EXP 93
61146: PUSH
61147: LD_INT 0
61149: ST_TO_ADDR
// s60 := false ;
61150: LD_ADDR_EXP 94
61154: PUSH
61155: LD_INT 0
61157: ST_TO_ADDR
// end ;
61158: LD_VAR 0 1
61162: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
61163: LD_INT 0
61165: PPUSH
61166: PPUSH
61167: PPUSH
61168: PPUSH
61169: PPUSH
61170: PPUSH
61171: PPUSH
// result := [ ] ;
61172: LD_ADDR_VAR 0 2
61176: PUSH
61177: EMPTY
61178: ST_TO_ADDR
// if campaign_id = 1 then
61179: LD_OWVAR 69
61183: PUSH
61184: LD_INT 1
61186: EQUAL
61187: IFFALSE 64353
// begin case mission_number of 1 :
61189: LD_OWVAR 70
61193: PUSH
61194: LD_INT 1
61196: DOUBLE
61197: EQUAL
61198: IFTRUE 61202
61200: GO 61278
61202: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
61203: LD_ADDR_VAR 0 2
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: LD_INT 4
61213: PUSH
61214: LD_INT 11
61216: PUSH
61217: LD_INT 12
61219: PUSH
61220: LD_INT 15
61222: PUSH
61223: LD_INT 16
61225: PUSH
61226: LD_INT 22
61228: PUSH
61229: LD_INT 23
61231: PUSH
61232: LD_INT 26
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 101
61248: PUSH
61249: LD_INT 102
61251: PUSH
61252: LD_INT 106
61254: PUSH
61255: LD_INT 116
61257: PUSH
61258: LD_INT 117
61260: PUSH
61261: LD_INT 118
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: ST_TO_ADDR
61276: GO 64351
61278: LD_INT 2
61280: DOUBLE
61281: EQUAL
61282: IFTRUE 61286
61284: GO 61370
61286: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
61287: LD_ADDR_VAR 0 2
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: LD_INT 4
61297: PUSH
61298: LD_INT 11
61300: PUSH
61301: LD_INT 12
61303: PUSH
61304: LD_INT 15
61306: PUSH
61307: LD_INT 16
61309: PUSH
61310: LD_INT 22
61312: PUSH
61313: LD_INT 23
61315: PUSH
61316: LD_INT 26
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 101
61332: PUSH
61333: LD_INT 102
61335: PUSH
61336: LD_INT 105
61338: PUSH
61339: LD_INT 106
61341: PUSH
61342: LD_INT 108
61344: PUSH
61345: LD_INT 116
61347: PUSH
61348: LD_INT 117
61350: PUSH
61351: LD_INT 118
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: ST_TO_ADDR
61368: GO 64351
61370: LD_INT 3
61372: DOUBLE
61373: EQUAL
61374: IFTRUE 61378
61376: GO 61466
61378: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
61379: LD_ADDR_VAR 0 2
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: LD_INT 4
61389: PUSH
61390: LD_INT 5
61392: PUSH
61393: LD_INT 11
61395: PUSH
61396: LD_INT 12
61398: PUSH
61399: LD_INT 15
61401: PUSH
61402: LD_INT 16
61404: PUSH
61405: LD_INT 22
61407: PUSH
61408: LD_INT 26
61410: PUSH
61411: LD_INT 36
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 101
61428: PUSH
61429: LD_INT 102
61431: PUSH
61432: LD_INT 105
61434: PUSH
61435: LD_INT 106
61437: PUSH
61438: LD_INT 108
61440: PUSH
61441: LD_INT 116
61443: PUSH
61444: LD_INT 117
61446: PUSH
61447: LD_INT 118
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: ST_TO_ADDR
61464: GO 64351
61466: LD_INT 4
61468: DOUBLE
61469: EQUAL
61470: IFTRUE 61474
61472: GO 61570
61474: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
61475: LD_ADDR_VAR 0 2
61479: PUSH
61480: LD_INT 2
61482: PUSH
61483: LD_INT 4
61485: PUSH
61486: LD_INT 5
61488: PUSH
61489: LD_INT 8
61491: PUSH
61492: LD_INT 11
61494: PUSH
61495: LD_INT 12
61497: PUSH
61498: LD_INT 15
61500: PUSH
61501: LD_INT 16
61503: PUSH
61504: LD_INT 22
61506: PUSH
61507: LD_INT 23
61509: PUSH
61510: LD_INT 26
61512: PUSH
61513: LD_INT 36
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 101
61532: PUSH
61533: LD_INT 102
61535: PUSH
61536: LD_INT 105
61538: PUSH
61539: LD_INT 106
61541: PUSH
61542: LD_INT 108
61544: PUSH
61545: LD_INT 116
61547: PUSH
61548: LD_INT 117
61550: PUSH
61551: LD_INT 118
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: ST_TO_ADDR
61568: GO 64351
61570: LD_INT 5
61572: DOUBLE
61573: EQUAL
61574: IFTRUE 61578
61576: GO 61690
61578: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
61579: LD_ADDR_VAR 0 2
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: LD_INT 4
61589: PUSH
61590: LD_INT 5
61592: PUSH
61593: LD_INT 6
61595: PUSH
61596: LD_INT 8
61598: PUSH
61599: LD_INT 11
61601: PUSH
61602: LD_INT 12
61604: PUSH
61605: LD_INT 15
61607: PUSH
61608: LD_INT 16
61610: PUSH
61611: LD_INT 22
61613: PUSH
61614: LD_INT 23
61616: PUSH
61617: LD_INT 25
61619: PUSH
61620: LD_INT 26
61622: PUSH
61623: LD_INT 36
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 101
61644: PUSH
61645: LD_INT 102
61647: PUSH
61648: LD_INT 105
61650: PUSH
61651: LD_INT 106
61653: PUSH
61654: LD_INT 108
61656: PUSH
61657: LD_INT 109
61659: PUSH
61660: LD_INT 112
61662: PUSH
61663: LD_INT 116
61665: PUSH
61666: LD_INT 117
61668: PUSH
61669: LD_INT 118
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: ST_TO_ADDR
61688: GO 64351
61690: LD_INT 6
61692: DOUBLE
61693: EQUAL
61694: IFTRUE 61698
61696: GO 61830
61698: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
61699: LD_ADDR_VAR 0 2
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: LD_INT 4
61709: PUSH
61710: LD_INT 5
61712: PUSH
61713: LD_INT 6
61715: PUSH
61716: LD_INT 8
61718: PUSH
61719: LD_INT 11
61721: PUSH
61722: LD_INT 12
61724: PUSH
61725: LD_INT 15
61727: PUSH
61728: LD_INT 16
61730: PUSH
61731: LD_INT 20
61733: PUSH
61734: LD_INT 21
61736: PUSH
61737: LD_INT 22
61739: PUSH
61740: LD_INT 23
61742: PUSH
61743: LD_INT 25
61745: PUSH
61746: LD_INT 26
61748: PUSH
61749: LD_INT 30
61751: PUSH
61752: LD_INT 31
61754: PUSH
61755: LD_INT 32
61757: PUSH
61758: LD_INT 36
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 101
61784: PUSH
61785: LD_INT 102
61787: PUSH
61788: LD_INT 105
61790: PUSH
61791: LD_INT 106
61793: PUSH
61794: LD_INT 108
61796: PUSH
61797: LD_INT 109
61799: PUSH
61800: LD_INT 112
61802: PUSH
61803: LD_INT 116
61805: PUSH
61806: LD_INT 117
61808: PUSH
61809: LD_INT 118
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: ST_TO_ADDR
61828: GO 64351
61830: LD_INT 7
61832: DOUBLE
61833: EQUAL
61834: IFTRUE 61838
61836: GO 61950
61838: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
61839: LD_ADDR_VAR 0 2
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: LD_INT 4
61849: PUSH
61850: LD_INT 5
61852: PUSH
61853: LD_INT 7
61855: PUSH
61856: LD_INT 11
61858: PUSH
61859: LD_INT 12
61861: PUSH
61862: LD_INT 15
61864: PUSH
61865: LD_INT 16
61867: PUSH
61868: LD_INT 20
61870: PUSH
61871: LD_INT 21
61873: PUSH
61874: LD_INT 22
61876: PUSH
61877: LD_INT 23
61879: PUSH
61880: LD_INT 25
61882: PUSH
61883: LD_INT 26
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 101
61904: PUSH
61905: LD_INT 102
61907: PUSH
61908: LD_INT 103
61910: PUSH
61911: LD_INT 105
61913: PUSH
61914: LD_INT 106
61916: PUSH
61917: LD_INT 108
61919: PUSH
61920: LD_INT 112
61922: PUSH
61923: LD_INT 116
61925: PUSH
61926: LD_INT 117
61928: PUSH
61929: LD_INT 118
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: ST_TO_ADDR
61948: GO 64351
61950: LD_INT 8
61952: DOUBLE
61953: EQUAL
61954: IFTRUE 61958
61956: GO 62098
61958: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
61959: LD_ADDR_VAR 0 2
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: LD_INT 4
61969: PUSH
61970: LD_INT 5
61972: PUSH
61973: LD_INT 6
61975: PUSH
61976: LD_INT 7
61978: PUSH
61979: LD_INT 8
61981: PUSH
61982: LD_INT 11
61984: PUSH
61985: LD_INT 12
61987: PUSH
61988: LD_INT 15
61990: PUSH
61991: LD_INT 16
61993: PUSH
61994: LD_INT 20
61996: PUSH
61997: LD_INT 21
61999: PUSH
62000: LD_INT 22
62002: PUSH
62003: LD_INT 23
62005: PUSH
62006: LD_INT 25
62008: PUSH
62009: LD_INT 26
62011: PUSH
62012: LD_INT 30
62014: PUSH
62015: LD_INT 31
62017: PUSH
62018: LD_INT 32
62020: PUSH
62021: LD_INT 36
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 101
62048: PUSH
62049: LD_INT 102
62051: PUSH
62052: LD_INT 103
62054: PUSH
62055: LD_INT 105
62057: PUSH
62058: LD_INT 106
62060: PUSH
62061: LD_INT 108
62063: PUSH
62064: LD_INT 109
62066: PUSH
62067: LD_INT 112
62069: PUSH
62070: LD_INT 116
62072: PUSH
62073: LD_INT 117
62075: PUSH
62076: LD_INT 118
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: ST_TO_ADDR
62096: GO 64351
62098: LD_INT 9
62100: DOUBLE
62101: EQUAL
62102: IFTRUE 62106
62104: GO 62254
62106: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
62107: LD_ADDR_VAR 0 2
62111: PUSH
62112: LD_INT 2
62114: PUSH
62115: LD_INT 4
62117: PUSH
62118: LD_INT 5
62120: PUSH
62121: LD_INT 6
62123: PUSH
62124: LD_INT 7
62126: PUSH
62127: LD_INT 8
62129: PUSH
62130: LD_INT 11
62132: PUSH
62133: LD_INT 12
62135: PUSH
62136: LD_INT 15
62138: PUSH
62139: LD_INT 16
62141: PUSH
62142: LD_INT 20
62144: PUSH
62145: LD_INT 21
62147: PUSH
62148: LD_INT 22
62150: PUSH
62151: LD_INT 23
62153: PUSH
62154: LD_INT 25
62156: PUSH
62157: LD_INT 26
62159: PUSH
62160: LD_INT 28
62162: PUSH
62163: LD_INT 30
62165: PUSH
62166: LD_INT 31
62168: PUSH
62169: LD_INT 32
62171: PUSH
62172: LD_INT 36
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 101
62200: PUSH
62201: LD_INT 102
62203: PUSH
62204: LD_INT 103
62206: PUSH
62207: LD_INT 105
62209: PUSH
62210: LD_INT 106
62212: PUSH
62213: LD_INT 108
62215: PUSH
62216: LD_INT 109
62218: PUSH
62219: LD_INT 112
62221: PUSH
62222: LD_INT 114
62224: PUSH
62225: LD_INT 116
62227: PUSH
62228: LD_INT 117
62230: PUSH
62231: LD_INT 118
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: ST_TO_ADDR
62252: GO 64351
62254: LD_INT 10
62256: DOUBLE
62257: EQUAL
62258: IFTRUE 62262
62260: GO 62458
62262: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
62263: LD_ADDR_VAR 0 2
62267: PUSH
62268: LD_INT 2
62270: PUSH
62271: LD_INT 4
62273: PUSH
62274: LD_INT 5
62276: PUSH
62277: LD_INT 6
62279: PUSH
62280: LD_INT 7
62282: PUSH
62283: LD_INT 8
62285: PUSH
62286: LD_INT 9
62288: PUSH
62289: LD_INT 10
62291: PUSH
62292: LD_INT 11
62294: PUSH
62295: LD_INT 12
62297: PUSH
62298: LD_INT 13
62300: PUSH
62301: LD_INT 14
62303: PUSH
62304: LD_INT 15
62306: PUSH
62307: LD_INT 16
62309: PUSH
62310: LD_INT 17
62312: PUSH
62313: LD_INT 18
62315: PUSH
62316: LD_INT 19
62318: PUSH
62319: LD_INT 20
62321: PUSH
62322: LD_INT 21
62324: PUSH
62325: LD_INT 22
62327: PUSH
62328: LD_INT 23
62330: PUSH
62331: LD_INT 24
62333: PUSH
62334: LD_INT 25
62336: PUSH
62337: LD_INT 26
62339: PUSH
62340: LD_INT 28
62342: PUSH
62343: LD_INT 30
62345: PUSH
62346: LD_INT 31
62348: PUSH
62349: LD_INT 32
62351: PUSH
62352: LD_INT 36
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 101
62388: PUSH
62389: LD_INT 102
62391: PUSH
62392: LD_INT 103
62394: PUSH
62395: LD_INT 104
62397: PUSH
62398: LD_INT 105
62400: PUSH
62401: LD_INT 106
62403: PUSH
62404: LD_INT 107
62406: PUSH
62407: LD_INT 108
62409: PUSH
62410: LD_INT 109
62412: PUSH
62413: LD_INT 110
62415: PUSH
62416: LD_INT 111
62418: PUSH
62419: LD_INT 112
62421: PUSH
62422: LD_INT 114
62424: PUSH
62425: LD_INT 116
62427: PUSH
62428: LD_INT 117
62430: PUSH
62431: LD_INT 118
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: ST_TO_ADDR
62456: GO 64351
62458: LD_INT 11
62460: DOUBLE
62461: EQUAL
62462: IFTRUE 62466
62464: GO 62670
62466: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
62467: LD_ADDR_VAR 0 2
62471: PUSH
62472: LD_INT 2
62474: PUSH
62475: LD_INT 3
62477: PUSH
62478: LD_INT 4
62480: PUSH
62481: LD_INT 5
62483: PUSH
62484: LD_INT 6
62486: PUSH
62487: LD_INT 7
62489: PUSH
62490: LD_INT 8
62492: PUSH
62493: LD_INT 9
62495: PUSH
62496: LD_INT 10
62498: PUSH
62499: LD_INT 11
62501: PUSH
62502: LD_INT 12
62504: PUSH
62505: LD_INT 13
62507: PUSH
62508: LD_INT 14
62510: PUSH
62511: LD_INT 15
62513: PUSH
62514: LD_INT 16
62516: PUSH
62517: LD_INT 17
62519: PUSH
62520: LD_INT 18
62522: PUSH
62523: LD_INT 19
62525: PUSH
62526: LD_INT 20
62528: PUSH
62529: LD_INT 21
62531: PUSH
62532: LD_INT 22
62534: PUSH
62535: LD_INT 23
62537: PUSH
62538: LD_INT 24
62540: PUSH
62541: LD_INT 25
62543: PUSH
62544: LD_INT 26
62546: PUSH
62547: LD_INT 28
62549: PUSH
62550: LD_INT 30
62552: PUSH
62553: LD_INT 31
62555: PUSH
62556: LD_INT 32
62558: PUSH
62559: LD_INT 34
62561: PUSH
62562: LD_INT 36
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 101
62600: PUSH
62601: LD_INT 102
62603: PUSH
62604: LD_INT 103
62606: PUSH
62607: LD_INT 104
62609: PUSH
62610: LD_INT 105
62612: PUSH
62613: LD_INT 106
62615: PUSH
62616: LD_INT 107
62618: PUSH
62619: LD_INT 108
62621: PUSH
62622: LD_INT 109
62624: PUSH
62625: LD_INT 110
62627: PUSH
62628: LD_INT 111
62630: PUSH
62631: LD_INT 112
62633: PUSH
62634: LD_INT 114
62636: PUSH
62637: LD_INT 116
62639: PUSH
62640: LD_INT 117
62642: PUSH
62643: LD_INT 118
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: ST_TO_ADDR
62668: GO 64351
62670: LD_INT 12
62672: DOUBLE
62673: EQUAL
62674: IFTRUE 62678
62676: GO 62898
62678: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
62679: LD_ADDR_VAR 0 2
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: LD_INT 2
62689: PUSH
62690: LD_INT 3
62692: PUSH
62693: LD_INT 4
62695: PUSH
62696: LD_INT 5
62698: PUSH
62699: LD_INT 6
62701: PUSH
62702: LD_INT 7
62704: PUSH
62705: LD_INT 8
62707: PUSH
62708: LD_INT 9
62710: PUSH
62711: LD_INT 10
62713: PUSH
62714: LD_INT 11
62716: PUSH
62717: LD_INT 12
62719: PUSH
62720: LD_INT 13
62722: PUSH
62723: LD_INT 14
62725: PUSH
62726: LD_INT 15
62728: PUSH
62729: LD_INT 16
62731: PUSH
62732: LD_INT 17
62734: PUSH
62735: LD_INT 18
62737: PUSH
62738: LD_INT 19
62740: PUSH
62741: LD_INT 20
62743: PUSH
62744: LD_INT 21
62746: PUSH
62747: LD_INT 22
62749: PUSH
62750: LD_INT 23
62752: PUSH
62753: LD_INT 24
62755: PUSH
62756: LD_INT 25
62758: PUSH
62759: LD_INT 26
62761: PUSH
62762: LD_INT 27
62764: PUSH
62765: LD_INT 28
62767: PUSH
62768: LD_INT 30
62770: PUSH
62771: LD_INT 31
62773: PUSH
62774: LD_INT 32
62776: PUSH
62777: LD_INT 33
62779: PUSH
62780: LD_INT 34
62782: PUSH
62783: LD_INT 36
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 101
62824: PUSH
62825: LD_INT 102
62827: PUSH
62828: LD_INT 103
62830: PUSH
62831: LD_INT 104
62833: PUSH
62834: LD_INT 105
62836: PUSH
62837: LD_INT 106
62839: PUSH
62840: LD_INT 107
62842: PUSH
62843: LD_INT 108
62845: PUSH
62846: LD_INT 109
62848: PUSH
62849: LD_INT 110
62851: PUSH
62852: LD_INT 111
62854: PUSH
62855: LD_INT 112
62857: PUSH
62858: LD_INT 113
62860: PUSH
62861: LD_INT 114
62863: PUSH
62864: LD_INT 116
62866: PUSH
62867: LD_INT 117
62869: PUSH
62870: LD_INT 118
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: ST_TO_ADDR
62896: GO 64351
62898: LD_INT 13
62900: DOUBLE
62901: EQUAL
62902: IFTRUE 62906
62904: GO 63114
62906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
62907: LD_ADDR_VAR 0 2
62911: PUSH
62912: LD_INT 1
62914: PUSH
62915: LD_INT 2
62917: PUSH
62918: LD_INT 3
62920: PUSH
62921: LD_INT 4
62923: PUSH
62924: LD_INT 5
62926: PUSH
62927: LD_INT 8
62929: PUSH
62930: LD_INT 9
62932: PUSH
62933: LD_INT 10
62935: PUSH
62936: LD_INT 11
62938: PUSH
62939: LD_INT 12
62941: PUSH
62942: LD_INT 14
62944: PUSH
62945: LD_INT 15
62947: PUSH
62948: LD_INT 16
62950: PUSH
62951: LD_INT 17
62953: PUSH
62954: LD_INT 18
62956: PUSH
62957: LD_INT 19
62959: PUSH
62960: LD_INT 20
62962: PUSH
62963: LD_INT 21
62965: PUSH
62966: LD_INT 22
62968: PUSH
62969: LD_INT 23
62971: PUSH
62972: LD_INT 24
62974: PUSH
62975: LD_INT 25
62977: PUSH
62978: LD_INT 26
62980: PUSH
62981: LD_INT 27
62983: PUSH
62984: LD_INT 28
62986: PUSH
62987: LD_INT 30
62989: PUSH
62990: LD_INT 31
62992: PUSH
62993: LD_INT 32
62995: PUSH
62996: LD_INT 33
62998: PUSH
62999: LD_INT 34
63001: PUSH
63002: LD_INT 36
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 101
63040: PUSH
63041: LD_INT 102
63043: PUSH
63044: LD_INT 103
63046: PUSH
63047: LD_INT 104
63049: PUSH
63050: LD_INT 105
63052: PUSH
63053: LD_INT 106
63055: PUSH
63056: LD_INT 107
63058: PUSH
63059: LD_INT 108
63061: PUSH
63062: LD_INT 109
63064: PUSH
63065: LD_INT 110
63067: PUSH
63068: LD_INT 111
63070: PUSH
63071: LD_INT 112
63073: PUSH
63074: LD_INT 113
63076: PUSH
63077: LD_INT 114
63079: PUSH
63080: LD_INT 116
63082: PUSH
63083: LD_INT 117
63085: PUSH
63086: LD_INT 118
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: ST_TO_ADDR
63112: GO 64351
63114: LD_INT 14
63116: DOUBLE
63117: EQUAL
63118: IFTRUE 63122
63120: GO 63346
63122: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
63123: LD_ADDR_VAR 0 2
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: LD_INT 2
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: LD_INT 4
63139: PUSH
63140: LD_INT 5
63142: PUSH
63143: LD_INT 6
63145: PUSH
63146: LD_INT 7
63148: PUSH
63149: LD_INT 8
63151: PUSH
63152: LD_INT 9
63154: PUSH
63155: LD_INT 10
63157: PUSH
63158: LD_INT 11
63160: PUSH
63161: LD_INT 12
63163: PUSH
63164: LD_INT 13
63166: PUSH
63167: LD_INT 14
63169: PUSH
63170: LD_INT 15
63172: PUSH
63173: LD_INT 16
63175: PUSH
63176: LD_INT 17
63178: PUSH
63179: LD_INT 18
63181: PUSH
63182: LD_INT 19
63184: PUSH
63185: LD_INT 20
63187: PUSH
63188: LD_INT 21
63190: PUSH
63191: LD_INT 22
63193: PUSH
63194: LD_INT 23
63196: PUSH
63197: LD_INT 24
63199: PUSH
63200: LD_INT 25
63202: PUSH
63203: LD_INT 26
63205: PUSH
63206: LD_INT 27
63208: PUSH
63209: LD_INT 28
63211: PUSH
63212: LD_INT 29
63214: PUSH
63215: LD_INT 30
63217: PUSH
63218: LD_INT 31
63220: PUSH
63221: LD_INT 32
63223: PUSH
63224: LD_INT 33
63226: PUSH
63227: LD_INT 34
63229: PUSH
63230: LD_INT 36
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 101
63272: PUSH
63273: LD_INT 102
63275: PUSH
63276: LD_INT 103
63278: PUSH
63279: LD_INT 104
63281: PUSH
63282: LD_INT 105
63284: PUSH
63285: LD_INT 106
63287: PUSH
63288: LD_INT 107
63290: PUSH
63291: LD_INT 108
63293: PUSH
63294: LD_INT 109
63296: PUSH
63297: LD_INT 110
63299: PUSH
63300: LD_INT 111
63302: PUSH
63303: LD_INT 112
63305: PUSH
63306: LD_INT 113
63308: PUSH
63309: LD_INT 114
63311: PUSH
63312: LD_INT 116
63314: PUSH
63315: LD_INT 117
63317: PUSH
63318: LD_INT 118
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: ST_TO_ADDR
63344: GO 64351
63346: LD_INT 15
63348: DOUBLE
63349: EQUAL
63350: IFTRUE 63354
63352: GO 63578
63354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
63355: LD_ADDR_VAR 0 2
63359: PUSH
63360: LD_INT 1
63362: PUSH
63363: LD_INT 2
63365: PUSH
63366: LD_INT 3
63368: PUSH
63369: LD_INT 4
63371: PUSH
63372: LD_INT 5
63374: PUSH
63375: LD_INT 6
63377: PUSH
63378: LD_INT 7
63380: PUSH
63381: LD_INT 8
63383: PUSH
63384: LD_INT 9
63386: PUSH
63387: LD_INT 10
63389: PUSH
63390: LD_INT 11
63392: PUSH
63393: LD_INT 12
63395: PUSH
63396: LD_INT 13
63398: PUSH
63399: LD_INT 14
63401: PUSH
63402: LD_INT 15
63404: PUSH
63405: LD_INT 16
63407: PUSH
63408: LD_INT 17
63410: PUSH
63411: LD_INT 18
63413: PUSH
63414: LD_INT 19
63416: PUSH
63417: LD_INT 20
63419: PUSH
63420: LD_INT 21
63422: PUSH
63423: LD_INT 22
63425: PUSH
63426: LD_INT 23
63428: PUSH
63429: LD_INT 24
63431: PUSH
63432: LD_INT 25
63434: PUSH
63435: LD_INT 26
63437: PUSH
63438: LD_INT 27
63440: PUSH
63441: LD_INT 28
63443: PUSH
63444: LD_INT 29
63446: PUSH
63447: LD_INT 30
63449: PUSH
63450: LD_INT 31
63452: PUSH
63453: LD_INT 32
63455: PUSH
63456: LD_INT 33
63458: PUSH
63459: LD_INT 34
63461: PUSH
63462: LD_INT 36
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 101
63504: PUSH
63505: LD_INT 102
63507: PUSH
63508: LD_INT 103
63510: PUSH
63511: LD_INT 104
63513: PUSH
63514: LD_INT 105
63516: PUSH
63517: LD_INT 106
63519: PUSH
63520: LD_INT 107
63522: PUSH
63523: LD_INT 108
63525: PUSH
63526: LD_INT 109
63528: PUSH
63529: LD_INT 110
63531: PUSH
63532: LD_INT 111
63534: PUSH
63535: LD_INT 112
63537: PUSH
63538: LD_INT 113
63540: PUSH
63541: LD_INT 114
63543: PUSH
63544: LD_INT 116
63546: PUSH
63547: LD_INT 117
63549: PUSH
63550: LD_INT 118
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: ST_TO_ADDR
63576: GO 64351
63578: LD_INT 16
63580: DOUBLE
63581: EQUAL
63582: IFTRUE 63586
63584: GO 63722
63586: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
63587: LD_ADDR_VAR 0 2
63591: PUSH
63592: LD_INT 2
63594: PUSH
63595: LD_INT 4
63597: PUSH
63598: LD_INT 5
63600: PUSH
63601: LD_INT 7
63603: PUSH
63604: LD_INT 11
63606: PUSH
63607: LD_INT 12
63609: PUSH
63610: LD_INT 15
63612: PUSH
63613: LD_INT 16
63615: PUSH
63616: LD_INT 20
63618: PUSH
63619: LD_INT 21
63621: PUSH
63622: LD_INT 22
63624: PUSH
63625: LD_INT 23
63627: PUSH
63628: LD_INT 25
63630: PUSH
63631: LD_INT 26
63633: PUSH
63634: LD_INT 30
63636: PUSH
63637: LD_INT 31
63639: PUSH
63640: LD_INT 32
63642: PUSH
63643: LD_INT 33
63645: PUSH
63646: LD_INT 34
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 101
63672: PUSH
63673: LD_INT 102
63675: PUSH
63676: LD_INT 103
63678: PUSH
63679: LD_INT 106
63681: PUSH
63682: LD_INT 108
63684: PUSH
63685: LD_INT 112
63687: PUSH
63688: LD_INT 113
63690: PUSH
63691: LD_INT 114
63693: PUSH
63694: LD_INT 116
63696: PUSH
63697: LD_INT 117
63699: PUSH
63700: LD_INT 118
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: ST_TO_ADDR
63720: GO 64351
63722: LD_INT 17
63724: DOUBLE
63725: EQUAL
63726: IFTRUE 63730
63728: GO 63954
63730: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
63731: LD_ADDR_VAR 0 2
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: LD_INT 2
63741: PUSH
63742: LD_INT 3
63744: PUSH
63745: LD_INT 4
63747: PUSH
63748: LD_INT 5
63750: PUSH
63751: LD_INT 6
63753: PUSH
63754: LD_INT 7
63756: PUSH
63757: LD_INT 8
63759: PUSH
63760: LD_INT 9
63762: PUSH
63763: LD_INT 10
63765: PUSH
63766: LD_INT 11
63768: PUSH
63769: LD_INT 12
63771: PUSH
63772: LD_INT 13
63774: PUSH
63775: LD_INT 14
63777: PUSH
63778: LD_INT 15
63780: PUSH
63781: LD_INT 16
63783: PUSH
63784: LD_INT 17
63786: PUSH
63787: LD_INT 18
63789: PUSH
63790: LD_INT 19
63792: PUSH
63793: LD_INT 20
63795: PUSH
63796: LD_INT 21
63798: PUSH
63799: LD_INT 22
63801: PUSH
63802: LD_INT 23
63804: PUSH
63805: LD_INT 24
63807: PUSH
63808: LD_INT 25
63810: PUSH
63811: LD_INT 26
63813: PUSH
63814: LD_INT 27
63816: PUSH
63817: LD_INT 28
63819: PUSH
63820: LD_INT 29
63822: PUSH
63823: LD_INT 30
63825: PUSH
63826: LD_INT 31
63828: PUSH
63829: LD_INT 32
63831: PUSH
63832: LD_INT 33
63834: PUSH
63835: LD_INT 34
63837: PUSH
63838: LD_INT 36
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 101
63880: PUSH
63881: LD_INT 102
63883: PUSH
63884: LD_INT 103
63886: PUSH
63887: LD_INT 104
63889: PUSH
63890: LD_INT 105
63892: PUSH
63893: LD_INT 106
63895: PUSH
63896: LD_INT 107
63898: PUSH
63899: LD_INT 108
63901: PUSH
63902: LD_INT 109
63904: PUSH
63905: LD_INT 110
63907: PUSH
63908: LD_INT 111
63910: PUSH
63911: LD_INT 112
63913: PUSH
63914: LD_INT 113
63916: PUSH
63917: LD_INT 114
63919: PUSH
63920: LD_INT 116
63922: PUSH
63923: LD_INT 117
63925: PUSH
63926: LD_INT 118
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: ST_TO_ADDR
63952: GO 64351
63954: LD_INT 18
63956: DOUBLE
63957: EQUAL
63958: IFTRUE 63962
63960: GO 64110
63962: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
63963: LD_ADDR_VAR 0 2
63967: PUSH
63968: LD_INT 2
63970: PUSH
63971: LD_INT 4
63973: PUSH
63974: LD_INT 5
63976: PUSH
63977: LD_INT 7
63979: PUSH
63980: LD_INT 11
63982: PUSH
63983: LD_INT 12
63985: PUSH
63986: LD_INT 15
63988: PUSH
63989: LD_INT 16
63991: PUSH
63992: LD_INT 20
63994: PUSH
63995: LD_INT 21
63997: PUSH
63998: LD_INT 22
64000: PUSH
64001: LD_INT 23
64003: PUSH
64004: LD_INT 25
64006: PUSH
64007: LD_INT 26
64009: PUSH
64010: LD_INT 30
64012: PUSH
64013: LD_INT 31
64015: PUSH
64016: LD_INT 32
64018: PUSH
64019: LD_INT 33
64021: PUSH
64022: LD_INT 34
64024: PUSH
64025: LD_INT 35
64027: PUSH
64028: LD_INT 36
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 101
64056: PUSH
64057: LD_INT 102
64059: PUSH
64060: LD_INT 103
64062: PUSH
64063: LD_INT 106
64065: PUSH
64066: LD_INT 108
64068: PUSH
64069: LD_INT 112
64071: PUSH
64072: LD_INT 113
64074: PUSH
64075: LD_INT 114
64077: PUSH
64078: LD_INT 115
64080: PUSH
64081: LD_INT 116
64083: PUSH
64084: LD_INT 117
64086: PUSH
64087: LD_INT 118
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: ST_TO_ADDR
64108: GO 64351
64110: LD_INT 19
64112: DOUBLE
64113: EQUAL
64114: IFTRUE 64118
64116: GO 64350
64118: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
64119: LD_ADDR_VAR 0 2
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: LD_INT 3
64132: PUSH
64133: LD_INT 4
64135: PUSH
64136: LD_INT 5
64138: PUSH
64139: LD_INT 6
64141: PUSH
64142: LD_INT 7
64144: PUSH
64145: LD_INT 8
64147: PUSH
64148: LD_INT 9
64150: PUSH
64151: LD_INT 10
64153: PUSH
64154: LD_INT 11
64156: PUSH
64157: LD_INT 12
64159: PUSH
64160: LD_INT 13
64162: PUSH
64163: LD_INT 14
64165: PUSH
64166: LD_INT 15
64168: PUSH
64169: LD_INT 16
64171: PUSH
64172: LD_INT 17
64174: PUSH
64175: LD_INT 18
64177: PUSH
64178: LD_INT 19
64180: PUSH
64181: LD_INT 20
64183: PUSH
64184: LD_INT 21
64186: PUSH
64187: LD_INT 22
64189: PUSH
64190: LD_INT 23
64192: PUSH
64193: LD_INT 24
64195: PUSH
64196: LD_INT 25
64198: PUSH
64199: LD_INT 26
64201: PUSH
64202: LD_INT 27
64204: PUSH
64205: LD_INT 28
64207: PUSH
64208: LD_INT 29
64210: PUSH
64211: LD_INT 30
64213: PUSH
64214: LD_INT 31
64216: PUSH
64217: LD_INT 32
64219: PUSH
64220: LD_INT 33
64222: PUSH
64223: LD_INT 34
64225: PUSH
64226: LD_INT 35
64228: PUSH
64229: LD_INT 36
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 101
64272: PUSH
64273: LD_INT 102
64275: PUSH
64276: LD_INT 103
64278: PUSH
64279: LD_INT 104
64281: PUSH
64282: LD_INT 105
64284: PUSH
64285: LD_INT 106
64287: PUSH
64288: LD_INT 107
64290: PUSH
64291: LD_INT 108
64293: PUSH
64294: LD_INT 109
64296: PUSH
64297: LD_INT 110
64299: PUSH
64300: LD_INT 111
64302: PUSH
64303: LD_INT 112
64305: PUSH
64306: LD_INT 113
64308: PUSH
64309: LD_INT 114
64311: PUSH
64312: LD_INT 115
64314: PUSH
64315: LD_INT 116
64317: PUSH
64318: LD_INT 117
64320: PUSH
64321: LD_INT 118
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: ST_TO_ADDR
64348: GO 64351
64350: POP
// end else
64351: GO 64582
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
64353: LD_ADDR_VAR 0 2
64357: PUSH
64358: LD_INT 1
64360: PUSH
64361: LD_INT 2
64363: PUSH
64364: LD_INT 3
64366: PUSH
64367: LD_INT 4
64369: PUSH
64370: LD_INT 5
64372: PUSH
64373: LD_INT 6
64375: PUSH
64376: LD_INT 7
64378: PUSH
64379: LD_INT 8
64381: PUSH
64382: LD_INT 9
64384: PUSH
64385: LD_INT 10
64387: PUSH
64388: LD_INT 11
64390: PUSH
64391: LD_INT 12
64393: PUSH
64394: LD_INT 13
64396: PUSH
64397: LD_INT 14
64399: PUSH
64400: LD_INT 15
64402: PUSH
64403: LD_INT 16
64405: PUSH
64406: LD_INT 17
64408: PUSH
64409: LD_INT 18
64411: PUSH
64412: LD_INT 19
64414: PUSH
64415: LD_INT 20
64417: PUSH
64418: LD_INT 21
64420: PUSH
64421: LD_INT 22
64423: PUSH
64424: LD_INT 23
64426: PUSH
64427: LD_INT 24
64429: PUSH
64430: LD_INT 25
64432: PUSH
64433: LD_INT 26
64435: PUSH
64436: LD_INT 27
64438: PUSH
64439: LD_INT 28
64441: PUSH
64442: LD_INT 29
64444: PUSH
64445: LD_INT 30
64447: PUSH
64448: LD_INT 31
64450: PUSH
64451: LD_INT 32
64453: PUSH
64454: LD_INT 33
64456: PUSH
64457: LD_INT 34
64459: PUSH
64460: LD_INT 35
64462: PUSH
64463: LD_INT 36
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 101
64506: PUSH
64507: LD_INT 102
64509: PUSH
64510: LD_INT 103
64512: PUSH
64513: LD_INT 104
64515: PUSH
64516: LD_INT 105
64518: PUSH
64519: LD_INT 106
64521: PUSH
64522: LD_INT 107
64524: PUSH
64525: LD_INT 108
64527: PUSH
64528: LD_INT 109
64530: PUSH
64531: LD_INT 110
64533: PUSH
64534: LD_INT 111
64536: PUSH
64537: LD_INT 112
64539: PUSH
64540: LD_INT 113
64542: PUSH
64543: LD_INT 114
64545: PUSH
64546: LD_INT 115
64548: PUSH
64549: LD_INT 116
64551: PUSH
64552: LD_INT 117
64554: PUSH
64555: LD_INT 118
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: ST_TO_ADDR
// if result then
64582: LD_VAR 0 2
64586: IFFALSE 65372
// begin normal :=  ;
64588: LD_ADDR_VAR 0 5
64592: PUSH
64593: LD_STRING 
64595: ST_TO_ADDR
// hardcore :=  ;
64596: LD_ADDR_VAR 0 6
64600: PUSH
64601: LD_STRING 
64603: ST_TO_ADDR
// active :=  ;
64604: LD_ADDR_VAR 0 7
64608: PUSH
64609: LD_STRING 
64611: ST_TO_ADDR
// for i = 1 to normalCounter do
64612: LD_ADDR_VAR 0 8
64616: PUSH
64617: DOUBLE
64618: LD_INT 1
64620: DEC
64621: ST_TO_ADDR
64622: LD_EXP 39
64626: PUSH
64627: FOR_TO
64628: IFFALSE 64729
// begin tmp := 0 ;
64630: LD_ADDR_VAR 0 3
64634: PUSH
64635: LD_STRING 0
64637: ST_TO_ADDR
// if result [ 1 ] then
64638: LD_VAR 0 2
64642: PUSH
64643: LD_INT 1
64645: ARRAY
64646: IFFALSE 64711
// if result [ 1 ] [ 1 ] = i then
64648: LD_VAR 0 2
64652: PUSH
64653: LD_INT 1
64655: ARRAY
64656: PUSH
64657: LD_INT 1
64659: ARRAY
64660: PUSH
64661: LD_VAR 0 8
64665: EQUAL
64666: IFFALSE 64711
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
64668: LD_ADDR_VAR 0 2
64672: PUSH
64673: LD_VAR 0 2
64677: PPUSH
64678: LD_INT 1
64680: PPUSH
64681: LD_VAR 0 2
64685: PUSH
64686: LD_INT 1
64688: ARRAY
64689: PPUSH
64690: LD_INT 1
64692: PPUSH
64693: CALL_OW 3
64697: PPUSH
64698: CALL_OW 1
64702: ST_TO_ADDR
// tmp := 1 ;
64703: LD_ADDR_VAR 0 3
64707: PUSH
64708: LD_STRING 1
64710: ST_TO_ADDR
// end ; normal := normal & tmp ;
64711: LD_ADDR_VAR 0 5
64715: PUSH
64716: LD_VAR 0 5
64720: PUSH
64721: LD_VAR 0 3
64725: STR
64726: ST_TO_ADDR
// end ;
64727: GO 64627
64729: POP
64730: POP
// for i = 1 to hardcoreCounter do
64731: LD_ADDR_VAR 0 8
64735: PUSH
64736: DOUBLE
64737: LD_INT 1
64739: DEC
64740: ST_TO_ADDR
64741: LD_EXP 40
64745: PUSH
64746: FOR_TO
64747: IFFALSE 64852
// begin tmp := 0 ;
64749: LD_ADDR_VAR 0 3
64753: PUSH
64754: LD_STRING 0
64756: ST_TO_ADDR
// if result [ 2 ] then
64757: LD_VAR 0 2
64761: PUSH
64762: LD_INT 2
64764: ARRAY
64765: IFFALSE 64834
// if result [ 2 ] [ 1 ] = 100 + i then
64767: LD_VAR 0 2
64771: PUSH
64772: LD_INT 2
64774: ARRAY
64775: PUSH
64776: LD_INT 1
64778: ARRAY
64779: PUSH
64780: LD_INT 100
64782: PUSH
64783: LD_VAR 0 8
64787: PLUS
64788: EQUAL
64789: IFFALSE 64834
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
64791: LD_ADDR_VAR 0 2
64795: PUSH
64796: LD_VAR 0 2
64800: PPUSH
64801: LD_INT 2
64803: PPUSH
64804: LD_VAR 0 2
64808: PUSH
64809: LD_INT 2
64811: ARRAY
64812: PPUSH
64813: LD_INT 1
64815: PPUSH
64816: CALL_OW 3
64820: PPUSH
64821: CALL_OW 1
64825: ST_TO_ADDR
// tmp := 1 ;
64826: LD_ADDR_VAR 0 3
64830: PUSH
64831: LD_STRING 1
64833: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
64834: LD_ADDR_VAR 0 6
64838: PUSH
64839: LD_VAR 0 6
64843: PUSH
64844: LD_VAR 0 3
64848: STR
64849: ST_TO_ADDR
// end ;
64850: GO 64746
64852: POP
64853: POP
// if isGameLoad then
64854: LD_VAR 0 1
64858: IFFALSE 65333
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
64860: LD_ADDR_VAR 0 4
64864: PUSH
64865: LD_EXP 43
64869: PUSH
64870: LD_EXP 42
64874: PUSH
64875: LD_EXP 44
64879: PUSH
64880: LD_EXP 41
64884: PUSH
64885: LD_EXP 45
64889: PUSH
64890: LD_EXP 46
64894: PUSH
64895: LD_EXP 47
64899: PUSH
64900: LD_EXP 48
64904: PUSH
64905: LD_EXP 49
64909: PUSH
64910: LD_EXP 50
64914: PUSH
64915: LD_EXP 51
64919: PUSH
64920: LD_EXP 52
64924: PUSH
64925: LD_EXP 53
64929: PUSH
64930: LD_EXP 54
64934: PUSH
64935: LD_EXP 62
64939: PUSH
64940: LD_EXP 63
64944: PUSH
64945: LD_EXP 64
64949: PUSH
64950: LD_EXP 65
64954: PUSH
64955: LD_EXP 67
64959: PUSH
64960: LD_EXP 68
64964: PUSH
64965: LD_EXP 69
64969: PUSH
64970: LD_EXP 72
64974: PUSH
64975: LD_EXP 74
64979: PUSH
64980: LD_EXP 75
64984: PUSH
64985: LD_EXP 76
64989: PUSH
64990: LD_EXP 78
64994: PUSH
64995: LD_EXP 79
64999: PUSH
65000: LD_EXP 82
65004: PUSH
65005: LD_EXP 83
65009: PUSH
65010: LD_EXP 84
65014: PUSH
65015: LD_EXP 85
65019: PUSH
65020: LD_EXP 86
65024: PUSH
65025: LD_EXP 87
65029: PUSH
65030: LD_EXP 88
65034: PUSH
65035: LD_EXP 89
65039: PUSH
65040: LD_EXP 90
65044: PUSH
65045: LD_EXP 55
65049: PUSH
65050: LD_EXP 56
65054: PUSH
65055: LD_EXP 59
65059: PUSH
65060: LD_EXP 60
65064: PUSH
65065: LD_EXP 61
65069: PUSH
65070: LD_EXP 57
65074: PUSH
65075: LD_EXP 58
65079: PUSH
65080: LD_EXP 66
65084: PUSH
65085: LD_EXP 70
65089: PUSH
65090: LD_EXP 71
65094: PUSH
65095: LD_EXP 73
65099: PUSH
65100: LD_EXP 77
65104: PUSH
65105: LD_EXP 80
65109: PUSH
65110: LD_EXP 81
65114: PUSH
65115: LD_EXP 91
65119: PUSH
65120: LD_EXP 92
65124: PUSH
65125: LD_EXP 93
65129: PUSH
65130: LD_EXP 94
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: ST_TO_ADDR
// tmp :=  ;
65191: LD_ADDR_VAR 0 3
65195: PUSH
65196: LD_STRING 
65198: ST_TO_ADDR
// for i = 1 to normalCounter do
65199: LD_ADDR_VAR 0 8
65203: PUSH
65204: DOUBLE
65205: LD_INT 1
65207: DEC
65208: ST_TO_ADDR
65209: LD_EXP 39
65213: PUSH
65214: FOR_TO
65215: IFFALSE 65251
// begin if flags [ i ] then
65217: LD_VAR 0 4
65221: PUSH
65222: LD_VAR 0 8
65226: ARRAY
65227: IFFALSE 65249
// tmp := tmp & i & ; ;
65229: LD_ADDR_VAR 0 3
65233: PUSH
65234: LD_VAR 0 3
65238: PUSH
65239: LD_VAR 0 8
65243: STR
65244: PUSH
65245: LD_STRING ;
65247: STR
65248: ST_TO_ADDR
// end ;
65249: GO 65214
65251: POP
65252: POP
// for i = 1 to hardcoreCounter do
65253: LD_ADDR_VAR 0 8
65257: PUSH
65258: DOUBLE
65259: LD_INT 1
65261: DEC
65262: ST_TO_ADDR
65263: LD_EXP 40
65267: PUSH
65268: FOR_TO
65269: IFFALSE 65315
// begin if flags [ normalCounter + i ] then
65271: LD_VAR 0 4
65275: PUSH
65276: LD_EXP 39
65280: PUSH
65281: LD_VAR 0 8
65285: PLUS
65286: ARRAY
65287: IFFALSE 65313
// tmp := tmp & ( 100 + i ) & ; ;
65289: LD_ADDR_VAR 0 3
65293: PUSH
65294: LD_VAR 0 3
65298: PUSH
65299: LD_INT 100
65301: PUSH
65302: LD_VAR 0 8
65306: PLUS
65307: STR
65308: PUSH
65309: LD_STRING ;
65311: STR
65312: ST_TO_ADDR
// end ;
65313: GO 65268
65315: POP
65316: POP
// if tmp then
65317: LD_VAR 0 3
65321: IFFALSE 65333
// active := tmp ;
65323: LD_ADDR_VAR 0 7
65327: PUSH
65328: LD_VAR 0 3
65332: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
65333: LD_STRING getStreamItemsFromMission("
65335: PUSH
65336: LD_VAR 0 5
65340: STR
65341: PUSH
65342: LD_STRING ","
65344: STR
65345: PUSH
65346: LD_VAR 0 6
65350: STR
65351: PUSH
65352: LD_STRING ","
65354: STR
65355: PUSH
65356: LD_VAR 0 7
65360: STR
65361: PUSH
65362: LD_STRING ")
65364: STR
65365: PPUSH
65366: CALL_OW 559
// end else
65370: GO 65379
// ToLua ( getStreamItemsFromMission("","","") ) ;
65372: LD_STRING getStreamItemsFromMission("","","")
65374: PPUSH
65375: CALL_OW 559
// end ;
65379: LD_VAR 0 2
65383: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
65384: LD_EXP 38
65388: IFFALSE 65396
65390: PUSH
65391: LD_EXP 43
65395: AND
65396: IFFALSE 65520
65398: GO 65400
65400: DISABLE
65401: LD_INT 0
65403: PPUSH
65404: PPUSH
// begin enable ;
65405: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
65406: LD_ADDR_VAR 0 2
65410: PUSH
65411: LD_INT 22
65413: PUSH
65414: LD_OWVAR 2
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: LD_INT 34
65428: PUSH
65429: LD_INT 7
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 34
65438: PUSH
65439: LD_INT 45
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 34
65448: PUSH
65449: LD_INT 28
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 34
65458: PUSH
65459: LD_INT 47
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PPUSH
65477: CALL_OW 69
65481: ST_TO_ADDR
// if not tmp then
65482: LD_VAR 0 2
65486: NOT
65487: IFFALSE 65491
// exit ;
65489: GO 65520
// for i in tmp do
65491: LD_ADDR_VAR 0 1
65495: PUSH
65496: LD_VAR 0 2
65500: PUSH
65501: FOR_IN
65502: IFFALSE 65518
// begin SetLives ( i , 0 ) ;
65504: LD_VAR 0 1
65508: PPUSH
65509: LD_INT 0
65511: PPUSH
65512: CALL_OW 234
// end ;
65516: GO 65501
65518: POP
65519: POP
// end ;
65520: PPOPN 2
65522: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
65523: LD_EXP 38
65527: IFFALSE 65535
65529: PUSH
65530: LD_EXP 44
65534: AND
65535: IFFALSE 65619
65537: GO 65539
65539: DISABLE
65540: LD_INT 0
65542: PPUSH
65543: PPUSH
// begin enable ;
65544: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
65545: LD_ADDR_VAR 0 2
65549: PUSH
65550: LD_INT 22
65552: PUSH
65553: LD_OWVAR 2
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 32
65564: PUSH
65565: LD_INT 3
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PPUSH
65576: CALL_OW 69
65580: ST_TO_ADDR
// if not tmp then
65581: LD_VAR 0 2
65585: NOT
65586: IFFALSE 65590
// exit ;
65588: GO 65619
// for i in tmp do
65590: LD_ADDR_VAR 0 1
65594: PUSH
65595: LD_VAR 0 2
65599: PUSH
65600: FOR_IN
65601: IFFALSE 65617
// begin SetLives ( i , 0 ) ;
65603: LD_VAR 0 1
65607: PPUSH
65608: LD_INT 0
65610: PPUSH
65611: CALL_OW 234
// end ;
65615: GO 65600
65617: POP
65618: POP
// end ;
65619: PPOPN 2
65621: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
65622: LD_EXP 38
65626: IFFALSE 65634
65628: PUSH
65629: LD_EXP 41
65633: AND
65634: IFFALSE 65727
65636: GO 65638
65638: DISABLE
65639: LD_INT 0
65641: PPUSH
// begin enable ;
65642: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
65643: LD_ADDR_VAR 0 1
65647: PUSH
65648: LD_INT 22
65650: PUSH
65651: LD_OWVAR 2
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 2
65662: PUSH
65663: LD_INT 25
65665: PUSH
65666: LD_INT 5
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 25
65675: PUSH
65676: LD_INT 9
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 25
65685: PUSH
65686: LD_INT 8
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PPUSH
65703: CALL_OW 69
65707: PUSH
65708: FOR_IN
65709: IFFALSE 65725
// begin SetClass ( i , 1 ) ;
65711: LD_VAR 0 1
65715: PPUSH
65716: LD_INT 1
65718: PPUSH
65719: CALL_OW 336
// end ;
65723: GO 65708
65725: POP
65726: POP
// end ;
65727: PPOPN 1
65729: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
65730: LD_EXP 38
65734: IFFALSE 65742
65736: PUSH
65737: LD_EXP 42
65741: AND
65742: IFFALSE 65754
65744: PUSH
65745: LD_OWVAR 65
65749: PUSH
65750: LD_INT 7
65752: LESS
65753: AND
65754: IFFALSE 65768
65756: GO 65758
65758: DISABLE
// begin enable ;
65759: ENABLE
// game_speed := 7 ;
65760: LD_ADDR_OWVAR 65
65764: PUSH
65765: LD_INT 7
65767: ST_TO_ADDR
// end ;
65768: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
65769: LD_EXP 38
65773: IFFALSE 65781
65775: PUSH
65776: LD_EXP 45
65780: AND
65781: IFFALSE 65983
65783: GO 65785
65785: DISABLE
65786: LD_INT 0
65788: PPUSH
65789: PPUSH
65790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65791: LD_ADDR_VAR 0 3
65795: PUSH
65796: LD_INT 81
65798: PUSH
65799: LD_OWVAR 2
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 21
65810: PUSH
65811: LD_INT 1
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PPUSH
65822: CALL_OW 69
65826: ST_TO_ADDR
// if not tmp then
65827: LD_VAR 0 3
65831: NOT
65832: IFFALSE 65836
// exit ;
65834: GO 65983
// if tmp > 5 then
65836: LD_VAR 0 3
65840: PUSH
65841: LD_INT 5
65843: GREATER
65844: IFFALSE 65856
// k := 5 else
65846: LD_ADDR_VAR 0 2
65850: PUSH
65851: LD_INT 5
65853: ST_TO_ADDR
65854: GO 65866
// k := tmp ;
65856: LD_ADDR_VAR 0 2
65860: PUSH
65861: LD_VAR 0 3
65865: ST_TO_ADDR
// for i := 1 to k do
65866: LD_ADDR_VAR 0 1
65870: PUSH
65871: DOUBLE
65872: LD_INT 1
65874: DEC
65875: ST_TO_ADDR
65876: LD_VAR 0 2
65880: PUSH
65881: FOR_TO
65882: IFFALSE 65981
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
65884: LD_VAR 0 3
65888: PUSH
65889: LD_VAR 0 1
65893: ARRAY
65894: PPUSH
65895: LD_VAR 0 1
65899: PUSH
65900: LD_INT 4
65902: MOD
65903: PUSH
65904: LD_INT 1
65906: PLUS
65907: PPUSH
65908: CALL_OW 259
65912: PUSH
65913: LD_INT 10
65915: LESS
65916: IFFALSE 65979
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
65918: LD_VAR 0 3
65922: PUSH
65923: LD_VAR 0 1
65927: ARRAY
65928: PPUSH
65929: LD_VAR 0 1
65933: PUSH
65934: LD_INT 4
65936: MOD
65937: PUSH
65938: LD_INT 1
65940: PLUS
65941: PPUSH
65942: LD_VAR 0 3
65946: PUSH
65947: LD_VAR 0 1
65951: ARRAY
65952: PPUSH
65953: LD_VAR 0 1
65957: PUSH
65958: LD_INT 4
65960: MOD
65961: PUSH
65962: LD_INT 1
65964: PLUS
65965: PPUSH
65966: CALL_OW 259
65970: PUSH
65971: LD_INT 1
65973: PLUS
65974: PPUSH
65975: CALL_OW 237
65979: GO 65881
65981: POP
65982: POP
// end ;
65983: PPOPN 3
65985: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
65986: LD_EXP 38
65990: IFFALSE 65998
65992: PUSH
65993: LD_EXP 46
65997: AND
65998: IFFALSE 66018
66000: GO 66002
66002: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
66003: LD_INT 4
66005: PPUSH
66006: LD_OWVAR 2
66010: PPUSH
66011: LD_INT 0
66013: PPUSH
66014: CALL_OW 324
66018: END
// every 0 0$1 trigger StreamModeActive and sShovel do
66019: LD_EXP 38
66023: IFFALSE 66031
66025: PUSH
66026: LD_EXP 75
66030: AND
66031: IFFALSE 66051
66033: GO 66035
66035: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
66036: LD_INT 19
66038: PPUSH
66039: LD_OWVAR 2
66043: PPUSH
66044: LD_INT 0
66046: PPUSH
66047: CALL_OW 324
66051: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
66052: LD_EXP 38
66056: IFFALSE 66064
66058: PUSH
66059: LD_EXP 47
66063: AND
66064: IFFALSE 66166
66066: GO 66068
66068: DISABLE
66069: LD_INT 0
66071: PPUSH
66072: PPUSH
// begin enable ;
66073: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
66074: LD_ADDR_VAR 0 2
66078: PUSH
66079: LD_INT 22
66081: PUSH
66082: LD_OWVAR 2
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: PUSH
66094: LD_INT 34
66096: PUSH
66097: LD_INT 11
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 34
66106: PUSH
66107: LD_INT 30
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: LIST
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PPUSH
66123: CALL_OW 69
66127: ST_TO_ADDR
// if not tmp then
66128: LD_VAR 0 2
66132: NOT
66133: IFFALSE 66137
// exit ;
66135: GO 66166
// for i in tmp do
66137: LD_ADDR_VAR 0 1
66141: PUSH
66142: LD_VAR 0 2
66146: PUSH
66147: FOR_IN
66148: IFFALSE 66164
// begin SetLives ( i , 0 ) ;
66150: LD_VAR 0 1
66154: PPUSH
66155: LD_INT 0
66157: PPUSH
66158: CALL_OW 234
// end ;
66162: GO 66147
66164: POP
66165: POP
// end ;
66166: PPOPN 2
66168: END
// every 0 0$1 trigger StreamModeActive and sBunker do
66169: LD_EXP 38
66173: IFFALSE 66181
66175: PUSH
66176: LD_EXP 48
66180: AND
66181: IFFALSE 66201
66183: GO 66185
66185: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
66186: LD_INT 32
66188: PPUSH
66189: LD_OWVAR 2
66193: PPUSH
66194: LD_INT 0
66196: PPUSH
66197: CALL_OW 324
66201: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
66202: LD_EXP 38
66206: IFFALSE 66214
66208: PUSH
66209: LD_EXP 49
66213: AND
66214: IFFALSE 66397
66216: GO 66218
66218: DISABLE
66219: LD_INT 0
66221: PPUSH
66222: PPUSH
66223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
66224: LD_ADDR_VAR 0 2
66228: PUSH
66229: LD_INT 22
66231: PUSH
66232: LD_OWVAR 2
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 33
66243: PUSH
66244: LD_INT 3
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PPUSH
66255: CALL_OW 69
66259: ST_TO_ADDR
// if not tmp then
66260: LD_VAR 0 2
66264: NOT
66265: IFFALSE 66269
// exit ;
66267: GO 66397
// side := 0 ;
66269: LD_ADDR_VAR 0 3
66273: PUSH
66274: LD_INT 0
66276: ST_TO_ADDR
// for i := 1 to 8 do
66277: LD_ADDR_VAR 0 1
66281: PUSH
66282: DOUBLE
66283: LD_INT 1
66285: DEC
66286: ST_TO_ADDR
66287: LD_INT 8
66289: PUSH
66290: FOR_TO
66291: IFFALSE 66341
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
66293: LD_OWVAR 2
66297: PUSH
66298: LD_VAR 0 1
66302: NONEQUAL
66303: IFFALSE 66325
66305: PUSH
66306: LD_OWVAR 2
66310: PPUSH
66311: LD_VAR 0 1
66315: PPUSH
66316: CALL_OW 81
66320: PUSH
66321: LD_INT 2
66323: EQUAL
66324: AND
66325: IFFALSE 66339
// begin side := i ;
66327: LD_ADDR_VAR 0 3
66331: PUSH
66332: LD_VAR 0 1
66336: ST_TO_ADDR
// break ;
66337: GO 66341
// end ;
66339: GO 66290
66341: POP
66342: POP
// if not side then
66343: LD_VAR 0 3
66347: NOT
66348: IFFALSE 66352
// exit ;
66350: GO 66397
// for i := 1 to tmp do
66352: LD_ADDR_VAR 0 1
66356: PUSH
66357: DOUBLE
66358: LD_INT 1
66360: DEC
66361: ST_TO_ADDR
66362: LD_VAR 0 2
66366: PUSH
66367: FOR_TO
66368: IFFALSE 66395
// if Prob ( 60 ) then
66370: LD_INT 60
66372: PPUSH
66373: CALL_OW 13
66377: IFFALSE 66393
// SetSide ( i , side ) ;
66379: LD_VAR 0 1
66383: PPUSH
66384: LD_VAR 0 3
66388: PPUSH
66389: CALL_OW 235
66393: GO 66367
66395: POP
66396: POP
// end ;
66397: PPOPN 3
66399: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
66400: LD_EXP 38
66404: IFFALSE 66412
66406: PUSH
66407: LD_EXP 51
66411: AND
66412: IFFALSE 66531
66414: GO 66416
66416: DISABLE
66417: LD_INT 0
66419: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
66420: LD_ADDR_VAR 0 1
66424: PUSH
66425: LD_INT 22
66427: PUSH
66428: LD_OWVAR 2
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 21
66439: PUSH
66440: LD_INT 1
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 3
66449: PUSH
66450: LD_INT 23
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: LIST
66468: PPUSH
66469: CALL_OW 69
66473: PUSH
66474: FOR_IN
66475: IFFALSE 66529
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
66477: LD_VAR 0 1
66481: PPUSH
66482: CALL_OW 257
66486: PUSH
66487: LD_INT 1
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: LD_INT 3
66495: PUSH
66496: LD_INT 4
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: IN
66505: IFFALSE 66527
// SetClass ( un , rand ( 1 , 4 ) ) ;
66507: LD_VAR 0 1
66511: PPUSH
66512: LD_INT 1
66514: PPUSH
66515: LD_INT 4
66517: PPUSH
66518: CALL_OW 12
66522: PPUSH
66523: CALL_OW 336
66527: GO 66474
66529: POP
66530: POP
// end ;
66531: PPOPN 1
66533: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
66534: LD_EXP 38
66538: IFFALSE 66546
66540: PUSH
66541: LD_EXP 50
66545: AND
66546: IFFALSE 66625
66548: GO 66550
66550: DISABLE
66551: LD_INT 0
66553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66554: LD_ADDR_VAR 0 1
66558: PUSH
66559: LD_INT 22
66561: PUSH
66562: LD_OWVAR 2
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 21
66573: PUSH
66574: LD_INT 3
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PPUSH
66585: CALL_OW 69
66589: ST_TO_ADDR
// if not tmp then
66590: LD_VAR 0 1
66594: NOT
66595: IFFALSE 66599
// exit ;
66597: GO 66625
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
66599: LD_VAR 0 1
66603: PUSH
66604: LD_INT 1
66606: PPUSH
66607: LD_VAR 0 1
66611: PPUSH
66612: CALL_OW 12
66616: ARRAY
66617: PPUSH
66618: LD_INT 100
66620: PPUSH
66621: CALL_OW 234
// end ;
66625: PPOPN 1
66627: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
66628: LD_EXP 38
66632: IFFALSE 66640
66634: PUSH
66635: LD_EXP 52
66639: AND
66640: IFFALSE 66738
66642: GO 66644
66644: DISABLE
66645: LD_INT 0
66647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66648: LD_ADDR_VAR 0 1
66652: PUSH
66653: LD_INT 22
66655: PUSH
66656: LD_OWVAR 2
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 21
66667: PUSH
66668: LD_INT 1
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PPUSH
66679: CALL_OW 69
66683: ST_TO_ADDR
// if not tmp then
66684: LD_VAR 0 1
66688: NOT
66689: IFFALSE 66693
// exit ;
66691: GO 66738
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
66693: LD_VAR 0 1
66697: PUSH
66698: LD_INT 1
66700: PPUSH
66701: LD_VAR 0 1
66705: PPUSH
66706: CALL_OW 12
66710: ARRAY
66711: PPUSH
66712: LD_INT 1
66714: PPUSH
66715: LD_INT 4
66717: PPUSH
66718: CALL_OW 12
66722: PPUSH
66723: LD_INT 3000
66725: PPUSH
66726: LD_INT 9000
66728: PPUSH
66729: CALL_OW 12
66733: PPUSH
66734: CALL_OW 492
// end ;
66738: PPOPN 1
66740: END
// every 0 0$1 trigger StreamModeActive and sDepot do
66741: LD_EXP 38
66745: IFFALSE 66753
66747: PUSH
66748: LD_EXP 53
66752: AND
66753: IFFALSE 66773
66755: GO 66757
66757: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
66758: LD_INT 1
66760: PPUSH
66761: LD_OWVAR 2
66765: PPUSH
66766: LD_INT 0
66768: PPUSH
66769: CALL_OW 324
66773: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
66774: LD_EXP 38
66778: IFFALSE 66786
66780: PUSH
66781: LD_EXP 54
66785: AND
66786: IFFALSE 66869
66788: GO 66790
66790: DISABLE
66791: LD_INT 0
66793: PPUSH
66794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66795: LD_ADDR_VAR 0 2
66799: PUSH
66800: LD_INT 22
66802: PUSH
66803: LD_OWVAR 2
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 21
66814: PUSH
66815: LD_INT 3
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PPUSH
66826: CALL_OW 69
66830: ST_TO_ADDR
// if not tmp then
66831: LD_VAR 0 2
66835: NOT
66836: IFFALSE 66840
// exit ;
66838: GO 66869
// for i in tmp do
66840: LD_ADDR_VAR 0 1
66844: PUSH
66845: LD_VAR 0 2
66849: PUSH
66850: FOR_IN
66851: IFFALSE 66867
// SetBLevel ( i , 10 ) ;
66853: LD_VAR 0 1
66857: PPUSH
66858: LD_INT 10
66860: PPUSH
66861: CALL_OW 241
66865: GO 66850
66867: POP
66868: POP
// end ;
66869: PPOPN 2
66871: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
66872: LD_EXP 38
66876: IFFALSE 66884
66878: PUSH
66879: LD_EXP 55
66883: AND
66884: IFFALSE 66995
66886: GO 66888
66888: DISABLE
66889: LD_INT 0
66891: PPUSH
66892: PPUSH
66893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66894: LD_ADDR_VAR 0 3
66898: PUSH
66899: LD_INT 22
66901: PUSH
66902: LD_OWVAR 2
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 25
66913: PUSH
66914: LD_INT 1
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PPUSH
66925: CALL_OW 69
66929: ST_TO_ADDR
// if not tmp then
66930: LD_VAR 0 3
66934: NOT
66935: IFFALSE 66939
// exit ;
66937: GO 66995
// un := tmp [ rand ( 1 , tmp ) ] ;
66939: LD_ADDR_VAR 0 2
66943: PUSH
66944: LD_VAR 0 3
66948: PUSH
66949: LD_INT 1
66951: PPUSH
66952: LD_VAR 0 3
66956: PPUSH
66957: CALL_OW 12
66961: ARRAY
66962: ST_TO_ADDR
// if Crawls ( un ) then
66963: LD_VAR 0 2
66967: PPUSH
66968: CALL_OW 318
66972: IFFALSE 66983
// ComWalk ( un ) ;
66974: LD_VAR 0 2
66978: PPUSH
66979: CALL_OW 138
// SetClass ( un , class_sniper ) ;
66983: LD_VAR 0 2
66987: PPUSH
66988: LD_INT 5
66990: PPUSH
66991: CALL_OW 336
// end ;
66995: PPOPN 3
66997: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
66998: LD_EXP 38
67002: IFFALSE 67010
67004: PUSH
67005: LD_EXP 56
67009: AND
67010: IFFALSE 67022
67012: PUSH
67013: LD_OWVAR 67
67017: PUSH
67018: LD_INT 4
67020: LESS
67021: AND
67022: IFFALSE 67041
67024: GO 67026
67026: DISABLE
// begin Difficulty := Difficulty + 1 ;
67027: LD_ADDR_OWVAR 67
67031: PUSH
67032: LD_OWVAR 67
67036: PUSH
67037: LD_INT 1
67039: PLUS
67040: ST_TO_ADDR
// end ;
67041: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
67042: LD_EXP 38
67046: IFFALSE 67054
67048: PUSH
67049: LD_EXP 57
67053: AND
67054: IFFALSE 67157
67056: GO 67058
67058: DISABLE
67059: LD_INT 0
67061: PPUSH
// begin for i := 1 to 5 do
67062: LD_ADDR_VAR 0 1
67066: PUSH
67067: DOUBLE
67068: LD_INT 1
67070: DEC
67071: ST_TO_ADDR
67072: LD_INT 5
67074: PUSH
67075: FOR_TO
67076: IFFALSE 67155
// begin uc_nation := nation_nature ;
67078: LD_ADDR_OWVAR 21
67082: PUSH
67083: LD_INT 0
67085: ST_TO_ADDR
// uc_side := 0 ;
67086: LD_ADDR_OWVAR 20
67090: PUSH
67091: LD_INT 0
67093: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67094: LD_ADDR_OWVAR 29
67098: PUSH
67099: LD_INT 12
67101: PUSH
67102: LD_INT 12
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: ST_TO_ADDR
// hc_agressivity := 20 ;
67109: LD_ADDR_OWVAR 35
67113: PUSH
67114: LD_INT 20
67116: ST_TO_ADDR
// hc_class := class_tiger ;
67117: LD_ADDR_OWVAR 28
67121: PUSH
67122: LD_INT 14
67124: ST_TO_ADDR
// hc_gallery :=  ;
67125: LD_ADDR_OWVAR 33
67129: PUSH
67130: LD_STRING 
67132: ST_TO_ADDR
// hc_name :=  ;
67133: LD_ADDR_OWVAR 26
67137: PUSH
67138: LD_STRING 
67140: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
67141: CALL_OW 44
67145: PPUSH
67146: LD_INT 0
67148: PPUSH
67149: CALL_OW 51
// end ;
67153: GO 67075
67155: POP
67156: POP
// end ;
67157: PPOPN 1
67159: END
// every 0 0$1 trigger StreamModeActive and sBomb do
67160: LD_EXP 38
67164: IFFALSE 67172
67166: PUSH
67167: LD_EXP 58
67171: AND
67172: IFFALSE 67181
67174: GO 67176
67176: DISABLE
// StreamSibBomb ;
67177: CALL 67182 0 0
67181: END
// export function StreamSibBomb ; var i , x , y ; begin
67182: LD_INT 0
67184: PPUSH
67185: PPUSH
67186: PPUSH
67187: PPUSH
// result := false ;
67188: LD_ADDR_VAR 0 1
67192: PUSH
67193: LD_INT 0
67195: ST_TO_ADDR
// for i := 1 to 16 do
67196: LD_ADDR_VAR 0 2
67200: PUSH
67201: DOUBLE
67202: LD_INT 1
67204: DEC
67205: ST_TO_ADDR
67206: LD_INT 16
67208: PUSH
67209: FOR_TO
67210: IFFALSE 67409
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67212: LD_ADDR_VAR 0 3
67216: PUSH
67217: LD_INT 10
67219: PUSH
67220: LD_INT 20
67222: PUSH
67223: LD_INT 30
67225: PUSH
67226: LD_INT 40
67228: PUSH
67229: LD_INT 50
67231: PUSH
67232: LD_INT 60
67234: PUSH
67235: LD_INT 70
67237: PUSH
67238: LD_INT 80
67240: PUSH
67241: LD_INT 90
67243: PUSH
67244: LD_INT 100
67246: PUSH
67247: LD_INT 110
67249: PUSH
67250: LD_INT 120
67252: PUSH
67253: LD_INT 130
67255: PUSH
67256: LD_INT 140
67258: PUSH
67259: LD_INT 150
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 1
67281: PPUSH
67282: LD_INT 15
67284: PPUSH
67285: CALL_OW 12
67289: ARRAY
67290: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67291: LD_ADDR_VAR 0 4
67295: PUSH
67296: LD_INT 10
67298: PUSH
67299: LD_INT 20
67301: PUSH
67302: LD_INT 30
67304: PUSH
67305: LD_INT 40
67307: PUSH
67308: LD_INT 50
67310: PUSH
67311: LD_INT 60
67313: PUSH
67314: LD_INT 70
67316: PUSH
67317: LD_INT 80
67319: PUSH
67320: LD_INT 90
67322: PUSH
67323: LD_INT 100
67325: PUSH
67326: LD_INT 110
67328: PUSH
67329: LD_INT 120
67331: PUSH
67332: LD_INT 130
67334: PUSH
67335: LD_INT 140
67337: PUSH
67338: LD_INT 150
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 1
67360: PPUSH
67361: LD_INT 15
67363: PPUSH
67364: CALL_OW 12
67368: ARRAY
67369: ST_TO_ADDR
// if ValidHex ( x , y ) then
67370: LD_VAR 0 3
67374: PPUSH
67375: LD_VAR 0 4
67379: PPUSH
67380: CALL_OW 488
67384: IFFALSE 67407
// begin result := [ x , y ] ;
67386: LD_ADDR_VAR 0 1
67390: PUSH
67391: LD_VAR 0 3
67395: PUSH
67396: LD_VAR 0 4
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: ST_TO_ADDR
// break ;
67405: GO 67409
// end ; end ;
67407: GO 67209
67409: POP
67410: POP
// if result then
67411: LD_VAR 0 1
67415: IFFALSE 67475
// begin ToLua ( playSibBomb() ) ;
67417: LD_STRING playSibBomb()
67419: PPUSH
67420: CALL_OW 559
// wait ( 0 0$14 ) ;
67424: LD_INT 490
67426: PPUSH
67427: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
67431: LD_VAR 0 1
67435: PUSH
67436: LD_INT 1
67438: ARRAY
67439: PPUSH
67440: LD_VAR 0 1
67444: PUSH
67445: LD_INT 2
67447: ARRAY
67448: PPUSH
67449: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
67453: LD_VAR 0 1
67457: PUSH
67458: LD_INT 1
67460: ARRAY
67461: PPUSH
67462: LD_VAR 0 1
67466: PUSH
67467: LD_INT 2
67469: ARRAY
67470: PPUSH
67471: CALL_OW 429
// end ; end ;
67475: LD_VAR 0 1
67479: RET
// every 0 0$1 trigger StreamModeActive and sReset do
67480: LD_EXP 38
67484: IFFALSE 67492
67486: PUSH
67487: LD_EXP 60
67491: AND
67492: IFFALSE 67504
67494: GO 67496
67496: DISABLE
// YouLost (  ) ;
67497: LD_STRING 
67499: PPUSH
67500: CALL_OW 104
67504: END
// every 0 0$1 trigger StreamModeActive and sFog do
67505: LD_EXP 38
67509: IFFALSE 67517
67511: PUSH
67512: LD_EXP 59
67516: AND
67517: IFFALSE 67531
67519: GO 67521
67521: DISABLE
// FogOff ( your_side ) ;
67522: LD_OWVAR 2
67526: PPUSH
67527: CALL_OW 344
67531: END
// every 0 0$1 trigger StreamModeActive and sSun do
67532: LD_EXP 38
67536: IFFALSE 67544
67538: PUSH
67539: LD_EXP 61
67543: AND
67544: IFFALSE 67572
67546: GO 67548
67548: DISABLE
// begin solar_recharge_percent := 0 ;
67549: LD_ADDR_OWVAR 79
67553: PUSH
67554: LD_INT 0
67556: ST_TO_ADDR
// wait ( 5 5$00 ) ;
67557: LD_INT 10500
67559: PPUSH
67560: CALL_OW 67
// solar_recharge_percent := 100 ;
67564: LD_ADDR_OWVAR 79
67568: PUSH
67569: LD_INT 100
67571: ST_TO_ADDR
// end ;
67572: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
67573: LD_EXP 38
67577: IFFALSE 67585
67579: PUSH
67580: LD_EXP 62
67584: AND
67585: IFFALSE 67824
67587: GO 67589
67589: DISABLE
67590: LD_INT 0
67592: PPUSH
67593: PPUSH
67594: PPUSH
// begin tmp := [ ] ;
67595: LD_ADDR_VAR 0 3
67599: PUSH
67600: EMPTY
67601: ST_TO_ADDR
// for i := 1 to 6 do
67602: LD_ADDR_VAR 0 1
67606: PUSH
67607: DOUBLE
67608: LD_INT 1
67610: DEC
67611: ST_TO_ADDR
67612: LD_INT 6
67614: PUSH
67615: FOR_TO
67616: IFFALSE 67721
// begin uc_nation := nation_nature ;
67618: LD_ADDR_OWVAR 21
67622: PUSH
67623: LD_INT 0
67625: ST_TO_ADDR
// uc_side := 0 ;
67626: LD_ADDR_OWVAR 20
67630: PUSH
67631: LD_INT 0
67633: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67634: LD_ADDR_OWVAR 29
67638: PUSH
67639: LD_INT 12
67641: PUSH
67642: LD_INT 12
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: ST_TO_ADDR
// hc_agressivity := 20 ;
67649: LD_ADDR_OWVAR 35
67653: PUSH
67654: LD_INT 20
67656: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
67657: LD_ADDR_OWVAR 28
67661: PUSH
67662: LD_INT 17
67664: ST_TO_ADDR
// hc_gallery :=  ;
67665: LD_ADDR_OWVAR 33
67669: PUSH
67670: LD_STRING 
67672: ST_TO_ADDR
// hc_name :=  ;
67673: LD_ADDR_OWVAR 26
67677: PUSH
67678: LD_STRING 
67680: ST_TO_ADDR
// un := CreateHuman ;
67681: LD_ADDR_VAR 0 2
67685: PUSH
67686: CALL_OW 44
67690: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
67691: LD_VAR 0 2
67695: PPUSH
67696: LD_INT 1
67698: PPUSH
67699: CALL_OW 51
// tmp := tmp ^ un ;
67703: LD_ADDR_VAR 0 3
67707: PUSH
67708: LD_VAR 0 3
67712: PUSH
67713: LD_VAR 0 2
67717: ADD
67718: ST_TO_ADDR
// end ;
67719: GO 67615
67721: POP
67722: POP
// repeat wait ( 0 0$1 ) ;
67723: LD_INT 35
67725: PPUSH
67726: CALL_OW 67
// for un in tmp do
67730: LD_ADDR_VAR 0 2
67734: PUSH
67735: LD_VAR 0 3
67739: PUSH
67740: FOR_IN
67741: IFFALSE 67815
// begin if IsDead ( un ) then
67743: LD_VAR 0 2
67747: PPUSH
67748: CALL_OW 301
67752: IFFALSE 67772
// begin tmp := tmp diff un ;
67754: LD_ADDR_VAR 0 3
67758: PUSH
67759: LD_VAR 0 3
67763: PUSH
67764: LD_VAR 0 2
67768: DIFF
67769: ST_TO_ADDR
// continue ;
67770: GO 67740
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
67772: LD_VAR 0 2
67776: PPUSH
67777: LD_INT 3
67779: PUSH
67780: LD_INT 22
67782: PUSH
67783: LD_INT 0
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PPUSH
67794: CALL_OW 69
67798: PPUSH
67799: LD_VAR 0 2
67803: PPUSH
67804: CALL_OW 74
67808: PPUSH
67809: CALL_OW 115
// end ;
67813: GO 67740
67815: POP
67816: POP
// until not tmp ;
67817: LD_VAR 0 3
67821: NOT
67822: IFFALSE 67723
// end ;
67824: PPOPN 3
67826: END
// every 0 0$1 trigger StreamModeActive and sTroll do
67827: LD_EXP 38
67831: IFFALSE 67839
67833: PUSH
67834: LD_EXP 63
67838: AND
67839: IFFALSE 67893
67841: GO 67843
67843: DISABLE
// begin ToLua ( displayTroll(); ) ;
67844: LD_STRING displayTroll();
67846: PPUSH
67847: CALL_OW 559
// wait ( 3 3$00 ) ;
67851: LD_INT 6300
67853: PPUSH
67854: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67858: LD_STRING hideTroll();
67860: PPUSH
67861: CALL_OW 559
// wait ( 1 1$00 ) ;
67865: LD_INT 2100
67867: PPUSH
67868: CALL_OW 67
// ToLua ( displayTroll(); ) ;
67872: LD_STRING displayTroll();
67874: PPUSH
67875: CALL_OW 559
// wait ( 1 1$00 ) ;
67879: LD_INT 2100
67881: PPUSH
67882: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67886: LD_STRING hideTroll();
67888: PPUSH
67889: CALL_OW 559
// end ;
67893: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
67894: LD_EXP 38
67898: IFFALSE 67906
67900: PUSH
67901: LD_EXP 64
67905: AND
67906: IFFALSE 67969
67908: GO 67910
67910: DISABLE
67911: LD_INT 0
67913: PPUSH
// begin p := 0 ;
67914: LD_ADDR_VAR 0 1
67918: PUSH
67919: LD_INT 0
67921: ST_TO_ADDR
// repeat game_speed := 1 ;
67922: LD_ADDR_OWVAR 65
67926: PUSH
67927: LD_INT 1
67929: ST_TO_ADDR
// wait ( 0 0$1 ) ;
67930: LD_INT 35
67932: PPUSH
67933: CALL_OW 67
// p := p + 1 ;
67937: LD_ADDR_VAR 0 1
67941: PUSH
67942: LD_VAR 0 1
67946: PUSH
67947: LD_INT 1
67949: PLUS
67950: ST_TO_ADDR
// until p >= 60 ;
67951: LD_VAR 0 1
67955: PUSH
67956: LD_INT 60
67958: GREATEREQUAL
67959: IFFALSE 67922
// game_speed := 4 ;
67961: LD_ADDR_OWVAR 65
67965: PUSH
67966: LD_INT 4
67968: ST_TO_ADDR
// end ;
67969: PPOPN 1
67971: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
67972: LD_EXP 38
67976: IFFALSE 67984
67978: PUSH
67979: LD_EXP 65
67983: AND
67984: IFFALSE 68130
67986: GO 67988
67988: DISABLE
67989: LD_INT 0
67991: PPUSH
67992: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67993: LD_ADDR_VAR 0 1
67997: PUSH
67998: LD_INT 22
68000: PUSH
68001: LD_OWVAR 2
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 2
68012: PUSH
68013: LD_INT 30
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 30
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: LIST
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PPUSH
68042: CALL_OW 69
68046: ST_TO_ADDR
// if not depot then
68047: LD_VAR 0 1
68051: NOT
68052: IFFALSE 68056
// exit ;
68054: GO 68130
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
68056: LD_ADDR_VAR 0 2
68060: PUSH
68061: LD_VAR 0 1
68065: PUSH
68066: LD_INT 1
68068: PPUSH
68069: LD_VAR 0 1
68073: PPUSH
68074: CALL_OW 12
68078: ARRAY
68079: PPUSH
68080: CALL_OW 274
68084: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
68085: LD_VAR 0 2
68089: PPUSH
68090: LD_INT 1
68092: PPUSH
68093: LD_INT 0
68095: PPUSH
68096: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
68100: LD_VAR 0 2
68104: PPUSH
68105: LD_INT 2
68107: PPUSH
68108: LD_INT 0
68110: PPUSH
68111: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
68115: LD_VAR 0 2
68119: PPUSH
68120: LD_INT 3
68122: PPUSH
68123: LD_INT 0
68125: PPUSH
68126: CALL_OW 277
// end ;
68130: PPOPN 2
68132: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
68133: LD_EXP 38
68137: IFFALSE 68145
68139: PUSH
68140: LD_EXP 66
68144: AND
68145: IFFALSE 68242
68147: GO 68149
68149: DISABLE
68150: LD_INT 0
68152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68153: LD_ADDR_VAR 0 1
68157: PUSH
68158: LD_INT 22
68160: PUSH
68161: LD_OWVAR 2
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 21
68172: PUSH
68173: LD_INT 1
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 3
68182: PUSH
68183: LD_INT 23
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: LIST
68201: PPUSH
68202: CALL_OW 69
68206: ST_TO_ADDR
// if not tmp then
68207: LD_VAR 0 1
68211: NOT
68212: IFFALSE 68216
// exit ;
68214: GO 68242
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
68216: LD_VAR 0 1
68220: PUSH
68221: LD_INT 1
68223: PPUSH
68224: LD_VAR 0 1
68228: PPUSH
68229: CALL_OW 12
68233: ARRAY
68234: PPUSH
68235: LD_INT 200
68237: PPUSH
68238: CALL_OW 234
// end ;
68242: PPOPN 1
68244: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
68245: LD_EXP 38
68249: IFFALSE 68257
68251: PUSH
68252: LD_EXP 67
68256: AND
68257: IFFALSE 68336
68259: GO 68261
68261: DISABLE
68262: LD_INT 0
68264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
68265: LD_ADDR_VAR 0 1
68269: PUSH
68270: LD_INT 22
68272: PUSH
68273: LD_OWVAR 2
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 21
68284: PUSH
68285: LD_INT 2
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PPUSH
68296: CALL_OW 69
68300: ST_TO_ADDR
// if not tmp then
68301: LD_VAR 0 1
68305: NOT
68306: IFFALSE 68310
// exit ;
68308: GO 68336
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
68310: LD_VAR 0 1
68314: PUSH
68315: LD_INT 1
68317: PPUSH
68318: LD_VAR 0 1
68322: PPUSH
68323: CALL_OW 12
68327: ARRAY
68328: PPUSH
68329: LD_INT 60
68331: PPUSH
68332: CALL_OW 234
// end ;
68336: PPOPN 1
68338: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
68339: LD_EXP 38
68343: IFFALSE 68351
68345: PUSH
68346: LD_EXP 68
68350: AND
68351: IFFALSE 68450
68353: GO 68355
68355: DISABLE
68356: LD_INT 0
68358: PPUSH
68359: PPUSH
// begin enable ;
68360: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
68361: LD_ADDR_VAR 0 1
68365: PUSH
68366: LD_INT 22
68368: PUSH
68369: LD_OWVAR 2
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 61
68380: PUSH
68381: EMPTY
68382: LIST
68383: PUSH
68384: LD_INT 33
68386: PUSH
68387: LD_INT 2
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: LIST
68398: PPUSH
68399: CALL_OW 69
68403: ST_TO_ADDR
// if not tmp then
68404: LD_VAR 0 1
68408: NOT
68409: IFFALSE 68413
// exit ;
68411: GO 68450
// for i in tmp do
68413: LD_ADDR_VAR 0 2
68417: PUSH
68418: LD_VAR 0 1
68422: PUSH
68423: FOR_IN
68424: IFFALSE 68448
// if IsControledBy ( i ) then
68426: LD_VAR 0 2
68430: PPUSH
68431: CALL_OW 312
68435: IFFALSE 68446
// ComUnlink ( i ) ;
68437: LD_VAR 0 2
68441: PPUSH
68442: CALL_OW 136
68446: GO 68423
68448: POP
68449: POP
// end ;
68450: PPOPN 2
68452: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
68453: LD_EXP 38
68457: IFFALSE 68465
68459: PUSH
68460: LD_EXP 69
68464: AND
68465: IFFALSE 68605
68467: GO 68469
68469: DISABLE
68470: LD_INT 0
68472: PPUSH
68473: PPUSH
// begin ToLua ( displayPowell(); ) ;
68474: LD_STRING displayPowell();
68476: PPUSH
68477: CALL_OW 559
// uc_side := 0 ;
68481: LD_ADDR_OWVAR 20
68485: PUSH
68486: LD_INT 0
68488: ST_TO_ADDR
// uc_nation := 2 ;
68489: LD_ADDR_OWVAR 21
68493: PUSH
68494: LD_INT 2
68496: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
68497: LD_ADDR_OWVAR 37
68501: PUSH
68502: LD_INT 14
68504: ST_TO_ADDR
// vc_engine := engine_siberite ;
68505: LD_ADDR_OWVAR 39
68509: PUSH
68510: LD_INT 3
68512: ST_TO_ADDR
// vc_control := control_apeman ;
68513: LD_ADDR_OWVAR 38
68517: PUSH
68518: LD_INT 5
68520: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
68521: LD_ADDR_OWVAR 40
68525: PUSH
68526: LD_INT 29
68528: ST_TO_ADDR
// un := CreateVehicle ;
68529: LD_ADDR_VAR 0 2
68533: PUSH
68534: CALL_OW 45
68538: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68539: LD_VAR 0 2
68543: PPUSH
68544: LD_INT 1
68546: PPUSH
68547: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68551: LD_INT 35
68553: PPUSH
68554: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68558: LD_VAR 0 2
68562: PPUSH
68563: LD_INT 22
68565: PUSH
68566: LD_OWVAR 2
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PPUSH
68575: CALL_OW 69
68579: PPUSH
68580: LD_VAR 0 2
68584: PPUSH
68585: CALL_OW 74
68589: PPUSH
68590: CALL_OW 115
// until IsDead ( un ) ;
68594: LD_VAR 0 2
68598: PPUSH
68599: CALL_OW 301
68603: IFFALSE 68551
// end ;
68605: PPOPN 2
68607: END
// every 0 0$1 trigger StreamModeActive and sStu do
68608: LD_EXP 38
68612: IFFALSE 68620
68614: PUSH
68615: LD_EXP 77
68619: AND
68620: IFFALSE 68636
68622: GO 68624
68624: DISABLE
// begin ToLua ( displayStucuk(); ) ;
68625: LD_STRING displayStucuk();
68627: PPUSH
68628: CALL_OW 559
// ResetFog ;
68632: CALL_OW 335
// end ;
68636: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
68637: LD_EXP 38
68641: IFFALSE 68649
68643: PUSH
68644: LD_EXP 70
68648: AND
68649: IFFALSE 68790
68651: GO 68653
68653: DISABLE
68654: LD_INT 0
68656: PPUSH
68657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68658: LD_ADDR_VAR 0 2
68662: PUSH
68663: LD_INT 22
68665: PUSH
68666: LD_OWVAR 2
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 21
68677: PUSH
68678: LD_INT 1
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PPUSH
68689: CALL_OW 69
68693: ST_TO_ADDR
// if not tmp then
68694: LD_VAR 0 2
68698: NOT
68699: IFFALSE 68703
// exit ;
68701: GO 68790
// un := tmp [ rand ( 1 , tmp ) ] ;
68703: LD_ADDR_VAR 0 1
68707: PUSH
68708: LD_VAR 0 2
68712: PUSH
68713: LD_INT 1
68715: PPUSH
68716: LD_VAR 0 2
68720: PPUSH
68721: CALL_OW 12
68725: ARRAY
68726: ST_TO_ADDR
// SetSide ( un , 0 ) ;
68727: LD_VAR 0 1
68731: PPUSH
68732: LD_INT 0
68734: PPUSH
68735: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
68739: LD_VAR 0 1
68743: PPUSH
68744: LD_OWVAR 3
68748: PUSH
68749: LD_VAR 0 1
68753: DIFF
68754: PPUSH
68755: LD_VAR 0 1
68759: PPUSH
68760: CALL_OW 74
68764: PPUSH
68765: CALL_OW 115
// wait ( 0 0$20 ) ;
68769: LD_INT 700
68771: PPUSH
68772: CALL_OW 67
// SetSide ( un , your_side ) ;
68776: LD_VAR 0 1
68780: PPUSH
68781: LD_OWVAR 2
68785: PPUSH
68786: CALL_OW 235
// end ;
68790: PPOPN 2
68792: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
68793: LD_EXP 38
68797: IFFALSE 68805
68799: PUSH
68800: LD_EXP 71
68804: AND
68805: IFFALSE 68911
68807: GO 68809
68809: DISABLE
68810: LD_INT 0
68812: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68813: LD_ADDR_VAR 0 1
68817: PUSH
68818: LD_INT 22
68820: PUSH
68821: LD_OWVAR 2
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 2
68832: PUSH
68833: LD_INT 30
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 30
68845: PUSH
68846: LD_INT 1
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: LIST
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PPUSH
68862: CALL_OW 69
68866: ST_TO_ADDR
// if not depot then
68867: LD_VAR 0 1
68871: NOT
68872: IFFALSE 68876
// exit ;
68874: GO 68911
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
68876: LD_VAR 0 1
68880: PUSH
68881: LD_INT 1
68883: ARRAY
68884: PPUSH
68885: CALL_OW 250
68889: PPUSH
68890: LD_VAR 0 1
68894: PUSH
68895: LD_INT 1
68897: ARRAY
68898: PPUSH
68899: CALL_OW 251
68903: PPUSH
68904: LD_INT 70
68906: PPUSH
68907: CALL_OW 495
// end ;
68911: PPOPN 1
68913: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
68914: LD_EXP 38
68918: IFFALSE 68926
68920: PUSH
68921: LD_EXP 72
68925: AND
68926: IFFALSE 69137
68928: GO 68930
68930: DISABLE
68931: LD_INT 0
68933: PPUSH
68934: PPUSH
68935: PPUSH
68936: PPUSH
68937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68938: LD_ADDR_VAR 0 5
68942: PUSH
68943: LD_INT 22
68945: PUSH
68946: LD_OWVAR 2
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 21
68957: PUSH
68958: LD_INT 1
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PPUSH
68969: CALL_OW 69
68973: ST_TO_ADDR
// if not tmp then
68974: LD_VAR 0 5
68978: NOT
68979: IFFALSE 68983
// exit ;
68981: GO 69137
// for i in tmp do
68983: LD_ADDR_VAR 0 1
68987: PUSH
68988: LD_VAR 0 5
68992: PUSH
68993: FOR_IN
68994: IFFALSE 69135
// begin d := rand ( 0 , 5 ) ;
68996: LD_ADDR_VAR 0 4
69000: PUSH
69001: LD_INT 0
69003: PPUSH
69004: LD_INT 5
69006: PPUSH
69007: CALL_OW 12
69011: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
69012: LD_ADDR_VAR 0 2
69016: PUSH
69017: LD_VAR 0 1
69021: PPUSH
69022: CALL_OW 250
69026: PPUSH
69027: LD_VAR 0 4
69031: PPUSH
69032: LD_INT 3
69034: PPUSH
69035: LD_INT 12
69037: PPUSH
69038: CALL_OW 12
69042: PPUSH
69043: CALL_OW 272
69047: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
69048: LD_ADDR_VAR 0 3
69052: PUSH
69053: LD_VAR 0 1
69057: PPUSH
69058: CALL_OW 251
69062: PPUSH
69063: LD_VAR 0 4
69067: PPUSH
69068: LD_INT 3
69070: PPUSH
69071: LD_INT 12
69073: PPUSH
69074: CALL_OW 12
69078: PPUSH
69079: CALL_OW 273
69083: ST_TO_ADDR
// if ValidHex ( x , y ) then
69084: LD_VAR 0 2
69088: PPUSH
69089: LD_VAR 0 3
69093: PPUSH
69094: CALL_OW 488
69098: IFFALSE 69133
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
69100: LD_VAR 0 1
69104: PPUSH
69105: LD_VAR 0 2
69109: PPUSH
69110: LD_VAR 0 3
69114: PPUSH
69115: LD_INT 3
69117: PPUSH
69118: LD_INT 6
69120: PPUSH
69121: CALL_OW 12
69125: PPUSH
69126: LD_INT 1
69128: PPUSH
69129: CALL_OW 483
// end ;
69133: GO 68993
69135: POP
69136: POP
// end ;
69137: PPOPN 5
69139: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
69140: LD_EXP 38
69144: IFFALSE 69152
69146: PUSH
69147: LD_EXP 73
69151: AND
69152: IFFALSE 69246
69154: GO 69156
69156: DISABLE
69157: LD_INT 0
69159: PPUSH
69160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
69161: LD_ADDR_VAR 0 2
69165: PUSH
69166: LD_INT 22
69168: PUSH
69169: LD_OWVAR 2
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 32
69180: PUSH
69181: LD_INT 1
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 21
69190: PUSH
69191: LD_INT 2
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: LIST
69202: PPUSH
69203: CALL_OW 69
69207: ST_TO_ADDR
// if not tmp then
69208: LD_VAR 0 2
69212: NOT
69213: IFFALSE 69217
// exit ;
69215: GO 69246
// for i in tmp do
69217: LD_ADDR_VAR 0 1
69221: PUSH
69222: LD_VAR 0 2
69226: PUSH
69227: FOR_IN
69228: IFFALSE 69244
// SetFuel ( i , 0 ) ;
69230: LD_VAR 0 1
69234: PPUSH
69235: LD_INT 0
69237: PPUSH
69238: CALL_OW 240
69242: GO 69227
69244: POP
69245: POP
// end ;
69246: PPOPN 2
69248: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
69249: LD_EXP 38
69253: IFFALSE 69261
69255: PUSH
69256: LD_EXP 74
69260: AND
69261: IFFALSE 69327
69263: GO 69265
69265: DISABLE
69266: LD_INT 0
69268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69269: LD_ADDR_VAR 0 1
69273: PUSH
69274: LD_INT 22
69276: PUSH
69277: LD_OWVAR 2
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 30
69288: PUSH
69289: LD_INT 29
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PPUSH
69300: CALL_OW 69
69304: ST_TO_ADDR
// if not tmp then
69305: LD_VAR 0 1
69309: NOT
69310: IFFALSE 69314
// exit ;
69312: GO 69327
// DestroyUnit ( tmp [ 1 ] ) ;
69314: LD_VAR 0 1
69318: PUSH
69319: LD_INT 1
69321: ARRAY
69322: PPUSH
69323: CALL_OW 65
// end ;
69327: PPOPN 1
69329: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
69330: LD_EXP 38
69334: IFFALSE 69342
69336: PUSH
69337: LD_EXP 76
69341: AND
69342: IFFALSE 69471
69344: GO 69346
69346: DISABLE
69347: LD_INT 0
69349: PPUSH
// begin uc_side := 0 ;
69350: LD_ADDR_OWVAR 20
69354: PUSH
69355: LD_INT 0
69357: ST_TO_ADDR
// uc_nation := nation_arabian ;
69358: LD_ADDR_OWVAR 21
69362: PUSH
69363: LD_INT 2
69365: ST_TO_ADDR
// hc_gallery :=  ;
69366: LD_ADDR_OWVAR 33
69370: PUSH
69371: LD_STRING 
69373: ST_TO_ADDR
// hc_name :=  ;
69374: LD_ADDR_OWVAR 26
69378: PUSH
69379: LD_STRING 
69381: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
69382: LD_INT 1
69384: PPUSH
69385: LD_INT 11
69387: PPUSH
69388: LD_INT 10
69390: PPUSH
69391: CALL_OW 380
// un := CreateHuman ;
69395: LD_ADDR_VAR 0 1
69399: PUSH
69400: CALL_OW 44
69404: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69405: LD_VAR 0 1
69409: PPUSH
69410: LD_INT 1
69412: PPUSH
69413: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69417: LD_INT 35
69419: PPUSH
69420: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69424: LD_VAR 0 1
69428: PPUSH
69429: LD_INT 22
69431: PUSH
69432: LD_OWVAR 2
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PPUSH
69441: CALL_OW 69
69445: PPUSH
69446: LD_VAR 0 1
69450: PPUSH
69451: CALL_OW 74
69455: PPUSH
69456: CALL_OW 115
// until IsDead ( un ) ;
69460: LD_VAR 0 1
69464: PPUSH
69465: CALL_OW 301
69469: IFFALSE 69417
// end ;
69471: PPOPN 1
69473: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
69474: LD_EXP 38
69478: IFFALSE 69486
69480: PUSH
69481: LD_EXP 78
69485: AND
69486: IFFALSE 69498
69488: GO 69490
69490: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
69491: LD_STRING earthquake(getX(game), 0, 32)
69493: PPUSH
69494: CALL_OW 559
69498: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
69499: LD_EXP 38
69503: IFFALSE 69511
69505: PUSH
69506: LD_EXP 79
69510: AND
69511: IFFALSE 69602
69513: GO 69515
69515: DISABLE
69516: LD_INT 0
69518: PPUSH
// begin enable ;
69519: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
69520: LD_ADDR_VAR 0 1
69524: PUSH
69525: LD_INT 22
69527: PUSH
69528: LD_OWVAR 2
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 21
69539: PUSH
69540: LD_INT 2
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 33
69549: PUSH
69550: LD_INT 3
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: LIST
69561: PPUSH
69562: CALL_OW 69
69566: ST_TO_ADDR
// if not tmp then
69567: LD_VAR 0 1
69571: NOT
69572: IFFALSE 69576
// exit ;
69574: GO 69602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69576: LD_VAR 0 1
69580: PUSH
69581: LD_INT 1
69583: PPUSH
69584: LD_VAR 0 1
69588: PPUSH
69589: CALL_OW 12
69593: ARRAY
69594: PPUSH
69595: LD_INT 1
69597: PPUSH
69598: CALL_OW 234
// end ;
69602: PPOPN 1
69604: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
69605: LD_EXP 38
69609: IFFALSE 69617
69611: PUSH
69612: LD_EXP 80
69616: AND
69617: IFFALSE 69758
69619: GO 69621
69621: DISABLE
69622: LD_INT 0
69624: PPUSH
69625: PPUSH
69626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69627: LD_ADDR_VAR 0 3
69631: PUSH
69632: LD_INT 22
69634: PUSH
69635: LD_OWVAR 2
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 25
69646: PUSH
69647: LD_INT 1
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PPUSH
69658: CALL_OW 69
69662: ST_TO_ADDR
// if not tmp then
69663: LD_VAR 0 3
69667: NOT
69668: IFFALSE 69672
// exit ;
69670: GO 69758
// un := tmp [ rand ( 1 , tmp ) ] ;
69672: LD_ADDR_VAR 0 2
69676: PUSH
69677: LD_VAR 0 3
69681: PUSH
69682: LD_INT 1
69684: PPUSH
69685: LD_VAR 0 3
69689: PPUSH
69690: CALL_OW 12
69694: ARRAY
69695: ST_TO_ADDR
// if Crawls ( un ) then
69696: LD_VAR 0 2
69700: PPUSH
69701: CALL_OW 318
69705: IFFALSE 69716
// ComWalk ( un ) ;
69707: LD_VAR 0 2
69711: PPUSH
69712: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
69716: LD_VAR 0 2
69720: PPUSH
69721: LD_INT 9
69723: PPUSH
69724: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
69728: LD_INT 28
69730: PPUSH
69731: LD_OWVAR 2
69735: PPUSH
69736: LD_INT 2
69738: PPUSH
69739: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
69743: LD_INT 29
69745: PPUSH
69746: LD_OWVAR 2
69750: PPUSH
69751: LD_INT 2
69753: PPUSH
69754: CALL_OW 322
// end ;
69758: PPOPN 3
69760: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
69761: LD_EXP 38
69765: IFFALSE 69773
69767: PUSH
69768: LD_EXP 81
69772: AND
69773: IFFALSE 69884
69775: GO 69777
69777: DISABLE
69778: LD_INT 0
69780: PPUSH
69781: PPUSH
69782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69783: LD_ADDR_VAR 0 3
69787: PUSH
69788: LD_INT 22
69790: PUSH
69791: LD_OWVAR 2
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 25
69802: PUSH
69803: LD_INT 1
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PPUSH
69814: CALL_OW 69
69818: ST_TO_ADDR
// if not tmp then
69819: LD_VAR 0 3
69823: NOT
69824: IFFALSE 69828
// exit ;
69826: GO 69884
// un := tmp [ rand ( 1 , tmp ) ] ;
69828: LD_ADDR_VAR 0 2
69832: PUSH
69833: LD_VAR 0 3
69837: PUSH
69838: LD_INT 1
69840: PPUSH
69841: LD_VAR 0 3
69845: PPUSH
69846: CALL_OW 12
69850: ARRAY
69851: ST_TO_ADDR
// if Crawls ( un ) then
69852: LD_VAR 0 2
69856: PPUSH
69857: CALL_OW 318
69861: IFFALSE 69872
// ComWalk ( un ) ;
69863: LD_VAR 0 2
69867: PPUSH
69868: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69872: LD_VAR 0 2
69876: PPUSH
69877: LD_INT 8
69879: PPUSH
69880: CALL_OW 336
// end ;
69884: PPOPN 3
69886: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
69887: LD_EXP 38
69891: IFFALSE 69899
69893: PUSH
69894: LD_EXP 82
69898: AND
69899: IFFALSE 70043
69901: GO 69903
69903: DISABLE
69904: LD_INT 0
69906: PPUSH
69907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
69908: LD_ADDR_VAR 0 2
69912: PUSH
69913: LD_INT 22
69915: PUSH
69916: LD_OWVAR 2
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 21
69927: PUSH
69928: LD_INT 2
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 2
69937: PUSH
69938: LD_INT 34
69940: PUSH
69941: LD_INT 12
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 34
69950: PUSH
69951: LD_INT 51
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 34
69960: PUSH
69961: LD_INT 32
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: LIST
69978: PPUSH
69979: CALL_OW 69
69983: ST_TO_ADDR
// if not tmp then
69984: LD_VAR 0 2
69988: NOT
69989: IFFALSE 69993
// exit ;
69991: GO 70043
// for i in tmp do
69993: LD_ADDR_VAR 0 1
69997: PUSH
69998: LD_VAR 0 2
70002: PUSH
70003: FOR_IN
70004: IFFALSE 70041
// if GetCargo ( i , mat_artifact ) = 0 then
70006: LD_VAR 0 1
70010: PPUSH
70011: LD_INT 4
70013: PPUSH
70014: CALL_OW 289
70018: PUSH
70019: LD_INT 0
70021: EQUAL
70022: IFFALSE 70039
// SetCargo ( i , mat_siberit , 100 ) ;
70024: LD_VAR 0 1
70028: PPUSH
70029: LD_INT 3
70031: PPUSH
70032: LD_INT 100
70034: PPUSH
70035: CALL_OW 290
70039: GO 70003
70041: POP
70042: POP
// end ;
70043: PPOPN 2
70045: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
70046: LD_EXP 38
70050: IFFALSE 70058
70052: PUSH
70053: LD_EXP 83
70057: AND
70058: IFFALSE 70241
70060: GO 70062
70062: DISABLE
70063: LD_INT 0
70065: PPUSH
70066: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70067: LD_ADDR_VAR 0 2
70071: PUSH
70072: LD_INT 22
70074: PUSH
70075: LD_OWVAR 2
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PPUSH
70084: CALL_OW 69
70088: ST_TO_ADDR
// if not tmp then
70089: LD_VAR 0 2
70093: NOT
70094: IFFALSE 70098
// exit ;
70096: GO 70241
// for i := 1 to 2 do
70098: LD_ADDR_VAR 0 1
70102: PUSH
70103: DOUBLE
70104: LD_INT 1
70106: DEC
70107: ST_TO_ADDR
70108: LD_INT 2
70110: PUSH
70111: FOR_TO
70112: IFFALSE 70239
// begin uc_side := your_side ;
70114: LD_ADDR_OWVAR 20
70118: PUSH
70119: LD_OWVAR 2
70123: ST_TO_ADDR
// uc_nation := nation_american ;
70124: LD_ADDR_OWVAR 21
70128: PUSH
70129: LD_INT 1
70131: ST_TO_ADDR
// vc_chassis := us_morphling ;
70132: LD_ADDR_OWVAR 37
70136: PUSH
70137: LD_INT 5
70139: ST_TO_ADDR
// vc_engine := engine_siberite ;
70140: LD_ADDR_OWVAR 39
70144: PUSH
70145: LD_INT 3
70147: ST_TO_ADDR
// vc_control := control_computer ;
70148: LD_ADDR_OWVAR 38
70152: PUSH
70153: LD_INT 3
70155: ST_TO_ADDR
// vc_weapon := us_double_laser ;
70156: LD_ADDR_OWVAR 40
70160: PUSH
70161: LD_INT 10
70163: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
70164: LD_VAR 0 2
70168: PUSH
70169: LD_INT 1
70171: ARRAY
70172: PPUSH
70173: CALL_OW 310
70177: NOT
70178: IFFALSE 70225
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
70180: CALL_OW 45
70184: PPUSH
70185: LD_VAR 0 2
70189: PUSH
70190: LD_INT 1
70192: ARRAY
70193: PPUSH
70194: CALL_OW 250
70198: PPUSH
70199: LD_VAR 0 2
70203: PUSH
70204: LD_INT 1
70206: ARRAY
70207: PPUSH
70208: CALL_OW 251
70212: PPUSH
70213: LD_INT 12
70215: PPUSH
70216: LD_INT 1
70218: PPUSH
70219: CALL_OW 50
70223: GO 70237
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
70225: CALL_OW 45
70229: PPUSH
70230: LD_INT 1
70232: PPUSH
70233: CALL_OW 51
// end ;
70237: GO 70111
70239: POP
70240: POP
// end ;
70241: PPOPN 2
70243: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
70244: LD_EXP 38
70248: IFFALSE 70256
70250: PUSH
70251: LD_EXP 84
70255: AND
70256: IFFALSE 70478
70258: GO 70260
70260: DISABLE
70261: LD_INT 0
70263: PPUSH
70264: PPUSH
70265: PPUSH
70266: PPUSH
70267: PPUSH
70268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70269: LD_ADDR_VAR 0 6
70273: PUSH
70274: LD_INT 22
70276: PUSH
70277: LD_OWVAR 2
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: LD_INT 21
70288: PUSH
70289: LD_INT 1
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 3
70298: PUSH
70299: LD_INT 23
70301: PUSH
70302: LD_INT 0
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: LIST
70317: PPUSH
70318: CALL_OW 69
70322: ST_TO_ADDR
// if not tmp then
70323: LD_VAR 0 6
70327: NOT
70328: IFFALSE 70332
// exit ;
70330: GO 70478
// s1 := rand ( 1 , 4 ) ;
70332: LD_ADDR_VAR 0 2
70336: PUSH
70337: LD_INT 1
70339: PPUSH
70340: LD_INT 4
70342: PPUSH
70343: CALL_OW 12
70347: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
70348: LD_ADDR_VAR 0 4
70352: PUSH
70353: LD_VAR 0 6
70357: PUSH
70358: LD_INT 1
70360: ARRAY
70361: PPUSH
70362: LD_VAR 0 2
70366: PPUSH
70367: CALL_OW 259
70371: ST_TO_ADDR
// if s1 = 1 then
70372: LD_VAR 0 2
70376: PUSH
70377: LD_INT 1
70379: EQUAL
70380: IFFALSE 70400
// s2 := rand ( 2 , 4 ) else
70382: LD_ADDR_VAR 0 3
70386: PUSH
70387: LD_INT 2
70389: PPUSH
70390: LD_INT 4
70392: PPUSH
70393: CALL_OW 12
70397: ST_TO_ADDR
70398: GO 70408
// s2 := 1 ;
70400: LD_ADDR_VAR 0 3
70404: PUSH
70405: LD_INT 1
70407: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
70408: LD_ADDR_VAR 0 5
70412: PUSH
70413: LD_VAR 0 6
70417: PUSH
70418: LD_INT 1
70420: ARRAY
70421: PPUSH
70422: LD_VAR 0 3
70426: PPUSH
70427: CALL_OW 259
70431: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
70432: LD_VAR 0 6
70436: PUSH
70437: LD_INT 1
70439: ARRAY
70440: PPUSH
70441: LD_VAR 0 2
70445: PPUSH
70446: LD_VAR 0 5
70450: PPUSH
70451: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
70455: LD_VAR 0 6
70459: PUSH
70460: LD_INT 1
70462: ARRAY
70463: PPUSH
70464: LD_VAR 0 3
70468: PPUSH
70469: LD_VAR 0 4
70473: PPUSH
70474: CALL_OW 237
// end ;
70478: PPOPN 6
70480: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
70481: LD_EXP 38
70485: IFFALSE 70493
70487: PUSH
70488: LD_EXP 85
70492: AND
70493: IFFALSE 70572
70495: GO 70497
70497: DISABLE
70498: LD_INT 0
70500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
70501: LD_ADDR_VAR 0 1
70505: PUSH
70506: LD_INT 22
70508: PUSH
70509: LD_OWVAR 2
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 30
70520: PUSH
70521: LD_INT 3
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PPUSH
70532: CALL_OW 69
70536: ST_TO_ADDR
// if not tmp then
70537: LD_VAR 0 1
70541: NOT
70542: IFFALSE 70546
// exit ;
70544: GO 70572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70546: LD_VAR 0 1
70550: PUSH
70551: LD_INT 1
70553: PPUSH
70554: LD_VAR 0 1
70558: PPUSH
70559: CALL_OW 12
70563: ARRAY
70564: PPUSH
70565: LD_INT 1
70567: PPUSH
70568: CALL_OW 234
// end ;
70572: PPOPN 1
70574: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
70575: LD_EXP 38
70579: IFFALSE 70587
70581: PUSH
70582: LD_EXP 86
70586: AND
70587: IFFALSE 70699
70589: GO 70591
70591: DISABLE
70592: LD_INT 0
70594: PPUSH
70595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
70596: LD_ADDR_VAR 0 2
70600: PUSH
70601: LD_INT 22
70603: PUSH
70604: LD_OWVAR 2
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 2
70615: PUSH
70616: LD_INT 30
70618: PUSH
70619: LD_INT 27
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 30
70628: PUSH
70629: LD_INT 26
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 30
70638: PUSH
70639: LD_INT 28
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PPUSH
70656: CALL_OW 69
70660: ST_TO_ADDR
// if not tmp then
70661: LD_VAR 0 2
70665: NOT
70666: IFFALSE 70670
// exit ;
70668: GO 70699
// for i in tmp do
70670: LD_ADDR_VAR 0 1
70674: PUSH
70675: LD_VAR 0 2
70679: PUSH
70680: FOR_IN
70681: IFFALSE 70697
// SetLives ( i , 1 ) ;
70683: LD_VAR 0 1
70687: PPUSH
70688: LD_INT 1
70690: PPUSH
70691: CALL_OW 234
70695: GO 70680
70697: POP
70698: POP
// end ;
70699: PPOPN 2
70701: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
70702: LD_EXP 38
70706: IFFALSE 70714
70708: PUSH
70709: LD_EXP 87
70713: AND
70714: IFFALSE 71001
70716: GO 70718
70718: DISABLE
70719: LD_INT 0
70721: PPUSH
70722: PPUSH
70723: PPUSH
// begin i := rand ( 1 , 7 ) ;
70724: LD_ADDR_VAR 0 1
70728: PUSH
70729: LD_INT 1
70731: PPUSH
70732: LD_INT 7
70734: PPUSH
70735: CALL_OW 12
70739: ST_TO_ADDR
// case i of 1 :
70740: LD_VAR 0 1
70744: PUSH
70745: LD_INT 1
70747: DOUBLE
70748: EQUAL
70749: IFTRUE 70753
70751: GO 70763
70753: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
70754: LD_STRING earthquake(getX(game), 0, 32)
70756: PPUSH
70757: CALL_OW 559
70761: GO 71001
70763: LD_INT 2
70765: DOUBLE
70766: EQUAL
70767: IFTRUE 70771
70769: GO 70785
70771: POP
// begin ToLua ( displayStucuk(); ) ;
70772: LD_STRING displayStucuk();
70774: PPUSH
70775: CALL_OW 559
// ResetFog ;
70779: CALL_OW 335
// end ; 3 :
70783: GO 71001
70785: LD_INT 3
70787: DOUBLE
70788: EQUAL
70789: IFTRUE 70793
70791: GO 70897
70793: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70794: LD_ADDR_VAR 0 2
70798: PUSH
70799: LD_INT 22
70801: PUSH
70802: LD_OWVAR 2
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 25
70813: PUSH
70814: LD_INT 1
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PPUSH
70825: CALL_OW 69
70829: ST_TO_ADDR
// if not tmp then
70830: LD_VAR 0 2
70834: NOT
70835: IFFALSE 70839
// exit ;
70837: GO 71001
// un := tmp [ rand ( 1 , tmp ) ] ;
70839: LD_ADDR_VAR 0 3
70843: PUSH
70844: LD_VAR 0 2
70848: PUSH
70849: LD_INT 1
70851: PPUSH
70852: LD_VAR 0 2
70856: PPUSH
70857: CALL_OW 12
70861: ARRAY
70862: ST_TO_ADDR
// if Crawls ( un ) then
70863: LD_VAR 0 3
70867: PPUSH
70868: CALL_OW 318
70872: IFFALSE 70883
// ComWalk ( un ) ;
70874: LD_VAR 0 3
70878: PPUSH
70879: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70883: LD_VAR 0 3
70887: PPUSH
70888: LD_INT 8
70890: PPUSH
70891: CALL_OW 336
// end ; 4 :
70895: GO 71001
70897: LD_INT 4
70899: DOUBLE
70900: EQUAL
70901: IFTRUE 70905
70903: GO 70979
70905: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70906: LD_ADDR_VAR 0 2
70910: PUSH
70911: LD_INT 22
70913: PUSH
70914: LD_OWVAR 2
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 30
70925: PUSH
70926: LD_INT 29
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PPUSH
70937: CALL_OW 69
70941: ST_TO_ADDR
// if not tmp then
70942: LD_VAR 0 2
70946: NOT
70947: IFFALSE 70951
// exit ;
70949: GO 71001
// CenterNowOnUnits ( tmp [ 1 ] ) ;
70951: LD_VAR 0 2
70955: PUSH
70956: LD_INT 1
70958: ARRAY
70959: PPUSH
70960: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
70964: LD_VAR 0 2
70968: PUSH
70969: LD_INT 1
70971: ARRAY
70972: PPUSH
70973: CALL_OW 65
// end ; 5 .. 7 :
70977: GO 71001
70979: LD_INT 5
70981: DOUBLE
70982: GREATEREQUAL
70983: IFFALSE 70991
70985: LD_INT 7
70987: DOUBLE
70988: LESSEQUAL
70989: IFTRUE 70993
70991: GO 71000
70993: POP
// StreamSibBomb ; end ;
70994: CALL 67182 0 0
70998: GO 71001
71000: POP
// end ;
71001: PPOPN 3
71003: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
71004: LD_EXP 38
71008: IFFALSE 71016
71010: PUSH
71011: LD_EXP 88
71015: AND
71016: IFFALSE 71172
71018: GO 71020
71020: DISABLE
71021: LD_INT 0
71023: PPUSH
71024: PPUSH
71025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
71026: LD_ADDR_VAR 0 2
71030: PUSH
71031: LD_INT 81
71033: PUSH
71034: LD_OWVAR 2
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 2
71045: PUSH
71046: LD_INT 21
71048: PUSH
71049: LD_INT 1
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 21
71058: PUSH
71059: LD_INT 2
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: LIST
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PPUSH
71075: CALL_OW 69
71079: ST_TO_ADDR
// if not tmp then
71080: LD_VAR 0 2
71084: NOT
71085: IFFALSE 71089
// exit ;
71087: GO 71172
// p := 0 ;
71089: LD_ADDR_VAR 0 3
71093: PUSH
71094: LD_INT 0
71096: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71097: LD_INT 35
71099: PPUSH
71100: CALL_OW 67
// p := p + 1 ;
71104: LD_ADDR_VAR 0 3
71108: PUSH
71109: LD_VAR 0 3
71113: PUSH
71114: LD_INT 1
71116: PLUS
71117: ST_TO_ADDR
// for i in tmp do
71118: LD_ADDR_VAR 0 1
71122: PUSH
71123: LD_VAR 0 2
71127: PUSH
71128: FOR_IN
71129: IFFALSE 71160
// if GetLives ( i ) < 1000 then
71131: LD_VAR 0 1
71135: PPUSH
71136: CALL_OW 256
71140: PUSH
71141: LD_INT 1000
71143: LESS
71144: IFFALSE 71158
// SetLives ( i , 1000 ) ;
71146: LD_VAR 0 1
71150: PPUSH
71151: LD_INT 1000
71153: PPUSH
71154: CALL_OW 234
71158: GO 71128
71160: POP
71161: POP
// until p > 20 ;
71162: LD_VAR 0 3
71166: PUSH
71167: LD_INT 20
71169: GREATER
71170: IFFALSE 71097
// end ;
71172: PPOPN 3
71174: END
// every 0 0$1 trigger StreamModeActive and sTime do
71175: LD_EXP 38
71179: IFFALSE 71187
71181: PUSH
71182: LD_EXP 89
71186: AND
71187: IFFALSE 71222
71189: GO 71191
71191: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
71192: LD_INT 28
71194: PPUSH
71195: LD_OWVAR 2
71199: PPUSH
71200: LD_INT 2
71202: PPUSH
71203: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
71207: LD_INT 30
71209: PPUSH
71210: LD_OWVAR 2
71214: PPUSH
71215: LD_INT 2
71217: PPUSH
71218: CALL_OW 322
// end ;
71222: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
71223: LD_EXP 38
71227: IFFALSE 71235
71229: PUSH
71230: LD_EXP 90
71234: AND
71235: IFFALSE 71356
71237: GO 71239
71239: DISABLE
71240: LD_INT 0
71242: PPUSH
71243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71244: LD_ADDR_VAR 0 2
71248: PUSH
71249: LD_INT 22
71251: PUSH
71252: LD_OWVAR 2
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: LD_INT 21
71263: PUSH
71264: LD_INT 1
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 3
71273: PUSH
71274: LD_INT 23
71276: PUSH
71277: LD_INT 0
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: LIST
71292: PPUSH
71293: CALL_OW 69
71297: ST_TO_ADDR
// if not tmp then
71298: LD_VAR 0 2
71302: NOT
71303: IFFALSE 71307
// exit ;
71305: GO 71356
// for i in tmp do
71307: LD_ADDR_VAR 0 1
71311: PUSH
71312: LD_VAR 0 2
71316: PUSH
71317: FOR_IN
71318: IFFALSE 71354
// begin if Crawls ( i ) then
71320: LD_VAR 0 1
71324: PPUSH
71325: CALL_OW 318
71329: IFFALSE 71340
// ComWalk ( i ) ;
71331: LD_VAR 0 1
71335: PPUSH
71336: CALL_OW 138
// SetClass ( i , 2 ) ;
71340: LD_VAR 0 1
71344: PPUSH
71345: LD_INT 2
71347: PPUSH
71348: CALL_OW 336
// end ;
71352: GO 71317
71354: POP
71355: POP
// end ;
71356: PPOPN 2
71358: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
71359: LD_EXP 38
71363: IFFALSE 71371
71365: PUSH
71366: LD_EXP 91
71370: AND
71371: IFFALSE 71661
71373: GO 71375
71375: DISABLE
71376: LD_INT 0
71378: PPUSH
71379: PPUSH
71380: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
71381: LD_OWVAR 2
71385: PPUSH
71386: LD_INT 9
71388: PPUSH
71389: LD_INT 1
71391: PPUSH
71392: LD_INT 1
71394: PPUSH
71395: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
71399: LD_INT 9
71401: PPUSH
71402: LD_OWVAR 2
71406: PPUSH
71407: CALL_OW 343
// uc_side := 9 ;
71411: LD_ADDR_OWVAR 20
71415: PUSH
71416: LD_INT 9
71418: ST_TO_ADDR
// uc_nation := 2 ;
71419: LD_ADDR_OWVAR 21
71423: PUSH
71424: LD_INT 2
71426: ST_TO_ADDR
// hc_name := Dark Warrior ;
71427: LD_ADDR_OWVAR 26
71431: PUSH
71432: LD_STRING Dark Warrior
71434: ST_TO_ADDR
// hc_gallery :=  ;
71435: LD_ADDR_OWVAR 33
71439: PUSH
71440: LD_STRING 
71442: ST_TO_ADDR
// hc_noskilllimit := true ;
71443: LD_ADDR_OWVAR 76
71447: PUSH
71448: LD_INT 1
71450: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
71451: LD_ADDR_OWVAR 31
71455: PUSH
71456: LD_INT 30
71458: PUSH
71459: LD_INT 30
71461: PUSH
71462: LD_INT 30
71464: PUSH
71465: LD_INT 30
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: ST_TO_ADDR
// un := CreateHuman ;
71474: LD_ADDR_VAR 0 3
71478: PUSH
71479: CALL_OW 44
71483: ST_TO_ADDR
// hc_noskilllimit := false ;
71484: LD_ADDR_OWVAR 76
71488: PUSH
71489: LD_INT 0
71491: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71492: LD_VAR 0 3
71496: PPUSH
71497: LD_INT 1
71499: PPUSH
71500: CALL_OW 51
// ToLua ( playRanger() ) ;
71504: LD_STRING playRanger()
71506: PPUSH
71507: CALL_OW 559
// p := 0 ;
71511: LD_ADDR_VAR 0 2
71515: PUSH
71516: LD_INT 0
71518: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71519: LD_INT 35
71521: PPUSH
71522: CALL_OW 67
// p := p + 1 ;
71526: LD_ADDR_VAR 0 2
71530: PUSH
71531: LD_VAR 0 2
71535: PUSH
71536: LD_INT 1
71538: PLUS
71539: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
71540: LD_VAR 0 3
71544: PPUSH
71545: CALL_OW 256
71549: PUSH
71550: LD_INT 1000
71552: LESS
71553: IFFALSE 71567
// SetLives ( un , 1000 ) ;
71555: LD_VAR 0 3
71559: PPUSH
71560: LD_INT 1000
71562: PPUSH
71563: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
71567: LD_VAR 0 3
71571: PPUSH
71572: LD_INT 81
71574: PUSH
71575: LD_OWVAR 2
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 91
71586: PUSH
71587: LD_VAR 0 3
71591: PUSH
71592: LD_INT 30
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: LIST
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PPUSH
71604: CALL_OW 69
71608: PPUSH
71609: LD_VAR 0 3
71613: PPUSH
71614: CALL_OW 74
71618: PPUSH
71619: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
71623: LD_VAR 0 2
71627: PUSH
71628: LD_INT 80
71630: GREATER
71631: IFTRUE 71644
71633: PUSH
71634: LD_VAR 0 3
71638: PPUSH
71639: CALL_OW 301
71643: OR
71644: IFFALSE 71519
// if un then
71646: LD_VAR 0 3
71650: IFFALSE 71661
// RemoveUnit ( un ) ;
71652: LD_VAR 0 3
71656: PPUSH
71657: CALL_OW 64
// end ;
71661: PPOPN 3
71663: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
71664: LD_EXP 92
71668: IFFALSE 71784
71670: GO 71672
71672: DISABLE
71673: LD_INT 0
71675: PPUSH
71676: PPUSH
71677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71678: LD_ADDR_VAR 0 2
71682: PUSH
71683: LD_INT 81
71685: PUSH
71686: LD_OWVAR 2
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 21
71697: PUSH
71698: LD_INT 1
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PPUSH
71709: CALL_OW 69
71713: ST_TO_ADDR
// ToLua ( playComputer() ) ;
71714: LD_STRING playComputer()
71716: PPUSH
71717: CALL_OW 559
// if not tmp then
71721: LD_VAR 0 2
71725: NOT
71726: IFFALSE 71730
// exit ;
71728: GO 71784
// for i in tmp do
71730: LD_ADDR_VAR 0 1
71734: PUSH
71735: LD_VAR 0 2
71739: PUSH
71740: FOR_IN
71741: IFFALSE 71782
// for j := 1 to 4 do
71743: LD_ADDR_VAR 0 3
71747: PUSH
71748: DOUBLE
71749: LD_INT 1
71751: DEC
71752: ST_TO_ADDR
71753: LD_INT 4
71755: PUSH
71756: FOR_TO
71757: IFFALSE 71778
// SetSkill ( i , j , 10 ) ;
71759: LD_VAR 0 1
71763: PPUSH
71764: LD_VAR 0 3
71768: PPUSH
71769: LD_INT 10
71771: PPUSH
71772: CALL_OW 237
71776: GO 71756
71778: POP
71779: POP
71780: GO 71740
71782: POP
71783: POP
// end ;
71784: PPOPN 3
71786: END
// every 0 0$1 trigger s30 do var i , tmp ;
71787: LD_EXP 93
71791: IFFALSE 71860
71793: GO 71795
71795: DISABLE
71796: LD_INT 0
71798: PPUSH
71799: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71800: LD_ADDR_VAR 0 2
71804: PUSH
71805: LD_INT 22
71807: PUSH
71808: LD_OWVAR 2
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PPUSH
71817: CALL_OW 69
71821: ST_TO_ADDR
// if not tmp then
71822: LD_VAR 0 2
71826: NOT
71827: IFFALSE 71831
// exit ;
71829: GO 71860
// for i in tmp do
71831: LD_ADDR_VAR 0 1
71835: PUSH
71836: LD_VAR 0 2
71840: PUSH
71841: FOR_IN
71842: IFFALSE 71858
// SetLives ( i , 300 ) ;
71844: LD_VAR 0 1
71848: PPUSH
71849: LD_INT 300
71851: PPUSH
71852: CALL_OW 234
71856: GO 71841
71858: POP
71859: POP
// end ;
71860: PPOPN 2
71862: END
// every 0 0$1 trigger s60 do var i , tmp ;
71863: LD_EXP 94
71867: IFFALSE 71936
71869: GO 71871
71871: DISABLE
71872: LD_INT 0
71874: PPUSH
71875: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71876: LD_ADDR_VAR 0 2
71880: PUSH
71881: LD_INT 22
71883: PUSH
71884: LD_OWVAR 2
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PPUSH
71893: CALL_OW 69
71897: ST_TO_ADDR
// if not tmp then
71898: LD_VAR 0 2
71902: NOT
71903: IFFALSE 71907
// exit ;
71905: GO 71936
// for i in tmp do
71907: LD_ADDR_VAR 0 1
71911: PUSH
71912: LD_VAR 0 2
71916: PUSH
71917: FOR_IN
71918: IFFALSE 71934
// SetLives ( i , 600 ) ;
71920: LD_VAR 0 1
71924: PPUSH
71925: LD_INT 600
71927: PPUSH
71928: CALL_OW 234
71932: GO 71917
71934: POP
71935: POP
// end ;
71936: PPOPN 2
71938: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71939: LD_INT 0
71941: PPUSH
// case cmd of 301 :
71942: LD_VAR 0 1
71946: PUSH
71947: LD_INT 301
71949: DOUBLE
71950: EQUAL
71951: IFTRUE 71955
71953: GO 71987
71955: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
71956: LD_VAR 0 6
71960: PPUSH
71961: LD_VAR 0 7
71965: PPUSH
71966: LD_VAR 0 8
71970: PPUSH
71971: LD_VAR 0 4
71975: PPUSH
71976: LD_VAR 0 5
71980: PPUSH
71981: CALL 73200 0 5
71985: GO 72108
71987: LD_INT 302
71989: DOUBLE
71990: EQUAL
71991: IFTRUE 71995
71993: GO 72032
71995: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
71996: LD_VAR 0 6
72000: PPUSH
72001: LD_VAR 0 7
72005: PPUSH
72006: LD_VAR 0 8
72010: PPUSH
72011: LD_VAR 0 9
72015: PPUSH
72016: LD_VAR 0 4
72020: PPUSH
72021: LD_VAR 0 5
72025: PPUSH
72026: CALL 73291 0 6
72030: GO 72108
72032: LD_INT 303
72034: DOUBLE
72035: EQUAL
72036: IFTRUE 72040
72038: GO 72077
72040: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
72041: LD_VAR 0 6
72045: PPUSH
72046: LD_VAR 0 7
72050: PPUSH
72051: LD_VAR 0 8
72055: PPUSH
72056: LD_VAR 0 9
72060: PPUSH
72061: LD_VAR 0 4
72065: PPUSH
72066: LD_VAR 0 5
72070: PPUSH
72071: CALL 72113 0 6
72075: GO 72108
72077: LD_INT 304
72079: DOUBLE
72080: EQUAL
72081: IFTRUE 72085
72083: GO 72107
72085: POP
// hHackTeleport ( unit , x , y ) ; end ;
72086: LD_VAR 0 2
72090: PPUSH
72091: LD_VAR 0 4
72095: PPUSH
72096: LD_VAR 0 5
72100: PPUSH
72101: CALL 73884 0 3
72105: GO 72108
72107: POP
// end ;
72108: LD_VAR 0 12
72112: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
72113: LD_INT 0
72115: PPUSH
72116: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
72117: LD_VAR 0 1
72121: PUSH
72122: LD_INT 1
72124: LESS
72125: IFTRUE 72137
72127: PUSH
72128: LD_VAR 0 1
72132: PUSH
72133: LD_INT 3
72135: GREATER
72136: OR
72137: IFTRUE 72155
72139: PUSH
72140: LD_VAR 0 5
72144: PPUSH
72145: LD_VAR 0 6
72149: PPUSH
72150: CALL_OW 428
72154: OR
72155: IFFALSE 72159
// exit ;
72157: GO 72887
// uc_side := your_side ;
72159: LD_ADDR_OWVAR 20
72163: PUSH
72164: LD_OWVAR 2
72168: ST_TO_ADDR
// uc_nation := nation ;
72169: LD_ADDR_OWVAR 21
72173: PUSH
72174: LD_VAR 0 1
72178: ST_TO_ADDR
// bc_level = 1 ;
72179: LD_ADDR_OWVAR 43
72183: PUSH
72184: LD_INT 1
72186: ST_TO_ADDR
// case btype of 1 :
72187: LD_VAR 0 2
72191: PUSH
72192: LD_INT 1
72194: DOUBLE
72195: EQUAL
72196: IFTRUE 72200
72198: GO 72211
72200: POP
// bc_type := b_depot ; 2 :
72201: LD_ADDR_OWVAR 42
72205: PUSH
72206: LD_INT 0
72208: ST_TO_ADDR
72209: GO 72831
72211: LD_INT 2
72213: DOUBLE
72214: EQUAL
72215: IFTRUE 72219
72217: GO 72230
72219: POP
// bc_type := b_warehouse ; 3 :
72220: LD_ADDR_OWVAR 42
72224: PUSH
72225: LD_INT 1
72227: ST_TO_ADDR
72228: GO 72831
72230: LD_INT 3
72232: DOUBLE
72233: EQUAL
72234: IFTRUE 72238
72236: GO 72249
72238: POP
// bc_type := b_lab ; 4 .. 9 :
72239: LD_ADDR_OWVAR 42
72243: PUSH
72244: LD_INT 6
72246: ST_TO_ADDR
72247: GO 72831
72249: LD_INT 4
72251: DOUBLE
72252: GREATEREQUAL
72253: IFFALSE 72261
72255: LD_INT 9
72257: DOUBLE
72258: LESSEQUAL
72259: IFTRUE 72263
72261: GO 72323
72263: POP
// begin bc_type := b_lab_half ;
72264: LD_ADDR_OWVAR 42
72268: PUSH
72269: LD_INT 7
72271: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
72272: LD_ADDR_OWVAR 44
72276: PUSH
72277: LD_INT 10
72279: PUSH
72280: LD_INT 11
72282: PUSH
72283: LD_INT 12
72285: PUSH
72286: LD_INT 15
72288: PUSH
72289: LD_INT 14
72291: PUSH
72292: LD_INT 13
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: PUSH
72303: LD_VAR 0 2
72307: PUSH
72308: LD_INT 3
72310: MINUS
72311: ARRAY
72312: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
72313: LD_ADDR_OWVAR 45
72317: PUSH
72318: LD_INT 9
72320: ST_TO_ADDR
// end ; 10 .. 13 :
72321: GO 72831
72323: LD_INT 10
72325: DOUBLE
72326: GREATEREQUAL
72327: IFFALSE 72335
72329: LD_INT 13
72331: DOUBLE
72332: LESSEQUAL
72333: IFTRUE 72337
72335: GO 72414
72337: POP
// begin bc_type := b_lab_full ;
72338: LD_ADDR_OWVAR 42
72342: PUSH
72343: LD_INT 8
72345: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
72346: LD_ADDR_OWVAR 44
72350: PUSH
72351: LD_INT 10
72353: PUSH
72354: LD_INT 12
72356: PUSH
72357: LD_INT 14
72359: PUSH
72360: LD_INT 13
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: PUSH
72369: LD_VAR 0 2
72373: PUSH
72374: LD_INT 9
72376: MINUS
72377: ARRAY
72378: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
72379: LD_ADDR_OWVAR 45
72383: PUSH
72384: LD_INT 11
72386: PUSH
72387: LD_INT 15
72389: PUSH
72390: LD_INT 12
72392: PUSH
72393: LD_INT 15
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: PUSH
72402: LD_VAR 0 2
72406: PUSH
72407: LD_INT 9
72409: MINUS
72410: ARRAY
72411: ST_TO_ADDR
// end ; 14 :
72412: GO 72831
72414: LD_INT 14
72416: DOUBLE
72417: EQUAL
72418: IFTRUE 72422
72420: GO 72433
72422: POP
// bc_type := b_workshop ; 15 :
72423: LD_ADDR_OWVAR 42
72427: PUSH
72428: LD_INT 2
72430: ST_TO_ADDR
72431: GO 72831
72433: LD_INT 15
72435: DOUBLE
72436: EQUAL
72437: IFTRUE 72441
72439: GO 72452
72441: POP
// bc_type := b_factory ; 16 :
72442: LD_ADDR_OWVAR 42
72446: PUSH
72447: LD_INT 3
72449: ST_TO_ADDR
72450: GO 72831
72452: LD_INT 16
72454: DOUBLE
72455: EQUAL
72456: IFTRUE 72460
72458: GO 72471
72460: POP
// bc_type := b_ext_gun ; 17 :
72461: LD_ADDR_OWVAR 42
72465: PUSH
72466: LD_INT 17
72468: ST_TO_ADDR
72469: GO 72831
72471: LD_INT 17
72473: DOUBLE
72474: EQUAL
72475: IFTRUE 72479
72477: GO 72507
72479: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
72480: LD_ADDR_OWVAR 42
72484: PUSH
72485: LD_INT 19
72487: PUSH
72488: LD_INT 23
72490: PUSH
72491: LD_INT 19
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: LIST
72498: PUSH
72499: LD_VAR 0 1
72503: ARRAY
72504: ST_TO_ADDR
72505: GO 72831
72507: LD_INT 18
72509: DOUBLE
72510: EQUAL
72511: IFTRUE 72515
72513: GO 72526
72515: POP
// bc_type := b_ext_radar ; 19 :
72516: LD_ADDR_OWVAR 42
72520: PUSH
72521: LD_INT 20
72523: ST_TO_ADDR
72524: GO 72831
72526: LD_INT 19
72528: DOUBLE
72529: EQUAL
72530: IFTRUE 72534
72532: GO 72545
72534: POP
// bc_type := b_ext_radio ; 20 :
72535: LD_ADDR_OWVAR 42
72539: PUSH
72540: LD_INT 22
72542: ST_TO_ADDR
72543: GO 72831
72545: LD_INT 20
72547: DOUBLE
72548: EQUAL
72549: IFTRUE 72553
72551: GO 72564
72553: POP
// bc_type := b_ext_siberium ; 21 :
72554: LD_ADDR_OWVAR 42
72558: PUSH
72559: LD_INT 21
72561: ST_TO_ADDR
72562: GO 72831
72564: LD_INT 21
72566: DOUBLE
72567: EQUAL
72568: IFTRUE 72572
72570: GO 72583
72572: POP
// bc_type := b_ext_computer ; 22 :
72573: LD_ADDR_OWVAR 42
72577: PUSH
72578: LD_INT 24
72580: ST_TO_ADDR
72581: GO 72831
72583: LD_INT 22
72585: DOUBLE
72586: EQUAL
72587: IFTRUE 72591
72589: GO 72602
72591: POP
// bc_type := b_ext_track ; 23 :
72592: LD_ADDR_OWVAR 42
72596: PUSH
72597: LD_INT 16
72599: ST_TO_ADDR
72600: GO 72831
72602: LD_INT 23
72604: DOUBLE
72605: EQUAL
72606: IFTRUE 72610
72608: GO 72621
72610: POP
// bc_type := b_ext_laser ; 24 :
72611: LD_ADDR_OWVAR 42
72615: PUSH
72616: LD_INT 25
72618: ST_TO_ADDR
72619: GO 72831
72621: LD_INT 24
72623: DOUBLE
72624: EQUAL
72625: IFTRUE 72629
72627: GO 72640
72629: POP
// bc_type := b_control_tower ; 25 :
72630: LD_ADDR_OWVAR 42
72634: PUSH
72635: LD_INT 36
72637: ST_TO_ADDR
72638: GO 72831
72640: LD_INT 25
72642: DOUBLE
72643: EQUAL
72644: IFTRUE 72648
72646: GO 72659
72648: POP
// bc_type := b_breastwork ; 26 :
72649: LD_ADDR_OWVAR 42
72653: PUSH
72654: LD_INT 31
72656: ST_TO_ADDR
72657: GO 72831
72659: LD_INT 26
72661: DOUBLE
72662: EQUAL
72663: IFTRUE 72667
72665: GO 72678
72667: POP
// bc_type := b_bunker ; 27 :
72668: LD_ADDR_OWVAR 42
72672: PUSH
72673: LD_INT 32
72675: ST_TO_ADDR
72676: GO 72831
72678: LD_INT 27
72680: DOUBLE
72681: EQUAL
72682: IFTRUE 72686
72684: GO 72697
72686: POP
// bc_type := b_turret ; 28 :
72687: LD_ADDR_OWVAR 42
72691: PUSH
72692: LD_INT 33
72694: ST_TO_ADDR
72695: GO 72831
72697: LD_INT 28
72699: DOUBLE
72700: EQUAL
72701: IFTRUE 72705
72703: GO 72716
72705: POP
// bc_type := b_armoury ; 29 :
72706: LD_ADDR_OWVAR 42
72710: PUSH
72711: LD_INT 4
72713: ST_TO_ADDR
72714: GO 72831
72716: LD_INT 29
72718: DOUBLE
72719: EQUAL
72720: IFTRUE 72724
72722: GO 72735
72724: POP
// bc_type := b_barracks ; 30 :
72725: LD_ADDR_OWVAR 42
72729: PUSH
72730: LD_INT 5
72732: ST_TO_ADDR
72733: GO 72831
72735: LD_INT 30
72737: DOUBLE
72738: EQUAL
72739: IFTRUE 72743
72741: GO 72754
72743: POP
// bc_type := b_solar_power ; 31 :
72744: LD_ADDR_OWVAR 42
72748: PUSH
72749: LD_INT 27
72751: ST_TO_ADDR
72752: GO 72831
72754: LD_INT 31
72756: DOUBLE
72757: EQUAL
72758: IFTRUE 72762
72760: GO 72773
72762: POP
// bc_type := b_oil_power ; 32 :
72763: LD_ADDR_OWVAR 42
72767: PUSH
72768: LD_INT 26
72770: ST_TO_ADDR
72771: GO 72831
72773: LD_INT 32
72775: DOUBLE
72776: EQUAL
72777: IFTRUE 72781
72779: GO 72792
72781: POP
// bc_type := b_siberite_power ; 33 :
72782: LD_ADDR_OWVAR 42
72786: PUSH
72787: LD_INT 28
72789: ST_TO_ADDR
72790: GO 72831
72792: LD_INT 33
72794: DOUBLE
72795: EQUAL
72796: IFTRUE 72800
72798: GO 72811
72800: POP
// bc_type := b_oil_mine ; 34 :
72801: LD_ADDR_OWVAR 42
72805: PUSH
72806: LD_INT 29
72808: ST_TO_ADDR
72809: GO 72831
72811: LD_INT 34
72813: DOUBLE
72814: EQUAL
72815: IFTRUE 72819
72817: GO 72830
72819: POP
// bc_type := b_siberite_mine ; end ;
72820: LD_ADDR_OWVAR 42
72824: PUSH
72825: LD_INT 30
72827: ST_TO_ADDR
72828: GO 72831
72830: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
72831: LD_ADDR_VAR 0 8
72835: PUSH
72836: LD_VAR 0 5
72840: PPUSH
72841: LD_VAR 0 6
72845: PPUSH
72846: LD_VAR 0 3
72850: PPUSH
72851: CALL_OW 47
72855: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
72856: LD_OWVAR 42
72860: PUSH
72861: LD_INT 32
72863: PUSH
72864: LD_INT 33
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: IN
72871: IFFALSE 72887
// PlaceWeaponTurret ( b , weapon ) ;
72873: LD_VAR 0 8
72877: PPUSH
72878: LD_VAR 0 4
72882: PPUSH
72883: CALL_OW 431
// end ;
72887: LD_VAR 0 7
72891: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
72892: LD_INT 0
72894: PPUSH
72895: PPUSH
72896: PPUSH
72897: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72898: LD_ADDR_VAR 0 4
72902: PUSH
72903: LD_INT 22
72905: PUSH
72906: LD_OWVAR 2
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: LD_INT 2
72917: PUSH
72918: LD_INT 30
72920: PUSH
72921: LD_INT 0
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 30
72930: PUSH
72931: LD_INT 1
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: LIST
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PPUSH
72947: CALL_OW 69
72951: ST_TO_ADDR
// if not tmp then
72952: LD_VAR 0 4
72956: NOT
72957: IFFALSE 72961
// exit ;
72959: GO 73020
// for i in tmp do
72961: LD_ADDR_VAR 0 2
72965: PUSH
72966: LD_VAR 0 4
72970: PUSH
72971: FOR_IN
72972: IFFALSE 73018
// for j = 1 to 3 do
72974: LD_ADDR_VAR 0 3
72978: PUSH
72979: DOUBLE
72980: LD_INT 1
72982: DEC
72983: ST_TO_ADDR
72984: LD_INT 3
72986: PUSH
72987: FOR_TO
72988: IFFALSE 73014
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
72990: LD_VAR 0 2
72994: PPUSH
72995: CALL_OW 274
72999: PPUSH
73000: LD_VAR 0 3
73004: PPUSH
73005: LD_INT 99999
73007: PPUSH
73008: CALL_OW 277
73012: GO 72987
73014: POP
73015: POP
73016: GO 72971
73018: POP
73019: POP
// end ;
73020: LD_VAR 0 1
73024: RET
// export function hHackSetLevel10 ; var i , j ; begin
73025: LD_INT 0
73027: PPUSH
73028: PPUSH
73029: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73030: LD_ADDR_VAR 0 2
73034: PUSH
73035: LD_INT 21
73037: PUSH
73038: LD_INT 1
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: PPUSH
73045: CALL_OW 69
73049: PUSH
73050: FOR_IN
73051: IFFALSE 73103
// if IsSelected ( i ) then
73053: LD_VAR 0 2
73057: PPUSH
73058: CALL_OW 306
73062: IFFALSE 73101
// begin for j := 1 to 4 do
73064: LD_ADDR_VAR 0 3
73068: PUSH
73069: DOUBLE
73070: LD_INT 1
73072: DEC
73073: ST_TO_ADDR
73074: LD_INT 4
73076: PUSH
73077: FOR_TO
73078: IFFALSE 73099
// SetSkill ( i , j , 10 ) ;
73080: LD_VAR 0 2
73084: PPUSH
73085: LD_VAR 0 3
73089: PPUSH
73090: LD_INT 10
73092: PPUSH
73093: CALL_OW 237
73097: GO 73077
73099: POP
73100: POP
// end ;
73101: GO 73050
73103: POP
73104: POP
// end ;
73105: LD_VAR 0 1
73109: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
73110: LD_INT 0
73112: PPUSH
73113: PPUSH
73114: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
73115: LD_ADDR_VAR 0 2
73119: PUSH
73120: LD_INT 22
73122: PUSH
73123: LD_OWVAR 2
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: LD_INT 21
73134: PUSH
73135: LD_INT 1
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PPUSH
73146: CALL_OW 69
73150: PUSH
73151: FOR_IN
73152: IFFALSE 73193
// begin for j := 1 to 4 do
73154: LD_ADDR_VAR 0 3
73158: PUSH
73159: DOUBLE
73160: LD_INT 1
73162: DEC
73163: ST_TO_ADDR
73164: LD_INT 4
73166: PUSH
73167: FOR_TO
73168: IFFALSE 73189
// SetSkill ( i , j , 10 ) ;
73170: LD_VAR 0 2
73174: PPUSH
73175: LD_VAR 0 3
73179: PPUSH
73180: LD_INT 10
73182: PPUSH
73183: CALL_OW 237
73187: GO 73167
73189: POP
73190: POP
// end ;
73191: GO 73151
73193: POP
73194: POP
// end ;
73195: LD_VAR 0 1
73199: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
73200: LD_INT 0
73202: PPUSH
// uc_side := your_side ;
73203: LD_ADDR_OWVAR 20
73207: PUSH
73208: LD_OWVAR 2
73212: ST_TO_ADDR
// uc_nation := nation ;
73213: LD_ADDR_OWVAR 21
73217: PUSH
73218: LD_VAR 0 1
73222: ST_TO_ADDR
// InitHc ;
73223: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
73227: LD_INT 0
73229: PPUSH
73230: LD_VAR 0 2
73234: PPUSH
73235: LD_VAR 0 3
73239: PPUSH
73240: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
73244: LD_VAR 0 4
73248: PPUSH
73249: LD_VAR 0 5
73253: PPUSH
73254: CALL_OW 428
73258: PUSH
73259: LD_INT 0
73261: EQUAL
73262: IFFALSE 73286
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
73264: CALL_OW 44
73268: PPUSH
73269: LD_VAR 0 4
73273: PPUSH
73274: LD_VAR 0 5
73278: PPUSH
73279: LD_INT 1
73281: PPUSH
73282: CALL_OW 48
// end ;
73286: LD_VAR 0 6
73290: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
73291: LD_INT 0
73293: PPUSH
73294: PPUSH
// uc_side := your_side ;
73295: LD_ADDR_OWVAR 20
73299: PUSH
73300: LD_OWVAR 2
73304: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
73305: LD_VAR 0 1
73309: PUSH
73310: LD_INT 1
73312: PUSH
73313: LD_INT 2
73315: PUSH
73316: LD_INT 3
73318: PUSH
73319: LD_INT 4
73321: PUSH
73322: LD_INT 5
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: IN
73332: IFFALSE 73344
// uc_nation := nation_american else
73334: LD_ADDR_OWVAR 21
73338: PUSH
73339: LD_INT 1
73341: ST_TO_ADDR
73342: GO 73387
// if chassis in [ 11 , 12 , 13 , 14 ] then
73344: LD_VAR 0 1
73348: PUSH
73349: LD_INT 11
73351: PUSH
73352: LD_INT 12
73354: PUSH
73355: LD_INT 13
73357: PUSH
73358: LD_INT 14
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: IN
73367: IFFALSE 73379
// uc_nation := nation_arabian else
73369: LD_ADDR_OWVAR 21
73373: PUSH
73374: LD_INT 2
73376: ST_TO_ADDR
73377: GO 73387
// uc_nation := nation_russian ;
73379: LD_ADDR_OWVAR 21
73383: PUSH
73384: LD_INT 3
73386: ST_TO_ADDR
// vc_chassis := chassis ;
73387: LD_ADDR_OWVAR 37
73391: PUSH
73392: LD_VAR 0 1
73396: ST_TO_ADDR
// vc_engine := engine ;
73397: LD_ADDR_OWVAR 39
73401: PUSH
73402: LD_VAR 0 2
73406: ST_TO_ADDR
// vc_control := control ;
73407: LD_ADDR_OWVAR 38
73411: PUSH
73412: LD_VAR 0 3
73416: ST_TO_ADDR
// vc_weapon := weapon ;
73417: LD_ADDR_OWVAR 40
73421: PUSH
73422: LD_VAR 0 4
73426: ST_TO_ADDR
// un := CreateVehicle ;
73427: LD_ADDR_VAR 0 8
73431: PUSH
73432: CALL_OW 45
73436: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
73437: LD_VAR 0 8
73441: PPUSH
73442: LD_INT 0
73444: PPUSH
73445: LD_INT 5
73447: PPUSH
73448: CALL_OW 12
73452: PPUSH
73453: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
73457: LD_VAR 0 8
73461: PPUSH
73462: LD_VAR 0 5
73466: PPUSH
73467: LD_VAR 0 6
73471: PPUSH
73472: LD_INT 1
73474: PPUSH
73475: CALL_OW 48
// end ;
73479: LD_VAR 0 7
73483: RET
// export hInvincible ; every 1 do
73484: GO 73486
73486: DISABLE
// hInvincible := [ ] ;
73487: LD_ADDR_EXP 95
73491: PUSH
73492: EMPTY
73493: ST_TO_ADDR
73494: END
// every 10 do var i ;
73495: GO 73497
73497: DISABLE
73498: LD_INT 0
73500: PPUSH
// begin enable ;
73501: ENABLE
// if not hInvincible then
73502: LD_EXP 95
73506: NOT
73507: IFFALSE 73511
// exit ;
73509: GO 73555
// for i in hInvincible do
73511: LD_ADDR_VAR 0 1
73515: PUSH
73516: LD_EXP 95
73520: PUSH
73521: FOR_IN
73522: IFFALSE 73553
// if GetLives ( i ) < 1000 then
73524: LD_VAR 0 1
73528: PPUSH
73529: CALL_OW 256
73533: PUSH
73534: LD_INT 1000
73536: LESS
73537: IFFALSE 73551
// SetLives ( i , 1000 ) ;
73539: LD_VAR 0 1
73543: PPUSH
73544: LD_INT 1000
73546: PPUSH
73547: CALL_OW 234
73551: GO 73521
73553: POP
73554: POP
// end ;
73555: PPOPN 1
73557: END
// export function hHackInvincible ; var i ; begin
73558: LD_INT 0
73560: PPUSH
73561: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
73562: LD_ADDR_VAR 0 2
73566: PUSH
73567: LD_INT 2
73569: PUSH
73570: LD_INT 21
73572: PUSH
73573: LD_INT 1
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PUSH
73580: LD_INT 21
73582: PUSH
73583: LD_INT 2
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: LIST
73594: PPUSH
73595: CALL_OW 69
73599: PUSH
73600: FOR_IN
73601: IFFALSE 73662
// if IsSelected ( i ) then
73603: LD_VAR 0 2
73607: PPUSH
73608: CALL_OW 306
73612: IFFALSE 73660
// begin if i in hInvincible then
73614: LD_VAR 0 2
73618: PUSH
73619: LD_EXP 95
73623: IN
73624: IFFALSE 73644
// hInvincible := hInvincible diff i else
73626: LD_ADDR_EXP 95
73630: PUSH
73631: LD_EXP 95
73635: PUSH
73636: LD_VAR 0 2
73640: DIFF
73641: ST_TO_ADDR
73642: GO 73660
// hInvincible := hInvincible union i ;
73644: LD_ADDR_EXP 95
73648: PUSH
73649: LD_EXP 95
73653: PUSH
73654: LD_VAR 0 2
73658: UNION
73659: ST_TO_ADDR
// end ;
73660: GO 73600
73662: POP
73663: POP
// end ;
73664: LD_VAR 0 1
73668: RET
// export function hHackInvisible ; var i , j ; begin
73669: LD_INT 0
73671: PPUSH
73672: PPUSH
73673: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73674: LD_ADDR_VAR 0 2
73678: PUSH
73679: LD_INT 21
73681: PUSH
73682: LD_INT 1
73684: PUSH
73685: EMPTY
73686: LIST
73687: LIST
73688: PPUSH
73689: CALL_OW 69
73693: PUSH
73694: FOR_IN
73695: IFFALSE 73719
// if IsSelected ( i ) then
73697: LD_VAR 0 2
73701: PPUSH
73702: CALL_OW 306
73706: IFFALSE 73717
// ComForceInvisible ( i ) ;
73708: LD_VAR 0 2
73712: PPUSH
73713: CALL_OW 496
73717: GO 73694
73719: POP
73720: POP
// end ;
73721: LD_VAR 0 1
73725: RET
// export function hHackChangeYourSide ; begin
73726: LD_INT 0
73728: PPUSH
// if your_side = 8 then
73729: LD_OWVAR 2
73733: PUSH
73734: LD_INT 8
73736: EQUAL
73737: IFFALSE 73749
// your_side := 0 else
73739: LD_ADDR_OWVAR 2
73743: PUSH
73744: LD_INT 0
73746: ST_TO_ADDR
73747: GO 73763
// your_side := your_side + 1 ;
73749: LD_ADDR_OWVAR 2
73753: PUSH
73754: LD_OWVAR 2
73758: PUSH
73759: LD_INT 1
73761: PLUS
73762: ST_TO_ADDR
// end ;
73763: LD_VAR 0 1
73767: RET
// export function hHackChangeUnitSide ; var i , j ; begin
73768: LD_INT 0
73770: PPUSH
73771: PPUSH
73772: PPUSH
// for i in all_units do
73773: LD_ADDR_VAR 0 2
73777: PUSH
73778: LD_OWVAR 3
73782: PUSH
73783: FOR_IN
73784: IFFALSE 73862
// if IsSelected ( i ) then
73786: LD_VAR 0 2
73790: PPUSH
73791: CALL_OW 306
73795: IFFALSE 73860
// begin j := GetSide ( i ) ;
73797: LD_ADDR_VAR 0 3
73801: PUSH
73802: LD_VAR 0 2
73806: PPUSH
73807: CALL_OW 255
73811: ST_TO_ADDR
// if j = 8 then
73812: LD_VAR 0 3
73816: PUSH
73817: LD_INT 8
73819: EQUAL
73820: IFFALSE 73832
// j := 0 else
73822: LD_ADDR_VAR 0 3
73826: PUSH
73827: LD_INT 0
73829: ST_TO_ADDR
73830: GO 73846
// j := j + 1 ;
73832: LD_ADDR_VAR 0 3
73836: PUSH
73837: LD_VAR 0 3
73841: PUSH
73842: LD_INT 1
73844: PLUS
73845: ST_TO_ADDR
// SetSide ( i , j ) ;
73846: LD_VAR 0 2
73850: PPUSH
73851: LD_VAR 0 3
73855: PPUSH
73856: CALL_OW 235
// end ;
73860: GO 73783
73862: POP
73863: POP
// end ;
73864: LD_VAR 0 1
73868: RET
// export function hHackFog ; begin
73869: LD_INT 0
73871: PPUSH
// FogOff ( true ) ;
73872: LD_INT 1
73874: PPUSH
73875: CALL_OW 344
// end ;
73879: LD_VAR 0 1
73883: RET
// export function hHackTeleport ( unit , x , y ) ; begin
73884: LD_INT 0
73886: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
73887: LD_VAR 0 1
73891: PPUSH
73892: LD_VAR 0 2
73896: PPUSH
73897: LD_VAR 0 3
73901: PPUSH
73902: LD_INT 1
73904: PPUSH
73905: LD_INT 1
73907: PPUSH
73908: CALL_OW 483
// CenterOnXY ( x , y ) ;
73912: LD_VAR 0 2
73916: PPUSH
73917: LD_VAR 0 3
73921: PPUSH
73922: CALL_OW 84
// end ;
73926: LD_VAR 0 4
73930: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
73931: LD_INT 0
73933: PPUSH
73934: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
73935: LD_VAR 0 1
73939: NOT
73940: IFTRUE 73959
73942: PUSH
73943: LD_VAR 0 2
73947: PPUSH
73948: LD_VAR 0 3
73952: PPUSH
73953: CALL_OW 488
73957: NOT
73958: OR
73959: IFTRUE 73994
73961: PUSH
73962: LD_VAR 0 1
73966: PPUSH
73967: CALL_OW 266
73971: PUSH
73972: LD_INT 3
73974: NONEQUAL
73975: IFFALSE 73993
73977: PUSH
73978: LD_VAR 0 1
73982: PPUSH
73983: CALL_OW 247
73987: PUSH
73988: LD_INT 1
73990: EQUAL
73991: NOT
73992: AND
73993: OR
73994: IFFALSE 73998
// exit ;
73996: GO 74280
// if GetType ( factory ) = unit_human then
73998: LD_VAR 0 1
74002: PPUSH
74003: CALL_OW 247
74007: PUSH
74008: LD_INT 1
74010: EQUAL
74011: IFFALSE 74028
// factory := IsInUnit ( factory ) ;
74013: LD_ADDR_VAR 0 1
74017: PUSH
74018: LD_VAR 0 1
74022: PPUSH
74023: CALL_OW 310
74027: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
74028: LD_VAR 0 1
74032: PPUSH
74033: CALL_OW 266
74037: PUSH
74038: LD_INT 3
74040: NONEQUAL
74041: IFFALSE 74045
// exit ;
74043: GO 74280
// for i := 1 to Count ( factoryWaypoints ) do
74045: LD_ADDR_VAR 0 5
74049: PUSH
74050: DOUBLE
74051: LD_INT 1
74053: DEC
74054: ST_TO_ADDR
74055: LD_EXP 96
74059: PPUSH
74060: CALL 17877 0 1
74064: PUSH
74065: FOR_TO
74066: IFFALSE 74228
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
74068: LD_VAR 0 2
74072: PPUSH
74073: LD_VAR 0 3
74077: PPUSH
74078: CALL_OW 428
74082: PUSH
74083: LD_EXP 96
74087: PUSH
74088: LD_VAR 0 5
74092: ARRAY
74093: PUSH
74094: LD_INT 2
74096: ARRAY
74097: EQUAL
74098: IFFALSE 74130
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74100: LD_ADDR_EXP 96
74104: PUSH
74105: LD_EXP 96
74109: PPUSH
74110: LD_VAR 0 5
74114: PPUSH
74115: CALL_OW 3
74119: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74120: CALL 74285 0 0
// exit ;
74124: POP
74125: POP
74126: GO 74280
// end else
74128: GO 74226
// if factory = factoryWaypoints [ i ] [ 2 ] then
74130: LD_VAR 0 1
74134: PUSH
74135: LD_EXP 96
74139: PUSH
74140: LD_VAR 0 5
74144: ARRAY
74145: PUSH
74146: LD_INT 2
74148: ARRAY
74149: EQUAL
74150: IFFALSE 74226
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74152: LD_ADDR_EXP 96
74156: PUSH
74157: LD_EXP 96
74161: PPUSH
74162: LD_VAR 0 5
74166: PPUSH
74167: CALL_OW 3
74171: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74172: LD_ADDR_EXP 96
74176: PUSH
74177: LD_EXP 96
74181: PPUSH
74182: LD_VAR 0 1
74186: PPUSH
74187: CALL_OW 255
74191: PUSH
74192: LD_VAR 0 1
74196: PUSH
74197: LD_VAR 0 2
74201: PUSH
74202: LD_VAR 0 3
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: PPUSH
74213: CALL 53853 0 2
74217: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74218: CALL 74285 0 0
// exit ;
74222: POP
74223: POP
74224: GO 74280
// end ; end ;
74226: GO 74065
74228: POP
74229: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74230: LD_ADDR_EXP 96
74234: PUSH
74235: LD_EXP 96
74239: PPUSH
74240: LD_VAR 0 1
74244: PPUSH
74245: CALL_OW 255
74249: PUSH
74250: LD_VAR 0 1
74254: PUSH
74255: LD_VAR 0 2
74259: PUSH
74260: LD_VAR 0 3
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: PPUSH
74271: CALL 53853 0 2
74275: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74276: CALL 74285 0 0
// end ;
74280: LD_VAR 0 4
74284: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
74285: LD_INT 0
74287: PPUSH
74288: PPUSH
74289: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
74290: LD_STRING resetFactoryWaypoint();
74292: PPUSH
74293: CALL_OW 559
// if factoryWaypoints then
74297: LD_EXP 96
74301: IFFALSE 74422
// begin list := factoryWaypoints ;
74303: LD_ADDR_VAR 0 3
74307: PUSH
74308: LD_EXP 96
74312: ST_TO_ADDR
// for i := 1 to list do
74313: LD_ADDR_VAR 0 2
74317: PUSH
74318: DOUBLE
74319: LD_INT 1
74321: DEC
74322: ST_TO_ADDR
74323: LD_VAR 0 3
74327: PUSH
74328: FOR_TO
74329: IFFALSE 74420
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74331: LD_STRING setFactoryWaypointXY(
74333: PUSH
74334: LD_VAR 0 3
74338: PUSH
74339: LD_VAR 0 2
74343: ARRAY
74344: PUSH
74345: LD_INT 1
74347: ARRAY
74348: STR
74349: PUSH
74350: LD_STRING ,
74352: STR
74353: PUSH
74354: LD_VAR 0 3
74358: PUSH
74359: LD_VAR 0 2
74363: ARRAY
74364: PUSH
74365: LD_INT 2
74367: ARRAY
74368: STR
74369: PUSH
74370: LD_STRING ,
74372: STR
74373: PUSH
74374: LD_VAR 0 3
74378: PUSH
74379: LD_VAR 0 2
74383: ARRAY
74384: PUSH
74385: LD_INT 3
74387: ARRAY
74388: STR
74389: PUSH
74390: LD_STRING ,
74392: STR
74393: PUSH
74394: LD_VAR 0 3
74398: PUSH
74399: LD_VAR 0 2
74403: ARRAY
74404: PUSH
74405: LD_INT 4
74407: ARRAY
74408: STR
74409: PUSH
74410: LD_STRING )
74412: STR
74413: PPUSH
74414: CALL_OW 559
74418: GO 74328
74420: POP
74421: POP
// end ; end ;
74422: LD_VAR 0 1
74426: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
74427: LD_INT 0
74429: PPUSH
// if HexInfo ( x , y ) = warehouse then
74430: LD_VAR 0 2
74434: PPUSH
74435: LD_VAR 0 3
74439: PPUSH
74440: CALL_OW 428
74444: PUSH
74445: LD_VAR 0 1
74449: EQUAL
74450: IFFALSE 74477
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
74452: LD_ADDR_EXP 98
74456: PUSH
74457: LD_EXP 98
74461: PPUSH
74462: LD_VAR 0 1
74466: PPUSH
74467: LD_INT 0
74469: PPUSH
74470: CALL_OW 1
74474: ST_TO_ADDR
74475: GO 74528
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
74477: LD_ADDR_EXP 98
74481: PUSH
74482: LD_EXP 98
74486: PPUSH
74487: LD_VAR 0 1
74491: PPUSH
74492: LD_VAR 0 1
74496: PPUSH
74497: CALL_OW 255
74501: PUSH
74502: LD_VAR 0 1
74506: PUSH
74507: LD_VAR 0 2
74511: PUSH
74512: LD_VAR 0 3
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: LIST
74521: LIST
74522: PPUSH
74523: CALL_OW 1
74527: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
74528: CALL 74537 0 0
// end ;
74532: LD_VAR 0 4
74536: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
74537: LD_INT 0
74539: PPUSH
74540: PPUSH
74541: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
74542: LD_STRING resetWarehouseGatheringPoints();
74544: PPUSH
74545: CALL_OW 559
// if warehouseGatheringPoints then
74549: LD_EXP 98
74553: IFFALSE 74679
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
74555: LD_ADDR_VAR 0 3
74559: PUSH
74560: LD_EXP 98
74564: PPUSH
74565: CALL 57787 0 1
74569: ST_TO_ADDR
// for i := 1 to list do
74570: LD_ADDR_VAR 0 2
74574: PUSH
74575: DOUBLE
74576: LD_INT 1
74578: DEC
74579: ST_TO_ADDR
74580: LD_VAR 0 3
74584: PUSH
74585: FOR_TO
74586: IFFALSE 74677
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74588: LD_STRING setWarehouseGatheringPointXY(
74590: PUSH
74591: LD_VAR 0 3
74595: PUSH
74596: LD_VAR 0 2
74600: ARRAY
74601: PUSH
74602: LD_INT 1
74604: ARRAY
74605: STR
74606: PUSH
74607: LD_STRING ,
74609: STR
74610: PUSH
74611: LD_VAR 0 3
74615: PUSH
74616: LD_VAR 0 2
74620: ARRAY
74621: PUSH
74622: LD_INT 2
74624: ARRAY
74625: STR
74626: PUSH
74627: LD_STRING ,
74629: STR
74630: PUSH
74631: LD_VAR 0 3
74635: PUSH
74636: LD_VAR 0 2
74640: ARRAY
74641: PUSH
74642: LD_INT 3
74644: ARRAY
74645: STR
74646: PUSH
74647: LD_STRING ,
74649: STR
74650: PUSH
74651: LD_VAR 0 3
74655: PUSH
74656: LD_VAR 0 2
74660: ARRAY
74661: PUSH
74662: LD_INT 4
74664: ARRAY
74665: STR
74666: PUSH
74667: LD_STRING )
74669: STR
74670: PPUSH
74671: CALL_OW 559
74675: GO 74585
74677: POP
74678: POP
// end ; end ;
74679: LD_VAR 0 1
74683: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
74684: LD_EXP 98
74688: IFFALSE 75383
74690: GO 74692
74692: DISABLE
74693: LD_INT 0
74695: PPUSH
74696: PPUSH
74697: PPUSH
74698: PPUSH
74699: PPUSH
74700: PPUSH
74701: PPUSH
74702: PPUSH
74703: PPUSH
// begin enable ;
74704: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
74705: LD_ADDR_VAR 0 3
74709: PUSH
74710: LD_EXP 98
74714: PPUSH
74715: CALL 57787 0 1
74719: ST_TO_ADDR
// if not list then
74720: LD_VAR 0 3
74724: NOT
74725: IFFALSE 74729
// exit ;
74727: GO 75383
// for i := 1 to list do
74729: LD_ADDR_VAR 0 1
74733: PUSH
74734: DOUBLE
74735: LD_INT 1
74737: DEC
74738: ST_TO_ADDR
74739: LD_VAR 0 3
74743: PUSH
74744: FOR_TO
74745: IFFALSE 75381
// begin depot := list [ i ] [ 2 ] ;
74747: LD_ADDR_VAR 0 8
74751: PUSH
74752: LD_VAR 0 3
74756: PUSH
74757: LD_VAR 0 1
74761: ARRAY
74762: PUSH
74763: LD_INT 2
74765: ARRAY
74766: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
74767: LD_ADDR_VAR 0 5
74771: PUSH
74772: LD_VAR 0 3
74776: PUSH
74777: LD_VAR 0 1
74781: ARRAY
74782: PUSH
74783: LD_INT 1
74785: ARRAY
74786: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
74787: LD_VAR 0 8
74791: PPUSH
74792: CALL_OW 301
74796: IFTRUE 74815
74798: PUSH
74799: LD_VAR 0 5
74803: PUSH
74804: LD_VAR 0 8
74808: PPUSH
74809: CALL_OW 255
74813: NONEQUAL
74814: OR
74815: IFFALSE 74844
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
74817: LD_ADDR_EXP 98
74821: PUSH
74822: LD_EXP 98
74826: PPUSH
74827: LD_VAR 0 8
74831: PPUSH
74832: LD_INT 0
74834: PPUSH
74835: CALL_OW 1
74839: ST_TO_ADDR
// exit ;
74840: POP
74841: POP
74842: GO 75383
// end ; x := list [ i ] [ 3 ] ;
74844: LD_ADDR_VAR 0 6
74848: PUSH
74849: LD_VAR 0 3
74853: PUSH
74854: LD_VAR 0 1
74858: ARRAY
74859: PUSH
74860: LD_INT 3
74862: ARRAY
74863: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
74864: LD_ADDR_VAR 0 7
74868: PUSH
74869: LD_VAR 0 3
74873: PUSH
74874: LD_VAR 0 1
74878: ARRAY
74879: PUSH
74880: LD_INT 4
74882: ARRAY
74883: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
74884: LD_ADDR_VAR 0 9
74888: PUSH
74889: LD_VAR 0 6
74893: PPUSH
74894: LD_VAR 0 7
74898: PPUSH
74899: LD_INT 16
74901: PPUSH
74902: CALL 56361 0 3
74906: ST_TO_ADDR
// if not cratesNearbyPoint then
74907: LD_VAR 0 9
74911: NOT
74912: IFFALSE 74918
// exit ;
74914: POP
74915: POP
74916: GO 75383
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
74918: LD_ADDR_VAR 0 4
74922: PUSH
74923: LD_INT 22
74925: PUSH
74926: LD_VAR 0 5
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: PUSH
74935: LD_INT 3
74937: PUSH
74938: LD_INT 60
74940: PUSH
74941: EMPTY
74942: LIST
74943: PUSH
74944: EMPTY
74945: LIST
74946: LIST
74947: PUSH
74948: LD_INT 91
74950: PUSH
74951: LD_VAR 0 8
74955: PUSH
74956: LD_INT 6
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: LIST
74963: PUSH
74964: LD_INT 2
74966: PUSH
74967: LD_INT 25
74969: PUSH
74970: LD_INT 2
74972: PUSH
74973: EMPTY
74974: LIST
74975: LIST
74976: PUSH
74977: LD_INT 25
74979: PUSH
74980: LD_INT 16
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: LIST
74991: PUSH
74992: EMPTY
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: PPUSH
74998: CALL_OW 69
75002: PUSH
75003: LD_VAR 0 8
75007: PPUSH
75008: CALL_OW 313
75012: PPUSH
75013: LD_INT 3
75015: PUSH
75016: LD_INT 60
75018: PUSH
75019: EMPTY
75020: LIST
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: PUSH
75026: LD_INT 2
75028: PUSH
75029: LD_INT 25
75031: PUSH
75032: LD_INT 2
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: PUSH
75039: LD_INT 25
75041: PUSH
75042: LD_INT 16
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: LIST
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: PPUSH
75058: CALL_OW 72
75062: UNION
75063: ST_TO_ADDR
// if tmp then
75064: LD_VAR 0 4
75068: IFFALSE 75148
// begin tmp := ShrinkArray ( tmp , 3 ) ;
75070: LD_ADDR_VAR 0 4
75074: PUSH
75075: LD_VAR 0 4
75079: PPUSH
75080: LD_INT 3
75082: PPUSH
75083: CALL 54168 0 2
75087: ST_TO_ADDR
// for j in tmp do
75088: LD_ADDR_VAR 0 2
75092: PUSH
75093: LD_VAR 0 4
75097: PUSH
75098: FOR_IN
75099: IFFALSE 75142
// begin if IsInUnit ( j ) then
75101: LD_VAR 0 2
75105: PPUSH
75106: CALL_OW 310
75110: IFFALSE 75121
// ComExit ( j ) ;
75112: LD_VAR 0 2
75116: PPUSH
75117: CALL 54251 0 1
// AddComCollect ( j , x , y ) ;
75121: LD_VAR 0 2
75125: PPUSH
75126: LD_VAR 0 6
75130: PPUSH
75131: LD_VAR 0 7
75135: PPUSH
75136: CALL_OW 177
// end ;
75140: GO 75098
75142: POP
75143: POP
// exit ;
75144: POP
75145: POP
75146: GO 75383
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
75148: LD_ADDR_VAR 0 4
75152: PUSH
75153: LD_INT 22
75155: PUSH
75156: LD_VAR 0 5
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PUSH
75165: LD_INT 91
75167: PUSH
75168: LD_VAR 0 8
75172: PUSH
75173: LD_INT 8
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: LIST
75180: PUSH
75181: LD_INT 2
75183: PUSH
75184: LD_INT 34
75186: PUSH
75187: LD_INT 12
75189: PUSH
75190: EMPTY
75191: LIST
75192: LIST
75193: PUSH
75194: LD_INT 34
75196: PUSH
75197: LD_INT 51
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: PUSH
75204: LD_INT 34
75206: PUSH
75207: LD_INT 32
75209: PUSH
75210: EMPTY
75211: LIST
75212: LIST
75213: PUSH
75214: LD_INT 34
75216: PUSH
75217: LD_INT 89
75219: PUSH
75220: EMPTY
75221: LIST
75222: LIST
75223: PUSH
75224: EMPTY
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: PUSH
75231: EMPTY
75232: LIST
75233: LIST
75234: LIST
75235: PPUSH
75236: CALL_OW 69
75240: ST_TO_ADDR
// if tmp then
75241: LD_VAR 0 4
75245: IFFALSE 75379
// begin for j in tmp do
75247: LD_ADDR_VAR 0 2
75251: PUSH
75252: LD_VAR 0 4
75256: PUSH
75257: FOR_IN
75258: IFFALSE 75377
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
75260: LD_VAR 0 2
75264: PPUSH
75265: CALL_OW 262
75269: PUSH
75270: LD_INT 3
75272: EQUAL
75273: IFTRUE 75290
75275: PUSH
75276: LD_VAR 0 2
75280: PPUSH
75281: CALL_OW 261
75285: PUSH
75286: LD_INT 20
75288: GREATER
75289: OR
75290: IFFALSE 75304
75292: PUSH
75293: LD_VAR 0 2
75297: PPUSH
75298: CALL_OW 314
75302: NOT
75303: AND
75304: IFFALSE 75334
75306: PUSH
75307: LD_VAR 0 2
75311: PPUSH
75312: CALL_OW 263
75316: PUSH
75317: LD_INT 1
75319: NONEQUAL
75320: IFTRUE 75333
75322: PUSH
75323: LD_VAR 0 2
75327: PPUSH
75328: CALL_OW 311
75332: OR
75333: AND
75334: IFFALSE 75375
// begin ComCollect ( j , x , y ) ;
75336: LD_VAR 0 2
75340: PPUSH
75341: LD_VAR 0 6
75345: PPUSH
75346: LD_VAR 0 7
75350: PPUSH
75351: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
75355: LD_VAR 0 2
75359: PPUSH
75360: LD_VAR 0 8
75364: PPUSH
75365: CALL_OW 172
// exit ;
75369: POP
75370: POP
75371: POP
75372: POP
75373: GO 75383
// end ;
75375: GO 75257
75377: POP
75378: POP
// end ; end ;
75379: GO 74744
75381: POP
75382: POP
// end ; end_of_file
75383: PPOPN 9
75385: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75386: LD_VAR 0 1
75390: PUSH
75391: LD_INT 200
75393: DOUBLE
75394: GREATEREQUAL
75395: IFFALSE 75403
75397: LD_INT 299
75399: DOUBLE
75400: LESSEQUAL
75401: IFTRUE 75405
75403: GO 75437
75405: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75406: LD_VAR 0 1
75410: PPUSH
75411: LD_VAR 0 2
75415: PPUSH
75416: LD_VAR 0 3
75420: PPUSH
75421: LD_VAR 0 4
75425: PPUSH
75426: LD_VAR 0 5
75430: PPUSH
75431: CALL 76299 0 5
75435: GO 75514
75437: LD_INT 300
75439: DOUBLE
75440: GREATEREQUAL
75441: IFFALSE 75449
75443: LD_INT 399
75445: DOUBLE
75446: LESSEQUAL
75447: IFTRUE 75451
75449: GO 75513
75451: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75452: LD_VAR 0 1
75456: PPUSH
75457: LD_VAR 0 2
75461: PPUSH
75462: LD_VAR 0 3
75466: PPUSH
75467: LD_VAR 0 4
75471: PPUSH
75472: LD_VAR 0 5
75476: PPUSH
75477: LD_VAR 0 6
75481: PPUSH
75482: LD_VAR 0 7
75486: PPUSH
75487: LD_VAR 0 8
75491: PPUSH
75492: LD_VAR 0 9
75496: PPUSH
75497: LD_VAR 0 10
75501: PPUSH
75502: LD_VAR 0 11
75506: PPUSH
75507: CALL 71939 0 11
75511: GO 75514
75513: POP
// end ;
75514: PPOPN 11
75516: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75517: LD_VAR 0 1
75521: PPUSH
75522: LD_VAR 0 2
75526: PPUSH
75527: LD_VAR 0 3
75531: PPUSH
75532: LD_VAR 0 4
75536: PPUSH
75537: LD_VAR 0 5
75541: PPUSH
75542: CALL 75599 0 5
// end ; end_of_file
75546: PPOPN 5
75548: END
// export function SOS_UnitDestroyed ( un ) ; begin
75549: LD_INT 0
75551: PPUSH
// ComRadiation ( un ) ;
75552: LD_VAR 0 1
75556: PPUSH
75557: CALL 76719 0 1
// end ;
75561: LD_VAR 0 2
75565: RET
// export function SOS_UnitKamikazed ( un ) ; begin
75566: LD_INT 0
75568: PPUSH
// ComRadiation ( un ) ;
75569: LD_VAR 0 1
75573: PPUSH
75574: CALL 76719 0 1
// end ;
75578: LD_VAR 0 2
75582: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
75583: LD_INT 0
75585: PPUSH
// end ;
75586: LD_VAR 0 4
75590: RET
// export function SOS_Command ( cmd ) ; begin
75591: LD_INT 0
75593: PPUSH
// end ;
75594: LD_VAR 0 2
75598: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
75599: LD_INT 0
75601: PPUSH
// end ;
75602: LD_VAR 0 6
75606: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
75607: LD_INT 0
75609: PPUSH
75610: PPUSH
75611: PPUSH
75612: PPUSH
75613: PPUSH
// if not vehicle or not factory then
75614: LD_VAR 0 1
75618: NOT
75619: IFTRUE 75628
75621: PUSH
75622: LD_VAR 0 2
75626: NOT
75627: OR
75628: IFFALSE 75632
// exit ;
75630: GO 76294
// weapon := GetWeapon ( vehicle ) ;
75632: LD_ADDR_VAR 0 7
75636: PUSH
75637: LD_VAR 0 1
75641: PPUSH
75642: CALL_OW 264
75646: ST_TO_ADDR
// if weapon = ar_miner then
75647: LD_VAR 0 7
75651: PUSH
75652: LD_INT 81
75654: EQUAL
75655: IFFALSE 75712
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
75657: LD_ADDR_EXP 107
75661: PUSH
75662: LD_EXP 107
75666: PPUSH
75667: LD_EXP 107
75671: PUSH
75672: LD_INT 1
75674: PLUS
75675: PPUSH
75676: LD_VAR 0 1
75680: PPUSH
75681: CALL_OW 1
75685: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
75686: LD_ADDR_EXP 108
75690: PUSH
75691: LD_EXP 108
75695: PPUSH
75696: LD_EXP 108
75700: PUSH
75701: LD_INT 1
75703: PLUS
75704: PPUSH
75705: EMPTY
75706: PPUSH
75707: CALL_OW 1
75711: ST_TO_ADDR
// end ; if not factoryWaypoints then
75712: LD_EXP 96
75716: NOT
75717: IFFALSE 75721
// exit ;
75719: GO 76294
// for i := 1 to Count ( factoryWaypoints ) do
75721: LD_ADDR_VAR 0 4
75725: PUSH
75726: DOUBLE
75727: LD_INT 1
75729: DEC
75730: ST_TO_ADDR
75731: LD_EXP 96
75735: PPUSH
75736: CALL 17877 0 1
75740: PUSH
75741: FOR_TO
75742: IFFALSE 76292
// if factoryWaypoints [ i ] [ 2 ] = factory then
75744: LD_EXP 96
75748: PUSH
75749: LD_VAR 0 4
75753: ARRAY
75754: PUSH
75755: LD_INT 2
75757: ARRAY
75758: PUSH
75759: LD_VAR 0 2
75763: EQUAL
75764: IFFALSE 76290
// begin if GetControl ( vehicle ) = control_manual then
75766: LD_VAR 0 1
75770: PPUSH
75771: CALL_OW 263
75775: PUSH
75776: LD_INT 1
75778: EQUAL
75779: IFFALSE 76143
// begin driver := IsDrivenBy ( vehicle ) ;
75781: LD_ADDR_VAR 0 5
75785: PUSH
75786: LD_VAR 0 1
75790: PPUSH
75791: CALL_OW 311
75795: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
75796: LD_VAR 0 5
75800: PUSH
75801: LD_EXP 97
75805: IN
75806: IFTRUE 75820
75808: PUSH
75809: LD_VAR 0 1
75813: PUSH
75814: LD_EXP 97
75818: IN
75819: OR
75820: IFFALSE 75826
// exit ;
75822: POP
75823: POP
75824: GO 76294
// if not HasTask ( driver ) then
75826: LD_VAR 0 5
75830: PPUSH
75831: CALL_OW 314
75835: NOT
75836: IFFALSE 76141
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
75838: LD_ADDR_EXP 97
75842: PUSH
75843: LD_EXP 97
75847: PPUSH
75848: LD_VAR 0 5
75852: PPUSH
75853: CALL 53853 0 2
75857: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
75858: LD_ADDR_EXP 97
75862: PUSH
75863: LD_EXP 97
75867: PPUSH
75868: LD_VAR 0 1
75872: PPUSH
75873: CALL 53853 0 2
75877: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75878: LD_ADDR_VAR 0 6
75882: PUSH
75883: LD_EXP 96
75887: PUSH
75888: LD_VAR 0 4
75892: ARRAY
75893: PUSH
75894: LD_INT 3
75896: ARRAY
75897: PPUSH
75898: LD_EXP 96
75902: PUSH
75903: LD_VAR 0 4
75907: ARRAY
75908: PUSH
75909: LD_INT 4
75911: ARRAY
75912: PPUSH
75913: CALL_OW 428
75917: ST_TO_ADDR
// if hex then
75918: LD_VAR 0 6
75922: IFFALSE 75940
// ComMoveUnit ( driver , hex ) else
75924: LD_VAR 0 5
75928: PPUSH
75929: LD_VAR 0 6
75933: PPUSH
75934: CALL_OW 112
75938: GO 76024
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
75940: LD_VAR 0 1
75944: PPUSH
75945: LD_EXP 96
75949: PUSH
75950: LD_VAR 0 4
75954: ARRAY
75955: PUSH
75956: LD_INT 3
75958: ARRAY
75959: PPUSH
75960: LD_EXP 96
75964: PUSH
75965: LD_VAR 0 4
75969: ARRAY
75970: PUSH
75971: LD_INT 4
75973: ARRAY
75974: PPUSH
75975: CALL_OW 297
75979: PUSH
75980: LD_INT 0
75982: GREATER
75983: IFFALSE 76024
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75985: LD_VAR 0 5
75989: PPUSH
75990: LD_EXP 96
75994: PUSH
75995: LD_VAR 0 4
75999: ARRAY
76000: PUSH
76001: LD_INT 3
76003: ARRAY
76004: PPUSH
76005: LD_EXP 96
76009: PUSH
76010: LD_VAR 0 4
76014: ARRAY
76015: PUSH
76016: LD_INT 4
76018: ARRAY
76019: PPUSH
76020: CALL_OW 111
// AddComExitVehicle ( driver ) ;
76024: LD_VAR 0 5
76028: PPUSH
76029: CALL_OW 181
// if Multiplayer then
76033: LD_OWVAR 4
76037: IFFALSE 76086
// begin repeat wait ( 10 ) ;
76039: LD_INT 10
76041: PPUSH
76042: CALL_OW 67
// until not IsInUnit ( driver ) ;
76046: LD_VAR 0 5
76050: PPUSH
76051: CALL_OW 310
76055: NOT
76056: IFFALSE 76039
// if not HasTask ( driver ) then
76058: LD_VAR 0 5
76062: PPUSH
76063: CALL_OW 314
76067: NOT
76068: IFFALSE 76084
// ComEnterUnit ( driver , factory ) ;
76070: LD_VAR 0 5
76074: PPUSH
76075: LD_VAR 0 2
76079: PPUSH
76080: CALL_OW 120
// end else
76084: GO 76100
// AddComEnterUnit ( driver , factory ) ;
76086: LD_VAR 0 5
76090: PPUSH
76091: LD_VAR 0 2
76095: PPUSH
76096: CALL_OW 180
// wait ( 0 0$1 ) ;
76100: LD_INT 35
76102: PPUSH
76103: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
76107: LD_ADDR_EXP 97
76111: PUSH
76112: LD_EXP 97
76116: PUSH
76117: LD_VAR 0 5
76121: DIFF
76122: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
76123: LD_ADDR_EXP 97
76127: PUSH
76128: LD_EXP 97
76132: PUSH
76133: LD_VAR 0 1
76137: DIFF
76138: ST_TO_ADDR
// break ;
76139: GO 76292
// end ; end else
76141: GO 76290
// if GetControl ( vehicle ) = control_remote then
76143: LD_VAR 0 1
76147: PPUSH
76148: CALL_OW 263
76152: PUSH
76153: LD_INT 2
76155: EQUAL
76156: IFFALSE 76242
// begin wait ( 0 0$2 ) ;
76158: LD_INT 70
76160: PPUSH
76161: CALL_OW 67
// repeat wait ( 10 ) ;
76165: LD_INT 10
76167: PPUSH
76168: CALL_OW 67
// Connect ( vehicle ) ;
76172: LD_VAR 0 1
76176: PPUSH
76177: CALL 24155 0 1
// until IsControledBy ( vehicle ) ;
76181: LD_VAR 0 1
76185: PPUSH
76186: CALL_OW 312
76190: IFFALSE 76165
// wait ( 10 ) ;
76192: LD_INT 10
76194: PPUSH
76195: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76199: LD_VAR 0 1
76203: PPUSH
76204: LD_EXP 96
76208: PUSH
76209: LD_VAR 0 4
76213: ARRAY
76214: PUSH
76215: LD_INT 3
76217: ARRAY
76218: PPUSH
76219: LD_EXP 96
76223: PUSH
76224: LD_VAR 0 4
76228: ARRAY
76229: PUSH
76230: LD_INT 4
76232: ARRAY
76233: PPUSH
76234: CALL_OW 111
// break ;
76238: GO 76292
// end else
76240: GO 76290
// begin wait ( 0 0$3 ) ;
76242: LD_INT 105
76244: PPUSH
76245: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76249: LD_VAR 0 1
76253: PPUSH
76254: LD_EXP 96
76258: PUSH
76259: LD_VAR 0 4
76263: ARRAY
76264: PUSH
76265: LD_INT 3
76267: ARRAY
76268: PPUSH
76269: LD_EXP 96
76273: PUSH
76274: LD_VAR 0 4
76278: ARRAY
76279: PUSH
76280: LD_INT 4
76282: ARRAY
76283: PPUSH
76284: CALL_OW 111
// break ;
76288: GO 76292
// end ; end ;
76290: GO 75741
76292: POP
76293: POP
// end ;
76294: LD_VAR 0 3
76298: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
76299: LD_INT 0
76301: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
76302: LD_VAR 0 1
76306: PUSH
76307: LD_INT 250
76309: EQUAL
76310: IFFALSE 76327
76312: PUSH
76313: LD_VAR 0 2
76317: PPUSH
76318: CALL_OW 264
76322: PUSH
76323: LD_INT 81
76325: EQUAL
76326: AND
76327: IFFALSE 76348
// MinerPlaceMine ( unit , x , y ) ;
76329: LD_VAR 0 2
76333: PPUSH
76334: LD_VAR 0 4
76338: PPUSH
76339: LD_VAR 0 5
76343: PPUSH
76344: CALL 79694 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
76348: LD_VAR 0 1
76352: PUSH
76353: LD_INT 251
76355: EQUAL
76356: IFFALSE 76373
76358: PUSH
76359: LD_VAR 0 2
76363: PPUSH
76364: CALL_OW 264
76368: PUSH
76369: LD_INT 81
76371: EQUAL
76372: AND
76373: IFFALSE 76394
// MinerDetonateMine ( unit , x , y ) ;
76375: LD_VAR 0 2
76379: PPUSH
76380: LD_VAR 0 4
76384: PPUSH
76385: LD_VAR 0 5
76389: PPUSH
76390: CALL 80101 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
76394: LD_VAR 0 1
76398: PUSH
76399: LD_INT 252
76401: EQUAL
76402: IFFALSE 76419
76404: PUSH
76405: LD_VAR 0 2
76409: PPUSH
76410: CALL_OW 264
76414: PUSH
76415: LD_INT 81
76417: EQUAL
76418: AND
76419: IFFALSE 76440
// MinerCreateMinefield ( unit , x , y ) ;
76421: LD_VAR 0 2
76425: PPUSH
76426: LD_VAR 0 4
76430: PPUSH
76431: LD_VAR 0 5
76435: PPUSH
76436: CALL 80333 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
76440: LD_VAR 0 1
76444: PUSH
76445: LD_INT 253
76447: EQUAL
76448: IFFALSE 76465
76450: PUSH
76451: LD_VAR 0 2
76455: PPUSH
76456: CALL_OW 257
76460: PUSH
76461: LD_INT 5
76463: EQUAL
76464: AND
76465: IFFALSE 76486
// ComBinocular ( unit , x , y ) ;
76467: LD_VAR 0 2
76471: PPUSH
76472: LD_VAR 0 4
76476: PPUSH
76477: LD_VAR 0 5
76481: PPUSH
76482: CALL 80708 0 3
// if selectedUnit then
76486: LD_VAR 0 3
76490: IFFALSE 76550
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
76492: LD_VAR 0 1
76496: PUSH
76497: LD_INT 254
76499: EQUAL
76500: IFFALSE 76517
76502: PUSH
76503: LD_VAR 0 2
76507: PPUSH
76508: CALL_OW 264
76512: PUSH
76513: LD_INT 99
76515: EQUAL
76516: AND
76517: IFFALSE 76534
76519: PUSH
76520: LD_VAR 0 3
76524: PPUSH
76525: CALL_OW 263
76529: PUSH
76530: LD_INT 3
76532: EQUAL
76533: AND
76534: IFFALSE 76550
// HackDestroyVehicle ( unit , selectedUnit ) ;
76536: LD_VAR 0 2
76540: PPUSH
76541: LD_VAR 0 3
76545: PPUSH
76546: CALL 78884 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
76550: LD_VAR 0 1
76554: PUSH
76555: LD_INT 255
76557: EQUAL
76558: IFFALSE 76582
76560: PUSH
76561: LD_VAR 0 2
76565: PPUSH
76566: CALL_OW 264
76570: PUSH
76571: LD_INT 14
76573: PUSH
76574: LD_INT 53
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: IN
76581: AND
76582: IFFALSE 76600
76584: PUSH
76585: LD_VAR 0 4
76589: PPUSH
76590: LD_VAR 0 5
76594: PPUSH
76595: CALL_OW 488
76599: AND
76600: IFFALSE 76624
// CutTreeXYR ( unit , x , y , 12 ) ;
76602: LD_VAR 0 2
76606: PPUSH
76607: LD_VAR 0 4
76611: PPUSH
76612: LD_VAR 0 5
76616: PPUSH
76617: LD_INT 12
76619: PPUSH
76620: CALL 76815 0 4
// if cmd = 256 then
76624: LD_VAR 0 1
76628: PUSH
76629: LD_INT 256
76631: EQUAL
76632: IFFALSE 76653
// SetFactoryWaypoint ( unit , x , y ) ;
76634: LD_VAR 0 2
76638: PPUSH
76639: LD_VAR 0 4
76643: PPUSH
76644: LD_VAR 0 5
76648: PPUSH
76649: CALL 73931 0 3
// if cmd = 257 then
76653: LD_VAR 0 1
76657: PUSH
76658: LD_INT 257
76660: EQUAL
76661: IFFALSE 76682
// SetWarehouseGatheringPoint ( unit , x , y ) ;
76663: LD_VAR 0 2
76667: PPUSH
76668: LD_VAR 0 4
76672: PPUSH
76673: LD_VAR 0 5
76677: PPUSH
76678: CALL 74427 0 3
// if cmd = 258 then
76682: LD_VAR 0 1
76686: PUSH
76687: LD_INT 258
76689: EQUAL
76690: IFFALSE 76714
// BurnTreeXYR ( unit , x , y , 8 ) ;
76692: LD_VAR 0 2
76696: PPUSH
76697: LD_VAR 0 4
76701: PPUSH
76702: LD_VAR 0 5
76706: PPUSH
76707: LD_INT 8
76709: PPUSH
76710: CALL 77237 0 4
// end ;
76714: LD_VAR 0 6
76718: RET
// export function ComRadiation ( un ) ; var eff ; begin
76719: LD_INT 0
76721: PPUSH
76722: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
76723: LD_VAR 0 1
76727: PPUSH
76728: CALL_OW 264
76732: PUSH
76733: LD_INT 91
76735: NONEQUAL
76736: IFFALSE 76740
// exit ;
76738: GO 76810
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
76740: LD_INT 68
76742: PPUSH
76743: LD_VAR 0 1
76747: PPUSH
76748: CALL_OW 255
76752: PPUSH
76753: CALL_OW 321
76757: PUSH
76758: LD_INT 2
76760: EQUAL
76761: IFFALSE 76773
// eff := 50 else
76763: LD_ADDR_VAR 0 3
76767: PUSH
76768: LD_INT 50
76770: ST_TO_ADDR
76771: GO 76781
// eff := 25 ;
76773: LD_ADDR_VAR 0 3
76777: PUSH
76778: LD_INT 25
76780: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
76781: LD_VAR 0 1
76785: PPUSH
76786: CALL_OW 250
76790: PPUSH
76791: LD_VAR 0 1
76795: PPUSH
76796: CALL_OW 251
76800: PPUSH
76801: LD_VAR 0 3
76805: PPUSH
76806: CALL_OW 495
// end ;
76810: LD_VAR 0 2
76814: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
76815: LD_INT 0
76817: PPUSH
76818: PPUSH
76819: PPUSH
76820: PPUSH
76821: PPUSH
76822: PPUSH
76823: PPUSH
76824: PPUSH
76825: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
76826: LD_VAR 0 1
76830: PPUSH
76831: CALL_OW 302
76835: NOT
76836: IFTRUE 76855
76838: PUSH
76839: LD_VAR 0 2
76843: PPUSH
76844: LD_VAR 0 3
76848: PPUSH
76849: CALL_OW 488
76853: NOT
76854: OR
76855: IFTRUE 76864
76857: PUSH
76858: LD_VAR 0 4
76862: NOT
76863: OR
76864: IFFALSE 76868
// exit ;
76866: GO 77232
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
76868: LD_VAR 0 1
76872: PPUSH
76873: CALL_OW 437
76877: PPUSH
76878: CALL 17877 0 1
76882: PUSH
76883: LD_INT 10
76885: GREATER
76886: IFFALSE 76890
// exit ;
76888: GO 77232
// list := [ ] ;
76890: LD_ADDR_VAR 0 13
76894: PUSH
76895: EMPTY
76896: ST_TO_ADDR
// if x - r < 0 then
76897: LD_VAR 0 2
76901: PUSH
76902: LD_VAR 0 4
76906: MINUS
76907: PUSH
76908: LD_INT 0
76910: LESS
76911: IFFALSE 76923
// min_x := 0 else
76913: LD_ADDR_VAR 0 7
76917: PUSH
76918: LD_INT 0
76920: ST_TO_ADDR
76921: GO 76939
// min_x := x - r ;
76923: LD_ADDR_VAR 0 7
76927: PUSH
76928: LD_VAR 0 2
76932: PUSH
76933: LD_VAR 0 4
76937: MINUS
76938: ST_TO_ADDR
// if y - r < 0 then
76939: LD_VAR 0 3
76943: PUSH
76944: LD_VAR 0 4
76948: MINUS
76949: PUSH
76950: LD_INT 0
76952: LESS
76953: IFFALSE 76965
// min_y := 0 else
76955: LD_ADDR_VAR 0 8
76959: PUSH
76960: LD_INT 0
76962: ST_TO_ADDR
76963: GO 76981
// min_y := y - r ;
76965: LD_ADDR_VAR 0 8
76969: PUSH
76970: LD_VAR 0 3
76974: PUSH
76975: LD_VAR 0 4
76979: MINUS
76980: ST_TO_ADDR
// max_x := x + r ;
76981: LD_ADDR_VAR 0 9
76985: PUSH
76986: LD_VAR 0 2
76990: PUSH
76991: LD_VAR 0 4
76995: PLUS
76996: ST_TO_ADDR
// max_y := y + r ;
76997: LD_ADDR_VAR 0 10
77001: PUSH
77002: LD_VAR 0 3
77006: PUSH
77007: LD_VAR 0 4
77011: PLUS
77012: ST_TO_ADDR
// for _x = min_x to max_x do
77013: LD_ADDR_VAR 0 11
77017: PUSH
77018: DOUBLE
77019: LD_VAR 0 7
77023: DEC
77024: ST_TO_ADDR
77025: LD_VAR 0 9
77029: PUSH
77030: FOR_TO
77031: IFFALSE 77150
// for _y = min_y to max_y do
77033: LD_ADDR_VAR 0 12
77037: PUSH
77038: DOUBLE
77039: LD_VAR 0 8
77043: DEC
77044: ST_TO_ADDR
77045: LD_VAR 0 10
77049: PUSH
77050: FOR_TO
77051: IFFALSE 77146
// begin if not ValidHex ( _x , _y ) then
77053: LD_VAR 0 11
77057: PPUSH
77058: LD_VAR 0 12
77062: PPUSH
77063: CALL_OW 488
77067: NOT
77068: IFFALSE 77072
// continue ;
77070: GO 77050
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77072: LD_VAR 0 11
77076: PPUSH
77077: LD_VAR 0 12
77081: PPUSH
77082: CALL_OW 351
77086: IFFALSE 77104
77088: PUSH
77089: LD_VAR 0 11
77093: PPUSH
77094: LD_VAR 0 12
77098: PPUSH
77099: CALL_OW 554
77103: AND
77104: IFFALSE 77144
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77106: LD_ADDR_VAR 0 13
77110: PUSH
77111: LD_VAR 0 13
77115: PPUSH
77116: LD_VAR 0 13
77120: PUSH
77121: LD_INT 1
77123: PLUS
77124: PPUSH
77125: LD_VAR 0 11
77129: PUSH
77130: LD_VAR 0 12
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PPUSH
77139: CALL_OW 2
77143: ST_TO_ADDR
// end ;
77144: GO 77050
77146: POP
77147: POP
77148: GO 77030
77150: POP
77151: POP
// if not list then
77152: LD_VAR 0 13
77156: NOT
77157: IFFALSE 77161
// exit ;
77159: GO 77232
// for i in list do
77161: LD_ADDR_VAR 0 6
77165: PUSH
77166: LD_VAR 0 13
77170: PUSH
77171: FOR_IN
77172: IFFALSE 77230
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
77174: LD_VAR 0 1
77178: PPUSH
77179: LD_STRING M
77181: PUSH
77182: LD_VAR 0 6
77186: PUSH
77187: LD_INT 1
77189: ARRAY
77190: PUSH
77191: LD_VAR 0 6
77195: PUSH
77196: LD_INT 2
77198: ARRAY
77199: PUSH
77200: LD_INT 0
77202: PUSH
77203: LD_INT 0
77205: PUSH
77206: LD_INT 0
77208: PUSH
77209: LD_INT 0
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: LIST
77219: LIST
77220: PUSH
77221: EMPTY
77222: LIST
77223: PPUSH
77224: CALL_OW 447
77228: GO 77171
77230: POP
77231: POP
// end ;
77232: LD_VAR 0 5
77236: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
77237: LD_INT 0
77239: PPUSH
77240: PPUSH
77241: PPUSH
77242: PPUSH
77243: PPUSH
77244: PPUSH
77245: PPUSH
77246: PPUSH
77247: PPUSH
77248: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
77249: LD_VAR 0 1
77253: PPUSH
77254: CALL_OW 302
77258: NOT
77259: IFTRUE 77278
77261: PUSH
77262: LD_VAR 0 2
77266: PPUSH
77267: LD_VAR 0 3
77271: PPUSH
77272: CALL_OW 488
77276: NOT
77277: OR
77278: IFTRUE 77287
77280: PUSH
77281: LD_VAR 0 4
77285: NOT
77286: OR
77287: IFFALSE 77291
// exit ;
77289: GO 77830
// if Count ( GetTaskList ( flame ) ) > 10 then
77291: LD_VAR 0 1
77295: PPUSH
77296: CALL_OW 437
77300: PPUSH
77301: CALL 17877 0 1
77305: PUSH
77306: LD_INT 10
77308: GREATER
77309: IFFALSE 77313
// exit ;
77311: GO 77830
// list := [ ] ;
77313: LD_ADDR_VAR 0 13
77317: PUSH
77318: EMPTY
77319: ST_TO_ADDR
// if x - r < 0 then
77320: LD_VAR 0 2
77324: PUSH
77325: LD_VAR 0 4
77329: MINUS
77330: PUSH
77331: LD_INT 0
77333: LESS
77334: IFFALSE 77346
// min_x := 0 else
77336: LD_ADDR_VAR 0 7
77340: PUSH
77341: LD_INT 0
77343: ST_TO_ADDR
77344: GO 77362
// min_x := x - r ;
77346: LD_ADDR_VAR 0 7
77350: PUSH
77351: LD_VAR 0 2
77355: PUSH
77356: LD_VAR 0 4
77360: MINUS
77361: ST_TO_ADDR
// if y - r < 0 then
77362: LD_VAR 0 3
77366: PUSH
77367: LD_VAR 0 4
77371: MINUS
77372: PUSH
77373: LD_INT 0
77375: LESS
77376: IFFALSE 77388
// min_y := 0 else
77378: LD_ADDR_VAR 0 8
77382: PUSH
77383: LD_INT 0
77385: ST_TO_ADDR
77386: GO 77404
// min_y := y - r ;
77388: LD_ADDR_VAR 0 8
77392: PUSH
77393: LD_VAR 0 3
77397: PUSH
77398: LD_VAR 0 4
77402: MINUS
77403: ST_TO_ADDR
// max_x := x + r ;
77404: LD_ADDR_VAR 0 9
77408: PUSH
77409: LD_VAR 0 2
77413: PUSH
77414: LD_VAR 0 4
77418: PLUS
77419: ST_TO_ADDR
// max_y := y + r ;
77420: LD_ADDR_VAR 0 10
77424: PUSH
77425: LD_VAR 0 3
77429: PUSH
77430: LD_VAR 0 4
77434: PLUS
77435: ST_TO_ADDR
// for _x = min_x to max_x do
77436: LD_ADDR_VAR 0 11
77440: PUSH
77441: DOUBLE
77442: LD_VAR 0 7
77446: DEC
77447: ST_TO_ADDR
77448: LD_VAR 0 9
77452: PUSH
77453: FOR_TO
77454: IFFALSE 77573
// for _y = min_y to max_y do
77456: LD_ADDR_VAR 0 12
77460: PUSH
77461: DOUBLE
77462: LD_VAR 0 8
77466: DEC
77467: ST_TO_ADDR
77468: LD_VAR 0 10
77472: PUSH
77473: FOR_TO
77474: IFFALSE 77569
// begin if not ValidHex ( _x , _y ) then
77476: LD_VAR 0 11
77480: PPUSH
77481: LD_VAR 0 12
77485: PPUSH
77486: CALL_OW 488
77490: NOT
77491: IFFALSE 77495
// continue ;
77493: GO 77473
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77495: LD_VAR 0 11
77499: PPUSH
77500: LD_VAR 0 12
77504: PPUSH
77505: CALL_OW 351
77509: IFFALSE 77527
77511: PUSH
77512: LD_VAR 0 11
77516: PPUSH
77517: LD_VAR 0 12
77521: PPUSH
77522: CALL_OW 554
77526: AND
77527: IFFALSE 77567
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77529: LD_ADDR_VAR 0 13
77533: PUSH
77534: LD_VAR 0 13
77538: PPUSH
77539: LD_VAR 0 13
77543: PUSH
77544: LD_INT 1
77546: PLUS
77547: PPUSH
77548: LD_VAR 0 11
77552: PUSH
77553: LD_VAR 0 12
77557: PUSH
77558: EMPTY
77559: LIST
77560: LIST
77561: PPUSH
77562: CALL_OW 2
77566: ST_TO_ADDR
// end ;
77567: GO 77473
77569: POP
77570: POP
77571: GO 77453
77573: POP
77574: POP
// if not list then
77575: LD_VAR 0 13
77579: NOT
77580: IFFALSE 77584
// exit ;
77582: GO 77830
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
77584: LD_ADDR_VAR 0 13
77588: PUSH
77589: LD_VAR 0 1
77593: PPUSH
77594: LD_VAR 0 13
77598: PPUSH
77599: LD_INT 1
77601: PPUSH
77602: LD_INT 1
77604: PPUSH
77605: CALL 21283 0 4
77609: ST_TO_ADDR
// ComStop ( flame ) ;
77610: LD_VAR 0 1
77614: PPUSH
77615: CALL_OW 141
// for i in list do
77619: LD_ADDR_VAR 0 6
77623: PUSH
77624: LD_VAR 0 13
77628: PUSH
77629: FOR_IN
77630: IFFALSE 77661
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
77632: LD_VAR 0 1
77636: PPUSH
77637: LD_VAR 0 6
77641: PUSH
77642: LD_INT 1
77644: ARRAY
77645: PPUSH
77646: LD_VAR 0 6
77650: PUSH
77651: LD_INT 2
77653: ARRAY
77654: PPUSH
77655: CALL_OW 176
77659: GO 77629
77661: POP
77662: POP
// repeat wait ( 0 0$1 ) ;
77663: LD_INT 35
77665: PPUSH
77666: CALL_OW 67
// task := GetTaskList ( flame ) ;
77670: LD_ADDR_VAR 0 14
77674: PUSH
77675: LD_VAR 0 1
77679: PPUSH
77680: CALL_OW 437
77684: ST_TO_ADDR
// if not task then
77685: LD_VAR 0 14
77689: NOT
77690: IFFALSE 77694
// exit ;
77692: GO 77830
// if task [ 1 ] [ 1 ] <> | then
77694: LD_VAR 0 14
77698: PUSH
77699: LD_INT 1
77701: ARRAY
77702: PUSH
77703: LD_INT 1
77705: ARRAY
77706: PUSH
77707: LD_STRING |
77709: NONEQUAL
77710: IFFALSE 77714
// exit ;
77712: GO 77830
// _x := task [ 1 ] [ 2 ] ;
77714: LD_ADDR_VAR 0 11
77718: PUSH
77719: LD_VAR 0 14
77723: PUSH
77724: LD_INT 1
77726: ARRAY
77727: PUSH
77728: LD_INT 2
77730: ARRAY
77731: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
77732: LD_ADDR_VAR 0 12
77736: PUSH
77737: LD_VAR 0 14
77741: PUSH
77742: LD_INT 1
77744: ARRAY
77745: PUSH
77746: LD_INT 3
77748: ARRAY
77749: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
77750: LD_VAR 0 11
77754: PPUSH
77755: LD_VAR 0 12
77759: PPUSH
77760: CALL_OW 351
77764: NOT
77765: IFTRUE 77784
77767: PUSH
77768: LD_VAR 0 11
77772: PPUSH
77773: LD_VAR 0 12
77777: PPUSH
77778: CALL_OW 554
77782: NOT
77783: OR
77784: IFFALSE 77818
// begin task := Delete ( task , 1 ) ;
77786: LD_ADDR_VAR 0 14
77790: PUSH
77791: LD_VAR 0 14
77795: PPUSH
77796: LD_INT 1
77798: PPUSH
77799: CALL_OW 3
77803: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
77804: LD_VAR 0 1
77808: PPUSH
77809: LD_VAR 0 14
77813: PPUSH
77814: CALL_OW 446
// end ; until not HasTask ( flame ) ;
77818: LD_VAR 0 1
77822: PPUSH
77823: CALL_OW 314
77827: NOT
77828: IFFALSE 77663
// end ;
77830: LD_VAR 0 5
77834: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
77835: LD_EXP 100
77839: NOT
77840: IFFALSE 77890
77842: GO 77844
77844: DISABLE
// begin initHack := true ;
77845: LD_ADDR_EXP 100
77849: PUSH
77850: LD_INT 1
77852: ST_TO_ADDR
// hackTanks := [ ] ;
77853: LD_ADDR_EXP 101
77857: PUSH
77858: EMPTY
77859: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
77860: LD_ADDR_EXP 102
77864: PUSH
77865: EMPTY
77866: ST_TO_ADDR
// hackLimit := 3 ;
77867: LD_ADDR_EXP 103
77871: PUSH
77872: LD_INT 3
77874: ST_TO_ADDR
// hackDist := 12 ;
77875: LD_ADDR_EXP 104
77879: PUSH
77880: LD_INT 12
77882: ST_TO_ADDR
// hackCounter := [ ] ;
77883: LD_ADDR_EXP 105
77887: PUSH
77888: EMPTY
77889: ST_TO_ADDR
// end ;
77890: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
77891: LD_EXP 100
77895: IFFALSE 77913
77897: PUSH
77898: LD_INT 34
77900: PUSH
77901: LD_INT 99
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: PPUSH
77908: CALL_OW 69
77912: AND
77913: IFFALSE 78166
77915: GO 77917
77917: DISABLE
77918: LD_INT 0
77920: PPUSH
77921: PPUSH
// begin enable ;
77922: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
77923: LD_ADDR_VAR 0 1
77927: PUSH
77928: LD_INT 34
77930: PUSH
77931: LD_INT 99
77933: PUSH
77934: EMPTY
77935: LIST
77936: LIST
77937: PPUSH
77938: CALL_OW 69
77942: PUSH
77943: FOR_IN
77944: IFFALSE 78164
// begin if not i in hackTanks then
77946: LD_VAR 0 1
77950: PUSH
77951: LD_EXP 101
77955: IN
77956: NOT
77957: IFFALSE 78040
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
77959: LD_ADDR_EXP 101
77963: PUSH
77964: LD_EXP 101
77968: PPUSH
77969: LD_EXP 101
77973: PUSH
77974: LD_INT 1
77976: PLUS
77977: PPUSH
77978: LD_VAR 0 1
77982: PPUSH
77983: CALL_OW 1
77987: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
77988: LD_ADDR_EXP 102
77992: PUSH
77993: LD_EXP 102
77997: PPUSH
77998: LD_EXP 102
78002: PUSH
78003: LD_INT 1
78005: PLUS
78006: PPUSH
78007: EMPTY
78008: PPUSH
78009: CALL_OW 1
78013: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
78014: LD_ADDR_EXP 105
78018: PUSH
78019: LD_EXP 105
78023: PPUSH
78024: LD_EXP 105
78028: PUSH
78029: LD_INT 1
78031: PLUS
78032: PPUSH
78033: EMPTY
78034: PPUSH
78035: CALL_OW 1
78039: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78040: LD_VAR 0 1
78044: PPUSH
78045: CALL_OW 302
78049: NOT
78050: IFFALSE 78063
// begin HackUnlinkAll ( i ) ;
78052: LD_VAR 0 1
78056: PPUSH
78057: CALL 78169 0 1
// continue ;
78061: GO 77943
// end ; HackCheckCapturedStatus ( i ) ;
78063: LD_VAR 0 1
78067: PPUSH
78068: CALL 78614 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78072: LD_ADDR_VAR 0 2
78076: PUSH
78077: LD_INT 81
78079: PUSH
78080: LD_VAR 0 1
78084: PPUSH
78085: CALL_OW 255
78089: PUSH
78090: EMPTY
78091: LIST
78092: LIST
78093: PUSH
78094: LD_INT 33
78096: PUSH
78097: LD_INT 3
78099: PUSH
78100: EMPTY
78101: LIST
78102: LIST
78103: PUSH
78104: LD_INT 91
78106: PUSH
78107: LD_VAR 0 1
78111: PUSH
78112: LD_EXP 104
78116: PUSH
78117: EMPTY
78118: LIST
78119: LIST
78120: LIST
78121: PUSH
78122: LD_INT 50
78124: PUSH
78125: EMPTY
78126: LIST
78127: PUSH
78128: EMPTY
78129: LIST
78130: LIST
78131: LIST
78132: LIST
78133: PPUSH
78134: CALL_OW 69
78138: ST_TO_ADDR
// if not tmp then
78139: LD_VAR 0 2
78143: NOT
78144: IFFALSE 78148
// continue ;
78146: GO 77943
// HackLink ( i , tmp ) ;
78148: LD_VAR 0 1
78152: PPUSH
78153: LD_VAR 0 2
78157: PPUSH
78158: CALL 78305 0 2
// end ;
78162: GO 77943
78164: POP
78165: POP
// end ;
78166: PPOPN 2
78168: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
78169: LD_INT 0
78171: PPUSH
78172: PPUSH
78173: PPUSH
// if not hack in hackTanks then
78174: LD_VAR 0 1
78178: PUSH
78179: LD_EXP 101
78183: IN
78184: NOT
78185: IFFALSE 78189
// exit ;
78187: GO 78300
// index := GetElementIndex ( hackTanks , hack ) ;
78189: LD_ADDR_VAR 0 4
78193: PUSH
78194: LD_EXP 101
78198: PPUSH
78199: LD_VAR 0 1
78203: PPUSH
78204: CALL 20578 0 2
78208: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
78209: LD_EXP 102
78213: PUSH
78214: LD_VAR 0 4
78218: ARRAY
78219: IFFALSE 78300
// begin for i in hackTanksCaptured [ index ] do
78221: LD_ADDR_VAR 0 3
78225: PUSH
78226: LD_EXP 102
78230: PUSH
78231: LD_VAR 0 4
78235: ARRAY
78236: PUSH
78237: FOR_IN
78238: IFFALSE 78264
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
78240: LD_VAR 0 3
78244: PUSH
78245: LD_INT 1
78247: ARRAY
78248: PPUSH
78249: LD_VAR 0 3
78253: PUSH
78254: LD_INT 2
78256: ARRAY
78257: PPUSH
78258: CALL_OW 235
78262: GO 78237
78264: POP
78265: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
78266: LD_ADDR_EXP 102
78270: PUSH
78271: LD_EXP 102
78275: PPUSH
78276: LD_VAR 0 4
78280: PPUSH
78281: EMPTY
78282: PPUSH
78283: CALL_OW 1
78287: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78288: LD_VAR 0 1
78292: PPUSH
78293: LD_INT 0
78295: PPUSH
78296: CALL_OW 505
// end ; end ;
78300: LD_VAR 0 2
78304: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78305: LD_INT 0
78307: PPUSH
78308: PPUSH
78309: PPUSH
// if not hack in hackTanks or not vehicles then
78310: LD_VAR 0 1
78314: PUSH
78315: LD_EXP 101
78319: IN
78320: NOT
78321: IFTRUE 78330
78323: PUSH
78324: LD_VAR 0 2
78328: NOT
78329: OR
78330: IFFALSE 78334
// exit ;
78332: GO 78609
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78334: LD_ADDR_VAR 0 2
78338: PUSH
78339: LD_VAR 0 1
78343: PPUSH
78344: LD_VAR 0 2
78348: PPUSH
78349: LD_INT 1
78351: PPUSH
78352: LD_INT 1
78354: PPUSH
78355: CALL 21230 0 4
78359: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78360: LD_ADDR_VAR 0 5
78364: PUSH
78365: LD_EXP 101
78369: PPUSH
78370: LD_VAR 0 1
78374: PPUSH
78375: CALL 20578 0 2
78379: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78380: LD_EXP 102
78384: PUSH
78385: LD_VAR 0 5
78389: ARRAY
78390: PUSH
78391: LD_EXP 103
78395: LESS
78396: IFFALSE 78585
// begin for i := 1 to vehicles do
78398: LD_ADDR_VAR 0 4
78402: PUSH
78403: DOUBLE
78404: LD_INT 1
78406: DEC
78407: ST_TO_ADDR
78408: LD_VAR 0 2
78412: PUSH
78413: FOR_TO
78414: IFFALSE 78583
// begin if hackTanksCaptured [ index ] = hackLimit then
78416: LD_EXP 102
78420: PUSH
78421: LD_VAR 0 5
78425: ARRAY
78426: PUSH
78427: LD_EXP 103
78431: EQUAL
78432: IFFALSE 78436
// break ;
78434: GO 78583
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78436: LD_ADDR_EXP 105
78440: PUSH
78441: LD_EXP 105
78445: PPUSH
78446: LD_VAR 0 5
78450: PPUSH
78451: LD_EXP 105
78455: PUSH
78456: LD_VAR 0 5
78460: ARRAY
78461: PUSH
78462: LD_INT 1
78464: PLUS
78465: PPUSH
78466: CALL_OW 1
78470: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78471: LD_ADDR_EXP 102
78475: PUSH
78476: LD_EXP 102
78480: PPUSH
78481: LD_VAR 0 5
78485: PUSH
78486: LD_EXP 102
78490: PUSH
78491: LD_VAR 0 5
78495: ARRAY
78496: PUSH
78497: LD_INT 1
78499: PLUS
78500: PUSH
78501: EMPTY
78502: LIST
78503: LIST
78504: PPUSH
78505: LD_VAR 0 2
78509: PUSH
78510: LD_VAR 0 4
78514: ARRAY
78515: PUSH
78516: LD_VAR 0 2
78520: PUSH
78521: LD_VAR 0 4
78525: ARRAY
78526: PPUSH
78527: CALL_OW 255
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: PPUSH
78536: CALL 20795 0 3
78540: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78541: LD_VAR 0 2
78545: PUSH
78546: LD_VAR 0 4
78550: ARRAY
78551: PPUSH
78552: LD_VAR 0 1
78556: PPUSH
78557: CALL_OW 255
78561: PPUSH
78562: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78566: LD_VAR 0 2
78570: PUSH
78571: LD_VAR 0 4
78575: ARRAY
78576: PPUSH
78577: CALL_OW 141
// end ;
78581: GO 78413
78583: POP
78584: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78585: LD_VAR 0 1
78589: PPUSH
78590: LD_EXP 102
78594: PUSH
78595: LD_VAR 0 5
78599: ARRAY
78600: PUSH
78601: LD_INT 0
78603: PLUS
78604: PPUSH
78605: CALL_OW 505
// end ;
78609: LD_VAR 0 3
78613: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
78614: LD_INT 0
78616: PPUSH
78617: PPUSH
78618: PPUSH
78619: PPUSH
// if not hack in hackTanks then
78620: LD_VAR 0 1
78624: PUSH
78625: LD_EXP 101
78629: IN
78630: NOT
78631: IFFALSE 78635
// exit ;
78633: GO 78879
// index := GetElementIndex ( hackTanks , hack ) ;
78635: LD_ADDR_VAR 0 4
78639: PUSH
78640: LD_EXP 101
78644: PPUSH
78645: LD_VAR 0 1
78649: PPUSH
78650: CALL 20578 0 2
78654: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
78655: LD_ADDR_VAR 0 3
78659: PUSH
78660: DOUBLE
78661: LD_EXP 102
78665: PUSH
78666: LD_VAR 0 4
78670: ARRAY
78671: INC
78672: ST_TO_ADDR
78673: LD_INT 1
78675: PUSH
78676: FOR_DOWNTO
78677: IFFALSE 78853
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
78679: LD_ADDR_VAR 0 5
78683: PUSH
78684: LD_EXP 102
78688: PUSH
78689: LD_VAR 0 4
78693: ARRAY
78694: PUSH
78695: LD_VAR 0 3
78699: ARRAY
78700: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
78701: LD_VAR 0 5
78705: PUSH
78706: LD_INT 1
78708: ARRAY
78709: PPUSH
78710: CALL_OW 302
78714: NOT
78715: IFTRUE 78743
78717: PUSH
78718: LD_VAR 0 5
78722: PUSH
78723: LD_INT 1
78725: ARRAY
78726: PPUSH
78727: CALL_OW 255
78731: PUSH
78732: LD_VAR 0 1
78736: PPUSH
78737: CALL_OW 255
78741: NONEQUAL
78742: OR
78743: IFFALSE 78851
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
78745: LD_VAR 0 5
78749: PUSH
78750: LD_INT 1
78752: ARRAY
78753: PPUSH
78754: CALL_OW 305
78758: IFFALSE 78786
78760: PUSH
78761: LD_VAR 0 5
78765: PUSH
78766: LD_INT 1
78768: ARRAY
78769: PPUSH
78770: CALL_OW 255
78774: PUSH
78775: LD_VAR 0 1
78779: PPUSH
78780: CALL_OW 255
78784: EQUAL
78785: AND
78786: IFFALSE 78810
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
78788: LD_VAR 0 5
78792: PUSH
78793: LD_INT 1
78795: ARRAY
78796: PPUSH
78797: LD_VAR 0 5
78801: PUSH
78802: LD_INT 2
78804: ARRAY
78805: PPUSH
78806: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
78810: LD_ADDR_EXP 102
78814: PUSH
78815: LD_EXP 102
78819: PPUSH
78820: LD_VAR 0 4
78824: PPUSH
78825: LD_EXP 102
78829: PUSH
78830: LD_VAR 0 4
78834: ARRAY
78835: PPUSH
78836: LD_VAR 0 3
78840: PPUSH
78841: CALL_OW 3
78845: PPUSH
78846: CALL_OW 1
78850: ST_TO_ADDR
// end ; end ;
78851: GO 78676
78853: POP
78854: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78855: LD_VAR 0 1
78859: PPUSH
78860: LD_EXP 102
78864: PUSH
78865: LD_VAR 0 4
78869: ARRAY
78870: PUSH
78871: LD_INT 0
78873: PLUS
78874: PPUSH
78875: CALL_OW 505
// end ;
78879: LD_VAR 0 2
78883: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
78884: LD_INT 0
78886: PPUSH
78887: PPUSH
78888: PPUSH
78889: PPUSH
// if not hack in hackTanks then
78890: LD_VAR 0 1
78894: PUSH
78895: LD_EXP 101
78899: IN
78900: NOT
78901: IFFALSE 78905
// exit ;
78903: GO 78990
// index := GetElementIndex ( hackTanks , hack ) ;
78905: LD_ADDR_VAR 0 5
78909: PUSH
78910: LD_EXP 101
78914: PPUSH
78915: LD_VAR 0 1
78919: PPUSH
78920: CALL 20578 0 2
78924: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
78925: LD_ADDR_VAR 0 4
78929: PUSH
78930: DOUBLE
78931: LD_INT 1
78933: DEC
78934: ST_TO_ADDR
78935: LD_EXP 102
78939: PUSH
78940: LD_VAR 0 5
78944: ARRAY
78945: PUSH
78946: FOR_TO
78947: IFFALSE 78988
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
78949: LD_EXP 102
78953: PUSH
78954: LD_VAR 0 5
78958: ARRAY
78959: PUSH
78960: LD_VAR 0 4
78964: ARRAY
78965: PUSH
78966: LD_INT 1
78968: ARRAY
78969: PUSH
78970: LD_VAR 0 2
78974: EQUAL
78975: IFFALSE 78986
// KillUnit ( vehicle ) ;
78977: LD_VAR 0 2
78981: PPUSH
78982: CALL_OW 66
78986: GO 78946
78988: POP
78989: POP
// end ;
78990: LD_VAR 0 3
78994: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
78995: LD_EXP 106
78999: NOT
79000: IFFALSE 79133
79002: GO 79004
79004: DISABLE
79005: LD_INT 0
79007: PPUSH
// begin initMiner := true ;
79008: LD_ADDR_EXP 106
79012: PUSH
79013: LD_INT 1
79015: ST_TO_ADDR
// minersList := [ ] ;
79016: LD_ADDR_EXP 107
79020: PUSH
79021: EMPTY
79022: ST_TO_ADDR
// minerMinesList := [ ] ;
79023: LD_ADDR_EXP 108
79027: PUSH
79028: EMPTY
79029: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
79030: LD_ADDR_EXP 109
79034: PUSH
79035: LD_INT 10
79037: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
79038: LD_ADDR_VAR 0 1
79042: PUSH
79043: LD_INT 34
79045: PUSH
79046: LD_INT 81
79048: PUSH
79049: EMPTY
79050: LIST
79051: LIST
79052: PPUSH
79053: CALL_OW 69
79057: PUSH
79058: FOR_IN
79059: IFFALSE 79131
// begin if not i in minersList then
79061: LD_VAR 0 1
79065: PUSH
79066: LD_EXP 107
79070: IN
79071: NOT
79072: IFFALSE 79129
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
79074: LD_ADDR_EXP 107
79078: PUSH
79079: LD_EXP 107
79083: PPUSH
79084: LD_EXP 107
79088: PUSH
79089: LD_INT 1
79091: PLUS
79092: PPUSH
79093: LD_VAR 0 1
79097: PPUSH
79098: CALL_OW 1
79102: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
79103: LD_ADDR_EXP 108
79107: PUSH
79108: LD_EXP 108
79112: PPUSH
79113: LD_EXP 108
79117: PUSH
79118: LD_INT 1
79120: PLUS
79121: PPUSH
79122: EMPTY
79123: PPUSH
79124: CALL_OW 1
79128: ST_TO_ADDR
// end end ;
79129: GO 79058
79131: POP
79132: POP
// end ;
79133: PPOPN 1
79135: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
79136: LD_EXP 106
79140: IFFALSE 79171
79142: PUSH
79143: LD_EXP 108
79147: PPUSH
79148: CALL 17877 0 1
79152: IFTRUE 79170
79154: PUSH
79155: LD_INT 34
79157: PUSH
79158: LD_INT 81
79160: PUSH
79161: EMPTY
79162: LIST
79163: LIST
79164: PPUSH
79165: CALL_OW 69
79169: OR
79170: AND
79171: IFFALSE 79691
79173: GO 79175
79175: DISABLE
79176: LD_INT 0
79178: PPUSH
79179: PPUSH
79180: PPUSH
79181: PPUSH
// begin enable ;
79182: ENABLE
// for i := minerMinesList downto 1 do
79183: LD_ADDR_VAR 0 1
79187: PUSH
79188: DOUBLE
79189: LD_EXP 108
79193: INC
79194: ST_TO_ADDR
79195: LD_INT 1
79197: PUSH
79198: FOR_DOWNTO
79199: IFFALSE 79689
// begin side := GetSide ( minersList [ i ] ) ;
79201: LD_ADDR_VAR 0 3
79205: PUSH
79206: LD_EXP 107
79210: PUSH
79211: LD_VAR 0 1
79215: ARRAY
79216: PPUSH
79217: CALL_OW 255
79221: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
79222: LD_EXP 107
79226: PUSH
79227: LD_VAR 0 1
79231: ARRAY
79232: PPUSH
79233: CALL_OW 300
79237: IFFALSE 79258
79239: PUSH
79240: LD_VAR 0 3
79244: PUSH
79245: LD_OWVAR 2
79249: PUSH
79250: LD_INT 9
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: IN
79257: AND
79258: IFFALSE 79291
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
79260: LD_EXP 107
79264: PUSH
79265: LD_VAR 0 1
79269: ARRAY
79270: PPUSH
79271: LD_EXP 108
79275: PUSH
79276: LD_VAR 0 1
79280: ARRAY
79281: PPUSH
79282: CALL 17877 0 1
79286: PPUSH
79287: CALL_OW 505
// if not minerMinesList [ i ] then
79291: LD_EXP 108
79295: PUSH
79296: LD_VAR 0 1
79300: ARRAY
79301: NOT
79302: IFFALSE 79306
// continue ;
79304: GO 79198
// for j := minerMinesList [ i ] downto 1 do
79306: LD_ADDR_VAR 0 2
79310: PUSH
79311: DOUBLE
79312: LD_EXP 108
79316: PUSH
79317: LD_VAR 0 1
79321: ARRAY
79322: INC
79323: ST_TO_ADDR
79324: LD_INT 1
79326: PUSH
79327: FOR_DOWNTO
79328: IFFALSE 79685
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
79330: LD_EXP 107
79334: PUSH
79335: LD_VAR 0 1
79339: ARRAY
79340: PPUSH
79341: CALL_OW 301
79345: IFTRUE 79365
79347: PUSH
79348: LD_EXP 107
79352: PUSH
79353: LD_VAR 0 1
79357: ARRAY
79358: PPUSH
79359: CALL_OW 305
79363: NOT
79364: OR
79365: IFFALSE 79456
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79367: LD_EXP 108
79371: PUSH
79372: LD_VAR 0 1
79376: ARRAY
79377: PUSH
79378: LD_VAR 0 2
79382: ARRAY
79383: PUSH
79384: LD_INT 1
79386: ARRAY
79387: PPUSH
79388: LD_EXP 108
79392: PUSH
79393: LD_VAR 0 1
79397: ARRAY
79398: PUSH
79399: LD_VAR 0 2
79403: ARRAY
79404: PUSH
79405: LD_INT 2
79407: ARRAY
79408: PPUSH
79409: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79413: LD_ADDR_EXP 108
79417: PUSH
79418: LD_EXP 108
79422: PPUSH
79423: LD_VAR 0 1
79427: PPUSH
79428: LD_EXP 108
79432: PUSH
79433: LD_VAR 0 1
79437: ARRAY
79438: PPUSH
79439: LD_VAR 0 2
79443: PPUSH
79444: CALL_OW 3
79448: PPUSH
79449: CALL_OW 1
79453: ST_TO_ADDR
// continue ;
79454: GO 79327
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79456: LD_ADDR_VAR 0 4
79460: PUSH
79461: LD_EXP 108
79465: PUSH
79466: LD_VAR 0 1
79470: ARRAY
79471: PUSH
79472: LD_VAR 0 2
79476: ARRAY
79477: PUSH
79478: LD_INT 1
79480: ARRAY
79481: PPUSH
79482: LD_EXP 108
79486: PUSH
79487: LD_VAR 0 1
79491: ARRAY
79492: PUSH
79493: LD_VAR 0 2
79497: ARRAY
79498: PUSH
79499: LD_INT 2
79501: ARRAY
79502: PPUSH
79503: CALL_OW 428
79507: ST_TO_ADDR
// if not tmp then
79508: LD_VAR 0 4
79512: NOT
79513: IFFALSE 79517
// continue ;
79515: GO 79327
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79517: LD_VAR 0 4
79521: PUSH
79522: LD_INT 81
79524: PUSH
79525: LD_VAR 0 3
79529: PUSH
79530: EMPTY
79531: LIST
79532: LIST
79533: PPUSH
79534: CALL_OW 69
79538: IN
79539: IFFALSE 79589
79541: PUSH
79542: LD_EXP 108
79546: PUSH
79547: LD_VAR 0 1
79551: ARRAY
79552: PUSH
79553: LD_VAR 0 2
79557: ARRAY
79558: PUSH
79559: LD_INT 1
79561: ARRAY
79562: PPUSH
79563: LD_EXP 108
79567: PUSH
79568: LD_VAR 0 1
79572: ARRAY
79573: PUSH
79574: LD_VAR 0 2
79578: ARRAY
79579: PUSH
79580: LD_INT 2
79582: ARRAY
79583: PPUSH
79584: CALL_OW 458
79588: AND
79589: IFFALSE 79683
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79591: LD_EXP 108
79595: PUSH
79596: LD_VAR 0 1
79600: ARRAY
79601: PUSH
79602: LD_VAR 0 2
79606: ARRAY
79607: PUSH
79608: LD_INT 1
79610: ARRAY
79611: PPUSH
79612: LD_EXP 108
79616: PUSH
79617: LD_VAR 0 1
79621: ARRAY
79622: PUSH
79623: LD_VAR 0 2
79627: ARRAY
79628: PUSH
79629: LD_INT 2
79631: ARRAY
79632: PPUSH
79633: LD_VAR 0 3
79637: PPUSH
79638: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79642: LD_ADDR_EXP 108
79646: PUSH
79647: LD_EXP 108
79651: PPUSH
79652: LD_VAR 0 1
79656: PPUSH
79657: LD_EXP 108
79661: PUSH
79662: LD_VAR 0 1
79666: ARRAY
79667: PPUSH
79668: LD_VAR 0 2
79672: PPUSH
79673: CALL_OW 3
79677: PPUSH
79678: CALL_OW 1
79682: ST_TO_ADDR
// end ; end ;
79683: GO 79327
79685: POP
79686: POP
// end ;
79687: GO 79198
79689: POP
79690: POP
// end ;
79691: PPOPN 4
79693: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
79694: LD_INT 0
79696: PPUSH
79697: PPUSH
79698: PPUSH
79699: PPUSH
// result := false ;
79700: LD_ADDR_VAR 0 4
79704: PUSH
79705: LD_INT 0
79707: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79708: LD_VAR 0 1
79712: PPUSH
79713: CALL_OW 264
79717: PUSH
79718: LD_INT 81
79720: EQUAL
79721: NOT
79722: IFFALSE 79726
// exit ;
79724: GO 80096
// side := GetSide ( unit ) ;
79726: LD_ADDR_VAR 0 6
79730: PUSH
79731: LD_VAR 0 1
79735: PPUSH
79736: CALL_OW 255
79740: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
79741: LD_ADDR_VAR 0 5
79745: PUSH
79746: LD_EXP 107
79750: PPUSH
79751: LD_VAR 0 1
79755: PPUSH
79756: CALL 20578 0 2
79760: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79761: LD_EXP 108
79765: PUSH
79766: LD_VAR 0 5
79770: ARRAY
79771: PUSH
79772: LD_EXP 109
79776: GREATEREQUAL
79777: IFFALSE 79781
// exit ;
79779: GO 80096
// ComMoveXY ( unit , x , y ) ;
79781: LD_VAR 0 1
79785: PPUSH
79786: LD_VAR 0 2
79790: PPUSH
79791: LD_VAR 0 3
79795: PPUSH
79796: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79800: LD_INT 35
79802: PPUSH
79803: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
79807: LD_VAR 0 1
79811: PPUSH
79812: LD_VAR 0 2
79816: PPUSH
79817: LD_VAR 0 3
79821: PPUSH
79822: CALL 52634 0 3
79826: NOT
79827: IFFALSE 79840
79829: PUSH
79830: LD_VAR 0 1
79834: PPUSH
79835: CALL_OW 314
79839: AND
79840: IFFALSE 79844
// exit ;
79842: GO 80096
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
79844: LD_VAR 0 2
79848: PPUSH
79849: LD_VAR 0 3
79853: PPUSH
79854: CALL_OW 428
79858: PUSH
79859: LD_VAR 0 1
79863: EQUAL
79864: IFFALSE 79878
79866: PUSH
79867: LD_VAR 0 1
79871: PPUSH
79872: CALL_OW 314
79876: NOT
79877: AND
79878: IFFALSE 79800
// if MineAtPos ( x , y ) then
79880: LD_VAR 0 2
79884: PPUSH
79885: LD_VAR 0 3
79889: PPUSH
79890: CALL_OW 458
79894: IFFALSE 79898
// exit ;
79896: GO 80096
// if your_side = side then
79898: LD_OWVAR 2
79902: PUSH
79903: LD_VAR 0 6
79907: EQUAL
79908: IFFALSE 79927
// PlaySoundXY ( x , y , PlantMine ) ;
79910: LD_VAR 0 2
79914: PPUSH
79915: LD_VAR 0 3
79919: PPUSH
79920: LD_STRING PlantMine
79922: PPUSH
79923: CALL_OW 366
// repeat wait ( 1 ) ;
79927: LD_INT 1
79929: PPUSH
79930: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
79934: LD_VAR 0 2
79938: PPUSH
79939: LD_VAR 0 3
79943: PPUSH
79944: LD_VAR 0 6
79948: PPUSH
79949: LD_INT 0
79951: PPUSH
79952: CALL_OW 454
79956: IFFALSE 79927
// if MineAtPos ( x , y ) then
79958: LD_VAR 0 2
79962: PPUSH
79963: LD_VAR 0 3
79967: PPUSH
79968: CALL_OW 458
79972: IFFALSE 80088
// begin for i in minerMinesList [ index ] do
79974: LD_ADDR_VAR 0 7
79978: PUSH
79979: LD_EXP 108
79983: PUSH
79984: LD_VAR 0 5
79988: ARRAY
79989: PUSH
79990: FOR_IN
79991: IFFALSE 80033
// if i [ 1 ] = x and i [ 2 ] = y then
79993: LD_VAR 0 7
79997: PUSH
79998: LD_INT 1
80000: ARRAY
80001: PUSH
80002: LD_VAR 0 2
80006: EQUAL
80007: IFFALSE 80025
80009: PUSH
80010: LD_VAR 0 7
80014: PUSH
80015: LD_INT 2
80017: ARRAY
80018: PUSH
80019: LD_VAR 0 3
80023: EQUAL
80024: AND
80025: IFFALSE 80031
// exit ;
80027: POP
80028: POP
80029: GO 80096
80031: GO 79990
80033: POP
80034: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
80035: LD_ADDR_EXP 108
80039: PUSH
80040: LD_EXP 108
80044: PPUSH
80045: LD_VAR 0 5
80049: PUSH
80050: LD_EXP 108
80054: PUSH
80055: LD_VAR 0 5
80059: ARRAY
80060: PUSH
80061: LD_INT 1
80063: PLUS
80064: PUSH
80065: EMPTY
80066: LIST
80067: LIST
80068: PPUSH
80069: LD_VAR 0 2
80073: PUSH
80074: LD_VAR 0 3
80078: PUSH
80079: EMPTY
80080: LIST
80081: LIST
80082: PPUSH
80083: CALL 20795 0 3
80087: ST_TO_ADDR
// end ; result := true ;
80088: LD_ADDR_VAR 0 4
80092: PUSH
80093: LD_INT 1
80095: ST_TO_ADDR
// end ;
80096: LD_VAR 0 4
80100: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
80101: LD_INT 0
80103: PPUSH
80104: PPUSH
80105: PPUSH
// if not unit in minersList then
80106: LD_VAR 0 1
80110: PUSH
80111: LD_EXP 107
80115: IN
80116: NOT
80117: IFFALSE 80121
// exit ;
80119: GO 80328
// index := GetElementIndex ( minersList , unit ) ;
80121: LD_ADDR_VAR 0 6
80125: PUSH
80126: LD_EXP 107
80130: PPUSH
80131: LD_VAR 0 1
80135: PPUSH
80136: CALL 20578 0 2
80140: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
80141: LD_ADDR_VAR 0 5
80145: PUSH
80146: DOUBLE
80147: LD_EXP 108
80151: PUSH
80152: LD_VAR 0 6
80156: ARRAY
80157: INC
80158: ST_TO_ADDR
80159: LD_INT 1
80161: PUSH
80162: FOR_DOWNTO
80163: IFFALSE 80326
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
80165: LD_EXP 108
80169: PUSH
80170: LD_VAR 0 6
80174: ARRAY
80175: PUSH
80176: LD_VAR 0 5
80180: ARRAY
80181: PUSH
80182: LD_INT 1
80184: ARRAY
80185: PPUSH
80186: LD_EXP 108
80190: PUSH
80191: LD_VAR 0 6
80195: ARRAY
80196: PUSH
80197: LD_VAR 0 5
80201: ARRAY
80202: PUSH
80203: LD_INT 2
80205: ARRAY
80206: PPUSH
80207: LD_VAR 0 2
80211: PPUSH
80212: LD_VAR 0 3
80216: PPUSH
80217: CALL_OW 298
80221: PUSH
80222: LD_INT 6
80224: LESS
80225: IFFALSE 80324
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80227: LD_EXP 108
80231: PUSH
80232: LD_VAR 0 6
80236: ARRAY
80237: PUSH
80238: LD_VAR 0 5
80242: ARRAY
80243: PUSH
80244: LD_INT 1
80246: ARRAY
80247: PPUSH
80248: LD_EXP 108
80252: PUSH
80253: LD_VAR 0 6
80257: ARRAY
80258: PUSH
80259: LD_VAR 0 5
80263: ARRAY
80264: PUSH
80265: LD_INT 2
80267: ARRAY
80268: PPUSH
80269: LD_VAR 0 1
80273: PPUSH
80274: CALL_OW 255
80278: PPUSH
80279: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80283: LD_ADDR_EXP 108
80287: PUSH
80288: LD_EXP 108
80292: PPUSH
80293: LD_VAR 0 6
80297: PPUSH
80298: LD_EXP 108
80302: PUSH
80303: LD_VAR 0 6
80307: ARRAY
80308: PPUSH
80309: LD_VAR 0 5
80313: PPUSH
80314: CALL_OW 3
80318: PPUSH
80319: CALL_OW 1
80323: ST_TO_ADDR
// end ; end ;
80324: GO 80162
80326: POP
80327: POP
// end ;
80328: LD_VAR 0 4
80332: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
80333: LD_INT 0
80335: PPUSH
80336: PPUSH
80337: PPUSH
80338: PPUSH
80339: PPUSH
80340: PPUSH
80341: PPUSH
80342: PPUSH
80343: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
80344: LD_VAR 0 1
80348: PPUSH
80349: CALL_OW 264
80353: PUSH
80354: LD_INT 81
80356: EQUAL
80357: NOT
80358: IFTRUE 80373
80360: PUSH
80361: LD_VAR 0 1
80365: PUSH
80366: LD_EXP 107
80370: IN
80371: NOT
80372: OR
80373: IFFALSE 80377
// exit ;
80375: GO 80703
// index := GetElementIndex ( minersList , unit ) ;
80377: LD_ADDR_VAR 0 6
80381: PUSH
80382: LD_EXP 107
80386: PPUSH
80387: LD_VAR 0 1
80391: PPUSH
80392: CALL 20578 0 2
80396: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80397: LD_ADDR_VAR 0 8
80401: PUSH
80402: LD_EXP 109
80406: PUSH
80407: LD_EXP 108
80411: PUSH
80412: LD_VAR 0 6
80416: ARRAY
80417: MINUS
80418: ST_TO_ADDR
// if not minesFreeAmount then
80419: LD_VAR 0 8
80423: NOT
80424: IFFALSE 80428
// exit ;
80426: GO 80703
// tmp := [ ] ;
80428: LD_ADDR_VAR 0 7
80432: PUSH
80433: EMPTY
80434: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80435: LD_ADDR_VAR 0 5
80439: PUSH
80440: DOUBLE
80441: LD_INT 1
80443: DEC
80444: ST_TO_ADDR
80445: LD_VAR 0 8
80449: PUSH
80450: FOR_TO
80451: IFFALSE 80650
// begin _d := rand ( 0 , 5 ) ;
80453: LD_ADDR_VAR 0 11
80457: PUSH
80458: LD_INT 0
80460: PPUSH
80461: LD_INT 5
80463: PPUSH
80464: CALL_OW 12
80468: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80469: LD_ADDR_VAR 0 12
80473: PUSH
80474: LD_INT 2
80476: PPUSH
80477: LD_INT 6
80479: PPUSH
80480: CALL_OW 12
80484: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80485: LD_ADDR_VAR 0 9
80489: PUSH
80490: LD_VAR 0 2
80494: PPUSH
80495: LD_VAR 0 11
80499: PPUSH
80500: LD_VAR 0 12
80504: PPUSH
80505: CALL_OW 272
80509: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80510: LD_ADDR_VAR 0 10
80514: PUSH
80515: LD_VAR 0 3
80519: PPUSH
80520: LD_VAR 0 11
80524: PPUSH
80525: LD_VAR 0 12
80529: PPUSH
80530: CALL_OW 273
80534: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80535: LD_VAR 0 9
80539: PPUSH
80540: LD_VAR 0 10
80544: PPUSH
80545: CALL_OW 488
80549: IFFALSE 80573
80551: PUSH
80552: LD_VAR 0 9
80556: PUSH
80557: LD_VAR 0 10
80561: PUSH
80562: EMPTY
80563: LIST
80564: LIST
80565: PUSH
80566: LD_VAR 0 7
80570: IN
80571: NOT
80572: AND
80573: IFFALSE 80592
80575: PUSH
80576: LD_VAR 0 9
80580: PPUSH
80581: LD_VAR 0 10
80585: PPUSH
80586: CALL_OW 458
80590: NOT
80591: AND
80592: IFFALSE 80634
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80594: LD_ADDR_VAR 0 7
80598: PUSH
80599: LD_VAR 0 7
80603: PPUSH
80604: LD_VAR 0 7
80608: PUSH
80609: LD_INT 1
80611: PLUS
80612: PPUSH
80613: LD_VAR 0 9
80617: PUSH
80618: LD_VAR 0 10
80622: PUSH
80623: EMPTY
80624: LIST
80625: LIST
80626: PPUSH
80627: CALL_OW 1
80631: ST_TO_ADDR
80632: GO 80648
// i := i - 1 ;
80634: LD_ADDR_VAR 0 5
80638: PUSH
80639: LD_VAR 0 5
80643: PUSH
80644: LD_INT 1
80646: MINUS
80647: ST_TO_ADDR
// end ;
80648: GO 80450
80650: POP
80651: POP
// for i in tmp do
80652: LD_ADDR_VAR 0 5
80656: PUSH
80657: LD_VAR 0 7
80661: PUSH
80662: FOR_IN
80663: IFFALSE 80701
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80665: LD_VAR 0 1
80669: PPUSH
80670: LD_VAR 0 5
80674: PUSH
80675: LD_INT 1
80677: ARRAY
80678: PPUSH
80679: LD_VAR 0 5
80683: PUSH
80684: LD_INT 2
80686: ARRAY
80687: PPUSH
80688: CALL 79694 0 3
80692: NOT
80693: IFFALSE 80699
// exit ;
80695: POP
80696: POP
80697: GO 80703
80699: GO 80662
80701: POP
80702: POP
// end ;
80703: LD_VAR 0 4
80707: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
80708: LD_INT 0
80710: PPUSH
80711: PPUSH
80712: PPUSH
80713: PPUSH
80714: PPUSH
80715: PPUSH
80716: PPUSH
80717: PPUSH
80718: PPUSH
// if GetClass ( unit ) <> class_sniper then
80719: LD_VAR 0 1
80723: PPUSH
80724: CALL_OW 257
80728: PUSH
80729: LD_INT 5
80731: NONEQUAL
80732: IFFALSE 80736
// exit ;
80734: GO 81206
// dist := 8 ;
80736: LD_ADDR_VAR 0 5
80740: PUSH
80741: LD_INT 8
80743: ST_TO_ADDR
// viewRange := 12 ;
80744: LD_ADDR_VAR 0 8
80748: PUSH
80749: LD_INT 12
80751: ST_TO_ADDR
// side := GetSide ( unit ) ;
80752: LD_ADDR_VAR 0 6
80756: PUSH
80757: LD_VAR 0 1
80761: PPUSH
80762: CALL_OW 255
80766: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
80767: LD_INT 61
80769: PPUSH
80770: LD_VAR 0 6
80774: PPUSH
80775: CALL_OW 321
80779: PUSH
80780: LD_INT 2
80782: EQUAL
80783: IFFALSE 80793
// viewRange := 16 ;
80785: LD_ADDR_VAR 0 8
80789: PUSH
80790: LD_INT 16
80792: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
80793: LD_VAR 0 1
80797: PPUSH
80798: LD_VAR 0 2
80802: PPUSH
80803: LD_VAR 0 3
80807: PPUSH
80808: CALL_OW 297
80812: PUSH
80813: LD_VAR 0 5
80817: GREATER
80818: IFFALSE 80897
// begin ComMoveXY ( unit , x , y ) ;
80820: LD_VAR 0 1
80824: PPUSH
80825: LD_VAR 0 2
80829: PPUSH
80830: LD_VAR 0 3
80834: PPUSH
80835: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80839: LD_INT 35
80841: PPUSH
80842: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
80846: LD_VAR 0 1
80850: PPUSH
80851: LD_VAR 0 2
80855: PPUSH
80856: LD_VAR 0 3
80860: PPUSH
80861: CALL 52634 0 3
80865: NOT
80866: IFFALSE 80870
// exit ;
80868: GO 81206
// until GetDistUnitXY ( unit , x , y ) < dist ;
80870: LD_VAR 0 1
80874: PPUSH
80875: LD_VAR 0 2
80879: PPUSH
80880: LD_VAR 0 3
80884: PPUSH
80885: CALL_OW 297
80889: PUSH
80890: LD_VAR 0 5
80894: LESS
80895: IFFALSE 80839
// end ; ComTurnXY ( unit , x , y ) ;
80897: LD_VAR 0 1
80901: PPUSH
80902: LD_VAR 0 2
80906: PPUSH
80907: LD_VAR 0 3
80911: PPUSH
80912: CALL_OW 118
// repeat if Multiplayer then
80916: LD_OWVAR 4
80920: IFFALSE 80931
// wait ( 35 ) else
80922: LD_INT 35
80924: PPUSH
80925: CALL_OW 67
80929: GO 80938
// wait ( 5 ) ;
80931: LD_INT 5
80933: PPUSH
80934: CALL_OW 67
// _d := GetDir ( unit ) ;
80938: LD_ADDR_VAR 0 11
80942: PUSH
80943: LD_VAR 0 1
80947: PPUSH
80948: CALL_OW 254
80952: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
80953: LD_ADDR_VAR 0 7
80957: PUSH
80958: LD_VAR 0 1
80962: PPUSH
80963: CALL_OW 250
80967: PPUSH
80968: LD_VAR 0 1
80972: PPUSH
80973: CALL_OW 251
80977: PPUSH
80978: LD_VAR 0 2
80982: PPUSH
80983: LD_VAR 0 3
80987: PPUSH
80988: CALL 55270 0 4
80992: ST_TO_ADDR
// until dir = _d ;
80993: LD_VAR 0 7
80997: PUSH
80998: LD_VAR 0 11
81002: EQUAL
81003: IFFALSE 80916
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
81005: LD_ADDR_VAR 0 9
81009: PUSH
81010: LD_VAR 0 1
81014: PPUSH
81015: CALL_OW 250
81019: PPUSH
81020: LD_VAR 0 7
81024: PPUSH
81025: LD_VAR 0 5
81029: PPUSH
81030: CALL_OW 272
81034: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
81035: LD_ADDR_VAR 0 10
81039: PUSH
81040: LD_VAR 0 1
81044: PPUSH
81045: CALL_OW 251
81049: PPUSH
81050: LD_VAR 0 7
81054: PPUSH
81055: LD_VAR 0 5
81059: PPUSH
81060: CALL_OW 273
81064: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81065: LD_VAR 0 9
81069: PPUSH
81070: LD_VAR 0 10
81074: PPUSH
81075: CALL_OW 488
81079: NOT
81080: IFFALSE 81084
// exit ;
81082: GO 81206
// ComAnimCustom ( unit , 1 ) ;
81084: LD_VAR 0 1
81088: PPUSH
81089: LD_INT 1
81091: PPUSH
81092: CALL_OW 592
// p := 0 ;
81096: LD_ADDR_VAR 0 12
81100: PUSH
81101: LD_INT 0
81103: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
81104: LD_VAR 0 9
81108: PPUSH
81109: LD_VAR 0 10
81113: PPUSH
81114: LD_VAR 0 6
81118: PPUSH
81119: LD_VAR 0 8
81123: PPUSH
81124: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
81128: LD_INT 35
81130: PPUSH
81131: CALL_OW 67
// p := Inc ( p ) ;
81135: LD_ADDR_VAR 0 12
81139: PUSH
81140: LD_VAR 0 12
81144: PPUSH
81145: CALL 55226 0 1
81149: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
81150: LD_VAR 0 12
81154: PUSH
81155: LD_INT 3
81157: EQUAL
81158: IFTRUE 81172
81160: PUSH
81161: LD_VAR 0 1
81165: PPUSH
81166: CALL_OW 302
81170: NOT
81171: OR
81172: IFTRUE 81185
81174: PUSH
81175: LD_VAR 0 1
81179: PPUSH
81180: CALL_OW 301
81184: OR
81185: IFFALSE 81128
// RemoveSeeing ( _x , _y , side ) ;
81187: LD_VAR 0 9
81191: PPUSH
81192: LD_VAR 0 10
81196: PPUSH
81197: LD_VAR 0 6
81201: PPUSH
81202: CALL_OW 331
// end ;
81206: LD_VAR 0 4
81210: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
81211: LD_INT 0
81213: PPUSH
81214: PPUSH
81215: PPUSH
81216: PPUSH
81217: PPUSH
81218: PPUSH
81219: PPUSH
81220: PPUSH
81221: PPUSH
81222: PPUSH
81223: PPUSH
// if not unit then
81224: LD_VAR 0 1
81228: NOT
81229: IFFALSE 81233
// exit ;
81231: GO 81504
// side := GetSide ( unit ) ;
81233: LD_ADDR_VAR 0 3
81237: PUSH
81238: LD_VAR 0 1
81242: PPUSH
81243: CALL_OW 255
81247: ST_TO_ADDR
// x := GetX ( unit ) ;
81248: LD_ADDR_VAR 0 5
81252: PUSH
81253: LD_VAR 0 1
81257: PPUSH
81258: CALL_OW 250
81262: ST_TO_ADDR
// y := GetY ( unit ) ;
81263: LD_ADDR_VAR 0 6
81267: PUSH
81268: LD_VAR 0 1
81272: PPUSH
81273: CALL_OW 251
81277: ST_TO_ADDR
// r := 8 ;
81278: LD_ADDR_VAR 0 4
81282: PUSH
81283: LD_INT 8
81285: ST_TO_ADDR
// if x - r < 0 then
81286: LD_VAR 0 5
81290: PUSH
81291: LD_VAR 0 4
81295: MINUS
81296: PUSH
81297: LD_INT 0
81299: LESS
81300: IFFALSE 81312
// min_x := 0 else
81302: LD_ADDR_VAR 0 7
81306: PUSH
81307: LD_INT 0
81309: ST_TO_ADDR
81310: GO 81328
// min_x := x - r ;
81312: LD_ADDR_VAR 0 7
81316: PUSH
81317: LD_VAR 0 5
81321: PUSH
81322: LD_VAR 0 4
81326: MINUS
81327: ST_TO_ADDR
// if y - r < 0 then
81328: LD_VAR 0 6
81332: PUSH
81333: LD_VAR 0 4
81337: MINUS
81338: PUSH
81339: LD_INT 0
81341: LESS
81342: IFFALSE 81354
// min_y := 0 else
81344: LD_ADDR_VAR 0 8
81348: PUSH
81349: LD_INT 0
81351: ST_TO_ADDR
81352: GO 81370
// min_y := y - r ;
81354: LD_ADDR_VAR 0 8
81358: PUSH
81359: LD_VAR 0 6
81363: PUSH
81364: LD_VAR 0 4
81368: MINUS
81369: ST_TO_ADDR
// max_x := x + r ;
81370: LD_ADDR_VAR 0 9
81374: PUSH
81375: LD_VAR 0 5
81379: PUSH
81380: LD_VAR 0 4
81384: PLUS
81385: ST_TO_ADDR
// max_y := y + r ;
81386: LD_ADDR_VAR 0 10
81390: PUSH
81391: LD_VAR 0 6
81395: PUSH
81396: LD_VAR 0 4
81400: PLUS
81401: ST_TO_ADDR
// for _x = min_x to max_x do
81402: LD_ADDR_VAR 0 11
81406: PUSH
81407: DOUBLE
81408: LD_VAR 0 7
81412: DEC
81413: ST_TO_ADDR
81414: LD_VAR 0 9
81418: PUSH
81419: FOR_TO
81420: IFFALSE 81502
// for _y = min_y to max_y do
81422: LD_ADDR_VAR 0 12
81426: PUSH
81427: DOUBLE
81428: LD_VAR 0 8
81432: DEC
81433: ST_TO_ADDR
81434: LD_VAR 0 10
81438: PUSH
81439: FOR_TO
81440: IFFALSE 81498
// begin if not ValidHex ( _x , _y ) then
81442: LD_VAR 0 11
81446: PPUSH
81447: LD_VAR 0 12
81451: PPUSH
81452: CALL_OW 488
81456: NOT
81457: IFFALSE 81461
// continue ;
81459: GO 81439
// if MineAtPos ( _x , _y ) then
81461: LD_VAR 0 11
81465: PPUSH
81466: LD_VAR 0 12
81470: PPUSH
81471: CALL_OW 458
81475: IFFALSE 81496
// ViewMineAtPos ( _x , _y , side ) ;
81477: LD_VAR 0 11
81481: PPUSH
81482: LD_VAR 0 12
81486: PPUSH
81487: LD_VAR 0 3
81491: PPUSH
81492: CALL_OW 457
// end ;
81496: GO 81439
81498: POP
81499: POP
81500: GO 81419
81502: POP
81503: POP
// end ;
81504: LD_VAR 0 2
81508: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
81509: LD_INT 0
81511: PPUSH
81512: PPUSH
81513: PPUSH
81514: PPUSH
81515: PPUSH
81516: PPUSH
81517: PPUSH
// if not units then
81518: LD_VAR 0 1
81522: NOT
81523: IFFALSE 81527
// exit ;
81525: GO 81991
// scaners := [ ] ;
81527: LD_ADDR_VAR 0 6
81531: PUSH
81532: EMPTY
81533: ST_TO_ADDR
// for i in units do
81534: LD_ADDR_VAR 0 3
81538: PUSH
81539: LD_VAR 0 1
81543: PUSH
81544: FOR_IN
81545: IFFALSE 81702
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
81547: LD_VAR 0 3
81551: PPUSH
81552: CALL_OW 264
81556: PUSH
81557: LD_INT 11
81559: NONEQUAL
81560: IFTRUE 81574
81562: PUSH
81563: LD_VAR 0 3
81567: PPUSH
81568: CALL_OW 302
81572: NOT
81573: OR
81574: IFTRUE 81591
81576: PUSH
81577: LD_VAR 0 3
81581: PPUSH
81582: CALL_OW 110
81586: PUSH
81587: LD_INT 502
81589: EQUAL
81590: OR
81591: IFFALSE 81595
// continue ;
81593: GO 81544
// ComStop ( i ) ;
81595: LD_VAR 0 3
81599: PPUSH
81600: CALL_OW 141
// x := GetX ( i ) ;
81604: LD_ADDR_VAR 0 4
81608: PUSH
81609: LD_VAR 0 3
81613: PPUSH
81614: CALL_OW 250
81618: ST_TO_ADDR
// y := GetY ( i ) ;
81619: LD_ADDR_VAR 0 5
81623: PUSH
81624: LD_VAR 0 3
81628: PPUSH
81629: CALL_OW 251
81633: ST_TO_ADDR
// if GetSide ( i ) = your_side then
81634: LD_VAR 0 3
81638: PPUSH
81639: CALL_OW 255
81643: PUSH
81644: LD_OWVAR 2
81648: EQUAL
81649: IFFALSE 81668
// PlaySoundXY ( x , y , mineDetector ) ;
81651: LD_VAR 0 4
81655: PPUSH
81656: LD_VAR 0 5
81660: PPUSH
81661: LD_STRING mineDetector
81663: PPUSH
81664: CALL_OW 366
// scaners := Join ( scaners , i ) ;
81668: LD_ADDR_VAR 0 6
81672: PUSH
81673: LD_VAR 0 6
81677: PPUSH
81678: LD_VAR 0 3
81682: PPUSH
81683: CALL 53853 0 2
81687: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
81688: LD_VAR 0 3
81692: PPUSH
81693: LD_INT 502
81695: PPUSH
81696: CALL_OW 109
// end ;
81700: GO 81544
81702: POP
81703: POP
// if not scaners then
81704: LD_VAR 0 6
81708: NOT
81709: IFFALSE 81713
// exit ;
81711: GO 81991
// wait ( 3 ) ;
81713: LD_INT 3
81715: PPUSH
81716: CALL_OW 67
// timer := 6 ;
81720: LD_ADDR_VAR 0 7
81724: PUSH
81725: LD_INT 6
81727: ST_TO_ADDR
// repeat for i in scaners do
81728: LD_ADDR_VAR 0 3
81732: PUSH
81733: LD_VAR 0 6
81737: PUSH
81738: FOR_IN
81739: IFFALSE 81889
// begin side := GetSide ( i ) ;
81741: LD_ADDR_VAR 0 8
81745: PUSH
81746: LD_VAR 0 3
81750: PPUSH
81751: CALL_OW 255
81755: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
81756: LD_VAR 0 3
81760: PPUSH
81761: CALL_OW 302
81765: NOT
81766: IFTRUE 81779
81768: PUSH
81769: LD_VAR 0 3
81773: PPUSH
81774: CALL_OW 314
81778: OR
81779: IFTRUE 81810
81781: PUSH
81782: LD_VAR 0 3
81786: PPUSH
81787: CALL_OW 263
81791: PUSH
81792: LD_INT 1
81794: EQUAL
81795: IFFALSE 81809
81797: PUSH
81798: LD_VAR 0 3
81802: PPUSH
81803: CALL_OW 311
81807: NOT
81808: AND
81809: OR
81810: IFFALSE 81854
// begin SetUnitDisplayNumber ( i , 0 ) ;
81812: LD_VAR 0 3
81816: PPUSH
81817: LD_INT 0
81819: PPUSH
81820: CALL_OW 505
// SetTag ( i , 0 ) ;
81824: LD_VAR 0 3
81828: PPUSH
81829: LD_INT 0
81831: PPUSH
81832: CALL_OW 109
// scaners := scaners diff i ;
81836: LD_ADDR_VAR 0 6
81840: PUSH
81841: LD_VAR 0 6
81845: PUSH
81846: LD_VAR 0 3
81850: DIFF
81851: ST_TO_ADDR
// continue ;
81852: GO 81738
// end ; if side in [ your_side , 9 ] then
81854: LD_VAR 0 8
81858: PUSH
81859: LD_OWVAR 2
81863: PUSH
81864: LD_INT 9
81866: PUSH
81867: EMPTY
81868: LIST
81869: LIST
81870: IN
81871: IFFALSE 81887
// SetUnitDisplayNumber ( i , timer ) ;
81873: LD_VAR 0 3
81877: PPUSH
81878: LD_VAR 0 7
81882: PPUSH
81883: CALL_OW 505
// end ;
81887: GO 81738
81889: POP
81890: POP
// if not scaners then
81891: LD_VAR 0 6
81895: NOT
81896: IFFALSE 81900
// exit ;
81898: GO 81991
// timer := Dec ( timer ) ;
81900: LD_ADDR_VAR 0 7
81904: PUSH
81905: LD_VAR 0 7
81909: PPUSH
81910: CALL 55248 0 1
81914: ST_TO_ADDR
// wait ( 0 0$1 ) ;
81915: LD_INT 35
81917: PPUSH
81918: CALL_OW 67
// until timer = 0 ;
81922: LD_VAR 0 7
81926: PUSH
81927: LD_INT 0
81929: EQUAL
81930: IFFALSE 81728
// if not scaners then
81932: LD_VAR 0 6
81936: NOT
81937: IFFALSE 81941
// exit ;
81939: GO 81991
// for i in scaners do
81941: LD_ADDR_VAR 0 3
81945: PUSH
81946: LD_VAR 0 6
81950: PUSH
81951: FOR_IN
81952: IFFALSE 81989
// begin SetUnitDisplayNumber ( i , 0 ) ;
81954: LD_VAR 0 3
81958: PPUSH
81959: LD_INT 0
81961: PPUSH
81962: CALL_OW 505
// SetTag ( i , 0 ) ;
81966: LD_VAR 0 3
81970: PPUSH
81971: LD_INT 0
81973: PPUSH
81974: CALL_OW 109
// RevealDetectorMine ( i ) ;
81978: LD_VAR 0 3
81982: PPUSH
81983: CALL 81211 0 1
// end ;
81987: GO 81951
81989: POP
81990: POP
// end ;
81991: LD_VAR 0 2
81995: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
81996: LD_INT 0
81998: PPUSH
// if p1 = mine_detector_mode then
81999: LD_VAR 0 2
82003: PUSH
82004: LD_INT 103
82006: EQUAL
82007: IFFALSE 82018
// DetectMine ( units ) ;
82009: LD_VAR 0 1
82013: PPUSH
82014: CALL 81509 0 1
// end ;
82018: LD_VAR 0 7
82022: RET
