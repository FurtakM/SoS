// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 10268 0 0
// LoadEnv ;
  16: CALL 9827 0 0
// LoadCam ;
  20: CALL 10532 0 0
// LoadTech ;
  24: CALL 10608 0 0
// LoadBase ;
  28: CALL 11094 0 0
// PrepareArabian ;
  32: CALL 186 0 0
// PrepareRussian ;
  36: CALL 3050 0 0
// Action ;
  40: CALL 12398 0 0
// end ;
  44: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; export wave , strength ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 09c_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 09c_
  63: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 09_tick
  71: PPUSH
  72: LD_INT 31500
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 09c_tick
  87: PPUSH
  88: LD_INT 10500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// playerInBase := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// kamikazeTrained := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// apeDriver := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 120
 127: PUSH
 128: LD_INT 150
 130: PUSH
 131: LD_INT 180
 133: PUSH
 134: LD_INT 220
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// missionTime := 0 0$00 ;
 149: LD_ADDR_EXP 9
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// ruDefeated := false ;
 157: LD_ADDR_EXP 10
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// wave := 0 ;
 165: LD_ADDR_EXP 11
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// strength := 0 ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ; end_of_file
 181: LD_VAR 0 1
 185: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 197: LD_STRING 05_DrugsTested
 199: PPUSH
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 30
 209: IFFALSE 224
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 211: LD_INT 5
 213: PPUSH
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 2
 219: PPUSH
 220: CALL_OW 322
// uc_side := 2 ;
 224: LD_ADDR_OWVAR 20
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// uc_nation := nation_nature ;
 232: LD_ADDR_OWVAR 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 240: LD_ADDR_VAR 0 3
 244: PUSH
 245: LD_STRING 09_apes
 247: PPUSH
 248: CALL_OW 31
 252: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 253: LD_ADDR_VAR 0 6
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 30
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: ST_TO_ADDR
// if apes then
 305: LD_VAR 0 3
 309: IFFALSE 388
// for i in apes do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: LD_VAR 0 3
 320: PUSH
 321: FOR_IN
 322: IFFALSE 386
// if UnitsInside ( b [ 1 ] ) < 6 then
 324: LD_VAR 0 6
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: CALL_OW 313
 337: PUSH
 338: LD_INT 6
 340: LESS
 341: IFFALSE 363
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_VAR 0 6
 352: PUSH
 353: LD_INT 1
 355: ARRAY
 356: PPUSH
 357: CALL_OW 52
 361: GO 384
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 363: LD_VAR 0 2
 367: PPUSH
 368: LD_INT 82
 370: PPUSH
 371: LD_INT 27
 373: PPUSH
 374: LD_INT 6
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 50
 384: GO 321
 386: POP
 387: POP
// InitHC_All ( ) ;
 388: CALL_OW 584
// uc_nation := nation_arabian ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 2
 399: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 400: LD_ADDR_VAR 0 6
 404: PUSH
 405: LD_INT 22
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 5
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 474: LD_ADDR_EXP 33
 478: PUSH
 479: LD_STRING Rolf
 481: PPUSH
 482: LD_EXP 1
 486: NOT
 487: PPUSH
 488: LD_STRING 06_
 490: PPUSH
 491: CALL 15488 0 3
 495: ST_TO_ADDR
// if Rolf then
 496: LD_EXP 33
 500: IFFALSE 709
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 502: LD_ADDR_EXP 32
 506: PUSH
 507: LD_STRING 06_RolfSquad
 509: PPUSH
 510: CALL_OW 31
 514: ST_TO_ADDR
// if rolfSquad < 3 then
 515: LD_EXP 32
 519: PUSH
 520: LD_INT 3
 522: LESS
 523: IFFALSE 586
// for i := 1 to 3 - Count ( rolfSquad ) do
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: DOUBLE
 531: LD_INT 1
 533: DEC
 534: ST_TO_ADDR
 535: LD_INT 3
 537: PUSH
 538: LD_EXP 32
 542: PPUSH
 543: CALL 17674 0 1
 547: MINUS
 548: PUSH
 549: FOR_TO
 550: IFFALSE 584
// begin PrepareSoldier ( false , 4 ) ;
 552: LD_INT 0
 554: PPUSH
 555: LD_INT 4
 557: PPUSH
 558: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 562: LD_ADDR_EXP 32
 566: PUSH
 567: LD_EXP 32
 571: PPUSH
 572: CALL_OW 44
 576: PPUSH
 577: CALL 53283 0 2
 581: ST_TO_ADDR
// end ;
 582: GO 549
 584: POP
 585: POP
// if b then
 586: LD_VAR 0 6
 590: IFFALSE 665
// begin for i in rolfSquad union Rolf do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_EXP 32
 601: PUSH
 602: LD_EXP 33
 606: UNION
 607: PUSH
 608: FOR_IN
 609: IFFALSE 661
// begin SetClass ( i , 1 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_VAR 0 6
 632: PPUSH
 633: LD_INT 3
 635: PUSH
 636: LD_INT 62
 638: PUSH
 639: EMPTY
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 52
// end ;
 659: GO 608
 661: POP
 662: POP
// end else
 663: GO 709
// for i in rolfSquad union Rolf do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_EXP 32
 674: PUSH
 675: LD_EXP 33
 679: UNION
 680: PUSH
 681: FOR_IN
 682: IFFALSE 707
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 684: LD_VAR 0 2
 688: PPUSH
 689: LD_INT 82
 691: PPUSH
 692: LD_INT 27
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 50
 705: GO 681
 707: POP
 708: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 13
 713: PUSH
 714: LD_STRING Heike
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 15488 0 3
 732: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 16
 737: PUSH
 738: LD_STRING Ibrahim
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 15488 0 3
 756: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 14
 761: PUSH
 762: LD_STRING Givi
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 15488 0 3
 780: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 17
 785: PUSH
 786: LD_STRING Kamil
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 15488 0 3
 804: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 18
 809: PUSH
 810: LD_STRING Kaia
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 15488 0 3
 828: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 19
 833: PUSH
 834: LD_STRING Sophia
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 15488 0 3
 852: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 20
 857: PUSH
 858: LD_STRING Markov
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 15488 0 3
 876: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 23
 881: PUSH
 882: LD_STRING Aviradze
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 15488 0 3
 900: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 22
 905: PUSH
 906: LD_STRING Kurt
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 15488 0 3
 924: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_STRING Mike
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 15488 0 3
 948: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 21
 953: PUSH
 954: LD_STRING Olaf
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 15488 0 3
 972: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 973: LD_ADDR_EXP 30
 977: PUSH
 978: LD_STRING 09c_heikeSecondSquad
 980: PPUSH
 981: CALL_OW 31
 985: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 986: LD_ADDR_EXP 24
 990: PUSH
 991: LD_STRING Schulz
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_EXP 2
1004: PPUSH
1005: CALL 15488 0 3
1009: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
1010: LD_ADDR_EXP 25
1014: PUSH
1015: LD_STRING Basim
1017: PPUSH
1018: LD_EXP 1
1022: NOT
1023: PPUSH
1024: LD_EXP 2
1028: PPUSH
1029: CALL 15488 0 3
1033: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1034: LD_ADDR_EXP 26
1038: PUSH
1039: LD_STRING Lemmy
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 2
1052: PPUSH
1053: CALL 15488 0 3
1057: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1058: LD_ADDR_EXP 27
1062: PUSH
1063: LD_STRING Mia
1065: PPUSH
1066: LD_EXP 1
1070: NOT
1071: PPUSH
1072: LD_EXP 2
1076: PPUSH
1077: CALL 15488 0 3
1081: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1082: LD_ADDR_EXP 28
1086: PUSH
1087: LD_STRING Nia
1089: PPUSH
1090: LD_EXP 1
1094: NOT
1095: PPUSH
1096: LD_EXP 2
1100: PPUSH
1101: CALL 15488 0 3
1105: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1106: LD_ADDR_EXP 29
1110: PUSH
1111: LD_STRING Jenna
1113: PPUSH
1114: LD_EXP 1
1118: NOT
1119: PPUSH
1120: LD_EXP 2
1124: PPUSH
1125: CALL 15488 0 3
1129: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING 09c_schulzSecondSquad
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// if debug then
1143: LD_EXP 1
1147: IFFALSE 1227
// begin schulzSecondSquad := [ ] ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: EMPTY
1155: ST_TO_ADDR
// for i := 1 to 3 do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_INT 3
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1225
// begin uc_side := 2 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
// uc_nation := nation_arabian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 2
1187: ST_TO_ADDR
// PrepareHuman ( false , i , 0 ) ;
1188: LD_INT 0
1190: PPUSH
1191: LD_VAR 0 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PPUSH
1213: CALL_OW 44
1217: PPUSH
1218: CALL 53283 0 2
1222: ST_TO_ADDR
// end ;
1223: GO 1169
1225: POP
1226: POP
// end ; vehicles := LoadVariable ( 09c_vehicles , [ [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 36 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 41 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 37 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 35 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 34 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 38 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 40 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 39 ] ] ) ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_STRING 09c_vehicles
1234: PPUSH
1235: LD_INT 13
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 28
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 36
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 13
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 28
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 0
1289: PUSH
1290: LD_INT 41
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 13
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: LD_INT 28
1314: PUSH
1315: LD_INT 2
1317: PUSH
1318: LD_INT 0
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 37
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 13
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 28
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 35
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 13
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 28
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: LD_INT 34
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 13
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 28
1416: PUSH
1417: LD_INT 2
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 38
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 13
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 28
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 40
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 13
1475: PUSH
1476: LD_INT 3
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 28
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 39
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 30
1521: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Heike , LoadVariable ( 09c_Heike_ID , - 1 ) , vehicles ) ;
1522: LD_ADDR_VAR 0 9
1526: PUSH
1527: LD_VAR 0 9
1531: PUSH
1532: LD_EXP 13
1536: PPUSH
1537: LD_STRING 09c_Heike_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2764 0 3
1558: DIFF
1559: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Givi , LoadVariable ( 09c_Givi_ID , - 1 ) , vehicles ) ;
1560: LD_ADDR_VAR 0 9
1564: PUSH
1565: LD_VAR 0 9
1569: PUSH
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING 09c_Givi_ID
1577: PPUSH
1578: LD_INT 1
1580: NEG
1581: PPUSH
1582: CALL_OW 30
1586: PPUSH
1587: LD_VAR 0 9
1591: PPUSH
1592: CALL 2764 0 3
1596: DIFF
1597: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mike , LoadVariable ( 09c_Mike_ID , - 1 ) , vehicles ) ;
1598: LD_ADDR_VAR 0 9
1602: PUSH
1603: LD_VAR 0 9
1607: PUSH
1608: LD_EXP 15
1612: PPUSH
1613: LD_STRING 09c_Mike_ID
1615: PPUSH
1616: LD_INT 1
1618: NEG
1619: PPUSH
1620: CALL_OW 30
1624: PPUSH
1625: LD_VAR 0 9
1629: PPUSH
1630: CALL 2764 0 3
1634: DIFF
1635: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Ibrahim , LoadVariable ( 09c_Ibrahim_ID , - 1 ) , vehicles ) ;
1636: LD_ADDR_VAR 0 9
1640: PUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_EXP 16
1650: PPUSH
1651: LD_STRING 09c_Ibrahim_ID
1653: PPUSH
1654: LD_INT 1
1656: NEG
1657: PPUSH
1658: CALL_OW 30
1662: PPUSH
1663: LD_VAR 0 9
1667: PPUSH
1668: CALL 2764 0 3
1672: DIFF
1673: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kamil , LoadVariable ( 09c_Kamil_ID , - 1 ) , vehicles ) ;
1674: LD_ADDR_VAR 0 9
1678: PUSH
1679: LD_VAR 0 9
1683: PUSH
1684: LD_EXP 17
1688: PPUSH
1689: LD_STRING 09c_Kamil_ID
1691: PPUSH
1692: LD_INT 1
1694: NEG
1695: PPUSH
1696: CALL_OW 30
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL 2764 0 3
1710: DIFF
1711: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kaia , LoadVariable ( 09c_Kaia_ID , - 1 ) , vehicles ) ;
1712: LD_ADDR_VAR 0 9
1716: PUSH
1717: LD_VAR 0 9
1721: PUSH
1722: LD_EXP 18
1726: PPUSH
1727: LD_STRING 09c_Kaia_ID
1729: PPUSH
1730: LD_INT 1
1732: NEG
1733: PPUSH
1734: CALL_OW 30
1738: PPUSH
1739: LD_VAR 0 9
1743: PPUSH
1744: CALL 2764 0 3
1748: DIFF
1749: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Sophia , LoadVariable ( 09c_Sophia_ID , - 1 ) , vehicles ) ;
1750: LD_ADDR_VAR 0 9
1754: PUSH
1755: LD_VAR 0 9
1759: PUSH
1760: LD_EXP 19
1764: PPUSH
1765: LD_STRING 09c_Sophia_ID
1767: PPUSH
1768: LD_INT 1
1770: NEG
1771: PPUSH
1772: CALL_OW 30
1776: PPUSH
1777: LD_VAR 0 9
1781: PPUSH
1782: CALL 2764 0 3
1786: DIFF
1787: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Markov , LoadVariable ( 09c_Markov_ID , - 1 ) , vehicles ) ;
1788: LD_ADDR_VAR 0 9
1792: PUSH
1793: LD_VAR 0 9
1797: PUSH
1798: LD_EXP 20
1802: PPUSH
1803: LD_STRING 09c_Markov_ID
1805: PPUSH
1806: LD_INT 1
1808: NEG
1809: PPUSH
1810: CALL_OW 30
1814: PPUSH
1815: LD_VAR 0 9
1819: PPUSH
1820: CALL 2764 0 3
1824: DIFF
1825: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Olaf , LoadVariable ( 09c_Olaf_ID , - 1 ) , vehicles ) ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_VAR 0 9
1835: PUSH
1836: LD_EXP 21
1840: PPUSH
1841: LD_STRING 09c_Olaf_ID
1843: PPUSH
1844: LD_INT 1
1846: NEG
1847: PPUSH
1848: CALL_OW 30
1852: PPUSH
1853: LD_VAR 0 9
1857: PPUSH
1858: CALL 2764 0 3
1862: DIFF
1863: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kurt , LoadVariable ( 09c_Kurt_ID , - 1 ) , vehicles ) ;
1864: LD_ADDR_VAR 0 9
1868: PUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_STRING 09c_Kurt_ID
1881: PPUSH
1882: LD_INT 1
1884: NEG
1885: PPUSH
1886: CALL_OW 30
1890: PPUSH
1891: LD_VAR 0 9
1895: PPUSH
1896: CALL 2764 0 3
1900: DIFF
1901: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Aviradze , LoadVariable ( 09c_Aviradze_ID , - 1 ) , vehicles ) ;
1902: LD_ADDR_VAR 0 9
1906: PUSH
1907: LD_VAR 0 9
1911: PUSH
1912: LD_EXP 23
1916: PPUSH
1917: LD_STRING 09c_Aviradze_ID
1919: PPUSH
1920: LD_INT 1
1922: NEG
1923: PPUSH
1924: CALL_OW 30
1928: PPUSH
1929: LD_VAR 0 9
1933: PPUSH
1934: CALL 2764 0 3
1938: DIFF
1939: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Schulz , LoadVariable ( 09c_Schulz_ID , 34 ) , vehicles ) ;
1940: LD_ADDR_VAR 0 9
1944: PUSH
1945: LD_VAR 0 9
1949: PUSH
1950: LD_EXP 24
1954: PPUSH
1955: LD_STRING 09c_Schulz_ID
1957: PPUSH
1958: LD_INT 34
1960: PPUSH
1961: CALL_OW 30
1965: PPUSH
1966: LD_VAR 0 9
1970: PPUSH
1971: CALL 2764 0 3
1975: DIFF
1976: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Lemmy , LoadVariable ( 09c_Lemmy_ID , 35 ) , vehicles ) ;
1977: LD_ADDR_VAR 0 9
1981: PUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_EXP 26
1991: PPUSH
1992: LD_STRING 09c_Lemmy_ID
1994: PPUSH
1995: LD_INT 35
1997: PPUSH
1998: CALL_OW 30
2002: PPUSH
2003: LD_VAR 0 9
2007: PPUSH
2008: CALL 2764 0 3
2012: DIFF
2013: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mia , LoadVariable ( 09c_Mia_ID , 36 ) , vehicles ) ;
2014: LD_ADDR_VAR 0 9
2018: PUSH
2019: LD_VAR 0 9
2023: PUSH
2024: LD_EXP 27
2028: PPUSH
2029: LD_STRING 09c_Mia_ID
2031: PPUSH
2032: LD_INT 36
2034: PPUSH
2035: CALL_OW 30
2039: PPUSH
2040: LD_VAR 0 9
2044: PPUSH
2045: CALL 2764 0 3
2049: DIFF
2050: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Nia , LoadVariable ( 09c_Nia_ID , 37 ) , vehicles ) ;
2051: LD_ADDR_VAR 0 9
2055: PUSH
2056: LD_VAR 0 9
2060: PUSH
2061: LD_EXP 28
2065: PPUSH
2066: LD_STRING 09c_Nia_ID
2068: PPUSH
2069: LD_INT 37
2071: PPUSH
2072: CALL_OW 30
2076: PPUSH
2077: LD_VAR 0 9
2081: PPUSH
2082: CALL 2764 0 3
2086: DIFF
2087: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Jenna , LoadVariable ( 09c_Jenna_ID , 38 ) , vehicles ) ;
2088: LD_ADDR_VAR 0 9
2092: PUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_EXP 29
2102: PPUSH
2103: LD_STRING 09c_Jenna_ID
2105: PPUSH
2106: LD_INT 38
2108: PPUSH
2109: CALL_OW 30
2113: PPUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: CALL 2764 0 3
2123: DIFF
2124: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Basim , LoadVariable ( 09c_Basim_ID , - 1 ) , vehicles ) ;
2125: LD_ADDR_VAR 0 9
2129: PUSH
2130: LD_VAR 0 9
2134: PUSH
2135: LD_EXP 25
2139: PPUSH
2140: LD_STRING 09c_Basim_ID
2142: PPUSH
2143: LD_INT 1
2145: NEG
2146: PPUSH
2147: CALL_OW 30
2151: PPUSH
2152: LD_VAR 0 9
2156: PPUSH
2157: CALL 2764 0 3
2161: DIFF
2162: ST_TO_ADDR
// for i := 1 to schulzSecondSquad do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_EXP 31
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2238
// vehicles := vehicles diff SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 38 + i ) , vehicles ) ;
2181: LD_ADDR_VAR 0 9
2185: PUSH
2186: LD_VAR 0 9
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_VAR 0 2
2200: ARRAY
2201: PPUSH
2202: LD_STRING 09c_random_ID_
2204: PUSH
2205: LD_VAR 0 2
2209: STR
2210: PPUSH
2211: LD_INT 38
2213: PUSH
2214: LD_VAR 0 2
2218: PLUS
2219: PPUSH
2220: CALL_OW 30
2224: PPUSH
2225: LD_VAR 0 9
2229: PPUSH
2230: CALL 2764 0 3
2234: DIFF
2235: ST_TO_ADDR
2236: GO 2178
2238: POP
2239: POP
// for i := 1 to heikeSecondSquad do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 30
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2310
// vehicles := vehicles diff SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_hrandom_ID_ & i , - 1 ) , vehicles ) ;
2258: LD_ADDR_VAR 0 9
2262: PUSH
2263: LD_VAR 0 9
2267: PUSH
2268: LD_EXP 30
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_STRING 09c_hrandom_ID_
2281: PUSH
2282: LD_VAR 0 2
2286: STR
2287: PPUSH
2288: LD_INT 1
2290: NEG
2291: PPUSH
2292: CALL_OW 30
2296: PPUSH
2297: LD_VAR 0 9
2301: PPUSH
2302: CALL 2764 0 3
2306: DIFF
2307: ST_TO_ADDR
2308: GO 2255
2310: POP
2311: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2312: LD_INT 22
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 34
2324: PUSH
2325: LD_INT 31
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: IFFALSE 2543
// begin for j := Count ( vehicles ) downto 1 do
2342: LD_ADDR_VAR 0 7
2346: PUSH
2347: DOUBLE
2348: LD_VAR 0 9
2352: PPUSH
2353: CALL 17674 0 1
2357: INC
2358: ST_TO_ADDR
2359: LD_INT 1
2361: PUSH
2362: FOR_DOWNTO
2363: IFFALSE 2541
// begin i := vehicles [ j ] ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 9
2374: PUSH
2375: LD_VAR 0 7
2379: ARRAY
2380: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2381: LD_VAR 0 2
2385: PUSH
2386: LD_INT 3
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: IFFALSE 2539
// begin uc_side := 2 ;
2395: LD_ADDR_OWVAR 20
2399: PUSH
2400: LD_INT 2
2402: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2403: LD_ADDR_OWVAR 21
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 5
2415: ARRAY
2416: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 2
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 6
2460: ARRAY
2461: PPUSH
2462: CALL 20412 0 5
// veh := CreateVehicle ;
2466: LD_ADDR_VAR 0 8
2470: PUSH
2471: CALL_OW 45
2475: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2488: LD_VAR 0 8
2492: PPUSH
2493: LD_INT 7
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2503: LD_ADDR_VAR 0 9
2507: PUSH
2508: LD_VAR 0 9
2512: PPUSH
2513: LD_VAR 0 7
2517: PPUSH
2518: CALL_OW 3
2522: ST_TO_ADDR
// Connect ( veh ) ;
2523: LD_VAR 0 8
2527: PPUSH
2528: CALL 23880 0 1
// wait ( 0 0$0.3 ) ;
2532: LD_INT 10
2534: PPUSH
2535: CALL_OW 67
// end ; end ;
2539: GO 2362
2541: POP
2542: POP
// end ; vehicles := LoadVariable ( 09_otherVehicles , [ ] ) ;
2543: LD_ADDR_VAR 0 9
2547: PUSH
2548: LD_STRING 09_otherVehicles
2550: PPUSH
2551: EMPTY
2552: PPUSH
2553: CALL_OW 30
2557: ST_TO_ADDR
// if vehicles then
2558: LD_VAR 0 9
2562: IFFALSE 2759
// begin for i in vehicles do
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_VAR 0 9
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2757
// begin uc_side := 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 5
2597: ARRAY
2598: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 2
2612: PUSH
2613: LD_INT 2
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 2
2621: PUSH
2622: LD_INT 3
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 4
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 6
2642: ARRAY
2643: PPUSH
2644: CALL 20412 0 5
// veh := CreateVehicle ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2658: LD_VAR 0 8
2662: PPUSH
2663: LD_INT 5
2665: PPUSH
2666: CALL_OW 233
// if i [ 7 ] then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 7
2677: ARRAY
2678: IFFALSE 2698
// SetMark ( veh , i [ 7 ] ) ;
2680: LD_VAR 0 8
2684: PPUSH
2685: LD_VAR 0 2
2689: PUSH
2690: LD_INT 7
2692: ARRAY
2693: PPUSH
2694: CALL_OW 242
// PlaceUnitXYD ( veh , i [ 8 ] , i [ 9 ] , i [ 10 ] , false ) ;
2698: LD_VAR 0 8
2702: PPUSH
2703: LD_VAR 0 2
2707: PUSH
2708: LD_INT 8
2710: ARRAY
2711: PPUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 9
2719: ARRAY
2720: PPUSH
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 10
2728: ARRAY
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: CALL 55423 0 5
// SetFuel ( veh , i [ 6 ] ) ;
2737: LD_VAR 0 8
2741: PPUSH
2742: LD_VAR 0 2
2746: PUSH
2747: LD_INT 6
2749: ARRAY
2750: PPUSH
2751: CALL_OW 240
// end ;
2755: GO 2574
2757: POP
2758: POP
// end ; end ;
2759: LD_VAR 0 1
2763: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
// for i in vehicles do
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3016
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 8
2789: ARRAY
2790: PUSH
2791: LD_VAR 0 2
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 5
2801: PUSH
2802: LD_INT 3
2804: ARRAY
2805: PUSH
2806: LD_INT 1
2808: EQUAL
2809: AND
2810: IFFALSE 3014
// begin result := i ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_VAR 0 5
2821: ST_TO_ADDR
// uc_side := 2 ;
2822: LD_ADDR_OWVAR 20
2826: PUSH
2827: LD_INT 2
2829: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2830: LD_ADDR_OWVAR 21
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 5
2842: ARRAY
2843: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 1
2851: ARRAY
2852: PPUSH
2853: LD_VAR 0 5
2857: PUSH
2858: LD_INT 2
2860: ARRAY
2861: PPUSH
2862: LD_VAR 0 5
2866: PUSH
2867: LD_INT 3
2869: ARRAY
2870: PPUSH
2871: LD_VAR 0 5
2875: PUSH
2876: LD_INT 4
2878: ARRAY
2879: PPUSH
2880: LD_VAR 0 5
2884: PUSH
2885: LD_INT 6
2887: ARRAY
2888: PPUSH
2889: CALL 20412 0 5
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2903: LD_VAR 0 6
2907: PPUSH
2908: LD_INT 5
2910: PPUSH
2911: CALL_OW 233
// if i [ 7 ] < 0 then
2915: LD_VAR 0 5
2919: PUSH
2920: LD_INT 7
2922: ARRAY
2923: PUSH
2924: LD_INT 0
2926: LESS
2927: IFFALSE 2947
// SetMark ( veh , i [ 7 ] ) ;
2929: LD_VAR 0 6
2933: PPUSH
2934: LD_VAR 0 5
2938: PUSH
2939: LD_INT 7
2941: ARRAY
2942: PPUSH
2943: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2947: LD_VAR 0 6
2951: PPUSH
2952: LD_INT 7
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL 52188 0 3
2962: NOT
2963: IFFALSE 2996
// begin SetDir ( unit , 5 ) ;
2965: LD_VAR 0 1
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2977: LD_VAR 0 1
2981: PPUSH
2982: LD_INT 8
2984: PPUSH
2985: LD_INT 0
2987: PPUSH
2988: CALL_OW 49
// exit ;
2992: POP
2993: POP
2994: GO 3045
// end ; PlaceHumanInUnit ( unit , veh ) ;
2996: LD_VAR 0 1
3000: PPUSH
3001: LD_VAR 0 6
3005: PPUSH
3006: CALL_OW 52
// exit ;
3010: POP
3011: POP
3012: GO 3045
// end ;
3014: GO 2779
3016: POP
3017: POP
// SetDir ( unit , 5 ) ;
3018: LD_VAR 0 1
3022: PPUSH
3023: LD_INT 5
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
3030: LD_VAR 0 1
3034: PPUSH
3035: LD_INT 8
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 49
// end ; end_of_file
3045: LD_VAR 0 4
3049: RET
// export function PrepareRussian ; begin
3050: LD_INT 0
3052: PPUSH
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
3053: LD_INT 48
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: LD_INT 2
3061: PPUSH
3062: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
3066: LD_INT 49
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 2
3074: PPUSH
3075: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
3079: LD_INT 50
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
3092: LD_INT 51
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3105: LD_INT 57
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 2
3113: PPUSH
3114: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
3118: LD_INT 48
3120: PPUSH
3121: LD_INT 6
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
3131: LD_INT 49
3133: PPUSH
3134: LD_INT 6
3136: PPUSH
3137: LD_INT 2
3139: PPUSH
3140: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
3144: LD_INT 50
3146: PPUSH
3147: LD_INT 6
3149: PPUSH
3150: LD_INT 2
3152: PPUSH
3153: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
3157: LD_INT 51
3159: PPUSH
3160: LD_INT 6
3162: PPUSH
3163: LD_INT 2
3165: PPUSH
3166: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3170: LD_INT 57
3172: PPUSH
3173: LD_INT 6
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: CALL_OW 322
// if Difficulty >= 2 then
3183: LD_OWVAR 67
3187: PUSH
3188: LD_INT 2
3190: GREATEREQUAL
3191: IFFALSE 3271
// begin SetTech ( tech_Weap2 , 3 , state_researched ) ;
3193: LD_INT 52
3195: PPUSH
3196: LD_INT 3
3198: PPUSH
3199: LD_INT 2
3201: PPUSH
3202: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3206: LD_INT 58
3208: PPUSH
3209: LD_INT 3
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3219: LD_INT 63
3221: PPUSH
3222: LD_INT 3
3224: PPUSH
3225: LD_INT 2
3227: PPUSH
3228: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3232: LD_INT 52
3234: PPUSH
3235: LD_INT 6
3237: PPUSH
3238: LD_INT 2
3240: PPUSH
3241: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3245: LD_INT 58
3247: PPUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
3258: LD_INT 63
3260: PPUSH
3261: LD_INT 6
3263: PPUSH
3264: LD_INT 2
3266: PPUSH
3267: CALL_OW 322
// end ; if Difficulty > 2 then
3271: LD_OWVAR 67
3275: PUSH
3276: LD_INT 2
3278: GREATER
3279: IFFALSE 3359
// begin SetTech ( tech_Weap3 , 3 , state_researched ) ;
3281: LD_INT 53
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: LD_INT 2
3289: PPUSH
3290: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3294: LD_INT 59
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_INT 2
3302: PPUSH
3303: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3307: LD_INT 64
3309: PPUSH
3310: LD_INT 3
3312: PPUSH
3313: LD_INT 2
3315: PPUSH
3316: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
3320: LD_INT 53
3322: PPUSH
3323: LD_INT 6
3325: PPUSH
3326: LD_INT 2
3328: PPUSH
3329: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
3333: LD_INT 59
3335: PPUSH
3336: LD_INT 6
3338: PPUSH
3339: LD_INT 2
3341: PPUSH
3342: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
3346: LD_INT 64
3348: PPUSH
3349: LD_INT 6
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 322
// end ; end ;
3359: LD_VAR 0 1
3363: RET
// export ruForces , ruConstructList , ruTanks ; export function PrepareExtraRussianBase ; var i , j , tmp , un , side , skill , b ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
3370: PPUSH
3371: PPUSH
3372: PPUSH
3373: PPUSH
// side := 6 ;
3374: LD_ADDR_VAR 0 6
3378: PUSH
3379: LD_INT 6
3381: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
3382: LD_ADDR_VAR 0 7
3386: PUSH
3387: LD_INT 7
3389: PUSH
3390: LD_INT 8
3392: PUSH
3393: LD_INT 9
3395: PUSH
3396: LD_INT 10
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_OWVAR 67
3409: ARRAY
3410: ST_TO_ADDR
// ruForces := [ ] ;
3411: LD_ADDR_EXP 34
3415: PUSH
3416: EMPTY
3417: ST_TO_ADDR
// ruConstructList := [ ] ;
3418: LD_ADDR_EXP 35
3422: PUSH
3423: EMPTY
3424: ST_TO_ADDR
// ruTanks := [ ] ;
3425: LD_ADDR_EXP 36
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// tmp := [ [ b_warehouse , 107 , 149 , 4 ] , [ b_oil_mine , 115 , 150 , 4 ] , [ b_factory , 101 , 160 , 0 ] , [ b_ext_computer , 97 , 156 , 2 ] , [ b_ext_siberium , 98 , 160 , 1 ] , [ b_ext_noncombat , 101 , 164 , 0 ] , [ b_ext_gun , 104 , 163 , 5 ] , [ b_ext_rocket , 105 , 160 , 4 ] , [ b_siberite_mine , 128 , 132 , 0 ] , [ b_lab_full , 94 , 142 , 1 , b_lab_weapon , b_lab_spacetime ] , [ b_oil_power , 93 , 137 , 0 ] , [ b_oil_power , 111 , 157 , 0 ] , [ b_oil_power , 109 , 158 , 0 ] , [ b_oil_power , 121 , 150 , 0 ] , [ b_siberite_power , 118 , 151 , 0 ] , [ b_barracks , 97 , 133 , 2 ] , [ b_barracks , 117 , 143 , 4 ] , [ b_turret , 100 , 132 , 2 ] , [ b_turret , 130 , 159 , 4 ] , [ b_turret , 131 , 155 , 4 ] , [ b_turret , 90 , 133 , 2 ] , [ b_turret , 70 , 135 , 3 ] ] ;
3432: LD_ADDR_VAR 0 4
3436: PUSH
3437: LD_INT 1
3439: PUSH
3440: LD_INT 107
3442: PUSH
3443: LD_INT 149
3445: PUSH
3446: LD_INT 4
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 29
3457: PUSH
3458: LD_INT 115
3460: PUSH
3461: LD_INT 150
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 3
3475: PUSH
3476: LD_INT 101
3478: PUSH
3479: LD_INT 160
3481: PUSH
3482: LD_INT 0
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 24
3493: PUSH
3494: LD_INT 97
3496: PUSH
3497: LD_INT 156
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 21
3511: PUSH
3512: LD_INT 98
3514: PUSH
3515: LD_INT 160
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_INT 19
3529: PUSH
3530: LD_INT 101
3532: PUSH
3533: LD_INT 164
3535: PUSH
3536: LD_INT 0
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: PUSH
3545: LD_INT 17
3547: PUSH
3548: LD_INT 104
3550: PUSH
3551: LD_INT 163
3553: PUSH
3554: LD_INT 5
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 18
3565: PUSH
3566: LD_INT 105
3568: PUSH
3569: LD_INT 160
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 30
3583: PUSH
3584: LD_INT 128
3586: PUSH
3587: LD_INT 132
3589: PUSH
3590: LD_INT 0
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 8
3601: PUSH
3602: LD_INT 94
3604: PUSH
3605: LD_INT 142
3607: PUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 10
3613: PUSH
3614: LD_INT 14
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 26
3627: PUSH
3628: LD_INT 93
3630: PUSH
3631: LD_INT 137
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 26
3645: PUSH
3646: LD_INT 111
3648: PUSH
3649: LD_INT 157
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 26
3663: PUSH
3664: LD_INT 109
3666: PUSH
3667: LD_INT 158
3669: PUSH
3670: LD_INT 0
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PUSH
3679: LD_INT 26
3681: PUSH
3682: LD_INT 121
3684: PUSH
3685: LD_INT 150
3687: PUSH
3688: LD_INT 0
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 28
3699: PUSH
3700: LD_INT 118
3702: PUSH
3703: LD_INT 151
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 5
3717: PUSH
3718: LD_INT 97
3720: PUSH
3721: LD_INT 133
3723: PUSH
3724: LD_INT 2
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 5
3735: PUSH
3736: LD_INT 117
3738: PUSH
3739: LD_INT 143
3741: PUSH
3742: LD_INT 4
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 33
3753: PUSH
3754: LD_INT 100
3756: PUSH
3757: LD_INT 132
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 33
3771: PUSH
3772: LD_INT 130
3774: PUSH
3775: LD_INT 159
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 33
3789: PUSH
3790: LD_INT 131
3792: PUSH
3793: LD_INT 155
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 33
3807: PUSH
3808: LD_INT 90
3810: PUSH
3811: LD_INT 133
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 33
3825: PUSH
3826: LD_INT 70
3828: PUSH
3829: LD_INT 135
3831: PUSH
3832: LD_INT 3
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: ST_TO_ADDR
// uc_side := side ;
3865: LD_ADDR_OWVAR 20
3869: PUSH
3870: LD_VAR 0 6
3874: ST_TO_ADDR
// uc_nation := nation_russian ;
3875: LD_ADDR_OWVAR 21
3879: PUSH
3880: LD_INT 3
3882: ST_TO_ADDR
// for i in tmp do
3883: LD_ADDR_VAR 0 2
3887: PUSH
3888: LD_VAR 0 4
3892: PUSH
3893: FOR_IN
3894: IFFALSE 4032
// begin InitBc ;
3896: CALL_OW 21
// bc_type := i [ 1 ] ;
3900: LD_ADDR_OWVAR 42
3904: PUSH
3905: LD_VAR 0 2
3909: PUSH
3910: LD_INT 1
3912: ARRAY
3913: ST_TO_ADDR
// bc_level := 6 ;
3914: LD_ADDR_OWVAR 43
3918: PUSH
3919: LD_INT 6
3921: ST_TO_ADDR
// if i > 4 then
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 4
3929: GREATER
3930: IFFALSE 3960
// begin bc_kind1 := i [ 5 ] ;
3932: LD_ADDR_OWVAR 44
3936: PUSH
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 5
3944: ARRAY
3945: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
3946: LD_ADDR_OWVAR 45
3950: PUSH
3951: LD_VAR 0 2
3955: PUSH
3956: LD_INT 6
3958: ARRAY
3959: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3960: LD_ADDR_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 2
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 3
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 4
3990: ARRAY
3991: PPUSH
3992: CALL_OW 47
3996: ST_TO_ADDR
// if i [ 1 ] in [ b_bunker , b_turret ] then
3997: LD_VAR 0 2
4001: PUSH
4002: LD_INT 1
4004: ARRAY
4005: PUSH
4006: LD_INT 32
4008: PUSH
4009: LD_INT 33
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: IN
4016: IFFALSE 4030
// PlaceWeaponTurret ( b , ru_rocket_launcher ) ;
4018: LD_VAR 0 8
4022: PPUSH
4023: LD_INT 45
4025: PPUSH
4026: CALL_OW 431
// end ;
4030: GO 3893
4032: POP
4033: POP
// InitHC_All ( ) ;
4034: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_VAR 0 6
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 30
4057: PUSH
4058: LD_INT 5
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PPUSH
4069: CALL_OW 69
4073: ST_TO_ADDR
// for i in tmp do
4074: LD_ADDR_VAR 0 2
4078: PUSH
4079: LD_VAR 0 4
4083: PUSH
4084: FOR_IN
4085: IFFALSE 4212
// begin for j := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: DOUBLE
4093: LD_INT 1
4095: DEC
4096: ST_TO_ADDR
4097: LD_INT 2
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: LD_INT 4
4105: PUSH
4106: LD_INT 4
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: PUSH
4115: LD_OWVAR 67
4119: ARRAY
4120: PUSH
4121: FOR_TO
4122: IFFALSE 4208
// begin PrepareSoldier ( false , skill ) ;
4124: LD_INT 0
4126: PPUSH
4127: LD_VAR 0 7
4131: PPUSH
4132: CALL_OW 381
// un := CreateHuman ;
4136: LD_ADDR_VAR 0 5
4140: PUSH
4141: CALL_OW 44
4145: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4146: LD_ADDR_EXP 34
4150: PUSH
4151: LD_EXP 34
4155: PPUSH
4156: LD_VAR 0 5
4160: PPUSH
4161: CALL 53283 0 2
4165: ST_TO_ADDR
// if j mod 2 = 0 then
4166: LD_VAR 0 3
4170: PUSH
4171: LD_INT 2
4173: MOD
4174: PUSH
4175: LD_INT 0
4177: EQUAL
4178: IFFALSE 4192
// SetClass ( un , class_bazooker ) ;
4180: LD_VAR 0 5
4184: PPUSH
4185: LD_INT 9
4187: PPUSH
4188: CALL_OW 336
// PlaceHumanInUnit ( un , i ) ;
4192: LD_VAR 0 5
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: CALL_OW 52
// end ;
4206: GO 4121
4208: POP
4209: POP
// end ;
4210: GO 4084
4212: POP
4213: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
4214: LD_ADDR_VAR 0 4
4218: PUSH
4219: LD_INT 22
4221: PUSH
4222: LD_VAR 0 6
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 30
4233: PUSH
4234: LD_INT 1
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: ST_TO_ADDR
// for i in tmp do
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_VAR 0 4
4259: PUSH
4260: FOR_IN
4261: IFFALSE 4485
// begin for j := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
4263: LD_ADDR_VAR 0 3
4267: PUSH
4268: DOUBLE
4269: LD_INT 1
4271: DEC
4272: ST_TO_ADDR
4273: LD_INT 3
4275: PUSH
4276: LD_INT 3
4278: PUSH
4279: LD_INT 4
4281: PUSH
4282: LD_INT 4
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: PUSH
4297: FOR_TO
4298: IFFALSE 4358
// begin PrepareEngineer ( false , skill ) ;
4300: LD_INT 0
4302: PPUSH
4303: LD_VAR 0 7
4307: PPUSH
4308: CALL_OW 382
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 5
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4322: LD_ADDR_EXP 34
4326: PUSH
4327: LD_EXP 34
4331: PPUSH
4332: LD_VAR 0 5
4336: PPUSH
4337: CALL 53283 0 2
4341: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4342: LD_VAR 0 5
4346: PPUSH
4347: LD_VAR 0 2
4351: PPUSH
4352: CALL_OW 52
// end ;
4356: GO 4297
4358: POP
4359: POP
// SetResourceType ( GetBase ( i ) , mat_cans , [ 550 , 600 , 780 , 820 ] [ Difficulty ] ) ;
4360: LD_VAR 0 2
4364: PPUSH
4365: CALL_OW 274
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_INT 550
4375: PUSH
4376: LD_INT 600
4378: PUSH
4379: LD_INT 780
4381: PUSH
4382: LD_INT 820
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_OWVAR 67
4395: ARRAY
4396: PPUSH
4397: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , [ 160 , 160 , 210 , 240 ] [ Difficulty ] ) ;
4401: LD_VAR 0 2
4405: PPUSH
4406: CALL_OW 274
4410: PPUSH
4411: LD_INT 2
4413: PPUSH
4414: LD_INT 160
4416: PUSH
4417: LD_INT 160
4419: PUSH
4420: LD_INT 210
4422: PUSH
4423: LD_INT 240
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_OWVAR 67
4436: ARRAY
4437: PPUSH
4438: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , [ 60 , 60 , 70 , 80 ] [ Difficulty ] ) ;
4442: LD_VAR 0 2
4446: PPUSH
4447: CALL_OW 274
4451: PPUSH
4452: LD_INT 3
4454: PPUSH
4455: LD_INT 60
4457: PUSH
4458: LD_INT 60
4460: PUSH
4461: LD_INT 70
4463: PUSH
4464: LD_INT 80
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: PPUSH
4479: CALL_OW 277
// end ;
4483: GO 4260
4485: POP
4486: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
4487: LD_ADDR_VAR 0 4
4491: PUSH
4492: LD_INT 22
4494: PUSH
4495: LD_VAR 0 6
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 30
4506: PUSH
4507: LD_INT 3
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: ST_TO_ADDR
// for i in tmp do
4523: LD_ADDR_VAR 0 2
4527: PUSH
4528: LD_VAR 0 4
4532: PUSH
4533: FOR_IN
4534: IFFALSE 4629
// begin for j := 1 to 6 do
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: DOUBLE
4542: LD_INT 1
4544: DEC
4545: ST_TO_ADDR
4546: LD_INT 6
4548: PUSH
4549: FOR_TO
4550: IFFALSE 4625
// begin PrepareMechanic ( false , skill ) ;
4552: LD_INT 0
4554: PPUSH
4555: LD_VAR 0 7
4559: PPUSH
4560: CALL_OW 383
// hc_attr := [ 12 , 12 ] ;
4564: LD_ADDR_OWVAR 29
4568: PUSH
4569: LD_INT 12
4571: PUSH
4572: LD_INT 12
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: ST_TO_ADDR
// un := CreateHuman ;
4579: LD_ADDR_VAR 0 5
4583: PUSH
4584: CALL_OW 44
4588: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4589: LD_ADDR_EXP 34
4593: PUSH
4594: LD_EXP 34
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: CALL 53283 0 2
4608: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4609: LD_VAR 0 5
4613: PPUSH
4614: LD_VAR 0 2
4618: PPUSH
4619: CALL_OW 52
// end ;
4623: GO 4549
4625: POP
4626: POP
// end ;
4627: GO 4533
4629: POP
4630: POP
// InitHC_All ( ) ;
4631: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
4635: LD_ADDR_VAR 0 4
4639: PUSH
4640: LD_INT 22
4642: PUSH
4643: LD_VAR 0 6
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 8
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PPUSH
4666: CALL_OW 69
4670: ST_TO_ADDR
// for i in tmp do
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_VAR 0 4
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4762
// begin for j := 1 to 2 do
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: DOUBLE
4690: LD_INT 1
4692: DEC
4693: ST_TO_ADDR
4694: LD_INT 2
4696: PUSH
4697: FOR_TO
4698: IFFALSE 4758
// begin PrepareScientist ( false , skill ) ;
4700: LD_INT 0
4702: PPUSH
4703: LD_VAR 0 7
4707: PPUSH
4708: CALL_OW 384
// un := CreateHuman ;
4712: LD_ADDR_VAR 0 5
4716: PUSH
4717: CALL_OW 44
4721: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4722: LD_ADDR_EXP 34
4726: PUSH
4727: LD_EXP 34
4731: PPUSH
4732: LD_VAR 0 5
4736: PPUSH
4737: CALL 53283 0 2
4741: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4742: LD_VAR 0 5
4746: PPUSH
4747: LD_VAR 0 2
4751: PPUSH
4752: CALL_OW 52
// end ;
4756: GO 4697
4758: POP
4759: POP
// end ;
4760: GO 4681
4762: POP
4763: POP
// end ;
4764: LD_VAR 0 1
4768: RET
// function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
4769: LD_INT 0
4771: PPUSH
4772: PPUSH
4773: PPUSH
4774: PPUSH
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// result := [ ] ;
4781: LD_ADDR_VAR 0 3
4785: PUSH
4786: EMPTY
4787: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
4788: LD_ADDR_VAR 0 8
4792: PUSH
4793: LD_INT 7
4795: PUSH
4796: LD_INT 8
4798: PUSH
4799: LD_INT 9
4801: PUSH
4802: LD_INT 10
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_OWVAR 67
4815: ARRAY
4816: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
4817: LD_ADDR_VAR 0 9
4821: PUSH
4822: LD_INT 15
4824: PUSH
4825: LD_INT 17
4827: PUSH
4828: LD_INT 19
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_VAR 0 1
4840: ARRAY
4841: ST_TO_ADDR
// parking := [ ruGatPoint1Area , ruGatPoint2Area , ruGatPoint3Area ] [ spot ] ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_INT 16
4849: PUSH
4850: LD_INT 18
4852: PUSH
4853: LD_INT 20
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: LD_VAR 0 1
4865: ARRAY
4866: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
4867: LD_ADDR_VAR 0 11
4871: PUSH
4872: LD_INT 5
4874: PUSH
4875: LD_INT 0
4877: PUSH
4878: LD_INT 2
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: ARRAY
4891: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) then
4892: LD_VAR 0 9
4896: PPUSH
4897: LD_INT 2
4899: PUSH
4900: LD_INT 22
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 22
4912: PUSH
4913: LD_INT 3
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: IFFALSE 4990
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) do
4931: LD_ADDR_VAR 0 4
4935: PUSH
4936: LD_VAR 0 9
4940: PPUSH
4941: LD_INT 2
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: PPUSH
4969: CALL_OW 70
4973: PUSH
4974: FOR_IN
4975: IFFALSE 4988
// RemoveUnit ( i ) ;
4977: LD_VAR 0 4
4981: PPUSH
4982: CALL_OW 64
4986: GO 4974
4988: POP
4989: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
4990: LD_VAR 0 9
4994: PPUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 21
5000: PUSH
5001: LD_INT 1
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 70
5030: IFFALSE 5094
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: LD_VAR 0 9
5041: PPUSH
5042: LD_INT 3
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: LD_INT 22
5061: PUSH
5062: LD_INT 2
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: PUSH
5078: FOR_IN
5079: IFFALSE 5092
// KillUnit ( i ) ;
5081: LD_VAR 0 4
5085: PPUSH
5086: CALL_OW 66
5090: GO 5078
5092: POP
5093: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
5094: LD_VAR 0 9
5098: PPUSH
5099: LD_INT 21
5101: PUSH
5102: LD_INT 1
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5190
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
5129: LD_ADDR_VAR 0 4
5133: PUSH
5134: LD_VAR 0 9
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 22
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5188
// ComMoveXY ( i , 91 , 56 ) ;
5171: LD_VAR 0 4
5175: PPUSH
5176: LD_INT 91
5178: PPUSH
5179: LD_INT 56
5181: PPUSH
5182: CALL_OW 111
5186: GO 5168
5188: POP
5189: POP
// repeat wait ( 0 0$1 ) ;
5190: LD_INT 35
5192: PPUSH
5193: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5197: LD_VAR 0 9
5201: PPUSH
5202: LD_INT 50
5204: PUSH
5205: EMPTY
5206: LIST
5207: PPUSH
5208: CALL_OW 70
5212: NOT
5213: IFFALSE 5190
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] + strength do
5215: LD_ADDR_VAR 0 4
5219: PUSH
5220: DOUBLE
5221: LD_INT 1
5223: DEC
5224: ST_TO_ADDR
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 5
5233: PUSH
5234: LD_INT 6
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: PUSH
5243: LD_OWVAR 67
5247: ARRAY
5248: PUSH
5249: LD_VAR 0 2
5253: PLUS
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5577
// begin uc_side := 3 ;
5258: LD_ADDR_OWVAR 20
5262: PUSH
5263: LD_INT 3
5265: ST_TO_ADDR
// uc_nation := nation_russian ;
5266: LD_ADDR_OWVAR 21
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
5274: LD_ADDR_VAR 0 12
5278: PUSH
5279: LD_INT 1
5281: PUSH
5282: LD_INT 3
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 12
5307: ARRAY
5308: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
5309: LD_INT 22
5311: PUSH
5312: LD_INT 24
5314: PUSH
5315: LD_INT 23
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_VAR 0 4
5327: PUSH
5328: LD_INT 3
5330: MOD
5331: PUSH
5332: LD_INT 1
5334: PLUS
5335: ARRAY
5336: PPUSH
5337: LD_INT 3
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: LD_INT 1
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: CALL_OW 12
5357: ARRAY
5358: PPUSH
5359: LD_VAR 0 12
5363: PPUSH
5364: LD_INT 45
5366: PUSH
5367: LD_INT 46
5369: PUSH
5370: LD_INT 43
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: LD_VAR 0 4
5382: PUSH
5383: LD_INT 3
5385: MOD
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: ARRAY
5391: PPUSH
5392: LD_INT 100
5394: PPUSH
5395: CALL 20412 0 5
// veh := CreateVehicle ;
5399: LD_ADDR_VAR 0 7
5403: PUSH
5404: CALL_OW 45
5408: ST_TO_ADDR
// SetDir ( veh , dir ) ;
5409: LD_VAR 0 7
5413: PPUSH
5414: LD_VAR 0 11
5418: PPUSH
5419: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
5423: LD_VAR 0 7
5427: PPUSH
5428: LD_VAR 0 9
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: CALL_OW 49
// if control = control_manual then
5440: LD_VAR 0 12
5444: PUSH
5445: LD_INT 1
5447: EQUAL
5448: IFFALSE 5516
// begin uc_side := 3 ;
5450: LD_ADDR_OWVAR 20
5454: PUSH
5455: LD_INT 3
5457: ST_TO_ADDR
// uc_nation := nation_russian ;
5458: LD_ADDR_OWVAR 21
5462: PUSH
5463: LD_INT 3
5465: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5466: LD_INT 0
5468: PPUSH
5469: LD_VAR 0 8
5473: PPUSH
5474: CALL_OW 383
// un := CreateHuman ;
5478: LD_ADDR_VAR 0 6
5482: PUSH
5483: CALL_OW 44
5487: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5488: LD_VAR 0 6
5492: PPUSH
5493: LD_VAR 0 7
5497: PPUSH
5498: CALL_OW 52
// SetTag ( un , spot ) ;
5502: LD_VAR 0 6
5506: PPUSH
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 109
// end ; repeat ComMoveToArea ( veh , parking ) ;
5516: LD_VAR 0 7
5520: PPUSH
5521: LD_VAR 0 10
5525: PPUSH
5526: CALL_OW 113
// wait ( 0 0$3 ) ;
5530: LD_INT 105
5532: PPUSH
5533: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5537: LD_VAR 0 9
5541: PPUSH
5542: LD_INT 50
5544: PUSH
5545: EMPTY
5546: LIST
5547: PPUSH
5548: CALL_OW 70
5552: NOT
5553: IFFALSE 5516
// result := Join ( result , veh ) ;
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_VAR 0 3
5564: PPUSH
5565: LD_VAR 0 7
5569: PPUSH
5570: CALL 53283 0 2
5574: ST_TO_ADDR
// end ;
5575: GO 5255
5577: POP
5578: POP
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
5579: LD_ADDR_VAR 0 4
5583: PUSH
5584: DOUBLE
5585: LD_INT 1
5587: DEC
5588: ST_TO_ADDR
5589: LD_INT 2
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: LD_INT 3
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: PUSH
5607: LD_OWVAR 67
5611: ARRAY
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5784
// begin uc_side := 3 ;
5616: LD_ADDR_OWVAR 20
5620: PUSH
5621: LD_INT 3
5623: ST_TO_ADDR
// uc_nation := nation_russian ;
5624: LD_ADDR_OWVAR 21
5628: PUSH
5629: LD_INT 3
5631: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5632: LD_INT 0
5634: PPUSH
5635: LD_VAR 0 8
5639: PPUSH
5640: CALL_OW 381
// un := CreateHuman ;
5644: LD_ADDR_VAR 0 6
5648: PUSH
5649: CALL_OW 44
5653: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5654: LD_INT 30
5656: PUSH
5657: LD_INT 40
5659: PUSH
5660: LD_INT 50
5662: PUSH
5663: LD_INT 50
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_OWVAR 67
5676: ARRAY
5677: PPUSH
5678: CALL_OW 13
5682: IFFALSE 5696
// SetClass ( un , class_bazooker ) ;
5684: LD_VAR 0 6
5688: PPUSH
5689: LD_INT 9
5691: PPUSH
5692: CALL_OW 336
// SetDir ( un , dir ) ;
5696: LD_VAR 0 6
5700: PPUSH
5701: LD_VAR 0 11
5705: PPUSH
5706: CALL_OW 233
// SetTag ( un , spot ) ;
5710: LD_VAR 0 6
5714: PPUSH
5715: LD_VAR 0 1
5719: PPUSH
5720: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
5724: LD_VAR 0 6
5728: PPUSH
5729: LD_VAR 0 9
5733: PPUSH
5734: LD_INT 0
5736: PPUSH
5737: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
5741: LD_VAR 0 6
5745: PPUSH
5746: LD_VAR 0 10
5750: PPUSH
5751: CALL_OW 113
// wait ( 0 0$1 ) ;
5755: LD_INT 35
5757: PPUSH
5758: CALL_OW 67
// result := Join ( result , un ) ;
5762: LD_ADDR_VAR 0 3
5766: PUSH
5767: LD_VAR 0 3
5771: PPUSH
5772: LD_VAR 0 6
5776: PPUSH
5777: CALL 53283 0 2
5781: ST_TO_ADDR
// end ;
5782: GO 5613
5784: POP
5785: POP
// end ;
5786: LD_VAR 0 3
5790: RET
// function PrepareRussianExtraInfantry ; var i , un ; begin
5791: LD_INT 0
5793: PPUSH
5794: PPUSH
5795: PPUSH
// result := [ ] ;
5796: LD_ADDR_VAR 0 1
5800: PUSH
5801: EMPTY
5802: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty + 1 ] do
5803: LD_ADDR_VAR 0 2
5807: PUSH
5808: DOUBLE
5809: LD_INT 1
5811: DEC
5812: ST_TO_ADDR
5813: LD_INT 3
5815: PUSH
5816: LD_INT 3
5818: PUSH
5819: LD_INT 4
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: PUSH
5827: LD_OWVAR 67
5831: PUSH
5832: LD_INT 1
5834: PLUS
5835: ARRAY
5836: PUSH
5837: FOR_TO
5838: IFFALSE 5976
// begin uc_side := 3 ;
5840: LD_ADDR_OWVAR 20
5844: PUSH
5845: LD_INT 3
5847: ST_TO_ADDR
// uc_nation := nation_russian ;
5848: LD_ADDR_OWVAR 21
5852: PUSH
5853: LD_INT 3
5855: ST_TO_ADDR
// PrepareSoldier ( false , [ 7 , 8 , 9 ] [ Difficulty + 1 ] ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_INT 7
5861: PUSH
5862: LD_INT 8
5864: PUSH
5865: LD_INT 9
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: PUSH
5873: LD_OWVAR 67
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ARRAY
5882: PPUSH
5883: CALL_OW 381
// un := CreateHuman ;
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: CALL_OW 44
5896: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5897: LD_INT 30
5899: PUSH
5900: LD_INT 40
5902: PUSH
5903: LD_INT 50
5905: PUSH
5906: LD_INT 50
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: PUSH
5915: LD_OWVAR 67
5919: ARRAY
5920: PPUSH
5921: CALL_OW 13
5925: IFFALSE 5939
// SetClass ( un , class_bazooker ) ;
5927: LD_VAR 0 3
5931: PPUSH
5932: LD_INT 9
5934: PPUSH
5935: CALL_OW 336
// PlaceUnitArea ( un , extraSpawnAttackArea , false ) ;
5939: LD_VAR 0 3
5943: PPUSH
5944: LD_INT 25
5946: PPUSH
5947: LD_INT 0
5949: PPUSH
5950: CALL_OW 49
// result := Join ( result , un ) ;
5954: LD_ADDR_VAR 0 1
5958: PUSH
5959: LD_VAR 0 1
5963: PPUSH
5964: LD_VAR 0 3
5968: PPUSH
5969: CALL 53283 0 2
5973: ST_TO_ADDR
// end ;
5974: GO 5837
5976: POP
5977: POP
// end ;
5978: LD_VAR 0 1
5982: RET
// function SendBulldozer ; var un ; begin
5983: LD_INT 0
5985: PPUSH
5986: PPUSH
// uc_side := 3 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 3
5994: ST_TO_ADDR
// uc_nation := nation_russian ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 3
6002: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
6003: LD_INT 23
6005: PPUSH
6006: LD_INT 3
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: LD_INT 53
6014: PPUSH
6015: LD_INT 100
6017: PPUSH
6018: CALL 20412 0 5
// un := CreateVehicle ;
6022: LD_ADDR_VAR 0 2
6026: PUSH
6027: CALL_OW 45
6031: ST_TO_ADDR
// PlaceUnitXYD ( un , 7 , 8 , 1 , false ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_INT 7
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_INT 1
6045: PPUSH
6046: LD_INT 0
6048: PPUSH
6049: CALL 55423 0 5
// wait ( 0 0$1 ) ;
6053: LD_INT 35
6055: PPUSH
6056: CALL_OW 67
// CutTreeInArea ( un , cutTreeWArea ) ;
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_INT 24
6067: PPUSH
6068: CALL 11529 0 2
// end ;
6072: LD_VAR 0 1
6076: RET
// every 0 0$3 trigger wave >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
6077: LD_EXP 11
6081: PUSH
6082: LD_INT 4
6084: PUSH
6085: LD_INT 5
6087: PUSH
6088: LD_INT 6
6090: PUSH
6091: LD_INT 7
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: LD_OWVAR 67
6104: ARRAY
6105: GREATEREQUAL
6106: IFFALSE 6160
6108: GO 6110
6110: DISABLE
// begin repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 ;
6118: LD_INT 22
6120: PUSH
6121: LD_INT 6
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 21
6130: PUSH
6131: LD_INT 1
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PPUSH
6142: CALL_OW 69
6146: PUSH
6147: LD_INT 0
6149: EQUAL
6150: IFFALSE 6111
// ruDefeated := true ;
6152: LD_ADDR_EXP 10
6156: PUSH
6157: LD_INT 1
6159: ST_TO_ADDR
// end ;
6160: END
// every 6 6$20 + 4 4$00 trigger wave < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do var i , e , attackers , extraAttackers , spot , extraSpot , paths , enemy ;
6161: LD_EXP 11
6165: PUSH
6166: LD_INT 4
6168: PUSH
6169: LD_INT 5
6171: PUSH
6172: LD_INT 6
6174: PUSH
6175: LD_INT 7
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_OWVAR 67
6188: ARRAY
6189: LESS
6190: IFFALSE 7293
6192: GO 6194
6194: DISABLE
6195: LD_INT 0
6197: PPUSH
6198: PPUSH
6199: PPUSH
6200: PPUSH
6201: PPUSH
6202: PPUSH
6203: PPUSH
6204: PPUSH
// begin enable ;
6205: ENABLE
// attackers := [ ] ;
6206: LD_ADDR_VAR 0 3
6210: PUSH
6211: EMPTY
6212: ST_TO_ADDR
// extraAttackers := [ ] ;
6213: LD_ADDR_VAR 0 4
6217: PUSH
6218: EMPTY
6219: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 87 , 141 ] , [ 80 , 120 ] , [ 66 , 95 ] , [ 51 , 69 ] , [ 36 , 40 ] , [ 47 , 31 ] , [ 60 , 28 ] ] , [ [ 21 , 17 ] , [ 35 , 30 ] , [ 49 , 31 ] ] ] ;
6220: LD_ADDR_VAR 0 7
6224: PUSH
6225: LD_INT 176
6227: PUSH
6228: LD_INT 152
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 157
6237: PUSH
6238: LD_INT 122
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 146
6247: PUSH
6248: LD_INT 89
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 125
6257: PUSH
6258: LD_INT 46
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 87
6273: PUSH
6274: LD_INT 141
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 80
6283: PUSH
6284: LD_INT 120
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 66
6293: PUSH
6294: LD_INT 95
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 51
6303: PUSH
6304: LD_INT 69
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 36
6313: PUSH
6314: LD_INT 40
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 47
6323: PUSH
6324: LD_INT 31
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 60
6333: PUSH
6334: LD_INT 28
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 21
6352: PUSH
6353: LD_INT 17
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 35
6362: PUSH
6363: LD_INT 30
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 49
6372: PUSH
6373: LD_INT 31
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: ST_TO_ADDR
// wave := Inc ( wave ) ;
6390: LD_ADDR_EXP 11
6394: PUSH
6395: LD_EXP 11
6399: PPUSH
6400: CALL 54644 0 1
6404: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
6405: LD_ADDR_VAR 0 5
6409: PUSH
6410: LD_INT 1
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: CALL_OW 12
6420: ST_TO_ADDR
// if wave mod 2 = 0 then
6421: LD_EXP 11
6425: PUSH
6426: LD_INT 2
6428: MOD
6429: PUSH
6430: LD_INT 0
6432: EQUAL
6433: IFFALSE 6450
// strength := Inc ( strength ) ;
6435: LD_ADDR_EXP 12
6439: PUSH
6440: LD_EXP 12
6444: PPUSH
6445: CALL 54644 0 1
6449: ST_TO_ADDR
// if Count ( ListEnvironmentArea ( cutTreeWArea ) ) then
6450: LD_INT 24
6452: PPUSH
6453: CALL_OW 353
6457: PPUSH
6458: CALL 17674 0 1
6462: IFFALSE 6468
// SendBulldozer ;
6464: CALL 5983 0 0
// attackers := PrepareRussianAttack ( spot , strength ) ;
6468: LD_ADDR_VAR 0 3
6472: PUSH
6473: LD_VAR 0 5
6477: PPUSH
6478: LD_EXP 12
6482: PPUSH
6483: CALL 4769 0 2
6487: ST_TO_ADDR
// if wave + [ 2 , 2 , 3 , 3 ] [ Difficulty ] >= [ 6 , 7 , 8 , 9 ] [ Difficulty ] then
6488: LD_EXP 11
6492: PUSH
6493: LD_INT 2
6495: PUSH
6496: LD_INT 2
6498: PUSH
6499: LD_INT 3
6501: PUSH
6502: LD_INT 3
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: PUSH
6511: LD_OWVAR 67
6515: ARRAY
6516: PLUS
6517: PUSH
6518: LD_INT 6
6520: PUSH
6521: LD_INT 7
6523: PUSH
6524: LD_INT 8
6526: PUSH
6527: LD_INT 9
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: PUSH
6536: LD_OWVAR 67
6540: ARRAY
6541: GREATEREQUAL
6542: IFFALSE 6610
// begin extraSpot := spot - 1 ;
6544: LD_ADDR_VAR 0 6
6548: PUSH
6549: LD_VAR 0 5
6553: PUSH
6554: LD_INT 1
6556: MINUS
6557: ST_TO_ADDR
// if extraSpot < 1 then
6558: LD_VAR 0 6
6562: PUSH
6563: LD_INT 1
6565: LESS
6566: IFFALSE 6576
// extraSpot := 3 ;
6568: LD_ADDR_VAR 0 6
6572: PUSH
6573: LD_INT 3
6575: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , strength ) ;
6576: LD_ADDR_VAR 0 4
6580: PUSH
6581: LD_VAR 0 6
6585: PPUSH
6586: LD_EXP 12
6590: PPUSH
6591: CALL 4769 0 2
6595: ST_TO_ADDR
// if Difficulty > 1 then
6596: LD_OWVAR 67
6600: PUSH
6601: LD_INT 1
6603: GREATER
6604: IFFALSE 6610
// PrepareRussianExtraInfantry ;
6606: CALL 5791 0 0
// end ; repeat wait ( 0 0$2 ) ;
6610: LD_INT 70
6612: PPUSH
6613: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
6617: LD_ADDR_VAR 0 8
6621: PUSH
6622: LD_INT 22
6624: PUSH
6625: LD_INT 2
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PPUSH
6632: CALL_OW 69
6636: ST_TO_ADDR
// for i in attackers do
6637: LD_ADDR_VAR 0 1
6641: PUSH
6642: LD_VAR 0 3
6646: PUSH
6647: FOR_IN
6648: IFFALSE 6953
// begin if not IsOk ( i ) then
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 302
6659: NOT
6660: IFFALSE 6680
// begin attackers := attackers diff i ;
6662: LD_ADDR_VAR 0 3
6666: PUSH
6667: LD_VAR 0 3
6671: PUSH
6672: LD_VAR 0 1
6676: DIFF
6677: ST_TO_ADDR
// continue ;
6678: GO 6647
// end ; if GetType ( i ) = unit_vehicle then
6680: LD_VAR 0 1
6684: PPUSH
6685: CALL_OW 247
6689: PUSH
6690: LD_INT 2
6692: EQUAL
6693: IFFALSE 6717
// AgressiveMove ( i , paths [ spot ] ) else
6695: LD_VAR 0 1
6699: PPUSH
6700: LD_VAR 0 7
6704: PUSH
6705: LD_VAR 0 5
6709: ARRAY
6710: PPUSH
6711: CALL 55893 0 2
6715: GO 6951
// begin if GetClass ( i ) = class_bazooker then
6717: LD_VAR 0 1
6721: PPUSH
6722: CALL_OW 257
6726: PUSH
6727: LD_INT 9
6729: EQUAL
6730: IFFALSE 6927
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
6732: LD_VAR 0 1
6736: PPUSH
6737: LD_VAR 0 8
6741: PPUSH
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 74
6751: PPUSH
6752: CALL_OW 296
6756: PUSH
6757: LD_INT 12
6759: GREATER
6760: IFFALSE 6788
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
6762: LD_VAR 0 1
6766: PPUSH
6767: LD_VAR 0 8
6771: PPUSH
6772: LD_VAR 0 1
6776: PPUSH
6777: CALL_OW 74
6781: PPUSH
6782: CALL 57511 0 2
6786: GO 6925
// begin e := NearestUnitToUnit ( enemy , i ) ;
6788: LD_ADDR_VAR 0 2
6792: PUSH
6793: LD_VAR 0 8
6797: PPUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 74
6807: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
6808: LD_INT 1
6810: PPUSH
6811: LD_INT 3
6813: PPUSH
6814: CALL_OW 12
6818: PUSH
6819: LD_INT 1
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 6844
6827: POP
// ComAttackUnit ( i , e ) ; 2 :
6828: LD_VAR 0 1
6832: PPUSH
6833: LD_VAR 0 2
6837: PPUSH
6838: CALL_OW 115
6842: GO 6925
6844: LD_INT 2
6846: DOUBLE
6847: EQUAL
6848: IFTRUE 6852
6850: GO 6884
6852: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
6853: LD_VAR 0 1
6857: PPUSH
6858: LD_VAR 0 2
6862: PPUSH
6863: CALL_OW 250
6867: PPUSH
6868: LD_VAR 0 2
6872: PPUSH
6873: CALL_OW 251
6877: PPUSH
6878: CALL_OW 153
6882: GO 6925
6884: LD_INT 3
6886: DOUBLE
6887: EQUAL
6888: IFTRUE 6892
6890: GO 6924
6892: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
6893: LD_VAR 0 1
6897: PPUSH
6898: LD_VAR 0 2
6902: PPUSH
6903: CALL_OW 250
6907: PPUSH
6908: LD_VAR 0 2
6912: PPUSH
6913: CALL_OW 251
6917: PPUSH
6918: CALL_OW 154
6922: GO 6925
6924: POP
// end ; end else
6925: GO 6951
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6927: LD_VAR 0 1
6931: PPUSH
6932: LD_VAR 0 8
6936: PPUSH
6937: LD_VAR 0 1
6941: PPUSH
6942: CALL_OW 74
6946: PPUSH
6947: CALL 57511 0 2
// end ; end ;
6951: GO 6647
6953: POP
6954: POP
// if extraAttackers then
6955: LD_VAR 0 4
6959: IFFALSE 7279
// begin for i in extraAttackers do
6961: LD_ADDR_VAR 0 1
6965: PUSH
6966: LD_VAR 0 4
6970: PUSH
6971: FOR_IN
6972: IFFALSE 7277
// begin if not IsOk ( i ) then
6974: LD_VAR 0 1
6978: PPUSH
6979: CALL_OW 302
6983: NOT
6984: IFFALSE 7004
// begin extraAttackers := extraAttackers diff i ;
6986: LD_ADDR_VAR 0 4
6990: PUSH
6991: LD_VAR 0 4
6995: PUSH
6996: LD_VAR 0 1
7000: DIFF
7001: ST_TO_ADDR
// continue ;
7002: GO 6971
// end ; if GetType ( i ) = unit_vehicle then
7004: LD_VAR 0 1
7008: PPUSH
7009: CALL_OW 247
7013: PUSH
7014: LD_INT 2
7016: EQUAL
7017: IFFALSE 7041
// AgressiveMove ( i , paths [ extraSpot ] ) else
7019: LD_VAR 0 1
7023: PPUSH
7024: LD_VAR 0 7
7028: PUSH
7029: LD_VAR 0 6
7033: ARRAY
7034: PPUSH
7035: CALL 55893 0 2
7039: GO 7275
// begin if GetClass ( i ) = class_bazooker then
7041: LD_VAR 0 1
7045: PPUSH
7046: CALL_OW 257
7050: PUSH
7051: LD_INT 9
7053: EQUAL
7054: IFFALSE 7251
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
7056: LD_VAR 0 1
7060: PPUSH
7061: LD_VAR 0 8
7065: PPUSH
7066: LD_VAR 0 1
7070: PPUSH
7071: CALL_OW 74
7075: PPUSH
7076: CALL_OW 296
7080: PUSH
7081: LD_INT 12
7083: GREATER
7084: IFFALSE 7112
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
7086: LD_VAR 0 1
7090: PPUSH
7091: LD_VAR 0 8
7095: PPUSH
7096: LD_VAR 0 1
7100: PPUSH
7101: CALL_OW 74
7105: PPUSH
7106: CALL 57511 0 2
7110: GO 7249
// begin e := NearestUnitToUnit ( enemy , i ) ;
7112: LD_ADDR_VAR 0 2
7116: PUSH
7117: LD_VAR 0 8
7121: PPUSH
7122: LD_VAR 0 1
7126: PPUSH
7127: CALL_OW 74
7131: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
7132: LD_INT 1
7134: PPUSH
7135: LD_INT 3
7137: PPUSH
7138: CALL_OW 12
7142: PUSH
7143: LD_INT 1
7145: DOUBLE
7146: EQUAL
7147: IFTRUE 7151
7149: GO 7168
7151: POP
// ComAttackUnit ( i , e ) ; 2 :
7152: LD_VAR 0 1
7156: PPUSH
7157: LD_VAR 0 2
7161: PPUSH
7162: CALL_OW 115
7166: GO 7249
7168: LD_INT 2
7170: DOUBLE
7171: EQUAL
7172: IFTRUE 7176
7174: GO 7208
7176: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
7177: LD_VAR 0 1
7181: PPUSH
7182: LD_VAR 0 2
7186: PPUSH
7187: CALL_OW 250
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 251
7201: PPUSH
7202: CALL_OW 153
7206: GO 7249
7208: LD_INT 3
7210: DOUBLE
7211: EQUAL
7212: IFTRUE 7216
7214: GO 7248
7216: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
7217: LD_VAR 0 1
7221: PPUSH
7222: LD_VAR 0 2
7226: PPUSH
7227: CALL_OW 250
7231: PPUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: CALL_OW 251
7241: PPUSH
7242: CALL_OW 154
7246: GO 7249
7248: POP
// end ; end else
7249: GO 7275
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: LD_VAR 0 8
7260: PPUSH
7261: LD_VAR 0 1
7265: PPUSH
7266: CALL_OW 74
7270: PPUSH
7271: CALL 57511 0 2
// end ; end ;
7275: GO 6971
7277: POP
7278: POP
// end ; until not attackers and not extraAttackers ;
7279: LD_VAR 0 3
7283: NOT
7284: PUSH
7285: LD_VAR 0 4
7289: NOT
7290: AND
7291: IFFALSE 6610
// end ;
7293: PPOPN 8
7295: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] ] ) do var i , tmp , lab , eng , tag , un , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , ruBase , fac ;
7296: LD_INT 22
7298: PUSH
7299: LD_INT 6
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: LD_INT 50
7308: PUSH
7309: EMPTY
7310: LIST
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PPUSH
7316: CALL_OW 69
7320: IFFALSE 9009
7322: GO 7324
7324: DISABLE
7325: LD_INT 0
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
// begin enable ;
7342: ENABLE
// ruBase := FilterUnitsInARea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_warehouse ] , [ f_ok ] ] ) ;
7343: LD_ADDR_VAR 0 14
7347: PUSH
7348: LD_INT 26
7350: PPUSH
7351: LD_INT 22
7353: PUSH
7354: LD_INT 6
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 30
7363: PUSH
7364: LD_INT 1
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 50
7373: PUSH
7374: EMPTY
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: PPUSH
7382: CALL_OW 70
7386: ST_TO_ADDR
// if ruBase then
7387: LD_VAR 0 14
7391: IFFALSE 7407
// ruBase := ruBase [ 1 ] ;
7393: LD_ADDR_VAR 0 14
7397: PUSH
7398: LD_VAR 0 14
7402: PUSH
7403: LD_INT 1
7405: ARRAY
7406: ST_TO_ADDR
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7407: LD_ADDR_VAR 0 15
7411: PUSH
7412: LD_INT 26
7414: PPUSH
7415: LD_INT 22
7417: PUSH
7418: LD_INT 6
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 30
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 50
7437: PUSH
7438: EMPTY
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PPUSH
7446: CALL_OW 70
7450: ST_TO_ADDR
// if ruConstructList and fac then
7451: LD_EXP 35
7455: PUSH
7456: LD_VAR 0 15
7460: AND
7461: IFFALSE 7614
// if BuildingStatus ( fac [ 1 ] ) = bs_idle and CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
7463: LD_VAR 0 15
7467: PUSH
7468: LD_INT 1
7470: ARRAY
7471: PPUSH
7472: CALL_OW 461
7476: PUSH
7477: LD_INT 2
7479: EQUAL
7480: PUSH
7481: LD_VAR 0 15
7485: PUSH
7486: LD_INT 1
7488: ARRAY
7489: PPUSH
7490: LD_EXP 35
7494: PUSH
7495: LD_INT 1
7497: ARRAY
7498: PUSH
7499: LD_INT 1
7501: ARRAY
7502: PPUSH
7503: LD_EXP 35
7507: PUSH
7508: LD_INT 1
7510: ARRAY
7511: PUSH
7512: LD_INT 2
7514: ARRAY
7515: PPUSH
7516: LD_EXP 35
7520: PUSH
7521: LD_INT 1
7523: ARRAY
7524: PUSH
7525: LD_INT 3
7527: ARRAY
7528: PPUSH
7529: LD_EXP 35
7533: PUSH
7534: LD_INT 1
7536: ARRAY
7537: PUSH
7538: LD_INT 4
7540: ARRAY
7541: PPUSH
7542: CALL_OW 448
7546: AND
7547: IFFALSE 7614
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
7549: LD_VAR 0 15
7553: PUSH
7554: LD_INT 1
7556: ARRAY
7557: PPUSH
7558: LD_EXP 35
7562: PUSH
7563: LD_INT 1
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: LD_EXP 35
7575: PUSH
7576: LD_INT 1
7578: ARRAY
7579: PUSH
7580: LD_INT 2
7582: ARRAY
7583: PPUSH
7584: LD_EXP 35
7588: PUSH
7589: LD_INT 1
7591: ARRAY
7592: PUSH
7593: LD_INT 3
7595: ARRAY
7596: PPUSH
7597: LD_EXP 35
7601: PUSH
7602: LD_INT 1
7604: ARRAY
7605: PUSH
7606: LD_INT 4
7608: ARRAY
7609: PPUSH
7610: CALL_OW 125
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7614: LD_ADDR_VAR 0 2
7618: PUSH
7619: LD_INT 26
7621: PPUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 24
7637: PUSH
7638: LD_INT 1000
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PPUSH
7653: CALL_OW 70
7657: ST_TO_ADDR
// cr := GetListOfCratesInArea ( crates6Area ) ;
7658: LD_ADDR_VAR 0 8
7662: PUSH
7663: LD_INT 14
7665: PPUSH
7666: CALL_OW 435
7670: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7671: LD_ADDR_VAR 0 9
7675: PUSH
7676: LD_EXP 34
7680: PPUSH
7681: LD_INT 25
7683: PUSH
7684: LD_INT 4
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: LD_INT 50
7693: PUSH
7694: EMPTY
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PPUSH
7701: CALL_OW 72
7705: ST_TO_ADDR
// if sci then
7706: LD_VAR 0 9
7710: IFFALSE 7937
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
7712: LD_ADDR_VAR 0 11
7716: PUSH
7717: LD_EXP 34
7721: PPUSH
7722: LD_INT 95
7724: PUSH
7725: LD_INT 26
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PUSH
7732: LD_INT 120
7734: PUSH
7735: LD_INT 3
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 72
7750: ST_TO_ADDR
// lab := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7751: LD_ADDR_VAR 0 3
7755: PUSH
7756: LD_EXP 34
7760: PPUSH
7761: LD_INT 95
7763: PUSH
7764: LD_INT 26
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: LD_INT 2
7773: PUSH
7774: LD_INT 30
7776: PUSH
7777: LD_INT 6
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 30
7786: PUSH
7787: LD_INT 7
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 30
7796: PUSH
7797: LD_INT 8
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 72
7818: ST_TO_ADDR
// if hurtUnits then
7819: LD_VAR 0 11
7823: IFFALSE 7884
// begin for i in sci do
7825: LD_ADDR_VAR 0 1
7829: PUSH
7830: LD_VAR 0 9
7834: PUSH
7835: FOR_IN
7836: IFFALSE 7880
// if IsInUnit ( i ) then
7838: LD_VAR 0 1
7842: PPUSH
7843: CALL_OW 310
7847: IFFALSE 7860
// ComExitBuilding ( i ) else
7849: LD_VAR 0 1
7853: PPUSH
7854: CALL_OW 122
7858: GO 7878
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7860: LD_VAR 0 1
7864: PPUSH
7865: LD_VAR 0 11
7869: PUSH
7870: LD_INT 1
7872: ARRAY
7873: PPUSH
7874: CALL_OW 128
7878: GO 7835
7880: POP
7881: POP
// end else
7882: GO 7937
// if lab then
7884: LD_VAR 0 3
7888: IFFALSE 7937
// begin for i in sci do
7890: LD_ADDR_VAR 0 1
7894: PUSH
7895: LD_VAR 0 9
7899: PUSH
7900: FOR_IN
7901: IFFALSE 7935
// if not IsInUnit ( i ) then
7903: LD_VAR 0 1
7907: PPUSH
7908: CALL_OW 310
7912: NOT
7913: IFFALSE 7933
// ComEnterUnit ( i , lab [ 1 ] ) ;
7915: LD_VAR 0 1
7919: PPUSH
7920: LD_VAR 0 3
7924: PUSH
7925: LD_INT 1
7927: ARRAY
7928: PPUSH
7929: CALL_OW 120
7933: GO 7900
7935: POP
7936: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
7937: LD_ADDR_VAR 0 4
7941: PUSH
7942: LD_EXP 34
7946: PPUSH
7947: LD_INT 25
7949: PUSH
7950: LD_INT 2
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PPUSH
7957: CALL_OW 72
7961: ST_TO_ADDR
// if eng then
7962: LD_VAR 0 4
7966: IFFALSE 8406
// begin for i in eng do
7968: LD_ADDR_VAR 0 1
7972: PUSH
7973: LD_VAR 0 4
7977: PUSH
7978: FOR_IN
7979: IFFALSE 8404
// begin tag := GetTag ( i ) ;
7981: LD_ADDR_VAR 0 5
7985: PUSH
7986: LD_VAR 0 1
7990: PPUSH
7991: CALL_OW 110
7995: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 256
8005: PUSH
8006: LD_INT 800
8008: LESS
8009: PUSH
8010: LD_VAR 0 5
8014: PUSH
8015: LD_INT 3
8017: NONEQUAL
8018: AND
8019: IFFALSE 8057
// begin SetTag ( i , tHeal ) ;
8021: LD_VAR 0 1
8025: PPUSH
8026: LD_INT 3
8028: PPUSH
8029: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8033: LD_VAR 0 1
8037: PPUSH
8038: LD_INT 97
8040: PPUSH
8041: LD_INT 139
8043: PPUSH
8044: CALL_OW 111
// AddComHold ( i ) ;
8048: LD_VAR 0 1
8052: PPUSH
8053: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8057: LD_VAR 0 5
8061: PUSH
8062: LD_INT 3
8064: EQUAL
8065: PUSH
8066: LD_VAR 0 1
8070: PPUSH
8071: CALL_OW 256
8075: PUSH
8076: LD_INT 1000
8078: EQUAL
8079: AND
8080: IFFALSE 8094
// SetTag ( i , 0 ) ;
8082: LD_VAR 0 1
8086: PPUSH
8087: LD_INT 0
8089: PPUSH
8090: CALL_OW 109
// if not tag then
8094: LD_VAR 0 5
8098: NOT
8099: IFFALSE 8193
// begin if cr or tmp then
8101: LD_VAR 0 8
8105: PUSH
8106: LD_VAR 0 2
8110: OR
8111: IFFALSE 8167
// begin if IsInUnit ( i ) then
8113: LD_VAR 0 1
8117: PPUSH
8118: CALL_OW 310
8122: IFFALSE 8133
// ComExitBuilding ( i ) ;
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 122
// if tmp then
8133: LD_VAR 0 2
8137: IFFALSE 8153
// SetTag ( i , tRepair ) else
8139: LD_VAR 0 1
8143: PPUSH
8144: LD_INT 1
8146: PPUSH
8147: CALL_OW 109
8151: GO 8165
// SetTag ( i , tCrates ) ;
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 2
8160: PPUSH
8161: CALL_OW 109
// end else
8165: GO 8193
// if not IsInUnit ( i ) then
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 310
8176: NOT
8177: IFFALSE 8193
// ComEnterUnit ( i , ruBase ) ;
8179: LD_VAR 0 1
8183: PPUSH
8184: LD_VAR 0 14
8188: PPUSH
8189: CALL_OW 120
// end ; if tag = tRepair then
8193: LD_VAR 0 5
8197: PUSH
8198: LD_INT 1
8200: EQUAL
8201: IFFALSE 8281
// begin if not tmp then
8203: LD_VAR 0 2
8207: NOT
8208: IFFALSE 8224
// begin SetTag ( i , 0 ) ;
8210: LD_VAR 0 1
8214: PPUSH
8215: LD_INT 0
8217: PPUSH
8218: CALL_OW 109
// continue ;
8222: GO 7978
// end ; if not HasTask ( i ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 314
8233: NOT
8234: IFFALSE 8254
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8236: LD_VAR 0 1
8240: PPUSH
8241: LD_VAR 0 2
8245: PUSH
8246: LD_INT 1
8248: ARRAY
8249: PPUSH
8250: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
8254: LD_VAR 0 1
8258: PPUSH
8259: LD_INT 26
8261: PPUSH
8262: CALL_OW 308
8266: NOT
8267: IFFALSE 8281
// ComMoveToArea ( i , ruBaseArea ) ;
8269: LD_VAR 0 1
8273: PPUSH
8274: LD_INT 26
8276: PPUSH
8277: CALL_OW 113
// end ; if tag = tCrates then
8281: LD_VAR 0 5
8285: PUSH
8286: LD_INT 2
8288: EQUAL
8289: IFFALSE 8402
// begin if not cr then
8291: LD_VAR 0 8
8295: NOT
8296: IFFALSE 8312
// begin SetTag ( i , 0 ) ;
8298: LD_VAR 0 1
8302: PPUSH
8303: LD_INT 0
8305: PPUSH
8306: CALL_OW 109
// continue ;
8310: GO 7978
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8312: LD_VAR 0 1
8316: PPUSH
8317: CALL_OW 314
8321: NOT
8322: PUSH
8323: LD_INT 81
8325: PUSH
8326: LD_INT 6
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 92
8335: PUSH
8336: LD_VAR 0 8
8340: PUSH
8341: LD_INT 1
8343: ARRAY
8344: PUSH
8345: LD_VAR 0 8
8349: PUSH
8350: LD_INT 2
8352: ARRAY
8353: PUSH
8354: LD_INT 12
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PPUSH
8367: CALL_OW 69
8371: NOT
8372: AND
8373: IFFALSE 8402
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8375: LD_VAR 0 1
8379: PPUSH
8380: LD_VAR 0 8
8384: PUSH
8385: LD_INT 1
8387: ARRAY
8388: PPUSH
8389: LD_VAR 0 8
8393: PUSH
8394: LD_INT 2
8396: ARRAY
8397: PPUSH
8398: CALL_OW 117
// end ; end ;
8402: GO 7978
8404: POP
8405: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8406: LD_ADDR_VAR 0 10
8410: PUSH
8411: LD_EXP 34
8415: PPUSH
8416: LD_INT 2
8418: PUSH
8419: LD_INT 25
8421: PUSH
8422: LD_INT 1
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 9
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 50
8446: PUSH
8447: EMPTY
8448: LIST
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PPUSH
8454: CALL_OW 72
8458: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
8459: LD_ADDR_VAR 0 12
8463: PUSH
8464: LD_INT 26
8466: PPUSH
8467: LD_INT 81
8469: PUSH
8470: LD_INT 6
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PPUSH
8477: CALL_OW 70
8481: ST_TO_ADDR
// if sol then
8482: LD_VAR 0 10
8486: IFFALSE 9009
// begin if enemyInBase then
8488: LD_VAR 0 12
8492: IFFALSE 8711
// begin for i in sol do
8494: LD_ADDR_VAR 0 1
8498: PUSH
8499: LD_VAR 0 10
8503: PUSH
8504: FOR_IN
8505: IFFALSE 8707
// begin tw := IsInUnit ( i ) ;
8507: LD_ADDR_VAR 0 7
8511: PUSH
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 310
8521: ST_TO_ADDR
// if tw then
8522: LD_VAR 0 7
8526: IFFALSE 8616
// begin if not tw in FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8528: LD_VAR 0 7
8532: PUSH
8533: LD_INT 22
8535: PUSH
8536: LD_INT 6
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 101
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: LD_INT 30
8558: PUSH
8559: LD_INT 5
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 30
8568: PUSH
8569: LD_INT 32
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 30
8578: PUSH
8579: LD_INT 31
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: LIST
8596: PPUSH
8597: CALL_OW 69
8601: IN
8602: NOT
8603: IFFALSE 8614
// ComExitBuilding ( i ) ;
8605: LD_VAR 0 1
8609: PPUSH
8610: CALL_OW 122
// end else
8614: GO 8705
// begin un := NearestUnitToUnit ( enemyInBase , i ) ;
8616: LD_ADDR_VAR 0 6
8620: PUSH
8621: LD_VAR 0 12
8625: PPUSH
8626: LD_VAR 0 1
8630: PPUSH
8631: CALL_OW 74
8635: ST_TO_ADDR
// if GetClass ( i ) = class_bazooker and Prob ( 30 ) then
8636: LD_VAR 0 1
8640: PPUSH
8641: CALL_OW 257
8645: PUSH
8646: LD_INT 9
8648: EQUAL
8649: PUSH
8650: LD_INT 30
8652: PPUSH
8653: CALL_OW 13
8657: AND
8658: IFFALSE 8691
// ComTimeShift ( i , GetX ( un ) , GetY ( un ) ) else
8660: LD_VAR 0 1
8664: PPUSH
8665: LD_VAR 0 6
8669: PPUSH
8670: CALL_OW 250
8674: PPUSH
8675: LD_VAR 0 6
8679: PPUSH
8680: CALL_OW 251
8684: PPUSH
8685: CALL_OW 154
8689: GO 8705
// ComAttackUnit ( i , un ) ;
8691: LD_VAR 0 1
8695: PPUSH
8696: LD_VAR 0 6
8700: PPUSH
8701: CALL_OW 115
// end ; end ;
8705: GO 8504
8707: POP
8708: POP
// end else
8709: GO 9009
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8711: LD_ADDR_VAR 0 13
8715: PUSH
8716: LD_INT 26
8718: PPUSH
8719: LD_INT 3
8721: PUSH
8722: LD_INT 62
8724: PUSH
8725: EMPTY
8726: LIST
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 2
8734: PUSH
8735: LD_INT 30
8737: PUSH
8738: LD_INT 32
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 30
8747: PUSH
8748: LD_INT 4
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 30
8757: PUSH
8758: LD_INT 31
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PPUSH
8775: CALL_OW 70
8779: ST_TO_ADDR
// if empty then
8780: LD_VAR 0 13
8784: IFFALSE 8801
// empty := ReverseArray ( empty ) ;
8786: LD_ADDR_VAR 0 13
8790: PUSH
8791: LD_VAR 0 13
8795: PPUSH
8796: CALL 48550 0 1
8800: ST_TO_ADDR
// for i in sol do
8801: LD_ADDR_VAR 0 1
8805: PUSH
8806: LD_VAR 0 10
8810: PUSH
8811: FOR_IN
8812: IFFALSE 9007
// begin tag := GetTag ( i ) ;
8814: LD_ADDR_VAR 0 5
8818: PUSH
8819: LD_VAR 0 1
8823: PPUSH
8824: CALL_OW 110
8828: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8829: LD_VAR 0 1
8833: PPUSH
8834: CALL_OW 256
8838: PUSH
8839: LD_INT 1000
8841: LESS
8842: PUSH
8843: LD_VAR 0 5
8847: PUSH
8848: LD_INT 3
8850: NONEQUAL
8851: AND
8852: IFFALSE 8892
// begin SetTag ( i , tHeal ) ;
8854: LD_VAR 0 1
8858: PPUSH
8859: LD_INT 3
8861: PPUSH
8862: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8866: LD_VAR 0 1
8870: PPUSH
8871: LD_INT 97
8873: PPUSH
8874: LD_INT 139
8876: PPUSH
8877: CALL_OW 111
// AddComHold ( i ) ;
8881: LD_VAR 0 1
8885: PPUSH
8886: CALL_OW 200
// continue ;
8890: GO 8811
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8892: LD_VAR 0 1
8896: PPUSH
8897: CALL_OW 256
8901: PUSH
8902: LD_INT 1000
8904: EQUAL
8905: PUSH
8906: LD_VAR 0 5
8910: PUSH
8911: LD_INT 3
8913: EQUAL
8914: AND
8915: IFFALSE 8931
// begin SetTag ( i , 0 ) ;
8917: LD_VAR 0 1
8921: PPUSH
8922: LD_INT 0
8924: PPUSH
8925: CALL_OW 109
// continue ;
8929: GO 8811
// end ; if HasTask ( i ) then
8931: LD_VAR 0 1
8935: PPUSH
8936: CALL_OW 314
8940: IFFALSE 8944
// continue ;
8942: GO 8811
// if not IsInUnit ( i ) and not tag and empty then
8944: LD_VAR 0 1
8948: PPUSH
8949: CALL_OW 310
8953: NOT
8954: PUSH
8955: LD_VAR 0 5
8959: NOT
8960: AND
8961: PUSH
8962: LD_VAR 0 13
8966: AND
8967: IFFALSE 9005
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8969: LD_VAR 0 1
8973: PPUSH
8974: LD_VAR 0 13
8978: PUSH
8979: LD_INT 1
8981: ARRAY
8982: PPUSH
8983: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
8987: LD_ADDR_VAR 0 13
8991: PUSH
8992: LD_VAR 0 13
8996: PPUSH
8997: LD_INT 1
8999: PPUSH
9000: CALL_OW 3
9004: ST_TO_ADDR
// end ; end ;
9005: GO 8811
9007: POP
9008: POP
// end ; end ; end ;
9009: PPOPN 15
9011: END
// every 0 0$1 trigger ruTanks do var i , mech , enemy ;
9012: LD_EXP 36
9016: IFFALSE 9592
9018: GO 9020
9020: DISABLE
9021: LD_INT 0
9023: PPUSH
9024: PPUSH
9025: PPUSH
// begin enable ;
9026: ENABLE
// if not ruTanks then
9027: LD_EXP 36
9031: NOT
9032: IFFALSE 9036
// exit ;
9034: GO 9592
// for i in ruTanks do
9036: LD_ADDR_VAR 0 1
9040: PUSH
9041: LD_EXP 36
9045: PUSH
9046: FOR_IN
9047: IFFALSE 9590
// begin if not IsOk ( i ) or GetSide ( i ) <> 6 then
9049: LD_VAR 0 1
9053: PPUSH
9054: CALL_OW 302
9058: NOT
9059: PUSH
9060: LD_VAR 0 1
9064: PPUSH
9065: CALL_OW 255
9069: PUSH
9070: LD_INT 6
9072: NONEQUAL
9073: OR
9074: IFFALSE 9094
// begin ruTanks := ruTanks diff i ;
9076: LD_ADDR_EXP 36
9080: PUSH
9081: LD_EXP 36
9085: PUSH
9086: LD_VAR 0 1
9090: DIFF
9091: ST_TO_ADDR
// continue ;
9092: GO 9046
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 110
9103: NOT
9104: PUSH
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 110
9114: PUSH
9115: LD_INT 0
9117: EQUAL
9118: OR
9119: IFFALSE 9249
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9121: LD_VAR 0 1
9125: PPUSH
9126: CALL_OW 261
9130: PUSH
9131: LD_INT 50
9133: LESS
9134: PUSH
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL_OW 262
9144: PUSH
9145: LD_INT 1
9147: EQUAL
9148: AND
9149: IFFALSE 9208
// begin ComMoveXY ( i , 103 , 149 ) ;
9151: LD_VAR 0 1
9155: PPUSH
9156: LD_INT 103
9158: PPUSH
9159: LD_INT 149
9161: PPUSH
9162: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9166: LD_INT 35
9168: PPUSH
9169: CALL_OW 67
// until GetDistUnitXY ( i , 103 , 149 ) < 4 ;
9173: LD_VAR 0 1
9177: PPUSH
9178: LD_INT 103
9180: PPUSH
9181: LD_INT 149
9183: PPUSH
9184: CALL_OW 297
9188: PUSH
9189: LD_INT 4
9191: LESS
9192: IFFALSE 9166
// SetFuel ( i , 100 ) ;
9194: LD_VAR 0 1
9198: PPUSH
9199: LD_INT 100
9201: PPUSH
9202: CALL_OW 240
// end else
9206: GO 9249
// if not IsInArea ( i , ruParkingArea ) then
9208: LD_VAR 0 1
9212: PPUSH
9213: LD_INT 27
9215: PPUSH
9216: CALL_OW 308
9220: NOT
9221: IFFALSE 9237
// ComMoveToArea ( i , ruParkingArea ) else
9223: LD_VAR 0 1
9227: PPUSH
9228: LD_INT 27
9230: PPUSH
9231: CALL_OW 113
9235: GO 9249
// SetTag ( i , tParking ) ;
9237: LD_VAR 0 1
9241: PPUSH
9242: LD_INT 11
9244: PPUSH
9245: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 110
9258: PUSH
9259: LD_INT 11
9261: EQUAL
9262: IFFALSE 9392
// begin if GetLives ( i ) < 650 then
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 256
9273: PUSH
9274: LD_INT 650
9276: LESS
9277: IFFALSE 9369
// begin if not IsDrivenBy ( i ) then
9279: LD_VAR 0 1
9283: PPUSH
9284: CALL_OW 311
9288: NOT
9289: IFFALSE 9293
// continue ;
9291: GO 9046
// mech := IsDrivenBy ( i ) ;
9293: LD_ADDR_VAR 0 2
9297: PUSH
9298: LD_VAR 0 1
9302: PPUSH
9303: CALL_OW 311
9307: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9308: LD_VAR 0 2
9312: PPUSH
9313: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9317: LD_VAR 0 2
9321: PPUSH
9322: LD_VAR 0 1
9326: PPUSH
9327: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9331: LD_INT 35
9333: PPUSH
9334: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL_OW 256
9347: PUSH
9348: LD_INT 1000
9350: EQUAL
9351: IFFALSE 9331
// ComEnterUnit ( mech , i ) ;
9353: LD_VAR 0 2
9357: PPUSH
9358: LD_VAR 0 1
9362: PPUSH
9363: CALL_OW 120
// end else
9367: GO 9392
// if IsDrivenBy ( i ) then
9369: LD_VAR 0 1
9373: PPUSH
9374: CALL_OW 311
9378: IFFALSE 9392
// SetTag ( i , tAttack ) ;
9380: LD_VAR 0 1
9384: PPUSH
9385: LD_INT 12
9387: PPUSH
9388: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9392: LD_VAR 0 1
9396: PPUSH
9397: CALL_OW 110
9401: PUSH
9402: LD_INT 12
9404: EQUAL
9405: IFFALSE 9588
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
9407: LD_ADDR_VAR 0 3
9411: PUSH
9412: LD_INT 26
9414: PPUSH
9415: LD_INT 81
9417: PUSH
9418: LD_INT 6
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PPUSH
9425: CALL_OW 70
9429: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9430: LD_VAR 0 1
9434: PPUSH
9435: CALL_OW 256
9439: PUSH
9440: LD_INT 650
9442: LESS
9443: IFFALSE 9468
// begin ComStop ( i ) ;
9445: LD_VAR 0 1
9449: PPUSH
9450: CALL_OW 141
// SetTag ( i , 0 ) ;
9454: LD_VAR 0 1
9458: PPUSH
9459: LD_INT 0
9461: PPUSH
9462: CALL_OW 109
// continue ;
9466: GO 9046
// end ; if enemy then
9468: LD_VAR 0 3
9472: IFFALSE 9512
// begin if not HasTask ( i ) then
9474: LD_VAR 0 1
9478: PPUSH
9479: CALL_OW 314
9483: NOT
9484: IFFALSE 9510
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9486: LD_VAR 0 1
9490: PPUSH
9491: LD_VAR 0 3
9495: PPUSH
9496: LD_VAR 0 1
9500: PPUSH
9501: CALL_OW 74
9505: PPUSH
9506: CALL 57511 0 2
// end else
9510: GO 9588
// if ruTanks > 1 then
9512: LD_EXP 36
9516: PUSH
9517: LD_INT 1
9519: GREATER
9520: IFFALSE 9588
// AgressiveMove ( i , [ [ 78 , 112 ] , [ 104 , 106 ] , [ 130 , 107 ] , [ 143 , 83 ] , [ 120 , 35 ] ] ) ;
9522: LD_VAR 0 1
9526: PPUSH
9527: LD_INT 78
9529: PUSH
9530: LD_INT 112
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 104
9539: PUSH
9540: LD_INT 106
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 130
9549: PUSH
9550: LD_INT 107
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 143
9559: PUSH
9560: LD_INT 83
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 120
9569: PUSH
9570: LD_INT 35
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: PPUSH
9584: CALL 55893 0 2
// end ; end ;
9588: GO 9046
9590: POP
9591: POP
// end ;
9592: PPOPN 3
9594: END
// every 0 0$1 trigger InBattle ( 6 ) or playerInBase do
9595: LD_INT 6
9597: PPUSH
9598: CALL_OW 463
9602: PUSH
9603: LD_EXP 5
9607: OR
9608: IFFALSE 9826
9610: GO 9612
9612: DISABLE
// begin wait ( 0 0$10 ) ;
9613: LD_INT 350
9615: PPUSH
9616: CALL_OW 67
// if playerInBase then
9620: LD_EXP 5
9624: IFFALSE 9633
// wait ( 3 3$00 ) ;
9626: LD_INT 6300
9628: PPUSH
9629: CALL_OW 67
// ruConstructList := [ [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] ] ;
9633: LD_ADDR_EXP 35
9637: PUSH
9638: LD_INT 21
9640: PUSH
9641: LD_INT 3
9643: PUSH
9644: LD_INT 1
9646: PUSH
9647: LD_INT 45
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 21
9658: PUSH
9659: LD_INT 3
9661: PUSH
9662: LD_INT 1
9664: PUSH
9665: LD_INT 45
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 21
9676: PUSH
9677: LD_INT 3
9679: PUSH
9680: LD_INT 1
9682: PUSH
9683: LD_INT 45
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: ST_TO_ADDR
// if Difficulty > 1 then
9697: LD_OWVAR 67
9701: PUSH
9702: LD_INT 1
9704: GREATER
9705: IFFALSE 9740
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gatling_gun ] ) ;
9707: LD_ADDR_EXP 35
9711: PUSH
9712: LD_EXP 35
9716: PPUSH
9717: LD_INT 21
9719: PUSH
9720: LD_INT 3
9722: PUSH
9723: LD_INT 1
9725: PUSH
9726: LD_INT 43
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PPUSH
9735: CALL 53283 0 2
9739: ST_TO_ADDR
// if Difficulty > 2 then
9740: LD_OWVAR 67
9744: PUSH
9745: LD_INT 2
9747: GREATER
9748: IFFALSE 9783
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9750: LD_ADDR_EXP 35
9754: PUSH
9755: LD_EXP 35
9759: PPUSH
9760: LD_INT 21
9762: PUSH
9763: LD_INT 3
9765: PUSH
9766: LD_INT 1
9768: PUSH
9769: LD_INT 44
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: PPUSH
9778: CALL 53283 0 2
9782: ST_TO_ADDR
// if Difficulty > 3 then
9783: LD_OWVAR 67
9787: PUSH
9788: LD_INT 3
9790: GREATER
9791: IFFALSE 9826
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9793: LD_ADDR_EXP 35
9797: PUSH
9798: LD_EXP 35
9802: PPUSH
9803: LD_INT 21
9805: PUSH
9806: LD_INT 3
9808: PUSH
9809: LD_INT 1
9811: PUSH
9812: LD_INT 44
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL 53283 0 2
9825: ST_TO_ADDR
// end ; end_of_file
9826: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
9827: LD_INT 0
9829: PPUSH
9830: PPUSH
9831: PPUSH
9832: PPUSH
9833: PPUSH
9834: PPUSH
9835: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_STRING 09_env
9843: PPUSH
9844: EMPTY
9845: PPUSH
9846: CALL_OW 30
9850: ST_TO_ADDR
// if not tmp then
9851: LD_VAR 0 2
9855: NOT
9856: IFFALSE 9860
// exit ;
9858: GO 10263
// list := ListEnvironmentArea ( mapArea ) ;
9860: LD_ADDR_VAR 0 7
9864: PUSH
9865: LD_INT 4
9867: PPUSH
9868: CALL_OW 353
9872: ST_TO_ADDR
// if not list then
9873: LD_VAR 0 7
9877: NOT
9878: IFFALSE 9882
// exit ;
9880: GO 10263
// for i in list do
9882: LD_ADDR_VAR 0 3
9886: PUSH
9887: LD_VAR 0 7
9891: PUSH
9892: FOR_IN
9893: IFFALSE 10001
// begin exist := false ;
9895: LD_ADDR_VAR 0 6
9899: PUSH
9900: LD_INT 0
9902: ST_TO_ADDR
// for j in tmp do
9903: LD_ADDR_VAR 0 4
9907: PUSH
9908: LD_VAR 0 2
9912: PUSH
9913: FOR_IN
9914: IFFALSE 9968
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
9916: LD_VAR 0 3
9920: PUSH
9921: LD_INT 1
9923: ARRAY
9924: PUSH
9925: LD_VAR 0 4
9929: PUSH
9930: LD_INT 1
9932: ARRAY
9933: EQUAL
9934: PUSH
9935: LD_VAR 0 3
9939: PUSH
9940: LD_INT 2
9942: ARRAY
9943: PUSH
9944: LD_VAR 0 4
9948: PUSH
9949: LD_INT 2
9951: ARRAY
9952: EQUAL
9953: AND
9954: IFFALSE 9966
// begin exist := true ;
9956: LD_ADDR_VAR 0 6
9960: PUSH
9961: LD_INT 1
9963: ST_TO_ADDR
// break ;
9964: GO 9968
// end ;
9966: GO 9913
9968: POP
9969: POP
// if not exist then
9970: LD_VAR 0 6
9974: NOT
9975: IFFALSE 9999
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
9977: LD_VAR 0 3
9981: PUSH
9982: LD_INT 1
9984: ARRAY
9985: PPUSH
9986: LD_VAR 0 3
9990: PUSH
9991: LD_INT 2
9993: ARRAY
9994: PPUSH
9995: CALL_OW 347
// end ;
9999: GO 9892
10001: POP
10002: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
10003: LD_ADDR_VAR 0 2
10007: PUSH
10008: LD_STRING 09_animals
10010: PPUSH
10011: EMPTY
10012: PPUSH
10013: CALL_OW 30
10017: ST_TO_ADDR
// if not tmp then
10018: LD_VAR 0 2
10022: NOT
10023: IFFALSE 10027
// exit ;
10025: GO 10263
// InitHc_All ( ) ;
10027: CALL_OW 584
// for i in tmp do
10031: LD_ADDR_VAR 0 3
10035: PUSH
10036: LD_VAR 0 2
10040: PUSH
10041: FOR_IN
10042: IFFALSE 10159
// begin uc_side := 0 ;
10044: LD_ADDR_OWVAR 20
10048: PUSH
10049: LD_INT 0
10051: ST_TO_ADDR
// uc_nation := nation_nature ;
10052: LD_ADDR_OWVAR 21
10056: PUSH
10057: LD_INT 0
10059: ST_TO_ADDR
// hc_gallery :=  ;
10060: LD_ADDR_OWVAR 33
10064: PUSH
10065: LD_STRING 
10067: ST_TO_ADDR
// hc_name :=  ;
10068: LD_ADDR_OWVAR 26
10072: PUSH
10073: LD_STRING 
10075: ST_TO_ADDR
// hc_class := i [ 1 ] ;
10076: LD_ADDR_OWVAR 28
10080: PUSH
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: ST_TO_ADDR
// un := CreateHuman ;
10090: LD_ADDR_VAR 0 5
10094: PUSH
10095: CALL_OW 44
10099: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
10100: LD_VAR 0 5
10104: PPUSH
10105: LD_VAR 0 3
10109: PUSH
10110: LD_INT 2
10112: ARRAY
10113: PPUSH
10114: LD_VAR 0 3
10118: PUSH
10119: LD_INT 3
10121: ARRAY
10122: PPUSH
10123: LD_VAR 0 3
10127: PUSH
10128: LD_INT 4
10130: ARRAY
10131: PPUSH
10132: LD_INT 0
10134: PPUSH
10135: CALL 55423 0 5
// SetLives ( un , i [ 5 ] ) ;
10139: LD_VAR 0 5
10143: PPUSH
10144: LD_VAR 0 3
10148: PUSH
10149: LD_INT 5
10151: ARRAY
10152: PPUSH
10153: CALL_OW 234
// end ;
10157: GO 10041
10159: POP
10160: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
10161: LD_ADDR_VAR 0 3
10165: PUSH
10166: DOUBLE
10167: LD_INT 1
10169: DEC
10170: ST_TO_ADDR
10171: LD_INT 6
10173: PUSH
10174: LD_INT 5
10176: PUSH
10177: LD_INT 4
10179: PUSH
10180: LD_INT 3
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: LD_OWVAR 67
10193: ARRAY
10194: PUSH
10195: FOR_TO
10196: IFFALSE 10222
// begin PrepareApeman ( 5 ) ;
10198: LD_INT 5
10200: PPUSH
10201: CALL 49531 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10205: CALL_OW 44
10209: PPUSH
10210: LD_INT 5
10212: PPUSH
10213: LD_INT 0
10215: PPUSH
10216: CALL_OW 49
// end ;
10220: GO 10195
10222: POP
10223: POP
// for i in FilterUnitsInArea ( ruBaseArea , [ f_side , 0 ] ) do
10224: LD_ADDR_VAR 0 3
10228: PUSH
10229: LD_INT 26
10231: PPUSH
10232: LD_INT 22
10234: PUSH
10235: LD_INT 0
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PPUSH
10242: CALL_OW 70
10246: PUSH
10247: FOR_IN
10248: IFFALSE 10261
// RemoveUnit ( i ) ;
10250: LD_VAR 0 3
10254: PPUSH
10255: CALL_OW 64
10259: GO 10247
10261: POP
10262: POP
// end ;
10263: LD_VAR 0 1
10267: RET
// export function CreateDeposits ; var i , oil , sib ; begin
10268: LD_INT 0
10270: PPUSH
10271: PPUSH
10272: PPUSH
10273: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
10274: LD_ADDR_VAR 0 3
10278: PUSH
10279: LD_INT 91
10281: PUSH
10282: LD_INT 13
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 52
10291: PUSH
10292: LD_INT 23
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 115
10301: PUSH
10302: LD_INT 150
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: LIST
10313: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
10314: LD_ADDR_VAR 0 4
10318: PUSH
10319: LD_INT 82
10321: PUSH
10322: LD_INT 42
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PUSH
10329: LD_INT 128
10331: PUSH
10332: LD_INT 132
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: ST_TO_ADDR
// for i in oil do
10343: LD_ADDR_VAR 0 2
10347: PUSH
10348: LD_VAR 0 3
10352: PUSH
10353: FOR_IN
10354: IFFALSE 10433
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
10356: LD_VAR 0 2
10360: PUSH
10361: LD_INT 1
10363: ARRAY
10364: PPUSH
10365: LD_VAR 0 2
10369: PUSH
10370: LD_INT 2
10372: ARRAY
10373: PPUSH
10374: LD_INT 2
10376: PPUSH
10377: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10381: LD_VAR 0 2
10385: PUSH
10386: LD_INT 1
10388: ARRAY
10389: PPUSH
10390: LD_VAR 0 2
10394: PUSH
10395: LD_INT 2
10397: ARRAY
10398: PPUSH
10399: LD_INT 2
10401: PPUSH
10402: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10406: LD_VAR 0 2
10410: PUSH
10411: LD_INT 1
10413: ARRAY
10414: PPUSH
10415: LD_VAR 0 2
10419: PUSH
10420: LD_INT 2
10422: ARRAY
10423: PPUSH
10424: LD_INT 6
10426: PPUSH
10427: CALL_OW 441
// end ;
10431: GO 10353
10433: POP
10434: POP
// for i in sib do
10435: LD_ADDR_VAR 0 2
10439: PUSH
10440: LD_VAR 0 4
10444: PUSH
10445: FOR_IN
10446: IFFALSE 10525
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
10448: LD_VAR 0 2
10452: PUSH
10453: LD_INT 1
10455: ARRAY
10456: PPUSH
10457: LD_VAR 0 2
10461: PUSH
10462: LD_INT 2
10464: ARRAY
10465: PPUSH
10466: LD_INT 3
10468: PPUSH
10469: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10473: LD_VAR 0 2
10477: PUSH
10478: LD_INT 1
10480: ARRAY
10481: PPUSH
10482: LD_VAR 0 2
10486: PUSH
10487: LD_INT 2
10489: ARRAY
10490: PPUSH
10491: LD_INT 2
10493: PPUSH
10494: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10498: LD_VAR 0 2
10502: PUSH
10503: LD_INT 1
10505: ARRAY
10506: PPUSH
10507: LD_VAR 0 2
10511: PUSH
10512: LD_INT 2
10514: ARRAY
10515: PPUSH
10516: LD_INT 6
10518: PPUSH
10519: CALL_OW 441
// end ;
10523: GO 10445
10525: POP
10526: POP
// end ;
10527: LD_VAR 0 1
10531: RET
// export function LoadCam ; var i , tmp ; begin
10532: LD_INT 0
10534: PPUSH
10535: PPUSH
10536: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
10537: LD_ADDR_VAR 0 3
10541: PUSH
10542: LD_STRING 09_cameras
10544: PPUSH
10545: EMPTY
10546: PPUSH
10547: CALL_OW 30
10551: ST_TO_ADDR
// if not tmp then
10552: LD_VAR 0 3
10556: NOT
10557: IFFALSE 10561
// exit ;
10559: GO 10603
// for i in tmp do
10561: LD_ADDR_VAR 0 2
10565: PUSH
10566: LD_VAR 0 3
10570: PUSH
10571: FOR_IN
10572: IFFALSE 10601
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
10574: LD_VAR 0 2
10578: PUSH
10579: LD_INT 1
10581: ARRAY
10582: PPUSH
10583: LD_VAR 0 2
10587: PUSH
10588: LD_INT 2
10590: ARRAY
10591: PPUSH
10592: LD_INT 2
10594: PPUSH
10595: CALL_OW 244
10599: GO 10571
10601: POP
10602: POP
// end ;
10603: LD_VAR 0 1
10607: RET
// export function LoadTech ; var i , tmp , default ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// default := [ 2 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
10614: LD_ADDR_VAR 0 4
10618: PUSH
10619: LD_INT 2
10621: PUSH
10622: LD_INT 2
10624: PUSH
10625: LD_INT 0
10627: PUSH
10628: LD_INT 0
10630: PUSH
10631: LD_INT 0
10633: PUSH
10634: LD_INT 2
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: LD_INT 0
10642: PUSH
10643: LD_INT 1
10645: PUSH
10646: LD_INT 0
10648: PUSH
10649: LD_INT 2
10651: PUSH
10652: LD_INT 0
10654: PUSH
10655: LD_INT 0
10657: PUSH
10658: LD_INT 0
10660: PUSH
10661: LD_INT 2
10663: PUSH
10664: LD_INT 0
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: LD_INT 1
10672: PUSH
10673: LD_INT 0
10675: PUSH
10676: LD_INT 2
10678: PUSH
10679: LD_INT 1
10681: PUSH
10682: LD_INT 1
10684: PUSH
10685: LD_INT 0
10687: PUSH
10688: LD_INT 0
10690: PUSH
10691: LD_INT 0
10693: PUSH
10694: LD_INT 0
10696: PUSH
10697: LD_INT 0
10699: PUSH
10700: LD_INT 0
10702: PUSH
10703: LD_INT 0
10705: PUSH
10706: LD_INT 0
10708: PUSH
10709: LD_INT 0
10711: PUSH
10712: LD_INT 0
10714: PUSH
10715: LD_INT 0
10717: PUSH
10718: LD_INT 0
10720: PUSH
10721: LD_INT 2
10723: PUSH
10724: LD_INT 0
10726: PUSH
10727: LD_INT 0
10729: PUSH
10730: LD_INT 0
10732: PUSH
10733: LD_INT 1
10735: PUSH
10736: LD_INT 1
10738: PUSH
10739: LD_INT 1
10741: PUSH
10742: LD_INT 1
10744: PUSH
10745: LD_INT 0
10747: PUSH
10748: LD_INT 0
10750: PUSH
10751: LD_INT 2
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: LD_INT 2
10759: PUSH
10760: LD_INT 2
10762: PUSH
10763: LD_INT 2
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: LD_INT 1
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: LD_INT 0
10777: PUSH
10778: LD_INT 1
10780: PUSH
10781: LD_INT 0
10783: PUSH
10784: LD_INT 0
10786: PUSH
10787: LD_INT 0
10789: PUSH
10790: LD_INT 0
10792: PUSH
10793: LD_INT 0
10795: PUSH
10796: LD_INT 2
10798: PUSH
10799: LD_INT 1
10801: PUSH
10802: LD_INT 0
10804: PUSH
10805: LD_INT 0
10807: PUSH
10808: LD_INT 0
10810: PUSH
10811: LD_INT 0
10813: PUSH
10814: LD_INT 1
10816: PUSH
10817: LD_INT 0
10819: PUSH
10820: LD_INT 0
10822: PUSH
10823: LD_INT 2
10825: PUSH
10826: LD_INT 2
10828: PUSH
10829: LD_INT 0
10831: PUSH
10832: LD_INT 0
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: LD_INT 1
10840: PUSH
10841: LD_INT 1
10843: PUSH
10844: LD_INT 1
10846: PUSH
10847: LD_INT 1
10849: PUSH
10850: LD_INT 1
10852: PUSH
10853: LD_INT 1
10855: PUSH
10856: LD_INT 0
10858: PUSH
10859: LD_INT 0
10861: PUSH
10862: LD_INT 2
10864: PUSH
10865: LD_INT 2
10867: PUSH
10868: LD_INT 1
10870: PUSH
10871: LD_INT 1
10873: PUSH
10874: LD_INT 0
10876: PUSH
10877: LD_INT 0
10879: PUSH
10880: LD_INT 0
10882: PUSH
10883: LD_INT 1
10885: PUSH
10886: LD_INT 1
10888: PUSH
10889: LD_INT 1
10891: PUSH
10892: LD_INT 1
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: LD_INT 1
10900: PUSH
10901: LD_INT 1
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: LD_INT 1
10912: PUSH
10913: LD_INT 1
10915: PUSH
10916: LD_INT 1
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: ST_TO_ADDR
// tmp := LoadVariable ( 09_tech , default ) ;
11021: LD_ADDR_VAR 0 3
11025: PUSH
11026: LD_STRING 09_tech
11028: PPUSH
11029: LD_VAR 0 4
11033: PPUSH
11034: CALL_OW 30
11038: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
11039: LD_ADDR_VAR 0 2
11043: PUSH
11044: DOUBLE
11045: LD_INT 1
11047: DEC
11048: ST_TO_ADDR
11049: LD_VAR 0 3
11053: PPUSH
11054: CALL 17674 0 1
11058: PUSH
11059: FOR_TO
11060: IFFALSE 11087
// SetTech ( i , 2 , tmp [ i ] ) ;
11062: LD_VAR 0 2
11066: PPUSH
11067: LD_INT 2
11069: PPUSH
11070: LD_VAR 0 3
11074: PUSH
11075: LD_VAR 0 2
11079: ARRAY
11080: PPUSH
11081: CALL_OW 322
11085: GO 11059
11087: POP
11088: POP
// end ;
11089: LD_VAR 0 1
11093: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
11094: LD_INT 0
11096: PPUSH
11097: PPUSH
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
11102: LD_ADDR_VAR 0 3
11106: PUSH
11107: LD_STRING 09_buildings
11109: PPUSH
11110: EMPTY
11111: PPUSH
11112: CALL_OW 30
11116: ST_TO_ADDR
// for i in tmp do
11117: LD_ADDR_VAR 0 2
11121: PUSH
11122: LD_VAR 0 3
11126: PUSH
11127: FOR_IN
11128: IFFALSE 11522
// begin uc_side := 2 ;
11130: LD_ADDR_OWVAR 20
11134: PUSH
11135: LD_INT 2
11137: ST_TO_ADDR
// uc_nation := nation_arabian ;
11138: LD_ADDR_OWVAR 21
11142: PUSH
11143: LD_INT 2
11145: ST_TO_ADDR
// bc_type := i [ 1 ] ;
11146: LD_ADDR_OWVAR 42
11150: PUSH
11151: LD_VAR 0 2
11155: PUSH
11156: LD_INT 1
11158: ARRAY
11159: ST_TO_ADDR
// bc_level := i [ 5 ] ;
11160: LD_ADDR_OWVAR 43
11164: PUSH
11165: LD_VAR 0 2
11169: PUSH
11170: LD_INT 5
11172: ARRAY
11173: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
11174: LD_ADDR_OWVAR 44
11178: PUSH
11179: LD_INT 9
11181: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
11182: LD_ADDR_OWVAR 45
11186: PUSH
11187: LD_INT 9
11189: ST_TO_ADDR
// if i [ 7 ] then
11190: LD_VAR 0 2
11194: PUSH
11195: LD_INT 7
11197: ARRAY
11198: IFFALSE 11238
// begin bc_kind1 := i [ 7 ] ;
11200: LD_ADDR_OWVAR 44
11204: PUSH
11205: LD_VAR 0 2
11209: PUSH
11210: LD_INT 7
11212: ARRAY
11213: ST_TO_ADDR
// if i [ 8 ] then
11214: LD_VAR 0 2
11218: PUSH
11219: LD_INT 8
11221: ARRAY
11222: IFFALSE 11238
// bc_kind2 := i [ 8 ] ;
11224: LD_ADDR_OWVAR 45
11228: PUSH
11229: LD_VAR 0 2
11233: PUSH
11234: LD_INT 8
11236: ARRAY
11237: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
11238: LD_ADDR_VAR 0 4
11242: PUSH
11243: LD_VAR 0 2
11247: PUSH
11248: LD_INT 2
11250: ARRAY
11251: PPUSH
11252: LD_VAR 0 2
11256: PUSH
11257: LD_INT 3
11259: ARRAY
11260: PPUSH
11261: LD_VAR 0 2
11265: PUSH
11266: LD_INT 4
11268: ARRAY
11269: PPUSH
11270: CALL_OW 47
11274: ST_TO_ADDR
// if i [ 8 ] then
11275: LD_VAR 0 2
11279: PUSH
11280: LD_INT 8
11282: ARRAY
11283: IFFALSE 11303
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
11285: LD_VAR 0 4
11289: PPUSH
11290: LD_VAR 0 2
11294: PUSH
11295: LD_INT 8
11297: ARRAY
11298: PPUSH
11299: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
11303: LD_VAR 0 2
11307: PUSH
11308: LD_INT 1
11310: ARRAY
11311: PUSH
11312: LD_INT 0
11314: PUSH
11315: LD_INT 1
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: IN
11322: IFFALSE 11520
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
11324: LD_ADDR_VAR 0 6
11328: PUSH
11329: LD_STRING 09_materials
11331: PPUSH
11332: LD_INT 100
11334: PUSH
11335: LD_INT 50
11337: PUSH
11338: LD_INT 30
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: PUSH
11346: EMPTY
11347: LIST
11348: PPUSH
11349: CALL_OW 30
11353: ST_TO_ADDR
// for j := 1 to 3 do
11354: LD_ADDR_VAR 0 5
11358: PUSH
11359: DOUBLE
11360: LD_INT 1
11362: DEC
11363: ST_TO_ADDR
11364: LD_INT 3
11366: PUSH
11367: FOR_TO
11368: IFFALSE 11518
// if mat [ 1 ] [ j ] then
11370: LD_VAR 0 6
11374: PUSH
11375: LD_INT 1
11377: ARRAY
11378: PUSH
11379: LD_VAR 0 5
11383: ARRAY
11384: IFFALSE 11516
// if j > 1 then
11386: LD_VAR 0 5
11390: PUSH
11391: LD_INT 1
11393: GREATER
11394: IFFALSE 11457
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 35 , 25 , 20 , 10 ] [ Difficulty ] ) else
11396: LD_VAR 0 4
11400: PPUSH
11401: CALL_OW 274
11405: PPUSH
11406: LD_VAR 0 5
11410: PPUSH
11411: LD_VAR 0 6
11415: PUSH
11416: LD_INT 1
11418: ARRAY
11419: PUSH
11420: LD_VAR 0 5
11424: ARRAY
11425: PUSH
11426: LD_INT 35
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 20
11434: PUSH
11435: LD_INT 10
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: LD_OWVAR 67
11448: ARRAY
11449: PLUS
11450: PPUSH
11451: CALL_OW 277
11455: GO 11516
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 350 , 250 , 150 , 100 ] [ Difficulty ] ) ;
11457: LD_VAR 0 4
11461: PPUSH
11462: CALL_OW 274
11466: PPUSH
11467: LD_VAR 0 5
11471: PPUSH
11472: LD_VAR 0 6
11476: PUSH
11477: LD_INT 1
11479: ARRAY
11480: PUSH
11481: LD_VAR 0 5
11485: ARRAY
11486: PUSH
11487: LD_INT 350
11489: PUSH
11490: LD_INT 250
11492: PUSH
11493: LD_INT 150
11495: PUSH
11496: LD_INT 100
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: LD_OWVAR 67
11509: ARRAY
11510: PLUS
11511: PPUSH
11512: CALL_OW 277
11516: GO 11367
11518: POP
11519: POP
// end ; end ;
11520: GO 11127
11522: POP
11523: POP
// end ;
11524: LD_VAR 0 1
11528: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
11529: LD_INT 0
11531: PPUSH
11532: PPUSH
// area = ListEnvironmentArea ( area ) ;
11533: LD_ADDR_VAR 0 2
11537: PUSH
11538: LD_VAR 0 2
11542: PPUSH
11543: CALL_OW 353
11547: ST_TO_ADDR
// if bulldozer > 0 then
11548: LD_VAR 0 1
11552: PUSH
11553: LD_INT 0
11555: GREATER
11556: IFFALSE 11667
// for i = area downto 1 do
11558: LD_ADDR_VAR 0 4
11562: PUSH
11563: DOUBLE
11564: LD_VAR 0 2
11568: INC
11569: ST_TO_ADDR
11570: LD_INT 1
11572: PUSH
11573: FOR_DOWNTO
11574: IFFALSE 11665
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
11576: LD_VAR 0 2
11580: PUSH
11581: LD_VAR 0 4
11585: ARRAY
11586: PUSH
11587: LD_INT 1
11589: ARRAY
11590: PPUSH
11591: LD_VAR 0 2
11595: PUSH
11596: LD_VAR 0 4
11600: ARRAY
11601: PUSH
11602: LD_INT 2
11604: ARRAY
11605: PPUSH
11606: CALL_OW 351
11610: IFFALSE 11663
// if not HasTask ( bulldozer ) then
11612: LD_VAR 0 1
11616: PPUSH
11617: CALL_OW 314
11621: NOT
11622: IFFALSE 11663
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
11624: LD_VAR 0 1
11628: PPUSH
11629: LD_VAR 0 2
11633: PUSH
11634: LD_VAR 0 4
11638: ARRAY
11639: PUSH
11640: LD_INT 1
11642: ARRAY
11643: PPUSH
11644: LD_VAR 0 2
11648: PUSH
11649: LD_VAR 0 4
11653: ARRAY
11654: PUSH
11655: LD_INT 2
11657: ARRAY
11658: PPUSH
11659: CALL_OW 171
11663: GO 11573
11665: POP
11666: POP
// end ; end_of_file
11667: LD_VAR 0 3
11671: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11672: LD_VAR 0 1
11676: PPUSH
11677: LD_VAR 0 2
11681: PPUSH
11682: CALL 74600 0 2
// if GetControl ( vehicle ) = control_apeman then
11686: LD_VAR 0 1
11690: PPUSH
11691: CALL_OW 263
11695: PUSH
11696: LD_INT 5
11698: EQUAL
11699: IFFALSE 11711
// begin apeDriver := true ;
11701: LD_ADDR_EXP 8
11705: PUSH
11706: LD_INT 1
11708: ST_TO_ADDR
// exit ;
11709: GO 11764
// end ; if GetSide ( factory ) = 6 then
11711: LD_VAR 0 2
11715: PPUSH
11716: CALL_OW 255
11720: PUSH
11721: LD_INT 6
11723: EQUAL
11724: IFFALSE 11764
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
11726: LD_ADDR_EXP 35
11730: PUSH
11731: LD_EXP 35
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: CALL_OW 3
11743: ST_TO_ADDR
// ruTanks := Join ( ruTanks , vehicle ) ;
11744: LD_ADDR_EXP 36
11748: PUSH
11749: LD_EXP 36
11753: PPUSH
11754: LD_VAR 0 1
11758: PPUSH
11759: CALL 53283 0 2
11763: ST_TO_ADDR
// end ; end ;
11764: PPOPN 2
11766: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) = 6 and not See ( 2 , unit ) then
11767: LD_VAR 0 2
11771: PPUSH
11772: CALL_OW 255
11776: PUSH
11777: LD_INT 6
11779: EQUAL
11780: PUSH
11781: LD_INT 2
11783: PPUSH
11784: LD_VAR 0 2
11788: PPUSH
11789: CALL_OW 292
11793: NOT
11794: AND
11795: IFFALSE 11809
// SetLives ( unit , 1000 ) ;
11797: LD_VAR 0 2
11801: PPUSH
11802: LD_INT 1000
11804: PPUSH
11805: CALL_OW 234
// end ;
11809: PPOPN 2
11811: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area , fac , arm ;
11812: LD_INT 0
11814: PPUSH
11815: PPUSH
11816: PPUSH
11817: PPUSH
// begin if GetSide ( driver ) = 3 then
11818: LD_VAR 0 1
11822: PPUSH
11823: CALL_OW 255
11827: PUSH
11828: LD_INT 3
11830: EQUAL
11831: IFFALSE 11968
// begin tag := GetTag ( driver ) ;
11833: LD_ADDR_VAR 0 5
11837: PUSH
11838: LD_VAR 0 1
11842: PPUSH
11843: CALL_OW 110
11847: ST_TO_ADDR
// area := [ ruSpawn1AArea , ruSpawn2AArea , ruSpawn3AArea ] [ tag ] ;
11848: LD_ADDR_VAR 0 6
11852: PUSH
11853: LD_INT 21
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_INT 23
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: LD_VAR 0 5
11871: ARRAY
11872: ST_TO_ADDR
// if not area then
11873: LD_VAR 0 6
11877: NOT
11878: IFFALSE 11882
// exit ;
11880: GO 12236
// repeat ComMoveToArea ( driver , area ) ;
11882: LD_VAR 0 1
11886: PPUSH
11887: LD_VAR 0 6
11891: PPUSH
11892: CALL_OW 113
// wait ( 0 0$3 ) ;
11896: LD_INT 105
11898: PPUSH
11899: CALL_OW 67
// if not IsOk ( driver ) then
11903: LD_VAR 0 1
11907: PPUSH
11908: CALL_OW 302
11912: NOT
11913: IFFALSE 11917
// exit ;
11915: GO 12236
// until IsInArea ( driver , ruSpawn1Area ) or IsInArea ( driver , ruSpawn2Area ) or IsInArea ( driver , ruSpawn3Area ) ;
11917: LD_VAR 0 1
11921: PPUSH
11922: LD_INT 15
11924: PPUSH
11925: CALL_OW 308
11929: PUSH
11930: LD_VAR 0 1
11934: PPUSH
11935: LD_INT 17
11937: PPUSH
11938: CALL_OW 308
11942: OR
11943: PUSH
11944: LD_VAR 0 1
11948: PPUSH
11949: LD_INT 19
11951: PPUSH
11952: CALL_OW 308
11956: OR
11957: IFFALSE 11882
// RemoveUnit ( driver ) ;
11959: LD_VAR 0 1
11963: PPUSH
11964: CALL_OW 64
// end ; if GetSide ( driver ) = 6 then
11968: LD_VAR 0 1
11972: PPUSH
11973: CALL_OW 255
11977: PUSH
11978: LD_INT 6
11980: EQUAL
11981: IFFALSE 12236
// begin ComMoveXY ( driver , 97 , 139 ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: LD_INT 97
11990: PPUSH
11991: LD_INT 139
11993: PPUSH
11994: CALL_OW 111
// if GetLives ( driver ) < 1000 then
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 256
12007: PUSH
12008: LD_INT 1000
12010: LESS
12011: IFFALSE 12025
// SetTag ( driver , tHeal ) ;
12013: LD_VAR 0 1
12017: PPUSH
12018: LD_INT 3
12020: PPUSH
12021: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
12025: LD_INT 35
12027: PPUSH
12028: CALL_OW 67
// if IsDead ( driver ) then
12032: LD_VAR 0 1
12036: PPUSH
12037: CALL_OW 301
12041: IFFALSE 12045
// exit ;
12043: GO 12236
// until GetLives ( driver ) = 1000 ;
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 256
12054: PUSH
12055: LD_INT 1000
12057: EQUAL
12058: IFFALSE 12025
// SetTag ( driver , 0 ) ;
12060: LD_VAR 0 1
12064: PPUSH
12065: LD_INT 0
12067: PPUSH
12068: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12072: LD_ADDR_VAR 0 7
12076: PUSH
12077: LD_INT 26
12079: PPUSH
12080: LD_INT 22
12082: PUSH
12083: LD_INT 6
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 30
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 50
12102: PUSH
12103: EMPTY
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: PPUSH
12111: CALL_OW 70
12115: ST_TO_ADDR
// if fac then
12116: LD_VAR 0 7
12120: IFFALSE 12142
// begin ComEnterUnit ( driver , fac [ 1 ] ) ;
12122: LD_VAR 0 1
12126: PPUSH
12127: LD_VAR 0 7
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PPUSH
12136: CALL_OW 120
// exit ;
12140: GO 12236
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_barracks ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
12142: LD_ADDR_VAR 0 8
12146: PUSH
12147: LD_INT 26
12149: PPUSH
12150: LD_INT 22
12152: PUSH
12153: LD_INT 6
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 30
12162: PUSH
12163: LD_INT 5
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 3
12172: PUSH
12173: LD_INT 62
12175: PUSH
12176: EMPTY
12177: LIST
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: LD_INT 50
12185: PUSH
12186: EMPTY
12187: LIST
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: PPUSH
12195: CALL_OW 70
12199: ST_TO_ADDR
// if arm then
12200: LD_VAR 0 8
12204: IFFALSE 12236
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
12206: LD_VAR 0 1
12210: PPUSH
12211: LD_VAR 0 8
12215: PUSH
12216: LD_INT 1
12218: ARRAY
12219: PPUSH
12220: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
12224: LD_VAR 0 1
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 183
// end ; end ; end ;
12236: PPOPN 8
12238: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
12239: LD_VAR 0 3
12243: PUSH
12244: LD_INT 17
12246: EQUAL
12247: IFFALSE 12257
// kamikazeTrained := true ;
12249: LD_ADDR_EXP 6
12253: PUSH
12254: LD_INT 1
12256: ST_TO_ADDR
// end ;
12257: PPOPN 3
12259: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
12260: LD_VAR 0 1
12264: PPUSH
12265: CALL 74542 0 1
// if un in ruTanks then
12269: LD_VAR 0 1
12273: PUSH
12274: LD_EXP 36
12278: IN
12279: IFFALSE 12342
// ruConstructList := Join ( ruConstructList , [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ) ;
12281: LD_ADDR_EXP 35
12285: PUSH
12286: LD_EXP 35
12290: PPUSH
12291: LD_VAR 0 1
12295: PPUSH
12296: CALL_OW 265
12300: PUSH
12301: LD_VAR 0 1
12305: PPUSH
12306: CALL_OW 262
12310: PUSH
12311: LD_VAR 0 1
12315: PPUSH
12316: CALL_OW 263
12320: PUSH
12321: LD_VAR 0 1
12325: PPUSH
12326: CALL_OW 264
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: PPUSH
12337: CALL 53283 0 2
12341: ST_TO_ADDR
// if un = Schulz then
12342: LD_VAR 0 1
12346: PUSH
12347: LD_EXP 24
12351: EQUAL
12352: IFFALSE 12361
// YouLost ( Schulz ) ;
12354: LD_STRING Schulz
12356: PPUSH
12357: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
12361: LD_VAR 0 1
12365: PUSH
12366: LD_EXP 13
12370: EQUAL
12371: PUSH
12372: LD_VAR 0 1
12376: PPUSH
12377: CALL_OW 255
12381: PUSH
12382: LD_INT 2
12384: EQUAL
12385: AND
12386: IFFALSE 12395
// YouLost ( Heike ) ;
12388: LD_STRING Heike
12390: PPUSH
12391: CALL_OW 104
// end ; end_of_file
12395: PPOPN 1
12397: END
// export function Action ; begin
12398: LD_INT 0
12400: PPUSH
// InGameOn ;
12401: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
12405: LD_INT 1
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: LD_INT 2
12413: PPUSH
12414: LD_INT 32963
12416: NEG
12417: PPUSH
12418: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
12422: LD_INT 1
12424: PPUSH
12425: LD_INT 1
12427: PPUSH
12428: LD_INT 2
12430: PPUSH
12431: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
12435: LD_INT 173
12437: PPUSH
12438: LD_INT 149
12440: PPUSH
12441: CALL_OW 86
// PrepareExtraRussianBase ;
12445: CALL 3364 0 0
// wait ( 0 0$2 ) ;
12449: LD_INT 70
12451: PPUSH
12452: CALL_OW 67
// InGameOff ;
12456: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
12460: LD_STRING M6
12462: PPUSH
12463: CALL_OW 337
// if Count ( UnitFilter ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] , [ f_ok ] ) ) = Count ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] ) then
12467: LD_EXP 14
12471: PUSH
12472: LD_EXP 15
12476: PUSH
12477: LD_EXP 17
12481: PUSH
12482: LD_EXP 18
12486: PUSH
12487: LD_EXP 20
12491: PUSH
12492: LD_EXP 21
12496: PUSH
12497: LD_EXP 22
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: PPUSH
12511: LD_INT 50
12513: PUSH
12514: EMPTY
12515: LIST
12516: PPUSH
12517: CALL_OW 72
12521: PPUSH
12522: CALL 17674 0 1
12526: PUSH
12527: LD_EXP 14
12531: PUSH
12532: LD_EXP 15
12536: PUSH
12537: LD_EXP 17
12541: PUSH
12542: LD_EXP 18
12546: PUSH
12547: LD_EXP 20
12551: PUSH
12552: LD_EXP 21
12556: PUSH
12557: LD_EXP 22
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: PPUSH
12571: CALL 17674 0 1
12575: EQUAL
12576: IFFALSE 12585
// SetAchievement ( ACH_KNIGHT ) ;
12578: LD_STRING ACH_KNIGHT
12580: PPUSH
12581: CALL_OW 543
// SaveForQuickRestart ;
12585: CALL_OW 22
// end ;
12589: LD_VAR 0 1
12593: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
12594: LD_EXP 5
12598: PUSH
12599: LD_EXP 33
12603: PPUSH
12604: CALL_OW 302
12608: AND
12609: PUSH
12610: LD_EXP 13
12614: PPUSH
12615: CALL_OW 302
12619: AND
12620: PUSH
12621: LD_EXP 13
12625: PPUSH
12626: LD_EXP 33
12630: PPUSH
12631: CALL_OW 296
12635: PUSH
12636: LD_INT 9
12638: LESS
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_INT 2
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 91
12652: PUSH
12653: LD_EXP 13
12657: PUSH
12658: LD_INT 7
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 21
12668: PUSH
12669: LD_INT 3
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: OR
12686: AND
12687: IFFALSE 12841
12689: GO 12691
12691: DISABLE
// begin ComExit ( Rolf ) ;
12692: LD_EXP 33
12696: PPUSH
12697: CALL 53681 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
12701: LD_EXP 33
12705: PPUSH
12706: LD_EXP 13
12710: PPUSH
12711: CALL_OW 172
// InGameOn ;
12715: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
12719: LD_EXP 13
12723: PPUSH
12724: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
12728: LD_EXP 33
12732: PPUSH
12733: LD_STRING DRf-Reunion-1
12735: PPUSH
12736: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
12740: LD_EXP 33
12744: PPUSH
12745: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
12749: LD_EXP 13
12753: PPUSH
12754: LD_EXP 33
12758: PPUSH
12759: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
12763: LD_EXP 33
12767: PPUSH
12768: LD_EXP 13
12772: PPUSH
12773: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
12777: LD_EXP 13
12781: PPUSH
12782: LD_STRING DH-Reunion-2
12784: PPUSH
12785: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
12789: LD_EXP 33
12793: PPUSH
12794: LD_STRING DRf-Reunion-3
12796: PPUSH
12797: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
12801: LD_EXP 13
12805: PPUSH
12806: LD_STRING DH-Reunion-4
12808: PPUSH
12809: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
12813: LD_EXP 33
12817: PPUSH
12818: LD_STRING DRf-Reunion-5
12820: PPUSH
12821: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
12825: LD_EXP 13
12829: PPUSH
12830: LD_STRING DH-Reunion-6
12832: PPUSH
12833: CALL_OW 88
// InGameOff ;
12837: CALL_OW 9
// end ;
12841: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
12842: LD_EXP 5
12846: NOT
12847: PUSH
12848: LD_INT 22
12850: PUSH
12851: LD_INT 2
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 91
12860: PUSH
12861: LD_EXP 24
12865: PUSH
12866: LD_INT 10
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 21
12876: PUSH
12877: LD_INT 3
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: PPUSH
12889: CALL_OW 69
12893: AND
12894: IFFALSE 13681
12896: GO 12898
12898: DISABLE
// begin InGameOn ;
12899: CALL_OW 8
// ComExit ( Schulz ) ;
12903: LD_EXP 24
12907: PPUSH
12908: CALL 53681 0 1
// CenterNowOnUnits ( Schulz ) ;
12912: LD_EXP 24
12916: PPUSH
12917: CALL_OW 87
// wait ( 0 0$0.3 ) ;
12921: LD_INT 10
12923: PPUSH
12924: CALL_OW 67
// DialogueOn ;
12928: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
12932: LD_EXP 24
12936: PPUSH
12937: LD_STRING DL-Def-1
12939: PPUSH
12940: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
12944: LD_EXP 24
12948: PPUSH
12949: LD_STRING DL-Def-2
12951: PPUSH
12952: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
12956: LD_EXP 24
12960: PPUSH
12961: LD_STRING DL-Def-3
12963: PPUSH
12964: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
12968: LD_EXP 25
12972: PPUSH
12973: CALL_OW 302
12977: PUSH
12978: LD_EXP 23
12982: PPUSH
12983: CALL_OW 302
12987: AND
12988: IFFALSE 13335
// begin Say ( Basim , DBs-Def-4 ) ;
12990: LD_EXP 25
12994: PPUSH
12995: LD_STRING DBs-Def-4
12997: PPUSH
12998: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13002: LD_EXP 25
13006: PPUSH
13007: LD_STRING DBs-Def-5
13009: PPUSH
13010: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
13014: LD_EXP 23
13018: PPUSH
13019: LD_STRING DA-Def-6
13021: PPUSH
13022: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
13026: LD_EXP 25
13030: PPUSH
13031: LD_STRING DBs-Def-7
13033: PPUSH
13034: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
13038: LD_EXP 23
13042: PPUSH
13043: LD_STRING DA-Def-8
13045: PPUSH
13046: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
13050: LD_EXP 23
13054: PPUSH
13055: LD_STRING DA-Def-9
13057: PPUSH
13058: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
13062: LD_EXP 25
13066: PPUSH
13067: LD_STRING DBs-Def-10
13069: PPUSH
13070: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
13074: LD_EXP 23
13078: PPUSH
13079: LD_STRING DA-Def-11
13081: PPUSH
13082: CALL_OW 88
// if Query ( QTech ) = 1 then
13086: LD_STRING QTech
13088: PPUSH
13089: CALL_OW 97
13093: PUSH
13094: LD_INT 1
13096: EQUAL
13097: IFFALSE 13205
// begin Say ( Schulz , DL-Tech-1 ) ;
13099: LD_EXP 24
13103: PPUSH
13104: LD_STRING DL-Tech-1
13106: PPUSH
13107: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
13111: LD_EXP 24
13115: PPUSH
13116: LD_STRING DL-Tech-2
13118: PPUSH
13119: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
13123: LD_EXP 23
13127: PPUSH
13128: LD_STRING DA-Tech-3
13130: PPUSH
13131: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
13135: LD_EXP 18
13139: PPUSH
13140: LD_STRING DK-Tech-4
13142: PPUSH
13143: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
13147: LD_EXP 18
13151: PPUSH
13152: LD_STRING DK-Tech-5
13154: PPUSH
13155: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
13159: LD_EXP 25
13163: PPUSH
13164: LD_STRING DBs-Tech-6
13166: PPUSH
13167: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
13171: LD_EXP 18
13175: PPUSH
13176: LD_STRING DK-Tech-7
13178: PPUSH
13179: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
13183: LD_INT 3
13185: PPUSH
13186: LD_INT 2
13188: PPUSH
13189: LD_INT 1
13191: PPUSH
13192: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
13196: LD_STRING M7a
13198: PPUSH
13199: CALL_OW 604
// end else
13203: GO 13333
// begin Say ( Schulz , DL-Tech-a-1 ) ;
13205: LD_EXP 24
13209: PPUSH
13210: LD_STRING DL-Tech-a-1
13212: PPUSH
13213: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
13217: LD_EXP 24
13221: PPUSH
13222: LD_STRING DL-Tech-a-2
13224: PPUSH
13225: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
13229: LD_EXP 25
13233: PPUSH
13234: LD_STRING DBs-Tech-a-3
13236: PPUSH
13237: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
13241: LD_EXP 18
13245: PPUSH
13246: LD_STRING DK-Tech-a-4
13248: PPUSH
13249: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
13253: LD_EXP 18
13257: PPUSH
13258: LD_STRING DK-Tech-a-5
13260: PPUSH
13261: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
13265: LD_EXP 23
13269: PPUSH
13270: LD_STRING DA-Tech-a-6
13272: PPUSH
13273: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
13277: LD_EXP 23
13281: PPUSH
13282: LD_STRING DA-Tech-a-7
13284: PPUSH
13285: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
13289: LD_EXP 24
13293: PPUSH
13294: LD_STRING DL-Tech-a-8
13296: PPUSH
13297: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
13301: LD_EXP 23
13305: PPUSH
13306: LD_STRING DA-Tech-a-9
13308: PPUSH
13309: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13313: LD_INT 4
13315: PPUSH
13316: LD_INT 2
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
13326: LD_STRING M7b
13328: PPUSH
13329: CALL_OW 604
// end ; end else
13333: GO 13383
// if IsOk ( Basim ) then
13335: LD_EXP 25
13339: PPUSH
13340: CALL_OW 302
13344: IFFALSE 13383
// begin Say ( Basim , DBs-Def-4 ) ;
13346: LD_EXP 25
13350: PPUSH
13351: LD_STRING DBs-Def-4
13353: PPUSH
13354: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13358: LD_EXP 25
13362: PPUSH
13363: LD_STRING DBs-Def-5
13365: PPUSH
13366: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13370: LD_INT 4
13372: PPUSH
13373: LD_INT 2
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: CALL_OW 322
// end ; DialogueOff ;
13383: CALL_OW 7
// InGameOff ;
13387: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
13391: LD_STRING M7
13393: PPUSH
13394: CALL_OW 337
// playerInBase := true ;
13398: LD_ADDR_EXP 5
13402: PUSH
13403: LD_INT 1
13405: ST_TO_ADDR
// wait ( 0 0$30 ) ;
13406: LD_INT 1050
13408: PPUSH
13409: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13413: LD_INT 35
13415: PPUSH
13416: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) ;
13420: LD_INT 22
13422: PUSH
13423: LD_INT 2
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 50
13432: PUSH
13433: EMPTY
13434: LIST
13435: PUSH
13436: LD_INT 3
13438: PUSH
13439: LD_INT 57
13441: PUSH
13442: EMPTY
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 30
13451: PUSH
13452: LD_INT 30
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 69
13469: IFFALSE 13413
// if IsOk ( Kurt ) then
13471: LD_EXP 22
13475: PPUSH
13476: CALL_OW 302
13480: IFFALSE 13668
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
13482: LD_INT 22
13484: PUSH
13485: LD_INT 2
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 50
13494: PUSH
13495: EMPTY
13496: LIST
13497: PUSH
13498: LD_INT 3
13500: PUSH
13501: LD_INT 57
13503: PUSH
13504: EMPTY
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 30
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: PPUSH
13527: CALL_OW 69
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: PPUSH
13536: CALL_OW 87
// DialogueOn ;
13540: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
13544: LD_EXP 22
13548: PPUSH
13549: LD_STRING DKs-Med-1
13551: PPUSH
13552: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
13556: LD_EXP 22
13560: PPUSH
13561: LD_STRING DKs-Med-2
13563: PPUSH
13564: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
13568: LD_EXP 24
13572: PPUSH
13573: LD_STRING DL-Med-3
13575: PPUSH
13576: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
13580: LD_EXP 24
13584: PPUSH
13585: LD_STRING DL-Med-4
13587: PPUSH
13588: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
13592: LD_EXP 22
13596: PPUSH
13597: LD_STRING DKs-Med-5
13599: PPUSH
13600: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
13604: LD_EXP 22
13608: PPUSH
13609: LD_STRING DKs-Med-6
13611: PPUSH
13612: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
13616: LD_EXP 22
13620: PPUSH
13621: LD_STRING DKs-Med-7
13623: PPUSH
13624: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
13628: LD_EXP 22
13632: PPUSH
13633: LD_STRING DKs-Med-8
13635: PPUSH
13636: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
13640: LD_EXP 24
13644: PPUSH
13645: LD_STRING DL-Med-9
13647: PPUSH
13648: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
13652: LD_EXP 24
13656: PPUSH
13657: LD_STRING DL-Med-10
13659: PPUSH
13660: CALL_OW 88
// DialogueOff ;
13664: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
13668: LD_STRING M8-
13670: PUSH
13671: LD_OWVAR 67
13675: STR
13676: PPUSH
13677: CALL_OW 337
// end ;
13681: END
// every 0 0$1 trigger playerInBase do
13682: LD_EXP 5
13686: IFFALSE 13706
13688: GO 13690
13690: DISABLE
// begin enable ;
13691: ENABLE
// missionTime := missionTime + 0 0$1 ;
13692: LD_ADDR_EXP 9
13696: PUSH
13697: LD_EXP 9
13701: PUSH
13702: LD_INT 35
13704: PLUS
13705: ST_TO_ADDR
// end ;
13706: END
// every 0 0$2 trigger playerInBase and apeDriver do
13707: LD_EXP 5
13711: PUSH
13712: LD_EXP 8
13716: AND
13717: IFFALSE 14114
13719: GO 13721
13721: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
13722: LD_STRING M7a_out
13724: PPUSH
13725: CALL_OW 337
// wait ( 0 0$2 ) ;
13729: LD_INT 70
13731: PPUSH
13732: CALL_OW 67
// DialogueOn ;
13736: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
13740: LD_INT 22
13742: PUSH
13743: LD_INT 2
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 33
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PPUSH
13764: CALL_OW 69
13768: PUSH
13769: LD_INT 1
13771: ARRAY
13772: PPUSH
13773: CALL_OW 87
// if IsOk ( Mia ) then
13777: LD_EXP 27
13781: PPUSH
13782: CALL_OW 302
13786: IFFALSE 13812
// begin Say ( Mia , DMm-Apedrive-1 ) ;
13788: LD_EXP 27
13792: PPUSH
13793: LD_STRING DMm-Apedrive-1
13795: PPUSH
13796: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
13800: LD_EXP 15
13804: PPUSH
13805: LD_STRING DM-Apedrive-2
13807: PPUSH
13808: CALL_OW 88
// end ; if IsOk ( Jenna ) then
13812: LD_EXP 29
13816: PPUSH
13817: CALL_OW 302
13821: IFFALSE 14110
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
13823: LD_EXP 29
13827: PPUSH
13828: LD_STRING DJm-Apedrive-3
13830: PPUSH
13831: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
13835: LD_EXP 29
13839: PPUSH
13840: LD_STRING DJm-Apedrive-4
13842: PPUSH
13843: CALL_OW 88
// if IsOk ( Basim ) then
13847: LD_EXP 25
13851: PPUSH
13852: CALL_OW 302
13856: IFFALSE 14110
// begin Say ( Basim , DBs-Apedrive-5 ) ;
13858: LD_EXP 25
13862: PPUSH
13863: LD_STRING DBs-Apedrive-5
13865: PPUSH
13866: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
13870: LD_EXP 25
13874: PPUSH
13875: LD_STRING DBs-Apedrive-6
13877: PPUSH
13878: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
13882: LD_EXP 29
13886: PPUSH
13887: LD_STRING DJm-Apedrive-7
13889: PPUSH
13890: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
13894: LD_EXP 25
13898: PPUSH
13899: LD_STRING DBs-Apedrive-8
13901: PPUSH
13902: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
13906: LD_EXP 29
13910: PPUSH
13911: LD_STRING DJm-Apedrive-9
13913: PPUSH
13914: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
13918: LD_EXP 25
13922: PPUSH
13923: LD_STRING DBs-Apedrive-10
13925: PPUSH
13926: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
13930: LD_EXP 29
13934: PPUSH
13935: LD_STRING DJm-Apedrive-11
13937: PPUSH
13938: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
13942: LD_EXP 18
13946: PPUSH
13947: LD_STRING DK-Apedrive-12
13949: PPUSH
13950: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
13954: LD_EXP 29
13958: PPUSH
13959: LD_STRING DJm-Apedrive-13
13961: PPUSH
13962: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
13966: LD_EXP 29
13970: PPUSH
13971: LD_STRING DJm-Apedrive-14
13973: PPUSH
13974: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
13978: LD_EXP 29
13982: PPUSH
13983: LD_STRING DJm-Apedrive-15
13985: PPUSH
13986: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
13990: LD_EXP 29
13994: PPUSH
13995: LD_STRING DJm-Apedrive-16
13997: PPUSH
13998: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
14002: LD_EXP 27
14006: PPUSH
14007: LD_STRING DMm-Apedrive-17
14009: PPUSH
14010: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
14014: LD_EXP 27
14018: PPUSH
14019: LD_STRING DMm-Apedrive-18
14021: PPUSH
14022: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
14026: LD_EXP 27
14030: PPUSH
14031: LD_STRING DMm-Apedrive-19
14033: PPUSH
14034: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
14038: LD_EXP 27
14042: PPUSH
14043: LD_STRING DMm-Apedrive-20
14045: PPUSH
14046: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
14050: LD_EXP 18
14054: PPUSH
14055: LD_STRING DK-Apedrive-21
14057: PPUSH
14058: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
14062: LD_EXP 18
14066: PPUSH
14067: LD_STRING DK-Apedrive-22
14069: PPUSH
14070: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
14074: LD_EXP 13
14078: PPUSH
14079: LD_STRING DH-Apedrive-23
14081: PPUSH
14082: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
14086: LD_EXP 26
14090: PPUSH
14091: LD_STRING DLt-Apedrive-24
14093: PPUSH
14094: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
14098: LD_EXP 26
14102: PPUSH
14103: LD_STRING DLt-Apedrive-25
14105: PPUSH
14106: CALL_OW 88
// end ; end ; DialogueOff ;
14110: CALL_OW 7
// end ;
14114: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
14115: LD_EXP 5
14119: PUSH
14120: LD_EXP 6
14124: AND
14125: IFFALSE 14137
14127: GO 14129
14129: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
14130: LD_STRING M7b_out
14132: PPUSH
14133: CALL_OW 337
14137: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
14138: LD_EXP 5
14142: PUSH
14143: LD_INT 22
14145: PUSH
14146: LD_INT 2
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: LD_INT 30
14155: PUSH
14156: LD_INT 3
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 3
14165: PUSH
14166: LD_INT 58
14168: PUSH
14169: EMPTY
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: PPUSH
14181: CALL_OW 69
14185: AND
14186: PUSH
14187: LD_EXP 13
14191: PPUSH
14192: CALL_OW 302
14196: AND
14197: PUSH
14198: LD_EXP 24
14202: PPUSH
14203: CALL_OW 302
14207: AND
14208: IFFALSE 14381
14210: GO 14212
14212: DISABLE
// begin DialogueOn ;
14213: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
14217: LD_EXP 24
14221: PPUSH
14222: LD_STRING DL-Mort-1
14224: PPUSH
14225: CALL_OW 88
// if IsOk ( Markov ) then
14229: LD_EXP 20
14233: PPUSH
14234: CALL_OW 302
14238: IFFALSE 14291
// begin Say ( Heike , DH-Mort-2 ) ;
14240: LD_EXP 13
14244: PPUSH
14245: LD_STRING DH-Mort-2
14247: PPUSH
14248: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
14252: LD_EXP 20
14256: PPUSH
14257: LD_STRING DMar-Mort-3
14259: PPUSH
14260: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
14264: LD_EXP 20
14268: PPUSH
14269: LD_STRING DMar-Mort-4
14271: PPUSH
14272: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14276: LD_INT 88
14278: PPUSH
14279: LD_INT 2
14281: PPUSH
14282: LD_INT 1
14284: PPUSH
14285: CALL_OW 322
// end else
14289: GO 14377
// if IsOk ( Olaf ) then
14291: LD_EXP 21
14295: PPUSH
14296: CALL_OW 302
14300: IFFALSE 14353
// begin Say ( Heike , DH-Mort-a-2 ) ;
14302: LD_EXP 13
14306: PPUSH
14307: LD_STRING DH-Mort-a-2
14309: PPUSH
14310: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
14314: LD_EXP 21
14318: PPUSH
14319: LD_STRING DO-Mort-a-3
14321: PPUSH
14322: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
14326: LD_EXP 21
14330: PPUSH
14331: LD_STRING DO-Mort-a-4
14333: PPUSH
14334: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14338: LD_INT 88
14340: PPUSH
14341: LD_INT 2
14343: PPUSH
14344: LD_INT 1
14346: PPUSH
14347: CALL_OW 322
// end else
14351: GO 14377
// begin Say ( Heike , DH-Mort-a-5 ) ;
14353: LD_EXP 13
14357: PPUSH
14358: LD_STRING DH-Mort-a-5
14360: PPUSH
14361: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
14365: LD_EXP 13
14369: PPUSH
14370: LD_STRING DH-Mort-a-6
14372: PPUSH
14373: CALL_OW 88
// end ; DialogueOff ;
14377: CALL_OW 7
// end ;
14381: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
14382: LD_EXP 18
14386: PPUSH
14387: CALL_OW 256
14391: PUSH
14392: LD_INT 10
14394: LESS
14395: IFFALSE 14497
14397: GO 14399
14399: DISABLE
// begin DialogueOn ;
14400: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14404: LD_EXP 18
14408: PPUSH
14409: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
14413: LD_EXP 18
14417: PPUSH
14418: LD_STRING DK-Death-1
14420: PPUSH
14421: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
14425: LD_EXP 18
14429: PPUSH
14430: LD_STRING DK-Death-2
14432: PPUSH
14433: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
14437: LD_EXP 18
14441: PPUSH
14442: LD_STRING DK-Death-3
14444: PPUSH
14445: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
14449: LD_EXP 13
14453: PPUSH
14454: LD_STRING DH-Death-4
14456: PPUSH
14457: CALL_OW 88
// if IsOk ( Markov ) then
14461: LD_EXP 20
14465: PPUSH
14466: CALL_OW 302
14470: IFFALSE 14484
// Say ( Markov , DMar-Death-5 ) ;
14472: LD_EXP 20
14476: PPUSH
14477: LD_STRING DMar-Death-5
14479: PPUSH
14480: CALL_OW 88
// DialogueOff ;
14484: CALL_OW 7
// KillUnit ( Kaia ) ;
14488: LD_EXP 18
14492: PPUSH
14493: CALL_OW 66
// end ;
14497: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib ;
14498: LD_EXP 10
14502: PUSH
14503: LD_INT 81
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 50
14515: PUSH
14516: EMPTY
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: NOT
14528: AND
14529: IFFALSE 15377
14531: GO 14533
14533: DISABLE
14534: LD_INT 0
14536: PPUSH
14537: PPUSH
// begin InGameOn ;
14538: CALL_OW 8
// DialogueOn ;
14542: CALL_OW 6
// if time09 + time09c + tick < 80 80$00 then
14546: LD_EXP 3
14550: PUSH
14551: LD_EXP 4
14555: PLUS
14556: PUSH
14557: LD_OWVAR 1
14561: PLUS
14562: PUSH
14563: LD_INT 168000
14565: LESS
14566: IFFALSE 14575
// SetAchievement ( ACH_HSPEED_9 ) ;
14568: LD_STRING ACH_HSPEED_9
14570: PPUSH
14571: CALL_OW 543
// CenterOnNow ( Schulz ) ;
14575: LD_EXP 24
14579: PPUSH
14580: CALL 57392 0 1
// dwait ( 0 0$0.3 ) ;
14584: LD_INT 10
14586: PPUSH
14587: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
14591: LD_EXP 24
14595: PPUSH
14596: LD_STRING DL-End-1
14598: PPUSH
14599: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
14603: LD_EXP 13
14607: PPUSH
14608: LD_STRING DH-End-2
14610: PPUSH
14611: CALL_OW 88
// if IsOk ( Kaia ) then
14615: LD_EXP 18
14619: PPUSH
14620: CALL_OW 302
14624: IFFALSE 14686
// begin SaveCharacters ( Kaia , 09_Kaia ) ;
14626: LD_EXP 18
14630: PPUSH
14631: LD_STRING 09_Kaia
14633: PPUSH
14634: CALL_OW 38
// Say ( Kaia , DK-End-a-3 ) ;
14638: LD_EXP 18
14642: PPUSH
14643: LD_STRING DK-End-a-3
14645: PPUSH
14646: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
14650: LD_EXP 18
14654: PPUSH
14655: LD_STRING DK-End-a-4
14657: PPUSH
14658: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
14662: LD_EXP 24
14666: PPUSH
14667: LD_STRING DL-End-a-5
14669: PPUSH
14670: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
14674: LD_EXP 24
14678: PPUSH
14679: LD_STRING DL-End-a-6
14681: PPUSH
14682: CALL_OW 88
// end ; SaveCharacters ( Heike , 09_Heike ) ;
14686: LD_EXP 13
14690: PPUSH
14691: LD_STRING 09_Heike
14693: PPUSH
14694: CALL_OW 38
// SaveCharacters ( Schulz , 09_Schulz ) ;
14698: LD_EXP 24
14702: PPUSH
14703: LD_STRING 09_Schulz
14705: PPUSH
14706: CALL_OW 38
// if IsOk ( Basim ) then
14710: LD_EXP 25
14714: PPUSH
14715: CALL_OW 302
14719: IFFALSE 14733
// SaveCharacters ( Basim , 09_Basim ) ;
14721: LD_EXP 25
14725: PPUSH
14726: LD_STRING 09_Basim
14728: PPUSH
14729: CALL_OW 38
// if IsOk ( Givi ) then
14733: LD_EXP 14
14737: PPUSH
14738: CALL_OW 302
14742: IFFALSE 14756
// SaveCharacters ( Givi , 09_Givi ) ;
14744: LD_EXP 14
14748: PPUSH
14749: LD_STRING 09_Givi
14751: PPUSH
14752: CALL_OW 38
// if IsOk ( Mike ) then
14756: LD_EXP 15
14760: PPUSH
14761: CALL_OW 302
14765: IFFALSE 14779
// SaveCharacters ( Mike , 09_Mike ) ;
14767: LD_EXP 15
14771: PPUSH
14772: LD_STRING 09_Mike
14774: PPUSH
14775: CALL_OW 38
// if IsOk ( Ibrahim ) then
14779: LD_EXP 16
14783: PPUSH
14784: CALL_OW 302
14788: IFFALSE 14802
// SaveCharacters ( Ibrahim , 09_Ibrahim ) ;
14790: LD_EXP 16
14794: PPUSH
14795: LD_STRING 09_Ibrahim
14797: PPUSH
14798: CALL_OW 38
// if IsOk ( Kamil ) then
14802: LD_EXP 17
14806: PPUSH
14807: CALL_OW 302
14811: IFFALSE 14825
// SaveCharacters ( Kamil , 09_Kamil ) ;
14813: LD_EXP 17
14817: PPUSH
14818: LD_STRING 09_Kamil
14820: PPUSH
14821: CALL_OW 38
// if IsOk ( Sophia ) then
14825: LD_EXP 19
14829: PPUSH
14830: CALL_OW 302
14834: IFFALSE 14848
// SaveCharacters ( Sophia , 09_Sophia ) ;
14836: LD_EXP 19
14840: PPUSH
14841: LD_STRING 09_Sophia
14843: PPUSH
14844: CALL_OW 38
// if IsOk ( Markov ) then
14848: LD_EXP 20
14852: PPUSH
14853: CALL_OW 302
14857: IFFALSE 14871
// SaveCharacters ( Markov , 09_Markov ) ;
14859: LD_EXP 20
14863: PPUSH
14864: LD_STRING 09_Markov
14866: PPUSH
14867: CALL_OW 38
// if IsOk ( Olaf ) then
14871: LD_EXP 21
14875: PPUSH
14876: CALL_OW 302
14880: IFFALSE 14894
// SaveCharacters ( Olaf , 09_Olaf ) ;
14882: LD_EXP 21
14886: PPUSH
14887: LD_STRING 09_Olaf
14889: PPUSH
14890: CALL_OW 38
// if IsOk ( Kurt ) then
14894: LD_EXP 22
14898: PPUSH
14899: CALL_OW 302
14903: IFFALSE 14917
// SaveCharacters ( Kurt , 09_Kurt ) ;
14905: LD_EXP 22
14909: PPUSH
14910: LD_STRING 09_Kurt
14912: PPUSH
14913: CALL_OW 38
// if IsOk ( Aviradze ) then
14917: LD_EXP 23
14921: PPUSH
14922: CALL_OW 302
14926: IFFALSE 14940
// SaveCharacters ( Aviradze , 09_Aviradze ) ;
14928: LD_EXP 23
14932: PPUSH
14933: LD_STRING 09_Aviradze
14935: PPUSH
14936: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09_heikeSecondSquad ) ;
14940: LD_EXP 30
14944: PPUSH
14945: LD_INT 50
14947: PUSH
14948: EMPTY
14949: LIST
14950: PPUSH
14951: CALL_OW 72
14955: PPUSH
14956: LD_STRING 09_heikeSecondSquad
14958: PPUSH
14959: CALL_OW 38
// if GetTech ( tech_apeBrain , 2 ) = state_researched then
14963: LD_INT 4
14965: PPUSH
14966: LD_INT 2
14968: PPUSH
14969: CALL_OW 321
14973: PUSH
14974: LD_INT 2
14976: EQUAL
14977: IFFALSE 14989
// SaveVariable ( 1 , 09_ApeBrain ) ;
14979: LD_INT 1
14981: PPUSH
14982: LD_STRING 09_ApeBrain
14984: PPUSH
14985: CALL_OW 39
// if GetTech ( tech_apeNeural , 2 ) = state_researched then
14989: LD_INT 3
14991: PPUSH
14992: LD_INT 2
14994: PPUSH
14995: CALL_OW 321
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: IFFALSE 15015
// SaveVariable ( 1 , 09_ApeNeural ) ;
15005: LD_INT 1
15007: PPUSH
15008: LD_STRING 09_ApeNeural
15010: PPUSH
15011: CALL_OW 39
// sib := 0 ;
15015: LD_ADDR_VAR 0 2
15019: PUSH
15020: LD_INT 0
15022: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
15023: LD_ADDR_VAR 0 1
15027: PUSH
15028: LD_INT 22
15030: PUSH
15031: LD_INT 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: LD_INT 30
15043: PUSH
15044: LD_INT 0
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 30
15053: PUSH
15054: LD_INT 1
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PPUSH
15070: CALL_OW 69
15074: PUSH
15075: FOR_IN
15076: IFFALSE 15109
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
15078: LD_ADDR_VAR 0 2
15082: PUSH
15083: LD_VAR 0 2
15087: PUSH
15088: LD_VAR 0 1
15092: PPUSH
15093: CALL_OW 274
15097: PPUSH
15098: LD_INT 3
15100: PPUSH
15101: CALL_OW 275
15105: PLUS
15106: ST_TO_ADDR
15107: GO 15075
15109: POP
15110: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
15111: LD_ADDR_VAR 0 1
15115: PUSH
15116: LD_INT 22
15118: PUSH
15119: LD_INT 2
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 2
15128: PUSH
15129: LD_INT 34
15131: PUSH
15132: LD_INT 32
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 34
15141: PUSH
15142: LD_INT 51
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: PUSH
15163: FOR_IN
15164: IFFALSE 15192
// sib := sib + GetCargo ( i , mat_siberit ) ;
15166: LD_ADDR_VAR 0 2
15170: PUSH
15171: LD_VAR 0 2
15175: PUSH
15176: LD_VAR 0 1
15180: PPUSH
15181: LD_INT 3
15183: PPUSH
15184: CALL_OW 289
15188: PLUS
15189: ST_TO_ADDR
15190: GO 15163
15192: POP
15193: POP
// if sib >= sibToCollect then
15194: LD_VAR 0 2
15198: PUSH
15199: LD_EXP 7
15203: GREATEREQUAL
15204: IFFALSE 15218
// AddMedal ( med1 , 1 ) else
15206: LD_STRING med1
15208: PPUSH
15209: LD_INT 1
15211: PPUSH
15212: CALL_OW 101
15216: GO 15229
// AddMedal ( med1 , - 1 ) ;
15218: LD_STRING med1
15220: PPUSH
15221: LD_INT 1
15223: NEG
15224: PPUSH
15225: CALL_OW 101
// if apeDriver or kamikazeTrained then
15229: LD_EXP 8
15233: PUSH
15234: LD_EXP 6
15238: OR
15239: IFFALSE 15253
// AddMedal ( med2 , 1 ) else
15241: LD_STRING med2
15243: PPUSH
15244: LD_INT 1
15246: PPUSH
15247: CALL_OW 101
15251: GO 15264
// AddMedal ( med2 , - 1 ) ;
15253: LD_STRING med2
15255: PPUSH
15256: LD_INT 1
15258: NEG
15259: PPUSH
15260: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
15264: LD_EXP 14
15268: PUSH
15269: LD_EXP 15
15273: PUSH
15274: LD_EXP 16
15278: PUSH
15279: LD_EXP 17
15283: PUSH
15284: LD_EXP 18
15288: PUSH
15289: LD_EXP 19
15293: PUSH
15294: LD_EXP 20
15298: PUSH
15299: LD_EXP 21
15303: PUSH
15304: LD_EXP 22
15308: PUSH
15309: LD_EXP 23
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: PPUSH
15326: LD_INT 50
15328: PUSH
15329: EMPTY
15330: LIST
15331: PPUSH
15332: CALL_OW 72
15336: NOT
15337: IFFALSE 15352
// AddMedal ( med3 , - 1 ) else
15339: LD_STRING med3
15341: PPUSH
15342: LD_INT 1
15344: NEG
15345: PPUSH
15346: CALL_OW 101
15350: GO 15362
// AddMedal ( med3 , 1 ) ;
15352: LD_STRING med3
15354: PPUSH
15355: LD_INT 1
15357: PPUSH
15358: CALL_OW 101
// GiveMedals ( MAIN ) ;
15362: LD_STRING MAIN
15364: PPUSH
15365: CALL_OW 102
// YouWin ;
15369: CALL_OW 103
// DialogueOff ;
15373: CALL_OW 7
// end ; end_of_file
15377: PPOPN 2
15379: END
// every 0 0$25 + 0 0$20 trigger playerInBase do var i , tmp ;
15380: LD_EXP 5
15384: IFFALSE 15485
15386: GO 15388
15388: DISABLE
15389: LD_INT 0
15391: PPUSH
15392: PPUSH
// begin enable ;
15393: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
15394: LD_ADDR_VAR 0 2
15398: PUSH
15399: LD_INT 9
15401: PUSH
15402: LD_INT 10
15404: PUSH
15405: LD_INT 11
15407: PUSH
15408: LD_INT 12
15410: PUSH
15411: LD_INT 13
15413: PUSH
15414: LD_INT 14
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
15425: LD_ADDR_VAR 0 1
15429: PUSH
15430: LD_VAR 0 2
15434: PUSH
15435: LD_INT 1
15437: PPUSH
15438: LD_INT 6
15440: PPUSH
15441: CALL_OW 12
15445: ARRAY
15446: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 16 then
15447: LD_VAR 0 1
15451: PPUSH
15452: CALL_OW 435
15456: PUSH
15457: LD_INT 16
15459: LESS
15460: IFFALSE 15485
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
15462: LD_INT 1
15464: PPUSH
15465: LD_INT 5
15467: PPUSH
15468: CALL_OW 12
15472: PPUSH
15473: LD_VAR 0 1
15477: PPUSH
15478: LD_INT 1
15480: PPUSH
15481: CALL_OW 55
// end ; end_of_file
15485: PPOPN 2
15487: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15488: LD_INT 0
15490: PPUSH
15491: PPUSH
// if exist_mode then
15492: LD_VAR 0 2
15496: IFFALSE 15542
// begin unit := CreateCharacter ( prefix & ident ) ;
15498: LD_ADDR_VAR 0 5
15502: PUSH
15503: LD_VAR 0 3
15507: PUSH
15508: LD_VAR 0 1
15512: STR
15513: PPUSH
15514: CALL_OW 34
15518: ST_TO_ADDR
// if unit then
15519: LD_VAR 0 5
15523: IFFALSE 15540
// DeleteCharacters ( prefix & ident ) ;
15525: LD_VAR 0 3
15529: PUSH
15530: LD_VAR 0 1
15534: STR
15535: PPUSH
15536: CALL_OW 40
// end else
15540: GO 15557
// unit := NewCharacter ( ident ) ;
15542: LD_ADDR_VAR 0 5
15546: PUSH
15547: LD_VAR 0 1
15551: PPUSH
15552: CALL_OW 25
15556: ST_TO_ADDR
// result := unit ;
15557: LD_ADDR_VAR 0 4
15561: PUSH
15562: LD_VAR 0 5
15566: ST_TO_ADDR
// end ;
15567: LD_VAR 0 4
15571: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15572: LD_INT 0
15574: PPUSH
15575: PPUSH
// if exist_mode then
15576: LD_VAR 0 2
15580: IFFALSE 15605
// unit := CreateCharacter ( prefix & ident ) else
15582: LD_ADDR_VAR 0 5
15586: PUSH
15587: LD_VAR 0 3
15591: PUSH
15592: LD_VAR 0 1
15596: STR
15597: PPUSH
15598: CALL_OW 34
15602: ST_TO_ADDR
15603: GO 15620
// unit := NewCharacter ( ident ) ;
15605: LD_ADDR_VAR 0 5
15609: PUSH
15610: LD_VAR 0 1
15614: PPUSH
15615: CALL_OW 25
15619: ST_TO_ADDR
// result := unit ;
15620: LD_ADDR_VAR 0 4
15624: PUSH
15625: LD_VAR 0 5
15629: ST_TO_ADDR
// end ;
15630: LD_VAR 0 4
15634: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15635: LD_INT 0
15637: PPUSH
15638: PPUSH
// if not side or not nation then
15639: LD_VAR 0 1
15643: NOT
15644: PUSH
15645: LD_VAR 0 2
15649: NOT
15650: OR
15651: IFFALSE 15655
// exit ;
15653: GO 16423
// case nation of nation_american :
15655: LD_VAR 0 2
15659: PUSH
15660: LD_INT 1
15662: DOUBLE
15663: EQUAL
15664: IFTRUE 15668
15666: GO 15882
15668: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15669: LD_ADDR_VAR 0 4
15673: PUSH
15674: LD_INT 35
15676: PUSH
15677: LD_INT 45
15679: PUSH
15680: LD_INT 46
15682: PUSH
15683: LD_INT 47
15685: PUSH
15686: LD_INT 82
15688: PUSH
15689: LD_INT 83
15691: PUSH
15692: LD_INT 84
15694: PUSH
15695: LD_INT 85
15697: PUSH
15698: LD_INT 86
15700: PUSH
15701: LD_INT 1
15703: PUSH
15704: LD_INT 2
15706: PUSH
15707: LD_INT 6
15709: PUSH
15710: LD_INT 15
15712: PUSH
15713: LD_INT 16
15715: PUSH
15716: LD_INT 7
15718: PUSH
15719: LD_INT 12
15721: PUSH
15722: LD_INT 13
15724: PUSH
15725: LD_INT 10
15727: PUSH
15728: LD_INT 14
15730: PUSH
15731: LD_INT 20
15733: PUSH
15734: LD_INT 21
15736: PUSH
15737: LD_INT 22
15739: PUSH
15740: LD_INT 25
15742: PUSH
15743: LD_INT 32
15745: PUSH
15746: LD_INT 27
15748: PUSH
15749: LD_INT 36
15751: PUSH
15752: LD_INT 69
15754: PUSH
15755: LD_INT 39
15757: PUSH
15758: LD_INT 34
15760: PUSH
15761: LD_INT 40
15763: PUSH
15764: LD_INT 48
15766: PUSH
15767: LD_INT 49
15769: PUSH
15770: LD_INT 50
15772: PUSH
15773: LD_INT 51
15775: PUSH
15776: LD_INT 52
15778: PUSH
15779: LD_INT 53
15781: PUSH
15782: LD_INT 54
15784: PUSH
15785: LD_INT 55
15787: PUSH
15788: LD_INT 56
15790: PUSH
15791: LD_INT 57
15793: PUSH
15794: LD_INT 58
15796: PUSH
15797: LD_INT 59
15799: PUSH
15800: LD_INT 60
15802: PUSH
15803: LD_INT 61
15805: PUSH
15806: LD_INT 62
15808: PUSH
15809: LD_INT 80
15811: PUSH
15812: LD_INT 82
15814: PUSH
15815: LD_INT 83
15817: PUSH
15818: LD_INT 84
15820: PUSH
15821: LD_INT 85
15823: PUSH
15824: LD_INT 86
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: ST_TO_ADDR
15880: GO 16347
15882: LD_INT 2
15884: DOUBLE
15885: EQUAL
15886: IFTRUE 15890
15888: GO 16116
15890: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15891: LD_ADDR_VAR 0 4
15895: PUSH
15896: LD_INT 35
15898: PUSH
15899: LD_INT 45
15901: PUSH
15902: LD_INT 46
15904: PUSH
15905: LD_INT 47
15907: PUSH
15908: LD_INT 82
15910: PUSH
15911: LD_INT 83
15913: PUSH
15914: LD_INT 84
15916: PUSH
15917: LD_INT 85
15919: PUSH
15920: LD_INT 87
15922: PUSH
15923: LD_INT 70
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: LD_INT 11
15931: PUSH
15932: LD_INT 3
15934: PUSH
15935: LD_INT 4
15937: PUSH
15938: LD_INT 5
15940: PUSH
15941: LD_INT 6
15943: PUSH
15944: LD_INT 15
15946: PUSH
15947: LD_INT 18
15949: PUSH
15950: LD_INT 7
15952: PUSH
15953: LD_INT 17
15955: PUSH
15956: LD_INT 8
15958: PUSH
15959: LD_INT 20
15961: PUSH
15962: LD_INT 21
15964: PUSH
15965: LD_INT 22
15967: PUSH
15968: LD_INT 72
15970: PUSH
15971: LD_INT 26
15973: PUSH
15974: LD_INT 69
15976: PUSH
15977: LD_INT 39
15979: PUSH
15980: LD_INT 40
15982: PUSH
15983: LD_INT 41
15985: PUSH
15986: LD_INT 42
15988: PUSH
15989: LD_INT 43
15991: PUSH
15992: LD_INT 48
15994: PUSH
15995: LD_INT 49
15997: PUSH
15998: LD_INT 50
16000: PUSH
16001: LD_INT 51
16003: PUSH
16004: LD_INT 52
16006: PUSH
16007: LD_INT 53
16009: PUSH
16010: LD_INT 54
16012: PUSH
16013: LD_INT 55
16015: PUSH
16016: LD_INT 56
16018: PUSH
16019: LD_INT 60
16021: PUSH
16022: LD_INT 61
16024: PUSH
16025: LD_INT 62
16027: PUSH
16028: LD_INT 66
16030: PUSH
16031: LD_INT 67
16033: PUSH
16034: LD_INT 68
16036: PUSH
16037: LD_INT 81
16039: PUSH
16040: LD_INT 82
16042: PUSH
16043: LD_INT 83
16045: PUSH
16046: LD_INT 84
16048: PUSH
16049: LD_INT 85
16051: PUSH
16052: LD_INT 87
16054: PUSH
16055: LD_INT 88
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: ST_TO_ADDR
16114: GO 16347
16116: LD_INT 3
16118: DOUBLE
16119: EQUAL
16120: IFTRUE 16124
16122: GO 16346
16124: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16125: LD_ADDR_VAR 0 4
16129: PUSH
16130: LD_INT 46
16132: PUSH
16133: LD_INT 47
16135: PUSH
16136: LD_INT 1
16138: PUSH
16139: LD_INT 2
16141: PUSH
16142: LD_INT 82
16144: PUSH
16145: LD_INT 83
16147: PUSH
16148: LD_INT 84
16150: PUSH
16151: LD_INT 85
16153: PUSH
16154: LD_INT 86
16156: PUSH
16157: LD_INT 11
16159: PUSH
16160: LD_INT 9
16162: PUSH
16163: LD_INT 20
16165: PUSH
16166: LD_INT 19
16168: PUSH
16169: LD_INT 21
16171: PUSH
16172: LD_INT 24
16174: PUSH
16175: LD_INT 22
16177: PUSH
16178: LD_INT 25
16180: PUSH
16181: LD_INT 28
16183: PUSH
16184: LD_INT 29
16186: PUSH
16187: LD_INT 30
16189: PUSH
16190: LD_INT 31
16192: PUSH
16193: LD_INT 37
16195: PUSH
16196: LD_INT 38
16198: PUSH
16199: LD_INT 32
16201: PUSH
16202: LD_INT 27
16204: PUSH
16205: LD_INT 33
16207: PUSH
16208: LD_INT 69
16210: PUSH
16211: LD_INT 39
16213: PUSH
16214: LD_INT 34
16216: PUSH
16217: LD_INT 40
16219: PUSH
16220: LD_INT 71
16222: PUSH
16223: LD_INT 23
16225: PUSH
16226: LD_INT 44
16228: PUSH
16229: LD_INT 48
16231: PUSH
16232: LD_INT 49
16234: PUSH
16235: LD_INT 50
16237: PUSH
16238: LD_INT 51
16240: PUSH
16241: LD_INT 52
16243: PUSH
16244: LD_INT 53
16246: PUSH
16247: LD_INT 54
16249: PUSH
16250: LD_INT 55
16252: PUSH
16253: LD_INT 56
16255: PUSH
16256: LD_INT 57
16258: PUSH
16259: LD_INT 58
16261: PUSH
16262: LD_INT 59
16264: PUSH
16265: LD_INT 63
16267: PUSH
16268: LD_INT 64
16270: PUSH
16271: LD_INT 65
16273: PUSH
16274: LD_INT 82
16276: PUSH
16277: LD_INT 83
16279: PUSH
16280: LD_INT 84
16282: PUSH
16283: LD_INT 85
16285: PUSH
16286: LD_INT 86
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: ST_TO_ADDR
16344: GO 16347
16346: POP
// if state > - 1 and state < 3 then
16347: LD_VAR 0 3
16351: PUSH
16352: LD_INT 1
16354: NEG
16355: GREATER
16356: PUSH
16357: LD_VAR 0 3
16361: PUSH
16362: LD_INT 3
16364: LESS
16365: AND
16366: IFFALSE 16423
// for i in result do
16368: LD_ADDR_VAR 0 5
16372: PUSH
16373: LD_VAR 0 4
16377: PUSH
16378: FOR_IN
16379: IFFALSE 16421
// if GetTech ( i , side ) <> state then
16381: LD_VAR 0 5
16385: PPUSH
16386: LD_VAR 0 1
16390: PPUSH
16391: CALL_OW 321
16395: PUSH
16396: LD_VAR 0 3
16400: NONEQUAL
16401: IFFALSE 16419
// result := result diff i ;
16403: LD_ADDR_VAR 0 4
16407: PUSH
16408: LD_VAR 0 4
16412: PUSH
16413: LD_VAR 0 5
16417: DIFF
16418: ST_TO_ADDR
16419: GO 16378
16421: POP
16422: POP
// end ;
16423: LD_VAR 0 4
16427: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16428: LD_INT 0
16430: PPUSH
16431: PPUSH
16432: PPUSH
// result := true ;
16433: LD_ADDR_VAR 0 3
16437: PUSH
16438: LD_INT 1
16440: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16441: LD_ADDR_VAR 0 5
16445: PUSH
16446: LD_VAR 0 2
16450: PPUSH
16451: CALL_OW 480
16455: ST_TO_ADDR
// if not tmp then
16456: LD_VAR 0 5
16460: NOT
16461: IFFALSE 16465
// exit ;
16463: GO 16514
// for i in tmp do
16465: LD_ADDR_VAR 0 4
16469: PUSH
16470: LD_VAR 0 5
16474: PUSH
16475: FOR_IN
16476: IFFALSE 16512
// if GetTech ( i , side ) <> state_researched then
16478: LD_VAR 0 4
16482: PPUSH
16483: LD_VAR 0 1
16487: PPUSH
16488: CALL_OW 321
16492: PUSH
16493: LD_INT 2
16495: NONEQUAL
16496: IFFALSE 16510
// begin result := false ;
16498: LD_ADDR_VAR 0 3
16502: PUSH
16503: LD_INT 0
16505: ST_TO_ADDR
// exit ;
16506: POP
16507: POP
16508: GO 16514
// end ;
16510: GO 16475
16512: POP
16513: POP
// end ;
16514: LD_VAR 0 3
16518: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16519: LD_INT 0
16521: PPUSH
16522: PPUSH
16523: PPUSH
16524: PPUSH
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
16531: PPUSH
16532: PPUSH
16533: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16534: LD_VAR 0 1
16538: NOT
16539: PUSH
16540: LD_VAR 0 1
16544: PPUSH
16545: CALL_OW 257
16549: PUSH
16550: LD_INT 9
16552: NONEQUAL
16553: OR
16554: IFFALSE 16558
// exit ;
16556: GO 17131
// side := GetSide ( unit ) ;
16558: LD_ADDR_VAR 0 9
16562: PUSH
16563: LD_VAR 0 1
16567: PPUSH
16568: CALL_OW 255
16572: ST_TO_ADDR
// tech_space := tech_spacanom ;
16573: LD_ADDR_VAR 0 12
16577: PUSH
16578: LD_INT 29
16580: ST_TO_ADDR
// tech_time := tech_taurad ;
16581: LD_ADDR_VAR 0 13
16585: PUSH
16586: LD_INT 28
16588: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16589: LD_ADDR_VAR 0 11
16593: PUSH
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 310
16603: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16604: LD_VAR 0 11
16608: PPUSH
16609: CALL_OW 247
16613: PUSH
16614: LD_INT 2
16616: EQUAL
16617: IFFALSE 16621
// exit ;
16619: GO 17131
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16621: LD_ADDR_VAR 0 8
16625: PUSH
16626: LD_INT 81
16628: PUSH
16629: LD_VAR 0 9
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 3
16640: PUSH
16641: LD_INT 21
16643: PUSH
16644: LD_INT 3
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PPUSH
16659: CALL_OW 69
16663: ST_TO_ADDR
// if not tmp then
16664: LD_VAR 0 8
16668: NOT
16669: IFFALSE 16673
// exit ;
16671: GO 17131
// if in_unit then
16673: LD_VAR 0 11
16677: IFFALSE 16701
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16679: LD_ADDR_VAR 0 10
16683: PUSH
16684: LD_VAR 0 8
16688: PPUSH
16689: LD_VAR 0 11
16693: PPUSH
16694: CALL_OW 74
16698: ST_TO_ADDR
16699: GO 16721
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16701: LD_ADDR_VAR 0 10
16705: PUSH
16706: LD_VAR 0 8
16710: PPUSH
16711: LD_VAR 0 1
16715: PPUSH
16716: CALL_OW 74
16720: ST_TO_ADDR
// if not enemy then
16721: LD_VAR 0 10
16725: NOT
16726: IFFALSE 16730
// exit ;
16728: GO 17131
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16730: LD_VAR 0 11
16734: PUSH
16735: LD_VAR 0 11
16739: PPUSH
16740: LD_VAR 0 10
16744: PPUSH
16745: CALL_OW 296
16749: PUSH
16750: LD_INT 13
16752: GREATER
16753: AND
16754: PUSH
16755: LD_VAR 0 1
16759: PPUSH
16760: LD_VAR 0 10
16764: PPUSH
16765: CALL_OW 296
16769: PUSH
16770: LD_INT 12
16772: GREATER
16773: OR
16774: IFFALSE 16778
// exit ;
16776: GO 17131
// missile := [ 1 ] ;
16778: LD_ADDR_VAR 0 14
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: EMPTY
16787: LIST
16788: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16789: LD_VAR 0 9
16793: PPUSH
16794: LD_VAR 0 12
16798: PPUSH
16799: CALL_OW 325
16803: IFFALSE 16832
// missile := Replace ( missile , missile + 1 , 2 ) ;
16805: LD_ADDR_VAR 0 14
16809: PUSH
16810: LD_VAR 0 14
16814: PPUSH
16815: LD_VAR 0 14
16819: PUSH
16820: LD_INT 1
16822: PLUS
16823: PPUSH
16824: LD_INT 2
16826: PPUSH
16827: CALL_OW 1
16831: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16832: LD_VAR 0 9
16836: PPUSH
16837: LD_VAR 0 13
16841: PPUSH
16842: CALL_OW 325
16846: PUSH
16847: LD_VAR 0 10
16851: PPUSH
16852: CALL_OW 255
16856: PPUSH
16857: LD_VAR 0 13
16861: PPUSH
16862: CALL_OW 325
16866: NOT
16867: AND
16868: IFFALSE 16897
// missile := Replace ( missile , missile + 1 , 3 ) ;
16870: LD_ADDR_VAR 0 14
16874: PUSH
16875: LD_VAR 0 14
16879: PPUSH
16880: LD_VAR 0 14
16884: PUSH
16885: LD_INT 1
16887: PLUS
16888: PPUSH
16889: LD_INT 3
16891: PPUSH
16892: CALL_OW 1
16896: ST_TO_ADDR
// if missile < 2 then
16897: LD_VAR 0 14
16901: PUSH
16902: LD_INT 2
16904: LESS
16905: IFFALSE 16909
// exit ;
16907: GO 17131
// x := GetX ( enemy ) ;
16909: LD_ADDR_VAR 0 4
16913: PUSH
16914: LD_VAR 0 10
16918: PPUSH
16919: CALL_OW 250
16923: ST_TO_ADDR
// y := GetY ( enemy ) ;
16924: LD_ADDR_VAR 0 5
16928: PUSH
16929: LD_VAR 0 10
16933: PPUSH
16934: CALL_OW 251
16938: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16939: LD_ADDR_VAR 0 6
16943: PUSH
16944: LD_VAR 0 4
16948: PUSH
16949: LD_INT 1
16951: NEG
16952: PPUSH
16953: LD_INT 1
16955: PPUSH
16956: CALL_OW 12
16960: PLUS
16961: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16962: LD_ADDR_VAR 0 7
16966: PUSH
16967: LD_VAR 0 5
16971: PUSH
16972: LD_INT 1
16974: NEG
16975: PPUSH
16976: LD_INT 1
16978: PPUSH
16979: CALL_OW 12
16983: PLUS
16984: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16985: LD_VAR 0 6
16989: PPUSH
16990: LD_VAR 0 7
16994: PPUSH
16995: CALL_OW 488
16999: NOT
17000: IFFALSE 17022
// begin _x := x ;
17002: LD_ADDR_VAR 0 6
17006: PUSH
17007: LD_VAR 0 4
17011: ST_TO_ADDR
// _y := y ;
17012: LD_ADDR_VAR 0 7
17016: PUSH
17017: LD_VAR 0 5
17021: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17022: LD_ADDR_VAR 0 3
17026: PUSH
17027: LD_INT 1
17029: PPUSH
17030: LD_VAR 0 14
17034: PPUSH
17035: CALL_OW 12
17039: ST_TO_ADDR
// case i of 1 :
17040: LD_VAR 0 3
17044: PUSH
17045: LD_INT 1
17047: DOUBLE
17048: EQUAL
17049: IFTRUE 17053
17051: GO 17070
17053: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17054: LD_VAR 0 1
17058: PPUSH
17059: LD_VAR 0 10
17063: PPUSH
17064: CALL_OW 115
17068: GO 17131
17070: LD_INT 2
17072: DOUBLE
17073: EQUAL
17074: IFTRUE 17078
17076: GO 17100
17078: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17079: LD_VAR 0 1
17083: PPUSH
17084: LD_VAR 0 6
17088: PPUSH
17089: LD_VAR 0 7
17093: PPUSH
17094: CALL_OW 153
17098: GO 17131
17100: LD_INT 3
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 17130
17108: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17109: LD_VAR 0 1
17113: PPUSH
17114: LD_VAR 0 6
17118: PPUSH
17119: LD_VAR 0 7
17123: PPUSH
17124: CALL_OW 154
17128: GO 17131
17130: POP
// end ;
17131: LD_VAR 0 2
17135: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17136: LD_INT 0
17138: PPUSH
17139: PPUSH
17140: PPUSH
17141: PPUSH
17142: PPUSH
17143: PPUSH
// if not unit or not building then
17144: LD_VAR 0 1
17148: NOT
17149: PUSH
17150: LD_VAR 0 2
17154: NOT
17155: OR
17156: IFFALSE 17160
// exit ;
17158: GO 17318
// x := GetX ( building ) ;
17160: LD_ADDR_VAR 0 5
17164: PUSH
17165: LD_VAR 0 2
17169: PPUSH
17170: CALL_OW 250
17174: ST_TO_ADDR
// y := GetY ( building ) ;
17175: LD_ADDR_VAR 0 6
17179: PUSH
17180: LD_VAR 0 2
17184: PPUSH
17185: CALL_OW 251
17189: ST_TO_ADDR
// for i = 0 to 5 do
17190: LD_ADDR_VAR 0 4
17194: PUSH
17195: DOUBLE
17196: LD_INT 0
17198: DEC
17199: ST_TO_ADDR
17200: LD_INT 5
17202: PUSH
17203: FOR_TO
17204: IFFALSE 17316
// begin _x := ShiftX ( x , i , 3 ) ;
17206: LD_ADDR_VAR 0 7
17210: PUSH
17211: LD_VAR 0 5
17215: PPUSH
17216: LD_VAR 0 4
17220: PPUSH
17221: LD_INT 3
17223: PPUSH
17224: CALL_OW 272
17228: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17229: LD_ADDR_VAR 0 8
17233: PUSH
17234: LD_VAR 0 6
17238: PPUSH
17239: LD_VAR 0 4
17243: PPUSH
17244: LD_INT 3
17246: PPUSH
17247: CALL_OW 273
17251: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17252: LD_VAR 0 7
17256: PPUSH
17257: LD_VAR 0 8
17261: PPUSH
17262: CALL_OW 488
17266: NOT
17267: IFFALSE 17271
// continue ;
17269: GO 17203
// if HexInfo ( _x , _y ) = 0 then
17271: LD_VAR 0 7
17275: PPUSH
17276: LD_VAR 0 8
17280: PPUSH
17281: CALL_OW 428
17285: PUSH
17286: LD_INT 0
17288: EQUAL
17289: IFFALSE 17314
// begin ComMoveXY ( unit , _x , _y ) ;
17291: LD_VAR 0 1
17295: PPUSH
17296: LD_VAR 0 7
17300: PPUSH
17301: LD_VAR 0 8
17305: PPUSH
17306: CALL_OW 111
// exit ;
17310: POP
17311: POP
17312: GO 17318
// end ; end ;
17314: GO 17203
17316: POP
17317: POP
// end ;
17318: LD_VAR 0 3
17322: RET
// export function ScanBase ( side , base_area ) ; begin
17323: LD_INT 0
17325: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17326: LD_ADDR_VAR 0 3
17330: PUSH
17331: LD_VAR 0 2
17335: PPUSH
17336: LD_INT 81
17338: PUSH
17339: LD_VAR 0 1
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PPUSH
17348: CALL_OW 70
17352: ST_TO_ADDR
// end ;
17353: LD_VAR 0 3
17357: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17358: LD_INT 0
17360: PPUSH
17361: PPUSH
17362: PPUSH
17363: PPUSH
// result := false ;
17364: LD_ADDR_VAR 0 2
17368: PUSH
17369: LD_INT 0
17371: ST_TO_ADDR
// side := GetSide ( unit ) ;
17372: LD_ADDR_VAR 0 3
17376: PUSH
17377: LD_VAR 0 1
17381: PPUSH
17382: CALL_OW 255
17386: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17387: LD_ADDR_VAR 0 4
17391: PUSH
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 248
17401: ST_TO_ADDR
// case nat of 1 :
17402: LD_VAR 0 4
17406: PUSH
17407: LD_INT 1
17409: DOUBLE
17410: EQUAL
17411: IFTRUE 17415
17413: GO 17426
17415: POP
// tech := tech_lassight ; 2 :
17416: LD_ADDR_VAR 0 5
17420: PUSH
17421: LD_INT 12
17423: ST_TO_ADDR
17424: GO 17465
17426: LD_INT 2
17428: DOUBLE
17429: EQUAL
17430: IFTRUE 17434
17432: GO 17445
17434: POP
// tech := tech_mortar ; 3 :
17435: LD_ADDR_VAR 0 5
17439: PUSH
17440: LD_INT 41
17442: ST_TO_ADDR
17443: GO 17465
17445: LD_INT 3
17447: DOUBLE
17448: EQUAL
17449: IFTRUE 17453
17451: GO 17464
17453: POP
// tech := tech_bazooka ; end ;
17454: LD_ADDR_VAR 0 5
17458: PUSH
17459: LD_INT 44
17461: ST_TO_ADDR
17462: GO 17465
17464: POP
// if Researched ( side , tech ) then
17465: LD_VAR 0 3
17469: PPUSH
17470: LD_VAR 0 5
17474: PPUSH
17475: CALL_OW 325
17479: IFFALSE 17506
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17481: LD_ADDR_VAR 0 2
17485: PUSH
17486: LD_INT 5
17488: PUSH
17489: LD_INT 8
17491: PUSH
17492: LD_INT 9
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: PUSH
17500: LD_VAR 0 4
17504: ARRAY
17505: ST_TO_ADDR
// end ;
17506: LD_VAR 0 2
17510: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17511: LD_INT 0
17513: PPUSH
17514: PPUSH
17515: PPUSH
// if not mines then
17516: LD_VAR 0 2
17520: NOT
17521: IFFALSE 17525
// exit ;
17523: GO 17669
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17525: LD_ADDR_VAR 0 5
17529: PUSH
17530: LD_INT 81
17532: PUSH
17533: LD_VAR 0 1
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: LD_INT 21
17547: PUSH
17548: LD_INT 3
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PPUSH
17563: CALL_OW 69
17567: ST_TO_ADDR
// for i in mines do
17568: LD_ADDR_VAR 0 4
17572: PUSH
17573: LD_VAR 0 2
17577: PUSH
17578: FOR_IN
17579: IFFALSE 17667
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17581: LD_VAR 0 4
17585: PUSH
17586: LD_INT 1
17588: ARRAY
17589: PPUSH
17590: LD_VAR 0 4
17594: PUSH
17595: LD_INT 2
17597: ARRAY
17598: PPUSH
17599: CALL_OW 458
17603: NOT
17604: IFFALSE 17608
// continue ;
17606: GO 17578
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17608: LD_VAR 0 4
17612: PUSH
17613: LD_INT 1
17615: ARRAY
17616: PPUSH
17617: LD_VAR 0 4
17621: PUSH
17622: LD_INT 2
17624: ARRAY
17625: PPUSH
17626: CALL_OW 428
17630: PUSH
17631: LD_VAR 0 5
17635: IN
17636: IFFALSE 17665
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17638: LD_VAR 0 4
17642: PUSH
17643: LD_INT 1
17645: ARRAY
17646: PPUSH
17647: LD_VAR 0 4
17651: PUSH
17652: LD_INT 2
17654: ARRAY
17655: PPUSH
17656: LD_VAR 0 1
17660: PPUSH
17661: CALL_OW 456
// end ;
17665: GO 17578
17667: POP
17668: POP
// end ;
17669: LD_VAR 0 3
17673: RET
// export function Count ( array ) ; begin
17674: LD_INT 0
17676: PPUSH
// result := array + 0 ;
17677: LD_ADDR_VAR 0 2
17681: PUSH
17682: LD_VAR 0 1
17686: PUSH
17687: LD_INT 0
17689: PLUS
17690: ST_TO_ADDR
// end ;
17691: LD_VAR 0 2
17695: RET
// export function IsEmpty ( building ) ; begin
17696: LD_INT 0
17698: PPUSH
// if not building then
17699: LD_VAR 0 1
17703: NOT
17704: IFFALSE 17708
// exit ;
17706: GO 17751
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17708: LD_ADDR_VAR 0 2
17712: PUSH
17713: LD_VAR 0 1
17717: PUSH
17718: LD_INT 22
17720: PUSH
17721: LD_VAR 0 1
17725: PPUSH
17726: CALL_OW 255
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 58
17737: PUSH
17738: EMPTY
17739: LIST
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PPUSH
17745: CALL_OW 69
17749: IN
17750: ST_TO_ADDR
// end ;
17751: LD_VAR 0 2
17755: RET
// export function IsNotFull ( building ) ; var places ; begin
17756: LD_INT 0
17758: PPUSH
17759: PPUSH
// if not building then
17760: LD_VAR 0 1
17764: NOT
17765: IFFALSE 17769
// exit ;
17767: GO 17797
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17769: LD_ADDR_VAR 0 2
17773: PUSH
17774: LD_VAR 0 1
17778: PPUSH
17779: LD_INT 3
17781: PUSH
17782: LD_INT 62
17784: PUSH
17785: EMPTY
17786: LIST
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PPUSH
17792: CALL_OW 72
17796: ST_TO_ADDR
// end ;
17797: LD_VAR 0 2
17801: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17802: LD_INT 0
17804: PPUSH
17805: PPUSH
17806: PPUSH
17807: PPUSH
// tmp := [ ] ;
17808: LD_ADDR_VAR 0 3
17812: PUSH
17813: EMPTY
17814: ST_TO_ADDR
// list := [ ] ;
17815: LD_ADDR_VAR 0 5
17819: PUSH
17820: EMPTY
17821: ST_TO_ADDR
// for i = 16 to 25 do
17822: LD_ADDR_VAR 0 4
17826: PUSH
17827: DOUBLE
17828: LD_INT 16
17830: DEC
17831: ST_TO_ADDR
17832: LD_INT 25
17834: PUSH
17835: FOR_TO
17836: IFFALSE 17909
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17838: LD_ADDR_VAR 0 3
17842: PUSH
17843: LD_VAR 0 3
17847: PUSH
17848: LD_INT 22
17850: PUSH
17851: LD_VAR 0 1
17855: PPUSH
17856: CALL_OW 255
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 91
17867: PUSH
17868: LD_VAR 0 1
17872: PUSH
17873: LD_INT 6
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 30
17883: PUSH
17884: LD_VAR 0 4
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: PPUSH
17901: CALL_OW 69
17905: ADD
17906: ST_TO_ADDR
17907: GO 17835
17909: POP
17910: POP
// for i = 1 to tmp do
17911: LD_ADDR_VAR 0 4
17915: PUSH
17916: DOUBLE
17917: LD_INT 1
17919: DEC
17920: ST_TO_ADDR
17921: LD_VAR 0 3
17925: PUSH
17926: FOR_TO
17927: IFFALSE 18015
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17929: LD_ADDR_VAR 0 5
17933: PUSH
17934: LD_VAR 0 5
17938: PUSH
17939: LD_VAR 0 3
17943: PUSH
17944: LD_VAR 0 4
17948: ARRAY
17949: PPUSH
17950: CALL_OW 266
17954: PUSH
17955: LD_VAR 0 3
17959: PUSH
17960: LD_VAR 0 4
17964: ARRAY
17965: PPUSH
17966: CALL_OW 250
17970: PUSH
17971: LD_VAR 0 3
17975: PUSH
17976: LD_VAR 0 4
17980: ARRAY
17981: PPUSH
17982: CALL_OW 251
17986: PUSH
17987: LD_VAR 0 3
17991: PUSH
17992: LD_VAR 0 4
17996: ARRAY
17997: PPUSH
17998: CALL_OW 254
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: PUSH
18009: EMPTY
18010: LIST
18011: ADD
18012: ST_TO_ADDR
18013: GO 17926
18015: POP
18016: POP
// result := list ;
18017: LD_ADDR_VAR 0 2
18021: PUSH
18022: LD_VAR 0 5
18026: ST_TO_ADDR
// end ;
18027: LD_VAR 0 2
18031: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18032: LD_INT 0
18034: PPUSH
18035: PPUSH
18036: PPUSH
18037: PPUSH
18038: PPUSH
18039: PPUSH
18040: PPUSH
// if not factory then
18041: LD_VAR 0 1
18045: NOT
18046: IFFALSE 18050
// exit ;
18048: GO 18643
// if control = control_apeman then
18050: LD_VAR 0 4
18054: PUSH
18055: LD_INT 5
18057: EQUAL
18058: IFFALSE 18167
// begin tmp := UnitsInside ( factory ) ;
18060: LD_ADDR_VAR 0 8
18064: PUSH
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL_OW 313
18074: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18075: LD_VAR 0 8
18079: PPUSH
18080: LD_INT 25
18082: PUSH
18083: LD_INT 12
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PPUSH
18090: CALL_OW 72
18094: NOT
18095: IFFALSE 18105
// control := control_manual ;
18097: LD_ADDR_VAR 0 4
18101: PUSH
18102: LD_INT 1
18104: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18105: LD_ADDR_VAR 0 8
18109: PUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL 17802 0 1
18119: ST_TO_ADDR
// if tmp then
18120: LD_VAR 0 8
18124: IFFALSE 18167
// begin for i in tmp do
18126: LD_ADDR_VAR 0 7
18130: PUSH
18131: LD_VAR 0 8
18135: PUSH
18136: FOR_IN
18137: IFFALSE 18165
// if i [ 1 ] = b_ext_radio then
18139: LD_VAR 0 7
18143: PUSH
18144: LD_INT 1
18146: ARRAY
18147: PUSH
18148: LD_INT 22
18150: EQUAL
18151: IFFALSE 18163
// begin control := control_remote ;
18153: LD_ADDR_VAR 0 4
18157: PUSH
18158: LD_INT 2
18160: ST_TO_ADDR
// break ;
18161: GO 18165
// end ;
18163: GO 18136
18165: POP
18166: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18167: LD_VAR 0 1
18171: PPUSH
18172: LD_VAR 0 2
18176: PPUSH
18177: LD_VAR 0 3
18181: PPUSH
18182: LD_VAR 0 4
18186: PPUSH
18187: LD_VAR 0 5
18191: PPUSH
18192: CALL_OW 448
18196: IFFALSE 18231
// begin result := [ chassis , engine , control , weapon ] ;
18198: LD_ADDR_VAR 0 6
18202: PUSH
18203: LD_VAR 0 2
18207: PUSH
18208: LD_VAR 0 3
18212: PUSH
18213: LD_VAR 0 4
18217: PUSH
18218: LD_VAR 0 5
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: ST_TO_ADDR
// exit ;
18229: GO 18643
// end ; _chassis := AvailableChassisList ( factory ) ;
18231: LD_ADDR_VAR 0 9
18235: PUSH
18236: LD_VAR 0 1
18240: PPUSH
18241: CALL_OW 475
18245: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18246: LD_ADDR_VAR 0 11
18250: PUSH
18251: LD_VAR 0 1
18255: PPUSH
18256: CALL_OW 476
18260: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18261: LD_ADDR_VAR 0 12
18265: PUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: CALL_OW 477
18275: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18276: LD_ADDR_VAR 0 10
18280: PUSH
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 478
18290: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18291: LD_VAR 0 9
18295: NOT
18296: PUSH
18297: LD_VAR 0 11
18301: NOT
18302: OR
18303: PUSH
18304: LD_VAR 0 12
18308: NOT
18309: OR
18310: PUSH
18311: LD_VAR 0 10
18315: NOT
18316: OR
18317: IFFALSE 18352
// begin result := [ chassis , engine , control , weapon ] ;
18319: LD_ADDR_VAR 0 6
18323: PUSH
18324: LD_VAR 0 2
18328: PUSH
18329: LD_VAR 0 3
18333: PUSH
18334: LD_VAR 0 4
18338: PUSH
18339: LD_VAR 0 5
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: ST_TO_ADDR
// exit ;
18350: GO 18643
// end ; if not chassis in _chassis then
18352: LD_VAR 0 2
18356: PUSH
18357: LD_VAR 0 9
18361: IN
18362: NOT
18363: IFFALSE 18389
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18365: LD_ADDR_VAR 0 2
18369: PUSH
18370: LD_VAR 0 9
18374: PUSH
18375: LD_INT 1
18377: PPUSH
18378: LD_VAR 0 9
18382: PPUSH
18383: CALL_OW 12
18387: ARRAY
18388: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18389: LD_VAR 0 2
18393: PPUSH
18394: LD_VAR 0 3
18398: PPUSH
18399: CALL 18648 0 2
18403: NOT
18404: IFFALSE 18463
// repeat engine := _engine [ 1 ] ;
18406: LD_ADDR_VAR 0 3
18410: PUSH
18411: LD_VAR 0 11
18415: PUSH
18416: LD_INT 1
18418: ARRAY
18419: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18420: LD_ADDR_VAR 0 11
18424: PUSH
18425: LD_VAR 0 11
18429: PPUSH
18430: LD_INT 1
18432: PPUSH
18433: CALL_OW 3
18437: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18438: LD_VAR 0 2
18442: PPUSH
18443: LD_VAR 0 3
18447: PPUSH
18448: CALL 18648 0 2
18452: PUSH
18453: LD_VAR 0 11
18457: PUSH
18458: EMPTY
18459: EQUAL
18460: OR
18461: IFFALSE 18406
// if not control in _control then
18463: LD_VAR 0 4
18467: PUSH
18468: LD_VAR 0 12
18472: IN
18473: NOT
18474: IFFALSE 18500
// control := _control [ rand ( 1 , _control ) ] ;
18476: LD_ADDR_VAR 0 4
18480: PUSH
18481: LD_VAR 0 12
18485: PUSH
18486: LD_INT 1
18488: PPUSH
18489: LD_VAR 0 12
18493: PPUSH
18494: CALL_OW 12
18498: ARRAY
18499: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18500: LD_VAR 0 2
18504: PPUSH
18505: LD_VAR 0 5
18509: PPUSH
18510: CALL 18868 0 2
18514: NOT
18515: IFFALSE 18574
// repeat weapon := _weapon [ 1 ] ;
18517: LD_ADDR_VAR 0 5
18521: PUSH
18522: LD_VAR 0 10
18526: PUSH
18527: LD_INT 1
18529: ARRAY
18530: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18531: LD_ADDR_VAR 0 10
18535: PUSH
18536: LD_VAR 0 10
18540: PPUSH
18541: LD_INT 1
18543: PPUSH
18544: CALL_OW 3
18548: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18549: LD_VAR 0 2
18553: PPUSH
18554: LD_VAR 0 5
18558: PPUSH
18559: CALL 18868 0 2
18563: PUSH
18564: LD_VAR 0 10
18568: PUSH
18569: EMPTY
18570: EQUAL
18571: OR
18572: IFFALSE 18517
// result := [ ] ;
18574: LD_ADDR_VAR 0 6
18578: PUSH
18579: EMPTY
18580: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18581: LD_VAR 0 1
18585: PPUSH
18586: LD_VAR 0 2
18590: PPUSH
18591: LD_VAR 0 3
18595: PPUSH
18596: LD_VAR 0 4
18600: PPUSH
18601: LD_VAR 0 5
18605: PPUSH
18606: CALL_OW 448
18610: IFFALSE 18643
// result := [ chassis , engine , control , weapon ] ;
18612: LD_ADDR_VAR 0 6
18616: PUSH
18617: LD_VAR 0 2
18621: PUSH
18622: LD_VAR 0 3
18626: PUSH
18627: LD_VAR 0 4
18631: PUSH
18632: LD_VAR 0 5
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: ST_TO_ADDR
// end ;
18643: LD_VAR 0 6
18647: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18648: LD_INT 0
18650: PPUSH
// if not chassis or not engine then
18651: LD_VAR 0 1
18655: NOT
18656: PUSH
18657: LD_VAR 0 2
18661: NOT
18662: OR
18663: IFFALSE 18667
// exit ;
18665: GO 18863
// case engine of engine_solar :
18667: LD_VAR 0 2
18671: PUSH
18672: LD_INT 2
18674: DOUBLE
18675: EQUAL
18676: IFTRUE 18680
18678: GO 18718
18680: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18681: LD_ADDR_VAR 0 3
18685: PUSH
18686: LD_INT 11
18688: PUSH
18689: LD_INT 12
18691: PUSH
18692: LD_INT 13
18694: PUSH
18695: LD_INT 14
18697: PUSH
18698: LD_INT 1
18700: PUSH
18701: LD_INT 2
18703: PUSH
18704: LD_INT 3
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: ST_TO_ADDR
18716: GO 18847
18718: LD_INT 1
18720: DOUBLE
18721: EQUAL
18722: IFTRUE 18726
18724: GO 18788
18726: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18727: LD_ADDR_VAR 0 3
18731: PUSH
18732: LD_INT 11
18734: PUSH
18735: LD_INT 12
18737: PUSH
18738: LD_INT 13
18740: PUSH
18741: LD_INT 14
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: LD_INT 3
18752: PUSH
18753: LD_INT 4
18755: PUSH
18756: LD_INT 5
18758: PUSH
18759: LD_INT 21
18761: PUSH
18762: LD_INT 23
18764: PUSH
18765: LD_INT 22
18767: PUSH
18768: LD_INT 24
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: ST_TO_ADDR
18786: GO 18847
18788: LD_INT 3
18790: DOUBLE
18791: EQUAL
18792: IFTRUE 18796
18794: GO 18846
18796: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18797: LD_ADDR_VAR 0 3
18801: PUSH
18802: LD_INT 13
18804: PUSH
18805: LD_INT 14
18807: PUSH
18808: LD_INT 2
18810: PUSH
18811: LD_INT 3
18813: PUSH
18814: LD_INT 4
18816: PUSH
18817: LD_INT 5
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 22
18825: PUSH
18826: LD_INT 23
18828: PUSH
18829: LD_INT 24
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: ST_TO_ADDR
18844: GO 18847
18846: POP
// result := ( chassis in result ) ;
18847: LD_ADDR_VAR 0 3
18851: PUSH
18852: LD_VAR 0 1
18856: PUSH
18857: LD_VAR 0 3
18861: IN
18862: ST_TO_ADDR
// end ;
18863: LD_VAR 0 3
18867: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18868: LD_INT 0
18870: PPUSH
// if not chassis or not weapon then
18871: LD_VAR 0 1
18875: NOT
18876: PUSH
18877: LD_VAR 0 2
18881: NOT
18882: OR
18883: IFFALSE 18887
// exit ;
18885: GO 19947
// case weapon of us_machine_gun :
18887: LD_VAR 0 2
18891: PUSH
18892: LD_INT 2
18894: DOUBLE
18895: EQUAL
18896: IFTRUE 18900
18898: GO 18930
18900: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18901: LD_ADDR_VAR 0 3
18905: PUSH
18906: LD_INT 1
18908: PUSH
18909: LD_INT 2
18911: PUSH
18912: LD_INT 3
18914: PUSH
18915: LD_INT 4
18917: PUSH
18918: LD_INT 5
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: ST_TO_ADDR
18928: GO 19931
18930: LD_INT 3
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 18968
18938: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18939: LD_ADDR_VAR 0 3
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: LD_INT 2
18949: PUSH
18950: LD_INT 3
18952: PUSH
18953: LD_INT 4
18955: PUSH
18956: LD_INT 5
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: ST_TO_ADDR
18966: GO 19931
18968: LD_INT 11
18970: DOUBLE
18971: EQUAL
18972: IFTRUE 18976
18974: GO 19006
18976: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18977: LD_ADDR_VAR 0 3
18981: PUSH
18982: LD_INT 1
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: LD_INT 3
18990: PUSH
18991: LD_INT 4
18993: PUSH
18994: LD_INT 5
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: ST_TO_ADDR
19004: GO 19931
19006: LD_INT 4
19008: DOUBLE
19009: EQUAL
19010: IFTRUE 19014
19012: GO 19040
19014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19015: LD_ADDR_VAR 0 3
19019: PUSH
19020: LD_INT 2
19022: PUSH
19023: LD_INT 3
19025: PUSH
19026: LD_INT 4
19028: PUSH
19029: LD_INT 5
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: ST_TO_ADDR
19038: GO 19931
19040: LD_INT 5
19042: DOUBLE
19043: EQUAL
19044: IFTRUE 19048
19046: GO 19074
19048: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19049: LD_ADDR_VAR 0 3
19053: PUSH
19054: LD_INT 2
19056: PUSH
19057: LD_INT 3
19059: PUSH
19060: LD_INT 4
19062: PUSH
19063: LD_INT 5
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: ST_TO_ADDR
19072: GO 19931
19074: LD_INT 9
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19108
19082: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19083: LD_ADDR_VAR 0 3
19087: PUSH
19088: LD_INT 2
19090: PUSH
19091: LD_INT 3
19093: PUSH
19094: LD_INT 4
19096: PUSH
19097: LD_INT 5
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: ST_TO_ADDR
19106: GO 19931
19108: LD_INT 7
19110: DOUBLE
19111: EQUAL
19112: IFTRUE 19116
19114: GO 19142
19116: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19117: LD_ADDR_VAR 0 3
19121: PUSH
19122: LD_INT 2
19124: PUSH
19125: LD_INT 3
19127: PUSH
19128: LD_INT 4
19130: PUSH
19131: LD_INT 5
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: ST_TO_ADDR
19140: GO 19931
19142: LD_INT 12
19144: DOUBLE
19145: EQUAL
19146: IFTRUE 19150
19148: GO 19176
19150: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19151: LD_ADDR_VAR 0 3
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: LD_INT 3
19161: PUSH
19162: LD_INT 4
19164: PUSH
19165: LD_INT 5
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: ST_TO_ADDR
19174: GO 19931
19176: LD_INT 13
19178: DOUBLE
19179: EQUAL
19180: IFTRUE 19184
19182: GO 19210
19184: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19185: LD_ADDR_VAR 0 3
19189: PUSH
19190: LD_INT 2
19192: PUSH
19193: LD_INT 3
19195: PUSH
19196: LD_INT 4
19198: PUSH
19199: LD_INT 5
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: ST_TO_ADDR
19208: GO 19931
19210: LD_INT 14
19212: DOUBLE
19213: EQUAL
19214: IFTRUE 19218
19216: GO 19236
19218: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19219: LD_ADDR_VAR 0 3
19223: PUSH
19224: LD_INT 4
19226: PUSH
19227: LD_INT 5
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: ST_TO_ADDR
19234: GO 19931
19236: LD_INT 6
19238: DOUBLE
19239: EQUAL
19240: IFTRUE 19244
19242: GO 19262
19244: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19245: LD_ADDR_VAR 0 3
19249: PUSH
19250: LD_INT 4
19252: PUSH
19253: LD_INT 5
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: ST_TO_ADDR
19260: GO 19931
19262: LD_INT 10
19264: DOUBLE
19265: EQUAL
19266: IFTRUE 19270
19268: GO 19288
19270: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19271: LD_ADDR_VAR 0 3
19275: PUSH
19276: LD_INT 4
19278: PUSH
19279: LD_INT 5
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: ST_TO_ADDR
19286: GO 19931
19288: LD_INT 22
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19322
19296: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19297: LD_ADDR_VAR 0 3
19301: PUSH
19302: LD_INT 11
19304: PUSH
19305: LD_INT 12
19307: PUSH
19308: LD_INT 13
19310: PUSH
19311: LD_INT 14
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: ST_TO_ADDR
19320: GO 19931
19322: LD_INT 23
19324: DOUBLE
19325: EQUAL
19326: IFTRUE 19330
19328: GO 19356
19330: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19331: LD_ADDR_VAR 0 3
19335: PUSH
19336: LD_INT 11
19338: PUSH
19339: LD_INT 12
19341: PUSH
19342: LD_INT 13
19344: PUSH
19345: LD_INT 14
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: ST_TO_ADDR
19354: GO 19931
19356: LD_INT 24
19358: DOUBLE
19359: EQUAL
19360: IFTRUE 19364
19362: GO 19390
19364: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19365: LD_ADDR_VAR 0 3
19369: PUSH
19370: LD_INT 11
19372: PUSH
19373: LD_INT 12
19375: PUSH
19376: LD_INT 13
19378: PUSH
19379: LD_INT 14
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: ST_TO_ADDR
19388: GO 19931
19390: LD_INT 30
19392: DOUBLE
19393: EQUAL
19394: IFTRUE 19398
19396: GO 19424
19398: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19399: LD_ADDR_VAR 0 3
19403: PUSH
19404: LD_INT 11
19406: PUSH
19407: LD_INT 12
19409: PUSH
19410: LD_INT 13
19412: PUSH
19413: LD_INT 14
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: ST_TO_ADDR
19422: GO 19931
19424: LD_INT 25
19426: DOUBLE
19427: EQUAL
19428: IFTRUE 19432
19430: GO 19450
19432: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19433: LD_ADDR_VAR 0 3
19437: PUSH
19438: LD_INT 13
19440: PUSH
19441: LD_INT 14
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: ST_TO_ADDR
19448: GO 19931
19450: LD_INT 27
19452: DOUBLE
19453: EQUAL
19454: IFTRUE 19458
19456: GO 19476
19458: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19459: LD_ADDR_VAR 0 3
19463: PUSH
19464: LD_INT 13
19466: PUSH
19467: LD_INT 14
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: ST_TO_ADDR
19474: GO 19931
19476: LD_INT 92
19478: DOUBLE
19479: EQUAL
19480: IFTRUE 19484
19482: GO 19510
19484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19485: LD_ADDR_VAR 0 3
19489: PUSH
19490: LD_INT 11
19492: PUSH
19493: LD_INT 12
19495: PUSH
19496: LD_INT 13
19498: PUSH
19499: LD_INT 14
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: ST_TO_ADDR
19508: GO 19931
19510: LD_INT 28
19512: DOUBLE
19513: EQUAL
19514: IFTRUE 19518
19516: GO 19536
19518: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19519: LD_ADDR_VAR 0 3
19523: PUSH
19524: LD_INT 13
19526: PUSH
19527: LD_INT 14
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: ST_TO_ADDR
19534: GO 19931
19536: LD_INT 29
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19562
19544: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19545: LD_ADDR_VAR 0 3
19549: PUSH
19550: LD_INT 13
19552: PUSH
19553: LD_INT 14
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: ST_TO_ADDR
19560: GO 19931
19562: LD_INT 31
19564: DOUBLE
19565: EQUAL
19566: IFTRUE 19570
19568: GO 19588
19570: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19571: LD_ADDR_VAR 0 3
19575: PUSH
19576: LD_INT 13
19578: PUSH
19579: LD_INT 14
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: ST_TO_ADDR
19586: GO 19931
19588: LD_INT 26
19590: DOUBLE
19591: EQUAL
19592: IFTRUE 19596
19594: GO 19614
19596: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19597: LD_ADDR_VAR 0 3
19601: PUSH
19602: LD_INT 13
19604: PUSH
19605: LD_INT 14
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: ST_TO_ADDR
19612: GO 19931
19614: LD_INT 42
19616: DOUBLE
19617: EQUAL
19618: IFTRUE 19622
19620: GO 19648
19622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19623: LD_ADDR_VAR 0 3
19627: PUSH
19628: LD_INT 21
19630: PUSH
19631: LD_INT 22
19633: PUSH
19634: LD_INT 23
19636: PUSH
19637: LD_INT 24
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: ST_TO_ADDR
19646: GO 19931
19648: LD_INT 43
19650: DOUBLE
19651: EQUAL
19652: IFTRUE 19656
19654: GO 19682
19656: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19657: LD_ADDR_VAR 0 3
19661: PUSH
19662: LD_INT 21
19664: PUSH
19665: LD_INT 22
19667: PUSH
19668: LD_INT 23
19670: PUSH
19671: LD_INT 24
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: ST_TO_ADDR
19680: GO 19931
19682: LD_INT 44
19684: DOUBLE
19685: EQUAL
19686: IFTRUE 19690
19688: GO 19716
19690: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19691: LD_ADDR_VAR 0 3
19695: PUSH
19696: LD_INT 21
19698: PUSH
19699: LD_INT 22
19701: PUSH
19702: LD_INT 23
19704: PUSH
19705: LD_INT 24
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: ST_TO_ADDR
19714: GO 19931
19716: LD_INT 45
19718: DOUBLE
19719: EQUAL
19720: IFTRUE 19724
19722: GO 19750
19724: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19725: LD_ADDR_VAR 0 3
19729: PUSH
19730: LD_INT 21
19732: PUSH
19733: LD_INT 22
19735: PUSH
19736: LD_INT 23
19738: PUSH
19739: LD_INT 24
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: ST_TO_ADDR
19748: GO 19931
19750: LD_INT 49
19752: DOUBLE
19753: EQUAL
19754: IFTRUE 19758
19756: GO 19784
19758: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19759: LD_ADDR_VAR 0 3
19763: PUSH
19764: LD_INT 21
19766: PUSH
19767: LD_INT 22
19769: PUSH
19770: LD_INT 23
19772: PUSH
19773: LD_INT 24
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: ST_TO_ADDR
19782: GO 19931
19784: LD_INT 51
19786: DOUBLE
19787: EQUAL
19788: IFTRUE 19792
19790: GO 19818
19792: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19793: LD_ADDR_VAR 0 3
19797: PUSH
19798: LD_INT 21
19800: PUSH
19801: LD_INT 22
19803: PUSH
19804: LD_INT 23
19806: PUSH
19807: LD_INT 24
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: ST_TO_ADDR
19816: GO 19931
19818: LD_INT 52
19820: DOUBLE
19821: EQUAL
19822: IFTRUE 19826
19824: GO 19852
19826: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19827: LD_ADDR_VAR 0 3
19831: PUSH
19832: LD_INT 21
19834: PUSH
19835: LD_INT 22
19837: PUSH
19838: LD_INT 23
19840: PUSH
19841: LD_INT 24
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: ST_TO_ADDR
19850: GO 19931
19852: LD_INT 53
19854: DOUBLE
19855: EQUAL
19856: IFTRUE 19860
19858: GO 19878
19860: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19861: LD_ADDR_VAR 0 3
19865: PUSH
19866: LD_INT 23
19868: PUSH
19869: LD_INT 24
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: ST_TO_ADDR
19876: GO 19931
19878: LD_INT 46
19880: DOUBLE
19881: EQUAL
19882: IFTRUE 19886
19884: GO 19904
19886: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19887: LD_ADDR_VAR 0 3
19891: PUSH
19892: LD_INT 23
19894: PUSH
19895: LD_INT 24
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: ST_TO_ADDR
19902: GO 19931
19904: LD_INT 47
19906: DOUBLE
19907: EQUAL
19908: IFTRUE 19912
19910: GO 19930
19912: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19913: LD_ADDR_VAR 0 3
19917: PUSH
19918: LD_INT 23
19920: PUSH
19921: LD_INT 24
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: ST_TO_ADDR
19928: GO 19931
19930: POP
// result := ( chassis in result ) ;
19931: LD_ADDR_VAR 0 3
19935: PUSH
19936: LD_VAR 0 1
19940: PUSH
19941: LD_VAR 0 3
19945: IN
19946: ST_TO_ADDR
// end ;
19947: LD_VAR 0 3
19951: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19952: LD_INT 0
19954: PPUSH
19955: PPUSH
19956: PPUSH
19957: PPUSH
19958: PPUSH
19959: PPUSH
19960: PPUSH
// result := array ;
19961: LD_ADDR_VAR 0 5
19965: PUSH
19966: LD_VAR 0 1
19970: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19971: LD_VAR 0 1
19975: NOT
19976: PUSH
19977: LD_VAR 0 2
19981: NOT
19982: OR
19983: PUSH
19984: LD_VAR 0 3
19988: NOT
19989: OR
19990: PUSH
19991: LD_VAR 0 2
19995: PUSH
19996: LD_VAR 0 1
20000: GREATER
20001: OR
20002: PUSH
20003: LD_VAR 0 3
20007: PUSH
20008: LD_VAR 0 1
20012: GREATER
20013: OR
20014: IFFALSE 20018
// exit ;
20016: GO 20314
// if direction then
20018: LD_VAR 0 4
20022: IFFALSE 20086
// begin d := 1 ;
20024: LD_ADDR_VAR 0 9
20028: PUSH
20029: LD_INT 1
20031: ST_TO_ADDR
// if i_from > i_to then
20032: LD_VAR 0 2
20036: PUSH
20037: LD_VAR 0 3
20041: GREATER
20042: IFFALSE 20068
// length := ( array - i_from ) + i_to else
20044: LD_ADDR_VAR 0 11
20048: PUSH
20049: LD_VAR 0 1
20053: PUSH
20054: LD_VAR 0 2
20058: MINUS
20059: PUSH
20060: LD_VAR 0 3
20064: PLUS
20065: ST_TO_ADDR
20066: GO 20084
// length := i_to - i_from ;
20068: LD_ADDR_VAR 0 11
20072: PUSH
20073: LD_VAR 0 3
20077: PUSH
20078: LD_VAR 0 2
20082: MINUS
20083: ST_TO_ADDR
// end else
20084: GO 20147
// begin d := - 1 ;
20086: LD_ADDR_VAR 0 9
20090: PUSH
20091: LD_INT 1
20093: NEG
20094: ST_TO_ADDR
// if i_from > i_to then
20095: LD_VAR 0 2
20099: PUSH
20100: LD_VAR 0 3
20104: GREATER
20105: IFFALSE 20125
// length := i_from - i_to else
20107: LD_ADDR_VAR 0 11
20111: PUSH
20112: LD_VAR 0 2
20116: PUSH
20117: LD_VAR 0 3
20121: MINUS
20122: ST_TO_ADDR
20123: GO 20147
// length := ( array - i_to ) + i_from ;
20125: LD_ADDR_VAR 0 11
20129: PUSH
20130: LD_VAR 0 1
20134: PUSH
20135: LD_VAR 0 3
20139: MINUS
20140: PUSH
20141: LD_VAR 0 2
20145: PLUS
20146: ST_TO_ADDR
// end ; if not length then
20147: LD_VAR 0 11
20151: NOT
20152: IFFALSE 20156
// exit ;
20154: GO 20314
// tmp := array ;
20156: LD_ADDR_VAR 0 10
20160: PUSH
20161: LD_VAR 0 1
20165: ST_TO_ADDR
// for i = 1 to length do
20166: LD_ADDR_VAR 0 6
20170: PUSH
20171: DOUBLE
20172: LD_INT 1
20174: DEC
20175: ST_TO_ADDR
20176: LD_VAR 0 11
20180: PUSH
20181: FOR_TO
20182: IFFALSE 20302
// begin for j = 1 to array do
20184: LD_ADDR_VAR 0 7
20188: PUSH
20189: DOUBLE
20190: LD_INT 1
20192: DEC
20193: ST_TO_ADDR
20194: LD_VAR 0 1
20198: PUSH
20199: FOR_TO
20200: IFFALSE 20288
// begin k := j + d ;
20202: LD_ADDR_VAR 0 8
20206: PUSH
20207: LD_VAR 0 7
20211: PUSH
20212: LD_VAR 0 9
20216: PLUS
20217: ST_TO_ADDR
// if k > array then
20218: LD_VAR 0 8
20222: PUSH
20223: LD_VAR 0 1
20227: GREATER
20228: IFFALSE 20238
// k := 1 ;
20230: LD_ADDR_VAR 0 8
20234: PUSH
20235: LD_INT 1
20237: ST_TO_ADDR
// if not k then
20238: LD_VAR 0 8
20242: NOT
20243: IFFALSE 20255
// k := array ;
20245: LD_ADDR_VAR 0 8
20249: PUSH
20250: LD_VAR 0 1
20254: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20255: LD_ADDR_VAR 0 10
20259: PUSH
20260: LD_VAR 0 10
20264: PPUSH
20265: LD_VAR 0 8
20269: PPUSH
20270: LD_VAR 0 1
20274: PUSH
20275: LD_VAR 0 7
20279: ARRAY
20280: PPUSH
20281: CALL_OW 1
20285: ST_TO_ADDR
// end ;
20286: GO 20199
20288: POP
20289: POP
// array := tmp ;
20290: LD_ADDR_VAR 0 1
20294: PUSH
20295: LD_VAR 0 10
20299: ST_TO_ADDR
// end ;
20300: GO 20181
20302: POP
20303: POP
// result := array ;
20304: LD_ADDR_VAR 0 5
20308: PUSH
20309: LD_VAR 0 1
20313: ST_TO_ADDR
// end ;
20314: LD_VAR 0 5
20318: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20319: LD_INT 0
20321: PPUSH
20322: PPUSH
// result := 0 ;
20323: LD_ADDR_VAR 0 3
20327: PUSH
20328: LD_INT 0
20330: ST_TO_ADDR
// if not array or not value in array then
20331: LD_VAR 0 1
20335: NOT
20336: PUSH
20337: LD_VAR 0 2
20341: PUSH
20342: LD_VAR 0 1
20346: IN
20347: NOT
20348: OR
20349: IFFALSE 20353
// exit ;
20351: GO 20407
// for i = 1 to array do
20353: LD_ADDR_VAR 0 4
20357: PUSH
20358: DOUBLE
20359: LD_INT 1
20361: DEC
20362: ST_TO_ADDR
20363: LD_VAR 0 1
20367: PUSH
20368: FOR_TO
20369: IFFALSE 20405
// if value = array [ i ] then
20371: LD_VAR 0 2
20375: PUSH
20376: LD_VAR 0 1
20380: PUSH
20381: LD_VAR 0 4
20385: ARRAY
20386: EQUAL
20387: IFFALSE 20403
// begin result := i ;
20389: LD_ADDR_VAR 0 3
20393: PUSH
20394: LD_VAR 0 4
20398: ST_TO_ADDR
// exit ;
20399: POP
20400: POP
20401: GO 20407
// end ;
20403: GO 20368
20405: POP
20406: POP
// end ;
20407: LD_VAR 0 3
20411: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20412: LD_INT 0
20414: PPUSH
// vc_chassis := chassis ;
20415: LD_ADDR_OWVAR 37
20419: PUSH
20420: LD_VAR 0 1
20424: ST_TO_ADDR
// vc_engine := engine ;
20425: LD_ADDR_OWVAR 39
20429: PUSH
20430: LD_VAR 0 2
20434: ST_TO_ADDR
// vc_control := control ;
20435: LD_ADDR_OWVAR 38
20439: PUSH
20440: LD_VAR 0 3
20444: ST_TO_ADDR
// vc_weapon := weapon ;
20445: LD_ADDR_OWVAR 40
20449: PUSH
20450: LD_VAR 0 4
20454: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20455: LD_ADDR_OWVAR 41
20459: PUSH
20460: LD_VAR 0 5
20464: ST_TO_ADDR
// end ;
20465: LD_VAR 0 6
20469: RET
// export function WantPlant ( unit ) ; var task ; begin
20470: LD_INT 0
20472: PPUSH
20473: PPUSH
// result := false ;
20474: LD_ADDR_VAR 0 2
20478: PUSH
20479: LD_INT 0
20481: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20482: LD_ADDR_VAR 0 3
20486: PUSH
20487: LD_VAR 0 1
20491: PPUSH
20492: CALL_OW 437
20496: ST_TO_ADDR
// if task then
20497: LD_VAR 0 3
20501: IFFALSE 20529
// if task [ 1 ] [ 1 ] = p then
20503: LD_VAR 0 3
20507: PUSH
20508: LD_INT 1
20510: ARRAY
20511: PUSH
20512: LD_INT 1
20514: ARRAY
20515: PUSH
20516: LD_STRING p
20518: EQUAL
20519: IFFALSE 20529
// result := true ;
20521: LD_ADDR_VAR 0 2
20525: PUSH
20526: LD_INT 1
20528: ST_TO_ADDR
// end ;
20529: LD_VAR 0 2
20533: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20534: LD_INT 0
20536: PPUSH
20537: PPUSH
20538: PPUSH
20539: PPUSH
// if pos < 1 then
20540: LD_VAR 0 2
20544: PUSH
20545: LD_INT 1
20547: LESS
20548: IFFALSE 20552
// exit ;
20550: GO 20855
// if pos = 1 then
20552: LD_VAR 0 2
20556: PUSH
20557: LD_INT 1
20559: EQUAL
20560: IFFALSE 20593
// result := Replace ( arr , pos [ 1 ] , value ) else
20562: LD_ADDR_VAR 0 4
20566: PUSH
20567: LD_VAR 0 1
20571: PPUSH
20572: LD_VAR 0 2
20576: PUSH
20577: LD_INT 1
20579: ARRAY
20580: PPUSH
20581: LD_VAR 0 3
20585: PPUSH
20586: CALL_OW 1
20590: ST_TO_ADDR
20591: GO 20855
// begin tmp := arr ;
20593: LD_ADDR_VAR 0 6
20597: PUSH
20598: LD_VAR 0 1
20602: ST_TO_ADDR
// s_arr := [ tmp ] ;
20603: LD_ADDR_VAR 0 7
20607: PUSH
20608: LD_VAR 0 6
20612: PUSH
20613: EMPTY
20614: LIST
20615: ST_TO_ADDR
// for i = 1 to pos - 1 do
20616: LD_ADDR_VAR 0 5
20620: PUSH
20621: DOUBLE
20622: LD_INT 1
20624: DEC
20625: ST_TO_ADDR
20626: LD_VAR 0 2
20630: PUSH
20631: LD_INT 1
20633: MINUS
20634: PUSH
20635: FOR_TO
20636: IFFALSE 20681
// begin tmp := tmp [ pos [ i ] ] ;
20638: LD_ADDR_VAR 0 6
20642: PUSH
20643: LD_VAR 0 6
20647: PUSH
20648: LD_VAR 0 2
20652: PUSH
20653: LD_VAR 0 5
20657: ARRAY
20658: ARRAY
20659: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20660: LD_ADDR_VAR 0 7
20664: PUSH
20665: LD_VAR 0 7
20669: PUSH
20670: LD_VAR 0 6
20674: PUSH
20675: EMPTY
20676: LIST
20677: ADD
20678: ST_TO_ADDR
// end ;
20679: GO 20635
20681: POP
20682: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20683: LD_ADDR_VAR 0 6
20687: PUSH
20688: LD_VAR 0 6
20692: PPUSH
20693: LD_VAR 0 2
20697: PUSH
20698: LD_VAR 0 2
20702: ARRAY
20703: PPUSH
20704: LD_VAR 0 3
20708: PPUSH
20709: CALL_OW 1
20713: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20714: LD_ADDR_VAR 0 7
20718: PUSH
20719: LD_VAR 0 7
20723: PPUSH
20724: LD_VAR 0 7
20728: PPUSH
20729: LD_VAR 0 6
20733: PPUSH
20734: CALL_OW 1
20738: ST_TO_ADDR
// for i = s_arr downto 2 do
20739: LD_ADDR_VAR 0 5
20743: PUSH
20744: DOUBLE
20745: LD_VAR 0 7
20749: INC
20750: ST_TO_ADDR
20751: LD_INT 2
20753: PUSH
20754: FOR_DOWNTO
20755: IFFALSE 20839
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20757: LD_ADDR_VAR 0 6
20761: PUSH
20762: LD_VAR 0 7
20766: PUSH
20767: LD_VAR 0 5
20771: PUSH
20772: LD_INT 1
20774: MINUS
20775: ARRAY
20776: PPUSH
20777: LD_VAR 0 2
20781: PUSH
20782: LD_VAR 0 5
20786: PUSH
20787: LD_INT 1
20789: MINUS
20790: ARRAY
20791: PPUSH
20792: LD_VAR 0 7
20796: PUSH
20797: LD_VAR 0 5
20801: ARRAY
20802: PPUSH
20803: CALL_OW 1
20807: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20808: LD_ADDR_VAR 0 7
20812: PUSH
20813: LD_VAR 0 7
20817: PPUSH
20818: LD_VAR 0 5
20822: PUSH
20823: LD_INT 1
20825: MINUS
20826: PPUSH
20827: LD_VAR 0 6
20831: PPUSH
20832: CALL_OW 1
20836: ST_TO_ADDR
// end ;
20837: GO 20754
20839: POP
20840: POP
// result := s_arr [ 1 ] ;
20841: LD_ADDR_VAR 0 4
20845: PUSH
20846: LD_VAR 0 7
20850: PUSH
20851: LD_INT 1
20853: ARRAY
20854: ST_TO_ADDR
// end ; end ;
20855: LD_VAR 0 4
20859: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20860: LD_INT 0
20862: PPUSH
20863: PPUSH
// if not list then
20864: LD_VAR 0 1
20868: NOT
20869: IFFALSE 20873
// exit ;
20871: GO 20964
// i := list [ pos1 ] ;
20873: LD_ADDR_VAR 0 5
20877: PUSH
20878: LD_VAR 0 1
20882: PUSH
20883: LD_VAR 0 2
20887: ARRAY
20888: ST_TO_ADDR
// if not i then
20889: LD_VAR 0 5
20893: NOT
20894: IFFALSE 20898
// exit ;
20896: GO 20964
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20898: LD_ADDR_VAR 0 1
20902: PUSH
20903: LD_VAR 0 1
20907: PPUSH
20908: LD_VAR 0 2
20912: PPUSH
20913: LD_VAR 0 1
20917: PUSH
20918: LD_VAR 0 3
20922: ARRAY
20923: PPUSH
20924: CALL_OW 1
20928: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20929: LD_ADDR_VAR 0 1
20933: PUSH
20934: LD_VAR 0 1
20938: PPUSH
20939: LD_VAR 0 3
20943: PPUSH
20944: LD_VAR 0 5
20948: PPUSH
20949: CALL_OW 1
20953: ST_TO_ADDR
// result := list ;
20954: LD_ADDR_VAR 0 4
20958: PUSH
20959: LD_VAR 0 1
20963: ST_TO_ADDR
// end ;
20964: LD_VAR 0 4
20968: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20969: LD_INT 0
20971: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20972: LD_ADDR_VAR 0 5
20976: PUSH
20977: LD_VAR 0 1
20981: PPUSH
20982: CALL_OW 250
20986: PPUSH
20987: LD_VAR 0 1
20991: PPUSH
20992: CALL_OW 251
20996: PPUSH
20997: LD_VAR 0 2
21001: PPUSH
21002: LD_VAR 0 3
21006: PPUSH
21007: LD_VAR 0 4
21011: PPUSH
21012: CALL 21390 0 5
21016: ST_TO_ADDR
// end ;
21017: LD_VAR 0 5
21021: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21022: LD_INT 0
21024: PPUSH
21025: PPUSH
21026: PPUSH
21027: PPUSH
// if not list or not unit then
21028: LD_VAR 0 2
21032: NOT
21033: PUSH
21034: LD_VAR 0 1
21038: NOT
21039: OR
21040: IFFALSE 21044
// exit ;
21042: GO 21385
// result := [ ] ;
21044: LD_ADDR_VAR 0 5
21048: PUSH
21049: EMPTY
21050: ST_TO_ADDR
// for i in list do
21051: LD_ADDR_VAR 0 6
21055: PUSH
21056: LD_VAR 0 2
21060: PUSH
21061: FOR_IN
21062: IFFALSE 21280
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21064: LD_ADDR_VAR 0 8
21068: PUSH
21069: LD_VAR 0 1
21073: PPUSH
21074: LD_VAR 0 6
21078: PUSH
21079: LD_INT 1
21081: ARRAY
21082: PPUSH
21083: LD_VAR 0 6
21087: PUSH
21088: LD_INT 2
21090: ARRAY
21091: PPUSH
21092: CALL_OW 297
21096: ST_TO_ADDR
// if not Count ( result ) then
21097: LD_VAR 0 5
21101: PPUSH
21102: CALL 17674 0 1
21106: NOT
21107: IFFALSE 21140
// begin result := Join ( result , [ i , tmp ] ) ;
21109: LD_ADDR_VAR 0 5
21113: PUSH
21114: LD_VAR 0 5
21118: PPUSH
21119: LD_VAR 0 6
21123: PUSH
21124: LD_VAR 0 8
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PPUSH
21133: CALL 53283 0 2
21137: ST_TO_ADDR
// continue ;
21138: GO 21061
// end ; if result [ result ] [ 2 ] <= tmp then
21140: LD_VAR 0 5
21144: PUSH
21145: LD_VAR 0 5
21149: ARRAY
21150: PUSH
21151: LD_INT 2
21153: ARRAY
21154: PUSH
21155: LD_VAR 0 8
21159: LESSEQUAL
21160: IFFALSE 21193
// result := Join ( result , [ i , tmp ] ) else
21162: LD_ADDR_VAR 0 5
21166: PUSH
21167: LD_VAR 0 5
21171: PPUSH
21172: LD_VAR 0 6
21176: PUSH
21177: LD_VAR 0 8
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PPUSH
21186: CALL 53283 0 2
21190: ST_TO_ADDR
21191: GO 21278
// begin for j := 1 to Count ( result ) do
21193: LD_ADDR_VAR 0 7
21197: PUSH
21198: DOUBLE
21199: LD_INT 1
21201: DEC
21202: ST_TO_ADDR
21203: LD_VAR 0 5
21207: PPUSH
21208: CALL 17674 0 1
21212: PUSH
21213: FOR_TO
21214: IFFALSE 21276
// begin if tmp < result [ j ] [ 2 ] then
21216: LD_VAR 0 8
21220: PUSH
21221: LD_VAR 0 5
21225: PUSH
21226: LD_VAR 0 7
21230: ARRAY
21231: PUSH
21232: LD_INT 2
21234: ARRAY
21235: LESS
21236: IFFALSE 21274
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21238: LD_ADDR_VAR 0 5
21242: PUSH
21243: LD_VAR 0 5
21247: PPUSH
21248: LD_VAR 0 7
21252: PPUSH
21253: LD_VAR 0 6
21257: PUSH
21258: LD_VAR 0 8
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 2
21271: ST_TO_ADDR
// break ;
21272: GO 21276
// end ; end ;
21274: GO 21213
21276: POP
21277: POP
// end ; end ;
21278: GO 21061
21280: POP
21281: POP
// if result and not asc then
21282: LD_VAR 0 5
21286: PUSH
21287: LD_VAR 0 3
21291: NOT
21292: AND
21293: IFFALSE 21310
// result := ReverseArray ( result ) ;
21295: LD_ADDR_VAR 0 5
21299: PUSH
21300: LD_VAR 0 5
21304: PPUSH
21305: CALL 48550 0 1
21309: ST_TO_ADDR
// tmp := [ ] ;
21310: LD_ADDR_VAR 0 8
21314: PUSH
21315: EMPTY
21316: ST_TO_ADDR
// if mode then
21317: LD_VAR 0 4
21321: IFFALSE 21385
// begin for i := 1 to result do
21323: LD_ADDR_VAR 0 6
21327: PUSH
21328: DOUBLE
21329: LD_INT 1
21331: DEC
21332: ST_TO_ADDR
21333: LD_VAR 0 5
21337: PUSH
21338: FOR_TO
21339: IFFALSE 21373
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21341: LD_ADDR_VAR 0 8
21345: PUSH
21346: LD_VAR 0 8
21350: PPUSH
21351: LD_VAR 0 5
21355: PUSH
21356: LD_VAR 0 6
21360: ARRAY
21361: PUSH
21362: LD_INT 1
21364: ARRAY
21365: PPUSH
21366: CALL 53283 0 2
21370: ST_TO_ADDR
21371: GO 21338
21373: POP
21374: POP
// result := tmp ;
21375: LD_ADDR_VAR 0 5
21379: PUSH
21380: LD_VAR 0 8
21384: ST_TO_ADDR
// end ; end ;
21385: LD_VAR 0 5
21389: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21390: LD_INT 0
21392: PPUSH
21393: PPUSH
21394: PPUSH
21395: PPUSH
// if not list then
21396: LD_VAR 0 3
21400: NOT
21401: IFFALSE 21405
// exit ;
21403: GO 21793
// result := [ ] ;
21405: LD_ADDR_VAR 0 6
21409: PUSH
21410: EMPTY
21411: ST_TO_ADDR
// for i in list do
21412: LD_ADDR_VAR 0 7
21416: PUSH
21417: LD_VAR 0 3
21421: PUSH
21422: FOR_IN
21423: IFFALSE 21625
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21425: LD_ADDR_VAR 0 9
21429: PUSH
21430: LD_VAR 0 7
21434: PPUSH
21435: LD_VAR 0 1
21439: PPUSH
21440: LD_VAR 0 2
21444: PPUSH
21445: CALL_OW 297
21449: ST_TO_ADDR
// if not result then
21450: LD_VAR 0 6
21454: NOT
21455: IFFALSE 21481
// result := [ [ i , tmp ] ] else
21457: LD_ADDR_VAR 0 6
21461: PUSH
21462: LD_VAR 0 7
21466: PUSH
21467: LD_VAR 0 9
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: EMPTY
21477: LIST
21478: ST_TO_ADDR
21479: GO 21623
// begin if result [ result ] [ 2 ] <= tmp then
21481: LD_VAR 0 6
21485: PUSH
21486: LD_VAR 0 6
21490: ARRAY
21491: PUSH
21492: LD_INT 2
21494: ARRAY
21495: PUSH
21496: LD_VAR 0 9
21500: LESSEQUAL
21501: IFFALSE 21543
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21503: LD_ADDR_VAR 0 6
21507: PUSH
21508: LD_VAR 0 6
21512: PPUSH
21513: LD_VAR 0 6
21517: PUSH
21518: LD_INT 1
21520: PLUS
21521: PPUSH
21522: LD_VAR 0 7
21526: PUSH
21527: LD_VAR 0 9
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PPUSH
21536: CALL_OW 2
21540: ST_TO_ADDR
21541: GO 21623
// for j := 1 to result do
21543: LD_ADDR_VAR 0 8
21547: PUSH
21548: DOUBLE
21549: LD_INT 1
21551: DEC
21552: ST_TO_ADDR
21553: LD_VAR 0 6
21557: PUSH
21558: FOR_TO
21559: IFFALSE 21621
// begin if tmp < result [ j ] [ 2 ] then
21561: LD_VAR 0 9
21565: PUSH
21566: LD_VAR 0 6
21570: PUSH
21571: LD_VAR 0 8
21575: ARRAY
21576: PUSH
21577: LD_INT 2
21579: ARRAY
21580: LESS
21581: IFFALSE 21619
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21583: LD_ADDR_VAR 0 6
21587: PUSH
21588: LD_VAR 0 6
21592: PPUSH
21593: LD_VAR 0 8
21597: PPUSH
21598: LD_VAR 0 7
21602: PUSH
21603: LD_VAR 0 9
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PPUSH
21612: CALL_OW 2
21616: ST_TO_ADDR
// break ;
21617: GO 21621
// end ; end ;
21619: GO 21558
21621: POP
21622: POP
// end ; end ;
21623: GO 21422
21625: POP
21626: POP
// if result and not asc then
21627: LD_VAR 0 6
21631: PUSH
21632: LD_VAR 0 4
21636: NOT
21637: AND
21638: IFFALSE 21713
// begin tmp := result ;
21640: LD_ADDR_VAR 0 9
21644: PUSH
21645: LD_VAR 0 6
21649: ST_TO_ADDR
// for i = tmp downto 1 do
21650: LD_ADDR_VAR 0 7
21654: PUSH
21655: DOUBLE
21656: LD_VAR 0 9
21660: INC
21661: ST_TO_ADDR
21662: LD_INT 1
21664: PUSH
21665: FOR_DOWNTO
21666: IFFALSE 21711
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21668: LD_ADDR_VAR 0 6
21672: PUSH
21673: LD_VAR 0 6
21677: PPUSH
21678: LD_VAR 0 9
21682: PUSH
21683: LD_VAR 0 7
21687: MINUS
21688: PUSH
21689: LD_INT 1
21691: PLUS
21692: PPUSH
21693: LD_VAR 0 9
21697: PUSH
21698: LD_VAR 0 7
21702: ARRAY
21703: PPUSH
21704: CALL_OW 1
21708: ST_TO_ADDR
21709: GO 21665
21711: POP
21712: POP
// end ; tmp := [ ] ;
21713: LD_ADDR_VAR 0 9
21717: PUSH
21718: EMPTY
21719: ST_TO_ADDR
// if mode then
21720: LD_VAR 0 5
21724: IFFALSE 21793
// begin for i = 1 to result do
21726: LD_ADDR_VAR 0 7
21730: PUSH
21731: DOUBLE
21732: LD_INT 1
21734: DEC
21735: ST_TO_ADDR
21736: LD_VAR 0 6
21740: PUSH
21741: FOR_TO
21742: IFFALSE 21781
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21744: LD_ADDR_VAR 0 9
21748: PUSH
21749: LD_VAR 0 9
21753: PPUSH
21754: LD_VAR 0 7
21758: PPUSH
21759: LD_VAR 0 6
21763: PUSH
21764: LD_VAR 0 7
21768: ARRAY
21769: PUSH
21770: LD_INT 1
21772: ARRAY
21773: PPUSH
21774: CALL_OW 1
21778: ST_TO_ADDR
21779: GO 21741
21781: POP
21782: POP
// result := tmp ;
21783: LD_ADDR_VAR 0 6
21787: PUSH
21788: LD_VAR 0 9
21792: ST_TO_ADDR
// end ; end ;
21793: LD_VAR 0 6
21797: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21798: LD_INT 0
21800: PPUSH
21801: PPUSH
21802: PPUSH
21803: PPUSH
21804: PPUSH
21805: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21806: LD_ADDR_VAR 0 5
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: LD_INT 0
21816: PUSH
21817: LD_INT 0
21819: PUSH
21820: EMPTY
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: ST_TO_ADDR
// if not x or not y then
21828: LD_VAR 0 2
21832: NOT
21833: PUSH
21834: LD_VAR 0 3
21838: NOT
21839: OR
21840: IFFALSE 21844
// exit ;
21842: GO 23494
// if not range then
21844: LD_VAR 0 4
21848: NOT
21849: IFFALSE 21859
// range := 10 ;
21851: LD_ADDR_VAR 0 4
21855: PUSH
21856: LD_INT 10
21858: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21859: LD_ADDR_VAR 0 8
21863: PUSH
21864: LD_INT 81
21866: PUSH
21867: LD_VAR 0 1
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 92
21878: PUSH
21879: LD_VAR 0 2
21883: PUSH
21884: LD_VAR 0 3
21888: PUSH
21889: LD_VAR 0 4
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 3
21902: PUSH
21903: LD_INT 21
21905: PUSH
21906: LD_INT 3
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: PPUSH
21922: CALL_OW 69
21926: ST_TO_ADDR
// if not tmp then
21927: LD_VAR 0 8
21931: NOT
21932: IFFALSE 21936
// exit ;
21934: GO 23494
// for i in tmp do
21936: LD_ADDR_VAR 0 6
21940: PUSH
21941: LD_VAR 0 8
21945: PUSH
21946: FOR_IN
21947: IFFALSE 23469
// begin points := [ 0 , 0 , 0 ] ;
21949: LD_ADDR_VAR 0 9
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: LD_INT 0
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: LIST
21967: ST_TO_ADDR
// bpoints := 1 ;
21968: LD_ADDR_VAR 0 10
21972: PUSH
21973: LD_INT 1
21975: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21976: LD_VAR 0 6
21980: PPUSH
21981: CALL_OW 247
21985: PUSH
21986: LD_INT 1
21988: DOUBLE
21989: EQUAL
21990: IFTRUE 21994
21992: GO 22572
21994: POP
// begin if GetClass ( i ) = 1 then
21995: LD_VAR 0 6
21999: PPUSH
22000: CALL_OW 257
22004: PUSH
22005: LD_INT 1
22007: EQUAL
22008: IFFALSE 22029
// points := [ 10 , 5 , 3 ] ;
22010: LD_ADDR_VAR 0 9
22014: PUSH
22015: LD_INT 10
22017: PUSH
22018: LD_INT 5
22020: PUSH
22021: LD_INT 3
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: LIST
22028: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22029: LD_VAR 0 6
22033: PPUSH
22034: CALL_OW 257
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: LD_INT 3
22044: PUSH
22045: LD_INT 4
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: LIST
22052: IN
22053: IFFALSE 22074
// points := [ 3 , 2 , 1 ] ;
22055: LD_ADDR_VAR 0 9
22059: PUSH
22060: LD_INT 3
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: LIST
22073: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22074: LD_VAR 0 6
22078: PPUSH
22079: CALL_OW 257
22083: PUSH
22084: LD_INT 5
22086: EQUAL
22087: IFFALSE 22108
// points := [ 130 , 5 , 2 ] ;
22089: LD_ADDR_VAR 0 9
22093: PUSH
22094: LD_INT 130
22096: PUSH
22097: LD_INT 5
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: LIST
22107: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22108: LD_VAR 0 6
22112: PPUSH
22113: CALL_OW 257
22117: PUSH
22118: LD_INT 8
22120: EQUAL
22121: IFFALSE 22142
// points := [ 35 , 35 , 30 ] ;
22123: LD_ADDR_VAR 0 9
22127: PUSH
22128: LD_INT 35
22130: PUSH
22131: LD_INT 35
22133: PUSH
22134: LD_INT 30
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: LIST
22141: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22142: LD_VAR 0 6
22146: PPUSH
22147: CALL_OW 257
22151: PUSH
22152: LD_INT 9
22154: EQUAL
22155: IFFALSE 22176
// points := [ 20 , 55 , 40 ] ;
22157: LD_ADDR_VAR 0 9
22161: PUSH
22162: LD_INT 20
22164: PUSH
22165: LD_INT 55
22167: PUSH
22168: LD_INT 40
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22176: LD_VAR 0 6
22180: PPUSH
22181: CALL_OW 257
22185: PUSH
22186: LD_INT 12
22188: PUSH
22189: LD_INT 16
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: IN
22196: IFFALSE 22217
// points := [ 5 , 3 , 2 ] ;
22198: LD_ADDR_VAR 0 9
22202: PUSH
22203: LD_INT 5
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: LD_INT 2
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: LIST
22216: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22217: LD_VAR 0 6
22221: PPUSH
22222: CALL_OW 257
22226: PUSH
22227: LD_INT 17
22229: EQUAL
22230: IFFALSE 22251
// points := [ 100 , 50 , 75 ] ;
22232: LD_ADDR_VAR 0 9
22236: PUSH
22237: LD_INT 100
22239: PUSH
22240: LD_INT 50
22242: PUSH
22243: LD_INT 75
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: LIST
22250: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22251: LD_VAR 0 6
22255: PPUSH
22256: CALL_OW 257
22260: PUSH
22261: LD_INT 15
22263: EQUAL
22264: IFFALSE 22285
// points := [ 10 , 5 , 3 ] ;
22266: LD_ADDR_VAR 0 9
22270: PUSH
22271: LD_INT 10
22273: PUSH
22274: LD_INT 5
22276: PUSH
22277: LD_INT 3
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: LIST
22284: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22285: LD_VAR 0 6
22289: PPUSH
22290: CALL_OW 257
22294: PUSH
22295: LD_INT 14
22297: EQUAL
22298: IFFALSE 22319
// points := [ 10 , 0 , 0 ] ;
22300: LD_ADDR_VAR 0 9
22304: PUSH
22305: LD_INT 10
22307: PUSH
22308: LD_INT 0
22310: PUSH
22311: LD_INT 0
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: LIST
22318: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22319: LD_VAR 0 6
22323: PPUSH
22324: CALL_OW 257
22328: PUSH
22329: LD_INT 11
22331: EQUAL
22332: IFFALSE 22353
// points := [ 30 , 10 , 5 ] ;
22334: LD_ADDR_VAR 0 9
22338: PUSH
22339: LD_INT 30
22341: PUSH
22342: LD_INT 10
22344: PUSH
22345: LD_INT 5
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22353: LD_VAR 0 1
22357: PPUSH
22358: LD_INT 5
22360: PPUSH
22361: CALL_OW 321
22365: PUSH
22366: LD_INT 2
22368: EQUAL
22369: IFFALSE 22386
// bpoints := bpoints * 1.8 ;
22371: LD_ADDR_VAR 0 10
22375: PUSH
22376: LD_VAR 0 10
22380: PUSH
22381: LD_REAL  1.80000000000000E+0000
22384: MUL
22385: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22386: LD_VAR 0 6
22390: PPUSH
22391: CALL_OW 257
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 3
22404: PUSH
22405: LD_INT 4
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: IN
22414: PUSH
22415: LD_VAR 0 1
22419: PPUSH
22420: LD_INT 51
22422: PPUSH
22423: CALL_OW 321
22427: PUSH
22428: LD_INT 2
22430: EQUAL
22431: AND
22432: IFFALSE 22449
// bpoints := bpoints * 1.2 ;
22434: LD_ADDR_VAR 0 10
22438: PUSH
22439: LD_VAR 0 10
22443: PUSH
22444: LD_REAL  1.20000000000000E+0000
22447: MUL
22448: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22449: LD_VAR 0 6
22453: PPUSH
22454: CALL_OW 257
22458: PUSH
22459: LD_INT 5
22461: PUSH
22462: LD_INT 7
22464: PUSH
22465: LD_INT 9
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: IN
22473: PUSH
22474: LD_VAR 0 1
22478: PPUSH
22479: LD_INT 52
22481: PPUSH
22482: CALL_OW 321
22486: PUSH
22487: LD_INT 2
22489: EQUAL
22490: AND
22491: IFFALSE 22508
// bpoints := bpoints * 1.5 ;
22493: LD_ADDR_VAR 0 10
22497: PUSH
22498: LD_VAR 0 10
22502: PUSH
22503: LD_REAL  1.50000000000000E+0000
22506: MUL
22507: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22508: LD_VAR 0 1
22512: PPUSH
22513: LD_INT 66
22515: PPUSH
22516: CALL_OW 321
22520: PUSH
22521: LD_INT 2
22523: EQUAL
22524: IFFALSE 22541
// bpoints := bpoints * 1.1 ;
22526: LD_ADDR_VAR 0 10
22530: PUSH
22531: LD_VAR 0 10
22535: PUSH
22536: LD_REAL  1.10000000000000E+0000
22539: MUL
22540: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22541: LD_ADDR_VAR 0 10
22545: PUSH
22546: LD_VAR 0 10
22550: PUSH
22551: LD_VAR 0 6
22555: PPUSH
22556: LD_INT 1
22558: PPUSH
22559: CALL_OW 259
22563: PUSH
22564: LD_REAL  1.15000000000000E+0000
22567: MUL
22568: MUL
22569: ST_TO_ADDR
// end ; unit_vehicle :
22570: GO 23398
22572: LD_INT 2
22574: DOUBLE
22575: EQUAL
22576: IFTRUE 22580
22578: GO 23386
22580: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22581: LD_VAR 0 6
22585: PPUSH
22586: CALL_OW 264
22590: PUSH
22591: LD_INT 2
22593: PUSH
22594: LD_INT 42
22596: PUSH
22597: LD_INT 24
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: IN
22605: IFFALSE 22626
// points := [ 25 , 5 , 3 ] ;
22607: LD_ADDR_VAR 0 9
22611: PUSH
22612: LD_INT 25
22614: PUSH
22615: LD_INT 5
22617: PUSH
22618: LD_INT 3
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22626: LD_VAR 0 6
22630: PPUSH
22631: CALL_OW 264
22635: PUSH
22636: LD_INT 4
22638: PUSH
22639: LD_INT 43
22641: PUSH
22642: LD_INT 25
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: LIST
22649: IN
22650: IFFALSE 22671
// points := [ 40 , 15 , 5 ] ;
22652: LD_ADDR_VAR 0 9
22656: PUSH
22657: LD_INT 40
22659: PUSH
22660: LD_INT 15
22662: PUSH
22663: LD_INT 5
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22671: LD_VAR 0 6
22675: PPUSH
22676: CALL_OW 264
22680: PUSH
22681: LD_INT 3
22683: PUSH
22684: LD_INT 23
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: IN
22691: IFFALSE 22712
// points := [ 7 , 25 , 8 ] ;
22693: LD_ADDR_VAR 0 9
22697: PUSH
22698: LD_INT 7
22700: PUSH
22701: LD_INT 25
22703: PUSH
22704: LD_INT 8
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22712: LD_VAR 0 6
22716: PPUSH
22717: CALL_OW 264
22721: PUSH
22722: LD_INT 5
22724: PUSH
22725: LD_INT 27
22727: PUSH
22728: LD_INT 44
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: LIST
22735: IN
22736: IFFALSE 22757
// points := [ 14 , 50 , 16 ] ;
22738: LD_ADDR_VAR 0 9
22742: PUSH
22743: LD_INT 14
22745: PUSH
22746: LD_INT 50
22748: PUSH
22749: LD_INT 16
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: LIST
22756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22757: LD_VAR 0 6
22761: PPUSH
22762: CALL_OW 264
22766: PUSH
22767: LD_INT 6
22769: PUSH
22770: LD_INT 46
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: IN
22777: IFFALSE 22798
// points := [ 32 , 120 , 70 ] ;
22779: LD_ADDR_VAR 0 9
22783: PUSH
22784: LD_INT 32
22786: PUSH
22787: LD_INT 120
22789: PUSH
22790: LD_INT 70
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: LIST
22797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22798: LD_VAR 0 6
22802: PPUSH
22803: CALL_OW 264
22807: PUSH
22808: LD_INT 7
22810: PUSH
22811: LD_INT 28
22813: PUSH
22814: LD_INT 45
22816: PUSH
22817: LD_INT 92
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: IN
22826: IFFALSE 22847
// points := [ 35 , 20 , 45 ] ;
22828: LD_ADDR_VAR 0 9
22832: PUSH
22833: LD_INT 35
22835: PUSH
22836: LD_INT 20
22838: PUSH
22839: LD_INT 45
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: LIST
22846: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22847: LD_VAR 0 6
22851: PPUSH
22852: CALL_OW 264
22856: PUSH
22857: LD_INT 47
22859: PUSH
22860: EMPTY
22861: LIST
22862: IN
22863: IFFALSE 22884
// points := [ 67 , 45 , 75 ] ;
22865: LD_ADDR_VAR 0 9
22869: PUSH
22870: LD_INT 67
22872: PUSH
22873: LD_INT 45
22875: PUSH
22876: LD_INT 75
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: LIST
22883: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22884: LD_VAR 0 6
22888: PPUSH
22889: CALL_OW 264
22893: PUSH
22894: LD_INT 26
22896: PUSH
22897: EMPTY
22898: LIST
22899: IN
22900: IFFALSE 22921
// points := [ 120 , 30 , 80 ] ;
22902: LD_ADDR_VAR 0 9
22906: PUSH
22907: LD_INT 120
22909: PUSH
22910: LD_INT 30
22912: PUSH
22913: LD_INT 80
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: LIST
22920: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22921: LD_VAR 0 6
22925: PPUSH
22926: CALL_OW 264
22930: PUSH
22931: LD_INT 22
22933: PUSH
22934: EMPTY
22935: LIST
22936: IN
22937: IFFALSE 22958
// points := [ 40 , 1 , 1 ] ;
22939: LD_ADDR_VAR 0 9
22943: PUSH
22944: LD_INT 40
22946: PUSH
22947: LD_INT 1
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22958: LD_VAR 0 6
22962: PPUSH
22963: CALL_OW 264
22967: PUSH
22968: LD_INT 29
22970: PUSH
22971: EMPTY
22972: LIST
22973: IN
22974: IFFALSE 22995
// points := [ 70 , 200 , 400 ] ;
22976: LD_ADDR_VAR 0 9
22980: PUSH
22981: LD_INT 70
22983: PUSH
22984: LD_INT 200
22986: PUSH
22987: LD_INT 400
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: LIST
22994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22995: LD_VAR 0 6
22999: PPUSH
23000: CALL_OW 264
23004: PUSH
23005: LD_INT 14
23007: PUSH
23008: LD_INT 53
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: IN
23015: IFFALSE 23036
// points := [ 40 , 10 , 20 ] ;
23017: LD_ADDR_VAR 0 9
23021: PUSH
23022: LD_INT 40
23024: PUSH
23025: LD_INT 10
23027: PUSH
23028: LD_INT 20
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: LIST
23035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23036: LD_VAR 0 6
23040: PPUSH
23041: CALL_OW 264
23045: PUSH
23046: LD_INT 9
23048: PUSH
23049: EMPTY
23050: LIST
23051: IN
23052: IFFALSE 23073
// points := [ 5 , 70 , 20 ] ;
23054: LD_ADDR_VAR 0 9
23058: PUSH
23059: LD_INT 5
23061: PUSH
23062: LD_INT 70
23064: PUSH
23065: LD_INT 20
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23073: LD_VAR 0 6
23077: PPUSH
23078: CALL_OW 264
23082: PUSH
23083: LD_INT 10
23085: PUSH
23086: EMPTY
23087: LIST
23088: IN
23089: IFFALSE 23110
// points := [ 35 , 110 , 70 ] ;
23091: LD_ADDR_VAR 0 9
23095: PUSH
23096: LD_INT 35
23098: PUSH
23099: LD_INT 110
23101: PUSH
23102: LD_INT 70
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: LIST
23109: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23110: LD_VAR 0 6
23114: PPUSH
23115: CALL_OW 265
23119: PUSH
23120: LD_INT 25
23122: EQUAL
23123: IFFALSE 23144
// points := [ 80 , 65 , 100 ] ;
23125: LD_ADDR_VAR 0 9
23129: PUSH
23130: LD_INT 80
23132: PUSH
23133: LD_INT 65
23135: PUSH
23136: LD_INT 100
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23144: LD_VAR 0 6
23148: PPUSH
23149: CALL_OW 263
23153: PUSH
23154: LD_INT 1
23156: EQUAL
23157: IFFALSE 23192
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23159: LD_ADDR_VAR 0 10
23163: PUSH
23164: LD_VAR 0 10
23168: PUSH
23169: LD_VAR 0 6
23173: PPUSH
23174: CALL_OW 311
23178: PPUSH
23179: LD_INT 3
23181: PPUSH
23182: CALL_OW 259
23186: PUSH
23187: LD_INT 4
23189: MUL
23190: MUL
23191: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23192: LD_VAR 0 6
23196: PPUSH
23197: CALL_OW 263
23201: PUSH
23202: LD_INT 2
23204: EQUAL
23205: IFFALSE 23256
// begin j := IsControledBy ( i ) ;
23207: LD_ADDR_VAR 0 7
23211: PUSH
23212: LD_VAR 0 6
23216: PPUSH
23217: CALL_OW 312
23221: ST_TO_ADDR
// if j then
23222: LD_VAR 0 7
23226: IFFALSE 23256
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23228: LD_ADDR_VAR 0 10
23232: PUSH
23233: LD_VAR 0 10
23237: PUSH
23238: LD_VAR 0 7
23242: PPUSH
23243: LD_INT 3
23245: PPUSH
23246: CALL_OW 259
23250: PUSH
23251: LD_INT 3
23253: MUL
23254: MUL
23255: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23256: LD_VAR 0 6
23260: PPUSH
23261: CALL_OW 264
23265: PUSH
23266: LD_INT 5
23268: PUSH
23269: LD_INT 6
23271: PUSH
23272: LD_INT 46
23274: PUSH
23275: LD_INT 44
23277: PUSH
23278: LD_INT 47
23280: PUSH
23281: LD_INT 45
23283: PUSH
23284: LD_INT 28
23286: PUSH
23287: LD_INT 7
23289: PUSH
23290: LD_INT 27
23292: PUSH
23293: LD_INT 29
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: IN
23308: PUSH
23309: LD_VAR 0 1
23313: PPUSH
23314: LD_INT 52
23316: PPUSH
23317: CALL_OW 321
23321: PUSH
23322: LD_INT 2
23324: EQUAL
23325: AND
23326: IFFALSE 23343
// bpoints := bpoints * 1.2 ;
23328: LD_ADDR_VAR 0 10
23332: PUSH
23333: LD_VAR 0 10
23337: PUSH
23338: LD_REAL  1.20000000000000E+0000
23341: MUL
23342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23343: LD_VAR 0 6
23347: PPUSH
23348: CALL_OW 264
23352: PUSH
23353: LD_INT 6
23355: PUSH
23356: LD_INT 46
23358: PUSH
23359: LD_INT 47
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: LIST
23366: IN
23367: IFFALSE 23384
// bpoints := bpoints * 1.2 ;
23369: LD_ADDR_VAR 0 10
23373: PUSH
23374: LD_VAR 0 10
23378: PUSH
23379: LD_REAL  1.20000000000000E+0000
23382: MUL
23383: ST_TO_ADDR
// end ; unit_building :
23384: GO 23398
23386: LD_INT 3
23388: DOUBLE
23389: EQUAL
23390: IFTRUE 23394
23392: GO 23397
23394: POP
// ; end ;
23395: GO 23398
23397: POP
// for j = 1 to 3 do
23398: LD_ADDR_VAR 0 7
23402: PUSH
23403: DOUBLE
23404: LD_INT 1
23406: DEC
23407: ST_TO_ADDR
23408: LD_INT 3
23410: PUSH
23411: FOR_TO
23412: IFFALSE 23465
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23414: LD_ADDR_VAR 0 5
23418: PUSH
23419: LD_VAR 0 5
23423: PPUSH
23424: LD_VAR 0 7
23428: PPUSH
23429: LD_VAR 0 5
23433: PUSH
23434: LD_VAR 0 7
23438: ARRAY
23439: PUSH
23440: LD_VAR 0 9
23444: PUSH
23445: LD_VAR 0 7
23449: ARRAY
23450: PUSH
23451: LD_VAR 0 10
23455: MUL
23456: PLUS
23457: PPUSH
23458: CALL_OW 1
23462: ST_TO_ADDR
23463: GO 23411
23465: POP
23466: POP
// end ;
23467: GO 21946
23469: POP
23470: POP
// result := Replace ( result , 4 , tmp ) ;
23471: LD_ADDR_VAR 0 5
23475: PUSH
23476: LD_VAR 0 5
23480: PPUSH
23481: LD_INT 4
23483: PPUSH
23484: LD_VAR 0 8
23488: PPUSH
23489: CALL_OW 1
23493: ST_TO_ADDR
// end ;
23494: LD_VAR 0 5
23498: RET
// export function DangerAtRange ( unit , range ) ; begin
23499: LD_INT 0
23501: PPUSH
// if not unit then
23502: LD_VAR 0 1
23506: NOT
23507: IFFALSE 23511
// exit ;
23509: GO 23556
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23511: LD_ADDR_VAR 0 3
23515: PUSH
23516: LD_VAR 0 1
23520: PPUSH
23521: CALL_OW 255
23525: PPUSH
23526: LD_VAR 0 1
23530: PPUSH
23531: CALL_OW 250
23535: PPUSH
23536: LD_VAR 0 1
23540: PPUSH
23541: CALL_OW 251
23545: PPUSH
23546: LD_VAR 0 2
23550: PPUSH
23551: CALL 21798 0 4
23555: ST_TO_ADDR
// end ;
23556: LD_VAR 0 3
23560: RET
// export function DangerInArea ( side , area ) ; begin
23561: LD_INT 0
23563: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23564: LD_ADDR_VAR 0 3
23568: PUSH
23569: LD_VAR 0 2
23573: PPUSH
23574: LD_INT 81
23576: PUSH
23577: LD_VAR 0 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PPUSH
23586: CALL_OW 70
23590: ST_TO_ADDR
// end ;
23591: LD_VAR 0 3
23595: RET
// export function IsExtension ( b ) ; begin
23596: LD_INT 0
23598: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23599: LD_ADDR_VAR 0 2
23603: PUSH
23604: LD_VAR 0 1
23608: PUSH
23609: LD_INT 23
23611: PUSH
23612: LD_INT 20
23614: PUSH
23615: LD_INT 22
23617: PUSH
23618: LD_INT 17
23620: PUSH
23621: LD_INT 24
23623: PUSH
23624: LD_INT 21
23626: PUSH
23627: LD_INT 19
23629: PUSH
23630: LD_INT 16
23632: PUSH
23633: LD_INT 25
23635: PUSH
23636: LD_INT 18
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: IN
23651: ST_TO_ADDR
// end ;
23652: LD_VAR 0 2
23656: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23657: LD_INT 0
23659: PPUSH
23660: PPUSH
23661: PPUSH
// result := [ ] ;
23662: LD_ADDR_VAR 0 4
23666: PUSH
23667: EMPTY
23668: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23669: LD_ADDR_VAR 0 5
23673: PUSH
23674: LD_VAR 0 2
23678: PPUSH
23679: LD_INT 21
23681: PUSH
23682: LD_INT 3
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PPUSH
23689: CALL_OW 70
23693: ST_TO_ADDR
// if not tmp then
23694: LD_VAR 0 5
23698: NOT
23699: IFFALSE 23703
// exit ;
23701: GO 23767
// if checkLink then
23703: LD_VAR 0 3
23707: IFFALSE 23757
// begin for i in tmp do
23709: LD_ADDR_VAR 0 6
23713: PUSH
23714: LD_VAR 0 5
23718: PUSH
23719: FOR_IN
23720: IFFALSE 23755
// if GetBase ( i ) <> base then
23722: LD_VAR 0 6
23726: PPUSH
23727: CALL_OW 274
23731: PUSH
23732: LD_VAR 0 1
23736: NONEQUAL
23737: IFFALSE 23753
// ComLinkToBase ( base , i ) ;
23739: LD_VAR 0 1
23743: PPUSH
23744: LD_VAR 0 6
23748: PPUSH
23749: CALL_OW 169
23753: GO 23719
23755: POP
23756: POP
// end ; result := tmp ;
23757: LD_ADDR_VAR 0 4
23761: PUSH
23762: LD_VAR 0 5
23766: ST_TO_ADDR
// end ;
23767: LD_VAR 0 4
23771: RET
// export function ComComplete ( units , b ) ; var i ; begin
23772: LD_INT 0
23774: PPUSH
23775: PPUSH
// if not units then
23776: LD_VAR 0 1
23780: NOT
23781: IFFALSE 23785
// exit ;
23783: GO 23875
// for i in units do
23785: LD_ADDR_VAR 0 4
23789: PUSH
23790: LD_VAR 0 1
23794: PUSH
23795: FOR_IN
23796: IFFALSE 23873
// if BuildingStatus ( b ) = bs_build then
23798: LD_VAR 0 2
23802: PPUSH
23803: CALL_OW 461
23807: PUSH
23808: LD_INT 1
23810: EQUAL
23811: IFFALSE 23871
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23813: LD_VAR 0 4
23817: PPUSH
23818: LD_STRING h
23820: PUSH
23821: LD_VAR 0 2
23825: PPUSH
23826: CALL_OW 250
23830: PUSH
23831: LD_VAR 0 2
23835: PPUSH
23836: CALL_OW 251
23840: PUSH
23841: LD_VAR 0 2
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: PPUSH
23867: CALL_OW 446
23871: GO 23795
23873: POP
23874: POP
// end ;
23875: LD_VAR 0 3
23879: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23880: LD_INT 0
23882: PPUSH
23883: PPUSH
23884: PPUSH
23885: PPUSH
23886: PPUSH
23887: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23888: LD_VAR 0 1
23892: NOT
23893: PUSH
23894: LD_VAR 0 1
23898: PPUSH
23899: CALL_OW 263
23903: PUSH
23904: LD_INT 2
23906: NONEQUAL
23907: OR
23908: IFFALSE 23912
// exit ;
23910: GO 24228
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23912: LD_ADDR_VAR 0 6
23916: PUSH
23917: LD_INT 22
23919: PUSH
23920: LD_VAR 0 1
23924: PPUSH
23925: CALL_OW 255
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 2
23936: PUSH
23937: LD_INT 30
23939: PUSH
23940: LD_INT 36
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 34
23949: PUSH
23950: LD_INT 31
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PPUSH
23966: CALL_OW 69
23970: ST_TO_ADDR
// if not tmp then
23971: LD_VAR 0 6
23975: NOT
23976: IFFALSE 23980
// exit ;
23978: GO 24228
// result := [ ] ;
23980: LD_ADDR_VAR 0 2
23984: PUSH
23985: EMPTY
23986: ST_TO_ADDR
// for i in tmp do
23987: LD_ADDR_VAR 0 3
23991: PUSH
23992: LD_VAR 0 6
23996: PUSH
23997: FOR_IN
23998: IFFALSE 24069
// begin t := UnitsInside ( i ) ;
24000: LD_ADDR_VAR 0 4
24004: PUSH
24005: LD_VAR 0 3
24009: PPUSH
24010: CALL_OW 313
24014: ST_TO_ADDR
// if t then
24015: LD_VAR 0 4
24019: IFFALSE 24067
// for j in t do
24021: LD_ADDR_VAR 0 7
24025: PUSH
24026: LD_VAR 0 4
24030: PUSH
24031: FOR_IN
24032: IFFALSE 24065
// result := Replace ( result , result + 1 , j ) ;
24034: LD_ADDR_VAR 0 2
24038: PUSH
24039: LD_VAR 0 2
24043: PPUSH
24044: LD_VAR 0 2
24048: PUSH
24049: LD_INT 1
24051: PLUS
24052: PPUSH
24053: LD_VAR 0 7
24057: PPUSH
24058: CALL_OW 1
24062: ST_TO_ADDR
24063: GO 24031
24065: POP
24066: POP
// end ;
24067: GO 23997
24069: POP
24070: POP
// if not result then
24071: LD_VAR 0 2
24075: NOT
24076: IFFALSE 24080
// exit ;
24078: GO 24228
// mech := result [ 1 ] ;
24080: LD_ADDR_VAR 0 5
24084: PUSH
24085: LD_VAR 0 2
24089: PUSH
24090: LD_INT 1
24092: ARRAY
24093: ST_TO_ADDR
// if result > 1 then
24094: LD_VAR 0 2
24098: PUSH
24099: LD_INT 1
24101: GREATER
24102: IFFALSE 24214
// begin for i = 2 to result do
24104: LD_ADDR_VAR 0 3
24108: PUSH
24109: DOUBLE
24110: LD_INT 2
24112: DEC
24113: ST_TO_ADDR
24114: LD_VAR 0 2
24118: PUSH
24119: FOR_TO
24120: IFFALSE 24212
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24122: LD_ADDR_VAR 0 4
24126: PUSH
24127: LD_VAR 0 2
24131: PUSH
24132: LD_VAR 0 3
24136: ARRAY
24137: PPUSH
24138: LD_INT 3
24140: PPUSH
24141: CALL_OW 259
24145: PUSH
24146: LD_VAR 0 2
24150: PUSH
24151: LD_VAR 0 3
24155: ARRAY
24156: PPUSH
24157: CALL_OW 432
24161: MINUS
24162: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24163: LD_VAR 0 4
24167: PUSH
24168: LD_VAR 0 5
24172: PPUSH
24173: LD_INT 3
24175: PPUSH
24176: CALL_OW 259
24180: PUSH
24181: LD_VAR 0 5
24185: PPUSH
24186: CALL_OW 432
24190: MINUS
24191: GREATEREQUAL
24192: IFFALSE 24210
// mech := result [ i ] ;
24194: LD_ADDR_VAR 0 5
24198: PUSH
24199: LD_VAR 0 2
24203: PUSH
24204: LD_VAR 0 3
24208: ARRAY
24209: ST_TO_ADDR
// end ;
24210: GO 24119
24212: POP
24213: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24214: LD_VAR 0 1
24218: PPUSH
24219: LD_VAR 0 5
24223: PPUSH
24224: CALL_OW 135
// end ;
24228: LD_VAR 0 2
24232: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24233: LD_INT 0
24235: PPUSH
24236: PPUSH
24237: PPUSH
24238: PPUSH
24239: PPUSH
24240: PPUSH
24241: PPUSH
24242: PPUSH
24243: PPUSH
24244: PPUSH
24245: PPUSH
24246: PPUSH
24247: PPUSH
// result := [ ] ;
24248: LD_ADDR_VAR 0 7
24252: PUSH
24253: EMPTY
24254: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24255: LD_VAR 0 1
24259: PPUSH
24260: CALL_OW 266
24264: PUSH
24265: LD_INT 0
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: IN
24275: NOT
24276: IFFALSE 24280
// exit ;
24278: GO 25914
// if name then
24280: LD_VAR 0 3
24284: IFFALSE 24300
// SetBName ( base_dep , name ) ;
24286: LD_VAR 0 1
24290: PPUSH
24291: LD_VAR 0 3
24295: PPUSH
24296: CALL_OW 500
// base := GetBase ( base_dep ) ;
24300: LD_ADDR_VAR 0 15
24304: PUSH
24305: LD_VAR 0 1
24309: PPUSH
24310: CALL_OW 274
24314: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24315: LD_ADDR_VAR 0 16
24319: PUSH
24320: LD_VAR 0 1
24324: PPUSH
24325: CALL_OW 255
24329: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24330: LD_ADDR_VAR 0 17
24334: PUSH
24335: LD_VAR 0 1
24339: PPUSH
24340: CALL_OW 248
24344: ST_TO_ADDR
// if sources then
24345: LD_VAR 0 5
24349: IFFALSE 24396
// for i = 1 to 3 do
24351: LD_ADDR_VAR 0 8
24355: PUSH
24356: DOUBLE
24357: LD_INT 1
24359: DEC
24360: ST_TO_ADDR
24361: LD_INT 3
24363: PUSH
24364: FOR_TO
24365: IFFALSE 24394
// AddResourceType ( base , i , sources [ i ] ) ;
24367: LD_VAR 0 15
24371: PPUSH
24372: LD_VAR 0 8
24376: PPUSH
24377: LD_VAR 0 5
24381: PUSH
24382: LD_VAR 0 8
24386: ARRAY
24387: PPUSH
24388: CALL_OW 276
24392: GO 24364
24394: POP
24395: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24396: LD_ADDR_VAR 0 18
24400: PUSH
24401: LD_VAR 0 15
24405: PPUSH
24406: LD_VAR 0 2
24410: PPUSH
24411: LD_INT 1
24413: PPUSH
24414: CALL 23657 0 3
24418: ST_TO_ADDR
// InitHc ;
24419: CALL_OW 19
// InitUc ;
24423: CALL_OW 18
// uc_side := side ;
24427: LD_ADDR_OWVAR 20
24431: PUSH
24432: LD_VAR 0 16
24436: ST_TO_ADDR
// uc_nation := nation ;
24437: LD_ADDR_OWVAR 21
24441: PUSH
24442: LD_VAR 0 17
24446: ST_TO_ADDR
// if buildings then
24447: LD_VAR 0 18
24451: IFFALSE 25773
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24453: LD_ADDR_VAR 0 19
24457: PUSH
24458: LD_VAR 0 18
24462: PPUSH
24463: LD_INT 2
24465: PUSH
24466: LD_INT 30
24468: PUSH
24469: LD_INT 29
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 30
24478: PUSH
24479: LD_INT 30
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: PPUSH
24491: CALL_OW 72
24495: ST_TO_ADDR
// if tmp then
24496: LD_VAR 0 19
24500: IFFALSE 24548
// for i in tmp do
24502: LD_ADDR_VAR 0 8
24506: PUSH
24507: LD_VAR 0 19
24511: PUSH
24512: FOR_IN
24513: IFFALSE 24546
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24515: LD_VAR 0 8
24519: PPUSH
24520: CALL_OW 250
24524: PPUSH
24525: LD_VAR 0 8
24529: PPUSH
24530: CALL_OW 251
24534: PPUSH
24535: LD_VAR 0 16
24539: PPUSH
24540: CALL_OW 441
24544: GO 24512
24546: POP
24547: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24548: LD_VAR 0 18
24552: PPUSH
24553: LD_INT 2
24555: PUSH
24556: LD_INT 30
24558: PUSH
24559: LD_INT 32
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 30
24568: PUSH
24569: LD_INT 33
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: PPUSH
24581: CALL_OW 72
24585: IFFALSE 24673
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24587: LD_ADDR_VAR 0 8
24591: PUSH
24592: LD_VAR 0 18
24596: PPUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 30
24602: PUSH
24603: LD_INT 32
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 30
24612: PUSH
24613: LD_INT 33
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: LIST
24624: PPUSH
24625: CALL_OW 72
24629: PUSH
24630: FOR_IN
24631: IFFALSE 24671
// begin if not GetBWeapon ( i ) then
24633: LD_VAR 0 8
24637: PPUSH
24638: CALL_OW 269
24642: NOT
24643: IFFALSE 24669
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24645: LD_VAR 0 8
24649: PPUSH
24650: LD_VAR 0 8
24654: PPUSH
24655: LD_VAR 0 2
24659: PPUSH
24660: CALL 25919 0 2
24664: PPUSH
24665: CALL_OW 431
// end ;
24669: GO 24630
24671: POP
24672: POP
// end ; for i = 1 to personel do
24673: LD_ADDR_VAR 0 8
24677: PUSH
24678: DOUBLE
24679: LD_INT 1
24681: DEC
24682: ST_TO_ADDR
24683: LD_VAR 0 6
24687: PUSH
24688: FOR_TO
24689: IFFALSE 25753
// begin if i > 4 then
24691: LD_VAR 0 8
24695: PUSH
24696: LD_INT 4
24698: GREATER
24699: IFFALSE 24703
// break ;
24701: GO 25753
// case i of 1 :
24703: LD_VAR 0 8
24707: PUSH
24708: LD_INT 1
24710: DOUBLE
24711: EQUAL
24712: IFTRUE 24716
24714: GO 24796
24716: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24717: LD_ADDR_VAR 0 12
24721: PUSH
24722: LD_VAR 0 18
24726: PPUSH
24727: LD_INT 22
24729: PUSH
24730: LD_VAR 0 16
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 58
24741: PUSH
24742: EMPTY
24743: LIST
24744: PUSH
24745: LD_INT 2
24747: PUSH
24748: LD_INT 30
24750: PUSH
24751: LD_INT 32
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 30
24760: PUSH
24761: LD_INT 4
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 30
24770: PUSH
24771: LD_INT 5
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: LIST
24788: PPUSH
24789: CALL_OW 72
24793: ST_TO_ADDR
24794: GO 25018
24796: LD_INT 2
24798: DOUBLE
24799: EQUAL
24800: IFTRUE 24804
24802: GO 24866
24804: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24805: LD_ADDR_VAR 0 12
24809: PUSH
24810: LD_VAR 0 18
24814: PPUSH
24815: LD_INT 22
24817: PUSH
24818: LD_VAR 0 16
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: LD_INT 30
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 30
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: LIST
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PPUSH
24859: CALL_OW 72
24863: ST_TO_ADDR
24864: GO 25018
24866: LD_INT 3
24868: DOUBLE
24869: EQUAL
24870: IFTRUE 24874
24872: GO 24936
24874: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24875: LD_ADDR_VAR 0 12
24879: PUSH
24880: LD_VAR 0 18
24884: PPUSH
24885: LD_INT 22
24887: PUSH
24888: LD_VAR 0 16
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 2
24899: PUSH
24900: LD_INT 30
24902: PUSH
24903: LD_INT 2
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 30
24912: PUSH
24913: LD_INT 3
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: LIST
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PPUSH
24929: CALL_OW 72
24933: ST_TO_ADDR
24934: GO 25018
24936: LD_INT 4
24938: DOUBLE
24939: EQUAL
24940: IFTRUE 24944
24942: GO 25017
24944: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24945: LD_ADDR_VAR 0 12
24949: PUSH
24950: LD_VAR 0 18
24954: PPUSH
24955: LD_INT 22
24957: PUSH
24958: LD_VAR 0 16
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 2
24969: PUSH
24970: LD_INT 30
24972: PUSH
24973: LD_INT 6
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 30
24982: PUSH
24983: LD_INT 7
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 30
24992: PUSH
24993: LD_INT 8
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PPUSH
25010: CALL_OW 72
25014: ST_TO_ADDR
25015: GO 25018
25017: POP
// if i = 1 then
25018: LD_VAR 0 8
25022: PUSH
25023: LD_INT 1
25025: EQUAL
25026: IFFALSE 25137
// begin tmp := [ ] ;
25028: LD_ADDR_VAR 0 19
25032: PUSH
25033: EMPTY
25034: ST_TO_ADDR
// for j in f do
25035: LD_ADDR_VAR 0 9
25039: PUSH
25040: LD_VAR 0 12
25044: PUSH
25045: FOR_IN
25046: IFFALSE 25119
// if GetBType ( j ) = b_bunker then
25048: LD_VAR 0 9
25052: PPUSH
25053: CALL_OW 266
25057: PUSH
25058: LD_INT 32
25060: EQUAL
25061: IFFALSE 25088
// tmp := Insert ( tmp , 1 , j ) else
25063: LD_ADDR_VAR 0 19
25067: PUSH
25068: LD_VAR 0 19
25072: PPUSH
25073: LD_INT 1
25075: PPUSH
25076: LD_VAR 0 9
25080: PPUSH
25081: CALL_OW 2
25085: ST_TO_ADDR
25086: GO 25117
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25088: LD_ADDR_VAR 0 19
25092: PUSH
25093: LD_VAR 0 19
25097: PPUSH
25098: LD_VAR 0 19
25102: PUSH
25103: LD_INT 1
25105: PLUS
25106: PPUSH
25107: LD_VAR 0 9
25111: PPUSH
25112: CALL_OW 2
25116: ST_TO_ADDR
25117: GO 25045
25119: POP
25120: POP
// if tmp then
25121: LD_VAR 0 19
25125: IFFALSE 25137
// f := tmp ;
25127: LD_ADDR_VAR 0 12
25131: PUSH
25132: LD_VAR 0 19
25136: ST_TO_ADDR
// end ; x := personel [ i ] ;
25137: LD_ADDR_VAR 0 13
25141: PUSH
25142: LD_VAR 0 6
25146: PUSH
25147: LD_VAR 0 8
25151: ARRAY
25152: ST_TO_ADDR
// if x = - 1 then
25153: LD_VAR 0 13
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: EQUAL
25162: IFFALSE 25371
// begin for j in f do
25164: LD_ADDR_VAR 0 9
25168: PUSH
25169: LD_VAR 0 12
25173: PUSH
25174: FOR_IN
25175: IFFALSE 25367
// repeat InitHc ;
25177: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25181: LD_VAR 0 9
25185: PPUSH
25186: CALL_OW 266
25190: PUSH
25191: LD_INT 5
25193: EQUAL
25194: IFFALSE 25264
// begin if UnitsInside ( j ) < 3 then
25196: LD_VAR 0 9
25200: PPUSH
25201: CALL_OW 313
25205: PUSH
25206: LD_INT 3
25208: LESS
25209: IFFALSE 25245
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25211: LD_INT 0
25213: PPUSH
25214: LD_INT 5
25216: PUSH
25217: LD_INT 8
25219: PUSH
25220: LD_INT 9
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: LIST
25227: PUSH
25228: LD_VAR 0 17
25232: ARRAY
25233: PPUSH
25234: LD_VAR 0 4
25238: PPUSH
25239: CALL_OW 380
25243: GO 25262
// PrepareHuman ( false , i , skill ) ;
25245: LD_INT 0
25247: PPUSH
25248: LD_VAR 0 8
25252: PPUSH
25253: LD_VAR 0 4
25257: PPUSH
25258: CALL_OW 380
// end else
25262: GO 25281
// PrepareHuman ( false , i , skill ) ;
25264: LD_INT 0
25266: PPUSH
25267: LD_VAR 0 8
25271: PPUSH
25272: LD_VAR 0 4
25276: PPUSH
25277: CALL_OW 380
// un := CreateHuman ;
25281: LD_ADDR_VAR 0 14
25285: PUSH
25286: CALL_OW 44
25290: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25291: LD_ADDR_VAR 0 7
25295: PUSH
25296: LD_VAR 0 7
25300: PPUSH
25301: LD_INT 1
25303: PPUSH
25304: LD_VAR 0 14
25308: PPUSH
25309: CALL_OW 2
25313: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25314: LD_VAR 0 14
25318: PPUSH
25319: LD_VAR 0 9
25323: PPUSH
25324: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25328: LD_VAR 0 9
25332: PPUSH
25333: CALL_OW 313
25337: PUSH
25338: LD_INT 6
25340: EQUAL
25341: PUSH
25342: LD_VAR 0 9
25346: PPUSH
25347: CALL_OW 266
25351: PUSH
25352: LD_INT 32
25354: PUSH
25355: LD_INT 31
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: IN
25362: OR
25363: IFFALSE 25177
25365: GO 25174
25367: POP
25368: POP
// end else
25369: GO 25751
// for j = 1 to x do
25371: LD_ADDR_VAR 0 9
25375: PUSH
25376: DOUBLE
25377: LD_INT 1
25379: DEC
25380: ST_TO_ADDR
25381: LD_VAR 0 13
25385: PUSH
25386: FOR_TO
25387: IFFALSE 25749
// begin InitHc ;
25389: CALL_OW 19
// if not f then
25393: LD_VAR 0 12
25397: NOT
25398: IFFALSE 25487
// begin PrepareHuman ( false , i , skill ) ;
25400: LD_INT 0
25402: PPUSH
25403: LD_VAR 0 8
25407: PPUSH
25408: LD_VAR 0 4
25412: PPUSH
25413: CALL_OW 380
// un := CreateHuman ;
25417: LD_ADDR_VAR 0 14
25421: PUSH
25422: CALL_OW 44
25426: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25427: LD_ADDR_VAR 0 7
25431: PUSH
25432: LD_VAR 0 7
25436: PPUSH
25437: LD_INT 1
25439: PPUSH
25440: LD_VAR 0 14
25444: PPUSH
25445: CALL_OW 2
25449: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25450: LD_VAR 0 14
25454: PPUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: CALL_OW 250
25464: PPUSH
25465: LD_VAR 0 1
25469: PPUSH
25470: CALL_OW 251
25474: PPUSH
25475: LD_INT 10
25477: PPUSH
25478: LD_INT 0
25480: PPUSH
25481: CALL_OW 50
// continue ;
25485: GO 25386
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25487: LD_VAR 0 12
25491: PUSH
25492: LD_INT 1
25494: ARRAY
25495: PPUSH
25496: CALL_OW 313
25500: PUSH
25501: LD_VAR 0 12
25505: PUSH
25506: LD_INT 1
25508: ARRAY
25509: PPUSH
25510: CALL_OW 266
25514: PUSH
25515: LD_INT 32
25517: PUSH
25518: LD_INT 31
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: IN
25525: AND
25526: PUSH
25527: LD_VAR 0 12
25531: PUSH
25532: LD_INT 1
25534: ARRAY
25535: PPUSH
25536: CALL_OW 313
25540: PUSH
25541: LD_INT 6
25543: EQUAL
25544: OR
25545: IFFALSE 25565
// f := Delete ( f , 1 ) ;
25547: LD_ADDR_VAR 0 12
25551: PUSH
25552: LD_VAR 0 12
25556: PPUSH
25557: LD_INT 1
25559: PPUSH
25560: CALL_OW 3
25564: ST_TO_ADDR
// if not f then
25565: LD_VAR 0 12
25569: NOT
25570: IFFALSE 25588
// begin x := x + 2 ;
25572: LD_ADDR_VAR 0 13
25576: PUSH
25577: LD_VAR 0 13
25581: PUSH
25582: LD_INT 2
25584: PLUS
25585: ST_TO_ADDR
// continue ;
25586: GO 25386
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25588: LD_VAR 0 12
25592: PUSH
25593: LD_INT 1
25595: ARRAY
25596: PPUSH
25597: CALL_OW 266
25601: PUSH
25602: LD_INT 5
25604: EQUAL
25605: IFFALSE 25679
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25607: LD_VAR 0 12
25611: PUSH
25612: LD_INT 1
25614: ARRAY
25615: PPUSH
25616: CALL_OW 313
25620: PUSH
25621: LD_INT 3
25623: LESS
25624: IFFALSE 25660
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25626: LD_INT 0
25628: PPUSH
25629: LD_INT 5
25631: PUSH
25632: LD_INT 8
25634: PUSH
25635: LD_INT 9
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: LIST
25642: PUSH
25643: LD_VAR 0 17
25647: ARRAY
25648: PPUSH
25649: LD_VAR 0 4
25653: PPUSH
25654: CALL_OW 380
25658: GO 25677
// PrepareHuman ( false , i , skill ) ;
25660: LD_INT 0
25662: PPUSH
25663: LD_VAR 0 8
25667: PPUSH
25668: LD_VAR 0 4
25672: PPUSH
25673: CALL_OW 380
// end else
25677: GO 25696
// PrepareHuman ( false , i , skill ) ;
25679: LD_INT 0
25681: PPUSH
25682: LD_VAR 0 8
25686: PPUSH
25687: LD_VAR 0 4
25691: PPUSH
25692: CALL_OW 380
// un := CreateHuman ;
25696: LD_ADDR_VAR 0 14
25700: PUSH
25701: CALL_OW 44
25705: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25706: LD_ADDR_VAR 0 7
25710: PUSH
25711: LD_VAR 0 7
25715: PPUSH
25716: LD_INT 1
25718: PPUSH
25719: LD_VAR 0 14
25723: PPUSH
25724: CALL_OW 2
25728: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25729: LD_VAR 0 14
25733: PPUSH
25734: LD_VAR 0 12
25738: PUSH
25739: LD_INT 1
25741: ARRAY
25742: PPUSH
25743: CALL_OW 52
// end ;
25747: GO 25386
25749: POP
25750: POP
// end ;
25751: GO 24688
25753: POP
25754: POP
// result := result ^ buildings ;
25755: LD_ADDR_VAR 0 7
25759: PUSH
25760: LD_VAR 0 7
25764: PUSH
25765: LD_VAR 0 18
25769: ADD
25770: ST_TO_ADDR
// end else
25771: GO 25914
// begin for i = 1 to personel do
25773: LD_ADDR_VAR 0 8
25777: PUSH
25778: DOUBLE
25779: LD_INT 1
25781: DEC
25782: ST_TO_ADDR
25783: LD_VAR 0 6
25787: PUSH
25788: FOR_TO
25789: IFFALSE 25912
// begin if i > 4 then
25791: LD_VAR 0 8
25795: PUSH
25796: LD_INT 4
25798: GREATER
25799: IFFALSE 25803
// break ;
25801: GO 25912
// x := personel [ i ] ;
25803: LD_ADDR_VAR 0 13
25807: PUSH
25808: LD_VAR 0 6
25812: PUSH
25813: LD_VAR 0 8
25817: ARRAY
25818: ST_TO_ADDR
// if x = - 1 then
25819: LD_VAR 0 13
25823: PUSH
25824: LD_INT 1
25826: NEG
25827: EQUAL
25828: IFFALSE 25832
// continue ;
25830: GO 25788
// PrepareHuman ( false , i , skill ) ;
25832: LD_INT 0
25834: PPUSH
25835: LD_VAR 0 8
25839: PPUSH
25840: LD_VAR 0 4
25844: PPUSH
25845: CALL_OW 380
// un := CreateHuman ;
25849: LD_ADDR_VAR 0 14
25853: PUSH
25854: CALL_OW 44
25858: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25859: LD_VAR 0 14
25863: PPUSH
25864: LD_VAR 0 1
25868: PPUSH
25869: CALL_OW 250
25873: PPUSH
25874: LD_VAR 0 1
25878: PPUSH
25879: CALL_OW 251
25883: PPUSH
25884: LD_INT 10
25886: PPUSH
25887: LD_INT 0
25889: PPUSH
25890: CALL_OW 50
// result := result ^ un ;
25894: LD_ADDR_VAR 0 7
25898: PUSH
25899: LD_VAR 0 7
25903: PUSH
25904: LD_VAR 0 14
25908: ADD
25909: ST_TO_ADDR
// end ;
25910: GO 25788
25912: POP
25913: POP
// end ; end ;
25914: LD_VAR 0 7
25918: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25919: LD_INT 0
25921: PPUSH
25922: PPUSH
25923: PPUSH
25924: PPUSH
25925: PPUSH
25926: PPUSH
25927: PPUSH
25928: PPUSH
25929: PPUSH
25930: PPUSH
25931: PPUSH
25932: PPUSH
25933: PPUSH
25934: PPUSH
25935: PPUSH
25936: PPUSH
// result := false ;
25937: LD_ADDR_VAR 0 3
25941: PUSH
25942: LD_INT 0
25944: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25945: LD_VAR 0 1
25949: NOT
25950: PUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 266
25960: PUSH
25961: LD_INT 32
25963: PUSH
25964: LD_INT 33
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: IN
25971: NOT
25972: OR
25973: IFFALSE 25977
// exit ;
25975: GO 27086
// nat := GetNation ( tower ) ;
25977: LD_ADDR_VAR 0 12
25981: PUSH
25982: LD_VAR 0 1
25986: PPUSH
25987: CALL_OW 248
25991: ST_TO_ADDR
// side := GetSide ( tower ) ;
25992: LD_ADDR_VAR 0 16
25996: PUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: CALL_OW 255
26006: ST_TO_ADDR
// x := GetX ( tower ) ;
26007: LD_ADDR_VAR 0 10
26011: PUSH
26012: LD_VAR 0 1
26016: PPUSH
26017: CALL_OW 250
26021: ST_TO_ADDR
// y := GetY ( tower ) ;
26022: LD_ADDR_VAR 0 11
26026: PUSH
26027: LD_VAR 0 1
26031: PPUSH
26032: CALL_OW 251
26036: ST_TO_ADDR
// if not x or not y then
26037: LD_VAR 0 10
26041: NOT
26042: PUSH
26043: LD_VAR 0 11
26047: NOT
26048: OR
26049: IFFALSE 26053
// exit ;
26051: GO 27086
// weapon := 0 ;
26053: LD_ADDR_VAR 0 18
26057: PUSH
26058: LD_INT 0
26060: ST_TO_ADDR
// fac_list := [ ] ;
26061: LD_ADDR_VAR 0 17
26065: PUSH
26066: EMPTY
26067: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26068: LD_ADDR_VAR 0 6
26072: PUSH
26073: LD_VAR 0 1
26077: PPUSH
26078: CALL_OW 274
26082: PPUSH
26083: LD_VAR 0 2
26087: PPUSH
26088: LD_INT 0
26090: PPUSH
26091: CALL 23657 0 3
26095: PPUSH
26096: LD_INT 30
26098: PUSH
26099: LD_INT 3
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PPUSH
26106: CALL_OW 72
26110: ST_TO_ADDR
// if not factories then
26111: LD_VAR 0 6
26115: NOT
26116: IFFALSE 26120
// exit ;
26118: GO 27086
// for i in factories do
26120: LD_ADDR_VAR 0 8
26124: PUSH
26125: LD_VAR 0 6
26129: PUSH
26130: FOR_IN
26131: IFFALSE 26156
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26133: LD_ADDR_VAR 0 17
26137: PUSH
26138: LD_VAR 0 17
26142: PUSH
26143: LD_VAR 0 8
26147: PPUSH
26148: CALL_OW 478
26152: UNION
26153: ST_TO_ADDR
26154: GO 26130
26156: POP
26157: POP
// if not fac_list then
26158: LD_VAR 0 17
26162: NOT
26163: IFFALSE 26167
// exit ;
26165: GO 27086
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26167: LD_ADDR_VAR 0 5
26171: PUSH
26172: LD_INT 4
26174: PUSH
26175: LD_INT 5
26177: PUSH
26178: LD_INT 9
26180: PUSH
26181: LD_INT 10
26183: PUSH
26184: LD_INT 6
26186: PUSH
26187: LD_INT 7
26189: PUSH
26190: LD_INT 11
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 27
26204: PUSH
26205: LD_INT 28
26207: PUSH
26208: LD_INT 26
26210: PUSH
26211: LD_INT 30
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 43
26222: PUSH
26223: LD_INT 44
26225: PUSH
26226: LD_INT 46
26228: PUSH
26229: LD_INT 45
26231: PUSH
26232: LD_INT 47
26234: PUSH
26235: LD_INT 49
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: PUSH
26251: LD_VAR 0 12
26255: ARRAY
26256: ST_TO_ADDR
// list := list isect fac_list ;
26257: LD_ADDR_VAR 0 5
26261: PUSH
26262: LD_VAR 0 5
26266: PUSH
26267: LD_VAR 0 17
26271: ISECT
26272: ST_TO_ADDR
// if not list then
26273: LD_VAR 0 5
26277: NOT
26278: IFFALSE 26282
// exit ;
26280: GO 27086
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26282: LD_VAR 0 12
26286: PUSH
26287: LD_INT 3
26289: EQUAL
26290: PUSH
26291: LD_INT 49
26293: PUSH
26294: LD_VAR 0 5
26298: IN
26299: AND
26300: PUSH
26301: LD_INT 31
26303: PPUSH
26304: LD_VAR 0 16
26308: PPUSH
26309: CALL_OW 321
26313: PUSH
26314: LD_INT 2
26316: EQUAL
26317: AND
26318: IFFALSE 26378
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26320: LD_INT 22
26322: PUSH
26323: LD_VAR 0 16
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 35
26334: PUSH
26335: LD_INT 49
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 91
26344: PUSH
26345: LD_VAR 0 1
26349: PUSH
26350: LD_INT 10
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: LIST
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: PPUSH
26363: CALL_OW 69
26367: NOT
26368: IFFALSE 26378
// weapon := ru_time_lapser ;
26370: LD_ADDR_VAR 0 18
26374: PUSH
26375: LD_INT 49
26377: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26378: LD_VAR 0 12
26382: PUSH
26383: LD_INT 1
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: IN
26393: PUSH
26394: LD_INT 11
26396: PUSH
26397: LD_VAR 0 5
26401: IN
26402: PUSH
26403: LD_INT 30
26405: PUSH
26406: LD_VAR 0 5
26410: IN
26411: OR
26412: AND
26413: PUSH
26414: LD_INT 6
26416: PPUSH
26417: LD_VAR 0 16
26421: PPUSH
26422: CALL_OW 321
26426: PUSH
26427: LD_INT 2
26429: EQUAL
26430: AND
26431: IFFALSE 26596
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26433: LD_INT 22
26435: PUSH
26436: LD_VAR 0 16
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 2
26447: PUSH
26448: LD_INT 35
26450: PUSH
26451: LD_INT 11
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 35
26460: PUSH
26461: LD_INT 30
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 91
26475: PUSH
26476: LD_VAR 0 1
26480: PUSH
26481: LD_INT 18
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: LIST
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: LIST
26493: PPUSH
26494: CALL_OW 69
26498: NOT
26499: PUSH
26500: LD_INT 22
26502: PUSH
26503: LD_VAR 0 16
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 30
26517: PUSH
26518: LD_INT 32
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 30
26527: PUSH
26528: LD_INT 33
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 91
26542: PUSH
26543: LD_VAR 0 1
26547: PUSH
26548: LD_INT 12
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: LIST
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: LIST
26560: PUSH
26561: EMPTY
26562: LIST
26563: PPUSH
26564: CALL_OW 69
26568: PUSH
26569: LD_INT 2
26571: GREATER
26572: AND
26573: IFFALSE 26596
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26575: LD_ADDR_VAR 0 18
26579: PUSH
26580: LD_INT 11
26582: PUSH
26583: LD_INT 30
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_VAR 0 12
26594: ARRAY
26595: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26596: LD_VAR 0 18
26600: NOT
26601: PUSH
26602: LD_INT 40
26604: PPUSH
26605: LD_VAR 0 16
26609: PPUSH
26610: CALL_OW 321
26614: PUSH
26615: LD_INT 2
26617: EQUAL
26618: AND
26619: PUSH
26620: LD_INT 7
26622: PUSH
26623: LD_VAR 0 5
26627: IN
26628: PUSH
26629: LD_INT 28
26631: PUSH
26632: LD_VAR 0 5
26636: IN
26637: OR
26638: PUSH
26639: LD_INT 45
26641: PUSH
26642: LD_VAR 0 5
26646: IN
26647: OR
26648: AND
26649: IFFALSE 26903
// begin hex := GetHexInfo ( x , y ) ;
26651: LD_ADDR_VAR 0 4
26655: PUSH
26656: LD_VAR 0 10
26660: PPUSH
26661: LD_VAR 0 11
26665: PPUSH
26666: CALL_OW 546
26670: ST_TO_ADDR
// if hex [ 1 ] then
26671: LD_VAR 0 4
26675: PUSH
26676: LD_INT 1
26678: ARRAY
26679: IFFALSE 26683
// exit ;
26681: GO 27086
// height := hex [ 2 ] ;
26683: LD_ADDR_VAR 0 15
26687: PUSH
26688: LD_VAR 0 4
26692: PUSH
26693: LD_INT 2
26695: ARRAY
26696: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26697: LD_ADDR_VAR 0 14
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: LD_INT 2
26707: PUSH
26708: LD_INT 3
26710: PUSH
26711: LD_INT 5
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: ST_TO_ADDR
// for i in tmp do
26720: LD_ADDR_VAR 0 8
26724: PUSH
26725: LD_VAR 0 14
26729: PUSH
26730: FOR_IN
26731: IFFALSE 26901
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26733: LD_ADDR_VAR 0 9
26737: PUSH
26738: LD_VAR 0 10
26742: PPUSH
26743: LD_VAR 0 8
26747: PPUSH
26748: LD_INT 5
26750: PPUSH
26751: CALL_OW 272
26755: PUSH
26756: LD_VAR 0 11
26760: PPUSH
26761: LD_VAR 0 8
26765: PPUSH
26766: LD_INT 5
26768: PPUSH
26769: CALL_OW 273
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26778: LD_VAR 0 9
26782: PUSH
26783: LD_INT 1
26785: ARRAY
26786: PPUSH
26787: LD_VAR 0 9
26791: PUSH
26792: LD_INT 2
26794: ARRAY
26795: PPUSH
26796: CALL_OW 488
26800: IFFALSE 26899
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26802: LD_ADDR_VAR 0 4
26806: PUSH
26807: LD_VAR 0 9
26811: PUSH
26812: LD_INT 1
26814: ARRAY
26815: PPUSH
26816: LD_VAR 0 9
26820: PUSH
26821: LD_INT 2
26823: ARRAY
26824: PPUSH
26825: CALL_OW 546
26829: ST_TO_ADDR
// if hex [ 1 ] then
26830: LD_VAR 0 4
26834: PUSH
26835: LD_INT 1
26837: ARRAY
26838: IFFALSE 26842
// continue ;
26840: GO 26730
// h := hex [ 2 ] ;
26842: LD_ADDR_VAR 0 13
26846: PUSH
26847: LD_VAR 0 4
26851: PUSH
26852: LD_INT 2
26854: ARRAY
26855: ST_TO_ADDR
// if h + 7 < height then
26856: LD_VAR 0 13
26860: PUSH
26861: LD_INT 7
26863: PLUS
26864: PUSH
26865: LD_VAR 0 15
26869: LESS
26870: IFFALSE 26899
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26872: LD_ADDR_VAR 0 18
26876: PUSH
26877: LD_INT 7
26879: PUSH
26880: LD_INT 28
26882: PUSH
26883: LD_INT 45
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: LIST
26890: PUSH
26891: LD_VAR 0 12
26895: ARRAY
26896: ST_TO_ADDR
// break ;
26897: GO 26901
// end ; end ; end ;
26899: GO 26730
26901: POP
26902: POP
// end ; if not weapon then
26903: LD_VAR 0 18
26907: NOT
26908: IFFALSE 26968
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26910: LD_ADDR_VAR 0 5
26914: PUSH
26915: LD_VAR 0 5
26919: PUSH
26920: LD_INT 11
26922: PUSH
26923: LD_INT 30
26925: PUSH
26926: LD_INT 49
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: LIST
26933: DIFF
26934: ST_TO_ADDR
// if not list then
26935: LD_VAR 0 5
26939: NOT
26940: IFFALSE 26944
// exit ;
26942: GO 27086
// weapon := list [ rand ( 1 , list ) ] ;
26944: LD_ADDR_VAR 0 18
26948: PUSH
26949: LD_VAR 0 5
26953: PUSH
26954: LD_INT 1
26956: PPUSH
26957: LD_VAR 0 5
26961: PPUSH
26962: CALL_OW 12
26966: ARRAY
26967: ST_TO_ADDR
// end ; if weapon then
26968: LD_VAR 0 18
26972: IFFALSE 27086
// begin tmp := CostOfWeapon ( weapon ) ;
26974: LD_ADDR_VAR 0 14
26978: PUSH
26979: LD_VAR 0 18
26983: PPUSH
26984: CALL_OW 451
26988: ST_TO_ADDR
// j := GetBase ( tower ) ;
26989: LD_ADDR_VAR 0 9
26993: PUSH
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 274
27003: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27004: LD_VAR 0 9
27008: PPUSH
27009: LD_INT 1
27011: PPUSH
27012: CALL_OW 275
27016: PUSH
27017: LD_VAR 0 14
27021: PUSH
27022: LD_INT 1
27024: ARRAY
27025: GREATEREQUAL
27026: PUSH
27027: LD_VAR 0 9
27031: PPUSH
27032: LD_INT 2
27034: PPUSH
27035: CALL_OW 275
27039: PUSH
27040: LD_VAR 0 14
27044: PUSH
27045: LD_INT 2
27047: ARRAY
27048: GREATEREQUAL
27049: AND
27050: PUSH
27051: LD_VAR 0 9
27055: PPUSH
27056: LD_INT 3
27058: PPUSH
27059: CALL_OW 275
27063: PUSH
27064: LD_VAR 0 14
27068: PUSH
27069: LD_INT 3
27071: ARRAY
27072: GREATEREQUAL
27073: AND
27074: IFFALSE 27086
// result := weapon ;
27076: LD_ADDR_VAR 0 3
27080: PUSH
27081: LD_VAR 0 18
27085: ST_TO_ADDR
// end ; end ;
27086: LD_VAR 0 3
27090: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27091: LD_INT 0
27093: PPUSH
27094: PPUSH
// result := true ;
27095: LD_ADDR_VAR 0 3
27099: PUSH
27100: LD_INT 1
27102: ST_TO_ADDR
// if array1 = array2 then
27103: LD_VAR 0 1
27107: PUSH
27108: LD_VAR 0 2
27112: EQUAL
27113: IFFALSE 27173
// begin for i = 1 to array1 do
27115: LD_ADDR_VAR 0 4
27119: PUSH
27120: DOUBLE
27121: LD_INT 1
27123: DEC
27124: ST_TO_ADDR
27125: LD_VAR 0 1
27129: PUSH
27130: FOR_TO
27131: IFFALSE 27169
// if array1 [ i ] <> array2 [ i ] then
27133: LD_VAR 0 1
27137: PUSH
27138: LD_VAR 0 4
27142: ARRAY
27143: PUSH
27144: LD_VAR 0 2
27148: PUSH
27149: LD_VAR 0 4
27153: ARRAY
27154: NONEQUAL
27155: IFFALSE 27167
// begin result := false ;
27157: LD_ADDR_VAR 0 3
27161: PUSH
27162: LD_INT 0
27164: ST_TO_ADDR
// break ;
27165: GO 27169
// end ;
27167: GO 27130
27169: POP
27170: POP
// end else
27171: GO 27181
// result := false ;
27173: LD_ADDR_VAR 0 3
27177: PUSH
27178: LD_INT 0
27180: ST_TO_ADDR
// end ;
27181: LD_VAR 0 3
27185: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27186: LD_INT 0
27188: PPUSH
27189: PPUSH
// if not array1 or not array2 then
27190: LD_VAR 0 1
27194: NOT
27195: PUSH
27196: LD_VAR 0 2
27200: NOT
27201: OR
27202: IFFALSE 27206
// exit ;
27204: GO 27270
// result := true ;
27206: LD_ADDR_VAR 0 3
27210: PUSH
27211: LD_INT 1
27213: ST_TO_ADDR
// for i = 1 to array1 do
27214: LD_ADDR_VAR 0 4
27218: PUSH
27219: DOUBLE
27220: LD_INT 1
27222: DEC
27223: ST_TO_ADDR
27224: LD_VAR 0 1
27228: PUSH
27229: FOR_TO
27230: IFFALSE 27268
// if array1 [ i ] <> array2 [ i ] then
27232: LD_VAR 0 1
27236: PUSH
27237: LD_VAR 0 4
27241: ARRAY
27242: PUSH
27243: LD_VAR 0 2
27247: PUSH
27248: LD_VAR 0 4
27252: ARRAY
27253: NONEQUAL
27254: IFFALSE 27266
// begin result := false ;
27256: LD_ADDR_VAR 0 3
27260: PUSH
27261: LD_INT 0
27263: ST_TO_ADDR
// break ;
27264: GO 27268
// end ;
27266: GO 27229
27268: POP
27269: POP
// end ;
27270: LD_VAR 0 3
27274: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27275: LD_INT 0
27277: PPUSH
27278: PPUSH
27279: PPUSH
// pom := GetBase ( fac ) ;
27280: LD_ADDR_VAR 0 5
27284: PUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 274
27294: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27295: LD_ADDR_VAR 0 4
27299: PUSH
27300: LD_VAR 0 2
27304: PUSH
27305: LD_INT 1
27307: ARRAY
27308: PPUSH
27309: LD_VAR 0 2
27313: PUSH
27314: LD_INT 2
27316: ARRAY
27317: PPUSH
27318: LD_VAR 0 2
27322: PUSH
27323: LD_INT 3
27325: ARRAY
27326: PPUSH
27327: LD_VAR 0 2
27331: PUSH
27332: LD_INT 4
27334: ARRAY
27335: PPUSH
27336: CALL_OW 449
27340: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27341: LD_ADDR_VAR 0 3
27345: PUSH
27346: LD_VAR 0 5
27350: PPUSH
27351: LD_INT 1
27353: PPUSH
27354: CALL_OW 275
27358: PUSH
27359: LD_VAR 0 4
27363: PUSH
27364: LD_INT 1
27366: ARRAY
27367: GREATEREQUAL
27368: PUSH
27369: LD_VAR 0 5
27373: PPUSH
27374: LD_INT 2
27376: PPUSH
27377: CALL_OW 275
27381: PUSH
27382: LD_VAR 0 4
27386: PUSH
27387: LD_INT 2
27389: ARRAY
27390: GREATEREQUAL
27391: AND
27392: PUSH
27393: LD_VAR 0 5
27397: PPUSH
27398: LD_INT 3
27400: PPUSH
27401: CALL_OW 275
27405: PUSH
27406: LD_VAR 0 4
27410: PUSH
27411: LD_INT 3
27413: ARRAY
27414: GREATEREQUAL
27415: AND
27416: ST_TO_ADDR
// end ;
27417: LD_VAR 0 3
27421: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27422: LD_INT 0
27424: PPUSH
27425: PPUSH
27426: PPUSH
27427: PPUSH
// pom := GetBase ( building ) ;
27428: LD_ADDR_VAR 0 3
27432: PUSH
27433: LD_VAR 0 1
27437: PPUSH
27438: CALL_OW 274
27442: ST_TO_ADDR
// if not pom then
27443: LD_VAR 0 3
27447: NOT
27448: IFFALSE 27452
// exit ;
27450: GO 27622
// btype := GetBType ( building ) ;
27452: LD_ADDR_VAR 0 5
27456: PUSH
27457: LD_VAR 0 1
27461: PPUSH
27462: CALL_OW 266
27466: ST_TO_ADDR
// if btype = b_armoury then
27467: LD_VAR 0 5
27471: PUSH
27472: LD_INT 4
27474: EQUAL
27475: IFFALSE 27485
// btype := b_barracks ;
27477: LD_ADDR_VAR 0 5
27481: PUSH
27482: LD_INT 5
27484: ST_TO_ADDR
// if btype = b_depot then
27485: LD_VAR 0 5
27489: PUSH
27490: LD_INT 0
27492: EQUAL
27493: IFFALSE 27503
// btype := b_warehouse ;
27495: LD_ADDR_VAR 0 5
27499: PUSH
27500: LD_INT 1
27502: ST_TO_ADDR
// if btype = b_workshop then
27503: LD_VAR 0 5
27507: PUSH
27508: LD_INT 2
27510: EQUAL
27511: IFFALSE 27521
// btype := b_factory ;
27513: LD_ADDR_VAR 0 5
27517: PUSH
27518: LD_INT 3
27520: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27521: LD_ADDR_VAR 0 4
27525: PUSH
27526: LD_VAR 0 5
27530: PPUSH
27531: LD_VAR 0 1
27535: PPUSH
27536: CALL_OW 248
27540: PPUSH
27541: CALL_OW 450
27545: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27546: LD_ADDR_VAR 0 2
27550: PUSH
27551: LD_VAR 0 3
27555: PPUSH
27556: LD_INT 1
27558: PPUSH
27559: CALL_OW 275
27563: PUSH
27564: LD_VAR 0 4
27568: PUSH
27569: LD_INT 1
27571: ARRAY
27572: GREATEREQUAL
27573: PUSH
27574: LD_VAR 0 3
27578: PPUSH
27579: LD_INT 2
27581: PPUSH
27582: CALL_OW 275
27586: PUSH
27587: LD_VAR 0 4
27591: PUSH
27592: LD_INT 2
27594: ARRAY
27595: GREATEREQUAL
27596: AND
27597: PUSH
27598: LD_VAR 0 3
27602: PPUSH
27603: LD_INT 3
27605: PPUSH
27606: CALL_OW 275
27610: PUSH
27611: LD_VAR 0 4
27615: PUSH
27616: LD_INT 3
27618: ARRAY
27619: GREATEREQUAL
27620: AND
27621: ST_TO_ADDR
// end ;
27622: LD_VAR 0 2
27626: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27627: LD_INT 0
27629: PPUSH
27630: PPUSH
27631: PPUSH
// pom := GetBase ( building ) ;
27632: LD_ADDR_VAR 0 4
27636: PUSH
27637: LD_VAR 0 1
27641: PPUSH
27642: CALL_OW 274
27646: ST_TO_ADDR
// if not pom then
27647: LD_VAR 0 4
27651: NOT
27652: IFFALSE 27656
// exit ;
27654: GO 27757
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27656: LD_ADDR_VAR 0 5
27660: PUSH
27661: LD_VAR 0 2
27665: PPUSH
27666: LD_VAR 0 1
27670: PPUSH
27671: CALL_OW 248
27675: PPUSH
27676: CALL_OW 450
27680: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27681: LD_ADDR_VAR 0 3
27685: PUSH
27686: LD_VAR 0 4
27690: PPUSH
27691: LD_INT 1
27693: PPUSH
27694: CALL_OW 275
27698: PUSH
27699: LD_VAR 0 5
27703: PUSH
27704: LD_INT 1
27706: ARRAY
27707: GREATEREQUAL
27708: PUSH
27709: LD_VAR 0 4
27713: PPUSH
27714: LD_INT 2
27716: PPUSH
27717: CALL_OW 275
27721: PUSH
27722: LD_VAR 0 5
27726: PUSH
27727: LD_INT 2
27729: ARRAY
27730: GREATEREQUAL
27731: AND
27732: PUSH
27733: LD_VAR 0 4
27737: PPUSH
27738: LD_INT 3
27740: PPUSH
27741: CALL_OW 275
27745: PUSH
27746: LD_VAR 0 5
27750: PUSH
27751: LD_INT 3
27753: ARRAY
27754: GREATEREQUAL
27755: AND
27756: ST_TO_ADDR
// end ;
27757: LD_VAR 0 3
27761: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27762: LD_INT 0
27764: PPUSH
27765: PPUSH
27766: PPUSH
27767: PPUSH
27768: PPUSH
27769: PPUSH
27770: PPUSH
27771: PPUSH
27772: PPUSH
27773: PPUSH
27774: PPUSH
// result := false ;
27775: LD_ADDR_VAR 0 8
27779: PUSH
27780: LD_INT 0
27782: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27783: LD_VAR 0 5
27787: NOT
27788: PUSH
27789: LD_VAR 0 1
27793: NOT
27794: OR
27795: PUSH
27796: LD_VAR 0 2
27800: NOT
27801: OR
27802: PUSH
27803: LD_VAR 0 3
27807: NOT
27808: OR
27809: IFFALSE 27813
// exit ;
27811: GO 28627
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27813: LD_ADDR_VAR 0 14
27817: PUSH
27818: LD_VAR 0 1
27822: PPUSH
27823: LD_VAR 0 2
27827: PPUSH
27828: LD_VAR 0 3
27832: PPUSH
27833: LD_VAR 0 4
27837: PPUSH
27838: LD_VAR 0 5
27842: PUSH
27843: LD_INT 1
27845: ARRAY
27846: PPUSH
27847: CALL_OW 248
27851: PPUSH
27852: LD_INT 0
27854: PPUSH
27855: CALL 29880 0 6
27859: ST_TO_ADDR
// if not hexes then
27860: LD_VAR 0 14
27864: NOT
27865: IFFALSE 27869
// exit ;
27867: GO 28627
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27869: LD_ADDR_VAR 0 17
27873: PUSH
27874: LD_VAR 0 5
27878: PPUSH
27879: LD_INT 22
27881: PUSH
27882: LD_VAR 0 13
27886: PPUSH
27887: CALL_OW 255
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: LD_INT 30
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 30
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PPUSH
27928: CALL_OW 72
27932: ST_TO_ADDR
// for i = 1 to hexes do
27933: LD_ADDR_VAR 0 9
27937: PUSH
27938: DOUBLE
27939: LD_INT 1
27941: DEC
27942: ST_TO_ADDR
27943: LD_VAR 0 14
27947: PUSH
27948: FOR_TO
27949: IFFALSE 28625
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27951: LD_ADDR_VAR 0 13
27955: PUSH
27956: LD_VAR 0 14
27960: PUSH
27961: LD_VAR 0 9
27965: ARRAY
27966: PUSH
27967: LD_INT 1
27969: ARRAY
27970: PPUSH
27971: LD_VAR 0 14
27975: PUSH
27976: LD_VAR 0 9
27980: ARRAY
27981: PUSH
27982: LD_INT 2
27984: ARRAY
27985: PPUSH
27986: CALL_OW 428
27990: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27991: LD_VAR 0 14
27995: PUSH
27996: LD_VAR 0 9
28000: ARRAY
28001: PUSH
28002: LD_INT 1
28004: ARRAY
28005: PPUSH
28006: LD_VAR 0 14
28010: PUSH
28011: LD_VAR 0 9
28015: ARRAY
28016: PUSH
28017: LD_INT 2
28019: ARRAY
28020: PPUSH
28021: CALL_OW 351
28025: PUSH
28026: LD_VAR 0 14
28030: PUSH
28031: LD_VAR 0 9
28035: ARRAY
28036: PUSH
28037: LD_INT 1
28039: ARRAY
28040: PPUSH
28041: LD_VAR 0 14
28045: PUSH
28046: LD_VAR 0 9
28050: ARRAY
28051: PUSH
28052: LD_INT 2
28054: ARRAY
28055: PPUSH
28056: CALL_OW 488
28060: NOT
28061: OR
28062: PUSH
28063: LD_VAR 0 13
28067: PPUSH
28068: CALL_OW 247
28072: PUSH
28073: LD_INT 3
28075: EQUAL
28076: OR
28077: IFFALSE 28083
// exit ;
28079: POP
28080: POP
28081: GO 28627
// if not tmp then
28083: LD_VAR 0 13
28087: NOT
28088: IFFALSE 28092
// continue ;
28090: GO 27948
// result := true ;
28092: LD_ADDR_VAR 0 8
28096: PUSH
28097: LD_INT 1
28099: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28100: LD_VAR 0 6
28104: PUSH
28105: LD_VAR 0 13
28109: PPUSH
28110: CALL_OW 247
28114: PUSH
28115: LD_INT 2
28117: EQUAL
28118: AND
28119: PUSH
28120: LD_VAR 0 13
28124: PPUSH
28125: CALL_OW 263
28129: PUSH
28130: LD_INT 1
28132: EQUAL
28133: AND
28134: IFFALSE 28298
// begin if IsDrivenBy ( tmp ) then
28136: LD_VAR 0 13
28140: PPUSH
28141: CALL_OW 311
28145: IFFALSE 28149
// continue ;
28147: GO 27948
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28149: LD_VAR 0 6
28153: PPUSH
28154: LD_INT 3
28156: PUSH
28157: LD_INT 60
28159: PUSH
28160: EMPTY
28161: LIST
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 3
28169: PUSH
28170: LD_INT 55
28172: PUSH
28173: EMPTY
28174: LIST
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PPUSH
28184: CALL_OW 72
28188: IFFALSE 28296
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28190: LD_ADDR_VAR 0 18
28194: PUSH
28195: LD_VAR 0 6
28199: PPUSH
28200: LD_INT 3
28202: PUSH
28203: LD_INT 60
28205: PUSH
28206: EMPTY
28207: LIST
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 3
28215: PUSH
28216: LD_INT 55
28218: PUSH
28219: EMPTY
28220: LIST
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PPUSH
28230: CALL_OW 72
28234: PUSH
28235: LD_INT 1
28237: ARRAY
28238: ST_TO_ADDR
// if IsInUnit ( driver ) then
28239: LD_VAR 0 18
28243: PPUSH
28244: CALL_OW 310
28248: IFFALSE 28259
// ComExit ( driver ) ;
28250: LD_VAR 0 18
28254: PPUSH
28255: CALL 53681 0 1
// AddComEnterUnit ( driver , tmp ) ;
28259: LD_VAR 0 18
28263: PPUSH
28264: LD_VAR 0 13
28268: PPUSH
28269: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28273: LD_VAR 0 18
28277: PPUSH
28278: LD_VAR 0 7
28282: PPUSH
28283: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28287: LD_VAR 0 18
28291: PPUSH
28292: CALL_OW 181
// end ; continue ;
28296: GO 27948
// end ; if not cleaners or not tmp in cleaners then
28298: LD_VAR 0 6
28302: NOT
28303: PUSH
28304: LD_VAR 0 13
28308: PUSH
28309: LD_VAR 0 6
28313: IN
28314: NOT
28315: OR
28316: IFFALSE 28623
// begin if dep then
28318: LD_VAR 0 17
28322: IFFALSE 28458
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28324: LD_ADDR_VAR 0 16
28328: PUSH
28329: LD_VAR 0 17
28333: PUSH
28334: LD_INT 1
28336: ARRAY
28337: PPUSH
28338: CALL_OW 250
28342: PPUSH
28343: LD_VAR 0 17
28347: PUSH
28348: LD_INT 1
28350: ARRAY
28351: PPUSH
28352: CALL_OW 254
28356: PPUSH
28357: LD_INT 5
28359: PPUSH
28360: CALL_OW 272
28364: PUSH
28365: LD_VAR 0 17
28369: PUSH
28370: LD_INT 1
28372: ARRAY
28373: PPUSH
28374: CALL_OW 251
28378: PPUSH
28379: LD_VAR 0 17
28383: PUSH
28384: LD_INT 1
28386: ARRAY
28387: PPUSH
28388: CALL_OW 254
28392: PPUSH
28393: LD_INT 5
28395: PPUSH
28396: CALL_OW 273
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28405: LD_VAR 0 16
28409: PUSH
28410: LD_INT 1
28412: ARRAY
28413: PPUSH
28414: LD_VAR 0 16
28418: PUSH
28419: LD_INT 2
28421: ARRAY
28422: PPUSH
28423: CALL_OW 488
28427: IFFALSE 28458
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28429: LD_VAR 0 13
28433: PPUSH
28434: LD_VAR 0 16
28438: PUSH
28439: LD_INT 1
28441: ARRAY
28442: PPUSH
28443: LD_VAR 0 16
28447: PUSH
28448: LD_INT 2
28450: ARRAY
28451: PPUSH
28452: CALL_OW 111
// continue ;
28456: GO 27948
// end ; end ; r := GetDir ( tmp ) ;
28458: LD_ADDR_VAR 0 15
28462: PUSH
28463: LD_VAR 0 13
28467: PPUSH
28468: CALL_OW 254
28472: ST_TO_ADDR
// if r = 5 then
28473: LD_VAR 0 15
28477: PUSH
28478: LD_INT 5
28480: EQUAL
28481: IFFALSE 28491
// r := 0 ;
28483: LD_ADDR_VAR 0 15
28487: PUSH
28488: LD_INT 0
28490: ST_TO_ADDR
// for j = r to 5 do
28491: LD_ADDR_VAR 0 10
28495: PUSH
28496: DOUBLE
28497: LD_VAR 0 15
28501: DEC
28502: ST_TO_ADDR
28503: LD_INT 5
28505: PUSH
28506: FOR_TO
28507: IFFALSE 28621
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28509: LD_ADDR_VAR 0 11
28513: PUSH
28514: LD_VAR 0 13
28518: PPUSH
28519: CALL_OW 250
28523: PPUSH
28524: LD_VAR 0 10
28528: PPUSH
28529: LD_INT 2
28531: PPUSH
28532: CALL_OW 272
28536: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28537: LD_ADDR_VAR 0 12
28541: PUSH
28542: LD_VAR 0 13
28546: PPUSH
28547: CALL_OW 251
28551: PPUSH
28552: LD_VAR 0 10
28556: PPUSH
28557: LD_INT 2
28559: PPUSH
28560: CALL_OW 273
28564: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28565: LD_VAR 0 11
28569: PPUSH
28570: LD_VAR 0 12
28574: PPUSH
28575: CALL_OW 488
28579: PUSH
28580: LD_VAR 0 11
28584: PPUSH
28585: LD_VAR 0 12
28589: PPUSH
28590: CALL_OW 428
28594: NOT
28595: AND
28596: IFFALSE 28619
// begin ComMoveXY ( tmp , _x , _y ) ;
28598: LD_VAR 0 13
28602: PPUSH
28603: LD_VAR 0 11
28607: PPUSH
28608: LD_VAR 0 12
28612: PPUSH
28613: CALL_OW 111
// break ;
28617: GO 28621
// end ; end ;
28619: GO 28506
28621: POP
28622: POP
// end ; end ;
28623: GO 27948
28625: POP
28626: POP
// end ;
28627: LD_VAR 0 8
28631: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28632: LD_INT 0
28634: PPUSH
// result := true ;
28635: LD_ADDR_VAR 0 3
28639: PUSH
28640: LD_INT 1
28642: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28643: LD_VAR 0 2
28647: PUSH
28648: LD_INT 24
28650: DOUBLE
28651: EQUAL
28652: IFTRUE 28662
28654: LD_INT 33
28656: DOUBLE
28657: EQUAL
28658: IFTRUE 28662
28660: GO 28687
28662: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28663: LD_ADDR_VAR 0 3
28667: PUSH
28668: LD_INT 32
28670: PPUSH
28671: LD_VAR 0 1
28675: PPUSH
28676: CALL_OW 321
28680: PUSH
28681: LD_INT 2
28683: EQUAL
28684: ST_TO_ADDR
28685: GO 29003
28687: LD_INT 20
28689: DOUBLE
28690: EQUAL
28691: IFTRUE 28695
28693: GO 28720
28695: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28696: LD_ADDR_VAR 0 3
28700: PUSH
28701: LD_INT 6
28703: PPUSH
28704: LD_VAR 0 1
28708: PPUSH
28709: CALL_OW 321
28713: PUSH
28714: LD_INT 2
28716: EQUAL
28717: ST_TO_ADDR
28718: GO 29003
28720: LD_INT 22
28722: DOUBLE
28723: EQUAL
28724: IFTRUE 28734
28726: LD_INT 36
28728: DOUBLE
28729: EQUAL
28730: IFTRUE 28734
28732: GO 28759
28734: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28735: LD_ADDR_VAR 0 3
28739: PUSH
28740: LD_INT 15
28742: PPUSH
28743: LD_VAR 0 1
28747: PPUSH
28748: CALL_OW 321
28752: PUSH
28753: LD_INT 2
28755: EQUAL
28756: ST_TO_ADDR
28757: GO 29003
28759: LD_INT 30
28761: DOUBLE
28762: EQUAL
28763: IFTRUE 28767
28765: GO 28792
28767: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28768: LD_ADDR_VAR 0 3
28772: PUSH
28773: LD_INT 20
28775: PPUSH
28776: LD_VAR 0 1
28780: PPUSH
28781: CALL_OW 321
28785: PUSH
28786: LD_INT 2
28788: EQUAL
28789: ST_TO_ADDR
28790: GO 29003
28792: LD_INT 28
28794: DOUBLE
28795: EQUAL
28796: IFTRUE 28806
28798: LD_INT 21
28800: DOUBLE
28801: EQUAL
28802: IFTRUE 28806
28804: GO 28831
28806: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28807: LD_ADDR_VAR 0 3
28811: PUSH
28812: LD_INT 21
28814: PPUSH
28815: LD_VAR 0 1
28819: PPUSH
28820: CALL_OW 321
28824: PUSH
28825: LD_INT 2
28827: EQUAL
28828: ST_TO_ADDR
28829: GO 29003
28831: LD_INT 16
28833: DOUBLE
28834: EQUAL
28835: IFTRUE 28839
28837: GO 28864
28839: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28840: LD_ADDR_VAR 0 3
28844: PUSH
28845: LD_INT 84
28847: PPUSH
28848: LD_VAR 0 1
28852: PPUSH
28853: CALL_OW 321
28857: PUSH
28858: LD_INT 2
28860: EQUAL
28861: ST_TO_ADDR
28862: GO 29003
28864: LD_INT 19
28866: DOUBLE
28867: EQUAL
28868: IFTRUE 28878
28870: LD_INT 23
28872: DOUBLE
28873: EQUAL
28874: IFTRUE 28878
28876: GO 28903
28878: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28879: LD_ADDR_VAR 0 3
28883: PUSH
28884: LD_INT 83
28886: PPUSH
28887: LD_VAR 0 1
28891: PPUSH
28892: CALL_OW 321
28896: PUSH
28897: LD_INT 2
28899: EQUAL
28900: ST_TO_ADDR
28901: GO 29003
28903: LD_INT 17
28905: DOUBLE
28906: EQUAL
28907: IFTRUE 28911
28909: GO 28936
28911: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28912: LD_ADDR_VAR 0 3
28916: PUSH
28917: LD_INT 39
28919: PPUSH
28920: LD_VAR 0 1
28924: PPUSH
28925: CALL_OW 321
28929: PUSH
28930: LD_INT 2
28932: EQUAL
28933: ST_TO_ADDR
28934: GO 29003
28936: LD_INT 18
28938: DOUBLE
28939: EQUAL
28940: IFTRUE 28944
28942: GO 28969
28944: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28945: LD_ADDR_VAR 0 3
28949: PUSH
28950: LD_INT 40
28952: PPUSH
28953: LD_VAR 0 1
28957: PPUSH
28958: CALL_OW 321
28962: PUSH
28963: LD_INT 2
28965: EQUAL
28966: ST_TO_ADDR
28967: GO 29003
28969: LD_INT 27
28971: DOUBLE
28972: EQUAL
28973: IFTRUE 28977
28975: GO 29002
28977: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28978: LD_ADDR_VAR 0 3
28982: PUSH
28983: LD_INT 35
28985: PPUSH
28986: LD_VAR 0 1
28990: PPUSH
28991: CALL_OW 321
28995: PUSH
28996: LD_INT 2
28998: EQUAL
28999: ST_TO_ADDR
29000: GO 29003
29002: POP
// end ;
29003: LD_VAR 0 3
29007: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29008: LD_INT 0
29010: PPUSH
29011: PPUSH
29012: PPUSH
29013: PPUSH
29014: PPUSH
29015: PPUSH
29016: PPUSH
29017: PPUSH
29018: PPUSH
29019: PPUSH
29020: PPUSH
// result := false ;
29021: LD_ADDR_VAR 0 6
29025: PUSH
29026: LD_INT 0
29028: ST_TO_ADDR
// if btype = b_depot then
29029: LD_VAR 0 2
29033: PUSH
29034: LD_INT 0
29036: EQUAL
29037: IFFALSE 29049
// begin result := true ;
29039: LD_ADDR_VAR 0 6
29043: PUSH
29044: LD_INT 1
29046: ST_TO_ADDR
// exit ;
29047: GO 29875
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29049: LD_VAR 0 1
29053: NOT
29054: PUSH
29055: LD_VAR 0 1
29059: PPUSH
29060: CALL_OW 266
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: LD_INT 1
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: IN
29075: NOT
29076: OR
29077: PUSH
29078: LD_VAR 0 2
29082: NOT
29083: OR
29084: PUSH
29085: LD_VAR 0 5
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: LD_INT 1
29095: PUSH
29096: LD_INT 2
29098: PUSH
29099: LD_INT 3
29101: PUSH
29102: LD_INT 4
29104: PUSH
29105: LD_INT 5
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: IN
29116: NOT
29117: OR
29118: PUSH
29119: LD_VAR 0 3
29123: PPUSH
29124: LD_VAR 0 4
29128: PPUSH
29129: CALL_OW 488
29133: NOT
29134: OR
29135: IFFALSE 29139
// exit ;
29137: GO 29875
// side := GetSide ( depot ) ;
29139: LD_ADDR_VAR 0 9
29143: PUSH
29144: LD_VAR 0 1
29148: PPUSH
29149: CALL_OW 255
29153: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29154: LD_VAR 0 9
29158: PPUSH
29159: LD_VAR 0 2
29163: PPUSH
29164: CALL 28632 0 2
29168: NOT
29169: IFFALSE 29173
// exit ;
29171: GO 29875
// pom := GetBase ( depot ) ;
29173: LD_ADDR_VAR 0 10
29177: PUSH
29178: LD_VAR 0 1
29182: PPUSH
29183: CALL_OW 274
29187: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29188: LD_ADDR_VAR 0 11
29192: PUSH
29193: LD_VAR 0 2
29197: PPUSH
29198: LD_VAR 0 1
29202: PPUSH
29203: CALL_OW 248
29207: PPUSH
29208: CALL_OW 450
29212: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29213: LD_VAR 0 10
29217: PPUSH
29218: LD_INT 1
29220: PPUSH
29221: CALL_OW 275
29225: PUSH
29226: LD_VAR 0 11
29230: PUSH
29231: LD_INT 1
29233: ARRAY
29234: GREATEREQUAL
29235: PUSH
29236: LD_VAR 0 10
29240: PPUSH
29241: LD_INT 2
29243: PPUSH
29244: CALL_OW 275
29248: PUSH
29249: LD_VAR 0 11
29253: PUSH
29254: LD_INT 2
29256: ARRAY
29257: GREATEREQUAL
29258: AND
29259: PUSH
29260: LD_VAR 0 10
29264: PPUSH
29265: LD_INT 3
29267: PPUSH
29268: CALL_OW 275
29272: PUSH
29273: LD_VAR 0 11
29277: PUSH
29278: LD_INT 3
29280: ARRAY
29281: GREATEREQUAL
29282: AND
29283: NOT
29284: IFFALSE 29288
// exit ;
29286: GO 29875
// if GetBType ( depot ) = b_depot then
29288: LD_VAR 0 1
29292: PPUSH
29293: CALL_OW 266
29297: PUSH
29298: LD_INT 0
29300: EQUAL
29301: IFFALSE 29313
// dist := 28 else
29303: LD_ADDR_VAR 0 14
29307: PUSH
29308: LD_INT 28
29310: ST_TO_ADDR
29311: GO 29321
// dist := 36 ;
29313: LD_ADDR_VAR 0 14
29317: PUSH
29318: LD_INT 36
29320: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29321: LD_VAR 0 1
29325: PPUSH
29326: LD_VAR 0 3
29330: PPUSH
29331: LD_VAR 0 4
29335: PPUSH
29336: CALL_OW 297
29340: PUSH
29341: LD_VAR 0 14
29345: GREATER
29346: IFFALSE 29350
// exit ;
29348: GO 29875
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29350: LD_ADDR_VAR 0 12
29354: PUSH
29355: LD_VAR 0 2
29359: PPUSH
29360: LD_VAR 0 3
29364: PPUSH
29365: LD_VAR 0 4
29369: PPUSH
29370: LD_VAR 0 5
29374: PPUSH
29375: LD_VAR 0 1
29379: PPUSH
29380: CALL_OW 248
29384: PPUSH
29385: LD_INT 0
29387: PPUSH
29388: CALL 29880 0 6
29392: ST_TO_ADDR
// if not hexes then
29393: LD_VAR 0 12
29397: NOT
29398: IFFALSE 29402
// exit ;
29400: GO 29875
// hex := GetHexInfo ( x , y ) ;
29402: LD_ADDR_VAR 0 15
29406: PUSH
29407: LD_VAR 0 3
29411: PPUSH
29412: LD_VAR 0 4
29416: PPUSH
29417: CALL_OW 546
29421: ST_TO_ADDR
// if hex [ 1 ] then
29422: LD_VAR 0 15
29426: PUSH
29427: LD_INT 1
29429: ARRAY
29430: IFFALSE 29434
// exit ;
29432: GO 29875
// height := hex [ 2 ] ;
29434: LD_ADDR_VAR 0 13
29438: PUSH
29439: LD_VAR 0 15
29443: PUSH
29444: LD_INT 2
29446: ARRAY
29447: ST_TO_ADDR
// for i = 1 to hexes do
29448: LD_ADDR_VAR 0 7
29452: PUSH
29453: DOUBLE
29454: LD_INT 1
29456: DEC
29457: ST_TO_ADDR
29458: LD_VAR 0 12
29462: PUSH
29463: FOR_TO
29464: IFFALSE 29794
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29466: LD_VAR 0 12
29470: PUSH
29471: LD_VAR 0 7
29475: ARRAY
29476: PUSH
29477: LD_INT 1
29479: ARRAY
29480: PPUSH
29481: LD_VAR 0 12
29485: PUSH
29486: LD_VAR 0 7
29490: ARRAY
29491: PUSH
29492: LD_INT 2
29494: ARRAY
29495: PPUSH
29496: CALL_OW 488
29500: NOT
29501: PUSH
29502: LD_VAR 0 12
29506: PUSH
29507: LD_VAR 0 7
29511: ARRAY
29512: PUSH
29513: LD_INT 1
29515: ARRAY
29516: PPUSH
29517: LD_VAR 0 12
29521: PUSH
29522: LD_VAR 0 7
29526: ARRAY
29527: PUSH
29528: LD_INT 2
29530: ARRAY
29531: PPUSH
29532: CALL_OW 428
29536: PUSH
29537: LD_INT 0
29539: GREATER
29540: OR
29541: PUSH
29542: LD_VAR 0 12
29546: PUSH
29547: LD_VAR 0 7
29551: ARRAY
29552: PUSH
29553: LD_INT 1
29555: ARRAY
29556: PPUSH
29557: LD_VAR 0 12
29561: PUSH
29562: LD_VAR 0 7
29566: ARRAY
29567: PUSH
29568: LD_INT 2
29570: ARRAY
29571: PPUSH
29572: CALL_OW 351
29576: OR
29577: IFFALSE 29583
// exit ;
29579: POP
29580: POP
29581: GO 29875
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29583: LD_ADDR_VAR 0 8
29587: PUSH
29588: LD_VAR 0 12
29592: PUSH
29593: LD_VAR 0 7
29597: ARRAY
29598: PUSH
29599: LD_INT 1
29601: ARRAY
29602: PPUSH
29603: LD_VAR 0 12
29607: PUSH
29608: LD_VAR 0 7
29612: ARRAY
29613: PUSH
29614: LD_INT 2
29616: ARRAY
29617: PPUSH
29618: CALL_OW 546
29622: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29623: LD_VAR 0 8
29627: PUSH
29628: LD_INT 1
29630: ARRAY
29631: PUSH
29632: LD_VAR 0 8
29636: PUSH
29637: LD_INT 2
29639: ARRAY
29640: PUSH
29641: LD_VAR 0 13
29645: PUSH
29646: LD_INT 2
29648: PLUS
29649: GREATER
29650: OR
29651: PUSH
29652: LD_VAR 0 8
29656: PUSH
29657: LD_INT 2
29659: ARRAY
29660: PUSH
29661: LD_VAR 0 13
29665: PUSH
29666: LD_INT 2
29668: MINUS
29669: LESS
29670: OR
29671: PUSH
29672: LD_VAR 0 8
29676: PUSH
29677: LD_INT 3
29679: ARRAY
29680: PUSH
29681: LD_INT 0
29683: PUSH
29684: LD_INT 8
29686: PUSH
29687: LD_INT 9
29689: PUSH
29690: LD_INT 10
29692: PUSH
29693: LD_INT 11
29695: PUSH
29696: LD_INT 12
29698: PUSH
29699: LD_INT 13
29701: PUSH
29702: LD_INT 16
29704: PUSH
29705: LD_INT 17
29707: PUSH
29708: LD_INT 18
29710: PUSH
29711: LD_INT 19
29713: PUSH
29714: LD_INT 20
29716: PUSH
29717: LD_INT 21
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: IN
29735: NOT
29736: OR
29737: PUSH
29738: LD_VAR 0 8
29742: PUSH
29743: LD_INT 5
29745: ARRAY
29746: NOT
29747: OR
29748: PUSH
29749: LD_VAR 0 8
29753: PUSH
29754: LD_INT 6
29756: ARRAY
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: LD_INT 7
29766: PUSH
29767: LD_INT 9
29769: PUSH
29770: LD_INT 10
29772: PUSH
29773: LD_INT 11
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: IN
29784: NOT
29785: OR
29786: IFFALSE 29792
// exit ;
29788: POP
29789: POP
29790: GO 29875
// end ;
29792: GO 29463
29794: POP
29795: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29796: LD_VAR 0 9
29800: PPUSH
29801: LD_VAR 0 3
29805: PPUSH
29806: LD_VAR 0 4
29810: PPUSH
29811: LD_INT 20
29813: PPUSH
29814: CALL 21798 0 4
29818: PUSH
29819: LD_INT 4
29821: ARRAY
29822: IFFALSE 29826
// exit ;
29824: GO 29875
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29826: LD_VAR 0 2
29830: PUSH
29831: LD_INT 29
29833: PUSH
29834: LD_INT 30
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: IN
29841: PUSH
29842: LD_VAR 0 3
29846: PPUSH
29847: LD_VAR 0 4
29851: PPUSH
29852: LD_VAR 0 9
29856: PPUSH
29857: CALL_OW 440
29861: NOT
29862: AND
29863: IFFALSE 29867
// exit ;
29865: GO 29875
// result := true ;
29867: LD_ADDR_VAR 0 6
29871: PUSH
29872: LD_INT 1
29874: ST_TO_ADDR
// end ;
29875: LD_VAR 0 6
29879: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29880: LD_INT 0
29882: PPUSH
29883: PPUSH
29884: PPUSH
29885: PPUSH
29886: PPUSH
29887: PPUSH
29888: PPUSH
29889: PPUSH
29890: PPUSH
29891: PPUSH
29892: PPUSH
29893: PPUSH
29894: PPUSH
29895: PPUSH
29896: PPUSH
29897: PPUSH
29898: PPUSH
29899: PPUSH
29900: PPUSH
29901: PPUSH
29902: PPUSH
29903: PPUSH
29904: PPUSH
29905: PPUSH
29906: PPUSH
29907: PPUSH
29908: PPUSH
29909: PPUSH
29910: PPUSH
29911: PPUSH
29912: PPUSH
29913: PPUSH
29914: PPUSH
29915: PPUSH
29916: PPUSH
29917: PPUSH
29918: PPUSH
29919: PPUSH
29920: PPUSH
29921: PPUSH
29922: PPUSH
29923: PPUSH
29924: PPUSH
29925: PPUSH
29926: PPUSH
29927: PPUSH
29928: PPUSH
29929: PPUSH
29930: PPUSH
29931: PPUSH
29932: PPUSH
29933: PPUSH
29934: PPUSH
29935: PPUSH
29936: PPUSH
29937: PPUSH
29938: PPUSH
29939: PPUSH
// result = [ ] ;
29940: LD_ADDR_VAR 0 7
29944: PUSH
29945: EMPTY
29946: ST_TO_ADDR
// temp_list = [ ] ;
29947: LD_ADDR_VAR 0 9
29951: PUSH
29952: EMPTY
29953: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29954: LD_VAR 0 4
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: LD_INT 2
29967: PUSH
29968: LD_INT 3
29970: PUSH
29971: LD_INT 4
29973: PUSH
29974: LD_INT 5
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: IN
29985: NOT
29986: PUSH
29987: LD_VAR 0 1
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: IN
30002: PUSH
30003: LD_VAR 0 5
30007: PUSH
30008: LD_INT 1
30010: PUSH
30011: LD_INT 2
30013: PUSH
30014: LD_INT 3
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: LIST
30021: IN
30022: NOT
30023: AND
30024: OR
30025: IFFALSE 30029
// exit ;
30027: GO 48420
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30029: LD_VAR 0 1
30033: PUSH
30034: LD_INT 6
30036: PUSH
30037: LD_INT 7
30039: PUSH
30040: LD_INT 8
30042: PUSH
30043: LD_INT 13
30045: PUSH
30046: LD_INT 12
30048: PUSH
30049: LD_INT 15
30051: PUSH
30052: LD_INT 11
30054: PUSH
30055: LD_INT 14
30057: PUSH
30058: LD_INT 10
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: IN
30072: IFFALSE 30082
// btype = b_lab ;
30074: LD_ADDR_VAR 0 1
30078: PUSH
30079: LD_INT 6
30081: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30082: LD_VAR 0 6
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: LD_INT 2
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: LIST
30100: IN
30101: NOT
30102: PUSH
30103: LD_VAR 0 1
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: LD_INT 3
30119: PUSH
30120: LD_INT 6
30122: PUSH
30123: LD_INT 36
30125: PUSH
30126: LD_INT 4
30128: PUSH
30129: LD_INT 5
30131: PUSH
30132: LD_INT 31
30134: PUSH
30135: LD_INT 32
30137: PUSH
30138: LD_INT 33
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: IN
30154: NOT
30155: PUSH
30156: LD_VAR 0 6
30160: PUSH
30161: LD_INT 1
30163: EQUAL
30164: AND
30165: OR
30166: PUSH
30167: LD_VAR 0 1
30171: PUSH
30172: LD_INT 2
30174: PUSH
30175: LD_INT 3
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: IN
30182: NOT
30183: PUSH
30184: LD_VAR 0 6
30188: PUSH
30189: LD_INT 2
30191: EQUAL
30192: AND
30193: OR
30194: IFFALSE 30204
// mode = 0 ;
30196: LD_ADDR_VAR 0 6
30200: PUSH
30201: LD_INT 0
30203: ST_TO_ADDR
// case mode of 0 :
30204: LD_VAR 0 6
30208: PUSH
30209: LD_INT 0
30211: DOUBLE
30212: EQUAL
30213: IFTRUE 30217
30215: GO 41670
30217: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30218: LD_ADDR_VAR 0 11
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: LD_INT 1
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 1
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: LD_INT 2
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: LD_INT 2
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: LD_INT 2
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 0
30343: PUSH
30344: LD_INT 2
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 1
30353: NEG
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: LD_INT 3
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 3
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: NEG
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30411: LD_ADDR_VAR 0 12
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: LD_INT 0
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: LD_INT 1
30431: NEG
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 1
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 1
30469: NEG
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: NEG
30481: PUSH
30482: LD_INT 1
30484: NEG
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 2
30503: PUSH
30504: LD_INT 0
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 2
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 2
30534: NEG
30535: PUSH
30536: LD_INT 0
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 2
30545: NEG
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 3
30568: NEG
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 3
30579: NEG
30580: PUSH
30581: LD_INT 1
30583: NEG
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30607: LD_ADDR_VAR 0 13
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 0
30624: PUSH
30625: LD_INT 1
30627: NEG
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: LD_INT 0
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 1
30645: PUSH
30646: LD_INT 1
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: LD_INT 1
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: NEG
30689: PUSH
30690: LD_INT 2
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 2
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: LD_INT 2
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: LD_INT 2
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 2
30730: NEG
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 2
30742: NEG
30743: PUSH
30744: LD_INT 2
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: LD_INT 3
30758: NEG
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 3
30766: NEG
30767: PUSH
30768: LD_INT 2
30770: NEG
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 3
30778: NEG
30779: PUSH
30780: LD_INT 3
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30806: LD_ADDR_VAR 0 14
30810: PUSH
30811: LD_INT 0
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 0
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 1
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 0
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: NEG
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: LD_INT 2
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: LD_INT 2
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: LD_INT 1
30913: NEG
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: NEG
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 1
30952: NEG
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: LD_INT 3
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: LD_INT 2
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31002: LD_ADDR_VAR 0 15
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: LD_INT 1
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 1
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 3
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 3
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31195: LD_ADDR_VAR 0 16
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: LD_INT 2
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 2
31288: PUSH
31289: LD_INT 1
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 1
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 2
31318: NEG
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: LD_INT 2
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 3
31342: PUSH
31343: LD_INT 2
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 3
31352: PUSH
31353: LD_INT 3
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 2
31362: PUSH
31363: LD_INT 3
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31388: LD_ADDR_VAR 0 17
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 0
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: LD_INT 1
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: LD_INT 1
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 2
31503: PUSH
31504: LD_INT 0
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 2
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 2
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: LD_INT 2
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 2
31564: NEG
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: LD_INT 2
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31618: LD_ADDR_VAR 0 18
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: LD_INT 1
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: PUSH
31657: LD_INT 1
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 0
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: NEG
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 1
31687: NEG
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: LD_INT 2
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 1
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 2
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: LD_INT 2
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: LD_INT 2
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 1
31783: NEG
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 2
31794: NEG
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 2
31805: NEG
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 2
31817: NEG
31818: PUSH
31819: LD_INT 2
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31848: LD_ADDR_VAR 0 19
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: LD_INT 0
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: LD_INT 1
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 1
31906: NEG
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 1
31917: NEG
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: LD_INT 2
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: LD_INT 2
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 2
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 0
32003: PUSH
32004: LD_INT 2
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 1
32013: NEG
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 2
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 2
32047: NEG
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32078: LD_ADDR_VAR 0 20
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: LD_INT 0
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: LD_INT 1
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: PUSH
32138: LD_INT 0
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: LD_INT 1
32151: NEG
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 0
32171: PUSH
32172: LD_INT 2
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 1
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 2
32193: PUSH
32194: LD_INT 0
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 2
32213: PUSH
32214: LD_INT 2
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: LD_INT 2
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: LD_INT 2
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 1
32243: NEG
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 2
32254: NEG
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 2
32265: NEG
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32308: LD_ADDR_VAR 0 21
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 0
32325: PUSH
32326: LD_INT 1
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 1
32377: NEG
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: LD_INT 2
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: LD_INT 2
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 2
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 2
32484: NEG
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 2
32495: NEG
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 2
32507: NEG
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32538: LD_ADDR_VAR 0 22
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: NEG
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 1
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: LD_INT 1
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 2
32673: PUSH
32674: LD_INT 2
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 0
32693: PUSH
32694: LD_INT 2
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 1
32703: NEG
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 2
32714: NEG
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 2
32725: NEG
32726: PUSH
32727: LD_INT 1
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 2
32737: NEG
32738: PUSH
32739: LD_INT 2
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32768: LD_ADDR_VAR 0 23
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 1
32826: NEG
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: NEG
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: LD_INT 2
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: LD_INT 2
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 2
32944: NEG
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: NEG
32980: PUSH
32981: LD_INT 3
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: LD_INT 3
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: LD_INT 2
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: LD_INT 1
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33048: LD_ADDR_VAR 0 24
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: NEG
33130: PUSH
33131: LD_INT 2
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 2
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 2
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 2
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 1
33193: PUSH
33194: LD_INT 2
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 2
33224: NEG
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 2
33235: NEG
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 2
33247: NEG
33248: PUSH
33249: LD_INT 2
33251: NEG
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: LD_INT 2
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 2
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 3
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 3
33291: PUSH
33292: LD_INT 2
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33324: LD_ADDR_VAR 0 25
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 0
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: LD_INT 2
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 2
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 1
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 0
33479: PUSH
33480: LD_INT 2
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 1
33489: NEG
33490: PUSH
33491: LD_INT 1
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 2
33500: NEG
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: LD_INT 1
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 2
33523: NEG
33524: PUSH
33525: LD_INT 2
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 3
33545: PUSH
33546: LD_INT 2
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 2
33555: PUSH
33556: LD_INT 3
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 3
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33598: LD_ADDR_VAR 0 26
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: LD_INT 2
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: LD_INT 2
33694: NEG
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: LD_INT 2
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 1
33743: PUSH
33744: LD_INT 2
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 0
33753: PUSH
33754: LD_INT 2
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 2
33785: NEG
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 2
33797: NEG
33798: PUSH
33799: LD_INT 2
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 3
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 1
33819: PUSH
33820: LD_INT 3
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: PUSH
33831: LD_INT 2
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 2
33840: NEG
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33874: LD_ADDR_VAR 0 27
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: LD_INT 1
33894: NEG
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: LD_INT 0
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: NEG
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: NEG
33956: PUSH
33957: LD_INT 2
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 0
33967: PUSH
33968: LD_INT 2
33970: NEG
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 2
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 2
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 2
34009: PUSH
34010: LD_INT 2
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: NEG
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 2
34061: NEG
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 2
34073: NEG
34074: PUSH
34075: LD_INT 2
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 2
34096: NEG
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 3
34107: NEG
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 3
34119: NEG
34120: PUSH
34121: LD_INT 2
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34154: LD_ADDR_VAR 0 28
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 1
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: LD_INT 2
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 2
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 2
34289: PUSH
34290: LD_INT 2
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: LD_INT 2
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: LD_INT 2
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 2
34330: NEG
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 2
34341: NEG
34342: PUSH
34343: LD_INT 1
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 2
34353: NEG
34354: PUSH
34355: LD_INT 2
34357: NEG
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 2
34365: NEG
34366: PUSH
34367: LD_INT 3
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: LD_INT 3
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 3
34389: NEG
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 3
34401: NEG
34402: PUSH
34403: LD_INT 2
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34436: LD_ADDR_VAR 0 29
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 1
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 1
34494: NEG
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: LD_INT 1
34509: NEG
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 1
34517: NEG
34518: PUSH
34519: LD_INT 2
34521: NEG
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 2
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: PUSH
34541: LD_INT 1
34543: NEG
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: LD_INT 1
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: LD_INT 2
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 1
34591: NEG
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 2
34602: NEG
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 2
34614: NEG
34615: PUSH
34616: LD_INT 2
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: NEG
34627: PUSH
34628: LD_INT 3
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 3
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: LD_INT 3
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 3
34680: NEG
34681: PUSH
34682: LD_INT 2
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34715: LD_ADDR_VAR 0 30
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: NEG
34797: PUSH
34798: LD_INT 2
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: LD_INT 2
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 2
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 2
34850: PUSH
34851: LD_INT 2
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: LD_INT 2
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: NEG
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 2
34892: NEG
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 3
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: PUSH
34917: LD_INT 2
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 3
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 2
34937: PUSH
34938: LD_INT 3
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 2
34947: NEG
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 3
34958: NEG
34959: PUSH
34960: LD_INT 1
34962: NEG
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34993: LD_ADDR_VAR 0 31
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: LD_INT 1
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: PUSH
35032: LD_INT 1
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 1
35051: NEG
35052: PUSH
35053: LD_INT 0
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: LD_INT 1
35066: NEG
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: LD_INT 2
35078: NEG
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: LD_INT 2
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 1
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 2
35158: NEG
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 2
35170: NEG
35171: PUSH
35172: LD_INT 2
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 2
35182: NEG
35183: PUSH
35184: LD_INT 3
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 3
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: LD_INT 3
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 3
35236: NEG
35237: PUSH
35238: LD_INT 2
35240: NEG
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35271: LD_ADDR_VAR 0 32
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: LD_INT 0
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 1
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: NEG
35330: PUSH
35331: LD_INT 0
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: LD_INT 1
35344: NEG
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: NEG
35353: PUSH
35354: LD_INT 2
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: LD_INT 2
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: LD_INT 1
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 2
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 2
35396: PUSH
35397: LD_INT 2
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 2
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: NEG
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 2
35437: NEG
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 2
35448: NEG
35449: PUSH
35450: LD_INT 1
35452: NEG
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: LD_INT 3
35464: NEG
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: LD_INT 2
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 3
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 3
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: NEG
35504: PUSH
35505: LD_INT 1
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 3
35514: NEG
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35549: LD_ADDR_VAR 0 33
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 1
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: PUSH
35588: LD_INT 1
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 0
35597: PUSH
35598: LD_INT 1
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: LD_INT 1
35622: NEG
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 1
35630: NEG
35631: PUSH
35632: LD_INT 2
35634: NEG
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 1
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 2
35653: PUSH
35654: LD_INT 0
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 2
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 2
35727: NEG
35728: PUSH
35729: LD_INT 2
35731: NEG
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 2
35739: NEG
35740: PUSH
35741: LD_INT 3
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 2
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 3
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: LD_INT 3
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 3
35793: NEG
35794: PUSH
35795: LD_INT 2
35797: NEG
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35828: LD_ADDR_VAR 0 34
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: LD_INT 2
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: LD_INT 2
35924: NEG
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 2
35953: PUSH
35954: LD_INT 2
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: LD_INT 2
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 2
35984: NEG
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 2
35995: NEG
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 2
36007: NEG
36008: PUSH
36009: LD_INT 2
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: LD_INT 3
36023: NEG
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 3
36042: PUSH
36043: LD_INT 2
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: LD_INT 3
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 3
36073: NEG
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36108: LD_ADDR_VAR 0 35
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 2
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 2
36199: NEG
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36220: LD_ADDR_VAR 0 36
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 1
36289: NEG
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: LD_INT 2
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36332: LD_ADDR_VAR 0 37
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36444: LD_ADDR_VAR 0 38
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: NEG
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 2
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 2
36535: NEG
36536: PUSH
36537: LD_INT 1
36539: NEG
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36556: LD_ADDR_VAR 0 39
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 2
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: LD_INT 2
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36668: LD_ADDR_VAR 0 40
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: NEG
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36780: LD_ADDR_VAR 0 41
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: LD_INT 2
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 2
36935: NEG
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 2
36946: NEG
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 2
36958: NEG
36959: PUSH
36960: LD_INT 2
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 2
36970: NEG
36971: PUSH
36972: LD_INT 3
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 3
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 3
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 3
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 3
37023: PUSH
37024: LD_INT 3
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: LD_INT 3
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 3
37054: NEG
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 3
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 3
37077: NEG
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 3
37089: NEG
37090: PUSH
37091: LD_INT 3
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37130: LD_ADDR_VAR 0 42
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: LD_INT 1
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: LD_INT 2
37215: NEG
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 2
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: LD_INT 2
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: LD_INT 2
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 2
37296: NEG
37297: PUSH
37298: LD_INT 1
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 2
37308: NEG
37309: PUSH
37310: LD_INT 2
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 2
37320: NEG
37321: PUSH
37322: LD_INT 3
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: LD_INT 3
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 3
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: LD_INT 2
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 3
37366: PUSH
37367: LD_INT 2
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 3
37376: PUSH
37377: LD_INT 3
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 2
37386: PUSH
37387: LD_INT 3
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: LD_INT 3
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: LD_INT 3
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 3
37427: NEG
37428: PUSH
37429: LD_INT 2
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 3
37439: NEG
37440: PUSH
37441: LD_INT 3
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37480: LD_ADDR_VAR 0 43
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 1
37500: NEG
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 1
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: LD_INT 2
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: LD_INT 2
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: LD_INT 1
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: LD_INT 2
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: LD_INT 2
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: NEG
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: NEG
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 2
37657: NEG
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: LD_INT 3
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 3
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 2
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 3
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 3
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: LD_INT 3
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 3
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: NEG
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 3
37776: NEG
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 3
37787: NEG
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37828: LD_ADDR_VAR 0 44
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: NEG
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: LD_INT 2
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 2
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 1
37972: NEG
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 2
37983: NEG
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 2
37994: NEG
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 2
38006: NEG
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 2
38018: NEG
38019: PUSH
38020: LD_INT 3
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 2
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 3
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 3
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 3
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 3
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 2
38081: PUSH
38082: LD_INT 3
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 3
38102: NEG
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 3
38113: NEG
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 3
38125: NEG
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 3
38137: NEG
38138: PUSH
38139: LD_INT 3
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38178: LD_ADDR_VAR 0 45
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: NEG
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: LD_INT 2
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: LD_INT 2
38274: NEG
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 2
38303: PUSH
38304: LD_INT 2
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 2
38344: NEG
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 2
38356: NEG
38357: PUSH
38358: LD_INT 2
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: LD_INT 3
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: LD_INT 3
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: LD_INT 3
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: LD_INT 2
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: LD_INT 2
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 3
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: LD_INT 3
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: LD_INT 3
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 2
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 3
38475: NEG
38476: PUSH
38477: LD_INT 2
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 3
38487: NEG
38488: PUSH
38489: LD_INT 3
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38528: LD_ADDR_VAR 0 46
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: LD_INT 0
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 0
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: NEG
38587: PUSH
38588: LD_INT 0
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: LD_INT 2
38624: NEG
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 2
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: LD_INT 2
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 2
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 2
38694: NEG
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: LD_INT 1
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: LD_INT 3
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: LD_INT 3
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: LD_INT 2
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 3
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 3
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: LD_INT 3
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: LD_INT 3
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 2
38813: NEG
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 3
38824: NEG
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 3
38835: NEG
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38876: LD_ADDR_VAR 0 47
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: LD_INT 2
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: LD_INT 2
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 2
39003: NEG
39004: PUSH
39005: LD_INT 2
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39027: LD_ADDR_VAR 0 48
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: LD_INT 1
39047: NEG
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: PUSH
39110: LD_INT 2
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: LD_INT 2
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39174: LD_ADDR_VAR 0 49
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 2
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: LD_INT 2
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: LD_INT 2
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39318: LD_ADDR_VAR 0 50
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39462: LD_ADDR_VAR 0 51
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: LD_INT 2
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 2
39574: NEG
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 2
39585: NEG
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39609: LD_ADDR_VAR 0 52
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: LD_INT 2
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 2
39713: NEG
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39760: LD_ADDR_VAR 0 53
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 1
39829: NEG
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: LD_INT 2
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 2
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 2
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: LD_INT 2
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 2
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 2
39947: NEG
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 2
39959: NEG
39960: PUSH
39961: LD_INT 2
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39990: LD_ADDR_VAR 0 54
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: LD_INT 2
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 2
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 2
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 2
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: LD_INT 2
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 2
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: NEG
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 2
40177: NEG
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: NEG
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40220: LD_ADDR_VAR 0 55
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: LD_INT 2
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 2
40355: PUSH
40356: LD_INT 2
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 2
40407: NEG
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: LD_INT 2
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40450: LD_ADDR_VAR 0 56
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 2
40585: PUSH
40586: LD_INT 2
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 2
40626: NEG
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 2
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 2
40649: NEG
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40680: LD_ADDR_VAR 0 57
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: NEG
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 2
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 2
40815: PUSH
40816: LD_INT 2
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: LD_INT 2
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 2
40856: NEG
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 2
40867: NEG
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40910: LD_ADDR_VAR 0 58
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: NEG
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 2
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 2
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: NEG
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41140: LD_ADDR_VAR 0 59
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41228: LD_ADDR_VAR 0 60
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 1
41248: NEG
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41316: LD_ADDR_VAR 0 61
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: LD_INT 1
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41404: LD_ADDR_VAR 0 62
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41492: LD_ADDR_VAR 0 63
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41580: LD_ADDR_VAR 0 64
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: ST_TO_ADDR
// end ; 1 :
41668: GO 47565
41670: LD_INT 1
41672: DOUBLE
41673: EQUAL
41674: IFTRUE 41678
41676: GO 44301
41678: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41679: LD_ADDR_VAR 0 11
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 3
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 3
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: LIST
41722: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41723: LD_ADDR_VAR 0 12
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 3
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 3
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41764: LD_ADDR_VAR 0 13
41768: PUSH
41769: LD_INT 3
41771: PUSH
41772: LD_INT 2
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: LD_INT 3
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41804: LD_ADDR_VAR 0 14
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 3
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: LD_INT 2
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41845: LD_ADDR_VAR 0 15
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 3
41863: NEG
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 3
41874: NEG
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: LIST
41888: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41889: LD_ADDR_VAR 0 16
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: LD_INT 3
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 3
41908: NEG
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 3
41920: NEG
41921: PUSH
41922: LD_INT 3
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41935: LD_ADDR_VAR 0 17
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: LD_INT 3
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: LD_INT 3
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: LIST
41978: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41979: LD_ADDR_VAR 0 18
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 3
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 3
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42020: LD_ADDR_VAR 0 19
42024: PUSH
42025: LD_INT 3
42027: PUSH
42028: LD_INT 2
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 3
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: PUSH
42048: LD_INT 3
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: LIST
42059: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42060: LD_ADDR_VAR 0 20
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: LD_INT 3
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 3
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42101: LD_ADDR_VAR 0 21
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 3
42119: NEG
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 3
42130: NEG
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42145: LD_ADDR_VAR 0 22
42149: PUSH
42150: LD_INT 2
42152: NEG
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 3
42164: NEG
42165: PUSH
42166: LD_INT 2
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 3
42176: NEG
42177: PUSH
42178: LD_INT 3
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: LIST
42190: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42191: LD_ADDR_VAR 0 23
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 3
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: LD_INT 4
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 3
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: LIST
42234: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42235: LD_ADDR_VAR 0 24
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 3
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 4
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: LIST
42275: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42276: LD_ADDR_VAR 0 25
42280: PUSH
42281: LD_INT 3
42283: PUSH
42284: LD_INT 3
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 4
42293: PUSH
42294: LD_INT 3
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 3
42303: PUSH
42304: LD_INT 4
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: LIST
42315: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42316: LD_ADDR_VAR 0 26
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 3
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 4
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: LD_INT 3
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: LIST
42356: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42357: LD_ADDR_VAR 0 27
42361: PUSH
42362: LD_INT 3
42364: NEG
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 3
42375: NEG
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 4
42386: NEG
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: LIST
42400: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42401: LD_ADDR_VAR 0 28
42405: PUSH
42406: LD_INT 3
42408: NEG
42409: PUSH
42410: LD_INT 3
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 3
42420: NEG
42421: PUSH
42422: LD_INT 4
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 4
42432: NEG
42433: PUSH
42434: LD_INT 3
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: LIST
42446: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42447: LD_ADDR_VAR 0 29
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: LD_INT 3
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 3
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 4
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: LD_INT 4
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 3
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: LD_INT 5
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 5
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: LD_INT 4
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 6
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 6
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 5
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42602: LD_ADDR_VAR 0 30
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 3
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 3
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 3
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 4
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 4
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 4
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 5
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 5
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 5
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 6
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 6
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42745: LD_ADDR_VAR 0 31
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 3
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 4
42782: PUSH
42783: LD_INT 3
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 4
42792: PUSH
42793: LD_INT 4
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: LD_INT 4
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 5
42812: PUSH
42813: LD_INT 4
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 5
42822: PUSH
42823: LD_INT 5
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 4
42832: PUSH
42833: LD_INT 5
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 6
42842: PUSH
42843: LD_INT 5
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 6
42852: PUSH
42853: LD_INT 6
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 5
42862: PUSH
42863: LD_INT 6
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42884: LD_ADDR_VAR 0 32
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: LD_INT 3
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: LD_INT 3
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: LD_INT 4
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 4
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: LD_INT 3
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 5
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 5
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: LD_INT 4
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 6
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 6
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 5
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43027: LD_ADDR_VAR 0 33
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 3
43045: NEG
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 3
43056: NEG
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 3
43068: NEG
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 4
43079: NEG
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 4
43090: NEG
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 4
43102: NEG
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 5
43113: NEG
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 5
43124: NEG
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 5
43136: NEG
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 6
43147: NEG
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 6
43158: NEG
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43182: LD_ADDR_VAR 0 34
43186: PUSH
43187: LD_INT 2
43189: NEG
43190: PUSH
43191: LD_INT 3
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 3
43201: NEG
43202: PUSH
43203: LD_INT 2
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 3
43213: NEG
43214: PUSH
43215: LD_INT 3
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 3
43225: NEG
43226: PUSH
43227: LD_INT 4
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 4
43237: NEG
43238: PUSH
43239: LD_INT 3
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 4
43249: NEG
43250: PUSH
43251: LD_INT 4
43253: NEG
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 4
43261: NEG
43262: PUSH
43263: LD_INT 5
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 5
43273: NEG
43274: PUSH
43275: LD_INT 4
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 5
43285: NEG
43286: PUSH
43287: LD_INT 5
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 5
43297: NEG
43298: PUSH
43299: LD_INT 6
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 6
43309: NEG
43310: PUSH
43311: LD_INT 5
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 6
43321: NEG
43322: PUSH
43323: LD_INT 6
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43345: LD_ADDR_VAR 0 41
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: LD_INT 2
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 3
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: LIST
43388: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43389: LD_ADDR_VAR 0 42
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 3
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: LIST
43429: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43430: LD_ADDR_VAR 0 43
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 3
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 3
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: LIST
43469: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43470: LD_ADDR_VAR 0 44
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 3
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43511: LD_ADDR_VAR 0 45
43515: PUSH
43516: LD_INT 2
43518: NEG
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: NEG
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 3
43540: NEG
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: LIST
43554: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43555: LD_ADDR_VAR 0 46
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: LD_INT 3
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 3
43586: NEG
43587: PUSH
43588: LD_INT 2
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: LIST
43600: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43601: LD_ADDR_VAR 0 47
43605: PUSH
43606: LD_INT 2
43608: NEG
43609: PUSH
43610: LD_INT 3
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: LD_INT 3
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43634: LD_ADDR_VAR 0 48
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43665: LD_ADDR_VAR 0 49
43669: PUSH
43670: LD_INT 3
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 3
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43694: LD_ADDR_VAR 0 50
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: LD_INT 3
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 3
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43723: LD_ADDR_VAR 0 51
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 2
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43754: LD_ADDR_VAR 0 52
43758: PUSH
43759: LD_INT 3
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 3
43773: NEG
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43787: LD_ADDR_VAR 0 53
43791: PUSH
43792: LD_INT 1
43794: NEG
43795: PUSH
43796: LD_INT 3
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 3
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: LD_INT 2
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: LIST
43830: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43831: LD_ADDR_VAR 0 54
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 3
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 3
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: LIST
43871: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43872: LD_ADDR_VAR 0 55
43876: PUSH
43877: LD_INT 3
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 3
43889: PUSH
43890: LD_INT 3
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: LD_INT 3
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43912: LD_ADDR_VAR 0 56
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 3
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: LD_INT 3
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: LD_INT 2
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: LIST
43952: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43953: LD_ADDR_VAR 0 57
43957: PUSH
43958: LD_INT 2
43960: NEG
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 3
43971: NEG
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 3
43982: NEG
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43997: LD_ADDR_VAR 0 58
44001: PUSH
44002: LD_INT 2
44004: NEG
44005: PUSH
44006: LD_INT 3
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 3
44016: NEG
44017: PUSH
44018: LD_INT 2
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 3
44028: NEG
44029: PUSH
44030: LD_INT 3
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44043: LD_ADDR_VAR 0 59
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44087: LD_ADDR_VAR 0 60
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: LIST
44127: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44128: LD_ADDR_VAR 0 61
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: LIST
44167: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44168: LD_ADDR_VAR 0 62
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: LD_INT 2
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: LIST
44208: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44209: LD_ADDR_VAR 0 63
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: NEG
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44253: LD_ADDR_VAR 0 64
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: LD_INT 2
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 2
44284: NEG
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: LIST
44298: ST_TO_ADDR
// end ; 2 :
44299: GO 47565
44301: LD_INT 2
44303: DOUBLE
44304: EQUAL
44305: IFTRUE 44309
44307: GO 47564
44309: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44310: LD_ADDR_VAR 0 29
44314: PUSH
44315: LD_INT 4
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 4
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 5
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 5
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 4
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 3
44389: PUSH
44390: LD_INT 2
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 5
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 3
44410: PUSH
44411: LD_INT 3
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 3
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 4
44430: PUSH
44431: LD_INT 3
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 4
44440: PUSH
44441: LD_INT 4
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 3
44450: PUSH
44451: LD_INT 4
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: LD_INT 3
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 4
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: LD_INT 4
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: LD_INT 4
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: LD_INT 3
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: LD_INT 4
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 5
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: LD_INT 5
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: LD_INT 4
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 3
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: LD_INT 5
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: LD_INT 3
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 3
44593: NEG
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 3
44604: NEG
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 3
44638: NEG
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 4
44649: NEG
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 4
44660: NEG
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 4
44672: NEG
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: NEG
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 4
44695: NEG
44696: PUSH
44697: LD_INT 4
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 4
44707: NEG
44708: PUSH
44709: LD_INT 5
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 3
44719: NEG
44720: PUSH
44721: LD_INT 4
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 3
44731: NEG
44732: PUSH
44733: LD_INT 3
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 4
44743: NEG
44744: PUSH
44745: LD_INT 3
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 5
44755: NEG
44756: PUSH
44757: LD_INT 4
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 5
44767: NEG
44768: PUSH
44769: LD_INT 5
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 3
44779: NEG
44780: PUSH
44781: LD_INT 5
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 5
44791: NEG
44792: PUSH
44793: LD_INT 3
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44848: LD_ADDR_VAR 0 30
44852: PUSH
44853: LD_INT 4
44855: PUSH
44856: LD_INT 4
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 4
44865: PUSH
44866: LD_INT 3
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 5
44875: PUSH
44876: LD_INT 4
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 5
44885: PUSH
44886: LD_INT 5
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 4
44895: PUSH
44896: LD_INT 5
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 3
44905: PUSH
44906: LD_INT 4
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 3
44915: PUSH
44916: LD_INT 3
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 5
44925: PUSH
44926: LD_INT 3
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 3
44935: PUSH
44936: LD_INT 5
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 3
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 4
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 4
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 3
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: LD_INT 4
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 4
45038: NEG
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 4
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 3
45061: NEG
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 3
45072: NEG
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 4
45083: NEG
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 5
45094: NEG
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 5
45105: NEG
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 5
45117: NEG
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 3
45129: NEG
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 3
45140: NEG
45141: PUSH
45142: LD_INT 3
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 3
45152: NEG
45153: PUSH
45154: LD_INT 4
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: LD_INT 3
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 3
45188: NEG
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 4
45200: NEG
45201: PUSH
45202: LD_INT 3
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 4
45212: NEG
45213: PUSH
45214: LD_INT 4
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: LD_INT 4
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 4
45236: NEG
45237: PUSH
45238: LD_INT 2
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 4
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 5
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 4
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: LD_INT 3
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: LD_INT 3
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: LD_INT 4
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 5
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: LD_INT 3
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: LD_INT 5
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45395: LD_ADDR_VAR 0 31
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 4
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 3
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 4
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: LD_INT 5
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 5
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: LD_INT 4
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 3
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 5
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: LD_INT 3
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 3
45495: NEG
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 3
45506: NEG
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 3
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 4
45551: NEG
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 4
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 4
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 4
45597: NEG
45598: PUSH
45599: LD_INT 4
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 4
45609: NEG
45610: PUSH
45611: LD_INT 5
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 3
45621: NEG
45622: PUSH
45623: LD_INT 4
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 3
45633: NEG
45634: PUSH
45635: LD_INT 3
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 4
45645: NEG
45646: PUSH
45647: LD_INT 3
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 5
45657: NEG
45658: PUSH
45659: LD_INT 4
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 5
45669: NEG
45670: PUSH
45671: LD_INT 5
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 3
45681: NEG
45682: PUSH
45683: LD_INT 5
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 5
45693: NEG
45694: PUSH
45695: LD_INT 3
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 3
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 4
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 3
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 3
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 4
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: LD_INT 4
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 4
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 4
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 5
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 5
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 4
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 3
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 3
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 5
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45945: LD_ADDR_VAR 0 32
45949: PUSH
45950: LD_INT 4
45952: NEG
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 4
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 3
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 4
45997: NEG
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 5
46008: NEG
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 5
46019: NEG
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 5
46031: NEG
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 3
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 3
46054: NEG
46055: PUSH
46056: LD_INT 3
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 3
46066: NEG
46067: PUSH
46068: LD_INT 4
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: LD_INT 3
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 4
46114: NEG
46115: PUSH
46116: LD_INT 3
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 4
46126: NEG
46127: PUSH
46128: LD_INT 4
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: LD_INT 4
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 4
46150: NEG
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 4
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: LD_INT 5
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 4
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 3
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 3
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 4
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 5
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 3
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: LD_INT 5
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 3
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 4
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 4
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 3
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 4
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 4
46357: PUSH
46358: LD_INT 4
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 4
46367: PUSH
46368: LD_INT 3
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 5
46377: PUSH
46378: LD_INT 4
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 5
46387: PUSH
46388: LD_INT 5
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 4
46397: PUSH
46398: LD_INT 5
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 3
46407: PUSH
46408: LD_INT 4
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 3
46417: PUSH
46418: LD_INT 3
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 5
46427: PUSH
46428: LD_INT 3
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: LD_INT 5
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46492: LD_ADDR_VAR 0 33
46496: PUSH
46497: LD_INT 4
46499: NEG
46500: PUSH
46501: LD_INT 4
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 4
46511: NEG
46512: PUSH
46513: LD_INT 5
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 3
46523: NEG
46524: PUSH
46525: LD_INT 4
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 3
46535: NEG
46536: PUSH
46537: LD_INT 3
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 4
46547: NEG
46548: PUSH
46549: LD_INT 3
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 5
46559: NEG
46560: PUSH
46561: LD_INT 4
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 5
46571: NEG
46572: PUSH
46573: LD_INT 5
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 3
46583: NEG
46584: PUSH
46585: LD_INT 5
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 5
46595: NEG
46596: PUSH
46597: LD_INT 3
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 3
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: LD_INT 4
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: LD_INT 3
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: LD_INT 3
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: LD_INT 4
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: NEG
46698: PUSH
46699: LD_INT 4
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 4
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 4
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 5
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 5
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 4
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 3
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 3
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 5
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 3
46802: PUSH
46803: LD_INT 3
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 3
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 4
46822: PUSH
46823: LD_INT 3
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 4
46832: PUSH
46833: LD_INT 4
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: LD_INT 4
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 3
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 4
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 4
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 4
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 3
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 4
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 5
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 5
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: LD_INT 4
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 3
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: LD_INT 5
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: LD_INT 3
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47030: LD_ADDR_VAR 0 34
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 4
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 5
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: LD_INT 4
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 3
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 3
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 4
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 5
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 3
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 5
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 3
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 4
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 4
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 3
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 4
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 4
47232: PUSH
47233: LD_INT 4
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 4
47242: PUSH
47243: LD_INT 3
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 5
47252: PUSH
47253: LD_INT 4
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 5
47262: PUSH
47263: LD_INT 5
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 4
47272: PUSH
47273: LD_INT 5
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 3
47282: PUSH
47283: LD_INT 4
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: LD_INT 3
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 5
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 3
47312: PUSH
47313: LD_INT 5
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: LD_INT 3
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 3
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 4
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: LD_INT 4
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 3
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: LD_INT 4
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 4
47415: NEG
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 4
47426: NEG
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 4
47460: NEG
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 5
47471: NEG
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 5
47482: NEG
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 5
47494: NEG
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: ST_TO_ADDR
// end ; end ;
47562: GO 47565
47564: POP
// case btype of b_depot , b_warehouse :
47565: LD_VAR 0 1
47569: PUSH
47570: LD_INT 0
47572: DOUBLE
47573: EQUAL
47574: IFTRUE 47584
47576: LD_INT 1
47578: DOUBLE
47579: EQUAL
47580: IFTRUE 47584
47582: GO 47785
47584: POP
// case nation of nation_american :
47585: LD_VAR 0 5
47589: PUSH
47590: LD_INT 1
47592: DOUBLE
47593: EQUAL
47594: IFTRUE 47598
47596: GO 47654
47598: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47599: LD_ADDR_VAR 0 9
47603: PUSH
47604: LD_VAR 0 11
47608: PUSH
47609: LD_VAR 0 12
47613: PUSH
47614: LD_VAR 0 13
47618: PUSH
47619: LD_VAR 0 14
47623: PUSH
47624: LD_VAR 0 15
47628: PUSH
47629: LD_VAR 0 16
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: PUSH
47642: LD_VAR 0 4
47646: PUSH
47647: LD_INT 1
47649: PLUS
47650: ARRAY
47651: ST_TO_ADDR
47652: GO 47783
47654: LD_INT 2
47656: DOUBLE
47657: EQUAL
47658: IFTRUE 47662
47660: GO 47718
47662: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47663: LD_ADDR_VAR 0 9
47667: PUSH
47668: LD_VAR 0 17
47672: PUSH
47673: LD_VAR 0 18
47677: PUSH
47678: LD_VAR 0 19
47682: PUSH
47683: LD_VAR 0 20
47687: PUSH
47688: LD_VAR 0 21
47692: PUSH
47693: LD_VAR 0 22
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: PUSH
47706: LD_VAR 0 4
47710: PUSH
47711: LD_INT 1
47713: PLUS
47714: ARRAY
47715: ST_TO_ADDR
47716: GO 47783
47718: LD_INT 3
47720: DOUBLE
47721: EQUAL
47722: IFTRUE 47726
47724: GO 47782
47726: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47727: LD_ADDR_VAR 0 9
47731: PUSH
47732: LD_VAR 0 23
47736: PUSH
47737: LD_VAR 0 24
47741: PUSH
47742: LD_VAR 0 25
47746: PUSH
47747: LD_VAR 0 26
47751: PUSH
47752: LD_VAR 0 27
47756: PUSH
47757: LD_VAR 0 28
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: PUSH
47770: LD_VAR 0 4
47774: PUSH
47775: LD_INT 1
47777: PLUS
47778: ARRAY
47779: ST_TO_ADDR
47780: GO 47783
47782: POP
47783: GO 48338
47785: LD_INT 2
47787: DOUBLE
47788: EQUAL
47789: IFTRUE 47799
47791: LD_INT 3
47793: DOUBLE
47794: EQUAL
47795: IFTRUE 47799
47797: GO 47855
47799: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47800: LD_ADDR_VAR 0 9
47804: PUSH
47805: LD_VAR 0 29
47809: PUSH
47810: LD_VAR 0 30
47814: PUSH
47815: LD_VAR 0 31
47819: PUSH
47820: LD_VAR 0 32
47824: PUSH
47825: LD_VAR 0 33
47829: PUSH
47830: LD_VAR 0 34
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: PUSH
47843: LD_VAR 0 4
47847: PUSH
47848: LD_INT 1
47850: PLUS
47851: ARRAY
47852: ST_TO_ADDR
47853: GO 48338
47855: LD_INT 16
47857: DOUBLE
47858: EQUAL
47859: IFTRUE 47917
47861: LD_INT 17
47863: DOUBLE
47864: EQUAL
47865: IFTRUE 47917
47867: LD_INT 18
47869: DOUBLE
47870: EQUAL
47871: IFTRUE 47917
47873: LD_INT 19
47875: DOUBLE
47876: EQUAL
47877: IFTRUE 47917
47879: LD_INT 22
47881: DOUBLE
47882: EQUAL
47883: IFTRUE 47917
47885: LD_INT 20
47887: DOUBLE
47888: EQUAL
47889: IFTRUE 47917
47891: LD_INT 21
47893: DOUBLE
47894: EQUAL
47895: IFTRUE 47917
47897: LD_INT 23
47899: DOUBLE
47900: EQUAL
47901: IFTRUE 47917
47903: LD_INT 24
47905: DOUBLE
47906: EQUAL
47907: IFTRUE 47917
47909: LD_INT 25
47911: DOUBLE
47912: EQUAL
47913: IFTRUE 47917
47915: GO 47973
47917: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47918: LD_ADDR_VAR 0 9
47922: PUSH
47923: LD_VAR 0 35
47927: PUSH
47928: LD_VAR 0 36
47932: PUSH
47933: LD_VAR 0 37
47937: PUSH
47938: LD_VAR 0 38
47942: PUSH
47943: LD_VAR 0 39
47947: PUSH
47948: LD_VAR 0 40
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: PUSH
47961: LD_VAR 0 4
47965: PUSH
47966: LD_INT 1
47968: PLUS
47969: ARRAY
47970: ST_TO_ADDR
47971: GO 48338
47973: LD_INT 6
47975: DOUBLE
47976: EQUAL
47977: IFTRUE 48029
47979: LD_INT 7
47981: DOUBLE
47982: EQUAL
47983: IFTRUE 48029
47985: LD_INT 8
47987: DOUBLE
47988: EQUAL
47989: IFTRUE 48029
47991: LD_INT 13
47993: DOUBLE
47994: EQUAL
47995: IFTRUE 48029
47997: LD_INT 12
47999: DOUBLE
48000: EQUAL
48001: IFTRUE 48029
48003: LD_INT 15
48005: DOUBLE
48006: EQUAL
48007: IFTRUE 48029
48009: LD_INT 11
48011: DOUBLE
48012: EQUAL
48013: IFTRUE 48029
48015: LD_INT 14
48017: DOUBLE
48018: EQUAL
48019: IFTRUE 48029
48021: LD_INT 10
48023: DOUBLE
48024: EQUAL
48025: IFTRUE 48029
48027: GO 48085
48029: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48030: LD_ADDR_VAR 0 9
48034: PUSH
48035: LD_VAR 0 41
48039: PUSH
48040: LD_VAR 0 42
48044: PUSH
48045: LD_VAR 0 43
48049: PUSH
48050: LD_VAR 0 44
48054: PUSH
48055: LD_VAR 0 45
48059: PUSH
48060: LD_VAR 0 46
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: PUSH
48073: LD_VAR 0 4
48077: PUSH
48078: LD_INT 1
48080: PLUS
48081: ARRAY
48082: ST_TO_ADDR
48083: GO 48338
48085: LD_INT 36
48087: DOUBLE
48088: EQUAL
48089: IFTRUE 48093
48091: GO 48149
48093: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48094: LD_ADDR_VAR 0 9
48098: PUSH
48099: LD_VAR 0 47
48103: PUSH
48104: LD_VAR 0 48
48108: PUSH
48109: LD_VAR 0 49
48113: PUSH
48114: LD_VAR 0 50
48118: PUSH
48119: LD_VAR 0 51
48123: PUSH
48124: LD_VAR 0 52
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: PUSH
48137: LD_VAR 0 4
48141: PUSH
48142: LD_INT 1
48144: PLUS
48145: ARRAY
48146: ST_TO_ADDR
48147: GO 48338
48149: LD_INT 4
48151: DOUBLE
48152: EQUAL
48153: IFTRUE 48175
48155: LD_INT 5
48157: DOUBLE
48158: EQUAL
48159: IFTRUE 48175
48161: LD_INT 34
48163: DOUBLE
48164: EQUAL
48165: IFTRUE 48175
48167: LD_INT 37
48169: DOUBLE
48170: EQUAL
48171: IFTRUE 48175
48173: GO 48231
48175: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48176: LD_ADDR_VAR 0 9
48180: PUSH
48181: LD_VAR 0 53
48185: PUSH
48186: LD_VAR 0 54
48190: PUSH
48191: LD_VAR 0 55
48195: PUSH
48196: LD_VAR 0 56
48200: PUSH
48201: LD_VAR 0 57
48205: PUSH
48206: LD_VAR 0 58
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: PUSH
48219: LD_VAR 0 4
48223: PUSH
48224: LD_INT 1
48226: PLUS
48227: ARRAY
48228: ST_TO_ADDR
48229: GO 48338
48231: LD_INT 31
48233: DOUBLE
48234: EQUAL
48235: IFTRUE 48281
48237: LD_INT 32
48239: DOUBLE
48240: EQUAL
48241: IFTRUE 48281
48243: LD_INT 33
48245: DOUBLE
48246: EQUAL
48247: IFTRUE 48281
48249: LD_INT 27
48251: DOUBLE
48252: EQUAL
48253: IFTRUE 48281
48255: LD_INT 26
48257: DOUBLE
48258: EQUAL
48259: IFTRUE 48281
48261: LD_INT 28
48263: DOUBLE
48264: EQUAL
48265: IFTRUE 48281
48267: LD_INT 29
48269: DOUBLE
48270: EQUAL
48271: IFTRUE 48281
48273: LD_INT 30
48275: DOUBLE
48276: EQUAL
48277: IFTRUE 48281
48279: GO 48337
48281: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48282: LD_ADDR_VAR 0 9
48286: PUSH
48287: LD_VAR 0 59
48291: PUSH
48292: LD_VAR 0 60
48296: PUSH
48297: LD_VAR 0 61
48301: PUSH
48302: LD_VAR 0 62
48306: PUSH
48307: LD_VAR 0 63
48311: PUSH
48312: LD_VAR 0 64
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: PUSH
48325: LD_VAR 0 4
48329: PUSH
48330: LD_INT 1
48332: PLUS
48333: ARRAY
48334: ST_TO_ADDR
48335: GO 48338
48337: POP
// temp_list2 = [ ] ;
48338: LD_ADDR_VAR 0 10
48342: PUSH
48343: EMPTY
48344: ST_TO_ADDR
// for i in temp_list do
48345: LD_ADDR_VAR 0 8
48349: PUSH
48350: LD_VAR 0 9
48354: PUSH
48355: FOR_IN
48356: IFFALSE 48408
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48358: LD_ADDR_VAR 0 10
48362: PUSH
48363: LD_VAR 0 10
48367: PUSH
48368: LD_VAR 0 8
48372: PUSH
48373: LD_INT 1
48375: ARRAY
48376: PUSH
48377: LD_VAR 0 2
48381: PLUS
48382: PUSH
48383: LD_VAR 0 8
48387: PUSH
48388: LD_INT 2
48390: ARRAY
48391: PUSH
48392: LD_VAR 0 3
48396: PLUS
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: EMPTY
48403: LIST
48404: ADD
48405: ST_TO_ADDR
48406: GO 48355
48408: POP
48409: POP
// result = temp_list2 ;
48410: LD_ADDR_VAR 0 7
48414: PUSH
48415: LD_VAR 0 10
48419: ST_TO_ADDR
// end ;
48420: LD_VAR 0 7
48424: RET
// export function EnemyInRange ( unit , dist ) ; begin
48425: LD_INT 0
48427: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48428: LD_ADDR_VAR 0 3
48432: PUSH
48433: LD_VAR 0 1
48437: PPUSH
48438: CALL_OW 255
48442: PPUSH
48443: LD_VAR 0 1
48447: PPUSH
48448: CALL_OW 250
48452: PPUSH
48453: LD_VAR 0 1
48457: PPUSH
48458: CALL_OW 251
48462: PPUSH
48463: LD_VAR 0 2
48467: PPUSH
48468: CALL 21798 0 4
48472: PUSH
48473: LD_INT 4
48475: ARRAY
48476: ST_TO_ADDR
// end ;
48477: LD_VAR 0 3
48481: RET
// export function PlayerSeeMe ( unit ) ; begin
48482: LD_INT 0
48484: PPUSH
// result := See ( your_side , unit ) ;
48485: LD_ADDR_VAR 0 2
48489: PUSH
48490: LD_OWVAR 2
48494: PPUSH
48495: LD_VAR 0 1
48499: PPUSH
48500: CALL_OW 292
48504: ST_TO_ADDR
// end ;
48505: LD_VAR 0 2
48509: RET
// export function ReverseDir ( unit ) ; begin
48510: LD_INT 0
48512: PPUSH
// if not unit then
48513: LD_VAR 0 1
48517: NOT
48518: IFFALSE 48522
// exit ;
48520: GO 48545
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48522: LD_ADDR_VAR 0 2
48526: PUSH
48527: LD_VAR 0 1
48531: PPUSH
48532: CALL_OW 254
48536: PUSH
48537: LD_INT 3
48539: PLUS
48540: PUSH
48541: LD_INT 6
48543: MOD
48544: ST_TO_ADDR
// end ;
48545: LD_VAR 0 2
48549: RET
// export function ReverseArray ( array ) ; var i ; begin
48550: LD_INT 0
48552: PPUSH
48553: PPUSH
// if not array then
48554: LD_VAR 0 1
48558: NOT
48559: IFFALSE 48563
// exit ;
48561: GO 48618
// result := [ ] ;
48563: LD_ADDR_VAR 0 2
48567: PUSH
48568: EMPTY
48569: ST_TO_ADDR
// for i := array downto 1 do
48570: LD_ADDR_VAR 0 3
48574: PUSH
48575: DOUBLE
48576: LD_VAR 0 1
48580: INC
48581: ST_TO_ADDR
48582: LD_INT 1
48584: PUSH
48585: FOR_DOWNTO
48586: IFFALSE 48616
// result := Join ( result , array [ i ] ) ;
48588: LD_ADDR_VAR 0 2
48592: PUSH
48593: LD_VAR 0 2
48597: PPUSH
48598: LD_VAR 0 1
48602: PUSH
48603: LD_VAR 0 3
48607: ARRAY
48608: PPUSH
48609: CALL 53283 0 2
48613: ST_TO_ADDR
48614: GO 48585
48616: POP
48617: POP
// end ;
48618: LD_VAR 0 2
48622: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48623: LD_INT 0
48625: PPUSH
48626: PPUSH
48627: PPUSH
48628: PPUSH
48629: PPUSH
48630: PPUSH
// if not unit or not hexes then
48631: LD_VAR 0 1
48635: NOT
48636: PUSH
48637: LD_VAR 0 2
48641: NOT
48642: OR
48643: IFFALSE 48647
// exit ;
48645: GO 48770
// dist := 9999 ;
48647: LD_ADDR_VAR 0 5
48651: PUSH
48652: LD_INT 9999
48654: ST_TO_ADDR
// for i = 1 to hexes do
48655: LD_ADDR_VAR 0 4
48659: PUSH
48660: DOUBLE
48661: LD_INT 1
48663: DEC
48664: ST_TO_ADDR
48665: LD_VAR 0 2
48669: PUSH
48670: FOR_TO
48671: IFFALSE 48758
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48673: LD_ADDR_VAR 0 6
48677: PUSH
48678: LD_VAR 0 1
48682: PPUSH
48683: LD_VAR 0 2
48687: PUSH
48688: LD_VAR 0 4
48692: ARRAY
48693: PUSH
48694: LD_INT 1
48696: ARRAY
48697: PPUSH
48698: LD_VAR 0 2
48702: PUSH
48703: LD_VAR 0 4
48707: ARRAY
48708: PUSH
48709: LD_INT 2
48711: ARRAY
48712: PPUSH
48713: CALL_OW 297
48717: ST_TO_ADDR
// if tdist < dist then
48718: LD_VAR 0 6
48722: PUSH
48723: LD_VAR 0 5
48727: LESS
48728: IFFALSE 48756
// begin hex := hexes [ i ] ;
48730: LD_ADDR_VAR 0 8
48734: PUSH
48735: LD_VAR 0 2
48739: PUSH
48740: LD_VAR 0 4
48744: ARRAY
48745: ST_TO_ADDR
// dist := tdist ;
48746: LD_ADDR_VAR 0 5
48750: PUSH
48751: LD_VAR 0 6
48755: ST_TO_ADDR
// end ; end ;
48756: GO 48670
48758: POP
48759: POP
// result := hex ;
48760: LD_ADDR_VAR 0 3
48764: PUSH
48765: LD_VAR 0 8
48769: ST_TO_ADDR
// end ;
48770: LD_VAR 0 3
48774: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48775: LD_INT 0
48777: PPUSH
48778: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48779: LD_VAR 0 1
48783: NOT
48784: PUSH
48785: LD_VAR 0 1
48789: PUSH
48790: LD_INT 21
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 23
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PPUSH
48814: CALL_OW 69
48818: IN
48819: NOT
48820: OR
48821: IFFALSE 48825
// exit ;
48823: GO 48872
// for i = 1 to 3 do
48825: LD_ADDR_VAR 0 3
48829: PUSH
48830: DOUBLE
48831: LD_INT 1
48833: DEC
48834: ST_TO_ADDR
48835: LD_INT 3
48837: PUSH
48838: FOR_TO
48839: IFFALSE 48870
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48841: LD_VAR 0 1
48845: PPUSH
48846: CALL_OW 250
48850: PPUSH
48851: LD_VAR 0 1
48855: PPUSH
48856: CALL_OW 251
48860: PPUSH
48861: LD_INT 1
48863: PPUSH
48864: CALL_OW 453
48868: GO 48838
48870: POP
48871: POP
// end ;
48872: LD_VAR 0 2
48876: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48877: LD_INT 0
48879: PPUSH
48880: PPUSH
48881: PPUSH
48882: PPUSH
48883: PPUSH
48884: PPUSH
// if not unit or not enemy_unit then
48885: LD_VAR 0 1
48889: NOT
48890: PUSH
48891: LD_VAR 0 2
48895: NOT
48896: OR
48897: IFFALSE 48901
// exit ;
48899: GO 49368
// if GetLives ( i ) < 250 then
48901: LD_VAR 0 4
48905: PPUSH
48906: CALL_OW 256
48910: PUSH
48911: LD_INT 250
48913: LESS
48914: IFFALSE 48927
// begin ComAutodestruct ( i ) ;
48916: LD_VAR 0 4
48920: PPUSH
48921: CALL 48775 0 1
// exit ;
48925: GO 49368
// end ; x := GetX ( enemy_unit ) ;
48927: LD_ADDR_VAR 0 7
48931: PUSH
48932: LD_VAR 0 2
48936: PPUSH
48937: CALL_OW 250
48941: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48942: LD_ADDR_VAR 0 8
48946: PUSH
48947: LD_VAR 0 2
48951: PPUSH
48952: CALL_OW 251
48956: ST_TO_ADDR
// if not x or not y then
48957: LD_VAR 0 7
48961: NOT
48962: PUSH
48963: LD_VAR 0 8
48967: NOT
48968: OR
48969: IFFALSE 48973
// exit ;
48971: GO 49368
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48973: LD_ADDR_VAR 0 6
48977: PUSH
48978: LD_VAR 0 7
48982: PPUSH
48983: LD_INT 0
48985: PPUSH
48986: LD_INT 4
48988: PPUSH
48989: CALL_OW 272
48993: PUSH
48994: LD_VAR 0 8
48998: PPUSH
48999: LD_INT 0
49001: PPUSH
49002: LD_INT 4
49004: PPUSH
49005: CALL_OW 273
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_VAR 0 7
49018: PPUSH
49019: LD_INT 1
49021: PPUSH
49022: LD_INT 4
49024: PPUSH
49025: CALL_OW 272
49029: PUSH
49030: LD_VAR 0 8
49034: PPUSH
49035: LD_INT 1
49037: PPUSH
49038: LD_INT 4
49040: PPUSH
49041: CALL_OW 273
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_VAR 0 7
49054: PPUSH
49055: LD_INT 2
49057: PPUSH
49058: LD_INT 4
49060: PPUSH
49061: CALL_OW 272
49065: PUSH
49066: LD_VAR 0 8
49070: PPUSH
49071: LD_INT 2
49073: PPUSH
49074: LD_INT 4
49076: PPUSH
49077: CALL_OW 273
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_VAR 0 7
49090: PPUSH
49091: LD_INT 3
49093: PPUSH
49094: LD_INT 4
49096: PPUSH
49097: CALL_OW 272
49101: PUSH
49102: LD_VAR 0 8
49106: PPUSH
49107: LD_INT 3
49109: PPUSH
49110: LD_INT 4
49112: PPUSH
49113: CALL_OW 273
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_VAR 0 7
49126: PPUSH
49127: LD_INT 4
49129: PPUSH
49130: LD_INT 4
49132: PPUSH
49133: CALL_OW 272
49137: PUSH
49138: LD_VAR 0 8
49142: PPUSH
49143: LD_INT 4
49145: PPUSH
49146: LD_INT 4
49148: PPUSH
49149: CALL_OW 273
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_VAR 0 7
49162: PPUSH
49163: LD_INT 5
49165: PPUSH
49166: LD_INT 4
49168: PPUSH
49169: CALL_OW 272
49173: PUSH
49174: LD_VAR 0 8
49178: PPUSH
49179: LD_INT 5
49181: PPUSH
49182: LD_INT 4
49184: PPUSH
49185: CALL_OW 273
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: ST_TO_ADDR
// for i = tmp downto 1 do
49202: LD_ADDR_VAR 0 4
49206: PUSH
49207: DOUBLE
49208: LD_VAR 0 6
49212: INC
49213: ST_TO_ADDR
49214: LD_INT 1
49216: PUSH
49217: FOR_DOWNTO
49218: IFFALSE 49319
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49220: LD_VAR 0 6
49224: PUSH
49225: LD_VAR 0 4
49229: ARRAY
49230: PUSH
49231: LD_INT 1
49233: ARRAY
49234: PPUSH
49235: LD_VAR 0 6
49239: PUSH
49240: LD_VAR 0 4
49244: ARRAY
49245: PUSH
49246: LD_INT 2
49248: ARRAY
49249: PPUSH
49250: CALL_OW 488
49254: NOT
49255: PUSH
49256: LD_VAR 0 6
49260: PUSH
49261: LD_VAR 0 4
49265: ARRAY
49266: PUSH
49267: LD_INT 1
49269: ARRAY
49270: PPUSH
49271: LD_VAR 0 6
49275: PUSH
49276: LD_VAR 0 4
49280: ARRAY
49281: PUSH
49282: LD_INT 2
49284: ARRAY
49285: PPUSH
49286: CALL_OW 428
49290: PUSH
49291: LD_INT 0
49293: NONEQUAL
49294: OR
49295: IFFALSE 49317
// tmp := Delete ( tmp , i ) ;
49297: LD_ADDR_VAR 0 6
49301: PUSH
49302: LD_VAR 0 6
49306: PPUSH
49307: LD_VAR 0 4
49311: PPUSH
49312: CALL_OW 3
49316: ST_TO_ADDR
49317: GO 49217
49319: POP
49320: POP
// j := GetClosestHex ( unit , tmp ) ;
49321: LD_ADDR_VAR 0 5
49325: PUSH
49326: LD_VAR 0 1
49330: PPUSH
49331: LD_VAR 0 6
49335: PPUSH
49336: CALL 48623 0 2
49340: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49341: LD_VAR 0 1
49345: PPUSH
49346: LD_VAR 0 5
49350: PUSH
49351: LD_INT 1
49353: ARRAY
49354: PPUSH
49355: LD_VAR 0 5
49359: PUSH
49360: LD_INT 2
49362: ARRAY
49363: PPUSH
49364: CALL_OW 111
// end ;
49368: LD_VAR 0 3
49372: RET
// export function PrepareApemanSoldier ( ) ; begin
49373: LD_INT 0
49375: PPUSH
// uc_nation := 0 ;
49376: LD_ADDR_OWVAR 21
49380: PUSH
49381: LD_INT 0
49383: ST_TO_ADDR
// hc_sex := sex_male ;
49384: LD_ADDR_OWVAR 27
49388: PUSH
49389: LD_INT 1
49391: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49392: LD_ADDR_OWVAR 28
49396: PUSH
49397: LD_INT 15
49399: ST_TO_ADDR
// hc_gallery :=  ;
49400: LD_ADDR_OWVAR 33
49404: PUSH
49405: LD_STRING 
49407: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49408: LD_ADDR_OWVAR 31
49412: PUSH
49413: LD_INT 0
49415: PPUSH
49416: LD_INT 3
49418: PPUSH
49419: CALL_OW 12
49423: PUSH
49424: LD_INT 0
49426: PPUSH
49427: LD_INT 3
49429: PPUSH
49430: CALL_OW 12
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: ST_TO_ADDR
// end ;
49447: LD_VAR 0 1
49451: RET
// export function PrepareApemanEngineer ( ) ; begin
49452: LD_INT 0
49454: PPUSH
// uc_nation := 0 ;
49455: LD_ADDR_OWVAR 21
49459: PUSH
49460: LD_INT 0
49462: ST_TO_ADDR
// hc_sex := sex_male ;
49463: LD_ADDR_OWVAR 27
49467: PUSH
49468: LD_INT 1
49470: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49471: LD_ADDR_OWVAR 28
49475: PUSH
49476: LD_INT 16
49478: ST_TO_ADDR
// hc_gallery :=  ;
49479: LD_ADDR_OWVAR 33
49483: PUSH
49484: LD_STRING 
49486: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49487: LD_ADDR_OWVAR 31
49491: PUSH
49492: LD_INT 0
49494: PPUSH
49495: LD_INT 3
49497: PPUSH
49498: CALL_OW 12
49502: PUSH
49503: LD_INT 0
49505: PPUSH
49506: LD_INT 3
49508: PPUSH
49509: CALL_OW 12
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: ST_TO_ADDR
// end ;
49526: LD_VAR 0 1
49530: RET
// export function PrepareApeman ( agressivity ) ; begin
49531: LD_INT 0
49533: PPUSH
// uc_side := 0 ;
49534: LD_ADDR_OWVAR 20
49538: PUSH
49539: LD_INT 0
49541: ST_TO_ADDR
// uc_nation := 0 ;
49542: LD_ADDR_OWVAR 21
49546: PUSH
49547: LD_INT 0
49549: ST_TO_ADDR
// hc_sex := sex_male ;
49550: LD_ADDR_OWVAR 27
49554: PUSH
49555: LD_INT 1
49557: ST_TO_ADDR
// hc_class := class_apeman ;
49558: LD_ADDR_OWVAR 28
49562: PUSH
49563: LD_INT 12
49565: ST_TO_ADDR
// hc_gallery :=  ;
49566: LD_ADDR_OWVAR 33
49570: PUSH
49571: LD_STRING 
49573: ST_TO_ADDR
// if agressivity = 0 then
49574: LD_VAR 0 1
49578: PUSH
49579: LD_INT 0
49581: EQUAL
49582: IFFALSE 49594
// hc_agressivity := 0 else
49584: LD_ADDR_OWVAR 35
49588: PUSH
49589: LD_INT 0
49591: ST_TO_ADDR
49592: GO 49615
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49594: LD_ADDR_OWVAR 35
49598: PUSH
49599: LD_VAR 0 1
49603: NEG
49604: PPUSH
49605: LD_VAR 0 1
49609: PPUSH
49610: CALL_OW 12
49614: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49615: LD_ADDR_OWVAR 31
49619: PUSH
49620: LD_INT 0
49622: PPUSH
49623: LD_INT 3
49625: PPUSH
49626: CALL_OW 12
49630: PUSH
49631: LD_INT 0
49633: PPUSH
49634: LD_INT 3
49636: PPUSH
49637: CALL_OW 12
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: ST_TO_ADDR
// end ;
49654: LD_VAR 0 2
49658: RET
// export function PrepareTiger ( agressivity ) ; begin
49659: LD_INT 0
49661: PPUSH
// uc_side := 0 ;
49662: LD_ADDR_OWVAR 20
49666: PUSH
49667: LD_INT 0
49669: ST_TO_ADDR
// uc_nation := 0 ;
49670: LD_ADDR_OWVAR 21
49674: PUSH
49675: LD_INT 0
49677: ST_TO_ADDR
// hc_class := class_tiger ;
49678: LD_ADDR_OWVAR 28
49682: PUSH
49683: LD_INT 14
49685: ST_TO_ADDR
// hc_gallery :=  ;
49686: LD_ADDR_OWVAR 33
49690: PUSH
49691: LD_STRING 
49693: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49694: LD_ADDR_OWVAR 35
49698: PUSH
49699: LD_VAR 0 1
49703: NEG
49704: PPUSH
49705: LD_VAR 0 1
49709: PPUSH
49710: CALL_OW 12
49714: ST_TO_ADDR
// end ;
49715: LD_VAR 0 2
49719: RET
// export function PrepareEnchidna ( ) ; begin
49720: LD_INT 0
49722: PPUSH
// uc_side := 0 ;
49723: LD_ADDR_OWVAR 20
49727: PUSH
49728: LD_INT 0
49730: ST_TO_ADDR
// uc_nation := 0 ;
49731: LD_ADDR_OWVAR 21
49735: PUSH
49736: LD_INT 0
49738: ST_TO_ADDR
// hc_class := class_baggie ;
49739: LD_ADDR_OWVAR 28
49743: PUSH
49744: LD_INT 13
49746: ST_TO_ADDR
// hc_gallery :=  ;
49747: LD_ADDR_OWVAR 33
49751: PUSH
49752: LD_STRING 
49754: ST_TO_ADDR
// end ;
49755: LD_VAR 0 1
49759: RET
// export function PrepareFrog ( ) ; begin
49760: LD_INT 0
49762: PPUSH
// uc_side := 0 ;
49763: LD_ADDR_OWVAR 20
49767: PUSH
49768: LD_INT 0
49770: ST_TO_ADDR
// uc_nation := 0 ;
49771: LD_ADDR_OWVAR 21
49775: PUSH
49776: LD_INT 0
49778: ST_TO_ADDR
// hc_class := class_frog ;
49779: LD_ADDR_OWVAR 28
49783: PUSH
49784: LD_INT 19
49786: ST_TO_ADDR
// hc_gallery :=  ;
49787: LD_ADDR_OWVAR 33
49791: PUSH
49792: LD_STRING 
49794: ST_TO_ADDR
// end ;
49795: LD_VAR 0 1
49799: RET
// export function PrepareFish ( ) ; begin
49800: LD_INT 0
49802: PPUSH
// uc_side := 0 ;
49803: LD_ADDR_OWVAR 20
49807: PUSH
49808: LD_INT 0
49810: ST_TO_ADDR
// uc_nation := 0 ;
49811: LD_ADDR_OWVAR 21
49815: PUSH
49816: LD_INT 0
49818: ST_TO_ADDR
// hc_class := class_fish ;
49819: LD_ADDR_OWVAR 28
49823: PUSH
49824: LD_INT 20
49826: ST_TO_ADDR
// hc_gallery :=  ;
49827: LD_ADDR_OWVAR 33
49831: PUSH
49832: LD_STRING 
49834: ST_TO_ADDR
// end ;
49835: LD_VAR 0 1
49839: RET
// export function PrepareBird ( ) ; begin
49840: LD_INT 0
49842: PPUSH
// uc_side := 0 ;
49843: LD_ADDR_OWVAR 20
49847: PUSH
49848: LD_INT 0
49850: ST_TO_ADDR
// uc_nation := 0 ;
49851: LD_ADDR_OWVAR 21
49855: PUSH
49856: LD_INT 0
49858: ST_TO_ADDR
// hc_class := class_phororhacos ;
49859: LD_ADDR_OWVAR 28
49863: PUSH
49864: LD_INT 18
49866: ST_TO_ADDR
// hc_gallery :=  ;
49867: LD_ADDR_OWVAR 33
49871: PUSH
49872: LD_STRING 
49874: ST_TO_ADDR
// end ;
49875: LD_VAR 0 1
49879: RET
// export function PrepareHorse ( ) ; begin
49880: LD_INT 0
49882: PPUSH
// uc_side := 0 ;
49883: LD_ADDR_OWVAR 20
49887: PUSH
49888: LD_INT 0
49890: ST_TO_ADDR
// uc_nation := 0 ;
49891: LD_ADDR_OWVAR 21
49895: PUSH
49896: LD_INT 0
49898: ST_TO_ADDR
// hc_class := class_horse ;
49899: LD_ADDR_OWVAR 28
49903: PUSH
49904: LD_INT 21
49906: ST_TO_ADDR
// hc_gallery :=  ;
49907: LD_ADDR_OWVAR 33
49911: PUSH
49912: LD_STRING 
49914: ST_TO_ADDR
// end ;
49915: LD_VAR 0 1
49919: RET
// export function PrepareMastodont ( ) ; begin
49920: LD_INT 0
49922: PPUSH
// uc_side := 0 ;
49923: LD_ADDR_OWVAR 20
49927: PUSH
49928: LD_INT 0
49930: ST_TO_ADDR
// uc_nation := 0 ;
49931: LD_ADDR_OWVAR 21
49935: PUSH
49936: LD_INT 0
49938: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49939: LD_ADDR_OWVAR 37
49943: PUSH
49944: LD_INT 31
49946: ST_TO_ADDR
// vc_control := control_rider ;
49947: LD_ADDR_OWVAR 38
49951: PUSH
49952: LD_INT 4
49954: ST_TO_ADDR
// end ;
49955: LD_VAR 0 1
49959: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49960: LD_INT 0
49962: PPUSH
49963: PPUSH
49964: PPUSH
// uc_side = 0 ;
49965: LD_ADDR_OWVAR 20
49969: PUSH
49970: LD_INT 0
49972: ST_TO_ADDR
// uc_nation = 0 ;
49973: LD_ADDR_OWVAR 21
49977: PUSH
49978: LD_INT 0
49980: ST_TO_ADDR
// InitHc_All ( ) ;
49981: CALL_OW 584
// InitVc ;
49985: CALL_OW 20
// if mastodonts then
49989: LD_VAR 0 6
49993: IFFALSE 50060
// for i = 1 to mastodonts do
49995: LD_ADDR_VAR 0 11
49999: PUSH
50000: DOUBLE
50001: LD_INT 1
50003: DEC
50004: ST_TO_ADDR
50005: LD_VAR 0 6
50009: PUSH
50010: FOR_TO
50011: IFFALSE 50058
// begin vc_chassis := 31 ;
50013: LD_ADDR_OWVAR 37
50017: PUSH
50018: LD_INT 31
50020: ST_TO_ADDR
// vc_control := control_rider ;
50021: LD_ADDR_OWVAR 38
50025: PUSH
50026: LD_INT 4
50028: ST_TO_ADDR
// animal := CreateVehicle ;
50029: LD_ADDR_VAR 0 12
50033: PUSH
50034: CALL_OW 45
50038: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50039: LD_VAR 0 12
50043: PPUSH
50044: LD_VAR 0 8
50048: PPUSH
50049: LD_INT 0
50051: PPUSH
50052: CALL 52188 0 3
// end ;
50056: GO 50010
50058: POP
50059: POP
// if horses then
50060: LD_VAR 0 5
50064: IFFALSE 50131
// for i = 1 to horses do
50066: LD_ADDR_VAR 0 11
50070: PUSH
50071: DOUBLE
50072: LD_INT 1
50074: DEC
50075: ST_TO_ADDR
50076: LD_VAR 0 5
50080: PUSH
50081: FOR_TO
50082: IFFALSE 50129
// begin hc_class := 21 ;
50084: LD_ADDR_OWVAR 28
50088: PUSH
50089: LD_INT 21
50091: ST_TO_ADDR
// hc_gallery :=  ;
50092: LD_ADDR_OWVAR 33
50096: PUSH
50097: LD_STRING 
50099: ST_TO_ADDR
// animal := CreateHuman ;
50100: LD_ADDR_VAR 0 12
50104: PUSH
50105: CALL_OW 44
50109: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50110: LD_VAR 0 12
50114: PPUSH
50115: LD_VAR 0 8
50119: PPUSH
50120: LD_INT 0
50122: PPUSH
50123: CALL 52188 0 3
// end ;
50127: GO 50081
50129: POP
50130: POP
// if birds then
50131: LD_VAR 0 1
50135: IFFALSE 50202
// for i = 1 to birds do
50137: LD_ADDR_VAR 0 11
50141: PUSH
50142: DOUBLE
50143: LD_INT 1
50145: DEC
50146: ST_TO_ADDR
50147: LD_VAR 0 1
50151: PUSH
50152: FOR_TO
50153: IFFALSE 50200
// begin hc_class := 18 ;
50155: LD_ADDR_OWVAR 28
50159: PUSH
50160: LD_INT 18
50162: ST_TO_ADDR
// hc_gallery =  ;
50163: LD_ADDR_OWVAR 33
50167: PUSH
50168: LD_STRING 
50170: ST_TO_ADDR
// animal := CreateHuman ;
50171: LD_ADDR_VAR 0 12
50175: PUSH
50176: CALL_OW 44
50180: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50181: LD_VAR 0 12
50185: PPUSH
50186: LD_VAR 0 8
50190: PPUSH
50191: LD_INT 0
50193: PPUSH
50194: CALL 52188 0 3
// end ;
50198: GO 50152
50200: POP
50201: POP
// if tigers then
50202: LD_VAR 0 2
50206: IFFALSE 50290
// for i = 1 to tigers do
50208: LD_ADDR_VAR 0 11
50212: PUSH
50213: DOUBLE
50214: LD_INT 1
50216: DEC
50217: ST_TO_ADDR
50218: LD_VAR 0 2
50222: PUSH
50223: FOR_TO
50224: IFFALSE 50288
// begin hc_class = class_tiger ;
50226: LD_ADDR_OWVAR 28
50230: PUSH
50231: LD_INT 14
50233: ST_TO_ADDR
// hc_gallery =  ;
50234: LD_ADDR_OWVAR 33
50238: PUSH
50239: LD_STRING 
50241: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50242: LD_ADDR_OWVAR 35
50246: PUSH
50247: LD_INT 7
50249: NEG
50250: PPUSH
50251: LD_INT 7
50253: PPUSH
50254: CALL_OW 12
50258: ST_TO_ADDR
// animal := CreateHuman ;
50259: LD_ADDR_VAR 0 12
50263: PUSH
50264: CALL_OW 44
50268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50269: LD_VAR 0 12
50273: PPUSH
50274: LD_VAR 0 8
50278: PPUSH
50279: LD_INT 0
50281: PPUSH
50282: CALL 52188 0 3
// end ;
50286: GO 50223
50288: POP
50289: POP
// if apemans then
50290: LD_VAR 0 3
50294: IFFALSE 50417
// for i = 1 to apemans do
50296: LD_ADDR_VAR 0 11
50300: PUSH
50301: DOUBLE
50302: LD_INT 1
50304: DEC
50305: ST_TO_ADDR
50306: LD_VAR 0 3
50310: PUSH
50311: FOR_TO
50312: IFFALSE 50415
// begin hc_class = class_apeman ;
50314: LD_ADDR_OWVAR 28
50318: PUSH
50319: LD_INT 12
50321: ST_TO_ADDR
// hc_gallery =  ;
50322: LD_ADDR_OWVAR 33
50326: PUSH
50327: LD_STRING 
50329: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50330: LD_ADDR_OWVAR 35
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PPUSH
50339: LD_INT 2
50341: PPUSH
50342: CALL_OW 12
50346: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50347: LD_ADDR_OWVAR 31
50351: PUSH
50352: LD_INT 1
50354: PPUSH
50355: LD_INT 3
50357: PPUSH
50358: CALL_OW 12
50362: PUSH
50363: LD_INT 1
50365: PPUSH
50366: LD_INT 3
50368: PPUSH
50369: CALL_OW 12
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: ST_TO_ADDR
// animal := CreateHuman ;
50386: LD_ADDR_VAR 0 12
50390: PUSH
50391: CALL_OW 44
50395: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50396: LD_VAR 0 12
50400: PPUSH
50401: LD_VAR 0 8
50405: PPUSH
50406: LD_INT 0
50408: PPUSH
50409: CALL 52188 0 3
// end ;
50413: GO 50311
50415: POP
50416: POP
// if enchidnas then
50417: LD_VAR 0 4
50421: IFFALSE 50488
// for i = 1 to enchidnas do
50423: LD_ADDR_VAR 0 11
50427: PUSH
50428: DOUBLE
50429: LD_INT 1
50431: DEC
50432: ST_TO_ADDR
50433: LD_VAR 0 4
50437: PUSH
50438: FOR_TO
50439: IFFALSE 50486
// begin hc_class = 13 ;
50441: LD_ADDR_OWVAR 28
50445: PUSH
50446: LD_INT 13
50448: ST_TO_ADDR
// hc_gallery =  ;
50449: LD_ADDR_OWVAR 33
50453: PUSH
50454: LD_STRING 
50456: ST_TO_ADDR
// animal := CreateHuman ;
50457: LD_ADDR_VAR 0 12
50461: PUSH
50462: CALL_OW 44
50466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50467: LD_VAR 0 12
50471: PPUSH
50472: LD_VAR 0 8
50476: PPUSH
50477: LD_INT 0
50479: PPUSH
50480: CALL 52188 0 3
// end ;
50484: GO 50438
50486: POP
50487: POP
// if fishes then
50488: LD_VAR 0 7
50492: IFFALSE 50559
// for i = 1 to fishes do
50494: LD_ADDR_VAR 0 11
50498: PUSH
50499: DOUBLE
50500: LD_INT 1
50502: DEC
50503: ST_TO_ADDR
50504: LD_VAR 0 7
50508: PUSH
50509: FOR_TO
50510: IFFALSE 50557
// begin hc_class = 20 ;
50512: LD_ADDR_OWVAR 28
50516: PUSH
50517: LD_INT 20
50519: ST_TO_ADDR
// hc_gallery =  ;
50520: LD_ADDR_OWVAR 33
50524: PUSH
50525: LD_STRING 
50527: ST_TO_ADDR
// animal := CreateHuman ;
50528: LD_ADDR_VAR 0 12
50532: PUSH
50533: CALL_OW 44
50537: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50538: LD_VAR 0 12
50542: PPUSH
50543: LD_VAR 0 9
50547: PPUSH
50548: LD_INT 0
50550: PPUSH
50551: CALL 52188 0 3
// end ;
50555: GO 50509
50557: POP
50558: POP
// end ;
50559: LD_VAR 0 10
50563: RET
// export function WantHeal ( sci , unit ) ; begin
50564: LD_INT 0
50566: PPUSH
// if GetTaskList ( sci ) > 0 then
50567: LD_VAR 0 1
50571: PPUSH
50572: CALL_OW 437
50576: PUSH
50577: LD_INT 0
50579: GREATER
50580: IFFALSE 50650
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50582: LD_VAR 0 1
50586: PPUSH
50587: CALL_OW 437
50591: PUSH
50592: LD_INT 1
50594: ARRAY
50595: PUSH
50596: LD_INT 1
50598: ARRAY
50599: PUSH
50600: LD_STRING l
50602: EQUAL
50603: PUSH
50604: LD_VAR 0 1
50608: PPUSH
50609: CALL_OW 437
50613: PUSH
50614: LD_INT 1
50616: ARRAY
50617: PUSH
50618: LD_INT 4
50620: ARRAY
50621: PUSH
50622: LD_VAR 0 2
50626: EQUAL
50627: AND
50628: IFFALSE 50640
// result := true else
50630: LD_ADDR_VAR 0 3
50634: PUSH
50635: LD_INT 1
50637: ST_TO_ADDR
50638: GO 50648
// result := false ;
50640: LD_ADDR_VAR 0 3
50644: PUSH
50645: LD_INT 0
50647: ST_TO_ADDR
// end else
50648: GO 50658
// result := false ;
50650: LD_ADDR_VAR 0 3
50654: PUSH
50655: LD_INT 0
50657: ST_TO_ADDR
// end ;
50658: LD_VAR 0 3
50662: RET
// export function HealTarget ( sci ) ; begin
50663: LD_INT 0
50665: PPUSH
// if not sci then
50666: LD_VAR 0 1
50670: NOT
50671: IFFALSE 50675
// exit ;
50673: GO 50740
// result := 0 ;
50675: LD_ADDR_VAR 0 2
50679: PUSH
50680: LD_INT 0
50682: ST_TO_ADDR
// if GetTaskList ( sci ) then
50683: LD_VAR 0 1
50687: PPUSH
50688: CALL_OW 437
50692: IFFALSE 50740
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50694: LD_VAR 0 1
50698: PPUSH
50699: CALL_OW 437
50703: PUSH
50704: LD_INT 1
50706: ARRAY
50707: PUSH
50708: LD_INT 1
50710: ARRAY
50711: PUSH
50712: LD_STRING l
50714: EQUAL
50715: IFFALSE 50740
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50717: LD_ADDR_VAR 0 2
50721: PUSH
50722: LD_VAR 0 1
50726: PPUSH
50727: CALL_OW 437
50731: PUSH
50732: LD_INT 1
50734: ARRAY
50735: PUSH
50736: LD_INT 4
50738: ARRAY
50739: ST_TO_ADDR
// end ;
50740: LD_VAR 0 2
50744: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50745: LD_INT 0
50747: PPUSH
50748: PPUSH
50749: PPUSH
50750: PPUSH
// if not base_units then
50751: LD_VAR 0 1
50755: NOT
50756: IFFALSE 50760
// exit ;
50758: GO 50847
// result := false ;
50760: LD_ADDR_VAR 0 2
50764: PUSH
50765: LD_INT 0
50767: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50768: LD_ADDR_VAR 0 5
50772: PUSH
50773: LD_VAR 0 1
50777: PPUSH
50778: LD_INT 21
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PPUSH
50788: CALL_OW 72
50792: ST_TO_ADDR
// if not tmp then
50793: LD_VAR 0 5
50797: NOT
50798: IFFALSE 50802
// exit ;
50800: GO 50847
// for i in tmp do
50802: LD_ADDR_VAR 0 3
50806: PUSH
50807: LD_VAR 0 5
50811: PUSH
50812: FOR_IN
50813: IFFALSE 50845
// begin result := EnemyInRange ( i , 22 ) ;
50815: LD_ADDR_VAR 0 2
50819: PUSH
50820: LD_VAR 0 3
50824: PPUSH
50825: LD_INT 22
50827: PPUSH
50828: CALL 48425 0 2
50832: ST_TO_ADDR
// if result then
50833: LD_VAR 0 2
50837: IFFALSE 50843
// exit ;
50839: POP
50840: POP
50841: GO 50847
// end ;
50843: GO 50812
50845: POP
50846: POP
// end ;
50847: LD_VAR 0 2
50851: RET
// export function FilterByTag ( units , tag ) ; begin
50852: LD_INT 0
50854: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50855: LD_ADDR_VAR 0 3
50859: PUSH
50860: LD_VAR 0 1
50864: PPUSH
50865: LD_INT 120
50867: PUSH
50868: LD_VAR 0 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PPUSH
50877: CALL_OW 72
50881: ST_TO_ADDR
// end ;
50882: LD_VAR 0 3
50886: RET
// export function IsDriver ( un ) ; begin
50887: LD_INT 0
50889: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50890: LD_ADDR_VAR 0 2
50894: PUSH
50895: LD_VAR 0 1
50899: PUSH
50900: LD_INT 55
50902: PUSH
50903: EMPTY
50904: LIST
50905: PPUSH
50906: CALL_OW 69
50910: IN
50911: ST_TO_ADDR
// end ;
50912: LD_VAR 0 2
50916: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50917: LD_INT 0
50919: PPUSH
50920: PPUSH
// list := [ ] ;
50921: LD_ADDR_VAR 0 5
50925: PUSH
50926: EMPTY
50927: ST_TO_ADDR
// case d of 0 :
50928: LD_VAR 0 3
50932: PUSH
50933: LD_INT 0
50935: DOUBLE
50936: EQUAL
50937: IFTRUE 50941
50939: GO 51074
50941: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50942: LD_ADDR_VAR 0 5
50946: PUSH
50947: LD_VAR 0 1
50951: PUSH
50952: LD_INT 4
50954: MINUS
50955: PUSH
50956: LD_VAR 0 2
50960: PUSH
50961: LD_INT 4
50963: MINUS
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: LIST
50972: PUSH
50973: LD_VAR 0 1
50977: PUSH
50978: LD_INT 3
50980: MINUS
50981: PUSH
50982: LD_VAR 0 2
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: LIST
50994: PUSH
50995: LD_VAR 0 1
50999: PUSH
51000: LD_INT 4
51002: PLUS
51003: PUSH
51004: LD_VAR 0 2
51008: PUSH
51009: LD_INT 4
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: PUSH
51017: LD_VAR 0 1
51021: PUSH
51022: LD_INT 3
51024: PLUS
51025: PUSH
51026: LD_VAR 0 2
51030: PUSH
51031: LD_INT 3
51033: PLUS
51034: PUSH
51035: LD_INT 5
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: LIST
51042: PUSH
51043: LD_VAR 0 1
51047: PUSH
51048: LD_VAR 0 2
51052: PUSH
51053: LD_INT 4
51055: PLUS
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: LIST
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: ST_TO_ADDR
// end ; 1 :
51072: GO 51772
51074: LD_INT 1
51076: DOUBLE
51077: EQUAL
51078: IFTRUE 51082
51080: GO 51215
51082: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51083: LD_ADDR_VAR 0 5
51087: PUSH
51088: LD_VAR 0 1
51092: PUSH
51093: LD_VAR 0 2
51097: PUSH
51098: LD_INT 4
51100: MINUS
51101: PUSH
51102: LD_INT 3
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: LIST
51109: PUSH
51110: LD_VAR 0 1
51114: PUSH
51115: LD_INT 3
51117: MINUS
51118: PUSH
51119: LD_VAR 0 2
51123: PUSH
51124: LD_INT 3
51126: MINUS
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: LIST
51135: PUSH
51136: LD_VAR 0 1
51140: PUSH
51141: LD_INT 4
51143: MINUS
51144: PUSH
51145: LD_VAR 0 2
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: LIST
51157: PUSH
51158: LD_VAR 0 1
51162: PUSH
51163: LD_VAR 0 2
51167: PUSH
51168: LD_INT 3
51170: PLUS
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: PUSH
51180: LD_VAR 0 1
51184: PUSH
51185: LD_INT 4
51187: PLUS
51188: PUSH
51189: LD_VAR 0 2
51193: PUSH
51194: LD_INT 4
51196: PLUS
51197: PUSH
51198: LD_INT 5
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: ST_TO_ADDR
// end ; 2 :
51213: GO 51772
51215: LD_INT 2
51217: DOUBLE
51218: EQUAL
51219: IFTRUE 51223
51221: GO 51352
51223: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51224: LD_ADDR_VAR 0 5
51228: PUSH
51229: LD_VAR 0 1
51233: PUSH
51234: LD_VAR 0 2
51238: PUSH
51239: LD_INT 3
51241: MINUS
51242: PUSH
51243: LD_INT 3
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: LIST
51250: PUSH
51251: LD_VAR 0 1
51255: PUSH
51256: LD_INT 4
51258: PLUS
51259: PUSH
51260: LD_VAR 0 2
51264: PUSH
51265: LD_INT 4
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: LIST
51272: PUSH
51273: LD_VAR 0 1
51277: PUSH
51278: LD_VAR 0 2
51282: PUSH
51283: LD_INT 4
51285: PLUS
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: LIST
51294: PUSH
51295: LD_VAR 0 1
51299: PUSH
51300: LD_INT 3
51302: MINUS
51303: PUSH
51304: LD_VAR 0 2
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: LIST
51316: PUSH
51317: LD_VAR 0 1
51321: PUSH
51322: LD_INT 4
51324: MINUS
51325: PUSH
51326: LD_VAR 0 2
51330: PUSH
51331: LD_INT 4
51333: MINUS
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: LIST
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: ST_TO_ADDR
// end ; 3 :
51350: GO 51772
51352: LD_INT 3
51354: DOUBLE
51355: EQUAL
51356: IFTRUE 51360
51358: GO 51493
51360: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51361: LD_ADDR_VAR 0 5
51365: PUSH
51366: LD_VAR 0 1
51370: PUSH
51371: LD_INT 3
51373: PLUS
51374: PUSH
51375: LD_VAR 0 2
51379: PUSH
51380: LD_INT 4
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: LIST
51387: PUSH
51388: LD_VAR 0 1
51392: PUSH
51393: LD_INT 4
51395: PLUS
51396: PUSH
51397: LD_VAR 0 2
51401: PUSH
51402: LD_INT 4
51404: PLUS
51405: PUSH
51406: LD_INT 5
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: LIST
51413: PUSH
51414: LD_VAR 0 1
51418: PUSH
51419: LD_INT 4
51421: MINUS
51422: PUSH
51423: LD_VAR 0 2
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: PUSH
51436: LD_VAR 0 1
51440: PUSH
51441: LD_VAR 0 2
51445: PUSH
51446: LD_INT 4
51448: MINUS
51449: PUSH
51450: LD_INT 3
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: PUSH
51458: LD_VAR 0 1
51462: PUSH
51463: LD_INT 3
51465: MINUS
51466: PUSH
51467: LD_VAR 0 2
51471: PUSH
51472: LD_INT 3
51474: MINUS
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: ST_TO_ADDR
// end ; 4 :
51491: GO 51772
51493: LD_INT 4
51495: DOUBLE
51496: EQUAL
51497: IFTRUE 51501
51499: GO 51634
51501: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51502: LD_ADDR_VAR 0 5
51506: PUSH
51507: LD_VAR 0 1
51511: PUSH
51512: LD_VAR 0 2
51516: PUSH
51517: LD_INT 4
51519: PLUS
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: LIST
51528: PUSH
51529: LD_VAR 0 1
51533: PUSH
51534: LD_INT 3
51536: PLUS
51537: PUSH
51538: LD_VAR 0 2
51542: PUSH
51543: LD_INT 3
51545: PLUS
51546: PUSH
51547: LD_INT 5
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: LIST
51554: PUSH
51555: LD_VAR 0 1
51559: PUSH
51560: LD_INT 4
51562: PLUS
51563: PUSH
51564: LD_VAR 0 2
51568: PUSH
51569: LD_INT 4
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: PUSH
51577: LD_VAR 0 1
51581: PUSH
51582: LD_VAR 0 2
51586: PUSH
51587: LD_INT 3
51589: MINUS
51590: PUSH
51591: LD_INT 3
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: LIST
51598: PUSH
51599: LD_VAR 0 1
51603: PUSH
51604: LD_INT 4
51606: MINUS
51607: PUSH
51608: LD_VAR 0 2
51612: PUSH
51613: LD_INT 4
51615: MINUS
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: LIST
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: ST_TO_ADDR
// end ; 5 :
51632: GO 51772
51634: LD_INT 5
51636: DOUBLE
51637: EQUAL
51638: IFTRUE 51642
51640: GO 51771
51642: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51643: LD_ADDR_VAR 0 5
51647: PUSH
51648: LD_VAR 0 1
51652: PUSH
51653: LD_INT 4
51655: MINUS
51656: PUSH
51657: LD_VAR 0 2
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: LIST
51669: PUSH
51670: LD_VAR 0 1
51674: PUSH
51675: LD_VAR 0 2
51679: PUSH
51680: LD_INT 4
51682: MINUS
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: LIST
51691: PUSH
51692: LD_VAR 0 1
51696: PUSH
51697: LD_INT 4
51699: PLUS
51700: PUSH
51701: LD_VAR 0 2
51705: PUSH
51706: LD_INT 4
51708: PLUS
51709: PUSH
51710: LD_INT 5
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: LIST
51717: PUSH
51718: LD_VAR 0 1
51722: PUSH
51723: LD_INT 3
51725: PLUS
51726: PUSH
51727: LD_VAR 0 2
51731: PUSH
51732: LD_INT 4
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: LIST
51739: PUSH
51740: LD_VAR 0 1
51744: PUSH
51745: LD_VAR 0 2
51749: PUSH
51750: LD_INT 3
51752: PLUS
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: LIST
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: ST_TO_ADDR
// end ; end ;
51769: GO 51772
51771: POP
// result := list ;
51772: LD_ADDR_VAR 0 4
51776: PUSH
51777: LD_VAR 0 5
51781: ST_TO_ADDR
// end ;
51782: LD_VAR 0 4
51786: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51787: LD_INT 0
51789: PPUSH
51790: PPUSH
51791: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51792: LD_VAR 0 1
51796: NOT
51797: PUSH
51798: LD_VAR 0 2
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: LD_INT 3
51811: PUSH
51812: LD_INT 4
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: IN
51821: NOT
51822: OR
51823: IFFALSE 51827
// exit ;
51825: GO 51910
// tmp := [ ] ;
51827: LD_ADDR_VAR 0 5
51831: PUSH
51832: EMPTY
51833: ST_TO_ADDR
// for i in units do
51834: LD_ADDR_VAR 0 4
51838: PUSH
51839: LD_VAR 0 1
51843: PUSH
51844: FOR_IN
51845: IFFALSE 51879
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51847: LD_ADDR_VAR 0 5
51851: PUSH
51852: LD_VAR 0 5
51856: PPUSH
51857: LD_VAR 0 4
51861: PPUSH
51862: LD_VAR 0 2
51866: PPUSH
51867: CALL_OW 259
51871: PPUSH
51872: CALL 53283 0 2
51876: ST_TO_ADDR
51877: GO 51844
51879: POP
51880: POP
// if not tmp then
51881: LD_VAR 0 5
51885: NOT
51886: IFFALSE 51890
// exit ;
51888: GO 51910
// result := SortListByListDesc ( units , tmp ) ;
51890: LD_ADDR_VAR 0 3
51894: PUSH
51895: LD_VAR 0 1
51899: PPUSH
51900: LD_VAR 0 5
51904: PPUSH
51905: CALL_OW 77
51909: ST_TO_ADDR
// end ;
51910: LD_VAR 0 3
51914: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51915: LD_INT 0
51917: PPUSH
51918: PPUSH
51919: PPUSH
// result := false ;
51920: LD_ADDR_VAR 0 3
51924: PUSH
51925: LD_INT 0
51927: ST_TO_ADDR
// if not building then
51928: LD_VAR 0 2
51932: NOT
51933: IFFALSE 51937
// exit ;
51935: GO 52075
// x := GetX ( building ) ;
51937: LD_ADDR_VAR 0 4
51941: PUSH
51942: LD_VAR 0 2
51946: PPUSH
51947: CALL_OW 250
51951: ST_TO_ADDR
// y := GetY ( building ) ;
51952: LD_ADDR_VAR 0 5
51956: PUSH
51957: LD_VAR 0 2
51961: PPUSH
51962: CALL_OW 251
51966: ST_TO_ADDR
// if not x or not y then
51967: LD_VAR 0 4
51971: NOT
51972: PUSH
51973: LD_VAR 0 5
51977: NOT
51978: OR
51979: IFFALSE 51983
// exit ;
51981: GO 52075
// if GetTaskList ( unit ) then
51983: LD_VAR 0 1
51987: PPUSH
51988: CALL_OW 437
51992: IFFALSE 52075
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51994: LD_STRING e
51996: PUSH
51997: LD_VAR 0 1
52001: PPUSH
52002: CALL_OW 437
52006: PUSH
52007: LD_INT 1
52009: ARRAY
52010: PUSH
52011: LD_INT 1
52013: ARRAY
52014: EQUAL
52015: PUSH
52016: LD_VAR 0 4
52020: PUSH
52021: LD_VAR 0 1
52025: PPUSH
52026: CALL_OW 437
52030: PUSH
52031: LD_INT 1
52033: ARRAY
52034: PUSH
52035: LD_INT 2
52037: ARRAY
52038: EQUAL
52039: AND
52040: PUSH
52041: LD_VAR 0 5
52045: PUSH
52046: LD_VAR 0 1
52050: PPUSH
52051: CALL_OW 437
52055: PUSH
52056: LD_INT 1
52058: ARRAY
52059: PUSH
52060: LD_INT 3
52062: ARRAY
52063: EQUAL
52064: AND
52065: IFFALSE 52075
// result := true end ;
52067: LD_ADDR_VAR 0 3
52071: PUSH
52072: LD_INT 1
52074: ST_TO_ADDR
// end ;
52075: LD_VAR 0 3
52079: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52080: LD_INT 0
52082: PPUSH
// result := false ;
52083: LD_ADDR_VAR 0 4
52087: PUSH
52088: LD_INT 0
52090: ST_TO_ADDR
// if GetTaskList ( unit ) then
52091: LD_VAR 0 1
52095: PPUSH
52096: CALL_OW 437
52100: IFFALSE 52183
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52102: LD_STRING M
52104: PUSH
52105: LD_VAR 0 1
52109: PPUSH
52110: CALL_OW 437
52114: PUSH
52115: LD_INT 1
52117: ARRAY
52118: PUSH
52119: LD_INT 1
52121: ARRAY
52122: EQUAL
52123: PUSH
52124: LD_VAR 0 2
52128: PUSH
52129: LD_VAR 0 1
52133: PPUSH
52134: CALL_OW 437
52138: PUSH
52139: LD_INT 1
52141: ARRAY
52142: PUSH
52143: LD_INT 2
52145: ARRAY
52146: EQUAL
52147: AND
52148: PUSH
52149: LD_VAR 0 3
52153: PUSH
52154: LD_VAR 0 1
52158: PPUSH
52159: CALL_OW 437
52163: PUSH
52164: LD_INT 1
52166: ARRAY
52167: PUSH
52168: LD_INT 3
52170: ARRAY
52171: EQUAL
52172: AND
52173: IFFALSE 52183
// result := true ;
52175: LD_ADDR_VAR 0 4
52179: PUSH
52180: LD_INT 1
52182: ST_TO_ADDR
// end ; end ;
52183: LD_VAR 0 4
52187: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52188: LD_INT 0
52190: PPUSH
52191: PPUSH
52192: PPUSH
52193: PPUSH
// if not unit or not area then
52194: LD_VAR 0 1
52198: NOT
52199: PUSH
52200: LD_VAR 0 2
52204: NOT
52205: OR
52206: IFFALSE 52210
// exit ;
52208: GO 52386
// tmp := AreaToList ( area , i ) ;
52210: LD_ADDR_VAR 0 6
52214: PUSH
52215: LD_VAR 0 2
52219: PPUSH
52220: LD_VAR 0 5
52224: PPUSH
52225: CALL_OW 517
52229: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52230: LD_ADDR_VAR 0 5
52234: PUSH
52235: DOUBLE
52236: LD_INT 1
52238: DEC
52239: ST_TO_ADDR
52240: LD_VAR 0 6
52244: PUSH
52245: LD_INT 1
52247: ARRAY
52248: PUSH
52249: FOR_TO
52250: IFFALSE 52384
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52252: LD_ADDR_VAR 0 7
52256: PUSH
52257: LD_VAR 0 6
52261: PUSH
52262: LD_INT 1
52264: ARRAY
52265: PUSH
52266: LD_VAR 0 5
52270: ARRAY
52271: PUSH
52272: LD_VAR 0 6
52276: PUSH
52277: LD_INT 2
52279: ARRAY
52280: PUSH
52281: LD_VAR 0 5
52285: ARRAY
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52291: LD_INT 92
52293: PUSH
52294: LD_VAR 0 7
52298: PUSH
52299: LD_INT 1
52301: ARRAY
52302: PUSH
52303: LD_VAR 0 7
52307: PUSH
52308: LD_INT 2
52310: ARRAY
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: PPUSH
52321: CALL_OW 69
52325: PUSH
52326: LD_INT 0
52328: EQUAL
52329: IFFALSE 52382
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52331: LD_VAR 0 1
52335: PPUSH
52336: LD_VAR 0 7
52340: PUSH
52341: LD_INT 1
52343: ARRAY
52344: PPUSH
52345: LD_VAR 0 7
52349: PUSH
52350: LD_INT 2
52352: ARRAY
52353: PPUSH
52354: LD_VAR 0 3
52358: PPUSH
52359: CALL_OW 48
// result := IsPlaced ( unit ) ;
52363: LD_ADDR_VAR 0 4
52367: PUSH
52368: LD_VAR 0 1
52372: PPUSH
52373: CALL_OW 305
52377: ST_TO_ADDR
// exit ;
52378: POP
52379: POP
52380: GO 52386
// end ; end ;
52382: GO 52249
52384: POP
52385: POP
// end ;
52386: LD_VAR 0 4
52390: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52391: LD_INT 0
52393: PPUSH
52394: PPUSH
52395: PPUSH
// if not side or side > 8 then
52396: LD_VAR 0 1
52400: NOT
52401: PUSH
52402: LD_VAR 0 1
52406: PUSH
52407: LD_INT 8
52409: GREATER
52410: OR
52411: IFFALSE 52415
// exit ;
52413: GO 52602
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52415: LD_ADDR_VAR 0 4
52419: PUSH
52420: LD_INT 22
52422: PUSH
52423: LD_VAR 0 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 21
52434: PUSH
52435: LD_INT 3
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PPUSH
52446: CALL_OW 69
52450: ST_TO_ADDR
// if not tmp then
52451: LD_VAR 0 4
52455: NOT
52456: IFFALSE 52460
// exit ;
52458: GO 52602
// enable_addtolog := true ;
52460: LD_ADDR_OWVAR 81
52464: PUSH
52465: LD_INT 1
52467: ST_TO_ADDR
// AddToLog ( [ ) ;
52468: LD_STRING [
52470: PPUSH
52471: CALL_OW 561
// for i in tmp do
52475: LD_ADDR_VAR 0 3
52479: PUSH
52480: LD_VAR 0 4
52484: PUSH
52485: FOR_IN
52486: IFFALSE 52593
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52488: LD_STRING [
52490: PUSH
52491: LD_VAR 0 3
52495: PPUSH
52496: CALL_OW 266
52500: STR
52501: PUSH
52502: LD_STRING , 
52504: STR
52505: PUSH
52506: LD_VAR 0 3
52510: PPUSH
52511: CALL_OW 250
52515: STR
52516: PUSH
52517: LD_STRING , 
52519: STR
52520: PUSH
52521: LD_VAR 0 3
52525: PPUSH
52526: CALL_OW 251
52530: STR
52531: PUSH
52532: LD_STRING , 
52534: STR
52535: PUSH
52536: LD_VAR 0 3
52540: PPUSH
52541: CALL_OW 254
52545: STR
52546: PUSH
52547: LD_STRING , 
52549: STR
52550: PUSH
52551: LD_VAR 0 3
52555: PPUSH
52556: LD_INT 1
52558: PPUSH
52559: CALL_OW 268
52563: STR
52564: PUSH
52565: LD_STRING , 
52567: STR
52568: PUSH
52569: LD_VAR 0 3
52573: PPUSH
52574: LD_INT 2
52576: PPUSH
52577: CALL_OW 268
52581: STR
52582: PUSH
52583: LD_STRING ],
52585: STR
52586: PPUSH
52587: CALL_OW 561
// end ;
52591: GO 52485
52593: POP
52594: POP
// AddToLog ( ]; ) ;
52595: LD_STRING ];
52597: PPUSH
52598: CALL_OW 561
// end ;
52602: LD_VAR 0 2
52606: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52607: LD_INT 0
52609: PPUSH
52610: PPUSH
52611: PPUSH
52612: PPUSH
52613: PPUSH
// if not area or not rate or not max then
52614: LD_VAR 0 1
52618: NOT
52619: PUSH
52620: LD_VAR 0 2
52624: NOT
52625: OR
52626: PUSH
52627: LD_VAR 0 4
52631: NOT
52632: OR
52633: IFFALSE 52637
// exit ;
52635: GO 52826
// while 1 do
52637: LD_INT 1
52639: IFFALSE 52826
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52641: LD_ADDR_VAR 0 9
52645: PUSH
52646: LD_VAR 0 1
52650: PPUSH
52651: LD_INT 1
52653: PPUSH
52654: CALL_OW 287
52658: PUSH
52659: LD_INT 10
52661: MUL
52662: ST_TO_ADDR
// r := rate / 10 ;
52663: LD_ADDR_VAR 0 7
52667: PUSH
52668: LD_VAR 0 2
52672: PUSH
52673: LD_INT 10
52675: DIVREAL
52676: ST_TO_ADDR
// time := 1 1$00 ;
52677: LD_ADDR_VAR 0 8
52681: PUSH
52682: LD_INT 2100
52684: ST_TO_ADDR
// if amount < min then
52685: LD_VAR 0 9
52689: PUSH
52690: LD_VAR 0 3
52694: LESS
52695: IFFALSE 52713
// r := r * 2 else
52697: LD_ADDR_VAR 0 7
52701: PUSH
52702: LD_VAR 0 7
52706: PUSH
52707: LD_INT 2
52709: MUL
52710: ST_TO_ADDR
52711: GO 52739
// if amount > max then
52713: LD_VAR 0 9
52717: PUSH
52718: LD_VAR 0 4
52722: GREATER
52723: IFFALSE 52739
// r := r / 2 ;
52725: LD_ADDR_VAR 0 7
52729: PUSH
52730: LD_VAR 0 7
52734: PUSH
52735: LD_INT 2
52737: DIVREAL
52738: ST_TO_ADDR
// time := time / r ;
52739: LD_ADDR_VAR 0 8
52743: PUSH
52744: LD_VAR 0 8
52748: PUSH
52749: LD_VAR 0 7
52753: DIVREAL
52754: ST_TO_ADDR
// if time < 0 then
52755: LD_VAR 0 8
52759: PUSH
52760: LD_INT 0
52762: LESS
52763: IFFALSE 52780
// time := time * - 1 ;
52765: LD_ADDR_VAR 0 8
52769: PUSH
52770: LD_VAR 0 8
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: MUL
52779: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52780: LD_VAR 0 8
52784: PUSH
52785: LD_INT 35
52787: PPUSH
52788: LD_INT 875
52790: PPUSH
52791: CALL_OW 12
52795: PLUS
52796: PPUSH
52797: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52801: LD_INT 1
52803: PPUSH
52804: LD_INT 5
52806: PPUSH
52807: CALL_OW 12
52811: PPUSH
52812: LD_VAR 0 1
52816: PPUSH
52817: LD_INT 1
52819: PPUSH
52820: CALL_OW 55
// end ;
52824: GO 52637
// end ;
52826: LD_VAR 0 5
52830: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52831: LD_INT 0
52833: PPUSH
52834: PPUSH
52835: PPUSH
52836: PPUSH
52837: PPUSH
52838: PPUSH
52839: PPUSH
52840: PPUSH
// if not turrets or not factories then
52841: LD_VAR 0 1
52845: NOT
52846: PUSH
52847: LD_VAR 0 2
52851: NOT
52852: OR
52853: IFFALSE 52857
// exit ;
52855: GO 53164
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52857: LD_ADDR_VAR 0 10
52861: PUSH
52862: LD_INT 5
52864: PUSH
52865: LD_INT 6
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 4
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 3
52884: PUSH
52885: LD_INT 5
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 24
52899: PUSH
52900: LD_INT 25
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 23
52909: PUSH
52910: LD_INT 27
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 42
52923: PUSH
52924: LD_INT 43
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 44
52933: PUSH
52934: LD_INT 46
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 45
52943: PUSH
52944: LD_INT 47
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: LIST
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: LIST
52960: ST_TO_ADDR
// result := [ ] ;
52961: LD_ADDR_VAR 0 3
52965: PUSH
52966: EMPTY
52967: ST_TO_ADDR
// for i in turrets do
52968: LD_ADDR_VAR 0 4
52972: PUSH
52973: LD_VAR 0 1
52977: PUSH
52978: FOR_IN
52979: IFFALSE 53162
// begin nat := GetNation ( i ) ;
52981: LD_ADDR_VAR 0 7
52985: PUSH
52986: LD_VAR 0 4
52990: PPUSH
52991: CALL_OW 248
52995: ST_TO_ADDR
// weapon := 0 ;
52996: LD_ADDR_VAR 0 8
53000: PUSH
53001: LD_INT 0
53003: ST_TO_ADDR
// if not nat then
53004: LD_VAR 0 7
53008: NOT
53009: IFFALSE 53013
// continue ;
53011: GO 52978
// for j in list [ nat ] do
53013: LD_ADDR_VAR 0 5
53017: PUSH
53018: LD_VAR 0 10
53022: PUSH
53023: LD_VAR 0 7
53027: ARRAY
53028: PUSH
53029: FOR_IN
53030: IFFALSE 53071
// if GetBWeapon ( i ) = j [ 1 ] then
53032: LD_VAR 0 4
53036: PPUSH
53037: CALL_OW 269
53041: PUSH
53042: LD_VAR 0 5
53046: PUSH
53047: LD_INT 1
53049: ARRAY
53050: EQUAL
53051: IFFALSE 53069
// begin weapon := j [ 2 ] ;
53053: LD_ADDR_VAR 0 8
53057: PUSH
53058: LD_VAR 0 5
53062: PUSH
53063: LD_INT 2
53065: ARRAY
53066: ST_TO_ADDR
// break ;
53067: GO 53071
// end ;
53069: GO 53029
53071: POP
53072: POP
// if not weapon then
53073: LD_VAR 0 8
53077: NOT
53078: IFFALSE 53082
// continue ;
53080: GO 52978
// for k in factories do
53082: LD_ADDR_VAR 0 6
53086: PUSH
53087: LD_VAR 0 2
53091: PUSH
53092: FOR_IN
53093: IFFALSE 53158
// begin weapons := AvailableWeaponList ( k ) ;
53095: LD_ADDR_VAR 0 9
53099: PUSH
53100: LD_VAR 0 6
53104: PPUSH
53105: CALL_OW 478
53109: ST_TO_ADDR
// if not weapons then
53110: LD_VAR 0 9
53114: NOT
53115: IFFALSE 53119
// continue ;
53117: GO 53092
// if weapon in weapons then
53119: LD_VAR 0 8
53123: PUSH
53124: LD_VAR 0 9
53128: IN
53129: IFFALSE 53156
// begin result := [ i , weapon ] ;
53131: LD_ADDR_VAR 0 3
53135: PUSH
53136: LD_VAR 0 4
53140: PUSH
53141: LD_VAR 0 8
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: ST_TO_ADDR
// exit ;
53150: POP
53151: POP
53152: POP
53153: POP
53154: GO 53164
// end ; end ;
53156: GO 53092
53158: POP
53159: POP
// end ;
53160: GO 52978
53162: POP
53163: POP
// end ;
53164: LD_VAR 0 3
53168: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53169: LD_INT 0
53171: PPUSH
// if not side or side > 8 then
53172: LD_VAR 0 3
53176: NOT
53177: PUSH
53178: LD_VAR 0 3
53182: PUSH
53183: LD_INT 8
53185: GREATER
53186: OR
53187: IFFALSE 53191
// exit ;
53189: GO 53250
// if not range then
53191: LD_VAR 0 4
53195: NOT
53196: IFFALSE 53207
// range := - 12 ;
53198: LD_ADDR_VAR 0 4
53202: PUSH
53203: LD_INT 12
53205: NEG
53206: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53207: LD_VAR 0 1
53211: PPUSH
53212: LD_VAR 0 2
53216: PPUSH
53217: LD_VAR 0 3
53221: PPUSH
53222: LD_VAR 0 4
53226: PPUSH
53227: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53231: LD_VAR 0 1
53235: PPUSH
53236: LD_VAR 0 2
53240: PPUSH
53241: LD_VAR 0 3
53245: PPUSH
53246: CALL_OW 331
// end ;
53250: LD_VAR 0 5
53254: RET
// export function Video ( mode ) ; begin
53255: LD_INT 0
53257: PPUSH
// ingame_video = mode ;
53258: LD_ADDR_OWVAR 52
53262: PUSH
53263: LD_VAR 0 1
53267: ST_TO_ADDR
// interface_hidden = mode ;
53268: LD_ADDR_OWVAR 54
53272: PUSH
53273: LD_VAR 0 1
53277: ST_TO_ADDR
// end ;
53278: LD_VAR 0 2
53282: RET
// export function Join ( array , element ) ; begin
53283: LD_INT 0
53285: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53286: LD_ADDR_VAR 0 3
53290: PUSH
53291: LD_VAR 0 1
53295: PPUSH
53296: LD_VAR 0 1
53300: PUSH
53301: LD_INT 1
53303: PLUS
53304: PPUSH
53305: LD_VAR 0 2
53309: PPUSH
53310: CALL_OW 1
53314: ST_TO_ADDR
// end ;
53315: LD_VAR 0 3
53319: RET
// export function JoinUnion ( array , element ) ; begin
53320: LD_INT 0
53322: PPUSH
// result := array union element ;
53323: LD_ADDR_VAR 0 3
53327: PUSH
53328: LD_VAR 0 1
53332: PUSH
53333: LD_VAR 0 2
53337: UNION
53338: ST_TO_ADDR
// end ;
53339: LD_VAR 0 3
53343: RET
// export function GetBehemoths ( side ) ; begin
53344: LD_INT 0
53346: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53347: LD_ADDR_VAR 0 2
53351: PUSH
53352: LD_INT 22
53354: PUSH
53355: LD_VAR 0 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 31
53366: PUSH
53367: LD_INT 25
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PPUSH
53378: CALL_OW 69
53382: ST_TO_ADDR
// end ;
53383: LD_VAR 0 2
53387: RET
// export function Shuffle ( array ) ; var i , index ; begin
53388: LD_INT 0
53390: PPUSH
53391: PPUSH
53392: PPUSH
// result := [ ] ;
53393: LD_ADDR_VAR 0 2
53397: PUSH
53398: EMPTY
53399: ST_TO_ADDR
// if not array then
53400: LD_VAR 0 1
53404: NOT
53405: IFFALSE 53409
// exit ;
53407: GO 53508
// Randomize ;
53409: CALL_OW 10
// for i = array downto 1 do
53413: LD_ADDR_VAR 0 3
53417: PUSH
53418: DOUBLE
53419: LD_VAR 0 1
53423: INC
53424: ST_TO_ADDR
53425: LD_INT 1
53427: PUSH
53428: FOR_DOWNTO
53429: IFFALSE 53506
// begin index := rand ( 1 , array ) ;
53431: LD_ADDR_VAR 0 4
53435: PUSH
53436: LD_INT 1
53438: PPUSH
53439: LD_VAR 0 1
53443: PPUSH
53444: CALL_OW 12
53448: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53449: LD_ADDR_VAR 0 2
53453: PUSH
53454: LD_VAR 0 2
53458: PPUSH
53459: LD_VAR 0 2
53463: PUSH
53464: LD_INT 1
53466: PLUS
53467: PPUSH
53468: LD_VAR 0 1
53472: PUSH
53473: LD_VAR 0 4
53477: ARRAY
53478: PPUSH
53479: CALL_OW 2
53483: ST_TO_ADDR
// array := Delete ( array , index ) ;
53484: LD_ADDR_VAR 0 1
53488: PUSH
53489: LD_VAR 0 1
53493: PPUSH
53494: LD_VAR 0 4
53498: PPUSH
53499: CALL_OW 3
53503: ST_TO_ADDR
// end ;
53504: GO 53428
53506: POP
53507: POP
// end ;
53508: LD_VAR 0 2
53512: RET
// export function GetBaseMaterials ( base ) ; begin
53513: LD_INT 0
53515: PPUSH
// result := [ 0 , 0 , 0 ] ;
53516: LD_ADDR_VAR 0 2
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: ST_TO_ADDR
// if not base then
53535: LD_VAR 0 1
53539: NOT
53540: IFFALSE 53544
// exit ;
53542: GO 53593
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53544: LD_ADDR_VAR 0 2
53548: PUSH
53549: LD_VAR 0 1
53553: PPUSH
53554: LD_INT 1
53556: PPUSH
53557: CALL_OW 275
53561: PUSH
53562: LD_VAR 0 1
53566: PPUSH
53567: LD_INT 2
53569: PPUSH
53570: CALL_OW 275
53574: PUSH
53575: LD_VAR 0 1
53579: PPUSH
53580: LD_INT 3
53582: PPUSH
53583: CALL_OW 275
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: LIST
53592: ST_TO_ADDR
// end ;
53593: LD_VAR 0 2
53597: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53598: LD_INT 0
53600: PPUSH
53601: PPUSH
// result := array ;
53602: LD_ADDR_VAR 0 3
53606: PUSH
53607: LD_VAR 0 1
53611: ST_TO_ADDR
// if size >= result then
53612: LD_VAR 0 2
53616: PUSH
53617: LD_VAR 0 3
53621: GREATEREQUAL
53622: IFFALSE 53626
// exit ;
53624: GO 53676
// if size then
53626: LD_VAR 0 2
53630: IFFALSE 53676
// for i := array downto size do
53632: LD_ADDR_VAR 0 4
53636: PUSH
53637: DOUBLE
53638: LD_VAR 0 1
53642: INC
53643: ST_TO_ADDR
53644: LD_VAR 0 2
53648: PUSH
53649: FOR_DOWNTO
53650: IFFALSE 53674
// result := Delete ( result , result ) ;
53652: LD_ADDR_VAR 0 3
53656: PUSH
53657: LD_VAR 0 3
53661: PPUSH
53662: LD_VAR 0 3
53666: PPUSH
53667: CALL_OW 3
53671: ST_TO_ADDR
53672: GO 53649
53674: POP
53675: POP
// end ;
53676: LD_VAR 0 3
53680: RET
// export function ComExit ( unit ) ; var tmp ; begin
53681: LD_INT 0
53683: PPUSH
53684: PPUSH
// if not IsInUnit ( unit ) then
53685: LD_VAR 0 1
53689: PPUSH
53690: CALL_OW 310
53694: NOT
53695: IFFALSE 53699
// exit ;
53697: GO 53759
// tmp := IsInUnit ( unit ) ;
53699: LD_ADDR_VAR 0 3
53703: PUSH
53704: LD_VAR 0 1
53708: PPUSH
53709: CALL_OW 310
53713: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53714: LD_VAR 0 3
53718: PPUSH
53719: CALL_OW 247
53723: PUSH
53724: LD_INT 2
53726: EQUAL
53727: IFFALSE 53740
// ComExitVehicle ( unit ) else
53729: LD_VAR 0 1
53733: PPUSH
53734: CALL_OW 121
53738: GO 53749
// ComExitBuilding ( unit ) ;
53740: LD_VAR 0 1
53744: PPUSH
53745: CALL_OW 122
// result := tmp ;
53749: LD_ADDR_VAR 0 2
53753: PUSH
53754: LD_VAR 0 3
53758: ST_TO_ADDR
// end ;
53759: LD_VAR 0 2
53763: RET
// export function ComExitAll ( units ) ; var i ; begin
53764: LD_INT 0
53766: PPUSH
53767: PPUSH
// if not units then
53768: LD_VAR 0 1
53772: NOT
53773: IFFALSE 53777
// exit ;
53775: GO 53803
// for i in units do
53777: LD_ADDR_VAR 0 3
53781: PUSH
53782: LD_VAR 0 1
53786: PUSH
53787: FOR_IN
53788: IFFALSE 53801
// ComExit ( i ) ;
53790: LD_VAR 0 3
53794: PPUSH
53795: CALL 53681 0 1
53799: GO 53787
53801: POP
53802: POP
// end ;
53803: LD_VAR 0 2
53807: RET
// export function ResetHc ; begin
53808: LD_INT 0
53810: PPUSH
// InitHc ;
53811: CALL_OW 19
// hc_importance := 0 ;
53815: LD_ADDR_OWVAR 32
53819: PUSH
53820: LD_INT 0
53822: ST_TO_ADDR
// end ;
53823: LD_VAR 0 1
53827: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53828: LD_INT 0
53830: PPUSH
53831: PPUSH
53832: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53833: LD_ADDR_VAR 0 6
53837: PUSH
53838: LD_VAR 0 1
53842: PUSH
53843: LD_VAR 0 3
53847: PLUS
53848: PUSH
53849: LD_INT 2
53851: DIV
53852: ST_TO_ADDR
// if _x < 0 then
53853: LD_VAR 0 6
53857: PUSH
53858: LD_INT 0
53860: LESS
53861: IFFALSE 53878
// _x := _x * - 1 ;
53863: LD_ADDR_VAR 0 6
53867: PUSH
53868: LD_VAR 0 6
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: MUL
53877: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53878: LD_ADDR_VAR 0 7
53882: PUSH
53883: LD_VAR 0 2
53887: PUSH
53888: LD_VAR 0 4
53892: PLUS
53893: PUSH
53894: LD_INT 2
53896: DIV
53897: ST_TO_ADDR
// if _y < 0 then
53898: LD_VAR 0 7
53902: PUSH
53903: LD_INT 0
53905: LESS
53906: IFFALSE 53923
// _y := _y * - 1 ;
53908: LD_ADDR_VAR 0 7
53912: PUSH
53913: LD_VAR 0 7
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: MUL
53922: ST_TO_ADDR
// result := [ _x , _y ] ;
53923: LD_ADDR_VAR 0 5
53927: PUSH
53928: LD_VAR 0 6
53932: PUSH
53933: LD_VAR 0 7
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: ST_TO_ADDR
// end ;
53942: LD_VAR 0 5
53946: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53947: LD_INT 0
53949: PPUSH
53950: PPUSH
53951: PPUSH
53952: PPUSH
// task := GetTaskList ( unit ) ;
53953: LD_ADDR_VAR 0 7
53957: PUSH
53958: LD_VAR 0 1
53962: PPUSH
53963: CALL_OW 437
53967: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53968: LD_VAR 0 7
53972: NOT
53973: PUSH
53974: LD_VAR 0 1
53978: PPUSH
53979: LD_VAR 0 2
53983: PPUSH
53984: CALL_OW 308
53988: NOT
53989: AND
53990: IFFALSE 53994
// exit ;
53992: GO 54112
// if IsInArea ( unit , area ) then
53994: LD_VAR 0 1
53998: PPUSH
53999: LD_VAR 0 2
54003: PPUSH
54004: CALL_OW 308
54008: IFFALSE 54026
// begin ComMoveToArea ( unit , goAway ) ;
54010: LD_VAR 0 1
54014: PPUSH
54015: LD_VAR 0 3
54019: PPUSH
54020: CALL_OW 113
// exit ;
54024: GO 54112
// end ; if task [ 1 ] [ 1 ] <> M then
54026: LD_VAR 0 7
54030: PUSH
54031: LD_INT 1
54033: ARRAY
54034: PUSH
54035: LD_INT 1
54037: ARRAY
54038: PUSH
54039: LD_STRING M
54041: NONEQUAL
54042: IFFALSE 54046
// exit ;
54044: GO 54112
// x := task [ 1 ] [ 2 ] ;
54046: LD_ADDR_VAR 0 5
54050: PUSH
54051: LD_VAR 0 7
54055: PUSH
54056: LD_INT 1
54058: ARRAY
54059: PUSH
54060: LD_INT 2
54062: ARRAY
54063: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54064: LD_ADDR_VAR 0 6
54068: PUSH
54069: LD_VAR 0 7
54073: PUSH
54074: LD_INT 1
54076: ARRAY
54077: PUSH
54078: LD_INT 3
54080: ARRAY
54081: ST_TO_ADDR
// if InArea ( x , y , area ) then
54082: LD_VAR 0 5
54086: PPUSH
54087: LD_VAR 0 6
54091: PPUSH
54092: LD_VAR 0 2
54096: PPUSH
54097: CALL_OW 309
54101: IFFALSE 54112
// ComStop ( unit ) ;
54103: LD_VAR 0 1
54107: PPUSH
54108: CALL_OW 141
// end ;
54112: LD_VAR 0 4
54116: RET
// export function Abs ( value ) ; begin
54117: LD_INT 0
54119: PPUSH
// result := value ;
54120: LD_ADDR_VAR 0 2
54124: PUSH
54125: LD_VAR 0 1
54129: ST_TO_ADDR
// if value < 0 then
54130: LD_VAR 0 1
54134: PUSH
54135: LD_INT 0
54137: LESS
54138: IFFALSE 54155
// result := value * - 1 ;
54140: LD_ADDR_VAR 0 2
54144: PUSH
54145: LD_VAR 0 1
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: MUL
54154: ST_TO_ADDR
// end ;
54155: LD_VAR 0 2
54159: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54160: LD_INT 0
54162: PPUSH
54163: PPUSH
54164: PPUSH
54165: PPUSH
54166: PPUSH
54167: PPUSH
54168: PPUSH
54169: PPUSH
// if not unit or not building then
54170: LD_VAR 0 1
54174: NOT
54175: PUSH
54176: LD_VAR 0 2
54180: NOT
54181: OR
54182: IFFALSE 54186
// exit ;
54184: GO 54412
// x := GetX ( building ) ;
54186: LD_ADDR_VAR 0 4
54190: PUSH
54191: LD_VAR 0 2
54195: PPUSH
54196: CALL_OW 250
54200: ST_TO_ADDR
// y := GetY ( building ) ;
54201: LD_ADDR_VAR 0 6
54205: PUSH
54206: LD_VAR 0 2
54210: PPUSH
54211: CALL_OW 251
54215: ST_TO_ADDR
// d := GetDir ( building ) ;
54216: LD_ADDR_VAR 0 8
54220: PUSH
54221: LD_VAR 0 2
54225: PPUSH
54226: CALL_OW 254
54230: ST_TO_ADDR
// r := 4 ;
54231: LD_ADDR_VAR 0 9
54235: PUSH
54236: LD_INT 4
54238: ST_TO_ADDR
// for i := 1 to 5 do
54239: LD_ADDR_VAR 0 10
54243: PUSH
54244: DOUBLE
54245: LD_INT 1
54247: DEC
54248: ST_TO_ADDR
54249: LD_INT 5
54251: PUSH
54252: FOR_TO
54253: IFFALSE 54410
// begin _x := ShiftX ( x , d , r + i ) ;
54255: LD_ADDR_VAR 0 5
54259: PUSH
54260: LD_VAR 0 4
54264: PPUSH
54265: LD_VAR 0 8
54269: PPUSH
54270: LD_VAR 0 9
54274: PUSH
54275: LD_VAR 0 10
54279: PLUS
54280: PPUSH
54281: CALL_OW 272
54285: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54286: LD_ADDR_VAR 0 7
54290: PUSH
54291: LD_VAR 0 6
54295: PPUSH
54296: LD_VAR 0 8
54300: PPUSH
54301: LD_VAR 0 9
54305: PUSH
54306: LD_VAR 0 10
54310: PLUS
54311: PPUSH
54312: CALL_OW 273
54316: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54317: LD_VAR 0 5
54321: PPUSH
54322: LD_VAR 0 7
54326: PPUSH
54327: CALL_OW 488
54331: PUSH
54332: LD_VAR 0 5
54336: PPUSH
54337: LD_VAR 0 7
54341: PPUSH
54342: CALL_OW 428
54346: PPUSH
54347: CALL_OW 247
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: IN
54362: NOT
54363: AND
54364: IFFALSE 54408
// begin ComMoveXY ( unit , _x , _y ) ;
54366: LD_VAR 0 1
54370: PPUSH
54371: LD_VAR 0 5
54375: PPUSH
54376: LD_VAR 0 7
54380: PPUSH
54381: CALL_OW 111
// result := [ _x , _y ] ;
54385: LD_ADDR_VAR 0 3
54389: PUSH
54390: LD_VAR 0 5
54394: PUSH
54395: LD_VAR 0 7
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: ST_TO_ADDR
// exit ;
54404: POP
54405: POP
54406: GO 54412
// end ; end ;
54408: GO 54252
54410: POP
54411: POP
// end ;
54412: LD_VAR 0 3
54416: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54417: LD_INT 0
54419: PPUSH
54420: PPUSH
54421: PPUSH
// result := 0 ;
54422: LD_ADDR_VAR 0 3
54426: PUSH
54427: LD_INT 0
54429: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54430: LD_VAR 0 1
54434: PUSH
54435: LD_INT 0
54437: LESS
54438: PUSH
54439: LD_VAR 0 1
54443: PUSH
54444: LD_INT 8
54446: GREATER
54447: OR
54448: PUSH
54449: LD_VAR 0 2
54453: PUSH
54454: LD_INT 0
54456: LESS
54457: OR
54458: PUSH
54459: LD_VAR 0 2
54463: PUSH
54464: LD_INT 8
54466: GREATER
54467: OR
54468: IFFALSE 54472
// exit ;
54470: GO 54547
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54472: LD_ADDR_VAR 0 4
54476: PUSH
54477: LD_INT 22
54479: PUSH
54480: LD_VAR 0 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PPUSH
54489: CALL_OW 69
54493: PUSH
54494: FOR_IN
54495: IFFALSE 54545
// begin un := UnitShoot ( i ) ;
54497: LD_ADDR_VAR 0 5
54501: PUSH
54502: LD_VAR 0 4
54506: PPUSH
54507: CALL_OW 504
54511: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54512: LD_VAR 0 5
54516: PPUSH
54517: CALL_OW 255
54521: PUSH
54522: LD_VAR 0 1
54526: EQUAL
54527: IFFALSE 54543
// begin result := un ;
54529: LD_ADDR_VAR 0 3
54533: PUSH
54534: LD_VAR 0 5
54538: ST_TO_ADDR
// exit ;
54539: POP
54540: POP
54541: GO 54547
// end ; end ;
54543: GO 54494
54545: POP
54546: POP
// end ;
54547: LD_VAR 0 3
54551: RET
// export function GetCargoBay ( units ) ; begin
54552: LD_INT 0
54554: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54555: LD_ADDR_VAR 0 2
54559: PUSH
54560: LD_VAR 0 1
54564: PPUSH
54565: LD_INT 2
54567: PUSH
54568: LD_INT 34
54570: PUSH
54571: LD_INT 12
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 34
54580: PUSH
54581: LD_INT 51
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 34
54590: PUSH
54591: LD_INT 32
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 34
54600: PUSH
54601: LD_INT 89
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: PPUSH
54615: CALL_OW 72
54619: ST_TO_ADDR
// end ;
54620: LD_VAR 0 2
54624: RET
// export function Negate ( value ) ; begin
54625: LD_INT 0
54627: PPUSH
// result := not value ;
54628: LD_ADDR_VAR 0 2
54632: PUSH
54633: LD_VAR 0 1
54637: NOT
54638: ST_TO_ADDR
// end ;
54639: LD_VAR 0 2
54643: RET
// export function Inc ( value ) ; begin
54644: LD_INT 0
54646: PPUSH
// result := value + 1 ;
54647: LD_ADDR_VAR 0 2
54651: PUSH
54652: LD_VAR 0 1
54656: PUSH
54657: LD_INT 1
54659: PLUS
54660: ST_TO_ADDR
// end ;
54661: LD_VAR 0 2
54665: RET
// export function Dec ( value ) ; begin
54666: LD_INT 0
54668: PPUSH
// result := value - 1 ;
54669: LD_ADDR_VAR 0 2
54673: PUSH
54674: LD_VAR 0 1
54678: PUSH
54679: LD_INT 1
54681: MINUS
54682: ST_TO_ADDR
// end ;
54683: LD_VAR 0 2
54687: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54688: LD_INT 0
54690: PPUSH
54691: PPUSH
54692: PPUSH
54693: PPUSH
54694: PPUSH
54695: PPUSH
54696: PPUSH
54697: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54698: LD_VAR 0 1
54702: PPUSH
54703: LD_VAR 0 2
54707: PPUSH
54708: CALL_OW 488
54712: NOT
54713: PUSH
54714: LD_VAR 0 3
54718: PPUSH
54719: LD_VAR 0 4
54723: PPUSH
54724: CALL_OW 488
54728: NOT
54729: OR
54730: IFFALSE 54743
// begin result := - 1 ;
54732: LD_ADDR_VAR 0 5
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: ST_TO_ADDR
// exit ;
54741: GO 54978
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54743: LD_ADDR_VAR 0 12
54747: PUSH
54748: LD_VAR 0 1
54752: PPUSH
54753: LD_VAR 0 2
54757: PPUSH
54758: LD_VAR 0 3
54762: PPUSH
54763: LD_VAR 0 4
54767: PPUSH
54768: CALL 53828 0 4
54772: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54773: LD_ADDR_VAR 0 11
54777: PUSH
54778: LD_VAR 0 1
54782: PPUSH
54783: LD_VAR 0 2
54787: PPUSH
54788: LD_VAR 0 12
54792: PUSH
54793: LD_INT 1
54795: ARRAY
54796: PPUSH
54797: LD_VAR 0 12
54801: PUSH
54802: LD_INT 2
54804: ARRAY
54805: PPUSH
54806: CALL_OW 298
54810: ST_TO_ADDR
// distance := 9999 ;
54811: LD_ADDR_VAR 0 10
54815: PUSH
54816: LD_INT 9999
54818: ST_TO_ADDR
// for i := 0 to 5 do
54819: LD_ADDR_VAR 0 6
54823: PUSH
54824: DOUBLE
54825: LD_INT 0
54827: DEC
54828: ST_TO_ADDR
54829: LD_INT 5
54831: PUSH
54832: FOR_TO
54833: IFFALSE 54976
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54835: LD_ADDR_VAR 0 7
54839: PUSH
54840: LD_VAR 0 1
54844: PPUSH
54845: LD_VAR 0 6
54849: PPUSH
54850: LD_VAR 0 11
54854: PPUSH
54855: CALL_OW 272
54859: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54860: LD_ADDR_VAR 0 8
54864: PUSH
54865: LD_VAR 0 2
54869: PPUSH
54870: LD_VAR 0 6
54874: PPUSH
54875: LD_VAR 0 11
54879: PPUSH
54880: CALL_OW 273
54884: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54885: LD_VAR 0 7
54889: PPUSH
54890: LD_VAR 0 8
54894: PPUSH
54895: CALL_OW 488
54899: NOT
54900: IFFALSE 54904
// continue ;
54902: GO 54832
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54904: LD_ADDR_VAR 0 9
54908: PUSH
54909: LD_VAR 0 12
54913: PUSH
54914: LD_INT 1
54916: ARRAY
54917: PPUSH
54918: LD_VAR 0 12
54922: PUSH
54923: LD_INT 2
54925: ARRAY
54926: PPUSH
54927: LD_VAR 0 7
54931: PPUSH
54932: LD_VAR 0 8
54936: PPUSH
54937: CALL_OW 298
54941: ST_TO_ADDR
// if tmp < distance then
54942: LD_VAR 0 9
54946: PUSH
54947: LD_VAR 0 10
54951: LESS
54952: IFFALSE 54974
// begin result := i ;
54954: LD_ADDR_VAR 0 5
54958: PUSH
54959: LD_VAR 0 6
54963: ST_TO_ADDR
// distance := tmp ;
54964: LD_ADDR_VAR 0 10
54968: PUSH
54969: LD_VAR 0 9
54973: ST_TO_ADDR
// end ; end ;
54974: GO 54832
54976: POP
54977: POP
// end ;
54978: LD_VAR 0 5
54982: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54983: LD_INT 0
54985: PPUSH
54986: PPUSH
// if not driver or not IsInUnit ( driver ) then
54987: LD_VAR 0 1
54991: NOT
54992: PUSH
54993: LD_VAR 0 1
54997: PPUSH
54998: CALL_OW 310
55002: NOT
55003: OR
55004: IFFALSE 55008
// exit ;
55006: GO 55098
// vehicle := IsInUnit ( driver ) ;
55008: LD_ADDR_VAR 0 3
55012: PUSH
55013: LD_VAR 0 1
55017: PPUSH
55018: CALL_OW 310
55022: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55023: LD_VAR 0 1
55027: PPUSH
55028: LD_STRING \
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: PUSH
55058: LD_STRING E
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_VAR 0 3
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PPUSH
55094: CALL_OW 446
// end ;
55098: LD_VAR 0 2
55102: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55103: LD_INT 0
55105: PPUSH
55106: PPUSH
// if not driver or not IsInUnit ( driver ) then
55107: LD_VAR 0 1
55111: NOT
55112: PUSH
55113: LD_VAR 0 1
55117: PPUSH
55118: CALL_OW 310
55122: NOT
55123: OR
55124: IFFALSE 55128
// exit ;
55126: GO 55218
// vehicle := IsInUnit ( driver ) ;
55128: LD_ADDR_VAR 0 3
55132: PUSH
55133: LD_VAR 0 1
55137: PPUSH
55138: CALL_OW 310
55142: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55143: LD_VAR 0 1
55147: PPUSH
55148: LD_STRING \
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: PUSH
55178: LD_STRING E
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_VAR 0 3
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PPUSH
55214: CALL_OW 447
// end ;
55218: LD_VAR 0 2
55222: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55223: LD_INT 0
55225: PPUSH
55226: PPUSH
55227: PPUSH
// tmp := [ ] ;
55228: LD_ADDR_VAR 0 5
55232: PUSH
55233: EMPTY
55234: ST_TO_ADDR
// for i in units do
55235: LD_ADDR_VAR 0 4
55239: PUSH
55240: LD_VAR 0 1
55244: PUSH
55245: FOR_IN
55246: IFFALSE 55284
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55248: LD_ADDR_VAR 0 5
55252: PUSH
55253: LD_VAR 0 5
55257: PPUSH
55258: LD_VAR 0 5
55262: PUSH
55263: LD_INT 1
55265: PLUS
55266: PPUSH
55267: LD_VAR 0 4
55271: PPUSH
55272: CALL_OW 256
55276: PPUSH
55277: CALL_OW 2
55281: ST_TO_ADDR
55282: GO 55245
55284: POP
55285: POP
// if not tmp then
55286: LD_VAR 0 5
55290: NOT
55291: IFFALSE 55295
// exit ;
55293: GO 55343
// if asc then
55295: LD_VAR 0 2
55299: IFFALSE 55323
// result := SortListByListAsc ( units , tmp ) else
55301: LD_ADDR_VAR 0 3
55305: PUSH
55306: LD_VAR 0 1
55310: PPUSH
55311: LD_VAR 0 5
55315: PPUSH
55316: CALL_OW 76
55320: ST_TO_ADDR
55321: GO 55343
// result := SortListByListDesc ( units , tmp ) ;
55323: LD_ADDR_VAR 0 3
55327: PUSH
55328: LD_VAR 0 1
55332: PPUSH
55333: LD_VAR 0 5
55337: PPUSH
55338: CALL_OW 77
55342: ST_TO_ADDR
// end ;
55343: LD_VAR 0 3
55347: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55348: LD_INT 0
55350: PPUSH
55351: PPUSH
// task := GetTaskList ( mech ) ;
55352: LD_ADDR_VAR 0 4
55356: PUSH
55357: LD_VAR 0 1
55361: PPUSH
55362: CALL_OW 437
55366: ST_TO_ADDR
// if not task then
55367: LD_VAR 0 4
55371: NOT
55372: IFFALSE 55376
// exit ;
55374: GO 55418
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55376: LD_ADDR_VAR 0 3
55380: PUSH
55381: LD_VAR 0 4
55385: PUSH
55386: LD_INT 1
55388: ARRAY
55389: PUSH
55390: LD_INT 1
55392: ARRAY
55393: PUSH
55394: LD_STRING r
55396: EQUAL
55397: PUSH
55398: LD_VAR 0 4
55402: PUSH
55403: LD_INT 1
55405: ARRAY
55406: PUSH
55407: LD_INT 4
55409: ARRAY
55410: PUSH
55411: LD_VAR 0 2
55415: EQUAL
55416: AND
55417: ST_TO_ADDR
// end ;
55418: LD_VAR 0 3
55422: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55423: LD_INT 0
55425: PPUSH
// SetDir ( unit , d ) ;
55426: LD_VAR 0 1
55430: PPUSH
55431: LD_VAR 0 4
55435: PPUSH
55436: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
55440: LD_ADDR_VAR 0 6
55444: PUSH
55445: LD_VAR 0 1
55449: PPUSH
55450: LD_VAR 0 2
55454: PPUSH
55455: LD_VAR 0 3
55459: PPUSH
55460: LD_VAR 0 5
55464: PPUSH
55465: CALL_OW 48
55469: ST_TO_ADDR
// end ;
55470: LD_VAR 0 6
55474: RET
// export function ToNaturalNumber ( number ) ; begin
55475: LD_INT 0
55477: PPUSH
// result := number div 1 ;
55478: LD_ADDR_VAR 0 2
55482: PUSH
55483: LD_VAR 0 1
55487: PUSH
55488: LD_INT 1
55490: DIV
55491: ST_TO_ADDR
// if number < 0 then
55492: LD_VAR 0 1
55496: PUSH
55497: LD_INT 0
55499: LESS
55500: IFFALSE 55510
// result := 0 ;
55502: LD_ADDR_VAR 0 2
55506: PUSH
55507: LD_INT 0
55509: ST_TO_ADDR
// end ;
55510: LD_VAR 0 2
55514: RET
// export function SortByClass ( units , class ) ; var un ; begin
55515: LD_INT 0
55517: PPUSH
55518: PPUSH
// if not units or not class then
55519: LD_VAR 0 1
55523: NOT
55524: PUSH
55525: LD_VAR 0 2
55529: NOT
55530: OR
55531: IFFALSE 55535
// exit ;
55533: GO 55630
// result := [ ] ;
55535: LD_ADDR_VAR 0 3
55539: PUSH
55540: EMPTY
55541: ST_TO_ADDR
// for un in units do
55542: LD_ADDR_VAR 0 4
55546: PUSH
55547: LD_VAR 0 1
55551: PUSH
55552: FOR_IN
55553: IFFALSE 55628
// if GetClass ( un ) = class then
55555: LD_VAR 0 4
55559: PPUSH
55560: CALL_OW 257
55564: PUSH
55565: LD_VAR 0 2
55569: EQUAL
55570: IFFALSE 55597
// result := Insert ( result , 1 , un ) else
55572: LD_ADDR_VAR 0 3
55576: PUSH
55577: LD_VAR 0 3
55581: PPUSH
55582: LD_INT 1
55584: PPUSH
55585: LD_VAR 0 4
55589: PPUSH
55590: CALL_OW 2
55594: ST_TO_ADDR
55595: GO 55626
// result := Replace ( result , result + 1 , un ) ;
55597: LD_ADDR_VAR 0 3
55601: PUSH
55602: LD_VAR 0 3
55606: PPUSH
55607: LD_VAR 0 3
55611: PUSH
55612: LD_INT 1
55614: PLUS
55615: PPUSH
55616: LD_VAR 0 4
55620: PPUSH
55621: CALL_OW 1
55625: ST_TO_ADDR
55626: GO 55552
55628: POP
55629: POP
// end ;
55630: LD_VAR 0 3
55634: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55635: LD_INT 0
55637: PPUSH
55638: PPUSH
55639: PPUSH
55640: PPUSH
55641: PPUSH
55642: PPUSH
55643: PPUSH
// result := [ ] ;
55644: LD_ADDR_VAR 0 4
55648: PUSH
55649: EMPTY
55650: ST_TO_ADDR
// if x - r < 0 then
55651: LD_VAR 0 1
55655: PUSH
55656: LD_VAR 0 3
55660: MINUS
55661: PUSH
55662: LD_INT 0
55664: LESS
55665: IFFALSE 55677
// min_x := 0 else
55667: LD_ADDR_VAR 0 8
55671: PUSH
55672: LD_INT 0
55674: ST_TO_ADDR
55675: GO 55693
// min_x := x - r ;
55677: LD_ADDR_VAR 0 8
55681: PUSH
55682: LD_VAR 0 1
55686: PUSH
55687: LD_VAR 0 3
55691: MINUS
55692: ST_TO_ADDR
// if y - r < 0 then
55693: LD_VAR 0 2
55697: PUSH
55698: LD_VAR 0 3
55702: MINUS
55703: PUSH
55704: LD_INT 0
55706: LESS
55707: IFFALSE 55719
// min_y := 0 else
55709: LD_ADDR_VAR 0 7
55713: PUSH
55714: LD_INT 0
55716: ST_TO_ADDR
55717: GO 55735
// min_y := y - r ;
55719: LD_ADDR_VAR 0 7
55723: PUSH
55724: LD_VAR 0 2
55728: PUSH
55729: LD_VAR 0 3
55733: MINUS
55734: ST_TO_ADDR
// max_x := x + r ;
55735: LD_ADDR_VAR 0 9
55739: PUSH
55740: LD_VAR 0 1
55744: PUSH
55745: LD_VAR 0 3
55749: PLUS
55750: ST_TO_ADDR
// max_y := y + r ;
55751: LD_ADDR_VAR 0 10
55755: PUSH
55756: LD_VAR 0 2
55760: PUSH
55761: LD_VAR 0 3
55765: PLUS
55766: ST_TO_ADDR
// for _x = min_x to max_x do
55767: LD_ADDR_VAR 0 5
55771: PUSH
55772: DOUBLE
55773: LD_VAR 0 8
55777: DEC
55778: ST_TO_ADDR
55779: LD_VAR 0 9
55783: PUSH
55784: FOR_TO
55785: IFFALSE 55886
// for _y = min_y to max_y do
55787: LD_ADDR_VAR 0 6
55791: PUSH
55792: DOUBLE
55793: LD_VAR 0 7
55797: DEC
55798: ST_TO_ADDR
55799: LD_VAR 0 10
55803: PUSH
55804: FOR_TO
55805: IFFALSE 55882
// begin if not ValidHex ( _x , _y ) then
55807: LD_VAR 0 5
55811: PPUSH
55812: LD_VAR 0 6
55816: PPUSH
55817: CALL_OW 488
55821: NOT
55822: IFFALSE 55826
// continue ;
55824: GO 55804
// if GetResourceTypeXY ( _x , _y ) then
55826: LD_VAR 0 5
55830: PPUSH
55831: LD_VAR 0 6
55835: PPUSH
55836: CALL_OW 283
55840: IFFALSE 55880
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55842: LD_ADDR_VAR 0 4
55846: PUSH
55847: LD_VAR 0 4
55851: PPUSH
55852: LD_VAR 0 4
55856: PUSH
55857: LD_INT 1
55859: PLUS
55860: PPUSH
55861: LD_VAR 0 5
55865: PUSH
55866: LD_VAR 0 6
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PPUSH
55875: CALL_OW 1
55879: ST_TO_ADDR
// end ;
55880: GO 55804
55882: POP
55883: POP
55884: GO 55784
55886: POP
55887: POP
// end ;
55888: LD_VAR 0 4
55892: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55893: LD_INT 0
55895: PPUSH
55896: PPUSH
55897: PPUSH
55898: PPUSH
55899: PPUSH
55900: PPUSH
55901: PPUSH
55902: PPUSH
// if not units then
55903: LD_VAR 0 1
55907: NOT
55908: IFFALSE 55912
// exit ;
55910: GO 56440
// result := UnitFilter ( units , [ f_ok ] ) ;
55912: LD_ADDR_VAR 0 3
55916: PUSH
55917: LD_VAR 0 1
55921: PPUSH
55922: LD_INT 50
55924: PUSH
55925: EMPTY
55926: LIST
55927: PPUSH
55928: CALL_OW 72
55932: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55933: LD_ADDR_VAR 0 8
55937: PUSH
55938: LD_VAR 0 1
55942: PUSH
55943: LD_INT 1
55945: ARRAY
55946: PPUSH
55947: CALL_OW 255
55951: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55952: LD_ADDR_VAR 0 10
55956: PUSH
55957: LD_INT 29
55959: PUSH
55960: LD_INT 91
55962: PUSH
55963: LD_INT 49
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: ST_TO_ADDR
// if not result then
55971: LD_VAR 0 3
55975: NOT
55976: IFFALSE 55980
// exit ;
55978: GO 56440
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55980: LD_ADDR_VAR 0 5
55984: PUSH
55985: LD_INT 81
55987: PUSH
55988: LD_VAR 0 8
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PPUSH
55997: CALL_OW 69
56001: ST_TO_ADDR
// for i in result do
56002: LD_ADDR_VAR 0 4
56006: PUSH
56007: LD_VAR 0 3
56011: PUSH
56012: FOR_IN
56013: IFFALSE 56438
// begin tag := GetTag ( i ) + 1 ;
56015: LD_ADDR_VAR 0 9
56019: PUSH
56020: LD_VAR 0 4
56024: PPUSH
56025: CALL_OW 110
56029: PUSH
56030: LD_INT 1
56032: PLUS
56033: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56034: LD_ADDR_VAR 0 7
56038: PUSH
56039: LD_VAR 0 4
56043: PPUSH
56044: CALL_OW 250
56048: PPUSH
56049: LD_VAR 0 4
56053: PPUSH
56054: CALL_OW 251
56058: PPUSH
56059: LD_INT 4
56061: PPUSH
56062: CALL 55635 0 3
56066: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56067: LD_VAR 0 4
56071: PPUSH
56072: CALL_OW 247
56076: PUSH
56077: LD_INT 2
56079: EQUAL
56080: PUSH
56081: LD_VAR 0 7
56085: PUSH
56086: LD_INT 2
56088: GREATER
56089: AND
56090: PUSH
56091: LD_VAR 0 4
56095: PPUSH
56096: CALL_OW 264
56100: PUSH
56101: LD_VAR 0 10
56105: IN
56106: NOT
56107: AND
56108: IFFALSE 56147
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56110: LD_VAR 0 4
56114: PPUSH
56115: LD_VAR 0 7
56119: PUSH
56120: LD_INT 1
56122: ARRAY
56123: PUSH
56124: LD_INT 1
56126: ARRAY
56127: PPUSH
56128: LD_VAR 0 7
56132: PUSH
56133: LD_INT 1
56135: ARRAY
56136: PUSH
56137: LD_INT 2
56139: ARRAY
56140: PPUSH
56141: CALL_OW 116
56145: GO 56436
// if path > tag then
56147: LD_VAR 0 2
56151: PUSH
56152: LD_VAR 0 9
56156: GREATER
56157: IFFALSE 56365
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56159: LD_ADDR_VAR 0 6
56163: PUSH
56164: LD_VAR 0 5
56168: PPUSH
56169: LD_INT 91
56171: PUSH
56172: LD_VAR 0 4
56176: PUSH
56177: LD_INT 8
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: LIST
56184: PPUSH
56185: CALL_OW 72
56189: ST_TO_ADDR
// if nearEnemy then
56190: LD_VAR 0 6
56194: IFFALSE 56263
// begin if GetWeapon ( i ) = ru_time_lapser then
56196: LD_VAR 0 4
56200: PPUSH
56201: CALL_OW 264
56205: PUSH
56206: LD_INT 49
56208: EQUAL
56209: IFFALSE 56237
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56211: LD_VAR 0 4
56215: PPUSH
56216: LD_VAR 0 6
56220: PPUSH
56221: LD_VAR 0 4
56225: PPUSH
56226: CALL_OW 74
56230: PPUSH
56231: CALL_OW 112
56235: GO 56261
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56237: LD_VAR 0 4
56241: PPUSH
56242: LD_VAR 0 6
56246: PPUSH
56247: LD_VAR 0 4
56251: PPUSH
56252: CALL_OW 74
56256: PPUSH
56257: CALL 57511 0 2
// end else
56261: GO 56363
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56263: LD_VAR 0 4
56267: PPUSH
56268: LD_VAR 0 2
56272: PUSH
56273: LD_VAR 0 9
56277: ARRAY
56278: PUSH
56279: LD_INT 1
56281: ARRAY
56282: PPUSH
56283: LD_VAR 0 2
56287: PUSH
56288: LD_VAR 0 9
56292: ARRAY
56293: PUSH
56294: LD_INT 2
56296: ARRAY
56297: PPUSH
56298: CALL_OW 297
56302: PUSH
56303: LD_INT 6
56305: GREATER
56306: IFFALSE 56349
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56308: LD_VAR 0 4
56312: PPUSH
56313: LD_VAR 0 2
56317: PUSH
56318: LD_VAR 0 9
56322: ARRAY
56323: PUSH
56324: LD_INT 1
56326: ARRAY
56327: PPUSH
56328: LD_VAR 0 2
56332: PUSH
56333: LD_VAR 0 9
56337: ARRAY
56338: PUSH
56339: LD_INT 2
56341: ARRAY
56342: PPUSH
56343: CALL_OW 114
56347: GO 56363
// SetTag ( i , tag ) ;
56349: LD_VAR 0 4
56353: PPUSH
56354: LD_VAR 0 9
56358: PPUSH
56359: CALL_OW 109
// end else
56363: GO 56436
// if enemy then
56365: LD_VAR 0 5
56369: IFFALSE 56436
// begin if GetWeapon ( i ) = ru_time_lapser then
56371: LD_VAR 0 4
56375: PPUSH
56376: CALL_OW 264
56380: PUSH
56381: LD_INT 49
56383: EQUAL
56384: IFFALSE 56412
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56386: LD_VAR 0 4
56390: PPUSH
56391: LD_VAR 0 5
56395: PPUSH
56396: LD_VAR 0 4
56400: PPUSH
56401: CALL_OW 74
56405: PPUSH
56406: CALL_OW 112
56410: GO 56436
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56412: LD_VAR 0 4
56416: PPUSH
56417: LD_VAR 0 5
56421: PPUSH
56422: LD_VAR 0 4
56426: PPUSH
56427: CALL_OW 74
56431: PPUSH
56432: CALL 57511 0 2
// end ; end ;
56436: GO 56012
56438: POP
56439: POP
// end ;
56440: LD_VAR 0 3
56444: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56445: LD_INT 0
56447: PPUSH
56448: PPUSH
56449: PPUSH
// if not unit or IsInUnit ( unit ) then
56450: LD_VAR 0 1
56454: NOT
56455: PUSH
56456: LD_VAR 0 1
56460: PPUSH
56461: CALL_OW 310
56465: OR
56466: IFFALSE 56470
// exit ;
56468: GO 56561
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56470: LD_ADDR_VAR 0 4
56474: PUSH
56475: LD_VAR 0 1
56479: PPUSH
56480: CALL_OW 250
56484: PPUSH
56485: LD_VAR 0 2
56489: PPUSH
56490: LD_INT 1
56492: PPUSH
56493: CALL_OW 272
56497: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56498: LD_ADDR_VAR 0 5
56502: PUSH
56503: LD_VAR 0 1
56507: PPUSH
56508: CALL_OW 251
56512: PPUSH
56513: LD_VAR 0 2
56517: PPUSH
56518: LD_INT 1
56520: PPUSH
56521: CALL_OW 273
56525: ST_TO_ADDR
// if ValidHex ( x , y ) then
56526: LD_VAR 0 4
56530: PPUSH
56531: LD_VAR 0 5
56535: PPUSH
56536: CALL_OW 488
56540: IFFALSE 56561
// ComTurnXY ( unit , x , y ) ;
56542: LD_VAR 0 1
56546: PPUSH
56547: LD_VAR 0 4
56551: PPUSH
56552: LD_VAR 0 5
56556: PPUSH
56557: CALL_OW 118
// end ;
56561: LD_VAR 0 3
56565: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56566: LD_INT 0
56568: PPUSH
56569: PPUSH
// result := false ;
56570: LD_ADDR_VAR 0 3
56574: PUSH
56575: LD_INT 0
56577: ST_TO_ADDR
// if not units then
56578: LD_VAR 0 2
56582: NOT
56583: IFFALSE 56587
// exit ;
56585: GO 56632
// for i in units do
56587: LD_ADDR_VAR 0 4
56591: PUSH
56592: LD_VAR 0 2
56596: PUSH
56597: FOR_IN
56598: IFFALSE 56630
// if See ( side , i ) then
56600: LD_VAR 0 1
56604: PPUSH
56605: LD_VAR 0 4
56609: PPUSH
56610: CALL_OW 292
56614: IFFALSE 56628
// begin result := true ;
56616: LD_ADDR_VAR 0 3
56620: PUSH
56621: LD_INT 1
56623: ST_TO_ADDR
// exit ;
56624: POP
56625: POP
56626: GO 56632
// end ;
56628: GO 56597
56630: POP
56631: POP
// end ;
56632: LD_VAR 0 3
56636: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56637: LD_INT 0
56639: PPUSH
56640: PPUSH
56641: PPUSH
56642: PPUSH
// if not unit or not points then
56643: LD_VAR 0 1
56647: NOT
56648: PUSH
56649: LD_VAR 0 2
56653: NOT
56654: OR
56655: IFFALSE 56659
// exit ;
56657: GO 56749
// dist := 99999 ;
56659: LD_ADDR_VAR 0 5
56663: PUSH
56664: LD_INT 99999
56666: ST_TO_ADDR
// for i in points do
56667: LD_ADDR_VAR 0 4
56671: PUSH
56672: LD_VAR 0 2
56676: PUSH
56677: FOR_IN
56678: IFFALSE 56747
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56680: LD_ADDR_VAR 0 6
56684: PUSH
56685: LD_VAR 0 1
56689: PPUSH
56690: LD_VAR 0 4
56694: PUSH
56695: LD_INT 1
56697: ARRAY
56698: PPUSH
56699: LD_VAR 0 4
56703: PUSH
56704: LD_INT 2
56706: ARRAY
56707: PPUSH
56708: CALL_OW 297
56712: ST_TO_ADDR
// if tmpDist < dist then
56713: LD_VAR 0 6
56717: PUSH
56718: LD_VAR 0 5
56722: LESS
56723: IFFALSE 56745
// begin result := i ;
56725: LD_ADDR_VAR 0 3
56729: PUSH
56730: LD_VAR 0 4
56734: ST_TO_ADDR
// dist := tmpDist ;
56735: LD_ADDR_VAR 0 5
56739: PUSH
56740: LD_VAR 0 6
56744: ST_TO_ADDR
// end ; end ;
56745: GO 56677
56747: POP
56748: POP
// end ;
56749: LD_VAR 0 3
56753: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56754: LD_INT 0
56756: PPUSH
// uc_side := side ;
56757: LD_ADDR_OWVAR 20
56761: PUSH
56762: LD_VAR 0 1
56766: ST_TO_ADDR
// uc_nation := 3 ;
56767: LD_ADDR_OWVAR 21
56771: PUSH
56772: LD_INT 3
56774: ST_TO_ADDR
// vc_chassis := 25 ;
56775: LD_ADDR_OWVAR 37
56779: PUSH
56780: LD_INT 25
56782: ST_TO_ADDR
// vc_engine := engine_siberite ;
56783: LD_ADDR_OWVAR 39
56787: PUSH
56788: LD_INT 3
56790: ST_TO_ADDR
// vc_control := control_computer ;
56791: LD_ADDR_OWVAR 38
56795: PUSH
56796: LD_INT 3
56798: ST_TO_ADDR
// vc_weapon := 59 ;
56799: LD_ADDR_OWVAR 40
56803: PUSH
56804: LD_INT 59
56806: ST_TO_ADDR
// result := CreateVehicle ;
56807: LD_ADDR_VAR 0 5
56811: PUSH
56812: CALL_OW 45
56816: ST_TO_ADDR
// SetDir ( result , d ) ;
56817: LD_VAR 0 5
56821: PPUSH
56822: LD_VAR 0 4
56826: PPUSH
56827: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56831: LD_VAR 0 5
56835: PPUSH
56836: LD_VAR 0 2
56840: PPUSH
56841: LD_VAR 0 3
56845: PPUSH
56846: LD_INT 0
56848: PPUSH
56849: CALL_OW 48
// end ;
56853: LD_VAR 0 5
56857: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56858: LD_INT 0
56860: PPUSH
56861: PPUSH
56862: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56863: LD_ADDR_VAR 0 2
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56886: LD_VAR 0 1
56890: NOT
56891: PUSH
56892: LD_VAR 0 1
56896: PPUSH
56897: CALL_OW 264
56901: PUSH
56902: LD_INT 12
56904: PUSH
56905: LD_INT 51
56907: PUSH
56908: LD_INT 32
56910: PUSH
56911: LD_INT 89
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: IN
56920: NOT
56921: OR
56922: IFFALSE 56926
// exit ;
56924: GO 57024
// for i := 1 to 3 do
56926: LD_ADDR_VAR 0 3
56930: PUSH
56931: DOUBLE
56932: LD_INT 1
56934: DEC
56935: ST_TO_ADDR
56936: LD_INT 3
56938: PUSH
56939: FOR_TO
56940: IFFALSE 57022
// begin tmp := GetCargo ( cargo , i ) ;
56942: LD_ADDR_VAR 0 4
56946: PUSH
56947: LD_VAR 0 1
56951: PPUSH
56952: LD_VAR 0 3
56956: PPUSH
56957: CALL_OW 289
56961: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56962: LD_ADDR_VAR 0 2
56966: PUSH
56967: LD_VAR 0 2
56971: PPUSH
56972: LD_VAR 0 3
56976: PPUSH
56977: LD_VAR 0 4
56981: PPUSH
56982: CALL_OW 1
56986: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56987: LD_ADDR_VAR 0 2
56991: PUSH
56992: LD_VAR 0 2
56996: PPUSH
56997: LD_INT 4
56999: PPUSH
57000: LD_VAR 0 2
57004: PUSH
57005: LD_INT 4
57007: ARRAY
57008: PUSH
57009: LD_VAR 0 4
57013: PLUS
57014: PPUSH
57015: CALL_OW 1
57019: ST_TO_ADDR
// end ;
57020: GO 56939
57022: POP
57023: POP
// end ;
57024: LD_VAR 0 2
57028: RET
// export function Length ( array ) ; begin
57029: LD_INT 0
57031: PPUSH
// result := array + 0 ;
57032: LD_ADDR_VAR 0 2
57036: PUSH
57037: LD_VAR 0 1
57041: PUSH
57042: LD_INT 0
57044: PLUS
57045: ST_TO_ADDR
// end ;
57046: LD_VAR 0 2
57050: RET
// export function PrepareArray ( array ) ; begin
57051: LD_INT 0
57053: PPUSH
// result := array diff 0 ;
57054: LD_ADDR_VAR 0 2
57058: PUSH
57059: LD_VAR 0 1
57063: PUSH
57064: LD_INT 0
57066: DIFF
57067: ST_TO_ADDR
// if not result [ 1 ] then
57068: LD_VAR 0 2
57072: PUSH
57073: LD_INT 1
57075: ARRAY
57076: NOT
57077: IFFALSE 57097
// result := Delete ( result , 1 ) ;
57079: LD_ADDR_VAR 0 2
57083: PUSH
57084: LD_VAR 0 2
57088: PPUSH
57089: LD_INT 1
57091: PPUSH
57092: CALL_OW 3
57096: ST_TO_ADDR
// end ;
57097: LD_VAR 0 2
57101: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57102: LD_INT 0
57104: PPUSH
57105: PPUSH
57106: PPUSH
57107: PPUSH
// sibRocketRange := 25 ;
57108: LD_ADDR_VAR 0 6
57112: PUSH
57113: LD_INT 25
57115: ST_TO_ADDR
// result := false ;
57116: LD_ADDR_VAR 0 4
57120: PUSH
57121: LD_INT 0
57123: ST_TO_ADDR
// for i := 0 to 5 do
57124: LD_ADDR_VAR 0 5
57128: PUSH
57129: DOUBLE
57130: LD_INT 0
57132: DEC
57133: ST_TO_ADDR
57134: LD_INT 5
57136: PUSH
57137: FOR_TO
57138: IFFALSE 57205
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57140: LD_VAR 0 1
57144: PPUSH
57145: LD_VAR 0 5
57149: PPUSH
57150: LD_VAR 0 6
57154: PPUSH
57155: CALL_OW 272
57159: PPUSH
57160: LD_VAR 0 2
57164: PPUSH
57165: LD_VAR 0 5
57169: PPUSH
57170: LD_VAR 0 6
57174: PPUSH
57175: CALL_OW 273
57179: PPUSH
57180: LD_VAR 0 3
57184: PPUSH
57185: CALL_OW 309
57189: IFFALSE 57203
// begin result := true ;
57191: LD_ADDR_VAR 0 4
57195: PUSH
57196: LD_INT 1
57198: ST_TO_ADDR
// exit ;
57199: POP
57200: POP
57201: GO 57207
// end ;
57203: GO 57137
57205: POP
57206: POP
// end ;
57207: LD_VAR 0 4
57211: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57212: LD_INT 0
57214: PPUSH
57215: PPUSH
57216: PPUSH
// if btype = b_depot then
57217: LD_VAR 0 2
57221: PUSH
57222: LD_INT 0
57224: EQUAL
57225: IFFALSE 57237
// begin result := true ;
57227: LD_ADDR_VAR 0 3
57231: PUSH
57232: LD_INT 1
57234: ST_TO_ADDR
// exit ;
57235: GO 57353
// end ; pom := GetBase ( depot ) ;
57237: LD_ADDR_VAR 0 4
57241: PUSH
57242: LD_VAR 0 1
57246: PPUSH
57247: CALL_OW 274
57251: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57252: LD_ADDR_VAR 0 5
57256: PUSH
57257: LD_VAR 0 2
57261: PPUSH
57262: LD_VAR 0 1
57266: PPUSH
57267: CALL_OW 248
57271: PPUSH
57272: CALL_OW 450
57276: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57277: LD_ADDR_VAR 0 3
57281: PUSH
57282: LD_VAR 0 4
57286: PPUSH
57287: LD_INT 1
57289: PPUSH
57290: CALL_OW 275
57294: PUSH
57295: LD_VAR 0 5
57299: PUSH
57300: LD_INT 1
57302: ARRAY
57303: GREATEREQUAL
57304: PUSH
57305: LD_VAR 0 4
57309: PPUSH
57310: LD_INT 2
57312: PPUSH
57313: CALL_OW 275
57317: PUSH
57318: LD_VAR 0 5
57322: PUSH
57323: LD_INT 2
57325: ARRAY
57326: GREATEREQUAL
57327: AND
57328: PUSH
57329: LD_VAR 0 4
57333: PPUSH
57334: LD_INT 3
57336: PPUSH
57337: CALL_OW 275
57341: PUSH
57342: LD_VAR 0 5
57346: PUSH
57347: LD_INT 3
57349: ARRAY
57350: GREATEREQUAL
57351: AND
57352: ST_TO_ADDR
// end ;
57353: LD_VAR 0 3
57357: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57358: LD_INT 0
57360: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57361: LD_VAR 0 1
57365: PPUSH
57366: LD_VAR 0 2
57370: PPUSH
57371: LD_INT 0
57373: PPUSH
57374: LD_INT 0
57376: PPUSH
57377: LD_INT 1
57379: PPUSH
57380: LD_INT 0
57382: PPUSH
57383: CALL_OW 587
// end ;
57387: LD_VAR 0 3
57391: RET
// export function CenterOnNow ( unit ) ; begin
57392: LD_INT 0
57394: PPUSH
// result := IsInUnit ( unit ) ;
57395: LD_ADDR_VAR 0 2
57399: PUSH
57400: LD_VAR 0 1
57404: PPUSH
57405: CALL_OW 310
57409: ST_TO_ADDR
// if not result then
57410: LD_VAR 0 2
57414: NOT
57415: IFFALSE 57427
// result := unit ;
57417: LD_ADDR_VAR 0 2
57421: PUSH
57422: LD_VAR 0 1
57426: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57427: LD_VAR 0 1
57431: PPUSH
57432: CALL_OW 87
// end ;
57436: LD_VAR 0 2
57440: RET
// export function ComMoveHex ( unit , hex ) ; begin
57441: LD_INT 0
57443: PPUSH
// if not hex then
57444: LD_VAR 0 2
57448: NOT
57449: IFFALSE 57453
// exit ;
57451: GO 57506
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57453: LD_VAR 0 2
57457: PUSH
57458: LD_INT 1
57460: ARRAY
57461: PPUSH
57462: LD_VAR 0 2
57466: PUSH
57467: LD_INT 2
57469: ARRAY
57470: PPUSH
57471: CALL_OW 428
57475: IFFALSE 57479
// exit ;
57477: GO 57506
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57479: LD_VAR 0 1
57483: PPUSH
57484: LD_VAR 0 2
57488: PUSH
57489: LD_INT 1
57491: ARRAY
57492: PPUSH
57493: LD_VAR 0 2
57497: PUSH
57498: LD_INT 2
57500: ARRAY
57501: PPUSH
57502: CALL_OW 111
// end ;
57506: LD_VAR 0 3
57510: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57511: LD_INT 0
57513: PPUSH
57514: PPUSH
57515: PPUSH
// if not unit or not enemy then
57516: LD_VAR 0 1
57520: NOT
57521: PUSH
57522: LD_VAR 0 2
57526: NOT
57527: OR
57528: IFFALSE 57532
// exit ;
57530: GO 57656
// x := GetX ( enemy ) ;
57532: LD_ADDR_VAR 0 4
57536: PUSH
57537: LD_VAR 0 2
57541: PPUSH
57542: CALL_OW 250
57546: ST_TO_ADDR
// y := GetY ( enemy ) ;
57547: LD_ADDR_VAR 0 5
57551: PUSH
57552: LD_VAR 0 2
57556: PPUSH
57557: CALL_OW 251
57561: ST_TO_ADDR
// if ValidHex ( x , y ) then
57562: LD_VAR 0 4
57566: PPUSH
57567: LD_VAR 0 5
57571: PPUSH
57572: CALL_OW 488
57576: IFFALSE 57656
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57578: LD_VAR 0 2
57582: PPUSH
57583: CALL_OW 247
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: IN
57598: PUSH
57599: LD_VAR 0 1
57603: PPUSH
57604: CALL_OW 255
57608: PPUSH
57609: LD_VAR 0 2
57613: PPUSH
57614: CALL_OW 292
57618: OR
57619: IFFALSE 57637
// ComAttackUnit ( unit , enemy ) else
57621: LD_VAR 0 1
57625: PPUSH
57626: LD_VAR 0 2
57630: PPUSH
57631: CALL_OW 115
57635: GO 57656
// ComAgressiveMove ( unit , x , y ) ;
57637: LD_VAR 0 1
57641: PPUSH
57642: LD_VAR 0 4
57646: PPUSH
57647: LD_VAR 0 5
57651: PPUSH
57652: CALL_OW 114
// end ;
57656: LD_VAR 0 3
57660: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57661: LD_INT 0
57663: PPUSH
57664: PPUSH
57665: PPUSH
// list := AreaToList ( area , 0 ) ;
57666: LD_ADDR_VAR 0 5
57670: PUSH
57671: LD_VAR 0 1
57675: PPUSH
57676: LD_INT 0
57678: PPUSH
57679: CALL_OW 517
57683: ST_TO_ADDR
// if not list then
57684: LD_VAR 0 5
57688: NOT
57689: IFFALSE 57693
// exit ;
57691: GO 57823
// if all then
57693: LD_VAR 0 2
57697: IFFALSE 57785
// begin for i := 1 to list [ 1 ] do
57699: LD_ADDR_VAR 0 4
57703: PUSH
57704: DOUBLE
57705: LD_INT 1
57707: DEC
57708: ST_TO_ADDR
57709: LD_VAR 0 5
57713: PUSH
57714: LD_INT 1
57716: ARRAY
57717: PUSH
57718: FOR_TO
57719: IFFALSE 57781
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57721: LD_ADDR_VAR 0 3
57725: PUSH
57726: LD_VAR 0 3
57730: PPUSH
57731: LD_VAR 0 3
57735: PUSH
57736: LD_INT 1
57738: PLUS
57739: PPUSH
57740: LD_VAR 0 5
57744: PUSH
57745: LD_INT 1
57747: ARRAY
57748: PUSH
57749: LD_VAR 0 4
57753: ARRAY
57754: PUSH
57755: LD_VAR 0 5
57759: PUSH
57760: LD_INT 2
57762: ARRAY
57763: PUSH
57764: LD_VAR 0 4
57768: ARRAY
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PPUSH
57774: CALL_OW 1
57778: ST_TO_ADDR
57779: GO 57718
57781: POP
57782: POP
// exit ;
57783: GO 57823
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57785: LD_ADDR_VAR 0 3
57789: PUSH
57790: LD_VAR 0 5
57794: PUSH
57795: LD_INT 1
57797: ARRAY
57798: PUSH
57799: LD_INT 1
57801: ARRAY
57802: PUSH
57803: LD_VAR 0 5
57807: PUSH
57808: LD_INT 2
57810: ARRAY
57811: PUSH
57812: LD_INT 1
57814: ARRAY
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: EMPTY
57821: LIST
57822: ST_TO_ADDR
// end ;
57823: LD_VAR 0 3
57827: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57828: LD_INT 0
57830: PPUSH
57831: PPUSH
// list := AreaToList ( area , 0 ) ;
57832: LD_ADDR_VAR 0 4
57836: PUSH
57837: LD_VAR 0 1
57841: PPUSH
57842: LD_INT 0
57844: PPUSH
57845: CALL_OW 517
57849: ST_TO_ADDR
// if not list then
57850: LD_VAR 0 4
57854: NOT
57855: IFFALSE 57859
// exit ;
57857: GO 57900
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57859: LD_ADDR_VAR 0 3
57863: PUSH
57864: LD_VAR 0 4
57868: PUSH
57869: LD_INT 1
57871: ARRAY
57872: PUSH
57873: LD_INT 1
57875: ARRAY
57876: PUSH
57877: LD_VAR 0 4
57881: PUSH
57882: LD_INT 2
57884: ARRAY
57885: PUSH
57886: LD_INT 1
57888: ARRAY
57889: PUSH
57890: LD_VAR 0 2
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: LIST
57899: ST_TO_ADDR
// end ;
57900: LD_VAR 0 3
57904: RET
// export function First ( array ) ; begin
57905: LD_INT 0
57907: PPUSH
// if not array then
57908: LD_VAR 0 1
57912: NOT
57913: IFFALSE 57917
// exit ;
57915: GO 57931
// result := array [ 1 ] ;
57917: LD_ADDR_VAR 0 2
57921: PUSH
57922: LD_VAR 0 1
57926: PUSH
57927: LD_INT 1
57929: ARRAY
57930: ST_TO_ADDR
// end ;
57931: LD_VAR 0 2
57935: RET
// export function Last ( array ) ; begin
57936: LD_INT 0
57938: PPUSH
// if not array then
57939: LD_VAR 0 1
57943: NOT
57944: IFFALSE 57948
// exit ;
57946: GO 57964
// result := array [ array ] ;
57948: LD_ADDR_VAR 0 2
57952: PUSH
57953: LD_VAR 0 1
57957: PUSH
57958: LD_VAR 0 1
57962: ARRAY
57963: ST_TO_ADDR
// end ;
57964: LD_VAR 0 2
57968: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57969: LD_INT 0
57971: PPUSH
57972: PPUSH
// result := [ ] ;
57973: LD_ADDR_VAR 0 5
57977: PUSH
57978: EMPTY
57979: ST_TO_ADDR
// if not array then
57980: LD_VAR 0 1
57984: NOT
57985: IFFALSE 57989
// exit ;
57987: GO 58101
// for i := 1 to array do
57989: LD_ADDR_VAR 0 6
57993: PUSH
57994: DOUBLE
57995: LD_INT 1
57997: DEC
57998: ST_TO_ADDR
57999: LD_VAR 0 1
58003: PUSH
58004: FOR_TO
58005: IFFALSE 58099
// if array [ i ] [ index ] = value then
58007: LD_VAR 0 1
58011: PUSH
58012: LD_VAR 0 6
58016: ARRAY
58017: PUSH
58018: LD_VAR 0 2
58022: ARRAY
58023: PUSH
58024: LD_VAR 0 3
58028: EQUAL
58029: IFFALSE 58097
// begin if indexColumn then
58031: LD_VAR 0 4
58035: IFFALSE 58071
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58037: LD_ADDR_VAR 0 5
58041: PUSH
58042: LD_VAR 0 5
58046: PPUSH
58047: LD_VAR 0 1
58051: PUSH
58052: LD_VAR 0 6
58056: ARRAY
58057: PUSH
58058: LD_VAR 0 4
58062: ARRAY
58063: PPUSH
58064: CALL 53283 0 2
58068: ST_TO_ADDR
58069: GO 58097
// result := Join ( result , array [ i ] ) ;
58071: LD_ADDR_VAR 0 5
58075: PUSH
58076: LD_VAR 0 5
58080: PPUSH
58081: LD_VAR 0 1
58085: PUSH
58086: LD_VAR 0 6
58090: ARRAY
58091: PPUSH
58092: CALL 53283 0 2
58096: ST_TO_ADDR
// end ;
58097: GO 58004
58099: POP
58100: POP
// end ;
58101: LD_VAR 0 5
58105: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58106: LD_INT 0
58108: PPUSH
// if not vehicles or not parkingPoint then
58109: LD_VAR 0 1
58113: NOT
58114: PUSH
58115: LD_VAR 0 2
58119: NOT
58120: OR
58121: IFFALSE 58125
// exit ;
58123: GO 58223
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58125: LD_ADDR_VAR 0 1
58129: PUSH
58130: LD_VAR 0 1
58134: PPUSH
58135: LD_INT 50
58137: PUSH
58138: EMPTY
58139: LIST
58140: PUSH
58141: LD_INT 3
58143: PUSH
58144: LD_INT 92
58146: PUSH
58147: LD_VAR 0 2
58151: PUSH
58152: LD_INT 1
58154: ARRAY
58155: PUSH
58156: LD_VAR 0 2
58160: PUSH
58161: LD_INT 2
58163: ARRAY
58164: PUSH
58165: LD_INT 8
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PPUSH
58182: CALL_OW 72
58186: ST_TO_ADDR
// if not vehicles then
58187: LD_VAR 0 1
58191: NOT
58192: IFFALSE 58196
// exit ;
58194: GO 58223
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58196: LD_VAR 0 1
58200: PPUSH
58201: LD_VAR 0 2
58205: PUSH
58206: LD_INT 1
58208: ARRAY
58209: PPUSH
58210: LD_VAR 0 2
58214: PUSH
58215: LD_INT 2
58217: ARRAY
58218: PPUSH
58219: CALL_OW 111
// end ;
58223: LD_VAR 0 3
58227: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58228: LD_INT 0
58230: PPUSH
58231: PPUSH
58232: PPUSH
// if not side or not area then
58233: LD_VAR 0 1
58237: NOT
58238: PUSH
58239: LD_VAR 0 2
58243: NOT
58244: OR
58245: IFFALSE 58249
// exit ;
58247: GO 58368
// tmp := AreaToList ( area , 0 ) ;
58249: LD_ADDR_VAR 0 5
58253: PUSH
58254: LD_VAR 0 2
58258: PPUSH
58259: LD_INT 0
58261: PPUSH
58262: CALL_OW 517
58266: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58267: LD_ADDR_VAR 0 4
58271: PUSH
58272: DOUBLE
58273: LD_INT 1
58275: DEC
58276: ST_TO_ADDR
58277: LD_VAR 0 5
58281: PUSH
58282: LD_INT 1
58284: ARRAY
58285: PUSH
58286: FOR_TO
58287: IFFALSE 58366
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
58289: LD_VAR 0 5
58293: PUSH
58294: LD_INT 1
58296: ARRAY
58297: PUSH
58298: LD_VAR 0 4
58302: ARRAY
58303: PPUSH
58304: LD_VAR 0 5
58308: PUSH
58309: LD_INT 2
58311: ARRAY
58312: PUSH
58313: LD_VAR 0 4
58317: ARRAY
58318: PPUSH
58319: CALL_OW 351
58323: IFFALSE 58364
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
58325: LD_VAR 0 5
58329: PUSH
58330: LD_INT 1
58332: ARRAY
58333: PUSH
58334: LD_VAR 0 4
58338: ARRAY
58339: PPUSH
58340: LD_VAR 0 5
58344: PUSH
58345: LD_INT 2
58347: ARRAY
58348: PUSH
58349: LD_VAR 0 4
58353: ARRAY
58354: PPUSH
58355: LD_VAR 0 1
58359: PPUSH
58360: CALL_OW 244
// end ;
58364: GO 58286
58366: POP
58367: POP
// end ; end_of_file end_of_file
58368: LD_VAR 0 3
58372: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
58373: LD_VAR 0 1
58377: PPUSH
58378: LD_VAR 0 2
58382: PPUSH
58383: LD_VAR 0 3
58387: PPUSH
58388: LD_VAR 0 4
58392: PPUSH
58393: LD_VAR 0 5
58397: PPUSH
58398: LD_VAR 0 6
58402: PPUSH
58403: CALL 58604 0 6
// end ;
58407: PPOPN 6
58409: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
58410: LD_INT 0
58412: PPUSH
// begin if not units then
58413: LD_VAR 0 1
58417: NOT
58418: IFFALSE 58422
// exit ;
58420: GO 58422
// end ;
58422: PPOPN 7
58424: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
58425: CALL 58491 0 0
// end ; end_of_file
58429: PPOPN 1
58431: END
// export globalGameSaveCounter ; every 0 0$1 do
58432: GO 58434
58434: DISABLE
// begin enable ;
58435: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58436: LD_STRING updateTimer(
58438: PUSH
58439: LD_OWVAR 1
58443: STR
58444: PUSH
58445: LD_STRING );
58447: STR
58448: PPUSH
58449: CALL_OW 559
// end ;
58453: END
// every 0 0$1 do
58454: GO 58456
58456: DISABLE
// begin globalGameSaveCounter := 0 ;
58457: LD_ADDR_EXP 37
58461: PUSH
58462: LD_INT 0
58464: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
58465: LD_STRING setGameSaveCounter(0)
58467: PPUSH
58468: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
58472: LD_STRING initStreamRollete();
58474: PPUSH
58475: CALL_OW 559
// InitStreamMode ;
58479: CALL 59822 0 0
// DefineStreamItems ( false ) ;
58483: LD_INT 0
58485: PPUSH
58486: CALL 60286 0 1
// end ;
58490: END
// export function SOS_MapStart ( ) ; begin
58491: LD_INT 0
58493: PPUSH
// if streamModeActive then
58494: LD_EXP 38
58498: IFFALSE 58507
// DefineStreamItems ( true ) ;
58500: LD_INT 1
58502: PPUSH
58503: CALL 60286 0 1
// UpdateLuaVariables ( ) ;
58507: CALL 58524 0 0
// UpdateFactoryWaypoints ( ) ;
58511: CALL 73288 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58515: CALL 73540 0 0
// end ;
58519: LD_VAR 0 1
58523: RET
// function UpdateLuaVariables ( ) ; begin
58524: LD_INT 0
58526: PPUSH
// if globalGameSaveCounter then
58527: LD_EXP 37
58531: IFFALSE 58565
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
58533: LD_ADDR_EXP 37
58537: PUSH
58538: LD_EXP 37
58542: PPUSH
58543: CALL 54644 0 1
58547: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58548: LD_STRING setGameSaveCounter(
58550: PUSH
58551: LD_EXP 37
58555: STR
58556: PUSH
58557: LD_STRING )
58559: STR
58560: PPUSH
58561: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58565: LD_STRING setGameDifficulty(
58567: PUSH
58568: LD_OWVAR 67
58572: STR
58573: PUSH
58574: LD_STRING )
58576: STR
58577: PPUSH
58578: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
58582: LD_STRING displayDifficulty(
58584: PUSH
58585: LD_OWVAR 67
58589: STR
58590: PUSH
58591: LD_STRING )
58593: STR
58594: PPUSH
58595: CALL_OW 559
// end ;
58599: LD_VAR 0 1
58603: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58604: LD_INT 0
58606: PPUSH
// if p2 = stream_mode then
58607: LD_VAR 0 2
58611: PUSH
58612: LD_INT 100
58614: EQUAL
58615: IFFALSE 59618
// begin if not StreamModeActive then
58617: LD_EXP 38
58621: NOT
58622: IFFALSE 58632
// StreamModeActive := true ;
58624: LD_ADDR_EXP 38
58628: PUSH
58629: LD_INT 1
58631: ST_TO_ADDR
// if p3 = 0 then
58632: LD_VAR 0 3
58636: PUSH
58637: LD_INT 0
58639: EQUAL
58640: IFFALSE 58646
// InitStreamMode ;
58642: CALL 59822 0 0
// if p3 = 1 then
58646: LD_VAR 0 3
58650: PUSH
58651: LD_INT 1
58653: EQUAL
58654: IFFALSE 58664
// sRocket := true ;
58656: LD_ADDR_EXP 43
58660: PUSH
58661: LD_INT 1
58663: ST_TO_ADDR
// if p3 = 2 then
58664: LD_VAR 0 3
58668: PUSH
58669: LD_INT 2
58671: EQUAL
58672: IFFALSE 58682
// sSpeed := true ;
58674: LD_ADDR_EXP 42
58678: PUSH
58679: LD_INT 1
58681: ST_TO_ADDR
// if p3 = 3 then
58682: LD_VAR 0 3
58686: PUSH
58687: LD_INT 3
58689: EQUAL
58690: IFFALSE 58700
// sEngine := true ;
58692: LD_ADDR_EXP 44
58696: PUSH
58697: LD_INT 1
58699: ST_TO_ADDR
// if p3 = 4 then
58700: LD_VAR 0 3
58704: PUSH
58705: LD_INT 4
58707: EQUAL
58708: IFFALSE 58718
// sSpec := true ;
58710: LD_ADDR_EXP 41
58714: PUSH
58715: LD_INT 1
58717: ST_TO_ADDR
// if p3 = 5 then
58718: LD_VAR 0 3
58722: PUSH
58723: LD_INT 5
58725: EQUAL
58726: IFFALSE 58736
// sLevel := true ;
58728: LD_ADDR_EXP 45
58732: PUSH
58733: LD_INT 1
58735: ST_TO_ADDR
// if p3 = 6 then
58736: LD_VAR 0 3
58740: PUSH
58741: LD_INT 6
58743: EQUAL
58744: IFFALSE 58754
// sArmoury := true ;
58746: LD_ADDR_EXP 46
58750: PUSH
58751: LD_INT 1
58753: ST_TO_ADDR
// if p3 = 7 then
58754: LD_VAR 0 3
58758: PUSH
58759: LD_INT 7
58761: EQUAL
58762: IFFALSE 58772
// sRadar := true ;
58764: LD_ADDR_EXP 47
58768: PUSH
58769: LD_INT 1
58771: ST_TO_ADDR
// if p3 = 8 then
58772: LD_VAR 0 3
58776: PUSH
58777: LD_INT 8
58779: EQUAL
58780: IFFALSE 58790
// sBunker := true ;
58782: LD_ADDR_EXP 48
58786: PUSH
58787: LD_INT 1
58789: ST_TO_ADDR
// if p3 = 9 then
58790: LD_VAR 0 3
58794: PUSH
58795: LD_INT 9
58797: EQUAL
58798: IFFALSE 58808
// sHack := true ;
58800: LD_ADDR_EXP 49
58804: PUSH
58805: LD_INT 1
58807: ST_TO_ADDR
// if p3 = 10 then
58808: LD_VAR 0 3
58812: PUSH
58813: LD_INT 10
58815: EQUAL
58816: IFFALSE 58826
// sFire := true ;
58818: LD_ADDR_EXP 50
58822: PUSH
58823: LD_INT 1
58825: ST_TO_ADDR
// if p3 = 11 then
58826: LD_VAR 0 3
58830: PUSH
58831: LD_INT 11
58833: EQUAL
58834: IFFALSE 58844
// sRefresh := true ;
58836: LD_ADDR_EXP 51
58840: PUSH
58841: LD_INT 1
58843: ST_TO_ADDR
// if p3 = 12 then
58844: LD_VAR 0 3
58848: PUSH
58849: LD_INT 12
58851: EQUAL
58852: IFFALSE 58862
// sExp := true ;
58854: LD_ADDR_EXP 52
58858: PUSH
58859: LD_INT 1
58861: ST_TO_ADDR
// if p3 = 13 then
58862: LD_VAR 0 3
58866: PUSH
58867: LD_INT 13
58869: EQUAL
58870: IFFALSE 58880
// sDepot := true ;
58872: LD_ADDR_EXP 53
58876: PUSH
58877: LD_INT 1
58879: ST_TO_ADDR
// if p3 = 14 then
58880: LD_VAR 0 3
58884: PUSH
58885: LD_INT 14
58887: EQUAL
58888: IFFALSE 58898
// sFlag := true ;
58890: LD_ADDR_EXP 54
58894: PUSH
58895: LD_INT 1
58897: ST_TO_ADDR
// if p3 = 15 then
58898: LD_VAR 0 3
58902: PUSH
58903: LD_INT 15
58905: EQUAL
58906: IFFALSE 58916
// sKamikadze := true ;
58908: LD_ADDR_EXP 62
58912: PUSH
58913: LD_INT 1
58915: ST_TO_ADDR
// if p3 = 16 then
58916: LD_VAR 0 3
58920: PUSH
58921: LD_INT 16
58923: EQUAL
58924: IFFALSE 58934
// sTroll := true ;
58926: LD_ADDR_EXP 63
58930: PUSH
58931: LD_INT 1
58933: ST_TO_ADDR
// if p3 = 17 then
58934: LD_VAR 0 3
58938: PUSH
58939: LD_INT 17
58941: EQUAL
58942: IFFALSE 58952
// sSlow := true ;
58944: LD_ADDR_EXP 64
58948: PUSH
58949: LD_INT 1
58951: ST_TO_ADDR
// if p3 = 18 then
58952: LD_VAR 0 3
58956: PUSH
58957: LD_INT 18
58959: EQUAL
58960: IFFALSE 58970
// sLack := true ;
58962: LD_ADDR_EXP 65
58966: PUSH
58967: LD_INT 1
58969: ST_TO_ADDR
// if p3 = 19 then
58970: LD_VAR 0 3
58974: PUSH
58975: LD_INT 19
58977: EQUAL
58978: IFFALSE 58988
// sTank := true ;
58980: LD_ADDR_EXP 67
58984: PUSH
58985: LD_INT 1
58987: ST_TO_ADDR
// if p3 = 20 then
58988: LD_VAR 0 3
58992: PUSH
58993: LD_INT 20
58995: EQUAL
58996: IFFALSE 59006
// sRemote := true ;
58998: LD_ADDR_EXP 68
59002: PUSH
59003: LD_INT 1
59005: ST_TO_ADDR
// if p3 = 21 then
59006: LD_VAR 0 3
59010: PUSH
59011: LD_INT 21
59013: EQUAL
59014: IFFALSE 59024
// sPowell := true ;
59016: LD_ADDR_EXP 69
59020: PUSH
59021: LD_INT 1
59023: ST_TO_ADDR
// if p3 = 22 then
59024: LD_VAR 0 3
59028: PUSH
59029: LD_INT 22
59031: EQUAL
59032: IFFALSE 59042
// sTeleport := true ;
59034: LD_ADDR_EXP 72
59038: PUSH
59039: LD_INT 1
59041: ST_TO_ADDR
// if p3 = 23 then
59042: LD_VAR 0 3
59046: PUSH
59047: LD_INT 23
59049: EQUAL
59050: IFFALSE 59060
// sOilTower := true ;
59052: LD_ADDR_EXP 74
59056: PUSH
59057: LD_INT 1
59059: ST_TO_ADDR
// if p3 = 24 then
59060: LD_VAR 0 3
59064: PUSH
59065: LD_INT 24
59067: EQUAL
59068: IFFALSE 59078
// sShovel := true ;
59070: LD_ADDR_EXP 75
59074: PUSH
59075: LD_INT 1
59077: ST_TO_ADDR
// if p3 = 25 then
59078: LD_VAR 0 3
59082: PUSH
59083: LD_INT 25
59085: EQUAL
59086: IFFALSE 59096
// sSheik := true ;
59088: LD_ADDR_EXP 76
59092: PUSH
59093: LD_INT 1
59095: ST_TO_ADDR
// if p3 = 26 then
59096: LD_VAR 0 3
59100: PUSH
59101: LD_INT 26
59103: EQUAL
59104: IFFALSE 59114
// sEarthquake := true ;
59106: LD_ADDR_EXP 78
59110: PUSH
59111: LD_INT 1
59113: ST_TO_ADDR
// if p3 = 27 then
59114: LD_VAR 0 3
59118: PUSH
59119: LD_INT 27
59121: EQUAL
59122: IFFALSE 59132
// sAI := true ;
59124: LD_ADDR_EXP 79
59128: PUSH
59129: LD_INT 1
59131: ST_TO_ADDR
// if p3 = 28 then
59132: LD_VAR 0 3
59136: PUSH
59137: LD_INT 28
59139: EQUAL
59140: IFFALSE 59150
// sCargo := true ;
59142: LD_ADDR_EXP 82
59146: PUSH
59147: LD_INT 1
59149: ST_TO_ADDR
// if p3 = 29 then
59150: LD_VAR 0 3
59154: PUSH
59155: LD_INT 29
59157: EQUAL
59158: IFFALSE 59168
// sDLaser := true ;
59160: LD_ADDR_EXP 83
59164: PUSH
59165: LD_INT 1
59167: ST_TO_ADDR
// if p3 = 30 then
59168: LD_VAR 0 3
59172: PUSH
59173: LD_INT 30
59175: EQUAL
59176: IFFALSE 59186
// sExchange := true ;
59178: LD_ADDR_EXP 84
59182: PUSH
59183: LD_INT 1
59185: ST_TO_ADDR
// if p3 = 31 then
59186: LD_VAR 0 3
59190: PUSH
59191: LD_INT 31
59193: EQUAL
59194: IFFALSE 59204
// sFac := true ;
59196: LD_ADDR_EXP 85
59200: PUSH
59201: LD_INT 1
59203: ST_TO_ADDR
// if p3 = 32 then
59204: LD_VAR 0 3
59208: PUSH
59209: LD_INT 32
59211: EQUAL
59212: IFFALSE 59222
// sPower := true ;
59214: LD_ADDR_EXP 86
59218: PUSH
59219: LD_INT 1
59221: ST_TO_ADDR
// if p3 = 33 then
59222: LD_VAR 0 3
59226: PUSH
59227: LD_INT 33
59229: EQUAL
59230: IFFALSE 59240
// sRandom := true ;
59232: LD_ADDR_EXP 87
59236: PUSH
59237: LD_INT 1
59239: ST_TO_ADDR
// if p3 = 34 then
59240: LD_VAR 0 3
59244: PUSH
59245: LD_INT 34
59247: EQUAL
59248: IFFALSE 59258
// sShield := true ;
59250: LD_ADDR_EXP 88
59254: PUSH
59255: LD_INT 1
59257: ST_TO_ADDR
// if p3 = 35 then
59258: LD_VAR 0 3
59262: PUSH
59263: LD_INT 35
59265: EQUAL
59266: IFFALSE 59276
// sTime := true ;
59268: LD_ADDR_EXP 89
59272: PUSH
59273: LD_INT 1
59275: ST_TO_ADDR
// if p3 = 36 then
59276: LD_VAR 0 3
59280: PUSH
59281: LD_INT 36
59283: EQUAL
59284: IFFALSE 59294
// sTools := true ;
59286: LD_ADDR_EXP 90
59290: PUSH
59291: LD_INT 1
59293: ST_TO_ADDR
// if p3 = 101 then
59294: LD_VAR 0 3
59298: PUSH
59299: LD_INT 101
59301: EQUAL
59302: IFFALSE 59312
// sSold := true ;
59304: LD_ADDR_EXP 55
59308: PUSH
59309: LD_INT 1
59311: ST_TO_ADDR
// if p3 = 102 then
59312: LD_VAR 0 3
59316: PUSH
59317: LD_INT 102
59319: EQUAL
59320: IFFALSE 59330
// sDiff := true ;
59322: LD_ADDR_EXP 56
59326: PUSH
59327: LD_INT 1
59329: ST_TO_ADDR
// if p3 = 103 then
59330: LD_VAR 0 3
59334: PUSH
59335: LD_INT 103
59337: EQUAL
59338: IFFALSE 59348
// sFog := true ;
59340: LD_ADDR_EXP 59
59344: PUSH
59345: LD_INT 1
59347: ST_TO_ADDR
// if p3 = 104 then
59348: LD_VAR 0 3
59352: PUSH
59353: LD_INT 104
59355: EQUAL
59356: IFFALSE 59366
// sReset := true ;
59358: LD_ADDR_EXP 60
59362: PUSH
59363: LD_INT 1
59365: ST_TO_ADDR
// if p3 = 105 then
59366: LD_VAR 0 3
59370: PUSH
59371: LD_INT 105
59373: EQUAL
59374: IFFALSE 59384
// sSun := true ;
59376: LD_ADDR_EXP 61
59380: PUSH
59381: LD_INT 1
59383: ST_TO_ADDR
// if p3 = 106 then
59384: LD_VAR 0 3
59388: PUSH
59389: LD_INT 106
59391: EQUAL
59392: IFFALSE 59402
// sTiger := true ;
59394: LD_ADDR_EXP 57
59398: PUSH
59399: LD_INT 1
59401: ST_TO_ADDR
// if p3 = 107 then
59402: LD_VAR 0 3
59406: PUSH
59407: LD_INT 107
59409: EQUAL
59410: IFFALSE 59420
// sBomb := true ;
59412: LD_ADDR_EXP 58
59416: PUSH
59417: LD_INT 1
59419: ST_TO_ADDR
// if p3 = 108 then
59420: LD_VAR 0 3
59424: PUSH
59425: LD_INT 108
59427: EQUAL
59428: IFFALSE 59438
// sWound := true ;
59430: LD_ADDR_EXP 66
59434: PUSH
59435: LD_INT 1
59437: ST_TO_ADDR
// if p3 = 109 then
59438: LD_VAR 0 3
59442: PUSH
59443: LD_INT 109
59445: EQUAL
59446: IFFALSE 59456
// sBetray := true ;
59448: LD_ADDR_EXP 70
59452: PUSH
59453: LD_INT 1
59455: ST_TO_ADDR
// if p3 = 110 then
59456: LD_VAR 0 3
59460: PUSH
59461: LD_INT 110
59463: EQUAL
59464: IFFALSE 59474
// sContamin := true ;
59466: LD_ADDR_EXP 71
59470: PUSH
59471: LD_INT 1
59473: ST_TO_ADDR
// if p3 = 111 then
59474: LD_VAR 0 3
59478: PUSH
59479: LD_INT 111
59481: EQUAL
59482: IFFALSE 59492
// sOil := true ;
59484: LD_ADDR_EXP 73
59488: PUSH
59489: LD_INT 1
59491: ST_TO_ADDR
// if p3 = 112 then
59492: LD_VAR 0 3
59496: PUSH
59497: LD_INT 112
59499: EQUAL
59500: IFFALSE 59510
// sStu := true ;
59502: LD_ADDR_EXP 77
59506: PUSH
59507: LD_INT 1
59509: ST_TO_ADDR
// if p3 = 113 then
59510: LD_VAR 0 3
59514: PUSH
59515: LD_INT 113
59517: EQUAL
59518: IFFALSE 59528
// sBazooka := true ;
59520: LD_ADDR_EXP 80
59524: PUSH
59525: LD_INT 1
59527: ST_TO_ADDR
// if p3 = 114 then
59528: LD_VAR 0 3
59532: PUSH
59533: LD_INT 114
59535: EQUAL
59536: IFFALSE 59546
// sMortar := true ;
59538: LD_ADDR_EXP 81
59542: PUSH
59543: LD_INT 1
59545: ST_TO_ADDR
// if p3 = 115 then
59546: LD_VAR 0 3
59550: PUSH
59551: LD_INT 115
59553: EQUAL
59554: IFFALSE 59564
// sRanger := true ;
59556: LD_ADDR_EXP 91
59560: PUSH
59561: LD_INT 1
59563: ST_TO_ADDR
// if p3 = 116 then
59564: LD_VAR 0 3
59568: PUSH
59569: LD_INT 116
59571: EQUAL
59572: IFFALSE 59582
// sComputer := true ;
59574: LD_ADDR_EXP 92
59578: PUSH
59579: LD_INT 1
59581: ST_TO_ADDR
// if p3 = 117 then
59582: LD_VAR 0 3
59586: PUSH
59587: LD_INT 117
59589: EQUAL
59590: IFFALSE 59600
// s30 := true ;
59592: LD_ADDR_EXP 93
59596: PUSH
59597: LD_INT 1
59599: ST_TO_ADDR
// if p3 = 118 then
59600: LD_VAR 0 3
59604: PUSH
59605: LD_INT 118
59607: EQUAL
59608: IFFALSE 59618
// s60 := true ;
59610: LD_ADDR_EXP 94
59614: PUSH
59615: LD_INT 1
59617: ST_TO_ADDR
// end ; if p2 = hack_mode then
59618: LD_VAR 0 2
59622: PUSH
59623: LD_INT 101
59625: EQUAL
59626: IFFALSE 59754
// begin case p3 of 1 :
59628: LD_VAR 0 3
59632: PUSH
59633: LD_INT 1
59635: DOUBLE
59636: EQUAL
59637: IFTRUE 59641
59639: GO 59648
59641: POP
// hHackUnlimitedResources ; 2 :
59642: CALL 71901 0 0
59646: GO 59754
59648: LD_INT 2
59650: DOUBLE
59651: EQUAL
59652: IFTRUE 59656
59654: GO 59663
59656: POP
// hHackSetLevel10 ; 3 :
59657: CALL 72034 0 0
59661: GO 59754
59663: LD_INT 3
59665: DOUBLE
59666: EQUAL
59667: IFTRUE 59671
59669: GO 59678
59671: POP
// hHackSetLevel10YourUnits ; 4 :
59672: CALL 72119 0 0
59676: GO 59754
59678: LD_INT 4
59680: DOUBLE
59681: EQUAL
59682: IFTRUE 59686
59684: GO 59693
59686: POP
// hHackInvincible ; 5 :
59687: CALL 72567 0 0
59691: GO 59754
59693: LD_INT 5
59695: DOUBLE
59696: EQUAL
59697: IFTRUE 59701
59699: GO 59708
59701: POP
// hHackInvisible ; 6 :
59702: CALL 72678 0 0
59706: GO 59754
59708: LD_INT 6
59710: DOUBLE
59711: EQUAL
59712: IFTRUE 59716
59714: GO 59723
59716: POP
// hHackChangeYourSide ; 7 :
59717: CALL 72735 0 0
59721: GO 59754
59723: LD_INT 7
59725: DOUBLE
59726: EQUAL
59727: IFTRUE 59731
59729: GO 59738
59731: POP
// hHackChangeUnitSide ; 8 :
59732: CALL 72777 0 0
59736: GO 59754
59738: LD_INT 8
59740: DOUBLE
59741: EQUAL
59742: IFTRUE 59746
59744: GO 59753
59746: POP
// hHackFog ; end ;
59747: CALL 72878 0 0
59751: GO 59754
59753: POP
// end ; if p2 = game_save_mode then
59754: LD_VAR 0 2
59758: PUSH
59759: LD_INT 102
59761: EQUAL
59762: IFFALSE 59817
// begin if p3 = 1 then
59764: LD_VAR 0 3
59768: PUSH
59769: LD_INT 1
59771: EQUAL
59772: IFFALSE 59784
// globalGameSaveCounter := p4 ;
59774: LD_ADDR_EXP 37
59778: PUSH
59779: LD_VAR 0 4
59783: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59784: LD_VAR 0 3
59788: PUSH
59789: LD_INT 2
59791: EQUAL
59792: PUSH
59793: LD_EXP 37
59797: AND
59798: IFFALSE 59817
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59800: LD_STRING setGameSaveCounter(
59802: PUSH
59803: LD_EXP 37
59807: STR
59808: PUSH
59809: LD_STRING )
59811: STR
59812: PPUSH
59813: CALL_OW 559
// end ; end ;
59817: LD_VAR 0 7
59821: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59822: LD_INT 0
59824: PPUSH
// streamModeActive := false ;
59825: LD_ADDR_EXP 38
59829: PUSH
59830: LD_INT 0
59832: ST_TO_ADDR
// normalCounter := 36 ;
59833: LD_ADDR_EXP 39
59837: PUSH
59838: LD_INT 36
59840: ST_TO_ADDR
// hardcoreCounter := 18 ;
59841: LD_ADDR_EXP 40
59845: PUSH
59846: LD_INT 18
59848: ST_TO_ADDR
// sRocket := false ;
59849: LD_ADDR_EXP 43
59853: PUSH
59854: LD_INT 0
59856: ST_TO_ADDR
// sSpeed := false ;
59857: LD_ADDR_EXP 42
59861: PUSH
59862: LD_INT 0
59864: ST_TO_ADDR
// sEngine := false ;
59865: LD_ADDR_EXP 44
59869: PUSH
59870: LD_INT 0
59872: ST_TO_ADDR
// sSpec := false ;
59873: LD_ADDR_EXP 41
59877: PUSH
59878: LD_INT 0
59880: ST_TO_ADDR
// sLevel := false ;
59881: LD_ADDR_EXP 45
59885: PUSH
59886: LD_INT 0
59888: ST_TO_ADDR
// sArmoury := false ;
59889: LD_ADDR_EXP 46
59893: PUSH
59894: LD_INT 0
59896: ST_TO_ADDR
// sRadar := false ;
59897: LD_ADDR_EXP 47
59901: PUSH
59902: LD_INT 0
59904: ST_TO_ADDR
// sBunker := false ;
59905: LD_ADDR_EXP 48
59909: PUSH
59910: LD_INT 0
59912: ST_TO_ADDR
// sHack := false ;
59913: LD_ADDR_EXP 49
59917: PUSH
59918: LD_INT 0
59920: ST_TO_ADDR
// sFire := false ;
59921: LD_ADDR_EXP 50
59925: PUSH
59926: LD_INT 0
59928: ST_TO_ADDR
// sRefresh := false ;
59929: LD_ADDR_EXP 51
59933: PUSH
59934: LD_INT 0
59936: ST_TO_ADDR
// sExp := false ;
59937: LD_ADDR_EXP 52
59941: PUSH
59942: LD_INT 0
59944: ST_TO_ADDR
// sDepot := false ;
59945: LD_ADDR_EXP 53
59949: PUSH
59950: LD_INT 0
59952: ST_TO_ADDR
// sFlag := false ;
59953: LD_ADDR_EXP 54
59957: PUSH
59958: LD_INT 0
59960: ST_TO_ADDR
// sKamikadze := false ;
59961: LD_ADDR_EXP 62
59965: PUSH
59966: LD_INT 0
59968: ST_TO_ADDR
// sTroll := false ;
59969: LD_ADDR_EXP 63
59973: PUSH
59974: LD_INT 0
59976: ST_TO_ADDR
// sSlow := false ;
59977: LD_ADDR_EXP 64
59981: PUSH
59982: LD_INT 0
59984: ST_TO_ADDR
// sLack := false ;
59985: LD_ADDR_EXP 65
59989: PUSH
59990: LD_INT 0
59992: ST_TO_ADDR
// sTank := false ;
59993: LD_ADDR_EXP 67
59997: PUSH
59998: LD_INT 0
60000: ST_TO_ADDR
// sRemote := false ;
60001: LD_ADDR_EXP 68
60005: PUSH
60006: LD_INT 0
60008: ST_TO_ADDR
// sPowell := false ;
60009: LD_ADDR_EXP 69
60013: PUSH
60014: LD_INT 0
60016: ST_TO_ADDR
// sTeleport := false ;
60017: LD_ADDR_EXP 72
60021: PUSH
60022: LD_INT 0
60024: ST_TO_ADDR
// sOilTower := false ;
60025: LD_ADDR_EXP 74
60029: PUSH
60030: LD_INT 0
60032: ST_TO_ADDR
// sShovel := false ;
60033: LD_ADDR_EXP 75
60037: PUSH
60038: LD_INT 0
60040: ST_TO_ADDR
// sSheik := false ;
60041: LD_ADDR_EXP 76
60045: PUSH
60046: LD_INT 0
60048: ST_TO_ADDR
// sEarthquake := false ;
60049: LD_ADDR_EXP 78
60053: PUSH
60054: LD_INT 0
60056: ST_TO_ADDR
// sAI := false ;
60057: LD_ADDR_EXP 79
60061: PUSH
60062: LD_INT 0
60064: ST_TO_ADDR
// sCargo := false ;
60065: LD_ADDR_EXP 82
60069: PUSH
60070: LD_INT 0
60072: ST_TO_ADDR
// sDLaser := false ;
60073: LD_ADDR_EXP 83
60077: PUSH
60078: LD_INT 0
60080: ST_TO_ADDR
// sExchange := false ;
60081: LD_ADDR_EXP 84
60085: PUSH
60086: LD_INT 0
60088: ST_TO_ADDR
// sFac := false ;
60089: LD_ADDR_EXP 85
60093: PUSH
60094: LD_INT 0
60096: ST_TO_ADDR
// sPower := false ;
60097: LD_ADDR_EXP 86
60101: PUSH
60102: LD_INT 0
60104: ST_TO_ADDR
// sRandom := false ;
60105: LD_ADDR_EXP 87
60109: PUSH
60110: LD_INT 0
60112: ST_TO_ADDR
// sShield := false ;
60113: LD_ADDR_EXP 88
60117: PUSH
60118: LD_INT 0
60120: ST_TO_ADDR
// sTime := false ;
60121: LD_ADDR_EXP 89
60125: PUSH
60126: LD_INT 0
60128: ST_TO_ADDR
// sTools := false ;
60129: LD_ADDR_EXP 90
60133: PUSH
60134: LD_INT 0
60136: ST_TO_ADDR
// sSold := false ;
60137: LD_ADDR_EXP 55
60141: PUSH
60142: LD_INT 0
60144: ST_TO_ADDR
// sDiff := false ;
60145: LD_ADDR_EXP 56
60149: PUSH
60150: LD_INT 0
60152: ST_TO_ADDR
// sFog := false ;
60153: LD_ADDR_EXP 59
60157: PUSH
60158: LD_INT 0
60160: ST_TO_ADDR
// sReset := false ;
60161: LD_ADDR_EXP 60
60165: PUSH
60166: LD_INT 0
60168: ST_TO_ADDR
// sSun := false ;
60169: LD_ADDR_EXP 61
60173: PUSH
60174: LD_INT 0
60176: ST_TO_ADDR
// sTiger := false ;
60177: LD_ADDR_EXP 57
60181: PUSH
60182: LD_INT 0
60184: ST_TO_ADDR
// sBomb := false ;
60185: LD_ADDR_EXP 58
60189: PUSH
60190: LD_INT 0
60192: ST_TO_ADDR
// sWound := false ;
60193: LD_ADDR_EXP 66
60197: PUSH
60198: LD_INT 0
60200: ST_TO_ADDR
// sBetray := false ;
60201: LD_ADDR_EXP 70
60205: PUSH
60206: LD_INT 0
60208: ST_TO_ADDR
// sContamin := false ;
60209: LD_ADDR_EXP 71
60213: PUSH
60214: LD_INT 0
60216: ST_TO_ADDR
// sOil := false ;
60217: LD_ADDR_EXP 73
60221: PUSH
60222: LD_INT 0
60224: ST_TO_ADDR
// sStu := false ;
60225: LD_ADDR_EXP 77
60229: PUSH
60230: LD_INT 0
60232: ST_TO_ADDR
// sBazooka := false ;
60233: LD_ADDR_EXP 80
60237: PUSH
60238: LD_INT 0
60240: ST_TO_ADDR
// sMortar := false ;
60241: LD_ADDR_EXP 81
60245: PUSH
60246: LD_INT 0
60248: ST_TO_ADDR
// sRanger := false ;
60249: LD_ADDR_EXP 91
60253: PUSH
60254: LD_INT 0
60256: ST_TO_ADDR
// sComputer := false ;
60257: LD_ADDR_EXP 92
60261: PUSH
60262: LD_INT 0
60264: ST_TO_ADDR
// s30 := false ;
60265: LD_ADDR_EXP 93
60269: PUSH
60270: LD_INT 0
60272: ST_TO_ADDR
// s60 := false ;
60273: LD_ADDR_EXP 94
60277: PUSH
60278: LD_INT 0
60280: ST_TO_ADDR
// end ;
60281: LD_VAR 0 1
60285: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
60286: LD_INT 0
60288: PPUSH
60289: PPUSH
60290: PPUSH
60291: PPUSH
60292: PPUSH
60293: PPUSH
60294: PPUSH
// result := [ ] ;
60295: LD_ADDR_VAR 0 2
60299: PUSH
60300: EMPTY
60301: ST_TO_ADDR
// if campaign_id = 1 then
60302: LD_OWVAR 69
60306: PUSH
60307: LD_INT 1
60309: EQUAL
60310: IFFALSE 63476
// begin case mission_number of 1 :
60312: LD_OWVAR 70
60316: PUSH
60317: LD_INT 1
60319: DOUBLE
60320: EQUAL
60321: IFTRUE 60325
60323: GO 60401
60325: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
60326: LD_ADDR_VAR 0 2
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: LD_INT 4
60336: PUSH
60337: LD_INT 11
60339: PUSH
60340: LD_INT 12
60342: PUSH
60343: LD_INT 15
60345: PUSH
60346: LD_INT 16
60348: PUSH
60349: LD_INT 22
60351: PUSH
60352: LD_INT 23
60354: PUSH
60355: LD_INT 26
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 101
60371: PUSH
60372: LD_INT 102
60374: PUSH
60375: LD_INT 106
60377: PUSH
60378: LD_INT 116
60380: PUSH
60381: LD_INT 117
60383: PUSH
60384: LD_INT 118
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: ST_TO_ADDR
60399: GO 63474
60401: LD_INT 2
60403: DOUBLE
60404: EQUAL
60405: IFTRUE 60409
60407: GO 60493
60409: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
60410: LD_ADDR_VAR 0 2
60414: PUSH
60415: LD_INT 2
60417: PUSH
60418: LD_INT 4
60420: PUSH
60421: LD_INT 11
60423: PUSH
60424: LD_INT 12
60426: PUSH
60427: LD_INT 15
60429: PUSH
60430: LD_INT 16
60432: PUSH
60433: LD_INT 22
60435: PUSH
60436: LD_INT 23
60438: PUSH
60439: LD_INT 26
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 101
60455: PUSH
60456: LD_INT 102
60458: PUSH
60459: LD_INT 105
60461: PUSH
60462: LD_INT 106
60464: PUSH
60465: LD_INT 108
60467: PUSH
60468: LD_INT 116
60470: PUSH
60471: LD_INT 117
60473: PUSH
60474: LD_INT 118
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: ST_TO_ADDR
60491: GO 63474
60493: LD_INT 3
60495: DOUBLE
60496: EQUAL
60497: IFTRUE 60501
60499: GO 60589
60501: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
60502: LD_ADDR_VAR 0 2
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: LD_INT 4
60512: PUSH
60513: LD_INT 5
60515: PUSH
60516: LD_INT 11
60518: PUSH
60519: LD_INT 12
60521: PUSH
60522: LD_INT 15
60524: PUSH
60525: LD_INT 16
60527: PUSH
60528: LD_INT 22
60530: PUSH
60531: LD_INT 26
60533: PUSH
60534: LD_INT 36
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 101
60551: PUSH
60552: LD_INT 102
60554: PUSH
60555: LD_INT 105
60557: PUSH
60558: LD_INT 106
60560: PUSH
60561: LD_INT 108
60563: PUSH
60564: LD_INT 116
60566: PUSH
60567: LD_INT 117
60569: PUSH
60570: LD_INT 118
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: ST_TO_ADDR
60587: GO 63474
60589: LD_INT 4
60591: DOUBLE
60592: EQUAL
60593: IFTRUE 60597
60595: GO 60693
60597: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60598: LD_ADDR_VAR 0 2
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: LD_INT 4
60608: PUSH
60609: LD_INT 5
60611: PUSH
60612: LD_INT 8
60614: PUSH
60615: LD_INT 11
60617: PUSH
60618: LD_INT 12
60620: PUSH
60621: LD_INT 15
60623: PUSH
60624: LD_INT 16
60626: PUSH
60627: LD_INT 22
60629: PUSH
60630: LD_INT 23
60632: PUSH
60633: LD_INT 26
60635: PUSH
60636: LD_INT 36
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 101
60655: PUSH
60656: LD_INT 102
60658: PUSH
60659: LD_INT 105
60661: PUSH
60662: LD_INT 106
60664: PUSH
60665: LD_INT 108
60667: PUSH
60668: LD_INT 116
60670: PUSH
60671: LD_INT 117
60673: PUSH
60674: LD_INT 118
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: ST_TO_ADDR
60691: GO 63474
60693: LD_INT 5
60695: DOUBLE
60696: EQUAL
60697: IFTRUE 60701
60699: GO 60813
60701: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60702: LD_ADDR_VAR 0 2
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: LD_INT 4
60712: PUSH
60713: LD_INT 5
60715: PUSH
60716: LD_INT 6
60718: PUSH
60719: LD_INT 8
60721: PUSH
60722: LD_INT 11
60724: PUSH
60725: LD_INT 12
60727: PUSH
60728: LD_INT 15
60730: PUSH
60731: LD_INT 16
60733: PUSH
60734: LD_INT 22
60736: PUSH
60737: LD_INT 23
60739: PUSH
60740: LD_INT 25
60742: PUSH
60743: LD_INT 26
60745: PUSH
60746: LD_INT 36
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 101
60767: PUSH
60768: LD_INT 102
60770: PUSH
60771: LD_INT 105
60773: PUSH
60774: LD_INT 106
60776: PUSH
60777: LD_INT 108
60779: PUSH
60780: LD_INT 109
60782: PUSH
60783: LD_INT 112
60785: PUSH
60786: LD_INT 116
60788: PUSH
60789: LD_INT 117
60791: PUSH
60792: LD_INT 118
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: ST_TO_ADDR
60811: GO 63474
60813: LD_INT 6
60815: DOUBLE
60816: EQUAL
60817: IFTRUE 60821
60819: GO 60953
60821: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60822: LD_ADDR_VAR 0 2
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: LD_INT 4
60832: PUSH
60833: LD_INT 5
60835: PUSH
60836: LD_INT 6
60838: PUSH
60839: LD_INT 8
60841: PUSH
60842: LD_INT 11
60844: PUSH
60845: LD_INT 12
60847: PUSH
60848: LD_INT 15
60850: PUSH
60851: LD_INT 16
60853: PUSH
60854: LD_INT 20
60856: PUSH
60857: LD_INT 21
60859: PUSH
60860: LD_INT 22
60862: PUSH
60863: LD_INT 23
60865: PUSH
60866: LD_INT 25
60868: PUSH
60869: LD_INT 26
60871: PUSH
60872: LD_INT 30
60874: PUSH
60875: LD_INT 31
60877: PUSH
60878: LD_INT 32
60880: PUSH
60881: LD_INT 36
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 101
60907: PUSH
60908: LD_INT 102
60910: PUSH
60911: LD_INT 105
60913: PUSH
60914: LD_INT 106
60916: PUSH
60917: LD_INT 108
60919: PUSH
60920: LD_INT 109
60922: PUSH
60923: LD_INT 112
60925: PUSH
60926: LD_INT 116
60928: PUSH
60929: LD_INT 117
60931: PUSH
60932: LD_INT 118
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: ST_TO_ADDR
60951: GO 63474
60953: LD_INT 7
60955: DOUBLE
60956: EQUAL
60957: IFTRUE 60961
60959: GO 61073
60961: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60962: LD_ADDR_VAR 0 2
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: LD_INT 4
60972: PUSH
60973: LD_INT 5
60975: PUSH
60976: LD_INT 7
60978: PUSH
60979: LD_INT 11
60981: PUSH
60982: LD_INT 12
60984: PUSH
60985: LD_INT 15
60987: PUSH
60988: LD_INT 16
60990: PUSH
60991: LD_INT 20
60993: PUSH
60994: LD_INT 21
60996: PUSH
60997: LD_INT 22
60999: PUSH
61000: LD_INT 23
61002: PUSH
61003: LD_INT 25
61005: PUSH
61006: LD_INT 26
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 101
61027: PUSH
61028: LD_INT 102
61030: PUSH
61031: LD_INT 103
61033: PUSH
61034: LD_INT 105
61036: PUSH
61037: LD_INT 106
61039: PUSH
61040: LD_INT 108
61042: PUSH
61043: LD_INT 112
61045: PUSH
61046: LD_INT 116
61048: PUSH
61049: LD_INT 117
61051: PUSH
61052: LD_INT 118
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: ST_TO_ADDR
61071: GO 63474
61073: LD_INT 8
61075: DOUBLE
61076: EQUAL
61077: IFTRUE 61081
61079: GO 61221
61081: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
61082: LD_ADDR_VAR 0 2
61086: PUSH
61087: LD_INT 2
61089: PUSH
61090: LD_INT 4
61092: PUSH
61093: LD_INT 5
61095: PUSH
61096: LD_INT 6
61098: PUSH
61099: LD_INT 7
61101: PUSH
61102: LD_INT 8
61104: PUSH
61105: LD_INT 11
61107: PUSH
61108: LD_INT 12
61110: PUSH
61111: LD_INT 15
61113: PUSH
61114: LD_INT 16
61116: PUSH
61117: LD_INT 20
61119: PUSH
61120: LD_INT 21
61122: PUSH
61123: LD_INT 22
61125: PUSH
61126: LD_INT 23
61128: PUSH
61129: LD_INT 25
61131: PUSH
61132: LD_INT 26
61134: PUSH
61135: LD_INT 30
61137: PUSH
61138: LD_INT 31
61140: PUSH
61141: LD_INT 32
61143: PUSH
61144: LD_INT 36
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 101
61171: PUSH
61172: LD_INT 102
61174: PUSH
61175: LD_INT 103
61177: PUSH
61178: LD_INT 105
61180: PUSH
61181: LD_INT 106
61183: PUSH
61184: LD_INT 108
61186: PUSH
61187: LD_INT 109
61189: PUSH
61190: LD_INT 112
61192: PUSH
61193: LD_INT 116
61195: PUSH
61196: LD_INT 117
61198: PUSH
61199: LD_INT 118
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: ST_TO_ADDR
61219: GO 63474
61221: LD_INT 9
61223: DOUBLE
61224: EQUAL
61225: IFTRUE 61229
61227: GO 61377
61229: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
61230: LD_ADDR_VAR 0 2
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: LD_INT 4
61240: PUSH
61241: LD_INT 5
61243: PUSH
61244: LD_INT 6
61246: PUSH
61247: LD_INT 7
61249: PUSH
61250: LD_INT 8
61252: PUSH
61253: LD_INT 11
61255: PUSH
61256: LD_INT 12
61258: PUSH
61259: LD_INT 15
61261: PUSH
61262: LD_INT 16
61264: PUSH
61265: LD_INT 20
61267: PUSH
61268: LD_INT 21
61270: PUSH
61271: LD_INT 22
61273: PUSH
61274: LD_INT 23
61276: PUSH
61277: LD_INT 25
61279: PUSH
61280: LD_INT 26
61282: PUSH
61283: LD_INT 28
61285: PUSH
61286: LD_INT 30
61288: PUSH
61289: LD_INT 31
61291: PUSH
61292: LD_INT 32
61294: PUSH
61295: LD_INT 36
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 101
61323: PUSH
61324: LD_INT 102
61326: PUSH
61327: LD_INT 103
61329: PUSH
61330: LD_INT 105
61332: PUSH
61333: LD_INT 106
61335: PUSH
61336: LD_INT 108
61338: PUSH
61339: LD_INT 109
61341: PUSH
61342: LD_INT 112
61344: PUSH
61345: LD_INT 114
61347: PUSH
61348: LD_INT 116
61350: PUSH
61351: LD_INT 117
61353: PUSH
61354: LD_INT 118
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: ST_TO_ADDR
61375: GO 63474
61377: LD_INT 10
61379: DOUBLE
61380: EQUAL
61381: IFTRUE 61385
61383: GO 61581
61385: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
61386: LD_ADDR_VAR 0 2
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: LD_INT 4
61396: PUSH
61397: LD_INT 5
61399: PUSH
61400: LD_INT 6
61402: PUSH
61403: LD_INT 7
61405: PUSH
61406: LD_INT 8
61408: PUSH
61409: LD_INT 9
61411: PUSH
61412: LD_INT 10
61414: PUSH
61415: LD_INT 11
61417: PUSH
61418: LD_INT 12
61420: PUSH
61421: LD_INT 13
61423: PUSH
61424: LD_INT 14
61426: PUSH
61427: LD_INT 15
61429: PUSH
61430: LD_INT 16
61432: PUSH
61433: LD_INT 17
61435: PUSH
61436: LD_INT 18
61438: PUSH
61439: LD_INT 19
61441: PUSH
61442: LD_INT 20
61444: PUSH
61445: LD_INT 21
61447: PUSH
61448: LD_INT 22
61450: PUSH
61451: LD_INT 23
61453: PUSH
61454: LD_INT 24
61456: PUSH
61457: LD_INT 25
61459: PUSH
61460: LD_INT 26
61462: PUSH
61463: LD_INT 28
61465: PUSH
61466: LD_INT 30
61468: PUSH
61469: LD_INT 31
61471: PUSH
61472: LD_INT 32
61474: PUSH
61475: LD_INT 36
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 101
61511: PUSH
61512: LD_INT 102
61514: PUSH
61515: LD_INT 103
61517: PUSH
61518: LD_INT 104
61520: PUSH
61521: LD_INT 105
61523: PUSH
61524: LD_INT 106
61526: PUSH
61527: LD_INT 107
61529: PUSH
61530: LD_INT 108
61532: PUSH
61533: LD_INT 109
61535: PUSH
61536: LD_INT 110
61538: PUSH
61539: LD_INT 111
61541: PUSH
61542: LD_INT 112
61544: PUSH
61545: LD_INT 114
61547: PUSH
61548: LD_INT 116
61550: PUSH
61551: LD_INT 117
61553: PUSH
61554: LD_INT 118
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: ST_TO_ADDR
61579: GO 63474
61581: LD_INT 11
61583: DOUBLE
61584: EQUAL
61585: IFTRUE 61589
61587: GO 61793
61589: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61590: LD_ADDR_VAR 0 2
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: LD_INT 3
61600: PUSH
61601: LD_INT 4
61603: PUSH
61604: LD_INT 5
61606: PUSH
61607: LD_INT 6
61609: PUSH
61610: LD_INT 7
61612: PUSH
61613: LD_INT 8
61615: PUSH
61616: LD_INT 9
61618: PUSH
61619: LD_INT 10
61621: PUSH
61622: LD_INT 11
61624: PUSH
61625: LD_INT 12
61627: PUSH
61628: LD_INT 13
61630: PUSH
61631: LD_INT 14
61633: PUSH
61634: LD_INT 15
61636: PUSH
61637: LD_INT 16
61639: PUSH
61640: LD_INT 17
61642: PUSH
61643: LD_INT 18
61645: PUSH
61646: LD_INT 19
61648: PUSH
61649: LD_INT 20
61651: PUSH
61652: LD_INT 21
61654: PUSH
61655: LD_INT 22
61657: PUSH
61658: LD_INT 23
61660: PUSH
61661: LD_INT 24
61663: PUSH
61664: LD_INT 25
61666: PUSH
61667: LD_INT 26
61669: PUSH
61670: LD_INT 28
61672: PUSH
61673: LD_INT 30
61675: PUSH
61676: LD_INT 31
61678: PUSH
61679: LD_INT 32
61681: PUSH
61682: LD_INT 34
61684: PUSH
61685: LD_INT 36
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 101
61723: PUSH
61724: LD_INT 102
61726: PUSH
61727: LD_INT 103
61729: PUSH
61730: LD_INT 104
61732: PUSH
61733: LD_INT 105
61735: PUSH
61736: LD_INT 106
61738: PUSH
61739: LD_INT 107
61741: PUSH
61742: LD_INT 108
61744: PUSH
61745: LD_INT 109
61747: PUSH
61748: LD_INT 110
61750: PUSH
61751: LD_INT 111
61753: PUSH
61754: LD_INT 112
61756: PUSH
61757: LD_INT 114
61759: PUSH
61760: LD_INT 116
61762: PUSH
61763: LD_INT 117
61765: PUSH
61766: LD_INT 118
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: ST_TO_ADDR
61791: GO 63474
61793: LD_INT 12
61795: DOUBLE
61796: EQUAL
61797: IFTRUE 61801
61799: GO 62021
61801: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61802: LD_ADDR_VAR 0 2
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: LD_INT 3
61815: PUSH
61816: LD_INT 4
61818: PUSH
61819: LD_INT 5
61821: PUSH
61822: LD_INT 6
61824: PUSH
61825: LD_INT 7
61827: PUSH
61828: LD_INT 8
61830: PUSH
61831: LD_INT 9
61833: PUSH
61834: LD_INT 10
61836: PUSH
61837: LD_INT 11
61839: PUSH
61840: LD_INT 12
61842: PUSH
61843: LD_INT 13
61845: PUSH
61846: LD_INT 14
61848: PUSH
61849: LD_INT 15
61851: PUSH
61852: LD_INT 16
61854: PUSH
61855: LD_INT 17
61857: PUSH
61858: LD_INT 18
61860: PUSH
61861: LD_INT 19
61863: PUSH
61864: LD_INT 20
61866: PUSH
61867: LD_INT 21
61869: PUSH
61870: LD_INT 22
61872: PUSH
61873: LD_INT 23
61875: PUSH
61876: LD_INT 24
61878: PUSH
61879: LD_INT 25
61881: PUSH
61882: LD_INT 26
61884: PUSH
61885: LD_INT 27
61887: PUSH
61888: LD_INT 28
61890: PUSH
61891: LD_INT 30
61893: PUSH
61894: LD_INT 31
61896: PUSH
61897: LD_INT 32
61899: PUSH
61900: LD_INT 33
61902: PUSH
61903: LD_INT 34
61905: PUSH
61906: LD_INT 36
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 101
61947: PUSH
61948: LD_INT 102
61950: PUSH
61951: LD_INT 103
61953: PUSH
61954: LD_INT 104
61956: PUSH
61957: LD_INT 105
61959: PUSH
61960: LD_INT 106
61962: PUSH
61963: LD_INT 107
61965: PUSH
61966: LD_INT 108
61968: PUSH
61969: LD_INT 109
61971: PUSH
61972: LD_INT 110
61974: PUSH
61975: LD_INT 111
61977: PUSH
61978: LD_INT 112
61980: PUSH
61981: LD_INT 113
61983: PUSH
61984: LD_INT 114
61986: PUSH
61987: LD_INT 116
61989: PUSH
61990: LD_INT 117
61992: PUSH
61993: LD_INT 118
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: ST_TO_ADDR
62019: GO 63474
62021: LD_INT 13
62023: DOUBLE
62024: EQUAL
62025: IFTRUE 62029
62027: GO 62237
62029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
62030: LD_ADDR_VAR 0 2
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: LD_INT 2
62040: PUSH
62041: LD_INT 3
62043: PUSH
62044: LD_INT 4
62046: PUSH
62047: LD_INT 5
62049: PUSH
62050: LD_INT 8
62052: PUSH
62053: LD_INT 9
62055: PUSH
62056: LD_INT 10
62058: PUSH
62059: LD_INT 11
62061: PUSH
62062: LD_INT 12
62064: PUSH
62065: LD_INT 14
62067: PUSH
62068: LD_INT 15
62070: PUSH
62071: LD_INT 16
62073: PUSH
62074: LD_INT 17
62076: PUSH
62077: LD_INT 18
62079: PUSH
62080: LD_INT 19
62082: PUSH
62083: LD_INT 20
62085: PUSH
62086: LD_INT 21
62088: PUSH
62089: LD_INT 22
62091: PUSH
62092: LD_INT 23
62094: PUSH
62095: LD_INT 24
62097: PUSH
62098: LD_INT 25
62100: PUSH
62101: LD_INT 26
62103: PUSH
62104: LD_INT 27
62106: PUSH
62107: LD_INT 28
62109: PUSH
62110: LD_INT 30
62112: PUSH
62113: LD_INT 31
62115: PUSH
62116: LD_INT 32
62118: PUSH
62119: LD_INT 33
62121: PUSH
62122: LD_INT 34
62124: PUSH
62125: LD_INT 36
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 101
62163: PUSH
62164: LD_INT 102
62166: PUSH
62167: LD_INT 103
62169: PUSH
62170: LD_INT 104
62172: PUSH
62173: LD_INT 105
62175: PUSH
62176: LD_INT 106
62178: PUSH
62179: LD_INT 107
62181: PUSH
62182: LD_INT 108
62184: PUSH
62185: LD_INT 109
62187: PUSH
62188: LD_INT 110
62190: PUSH
62191: LD_INT 111
62193: PUSH
62194: LD_INT 112
62196: PUSH
62197: LD_INT 113
62199: PUSH
62200: LD_INT 114
62202: PUSH
62203: LD_INT 116
62205: PUSH
62206: LD_INT 117
62208: PUSH
62209: LD_INT 118
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: ST_TO_ADDR
62235: GO 63474
62237: LD_INT 14
62239: DOUBLE
62240: EQUAL
62241: IFTRUE 62245
62243: GO 62469
62245: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
62246: LD_ADDR_VAR 0 2
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: LD_INT 2
62256: PUSH
62257: LD_INT 3
62259: PUSH
62260: LD_INT 4
62262: PUSH
62263: LD_INT 5
62265: PUSH
62266: LD_INT 6
62268: PUSH
62269: LD_INT 7
62271: PUSH
62272: LD_INT 8
62274: PUSH
62275: LD_INT 9
62277: PUSH
62278: LD_INT 10
62280: PUSH
62281: LD_INT 11
62283: PUSH
62284: LD_INT 12
62286: PUSH
62287: LD_INT 13
62289: PUSH
62290: LD_INT 14
62292: PUSH
62293: LD_INT 15
62295: PUSH
62296: LD_INT 16
62298: PUSH
62299: LD_INT 17
62301: PUSH
62302: LD_INT 18
62304: PUSH
62305: LD_INT 19
62307: PUSH
62308: LD_INT 20
62310: PUSH
62311: LD_INT 21
62313: PUSH
62314: LD_INT 22
62316: PUSH
62317: LD_INT 23
62319: PUSH
62320: LD_INT 24
62322: PUSH
62323: LD_INT 25
62325: PUSH
62326: LD_INT 26
62328: PUSH
62329: LD_INT 27
62331: PUSH
62332: LD_INT 28
62334: PUSH
62335: LD_INT 29
62337: PUSH
62338: LD_INT 30
62340: PUSH
62341: LD_INT 31
62343: PUSH
62344: LD_INT 32
62346: PUSH
62347: LD_INT 33
62349: PUSH
62350: LD_INT 34
62352: PUSH
62353: LD_INT 36
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 101
62395: PUSH
62396: LD_INT 102
62398: PUSH
62399: LD_INT 103
62401: PUSH
62402: LD_INT 104
62404: PUSH
62405: LD_INT 105
62407: PUSH
62408: LD_INT 106
62410: PUSH
62411: LD_INT 107
62413: PUSH
62414: LD_INT 108
62416: PUSH
62417: LD_INT 109
62419: PUSH
62420: LD_INT 110
62422: PUSH
62423: LD_INT 111
62425: PUSH
62426: LD_INT 112
62428: PUSH
62429: LD_INT 113
62431: PUSH
62432: LD_INT 114
62434: PUSH
62435: LD_INT 116
62437: PUSH
62438: LD_INT 117
62440: PUSH
62441: LD_INT 118
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: ST_TO_ADDR
62467: GO 63474
62469: LD_INT 15
62471: DOUBLE
62472: EQUAL
62473: IFTRUE 62477
62475: GO 62701
62477: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
62478: LD_ADDR_VAR 0 2
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: LD_INT 3
62491: PUSH
62492: LD_INT 4
62494: PUSH
62495: LD_INT 5
62497: PUSH
62498: LD_INT 6
62500: PUSH
62501: LD_INT 7
62503: PUSH
62504: LD_INT 8
62506: PUSH
62507: LD_INT 9
62509: PUSH
62510: LD_INT 10
62512: PUSH
62513: LD_INT 11
62515: PUSH
62516: LD_INT 12
62518: PUSH
62519: LD_INT 13
62521: PUSH
62522: LD_INT 14
62524: PUSH
62525: LD_INT 15
62527: PUSH
62528: LD_INT 16
62530: PUSH
62531: LD_INT 17
62533: PUSH
62534: LD_INT 18
62536: PUSH
62537: LD_INT 19
62539: PUSH
62540: LD_INT 20
62542: PUSH
62543: LD_INT 21
62545: PUSH
62546: LD_INT 22
62548: PUSH
62549: LD_INT 23
62551: PUSH
62552: LD_INT 24
62554: PUSH
62555: LD_INT 25
62557: PUSH
62558: LD_INT 26
62560: PUSH
62561: LD_INT 27
62563: PUSH
62564: LD_INT 28
62566: PUSH
62567: LD_INT 29
62569: PUSH
62570: LD_INT 30
62572: PUSH
62573: LD_INT 31
62575: PUSH
62576: LD_INT 32
62578: PUSH
62579: LD_INT 33
62581: PUSH
62582: LD_INT 34
62584: PUSH
62585: LD_INT 36
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 101
62627: PUSH
62628: LD_INT 102
62630: PUSH
62631: LD_INT 103
62633: PUSH
62634: LD_INT 104
62636: PUSH
62637: LD_INT 105
62639: PUSH
62640: LD_INT 106
62642: PUSH
62643: LD_INT 107
62645: PUSH
62646: LD_INT 108
62648: PUSH
62649: LD_INT 109
62651: PUSH
62652: LD_INT 110
62654: PUSH
62655: LD_INT 111
62657: PUSH
62658: LD_INT 112
62660: PUSH
62661: LD_INT 113
62663: PUSH
62664: LD_INT 114
62666: PUSH
62667: LD_INT 116
62669: PUSH
62670: LD_INT 117
62672: PUSH
62673: LD_INT 118
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: ST_TO_ADDR
62699: GO 63474
62701: LD_INT 16
62703: DOUBLE
62704: EQUAL
62705: IFTRUE 62709
62707: GO 62845
62709: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62710: LD_ADDR_VAR 0 2
62714: PUSH
62715: LD_INT 2
62717: PUSH
62718: LD_INT 4
62720: PUSH
62721: LD_INT 5
62723: PUSH
62724: LD_INT 7
62726: PUSH
62727: LD_INT 11
62729: PUSH
62730: LD_INT 12
62732: PUSH
62733: LD_INT 15
62735: PUSH
62736: LD_INT 16
62738: PUSH
62739: LD_INT 20
62741: PUSH
62742: LD_INT 21
62744: PUSH
62745: LD_INT 22
62747: PUSH
62748: LD_INT 23
62750: PUSH
62751: LD_INT 25
62753: PUSH
62754: LD_INT 26
62756: PUSH
62757: LD_INT 30
62759: PUSH
62760: LD_INT 31
62762: PUSH
62763: LD_INT 32
62765: PUSH
62766: LD_INT 33
62768: PUSH
62769: LD_INT 34
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 101
62795: PUSH
62796: LD_INT 102
62798: PUSH
62799: LD_INT 103
62801: PUSH
62802: LD_INT 106
62804: PUSH
62805: LD_INT 108
62807: PUSH
62808: LD_INT 112
62810: PUSH
62811: LD_INT 113
62813: PUSH
62814: LD_INT 114
62816: PUSH
62817: LD_INT 116
62819: PUSH
62820: LD_INT 117
62822: PUSH
62823: LD_INT 118
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: ST_TO_ADDR
62843: GO 63474
62845: LD_INT 17
62847: DOUBLE
62848: EQUAL
62849: IFTRUE 62853
62851: GO 63077
62853: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62854: LD_ADDR_VAR 0 2
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: LD_INT 3
62867: PUSH
62868: LD_INT 4
62870: PUSH
62871: LD_INT 5
62873: PUSH
62874: LD_INT 6
62876: PUSH
62877: LD_INT 7
62879: PUSH
62880: LD_INT 8
62882: PUSH
62883: LD_INT 9
62885: PUSH
62886: LD_INT 10
62888: PUSH
62889: LD_INT 11
62891: PUSH
62892: LD_INT 12
62894: PUSH
62895: LD_INT 13
62897: PUSH
62898: LD_INT 14
62900: PUSH
62901: LD_INT 15
62903: PUSH
62904: LD_INT 16
62906: PUSH
62907: LD_INT 17
62909: PUSH
62910: LD_INT 18
62912: PUSH
62913: LD_INT 19
62915: PUSH
62916: LD_INT 20
62918: PUSH
62919: LD_INT 21
62921: PUSH
62922: LD_INT 22
62924: PUSH
62925: LD_INT 23
62927: PUSH
62928: LD_INT 24
62930: PUSH
62931: LD_INT 25
62933: PUSH
62934: LD_INT 26
62936: PUSH
62937: LD_INT 27
62939: PUSH
62940: LD_INT 28
62942: PUSH
62943: LD_INT 29
62945: PUSH
62946: LD_INT 30
62948: PUSH
62949: LD_INT 31
62951: PUSH
62952: LD_INT 32
62954: PUSH
62955: LD_INT 33
62957: PUSH
62958: LD_INT 34
62960: PUSH
62961: LD_INT 36
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 101
63003: PUSH
63004: LD_INT 102
63006: PUSH
63007: LD_INT 103
63009: PUSH
63010: LD_INT 104
63012: PUSH
63013: LD_INT 105
63015: PUSH
63016: LD_INT 106
63018: PUSH
63019: LD_INT 107
63021: PUSH
63022: LD_INT 108
63024: PUSH
63025: LD_INT 109
63027: PUSH
63028: LD_INT 110
63030: PUSH
63031: LD_INT 111
63033: PUSH
63034: LD_INT 112
63036: PUSH
63037: LD_INT 113
63039: PUSH
63040: LD_INT 114
63042: PUSH
63043: LD_INT 116
63045: PUSH
63046: LD_INT 117
63048: PUSH
63049: LD_INT 118
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: ST_TO_ADDR
63075: GO 63474
63077: LD_INT 18
63079: DOUBLE
63080: EQUAL
63081: IFTRUE 63085
63083: GO 63233
63085: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
63086: LD_ADDR_VAR 0 2
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: LD_INT 4
63096: PUSH
63097: LD_INT 5
63099: PUSH
63100: LD_INT 7
63102: PUSH
63103: LD_INT 11
63105: PUSH
63106: LD_INT 12
63108: PUSH
63109: LD_INT 15
63111: PUSH
63112: LD_INT 16
63114: PUSH
63115: LD_INT 20
63117: PUSH
63118: LD_INT 21
63120: PUSH
63121: LD_INT 22
63123: PUSH
63124: LD_INT 23
63126: PUSH
63127: LD_INT 25
63129: PUSH
63130: LD_INT 26
63132: PUSH
63133: LD_INT 30
63135: PUSH
63136: LD_INT 31
63138: PUSH
63139: LD_INT 32
63141: PUSH
63142: LD_INT 33
63144: PUSH
63145: LD_INT 34
63147: PUSH
63148: LD_INT 35
63150: PUSH
63151: LD_INT 36
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 101
63179: PUSH
63180: LD_INT 102
63182: PUSH
63183: LD_INT 103
63185: PUSH
63186: LD_INT 106
63188: PUSH
63189: LD_INT 108
63191: PUSH
63192: LD_INT 112
63194: PUSH
63195: LD_INT 113
63197: PUSH
63198: LD_INT 114
63200: PUSH
63201: LD_INT 115
63203: PUSH
63204: LD_INT 116
63206: PUSH
63207: LD_INT 117
63209: PUSH
63210: LD_INT 118
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: ST_TO_ADDR
63231: GO 63474
63233: LD_INT 19
63235: DOUBLE
63236: EQUAL
63237: IFTRUE 63241
63239: GO 63473
63241: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
63242: LD_ADDR_VAR 0 2
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: LD_INT 2
63252: PUSH
63253: LD_INT 3
63255: PUSH
63256: LD_INT 4
63258: PUSH
63259: LD_INT 5
63261: PUSH
63262: LD_INT 6
63264: PUSH
63265: LD_INT 7
63267: PUSH
63268: LD_INT 8
63270: PUSH
63271: LD_INT 9
63273: PUSH
63274: LD_INT 10
63276: PUSH
63277: LD_INT 11
63279: PUSH
63280: LD_INT 12
63282: PUSH
63283: LD_INT 13
63285: PUSH
63286: LD_INT 14
63288: PUSH
63289: LD_INT 15
63291: PUSH
63292: LD_INT 16
63294: PUSH
63295: LD_INT 17
63297: PUSH
63298: LD_INT 18
63300: PUSH
63301: LD_INT 19
63303: PUSH
63304: LD_INT 20
63306: PUSH
63307: LD_INT 21
63309: PUSH
63310: LD_INT 22
63312: PUSH
63313: LD_INT 23
63315: PUSH
63316: LD_INT 24
63318: PUSH
63319: LD_INT 25
63321: PUSH
63322: LD_INT 26
63324: PUSH
63325: LD_INT 27
63327: PUSH
63328: LD_INT 28
63330: PUSH
63331: LD_INT 29
63333: PUSH
63334: LD_INT 30
63336: PUSH
63337: LD_INT 31
63339: PUSH
63340: LD_INT 32
63342: PUSH
63343: LD_INT 33
63345: PUSH
63346: LD_INT 34
63348: PUSH
63349: LD_INT 35
63351: PUSH
63352: LD_INT 36
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 101
63395: PUSH
63396: LD_INT 102
63398: PUSH
63399: LD_INT 103
63401: PUSH
63402: LD_INT 104
63404: PUSH
63405: LD_INT 105
63407: PUSH
63408: LD_INT 106
63410: PUSH
63411: LD_INT 107
63413: PUSH
63414: LD_INT 108
63416: PUSH
63417: LD_INT 109
63419: PUSH
63420: LD_INT 110
63422: PUSH
63423: LD_INT 111
63425: PUSH
63426: LD_INT 112
63428: PUSH
63429: LD_INT 113
63431: PUSH
63432: LD_INT 114
63434: PUSH
63435: LD_INT 115
63437: PUSH
63438: LD_INT 116
63440: PUSH
63441: LD_INT 117
63443: PUSH
63444: LD_INT 118
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: ST_TO_ADDR
63471: GO 63474
63473: POP
// end else
63474: GO 63705
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
63476: LD_ADDR_VAR 0 2
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: LD_INT 2
63486: PUSH
63487: LD_INT 3
63489: PUSH
63490: LD_INT 4
63492: PUSH
63493: LD_INT 5
63495: PUSH
63496: LD_INT 6
63498: PUSH
63499: LD_INT 7
63501: PUSH
63502: LD_INT 8
63504: PUSH
63505: LD_INT 9
63507: PUSH
63508: LD_INT 10
63510: PUSH
63511: LD_INT 11
63513: PUSH
63514: LD_INT 12
63516: PUSH
63517: LD_INT 13
63519: PUSH
63520: LD_INT 14
63522: PUSH
63523: LD_INT 15
63525: PUSH
63526: LD_INT 16
63528: PUSH
63529: LD_INT 17
63531: PUSH
63532: LD_INT 18
63534: PUSH
63535: LD_INT 19
63537: PUSH
63538: LD_INT 20
63540: PUSH
63541: LD_INT 21
63543: PUSH
63544: LD_INT 22
63546: PUSH
63547: LD_INT 23
63549: PUSH
63550: LD_INT 24
63552: PUSH
63553: LD_INT 25
63555: PUSH
63556: LD_INT 26
63558: PUSH
63559: LD_INT 27
63561: PUSH
63562: LD_INT 28
63564: PUSH
63565: LD_INT 29
63567: PUSH
63568: LD_INT 30
63570: PUSH
63571: LD_INT 31
63573: PUSH
63574: LD_INT 32
63576: PUSH
63577: LD_INT 33
63579: PUSH
63580: LD_INT 34
63582: PUSH
63583: LD_INT 35
63585: PUSH
63586: LD_INT 36
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 101
63629: PUSH
63630: LD_INT 102
63632: PUSH
63633: LD_INT 103
63635: PUSH
63636: LD_INT 104
63638: PUSH
63639: LD_INT 105
63641: PUSH
63642: LD_INT 106
63644: PUSH
63645: LD_INT 107
63647: PUSH
63648: LD_INT 108
63650: PUSH
63651: LD_INT 109
63653: PUSH
63654: LD_INT 110
63656: PUSH
63657: LD_INT 111
63659: PUSH
63660: LD_INT 112
63662: PUSH
63663: LD_INT 113
63665: PUSH
63666: LD_INT 114
63668: PUSH
63669: LD_INT 115
63671: PUSH
63672: LD_INT 116
63674: PUSH
63675: LD_INT 117
63677: PUSH
63678: LD_INT 118
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: ST_TO_ADDR
// if result then
63705: LD_VAR 0 2
63709: IFFALSE 64495
// begin normal :=  ;
63711: LD_ADDR_VAR 0 5
63715: PUSH
63716: LD_STRING 
63718: ST_TO_ADDR
// hardcore :=  ;
63719: LD_ADDR_VAR 0 6
63723: PUSH
63724: LD_STRING 
63726: ST_TO_ADDR
// active :=  ;
63727: LD_ADDR_VAR 0 7
63731: PUSH
63732: LD_STRING 
63734: ST_TO_ADDR
// for i = 1 to normalCounter do
63735: LD_ADDR_VAR 0 8
63739: PUSH
63740: DOUBLE
63741: LD_INT 1
63743: DEC
63744: ST_TO_ADDR
63745: LD_EXP 39
63749: PUSH
63750: FOR_TO
63751: IFFALSE 63852
// begin tmp := 0 ;
63753: LD_ADDR_VAR 0 3
63757: PUSH
63758: LD_STRING 0
63760: ST_TO_ADDR
// if result [ 1 ] then
63761: LD_VAR 0 2
63765: PUSH
63766: LD_INT 1
63768: ARRAY
63769: IFFALSE 63834
// if result [ 1 ] [ 1 ] = i then
63771: LD_VAR 0 2
63775: PUSH
63776: LD_INT 1
63778: ARRAY
63779: PUSH
63780: LD_INT 1
63782: ARRAY
63783: PUSH
63784: LD_VAR 0 8
63788: EQUAL
63789: IFFALSE 63834
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63791: LD_ADDR_VAR 0 2
63795: PUSH
63796: LD_VAR 0 2
63800: PPUSH
63801: LD_INT 1
63803: PPUSH
63804: LD_VAR 0 2
63808: PUSH
63809: LD_INT 1
63811: ARRAY
63812: PPUSH
63813: LD_INT 1
63815: PPUSH
63816: CALL_OW 3
63820: PPUSH
63821: CALL_OW 1
63825: ST_TO_ADDR
// tmp := 1 ;
63826: LD_ADDR_VAR 0 3
63830: PUSH
63831: LD_STRING 1
63833: ST_TO_ADDR
// end ; normal := normal & tmp ;
63834: LD_ADDR_VAR 0 5
63838: PUSH
63839: LD_VAR 0 5
63843: PUSH
63844: LD_VAR 0 3
63848: STR
63849: ST_TO_ADDR
// end ;
63850: GO 63750
63852: POP
63853: POP
// for i = 1 to hardcoreCounter do
63854: LD_ADDR_VAR 0 8
63858: PUSH
63859: DOUBLE
63860: LD_INT 1
63862: DEC
63863: ST_TO_ADDR
63864: LD_EXP 40
63868: PUSH
63869: FOR_TO
63870: IFFALSE 63975
// begin tmp := 0 ;
63872: LD_ADDR_VAR 0 3
63876: PUSH
63877: LD_STRING 0
63879: ST_TO_ADDR
// if result [ 2 ] then
63880: LD_VAR 0 2
63884: PUSH
63885: LD_INT 2
63887: ARRAY
63888: IFFALSE 63957
// if result [ 2 ] [ 1 ] = 100 + i then
63890: LD_VAR 0 2
63894: PUSH
63895: LD_INT 2
63897: ARRAY
63898: PUSH
63899: LD_INT 1
63901: ARRAY
63902: PUSH
63903: LD_INT 100
63905: PUSH
63906: LD_VAR 0 8
63910: PLUS
63911: EQUAL
63912: IFFALSE 63957
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63914: LD_ADDR_VAR 0 2
63918: PUSH
63919: LD_VAR 0 2
63923: PPUSH
63924: LD_INT 2
63926: PPUSH
63927: LD_VAR 0 2
63931: PUSH
63932: LD_INT 2
63934: ARRAY
63935: PPUSH
63936: LD_INT 1
63938: PPUSH
63939: CALL_OW 3
63943: PPUSH
63944: CALL_OW 1
63948: ST_TO_ADDR
// tmp := 1 ;
63949: LD_ADDR_VAR 0 3
63953: PUSH
63954: LD_STRING 1
63956: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63957: LD_ADDR_VAR 0 6
63961: PUSH
63962: LD_VAR 0 6
63966: PUSH
63967: LD_VAR 0 3
63971: STR
63972: ST_TO_ADDR
// end ;
63973: GO 63869
63975: POP
63976: POP
// if isGameLoad then
63977: LD_VAR 0 1
63981: IFFALSE 64456
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63983: LD_ADDR_VAR 0 4
63987: PUSH
63988: LD_EXP 43
63992: PUSH
63993: LD_EXP 42
63997: PUSH
63998: LD_EXP 44
64002: PUSH
64003: LD_EXP 41
64007: PUSH
64008: LD_EXP 45
64012: PUSH
64013: LD_EXP 46
64017: PUSH
64018: LD_EXP 47
64022: PUSH
64023: LD_EXP 48
64027: PUSH
64028: LD_EXP 49
64032: PUSH
64033: LD_EXP 50
64037: PUSH
64038: LD_EXP 51
64042: PUSH
64043: LD_EXP 52
64047: PUSH
64048: LD_EXP 53
64052: PUSH
64053: LD_EXP 54
64057: PUSH
64058: LD_EXP 62
64062: PUSH
64063: LD_EXP 63
64067: PUSH
64068: LD_EXP 64
64072: PUSH
64073: LD_EXP 65
64077: PUSH
64078: LD_EXP 67
64082: PUSH
64083: LD_EXP 68
64087: PUSH
64088: LD_EXP 69
64092: PUSH
64093: LD_EXP 72
64097: PUSH
64098: LD_EXP 74
64102: PUSH
64103: LD_EXP 75
64107: PUSH
64108: LD_EXP 76
64112: PUSH
64113: LD_EXP 78
64117: PUSH
64118: LD_EXP 79
64122: PUSH
64123: LD_EXP 82
64127: PUSH
64128: LD_EXP 83
64132: PUSH
64133: LD_EXP 84
64137: PUSH
64138: LD_EXP 85
64142: PUSH
64143: LD_EXP 86
64147: PUSH
64148: LD_EXP 87
64152: PUSH
64153: LD_EXP 88
64157: PUSH
64158: LD_EXP 89
64162: PUSH
64163: LD_EXP 90
64167: PUSH
64168: LD_EXP 55
64172: PUSH
64173: LD_EXP 56
64177: PUSH
64178: LD_EXP 59
64182: PUSH
64183: LD_EXP 60
64187: PUSH
64188: LD_EXP 61
64192: PUSH
64193: LD_EXP 57
64197: PUSH
64198: LD_EXP 58
64202: PUSH
64203: LD_EXP 66
64207: PUSH
64208: LD_EXP 70
64212: PUSH
64213: LD_EXP 71
64217: PUSH
64218: LD_EXP 73
64222: PUSH
64223: LD_EXP 77
64227: PUSH
64228: LD_EXP 80
64232: PUSH
64233: LD_EXP 81
64237: PUSH
64238: LD_EXP 91
64242: PUSH
64243: LD_EXP 92
64247: PUSH
64248: LD_EXP 93
64252: PUSH
64253: LD_EXP 94
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: ST_TO_ADDR
// tmp :=  ;
64314: LD_ADDR_VAR 0 3
64318: PUSH
64319: LD_STRING 
64321: ST_TO_ADDR
// for i = 1 to normalCounter do
64322: LD_ADDR_VAR 0 8
64326: PUSH
64327: DOUBLE
64328: LD_INT 1
64330: DEC
64331: ST_TO_ADDR
64332: LD_EXP 39
64336: PUSH
64337: FOR_TO
64338: IFFALSE 64374
// begin if flags [ i ] then
64340: LD_VAR 0 4
64344: PUSH
64345: LD_VAR 0 8
64349: ARRAY
64350: IFFALSE 64372
// tmp := tmp & i & ; ;
64352: LD_ADDR_VAR 0 3
64356: PUSH
64357: LD_VAR 0 3
64361: PUSH
64362: LD_VAR 0 8
64366: STR
64367: PUSH
64368: LD_STRING ;
64370: STR
64371: ST_TO_ADDR
// end ;
64372: GO 64337
64374: POP
64375: POP
// for i = 1 to hardcoreCounter do
64376: LD_ADDR_VAR 0 8
64380: PUSH
64381: DOUBLE
64382: LD_INT 1
64384: DEC
64385: ST_TO_ADDR
64386: LD_EXP 40
64390: PUSH
64391: FOR_TO
64392: IFFALSE 64438
// begin if flags [ normalCounter + i ] then
64394: LD_VAR 0 4
64398: PUSH
64399: LD_EXP 39
64403: PUSH
64404: LD_VAR 0 8
64408: PLUS
64409: ARRAY
64410: IFFALSE 64436
// tmp := tmp & ( 100 + i ) & ; ;
64412: LD_ADDR_VAR 0 3
64416: PUSH
64417: LD_VAR 0 3
64421: PUSH
64422: LD_INT 100
64424: PUSH
64425: LD_VAR 0 8
64429: PLUS
64430: STR
64431: PUSH
64432: LD_STRING ;
64434: STR
64435: ST_TO_ADDR
// end ;
64436: GO 64391
64438: POP
64439: POP
// if tmp then
64440: LD_VAR 0 3
64444: IFFALSE 64456
// active := tmp ;
64446: LD_ADDR_VAR 0 7
64450: PUSH
64451: LD_VAR 0 3
64455: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
64456: LD_STRING getStreamItemsFromMission("
64458: PUSH
64459: LD_VAR 0 5
64463: STR
64464: PUSH
64465: LD_STRING ","
64467: STR
64468: PUSH
64469: LD_VAR 0 6
64473: STR
64474: PUSH
64475: LD_STRING ","
64477: STR
64478: PUSH
64479: LD_VAR 0 7
64483: STR
64484: PUSH
64485: LD_STRING ")
64487: STR
64488: PPUSH
64489: CALL_OW 559
// end else
64493: GO 64502
// ToLua ( getStreamItemsFromMission("","","") ) ;
64495: LD_STRING getStreamItemsFromMission("","","")
64497: PPUSH
64498: CALL_OW 559
// end ;
64502: LD_VAR 0 2
64506: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64507: LD_EXP 38
64511: PUSH
64512: LD_EXP 43
64516: AND
64517: IFFALSE 64641
64519: GO 64521
64521: DISABLE
64522: LD_INT 0
64524: PPUSH
64525: PPUSH
// begin enable ;
64526: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64527: LD_ADDR_VAR 0 2
64531: PUSH
64532: LD_INT 22
64534: PUSH
64535: LD_OWVAR 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: LD_INT 34
64549: PUSH
64550: LD_INT 7
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 34
64559: PUSH
64560: LD_INT 45
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 34
64569: PUSH
64570: LD_INT 28
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 34
64579: PUSH
64580: LD_INT 47
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PPUSH
64598: CALL_OW 69
64602: ST_TO_ADDR
// if not tmp then
64603: LD_VAR 0 2
64607: NOT
64608: IFFALSE 64612
// exit ;
64610: GO 64641
// for i in tmp do
64612: LD_ADDR_VAR 0 1
64616: PUSH
64617: LD_VAR 0 2
64621: PUSH
64622: FOR_IN
64623: IFFALSE 64639
// begin SetLives ( i , 0 ) ;
64625: LD_VAR 0 1
64629: PPUSH
64630: LD_INT 0
64632: PPUSH
64633: CALL_OW 234
// end ;
64637: GO 64622
64639: POP
64640: POP
// end ;
64641: PPOPN 2
64643: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64644: LD_EXP 38
64648: PUSH
64649: LD_EXP 44
64653: AND
64654: IFFALSE 64738
64656: GO 64658
64658: DISABLE
64659: LD_INT 0
64661: PPUSH
64662: PPUSH
// begin enable ;
64663: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64664: LD_ADDR_VAR 0 2
64668: PUSH
64669: LD_INT 22
64671: PUSH
64672: LD_OWVAR 2
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 32
64683: PUSH
64684: LD_INT 3
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PPUSH
64695: CALL_OW 69
64699: ST_TO_ADDR
// if not tmp then
64700: LD_VAR 0 2
64704: NOT
64705: IFFALSE 64709
// exit ;
64707: GO 64738
// for i in tmp do
64709: LD_ADDR_VAR 0 1
64713: PUSH
64714: LD_VAR 0 2
64718: PUSH
64719: FOR_IN
64720: IFFALSE 64736
// begin SetLives ( i , 0 ) ;
64722: LD_VAR 0 1
64726: PPUSH
64727: LD_INT 0
64729: PPUSH
64730: CALL_OW 234
// end ;
64734: GO 64719
64736: POP
64737: POP
// end ;
64738: PPOPN 2
64740: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64741: LD_EXP 38
64745: PUSH
64746: LD_EXP 41
64750: AND
64751: IFFALSE 64844
64753: GO 64755
64755: DISABLE
64756: LD_INT 0
64758: PPUSH
// begin enable ;
64759: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64760: LD_ADDR_VAR 0 1
64764: PUSH
64765: LD_INT 22
64767: PUSH
64768: LD_OWVAR 2
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 2
64779: PUSH
64780: LD_INT 25
64782: PUSH
64783: LD_INT 5
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 25
64792: PUSH
64793: LD_INT 9
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 25
64802: PUSH
64803: LD_INT 8
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PPUSH
64820: CALL_OW 69
64824: PUSH
64825: FOR_IN
64826: IFFALSE 64842
// begin SetClass ( i , 1 ) ;
64828: LD_VAR 0 1
64832: PPUSH
64833: LD_INT 1
64835: PPUSH
64836: CALL_OW 336
// end ;
64840: GO 64825
64842: POP
64843: POP
// end ;
64844: PPOPN 1
64846: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64847: LD_EXP 38
64851: PUSH
64852: LD_EXP 42
64856: AND
64857: PUSH
64858: LD_OWVAR 65
64862: PUSH
64863: LD_INT 7
64865: LESS
64866: AND
64867: IFFALSE 64881
64869: GO 64871
64871: DISABLE
// begin enable ;
64872: ENABLE
// game_speed := 7 ;
64873: LD_ADDR_OWVAR 65
64877: PUSH
64878: LD_INT 7
64880: ST_TO_ADDR
// end ;
64881: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64882: LD_EXP 38
64886: PUSH
64887: LD_EXP 45
64891: AND
64892: IFFALSE 65094
64894: GO 64896
64896: DISABLE
64897: LD_INT 0
64899: PPUSH
64900: PPUSH
64901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64902: LD_ADDR_VAR 0 3
64906: PUSH
64907: LD_INT 81
64909: PUSH
64910: LD_OWVAR 2
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 21
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PPUSH
64933: CALL_OW 69
64937: ST_TO_ADDR
// if not tmp then
64938: LD_VAR 0 3
64942: NOT
64943: IFFALSE 64947
// exit ;
64945: GO 65094
// if tmp > 5 then
64947: LD_VAR 0 3
64951: PUSH
64952: LD_INT 5
64954: GREATER
64955: IFFALSE 64967
// k := 5 else
64957: LD_ADDR_VAR 0 2
64961: PUSH
64962: LD_INT 5
64964: ST_TO_ADDR
64965: GO 64977
// k := tmp ;
64967: LD_ADDR_VAR 0 2
64971: PUSH
64972: LD_VAR 0 3
64976: ST_TO_ADDR
// for i := 1 to k do
64977: LD_ADDR_VAR 0 1
64981: PUSH
64982: DOUBLE
64983: LD_INT 1
64985: DEC
64986: ST_TO_ADDR
64987: LD_VAR 0 2
64991: PUSH
64992: FOR_TO
64993: IFFALSE 65092
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64995: LD_VAR 0 3
64999: PUSH
65000: LD_VAR 0 1
65004: ARRAY
65005: PPUSH
65006: LD_VAR 0 1
65010: PUSH
65011: LD_INT 4
65013: MOD
65014: PUSH
65015: LD_INT 1
65017: PLUS
65018: PPUSH
65019: CALL_OW 259
65023: PUSH
65024: LD_INT 10
65026: LESS
65027: IFFALSE 65090
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
65029: LD_VAR 0 3
65033: PUSH
65034: LD_VAR 0 1
65038: ARRAY
65039: PPUSH
65040: LD_VAR 0 1
65044: PUSH
65045: LD_INT 4
65047: MOD
65048: PUSH
65049: LD_INT 1
65051: PLUS
65052: PPUSH
65053: LD_VAR 0 3
65057: PUSH
65058: LD_VAR 0 1
65062: ARRAY
65063: PPUSH
65064: LD_VAR 0 1
65068: PUSH
65069: LD_INT 4
65071: MOD
65072: PUSH
65073: LD_INT 1
65075: PLUS
65076: PPUSH
65077: CALL_OW 259
65081: PUSH
65082: LD_INT 1
65084: PLUS
65085: PPUSH
65086: CALL_OW 237
65090: GO 64992
65092: POP
65093: POP
// end ;
65094: PPOPN 3
65096: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
65097: LD_EXP 38
65101: PUSH
65102: LD_EXP 46
65106: AND
65107: IFFALSE 65127
65109: GO 65111
65111: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
65112: LD_INT 4
65114: PPUSH
65115: LD_OWVAR 2
65119: PPUSH
65120: LD_INT 0
65122: PPUSH
65123: CALL_OW 324
65127: END
// every 0 0$1 trigger StreamModeActive and sShovel do
65128: LD_EXP 38
65132: PUSH
65133: LD_EXP 75
65137: AND
65138: IFFALSE 65158
65140: GO 65142
65142: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
65143: LD_INT 19
65145: PPUSH
65146: LD_OWVAR 2
65150: PPUSH
65151: LD_INT 0
65153: PPUSH
65154: CALL_OW 324
65158: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
65159: LD_EXP 38
65163: PUSH
65164: LD_EXP 47
65168: AND
65169: IFFALSE 65271
65171: GO 65173
65173: DISABLE
65174: LD_INT 0
65176: PPUSH
65177: PPUSH
// begin enable ;
65178: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
65179: LD_ADDR_VAR 0 2
65183: PUSH
65184: LD_INT 22
65186: PUSH
65187: LD_OWVAR 2
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 2
65198: PUSH
65199: LD_INT 34
65201: PUSH
65202: LD_INT 11
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 34
65211: PUSH
65212: LD_INT 30
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PPUSH
65228: CALL_OW 69
65232: ST_TO_ADDR
// if not tmp then
65233: LD_VAR 0 2
65237: NOT
65238: IFFALSE 65242
// exit ;
65240: GO 65271
// for i in tmp do
65242: LD_ADDR_VAR 0 1
65246: PUSH
65247: LD_VAR 0 2
65251: PUSH
65252: FOR_IN
65253: IFFALSE 65269
// begin SetLives ( i , 0 ) ;
65255: LD_VAR 0 1
65259: PPUSH
65260: LD_INT 0
65262: PPUSH
65263: CALL_OW 234
// end ;
65267: GO 65252
65269: POP
65270: POP
// end ;
65271: PPOPN 2
65273: END
// every 0 0$1 trigger StreamModeActive and sBunker do
65274: LD_EXP 38
65278: PUSH
65279: LD_EXP 48
65283: AND
65284: IFFALSE 65304
65286: GO 65288
65288: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
65289: LD_INT 32
65291: PPUSH
65292: LD_OWVAR 2
65296: PPUSH
65297: LD_INT 0
65299: PPUSH
65300: CALL_OW 324
65304: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
65305: LD_EXP 38
65309: PUSH
65310: LD_EXP 49
65314: AND
65315: IFFALSE 65496
65317: GO 65319
65319: DISABLE
65320: LD_INT 0
65322: PPUSH
65323: PPUSH
65324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
65325: LD_ADDR_VAR 0 2
65329: PUSH
65330: LD_INT 22
65332: PUSH
65333: LD_OWVAR 2
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 33
65344: PUSH
65345: LD_INT 3
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PPUSH
65356: CALL_OW 69
65360: ST_TO_ADDR
// if not tmp then
65361: LD_VAR 0 2
65365: NOT
65366: IFFALSE 65370
// exit ;
65368: GO 65496
// side := 0 ;
65370: LD_ADDR_VAR 0 3
65374: PUSH
65375: LD_INT 0
65377: ST_TO_ADDR
// for i := 1 to 8 do
65378: LD_ADDR_VAR 0 1
65382: PUSH
65383: DOUBLE
65384: LD_INT 1
65386: DEC
65387: ST_TO_ADDR
65388: LD_INT 8
65390: PUSH
65391: FOR_TO
65392: IFFALSE 65440
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
65394: LD_OWVAR 2
65398: PUSH
65399: LD_VAR 0 1
65403: NONEQUAL
65404: PUSH
65405: LD_OWVAR 2
65409: PPUSH
65410: LD_VAR 0 1
65414: PPUSH
65415: CALL_OW 81
65419: PUSH
65420: LD_INT 2
65422: EQUAL
65423: AND
65424: IFFALSE 65438
// begin side := i ;
65426: LD_ADDR_VAR 0 3
65430: PUSH
65431: LD_VAR 0 1
65435: ST_TO_ADDR
// break ;
65436: GO 65440
// end ;
65438: GO 65391
65440: POP
65441: POP
// if not side then
65442: LD_VAR 0 3
65446: NOT
65447: IFFALSE 65451
// exit ;
65449: GO 65496
// for i := 1 to tmp do
65451: LD_ADDR_VAR 0 1
65455: PUSH
65456: DOUBLE
65457: LD_INT 1
65459: DEC
65460: ST_TO_ADDR
65461: LD_VAR 0 2
65465: PUSH
65466: FOR_TO
65467: IFFALSE 65494
// if Prob ( 60 ) then
65469: LD_INT 60
65471: PPUSH
65472: CALL_OW 13
65476: IFFALSE 65492
// SetSide ( i , side ) ;
65478: LD_VAR 0 1
65482: PPUSH
65483: LD_VAR 0 3
65487: PPUSH
65488: CALL_OW 235
65492: GO 65466
65494: POP
65495: POP
// end ;
65496: PPOPN 3
65498: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65499: LD_EXP 38
65503: PUSH
65504: LD_EXP 51
65508: AND
65509: IFFALSE 65628
65511: GO 65513
65513: DISABLE
65514: LD_INT 0
65516: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65517: LD_ADDR_VAR 0 1
65521: PUSH
65522: LD_INT 22
65524: PUSH
65525: LD_OWVAR 2
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 21
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 3
65546: PUSH
65547: LD_INT 23
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: LIST
65565: PPUSH
65566: CALL_OW 69
65570: PUSH
65571: FOR_IN
65572: IFFALSE 65626
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65574: LD_VAR 0 1
65578: PPUSH
65579: CALL_OW 257
65583: PUSH
65584: LD_INT 1
65586: PUSH
65587: LD_INT 2
65589: PUSH
65590: LD_INT 3
65592: PUSH
65593: LD_INT 4
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: IN
65602: IFFALSE 65624
// SetClass ( un , rand ( 1 , 4 ) ) ;
65604: LD_VAR 0 1
65608: PPUSH
65609: LD_INT 1
65611: PPUSH
65612: LD_INT 4
65614: PPUSH
65615: CALL_OW 12
65619: PPUSH
65620: CALL_OW 336
65624: GO 65571
65626: POP
65627: POP
// end ;
65628: PPOPN 1
65630: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65631: LD_EXP 38
65635: PUSH
65636: LD_EXP 50
65640: AND
65641: IFFALSE 65720
65643: GO 65645
65645: DISABLE
65646: LD_INT 0
65648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65649: LD_ADDR_VAR 0 1
65653: PUSH
65654: LD_INT 22
65656: PUSH
65657: LD_OWVAR 2
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 21
65668: PUSH
65669: LD_INT 3
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PPUSH
65680: CALL_OW 69
65684: ST_TO_ADDR
// if not tmp then
65685: LD_VAR 0 1
65689: NOT
65690: IFFALSE 65694
// exit ;
65692: GO 65720
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65694: LD_VAR 0 1
65698: PUSH
65699: LD_INT 1
65701: PPUSH
65702: LD_VAR 0 1
65706: PPUSH
65707: CALL_OW 12
65711: ARRAY
65712: PPUSH
65713: LD_INT 100
65715: PPUSH
65716: CALL_OW 234
// end ;
65720: PPOPN 1
65722: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65723: LD_EXP 38
65727: PUSH
65728: LD_EXP 52
65732: AND
65733: IFFALSE 65831
65735: GO 65737
65737: DISABLE
65738: LD_INT 0
65740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65741: LD_ADDR_VAR 0 1
65745: PUSH
65746: LD_INT 22
65748: PUSH
65749: LD_OWVAR 2
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 21
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PPUSH
65772: CALL_OW 69
65776: ST_TO_ADDR
// if not tmp then
65777: LD_VAR 0 1
65781: NOT
65782: IFFALSE 65786
// exit ;
65784: GO 65831
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65786: LD_VAR 0 1
65790: PUSH
65791: LD_INT 1
65793: PPUSH
65794: LD_VAR 0 1
65798: PPUSH
65799: CALL_OW 12
65803: ARRAY
65804: PPUSH
65805: LD_INT 1
65807: PPUSH
65808: LD_INT 4
65810: PPUSH
65811: CALL_OW 12
65815: PPUSH
65816: LD_INT 3000
65818: PPUSH
65819: LD_INT 9000
65821: PPUSH
65822: CALL_OW 12
65826: PPUSH
65827: CALL_OW 492
// end ;
65831: PPOPN 1
65833: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65834: LD_EXP 38
65838: PUSH
65839: LD_EXP 53
65843: AND
65844: IFFALSE 65864
65846: GO 65848
65848: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65849: LD_INT 1
65851: PPUSH
65852: LD_OWVAR 2
65856: PPUSH
65857: LD_INT 0
65859: PPUSH
65860: CALL_OW 324
65864: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65865: LD_EXP 38
65869: PUSH
65870: LD_EXP 54
65874: AND
65875: IFFALSE 65958
65877: GO 65879
65879: DISABLE
65880: LD_INT 0
65882: PPUSH
65883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65884: LD_ADDR_VAR 0 2
65888: PUSH
65889: LD_INT 22
65891: PUSH
65892: LD_OWVAR 2
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 21
65903: PUSH
65904: LD_INT 3
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PPUSH
65915: CALL_OW 69
65919: ST_TO_ADDR
// if not tmp then
65920: LD_VAR 0 2
65924: NOT
65925: IFFALSE 65929
// exit ;
65927: GO 65958
// for i in tmp do
65929: LD_ADDR_VAR 0 1
65933: PUSH
65934: LD_VAR 0 2
65938: PUSH
65939: FOR_IN
65940: IFFALSE 65956
// SetBLevel ( i , 10 ) ;
65942: LD_VAR 0 1
65946: PPUSH
65947: LD_INT 10
65949: PPUSH
65950: CALL_OW 241
65954: GO 65939
65956: POP
65957: POP
// end ;
65958: PPOPN 2
65960: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65961: LD_EXP 38
65965: PUSH
65966: LD_EXP 55
65970: AND
65971: IFFALSE 66082
65973: GO 65975
65975: DISABLE
65976: LD_INT 0
65978: PPUSH
65979: PPUSH
65980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65981: LD_ADDR_VAR 0 3
65985: PUSH
65986: LD_INT 22
65988: PUSH
65989: LD_OWVAR 2
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 25
66000: PUSH
66001: LD_INT 1
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PPUSH
66012: CALL_OW 69
66016: ST_TO_ADDR
// if not tmp then
66017: LD_VAR 0 3
66021: NOT
66022: IFFALSE 66026
// exit ;
66024: GO 66082
// un := tmp [ rand ( 1 , tmp ) ] ;
66026: LD_ADDR_VAR 0 2
66030: PUSH
66031: LD_VAR 0 3
66035: PUSH
66036: LD_INT 1
66038: PPUSH
66039: LD_VAR 0 3
66043: PPUSH
66044: CALL_OW 12
66048: ARRAY
66049: ST_TO_ADDR
// if Crawls ( un ) then
66050: LD_VAR 0 2
66054: PPUSH
66055: CALL_OW 318
66059: IFFALSE 66070
// ComWalk ( un ) ;
66061: LD_VAR 0 2
66065: PPUSH
66066: CALL_OW 138
// SetClass ( un , class_sniper ) ;
66070: LD_VAR 0 2
66074: PPUSH
66075: LD_INT 5
66077: PPUSH
66078: CALL_OW 336
// end ;
66082: PPOPN 3
66084: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
66085: LD_EXP 38
66089: PUSH
66090: LD_EXP 56
66094: AND
66095: PUSH
66096: LD_OWVAR 67
66100: PUSH
66101: LD_INT 4
66103: LESS
66104: AND
66105: IFFALSE 66124
66107: GO 66109
66109: DISABLE
// begin Difficulty := Difficulty + 1 ;
66110: LD_ADDR_OWVAR 67
66114: PUSH
66115: LD_OWVAR 67
66119: PUSH
66120: LD_INT 1
66122: PLUS
66123: ST_TO_ADDR
// end ;
66124: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
66125: LD_EXP 38
66129: PUSH
66130: LD_EXP 57
66134: AND
66135: IFFALSE 66238
66137: GO 66139
66139: DISABLE
66140: LD_INT 0
66142: PPUSH
// begin for i := 1 to 5 do
66143: LD_ADDR_VAR 0 1
66147: PUSH
66148: DOUBLE
66149: LD_INT 1
66151: DEC
66152: ST_TO_ADDR
66153: LD_INT 5
66155: PUSH
66156: FOR_TO
66157: IFFALSE 66236
// begin uc_nation := nation_nature ;
66159: LD_ADDR_OWVAR 21
66163: PUSH
66164: LD_INT 0
66166: ST_TO_ADDR
// uc_side := 0 ;
66167: LD_ADDR_OWVAR 20
66171: PUSH
66172: LD_INT 0
66174: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66175: LD_ADDR_OWVAR 29
66179: PUSH
66180: LD_INT 12
66182: PUSH
66183: LD_INT 12
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: ST_TO_ADDR
// hc_agressivity := 20 ;
66190: LD_ADDR_OWVAR 35
66194: PUSH
66195: LD_INT 20
66197: ST_TO_ADDR
// hc_class := class_tiger ;
66198: LD_ADDR_OWVAR 28
66202: PUSH
66203: LD_INT 14
66205: ST_TO_ADDR
// hc_gallery :=  ;
66206: LD_ADDR_OWVAR 33
66210: PUSH
66211: LD_STRING 
66213: ST_TO_ADDR
// hc_name :=  ;
66214: LD_ADDR_OWVAR 26
66218: PUSH
66219: LD_STRING 
66221: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
66222: CALL_OW 44
66226: PPUSH
66227: LD_INT 0
66229: PPUSH
66230: CALL_OW 51
// end ;
66234: GO 66156
66236: POP
66237: POP
// end ;
66238: PPOPN 1
66240: END
// every 0 0$1 trigger StreamModeActive and sBomb do
66241: LD_EXP 38
66245: PUSH
66246: LD_EXP 58
66250: AND
66251: IFFALSE 66260
66253: GO 66255
66255: DISABLE
// StreamSibBomb ;
66256: CALL 66261 0 0
66260: END
// export function StreamSibBomb ; var i , x , y ; begin
66261: LD_INT 0
66263: PPUSH
66264: PPUSH
66265: PPUSH
66266: PPUSH
// result := false ;
66267: LD_ADDR_VAR 0 1
66271: PUSH
66272: LD_INT 0
66274: ST_TO_ADDR
// for i := 1 to 16 do
66275: LD_ADDR_VAR 0 2
66279: PUSH
66280: DOUBLE
66281: LD_INT 1
66283: DEC
66284: ST_TO_ADDR
66285: LD_INT 16
66287: PUSH
66288: FOR_TO
66289: IFFALSE 66488
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66291: LD_ADDR_VAR 0 3
66295: PUSH
66296: LD_INT 10
66298: PUSH
66299: LD_INT 20
66301: PUSH
66302: LD_INT 30
66304: PUSH
66305: LD_INT 40
66307: PUSH
66308: LD_INT 50
66310: PUSH
66311: LD_INT 60
66313: PUSH
66314: LD_INT 70
66316: PUSH
66317: LD_INT 80
66319: PUSH
66320: LD_INT 90
66322: PUSH
66323: LD_INT 100
66325: PUSH
66326: LD_INT 110
66328: PUSH
66329: LD_INT 120
66331: PUSH
66332: LD_INT 130
66334: PUSH
66335: LD_INT 140
66337: PUSH
66338: LD_INT 150
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 1
66360: PPUSH
66361: LD_INT 15
66363: PPUSH
66364: CALL_OW 12
66368: ARRAY
66369: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66370: LD_ADDR_VAR 0 4
66374: PUSH
66375: LD_INT 10
66377: PUSH
66378: LD_INT 20
66380: PUSH
66381: LD_INT 30
66383: PUSH
66384: LD_INT 40
66386: PUSH
66387: LD_INT 50
66389: PUSH
66390: LD_INT 60
66392: PUSH
66393: LD_INT 70
66395: PUSH
66396: LD_INT 80
66398: PUSH
66399: LD_INT 90
66401: PUSH
66402: LD_INT 100
66404: PUSH
66405: LD_INT 110
66407: PUSH
66408: LD_INT 120
66410: PUSH
66411: LD_INT 130
66413: PUSH
66414: LD_INT 140
66416: PUSH
66417: LD_INT 150
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 1
66439: PPUSH
66440: LD_INT 15
66442: PPUSH
66443: CALL_OW 12
66447: ARRAY
66448: ST_TO_ADDR
// if ValidHex ( x , y ) then
66449: LD_VAR 0 3
66453: PPUSH
66454: LD_VAR 0 4
66458: PPUSH
66459: CALL_OW 488
66463: IFFALSE 66486
// begin result := [ x , y ] ;
66465: LD_ADDR_VAR 0 1
66469: PUSH
66470: LD_VAR 0 3
66474: PUSH
66475: LD_VAR 0 4
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: ST_TO_ADDR
// break ;
66484: GO 66488
// end ; end ;
66486: GO 66288
66488: POP
66489: POP
// if result then
66490: LD_VAR 0 1
66494: IFFALSE 66554
// begin ToLua ( playSibBomb() ) ;
66496: LD_STRING playSibBomb()
66498: PPUSH
66499: CALL_OW 559
// wait ( 0 0$14 ) ;
66503: LD_INT 490
66505: PPUSH
66506: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66510: LD_VAR 0 1
66514: PUSH
66515: LD_INT 1
66517: ARRAY
66518: PPUSH
66519: LD_VAR 0 1
66523: PUSH
66524: LD_INT 2
66526: ARRAY
66527: PPUSH
66528: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66532: LD_VAR 0 1
66536: PUSH
66537: LD_INT 1
66539: ARRAY
66540: PPUSH
66541: LD_VAR 0 1
66545: PUSH
66546: LD_INT 2
66548: ARRAY
66549: PPUSH
66550: CALL_OW 429
// end ; end ;
66554: LD_VAR 0 1
66558: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66559: LD_EXP 38
66563: PUSH
66564: LD_EXP 60
66568: AND
66569: IFFALSE 66581
66571: GO 66573
66573: DISABLE
// YouLost (  ) ;
66574: LD_STRING 
66576: PPUSH
66577: CALL_OW 104
66581: END
// every 0 0$1 trigger StreamModeActive and sFog do
66582: LD_EXP 38
66586: PUSH
66587: LD_EXP 59
66591: AND
66592: IFFALSE 66606
66594: GO 66596
66596: DISABLE
// FogOff ( your_side ) ;
66597: LD_OWVAR 2
66601: PPUSH
66602: CALL_OW 344
66606: END
// every 0 0$1 trigger StreamModeActive and sSun do
66607: LD_EXP 38
66611: PUSH
66612: LD_EXP 61
66616: AND
66617: IFFALSE 66645
66619: GO 66621
66621: DISABLE
// begin solar_recharge_percent := 0 ;
66622: LD_ADDR_OWVAR 79
66626: PUSH
66627: LD_INT 0
66629: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66630: LD_INT 10500
66632: PPUSH
66633: CALL_OW 67
// solar_recharge_percent := 100 ;
66637: LD_ADDR_OWVAR 79
66641: PUSH
66642: LD_INT 100
66644: ST_TO_ADDR
// end ;
66645: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66646: LD_EXP 38
66650: PUSH
66651: LD_EXP 62
66655: AND
66656: IFFALSE 66895
66658: GO 66660
66660: DISABLE
66661: LD_INT 0
66663: PPUSH
66664: PPUSH
66665: PPUSH
// begin tmp := [ ] ;
66666: LD_ADDR_VAR 0 3
66670: PUSH
66671: EMPTY
66672: ST_TO_ADDR
// for i := 1 to 6 do
66673: LD_ADDR_VAR 0 1
66677: PUSH
66678: DOUBLE
66679: LD_INT 1
66681: DEC
66682: ST_TO_ADDR
66683: LD_INT 6
66685: PUSH
66686: FOR_TO
66687: IFFALSE 66792
// begin uc_nation := nation_nature ;
66689: LD_ADDR_OWVAR 21
66693: PUSH
66694: LD_INT 0
66696: ST_TO_ADDR
// uc_side := 0 ;
66697: LD_ADDR_OWVAR 20
66701: PUSH
66702: LD_INT 0
66704: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66705: LD_ADDR_OWVAR 29
66709: PUSH
66710: LD_INT 12
66712: PUSH
66713: LD_INT 12
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: ST_TO_ADDR
// hc_agressivity := 20 ;
66720: LD_ADDR_OWVAR 35
66724: PUSH
66725: LD_INT 20
66727: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66728: LD_ADDR_OWVAR 28
66732: PUSH
66733: LD_INT 17
66735: ST_TO_ADDR
// hc_gallery :=  ;
66736: LD_ADDR_OWVAR 33
66740: PUSH
66741: LD_STRING 
66743: ST_TO_ADDR
// hc_name :=  ;
66744: LD_ADDR_OWVAR 26
66748: PUSH
66749: LD_STRING 
66751: ST_TO_ADDR
// un := CreateHuman ;
66752: LD_ADDR_VAR 0 2
66756: PUSH
66757: CALL_OW 44
66761: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66762: LD_VAR 0 2
66766: PPUSH
66767: LD_INT 1
66769: PPUSH
66770: CALL_OW 51
// tmp := tmp ^ un ;
66774: LD_ADDR_VAR 0 3
66778: PUSH
66779: LD_VAR 0 3
66783: PUSH
66784: LD_VAR 0 2
66788: ADD
66789: ST_TO_ADDR
// end ;
66790: GO 66686
66792: POP
66793: POP
// repeat wait ( 0 0$1 ) ;
66794: LD_INT 35
66796: PPUSH
66797: CALL_OW 67
// for un in tmp do
66801: LD_ADDR_VAR 0 2
66805: PUSH
66806: LD_VAR 0 3
66810: PUSH
66811: FOR_IN
66812: IFFALSE 66886
// begin if IsDead ( un ) then
66814: LD_VAR 0 2
66818: PPUSH
66819: CALL_OW 301
66823: IFFALSE 66843
// begin tmp := tmp diff un ;
66825: LD_ADDR_VAR 0 3
66829: PUSH
66830: LD_VAR 0 3
66834: PUSH
66835: LD_VAR 0 2
66839: DIFF
66840: ST_TO_ADDR
// continue ;
66841: GO 66811
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66843: LD_VAR 0 2
66847: PPUSH
66848: LD_INT 3
66850: PUSH
66851: LD_INT 22
66853: PUSH
66854: LD_INT 0
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PPUSH
66865: CALL_OW 69
66869: PPUSH
66870: LD_VAR 0 2
66874: PPUSH
66875: CALL_OW 74
66879: PPUSH
66880: CALL_OW 115
// end ;
66884: GO 66811
66886: POP
66887: POP
// until not tmp ;
66888: LD_VAR 0 3
66892: NOT
66893: IFFALSE 66794
// end ;
66895: PPOPN 3
66897: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66898: LD_EXP 38
66902: PUSH
66903: LD_EXP 63
66907: AND
66908: IFFALSE 66962
66910: GO 66912
66912: DISABLE
// begin ToLua ( displayTroll(); ) ;
66913: LD_STRING displayTroll();
66915: PPUSH
66916: CALL_OW 559
// wait ( 3 3$00 ) ;
66920: LD_INT 6300
66922: PPUSH
66923: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66927: LD_STRING hideTroll();
66929: PPUSH
66930: CALL_OW 559
// wait ( 1 1$00 ) ;
66934: LD_INT 2100
66936: PPUSH
66937: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66941: LD_STRING displayTroll();
66943: PPUSH
66944: CALL_OW 559
// wait ( 1 1$00 ) ;
66948: LD_INT 2100
66950: PPUSH
66951: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66955: LD_STRING hideTroll();
66957: PPUSH
66958: CALL_OW 559
// end ;
66962: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66963: LD_EXP 38
66967: PUSH
66968: LD_EXP 64
66972: AND
66973: IFFALSE 67036
66975: GO 66977
66977: DISABLE
66978: LD_INT 0
66980: PPUSH
// begin p := 0 ;
66981: LD_ADDR_VAR 0 1
66985: PUSH
66986: LD_INT 0
66988: ST_TO_ADDR
// repeat game_speed := 1 ;
66989: LD_ADDR_OWVAR 65
66993: PUSH
66994: LD_INT 1
66996: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66997: LD_INT 35
66999: PPUSH
67000: CALL_OW 67
// p := p + 1 ;
67004: LD_ADDR_VAR 0 1
67008: PUSH
67009: LD_VAR 0 1
67013: PUSH
67014: LD_INT 1
67016: PLUS
67017: ST_TO_ADDR
// until p >= 60 ;
67018: LD_VAR 0 1
67022: PUSH
67023: LD_INT 60
67025: GREATEREQUAL
67026: IFFALSE 66989
// game_speed := 4 ;
67028: LD_ADDR_OWVAR 65
67032: PUSH
67033: LD_INT 4
67035: ST_TO_ADDR
// end ;
67036: PPOPN 1
67038: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
67039: LD_EXP 38
67043: PUSH
67044: LD_EXP 65
67048: AND
67049: IFFALSE 67195
67051: GO 67053
67053: DISABLE
67054: LD_INT 0
67056: PPUSH
67057: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67058: LD_ADDR_VAR 0 1
67062: PUSH
67063: LD_INT 22
67065: PUSH
67066: LD_OWVAR 2
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 2
67077: PUSH
67078: LD_INT 30
67080: PUSH
67081: LD_INT 0
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 30
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: LIST
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PPUSH
67107: CALL_OW 69
67111: ST_TO_ADDR
// if not depot then
67112: LD_VAR 0 1
67116: NOT
67117: IFFALSE 67121
// exit ;
67119: GO 67195
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
67121: LD_ADDR_VAR 0 2
67125: PUSH
67126: LD_VAR 0 1
67130: PUSH
67131: LD_INT 1
67133: PPUSH
67134: LD_VAR 0 1
67138: PPUSH
67139: CALL_OW 12
67143: ARRAY
67144: PPUSH
67145: CALL_OW 274
67149: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
67150: LD_VAR 0 2
67154: PPUSH
67155: LD_INT 1
67157: PPUSH
67158: LD_INT 0
67160: PPUSH
67161: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
67165: LD_VAR 0 2
67169: PPUSH
67170: LD_INT 2
67172: PPUSH
67173: LD_INT 0
67175: PPUSH
67176: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
67180: LD_VAR 0 2
67184: PPUSH
67185: LD_INT 3
67187: PPUSH
67188: LD_INT 0
67190: PPUSH
67191: CALL_OW 277
// end ;
67195: PPOPN 2
67197: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
67198: LD_EXP 38
67202: PUSH
67203: LD_EXP 66
67207: AND
67208: IFFALSE 67305
67210: GO 67212
67212: DISABLE
67213: LD_INT 0
67215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67216: LD_ADDR_VAR 0 1
67220: PUSH
67221: LD_INT 22
67223: PUSH
67224: LD_OWVAR 2
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 21
67235: PUSH
67236: LD_INT 1
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 3
67245: PUSH
67246: LD_INT 23
67248: PUSH
67249: LD_INT 0
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: LIST
67264: PPUSH
67265: CALL_OW 69
67269: ST_TO_ADDR
// if not tmp then
67270: LD_VAR 0 1
67274: NOT
67275: IFFALSE 67279
// exit ;
67277: GO 67305
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
67279: LD_VAR 0 1
67283: PUSH
67284: LD_INT 1
67286: PPUSH
67287: LD_VAR 0 1
67291: PPUSH
67292: CALL_OW 12
67296: ARRAY
67297: PPUSH
67298: LD_INT 200
67300: PPUSH
67301: CALL_OW 234
// end ;
67305: PPOPN 1
67307: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
67308: LD_EXP 38
67312: PUSH
67313: LD_EXP 67
67317: AND
67318: IFFALSE 67397
67320: GO 67322
67322: DISABLE
67323: LD_INT 0
67325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
67326: LD_ADDR_VAR 0 1
67330: PUSH
67331: LD_INT 22
67333: PUSH
67334: LD_OWVAR 2
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 21
67345: PUSH
67346: LD_INT 2
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PPUSH
67357: CALL_OW 69
67361: ST_TO_ADDR
// if not tmp then
67362: LD_VAR 0 1
67366: NOT
67367: IFFALSE 67371
// exit ;
67369: GO 67397
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
67371: LD_VAR 0 1
67375: PUSH
67376: LD_INT 1
67378: PPUSH
67379: LD_VAR 0 1
67383: PPUSH
67384: CALL_OW 12
67388: ARRAY
67389: PPUSH
67390: LD_INT 60
67392: PPUSH
67393: CALL_OW 234
// end ;
67397: PPOPN 1
67399: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
67400: LD_EXP 38
67404: PUSH
67405: LD_EXP 68
67409: AND
67410: IFFALSE 67509
67412: GO 67414
67414: DISABLE
67415: LD_INT 0
67417: PPUSH
67418: PPUSH
// begin enable ;
67419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
67420: LD_ADDR_VAR 0 1
67424: PUSH
67425: LD_INT 22
67427: PUSH
67428: LD_OWVAR 2
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 61
67439: PUSH
67440: EMPTY
67441: LIST
67442: PUSH
67443: LD_INT 33
67445: PUSH
67446: LD_INT 2
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: LIST
67457: PPUSH
67458: CALL_OW 69
67462: ST_TO_ADDR
// if not tmp then
67463: LD_VAR 0 1
67467: NOT
67468: IFFALSE 67472
// exit ;
67470: GO 67509
// for i in tmp do
67472: LD_ADDR_VAR 0 2
67476: PUSH
67477: LD_VAR 0 1
67481: PUSH
67482: FOR_IN
67483: IFFALSE 67507
// if IsControledBy ( i ) then
67485: LD_VAR 0 2
67489: PPUSH
67490: CALL_OW 312
67494: IFFALSE 67505
// ComUnlink ( i ) ;
67496: LD_VAR 0 2
67500: PPUSH
67501: CALL_OW 136
67505: GO 67482
67507: POP
67508: POP
// end ;
67509: PPOPN 2
67511: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67512: LD_EXP 38
67516: PUSH
67517: LD_EXP 69
67521: AND
67522: IFFALSE 67662
67524: GO 67526
67526: DISABLE
67527: LD_INT 0
67529: PPUSH
67530: PPUSH
// begin ToLua ( displayPowell(); ) ;
67531: LD_STRING displayPowell();
67533: PPUSH
67534: CALL_OW 559
// uc_side := 0 ;
67538: LD_ADDR_OWVAR 20
67542: PUSH
67543: LD_INT 0
67545: ST_TO_ADDR
// uc_nation := 2 ;
67546: LD_ADDR_OWVAR 21
67550: PUSH
67551: LD_INT 2
67553: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67554: LD_ADDR_OWVAR 37
67558: PUSH
67559: LD_INT 14
67561: ST_TO_ADDR
// vc_engine := engine_siberite ;
67562: LD_ADDR_OWVAR 39
67566: PUSH
67567: LD_INT 3
67569: ST_TO_ADDR
// vc_control := control_apeman ;
67570: LD_ADDR_OWVAR 38
67574: PUSH
67575: LD_INT 5
67577: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67578: LD_ADDR_OWVAR 40
67582: PUSH
67583: LD_INT 29
67585: ST_TO_ADDR
// un := CreateVehicle ;
67586: LD_ADDR_VAR 0 2
67590: PUSH
67591: CALL_OW 45
67595: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67596: LD_VAR 0 2
67600: PPUSH
67601: LD_INT 1
67603: PPUSH
67604: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67608: LD_INT 35
67610: PPUSH
67611: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67615: LD_VAR 0 2
67619: PPUSH
67620: LD_INT 22
67622: PUSH
67623: LD_OWVAR 2
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PPUSH
67632: CALL_OW 69
67636: PPUSH
67637: LD_VAR 0 2
67641: PPUSH
67642: CALL_OW 74
67646: PPUSH
67647: CALL_OW 115
// until IsDead ( un ) ;
67651: LD_VAR 0 2
67655: PPUSH
67656: CALL_OW 301
67660: IFFALSE 67608
// end ;
67662: PPOPN 2
67664: END
// every 0 0$1 trigger StreamModeActive and sStu do
67665: LD_EXP 38
67669: PUSH
67670: LD_EXP 77
67674: AND
67675: IFFALSE 67691
67677: GO 67679
67679: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67680: LD_STRING displayStucuk();
67682: PPUSH
67683: CALL_OW 559
// ResetFog ;
67687: CALL_OW 335
// end ;
67691: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67692: LD_EXP 38
67696: PUSH
67697: LD_EXP 70
67701: AND
67702: IFFALSE 67843
67704: GO 67706
67706: DISABLE
67707: LD_INT 0
67709: PPUSH
67710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67711: LD_ADDR_VAR 0 2
67715: PUSH
67716: LD_INT 22
67718: PUSH
67719: LD_OWVAR 2
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 21
67730: PUSH
67731: LD_INT 1
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PPUSH
67742: CALL_OW 69
67746: ST_TO_ADDR
// if not tmp then
67747: LD_VAR 0 2
67751: NOT
67752: IFFALSE 67756
// exit ;
67754: GO 67843
// un := tmp [ rand ( 1 , tmp ) ] ;
67756: LD_ADDR_VAR 0 1
67760: PUSH
67761: LD_VAR 0 2
67765: PUSH
67766: LD_INT 1
67768: PPUSH
67769: LD_VAR 0 2
67773: PPUSH
67774: CALL_OW 12
67778: ARRAY
67779: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67780: LD_VAR 0 1
67784: PPUSH
67785: LD_INT 0
67787: PPUSH
67788: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67792: LD_VAR 0 1
67796: PPUSH
67797: LD_OWVAR 3
67801: PUSH
67802: LD_VAR 0 1
67806: DIFF
67807: PPUSH
67808: LD_VAR 0 1
67812: PPUSH
67813: CALL_OW 74
67817: PPUSH
67818: CALL_OW 115
// wait ( 0 0$20 ) ;
67822: LD_INT 700
67824: PPUSH
67825: CALL_OW 67
// SetSide ( un , your_side ) ;
67829: LD_VAR 0 1
67833: PPUSH
67834: LD_OWVAR 2
67838: PPUSH
67839: CALL_OW 235
// end ;
67843: PPOPN 2
67845: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67846: LD_EXP 38
67850: PUSH
67851: LD_EXP 71
67855: AND
67856: IFFALSE 67962
67858: GO 67860
67860: DISABLE
67861: LD_INT 0
67863: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67864: LD_ADDR_VAR 0 1
67868: PUSH
67869: LD_INT 22
67871: PUSH
67872: LD_OWVAR 2
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 2
67883: PUSH
67884: LD_INT 30
67886: PUSH
67887: LD_INT 0
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 30
67896: PUSH
67897: LD_INT 1
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: LIST
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PPUSH
67913: CALL_OW 69
67917: ST_TO_ADDR
// if not depot then
67918: LD_VAR 0 1
67922: NOT
67923: IFFALSE 67927
// exit ;
67925: GO 67962
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67927: LD_VAR 0 1
67931: PUSH
67932: LD_INT 1
67934: ARRAY
67935: PPUSH
67936: CALL_OW 250
67940: PPUSH
67941: LD_VAR 0 1
67945: PUSH
67946: LD_INT 1
67948: ARRAY
67949: PPUSH
67950: CALL_OW 251
67954: PPUSH
67955: LD_INT 70
67957: PPUSH
67958: CALL_OW 495
// end ;
67962: PPOPN 1
67964: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67965: LD_EXP 38
67969: PUSH
67970: LD_EXP 72
67974: AND
67975: IFFALSE 68186
67977: GO 67979
67979: DISABLE
67980: LD_INT 0
67982: PPUSH
67983: PPUSH
67984: PPUSH
67985: PPUSH
67986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67987: LD_ADDR_VAR 0 5
67991: PUSH
67992: LD_INT 22
67994: PUSH
67995: LD_OWVAR 2
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 21
68006: PUSH
68007: LD_INT 1
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PPUSH
68018: CALL_OW 69
68022: ST_TO_ADDR
// if not tmp then
68023: LD_VAR 0 5
68027: NOT
68028: IFFALSE 68032
// exit ;
68030: GO 68186
// for i in tmp do
68032: LD_ADDR_VAR 0 1
68036: PUSH
68037: LD_VAR 0 5
68041: PUSH
68042: FOR_IN
68043: IFFALSE 68184
// begin d := rand ( 0 , 5 ) ;
68045: LD_ADDR_VAR 0 4
68049: PUSH
68050: LD_INT 0
68052: PPUSH
68053: LD_INT 5
68055: PPUSH
68056: CALL_OW 12
68060: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
68061: LD_ADDR_VAR 0 2
68065: PUSH
68066: LD_VAR 0 1
68070: PPUSH
68071: CALL_OW 250
68075: PPUSH
68076: LD_VAR 0 4
68080: PPUSH
68081: LD_INT 3
68083: PPUSH
68084: LD_INT 12
68086: PPUSH
68087: CALL_OW 12
68091: PPUSH
68092: CALL_OW 272
68096: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
68097: LD_ADDR_VAR 0 3
68101: PUSH
68102: LD_VAR 0 1
68106: PPUSH
68107: CALL_OW 251
68111: PPUSH
68112: LD_VAR 0 4
68116: PPUSH
68117: LD_INT 3
68119: PPUSH
68120: LD_INT 12
68122: PPUSH
68123: CALL_OW 12
68127: PPUSH
68128: CALL_OW 273
68132: ST_TO_ADDR
// if ValidHex ( x , y ) then
68133: LD_VAR 0 2
68137: PPUSH
68138: LD_VAR 0 3
68142: PPUSH
68143: CALL_OW 488
68147: IFFALSE 68182
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
68149: LD_VAR 0 1
68153: PPUSH
68154: LD_VAR 0 2
68158: PPUSH
68159: LD_VAR 0 3
68163: PPUSH
68164: LD_INT 3
68166: PPUSH
68167: LD_INT 6
68169: PPUSH
68170: CALL_OW 12
68174: PPUSH
68175: LD_INT 1
68177: PPUSH
68178: CALL_OW 483
// end ;
68182: GO 68042
68184: POP
68185: POP
// end ;
68186: PPOPN 5
68188: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
68189: LD_EXP 38
68193: PUSH
68194: LD_EXP 73
68198: AND
68199: IFFALSE 68293
68201: GO 68203
68203: DISABLE
68204: LD_INT 0
68206: PPUSH
68207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
68208: LD_ADDR_VAR 0 2
68212: PUSH
68213: LD_INT 22
68215: PUSH
68216: LD_OWVAR 2
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 32
68227: PUSH
68228: LD_INT 1
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 21
68237: PUSH
68238: LD_INT 2
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: LIST
68249: PPUSH
68250: CALL_OW 69
68254: ST_TO_ADDR
// if not tmp then
68255: LD_VAR 0 2
68259: NOT
68260: IFFALSE 68264
// exit ;
68262: GO 68293
// for i in tmp do
68264: LD_ADDR_VAR 0 1
68268: PUSH
68269: LD_VAR 0 2
68273: PUSH
68274: FOR_IN
68275: IFFALSE 68291
// SetFuel ( i , 0 ) ;
68277: LD_VAR 0 1
68281: PPUSH
68282: LD_INT 0
68284: PPUSH
68285: CALL_OW 240
68289: GO 68274
68291: POP
68292: POP
// end ;
68293: PPOPN 2
68295: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
68296: LD_EXP 38
68300: PUSH
68301: LD_EXP 74
68305: AND
68306: IFFALSE 68372
68308: GO 68310
68310: DISABLE
68311: LD_INT 0
68313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68314: LD_ADDR_VAR 0 1
68318: PUSH
68319: LD_INT 22
68321: PUSH
68322: LD_OWVAR 2
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 30
68333: PUSH
68334: LD_INT 29
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PPUSH
68345: CALL_OW 69
68349: ST_TO_ADDR
// if not tmp then
68350: LD_VAR 0 1
68354: NOT
68355: IFFALSE 68359
// exit ;
68357: GO 68372
// DestroyUnit ( tmp [ 1 ] ) ;
68359: LD_VAR 0 1
68363: PUSH
68364: LD_INT 1
68366: ARRAY
68367: PPUSH
68368: CALL_OW 65
// end ;
68372: PPOPN 1
68374: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
68375: LD_EXP 38
68379: PUSH
68380: LD_EXP 76
68384: AND
68385: IFFALSE 68514
68387: GO 68389
68389: DISABLE
68390: LD_INT 0
68392: PPUSH
// begin uc_side := 0 ;
68393: LD_ADDR_OWVAR 20
68397: PUSH
68398: LD_INT 0
68400: ST_TO_ADDR
// uc_nation := nation_arabian ;
68401: LD_ADDR_OWVAR 21
68405: PUSH
68406: LD_INT 2
68408: ST_TO_ADDR
// hc_gallery :=  ;
68409: LD_ADDR_OWVAR 33
68413: PUSH
68414: LD_STRING 
68416: ST_TO_ADDR
// hc_name :=  ;
68417: LD_ADDR_OWVAR 26
68421: PUSH
68422: LD_STRING 
68424: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
68425: LD_INT 1
68427: PPUSH
68428: LD_INT 11
68430: PPUSH
68431: LD_INT 10
68433: PPUSH
68434: CALL_OW 380
// un := CreateHuman ;
68438: LD_ADDR_VAR 0 1
68442: PUSH
68443: CALL_OW 44
68447: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68448: LD_VAR 0 1
68452: PPUSH
68453: LD_INT 1
68455: PPUSH
68456: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68460: LD_INT 35
68462: PPUSH
68463: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68467: LD_VAR 0 1
68471: PPUSH
68472: LD_INT 22
68474: PUSH
68475: LD_OWVAR 2
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PPUSH
68484: CALL_OW 69
68488: PPUSH
68489: LD_VAR 0 1
68493: PPUSH
68494: CALL_OW 74
68498: PPUSH
68499: CALL_OW 115
// until IsDead ( un ) ;
68503: LD_VAR 0 1
68507: PPUSH
68508: CALL_OW 301
68512: IFFALSE 68460
// end ;
68514: PPOPN 1
68516: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68517: LD_EXP 38
68521: PUSH
68522: LD_EXP 78
68526: AND
68527: IFFALSE 68539
68529: GO 68531
68531: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68532: LD_STRING earthquake(getX(game), 0, 32)
68534: PPUSH
68535: CALL_OW 559
68539: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68540: LD_EXP 38
68544: PUSH
68545: LD_EXP 79
68549: AND
68550: IFFALSE 68641
68552: GO 68554
68554: DISABLE
68555: LD_INT 0
68557: PPUSH
// begin enable ;
68558: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68559: LD_ADDR_VAR 0 1
68563: PUSH
68564: LD_INT 22
68566: PUSH
68567: LD_OWVAR 2
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 21
68578: PUSH
68579: LD_INT 2
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 33
68588: PUSH
68589: LD_INT 3
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: LIST
68600: PPUSH
68601: CALL_OW 69
68605: ST_TO_ADDR
// if not tmp then
68606: LD_VAR 0 1
68610: NOT
68611: IFFALSE 68615
// exit ;
68613: GO 68641
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68615: LD_VAR 0 1
68619: PUSH
68620: LD_INT 1
68622: PPUSH
68623: LD_VAR 0 1
68627: PPUSH
68628: CALL_OW 12
68632: ARRAY
68633: PPUSH
68634: LD_INT 1
68636: PPUSH
68637: CALL_OW 234
// end ;
68641: PPOPN 1
68643: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68644: LD_EXP 38
68648: PUSH
68649: LD_EXP 80
68653: AND
68654: IFFALSE 68795
68656: GO 68658
68658: DISABLE
68659: LD_INT 0
68661: PPUSH
68662: PPUSH
68663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68664: LD_ADDR_VAR 0 3
68668: PUSH
68669: LD_INT 22
68671: PUSH
68672: LD_OWVAR 2
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 25
68683: PUSH
68684: LD_INT 1
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PPUSH
68695: CALL_OW 69
68699: ST_TO_ADDR
// if not tmp then
68700: LD_VAR 0 3
68704: NOT
68705: IFFALSE 68709
// exit ;
68707: GO 68795
// un := tmp [ rand ( 1 , tmp ) ] ;
68709: LD_ADDR_VAR 0 2
68713: PUSH
68714: LD_VAR 0 3
68718: PUSH
68719: LD_INT 1
68721: PPUSH
68722: LD_VAR 0 3
68726: PPUSH
68727: CALL_OW 12
68731: ARRAY
68732: ST_TO_ADDR
// if Crawls ( un ) then
68733: LD_VAR 0 2
68737: PPUSH
68738: CALL_OW 318
68742: IFFALSE 68753
// ComWalk ( un ) ;
68744: LD_VAR 0 2
68748: PPUSH
68749: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68753: LD_VAR 0 2
68757: PPUSH
68758: LD_INT 9
68760: PPUSH
68761: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68765: LD_INT 28
68767: PPUSH
68768: LD_OWVAR 2
68772: PPUSH
68773: LD_INT 2
68775: PPUSH
68776: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68780: LD_INT 29
68782: PPUSH
68783: LD_OWVAR 2
68787: PPUSH
68788: LD_INT 2
68790: PPUSH
68791: CALL_OW 322
// end ;
68795: PPOPN 3
68797: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68798: LD_EXP 38
68802: PUSH
68803: LD_EXP 81
68807: AND
68808: IFFALSE 68919
68810: GO 68812
68812: DISABLE
68813: LD_INT 0
68815: PPUSH
68816: PPUSH
68817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68818: LD_ADDR_VAR 0 3
68822: PUSH
68823: LD_INT 22
68825: PUSH
68826: LD_OWVAR 2
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 25
68837: PUSH
68838: LD_INT 1
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PPUSH
68849: CALL_OW 69
68853: ST_TO_ADDR
// if not tmp then
68854: LD_VAR 0 3
68858: NOT
68859: IFFALSE 68863
// exit ;
68861: GO 68919
// un := tmp [ rand ( 1 , tmp ) ] ;
68863: LD_ADDR_VAR 0 2
68867: PUSH
68868: LD_VAR 0 3
68872: PUSH
68873: LD_INT 1
68875: PPUSH
68876: LD_VAR 0 3
68880: PPUSH
68881: CALL_OW 12
68885: ARRAY
68886: ST_TO_ADDR
// if Crawls ( un ) then
68887: LD_VAR 0 2
68891: PPUSH
68892: CALL_OW 318
68896: IFFALSE 68907
// ComWalk ( un ) ;
68898: LD_VAR 0 2
68902: PPUSH
68903: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68907: LD_VAR 0 2
68911: PPUSH
68912: LD_INT 8
68914: PPUSH
68915: CALL_OW 336
// end ;
68919: PPOPN 3
68921: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68922: LD_EXP 38
68926: PUSH
68927: LD_EXP 82
68931: AND
68932: IFFALSE 69076
68934: GO 68936
68936: DISABLE
68937: LD_INT 0
68939: PPUSH
68940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68941: LD_ADDR_VAR 0 2
68945: PUSH
68946: LD_INT 22
68948: PUSH
68949: LD_OWVAR 2
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 21
68960: PUSH
68961: LD_INT 2
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 2
68970: PUSH
68971: LD_INT 34
68973: PUSH
68974: LD_INT 12
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 34
68983: PUSH
68984: LD_INT 51
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 34
68993: PUSH
68994: LD_INT 32
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: LIST
69011: PPUSH
69012: CALL_OW 69
69016: ST_TO_ADDR
// if not tmp then
69017: LD_VAR 0 2
69021: NOT
69022: IFFALSE 69026
// exit ;
69024: GO 69076
// for i in tmp do
69026: LD_ADDR_VAR 0 1
69030: PUSH
69031: LD_VAR 0 2
69035: PUSH
69036: FOR_IN
69037: IFFALSE 69074
// if GetCargo ( i , mat_artifact ) = 0 then
69039: LD_VAR 0 1
69043: PPUSH
69044: LD_INT 4
69046: PPUSH
69047: CALL_OW 289
69051: PUSH
69052: LD_INT 0
69054: EQUAL
69055: IFFALSE 69072
// SetCargo ( i , mat_siberit , 100 ) ;
69057: LD_VAR 0 1
69061: PPUSH
69062: LD_INT 3
69064: PPUSH
69065: LD_INT 100
69067: PPUSH
69068: CALL_OW 290
69072: GO 69036
69074: POP
69075: POP
// end ;
69076: PPOPN 2
69078: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
69079: LD_EXP 38
69083: PUSH
69084: LD_EXP 83
69088: AND
69089: IFFALSE 69272
69091: GO 69093
69093: DISABLE
69094: LD_INT 0
69096: PPUSH
69097: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69098: LD_ADDR_VAR 0 2
69102: PUSH
69103: LD_INT 22
69105: PUSH
69106: LD_OWVAR 2
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PPUSH
69115: CALL_OW 69
69119: ST_TO_ADDR
// if not tmp then
69120: LD_VAR 0 2
69124: NOT
69125: IFFALSE 69129
// exit ;
69127: GO 69272
// for i := 1 to 2 do
69129: LD_ADDR_VAR 0 1
69133: PUSH
69134: DOUBLE
69135: LD_INT 1
69137: DEC
69138: ST_TO_ADDR
69139: LD_INT 2
69141: PUSH
69142: FOR_TO
69143: IFFALSE 69270
// begin uc_side := your_side ;
69145: LD_ADDR_OWVAR 20
69149: PUSH
69150: LD_OWVAR 2
69154: ST_TO_ADDR
// uc_nation := nation_american ;
69155: LD_ADDR_OWVAR 21
69159: PUSH
69160: LD_INT 1
69162: ST_TO_ADDR
// vc_chassis := us_morphling ;
69163: LD_ADDR_OWVAR 37
69167: PUSH
69168: LD_INT 5
69170: ST_TO_ADDR
// vc_engine := engine_siberite ;
69171: LD_ADDR_OWVAR 39
69175: PUSH
69176: LD_INT 3
69178: ST_TO_ADDR
// vc_control := control_computer ;
69179: LD_ADDR_OWVAR 38
69183: PUSH
69184: LD_INT 3
69186: ST_TO_ADDR
// vc_weapon := us_double_laser ;
69187: LD_ADDR_OWVAR 40
69191: PUSH
69192: LD_INT 10
69194: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
69195: LD_VAR 0 2
69199: PUSH
69200: LD_INT 1
69202: ARRAY
69203: PPUSH
69204: CALL_OW 310
69208: NOT
69209: IFFALSE 69256
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
69211: CALL_OW 45
69215: PPUSH
69216: LD_VAR 0 2
69220: PUSH
69221: LD_INT 1
69223: ARRAY
69224: PPUSH
69225: CALL_OW 250
69229: PPUSH
69230: LD_VAR 0 2
69234: PUSH
69235: LD_INT 1
69237: ARRAY
69238: PPUSH
69239: CALL_OW 251
69243: PPUSH
69244: LD_INT 12
69246: PPUSH
69247: LD_INT 1
69249: PPUSH
69250: CALL_OW 50
69254: GO 69268
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
69256: CALL_OW 45
69260: PPUSH
69261: LD_INT 1
69263: PPUSH
69264: CALL_OW 51
// end ;
69268: GO 69142
69270: POP
69271: POP
// end ;
69272: PPOPN 2
69274: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
69275: LD_EXP 38
69279: PUSH
69280: LD_EXP 84
69284: AND
69285: IFFALSE 69507
69287: GO 69289
69289: DISABLE
69290: LD_INT 0
69292: PPUSH
69293: PPUSH
69294: PPUSH
69295: PPUSH
69296: PPUSH
69297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69298: LD_ADDR_VAR 0 6
69302: PUSH
69303: LD_INT 22
69305: PUSH
69306: LD_OWVAR 2
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 21
69317: PUSH
69318: LD_INT 1
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 3
69327: PUSH
69328: LD_INT 23
69330: PUSH
69331: LD_INT 0
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: LIST
69346: PPUSH
69347: CALL_OW 69
69351: ST_TO_ADDR
// if not tmp then
69352: LD_VAR 0 6
69356: NOT
69357: IFFALSE 69361
// exit ;
69359: GO 69507
// s1 := rand ( 1 , 4 ) ;
69361: LD_ADDR_VAR 0 2
69365: PUSH
69366: LD_INT 1
69368: PPUSH
69369: LD_INT 4
69371: PPUSH
69372: CALL_OW 12
69376: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
69377: LD_ADDR_VAR 0 4
69381: PUSH
69382: LD_VAR 0 6
69386: PUSH
69387: LD_INT 1
69389: ARRAY
69390: PPUSH
69391: LD_VAR 0 2
69395: PPUSH
69396: CALL_OW 259
69400: ST_TO_ADDR
// if s1 = 1 then
69401: LD_VAR 0 2
69405: PUSH
69406: LD_INT 1
69408: EQUAL
69409: IFFALSE 69429
// s2 := rand ( 2 , 4 ) else
69411: LD_ADDR_VAR 0 3
69415: PUSH
69416: LD_INT 2
69418: PPUSH
69419: LD_INT 4
69421: PPUSH
69422: CALL_OW 12
69426: ST_TO_ADDR
69427: GO 69437
// s2 := 1 ;
69429: LD_ADDR_VAR 0 3
69433: PUSH
69434: LD_INT 1
69436: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
69437: LD_ADDR_VAR 0 5
69441: PUSH
69442: LD_VAR 0 6
69446: PUSH
69447: LD_INT 1
69449: ARRAY
69450: PPUSH
69451: LD_VAR 0 3
69455: PPUSH
69456: CALL_OW 259
69460: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
69461: LD_VAR 0 6
69465: PUSH
69466: LD_INT 1
69468: ARRAY
69469: PPUSH
69470: LD_VAR 0 2
69474: PPUSH
69475: LD_VAR 0 5
69479: PPUSH
69480: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
69484: LD_VAR 0 6
69488: PUSH
69489: LD_INT 1
69491: ARRAY
69492: PPUSH
69493: LD_VAR 0 3
69497: PPUSH
69498: LD_VAR 0 4
69502: PPUSH
69503: CALL_OW 237
// end ;
69507: PPOPN 6
69509: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69510: LD_EXP 38
69514: PUSH
69515: LD_EXP 85
69519: AND
69520: IFFALSE 69599
69522: GO 69524
69524: DISABLE
69525: LD_INT 0
69527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69528: LD_ADDR_VAR 0 1
69532: PUSH
69533: LD_INT 22
69535: PUSH
69536: LD_OWVAR 2
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 30
69547: PUSH
69548: LD_INT 3
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PPUSH
69559: CALL_OW 69
69563: ST_TO_ADDR
// if not tmp then
69564: LD_VAR 0 1
69568: NOT
69569: IFFALSE 69573
// exit ;
69571: GO 69599
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69573: LD_VAR 0 1
69577: PUSH
69578: LD_INT 1
69580: PPUSH
69581: LD_VAR 0 1
69585: PPUSH
69586: CALL_OW 12
69590: ARRAY
69591: PPUSH
69592: LD_INT 1
69594: PPUSH
69595: CALL_OW 234
// end ;
69599: PPOPN 1
69601: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69602: LD_EXP 38
69606: PUSH
69607: LD_EXP 86
69611: AND
69612: IFFALSE 69724
69614: GO 69616
69616: DISABLE
69617: LD_INT 0
69619: PPUSH
69620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69621: LD_ADDR_VAR 0 2
69625: PUSH
69626: LD_INT 22
69628: PUSH
69629: LD_OWVAR 2
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 2
69640: PUSH
69641: LD_INT 30
69643: PUSH
69644: LD_INT 27
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 30
69653: PUSH
69654: LD_INT 26
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 30
69663: PUSH
69664: LD_INT 28
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PPUSH
69681: CALL_OW 69
69685: ST_TO_ADDR
// if not tmp then
69686: LD_VAR 0 2
69690: NOT
69691: IFFALSE 69695
// exit ;
69693: GO 69724
// for i in tmp do
69695: LD_ADDR_VAR 0 1
69699: PUSH
69700: LD_VAR 0 2
69704: PUSH
69705: FOR_IN
69706: IFFALSE 69722
// SetLives ( i , 1 ) ;
69708: LD_VAR 0 1
69712: PPUSH
69713: LD_INT 1
69715: PPUSH
69716: CALL_OW 234
69720: GO 69705
69722: POP
69723: POP
// end ;
69724: PPOPN 2
69726: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69727: LD_EXP 38
69731: PUSH
69732: LD_EXP 87
69736: AND
69737: IFFALSE 70024
69739: GO 69741
69741: DISABLE
69742: LD_INT 0
69744: PPUSH
69745: PPUSH
69746: PPUSH
// begin i := rand ( 1 , 7 ) ;
69747: LD_ADDR_VAR 0 1
69751: PUSH
69752: LD_INT 1
69754: PPUSH
69755: LD_INT 7
69757: PPUSH
69758: CALL_OW 12
69762: ST_TO_ADDR
// case i of 1 :
69763: LD_VAR 0 1
69767: PUSH
69768: LD_INT 1
69770: DOUBLE
69771: EQUAL
69772: IFTRUE 69776
69774: GO 69786
69776: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69777: LD_STRING earthquake(getX(game), 0, 32)
69779: PPUSH
69780: CALL_OW 559
69784: GO 70024
69786: LD_INT 2
69788: DOUBLE
69789: EQUAL
69790: IFTRUE 69794
69792: GO 69808
69794: POP
// begin ToLua ( displayStucuk(); ) ;
69795: LD_STRING displayStucuk();
69797: PPUSH
69798: CALL_OW 559
// ResetFog ;
69802: CALL_OW 335
// end ; 3 :
69806: GO 70024
69808: LD_INT 3
69810: DOUBLE
69811: EQUAL
69812: IFTRUE 69816
69814: GO 69920
69816: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69817: LD_ADDR_VAR 0 2
69821: PUSH
69822: LD_INT 22
69824: PUSH
69825: LD_OWVAR 2
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 25
69836: PUSH
69837: LD_INT 1
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PPUSH
69848: CALL_OW 69
69852: ST_TO_ADDR
// if not tmp then
69853: LD_VAR 0 2
69857: NOT
69858: IFFALSE 69862
// exit ;
69860: GO 70024
// un := tmp [ rand ( 1 , tmp ) ] ;
69862: LD_ADDR_VAR 0 3
69866: PUSH
69867: LD_VAR 0 2
69871: PUSH
69872: LD_INT 1
69874: PPUSH
69875: LD_VAR 0 2
69879: PPUSH
69880: CALL_OW 12
69884: ARRAY
69885: ST_TO_ADDR
// if Crawls ( un ) then
69886: LD_VAR 0 3
69890: PPUSH
69891: CALL_OW 318
69895: IFFALSE 69906
// ComWalk ( un ) ;
69897: LD_VAR 0 3
69901: PPUSH
69902: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69906: LD_VAR 0 3
69910: PPUSH
69911: LD_INT 8
69913: PPUSH
69914: CALL_OW 336
// end ; 4 :
69918: GO 70024
69920: LD_INT 4
69922: DOUBLE
69923: EQUAL
69924: IFTRUE 69928
69926: GO 70002
69928: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69929: LD_ADDR_VAR 0 2
69933: PUSH
69934: LD_INT 22
69936: PUSH
69937: LD_OWVAR 2
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 30
69948: PUSH
69949: LD_INT 29
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PPUSH
69960: CALL_OW 69
69964: ST_TO_ADDR
// if not tmp then
69965: LD_VAR 0 2
69969: NOT
69970: IFFALSE 69974
// exit ;
69972: GO 70024
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69974: LD_VAR 0 2
69978: PUSH
69979: LD_INT 1
69981: ARRAY
69982: PPUSH
69983: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69987: LD_VAR 0 2
69991: PUSH
69992: LD_INT 1
69994: ARRAY
69995: PPUSH
69996: CALL_OW 65
// end ; 5 .. 7 :
70000: GO 70024
70002: LD_INT 5
70004: DOUBLE
70005: GREATEREQUAL
70006: IFFALSE 70014
70008: LD_INT 7
70010: DOUBLE
70011: LESSEQUAL
70012: IFTRUE 70016
70014: GO 70023
70016: POP
// StreamSibBomb ; end ;
70017: CALL 66261 0 0
70021: GO 70024
70023: POP
// end ;
70024: PPOPN 3
70026: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
70027: LD_EXP 38
70031: PUSH
70032: LD_EXP 88
70036: AND
70037: IFFALSE 70193
70039: GO 70041
70041: DISABLE
70042: LD_INT 0
70044: PPUSH
70045: PPUSH
70046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
70047: LD_ADDR_VAR 0 2
70051: PUSH
70052: LD_INT 81
70054: PUSH
70055: LD_OWVAR 2
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 2
70066: PUSH
70067: LD_INT 21
70069: PUSH
70070: LD_INT 1
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 21
70079: PUSH
70080: LD_INT 2
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: LIST
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PPUSH
70096: CALL_OW 69
70100: ST_TO_ADDR
// if not tmp then
70101: LD_VAR 0 2
70105: NOT
70106: IFFALSE 70110
// exit ;
70108: GO 70193
// p := 0 ;
70110: LD_ADDR_VAR 0 3
70114: PUSH
70115: LD_INT 0
70117: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70118: LD_INT 35
70120: PPUSH
70121: CALL_OW 67
// p := p + 1 ;
70125: LD_ADDR_VAR 0 3
70129: PUSH
70130: LD_VAR 0 3
70134: PUSH
70135: LD_INT 1
70137: PLUS
70138: ST_TO_ADDR
// for i in tmp do
70139: LD_ADDR_VAR 0 1
70143: PUSH
70144: LD_VAR 0 2
70148: PUSH
70149: FOR_IN
70150: IFFALSE 70181
// if GetLives ( i ) < 1000 then
70152: LD_VAR 0 1
70156: PPUSH
70157: CALL_OW 256
70161: PUSH
70162: LD_INT 1000
70164: LESS
70165: IFFALSE 70179
// SetLives ( i , 1000 ) ;
70167: LD_VAR 0 1
70171: PPUSH
70172: LD_INT 1000
70174: PPUSH
70175: CALL_OW 234
70179: GO 70149
70181: POP
70182: POP
// until p > 20 ;
70183: LD_VAR 0 3
70187: PUSH
70188: LD_INT 20
70190: GREATER
70191: IFFALSE 70118
// end ;
70193: PPOPN 3
70195: END
// every 0 0$1 trigger StreamModeActive and sTime do
70196: LD_EXP 38
70200: PUSH
70201: LD_EXP 89
70205: AND
70206: IFFALSE 70241
70208: GO 70210
70210: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
70211: LD_INT 28
70213: PPUSH
70214: LD_OWVAR 2
70218: PPUSH
70219: LD_INT 2
70221: PPUSH
70222: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
70226: LD_INT 30
70228: PPUSH
70229: LD_OWVAR 2
70233: PPUSH
70234: LD_INT 2
70236: PPUSH
70237: CALL_OW 322
// end ;
70241: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
70242: LD_EXP 38
70246: PUSH
70247: LD_EXP 90
70251: AND
70252: IFFALSE 70373
70254: GO 70256
70256: DISABLE
70257: LD_INT 0
70259: PPUSH
70260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70261: LD_ADDR_VAR 0 2
70265: PUSH
70266: LD_INT 22
70268: PUSH
70269: LD_OWVAR 2
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 21
70280: PUSH
70281: LD_INT 1
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 3
70290: PUSH
70291: LD_INT 23
70293: PUSH
70294: LD_INT 0
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: LIST
70309: PPUSH
70310: CALL_OW 69
70314: ST_TO_ADDR
// if not tmp then
70315: LD_VAR 0 2
70319: NOT
70320: IFFALSE 70324
// exit ;
70322: GO 70373
// for i in tmp do
70324: LD_ADDR_VAR 0 1
70328: PUSH
70329: LD_VAR 0 2
70333: PUSH
70334: FOR_IN
70335: IFFALSE 70371
// begin if Crawls ( i ) then
70337: LD_VAR 0 1
70341: PPUSH
70342: CALL_OW 318
70346: IFFALSE 70357
// ComWalk ( i ) ;
70348: LD_VAR 0 1
70352: PPUSH
70353: CALL_OW 138
// SetClass ( i , 2 ) ;
70357: LD_VAR 0 1
70361: PPUSH
70362: LD_INT 2
70364: PPUSH
70365: CALL_OW 336
// end ;
70369: GO 70334
70371: POP
70372: POP
// end ;
70373: PPOPN 2
70375: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
70376: LD_EXP 38
70380: PUSH
70381: LD_EXP 91
70385: AND
70386: IFFALSE 70674
70388: GO 70390
70390: DISABLE
70391: LD_INT 0
70393: PPUSH
70394: PPUSH
70395: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
70396: LD_OWVAR 2
70400: PPUSH
70401: LD_INT 9
70403: PPUSH
70404: LD_INT 1
70406: PPUSH
70407: LD_INT 1
70409: PPUSH
70410: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
70414: LD_INT 9
70416: PPUSH
70417: LD_OWVAR 2
70421: PPUSH
70422: CALL_OW 343
// uc_side := 9 ;
70426: LD_ADDR_OWVAR 20
70430: PUSH
70431: LD_INT 9
70433: ST_TO_ADDR
// uc_nation := 2 ;
70434: LD_ADDR_OWVAR 21
70438: PUSH
70439: LD_INT 2
70441: ST_TO_ADDR
// hc_name := Dark Warrior ;
70442: LD_ADDR_OWVAR 26
70446: PUSH
70447: LD_STRING Dark Warrior
70449: ST_TO_ADDR
// hc_gallery :=  ;
70450: LD_ADDR_OWVAR 33
70454: PUSH
70455: LD_STRING 
70457: ST_TO_ADDR
// hc_noskilllimit := true ;
70458: LD_ADDR_OWVAR 76
70462: PUSH
70463: LD_INT 1
70465: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
70466: LD_ADDR_OWVAR 31
70470: PUSH
70471: LD_INT 30
70473: PUSH
70474: LD_INT 30
70476: PUSH
70477: LD_INT 30
70479: PUSH
70480: LD_INT 30
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: ST_TO_ADDR
// un := CreateHuman ;
70489: LD_ADDR_VAR 0 3
70493: PUSH
70494: CALL_OW 44
70498: ST_TO_ADDR
// hc_noskilllimit := false ;
70499: LD_ADDR_OWVAR 76
70503: PUSH
70504: LD_INT 0
70506: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70507: LD_VAR 0 3
70511: PPUSH
70512: LD_INT 1
70514: PPUSH
70515: CALL_OW 51
// ToLua ( playRanger() ) ;
70519: LD_STRING playRanger()
70521: PPUSH
70522: CALL_OW 559
// p := 0 ;
70526: LD_ADDR_VAR 0 2
70530: PUSH
70531: LD_INT 0
70533: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70534: LD_INT 35
70536: PPUSH
70537: CALL_OW 67
// p := p + 1 ;
70541: LD_ADDR_VAR 0 2
70545: PUSH
70546: LD_VAR 0 2
70550: PUSH
70551: LD_INT 1
70553: PLUS
70554: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70555: LD_VAR 0 3
70559: PPUSH
70560: CALL_OW 256
70564: PUSH
70565: LD_INT 1000
70567: LESS
70568: IFFALSE 70582
// SetLives ( un , 1000 ) ;
70570: LD_VAR 0 3
70574: PPUSH
70575: LD_INT 1000
70577: PPUSH
70578: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70582: LD_VAR 0 3
70586: PPUSH
70587: LD_INT 81
70589: PUSH
70590: LD_OWVAR 2
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 91
70601: PUSH
70602: LD_VAR 0 3
70606: PUSH
70607: LD_INT 30
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: LIST
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PPUSH
70619: CALL_OW 69
70623: PPUSH
70624: LD_VAR 0 3
70628: PPUSH
70629: CALL_OW 74
70633: PPUSH
70634: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70638: LD_VAR 0 2
70642: PUSH
70643: LD_INT 80
70645: GREATER
70646: PUSH
70647: LD_VAR 0 3
70651: PPUSH
70652: CALL_OW 301
70656: OR
70657: IFFALSE 70534
// if un then
70659: LD_VAR 0 3
70663: IFFALSE 70674
// RemoveUnit ( un ) ;
70665: LD_VAR 0 3
70669: PPUSH
70670: CALL_OW 64
// end ;
70674: PPOPN 3
70676: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70677: LD_EXP 92
70681: IFFALSE 70797
70683: GO 70685
70685: DISABLE
70686: LD_INT 0
70688: PPUSH
70689: PPUSH
70690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70691: LD_ADDR_VAR 0 2
70695: PUSH
70696: LD_INT 81
70698: PUSH
70699: LD_OWVAR 2
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 21
70710: PUSH
70711: LD_INT 1
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PPUSH
70722: CALL_OW 69
70726: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70727: LD_STRING playComputer()
70729: PPUSH
70730: CALL_OW 559
// if not tmp then
70734: LD_VAR 0 2
70738: NOT
70739: IFFALSE 70743
// exit ;
70741: GO 70797
// for i in tmp do
70743: LD_ADDR_VAR 0 1
70747: PUSH
70748: LD_VAR 0 2
70752: PUSH
70753: FOR_IN
70754: IFFALSE 70795
// for j := 1 to 4 do
70756: LD_ADDR_VAR 0 3
70760: PUSH
70761: DOUBLE
70762: LD_INT 1
70764: DEC
70765: ST_TO_ADDR
70766: LD_INT 4
70768: PUSH
70769: FOR_TO
70770: IFFALSE 70791
// SetSkill ( i , j , 10 ) ;
70772: LD_VAR 0 1
70776: PPUSH
70777: LD_VAR 0 3
70781: PPUSH
70782: LD_INT 10
70784: PPUSH
70785: CALL_OW 237
70789: GO 70769
70791: POP
70792: POP
70793: GO 70753
70795: POP
70796: POP
// end ;
70797: PPOPN 3
70799: END
// every 0 0$1 trigger s30 do var i , tmp ;
70800: LD_EXP 93
70804: IFFALSE 70873
70806: GO 70808
70808: DISABLE
70809: LD_INT 0
70811: PPUSH
70812: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70813: LD_ADDR_VAR 0 2
70817: PUSH
70818: LD_INT 22
70820: PUSH
70821: LD_OWVAR 2
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PPUSH
70830: CALL_OW 69
70834: ST_TO_ADDR
// if not tmp then
70835: LD_VAR 0 2
70839: NOT
70840: IFFALSE 70844
// exit ;
70842: GO 70873
// for i in tmp do
70844: LD_ADDR_VAR 0 1
70848: PUSH
70849: LD_VAR 0 2
70853: PUSH
70854: FOR_IN
70855: IFFALSE 70871
// SetLives ( i , 300 ) ;
70857: LD_VAR 0 1
70861: PPUSH
70862: LD_INT 300
70864: PPUSH
70865: CALL_OW 234
70869: GO 70854
70871: POP
70872: POP
// end ;
70873: PPOPN 2
70875: END
// every 0 0$1 trigger s60 do var i , tmp ;
70876: LD_EXP 94
70880: IFFALSE 70949
70882: GO 70884
70884: DISABLE
70885: LD_INT 0
70887: PPUSH
70888: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70889: LD_ADDR_VAR 0 2
70893: PUSH
70894: LD_INT 22
70896: PUSH
70897: LD_OWVAR 2
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PPUSH
70906: CALL_OW 69
70910: ST_TO_ADDR
// if not tmp then
70911: LD_VAR 0 2
70915: NOT
70916: IFFALSE 70920
// exit ;
70918: GO 70949
// for i in tmp do
70920: LD_ADDR_VAR 0 1
70924: PUSH
70925: LD_VAR 0 2
70929: PUSH
70930: FOR_IN
70931: IFFALSE 70947
// SetLives ( i , 600 ) ;
70933: LD_VAR 0 1
70937: PPUSH
70938: LD_INT 600
70940: PPUSH
70941: CALL_OW 234
70945: GO 70930
70947: POP
70948: POP
// end ;
70949: PPOPN 2
70951: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70952: LD_INT 0
70954: PPUSH
// case cmd of 301 :
70955: LD_VAR 0 1
70959: PUSH
70960: LD_INT 301
70962: DOUBLE
70963: EQUAL
70964: IFTRUE 70968
70966: GO 71000
70968: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70969: LD_VAR 0 6
70973: PPUSH
70974: LD_VAR 0 7
70978: PPUSH
70979: LD_VAR 0 8
70983: PPUSH
70984: LD_VAR 0 4
70988: PPUSH
70989: LD_VAR 0 5
70993: PPUSH
70994: CALL 72209 0 5
70998: GO 71121
71000: LD_INT 302
71002: DOUBLE
71003: EQUAL
71004: IFTRUE 71008
71006: GO 71045
71008: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
71009: LD_VAR 0 6
71013: PPUSH
71014: LD_VAR 0 7
71018: PPUSH
71019: LD_VAR 0 8
71023: PPUSH
71024: LD_VAR 0 9
71028: PPUSH
71029: LD_VAR 0 4
71033: PPUSH
71034: LD_VAR 0 5
71038: PPUSH
71039: CALL 72300 0 6
71043: GO 71121
71045: LD_INT 303
71047: DOUBLE
71048: EQUAL
71049: IFTRUE 71053
71051: GO 71090
71053: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
71054: LD_VAR 0 6
71058: PPUSH
71059: LD_VAR 0 7
71063: PPUSH
71064: LD_VAR 0 8
71068: PPUSH
71069: LD_VAR 0 9
71073: PPUSH
71074: LD_VAR 0 4
71078: PPUSH
71079: LD_VAR 0 5
71083: PPUSH
71084: CALL 71126 0 6
71088: GO 71121
71090: LD_INT 304
71092: DOUBLE
71093: EQUAL
71094: IFTRUE 71098
71096: GO 71120
71098: POP
// hHackTeleport ( unit , x , y ) ; end ;
71099: LD_VAR 0 2
71103: PPUSH
71104: LD_VAR 0 4
71108: PPUSH
71109: LD_VAR 0 5
71113: PPUSH
71114: CALL 72893 0 3
71118: GO 71121
71120: POP
// end ;
71121: LD_VAR 0 12
71125: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
71126: LD_INT 0
71128: PPUSH
71129: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
71130: LD_VAR 0 1
71134: PUSH
71135: LD_INT 1
71137: LESS
71138: PUSH
71139: LD_VAR 0 1
71143: PUSH
71144: LD_INT 3
71146: GREATER
71147: OR
71148: PUSH
71149: LD_VAR 0 5
71153: PPUSH
71154: LD_VAR 0 6
71158: PPUSH
71159: CALL_OW 428
71163: OR
71164: IFFALSE 71168
// exit ;
71166: GO 71896
// uc_side := your_side ;
71168: LD_ADDR_OWVAR 20
71172: PUSH
71173: LD_OWVAR 2
71177: ST_TO_ADDR
// uc_nation := nation ;
71178: LD_ADDR_OWVAR 21
71182: PUSH
71183: LD_VAR 0 1
71187: ST_TO_ADDR
// bc_level = 1 ;
71188: LD_ADDR_OWVAR 43
71192: PUSH
71193: LD_INT 1
71195: ST_TO_ADDR
// case btype of 1 :
71196: LD_VAR 0 2
71200: PUSH
71201: LD_INT 1
71203: DOUBLE
71204: EQUAL
71205: IFTRUE 71209
71207: GO 71220
71209: POP
// bc_type := b_depot ; 2 :
71210: LD_ADDR_OWVAR 42
71214: PUSH
71215: LD_INT 0
71217: ST_TO_ADDR
71218: GO 71840
71220: LD_INT 2
71222: DOUBLE
71223: EQUAL
71224: IFTRUE 71228
71226: GO 71239
71228: POP
// bc_type := b_warehouse ; 3 :
71229: LD_ADDR_OWVAR 42
71233: PUSH
71234: LD_INT 1
71236: ST_TO_ADDR
71237: GO 71840
71239: LD_INT 3
71241: DOUBLE
71242: EQUAL
71243: IFTRUE 71247
71245: GO 71258
71247: POP
// bc_type := b_lab ; 4 .. 9 :
71248: LD_ADDR_OWVAR 42
71252: PUSH
71253: LD_INT 6
71255: ST_TO_ADDR
71256: GO 71840
71258: LD_INT 4
71260: DOUBLE
71261: GREATEREQUAL
71262: IFFALSE 71270
71264: LD_INT 9
71266: DOUBLE
71267: LESSEQUAL
71268: IFTRUE 71272
71270: GO 71332
71272: POP
// begin bc_type := b_lab_half ;
71273: LD_ADDR_OWVAR 42
71277: PUSH
71278: LD_INT 7
71280: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
71281: LD_ADDR_OWVAR 44
71285: PUSH
71286: LD_INT 10
71288: PUSH
71289: LD_INT 11
71291: PUSH
71292: LD_INT 12
71294: PUSH
71295: LD_INT 15
71297: PUSH
71298: LD_INT 14
71300: PUSH
71301: LD_INT 13
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: PUSH
71312: LD_VAR 0 2
71316: PUSH
71317: LD_INT 3
71319: MINUS
71320: ARRAY
71321: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
71322: LD_ADDR_OWVAR 45
71326: PUSH
71327: LD_INT 9
71329: ST_TO_ADDR
// end ; 10 .. 13 :
71330: GO 71840
71332: LD_INT 10
71334: DOUBLE
71335: GREATEREQUAL
71336: IFFALSE 71344
71338: LD_INT 13
71340: DOUBLE
71341: LESSEQUAL
71342: IFTRUE 71346
71344: GO 71423
71346: POP
// begin bc_type := b_lab_full ;
71347: LD_ADDR_OWVAR 42
71351: PUSH
71352: LD_INT 8
71354: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
71355: LD_ADDR_OWVAR 44
71359: PUSH
71360: LD_INT 10
71362: PUSH
71363: LD_INT 12
71365: PUSH
71366: LD_INT 14
71368: PUSH
71369: LD_INT 13
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: PUSH
71378: LD_VAR 0 2
71382: PUSH
71383: LD_INT 9
71385: MINUS
71386: ARRAY
71387: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
71388: LD_ADDR_OWVAR 45
71392: PUSH
71393: LD_INT 11
71395: PUSH
71396: LD_INT 15
71398: PUSH
71399: LD_INT 12
71401: PUSH
71402: LD_INT 15
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: PUSH
71411: LD_VAR 0 2
71415: PUSH
71416: LD_INT 9
71418: MINUS
71419: ARRAY
71420: ST_TO_ADDR
// end ; 14 :
71421: GO 71840
71423: LD_INT 14
71425: DOUBLE
71426: EQUAL
71427: IFTRUE 71431
71429: GO 71442
71431: POP
// bc_type := b_workshop ; 15 :
71432: LD_ADDR_OWVAR 42
71436: PUSH
71437: LD_INT 2
71439: ST_TO_ADDR
71440: GO 71840
71442: LD_INT 15
71444: DOUBLE
71445: EQUAL
71446: IFTRUE 71450
71448: GO 71461
71450: POP
// bc_type := b_factory ; 16 :
71451: LD_ADDR_OWVAR 42
71455: PUSH
71456: LD_INT 3
71458: ST_TO_ADDR
71459: GO 71840
71461: LD_INT 16
71463: DOUBLE
71464: EQUAL
71465: IFTRUE 71469
71467: GO 71480
71469: POP
// bc_type := b_ext_gun ; 17 :
71470: LD_ADDR_OWVAR 42
71474: PUSH
71475: LD_INT 17
71477: ST_TO_ADDR
71478: GO 71840
71480: LD_INT 17
71482: DOUBLE
71483: EQUAL
71484: IFTRUE 71488
71486: GO 71516
71488: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
71489: LD_ADDR_OWVAR 42
71493: PUSH
71494: LD_INT 19
71496: PUSH
71497: LD_INT 23
71499: PUSH
71500: LD_INT 19
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: PUSH
71508: LD_VAR 0 1
71512: ARRAY
71513: ST_TO_ADDR
71514: GO 71840
71516: LD_INT 18
71518: DOUBLE
71519: EQUAL
71520: IFTRUE 71524
71522: GO 71535
71524: POP
// bc_type := b_ext_radar ; 19 :
71525: LD_ADDR_OWVAR 42
71529: PUSH
71530: LD_INT 20
71532: ST_TO_ADDR
71533: GO 71840
71535: LD_INT 19
71537: DOUBLE
71538: EQUAL
71539: IFTRUE 71543
71541: GO 71554
71543: POP
// bc_type := b_ext_radio ; 20 :
71544: LD_ADDR_OWVAR 42
71548: PUSH
71549: LD_INT 22
71551: ST_TO_ADDR
71552: GO 71840
71554: LD_INT 20
71556: DOUBLE
71557: EQUAL
71558: IFTRUE 71562
71560: GO 71573
71562: POP
// bc_type := b_ext_siberium ; 21 :
71563: LD_ADDR_OWVAR 42
71567: PUSH
71568: LD_INT 21
71570: ST_TO_ADDR
71571: GO 71840
71573: LD_INT 21
71575: DOUBLE
71576: EQUAL
71577: IFTRUE 71581
71579: GO 71592
71581: POP
// bc_type := b_ext_computer ; 22 :
71582: LD_ADDR_OWVAR 42
71586: PUSH
71587: LD_INT 24
71589: ST_TO_ADDR
71590: GO 71840
71592: LD_INT 22
71594: DOUBLE
71595: EQUAL
71596: IFTRUE 71600
71598: GO 71611
71600: POP
// bc_type := b_ext_track ; 23 :
71601: LD_ADDR_OWVAR 42
71605: PUSH
71606: LD_INT 16
71608: ST_TO_ADDR
71609: GO 71840
71611: LD_INT 23
71613: DOUBLE
71614: EQUAL
71615: IFTRUE 71619
71617: GO 71630
71619: POP
// bc_type := b_ext_laser ; 24 :
71620: LD_ADDR_OWVAR 42
71624: PUSH
71625: LD_INT 25
71627: ST_TO_ADDR
71628: GO 71840
71630: LD_INT 24
71632: DOUBLE
71633: EQUAL
71634: IFTRUE 71638
71636: GO 71649
71638: POP
// bc_type := b_control_tower ; 25 :
71639: LD_ADDR_OWVAR 42
71643: PUSH
71644: LD_INT 36
71646: ST_TO_ADDR
71647: GO 71840
71649: LD_INT 25
71651: DOUBLE
71652: EQUAL
71653: IFTRUE 71657
71655: GO 71668
71657: POP
// bc_type := b_breastwork ; 26 :
71658: LD_ADDR_OWVAR 42
71662: PUSH
71663: LD_INT 31
71665: ST_TO_ADDR
71666: GO 71840
71668: LD_INT 26
71670: DOUBLE
71671: EQUAL
71672: IFTRUE 71676
71674: GO 71687
71676: POP
// bc_type := b_bunker ; 27 :
71677: LD_ADDR_OWVAR 42
71681: PUSH
71682: LD_INT 32
71684: ST_TO_ADDR
71685: GO 71840
71687: LD_INT 27
71689: DOUBLE
71690: EQUAL
71691: IFTRUE 71695
71693: GO 71706
71695: POP
// bc_type := b_turret ; 28 :
71696: LD_ADDR_OWVAR 42
71700: PUSH
71701: LD_INT 33
71703: ST_TO_ADDR
71704: GO 71840
71706: LD_INT 28
71708: DOUBLE
71709: EQUAL
71710: IFTRUE 71714
71712: GO 71725
71714: POP
// bc_type := b_armoury ; 29 :
71715: LD_ADDR_OWVAR 42
71719: PUSH
71720: LD_INT 4
71722: ST_TO_ADDR
71723: GO 71840
71725: LD_INT 29
71727: DOUBLE
71728: EQUAL
71729: IFTRUE 71733
71731: GO 71744
71733: POP
// bc_type := b_barracks ; 30 :
71734: LD_ADDR_OWVAR 42
71738: PUSH
71739: LD_INT 5
71741: ST_TO_ADDR
71742: GO 71840
71744: LD_INT 30
71746: DOUBLE
71747: EQUAL
71748: IFTRUE 71752
71750: GO 71763
71752: POP
// bc_type := b_solar_power ; 31 :
71753: LD_ADDR_OWVAR 42
71757: PUSH
71758: LD_INT 27
71760: ST_TO_ADDR
71761: GO 71840
71763: LD_INT 31
71765: DOUBLE
71766: EQUAL
71767: IFTRUE 71771
71769: GO 71782
71771: POP
// bc_type := b_oil_power ; 32 :
71772: LD_ADDR_OWVAR 42
71776: PUSH
71777: LD_INT 26
71779: ST_TO_ADDR
71780: GO 71840
71782: LD_INT 32
71784: DOUBLE
71785: EQUAL
71786: IFTRUE 71790
71788: GO 71801
71790: POP
// bc_type := b_siberite_power ; 33 :
71791: LD_ADDR_OWVAR 42
71795: PUSH
71796: LD_INT 28
71798: ST_TO_ADDR
71799: GO 71840
71801: LD_INT 33
71803: DOUBLE
71804: EQUAL
71805: IFTRUE 71809
71807: GO 71820
71809: POP
// bc_type := b_oil_mine ; 34 :
71810: LD_ADDR_OWVAR 42
71814: PUSH
71815: LD_INT 29
71817: ST_TO_ADDR
71818: GO 71840
71820: LD_INT 34
71822: DOUBLE
71823: EQUAL
71824: IFTRUE 71828
71826: GO 71839
71828: POP
// bc_type := b_siberite_mine ; end ;
71829: LD_ADDR_OWVAR 42
71833: PUSH
71834: LD_INT 30
71836: ST_TO_ADDR
71837: GO 71840
71839: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71840: LD_ADDR_VAR 0 8
71844: PUSH
71845: LD_VAR 0 5
71849: PPUSH
71850: LD_VAR 0 6
71854: PPUSH
71855: LD_VAR 0 3
71859: PPUSH
71860: CALL_OW 47
71864: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71865: LD_OWVAR 42
71869: PUSH
71870: LD_INT 32
71872: PUSH
71873: LD_INT 33
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: IN
71880: IFFALSE 71896
// PlaceWeaponTurret ( b , weapon ) ;
71882: LD_VAR 0 8
71886: PPUSH
71887: LD_VAR 0 4
71891: PPUSH
71892: CALL_OW 431
// end ;
71896: LD_VAR 0 7
71900: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71901: LD_INT 0
71903: PPUSH
71904: PPUSH
71905: PPUSH
71906: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71907: LD_ADDR_VAR 0 4
71911: PUSH
71912: LD_INT 22
71914: PUSH
71915: LD_OWVAR 2
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 2
71926: PUSH
71927: LD_INT 30
71929: PUSH
71930: LD_INT 0
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 30
71939: PUSH
71940: LD_INT 1
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: LIST
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PPUSH
71956: CALL_OW 69
71960: ST_TO_ADDR
// if not tmp then
71961: LD_VAR 0 4
71965: NOT
71966: IFFALSE 71970
// exit ;
71968: GO 72029
// for i in tmp do
71970: LD_ADDR_VAR 0 2
71974: PUSH
71975: LD_VAR 0 4
71979: PUSH
71980: FOR_IN
71981: IFFALSE 72027
// for j = 1 to 3 do
71983: LD_ADDR_VAR 0 3
71987: PUSH
71988: DOUBLE
71989: LD_INT 1
71991: DEC
71992: ST_TO_ADDR
71993: LD_INT 3
71995: PUSH
71996: FOR_TO
71997: IFFALSE 72023
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71999: LD_VAR 0 2
72003: PPUSH
72004: CALL_OW 274
72008: PPUSH
72009: LD_VAR 0 3
72013: PPUSH
72014: LD_INT 99999
72016: PPUSH
72017: CALL_OW 277
72021: GO 71996
72023: POP
72024: POP
72025: GO 71980
72027: POP
72028: POP
// end ;
72029: LD_VAR 0 1
72033: RET
// export function hHackSetLevel10 ; var i , j ; begin
72034: LD_INT 0
72036: PPUSH
72037: PPUSH
72038: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72039: LD_ADDR_VAR 0 2
72043: PUSH
72044: LD_INT 21
72046: PUSH
72047: LD_INT 1
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: PPUSH
72054: CALL_OW 69
72058: PUSH
72059: FOR_IN
72060: IFFALSE 72112
// if IsSelected ( i ) then
72062: LD_VAR 0 2
72066: PPUSH
72067: CALL_OW 306
72071: IFFALSE 72110
// begin for j := 1 to 4 do
72073: LD_ADDR_VAR 0 3
72077: PUSH
72078: DOUBLE
72079: LD_INT 1
72081: DEC
72082: ST_TO_ADDR
72083: LD_INT 4
72085: PUSH
72086: FOR_TO
72087: IFFALSE 72108
// SetSkill ( i , j , 10 ) ;
72089: LD_VAR 0 2
72093: PPUSH
72094: LD_VAR 0 3
72098: PPUSH
72099: LD_INT 10
72101: PPUSH
72102: CALL_OW 237
72106: GO 72086
72108: POP
72109: POP
// end ;
72110: GO 72059
72112: POP
72113: POP
// end ;
72114: LD_VAR 0 1
72118: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
72119: LD_INT 0
72121: PPUSH
72122: PPUSH
72123: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
72124: LD_ADDR_VAR 0 2
72128: PUSH
72129: LD_INT 22
72131: PUSH
72132: LD_OWVAR 2
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 21
72143: PUSH
72144: LD_INT 1
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PPUSH
72155: CALL_OW 69
72159: PUSH
72160: FOR_IN
72161: IFFALSE 72202
// begin for j := 1 to 4 do
72163: LD_ADDR_VAR 0 3
72167: PUSH
72168: DOUBLE
72169: LD_INT 1
72171: DEC
72172: ST_TO_ADDR
72173: LD_INT 4
72175: PUSH
72176: FOR_TO
72177: IFFALSE 72198
// SetSkill ( i , j , 10 ) ;
72179: LD_VAR 0 2
72183: PPUSH
72184: LD_VAR 0 3
72188: PPUSH
72189: LD_INT 10
72191: PPUSH
72192: CALL_OW 237
72196: GO 72176
72198: POP
72199: POP
// end ;
72200: GO 72160
72202: POP
72203: POP
// end ;
72204: LD_VAR 0 1
72208: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
72209: LD_INT 0
72211: PPUSH
// uc_side := your_side ;
72212: LD_ADDR_OWVAR 20
72216: PUSH
72217: LD_OWVAR 2
72221: ST_TO_ADDR
// uc_nation := nation ;
72222: LD_ADDR_OWVAR 21
72226: PUSH
72227: LD_VAR 0 1
72231: ST_TO_ADDR
// InitHc ;
72232: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
72236: LD_INT 0
72238: PPUSH
72239: LD_VAR 0 2
72243: PPUSH
72244: LD_VAR 0 3
72248: PPUSH
72249: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
72253: LD_VAR 0 4
72257: PPUSH
72258: LD_VAR 0 5
72262: PPUSH
72263: CALL_OW 428
72267: PUSH
72268: LD_INT 0
72270: EQUAL
72271: IFFALSE 72295
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
72273: CALL_OW 44
72277: PPUSH
72278: LD_VAR 0 4
72282: PPUSH
72283: LD_VAR 0 5
72287: PPUSH
72288: LD_INT 1
72290: PPUSH
72291: CALL_OW 48
// end ;
72295: LD_VAR 0 6
72299: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
72300: LD_INT 0
72302: PPUSH
72303: PPUSH
// uc_side := your_side ;
72304: LD_ADDR_OWVAR 20
72308: PUSH
72309: LD_OWVAR 2
72313: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
72314: LD_VAR 0 1
72318: PUSH
72319: LD_INT 1
72321: PUSH
72322: LD_INT 2
72324: PUSH
72325: LD_INT 3
72327: PUSH
72328: LD_INT 4
72330: PUSH
72331: LD_INT 5
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: IN
72341: IFFALSE 72353
// uc_nation := nation_american else
72343: LD_ADDR_OWVAR 21
72347: PUSH
72348: LD_INT 1
72350: ST_TO_ADDR
72351: GO 72396
// if chassis in [ 11 , 12 , 13 , 14 ] then
72353: LD_VAR 0 1
72357: PUSH
72358: LD_INT 11
72360: PUSH
72361: LD_INT 12
72363: PUSH
72364: LD_INT 13
72366: PUSH
72367: LD_INT 14
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: LIST
72374: LIST
72375: IN
72376: IFFALSE 72388
// uc_nation := nation_arabian else
72378: LD_ADDR_OWVAR 21
72382: PUSH
72383: LD_INT 2
72385: ST_TO_ADDR
72386: GO 72396
// uc_nation := nation_russian ;
72388: LD_ADDR_OWVAR 21
72392: PUSH
72393: LD_INT 3
72395: ST_TO_ADDR
// vc_chassis := chassis ;
72396: LD_ADDR_OWVAR 37
72400: PUSH
72401: LD_VAR 0 1
72405: ST_TO_ADDR
// vc_engine := engine ;
72406: LD_ADDR_OWVAR 39
72410: PUSH
72411: LD_VAR 0 2
72415: ST_TO_ADDR
// vc_control := control ;
72416: LD_ADDR_OWVAR 38
72420: PUSH
72421: LD_VAR 0 3
72425: ST_TO_ADDR
// vc_weapon := weapon ;
72426: LD_ADDR_OWVAR 40
72430: PUSH
72431: LD_VAR 0 4
72435: ST_TO_ADDR
// un := CreateVehicle ;
72436: LD_ADDR_VAR 0 8
72440: PUSH
72441: CALL_OW 45
72445: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
72446: LD_VAR 0 8
72450: PPUSH
72451: LD_INT 0
72453: PPUSH
72454: LD_INT 5
72456: PPUSH
72457: CALL_OW 12
72461: PPUSH
72462: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
72466: LD_VAR 0 8
72470: PPUSH
72471: LD_VAR 0 5
72475: PPUSH
72476: LD_VAR 0 6
72480: PPUSH
72481: LD_INT 1
72483: PPUSH
72484: CALL_OW 48
// end ;
72488: LD_VAR 0 7
72492: RET
// export hInvincible ; every 1 do
72493: GO 72495
72495: DISABLE
// hInvincible := [ ] ;
72496: LD_ADDR_EXP 95
72500: PUSH
72501: EMPTY
72502: ST_TO_ADDR
72503: END
// every 10 do var i ;
72504: GO 72506
72506: DISABLE
72507: LD_INT 0
72509: PPUSH
// begin enable ;
72510: ENABLE
// if not hInvincible then
72511: LD_EXP 95
72515: NOT
72516: IFFALSE 72520
// exit ;
72518: GO 72564
// for i in hInvincible do
72520: LD_ADDR_VAR 0 1
72524: PUSH
72525: LD_EXP 95
72529: PUSH
72530: FOR_IN
72531: IFFALSE 72562
// if GetLives ( i ) < 1000 then
72533: LD_VAR 0 1
72537: PPUSH
72538: CALL_OW 256
72542: PUSH
72543: LD_INT 1000
72545: LESS
72546: IFFALSE 72560
// SetLives ( i , 1000 ) ;
72548: LD_VAR 0 1
72552: PPUSH
72553: LD_INT 1000
72555: PPUSH
72556: CALL_OW 234
72560: GO 72530
72562: POP
72563: POP
// end ;
72564: PPOPN 1
72566: END
// export function hHackInvincible ; var i ; begin
72567: LD_INT 0
72569: PPUSH
72570: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72571: LD_ADDR_VAR 0 2
72575: PUSH
72576: LD_INT 2
72578: PUSH
72579: LD_INT 21
72581: PUSH
72582: LD_INT 1
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 21
72591: PUSH
72592: LD_INT 2
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: LIST
72603: PPUSH
72604: CALL_OW 69
72608: PUSH
72609: FOR_IN
72610: IFFALSE 72671
// if IsSelected ( i ) then
72612: LD_VAR 0 2
72616: PPUSH
72617: CALL_OW 306
72621: IFFALSE 72669
// begin if i in hInvincible then
72623: LD_VAR 0 2
72627: PUSH
72628: LD_EXP 95
72632: IN
72633: IFFALSE 72653
// hInvincible := hInvincible diff i else
72635: LD_ADDR_EXP 95
72639: PUSH
72640: LD_EXP 95
72644: PUSH
72645: LD_VAR 0 2
72649: DIFF
72650: ST_TO_ADDR
72651: GO 72669
// hInvincible := hInvincible union i ;
72653: LD_ADDR_EXP 95
72657: PUSH
72658: LD_EXP 95
72662: PUSH
72663: LD_VAR 0 2
72667: UNION
72668: ST_TO_ADDR
// end ;
72669: GO 72609
72671: POP
72672: POP
// end ;
72673: LD_VAR 0 1
72677: RET
// export function hHackInvisible ; var i , j ; begin
72678: LD_INT 0
72680: PPUSH
72681: PPUSH
72682: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72683: LD_ADDR_VAR 0 2
72687: PUSH
72688: LD_INT 21
72690: PUSH
72691: LD_INT 1
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: PPUSH
72698: CALL_OW 69
72702: PUSH
72703: FOR_IN
72704: IFFALSE 72728
// if IsSelected ( i ) then
72706: LD_VAR 0 2
72710: PPUSH
72711: CALL_OW 306
72715: IFFALSE 72726
// ComForceInvisible ( i ) ;
72717: LD_VAR 0 2
72721: PPUSH
72722: CALL_OW 496
72726: GO 72703
72728: POP
72729: POP
// end ;
72730: LD_VAR 0 1
72734: RET
// export function hHackChangeYourSide ; begin
72735: LD_INT 0
72737: PPUSH
// if your_side = 8 then
72738: LD_OWVAR 2
72742: PUSH
72743: LD_INT 8
72745: EQUAL
72746: IFFALSE 72758
// your_side := 0 else
72748: LD_ADDR_OWVAR 2
72752: PUSH
72753: LD_INT 0
72755: ST_TO_ADDR
72756: GO 72772
// your_side := your_side + 1 ;
72758: LD_ADDR_OWVAR 2
72762: PUSH
72763: LD_OWVAR 2
72767: PUSH
72768: LD_INT 1
72770: PLUS
72771: ST_TO_ADDR
// end ;
72772: LD_VAR 0 1
72776: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72777: LD_INT 0
72779: PPUSH
72780: PPUSH
72781: PPUSH
// for i in all_units do
72782: LD_ADDR_VAR 0 2
72786: PUSH
72787: LD_OWVAR 3
72791: PUSH
72792: FOR_IN
72793: IFFALSE 72871
// if IsSelected ( i ) then
72795: LD_VAR 0 2
72799: PPUSH
72800: CALL_OW 306
72804: IFFALSE 72869
// begin j := GetSide ( i ) ;
72806: LD_ADDR_VAR 0 3
72810: PUSH
72811: LD_VAR 0 2
72815: PPUSH
72816: CALL_OW 255
72820: ST_TO_ADDR
// if j = 8 then
72821: LD_VAR 0 3
72825: PUSH
72826: LD_INT 8
72828: EQUAL
72829: IFFALSE 72841
// j := 0 else
72831: LD_ADDR_VAR 0 3
72835: PUSH
72836: LD_INT 0
72838: ST_TO_ADDR
72839: GO 72855
// j := j + 1 ;
72841: LD_ADDR_VAR 0 3
72845: PUSH
72846: LD_VAR 0 3
72850: PUSH
72851: LD_INT 1
72853: PLUS
72854: ST_TO_ADDR
// SetSide ( i , j ) ;
72855: LD_VAR 0 2
72859: PPUSH
72860: LD_VAR 0 3
72864: PPUSH
72865: CALL_OW 235
// end ;
72869: GO 72792
72871: POP
72872: POP
// end ;
72873: LD_VAR 0 1
72877: RET
// export function hHackFog ; begin
72878: LD_INT 0
72880: PPUSH
// FogOff ( true ) ;
72881: LD_INT 1
72883: PPUSH
72884: CALL_OW 344
// end ;
72888: LD_VAR 0 1
72892: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72893: LD_INT 0
72895: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72896: LD_VAR 0 1
72900: PPUSH
72901: LD_VAR 0 2
72905: PPUSH
72906: LD_VAR 0 3
72910: PPUSH
72911: LD_INT 1
72913: PPUSH
72914: LD_INT 1
72916: PPUSH
72917: CALL_OW 483
// CenterOnXY ( x , y ) ;
72921: LD_VAR 0 2
72925: PPUSH
72926: LD_VAR 0 3
72930: PPUSH
72931: CALL_OW 84
// end ;
72935: LD_VAR 0 4
72939: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72940: LD_INT 0
72942: PPUSH
72943: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72944: LD_VAR 0 1
72948: NOT
72949: PUSH
72950: LD_VAR 0 2
72954: PPUSH
72955: LD_VAR 0 3
72959: PPUSH
72960: CALL_OW 488
72964: NOT
72965: OR
72966: PUSH
72967: LD_VAR 0 1
72971: PPUSH
72972: CALL_OW 266
72976: PUSH
72977: LD_INT 3
72979: NONEQUAL
72980: PUSH
72981: LD_VAR 0 1
72985: PPUSH
72986: CALL_OW 247
72990: PUSH
72991: LD_INT 1
72993: EQUAL
72994: NOT
72995: AND
72996: OR
72997: IFFALSE 73001
// exit ;
72999: GO 73283
// if GetType ( factory ) = unit_human then
73001: LD_VAR 0 1
73005: PPUSH
73006: CALL_OW 247
73010: PUSH
73011: LD_INT 1
73013: EQUAL
73014: IFFALSE 73031
// factory := IsInUnit ( factory ) ;
73016: LD_ADDR_VAR 0 1
73020: PUSH
73021: LD_VAR 0 1
73025: PPUSH
73026: CALL_OW 310
73030: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
73031: LD_VAR 0 1
73035: PPUSH
73036: CALL_OW 266
73040: PUSH
73041: LD_INT 3
73043: NONEQUAL
73044: IFFALSE 73048
// exit ;
73046: GO 73283
// for i := 1 to Count ( factoryWaypoints ) do
73048: LD_ADDR_VAR 0 5
73052: PUSH
73053: DOUBLE
73054: LD_INT 1
73056: DEC
73057: ST_TO_ADDR
73058: LD_EXP 96
73062: PPUSH
73063: CALL 17674 0 1
73067: PUSH
73068: FOR_TO
73069: IFFALSE 73231
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
73071: LD_VAR 0 2
73075: PPUSH
73076: LD_VAR 0 3
73080: PPUSH
73081: CALL_OW 428
73085: PUSH
73086: LD_EXP 96
73090: PUSH
73091: LD_VAR 0 5
73095: ARRAY
73096: PUSH
73097: LD_INT 2
73099: ARRAY
73100: EQUAL
73101: IFFALSE 73133
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
73103: LD_ADDR_EXP 96
73107: PUSH
73108: LD_EXP 96
73112: PPUSH
73113: LD_VAR 0 5
73117: PPUSH
73118: CALL_OW 3
73122: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73123: CALL 73288 0 0
// exit ;
73127: POP
73128: POP
73129: GO 73283
// end else
73131: GO 73229
// if factory = factoryWaypoints [ i ] [ 2 ] then
73133: LD_VAR 0 1
73137: PUSH
73138: LD_EXP 96
73142: PUSH
73143: LD_VAR 0 5
73147: ARRAY
73148: PUSH
73149: LD_INT 2
73151: ARRAY
73152: EQUAL
73153: IFFALSE 73229
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
73155: LD_ADDR_EXP 96
73159: PUSH
73160: LD_EXP 96
73164: PPUSH
73165: LD_VAR 0 5
73169: PPUSH
73170: CALL_OW 3
73174: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
73175: LD_ADDR_EXP 96
73179: PUSH
73180: LD_EXP 96
73184: PPUSH
73185: LD_VAR 0 1
73189: PPUSH
73190: CALL_OW 255
73194: PUSH
73195: LD_VAR 0 1
73199: PUSH
73200: LD_VAR 0 2
73204: PUSH
73205: LD_VAR 0 3
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: PPUSH
73216: CALL 53283 0 2
73220: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73221: CALL 73288 0 0
// exit ;
73225: POP
73226: POP
73227: GO 73283
// end ; end ;
73229: GO 73068
73231: POP
73232: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
73233: LD_ADDR_EXP 96
73237: PUSH
73238: LD_EXP 96
73242: PPUSH
73243: LD_VAR 0 1
73247: PPUSH
73248: CALL_OW 255
73252: PUSH
73253: LD_VAR 0 1
73257: PUSH
73258: LD_VAR 0 2
73262: PUSH
73263: LD_VAR 0 3
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: PPUSH
73274: CALL 53283 0 2
73278: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73279: CALL 73288 0 0
// end ;
73283: LD_VAR 0 4
73287: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
73288: LD_INT 0
73290: PPUSH
73291: PPUSH
73292: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
73293: LD_STRING resetFactoryWaypoint();
73295: PPUSH
73296: CALL_OW 559
// if factoryWaypoints then
73300: LD_EXP 96
73304: IFFALSE 73425
// begin list := factoryWaypoints ;
73306: LD_ADDR_VAR 0 3
73310: PUSH
73311: LD_EXP 96
73315: ST_TO_ADDR
// for i := 1 to list do
73316: LD_ADDR_VAR 0 2
73320: PUSH
73321: DOUBLE
73322: LD_INT 1
73324: DEC
73325: ST_TO_ADDR
73326: LD_VAR 0 3
73330: PUSH
73331: FOR_TO
73332: IFFALSE 73423
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73334: LD_STRING setFactoryWaypointXY(
73336: PUSH
73337: LD_VAR 0 3
73341: PUSH
73342: LD_VAR 0 2
73346: ARRAY
73347: PUSH
73348: LD_INT 1
73350: ARRAY
73351: STR
73352: PUSH
73353: LD_STRING ,
73355: STR
73356: PUSH
73357: LD_VAR 0 3
73361: PUSH
73362: LD_VAR 0 2
73366: ARRAY
73367: PUSH
73368: LD_INT 2
73370: ARRAY
73371: STR
73372: PUSH
73373: LD_STRING ,
73375: STR
73376: PUSH
73377: LD_VAR 0 3
73381: PUSH
73382: LD_VAR 0 2
73386: ARRAY
73387: PUSH
73388: LD_INT 3
73390: ARRAY
73391: STR
73392: PUSH
73393: LD_STRING ,
73395: STR
73396: PUSH
73397: LD_VAR 0 3
73401: PUSH
73402: LD_VAR 0 2
73406: ARRAY
73407: PUSH
73408: LD_INT 4
73410: ARRAY
73411: STR
73412: PUSH
73413: LD_STRING )
73415: STR
73416: PPUSH
73417: CALL_OW 559
73421: GO 73331
73423: POP
73424: POP
// end ; end ;
73425: LD_VAR 0 1
73429: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
73430: LD_INT 0
73432: PPUSH
// if HexInfo ( x , y ) = warehouse then
73433: LD_VAR 0 2
73437: PPUSH
73438: LD_VAR 0 3
73442: PPUSH
73443: CALL_OW 428
73447: PUSH
73448: LD_VAR 0 1
73452: EQUAL
73453: IFFALSE 73480
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
73455: LD_ADDR_EXP 97
73459: PUSH
73460: LD_EXP 97
73464: PPUSH
73465: LD_VAR 0 1
73469: PPUSH
73470: LD_INT 0
73472: PPUSH
73473: CALL_OW 1
73477: ST_TO_ADDR
73478: GO 73531
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
73480: LD_ADDR_EXP 97
73484: PUSH
73485: LD_EXP 97
73489: PPUSH
73490: LD_VAR 0 1
73494: PPUSH
73495: LD_VAR 0 1
73499: PPUSH
73500: CALL_OW 255
73504: PUSH
73505: LD_VAR 0 1
73509: PUSH
73510: LD_VAR 0 2
73514: PUSH
73515: LD_VAR 0 3
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: PPUSH
73526: CALL_OW 1
73530: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
73531: CALL 73540 0 0
// end ;
73535: LD_VAR 0 4
73539: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
73540: LD_INT 0
73542: PPUSH
73543: PPUSH
73544: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
73545: LD_STRING resetWarehouseGatheringPoints();
73547: PPUSH
73548: CALL_OW 559
// if warehouseGatheringPoints then
73552: LD_EXP 97
73556: IFFALSE 73682
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
73558: LD_ADDR_VAR 0 3
73562: PUSH
73563: LD_EXP 97
73567: PPUSH
73568: CALL 57051 0 1
73572: ST_TO_ADDR
// for i := 1 to list do
73573: LD_ADDR_VAR 0 2
73577: PUSH
73578: DOUBLE
73579: LD_INT 1
73581: DEC
73582: ST_TO_ADDR
73583: LD_VAR 0 3
73587: PUSH
73588: FOR_TO
73589: IFFALSE 73680
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73591: LD_STRING setWarehouseGatheringPointXY(
73593: PUSH
73594: LD_VAR 0 3
73598: PUSH
73599: LD_VAR 0 2
73603: ARRAY
73604: PUSH
73605: LD_INT 1
73607: ARRAY
73608: STR
73609: PUSH
73610: LD_STRING ,
73612: STR
73613: PUSH
73614: LD_VAR 0 3
73618: PUSH
73619: LD_VAR 0 2
73623: ARRAY
73624: PUSH
73625: LD_INT 2
73627: ARRAY
73628: STR
73629: PUSH
73630: LD_STRING ,
73632: STR
73633: PUSH
73634: LD_VAR 0 3
73638: PUSH
73639: LD_VAR 0 2
73643: ARRAY
73644: PUSH
73645: LD_INT 3
73647: ARRAY
73648: STR
73649: PUSH
73650: LD_STRING ,
73652: STR
73653: PUSH
73654: LD_VAR 0 3
73658: PUSH
73659: LD_VAR 0 2
73663: ARRAY
73664: PUSH
73665: LD_INT 4
73667: ARRAY
73668: STR
73669: PUSH
73670: LD_STRING )
73672: STR
73673: PPUSH
73674: CALL_OW 559
73678: GO 73588
73680: POP
73681: POP
// end ; end ;
73682: LD_VAR 0 1
73686: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
73687: LD_EXP 97
73691: IFFALSE 74376
73693: GO 73695
73695: DISABLE
73696: LD_INT 0
73698: PPUSH
73699: PPUSH
73700: PPUSH
73701: PPUSH
73702: PPUSH
73703: PPUSH
73704: PPUSH
73705: PPUSH
73706: PPUSH
// begin enable ;
73707: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73708: LD_ADDR_VAR 0 3
73712: PUSH
73713: LD_EXP 97
73717: PPUSH
73718: CALL 57051 0 1
73722: ST_TO_ADDR
// if not list then
73723: LD_VAR 0 3
73727: NOT
73728: IFFALSE 73732
// exit ;
73730: GO 74376
// for i := 1 to list do
73732: LD_ADDR_VAR 0 1
73736: PUSH
73737: DOUBLE
73738: LD_INT 1
73740: DEC
73741: ST_TO_ADDR
73742: LD_VAR 0 3
73746: PUSH
73747: FOR_TO
73748: IFFALSE 74374
// begin depot := list [ i ] [ 2 ] ;
73750: LD_ADDR_VAR 0 8
73754: PUSH
73755: LD_VAR 0 3
73759: PUSH
73760: LD_VAR 0 1
73764: ARRAY
73765: PUSH
73766: LD_INT 2
73768: ARRAY
73769: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73770: LD_ADDR_VAR 0 5
73774: PUSH
73775: LD_VAR 0 3
73779: PUSH
73780: LD_VAR 0 1
73784: ARRAY
73785: PUSH
73786: LD_INT 1
73788: ARRAY
73789: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73790: LD_VAR 0 8
73794: PPUSH
73795: CALL_OW 301
73799: PUSH
73800: LD_VAR 0 5
73804: PUSH
73805: LD_VAR 0 8
73809: PPUSH
73810: CALL_OW 255
73814: NONEQUAL
73815: OR
73816: IFFALSE 73845
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73818: LD_ADDR_EXP 97
73822: PUSH
73823: LD_EXP 97
73827: PPUSH
73828: LD_VAR 0 8
73832: PPUSH
73833: LD_INT 0
73835: PPUSH
73836: CALL_OW 1
73840: ST_TO_ADDR
// exit ;
73841: POP
73842: POP
73843: GO 74376
// end ; x := list [ i ] [ 3 ] ;
73845: LD_ADDR_VAR 0 6
73849: PUSH
73850: LD_VAR 0 3
73854: PUSH
73855: LD_VAR 0 1
73859: ARRAY
73860: PUSH
73861: LD_INT 3
73863: ARRAY
73864: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73865: LD_ADDR_VAR 0 7
73869: PUSH
73870: LD_VAR 0 3
73874: PUSH
73875: LD_VAR 0 1
73879: ARRAY
73880: PUSH
73881: LD_INT 4
73883: ARRAY
73884: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73885: LD_ADDR_VAR 0 9
73889: PUSH
73890: LD_VAR 0 6
73894: PPUSH
73895: LD_VAR 0 7
73899: PPUSH
73900: LD_INT 16
73902: PPUSH
73903: CALL 55635 0 3
73907: ST_TO_ADDR
// if not cratesNearbyPoint then
73908: LD_VAR 0 9
73912: NOT
73913: IFFALSE 73919
// exit ;
73915: POP
73916: POP
73917: GO 74376
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73919: LD_ADDR_VAR 0 4
73923: PUSH
73924: LD_INT 22
73926: PUSH
73927: LD_VAR 0 5
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: PUSH
73936: LD_INT 3
73938: PUSH
73939: LD_INT 60
73941: PUSH
73942: EMPTY
73943: LIST
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 91
73951: PUSH
73952: LD_VAR 0 8
73956: PUSH
73957: LD_INT 6
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: LIST
73964: PUSH
73965: LD_INT 2
73967: PUSH
73968: LD_INT 25
73970: PUSH
73971: LD_INT 2
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: LD_INT 25
73980: PUSH
73981: LD_INT 16
73983: PUSH
73984: EMPTY
73985: LIST
73986: LIST
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: LIST
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: PPUSH
73999: CALL_OW 69
74003: PUSH
74004: LD_VAR 0 8
74008: PPUSH
74009: CALL_OW 313
74013: PPUSH
74014: LD_INT 3
74016: PUSH
74017: LD_INT 60
74019: PUSH
74020: EMPTY
74021: LIST
74022: PUSH
74023: EMPTY
74024: LIST
74025: LIST
74026: PUSH
74027: LD_INT 2
74029: PUSH
74030: LD_INT 25
74032: PUSH
74033: LD_INT 2
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 25
74042: PUSH
74043: LD_INT 16
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: LIST
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PPUSH
74059: CALL_OW 72
74063: UNION
74064: ST_TO_ADDR
// if tmp then
74065: LD_VAR 0 4
74069: IFFALSE 74149
// begin tmp := ShrinkArray ( tmp , 3 ) ;
74071: LD_ADDR_VAR 0 4
74075: PUSH
74076: LD_VAR 0 4
74080: PPUSH
74081: LD_INT 3
74083: PPUSH
74084: CALL 53598 0 2
74088: ST_TO_ADDR
// for j in tmp do
74089: LD_ADDR_VAR 0 2
74093: PUSH
74094: LD_VAR 0 4
74098: PUSH
74099: FOR_IN
74100: IFFALSE 74143
// begin if IsInUnit ( j ) then
74102: LD_VAR 0 2
74106: PPUSH
74107: CALL_OW 310
74111: IFFALSE 74122
// ComExit ( j ) ;
74113: LD_VAR 0 2
74117: PPUSH
74118: CALL 53681 0 1
// AddComCollect ( j , x , y ) ;
74122: LD_VAR 0 2
74126: PPUSH
74127: LD_VAR 0 6
74131: PPUSH
74132: LD_VAR 0 7
74136: PPUSH
74137: CALL_OW 177
// end ;
74141: GO 74099
74143: POP
74144: POP
// exit ;
74145: POP
74146: POP
74147: GO 74376
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
74149: LD_ADDR_VAR 0 4
74153: PUSH
74154: LD_INT 22
74156: PUSH
74157: LD_VAR 0 5
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 91
74168: PUSH
74169: LD_VAR 0 8
74173: PUSH
74174: LD_INT 8
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: LIST
74181: PUSH
74182: LD_INT 2
74184: PUSH
74185: LD_INT 34
74187: PUSH
74188: LD_INT 12
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: LD_INT 34
74197: PUSH
74198: LD_INT 51
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: PUSH
74205: LD_INT 34
74207: PUSH
74208: LD_INT 32
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: PUSH
74215: LD_INT 34
74217: PUSH
74218: LD_INT 89
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: LIST
74236: PPUSH
74237: CALL_OW 69
74241: ST_TO_ADDR
// if tmp then
74242: LD_VAR 0 4
74246: IFFALSE 74372
// begin for j in tmp do
74248: LD_ADDR_VAR 0 2
74252: PUSH
74253: LD_VAR 0 4
74257: PUSH
74258: FOR_IN
74259: IFFALSE 74370
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
74261: LD_VAR 0 2
74265: PPUSH
74266: CALL_OW 262
74270: PUSH
74271: LD_INT 3
74273: EQUAL
74274: PUSH
74275: LD_VAR 0 2
74279: PPUSH
74280: CALL_OW 261
74284: PUSH
74285: LD_INT 20
74287: GREATER
74288: OR
74289: PUSH
74290: LD_VAR 0 2
74294: PPUSH
74295: CALL_OW 314
74299: NOT
74300: AND
74301: PUSH
74302: LD_VAR 0 2
74306: PPUSH
74307: CALL_OW 263
74311: PUSH
74312: LD_INT 1
74314: NONEQUAL
74315: PUSH
74316: LD_VAR 0 2
74320: PPUSH
74321: CALL_OW 311
74325: OR
74326: AND
74327: IFFALSE 74368
// begin ComCollect ( j , x , y ) ;
74329: LD_VAR 0 2
74333: PPUSH
74334: LD_VAR 0 6
74338: PPUSH
74339: LD_VAR 0 7
74343: PPUSH
74344: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
74348: LD_VAR 0 2
74352: PPUSH
74353: LD_VAR 0 8
74357: PPUSH
74358: CALL_OW 172
// exit ;
74362: POP
74363: POP
74364: POP
74365: POP
74366: GO 74376
// end ;
74368: GO 74258
74370: POP
74371: POP
// end ; end ;
74372: GO 73747
74374: POP
74375: POP
// end ; end_of_file
74376: PPOPN 9
74378: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74379: LD_VAR 0 1
74383: PUSH
74384: LD_INT 200
74386: DOUBLE
74387: GREATEREQUAL
74388: IFFALSE 74396
74390: LD_INT 299
74392: DOUBLE
74393: LESSEQUAL
74394: IFTRUE 74398
74396: GO 74430
74398: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74399: LD_VAR 0 1
74403: PPUSH
74404: LD_VAR 0 2
74408: PPUSH
74409: LD_VAR 0 3
74413: PPUSH
74414: LD_VAR 0 4
74418: PPUSH
74419: LD_VAR 0 5
74423: PPUSH
74424: CALL 75127 0 5
74428: GO 74507
74430: LD_INT 300
74432: DOUBLE
74433: GREATEREQUAL
74434: IFFALSE 74442
74436: LD_INT 399
74438: DOUBLE
74439: LESSEQUAL
74440: IFTRUE 74444
74442: GO 74506
74444: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74445: LD_VAR 0 1
74449: PPUSH
74450: LD_VAR 0 2
74454: PPUSH
74455: LD_VAR 0 3
74459: PPUSH
74460: LD_VAR 0 4
74464: PPUSH
74465: LD_VAR 0 5
74469: PPUSH
74470: LD_VAR 0 6
74474: PPUSH
74475: LD_VAR 0 7
74479: PPUSH
74480: LD_VAR 0 8
74484: PPUSH
74485: LD_VAR 0 9
74489: PPUSH
74490: LD_VAR 0 10
74494: PPUSH
74495: LD_VAR 0 11
74499: PPUSH
74500: CALL 70952 0 11
74504: GO 74507
74506: POP
// end ;
74507: PPOPN 11
74509: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74510: LD_VAR 0 1
74514: PPUSH
74515: LD_VAR 0 2
74519: PPUSH
74520: LD_VAR 0 3
74524: PPUSH
74525: LD_VAR 0 4
74529: PPUSH
74530: LD_VAR 0 5
74534: PPUSH
74535: CALL 74592 0 5
// end ; end_of_file
74539: PPOPN 5
74541: END
// export function SOS_UnitDestroyed ( un ) ; begin
74542: LD_INT 0
74544: PPUSH
// ComRadiation ( un ) ;
74545: LD_VAR 0 1
74549: PPUSH
74550: CALL 75531 0 1
// end ;
74554: LD_VAR 0 2
74558: RET
// export function SOS_UnitKamikazed ( un ) ; begin
74559: LD_INT 0
74561: PPUSH
// ComRadiation ( un ) ;
74562: LD_VAR 0 1
74566: PPUSH
74567: CALL 75531 0 1
// end ;
74571: LD_VAR 0 2
74575: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
74576: LD_INT 0
74578: PPUSH
// end ;
74579: LD_VAR 0 4
74583: RET
// export function SOS_Command ( cmd ) ; begin
74584: LD_INT 0
74586: PPUSH
// end ;
74587: LD_VAR 0 2
74591: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
74592: LD_INT 0
74594: PPUSH
// end ;
74595: LD_VAR 0 6
74599: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
74600: LD_INT 0
74602: PPUSH
74603: PPUSH
74604: PPUSH
74605: PPUSH
74606: PPUSH
// if not vehicle or not factory then
74607: LD_VAR 0 1
74611: NOT
74612: PUSH
74613: LD_VAR 0 2
74617: NOT
74618: OR
74619: IFFALSE 74623
// exit ;
74621: GO 75122
// if not factoryWaypoints then
74623: LD_EXP 96
74627: NOT
74628: IFFALSE 74632
// exit ;
74630: GO 75122
// for i := 1 to Count ( factoryWaypoints ) do
74632: LD_ADDR_VAR 0 4
74636: PUSH
74637: DOUBLE
74638: LD_INT 1
74640: DEC
74641: ST_TO_ADDR
74642: LD_EXP 96
74646: PPUSH
74647: CALL 17674 0 1
74651: PUSH
74652: FOR_TO
74653: IFFALSE 75120
// if factoryWaypoints [ i ] [ 2 ] = factory then
74655: LD_EXP 96
74659: PUSH
74660: LD_VAR 0 4
74664: ARRAY
74665: PUSH
74666: LD_INT 2
74668: ARRAY
74669: PUSH
74670: LD_VAR 0 2
74674: EQUAL
74675: IFFALSE 75118
// begin if GetControl ( vehicle ) = control_manual then
74677: LD_VAR 0 1
74681: PPUSH
74682: CALL_OW 263
74686: PUSH
74687: LD_INT 1
74689: EQUAL
74690: IFFALSE 75001
// begin driver := IsDrivenBy ( vehicle ) ;
74692: LD_ADDR_VAR 0 6
74696: PUSH
74697: LD_VAR 0 1
74701: PPUSH
74702: CALL_OW 311
74706: ST_TO_ADDR
// tag := GetTag ( driver ) ;
74707: LD_ADDR_VAR 0 5
74711: PUSH
74712: LD_VAR 0 6
74716: PPUSH
74717: CALL_OW 110
74721: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
74722: LD_VAR 0 5
74726: PUSH
74727: LD_INT 501
74729: EQUAL
74730: PUSH
74731: LD_VAR 0 1
74735: PPUSH
74736: CALL_OW 110
74740: PUSH
74741: LD_INT 501
74743: EQUAL
74744: OR
74745: IFFALSE 74751
// exit ;
74747: POP
74748: POP
74749: GO 75122
// if not HasTask ( driver ) then
74751: LD_VAR 0 6
74755: PPUSH
74756: CALL_OW 314
74760: NOT
74761: IFFALSE 74999
// begin SetTag ( driver , tDriver ) ;
74763: LD_VAR 0 6
74767: PPUSH
74768: LD_INT 501
74770: PPUSH
74771: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
74775: LD_VAR 0 1
74779: PPUSH
74780: LD_INT 501
74782: PPUSH
74783: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
74787: LD_ADDR_VAR 0 7
74791: PUSH
74792: LD_EXP 96
74796: PUSH
74797: LD_VAR 0 4
74801: ARRAY
74802: PUSH
74803: LD_INT 3
74805: ARRAY
74806: PPUSH
74807: LD_EXP 96
74811: PUSH
74812: LD_VAR 0 4
74816: ARRAY
74817: PUSH
74818: LD_INT 4
74820: ARRAY
74821: PPUSH
74822: CALL_OW 428
74826: ST_TO_ADDR
// if hex then
74827: LD_VAR 0 7
74831: IFFALSE 74849
// ComMoveUnit ( driver , hex ) else
74833: LD_VAR 0 6
74837: PPUSH
74838: LD_VAR 0 7
74842: PPUSH
74843: CALL_OW 112
74847: GO 74888
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
74849: LD_VAR 0 6
74853: PPUSH
74854: LD_EXP 96
74858: PUSH
74859: LD_VAR 0 4
74863: ARRAY
74864: PUSH
74865: LD_INT 3
74867: ARRAY
74868: PPUSH
74869: LD_EXP 96
74873: PUSH
74874: LD_VAR 0 4
74878: ARRAY
74879: PUSH
74880: LD_INT 4
74882: ARRAY
74883: PPUSH
74884: CALL_OW 111
// AddComExitVehicle ( driver ) ;
74888: LD_VAR 0 6
74892: PPUSH
74893: CALL_OW 181
// if Multiplayer then
74897: LD_OWVAR 4
74901: IFFALSE 74950
// begin repeat wait ( 10 ) ;
74903: LD_INT 10
74905: PPUSH
74906: CALL_OW 67
// until not IsInUnit ( driver ) ;
74910: LD_VAR 0 6
74914: PPUSH
74915: CALL_OW 310
74919: NOT
74920: IFFALSE 74903
// if not HasTask ( driver ) then
74922: LD_VAR 0 6
74926: PPUSH
74927: CALL_OW 314
74931: NOT
74932: IFFALSE 74948
// ComEnterUnit ( driver , factory ) ;
74934: LD_VAR 0 6
74938: PPUSH
74939: LD_VAR 0 2
74943: PPUSH
74944: CALL_OW 120
// end else
74948: GO 74964
// AddComEnterUnit ( driver , factory ) ;
74950: LD_VAR 0 6
74954: PPUSH
74955: LD_VAR 0 2
74959: PPUSH
74960: CALL_OW 180
// wait ( 0 0$1 ) ;
74964: LD_INT 35
74966: PPUSH
74967: CALL_OW 67
// SetTag ( driver , tag ) ;
74971: LD_VAR 0 6
74975: PPUSH
74976: LD_VAR 0 5
74980: PPUSH
74981: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
74985: LD_VAR 0 1
74989: PPUSH
74990: LD_INT 0
74992: PPUSH
74993: CALL_OW 109
// break ;
74997: GO 75120
// end ; end else
74999: GO 75118
// if GetControl ( vehicle ) = control_remote then
75001: LD_VAR 0 1
75005: PPUSH
75006: CALL_OW 263
75010: PUSH
75011: LD_INT 2
75013: EQUAL
75014: IFFALSE 75077
// begin wait ( 0 0$2 ) ;
75016: LD_INT 70
75018: PPUSH
75019: CALL_OW 67
// if Connect ( vehicle ) then
75023: LD_VAR 0 1
75027: PPUSH
75028: CALL 23880 0 1
75032: IFFALSE 75073
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75034: LD_VAR 0 1
75038: PPUSH
75039: LD_EXP 96
75043: PUSH
75044: LD_VAR 0 4
75048: ARRAY
75049: PUSH
75050: LD_INT 3
75052: ARRAY
75053: PPUSH
75054: LD_EXP 96
75058: PUSH
75059: LD_VAR 0 4
75063: ARRAY
75064: PUSH
75065: LD_INT 4
75067: ARRAY
75068: PPUSH
75069: CALL_OW 171
// break ;
75073: GO 75120
// end else
75075: GO 75118
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75077: LD_VAR 0 1
75081: PPUSH
75082: LD_EXP 96
75086: PUSH
75087: LD_VAR 0 4
75091: ARRAY
75092: PUSH
75093: LD_INT 3
75095: ARRAY
75096: PPUSH
75097: LD_EXP 96
75101: PUSH
75102: LD_VAR 0 4
75106: ARRAY
75107: PUSH
75108: LD_INT 4
75110: ARRAY
75111: PPUSH
75112: CALL_OW 171
// break ;
75116: GO 75120
// end ; end ;
75118: GO 74652
75120: POP
75121: POP
// end ;
75122: LD_VAR 0 3
75126: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
75127: LD_INT 0
75129: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
75130: LD_VAR 0 1
75134: PUSH
75135: LD_INT 250
75137: EQUAL
75138: PUSH
75139: LD_VAR 0 2
75143: PPUSH
75144: CALL_OW 264
75148: PUSH
75149: LD_INT 81
75151: EQUAL
75152: AND
75153: IFFALSE 75174
// MinerPlaceMine ( unit , x , y ) ;
75155: LD_VAR 0 2
75159: PPUSH
75160: LD_VAR 0 4
75164: PPUSH
75165: LD_VAR 0 5
75169: PPUSH
75170: CALL 78266 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
75174: LD_VAR 0 1
75178: PUSH
75179: LD_INT 251
75181: EQUAL
75182: PUSH
75183: LD_VAR 0 2
75187: PPUSH
75188: CALL_OW 264
75192: PUSH
75193: LD_INT 81
75195: EQUAL
75196: AND
75197: IFFALSE 75218
// MinerDetonateMine ( unit , x , y ) ;
75199: LD_VAR 0 2
75203: PPUSH
75204: LD_VAR 0 4
75208: PPUSH
75209: LD_VAR 0 5
75213: PPUSH
75214: CALL 78541 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
75218: LD_VAR 0 1
75222: PUSH
75223: LD_INT 252
75225: EQUAL
75226: PUSH
75227: LD_VAR 0 2
75231: PPUSH
75232: CALL_OW 264
75236: PUSH
75237: LD_INT 81
75239: EQUAL
75240: AND
75241: IFFALSE 75262
// MinerCreateMinefield ( unit , x , y ) ;
75243: LD_VAR 0 2
75247: PPUSH
75248: LD_VAR 0 4
75252: PPUSH
75253: LD_VAR 0 5
75257: PPUSH
75258: CALL 78958 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
75262: LD_VAR 0 1
75266: PUSH
75267: LD_INT 253
75269: EQUAL
75270: PUSH
75271: LD_VAR 0 2
75275: PPUSH
75276: CALL_OW 257
75280: PUSH
75281: LD_INT 5
75283: EQUAL
75284: AND
75285: IFFALSE 75306
// ComBinocular ( unit , x , y ) ;
75287: LD_VAR 0 2
75291: PPUSH
75292: LD_VAR 0 4
75296: PPUSH
75297: LD_VAR 0 5
75301: PPUSH
75302: CALL 79327 0 3
// if selectedUnit then
75306: LD_VAR 0 3
75310: IFFALSE 75366
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
75312: LD_VAR 0 1
75316: PUSH
75317: LD_INT 254
75319: EQUAL
75320: PUSH
75321: LD_VAR 0 2
75325: PPUSH
75326: CALL_OW 264
75330: PUSH
75331: LD_INT 99
75333: EQUAL
75334: AND
75335: PUSH
75336: LD_VAR 0 3
75340: PPUSH
75341: CALL_OW 263
75345: PUSH
75346: LD_INT 3
75348: EQUAL
75349: AND
75350: IFFALSE 75366
// HackDestroyVehicle ( unit , selectedUnit ) ;
75352: LD_VAR 0 2
75356: PPUSH
75357: LD_VAR 0 3
75361: PPUSH
75362: CALL 77630 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
75366: LD_VAR 0 1
75370: PUSH
75371: LD_INT 255
75373: EQUAL
75374: PUSH
75375: LD_VAR 0 2
75379: PPUSH
75380: CALL_OW 264
75384: PUSH
75385: LD_INT 14
75387: PUSH
75388: LD_INT 53
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: IN
75395: AND
75396: PUSH
75397: LD_VAR 0 4
75401: PPUSH
75402: LD_VAR 0 5
75406: PPUSH
75407: CALL_OW 488
75411: AND
75412: IFFALSE 75436
// CutTreeXYR ( unit , x , y , 12 ) ;
75414: LD_VAR 0 2
75418: PPUSH
75419: LD_VAR 0 4
75423: PPUSH
75424: LD_VAR 0 5
75428: PPUSH
75429: LD_INT 12
75431: PPUSH
75432: CALL 75627 0 4
// if cmd = 256 then
75436: LD_VAR 0 1
75440: PUSH
75441: LD_INT 256
75443: EQUAL
75444: IFFALSE 75465
// SetFactoryWaypoint ( unit , x , y ) ;
75446: LD_VAR 0 2
75450: PPUSH
75451: LD_VAR 0 4
75455: PPUSH
75456: LD_VAR 0 5
75460: PPUSH
75461: CALL 72940 0 3
// if cmd = 257 then
75465: LD_VAR 0 1
75469: PUSH
75470: LD_INT 257
75472: EQUAL
75473: IFFALSE 75494
// SetWarehouseGatheringPoint ( unit , x , y ) ;
75475: LD_VAR 0 2
75479: PPUSH
75480: LD_VAR 0 4
75484: PPUSH
75485: LD_VAR 0 5
75489: PPUSH
75490: CALL 73430 0 3
// if cmd = 258 then
75494: LD_VAR 0 1
75498: PUSH
75499: LD_INT 258
75501: EQUAL
75502: IFFALSE 75526
// BurnTreeXYR ( unit , x , y , 8 ) ;
75504: LD_VAR 0 2
75508: PPUSH
75509: LD_VAR 0 4
75513: PPUSH
75514: LD_VAR 0 5
75518: PPUSH
75519: LD_INT 8
75521: PPUSH
75522: CALL 76021 0 4
// end ;
75526: LD_VAR 0 6
75530: RET
// export function ComRadiation ( un ) ; var eff ; begin
75531: LD_INT 0
75533: PPUSH
75534: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
75535: LD_VAR 0 1
75539: PPUSH
75540: CALL_OW 264
75544: PUSH
75545: LD_INT 91
75547: NONEQUAL
75548: IFFALSE 75552
// exit ;
75550: GO 75622
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
75552: LD_INT 68
75554: PPUSH
75555: LD_VAR 0 1
75559: PPUSH
75560: CALL_OW 255
75564: PPUSH
75565: CALL_OW 321
75569: PUSH
75570: LD_INT 2
75572: EQUAL
75573: IFFALSE 75585
// eff := 70 else
75575: LD_ADDR_VAR 0 3
75579: PUSH
75580: LD_INT 70
75582: ST_TO_ADDR
75583: GO 75593
// eff := 30 ;
75585: LD_ADDR_VAR 0 3
75589: PUSH
75590: LD_INT 30
75592: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
75593: LD_VAR 0 1
75597: PPUSH
75598: CALL_OW 250
75602: PPUSH
75603: LD_VAR 0 1
75607: PPUSH
75608: CALL_OW 251
75612: PPUSH
75613: LD_VAR 0 3
75617: PPUSH
75618: CALL_OW 495
// end ;
75622: LD_VAR 0 2
75626: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
75627: LD_INT 0
75629: PPUSH
75630: PPUSH
75631: PPUSH
75632: PPUSH
75633: PPUSH
75634: PPUSH
75635: PPUSH
75636: PPUSH
75637: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
75638: LD_VAR 0 1
75642: PPUSH
75643: CALL_OW 302
75647: NOT
75648: PUSH
75649: LD_VAR 0 2
75653: PPUSH
75654: LD_VAR 0 3
75658: PPUSH
75659: CALL_OW 488
75663: NOT
75664: OR
75665: PUSH
75666: LD_VAR 0 4
75670: NOT
75671: OR
75672: IFFALSE 75676
// exit ;
75674: GO 76016
// list := [ ] ;
75676: LD_ADDR_VAR 0 13
75680: PUSH
75681: EMPTY
75682: ST_TO_ADDR
// if x - r < 0 then
75683: LD_VAR 0 2
75687: PUSH
75688: LD_VAR 0 4
75692: MINUS
75693: PUSH
75694: LD_INT 0
75696: LESS
75697: IFFALSE 75709
// min_x := 0 else
75699: LD_ADDR_VAR 0 7
75703: PUSH
75704: LD_INT 0
75706: ST_TO_ADDR
75707: GO 75725
// min_x := x - r ;
75709: LD_ADDR_VAR 0 7
75713: PUSH
75714: LD_VAR 0 2
75718: PUSH
75719: LD_VAR 0 4
75723: MINUS
75724: ST_TO_ADDR
// if y - r < 0 then
75725: LD_VAR 0 3
75729: PUSH
75730: LD_VAR 0 4
75734: MINUS
75735: PUSH
75736: LD_INT 0
75738: LESS
75739: IFFALSE 75751
// min_y := 0 else
75741: LD_ADDR_VAR 0 8
75745: PUSH
75746: LD_INT 0
75748: ST_TO_ADDR
75749: GO 75767
// min_y := y - r ;
75751: LD_ADDR_VAR 0 8
75755: PUSH
75756: LD_VAR 0 3
75760: PUSH
75761: LD_VAR 0 4
75765: MINUS
75766: ST_TO_ADDR
// max_x := x + r ;
75767: LD_ADDR_VAR 0 9
75771: PUSH
75772: LD_VAR 0 2
75776: PUSH
75777: LD_VAR 0 4
75781: PLUS
75782: ST_TO_ADDR
// max_y := y + r ;
75783: LD_ADDR_VAR 0 10
75787: PUSH
75788: LD_VAR 0 3
75792: PUSH
75793: LD_VAR 0 4
75797: PLUS
75798: ST_TO_ADDR
// for _x = min_x to max_x do
75799: LD_ADDR_VAR 0 11
75803: PUSH
75804: DOUBLE
75805: LD_VAR 0 7
75809: DEC
75810: ST_TO_ADDR
75811: LD_VAR 0 9
75815: PUSH
75816: FOR_TO
75817: IFFALSE 75934
// for _y = min_y to max_y do
75819: LD_ADDR_VAR 0 12
75823: PUSH
75824: DOUBLE
75825: LD_VAR 0 8
75829: DEC
75830: ST_TO_ADDR
75831: LD_VAR 0 10
75835: PUSH
75836: FOR_TO
75837: IFFALSE 75930
// begin if not ValidHex ( _x , _y ) then
75839: LD_VAR 0 11
75843: PPUSH
75844: LD_VAR 0 12
75848: PPUSH
75849: CALL_OW 488
75853: NOT
75854: IFFALSE 75858
// continue ;
75856: GO 75836
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75858: LD_VAR 0 11
75862: PPUSH
75863: LD_VAR 0 12
75867: PPUSH
75868: CALL_OW 351
75872: PUSH
75873: LD_VAR 0 11
75877: PPUSH
75878: LD_VAR 0 12
75882: PPUSH
75883: CALL_OW 554
75887: AND
75888: IFFALSE 75928
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75890: LD_ADDR_VAR 0 13
75894: PUSH
75895: LD_VAR 0 13
75899: PPUSH
75900: LD_VAR 0 13
75904: PUSH
75905: LD_INT 1
75907: PLUS
75908: PPUSH
75909: LD_VAR 0 11
75913: PUSH
75914: LD_VAR 0 12
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: PPUSH
75923: CALL_OW 2
75927: ST_TO_ADDR
// end ;
75928: GO 75836
75930: POP
75931: POP
75932: GO 75816
75934: POP
75935: POP
// if not list then
75936: LD_VAR 0 13
75940: NOT
75941: IFFALSE 75945
// exit ;
75943: GO 76016
// for i in list do
75945: LD_ADDR_VAR 0 6
75949: PUSH
75950: LD_VAR 0 13
75954: PUSH
75955: FOR_IN
75956: IFFALSE 76014
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
75958: LD_VAR 0 1
75962: PPUSH
75963: LD_STRING M
75965: PUSH
75966: LD_VAR 0 6
75970: PUSH
75971: LD_INT 1
75973: ARRAY
75974: PUSH
75975: LD_VAR 0 6
75979: PUSH
75980: LD_INT 2
75982: ARRAY
75983: PUSH
75984: LD_INT 0
75986: PUSH
75987: LD_INT 0
75989: PUSH
75990: LD_INT 0
75992: PUSH
75993: LD_INT 0
75995: PUSH
75996: EMPTY
75997: LIST
75998: LIST
75999: LIST
76000: LIST
76001: LIST
76002: LIST
76003: LIST
76004: PUSH
76005: EMPTY
76006: LIST
76007: PPUSH
76008: CALL_OW 447
76012: GO 75955
76014: POP
76015: POP
// end ;
76016: LD_VAR 0 5
76020: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
76021: LD_INT 0
76023: PPUSH
76024: PPUSH
76025: PPUSH
76026: PPUSH
76027: PPUSH
76028: PPUSH
76029: PPUSH
76030: PPUSH
76031: PPUSH
76032: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
76033: LD_VAR 0 1
76037: PPUSH
76038: CALL_OW 302
76042: NOT
76043: PUSH
76044: LD_VAR 0 2
76048: PPUSH
76049: LD_VAR 0 3
76053: PPUSH
76054: CALL_OW 488
76058: NOT
76059: OR
76060: PUSH
76061: LD_VAR 0 4
76065: NOT
76066: OR
76067: IFFALSE 76071
// exit ;
76069: GO 76584
// list := [ ] ;
76071: LD_ADDR_VAR 0 13
76075: PUSH
76076: EMPTY
76077: ST_TO_ADDR
// if x - r < 0 then
76078: LD_VAR 0 2
76082: PUSH
76083: LD_VAR 0 4
76087: MINUS
76088: PUSH
76089: LD_INT 0
76091: LESS
76092: IFFALSE 76104
// min_x := 0 else
76094: LD_ADDR_VAR 0 7
76098: PUSH
76099: LD_INT 0
76101: ST_TO_ADDR
76102: GO 76120
// min_x := x - r ;
76104: LD_ADDR_VAR 0 7
76108: PUSH
76109: LD_VAR 0 2
76113: PUSH
76114: LD_VAR 0 4
76118: MINUS
76119: ST_TO_ADDR
// if y - r < 0 then
76120: LD_VAR 0 3
76124: PUSH
76125: LD_VAR 0 4
76129: MINUS
76130: PUSH
76131: LD_INT 0
76133: LESS
76134: IFFALSE 76146
// min_y := 0 else
76136: LD_ADDR_VAR 0 8
76140: PUSH
76141: LD_INT 0
76143: ST_TO_ADDR
76144: GO 76162
// min_y := y - r ;
76146: LD_ADDR_VAR 0 8
76150: PUSH
76151: LD_VAR 0 3
76155: PUSH
76156: LD_VAR 0 4
76160: MINUS
76161: ST_TO_ADDR
// max_x := x + r ;
76162: LD_ADDR_VAR 0 9
76166: PUSH
76167: LD_VAR 0 2
76171: PUSH
76172: LD_VAR 0 4
76176: PLUS
76177: ST_TO_ADDR
// max_y := y + r ;
76178: LD_ADDR_VAR 0 10
76182: PUSH
76183: LD_VAR 0 3
76187: PUSH
76188: LD_VAR 0 4
76192: PLUS
76193: ST_TO_ADDR
// for _x = min_x to max_x do
76194: LD_ADDR_VAR 0 11
76198: PUSH
76199: DOUBLE
76200: LD_VAR 0 7
76204: DEC
76205: ST_TO_ADDR
76206: LD_VAR 0 9
76210: PUSH
76211: FOR_TO
76212: IFFALSE 76329
// for _y = min_y to max_y do
76214: LD_ADDR_VAR 0 12
76218: PUSH
76219: DOUBLE
76220: LD_VAR 0 8
76224: DEC
76225: ST_TO_ADDR
76226: LD_VAR 0 10
76230: PUSH
76231: FOR_TO
76232: IFFALSE 76325
// begin if not ValidHex ( _x , _y ) then
76234: LD_VAR 0 11
76238: PPUSH
76239: LD_VAR 0 12
76243: PPUSH
76244: CALL_OW 488
76248: NOT
76249: IFFALSE 76253
// continue ;
76251: GO 76231
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
76253: LD_VAR 0 11
76257: PPUSH
76258: LD_VAR 0 12
76262: PPUSH
76263: CALL_OW 351
76267: PUSH
76268: LD_VAR 0 11
76272: PPUSH
76273: LD_VAR 0 12
76277: PPUSH
76278: CALL_OW 554
76282: AND
76283: IFFALSE 76323
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
76285: LD_ADDR_VAR 0 13
76289: PUSH
76290: LD_VAR 0 13
76294: PPUSH
76295: LD_VAR 0 13
76299: PUSH
76300: LD_INT 1
76302: PLUS
76303: PPUSH
76304: LD_VAR 0 11
76308: PUSH
76309: LD_VAR 0 12
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: PPUSH
76318: CALL_OW 2
76322: ST_TO_ADDR
// end ;
76323: GO 76231
76325: POP
76326: POP
76327: GO 76211
76329: POP
76330: POP
// if not list then
76331: LD_VAR 0 13
76335: NOT
76336: IFFALSE 76340
// exit ;
76338: GO 76584
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
76340: LD_ADDR_VAR 0 13
76344: PUSH
76345: LD_VAR 0 1
76349: PPUSH
76350: LD_VAR 0 13
76354: PPUSH
76355: LD_INT 1
76357: PPUSH
76358: LD_INT 1
76360: PPUSH
76361: CALL 21022 0 4
76365: ST_TO_ADDR
// ComStop ( flame ) ;
76366: LD_VAR 0 1
76370: PPUSH
76371: CALL_OW 141
// for i in list do
76375: LD_ADDR_VAR 0 6
76379: PUSH
76380: LD_VAR 0 13
76384: PUSH
76385: FOR_IN
76386: IFFALSE 76417
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
76388: LD_VAR 0 1
76392: PPUSH
76393: LD_VAR 0 6
76397: PUSH
76398: LD_INT 1
76400: ARRAY
76401: PPUSH
76402: LD_VAR 0 6
76406: PUSH
76407: LD_INT 2
76409: ARRAY
76410: PPUSH
76411: CALL_OW 176
76415: GO 76385
76417: POP
76418: POP
// repeat wait ( 0 0$1 ) ;
76419: LD_INT 35
76421: PPUSH
76422: CALL_OW 67
// task := GetTaskList ( flame ) ;
76426: LD_ADDR_VAR 0 14
76430: PUSH
76431: LD_VAR 0 1
76435: PPUSH
76436: CALL_OW 437
76440: ST_TO_ADDR
// if not task then
76441: LD_VAR 0 14
76445: NOT
76446: IFFALSE 76450
// exit ;
76448: GO 76584
// if task [ 1 ] [ 1 ] <> | then
76450: LD_VAR 0 14
76454: PUSH
76455: LD_INT 1
76457: ARRAY
76458: PUSH
76459: LD_INT 1
76461: ARRAY
76462: PUSH
76463: LD_STRING |
76465: NONEQUAL
76466: IFFALSE 76470
// exit ;
76468: GO 76584
// _x := task [ 1 ] [ 2 ] ;
76470: LD_ADDR_VAR 0 11
76474: PUSH
76475: LD_VAR 0 14
76479: PUSH
76480: LD_INT 1
76482: ARRAY
76483: PUSH
76484: LD_INT 2
76486: ARRAY
76487: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
76488: LD_ADDR_VAR 0 12
76492: PUSH
76493: LD_VAR 0 14
76497: PUSH
76498: LD_INT 1
76500: ARRAY
76501: PUSH
76502: LD_INT 3
76504: ARRAY
76505: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
76506: LD_VAR 0 11
76510: PPUSH
76511: LD_VAR 0 12
76515: PPUSH
76516: CALL_OW 351
76520: NOT
76521: PUSH
76522: LD_VAR 0 11
76526: PPUSH
76527: LD_VAR 0 12
76531: PPUSH
76532: CALL_OW 554
76536: NOT
76537: OR
76538: IFFALSE 76572
// begin task := Delete ( task , 1 ) ;
76540: LD_ADDR_VAR 0 14
76544: PUSH
76545: LD_VAR 0 14
76549: PPUSH
76550: LD_INT 1
76552: PPUSH
76553: CALL_OW 3
76557: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
76558: LD_VAR 0 1
76562: PPUSH
76563: LD_VAR 0 14
76567: PPUSH
76568: CALL_OW 446
// end ; until not HasTask ( flame ) ;
76572: LD_VAR 0 1
76576: PPUSH
76577: CALL_OW 314
76581: NOT
76582: IFFALSE 76419
// end ;
76584: LD_VAR 0 5
76588: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
76589: LD_EXP 99
76593: NOT
76594: IFFALSE 76644
76596: GO 76598
76598: DISABLE
// begin initHack := true ;
76599: LD_ADDR_EXP 99
76603: PUSH
76604: LD_INT 1
76606: ST_TO_ADDR
// hackTanks := [ ] ;
76607: LD_ADDR_EXP 100
76611: PUSH
76612: EMPTY
76613: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
76614: LD_ADDR_EXP 101
76618: PUSH
76619: EMPTY
76620: ST_TO_ADDR
// hackLimit := 3 ;
76621: LD_ADDR_EXP 102
76625: PUSH
76626: LD_INT 3
76628: ST_TO_ADDR
// hackDist := 12 ;
76629: LD_ADDR_EXP 103
76633: PUSH
76634: LD_INT 12
76636: ST_TO_ADDR
// hackCounter := [ ] ;
76637: LD_ADDR_EXP 104
76641: PUSH
76642: EMPTY
76643: ST_TO_ADDR
// end ;
76644: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
76645: LD_EXP 99
76649: PUSH
76650: LD_INT 34
76652: PUSH
76653: LD_INT 99
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: PPUSH
76660: CALL_OW 69
76664: AND
76665: IFFALSE 76918
76667: GO 76669
76669: DISABLE
76670: LD_INT 0
76672: PPUSH
76673: PPUSH
// begin enable ;
76674: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
76675: LD_ADDR_VAR 0 1
76679: PUSH
76680: LD_INT 34
76682: PUSH
76683: LD_INT 99
76685: PUSH
76686: EMPTY
76687: LIST
76688: LIST
76689: PPUSH
76690: CALL_OW 69
76694: PUSH
76695: FOR_IN
76696: IFFALSE 76916
// begin if not i in hackTanks then
76698: LD_VAR 0 1
76702: PUSH
76703: LD_EXP 100
76707: IN
76708: NOT
76709: IFFALSE 76792
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
76711: LD_ADDR_EXP 100
76715: PUSH
76716: LD_EXP 100
76720: PPUSH
76721: LD_EXP 100
76725: PUSH
76726: LD_INT 1
76728: PLUS
76729: PPUSH
76730: LD_VAR 0 1
76734: PPUSH
76735: CALL_OW 1
76739: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
76740: LD_ADDR_EXP 101
76744: PUSH
76745: LD_EXP 101
76749: PPUSH
76750: LD_EXP 101
76754: PUSH
76755: LD_INT 1
76757: PLUS
76758: PPUSH
76759: EMPTY
76760: PPUSH
76761: CALL_OW 1
76765: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
76766: LD_ADDR_EXP 104
76770: PUSH
76771: LD_EXP 104
76775: PPUSH
76776: LD_EXP 104
76780: PUSH
76781: LD_INT 1
76783: PLUS
76784: PPUSH
76785: EMPTY
76786: PPUSH
76787: CALL_OW 1
76791: ST_TO_ADDR
// end ; if not IsOk ( i ) then
76792: LD_VAR 0 1
76796: PPUSH
76797: CALL_OW 302
76801: NOT
76802: IFFALSE 76815
// begin HackUnlinkAll ( i ) ;
76804: LD_VAR 0 1
76808: PPUSH
76809: CALL 76921 0 1
// continue ;
76813: GO 76695
// end ; HackCheckCapturedStatus ( i ) ;
76815: LD_VAR 0 1
76819: PPUSH
76820: CALL 77364 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
76824: LD_ADDR_VAR 0 2
76828: PUSH
76829: LD_INT 81
76831: PUSH
76832: LD_VAR 0 1
76836: PPUSH
76837: CALL_OW 255
76841: PUSH
76842: EMPTY
76843: LIST
76844: LIST
76845: PUSH
76846: LD_INT 33
76848: PUSH
76849: LD_INT 3
76851: PUSH
76852: EMPTY
76853: LIST
76854: LIST
76855: PUSH
76856: LD_INT 91
76858: PUSH
76859: LD_VAR 0 1
76863: PUSH
76864: LD_EXP 103
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: LIST
76873: PUSH
76874: LD_INT 50
76876: PUSH
76877: EMPTY
76878: LIST
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: LIST
76884: LIST
76885: PPUSH
76886: CALL_OW 69
76890: ST_TO_ADDR
// if not tmp then
76891: LD_VAR 0 2
76895: NOT
76896: IFFALSE 76900
// continue ;
76898: GO 76695
// HackLink ( i , tmp ) ;
76900: LD_VAR 0 1
76904: PPUSH
76905: LD_VAR 0 2
76909: PPUSH
76910: CALL 77057 0 2
// end ;
76914: GO 76695
76916: POP
76917: POP
// end ;
76918: PPOPN 2
76920: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
76921: LD_INT 0
76923: PPUSH
76924: PPUSH
76925: PPUSH
// if not hack in hackTanks then
76926: LD_VAR 0 1
76930: PUSH
76931: LD_EXP 100
76935: IN
76936: NOT
76937: IFFALSE 76941
// exit ;
76939: GO 77052
// index := GetElementIndex ( hackTanks , hack ) ;
76941: LD_ADDR_VAR 0 4
76945: PUSH
76946: LD_EXP 100
76950: PPUSH
76951: LD_VAR 0 1
76955: PPUSH
76956: CALL 20319 0 2
76960: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
76961: LD_EXP 101
76965: PUSH
76966: LD_VAR 0 4
76970: ARRAY
76971: IFFALSE 77052
// begin for i in hackTanksCaptured [ index ] do
76973: LD_ADDR_VAR 0 3
76977: PUSH
76978: LD_EXP 101
76982: PUSH
76983: LD_VAR 0 4
76987: ARRAY
76988: PUSH
76989: FOR_IN
76990: IFFALSE 77016
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
76992: LD_VAR 0 3
76996: PUSH
76997: LD_INT 1
76999: ARRAY
77000: PPUSH
77001: LD_VAR 0 3
77005: PUSH
77006: LD_INT 2
77008: ARRAY
77009: PPUSH
77010: CALL_OW 235
77014: GO 76989
77016: POP
77017: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
77018: LD_ADDR_EXP 101
77022: PUSH
77023: LD_EXP 101
77027: PPUSH
77028: LD_VAR 0 4
77032: PPUSH
77033: EMPTY
77034: PPUSH
77035: CALL_OW 1
77039: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
77040: LD_VAR 0 1
77044: PPUSH
77045: LD_INT 0
77047: PPUSH
77048: CALL_OW 505
// end ; end ;
77052: LD_VAR 0 2
77056: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
77057: LD_INT 0
77059: PPUSH
77060: PPUSH
77061: PPUSH
// if not hack in hackTanks or not vehicles then
77062: LD_VAR 0 1
77066: PUSH
77067: LD_EXP 100
77071: IN
77072: NOT
77073: PUSH
77074: LD_VAR 0 2
77078: NOT
77079: OR
77080: IFFALSE 77084
// exit ;
77082: GO 77359
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
77084: LD_ADDR_VAR 0 2
77088: PUSH
77089: LD_VAR 0 1
77093: PPUSH
77094: LD_VAR 0 2
77098: PPUSH
77099: LD_INT 1
77101: PPUSH
77102: LD_INT 1
77104: PPUSH
77105: CALL 20969 0 4
77109: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
77110: LD_ADDR_VAR 0 5
77114: PUSH
77115: LD_EXP 100
77119: PPUSH
77120: LD_VAR 0 1
77124: PPUSH
77125: CALL 20319 0 2
77129: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
77130: LD_EXP 101
77134: PUSH
77135: LD_VAR 0 5
77139: ARRAY
77140: PUSH
77141: LD_EXP 102
77145: LESS
77146: IFFALSE 77335
// begin for i := 1 to vehicles do
77148: LD_ADDR_VAR 0 4
77152: PUSH
77153: DOUBLE
77154: LD_INT 1
77156: DEC
77157: ST_TO_ADDR
77158: LD_VAR 0 2
77162: PUSH
77163: FOR_TO
77164: IFFALSE 77333
// begin if hackTanksCaptured [ index ] = hackLimit then
77166: LD_EXP 101
77170: PUSH
77171: LD_VAR 0 5
77175: ARRAY
77176: PUSH
77177: LD_EXP 102
77181: EQUAL
77182: IFFALSE 77186
// break ;
77184: GO 77333
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
77186: LD_ADDR_EXP 104
77190: PUSH
77191: LD_EXP 104
77195: PPUSH
77196: LD_VAR 0 5
77200: PPUSH
77201: LD_EXP 104
77205: PUSH
77206: LD_VAR 0 5
77210: ARRAY
77211: PUSH
77212: LD_INT 1
77214: PLUS
77215: PPUSH
77216: CALL_OW 1
77220: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
77221: LD_ADDR_EXP 101
77225: PUSH
77226: LD_EXP 101
77230: PPUSH
77231: LD_VAR 0 5
77235: PUSH
77236: LD_EXP 101
77240: PUSH
77241: LD_VAR 0 5
77245: ARRAY
77246: PUSH
77247: LD_INT 1
77249: PLUS
77250: PUSH
77251: EMPTY
77252: LIST
77253: LIST
77254: PPUSH
77255: LD_VAR 0 2
77259: PUSH
77260: LD_VAR 0 4
77264: ARRAY
77265: PUSH
77266: LD_VAR 0 2
77270: PUSH
77271: LD_VAR 0 4
77275: ARRAY
77276: PPUSH
77277: CALL_OW 255
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: PPUSH
77286: CALL 20534 0 3
77290: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
77291: LD_VAR 0 2
77295: PUSH
77296: LD_VAR 0 4
77300: ARRAY
77301: PPUSH
77302: LD_VAR 0 1
77306: PPUSH
77307: CALL_OW 255
77311: PPUSH
77312: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
77316: LD_VAR 0 2
77320: PUSH
77321: LD_VAR 0 4
77325: ARRAY
77326: PPUSH
77327: CALL_OW 141
// end ;
77331: GO 77163
77333: POP
77334: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
77335: LD_VAR 0 1
77339: PPUSH
77340: LD_EXP 101
77344: PUSH
77345: LD_VAR 0 5
77349: ARRAY
77350: PUSH
77351: LD_INT 0
77353: PLUS
77354: PPUSH
77355: CALL_OW 505
// end ;
77359: LD_VAR 0 3
77363: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
77364: LD_INT 0
77366: PPUSH
77367: PPUSH
77368: PPUSH
77369: PPUSH
// if not hack in hackTanks then
77370: LD_VAR 0 1
77374: PUSH
77375: LD_EXP 100
77379: IN
77380: NOT
77381: IFFALSE 77385
// exit ;
77383: GO 77625
// index := GetElementIndex ( hackTanks , hack ) ;
77385: LD_ADDR_VAR 0 4
77389: PUSH
77390: LD_EXP 100
77394: PPUSH
77395: LD_VAR 0 1
77399: PPUSH
77400: CALL 20319 0 2
77404: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
77405: LD_ADDR_VAR 0 3
77409: PUSH
77410: DOUBLE
77411: LD_EXP 101
77415: PUSH
77416: LD_VAR 0 4
77420: ARRAY
77421: INC
77422: ST_TO_ADDR
77423: LD_INT 1
77425: PUSH
77426: FOR_DOWNTO
77427: IFFALSE 77599
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
77429: LD_ADDR_VAR 0 5
77433: PUSH
77434: LD_EXP 101
77438: PUSH
77439: LD_VAR 0 4
77443: ARRAY
77444: PUSH
77445: LD_VAR 0 3
77449: ARRAY
77450: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
77451: LD_VAR 0 5
77455: PUSH
77456: LD_INT 1
77458: ARRAY
77459: PPUSH
77460: CALL_OW 302
77464: NOT
77465: PUSH
77466: LD_VAR 0 5
77470: PUSH
77471: LD_INT 1
77473: ARRAY
77474: PPUSH
77475: CALL_OW 255
77479: PUSH
77480: LD_VAR 0 1
77484: PPUSH
77485: CALL_OW 255
77489: NONEQUAL
77490: OR
77491: IFFALSE 77597
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
77493: LD_VAR 0 5
77497: PUSH
77498: LD_INT 1
77500: ARRAY
77501: PPUSH
77502: CALL_OW 305
77506: PUSH
77507: LD_VAR 0 5
77511: PUSH
77512: LD_INT 1
77514: ARRAY
77515: PPUSH
77516: CALL_OW 255
77520: PUSH
77521: LD_VAR 0 1
77525: PPUSH
77526: CALL_OW 255
77530: EQUAL
77531: AND
77532: IFFALSE 77556
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
77534: LD_VAR 0 5
77538: PUSH
77539: LD_INT 1
77541: ARRAY
77542: PPUSH
77543: LD_VAR 0 5
77547: PUSH
77548: LD_INT 2
77550: ARRAY
77551: PPUSH
77552: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
77556: LD_ADDR_EXP 101
77560: PUSH
77561: LD_EXP 101
77565: PPUSH
77566: LD_VAR 0 4
77570: PPUSH
77571: LD_EXP 101
77575: PUSH
77576: LD_VAR 0 4
77580: ARRAY
77581: PPUSH
77582: LD_VAR 0 3
77586: PPUSH
77587: CALL_OW 3
77591: PPUSH
77592: CALL_OW 1
77596: ST_TO_ADDR
// end ; end ;
77597: GO 77426
77599: POP
77600: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
77601: LD_VAR 0 1
77605: PPUSH
77606: LD_EXP 101
77610: PUSH
77611: LD_VAR 0 4
77615: ARRAY
77616: PUSH
77617: LD_INT 0
77619: PLUS
77620: PPUSH
77621: CALL_OW 505
// end ;
77625: LD_VAR 0 2
77629: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
77630: LD_INT 0
77632: PPUSH
77633: PPUSH
77634: PPUSH
77635: PPUSH
// if not hack in hackTanks then
77636: LD_VAR 0 1
77640: PUSH
77641: LD_EXP 100
77645: IN
77646: NOT
77647: IFFALSE 77651
// exit ;
77649: GO 77736
// index := GetElementIndex ( hackTanks , hack ) ;
77651: LD_ADDR_VAR 0 5
77655: PUSH
77656: LD_EXP 100
77660: PPUSH
77661: LD_VAR 0 1
77665: PPUSH
77666: CALL 20319 0 2
77670: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
77671: LD_ADDR_VAR 0 4
77675: PUSH
77676: DOUBLE
77677: LD_INT 1
77679: DEC
77680: ST_TO_ADDR
77681: LD_EXP 101
77685: PUSH
77686: LD_VAR 0 5
77690: ARRAY
77691: PUSH
77692: FOR_TO
77693: IFFALSE 77734
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
77695: LD_EXP 101
77699: PUSH
77700: LD_VAR 0 5
77704: ARRAY
77705: PUSH
77706: LD_VAR 0 4
77710: ARRAY
77711: PUSH
77712: LD_INT 1
77714: ARRAY
77715: PUSH
77716: LD_VAR 0 2
77720: EQUAL
77721: IFFALSE 77732
// KillUnit ( vehicle ) ;
77723: LD_VAR 0 2
77727: PPUSH
77728: CALL_OW 66
77732: GO 77692
77734: POP
77735: POP
// end ;
77736: LD_VAR 0 3
77740: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
77741: LD_EXP 105
77745: NOT
77746: IFFALSE 77781
77748: GO 77750
77750: DISABLE
// begin initMiner := true ;
77751: LD_ADDR_EXP 105
77755: PUSH
77756: LD_INT 1
77758: ST_TO_ADDR
// minersList := [ ] ;
77759: LD_ADDR_EXP 106
77763: PUSH
77764: EMPTY
77765: ST_TO_ADDR
// minerMinesList := [ ] ;
77766: LD_ADDR_EXP 107
77770: PUSH
77771: EMPTY
77772: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
77773: LD_ADDR_EXP 108
77777: PUSH
77778: LD_INT 5
77780: ST_TO_ADDR
// end ;
77781: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
77782: LD_EXP 105
77786: PUSH
77787: LD_INT 34
77789: PUSH
77790: LD_INT 81
77792: PUSH
77793: EMPTY
77794: LIST
77795: LIST
77796: PPUSH
77797: CALL_OW 69
77801: AND
77802: IFFALSE 78263
77804: GO 77806
77806: DISABLE
77807: LD_INT 0
77809: PPUSH
77810: PPUSH
77811: PPUSH
77812: PPUSH
// begin enable ;
77813: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
77814: LD_ADDR_VAR 0 1
77818: PUSH
77819: LD_INT 34
77821: PUSH
77822: LD_INT 81
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: PPUSH
77829: CALL_OW 69
77833: PUSH
77834: FOR_IN
77835: IFFALSE 77907
// begin if not i in minersList then
77837: LD_VAR 0 1
77841: PUSH
77842: LD_EXP 106
77846: IN
77847: NOT
77848: IFFALSE 77905
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
77850: LD_ADDR_EXP 106
77854: PUSH
77855: LD_EXP 106
77859: PPUSH
77860: LD_EXP 106
77864: PUSH
77865: LD_INT 1
77867: PLUS
77868: PPUSH
77869: LD_VAR 0 1
77873: PPUSH
77874: CALL_OW 1
77878: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
77879: LD_ADDR_EXP 107
77883: PUSH
77884: LD_EXP 107
77888: PPUSH
77889: LD_EXP 107
77893: PUSH
77894: LD_INT 1
77896: PLUS
77897: PPUSH
77898: EMPTY
77899: PPUSH
77900: CALL_OW 1
77904: ST_TO_ADDR
// end end ;
77905: GO 77834
77907: POP
77908: POP
// for i := minerMinesList downto 1 do
77909: LD_ADDR_VAR 0 1
77913: PUSH
77914: DOUBLE
77915: LD_EXP 107
77919: INC
77920: ST_TO_ADDR
77921: LD_INT 1
77923: PUSH
77924: FOR_DOWNTO
77925: IFFALSE 78261
// begin if IsLive ( minersList [ i ] ) then
77927: LD_EXP 106
77931: PUSH
77932: LD_VAR 0 1
77936: ARRAY
77937: PPUSH
77938: CALL_OW 300
77942: IFFALSE 77970
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
77944: LD_EXP 106
77948: PUSH
77949: LD_VAR 0 1
77953: ARRAY
77954: PPUSH
77955: LD_EXP 107
77959: PUSH
77960: LD_VAR 0 1
77964: ARRAY
77965: PPUSH
77966: CALL_OW 505
// if not minerMinesList [ i ] then
77970: LD_EXP 107
77974: PUSH
77975: LD_VAR 0 1
77979: ARRAY
77980: NOT
77981: IFFALSE 77985
// continue ;
77983: GO 77924
// for j := minerMinesList [ i ] downto 1 do
77985: LD_ADDR_VAR 0 2
77989: PUSH
77990: DOUBLE
77991: LD_EXP 107
77995: PUSH
77996: LD_VAR 0 1
78000: ARRAY
78001: INC
78002: ST_TO_ADDR
78003: LD_INT 1
78005: PUSH
78006: FOR_DOWNTO
78007: IFFALSE 78257
// begin side := GetSide ( minersList [ i ] ) ;
78009: LD_ADDR_VAR 0 3
78013: PUSH
78014: LD_EXP 106
78018: PUSH
78019: LD_VAR 0 1
78023: ARRAY
78024: PPUSH
78025: CALL_OW 255
78029: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
78030: LD_ADDR_VAR 0 4
78034: PUSH
78035: LD_EXP 107
78039: PUSH
78040: LD_VAR 0 1
78044: ARRAY
78045: PUSH
78046: LD_VAR 0 2
78050: ARRAY
78051: PUSH
78052: LD_INT 1
78054: ARRAY
78055: PPUSH
78056: LD_EXP 107
78060: PUSH
78061: LD_VAR 0 1
78065: ARRAY
78066: PUSH
78067: LD_VAR 0 2
78071: ARRAY
78072: PUSH
78073: LD_INT 2
78075: ARRAY
78076: PPUSH
78077: CALL_OW 428
78081: ST_TO_ADDR
// if not tmp then
78082: LD_VAR 0 4
78086: NOT
78087: IFFALSE 78091
// continue ;
78089: GO 78006
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
78091: LD_VAR 0 4
78095: PUSH
78096: LD_INT 81
78098: PUSH
78099: LD_VAR 0 3
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PPUSH
78108: CALL_OW 69
78112: IN
78113: PUSH
78114: LD_EXP 107
78118: PUSH
78119: LD_VAR 0 1
78123: ARRAY
78124: PUSH
78125: LD_VAR 0 2
78129: ARRAY
78130: PUSH
78131: LD_INT 1
78133: ARRAY
78134: PPUSH
78135: LD_EXP 107
78139: PUSH
78140: LD_VAR 0 1
78144: ARRAY
78145: PUSH
78146: LD_VAR 0 2
78150: ARRAY
78151: PUSH
78152: LD_INT 2
78154: ARRAY
78155: PPUSH
78156: CALL_OW 458
78160: AND
78161: IFFALSE 78255
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
78163: LD_EXP 107
78167: PUSH
78168: LD_VAR 0 1
78172: ARRAY
78173: PUSH
78174: LD_VAR 0 2
78178: ARRAY
78179: PUSH
78180: LD_INT 1
78182: ARRAY
78183: PPUSH
78184: LD_EXP 107
78188: PUSH
78189: LD_VAR 0 1
78193: ARRAY
78194: PUSH
78195: LD_VAR 0 2
78199: ARRAY
78200: PUSH
78201: LD_INT 2
78203: ARRAY
78204: PPUSH
78205: LD_VAR 0 3
78209: PPUSH
78210: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
78214: LD_ADDR_EXP 107
78218: PUSH
78219: LD_EXP 107
78223: PPUSH
78224: LD_VAR 0 1
78228: PPUSH
78229: LD_EXP 107
78233: PUSH
78234: LD_VAR 0 1
78238: ARRAY
78239: PPUSH
78240: LD_VAR 0 2
78244: PPUSH
78245: CALL_OW 3
78249: PPUSH
78250: CALL_OW 1
78254: ST_TO_ADDR
// end ; end ;
78255: GO 78006
78257: POP
78258: POP
// end ;
78259: GO 77924
78261: POP
78262: POP
// end ;
78263: PPOPN 4
78265: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
78266: LD_INT 0
78268: PPUSH
78269: PPUSH
// result := false ;
78270: LD_ADDR_VAR 0 4
78274: PUSH
78275: LD_INT 0
78277: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
78278: LD_VAR 0 1
78282: PPUSH
78283: CALL_OW 264
78287: PUSH
78288: LD_INT 81
78290: EQUAL
78291: NOT
78292: IFFALSE 78296
// exit ;
78294: GO 78536
// index := GetElementIndex ( minersList , unit ) ;
78296: LD_ADDR_VAR 0 5
78300: PUSH
78301: LD_EXP 106
78305: PPUSH
78306: LD_VAR 0 1
78310: PPUSH
78311: CALL 20319 0 2
78315: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
78316: LD_EXP 107
78320: PUSH
78321: LD_VAR 0 5
78325: ARRAY
78326: PUSH
78327: LD_EXP 108
78331: GREATEREQUAL
78332: IFFALSE 78336
// exit ;
78334: GO 78536
// ComMoveXY ( unit , x , y ) ;
78336: LD_VAR 0 1
78340: PPUSH
78341: LD_VAR 0 2
78345: PPUSH
78346: LD_VAR 0 3
78350: PPUSH
78351: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78355: LD_INT 35
78357: PPUSH
78358: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
78362: LD_VAR 0 1
78366: PPUSH
78367: LD_VAR 0 2
78371: PPUSH
78372: LD_VAR 0 3
78376: PPUSH
78377: CALL 52080 0 3
78381: NOT
78382: PUSH
78383: LD_VAR 0 1
78387: PPUSH
78388: CALL_OW 314
78392: AND
78393: IFFALSE 78397
// exit ;
78395: GO 78536
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
78397: LD_VAR 0 2
78401: PPUSH
78402: LD_VAR 0 3
78406: PPUSH
78407: CALL_OW 428
78411: PUSH
78412: LD_VAR 0 1
78416: EQUAL
78417: PUSH
78418: LD_VAR 0 1
78422: PPUSH
78423: CALL_OW 314
78427: NOT
78428: AND
78429: IFFALSE 78355
// PlaySoundXY ( x , y , PlantMine ) ;
78431: LD_VAR 0 2
78435: PPUSH
78436: LD_VAR 0 3
78440: PPUSH
78441: LD_STRING PlantMine
78443: PPUSH
78444: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
78448: LD_VAR 0 2
78452: PPUSH
78453: LD_VAR 0 3
78457: PPUSH
78458: LD_VAR 0 1
78462: PPUSH
78463: CALL_OW 255
78467: PPUSH
78468: LD_INT 0
78470: PPUSH
78471: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
78475: LD_ADDR_EXP 107
78479: PUSH
78480: LD_EXP 107
78484: PPUSH
78485: LD_VAR 0 5
78489: PUSH
78490: LD_EXP 107
78494: PUSH
78495: LD_VAR 0 5
78499: ARRAY
78500: PUSH
78501: LD_INT 1
78503: PLUS
78504: PUSH
78505: EMPTY
78506: LIST
78507: LIST
78508: PPUSH
78509: LD_VAR 0 2
78513: PUSH
78514: LD_VAR 0 3
78518: PUSH
78519: EMPTY
78520: LIST
78521: LIST
78522: PPUSH
78523: CALL 20534 0 3
78527: ST_TO_ADDR
// result := true ;
78528: LD_ADDR_VAR 0 4
78532: PUSH
78533: LD_INT 1
78535: ST_TO_ADDR
// end ;
78536: LD_VAR 0 4
78540: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
78541: LD_INT 0
78543: PPUSH
78544: PPUSH
78545: PPUSH
// if not unit in minersList then
78546: LD_VAR 0 1
78550: PUSH
78551: LD_EXP 106
78555: IN
78556: NOT
78557: IFFALSE 78561
// exit ;
78559: GO 78953
// index := GetElementIndex ( minersList , unit ) ;
78561: LD_ADDR_VAR 0 6
78565: PUSH
78566: LD_EXP 106
78570: PPUSH
78571: LD_VAR 0 1
78575: PPUSH
78576: CALL 20319 0 2
78580: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
78581: LD_ADDR_VAR 0 5
78585: PUSH
78586: DOUBLE
78587: LD_EXP 107
78591: PUSH
78592: LD_VAR 0 6
78596: ARRAY
78597: INC
78598: ST_TO_ADDR
78599: LD_INT 1
78601: PUSH
78602: FOR_DOWNTO
78603: IFFALSE 78764
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
78605: LD_EXP 107
78609: PUSH
78610: LD_VAR 0 6
78614: ARRAY
78615: PUSH
78616: LD_VAR 0 5
78620: ARRAY
78621: PUSH
78622: LD_INT 1
78624: ARRAY
78625: PUSH
78626: LD_VAR 0 2
78630: EQUAL
78631: PUSH
78632: LD_EXP 107
78636: PUSH
78637: LD_VAR 0 6
78641: ARRAY
78642: PUSH
78643: LD_VAR 0 5
78647: ARRAY
78648: PUSH
78649: LD_INT 2
78651: ARRAY
78652: PUSH
78653: LD_VAR 0 3
78657: EQUAL
78658: AND
78659: IFFALSE 78762
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
78661: LD_EXP 107
78665: PUSH
78666: LD_VAR 0 6
78670: ARRAY
78671: PUSH
78672: LD_VAR 0 5
78676: ARRAY
78677: PUSH
78678: LD_INT 1
78680: ARRAY
78681: PPUSH
78682: LD_EXP 107
78686: PUSH
78687: LD_VAR 0 6
78691: ARRAY
78692: PUSH
78693: LD_VAR 0 5
78697: ARRAY
78698: PUSH
78699: LD_INT 2
78701: ARRAY
78702: PPUSH
78703: LD_VAR 0 1
78707: PPUSH
78708: CALL_OW 255
78712: PPUSH
78713: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
78717: LD_ADDR_EXP 107
78721: PUSH
78722: LD_EXP 107
78726: PPUSH
78727: LD_VAR 0 6
78731: PPUSH
78732: LD_EXP 107
78736: PUSH
78737: LD_VAR 0 6
78741: ARRAY
78742: PPUSH
78743: LD_VAR 0 5
78747: PPUSH
78748: CALL_OW 3
78752: PPUSH
78753: CALL_OW 1
78757: ST_TO_ADDR
// exit ;
78758: POP
78759: POP
78760: GO 78953
// end ; end ;
78762: GO 78602
78764: POP
78765: POP
// for i := minerMinesList [ index ] downto 1 do
78766: LD_ADDR_VAR 0 5
78770: PUSH
78771: DOUBLE
78772: LD_EXP 107
78776: PUSH
78777: LD_VAR 0 6
78781: ARRAY
78782: INC
78783: ST_TO_ADDR
78784: LD_INT 1
78786: PUSH
78787: FOR_DOWNTO
78788: IFFALSE 78951
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
78790: LD_EXP 107
78794: PUSH
78795: LD_VAR 0 6
78799: ARRAY
78800: PUSH
78801: LD_VAR 0 5
78805: ARRAY
78806: PUSH
78807: LD_INT 1
78809: ARRAY
78810: PPUSH
78811: LD_EXP 107
78815: PUSH
78816: LD_VAR 0 6
78820: ARRAY
78821: PUSH
78822: LD_VAR 0 5
78826: ARRAY
78827: PUSH
78828: LD_INT 2
78830: ARRAY
78831: PPUSH
78832: LD_VAR 0 2
78836: PPUSH
78837: LD_VAR 0 3
78841: PPUSH
78842: CALL_OW 298
78846: PUSH
78847: LD_INT 6
78849: LESS
78850: IFFALSE 78949
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
78852: LD_EXP 107
78856: PUSH
78857: LD_VAR 0 6
78861: ARRAY
78862: PUSH
78863: LD_VAR 0 5
78867: ARRAY
78868: PUSH
78869: LD_INT 1
78871: ARRAY
78872: PPUSH
78873: LD_EXP 107
78877: PUSH
78878: LD_VAR 0 6
78882: ARRAY
78883: PUSH
78884: LD_VAR 0 5
78888: ARRAY
78889: PUSH
78890: LD_INT 2
78892: ARRAY
78893: PPUSH
78894: LD_VAR 0 1
78898: PPUSH
78899: CALL_OW 255
78903: PPUSH
78904: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
78908: LD_ADDR_EXP 107
78912: PUSH
78913: LD_EXP 107
78917: PPUSH
78918: LD_VAR 0 6
78922: PPUSH
78923: LD_EXP 107
78927: PUSH
78928: LD_VAR 0 6
78932: ARRAY
78933: PPUSH
78934: LD_VAR 0 5
78938: PPUSH
78939: CALL_OW 3
78943: PPUSH
78944: CALL_OW 1
78948: ST_TO_ADDR
// end ; end ;
78949: GO 78787
78951: POP
78952: POP
// end ;
78953: LD_VAR 0 4
78957: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
78958: LD_INT 0
78960: PPUSH
78961: PPUSH
78962: PPUSH
78963: PPUSH
78964: PPUSH
78965: PPUSH
78966: PPUSH
78967: PPUSH
78968: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
78969: LD_VAR 0 1
78973: PPUSH
78974: CALL_OW 264
78978: PUSH
78979: LD_INT 81
78981: EQUAL
78982: NOT
78983: PUSH
78984: LD_VAR 0 1
78988: PUSH
78989: LD_EXP 106
78993: IN
78994: NOT
78995: OR
78996: IFFALSE 79000
// exit ;
78998: GO 79322
// index := GetElementIndex ( minersList , unit ) ;
79000: LD_ADDR_VAR 0 6
79004: PUSH
79005: LD_EXP 106
79009: PPUSH
79010: LD_VAR 0 1
79014: PPUSH
79015: CALL 20319 0 2
79019: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
79020: LD_ADDR_VAR 0 8
79024: PUSH
79025: LD_EXP 108
79029: PUSH
79030: LD_EXP 107
79034: PUSH
79035: LD_VAR 0 6
79039: ARRAY
79040: MINUS
79041: ST_TO_ADDR
// if not minesFreeAmount then
79042: LD_VAR 0 8
79046: NOT
79047: IFFALSE 79051
// exit ;
79049: GO 79322
// tmp := [ ] ;
79051: LD_ADDR_VAR 0 7
79055: PUSH
79056: EMPTY
79057: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
79058: LD_ADDR_VAR 0 5
79062: PUSH
79063: DOUBLE
79064: LD_INT 1
79066: DEC
79067: ST_TO_ADDR
79068: LD_VAR 0 8
79072: PUSH
79073: FOR_TO
79074: IFFALSE 79269
// begin _d := rand ( 0 , 5 ) ;
79076: LD_ADDR_VAR 0 11
79080: PUSH
79081: LD_INT 0
79083: PPUSH
79084: LD_INT 5
79086: PPUSH
79087: CALL_OW 12
79091: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
79092: LD_ADDR_VAR 0 12
79096: PUSH
79097: LD_INT 2
79099: PPUSH
79100: LD_INT 6
79102: PPUSH
79103: CALL_OW 12
79107: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
79108: LD_ADDR_VAR 0 9
79112: PUSH
79113: LD_VAR 0 2
79117: PPUSH
79118: LD_VAR 0 11
79122: PPUSH
79123: LD_VAR 0 12
79127: PPUSH
79128: CALL_OW 272
79132: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
79133: LD_ADDR_VAR 0 10
79137: PUSH
79138: LD_VAR 0 3
79142: PPUSH
79143: LD_VAR 0 11
79147: PPUSH
79148: LD_VAR 0 12
79152: PPUSH
79153: CALL_OW 273
79157: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
79158: LD_VAR 0 9
79162: PPUSH
79163: LD_VAR 0 10
79167: PPUSH
79168: CALL_OW 488
79172: PUSH
79173: LD_VAR 0 9
79177: PUSH
79178: LD_VAR 0 10
79182: PUSH
79183: EMPTY
79184: LIST
79185: LIST
79186: PUSH
79187: LD_VAR 0 7
79191: IN
79192: NOT
79193: AND
79194: PUSH
79195: LD_VAR 0 9
79199: PPUSH
79200: LD_VAR 0 10
79204: PPUSH
79205: CALL_OW 458
79209: NOT
79210: AND
79211: IFFALSE 79253
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
79213: LD_ADDR_VAR 0 7
79217: PUSH
79218: LD_VAR 0 7
79222: PPUSH
79223: LD_VAR 0 7
79227: PUSH
79228: LD_INT 1
79230: PLUS
79231: PPUSH
79232: LD_VAR 0 9
79236: PUSH
79237: LD_VAR 0 10
79241: PUSH
79242: EMPTY
79243: LIST
79244: LIST
79245: PPUSH
79246: CALL_OW 1
79250: ST_TO_ADDR
79251: GO 79267
// i := i - 1 ;
79253: LD_ADDR_VAR 0 5
79257: PUSH
79258: LD_VAR 0 5
79262: PUSH
79263: LD_INT 1
79265: MINUS
79266: ST_TO_ADDR
// end ;
79267: GO 79073
79269: POP
79270: POP
// for i in tmp do
79271: LD_ADDR_VAR 0 5
79275: PUSH
79276: LD_VAR 0 7
79280: PUSH
79281: FOR_IN
79282: IFFALSE 79320
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
79284: LD_VAR 0 1
79288: PPUSH
79289: LD_VAR 0 5
79293: PUSH
79294: LD_INT 1
79296: ARRAY
79297: PPUSH
79298: LD_VAR 0 5
79302: PUSH
79303: LD_INT 2
79305: ARRAY
79306: PPUSH
79307: CALL 78266 0 3
79311: NOT
79312: IFFALSE 79318
// exit ;
79314: POP
79315: POP
79316: GO 79322
79318: GO 79281
79320: POP
79321: POP
// end ;
79322: LD_VAR 0 4
79326: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
79327: LD_INT 0
79329: PPUSH
79330: PPUSH
79331: PPUSH
79332: PPUSH
79333: PPUSH
79334: PPUSH
79335: PPUSH
79336: PPUSH
79337: PPUSH
// if GetClass ( unit ) <> class_sniper then
79338: LD_VAR 0 1
79342: PPUSH
79343: CALL_OW 257
79347: PUSH
79348: LD_INT 5
79350: NONEQUAL
79351: IFFALSE 79355
// exit ;
79353: GO 79821
// dist := 8 ;
79355: LD_ADDR_VAR 0 5
79359: PUSH
79360: LD_INT 8
79362: ST_TO_ADDR
// viewRange := 12 ;
79363: LD_ADDR_VAR 0 8
79367: PUSH
79368: LD_INT 12
79370: ST_TO_ADDR
// side := GetSide ( unit ) ;
79371: LD_ADDR_VAR 0 6
79375: PUSH
79376: LD_VAR 0 1
79380: PPUSH
79381: CALL_OW 255
79385: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
79386: LD_INT 61
79388: PPUSH
79389: LD_VAR 0 6
79393: PPUSH
79394: CALL_OW 321
79398: PUSH
79399: LD_INT 2
79401: EQUAL
79402: IFFALSE 79412
// viewRange := 16 ;
79404: LD_ADDR_VAR 0 8
79408: PUSH
79409: LD_INT 16
79411: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
79412: LD_VAR 0 1
79416: PPUSH
79417: LD_VAR 0 2
79421: PPUSH
79422: LD_VAR 0 3
79426: PPUSH
79427: CALL_OW 297
79431: PUSH
79432: LD_VAR 0 5
79436: GREATER
79437: IFFALSE 79516
// begin ComMoveXY ( unit , x , y ) ;
79439: LD_VAR 0 1
79443: PPUSH
79444: LD_VAR 0 2
79448: PPUSH
79449: LD_VAR 0 3
79453: PPUSH
79454: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79458: LD_INT 35
79460: PPUSH
79461: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
79465: LD_VAR 0 1
79469: PPUSH
79470: LD_VAR 0 2
79474: PPUSH
79475: LD_VAR 0 3
79479: PPUSH
79480: CALL 52080 0 3
79484: NOT
79485: IFFALSE 79489
// exit ;
79487: GO 79821
// until GetDistUnitXY ( unit , x , y ) < dist ;
79489: LD_VAR 0 1
79493: PPUSH
79494: LD_VAR 0 2
79498: PPUSH
79499: LD_VAR 0 3
79503: PPUSH
79504: CALL_OW 297
79508: PUSH
79509: LD_VAR 0 5
79513: LESS
79514: IFFALSE 79458
// end ; ComTurnXY ( unit , x , y ) ;
79516: LD_VAR 0 1
79520: PPUSH
79521: LD_VAR 0 2
79525: PPUSH
79526: LD_VAR 0 3
79530: PPUSH
79531: CALL_OW 118
// repeat if Multiplayer then
79535: LD_OWVAR 4
79539: IFFALSE 79550
// wait ( 35 ) else
79541: LD_INT 35
79543: PPUSH
79544: CALL_OW 67
79548: GO 79557
// wait ( 5 ) ;
79550: LD_INT 5
79552: PPUSH
79553: CALL_OW 67
// _d := GetDir ( unit ) ;
79557: LD_ADDR_VAR 0 11
79561: PUSH
79562: LD_VAR 0 1
79566: PPUSH
79567: CALL_OW 254
79571: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
79572: LD_ADDR_VAR 0 7
79576: PUSH
79577: LD_VAR 0 1
79581: PPUSH
79582: CALL_OW 250
79586: PPUSH
79587: LD_VAR 0 1
79591: PPUSH
79592: CALL_OW 251
79596: PPUSH
79597: LD_VAR 0 2
79601: PPUSH
79602: LD_VAR 0 3
79606: PPUSH
79607: CALL 54688 0 4
79611: ST_TO_ADDR
// until dir = _d ;
79612: LD_VAR 0 7
79616: PUSH
79617: LD_VAR 0 11
79621: EQUAL
79622: IFFALSE 79535
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
79624: LD_ADDR_VAR 0 9
79628: PUSH
79629: LD_VAR 0 1
79633: PPUSH
79634: CALL_OW 250
79638: PPUSH
79639: LD_VAR 0 7
79643: PPUSH
79644: LD_VAR 0 5
79648: PPUSH
79649: CALL_OW 272
79653: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
79654: LD_ADDR_VAR 0 10
79658: PUSH
79659: LD_VAR 0 1
79663: PPUSH
79664: CALL_OW 251
79668: PPUSH
79669: LD_VAR 0 7
79673: PPUSH
79674: LD_VAR 0 5
79678: PPUSH
79679: CALL_OW 273
79683: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79684: LD_VAR 0 9
79688: PPUSH
79689: LD_VAR 0 10
79693: PPUSH
79694: CALL_OW 488
79698: NOT
79699: IFFALSE 79703
// exit ;
79701: GO 79821
// ComAnimCustom ( unit , 1 ) ;
79703: LD_VAR 0 1
79707: PPUSH
79708: LD_INT 1
79710: PPUSH
79711: CALL_OW 592
// p := 0 ;
79715: LD_ADDR_VAR 0 12
79719: PUSH
79720: LD_INT 0
79722: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
79723: LD_VAR 0 9
79727: PPUSH
79728: LD_VAR 0 10
79732: PPUSH
79733: LD_VAR 0 6
79737: PPUSH
79738: LD_VAR 0 8
79742: PPUSH
79743: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
79747: LD_INT 35
79749: PPUSH
79750: CALL_OW 67
// p := Inc ( p ) ;
79754: LD_ADDR_VAR 0 12
79758: PUSH
79759: LD_VAR 0 12
79763: PPUSH
79764: CALL 54644 0 1
79768: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
79769: LD_VAR 0 12
79773: PUSH
79774: LD_INT 3
79776: EQUAL
79777: PUSH
79778: LD_VAR 0 1
79782: PPUSH
79783: CALL_OW 302
79787: NOT
79788: OR
79789: PUSH
79790: LD_VAR 0 1
79794: PPUSH
79795: CALL_OW 301
79799: OR
79800: IFFALSE 79747
// RemoveSeeing ( _x , _y , side ) ;
79802: LD_VAR 0 9
79806: PPUSH
79807: LD_VAR 0 10
79811: PPUSH
79812: LD_VAR 0 6
79816: PPUSH
79817: CALL_OW 331
// end ;
79821: LD_VAR 0 4
79825: RET
