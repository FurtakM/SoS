// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 41 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 4228 0 0
// LoadEnv ;
  16: CALL 3826 0 0
// LoadCam ;
  20: CALL 4442 0 0
// LoadTech ;
  24: CALL 4518 0 0
// LoadBase ;
  28: CALL 4593 0 0
// PrepareArabian ;
  32: CALL 166 0 0
// Action ;
  36: CALL 5070 0 0
// end ;
  40: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; function Init ; begin
  41: LD_INT 0
  43: PPUSH
// debug := false ;
  44: LD_ADDR_EXP 1
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// prefix := 09c_ ;
  52: LD_ADDR_EXP 2
  56: PUSH
  57: LD_STRING 09c_
  59: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_STRING 09_tick
  67: PPUSH
  68: LD_INT 31500
  70: PPUSH
  71: CALL_OW 30
  75: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  76: LD_ADDR_EXP 4
  80: PUSH
  81: LD_STRING 09c_tick
  83: PPUSH
  84: LD_INT 10500
  86: PPUSH
  87: CALL_OW 30
  91: ST_TO_ADDR
// playerInBase := false ;
  92: LD_ADDR_EXP 5
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// kamikazeTrained := false ;
 100: LD_ADDR_EXP 6
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// apeDriver := false ;
 108: LD_ADDR_EXP 8
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 116: LD_ADDR_EXP 7
 120: PUSH
 121: LD_INT 120
 123: PUSH
 124: LD_INT 150
 126: PUSH
 127: LD_INT 180
 129: PUSH
 130: LD_INT 220
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: LIST
 137: LIST
 138: PUSH
 139: LD_OWVAR 67
 143: ARRAY
 144: ST_TO_ADDR
// missionTime := 0 0$00 ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// ruDefeated := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// end ; end_of_file
 161: LD_VAR 0 1
 165: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
 170: PPUSH
 171: PPUSH
 172: PPUSH
 173: PPUSH
 174: PPUSH
 175: PPUSH
 176: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 177: LD_STRING 05_DrugsTested
 179: PPUSH
 180: LD_EXP 1
 184: PPUSH
 185: CALL_OW 30
 189: IFFALSE 204
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 191: LD_INT 5
 193: PPUSH
 194: LD_INT 2
 196: PPUSH
 197: LD_INT 2
 199: PPUSH
 200: CALL_OW 322
// uc_side := 2 ;
 204: LD_ADDR_OWVAR 20
 208: PUSH
 209: LD_INT 2
 211: ST_TO_ADDR
// uc_nation := nation_nature ;
 212: LD_ADDR_OWVAR 21
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 220: LD_ADDR_VAR 0 3
 224: PUSH
 225: LD_STRING 09_apes
 227: PPUSH
 228: CALL_OW 31
 232: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 233: LD_ADDR_VAR 0 6
 237: PUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 2
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: LD_INT 30
 253: PUSH
 254: LD_INT 0
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: LD_INT 30
 263: PUSH
 264: LD_INT 1
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: LIST
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PPUSH
 280: CALL_OW 69
 284: ST_TO_ADDR
// if apes then
 285: LD_VAR 0 3
 289: IFFALSE 368
// for i in apes do
 291: LD_ADDR_VAR 0 2
 295: PUSH
 296: LD_VAR 0 3
 300: PUSH
 301: FOR_IN
 302: IFFALSE 366
// if UnitsInside ( b [ 1 ] ) < 6 then
 304: LD_VAR 0 6
 308: PUSH
 309: LD_INT 1
 311: ARRAY
 312: PPUSH
 313: CALL_OW 313
 317: PUSH
 318: LD_INT 6
 320: LESS
 321: IFFALSE 343
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 323: LD_VAR 0 2
 327: PPUSH
 328: LD_VAR 0 6
 332: PUSH
 333: LD_INT 1
 335: ARRAY
 336: PPUSH
 337: CALL_OW 52
 341: GO 364
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_INT 82
 350: PPUSH
 351: LD_INT 27
 353: PPUSH
 354: LD_INT 6
 356: PPUSH
 357: LD_INT 0
 359: PPUSH
 360: CALL_OW 50
 364: GO 301
 366: POP
 367: POP
// InitHC_All ( ) ;
 368: CALL_OW 584
// uc_nation := nation_arabian ;
 372: LD_ADDR_OWVAR 21
 376: PUSH
 377: LD_INT 2
 379: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 380: LD_ADDR_VAR 0 6
 384: PUSH
 385: LD_INT 22
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PUSH
 395: LD_INT 21
 397: PUSH
 398: LD_INT 3
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: LD_INT 2
 407: PUSH
 408: LD_INT 30
 410: PUSH
 411: LD_INT 32
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: LD_INT 30
 420: PUSH
 421: LD_INT 4
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 5
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PPUSH
 449: CALL_OW 69
 453: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 454: LD_ADDR_EXP 31
 458: PUSH
 459: LD_STRING Rolf
 461: PPUSH
 462: LD_EXP 1
 466: NOT
 467: PPUSH
 468: LD_STRING 06_
 470: PPUSH
 471: CALL 7596 0 3
 475: ST_TO_ADDR
// if Rolf then
 476: LD_EXP 31
 480: IFFALSE 689
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 482: LD_ADDR_EXP 30
 486: PUSH
 487: LD_STRING 06_RolfSquad
 489: PPUSH
 490: CALL_OW 31
 494: ST_TO_ADDR
// if rolfSquad < 3 then
 495: LD_EXP 30
 499: PUSH
 500: LD_INT 3
 502: LESS
 503: IFFALSE 566
// for i := 1 to 3 - Count ( rolfSquad ) do
 505: LD_ADDR_VAR 0 2
 509: PUSH
 510: DOUBLE
 511: LD_INT 1
 513: DEC
 514: ST_TO_ADDR
 515: LD_INT 3
 517: PUSH
 518: LD_EXP 30
 522: PPUSH
 523: CALL 9698 0 1
 527: MINUS
 528: PUSH
 529: FOR_TO
 530: IFFALSE 564
// begin PrepareSoldier ( false , 4 ) ;
 532: LD_INT 0
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 542: LD_ADDR_EXP 30
 546: PUSH
 547: LD_EXP 30
 551: PPUSH
 552: CALL_OW 44
 556: PPUSH
 557: CALL 45064 0 2
 561: ST_TO_ADDR
// end ;
 562: GO 529
 564: POP
 565: POP
// if b then
 566: LD_VAR 0 6
 570: IFFALSE 645
// begin for i in rolfSquad union Rolf do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: LD_EXP 30
 581: PUSH
 582: LD_EXP 31
 586: UNION
 587: PUSH
 588: FOR_IN
 589: IFFALSE 641
// begin SetClass ( i , 1 ) ;
 591: LD_VAR 0 2
 595: PPUSH
 596: LD_INT 1
 598: PPUSH
 599: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_VAR 0 6
 612: PPUSH
 613: LD_INT 3
 615: PUSH
 616: LD_INT 62
 618: PUSH
 619: EMPTY
 620: LIST
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: PPUSH
 626: CALL_OW 72
 630: PUSH
 631: LD_INT 1
 633: ARRAY
 634: PPUSH
 635: CALL_OW 52
// end ;
 639: GO 588
 641: POP
 642: POP
// end else
 643: GO 689
// for i in rolfSquad union Rolf do
 645: LD_ADDR_VAR 0 2
 649: PUSH
 650: LD_EXP 30
 654: PUSH
 655: LD_EXP 31
 659: UNION
 660: PUSH
 661: FOR_IN
 662: IFFALSE 687
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 664: LD_VAR 0 2
 668: PPUSH
 669: LD_INT 82
 671: PPUSH
 672: LD_INT 27
 674: PPUSH
 675: LD_INT 6
 677: PPUSH
 678: LD_INT 0
 680: PPUSH
 681: CALL_OW 50
 685: GO 661
 687: POP
 688: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 689: LD_ADDR_EXP 11
 693: PUSH
 694: LD_STRING Heike
 696: PPUSH
 697: LD_EXP 1
 701: NOT
 702: PPUSH
 703: LD_EXP 2
 707: PPUSH
 708: CALL 7596 0 3
 712: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 713: LD_ADDR_EXP 14
 717: PUSH
 718: LD_STRING Ibrahim
 720: PPUSH
 721: LD_EXP 1
 725: NOT
 726: PPUSH
 727: LD_EXP 2
 731: PPUSH
 732: CALL 7596 0 3
 736: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 737: LD_ADDR_EXP 12
 741: PUSH
 742: LD_STRING Givi
 744: PPUSH
 745: LD_EXP 1
 749: NOT
 750: PPUSH
 751: LD_EXP 2
 755: PPUSH
 756: CALL 7596 0 3
 760: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 761: LD_ADDR_EXP 15
 765: PUSH
 766: LD_STRING Kamil
 768: PPUSH
 769: LD_EXP 1
 773: NOT
 774: PPUSH
 775: LD_EXP 2
 779: PPUSH
 780: CALL 7596 0 3
 784: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 785: LD_ADDR_EXP 16
 789: PUSH
 790: LD_STRING Kaia
 792: PPUSH
 793: LD_EXP 1
 797: NOT
 798: PPUSH
 799: LD_EXP 2
 803: PPUSH
 804: CALL 7596 0 3
 808: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 809: LD_ADDR_EXP 17
 813: PUSH
 814: LD_STRING Sophia
 816: PPUSH
 817: LD_EXP 1
 821: NOT
 822: PPUSH
 823: LD_EXP 2
 827: PPUSH
 828: CALL 7596 0 3
 832: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 833: LD_ADDR_EXP 18
 837: PUSH
 838: LD_STRING Markov
 840: PPUSH
 841: LD_EXP 1
 845: NOT
 846: PPUSH
 847: LD_EXP 2
 851: PPUSH
 852: CALL 7596 0 3
 856: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 857: LD_ADDR_EXP 21
 861: PUSH
 862: LD_STRING Aviradze
 864: PPUSH
 865: LD_EXP 1
 869: NOT
 870: PPUSH
 871: LD_EXP 2
 875: PPUSH
 876: CALL 7596 0 3
 880: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 881: LD_ADDR_EXP 20
 885: PUSH
 886: LD_STRING Kurt
 888: PPUSH
 889: LD_EXP 1
 893: NOT
 894: PPUSH
 895: LD_EXP 2
 899: PPUSH
 900: CALL 7596 0 3
 904: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 905: LD_ADDR_EXP 13
 909: PUSH
 910: LD_STRING Mike
 912: PPUSH
 913: LD_EXP 1
 917: NOT
 918: PPUSH
 919: LD_EXP 2
 923: PPUSH
 924: CALL 7596 0 3
 928: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 929: LD_ADDR_EXP 19
 933: PUSH
 934: LD_STRING Olaf
 936: PPUSH
 937: LD_EXP 1
 941: NOT
 942: PPUSH
 943: LD_EXP 2
 947: PPUSH
 948: CALL 7596 0 3
 952: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 953: LD_ADDR_EXP 28
 957: PUSH
 958: LD_STRING 09c_heikeSecondSquad
 960: PPUSH
 961: CALL_OW 31
 965: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 966: LD_ADDR_EXP 22
 970: PUSH
 971: LD_STRING Schulz
 973: PPUSH
 974: LD_EXP 1
 978: NOT
 979: PPUSH
 980: LD_EXP 2
 984: PPUSH
 985: CALL 7596 0 3
 989: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
 990: LD_ADDR_EXP 23
 994: PUSH
 995: LD_STRING Basim
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 2
1008: PPUSH
1009: CALL 7596 0 3
1013: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1014: LD_ADDR_EXP 24
1018: PUSH
1019: LD_STRING Lemmy
1021: PPUSH
1022: LD_EXP 1
1026: NOT
1027: PPUSH
1028: LD_EXP 2
1032: PPUSH
1033: CALL 7596 0 3
1037: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1038: LD_ADDR_EXP 25
1042: PUSH
1043: LD_STRING Mia
1045: PPUSH
1046: LD_EXP 1
1050: NOT
1051: PPUSH
1052: LD_EXP 2
1056: PPUSH
1057: CALL 7596 0 3
1061: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1062: LD_ADDR_EXP 26
1066: PUSH
1067: LD_STRING Nia
1069: PPUSH
1070: LD_EXP 1
1074: NOT
1075: PPUSH
1076: LD_EXP 2
1080: PPUSH
1081: CALL 7596 0 3
1085: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1086: LD_ADDR_EXP 27
1090: PUSH
1091: LD_STRING Jenna
1093: PPUSH
1094: LD_EXP 1
1098: NOT
1099: PPUSH
1100: LD_EXP 2
1104: PPUSH
1105: CALL 7596 0 3
1109: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1110: LD_ADDR_EXP 29
1114: PUSH
1115: LD_STRING 09c_schulzSecondSquad
1117: PPUSH
1118: CALL_OW 31
1122: ST_TO_ADDR
// vehicles := LoadVariable ( 09_vehicles , [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , - 2 , 1 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 2 ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 90 , 0 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 90 , 0 , 3 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , 0 , 4 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 5 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 6 ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 3 , 90 , 0 , 7 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 8 ] , ] ) ;
1123: LD_ADDR_VAR 0 9
1127: PUSH
1128: LD_STRING 09_vehicles
1130: PPUSH
1131: LD_INT 14
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 27
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: LD_INT 90
1148: PUSH
1149: LD_INT 2
1151: NEG
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_INT 14
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 30
1177: PUSH
1178: LD_INT 2
1180: PUSH
1181: LD_INT 90
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 2
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: PUSH
1200: LD_INT 14
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 2
1208: PUSH
1209: LD_INT 27
1211: PUSH
1212: LD_INT 2
1214: PUSH
1215: LD_INT 90
1217: PUSH
1218: LD_INT 0
1220: PUSH
1221: LD_INT 0
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 14
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 1
1242: PUSH
1243: LD_INT 31
1245: PUSH
1246: LD_INT 2
1248: PUSH
1249: LD_INT 90
1251: PUSH
1252: LD_INT 0
1254: PUSH
1255: LD_INT 3
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 14
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 1
1276: PUSH
1277: LD_INT 27
1279: PUSH
1280: LD_INT 2
1282: PUSH
1283: LD_INT 90
1285: PUSH
1286: LD_INT 0
1288: PUSH
1289: LD_INT 4
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 13
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 28
1313: PUSH
1314: LD_INT 2
1316: PUSH
1317: LD_INT 90
1319: PUSH
1320: LD_INT 0
1322: PUSH
1323: LD_INT 5
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: PUSH
1336: LD_INT 13
1338: PUSH
1339: LD_INT 1
1341: PUSH
1342: LD_INT 1
1344: PUSH
1345: LD_INT 28
1347: PUSH
1348: LD_INT 2
1350: PUSH
1351: LD_INT 90
1353: PUSH
1354: LD_INT 0
1356: PUSH
1357: LD_INT 6
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_INT 22
1372: PUSH
1373: LD_INT 1
1375: PUSH
1376: LD_INT 1
1378: PUSH
1379: LD_INT 45
1381: PUSH
1382: LD_INT 3
1384: PUSH
1385: LD_INT 90
1387: PUSH
1388: LD_INT 0
1390: PUSH
1391: LD_INT 7
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 13
1406: PUSH
1407: LD_INT 1
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: LD_INT 30
1415: PUSH
1416: LD_INT 2
1418: PUSH
1419: LD_INT 90
1421: PUSH
1422: LD_INT 0
1424: PUSH
1425: LD_INT 8
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL_OW 30
1453: ST_TO_ADDR
// SpawnInto ( Heike , LoadVariable ( 09_Heike_ID , - 1 ) , vehicles ) ;
1454: LD_EXP 11
1458: PPUSH
1459: LD_STRING 09_Heike_ID
1461: PPUSH
1462: LD_INT 1
1464: NEG
1465: PPUSH
1466: CALL_OW 30
1470: PPUSH
1471: LD_VAR 0 9
1475: PPUSH
1476: CALL 2256 0 3
// SpawnInto ( Givi , LoadVariable ( 09_Givi_ID , - 1 ) , vehicles ) ;
1480: LD_EXP 12
1484: PPUSH
1485: LD_STRING 09_Givi_ID
1487: PPUSH
1488: LD_INT 1
1490: NEG
1491: PPUSH
1492: CALL_OW 30
1496: PPUSH
1497: LD_VAR 0 9
1501: PPUSH
1502: CALL 2256 0 3
// SpawnInto ( Mike , LoadVariable ( 09_Mike_ID , - 1 ) , vehicles ) ;
1506: LD_EXP 13
1510: PPUSH
1511: LD_STRING 09_Mike_ID
1513: PPUSH
1514: LD_INT 1
1516: NEG
1517: PPUSH
1518: CALL_OW 30
1522: PPUSH
1523: LD_VAR 0 9
1527: PPUSH
1528: CALL 2256 0 3
// SpawnInto ( Ibrahim , LoadVariable ( 09_Ibrahim_ID , - 1 ) , vehicles ) ;
1532: LD_EXP 14
1536: PPUSH
1537: LD_STRING 09_Ibrahim_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2256 0 3
// SpawnInto ( Kamil , LoadVariable ( 09_Kamil_ID , - 1 ) , vehicles ) ;
1558: LD_EXP 15
1562: PPUSH
1563: LD_STRING 09_Kamil_ID
1565: PPUSH
1566: LD_INT 1
1568: NEG
1569: PPUSH
1570: CALL_OW 30
1574: PPUSH
1575: LD_VAR 0 9
1579: PPUSH
1580: CALL 2256 0 3
// SpawnInto ( Kaia , LoadVariable ( 09_Kaia_ID , - 1 ) , vehicles ) ;
1584: LD_EXP 16
1588: PPUSH
1589: LD_STRING 09_Kaia_ID
1591: PPUSH
1592: LD_INT 1
1594: NEG
1595: PPUSH
1596: CALL_OW 30
1600: PPUSH
1601: LD_VAR 0 9
1605: PPUSH
1606: CALL 2256 0 3
// SpawnInto ( Sophia , LoadVariable ( 09_Sophia_ID , - 1 ) , vehicles ) ;
1610: LD_EXP 17
1614: PPUSH
1615: LD_STRING 09_Sophia_ID
1617: PPUSH
1618: LD_INT 1
1620: NEG
1621: PPUSH
1622: CALL_OW 30
1626: PPUSH
1627: LD_VAR 0 9
1631: PPUSH
1632: CALL 2256 0 3
// SpawnInto ( Markov , LoadVariable ( 09_Markov_ID , - 1 ) , vehicles ) ;
1636: LD_EXP 18
1640: PPUSH
1641: LD_STRING 09_Markov_ID
1643: PPUSH
1644: LD_INT 1
1646: NEG
1647: PPUSH
1648: CALL_OW 30
1652: PPUSH
1653: LD_VAR 0 9
1657: PPUSH
1658: CALL 2256 0 3
// SpawnInto ( Olaf , LoadVariable ( 09_Olaf_ID , - 1 ) , vehicles ) ;
1662: LD_EXP 19
1666: PPUSH
1667: LD_STRING 09_Olaf_ID
1669: PPUSH
1670: LD_INT 1
1672: NEG
1673: PPUSH
1674: CALL_OW 30
1678: PPUSH
1679: LD_VAR 0 9
1683: PPUSH
1684: CALL 2256 0 3
// SpawnInto ( Kurt , LoadVariable ( 09_Kurt_ID , - 1 ) , vehicles ) ;
1688: LD_EXP 20
1692: PPUSH
1693: LD_STRING 09_Kurt_ID
1695: PPUSH
1696: LD_INT 1
1698: NEG
1699: PPUSH
1700: CALL_OW 30
1704: PPUSH
1705: LD_VAR 0 9
1709: PPUSH
1710: CALL 2256 0 3
// SpawnInto ( Aviradze , LoadVariable ( 09_Aviradze_ID , - 1 ) , vehicles ) ;
1714: LD_EXP 21
1718: PPUSH
1719: LD_STRING 09_Aviradze_ID
1721: PPUSH
1722: LD_INT 1
1724: NEG
1725: PPUSH
1726: CALL_OW 30
1730: PPUSH
1731: LD_VAR 0 9
1735: PPUSH
1736: CALL 2256 0 3
// SpawnInto ( Schulz , LoadVariable ( 09_Schulz_ID , 1 ) , vehicles ) ;
1740: LD_EXP 22
1744: PPUSH
1745: LD_STRING 09_Schulz_ID
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 30
1755: PPUSH
1756: LD_VAR 0 9
1760: PPUSH
1761: CALL 2256 0 3
// SpawnInto ( Lemmy , LoadVariable ( 09_Lemmy_ID , 2 ) , vehicles ) ;
1765: LD_EXP 24
1769: PPUSH
1770: LD_STRING 09_Lemmy_ID
1772: PPUSH
1773: LD_INT 2
1775: PPUSH
1776: CALL_OW 30
1780: PPUSH
1781: LD_VAR 0 9
1785: PPUSH
1786: CALL 2256 0 3
// SpawnInto ( Mia , LoadVariable ( 09_Mia_ID , 3 ) , vehicles ) ;
1790: LD_EXP 25
1794: PPUSH
1795: LD_STRING 09_Mia_ID
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: CALL_OW 30
1805: PPUSH
1806: LD_VAR 0 9
1810: PPUSH
1811: CALL 2256 0 3
// SpawnInto ( Nia , LoadVariable ( 09_Nia_ID , 4 ) , vehicles ) ;
1815: LD_EXP 26
1819: PPUSH
1820: LD_STRING 09_Nia_ID
1822: PPUSH
1823: LD_INT 4
1825: PPUSH
1826: CALL_OW 30
1830: PPUSH
1831: LD_VAR 0 9
1835: PPUSH
1836: CALL 2256 0 3
// SpawnInto ( Jenna , LoadVariable ( 09_Jenna_ID , 5 ) , vehicles ) ;
1840: LD_EXP 27
1844: PPUSH
1845: LD_STRING 09_Jenna_ID
1847: PPUSH
1848: LD_INT 5
1850: PPUSH
1851: CALL_OW 30
1855: PPUSH
1856: LD_VAR 0 9
1860: PPUSH
1861: CALL 2256 0 3
// SpawnInto ( Basim , LoadVariable ( 09_Basim_ID , 0 ) , vehicles ) ;
1865: LD_EXP 23
1869: PPUSH
1870: LD_STRING 09_Basim_ID
1872: PPUSH
1873: LD_INT 0
1875: PPUSH
1876: CALL_OW 30
1880: PPUSH
1881: LD_VAR 0 9
1885: PPUSH
1886: CALL 2256 0 3
// for i := 1 to schulzSecondSquad do
1890: LD_ADDR_VAR 0 2
1894: PUSH
1895: DOUBLE
1896: LD_INT 1
1898: DEC
1899: ST_TO_ADDR
1900: LD_EXP 29
1904: PUSH
1905: FOR_TO
1906: IFFALSE 1953
// SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 5 + i ) , vehicles ) ;
1908: LD_EXP 29
1912: PUSH
1913: LD_VAR 0 2
1917: ARRAY
1918: PPUSH
1919: LD_STRING 09c_random_ID_
1921: PUSH
1922: LD_VAR 0 2
1926: STR
1927: PPUSH
1928: LD_INT 5
1930: PUSH
1931: LD_VAR 0 2
1935: PLUS
1936: PPUSH
1937: CALL_OW 30
1941: PPUSH
1942: LD_VAR 0 9
1946: PPUSH
1947: CALL 2256 0 3
1951: GO 1905
1953: POP
1954: POP
// for i := 1 to heikeSecondSquad do
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: DOUBLE
1961: LD_INT 1
1963: DEC
1964: ST_TO_ADDR
1965: LD_EXP 28
1969: PUSH
1970: FOR_TO
1971: IFFALSE 2018
// SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 5 + i ) , vehicles ) ;
1973: LD_EXP 28
1977: PUSH
1978: LD_VAR 0 2
1982: ARRAY
1983: PPUSH
1984: LD_STRING 09c_random_ID_
1986: PUSH
1987: LD_VAR 0 2
1991: STR
1992: PPUSH
1993: LD_INT 5
1995: PUSH
1996: LD_VAR 0 2
2000: PLUS
2001: PPUSH
2002: CALL_OW 30
2006: PPUSH
2007: LD_VAR 0 9
2011: PPUSH
2012: CALL 2256 0 3
2016: GO 1970
2018: POP
2019: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2020: LD_INT 22
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 34
2032: PUSH
2033: LD_INT 31
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 69
2048: IFFALSE 2251
// begin for j := Count ( vehicles ) downto 1 do
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: DOUBLE
2056: LD_VAR 0 9
2060: PPUSH
2061: CALL 9698 0 1
2065: INC
2066: ST_TO_ADDR
2067: LD_INT 1
2069: PUSH
2070: FOR_DOWNTO
2071: IFFALSE 2249
// begin i := vehicles [ j ] ;
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 7
2087: ARRAY
2088: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2089: LD_VAR 0 2
2093: PUSH
2094: LD_INT 3
2096: ARRAY
2097: PUSH
2098: LD_INT 2
2100: EQUAL
2101: IFFALSE 2247
// begin uc_side := 2 ;
2103: LD_ADDR_OWVAR 20
2107: PUSH
2108: LD_INT 2
2110: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2111: LD_ADDR_OWVAR 21
2115: PUSH
2116: LD_VAR 0 2
2120: PUSH
2121: LD_INT 5
2123: ARRAY
2124: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2125: LD_VAR 0 2
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: LD_VAR 0 2
2138: PUSH
2139: LD_INT 2
2141: ARRAY
2142: PPUSH
2143: LD_VAR 0 2
2147: PUSH
2148: LD_INT 3
2150: ARRAY
2151: PPUSH
2152: LD_VAR 0 2
2156: PUSH
2157: LD_INT 4
2159: ARRAY
2160: PPUSH
2161: LD_VAR 0 2
2165: PUSH
2166: LD_INT 6
2168: ARRAY
2169: PPUSH
2170: CALL 12611 0 5
// veh := CreateVehicle ;
2174: LD_ADDR_VAR 0 8
2178: PUSH
2179: CALL_OW 45
2183: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2184: LD_VAR 0 8
2188: PPUSH
2189: LD_INT 5
2191: PPUSH
2192: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2196: LD_VAR 0 8
2200: PPUSH
2201: LD_INT 7
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2211: LD_ADDR_VAR 0 9
2215: PUSH
2216: LD_VAR 0 9
2220: PPUSH
2221: LD_VAR 0 7
2225: PPUSH
2226: CALL_OW 3
2230: ST_TO_ADDR
// Connect ( veh ) ;
2231: LD_VAR 0 8
2235: PPUSH
2236: CALL 15702 0 1
// wait ( 0 0$0.3 ) ;
2240: LD_INT 10
2242: PPUSH
2243: CALL_OW 67
// end ; end ;
2247: GO 2070
2249: POP
2250: POP
// end ; end ;
2251: LD_VAR 0 1
2255: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2256: LD_INT 0
2258: PPUSH
2259: PPUSH
2260: PPUSH
// for i in vehicles do
2261: LD_ADDR_VAR 0 5
2265: PUSH
2266: LD_VAR 0 3
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2498
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2274: LD_VAR 0 5
2278: PUSH
2279: LD_INT 8
2281: ARRAY
2282: PUSH
2283: LD_VAR 0 2
2287: EQUAL
2288: PUSH
2289: LD_VAR 0 5
2293: PUSH
2294: LD_INT 3
2296: ARRAY
2297: PUSH
2298: LD_INT 1
2300: EQUAL
2301: AND
2302: IFFALSE 2496
// begin uc_side := 2 ;
2304: LD_ADDR_OWVAR 20
2308: PUSH
2309: LD_INT 2
2311: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2312: LD_ADDR_OWVAR 21
2316: PUSH
2317: LD_VAR 0 5
2321: PUSH
2322: LD_INT 5
2324: ARRAY
2325: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2326: LD_VAR 0 5
2330: PUSH
2331: LD_INT 1
2333: ARRAY
2334: PPUSH
2335: LD_VAR 0 5
2339: PUSH
2340: LD_INT 2
2342: ARRAY
2343: PPUSH
2344: LD_VAR 0 5
2348: PUSH
2349: LD_INT 3
2351: ARRAY
2352: PPUSH
2353: LD_VAR 0 5
2357: PUSH
2358: LD_INT 4
2360: ARRAY
2361: PPUSH
2362: LD_VAR 0 5
2366: PUSH
2367: LD_INT 6
2369: ARRAY
2370: PPUSH
2371: CALL 12611 0 5
// veh := CreateVehicle ;
2375: LD_ADDR_VAR 0 6
2379: PUSH
2380: CALL_OW 45
2384: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2385: LD_VAR 0 6
2389: PPUSH
2390: LD_INT 5
2392: PPUSH
2393: CALL_OW 233
// if i [ 7 ] < 0 then
2397: LD_VAR 0 5
2401: PUSH
2402: LD_INT 7
2404: ARRAY
2405: PUSH
2406: LD_INT 0
2408: LESS
2409: IFFALSE 2429
// SetMark ( veh , i [ 7 ] ) ;
2411: LD_VAR 0 6
2415: PPUSH
2416: LD_VAR 0 5
2420: PUSH
2421: LD_INT 7
2423: ARRAY
2424: PPUSH
2425: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2429: LD_VAR 0 6
2433: PPUSH
2434: LD_INT 7
2436: PPUSH
2437: LD_INT 0
2439: PPUSH
2440: CALL 43981 0 3
2444: NOT
2445: IFFALSE 2478
// begin SetDir ( unit , 5 ) ;
2447: LD_VAR 0 1
2451: PPUSH
2452: LD_INT 5
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2459: LD_VAR 0 1
2463: PPUSH
2464: LD_INT 8
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// exit ;
2474: POP
2475: POP
2476: GO 2527
// end ; PlaceHumanInUnit ( unit , veh ) ;
2478: LD_VAR 0 1
2482: PPUSH
2483: LD_VAR 0 6
2487: PPUSH
2488: CALL_OW 52
// exit ;
2492: POP
2493: POP
2494: GO 2527
// end ;
2496: GO 2271
2498: POP
2499: POP
// SetDir ( unit , 5 ) ;
2500: LD_VAR 0 1
2504: PPUSH
2505: LD_INT 5
2507: PPUSH
2508: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2512: LD_VAR 0 1
2516: PPUSH
2517: LD_INT 8
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: CALL_OW 49
// end ; end_of_file
2527: LD_VAR 0 4
2531: RET
// export function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
2532: LD_INT 0
2534: PPUSH
2535: PPUSH
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
2543: PPUSH
// result := [ ] ;
2544: LD_ADDR_VAR 0 3
2548: PUSH
2549: EMPTY
2550: ST_TO_ADDR
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
2551: LD_ADDR_VAR 0 8
2555: PUSH
2556: LD_INT 6
2558: PUSH
2559: LD_INT 7
2561: PUSH
2562: LD_INT 8
2564: PUSH
2565: LD_INT 9
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_OWVAR 67
2578: ARRAY
2579: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
2580: LD_ADDR_VAR 0 9
2584: PUSH
2585: LD_INT 15
2587: PUSH
2588: LD_INT 17
2590: PUSH
2591: LD_INT 19
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: LIST
2598: PUSH
2599: LD_VAR 0 1
2603: ARRAY
2604: ST_TO_ADDR
// parking := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
2605: LD_ADDR_VAR 0 10
2609: PUSH
2610: LD_INT 15
2612: PUSH
2613: LD_INT 17
2615: PUSH
2616: LD_INT 19
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: LIST
2623: PUSH
2624: LD_VAR 0 1
2628: ARRAY
2629: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
2630: LD_ADDR_VAR 0 11
2634: PUSH
2635: LD_INT 5
2637: PUSH
2638: LD_INT 0
2640: PUSH
2641: LD_INT 2
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: PUSH
2649: LD_VAR 0 1
2653: ARRAY
2654: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_side , 0 ] ) then
2655: LD_VAR 0 9
2659: PPUSH
2660: LD_INT 22
2662: PUSH
2663: LD_INT 0
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PPUSH
2670: CALL_OW 70
2674: IFFALSE 2717
// for i in FilterUnitsInArea ( area , [ f_side , 0 ] ) do
2676: LD_ADDR_VAR 0 4
2680: PUSH
2681: LD_VAR 0 9
2685: PPUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 0
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PPUSH
2696: CALL_OW 70
2700: PUSH
2701: FOR_IN
2702: IFFALSE 2715
// RemoveUnit ( i ) ;
2704: LD_VAR 0 4
2708: PPUSH
2709: CALL_OW 64
2713: GO 2701
2715: POP
2716: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
2717: LD_VAR 0 9
2721: PPUSH
2722: LD_INT 3
2724: PUSH
2725: LD_INT 21
2727: PUSH
2728: LD_INT 1
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: LD_INT 22
2741: PUSH
2742: LD_INT 2
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PPUSH
2753: CALL_OW 70
2757: IFFALSE 2821
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
2759: LD_ADDR_VAR 0 4
2763: PUSH
2764: LD_VAR 0 9
2768: PPUSH
2769: LD_INT 3
2771: PUSH
2772: LD_INT 21
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 22
2788: PUSH
2789: LD_INT 2
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 70
2804: PUSH
2805: FOR_IN
2806: IFFALSE 2819
// KillUnit ( i ) ;
2808: LD_VAR 0 4
2812: PPUSH
2813: CALL_OW 66
2817: GO 2805
2819: POP
2820: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
2821: LD_VAR 0 9
2825: PPUSH
2826: LD_INT 21
2828: PUSH
2829: LD_INT 1
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: LD_INT 22
2838: PUSH
2839: LD_INT 2
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PPUSH
2850: CALL_OW 70
2854: IFFALSE 2917
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
2856: LD_ADDR_VAR 0 4
2860: PUSH
2861: LD_VAR 0 9
2865: PPUSH
2866: LD_INT 21
2868: PUSH
2869: LD_INT 1
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PUSH
2876: LD_INT 22
2878: PUSH
2879: LD_INT 2
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PPUSH
2890: CALL_OW 70
2894: PUSH
2895: FOR_IN
2896: IFFALSE 2915
// ComMoveXY ( i , 91 , 56 ) ;
2898: LD_VAR 0 4
2902: PPUSH
2903: LD_INT 91
2905: PPUSH
2906: LD_INT 56
2908: PPUSH
2909: CALL_OW 111
2913: GO 2895
2915: POP
2916: POP
// repeat wait ( 0 0$1 ) ;
2917: LD_INT 35
2919: PPUSH
2920: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
2924: LD_VAR 0 9
2928: PPUSH
2929: LD_INT 50
2931: PUSH
2932: EMPTY
2933: LIST
2934: PPUSH
2935: CALL_OW 70
2939: NOT
2940: IFFALSE 2917
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
2942: LD_ADDR_VAR 0 4
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_INT 3
2954: PUSH
2955: LD_INT 4
2957: PUSH
2958: LD_INT 5
2960: PUSH
2961: LD_INT 6
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: LD_OWVAR 67
2974: ARRAY
2975: PUSH
2976: LD_VAR 0 2
2980: PLUS
2981: PUSH
2982: FOR_TO
2983: IFFALSE 3272
// begin uc_side := 3 ;
2985: LD_ADDR_OWVAR 20
2989: PUSH
2990: LD_INT 3
2992: ST_TO_ADDR
// uc_nation := nation_russian ;
2993: LD_ADDR_OWVAR 21
2997: PUSH
2998: LD_INT 3
3000: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer ] [ rand ( 1 , 3 ) ] ;
3001: LD_ADDR_VAR 0 12
3005: PUSH
3006: LD_INT 1
3008: PUSH
3009: LD_INT 3
3011: PUSH
3012: LD_INT 3
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: PUSH
3020: LD_INT 1
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: CALL_OW 12
3030: ARRAY
3031: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
3032: LD_INT 22
3034: PUSH
3035: LD_INT 24
3037: PUSH
3038: LD_INT 23
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: LIST
3045: PUSH
3046: LD_VAR 0 4
3050: PUSH
3051: LD_INT 3
3053: MOD
3054: PUSH
3055: LD_INT 1
3057: PLUS
3058: ARRAY
3059: PPUSH
3060: LD_INT 3
3062: PUSH
3063: LD_INT 1
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: LD_INT 1
3072: PPUSH
3073: LD_INT 2
3075: PPUSH
3076: CALL_OW 12
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 12
3086: PPUSH
3087: LD_INT 45
3089: PUSH
3090: LD_INT 46
3092: PUSH
3093: LD_INT 43
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PUSH
3101: LD_VAR 0 4
3105: PUSH
3106: LD_INT 3
3108: MOD
3109: PUSH
3110: LD_INT 1
3112: PLUS
3113: ARRAY
3114: PPUSH
3115: LD_INT 100
3117: PPUSH
3118: CALL 12611 0 5
// veh := CreateVehicle ;
3122: LD_ADDR_VAR 0 7
3126: PUSH
3127: CALL_OW 45
3131: ST_TO_ADDR
// SetDir ( veh , dir ) ;
3132: LD_VAR 0 7
3136: PPUSH
3137: LD_VAR 0 11
3141: PPUSH
3142: CALL_OW 233
// PlaceUnitInArea ( veh , area , false ) ;
3146: LD_VAR 0 7
3150: PPUSH
3151: LD_VAR 0 9
3155: PPUSH
3156: LD_INT 0
3158: PPUSH
3159: CALL 43981 0 3
// if control = control_manual then
3163: LD_VAR 0 12
3167: PUSH
3168: LD_INT 1
3170: EQUAL
3171: IFFALSE 3229
// begin uc_side := 3 ;
3173: LD_ADDR_OWVAR 20
3177: PUSH
3178: LD_INT 3
3180: ST_TO_ADDR
// uc_nation := nation_russian ;
3181: LD_ADDR_OWVAR 21
3185: PUSH
3186: LD_INT 3
3188: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
3189: LD_INT 0
3191: PPUSH
3192: LD_VAR 0 8
3196: PPUSH
3197: CALL_OW 383
// PlaceHumanInUnit ( un , veh ) ;
3201: LD_VAR 0 6
3205: PPUSH
3206: LD_VAR 0 7
3210: PPUSH
3211: CALL_OW 52
// SetTag ( un , spot ) ;
3215: LD_VAR 0 6
3219: PPUSH
3220: LD_VAR 0 1
3224: PPUSH
3225: CALL_OW 109
// end ; ComMoveToArea ( veh , area ) ;
3229: LD_VAR 0 7
3233: PPUSH
3234: LD_VAR 0 9
3238: PPUSH
3239: CALL_OW 113
// wait ( 0 0$3 ) ;
3243: LD_INT 105
3245: PPUSH
3246: CALL_OW 67
// result := Join ( result , veh ) ;
3250: LD_ADDR_VAR 0 3
3254: PUSH
3255: LD_VAR 0 3
3259: PPUSH
3260: LD_VAR 0 7
3264: PPUSH
3265: CALL 45064 0 2
3269: ST_TO_ADDR
// end ;
3270: GO 2982
3272: POP
3273: POP
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] + strength do
3274: LD_ADDR_VAR 0 4
3278: PUSH
3279: DOUBLE
3280: LD_INT 1
3282: DEC
3283: ST_TO_ADDR
3284: LD_INT 1
3286: PUSH
3287: LD_INT 2
3289: PUSH
3290: LD_INT 2
3292: PUSH
3293: LD_INT 3
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_OWVAR 67
3306: ARRAY
3307: PUSH
3308: LD_VAR 0 2
3312: PLUS
3313: PUSH
3314: FOR_TO
3315: IFFALSE 3485
// begin uc_side := 3 ;
3317: LD_ADDR_OWVAR 20
3321: PUSH
3322: LD_INT 3
3324: ST_TO_ADDR
// uc_nation := nation_russian ;
3325: LD_ADDR_OWVAR 21
3329: PUSH
3330: LD_INT 3
3332: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3333: LD_INT 0
3335: PPUSH
3336: LD_VAR 0 8
3340: PPUSH
3341: CALL_OW 381
// un := CreateHuman ;
3345: LD_ADDR_VAR 0 6
3349: PUSH
3350: CALL_OW 44
3354: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
3355: LD_INT 30
3357: PUSH
3358: LD_INT 40
3360: PUSH
3361: LD_INT 50
3363: PUSH
3364: LD_INT 50
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: PUSH
3373: LD_OWVAR 67
3377: ARRAY
3378: PPUSH
3379: CALL_OW 13
3383: IFFALSE 3397
// SetClass ( un , class_bazooker ) ;
3385: LD_VAR 0 6
3389: PPUSH
3390: LD_INT 9
3392: PPUSH
3393: CALL_OW 336
// SetDir ( un , dir ) ;
3397: LD_VAR 0 6
3401: PPUSH
3402: LD_VAR 0 11
3406: PPUSH
3407: CALL_OW 233
// SetTag ( un , spot ) ;
3411: LD_VAR 0 6
3415: PPUSH
3416: LD_VAR 0 1
3420: PPUSH
3421: CALL_OW 109
// PlaceUnitInArea ( un , area , false ) ;
3425: LD_VAR 0 6
3429: PPUSH
3430: LD_VAR 0 9
3434: PPUSH
3435: LD_INT 0
3437: PPUSH
3438: CALL 43981 0 3
// ComMoveToArea ( un , parking ) ;
3442: LD_VAR 0 6
3446: PPUSH
3447: LD_VAR 0 10
3451: PPUSH
3452: CALL_OW 113
// wait ( 0 0$1 ) ;
3456: LD_INT 35
3458: PPUSH
3459: CALL_OW 67
// result := Join ( result , un ) ;
3463: LD_ADDR_VAR 0 3
3467: PUSH
3468: LD_VAR 0 3
3472: PPUSH
3473: LD_VAR 0 6
3477: PPUSH
3478: CALL 45064 0 2
3482: ST_TO_ADDR
// end ;
3483: GO 3314
3485: POP
3486: POP
// end ;
3487: LD_VAR 0 3
3491: RET
// every 0 0$10 do var i , attackers , timeToAttack , wave , strength , spot ;
3492: GO 3494
3494: DISABLE
3495: LD_INT 0
3497: PPUSH
3498: PPUSH
3499: PPUSH
3500: PPUSH
3501: PPUSH
3502: PPUSH
// begin timeToAttack := [ 9 9$00 , 8 8$30 , 8 8$20 , 8 8$10 ] [ Difficulty ] ;
3503: LD_ADDR_VAR 0 3
3507: PUSH
3508: LD_INT 18900
3510: PUSH
3511: LD_INT 17850
3513: PUSH
3514: LD_INT 17500
3516: PUSH
3517: LD_INT 17150
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: PUSH
3526: LD_OWVAR 67
3530: ARRAY
3531: ST_TO_ADDR
// attackers := [ ] ;
3532: LD_ADDR_VAR 0 2
3536: PUSH
3537: EMPTY
3538: ST_TO_ADDR
// wave := 0 ;
3539: LD_ADDR_VAR 0 4
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// strength := [ 0 , 1 , 1 , 1 ] [ Difficulty ] ;
3547: LD_ADDR_VAR 0 5
3551: PUSH
3552: LD_INT 0
3554: PUSH
3555: LD_INT 1
3557: PUSH
3558: LD_INT 1
3560: PUSH
3561: LD_INT 1
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: PUSH
3570: LD_OWVAR 67
3574: ARRAY
3575: ST_TO_ADDR
// repeat wait ( timeToAttack ) ;
3576: LD_VAR 0 3
3580: PPUSH
3581: CALL_OW 67
// wave := Inc ( wave ) ;
3585: LD_ADDR_VAR 0 4
3589: PUSH
3590: LD_VAR 0 4
3594: PPUSH
3595: CALL 46425 0 1
3599: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
3600: LD_ADDR_VAR 0 6
3604: PUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 3
3610: PPUSH
3611: CALL_OW 12
3615: ST_TO_ADDR
// if wave mod 3 = 0 then
3616: LD_VAR 0 4
3620: PUSH
3621: LD_INT 3
3623: MOD
3624: PUSH
3625: LD_INT 0
3627: EQUAL
3628: IFFALSE 3645
// strength := Inc ( strength ) ;
3630: LD_ADDR_VAR 0 5
3634: PUSH
3635: LD_VAR 0 5
3639: PPUSH
3640: CALL 46425 0 1
3644: ST_TO_ADDR
// attackers := PrepareRussianAttack ( spot , strength ) ;
3645: LD_ADDR_VAR 0 2
3649: PUSH
3650: LD_VAR 0 6
3654: PPUSH
3655: LD_VAR 0 5
3659: PPUSH
3660: CALL 2532 0 2
3664: ST_TO_ADDR
// timeToAttack := timeToAttack - 0 0$20 ;
3665: LD_ADDR_VAR 0 3
3669: PUSH
3670: LD_VAR 0 3
3674: PUSH
3675: LD_INT 700
3677: MINUS
3678: ST_TO_ADDR
// if timeToAttack < 4 4$00 then
3679: LD_VAR 0 3
3683: PUSH
3684: LD_INT 8400
3686: LESS
3687: IFFALSE 3697
// timeToAttack := 4 4$00 ;
3689: LD_ADDR_VAR 0 3
3693: PUSH
3694: LD_INT 8400
3696: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3697: LD_INT 35
3699: PPUSH
3700: CALL_OW 67
// for i in attackers do
3704: LD_ADDR_VAR 0 1
3708: PUSH
3709: LD_VAR 0 2
3713: PUSH
3714: FOR_IN
3715: IFFALSE 3775
// begin if not IsOk ( i ) then
3717: LD_VAR 0 1
3721: PPUSH
3722: CALL_OW 302
3726: NOT
3727: IFFALSE 3745
// attackers := attackers diff i ;
3729: LD_ADDR_VAR 0 2
3733: PUSH
3734: LD_VAR 0 2
3738: PUSH
3739: LD_VAR 0 1
3743: DIFF
3744: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle then
3745: LD_VAR 0 1
3749: PPUSH
3750: CALL_OW 247
3754: PUSH
3755: LD_INT 2
3757: EQUAL
3758: IFFALSE 3773
// AgressiveMove ( i , [ ] ) else
3760: LD_VAR 0 1
3764: PPUSH
3765: EMPTY
3766: PPUSH
3767: CALL 47668 0 2
3771: GO 3773
// begin end ; end ;
3773: GO 3714
3775: POP
3776: POP
// until not attackers ;
3777: LD_VAR 0 2
3781: NOT
3782: IFFALSE 3697
// until wave <= [ 6 , 7 , 7 , 8 ] [ Difficulty ] ;
3784: LD_VAR 0 4
3788: PUSH
3789: LD_INT 6
3791: PUSH
3792: LD_INT 7
3794: PUSH
3795: LD_INT 7
3797: PUSH
3798: LD_INT 8
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: PUSH
3807: LD_OWVAR 67
3811: ARRAY
3812: LESSEQUAL
3813: IFFALSE 3576
// ruDefeated := true ;
3815: LD_ADDR_EXP 10
3819: PUSH
3820: LD_INT 1
3822: ST_TO_ADDR
// end ; end_of_file
3823: PPOPN 6
3825: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
3826: LD_INT 0
3828: PPUSH
3829: PPUSH
3830: PPUSH
3831: PPUSH
3832: PPUSH
3833: PPUSH
3834: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
3835: LD_ADDR_VAR 0 2
3839: PUSH
3840: LD_STRING 09_env
3842: PPUSH
3843: EMPTY
3844: PPUSH
3845: CALL_OW 30
3849: ST_TO_ADDR
// if not tmp then
3850: LD_VAR 0 2
3854: NOT
3855: IFFALSE 3859
// exit ;
3857: GO 4223
// list := ListEnvironmentArea ( mapArea ) ;
3859: LD_ADDR_VAR 0 7
3863: PUSH
3864: LD_INT 4
3866: PPUSH
3867: CALL_OW 353
3871: ST_TO_ADDR
// if not list then
3872: LD_VAR 0 7
3876: NOT
3877: IFFALSE 3881
// exit ;
3879: GO 4223
// for i in list do
3881: LD_ADDR_VAR 0 3
3885: PUSH
3886: LD_VAR 0 7
3890: PUSH
3891: FOR_IN
3892: IFFALSE 4000
// begin exist := false ;
3894: LD_ADDR_VAR 0 6
3898: PUSH
3899: LD_INT 0
3901: ST_TO_ADDR
// for j in tmp do
3902: LD_ADDR_VAR 0 4
3906: PUSH
3907: LD_VAR 0 2
3911: PUSH
3912: FOR_IN
3913: IFFALSE 3967
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
3915: LD_VAR 0 3
3919: PUSH
3920: LD_INT 1
3922: ARRAY
3923: PUSH
3924: LD_VAR 0 4
3928: PUSH
3929: LD_INT 1
3931: ARRAY
3932: EQUAL
3933: PUSH
3934: LD_VAR 0 3
3938: PUSH
3939: LD_INT 2
3941: ARRAY
3942: PUSH
3943: LD_VAR 0 4
3947: PUSH
3948: LD_INT 2
3950: ARRAY
3951: EQUAL
3952: AND
3953: IFFALSE 3965
// begin exist := true ;
3955: LD_ADDR_VAR 0 6
3959: PUSH
3960: LD_INT 1
3962: ST_TO_ADDR
// break ;
3963: GO 3967
// end ;
3965: GO 3912
3967: POP
3968: POP
// if not exist then
3969: LD_VAR 0 6
3973: NOT
3974: IFFALSE 3998
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
3976: LD_VAR 0 3
3980: PUSH
3981: LD_INT 1
3983: ARRAY
3984: PPUSH
3985: LD_VAR 0 3
3989: PUSH
3990: LD_INT 2
3992: ARRAY
3993: PPUSH
3994: CALL_OW 347
// end ;
3998: GO 3891
4000: POP
4001: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
4002: LD_ADDR_VAR 0 2
4006: PUSH
4007: LD_STRING 09_animals
4009: PPUSH
4010: EMPTY
4011: PPUSH
4012: CALL_OW 30
4016: ST_TO_ADDR
// if not tmp then
4017: LD_VAR 0 2
4021: NOT
4022: IFFALSE 4026
// exit ;
4024: GO 4223
// InitHc_All ( ) ;
4026: CALL_OW 584
// for i in tmp do
4030: LD_ADDR_VAR 0 3
4034: PUSH
4035: LD_VAR 0 2
4039: PUSH
4040: FOR_IN
4041: IFFALSE 4158
// begin uc_side := 0 ;
4043: LD_ADDR_OWVAR 20
4047: PUSH
4048: LD_INT 0
4050: ST_TO_ADDR
// uc_nation := nation_nature ;
4051: LD_ADDR_OWVAR 21
4055: PUSH
4056: LD_INT 0
4058: ST_TO_ADDR
// hc_gallery :=  ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING 
4066: ST_TO_ADDR
// hc_name :=  ;
4067: LD_ADDR_OWVAR 26
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// hc_class := i [ 1 ] ;
4075: LD_ADDR_OWVAR 28
4079: PUSH
4080: LD_VAR 0 3
4084: PUSH
4085: LD_INT 1
4087: ARRAY
4088: ST_TO_ADDR
// un := CreateHuman ;
4089: LD_ADDR_VAR 0 5
4093: PUSH
4094: CALL_OW 44
4098: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
4099: LD_VAR 0 5
4103: PPUSH
4104: LD_VAR 0 3
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: PPUSH
4113: LD_VAR 0 3
4117: PUSH
4118: LD_INT 3
4120: ARRAY
4121: PPUSH
4122: LD_VAR 0 3
4126: PUSH
4127: LD_INT 4
4129: ARRAY
4130: PPUSH
4131: LD_INT 0
4133: PPUSH
4134: CALL 47204 0 5
// SetLives ( un , i [ 5 ] ) ;
4138: LD_VAR 0 5
4142: PPUSH
4143: LD_VAR 0 3
4147: PUSH
4148: LD_INT 5
4150: ARRAY
4151: PPUSH
4152: CALL_OW 234
// end ;
4156: GO 4040
4158: POP
4159: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
4160: LD_ADDR_VAR 0 3
4164: PUSH
4165: DOUBLE
4166: LD_INT 1
4168: DEC
4169: ST_TO_ADDR
4170: LD_INT 6
4172: PUSH
4173: LD_INT 5
4175: PUSH
4176: LD_INT 4
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: PUSH
4188: LD_OWVAR 67
4192: ARRAY
4193: PUSH
4194: FOR_TO
4195: IFFALSE 4221
// begin PrepareApeman ( 5 ) ;
4197: LD_INT 5
4199: PPUSH
4200: CALL 41344 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
4204: CALL_OW 44
4208: PPUSH
4209: LD_INT 5
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: CALL_OW 49
// end ;
4219: GO 4194
4221: POP
4222: POP
// end ;
4223: LD_VAR 0 1
4227: RET
// export function CreateDeposits ; var i , oil , sib ; begin
4228: LD_INT 0
4230: PPUSH
4231: PPUSH
4232: PPUSH
4233: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
4234: LD_ADDR_VAR 0 3
4238: PUSH
4239: LD_INT 91
4241: PUSH
4242: LD_INT 13
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: LD_INT 52
4251: PUSH
4252: LD_INT 23
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: LD_INT 115
4261: PUSH
4262: LD_INT 150
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: LIST
4273: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
4274: LD_ADDR_VAR 0 4
4278: PUSH
4279: LD_INT 82
4281: PUSH
4282: LD_INT 42
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: PUSH
4289: LD_INT 128
4291: PUSH
4292: LD_INT 132
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: ST_TO_ADDR
// for i in oil do
4303: LD_ADDR_VAR 0 2
4307: PUSH
4308: LD_VAR 0 3
4312: PUSH
4313: FOR_IN
4314: IFFALSE 4368
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
4316: LD_VAR 0 2
4320: PUSH
4321: LD_INT 1
4323: ARRAY
4324: PPUSH
4325: LD_VAR 0 2
4329: PUSH
4330: LD_INT 2
4332: ARRAY
4333: PPUSH
4334: LD_INT 2
4336: PPUSH
4337: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
4341: LD_VAR 0 2
4345: PUSH
4346: LD_INT 1
4348: ARRAY
4349: PPUSH
4350: LD_VAR 0 2
4354: PUSH
4355: LD_INT 2
4357: ARRAY
4358: PPUSH
4359: LD_INT 2
4361: PPUSH
4362: CALL_OW 441
// end ;
4366: GO 4313
4368: POP
4369: POP
// for i in sib do
4370: LD_ADDR_VAR 0 2
4374: PUSH
4375: LD_VAR 0 4
4379: PUSH
4380: FOR_IN
4381: IFFALSE 4435
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
4383: LD_VAR 0 2
4387: PUSH
4388: LD_INT 1
4390: ARRAY
4391: PPUSH
4392: LD_VAR 0 2
4396: PUSH
4397: LD_INT 2
4399: ARRAY
4400: PPUSH
4401: LD_INT 3
4403: PPUSH
4404: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
4408: LD_VAR 0 2
4412: PUSH
4413: LD_INT 1
4415: ARRAY
4416: PPUSH
4417: LD_VAR 0 2
4421: PUSH
4422: LD_INT 2
4424: ARRAY
4425: PPUSH
4426: LD_INT 2
4428: PPUSH
4429: CALL_OW 441
// end ;
4433: GO 4380
4435: POP
4436: POP
// end ;
4437: LD_VAR 0 1
4441: RET
// export function LoadCam ; var i , tmp ; begin
4442: LD_INT 0
4444: PPUSH
4445: PPUSH
4446: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
4447: LD_ADDR_VAR 0 3
4451: PUSH
4452: LD_STRING 09_cameras
4454: PPUSH
4455: EMPTY
4456: PPUSH
4457: CALL_OW 30
4461: ST_TO_ADDR
// if not tmp then
4462: LD_VAR 0 3
4466: NOT
4467: IFFALSE 4471
// exit ;
4469: GO 4513
// for i in tmp do
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_VAR 0 3
4480: PUSH
4481: FOR_IN
4482: IFFALSE 4511
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
4484: LD_VAR 0 2
4488: PUSH
4489: LD_INT 1
4491: ARRAY
4492: PPUSH
4493: LD_VAR 0 2
4497: PUSH
4498: LD_INT 2
4500: ARRAY
4501: PPUSH
4502: LD_INT 2
4504: PPUSH
4505: CALL_OW 244
4509: GO 4481
4511: POP
4512: POP
// end ;
4513: LD_VAR 0 1
4517: RET
// export function LoadTech ; var i , tmp ; begin
4518: LD_INT 0
4520: PPUSH
4521: PPUSH
4522: PPUSH
// tmp := LoadVariable ( 09_tech , [ ] ) ;
4523: LD_ADDR_VAR 0 3
4527: PUSH
4528: LD_STRING 09_tech
4530: PPUSH
4531: EMPTY
4532: PPUSH
4533: CALL_OW 30
4537: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: DOUBLE
4544: LD_INT 1
4546: DEC
4547: ST_TO_ADDR
4548: LD_VAR 0 3
4552: PPUSH
4553: CALL 9698 0 1
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4586
// SetTech ( i , 2 , tmp [ i ] ) ;
4561: LD_VAR 0 2
4565: PPUSH
4566: LD_INT 2
4568: PPUSH
4569: LD_VAR 0 3
4573: PUSH
4574: LD_VAR 0 2
4578: ARRAY
4579: PPUSH
4580: CALL_OW 322
4584: GO 4558
4586: POP
4587: POP
// end ;
4588: LD_VAR 0 1
4592: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
4593: LD_INT 0
4595: PPUSH
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
4600: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
4601: LD_ADDR_VAR 0 3
4605: PUSH
4606: LD_STRING 09_buildings
4608: PPUSH
4609: EMPTY
4610: PPUSH
4611: CALL_OW 30
4615: ST_TO_ADDR
// for i in tmp do
4616: LD_ADDR_VAR 0 2
4620: PUSH
4621: LD_VAR 0 3
4625: PUSH
4626: FOR_IN
4627: IFFALSE 4909
// begin uc_side := 2 ;
4629: LD_ADDR_OWVAR 20
4633: PUSH
4634: LD_INT 2
4636: ST_TO_ADDR
// uc_nation := nation_arabian ;
4637: LD_ADDR_OWVAR 21
4641: PUSH
4642: LD_INT 2
4644: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4645: LD_ADDR_OWVAR 42
4649: PUSH
4650: LD_VAR 0 2
4654: PUSH
4655: LD_INT 1
4657: ARRAY
4658: ST_TO_ADDR
// bc_level := i [ 5 ] ;
4659: LD_ADDR_OWVAR 43
4663: PUSH
4664: LD_VAR 0 2
4668: PUSH
4669: LD_INT 5
4671: ARRAY
4672: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
4673: LD_ADDR_OWVAR 44
4677: PUSH
4678: LD_INT 9
4680: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
4681: LD_ADDR_OWVAR 45
4685: PUSH
4686: LD_INT 9
4688: ST_TO_ADDR
// if i [ 6 ] then
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 6
4696: ARRAY
4697: IFFALSE 4737
// begin bc_kind1 := i [ 6 ] ;
4699: LD_ADDR_OWVAR 44
4703: PUSH
4704: LD_VAR 0 2
4708: PUSH
4709: LD_INT 6
4711: ARRAY
4712: ST_TO_ADDR
// if i [ 7 ] then
4713: LD_VAR 0 2
4717: PUSH
4718: LD_INT 7
4720: ARRAY
4721: IFFALSE 4737
// bc_kind2 := i [ 7 ] ;
4723: LD_ADDR_OWVAR 45
4727: PUSH
4728: LD_VAR 0 2
4732: PUSH
4733: LD_INT 7
4735: ARRAY
4736: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
4737: LD_ADDR_VAR 0 4
4741: PUSH
4742: LD_VAR 0 2
4746: PUSH
4747: LD_INT 2
4749: ARRAY
4750: PPUSH
4751: LD_VAR 0 2
4755: PUSH
4756: LD_INT 3
4758: ARRAY
4759: PPUSH
4760: LD_VAR 0 2
4764: PUSH
4765: LD_INT 4
4767: ARRAY
4768: PPUSH
4769: CALL_OW 47
4773: ST_TO_ADDR
// if i [ 8 ] then
4774: LD_VAR 0 2
4778: PUSH
4779: LD_INT 8
4781: ARRAY
4782: IFFALSE 4802
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
4784: LD_VAR 0 4
4788: PPUSH
4789: LD_VAR 0 2
4793: PUSH
4794: LD_INT 8
4796: ARRAY
4797: PPUSH
4798: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 1
4809: ARRAY
4810: PUSH
4811: LD_INT 0
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: IN
4821: IFFALSE 4907
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
4823: LD_ADDR_VAR 0 6
4827: PUSH
4828: LD_STRING 09_materials
4830: PPUSH
4831: LD_INT 100
4833: PUSH
4834: LD_INT 50
4836: PUSH
4837: LD_INT 30
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: LIST
4844: PUSH
4845: EMPTY
4846: LIST
4847: PPUSH
4848: CALL_OW 30
4852: ST_TO_ADDR
// for j := 1 to 3 do
4853: LD_ADDR_VAR 0 5
4857: PUSH
4858: DOUBLE
4859: LD_INT 1
4861: DEC
4862: ST_TO_ADDR
4863: LD_INT 3
4865: PUSH
4866: FOR_TO
4867: IFFALSE 4905
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] ) ;
4869: LD_VAR 0 4
4873: PPUSH
4874: CALL_OW 274
4878: PPUSH
4879: LD_VAR 0 5
4883: PPUSH
4884: LD_VAR 0 6
4888: PUSH
4889: LD_INT 1
4891: ARRAY
4892: PUSH
4893: LD_VAR 0 5
4897: ARRAY
4898: PPUSH
4899: CALL_OW 277
4903: GO 4866
4905: POP
4906: POP
// end ; end ;
4907: GO 4626
4909: POP
4910: POP
// end ; end_of_file
4911: LD_VAR 0 1
4915: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4916: LD_VAR 0 1
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL 65202 0 2
// if GetControl ( vehicle ) = control_apeman then
4930: LD_VAR 0 1
4934: PPUSH
4935: CALL_OW 263
4939: PUSH
4940: LD_INT 5
4942: EQUAL
4943: IFFALSE 4953
// apeDriver := true ;
4945: LD_ADDR_EXP 8
4949: PUSH
4950: LD_INT 1
4952: ST_TO_ADDR
// end ;
4953: PPOPN 2
4955: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area ;
4956: LD_INT 0
4958: PPUSH
4959: PPUSH
// begin if GetSide ( driver ) = 3 then
4960: LD_VAR 0 1
4964: PPUSH
4965: CALL_OW 255
4969: PUSH
4970: LD_INT 3
4972: EQUAL
4973: IFFALSE 4990
// begin tag := GetTag ( driver ) ;
4975: LD_ADDR_VAR 0 5
4979: PUSH
4980: LD_VAR 0 1
4984: PPUSH
4985: CALL_OW 110
4989: ST_TO_ADDR
// end ; end ;
4990: PPOPN 6
4992: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
4993: LD_VAR 0 3
4997: PUSH
4998: LD_INT 17
5000: EQUAL
5001: IFFALSE 5011
// kamikazeTrained := true ;
5003: LD_ADDR_EXP 6
5007: PUSH
5008: LD_INT 1
5010: ST_TO_ADDR
// end ;
5011: PPOPN 3
5013: END
// on UnitDestroyed ( un ) do begin if un = Schulz then
5014: LD_VAR 0 1
5018: PUSH
5019: LD_EXP 22
5023: EQUAL
5024: IFFALSE 5033
// YouLost ( Schulz ) ;
5026: LD_STRING Schulz
5028: PPUSH
5029: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
5033: LD_VAR 0 1
5037: PUSH
5038: LD_EXP 11
5042: EQUAL
5043: PUSH
5044: LD_VAR 0 1
5048: PPUSH
5049: CALL_OW 255
5053: PUSH
5054: LD_INT 2
5056: EQUAL
5057: AND
5058: IFFALSE 5067
// YouLost ( Heike ) ;
5060: LD_STRING Heike
5062: PPUSH
5063: CALL_OW 104
// end ; end_of_file
5067: PPOPN 1
5069: END
// export function Action ; begin
5070: LD_INT 0
5072: PPUSH
// InGameOn ;
5073: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
5077: LD_INT 1
5079: PPUSH
5080: LD_INT 1
5082: PPUSH
5083: LD_INT 2
5085: PPUSH
5086: LD_INT 32963
5088: NEG
5089: PPUSH
5090: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
5094: LD_INT 1
5096: PPUSH
5097: LD_INT 1
5099: PPUSH
5100: LD_INT 2
5102: PPUSH
5103: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
5107: LD_INT 173
5109: PPUSH
5110: LD_INT 149
5112: PPUSH
5113: CALL_OW 86
// wait ( 0 0$2 ) ;
5117: LD_INT 70
5119: PPUSH
5120: CALL_OW 67
// InGameOff ;
5124: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
5128: LD_STRING M6
5130: PPUSH
5131: CALL_OW 337
// SaveForQuickRestart ;
5135: CALL_OW 22
// end ;
5139: LD_VAR 0 1
5143: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
5144: LD_EXP 5
5148: PUSH
5149: LD_EXP 31
5153: PPUSH
5154: CALL_OW 302
5158: AND
5159: PUSH
5160: LD_EXP 11
5164: PPUSH
5165: CALL_OW 302
5169: AND
5170: PUSH
5171: LD_EXP 11
5175: PPUSH
5176: LD_EXP 31
5180: PPUSH
5181: CALL_OW 296
5185: PUSH
5186: LD_INT 9
5188: LESS
5189: PUSH
5190: LD_INT 22
5192: PUSH
5193: LD_INT 2
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: LD_INT 91
5202: PUSH
5203: LD_EXP 11
5207: PUSH
5208: LD_INT 7
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 21
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: PPUSH
5231: CALL_OW 69
5235: OR
5236: AND
5237: IFFALSE 5391
5239: GO 5241
5241: DISABLE
// begin ComExit ( Rolf ) ;
5242: LD_EXP 31
5246: PPUSH
5247: CALL 45462 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
5251: LD_EXP 31
5255: PPUSH
5256: LD_EXP 11
5260: PPUSH
5261: CALL_OW 172
// InGameOn ;
5265: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
5269: LD_EXP 11
5273: PPUSH
5274: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
5278: LD_EXP 31
5282: PPUSH
5283: LD_STRING DRf-Reunion-1
5285: PPUSH
5286: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
5290: LD_EXP 31
5294: PPUSH
5295: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
5299: LD_EXP 11
5303: PPUSH
5304: LD_EXP 31
5308: PPUSH
5309: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
5313: LD_EXP 31
5317: PPUSH
5318: LD_EXP 11
5322: PPUSH
5323: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
5327: LD_EXP 11
5331: PPUSH
5332: LD_STRING DH-Reunion-2
5334: PPUSH
5335: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
5339: LD_EXP 31
5343: PPUSH
5344: LD_STRING DRf-Reunion-3
5346: PPUSH
5347: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
5351: LD_EXP 11
5355: PPUSH
5356: LD_STRING DH-Reunion-4
5358: PPUSH
5359: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
5363: LD_EXP 31
5367: PPUSH
5368: LD_STRING DRf-Reunion-5
5370: PPUSH
5371: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
5375: LD_EXP 11
5379: PPUSH
5380: LD_STRING DH-Reunion-6
5382: PPUSH
5383: CALL_OW 88
// InGameOff ;
5387: CALL_OW 9
// end ;
5391: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
5392: LD_EXP 5
5396: NOT
5397: PUSH
5398: LD_INT 22
5400: PUSH
5401: LD_INT 2
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PUSH
5408: LD_INT 91
5410: PUSH
5411: LD_EXP 22
5415: PUSH
5416: LD_INT 10
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: LD_INT 21
5426: PUSH
5427: LD_INT 3
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: LIST
5438: PPUSH
5439: CALL_OW 69
5443: AND
5444: IFFALSE 6217
5446: GO 5448
5448: DISABLE
// begin InGameOn ;
5449: CALL_OW 8
// ComExit ( Schulz ) ;
5453: LD_EXP 22
5457: PPUSH
5458: CALL 45462 0 1
// CenterNowOnUnits ( Schulz ) ;
5462: LD_EXP 22
5466: PPUSH
5467: CALL_OW 87
// wait ( 0 0$0.3 ) ;
5471: LD_INT 10
5473: PPUSH
5474: CALL_OW 67
// DialogueOn ;
5478: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
5482: LD_EXP 22
5486: PPUSH
5487: LD_STRING DL-Def-1
5489: PPUSH
5490: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
5494: LD_EXP 22
5498: PPUSH
5499: LD_STRING DL-Def-2
5501: PPUSH
5502: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
5506: LD_EXP 22
5510: PPUSH
5511: LD_STRING DL-Def-3
5513: PPUSH
5514: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
5518: LD_EXP 23
5522: PPUSH
5523: CALL_OW 302
5527: PUSH
5528: LD_EXP 21
5532: PPUSH
5533: CALL_OW 302
5537: AND
5538: IFFALSE 5885
// begin Say ( Basim , DBs-Def-4 ) ;
5540: LD_EXP 23
5544: PPUSH
5545: LD_STRING DBs-Def-4
5547: PPUSH
5548: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
5552: LD_EXP 23
5556: PPUSH
5557: LD_STRING DBs-Def-5
5559: PPUSH
5560: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
5564: LD_EXP 21
5568: PPUSH
5569: LD_STRING DA-Def-6
5571: PPUSH
5572: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
5576: LD_EXP 23
5580: PPUSH
5581: LD_STRING DBs-Def-7
5583: PPUSH
5584: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
5588: LD_EXP 21
5592: PPUSH
5593: LD_STRING DA-Def-8
5595: PPUSH
5596: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
5600: LD_EXP 21
5604: PPUSH
5605: LD_STRING DA-Def-9
5607: PPUSH
5608: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
5612: LD_EXP 23
5616: PPUSH
5617: LD_STRING DBs-Def-10
5619: PPUSH
5620: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
5624: LD_EXP 21
5628: PPUSH
5629: LD_STRING DA-Def-11
5631: PPUSH
5632: CALL_OW 88
// if Query ( QTech ) = 1 then
5636: LD_STRING QTech
5638: PPUSH
5639: CALL_OW 97
5643: PUSH
5644: LD_INT 1
5646: EQUAL
5647: IFFALSE 5755
// begin Say ( Schulz , DL-Tech-1 ) ;
5649: LD_EXP 22
5653: PPUSH
5654: LD_STRING DL-Tech-1
5656: PPUSH
5657: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
5661: LD_EXP 22
5665: PPUSH
5666: LD_STRING DL-Tech-2
5668: PPUSH
5669: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
5673: LD_EXP 21
5677: PPUSH
5678: LD_STRING DA-Tech-3
5680: PPUSH
5681: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
5685: LD_EXP 16
5689: PPUSH
5690: LD_STRING DK-Tech-4
5692: PPUSH
5693: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
5697: LD_EXP 16
5701: PPUSH
5702: LD_STRING DK-Tech-5
5704: PPUSH
5705: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
5709: LD_EXP 23
5713: PPUSH
5714: LD_STRING DBs-Tech-6
5716: PPUSH
5717: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
5721: LD_EXP 16
5725: PPUSH
5726: LD_STRING DK-Tech-7
5728: PPUSH
5729: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
5733: LD_INT 3
5735: PPUSH
5736: LD_INT 2
5738: PPUSH
5739: LD_INT 1
5741: PPUSH
5742: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
5746: LD_STRING M7a
5748: PPUSH
5749: CALL_OW 604
// end else
5753: GO 5883
// begin Say ( Schulz , DL-Tech-a-1 ) ;
5755: LD_EXP 22
5759: PPUSH
5760: LD_STRING DL-Tech-a-1
5762: PPUSH
5763: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
5767: LD_EXP 22
5771: PPUSH
5772: LD_STRING DL-Tech-a-2
5774: PPUSH
5775: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
5779: LD_EXP 23
5783: PPUSH
5784: LD_STRING DBs-Tech-a-3
5786: PPUSH
5787: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
5791: LD_EXP 16
5795: PPUSH
5796: LD_STRING DK-Tech-a-4
5798: PPUSH
5799: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
5803: LD_EXP 16
5807: PPUSH
5808: LD_STRING DK-Tech-a-5
5810: PPUSH
5811: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
5815: LD_EXP 21
5819: PPUSH
5820: LD_STRING DA-Tech-a-6
5822: PPUSH
5823: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
5827: LD_EXP 21
5831: PPUSH
5832: LD_STRING DA-Tech-a-7
5834: PPUSH
5835: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
5839: LD_EXP 22
5843: PPUSH
5844: LD_STRING DL-Tech-a-8
5846: PPUSH
5847: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
5851: LD_EXP 21
5855: PPUSH
5856: LD_STRING DA-Tech-a-9
5858: PPUSH
5859: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
5863: LD_INT 4
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: LD_INT 1
5871: PPUSH
5872: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
5876: LD_STRING M7b
5878: PPUSH
5879: CALL_OW 604
// end ; end else
5883: GO 5933
// if IsOk ( Basim ) then
5885: LD_EXP 23
5889: PPUSH
5890: CALL_OW 302
5894: IFFALSE 5933
// begin Say ( Basim , DBs-Def-4 ) ;
5896: LD_EXP 23
5900: PPUSH
5901: LD_STRING DBs-Def-4
5903: PPUSH
5904: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
5908: LD_EXP 23
5912: PPUSH
5913: LD_STRING DBs-Def-5
5915: PPUSH
5916: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
5920: LD_INT 4
5922: PPUSH
5923: LD_INT 2
5925: PPUSH
5926: LD_INT 1
5928: PPUSH
5929: CALL_OW 322
// end ; DialogueOff ;
5933: CALL_OW 7
// InGameOff ;
5937: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
5941: LD_STRING M7
5943: PPUSH
5944: CALL_OW 337
// playerInBase := true ;
5948: LD_ADDR_EXP 5
5952: PUSH
5953: LD_INT 1
5955: ST_TO_ADDR
// wait ( 0 0$30 ) ;
5956: LD_INT 1050
5958: PPUSH
5959: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5963: LD_INT 35
5965: PPUSH
5966: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_constructed ] , [ f_btype , b_siberite_mine ] ] ) ;
5970: LD_INT 22
5972: PUSH
5973: LD_INT 2
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: PUSH
5980: LD_INT 50
5982: PUSH
5983: EMPTY
5984: LIST
5985: PUSH
5986: LD_INT 57
5988: PUSH
5989: EMPTY
5990: LIST
5991: PUSH
5992: LD_INT 30
5994: PUSH
5995: LD_INT 30
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: PPUSH
6008: CALL_OW 69
6012: IFFALSE 5963
// if IsOk ( Kurt ) then
6014: LD_EXP 20
6018: PPUSH
6019: CALL_OW 302
6023: IFFALSE 6204
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_constructed ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
6025: LD_INT 22
6027: PUSH
6028: LD_INT 2
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 50
6037: PUSH
6038: EMPTY
6039: LIST
6040: PUSH
6041: LD_INT 57
6043: PUSH
6044: EMPTY
6045: LIST
6046: PUSH
6047: LD_INT 30
6049: PUSH
6050: LD_INT 30
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: PPUSH
6063: CALL_OW 69
6067: PUSH
6068: LD_INT 1
6070: ARRAY
6071: PPUSH
6072: CALL_OW 87
// DialogueOn ;
6076: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
6080: LD_EXP 20
6084: PPUSH
6085: LD_STRING DKs-Med-1
6087: PPUSH
6088: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
6092: LD_EXP 20
6096: PPUSH
6097: LD_STRING DKs-Med-2
6099: PPUSH
6100: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
6104: LD_EXP 22
6108: PPUSH
6109: LD_STRING DL-Med-3
6111: PPUSH
6112: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
6116: LD_EXP 22
6120: PPUSH
6121: LD_STRING DL-Med-4
6123: PPUSH
6124: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
6128: LD_EXP 20
6132: PPUSH
6133: LD_STRING DKs-Med-5
6135: PPUSH
6136: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
6140: LD_EXP 20
6144: PPUSH
6145: LD_STRING DKs-Med-6
6147: PPUSH
6148: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
6152: LD_EXP 20
6156: PPUSH
6157: LD_STRING DKs-Med-7
6159: PPUSH
6160: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
6164: LD_EXP 20
6168: PPUSH
6169: LD_STRING DKs-Med-8
6171: PPUSH
6172: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
6176: LD_EXP 22
6180: PPUSH
6181: LD_STRING DL-Med-9
6183: PPUSH
6184: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
6188: LD_EXP 22
6192: PPUSH
6193: LD_STRING DL-Med-10
6195: PPUSH
6196: CALL_OW 88
// DialogueOff ;
6200: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
6204: LD_STRING M8-
6206: PUSH
6207: LD_OWVAR 67
6211: STR
6212: PPUSH
6213: CALL_OW 337
// end ;
6217: END
// every 0 0$1 trigger playerInBase do
6218: LD_EXP 5
6222: IFFALSE 6242
6224: GO 6226
6226: DISABLE
// begin enable ;
6227: ENABLE
// missionTime := missionTime + 0 0$1 ;
6228: LD_ADDR_EXP 9
6232: PUSH
6233: LD_EXP 9
6237: PUSH
6238: LD_INT 35
6240: PLUS
6241: ST_TO_ADDR
// end ;
6242: END
// every 0 0$2 trigger playerInBase and apeDriver do
6243: LD_EXP 5
6247: PUSH
6248: LD_EXP 8
6252: AND
6253: IFFALSE 6650
6255: GO 6257
6257: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
6258: LD_STRING M7a_out
6260: PPUSH
6261: CALL_OW 337
// wait ( 0 0$2 ) ;
6265: LD_INT 70
6267: PPUSH
6268: CALL_OW 67
// DialogueOn ;
6272: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
6276: LD_INT 22
6278: PUSH
6279: LD_INT 2
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 33
6288: PUSH
6289: LD_INT 5
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PPUSH
6300: CALL_OW 69
6304: PUSH
6305: LD_INT 1
6307: ARRAY
6308: PPUSH
6309: CALL_OW 87
// if IsOk ( Mia ) then
6313: LD_EXP 25
6317: PPUSH
6318: CALL_OW 302
6322: IFFALSE 6348
// begin Say ( Mia , DMm-Apedrive-1 ) ;
6324: LD_EXP 25
6328: PPUSH
6329: LD_STRING DMm-Apedrive-1
6331: PPUSH
6332: CALL_OW 88
// Say ( Mia , DMm-Apedrive-2 ) ;
6336: LD_EXP 25
6340: PPUSH
6341: LD_STRING DMm-Apedrive-2
6343: PPUSH
6344: CALL_OW 88
// end ; if IsOk ( Jenna ) then
6348: LD_EXP 27
6352: PPUSH
6353: CALL_OW 302
6357: IFFALSE 6646
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
6359: LD_EXP 27
6363: PPUSH
6364: LD_STRING DJm-Apedrive-3
6366: PPUSH
6367: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
6371: LD_EXP 27
6375: PPUSH
6376: LD_STRING DJm-Apedrive-4
6378: PPUSH
6379: CALL_OW 88
// if IsOk ( Basim ) then
6383: LD_EXP 23
6387: PPUSH
6388: CALL_OW 302
6392: IFFALSE 6646
// begin Say ( Basim , DBs-Apedrive-5 ) ;
6394: LD_EXP 23
6398: PPUSH
6399: LD_STRING DBs-Apedrive-5
6401: PPUSH
6402: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
6406: LD_EXP 23
6410: PPUSH
6411: LD_STRING DBs-Apedrive-6
6413: PPUSH
6414: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
6418: LD_EXP 27
6422: PPUSH
6423: LD_STRING DJm-Apedrive-7
6425: PPUSH
6426: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
6430: LD_EXP 23
6434: PPUSH
6435: LD_STRING DBs-Apedrive-8
6437: PPUSH
6438: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
6442: LD_EXP 27
6446: PPUSH
6447: LD_STRING DJm-Apedrive-9
6449: PPUSH
6450: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
6454: LD_EXP 23
6458: PPUSH
6459: LD_STRING DBs-Apedrive-10
6461: PPUSH
6462: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
6466: LD_EXP 27
6470: PPUSH
6471: LD_STRING DJm-Apedrive-11
6473: PPUSH
6474: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
6478: LD_EXP 16
6482: PPUSH
6483: LD_STRING DK-Apedrive-12
6485: PPUSH
6486: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
6490: LD_EXP 27
6494: PPUSH
6495: LD_STRING DJm-Apedrive-13
6497: PPUSH
6498: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
6502: LD_EXP 27
6506: PPUSH
6507: LD_STRING DJm-Apedrive-14
6509: PPUSH
6510: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
6514: LD_EXP 27
6518: PPUSH
6519: LD_STRING DJm-Apedrive-15
6521: PPUSH
6522: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
6526: LD_EXP 27
6530: PPUSH
6531: LD_STRING DJm-Apedrive-16
6533: PPUSH
6534: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
6538: LD_EXP 25
6542: PPUSH
6543: LD_STRING DMm-Apedrive-17
6545: PPUSH
6546: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
6550: LD_EXP 25
6554: PPUSH
6555: LD_STRING DMm-Apedrive-18
6557: PPUSH
6558: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
6562: LD_EXP 25
6566: PPUSH
6567: LD_STRING DMm-Apedrive-19
6569: PPUSH
6570: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
6574: LD_EXP 25
6578: PPUSH
6579: LD_STRING DMm-Apedrive-20
6581: PPUSH
6582: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_STRING DK-Apedrive-21
6593: PPUSH
6594: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
6598: LD_EXP 16
6602: PPUSH
6603: LD_STRING DK-Apedrive-22
6605: PPUSH
6606: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
6610: LD_EXP 11
6614: PPUSH
6615: LD_STRING DH-Apedrive-23
6617: PPUSH
6618: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
6622: LD_EXP 24
6626: PPUSH
6627: LD_STRING DLt-Apedrive-24
6629: PPUSH
6630: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
6634: LD_EXP 24
6638: PPUSH
6639: LD_STRING DLt-Apedrive-25
6641: PPUSH
6642: CALL_OW 88
// end ; end ; DialogueOff ;
6646: CALL_OW 7
// end ;
6650: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
6651: LD_EXP 5
6655: PUSH
6656: LD_EXP 6
6660: AND
6661: IFFALSE 6673
6663: GO 6665
6665: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
6666: LD_STRING M7b_out
6668: PPUSH
6669: CALL_OW 337
6673: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
6674: LD_EXP 5
6678: PUSH
6679: LD_INT 22
6681: PUSH
6682: LD_INT 2
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: PUSH
6689: LD_INT 30
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PUSH
6699: LD_INT 3
6701: PUSH
6702: LD_INT 58
6704: PUSH
6705: EMPTY
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PPUSH
6717: CALL_OW 69
6721: AND
6722: PUSH
6723: LD_EXP 11
6727: PPUSH
6728: CALL_OW 302
6732: AND
6733: PUSH
6734: LD_EXP 22
6738: PPUSH
6739: CALL_OW 302
6743: AND
6744: IFFALSE 6917
6746: GO 6748
6748: DISABLE
// begin DialogueOn ;
6749: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
6753: LD_EXP 22
6757: PPUSH
6758: LD_STRING DL-Mort-1
6760: PPUSH
6761: CALL_OW 88
// if IsOk ( Markov ) then
6765: LD_EXP 18
6769: PPUSH
6770: CALL_OW 302
6774: IFFALSE 6827
// begin Say ( Heike , DH-Mort-2 ) ;
6776: LD_EXP 11
6780: PPUSH
6781: LD_STRING DH-Mort-2
6783: PPUSH
6784: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
6788: LD_EXP 18
6792: PPUSH
6793: LD_STRING DMar-Mort-3
6795: PPUSH
6796: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
6800: LD_EXP 18
6804: PPUSH
6805: LD_STRING DMar-Mort-4
6807: PPUSH
6808: CALL_OW 88
// SetTech ( tech_mortar , 2 , state_enabled ) ;
6812: LD_INT 41
6814: PPUSH
6815: LD_INT 2
6817: PPUSH
6818: LD_INT 1
6820: PPUSH
6821: CALL_OW 322
// end else
6825: GO 6913
// if IsOk ( Olaf ) then
6827: LD_EXP 19
6831: PPUSH
6832: CALL_OW 302
6836: IFFALSE 6889
// begin Say ( Heike , DH-Mort-a-2 ) ;
6838: LD_EXP 11
6842: PPUSH
6843: LD_STRING DH-Mort-a-2
6845: PPUSH
6846: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
6850: LD_EXP 19
6854: PPUSH
6855: LD_STRING DO-Mort-a-3
6857: PPUSH
6858: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
6862: LD_EXP 19
6866: PPUSH
6867: LD_STRING DO-Mort-a-4
6869: PPUSH
6870: CALL_OW 88
// SetTech ( tech_mortar , 2 , state_enabled ) ;
6874: LD_INT 41
6876: PPUSH
6877: LD_INT 2
6879: PPUSH
6880: LD_INT 1
6882: PPUSH
6883: CALL_OW 322
// end else
6887: GO 6913
// begin Say ( Heike , DH-Mort-a-5 ) ;
6889: LD_EXP 11
6893: PPUSH
6894: LD_STRING DH-Mort-a-5
6896: PPUSH
6897: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
6901: LD_EXP 11
6905: PPUSH
6906: LD_STRING DH-Mort-a-6
6908: PPUSH
6909: CALL_OW 88
// end ; DialogueOff ;
6913: CALL_OW 7
// end ;
6917: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
6918: LD_EXP 16
6922: PPUSH
6923: CALL_OW 256
6927: PUSH
6928: LD_INT 10
6930: LESS
6931: IFFALSE 7033
6933: GO 6935
6935: DISABLE
// begin DialogueOn ;
6936: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
6940: LD_EXP 16
6944: PPUSH
6945: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
6949: LD_EXP 16
6953: PPUSH
6954: LD_STRING DK-Death-1
6956: PPUSH
6957: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
6961: LD_EXP 16
6965: PPUSH
6966: LD_STRING DK-Death-2
6968: PPUSH
6969: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
6973: LD_EXP 16
6977: PPUSH
6978: LD_STRING DK-Death-3
6980: PPUSH
6981: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
6985: LD_EXP 11
6989: PPUSH
6990: LD_STRING DH-Death-4
6992: PPUSH
6993: CALL_OW 88
// if IsOk ( Markov ) then
6997: LD_EXP 18
7001: PPUSH
7002: CALL_OW 302
7006: IFFALSE 7020
// Say ( Markov , DMar-Death-5 ) ;
7008: LD_EXP 18
7012: PPUSH
7013: LD_STRING DMar-Death-5
7015: PPUSH
7016: CALL_OW 88
// DialogueOff ;
7020: CALL_OW 7
// KillUnit ( Kaia ) ;
7024: LD_EXP 16
7028: PPUSH
7029: CALL_OW 66
// end ;
7033: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib ;
7034: LD_EXP 10
7038: PUSH
7039: LD_INT 81
7041: PUSH
7042: LD_INT 2
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 50
7051: PUSH
7052: EMPTY
7053: LIST
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PPUSH
7059: CALL_OW 69
7063: NOT
7064: AND
7065: IFFALSE 7485
7067: GO 7069
7069: DISABLE
7070: LD_INT 0
7072: PPUSH
7073: PPUSH
// begin DialogueOn ;
7074: CALL_OW 6
// if time09 + time09c + tick < 60 60$00 then
7078: LD_EXP 3
7082: PUSH
7083: LD_EXP 4
7087: PLUS
7088: PUSH
7089: LD_OWVAR 1
7093: PLUS
7094: PUSH
7095: LD_INT 126000
7097: LESS
7098: IFFALSE 7107
// SetAchievement ( ACH_HSPEED_9 ) ;
7100: LD_STRING ACH_HSPEED_9
7102: PPUSH
7103: CALL_OW 543
// CenterOnNow ( Schulz ) ;
7107: LD_EXP 22
7111: PPUSH
7112: CALL 49017 0 1
// dwait ( 0 0$0.3 ) ;
7116: LD_INT 10
7118: PPUSH
7119: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
7123: LD_EXP 22
7127: PPUSH
7128: LD_STRING DL-End-1
7130: PPUSH
7131: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
7135: LD_EXP 11
7139: PPUSH
7140: LD_STRING DH-End-2
7142: PPUSH
7143: CALL_OW 88
// if IsOk ( Kaia ) then
7147: LD_EXP 16
7151: PPUSH
7152: CALL_OW 302
7156: IFFALSE 7206
// begin Say ( Kaia , DK-End-a-3 ) ;
7158: LD_EXP 16
7162: PPUSH
7163: LD_STRING DK-End-a-3
7165: PPUSH
7166: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
7170: LD_EXP 16
7174: PPUSH
7175: LD_STRING DK-End-a-4
7177: PPUSH
7178: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
7182: LD_EXP 22
7186: PPUSH
7187: LD_STRING DL-End-a-5
7189: PPUSH
7190: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
7194: LD_EXP 22
7198: PPUSH
7199: LD_STRING DL-End-a-6
7201: PPUSH
7202: CALL_OW 88
// end ; sib := 0 ;
7206: LD_ADDR_VAR 0 2
7210: PUSH
7211: LD_INT 0
7213: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
7214: LD_ADDR_VAR 0 1
7218: PUSH
7219: LD_INT 22
7221: PUSH
7222: LD_INT 2
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 2
7231: PUSH
7232: LD_INT 30
7234: PUSH
7235: LD_INT 0
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 30
7244: PUSH
7245: LD_INT 1
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 69
7265: PUSH
7266: FOR_IN
7267: IFFALSE 7300
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
7269: LD_ADDR_VAR 0 2
7273: PUSH
7274: LD_VAR 0 2
7278: PUSH
7279: LD_VAR 0 1
7283: PPUSH
7284: CALL_OW 274
7288: PPUSH
7289: LD_INT 3
7291: PPUSH
7292: CALL_OW 275
7296: PLUS
7297: ST_TO_ADDR
7298: GO 7266
7300: POP
7301: POP
// if sib >= sibToCollect then
7302: LD_VAR 0 2
7306: PUSH
7307: LD_EXP 7
7311: GREATEREQUAL
7312: IFFALSE 7326
// AddMedal ( med1 , 1 ) else
7314: LD_STRING med1
7316: PPUSH
7317: LD_INT 1
7319: PPUSH
7320: CALL_OW 101
7324: GO 7337
// AddMedal ( med1 , - 1 ) ;
7326: LD_STRING med1
7328: PPUSH
7329: LD_INT 1
7331: NEG
7332: PPUSH
7333: CALL_OW 101
// if apeDriver or kamikazeTrained then
7337: LD_EXP 8
7341: PUSH
7342: LD_EXP 6
7346: OR
7347: IFFALSE 7361
// AddMedal ( med2 , 1 ) else
7349: LD_STRING med2
7351: PPUSH
7352: LD_INT 1
7354: PPUSH
7355: CALL_OW 101
7359: GO 7372
// AddMedal ( med2 , - 1 ) ;
7361: LD_STRING med2
7363: PPUSH
7364: LD_INT 1
7366: NEG
7367: PPUSH
7368: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
7372: LD_EXP 12
7376: PUSH
7377: LD_EXP 13
7381: PUSH
7382: LD_EXP 14
7386: PUSH
7387: LD_EXP 15
7391: PUSH
7392: LD_EXP 16
7396: PUSH
7397: LD_EXP 17
7401: PUSH
7402: LD_EXP 18
7406: PUSH
7407: LD_EXP 19
7411: PUSH
7412: LD_EXP 20
7416: PUSH
7417: LD_EXP 21
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: PPUSH
7434: LD_INT 50
7436: PUSH
7437: EMPTY
7438: LIST
7439: PPUSH
7440: CALL_OW 72
7444: NOT
7445: IFFALSE 7460
// AddMedal ( med3 , - 1 ) else
7447: LD_STRING med3
7449: PPUSH
7450: LD_INT 1
7452: NEG
7453: PPUSH
7454: CALL_OW 101
7458: GO 7470
// AddMedal ( med3 , 1 ) ;
7460: LD_STRING med3
7462: PPUSH
7463: LD_INT 1
7465: PPUSH
7466: CALL_OW 101
// GiveMedals ( MAIN ) ;
7470: LD_STRING MAIN
7472: PPUSH
7473: CALL_OW 102
// YouWin ;
7477: CALL_OW 103
// DialogueOff ;
7481: CALL_OW 7
// end ; end_of_file
7485: PPOPN 2
7487: END
// every 0 0$30 + 0 0$20 trigger playerInBase do var i , tmp ;
7488: LD_EXP 5
7492: IFFALSE 7593
7494: GO 7496
7496: DISABLE
7497: LD_INT 0
7499: PPUSH
7500: PPUSH
// begin enable ;
7501: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
7502: LD_ADDR_VAR 0 2
7506: PUSH
7507: LD_INT 9
7509: PUSH
7510: LD_INT 10
7512: PUSH
7513: LD_INT 11
7515: PUSH
7516: LD_INT 12
7518: PUSH
7519: LD_INT 13
7521: PUSH
7522: LD_INT 14
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
7533: LD_ADDR_VAR 0 1
7537: PUSH
7538: LD_VAR 0 2
7542: PUSH
7543: LD_INT 1
7545: PPUSH
7546: LD_INT 6
7548: PPUSH
7549: CALL_OW 12
7553: ARRAY
7554: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 6 then
7555: LD_VAR 0 1
7559: PPUSH
7560: CALL_OW 435
7564: PUSH
7565: LD_INT 6
7567: LESS
7568: IFFALSE 7593
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
7570: LD_INT 1
7572: PPUSH
7573: LD_INT 5
7575: PPUSH
7576: CALL_OW 12
7580: PPUSH
7581: LD_VAR 0 1
7585: PPUSH
7586: LD_INT 1
7588: PPUSH
7589: CALL_OW 55
// end ; end_of_file
7593: PPOPN 2
7595: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
// if exist_mode then
7600: LD_VAR 0 2
7604: IFFALSE 7629
// unit := CreateCharacter ( prefix & ident ) else
7606: LD_ADDR_VAR 0 5
7610: PUSH
7611: LD_VAR 0 3
7615: PUSH
7616: LD_VAR 0 1
7620: STR
7621: PPUSH
7622: CALL_OW 34
7626: ST_TO_ADDR
7627: GO 7644
// unit := NewCharacter ( ident ) ;
7629: LD_ADDR_VAR 0 5
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 25
7643: ST_TO_ADDR
// result := unit ;
7644: LD_ADDR_VAR 0 4
7648: PUSH
7649: LD_VAR 0 5
7653: ST_TO_ADDR
// end ;
7654: LD_VAR 0 4
7658: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
7659: LD_INT 0
7661: PPUSH
7662: PPUSH
// if not side or not nation then
7663: LD_VAR 0 1
7667: NOT
7668: PUSH
7669: LD_VAR 0 2
7673: NOT
7674: OR
7675: IFFALSE 7679
// exit ;
7677: GO 8447
// case nation of nation_american :
7679: LD_VAR 0 2
7683: PUSH
7684: LD_INT 1
7686: DOUBLE
7687: EQUAL
7688: IFTRUE 7692
7690: GO 7906
7692: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
7693: LD_ADDR_VAR 0 4
7697: PUSH
7698: LD_INT 35
7700: PUSH
7701: LD_INT 45
7703: PUSH
7704: LD_INT 46
7706: PUSH
7707: LD_INT 47
7709: PUSH
7710: LD_INT 82
7712: PUSH
7713: LD_INT 83
7715: PUSH
7716: LD_INT 84
7718: PUSH
7719: LD_INT 85
7721: PUSH
7722: LD_INT 86
7724: PUSH
7725: LD_INT 1
7727: PUSH
7728: LD_INT 2
7730: PUSH
7731: LD_INT 6
7733: PUSH
7734: LD_INT 15
7736: PUSH
7737: LD_INT 16
7739: PUSH
7740: LD_INT 7
7742: PUSH
7743: LD_INT 12
7745: PUSH
7746: LD_INT 13
7748: PUSH
7749: LD_INT 10
7751: PUSH
7752: LD_INT 14
7754: PUSH
7755: LD_INT 20
7757: PUSH
7758: LD_INT 21
7760: PUSH
7761: LD_INT 22
7763: PUSH
7764: LD_INT 25
7766: PUSH
7767: LD_INT 32
7769: PUSH
7770: LD_INT 27
7772: PUSH
7773: LD_INT 36
7775: PUSH
7776: LD_INT 69
7778: PUSH
7779: LD_INT 39
7781: PUSH
7782: LD_INT 34
7784: PUSH
7785: LD_INT 40
7787: PUSH
7788: LD_INT 48
7790: PUSH
7791: LD_INT 49
7793: PUSH
7794: LD_INT 50
7796: PUSH
7797: LD_INT 51
7799: PUSH
7800: LD_INT 52
7802: PUSH
7803: LD_INT 53
7805: PUSH
7806: LD_INT 54
7808: PUSH
7809: LD_INT 55
7811: PUSH
7812: LD_INT 56
7814: PUSH
7815: LD_INT 57
7817: PUSH
7818: LD_INT 58
7820: PUSH
7821: LD_INT 59
7823: PUSH
7824: LD_INT 60
7826: PUSH
7827: LD_INT 61
7829: PUSH
7830: LD_INT 62
7832: PUSH
7833: LD_INT 80
7835: PUSH
7836: LD_INT 82
7838: PUSH
7839: LD_INT 83
7841: PUSH
7842: LD_INT 84
7844: PUSH
7845: LD_INT 85
7847: PUSH
7848: LD_INT 86
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: ST_TO_ADDR
7904: GO 8371
7906: LD_INT 2
7908: DOUBLE
7909: EQUAL
7910: IFTRUE 7914
7912: GO 8140
7914: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
7915: LD_ADDR_VAR 0 4
7919: PUSH
7920: LD_INT 35
7922: PUSH
7923: LD_INT 45
7925: PUSH
7926: LD_INT 46
7928: PUSH
7929: LD_INT 47
7931: PUSH
7932: LD_INT 82
7934: PUSH
7935: LD_INT 83
7937: PUSH
7938: LD_INT 84
7940: PUSH
7941: LD_INT 85
7943: PUSH
7944: LD_INT 87
7946: PUSH
7947: LD_INT 70
7949: PUSH
7950: LD_INT 1
7952: PUSH
7953: LD_INT 11
7955: PUSH
7956: LD_INT 3
7958: PUSH
7959: LD_INT 4
7961: PUSH
7962: LD_INT 5
7964: PUSH
7965: LD_INT 6
7967: PUSH
7968: LD_INT 15
7970: PUSH
7971: LD_INT 18
7973: PUSH
7974: LD_INT 7
7976: PUSH
7977: LD_INT 17
7979: PUSH
7980: LD_INT 8
7982: PUSH
7983: LD_INT 20
7985: PUSH
7986: LD_INT 21
7988: PUSH
7989: LD_INT 22
7991: PUSH
7992: LD_INT 72
7994: PUSH
7995: LD_INT 26
7997: PUSH
7998: LD_INT 69
8000: PUSH
8001: LD_INT 39
8003: PUSH
8004: LD_INT 40
8006: PUSH
8007: LD_INT 41
8009: PUSH
8010: LD_INT 42
8012: PUSH
8013: LD_INT 43
8015: PUSH
8016: LD_INT 48
8018: PUSH
8019: LD_INT 49
8021: PUSH
8022: LD_INT 50
8024: PUSH
8025: LD_INT 51
8027: PUSH
8028: LD_INT 52
8030: PUSH
8031: LD_INT 53
8033: PUSH
8034: LD_INT 54
8036: PUSH
8037: LD_INT 55
8039: PUSH
8040: LD_INT 56
8042: PUSH
8043: LD_INT 60
8045: PUSH
8046: LD_INT 61
8048: PUSH
8049: LD_INT 62
8051: PUSH
8052: LD_INT 66
8054: PUSH
8055: LD_INT 67
8057: PUSH
8058: LD_INT 68
8060: PUSH
8061: LD_INT 81
8063: PUSH
8064: LD_INT 82
8066: PUSH
8067: LD_INT 83
8069: PUSH
8070: LD_INT 84
8072: PUSH
8073: LD_INT 85
8075: PUSH
8076: LD_INT 87
8078: PUSH
8079: LD_INT 88
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: ST_TO_ADDR
8138: GO 8371
8140: LD_INT 3
8142: DOUBLE
8143: EQUAL
8144: IFTRUE 8148
8146: GO 8370
8148: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8149: LD_ADDR_VAR 0 4
8153: PUSH
8154: LD_INT 46
8156: PUSH
8157: LD_INT 47
8159: PUSH
8160: LD_INT 1
8162: PUSH
8163: LD_INT 2
8165: PUSH
8166: LD_INT 82
8168: PUSH
8169: LD_INT 83
8171: PUSH
8172: LD_INT 84
8174: PUSH
8175: LD_INT 85
8177: PUSH
8178: LD_INT 86
8180: PUSH
8181: LD_INT 11
8183: PUSH
8184: LD_INT 9
8186: PUSH
8187: LD_INT 20
8189: PUSH
8190: LD_INT 19
8192: PUSH
8193: LD_INT 21
8195: PUSH
8196: LD_INT 24
8198: PUSH
8199: LD_INT 22
8201: PUSH
8202: LD_INT 25
8204: PUSH
8205: LD_INT 28
8207: PUSH
8208: LD_INT 29
8210: PUSH
8211: LD_INT 30
8213: PUSH
8214: LD_INT 31
8216: PUSH
8217: LD_INT 37
8219: PUSH
8220: LD_INT 38
8222: PUSH
8223: LD_INT 32
8225: PUSH
8226: LD_INT 27
8228: PUSH
8229: LD_INT 33
8231: PUSH
8232: LD_INT 69
8234: PUSH
8235: LD_INT 39
8237: PUSH
8238: LD_INT 34
8240: PUSH
8241: LD_INT 40
8243: PUSH
8244: LD_INT 71
8246: PUSH
8247: LD_INT 23
8249: PUSH
8250: LD_INT 44
8252: PUSH
8253: LD_INT 48
8255: PUSH
8256: LD_INT 49
8258: PUSH
8259: LD_INT 50
8261: PUSH
8262: LD_INT 51
8264: PUSH
8265: LD_INT 52
8267: PUSH
8268: LD_INT 53
8270: PUSH
8271: LD_INT 54
8273: PUSH
8274: LD_INT 55
8276: PUSH
8277: LD_INT 56
8279: PUSH
8280: LD_INT 57
8282: PUSH
8283: LD_INT 58
8285: PUSH
8286: LD_INT 59
8288: PUSH
8289: LD_INT 63
8291: PUSH
8292: LD_INT 64
8294: PUSH
8295: LD_INT 65
8297: PUSH
8298: LD_INT 82
8300: PUSH
8301: LD_INT 83
8303: PUSH
8304: LD_INT 84
8306: PUSH
8307: LD_INT 85
8309: PUSH
8310: LD_INT 86
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: ST_TO_ADDR
8368: GO 8371
8370: POP
// if state > - 1 and state < 3 then
8371: LD_VAR 0 3
8375: PUSH
8376: LD_INT 1
8378: NEG
8379: GREATER
8380: PUSH
8381: LD_VAR 0 3
8385: PUSH
8386: LD_INT 3
8388: LESS
8389: AND
8390: IFFALSE 8447
// for i in result do
8392: LD_ADDR_VAR 0 5
8396: PUSH
8397: LD_VAR 0 4
8401: PUSH
8402: FOR_IN
8403: IFFALSE 8445
// if GetTech ( i , side ) <> state then
8405: LD_VAR 0 5
8409: PPUSH
8410: LD_VAR 0 1
8414: PPUSH
8415: CALL_OW 321
8419: PUSH
8420: LD_VAR 0 3
8424: NONEQUAL
8425: IFFALSE 8443
// result := result diff i ;
8427: LD_ADDR_VAR 0 4
8431: PUSH
8432: LD_VAR 0 4
8436: PUSH
8437: LD_VAR 0 5
8441: DIFF
8442: ST_TO_ADDR
8443: GO 8402
8445: POP
8446: POP
// end ;
8447: LD_VAR 0 4
8451: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8452: LD_INT 0
8454: PPUSH
8455: PPUSH
8456: PPUSH
// result := true ;
8457: LD_ADDR_VAR 0 3
8461: PUSH
8462: LD_INT 1
8464: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8465: LD_ADDR_VAR 0 5
8469: PUSH
8470: LD_VAR 0 2
8474: PPUSH
8475: CALL_OW 480
8479: ST_TO_ADDR
// if not tmp then
8480: LD_VAR 0 5
8484: NOT
8485: IFFALSE 8489
// exit ;
8487: GO 8538
// for i in tmp do
8489: LD_ADDR_VAR 0 4
8493: PUSH
8494: LD_VAR 0 5
8498: PUSH
8499: FOR_IN
8500: IFFALSE 8536
// if GetTech ( i , side ) <> state_researched then
8502: LD_VAR 0 4
8506: PPUSH
8507: LD_VAR 0 1
8511: PPUSH
8512: CALL_OW 321
8516: PUSH
8517: LD_INT 2
8519: NONEQUAL
8520: IFFALSE 8534
// begin result := false ;
8522: LD_ADDR_VAR 0 3
8526: PUSH
8527: LD_INT 0
8529: ST_TO_ADDR
// exit ;
8530: POP
8531: POP
8532: GO 8538
// end ;
8534: GO 8499
8536: POP
8537: POP
// end ;
8538: LD_VAR 0 3
8542: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
8543: LD_INT 0
8545: PPUSH
8546: PPUSH
8547: PPUSH
8548: PPUSH
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
8553: PPUSH
8554: PPUSH
8555: PPUSH
8556: PPUSH
8557: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
8558: LD_VAR 0 1
8562: NOT
8563: PUSH
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 257
8573: PUSH
8574: LD_INT 9
8576: NONEQUAL
8577: OR
8578: IFFALSE 8582
// exit ;
8580: GO 9155
// side := GetSide ( unit ) ;
8582: LD_ADDR_VAR 0 9
8586: PUSH
8587: LD_VAR 0 1
8591: PPUSH
8592: CALL_OW 255
8596: ST_TO_ADDR
// tech_space := tech_spacanom ;
8597: LD_ADDR_VAR 0 12
8601: PUSH
8602: LD_INT 29
8604: ST_TO_ADDR
// tech_time := tech_taurad ;
8605: LD_ADDR_VAR 0 13
8609: PUSH
8610: LD_INT 28
8612: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
8613: LD_ADDR_VAR 0 11
8617: PUSH
8618: LD_VAR 0 1
8622: PPUSH
8623: CALL_OW 310
8627: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
8628: LD_VAR 0 11
8632: PPUSH
8633: CALL_OW 247
8637: PUSH
8638: LD_INT 2
8640: EQUAL
8641: IFFALSE 8645
// exit ;
8643: GO 9155
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8645: LD_ADDR_VAR 0 8
8649: PUSH
8650: LD_INT 81
8652: PUSH
8653: LD_VAR 0 9
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 3
8664: PUSH
8665: LD_INT 21
8667: PUSH
8668: LD_INT 3
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PPUSH
8683: CALL_OW 69
8687: ST_TO_ADDR
// if not tmp then
8688: LD_VAR 0 8
8692: NOT
8693: IFFALSE 8697
// exit ;
8695: GO 9155
// if in_unit then
8697: LD_VAR 0 11
8701: IFFALSE 8725
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
8703: LD_ADDR_VAR 0 10
8707: PUSH
8708: LD_VAR 0 8
8712: PPUSH
8713: LD_VAR 0 11
8717: PPUSH
8718: CALL_OW 74
8722: ST_TO_ADDR
8723: GO 8745
// enemy := NearestUnitToUnit ( tmp , unit ) ;
8725: LD_ADDR_VAR 0 10
8729: PUSH
8730: LD_VAR 0 8
8734: PPUSH
8735: LD_VAR 0 1
8739: PPUSH
8740: CALL_OW 74
8744: ST_TO_ADDR
// if not enemy then
8745: LD_VAR 0 10
8749: NOT
8750: IFFALSE 8754
// exit ;
8752: GO 9155
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
8754: LD_VAR 0 11
8758: PUSH
8759: LD_VAR 0 11
8763: PPUSH
8764: LD_VAR 0 10
8768: PPUSH
8769: CALL_OW 296
8773: PUSH
8774: LD_INT 13
8776: GREATER
8777: AND
8778: PUSH
8779: LD_VAR 0 1
8783: PPUSH
8784: LD_VAR 0 10
8788: PPUSH
8789: CALL_OW 296
8793: PUSH
8794: LD_INT 12
8796: GREATER
8797: OR
8798: IFFALSE 8802
// exit ;
8800: GO 9155
// missile := [ 1 ] ;
8802: LD_ADDR_VAR 0 14
8806: PUSH
8807: LD_INT 1
8809: PUSH
8810: EMPTY
8811: LIST
8812: ST_TO_ADDR
// if Researched ( side , tech_space ) then
8813: LD_VAR 0 9
8817: PPUSH
8818: LD_VAR 0 12
8822: PPUSH
8823: CALL_OW 325
8827: IFFALSE 8856
// missile := Replace ( missile , missile + 1 , 2 ) ;
8829: LD_ADDR_VAR 0 14
8833: PUSH
8834: LD_VAR 0 14
8838: PPUSH
8839: LD_VAR 0 14
8843: PUSH
8844: LD_INT 1
8846: PLUS
8847: PPUSH
8848: LD_INT 2
8850: PPUSH
8851: CALL_OW 1
8855: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
8856: LD_VAR 0 9
8860: PPUSH
8861: LD_VAR 0 13
8865: PPUSH
8866: CALL_OW 325
8870: PUSH
8871: LD_VAR 0 10
8875: PPUSH
8876: CALL_OW 255
8880: PPUSH
8881: LD_VAR 0 13
8885: PPUSH
8886: CALL_OW 325
8890: NOT
8891: AND
8892: IFFALSE 8921
// missile := Replace ( missile , missile + 1 , 3 ) ;
8894: LD_ADDR_VAR 0 14
8898: PUSH
8899: LD_VAR 0 14
8903: PPUSH
8904: LD_VAR 0 14
8908: PUSH
8909: LD_INT 1
8911: PLUS
8912: PPUSH
8913: LD_INT 3
8915: PPUSH
8916: CALL_OW 1
8920: ST_TO_ADDR
// if missile < 2 then
8921: LD_VAR 0 14
8925: PUSH
8926: LD_INT 2
8928: LESS
8929: IFFALSE 8933
// exit ;
8931: GO 9155
// x := GetX ( enemy ) ;
8933: LD_ADDR_VAR 0 4
8937: PUSH
8938: LD_VAR 0 10
8942: PPUSH
8943: CALL_OW 250
8947: ST_TO_ADDR
// y := GetY ( enemy ) ;
8948: LD_ADDR_VAR 0 5
8952: PUSH
8953: LD_VAR 0 10
8957: PPUSH
8958: CALL_OW 251
8962: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
8963: LD_ADDR_VAR 0 6
8967: PUSH
8968: LD_VAR 0 4
8972: PUSH
8973: LD_INT 1
8975: NEG
8976: PPUSH
8977: LD_INT 1
8979: PPUSH
8980: CALL_OW 12
8984: PLUS
8985: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
8986: LD_ADDR_VAR 0 7
8990: PUSH
8991: LD_VAR 0 5
8995: PUSH
8996: LD_INT 1
8998: NEG
8999: PPUSH
9000: LD_INT 1
9002: PPUSH
9003: CALL_OW 12
9007: PLUS
9008: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9009: LD_VAR 0 6
9013: PPUSH
9014: LD_VAR 0 7
9018: PPUSH
9019: CALL_OW 488
9023: NOT
9024: IFFALSE 9046
// begin _x := x ;
9026: LD_ADDR_VAR 0 6
9030: PUSH
9031: LD_VAR 0 4
9035: ST_TO_ADDR
// _y := y ;
9036: LD_ADDR_VAR 0 7
9040: PUSH
9041: LD_VAR 0 5
9045: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9046: LD_ADDR_VAR 0 3
9050: PUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 14
9058: PPUSH
9059: CALL_OW 12
9063: ST_TO_ADDR
// case i of 1 :
9064: LD_VAR 0 3
9068: PUSH
9069: LD_INT 1
9071: DOUBLE
9072: EQUAL
9073: IFTRUE 9077
9075: GO 9094
9077: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9078: LD_VAR 0 1
9082: PPUSH
9083: LD_VAR 0 10
9087: PPUSH
9088: CALL_OW 115
9092: GO 9155
9094: LD_INT 2
9096: DOUBLE
9097: EQUAL
9098: IFTRUE 9102
9100: GO 9124
9102: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9103: LD_VAR 0 1
9107: PPUSH
9108: LD_VAR 0 6
9112: PPUSH
9113: LD_VAR 0 7
9117: PPUSH
9118: CALL_OW 153
9122: GO 9155
9124: LD_INT 3
9126: DOUBLE
9127: EQUAL
9128: IFTRUE 9132
9130: GO 9154
9132: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9133: LD_VAR 0 1
9137: PPUSH
9138: LD_VAR 0 6
9142: PPUSH
9143: LD_VAR 0 7
9147: PPUSH
9148: CALL_OW 154
9152: GO 9155
9154: POP
// end ;
9155: LD_VAR 0 2
9159: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9160: LD_INT 0
9162: PPUSH
9163: PPUSH
9164: PPUSH
9165: PPUSH
9166: PPUSH
9167: PPUSH
// if not unit or not building then
9168: LD_VAR 0 1
9172: NOT
9173: PUSH
9174: LD_VAR 0 2
9178: NOT
9179: OR
9180: IFFALSE 9184
// exit ;
9182: GO 9342
// x := GetX ( building ) ;
9184: LD_ADDR_VAR 0 5
9188: PUSH
9189: LD_VAR 0 2
9193: PPUSH
9194: CALL_OW 250
9198: ST_TO_ADDR
// y := GetY ( building ) ;
9199: LD_ADDR_VAR 0 6
9203: PUSH
9204: LD_VAR 0 2
9208: PPUSH
9209: CALL_OW 251
9213: ST_TO_ADDR
// for i = 0 to 5 do
9214: LD_ADDR_VAR 0 4
9218: PUSH
9219: DOUBLE
9220: LD_INT 0
9222: DEC
9223: ST_TO_ADDR
9224: LD_INT 5
9226: PUSH
9227: FOR_TO
9228: IFFALSE 9340
// begin _x := ShiftX ( x , i , 3 ) ;
9230: LD_ADDR_VAR 0 7
9234: PUSH
9235: LD_VAR 0 5
9239: PPUSH
9240: LD_VAR 0 4
9244: PPUSH
9245: LD_INT 3
9247: PPUSH
9248: CALL_OW 272
9252: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9253: LD_ADDR_VAR 0 8
9257: PUSH
9258: LD_VAR 0 6
9262: PPUSH
9263: LD_VAR 0 4
9267: PPUSH
9268: LD_INT 3
9270: PPUSH
9271: CALL_OW 273
9275: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9276: LD_VAR 0 7
9280: PPUSH
9281: LD_VAR 0 8
9285: PPUSH
9286: CALL_OW 488
9290: NOT
9291: IFFALSE 9295
// continue ;
9293: GO 9227
// if HexInfo ( _x , _y ) = 0 then
9295: LD_VAR 0 7
9299: PPUSH
9300: LD_VAR 0 8
9304: PPUSH
9305: CALL_OW 428
9309: PUSH
9310: LD_INT 0
9312: EQUAL
9313: IFFALSE 9338
// begin ComMoveXY ( unit , _x , _y ) ;
9315: LD_VAR 0 1
9319: PPUSH
9320: LD_VAR 0 7
9324: PPUSH
9325: LD_VAR 0 8
9329: PPUSH
9330: CALL_OW 111
// exit ;
9334: POP
9335: POP
9336: GO 9342
// end ; end ;
9338: GO 9227
9340: POP
9341: POP
// end ;
9342: LD_VAR 0 3
9346: RET
// export function ScanBase ( side , base_area ) ; begin
9347: LD_INT 0
9349: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9350: LD_ADDR_VAR 0 3
9354: PUSH
9355: LD_VAR 0 2
9359: PPUSH
9360: LD_INT 81
9362: PUSH
9363: LD_VAR 0 1
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PPUSH
9372: CALL_OW 70
9376: ST_TO_ADDR
// end ;
9377: LD_VAR 0 3
9381: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9382: LD_INT 0
9384: PPUSH
9385: PPUSH
9386: PPUSH
9387: PPUSH
// result := false ;
9388: LD_ADDR_VAR 0 2
9392: PUSH
9393: LD_INT 0
9395: ST_TO_ADDR
// side := GetSide ( unit ) ;
9396: LD_ADDR_VAR 0 3
9400: PUSH
9401: LD_VAR 0 1
9405: PPUSH
9406: CALL_OW 255
9410: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9411: LD_ADDR_VAR 0 4
9415: PUSH
9416: LD_VAR 0 1
9420: PPUSH
9421: CALL_OW 248
9425: ST_TO_ADDR
// case nat of 1 :
9426: LD_VAR 0 4
9430: PUSH
9431: LD_INT 1
9433: DOUBLE
9434: EQUAL
9435: IFTRUE 9439
9437: GO 9450
9439: POP
// tech := tech_lassight ; 2 :
9440: LD_ADDR_VAR 0 5
9444: PUSH
9445: LD_INT 12
9447: ST_TO_ADDR
9448: GO 9489
9450: LD_INT 2
9452: DOUBLE
9453: EQUAL
9454: IFTRUE 9458
9456: GO 9469
9458: POP
// tech := tech_mortar ; 3 :
9459: LD_ADDR_VAR 0 5
9463: PUSH
9464: LD_INT 41
9466: ST_TO_ADDR
9467: GO 9489
9469: LD_INT 3
9471: DOUBLE
9472: EQUAL
9473: IFTRUE 9477
9475: GO 9488
9477: POP
// tech := tech_bazooka ; end ;
9478: LD_ADDR_VAR 0 5
9482: PUSH
9483: LD_INT 44
9485: ST_TO_ADDR
9486: GO 9489
9488: POP
// if Researched ( side , tech ) then
9489: LD_VAR 0 3
9493: PPUSH
9494: LD_VAR 0 5
9498: PPUSH
9499: CALL_OW 325
9503: IFFALSE 9530
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9505: LD_ADDR_VAR 0 2
9509: PUSH
9510: LD_INT 5
9512: PUSH
9513: LD_INT 8
9515: PUSH
9516: LD_INT 9
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: LIST
9523: PUSH
9524: LD_VAR 0 4
9528: ARRAY
9529: ST_TO_ADDR
// end ;
9530: LD_VAR 0 2
9534: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
9535: LD_INT 0
9537: PPUSH
9538: PPUSH
9539: PPUSH
// if not mines then
9540: LD_VAR 0 2
9544: NOT
9545: IFFALSE 9549
// exit ;
9547: GO 9693
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9549: LD_ADDR_VAR 0 5
9553: PUSH
9554: LD_INT 81
9556: PUSH
9557: LD_VAR 0 1
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: LD_INT 3
9568: PUSH
9569: LD_INT 21
9571: PUSH
9572: LD_INT 3
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PPUSH
9587: CALL_OW 69
9591: ST_TO_ADDR
// for i in mines do
9592: LD_ADDR_VAR 0 4
9596: PUSH
9597: LD_VAR 0 2
9601: PUSH
9602: FOR_IN
9603: IFFALSE 9691
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
9605: LD_VAR 0 4
9609: PUSH
9610: LD_INT 1
9612: ARRAY
9613: PPUSH
9614: LD_VAR 0 4
9618: PUSH
9619: LD_INT 2
9621: ARRAY
9622: PPUSH
9623: CALL_OW 458
9627: NOT
9628: IFFALSE 9632
// continue ;
9630: GO 9602
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
9632: LD_VAR 0 4
9636: PUSH
9637: LD_INT 1
9639: ARRAY
9640: PPUSH
9641: LD_VAR 0 4
9645: PUSH
9646: LD_INT 2
9648: ARRAY
9649: PPUSH
9650: CALL_OW 428
9654: PUSH
9655: LD_VAR 0 5
9659: IN
9660: IFFALSE 9689
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
9662: LD_VAR 0 4
9666: PUSH
9667: LD_INT 1
9669: ARRAY
9670: PPUSH
9671: LD_VAR 0 4
9675: PUSH
9676: LD_INT 2
9678: ARRAY
9679: PPUSH
9680: LD_VAR 0 1
9684: PPUSH
9685: CALL_OW 456
// end ;
9689: GO 9602
9691: POP
9692: POP
// end ;
9693: LD_VAR 0 3
9697: RET
// export function Count ( array ) ; var i ; begin
9698: LD_INT 0
9700: PPUSH
9701: PPUSH
// result := 0 ;
9702: LD_ADDR_VAR 0 2
9706: PUSH
9707: LD_INT 0
9709: ST_TO_ADDR
// for i in array do
9710: LD_ADDR_VAR 0 3
9714: PUSH
9715: LD_VAR 0 1
9719: PUSH
9720: FOR_IN
9721: IFFALSE 9745
// if i then
9723: LD_VAR 0 3
9727: IFFALSE 9743
// result := result + 1 ;
9729: LD_ADDR_VAR 0 2
9733: PUSH
9734: LD_VAR 0 2
9738: PUSH
9739: LD_INT 1
9741: PLUS
9742: ST_TO_ADDR
9743: GO 9720
9745: POP
9746: POP
// end ;
9747: LD_VAR 0 2
9751: RET
// export function IsEmpty ( building ) ; begin
9752: LD_INT 0
9754: PPUSH
// if not building then
9755: LD_VAR 0 1
9759: NOT
9760: IFFALSE 9764
// exit ;
9762: GO 9807
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
9764: LD_ADDR_VAR 0 2
9768: PUSH
9769: LD_VAR 0 1
9773: PUSH
9774: LD_INT 22
9776: PUSH
9777: LD_VAR 0 1
9781: PPUSH
9782: CALL_OW 255
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: LD_INT 58
9793: PUSH
9794: EMPTY
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: IN
9806: ST_TO_ADDR
// end ;
9807: LD_VAR 0 2
9811: RET
// export function IsNotFull ( building ) ; var places ; begin
9812: LD_INT 0
9814: PPUSH
9815: PPUSH
// if not building then
9816: LD_VAR 0 1
9820: NOT
9821: IFFALSE 9825
// exit ;
9823: GO 9996
// result := false ;
9825: LD_ADDR_VAR 0 2
9829: PUSH
9830: LD_INT 0
9832: ST_TO_ADDR
// places := 0 ;
9833: LD_ADDR_VAR 0 3
9837: PUSH
9838: LD_INT 0
9840: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
9841: LD_VAR 0 1
9845: PPUSH
9846: CALL_OW 266
9850: PUSH
9851: LD_INT 0
9853: DOUBLE
9854: EQUAL
9855: IFTRUE 9913
9857: LD_INT 1
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9913
9863: LD_INT 6
9865: DOUBLE
9866: EQUAL
9867: IFTRUE 9913
9869: LD_INT 7
9871: DOUBLE
9872: EQUAL
9873: IFTRUE 9913
9875: LD_INT 8
9877: DOUBLE
9878: EQUAL
9879: IFTRUE 9913
9881: LD_INT 4
9883: DOUBLE
9884: EQUAL
9885: IFTRUE 9913
9887: LD_INT 5
9889: DOUBLE
9890: EQUAL
9891: IFTRUE 9913
9893: LD_INT 2
9895: DOUBLE
9896: EQUAL
9897: IFTRUE 9913
9899: LD_INT 3
9901: DOUBLE
9902: EQUAL
9903: IFTRUE 9913
9905: LD_INT 35
9907: DOUBLE
9908: EQUAL
9909: IFTRUE 9913
9911: GO 9924
9913: POP
// places := 6 ; b_bunker , b_breastwork :
9914: LD_ADDR_VAR 0 3
9918: PUSH
9919: LD_INT 6
9921: ST_TO_ADDR
9922: GO 9969
9924: LD_INT 32
9926: DOUBLE
9927: EQUAL
9928: IFTRUE 9938
9930: LD_INT 31
9932: DOUBLE
9933: EQUAL
9934: IFTRUE 9938
9936: GO 9949
9938: POP
// places := 1 ; b_control_tower :
9939: LD_ADDR_VAR 0 3
9943: PUSH
9944: LD_INT 1
9946: ST_TO_ADDR
9947: GO 9969
9949: LD_INT 36
9951: DOUBLE
9952: EQUAL
9953: IFTRUE 9957
9955: GO 9968
9957: POP
// places := 3 ; end ;
9958: LD_ADDR_VAR 0 3
9962: PUSH
9963: LD_INT 3
9965: ST_TO_ADDR
9966: GO 9969
9968: POP
// if places then
9969: LD_VAR 0 3
9973: IFFALSE 9996
// result := UnitsInside ( building ) < places ;
9975: LD_ADDR_VAR 0 2
9979: PUSH
9980: LD_VAR 0 1
9984: PPUSH
9985: CALL_OW 313
9989: PUSH
9990: LD_VAR 0 3
9994: LESS
9995: ST_TO_ADDR
// end ;
9996: LD_VAR 0 2
10000: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10001: LD_INT 0
10003: PPUSH
10004: PPUSH
10005: PPUSH
10006: PPUSH
// tmp := [ ] ;
10007: LD_ADDR_VAR 0 3
10011: PUSH
10012: EMPTY
10013: ST_TO_ADDR
// list := [ ] ;
10014: LD_ADDR_VAR 0 5
10018: PUSH
10019: EMPTY
10020: ST_TO_ADDR
// for i = 16 to 25 do
10021: LD_ADDR_VAR 0 4
10025: PUSH
10026: DOUBLE
10027: LD_INT 16
10029: DEC
10030: ST_TO_ADDR
10031: LD_INT 25
10033: PUSH
10034: FOR_TO
10035: IFFALSE 10108
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10037: LD_ADDR_VAR 0 3
10041: PUSH
10042: LD_VAR 0 3
10046: PUSH
10047: LD_INT 22
10049: PUSH
10050: LD_VAR 0 1
10054: PPUSH
10055: CALL_OW 255
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 91
10066: PUSH
10067: LD_VAR 0 1
10071: PUSH
10072: LD_INT 6
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PUSH
10080: LD_INT 30
10082: PUSH
10083: LD_VAR 0 4
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: LIST
10096: PUSH
10097: EMPTY
10098: LIST
10099: PPUSH
10100: CALL_OW 69
10104: ADD
10105: ST_TO_ADDR
10106: GO 10034
10108: POP
10109: POP
// for i = 1 to tmp do
10110: LD_ADDR_VAR 0 4
10114: PUSH
10115: DOUBLE
10116: LD_INT 1
10118: DEC
10119: ST_TO_ADDR
10120: LD_VAR 0 3
10124: PUSH
10125: FOR_TO
10126: IFFALSE 10214
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10128: LD_ADDR_VAR 0 5
10132: PUSH
10133: LD_VAR 0 5
10137: PUSH
10138: LD_VAR 0 3
10142: PUSH
10143: LD_VAR 0 4
10147: ARRAY
10148: PPUSH
10149: CALL_OW 266
10153: PUSH
10154: LD_VAR 0 3
10158: PUSH
10159: LD_VAR 0 4
10163: ARRAY
10164: PPUSH
10165: CALL_OW 250
10169: PUSH
10170: LD_VAR 0 3
10174: PUSH
10175: LD_VAR 0 4
10179: ARRAY
10180: PPUSH
10181: CALL_OW 251
10185: PUSH
10186: LD_VAR 0 3
10190: PUSH
10191: LD_VAR 0 4
10195: ARRAY
10196: PPUSH
10197: CALL_OW 254
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: PUSH
10208: EMPTY
10209: LIST
10210: ADD
10211: ST_TO_ADDR
10212: GO 10125
10214: POP
10215: POP
// result := list ;
10216: LD_ADDR_VAR 0 2
10220: PUSH
10221: LD_VAR 0 5
10225: ST_TO_ADDR
// end ;
10226: LD_VAR 0 2
10230: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10231: LD_INT 0
10233: PPUSH
10234: PPUSH
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
10239: PPUSH
// if not factory then
10240: LD_VAR 0 1
10244: NOT
10245: IFFALSE 10249
// exit ;
10247: GO 10842
// if control = control_apeman then
10249: LD_VAR 0 4
10253: PUSH
10254: LD_INT 5
10256: EQUAL
10257: IFFALSE 10366
// begin tmp := UnitsInside ( factory ) ;
10259: LD_ADDR_VAR 0 8
10263: PUSH
10264: LD_VAR 0 1
10268: PPUSH
10269: CALL_OW 313
10273: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10274: LD_VAR 0 8
10278: PPUSH
10279: LD_INT 25
10281: PUSH
10282: LD_INT 12
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PPUSH
10289: CALL_OW 72
10293: NOT
10294: IFFALSE 10304
// control := control_manual ;
10296: LD_ADDR_VAR 0 4
10300: PUSH
10301: LD_INT 1
10303: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10304: LD_ADDR_VAR 0 8
10308: PUSH
10309: LD_VAR 0 1
10313: PPUSH
10314: CALL 10001 0 1
10318: ST_TO_ADDR
// if tmp then
10319: LD_VAR 0 8
10323: IFFALSE 10366
// begin for i in tmp do
10325: LD_ADDR_VAR 0 7
10329: PUSH
10330: LD_VAR 0 8
10334: PUSH
10335: FOR_IN
10336: IFFALSE 10364
// if i [ 1 ] = b_ext_radio then
10338: LD_VAR 0 7
10342: PUSH
10343: LD_INT 1
10345: ARRAY
10346: PUSH
10347: LD_INT 22
10349: EQUAL
10350: IFFALSE 10362
// begin control := control_remote ;
10352: LD_ADDR_VAR 0 4
10356: PUSH
10357: LD_INT 2
10359: ST_TO_ADDR
// break ;
10360: GO 10364
// end ;
10362: GO 10335
10364: POP
10365: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10366: LD_VAR 0 1
10370: PPUSH
10371: LD_VAR 0 2
10375: PPUSH
10376: LD_VAR 0 3
10380: PPUSH
10381: LD_VAR 0 4
10385: PPUSH
10386: LD_VAR 0 5
10390: PPUSH
10391: CALL_OW 448
10395: IFFALSE 10430
// begin result := [ chassis , engine , control , weapon ] ;
10397: LD_ADDR_VAR 0 6
10401: PUSH
10402: LD_VAR 0 2
10406: PUSH
10407: LD_VAR 0 3
10411: PUSH
10412: LD_VAR 0 4
10416: PUSH
10417: LD_VAR 0 5
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: ST_TO_ADDR
// exit ;
10428: GO 10842
// end ; _chassis := AvailableChassisList ( factory ) ;
10430: LD_ADDR_VAR 0 9
10434: PUSH
10435: LD_VAR 0 1
10439: PPUSH
10440: CALL_OW 475
10444: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10445: LD_ADDR_VAR 0 11
10449: PUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: CALL_OW 476
10459: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10460: LD_ADDR_VAR 0 12
10464: PUSH
10465: LD_VAR 0 1
10469: PPUSH
10470: CALL_OW 477
10474: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10475: LD_ADDR_VAR 0 10
10479: PUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: CALL_OW 478
10489: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10490: LD_VAR 0 9
10494: NOT
10495: PUSH
10496: LD_VAR 0 11
10500: NOT
10501: OR
10502: PUSH
10503: LD_VAR 0 12
10507: NOT
10508: OR
10509: PUSH
10510: LD_VAR 0 10
10514: NOT
10515: OR
10516: IFFALSE 10551
// begin result := [ chassis , engine , control , weapon ] ;
10518: LD_ADDR_VAR 0 6
10522: PUSH
10523: LD_VAR 0 2
10527: PUSH
10528: LD_VAR 0 3
10532: PUSH
10533: LD_VAR 0 4
10537: PUSH
10538: LD_VAR 0 5
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: ST_TO_ADDR
// exit ;
10549: GO 10842
// end ; if not chassis in _chassis then
10551: LD_VAR 0 2
10555: PUSH
10556: LD_VAR 0 9
10560: IN
10561: NOT
10562: IFFALSE 10588
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10564: LD_ADDR_VAR 0 2
10568: PUSH
10569: LD_VAR 0 9
10573: PUSH
10574: LD_INT 1
10576: PPUSH
10577: LD_VAR 0 9
10581: PPUSH
10582: CALL_OW 12
10586: ARRAY
10587: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10588: LD_VAR 0 2
10592: PPUSH
10593: LD_VAR 0 3
10597: PPUSH
10598: CALL 10847 0 2
10602: NOT
10603: IFFALSE 10662
// repeat engine := _engine [ 1 ] ;
10605: LD_ADDR_VAR 0 3
10609: PUSH
10610: LD_VAR 0 11
10614: PUSH
10615: LD_INT 1
10617: ARRAY
10618: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10619: LD_ADDR_VAR 0 11
10623: PUSH
10624: LD_VAR 0 11
10628: PPUSH
10629: LD_INT 1
10631: PPUSH
10632: CALL_OW 3
10636: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10637: LD_VAR 0 2
10641: PPUSH
10642: LD_VAR 0 3
10646: PPUSH
10647: CALL 10847 0 2
10651: PUSH
10652: LD_VAR 0 11
10656: PUSH
10657: EMPTY
10658: EQUAL
10659: OR
10660: IFFALSE 10605
// if not control in _control then
10662: LD_VAR 0 4
10666: PUSH
10667: LD_VAR 0 12
10671: IN
10672: NOT
10673: IFFALSE 10699
// control := _control [ rand ( 1 , _control ) ] ;
10675: LD_ADDR_VAR 0 4
10679: PUSH
10680: LD_VAR 0 12
10684: PUSH
10685: LD_INT 1
10687: PPUSH
10688: LD_VAR 0 12
10692: PPUSH
10693: CALL_OW 12
10697: ARRAY
10698: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
10699: LD_VAR 0 2
10703: PPUSH
10704: LD_VAR 0 5
10708: PPUSH
10709: CALL 11067 0 2
10713: NOT
10714: IFFALSE 10773
// repeat weapon := _weapon [ 1 ] ;
10716: LD_ADDR_VAR 0 5
10720: PUSH
10721: LD_VAR 0 10
10725: PUSH
10726: LD_INT 1
10728: ARRAY
10729: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
10730: LD_ADDR_VAR 0 10
10734: PUSH
10735: LD_VAR 0 10
10739: PPUSH
10740: LD_INT 1
10742: PPUSH
10743: CALL_OW 3
10747: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
10748: LD_VAR 0 2
10752: PPUSH
10753: LD_VAR 0 5
10757: PPUSH
10758: CALL 11067 0 2
10762: PUSH
10763: LD_VAR 0 10
10767: PUSH
10768: EMPTY
10769: EQUAL
10770: OR
10771: IFFALSE 10716
// result := [ ] ;
10773: LD_ADDR_VAR 0 6
10777: PUSH
10778: EMPTY
10779: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10780: LD_VAR 0 1
10784: PPUSH
10785: LD_VAR 0 2
10789: PPUSH
10790: LD_VAR 0 3
10794: PPUSH
10795: LD_VAR 0 4
10799: PPUSH
10800: LD_VAR 0 5
10804: PPUSH
10805: CALL_OW 448
10809: IFFALSE 10842
// result := [ chassis , engine , control , weapon ] ;
10811: LD_ADDR_VAR 0 6
10815: PUSH
10816: LD_VAR 0 2
10820: PUSH
10821: LD_VAR 0 3
10825: PUSH
10826: LD_VAR 0 4
10830: PUSH
10831: LD_VAR 0 5
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: ST_TO_ADDR
// end ;
10842: LD_VAR 0 6
10846: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
10847: LD_INT 0
10849: PPUSH
// if not chassis or not engine then
10850: LD_VAR 0 1
10854: NOT
10855: PUSH
10856: LD_VAR 0 2
10860: NOT
10861: OR
10862: IFFALSE 10866
// exit ;
10864: GO 11062
// case engine of engine_solar :
10866: LD_VAR 0 2
10870: PUSH
10871: LD_INT 2
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10917
10879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
10880: LD_ADDR_VAR 0 3
10884: PUSH
10885: LD_INT 11
10887: PUSH
10888: LD_INT 12
10890: PUSH
10891: LD_INT 13
10893: PUSH
10894: LD_INT 14
10896: PUSH
10897: LD_INT 1
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 3
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: ST_TO_ADDR
10915: GO 11046
10917: LD_INT 1
10919: DOUBLE
10920: EQUAL
10921: IFTRUE 10925
10923: GO 10987
10925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
10926: LD_ADDR_VAR 0 3
10930: PUSH
10931: LD_INT 11
10933: PUSH
10934: LD_INT 12
10936: PUSH
10937: LD_INT 13
10939: PUSH
10940: LD_INT 14
10942: PUSH
10943: LD_INT 1
10945: PUSH
10946: LD_INT 2
10948: PUSH
10949: LD_INT 3
10951: PUSH
10952: LD_INT 4
10954: PUSH
10955: LD_INT 5
10957: PUSH
10958: LD_INT 21
10960: PUSH
10961: LD_INT 23
10963: PUSH
10964: LD_INT 22
10966: PUSH
10967: LD_INT 24
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: ST_TO_ADDR
10985: GO 11046
10987: LD_INT 3
10989: DOUBLE
10990: EQUAL
10991: IFTRUE 10995
10993: GO 11045
10995: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10996: LD_ADDR_VAR 0 3
11000: PUSH
11001: LD_INT 13
11003: PUSH
11004: LD_INT 14
11006: PUSH
11007: LD_INT 2
11009: PUSH
11010: LD_INT 3
11012: PUSH
11013: LD_INT 4
11015: PUSH
11016: LD_INT 5
11018: PUSH
11019: LD_INT 21
11021: PUSH
11022: LD_INT 22
11024: PUSH
11025: LD_INT 23
11027: PUSH
11028: LD_INT 24
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: ST_TO_ADDR
11043: GO 11046
11045: POP
// result := ( chassis in result ) ;
11046: LD_ADDR_VAR 0 3
11050: PUSH
11051: LD_VAR 0 1
11055: PUSH
11056: LD_VAR 0 3
11060: IN
11061: ST_TO_ADDR
// end ;
11062: LD_VAR 0 3
11066: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11067: LD_INT 0
11069: PPUSH
// if not chassis or not weapon then
11070: LD_VAR 0 1
11074: NOT
11075: PUSH
11076: LD_VAR 0 2
11080: NOT
11081: OR
11082: IFFALSE 11086
// exit ;
11084: GO 12146
// case weapon of us_machine_gun :
11086: LD_VAR 0 2
11090: PUSH
11091: LD_INT 2
11093: DOUBLE
11094: EQUAL
11095: IFTRUE 11099
11097: GO 11129
11099: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11100: LD_ADDR_VAR 0 3
11104: PUSH
11105: LD_INT 1
11107: PUSH
11108: LD_INT 2
11110: PUSH
11111: LD_INT 3
11113: PUSH
11114: LD_INT 4
11116: PUSH
11117: LD_INT 5
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: ST_TO_ADDR
11127: GO 12130
11129: LD_INT 3
11131: DOUBLE
11132: EQUAL
11133: IFTRUE 11137
11135: GO 11167
11137: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11138: LD_ADDR_VAR 0 3
11142: PUSH
11143: LD_INT 1
11145: PUSH
11146: LD_INT 2
11148: PUSH
11149: LD_INT 3
11151: PUSH
11152: LD_INT 4
11154: PUSH
11155: LD_INT 5
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: ST_TO_ADDR
11165: GO 12130
11167: LD_INT 11
11169: DOUBLE
11170: EQUAL
11171: IFTRUE 11175
11173: GO 11205
11175: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11176: LD_ADDR_VAR 0 3
11180: PUSH
11181: LD_INT 1
11183: PUSH
11184: LD_INT 2
11186: PUSH
11187: LD_INT 3
11189: PUSH
11190: LD_INT 4
11192: PUSH
11193: LD_INT 5
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: ST_TO_ADDR
11203: GO 12130
11205: LD_INT 4
11207: DOUBLE
11208: EQUAL
11209: IFTRUE 11213
11211: GO 11239
11213: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11214: LD_ADDR_VAR 0 3
11218: PUSH
11219: LD_INT 2
11221: PUSH
11222: LD_INT 3
11224: PUSH
11225: LD_INT 4
11227: PUSH
11228: LD_INT 5
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: ST_TO_ADDR
11237: GO 12130
11239: LD_INT 5
11241: DOUBLE
11242: EQUAL
11243: IFTRUE 11247
11245: GO 11273
11247: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11248: LD_ADDR_VAR 0 3
11252: PUSH
11253: LD_INT 2
11255: PUSH
11256: LD_INT 3
11258: PUSH
11259: LD_INT 4
11261: PUSH
11262: LD_INT 5
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: ST_TO_ADDR
11271: GO 12130
11273: LD_INT 9
11275: DOUBLE
11276: EQUAL
11277: IFTRUE 11281
11279: GO 11307
11281: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11282: LD_ADDR_VAR 0 3
11286: PUSH
11287: LD_INT 2
11289: PUSH
11290: LD_INT 3
11292: PUSH
11293: LD_INT 4
11295: PUSH
11296: LD_INT 5
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: ST_TO_ADDR
11305: GO 12130
11307: LD_INT 7
11309: DOUBLE
11310: EQUAL
11311: IFTRUE 11315
11313: GO 11341
11315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11316: LD_ADDR_VAR 0 3
11320: PUSH
11321: LD_INT 2
11323: PUSH
11324: LD_INT 3
11326: PUSH
11327: LD_INT 4
11329: PUSH
11330: LD_INT 5
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: ST_TO_ADDR
11339: GO 12130
11341: LD_INT 12
11343: DOUBLE
11344: EQUAL
11345: IFTRUE 11349
11347: GO 11375
11349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11350: LD_ADDR_VAR 0 3
11354: PUSH
11355: LD_INT 2
11357: PUSH
11358: LD_INT 3
11360: PUSH
11361: LD_INT 4
11363: PUSH
11364: LD_INT 5
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: ST_TO_ADDR
11373: GO 12130
11375: LD_INT 13
11377: DOUBLE
11378: EQUAL
11379: IFTRUE 11383
11381: GO 11409
11383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11384: LD_ADDR_VAR 0 3
11388: PUSH
11389: LD_INT 2
11391: PUSH
11392: LD_INT 3
11394: PUSH
11395: LD_INT 4
11397: PUSH
11398: LD_INT 5
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: ST_TO_ADDR
11407: GO 12130
11409: LD_INT 14
11411: DOUBLE
11412: EQUAL
11413: IFTRUE 11417
11415: GO 11435
11417: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11418: LD_ADDR_VAR 0 3
11422: PUSH
11423: LD_INT 4
11425: PUSH
11426: LD_INT 5
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: ST_TO_ADDR
11433: GO 12130
11435: LD_INT 6
11437: DOUBLE
11438: EQUAL
11439: IFTRUE 11443
11441: GO 11461
11443: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11444: LD_ADDR_VAR 0 3
11448: PUSH
11449: LD_INT 4
11451: PUSH
11452: LD_INT 5
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: ST_TO_ADDR
11459: GO 12130
11461: LD_INT 10
11463: DOUBLE
11464: EQUAL
11465: IFTRUE 11469
11467: GO 11487
11469: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11470: LD_ADDR_VAR 0 3
11474: PUSH
11475: LD_INT 4
11477: PUSH
11478: LD_INT 5
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: ST_TO_ADDR
11485: GO 12130
11487: LD_INT 22
11489: DOUBLE
11490: EQUAL
11491: IFTRUE 11495
11493: GO 11521
11495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11496: LD_ADDR_VAR 0 3
11500: PUSH
11501: LD_INT 11
11503: PUSH
11504: LD_INT 12
11506: PUSH
11507: LD_INT 13
11509: PUSH
11510: LD_INT 14
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: ST_TO_ADDR
11519: GO 12130
11521: LD_INT 23
11523: DOUBLE
11524: EQUAL
11525: IFTRUE 11529
11527: GO 11555
11529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11530: LD_ADDR_VAR 0 3
11534: PUSH
11535: LD_INT 11
11537: PUSH
11538: LD_INT 12
11540: PUSH
11541: LD_INT 13
11543: PUSH
11544: LD_INT 14
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: ST_TO_ADDR
11553: GO 12130
11555: LD_INT 24
11557: DOUBLE
11558: EQUAL
11559: IFTRUE 11563
11561: GO 11589
11563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11564: LD_ADDR_VAR 0 3
11568: PUSH
11569: LD_INT 11
11571: PUSH
11572: LD_INT 12
11574: PUSH
11575: LD_INT 13
11577: PUSH
11578: LD_INT 14
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: ST_TO_ADDR
11587: GO 12130
11589: LD_INT 30
11591: DOUBLE
11592: EQUAL
11593: IFTRUE 11597
11595: GO 11623
11597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11598: LD_ADDR_VAR 0 3
11602: PUSH
11603: LD_INT 11
11605: PUSH
11606: LD_INT 12
11608: PUSH
11609: LD_INT 13
11611: PUSH
11612: LD_INT 14
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: ST_TO_ADDR
11621: GO 12130
11623: LD_INT 25
11625: DOUBLE
11626: EQUAL
11627: IFTRUE 11631
11629: GO 11649
11631: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11632: LD_ADDR_VAR 0 3
11636: PUSH
11637: LD_INT 13
11639: PUSH
11640: LD_INT 14
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: ST_TO_ADDR
11647: GO 12130
11649: LD_INT 27
11651: DOUBLE
11652: EQUAL
11653: IFTRUE 11657
11655: GO 11675
11657: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
11658: LD_ADDR_VAR 0 3
11662: PUSH
11663: LD_INT 13
11665: PUSH
11666: LD_INT 14
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: ST_TO_ADDR
11673: GO 12130
11675: LD_INT 92
11677: DOUBLE
11678: EQUAL
11679: IFTRUE 11683
11681: GO 11709
11683: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
11684: LD_ADDR_VAR 0 3
11688: PUSH
11689: LD_INT 11
11691: PUSH
11692: LD_INT 12
11694: PUSH
11695: LD_INT 13
11697: PUSH
11698: LD_INT 14
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: ST_TO_ADDR
11707: GO 12130
11709: LD_INT 28
11711: DOUBLE
11712: EQUAL
11713: IFTRUE 11717
11715: GO 11735
11717: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
11718: LD_ADDR_VAR 0 3
11722: PUSH
11723: LD_INT 13
11725: PUSH
11726: LD_INT 14
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: ST_TO_ADDR
11733: GO 12130
11735: LD_INT 29
11737: DOUBLE
11738: EQUAL
11739: IFTRUE 11743
11741: GO 11761
11743: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
11744: LD_ADDR_VAR 0 3
11748: PUSH
11749: LD_INT 13
11751: PUSH
11752: LD_INT 14
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: ST_TO_ADDR
11759: GO 12130
11761: LD_INT 31
11763: DOUBLE
11764: EQUAL
11765: IFTRUE 11769
11767: GO 11787
11769: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: LD_INT 13
11777: PUSH
11778: LD_INT 14
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: ST_TO_ADDR
11785: GO 12130
11787: LD_INT 26
11789: DOUBLE
11790: EQUAL
11791: IFTRUE 11795
11793: GO 11813
11795: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
11796: LD_ADDR_VAR 0 3
11800: PUSH
11801: LD_INT 13
11803: PUSH
11804: LD_INT 14
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: ST_TO_ADDR
11811: GO 12130
11813: LD_INT 42
11815: DOUBLE
11816: EQUAL
11817: IFTRUE 11821
11819: GO 11847
11821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
11822: LD_ADDR_VAR 0 3
11826: PUSH
11827: LD_INT 21
11829: PUSH
11830: LD_INT 22
11832: PUSH
11833: LD_INT 23
11835: PUSH
11836: LD_INT 24
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: ST_TO_ADDR
11845: GO 12130
11847: LD_INT 43
11849: DOUBLE
11850: EQUAL
11851: IFTRUE 11855
11853: GO 11881
11855: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
11856: LD_ADDR_VAR 0 3
11860: PUSH
11861: LD_INT 21
11863: PUSH
11864: LD_INT 22
11866: PUSH
11867: LD_INT 23
11869: PUSH
11870: LD_INT 24
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: ST_TO_ADDR
11879: GO 12130
11881: LD_INT 44
11883: DOUBLE
11884: EQUAL
11885: IFTRUE 11889
11887: GO 11915
11889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: LD_INT 21
11897: PUSH
11898: LD_INT 22
11900: PUSH
11901: LD_INT 23
11903: PUSH
11904: LD_INT 24
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: ST_TO_ADDR
11913: GO 12130
11915: LD_INT 45
11917: DOUBLE
11918: EQUAL
11919: IFTRUE 11923
11921: GO 11949
11923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
11924: LD_ADDR_VAR 0 3
11928: PUSH
11929: LD_INT 21
11931: PUSH
11932: LD_INT 22
11934: PUSH
11935: LD_INT 23
11937: PUSH
11938: LD_INT 24
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: ST_TO_ADDR
11947: GO 12130
11949: LD_INT 49
11951: DOUBLE
11952: EQUAL
11953: IFTRUE 11957
11955: GO 11983
11957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: LD_INT 21
11965: PUSH
11966: LD_INT 22
11968: PUSH
11969: LD_INT 23
11971: PUSH
11972: LD_INT 24
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: ST_TO_ADDR
11981: GO 12130
11983: LD_INT 51
11985: DOUBLE
11986: EQUAL
11987: IFTRUE 11991
11989: GO 12017
11991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
11992: LD_ADDR_VAR 0 3
11996: PUSH
11997: LD_INT 21
11999: PUSH
12000: LD_INT 22
12002: PUSH
12003: LD_INT 23
12005: PUSH
12006: LD_INT 24
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: ST_TO_ADDR
12015: GO 12130
12017: LD_INT 52
12019: DOUBLE
12020: EQUAL
12021: IFTRUE 12025
12023: GO 12051
12025: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12026: LD_ADDR_VAR 0 3
12030: PUSH
12031: LD_INT 21
12033: PUSH
12034: LD_INT 22
12036: PUSH
12037: LD_INT 23
12039: PUSH
12040: LD_INT 24
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: ST_TO_ADDR
12049: GO 12130
12051: LD_INT 53
12053: DOUBLE
12054: EQUAL
12055: IFTRUE 12059
12057: GO 12077
12059: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12060: LD_ADDR_VAR 0 3
12064: PUSH
12065: LD_INT 23
12067: PUSH
12068: LD_INT 24
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: ST_TO_ADDR
12075: GO 12130
12077: LD_INT 46
12079: DOUBLE
12080: EQUAL
12081: IFTRUE 12085
12083: GO 12103
12085: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12086: LD_ADDR_VAR 0 3
12090: PUSH
12091: LD_INT 23
12093: PUSH
12094: LD_INT 24
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: ST_TO_ADDR
12101: GO 12130
12103: LD_INT 47
12105: DOUBLE
12106: EQUAL
12107: IFTRUE 12111
12109: GO 12129
12111: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12112: LD_ADDR_VAR 0 3
12116: PUSH
12117: LD_INT 23
12119: PUSH
12120: LD_INT 24
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: ST_TO_ADDR
12127: GO 12130
12129: POP
// result := ( chassis in result ) ;
12130: LD_ADDR_VAR 0 3
12134: PUSH
12135: LD_VAR 0 1
12139: PUSH
12140: LD_VAR 0 3
12144: IN
12145: ST_TO_ADDR
// end ;
12146: LD_VAR 0 3
12150: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12151: LD_INT 0
12153: PPUSH
12154: PPUSH
12155: PPUSH
12156: PPUSH
12157: PPUSH
12158: PPUSH
12159: PPUSH
// result := array ;
12160: LD_ADDR_VAR 0 5
12164: PUSH
12165: LD_VAR 0 1
12169: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12170: LD_VAR 0 1
12174: NOT
12175: PUSH
12176: LD_VAR 0 2
12180: NOT
12181: OR
12182: PUSH
12183: LD_VAR 0 3
12187: NOT
12188: OR
12189: PUSH
12190: LD_VAR 0 2
12194: PUSH
12195: LD_VAR 0 1
12199: GREATER
12200: OR
12201: PUSH
12202: LD_VAR 0 3
12206: PUSH
12207: LD_VAR 0 1
12211: GREATER
12212: OR
12213: IFFALSE 12217
// exit ;
12215: GO 12513
// if direction then
12217: LD_VAR 0 4
12221: IFFALSE 12285
// begin d := 1 ;
12223: LD_ADDR_VAR 0 9
12227: PUSH
12228: LD_INT 1
12230: ST_TO_ADDR
// if i_from > i_to then
12231: LD_VAR 0 2
12235: PUSH
12236: LD_VAR 0 3
12240: GREATER
12241: IFFALSE 12267
// length := ( array - i_from ) + i_to else
12243: LD_ADDR_VAR 0 11
12247: PUSH
12248: LD_VAR 0 1
12252: PUSH
12253: LD_VAR 0 2
12257: MINUS
12258: PUSH
12259: LD_VAR 0 3
12263: PLUS
12264: ST_TO_ADDR
12265: GO 12283
// length := i_to - i_from ;
12267: LD_ADDR_VAR 0 11
12271: PUSH
12272: LD_VAR 0 3
12276: PUSH
12277: LD_VAR 0 2
12281: MINUS
12282: ST_TO_ADDR
// end else
12283: GO 12346
// begin d := - 1 ;
12285: LD_ADDR_VAR 0 9
12289: PUSH
12290: LD_INT 1
12292: NEG
12293: ST_TO_ADDR
// if i_from > i_to then
12294: LD_VAR 0 2
12298: PUSH
12299: LD_VAR 0 3
12303: GREATER
12304: IFFALSE 12324
// length := i_from - i_to else
12306: LD_ADDR_VAR 0 11
12310: PUSH
12311: LD_VAR 0 2
12315: PUSH
12316: LD_VAR 0 3
12320: MINUS
12321: ST_TO_ADDR
12322: GO 12346
// length := ( array - i_to ) + i_from ;
12324: LD_ADDR_VAR 0 11
12328: PUSH
12329: LD_VAR 0 1
12333: PUSH
12334: LD_VAR 0 3
12338: MINUS
12339: PUSH
12340: LD_VAR 0 2
12344: PLUS
12345: ST_TO_ADDR
// end ; if not length then
12346: LD_VAR 0 11
12350: NOT
12351: IFFALSE 12355
// exit ;
12353: GO 12513
// tmp := array ;
12355: LD_ADDR_VAR 0 10
12359: PUSH
12360: LD_VAR 0 1
12364: ST_TO_ADDR
// for i = 1 to length do
12365: LD_ADDR_VAR 0 6
12369: PUSH
12370: DOUBLE
12371: LD_INT 1
12373: DEC
12374: ST_TO_ADDR
12375: LD_VAR 0 11
12379: PUSH
12380: FOR_TO
12381: IFFALSE 12501
// begin for j = 1 to array do
12383: LD_ADDR_VAR 0 7
12387: PUSH
12388: DOUBLE
12389: LD_INT 1
12391: DEC
12392: ST_TO_ADDR
12393: LD_VAR 0 1
12397: PUSH
12398: FOR_TO
12399: IFFALSE 12487
// begin k := j + d ;
12401: LD_ADDR_VAR 0 8
12405: PUSH
12406: LD_VAR 0 7
12410: PUSH
12411: LD_VAR 0 9
12415: PLUS
12416: ST_TO_ADDR
// if k > array then
12417: LD_VAR 0 8
12421: PUSH
12422: LD_VAR 0 1
12426: GREATER
12427: IFFALSE 12437
// k := 1 ;
12429: LD_ADDR_VAR 0 8
12433: PUSH
12434: LD_INT 1
12436: ST_TO_ADDR
// if not k then
12437: LD_VAR 0 8
12441: NOT
12442: IFFALSE 12454
// k := array ;
12444: LD_ADDR_VAR 0 8
12448: PUSH
12449: LD_VAR 0 1
12453: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12454: LD_ADDR_VAR 0 10
12458: PUSH
12459: LD_VAR 0 10
12463: PPUSH
12464: LD_VAR 0 8
12468: PPUSH
12469: LD_VAR 0 1
12473: PUSH
12474: LD_VAR 0 7
12478: ARRAY
12479: PPUSH
12480: CALL_OW 1
12484: ST_TO_ADDR
// end ;
12485: GO 12398
12487: POP
12488: POP
// array := tmp ;
12489: LD_ADDR_VAR 0 1
12493: PUSH
12494: LD_VAR 0 10
12498: ST_TO_ADDR
// end ;
12499: GO 12380
12501: POP
12502: POP
// result := array ;
12503: LD_ADDR_VAR 0 5
12507: PUSH
12508: LD_VAR 0 1
12512: ST_TO_ADDR
// end ;
12513: LD_VAR 0 5
12517: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12518: LD_INT 0
12520: PPUSH
12521: PPUSH
// result := 0 ;
12522: LD_ADDR_VAR 0 3
12526: PUSH
12527: LD_INT 0
12529: ST_TO_ADDR
// if not array or not value in array then
12530: LD_VAR 0 1
12534: NOT
12535: PUSH
12536: LD_VAR 0 2
12540: PUSH
12541: LD_VAR 0 1
12545: IN
12546: NOT
12547: OR
12548: IFFALSE 12552
// exit ;
12550: GO 12606
// for i = 1 to array do
12552: LD_ADDR_VAR 0 4
12556: PUSH
12557: DOUBLE
12558: LD_INT 1
12560: DEC
12561: ST_TO_ADDR
12562: LD_VAR 0 1
12566: PUSH
12567: FOR_TO
12568: IFFALSE 12604
// if value = array [ i ] then
12570: LD_VAR 0 2
12574: PUSH
12575: LD_VAR 0 1
12579: PUSH
12580: LD_VAR 0 4
12584: ARRAY
12585: EQUAL
12586: IFFALSE 12602
// begin result := i ;
12588: LD_ADDR_VAR 0 3
12592: PUSH
12593: LD_VAR 0 4
12597: ST_TO_ADDR
// exit ;
12598: POP
12599: POP
12600: GO 12606
// end ;
12602: GO 12567
12604: POP
12605: POP
// end ;
12606: LD_VAR 0 3
12610: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12611: LD_INT 0
12613: PPUSH
// vc_chassis := chassis ;
12614: LD_ADDR_OWVAR 37
12618: PUSH
12619: LD_VAR 0 1
12623: ST_TO_ADDR
// vc_engine := engine ;
12624: LD_ADDR_OWVAR 39
12628: PUSH
12629: LD_VAR 0 2
12633: ST_TO_ADDR
// vc_control := control ;
12634: LD_ADDR_OWVAR 38
12638: PUSH
12639: LD_VAR 0 3
12643: ST_TO_ADDR
// vc_weapon := weapon ;
12644: LD_ADDR_OWVAR 40
12648: PUSH
12649: LD_VAR 0 4
12653: ST_TO_ADDR
// vc_fuel_battery := fuel ;
12654: LD_ADDR_OWVAR 41
12658: PUSH
12659: LD_VAR 0 5
12663: ST_TO_ADDR
// end ;
12664: LD_VAR 0 6
12668: RET
// export function WantPlant ( unit ) ; var task ; begin
12669: LD_INT 0
12671: PPUSH
12672: PPUSH
// result := false ;
12673: LD_ADDR_VAR 0 2
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
12681: LD_ADDR_VAR 0 3
12685: PUSH
12686: LD_VAR 0 1
12690: PPUSH
12691: CALL_OW 437
12695: ST_TO_ADDR
// if task then
12696: LD_VAR 0 3
12700: IFFALSE 12728
// if task [ 1 ] [ 1 ] = p then
12702: LD_VAR 0 3
12706: PUSH
12707: LD_INT 1
12709: ARRAY
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PUSH
12715: LD_STRING p
12717: EQUAL
12718: IFFALSE 12728
// result := true ;
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: LD_INT 1
12727: ST_TO_ADDR
// end ;
12728: LD_VAR 0 2
12732: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
12733: LD_INT 0
12735: PPUSH
12736: PPUSH
12737: PPUSH
12738: PPUSH
// if pos < 1 then
12739: LD_VAR 0 2
12743: PUSH
12744: LD_INT 1
12746: LESS
12747: IFFALSE 12751
// exit ;
12749: GO 13054
// if pos = 1 then
12751: LD_VAR 0 2
12755: PUSH
12756: LD_INT 1
12758: EQUAL
12759: IFFALSE 12792
// result := Replace ( arr , pos [ 1 ] , value ) else
12761: LD_ADDR_VAR 0 4
12765: PUSH
12766: LD_VAR 0 1
12770: PPUSH
12771: LD_VAR 0 2
12775: PUSH
12776: LD_INT 1
12778: ARRAY
12779: PPUSH
12780: LD_VAR 0 3
12784: PPUSH
12785: CALL_OW 1
12789: ST_TO_ADDR
12790: GO 13054
// begin tmp := arr ;
12792: LD_ADDR_VAR 0 6
12796: PUSH
12797: LD_VAR 0 1
12801: ST_TO_ADDR
// s_arr := [ tmp ] ;
12802: LD_ADDR_VAR 0 7
12806: PUSH
12807: LD_VAR 0 6
12811: PUSH
12812: EMPTY
12813: LIST
12814: ST_TO_ADDR
// for i = 1 to pos - 1 do
12815: LD_ADDR_VAR 0 5
12819: PUSH
12820: DOUBLE
12821: LD_INT 1
12823: DEC
12824: ST_TO_ADDR
12825: LD_VAR 0 2
12829: PUSH
12830: LD_INT 1
12832: MINUS
12833: PUSH
12834: FOR_TO
12835: IFFALSE 12880
// begin tmp := tmp [ pos [ i ] ] ;
12837: LD_ADDR_VAR 0 6
12841: PUSH
12842: LD_VAR 0 6
12846: PUSH
12847: LD_VAR 0 2
12851: PUSH
12852: LD_VAR 0 5
12856: ARRAY
12857: ARRAY
12858: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
12859: LD_ADDR_VAR 0 7
12863: PUSH
12864: LD_VAR 0 7
12868: PUSH
12869: LD_VAR 0 6
12873: PUSH
12874: EMPTY
12875: LIST
12876: ADD
12877: ST_TO_ADDR
// end ;
12878: GO 12834
12880: POP
12881: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
12882: LD_ADDR_VAR 0 6
12886: PUSH
12887: LD_VAR 0 6
12891: PPUSH
12892: LD_VAR 0 2
12896: PUSH
12897: LD_VAR 0 2
12901: ARRAY
12902: PPUSH
12903: LD_VAR 0 3
12907: PPUSH
12908: CALL_OW 1
12912: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
12913: LD_ADDR_VAR 0 7
12917: PUSH
12918: LD_VAR 0 7
12922: PPUSH
12923: LD_VAR 0 7
12927: PPUSH
12928: LD_VAR 0 6
12932: PPUSH
12933: CALL_OW 1
12937: ST_TO_ADDR
// for i = s_arr downto 2 do
12938: LD_ADDR_VAR 0 5
12942: PUSH
12943: DOUBLE
12944: LD_VAR 0 7
12948: INC
12949: ST_TO_ADDR
12950: LD_INT 2
12952: PUSH
12953: FOR_DOWNTO
12954: IFFALSE 13038
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
12956: LD_ADDR_VAR 0 6
12960: PUSH
12961: LD_VAR 0 7
12965: PUSH
12966: LD_VAR 0 5
12970: PUSH
12971: LD_INT 1
12973: MINUS
12974: ARRAY
12975: PPUSH
12976: LD_VAR 0 2
12980: PUSH
12981: LD_VAR 0 5
12985: PUSH
12986: LD_INT 1
12988: MINUS
12989: ARRAY
12990: PPUSH
12991: LD_VAR 0 7
12995: PUSH
12996: LD_VAR 0 5
13000: ARRAY
13001: PPUSH
13002: CALL_OW 1
13006: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13007: LD_ADDR_VAR 0 7
13011: PUSH
13012: LD_VAR 0 7
13016: PPUSH
13017: LD_VAR 0 5
13021: PUSH
13022: LD_INT 1
13024: MINUS
13025: PPUSH
13026: LD_VAR 0 6
13030: PPUSH
13031: CALL_OW 1
13035: ST_TO_ADDR
// end ;
13036: GO 12953
13038: POP
13039: POP
// result := s_arr [ 1 ] ;
13040: LD_ADDR_VAR 0 4
13044: PUSH
13045: LD_VAR 0 7
13049: PUSH
13050: LD_INT 1
13052: ARRAY
13053: ST_TO_ADDR
// end ; end ;
13054: LD_VAR 0 4
13058: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13059: LD_INT 0
13061: PPUSH
13062: PPUSH
// if not list then
13063: LD_VAR 0 1
13067: NOT
13068: IFFALSE 13072
// exit ;
13070: GO 13163
// i := list [ pos1 ] ;
13072: LD_ADDR_VAR 0 5
13076: PUSH
13077: LD_VAR 0 1
13081: PUSH
13082: LD_VAR 0 2
13086: ARRAY
13087: ST_TO_ADDR
// if not i then
13088: LD_VAR 0 5
13092: NOT
13093: IFFALSE 13097
// exit ;
13095: GO 13163
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13097: LD_ADDR_VAR 0 1
13101: PUSH
13102: LD_VAR 0 1
13106: PPUSH
13107: LD_VAR 0 2
13111: PPUSH
13112: LD_VAR 0 1
13116: PUSH
13117: LD_VAR 0 3
13121: ARRAY
13122: PPUSH
13123: CALL_OW 1
13127: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13128: LD_ADDR_VAR 0 1
13132: PUSH
13133: LD_VAR 0 1
13137: PPUSH
13138: LD_VAR 0 3
13142: PPUSH
13143: LD_VAR 0 5
13147: PPUSH
13148: CALL_OW 1
13152: ST_TO_ADDR
// result := list ;
13153: LD_ADDR_VAR 0 4
13157: PUSH
13158: LD_VAR 0 1
13162: ST_TO_ADDR
// end ;
13163: LD_VAR 0 4
13167: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13168: LD_INT 0
13170: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13171: LD_ADDR_VAR 0 5
13175: PUSH
13176: LD_VAR 0 1
13180: PPUSH
13181: CALL_OW 250
13185: PPUSH
13186: LD_VAR 0 1
13190: PPUSH
13191: CALL_OW 251
13195: PPUSH
13196: LD_VAR 0 2
13200: PPUSH
13201: LD_VAR 0 3
13205: PPUSH
13206: LD_VAR 0 4
13210: PPUSH
13211: CALL 13221 0 5
13215: ST_TO_ADDR
// end ;
13216: LD_VAR 0 5
13220: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13221: LD_INT 0
13223: PPUSH
13224: PPUSH
13225: PPUSH
13226: PPUSH
// if not list then
13227: LD_VAR 0 3
13231: NOT
13232: IFFALSE 13236
// exit ;
13234: GO 13624
// result := [ ] ;
13236: LD_ADDR_VAR 0 6
13240: PUSH
13241: EMPTY
13242: ST_TO_ADDR
// for i in list do
13243: LD_ADDR_VAR 0 7
13247: PUSH
13248: LD_VAR 0 3
13252: PUSH
13253: FOR_IN
13254: IFFALSE 13456
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13256: LD_ADDR_VAR 0 9
13260: PUSH
13261: LD_VAR 0 7
13265: PPUSH
13266: LD_VAR 0 1
13270: PPUSH
13271: LD_VAR 0 2
13275: PPUSH
13276: CALL_OW 297
13280: ST_TO_ADDR
// if not result then
13281: LD_VAR 0 6
13285: NOT
13286: IFFALSE 13312
// result := [ [ i , tmp ] ] else
13288: LD_ADDR_VAR 0 6
13292: PUSH
13293: LD_VAR 0 7
13297: PUSH
13298: LD_VAR 0 9
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: EMPTY
13308: LIST
13309: ST_TO_ADDR
13310: GO 13454
// begin if result [ result ] [ 2 ] < tmp then
13312: LD_VAR 0 6
13316: PUSH
13317: LD_VAR 0 6
13321: ARRAY
13322: PUSH
13323: LD_INT 2
13325: ARRAY
13326: PUSH
13327: LD_VAR 0 9
13331: LESS
13332: IFFALSE 13374
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13334: LD_ADDR_VAR 0 6
13338: PUSH
13339: LD_VAR 0 6
13343: PPUSH
13344: LD_VAR 0 6
13348: PUSH
13349: LD_INT 1
13351: PLUS
13352: PPUSH
13353: LD_VAR 0 7
13357: PUSH
13358: LD_VAR 0 9
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PPUSH
13367: CALL_OW 2
13371: ST_TO_ADDR
13372: GO 13454
// for j = 1 to result do
13374: LD_ADDR_VAR 0 8
13378: PUSH
13379: DOUBLE
13380: LD_INT 1
13382: DEC
13383: ST_TO_ADDR
13384: LD_VAR 0 6
13388: PUSH
13389: FOR_TO
13390: IFFALSE 13452
// begin if tmp < result [ j ] [ 2 ] then
13392: LD_VAR 0 9
13396: PUSH
13397: LD_VAR 0 6
13401: PUSH
13402: LD_VAR 0 8
13406: ARRAY
13407: PUSH
13408: LD_INT 2
13410: ARRAY
13411: LESS
13412: IFFALSE 13450
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13414: LD_ADDR_VAR 0 6
13418: PUSH
13419: LD_VAR 0 6
13423: PPUSH
13424: LD_VAR 0 8
13428: PPUSH
13429: LD_VAR 0 7
13433: PUSH
13434: LD_VAR 0 9
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PPUSH
13443: CALL_OW 2
13447: ST_TO_ADDR
// break ;
13448: GO 13452
// end ; end ;
13450: GO 13389
13452: POP
13453: POP
// end ; end ;
13454: GO 13253
13456: POP
13457: POP
// if result and not asc then
13458: LD_VAR 0 6
13462: PUSH
13463: LD_VAR 0 4
13467: NOT
13468: AND
13469: IFFALSE 13544
// begin tmp := result ;
13471: LD_ADDR_VAR 0 9
13475: PUSH
13476: LD_VAR 0 6
13480: ST_TO_ADDR
// for i = tmp downto 1 do
13481: LD_ADDR_VAR 0 7
13485: PUSH
13486: DOUBLE
13487: LD_VAR 0 9
13491: INC
13492: ST_TO_ADDR
13493: LD_INT 1
13495: PUSH
13496: FOR_DOWNTO
13497: IFFALSE 13542
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13499: LD_ADDR_VAR 0 6
13503: PUSH
13504: LD_VAR 0 6
13508: PPUSH
13509: LD_VAR 0 9
13513: PUSH
13514: LD_VAR 0 7
13518: MINUS
13519: PUSH
13520: LD_INT 1
13522: PLUS
13523: PPUSH
13524: LD_VAR 0 9
13528: PUSH
13529: LD_VAR 0 7
13533: ARRAY
13534: PPUSH
13535: CALL_OW 1
13539: ST_TO_ADDR
13540: GO 13496
13542: POP
13543: POP
// end ; tmp := [ ] ;
13544: LD_ADDR_VAR 0 9
13548: PUSH
13549: EMPTY
13550: ST_TO_ADDR
// if mode then
13551: LD_VAR 0 5
13555: IFFALSE 13624
// begin for i = 1 to result do
13557: LD_ADDR_VAR 0 7
13561: PUSH
13562: DOUBLE
13563: LD_INT 1
13565: DEC
13566: ST_TO_ADDR
13567: LD_VAR 0 6
13571: PUSH
13572: FOR_TO
13573: IFFALSE 13612
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13575: LD_ADDR_VAR 0 9
13579: PUSH
13580: LD_VAR 0 9
13584: PPUSH
13585: LD_VAR 0 7
13589: PPUSH
13590: LD_VAR 0 6
13594: PUSH
13595: LD_VAR 0 7
13599: ARRAY
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: PPUSH
13605: CALL_OW 1
13609: ST_TO_ADDR
13610: GO 13572
13612: POP
13613: POP
// result := tmp ;
13614: LD_ADDR_VAR 0 6
13618: PUSH
13619: LD_VAR 0 9
13623: ST_TO_ADDR
// end ; end ;
13624: LD_VAR 0 6
13628: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13629: LD_INT 0
13631: PPUSH
13632: PPUSH
13633: PPUSH
13634: PPUSH
13635: PPUSH
13636: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13637: LD_ADDR_VAR 0 5
13641: PUSH
13642: LD_INT 0
13644: PUSH
13645: LD_INT 0
13647: PUSH
13648: LD_INT 0
13650: PUSH
13651: EMPTY
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: ST_TO_ADDR
// if not x or not y then
13659: LD_VAR 0 2
13663: NOT
13664: PUSH
13665: LD_VAR 0 3
13669: NOT
13670: OR
13671: IFFALSE 13675
// exit ;
13673: GO 15325
// if not range then
13675: LD_VAR 0 4
13679: NOT
13680: IFFALSE 13690
// range := 10 ;
13682: LD_ADDR_VAR 0 4
13686: PUSH
13687: LD_INT 10
13689: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13690: LD_ADDR_VAR 0 8
13694: PUSH
13695: LD_INT 81
13697: PUSH
13698: LD_VAR 0 1
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 92
13709: PUSH
13710: LD_VAR 0 2
13714: PUSH
13715: LD_VAR 0 3
13719: PUSH
13720: LD_VAR 0 4
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 3
13733: PUSH
13734: LD_INT 21
13736: PUSH
13737: LD_INT 3
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: PPUSH
13753: CALL_OW 69
13757: ST_TO_ADDR
// if not tmp then
13758: LD_VAR 0 8
13762: NOT
13763: IFFALSE 13767
// exit ;
13765: GO 15325
// for i in tmp do
13767: LD_ADDR_VAR 0 6
13771: PUSH
13772: LD_VAR 0 8
13776: PUSH
13777: FOR_IN
13778: IFFALSE 15300
// begin points := [ 0 , 0 , 0 ] ;
13780: LD_ADDR_VAR 0 9
13784: PUSH
13785: LD_INT 0
13787: PUSH
13788: LD_INT 0
13790: PUSH
13791: LD_INT 0
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: ST_TO_ADDR
// bpoints := 1 ;
13799: LD_ADDR_VAR 0 10
13803: PUSH
13804: LD_INT 1
13806: ST_TO_ADDR
// case GetType ( i ) of unit_human :
13807: LD_VAR 0 6
13811: PPUSH
13812: CALL_OW 247
13816: PUSH
13817: LD_INT 1
13819: DOUBLE
13820: EQUAL
13821: IFTRUE 13825
13823: GO 14403
13825: POP
// begin if GetClass ( i ) = 1 then
13826: LD_VAR 0 6
13830: PPUSH
13831: CALL_OW 257
13835: PUSH
13836: LD_INT 1
13838: EQUAL
13839: IFFALSE 13860
// points := [ 10 , 5 , 3 ] ;
13841: LD_ADDR_VAR 0 9
13845: PUSH
13846: LD_INT 10
13848: PUSH
13849: LD_INT 5
13851: PUSH
13852: LD_INT 3
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
13860: LD_VAR 0 6
13864: PPUSH
13865: CALL_OW 257
13869: PUSH
13870: LD_INT 2
13872: PUSH
13873: LD_INT 3
13875: PUSH
13876: LD_INT 4
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: LIST
13883: IN
13884: IFFALSE 13905
// points := [ 3 , 2 , 1 ] ;
13886: LD_ADDR_VAR 0 9
13890: PUSH
13891: LD_INT 3
13893: PUSH
13894: LD_INT 2
13896: PUSH
13897: LD_INT 1
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: ST_TO_ADDR
// if GetClass ( i ) = 5 then
13905: LD_VAR 0 6
13909: PPUSH
13910: CALL_OW 257
13914: PUSH
13915: LD_INT 5
13917: EQUAL
13918: IFFALSE 13939
// points := [ 130 , 5 , 2 ] ;
13920: LD_ADDR_VAR 0 9
13924: PUSH
13925: LD_INT 130
13927: PUSH
13928: LD_INT 5
13930: PUSH
13931: LD_INT 2
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: ST_TO_ADDR
// if GetClass ( i ) = 8 then
13939: LD_VAR 0 6
13943: PPUSH
13944: CALL_OW 257
13948: PUSH
13949: LD_INT 8
13951: EQUAL
13952: IFFALSE 13973
// points := [ 35 , 35 , 30 ] ;
13954: LD_ADDR_VAR 0 9
13958: PUSH
13959: LD_INT 35
13961: PUSH
13962: LD_INT 35
13964: PUSH
13965: LD_INT 30
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: ST_TO_ADDR
// if GetClass ( i ) = 9 then
13973: LD_VAR 0 6
13977: PPUSH
13978: CALL_OW 257
13982: PUSH
13983: LD_INT 9
13985: EQUAL
13986: IFFALSE 14007
// points := [ 20 , 55 , 40 ] ;
13988: LD_ADDR_VAR 0 9
13992: PUSH
13993: LD_INT 20
13995: PUSH
13996: LD_INT 55
13998: PUSH
13999: LD_INT 40
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14007: LD_VAR 0 6
14011: PPUSH
14012: CALL_OW 257
14016: PUSH
14017: LD_INT 12
14019: PUSH
14020: LD_INT 16
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: IN
14027: IFFALSE 14048
// points := [ 5 , 3 , 2 ] ;
14029: LD_ADDR_VAR 0 9
14033: PUSH
14034: LD_INT 5
14036: PUSH
14037: LD_INT 3
14039: PUSH
14040: LD_INT 2
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14048: LD_VAR 0 6
14052: PPUSH
14053: CALL_OW 257
14057: PUSH
14058: LD_INT 17
14060: EQUAL
14061: IFFALSE 14082
// points := [ 100 , 50 , 75 ] ;
14063: LD_ADDR_VAR 0 9
14067: PUSH
14068: LD_INT 100
14070: PUSH
14071: LD_INT 50
14073: PUSH
14074: LD_INT 75
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: LIST
14081: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14082: LD_VAR 0 6
14086: PPUSH
14087: CALL_OW 257
14091: PUSH
14092: LD_INT 15
14094: EQUAL
14095: IFFALSE 14116
// points := [ 10 , 5 , 3 ] ;
14097: LD_ADDR_VAR 0 9
14101: PUSH
14102: LD_INT 10
14104: PUSH
14105: LD_INT 5
14107: PUSH
14108: LD_INT 3
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: LIST
14115: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14116: LD_VAR 0 6
14120: PPUSH
14121: CALL_OW 257
14125: PUSH
14126: LD_INT 14
14128: EQUAL
14129: IFFALSE 14150
// points := [ 10 , 0 , 0 ] ;
14131: LD_ADDR_VAR 0 9
14135: PUSH
14136: LD_INT 10
14138: PUSH
14139: LD_INT 0
14141: PUSH
14142: LD_INT 0
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14150: LD_VAR 0 6
14154: PPUSH
14155: CALL_OW 257
14159: PUSH
14160: LD_INT 11
14162: EQUAL
14163: IFFALSE 14184
// points := [ 30 , 10 , 5 ] ;
14165: LD_ADDR_VAR 0 9
14169: PUSH
14170: LD_INT 30
14172: PUSH
14173: LD_INT 10
14175: PUSH
14176: LD_INT 5
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: LIST
14183: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14184: LD_VAR 0 1
14188: PPUSH
14189: LD_INT 5
14191: PPUSH
14192: CALL_OW 321
14196: PUSH
14197: LD_INT 2
14199: EQUAL
14200: IFFALSE 14217
// bpoints := bpoints * 1.8 ;
14202: LD_ADDR_VAR 0 10
14206: PUSH
14207: LD_VAR 0 10
14211: PUSH
14212: LD_REAL  1.80000000000000E+0000
14215: MUL
14216: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14217: LD_VAR 0 6
14221: PPUSH
14222: CALL_OW 257
14226: PUSH
14227: LD_INT 1
14229: PUSH
14230: LD_INT 2
14232: PUSH
14233: LD_INT 3
14235: PUSH
14236: LD_INT 4
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: IN
14245: PUSH
14246: LD_VAR 0 1
14250: PPUSH
14251: LD_INT 51
14253: PPUSH
14254: CALL_OW 321
14258: PUSH
14259: LD_INT 2
14261: EQUAL
14262: AND
14263: IFFALSE 14280
// bpoints := bpoints * 1.2 ;
14265: LD_ADDR_VAR 0 10
14269: PUSH
14270: LD_VAR 0 10
14274: PUSH
14275: LD_REAL  1.20000000000000E+0000
14278: MUL
14279: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14280: LD_VAR 0 6
14284: PPUSH
14285: CALL_OW 257
14289: PUSH
14290: LD_INT 5
14292: PUSH
14293: LD_INT 7
14295: PUSH
14296: LD_INT 9
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: IN
14304: PUSH
14305: LD_VAR 0 1
14309: PPUSH
14310: LD_INT 52
14312: PPUSH
14313: CALL_OW 321
14317: PUSH
14318: LD_INT 2
14320: EQUAL
14321: AND
14322: IFFALSE 14339
// bpoints := bpoints * 1.5 ;
14324: LD_ADDR_VAR 0 10
14328: PUSH
14329: LD_VAR 0 10
14333: PUSH
14334: LD_REAL  1.50000000000000E+0000
14337: MUL
14338: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14339: LD_VAR 0 1
14343: PPUSH
14344: LD_INT 66
14346: PPUSH
14347: CALL_OW 321
14351: PUSH
14352: LD_INT 2
14354: EQUAL
14355: IFFALSE 14372
// bpoints := bpoints * 1.1 ;
14357: LD_ADDR_VAR 0 10
14361: PUSH
14362: LD_VAR 0 10
14366: PUSH
14367: LD_REAL  1.10000000000000E+0000
14370: MUL
14371: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14372: LD_ADDR_VAR 0 10
14376: PUSH
14377: LD_VAR 0 10
14381: PUSH
14382: LD_VAR 0 6
14386: PPUSH
14387: LD_INT 1
14389: PPUSH
14390: CALL_OW 259
14394: PUSH
14395: LD_REAL  1.15000000000000E+0000
14398: MUL
14399: MUL
14400: ST_TO_ADDR
// end ; unit_vehicle :
14401: GO 15229
14403: LD_INT 2
14405: DOUBLE
14406: EQUAL
14407: IFTRUE 14411
14409: GO 15217
14411: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14412: LD_VAR 0 6
14416: PPUSH
14417: CALL_OW 264
14421: PUSH
14422: LD_INT 2
14424: PUSH
14425: LD_INT 42
14427: PUSH
14428: LD_INT 24
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: IN
14436: IFFALSE 14457
// points := [ 25 , 5 , 3 ] ;
14438: LD_ADDR_VAR 0 9
14442: PUSH
14443: LD_INT 25
14445: PUSH
14446: LD_INT 5
14448: PUSH
14449: LD_INT 3
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: LIST
14456: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14457: LD_VAR 0 6
14461: PPUSH
14462: CALL_OW 264
14466: PUSH
14467: LD_INT 4
14469: PUSH
14470: LD_INT 43
14472: PUSH
14473: LD_INT 25
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: IN
14481: IFFALSE 14502
// points := [ 40 , 15 , 5 ] ;
14483: LD_ADDR_VAR 0 9
14487: PUSH
14488: LD_INT 40
14490: PUSH
14491: LD_INT 15
14493: PUSH
14494: LD_INT 5
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: LIST
14501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14502: LD_VAR 0 6
14506: PPUSH
14507: CALL_OW 264
14511: PUSH
14512: LD_INT 3
14514: PUSH
14515: LD_INT 23
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: IN
14522: IFFALSE 14543
// points := [ 7 , 25 , 8 ] ;
14524: LD_ADDR_VAR 0 9
14528: PUSH
14529: LD_INT 7
14531: PUSH
14532: LD_INT 25
14534: PUSH
14535: LD_INT 8
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: LIST
14542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14543: LD_VAR 0 6
14547: PPUSH
14548: CALL_OW 264
14552: PUSH
14553: LD_INT 5
14555: PUSH
14556: LD_INT 27
14558: PUSH
14559: LD_INT 44
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: IN
14567: IFFALSE 14588
// points := [ 14 , 50 , 16 ] ;
14569: LD_ADDR_VAR 0 9
14573: PUSH
14574: LD_INT 14
14576: PUSH
14577: LD_INT 50
14579: PUSH
14580: LD_INT 16
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: LIST
14587: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14588: LD_VAR 0 6
14592: PPUSH
14593: CALL_OW 264
14597: PUSH
14598: LD_INT 6
14600: PUSH
14601: LD_INT 46
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: IN
14608: IFFALSE 14629
// points := [ 32 , 120 , 70 ] ;
14610: LD_ADDR_VAR 0 9
14614: PUSH
14615: LD_INT 32
14617: PUSH
14618: LD_INT 120
14620: PUSH
14621: LD_INT 70
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: LIST
14628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
14629: LD_VAR 0 6
14633: PPUSH
14634: CALL_OW 264
14638: PUSH
14639: LD_INT 7
14641: PUSH
14642: LD_INT 28
14644: PUSH
14645: LD_INT 45
14647: PUSH
14648: LD_INT 92
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: IN
14657: IFFALSE 14678
// points := [ 35 , 20 , 45 ] ;
14659: LD_ADDR_VAR 0 9
14663: PUSH
14664: LD_INT 35
14666: PUSH
14667: LD_INT 20
14669: PUSH
14670: LD_INT 45
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
14678: LD_VAR 0 6
14682: PPUSH
14683: CALL_OW 264
14687: PUSH
14688: LD_INT 47
14690: PUSH
14691: EMPTY
14692: LIST
14693: IN
14694: IFFALSE 14715
// points := [ 67 , 45 , 75 ] ;
14696: LD_ADDR_VAR 0 9
14700: PUSH
14701: LD_INT 67
14703: PUSH
14704: LD_INT 45
14706: PUSH
14707: LD_INT 75
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
14715: LD_VAR 0 6
14719: PPUSH
14720: CALL_OW 264
14724: PUSH
14725: LD_INT 26
14727: PUSH
14728: EMPTY
14729: LIST
14730: IN
14731: IFFALSE 14752
// points := [ 120 , 30 , 80 ] ;
14733: LD_ADDR_VAR 0 9
14737: PUSH
14738: LD_INT 120
14740: PUSH
14741: LD_INT 30
14743: PUSH
14744: LD_INT 80
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: LIST
14751: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
14752: LD_VAR 0 6
14756: PPUSH
14757: CALL_OW 264
14761: PUSH
14762: LD_INT 22
14764: PUSH
14765: EMPTY
14766: LIST
14767: IN
14768: IFFALSE 14789
// points := [ 40 , 1 , 1 ] ;
14770: LD_ADDR_VAR 0 9
14774: PUSH
14775: LD_INT 40
14777: PUSH
14778: LD_INT 1
14780: PUSH
14781: LD_INT 1
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
14789: LD_VAR 0 6
14793: PPUSH
14794: CALL_OW 264
14798: PUSH
14799: LD_INT 29
14801: PUSH
14802: EMPTY
14803: LIST
14804: IN
14805: IFFALSE 14826
// points := [ 70 , 200 , 400 ] ;
14807: LD_ADDR_VAR 0 9
14811: PUSH
14812: LD_INT 70
14814: PUSH
14815: LD_INT 200
14817: PUSH
14818: LD_INT 400
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: LIST
14825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
14826: LD_VAR 0 6
14830: PPUSH
14831: CALL_OW 264
14835: PUSH
14836: LD_INT 14
14838: PUSH
14839: LD_INT 53
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: IN
14846: IFFALSE 14867
// points := [ 40 , 10 , 20 ] ;
14848: LD_ADDR_VAR 0 9
14852: PUSH
14853: LD_INT 40
14855: PUSH
14856: LD_INT 10
14858: PUSH
14859: LD_INT 20
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: LIST
14866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
14867: LD_VAR 0 6
14871: PPUSH
14872: CALL_OW 264
14876: PUSH
14877: LD_INT 9
14879: PUSH
14880: EMPTY
14881: LIST
14882: IN
14883: IFFALSE 14904
// points := [ 5 , 70 , 20 ] ;
14885: LD_ADDR_VAR 0 9
14889: PUSH
14890: LD_INT 5
14892: PUSH
14893: LD_INT 70
14895: PUSH
14896: LD_INT 20
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
14904: LD_VAR 0 6
14908: PPUSH
14909: CALL_OW 264
14913: PUSH
14914: LD_INT 10
14916: PUSH
14917: EMPTY
14918: LIST
14919: IN
14920: IFFALSE 14941
// points := [ 35 , 110 , 70 ] ;
14922: LD_ADDR_VAR 0 9
14926: PUSH
14927: LD_INT 35
14929: PUSH
14930: LD_INT 110
14932: PUSH
14933: LD_INT 70
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
14941: LD_VAR 0 6
14945: PPUSH
14946: CALL_OW 265
14950: PUSH
14951: LD_INT 25
14953: EQUAL
14954: IFFALSE 14975
// points := [ 80 , 65 , 100 ] ;
14956: LD_ADDR_VAR 0 9
14960: PUSH
14961: LD_INT 80
14963: PUSH
14964: LD_INT 65
14966: PUSH
14967: LD_INT 100
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: LIST
14974: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
14975: LD_VAR 0 6
14979: PPUSH
14980: CALL_OW 263
14984: PUSH
14985: LD_INT 1
14987: EQUAL
14988: IFFALSE 15023
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
14990: LD_ADDR_VAR 0 10
14994: PUSH
14995: LD_VAR 0 10
14999: PUSH
15000: LD_VAR 0 6
15004: PPUSH
15005: CALL_OW 311
15009: PPUSH
15010: LD_INT 3
15012: PPUSH
15013: CALL_OW 259
15017: PUSH
15018: LD_INT 4
15020: MUL
15021: MUL
15022: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15023: LD_VAR 0 6
15027: PPUSH
15028: CALL_OW 263
15032: PUSH
15033: LD_INT 2
15035: EQUAL
15036: IFFALSE 15087
// begin j := IsControledBy ( i ) ;
15038: LD_ADDR_VAR 0 7
15042: PUSH
15043: LD_VAR 0 6
15047: PPUSH
15048: CALL_OW 312
15052: ST_TO_ADDR
// if j then
15053: LD_VAR 0 7
15057: IFFALSE 15087
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15059: LD_ADDR_VAR 0 10
15063: PUSH
15064: LD_VAR 0 10
15068: PUSH
15069: LD_VAR 0 7
15073: PPUSH
15074: LD_INT 3
15076: PPUSH
15077: CALL_OW 259
15081: PUSH
15082: LD_INT 3
15084: MUL
15085: MUL
15086: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15087: LD_VAR 0 6
15091: PPUSH
15092: CALL_OW 264
15096: PUSH
15097: LD_INT 5
15099: PUSH
15100: LD_INT 6
15102: PUSH
15103: LD_INT 46
15105: PUSH
15106: LD_INT 44
15108: PUSH
15109: LD_INT 47
15111: PUSH
15112: LD_INT 45
15114: PUSH
15115: LD_INT 28
15117: PUSH
15118: LD_INT 7
15120: PUSH
15121: LD_INT 27
15123: PUSH
15124: LD_INT 29
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: IN
15139: PUSH
15140: LD_VAR 0 1
15144: PPUSH
15145: LD_INT 52
15147: PPUSH
15148: CALL_OW 321
15152: PUSH
15153: LD_INT 2
15155: EQUAL
15156: AND
15157: IFFALSE 15174
// bpoints := bpoints * 1.2 ;
15159: LD_ADDR_VAR 0 10
15163: PUSH
15164: LD_VAR 0 10
15168: PUSH
15169: LD_REAL  1.20000000000000E+0000
15172: MUL
15173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15174: LD_VAR 0 6
15178: PPUSH
15179: CALL_OW 264
15183: PUSH
15184: LD_INT 6
15186: PUSH
15187: LD_INT 46
15189: PUSH
15190: LD_INT 47
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: LIST
15197: IN
15198: IFFALSE 15215
// bpoints := bpoints * 1.2 ;
15200: LD_ADDR_VAR 0 10
15204: PUSH
15205: LD_VAR 0 10
15209: PUSH
15210: LD_REAL  1.20000000000000E+0000
15213: MUL
15214: ST_TO_ADDR
// end ; unit_building :
15215: GO 15229
15217: LD_INT 3
15219: DOUBLE
15220: EQUAL
15221: IFTRUE 15225
15223: GO 15228
15225: POP
// ; end ;
15226: GO 15229
15228: POP
// for j = 1 to 3 do
15229: LD_ADDR_VAR 0 7
15233: PUSH
15234: DOUBLE
15235: LD_INT 1
15237: DEC
15238: ST_TO_ADDR
15239: LD_INT 3
15241: PUSH
15242: FOR_TO
15243: IFFALSE 15296
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15245: LD_ADDR_VAR 0 5
15249: PUSH
15250: LD_VAR 0 5
15254: PPUSH
15255: LD_VAR 0 7
15259: PPUSH
15260: LD_VAR 0 5
15264: PUSH
15265: LD_VAR 0 7
15269: ARRAY
15270: PUSH
15271: LD_VAR 0 9
15275: PUSH
15276: LD_VAR 0 7
15280: ARRAY
15281: PUSH
15282: LD_VAR 0 10
15286: MUL
15287: PLUS
15288: PPUSH
15289: CALL_OW 1
15293: ST_TO_ADDR
15294: GO 15242
15296: POP
15297: POP
// end ;
15298: GO 13777
15300: POP
15301: POP
// result := Replace ( result , 4 , tmp ) ;
15302: LD_ADDR_VAR 0 5
15306: PUSH
15307: LD_VAR 0 5
15311: PPUSH
15312: LD_INT 4
15314: PPUSH
15315: LD_VAR 0 8
15319: PPUSH
15320: CALL_OW 1
15324: ST_TO_ADDR
// end ;
15325: LD_VAR 0 5
15329: RET
// export function DangerAtRange ( unit , range ) ; begin
15330: LD_INT 0
15332: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15333: LD_ADDR_VAR 0 3
15337: PUSH
15338: LD_VAR 0 1
15342: PPUSH
15343: CALL_OW 255
15347: PPUSH
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 250
15357: PPUSH
15358: LD_VAR 0 1
15362: PPUSH
15363: CALL_OW 251
15367: PPUSH
15368: LD_VAR 0 2
15372: PPUSH
15373: CALL 13629 0 4
15377: ST_TO_ADDR
// end ;
15378: LD_VAR 0 3
15382: RET
// export function DangerInArea ( side , area ) ; begin
15383: LD_INT 0
15385: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15386: LD_ADDR_VAR 0 3
15390: PUSH
15391: LD_VAR 0 2
15395: PPUSH
15396: LD_INT 81
15398: PUSH
15399: LD_VAR 0 1
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PPUSH
15408: CALL_OW 70
15412: ST_TO_ADDR
// end ;
15413: LD_VAR 0 3
15417: RET
// export function IsExtension ( b ) ; begin
15418: LD_INT 0
15420: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15421: LD_ADDR_VAR 0 2
15425: PUSH
15426: LD_VAR 0 1
15430: PUSH
15431: LD_INT 23
15433: PUSH
15434: LD_INT 20
15436: PUSH
15437: LD_INT 22
15439: PUSH
15440: LD_INT 17
15442: PUSH
15443: LD_INT 24
15445: PUSH
15446: LD_INT 21
15448: PUSH
15449: LD_INT 19
15451: PUSH
15452: LD_INT 16
15454: PUSH
15455: LD_INT 25
15457: PUSH
15458: LD_INT 18
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: IN
15473: ST_TO_ADDR
// end ;
15474: LD_VAR 0 2
15478: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15479: LD_INT 0
15481: PPUSH
15482: PPUSH
15483: PPUSH
// result := [ ] ;
15484: LD_ADDR_VAR 0 4
15488: PUSH
15489: EMPTY
15490: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15491: LD_ADDR_VAR 0 5
15495: PUSH
15496: LD_VAR 0 2
15500: PPUSH
15501: LD_INT 21
15503: PUSH
15504: LD_INT 3
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PPUSH
15511: CALL_OW 70
15515: ST_TO_ADDR
// if not tmp then
15516: LD_VAR 0 5
15520: NOT
15521: IFFALSE 15525
// exit ;
15523: GO 15589
// if checkLink then
15525: LD_VAR 0 3
15529: IFFALSE 15579
// begin for i in tmp do
15531: LD_ADDR_VAR 0 6
15535: PUSH
15536: LD_VAR 0 5
15540: PUSH
15541: FOR_IN
15542: IFFALSE 15577
// if GetBase ( i ) <> base then
15544: LD_VAR 0 6
15548: PPUSH
15549: CALL_OW 274
15553: PUSH
15554: LD_VAR 0 1
15558: NONEQUAL
15559: IFFALSE 15575
// ComLinkToBase ( base , i ) ;
15561: LD_VAR 0 1
15565: PPUSH
15566: LD_VAR 0 6
15570: PPUSH
15571: CALL_OW 169
15575: GO 15541
15577: POP
15578: POP
// end ; result := tmp ;
15579: LD_ADDR_VAR 0 4
15583: PUSH
15584: LD_VAR 0 5
15588: ST_TO_ADDR
// end ;
15589: LD_VAR 0 4
15593: RET
// export function ComComplete ( units , b ) ; var i ; begin
15594: LD_INT 0
15596: PPUSH
15597: PPUSH
// if not units then
15598: LD_VAR 0 1
15602: NOT
15603: IFFALSE 15607
// exit ;
15605: GO 15697
// for i in units do
15607: LD_ADDR_VAR 0 4
15611: PUSH
15612: LD_VAR 0 1
15616: PUSH
15617: FOR_IN
15618: IFFALSE 15695
// if BuildingStatus ( b ) = bs_build then
15620: LD_VAR 0 2
15624: PPUSH
15625: CALL_OW 461
15629: PUSH
15630: LD_INT 1
15632: EQUAL
15633: IFFALSE 15693
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15635: LD_VAR 0 4
15639: PPUSH
15640: LD_STRING h
15642: PUSH
15643: LD_VAR 0 2
15647: PPUSH
15648: CALL_OW 250
15652: PUSH
15653: LD_VAR 0 2
15657: PPUSH
15658: CALL_OW 251
15662: PUSH
15663: LD_VAR 0 2
15667: PUSH
15668: LD_INT 0
15670: PUSH
15671: LD_INT 0
15673: PUSH
15674: LD_INT 0
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: PPUSH
15689: CALL_OW 446
15693: GO 15617
15695: POP
15696: POP
// end ;
15697: LD_VAR 0 3
15701: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
15702: LD_INT 0
15704: PPUSH
15705: PPUSH
15706: PPUSH
15707: PPUSH
15708: PPUSH
15709: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
15710: LD_VAR 0 1
15714: NOT
15715: PUSH
15716: LD_VAR 0 1
15720: PPUSH
15721: CALL_OW 263
15725: PUSH
15726: LD_INT 2
15728: NONEQUAL
15729: OR
15730: IFFALSE 15734
// exit ;
15732: GO 16050
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
15734: LD_ADDR_VAR 0 6
15738: PUSH
15739: LD_INT 22
15741: PUSH
15742: LD_VAR 0 1
15746: PPUSH
15747: CALL_OW 255
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 2
15758: PUSH
15759: LD_INT 30
15761: PUSH
15762: LD_INT 36
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 34
15771: PUSH
15772: LD_INT 31
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: LIST
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PPUSH
15788: CALL_OW 69
15792: ST_TO_ADDR
// if not tmp then
15793: LD_VAR 0 6
15797: NOT
15798: IFFALSE 15802
// exit ;
15800: GO 16050
// result := [ ] ;
15802: LD_ADDR_VAR 0 2
15806: PUSH
15807: EMPTY
15808: ST_TO_ADDR
// for i in tmp do
15809: LD_ADDR_VAR 0 3
15813: PUSH
15814: LD_VAR 0 6
15818: PUSH
15819: FOR_IN
15820: IFFALSE 15891
// begin t := UnitsInside ( i ) ;
15822: LD_ADDR_VAR 0 4
15826: PUSH
15827: LD_VAR 0 3
15831: PPUSH
15832: CALL_OW 313
15836: ST_TO_ADDR
// if t then
15837: LD_VAR 0 4
15841: IFFALSE 15889
// for j in t do
15843: LD_ADDR_VAR 0 7
15847: PUSH
15848: LD_VAR 0 4
15852: PUSH
15853: FOR_IN
15854: IFFALSE 15887
// result := Replace ( result , result + 1 , j ) ;
15856: LD_ADDR_VAR 0 2
15860: PUSH
15861: LD_VAR 0 2
15865: PPUSH
15866: LD_VAR 0 2
15870: PUSH
15871: LD_INT 1
15873: PLUS
15874: PPUSH
15875: LD_VAR 0 7
15879: PPUSH
15880: CALL_OW 1
15884: ST_TO_ADDR
15885: GO 15853
15887: POP
15888: POP
// end ;
15889: GO 15819
15891: POP
15892: POP
// if not result then
15893: LD_VAR 0 2
15897: NOT
15898: IFFALSE 15902
// exit ;
15900: GO 16050
// mech := result [ 1 ] ;
15902: LD_ADDR_VAR 0 5
15906: PUSH
15907: LD_VAR 0 2
15911: PUSH
15912: LD_INT 1
15914: ARRAY
15915: ST_TO_ADDR
// if result > 1 then
15916: LD_VAR 0 2
15920: PUSH
15921: LD_INT 1
15923: GREATER
15924: IFFALSE 16036
// begin for i = 2 to result do
15926: LD_ADDR_VAR 0 3
15930: PUSH
15931: DOUBLE
15932: LD_INT 2
15934: DEC
15935: ST_TO_ADDR
15936: LD_VAR 0 2
15940: PUSH
15941: FOR_TO
15942: IFFALSE 16034
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
15944: LD_ADDR_VAR 0 4
15948: PUSH
15949: LD_VAR 0 2
15953: PUSH
15954: LD_VAR 0 3
15958: ARRAY
15959: PPUSH
15960: LD_INT 3
15962: PPUSH
15963: CALL_OW 259
15967: PUSH
15968: LD_VAR 0 2
15972: PUSH
15973: LD_VAR 0 3
15977: ARRAY
15978: PPUSH
15979: CALL_OW 432
15983: MINUS
15984: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
15985: LD_VAR 0 4
15989: PUSH
15990: LD_VAR 0 5
15994: PPUSH
15995: LD_INT 3
15997: PPUSH
15998: CALL_OW 259
16002: PUSH
16003: LD_VAR 0 5
16007: PPUSH
16008: CALL_OW 432
16012: MINUS
16013: GREATEREQUAL
16014: IFFALSE 16032
// mech := result [ i ] ;
16016: LD_ADDR_VAR 0 5
16020: PUSH
16021: LD_VAR 0 2
16025: PUSH
16026: LD_VAR 0 3
16030: ARRAY
16031: ST_TO_ADDR
// end ;
16032: GO 15941
16034: POP
16035: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16036: LD_VAR 0 1
16040: PPUSH
16041: LD_VAR 0 5
16045: PPUSH
16046: CALL_OW 135
// end ;
16050: LD_VAR 0 2
16054: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16055: LD_INT 0
16057: PPUSH
16058: PPUSH
16059: PPUSH
16060: PPUSH
16061: PPUSH
16062: PPUSH
16063: PPUSH
16064: PPUSH
16065: PPUSH
16066: PPUSH
16067: PPUSH
16068: PPUSH
16069: PPUSH
// result := [ ] ;
16070: LD_ADDR_VAR 0 7
16074: PUSH
16075: EMPTY
16076: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16077: LD_VAR 0 1
16081: PPUSH
16082: CALL_OW 266
16086: PUSH
16087: LD_INT 0
16089: PUSH
16090: LD_INT 1
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: IN
16097: NOT
16098: IFFALSE 16102
// exit ;
16100: GO 17736
// if name then
16102: LD_VAR 0 3
16106: IFFALSE 16122
// SetBName ( base_dep , name ) ;
16108: LD_VAR 0 1
16112: PPUSH
16113: LD_VAR 0 3
16117: PPUSH
16118: CALL_OW 500
// base := GetBase ( base_dep ) ;
16122: LD_ADDR_VAR 0 15
16126: PUSH
16127: LD_VAR 0 1
16131: PPUSH
16132: CALL_OW 274
16136: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16137: LD_ADDR_VAR 0 16
16141: PUSH
16142: LD_VAR 0 1
16146: PPUSH
16147: CALL_OW 255
16151: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16152: LD_ADDR_VAR 0 17
16156: PUSH
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 248
16166: ST_TO_ADDR
// if sources then
16167: LD_VAR 0 5
16171: IFFALSE 16218
// for i = 1 to 3 do
16173: LD_ADDR_VAR 0 8
16177: PUSH
16178: DOUBLE
16179: LD_INT 1
16181: DEC
16182: ST_TO_ADDR
16183: LD_INT 3
16185: PUSH
16186: FOR_TO
16187: IFFALSE 16216
// AddResourceType ( base , i , sources [ i ] ) ;
16189: LD_VAR 0 15
16193: PPUSH
16194: LD_VAR 0 8
16198: PPUSH
16199: LD_VAR 0 5
16203: PUSH
16204: LD_VAR 0 8
16208: ARRAY
16209: PPUSH
16210: CALL_OW 276
16214: GO 16186
16216: POP
16217: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16218: LD_ADDR_VAR 0 18
16222: PUSH
16223: LD_VAR 0 15
16227: PPUSH
16228: LD_VAR 0 2
16232: PPUSH
16233: LD_INT 1
16235: PPUSH
16236: CALL 15479 0 3
16240: ST_TO_ADDR
// InitHc ;
16241: CALL_OW 19
// InitUc ;
16245: CALL_OW 18
// uc_side := side ;
16249: LD_ADDR_OWVAR 20
16253: PUSH
16254: LD_VAR 0 16
16258: ST_TO_ADDR
// uc_nation := nation ;
16259: LD_ADDR_OWVAR 21
16263: PUSH
16264: LD_VAR 0 17
16268: ST_TO_ADDR
// if buildings then
16269: LD_VAR 0 18
16273: IFFALSE 17595
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16275: LD_ADDR_VAR 0 19
16279: PUSH
16280: LD_VAR 0 18
16284: PPUSH
16285: LD_INT 2
16287: PUSH
16288: LD_INT 30
16290: PUSH
16291: LD_INT 29
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 30
16300: PUSH
16301: LD_INT 30
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: LIST
16312: PPUSH
16313: CALL_OW 72
16317: ST_TO_ADDR
// if tmp then
16318: LD_VAR 0 19
16322: IFFALSE 16370
// for i in tmp do
16324: LD_ADDR_VAR 0 8
16328: PUSH
16329: LD_VAR 0 19
16333: PUSH
16334: FOR_IN
16335: IFFALSE 16368
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16337: LD_VAR 0 8
16341: PPUSH
16342: CALL_OW 250
16346: PPUSH
16347: LD_VAR 0 8
16351: PPUSH
16352: CALL_OW 251
16356: PPUSH
16357: LD_VAR 0 16
16361: PPUSH
16362: CALL_OW 441
16366: GO 16334
16368: POP
16369: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16370: LD_VAR 0 18
16374: PPUSH
16375: LD_INT 2
16377: PUSH
16378: LD_INT 30
16380: PUSH
16381: LD_INT 32
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 30
16390: PUSH
16391: LD_INT 33
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: PPUSH
16403: CALL_OW 72
16407: IFFALSE 16495
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16409: LD_ADDR_VAR 0 8
16413: PUSH
16414: LD_VAR 0 18
16418: PPUSH
16419: LD_INT 2
16421: PUSH
16422: LD_INT 30
16424: PUSH
16425: LD_INT 32
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 30
16434: PUSH
16435: LD_INT 33
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: PPUSH
16447: CALL_OW 72
16451: PUSH
16452: FOR_IN
16453: IFFALSE 16493
// begin if not GetBWeapon ( i ) then
16455: LD_VAR 0 8
16459: PPUSH
16460: CALL_OW 269
16464: NOT
16465: IFFALSE 16491
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16467: LD_VAR 0 8
16471: PPUSH
16472: LD_VAR 0 8
16476: PPUSH
16477: LD_VAR 0 2
16481: PPUSH
16482: CALL 17741 0 2
16486: PPUSH
16487: CALL_OW 431
// end ;
16491: GO 16452
16493: POP
16494: POP
// end ; for i = 1 to personel do
16495: LD_ADDR_VAR 0 8
16499: PUSH
16500: DOUBLE
16501: LD_INT 1
16503: DEC
16504: ST_TO_ADDR
16505: LD_VAR 0 6
16509: PUSH
16510: FOR_TO
16511: IFFALSE 17575
// begin if i > 4 then
16513: LD_VAR 0 8
16517: PUSH
16518: LD_INT 4
16520: GREATER
16521: IFFALSE 16525
// break ;
16523: GO 17575
// case i of 1 :
16525: LD_VAR 0 8
16529: PUSH
16530: LD_INT 1
16532: DOUBLE
16533: EQUAL
16534: IFTRUE 16538
16536: GO 16618
16538: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16539: LD_ADDR_VAR 0 12
16543: PUSH
16544: LD_VAR 0 18
16548: PPUSH
16549: LD_INT 22
16551: PUSH
16552: LD_VAR 0 16
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 58
16563: PUSH
16564: EMPTY
16565: LIST
16566: PUSH
16567: LD_INT 2
16569: PUSH
16570: LD_INT 30
16572: PUSH
16573: LD_INT 32
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 30
16582: PUSH
16583: LD_INT 4
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 30
16592: PUSH
16593: LD_INT 5
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: LIST
16610: PPUSH
16611: CALL_OW 72
16615: ST_TO_ADDR
16616: GO 16840
16618: LD_INT 2
16620: DOUBLE
16621: EQUAL
16622: IFTRUE 16626
16624: GO 16688
16626: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16627: LD_ADDR_VAR 0 12
16631: PUSH
16632: LD_VAR 0 18
16636: PPUSH
16637: LD_INT 22
16639: PUSH
16640: LD_VAR 0 16
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 2
16651: PUSH
16652: LD_INT 30
16654: PUSH
16655: LD_INT 0
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 30
16664: PUSH
16665: LD_INT 1
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 72
16685: ST_TO_ADDR
16686: GO 16840
16688: LD_INT 3
16690: DOUBLE
16691: EQUAL
16692: IFTRUE 16696
16694: GO 16758
16696: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
16697: LD_ADDR_VAR 0 12
16701: PUSH
16702: LD_VAR 0 18
16706: PPUSH
16707: LD_INT 22
16709: PUSH
16710: LD_VAR 0 16
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 2
16721: PUSH
16722: LD_INT 30
16724: PUSH
16725: LD_INT 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 30
16734: PUSH
16735: LD_INT 3
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: LIST
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PPUSH
16751: CALL_OW 72
16755: ST_TO_ADDR
16756: GO 16840
16758: LD_INT 4
16760: DOUBLE
16761: EQUAL
16762: IFTRUE 16766
16764: GO 16839
16766: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
16767: LD_ADDR_VAR 0 12
16771: PUSH
16772: LD_VAR 0 18
16776: PPUSH
16777: LD_INT 22
16779: PUSH
16780: LD_VAR 0 16
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 2
16791: PUSH
16792: LD_INT 30
16794: PUSH
16795: LD_INT 6
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 30
16804: PUSH
16805: LD_INT 7
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 30
16814: PUSH
16815: LD_INT 8
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PPUSH
16832: CALL_OW 72
16836: ST_TO_ADDR
16837: GO 16840
16839: POP
// if i = 1 then
16840: LD_VAR 0 8
16844: PUSH
16845: LD_INT 1
16847: EQUAL
16848: IFFALSE 16959
// begin tmp := [ ] ;
16850: LD_ADDR_VAR 0 19
16854: PUSH
16855: EMPTY
16856: ST_TO_ADDR
// for j in f do
16857: LD_ADDR_VAR 0 9
16861: PUSH
16862: LD_VAR 0 12
16866: PUSH
16867: FOR_IN
16868: IFFALSE 16941
// if GetBType ( j ) = b_bunker then
16870: LD_VAR 0 9
16874: PPUSH
16875: CALL_OW 266
16879: PUSH
16880: LD_INT 32
16882: EQUAL
16883: IFFALSE 16910
// tmp := Insert ( tmp , 1 , j ) else
16885: LD_ADDR_VAR 0 19
16889: PUSH
16890: LD_VAR 0 19
16894: PPUSH
16895: LD_INT 1
16897: PPUSH
16898: LD_VAR 0 9
16902: PPUSH
16903: CALL_OW 2
16907: ST_TO_ADDR
16908: GO 16939
// tmp := Insert ( tmp , tmp + 1 , j ) ;
16910: LD_ADDR_VAR 0 19
16914: PUSH
16915: LD_VAR 0 19
16919: PPUSH
16920: LD_VAR 0 19
16924: PUSH
16925: LD_INT 1
16927: PLUS
16928: PPUSH
16929: LD_VAR 0 9
16933: PPUSH
16934: CALL_OW 2
16938: ST_TO_ADDR
16939: GO 16867
16941: POP
16942: POP
// if tmp then
16943: LD_VAR 0 19
16947: IFFALSE 16959
// f := tmp ;
16949: LD_ADDR_VAR 0 12
16953: PUSH
16954: LD_VAR 0 19
16958: ST_TO_ADDR
// end ; x := personel [ i ] ;
16959: LD_ADDR_VAR 0 13
16963: PUSH
16964: LD_VAR 0 6
16968: PUSH
16969: LD_VAR 0 8
16973: ARRAY
16974: ST_TO_ADDR
// if x = - 1 then
16975: LD_VAR 0 13
16979: PUSH
16980: LD_INT 1
16982: NEG
16983: EQUAL
16984: IFFALSE 17193
// begin for j in f do
16986: LD_ADDR_VAR 0 9
16990: PUSH
16991: LD_VAR 0 12
16995: PUSH
16996: FOR_IN
16997: IFFALSE 17189
// repeat InitHc ;
16999: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17003: LD_VAR 0 9
17007: PPUSH
17008: CALL_OW 266
17012: PUSH
17013: LD_INT 5
17015: EQUAL
17016: IFFALSE 17086
// begin if UnitsInside ( j ) < 3 then
17018: LD_VAR 0 9
17022: PPUSH
17023: CALL_OW 313
17027: PUSH
17028: LD_INT 3
17030: LESS
17031: IFFALSE 17067
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17033: LD_INT 0
17035: PPUSH
17036: LD_INT 5
17038: PUSH
17039: LD_INT 8
17041: PUSH
17042: LD_INT 9
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: LIST
17049: PUSH
17050: LD_VAR 0 17
17054: ARRAY
17055: PPUSH
17056: LD_VAR 0 4
17060: PPUSH
17061: CALL_OW 380
17065: GO 17084
// PrepareHuman ( false , i , skill ) ;
17067: LD_INT 0
17069: PPUSH
17070: LD_VAR 0 8
17074: PPUSH
17075: LD_VAR 0 4
17079: PPUSH
17080: CALL_OW 380
// end else
17084: GO 17103
// PrepareHuman ( false , i , skill ) ;
17086: LD_INT 0
17088: PPUSH
17089: LD_VAR 0 8
17093: PPUSH
17094: LD_VAR 0 4
17098: PPUSH
17099: CALL_OW 380
// un := CreateHuman ;
17103: LD_ADDR_VAR 0 14
17107: PUSH
17108: CALL_OW 44
17112: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17113: LD_ADDR_VAR 0 7
17117: PUSH
17118: LD_VAR 0 7
17122: PPUSH
17123: LD_INT 1
17125: PPUSH
17126: LD_VAR 0 14
17130: PPUSH
17131: CALL_OW 2
17135: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17136: LD_VAR 0 14
17140: PPUSH
17141: LD_VAR 0 9
17145: PPUSH
17146: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17150: LD_VAR 0 9
17154: PPUSH
17155: CALL_OW 313
17159: PUSH
17160: LD_INT 6
17162: EQUAL
17163: PUSH
17164: LD_VAR 0 9
17168: PPUSH
17169: CALL_OW 266
17173: PUSH
17174: LD_INT 32
17176: PUSH
17177: LD_INT 31
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: IN
17184: OR
17185: IFFALSE 16999
17187: GO 16996
17189: POP
17190: POP
// end else
17191: GO 17573
// for j = 1 to x do
17193: LD_ADDR_VAR 0 9
17197: PUSH
17198: DOUBLE
17199: LD_INT 1
17201: DEC
17202: ST_TO_ADDR
17203: LD_VAR 0 13
17207: PUSH
17208: FOR_TO
17209: IFFALSE 17571
// begin InitHc ;
17211: CALL_OW 19
// if not f then
17215: LD_VAR 0 12
17219: NOT
17220: IFFALSE 17309
// begin PrepareHuman ( false , i , skill ) ;
17222: LD_INT 0
17224: PPUSH
17225: LD_VAR 0 8
17229: PPUSH
17230: LD_VAR 0 4
17234: PPUSH
17235: CALL_OW 380
// un := CreateHuman ;
17239: LD_ADDR_VAR 0 14
17243: PUSH
17244: CALL_OW 44
17248: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17249: LD_ADDR_VAR 0 7
17253: PUSH
17254: LD_VAR 0 7
17258: PPUSH
17259: LD_INT 1
17261: PPUSH
17262: LD_VAR 0 14
17266: PPUSH
17267: CALL_OW 2
17271: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17272: LD_VAR 0 14
17276: PPUSH
17277: LD_VAR 0 1
17281: PPUSH
17282: CALL_OW 250
17286: PPUSH
17287: LD_VAR 0 1
17291: PPUSH
17292: CALL_OW 251
17296: PPUSH
17297: LD_INT 10
17299: PPUSH
17300: LD_INT 0
17302: PPUSH
17303: CALL_OW 50
// continue ;
17307: GO 17208
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17309: LD_VAR 0 12
17313: PUSH
17314: LD_INT 1
17316: ARRAY
17317: PPUSH
17318: CALL_OW 313
17322: PUSH
17323: LD_VAR 0 12
17327: PUSH
17328: LD_INT 1
17330: ARRAY
17331: PPUSH
17332: CALL_OW 266
17336: PUSH
17337: LD_INT 32
17339: PUSH
17340: LD_INT 31
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: IN
17347: AND
17348: PUSH
17349: LD_VAR 0 12
17353: PUSH
17354: LD_INT 1
17356: ARRAY
17357: PPUSH
17358: CALL_OW 313
17362: PUSH
17363: LD_INT 6
17365: EQUAL
17366: OR
17367: IFFALSE 17387
// f := Delete ( f , 1 ) ;
17369: LD_ADDR_VAR 0 12
17373: PUSH
17374: LD_VAR 0 12
17378: PPUSH
17379: LD_INT 1
17381: PPUSH
17382: CALL_OW 3
17386: ST_TO_ADDR
// if not f then
17387: LD_VAR 0 12
17391: NOT
17392: IFFALSE 17410
// begin x := x + 2 ;
17394: LD_ADDR_VAR 0 13
17398: PUSH
17399: LD_VAR 0 13
17403: PUSH
17404: LD_INT 2
17406: PLUS
17407: ST_TO_ADDR
// continue ;
17408: GO 17208
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17410: LD_VAR 0 12
17414: PUSH
17415: LD_INT 1
17417: ARRAY
17418: PPUSH
17419: CALL_OW 266
17423: PUSH
17424: LD_INT 5
17426: EQUAL
17427: IFFALSE 17501
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17429: LD_VAR 0 12
17433: PUSH
17434: LD_INT 1
17436: ARRAY
17437: PPUSH
17438: CALL_OW 313
17442: PUSH
17443: LD_INT 3
17445: LESS
17446: IFFALSE 17482
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17448: LD_INT 0
17450: PPUSH
17451: LD_INT 5
17453: PUSH
17454: LD_INT 8
17456: PUSH
17457: LD_INT 9
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: LIST
17464: PUSH
17465: LD_VAR 0 17
17469: ARRAY
17470: PPUSH
17471: LD_VAR 0 4
17475: PPUSH
17476: CALL_OW 380
17480: GO 17499
// PrepareHuman ( false , i , skill ) ;
17482: LD_INT 0
17484: PPUSH
17485: LD_VAR 0 8
17489: PPUSH
17490: LD_VAR 0 4
17494: PPUSH
17495: CALL_OW 380
// end else
17499: GO 17518
// PrepareHuman ( false , i , skill ) ;
17501: LD_INT 0
17503: PPUSH
17504: LD_VAR 0 8
17508: PPUSH
17509: LD_VAR 0 4
17513: PPUSH
17514: CALL_OW 380
// un := CreateHuman ;
17518: LD_ADDR_VAR 0 14
17522: PUSH
17523: CALL_OW 44
17527: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17528: LD_ADDR_VAR 0 7
17532: PUSH
17533: LD_VAR 0 7
17537: PPUSH
17538: LD_INT 1
17540: PPUSH
17541: LD_VAR 0 14
17545: PPUSH
17546: CALL_OW 2
17550: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17551: LD_VAR 0 14
17555: PPUSH
17556: LD_VAR 0 12
17560: PUSH
17561: LD_INT 1
17563: ARRAY
17564: PPUSH
17565: CALL_OW 52
// end ;
17569: GO 17208
17571: POP
17572: POP
// end ;
17573: GO 16510
17575: POP
17576: POP
// result := result ^ buildings ;
17577: LD_ADDR_VAR 0 7
17581: PUSH
17582: LD_VAR 0 7
17586: PUSH
17587: LD_VAR 0 18
17591: ADD
17592: ST_TO_ADDR
// end else
17593: GO 17736
// begin for i = 1 to personel do
17595: LD_ADDR_VAR 0 8
17599: PUSH
17600: DOUBLE
17601: LD_INT 1
17603: DEC
17604: ST_TO_ADDR
17605: LD_VAR 0 6
17609: PUSH
17610: FOR_TO
17611: IFFALSE 17734
// begin if i > 4 then
17613: LD_VAR 0 8
17617: PUSH
17618: LD_INT 4
17620: GREATER
17621: IFFALSE 17625
// break ;
17623: GO 17734
// x := personel [ i ] ;
17625: LD_ADDR_VAR 0 13
17629: PUSH
17630: LD_VAR 0 6
17634: PUSH
17635: LD_VAR 0 8
17639: ARRAY
17640: ST_TO_ADDR
// if x = - 1 then
17641: LD_VAR 0 13
17645: PUSH
17646: LD_INT 1
17648: NEG
17649: EQUAL
17650: IFFALSE 17654
// continue ;
17652: GO 17610
// PrepareHuman ( false , i , skill ) ;
17654: LD_INT 0
17656: PPUSH
17657: LD_VAR 0 8
17661: PPUSH
17662: LD_VAR 0 4
17666: PPUSH
17667: CALL_OW 380
// un := CreateHuman ;
17671: LD_ADDR_VAR 0 14
17675: PUSH
17676: CALL_OW 44
17680: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17681: LD_VAR 0 14
17685: PPUSH
17686: LD_VAR 0 1
17690: PPUSH
17691: CALL_OW 250
17695: PPUSH
17696: LD_VAR 0 1
17700: PPUSH
17701: CALL_OW 251
17705: PPUSH
17706: LD_INT 10
17708: PPUSH
17709: LD_INT 0
17711: PPUSH
17712: CALL_OW 50
// result := result ^ un ;
17716: LD_ADDR_VAR 0 7
17720: PUSH
17721: LD_VAR 0 7
17725: PUSH
17726: LD_VAR 0 14
17730: ADD
17731: ST_TO_ADDR
// end ;
17732: GO 17610
17734: POP
17735: POP
// end ; end ;
17736: LD_VAR 0 7
17740: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
17741: LD_INT 0
17743: PPUSH
17744: PPUSH
17745: PPUSH
17746: PPUSH
17747: PPUSH
17748: PPUSH
17749: PPUSH
17750: PPUSH
17751: PPUSH
17752: PPUSH
17753: PPUSH
17754: PPUSH
17755: PPUSH
17756: PPUSH
17757: PPUSH
17758: PPUSH
// result := false ;
17759: LD_ADDR_VAR 0 3
17763: PUSH
17764: LD_INT 0
17766: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
17767: LD_VAR 0 1
17771: NOT
17772: PUSH
17773: LD_VAR 0 1
17777: PPUSH
17778: CALL_OW 266
17782: PUSH
17783: LD_INT 32
17785: PUSH
17786: LD_INT 33
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: IN
17793: NOT
17794: OR
17795: IFFALSE 17799
// exit ;
17797: GO 18908
// nat := GetNation ( tower ) ;
17799: LD_ADDR_VAR 0 12
17803: PUSH
17804: LD_VAR 0 1
17808: PPUSH
17809: CALL_OW 248
17813: ST_TO_ADDR
// side := GetSide ( tower ) ;
17814: LD_ADDR_VAR 0 16
17818: PUSH
17819: LD_VAR 0 1
17823: PPUSH
17824: CALL_OW 255
17828: ST_TO_ADDR
// x := GetX ( tower ) ;
17829: LD_ADDR_VAR 0 10
17833: PUSH
17834: LD_VAR 0 1
17838: PPUSH
17839: CALL_OW 250
17843: ST_TO_ADDR
// y := GetY ( tower ) ;
17844: LD_ADDR_VAR 0 11
17848: PUSH
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 251
17858: ST_TO_ADDR
// if not x or not y then
17859: LD_VAR 0 10
17863: NOT
17864: PUSH
17865: LD_VAR 0 11
17869: NOT
17870: OR
17871: IFFALSE 17875
// exit ;
17873: GO 18908
// weapon := 0 ;
17875: LD_ADDR_VAR 0 18
17879: PUSH
17880: LD_INT 0
17882: ST_TO_ADDR
// fac_list := [ ] ;
17883: LD_ADDR_VAR 0 17
17887: PUSH
17888: EMPTY
17889: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
17890: LD_ADDR_VAR 0 6
17894: PUSH
17895: LD_VAR 0 1
17899: PPUSH
17900: CALL_OW 274
17904: PPUSH
17905: LD_VAR 0 2
17909: PPUSH
17910: LD_INT 0
17912: PPUSH
17913: CALL 15479 0 3
17917: PPUSH
17918: LD_INT 30
17920: PUSH
17921: LD_INT 3
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 72
17932: ST_TO_ADDR
// if not factories then
17933: LD_VAR 0 6
17937: NOT
17938: IFFALSE 17942
// exit ;
17940: GO 18908
// for i in factories do
17942: LD_ADDR_VAR 0 8
17946: PUSH
17947: LD_VAR 0 6
17951: PUSH
17952: FOR_IN
17953: IFFALSE 17978
// fac_list := fac_list union AvailableWeaponList ( i ) ;
17955: LD_ADDR_VAR 0 17
17959: PUSH
17960: LD_VAR 0 17
17964: PUSH
17965: LD_VAR 0 8
17969: PPUSH
17970: CALL_OW 478
17974: UNION
17975: ST_TO_ADDR
17976: GO 17952
17978: POP
17979: POP
// if not fac_list then
17980: LD_VAR 0 17
17984: NOT
17985: IFFALSE 17989
// exit ;
17987: GO 18908
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
17989: LD_ADDR_VAR 0 5
17993: PUSH
17994: LD_INT 4
17996: PUSH
17997: LD_INT 5
17999: PUSH
18000: LD_INT 9
18002: PUSH
18003: LD_INT 10
18005: PUSH
18006: LD_INT 6
18008: PUSH
18009: LD_INT 7
18011: PUSH
18012: LD_INT 11
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 27
18026: PUSH
18027: LD_INT 28
18029: PUSH
18030: LD_INT 26
18032: PUSH
18033: LD_INT 30
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 43
18044: PUSH
18045: LD_INT 44
18047: PUSH
18048: LD_INT 46
18050: PUSH
18051: LD_INT 45
18053: PUSH
18054: LD_INT 47
18056: PUSH
18057: LD_INT 49
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: LIST
18072: PUSH
18073: LD_VAR 0 12
18077: ARRAY
18078: ST_TO_ADDR
// list := list isect fac_list ;
18079: LD_ADDR_VAR 0 5
18083: PUSH
18084: LD_VAR 0 5
18088: PUSH
18089: LD_VAR 0 17
18093: ISECT
18094: ST_TO_ADDR
// if not list then
18095: LD_VAR 0 5
18099: NOT
18100: IFFALSE 18104
// exit ;
18102: GO 18908
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18104: LD_VAR 0 12
18108: PUSH
18109: LD_INT 3
18111: EQUAL
18112: PUSH
18113: LD_INT 49
18115: PUSH
18116: LD_VAR 0 5
18120: IN
18121: AND
18122: PUSH
18123: LD_INT 31
18125: PPUSH
18126: LD_VAR 0 16
18130: PPUSH
18131: CALL_OW 321
18135: PUSH
18136: LD_INT 2
18138: EQUAL
18139: AND
18140: IFFALSE 18200
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18142: LD_INT 22
18144: PUSH
18145: LD_VAR 0 16
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 35
18156: PUSH
18157: LD_INT 49
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 91
18166: PUSH
18167: LD_VAR 0 1
18171: PUSH
18172: LD_INT 10
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: LIST
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: LIST
18184: PPUSH
18185: CALL_OW 69
18189: NOT
18190: IFFALSE 18200
// weapon := ru_time_lapser ;
18192: LD_ADDR_VAR 0 18
18196: PUSH
18197: LD_INT 49
18199: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18200: LD_VAR 0 12
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: LD_INT 2
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: IN
18215: PUSH
18216: LD_INT 11
18218: PUSH
18219: LD_VAR 0 5
18223: IN
18224: PUSH
18225: LD_INT 30
18227: PUSH
18228: LD_VAR 0 5
18232: IN
18233: OR
18234: AND
18235: PUSH
18236: LD_INT 6
18238: PPUSH
18239: LD_VAR 0 16
18243: PPUSH
18244: CALL_OW 321
18248: PUSH
18249: LD_INT 2
18251: EQUAL
18252: AND
18253: IFFALSE 18418
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18255: LD_INT 22
18257: PUSH
18258: LD_VAR 0 16
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 2
18269: PUSH
18270: LD_INT 35
18272: PUSH
18273: LD_INT 11
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 35
18282: PUSH
18283: LD_INT 30
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 91
18297: PUSH
18298: LD_VAR 0 1
18302: PUSH
18303: LD_INT 18
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: LIST
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: LIST
18315: PPUSH
18316: CALL_OW 69
18320: NOT
18321: PUSH
18322: LD_INT 22
18324: PUSH
18325: LD_VAR 0 16
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: LD_INT 30
18339: PUSH
18340: LD_INT 32
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 30
18349: PUSH
18350: LD_INT 33
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 91
18364: PUSH
18365: LD_VAR 0 1
18369: PUSH
18370: LD_INT 12
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: PUSH
18383: EMPTY
18384: LIST
18385: PPUSH
18386: CALL_OW 69
18390: PUSH
18391: LD_INT 2
18393: GREATER
18394: AND
18395: IFFALSE 18418
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18397: LD_ADDR_VAR 0 18
18401: PUSH
18402: LD_INT 11
18404: PUSH
18405: LD_INT 30
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_VAR 0 12
18416: ARRAY
18417: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18418: LD_VAR 0 18
18422: NOT
18423: PUSH
18424: LD_INT 40
18426: PPUSH
18427: LD_VAR 0 16
18431: PPUSH
18432: CALL_OW 321
18436: PUSH
18437: LD_INT 2
18439: EQUAL
18440: AND
18441: PUSH
18442: LD_INT 7
18444: PUSH
18445: LD_VAR 0 5
18449: IN
18450: PUSH
18451: LD_INT 28
18453: PUSH
18454: LD_VAR 0 5
18458: IN
18459: OR
18460: PUSH
18461: LD_INT 45
18463: PUSH
18464: LD_VAR 0 5
18468: IN
18469: OR
18470: AND
18471: IFFALSE 18725
// begin hex := GetHexInfo ( x , y ) ;
18473: LD_ADDR_VAR 0 4
18477: PUSH
18478: LD_VAR 0 10
18482: PPUSH
18483: LD_VAR 0 11
18487: PPUSH
18488: CALL_OW 546
18492: ST_TO_ADDR
// if hex [ 1 ] then
18493: LD_VAR 0 4
18497: PUSH
18498: LD_INT 1
18500: ARRAY
18501: IFFALSE 18505
// exit ;
18503: GO 18908
// height := hex [ 2 ] ;
18505: LD_ADDR_VAR 0 15
18509: PUSH
18510: LD_VAR 0 4
18514: PUSH
18515: LD_INT 2
18517: ARRAY
18518: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18519: LD_ADDR_VAR 0 14
18523: PUSH
18524: LD_INT 0
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: LD_INT 3
18532: PUSH
18533: LD_INT 5
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: ST_TO_ADDR
// for i in tmp do
18542: LD_ADDR_VAR 0 8
18546: PUSH
18547: LD_VAR 0 14
18551: PUSH
18552: FOR_IN
18553: IFFALSE 18723
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18555: LD_ADDR_VAR 0 9
18559: PUSH
18560: LD_VAR 0 10
18564: PPUSH
18565: LD_VAR 0 8
18569: PPUSH
18570: LD_INT 5
18572: PPUSH
18573: CALL_OW 272
18577: PUSH
18578: LD_VAR 0 11
18582: PPUSH
18583: LD_VAR 0 8
18587: PPUSH
18588: LD_INT 5
18590: PPUSH
18591: CALL_OW 273
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18600: LD_VAR 0 9
18604: PUSH
18605: LD_INT 1
18607: ARRAY
18608: PPUSH
18609: LD_VAR 0 9
18613: PUSH
18614: LD_INT 2
18616: ARRAY
18617: PPUSH
18618: CALL_OW 488
18622: IFFALSE 18721
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18624: LD_ADDR_VAR 0 4
18628: PUSH
18629: LD_VAR 0 9
18633: PUSH
18634: LD_INT 1
18636: ARRAY
18637: PPUSH
18638: LD_VAR 0 9
18642: PUSH
18643: LD_INT 2
18645: ARRAY
18646: PPUSH
18647: CALL_OW 546
18651: ST_TO_ADDR
// if hex [ 1 ] then
18652: LD_VAR 0 4
18656: PUSH
18657: LD_INT 1
18659: ARRAY
18660: IFFALSE 18664
// continue ;
18662: GO 18552
// h := hex [ 2 ] ;
18664: LD_ADDR_VAR 0 13
18668: PUSH
18669: LD_VAR 0 4
18673: PUSH
18674: LD_INT 2
18676: ARRAY
18677: ST_TO_ADDR
// if h + 7 < height then
18678: LD_VAR 0 13
18682: PUSH
18683: LD_INT 7
18685: PLUS
18686: PUSH
18687: LD_VAR 0 15
18691: LESS
18692: IFFALSE 18721
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
18694: LD_ADDR_VAR 0 18
18698: PUSH
18699: LD_INT 7
18701: PUSH
18702: LD_INT 28
18704: PUSH
18705: LD_INT 45
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: PUSH
18713: LD_VAR 0 12
18717: ARRAY
18718: ST_TO_ADDR
// break ;
18719: GO 18723
// end ; end ; end ;
18721: GO 18552
18723: POP
18724: POP
// end ; if not weapon then
18725: LD_VAR 0 18
18729: NOT
18730: IFFALSE 18790
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
18732: LD_ADDR_VAR 0 5
18736: PUSH
18737: LD_VAR 0 5
18741: PUSH
18742: LD_INT 11
18744: PUSH
18745: LD_INT 30
18747: PUSH
18748: LD_INT 49
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: LIST
18755: DIFF
18756: ST_TO_ADDR
// if not list then
18757: LD_VAR 0 5
18761: NOT
18762: IFFALSE 18766
// exit ;
18764: GO 18908
// weapon := list [ rand ( 1 , list ) ] ;
18766: LD_ADDR_VAR 0 18
18770: PUSH
18771: LD_VAR 0 5
18775: PUSH
18776: LD_INT 1
18778: PPUSH
18779: LD_VAR 0 5
18783: PPUSH
18784: CALL_OW 12
18788: ARRAY
18789: ST_TO_ADDR
// end ; if weapon then
18790: LD_VAR 0 18
18794: IFFALSE 18908
// begin tmp := CostOfWeapon ( weapon ) ;
18796: LD_ADDR_VAR 0 14
18800: PUSH
18801: LD_VAR 0 18
18805: PPUSH
18806: CALL_OW 451
18810: ST_TO_ADDR
// j := GetBase ( tower ) ;
18811: LD_ADDR_VAR 0 9
18815: PUSH
18816: LD_VAR 0 1
18820: PPUSH
18821: CALL_OW 274
18825: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
18826: LD_VAR 0 9
18830: PPUSH
18831: LD_INT 1
18833: PPUSH
18834: CALL_OW 275
18838: PUSH
18839: LD_VAR 0 14
18843: PUSH
18844: LD_INT 1
18846: ARRAY
18847: GREATEREQUAL
18848: PUSH
18849: LD_VAR 0 9
18853: PPUSH
18854: LD_INT 2
18856: PPUSH
18857: CALL_OW 275
18861: PUSH
18862: LD_VAR 0 14
18866: PUSH
18867: LD_INT 2
18869: ARRAY
18870: GREATEREQUAL
18871: AND
18872: PUSH
18873: LD_VAR 0 9
18877: PPUSH
18878: LD_INT 3
18880: PPUSH
18881: CALL_OW 275
18885: PUSH
18886: LD_VAR 0 14
18890: PUSH
18891: LD_INT 3
18893: ARRAY
18894: GREATEREQUAL
18895: AND
18896: IFFALSE 18908
// result := weapon ;
18898: LD_ADDR_VAR 0 3
18902: PUSH
18903: LD_VAR 0 18
18907: ST_TO_ADDR
// end ; end ;
18908: LD_VAR 0 3
18912: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
18913: LD_INT 0
18915: PPUSH
18916: PPUSH
// result := true ;
18917: LD_ADDR_VAR 0 3
18921: PUSH
18922: LD_INT 1
18924: ST_TO_ADDR
// if array1 = array2 then
18925: LD_VAR 0 1
18929: PUSH
18930: LD_VAR 0 2
18934: EQUAL
18935: IFFALSE 18995
// begin for i = 1 to array1 do
18937: LD_ADDR_VAR 0 4
18941: PUSH
18942: DOUBLE
18943: LD_INT 1
18945: DEC
18946: ST_TO_ADDR
18947: LD_VAR 0 1
18951: PUSH
18952: FOR_TO
18953: IFFALSE 18991
// if array1 [ i ] <> array2 [ i ] then
18955: LD_VAR 0 1
18959: PUSH
18960: LD_VAR 0 4
18964: ARRAY
18965: PUSH
18966: LD_VAR 0 2
18970: PUSH
18971: LD_VAR 0 4
18975: ARRAY
18976: NONEQUAL
18977: IFFALSE 18989
// begin result := false ;
18979: LD_ADDR_VAR 0 3
18983: PUSH
18984: LD_INT 0
18986: ST_TO_ADDR
// break ;
18987: GO 18991
// end ;
18989: GO 18952
18991: POP
18992: POP
// end else
18993: GO 19003
// result := false ;
18995: LD_ADDR_VAR 0 3
18999: PUSH
19000: LD_INT 0
19002: ST_TO_ADDR
// end ;
19003: LD_VAR 0 3
19007: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19008: LD_INT 0
19010: PPUSH
19011: PPUSH
// if not array1 or not array2 then
19012: LD_VAR 0 1
19016: NOT
19017: PUSH
19018: LD_VAR 0 2
19022: NOT
19023: OR
19024: IFFALSE 19028
// exit ;
19026: GO 19092
// result := true ;
19028: LD_ADDR_VAR 0 3
19032: PUSH
19033: LD_INT 1
19035: ST_TO_ADDR
// for i = 1 to array1 do
19036: LD_ADDR_VAR 0 4
19040: PUSH
19041: DOUBLE
19042: LD_INT 1
19044: DEC
19045: ST_TO_ADDR
19046: LD_VAR 0 1
19050: PUSH
19051: FOR_TO
19052: IFFALSE 19090
// if array1 [ i ] <> array2 [ i ] then
19054: LD_VAR 0 1
19058: PUSH
19059: LD_VAR 0 4
19063: ARRAY
19064: PUSH
19065: LD_VAR 0 2
19069: PUSH
19070: LD_VAR 0 4
19074: ARRAY
19075: NONEQUAL
19076: IFFALSE 19088
// begin result := false ;
19078: LD_ADDR_VAR 0 3
19082: PUSH
19083: LD_INT 0
19085: ST_TO_ADDR
// break ;
19086: GO 19090
// end ;
19088: GO 19051
19090: POP
19091: POP
// end ;
19092: LD_VAR 0 3
19096: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19097: LD_INT 0
19099: PPUSH
19100: PPUSH
19101: PPUSH
// pom := GetBase ( fac ) ;
19102: LD_ADDR_VAR 0 5
19106: PUSH
19107: LD_VAR 0 1
19111: PPUSH
19112: CALL_OW 274
19116: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19117: LD_ADDR_VAR 0 4
19121: PUSH
19122: LD_VAR 0 2
19126: PUSH
19127: LD_INT 1
19129: ARRAY
19130: PPUSH
19131: LD_VAR 0 2
19135: PUSH
19136: LD_INT 2
19138: ARRAY
19139: PPUSH
19140: LD_VAR 0 2
19144: PUSH
19145: LD_INT 3
19147: ARRAY
19148: PPUSH
19149: LD_VAR 0 2
19153: PUSH
19154: LD_INT 4
19156: ARRAY
19157: PPUSH
19158: CALL_OW 449
19162: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19163: LD_ADDR_VAR 0 3
19167: PUSH
19168: LD_VAR 0 5
19172: PPUSH
19173: LD_INT 1
19175: PPUSH
19176: CALL_OW 275
19180: PUSH
19181: LD_VAR 0 4
19185: PUSH
19186: LD_INT 1
19188: ARRAY
19189: GREATEREQUAL
19190: PUSH
19191: LD_VAR 0 5
19195: PPUSH
19196: LD_INT 2
19198: PPUSH
19199: CALL_OW 275
19203: PUSH
19204: LD_VAR 0 4
19208: PUSH
19209: LD_INT 2
19211: ARRAY
19212: GREATEREQUAL
19213: AND
19214: PUSH
19215: LD_VAR 0 5
19219: PPUSH
19220: LD_INT 3
19222: PPUSH
19223: CALL_OW 275
19227: PUSH
19228: LD_VAR 0 4
19232: PUSH
19233: LD_INT 3
19235: ARRAY
19236: GREATEREQUAL
19237: AND
19238: ST_TO_ADDR
// end ;
19239: LD_VAR 0 3
19243: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19244: LD_INT 0
19246: PPUSH
19247: PPUSH
19248: PPUSH
19249: PPUSH
// pom := GetBase ( building ) ;
19250: LD_ADDR_VAR 0 3
19254: PUSH
19255: LD_VAR 0 1
19259: PPUSH
19260: CALL_OW 274
19264: ST_TO_ADDR
// if not pom then
19265: LD_VAR 0 3
19269: NOT
19270: IFFALSE 19274
// exit ;
19272: GO 19444
// btype := GetBType ( building ) ;
19274: LD_ADDR_VAR 0 5
19278: PUSH
19279: LD_VAR 0 1
19283: PPUSH
19284: CALL_OW 266
19288: ST_TO_ADDR
// if btype = b_armoury then
19289: LD_VAR 0 5
19293: PUSH
19294: LD_INT 4
19296: EQUAL
19297: IFFALSE 19307
// btype := b_barracks ;
19299: LD_ADDR_VAR 0 5
19303: PUSH
19304: LD_INT 5
19306: ST_TO_ADDR
// if btype = b_depot then
19307: LD_VAR 0 5
19311: PUSH
19312: LD_INT 0
19314: EQUAL
19315: IFFALSE 19325
// btype := b_warehouse ;
19317: LD_ADDR_VAR 0 5
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if btype = b_workshop then
19325: LD_VAR 0 5
19329: PUSH
19330: LD_INT 2
19332: EQUAL
19333: IFFALSE 19343
// btype := b_factory ;
19335: LD_ADDR_VAR 0 5
19339: PUSH
19340: LD_INT 3
19342: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19343: LD_ADDR_VAR 0 4
19347: PUSH
19348: LD_VAR 0 5
19352: PPUSH
19353: LD_VAR 0 1
19357: PPUSH
19358: CALL_OW 248
19362: PPUSH
19363: CALL_OW 450
19367: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19368: LD_ADDR_VAR 0 2
19372: PUSH
19373: LD_VAR 0 3
19377: PPUSH
19378: LD_INT 1
19380: PPUSH
19381: CALL_OW 275
19385: PUSH
19386: LD_VAR 0 4
19390: PUSH
19391: LD_INT 1
19393: ARRAY
19394: GREATEREQUAL
19395: PUSH
19396: LD_VAR 0 3
19400: PPUSH
19401: LD_INT 2
19403: PPUSH
19404: CALL_OW 275
19408: PUSH
19409: LD_VAR 0 4
19413: PUSH
19414: LD_INT 2
19416: ARRAY
19417: GREATEREQUAL
19418: AND
19419: PUSH
19420: LD_VAR 0 3
19424: PPUSH
19425: LD_INT 3
19427: PPUSH
19428: CALL_OW 275
19432: PUSH
19433: LD_VAR 0 4
19437: PUSH
19438: LD_INT 3
19440: ARRAY
19441: GREATEREQUAL
19442: AND
19443: ST_TO_ADDR
// end ;
19444: LD_VAR 0 2
19448: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19449: LD_INT 0
19451: PPUSH
19452: PPUSH
19453: PPUSH
// pom := GetBase ( building ) ;
19454: LD_ADDR_VAR 0 4
19458: PUSH
19459: LD_VAR 0 1
19463: PPUSH
19464: CALL_OW 274
19468: ST_TO_ADDR
// if not pom then
19469: LD_VAR 0 4
19473: NOT
19474: IFFALSE 19478
// exit ;
19476: GO 19579
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19478: LD_ADDR_VAR 0 5
19482: PUSH
19483: LD_VAR 0 2
19487: PPUSH
19488: LD_VAR 0 1
19492: PPUSH
19493: CALL_OW 248
19497: PPUSH
19498: CALL_OW 450
19502: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19503: LD_ADDR_VAR 0 3
19507: PUSH
19508: LD_VAR 0 4
19512: PPUSH
19513: LD_INT 1
19515: PPUSH
19516: CALL_OW 275
19520: PUSH
19521: LD_VAR 0 5
19525: PUSH
19526: LD_INT 1
19528: ARRAY
19529: GREATEREQUAL
19530: PUSH
19531: LD_VAR 0 4
19535: PPUSH
19536: LD_INT 2
19538: PPUSH
19539: CALL_OW 275
19543: PUSH
19544: LD_VAR 0 5
19548: PUSH
19549: LD_INT 2
19551: ARRAY
19552: GREATEREQUAL
19553: AND
19554: PUSH
19555: LD_VAR 0 4
19559: PPUSH
19560: LD_INT 3
19562: PPUSH
19563: CALL_OW 275
19567: PUSH
19568: LD_VAR 0 5
19572: PUSH
19573: LD_INT 3
19575: ARRAY
19576: GREATEREQUAL
19577: AND
19578: ST_TO_ADDR
// end ;
19579: LD_VAR 0 3
19583: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19584: LD_INT 0
19586: PPUSH
19587: PPUSH
19588: PPUSH
19589: PPUSH
19590: PPUSH
19591: PPUSH
19592: PPUSH
19593: PPUSH
19594: PPUSH
19595: PPUSH
19596: PPUSH
// result := false ;
19597: LD_ADDR_VAR 0 8
19601: PUSH
19602: LD_INT 0
19604: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19605: LD_VAR 0 5
19609: NOT
19610: PUSH
19611: LD_VAR 0 1
19615: NOT
19616: OR
19617: PUSH
19618: LD_VAR 0 2
19622: NOT
19623: OR
19624: PUSH
19625: LD_VAR 0 3
19629: NOT
19630: OR
19631: IFFALSE 19635
// exit ;
19633: GO 20449
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19635: LD_ADDR_VAR 0 14
19639: PUSH
19640: LD_VAR 0 1
19644: PPUSH
19645: LD_VAR 0 2
19649: PPUSH
19650: LD_VAR 0 3
19654: PPUSH
19655: LD_VAR 0 4
19659: PPUSH
19660: LD_VAR 0 5
19664: PUSH
19665: LD_INT 1
19667: ARRAY
19668: PPUSH
19669: CALL_OW 248
19673: PPUSH
19674: LD_INT 0
19676: PPUSH
19677: CALL 21682 0 6
19681: ST_TO_ADDR
// if not hexes then
19682: LD_VAR 0 14
19686: NOT
19687: IFFALSE 19691
// exit ;
19689: GO 20449
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19691: LD_ADDR_VAR 0 17
19695: PUSH
19696: LD_VAR 0 5
19700: PPUSH
19701: LD_INT 22
19703: PUSH
19704: LD_VAR 0 13
19708: PPUSH
19709: CALL_OW 255
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: PUSH
19721: LD_INT 30
19723: PUSH
19724: LD_INT 0
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 30
19733: PUSH
19734: LD_INT 1
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PPUSH
19750: CALL_OW 72
19754: ST_TO_ADDR
// for i = 1 to hexes do
19755: LD_ADDR_VAR 0 9
19759: PUSH
19760: DOUBLE
19761: LD_INT 1
19763: DEC
19764: ST_TO_ADDR
19765: LD_VAR 0 14
19769: PUSH
19770: FOR_TO
19771: IFFALSE 20447
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19773: LD_ADDR_VAR 0 13
19777: PUSH
19778: LD_VAR 0 14
19782: PUSH
19783: LD_VAR 0 9
19787: ARRAY
19788: PUSH
19789: LD_INT 1
19791: ARRAY
19792: PPUSH
19793: LD_VAR 0 14
19797: PUSH
19798: LD_VAR 0 9
19802: ARRAY
19803: PUSH
19804: LD_INT 2
19806: ARRAY
19807: PPUSH
19808: CALL_OW 428
19812: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
19813: LD_VAR 0 14
19817: PUSH
19818: LD_VAR 0 9
19822: ARRAY
19823: PUSH
19824: LD_INT 1
19826: ARRAY
19827: PPUSH
19828: LD_VAR 0 14
19832: PUSH
19833: LD_VAR 0 9
19837: ARRAY
19838: PUSH
19839: LD_INT 2
19841: ARRAY
19842: PPUSH
19843: CALL_OW 351
19847: PUSH
19848: LD_VAR 0 14
19852: PUSH
19853: LD_VAR 0 9
19857: ARRAY
19858: PUSH
19859: LD_INT 1
19861: ARRAY
19862: PPUSH
19863: LD_VAR 0 14
19867: PUSH
19868: LD_VAR 0 9
19872: ARRAY
19873: PUSH
19874: LD_INT 2
19876: ARRAY
19877: PPUSH
19878: CALL_OW 488
19882: NOT
19883: OR
19884: PUSH
19885: LD_VAR 0 13
19889: PPUSH
19890: CALL_OW 247
19894: PUSH
19895: LD_INT 3
19897: EQUAL
19898: OR
19899: IFFALSE 19905
// exit ;
19901: POP
19902: POP
19903: GO 20449
// if not tmp then
19905: LD_VAR 0 13
19909: NOT
19910: IFFALSE 19914
// continue ;
19912: GO 19770
// result := true ;
19914: LD_ADDR_VAR 0 8
19918: PUSH
19919: LD_INT 1
19921: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
19922: LD_VAR 0 6
19926: PUSH
19927: LD_VAR 0 13
19931: PPUSH
19932: CALL_OW 247
19936: PUSH
19937: LD_INT 2
19939: EQUAL
19940: AND
19941: PUSH
19942: LD_VAR 0 13
19946: PPUSH
19947: CALL_OW 263
19951: PUSH
19952: LD_INT 1
19954: EQUAL
19955: AND
19956: IFFALSE 20120
// begin if IsDrivenBy ( tmp ) then
19958: LD_VAR 0 13
19962: PPUSH
19963: CALL_OW 311
19967: IFFALSE 19971
// continue ;
19969: GO 19770
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
19971: LD_VAR 0 6
19975: PPUSH
19976: LD_INT 3
19978: PUSH
19979: LD_INT 60
19981: PUSH
19982: EMPTY
19983: LIST
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 3
19991: PUSH
19992: LD_INT 55
19994: PUSH
19995: EMPTY
19996: LIST
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PPUSH
20006: CALL_OW 72
20010: IFFALSE 20118
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20012: LD_ADDR_VAR 0 18
20016: PUSH
20017: LD_VAR 0 6
20021: PPUSH
20022: LD_INT 3
20024: PUSH
20025: LD_INT 60
20027: PUSH
20028: EMPTY
20029: LIST
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 3
20037: PUSH
20038: LD_INT 55
20040: PUSH
20041: EMPTY
20042: LIST
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PPUSH
20052: CALL_OW 72
20056: PUSH
20057: LD_INT 1
20059: ARRAY
20060: ST_TO_ADDR
// if IsInUnit ( driver ) then
20061: LD_VAR 0 18
20065: PPUSH
20066: CALL_OW 310
20070: IFFALSE 20081
// ComExit ( driver ) ;
20072: LD_VAR 0 18
20076: PPUSH
20077: CALL 45462 0 1
// AddComEnterUnit ( driver , tmp ) ;
20081: LD_VAR 0 18
20085: PPUSH
20086: LD_VAR 0 13
20090: PPUSH
20091: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20095: LD_VAR 0 18
20099: PPUSH
20100: LD_VAR 0 7
20104: PPUSH
20105: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20109: LD_VAR 0 18
20113: PPUSH
20114: CALL_OW 181
// end ; continue ;
20118: GO 19770
// end ; if not cleaners or not tmp in cleaners then
20120: LD_VAR 0 6
20124: NOT
20125: PUSH
20126: LD_VAR 0 13
20130: PUSH
20131: LD_VAR 0 6
20135: IN
20136: NOT
20137: OR
20138: IFFALSE 20445
// begin if dep then
20140: LD_VAR 0 17
20144: IFFALSE 20280
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20146: LD_ADDR_VAR 0 16
20150: PUSH
20151: LD_VAR 0 17
20155: PUSH
20156: LD_INT 1
20158: ARRAY
20159: PPUSH
20160: CALL_OW 250
20164: PPUSH
20165: LD_VAR 0 17
20169: PUSH
20170: LD_INT 1
20172: ARRAY
20173: PPUSH
20174: CALL_OW 254
20178: PPUSH
20179: LD_INT 5
20181: PPUSH
20182: CALL_OW 272
20186: PUSH
20187: LD_VAR 0 17
20191: PUSH
20192: LD_INT 1
20194: ARRAY
20195: PPUSH
20196: CALL_OW 251
20200: PPUSH
20201: LD_VAR 0 17
20205: PUSH
20206: LD_INT 1
20208: ARRAY
20209: PPUSH
20210: CALL_OW 254
20214: PPUSH
20215: LD_INT 5
20217: PPUSH
20218: CALL_OW 273
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20227: LD_VAR 0 16
20231: PUSH
20232: LD_INT 1
20234: ARRAY
20235: PPUSH
20236: LD_VAR 0 16
20240: PUSH
20241: LD_INT 2
20243: ARRAY
20244: PPUSH
20245: CALL_OW 488
20249: IFFALSE 20280
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20251: LD_VAR 0 13
20255: PPUSH
20256: LD_VAR 0 16
20260: PUSH
20261: LD_INT 1
20263: ARRAY
20264: PPUSH
20265: LD_VAR 0 16
20269: PUSH
20270: LD_INT 2
20272: ARRAY
20273: PPUSH
20274: CALL_OW 111
// continue ;
20278: GO 19770
// end ; end ; r := GetDir ( tmp ) ;
20280: LD_ADDR_VAR 0 15
20284: PUSH
20285: LD_VAR 0 13
20289: PPUSH
20290: CALL_OW 254
20294: ST_TO_ADDR
// if r = 5 then
20295: LD_VAR 0 15
20299: PUSH
20300: LD_INT 5
20302: EQUAL
20303: IFFALSE 20313
// r := 0 ;
20305: LD_ADDR_VAR 0 15
20309: PUSH
20310: LD_INT 0
20312: ST_TO_ADDR
// for j = r to 5 do
20313: LD_ADDR_VAR 0 10
20317: PUSH
20318: DOUBLE
20319: LD_VAR 0 15
20323: DEC
20324: ST_TO_ADDR
20325: LD_INT 5
20327: PUSH
20328: FOR_TO
20329: IFFALSE 20443
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20331: LD_ADDR_VAR 0 11
20335: PUSH
20336: LD_VAR 0 13
20340: PPUSH
20341: CALL_OW 250
20345: PPUSH
20346: LD_VAR 0 10
20350: PPUSH
20351: LD_INT 2
20353: PPUSH
20354: CALL_OW 272
20358: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20359: LD_ADDR_VAR 0 12
20363: PUSH
20364: LD_VAR 0 13
20368: PPUSH
20369: CALL_OW 251
20373: PPUSH
20374: LD_VAR 0 10
20378: PPUSH
20379: LD_INT 2
20381: PPUSH
20382: CALL_OW 273
20386: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20387: LD_VAR 0 11
20391: PPUSH
20392: LD_VAR 0 12
20396: PPUSH
20397: CALL_OW 488
20401: PUSH
20402: LD_VAR 0 11
20406: PPUSH
20407: LD_VAR 0 12
20411: PPUSH
20412: CALL_OW 428
20416: NOT
20417: AND
20418: IFFALSE 20441
// begin ComMoveXY ( tmp , _x , _y ) ;
20420: LD_VAR 0 13
20424: PPUSH
20425: LD_VAR 0 11
20429: PPUSH
20430: LD_VAR 0 12
20434: PPUSH
20435: CALL_OW 111
// break ;
20439: GO 20443
// end ; end ;
20441: GO 20328
20443: POP
20444: POP
// end ; end ;
20445: GO 19770
20447: POP
20448: POP
// end ;
20449: LD_VAR 0 8
20453: RET
// export function BuildingTechInvented ( side , btype ) ; begin
20454: LD_INT 0
20456: PPUSH
// result := true ;
20457: LD_ADDR_VAR 0 3
20461: PUSH
20462: LD_INT 1
20464: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
20465: LD_VAR 0 2
20469: PUSH
20470: LD_INT 24
20472: DOUBLE
20473: EQUAL
20474: IFTRUE 20484
20476: LD_INT 33
20478: DOUBLE
20479: EQUAL
20480: IFTRUE 20484
20482: GO 20509
20484: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
20485: LD_ADDR_VAR 0 3
20489: PUSH
20490: LD_INT 32
20492: PPUSH
20493: LD_VAR 0 1
20497: PPUSH
20498: CALL_OW 321
20502: PUSH
20503: LD_INT 2
20505: EQUAL
20506: ST_TO_ADDR
20507: GO 20825
20509: LD_INT 20
20511: DOUBLE
20512: EQUAL
20513: IFTRUE 20517
20515: GO 20542
20517: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_INT 6
20525: PPUSH
20526: LD_VAR 0 1
20530: PPUSH
20531: CALL_OW 321
20535: PUSH
20536: LD_INT 2
20538: EQUAL
20539: ST_TO_ADDR
20540: GO 20825
20542: LD_INT 22
20544: DOUBLE
20545: EQUAL
20546: IFTRUE 20556
20548: LD_INT 36
20550: DOUBLE
20551: EQUAL
20552: IFTRUE 20556
20554: GO 20581
20556: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
20557: LD_ADDR_VAR 0 3
20561: PUSH
20562: LD_INT 15
20564: PPUSH
20565: LD_VAR 0 1
20569: PPUSH
20570: CALL_OW 321
20574: PUSH
20575: LD_INT 2
20577: EQUAL
20578: ST_TO_ADDR
20579: GO 20825
20581: LD_INT 30
20583: DOUBLE
20584: EQUAL
20585: IFTRUE 20589
20587: GO 20614
20589: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
20590: LD_ADDR_VAR 0 3
20594: PUSH
20595: LD_INT 20
20597: PPUSH
20598: LD_VAR 0 1
20602: PPUSH
20603: CALL_OW 321
20607: PUSH
20608: LD_INT 2
20610: EQUAL
20611: ST_TO_ADDR
20612: GO 20825
20614: LD_INT 28
20616: DOUBLE
20617: EQUAL
20618: IFTRUE 20628
20620: LD_INT 21
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20653
20628: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
20629: LD_ADDR_VAR 0 3
20633: PUSH
20634: LD_INT 21
20636: PPUSH
20637: LD_VAR 0 1
20641: PPUSH
20642: CALL_OW 321
20646: PUSH
20647: LD_INT 2
20649: EQUAL
20650: ST_TO_ADDR
20651: GO 20825
20653: LD_INT 16
20655: DOUBLE
20656: EQUAL
20657: IFTRUE 20661
20659: GO 20686
20661: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
20662: LD_ADDR_VAR 0 3
20666: PUSH
20667: LD_INT 84
20669: PPUSH
20670: LD_VAR 0 1
20674: PPUSH
20675: CALL_OW 321
20679: PUSH
20680: LD_INT 2
20682: EQUAL
20683: ST_TO_ADDR
20684: GO 20825
20686: LD_INT 19
20688: DOUBLE
20689: EQUAL
20690: IFTRUE 20700
20692: LD_INT 23
20694: DOUBLE
20695: EQUAL
20696: IFTRUE 20700
20698: GO 20725
20700: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
20701: LD_ADDR_VAR 0 3
20705: PUSH
20706: LD_INT 83
20708: PPUSH
20709: LD_VAR 0 1
20713: PPUSH
20714: CALL_OW 321
20718: PUSH
20719: LD_INT 2
20721: EQUAL
20722: ST_TO_ADDR
20723: GO 20825
20725: LD_INT 17
20727: DOUBLE
20728: EQUAL
20729: IFTRUE 20733
20731: GO 20758
20733: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
20734: LD_ADDR_VAR 0 3
20738: PUSH
20739: LD_INT 39
20741: PPUSH
20742: LD_VAR 0 1
20746: PPUSH
20747: CALL_OW 321
20751: PUSH
20752: LD_INT 2
20754: EQUAL
20755: ST_TO_ADDR
20756: GO 20825
20758: LD_INT 18
20760: DOUBLE
20761: EQUAL
20762: IFTRUE 20766
20764: GO 20791
20766: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
20767: LD_ADDR_VAR 0 3
20771: PUSH
20772: LD_INT 40
20774: PPUSH
20775: LD_VAR 0 1
20779: PPUSH
20780: CALL_OW 321
20784: PUSH
20785: LD_INT 2
20787: EQUAL
20788: ST_TO_ADDR
20789: GO 20825
20791: LD_INT 27
20793: DOUBLE
20794: EQUAL
20795: IFTRUE 20799
20797: GO 20824
20799: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
20800: LD_ADDR_VAR 0 3
20804: PUSH
20805: LD_INT 35
20807: PPUSH
20808: LD_VAR 0 1
20812: PPUSH
20813: CALL_OW 321
20817: PUSH
20818: LD_INT 2
20820: EQUAL
20821: ST_TO_ADDR
20822: GO 20825
20824: POP
// end ;
20825: LD_VAR 0 3
20829: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
20830: LD_INT 0
20832: PPUSH
20833: PPUSH
20834: PPUSH
20835: PPUSH
20836: PPUSH
20837: PPUSH
20838: PPUSH
20839: PPUSH
20840: PPUSH
20841: PPUSH
20842: PPUSH
// result := false ;
20843: LD_ADDR_VAR 0 6
20847: PUSH
20848: LD_INT 0
20850: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
20851: LD_VAR 0 1
20855: NOT
20856: PUSH
20857: LD_VAR 0 1
20861: PPUSH
20862: CALL_OW 266
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: IN
20877: NOT
20878: OR
20879: PUSH
20880: LD_VAR 0 2
20884: NOT
20885: OR
20886: PUSH
20887: LD_VAR 0 5
20891: PUSH
20892: LD_INT 0
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: LD_INT 3
20903: PUSH
20904: LD_INT 4
20906: PUSH
20907: LD_INT 5
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: IN
20918: NOT
20919: OR
20920: PUSH
20921: LD_VAR 0 3
20925: PPUSH
20926: LD_VAR 0 4
20930: PPUSH
20931: CALL_OW 488
20935: NOT
20936: OR
20937: IFFALSE 20941
// exit ;
20939: GO 21677
// side := GetSide ( depot ) ;
20941: LD_ADDR_VAR 0 9
20945: PUSH
20946: LD_VAR 0 1
20950: PPUSH
20951: CALL_OW 255
20955: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
20956: LD_VAR 0 9
20960: PPUSH
20961: LD_VAR 0 2
20965: PPUSH
20966: CALL 20454 0 2
20970: NOT
20971: IFFALSE 20975
// exit ;
20973: GO 21677
// pom := GetBase ( depot ) ;
20975: LD_ADDR_VAR 0 10
20979: PUSH
20980: LD_VAR 0 1
20984: PPUSH
20985: CALL_OW 274
20989: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
20990: LD_ADDR_VAR 0 11
20994: PUSH
20995: LD_VAR 0 2
20999: PPUSH
21000: LD_VAR 0 1
21004: PPUSH
21005: CALL_OW 248
21009: PPUSH
21010: CALL_OW 450
21014: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21015: LD_VAR 0 10
21019: PPUSH
21020: LD_INT 1
21022: PPUSH
21023: CALL_OW 275
21027: PUSH
21028: LD_VAR 0 11
21032: PUSH
21033: LD_INT 1
21035: ARRAY
21036: GREATEREQUAL
21037: PUSH
21038: LD_VAR 0 10
21042: PPUSH
21043: LD_INT 2
21045: PPUSH
21046: CALL_OW 275
21050: PUSH
21051: LD_VAR 0 11
21055: PUSH
21056: LD_INT 2
21058: ARRAY
21059: GREATEREQUAL
21060: AND
21061: PUSH
21062: LD_VAR 0 10
21066: PPUSH
21067: LD_INT 3
21069: PPUSH
21070: CALL_OW 275
21074: PUSH
21075: LD_VAR 0 11
21079: PUSH
21080: LD_INT 3
21082: ARRAY
21083: GREATEREQUAL
21084: AND
21085: NOT
21086: IFFALSE 21090
// exit ;
21088: GO 21677
// if GetBType ( depot ) = b_depot then
21090: LD_VAR 0 1
21094: PPUSH
21095: CALL_OW 266
21099: PUSH
21100: LD_INT 0
21102: EQUAL
21103: IFFALSE 21115
// dist := 28 else
21105: LD_ADDR_VAR 0 14
21109: PUSH
21110: LD_INT 28
21112: ST_TO_ADDR
21113: GO 21123
// dist := 36 ;
21115: LD_ADDR_VAR 0 14
21119: PUSH
21120: LD_INT 36
21122: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21123: LD_VAR 0 1
21127: PPUSH
21128: LD_VAR 0 3
21132: PPUSH
21133: LD_VAR 0 4
21137: PPUSH
21138: CALL_OW 297
21142: PUSH
21143: LD_VAR 0 14
21147: GREATER
21148: IFFALSE 21152
// exit ;
21150: GO 21677
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21152: LD_ADDR_VAR 0 12
21156: PUSH
21157: LD_VAR 0 2
21161: PPUSH
21162: LD_VAR 0 3
21166: PPUSH
21167: LD_VAR 0 4
21171: PPUSH
21172: LD_VAR 0 5
21176: PPUSH
21177: LD_VAR 0 1
21181: PPUSH
21182: CALL_OW 248
21186: PPUSH
21187: LD_INT 0
21189: PPUSH
21190: CALL 21682 0 6
21194: ST_TO_ADDR
// if not hexes then
21195: LD_VAR 0 12
21199: NOT
21200: IFFALSE 21204
// exit ;
21202: GO 21677
// hex := GetHexInfo ( x , y ) ;
21204: LD_ADDR_VAR 0 15
21208: PUSH
21209: LD_VAR 0 3
21213: PPUSH
21214: LD_VAR 0 4
21218: PPUSH
21219: CALL_OW 546
21223: ST_TO_ADDR
// if hex [ 1 ] then
21224: LD_VAR 0 15
21228: PUSH
21229: LD_INT 1
21231: ARRAY
21232: IFFALSE 21236
// exit ;
21234: GO 21677
// height := hex [ 2 ] ;
21236: LD_ADDR_VAR 0 13
21240: PUSH
21241: LD_VAR 0 15
21245: PUSH
21246: LD_INT 2
21248: ARRAY
21249: ST_TO_ADDR
// for i = 1 to hexes do
21250: LD_ADDR_VAR 0 7
21254: PUSH
21255: DOUBLE
21256: LD_INT 1
21258: DEC
21259: ST_TO_ADDR
21260: LD_VAR 0 12
21264: PUSH
21265: FOR_TO
21266: IFFALSE 21596
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21268: LD_VAR 0 12
21272: PUSH
21273: LD_VAR 0 7
21277: ARRAY
21278: PUSH
21279: LD_INT 1
21281: ARRAY
21282: PPUSH
21283: LD_VAR 0 12
21287: PUSH
21288: LD_VAR 0 7
21292: ARRAY
21293: PUSH
21294: LD_INT 2
21296: ARRAY
21297: PPUSH
21298: CALL_OW 488
21302: NOT
21303: PUSH
21304: LD_VAR 0 12
21308: PUSH
21309: LD_VAR 0 7
21313: ARRAY
21314: PUSH
21315: LD_INT 1
21317: ARRAY
21318: PPUSH
21319: LD_VAR 0 12
21323: PUSH
21324: LD_VAR 0 7
21328: ARRAY
21329: PUSH
21330: LD_INT 2
21332: ARRAY
21333: PPUSH
21334: CALL_OW 428
21338: PUSH
21339: LD_INT 0
21341: GREATER
21342: OR
21343: PUSH
21344: LD_VAR 0 12
21348: PUSH
21349: LD_VAR 0 7
21353: ARRAY
21354: PUSH
21355: LD_INT 1
21357: ARRAY
21358: PPUSH
21359: LD_VAR 0 12
21363: PUSH
21364: LD_VAR 0 7
21368: ARRAY
21369: PUSH
21370: LD_INT 2
21372: ARRAY
21373: PPUSH
21374: CALL_OW 351
21378: OR
21379: IFFALSE 21385
// exit ;
21381: POP
21382: POP
21383: GO 21677
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21385: LD_ADDR_VAR 0 8
21389: PUSH
21390: LD_VAR 0 12
21394: PUSH
21395: LD_VAR 0 7
21399: ARRAY
21400: PUSH
21401: LD_INT 1
21403: ARRAY
21404: PPUSH
21405: LD_VAR 0 12
21409: PUSH
21410: LD_VAR 0 7
21414: ARRAY
21415: PUSH
21416: LD_INT 2
21418: ARRAY
21419: PPUSH
21420: CALL_OW 546
21424: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21425: LD_VAR 0 8
21429: PUSH
21430: LD_INT 1
21432: ARRAY
21433: PUSH
21434: LD_VAR 0 8
21438: PUSH
21439: LD_INT 2
21441: ARRAY
21442: PUSH
21443: LD_VAR 0 13
21447: PUSH
21448: LD_INT 2
21450: PLUS
21451: GREATER
21452: OR
21453: PUSH
21454: LD_VAR 0 8
21458: PUSH
21459: LD_INT 2
21461: ARRAY
21462: PUSH
21463: LD_VAR 0 13
21467: PUSH
21468: LD_INT 2
21470: MINUS
21471: LESS
21472: OR
21473: PUSH
21474: LD_VAR 0 8
21478: PUSH
21479: LD_INT 3
21481: ARRAY
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: LD_INT 8
21488: PUSH
21489: LD_INT 9
21491: PUSH
21492: LD_INT 10
21494: PUSH
21495: LD_INT 11
21497: PUSH
21498: LD_INT 12
21500: PUSH
21501: LD_INT 13
21503: PUSH
21504: LD_INT 16
21506: PUSH
21507: LD_INT 17
21509: PUSH
21510: LD_INT 18
21512: PUSH
21513: LD_INT 19
21515: PUSH
21516: LD_INT 20
21518: PUSH
21519: LD_INT 21
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: IN
21537: NOT
21538: OR
21539: PUSH
21540: LD_VAR 0 8
21544: PUSH
21545: LD_INT 5
21547: ARRAY
21548: NOT
21549: OR
21550: PUSH
21551: LD_VAR 0 8
21555: PUSH
21556: LD_INT 6
21558: ARRAY
21559: PUSH
21560: LD_INT 1
21562: PUSH
21563: LD_INT 2
21565: PUSH
21566: LD_INT 7
21568: PUSH
21569: LD_INT 9
21571: PUSH
21572: LD_INT 10
21574: PUSH
21575: LD_INT 11
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: IN
21586: NOT
21587: OR
21588: IFFALSE 21594
// exit ;
21590: POP
21591: POP
21592: GO 21677
// end ;
21594: GO 21265
21596: POP
21597: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21598: LD_VAR 0 9
21602: PPUSH
21603: LD_VAR 0 3
21607: PPUSH
21608: LD_VAR 0 4
21612: PPUSH
21613: LD_INT 20
21615: PPUSH
21616: CALL 13629 0 4
21620: PUSH
21621: LD_INT 4
21623: ARRAY
21624: IFFALSE 21628
// exit ;
21626: GO 21677
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21628: LD_VAR 0 2
21632: PUSH
21633: LD_INT 29
21635: PUSH
21636: LD_INT 30
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: IN
21643: PUSH
21644: LD_VAR 0 3
21648: PPUSH
21649: LD_VAR 0 4
21653: PPUSH
21654: LD_VAR 0 9
21658: PPUSH
21659: CALL_OW 440
21663: NOT
21664: AND
21665: IFFALSE 21669
// exit ;
21667: GO 21677
// result := true ;
21669: LD_ADDR_VAR 0 6
21673: PUSH
21674: LD_INT 1
21676: ST_TO_ADDR
// end ;
21677: LD_VAR 0 6
21681: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21682: LD_INT 0
21684: PPUSH
21685: PPUSH
21686: PPUSH
21687: PPUSH
21688: PPUSH
21689: PPUSH
21690: PPUSH
21691: PPUSH
21692: PPUSH
21693: PPUSH
21694: PPUSH
21695: PPUSH
21696: PPUSH
21697: PPUSH
21698: PPUSH
21699: PPUSH
21700: PPUSH
21701: PPUSH
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
21706: PPUSH
21707: PPUSH
21708: PPUSH
21709: PPUSH
21710: PPUSH
21711: PPUSH
21712: PPUSH
21713: PPUSH
21714: PPUSH
21715: PPUSH
21716: PPUSH
21717: PPUSH
21718: PPUSH
21719: PPUSH
21720: PPUSH
21721: PPUSH
21722: PPUSH
21723: PPUSH
21724: PPUSH
21725: PPUSH
21726: PPUSH
21727: PPUSH
21728: PPUSH
21729: PPUSH
21730: PPUSH
21731: PPUSH
21732: PPUSH
21733: PPUSH
21734: PPUSH
21735: PPUSH
21736: PPUSH
21737: PPUSH
21738: PPUSH
21739: PPUSH
21740: PPUSH
21741: PPUSH
// result = [ ] ;
21742: LD_ADDR_VAR 0 7
21746: PUSH
21747: EMPTY
21748: ST_TO_ADDR
// temp_list = [ ] ;
21749: LD_ADDR_VAR 0 9
21753: PUSH
21754: EMPTY
21755: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
21756: LD_VAR 0 4
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 1
21766: PUSH
21767: LD_INT 2
21769: PUSH
21770: LD_INT 3
21772: PUSH
21773: LD_INT 4
21775: PUSH
21776: LD_INT 5
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: IN
21787: NOT
21788: PUSH
21789: LD_VAR 0 1
21793: PUSH
21794: LD_INT 0
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: IN
21804: PUSH
21805: LD_VAR 0 5
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: LD_INT 2
21815: PUSH
21816: LD_INT 3
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: LIST
21823: IN
21824: NOT
21825: AND
21826: OR
21827: IFFALSE 21831
// exit ;
21829: GO 40222
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
21831: LD_VAR 0 1
21835: PUSH
21836: LD_INT 6
21838: PUSH
21839: LD_INT 7
21841: PUSH
21842: LD_INT 8
21844: PUSH
21845: LD_INT 13
21847: PUSH
21848: LD_INT 12
21850: PUSH
21851: LD_INT 15
21853: PUSH
21854: LD_INT 11
21856: PUSH
21857: LD_INT 14
21859: PUSH
21860: LD_INT 10
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: IN
21874: IFFALSE 21884
// btype = b_lab ;
21876: LD_ADDR_VAR 0 1
21880: PUSH
21881: LD_INT 6
21883: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
21884: LD_VAR 0 6
21888: PUSH
21889: LD_INT 0
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: LD_INT 2
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: IN
21903: NOT
21904: PUSH
21905: LD_VAR 0 1
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: LD_INT 1
21915: PUSH
21916: LD_INT 2
21918: PUSH
21919: LD_INT 3
21921: PUSH
21922: LD_INT 6
21924: PUSH
21925: LD_INT 36
21927: PUSH
21928: LD_INT 4
21930: PUSH
21931: LD_INT 5
21933: PUSH
21934: LD_INT 31
21936: PUSH
21937: LD_INT 32
21939: PUSH
21940: LD_INT 33
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: IN
21956: NOT
21957: PUSH
21958: LD_VAR 0 6
21962: PUSH
21963: LD_INT 1
21965: EQUAL
21966: AND
21967: OR
21968: PUSH
21969: LD_VAR 0 1
21973: PUSH
21974: LD_INT 2
21976: PUSH
21977: LD_INT 3
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: IN
21984: NOT
21985: PUSH
21986: LD_VAR 0 6
21990: PUSH
21991: LD_INT 2
21993: EQUAL
21994: AND
21995: OR
21996: IFFALSE 22006
// mode = 0 ;
21998: LD_ADDR_VAR 0 6
22002: PUSH
22003: LD_INT 0
22005: ST_TO_ADDR
// case mode of 0 :
22006: LD_VAR 0 6
22010: PUSH
22011: LD_INT 0
22013: DOUBLE
22014: EQUAL
22015: IFTRUE 22019
22017: GO 33472
22019: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22020: LD_ADDR_VAR 0 11
22024: PUSH
22025: LD_INT 0
22027: PUSH
22028: LD_INT 0
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: LD_INT 1
22040: NEG
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 1
22048: PUSH
22049: LD_INT 0
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 1
22078: NEG
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 1
22089: NEG
22090: PUSH
22091: LD_INT 1
22093: NEG
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 1
22101: NEG
22102: PUSH
22103: LD_INT 2
22105: NEG
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 0
22113: PUSH
22114: LD_INT 2
22116: NEG
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 1
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 1
22135: PUSH
22136: LD_INT 2
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 0
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 1
22155: NEG
22156: PUSH
22157: LD_INT 1
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 1
22166: PUSH
22167: LD_INT 3
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 0
22176: PUSH
22177: LD_INT 3
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 1
22186: NEG
22187: PUSH
22188: LD_INT 2
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22213: LD_ADDR_VAR 0 12
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: LD_INT 0
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: LD_INT 1
22233: NEG
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 1
22271: NEG
22272: PUSH
22273: LD_INT 0
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: LD_INT 1
22297: NEG
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 2
22305: PUSH
22306: LD_INT 0
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 2
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 1
22325: NEG
22326: PUSH
22327: LD_INT 1
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 2
22336: NEG
22337: PUSH
22338: LD_INT 0
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 2
22347: NEG
22348: PUSH
22349: LD_INT 1
22351: NEG
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 2
22359: NEG
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 3
22370: NEG
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 3
22381: NEG
22382: PUSH
22383: LD_INT 1
22385: NEG
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22409: LD_ADDR_VAR 0 13
22413: PUSH
22414: LD_INT 0
22416: PUSH
22417: LD_INT 0
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 0
22426: PUSH
22427: LD_INT 1
22429: NEG
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 0
22457: PUSH
22458: LD_INT 1
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: NEG
22468: PUSH
22469: LD_INT 0
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: LD_INT 1
22482: NEG
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 1
22490: NEG
22491: PUSH
22492: LD_INT 2
22494: NEG
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 2
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 2
22512: PUSH
22513: LD_INT 2
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 2
22532: NEG
22533: PUSH
22534: LD_INT 1
22536: NEG
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 2
22544: NEG
22545: PUSH
22546: LD_INT 2
22548: NEG
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 2
22556: NEG
22557: PUSH
22558: LD_INT 3
22560: NEG
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 3
22568: NEG
22569: PUSH
22570: LD_INT 2
22572: NEG
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 3
22580: NEG
22581: PUSH
22582: LD_INT 3
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22608: LD_ADDR_VAR 0 14
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: LD_INT 0
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 0
22625: PUSH
22626: LD_INT 1
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 1
22646: PUSH
22647: LD_INT 1
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: LD_INT 1
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 1
22666: NEG
22667: PUSH
22668: LD_INT 0
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 1
22677: NEG
22678: PUSH
22679: LD_INT 1
22681: NEG
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 1
22689: NEG
22690: PUSH
22691: LD_INT 2
22693: NEG
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 0
22701: PUSH
22702: LD_INT 2
22704: NEG
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: LD_INT 1
22715: NEG
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 1
22723: PUSH
22724: LD_INT 2
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 0
22733: PUSH
22734: LD_INT 2
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 1
22754: NEG
22755: PUSH
22756: LD_INT 3
22758: NEG
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 0
22766: PUSH
22767: LD_INT 3
22769: NEG
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: LD_INT 2
22780: NEG
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22804: LD_ADDR_VAR 0 15
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 0
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 1
22873: NEG
22874: PUSH
22875: LD_INT 1
22877: NEG
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 2
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 2
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 2
22927: NEG
22928: PUSH
22929: LD_INT 0
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: NEG
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 2
22950: PUSH
22951: LD_INT 1
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 3
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 3
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22997: LD_ADDR_VAR 0 16
23001: PUSH
23002: LD_INT 0
23004: PUSH
23005: LD_INT 0
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: LD_INT 1
23017: NEG
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 1
23025: PUSH
23026: LD_INT 0
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 0
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: NEG
23056: PUSH
23057: LD_INT 0
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: LD_INT 1
23070: NEG
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 1
23078: NEG
23079: PUSH
23080: LD_INT 2
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 2
23090: PUSH
23091: LD_INT 1
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 2
23100: PUSH
23101: LD_INT 2
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: LD_INT 2
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 2
23120: NEG
23121: PUSH
23122: LD_INT 1
23124: NEG
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 2
23132: NEG
23133: PUSH
23134: LD_INT 2
23136: NEG
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 3
23144: PUSH
23145: LD_INT 2
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 3
23154: PUSH
23155: LD_INT 3
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 2
23164: PUSH
23165: LD_INT 3
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23190: LD_ADDR_VAR 0 17
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: LD_INT 0
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: LD_INT 1
23210: NEG
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 1
23218: PUSH
23219: LD_INT 0
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 1
23228: PUSH
23229: LD_INT 1
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 0
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 1
23248: NEG
23249: PUSH
23250: LD_INT 0
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 1
23259: NEG
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: LD_INT 2
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 0
23283: PUSH
23284: LD_INT 2
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 1
23294: PUSH
23295: LD_INT 1
23297: NEG
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 2
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 2
23325: PUSH
23326: LD_INT 2
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 1
23335: PUSH
23336: LD_INT 2
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 0
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 1
23355: NEG
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 2
23366: NEG
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 2
23377: NEG
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 2
23389: NEG
23390: PUSH
23391: LD_INT 2
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23420: LD_ADDR_VAR 0 18
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: LD_INT 1
23440: NEG
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: LD_INT 0
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 1
23478: NEG
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 1
23489: NEG
23490: PUSH
23491: LD_INT 1
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 1
23501: NEG
23502: PUSH
23503: LD_INT 2
23505: NEG
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 0
23513: PUSH
23514: LD_INT 2
23516: NEG
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 1
23524: PUSH
23525: LD_INT 1
23527: NEG
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 2
23535: PUSH
23536: LD_INT 0
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 2
23545: PUSH
23546: LD_INT 1
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 2
23555: PUSH
23556: LD_INT 2
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: LD_INT 2
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 0
23575: PUSH
23576: LD_INT 2
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: NEG
23586: PUSH
23587: LD_INT 1
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 2
23596: NEG
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 2
23607: NEG
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 2
23619: NEG
23620: PUSH
23621: LD_INT 2
23623: NEG
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23650: LD_ADDR_VAR 0 19
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: NEG
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 2
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 0
23743: PUSH
23744: LD_INT 2
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 2
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 2
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 2
23826: NEG
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 2
23837: NEG
23838: PUSH
23839: LD_INT 1
23841: NEG
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 2
23849: NEG
23850: PUSH
23851: LD_INT 2
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23880: LD_ADDR_VAR 0 20
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: LD_INT 1
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: NEG
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 1
23949: NEG
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 1
23961: NEG
23962: PUSH
23963: LD_INT 2
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: LD_INT 2
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: LD_INT 1
23987: NEG
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 2
23995: PUSH
23996: LD_INT 0
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: LD_INT 1
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 2
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 0
24035: PUSH
24036: LD_INT 2
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 1
24045: NEG
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 2
24067: NEG
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 2
24079: NEG
24080: PUSH
24081: LD_INT 2
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24110: LD_ADDR_VAR 0 21
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 1
24168: NEG
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: LD_INT 2
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 0
24203: PUSH
24204: LD_INT 2
24206: NEG
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 1
24214: PUSH
24215: LD_INT 1
24217: NEG
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 2
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 2
24245: PUSH
24246: LD_INT 2
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 2
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: LD_INT 1
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 2
24286: NEG
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 2
24297: NEG
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 2
24309: NEG
24310: PUSH
24311: LD_INT 2
24313: NEG
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24340: LD_ADDR_VAR 0 22
24344: PUSH
24345: LD_INT 0
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: LD_INT 1
24360: NEG
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 0
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: NEG
24410: PUSH
24411: LD_INT 1
24413: NEG
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 1
24421: NEG
24422: PUSH
24423: LD_INT 2
24425: NEG
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: LD_INT 2
24436: NEG
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 2
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 2
24475: PUSH
24476: LD_INT 2
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 0
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: NEG
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 2
24516: NEG
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 2
24527: NEG
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 2
24539: NEG
24540: PUSH
24541: LD_INT 2
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24570: LD_ADDR_VAR 0 23
24574: PUSH
24575: LD_INT 0
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: LD_INT 1
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: NEG
24652: PUSH
24653: LD_INT 2
24655: NEG
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 0
24663: PUSH
24664: LD_INT 2
24666: NEG
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: LD_INT 1
24677: NEG
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 2
24705: PUSH
24706: LD_INT 2
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: LD_INT 2
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 2
24746: NEG
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 2
24757: NEG
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 2
24769: NEG
24770: PUSH
24771: LD_INT 2
24773: NEG
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 2
24781: NEG
24782: PUSH
24783: LD_INT 3
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 1
24793: NEG
24794: PUSH
24795: LD_INT 3
24797: NEG
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: LD_INT 2
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 2
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
24850: LD_ADDR_VAR 0 24
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: LD_INT 1
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: LD_INT 2
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: LD_INT 2
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 2
24985: PUSH
24986: LD_INT 2
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: LD_INT 2
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 2
25026: NEG
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 2
25037: NEG
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 2
25049: NEG
25050: PUSH
25051: LD_INT 2
25053: NEG
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: LD_INT 2
25064: NEG
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 2
25072: PUSH
25073: LD_INT 1
25075: NEG
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 3
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 3
25093: PUSH
25094: LD_INT 2
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25126: LD_ADDR_VAR 0 25
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: LD_INT 1
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 1
25195: NEG
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PUSH
25209: LD_INT 2
25211: NEG
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: LD_INT 2
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 2
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 2
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: LD_INT 2
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: LD_INT 2
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 1
25291: NEG
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 2
25302: NEG
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 2
25313: NEG
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 2
25325: NEG
25326: PUSH
25327: LD_INT 2
25329: NEG
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 3
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 3
25347: PUSH
25348: LD_INT 2
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 2
25357: PUSH
25358: LD_INT 3
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: LD_INT 3
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25400: LD_ADDR_VAR 0 26
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 0
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: NEG
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: NEG
25470: PUSH
25471: LD_INT 1
25473: NEG
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: NEG
25482: PUSH
25483: LD_INT 2
25485: NEG
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: LD_INT 2
25496: NEG
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: LD_INT 1
25507: NEG
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: LD_INT 0
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 2
25535: PUSH
25536: LD_INT 2
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 2
25576: NEG
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 2
25587: NEG
25588: PUSH
25589: LD_INT 1
25591: NEG
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: NEG
25600: PUSH
25601: LD_INT 2
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 2
25611: PUSH
25612: LD_INT 3
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: LD_INT 3
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: LD_INT 2
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 2
25642: NEG
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25676: LD_ADDR_VAR 0 27
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 1
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 1
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: NEG
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: NEG
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: LD_INT 2
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: LD_INT 2
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: LD_INT 1
25783: NEG
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 2
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 2
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 2
25811: PUSH
25812: LD_INT 2
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: NEG
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 2
25863: NEG
25864: PUSH
25865: LD_INT 1
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 2
25875: NEG
25876: PUSH
25877: LD_INT 2
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: NEG
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 2
25898: NEG
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 3
25909: NEG
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 3
25921: NEG
25922: PUSH
25923: LD_INT 2
25925: NEG
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25956: LD_ADDR_VAR 0 28
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: LD_INT 0
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 0
25973: PUSH
25974: LD_INT 1
25976: NEG
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 0
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: NEG
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 1
26025: NEG
26026: PUSH
26027: LD_INT 1
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: LD_INT 2
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 2
26052: NEG
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 2
26081: PUSH
26082: LD_INT 1
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 2
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: LD_INT 2
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 1
26121: NEG
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 2
26132: NEG
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 2
26143: NEG
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 2
26155: NEG
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 2
26167: NEG
26168: PUSH
26169: LD_INT 3
26171: NEG
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: LD_INT 3
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 3
26191: NEG
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 3
26203: NEG
26204: PUSH
26205: LD_INT 2
26207: NEG
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26238: LD_ADDR_VAR 0 29
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 1
26296: NEG
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: LD_INT 1
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: LD_INT 2
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 2
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 2
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 2
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: LD_INT 2
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 2
26416: NEG
26417: PUSH
26418: LD_INT 2
26420: NEG
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 2
26428: NEG
26429: PUSH
26430: LD_INT 3
26432: NEG
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 2
26440: PUSH
26441: LD_INT 1
26443: NEG
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 3
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: LD_INT 3
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 3
26482: NEG
26483: PUSH
26484: LD_INT 2
26486: NEG
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26517: LD_ADDR_VAR 0 30
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 0
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: NEG
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: LD_INT 1
26590: NEG
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 1
26598: NEG
26599: PUSH
26600: LD_INT 2
26602: NEG
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: LD_INT 2
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 1
26624: NEG
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 2
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 2
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 2
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: LD_INT 2
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 2
26683: NEG
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 2
26694: NEG
26695: PUSH
26696: LD_INT 1
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: LD_INT 3
26710: NEG
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: LD_INT 2
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 3
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 2
26739: PUSH
26740: LD_INT 3
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 2
26749: NEG
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 3
26760: NEG
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26795: LD_ADDR_VAR 0 31
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 1
26853: NEG
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 1
26864: NEG
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: LD_INT 2
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 2
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 2
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 2
26919: PUSH
26920: LD_INT 2
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 0
26939: PUSH
26940: LD_INT 2
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 1
26949: NEG
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 2
26960: NEG
26961: PUSH
26962: LD_INT 1
26964: NEG
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 2
26972: NEG
26973: PUSH
26974: LD_INT 2
26976: NEG
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 2
26984: NEG
26985: PUSH
26986: LD_INT 3
26988: NEG
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 3
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: LD_INT 3
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: NEG
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 3
27038: NEG
27039: PUSH
27040: LD_INT 2
27042: NEG
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27073: LD_ADDR_VAR 0 32
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: LD_INT 0
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: NEG
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: LD_INT 2
27158: NEG
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: LD_INT 2
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: LD_INT 1
27180: NEG
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 2
27188: PUSH
27189: LD_INT 1
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: LD_INT 2
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: LD_INT 2
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: LD_INT 2
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 1
27228: NEG
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 2
27239: NEG
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 2
27250: NEG
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 1
27262: NEG
27263: PUSH
27264: LD_INT 3
27266: NEG
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: LD_INT 2
27277: NEG
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 3
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 2
27295: PUSH
27296: LD_INT 3
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 2
27305: NEG
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 3
27316: NEG
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27351: LD_ADDR_VAR 0 33
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: LD_INT 1
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 0
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: NEG
27433: PUSH
27434: LD_INT 2
27436: NEG
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: PUSH
27445: LD_INT 1
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 2
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 2
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 1
27475: PUSH
27476: LD_INT 2
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: LD_INT 2
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 1
27495: NEG
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 2
27506: NEG
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 2
27529: NEG
27530: PUSH
27531: LD_INT 2
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 2
27541: NEG
27542: PUSH
27543: LD_INT 3
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 2
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 3
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: LD_INT 3
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: NEG
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 3
27595: NEG
27596: PUSH
27597: LD_INT 2
27599: NEG
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27630: LD_ADDR_VAR 0 34
27634: PUSH
27635: LD_INT 0
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 1
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: NEG
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: NEG
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: LD_INT 2
27715: NEG
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: LD_INT 2
27726: NEG
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 1
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 2
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 2
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: PUSH
27766: LD_INT 2
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 2
27786: NEG
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 2
27797: NEG
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 2
27809: NEG
27810: PUSH
27811: LD_INT 2
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: LD_INT 3
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: LD_INT 2
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 3
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: LD_INT 3
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 2
27864: NEG
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 3
27875: NEG
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27910: LD_ADDR_VAR 0 35
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 0
27927: PUSH
27928: LD_INT 1
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: LD_INT 1
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: LD_INT 1
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 2
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: NEG
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28022: LD_ADDR_VAR 0 36
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: LD_INT 1
28042: NEG
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 1
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: LD_INT 0
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 1
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: LD_INT 2
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28134: LD_ADDR_VAR 0 37
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 1
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: LD_INT 1
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: LD_INT 1
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: LD_INT 1
28218: NEG
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 1
28226: NEG
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28246: LD_ADDR_VAR 0 38
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: LD_INT 1
28266: NEG
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: LD_INT 0
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: LD_INT 1
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 1
28304: NEG
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 2
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 2
28337: NEG
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28358: LD_ADDR_VAR 0 39
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: NEG
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: LD_INT 1
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: LD_INT 2
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: LD_INT 2
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28470: LD_ADDR_VAR 0 40
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 0
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: LD_INT 1
28490: NEG
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 1
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 0
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 1
28528: NEG
28529: PUSH
28530: LD_INT 0
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 1
28539: NEG
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28582: LD_ADDR_VAR 0 41
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: LD_INT 1
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: NEG
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: LD_INT 2
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: LD_INT 1
28678: NEG
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 2
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: LD_INT 1
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: LD_INT 2
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: LD_INT 2
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 1
28726: NEG
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 2
28737: NEG
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 2
28748: NEG
28749: PUSH
28750: LD_INT 1
28752: NEG
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 2
28760: NEG
28761: PUSH
28762: LD_INT 2
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 2
28772: NEG
28773: PUSH
28774: LD_INT 3
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 2
28784: PUSH
28785: LD_INT 1
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 3
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 3
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 3
28815: PUSH
28816: LD_INT 2
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 3
28825: PUSH
28826: LD_INT 3
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 2
28835: PUSH
28836: LD_INT 3
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 2
28845: NEG
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 3
28856: NEG
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 3
28867: NEG
28868: PUSH
28869: LD_INT 1
28871: NEG
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 3
28879: NEG
28880: PUSH
28881: LD_INT 2
28883: NEG
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 3
28891: NEG
28892: PUSH
28893: LD_INT 3
28895: NEG
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28932: LD_ADDR_VAR 0 42
28936: PUSH
28937: LD_INT 0
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 1
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 1
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 1
28990: NEG
28991: PUSH
28992: LD_INT 0
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: LD_INT 1
29005: NEG
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: LD_INT 2
29017: NEG
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: LD_INT 2
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 1
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 2
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 2
29057: PUSH
29058: LD_INT 2
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 2
29098: NEG
29099: PUSH
29100: LD_INT 1
29102: NEG
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 2
29110: NEG
29111: PUSH
29112: LD_INT 2
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 2
29122: NEG
29123: PUSH
29124: LD_INT 3
29126: NEG
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: LD_INT 3
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: LD_INT 3
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: LD_INT 2
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 3
29168: PUSH
29169: LD_INT 2
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 3
29178: PUSH
29179: LD_INT 3
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 2
29188: PUSH
29189: LD_INT 3
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: LD_INT 3
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: LD_INT 3
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 1
29218: NEG
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 3
29229: NEG
29230: PUSH
29231: LD_INT 2
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 3
29241: NEG
29242: PUSH
29243: LD_INT 3
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29282: LD_ADDR_VAR 0 43
29286: PUSH
29287: LD_INT 0
29289: PUSH
29290: LD_INT 0
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 0
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: NEG
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 1
29351: NEG
29352: PUSH
29353: LD_INT 1
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: LD_INT 2
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: LD_INT 2
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: LD_INT 1
29389: NEG
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 2
29397: PUSH
29398: LD_INT 0
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 2
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 1
29417: PUSH
29418: LD_INT 2
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 0
29427: PUSH
29428: LD_INT 2
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: PUSH
29439: LD_INT 1
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 2
29448: NEG
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 2
29459: NEG
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: NEG
29472: PUSH
29473: LD_INT 3
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 0
29483: PUSH
29484: LD_INT 3
29486: NEG
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: LD_INT 2
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 2
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 3
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 3
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: LD_INT 3
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: LD_INT 3
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 1
29556: NEG
29557: PUSH
29558: LD_INT 2
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 2
29567: NEG
29568: PUSH
29569: LD_INT 1
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 3
29578: NEG
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 3
29589: NEG
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29630: LD_ADDR_VAR 0 44
29634: PUSH
29635: LD_INT 0
29637: PUSH
29638: LD_INT 0
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 0
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 1
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: LD_INT 2
29715: NEG
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: LD_INT 1
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: LD_INT 0
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 2
29744: PUSH
29745: LD_INT 1
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 2
29754: PUSH
29755: LD_INT 2
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: PUSH
29765: LD_INT 2
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 1
29774: NEG
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: LD_INT 0
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 2
29796: NEG
29797: PUSH
29798: LD_INT 1
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 2
29808: NEG
29809: PUSH
29810: LD_INT 2
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 2
29820: NEG
29821: PUSH
29822: LD_INT 3
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 3
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 3
29853: PUSH
29854: LD_INT 1
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 3
29863: PUSH
29864: LD_INT 2
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 3
29873: PUSH
29874: LD_INT 3
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 2
29883: PUSH
29884: LD_INT 3
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 2
29893: NEG
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 3
29904: NEG
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 3
29915: NEG
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 3
29927: NEG
29928: PUSH
29929: LD_INT 2
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 3
29939: NEG
29940: PUSH
29941: LD_INT 3
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29980: LD_ADDR_VAR 0 45
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: LD_INT 0
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: LD_INT 1
30000: NEG
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: LD_INT 1
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 1
30038: NEG
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: LD_INT 2
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: LD_INT 2
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 1
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 2
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 2
30105: PUSH
30106: LD_INT 2
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: LD_INT 2
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: LD_INT 2
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: LD_INT 1
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 2
30146: NEG
30147: PUSH
30148: LD_INT 1
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 2
30158: NEG
30159: PUSH
30160: LD_INT 2
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 2
30170: NEG
30171: PUSH
30172: LD_INT 3
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 1
30182: NEG
30183: PUSH
30184: LD_INT 3
30186: NEG
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: LD_INT 3
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 1
30205: PUSH
30206: LD_INT 2
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 3
30216: PUSH
30217: LD_INT 2
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 3
30226: PUSH
30227: LD_INT 3
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 2
30236: PUSH
30237: LD_INT 3
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 1
30246: PUSH
30247: LD_INT 3
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: LD_INT 3
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 1
30266: NEG
30267: PUSH
30268: LD_INT 2
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 3
30277: NEG
30278: PUSH
30279: LD_INT 2
30281: NEG
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 3
30289: NEG
30290: PUSH
30291: LD_INT 3
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30330: LD_ADDR_VAR 0 46
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 0
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 1
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: LD_INT 1
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: LD_INT 2
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: LD_INT 2
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 2
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: LD_INT 2
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 2
30496: NEG
30497: PUSH
30498: LD_INT 0
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 2
30507: NEG
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 1
30519: NEG
30520: PUSH
30521: LD_INT 3
30523: NEG
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: LD_INT 3
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: LD_INT 2
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 2
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 3
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 3
30574: PUSH
30575: LD_INT 1
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: LD_INT 3
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 3
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 1
30604: NEG
30605: PUSH
30606: LD_INT 2
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 2
30615: NEG
30616: PUSH
30617: LD_INT 1
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 3
30626: NEG
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 3
30637: NEG
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30678: LD_ADDR_VAR 0 47
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: LD_INT 0
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 0
30695: PUSH
30696: LD_INT 1
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 1
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: LD_INT 1
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 1
30747: NEG
30748: PUSH
30749: LD_INT 1
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: LD_INT 2
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: LD_INT 2
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: LD_INT 1
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 2
30793: NEG
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 2
30805: NEG
30806: PUSH
30807: LD_INT 2
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30829: LD_ADDR_VAR 0 48
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 1
30898: NEG
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: LD_INT 2
30914: NEG
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: LD_INT 2
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: LD_INT 1
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 2
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 2
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30976: LD_ADDR_VAR 0 49
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 0
30993: PUSH
30994: LD_INT 1
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 1
31004: PUSH
31005: LD_INT 0
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: NEG
31046: PUSH
31047: LD_INT 1
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 1
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 2
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 2
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 2
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31120: LD_ADDR_VAR 0 50
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: LD_INT 0
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: LD_INT 1
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 1
31189: NEG
31190: PUSH
31191: LD_INT 1
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 2
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: LD_INT 2
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 0
31231: PUSH
31232: LD_INT 2
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 1
31241: NEG
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31264: LD_ADDR_VAR 0 51
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 0
31281: PUSH
31282: LD_INT 1
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: LD_INT 1
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 2
31376: NEG
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 2
31387: NEG
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31411: LD_ADDR_VAR 0 52
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 0
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: LD_INT 2
31496: NEG
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 2
31515: NEG
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31562: LD_ADDR_VAR 0 53
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: LD_INT 1
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 0
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 1
31620: NEG
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 1
31631: NEG
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 2
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 1
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 2
31687: PUSH
31688: LD_INT 1
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 2
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 0
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: LD_INT 1
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 2
31749: NEG
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 2
31761: NEG
31762: PUSH
31763: LD_INT 2
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31792: LD_ADDR_VAR 0 54
31796: PUSH
31797: LD_INT 0
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: LD_INT 1
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 1
31820: PUSH
31821: LD_INT 0
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 0
31840: PUSH
31841: LD_INT 1
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: NEG
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 1
31861: NEG
31862: PUSH
31863: LD_INT 1
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: LD_INT 2
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: LD_INT 2
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: LD_INT 1
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 2
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 2
31917: PUSH
31918: LD_INT 1
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: LD_INT 2
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: LD_INT 2
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: LD_INT 2
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 1
31957: NEG
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 2
31968: NEG
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 2
31979: NEG
31980: PUSH
31981: LD_INT 1
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 2
31991: NEG
31992: PUSH
31993: LD_INT 2
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32022: LD_ADDR_VAR 0 55
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 1
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 0
32070: PUSH
32071: LD_INT 1
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: NEG
32081: PUSH
32082: LD_INT 0
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: LD_INT 2
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: LD_INT 2
32118: NEG
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: LD_INT 1
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 2
32137: PUSH
32138: LD_INT 0
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 2
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: LD_INT 2
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: LD_INT 2
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 2
32198: NEG
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 2
32209: NEG
32210: PUSH
32211: LD_INT 1
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: NEG
32222: PUSH
32223: LD_INT 2
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32252: LD_ADDR_VAR 0 56
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: LD_INT 1
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: LD_INT 0
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: LD_INT 0
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 1
32333: NEG
32334: PUSH
32335: LD_INT 2
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: LD_INT 2
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 2
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 2
32377: PUSH
32378: LD_INT 1
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 2
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 2
32428: NEG
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 2
32439: NEG
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 2
32451: NEG
32452: PUSH
32453: LD_INT 2
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32482: LD_ADDR_VAR 0 57
32486: PUSH
32487: LD_INT 0
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: LD_INT 0
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: LD_INT 1
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 1
32540: NEG
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: LD_INT 2
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: LD_INT 2
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 1
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 2
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: LD_INT 2
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 1
32647: NEG
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: NEG
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 2
32669: NEG
32670: PUSH
32671: LD_INT 1
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 2
32681: NEG
32682: PUSH
32683: LD_INT 2
32685: NEG
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32712: LD_ADDR_VAR 0 58
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: LD_INT 1
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 0
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 1
32770: NEG
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 1
32793: NEG
32794: PUSH
32795: LD_INT 2
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: LD_INT 2
32808: NEG
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: LD_INT 1
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 2
32837: PUSH
32838: LD_INT 1
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 2
32847: PUSH
32848: LD_INT 2
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: NEG
32878: PUSH
32879: LD_INT 1
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 2
32899: NEG
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: LD_INT 2
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32942: LD_ADDR_VAR 0 59
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: LD_INT 1
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33030: LD_ADDR_VAR 0 60
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: LD_INT 0
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33118: LD_ADDR_VAR 0 61
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33206: LD_ADDR_VAR 0 62
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33294: LD_ADDR_VAR 0 63
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: LD_INT 0
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33382: LD_ADDR_VAR 0 64
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 0
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: LD_INT 1
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 1
33451: NEG
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: ST_TO_ADDR
// end ; 1 :
33470: GO 39367
33472: LD_INT 1
33474: DOUBLE
33475: EQUAL
33476: IFTRUE 33480
33478: GO 36103
33480: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33481: LD_ADDR_VAR 0 11
33485: PUSH
33486: LD_INT 1
33488: NEG
33489: PUSH
33490: LD_INT 3
33492: NEG
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 0
33500: PUSH
33501: LD_INT 3
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: LD_INT 2
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: LIST
33524: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33525: LD_ADDR_VAR 0 12
33529: PUSH
33530: LD_INT 2
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 3
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 3
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33566: LD_ADDR_VAR 0 13
33570: PUSH
33571: LD_INT 3
33573: PUSH
33574: LD_INT 2
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 3
33583: PUSH
33584: LD_INT 3
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: LD_INT 3
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: LIST
33605: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33606: LD_ADDR_VAR 0 14
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: LD_INT 3
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 3
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33647: LD_ADDR_VAR 0 15
33651: PUSH
33652: LD_INT 2
33654: NEG
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 3
33665: NEG
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 3
33676: NEG
33677: PUSH
33678: LD_INT 1
33680: NEG
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: LIST
33690: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33691: LD_ADDR_VAR 0 16
33695: PUSH
33696: LD_INT 2
33698: NEG
33699: PUSH
33700: LD_INT 3
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 3
33710: NEG
33711: PUSH
33712: LD_INT 2
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 3
33722: NEG
33723: PUSH
33724: LD_INT 3
33726: NEG
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: LIST
33736: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33737: LD_ADDR_VAR 0 17
33741: PUSH
33742: LD_INT 1
33744: NEG
33745: PUSH
33746: LD_INT 3
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: LD_INT 3
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: LD_INT 2
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33781: LD_ADDR_VAR 0 18
33785: PUSH
33786: LD_INT 2
33788: PUSH
33789: LD_INT 1
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 3
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 3
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33822: LD_ADDR_VAR 0 19
33826: PUSH
33827: LD_INT 3
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 3
33839: PUSH
33840: LD_INT 3
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 2
33849: PUSH
33850: LD_INT 3
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: LIST
33861: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33862: LD_ADDR_VAR 0 20
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: LD_INT 3
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: LD_INT 3
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33903: LD_ADDR_VAR 0 21
33907: PUSH
33908: LD_INT 2
33910: NEG
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 3
33921: NEG
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 3
33932: NEG
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33947: LD_ADDR_VAR 0 22
33951: PUSH
33952: LD_INT 2
33954: NEG
33955: PUSH
33956: LD_INT 3
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 3
33966: NEG
33967: PUSH
33968: LD_INT 2
33970: NEG
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 3
33978: NEG
33979: PUSH
33980: LD_INT 3
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
33993: LD_ADDR_VAR 0 23
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: LD_INT 3
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: LD_INT 4
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 1
34023: PUSH
34024: LD_INT 3
34026: NEG
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: LIST
34036: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34037: LD_ADDR_VAR 0 24
34041: PUSH
34042: LD_INT 3
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 3
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 4
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34078: LD_ADDR_VAR 0 25
34082: PUSH
34083: LD_INT 3
34085: PUSH
34086: LD_INT 3
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 4
34095: PUSH
34096: LD_INT 3
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 3
34105: PUSH
34106: LD_INT 4
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: LIST
34117: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34118: LD_ADDR_VAR 0 26
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: LD_INT 3
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 1
34135: PUSH
34136: LD_INT 4
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 1
34145: NEG
34146: PUSH
34147: LD_INT 3
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: LIST
34158: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34159: LD_ADDR_VAR 0 27
34163: PUSH
34164: LD_INT 3
34166: NEG
34167: PUSH
34168: LD_INT 0
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 3
34177: NEG
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 4
34188: NEG
34189: PUSH
34190: LD_INT 1
34192: NEG
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: LIST
34202: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34203: LD_ADDR_VAR 0 28
34207: PUSH
34208: LD_INT 3
34210: NEG
34211: PUSH
34212: LD_INT 3
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 3
34222: NEG
34223: PUSH
34224: LD_INT 4
34226: NEG
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 4
34234: NEG
34235: PUSH
34236: LD_INT 3
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: LIST
34248: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34249: LD_ADDR_VAR 0 29
34253: PUSH
34254: LD_INT 1
34256: NEG
34257: PUSH
34258: LD_INT 3
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: LD_INT 3
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: LD_INT 2
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: NEG
34291: PUSH
34292: LD_INT 4
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 4
34305: NEG
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: LD_INT 3
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 5
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: LD_INT 5
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: LD_INT 4
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: LD_INT 6
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 0
34370: PUSH
34371: LD_INT 6
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: PUSH
34382: LD_INT 5
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34404: LD_ADDR_VAR 0 30
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 3
34422: PUSH
34423: LD_INT 0
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 3
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 3
34442: PUSH
34443: LD_INT 1
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 4
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 4
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 4
34473: PUSH
34474: LD_INT 1
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 5
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 5
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 5
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 6
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 6
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34547: LD_ADDR_VAR 0 31
34551: PUSH
34552: LD_INT 3
34554: PUSH
34555: LD_INT 2
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 3
34564: PUSH
34565: LD_INT 3
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 2
34574: PUSH
34575: LD_INT 3
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 4
34584: PUSH
34585: LD_INT 3
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 4
34594: PUSH
34595: LD_INT 4
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 3
34604: PUSH
34605: LD_INT 4
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 5
34614: PUSH
34615: LD_INT 4
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 5
34624: PUSH
34625: LD_INT 5
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 4
34634: PUSH
34635: LD_INT 5
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 6
34644: PUSH
34645: LD_INT 5
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 6
34654: PUSH
34655: LD_INT 6
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 5
34664: PUSH
34665: LD_INT 6
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34686: LD_ADDR_VAR 0 32
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: LD_INT 3
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: LD_INT 3
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: PUSH
34725: LD_INT 4
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 0
34734: PUSH
34735: LD_INT 4
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: LD_INT 3
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: LD_INT 5
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 0
34765: PUSH
34766: LD_INT 5
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: LD_INT 4
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: LD_INT 6
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: LD_INT 6
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: LD_INT 5
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
34829: LD_ADDR_VAR 0 33
34833: PUSH
34834: LD_INT 2
34836: NEG
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 3
34847: NEG
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 3
34858: NEG
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 3
34870: NEG
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 4
34881: NEG
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 4
34892: NEG
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 4
34904: NEG
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 5
34915: NEG
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 5
34926: NEG
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 5
34938: NEG
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 6
34949: NEG
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 6
34960: NEG
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
34984: LD_ADDR_VAR 0 34
34988: PUSH
34989: LD_INT 2
34991: NEG
34992: PUSH
34993: LD_INT 3
34995: NEG
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 3
35003: NEG
35004: PUSH
35005: LD_INT 2
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 3
35015: NEG
35016: PUSH
35017: LD_INT 3
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 3
35027: NEG
35028: PUSH
35029: LD_INT 4
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 4
35039: NEG
35040: PUSH
35041: LD_INT 3
35043: NEG
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 4
35051: NEG
35052: PUSH
35053: LD_INT 4
35055: NEG
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 4
35063: NEG
35064: PUSH
35065: LD_INT 5
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 5
35075: NEG
35076: PUSH
35077: LD_INT 4
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 5
35087: NEG
35088: PUSH
35089: LD_INT 5
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 5
35099: NEG
35100: PUSH
35101: LD_INT 6
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 6
35111: NEG
35112: PUSH
35113: LD_INT 5
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 6
35123: NEG
35124: PUSH
35125: LD_INT 6
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35147: LD_ADDR_VAR 0 41
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: LD_INT 2
35157: NEG
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: NEG
35166: PUSH
35167: LD_INT 3
35169: NEG
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: LD_INT 2
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35191: LD_ADDR_VAR 0 42
35195: PUSH
35196: LD_INT 2
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 2
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 3
35219: PUSH
35220: LD_INT 1
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: LIST
35231: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35232: LD_ADDR_VAR 0 43
35236: PUSH
35237: LD_INT 2
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 3
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 2
35259: PUSH
35260: LD_INT 3
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: LIST
35271: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35272: LD_ADDR_VAR 0 44
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: LD_INT 2
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: LD_INT 3
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35313: LD_ADDR_VAR 0 45
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 3
35342: NEG
35343: PUSH
35344: LD_INT 1
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35357: LD_ADDR_VAR 0 46
35361: PUSH
35362: LD_INT 2
35364: NEG
35365: PUSH
35366: LD_INT 2
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: LD_INT 3
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 3
35388: NEG
35389: PUSH
35390: LD_INT 2
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35403: LD_ADDR_VAR 0 47
35407: PUSH
35408: LD_INT 2
35410: NEG
35411: PUSH
35412: LD_INT 3
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 1
35422: NEG
35423: PUSH
35424: LD_INT 3
35426: NEG
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35436: LD_ADDR_VAR 0 48
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: LD_INT 2
35446: NEG
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 2
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35467: LD_ADDR_VAR 0 49
35471: PUSH
35472: LD_INT 3
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 3
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35496: LD_ADDR_VAR 0 50
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: LD_INT 3
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: LD_INT 3
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35525: LD_ADDR_VAR 0 51
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 2
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: LD_INT 1
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35556: LD_ADDR_VAR 0 52
35560: PUSH
35561: LD_INT 3
35563: NEG
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 3
35575: NEG
35576: PUSH
35577: LD_INT 2
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35589: LD_ADDR_VAR 0 53
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: LD_INT 3
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: LD_INT 3
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: LD_INT 2
35622: NEG
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: LIST
35632: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35633: LD_ADDR_VAR 0 54
35637: PUSH
35638: LD_INT 2
35640: PUSH
35641: LD_INT 1
35643: NEG
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 3
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 3
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35674: LD_ADDR_VAR 0 55
35678: PUSH
35679: LD_INT 3
35681: PUSH
35682: LD_INT 2
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 3
35691: PUSH
35692: LD_INT 3
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 2
35701: PUSH
35702: LD_INT 3
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35714: LD_ADDR_VAR 0 56
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: LD_INT 3
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 3
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: LD_INT 2
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: LIST
35754: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35755: LD_ADDR_VAR 0 57
35759: PUSH
35760: LD_INT 2
35762: NEG
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 3
35773: NEG
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 3
35784: NEG
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: LIST
35798: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35799: LD_ADDR_VAR 0 58
35803: PUSH
35804: LD_INT 2
35806: NEG
35807: PUSH
35808: LD_INT 3
35810: NEG
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 3
35818: NEG
35819: PUSH
35820: LD_INT 2
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 3
35830: NEG
35831: PUSH
35832: LD_INT 3
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
35845: LD_ADDR_VAR 0 59
35849: PUSH
35850: LD_INT 1
35852: NEG
35853: PUSH
35854: LD_INT 2
35856: NEG
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 2
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: LD_INT 1
35878: NEG
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: LIST
35888: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35889: LD_ADDR_VAR 0 60
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 2
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35930: LD_ADDR_VAR 0 61
35934: PUSH
35935: LD_INT 2
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 2
35947: PUSH
35948: LD_INT 2
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 1
35957: PUSH
35958: LD_INT 2
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35970: LD_ADDR_VAR 0 62
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: LD_INT 2
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: LD_INT 2
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: LIST
36010: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36011: LD_ADDR_VAR 0 63
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 2
36040: NEG
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: LIST
36054: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36055: LD_ADDR_VAR 0 64
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: LD_INT 2
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 2
36086: NEG
36087: PUSH
36088: LD_INT 2
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: ST_TO_ADDR
// end ; 2 :
36101: GO 39367
36103: LD_INT 2
36105: DOUBLE
36106: EQUAL
36107: IFTRUE 36111
36109: GO 39366
36111: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36112: LD_ADDR_VAR 0 29
36116: PUSH
36117: LD_INT 4
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 4
36129: PUSH
36130: LD_INT 1
36132: NEG
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 5
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 5
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 4
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 3
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 3
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 3
36191: PUSH
36192: LD_INT 2
36194: NEG
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 5
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 3
36212: PUSH
36213: LD_INT 3
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 3
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 4
36232: PUSH
36233: LD_INT 3
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 4
36242: PUSH
36243: LD_INT 4
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 3
36252: PUSH
36253: LD_INT 4
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 2
36262: PUSH
36263: LD_INT 3
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 2
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 4
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 2
36292: PUSH
36293: LD_INT 4
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: LD_INT 4
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: LD_INT 3
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: LD_INT 4
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: LD_INT 5
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: LD_INT 5
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: LD_INT 4
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: LD_INT 3
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: LD_INT 5
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 2
36384: NEG
36385: PUSH
36386: LD_INT 3
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 3
36395: NEG
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 3
36406: NEG
36407: PUSH
36408: LD_INT 1
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 2
36418: NEG
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 3
36440: NEG
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 4
36451: NEG
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 4
36462: NEG
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 4
36474: NEG
36475: PUSH
36476: LD_INT 2
36478: NEG
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 2
36486: NEG
36487: PUSH
36488: LD_INT 2
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 4
36497: NEG
36498: PUSH
36499: LD_INT 4
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 4
36509: NEG
36510: PUSH
36511: LD_INT 5
36513: NEG
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 3
36521: NEG
36522: PUSH
36523: LD_INT 4
36525: NEG
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 3
36533: NEG
36534: PUSH
36535: LD_INT 3
36537: NEG
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 4
36545: NEG
36546: PUSH
36547: LD_INT 3
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 5
36557: NEG
36558: PUSH
36559: LD_INT 4
36561: NEG
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 5
36569: NEG
36570: PUSH
36571: LD_INT 5
36573: NEG
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 3
36581: NEG
36582: PUSH
36583: LD_INT 5
36585: NEG
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 5
36593: NEG
36594: PUSH
36595: LD_INT 3
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
36650: LD_ADDR_VAR 0 30
36654: PUSH
36655: LD_INT 4
36657: PUSH
36658: LD_INT 4
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 4
36667: PUSH
36668: LD_INT 3
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 5
36677: PUSH
36678: LD_INT 4
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 5
36687: PUSH
36688: LD_INT 5
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 4
36697: PUSH
36698: LD_INT 5
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 3
36707: PUSH
36708: LD_INT 4
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 3
36717: PUSH
36718: LD_INT 3
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 5
36727: PUSH
36728: LD_INT 3
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 3
36737: PUSH
36738: LD_INT 5
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: LD_INT 3
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: LD_INT 3
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: LD_INT 4
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 4
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: LD_INT 3
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: LD_INT 2
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 2
36819: PUSH
36820: LD_INT 4
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: LD_INT 2
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 4
36840: NEG
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 4
36851: NEG
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 3
36863: NEG
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 3
36874: NEG
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 4
36885: NEG
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 5
36896: NEG
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 5
36907: NEG
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 5
36919: NEG
36920: PUSH
36921: LD_INT 2
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 3
36931: NEG
36932: PUSH
36933: LD_INT 2
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 3
36942: NEG
36943: PUSH
36944: LD_INT 3
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 3
36954: NEG
36955: PUSH
36956: LD_INT 4
36958: NEG
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 2
36966: NEG
36967: PUSH
36968: LD_INT 3
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 2
36978: NEG
36979: PUSH
36980: LD_INT 2
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 3
36990: NEG
36991: PUSH
36992: LD_INT 2
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 4
37002: NEG
37003: PUSH
37004: LD_INT 3
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 4
37014: NEG
37015: PUSH
37016: LD_INT 4
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: NEG
37027: PUSH
37028: LD_INT 4
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 4
37038: NEG
37039: PUSH
37040: LD_INT 2
37042: NEG
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: LD_INT 4
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: LD_INT 5
37064: NEG
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: LD_INT 4
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: PUSH
37084: LD_INT 3
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 0
37094: PUSH
37095: LD_INT 3
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: LD_INT 4
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: LD_INT 5
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 2
37129: PUSH
37130: LD_INT 3
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: LD_INT 5
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37197: LD_ADDR_VAR 0 31
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: LD_INT 4
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: LD_INT 3
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: LD_INT 4
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: LD_INT 5
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: LD_INT 5
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: LD_INT 4
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: LD_INT 3
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 5
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: LD_INT 3
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 3
37297: NEG
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 3
37308: NEG
37309: PUSH
37310: LD_INT 1
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 2
37320: NEG
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 2
37331: NEG
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 3
37342: NEG
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 4
37353: NEG
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 4
37364: NEG
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 4
37376: NEG
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 2
37388: NEG
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 4
37399: NEG
37400: PUSH
37401: LD_INT 4
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 4
37411: NEG
37412: PUSH
37413: LD_INT 5
37415: NEG
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 3
37423: NEG
37424: PUSH
37425: LD_INT 4
37427: NEG
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 3
37435: NEG
37436: PUSH
37437: LD_INT 3
37439: NEG
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 4
37447: NEG
37448: PUSH
37449: LD_INT 3
37451: NEG
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 5
37459: NEG
37460: PUSH
37461: LD_INT 4
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 5
37471: NEG
37472: PUSH
37473: LD_INT 5
37475: NEG
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 3
37483: NEG
37484: PUSH
37485: LD_INT 5
37487: NEG
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 5
37495: NEG
37496: PUSH
37497: LD_INT 3
37499: NEG
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: LD_INT 3
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: LD_INT 4
37521: NEG
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: LD_INT 3
37532: NEG
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: LD_INT 2
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: LD_INT 3
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: LD_INT 4
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 2
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 2
37597: NEG
37598: PUSH
37599: LD_INT 4
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 4
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 4
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 5
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 5
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 4
37650: PUSH
37651: LD_INT 1
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 3
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 3
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 3
37681: PUSH
37682: LD_INT 2
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 5
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
37747: LD_ADDR_VAR 0 32
37751: PUSH
37752: LD_INT 4
37754: NEG
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 4
37765: NEG
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 3
37777: NEG
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 3
37788: NEG
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 4
37799: NEG
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 5
37810: NEG
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 5
37821: NEG
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 5
37833: NEG
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 3
37845: NEG
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 3
37856: NEG
37857: PUSH
37858: LD_INT 3
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 3
37868: NEG
37869: PUSH
37870: LD_INT 4
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 2
37880: NEG
37881: PUSH
37882: LD_INT 3
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 2
37892: NEG
37893: PUSH
37894: LD_INT 2
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 3
37904: NEG
37905: PUSH
37906: LD_INT 2
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 4
37916: NEG
37917: PUSH
37918: LD_INT 3
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 4
37928: NEG
37929: PUSH
37930: LD_INT 4
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 2
37940: NEG
37941: PUSH
37942: LD_INT 4
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 4
37952: NEG
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 4
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: LD_INT 5
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: LD_INT 4
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: LD_INT 3
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 3
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: NEG
38020: PUSH
38021: LD_INT 4
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: LD_INT 5
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: LD_INT 3
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: NEG
38055: PUSH
38056: LD_INT 5
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 3
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 3
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 4
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 4
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 3
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 2
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: PUSH
38139: LD_INT 2
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 4
38149: PUSH
38150: LD_INT 2
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 4
38159: PUSH
38160: LD_INT 4
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 4
38169: PUSH
38170: LD_INT 3
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 5
38179: PUSH
38180: LD_INT 4
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 5
38189: PUSH
38190: LD_INT 5
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 4
38199: PUSH
38200: LD_INT 5
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 3
38209: PUSH
38210: LD_INT 4
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 3
38219: PUSH
38220: LD_INT 3
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 5
38229: PUSH
38230: LD_INT 3
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 3
38239: PUSH
38240: LD_INT 5
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38294: LD_ADDR_VAR 0 33
38298: PUSH
38299: LD_INT 4
38301: NEG
38302: PUSH
38303: LD_INT 4
38305: NEG
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 4
38313: NEG
38314: PUSH
38315: LD_INT 5
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 3
38325: NEG
38326: PUSH
38327: LD_INT 4
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 3
38337: NEG
38338: PUSH
38339: LD_INT 3
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 4
38349: NEG
38350: PUSH
38351: LD_INT 3
38353: NEG
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 5
38361: NEG
38362: PUSH
38363: LD_INT 4
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 5
38373: NEG
38374: PUSH
38375: LD_INT 5
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 3
38385: NEG
38386: PUSH
38387: LD_INT 5
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 5
38397: NEG
38398: PUSH
38399: LD_INT 3
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: LD_INT 3
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 4
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 3
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: LD_INT 2
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 3
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: LD_INT 4
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 2
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: LD_INT 4
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 4
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 4
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 5
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 5
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 4
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 3
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 3
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 3
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 5
38594: PUSH
38595: LD_INT 2
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 3
38604: PUSH
38605: LD_INT 3
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 3
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 4
38624: PUSH
38625: LD_INT 3
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 4
38634: PUSH
38635: LD_INT 4
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: LD_INT 4
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 2
38654: PUSH
38655: LD_INT 3
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 4
38674: PUSH
38675: LD_INT 2
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 2
38684: PUSH
38685: LD_INT 4
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: LD_INT 4
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: LD_INT 3
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: LD_INT 4
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: LD_INT 5
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 5
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 4
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 3
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 5
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 2
38776: NEG
38777: PUSH
38778: LD_INT 3
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
38832: LD_ADDR_VAR 0 34
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: LD_INT 4
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: LD_INT 5
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 1
38861: PUSH
38862: LD_INT 4
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: LD_INT 3
38875: NEG
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: LD_INT 3
38886: NEG
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: LD_INT 4
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: LD_INT 5
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: LD_INT 3
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 2
38929: NEG
38930: PUSH
38931: LD_INT 5
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 3
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 3
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 4
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 4
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 3
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: LD_INT 2
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 4
39024: PUSH
39025: LD_INT 2
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 4
39034: PUSH
39035: LD_INT 4
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 4
39044: PUSH
39045: LD_INT 3
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 5
39054: PUSH
39055: LD_INT 4
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 5
39064: PUSH
39065: LD_INT 5
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 4
39074: PUSH
39075: LD_INT 5
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 3
39084: PUSH
39085: LD_INT 4
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: PUSH
39095: LD_INT 3
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 5
39104: PUSH
39105: LD_INT 3
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 3
39114: PUSH
39115: LD_INT 5
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 3
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: PUSH
39145: LD_INT 3
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 4
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: LD_INT 4
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: LD_INT 3
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: PUSH
39197: LD_INT 4
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 4
39217: NEG
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 4
39228: NEG
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 3
39240: NEG
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 3
39251: NEG
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 4
39262: NEG
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 5
39273: NEG
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 5
39284: NEG
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 5
39296: NEG
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 3
39308: NEG
39309: PUSH
39310: LD_INT 2
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: ST_TO_ADDR
// end ; end ;
39364: GO 39367
39366: POP
// case btype of b_depot , b_warehouse :
39367: LD_VAR 0 1
39371: PUSH
39372: LD_INT 0
39374: DOUBLE
39375: EQUAL
39376: IFTRUE 39386
39378: LD_INT 1
39380: DOUBLE
39381: EQUAL
39382: IFTRUE 39386
39384: GO 39587
39386: POP
// case nation of nation_american :
39387: LD_VAR 0 5
39391: PUSH
39392: LD_INT 1
39394: DOUBLE
39395: EQUAL
39396: IFTRUE 39400
39398: GO 39456
39400: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39401: LD_ADDR_VAR 0 9
39405: PUSH
39406: LD_VAR 0 11
39410: PUSH
39411: LD_VAR 0 12
39415: PUSH
39416: LD_VAR 0 13
39420: PUSH
39421: LD_VAR 0 14
39425: PUSH
39426: LD_VAR 0 15
39430: PUSH
39431: LD_VAR 0 16
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: PUSH
39444: LD_VAR 0 4
39448: PUSH
39449: LD_INT 1
39451: PLUS
39452: ARRAY
39453: ST_TO_ADDR
39454: GO 39585
39456: LD_INT 2
39458: DOUBLE
39459: EQUAL
39460: IFTRUE 39464
39462: GO 39520
39464: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39465: LD_ADDR_VAR 0 9
39469: PUSH
39470: LD_VAR 0 17
39474: PUSH
39475: LD_VAR 0 18
39479: PUSH
39480: LD_VAR 0 19
39484: PUSH
39485: LD_VAR 0 20
39489: PUSH
39490: LD_VAR 0 21
39494: PUSH
39495: LD_VAR 0 22
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: PUSH
39508: LD_VAR 0 4
39512: PUSH
39513: LD_INT 1
39515: PLUS
39516: ARRAY
39517: ST_TO_ADDR
39518: GO 39585
39520: LD_INT 3
39522: DOUBLE
39523: EQUAL
39524: IFTRUE 39528
39526: GO 39584
39528: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39529: LD_ADDR_VAR 0 9
39533: PUSH
39534: LD_VAR 0 23
39538: PUSH
39539: LD_VAR 0 24
39543: PUSH
39544: LD_VAR 0 25
39548: PUSH
39549: LD_VAR 0 26
39553: PUSH
39554: LD_VAR 0 27
39558: PUSH
39559: LD_VAR 0 28
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: PUSH
39572: LD_VAR 0 4
39576: PUSH
39577: LD_INT 1
39579: PLUS
39580: ARRAY
39581: ST_TO_ADDR
39582: GO 39585
39584: POP
39585: GO 40140
39587: LD_INT 2
39589: DOUBLE
39590: EQUAL
39591: IFTRUE 39601
39593: LD_INT 3
39595: DOUBLE
39596: EQUAL
39597: IFTRUE 39601
39599: GO 39657
39601: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39602: LD_ADDR_VAR 0 9
39606: PUSH
39607: LD_VAR 0 29
39611: PUSH
39612: LD_VAR 0 30
39616: PUSH
39617: LD_VAR 0 31
39621: PUSH
39622: LD_VAR 0 32
39626: PUSH
39627: LD_VAR 0 33
39631: PUSH
39632: LD_VAR 0 34
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: PUSH
39645: LD_VAR 0 4
39649: PUSH
39650: LD_INT 1
39652: PLUS
39653: ARRAY
39654: ST_TO_ADDR
39655: GO 40140
39657: LD_INT 16
39659: DOUBLE
39660: EQUAL
39661: IFTRUE 39719
39663: LD_INT 17
39665: DOUBLE
39666: EQUAL
39667: IFTRUE 39719
39669: LD_INT 18
39671: DOUBLE
39672: EQUAL
39673: IFTRUE 39719
39675: LD_INT 19
39677: DOUBLE
39678: EQUAL
39679: IFTRUE 39719
39681: LD_INT 22
39683: DOUBLE
39684: EQUAL
39685: IFTRUE 39719
39687: LD_INT 20
39689: DOUBLE
39690: EQUAL
39691: IFTRUE 39719
39693: LD_INT 21
39695: DOUBLE
39696: EQUAL
39697: IFTRUE 39719
39699: LD_INT 23
39701: DOUBLE
39702: EQUAL
39703: IFTRUE 39719
39705: LD_INT 24
39707: DOUBLE
39708: EQUAL
39709: IFTRUE 39719
39711: LD_INT 25
39713: DOUBLE
39714: EQUAL
39715: IFTRUE 39719
39717: GO 39775
39719: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39720: LD_ADDR_VAR 0 9
39724: PUSH
39725: LD_VAR 0 35
39729: PUSH
39730: LD_VAR 0 36
39734: PUSH
39735: LD_VAR 0 37
39739: PUSH
39740: LD_VAR 0 38
39744: PUSH
39745: LD_VAR 0 39
39749: PUSH
39750: LD_VAR 0 40
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: PUSH
39763: LD_VAR 0 4
39767: PUSH
39768: LD_INT 1
39770: PLUS
39771: ARRAY
39772: ST_TO_ADDR
39773: GO 40140
39775: LD_INT 6
39777: DOUBLE
39778: EQUAL
39779: IFTRUE 39831
39781: LD_INT 7
39783: DOUBLE
39784: EQUAL
39785: IFTRUE 39831
39787: LD_INT 8
39789: DOUBLE
39790: EQUAL
39791: IFTRUE 39831
39793: LD_INT 13
39795: DOUBLE
39796: EQUAL
39797: IFTRUE 39831
39799: LD_INT 12
39801: DOUBLE
39802: EQUAL
39803: IFTRUE 39831
39805: LD_INT 15
39807: DOUBLE
39808: EQUAL
39809: IFTRUE 39831
39811: LD_INT 11
39813: DOUBLE
39814: EQUAL
39815: IFTRUE 39831
39817: LD_INT 14
39819: DOUBLE
39820: EQUAL
39821: IFTRUE 39831
39823: LD_INT 10
39825: DOUBLE
39826: EQUAL
39827: IFTRUE 39831
39829: GO 39887
39831: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
39832: LD_ADDR_VAR 0 9
39836: PUSH
39837: LD_VAR 0 41
39841: PUSH
39842: LD_VAR 0 42
39846: PUSH
39847: LD_VAR 0 43
39851: PUSH
39852: LD_VAR 0 44
39856: PUSH
39857: LD_VAR 0 45
39861: PUSH
39862: LD_VAR 0 46
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: PUSH
39875: LD_VAR 0 4
39879: PUSH
39880: LD_INT 1
39882: PLUS
39883: ARRAY
39884: ST_TO_ADDR
39885: GO 40140
39887: LD_INT 36
39889: DOUBLE
39890: EQUAL
39891: IFTRUE 39895
39893: GO 39951
39895: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
39896: LD_ADDR_VAR 0 9
39900: PUSH
39901: LD_VAR 0 47
39905: PUSH
39906: LD_VAR 0 48
39910: PUSH
39911: LD_VAR 0 49
39915: PUSH
39916: LD_VAR 0 50
39920: PUSH
39921: LD_VAR 0 51
39925: PUSH
39926: LD_VAR 0 52
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: PUSH
39939: LD_VAR 0 4
39943: PUSH
39944: LD_INT 1
39946: PLUS
39947: ARRAY
39948: ST_TO_ADDR
39949: GO 40140
39951: LD_INT 4
39953: DOUBLE
39954: EQUAL
39955: IFTRUE 39977
39957: LD_INT 5
39959: DOUBLE
39960: EQUAL
39961: IFTRUE 39977
39963: LD_INT 34
39965: DOUBLE
39966: EQUAL
39967: IFTRUE 39977
39969: LD_INT 37
39971: DOUBLE
39972: EQUAL
39973: IFTRUE 39977
39975: GO 40033
39977: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
39978: LD_ADDR_VAR 0 9
39982: PUSH
39983: LD_VAR 0 53
39987: PUSH
39988: LD_VAR 0 54
39992: PUSH
39993: LD_VAR 0 55
39997: PUSH
39998: LD_VAR 0 56
40002: PUSH
40003: LD_VAR 0 57
40007: PUSH
40008: LD_VAR 0 58
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: PUSH
40021: LD_VAR 0 4
40025: PUSH
40026: LD_INT 1
40028: PLUS
40029: ARRAY
40030: ST_TO_ADDR
40031: GO 40140
40033: LD_INT 31
40035: DOUBLE
40036: EQUAL
40037: IFTRUE 40083
40039: LD_INT 32
40041: DOUBLE
40042: EQUAL
40043: IFTRUE 40083
40045: LD_INT 33
40047: DOUBLE
40048: EQUAL
40049: IFTRUE 40083
40051: LD_INT 27
40053: DOUBLE
40054: EQUAL
40055: IFTRUE 40083
40057: LD_INT 26
40059: DOUBLE
40060: EQUAL
40061: IFTRUE 40083
40063: LD_INT 28
40065: DOUBLE
40066: EQUAL
40067: IFTRUE 40083
40069: LD_INT 29
40071: DOUBLE
40072: EQUAL
40073: IFTRUE 40083
40075: LD_INT 30
40077: DOUBLE
40078: EQUAL
40079: IFTRUE 40083
40081: GO 40139
40083: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40084: LD_ADDR_VAR 0 9
40088: PUSH
40089: LD_VAR 0 59
40093: PUSH
40094: LD_VAR 0 60
40098: PUSH
40099: LD_VAR 0 61
40103: PUSH
40104: LD_VAR 0 62
40108: PUSH
40109: LD_VAR 0 63
40113: PUSH
40114: LD_VAR 0 64
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: PUSH
40127: LD_VAR 0 4
40131: PUSH
40132: LD_INT 1
40134: PLUS
40135: ARRAY
40136: ST_TO_ADDR
40137: GO 40140
40139: POP
// temp_list2 = [ ] ;
40140: LD_ADDR_VAR 0 10
40144: PUSH
40145: EMPTY
40146: ST_TO_ADDR
// for i in temp_list do
40147: LD_ADDR_VAR 0 8
40151: PUSH
40152: LD_VAR 0 9
40156: PUSH
40157: FOR_IN
40158: IFFALSE 40210
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40160: LD_ADDR_VAR 0 10
40164: PUSH
40165: LD_VAR 0 10
40169: PUSH
40170: LD_VAR 0 8
40174: PUSH
40175: LD_INT 1
40177: ARRAY
40178: PUSH
40179: LD_VAR 0 2
40183: PLUS
40184: PUSH
40185: LD_VAR 0 8
40189: PUSH
40190: LD_INT 2
40192: ARRAY
40193: PUSH
40194: LD_VAR 0 3
40198: PLUS
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: ADD
40207: ST_TO_ADDR
40208: GO 40157
40210: POP
40211: POP
// result = temp_list2 ;
40212: LD_ADDR_VAR 0 7
40216: PUSH
40217: LD_VAR 0 10
40221: ST_TO_ADDR
// end ;
40222: LD_VAR 0 7
40226: RET
// export function EnemyInRange ( unit , dist ) ; begin
40227: LD_INT 0
40229: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40230: LD_ADDR_VAR 0 3
40234: PUSH
40235: LD_VAR 0 1
40239: PPUSH
40240: CALL_OW 255
40244: PPUSH
40245: LD_VAR 0 1
40249: PPUSH
40250: CALL_OW 250
40254: PPUSH
40255: LD_VAR 0 1
40259: PPUSH
40260: CALL_OW 251
40264: PPUSH
40265: LD_VAR 0 2
40269: PPUSH
40270: CALL 13629 0 4
40274: PUSH
40275: LD_INT 4
40277: ARRAY
40278: ST_TO_ADDR
// end ;
40279: LD_VAR 0 3
40283: RET
// export function PlayerSeeMe ( unit ) ; begin
40284: LD_INT 0
40286: PPUSH
// result := See ( your_side , unit ) ;
40287: LD_ADDR_VAR 0 2
40291: PUSH
40292: LD_OWVAR 2
40296: PPUSH
40297: LD_VAR 0 1
40301: PPUSH
40302: CALL_OW 292
40306: ST_TO_ADDR
// end ;
40307: LD_VAR 0 2
40311: RET
// export function ReverseDir ( unit ) ; begin
40312: LD_INT 0
40314: PPUSH
// if not unit then
40315: LD_VAR 0 1
40319: NOT
40320: IFFALSE 40324
// exit ;
40322: GO 40347
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40324: LD_ADDR_VAR 0 2
40328: PUSH
40329: LD_VAR 0 1
40333: PPUSH
40334: CALL_OW 254
40338: PUSH
40339: LD_INT 3
40341: PLUS
40342: PUSH
40343: LD_INT 6
40345: MOD
40346: ST_TO_ADDR
// end ;
40347: LD_VAR 0 2
40351: RET
// export function ReverseArray ( array ) ; var i ; begin
40352: LD_INT 0
40354: PPUSH
40355: PPUSH
// if not array then
40356: LD_VAR 0 1
40360: NOT
40361: IFFALSE 40365
// exit ;
40363: GO 40420
// result := [ ] ;
40365: LD_ADDR_VAR 0 2
40369: PUSH
40370: EMPTY
40371: ST_TO_ADDR
// for i := array downto 1 do
40372: LD_ADDR_VAR 0 3
40376: PUSH
40377: DOUBLE
40378: LD_VAR 0 1
40382: INC
40383: ST_TO_ADDR
40384: LD_INT 1
40386: PUSH
40387: FOR_DOWNTO
40388: IFFALSE 40418
// result := Join ( result , array [ i ] ) ;
40390: LD_ADDR_VAR 0 2
40394: PUSH
40395: LD_VAR 0 2
40399: PPUSH
40400: LD_VAR 0 1
40404: PUSH
40405: LD_VAR 0 3
40409: ARRAY
40410: PPUSH
40411: CALL 45064 0 2
40415: ST_TO_ADDR
40416: GO 40387
40418: POP
40419: POP
// end ;
40420: LD_VAR 0 2
40424: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
40425: LD_INT 0
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
40431: PPUSH
40432: PPUSH
// if not unit or not hexes then
40433: LD_VAR 0 1
40437: NOT
40438: PUSH
40439: LD_VAR 0 2
40443: NOT
40444: OR
40445: IFFALSE 40449
// exit ;
40447: GO 40572
// dist := 9999 ;
40449: LD_ADDR_VAR 0 5
40453: PUSH
40454: LD_INT 9999
40456: ST_TO_ADDR
// for i = 1 to hexes do
40457: LD_ADDR_VAR 0 4
40461: PUSH
40462: DOUBLE
40463: LD_INT 1
40465: DEC
40466: ST_TO_ADDR
40467: LD_VAR 0 2
40471: PUSH
40472: FOR_TO
40473: IFFALSE 40560
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40475: LD_ADDR_VAR 0 6
40479: PUSH
40480: LD_VAR 0 1
40484: PPUSH
40485: LD_VAR 0 2
40489: PUSH
40490: LD_VAR 0 4
40494: ARRAY
40495: PUSH
40496: LD_INT 1
40498: ARRAY
40499: PPUSH
40500: LD_VAR 0 2
40504: PUSH
40505: LD_VAR 0 4
40509: ARRAY
40510: PUSH
40511: LD_INT 2
40513: ARRAY
40514: PPUSH
40515: CALL_OW 297
40519: ST_TO_ADDR
// if tdist < dist then
40520: LD_VAR 0 6
40524: PUSH
40525: LD_VAR 0 5
40529: LESS
40530: IFFALSE 40558
// begin hex := hexes [ i ] ;
40532: LD_ADDR_VAR 0 8
40536: PUSH
40537: LD_VAR 0 2
40541: PUSH
40542: LD_VAR 0 4
40546: ARRAY
40547: ST_TO_ADDR
// dist := tdist ;
40548: LD_ADDR_VAR 0 5
40552: PUSH
40553: LD_VAR 0 6
40557: ST_TO_ADDR
// end ; end ;
40558: GO 40472
40560: POP
40561: POP
// result := hex ;
40562: LD_ADDR_VAR 0 3
40566: PUSH
40567: LD_VAR 0 8
40571: ST_TO_ADDR
// end ;
40572: LD_VAR 0 3
40576: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40577: LD_INT 0
40579: PPUSH
40580: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40581: LD_VAR 0 1
40585: NOT
40586: PUSH
40587: LD_VAR 0 1
40591: PUSH
40592: LD_INT 21
40594: PUSH
40595: LD_INT 2
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 23
40604: PUSH
40605: LD_INT 2
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PPUSH
40616: CALL_OW 69
40620: IN
40621: NOT
40622: OR
40623: IFFALSE 40627
// exit ;
40625: GO 40674
// for i = 1 to 3 do
40627: LD_ADDR_VAR 0 3
40631: PUSH
40632: DOUBLE
40633: LD_INT 1
40635: DEC
40636: ST_TO_ADDR
40637: LD_INT 3
40639: PUSH
40640: FOR_TO
40641: IFFALSE 40672
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL_OW 250
40652: PPUSH
40653: LD_VAR 0 1
40657: PPUSH
40658: CALL_OW 251
40662: PPUSH
40663: LD_INT 1
40665: PPUSH
40666: CALL_OW 453
40670: GO 40640
40672: POP
40673: POP
// end ;
40674: LD_VAR 0 2
40678: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40679: LD_INT 0
40681: PPUSH
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
40686: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40687: LD_VAR 0 1
40691: NOT
40692: PUSH
40693: LD_VAR 0 2
40697: NOT
40698: OR
40699: PUSH
40700: LD_VAR 0 1
40704: PPUSH
40705: CALL_OW 314
40709: OR
40710: IFFALSE 40714
// exit ;
40712: GO 41181
// if GetLives ( i ) < 250 then
40714: LD_VAR 0 4
40718: PPUSH
40719: CALL_OW 256
40723: PUSH
40724: LD_INT 250
40726: LESS
40727: IFFALSE 40740
// begin ComAutodestruct ( i ) ;
40729: LD_VAR 0 4
40733: PPUSH
40734: CALL 40577 0 1
// exit ;
40738: GO 41181
// end ; x := GetX ( enemy_unit ) ;
40740: LD_ADDR_VAR 0 7
40744: PUSH
40745: LD_VAR 0 2
40749: PPUSH
40750: CALL_OW 250
40754: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40755: LD_ADDR_VAR 0 8
40759: PUSH
40760: LD_VAR 0 2
40764: PPUSH
40765: CALL_OW 251
40769: ST_TO_ADDR
// if not x or not y then
40770: LD_VAR 0 7
40774: NOT
40775: PUSH
40776: LD_VAR 0 8
40780: NOT
40781: OR
40782: IFFALSE 40786
// exit ;
40784: GO 41181
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
40786: LD_ADDR_VAR 0 6
40790: PUSH
40791: LD_VAR 0 7
40795: PPUSH
40796: LD_INT 0
40798: PPUSH
40799: LD_INT 4
40801: PPUSH
40802: CALL_OW 272
40806: PUSH
40807: LD_VAR 0 8
40811: PPUSH
40812: LD_INT 0
40814: PPUSH
40815: LD_INT 4
40817: PPUSH
40818: CALL_OW 273
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_VAR 0 7
40831: PPUSH
40832: LD_INT 1
40834: PPUSH
40835: LD_INT 4
40837: PPUSH
40838: CALL_OW 272
40842: PUSH
40843: LD_VAR 0 8
40847: PPUSH
40848: LD_INT 1
40850: PPUSH
40851: LD_INT 4
40853: PPUSH
40854: CALL_OW 273
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_VAR 0 7
40867: PPUSH
40868: LD_INT 2
40870: PPUSH
40871: LD_INT 4
40873: PPUSH
40874: CALL_OW 272
40878: PUSH
40879: LD_VAR 0 8
40883: PPUSH
40884: LD_INT 2
40886: PPUSH
40887: LD_INT 4
40889: PPUSH
40890: CALL_OW 273
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_VAR 0 7
40903: PPUSH
40904: LD_INT 3
40906: PPUSH
40907: LD_INT 4
40909: PPUSH
40910: CALL_OW 272
40914: PUSH
40915: LD_VAR 0 8
40919: PPUSH
40920: LD_INT 3
40922: PPUSH
40923: LD_INT 4
40925: PPUSH
40926: CALL_OW 273
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_VAR 0 7
40939: PPUSH
40940: LD_INT 4
40942: PPUSH
40943: LD_INT 4
40945: PPUSH
40946: CALL_OW 272
40950: PUSH
40951: LD_VAR 0 8
40955: PPUSH
40956: LD_INT 4
40958: PPUSH
40959: LD_INT 4
40961: PPUSH
40962: CALL_OW 273
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_VAR 0 7
40975: PPUSH
40976: LD_INT 5
40978: PPUSH
40979: LD_INT 4
40981: PPUSH
40982: CALL_OW 272
40986: PUSH
40987: LD_VAR 0 8
40991: PPUSH
40992: LD_INT 5
40994: PPUSH
40995: LD_INT 4
40997: PPUSH
40998: CALL_OW 273
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: ST_TO_ADDR
// for i = tmp downto 1 do
41015: LD_ADDR_VAR 0 4
41019: PUSH
41020: DOUBLE
41021: LD_VAR 0 6
41025: INC
41026: ST_TO_ADDR
41027: LD_INT 1
41029: PUSH
41030: FOR_DOWNTO
41031: IFFALSE 41132
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41033: LD_VAR 0 6
41037: PUSH
41038: LD_VAR 0 4
41042: ARRAY
41043: PUSH
41044: LD_INT 1
41046: ARRAY
41047: PPUSH
41048: LD_VAR 0 6
41052: PUSH
41053: LD_VAR 0 4
41057: ARRAY
41058: PUSH
41059: LD_INT 2
41061: ARRAY
41062: PPUSH
41063: CALL_OW 488
41067: NOT
41068: PUSH
41069: LD_VAR 0 6
41073: PUSH
41074: LD_VAR 0 4
41078: ARRAY
41079: PUSH
41080: LD_INT 1
41082: ARRAY
41083: PPUSH
41084: LD_VAR 0 6
41088: PUSH
41089: LD_VAR 0 4
41093: ARRAY
41094: PUSH
41095: LD_INT 2
41097: ARRAY
41098: PPUSH
41099: CALL_OW 428
41103: PUSH
41104: LD_INT 0
41106: NONEQUAL
41107: OR
41108: IFFALSE 41130
// tmp := Delete ( tmp , i ) ;
41110: LD_ADDR_VAR 0 6
41114: PUSH
41115: LD_VAR 0 6
41119: PPUSH
41120: LD_VAR 0 4
41124: PPUSH
41125: CALL_OW 3
41129: ST_TO_ADDR
41130: GO 41030
41132: POP
41133: POP
// j := GetClosestHex ( unit , tmp ) ;
41134: LD_ADDR_VAR 0 5
41138: PUSH
41139: LD_VAR 0 1
41143: PPUSH
41144: LD_VAR 0 6
41148: PPUSH
41149: CALL 40425 0 2
41153: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41154: LD_VAR 0 1
41158: PPUSH
41159: LD_VAR 0 5
41163: PUSH
41164: LD_INT 1
41166: ARRAY
41167: PPUSH
41168: LD_VAR 0 5
41172: PUSH
41173: LD_INT 2
41175: ARRAY
41176: PPUSH
41177: CALL_OW 111
// end ;
41181: LD_VAR 0 3
41185: RET
// export function PrepareApemanSoldier ( ) ; begin
41186: LD_INT 0
41188: PPUSH
// uc_nation := 0 ;
41189: LD_ADDR_OWVAR 21
41193: PUSH
41194: LD_INT 0
41196: ST_TO_ADDR
// hc_sex := sex_male ;
41197: LD_ADDR_OWVAR 27
41201: PUSH
41202: LD_INT 1
41204: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
41205: LD_ADDR_OWVAR 28
41209: PUSH
41210: LD_INT 15
41212: ST_TO_ADDR
// hc_gallery :=  ;
41213: LD_ADDR_OWVAR 33
41217: PUSH
41218: LD_STRING 
41220: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41221: LD_ADDR_OWVAR 31
41225: PUSH
41226: LD_INT 0
41228: PPUSH
41229: LD_INT 3
41231: PPUSH
41232: CALL_OW 12
41236: PUSH
41237: LD_INT 0
41239: PPUSH
41240: LD_INT 3
41242: PPUSH
41243: CALL_OW 12
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: ST_TO_ADDR
// end ;
41260: LD_VAR 0 1
41264: RET
// export function PrepareApemanEngineer ( ) ; begin
41265: LD_INT 0
41267: PPUSH
// uc_nation := 0 ;
41268: LD_ADDR_OWVAR 21
41272: PUSH
41273: LD_INT 0
41275: ST_TO_ADDR
// hc_sex := sex_male ;
41276: LD_ADDR_OWVAR 27
41280: PUSH
41281: LD_INT 1
41283: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
41284: LD_ADDR_OWVAR 28
41288: PUSH
41289: LD_INT 16
41291: ST_TO_ADDR
// hc_gallery :=  ;
41292: LD_ADDR_OWVAR 33
41296: PUSH
41297: LD_STRING 
41299: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41300: LD_ADDR_OWVAR 31
41304: PUSH
41305: LD_INT 0
41307: PPUSH
41308: LD_INT 3
41310: PPUSH
41311: CALL_OW 12
41315: PUSH
41316: LD_INT 0
41318: PPUSH
41319: LD_INT 3
41321: PPUSH
41322: CALL_OW 12
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: ST_TO_ADDR
// end ;
41339: LD_VAR 0 1
41343: RET
// export function PrepareApeman ( agressivity ) ; begin
41344: LD_INT 0
41346: PPUSH
// uc_side := 0 ;
41347: LD_ADDR_OWVAR 20
41351: PUSH
41352: LD_INT 0
41354: ST_TO_ADDR
// uc_nation := 0 ;
41355: LD_ADDR_OWVAR 21
41359: PUSH
41360: LD_INT 0
41362: ST_TO_ADDR
// hc_sex := sex_male ;
41363: LD_ADDR_OWVAR 27
41367: PUSH
41368: LD_INT 1
41370: ST_TO_ADDR
// hc_class := class_apeman ;
41371: LD_ADDR_OWVAR 28
41375: PUSH
41376: LD_INT 12
41378: ST_TO_ADDR
// hc_gallery :=  ;
41379: LD_ADDR_OWVAR 33
41383: PUSH
41384: LD_STRING 
41386: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
41387: LD_ADDR_OWVAR 35
41391: PUSH
41392: LD_VAR 0 1
41396: NEG
41397: PPUSH
41398: LD_VAR 0 1
41402: PPUSH
41403: CALL_OW 12
41407: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41408: LD_ADDR_OWVAR 31
41412: PUSH
41413: LD_INT 0
41415: PPUSH
41416: LD_INT 3
41418: PPUSH
41419: CALL_OW 12
41423: PUSH
41424: LD_INT 0
41426: PPUSH
41427: LD_INT 3
41429: PPUSH
41430: CALL_OW 12
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: ST_TO_ADDR
// end ;
41447: LD_VAR 0 2
41451: RET
// export function PrepareTiger ( agressivity ) ; begin
41452: LD_INT 0
41454: PPUSH
// uc_side := 0 ;
41455: LD_ADDR_OWVAR 20
41459: PUSH
41460: LD_INT 0
41462: ST_TO_ADDR
// uc_nation := 0 ;
41463: LD_ADDR_OWVAR 21
41467: PUSH
41468: LD_INT 0
41470: ST_TO_ADDR
// hc_class := class_tiger ;
41471: LD_ADDR_OWVAR 28
41475: PUSH
41476: LD_INT 14
41478: ST_TO_ADDR
// hc_gallery :=  ;
41479: LD_ADDR_OWVAR 33
41483: PUSH
41484: LD_STRING 
41486: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
41487: LD_ADDR_OWVAR 35
41491: PUSH
41492: LD_VAR 0 1
41496: NEG
41497: PPUSH
41498: LD_VAR 0 1
41502: PPUSH
41503: CALL_OW 12
41507: ST_TO_ADDR
// end ;
41508: LD_VAR 0 2
41512: RET
// export function PrepareEnchidna ( ) ; begin
41513: LD_INT 0
41515: PPUSH
// uc_side := 0 ;
41516: LD_ADDR_OWVAR 20
41520: PUSH
41521: LD_INT 0
41523: ST_TO_ADDR
// uc_nation := 0 ;
41524: LD_ADDR_OWVAR 21
41528: PUSH
41529: LD_INT 0
41531: ST_TO_ADDR
// hc_class := class_baggie ;
41532: LD_ADDR_OWVAR 28
41536: PUSH
41537: LD_INT 13
41539: ST_TO_ADDR
// hc_gallery :=  ;
41540: LD_ADDR_OWVAR 33
41544: PUSH
41545: LD_STRING 
41547: ST_TO_ADDR
// end ;
41548: LD_VAR 0 1
41552: RET
// export function PrepareFrog ( ) ; begin
41553: LD_INT 0
41555: PPUSH
// uc_side := 0 ;
41556: LD_ADDR_OWVAR 20
41560: PUSH
41561: LD_INT 0
41563: ST_TO_ADDR
// uc_nation := 0 ;
41564: LD_ADDR_OWVAR 21
41568: PUSH
41569: LD_INT 0
41571: ST_TO_ADDR
// hc_class := class_frog ;
41572: LD_ADDR_OWVAR 28
41576: PUSH
41577: LD_INT 19
41579: ST_TO_ADDR
// hc_gallery :=  ;
41580: LD_ADDR_OWVAR 33
41584: PUSH
41585: LD_STRING 
41587: ST_TO_ADDR
// end ;
41588: LD_VAR 0 1
41592: RET
// export function PrepareFish ( ) ; begin
41593: LD_INT 0
41595: PPUSH
// uc_side := 0 ;
41596: LD_ADDR_OWVAR 20
41600: PUSH
41601: LD_INT 0
41603: ST_TO_ADDR
// uc_nation := 0 ;
41604: LD_ADDR_OWVAR 21
41608: PUSH
41609: LD_INT 0
41611: ST_TO_ADDR
// hc_class := class_fish ;
41612: LD_ADDR_OWVAR 28
41616: PUSH
41617: LD_INT 20
41619: ST_TO_ADDR
// hc_gallery :=  ;
41620: LD_ADDR_OWVAR 33
41624: PUSH
41625: LD_STRING 
41627: ST_TO_ADDR
// end ;
41628: LD_VAR 0 1
41632: RET
// export function PrepareBird ( ) ; begin
41633: LD_INT 0
41635: PPUSH
// uc_side := 0 ;
41636: LD_ADDR_OWVAR 20
41640: PUSH
41641: LD_INT 0
41643: ST_TO_ADDR
// uc_nation := 0 ;
41644: LD_ADDR_OWVAR 21
41648: PUSH
41649: LD_INT 0
41651: ST_TO_ADDR
// hc_class := class_phororhacos ;
41652: LD_ADDR_OWVAR 28
41656: PUSH
41657: LD_INT 18
41659: ST_TO_ADDR
// hc_gallery :=  ;
41660: LD_ADDR_OWVAR 33
41664: PUSH
41665: LD_STRING 
41667: ST_TO_ADDR
// end ;
41668: LD_VAR 0 1
41672: RET
// export function PrepareHorse ( ) ; begin
41673: LD_INT 0
41675: PPUSH
// uc_side := 0 ;
41676: LD_ADDR_OWVAR 20
41680: PUSH
41681: LD_INT 0
41683: ST_TO_ADDR
// uc_nation := 0 ;
41684: LD_ADDR_OWVAR 21
41688: PUSH
41689: LD_INT 0
41691: ST_TO_ADDR
// hc_class := class_horse ;
41692: LD_ADDR_OWVAR 28
41696: PUSH
41697: LD_INT 21
41699: ST_TO_ADDR
// hc_gallery :=  ;
41700: LD_ADDR_OWVAR 33
41704: PUSH
41705: LD_STRING 
41707: ST_TO_ADDR
// end ;
41708: LD_VAR 0 1
41712: RET
// export function PrepareMastodont ( ) ; begin
41713: LD_INT 0
41715: PPUSH
// uc_side := 0 ;
41716: LD_ADDR_OWVAR 20
41720: PUSH
41721: LD_INT 0
41723: ST_TO_ADDR
// uc_nation := 0 ;
41724: LD_ADDR_OWVAR 21
41728: PUSH
41729: LD_INT 0
41731: ST_TO_ADDR
// vc_chassis := class_mastodont ;
41732: LD_ADDR_OWVAR 37
41736: PUSH
41737: LD_INT 31
41739: ST_TO_ADDR
// vc_control := control_rider ;
41740: LD_ADDR_OWVAR 38
41744: PUSH
41745: LD_INT 4
41747: ST_TO_ADDR
// end ;
41748: LD_VAR 0 1
41752: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41753: LD_INT 0
41755: PPUSH
41756: PPUSH
41757: PPUSH
// uc_side = 0 ;
41758: LD_ADDR_OWVAR 20
41762: PUSH
41763: LD_INT 0
41765: ST_TO_ADDR
// uc_nation = 0 ;
41766: LD_ADDR_OWVAR 21
41770: PUSH
41771: LD_INT 0
41773: ST_TO_ADDR
// InitHc_All ( ) ;
41774: CALL_OW 584
// InitVc ;
41778: CALL_OW 20
// if mastodonts then
41782: LD_VAR 0 6
41786: IFFALSE 41853
// for i = 1 to mastodonts do
41788: LD_ADDR_VAR 0 11
41792: PUSH
41793: DOUBLE
41794: LD_INT 1
41796: DEC
41797: ST_TO_ADDR
41798: LD_VAR 0 6
41802: PUSH
41803: FOR_TO
41804: IFFALSE 41851
// begin vc_chassis := 31 ;
41806: LD_ADDR_OWVAR 37
41810: PUSH
41811: LD_INT 31
41813: ST_TO_ADDR
// vc_control := control_rider ;
41814: LD_ADDR_OWVAR 38
41818: PUSH
41819: LD_INT 4
41821: ST_TO_ADDR
// animal := CreateVehicle ;
41822: LD_ADDR_VAR 0 12
41826: PUSH
41827: CALL_OW 45
41831: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41832: LD_VAR 0 12
41836: PPUSH
41837: LD_VAR 0 8
41841: PPUSH
41842: LD_INT 0
41844: PPUSH
41845: CALL 43981 0 3
// end ;
41849: GO 41803
41851: POP
41852: POP
// if horses then
41853: LD_VAR 0 5
41857: IFFALSE 41924
// for i = 1 to horses do
41859: LD_ADDR_VAR 0 11
41863: PUSH
41864: DOUBLE
41865: LD_INT 1
41867: DEC
41868: ST_TO_ADDR
41869: LD_VAR 0 5
41873: PUSH
41874: FOR_TO
41875: IFFALSE 41922
// begin hc_class := 21 ;
41877: LD_ADDR_OWVAR 28
41881: PUSH
41882: LD_INT 21
41884: ST_TO_ADDR
// hc_gallery :=  ;
41885: LD_ADDR_OWVAR 33
41889: PUSH
41890: LD_STRING 
41892: ST_TO_ADDR
// animal := CreateHuman ;
41893: LD_ADDR_VAR 0 12
41897: PUSH
41898: CALL_OW 44
41902: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41903: LD_VAR 0 12
41907: PPUSH
41908: LD_VAR 0 8
41912: PPUSH
41913: LD_INT 0
41915: PPUSH
41916: CALL 43981 0 3
// end ;
41920: GO 41874
41922: POP
41923: POP
// if birds then
41924: LD_VAR 0 1
41928: IFFALSE 41995
// for i = 1 to birds do
41930: LD_ADDR_VAR 0 11
41934: PUSH
41935: DOUBLE
41936: LD_INT 1
41938: DEC
41939: ST_TO_ADDR
41940: LD_VAR 0 1
41944: PUSH
41945: FOR_TO
41946: IFFALSE 41993
// begin hc_class = 18 ;
41948: LD_ADDR_OWVAR 28
41952: PUSH
41953: LD_INT 18
41955: ST_TO_ADDR
// hc_gallery =  ;
41956: LD_ADDR_OWVAR 33
41960: PUSH
41961: LD_STRING 
41963: ST_TO_ADDR
// animal := CreateHuman ;
41964: LD_ADDR_VAR 0 12
41968: PUSH
41969: CALL_OW 44
41973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41974: LD_VAR 0 12
41978: PPUSH
41979: LD_VAR 0 8
41983: PPUSH
41984: LD_INT 0
41986: PPUSH
41987: CALL 43981 0 3
// end ;
41991: GO 41945
41993: POP
41994: POP
// if tigers then
41995: LD_VAR 0 2
41999: IFFALSE 42083
// for i = 1 to tigers do
42001: LD_ADDR_VAR 0 11
42005: PUSH
42006: DOUBLE
42007: LD_INT 1
42009: DEC
42010: ST_TO_ADDR
42011: LD_VAR 0 2
42015: PUSH
42016: FOR_TO
42017: IFFALSE 42081
// begin hc_class = class_tiger ;
42019: LD_ADDR_OWVAR 28
42023: PUSH
42024: LD_INT 14
42026: ST_TO_ADDR
// hc_gallery =  ;
42027: LD_ADDR_OWVAR 33
42031: PUSH
42032: LD_STRING 
42034: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42035: LD_ADDR_OWVAR 35
42039: PUSH
42040: LD_INT 7
42042: NEG
42043: PPUSH
42044: LD_INT 7
42046: PPUSH
42047: CALL_OW 12
42051: ST_TO_ADDR
// animal := CreateHuman ;
42052: LD_ADDR_VAR 0 12
42056: PUSH
42057: CALL_OW 44
42061: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42062: LD_VAR 0 12
42066: PPUSH
42067: LD_VAR 0 8
42071: PPUSH
42072: LD_INT 0
42074: PPUSH
42075: CALL 43981 0 3
// end ;
42079: GO 42016
42081: POP
42082: POP
// if apemans then
42083: LD_VAR 0 3
42087: IFFALSE 42210
// for i = 1 to apemans do
42089: LD_ADDR_VAR 0 11
42093: PUSH
42094: DOUBLE
42095: LD_INT 1
42097: DEC
42098: ST_TO_ADDR
42099: LD_VAR 0 3
42103: PUSH
42104: FOR_TO
42105: IFFALSE 42208
// begin hc_class = class_apeman ;
42107: LD_ADDR_OWVAR 28
42111: PUSH
42112: LD_INT 12
42114: ST_TO_ADDR
// hc_gallery =  ;
42115: LD_ADDR_OWVAR 33
42119: PUSH
42120: LD_STRING 
42122: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
42123: LD_ADDR_OWVAR 35
42127: PUSH
42128: LD_INT 2
42130: NEG
42131: PPUSH
42132: LD_INT 2
42134: PPUSH
42135: CALL_OW 12
42139: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
42140: LD_ADDR_OWVAR 31
42144: PUSH
42145: LD_INT 1
42147: PPUSH
42148: LD_INT 3
42150: PPUSH
42151: CALL_OW 12
42155: PUSH
42156: LD_INT 1
42158: PPUSH
42159: LD_INT 3
42161: PPUSH
42162: CALL_OW 12
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: ST_TO_ADDR
// animal := CreateHuman ;
42179: LD_ADDR_VAR 0 12
42183: PUSH
42184: CALL_OW 44
42188: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42189: LD_VAR 0 12
42193: PPUSH
42194: LD_VAR 0 8
42198: PPUSH
42199: LD_INT 0
42201: PPUSH
42202: CALL 43981 0 3
// end ;
42206: GO 42104
42208: POP
42209: POP
// if enchidnas then
42210: LD_VAR 0 4
42214: IFFALSE 42281
// for i = 1 to enchidnas do
42216: LD_ADDR_VAR 0 11
42220: PUSH
42221: DOUBLE
42222: LD_INT 1
42224: DEC
42225: ST_TO_ADDR
42226: LD_VAR 0 4
42230: PUSH
42231: FOR_TO
42232: IFFALSE 42279
// begin hc_class = 13 ;
42234: LD_ADDR_OWVAR 28
42238: PUSH
42239: LD_INT 13
42241: ST_TO_ADDR
// hc_gallery =  ;
42242: LD_ADDR_OWVAR 33
42246: PUSH
42247: LD_STRING 
42249: ST_TO_ADDR
// animal := CreateHuman ;
42250: LD_ADDR_VAR 0 12
42254: PUSH
42255: CALL_OW 44
42259: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42260: LD_VAR 0 12
42264: PPUSH
42265: LD_VAR 0 8
42269: PPUSH
42270: LD_INT 0
42272: PPUSH
42273: CALL 43981 0 3
// end ;
42277: GO 42231
42279: POP
42280: POP
// if fishes then
42281: LD_VAR 0 7
42285: IFFALSE 42352
// for i = 1 to fishes do
42287: LD_ADDR_VAR 0 11
42291: PUSH
42292: DOUBLE
42293: LD_INT 1
42295: DEC
42296: ST_TO_ADDR
42297: LD_VAR 0 7
42301: PUSH
42302: FOR_TO
42303: IFFALSE 42350
// begin hc_class = 20 ;
42305: LD_ADDR_OWVAR 28
42309: PUSH
42310: LD_INT 20
42312: ST_TO_ADDR
// hc_gallery =  ;
42313: LD_ADDR_OWVAR 33
42317: PUSH
42318: LD_STRING 
42320: ST_TO_ADDR
// animal := CreateHuman ;
42321: LD_ADDR_VAR 0 12
42325: PUSH
42326: CALL_OW 44
42330: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
42331: LD_VAR 0 12
42335: PPUSH
42336: LD_VAR 0 9
42340: PPUSH
42341: LD_INT 0
42343: PPUSH
42344: CALL 43981 0 3
// end ;
42348: GO 42302
42350: POP
42351: POP
// end ;
42352: LD_VAR 0 10
42356: RET
// export function WantHeal ( sci , unit ) ; begin
42357: LD_INT 0
42359: PPUSH
// if GetTaskList ( sci ) > 0 then
42360: LD_VAR 0 1
42364: PPUSH
42365: CALL_OW 437
42369: PUSH
42370: LD_INT 0
42372: GREATER
42373: IFFALSE 42443
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
42375: LD_VAR 0 1
42379: PPUSH
42380: CALL_OW 437
42384: PUSH
42385: LD_INT 1
42387: ARRAY
42388: PUSH
42389: LD_INT 1
42391: ARRAY
42392: PUSH
42393: LD_STRING l
42395: EQUAL
42396: PUSH
42397: LD_VAR 0 1
42401: PPUSH
42402: CALL_OW 437
42406: PUSH
42407: LD_INT 1
42409: ARRAY
42410: PUSH
42411: LD_INT 4
42413: ARRAY
42414: PUSH
42415: LD_VAR 0 2
42419: EQUAL
42420: AND
42421: IFFALSE 42433
// result := true else
42423: LD_ADDR_VAR 0 3
42427: PUSH
42428: LD_INT 1
42430: ST_TO_ADDR
42431: GO 42441
// result := false ;
42433: LD_ADDR_VAR 0 3
42437: PUSH
42438: LD_INT 0
42440: ST_TO_ADDR
// end else
42441: GO 42451
// result := false ;
42443: LD_ADDR_VAR 0 3
42447: PUSH
42448: LD_INT 0
42450: ST_TO_ADDR
// end ;
42451: LD_VAR 0 3
42455: RET
// export function HealTarget ( sci ) ; begin
42456: LD_INT 0
42458: PPUSH
// if not sci then
42459: LD_VAR 0 1
42463: NOT
42464: IFFALSE 42468
// exit ;
42466: GO 42533
// result := 0 ;
42468: LD_ADDR_VAR 0 2
42472: PUSH
42473: LD_INT 0
42475: ST_TO_ADDR
// if GetTaskList ( sci ) then
42476: LD_VAR 0 1
42480: PPUSH
42481: CALL_OW 437
42485: IFFALSE 42533
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42487: LD_VAR 0 1
42491: PPUSH
42492: CALL_OW 437
42496: PUSH
42497: LD_INT 1
42499: ARRAY
42500: PUSH
42501: LD_INT 1
42503: ARRAY
42504: PUSH
42505: LD_STRING l
42507: EQUAL
42508: IFFALSE 42533
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42510: LD_ADDR_VAR 0 2
42514: PUSH
42515: LD_VAR 0 1
42519: PPUSH
42520: CALL_OW 437
42524: PUSH
42525: LD_INT 1
42527: ARRAY
42528: PUSH
42529: LD_INT 4
42531: ARRAY
42532: ST_TO_ADDR
// end ;
42533: LD_VAR 0 2
42537: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42538: LD_INT 0
42540: PPUSH
42541: PPUSH
42542: PPUSH
42543: PPUSH
// if not base_units then
42544: LD_VAR 0 1
42548: NOT
42549: IFFALSE 42553
// exit ;
42551: GO 42640
// result := false ;
42553: LD_ADDR_VAR 0 2
42557: PUSH
42558: LD_INT 0
42560: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42561: LD_ADDR_VAR 0 5
42565: PUSH
42566: LD_VAR 0 1
42570: PPUSH
42571: LD_INT 21
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PPUSH
42581: CALL_OW 72
42585: ST_TO_ADDR
// if not tmp then
42586: LD_VAR 0 5
42590: NOT
42591: IFFALSE 42595
// exit ;
42593: GO 42640
// for i in tmp do
42595: LD_ADDR_VAR 0 3
42599: PUSH
42600: LD_VAR 0 5
42604: PUSH
42605: FOR_IN
42606: IFFALSE 42638
// begin result := EnemyInRange ( i , 22 ) ;
42608: LD_ADDR_VAR 0 2
42612: PUSH
42613: LD_VAR 0 3
42617: PPUSH
42618: LD_INT 22
42620: PPUSH
42621: CALL 40227 0 2
42625: ST_TO_ADDR
// if result then
42626: LD_VAR 0 2
42630: IFFALSE 42636
// exit ;
42632: POP
42633: POP
42634: GO 42640
// end ;
42636: GO 42605
42638: POP
42639: POP
// end ;
42640: LD_VAR 0 2
42644: RET
// export function FilterByTag ( units , tag ) ; begin
42645: LD_INT 0
42647: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
42648: LD_ADDR_VAR 0 3
42652: PUSH
42653: LD_VAR 0 1
42657: PPUSH
42658: LD_INT 120
42660: PUSH
42661: LD_VAR 0 2
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PPUSH
42670: CALL_OW 72
42674: ST_TO_ADDR
// end ;
42675: LD_VAR 0 3
42679: RET
// export function IsDriver ( un ) ; begin
42680: LD_INT 0
42682: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42683: LD_ADDR_VAR 0 2
42687: PUSH
42688: LD_VAR 0 1
42692: PUSH
42693: LD_INT 55
42695: PUSH
42696: EMPTY
42697: LIST
42698: PPUSH
42699: CALL_OW 69
42703: IN
42704: ST_TO_ADDR
// end ;
42705: LD_VAR 0 2
42709: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42710: LD_INT 0
42712: PPUSH
42713: PPUSH
// list := [ ] ;
42714: LD_ADDR_VAR 0 5
42718: PUSH
42719: EMPTY
42720: ST_TO_ADDR
// case d of 0 :
42721: LD_VAR 0 3
42725: PUSH
42726: LD_INT 0
42728: DOUBLE
42729: EQUAL
42730: IFTRUE 42734
42732: GO 42867
42734: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42735: LD_ADDR_VAR 0 5
42739: PUSH
42740: LD_VAR 0 1
42744: PUSH
42745: LD_INT 4
42747: MINUS
42748: PUSH
42749: LD_VAR 0 2
42753: PUSH
42754: LD_INT 4
42756: MINUS
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: PUSH
42766: LD_VAR 0 1
42770: PUSH
42771: LD_INT 3
42773: MINUS
42774: PUSH
42775: LD_VAR 0 2
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: PUSH
42788: LD_VAR 0 1
42792: PUSH
42793: LD_INT 4
42795: PLUS
42796: PUSH
42797: LD_VAR 0 2
42801: PUSH
42802: LD_INT 4
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: LIST
42809: PUSH
42810: LD_VAR 0 1
42814: PUSH
42815: LD_INT 3
42817: PLUS
42818: PUSH
42819: LD_VAR 0 2
42823: PUSH
42824: LD_INT 3
42826: PLUS
42827: PUSH
42828: LD_INT 5
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: LIST
42835: PUSH
42836: LD_VAR 0 1
42840: PUSH
42841: LD_VAR 0 2
42845: PUSH
42846: LD_INT 4
42848: PLUS
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: LIST
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: ST_TO_ADDR
// end ; 1 :
42865: GO 43565
42867: LD_INT 1
42869: DOUBLE
42870: EQUAL
42871: IFTRUE 42875
42873: GO 43008
42875: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42876: LD_ADDR_VAR 0 5
42880: PUSH
42881: LD_VAR 0 1
42885: PUSH
42886: LD_VAR 0 2
42890: PUSH
42891: LD_INT 4
42893: MINUS
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: PUSH
42903: LD_VAR 0 1
42907: PUSH
42908: LD_INT 3
42910: MINUS
42911: PUSH
42912: LD_VAR 0 2
42916: PUSH
42917: LD_INT 3
42919: MINUS
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: LIST
42928: PUSH
42929: LD_VAR 0 1
42933: PUSH
42934: LD_INT 4
42936: MINUS
42937: PUSH
42938: LD_VAR 0 2
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: PUSH
42951: LD_VAR 0 1
42955: PUSH
42956: LD_VAR 0 2
42960: PUSH
42961: LD_INT 3
42963: PLUS
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: LIST
42972: PUSH
42973: LD_VAR 0 1
42977: PUSH
42978: LD_INT 4
42980: PLUS
42981: PUSH
42982: LD_VAR 0 2
42986: PUSH
42987: LD_INT 4
42989: PLUS
42990: PUSH
42991: LD_INT 5
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: ST_TO_ADDR
// end ; 2 :
43006: GO 43565
43008: LD_INT 2
43010: DOUBLE
43011: EQUAL
43012: IFTRUE 43016
43014: GO 43145
43016: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43017: LD_ADDR_VAR 0 5
43021: PUSH
43022: LD_VAR 0 1
43026: PUSH
43027: LD_VAR 0 2
43031: PUSH
43032: LD_INT 3
43034: MINUS
43035: PUSH
43036: LD_INT 3
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: PUSH
43044: LD_VAR 0 1
43048: PUSH
43049: LD_INT 4
43051: PLUS
43052: PUSH
43053: LD_VAR 0 2
43057: PUSH
43058: LD_INT 4
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: LIST
43065: PUSH
43066: LD_VAR 0 1
43070: PUSH
43071: LD_VAR 0 2
43075: PUSH
43076: LD_INT 4
43078: PLUS
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: PUSH
43088: LD_VAR 0 1
43092: PUSH
43093: LD_INT 3
43095: MINUS
43096: PUSH
43097: LD_VAR 0 2
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: PUSH
43110: LD_VAR 0 1
43114: PUSH
43115: LD_INT 4
43117: MINUS
43118: PUSH
43119: LD_VAR 0 2
43123: PUSH
43124: LD_INT 4
43126: MINUS
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: LIST
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: ST_TO_ADDR
// end ; 3 :
43143: GO 43565
43145: LD_INT 3
43147: DOUBLE
43148: EQUAL
43149: IFTRUE 43153
43151: GO 43286
43153: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
43154: LD_ADDR_VAR 0 5
43158: PUSH
43159: LD_VAR 0 1
43163: PUSH
43164: LD_INT 3
43166: PLUS
43167: PUSH
43168: LD_VAR 0 2
43172: PUSH
43173: LD_INT 4
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: PUSH
43181: LD_VAR 0 1
43185: PUSH
43186: LD_INT 4
43188: PLUS
43189: PUSH
43190: LD_VAR 0 2
43194: PUSH
43195: LD_INT 4
43197: PLUS
43198: PUSH
43199: LD_INT 5
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: LIST
43206: PUSH
43207: LD_VAR 0 1
43211: PUSH
43212: LD_INT 4
43214: MINUS
43215: PUSH
43216: LD_VAR 0 2
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: LIST
43228: PUSH
43229: LD_VAR 0 1
43233: PUSH
43234: LD_VAR 0 2
43238: PUSH
43239: LD_INT 4
43241: MINUS
43242: PUSH
43243: LD_INT 3
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: LIST
43250: PUSH
43251: LD_VAR 0 1
43255: PUSH
43256: LD_INT 3
43258: MINUS
43259: PUSH
43260: LD_VAR 0 2
43264: PUSH
43265: LD_INT 3
43267: MINUS
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: LIST
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: ST_TO_ADDR
// end ; 4 :
43284: GO 43565
43286: LD_INT 4
43288: DOUBLE
43289: EQUAL
43290: IFTRUE 43294
43292: GO 43427
43294: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
43295: LD_ADDR_VAR 0 5
43299: PUSH
43300: LD_VAR 0 1
43304: PUSH
43305: LD_VAR 0 2
43309: PUSH
43310: LD_INT 4
43312: PLUS
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: LIST
43321: PUSH
43322: LD_VAR 0 1
43326: PUSH
43327: LD_INT 3
43329: PLUS
43330: PUSH
43331: LD_VAR 0 2
43335: PUSH
43336: LD_INT 3
43338: PLUS
43339: PUSH
43340: LD_INT 5
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: LIST
43347: PUSH
43348: LD_VAR 0 1
43352: PUSH
43353: LD_INT 4
43355: PLUS
43356: PUSH
43357: LD_VAR 0 2
43361: PUSH
43362: LD_INT 4
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: LIST
43369: PUSH
43370: LD_VAR 0 1
43374: PUSH
43375: LD_VAR 0 2
43379: PUSH
43380: LD_INT 3
43382: MINUS
43383: PUSH
43384: LD_INT 3
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: PUSH
43392: LD_VAR 0 1
43396: PUSH
43397: LD_INT 4
43399: MINUS
43400: PUSH
43401: LD_VAR 0 2
43405: PUSH
43406: LD_INT 4
43408: MINUS
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: LIST
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: ST_TO_ADDR
// end ; 5 :
43425: GO 43565
43427: LD_INT 5
43429: DOUBLE
43430: EQUAL
43431: IFTRUE 43435
43433: GO 43564
43435: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43436: LD_ADDR_VAR 0 5
43440: PUSH
43441: LD_VAR 0 1
43445: PUSH
43446: LD_INT 4
43448: MINUS
43449: PUSH
43450: LD_VAR 0 2
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: PUSH
43463: LD_VAR 0 1
43467: PUSH
43468: LD_VAR 0 2
43472: PUSH
43473: LD_INT 4
43475: MINUS
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: LIST
43484: PUSH
43485: LD_VAR 0 1
43489: PUSH
43490: LD_INT 4
43492: PLUS
43493: PUSH
43494: LD_VAR 0 2
43498: PUSH
43499: LD_INT 4
43501: PLUS
43502: PUSH
43503: LD_INT 5
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: PUSH
43511: LD_VAR 0 1
43515: PUSH
43516: LD_INT 3
43518: PLUS
43519: PUSH
43520: LD_VAR 0 2
43524: PUSH
43525: LD_INT 4
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: LIST
43532: PUSH
43533: LD_VAR 0 1
43537: PUSH
43538: LD_VAR 0 2
43542: PUSH
43543: LD_INT 3
43545: PLUS
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: LIST
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: ST_TO_ADDR
// end ; end ;
43562: GO 43565
43564: POP
// result := list ;
43565: LD_ADDR_VAR 0 4
43569: PUSH
43570: LD_VAR 0 5
43574: ST_TO_ADDR
// end ;
43575: LD_VAR 0 4
43579: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43580: LD_INT 0
43582: PPUSH
43583: PPUSH
43584: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43585: LD_VAR 0 1
43589: NOT
43590: PUSH
43591: LD_VAR 0 2
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 3
43604: PUSH
43605: LD_INT 4
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: IN
43614: NOT
43615: OR
43616: IFFALSE 43620
// exit ;
43618: GO 43703
// tmp := [ ] ;
43620: LD_ADDR_VAR 0 5
43624: PUSH
43625: EMPTY
43626: ST_TO_ADDR
// for i in units do
43627: LD_ADDR_VAR 0 4
43631: PUSH
43632: LD_VAR 0 1
43636: PUSH
43637: FOR_IN
43638: IFFALSE 43672
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
43640: LD_ADDR_VAR 0 5
43644: PUSH
43645: LD_VAR 0 5
43649: PPUSH
43650: LD_VAR 0 4
43654: PPUSH
43655: LD_VAR 0 2
43659: PPUSH
43660: CALL_OW 259
43664: PPUSH
43665: CALL 45064 0 2
43669: ST_TO_ADDR
43670: GO 43637
43672: POP
43673: POP
// if not tmp then
43674: LD_VAR 0 5
43678: NOT
43679: IFFALSE 43683
// exit ;
43681: GO 43703
// result := SortListByListDesc ( units , tmp ) ;
43683: LD_ADDR_VAR 0 3
43687: PUSH
43688: LD_VAR 0 1
43692: PPUSH
43693: LD_VAR 0 5
43697: PPUSH
43698: CALL_OW 77
43702: ST_TO_ADDR
// end ;
43703: LD_VAR 0 3
43707: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43708: LD_INT 0
43710: PPUSH
43711: PPUSH
43712: PPUSH
// result := false ;
43713: LD_ADDR_VAR 0 3
43717: PUSH
43718: LD_INT 0
43720: ST_TO_ADDR
// if not building then
43721: LD_VAR 0 2
43725: NOT
43726: IFFALSE 43730
// exit ;
43728: GO 43868
// x := GetX ( building ) ;
43730: LD_ADDR_VAR 0 4
43734: PUSH
43735: LD_VAR 0 2
43739: PPUSH
43740: CALL_OW 250
43744: ST_TO_ADDR
// y := GetY ( building ) ;
43745: LD_ADDR_VAR 0 5
43749: PUSH
43750: LD_VAR 0 2
43754: PPUSH
43755: CALL_OW 251
43759: ST_TO_ADDR
// if not x or not y then
43760: LD_VAR 0 4
43764: NOT
43765: PUSH
43766: LD_VAR 0 5
43770: NOT
43771: OR
43772: IFFALSE 43776
// exit ;
43774: GO 43868
// if GetTaskList ( unit ) then
43776: LD_VAR 0 1
43780: PPUSH
43781: CALL_OW 437
43785: IFFALSE 43868
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43787: LD_STRING e
43789: PUSH
43790: LD_VAR 0 1
43794: PPUSH
43795: CALL_OW 437
43799: PUSH
43800: LD_INT 1
43802: ARRAY
43803: PUSH
43804: LD_INT 1
43806: ARRAY
43807: EQUAL
43808: PUSH
43809: LD_VAR 0 4
43813: PUSH
43814: LD_VAR 0 1
43818: PPUSH
43819: CALL_OW 437
43823: PUSH
43824: LD_INT 1
43826: ARRAY
43827: PUSH
43828: LD_INT 2
43830: ARRAY
43831: EQUAL
43832: AND
43833: PUSH
43834: LD_VAR 0 5
43838: PUSH
43839: LD_VAR 0 1
43843: PPUSH
43844: CALL_OW 437
43848: PUSH
43849: LD_INT 1
43851: ARRAY
43852: PUSH
43853: LD_INT 3
43855: ARRAY
43856: EQUAL
43857: AND
43858: IFFALSE 43868
// result := true end ;
43860: LD_ADDR_VAR 0 3
43864: PUSH
43865: LD_INT 1
43867: ST_TO_ADDR
// end ;
43868: LD_VAR 0 3
43872: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43873: LD_INT 0
43875: PPUSH
// result := false ;
43876: LD_ADDR_VAR 0 4
43880: PUSH
43881: LD_INT 0
43883: ST_TO_ADDR
// if GetTaskList ( unit ) then
43884: LD_VAR 0 1
43888: PPUSH
43889: CALL_OW 437
43893: IFFALSE 43976
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43895: LD_STRING M
43897: PUSH
43898: LD_VAR 0 1
43902: PPUSH
43903: CALL_OW 437
43907: PUSH
43908: LD_INT 1
43910: ARRAY
43911: PUSH
43912: LD_INT 1
43914: ARRAY
43915: EQUAL
43916: PUSH
43917: LD_VAR 0 2
43921: PUSH
43922: LD_VAR 0 1
43926: PPUSH
43927: CALL_OW 437
43931: PUSH
43932: LD_INT 1
43934: ARRAY
43935: PUSH
43936: LD_INT 2
43938: ARRAY
43939: EQUAL
43940: AND
43941: PUSH
43942: LD_VAR 0 3
43946: PUSH
43947: LD_VAR 0 1
43951: PPUSH
43952: CALL_OW 437
43956: PUSH
43957: LD_INT 1
43959: ARRAY
43960: PUSH
43961: LD_INT 3
43963: ARRAY
43964: EQUAL
43965: AND
43966: IFFALSE 43976
// result := true ;
43968: LD_ADDR_VAR 0 4
43972: PUSH
43973: LD_INT 1
43975: ST_TO_ADDR
// end ; end ;
43976: LD_VAR 0 4
43980: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43981: LD_INT 0
43983: PPUSH
43984: PPUSH
43985: PPUSH
43986: PPUSH
// if not unit or not area then
43987: LD_VAR 0 1
43991: NOT
43992: PUSH
43993: LD_VAR 0 2
43997: NOT
43998: OR
43999: IFFALSE 44003
// exit ;
44001: GO 44167
// tmp := AreaToList ( area , i ) ;
44003: LD_ADDR_VAR 0 6
44007: PUSH
44008: LD_VAR 0 2
44012: PPUSH
44013: LD_VAR 0 5
44017: PPUSH
44018: CALL_OW 517
44022: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44023: LD_ADDR_VAR 0 5
44027: PUSH
44028: DOUBLE
44029: LD_INT 1
44031: DEC
44032: ST_TO_ADDR
44033: LD_VAR 0 6
44037: PUSH
44038: LD_INT 1
44040: ARRAY
44041: PUSH
44042: FOR_TO
44043: IFFALSE 44165
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44045: LD_ADDR_VAR 0 7
44049: PUSH
44050: LD_VAR 0 6
44054: PUSH
44055: LD_INT 1
44057: ARRAY
44058: PUSH
44059: LD_VAR 0 5
44063: ARRAY
44064: PUSH
44065: LD_VAR 0 6
44069: PUSH
44070: LD_INT 2
44072: ARRAY
44073: PUSH
44074: LD_VAR 0 5
44078: ARRAY
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
44084: LD_VAR 0 7
44088: PUSH
44089: LD_INT 1
44091: ARRAY
44092: PPUSH
44093: LD_VAR 0 7
44097: PUSH
44098: LD_INT 2
44100: ARRAY
44101: PPUSH
44102: CALL_OW 428
44106: PUSH
44107: LD_INT 0
44109: EQUAL
44110: IFFALSE 44163
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
44112: LD_VAR 0 1
44116: PPUSH
44117: LD_VAR 0 7
44121: PUSH
44122: LD_INT 1
44124: ARRAY
44125: PPUSH
44126: LD_VAR 0 7
44130: PUSH
44131: LD_INT 2
44133: ARRAY
44134: PPUSH
44135: LD_VAR 0 3
44139: PPUSH
44140: CALL_OW 48
// result := IsPlaced ( unit ) ;
44144: LD_ADDR_VAR 0 4
44148: PUSH
44149: LD_VAR 0 1
44153: PPUSH
44154: CALL_OW 305
44158: ST_TO_ADDR
// exit ;
44159: POP
44160: POP
44161: GO 44167
// end ; end ;
44163: GO 44042
44165: POP
44166: POP
// end ;
44167: LD_VAR 0 4
44171: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
44172: LD_INT 0
44174: PPUSH
44175: PPUSH
44176: PPUSH
// if not side or side > 8 then
44177: LD_VAR 0 1
44181: NOT
44182: PUSH
44183: LD_VAR 0 1
44187: PUSH
44188: LD_INT 8
44190: GREATER
44191: OR
44192: IFFALSE 44196
// exit ;
44194: GO 44383
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
44196: LD_ADDR_VAR 0 4
44200: PUSH
44201: LD_INT 22
44203: PUSH
44204: LD_VAR 0 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 21
44215: PUSH
44216: LD_INT 3
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PPUSH
44227: CALL_OW 69
44231: ST_TO_ADDR
// if not tmp then
44232: LD_VAR 0 4
44236: NOT
44237: IFFALSE 44241
// exit ;
44239: GO 44383
// enable_addtolog := true ;
44241: LD_ADDR_OWVAR 81
44245: PUSH
44246: LD_INT 1
44248: ST_TO_ADDR
// AddToLog ( [ ) ;
44249: LD_STRING [
44251: PPUSH
44252: CALL_OW 561
// for i in tmp do
44256: LD_ADDR_VAR 0 3
44260: PUSH
44261: LD_VAR 0 4
44265: PUSH
44266: FOR_IN
44267: IFFALSE 44374
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
44269: LD_STRING [
44271: PUSH
44272: LD_VAR 0 3
44276: PPUSH
44277: CALL_OW 266
44281: STR
44282: PUSH
44283: LD_STRING , 
44285: STR
44286: PUSH
44287: LD_VAR 0 3
44291: PPUSH
44292: CALL_OW 250
44296: STR
44297: PUSH
44298: LD_STRING , 
44300: STR
44301: PUSH
44302: LD_VAR 0 3
44306: PPUSH
44307: CALL_OW 251
44311: STR
44312: PUSH
44313: LD_STRING , 
44315: STR
44316: PUSH
44317: LD_VAR 0 3
44321: PPUSH
44322: CALL_OW 254
44326: STR
44327: PUSH
44328: LD_STRING , 
44330: STR
44331: PUSH
44332: LD_VAR 0 3
44336: PPUSH
44337: LD_INT 1
44339: PPUSH
44340: CALL_OW 268
44344: STR
44345: PUSH
44346: LD_STRING , 
44348: STR
44349: PUSH
44350: LD_VAR 0 3
44354: PPUSH
44355: LD_INT 2
44357: PPUSH
44358: CALL_OW 268
44362: STR
44363: PUSH
44364: LD_STRING ],
44366: STR
44367: PPUSH
44368: CALL_OW 561
// end ;
44372: GO 44266
44374: POP
44375: POP
// AddToLog ( ]; ) ;
44376: LD_STRING ];
44378: PPUSH
44379: CALL_OW 561
// end ;
44383: LD_VAR 0 2
44387: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
44388: LD_INT 0
44390: PPUSH
44391: PPUSH
44392: PPUSH
44393: PPUSH
44394: PPUSH
// if not area or not rate or not max then
44395: LD_VAR 0 1
44399: NOT
44400: PUSH
44401: LD_VAR 0 2
44405: NOT
44406: OR
44407: PUSH
44408: LD_VAR 0 4
44412: NOT
44413: OR
44414: IFFALSE 44418
// exit ;
44416: GO 44607
// while 1 do
44418: LD_INT 1
44420: IFFALSE 44607
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44422: LD_ADDR_VAR 0 9
44426: PUSH
44427: LD_VAR 0 1
44431: PPUSH
44432: LD_INT 1
44434: PPUSH
44435: CALL_OW 287
44439: PUSH
44440: LD_INT 10
44442: MUL
44443: ST_TO_ADDR
// r := rate / 10 ;
44444: LD_ADDR_VAR 0 7
44448: PUSH
44449: LD_VAR 0 2
44453: PUSH
44454: LD_INT 10
44456: DIVREAL
44457: ST_TO_ADDR
// time := 1 1$00 ;
44458: LD_ADDR_VAR 0 8
44462: PUSH
44463: LD_INT 2100
44465: ST_TO_ADDR
// if amount < min then
44466: LD_VAR 0 9
44470: PUSH
44471: LD_VAR 0 3
44475: LESS
44476: IFFALSE 44494
// r := r * 2 else
44478: LD_ADDR_VAR 0 7
44482: PUSH
44483: LD_VAR 0 7
44487: PUSH
44488: LD_INT 2
44490: MUL
44491: ST_TO_ADDR
44492: GO 44520
// if amount > max then
44494: LD_VAR 0 9
44498: PUSH
44499: LD_VAR 0 4
44503: GREATER
44504: IFFALSE 44520
// r := r / 2 ;
44506: LD_ADDR_VAR 0 7
44510: PUSH
44511: LD_VAR 0 7
44515: PUSH
44516: LD_INT 2
44518: DIVREAL
44519: ST_TO_ADDR
// time := time / r ;
44520: LD_ADDR_VAR 0 8
44524: PUSH
44525: LD_VAR 0 8
44529: PUSH
44530: LD_VAR 0 7
44534: DIVREAL
44535: ST_TO_ADDR
// if time < 0 then
44536: LD_VAR 0 8
44540: PUSH
44541: LD_INT 0
44543: LESS
44544: IFFALSE 44561
// time := time * - 1 ;
44546: LD_ADDR_VAR 0 8
44550: PUSH
44551: LD_VAR 0 8
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: MUL
44560: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
44561: LD_VAR 0 8
44565: PUSH
44566: LD_INT 35
44568: PPUSH
44569: LD_INT 875
44571: PPUSH
44572: CALL_OW 12
44576: PLUS
44577: PPUSH
44578: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44582: LD_INT 1
44584: PPUSH
44585: LD_INT 5
44587: PPUSH
44588: CALL_OW 12
44592: PPUSH
44593: LD_VAR 0 1
44597: PPUSH
44598: LD_INT 1
44600: PPUSH
44601: CALL_OW 55
// end ;
44605: GO 44418
// end ;
44607: LD_VAR 0 5
44611: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44612: LD_INT 0
44614: PPUSH
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
44621: PPUSH
// if not turrets or not factories then
44622: LD_VAR 0 1
44626: NOT
44627: PUSH
44628: LD_VAR 0 2
44632: NOT
44633: OR
44634: IFFALSE 44638
// exit ;
44636: GO 44945
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44638: LD_ADDR_VAR 0 10
44642: PUSH
44643: LD_INT 5
44645: PUSH
44646: LD_INT 6
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 4
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 3
44665: PUSH
44666: LD_INT 5
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 24
44680: PUSH
44681: LD_INT 25
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 23
44690: PUSH
44691: LD_INT 27
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 42
44704: PUSH
44705: LD_INT 43
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 44
44714: PUSH
44715: LD_INT 46
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 45
44724: PUSH
44725: LD_INT 47
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: LIST
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// result := [ ] ;
44742: LD_ADDR_VAR 0 3
44746: PUSH
44747: EMPTY
44748: ST_TO_ADDR
// for i in turrets do
44749: LD_ADDR_VAR 0 4
44753: PUSH
44754: LD_VAR 0 1
44758: PUSH
44759: FOR_IN
44760: IFFALSE 44943
// begin nat := GetNation ( i ) ;
44762: LD_ADDR_VAR 0 7
44766: PUSH
44767: LD_VAR 0 4
44771: PPUSH
44772: CALL_OW 248
44776: ST_TO_ADDR
// weapon := 0 ;
44777: LD_ADDR_VAR 0 8
44781: PUSH
44782: LD_INT 0
44784: ST_TO_ADDR
// if not nat then
44785: LD_VAR 0 7
44789: NOT
44790: IFFALSE 44794
// continue ;
44792: GO 44759
// for j in list [ nat ] do
44794: LD_ADDR_VAR 0 5
44798: PUSH
44799: LD_VAR 0 10
44803: PUSH
44804: LD_VAR 0 7
44808: ARRAY
44809: PUSH
44810: FOR_IN
44811: IFFALSE 44852
// if GetBWeapon ( i ) = j [ 1 ] then
44813: LD_VAR 0 4
44817: PPUSH
44818: CALL_OW 269
44822: PUSH
44823: LD_VAR 0 5
44827: PUSH
44828: LD_INT 1
44830: ARRAY
44831: EQUAL
44832: IFFALSE 44850
// begin weapon := j [ 2 ] ;
44834: LD_ADDR_VAR 0 8
44838: PUSH
44839: LD_VAR 0 5
44843: PUSH
44844: LD_INT 2
44846: ARRAY
44847: ST_TO_ADDR
// break ;
44848: GO 44852
// end ;
44850: GO 44810
44852: POP
44853: POP
// if not weapon then
44854: LD_VAR 0 8
44858: NOT
44859: IFFALSE 44863
// continue ;
44861: GO 44759
// for k in factories do
44863: LD_ADDR_VAR 0 6
44867: PUSH
44868: LD_VAR 0 2
44872: PUSH
44873: FOR_IN
44874: IFFALSE 44939
// begin weapons := AvailableWeaponList ( k ) ;
44876: LD_ADDR_VAR 0 9
44880: PUSH
44881: LD_VAR 0 6
44885: PPUSH
44886: CALL_OW 478
44890: ST_TO_ADDR
// if not weapons then
44891: LD_VAR 0 9
44895: NOT
44896: IFFALSE 44900
// continue ;
44898: GO 44873
// if weapon in weapons then
44900: LD_VAR 0 8
44904: PUSH
44905: LD_VAR 0 9
44909: IN
44910: IFFALSE 44937
// begin result := [ i , weapon ] ;
44912: LD_ADDR_VAR 0 3
44916: PUSH
44917: LD_VAR 0 4
44921: PUSH
44922: LD_VAR 0 8
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: ST_TO_ADDR
// exit ;
44931: POP
44932: POP
44933: POP
44934: POP
44935: GO 44945
// end ; end ;
44937: GO 44873
44939: POP
44940: POP
// end ;
44941: GO 44759
44943: POP
44944: POP
// end ;
44945: LD_VAR 0 3
44949: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44950: LD_INT 0
44952: PPUSH
// if not side or side > 8 then
44953: LD_VAR 0 3
44957: NOT
44958: PUSH
44959: LD_VAR 0 3
44963: PUSH
44964: LD_INT 8
44966: GREATER
44967: OR
44968: IFFALSE 44972
// exit ;
44970: GO 45031
// if not range then
44972: LD_VAR 0 4
44976: NOT
44977: IFFALSE 44988
// range := - 12 ;
44979: LD_ADDR_VAR 0 4
44983: PUSH
44984: LD_INT 12
44986: NEG
44987: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44988: LD_VAR 0 1
44992: PPUSH
44993: LD_VAR 0 2
44997: PPUSH
44998: LD_VAR 0 3
45002: PPUSH
45003: LD_VAR 0 4
45007: PPUSH
45008: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
45012: LD_VAR 0 1
45016: PPUSH
45017: LD_VAR 0 2
45021: PPUSH
45022: LD_VAR 0 3
45026: PPUSH
45027: CALL_OW 331
// end ;
45031: LD_VAR 0 5
45035: RET
// export function Video ( mode ) ; begin
45036: LD_INT 0
45038: PPUSH
// ingame_video = mode ;
45039: LD_ADDR_OWVAR 52
45043: PUSH
45044: LD_VAR 0 1
45048: ST_TO_ADDR
// interface_hidden = mode ;
45049: LD_ADDR_OWVAR 54
45053: PUSH
45054: LD_VAR 0 1
45058: ST_TO_ADDR
// end ;
45059: LD_VAR 0 2
45063: RET
// export function Join ( array , element ) ; begin
45064: LD_INT 0
45066: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45067: LD_ADDR_VAR 0 3
45071: PUSH
45072: LD_VAR 0 1
45076: PPUSH
45077: LD_VAR 0 1
45081: PUSH
45082: LD_INT 1
45084: PLUS
45085: PPUSH
45086: LD_VAR 0 2
45090: PPUSH
45091: CALL_OW 1
45095: ST_TO_ADDR
// end ;
45096: LD_VAR 0 3
45100: RET
// export function JoinUnion ( array , element ) ; begin
45101: LD_INT 0
45103: PPUSH
// result := array union element ;
45104: LD_ADDR_VAR 0 3
45108: PUSH
45109: LD_VAR 0 1
45113: PUSH
45114: LD_VAR 0 2
45118: UNION
45119: ST_TO_ADDR
// end ;
45120: LD_VAR 0 3
45124: RET
// export function GetBehemoths ( side ) ; begin
45125: LD_INT 0
45127: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
45128: LD_ADDR_VAR 0 2
45132: PUSH
45133: LD_INT 22
45135: PUSH
45136: LD_VAR 0 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 31
45147: PUSH
45148: LD_INT 25
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PPUSH
45159: CALL_OW 69
45163: ST_TO_ADDR
// end ;
45164: LD_VAR 0 2
45168: RET
// export function Shuffle ( array ) ; var i , index ; begin
45169: LD_INT 0
45171: PPUSH
45172: PPUSH
45173: PPUSH
// result := [ ] ;
45174: LD_ADDR_VAR 0 2
45178: PUSH
45179: EMPTY
45180: ST_TO_ADDR
// if not array then
45181: LD_VAR 0 1
45185: NOT
45186: IFFALSE 45190
// exit ;
45188: GO 45289
// Randomize ;
45190: CALL_OW 10
// for i = array downto 1 do
45194: LD_ADDR_VAR 0 3
45198: PUSH
45199: DOUBLE
45200: LD_VAR 0 1
45204: INC
45205: ST_TO_ADDR
45206: LD_INT 1
45208: PUSH
45209: FOR_DOWNTO
45210: IFFALSE 45287
// begin index := rand ( 1 , array ) ;
45212: LD_ADDR_VAR 0 4
45216: PUSH
45217: LD_INT 1
45219: PPUSH
45220: LD_VAR 0 1
45224: PPUSH
45225: CALL_OW 12
45229: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
45230: LD_ADDR_VAR 0 2
45234: PUSH
45235: LD_VAR 0 2
45239: PPUSH
45240: LD_VAR 0 2
45244: PUSH
45245: LD_INT 1
45247: PLUS
45248: PPUSH
45249: LD_VAR 0 1
45253: PUSH
45254: LD_VAR 0 4
45258: ARRAY
45259: PPUSH
45260: CALL_OW 2
45264: ST_TO_ADDR
// array := Delete ( array , index ) ;
45265: LD_ADDR_VAR 0 1
45269: PUSH
45270: LD_VAR 0 1
45274: PPUSH
45275: LD_VAR 0 4
45279: PPUSH
45280: CALL_OW 3
45284: ST_TO_ADDR
// end ;
45285: GO 45209
45287: POP
45288: POP
// end ;
45289: LD_VAR 0 2
45293: RET
// export function GetBaseMaterials ( base ) ; begin
45294: LD_INT 0
45296: PPUSH
// result := [ 0 , 0 , 0 ] ;
45297: LD_ADDR_VAR 0 2
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: LIST
45315: ST_TO_ADDR
// if not base then
45316: LD_VAR 0 1
45320: NOT
45321: IFFALSE 45325
// exit ;
45323: GO 45374
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
45325: LD_ADDR_VAR 0 2
45329: PUSH
45330: LD_VAR 0 1
45334: PPUSH
45335: LD_INT 1
45337: PPUSH
45338: CALL_OW 275
45342: PUSH
45343: LD_VAR 0 1
45347: PPUSH
45348: LD_INT 2
45350: PPUSH
45351: CALL_OW 275
45355: PUSH
45356: LD_VAR 0 1
45360: PPUSH
45361: LD_INT 3
45363: PPUSH
45364: CALL_OW 275
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: LIST
45373: ST_TO_ADDR
// end ;
45374: LD_VAR 0 2
45378: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
45379: LD_INT 0
45381: PPUSH
45382: PPUSH
// result := array ;
45383: LD_ADDR_VAR 0 3
45387: PUSH
45388: LD_VAR 0 1
45392: ST_TO_ADDR
// if size >= result then
45393: LD_VAR 0 2
45397: PUSH
45398: LD_VAR 0 3
45402: GREATEREQUAL
45403: IFFALSE 45407
// exit ;
45405: GO 45457
// if size then
45407: LD_VAR 0 2
45411: IFFALSE 45457
// for i := array downto size do
45413: LD_ADDR_VAR 0 4
45417: PUSH
45418: DOUBLE
45419: LD_VAR 0 1
45423: INC
45424: ST_TO_ADDR
45425: LD_VAR 0 2
45429: PUSH
45430: FOR_DOWNTO
45431: IFFALSE 45455
// result := Delete ( result , result ) ;
45433: LD_ADDR_VAR 0 3
45437: PUSH
45438: LD_VAR 0 3
45442: PPUSH
45443: LD_VAR 0 3
45447: PPUSH
45448: CALL_OW 3
45452: ST_TO_ADDR
45453: GO 45430
45455: POP
45456: POP
// end ;
45457: LD_VAR 0 3
45461: RET
// export function ComExit ( unit ) ; var tmp ; begin
45462: LD_INT 0
45464: PPUSH
45465: PPUSH
// if not IsInUnit ( unit ) then
45466: LD_VAR 0 1
45470: PPUSH
45471: CALL_OW 310
45475: NOT
45476: IFFALSE 45480
// exit ;
45478: GO 45540
// tmp := IsInUnit ( unit ) ;
45480: LD_ADDR_VAR 0 3
45484: PUSH
45485: LD_VAR 0 1
45489: PPUSH
45490: CALL_OW 310
45494: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45495: LD_VAR 0 3
45499: PPUSH
45500: CALL_OW 247
45504: PUSH
45505: LD_INT 2
45507: EQUAL
45508: IFFALSE 45521
// ComExitVehicle ( unit ) else
45510: LD_VAR 0 1
45514: PPUSH
45515: CALL_OW 121
45519: GO 45530
// ComExitBuilding ( unit ) ;
45521: LD_VAR 0 1
45525: PPUSH
45526: CALL_OW 122
// result := tmp ;
45530: LD_ADDR_VAR 0 2
45534: PUSH
45535: LD_VAR 0 3
45539: ST_TO_ADDR
// end ;
45540: LD_VAR 0 2
45544: RET
// export function ComExitAll ( units ) ; var i ; begin
45545: LD_INT 0
45547: PPUSH
45548: PPUSH
// if not units then
45549: LD_VAR 0 1
45553: NOT
45554: IFFALSE 45558
// exit ;
45556: GO 45584
// for i in units do
45558: LD_ADDR_VAR 0 3
45562: PUSH
45563: LD_VAR 0 1
45567: PUSH
45568: FOR_IN
45569: IFFALSE 45582
// ComExit ( i ) ;
45571: LD_VAR 0 3
45575: PPUSH
45576: CALL 45462 0 1
45580: GO 45568
45582: POP
45583: POP
// end ;
45584: LD_VAR 0 2
45588: RET
// export function ResetHc ; begin
45589: LD_INT 0
45591: PPUSH
// InitHc ;
45592: CALL_OW 19
// hc_importance := 0 ;
45596: LD_ADDR_OWVAR 32
45600: PUSH
45601: LD_INT 0
45603: ST_TO_ADDR
// end ;
45604: LD_VAR 0 1
45608: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45609: LD_INT 0
45611: PPUSH
45612: PPUSH
45613: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45614: LD_ADDR_VAR 0 6
45618: PUSH
45619: LD_VAR 0 1
45623: PUSH
45624: LD_VAR 0 3
45628: PLUS
45629: PUSH
45630: LD_INT 2
45632: DIV
45633: ST_TO_ADDR
// if _x < 0 then
45634: LD_VAR 0 6
45638: PUSH
45639: LD_INT 0
45641: LESS
45642: IFFALSE 45659
// _x := _x * - 1 ;
45644: LD_ADDR_VAR 0 6
45648: PUSH
45649: LD_VAR 0 6
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: MUL
45658: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45659: LD_ADDR_VAR 0 7
45663: PUSH
45664: LD_VAR 0 2
45668: PUSH
45669: LD_VAR 0 4
45673: PLUS
45674: PUSH
45675: LD_INT 2
45677: DIV
45678: ST_TO_ADDR
// if _y < 0 then
45679: LD_VAR 0 7
45683: PUSH
45684: LD_INT 0
45686: LESS
45687: IFFALSE 45704
// _y := _y * - 1 ;
45689: LD_ADDR_VAR 0 7
45693: PUSH
45694: LD_VAR 0 7
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: MUL
45703: ST_TO_ADDR
// result := [ _x , _y ] ;
45704: LD_ADDR_VAR 0 5
45708: PUSH
45709: LD_VAR 0 6
45713: PUSH
45714: LD_VAR 0 7
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: ST_TO_ADDR
// end ;
45723: LD_VAR 0 5
45727: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45728: LD_INT 0
45730: PPUSH
45731: PPUSH
45732: PPUSH
45733: PPUSH
// task := GetTaskList ( unit ) ;
45734: LD_ADDR_VAR 0 7
45738: PUSH
45739: LD_VAR 0 1
45743: PPUSH
45744: CALL_OW 437
45748: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45749: LD_VAR 0 7
45753: NOT
45754: PUSH
45755: LD_VAR 0 1
45759: PPUSH
45760: LD_VAR 0 2
45764: PPUSH
45765: CALL_OW 308
45769: NOT
45770: AND
45771: IFFALSE 45775
// exit ;
45773: GO 45893
// if IsInArea ( unit , area ) then
45775: LD_VAR 0 1
45779: PPUSH
45780: LD_VAR 0 2
45784: PPUSH
45785: CALL_OW 308
45789: IFFALSE 45807
// begin ComMoveToArea ( unit , goAway ) ;
45791: LD_VAR 0 1
45795: PPUSH
45796: LD_VAR 0 3
45800: PPUSH
45801: CALL_OW 113
// exit ;
45805: GO 45893
// end ; if task [ 1 ] [ 1 ] <> M then
45807: LD_VAR 0 7
45811: PUSH
45812: LD_INT 1
45814: ARRAY
45815: PUSH
45816: LD_INT 1
45818: ARRAY
45819: PUSH
45820: LD_STRING M
45822: NONEQUAL
45823: IFFALSE 45827
// exit ;
45825: GO 45893
// x := task [ 1 ] [ 2 ] ;
45827: LD_ADDR_VAR 0 5
45831: PUSH
45832: LD_VAR 0 7
45836: PUSH
45837: LD_INT 1
45839: ARRAY
45840: PUSH
45841: LD_INT 2
45843: ARRAY
45844: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45845: LD_ADDR_VAR 0 6
45849: PUSH
45850: LD_VAR 0 7
45854: PUSH
45855: LD_INT 1
45857: ARRAY
45858: PUSH
45859: LD_INT 3
45861: ARRAY
45862: ST_TO_ADDR
// if InArea ( x , y , area ) then
45863: LD_VAR 0 5
45867: PPUSH
45868: LD_VAR 0 6
45872: PPUSH
45873: LD_VAR 0 2
45877: PPUSH
45878: CALL_OW 309
45882: IFFALSE 45893
// ComStop ( unit ) ;
45884: LD_VAR 0 1
45888: PPUSH
45889: CALL_OW 141
// end ;
45893: LD_VAR 0 4
45897: RET
// export function Abs ( value ) ; begin
45898: LD_INT 0
45900: PPUSH
// result := value ;
45901: LD_ADDR_VAR 0 2
45905: PUSH
45906: LD_VAR 0 1
45910: ST_TO_ADDR
// if value < 0 then
45911: LD_VAR 0 1
45915: PUSH
45916: LD_INT 0
45918: LESS
45919: IFFALSE 45936
// result := value * - 1 ;
45921: LD_ADDR_VAR 0 2
45925: PUSH
45926: LD_VAR 0 1
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: MUL
45935: ST_TO_ADDR
// end ;
45936: LD_VAR 0 2
45940: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45941: LD_INT 0
45943: PPUSH
45944: PPUSH
45945: PPUSH
45946: PPUSH
45947: PPUSH
45948: PPUSH
45949: PPUSH
45950: PPUSH
// if not unit or not building then
45951: LD_VAR 0 1
45955: NOT
45956: PUSH
45957: LD_VAR 0 2
45961: NOT
45962: OR
45963: IFFALSE 45967
// exit ;
45965: GO 46193
// x := GetX ( building ) ;
45967: LD_ADDR_VAR 0 4
45971: PUSH
45972: LD_VAR 0 2
45976: PPUSH
45977: CALL_OW 250
45981: ST_TO_ADDR
// y := GetY ( building ) ;
45982: LD_ADDR_VAR 0 6
45986: PUSH
45987: LD_VAR 0 2
45991: PPUSH
45992: CALL_OW 251
45996: ST_TO_ADDR
// d := GetDir ( building ) ;
45997: LD_ADDR_VAR 0 8
46001: PUSH
46002: LD_VAR 0 2
46006: PPUSH
46007: CALL_OW 254
46011: ST_TO_ADDR
// r := 4 ;
46012: LD_ADDR_VAR 0 9
46016: PUSH
46017: LD_INT 4
46019: ST_TO_ADDR
// for i := 1 to 5 do
46020: LD_ADDR_VAR 0 10
46024: PUSH
46025: DOUBLE
46026: LD_INT 1
46028: DEC
46029: ST_TO_ADDR
46030: LD_INT 5
46032: PUSH
46033: FOR_TO
46034: IFFALSE 46191
// begin _x := ShiftX ( x , d , r + i ) ;
46036: LD_ADDR_VAR 0 5
46040: PUSH
46041: LD_VAR 0 4
46045: PPUSH
46046: LD_VAR 0 8
46050: PPUSH
46051: LD_VAR 0 9
46055: PUSH
46056: LD_VAR 0 10
46060: PLUS
46061: PPUSH
46062: CALL_OW 272
46066: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46067: LD_ADDR_VAR 0 7
46071: PUSH
46072: LD_VAR 0 6
46076: PPUSH
46077: LD_VAR 0 8
46081: PPUSH
46082: LD_VAR 0 9
46086: PUSH
46087: LD_VAR 0 10
46091: PLUS
46092: PPUSH
46093: CALL_OW 273
46097: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
46098: LD_VAR 0 5
46102: PPUSH
46103: LD_VAR 0 7
46107: PPUSH
46108: CALL_OW 488
46112: PUSH
46113: LD_VAR 0 5
46117: PPUSH
46118: LD_VAR 0 7
46122: PPUSH
46123: CALL_OW 428
46127: PPUSH
46128: CALL_OW 247
46132: PUSH
46133: LD_INT 3
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: IN
46143: NOT
46144: AND
46145: IFFALSE 46189
// begin ComMoveXY ( unit , _x , _y ) ;
46147: LD_VAR 0 1
46151: PPUSH
46152: LD_VAR 0 5
46156: PPUSH
46157: LD_VAR 0 7
46161: PPUSH
46162: CALL_OW 111
// result := [ _x , _y ] ;
46166: LD_ADDR_VAR 0 3
46170: PUSH
46171: LD_VAR 0 5
46175: PUSH
46176: LD_VAR 0 7
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: ST_TO_ADDR
// exit ;
46185: POP
46186: POP
46187: GO 46193
// end ; end ;
46189: GO 46033
46191: POP
46192: POP
// end ;
46193: LD_VAR 0 3
46197: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
46198: LD_INT 0
46200: PPUSH
46201: PPUSH
46202: PPUSH
// result := 0 ;
46203: LD_ADDR_VAR 0 3
46207: PUSH
46208: LD_INT 0
46210: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
46211: LD_VAR 0 1
46215: PUSH
46216: LD_INT 0
46218: LESS
46219: PUSH
46220: LD_VAR 0 1
46224: PUSH
46225: LD_INT 8
46227: GREATER
46228: OR
46229: PUSH
46230: LD_VAR 0 2
46234: PUSH
46235: LD_INT 0
46237: LESS
46238: OR
46239: PUSH
46240: LD_VAR 0 2
46244: PUSH
46245: LD_INT 8
46247: GREATER
46248: OR
46249: IFFALSE 46253
// exit ;
46251: GO 46328
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
46253: LD_ADDR_VAR 0 4
46257: PUSH
46258: LD_INT 22
46260: PUSH
46261: LD_VAR 0 2
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PPUSH
46270: CALL_OW 69
46274: PUSH
46275: FOR_IN
46276: IFFALSE 46326
// begin un := UnitShoot ( i ) ;
46278: LD_ADDR_VAR 0 5
46282: PUSH
46283: LD_VAR 0 4
46287: PPUSH
46288: CALL_OW 504
46292: ST_TO_ADDR
// if GetSide ( un ) = side1 then
46293: LD_VAR 0 5
46297: PPUSH
46298: CALL_OW 255
46302: PUSH
46303: LD_VAR 0 1
46307: EQUAL
46308: IFFALSE 46324
// begin result := un ;
46310: LD_ADDR_VAR 0 3
46314: PUSH
46315: LD_VAR 0 5
46319: ST_TO_ADDR
// exit ;
46320: POP
46321: POP
46322: GO 46328
// end ; end ;
46324: GO 46275
46326: POP
46327: POP
// end ;
46328: LD_VAR 0 3
46332: RET
// export function GetCargoBay ( units ) ; begin
46333: LD_INT 0
46335: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
46336: LD_ADDR_VAR 0 2
46340: PUSH
46341: LD_VAR 0 1
46345: PPUSH
46346: LD_INT 2
46348: PUSH
46349: LD_INT 34
46351: PUSH
46352: LD_INT 12
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 34
46361: PUSH
46362: LD_INT 51
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 34
46371: PUSH
46372: LD_INT 32
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 34
46381: PUSH
46382: LD_INT 89
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: PPUSH
46396: CALL_OW 72
46400: ST_TO_ADDR
// end ;
46401: LD_VAR 0 2
46405: RET
// export function Negate ( value ) ; begin
46406: LD_INT 0
46408: PPUSH
// result := not value ;
46409: LD_ADDR_VAR 0 2
46413: PUSH
46414: LD_VAR 0 1
46418: NOT
46419: ST_TO_ADDR
// end ;
46420: LD_VAR 0 2
46424: RET
// export function Inc ( value ) ; begin
46425: LD_INT 0
46427: PPUSH
// result := value + 1 ;
46428: LD_ADDR_VAR 0 2
46432: PUSH
46433: LD_VAR 0 1
46437: PUSH
46438: LD_INT 1
46440: PLUS
46441: ST_TO_ADDR
// end ;
46442: LD_VAR 0 2
46446: RET
// export function Dec ( value ) ; begin
46447: LD_INT 0
46449: PPUSH
// result := value - 1 ;
46450: LD_ADDR_VAR 0 2
46454: PUSH
46455: LD_VAR 0 1
46459: PUSH
46460: LD_INT 1
46462: MINUS
46463: ST_TO_ADDR
// end ;
46464: LD_VAR 0 2
46468: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46469: LD_INT 0
46471: PPUSH
46472: PPUSH
46473: PPUSH
46474: PPUSH
46475: PPUSH
46476: PPUSH
46477: PPUSH
46478: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46479: LD_VAR 0 1
46483: PPUSH
46484: LD_VAR 0 2
46488: PPUSH
46489: CALL_OW 488
46493: NOT
46494: PUSH
46495: LD_VAR 0 3
46499: PPUSH
46500: LD_VAR 0 4
46504: PPUSH
46505: CALL_OW 488
46509: NOT
46510: OR
46511: IFFALSE 46524
// begin result := - 1 ;
46513: LD_ADDR_VAR 0 5
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: ST_TO_ADDR
// exit ;
46522: GO 46759
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46524: LD_ADDR_VAR 0 12
46528: PUSH
46529: LD_VAR 0 1
46533: PPUSH
46534: LD_VAR 0 2
46538: PPUSH
46539: LD_VAR 0 3
46543: PPUSH
46544: LD_VAR 0 4
46548: PPUSH
46549: CALL 45609 0 4
46553: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46554: LD_ADDR_VAR 0 11
46558: PUSH
46559: LD_VAR 0 1
46563: PPUSH
46564: LD_VAR 0 2
46568: PPUSH
46569: LD_VAR 0 12
46573: PUSH
46574: LD_INT 1
46576: ARRAY
46577: PPUSH
46578: LD_VAR 0 12
46582: PUSH
46583: LD_INT 2
46585: ARRAY
46586: PPUSH
46587: CALL_OW 298
46591: ST_TO_ADDR
// distance := 9999 ;
46592: LD_ADDR_VAR 0 10
46596: PUSH
46597: LD_INT 9999
46599: ST_TO_ADDR
// for i := 0 to 5 do
46600: LD_ADDR_VAR 0 6
46604: PUSH
46605: DOUBLE
46606: LD_INT 0
46608: DEC
46609: ST_TO_ADDR
46610: LD_INT 5
46612: PUSH
46613: FOR_TO
46614: IFFALSE 46757
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46616: LD_ADDR_VAR 0 7
46620: PUSH
46621: LD_VAR 0 1
46625: PPUSH
46626: LD_VAR 0 6
46630: PPUSH
46631: LD_VAR 0 11
46635: PPUSH
46636: CALL_OW 272
46640: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46641: LD_ADDR_VAR 0 8
46645: PUSH
46646: LD_VAR 0 2
46650: PPUSH
46651: LD_VAR 0 6
46655: PPUSH
46656: LD_VAR 0 11
46660: PPUSH
46661: CALL_OW 273
46665: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46666: LD_VAR 0 7
46670: PPUSH
46671: LD_VAR 0 8
46675: PPUSH
46676: CALL_OW 488
46680: NOT
46681: IFFALSE 46685
// continue ;
46683: GO 46613
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
46685: LD_ADDR_VAR 0 9
46689: PUSH
46690: LD_VAR 0 12
46694: PUSH
46695: LD_INT 1
46697: ARRAY
46698: PPUSH
46699: LD_VAR 0 12
46703: PUSH
46704: LD_INT 2
46706: ARRAY
46707: PPUSH
46708: LD_VAR 0 7
46712: PPUSH
46713: LD_VAR 0 8
46717: PPUSH
46718: CALL_OW 298
46722: ST_TO_ADDR
// if tmp < distance then
46723: LD_VAR 0 9
46727: PUSH
46728: LD_VAR 0 10
46732: LESS
46733: IFFALSE 46755
// begin result := i ;
46735: LD_ADDR_VAR 0 5
46739: PUSH
46740: LD_VAR 0 6
46744: ST_TO_ADDR
// distance := tmp ;
46745: LD_ADDR_VAR 0 10
46749: PUSH
46750: LD_VAR 0 9
46754: ST_TO_ADDR
// end ; end ;
46755: GO 46613
46757: POP
46758: POP
// end ;
46759: LD_VAR 0 5
46763: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46764: LD_INT 0
46766: PPUSH
46767: PPUSH
// if not driver or not IsInUnit ( driver ) then
46768: LD_VAR 0 1
46772: NOT
46773: PUSH
46774: LD_VAR 0 1
46778: PPUSH
46779: CALL_OW 310
46783: NOT
46784: OR
46785: IFFALSE 46789
// exit ;
46787: GO 46879
// vehicle := IsInUnit ( driver ) ;
46789: LD_ADDR_VAR 0 3
46793: PUSH
46794: LD_VAR 0 1
46798: PPUSH
46799: CALL_OW 310
46803: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46804: LD_VAR 0 1
46808: PPUSH
46809: LD_STRING \
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: PUSH
46839: LD_STRING E
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_VAR 0 3
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PPUSH
46875: CALL_OW 446
// end ;
46879: LD_VAR 0 2
46883: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46884: LD_INT 0
46886: PPUSH
46887: PPUSH
// if not driver or not IsInUnit ( driver ) then
46888: LD_VAR 0 1
46892: NOT
46893: PUSH
46894: LD_VAR 0 1
46898: PPUSH
46899: CALL_OW 310
46903: NOT
46904: OR
46905: IFFALSE 46909
// exit ;
46907: GO 46999
// vehicle := IsInUnit ( driver ) ;
46909: LD_ADDR_VAR 0 3
46913: PUSH
46914: LD_VAR 0 1
46918: PPUSH
46919: CALL_OW 310
46923: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46924: LD_VAR 0 1
46928: PPUSH
46929: LD_STRING \
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: PUSH
46959: LD_STRING E
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_VAR 0 3
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PPUSH
46995: CALL_OW 447
// end ;
46999: LD_VAR 0 2
47003: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
47004: LD_INT 0
47006: PPUSH
47007: PPUSH
47008: PPUSH
// tmp := [ ] ;
47009: LD_ADDR_VAR 0 5
47013: PUSH
47014: EMPTY
47015: ST_TO_ADDR
// for i in units do
47016: LD_ADDR_VAR 0 4
47020: PUSH
47021: LD_VAR 0 1
47025: PUSH
47026: FOR_IN
47027: IFFALSE 47065
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
47029: LD_ADDR_VAR 0 5
47033: PUSH
47034: LD_VAR 0 5
47038: PPUSH
47039: LD_VAR 0 5
47043: PUSH
47044: LD_INT 1
47046: PLUS
47047: PPUSH
47048: LD_VAR 0 4
47052: PPUSH
47053: CALL_OW 256
47057: PPUSH
47058: CALL_OW 2
47062: ST_TO_ADDR
47063: GO 47026
47065: POP
47066: POP
// if not tmp then
47067: LD_VAR 0 5
47071: NOT
47072: IFFALSE 47076
// exit ;
47074: GO 47124
// if asc then
47076: LD_VAR 0 2
47080: IFFALSE 47104
// result := SortListByListAsc ( units , tmp ) else
47082: LD_ADDR_VAR 0 3
47086: PUSH
47087: LD_VAR 0 1
47091: PPUSH
47092: LD_VAR 0 5
47096: PPUSH
47097: CALL_OW 76
47101: ST_TO_ADDR
47102: GO 47124
// result := SortListByListDesc ( units , tmp ) ;
47104: LD_ADDR_VAR 0 3
47108: PUSH
47109: LD_VAR 0 1
47113: PPUSH
47114: LD_VAR 0 5
47118: PPUSH
47119: CALL_OW 77
47123: ST_TO_ADDR
// end ;
47124: LD_VAR 0 3
47128: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
47129: LD_INT 0
47131: PPUSH
47132: PPUSH
// task := GetTaskList ( mech ) ;
47133: LD_ADDR_VAR 0 4
47137: PUSH
47138: LD_VAR 0 1
47142: PPUSH
47143: CALL_OW 437
47147: ST_TO_ADDR
// if not task then
47148: LD_VAR 0 4
47152: NOT
47153: IFFALSE 47157
// exit ;
47155: GO 47199
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
47157: LD_ADDR_VAR 0 3
47161: PUSH
47162: LD_VAR 0 4
47166: PUSH
47167: LD_INT 1
47169: ARRAY
47170: PUSH
47171: LD_INT 1
47173: ARRAY
47174: PUSH
47175: LD_STRING r
47177: EQUAL
47178: PUSH
47179: LD_VAR 0 4
47183: PUSH
47184: LD_INT 1
47186: ARRAY
47187: PUSH
47188: LD_INT 4
47190: ARRAY
47191: PUSH
47192: LD_VAR 0 2
47196: EQUAL
47197: AND
47198: ST_TO_ADDR
// end ;
47199: LD_VAR 0 3
47203: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
47204: LD_INT 0
47206: PPUSH
// SetDir ( unit , d ) ;
47207: LD_VAR 0 1
47211: PPUSH
47212: LD_VAR 0 4
47216: PPUSH
47217: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
47221: LD_VAR 0 1
47225: PPUSH
47226: LD_VAR 0 2
47230: PPUSH
47231: LD_VAR 0 3
47235: PPUSH
47236: LD_VAR 0 5
47240: PPUSH
47241: CALL_OW 48
// end ;
47245: LD_VAR 0 6
47249: RET
// export function ToNaturalNumber ( number ) ; begin
47250: LD_INT 0
47252: PPUSH
// result := number div 1 ;
47253: LD_ADDR_VAR 0 2
47257: PUSH
47258: LD_VAR 0 1
47262: PUSH
47263: LD_INT 1
47265: DIV
47266: ST_TO_ADDR
// if number < 0 then
47267: LD_VAR 0 1
47271: PUSH
47272: LD_INT 0
47274: LESS
47275: IFFALSE 47285
// result := 0 ;
47277: LD_ADDR_VAR 0 2
47281: PUSH
47282: LD_INT 0
47284: ST_TO_ADDR
// end ;
47285: LD_VAR 0 2
47289: RET
// export function SortByClass ( units , class ) ; var un ; begin
47290: LD_INT 0
47292: PPUSH
47293: PPUSH
// if not units or not class then
47294: LD_VAR 0 1
47298: NOT
47299: PUSH
47300: LD_VAR 0 2
47304: NOT
47305: OR
47306: IFFALSE 47310
// exit ;
47308: GO 47405
// result := [ ] ;
47310: LD_ADDR_VAR 0 3
47314: PUSH
47315: EMPTY
47316: ST_TO_ADDR
// for un in units do
47317: LD_ADDR_VAR 0 4
47321: PUSH
47322: LD_VAR 0 1
47326: PUSH
47327: FOR_IN
47328: IFFALSE 47403
// if GetClass ( un ) = class then
47330: LD_VAR 0 4
47334: PPUSH
47335: CALL_OW 257
47339: PUSH
47340: LD_VAR 0 2
47344: EQUAL
47345: IFFALSE 47372
// result := Insert ( result , 1 , un ) else
47347: LD_ADDR_VAR 0 3
47351: PUSH
47352: LD_VAR 0 3
47356: PPUSH
47357: LD_INT 1
47359: PPUSH
47360: LD_VAR 0 4
47364: PPUSH
47365: CALL_OW 2
47369: ST_TO_ADDR
47370: GO 47401
// result := Replace ( result , result + 1 , un ) ;
47372: LD_ADDR_VAR 0 3
47376: PUSH
47377: LD_VAR 0 3
47381: PPUSH
47382: LD_VAR 0 3
47386: PUSH
47387: LD_INT 1
47389: PLUS
47390: PPUSH
47391: LD_VAR 0 4
47395: PPUSH
47396: CALL_OW 1
47400: ST_TO_ADDR
47401: GO 47327
47403: POP
47404: POP
// end ;
47405: LD_VAR 0 3
47409: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
47410: LD_INT 0
47412: PPUSH
47413: PPUSH
47414: PPUSH
47415: PPUSH
47416: PPUSH
47417: PPUSH
47418: PPUSH
// result := [ ] ;
47419: LD_ADDR_VAR 0 4
47423: PUSH
47424: EMPTY
47425: ST_TO_ADDR
// if x - r < 0 then
47426: LD_VAR 0 1
47430: PUSH
47431: LD_VAR 0 3
47435: MINUS
47436: PUSH
47437: LD_INT 0
47439: LESS
47440: IFFALSE 47452
// min_x := 0 else
47442: LD_ADDR_VAR 0 8
47446: PUSH
47447: LD_INT 0
47449: ST_TO_ADDR
47450: GO 47468
// min_x := x - r ;
47452: LD_ADDR_VAR 0 8
47456: PUSH
47457: LD_VAR 0 1
47461: PUSH
47462: LD_VAR 0 3
47466: MINUS
47467: ST_TO_ADDR
// if y - r < 0 then
47468: LD_VAR 0 2
47472: PUSH
47473: LD_VAR 0 3
47477: MINUS
47478: PUSH
47479: LD_INT 0
47481: LESS
47482: IFFALSE 47494
// min_y := 0 else
47484: LD_ADDR_VAR 0 7
47488: PUSH
47489: LD_INT 0
47491: ST_TO_ADDR
47492: GO 47510
// min_y := y - r ;
47494: LD_ADDR_VAR 0 7
47498: PUSH
47499: LD_VAR 0 2
47503: PUSH
47504: LD_VAR 0 3
47508: MINUS
47509: ST_TO_ADDR
// max_x := x + r ;
47510: LD_ADDR_VAR 0 9
47514: PUSH
47515: LD_VAR 0 1
47519: PUSH
47520: LD_VAR 0 3
47524: PLUS
47525: ST_TO_ADDR
// max_y := y + r ;
47526: LD_ADDR_VAR 0 10
47530: PUSH
47531: LD_VAR 0 2
47535: PUSH
47536: LD_VAR 0 3
47540: PLUS
47541: ST_TO_ADDR
// for _x = min_x to max_x do
47542: LD_ADDR_VAR 0 5
47546: PUSH
47547: DOUBLE
47548: LD_VAR 0 8
47552: DEC
47553: ST_TO_ADDR
47554: LD_VAR 0 9
47558: PUSH
47559: FOR_TO
47560: IFFALSE 47661
// for _y = min_y to max_y do
47562: LD_ADDR_VAR 0 6
47566: PUSH
47567: DOUBLE
47568: LD_VAR 0 7
47572: DEC
47573: ST_TO_ADDR
47574: LD_VAR 0 10
47578: PUSH
47579: FOR_TO
47580: IFFALSE 47657
// begin if not ValidHex ( _x , _y ) then
47582: LD_VAR 0 5
47586: PPUSH
47587: LD_VAR 0 6
47591: PPUSH
47592: CALL_OW 488
47596: NOT
47597: IFFALSE 47601
// continue ;
47599: GO 47579
// if GetResourceTypeXY ( _x , _y ) then
47601: LD_VAR 0 5
47605: PPUSH
47606: LD_VAR 0 6
47610: PPUSH
47611: CALL_OW 283
47615: IFFALSE 47655
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47617: LD_ADDR_VAR 0 4
47621: PUSH
47622: LD_VAR 0 4
47626: PPUSH
47627: LD_VAR 0 4
47631: PUSH
47632: LD_INT 1
47634: PLUS
47635: PPUSH
47636: LD_VAR 0 5
47640: PUSH
47641: LD_VAR 0 6
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PPUSH
47650: CALL_OW 1
47654: ST_TO_ADDR
// end ;
47655: GO 47579
47657: POP
47658: POP
47659: GO 47559
47661: POP
47662: POP
// end ;
47663: LD_VAR 0 4
47667: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47668: LD_INT 0
47670: PPUSH
47671: PPUSH
47672: PPUSH
47673: PPUSH
47674: PPUSH
47675: PPUSH
47676: PPUSH
47677: PPUSH
// if not units then
47678: LD_VAR 0 1
47682: NOT
47683: IFFALSE 47687
// exit ;
47685: GO 48211
// result := UnitFilter ( units , [ f_ok ] ) ;
47687: LD_ADDR_VAR 0 3
47691: PUSH
47692: LD_VAR 0 1
47696: PPUSH
47697: LD_INT 50
47699: PUSH
47700: EMPTY
47701: LIST
47702: PPUSH
47703: CALL_OW 72
47707: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
47708: LD_ADDR_VAR 0 8
47712: PUSH
47713: LD_VAR 0 1
47717: PUSH
47718: LD_INT 1
47720: ARRAY
47721: PPUSH
47722: CALL_OW 255
47726: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
47727: LD_ADDR_VAR 0 10
47731: PUSH
47732: LD_INT 29
47734: PUSH
47735: LD_INT 91
47737: PUSH
47738: LD_INT 49
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: ST_TO_ADDR
// if not result then
47746: LD_VAR 0 3
47750: NOT
47751: IFFALSE 47755
// exit ;
47753: GO 48211
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
47755: LD_ADDR_VAR 0 5
47759: PUSH
47760: LD_INT 81
47762: PUSH
47763: LD_VAR 0 8
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PPUSH
47772: CALL_OW 69
47776: ST_TO_ADDR
// for i in result do
47777: LD_ADDR_VAR 0 4
47781: PUSH
47782: LD_VAR 0 3
47786: PUSH
47787: FOR_IN
47788: IFFALSE 48209
// begin tag := GetTag ( i ) + 1 ;
47790: LD_ADDR_VAR 0 9
47794: PUSH
47795: LD_VAR 0 4
47799: PPUSH
47800: CALL_OW 110
47804: PUSH
47805: LD_INT 1
47807: PLUS
47808: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
47809: LD_ADDR_VAR 0 7
47813: PUSH
47814: LD_VAR 0 4
47818: PPUSH
47819: CALL_OW 250
47823: PPUSH
47824: LD_VAR 0 4
47828: PPUSH
47829: CALL_OW 251
47833: PPUSH
47834: LD_INT 6
47836: PPUSH
47837: CALL 47410 0 3
47841: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
47842: LD_VAR 0 4
47846: PPUSH
47847: CALL_OW 247
47851: PUSH
47852: LD_INT 2
47854: EQUAL
47855: PUSH
47856: LD_VAR 0 7
47860: AND
47861: PUSH
47862: LD_VAR 0 4
47866: PPUSH
47867: CALL_OW 264
47871: PUSH
47872: LD_VAR 0 10
47876: IN
47877: NOT
47878: AND
47879: IFFALSE 47918
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
47881: LD_VAR 0 4
47885: PPUSH
47886: LD_VAR 0 7
47890: PUSH
47891: LD_INT 1
47893: ARRAY
47894: PUSH
47895: LD_INT 1
47897: ARRAY
47898: PPUSH
47899: LD_VAR 0 7
47903: PUSH
47904: LD_INT 1
47906: ARRAY
47907: PUSH
47908: LD_INT 2
47910: ARRAY
47911: PPUSH
47912: CALL_OW 116
47916: GO 48207
// if path > tag then
47918: LD_VAR 0 2
47922: PUSH
47923: LD_VAR 0 9
47927: GREATER
47928: IFFALSE 48136
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
47930: LD_ADDR_VAR 0 6
47934: PUSH
47935: LD_VAR 0 5
47939: PPUSH
47940: LD_INT 91
47942: PUSH
47943: LD_VAR 0 4
47947: PUSH
47948: LD_INT 8
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: LIST
47955: PPUSH
47956: CALL_OW 72
47960: ST_TO_ADDR
// if nearEnemy then
47961: LD_VAR 0 6
47965: IFFALSE 48034
// begin if GetWeapon ( i ) = ru_time_lapser then
47967: LD_VAR 0 4
47971: PPUSH
47972: CALL_OW 264
47976: PUSH
47977: LD_INT 49
47979: EQUAL
47980: IFFALSE 48008
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
47982: LD_VAR 0 4
47986: PPUSH
47987: LD_VAR 0 6
47991: PPUSH
47992: LD_VAR 0 4
47996: PPUSH
47997: CALL_OW 74
48001: PPUSH
48002: CALL_OW 112
48006: GO 48032
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
48008: LD_VAR 0 4
48012: PPUSH
48013: LD_VAR 0 6
48017: PPUSH
48018: LD_VAR 0 4
48022: PPUSH
48023: CALL_OW 74
48027: PPUSH
48028: CALL_OW 115
// end else
48032: GO 48134
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
48034: LD_VAR 0 4
48038: PPUSH
48039: LD_VAR 0 2
48043: PUSH
48044: LD_VAR 0 9
48048: ARRAY
48049: PUSH
48050: LD_INT 1
48052: ARRAY
48053: PPUSH
48054: LD_VAR 0 2
48058: PUSH
48059: LD_VAR 0 9
48063: ARRAY
48064: PUSH
48065: LD_INT 2
48067: ARRAY
48068: PPUSH
48069: CALL_OW 297
48073: PUSH
48074: LD_INT 6
48076: GREATER
48077: IFFALSE 48120
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
48079: LD_VAR 0 4
48083: PPUSH
48084: LD_VAR 0 2
48088: PUSH
48089: LD_VAR 0 9
48093: ARRAY
48094: PUSH
48095: LD_INT 1
48097: ARRAY
48098: PPUSH
48099: LD_VAR 0 2
48103: PUSH
48104: LD_VAR 0 9
48108: ARRAY
48109: PUSH
48110: LD_INT 2
48112: ARRAY
48113: PPUSH
48114: CALL_OW 114
48118: GO 48134
// SetTag ( i , tag ) ;
48120: LD_VAR 0 4
48124: PPUSH
48125: LD_VAR 0 9
48129: PPUSH
48130: CALL_OW 109
// end else
48134: GO 48207
// if enemy then
48136: LD_VAR 0 5
48140: IFFALSE 48207
// begin if GetWeapon ( i ) = ru_time_lapser then
48142: LD_VAR 0 4
48146: PPUSH
48147: CALL_OW 264
48151: PUSH
48152: LD_INT 49
48154: EQUAL
48155: IFFALSE 48183
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
48157: LD_VAR 0 4
48161: PPUSH
48162: LD_VAR 0 5
48166: PPUSH
48167: LD_VAR 0 4
48171: PPUSH
48172: CALL_OW 74
48176: PPUSH
48177: CALL_OW 112
48181: GO 48207
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
48183: LD_VAR 0 4
48187: PPUSH
48188: LD_VAR 0 5
48192: PPUSH
48193: LD_VAR 0 4
48197: PPUSH
48198: CALL_OW 74
48202: PPUSH
48203: CALL_OW 115
// end ; end ;
48207: GO 47787
48209: POP
48210: POP
// end ;
48211: LD_VAR 0 3
48215: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
48216: LD_INT 0
48218: PPUSH
48219: PPUSH
48220: PPUSH
// if not unit or IsInUnit ( unit ) then
48221: LD_VAR 0 1
48225: NOT
48226: PUSH
48227: LD_VAR 0 1
48231: PPUSH
48232: CALL_OW 310
48236: OR
48237: IFFALSE 48241
// exit ;
48239: GO 48332
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
48241: LD_ADDR_VAR 0 4
48245: PUSH
48246: LD_VAR 0 1
48250: PPUSH
48251: CALL_OW 250
48255: PPUSH
48256: LD_VAR 0 2
48260: PPUSH
48261: LD_INT 1
48263: PPUSH
48264: CALL_OW 272
48268: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
48269: LD_ADDR_VAR 0 5
48273: PUSH
48274: LD_VAR 0 1
48278: PPUSH
48279: CALL_OW 251
48283: PPUSH
48284: LD_VAR 0 2
48288: PPUSH
48289: LD_INT 1
48291: PPUSH
48292: CALL_OW 273
48296: ST_TO_ADDR
// if ValidHex ( x , y ) then
48297: LD_VAR 0 4
48301: PPUSH
48302: LD_VAR 0 5
48306: PPUSH
48307: CALL_OW 488
48311: IFFALSE 48332
// ComTurnXY ( unit , x , y ) ;
48313: LD_VAR 0 1
48317: PPUSH
48318: LD_VAR 0 4
48322: PPUSH
48323: LD_VAR 0 5
48327: PPUSH
48328: CALL_OW 118
// end ;
48332: LD_VAR 0 3
48336: RET
// export function SeeUnits ( side , units ) ; var i ; begin
48337: LD_INT 0
48339: PPUSH
48340: PPUSH
// result := false ;
48341: LD_ADDR_VAR 0 3
48345: PUSH
48346: LD_INT 0
48348: ST_TO_ADDR
// if not units then
48349: LD_VAR 0 2
48353: NOT
48354: IFFALSE 48358
// exit ;
48356: GO 48403
// for i in units do
48358: LD_ADDR_VAR 0 4
48362: PUSH
48363: LD_VAR 0 2
48367: PUSH
48368: FOR_IN
48369: IFFALSE 48401
// if See ( side , i ) then
48371: LD_VAR 0 1
48375: PPUSH
48376: LD_VAR 0 4
48380: PPUSH
48381: CALL_OW 292
48385: IFFALSE 48399
// begin result := true ;
48387: LD_ADDR_VAR 0 3
48391: PUSH
48392: LD_INT 1
48394: ST_TO_ADDR
// exit ;
48395: POP
48396: POP
48397: GO 48403
// end ;
48399: GO 48368
48401: POP
48402: POP
// end ;
48403: LD_VAR 0 3
48407: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
48408: LD_INT 0
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
// if not unit or not points then
48414: LD_VAR 0 1
48418: NOT
48419: PUSH
48420: LD_VAR 0 2
48424: NOT
48425: OR
48426: IFFALSE 48430
// exit ;
48428: GO 48520
// dist := 99999 ;
48430: LD_ADDR_VAR 0 5
48434: PUSH
48435: LD_INT 99999
48437: ST_TO_ADDR
// for i in points do
48438: LD_ADDR_VAR 0 4
48442: PUSH
48443: LD_VAR 0 2
48447: PUSH
48448: FOR_IN
48449: IFFALSE 48518
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48451: LD_ADDR_VAR 0 6
48455: PUSH
48456: LD_VAR 0 1
48460: PPUSH
48461: LD_VAR 0 4
48465: PUSH
48466: LD_INT 1
48468: ARRAY
48469: PPUSH
48470: LD_VAR 0 4
48474: PUSH
48475: LD_INT 2
48477: ARRAY
48478: PPUSH
48479: CALL_OW 297
48483: ST_TO_ADDR
// if tmpDist < dist then
48484: LD_VAR 0 6
48488: PUSH
48489: LD_VAR 0 5
48493: LESS
48494: IFFALSE 48516
// begin result := i ;
48496: LD_ADDR_VAR 0 3
48500: PUSH
48501: LD_VAR 0 4
48505: ST_TO_ADDR
// dist := tmpDist ;
48506: LD_ADDR_VAR 0 5
48510: PUSH
48511: LD_VAR 0 6
48515: ST_TO_ADDR
// end ; end ;
48516: GO 48448
48518: POP
48519: POP
// end ;
48520: LD_VAR 0 3
48524: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
48525: LD_INT 0
48527: PPUSH
// uc_side := side ;
48528: LD_ADDR_OWVAR 20
48532: PUSH
48533: LD_VAR 0 1
48537: ST_TO_ADDR
// uc_nation := 3 ;
48538: LD_ADDR_OWVAR 21
48542: PUSH
48543: LD_INT 3
48545: ST_TO_ADDR
// vc_chassis := 25 ;
48546: LD_ADDR_OWVAR 37
48550: PUSH
48551: LD_INT 25
48553: ST_TO_ADDR
// vc_engine := engine_siberite ;
48554: LD_ADDR_OWVAR 39
48558: PUSH
48559: LD_INT 3
48561: ST_TO_ADDR
// vc_control := control_computer ;
48562: LD_ADDR_OWVAR 38
48566: PUSH
48567: LD_INT 3
48569: ST_TO_ADDR
// vc_weapon := 59 ;
48570: LD_ADDR_OWVAR 40
48574: PUSH
48575: LD_INT 59
48577: ST_TO_ADDR
// result := CreateVehicle ;
48578: LD_ADDR_VAR 0 5
48582: PUSH
48583: CALL_OW 45
48587: ST_TO_ADDR
// SetDir ( result , d ) ;
48588: LD_VAR 0 5
48592: PPUSH
48593: LD_VAR 0 4
48597: PPUSH
48598: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
48602: LD_VAR 0 5
48606: PPUSH
48607: LD_VAR 0 2
48611: PPUSH
48612: LD_VAR 0 3
48616: PPUSH
48617: LD_INT 0
48619: PPUSH
48620: CALL_OW 48
// end ;
48624: LD_VAR 0 5
48628: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
48629: LD_INT 0
48631: PPUSH
48632: PPUSH
48633: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
48634: LD_ADDR_VAR 0 2
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
48657: LD_VAR 0 1
48661: NOT
48662: PUSH
48663: LD_VAR 0 1
48667: PPUSH
48668: CALL_OW 264
48672: PUSH
48673: LD_INT 12
48675: PUSH
48676: LD_INT 51
48678: PUSH
48679: LD_INT 32
48681: PUSH
48682: LD_INT 89
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: IN
48691: NOT
48692: OR
48693: IFFALSE 48697
// exit ;
48695: GO 48795
// for i := 1 to 3 do
48697: LD_ADDR_VAR 0 3
48701: PUSH
48702: DOUBLE
48703: LD_INT 1
48705: DEC
48706: ST_TO_ADDR
48707: LD_INT 3
48709: PUSH
48710: FOR_TO
48711: IFFALSE 48793
// begin tmp := GetCargo ( cargo , i ) ;
48713: LD_ADDR_VAR 0 4
48717: PUSH
48718: LD_VAR 0 1
48722: PPUSH
48723: LD_VAR 0 3
48727: PPUSH
48728: CALL_OW 289
48732: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
48733: LD_ADDR_VAR 0 2
48737: PUSH
48738: LD_VAR 0 2
48742: PPUSH
48743: LD_VAR 0 3
48747: PPUSH
48748: LD_VAR 0 4
48752: PPUSH
48753: CALL_OW 1
48757: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
48758: LD_ADDR_VAR 0 2
48762: PUSH
48763: LD_VAR 0 2
48767: PPUSH
48768: LD_INT 4
48770: PPUSH
48771: LD_VAR 0 2
48775: PUSH
48776: LD_INT 4
48778: ARRAY
48779: PUSH
48780: LD_VAR 0 4
48784: PLUS
48785: PPUSH
48786: CALL_OW 1
48790: ST_TO_ADDR
// end ;
48791: GO 48710
48793: POP
48794: POP
// end ;
48795: LD_VAR 0 2
48799: RET
// export function Length ( array ) ; begin
48800: LD_INT 0
48802: PPUSH
// result := array + 0 ;
48803: LD_ADDR_VAR 0 2
48807: PUSH
48808: LD_VAR 0 1
48812: PUSH
48813: LD_INT 0
48815: PLUS
48816: ST_TO_ADDR
// end ;
48817: LD_VAR 0 2
48821: RET
// export function PrepareArray ( array ) ; begin
48822: LD_INT 0
48824: PPUSH
// result := array diff 0 ;
48825: LD_ADDR_VAR 0 2
48829: PUSH
48830: LD_VAR 0 1
48834: PUSH
48835: LD_INT 0
48837: DIFF
48838: ST_TO_ADDR
// if not result [ 1 ] then
48839: LD_VAR 0 2
48843: PUSH
48844: LD_INT 1
48846: ARRAY
48847: NOT
48848: IFFALSE 48868
// result := Delete ( result , 1 ) ;
48850: LD_ADDR_VAR 0 2
48854: PUSH
48855: LD_VAR 0 2
48859: PPUSH
48860: LD_INT 1
48862: PPUSH
48863: CALL_OW 3
48867: ST_TO_ADDR
// end ;
48868: LD_VAR 0 2
48872: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
48873: LD_INT 0
48875: PPUSH
48876: PPUSH
48877: PPUSH
48878: PPUSH
// sibRocketRange := 25 ;
48879: LD_ADDR_VAR 0 6
48883: PUSH
48884: LD_INT 25
48886: ST_TO_ADDR
// result := false ;
48887: LD_ADDR_VAR 0 4
48891: PUSH
48892: LD_INT 0
48894: ST_TO_ADDR
// for i := 0 to 5 do
48895: LD_ADDR_VAR 0 5
48899: PUSH
48900: DOUBLE
48901: LD_INT 0
48903: DEC
48904: ST_TO_ADDR
48905: LD_INT 5
48907: PUSH
48908: FOR_TO
48909: IFFALSE 48976
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
48911: LD_VAR 0 1
48915: PPUSH
48916: LD_VAR 0 5
48920: PPUSH
48921: LD_VAR 0 6
48925: PPUSH
48926: CALL_OW 272
48930: PPUSH
48931: LD_VAR 0 2
48935: PPUSH
48936: LD_VAR 0 5
48940: PPUSH
48941: LD_VAR 0 6
48945: PPUSH
48946: CALL_OW 273
48950: PPUSH
48951: LD_VAR 0 3
48955: PPUSH
48956: CALL_OW 309
48960: IFFALSE 48974
// begin result := true ;
48962: LD_ADDR_VAR 0 4
48966: PUSH
48967: LD_INT 1
48969: ST_TO_ADDR
// exit ;
48970: POP
48971: POP
48972: GO 48978
// end ;
48974: GO 48908
48976: POP
48977: POP
// end ;
48978: LD_VAR 0 4
48982: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
48983: LD_INT 0
48985: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
48986: LD_VAR 0 1
48990: PPUSH
48991: LD_VAR 0 2
48995: PPUSH
48996: LD_INT 0
48998: PPUSH
48999: LD_INT 0
49001: PPUSH
49002: LD_INT 1
49004: PPUSH
49005: LD_INT 0
49007: PPUSH
49008: CALL_OW 587
// end ;
49012: LD_VAR 0 3
49016: RET
// export function CenterOnNow ( unit ) ; begin
49017: LD_INT 0
49019: PPUSH
// result := IsInUnit ( unit ) ;
49020: LD_ADDR_VAR 0 2
49024: PUSH
49025: LD_VAR 0 1
49029: PPUSH
49030: CALL_OW 310
49034: ST_TO_ADDR
// if not result then
49035: LD_VAR 0 2
49039: NOT
49040: IFFALSE 49052
// result := unit ;
49042: LD_ADDR_VAR 0 2
49046: PUSH
49047: LD_VAR 0 1
49051: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
49052: LD_VAR 0 1
49056: PPUSH
49057: CALL_OW 87
// end ; end_of_file end_of_file
49061: LD_VAR 0 2
49065: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
49066: LD_VAR 0 1
49070: PPUSH
49071: LD_VAR 0 2
49075: PPUSH
49076: LD_VAR 0 3
49080: PPUSH
49081: LD_VAR 0 4
49085: PPUSH
49086: LD_VAR 0 5
49090: PPUSH
49091: LD_VAR 0 6
49095: PPUSH
49096: CALL 49280 0 6
// end ;
49100: PPOPN 6
49102: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
49103: LD_INT 0
49105: PPUSH
// begin if not units then
49106: LD_VAR 0 1
49110: NOT
49111: IFFALSE 49115
// exit ;
49113: GO 49115
// end ;
49115: PPOPN 7
49117: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
49118: CALL 49184 0 0
// end ; end_of_file
49122: PPOPN 1
49124: END
// export globalGameSaveCounter ; every 0 0$1 do
49125: GO 49127
49127: DISABLE
// begin enable ;
49128: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
49129: LD_STRING updateTimer(
49131: PUSH
49132: LD_OWVAR 1
49136: STR
49137: PUSH
49138: LD_STRING );
49140: STR
49141: PPUSH
49142: CALL_OW 559
// end ;
49146: END
// every 0 0$1 do
49147: GO 49149
49149: DISABLE
// begin globalGameSaveCounter := 0 ;
49150: LD_ADDR_EXP 32
49154: PUSH
49155: LD_INT 0
49157: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
49158: LD_STRING setGameSaveCounter(0)
49160: PPUSH
49161: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
49165: LD_STRING initStreamRollete();
49167: PPUSH
49168: CALL_OW 559
// InitStreamMode ;
49172: CALL 50498 0 0
// DefineStreamItems ( false ) ;
49176: LD_INT 0
49178: PPUSH
49179: CALL 50962 0 1
// end ;
49183: END
// export function SOS_MapStart ( ) ; begin
49184: LD_INT 0
49186: PPUSH
// if streamModeActive then
49187: LD_EXP 33
49191: IFFALSE 49200
// DefineStreamItems ( true ) ;
49193: LD_INT 1
49195: PPUSH
49196: CALL 50962 0 1
// UpdateLuaVariables ( ) ;
49200: CALL 49217 0 0
// UpdateFactoryWaypoints ( ) ;
49204: CALL 63823 0 0
// UpdateWarehouseGatheringPoints ( ) ;
49208: CALL 64080 0 0
// end ;
49212: LD_VAR 0 1
49216: RET
// function UpdateLuaVariables ( ) ; begin
49217: LD_INT 0
49219: PPUSH
// if globalGameSaveCounter then
49220: LD_EXP 32
49224: IFFALSE 49258
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
49226: LD_ADDR_EXP 32
49230: PUSH
49231: LD_EXP 32
49235: PPUSH
49236: CALL 46425 0 1
49240: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49241: LD_STRING setGameSaveCounter(
49243: PUSH
49244: LD_EXP 32
49248: STR
49249: PUSH
49250: LD_STRING )
49252: STR
49253: PPUSH
49254: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
49258: LD_STRING setGameDifficulty(
49260: PUSH
49261: LD_OWVAR 67
49265: STR
49266: PUSH
49267: LD_STRING )
49269: STR
49270: PPUSH
49271: CALL_OW 559
// end ;
49275: LD_VAR 0 1
49279: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
49280: LD_INT 0
49282: PPUSH
// if p2 = stream_mode then
49283: LD_VAR 0 2
49287: PUSH
49288: LD_INT 100
49290: EQUAL
49291: IFFALSE 50294
// begin if not StreamModeActive then
49293: LD_EXP 33
49297: NOT
49298: IFFALSE 49308
// StreamModeActive := true ;
49300: LD_ADDR_EXP 33
49304: PUSH
49305: LD_INT 1
49307: ST_TO_ADDR
// if p3 = 0 then
49308: LD_VAR 0 3
49312: PUSH
49313: LD_INT 0
49315: EQUAL
49316: IFFALSE 49322
// InitStreamMode ;
49318: CALL 50498 0 0
// if p3 = 1 then
49322: LD_VAR 0 3
49326: PUSH
49327: LD_INT 1
49329: EQUAL
49330: IFFALSE 49340
// sRocket := true ;
49332: LD_ADDR_EXP 38
49336: PUSH
49337: LD_INT 1
49339: ST_TO_ADDR
// if p3 = 2 then
49340: LD_VAR 0 3
49344: PUSH
49345: LD_INT 2
49347: EQUAL
49348: IFFALSE 49358
// sSpeed := true ;
49350: LD_ADDR_EXP 37
49354: PUSH
49355: LD_INT 1
49357: ST_TO_ADDR
// if p3 = 3 then
49358: LD_VAR 0 3
49362: PUSH
49363: LD_INT 3
49365: EQUAL
49366: IFFALSE 49376
// sEngine := true ;
49368: LD_ADDR_EXP 39
49372: PUSH
49373: LD_INT 1
49375: ST_TO_ADDR
// if p3 = 4 then
49376: LD_VAR 0 3
49380: PUSH
49381: LD_INT 4
49383: EQUAL
49384: IFFALSE 49394
// sSpec := true ;
49386: LD_ADDR_EXP 36
49390: PUSH
49391: LD_INT 1
49393: ST_TO_ADDR
// if p3 = 5 then
49394: LD_VAR 0 3
49398: PUSH
49399: LD_INT 5
49401: EQUAL
49402: IFFALSE 49412
// sLevel := true ;
49404: LD_ADDR_EXP 40
49408: PUSH
49409: LD_INT 1
49411: ST_TO_ADDR
// if p3 = 6 then
49412: LD_VAR 0 3
49416: PUSH
49417: LD_INT 6
49419: EQUAL
49420: IFFALSE 49430
// sArmoury := true ;
49422: LD_ADDR_EXP 41
49426: PUSH
49427: LD_INT 1
49429: ST_TO_ADDR
// if p3 = 7 then
49430: LD_VAR 0 3
49434: PUSH
49435: LD_INT 7
49437: EQUAL
49438: IFFALSE 49448
// sRadar := true ;
49440: LD_ADDR_EXP 42
49444: PUSH
49445: LD_INT 1
49447: ST_TO_ADDR
// if p3 = 8 then
49448: LD_VAR 0 3
49452: PUSH
49453: LD_INT 8
49455: EQUAL
49456: IFFALSE 49466
// sBunker := true ;
49458: LD_ADDR_EXP 43
49462: PUSH
49463: LD_INT 1
49465: ST_TO_ADDR
// if p3 = 9 then
49466: LD_VAR 0 3
49470: PUSH
49471: LD_INT 9
49473: EQUAL
49474: IFFALSE 49484
// sHack := true ;
49476: LD_ADDR_EXP 44
49480: PUSH
49481: LD_INT 1
49483: ST_TO_ADDR
// if p3 = 10 then
49484: LD_VAR 0 3
49488: PUSH
49489: LD_INT 10
49491: EQUAL
49492: IFFALSE 49502
// sFire := true ;
49494: LD_ADDR_EXP 45
49498: PUSH
49499: LD_INT 1
49501: ST_TO_ADDR
// if p3 = 11 then
49502: LD_VAR 0 3
49506: PUSH
49507: LD_INT 11
49509: EQUAL
49510: IFFALSE 49520
// sRefresh := true ;
49512: LD_ADDR_EXP 46
49516: PUSH
49517: LD_INT 1
49519: ST_TO_ADDR
// if p3 = 12 then
49520: LD_VAR 0 3
49524: PUSH
49525: LD_INT 12
49527: EQUAL
49528: IFFALSE 49538
// sExp := true ;
49530: LD_ADDR_EXP 47
49534: PUSH
49535: LD_INT 1
49537: ST_TO_ADDR
// if p3 = 13 then
49538: LD_VAR 0 3
49542: PUSH
49543: LD_INT 13
49545: EQUAL
49546: IFFALSE 49556
// sDepot := true ;
49548: LD_ADDR_EXP 48
49552: PUSH
49553: LD_INT 1
49555: ST_TO_ADDR
// if p3 = 14 then
49556: LD_VAR 0 3
49560: PUSH
49561: LD_INT 14
49563: EQUAL
49564: IFFALSE 49574
// sFlag := true ;
49566: LD_ADDR_EXP 49
49570: PUSH
49571: LD_INT 1
49573: ST_TO_ADDR
// if p3 = 15 then
49574: LD_VAR 0 3
49578: PUSH
49579: LD_INT 15
49581: EQUAL
49582: IFFALSE 49592
// sKamikadze := true ;
49584: LD_ADDR_EXP 57
49588: PUSH
49589: LD_INT 1
49591: ST_TO_ADDR
// if p3 = 16 then
49592: LD_VAR 0 3
49596: PUSH
49597: LD_INT 16
49599: EQUAL
49600: IFFALSE 49610
// sTroll := true ;
49602: LD_ADDR_EXP 58
49606: PUSH
49607: LD_INT 1
49609: ST_TO_ADDR
// if p3 = 17 then
49610: LD_VAR 0 3
49614: PUSH
49615: LD_INT 17
49617: EQUAL
49618: IFFALSE 49628
// sSlow := true ;
49620: LD_ADDR_EXP 59
49624: PUSH
49625: LD_INT 1
49627: ST_TO_ADDR
// if p3 = 18 then
49628: LD_VAR 0 3
49632: PUSH
49633: LD_INT 18
49635: EQUAL
49636: IFFALSE 49646
// sLack := true ;
49638: LD_ADDR_EXP 60
49642: PUSH
49643: LD_INT 1
49645: ST_TO_ADDR
// if p3 = 19 then
49646: LD_VAR 0 3
49650: PUSH
49651: LD_INT 19
49653: EQUAL
49654: IFFALSE 49664
// sTank := true ;
49656: LD_ADDR_EXP 62
49660: PUSH
49661: LD_INT 1
49663: ST_TO_ADDR
// if p3 = 20 then
49664: LD_VAR 0 3
49668: PUSH
49669: LD_INT 20
49671: EQUAL
49672: IFFALSE 49682
// sRemote := true ;
49674: LD_ADDR_EXP 63
49678: PUSH
49679: LD_INT 1
49681: ST_TO_ADDR
// if p3 = 21 then
49682: LD_VAR 0 3
49686: PUSH
49687: LD_INT 21
49689: EQUAL
49690: IFFALSE 49700
// sPowell := true ;
49692: LD_ADDR_EXP 64
49696: PUSH
49697: LD_INT 1
49699: ST_TO_ADDR
// if p3 = 22 then
49700: LD_VAR 0 3
49704: PUSH
49705: LD_INT 22
49707: EQUAL
49708: IFFALSE 49718
// sTeleport := true ;
49710: LD_ADDR_EXP 67
49714: PUSH
49715: LD_INT 1
49717: ST_TO_ADDR
// if p3 = 23 then
49718: LD_VAR 0 3
49722: PUSH
49723: LD_INT 23
49725: EQUAL
49726: IFFALSE 49736
// sOilTower := true ;
49728: LD_ADDR_EXP 69
49732: PUSH
49733: LD_INT 1
49735: ST_TO_ADDR
// if p3 = 24 then
49736: LD_VAR 0 3
49740: PUSH
49741: LD_INT 24
49743: EQUAL
49744: IFFALSE 49754
// sShovel := true ;
49746: LD_ADDR_EXP 70
49750: PUSH
49751: LD_INT 1
49753: ST_TO_ADDR
// if p3 = 25 then
49754: LD_VAR 0 3
49758: PUSH
49759: LD_INT 25
49761: EQUAL
49762: IFFALSE 49772
// sSheik := true ;
49764: LD_ADDR_EXP 71
49768: PUSH
49769: LD_INT 1
49771: ST_TO_ADDR
// if p3 = 26 then
49772: LD_VAR 0 3
49776: PUSH
49777: LD_INT 26
49779: EQUAL
49780: IFFALSE 49790
// sEarthquake := true ;
49782: LD_ADDR_EXP 73
49786: PUSH
49787: LD_INT 1
49789: ST_TO_ADDR
// if p3 = 27 then
49790: LD_VAR 0 3
49794: PUSH
49795: LD_INT 27
49797: EQUAL
49798: IFFALSE 49808
// sAI := true ;
49800: LD_ADDR_EXP 74
49804: PUSH
49805: LD_INT 1
49807: ST_TO_ADDR
// if p3 = 28 then
49808: LD_VAR 0 3
49812: PUSH
49813: LD_INT 28
49815: EQUAL
49816: IFFALSE 49826
// sCargo := true ;
49818: LD_ADDR_EXP 77
49822: PUSH
49823: LD_INT 1
49825: ST_TO_ADDR
// if p3 = 29 then
49826: LD_VAR 0 3
49830: PUSH
49831: LD_INT 29
49833: EQUAL
49834: IFFALSE 49844
// sDLaser := true ;
49836: LD_ADDR_EXP 78
49840: PUSH
49841: LD_INT 1
49843: ST_TO_ADDR
// if p3 = 30 then
49844: LD_VAR 0 3
49848: PUSH
49849: LD_INT 30
49851: EQUAL
49852: IFFALSE 49862
// sExchange := true ;
49854: LD_ADDR_EXP 79
49858: PUSH
49859: LD_INT 1
49861: ST_TO_ADDR
// if p3 = 31 then
49862: LD_VAR 0 3
49866: PUSH
49867: LD_INT 31
49869: EQUAL
49870: IFFALSE 49880
// sFac := true ;
49872: LD_ADDR_EXP 80
49876: PUSH
49877: LD_INT 1
49879: ST_TO_ADDR
// if p3 = 32 then
49880: LD_VAR 0 3
49884: PUSH
49885: LD_INT 32
49887: EQUAL
49888: IFFALSE 49898
// sPower := true ;
49890: LD_ADDR_EXP 81
49894: PUSH
49895: LD_INT 1
49897: ST_TO_ADDR
// if p3 = 33 then
49898: LD_VAR 0 3
49902: PUSH
49903: LD_INT 33
49905: EQUAL
49906: IFFALSE 49916
// sRandom := true ;
49908: LD_ADDR_EXP 82
49912: PUSH
49913: LD_INT 1
49915: ST_TO_ADDR
// if p3 = 34 then
49916: LD_VAR 0 3
49920: PUSH
49921: LD_INT 34
49923: EQUAL
49924: IFFALSE 49934
// sShield := true ;
49926: LD_ADDR_EXP 83
49930: PUSH
49931: LD_INT 1
49933: ST_TO_ADDR
// if p3 = 35 then
49934: LD_VAR 0 3
49938: PUSH
49939: LD_INT 35
49941: EQUAL
49942: IFFALSE 49952
// sTime := true ;
49944: LD_ADDR_EXP 84
49948: PUSH
49949: LD_INT 1
49951: ST_TO_ADDR
// if p3 = 36 then
49952: LD_VAR 0 3
49956: PUSH
49957: LD_INT 36
49959: EQUAL
49960: IFFALSE 49970
// sTools := true ;
49962: LD_ADDR_EXP 85
49966: PUSH
49967: LD_INT 1
49969: ST_TO_ADDR
// if p3 = 101 then
49970: LD_VAR 0 3
49974: PUSH
49975: LD_INT 101
49977: EQUAL
49978: IFFALSE 49988
// sSold := true ;
49980: LD_ADDR_EXP 50
49984: PUSH
49985: LD_INT 1
49987: ST_TO_ADDR
// if p3 = 102 then
49988: LD_VAR 0 3
49992: PUSH
49993: LD_INT 102
49995: EQUAL
49996: IFFALSE 50006
// sDiff := true ;
49998: LD_ADDR_EXP 51
50002: PUSH
50003: LD_INT 1
50005: ST_TO_ADDR
// if p3 = 103 then
50006: LD_VAR 0 3
50010: PUSH
50011: LD_INT 103
50013: EQUAL
50014: IFFALSE 50024
// sFog := true ;
50016: LD_ADDR_EXP 54
50020: PUSH
50021: LD_INT 1
50023: ST_TO_ADDR
// if p3 = 104 then
50024: LD_VAR 0 3
50028: PUSH
50029: LD_INT 104
50031: EQUAL
50032: IFFALSE 50042
// sReset := true ;
50034: LD_ADDR_EXP 55
50038: PUSH
50039: LD_INT 1
50041: ST_TO_ADDR
// if p3 = 105 then
50042: LD_VAR 0 3
50046: PUSH
50047: LD_INT 105
50049: EQUAL
50050: IFFALSE 50060
// sSun := true ;
50052: LD_ADDR_EXP 56
50056: PUSH
50057: LD_INT 1
50059: ST_TO_ADDR
// if p3 = 106 then
50060: LD_VAR 0 3
50064: PUSH
50065: LD_INT 106
50067: EQUAL
50068: IFFALSE 50078
// sTiger := true ;
50070: LD_ADDR_EXP 52
50074: PUSH
50075: LD_INT 1
50077: ST_TO_ADDR
// if p3 = 107 then
50078: LD_VAR 0 3
50082: PUSH
50083: LD_INT 107
50085: EQUAL
50086: IFFALSE 50096
// sBomb := true ;
50088: LD_ADDR_EXP 53
50092: PUSH
50093: LD_INT 1
50095: ST_TO_ADDR
// if p3 = 108 then
50096: LD_VAR 0 3
50100: PUSH
50101: LD_INT 108
50103: EQUAL
50104: IFFALSE 50114
// sWound := true ;
50106: LD_ADDR_EXP 61
50110: PUSH
50111: LD_INT 1
50113: ST_TO_ADDR
// if p3 = 109 then
50114: LD_VAR 0 3
50118: PUSH
50119: LD_INT 109
50121: EQUAL
50122: IFFALSE 50132
// sBetray := true ;
50124: LD_ADDR_EXP 65
50128: PUSH
50129: LD_INT 1
50131: ST_TO_ADDR
// if p3 = 110 then
50132: LD_VAR 0 3
50136: PUSH
50137: LD_INT 110
50139: EQUAL
50140: IFFALSE 50150
// sContamin := true ;
50142: LD_ADDR_EXP 66
50146: PUSH
50147: LD_INT 1
50149: ST_TO_ADDR
// if p3 = 111 then
50150: LD_VAR 0 3
50154: PUSH
50155: LD_INT 111
50157: EQUAL
50158: IFFALSE 50168
// sOil := true ;
50160: LD_ADDR_EXP 68
50164: PUSH
50165: LD_INT 1
50167: ST_TO_ADDR
// if p3 = 112 then
50168: LD_VAR 0 3
50172: PUSH
50173: LD_INT 112
50175: EQUAL
50176: IFFALSE 50186
// sStu := true ;
50178: LD_ADDR_EXP 72
50182: PUSH
50183: LD_INT 1
50185: ST_TO_ADDR
// if p3 = 113 then
50186: LD_VAR 0 3
50190: PUSH
50191: LD_INT 113
50193: EQUAL
50194: IFFALSE 50204
// sBazooka := true ;
50196: LD_ADDR_EXP 75
50200: PUSH
50201: LD_INT 1
50203: ST_TO_ADDR
// if p3 = 114 then
50204: LD_VAR 0 3
50208: PUSH
50209: LD_INT 114
50211: EQUAL
50212: IFFALSE 50222
// sMortar := true ;
50214: LD_ADDR_EXP 76
50218: PUSH
50219: LD_INT 1
50221: ST_TO_ADDR
// if p3 = 115 then
50222: LD_VAR 0 3
50226: PUSH
50227: LD_INT 115
50229: EQUAL
50230: IFFALSE 50240
// sRanger := true ;
50232: LD_ADDR_EXP 86
50236: PUSH
50237: LD_INT 1
50239: ST_TO_ADDR
// if p3 = 116 then
50240: LD_VAR 0 3
50244: PUSH
50245: LD_INT 116
50247: EQUAL
50248: IFFALSE 50258
// sComputer := true ;
50250: LD_ADDR_EXP 87
50254: PUSH
50255: LD_INT 1
50257: ST_TO_ADDR
// if p3 = 117 then
50258: LD_VAR 0 3
50262: PUSH
50263: LD_INT 117
50265: EQUAL
50266: IFFALSE 50276
// s30 := true ;
50268: LD_ADDR_EXP 88
50272: PUSH
50273: LD_INT 1
50275: ST_TO_ADDR
// if p3 = 118 then
50276: LD_VAR 0 3
50280: PUSH
50281: LD_INT 118
50283: EQUAL
50284: IFFALSE 50294
// s60 := true ;
50286: LD_ADDR_EXP 89
50290: PUSH
50291: LD_INT 1
50293: ST_TO_ADDR
// end ; if p2 = hack_mode then
50294: LD_VAR 0 2
50298: PUSH
50299: LD_INT 101
50301: EQUAL
50302: IFFALSE 50430
// begin case p3 of 1 :
50304: LD_VAR 0 3
50308: PUSH
50309: LD_INT 1
50311: DOUBLE
50312: EQUAL
50313: IFTRUE 50317
50315: GO 50324
50317: POP
// hHackUnlimitedResources ; 2 :
50318: CALL 62569 0 0
50322: GO 50430
50324: LD_INT 2
50326: DOUBLE
50327: EQUAL
50328: IFTRUE 50332
50330: GO 50339
50332: POP
// hHackSetLevel10 ; 3 :
50333: CALL 62702 0 0
50337: GO 50430
50339: LD_INT 3
50341: DOUBLE
50342: EQUAL
50343: IFTRUE 50347
50345: GO 50354
50347: POP
// hHackSetLevel10YourUnits ; 4 :
50348: CALL 62787 0 0
50352: GO 50430
50354: LD_INT 4
50356: DOUBLE
50357: EQUAL
50358: IFTRUE 50362
50360: GO 50369
50362: POP
// hHackInvincible ; 5 :
50363: CALL 63235 0 0
50367: GO 50430
50369: LD_INT 5
50371: DOUBLE
50372: EQUAL
50373: IFTRUE 50377
50375: GO 50384
50377: POP
// hHackInvisible ; 6 :
50378: CALL 63346 0 0
50382: GO 50430
50384: LD_INT 6
50386: DOUBLE
50387: EQUAL
50388: IFTRUE 50392
50390: GO 50399
50392: POP
// hHackChangeYourSide ; 7 :
50393: CALL 63403 0 0
50397: GO 50430
50399: LD_INT 7
50401: DOUBLE
50402: EQUAL
50403: IFTRUE 50407
50405: GO 50414
50407: POP
// hHackChangeUnitSide ; 8 :
50408: CALL 63445 0 0
50412: GO 50430
50414: LD_INT 8
50416: DOUBLE
50417: EQUAL
50418: IFTRUE 50422
50420: GO 50429
50422: POP
// hHackFog ; end ;
50423: CALL 63546 0 0
50427: GO 50430
50429: POP
// end ; if p2 = game_save_mode then
50430: LD_VAR 0 2
50434: PUSH
50435: LD_INT 102
50437: EQUAL
50438: IFFALSE 50493
// begin if p3 = 1 then
50440: LD_VAR 0 3
50444: PUSH
50445: LD_INT 1
50447: EQUAL
50448: IFFALSE 50460
// globalGameSaveCounter := p4 ;
50450: LD_ADDR_EXP 32
50454: PUSH
50455: LD_VAR 0 4
50459: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
50460: LD_VAR 0 3
50464: PUSH
50465: LD_INT 2
50467: EQUAL
50468: PUSH
50469: LD_EXP 32
50473: AND
50474: IFFALSE 50493
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50476: LD_STRING setGameSaveCounter(
50478: PUSH
50479: LD_EXP 32
50483: STR
50484: PUSH
50485: LD_STRING )
50487: STR
50488: PPUSH
50489: CALL_OW 559
// end ; end ;
50493: LD_VAR 0 7
50497: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
50498: LD_INT 0
50500: PPUSH
// streamModeActive := false ;
50501: LD_ADDR_EXP 33
50505: PUSH
50506: LD_INT 0
50508: ST_TO_ADDR
// normalCounter := 36 ;
50509: LD_ADDR_EXP 34
50513: PUSH
50514: LD_INT 36
50516: ST_TO_ADDR
// hardcoreCounter := 18 ;
50517: LD_ADDR_EXP 35
50521: PUSH
50522: LD_INT 18
50524: ST_TO_ADDR
// sRocket := false ;
50525: LD_ADDR_EXP 38
50529: PUSH
50530: LD_INT 0
50532: ST_TO_ADDR
// sSpeed := false ;
50533: LD_ADDR_EXP 37
50537: PUSH
50538: LD_INT 0
50540: ST_TO_ADDR
// sEngine := false ;
50541: LD_ADDR_EXP 39
50545: PUSH
50546: LD_INT 0
50548: ST_TO_ADDR
// sSpec := false ;
50549: LD_ADDR_EXP 36
50553: PUSH
50554: LD_INT 0
50556: ST_TO_ADDR
// sLevel := false ;
50557: LD_ADDR_EXP 40
50561: PUSH
50562: LD_INT 0
50564: ST_TO_ADDR
// sArmoury := false ;
50565: LD_ADDR_EXP 41
50569: PUSH
50570: LD_INT 0
50572: ST_TO_ADDR
// sRadar := false ;
50573: LD_ADDR_EXP 42
50577: PUSH
50578: LD_INT 0
50580: ST_TO_ADDR
// sBunker := false ;
50581: LD_ADDR_EXP 43
50585: PUSH
50586: LD_INT 0
50588: ST_TO_ADDR
// sHack := false ;
50589: LD_ADDR_EXP 44
50593: PUSH
50594: LD_INT 0
50596: ST_TO_ADDR
// sFire := false ;
50597: LD_ADDR_EXP 45
50601: PUSH
50602: LD_INT 0
50604: ST_TO_ADDR
// sRefresh := false ;
50605: LD_ADDR_EXP 46
50609: PUSH
50610: LD_INT 0
50612: ST_TO_ADDR
// sExp := false ;
50613: LD_ADDR_EXP 47
50617: PUSH
50618: LD_INT 0
50620: ST_TO_ADDR
// sDepot := false ;
50621: LD_ADDR_EXP 48
50625: PUSH
50626: LD_INT 0
50628: ST_TO_ADDR
// sFlag := false ;
50629: LD_ADDR_EXP 49
50633: PUSH
50634: LD_INT 0
50636: ST_TO_ADDR
// sKamikadze := false ;
50637: LD_ADDR_EXP 57
50641: PUSH
50642: LD_INT 0
50644: ST_TO_ADDR
// sTroll := false ;
50645: LD_ADDR_EXP 58
50649: PUSH
50650: LD_INT 0
50652: ST_TO_ADDR
// sSlow := false ;
50653: LD_ADDR_EXP 59
50657: PUSH
50658: LD_INT 0
50660: ST_TO_ADDR
// sLack := false ;
50661: LD_ADDR_EXP 60
50665: PUSH
50666: LD_INT 0
50668: ST_TO_ADDR
// sTank := false ;
50669: LD_ADDR_EXP 62
50673: PUSH
50674: LD_INT 0
50676: ST_TO_ADDR
// sRemote := false ;
50677: LD_ADDR_EXP 63
50681: PUSH
50682: LD_INT 0
50684: ST_TO_ADDR
// sPowell := false ;
50685: LD_ADDR_EXP 64
50689: PUSH
50690: LD_INT 0
50692: ST_TO_ADDR
// sTeleport := false ;
50693: LD_ADDR_EXP 67
50697: PUSH
50698: LD_INT 0
50700: ST_TO_ADDR
// sOilTower := false ;
50701: LD_ADDR_EXP 69
50705: PUSH
50706: LD_INT 0
50708: ST_TO_ADDR
// sShovel := false ;
50709: LD_ADDR_EXP 70
50713: PUSH
50714: LD_INT 0
50716: ST_TO_ADDR
// sSheik := false ;
50717: LD_ADDR_EXP 71
50721: PUSH
50722: LD_INT 0
50724: ST_TO_ADDR
// sEarthquake := false ;
50725: LD_ADDR_EXP 73
50729: PUSH
50730: LD_INT 0
50732: ST_TO_ADDR
// sAI := false ;
50733: LD_ADDR_EXP 74
50737: PUSH
50738: LD_INT 0
50740: ST_TO_ADDR
// sCargo := false ;
50741: LD_ADDR_EXP 77
50745: PUSH
50746: LD_INT 0
50748: ST_TO_ADDR
// sDLaser := false ;
50749: LD_ADDR_EXP 78
50753: PUSH
50754: LD_INT 0
50756: ST_TO_ADDR
// sExchange := false ;
50757: LD_ADDR_EXP 79
50761: PUSH
50762: LD_INT 0
50764: ST_TO_ADDR
// sFac := false ;
50765: LD_ADDR_EXP 80
50769: PUSH
50770: LD_INT 0
50772: ST_TO_ADDR
// sPower := false ;
50773: LD_ADDR_EXP 81
50777: PUSH
50778: LD_INT 0
50780: ST_TO_ADDR
// sRandom := false ;
50781: LD_ADDR_EXP 82
50785: PUSH
50786: LD_INT 0
50788: ST_TO_ADDR
// sShield := false ;
50789: LD_ADDR_EXP 83
50793: PUSH
50794: LD_INT 0
50796: ST_TO_ADDR
// sTime := false ;
50797: LD_ADDR_EXP 84
50801: PUSH
50802: LD_INT 0
50804: ST_TO_ADDR
// sTools := false ;
50805: LD_ADDR_EXP 85
50809: PUSH
50810: LD_INT 0
50812: ST_TO_ADDR
// sSold := false ;
50813: LD_ADDR_EXP 50
50817: PUSH
50818: LD_INT 0
50820: ST_TO_ADDR
// sDiff := false ;
50821: LD_ADDR_EXP 51
50825: PUSH
50826: LD_INT 0
50828: ST_TO_ADDR
// sFog := false ;
50829: LD_ADDR_EXP 54
50833: PUSH
50834: LD_INT 0
50836: ST_TO_ADDR
// sReset := false ;
50837: LD_ADDR_EXP 55
50841: PUSH
50842: LD_INT 0
50844: ST_TO_ADDR
// sSun := false ;
50845: LD_ADDR_EXP 56
50849: PUSH
50850: LD_INT 0
50852: ST_TO_ADDR
// sTiger := false ;
50853: LD_ADDR_EXP 52
50857: PUSH
50858: LD_INT 0
50860: ST_TO_ADDR
// sBomb := false ;
50861: LD_ADDR_EXP 53
50865: PUSH
50866: LD_INT 0
50868: ST_TO_ADDR
// sWound := false ;
50869: LD_ADDR_EXP 61
50873: PUSH
50874: LD_INT 0
50876: ST_TO_ADDR
// sBetray := false ;
50877: LD_ADDR_EXP 65
50881: PUSH
50882: LD_INT 0
50884: ST_TO_ADDR
// sContamin := false ;
50885: LD_ADDR_EXP 66
50889: PUSH
50890: LD_INT 0
50892: ST_TO_ADDR
// sOil := false ;
50893: LD_ADDR_EXP 68
50897: PUSH
50898: LD_INT 0
50900: ST_TO_ADDR
// sStu := false ;
50901: LD_ADDR_EXP 72
50905: PUSH
50906: LD_INT 0
50908: ST_TO_ADDR
// sBazooka := false ;
50909: LD_ADDR_EXP 75
50913: PUSH
50914: LD_INT 0
50916: ST_TO_ADDR
// sMortar := false ;
50917: LD_ADDR_EXP 76
50921: PUSH
50922: LD_INT 0
50924: ST_TO_ADDR
// sRanger := false ;
50925: LD_ADDR_EXP 86
50929: PUSH
50930: LD_INT 0
50932: ST_TO_ADDR
// sComputer := false ;
50933: LD_ADDR_EXP 87
50937: PUSH
50938: LD_INT 0
50940: ST_TO_ADDR
// s30 := false ;
50941: LD_ADDR_EXP 88
50945: PUSH
50946: LD_INT 0
50948: ST_TO_ADDR
// s60 := false ;
50949: LD_ADDR_EXP 89
50953: PUSH
50954: LD_INT 0
50956: ST_TO_ADDR
// end ;
50957: LD_VAR 0 1
50961: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
50962: LD_INT 0
50964: PPUSH
50965: PPUSH
50966: PPUSH
50967: PPUSH
50968: PPUSH
50969: PPUSH
50970: PPUSH
// result := [ ] ;
50971: LD_ADDR_VAR 0 2
50975: PUSH
50976: EMPTY
50977: ST_TO_ADDR
// if campaign_id = 1 then
50978: LD_OWVAR 69
50982: PUSH
50983: LD_INT 1
50985: EQUAL
50986: IFFALSE 54152
// begin case mission_number of 1 :
50988: LD_OWVAR 70
50992: PUSH
50993: LD_INT 1
50995: DOUBLE
50996: EQUAL
50997: IFTRUE 51001
50999: GO 51077
51001: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
51002: LD_ADDR_VAR 0 2
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: LD_INT 4
51012: PUSH
51013: LD_INT 11
51015: PUSH
51016: LD_INT 12
51018: PUSH
51019: LD_INT 15
51021: PUSH
51022: LD_INT 16
51024: PUSH
51025: LD_INT 22
51027: PUSH
51028: LD_INT 23
51030: PUSH
51031: LD_INT 26
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 101
51047: PUSH
51048: LD_INT 102
51050: PUSH
51051: LD_INT 106
51053: PUSH
51054: LD_INT 116
51056: PUSH
51057: LD_INT 117
51059: PUSH
51060: LD_INT 118
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: ST_TO_ADDR
51075: GO 54150
51077: LD_INT 2
51079: DOUBLE
51080: EQUAL
51081: IFTRUE 51085
51083: GO 51169
51085: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
51086: LD_ADDR_VAR 0 2
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: LD_INT 4
51096: PUSH
51097: LD_INT 11
51099: PUSH
51100: LD_INT 12
51102: PUSH
51103: LD_INT 15
51105: PUSH
51106: LD_INT 16
51108: PUSH
51109: LD_INT 22
51111: PUSH
51112: LD_INT 23
51114: PUSH
51115: LD_INT 26
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 101
51131: PUSH
51132: LD_INT 102
51134: PUSH
51135: LD_INT 105
51137: PUSH
51138: LD_INT 106
51140: PUSH
51141: LD_INT 108
51143: PUSH
51144: LD_INT 116
51146: PUSH
51147: LD_INT 117
51149: PUSH
51150: LD_INT 118
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: ST_TO_ADDR
51167: GO 54150
51169: LD_INT 3
51171: DOUBLE
51172: EQUAL
51173: IFTRUE 51177
51175: GO 51265
51177: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
51178: LD_ADDR_VAR 0 2
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: LD_INT 4
51188: PUSH
51189: LD_INT 5
51191: PUSH
51192: LD_INT 11
51194: PUSH
51195: LD_INT 12
51197: PUSH
51198: LD_INT 15
51200: PUSH
51201: LD_INT 16
51203: PUSH
51204: LD_INT 22
51206: PUSH
51207: LD_INT 26
51209: PUSH
51210: LD_INT 36
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 101
51227: PUSH
51228: LD_INT 102
51230: PUSH
51231: LD_INT 105
51233: PUSH
51234: LD_INT 106
51236: PUSH
51237: LD_INT 108
51239: PUSH
51240: LD_INT 116
51242: PUSH
51243: LD_INT 117
51245: PUSH
51246: LD_INT 118
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: ST_TO_ADDR
51263: GO 54150
51265: LD_INT 4
51267: DOUBLE
51268: EQUAL
51269: IFTRUE 51273
51271: GO 51369
51273: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
51274: LD_ADDR_VAR 0 2
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: LD_INT 4
51284: PUSH
51285: LD_INT 5
51287: PUSH
51288: LD_INT 8
51290: PUSH
51291: LD_INT 11
51293: PUSH
51294: LD_INT 12
51296: PUSH
51297: LD_INT 15
51299: PUSH
51300: LD_INT 16
51302: PUSH
51303: LD_INT 22
51305: PUSH
51306: LD_INT 23
51308: PUSH
51309: LD_INT 26
51311: PUSH
51312: LD_INT 36
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 101
51331: PUSH
51332: LD_INT 102
51334: PUSH
51335: LD_INT 105
51337: PUSH
51338: LD_INT 106
51340: PUSH
51341: LD_INT 108
51343: PUSH
51344: LD_INT 116
51346: PUSH
51347: LD_INT 117
51349: PUSH
51350: LD_INT 118
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: ST_TO_ADDR
51367: GO 54150
51369: LD_INT 5
51371: DOUBLE
51372: EQUAL
51373: IFTRUE 51377
51375: GO 51489
51377: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
51378: LD_ADDR_VAR 0 2
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: LD_INT 4
51388: PUSH
51389: LD_INT 5
51391: PUSH
51392: LD_INT 6
51394: PUSH
51395: LD_INT 8
51397: PUSH
51398: LD_INT 11
51400: PUSH
51401: LD_INT 12
51403: PUSH
51404: LD_INT 15
51406: PUSH
51407: LD_INT 16
51409: PUSH
51410: LD_INT 22
51412: PUSH
51413: LD_INT 23
51415: PUSH
51416: LD_INT 25
51418: PUSH
51419: LD_INT 26
51421: PUSH
51422: LD_INT 36
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 101
51443: PUSH
51444: LD_INT 102
51446: PUSH
51447: LD_INT 105
51449: PUSH
51450: LD_INT 106
51452: PUSH
51453: LD_INT 108
51455: PUSH
51456: LD_INT 109
51458: PUSH
51459: LD_INT 112
51461: PUSH
51462: LD_INT 116
51464: PUSH
51465: LD_INT 117
51467: PUSH
51468: LD_INT 118
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: ST_TO_ADDR
51487: GO 54150
51489: LD_INT 6
51491: DOUBLE
51492: EQUAL
51493: IFTRUE 51497
51495: GO 51629
51497: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
51498: LD_ADDR_VAR 0 2
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: LD_INT 4
51508: PUSH
51509: LD_INT 5
51511: PUSH
51512: LD_INT 6
51514: PUSH
51515: LD_INT 8
51517: PUSH
51518: LD_INT 11
51520: PUSH
51521: LD_INT 12
51523: PUSH
51524: LD_INT 15
51526: PUSH
51527: LD_INT 16
51529: PUSH
51530: LD_INT 20
51532: PUSH
51533: LD_INT 21
51535: PUSH
51536: LD_INT 22
51538: PUSH
51539: LD_INT 23
51541: PUSH
51542: LD_INT 25
51544: PUSH
51545: LD_INT 26
51547: PUSH
51548: LD_INT 30
51550: PUSH
51551: LD_INT 31
51553: PUSH
51554: LD_INT 32
51556: PUSH
51557: LD_INT 36
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 101
51583: PUSH
51584: LD_INT 102
51586: PUSH
51587: LD_INT 105
51589: PUSH
51590: LD_INT 106
51592: PUSH
51593: LD_INT 108
51595: PUSH
51596: LD_INT 109
51598: PUSH
51599: LD_INT 112
51601: PUSH
51602: LD_INT 116
51604: PUSH
51605: LD_INT 117
51607: PUSH
51608: LD_INT 118
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: ST_TO_ADDR
51627: GO 54150
51629: LD_INT 7
51631: DOUBLE
51632: EQUAL
51633: IFTRUE 51637
51635: GO 51749
51637: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
51638: LD_ADDR_VAR 0 2
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: LD_INT 4
51648: PUSH
51649: LD_INT 5
51651: PUSH
51652: LD_INT 7
51654: PUSH
51655: LD_INT 11
51657: PUSH
51658: LD_INT 12
51660: PUSH
51661: LD_INT 15
51663: PUSH
51664: LD_INT 16
51666: PUSH
51667: LD_INT 20
51669: PUSH
51670: LD_INT 21
51672: PUSH
51673: LD_INT 22
51675: PUSH
51676: LD_INT 23
51678: PUSH
51679: LD_INT 25
51681: PUSH
51682: LD_INT 26
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 101
51703: PUSH
51704: LD_INT 102
51706: PUSH
51707: LD_INT 103
51709: PUSH
51710: LD_INT 105
51712: PUSH
51713: LD_INT 106
51715: PUSH
51716: LD_INT 108
51718: PUSH
51719: LD_INT 112
51721: PUSH
51722: LD_INT 116
51724: PUSH
51725: LD_INT 117
51727: PUSH
51728: LD_INT 118
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: ST_TO_ADDR
51747: GO 54150
51749: LD_INT 8
51751: DOUBLE
51752: EQUAL
51753: IFTRUE 51757
51755: GO 51897
51757: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
51758: LD_ADDR_VAR 0 2
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: LD_INT 4
51768: PUSH
51769: LD_INT 5
51771: PUSH
51772: LD_INT 6
51774: PUSH
51775: LD_INT 7
51777: PUSH
51778: LD_INT 8
51780: PUSH
51781: LD_INT 11
51783: PUSH
51784: LD_INT 12
51786: PUSH
51787: LD_INT 15
51789: PUSH
51790: LD_INT 16
51792: PUSH
51793: LD_INT 20
51795: PUSH
51796: LD_INT 21
51798: PUSH
51799: LD_INT 22
51801: PUSH
51802: LD_INT 23
51804: PUSH
51805: LD_INT 25
51807: PUSH
51808: LD_INT 26
51810: PUSH
51811: LD_INT 30
51813: PUSH
51814: LD_INT 31
51816: PUSH
51817: LD_INT 32
51819: PUSH
51820: LD_INT 36
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 101
51847: PUSH
51848: LD_INT 102
51850: PUSH
51851: LD_INT 103
51853: PUSH
51854: LD_INT 105
51856: PUSH
51857: LD_INT 106
51859: PUSH
51860: LD_INT 108
51862: PUSH
51863: LD_INT 109
51865: PUSH
51866: LD_INT 112
51868: PUSH
51869: LD_INT 116
51871: PUSH
51872: LD_INT 117
51874: PUSH
51875: LD_INT 118
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: ST_TO_ADDR
51895: GO 54150
51897: LD_INT 9
51899: DOUBLE
51900: EQUAL
51901: IFTRUE 51905
51903: GO 52053
51905: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
51906: LD_ADDR_VAR 0 2
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: LD_INT 4
51916: PUSH
51917: LD_INT 5
51919: PUSH
51920: LD_INT 6
51922: PUSH
51923: LD_INT 7
51925: PUSH
51926: LD_INT 8
51928: PUSH
51929: LD_INT 11
51931: PUSH
51932: LD_INT 12
51934: PUSH
51935: LD_INT 15
51937: PUSH
51938: LD_INT 16
51940: PUSH
51941: LD_INT 20
51943: PUSH
51944: LD_INT 21
51946: PUSH
51947: LD_INT 22
51949: PUSH
51950: LD_INT 23
51952: PUSH
51953: LD_INT 25
51955: PUSH
51956: LD_INT 26
51958: PUSH
51959: LD_INT 28
51961: PUSH
51962: LD_INT 30
51964: PUSH
51965: LD_INT 31
51967: PUSH
51968: LD_INT 32
51970: PUSH
51971: LD_INT 36
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 101
51999: PUSH
52000: LD_INT 102
52002: PUSH
52003: LD_INT 103
52005: PUSH
52006: LD_INT 105
52008: PUSH
52009: LD_INT 106
52011: PUSH
52012: LD_INT 108
52014: PUSH
52015: LD_INT 109
52017: PUSH
52018: LD_INT 112
52020: PUSH
52021: LD_INT 114
52023: PUSH
52024: LD_INT 116
52026: PUSH
52027: LD_INT 117
52029: PUSH
52030: LD_INT 118
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: ST_TO_ADDR
52051: GO 54150
52053: LD_INT 10
52055: DOUBLE
52056: EQUAL
52057: IFTRUE 52061
52059: GO 52257
52061: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
52062: LD_ADDR_VAR 0 2
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 4
52072: PUSH
52073: LD_INT 5
52075: PUSH
52076: LD_INT 6
52078: PUSH
52079: LD_INT 7
52081: PUSH
52082: LD_INT 8
52084: PUSH
52085: LD_INT 9
52087: PUSH
52088: LD_INT 10
52090: PUSH
52091: LD_INT 11
52093: PUSH
52094: LD_INT 12
52096: PUSH
52097: LD_INT 13
52099: PUSH
52100: LD_INT 14
52102: PUSH
52103: LD_INT 15
52105: PUSH
52106: LD_INT 16
52108: PUSH
52109: LD_INT 17
52111: PUSH
52112: LD_INT 18
52114: PUSH
52115: LD_INT 19
52117: PUSH
52118: LD_INT 20
52120: PUSH
52121: LD_INT 21
52123: PUSH
52124: LD_INT 22
52126: PUSH
52127: LD_INT 23
52129: PUSH
52130: LD_INT 24
52132: PUSH
52133: LD_INT 25
52135: PUSH
52136: LD_INT 26
52138: PUSH
52139: LD_INT 28
52141: PUSH
52142: LD_INT 30
52144: PUSH
52145: LD_INT 31
52147: PUSH
52148: LD_INT 32
52150: PUSH
52151: LD_INT 36
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 101
52187: PUSH
52188: LD_INT 102
52190: PUSH
52191: LD_INT 103
52193: PUSH
52194: LD_INT 104
52196: PUSH
52197: LD_INT 105
52199: PUSH
52200: LD_INT 106
52202: PUSH
52203: LD_INT 107
52205: PUSH
52206: LD_INT 108
52208: PUSH
52209: LD_INT 109
52211: PUSH
52212: LD_INT 110
52214: PUSH
52215: LD_INT 111
52217: PUSH
52218: LD_INT 112
52220: PUSH
52221: LD_INT 114
52223: PUSH
52224: LD_INT 116
52226: PUSH
52227: LD_INT 117
52229: PUSH
52230: LD_INT 118
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: ST_TO_ADDR
52255: GO 54150
52257: LD_INT 11
52259: DOUBLE
52260: EQUAL
52261: IFTRUE 52265
52263: GO 52469
52265: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
52266: LD_ADDR_VAR 0 2
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 3
52276: PUSH
52277: LD_INT 4
52279: PUSH
52280: LD_INT 5
52282: PUSH
52283: LD_INT 6
52285: PUSH
52286: LD_INT 7
52288: PUSH
52289: LD_INT 8
52291: PUSH
52292: LD_INT 9
52294: PUSH
52295: LD_INT 10
52297: PUSH
52298: LD_INT 11
52300: PUSH
52301: LD_INT 12
52303: PUSH
52304: LD_INT 13
52306: PUSH
52307: LD_INT 14
52309: PUSH
52310: LD_INT 15
52312: PUSH
52313: LD_INT 16
52315: PUSH
52316: LD_INT 17
52318: PUSH
52319: LD_INT 18
52321: PUSH
52322: LD_INT 19
52324: PUSH
52325: LD_INT 20
52327: PUSH
52328: LD_INT 21
52330: PUSH
52331: LD_INT 22
52333: PUSH
52334: LD_INT 23
52336: PUSH
52337: LD_INT 24
52339: PUSH
52340: LD_INT 25
52342: PUSH
52343: LD_INT 26
52345: PUSH
52346: LD_INT 28
52348: PUSH
52349: LD_INT 30
52351: PUSH
52352: LD_INT 31
52354: PUSH
52355: LD_INT 32
52357: PUSH
52358: LD_INT 34
52360: PUSH
52361: LD_INT 36
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 101
52399: PUSH
52400: LD_INT 102
52402: PUSH
52403: LD_INT 103
52405: PUSH
52406: LD_INT 104
52408: PUSH
52409: LD_INT 105
52411: PUSH
52412: LD_INT 106
52414: PUSH
52415: LD_INT 107
52417: PUSH
52418: LD_INT 108
52420: PUSH
52421: LD_INT 109
52423: PUSH
52424: LD_INT 110
52426: PUSH
52427: LD_INT 111
52429: PUSH
52430: LD_INT 112
52432: PUSH
52433: LD_INT 114
52435: PUSH
52436: LD_INT 116
52438: PUSH
52439: LD_INT 117
52441: PUSH
52442: LD_INT 118
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: ST_TO_ADDR
52467: GO 54150
52469: LD_INT 12
52471: DOUBLE
52472: EQUAL
52473: IFTRUE 52477
52475: GO 52697
52477: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
52478: LD_ADDR_VAR 0 2
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: LD_INT 4
52494: PUSH
52495: LD_INT 5
52497: PUSH
52498: LD_INT 6
52500: PUSH
52501: LD_INT 7
52503: PUSH
52504: LD_INT 8
52506: PUSH
52507: LD_INT 9
52509: PUSH
52510: LD_INT 10
52512: PUSH
52513: LD_INT 11
52515: PUSH
52516: LD_INT 12
52518: PUSH
52519: LD_INT 13
52521: PUSH
52522: LD_INT 14
52524: PUSH
52525: LD_INT 15
52527: PUSH
52528: LD_INT 16
52530: PUSH
52531: LD_INT 17
52533: PUSH
52534: LD_INT 18
52536: PUSH
52537: LD_INT 19
52539: PUSH
52540: LD_INT 20
52542: PUSH
52543: LD_INT 21
52545: PUSH
52546: LD_INT 22
52548: PUSH
52549: LD_INT 23
52551: PUSH
52552: LD_INT 24
52554: PUSH
52555: LD_INT 25
52557: PUSH
52558: LD_INT 26
52560: PUSH
52561: LD_INT 27
52563: PUSH
52564: LD_INT 28
52566: PUSH
52567: LD_INT 30
52569: PUSH
52570: LD_INT 31
52572: PUSH
52573: LD_INT 32
52575: PUSH
52576: LD_INT 33
52578: PUSH
52579: LD_INT 34
52581: PUSH
52582: LD_INT 36
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 101
52623: PUSH
52624: LD_INT 102
52626: PUSH
52627: LD_INT 103
52629: PUSH
52630: LD_INT 104
52632: PUSH
52633: LD_INT 105
52635: PUSH
52636: LD_INT 106
52638: PUSH
52639: LD_INT 107
52641: PUSH
52642: LD_INT 108
52644: PUSH
52645: LD_INT 109
52647: PUSH
52648: LD_INT 110
52650: PUSH
52651: LD_INT 111
52653: PUSH
52654: LD_INT 112
52656: PUSH
52657: LD_INT 113
52659: PUSH
52660: LD_INT 114
52662: PUSH
52663: LD_INT 116
52665: PUSH
52666: LD_INT 117
52668: PUSH
52669: LD_INT 118
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: ST_TO_ADDR
52695: GO 54150
52697: LD_INT 13
52699: DOUBLE
52700: EQUAL
52701: IFTRUE 52705
52703: GO 52913
52705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
52706: LD_ADDR_VAR 0 2
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: LD_INT 3
52719: PUSH
52720: LD_INT 4
52722: PUSH
52723: LD_INT 5
52725: PUSH
52726: LD_INT 8
52728: PUSH
52729: LD_INT 9
52731: PUSH
52732: LD_INT 10
52734: PUSH
52735: LD_INT 11
52737: PUSH
52738: LD_INT 12
52740: PUSH
52741: LD_INT 14
52743: PUSH
52744: LD_INT 15
52746: PUSH
52747: LD_INT 16
52749: PUSH
52750: LD_INT 17
52752: PUSH
52753: LD_INT 18
52755: PUSH
52756: LD_INT 19
52758: PUSH
52759: LD_INT 20
52761: PUSH
52762: LD_INT 21
52764: PUSH
52765: LD_INT 22
52767: PUSH
52768: LD_INT 23
52770: PUSH
52771: LD_INT 24
52773: PUSH
52774: LD_INT 25
52776: PUSH
52777: LD_INT 26
52779: PUSH
52780: LD_INT 27
52782: PUSH
52783: LD_INT 28
52785: PUSH
52786: LD_INT 30
52788: PUSH
52789: LD_INT 31
52791: PUSH
52792: LD_INT 32
52794: PUSH
52795: LD_INT 33
52797: PUSH
52798: LD_INT 34
52800: PUSH
52801: LD_INT 36
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 101
52839: PUSH
52840: LD_INT 102
52842: PUSH
52843: LD_INT 103
52845: PUSH
52846: LD_INT 104
52848: PUSH
52849: LD_INT 105
52851: PUSH
52852: LD_INT 106
52854: PUSH
52855: LD_INT 107
52857: PUSH
52858: LD_INT 108
52860: PUSH
52861: LD_INT 109
52863: PUSH
52864: LD_INT 110
52866: PUSH
52867: LD_INT 111
52869: PUSH
52870: LD_INT 112
52872: PUSH
52873: LD_INT 113
52875: PUSH
52876: LD_INT 114
52878: PUSH
52879: LD_INT 116
52881: PUSH
52882: LD_INT 117
52884: PUSH
52885: LD_INT 118
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: ST_TO_ADDR
52911: GO 54150
52913: LD_INT 14
52915: DOUBLE
52916: EQUAL
52917: IFTRUE 52921
52919: GO 53145
52921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
52922: LD_ADDR_VAR 0 2
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: LD_INT 4
52938: PUSH
52939: LD_INT 5
52941: PUSH
52942: LD_INT 6
52944: PUSH
52945: LD_INT 7
52947: PUSH
52948: LD_INT 8
52950: PUSH
52951: LD_INT 9
52953: PUSH
52954: LD_INT 10
52956: PUSH
52957: LD_INT 11
52959: PUSH
52960: LD_INT 12
52962: PUSH
52963: LD_INT 13
52965: PUSH
52966: LD_INT 14
52968: PUSH
52969: LD_INT 15
52971: PUSH
52972: LD_INT 16
52974: PUSH
52975: LD_INT 17
52977: PUSH
52978: LD_INT 18
52980: PUSH
52981: LD_INT 19
52983: PUSH
52984: LD_INT 20
52986: PUSH
52987: LD_INT 21
52989: PUSH
52990: LD_INT 22
52992: PUSH
52993: LD_INT 23
52995: PUSH
52996: LD_INT 24
52998: PUSH
52999: LD_INT 25
53001: PUSH
53002: LD_INT 26
53004: PUSH
53005: LD_INT 27
53007: PUSH
53008: LD_INT 28
53010: PUSH
53011: LD_INT 29
53013: PUSH
53014: LD_INT 30
53016: PUSH
53017: LD_INT 31
53019: PUSH
53020: LD_INT 32
53022: PUSH
53023: LD_INT 33
53025: PUSH
53026: LD_INT 34
53028: PUSH
53029: LD_INT 36
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 101
53071: PUSH
53072: LD_INT 102
53074: PUSH
53075: LD_INT 103
53077: PUSH
53078: LD_INT 104
53080: PUSH
53081: LD_INT 105
53083: PUSH
53084: LD_INT 106
53086: PUSH
53087: LD_INT 107
53089: PUSH
53090: LD_INT 108
53092: PUSH
53093: LD_INT 109
53095: PUSH
53096: LD_INT 110
53098: PUSH
53099: LD_INT 111
53101: PUSH
53102: LD_INT 112
53104: PUSH
53105: LD_INT 113
53107: PUSH
53108: LD_INT 114
53110: PUSH
53111: LD_INT 116
53113: PUSH
53114: LD_INT 117
53116: PUSH
53117: LD_INT 118
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: ST_TO_ADDR
53143: GO 54150
53145: LD_INT 15
53147: DOUBLE
53148: EQUAL
53149: IFTRUE 53153
53151: GO 53377
53153: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
53154: LD_ADDR_VAR 0 2
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: LD_INT 4
53170: PUSH
53171: LD_INT 5
53173: PUSH
53174: LD_INT 6
53176: PUSH
53177: LD_INT 7
53179: PUSH
53180: LD_INT 8
53182: PUSH
53183: LD_INT 9
53185: PUSH
53186: LD_INT 10
53188: PUSH
53189: LD_INT 11
53191: PUSH
53192: LD_INT 12
53194: PUSH
53195: LD_INT 13
53197: PUSH
53198: LD_INT 14
53200: PUSH
53201: LD_INT 15
53203: PUSH
53204: LD_INT 16
53206: PUSH
53207: LD_INT 17
53209: PUSH
53210: LD_INT 18
53212: PUSH
53213: LD_INT 19
53215: PUSH
53216: LD_INT 20
53218: PUSH
53219: LD_INT 21
53221: PUSH
53222: LD_INT 22
53224: PUSH
53225: LD_INT 23
53227: PUSH
53228: LD_INT 24
53230: PUSH
53231: LD_INT 25
53233: PUSH
53234: LD_INT 26
53236: PUSH
53237: LD_INT 27
53239: PUSH
53240: LD_INT 28
53242: PUSH
53243: LD_INT 29
53245: PUSH
53246: LD_INT 30
53248: PUSH
53249: LD_INT 31
53251: PUSH
53252: LD_INT 32
53254: PUSH
53255: LD_INT 33
53257: PUSH
53258: LD_INT 34
53260: PUSH
53261: LD_INT 36
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 101
53303: PUSH
53304: LD_INT 102
53306: PUSH
53307: LD_INT 103
53309: PUSH
53310: LD_INT 104
53312: PUSH
53313: LD_INT 105
53315: PUSH
53316: LD_INT 106
53318: PUSH
53319: LD_INT 107
53321: PUSH
53322: LD_INT 108
53324: PUSH
53325: LD_INT 109
53327: PUSH
53328: LD_INT 110
53330: PUSH
53331: LD_INT 111
53333: PUSH
53334: LD_INT 112
53336: PUSH
53337: LD_INT 113
53339: PUSH
53340: LD_INT 114
53342: PUSH
53343: LD_INT 116
53345: PUSH
53346: LD_INT 117
53348: PUSH
53349: LD_INT 118
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: ST_TO_ADDR
53375: GO 54150
53377: LD_INT 16
53379: DOUBLE
53380: EQUAL
53381: IFTRUE 53385
53383: GO 53521
53385: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
53386: LD_ADDR_VAR 0 2
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: LD_INT 4
53396: PUSH
53397: LD_INT 5
53399: PUSH
53400: LD_INT 7
53402: PUSH
53403: LD_INT 11
53405: PUSH
53406: LD_INT 12
53408: PUSH
53409: LD_INT 15
53411: PUSH
53412: LD_INT 16
53414: PUSH
53415: LD_INT 20
53417: PUSH
53418: LD_INT 21
53420: PUSH
53421: LD_INT 22
53423: PUSH
53424: LD_INT 23
53426: PUSH
53427: LD_INT 25
53429: PUSH
53430: LD_INT 26
53432: PUSH
53433: LD_INT 30
53435: PUSH
53436: LD_INT 31
53438: PUSH
53439: LD_INT 32
53441: PUSH
53442: LD_INT 33
53444: PUSH
53445: LD_INT 34
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 101
53471: PUSH
53472: LD_INT 102
53474: PUSH
53475: LD_INT 103
53477: PUSH
53478: LD_INT 106
53480: PUSH
53481: LD_INT 108
53483: PUSH
53484: LD_INT 112
53486: PUSH
53487: LD_INT 113
53489: PUSH
53490: LD_INT 114
53492: PUSH
53493: LD_INT 116
53495: PUSH
53496: LD_INT 117
53498: PUSH
53499: LD_INT 118
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: ST_TO_ADDR
53519: GO 54150
53521: LD_INT 17
53523: DOUBLE
53524: EQUAL
53525: IFTRUE 53529
53527: GO 53753
53529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
53530: LD_ADDR_VAR 0 2
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 3
53543: PUSH
53544: LD_INT 4
53546: PUSH
53547: LD_INT 5
53549: PUSH
53550: LD_INT 6
53552: PUSH
53553: LD_INT 7
53555: PUSH
53556: LD_INT 8
53558: PUSH
53559: LD_INT 9
53561: PUSH
53562: LD_INT 10
53564: PUSH
53565: LD_INT 11
53567: PUSH
53568: LD_INT 12
53570: PUSH
53571: LD_INT 13
53573: PUSH
53574: LD_INT 14
53576: PUSH
53577: LD_INT 15
53579: PUSH
53580: LD_INT 16
53582: PUSH
53583: LD_INT 17
53585: PUSH
53586: LD_INT 18
53588: PUSH
53589: LD_INT 19
53591: PUSH
53592: LD_INT 20
53594: PUSH
53595: LD_INT 21
53597: PUSH
53598: LD_INT 22
53600: PUSH
53601: LD_INT 23
53603: PUSH
53604: LD_INT 24
53606: PUSH
53607: LD_INT 25
53609: PUSH
53610: LD_INT 26
53612: PUSH
53613: LD_INT 27
53615: PUSH
53616: LD_INT 28
53618: PUSH
53619: LD_INT 29
53621: PUSH
53622: LD_INT 30
53624: PUSH
53625: LD_INT 31
53627: PUSH
53628: LD_INT 32
53630: PUSH
53631: LD_INT 33
53633: PUSH
53634: LD_INT 34
53636: PUSH
53637: LD_INT 36
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 101
53679: PUSH
53680: LD_INT 102
53682: PUSH
53683: LD_INT 103
53685: PUSH
53686: LD_INT 104
53688: PUSH
53689: LD_INT 105
53691: PUSH
53692: LD_INT 106
53694: PUSH
53695: LD_INT 107
53697: PUSH
53698: LD_INT 108
53700: PUSH
53701: LD_INT 109
53703: PUSH
53704: LD_INT 110
53706: PUSH
53707: LD_INT 111
53709: PUSH
53710: LD_INT 112
53712: PUSH
53713: LD_INT 113
53715: PUSH
53716: LD_INT 114
53718: PUSH
53719: LD_INT 116
53721: PUSH
53722: LD_INT 117
53724: PUSH
53725: LD_INT 118
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: ST_TO_ADDR
53751: GO 54150
53753: LD_INT 18
53755: DOUBLE
53756: EQUAL
53757: IFTRUE 53761
53759: GO 53909
53761: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
53762: LD_ADDR_VAR 0 2
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: LD_INT 4
53772: PUSH
53773: LD_INT 5
53775: PUSH
53776: LD_INT 7
53778: PUSH
53779: LD_INT 11
53781: PUSH
53782: LD_INT 12
53784: PUSH
53785: LD_INT 15
53787: PUSH
53788: LD_INT 16
53790: PUSH
53791: LD_INT 20
53793: PUSH
53794: LD_INT 21
53796: PUSH
53797: LD_INT 22
53799: PUSH
53800: LD_INT 23
53802: PUSH
53803: LD_INT 25
53805: PUSH
53806: LD_INT 26
53808: PUSH
53809: LD_INT 30
53811: PUSH
53812: LD_INT 31
53814: PUSH
53815: LD_INT 32
53817: PUSH
53818: LD_INT 33
53820: PUSH
53821: LD_INT 34
53823: PUSH
53824: LD_INT 35
53826: PUSH
53827: LD_INT 36
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 101
53855: PUSH
53856: LD_INT 102
53858: PUSH
53859: LD_INT 103
53861: PUSH
53862: LD_INT 106
53864: PUSH
53865: LD_INT 108
53867: PUSH
53868: LD_INT 112
53870: PUSH
53871: LD_INT 113
53873: PUSH
53874: LD_INT 114
53876: PUSH
53877: LD_INT 115
53879: PUSH
53880: LD_INT 116
53882: PUSH
53883: LD_INT 117
53885: PUSH
53886: LD_INT 118
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: ST_TO_ADDR
53907: GO 54150
53909: LD_INT 19
53911: DOUBLE
53912: EQUAL
53913: IFTRUE 53917
53915: GO 54149
53917: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
53918: LD_ADDR_VAR 0 2
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: LD_INT 4
53934: PUSH
53935: LD_INT 5
53937: PUSH
53938: LD_INT 6
53940: PUSH
53941: LD_INT 7
53943: PUSH
53944: LD_INT 8
53946: PUSH
53947: LD_INT 9
53949: PUSH
53950: LD_INT 10
53952: PUSH
53953: LD_INT 11
53955: PUSH
53956: LD_INT 12
53958: PUSH
53959: LD_INT 13
53961: PUSH
53962: LD_INT 14
53964: PUSH
53965: LD_INT 15
53967: PUSH
53968: LD_INT 16
53970: PUSH
53971: LD_INT 17
53973: PUSH
53974: LD_INT 18
53976: PUSH
53977: LD_INT 19
53979: PUSH
53980: LD_INT 20
53982: PUSH
53983: LD_INT 21
53985: PUSH
53986: LD_INT 22
53988: PUSH
53989: LD_INT 23
53991: PUSH
53992: LD_INT 24
53994: PUSH
53995: LD_INT 25
53997: PUSH
53998: LD_INT 26
54000: PUSH
54001: LD_INT 27
54003: PUSH
54004: LD_INT 28
54006: PUSH
54007: LD_INT 29
54009: PUSH
54010: LD_INT 30
54012: PUSH
54013: LD_INT 31
54015: PUSH
54016: LD_INT 32
54018: PUSH
54019: LD_INT 33
54021: PUSH
54022: LD_INT 34
54024: PUSH
54025: LD_INT 35
54027: PUSH
54028: LD_INT 36
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 101
54071: PUSH
54072: LD_INT 102
54074: PUSH
54075: LD_INT 103
54077: PUSH
54078: LD_INT 104
54080: PUSH
54081: LD_INT 105
54083: PUSH
54084: LD_INT 106
54086: PUSH
54087: LD_INT 107
54089: PUSH
54090: LD_INT 108
54092: PUSH
54093: LD_INT 109
54095: PUSH
54096: LD_INT 110
54098: PUSH
54099: LD_INT 111
54101: PUSH
54102: LD_INT 112
54104: PUSH
54105: LD_INT 113
54107: PUSH
54108: LD_INT 114
54110: PUSH
54111: LD_INT 115
54113: PUSH
54114: LD_INT 116
54116: PUSH
54117: LD_INT 117
54119: PUSH
54120: LD_INT 118
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: ST_TO_ADDR
54147: GO 54150
54149: POP
// end else
54150: GO 54381
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
54152: LD_ADDR_VAR 0 2
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 3
54165: PUSH
54166: LD_INT 4
54168: PUSH
54169: LD_INT 5
54171: PUSH
54172: LD_INT 6
54174: PUSH
54175: LD_INT 7
54177: PUSH
54178: LD_INT 8
54180: PUSH
54181: LD_INT 9
54183: PUSH
54184: LD_INT 10
54186: PUSH
54187: LD_INT 11
54189: PUSH
54190: LD_INT 12
54192: PUSH
54193: LD_INT 13
54195: PUSH
54196: LD_INT 14
54198: PUSH
54199: LD_INT 15
54201: PUSH
54202: LD_INT 16
54204: PUSH
54205: LD_INT 17
54207: PUSH
54208: LD_INT 18
54210: PUSH
54211: LD_INT 19
54213: PUSH
54214: LD_INT 20
54216: PUSH
54217: LD_INT 21
54219: PUSH
54220: LD_INT 22
54222: PUSH
54223: LD_INT 23
54225: PUSH
54226: LD_INT 24
54228: PUSH
54229: LD_INT 25
54231: PUSH
54232: LD_INT 26
54234: PUSH
54235: LD_INT 27
54237: PUSH
54238: LD_INT 28
54240: PUSH
54241: LD_INT 29
54243: PUSH
54244: LD_INT 30
54246: PUSH
54247: LD_INT 31
54249: PUSH
54250: LD_INT 32
54252: PUSH
54253: LD_INT 33
54255: PUSH
54256: LD_INT 34
54258: PUSH
54259: LD_INT 35
54261: PUSH
54262: LD_INT 36
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 101
54305: PUSH
54306: LD_INT 102
54308: PUSH
54309: LD_INT 103
54311: PUSH
54312: LD_INT 104
54314: PUSH
54315: LD_INT 105
54317: PUSH
54318: LD_INT 106
54320: PUSH
54321: LD_INT 107
54323: PUSH
54324: LD_INT 108
54326: PUSH
54327: LD_INT 109
54329: PUSH
54330: LD_INT 110
54332: PUSH
54333: LD_INT 111
54335: PUSH
54336: LD_INT 112
54338: PUSH
54339: LD_INT 113
54341: PUSH
54342: LD_INT 114
54344: PUSH
54345: LD_INT 115
54347: PUSH
54348: LD_INT 116
54350: PUSH
54351: LD_INT 117
54353: PUSH
54354: LD_INT 118
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: ST_TO_ADDR
// if result then
54381: LD_VAR 0 2
54385: IFFALSE 55171
// begin normal :=  ;
54387: LD_ADDR_VAR 0 5
54391: PUSH
54392: LD_STRING 
54394: ST_TO_ADDR
// hardcore :=  ;
54395: LD_ADDR_VAR 0 6
54399: PUSH
54400: LD_STRING 
54402: ST_TO_ADDR
// active :=  ;
54403: LD_ADDR_VAR 0 7
54407: PUSH
54408: LD_STRING 
54410: ST_TO_ADDR
// for i = 1 to normalCounter do
54411: LD_ADDR_VAR 0 8
54415: PUSH
54416: DOUBLE
54417: LD_INT 1
54419: DEC
54420: ST_TO_ADDR
54421: LD_EXP 34
54425: PUSH
54426: FOR_TO
54427: IFFALSE 54528
// begin tmp := 0 ;
54429: LD_ADDR_VAR 0 3
54433: PUSH
54434: LD_STRING 0
54436: ST_TO_ADDR
// if result [ 1 ] then
54437: LD_VAR 0 2
54441: PUSH
54442: LD_INT 1
54444: ARRAY
54445: IFFALSE 54510
// if result [ 1 ] [ 1 ] = i then
54447: LD_VAR 0 2
54451: PUSH
54452: LD_INT 1
54454: ARRAY
54455: PUSH
54456: LD_INT 1
54458: ARRAY
54459: PUSH
54460: LD_VAR 0 8
54464: EQUAL
54465: IFFALSE 54510
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
54467: LD_ADDR_VAR 0 2
54471: PUSH
54472: LD_VAR 0 2
54476: PPUSH
54477: LD_INT 1
54479: PPUSH
54480: LD_VAR 0 2
54484: PUSH
54485: LD_INT 1
54487: ARRAY
54488: PPUSH
54489: LD_INT 1
54491: PPUSH
54492: CALL_OW 3
54496: PPUSH
54497: CALL_OW 1
54501: ST_TO_ADDR
// tmp := 1 ;
54502: LD_ADDR_VAR 0 3
54506: PUSH
54507: LD_STRING 1
54509: ST_TO_ADDR
// end ; normal := normal & tmp ;
54510: LD_ADDR_VAR 0 5
54514: PUSH
54515: LD_VAR 0 5
54519: PUSH
54520: LD_VAR 0 3
54524: STR
54525: ST_TO_ADDR
// end ;
54526: GO 54426
54528: POP
54529: POP
// for i = 1 to hardcoreCounter do
54530: LD_ADDR_VAR 0 8
54534: PUSH
54535: DOUBLE
54536: LD_INT 1
54538: DEC
54539: ST_TO_ADDR
54540: LD_EXP 35
54544: PUSH
54545: FOR_TO
54546: IFFALSE 54651
// begin tmp := 0 ;
54548: LD_ADDR_VAR 0 3
54552: PUSH
54553: LD_STRING 0
54555: ST_TO_ADDR
// if result [ 2 ] then
54556: LD_VAR 0 2
54560: PUSH
54561: LD_INT 2
54563: ARRAY
54564: IFFALSE 54633
// if result [ 2 ] [ 1 ] = 100 + i then
54566: LD_VAR 0 2
54570: PUSH
54571: LD_INT 2
54573: ARRAY
54574: PUSH
54575: LD_INT 1
54577: ARRAY
54578: PUSH
54579: LD_INT 100
54581: PUSH
54582: LD_VAR 0 8
54586: PLUS
54587: EQUAL
54588: IFFALSE 54633
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
54590: LD_ADDR_VAR 0 2
54594: PUSH
54595: LD_VAR 0 2
54599: PPUSH
54600: LD_INT 2
54602: PPUSH
54603: LD_VAR 0 2
54607: PUSH
54608: LD_INT 2
54610: ARRAY
54611: PPUSH
54612: LD_INT 1
54614: PPUSH
54615: CALL_OW 3
54619: PPUSH
54620: CALL_OW 1
54624: ST_TO_ADDR
// tmp := 1 ;
54625: LD_ADDR_VAR 0 3
54629: PUSH
54630: LD_STRING 1
54632: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
54633: LD_ADDR_VAR 0 6
54637: PUSH
54638: LD_VAR 0 6
54642: PUSH
54643: LD_VAR 0 3
54647: STR
54648: ST_TO_ADDR
// end ;
54649: GO 54545
54651: POP
54652: POP
// if isGameLoad then
54653: LD_VAR 0 1
54657: IFFALSE 55132
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
54659: LD_ADDR_VAR 0 4
54663: PUSH
54664: LD_EXP 38
54668: PUSH
54669: LD_EXP 37
54673: PUSH
54674: LD_EXP 39
54678: PUSH
54679: LD_EXP 36
54683: PUSH
54684: LD_EXP 40
54688: PUSH
54689: LD_EXP 41
54693: PUSH
54694: LD_EXP 42
54698: PUSH
54699: LD_EXP 43
54703: PUSH
54704: LD_EXP 44
54708: PUSH
54709: LD_EXP 45
54713: PUSH
54714: LD_EXP 46
54718: PUSH
54719: LD_EXP 47
54723: PUSH
54724: LD_EXP 48
54728: PUSH
54729: LD_EXP 49
54733: PUSH
54734: LD_EXP 57
54738: PUSH
54739: LD_EXP 58
54743: PUSH
54744: LD_EXP 59
54748: PUSH
54749: LD_EXP 60
54753: PUSH
54754: LD_EXP 62
54758: PUSH
54759: LD_EXP 63
54763: PUSH
54764: LD_EXP 64
54768: PUSH
54769: LD_EXP 67
54773: PUSH
54774: LD_EXP 69
54778: PUSH
54779: LD_EXP 70
54783: PUSH
54784: LD_EXP 71
54788: PUSH
54789: LD_EXP 73
54793: PUSH
54794: LD_EXP 74
54798: PUSH
54799: LD_EXP 77
54803: PUSH
54804: LD_EXP 78
54808: PUSH
54809: LD_EXP 79
54813: PUSH
54814: LD_EXP 80
54818: PUSH
54819: LD_EXP 81
54823: PUSH
54824: LD_EXP 82
54828: PUSH
54829: LD_EXP 83
54833: PUSH
54834: LD_EXP 84
54838: PUSH
54839: LD_EXP 85
54843: PUSH
54844: LD_EXP 50
54848: PUSH
54849: LD_EXP 51
54853: PUSH
54854: LD_EXP 54
54858: PUSH
54859: LD_EXP 55
54863: PUSH
54864: LD_EXP 56
54868: PUSH
54869: LD_EXP 52
54873: PUSH
54874: LD_EXP 53
54878: PUSH
54879: LD_EXP 61
54883: PUSH
54884: LD_EXP 65
54888: PUSH
54889: LD_EXP 66
54893: PUSH
54894: LD_EXP 68
54898: PUSH
54899: LD_EXP 72
54903: PUSH
54904: LD_EXP 75
54908: PUSH
54909: LD_EXP 76
54913: PUSH
54914: LD_EXP 86
54918: PUSH
54919: LD_EXP 87
54923: PUSH
54924: LD_EXP 88
54928: PUSH
54929: LD_EXP 89
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// tmp :=  ;
54990: LD_ADDR_VAR 0 3
54994: PUSH
54995: LD_STRING 
54997: ST_TO_ADDR
// for i = 1 to normalCounter do
54998: LD_ADDR_VAR 0 8
55002: PUSH
55003: DOUBLE
55004: LD_INT 1
55006: DEC
55007: ST_TO_ADDR
55008: LD_EXP 34
55012: PUSH
55013: FOR_TO
55014: IFFALSE 55050
// begin if flags [ i ] then
55016: LD_VAR 0 4
55020: PUSH
55021: LD_VAR 0 8
55025: ARRAY
55026: IFFALSE 55048
// tmp := tmp & i & ; ;
55028: LD_ADDR_VAR 0 3
55032: PUSH
55033: LD_VAR 0 3
55037: PUSH
55038: LD_VAR 0 8
55042: STR
55043: PUSH
55044: LD_STRING ;
55046: STR
55047: ST_TO_ADDR
// end ;
55048: GO 55013
55050: POP
55051: POP
// for i = 1 to hardcoreCounter do
55052: LD_ADDR_VAR 0 8
55056: PUSH
55057: DOUBLE
55058: LD_INT 1
55060: DEC
55061: ST_TO_ADDR
55062: LD_EXP 35
55066: PUSH
55067: FOR_TO
55068: IFFALSE 55114
// begin if flags [ normalCounter + i ] then
55070: LD_VAR 0 4
55074: PUSH
55075: LD_EXP 34
55079: PUSH
55080: LD_VAR 0 8
55084: PLUS
55085: ARRAY
55086: IFFALSE 55112
// tmp := tmp & ( 100 + i ) & ; ;
55088: LD_ADDR_VAR 0 3
55092: PUSH
55093: LD_VAR 0 3
55097: PUSH
55098: LD_INT 100
55100: PUSH
55101: LD_VAR 0 8
55105: PLUS
55106: STR
55107: PUSH
55108: LD_STRING ;
55110: STR
55111: ST_TO_ADDR
// end ;
55112: GO 55067
55114: POP
55115: POP
// if tmp then
55116: LD_VAR 0 3
55120: IFFALSE 55132
// active := tmp ;
55122: LD_ADDR_VAR 0 7
55126: PUSH
55127: LD_VAR 0 3
55131: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
55132: LD_STRING getStreamItemsFromMission("
55134: PUSH
55135: LD_VAR 0 5
55139: STR
55140: PUSH
55141: LD_STRING ","
55143: STR
55144: PUSH
55145: LD_VAR 0 6
55149: STR
55150: PUSH
55151: LD_STRING ","
55153: STR
55154: PUSH
55155: LD_VAR 0 7
55159: STR
55160: PUSH
55161: LD_STRING ")
55163: STR
55164: PPUSH
55165: CALL_OW 559
// end else
55169: GO 55178
// ToLua ( getStreamItemsFromMission("","","") ) ;
55171: LD_STRING getStreamItemsFromMission("","","")
55173: PPUSH
55174: CALL_OW 559
// end ;
55178: LD_VAR 0 2
55182: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
55183: LD_EXP 33
55187: PUSH
55188: LD_EXP 38
55192: AND
55193: IFFALSE 55317
55195: GO 55197
55197: DISABLE
55198: LD_INT 0
55200: PPUSH
55201: PPUSH
// begin enable ;
55202: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
55203: LD_ADDR_VAR 0 2
55207: PUSH
55208: LD_INT 22
55210: PUSH
55211: LD_OWVAR 2
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 34
55225: PUSH
55226: LD_INT 7
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 34
55235: PUSH
55236: LD_INT 45
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 34
55245: PUSH
55246: LD_INT 28
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 34
55255: PUSH
55256: LD_INT 47
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PPUSH
55274: CALL_OW 69
55278: ST_TO_ADDR
// if not tmp then
55279: LD_VAR 0 2
55283: NOT
55284: IFFALSE 55288
// exit ;
55286: GO 55317
// for i in tmp do
55288: LD_ADDR_VAR 0 1
55292: PUSH
55293: LD_VAR 0 2
55297: PUSH
55298: FOR_IN
55299: IFFALSE 55315
// begin SetLives ( i , 0 ) ;
55301: LD_VAR 0 1
55305: PPUSH
55306: LD_INT 0
55308: PPUSH
55309: CALL_OW 234
// end ;
55313: GO 55298
55315: POP
55316: POP
// end ;
55317: PPOPN 2
55319: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
55320: LD_EXP 33
55324: PUSH
55325: LD_EXP 39
55329: AND
55330: IFFALSE 55414
55332: GO 55334
55334: DISABLE
55335: LD_INT 0
55337: PPUSH
55338: PPUSH
// begin enable ;
55339: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
55340: LD_ADDR_VAR 0 2
55344: PUSH
55345: LD_INT 22
55347: PUSH
55348: LD_OWVAR 2
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 32
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PPUSH
55371: CALL_OW 69
55375: ST_TO_ADDR
// if not tmp then
55376: LD_VAR 0 2
55380: NOT
55381: IFFALSE 55385
// exit ;
55383: GO 55414
// for i in tmp do
55385: LD_ADDR_VAR 0 1
55389: PUSH
55390: LD_VAR 0 2
55394: PUSH
55395: FOR_IN
55396: IFFALSE 55412
// begin SetLives ( i , 0 ) ;
55398: LD_VAR 0 1
55402: PPUSH
55403: LD_INT 0
55405: PPUSH
55406: CALL_OW 234
// end ;
55410: GO 55395
55412: POP
55413: POP
// end ;
55414: PPOPN 2
55416: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
55417: LD_EXP 33
55421: PUSH
55422: LD_EXP 36
55426: AND
55427: IFFALSE 55520
55429: GO 55431
55431: DISABLE
55432: LD_INT 0
55434: PPUSH
// begin enable ;
55435: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
55436: LD_ADDR_VAR 0 1
55440: PUSH
55441: LD_INT 22
55443: PUSH
55444: LD_OWVAR 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 25
55458: PUSH
55459: LD_INT 5
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 25
55468: PUSH
55469: LD_INT 9
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 25
55478: PUSH
55479: LD_INT 8
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PPUSH
55496: CALL_OW 69
55500: PUSH
55501: FOR_IN
55502: IFFALSE 55518
// begin SetClass ( i , 1 ) ;
55504: LD_VAR 0 1
55508: PPUSH
55509: LD_INT 1
55511: PPUSH
55512: CALL_OW 336
// end ;
55516: GO 55501
55518: POP
55519: POP
// end ;
55520: PPOPN 1
55522: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
55523: LD_EXP 33
55527: PUSH
55528: LD_EXP 37
55532: AND
55533: PUSH
55534: LD_OWVAR 65
55538: PUSH
55539: LD_INT 7
55541: LESS
55542: AND
55543: IFFALSE 55557
55545: GO 55547
55547: DISABLE
// begin enable ;
55548: ENABLE
// game_speed := 7 ;
55549: LD_ADDR_OWVAR 65
55553: PUSH
55554: LD_INT 7
55556: ST_TO_ADDR
// end ;
55557: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
55558: LD_EXP 33
55562: PUSH
55563: LD_EXP 40
55567: AND
55568: IFFALSE 55770
55570: GO 55572
55572: DISABLE
55573: LD_INT 0
55575: PPUSH
55576: PPUSH
55577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
55578: LD_ADDR_VAR 0 3
55582: PUSH
55583: LD_INT 81
55585: PUSH
55586: LD_OWVAR 2
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 21
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PPUSH
55609: CALL_OW 69
55613: ST_TO_ADDR
// if not tmp then
55614: LD_VAR 0 3
55618: NOT
55619: IFFALSE 55623
// exit ;
55621: GO 55770
// if tmp > 5 then
55623: LD_VAR 0 3
55627: PUSH
55628: LD_INT 5
55630: GREATER
55631: IFFALSE 55643
// k := 5 else
55633: LD_ADDR_VAR 0 2
55637: PUSH
55638: LD_INT 5
55640: ST_TO_ADDR
55641: GO 55653
// k := tmp ;
55643: LD_ADDR_VAR 0 2
55647: PUSH
55648: LD_VAR 0 3
55652: ST_TO_ADDR
// for i := 1 to k do
55653: LD_ADDR_VAR 0 1
55657: PUSH
55658: DOUBLE
55659: LD_INT 1
55661: DEC
55662: ST_TO_ADDR
55663: LD_VAR 0 2
55667: PUSH
55668: FOR_TO
55669: IFFALSE 55768
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
55671: LD_VAR 0 3
55675: PUSH
55676: LD_VAR 0 1
55680: ARRAY
55681: PPUSH
55682: LD_VAR 0 1
55686: PUSH
55687: LD_INT 4
55689: MOD
55690: PUSH
55691: LD_INT 1
55693: PLUS
55694: PPUSH
55695: CALL_OW 259
55699: PUSH
55700: LD_INT 10
55702: LESS
55703: IFFALSE 55766
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
55705: LD_VAR 0 3
55709: PUSH
55710: LD_VAR 0 1
55714: ARRAY
55715: PPUSH
55716: LD_VAR 0 1
55720: PUSH
55721: LD_INT 4
55723: MOD
55724: PUSH
55725: LD_INT 1
55727: PLUS
55728: PPUSH
55729: LD_VAR 0 3
55733: PUSH
55734: LD_VAR 0 1
55738: ARRAY
55739: PPUSH
55740: LD_VAR 0 1
55744: PUSH
55745: LD_INT 4
55747: MOD
55748: PUSH
55749: LD_INT 1
55751: PLUS
55752: PPUSH
55753: CALL_OW 259
55757: PUSH
55758: LD_INT 1
55760: PLUS
55761: PPUSH
55762: CALL_OW 237
55766: GO 55668
55768: POP
55769: POP
// end ;
55770: PPOPN 3
55772: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55773: LD_EXP 33
55777: PUSH
55778: LD_EXP 41
55782: AND
55783: IFFALSE 55803
55785: GO 55787
55787: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
55788: LD_INT 4
55790: PPUSH
55791: LD_OWVAR 2
55795: PPUSH
55796: LD_INT 0
55798: PPUSH
55799: CALL_OW 324
55803: END
// every 0 0$1 trigger StreamModeActive and sShovel do
55804: LD_EXP 33
55808: PUSH
55809: LD_EXP 70
55813: AND
55814: IFFALSE 55834
55816: GO 55818
55818: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
55819: LD_INT 19
55821: PPUSH
55822: LD_OWVAR 2
55826: PPUSH
55827: LD_INT 0
55829: PPUSH
55830: CALL_OW 324
55834: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
55835: LD_EXP 33
55839: PUSH
55840: LD_EXP 42
55844: AND
55845: IFFALSE 55947
55847: GO 55849
55849: DISABLE
55850: LD_INT 0
55852: PPUSH
55853: PPUSH
// begin enable ;
55854: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
55855: LD_ADDR_VAR 0 2
55859: PUSH
55860: LD_INT 22
55862: PUSH
55863: LD_OWVAR 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: LD_INT 34
55877: PUSH
55878: LD_INT 11
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 34
55887: PUSH
55888: LD_INT 30
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: LIST
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PPUSH
55904: CALL_OW 69
55908: ST_TO_ADDR
// if not tmp then
55909: LD_VAR 0 2
55913: NOT
55914: IFFALSE 55918
// exit ;
55916: GO 55947
// for i in tmp do
55918: LD_ADDR_VAR 0 1
55922: PUSH
55923: LD_VAR 0 2
55927: PUSH
55928: FOR_IN
55929: IFFALSE 55945
// begin SetLives ( i , 0 ) ;
55931: LD_VAR 0 1
55935: PPUSH
55936: LD_INT 0
55938: PPUSH
55939: CALL_OW 234
// end ;
55943: GO 55928
55945: POP
55946: POP
// end ;
55947: PPOPN 2
55949: END
// every 0 0$1 trigger StreamModeActive and sBunker do
55950: LD_EXP 33
55954: PUSH
55955: LD_EXP 43
55959: AND
55960: IFFALSE 55980
55962: GO 55964
55964: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
55965: LD_INT 32
55967: PPUSH
55968: LD_OWVAR 2
55972: PPUSH
55973: LD_INT 0
55975: PPUSH
55976: CALL_OW 324
55980: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
55981: LD_EXP 33
55985: PUSH
55986: LD_EXP 44
55990: AND
55991: IFFALSE 56172
55993: GO 55995
55995: DISABLE
55996: LD_INT 0
55998: PPUSH
55999: PPUSH
56000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
56001: LD_ADDR_VAR 0 2
56005: PUSH
56006: LD_INT 22
56008: PUSH
56009: LD_OWVAR 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 33
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PPUSH
56032: CALL_OW 69
56036: ST_TO_ADDR
// if not tmp then
56037: LD_VAR 0 2
56041: NOT
56042: IFFALSE 56046
// exit ;
56044: GO 56172
// side := 0 ;
56046: LD_ADDR_VAR 0 3
56050: PUSH
56051: LD_INT 0
56053: ST_TO_ADDR
// for i := 1 to 8 do
56054: LD_ADDR_VAR 0 1
56058: PUSH
56059: DOUBLE
56060: LD_INT 1
56062: DEC
56063: ST_TO_ADDR
56064: LD_INT 8
56066: PUSH
56067: FOR_TO
56068: IFFALSE 56116
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
56070: LD_OWVAR 2
56074: PUSH
56075: LD_VAR 0 1
56079: NONEQUAL
56080: PUSH
56081: LD_OWVAR 2
56085: PPUSH
56086: LD_VAR 0 1
56090: PPUSH
56091: CALL_OW 81
56095: PUSH
56096: LD_INT 2
56098: EQUAL
56099: AND
56100: IFFALSE 56114
// begin side := i ;
56102: LD_ADDR_VAR 0 3
56106: PUSH
56107: LD_VAR 0 1
56111: ST_TO_ADDR
// break ;
56112: GO 56116
// end ;
56114: GO 56067
56116: POP
56117: POP
// if not side then
56118: LD_VAR 0 3
56122: NOT
56123: IFFALSE 56127
// exit ;
56125: GO 56172
// for i := 1 to tmp do
56127: LD_ADDR_VAR 0 1
56131: PUSH
56132: DOUBLE
56133: LD_INT 1
56135: DEC
56136: ST_TO_ADDR
56137: LD_VAR 0 2
56141: PUSH
56142: FOR_TO
56143: IFFALSE 56170
// if Prob ( 60 ) then
56145: LD_INT 60
56147: PPUSH
56148: CALL_OW 13
56152: IFFALSE 56168
// SetSide ( i , side ) ;
56154: LD_VAR 0 1
56158: PPUSH
56159: LD_VAR 0 3
56163: PPUSH
56164: CALL_OW 235
56168: GO 56142
56170: POP
56171: POP
// end ;
56172: PPOPN 3
56174: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
56175: LD_EXP 33
56179: PUSH
56180: LD_EXP 46
56184: AND
56185: IFFALSE 56304
56187: GO 56189
56189: DISABLE
56190: LD_INT 0
56192: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
56193: LD_ADDR_VAR 0 1
56197: PUSH
56198: LD_INT 22
56200: PUSH
56201: LD_OWVAR 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 21
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: LD_INT 23
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: LIST
56241: PPUSH
56242: CALL_OW 69
56246: PUSH
56247: FOR_IN
56248: IFFALSE 56302
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
56250: LD_VAR 0 1
56254: PPUSH
56255: CALL_OW 257
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: LD_INT 4
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: IN
56278: IFFALSE 56300
// SetClass ( un , rand ( 1 , 4 ) ) ;
56280: LD_VAR 0 1
56284: PPUSH
56285: LD_INT 1
56287: PPUSH
56288: LD_INT 4
56290: PPUSH
56291: CALL_OW 12
56295: PPUSH
56296: CALL_OW 336
56300: GO 56247
56302: POP
56303: POP
// end ;
56304: PPOPN 1
56306: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
56307: LD_EXP 33
56311: PUSH
56312: LD_EXP 45
56316: AND
56317: IFFALSE 56396
56319: GO 56321
56321: DISABLE
56322: LD_INT 0
56324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56325: LD_ADDR_VAR 0 1
56329: PUSH
56330: LD_INT 22
56332: PUSH
56333: LD_OWVAR 2
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 21
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PPUSH
56356: CALL_OW 69
56360: ST_TO_ADDR
// if not tmp then
56361: LD_VAR 0 1
56365: NOT
56366: IFFALSE 56370
// exit ;
56368: GO 56396
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
56370: LD_VAR 0 1
56374: PUSH
56375: LD_INT 1
56377: PPUSH
56378: LD_VAR 0 1
56382: PPUSH
56383: CALL_OW 12
56387: ARRAY
56388: PPUSH
56389: LD_INT 100
56391: PPUSH
56392: CALL_OW 234
// end ;
56396: PPOPN 1
56398: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
56399: LD_EXP 33
56403: PUSH
56404: LD_EXP 47
56408: AND
56409: IFFALSE 56507
56411: GO 56413
56413: DISABLE
56414: LD_INT 0
56416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56417: LD_ADDR_VAR 0 1
56421: PUSH
56422: LD_INT 22
56424: PUSH
56425: LD_OWVAR 2
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 21
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PPUSH
56448: CALL_OW 69
56452: ST_TO_ADDR
// if not tmp then
56453: LD_VAR 0 1
56457: NOT
56458: IFFALSE 56462
// exit ;
56460: GO 56507
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
56462: LD_VAR 0 1
56466: PUSH
56467: LD_INT 1
56469: PPUSH
56470: LD_VAR 0 1
56474: PPUSH
56475: CALL_OW 12
56479: ARRAY
56480: PPUSH
56481: LD_INT 1
56483: PPUSH
56484: LD_INT 4
56486: PPUSH
56487: CALL_OW 12
56491: PPUSH
56492: LD_INT 3000
56494: PPUSH
56495: LD_INT 9000
56497: PPUSH
56498: CALL_OW 12
56502: PPUSH
56503: CALL_OW 492
// end ;
56507: PPOPN 1
56509: END
// every 0 0$1 trigger StreamModeActive and sDepot do
56510: LD_EXP 33
56514: PUSH
56515: LD_EXP 48
56519: AND
56520: IFFALSE 56540
56522: GO 56524
56524: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
56525: LD_INT 1
56527: PPUSH
56528: LD_OWVAR 2
56532: PPUSH
56533: LD_INT 0
56535: PPUSH
56536: CALL_OW 324
56540: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
56541: LD_EXP 33
56545: PUSH
56546: LD_EXP 49
56550: AND
56551: IFFALSE 56634
56553: GO 56555
56555: DISABLE
56556: LD_INT 0
56558: PPUSH
56559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56560: LD_ADDR_VAR 0 2
56564: PUSH
56565: LD_INT 22
56567: PUSH
56568: LD_OWVAR 2
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 21
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PPUSH
56591: CALL_OW 69
56595: ST_TO_ADDR
// if not tmp then
56596: LD_VAR 0 2
56600: NOT
56601: IFFALSE 56605
// exit ;
56603: GO 56634
// for i in tmp do
56605: LD_ADDR_VAR 0 1
56609: PUSH
56610: LD_VAR 0 2
56614: PUSH
56615: FOR_IN
56616: IFFALSE 56632
// SetBLevel ( i , 10 ) ;
56618: LD_VAR 0 1
56622: PPUSH
56623: LD_INT 10
56625: PPUSH
56626: CALL_OW 241
56630: GO 56615
56632: POP
56633: POP
// end ;
56634: PPOPN 2
56636: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
56637: LD_EXP 33
56641: PUSH
56642: LD_EXP 50
56646: AND
56647: IFFALSE 56758
56649: GO 56651
56651: DISABLE
56652: LD_INT 0
56654: PPUSH
56655: PPUSH
56656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56657: LD_ADDR_VAR 0 3
56661: PUSH
56662: LD_INT 22
56664: PUSH
56665: LD_OWVAR 2
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 25
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PPUSH
56688: CALL_OW 69
56692: ST_TO_ADDR
// if not tmp then
56693: LD_VAR 0 3
56697: NOT
56698: IFFALSE 56702
// exit ;
56700: GO 56758
// un := tmp [ rand ( 1 , tmp ) ] ;
56702: LD_ADDR_VAR 0 2
56706: PUSH
56707: LD_VAR 0 3
56711: PUSH
56712: LD_INT 1
56714: PPUSH
56715: LD_VAR 0 3
56719: PPUSH
56720: CALL_OW 12
56724: ARRAY
56725: ST_TO_ADDR
// if Crawls ( un ) then
56726: LD_VAR 0 2
56730: PPUSH
56731: CALL_OW 318
56735: IFFALSE 56746
// ComWalk ( un ) ;
56737: LD_VAR 0 2
56741: PPUSH
56742: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56746: LD_VAR 0 2
56750: PPUSH
56751: LD_INT 5
56753: PPUSH
56754: CALL_OW 336
// end ;
56758: PPOPN 3
56760: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
56761: LD_EXP 33
56765: PUSH
56766: LD_EXP 51
56770: AND
56771: PUSH
56772: LD_OWVAR 67
56776: PUSH
56777: LD_INT 4
56779: LESS
56780: AND
56781: IFFALSE 56800
56783: GO 56785
56785: DISABLE
// begin Difficulty := Difficulty + 1 ;
56786: LD_ADDR_OWVAR 67
56790: PUSH
56791: LD_OWVAR 67
56795: PUSH
56796: LD_INT 1
56798: PLUS
56799: ST_TO_ADDR
// end ;
56800: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
56801: LD_EXP 33
56805: PUSH
56806: LD_EXP 52
56810: AND
56811: IFFALSE 56914
56813: GO 56815
56815: DISABLE
56816: LD_INT 0
56818: PPUSH
// begin for i := 1 to 5 do
56819: LD_ADDR_VAR 0 1
56823: PUSH
56824: DOUBLE
56825: LD_INT 1
56827: DEC
56828: ST_TO_ADDR
56829: LD_INT 5
56831: PUSH
56832: FOR_TO
56833: IFFALSE 56912
// begin uc_nation := nation_nature ;
56835: LD_ADDR_OWVAR 21
56839: PUSH
56840: LD_INT 0
56842: ST_TO_ADDR
// uc_side := 0 ;
56843: LD_ADDR_OWVAR 20
56847: PUSH
56848: LD_INT 0
56850: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56851: LD_ADDR_OWVAR 29
56855: PUSH
56856: LD_INT 12
56858: PUSH
56859: LD_INT 12
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: ST_TO_ADDR
// hc_agressivity := 20 ;
56866: LD_ADDR_OWVAR 35
56870: PUSH
56871: LD_INT 20
56873: ST_TO_ADDR
// hc_class := class_tiger ;
56874: LD_ADDR_OWVAR 28
56878: PUSH
56879: LD_INT 14
56881: ST_TO_ADDR
// hc_gallery :=  ;
56882: LD_ADDR_OWVAR 33
56886: PUSH
56887: LD_STRING 
56889: ST_TO_ADDR
// hc_name :=  ;
56890: LD_ADDR_OWVAR 26
56894: PUSH
56895: LD_STRING 
56897: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
56898: CALL_OW 44
56902: PPUSH
56903: LD_INT 0
56905: PPUSH
56906: CALL_OW 51
// end ;
56910: GO 56832
56912: POP
56913: POP
// end ;
56914: PPOPN 1
56916: END
// every 0 0$1 trigger StreamModeActive and sBomb do
56917: LD_EXP 33
56921: PUSH
56922: LD_EXP 53
56926: AND
56927: IFFALSE 56936
56929: GO 56931
56931: DISABLE
// StreamSibBomb ;
56932: CALL 56937 0 0
56936: END
// export function StreamSibBomb ; var i , x , y ; begin
56937: LD_INT 0
56939: PPUSH
56940: PPUSH
56941: PPUSH
56942: PPUSH
// result := false ;
56943: LD_ADDR_VAR 0 1
56947: PUSH
56948: LD_INT 0
56950: ST_TO_ADDR
// for i := 1 to 16 do
56951: LD_ADDR_VAR 0 2
56955: PUSH
56956: DOUBLE
56957: LD_INT 1
56959: DEC
56960: ST_TO_ADDR
56961: LD_INT 16
56963: PUSH
56964: FOR_TO
56965: IFFALSE 57164
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56967: LD_ADDR_VAR 0 3
56971: PUSH
56972: LD_INT 10
56974: PUSH
56975: LD_INT 20
56977: PUSH
56978: LD_INT 30
56980: PUSH
56981: LD_INT 40
56983: PUSH
56984: LD_INT 50
56986: PUSH
56987: LD_INT 60
56989: PUSH
56990: LD_INT 70
56992: PUSH
56993: LD_INT 80
56995: PUSH
56996: LD_INT 90
56998: PUSH
56999: LD_INT 100
57001: PUSH
57002: LD_INT 110
57004: PUSH
57005: LD_INT 120
57007: PUSH
57008: LD_INT 130
57010: PUSH
57011: LD_INT 140
57013: PUSH
57014: LD_INT 150
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PPUSH
57037: LD_INT 15
57039: PPUSH
57040: CALL_OW 12
57044: ARRAY
57045: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57046: LD_ADDR_VAR 0 4
57050: PUSH
57051: LD_INT 10
57053: PUSH
57054: LD_INT 20
57056: PUSH
57057: LD_INT 30
57059: PUSH
57060: LD_INT 40
57062: PUSH
57063: LD_INT 50
57065: PUSH
57066: LD_INT 60
57068: PUSH
57069: LD_INT 70
57071: PUSH
57072: LD_INT 80
57074: PUSH
57075: LD_INT 90
57077: PUSH
57078: LD_INT 100
57080: PUSH
57081: LD_INT 110
57083: PUSH
57084: LD_INT 120
57086: PUSH
57087: LD_INT 130
57089: PUSH
57090: LD_INT 140
57092: PUSH
57093: LD_INT 150
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: PPUSH
57116: LD_INT 15
57118: PPUSH
57119: CALL_OW 12
57123: ARRAY
57124: ST_TO_ADDR
// if ValidHex ( x , y ) then
57125: LD_VAR 0 3
57129: PPUSH
57130: LD_VAR 0 4
57134: PPUSH
57135: CALL_OW 488
57139: IFFALSE 57162
// begin result := [ x , y ] ;
57141: LD_ADDR_VAR 0 1
57145: PUSH
57146: LD_VAR 0 3
57150: PUSH
57151: LD_VAR 0 4
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: ST_TO_ADDR
// break ;
57160: GO 57164
// end ; end ;
57162: GO 56964
57164: POP
57165: POP
// if result then
57166: LD_VAR 0 1
57170: IFFALSE 57230
// begin ToLua ( playSibBomb() ) ;
57172: LD_STRING playSibBomb()
57174: PPUSH
57175: CALL_OW 559
// wait ( 0 0$14 ) ;
57179: LD_INT 490
57181: PPUSH
57182: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
57186: LD_VAR 0 1
57190: PUSH
57191: LD_INT 1
57193: ARRAY
57194: PPUSH
57195: LD_VAR 0 1
57199: PUSH
57200: LD_INT 2
57202: ARRAY
57203: PPUSH
57204: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
57208: LD_VAR 0 1
57212: PUSH
57213: LD_INT 1
57215: ARRAY
57216: PPUSH
57217: LD_VAR 0 1
57221: PUSH
57222: LD_INT 2
57224: ARRAY
57225: PPUSH
57226: CALL_OW 429
// end ; end ;
57230: LD_VAR 0 1
57234: RET
// every 0 0$1 trigger StreamModeActive and sReset do
57235: LD_EXP 33
57239: PUSH
57240: LD_EXP 55
57244: AND
57245: IFFALSE 57257
57247: GO 57249
57249: DISABLE
// YouLost (  ) ;
57250: LD_STRING 
57252: PPUSH
57253: CALL_OW 104
57257: END
// every 0 0$1 trigger StreamModeActive and sFog do
57258: LD_EXP 33
57262: PUSH
57263: LD_EXP 54
57267: AND
57268: IFFALSE 57282
57270: GO 57272
57272: DISABLE
// FogOff ( your_side ) ;
57273: LD_OWVAR 2
57277: PPUSH
57278: CALL_OW 344
57282: END
// every 0 0$1 trigger StreamModeActive and sSun do
57283: LD_EXP 33
57287: PUSH
57288: LD_EXP 56
57292: AND
57293: IFFALSE 57321
57295: GO 57297
57297: DISABLE
// begin solar_recharge_percent := 0 ;
57298: LD_ADDR_OWVAR 79
57302: PUSH
57303: LD_INT 0
57305: ST_TO_ADDR
// wait ( 5 5$00 ) ;
57306: LD_INT 10500
57308: PPUSH
57309: CALL_OW 67
// solar_recharge_percent := 100 ;
57313: LD_ADDR_OWVAR 79
57317: PUSH
57318: LD_INT 100
57320: ST_TO_ADDR
// end ;
57321: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
57322: LD_EXP 33
57326: PUSH
57327: LD_EXP 57
57331: AND
57332: IFFALSE 57571
57334: GO 57336
57336: DISABLE
57337: LD_INT 0
57339: PPUSH
57340: PPUSH
57341: PPUSH
// begin tmp := [ ] ;
57342: LD_ADDR_VAR 0 3
57346: PUSH
57347: EMPTY
57348: ST_TO_ADDR
// for i := 1 to 6 do
57349: LD_ADDR_VAR 0 1
57353: PUSH
57354: DOUBLE
57355: LD_INT 1
57357: DEC
57358: ST_TO_ADDR
57359: LD_INT 6
57361: PUSH
57362: FOR_TO
57363: IFFALSE 57468
// begin uc_nation := nation_nature ;
57365: LD_ADDR_OWVAR 21
57369: PUSH
57370: LD_INT 0
57372: ST_TO_ADDR
// uc_side := 0 ;
57373: LD_ADDR_OWVAR 20
57377: PUSH
57378: LD_INT 0
57380: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57381: LD_ADDR_OWVAR 29
57385: PUSH
57386: LD_INT 12
57388: PUSH
57389: LD_INT 12
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: ST_TO_ADDR
// hc_agressivity := 20 ;
57396: LD_ADDR_OWVAR 35
57400: PUSH
57401: LD_INT 20
57403: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
57404: LD_ADDR_OWVAR 28
57408: PUSH
57409: LD_INT 17
57411: ST_TO_ADDR
// hc_gallery :=  ;
57412: LD_ADDR_OWVAR 33
57416: PUSH
57417: LD_STRING 
57419: ST_TO_ADDR
// hc_name :=  ;
57420: LD_ADDR_OWVAR 26
57424: PUSH
57425: LD_STRING 
57427: ST_TO_ADDR
// un := CreateHuman ;
57428: LD_ADDR_VAR 0 2
57432: PUSH
57433: CALL_OW 44
57437: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
57438: LD_VAR 0 2
57442: PPUSH
57443: LD_INT 1
57445: PPUSH
57446: CALL_OW 51
// tmp := tmp ^ un ;
57450: LD_ADDR_VAR 0 3
57454: PUSH
57455: LD_VAR 0 3
57459: PUSH
57460: LD_VAR 0 2
57464: ADD
57465: ST_TO_ADDR
// end ;
57466: GO 57362
57468: POP
57469: POP
// repeat wait ( 0 0$1 ) ;
57470: LD_INT 35
57472: PPUSH
57473: CALL_OW 67
// for un in tmp do
57477: LD_ADDR_VAR 0 2
57481: PUSH
57482: LD_VAR 0 3
57486: PUSH
57487: FOR_IN
57488: IFFALSE 57562
// begin if IsDead ( un ) then
57490: LD_VAR 0 2
57494: PPUSH
57495: CALL_OW 301
57499: IFFALSE 57519
// begin tmp := tmp diff un ;
57501: LD_ADDR_VAR 0 3
57505: PUSH
57506: LD_VAR 0 3
57510: PUSH
57511: LD_VAR 0 2
57515: DIFF
57516: ST_TO_ADDR
// continue ;
57517: GO 57487
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
57519: LD_VAR 0 2
57523: PPUSH
57524: LD_INT 3
57526: PUSH
57527: LD_INT 22
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PPUSH
57541: CALL_OW 69
57545: PPUSH
57546: LD_VAR 0 2
57550: PPUSH
57551: CALL_OW 74
57555: PPUSH
57556: CALL_OW 115
// end ;
57560: GO 57487
57562: POP
57563: POP
// until not tmp ;
57564: LD_VAR 0 3
57568: NOT
57569: IFFALSE 57470
// end ;
57571: PPOPN 3
57573: END
// every 0 0$1 trigger StreamModeActive and sTroll do
57574: LD_EXP 33
57578: PUSH
57579: LD_EXP 58
57583: AND
57584: IFFALSE 57638
57586: GO 57588
57588: DISABLE
// begin ToLua ( displayTroll(); ) ;
57589: LD_STRING displayTroll();
57591: PPUSH
57592: CALL_OW 559
// wait ( 3 3$00 ) ;
57596: LD_INT 6300
57598: PPUSH
57599: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57603: LD_STRING hideTroll();
57605: PPUSH
57606: CALL_OW 559
// wait ( 1 1$00 ) ;
57610: LD_INT 2100
57612: PPUSH
57613: CALL_OW 67
// ToLua ( displayTroll(); ) ;
57617: LD_STRING displayTroll();
57619: PPUSH
57620: CALL_OW 559
// wait ( 1 1$00 ) ;
57624: LD_INT 2100
57626: PPUSH
57627: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57631: LD_STRING hideTroll();
57633: PPUSH
57634: CALL_OW 559
// end ;
57638: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
57639: LD_EXP 33
57643: PUSH
57644: LD_EXP 59
57648: AND
57649: IFFALSE 57712
57651: GO 57653
57653: DISABLE
57654: LD_INT 0
57656: PPUSH
// begin p := 0 ;
57657: LD_ADDR_VAR 0 1
57661: PUSH
57662: LD_INT 0
57664: ST_TO_ADDR
// repeat game_speed := 1 ;
57665: LD_ADDR_OWVAR 65
57669: PUSH
57670: LD_INT 1
57672: ST_TO_ADDR
// wait ( 0 0$1 ) ;
57673: LD_INT 35
57675: PPUSH
57676: CALL_OW 67
// p := p + 1 ;
57680: LD_ADDR_VAR 0 1
57684: PUSH
57685: LD_VAR 0 1
57689: PUSH
57690: LD_INT 1
57692: PLUS
57693: ST_TO_ADDR
// until p >= 60 ;
57694: LD_VAR 0 1
57698: PUSH
57699: LD_INT 60
57701: GREATEREQUAL
57702: IFFALSE 57665
// game_speed := 4 ;
57704: LD_ADDR_OWVAR 65
57708: PUSH
57709: LD_INT 4
57711: ST_TO_ADDR
// end ;
57712: PPOPN 1
57714: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
57715: LD_EXP 33
57719: PUSH
57720: LD_EXP 60
57724: AND
57725: IFFALSE 57871
57727: GO 57729
57729: DISABLE
57730: LD_INT 0
57732: PPUSH
57733: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57734: LD_ADDR_VAR 0 1
57738: PUSH
57739: LD_INT 22
57741: PUSH
57742: LD_OWVAR 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: LD_INT 30
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 30
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: LIST
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PPUSH
57783: CALL_OW 69
57787: ST_TO_ADDR
// if not depot then
57788: LD_VAR 0 1
57792: NOT
57793: IFFALSE 57797
// exit ;
57795: GO 57871
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
57797: LD_ADDR_VAR 0 2
57801: PUSH
57802: LD_VAR 0 1
57806: PUSH
57807: LD_INT 1
57809: PPUSH
57810: LD_VAR 0 1
57814: PPUSH
57815: CALL_OW 12
57819: ARRAY
57820: PPUSH
57821: CALL_OW 274
57825: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
57826: LD_VAR 0 2
57830: PPUSH
57831: LD_INT 1
57833: PPUSH
57834: LD_INT 0
57836: PPUSH
57837: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
57841: LD_VAR 0 2
57845: PPUSH
57846: LD_INT 2
57848: PPUSH
57849: LD_INT 0
57851: PPUSH
57852: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
57856: LD_VAR 0 2
57860: PPUSH
57861: LD_INT 3
57863: PPUSH
57864: LD_INT 0
57866: PPUSH
57867: CALL_OW 277
// end ;
57871: PPOPN 2
57873: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
57874: LD_EXP 33
57878: PUSH
57879: LD_EXP 61
57883: AND
57884: IFFALSE 57981
57886: GO 57888
57888: DISABLE
57889: LD_INT 0
57891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57892: LD_ADDR_VAR 0 1
57896: PUSH
57897: LD_INT 22
57899: PUSH
57900: LD_OWVAR 2
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 21
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 3
57921: PUSH
57922: LD_INT 23
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: LIST
57940: PPUSH
57941: CALL_OW 69
57945: ST_TO_ADDR
// if not tmp then
57946: LD_VAR 0 1
57950: NOT
57951: IFFALSE 57955
// exit ;
57953: GO 57981
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
57955: LD_VAR 0 1
57959: PUSH
57960: LD_INT 1
57962: PPUSH
57963: LD_VAR 0 1
57967: PPUSH
57968: CALL_OW 12
57972: ARRAY
57973: PPUSH
57974: LD_INT 200
57976: PPUSH
57977: CALL_OW 234
// end ;
57981: PPOPN 1
57983: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
57984: LD_EXP 33
57988: PUSH
57989: LD_EXP 62
57993: AND
57994: IFFALSE 58073
57996: GO 57998
57998: DISABLE
57999: LD_INT 0
58001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
58002: LD_ADDR_VAR 0 1
58006: PUSH
58007: LD_INT 22
58009: PUSH
58010: LD_OWVAR 2
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 21
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PPUSH
58033: CALL_OW 69
58037: ST_TO_ADDR
// if not tmp then
58038: LD_VAR 0 1
58042: NOT
58043: IFFALSE 58047
// exit ;
58045: GO 58073
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
58047: LD_VAR 0 1
58051: PUSH
58052: LD_INT 1
58054: PPUSH
58055: LD_VAR 0 1
58059: PPUSH
58060: CALL_OW 12
58064: ARRAY
58065: PPUSH
58066: LD_INT 60
58068: PPUSH
58069: CALL_OW 234
// end ;
58073: PPOPN 1
58075: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
58076: LD_EXP 33
58080: PUSH
58081: LD_EXP 63
58085: AND
58086: IFFALSE 58185
58088: GO 58090
58090: DISABLE
58091: LD_INT 0
58093: PPUSH
58094: PPUSH
// begin enable ;
58095: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
58096: LD_ADDR_VAR 0 1
58100: PUSH
58101: LD_INT 22
58103: PUSH
58104: LD_OWVAR 2
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 61
58115: PUSH
58116: EMPTY
58117: LIST
58118: PUSH
58119: LD_INT 33
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: LIST
58133: PPUSH
58134: CALL_OW 69
58138: ST_TO_ADDR
// if not tmp then
58139: LD_VAR 0 1
58143: NOT
58144: IFFALSE 58148
// exit ;
58146: GO 58185
// for i in tmp do
58148: LD_ADDR_VAR 0 2
58152: PUSH
58153: LD_VAR 0 1
58157: PUSH
58158: FOR_IN
58159: IFFALSE 58183
// if IsControledBy ( i ) then
58161: LD_VAR 0 2
58165: PPUSH
58166: CALL_OW 312
58170: IFFALSE 58181
// ComUnlink ( i ) ;
58172: LD_VAR 0 2
58176: PPUSH
58177: CALL_OW 136
58181: GO 58158
58183: POP
58184: POP
// end ;
58185: PPOPN 2
58187: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
58188: LD_EXP 33
58192: PUSH
58193: LD_EXP 64
58197: AND
58198: IFFALSE 58338
58200: GO 58202
58202: DISABLE
58203: LD_INT 0
58205: PPUSH
58206: PPUSH
// begin ToLua ( displayPowell(); ) ;
58207: LD_STRING displayPowell();
58209: PPUSH
58210: CALL_OW 559
// uc_side := 0 ;
58214: LD_ADDR_OWVAR 20
58218: PUSH
58219: LD_INT 0
58221: ST_TO_ADDR
// uc_nation := 2 ;
58222: LD_ADDR_OWVAR 21
58226: PUSH
58227: LD_INT 2
58229: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
58230: LD_ADDR_OWVAR 37
58234: PUSH
58235: LD_INT 14
58237: ST_TO_ADDR
// vc_engine := engine_siberite ;
58238: LD_ADDR_OWVAR 39
58242: PUSH
58243: LD_INT 3
58245: ST_TO_ADDR
// vc_control := control_apeman ;
58246: LD_ADDR_OWVAR 38
58250: PUSH
58251: LD_INT 5
58253: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
58254: LD_ADDR_OWVAR 40
58258: PUSH
58259: LD_INT 29
58261: ST_TO_ADDR
// un := CreateVehicle ;
58262: LD_ADDR_VAR 0 2
58266: PUSH
58267: CALL_OW 45
58271: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58272: LD_VAR 0 2
58276: PPUSH
58277: LD_INT 1
58279: PPUSH
58280: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58284: LD_INT 35
58286: PPUSH
58287: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58291: LD_VAR 0 2
58295: PPUSH
58296: LD_INT 22
58298: PUSH
58299: LD_OWVAR 2
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PPUSH
58308: CALL_OW 69
58312: PPUSH
58313: LD_VAR 0 2
58317: PPUSH
58318: CALL_OW 74
58322: PPUSH
58323: CALL_OW 115
// until IsDead ( un ) ;
58327: LD_VAR 0 2
58331: PPUSH
58332: CALL_OW 301
58336: IFFALSE 58284
// end ;
58338: PPOPN 2
58340: END
// every 0 0$1 trigger StreamModeActive and sStu do
58341: LD_EXP 33
58345: PUSH
58346: LD_EXP 72
58350: AND
58351: IFFALSE 58367
58353: GO 58355
58355: DISABLE
// begin ToLua ( displayStucuk(); ) ;
58356: LD_STRING displayStucuk();
58358: PPUSH
58359: CALL_OW 559
// ResetFog ;
58363: CALL_OW 335
// end ;
58367: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
58368: LD_EXP 33
58372: PUSH
58373: LD_EXP 65
58377: AND
58378: IFFALSE 58519
58380: GO 58382
58382: DISABLE
58383: LD_INT 0
58385: PPUSH
58386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58387: LD_ADDR_VAR 0 2
58391: PUSH
58392: LD_INT 22
58394: PUSH
58395: LD_OWVAR 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 21
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PPUSH
58418: CALL_OW 69
58422: ST_TO_ADDR
// if not tmp then
58423: LD_VAR 0 2
58427: NOT
58428: IFFALSE 58432
// exit ;
58430: GO 58519
// un := tmp [ rand ( 1 , tmp ) ] ;
58432: LD_ADDR_VAR 0 1
58436: PUSH
58437: LD_VAR 0 2
58441: PUSH
58442: LD_INT 1
58444: PPUSH
58445: LD_VAR 0 2
58449: PPUSH
58450: CALL_OW 12
58454: ARRAY
58455: ST_TO_ADDR
// SetSide ( un , 0 ) ;
58456: LD_VAR 0 1
58460: PPUSH
58461: LD_INT 0
58463: PPUSH
58464: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
58468: LD_VAR 0 1
58472: PPUSH
58473: LD_OWVAR 3
58477: PUSH
58478: LD_VAR 0 1
58482: DIFF
58483: PPUSH
58484: LD_VAR 0 1
58488: PPUSH
58489: CALL_OW 74
58493: PPUSH
58494: CALL_OW 115
// wait ( 0 0$20 ) ;
58498: LD_INT 700
58500: PPUSH
58501: CALL_OW 67
// SetSide ( un , your_side ) ;
58505: LD_VAR 0 1
58509: PPUSH
58510: LD_OWVAR 2
58514: PPUSH
58515: CALL_OW 235
// end ;
58519: PPOPN 2
58521: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
58522: LD_EXP 33
58526: PUSH
58527: LD_EXP 66
58531: AND
58532: IFFALSE 58638
58534: GO 58536
58536: DISABLE
58537: LD_INT 0
58539: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58540: LD_ADDR_VAR 0 1
58544: PUSH
58545: LD_INT 22
58547: PUSH
58548: LD_OWVAR 2
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: LD_INT 30
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 30
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: LIST
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PPUSH
58589: CALL_OW 69
58593: ST_TO_ADDR
// if not depot then
58594: LD_VAR 0 1
58598: NOT
58599: IFFALSE 58603
// exit ;
58601: GO 58638
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
58603: LD_VAR 0 1
58607: PUSH
58608: LD_INT 1
58610: ARRAY
58611: PPUSH
58612: CALL_OW 250
58616: PPUSH
58617: LD_VAR 0 1
58621: PUSH
58622: LD_INT 1
58624: ARRAY
58625: PPUSH
58626: CALL_OW 251
58630: PPUSH
58631: LD_INT 70
58633: PPUSH
58634: CALL_OW 495
// end ;
58638: PPOPN 1
58640: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
58641: LD_EXP 33
58645: PUSH
58646: LD_EXP 67
58650: AND
58651: IFFALSE 58862
58653: GO 58655
58655: DISABLE
58656: LD_INT 0
58658: PPUSH
58659: PPUSH
58660: PPUSH
58661: PPUSH
58662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58663: LD_ADDR_VAR 0 5
58667: PUSH
58668: LD_INT 22
58670: PUSH
58671: LD_OWVAR 2
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 21
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PPUSH
58694: CALL_OW 69
58698: ST_TO_ADDR
// if not tmp then
58699: LD_VAR 0 5
58703: NOT
58704: IFFALSE 58708
// exit ;
58706: GO 58862
// for i in tmp do
58708: LD_ADDR_VAR 0 1
58712: PUSH
58713: LD_VAR 0 5
58717: PUSH
58718: FOR_IN
58719: IFFALSE 58860
// begin d := rand ( 0 , 5 ) ;
58721: LD_ADDR_VAR 0 4
58725: PUSH
58726: LD_INT 0
58728: PPUSH
58729: LD_INT 5
58731: PPUSH
58732: CALL_OW 12
58736: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58737: LD_ADDR_VAR 0 2
58741: PUSH
58742: LD_VAR 0 1
58746: PPUSH
58747: CALL_OW 250
58751: PPUSH
58752: LD_VAR 0 4
58756: PPUSH
58757: LD_INT 3
58759: PPUSH
58760: LD_INT 12
58762: PPUSH
58763: CALL_OW 12
58767: PPUSH
58768: CALL_OW 272
58772: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58773: LD_ADDR_VAR 0 3
58777: PUSH
58778: LD_VAR 0 1
58782: PPUSH
58783: CALL_OW 251
58787: PPUSH
58788: LD_VAR 0 4
58792: PPUSH
58793: LD_INT 3
58795: PPUSH
58796: LD_INT 12
58798: PPUSH
58799: CALL_OW 12
58803: PPUSH
58804: CALL_OW 273
58808: ST_TO_ADDR
// if ValidHex ( x , y ) then
58809: LD_VAR 0 2
58813: PPUSH
58814: LD_VAR 0 3
58818: PPUSH
58819: CALL_OW 488
58823: IFFALSE 58858
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
58825: LD_VAR 0 1
58829: PPUSH
58830: LD_VAR 0 2
58834: PPUSH
58835: LD_VAR 0 3
58839: PPUSH
58840: LD_INT 3
58842: PPUSH
58843: LD_INT 6
58845: PPUSH
58846: CALL_OW 12
58850: PPUSH
58851: LD_INT 1
58853: PPUSH
58854: CALL_OW 483
// end ;
58858: GO 58718
58860: POP
58861: POP
// end ;
58862: PPOPN 5
58864: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
58865: LD_EXP 33
58869: PUSH
58870: LD_EXP 68
58874: AND
58875: IFFALSE 58969
58877: GO 58879
58879: DISABLE
58880: LD_INT 0
58882: PPUSH
58883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
58884: LD_ADDR_VAR 0 2
58888: PUSH
58889: LD_INT 22
58891: PUSH
58892: LD_OWVAR 2
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 32
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 21
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: PPUSH
58926: CALL_OW 69
58930: ST_TO_ADDR
// if not tmp then
58931: LD_VAR 0 2
58935: NOT
58936: IFFALSE 58940
// exit ;
58938: GO 58969
// for i in tmp do
58940: LD_ADDR_VAR 0 1
58944: PUSH
58945: LD_VAR 0 2
58949: PUSH
58950: FOR_IN
58951: IFFALSE 58967
// SetFuel ( i , 0 ) ;
58953: LD_VAR 0 1
58957: PPUSH
58958: LD_INT 0
58960: PPUSH
58961: CALL_OW 240
58965: GO 58950
58967: POP
58968: POP
// end ;
58969: PPOPN 2
58971: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
58972: LD_EXP 33
58976: PUSH
58977: LD_EXP 69
58981: AND
58982: IFFALSE 59048
58984: GO 58986
58986: DISABLE
58987: LD_INT 0
58989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58990: LD_ADDR_VAR 0 1
58994: PUSH
58995: LD_INT 22
58997: PUSH
58998: LD_OWVAR 2
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 30
59009: PUSH
59010: LD_INT 29
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PPUSH
59021: CALL_OW 69
59025: ST_TO_ADDR
// if not tmp then
59026: LD_VAR 0 1
59030: NOT
59031: IFFALSE 59035
// exit ;
59033: GO 59048
// DestroyUnit ( tmp [ 1 ] ) ;
59035: LD_VAR 0 1
59039: PUSH
59040: LD_INT 1
59042: ARRAY
59043: PPUSH
59044: CALL_OW 65
// end ;
59048: PPOPN 1
59050: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
59051: LD_EXP 33
59055: PUSH
59056: LD_EXP 71
59060: AND
59061: IFFALSE 59190
59063: GO 59065
59065: DISABLE
59066: LD_INT 0
59068: PPUSH
// begin uc_side := 0 ;
59069: LD_ADDR_OWVAR 20
59073: PUSH
59074: LD_INT 0
59076: ST_TO_ADDR
// uc_nation := nation_arabian ;
59077: LD_ADDR_OWVAR 21
59081: PUSH
59082: LD_INT 2
59084: ST_TO_ADDR
// hc_gallery :=  ;
59085: LD_ADDR_OWVAR 33
59089: PUSH
59090: LD_STRING 
59092: ST_TO_ADDR
// hc_name :=  ;
59093: LD_ADDR_OWVAR 26
59097: PUSH
59098: LD_STRING 
59100: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
59101: LD_INT 1
59103: PPUSH
59104: LD_INT 11
59106: PPUSH
59107: LD_INT 10
59109: PPUSH
59110: CALL_OW 380
// un := CreateHuman ;
59114: LD_ADDR_VAR 0 1
59118: PUSH
59119: CALL_OW 44
59123: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59124: LD_VAR 0 1
59128: PPUSH
59129: LD_INT 1
59131: PPUSH
59132: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59136: LD_INT 35
59138: PPUSH
59139: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59143: LD_VAR 0 1
59147: PPUSH
59148: LD_INT 22
59150: PUSH
59151: LD_OWVAR 2
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PPUSH
59160: CALL_OW 69
59164: PPUSH
59165: LD_VAR 0 1
59169: PPUSH
59170: CALL_OW 74
59174: PPUSH
59175: CALL_OW 115
// until IsDead ( un ) ;
59179: LD_VAR 0 1
59183: PPUSH
59184: CALL_OW 301
59188: IFFALSE 59136
// end ;
59190: PPOPN 1
59192: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
59193: LD_EXP 33
59197: PUSH
59198: LD_EXP 73
59202: AND
59203: IFFALSE 59215
59205: GO 59207
59207: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
59208: LD_STRING earthquake(getX(game), 0, 32)
59210: PPUSH
59211: CALL_OW 559
59215: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
59216: LD_EXP 33
59220: PUSH
59221: LD_EXP 74
59225: AND
59226: IFFALSE 59317
59228: GO 59230
59230: DISABLE
59231: LD_INT 0
59233: PPUSH
// begin enable ;
59234: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
59235: LD_ADDR_VAR 0 1
59239: PUSH
59240: LD_INT 22
59242: PUSH
59243: LD_OWVAR 2
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 21
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 33
59264: PUSH
59265: LD_INT 3
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: PPUSH
59277: CALL_OW 69
59281: ST_TO_ADDR
// if not tmp then
59282: LD_VAR 0 1
59286: NOT
59287: IFFALSE 59291
// exit ;
59289: GO 59317
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59291: LD_VAR 0 1
59295: PUSH
59296: LD_INT 1
59298: PPUSH
59299: LD_VAR 0 1
59303: PPUSH
59304: CALL_OW 12
59308: ARRAY
59309: PPUSH
59310: LD_INT 1
59312: PPUSH
59313: CALL_OW 234
// end ;
59317: PPOPN 1
59319: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
59320: LD_EXP 33
59324: PUSH
59325: LD_EXP 75
59329: AND
59330: IFFALSE 59471
59332: GO 59334
59334: DISABLE
59335: LD_INT 0
59337: PPUSH
59338: PPUSH
59339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59340: LD_ADDR_VAR 0 3
59344: PUSH
59345: LD_INT 22
59347: PUSH
59348: LD_OWVAR 2
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 25
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PPUSH
59371: CALL_OW 69
59375: ST_TO_ADDR
// if not tmp then
59376: LD_VAR 0 3
59380: NOT
59381: IFFALSE 59385
// exit ;
59383: GO 59471
// un := tmp [ rand ( 1 , tmp ) ] ;
59385: LD_ADDR_VAR 0 2
59389: PUSH
59390: LD_VAR 0 3
59394: PUSH
59395: LD_INT 1
59397: PPUSH
59398: LD_VAR 0 3
59402: PPUSH
59403: CALL_OW 12
59407: ARRAY
59408: ST_TO_ADDR
// if Crawls ( un ) then
59409: LD_VAR 0 2
59413: PPUSH
59414: CALL_OW 318
59418: IFFALSE 59429
// ComWalk ( un ) ;
59420: LD_VAR 0 2
59424: PPUSH
59425: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
59429: LD_VAR 0 2
59433: PPUSH
59434: LD_INT 9
59436: PPUSH
59437: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
59441: LD_INT 28
59443: PPUSH
59444: LD_OWVAR 2
59448: PPUSH
59449: LD_INT 2
59451: PPUSH
59452: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
59456: LD_INT 29
59458: PPUSH
59459: LD_OWVAR 2
59463: PPUSH
59464: LD_INT 2
59466: PPUSH
59467: CALL_OW 322
// end ;
59471: PPOPN 3
59473: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
59474: LD_EXP 33
59478: PUSH
59479: LD_EXP 76
59483: AND
59484: IFFALSE 59595
59486: GO 59488
59488: DISABLE
59489: LD_INT 0
59491: PPUSH
59492: PPUSH
59493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59494: LD_ADDR_VAR 0 3
59498: PUSH
59499: LD_INT 22
59501: PUSH
59502: LD_OWVAR 2
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 25
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PPUSH
59525: CALL_OW 69
59529: ST_TO_ADDR
// if not tmp then
59530: LD_VAR 0 3
59534: NOT
59535: IFFALSE 59539
// exit ;
59537: GO 59595
// un := tmp [ rand ( 1 , tmp ) ] ;
59539: LD_ADDR_VAR 0 2
59543: PUSH
59544: LD_VAR 0 3
59548: PUSH
59549: LD_INT 1
59551: PPUSH
59552: LD_VAR 0 3
59556: PPUSH
59557: CALL_OW 12
59561: ARRAY
59562: ST_TO_ADDR
// if Crawls ( un ) then
59563: LD_VAR 0 2
59567: PPUSH
59568: CALL_OW 318
59572: IFFALSE 59583
// ComWalk ( un ) ;
59574: LD_VAR 0 2
59578: PPUSH
59579: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59583: LD_VAR 0 2
59587: PPUSH
59588: LD_INT 8
59590: PPUSH
59591: CALL_OW 336
// end ;
59595: PPOPN 3
59597: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
59598: LD_EXP 33
59602: PUSH
59603: LD_EXP 77
59607: AND
59608: IFFALSE 59752
59610: GO 59612
59612: DISABLE
59613: LD_INT 0
59615: PPUSH
59616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
59617: LD_ADDR_VAR 0 2
59621: PUSH
59622: LD_INT 22
59624: PUSH
59625: LD_OWVAR 2
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 21
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 2
59646: PUSH
59647: LD_INT 34
59649: PUSH
59650: LD_INT 12
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 34
59659: PUSH
59660: LD_INT 51
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 34
59669: PUSH
59670: LD_INT 32
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: LIST
59687: PPUSH
59688: CALL_OW 69
59692: ST_TO_ADDR
// if not tmp then
59693: LD_VAR 0 2
59697: NOT
59698: IFFALSE 59702
// exit ;
59700: GO 59752
// for i in tmp do
59702: LD_ADDR_VAR 0 1
59706: PUSH
59707: LD_VAR 0 2
59711: PUSH
59712: FOR_IN
59713: IFFALSE 59750
// if GetCargo ( i , mat_artifact ) = 0 then
59715: LD_VAR 0 1
59719: PPUSH
59720: LD_INT 4
59722: PPUSH
59723: CALL_OW 289
59727: PUSH
59728: LD_INT 0
59730: EQUAL
59731: IFFALSE 59748
// SetCargo ( i , mat_siberit , 100 ) ;
59733: LD_VAR 0 1
59737: PPUSH
59738: LD_INT 3
59740: PPUSH
59741: LD_INT 100
59743: PPUSH
59744: CALL_OW 290
59748: GO 59712
59750: POP
59751: POP
// end ;
59752: PPOPN 2
59754: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59755: LD_EXP 33
59759: PUSH
59760: LD_EXP 78
59764: AND
59765: IFFALSE 59948
59767: GO 59769
59769: DISABLE
59770: LD_INT 0
59772: PPUSH
59773: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59774: LD_ADDR_VAR 0 2
59778: PUSH
59779: LD_INT 22
59781: PUSH
59782: LD_OWVAR 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PPUSH
59791: CALL_OW 69
59795: ST_TO_ADDR
// if not tmp then
59796: LD_VAR 0 2
59800: NOT
59801: IFFALSE 59805
// exit ;
59803: GO 59948
// for i := 1 to 2 do
59805: LD_ADDR_VAR 0 1
59809: PUSH
59810: DOUBLE
59811: LD_INT 1
59813: DEC
59814: ST_TO_ADDR
59815: LD_INT 2
59817: PUSH
59818: FOR_TO
59819: IFFALSE 59946
// begin uc_side := your_side ;
59821: LD_ADDR_OWVAR 20
59825: PUSH
59826: LD_OWVAR 2
59830: ST_TO_ADDR
// uc_nation := nation_american ;
59831: LD_ADDR_OWVAR 21
59835: PUSH
59836: LD_INT 1
59838: ST_TO_ADDR
// vc_chassis := us_morphling ;
59839: LD_ADDR_OWVAR 37
59843: PUSH
59844: LD_INT 5
59846: ST_TO_ADDR
// vc_engine := engine_siberite ;
59847: LD_ADDR_OWVAR 39
59851: PUSH
59852: LD_INT 3
59854: ST_TO_ADDR
// vc_control := control_computer ;
59855: LD_ADDR_OWVAR 38
59859: PUSH
59860: LD_INT 3
59862: ST_TO_ADDR
// vc_weapon := us_double_laser ;
59863: LD_ADDR_OWVAR 40
59867: PUSH
59868: LD_INT 10
59870: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
59871: LD_VAR 0 2
59875: PUSH
59876: LD_INT 1
59878: ARRAY
59879: PPUSH
59880: CALL_OW 310
59884: NOT
59885: IFFALSE 59932
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
59887: CALL_OW 45
59891: PPUSH
59892: LD_VAR 0 2
59896: PUSH
59897: LD_INT 1
59899: ARRAY
59900: PPUSH
59901: CALL_OW 250
59905: PPUSH
59906: LD_VAR 0 2
59910: PUSH
59911: LD_INT 1
59913: ARRAY
59914: PPUSH
59915: CALL_OW 251
59919: PPUSH
59920: LD_INT 12
59922: PPUSH
59923: LD_INT 1
59925: PPUSH
59926: CALL_OW 50
59930: GO 59944
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
59932: CALL_OW 45
59936: PPUSH
59937: LD_INT 1
59939: PPUSH
59940: CALL_OW 51
// end ;
59944: GO 59818
59946: POP
59947: POP
// end ;
59948: PPOPN 2
59950: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
59951: LD_EXP 33
59955: PUSH
59956: LD_EXP 79
59960: AND
59961: IFFALSE 60183
59963: GO 59965
59965: DISABLE
59966: LD_INT 0
59968: PPUSH
59969: PPUSH
59970: PPUSH
59971: PPUSH
59972: PPUSH
59973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59974: LD_ADDR_VAR 0 6
59978: PUSH
59979: LD_INT 22
59981: PUSH
59982: LD_OWVAR 2
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 21
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: LD_INT 23
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: PPUSH
60023: CALL_OW 69
60027: ST_TO_ADDR
// if not tmp then
60028: LD_VAR 0 6
60032: NOT
60033: IFFALSE 60037
// exit ;
60035: GO 60183
// s1 := rand ( 1 , 4 ) ;
60037: LD_ADDR_VAR 0 2
60041: PUSH
60042: LD_INT 1
60044: PPUSH
60045: LD_INT 4
60047: PPUSH
60048: CALL_OW 12
60052: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
60053: LD_ADDR_VAR 0 4
60057: PUSH
60058: LD_VAR 0 6
60062: PUSH
60063: LD_INT 1
60065: ARRAY
60066: PPUSH
60067: LD_VAR 0 2
60071: PPUSH
60072: CALL_OW 259
60076: ST_TO_ADDR
// if s1 = 1 then
60077: LD_VAR 0 2
60081: PUSH
60082: LD_INT 1
60084: EQUAL
60085: IFFALSE 60105
// s2 := rand ( 2 , 4 ) else
60087: LD_ADDR_VAR 0 3
60091: PUSH
60092: LD_INT 2
60094: PPUSH
60095: LD_INT 4
60097: PPUSH
60098: CALL_OW 12
60102: ST_TO_ADDR
60103: GO 60113
// s2 := 1 ;
60105: LD_ADDR_VAR 0 3
60109: PUSH
60110: LD_INT 1
60112: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
60113: LD_ADDR_VAR 0 5
60117: PUSH
60118: LD_VAR 0 6
60122: PUSH
60123: LD_INT 1
60125: ARRAY
60126: PPUSH
60127: LD_VAR 0 3
60131: PPUSH
60132: CALL_OW 259
60136: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
60137: LD_VAR 0 6
60141: PUSH
60142: LD_INT 1
60144: ARRAY
60145: PPUSH
60146: LD_VAR 0 2
60150: PPUSH
60151: LD_VAR 0 5
60155: PPUSH
60156: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
60160: LD_VAR 0 6
60164: PUSH
60165: LD_INT 1
60167: ARRAY
60168: PPUSH
60169: LD_VAR 0 3
60173: PPUSH
60174: LD_VAR 0 4
60178: PPUSH
60179: CALL_OW 237
// end ;
60183: PPOPN 6
60185: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
60186: LD_EXP 33
60190: PUSH
60191: LD_EXP 80
60195: AND
60196: IFFALSE 60275
60198: GO 60200
60200: DISABLE
60201: LD_INT 0
60203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
60204: LD_ADDR_VAR 0 1
60208: PUSH
60209: LD_INT 22
60211: PUSH
60212: LD_OWVAR 2
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 30
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PPUSH
60235: CALL_OW 69
60239: ST_TO_ADDR
// if not tmp then
60240: LD_VAR 0 1
60244: NOT
60245: IFFALSE 60249
// exit ;
60247: GO 60275
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60249: LD_VAR 0 1
60253: PUSH
60254: LD_INT 1
60256: PPUSH
60257: LD_VAR 0 1
60261: PPUSH
60262: CALL_OW 12
60266: ARRAY
60267: PPUSH
60268: LD_INT 1
60270: PPUSH
60271: CALL_OW 234
// end ;
60275: PPOPN 1
60277: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
60278: LD_EXP 33
60282: PUSH
60283: LD_EXP 81
60287: AND
60288: IFFALSE 60400
60290: GO 60292
60292: DISABLE
60293: LD_INT 0
60295: PPUSH
60296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
60297: LD_ADDR_VAR 0 2
60301: PUSH
60302: LD_INT 22
60304: PUSH
60305: LD_OWVAR 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: LD_INT 30
60319: PUSH
60320: LD_INT 27
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 30
60329: PUSH
60330: LD_INT 26
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 30
60339: PUSH
60340: LD_INT 28
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PPUSH
60357: CALL_OW 69
60361: ST_TO_ADDR
// if not tmp then
60362: LD_VAR 0 2
60366: NOT
60367: IFFALSE 60371
// exit ;
60369: GO 60400
// for i in tmp do
60371: LD_ADDR_VAR 0 1
60375: PUSH
60376: LD_VAR 0 2
60380: PUSH
60381: FOR_IN
60382: IFFALSE 60398
// SetLives ( i , 1 ) ;
60384: LD_VAR 0 1
60388: PPUSH
60389: LD_INT 1
60391: PPUSH
60392: CALL_OW 234
60396: GO 60381
60398: POP
60399: POP
// end ;
60400: PPOPN 2
60402: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
60403: LD_EXP 33
60407: PUSH
60408: LD_EXP 82
60412: AND
60413: IFFALSE 60700
60415: GO 60417
60417: DISABLE
60418: LD_INT 0
60420: PPUSH
60421: PPUSH
60422: PPUSH
// begin i := rand ( 1 , 7 ) ;
60423: LD_ADDR_VAR 0 1
60427: PUSH
60428: LD_INT 1
60430: PPUSH
60431: LD_INT 7
60433: PPUSH
60434: CALL_OW 12
60438: ST_TO_ADDR
// case i of 1 :
60439: LD_VAR 0 1
60443: PUSH
60444: LD_INT 1
60446: DOUBLE
60447: EQUAL
60448: IFTRUE 60452
60450: GO 60462
60452: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
60453: LD_STRING earthquake(getX(game), 0, 32)
60455: PPUSH
60456: CALL_OW 559
60460: GO 60700
60462: LD_INT 2
60464: DOUBLE
60465: EQUAL
60466: IFTRUE 60470
60468: GO 60484
60470: POP
// begin ToLua ( displayStucuk(); ) ;
60471: LD_STRING displayStucuk();
60473: PPUSH
60474: CALL_OW 559
// ResetFog ;
60478: CALL_OW 335
// end ; 3 :
60482: GO 60700
60484: LD_INT 3
60486: DOUBLE
60487: EQUAL
60488: IFTRUE 60492
60490: GO 60596
60492: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60493: LD_ADDR_VAR 0 2
60497: PUSH
60498: LD_INT 22
60500: PUSH
60501: LD_OWVAR 2
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 25
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PPUSH
60524: CALL_OW 69
60528: ST_TO_ADDR
// if not tmp then
60529: LD_VAR 0 2
60533: NOT
60534: IFFALSE 60538
// exit ;
60536: GO 60700
// un := tmp [ rand ( 1 , tmp ) ] ;
60538: LD_ADDR_VAR 0 3
60542: PUSH
60543: LD_VAR 0 2
60547: PUSH
60548: LD_INT 1
60550: PPUSH
60551: LD_VAR 0 2
60555: PPUSH
60556: CALL_OW 12
60560: ARRAY
60561: ST_TO_ADDR
// if Crawls ( un ) then
60562: LD_VAR 0 3
60566: PPUSH
60567: CALL_OW 318
60571: IFFALSE 60582
// ComWalk ( un ) ;
60573: LD_VAR 0 3
60577: PPUSH
60578: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60582: LD_VAR 0 3
60586: PPUSH
60587: LD_INT 8
60589: PPUSH
60590: CALL_OW 336
// end ; 4 :
60594: GO 60700
60596: LD_INT 4
60598: DOUBLE
60599: EQUAL
60600: IFTRUE 60604
60602: GO 60678
60604: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60605: LD_ADDR_VAR 0 2
60609: PUSH
60610: LD_INT 22
60612: PUSH
60613: LD_OWVAR 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 30
60624: PUSH
60625: LD_INT 29
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PPUSH
60636: CALL_OW 69
60640: ST_TO_ADDR
// if not tmp then
60641: LD_VAR 0 2
60645: NOT
60646: IFFALSE 60650
// exit ;
60648: GO 60700
// CenterNowOnUnits ( tmp [ 1 ] ) ;
60650: LD_VAR 0 2
60654: PUSH
60655: LD_INT 1
60657: ARRAY
60658: PPUSH
60659: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
60663: LD_VAR 0 2
60667: PUSH
60668: LD_INT 1
60670: ARRAY
60671: PPUSH
60672: CALL_OW 65
// end ; 5 .. 7 :
60676: GO 60700
60678: LD_INT 5
60680: DOUBLE
60681: GREATEREQUAL
60682: IFFALSE 60690
60684: LD_INT 7
60686: DOUBLE
60687: LESSEQUAL
60688: IFTRUE 60692
60690: GO 60699
60692: POP
// StreamSibBomb ; end ;
60693: CALL 56937 0 0
60697: GO 60700
60699: POP
// end ;
60700: PPOPN 3
60702: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
60703: LD_EXP 33
60707: PUSH
60708: LD_EXP 83
60712: AND
60713: IFFALSE 60869
60715: GO 60717
60717: DISABLE
60718: LD_INT 0
60720: PPUSH
60721: PPUSH
60722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60723: LD_ADDR_VAR 0 2
60727: PUSH
60728: LD_INT 81
60730: PUSH
60731: LD_OWVAR 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: LD_INT 21
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 21
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: LIST
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PPUSH
60772: CALL_OW 69
60776: ST_TO_ADDR
// if not tmp then
60777: LD_VAR 0 2
60781: NOT
60782: IFFALSE 60786
// exit ;
60784: GO 60869
// p := 0 ;
60786: LD_ADDR_VAR 0 3
60790: PUSH
60791: LD_INT 0
60793: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60794: LD_INT 35
60796: PPUSH
60797: CALL_OW 67
// p := p + 1 ;
60801: LD_ADDR_VAR 0 3
60805: PUSH
60806: LD_VAR 0 3
60810: PUSH
60811: LD_INT 1
60813: PLUS
60814: ST_TO_ADDR
// for i in tmp do
60815: LD_ADDR_VAR 0 1
60819: PUSH
60820: LD_VAR 0 2
60824: PUSH
60825: FOR_IN
60826: IFFALSE 60857
// if GetLives ( i ) < 1000 then
60828: LD_VAR 0 1
60832: PPUSH
60833: CALL_OW 256
60837: PUSH
60838: LD_INT 1000
60840: LESS
60841: IFFALSE 60855
// SetLives ( i , 1000 ) ;
60843: LD_VAR 0 1
60847: PPUSH
60848: LD_INT 1000
60850: PPUSH
60851: CALL_OW 234
60855: GO 60825
60857: POP
60858: POP
// until p > 20 ;
60859: LD_VAR 0 3
60863: PUSH
60864: LD_INT 20
60866: GREATER
60867: IFFALSE 60794
// end ;
60869: PPOPN 3
60871: END
// every 0 0$1 trigger StreamModeActive and sTime do
60872: LD_EXP 33
60876: PUSH
60877: LD_EXP 84
60881: AND
60882: IFFALSE 60917
60884: GO 60886
60886: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
60887: LD_INT 28
60889: PPUSH
60890: LD_OWVAR 2
60894: PPUSH
60895: LD_INT 2
60897: PPUSH
60898: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
60902: LD_INT 30
60904: PPUSH
60905: LD_OWVAR 2
60909: PPUSH
60910: LD_INT 2
60912: PPUSH
60913: CALL_OW 322
// end ;
60917: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
60918: LD_EXP 33
60922: PUSH
60923: LD_EXP 85
60927: AND
60928: IFFALSE 61049
60930: GO 60932
60932: DISABLE
60933: LD_INT 0
60935: PPUSH
60936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60937: LD_ADDR_VAR 0 2
60941: PUSH
60942: LD_INT 22
60944: PUSH
60945: LD_OWVAR 2
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 21
60956: PUSH
60957: LD_INT 1
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 3
60966: PUSH
60967: LD_INT 23
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: LIST
60985: PPUSH
60986: CALL_OW 69
60990: ST_TO_ADDR
// if not tmp then
60991: LD_VAR 0 2
60995: NOT
60996: IFFALSE 61000
// exit ;
60998: GO 61049
// for i in tmp do
61000: LD_ADDR_VAR 0 1
61004: PUSH
61005: LD_VAR 0 2
61009: PUSH
61010: FOR_IN
61011: IFFALSE 61047
// begin if Crawls ( i ) then
61013: LD_VAR 0 1
61017: PPUSH
61018: CALL_OW 318
61022: IFFALSE 61033
// ComWalk ( i ) ;
61024: LD_VAR 0 1
61028: PPUSH
61029: CALL_OW 138
// SetClass ( i , 2 ) ;
61033: LD_VAR 0 1
61037: PPUSH
61038: LD_INT 2
61040: PPUSH
61041: CALL_OW 336
// end ;
61045: GO 61010
61047: POP
61048: POP
// end ;
61049: PPOPN 2
61051: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
61052: LD_EXP 33
61056: PUSH
61057: LD_EXP 86
61061: AND
61062: IFFALSE 61350
61064: GO 61066
61066: DISABLE
61067: LD_INT 0
61069: PPUSH
61070: PPUSH
61071: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
61072: LD_OWVAR 2
61076: PPUSH
61077: LD_INT 9
61079: PPUSH
61080: LD_INT 1
61082: PPUSH
61083: LD_INT 1
61085: PPUSH
61086: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
61090: LD_INT 9
61092: PPUSH
61093: LD_OWVAR 2
61097: PPUSH
61098: CALL_OW 343
// uc_side := 9 ;
61102: LD_ADDR_OWVAR 20
61106: PUSH
61107: LD_INT 9
61109: ST_TO_ADDR
// uc_nation := 2 ;
61110: LD_ADDR_OWVAR 21
61114: PUSH
61115: LD_INT 2
61117: ST_TO_ADDR
// hc_name := Dark Warrior ;
61118: LD_ADDR_OWVAR 26
61122: PUSH
61123: LD_STRING Dark Warrior
61125: ST_TO_ADDR
// hc_gallery :=  ;
61126: LD_ADDR_OWVAR 33
61130: PUSH
61131: LD_STRING 
61133: ST_TO_ADDR
// hc_noskilllimit := true ;
61134: LD_ADDR_OWVAR 76
61138: PUSH
61139: LD_INT 1
61141: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
61142: LD_ADDR_OWVAR 31
61146: PUSH
61147: LD_INT 30
61149: PUSH
61150: LD_INT 30
61152: PUSH
61153: LD_INT 30
61155: PUSH
61156: LD_INT 30
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: ST_TO_ADDR
// un := CreateHuman ;
61165: LD_ADDR_VAR 0 3
61169: PUSH
61170: CALL_OW 44
61174: ST_TO_ADDR
// hc_noskilllimit := false ;
61175: LD_ADDR_OWVAR 76
61179: PUSH
61180: LD_INT 0
61182: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61183: LD_VAR 0 3
61187: PPUSH
61188: LD_INT 1
61190: PPUSH
61191: CALL_OW 51
// ToLua ( playRanger() ) ;
61195: LD_STRING playRanger()
61197: PPUSH
61198: CALL_OW 559
// p := 0 ;
61202: LD_ADDR_VAR 0 2
61206: PUSH
61207: LD_INT 0
61209: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61210: LD_INT 35
61212: PPUSH
61213: CALL_OW 67
// p := p + 1 ;
61217: LD_ADDR_VAR 0 2
61221: PUSH
61222: LD_VAR 0 2
61226: PUSH
61227: LD_INT 1
61229: PLUS
61230: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
61231: LD_VAR 0 3
61235: PPUSH
61236: CALL_OW 256
61240: PUSH
61241: LD_INT 1000
61243: LESS
61244: IFFALSE 61258
// SetLives ( un , 1000 ) ;
61246: LD_VAR 0 3
61250: PPUSH
61251: LD_INT 1000
61253: PPUSH
61254: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
61258: LD_VAR 0 3
61262: PPUSH
61263: LD_INT 81
61265: PUSH
61266: LD_OWVAR 2
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 91
61277: PUSH
61278: LD_VAR 0 3
61282: PUSH
61283: LD_INT 30
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: LIST
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PPUSH
61295: CALL_OW 69
61299: PPUSH
61300: LD_VAR 0 3
61304: PPUSH
61305: CALL_OW 74
61309: PPUSH
61310: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
61314: LD_VAR 0 2
61318: PUSH
61319: LD_INT 80
61321: GREATER
61322: PUSH
61323: LD_VAR 0 3
61327: PPUSH
61328: CALL_OW 301
61332: OR
61333: IFFALSE 61210
// if un then
61335: LD_VAR 0 3
61339: IFFALSE 61350
// RemoveUnit ( un ) ;
61341: LD_VAR 0 3
61345: PPUSH
61346: CALL_OW 64
// end ;
61350: PPOPN 3
61352: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
61353: LD_EXP 87
61357: IFFALSE 61473
61359: GO 61361
61361: DISABLE
61362: LD_INT 0
61364: PPUSH
61365: PPUSH
61366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
61367: LD_ADDR_VAR 0 2
61371: PUSH
61372: LD_INT 81
61374: PUSH
61375: LD_OWVAR 2
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 21
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PPUSH
61398: CALL_OW 69
61402: ST_TO_ADDR
// ToLua ( playComputer() ) ;
61403: LD_STRING playComputer()
61405: PPUSH
61406: CALL_OW 559
// if not tmp then
61410: LD_VAR 0 2
61414: NOT
61415: IFFALSE 61419
// exit ;
61417: GO 61473
// for i in tmp do
61419: LD_ADDR_VAR 0 1
61423: PUSH
61424: LD_VAR 0 2
61428: PUSH
61429: FOR_IN
61430: IFFALSE 61471
// for j := 1 to 4 do
61432: LD_ADDR_VAR 0 3
61436: PUSH
61437: DOUBLE
61438: LD_INT 1
61440: DEC
61441: ST_TO_ADDR
61442: LD_INT 4
61444: PUSH
61445: FOR_TO
61446: IFFALSE 61467
// SetSkill ( i , j , 10 ) ;
61448: LD_VAR 0 1
61452: PPUSH
61453: LD_VAR 0 3
61457: PPUSH
61458: LD_INT 10
61460: PPUSH
61461: CALL_OW 237
61465: GO 61445
61467: POP
61468: POP
61469: GO 61429
61471: POP
61472: POP
// end ;
61473: PPOPN 3
61475: END
// every 0 0$1 trigger s30 do var i , tmp ;
61476: LD_EXP 88
61480: IFFALSE 61549
61482: GO 61484
61484: DISABLE
61485: LD_INT 0
61487: PPUSH
61488: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61489: LD_ADDR_VAR 0 2
61493: PUSH
61494: LD_INT 22
61496: PUSH
61497: LD_OWVAR 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PPUSH
61506: CALL_OW 69
61510: ST_TO_ADDR
// if not tmp then
61511: LD_VAR 0 2
61515: NOT
61516: IFFALSE 61520
// exit ;
61518: GO 61549
// for i in tmp do
61520: LD_ADDR_VAR 0 1
61524: PUSH
61525: LD_VAR 0 2
61529: PUSH
61530: FOR_IN
61531: IFFALSE 61547
// SetLives ( i , 300 ) ;
61533: LD_VAR 0 1
61537: PPUSH
61538: LD_INT 300
61540: PPUSH
61541: CALL_OW 234
61545: GO 61530
61547: POP
61548: POP
// end ;
61549: PPOPN 2
61551: END
// every 0 0$1 trigger s60 do var i , tmp ;
61552: LD_EXP 89
61556: IFFALSE 61625
61558: GO 61560
61560: DISABLE
61561: LD_INT 0
61563: PPUSH
61564: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61565: LD_ADDR_VAR 0 2
61569: PUSH
61570: LD_INT 22
61572: PUSH
61573: LD_OWVAR 2
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PPUSH
61582: CALL_OW 69
61586: ST_TO_ADDR
// if not tmp then
61587: LD_VAR 0 2
61591: NOT
61592: IFFALSE 61596
// exit ;
61594: GO 61625
// for i in tmp do
61596: LD_ADDR_VAR 0 1
61600: PUSH
61601: LD_VAR 0 2
61605: PUSH
61606: FOR_IN
61607: IFFALSE 61623
// SetLives ( i , 600 ) ;
61609: LD_VAR 0 1
61613: PPUSH
61614: LD_INT 600
61616: PPUSH
61617: CALL_OW 234
61621: GO 61606
61623: POP
61624: POP
// end ;
61625: PPOPN 2
61627: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61628: LD_INT 0
61630: PPUSH
// case cmd of 301 :
61631: LD_VAR 0 1
61635: PUSH
61636: LD_INT 301
61638: DOUBLE
61639: EQUAL
61640: IFTRUE 61644
61642: GO 61676
61644: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
61645: LD_VAR 0 6
61649: PPUSH
61650: LD_VAR 0 7
61654: PPUSH
61655: LD_VAR 0 8
61659: PPUSH
61660: LD_VAR 0 4
61664: PPUSH
61665: LD_VAR 0 5
61669: PPUSH
61670: CALL 62877 0 5
61674: GO 61797
61676: LD_INT 302
61678: DOUBLE
61679: EQUAL
61680: IFTRUE 61684
61682: GO 61721
61684: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
61685: LD_VAR 0 6
61689: PPUSH
61690: LD_VAR 0 7
61694: PPUSH
61695: LD_VAR 0 8
61699: PPUSH
61700: LD_VAR 0 9
61704: PPUSH
61705: LD_VAR 0 4
61709: PPUSH
61710: LD_VAR 0 5
61714: PPUSH
61715: CALL 62968 0 6
61719: GO 61797
61721: LD_INT 303
61723: DOUBLE
61724: EQUAL
61725: IFTRUE 61729
61727: GO 61766
61729: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61730: LD_VAR 0 6
61734: PPUSH
61735: LD_VAR 0 7
61739: PPUSH
61740: LD_VAR 0 8
61744: PPUSH
61745: LD_VAR 0 9
61749: PPUSH
61750: LD_VAR 0 4
61754: PPUSH
61755: LD_VAR 0 5
61759: PPUSH
61760: CALL 61802 0 6
61764: GO 61797
61766: LD_INT 304
61768: DOUBLE
61769: EQUAL
61770: IFTRUE 61774
61772: GO 61796
61774: POP
// hHackTeleport ( unit , x , y ) ; end ;
61775: LD_VAR 0 2
61779: PPUSH
61780: LD_VAR 0 4
61784: PPUSH
61785: LD_VAR 0 5
61789: PPUSH
61790: CALL 63561 0 3
61794: GO 61797
61796: POP
// end ;
61797: LD_VAR 0 12
61801: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61802: LD_INT 0
61804: PPUSH
61805: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61806: LD_VAR 0 1
61810: PUSH
61811: LD_INT 1
61813: LESS
61814: PUSH
61815: LD_VAR 0 1
61819: PUSH
61820: LD_INT 3
61822: GREATER
61823: OR
61824: PUSH
61825: LD_VAR 0 5
61829: PPUSH
61830: LD_VAR 0 6
61834: PPUSH
61835: CALL_OW 428
61839: OR
61840: IFFALSE 61844
// exit ;
61842: GO 62564
// uc_side := your_side ;
61844: LD_ADDR_OWVAR 20
61848: PUSH
61849: LD_OWVAR 2
61853: ST_TO_ADDR
// uc_nation := nation ;
61854: LD_ADDR_OWVAR 21
61858: PUSH
61859: LD_VAR 0 1
61863: ST_TO_ADDR
// bc_level = 1 ;
61864: LD_ADDR_OWVAR 43
61868: PUSH
61869: LD_INT 1
61871: ST_TO_ADDR
// case btype of 1 :
61872: LD_VAR 0 2
61876: PUSH
61877: LD_INT 1
61879: DOUBLE
61880: EQUAL
61881: IFTRUE 61885
61883: GO 61896
61885: POP
// bc_type := b_depot ; 2 :
61886: LD_ADDR_OWVAR 42
61890: PUSH
61891: LD_INT 0
61893: ST_TO_ADDR
61894: GO 62508
61896: LD_INT 2
61898: DOUBLE
61899: EQUAL
61900: IFTRUE 61904
61902: GO 61915
61904: POP
// bc_type := b_warehouse ; 3 :
61905: LD_ADDR_OWVAR 42
61909: PUSH
61910: LD_INT 1
61912: ST_TO_ADDR
61913: GO 62508
61915: LD_INT 3
61917: DOUBLE
61918: EQUAL
61919: IFTRUE 61923
61921: GO 61934
61923: POP
// bc_type := b_lab ; 4 .. 9 :
61924: LD_ADDR_OWVAR 42
61928: PUSH
61929: LD_INT 6
61931: ST_TO_ADDR
61932: GO 62508
61934: LD_INT 4
61936: DOUBLE
61937: GREATEREQUAL
61938: IFFALSE 61946
61940: LD_INT 9
61942: DOUBLE
61943: LESSEQUAL
61944: IFTRUE 61948
61946: GO 62000
61948: POP
// begin bc_type := b_lab_half ;
61949: LD_ADDR_OWVAR 42
61953: PUSH
61954: LD_INT 7
61956: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
61957: LD_ADDR_OWVAR 44
61961: PUSH
61962: LD_INT 10
61964: PUSH
61965: LD_INT 11
61967: PUSH
61968: LD_INT 12
61970: PUSH
61971: LD_INT 15
61973: PUSH
61974: LD_INT 14
61976: PUSH
61977: LD_INT 13
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: PUSH
61988: LD_VAR 0 2
61992: PUSH
61993: LD_INT 3
61995: MINUS
61996: ARRAY
61997: ST_TO_ADDR
// end ; 10 .. 13 :
61998: GO 62508
62000: LD_INT 10
62002: DOUBLE
62003: GREATEREQUAL
62004: IFFALSE 62012
62006: LD_INT 13
62008: DOUBLE
62009: LESSEQUAL
62010: IFTRUE 62014
62012: GO 62091
62014: POP
// begin bc_type := b_lab_full ;
62015: LD_ADDR_OWVAR 42
62019: PUSH
62020: LD_INT 8
62022: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
62023: LD_ADDR_OWVAR 44
62027: PUSH
62028: LD_INT 10
62030: PUSH
62031: LD_INT 12
62033: PUSH
62034: LD_INT 14
62036: PUSH
62037: LD_INT 13
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: PUSH
62046: LD_VAR 0 2
62050: PUSH
62051: LD_INT 9
62053: MINUS
62054: ARRAY
62055: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
62056: LD_ADDR_OWVAR 45
62060: PUSH
62061: LD_INT 11
62063: PUSH
62064: LD_INT 15
62066: PUSH
62067: LD_INT 12
62069: PUSH
62070: LD_INT 15
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: PUSH
62079: LD_VAR 0 2
62083: PUSH
62084: LD_INT 9
62086: MINUS
62087: ARRAY
62088: ST_TO_ADDR
// end ; 14 :
62089: GO 62508
62091: LD_INT 14
62093: DOUBLE
62094: EQUAL
62095: IFTRUE 62099
62097: GO 62110
62099: POP
// bc_type := b_workshop ; 15 :
62100: LD_ADDR_OWVAR 42
62104: PUSH
62105: LD_INT 2
62107: ST_TO_ADDR
62108: GO 62508
62110: LD_INT 15
62112: DOUBLE
62113: EQUAL
62114: IFTRUE 62118
62116: GO 62129
62118: POP
// bc_type := b_factory ; 16 :
62119: LD_ADDR_OWVAR 42
62123: PUSH
62124: LD_INT 3
62126: ST_TO_ADDR
62127: GO 62508
62129: LD_INT 16
62131: DOUBLE
62132: EQUAL
62133: IFTRUE 62137
62135: GO 62148
62137: POP
// bc_type := b_ext_gun ; 17 :
62138: LD_ADDR_OWVAR 42
62142: PUSH
62143: LD_INT 17
62145: ST_TO_ADDR
62146: GO 62508
62148: LD_INT 17
62150: DOUBLE
62151: EQUAL
62152: IFTRUE 62156
62154: GO 62184
62156: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
62157: LD_ADDR_OWVAR 42
62161: PUSH
62162: LD_INT 19
62164: PUSH
62165: LD_INT 23
62167: PUSH
62168: LD_INT 19
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: PUSH
62176: LD_VAR 0 1
62180: ARRAY
62181: ST_TO_ADDR
62182: GO 62508
62184: LD_INT 18
62186: DOUBLE
62187: EQUAL
62188: IFTRUE 62192
62190: GO 62203
62192: POP
// bc_type := b_ext_radar ; 19 :
62193: LD_ADDR_OWVAR 42
62197: PUSH
62198: LD_INT 20
62200: ST_TO_ADDR
62201: GO 62508
62203: LD_INT 19
62205: DOUBLE
62206: EQUAL
62207: IFTRUE 62211
62209: GO 62222
62211: POP
// bc_type := b_ext_radio ; 20 :
62212: LD_ADDR_OWVAR 42
62216: PUSH
62217: LD_INT 22
62219: ST_TO_ADDR
62220: GO 62508
62222: LD_INT 20
62224: DOUBLE
62225: EQUAL
62226: IFTRUE 62230
62228: GO 62241
62230: POP
// bc_type := b_ext_siberium ; 21 :
62231: LD_ADDR_OWVAR 42
62235: PUSH
62236: LD_INT 21
62238: ST_TO_ADDR
62239: GO 62508
62241: LD_INT 21
62243: DOUBLE
62244: EQUAL
62245: IFTRUE 62249
62247: GO 62260
62249: POP
// bc_type := b_ext_computer ; 22 :
62250: LD_ADDR_OWVAR 42
62254: PUSH
62255: LD_INT 24
62257: ST_TO_ADDR
62258: GO 62508
62260: LD_INT 22
62262: DOUBLE
62263: EQUAL
62264: IFTRUE 62268
62266: GO 62279
62268: POP
// bc_type := b_ext_track ; 23 :
62269: LD_ADDR_OWVAR 42
62273: PUSH
62274: LD_INT 16
62276: ST_TO_ADDR
62277: GO 62508
62279: LD_INT 23
62281: DOUBLE
62282: EQUAL
62283: IFTRUE 62287
62285: GO 62298
62287: POP
// bc_type := b_ext_laser ; 24 :
62288: LD_ADDR_OWVAR 42
62292: PUSH
62293: LD_INT 25
62295: ST_TO_ADDR
62296: GO 62508
62298: LD_INT 24
62300: DOUBLE
62301: EQUAL
62302: IFTRUE 62306
62304: GO 62317
62306: POP
// bc_type := b_control_tower ; 25 :
62307: LD_ADDR_OWVAR 42
62311: PUSH
62312: LD_INT 36
62314: ST_TO_ADDR
62315: GO 62508
62317: LD_INT 25
62319: DOUBLE
62320: EQUAL
62321: IFTRUE 62325
62323: GO 62336
62325: POP
// bc_type := b_breastwork ; 26 :
62326: LD_ADDR_OWVAR 42
62330: PUSH
62331: LD_INT 31
62333: ST_TO_ADDR
62334: GO 62508
62336: LD_INT 26
62338: DOUBLE
62339: EQUAL
62340: IFTRUE 62344
62342: GO 62355
62344: POP
// bc_type := b_bunker ; 27 :
62345: LD_ADDR_OWVAR 42
62349: PUSH
62350: LD_INT 32
62352: ST_TO_ADDR
62353: GO 62508
62355: LD_INT 27
62357: DOUBLE
62358: EQUAL
62359: IFTRUE 62363
62361: GO 62374
62363: POP
// bc_type := b_turret ; 28 :
62364: LD_ADDR_OWVAR 42
62368: PUSH
62369: LD_INT 33
62371: ST_TO_ADDR
62372: GO 62508
62374: LD_INT 28
62376: DOUBLE
62377: EQUAL
62378: IFTRUE 62382
62380: GO 62393
62382: POP
// bc_type := b_armoury ; 29 :
62383: LD_ADDR_OWVAR 42
62387: PUSH
62388: LD_INT 4
62390: ST_TO_ADDR
62391: GO 62508
62393: LD_INT 29
62395: DOUBLE
62396: EQUAL
62397: IFTRUE 62401
62399: GO 62412
62401: POP
// bc_type := b_barracks ; 30 :
62402: LD_ADDR_OWVAR 42
62406: PUSH
62407: LD_INT 5
62409: ST_TO_ADDR
62410: GO 62508
62412: LD_INT 30
62414: DOUBLE
62415: EQUAL
62416: IFTRUE 62420
62418: GO 62431
62420: POP
// bc_type := b_solar_power ; 31 :
62421: LD_ADDR_OWVAR 42
62425: PUSH
62426: LD_INT 27
62428: ST_TO_ADDR
62429: GO 62508
62431: LD_INT 31
62433: DOUBLE
62434: EQUAL
62435: IFTRUE 62439
62437: GO 62450
62439: POP
// bc_type := b_oil_power ; 32 :
62440: LD_ADDR_OWVAR 42
62444: PUSH
62445: LD_INT 26
62447: ST_TO_ADDR
62448: GO 62508
62450: LD_INT 32
62452: DOUBLE
62453: EQUAL
62454: IFTRUE 62458
62456: GO 62469
62458: POP
// bc_type := b_siberite_power ; 33 :
62459: LD_ADDR_OWVAR 42
62463: PUSH
62464: LD_INT 28
62466: ST_TO_ADDR
62467: GO 62508
62469: LD_INT 33
62471: DOUBLE
62472: EQUAL
62473: IFTRUE 62477
62475: GO 62488
62477: POP
// bc_type := b_oil_mine ; 34 :
62478: LD_ADDR_OWVAR 42
62482: PUSH
62483: LD_INT 29
62485: ST_TO_ADDR
62486: GO 62508
62488: LD_INT 34
62490: DOUBLE
62491: EQUAL
62492: IFTRUE 62496
62494: GO 62507
62496: POP
// bc_type := b_siberite_mine ; end ;
62497: LD_ADDR_OWVAR 42
62501: PUSH
62502: LD_INT 30
62504: ST_TO_ADDR
62505: GO 62508
62507: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
62508: LD_ADDR_VAR 0 8
62512: PUSH
62513: LD_VAR 0 5
62517: PPUSH
62518: LD_VAR 0 6
62522: PPUSH
62523: LD_VAR 0 3
62527: PPUSH
62528: CALL_OW 47
62532: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
62533: LD_OWVAR 42
62537: PUSH
62538: LD_INT 32
62540: PUSH
62541: LD_INT 33
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: IN
62548: IFFALSE 62564
// PlaceWeaponTurret ( b , weapon ) ;
62550: LD_VAR 0 8
62554: PPUSH
62555: LD_VAR 0 4
62559: PPUSH
62560: CALL_OW 431
// end ;
62564: LD_VAR 0 7
62568: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
62569: LD_INT 0
62571: PPUSH
62572: PPUSH
62573: PPUSH
62574: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62575: LD_ADDR_VAR 0 4
62579: PUSH
62580: LD_INT 22
62582: PUSH
62583: LD_OWVAR 2
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: LD_INT 30
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 30
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: LIST
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PPUSH
62624: CALL_OW 69
62628: ST_TO_ADDR
// if not tmp then
62629: LD_VAR 0 4
62633: NOT
62634: IFFALSE 62638
// exit ;
62636: GO 62697
// for i in tmp do
62638: LD_ADDR_VAR 0 2
62642: PUSH
62643: LD_VAR 0 4
62647: PUSH
62648: FOR_IN
62649: IFFALSE 62695
// for j = 1 to 3 do
62651: LD_ADDR_VAR 0 3
62655: PUSH
62656: DOUBLE
62657: LD_INT 1
62659: DEC
62660: ST_TO_ADDR
62661: LD_INT 3
62663: PUSH
62664: FOR_TO
62665: IFFALSE 62691
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
62667: LD_VAR 0 2
62671: PPUSH
62672: CALL_OW 274
62676: PPUSH
62677: LD_VAR 0 3
62681: PPUSH
62682: LD_INT 99999
62684: PPUSH
62685: CALL_OW 277
62689: GO 62664
62691: POP
62692: POP
62693: GO 62648
62695: POP
62696: POP
// end ;
62697: LD_VAR 0 1
62701: RET
// export function hHackSetLevel10 ; var i , j ; begin
62702: LD_INT 0
62704: PPUSH
62705: PPUSH
62706: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62707: LD_ADDR_VAR 0 2
62711: PUSH
62712: LD_INT 21
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PPUSH
62722: CALL_OW 69
62726: PUSH
62727: FOR_IN
62728: IFFALSE 62780
// if IsSelected ( i ) then
62730: LD_VAR 0 2
62734: PPUSH
62735: CALL_OW 306
62739: IFFALSE 62778
// begin for j := 1 to 4 do
62741: LD_ADDR_VAR 0 3
62745: PUSH
62746: DOUBLE
62747: LD_INT 1
62749: DEC
62750: ST_TO_ADDR
62751: LD_INT 4
62753: PUSH
62754: FOR_TO
62755: IFFALSE 62776
// SetSkill ( i , j , 10 ) ;
62757: LD_VAR 0 2
62761: PPUSH
62762: LD_VAR 0 3
62766: PPUSH
62767: LD_INT 10
62769: PPUSH
62770: CALL_OW 237
62774: GO 62754
62776: POP
62777: POP
// end ;
62778: GO 62727
62780: POP
62781: POP
// end ;
62782: LD_VAR 0 1
62786: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62787: LD_INT 0
62789: PPUSH
62790: PPUSH
62791: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62792: LD_ADDR_VAR 0 2
62796: PUSH
62797: LD_INT 22
62799: PUSH
62800: LD_OWVAR 2
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 21
62811: PUSH
62812: LD_INT 1
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PPUSH
62823: CALL_OW 69
62827: PUSH
62828: FOR_IN
62829: IFFALSE 62870
// begin for j := 1 to 4 do
62831: LD_ADDR_VAR 0 3
62835: PUSH
62836: DOUBLE
62837: LD_INT 1
62839: DEC
62840: ST_TO_ADDR
62841: LD_INT 4
62843: PUSH
62844: FOR_TO
62845: IFFALSE 62866
// SetSkill ( i , j , 10 ) ;
62847: LD_VAR 0 2
62851: PPUSH
62852: LD_VAR 0 3
62856: PPUSH
62857: LD_INT 10
62859: PPUSH
62860: CALL_OW 237
62864: GO 62844
62866: POP
62867: POP
// end ;
62868: GO 62828
62870: POP
62871: POP
// end ;
62872: LD_VAR 0 1
62876: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
62877: LD_INT 0
62879: PPUSH
// uc_side := your_side ;
62880: LD_ADDR_OWVAR 20
62884: PUSH
62885: LD_OWVAR 2
62889: ST_TO_ADDR
// uc_nation := nation ;
62890: LD_ADDR_OWVAR 21
62894: PUSH
62895: LD_VAR 0 1
62899: ST_TO_ADDR
// InitHc ;
62900: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
62904: LD_INT 0
62906: PPUSH
62907: LD_VAR 0 2
62911: PPUSH
62912: LD_VAR 0 3
62916: PPUSH
62917: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
62921: LD_VAR 0 4
62925: PPUSH
62926: LD_VAR 0 5
62930: PPUSH
62931: CALL_OW 428
62935: PUSH
62936: LD_INT 0
62938: EQUAL
62939: IFFALSE 62963
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
62941: CALL_OW 44
62945: PPUSH
62946: LD_VAR 0 4
62950: PPUSH
62951: LD_VAR 0 5
62955: PPUSH
62956: LD_INT 1
62958: PPUSH
62959: CALL_OW 48
// end ;
62963: LD_VAR 0 6
62967: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
62968: LD_INT 0
62970: PPUSH
62971: PPUSH
// uc_side := your_side ;
62972: LD_ADDR_OWVAR 20
62976: PUSH
62977: LD_OWVAR 2
62981: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
62982: LD_VAR 0 1
62986: PUSH
62987: LD_INT 1
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: LD_INT 3
62995: PUSH
62996: LD_INT 4
62998: PUSH
62999: LD_INT 5
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: IN
63009: IFFALSE 63021
// uc_nation := nation_american else
63011: LD_ADDR_OWVAR 21
63015: PUSH
63016: LD_INT 1
63018: ST_TO_ADDR
63019: GO 63064
// if chassis in [ 11 , 12 , 13 , 14 ] then
63021: LD_VAR 0 1
63025: PUSH
63026: LD_INT 11
63028: PUSH
63029: LD_INT 12
63031: PUSH
63032: LD_INT 13
63034: PUSH
63035: LD_INT 14
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: IN
63044: IFFALSE 63056
// uc_nation := nation_arabian else
63046: LD_ADDR_OWVAR 21
63050: PUSH
63051: LD_INT 2
63053: ST_TO_ADDR
63054: GO 63064
// uc_nation := nation_russian ;
63056: LD_ADDR_OWVAR 21
63060: PUSH
63061: LD_INT 3
63063: ST_TO_ADDR
// vc_chassis := chassis ;
63064: LD_ADDR_OWVAR 37
63068: PUSH
63069: LD_VAR 0 1
63073: ST_TO_ADDR
// vc_engine := engine ;
63074: LD_ADDR_OWVAR 39
63078: PUSH
63079: LD_VAR 0 2
63083: ST_TO_ADDR
// vc_control := control ;
63084: LD_ADDR_OWVAR 38
63088: PUSH
63089: LD_VAR 0 3
63093: ST_TO_ADDR
// vc_weapon := weapon ;
63094: LD_ADDR_OWVAR 40
63098: PUSH
63099: LD_VAR 0 4
63103: ST_TO_ADDR
// un := CreateVehicle ;
63104: LD_ADDR_VAR 0 8
63108: PUSH
63109: CALL_OW 45
63113: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
63114: LD_VAR 0 8
63118: PPUSH
63119: LD_INT 0
63121: PPUSH
63122: LD_INT 5
63124: PPUSH
63125: CALL_OW 12
63129: PPUSH
63130: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
63134: LD_VAR 0 8
63138: PPUSH
63139: LD_VAR 0 5
63143: PPUSH
63144: LD_VAR 0 6
63148: PPUSH
63149: LD_INT 1
63151: PPUSH
63152: CALL_OW 48
// end ;
63156: LD_VAR 0 7
63160: RET
// export hInvincible ; every 1 do
63161: GO 63163
63163: DISABLE
// hInvincible := [ ] ;
63164: LD_ADDR_EXP 90
63168: PUSH
63169: EMPTY
63170: ST_TO_ADDR
63171: END
// every 10 do var i ;
63172: GO 63174
63174: DISABLE
63175: LD_INT 0
63177: PPUSH
// begin enable ;
63178: ENABLE
// if not hInvincible then
63179: LD_EXP 90
63183: NOT
63184: IFFALSE 63188
// exit ;
63186: GO 63232
// for i in hInvincible do
63188: LD_ADDR_VAR 0 1
63192: PUSH
63193: LD_EXP 90
63197: PUSH
63198: FOR_IN
63199: IFFALSE 63230
// if GetLives ( i ) < 1000 then
63201: LD_VAR 0 1
63205: PPUSH
63206: CALL_OW 256
63210: PUSH
63211: LD_INT 1000
63213: LESS
63214: IFFALSE 63228
// SetLives ( i , 1000 ) ;
63216: LD_VAR 0 1
63220: PPUSH
63221: LD_INT 1000
63223: PPUSH
63224: CALL_OW 234
63228: GO 63198
63230: POP
63231: POP
// end ;
63232: PPOPN 1
63234: END
// export function hHackInvincible ; var i ; begin
63235: LD_INT 0
63237: PPUSH
63238: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
63239: LD_ADDR_VAR 0 2
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: LD_INT 21
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 21
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: LIST
63271: PPUSH
63272: CALL_OW 69
63276: PUSH
63277: FOR_IN
63278: IFFALSE 63339
// if IsSelected ( i ) then
63280: LD_VAR 0 2
63284: PPUSH
63285: CALL_OW 306
63289: IFFALSE 63337
// begin if i in hInvincible then
63291: LD_VAR 0 2
63295: PUSH
63296: LD_EXP 90
63300: IN
63301: IFFALSE 63321
// hInvincible := hInvincible diff i else
63303: LD_ADDR_EXP 90
63307: PUSH
63308: LD_EXP 90
63312: PUSH
63313: LD_VAR 0 2
63317: DIFF
63318: ST_TO_ADDR
63319: GO 63337
// hInvincible := hInvincible union i ;
63321: LD_ADDR_EXP 90
63325: PUSH
63326: LD_EXP 90
63330: PUSH
63331: LD_VAR 0 2
63335: UNION
63336: ST_TO_ADDR
// end ;
63337: GO 63277
63339: POP
63340: POP
// end ;
63341: LD_VAR 0 1
63345: RET
// export function hHackInvisible ; var i , j ; begin
63346: LD_INT 0
63348: PPUSH
63349: PPUSH
63350: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63351: LD_ADDR_VAR 0 2
63355: PUSH
63356: LD_INT 21
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PPUSH
63366: CALL_OW 69
63370: PUSH
63371: FOR_IN
63372: IFFALSE 63396
// if IsSelected ( i ) then
63374: LD_VAR 0 2
63378: PPUSH
63379: CALL_OW 306
63383: IFFALSE 63394
// ComForceInvisible ( i ) ;
63385: LD_VAR 0 2
63389: PPUSH
63390: CALL_OW 496
63394: GO 63371
63396: POP
63397: POP
// end ;
63398: LD_VAR 0 1
63402: RET
// export function hHackChangeYourSide ; begin
63403: LD_INT 0
63405: PPUSH
// if your_side = 8 then
63406: LD_OWVAR 2
63410: PUSH
63411: LD_INT 8
63413: EQUAL
63414: IFFALSE 63426
// your_side := 0 else
63416: LD_ADDR_OWVAR 2
63420: PUSH
63421: LD_INT 0
63423: ST_TO_ADDR
63424: GO 63440
// your_side := your_side + 1 ;
63426: LD_ADDR_OWVAR 2
63430: PUSH
63431: LD_OWVAR 2
63435: PUSH
63436: LD_INT 1
63438: PLUS
63439: ST_TO_ADDR
// end ;
63440: LD_VAR 0 1
63444: RET
// export function hHackChangeUnitSide ; var i , j ; begin
63445: LD_INT 0
63447: PPUSH
63448: PPUSH
63449: PPUSH
// for i in all_units do
63450: LD_ADDR_VAR 0 2
63454: PUSH
63455: LD_OWVAR 3
63459: PUSH
63460: FOR_IN
63461: IFFALSE 63539
// if IsSelected ( i ) then
63463: LD_VAR 0 2
63467: PPUSH
63468: CALL_OW 306
63472: IFFALSE 63537
// begin j := GetSide ( i ) ;
63474: LD_ADDR_VAR 0 3
63478: PUSH
63479: LD_VAR 0 2
63483: PPUSH
63484: CALL_OW 255
63488: ST_TO_ADDR
// if j = 8 then
63489: LD_VAR 0 3
63493: PUSH
63494: LD_INT 8
63496: EQUAL
63497: IFFALSE 63509
// j := 0 else
63499: LD_ADDR_VAR 0 3
63503: PUSH
63504: LD_INT 0
63506: ST_TO_ADDR
63507: GO 63523
// j := j + 1 ;
63509: LD_ADDR_VAR 0 3
63513: PUSH
63514: LD_VAR 0 3
63518: PUSH
63519: LD_INT 1
63521: PLUS
63522: ST_TO_ADDR
// SetSide ( i , j ) ;
63523: LD_VAR 0 2
63527: PPUSH
63528: LD_VAR 0 3
63532: PPUSH
63533: CALL_OW 235
// end ;
63537: GO 63460
63539: POP
63540: POP
// end ;
63541: LD_VAR 0 1
63545: RET
// export function hHackFog ; begin
63546: LD_INT 0
63548: PPUSH
// FogOff ( true ) ;
63549: LD_INT 1
63551: PPUSH
63552: CALL_OW 344
// end ;
63556: LD_VAR 0 1
63560: RET
// export function hHackTeleport ( unit , x , y ) ; begin
63561: LD_INT 0
63563: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
63564: LD_VAR 0 1
63568: PPUSH
63569: LD_VAR 0 2
63573: PPUSH
63574: LD_VAR 0 3
63578: PPUSH
63579: LD_INT 1
63581: PPUSH
63582: LD_INT 1
63584: PPUSH
63585: CALL_OW 483
// CenterOnXY ( x , y ) ;
63589: LD_VAR 0 2
63593: PPUSH
63594: LD_VAR 0 3
63598: PPUSH
63599: CALL_OW 84
// end ;
63603: LD_VAR 0 4
63607: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63608: LD_INT 0
63610: PPUSH
63611: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63612: LD_VAR 0 1
63616: NOT
63617: PUSH
63618: LD_VAR 0 2
63622: PPUSH
63623: LD_VAR 0 3
63627: PPUSH
63628: CALL_OW 488
63632: NOT
63633: OR
63634: PUSH
63635: LD_VAR 0 1
63639: PPUSH
63640: CALL_OW 266
63644: PUSH
63645: LD_INT 3
63647: NONEQUAL
63648: PUSH
63649: LD_VAR 0 1
63653: PPUSH
63654: CALL_OW 247
63658: PUSH
63659: LD_INT 1
63661: EQUAL
63662: NOT
63663: AND
63664: OR
63665: IFFALSE 63669
// exit ;
63667: GO 63818
// if GetType ( factory ) = unit_human then
63669: LD_VAR 0 1
63673: PPUSH
63674: CALL_OW 247
63678: PUSH
63679: LD_INT 1
63681: EQUAL
63682: IFFALSE 63699
// factory := IsInUnit ( factory ) ;
63684: LD_ADDR_VAR 0 1
63688: PUSH
63689: LD_VAR 0 1
63693: PPUSH
63694: CALL_OW 310
63698: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63699: LD_VAR 0 1
63703: PPUSH
63704: CALL_OW 266
63708: PUSH
63709: LD_INT 3
63711: NONEQUAL
63712: IFFALSE 63716
// exit ;
63714: GO 63818
// if HexInfo ( x , y ) = factory then
63716: LD_VAR 0 2
63720: PPUSH
63721: LD_VAR 0 3
63725: PPUSH
63726: CALL_OW 428
63730: PUSH
63731: LD_VAR 0 1
63735: EQUAL
63736: IFFALSE 63763
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
63738: LD_ADDR_EXP 91
63742: PUSH
63743: LD_EXP 91
63747: PPUSH
63748: LD_VAR 0 1
63752: PPUSH
63753: LD_INT 0
63755: PPUSH
63756: CALL_OW 1
63760: ST_TO_ADDR
63761: GO 63814
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
63763: LD_ADDR_EXP 91
63767: PUSH
63768: LD_EXP 91
63772: PPUSH
63773: LD_VAR 0 1
63777: PPUSH
63778: LD_VAR 0 1
63782: PPUSH
63783: CALL_OW 255
63787: PUSH
63788: LD_VAR 0 1
63792: PUSH
63793: LD_VAR 0 2
63797: PUSH
63798: LD_VAR 0 3
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: PPUSH
63809: CALL_OW 1
63813: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63814: CALL 63823 0 0
// end ;
63818: LD_VAR 0 4
63822: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63823: LD_INT 0
63825: PPUSH
63826: PPUSH
63827: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63828: LD_STRING resetFactoryWaypoint();
63830: PPUSH
63831: CALL_OW 559
// if factoryWaypoints then
63835: LD_EXP 91
63839: IFFALSE 63965
// begin list := PrepareArray ( factoryWaypoints ) ;
63841: LD_ADDR_VAR 0 3
63845: PUSH
63846: LD_EXP 91
63850: PPUSH
63851: CALL 48822 0 1
63855: ST_TO_ADDR
// for i := 1 to list do
63856: LD_ADDR_VAR 0 2
63860: PUSH
63861: DOUBLE
63862: LD_INT 1
63864: DEC
63865: ST_TO_ADDR
63866: LD_VAR 0 3
63870: PUSH
63871: FOR_TO
63872: IFFALSE 63963
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63874: LD_STRING setFactoryWaypointXY(
63876: PUSH
63877: LD_VAR 0 3
63881: PUSH
63882: LD_VAR 0 2
63886: ARRAY
63887: PUSH
63888: LD_INT 1
63890: ARRAY
63891: STR
63892: PUSH
63893: LD_STRING ,
63895: STR
63896: PUSH
63897: LD_VAR 0 3
63901: PUSH
63902: LD_VAR 0 2
63906: ARRAY
63907: PUSH
63908: LD_INT 2
63910: ARRAY
63911: STR
63912: PUSH
63913: LD_STRING ,
63915: STR
63916: PUSH
63917: LD_VAR 0 3
63921: PUSH
63922: LD_VAR 0 2
63926: ARRAY
63927: PUSH
63928: LD_INT 3
63930: ARRAY
63931: STR
63932: PUSH
63933: LD_STRING ,
63935: STR
63936: PUSH
63937: LD_VAR 0 3
63941: PUSH
63942: LD_VAR 0 2
63946: ARRAY
63947: PUSH
63948: LD_INT 4
63950: ARRAY
63951: STR
63952: PUSH
63953: LD_STRING )
63955: STR
63956: PPUSH
63957: CALL_OW 559
63961: GO 63871
63963: POP
63964: POP
// end ; end ;
63965: LD_VAR 0 1
63969: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63970: LD_INT 0
63972: PPUSH
// if HexInfo ( x , y ) = warehouse then
63973: LD_VAR 0 2
63977: PPUSH
63978: LD_VAR 0 3
63982: PPUSH
63983: CALL_OW 428
63987: PUSH
63988: LD_VAR 0 1
63992: EQUAL
63993: IFFALSE 64020
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63995: LD_ADDR_EXP 92
63999: PUSH
64000: LD_EXP 92
64004: PPUSH
64005: LD_VAR 0 1
64009: PPUSH
64010: LD_INT 0
64012: PPUSH
64013: CALL_OW 1
64017: ST_TO_ADDR
64018: GO 64071
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64020: LD_ADDR_EXP 92
64024: PUSH
64025: LD_EXP 92
64029: PPUSH
64030: LD_VAR 0 1
64034: PPUSH
64035: LD_VAR 0 1
64039: PPUSH
64040: CALL_OW 255
64044: PUSH
64045: LD_VAR 0 1
64049: PUSH
64050: LD_VAR 0 2
64054: PUSH
64055: LD_VAR 0 3
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: PPUSH
64066: CALL_OW 1
64070: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64071: CALL 64080 0 0
// end ;
64075: LD_VAR 0 4
64079: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64080: LD_INT 0
64082: PPUSH
64083: PPUSH
64084: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64085: LD_STRING resetWarehouseGatheringPoints();
64087: PPUSH
64088: CALL_OW 559
// if warehouseGatheringPoints then
64092: LD_EXP 92
64096: IFFALSE 64222
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64098: LD_ADDR_VAR 0 3
64102: PUSH
64103: LD_EXP 92
64107: PPUSH
64108: CALL 48822 0 1
64112: ST_TO_ADDR
// for i := 1 to list do
64113: LD_ADDR_VAR 0 2
64117: PUSH
64118: DOUBLE
64119: LD_INT 1
64121: DEC
64122: ST_TO_ADDR
64123: LD_VAR 0 3
64127: PUSH
64128: FOR_TO
64129: IFFALSE 64220
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64131: LD_STRING setWarehouseGatheringPointXY(
64133: PUSH
64134: LD_VAR 0 3
64138: PUSH
64139: LD_VAR 0 2
64143: ARRAY
64144: PUSH
64145: LD_INT 1
64147: ARRAY
64148: STR
64149: PUSH
64150: LD_STRING ,
64152: STR
64153: PUSH
64154: LD_VAR 0 3
64158: PUSH
64159: LD_VAR 0 2
64163: ARRAY
64164: PUSH
64165: LD_INT 2
64167: ARRAY
64168: STR
64169: PUSH
64170: LD_STRING ,
64172: STR
64173: PUSH
64174: LD_VAR 0 3
64178: PUSH
64179: LD_VAR 0 2
64183: ARRAY
64184: PUSH
64185: LD_INT 3
64187: ARRAY
64188: STR
64189: PUSH
64190: LD_STRING ,
64192: STR
64193: PUSH
64194: LD_VAR 0 3
64198: PUSH
64199: LD_VAR 0 2
64203: ARRAY
64204: PUSH
64205: LD_INT 4
64207: ARRAY
64208: STR
64209: PUSH
64210: LD_STRING )
64212: STR
64213: PPUSH
64214: CALL_OW 559
64218: GO 64128
64220: POP
64221: POP
// end ; end ;
64222: LD_VAR 0 1
64226: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
64227: LD_EXP 92
64231: IFFALSE 64916
64233: GO 64235
64235: DISABLE
64236: LD_INT 0
64238: PPUSH
64239: PPUSH
64240: PPUSH
64241: PPUSH
64242: PPUSH
64243: PPUSH
64244: PPUSH
64245: PPUSH
64246: PPUSH
// begin enable ;
64247: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
64248: LD_ADDR_VAR 0 3
64252: PUSH
64253: LD_EXP 92
64257: PPUSH
64258: CALL 48822 0 1
64262: ST_TO_ADDR
// if not list then
64263: LD_VAR 0 3
64267: NOT
64268: IFFALSE 64272
// exit ;
64270: GO 64916
// for i := 1 to list do
64272: LD_ADDR_VAR 0 1
64276: PUSH
64277: DOUBLE
64278: LD_INT 1
64280: DEC
64281: ST_TO_ADDR
64282: LD_VAR 0 3
64286: PUSH
64287: FOR_TO
64288: IFFALSE 64914
// begin depot := list [ i ] [ 2 ] ;
64290: LD_ADDR_VAR 0 8
64294: PUSH
64295: LD_VAR 0 3
64299: PUSH
64300: LD_VAR 0 1
64304: ARRAY
64305: PUSH
64306: LD_INT 2
64308: ARRAY
64309: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
64310: LD_ADDR_VAR 0 5
64314: PUSH
64315: LD_VAR 0 3
64319: PUSH
64320: LD_VAR 0 1
64324: ARRAY
64325: PUSH
64326: LD_INT 1
64328: ARRAY
64329: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
64330: LD_VAR 0 8
64334: PPUSH
64335: CALL_OW 301
64339: PUSH
64340: LD_VAR 0 5
64344: PUSH
64345: LD_VAR 0 8
64349: PPUSH
64350: CALL_OW 255
64354: NONEQUAL
64355: OR
64356: IFFALSE 64385
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
64358: LD_ADDR_EXP 92
64362: PUSH
64363: LD_EXP 92
64367: PPUSH
64368: LD_VAR 0 8
64372: PPUSH
64373: LD_INT 0
64375: PPUSH
64376: CALL_OW 1
64380: ST_TO_ADDR
// exit ;
64381: POP
64382: POP
64383: GO 64916
// end ; x := list [ i ] [ 3 ] ;
64385: LD_ADDR_VAR 0 6
64389: PUSH
64390: LD_VAR 0 3
64394: PUSH
64395: LD_VAR 0 1
64399: ARRAY
64400: PUSH
64401: LD_INT 3
64403: ARRAY
64404: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
64405: LD_ADDR_VAR 0 7
64409: PUSH
64410: LD_VAR 0 3
64414: PUSH
64415: LD_VAR 0 1
64419: ARRAY
64420: PUSH
64421: LD_INT 4
64423: ARRAY
64424: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
64425: LD_ADDR_VAR 0 9
64429: PUSH
64430: LD_VAR 0 6
64434: PPUSH
64435: LD_VAR 0 7
64439: PPUSH
64440: LD_INT 16
64442: PPUSH
64443: CALL 47410 0 3
64447: ST_TO_ADDR
// if not cratesNearbyPoint then
64448: LD_VAR 0 9
64452: NOT
64453: IFFALSE 64459
// exit ;
64455: POP
64456: POP
64457: GO 64916
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
64459: LD_ADDR_VAR 0 4
64463: PUSH
64464: LD_INT 22
64466: PUSH
64467: LD_VAR 0 5
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 3
64478: PUSH
64479: LD_INT 60
64481: PUSH
64482: EMPTY
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 91
64491: PUSH
64492: LD_VAR 0 8
64496: PUSH
64497: LD_INT 6
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: LD_INT 25
64510: PUSH
64511: LD_INT 2
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 25
64520: PUSH
64521: LD_INT 16
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: LIST
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: PPUSH
64539: CALL_OW 69
64543: PUSH
64544: LD_VAR 0 8
64548: PPUSH
64549: CALL_OW 313
64553: PPUSH
64554: LD_INT 3
64556: PUSH
64557: LD_INT 60
64559: PUSH
64560: EMPTY
64561: LIST
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 2
64569: PUSH
64570: LD_INT 25
64572: PUSH
64573: LD_INT 2
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 25
64582: PUSH
64583: LD_INT 16
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: LIST
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PPUSH
64599: CALL_OW 72
64603: UNION
64604: ST_TO_ADDR
// if tmp then
64605: LD_VAR 0 4
64609: IFFALSE 64689
// begin tmp := ShrinkArray ( tmp , 3 ) ;
64611: LD_ADDR_VAR 0 4
64615: PUSH
64616: LD_VAR 0 4
64620: PPUSH
64621: LD_INT 3
64623: PPUSH
64624: CALL 45379 0 2
64628: ST_TO_ADDR
// for j in tmp do
64629: LD_ADDR_VAR 0 2
64633: PUSH
64634: LD_VAR 0 4
64638: PUSH
64639: FOR_IN
64640: IFFALSE 64683
// begin if IsInUnit ( j ) then
64642: LD_VAR 0 2
64646: PPUSH
64647: CALL_OW 310
64651: IFFALSE 64662
// ComExit ( j ) ;
64653: LD_VAR 0 2
64657: PPUSH
64658: CALL 45462 0 1
// AddComCollect ( j , x , y ) ;
64662: LD_VAR 0 2
64666: PPUSH
64667: LD_VAR 0 6
64671: PPUSH
64672: LD_VAR 0 7
64676: PPUSH
64677: CALL_OW 177
// end ;
64681: GO 64639
64683: POP
64684: POP
// exit ;
64685: POP
64686: POP
64687: GO 64916
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
64689: LD_ADDR_VAR 0 4
64693: PUSH
64694: LD_INT 22
64696: PUSH
64697: LD_VAR 0 5
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 91
64708: PUSH
64709: LD_VAR 0 8
64713: PUSH
64714: LD_INT 8
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: LD_INT 34
64727: PUSH
64728: LD_INT 12
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 34
64737: PUSH
64738: LD_INT 51
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 34
64747: PUSH
64748: LD_INT 32
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 34
64757: PUSH
64758: LD_INT 89
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: LIST
64776: PPUSH
64777: CALL_OW 69
64781: ST_TO_ADDR
// if tmp then
64782: LD_VAR 0 4
64786: IFFALSE 64912
// begin for j in tmp do
64788: LD_ADDR_VAR 0 2
64792: PUSH
64793: LD_VAR 0 4
64797: PUSH
64798: FOR_IN
64799: IFFALSE 64910
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
64801: LD_VAR 0 2
64805: PPUSH
64806: CALL_OW 262
64810: PUSH
64811: LD_INT 3
64813: EQUAL
64814: PUSH
64815: LD_VAR 0 2
64819: PPUSH
64820: CALL_OW 261
64824: PUSH
64825: LD_INT 20
64827: GREATER
64828: OR
64829: PUSH
64830: LD_VAR 0 2
64834: PPUSH
64835: CALL_OW 314
64839: NOT
64840: AND
64841: PUSH
64842: LD_VAR 0 2
64846: PPUSH
64847: CALL_OW 263
64851: PUSH
64852: LD_INT 1
64854: NONEQUAL
64855: PUSH
64856: LD_VAR 0 2
64860: PPUSH
64861: CALL_OW 311
64865: OR
64866: AND
64867: IFFALSE 64908
// begin ComCollect ( j , x , y ) ;
64869: LD_VAR 0 2
64873: PPUSH
64874: LD_VAR 0 6
64878: PPUSH
64879: LD_VAR 0 7
64883: PPUSH
64884: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
64888: LD_VAR 0 2
64892: PPUSH
64893: LD_VAR 0 8
64897: PPUSH
64898: CALL_OW 172
// exit ;
64902: POP
64903: POP
64904: POP
64905: POP
64906: GO 64916
// end ;
64908: GO 64798
64910: POP
64911: POP
// end ; end ;
64912: GO 64287
64914: POP
64915: POP
// end ; end_of_file
64916: PPOPN 9
64918: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64919: LD_VAR 0 1
64923: PUSH
64924: LD_INT 200
64926: DOUBLE
64927: GREATEREQUAL
64928: IFFALSE 64936
64930: LD_INT 299
64932: DOUBLE
64933: LESSEQUAL
64934: IFTRUE 64938
64936: GO 64970
64938: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64939: LD_VAR 0 1
64943: PPUSH
64944: LD_VAR 0 2
64948: PPUSH
64949: LD_VAR 0 3
64953: PPUSH
64954: LD_VAR 0 4
64958: PPUSH
64959: LD_VAR 0 5
64963: PPUSH
64964: CALL 65458 0 5
64968: GO 65047
64970: LD_INT 300
64972: DOUBLE
64973: GREATEREQUAL
64974: IFFALSE 64982
64976: LD_INT 399
64978: DOUBLE
64979: LESSEQUAL
64980: IFTRUE 64984
64982: GO 65046
64984: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64985: LD_VAR 0 1
64989: PPUSH
64990: LD_VAR 0 2
64994: PPUSH
64995: LD_VAR 0 3
64999: PPUSH
65000: LD_VAR 0 4
65004: PPUSH
65005: LD_VAR 0 5
65009: PPUSH
65010: LD_VAR 0 6
65014: PPUSH
65015: LD_VAR 0 7
65019: PPUSH
65020: LD_VAR 0 8
65024: PPUSH
65025: LD_VAR 0 9
65029: PPUSH
65030: LD_VAR 0 10
65034: PPUSH
65035: LD_VAR 0 11
65039: PPUSH
65040: CALL 61628 0 11
65044: GO 65047
65046: POP
// end ;
65047: PPOPN 11
65049: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65050: LD_VAR 0 1
65054: PPUSH
65055: LD_VAR 0 2
65059: PPUSH
65060: LD_VAR 0 3
65064: PPUSH
65065: LD_VAR 0 4
65069: PPUSH
65070: LD_VAR 0 5
65074: PPUSH
65075: CALL 65194 0 5
// end ; end_of_file
65079: PPOPN 5
65081: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
65082: LD_INT 0
65084: PPUSH
65085: PPUSH
65086: PPUSH
65087: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
65088: LD_VAR 0 1
65092: PPUSH
65093: CALL_OW 264
65097: PUSH
65098: LD_INT 91
65100: EQUAL
65101: IFFALSE 65173
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65103: LD_INT 68
65105: PPUSH
65106: LD_VAR 0 1
65110: PPUSH
65111: CALL_OW 255
65115: PPUSH
65116: CALL_OW 321
65120: PUSH
65121: LD_INT 2
65123: EQUAL
65124: IFFALSE 65136
// eff := 70 else
65126: LD_ADDR_VAR 0 4
65130: PUSH
65131: LD_INT 70
65133: ST_TO_ADDR
65134: GO 65144
// eff := 30 ;
65136: LD_ADDR_VAR 0 4
65140: PUSH
65141: LD_INT 30
65143: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65144: LD_VAR 0 1
65148: PPUSH
65149: CALL_OW 250
65153: PPUSH
65154: LD_VAR 0 1
65158: PPUSH
65159: CALL_OW 251
65163: PPUSH
65164: LD_VAR 0 4
65168: PPUSH
65169: CALL_OW 495
// end ; end ;
65173: LD_VAR 0 2
65177: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65178: LD_INT 0
65180: PPUSH
// end ;
65181: LD_VAR 0 4
65185: RET
// export function SOS_Command ( cmd ) ; begin
65186: LD_INT 0
65188: PPUSH
// end ;
65189: LD_VAR 0 2
65193: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65194: LD_INT 0
65196: PPUSH
// end ;
65197: LD_VAR 0 6
65201: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65202: LD_INT 0
65204: PPUSH
65205: PPUSH
// if not vehicle or not factory then
65206: LD_VAR 0 1
65210: NOT
65211: PUSH
65212: LD_VAR 0 2
65216: NOT
65217: OR
65218: IFFALSE 65222
// exit ;
65220: GO 65453
// if factoryWaypoints >= factory then
65222: LD_EXP 91
65226: PUSH
65227: LD_VAR 0 2
65231: GREATEREQUAL
65232: IFFALSE 65453
// if factoryWaypoints [ factory ] then
65234: LD_EXP 91
65238: PUSH
65239: LD_VAR 0 2
65243: ARRAY
65244: IFFALSE 65453
// begin if GetControl ( vehicle ) = control_manual then
65246: LD_VAR 0 1
65250: PPUSH
65251: CALL_OW 263
65255: PUSH
65256: LD_INT 1
65258: EQUAL
65259: IFFALSE 65340
// begin driver := IsDrivenBy ( vehicle ) ;
65261: LD_ADDR_VAR 0 4
65265: PUSH
65266: LD_VAR 0 1
65270: PPUSH
65271: CALL_OW 311
65275: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65276: LD_VAR 0 4
65280: PPUSH
65281: LD_EXP 91
65285: PUSH
65286: LD_VAR 0 2
65290: ARRAY
65291: PUSH
65292: LD_INT 3
65294: ARRAY
65295: PPUSH
65296: LD_EXP 91
65300: PUSH
65301: LD_VAR 0 2
65305: ARRAY
65306: PUSH
65307: LD_INT 4
65309: ARRAY
65310: PPUSH
65311: CALL_OW 171
// AddComExitVehicle ( driver ) ;
65315: LD_VAR 0 4
65319: PPUSH
65320: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
65324: LD_VAR 0 4
65328: PPUSH
65329: LD_VAR 0 2
65333: PPUSH
65334: CALL_OW 180
// end else
65338: GO 65453
// if GetControl ( vehicle ) = control_remote then
65340: LD_VAR 0 1
65344: PPUSH
65345: CALL_OW 263
65349: PUSH
65350: LD_INT 2
65352: EQUAL
65353: IFFALSE 65414
// begin wait ( 0 0$2 ) ;
65355: LD_INT 70
65357: PPUSH
65358: CALL_OW 67
// if Connect ( vehicle ) then
65362: LD_VAR 0 1
65366: PPUSH
65367: CALL 15702 0 1
65371: IFFALSE 65412
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65373: LD_VAR 0 1
65377: PPUSH
65378: LD_EXP 91
65382: PUSH
65383: LD_VAR 0 2
65387: ARRAY
65388: PUSH
65389: LD_INT 3
65391: ARRAY
65392: PPUSH
65393: LD_EXP 91
65397: PUSH
65398: LD_VAR 0 2
65402: ARRAY
65403: PUSH
65404: LD_INT 4
65406: ARRAY
65407: PPUSH
65408: CALL_OW 171
// end else
65412: GO 65453
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65414: LD_VAR 0 1
65418: PPUSH
65419: LD_EXP 91
65423: PUSH
65424: LD_VAR 0 2
65428: ARRAY
65429: PUSH
65430: LD_INT 3
65432: ARRAY
65433: PPUSH
65434: LD_EXP 91
65438: PUSH
65439: LD_VAR 0 2
65443: ARRAY
65444: PUSH
65445: LD_INT 4
65447: ARRAY
65448: PPUSH
65449: CALL_OW 171
// end ; end ;
65453: LD_VAR 0 3
65457: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65458: LD_INT 0
65460: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65461: LD_VAR 0 1
65465: PUSH
65466: LD_INT 250
65468: EQUAL
65469: PUSH
65470: LD_VAR 0 2
65474: PPUSH
65475: CALL_OW 264
65479: PUSH
65480: LD_INT 81
65482: EQUAL
65483: AND
65484: IFFALSE 65505
// MinerPlaceMine ( unit , x , y ) ;
65486: LD_VAR 0 2
65490: PPUSH
65491: LD_VAR 0 4
65495: PPUSH
65496: LD_VAR 0 5
65500: PPUSH
65501: CALL 67890 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
65505: LD_VAR 0 1
65509: PUSH
65510: LD_INT 251
65512: EQUAL
65513: PUSH
65514: LD_VAR 0 2
65518: PPUSH
65519: CALL_OW 264
65523: PUSH
65524: LD_INT 81
65526: EQUAL
65527: AND
65528: IFFALSE 65549
// MinerDetonateMine ( unit , x , y ) ;
65530: LD_VAR 0 2
65534: PPUSH
65535: LD_VAR 0 4
65539: PPUSH
65540: LD_VAR 0 5
65544: PPUSH
65545: CALL 68165 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
65549: LD_VAR 0 1
65553: PUSH
65554: LD_INT 252
65556: EQUAL
65557: PUSH
65558: LD_VAR 0 2
65562: PPUSH
65563: CALL_OW 264
65567: PUSH
65568: LD_INT 81
65570: EQUAL
65571: AND
65572: IFFALSE 65593
// MinerCreateMinefield ( unit , x , y ) ;
65574: LD_VAR 0 2
65578: PPUSH
65579: LD_VAR 0 4
65583: PPUSH
65584: LD_VAR 0 5
65588: PPUSH
65589: CALL 68582 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65593: LD_VAR 0 1
65597: PUSH
65598: LD_INT 253
65600: EQUAL
65601: PUSH
65602: LD_VAR 0 2
65606: PPUSH
65607: CALL_OW 257
65611: PUSH
65612: LD_INT 5
65614: EQUAL
65615: AND
65616: IFFALSE 65637
// ComBinocular ( unit , x , y ) ;
65618: LD_VAR 0 2
65622: PPUSH
65623: LD_VAR 0 4
65627: PPUSH
65628: LD_VAR 0 5
65632: PPUSH
65633: CALL 68951 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65637: LD_VAR 0 1
65641: PUSH
65642: LD_INT 254
65644: EQUAL
65645: PUSH
65646: LD_VAR 0 2
65650: PPUSH
65651: CALL_OW 264
65655: PUSH
65656: LD_INT 99
65658: EQUAL
65659: AND
65660: PUSH
65661: LD_VAR 0 3
65665: PPUSH
65666: CALL_OW 263
65670: PUSH
65671: LD_INT 3
65673: EQUAL
65674: AND
65675: IFFALSE 65691
// HackDestroyVehicle ( unit , selectedUnit ) ;
65677: LD_VAR 0 2
65681: PPUSH
65682: LD_VAR 0 3
65686: PPUSH
65687: CALL 67254 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65691: LD_VAR 0 1
65695: PUSH
65696: LD_INT 255
65698: EQUAL
65699: PUSH
65700: LD_VAR 0 2
65704: PPUSH
65705: CALL_OW 264
65709: PUSH
65710: LD_INT 14
65712: PUSH
65713: LD_INT 53
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: IN
65720: AND
65721: PUSH
65722: LD_VAR 0 4
65726: PPUSH
65727: LD_VAR 0 5
65731: PPUSH
65732: CALL_OW 488
65736: AND
65737: IFFALSE 65761
// CutTreeXYR ( unit , x , y , 12 ) ;
65739: LD_VAR 0 2
65743: PPUSH
65744: LD_VAR 0 4
65748: PPUSH
65749: LD_VAR 0 5
65753: PPUSH
65754: LD_INT 12
65756: PPUSH
65757: CALL 65824 0 4
// if cmd = 256 then
65761: LD_VAR 0 1
65765: PUSH
65766: LD_INT 256
65768: EQUAL
65769: IFFALSE 65790
// SetFactoryWaypoint ( unit , x , y ) ;
65771: LD_VAR 0 2
65775: PPUSH
65776: LD_VAR 0 4
65780: PPUSH
65781: LD_VAR 0 5
65785: PPUSH
65786: CALL 63608 0 3
// if cmd = 257 then
65790: LD_VAR 0 1
65794: PUSH
65795: LD_INT 257
65797: EQUAL
65798: IFFALSE 65819
// SetWarehouseGatheringPoint ( unit , x , y ) ;
65800: LD_VAR 0 2
65804: PPUSH
65805: LD_VAR 0 4
65809: PPUSH
65810: LD_VAR 0 5
65814: PPUSH
65815: CALL 63970 0 3
// end ;
65819: LD_VAR 0 6
65823: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65824: LD_INT 0
65826: PPUSH
65827: PPUSH
65828: PPUSH
65829: PPUSH
65830: PPUSH
65831: PPUSH
65832: PPUSH
65833: PPUSH
65834: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
65835: LD_VAR 0 1
65839: NOT
65840: PUSH
65841: LD_VAR 0 2
65845: PPUSH
65846: LD_VAR 0 3
65850: PPUSH
65851: CALL_OW 488
65855: NOT
65856: OR
65857: PUSH
65858: LD_VAR 0 4
65862: NOT
65863: OR
65864: IFFALSE 65868
// exit ;
65866: GO 66208
// list := [ ] ;
65868: LD_ADDR_VAR 0 13
65872: PUSH
65873: EMPTY
65874: ST_TO_ADDR
// if x - r < 0 then
65875: LD_VAR 0 2
65879: PUSH
65880: LD_VAR 0 4
65884: MINUS
65885: PUSH
65886: LD_INT 0
65888: LESS
65889: IFFALSE 65901
// min_x := 0 else
65891: LD_ADDR_VAR 0 7
65895: PUSH
65896: LD_INT 0
65898: ST_TO_ADDR
65899: GO 65917
// min_x := x - r ;
65901: LD_ADDR_VAR 0 7
65905: PUSH
65906: LD_VAR 0 2
65910: PUSH
65911: LD_VAR 0 4
65915: MINUS
65916: ST_TO_ADDR
// if y - r < 0 then
65917: LD_VAR 0 3
65921: PUSH
65922: LD_VAR 0 4
65926: MINUS
65927: PUSH
65928: LD_INT 0
65930: LESS
65931: IFFALSE 65943
// min_y := 0 else
65933: LD_ADDR_VAR 0 8
65937: PUSH
65938: LD_INT 0
65940: ST_TO_ADDR
65941: GO 65959
// min_y := y - r ;
65943: LD_ADDR_VAR 0 8
65947: PUSH
65948: LD_VAR 0 3
65952: PUSH
65953: LD_VAR 0 4
65957: MINUS
65958: ST_TO_ADDR
// max_x := x + r ;
65959: LD_ADDR_VAR 0 9
65963: PUSH
65964: LD_VAR 0 2
65968: PUSH
65969: LD_VAR 0 4
65973: PLUS
65974: ST_TO_ADDR
// max_y := y + r ;
65975: LD_ADDR_VAR 0 10
65979: PUSH
65980: LD_VAR 0 3
65984: PUSH
65985: LD_VAR 0 4
65989: PLUS
65990: ST_TO_ADDR
// for _x = min_x to max_x do
65991: LD_ADDR_VAR 0 11
65995: PUSH
65996: DOUBLE
65997: LD_VAR 0 7
66001: DEC
66002: ST_TO_ADDR
66003: LD_VAR 0 9
66007: PUSH
66008: FOR_TO
66009: IFFALSE 66126
// for _y = min_y to max_y do
66011: LD_ADDR_VAR 0 12
66015: PUSH
66016: DOUBLE
66017: LD_VAR 0 8
66021: DEC
66022: ST_TO_ADDR
66023: LD_VAR 0 10
66027: PUSH
66028: FOR_TO
66029: IFFALSE 66122
// begin if not ValidHex ( _x , _y ) then
66031: LD_VAR 0 11
66035: PPUSH
66036: LD_VAR 0 12
66040: PPUSH
66041: CALL_OW 488
66045: NOT
66046: IFFALSE 66050
// continue ;
66048: GO 66028
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66050: LD_VAR 0 11
66054: PPUSH
66055: LD_VAR 0 12
66059: PPUSH
66060: CALL_OW 351
66064: PUSH
66065: LD_VAR 0 11
66069: PPUSH
66070: LD_VAR 0 12
66074: PPUSH
66075: CALL_OW 554
66079: AND
66080: IFFALSE 66120
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66082: LD_ADDR_VAR 0 13
66086: PUSH
66087: LD_VAR 0 13
66091: PPUSH
66092: LD_VAR 0 13
66096: PUSH
66097: LD_INT 1
66099: PLUS
66100: PPUSH
66101: LD_VAR 0 11
66105: PUSH
66106: LD_VAR 0 12
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PPUSH
66115: CALL_OW 2
66119: ST_TO_ADDR
// end ;
66120: GO 66028
66122: POP
66123: POP
66124: GO 66008
66126: POP
66127: POP
// if not list then
66128: LD_VAR 0 13
66132: NOT
66133: IFFALSE 66137
// exit ;
66135: GO 66208
// for i in list do
66137: LD_ADDR_VAR 0 6
66141: PUSH
66142: LD_VAR 0 13
66146: PUSH
66147: FOR_IN
66148: IFFALSE 66206
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66150: LD_VAR 0 1
66154: PPUSH
66155: LD_STRING M
66157: PUSH
66158: LD_VAR 0 6
66162: PUSH
66163: LD_INT 1
66165: ARRAY
66166: PUSH
66167: LD_VAR 0 6
66171: PUSH
66172: LD_INT 2
66174: ARRAY
66175: PUSH
66176: LD_INT 0
66178: PUSH
66179: LD_INT 0
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: PUSH
66197: EMPTY
66198: LIST
66199: PPUSH
66200: CALL_OW 447
66204: GO 66147
66206: POP
66207: POP
// end ;
66208: LD_VAR 0 5
66212: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66213: LD_EXP 94
66217: NOT
66218: IFFALSE 66268
66220: GO 66222
66222: DISABLE
// begin initHack := true ;
66223: LD_ADDR_EXP 94
66227: PUSH
66228: LD_INT 1
66230: ST_TO_ADDR
// hackTanks := [ ] ;
66231: LD_ADDR_EXP 95
66235: PUSH
66236: EMPTY
66237: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66238: LD_ADDR_EXP 96
66242: PUSH
66243: EMPTY
66244: ST_TO_ADDR
// hackLimit := 3 ;
66245: LD_ADDR_EXP 97
66249: PUSH
66250: LD_INT 3
66252: ST_TO_ADDR
// hackDist := 12 ;
66253: LD_ADDR_EXP 98
66257: PUSH
66258: LD_INT 12
66260: ST_TO_ADDR
// hackCounter := [ ] ;
66261: LD_ADDR_EXP 99
66265: PUSH
66266: EMPTY
66267: ST_TO_ADDR
// end ;
66268: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66269: LD_EXP 94
66273: PUSH
66274: LD_INT 34
66276: PUSH
66277: LD_INT 99
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PPUSH
66284: CALL_OW 69
66288: AND
66289: IFFALSE 66542
66291: GO 66293
66293: DISABLE
66294: LD_INT 0
66296: PPUSH
66297: PPUSH
// begin enable ;
66298: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
66299: LD_ADDR_VAR 0 1
66303: PUSH
66304: LD_INT 34
66306: PUSH
66307: LD_INT 99
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PPUSH
66314: CALL_OW 69
66318: PUSH
66319: FOR_IN
66320: IFFALSE 66540
// begin if not i in hackTanks then
66322: LD_VAR 0 1
66326: PUSH
66327: LD_EXP 95
66331: IN
66332: NOT
66333: IFFALSE 66416
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66335: LD_ADDR_EXP 95
66339: PUSH
66340: LD_EXP 95
66344: PPUSH
66345: LD_EXP 95
66349: PUSH
66350: LD_INT 1
66352: PLUS
66353: PPUSH
66354: LD_VAR 0 1
66358: PPUSH
66359: CALL_OW 1
66363: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66364: LD_ADDR_EXP 96
66368: PUSH
66369: LD_EXP 96
66373: PPUSH
66374: LD_EXP 96
66378: PUSH
66379: LD_INT 1
66381: PLUS
66382: PPUSH
66383: EMPTY
66384: PPUSH
66385: CALL_OW 1
66389: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66390: LD_ADDR_EXP 99
66394: PUSH
66395: LD_EXP 99
66399: PPUSH
66400: LD_EXP 99
66404: PUSH
66405: LD_INT 1
66407: PLUS
66408: PPUSH
66409: EMPTY
66410: PPUSH
66411: CALL_OW 1
66415: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66416: LD_VAR 0 1
66420: PPUSH
66421: CALL_OW 302
66425: NOT
66426: IFFALSE 66439
// begin HackUnlinkAll ( i ) ;
66428: LD_VAR 0 1
66432: PPUSH
66433: CALL 66545 0 1
// continue ;
66437: GO 66319
// end ; HackCheckCapturedStatus ( i ) ;
66439: LD_VAR 0 1
66443: PPUSH
66444: CALL 66988 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66448: LD_ADDR_VAR 0 2
66452: PUSH
66453: LD_INT 81
66455: PUSH
66456: LD_VAR 0 1
66460: PPUSH
66461: CALL_OW 255
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 33
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 91
66482: PUSH
66483: LD_VAR 0 1
66487: PUSH
66488: LD_EXP 98
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 50
66500: PUSH
66501: EMPTY
66502: LIST
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: PPUSH
66510: CALL_OW 69
66514: ST_TO_ADDR
// if not tmp then
66515: LD_VAR 0 2
66519: NOT
66520: IFFALSE 66524
// continue ;
66522: GO 66319
// HackLink ( i , tmp ) ;
66524: LD_VAR 0 1
66528: PPUSH
66529: LD_VAR 0 2
66533: PPUSH
66534: CALL 66681 0 2
// end ;
66538: GO 66319
66540: POP
66541: POP
// end ;
66542: PPOPN 2
66544: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66545: LD_INT 0
66547: PPUSH
66548: PPUSH
66549: PPUSH
// if not hack in hackTanks then
66550: LD_VAR 0 1
66554: PUSH
66555: LD_EXP 95
66559: IN
66560: NOT
66561: IFFALSE 66565
// exit ;
66563: GO 66676
// index := GetElementIndex ( hackTanks , hack ) ;
66565: LD_ADDR_VAR 0 4
66569: PUSH
66570: LD_EXP 95
66574: PPUSH
66575: LD_VAR 0 1
66579: PPUSH
66580: CALL 12518 0 2
66584: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66585: LD_EXP 96
66589: PUSH
66590: LD_VAR 0 4
66594: ARRAY
66595: IFFALSE 66676
// begin for i in hackTanksCaptured [ index ] do
66597: LD_ADDR_VAR 0 3
66601: PUSH
66602: LD_EXP 96
66606: PUSH
66607: LD_VAR 0 4
66611: ARRAY
66612: PUSH
66613: FOR_IN
66614: IFFALSE 66640
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66616: LD_VAR 0 3
66620: PUSH
66621: LD_INT 1
66623: ARRAY
66624: PPUSH
66625: LD_VAR 0 3
66629: PUSH
66630: LD_INT 2
66632: ARRAY
66633: PPUSH
66634: CALL_OW 235
66638: GO 66613
66640: POP
66641: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66642: LD_ADDR_EXP 96
66646: PUSH
66647: LD_EXP 96
66651: PPUSH
66652: LD_VAR 0 4
66656: PPUSH
66657: EMPTY
66658: PPUSH
66659: CALL_OW 1
66663: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66664: LD_VAR 0 1
66668: PPUSH
66669: LD_INT 0
66671: PPUSH
66672: CALL_OW 505
// end ; end ;
66676: LD_VAR 0 2
66680: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66681: LD_INT 0
66683: PPUSH
66684: PPUSH
66685: PPUSH
// if not hack in hackTanks or not vehicles then
66686: LD_VAR 0 1
66690: PUSH
66691: LD_EXP 95
66695: IN
66696: NOT
66697: PUSH
66698: LD_VAR 0 2
66702: NOT
66703: OR
66704: IFFALSE 66708
// exit ;
66706: GO 66983
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66708: LD_ADDR_VAR 0 2
66712: PUSH
66713: LD_VAR 0 1
66717: PPUSH
66718: LD_VAR 0 2
66722: PPUSH
66723: LD_INT 1
66725: PPUSH
66726: LD_INT 1
66728: PPUSH
66729: CALL 13168 0 4
66733: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66734: LD_ADDR_VAR 0 5
66738: PUSH
66739: LD_EXP 95
66743: PPUSH
66744: LD_VAR 0 1
66748: PPUSH
66749: CALL 12518 0 2
66753: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66754: LD_EXP 96
66758: PUSH
66759: LD_VAR 0 5
66763: ARRAY
66764: PUSH
66765: LD_EXP 97
66769: LESS
66770: IFFALSE 66959
// begin for i := 1 to vehicles do
66772: LD_ADDR_VAR 0 4
66776: PUSH
66777: DOUBLE
66778: LD_INT 1
66780: DEC
66781: ST_TO_ADDR
66782: LD_VAR 0 2
66786: PUSH
66787: FOR_TO
66788: IFFALSE 66957
// begin if hackTanksCaptured [ index ] = hackLimit then
66790: LD_EXP 96
66794: PUSH
66795: LD_VAR 0 5
66799: ARRAY
66800: PUSH
66801: LD_EXP 97
66805: EQUAL
66806: IFFALSE 66810
// break ;
66808: GO 66957
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66810: LD_ADDR_EXP 99
66814: PUSH
66815: LD_EXP 99
66819: PPUSH
66820: LD_VAR 0 5
66824: PPUSH
66825: LD_EXP 99
66829: PUSH
66830: LD_VAR 0 5
66834: ARRAY
66835: PUSH
66836: LD_INT 1
66838: PLUS
66839: PPUSH
66840: CALL_OW 1
66844: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66845: LD_ADDR_EXP 96
66849: PUSH
66850: LD_EXP 96
66854: PPUSH
66855: LD_VAR 0 5
66859: PUSH
66860: LD_EXP 96
66864: PUSH
66865: LD_VAR 0 5
66869: ARRAY
66870: PUSH
66871: LD_INT 1
66873: PLUS
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PPUSH
66879: LD_VAR 0 2
66883: PUSH
66884: LD_VAR 0 4
66888: ARRAY
66889: PUSH
66890: LD_VAR 0 2
66894: PUSH
66895: LD_VAR 0 4
66899: ARRAY
66900: PPUSH
66901: CALL_OW 255
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PPUSH
66910: CALL 12733 0 3
66914: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66915: LD_VAR 0 2
66919: PUSH
66920: LD_VAR 0 4
66924: ARRAY
66925: PPUSH
66926: LD_VAR 0 1
66930: PPUSH
66931: CALL_OW 255
66935: PPUSH
66936: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66940: LD_VAR 0 2
66944: PUSH
66945: LD_VAR 0 4
66949: ARRAY
66950: PPUSH
66951: CALL_OW 141
// end ;
66955: GO 66787
66957: POP
66958: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66959: LD_VAR 0 1
66963: PPUSH
66964: LD_EXP 96
66968: PUSH
66969: LD_VAR 0 5
66973: ARRAY
66974: PUSH
66975: LD_INT 0
66977: PLUS
66978: PPUSH
66979: CALL_OW 505
// end ;
66983: LD_VAR 0 3
66987: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
66988: LD_INT 0
66990: PPUSH
66991: PPUSH
66992: PPUSH
66993: PPUSH
// if not hack in hackTanks then
66994: LD_VAR 0 1
66998: PUSH
66999: LD_EXP 95
67003: IN
67004: NOT
67005: IFFALSE 67009
// exit ;
67007: GO 67249
// index := GetElementIndex ( hackTanks , hack ) ;
67009: LD_ADDR_VAR 0 4
67013: PUSH
67014: LD_EXP 95
67018: PPUSH
67019: LD_VAR 0 1
67023: PPUSH
67024: CALL 12518 0 2
67028: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67029: LD_ADDR_VAR 0 3
67033: PUSH
67034: DOUBLE
67035: LD_EXP 96
67039: PUSH
67040: LD_VAR 0 4
67044: ARRAY
67045: INC
67046: ST_TO_ADDR
67047: LD_INT 1
67049: PUSH
67050: FOR_DOWNTO
67051: IFFALSE 67223
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
67053: LD_ADDR_VAR 0 5
67057: PUSH
67058: LD_EXP 96
67062: PUSH
67063: LD_VAR 0 4
67067: ARRAY
67068: PUSH
67069: LD_VAR 0 3
67073: ARRAY
67074: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
67075: LD_VAR 0 5
67079: PUSH
67080: LD_INT 1
67082: ARRAY
67083: PPUSH
67084: CALL_OW 302
67088: NOT
67089: PUSH
67090: LD_VAR 0 5
67094: PUSH
67095: LD_INT 1
67097: ARRAY
67098: PPUSH
67099: CALL_OW 255
67103: PUSH
67104: LD_VAR 0 1
67108: PPUSH
67109: CALL_OW 255
67113: NONEQUAL
67114: OR
67115: IFFALSE 67221
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
67117: LD_VAR 0 5
67121: PUSH
67122: LD_INT 1
67124: ARRAY
67125: PPUSH
67126: CALL_OW 305
67130: PUSH
67131: LD_VAR 0 5
67135: PUSH
67136: LD_INT 1
67138: ARRAY
67139: PPUSH
67140: CALL_OW 255
67144: PUSH
67145: LD_VAR 0 1
67149: PPUSH
67150: CALL_OW 255
67154: EQUAL
67155: AND
67156: IFFALSE 67180
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
67158: LD_VAR 0 5
67162: PUSH
67163: LD_INT 1
67165: ARRAY
67166: PPUSH
67167: LD_VAR 0 5
67171: PUSH
67172: LD_INT 2
67174: ARRAY
67175: PPUSH
67176: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67180: LD_ADDR_EXP 96
67184: PUSH
67185: LD_EXP 96
67189: PPUSH
67190: LD_VAR 0 4
67194: PPUSH
67195: LD_EXP 96
67199: PUSH
67200: LD_VAR 0 4
67204: ARRAY
67205: PPUSH
67206: LD_VAR 0 3
67210: PPUSH
67211: CALL_OW 3
67215: PPUSH
67216: CALL_OW 1
67220: ST_TO_ADDR
// end ; end ;
67221: GO 67050
67223: POP
67224: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67225: LD_VAR 0 1
67229: PPUSH
67230: LD_EXP 96
67234: PUSH
67235: LD_VAR 0 4
67239: ARRAY
67240: PUSH
67241: LD_INT 0
67243: PLUS
67244: PPUSH
67245: CALL_OW 505
// end ;
67249: LD_VAR 0 2
67253: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67254: LD_INT 0
67256: PPUSH
67257: PPUSH
67258: PPUSH
67259: PPUSH
// if not hack in hackTanks then
67260: LD_VAR 0 1
67264: PUSH
67265: LD_EXP 95
67269: IN
67270: NOT
67271: IFFALSE 67275
// exit ;
67273: GO 67360
// index := GetElementIndex ( hackTanks , hack ) ;
67275: LD_ADDR_VAR 0 5
67279: PUSH
67280: LD_EXP 95
67284: PPUSH
67285: LD_VAR 0 1
67289: PPUSH
67290: CALL 12518 0 2
67294: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
67295: LD_ADDR_VAR 0 4
67299: PUSH
67300: DOUBLE
67301: LD_INT 1
67303: DEC
67304: ST_TO_ADDR
67305: LD_EXP 96
67309: PUSH
67310: LD_VAR 0 5
67314: ARRAY
67315: PUSH
67316: FOR_TO
67317: IFFALSE 67358
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67319: LD_EXP 96
67323: PUSH
67324: LD_VAR 0 5
67328: ARRAY
67329: PUSH
67330: LD_VAR 0 4
67334: ARRAY
67335: PUSH
67336: LD_INT 1
67338: ARRAY
67339: PUSH
67340: LD_VAR 0 2
67344: EQUAL
67345: IFFALSE 67356
// KillUnit ( vehicle ) ;
67347: LD_VAR 0 2
67351: PPUSH
67352: CALL_OW 66
67356: GO 67316
67358: POP
67359: POP
// end ;
67360: LD_VAR 0 3
67364: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
67365: LD_EXP 100
67369: NOT
67370: IFFALSE 67405
67372: GO 67374
67374: DISABLE
// begin initMiner := true ;
67375: LD_ADDR_EXP 100
67379: PUSH
67380: LD_INT 1
67382: ST_TO_ADDR
// minersList := [ ] ;
67383: LD_ADDR_EXP 101
67387: PUSH
67388: EMPTY
67389: ST_TO_ADDR
// minerMinesList := [ ] ;
67390: LD_ADDR_EXP 102
67394: PUSH
67395: EMPTY
67396: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67397: LD_ADDR_EXP 103
67401: PUSH
67402: LD_INT 5
67404: ST_TO_ADDR
// end ;
67405: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67406: LD_EXP 100
67410: PUSH
67411: LD_INT 34
67413: PUSH
67414: LD_INT 81
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PPUSH
67421: CALL_OW 69
67425: AND
67426: IFFALSE 67887
67428: GO 67430
67430: DISABLE
67431: LD_INT 0
67433: PPUSH
67434: PPUSH
67435: PPUSH
67436: PPUSH
// begin enable ;
67437: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67438: LD_ADDR_VAR 0 1
67442: PUSH
67443: LD_INT 34
67445: PUSH
67446: LD_INT 81
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PPUSH
67453: CALL_OW 69
67457: PUSH
67458: FOR_IN
67459: IFFALSE 67531
// begin if not i in minersList then
67461: LD_VAR 0 1
67465: PUSH
67466: LD_EXP 101
67470: IN
67471: NOT
67472: IFFALSE 67529
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67474: LD_ADDR_EXP 101
67478: PUSH
67479: LD_EXP 101
67483: PPUSH
67484: LD_EXP 101
67488: PUSH
67489: LD_INT 1
67491: PLUS
67492: PPUSH
67493: LD_VAR 0 1
67497: PPUSH
67498: CALL_OW 1
67502: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67503: LD_ADDR_EXP 102
67507: PUSH
67508: LD_EXP 102
67512: PPUSH
67513: LD_EXP 102
67517: PUSH
67518: LD_INT 1
67520: PLUS
67521: PPUSH
67522: EMPTY
67523: PPUSH
67524: CALL_OW 1
67528: ST_TO_ADDR
// end end ;
67529: GO 67458
67531: POP
67532: POP
// for i := minerMinesList downto 1 do
67533: LD_ADDR_VAR 0 1
67537: PUSH
67538: DOUBLE
67539: LD_EXP 102
67543: INC
67544: ST_TO_ADDR
67545: LD_INT 1
67547: PUSH
67548: FOR_DOWNTO
67549: IFFALSE 67885
// begin if IsLive ( minersList [ i ] ) then
67551: LD_EXP 101
67555: PUSH
67556: LD_VAR 0 1
67560: ARRAY
67561: PPUSH
67562: CALL_OW 300
67566: IFFALSE 67594
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67568: LD_EXP 101
67572: PUSH
67573: LD_VAR 0 1
67577: ARRAY
67578: PPUSH
67579: LD_EXP 102
67583: PUSH
67584: LD_VAR 0 1
67588: ARRAY
67589: PPUSH
67590: CALL_OW 505
// if not minerMinesList [ i ] then
67594: LD_EXP 102
67598: PUSH
67599: LD_VAR 0 1
67603: ARRAY
67604: NOT
67605: IFFALSE 67609
// continue ;
67607: GO 67548
// for j := minerMinesList [ i ] downto 1 do
67609: LD_ADDR_VAR 0 2
67613: PUSH
67614: DOUBLE
67615: LD_EXP 102
67619: PUSH
67620: LD_VAR 0 1
67624: ARRAY
67625: INC
67626: ST_TO_ADDR
67627: LD_INT 1
67629: PUSH
67630: FOR_DOWNTO
67631: IFFALSE 67881
// begin side := GetSide ( minersList [ i ] ) ;
67633: LD_ADDR_VAR 0 3
67637: PUSH
67638: LD_EXP 101
67642: PUSH
67643: LD_VAR 0 1
67647: ARRAY
67648: PPUSH
67649: CALL_OW 255
67653: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67654: LD_ADDR_VAR 0 4
67658: PUSH
67659: LD_EXP 102
67663: PUSH
67664: LD_VAR 0 1
67668: ARRAY
67669: PUSH
67670: LD_VAR 0 2
67674: ARRAY
67675: PUSH
67676: LD_INT 1
67678: ARRAY
67679: PPUSH
67680: LD_EXP 102
67684: PUSH
67685: LD_VAR 0 1
67689: ARRAY
67690: PUSH
67691: LD_VAR 0 2
67695: ARRAY
67696: PUSH
67697: LD_INT 2
67699: ARRAY
67700: PPUSH
67701: CALL_OW 428
67705: ST_TO_ADDR
// if not tmp then
67706: LD_VAR 0 4
67710: NOT
67711: IFFALSE 67715
// continue ;
67713: GO 67630
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67715: LD_VAR 0 4
67719: PUSH
67720: LD_INT 81
67722: PUSH
67723: LD_VAR 0 3
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PPUSH
67732: CALL_OW 69
67736: IN
67737: PUSH
67738: LD_EXP 102
67742: PUSH
67743: LD_VAR 0 1
67747: ARRAY
67748: PUSH
67749: LD_VAR 0 2
67753: ARRAY
67754: PUSH
67755: LD_INT 1
67757: ARRAY
67758: PPUSH
67759: LD_EXP 102
67763: PUSH
67764: LD_VAR 0 1
67768: ARRAY
67769: PUSH
67770: LD_VAR 0 2
67774: ARRAY
67775: PUSH
67776: LD_INT 2
67778: ARRAY
67779: PPUSH
67780: CALL_OW 458
67784: AND
67785: IFFALSE 67879
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67787: LD_EXP 102
67791: PUSH
67792: LD_VAR 0 1
67796: ARRAY
67797: PUSH
67798: LD_VAR 0 2
67802: ARRAY
67803: PUSH
67804: LD_INT 1
67806: ARRAY
67807: PPUSH
67808: LD_EXP 102
67812: PUSH
67813: LD_VAR 0 1
67817: ARRAY
67818: PUSH
67819: LD_VAR 0 2
67823: ARRAY
67824: PUSH
67825: LD_INT 2
67827: ARRAY
67828: PPUSH
67829: LD_VAR 0 3
67833: PPUSH
67834: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67838: LD_ADDR_EXP 102
67842: PUSH
67843: LD_EXP 102
67847: PPUSH
67848: LD_VAR 0 1
67852: PPUSH
67853: LD_EXP 102
67857: PUSH
67858: LD_VAR 0 1
67862: ARRAY
67863: PPUSH
67864: LD_VAR 0 2
67868: PPUSH
67869: CALL_OW 3
67873: PPUSH
67874: CALL_OW 1
67878: ST_TO_ADDR
// end ; end ;
67879: GO 67630
67881: POP
67882: POP
// end ;
67883: GO 67548
67885: POP
67886: POP
// end ;
67887: PPOPN 4
67889: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
67890: LD_INT 0
67892: PPUSH
67893: PPUSH
// result := false ;
67894: LD_ADDR_VAR 0 4
67898: PUSH
67899: LD_INT 0
67901: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67902: LD_VAR 0 1
67906: PPUSH
67907: CALL_OW 264
67911: PUSH
67912: LD_INT 81
67914: EQUAL
67915: NOT
67916: IFFALSE 67920
// exit ;
67918: GO 68160
// index := GetElementIndex ( minersList , unit ) ;
67920: LD_ADDR_VAR 0 5
67924: PUSH
67925: LD_EXP 101
67929: PPUSH
67930: LD_VAR 0 1
67934: PPUSH
67935: CALL 12518 0 2
67939: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67940: LD_EXP 102
67944: PUSH
67945: LD_VAR 0 5
67949: ARRAY
67950: PUSH
67951: LD_EXP 103
67955: GREATEREQUAL
67956: IFFALSE 67960
// exit ;
67958: GO 68160
// ComMoveXY ( unit , x , y ) ;
67960: LD_VAR 0 1
67964: PPUSH
67965: LD_VAR 0 2
67969: PPUSH
67970: LD_VAR 0 3
67974: PPUSH
67975: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67979: LD_INT 35
67981: PPUSH
67982: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
67986: LD_VAR 0 1
67990: PPUSH
67991: LD_VAR 0 2
67995: PPUSH
67996: LD_VAR 0 3
68000: PPUSH
68001: CALL 43873 0 3
68005: NOT
68006: PUSH
68007: LD_VAR 0 1
68011: PPUSH
68012: CALL_OW 314
68016: AND
68017: IFFALSE 68021
// exit ;
68019: GO 68160
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68021: LD_VAR 0 2
68025: PPUSH
68026: LD_VAR 0 3
68030: PPUSH
68031: CALL_OW 428
68035: PUSH
68036: LD_VAR 0 1
68040: EQUAL
68041: PUSH
68042: LD_VAR 0 1
68046: PPUSH
68047: CALL_OW 314
68051: NOT
68052: AND
68053: IFFALSE 67979
// PlaySoundXY ( x , y , PlantMine ) ;
68055: LD_VAR 0 2
68059: PPUSH
68060: LD_VAR 0 3
68064: PPUSH
68065: LD_STRING PlantMine
68067: PPUSH
68068: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
68072: LD_VAR 0 2
68076: PPUSH
68077: LD_VAR 0 3
68081: PPUSH
68082: LD_VAR 0 1
68086: PPUSH
68087: CALL_OW 255
68091: PPUSH
68092: LD_INT 0
68094: PPUSH
68095: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
68099: LD_ADDR_EXP 102
68103: PUSH
68104: LD_EXP 102
68108: PPUSH
68109: LD_VAR 0 5
68113: PUSH
68114: LD_EXP 102
68118: PUSH
68119: LD_VAR 0 5
68123: ARRAY
68124: PUSH
68125: LD_INT 1
68127: PLUS
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PPUSH
68133: LD_VAR 0 2
68137: PUSH
68138: LD_VAR 0 3
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PPUSH
68147: CALL 12733 0 3
68151: ST_TO_ADDR
// result := true ;
68152: LD_ADDR_VAR 0 4
68156: PUSH
68157: LD_INT 1
68159: ST_TO_ADDR
// end ;
68160: LD_VAR 0 4
68164: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
68165: LD_INT 0
68167: PPUSH
68168: PPUSH
68169: PPUSH
// if not unit in minersList then
68170: LD_VAR 0 1
68174: PUSH
68175: LD_EXP 101
68179: IN
68180: NOT
68181: IFFALSE 68185
// exit ;
68183: GO 68577
// index := GetElementIndex ( minersList , unit ) ;
68185: LD_ADDR_VAR 0 6
68189: PUSH
68190: LD_EXP 101
68194: PPUSH
68195: LD_VAR 0 1
68199: PPUSH
68200: CALL 12518 0 2
68204: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68205: LD_ADDR_VAR 0 5
68209: PUSH
68210: DOUBLE
68211: LD_EXP 102
68215: PUSH
68216: LD_VAR 0 6
68220: ARRAY
68221: INC
68222: ST_TO_ADDR
68223: LD_INT 1
68225: PUSH
68226: FOR_DOWNTO
68227: IFFALSE 68388
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68229: LD_EXP 102
68233: PUSH
68234: LD_VAR 0 6
68238: ARRAY
68239: PUSH
68240: LD_VAR 0 5
68244: ARRAY
68245: PUSH
68246: LD_INT 1
68248: ARRAY
68249: PUSH
68250: LD_VAR 0 2
68254: EQUAL
68255: PUSH
68256: LD_EXP 102
68260: PUSH
68261: LD_VAR 0 6
68265: ARRAY
68266: PUSH
68267: LD_VAR 0 5
68271: ARRAY
68272: PUSH
68273: LD_INT 2
68275: ARRAY
68276: PUSH
68277: LD_VAR 0 3
68281: EQUAL
68282: AND
68283: IFFALSE 68386
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68285: LD_EXP 102
68289: PUSH
68290: LD_VAR 0 6
68294: ARRAY
68295: PUSH
68296: LD_VAR 0 5
68300: ARRAY
68301: PUSH
68302: LD_INT 1
68304: ARRAY
68305: PPUSH
68306: LD_EXP 102
68310: PUSH
68311: LD_VAR 0 6
68315: ARRAY
68316: PUSH
68317: LD_VAR 0 5
68321: ARRAY
68322: PUSH
68323: LD_INT 2
68325: ARRAY
68326: PPUSH
68327: LD_VAR 0 1
68331: PPUSH
68332: CALL_OW 255
68336: PPUSH
68337: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68341: LD_ADDR_EXP 102
68345: PUSH
68346: LD_EXP 102
68350: PPUSH
68351: LD_VAR 0 6
68355: PPUSH
68356: LD_EXP 102
68360: PUSH
68361: LD_VAR 0 6
68365: ARRAY
68366: PPUSH
68367: LD_VAR 0 5
68371: PPUSH
68372: CALL_OW 3
68376: PPUSH
68377: CALL_OW 1
68381: ST_TO_ADDR
// exit ;
68382: POP
68383: POP
68384: GO 68577
// end ; end ;
68386: GO 68226
68388: POP
68389: POP
// for i := minerMinesList [ index ] downto 1 do
68390: LD_ADDR_VAR 0 5
68394: PUSH
68395: DOUBLE
68396: LD_EXP 102
68400: PUSH
68401: LD_VAR 0 6
68405: ARRAY
68406: INC
68407: ST_TO_ADDR
68408: LD_INT 1
68410: PUSH
68411: FOR_DOWNTO
68412: IFFALSE 68575
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68414: LD_EXP 102
68418: PUSH
68419: LD_VAR 0 6
68423: ARRAY
68424: PUSH
68425: LD_VAR 0 5
68429: ARRAY
68430: PUSH
68431: LD_INT 1
68433: ARRAY
68434: PPUSH
68435: LD_EXP 102
68439: PUSH
68440: LD_VAR 0 6
68444: ARRAY
68445: PUSH
68446: LD_VAR 0 5
68450: ARRAY
68451: PUSH
68452: LD_INT 2
68454: ARRAY
68455: PPUSH
68456: LD_VAR 0 2
68460: PPUSH
68461: LD_VAR 0 3
68465: PPUSH
68466: CALL_OW 298
68470: PUSH
68471: LD_INT 6
68473: LESS
68474: IFFALSE 68573
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68476: LD_EXP 102
68480: PUSH
68481: LD_VAR 0 6
68485: ARRAY
68486: PUSH
68487: LD_VAR 0 5
68491: ARRAY
68492: PUSH
68493: LD_INT 1
68495: ARRAY
68496: PPUSH
68497: LD_EXP 102
68501: PUSH
68502: LD_VAR 0 6
68506: ARRAY
68507: PUSH
68508: LD_VAR 0 5
68512: ARRAY
68513: PUSH
68514: LD_INT 2
68516: ARRAY
68517: PPUSH
68518: LD_VAR 0 1
68522: PPUSH
68523: CALL_OW 255
68527: PPUSH
68528: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68532: LD_ADDR_EXP 102
68536: PUSH
68537: LD_EXP 102
68541: PPUSH
68542: LD_VAR 0 6
68546: PPUSH
68547: LD_EXP 102
68551: PUSH
68552: LD_VAR 0 6
68556: ARRAY
68557: PPUSH
68558: LD_VAR 0 5
68562: PPUSH
68563: CALL_OW 3
68567: PPUSH
68568: CALL_OW 1
68572: ST_TO_ADDR
// end ; end ;
68573: GO 68411
68575: POP
68576: POP
// end ;
68577: LD_VAR 0 4
68581: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68582: LD_INT 0
68584: PPUSH
68585: PPUSH
68586: PPUSH
68587: PPUSH
68588: PPUSH
68589: PPUSH
68590: PPUSH
68591: PPUSH
68592: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68593: LD_VAR 0 1
68597: PPUSH
68598: CALL_OW 264
68602: PUSH
68603: LD_INT 81
68605: EQUAL
68606: NOT
68607: PUSH
68608: LD_VAR 0 1
68612: PUSH
68613: LD_EXP 101
68617: IN
68618: NOT
68619: OR
68620: IFFALSE 68624
// exit ;
68622: GO 68946
// index := GetElementIndex ( minersList , unit ) ;
68624: LD_ADDR_VAR 0 6
68628: PUSH
68629: LD_EXP 101
68633: PPUSH
68634: LD_VAR 0 1
68638: PPUSH
68639: CALL 12518 0 2
68643: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68644: LD_ADDR_VAR 0 8
68648: PUSH
68649: LD_EXP 103
68653: PUSH
68654: LD_EXP 102
68658: PUSH
68659: LD_VAR 0 6
68663: ARRAY
68664: MINUS
68665: ST_TO_ADDR
// if not minesFreeAmount then
68666: LD_VAR 0 8
68670: NOT
68671: IFFALSE 68675
// exit ;
68673: GO 68946
// tmp := [ ] ;
68675: LD_ADDR_VAR 0 7
68679: PUSH
68680: EMPTY
68681: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68682: LD_ADDR_VAR 0 5
68686: PUSH
68687: DOUBLE
68688: LD_INT 1
68690: DEC
68691: ST_TO_ADDR
68692: LD_VAR 0 8
68696: PUSH
68697: FOR_TO
68698: IFFALSE 68893
// begin _d := rand ( 0 , 5 ) ;
68700: LD_ADDR_VAR 0 11
68704: PUSH
68705: LD_INT 0
68707: PPUSH
68708: LD_INT 5
68710: PPUSH
68711: CALL_OW 12
68715: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68716: LD_ADDR_VAR 0 12
68720: PUSH
68721: LD_INT 2
68723: PPUSH
68724: LD_INT 6
68726: PPUSH
68727: CALL_OW 12
68731: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68732: LD_ADDR_VAR 0 9
68736: PUSH
68737: LD_VAR 0 2
68741: PPUSH
68742: LD_VAR 0 11
68746: PPUSH
68747: LD_VAR 0 12
68751: PPUSH
68752: CALL_OW 272
68756: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68757: LD_ADDR_VAR 0 10
68761: PUSH
68762: LD_VAR 0 3
68766: PPUSH
68767: LD_VAR 0 11
68771: PPUSH
68772: LD_VAR 0 12
68776: PPUSH
68777: CALL_OW 273
68781: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68782: LD_VAR 0 9
68786: PPUSH
68787: LD_VAR 0 10
68791: PPUSH
68792: CALL_OW 488
68796: PUSH
68797: LD_VAR 0 9
68801: PUSH
68802: LD_VAR 0 10
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_VAR 0 7
68815: IN
68816: NOT
68817: AND
68818: PUSH
68819: LD_VAR 0 9
68823: PPUSH
68824: LD_VAR 0 10
68828: PPUSH
68829: CALL_OW 458
68833: NOT
68834: AND
68835: IFFALSE 68877
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68837: LD_ADDR_VAR 0 7
68841: PUSH
68842: LD_VAR 0 7
68846: PPUSH
68847: LD_VAR 0 7
68851: PUSH
68852: LD_INT 1
68854: PLUS
68855: PPUSH
68856: LD_VAR 0 9
68860: PUSH
68861: LD_VAR 0 10
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PPUSH
68870: CALL_OW 1
68874: ST_TO_ADDR
68875: GO 68891
// i := i - 1 ;
68877: LD_ADDR_VAR 0 5
68881: PUSH
68882: LD_VAR 0 5
68886: PUSH
68887: LD_INT 1
68889: MINUS
68890: ST_TO_ADDR
// end ;
68891: GO 68697
68893: POP
68894: POP
// for i in tmp do
68895: LD_ADDR_VAR 0 5
68899: PUSH
68900: LD_VAR 0 7
68904: PUSH
68905: FOR_IN
68906: IFFALSE 68944
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68908: LD_VAR 0 1
68912: PPUSH
68913: LD_VAR 0 5
68917: PUSH
68918: LD_INT 1
68920: ARRAY
68921: PPUSH
68922: LD_VAR 0 5
68926: PUSH
68927: LD_INT 2
68929: ARRAY
68930: PPUSH
68931: CALL 67890 0 3
68935: NOT
68936: IFFALSE 68942
// exit ;
68938: POP
68939: POP
68940: GO 68946
68942: GO 68905
68944: POP
68945: POP
// end ;
68946: LD_VAR 0 4
68950: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
68951: LD_INT 0
68953: PPUSH
68954: PPUSH
68955: PPUSH
68956: PPUSH
68957: PPUSH
68958: PPUSH
68959: PPUSH
// if not GetClass ( unit ) = class_sniper then
68960: LD_VAR 0 1
68964: PPUSH
68965: CALL_OW 257
68969: PUSH
68970: LD_INT 5
68972: EQUAL
68973: NOT
68974: IFFALSE 68978
// exit ;
68976: GO 69366
// dist := 8 ;
68978: LD_ADDR_VAR 0 5
68982: PUSH
68983: LD_INT 8
68985: ST_TO_ADDR
// viewRange := 12 ;
68986: LD_ADDR_VAR 0 7
68990: PUSH
68991: LD_INT 12
68993: ST_TO_ADDR
// side := GetSide ( unit ) ;
68994: LD_ADDR_VAR 0 6
68998: PUSH
68999: LD_VAR 0 1
69003: PPUSH
69004: CALL_OW 255
69008: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69009: LD_INT 61
69011: PPUSH
69012: LD_VAR 0 6
69016: PPUSH
69017: CALL_OW 321
69021: PUSH
69022: LD_INT 2
69024: EQUAL
69025: IFFALSE 69035
// viewRange := 16 ;
69027: LD_ADDR_VAR 0 7
69031: PUSH
69032: LD_INT 16
69034: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
69035: LD_VAR 0 1
69039: PPUSH
69040: LD_VAR 0 2
69044: PPUSH
69045: LD_VAR 0 3
69049: PPUSH
69050: CALL_OW 297
69054: PUSH
69055: LD_VAR 0 5
69059: GREATER
69060: IFFALSE 69139
// begin ComMoveXY ( unit , x , y ) ;
69062: LD_VAR 0 1
69066: PPUSH
69067: LD_VAR 0 2
69071: PPUSH
69072: LD_VAR 0 3
69076: PPUSH
69077: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69081: LD_INT 35
69083: PPUSH
69084: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
69088: LD_VAR 0 1
69092: PPUSH
69093: LD_VAR 0 2
69097: PPUSH
69098: LD_VAR 0 3
69102: PPUSH
69103: CALL 43873 0 3
69107: NOT
69108: IFFALSE 69112
// exit ;
69110: GO 69366
// until GetDistUnitXY ( unit , x , y ) < dist ;
69112: LD_VAR 0 1
69116: PPUSH
69117: LD_VAR 0 2
69121: PPUSH
69122: LD_VAR 0 3
69126: PPUSH
69127: CALL_OW 297
69131: PUSH
69132: LD_VAR 0 5
69136: LESS
69137: IFFALSE 69081
// end ; ComTurnXY ( unit , x , y ) ;
69139: LD_VAR 0 1
69143: PPUSH
69144: LD_VAR 0 2
69148: PPUSH
69149: LD_VAR 0 3
69153: PPUSH
69154: CALL_OW 118
// wait ( 5 ) ;
69158: LD_INT 5
69160: PPUSH
69161: CALL_OW 67
// _d := GetDir ( unit ) ;
69165: LD_ADDR_VAR 0 10
69169: PUSH
69170: LD_VAR 0 1
69174: PPUSH
69175: CALL_OW 254
69179: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
69180: LD_ADDR_VAR 0 8
69184: PUSH
69185: LD_VAR 0 1
69189: PPUSH
69190: CALL_OW 250
69194: PPUSH
69195: LD_VAR 0 10
69199: PPUSH
69200: LD_VAR 0 5
69204: PPUSH
69205: CALL_OW 272
69209: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
69210: LD_ADDR_VAR 0 9
69214: PUSH
69215: LD_VAR 0 1
69219: PPUSH
69220: CALL_OW 251
69224: PPUSH
69225: LD_VAR 0 10
69229: PPUSH
69230: LD_VAR 0 5
69234: PPUSH
69235: CALL_OW 273
69239: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69240: LD_VAR 0 8
69244: PPUSH
69245: LD_VAR 0 9
69249: PPUSH
69250: CALL_OW 488
69254: NOT
69255: IFFALSE 69259
// exit ;
69257: GO 69366
// ComAnimCustom ( unit , 1 ) ;
69259: LD_VAR 0 1
69263: PPUSH
69264: LD_INT 1
69266: PPUSH
69267: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69271: LD_VAR 0 8
69275: PPUSH
69276: LD_VAR 0 9
69280: PPUSH
69281: LD_VAR 0 6
69285: PPUSH
69286: LD_VAR 0 7
69290: PPUSH
69291: CALL_OW 330
// repeat wait ( 1 ) ;
69295: LD_INT 1
69297: PPUSH
69298: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
69302: LD_VAR 0 1
69306: PPUSH
69307: CALL_OW 316
69311: PUSH
69312: LD_VAR 0 1
69316: PPUSH
69317: CALL_OW 314
69321: OR
69322: PUSH
69323: LD_VAR 0 1
69327: PPUSH
69328: CALL_OW 302
69332: NOT
69333: OR
69334: PUSH
69335: LD_VAR 0 1
69339: PPUSH
69340: CALL_OW 301
69344: OR
69345: IFFALSE 69295
// RemoveSeeing ( _x , _y , side ) ;
69347: LD_VAR 0 8
69351: PPUSH
69352: LD_VAR 0 9
69356: PPUSH
69357: LD_VAR 0 6
69361: PPUSH
69362: CALL_OW 331
// end ;
69366: LD_VAR 0 4
69370: RET
