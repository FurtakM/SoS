// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 10304 0 0
// LoadEnv ;
  16: CALL 9861 0 0
// LoadCam ;
  20: CALL 10568 0 0
// LoadTech ;
  24: CALL 10644 0 0
// LoadBase ;
  28: CALL 11130 0 0
// PrepareArabian ;
  32: CALL 186 0 0
// PrepareRussian ;
  36: CALL 3052 0 0
// Action ;
  40: CALL 12442 0 0
// end ;
  44: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; export wave , strength ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 09c_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 09c_
  63: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 09_tick
  71: PPUSH
  72: LD_INT 31500
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 09c_tick
  87: PPUSH
  88: LD_INT 10500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// playerInBase := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// kamikazeTrained := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// apeDriver := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 120
 127: PUSH
 128: LD_INT 150
 130: PUSH
 131: LD_INT 180
 133: PUSH
 134: LD_INT 220
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// missionTime := 0 0$00 ;
 149: LD_ADDR_EXP 9
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// ruDefeated := false ;
 157: LD_ADDR_EXP 10
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// wave := 0 ;
 165: LD_ADDR_EXP 11
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// strength := 0 ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ; end_of_file
 181: LD_VAR 0 1
 185: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 197: LD_STRING 05_DrugsTested
 199: PPUSH
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 30
 209: IFFALSE 224
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 211: LD_INT 5
 213: PPUSH
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 2
 219: PPUSH
 220: CALL_OW 322
// uc_side := 2 ;
 224: LD_ADDR_OWVAR 20
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// uc_nation := nation_nature ;
 232: LD_ADDR_OWVAR 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 240: LD_ADDR_VAR 0 3
 244: PUSH
 245: LD_STRING 09_apes
 247: PPUSH
 248: CALL_OW 31
 252: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 253: LD_ADDR_VAR 0 6
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 30
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: ST_TO_ADDR
// if apes then
 305: LD_VAR 0 3
 309: IFFALSE 388
// for i in apes do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: LD_VAR 0 3
 320: PUSH
 321: FOR_IN
 322: IFFALSE 386
// if UnitsInside ( b [ 1 ] ) < 6 then
 324: LD_VAR 0 6
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: CALL_OW 313
 337: PUSH
 338: LD_INT 6
 340: LESS
 341: IFFALSE 363
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_VAR 0 6
 352: PUSH
 353: LD_INT 1
 355: ARRAY
 356: PPUSH
 357: CALL_OW 52
 361: GO 384
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 363: LD_VAR 0 2
 367: PPUSH
 368: LD_INT 82
 370: PPUSH
 371: LD_INT 27
 373: PPUSH
 374: LD_INT 6
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 50
 384: GO 321
 386: POP
 387: POP
// InitHC_All ( ) ;
 388: CALL_OW 584
// uc_nation := nation_arabian ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 2
 399: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 400: LD_ADDR_VAR 0 6
 404: PUSH
 405: LD_INT 22
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 5
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 474: LD_ADDR_EXP 33
 478: PUSH
 479: LD_STRING Rolf
 481: PPUSH
 482: LD_EXP 1
 486: NOT
 487: PPUSH
 488: LD_STRING 06_
 490: PPUSH
 491: CALL 15558 0 3
 495: ST_TO_ADDR
// if Rolf then
 496: LD_EXP 33
 500: IFFALSE 709
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 502: LD_ADDR_EXP 32
 506: PUSH
 507: LD_STRING 06_RolfSquad
 509: PPUSH
 510: CALL_OW 31
 514: ST_TO_ADDR
// if rolfSquad < 3 then
 515: LD_EXP 32
 519: PUSH
 520: LD_INT 3
 522: LESS
 523: IFFALSE 586
// for i := 1 to 3 - Count ( rolfSquad ) do
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: DOUBLE
 531: LD_INT 1
 533: DEC
 534: ST_TO_ADDR
 535: LD_INT 3
 537: PUSH
 538: LD_EXP 32
 542: PPUSH
 543: CALL 17782 0 1
 547: MINUS
 548: PUSH
 549: FOR_TO
 550: IFFALSE 584
// begin PrepareSoldier ( false , 4 ) ;
 552: LD_INT 0
 554: PPUSH
 555: LD_INT 4
 557: PPUSH
 558: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 562: LD_ADDR_EXP 32
 566: PUSH
 567: LD_EXP 32
 571: PPUSH
 572: CALL_OW 44
 576: PPUSH
 577: CALL 53714 0 2
 581: ST_TO_ADDR
// end ;
 582: GO 549
 584: POP
 585: POP
// if b then
 586: LD_VAR 0 6
 590: IFFALSE 665
// begin for i in rolfSquad union Rolf do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_EXP 32
 601: PUSH
 602: LD_EXP 33
 606: UNION
 607: PUSH
 608: FOR_IN
 609: IFFALSE 661
// begin SetClass ( i , 1 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_VAR 0 6
 632: PPUSH
 633: LD_INT 3
 635: PUSH
 636: LD_INT 62
 638: PUSH
 639: EMPTY
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 52
// end ;
 659: GO 608
 661: POP
 662: POP
// end else
 663: GO 709
// for i in rolfSquad union Rolf do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_EXP 32
 674: PUSH
 675: LD_EXP 33
 679: UNION
 680: PUSH
 681: FOR_IN
 682: IFFALSE 707
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 684: LD_VAR 0 2
 688: PPUSH
 689: LD_INT 82
 691: PPUSH
 692: LD_INT 27
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 50
 705: GO 681
 707: POP
 708: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 13
 713: PUSH
 714: LD_STRING Heike
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 15558 0 3
 732: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 16
 737: PUSH
 738: LD_STRING Ibrahim
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 15558 0 3
 756: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 14
 761: PUSH
 762: LD_STRING Givi
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 15558 0 3
 780: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 17
 785: PUSH
 786: LD_STRING Kamil
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 15558 0 3
 804: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 18
 809: PUSH
 810: LD_STRING Kaia
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 15558 0 3
 828: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 19
 833: PUSH
 834: LD_STRING Sophia
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 15558 0 3
 852: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 20
 857: PUSH
 858: LD_STRING Markov
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 15558 0 3
 876: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 23
 881: PUSH
 882: LD_STRING Aviradze
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 15558 0 3
 900: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 22
 905: PUSH
 906: LD_STRING Kurt
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 15558 0 3
 924: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_STRING Mike
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 15558 0 3
 948: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 21
 953: PUSH
 954: LD_STRING Olaf
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 15558 0 3
 972: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 973: LD_ADDR_EXP 30
 977: PUSH
 978: LD_STRING 09c_heikeSecondSquad
 980: PPUSH
 981: CALL_OW 31
 985: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 986: LD_ADDR_EXP 24
 990: PUSH
 991: LD_STRING Schulz
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_EXP 2
1004: PPUSH
1005: CALL 15558 0 3
1009: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
1010: LD_ADDR_EXP 25
1014: PUSH
1015: LD_STRING Basim
1017: PPUSH
1018: LD_EXP 1
1022: NOT
1023: PPUSH
1024: LD_EXP 2
1028: PPUSH
1029: CALL 15558 0 3
1033: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1034: LD_ADDR_EXP 26
1038: PUSH
1039: LD_STRING Lemmy
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 2
1052: PPUSH
1053: CALL 15558 0 3
1057: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1058: LD_ADDR_EXP 27
1062: PUSH
1063: LD_STRING Mia
1065: PPUSH
1066: LD_EXP 1
1070: NOT
1071: PPUSH
1072: LD_EXP 2
1076: PPUSH
1077: CALL 15558 0 3
1081: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1082: LD_ADDR_EXP 28
1086: PUSH
1087: LD_STRING Nia
1089: PPUSH
1090: LD_EXP 1
1094: NOT
1095: PPUSH
1096: LD_EXP 2
1100: PPUSH
1101: CALL 15558 0 3
1105: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1106: LD_ADDR_EXP 29
1110: PUSH
1111: LD_STRING Jenna
1113: PPUSH
1114: LD_EXP 1
1118: NOT
1119: PPUSH
1120: LD_EXP 2
1124: PPUSH
1125: CALL 15558 0 3
1129: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING 09c_schulzSecondSquad
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// if debug then
1143: LD_EXP 1
1147: IFFALSE 1227
// begin schulzSecondSquad := [ ] ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: EMPTY
1155: ST_TO_ADDR
// for i := 1 to 3 do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_INT 3
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1225
// begin uc_side := 2 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
// uc_nation := nation_arabian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 2
1187: ST_TO_ADDR
// PrepareHuman ( false , i , 0 ) ;
1188: LD_INT 0
1190: PPUSH
1191: LD_VAR 0 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PPUSH
1213: CALL_OW 44
1217: PPUSH
1218: CALL 53714 0 2
1222: ST_TO_ADDR
// end ;
1223: GO 1169
1225: POP
1226: POP
// end ; vehicles := LoadVariable ( 09c_vehicles , [ [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 36 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 41 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 37 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 35 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 34 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 38 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 40 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 39 ] ] ) ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_STRING 09c_vehicles
1234: PPUSH
1235: LD_INT 13
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 28
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 36
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 13
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 28
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 0
1289: PUSH
1290: LD_INT 41
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 13
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: LD_INT 28
1314: PUSH
1315: LD_INT 2
1317: PUSH
1318: LD_INT 0
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 37
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 13
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 28
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 35
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 13
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 28
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: LD_INT 34
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 13
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 28
1416: PUSH
1417: LD_INT 2
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 38
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 13
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 28
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 40
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 13
1475: PUSH
1476: LD_INT 3
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 28
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 39
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 30
1521: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Heike , LoadVariable ( 09c_Heike_ID , - 1 ) , vehicles ) ;
1522: LD_ADDR_VAR 0 9
1526: PUSH
1527: LD_VAR 0 9
1531: PUSH
1532: LD_EXP 13
1536: PPUSH
1537: LD_STRING 09c_Heike_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2764 0 3
1558: DIFF
1559: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Givi , LoadVariable ( 09c_Givi_ID , - 1 ) , vehicles ) ;
1560: LD_ADDR_VAR 0 9
1564: PUSH
1565: LD_VAR 0 9
1569: PUSH
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING 09c_Givi_ID
1577: PPUSH
1578: LD_INT 1
1580: NEG
1581: PPUSH
1582: CALL_OW 30
1586: PPUSH
1587: LD_VAR 0 9
1591: PPUSH
1592: CALL 2764 0 3
1596: DIFF
1597: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mike , LoadVariable ( 09c_Mike_ID , - 1 ) , vehicles ) ;
1598: LD_ADDR_VAR 0 9
1602: PUSH
1603: LD_VAR 0 9
1607: PUSH
1608: LD_EXP 15
1612: PPUSH
1613: LD_STRING 09c_Mike_ID
1615: PPUSH
1616: LD_INT 1
1618: NEG
1619: PPUSH
1620: CALL_OW 30
1624: PPUSH
1625: LD_VAR 0 9
1629: PPUSH
1630: CALL 2764 0 3
1634: DIFF
1635: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Ibrahim , LoadVariable ( 09c_Ibrahim_ID , - 1 ) , vehicles ) ;
1636: LD_ADDR_VAR 0 9
1640: PUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_EXP 16
1650: PPUSH
1651: LD_STRING 09c_Ibrahim_ID
1653: PPUSH
1654: LD_INT 1
1656: NEG
1657: PPUSH
1658: CALL_OW 30
1662: PPUSH
1663: LD_VAR 0 9
1667: PPUSH
1668: CALL 2764 0 3
1672: DIFF
1673: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kamil , LoadVariable ( 09c_Kamil_ID , - 1 ) , vehicles ) ;
1674: LD_ADDR_VAR 0 9
1678: PUSH
1679: LD_VAR 0 9
1683: PUSH
1684: LD_EXP 17
1688: PPUSH
1689: LD_STRING 09c_Kamil_ID
1691: PPUSH
1692: LD_INT 1
1694: NEG
1695: PPUSH
1696: CALL_OW 30
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL 2764 0 3
1710: DIFF
1711: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kaia , LoadVariable ( 09c_Kaia_ID , - 1 ) , vehicles ) ;
1712: LD_ADDR_VAR 0 9
1716: PUSH
1717: LD_VAR 0 9
1721: PUSH
1722: LD_EXP 18
1726: PPUSH
1727: LD_STRING 09c_Kaia_ID
1729: PPUSH
1730: LD_INT 1
1732: NEG
1733: PPUSH
1734: CALL_OW 30
1738: PPUSH
1739: LD_VAR 0 9
1743: PPUSH
1744: CALL 2764 0 3
1748: DIFF
1749: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Sophia , LoadVariable ( 09c_Sophia_ID , - 1 ) , vehicles ) ;
1750: LD_ADDR_VAR 0 9
1754: PUSH
1755: LD_VAR 0 9
1759: PUSH
1760: LD_EXP 19
1764: PPUSH
1765: LD_STRING 09c_Sophia_ID
1767: PPUSH
1768: LD_INT 1
1770: NEG
1771: PPUSH
1772: CALL_OW 30
1776: PPUSH
1777: LD_VAR 0 9
1781: PPUSH
1782: CALL 2764 0 3
1786: DIFF
1787: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Markov , LoadVariable ( 09c_Markov_ID , - 1 ) , vehicles ) ;
1788: LD_ADDR_VAR 0 9
1792: PUSH
1793: LD_VAR 0 9
1797: PUSH
1798: LD_EXP 20
1802: PPUSH
1803: LD_STRING 09c_Markov_ID
1805: PPUSH
1806: LD_INT 1
1808: NEG
1809: PPUSH
1810: CALL_OW 30
1814: PPUSH
1815: LD_VAR 0 9
1819: PPUSH
1820: CALL 2764 0 3
1824: DIFF
1825: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Olaf , LoadVariable ( 09c_Olaf_ID , - 1 ) , vehicles ) ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_VAR 0 9
1835: PUSH
1836: LD_EXP 21
1840: PPUSH
1841: LD_STRING 09c_Olaf_ID
1843: PPUSH
1844: LD_INT 1
1846: NEG
1847: PPUSH
1848: CALL_OW 30
1852: PPUSH
1853: LD_VAR 0 9
1857: PPUSH
1858: CALL 2764 0 3
1862: DIFF
1863: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kurt , LoadVariable ( 09c_Kurt_ID , - 1 ) , vehicles ) ;
1864: LD_ADDR_VAR 0 9
1868: PUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_STRING 09c_Kurt_ID
1881: PPUSH
1882: LD_INT 1
1884: NEG
1885: PPUSH
1886: CALL_OW 30
1890: PPUSH
1891: LD_VAR 0 9
1895: PPUSH
1896: CALL 2764 0 3
1900: DIFF
1901: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Aviradze , LoadVariable ( 09c_Aviradze_ID , - 1 ) , vehicles ) ;
1902: LD_ADDR_VAR 0 9
1906: PUSH
1907: LD_VAR 0 9
1911: PUSH
1912: LD_EXP 23
1916: PPUSH
1917: LD_STRING 09c_Aviradze_ID
1919: PPUSH
1920: LD_INT 1
1922: NEG
1923: PPUSH
1924: CALL_OW 30
1928: PPUSH
1929: LD_VAR 0 9
1933: PPUSH
1934: CALL 2764 0 3
1938: DIFF
1939: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Schulz , LoadVariable ( 09c_Schulz_ID , 34 ) , vehicles ) ;
1940: LD_ADDR_VAR 0 9
1944: PUSH
1945: LD_VAR 0 9
1949: PUSH
1950: LD_EXP 24
1954: PPUSH
1955: LD_STRING 09c_Schulz_ID
1957: PPUSH
1958: LD_INT 34
1960: PPUSH
1961: CALL_OW 30
1965: PPUSH
1966: LD_VAR 0 9
1970: PPUSH
1971: CALL 2764 0 3
1975: DIFF
1976: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Lemmy , LoadVariable ( 09c_Lemmy_ID , 35 ) , vehicles ) ;
1977: LD_ADDR_VAR 0 9
1981: PUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_EXP 26
1991: PPUSH
1992: LD_STRING 09c_Lemmy_ID
1994: PPUSH
1995: LD_INT 35
1997: PPUSH
1998: CALL_OW 30
2002: PPUSH
2003: LD_VAR 0 9
2007: PPUSH
2008: CALL 2764 0 3
2012: DIFF
2013: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mia , LoadVariable ( 09c_Mia_ID , 36 ) , vehicles ) ;
2014: LD_ADDR_VAR 0 9
2018: PUSH
2019: LD_VAR 0 9
2023: PUSH
2024: LD_EXP 27
2028: PPUSH
2029: LD_STRING 09c_Mia_ID
2031: PPUSH
2032: LD_INT 36
2034: PPUSH
2035: CALL_OW 30
2039: PPUSH
2040: LD_VAR 0 9
2044: PPUSH
2045: CALL 2764 0 3
2049: DIFF
2050: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Nia , LoadVariable ( 09c_Nia_ID , 37 ) , vehicles ) ;
2051: LD_ADDR_VAR 0 9
2055: PUSH
2056: LD_VAR 0 9
2060: PUSH
2061: LD_EXP 28
2065: PPUSH
2066: LD_STRING 09c_Nia_ID
2068: PPUSH
2069: LD_INT 37
2071: PPUSH
2072: CALL_OW 30
2076: PPUSH
2077: LD_VAR 0 9
2081: PPUSH
2082: CALL 2764 0 3
2086: DIFF
2087: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Jenna , LoadVariable ( 09c_Jenna_ID , 38 ) , vehicles ) ;
2088: LD_ADDR_VAR 0 9
2092: PUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_EXP 29
2102: PPUSH
2103: LD_STRING 09c_Jenna_ID
2105: PPUSH
2106: LD_INT 38
2108: PPUSH
2109: CALL_OW 30
2113: PPUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: CALL 2764 0 3
2123: DIFF
2124: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Basim , LoadVariable ( 09c_Basim_ID , - 1 ) , vehicles ) ;
2125: LD_ADDR_VAR 0 9
2129: PUSH
2130: LD_VAR 0 9
2134: PUSH
2135: LD_EXP 25
2139: PPUSH
2140: LD_STRING 09c_Basim_ID
2142: PPUSH
2143: LD_INT 1
2145: NEG
2146: PPUSH
2147: CALL_OW 30
2151: PPUSH
2152: LD_VAR 0 9
2156: PPUSH
2157: CALL 2764 0 3
2161: DIFF
2162: ST_TO_ADDR
// for i := 1 to schulzSecondSquad do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_EXP 31
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2238
// vehicles := vehicles diff SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 38 + i ) , vehicles ) ;
2181: LD_ADDR_VAR 0 9
2185: PUSH
2186: LD_VAR 0 9
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_VAR 0 2
2200: ARRAY
2201: PPUSH
2202: LD_STRING 09c_random_ID_
2204: PUSH
2205: LD_VAR 0 2
2209: STR
2210: PPUSH
2211: LD_INT 38
2213: PUSH
2214: LD_VAR 0 2
2218: PLUS
2219: PPUSH
2220: CALL_OW 30
2224: PPUSH
2225: LD_VAR 0 9
2229: PPUSH
2230: CALL 2764 0 3
2234: DIFF
2235: ST_TO_ADDR
2236: GO 2178
2238: POP
2239: POP
// for i := 1 to heikeSecondSquad do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 30
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2310
// vehicles := vehicles diff SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_hrandom_ID_ & i , - 1 ) , vehicles ) ;
2258: LD_ADDR_VAR 0 9
2262: PUSH
2263: LD_VAR 0 9
2267: PUSH
2268: LD_EXP 30
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_STRING 09c_hrandom_ID_
2281: PUSH
2282: LD_VAR 0 2
2286: STR
2287: PPUSH
2288: LD_INT 1
2290: NEG
2291: PPUSH
2292: CALL_OW 30
2296: PPUSH
2297: LD_VAR 0 9
2301: PPUSH
2302: CALL 2764 0 3
2306: DIFF
2307: ST_TO_ADDR
2308: GO 2255
2310: POP
2311: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2312: LD_INT 22
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 34
2324: PUSH
2325: LD_INT 31
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: IFFALSE 2543
// begin for j := Count ( vehicles ) downto 1 do
2342: LD_ADDR_VAR 0 7
2346: PUSH
2347: DOUBLE
2348: LD_VAR 0 9
2352: PPUSH
2353: CALL 17782 0 1
2357: INC
2358: ST_TO_ADDR
2359: LD_INT 1
2361: PUSH
2362: FOR_DOWNTO
2363: IFFALSE 2541
// begin i := vehicles [ j ] ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 9
2374: PUSH
2375: LD_VAR 0 7
2379: ARRAY
2380: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2381: LD_VAR 0 2
2385: PUSH
2386: LD_INT 3
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: IFFALSE 2539
// begin uc_side := 2 ;
2395: LD_ADDR_OWVAR 20
2399: PUSH
2400: LD_INT 2
2402: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2403: LD_ADDR_OWVAR 21
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 5
2415: ARRAY
2416: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 2
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 6
2460: ARRAY
2461: PPUSH
2462: CALL 20544 0 5
// veh := CreateVehicle ;
2466: LD_ADDR_VAR 0 8
2470: PUSH
2471: CALL_OW 45
2475: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2488: LD_VAR 0 8
2492: PPUSH
2493: LD_INT 7
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2503: LD_ADDR_VAR 0 9
2507: PUSH
2508: LD_VAR 0 9
2512: PPUSH
2513: LD_VAR 0 7
2517: PPUSH
2518: CALL_OW 3
2522: ST_TO_ADDR
// Connect ( veh ) ;
2523: LD_VAR 0 8
2527: PPUSH
2528: CALL 24026 0 1
// wait ( 0 0$0.3 ) ;
2532: LD_INT 10
2534: PPUSH
2535: CALL_OW 67
// end ; end ;
2539: GO 2362
2541: POP
2542: POP
// end ; vehicles := LoadVariable ( 09_otherVehicles , [ ] ) ;
2543: LD_ADDR_VAR 0 9
2547: PUSH
2548: LD_STRING 09_otherVehicles
2550: PPUSH
2551: EMPTY
2552: PPUSH
2553: CALL_OW 30
2557: ST_TO_ADDR
// if vehicles then
2558: LD_VAR 0 9
2562: IFFALSE 2759
// begin for i in vehicles do
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_VAR 0 9
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2757
// begin uc_side := 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 5
2597: ARRAY
2598: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 2
2612: PUSH
2613: LD_INT 2
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 2
2621: PUSH
2622: LD_INT 3
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 4
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 6
2642: ARRAY
2643: PPUSH
2644: CALL 20544 0 5
// veh := CreateVehicle ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2658: LD_VAR 0 8
2662: PPUSH
2663: LD_INT 5
2665: PPUSH
2666: CALL_OW 233
// if i [ 7 ] then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 7
2677: ARRAY
2678: IFFALSE 2698
// SetMark ( veh , i [ 7 ] ) ;
2680: LD_VAR 0 8
2684: PPUSH
2685: LD_VAR 0 2
2689: PUSH
2690: LD_INT 7
2692: ARRAY
2693: PPUSH
2694: CALL_OW 242
// PlaceUnitXYD ( veh , i [ 8 ] , i [ 9 ] , i [ 10 ] , false ) ;
2698: LD_VAR 0 8
2702: PPUSH
2703: LD_VAR 0 2
2707: PUSH
2708: LD_INT 8
2710: ARRAY
2711: PPUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 9
2719: ARRAY
2720: PPUSH
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 10
2728: ARRAY
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: CALL 55874 0 5
// SetFuel ( veh , i [ 6 ] ) ;
2737: LD_VAR 0 8
2741: PPUSH
2742: LD_VAR 0 2
2746: PUSH
2747: LD_INT 6
2749: ARRAY
2750: PPUSH
2751: CALL_OW 240
// end ;
2755: GO 2574
2757: POP
2758: POP
// end ; end ;
2759: LD_VAR 0 1
2763: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
// for i in vehicles do
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3018
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 8
2789: ARRAY
2790: PUSH
2791: LD_VAR 0 2
2795: EQUAL
2796: IFFALSE 2812
2798: PUSH
2799: LD_VAR 0 5
2803: PUSH
2804: LD_INT 3
2806: ARRAY
2807: PUSH
2808: LD_INT 1
2810: EQUAL
2811: AND
2812: IFFALSE 3016
// begin result := i ;
2814: LD_ADDR_VAR 0 4
2818: PUSH
2819: LD_VAR 0 5
2823: ST_TO_ADDR
// uc_side := 2 ;
2824: LD_ADDR_OWVAR 20
2828: PUSH
2829: LD_INT 2
2831: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2832: LD_ADDR_OWVAR 21
2836: PUSH
2837: LD_VAR 0 5
2841: PUSH
2842: LD_INT 5
2844: ARRAY
2845: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2846: LD_VAR 0 5
2850: PUSH
2851: LD_INT 1
2853: ARRAY
2854: PPUSH
2855: LD_VAR 0 5
2859: PUSH
2860: LD_INT 2
2862: ARRAY
2863: PPUSH
2864: LD_VAR 0 5
2868: PUSH
2869: LD_INT 3
2871: ARRAY
2872: PPUSH
2873: LD_VAR 0 5
2877: PUSH
2878: LD_INT 4
2880: ARRAY
2881: PPUSH
2882: LD_VAR 0 5
2886: PUSH
2887: LD_INT 6
2889: ARRAY
2890: PPUSH
2891: CALL 20544 0 5
// veh := CreateVehicle ;
2895: LD_ADDR_VAR 0 6
2899: PUSH
2900: CALL_OW 45
2904: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2905: LD_VAR 0 6
2909: PPUSH
2910: LD_INT 5
2912: PPUSH
2913: CALL_OW 233
// if i [ 7 ] < 0 then
2917: LD_VAR 0 5
2921: PUSH
2922: LD_INT 7
2924: ARRAY
2925: PUSH
2926: LD_INT 0
2928: LESS
2929: IFFALSE 2949
// SetMark ( veh , i [ 7 ] ) ;
2931: LD_VAR 0 6
2935: PPUSH
2936: LD_VAR 0 5
2940: PUSH
2941: LD_INT 7
2943: ARRAY
2944: PPUSH
2945: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2949: LD_VAR 0 6
2953: PPUSH
2954: LD_INT 7
2956: PPUSH
2957: LD_INT 0
2959: PPUSH
2960: CALL 52607 0 3
2964: NOT
2965: IFFALSE 2998
// begin SetDir ( unit , 5 ) ;
2967: LD_VAR 0 1
2971: PPUSH
2972: LD_INT 5
2974: PPUSH
2975: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2979: LD_VAR 0 1
2983: PPUSH
2984: LD_INT 8
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 49
// exit ;
2994: POP
2995: POP
2996: GO 3047
// end ; PlaceHumanInUnit ( unit , veh ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_VAR 0 6
3007: PPUSH
3008: CALL_OW 52
// exit ;
3012: POP
3013: POP
3014: GO 3047
// end ;
3016: GO 2779
3018: POP
3019: POP
// SetDir ( unit , 5 ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: LD_INT 5
3027: PPUSH
3028: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
3032: LD_VAR 0 1
3036: PPUSH
3037: LD_INT 8
3039: PPUSH
3040: LD_INT 0
3042: PPUSH
3043: CALL_OW 49
// end ; end_of_file
3047: LD_VAR 0 4
3051: RET
// export function PrepareRussian ; begin
3052: LD_INT 0
3054: PPUSH
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
3055: LD_INT 48
3057: PPUSH
3058: LD_INT 3
3060: PPUSH
3061: LD_INT 2
3063: PPUSH
3064: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
3068: LD_INT 49
3070: PPUSH
3071: LD_INT 3
3073: PPUSH
3074: LD_INT 2
3076: PPUSH
3077: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
3081: LD_INT 50
3083: PPUSH
3084: LD_INT 3
3086: PPUSH
3087: LD_INT 2
3089: PPUSH
3090: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
3094: LD_INT 51
3096: PPUSH
3097: LD_INT 3
3099: PPUSH
3100: LD_INT 2
3102: PPUSH
3103: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3107: LD_INT 57
3109: PPUSH
3110: LD_INT 3
3112: PPUSH
3113: LD_INT 2
3115: PPUSH
3116: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
3120: LD_INT 48
3122: PPUSH
3123: LD_INT 6
3125: PPUSH
3126: LD_INT 2
3128: PPUSH
3129: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
3133: LD_INT 49
3135: PPUSH
3136: LD_INT 6
3138: PPUSH
3139: LD_INT 2
3141: PPUSH
3142: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
3146: LD_INT 50
3148: PPUSH
3149: LD_INT 6
3151: PPUSH
3152: LD_INT 2
3154: PPUSH
3155: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
3159: LD_INT 51
3161: PPUSH
3162: LD_INT 6
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3172: LD_INT 57
3174: PPUSH
3175: LD_INT 6
3177: PPUSH
3178: LD_INT 2
3180: PPUSH
3181: CALL_OW 322
// if Difficulty >= 2 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 2
3192: GREATEREQUAL
3193: IFFALSE 3273
// begin SetTech ( tech_Weap2 , 3 , state_researched ) ;
3195: LD_INT 52
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3208: LD_INT 58
3210: PPUSH
3211: LD_INT 3
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3221: LD_INT 63
3223: PPUSH
3224: LD_INT 3
3226: PPUSH
3227: LD_INT 2
3229: PPUSH
3230: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3234: LD_INT 52
3236: PPUSH
3237: LD_INT 6
3239: PPUSH
3240: LD_INT 2
3242: PPUSH
3243: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3247: LD_INT 58
3249: PPUSH
3250: LD_INT 6
3252: PPUSH
3253: LD_INT 2
3255: PPUSH
3256: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
3260: LD_INT 63
3262: PPUSH
3263: LD_INT 6
3265: PPUSH
3266: LD_INT 2
3268: PPUSH
3269: CALL_OW 322
// end ; if Difficulty > 2 then
3273: LD_OWVAR 67
3277: PUSH
3278: LD_INT 2
3280: GREATER
3281: IFFALSE 3361
// begin SetTech ( tech_Weap3 , 3 , state_researched ) ;
3283: LD_INT 53
3285: PPUSH
3286: LD_INT 3
3288: PPUSH
3289: LD_INT 2
3291: PPUSH
3292: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3296: LD_INT 59
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 2
3304: PPUSH
3305: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3309: LD_INT 64
3311: PPUSH
3312: LD_INT 3
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
3322: LD_INT 53
3324: PPUSH
3325: LD_INT 6
3327: PPUSH
3328: LD_INT 2
3330: PPUSH
3331: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
3335: LD_INT 59
3337: PPUSH
3338: LD_INT 6
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
3348: LD_INT 64
3350: PPUSH
3351: LD_INT 6
3353: PPUSH
3354: LD_INT 2
3356: PPUSH
3357: CALL_OW 322
// end ; end ;
3361: LD_VAR 0 1
3365: RET
// export ruForces , ruConstructList , ruTanks ; export function PrepareExtraRussianBase ; var i , j , tmp , un , side , skill , b ; begin
3366: LD_INT 0
3368: PPUSH
3369: PPUSH
3370: PPUSH
3371: PPUSH
3372: PPUSH
3373: PPUSH
3374: PPUSH
3375: PPUSH
// side := 6 ;
3376: LD_ADDR_VAR 0 6
3380: PUSH
3381: LD_INT 6
3383: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
3384: LD_ADDR_VAR 0 7
3388: PUSH
3389: LD_INT 7
3391: PUSH
3392: LD_INT 8
3394: PUSH
3395: LD_INT 9
3397: PUSH
3398: LD_INT 10
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: LD_OWVAR 67
3411: ARRAY
3412: ST_TO_ADDR
// ruForces := [ ] ;
3413: LD_ADDR_EXP 34
3417: PUSH
3418: EMPTY
3419: ST_TO_ADDR
// ruConstructList := [ ] ;
3420: LD_ADDR_EXP 35
3424: PUSH
3425: EMPTY
3426: ST_TO_ADDR
// ruTanks := [ ] ;
3427: LD_ADDR_EXP 36
3431: PUSH
3432: EMPTY
3433: ST_TO_ADDR
// tmp := [ [ b_warehouse , 107 , 149 , 4 ] , [ b_oil_mine , 115 , 150 , 4 ] , [ b_factory , 101 , 160 , 0 ] , [ b_ext_computer , 97 , 156 , 2 ] , [ b_ext_siberium , 98 , 160 , 1 ] , [ b_ext_noncombat , 101 , 164 , 0 ] , [ b_ext_gun , 104 , 163 , 5 ] , [ b_ext_rocket , 105 , 160 , 4 ] , [ b_siberite_mine , 128 , 132 , 0 ] , [ b_lab_full , 94 , 142 , 1 , b_lab_weapon , b_lab_spacetime ] , [ b_oil_power , 93 , 137 , 0 ] , [ b_oil_power , 111 , 157 , 0 ] , [ b_oil_power , 109 , 158 , 0 ] , [ b_oil_power , 121 , 150 , 0 ] , [ b_siberite_power , 118 , 151 , 0 ] , [ b_barracks , 97 , 133 , 2 ] , [ b_barracks , 117 , 143 , 4 ] , [ b_turret , 100 , 132 , 2 ] , [ b_turret , 130 , 159 , 4 ] , [ b_turret , 131 , 155 , 4 ] , [ b_turret , 90 , 133 , 2 ] , [ b_turret , 70 , 135 , 3 ] ] ;
3434: LD_ADDR_VAR 0 4
3438: PUSH
3439: LD_INT 1
3441: PUSH
3442: LD_INT 107
3444: PUSH
3445: LD_INT 149
3447: PUSH
3448: LD_INT 4
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 115
3462: PUSH
3463: LD_INT 150
3465: PUSH
3466: LD_INT 4
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: LD_INT 101
3480: PUSH
3481: LD_INT 160
3483: PUSH
3484: LD_INT 0
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 24
3495: PUSH
3496: LD_INT 97
3498: PUSH
3499: LD_INT 156
3501: PUSH
3502: LD_INT 2
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 21
3513: PUSH
3514: LD_INT 98
3516: PUSH
3517: LD_INT 160
3519: PUSH
3520: LD_INT 1
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 19
3531: PUSH
3532: LD_INT 101
3534: PUSH
3535: LD_INT 164
3537: PUSH
3538: LD_INT 0
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 17
3549: PUSH
3550: LD_INT 104
3552: PUSH
3553: LD_INT 163
3555: PUSH
3556: LD_INT 5
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_INT 18
3567: PUSH
3568: LD_INT 105
3570: PUSH
3571: LD_INT 160
3573: PUSH
3574: LD_INT 4
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 30
3585: PUSH
3586: LD_INT 128
3588: PUSH
3589: LD_INT 132
3591: PUSH
3592: LD_INT 0
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 8
3603: PUSH
3604: LD_INT 94
3606: PUSH
3607: LD_INT 142
3609: PUSH
3610: LD_INT 1
3612: PUSH
3613: LD_INT 10
3615: PUSH
3616: LD_INT 14
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: PUSH
3627: LD_INT 26
3629: PUSH
3630: LD_INT 93
3632: PUSH
3633: LD_INT 137
3635: PUSH
3636: LD_INT 0
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 26
3647: PUSH
3648: LD_INT 111
3650: PUSH
3651: LD_INT 157
3653: PUSH
3654: LD_INT 0
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 26
3665: PUSH
3666: LD_INT 109
3668: PUSH
3669: LD_INT 158
3671: PUSH
3672: LD_INT 0
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: LD_INT 26
3683: PUSH
3684: LD_INT 121
3686: PUSH
3687: LD_INT 150
3689: PUSH
3690: LD_INT 0
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 28
3701: PUSH
3702: LD_INT 118
3704: PUSH
3705: LD_INT 151
3707: PUSH
3708: LD_INT 0
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 5
3719: PUSH
3720: LD_INT 97
3722: PUSH
3723: LD_INT 133
3725: PUSH
3726: LD_INT 2
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: PUSH
3735: LD_INT 5
3737: PUSH
3738: LD_INT 117
3740: PUSH
3741: LD_INT 143
3743: PUSH
3744: LD_INT 4
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 33
3755: PUSH
3756: LD_INT 100
3758: PUSH
3759: LD_INT 132
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 33
3773: PUSH
3774: LD_INT 130
3776: PUSH
3777: LD_INT 159
3779: PUSH
3780: LD_INT 4
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 33
3791: PUSH
3792: LD_INT 131
3794: PUSH
3795: LD_INT 155
3797: PUSH
3798: LD_INT 4
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: PUSH
3807: LD_INT 33
3809: PUSH
3810: LD_INT 90
3812: PUSH
3813: LD_INT 133
3815: PUSH
3816: LD_INT 2
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 33
3827: PUSH
3828: LD_INT 70
3830: PUSH
3831: LD_INT 135
3833: PUSH
3834: LD_INT 3
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: ST_TO_ADDR
// uc_side := side ;
3867: LD_ADDR_OWVAR 20
3871: PUSH
3872: LD_VAR 0 6
3876: ST_TO_ADDR
// uc_nation := nation_russian ;
3877: LD_ADDR_OWVAR 21
3881: PUSH
3882: LD_INT 3
3884: ST_TO_ADDR
// for i in tmp do
3885: LD_ADDR_VAR 0 2
3889: PUSH
3890: LD_VAR 0 4
3894: PUSH
3895: FOR_IN
3896: IFFALSE 4034
// begin InitBc ;
3898: CALL_OW 21
// bc_type := i [ 1 ] ;
3902: LD_ADDR_OWVAR 42
3906: PUSH
3907: LD_VAR 0 2
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: ST_TO_ADDR
// bc_level := 6 ;
3916: LD_ADDR_OWVAR 43
3920: PUSH
3921: LD_INT 6
3923: ST_TO_ADDR
// if i > 4 then
3924: LD_VAR 0 2
3928: PUSH
3929: LD_INT 4
3931: GREATER
3932: IFFALSE 3962
// begin bc_kind1 := i [ 5 ] ;
3934: LD_ADDR_OWVAR 44
3938: PUSH
3939: LD_VAR 0 2
3943: PUSH
3944: LD_INT 5
3946: ARRAY
3947: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
3948: LD_ADDR_OWVAR 45
3952: PUSH
3953: LD_VAR 0 2
3957: PUSH
3958: LD_INT 6
3960: ARRAY
3961: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3962: LD_ADDR_VAR 0 8
3966: PUSH
3967: LD_VAR 0 2
3971: PUSH
3972: LD_INT 2
3974: ARRAY
3975: PPUSH
3976: LD_VAR 0 2
3980: PUSH
3981: LD_INT 3
3983: ARRAY
3984: PPUSH
3985: LD_VAR 0 2
3989: PUSH
3990: LD_INT 4
3992: ARRAY
3993: PPUSH
3994: CALL_OW 47
3998: ST_TO_ADDR
// if i [ 1 ] in [ b_bunker , b_turret ] then
3999: LD_VAR 0 2
4003: PUSH
4004: LD_INT 1
4006: ARRAY
4007: PUSH
4008: LD_INT 32
4010: PUSH
4011: LD_INT 33
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: IN
4018: IFFALSE 4032
// PlaceWeaponTurret ( b , ru_rocket_launcher ) ;
4020: LD_VAR 0 8
4024: PPUSH
4025: LD_INT 45
4027: PPUSH
4028: CALL_OW 431
// end ;
4032: GO 3895
4034: POP
4035: POP
// InitHC_All ( ) ;
4036: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
4040: LD_ADDR_VAR 0 4
4044: PUSH
4045: LD_INT 22
4047: PUSH
4048: LD_VAR 0 6
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 30
4059: PUSH
4060: LD_INT 5
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: ST_TO_ADDR
// for i in tmp do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: LD_VAR 0 4
4085: PUSH
4086: FOR_IN
4087: IFFALSE 4214
// begin for j := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4089: LD_ADDR_VAR 0 3
4093: PUSH
4094: DOUBLE
4095: LD_INT 1
4097: DEC
4098: ST_TO_ADDR
4099: LD_INT 2
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: LD_INT 4
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: PUSH
4117: LD_OWVAR 67
4121: ARRAY
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4210
// begin PrepareSoldier ( false , skill ) ;
4126: LD_INT 0
4128: PPUSH
4129: LD_VAR 0 7
4133: PPUSH
4134: CALL_OW 381
// un := CreateHuman ;
4138: LD_ADDR_VAR 0 5
4142: PUSH
4143: CALL_OW 44
4147: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4148: LD_ADDR_EXP 34
4152: PUSH
4153: LD_EXP 34
4157: PPUSH
4158: LD_VAR 0 5
4162: PPUSH
4163: CALL 53714 0 2
4167: ST_TO_ADDR
// if j mod 2 = 0 then
4168: LD_VAR 0 3
4172: PUSH
4173: LD_INT 2
4175: MOD
4176: PUSH
4177: LD_INT 0
4179: EQUAL
4180: IFFALSE 4194
// SetClass ( un , class_bazooker ) ;
4182: LD_VAR 0 5
4186: PPUSH
4187: LD_INT 9
4189: PPUSH
4190: CALL_OW 336
// PlaceHumanInUnit ( un , i ) ;
4194: LD_VAR 0 5
4198: PPUSH
4199: LD_VAR 0 2
4203: PPUSH
4204: CALL_OW 52
// end ;
4208: GO 4123
4210: POP
4211: POP
// end ;
4212: GO 4086
4214: POP
4215: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
4216: LD_ADDR_VAR 0 4
4220: PUSH
4221: LD_INT 22
4223: PUSH
4224: LD_VAR 0 6
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 30
4235: PUSH
4236: LD_INT 1
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PPUSH
4247: CALL_OW 69
4251: ST_TO_ADDR
// for i in tmp do
4252: LD_ADDR_VAR 0 2
4256: PUSH
4257: LD_VAR 0 4
4261: PUSH
4262: FOR_IN
4263: IFFALSE 4487
// begin for j := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
4265: LD_ADDR_VAR 0 3
4269: PUSH
4270: DOUBLE
4271: LD_INT 1
4273: DEC
4274: ST_TO_ADDR
4275: LD_INT 3
4277: PUSH
4278: LD_INT 3
4280: PUSH
4281: LD_INT 4
4283: PUSH
4284: LD_INT 4
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: PUSH
4293: LD_OWVAR 67
4297: ARRAY
4298: PUSH
4299: FOR_TO
4300: IFFALSE 4360
// begin PrepareEngineer ( false , skill ) ;
4302: LD_INT 0
4304: PPUSH
4305: LD_VAR 0 7
4309: PPUSH
4310: CALL_OW 382
// un := CreateHuman ;
4314: LD_ADDR_VAR 0 5
4318: PUSH
4319: CALL_OW 44
4323: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4324: LD_ADDR_EXP 34
4328: PUSH
4329: LD_EXP 34
4333: PPUSH
4334: LD_VAR 0 5
4338: PPUSH
4339: CALL 53714 0 2
4343: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4344: LD_VAR 0 5
4348: PPUSH
4349: LD_VAR 0 2
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4299
4360: POP
4361: POP
// SetResourceType ( GetBase ( i ) , mat_cans , [ 550 , 600 , 780 , 820 ] [ Difficulty ] ) ;
4362: LD_VAR 0 2
4366: PPUSH
4367: CALL_OW 274
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: LD_INT 550
4377: PUSH
4378: LD_INT 600
4380: PUSH
4381: LD_INT 780
4383: PUSH
4384: LD_INT 820
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: PUSH
4393: LD_OWVAR 67
4397: ARRAY
4398: PPUSH
4399: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , [ 160 , 160 , 210 , 240 ] [ Difficulty ] ) ;
4403: LD_VAR 0 2
4407: PPUSH
4408: CALL_OW 274
4412: PPUSH
4413: LD_INT 2
4415: PPUSH
4416: LD_INT 160
4418: PUSH
4419: LD_INT 160
4421: PUSH
4422: LD_INT 210
4424: PUSH
4425: LD_INT 240
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: PUSH
4434: LD_OWVAR 67
4438: ARRAY
4439: PPUSH
4440: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , [ 60 , 60 , 70 , 80 ] [ Difficulty ] ) ;
4444: LD_VAR 0 2
4448: PPUSH
4449: CALL_OW 274
4453: PPUSH
4454: LD_INT 3
4456: PPUSH
4457: LD_INT 60
4459: PUSH
4460: LD_INT 60
4462: PUSH
4463: LD_INT 70
4465: PUSH
4466: LD_INT 80
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: PUSH
4475: LD_OWVAR 67
4479: ARRAY
4480: PPUSH
4481: CALL_OW 277
// end ;
4485: GO 4262
4487: POP
4488: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
4489: LD_ADDR_VAR 0 4
4493: PUSH
4494: LD_INT 22
4496: PUSH
4497: LD_VAR 0 6
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 30
4508: PUSH
4509: LD_INT 3
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: PPUSH
4520: CALL_OW 69
4524: ST_TO_ADDR
// for i in tmp do
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_VAR 0 4
4534: PUSH
4535: FOR_IN
4536: IFFALSE 4631
// begin for j := 1 to 6 do
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: DOUBLE
4544: LD_INT 1
4546: DEC
4547: ST_TO_ADDR
4548: LD_INT 6
4550: PUSH
4551: FOR_TO
4552: IFFALSE 4627
// begin PrepareMechanic ( false , skill ) ;
4554: LD_INT 0
4556: PPUSH
4557: LD_VAR 0 7
4561: PPUSH
4562: CALL_OW 383
// hc_attr := [ 12 , 12 ] ;
4566: LD_ADDR_OWVAR 29
4570: PUSH
4571: LD_INT 12
4573: PUSH
4574: LD_INT 12
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: ST_TO_ADDR
// un := CreateHuman ;
4581: LD_ADDR_VAR 0 5
4585: PUSH
4586: CALL_OW 44
4590: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4591: LD_ADDR_EXP 34
4595: PUSH
4596: LD_EXP 34
4600: PPUSH
4601: LD_VAR 0 5
4605: PPUSH
4606: CALL 53714 0 2
4610: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4611: LD_VAR 0 5
4615: PPUSH
4616: LD_VAR 0 2
4620: PPUSH
4621: CALL_OW 52
// end ;
4625: GO 4551
4627: POP
4628: POP
// end ;
4629: GO 4535
4631: POP
4632: POP
// InitHC_All ( ) ;
4633: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
4637: LD_ADDR_VAR 0 4
4641: PUSH
4642: LD_INT 22
4644: PUSH
4645: LD_VAR 0 6
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 30
4656: PUSH
4657: LD_INT 8
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 69
4672: ST_TO_ADDR
// for i in tmp do
4673: LD_ADDR_VAR 0 2
4677: PUSH
4678: LD_VAR 0 4
4682: PUSH
4683: FOR_IN
4684: IFFALSE 4764
// begin for j := 1 to 2 do
4686: LD_ADDR_VAR 0 3
4690: PUSH
4691: DOUBLE
4692: LD_INT 1
4694: DEC
4695: ST_TO_ADDR
4696: LD_INT 2
4698: PUSH
4699: FOR_TO
4700: IFFALSE 4760
// begin PrepareScientist ( false , skill ) ;
4702: LD_INT 0
4704: PPUSH
4705: LD_VAR 0 7
4709: PPUSH
4710: CALL_OW 384
// un := CreateHuman ;
4714: LD_ADDR_VAR 0 5
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4724: LD_ADDR_EXP 34
4728: PUSH
4729: LD_EXP 34
4733: PPUSH
4734: LD_VAR 0 5
4738: PPUSH
4739: CALL 53714 0 2
4743: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4744: LD_VAR 0 5
4748: PPUSH
4749: LD_VAR 0 2
4753: PPUSH
4754: CALL_OW 52
// end ;
4758: GO 4699
4760: POP
4761: POP
// end ;
4762: GO 4683
4764: POP
4765: POP
// end ;
4766: LD_VAR 0 1
4770: RET
// function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
4771: LD_INT 0
4773: PPUSH
4774: PPUSH
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
4781: PPUSH
4782: PPUSH
// result := [ ] ;
4783: LD_ADDR_VAR 0 3
4787: PUSH
4788: EMPTY
4789: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
4790: LD_ADDR_VAR 0 8
4794: PUSH
4795: LD_INT 7
4797: PUSH
4798: LD_INT 8
4800: PUSH
4801: LD_INT 9
4803: PUSH
4804: LD_INT 10
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: PUSH
4813: LD_OWVAR 67
4817: ARRAY
4818: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
4819: LD_ADDR_VAR 0 9
4823: PUSH
4824: LD_INT 15
4826: PUSH
4827: LD_INT 17
4829: PUSH
4830: LD_INT 19
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: LIST
4837: PUSH
4838: LD_VAR 0 1
4842: ARRAY
4843: ST_TO_ADDR
// parking := [ ruGatPoint1Area , ruGatPoint2Area , ruGatPoint3Area ] [ spot ] ;
4844: LD_ADDR_VAR 0 10
4848: PUSH
4849: LD_INT 16
4851: PUSH
4852: LD_INT 18
4854: PUSH
4855: LD_INT 20
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_VAR 0 1
4867: ARRAY
4868: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
4869: LD_ADDR_VAR 0 11
4873: PUSH
4874: LD_INT 5
4876: PUSH
4877: LD_INT 0
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 1
4892: ARRAY
4893: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) then
4894: LD_VAR 0 9
4898: PPUSH
4899: LD_INT 2
4901: PUSH
4902: LD_INT 22
4904: PUSH
4905: LD_INT 0
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: LD_INT 22
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: PPUSH
4927: CALL_OW 70
4931: IFFALSE 4992
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) do
4933: LD_ADDR_VAR 0 4
4937: PUSH
4938: LD_VAR 0 9
4942: PPUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 22
4948: PUSH
4949: LD_INT 0
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 22
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: LIST
4970: PPUSH
4971: CALL_OW 70
4975: PUSH
4976: FOR_IN
4977: IFFALSE 4990
// RemoveUnit ( i ) ;
4979: LD_VAR 0 4
4983: PPUSH
4984: CALL_OW 64
4988: GO 4976
4990: POP
4991: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
4992: LD_VAR 0 9
4996: PPUSH
4997: LD_INT 3
4999: PUSH
5000: LD_INT 21
5002: PUSH
5003: LD_INT 1
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 22
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 70
5032: IFFALSE 5096
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
5034: LD_ADDR_VAR 0 4
5038: PUSH
5039: LD_VAR 0 9
5043: PPUSH
5044: LD_INT 3
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 1
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 70
5079: PUSH
5080: FOR_IN
5081: IFFALSE 5094
// KillUnit ( i ) ;
5083: LD_VAR 0 4
5087: PPUSH
5088: CALL_OW 66
5092: GO 5080
5094: POP
5095: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
5096: LD_VAR 0 9
5100: PPUSH
5101: LD_INT 21
5103: PUSH
5104: LD_INT 1
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PUSH
5111: LD_INT 22
5113: PUSH
5114: LD_INT 2
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PPUSH
5125: CALL_OW 70
5129: IFFALSE 5192
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
5131: LD_ADDR_VAR 0 4
5135: PUSH
5136: LD_VAR 0 9
5140: PPUSH
5141: LD_INT 21
5143: PUSH
5144: LD_INT 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 22
5153: PUSH
5154: LD_INT 2
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PPUSH
5165: CALL_OW 70
5169: PUSH
5170: FOR_IN
5171: IFFALSE 5190
// ComMoveXY ( i , 91 , 56 ) ;
5173: LD_VAR 0 4
5177: PPUSH
5178: LD_INT 91
5180: PPUSH
5181: LD_INT 56
5183: PPUSH
5184: CALL_OW 111
5188: GO 5170
5190: POP
5191: POP
// repeat wait ( 0 0$1 ) ;
5192: LD_INT 35
5194: PPUSH
5195: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5199: LD_VAR 0 9
5203: PPUSH
5204: LD_INT 50
5206: PUSH
5207: EMPTY
5208: LIST
5209: PPUSH
5210: CALL_OW 70
5214: NOT
5215: IFFALSE 5192
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] + strength do
5217: LD_ADDR_VAR 0 4
5221: PUSH
5222: DOUBLE
5223: LD_INT 1
5225: DEC
5226: ST_TO_ADDR
5227: LD_INT 4
5229: PUSH
5230: LD_INT 5
5232: PUSH
5233: LD_INT 5
5235: PUSH
5236: LD_INT 6
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: PUSH
5245: LD_OWVAR 67
5249: ARRAY
5250: PUSH
5251: LD_VAR 0 2
5255: PLUS
5256: PUSH
5257: FOR_TO
5258: IFFALSE 5579
// begin uc_side := 3 ;
5260: LD_ADDR_OWVAR 20
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_nation := nation_russian ;
5268: LD_ADDR_OWVAR 21
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
5276: LD_ADDR_VAR 0 12
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: LD_INT 3
5286: PUSH
5287: LD_INT 3
5289: PUSH
5290: LD_INT 3
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 1
5301: PPUSH
5302: LD_INT 4
5304: PPUSH
5305: CALL_OW 12
5309: ARRAY
5310: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
5311: LD_INT 22
5313: PUSH
5314: LD_INT 24
5316: PUSH
5317: LD_INT 23
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: PUSH
5325: LD_VAR 0 4
5329: PUSH
5330: LD_INT 3
5332: MOD
5333: PUSH
5334: LD_INT 1
5336: PLUS
5337: ARRAY
5338: PPUSH
5339: LD_INT 3
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 1
5351: PPUSH
5352: LD_INT 2
5354: PPUSH
5355: CALL_OW 12
5359: ARRAY
5360: PPUSH
5361: LD_VAR 0 12
5365: PPUSH
5366: LD_INT 45
5368: PUSH
5369: LD_INT 46
5371: PUSH
5372: LD_INT 43
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: LIST
5379: PUSH
5380: LD_VAR 0 4
5384: PUSH
5385: LD_INT 3
5387: MOD
5388: PUSH
5389: LD_INT 1
5391: PLUS
5392: ARRAY
5393: PPUSH
5394: LD_INT 100
5396: PPUSH
5397: CALL 20544 0 5
// veh := CreateVehicle ;
5401: LD_ADDR_VAR 0 7
5405: PUSH
5406: CALL_OW 45
5410: ST_TO_ADDR
// SetDir ( veh , dir ) ;
5411: LD_VAR 0 7
5415: PPUSH
5416: LD_VAR 0 11
5420: PPUSH
5421: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
5425: LD_VAR 0 7
5429: PPUSH
5430: LD_VAR 0 9
5434: PPUSH
5435: LD_INT 0
5437: PPUSH
5438: CALL_OW 49
// if control = control_manual then
5442: LD_VAR 0 12
5446: PUSH
5447: LD_INT 1
5449: EQUAL
5450: IFFALSE 5518
// begin uc_side := 3 ;
5452: LD_ADDR_OWVAR 20
5456: PUSH
5457: LD_INT 3
5459: ST_TO_ADDR
// uc_nation := nation_russian ;
5460: LD_ADDR_OWVAR 21
5464: PUSH
5465: LD_INT 3
5467: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5468: LD_INT 0
5470: PPUSH
5471: LD_VAR 0 8
5475: PPUSH
5476: CALL_OW 383
// un := CreateHuman ;
5480: LD_ADDR_VAR 0 6
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5490: LD_VAR 0 6
5494: PPUSH
5495: LD_VAR 0 7
5499: PPUSH
5500: CALL_OW 52
// SetTag ( un , spot ) ;
5504: LD_VAR 0 6
5508: PPUSH
5509: LD_VAR 0 1
5513: PPUSH
5514: CALL_OW 109
// end ; repeat ComMoveToArea ( veh , parking ) ;
5518: LD_VAR 0 7
5522: PPUSH
5523: LD_VAR 0 10
5527: PPUSH
5528: CALL_OW 113
// wait ( 0 0$3 ) ;
5532: LD_INT 105
5534: PPUSH
5535: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5539: LD_VAR 0 9
5543: PPUSH
5544: LD_INT 50
5546: PUSH
5547: EMPTY
5548: LIST
5549: PPUSH
5550: CALL_OW 70
5554: NOT
5555: IFFALSE 5518
// result := Join ( result , veh ) ;
5557: LD_ADDR_VAR 0 3
5561: PUSH
5562: LD_VAR 0 3
5566: PPUSH
5567: LD_VAR 0 7
5571: PPUSH
5572: CALL 53714 0 2
5576: ST_TO_ADDR
// end ;
5577: GO 5257
5579: POP
5580: POP
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
5581: LD_ADDR_VAR 0 4
5585: PUSH
5586: DOUBLE
5587: LD_INT 1
5589: DEC
5590: ST_TO_ADDR
5591: LD_INT 2
5593: PUSH
5594: LD_INT 2
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: LD_INT 3
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: PUSH
5609: LD_OWVAR 67
5613: ARRAY
5614: PUSH
5615: FOR_TO
5616: IFFALSE 5786
// begin uc_side := 3 ;
5618: LD_ADDR_OWVAR 20
5622: PUSH
5623: LD_INT 3
5625: ST_TO_ADDR
// uc_nation := nation_russian ;
5626: LD_ADDR_OWVAR 21
5630: PUSH
5631: LD_INT 3
5633: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5634: LD_INT 0
5636: PPUSH
5637: LD_VAR 0 8
5641: PPUSH
5642: CALL_OW 381
// un := CreateHuman ;
5646: LD_ADDR_VAR 0 6
5650: PUSH
5651: CALL_OW 44
5655: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5656: LD_INT 30
5658: PUSH
5659: LD_INT 40
5661: PUSH
5662: LD_INT 50
5664: PUSH
5665: LD_INT 50
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: PUSH
5674: LD_OWVAR 67
5678: ARRAY
5679: PPUSH
5680: CALL_OW 13
5684: IFFALSE 5698
// SetClass ( un , class_bazooker ) ;
5686: LD_VAR 0 6
5690: PPUSH
5691: LD_INT 9
5693: PPUSH
5694: CALL_OW 336
// SetDir ( un , dir ) ;
5698: LD_VAR 0 6
5702: PPUSH
5703: LD_VAR 0 11
5707: PPUSH
5708: CALL_OW 233
// SetTag ( un , spot ) ;
5712: LD_VAR 0 6
5716: PPUSH
5717: LD_VAR 0 1
5721: PPUSH
5722: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
5726: LD_VAR 0 6
5730: PPUSH
5731: LD_VAR 0 9
5735: PPUSH
5736: LD_INT 0
5738: PPUSH
5739: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
5743: LD_VAR 0 6
5747: PPUSH
5748: LD_VAR 0 10
5752: PPUSH
5753: CALL_OW 113
// wait ( 0 0$1 ) ;
5757: LD_INT 35
5759: PPUSH
5760: CALL_OW 67
// result := Join ( result , un ) ;
5764: LD_ADDR_VAR 0 3
5768: PUSH
5769: LD_VAR 0 3
5773: PPUSH
5774: LD_VAR 0 6
5778: PPUSH
5779: CALL 53714 0 2
5783: ST_TO_ADDR
// end ;
5784: GO 5615
5786: POP
5787: POP
// end ;
5788: LD_VAR 0 3
5792: RET
// function PrepareRussianExtraInfantry ; var i , un ; begin
5793: LD_INT 0
5795: PPUSH
5796: PPUSH
5797: PPUSH
// result := [ ] ;
5798: LD_ADDR_VAR 0 1
5802: PUSH
5803: EMPTY
5804: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty + 1 ] do
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: DOUBLE
5811: LD_INT 1
5813: DEC
5814: ST_TO_ADDR
5815: LD_INT 3
5817: PUSH
5818: LD_INT 3
5820: PUSH
5821: LD_INT 4
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: LD_OWVAR 67
5833: PUSH
5834: LD_INT 1
5836: PLUS
5837: ARRAY
5838: PUSH
5839: FOR_TO
5840: IFFALSE 5978
// begin uc_side := 3 ;
5842: LD_ADDR_OWVAR 20
5846: PUSH
5847: LD_INT 3
5849: ST_TO_ADDR
// uc_nation := nation_russian ;
5850: LD_ADDR_OWVAR 21
5854: PUSH
5855: LD_INT 3
5857: ST_TO_ADDR
// PrepareSoldier ( false , [ 7 , 8 , 9 ] [ Difficulty + 1 ] ) ;
5858: LD_INT 0
5860: PPUSH
5861: LD_INT 7
5863: PUSH
5864: LD_INT 8
5866: PUSH
5867: LD_INT 9
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: LIST
5874: PUSH
5875: LD_OWVAR 67
5879: PUSH
5880: LD_INT 1
5882: PLUS
5883: ARRAY
5884: PPUSH
5885: CALL_OW 381
// un := CreateHuman ;
5889: LD_ADDR_VAR 0 3
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5899: LD_INT 30
5901: PUSH
5902: LD_INT 40
5904: PUSH
5905: LD_INT 50
5907: PUSH
5908: LD_INT 50
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: LD_OWVAR 67
5921: ARRAY
5922: PPUSH
5923: CALL_OW 13
5927: IFFALSE 5941
// SetClass ( un , class_bazooker ) ;
5929: LD_VAR 0 3
5933: PPUSH
5934: LD_INT 9
5936: PPUSH
5937: CALL_OW 336
// PlaceUnitArea ( un , extraSpawnAttackArea , false ) ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 25
5948: PPUSH
5949: LD_INT 0
5951: PPUSH
5952: CALL_OW 49
// result := Join ( result , un ) ;
5956: LD_ADDR_VAR 0 1
5960: PUSH
5961: LD_VAR 0 1
5965: PPUSH
5966: LD_VAR 0 3
5970: PPUSH
5971: CALL 53714 0 2
5975: ST_TO_ADDR
// end ;
5976: GO 5839
5978: POP
5979: POP
// end ;
5980: LD_VAR 0 1
5984: RET
// function SendBulldozer ; var un ; begin
5985: LD_INT 0
5987: PPUSH
5988: PPUSH
// uc_side := 3 ;
5989: LD_ADDR_OWVAR 20
5993: PUSH
5994: LD_INT 3
5996: ST_TO_ADDR
// uc_nation := nation_russian ;
5997: LD_ADDR_OWVAR 21
6001: PUSH
6002: LD_INT 3
6004: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
6005: LD_INT 23
6007: PPUSH
6008: LD_INT 3
6010: PPUSH
6011: LD_INT 3
6013: PPUSH
6014: LD_INT 53
6016: PPUSH
6017: LD_INT 100
6019: PPUSH
6020: CALL 20544 0 5
// un := CreateVehicle ;
6024: LD_ADDR_VAR 0 2
6028: PUSH
6029: CALL_OW 45
6033: ST_TO_ADDR
// PlaceUnitXYD ( un , 7 , 8 , 1 , false ) ;
6034: LD_VAR 0 2
6038: PPUSH
6039: LD_INT 7
6041: PPUSH
6042: LD_INT 8
6044: PPUSH
6045: LD_INT 1
6047: PPUSH
6048: LD_INT 0
6050: PPUSH
6051: CALL 55874 0 5
// wait ( 0 0$1 ) ;
6055: LD_INT 35
6057: PPUSH
6058: CALL_OW 67
// CutTreeInArea ( un , cutTreeWArea ) ;
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_INT 24
6069: PPUSH
6070: CALL 11565 0 2
// end ;
6074: LD_VAR 0 1
6078: RET
// every 0 0$3 trigger wave >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
6079: LD_EXP 11
6083: PUSH
6084: LD_INT 4
6086: PUSH
6087: LD_INT 5
6089: PUSH
6090: LD_INT 6
6092: PUSH
6093: LD_INT 7
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: PUSH
6102: LD_OWVAR 67
6106: ARRAY
6107: GREATEREQUAL
6108: IFFALSE 6162
6110: GO 6112
6112: DISABLE
// begin repeat wait ( 0 0$1 ) ;
6113: LD_INT 35
6115: PPUSH
6116: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 ;
6120: LD_INT 22
6122: PUSH
6123: LD_INT 6
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PUSH
6130: LD_INT 21
6132: PUSH
6133: LD_INT 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PPUSH
6144: CALL_OW 69
6148: PUSH
6149: LD_INT 0
6151: EQUAL
6152: IFFALSE 6113
// ruDefeated := true ;
6154: LD_ADDR_EXP 10
6158: PUSH
6159: LD_INT 1
6161: ST_TO_ADDR
// end ;
6162: END
// every 6 6$20 + 4 4$00 trigger wave < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do var i , e , attackers , extraAttackers , spot , extraSpot , paths , enemy ;
6163: LD_EXP 11
6167: PUSH
6168: LD_INT 4
6170: PUSH
6171: LD_INT 5
6173: PUSH
6174: LD_INT 6
6176: PUSH
6177: LD_INT 7
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: PUSH
6186: LD_OWVAR 67
6190: ARRAY
6191: LESS
6192: IFFALSE 7297
6194: GO 6196
6196: DISABLE
6197: LD_INT 0
6199: PPUSH
6200: PPUSH
6201: PPUSH
6202: PPUSH
6203: PPUSH
6204: PPUSH
6205: PPUSH
6206: PPUSH
// begin enable ;
6207: ENABLE
// attackers := [ ] ;
6208: LD_ADDR_VAR 0 3
6212: PUSH
6213: EMPTY
6214: ST_TO_ADDR
// extraAttackers := [ ] ;
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: EMPTY
6221: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 87 , 141 ] , [ 80 , 120 ] , [ 66 , 95 ] , [ 51 , 69 ] , [ 36 , 40 ] , [ 47 , 31 ] , [ 60 , 28 ] ] , [ [ 21 , 17 ] , [ 35 , 30 ] , [ 49 , 31 ] ] ] ;
6222: LD_ADDR_VAR 0 7
6226: PUSH
6227: LD_INT 176
6229: PUSH
6230: LD_INT 152
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 157
6239: PUSH
6240: LD_INT 122
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 146
6249: PUSH
6250: LD_INT 89
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 125
6259: PUSH
6260: LD_INT 46
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 87
6275: PUSH
6276: LD_INT 141
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 80
6285: PUSH
6286: LD_INT 120
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 66
6295: PUSH
6296: LD_INT 95
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 51
6305: PUSH
6306: LD_INT 69
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 36
6315: PUSH
6316: LD_INT 40
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 47
6325: PUSH
6326: LD_INT 31
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 60
6335: PUSH
6336: LD_INT 28
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 21
6354: PUSH
6355: LD_INT 17
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 35
6364: PUSH
6365: LD_INT 30
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 49
6374: PUSH
6375: LD_INT 31
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: ST_TO_ADDR
// wave := Inc ( wave ) ;
6392: LD_ADDR_EXP 11
6396: PUSH
6397: LD_EXP 11
6401: PPUSH
6402: CALL 55087 0 1
6406: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
6407: LD_ADDR_VAR 0 5
6411: PUSH
6412: LD_INT 1
6414: PPUSH
6415: LD_INT 3
6417: PPUSH
6418: CALL_OW 12
6422: ST_TO_ADDR
// if wave mod 2 = 0 then
6423: LD_EXP 11
6427: PUSH
6428: LD_INT 2
6430: MOD
6431: PUSH
6432: LD_INT 0
6434: EQUAL
6435: IFFALSE 6452
// strength := Inc ( strength ) ;
6437: LD_ADDR_EXP 12
6441: PUSH
6442: LD_EXP 12
6446: PPUSH
6447: CALL 55087 0 1
6451: ST_TO_ADDR
// if Count ( ListEnvironmentArea ( cutTreeWArea ) ) then
6452: LD_INT 24
6454: PPUSH
6455: CALL_OW 353
6459: PPUSH
6460: CALL 17782 0 1
6464: IFFALSE 6470
// SendBulldozer ;
6466: CALL 5985 0 0
// attackers := PrepareRussianAttack ( spot , strength ) ;
6470: LD_ADDR_VAR 0 3
6474: PUSH
6475: LD_VAR 0 5
6479: PPUSH
6480: LD_EXP 12
6484: PPUSH
6485: CALL 4771 0 2
6489: ST_TO_ADDR
// if wave + [ 2 , 2 , 3 , 3 ] [ Difficulty ] >= [ 6 , 7 , 8 , 9 ] [ Difficulty ] then
6490: LD_EXP 11
6494: PUSH
6495: LD_INT 2
6497: PUSH
6498: LD_INT 2
6500: PUSH
6501: LD_INT 3
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: LD_OWVAR 67
6517: ARRAY
6518: PLUS
6519: PUSH
6520: LD_INT 6
6522: PUSH
6523: LD_INT 7
6525: PUSH
6526: LD_INT 8
6528: PUSH
6529: LD_INT 9
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_OWVAR 67
6542: ARRAY
6543: GREATEREQUAL
6544: IFFALSE 6612
// begin extraSpot := spot - 1 ;
6546: LD_ADDR_VAR 0 6
6550: PUSH
6551: LD_VAR 0 5
6555: PUSH
6556: LD_INT 1
6558: MINUS
6559: ST_TO_ADDR
// if extraSpot < 1 then
6560: LD_VAR 0 6
6564: PUSH
6565: LD_INT 1
6567: LESS
6568: IFFALSE 6578
// extraSpot := 3 ;
6570: LD_ADDR_VAR 0 6
6574: PUSH
6575: LD_INT 3
6577: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , strength ) ;
6578: LD_ADDR_VAR 0 4
6582: PUSH
6583: LD_VAR 0 6
6587: PPUSH
6588: LD_EXP 12
6592: PPUSH
6593: CALL 4771 0 2
6597: ST_TO_ADDR
// if Difficulty > 1 then
6598: LD_OWVAR 67
6602: PUSH
6603: LD_INT 1
6605: GREATER
6606: IFFALSE 6612
// PrepareRussianExtraInfantry ;
6608: CALL 5793 0 0
// end ; repeat wait ( 0 0$2 ) ;
6612: LD_INT 70
6614: PPUSH
6615: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
6619: LD_ADDR_VAR 0 8
6623: PUSH
6624: LD_INT 22
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 69
6638: ST_TO_ADDR
// for i in attackers do
6639: LD_ADDR_VAR 0 1
6643: PUSH
6644: LD_VAR 0 3
6648: PUSH
6649: FOR_IN
6650: IFFALSE 6955
// begin if not IsOk ( i ) then
6652: LD_VAR 0 1
6656: PPUSH
6657: CALL_OW 302
6661: NOT
6662: IFFALSE 6682
// begin attackers := attackers diff i ;
6664: LD_ADDR_VAR 0 3
6668: PUSH
6669: LD_VAR 0 3
6673: PUSH
6674: LD_VAR 0 1
6678: DIFF
6679: ST_TO_ADDR
// continue ;
6680: GO 6649
// end ; if GetType ( i ) = unit_vehicle then
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 247
6691: PUSH
6692: LD_INT 2
6694: EQUAL
6695: IFFALSE 6719
// AgressiveMove ( i , paths [ spot ] ) else
6697: LD_VAR 0 1
6701: PPUSH
6702: LD_VAR 0 7
6706: PUSH
6707: LD_VAR 0 5
6711: ARRAY
6712: PPUSH
6713: CALL 56480 0 2
6717: GO 6953
// begin if GetClass ( i ) = class_bazooker then
6719: LD_VAR 0 1
6723: PPUSH
6724: CALL_OW 257
6728: PUSH
6729: LD_INT 9
6731: EQUAL
6732: IFFALSE 6929
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
6734: LD_VAR 0 1
6738: PPUSH
6739: LD_VAR 0 8
6743: PPUSH
6744: LD_VAR 0 1
6748: PPUSH
6749: CALL_OW 74
6753: PPUSH
6754: CALL_OW 296
6758: PUSH
6759: LD_INT 12
6761: GREATER
6762: IFFALSE 6790
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
6764: LD_VAR 0 1
6768: PPUSH
6769: LD_VAR 0 8
6773: PPUSH
6774: LD_VAR 0 1
6778: PPUSH
6779: CALL_OW 74
6783: PPUSH
6784: CALL 58112 0 2
6788: GO 6927
// begin e := NearestUnitToUnit ( enemy , i ) ;
6790: LD_ADDR_VAR 0 2
6794: PUSH
6795: LD_VAR 0 8
6799: PPUSH
6800: LD_VAR 0 1
6804: PPUSH
6805: CALL_OW 74
6809: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
6810: LD_INT 1
6812: PPUSH
6813: LD_INT 3
6815: PPUSH
6816: CALL_OW 12
6820: PUSH
6821: LD_INT 1
6823: DOUBLE
6824: EQUAL
6825: IFTRUE 6829
6827: GO 6846
6829: POP
// ComAttackUnit ( i , e ) ; 2 :
6830: LD_VAR 0 1
6834: PPUSH
6835: LD_VAR 0 2
6839: PPUSH
6840: CALL_OW 115
6844: GO 6927
6846: LD_INT 2
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6886
6854: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
6855: LD_VAR 0 1
6859: PPUSH
6860: LD_VAR 0 2
6864: PPUSH
6865: CALL_OW 250
6869: PPUSH
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL_OW 251
6879: PPUSH
6880: CALL_OW 153
6884: GO 6927
6886: LD_INT 3
6888: DOUBLE
6889: EQUAL
6890: IFTRUE 6894
6892: GO 6926
6894: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
6895: LD_VAR 0 1
6899: PPUSH
6900: LD_VAR 0 2
6904: PPUSH
6905: CALL_OW 250
6909: PPUSH
6910: LD_VAR 0 2
6914: PPUSH
6915: CALL_OW 251
6919: PPUSH
6920: CALL_OW 154
6924: GO 6927
6926: POP
// end ; end else
6927: GO 6953
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6929: LD_VAR 0 1
6933: PPUSH
6934: LD_VAR 0 8
6938: PPUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 74
6948: PPUSH
6949: CALL 58112 0 2
// end ; end ;
6953: GO 6649
6955: POP
6956: POP
// if extraAttackers then
6957: LD_VAR 0 4
6961: IFFALSE 7281
// begin for i in extraAttackers do
6963: LD_ADDR_VAR 0 1
6967: PUSH
6968: LD_VAR 0 4
6972: PUSH
6973: FOR_IN
6974: IFFALSE 7279
// begin if not IsOk ( i ) then
6976: LD_VAR 0 1
6980: PPUSH
6981: CALL_OW 302
6985: NOT
6986: IFFALSE 7006
// begin extraAttackers := extraAttackers diff i ;
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: LD_VAR 0 4
6997: PUSH
6998: LD_VAR 0 1
7002: DIFF
7003: ST_TO_ADDR
// continue ;
7004: GO 6973
// end ; if GetType ( i ) = unit_vehicle then
7006: LD_VAR 0 1
7010: PPUSH
7011: CALL_OW 247
7015: PUSH
7016: LD_INT 2
7018: EQUAL
7019: IFFALSE 7043
// AgressiveMove ( i , paths [ extraSpot ] ) else
7021: LD_VAR 0 1
7025: PPUSH
7026: LD_VAR 0 7
7030: PUSH
7031: LD_VAR 0 6
7035: ARRAY
7036: PPUSH
7037: CALL 56480 0 2
7041: GO 7277
// begin if GetClass ( i ) = class_bazooker then
7043: LD_VAR 0 1
7047: PPUSH
7048: CALL_OW 257
7052: PUSH
7053: LD_INT 9
7055: EQUAL
7056: IFFALSE 7253
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
7058: LD_VAR 0 1
7062: PPUSH
7063: LD_VAR 0 8
7067: PPUSH
7068: LD_VAR 0 1
7072: PPUSH
7073: CALL_OW 74
7077: PPUSH
7078: CALL_OW 296
7082: PUSH
7083: LD_INT 12
7085: GREATER
7086: IFFALSE 7114
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
7088: LD_VAR 0 1
7092: PPUSH
7093: LD_VAR 0 8
7097: PPUSH
7098: LD_VAR 0 1
7102: PPUSH
7103: CALL_OW 74
7107: PPUSH
7108: CALL 58112 0 2
7112: GO 7251
// begin e := NearestUnitToUnit ( enemy , i ) ;
7114: LD_ADDR_VAR 0 2
7118: PUSH
7119: LD_VAR 0 8
7123: PPUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 74
7133: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
7134: LD_INT 1
7136: PPUSH
7137: LD_INT 3
7139: PPUSH
7140: CALL_OW 12
7144: PUSH
7145: LD_INT 1
7147: DOUBLE
7148: EQUAL
7149: IFTRUE 7153
7151: GO 7170
7153: POP
// ComAttackUnit ( i , e ) ; 2 :
7154: LD_VAR 0 1
7158: PPUSH
7159: LD_VAR 0 2
7163: PPUSH
7164: CALL_OW 115
7168: GO 7251
7170: LD_INT 2
7172: DOUBLE
7173: EQUAL
7174: IFTRUE 7178
7176: GO 7210
7178: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
7179: LD_VAR 0 1
7183: PPUSH
7184: LD_VAR 0 2
7188: PPUSH
7189: CALL_OW 250
7193: PPUSH
7194: LD_VAR 0 2
7198: PPUSH
7199: CALL_OW 251
7203: PPUSH
7204: CALL_OW 153
7208: GO 7251
7210: LD_INT 3
7212: DOUBLE
7213: EQUAL
7214: IFTRUE 7218
7216: GO 7250
7218: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
7219: LD_VAR 0 1
7223: PPUSH
7224: LD_VAR 0 2
7228: PPUSH
7229: CALL_OW 250
7233: PPUSH
7234: LD_VAR 0 2
7238: PPUSH
7239: CALL_OW 251
7243: PPUSH
7244: CALL_OW 154
7248: GO 7251
7250: POP
// end ; end else
7251: GO 7277
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7253: LD_VAR 0 1
7257: PPUSH
7258: LD_VAR 0 8
7262: PPUSH
7263: LD_VAR 0 1
7267: PPUSH
7268: CALL_OW 74
7272: PPUSH
7273: CALL 58112 0 2
// end ; end ;
7277: GO 6973
7279: POP
7280: POP
// end ; until not attackers and not extraAttackers ;
7281: LD_VAR 0 3
7285: NOT
7286: IFFALSE 7295
7288: PUSH
7289: LD_VAR 0 4
7293: NOT
7294: AND
7295: IFFALSE 6612
// end ;
7297: PPOPN 8
7299: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] ] ) do var i , tmp , lab , eng , tag , un , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , ruBase , fac ;
7300: LD_INT 22
7302: PUSH
7303: LD_INT 6
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 50
7312: PUSH
7313: EMPTY
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PPUSH
7320: CALL_OW 69
7324: IFFALSE 9035
7326: GO 7328
7328: DISABLE
7329: LD_INT 0
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
// begin enable ;
7346: ENABLE
// ruBase := FilterUnitsInARea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_warehouse ] , [ f_ok ] ] ) ;
7347: LD_ADDR_VAR 0 14
7351: PUSH
7352: LD_INT 26
7354: PPUSH
7355: LD_INT 22
7357: PUSH
7358: LD_INT 6
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 30
7367: PUSH
7368: LD_INT 1
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 50
7377: PUSH
7378: EMPTY
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 70
7390: ST_TO_ADDR
// if ruBase then
7391: LD_VAR 0 14
7395: IFFALSE 7411
// ruBase := ruBase [ 1 ] ;
7397: LD_ADDR_VAR 0 14
7401: PUSH
7402: LD_VAR 0 14
7406: PUSH
7407: LD_INT 1
7409: ARRAY
7410: ST_TO_ADDR
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7411: LD_ADDR_VAR 0 15
7415: PUSH
7416: LD_INT 26
7418: PPUSH
7419: LD_INT 22
7421: PUSH
7422: LD_INT 6
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: PUSH
7429: LD_INT 30
7431: PUSH
7432: LD_INT 3
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 50
7441: PUSH
7442: EMPTY
7443: LIST
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 70
7454: ST_TO_ADDR
// if ruConstructList and fac then
7455: LD_EXP 35
7459: IFFALSE 7467
7461: PUSH
7462: LD_VAR 0 15
7466: AND
7467: IFFALSE 7622
// if BuildingStatus ( fac [ 1 ] ) = bs_idle and CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
7469: LD_VAR 0 15
7473: PUSH
7474: LD_INT 1
7476: ARRAY
7477: PPUSH
7478: CALL_OW 461
7482: PUSH
7483: LD_INT 2
7485: EQUAL
7486: IFFALSE 7555
7488: PUSH
7489: LD_VAR 0 15
7493: PUSH
7494: LD_INT 1
7496: ARRAY
7497: PPUSH
7498: LD_EXP 35
7502: PUSH
7503: LD_INT 1
7505: ARRAY
7506: PUSH
7507: LD_INT 1
7509: ARRAY
7510: PPUSH
7511: LD_EXP 35
7515: PUSH
7516: LD_INT 1
7518: ARRAY
7519: PUSH
7520: LD_INT 2
7522: ARRAY
7523: PPUSH
7524: LD_EXP 35
7528: PUSH
7529: LD_INT 1
7531: ARRAY
7532: PUSH
7533: LD_INT 3
7535: ARRAY
7536: PPUSH
7537: LD_EXP 35
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: PUSH
7546: LD_INT 4
7548: ARRAY
7549: PPUSH
7550: CALL_OW 448
7554: AND
7555: IFFALSE 7622
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
7557: LD_VAR 0 15
7561: PUSH
7562: LD_INT 1
7564: ARRAY
7565: PPUSH
7566: LD_EXP 35
7570: PUSH
7571: LD_INT 1
7573: ARRAY
7574: PUSH
7575: LD_INT 1
7577: ARRAY
7578: PPUSH
7579: LD_EXP 35
7583: PUSH
7584: LD_INT 1
7586: ARRAY
7587: PUSH
7588: LD_INT 2
7590: ARRAY
7591: PPUSH
7592: LD_EXP 35
7596: PUSH
7597: LD_INT 1
7599: ARRAY
7600: PUSH
7601: LD_INT 3
7603: ARRAY
7604: PPUSH
7605: LD_EXP 35
7609: PUSH
7610: LD_INT 1
7612: ARRAY
7613: PUSH
7614: LD_INT 4
7616: ARRAY
7617: PPUSH
7618: CALL_OW 125
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7622: LD_ADDR_VAR 0 2
7626: PUSH
7627: LD_INT 26
7629: PPUSH
7630: LD_INT 21
7632: PUSH
7633: LD_INT 3
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 3
7642: PUSH
7643: LD_INT 24
7645: PUSH
7646: LD_INT 1000
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 70
7665: ST_TO_ADDR
// cr := GetListOfCratesInArea ( crates6Area ) ;
7666: LD_ADDR_VAR 0 8
7670: PUSH
7671: LD_INT 14
7673: PPUSH
7674: CALL_OW 435
7678: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7679: LD_ADDR_VAR 0 9
7683: PUSH
7684: LD_EXP 34
7688: PPUSH
7689: LD_INT 25
7691: PUSH
7692: LD_INT 4
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: LD_INT 50
7701: PUSH
7702: EMPTY
7703: LIST
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PPUSH
7709: CALL_OW 72
7713: ST_TO_ADDR
// if sci then
7714: LD_VAR 0 9
7718: IFFALSE 7945
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
7720: LD_ADDR_VAR 0 11
7724: PUSH
7725: LD_EXP 34
7729: PPUSH
7730: LD_INT 95
7732: PUSH
7733: LD_INT 26
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 120
7742: PUSH
7743: LD_INT 3
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PPUSH
7754: CALL_OW 72
7758: ST_TO_ADDR
// lab := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7759: LD_ADDR_VAR 0 3
7763: PUSH
7764: LD_EXP 34
7768: PPUSH
7769: LD_INT 95
7771: PUSH
7772: LD_INT 26
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 2
7781: PUSH
7782: LD_INT 30
7784: PUSH
7785: LD_INT 6
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 30
7794: PUSH
7795: LD_INT 7
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: LD_INT 30
7804: PUSH
7805: LD_INT 8
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PPUSH
7822: CALL_OW 72
7826: ST_TO_ADDR
// if hurtUnits then
7827: LD_VAR 0 11
7831: IFFALSE 7892
// begin for i in sci do
7833: LD_ADDR_VAR 0 1
7837: PUSH
7838: LD_VAR 0 9
7842: PUSH
7843: FOR_IN
7844: IFFALSE 7888
// if IsInUnit ( i ) then
7846: LD_VAR 0 1
7850: PPUSH
7851: CALL_OW 310
7855: IFFALSE 7868
// ComExitBuilding ( i ) else
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 122
7866: GO 7886
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7868: LD_VAR 0 1
7872: PPUSH
7873: LD_VAR 0 11
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PPUSH
7882: CALL_OW 128
7886: GO 7843
7888: POP
7889: POP
// end else
7890: GO 7945
// if lab then
7892: LD_VAR 0 3
7896: IFFALSE 7945
// begin for i in sci do
7898: LD_ADDR_VAR 0 1
7902: PUSH
7903: LD_VAR 0 9
7907: PUSH
7908: FOR_IN
7909: IFFALSE 7943
// if not IsInUnit ( i ) then
7911: LD_VAR 0 1
7915: PPUSH
7916: CALL_OW 310
7920: NOT
7921: IFFALSE 7941
// ComEnterUnit ( i , lab [ 1 ] ) ;
7923: LD_VAR 0 1
7927: PPUSH
7928: LD_VAR 0 3
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: CALL_OW 120
7941: GO 7908
7943: POP
7944: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
7945: LD_ADDR_VAR 0 4
7949: PUSH
7950: LD_EXP 34
7954: PPUSH
7955: LD_INT 25
7957: PUSH
7958: LD_INT 2
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 72
7969: ST_TO_ADDR
// if eng then
7970: LD_VAR 0 4
7974: IFFALSE 8422
// begin for i in eng do
7976: LD_ADDR_VAR 0 1
7980: PUSH
7981: LD_VAR 0 4
7985: PUSH
7986: FOR_IN
7987: IFFALSE 8420
// begin tag := GetTag ( i ) ;
7989: LD_ADDR_VAR 0 5
7993: PUSH
7994: LD_VAR 0 1
7998: PPUSH
7999: CALL_OW 110
8003: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 256
8013: PUSH
8014: LD_INT 800
8016: LESS
8017: IFFALSE 8029
8019: PUSH
8020: LD_VAR 0 5
8024: PUSH
8025: LD_INT 3
8027: NONEQUAL
8028: AND
8029: IFFALSE 8067
// begin SetTag ( i , tHeal ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 3
8038: PPUSH
8039: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8043: LD_VAR 0 1
8047: PPUSH
8048: LD_INT 97
8050: PPUSH
8051: LD_INT 139
8053: PPUSH
8054: CALL_OW 111
// AddComHold ( i ) ;
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8067: LD_VAR 0 5
8071: PUSH
8072: LD_INT 3
8074: EQUAL
8075: IFFALSE 8092
8077: PUSH
8078: LD_VAR 0 1
8082: PPUSH
8083: CALL_OW 256
8087: PUSH
8088: LD_INT 1000
8090: EQUAL
8091: AND
8092: IFFALSE 8106
// SetTag ( i , 0 ) ;
8094: LD_VAR 0 1
8098: PPUSH
8099: LD_INT 0
8101: PPUSH
8102: CALL_OW 109
// if not tag then
8106: LD_VAR 0 5
8110: NOT
8111: IFFALSE 8207
// begin if cr or tmp then
8113: LD_VAR 0 8
8117: IFTRUE 8125
8119: PUSH
8120: LD_VAR 0 2
8124: OR
8125: IFFALSE 8181
// begin if IsInUnit ( i ) then
8127: LD_VAR 0 1
8131: PPUSH
8132: CALL_OW 310
8136: IFFALSE 8147
// ComExitBuilding ( i ) ;
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 122
// if tmp then
8147: LD_VAR 0 2
8151: IFFALSE 8167
// SetTag ( i , tRepair ) else
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 1
8160: PPUSH
8161: CALL_OW 109
8165: GO 8179
// SetTag ( i , tCrates ) ;
8167: LD_VAR 0 1
8171: PPUSH
8172: LD_INT 2
8174: PPUSH
8175: CALL_OW 109
// end else
8179: GO 8207
// if not IsInUnit ( i ) then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 310
8190: NOT
8191: IFFALSE 8207
// ComEnterUnit ( i , ruBase ) ;
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_VAR 0 14
8202: PPUSH
8203: CALL_OW 120
// end ; if tag = tRepair then
8207: LD_VAR 0 5
8211: PUSH
8212: LD_INT 1
8214: EQUAL
8215: IFFALSE 8295
// begin if not tmp then
8217: LD_VAR 0 2
8221: NOT
8222: IFFALSE 8238
// begin SetTag ( i , 0 ) ;
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_INT 0
8231: PPUSH
8232: CALL_OW 109
// continue ;
8236: GO 7986
// end ; if not HasTask ( i ) then
8238: LD_VAR 0 1
8242: PPUSH
8243: CALL_OW 314
8247: NOT
8248: IFFALSE 8268
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8250: LD_VAR 0 1
8254: PPUSH
8255: LD_VAR 0 2
8259: PUSH
8260: LD_INT 1
8262: ARRAY
8263: PPUSH
8264: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
8268: LD_VAR 0 1
8272: PPUSH
8273: LD_INT 26
8275: PPUSH
8276: CALL_OW 308
8280: NOT
8281: IFFALSE 8295
// ComMoveToArea ( i , ruBaseArea ) ;
8283: LD_VAR 0 1
8287: PPUSH
8288: LD_INT 26
8290: PPUSH
8291: CALL_OW 113
// end ; if tag = tCrates then
8295: LD_VAR 0 5
8299: PUSH
8300: LD_INT 2
8302: EQUAL
8303: IFFALSE 8418
// begin if not cr then
8305: LD_VAR 0 8
8309: NOT
8310: IFFALSE 8326
// begin SetTag ( i , 0 ) ;
8312: LD_VAR 0 1
8316: PPUSH
8317: LD_INT 0
8319: PPUSH
8320: CALL_OW 109
// continue ;
8324: GO 7986
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 314
8335: NOT
8336: IFFALSE 8389
8338: PUSH
8339: LD_INT 81
8341: PUSH
8342: LD_INT 6
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 92
8351: PUSH
8352: LD_VAR 0 8
8356: PUSH
8357: LD_INT 1
8359: ARRAY
8360: PUSH
8361: LD_VAR 0 8
8365: PUSH
8366: LD_INT 2
8368: ARRAY
8369: PUSH
8370: LD_INT 12
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PPUSH
8383: CALL_OW 69
8387: NOT
8388: AND
8389: IFFALSE 8418
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_VAR 0 8
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PPUSH
8405: LD_VAR 0 8
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: CALL_OW 117
// end ; end ;
8418: GO 7986
8420: POP
8421: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8422: LD_ADDR_VAR 0 10
8426: PUSH
8427: LD_EXP 34
8431: PPUSH
8432: LD_INT 2
8434: PUSH
8435: LD_INT 25
8437: PUSH
8438: LD_INT 1
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 25
8447: PUSH
8448: LD_INT 9
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 50
8462: PUSH
8463: EMPTY
8464: LIST
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PPUSH
8470: CALL_OW 72
8474: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
8475: LD_ADDR_VAR 0 12
8479: PUSH
8480: LD_INT 26
8482: PPUSH
8483: LD_INT 81
8485: PUSH
8486: LD_INT 6
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL_OW 70
8497: ST_TO_ADDR
// if sol then
8498: LD_VAR 0 10
8502: IFFALSE 9035
// begin if enemyInBase then
8504: LD_VAR 0 12
8508: IFFALSE 8729
// begin for i in sol do
8510: LD_ADDR_VAR 0 1
8514: PUSH
8515: LD_VAR 0 10
8519: PUSH
8520: FOR_IN
8521: IFFALSE 8725
// begin tw := IsInUnit ( i ) ;
8523: LD_ADDR_VAR 0 7
8527: PUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 310
8537: ST_TO_ADDR
// if tw then
8538: LD_VAR 0 7
8542: IFFALSE 8632
// begin if not tw in FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8544: LD_VAR 0 7
8548: PUSH
8549: LD_INT 22
8551: PUSH
8552: LD_INT 6
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 101
8561: PUSH
8562: LD_INT 2
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 2
8571: PUSH
8572: LD_INT 30
8574: PUSH
8575: LD_INT 5
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: LD_INT 30
8584: PUSH
8585: LD_INT 32
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: LD_INT 30
8594: PUSH
8595: LD_INT 31
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: IN
8618: NOT
8619: IFFALSE 8630
// ComExitBuilding ( i ) ;
8621: LD_VAR 0 1
8625: PPUSH
8626: CALL_OW 122
// end else
8630: GO 8723
// begin un := NearestUnitToUnit ( enemyInBase , i ) ;
8632: LD_ADDR_VAR 0 6
8636: PUSH
8637: LD_VAR 0 12
8641: PPUSH
8642: LD_VAR 0 1
8646: PPUSH
8647: CALL_OW 74
8651: ST_TO_ADDR
// if GetClass ( i ) = class_bazooker and Prob ( 30 ) then
8652: LD_VAR 0 1
8656: PPUSH
8657: CALL_OW 257
8661: PUSH
8662: LD_INT 9
8664: EQUAL
8665: IFFALSE 8676
8667: PUSH
8668: LD_INT 30
8670: PPUSH
8671: CALL_OW 13
8675: AND
8676: IFFALSE 8709
// ComTimeShift ( i , GetX ( un ) , GetY ( un ) ) else
8678: LD_VAR 0 1
8682: PPUSH
8683: LD_VAR 0 6
8687: PPUSH
8688: CALL_OW 250
8692: PPUSH
8693: LD_VAR 0 6
8697: PPUSH
8698: CALL_OW 251
8702: PPUSH
8703: CALL_OW 154
8707: GO 8723
// ComAttackUnit ( i , un ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: LD_VAR 0 6
8718: PPUSH
8719: CALL_OW 115
// end ; end ;
8723: GO 8520
8725: POP
8726: POP
// end else
8727: GO 9035
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8729: LD_ADDR_VAR 0 13
8733: PUSH
8734: LD_INT 26
8736: PPUSH
8737: LD_INT 3
8739: PUSH
8740: LD_INT 62
8742: PUSH
8743: EMPTY
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 2
8752: PUSH
8753: LD_INT 30
8755: PUSH
8756: LD_INT 32
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 30
8765: PUSH
8766: LD_INT 4
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 30
8775: PUSH
8776: LD_INT 31
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 70
8797: ST_TO_ADDR
// if empty then
8798: LD_VAR 0 13
8802: IFFALSE 8819
// empty := ReverseArray ( empty ) ;
8804: LD_ADDR_VAR 0 13
8808: PUSH
8809: LD_VAR 0 13
8813: PPUSH
8814: CALL 48804 0 1
8818: ST_TO_ADDR
// for i in sol do
8819: LD_ADDR_VAR 0 1
8823: PUSH
8824: LD_VAR 0 10
8828: PUSH
8829: FOR_IN
8830: IFFALSE 9033
// begin tag := GetTag ( i ) ;
8832: LD_ADDR_VAR 0 5
8836: PUSH
8837: LD_VAR 0 1
8841: PPUSH
8842: CALL_OW 110
8846: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8847: LD_VAR 0 1
8851: PPUSH
8852: CALL_OW 256
8856: PUSH
8857: LD_INT 1000
8859: LESS
8860: IFFALSE 8872
8862: PUSH
8863: LD_VAR 0 5
8867: PUSH
8868: LD_INT 3
8870: NONEQUAL
8871: AND
8872: IFFALSE 8912
// begin SetTag ( i , tHeal ) ;
8874: LD_VAR 0 1
8878: PPUSH
8879: LD_INT 3
8881: PPUSH
8882: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8886: LD_VAR 0 1
8890: PPUSH
8891: LD_INT 97
8893: PPUSH
8894: LD_INT 139
8896: PPUSH
8897: CALL_OW 111
// AddComHold ( i ) ;
8901: LD_VAR 0 1
8905: PPUSH
8906: CALL_OW 200
// continue ;
8910: GO 8829
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8912: LD_VAR 0 1
8916: PPUSH
8917: CALL_OW 256
8921: PUSH
8922: LD_INT 1000
8924: EQUAL
8925: IFFALSE 8937
8927: PUSH
8928: LD_VAR 0 5
8932: PUSH
8933: LD_INT 3
8935: EQUAL
8936: AND
8937: IFFALSE 8953
// begin SetTag ( i , 0 ) ;
8939: LD_VAR 0 1
8943: PPUSH
8944: LD_INT 0
8946: PPUSH
8947: CALL_OW 109
// continue ;
8951: GO 8829
// end ; if HasTask ( i ) then
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 314
8962: IFFALSE 8966
// continue ;
8964: GO 8829
// if not IsInUnit ( i ) and not tag and empty then
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 310
8975: NOT
8976: IFFALSE 8985
8978: PUSH
8979: LD_VAR 0 5
8983: NOT
8984: AND
8985: IFFALSE 8993
8987: PUSH
8988: LD_VAR 0 13
8992: AND
8993: IFFALSE 9031
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8995: LD_VAR 0 1
8999: PPUSH
9000: LD_VAR 0 13
9004: PUSH
9005: LD_INT 1
9007: ARRAY
9008: PPUSH
9009: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
9013: LD_ADDR_VAR 0 13
9017: PUSH
9018: LD_VAR 0 13
9022: PPUSH
9023: LD_INT 1
9025: PPUSH
9026: CALL_OW 3
9030: ST_TO_ADDR
// end ; end ;
9031: GO 8829
9033: POP
9034: POP
// end ; end ; end ;
9035: PPOPN 15
9037: END
// every 0 0$1 trigger ruTanks do var i , mech , enemy ;
9038: LD_EXP 36
9042: IFFALSE 9624
9044: GO 9046
9046: DISABLE
9047: LD_INT 0
9049: PPUSH
9050: PPUSH
9051: PPUSH
// begin enable ;
9052: ENABLE
// if not ruTanks then
9053: LD_EXP 36
9057: NOT
9058: IFFALSE 9062
// exit ;
9060: GO 9624
// for i in ruTanks do
9062: LD_ADDR_VAR 0 1
9066: PUSH
9067: LD_EXP 36
9071: PUSH
9072: FOR_IN
9073: IFFALSE 9622
// begin if not IsOk ( i ) or GetSide ( i ) <> 6 then
9075: LD_VAR 0 1
9079: PPUSH
9080: CALL_OW 302
9084: NOT
9085: IFTRUE 9102
9087: PUSH
9088: LD_VAR 0 1
9092: PPUSH
9093: CALL_OW 255
9097: PUSH
9098: LD_INT 6
9100: NONEQUAL
9101: OR
9102: IFFALSE 9122
// begin ruTanks := ruTanks diff i ;
9104: LD_ADDR_EXP 36
9108: PUSH
9109: LD_EXP 36
9113: PUSH
9114: LD_VAR 0 1
9118: DIFF
9119: ST_TO_ADDR
// continue ;
9120: GO 9072
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 110
9131: NOT
9132: IFTRUE 9149
9134: PUSH
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL_OW 110
9144: PUSH
9145: LD_INT 0
9147: EQUAL
9148: OR
9149: IFFALSE 9281
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 261
9160: PUSH
9161: LD_INT 50
9163: LESS
9164: IFFALSE 9181
9166: PUSH
9167: LD_VAR 0 1
9171: PPUSH
9172: CALL_OW 262
9176: PUSH
9177: LD_INT 1
9179: EQUAL
9180: AND
9181: IFFALSE 9240
// begin ComMoveXY ( i , 103 , 149 ) ;
9183: LD_VAR 0 1
9187: PPUSH
9188: LD_INT 103
9190: PPUSH
9191: LD_INT 149
9193: PPUSH
9194: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9198: LD_INT 35
9200: PPUSH
9201: CALL_OW 67
// until GetDistUnitXY ( i , 103 , 149 ) < 4 ;
9205: LD_VAR 0 1
9209: PPUSH
9210: LD_INT 103
9212: PPUSH
9213: LD_INT 149
9215: PPUSH
9216: CALL_OW 297
9220: PUSH
9221: LD_INT 4
9223: LESS
9224: IFFALSE 9198
// SetFuel ( i , 100 ) ;
9226: LD_VAR 0 1
9230: PPUSH
9231: LD_INT 100
9233: PPUSH
9234: CALL_OW 240
// end else
9238: GO 9281
// if not IsInArea ( i , ruParkingArea ) then
9240: LD_VAR 0 1
9244: PPUSH
9245: LD_INT 27
9247: PPUSH
9248: CALL_OW 308
9252: NOT
9253: IFFALSE 9269
// ComMoveToArea ( i , ruParkingArea ) else
9255: LD_VAR 0 1
9259: PPUSH
9260: LD_INT 27
9262: PPUSH
9263: CALL_OW 113
9267: GO 9281
// SetTag ( i , tParking ) ;
9269: LD_VAR 0 1
9273: PPUSH
9274: LD_INT 11
9276: PPUSH
9277: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9281: LD_VAR 0 1
9285: PPUSH
9286: CALL_OW 110
9290: PUSH
9291: LD_INT 11
9293: EQUAL
9294: IFFALSE 9424
// begin if GetLives ( i ) < 650 then
9296: LD_VAR 0 1
9300: PPUSH
9301: CALL_OW 256
9305: PUSH
9306: LD_INT 650
9308: LESS
9309: IFFALSE 9401
// begin if not IsDrivenBy ( i ) then
9311: LD_VAR 0 1
9315: PPUSH
9316: CALL_OW 311
9320: NOT
9321: IFFALSE 9325
// continue ;
9323: GO 9072
// mech := IsDrivenBy ( i ) ;
9325: LD_ADDR_VAR 0 2
9329: PUSH
9330: LD_VAR 0 1
9334: PPUSH
9335: CALL_OW 311
9339: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9340: LD_VAR 0 2
9344: PPUSH
9345: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9349: LD_VAR 0 2
9353: PPUSH
9354: LD_VAR 0 1
9358: PPUSH
9359: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9363: LD_INT 35
9365: PPUSH
9366: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9370: LD_VAR 0 1
9374: PPUSH
9375: CALL_OW 256
9379: PUSH
9380: LD_INT 1000
9382: EQUAL
9383: IFFALSE 9363
// ComEnterUnit ( mech , i ) ;
9385: LD_VAR 0 2
9389: PPUSH
9390: LD_VAR 0 1
9394: PPUSH
9395: CALL_OW 120
// end else
9399: GO 9424
// if IsDrivenBy ( i ) then
9401: LD_VAR 0 1
9405: PPUSH
9406: CALL_OW 311
9410: IFFALSE 9424
// SetTag ( i , tAttack ) ;
9412: LD_VAR 0 1
9416: PPUSH
9417: LD_INT 12
9419: PPUSH
9420: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9424: LD_VAR 0 1
9428: PPUSH
9429: CALL_OW 110
9433: PUSH
9434: LD_INT 12
9436: EQUAL
9437: IFFALSE 9620
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
9439: LD_ADDR_VAR 0 3
9443: PUSH
9444: LD_INT 26
9446: PPUSH
9447: LD_INT 81
9449: PUSH
9450: LD_INT 6
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 70
9461: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 256
9471: PUSH
9472: LD_INT 650
9474: LESS
9475: IFFALSE 9500
// begin ComStop ( i ) ;
9477: LD_VAR 0 1
9481: PPUSH
9482: CALL_OW 141
// SetTag ( i , 0 ) ;
9486: LD_VAR 0 1
9490: PPUSH
9491: LD_INT 0
9493: PPUSH
9494: CALL_OW 109
// continue ;
9498: GO 9072
// end ; if enemy then
9500: LD_VAR 0 3
9504: IFFALSE 9544
// begin if not HasTask ( i ) then
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 314
9515: NOT
9516: IFFALSE 9542
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9518: LD_VAR 0 1
9522: PPUSH
9523: LD_VAR 0 3
9527: PPUSH
9528: LD_VAR 0 1
9532: PPUSH
9533: CALL_OW 74
9537: PPUSH
9538: CALL 58112 0 2
// end else
9542: GO 9620
// if ruTanks > 1 then
9544: LD_EXP 36
9548: PUSH
9549: LD_INT 1
9551: GREATER
9552: IFFALSE 9620
// AgressiveMove ( i , [ [ 78 , 112 ] , [ 104 , 106 ] , [ 130 , 107 ] , [ 143 , 83 ] , [ 120 , 35 ] ] ) ;
9554: LD_VAR 0 1
9558: PPUSH
9559: LD_INT 78
9561: PUSH
9562: LD_INT 112
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 104
9571: PUSH
9572: LD_INT 106
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 130
9581: PUSH
9582: LD_INT 107
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: LD_INT 143
9591: PUSH
9592: LD_INT 83
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 120
9601: PUSH
9602: LD_INT 35
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: PPUSH
9616: CALL 56480 0 2
// end ; end ;
9620: GO 9072
9622: POP
9623: POP
// end ;
9624: PPOPN 3
9626: END
// every 0 0$1 trigger InBattle ( 6 ) or playerInBase do
9627: LD_INT 6
9629: PPUSH
9630: CALL_OW 463
9634: IFTRUE 9642
9636: PUSH
9637: LD_EXP 5
9641: OR
9642: IFFALSE 9860
9644: GO 9646
9646: DISABLE
// begin wait ( 0 0$10 ) ;
9647: LD_INT 350
9649: PPUSH
9650: CALL_OW 67
// if playerInBase then
9654: LD_EXP 5
9658: IFFALSE 9667
// wait ( 3 3$00 ) ;
9660: LD_INT 6300
9662: PPUSH
9663: CALL_OW 67
// ruConstructList := [ [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] ] ;
9667: LD_ADDR_EXP 35
9671: PUSH
9672: LD_INT 21
9674: PUSH
9675: LD_INT 3
9677: PUSH
9678: LD_INT 1
9680: PUSH
9681: LD_INT 45
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 21
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: LD_INT 45
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 21
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 1
9716: PUSH
9717: LD_INT 45
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: ST_TO_ADDR
// if Difficulty > 1 then
9731: LD_OWVAR 67
9735: PUSH
9736: LD_INT 1
9738: GREATER
9739: IFFALSE 9774
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gatling_gun ] ) ;
9741: LD_ADDR_EXP 35
9745: PUSH
9746: LD_EXP 35
9750: PPUSH
9751: LD_INT 21
9753: PUSH
9754: LD_INT 3
9756: PUSH
9757: LD_INT 1
9759: PUSH
9760: LD_INT 43
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: PPUSH
9769: CALL 53714 0 2
9773: ST_TO_ADDR
// if Difficulty > 2 then
9774: LD_OWVAR 67
9778: PUSH
9779: LD_INT 2
9781: GREATER
9782: IFFALSE 9817
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9784: LD_ADDR_EXP 35
9788: PUSH
9789: LD_EXP 35
9793: PPUSH
9794: LD_INT 21
9796: PUSH
9797: LD_INT 3
9799: PUSH
9800: LD_INT 1
9802: PUSH
9803: LD_INT 44
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: PPUSH
9812: CALL 53714 0 2
9816: ST_TO_ADDR
// if Difficulty > 3 then
9817: LD_OWVAR 67
9821: PUSH
9822: LD_INT 3
9824: GREATER
9825: IFFALSE 9860
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9827: LD_ADDR_EXP 35
9831: PUSH
9832: LD_EXP 35
9836: PPUSH
9837: LD_INT 21
9839: PUSH
9840: LD_INT 3
9842: PUSH
9843: LD_INT 1
9845: PUSH
9846: LD_INT 44
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL 53714 0 2
9859: ST_TO_ADDR
// end ; end_of_file
9860: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
9861: LD_INT 0
9863: PPUSH
9864: PPUSH
9865: PPUSH
9866: PPUSH
9867: PPUSH
9868: PPUSH
9869: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
9870: LD_ADDR_VAR 0 2
9874: PUSH
9875: LD_STRING 09_env
9877: PPUSH
9878: EMPTY
9879: PPUSH
9880: CALL_OW 30
9884: ST_TO_ADDR
// if not tmp then
9885: LD_VAR 0 2
9889: NOT
9890: IFFALSE 9894
// exit ;
9892: GO 10299
// list := ListEnvironmentArea ( mapArea ) ;
9894: LD_ADDR_VAR 0 7
9898: PUSH
9899: LD_INT 4
9901: PPUSH
9902: CALL_OW 353
9906: ST_TO_ADDR
// if not list then
9907: LD_VAR 0 7
9911: NOT
9912: IFFALSE 9916
// exit ;
9914: GO 10299
// for i in list do
9916: LD_ADDR_VAR 0 3
9920: PUSH
9921: LD_VAR 0 7
9925: PUSH
9926: FOR_IN
9927: IFFALSE 10037
// begin exist := false ;
9929: LD_ADDR_VAR 0 6
9933: PUSH
9934: LD_INT 0
9936: ST_TO_ADDR
// for j in tmp do
9937: LD_ADDR_VAR 0 4
9941: PUSH
9942: LD_VAR 0 2
9946: PUSH
9947: FOR_IN
9948: IFFALSE 10004
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
9950: LD_VAR 0 3
9954: PUSH
9955: LD_INT 1
9957: ARRAY
9958: PUSH
9959: LD_VAR 0 4
9963: PUSH
9964: LD_INT 1
9966: ARRAY
9967: EQUAL
9968: IFFALSE 9990
9970: PUSH
9971: LD_VAR 0 3
9975: PUSH
9976: LD_INT 2
9978: ARRAY
9979: PUSH
9980: LD_VAR 0 4
9984: PUSH
9985: LD_INT 2
9987: ARRAY
9988: EQUAL
9989: AND
9990: IFFALSE 10002
// begin exist := true ;
9992: LD_ADDR_VAR 0 6
9996: PUSH
9997: LD_INT 1
9999: ST_TO_ADDR
// break ;
10000: GO 10004
// end ;
10002: GO 9947
10004: POP
10005: POP
// if not exist then
10006: LD_VAR 0 6
10010: NOT
10011: IFFALSE 10035
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
10013: LD_VAR 0 3
10017: PUSH
10018: LD_INT 1
10020: ARRAY
10021: PPUSH
10022: LD_VAR 0 3
10026: PUSH
10027: LD_INT 2
10029: ARRAY
10030: PPUSH
10031: CALL_OW 347
// end ;
10035: GO 9926
10037: POP
10038: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
10039: LD_ADDR_VAR 0 2
10043: PUSH
10044: LD_STRING 09_animals
10046: PPUSH
10047: EMPTY
10048: PPUSH
10049: CALL_OW 30
10053: ST_TO_ADDR
// if not tmp then
10054: LD_VAR 0 2
10058: NOT
10059: IFFALSE 10063
// exit ;
10061: GO 10299
// InitHc_All ( ) ;
10063: CALL_OW 584
// for i in tmp do
10067: LD_ADDR_VAR 0 3
10071: PUSH
10072: LD_VAR 0 2
10076: PUSH
10077: FOR_IN
10078: IFFALSE 10195
// begin uc_side := 0 ;
10080: LD_ADDR_OWVAR 20
10084: PUSH
10085: LD_INT 0
10087: ST_TO_ADDR
// uc_nation := nation_nature ;
10088: LD_ADDR_OWVAR 21
10092: PUSH
10093: LD_INT 0
10095: ST_TO_ADDR
// hc_gallery :=  ;
10096: LD_ADDR_OWVAR 33
10100: PUSH
10101: LD_STRING 
10103: ST_TO_ADDR
// hc_name :=  ;
10104: LD_ADDR_OWVAR 26
10108: PUSH
10109: LD_STRING 
10111: ST_TO_ADDR
// hc_class := i [ 1 ] ;
10112: LD_ADDR_OWVAR 28
10116: PUSH
10117: LD_VAR 0 3
10121: PUSH
10122: LD_INT 1
10124: ARRAY
10125: ST_TO_ADDR
// un := CreateHuman ;
10126: LD_ADDR_VAR 0 5
10130: PUSH
10131: CALL_OW 44
10135: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
10136: LD_VAR 0 5
10140: PPUSH
10141: LD_VAR 0 3
10145: PUSH
10146: LD_INT 2
10148: ARRAY
10149: PPUSH
10150: LD_VAR 0 3
10154: PUSH
10155: LD_INT 3
10157: ARRAY
10158: PPUSH
10159: LD_VAR 0 3
10163: PUSH
10164: LD_INT 4
10166: ARRAY
10167: PPUSH
10168: LD_INT 0
10170: PPUSH
10171: CALL 55874 0 5
// SetLives ( un , i [ 5 ] ) ;
10175: LD_VAR 0 5
10179: PPUSH
10180: LD_VAR 0 3
10184: PUSH
10185: LD_INT 5
10187: ARRAY
10188: PPUSH
10189: CALL_OW 234
// end ;
10193: GO 10077
10195: POP
10196: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
10197: LD_ADDR_VAR 0 3
10201: PUSH
10202: DOUBLE
10203: LD_INT 1
10205: DEC
10206: ST_TO_ADDR
10207: LD_INT 6
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: LD_INT 4
10215: PUSH
10216: LD_INT 3
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: PUSH
10225: LD_OWVAR 67
10229: ARRAY
10230: PUSH
10231: FOR_TO
10232: IFFALSE 10258
// begin PrepareApeman ( 5 ) ;
10234: LD_INT 5
10236: PPUSH
10237: CALL 49841 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10241: CALL_OW 44
10245: PPUSH
10246: LD_INT 5
10248: PPUSH
10249: LD_INT 0
10251: PPUSH
10252: CALL_OW 49
// end ;
10256: GO 10231
10258: POP
10259: POP
// for i in FilterUnitsInArea ( ruBaseArea , [ f_side , 0 ] ) do
10260: LD_ADDR_VAR 0 3
10264: PUSH
10265: LD_INT 26
10267: PPUSH
10268: LD_INT 22
10270: PUSH
10271: LD_INT 0
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 70
10282: PUSH
10283: FOR_IN
10284: IFFALSE 10297
// RemoveUnit ( i ) ;
10286: LD_VAR 0 3
10290: PPUSH
10291: CALL_OW 64
10295: GO 10283
10297: POP
10298: POP
// end ;
10299: LD_VAR 0 1
10303: RET
// export function CreateDeposits ; var i , oil , sib ; begin
10304: LD_INT 0
10306: PPUSH
10307: PPUSH
10308: PPUSH
10309: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
10310: LD_ADDR_VAR 0 3
10314: PUSH
10315: LD_INT 91
10317: PUSH
10318: LD_INT 13
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 52
10327: PUSH
10328: LD_INT 23
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 115
10337: PUSH
10338: LD_INT 150
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
10350: LD_ADDR_VAR 0 4
10354: PUSH
10355: LD_INT 82
10357: PUSH
10358: LD_INT 42
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 128
10367: PUSH
10368: LD_INT 132
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: ST_TO_ADDR
// for i in oil do
10379: LD_ADDR_VAR 0 2
10383: PUSH
10384: LD_VAR 0 3
10388: PUSH
10389: FOR_IN
10390: IFFALSE 10469
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
10392: LD_VAR 0 2
10396: PUSH
10397: LD_INT 1
10399: ARRAY
10400: PPUSH
10401: LD_VAR 0 2
10405: PUSH
10406: LD_INT 2
10408: ARRAY
10409: PPUSH
10410: LD_INT 2
10412: PPUSH
10413: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10417: LD_VAR 0 2
10421: PUSH
10422: LD_INT 1
10424: ARRAY
10425: PPUSH
10426: LD_VAR 0 2
10430: PUSH
10431: LD_INT 2
10433: ARRAY
10434: PPUSH
10435: LD_INT 2
10437: PPUSH
10438: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10442: LD_VAR 0 2
10446: PUSH
10447: LD_INT 1
10449: ARRAY
10450: PPUSH
10451: LD_VAR 0 2
10455: PUSH
10456: LD_INT 2
10458: ARRAY
10459: PPUSH
10460: LD_INT 6
10462: PPUSH
10463: CALL_OW 441
// end ;
10467: GO 10389
10469: POP
10470: POP
// for i in sib do
10471: LD_ADDR_VAR 0 2
10475: PUSH
10476: LD_VAR 0 4
10480: PUSH
10481: FOR_IN
10482: IFFALSE 10561
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
10484: LD_VAR 0 2
10488: PUSH
10489: LD_INT 1
10491: ARRAY
10492: PPUSH
10493: LD_VAR 0 2
10497: PUSH
10498: LD_INT 2
10500: ARRAY
10501: PPUSH
10502: LD_INT 3
10504: PPUSH
10505: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10509: LD_VAR 0 2
10513: PUSH
10514: LD_INT 1
10516: ARRAY
10517: PPUSH
10518: LD_VAR 0 2
10522: PUSH
10523: LD_INT 2
10525: ARRAY
10526: PPUSH
10527: LD_INT 2
10529: PPUSH
10530: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10534: LD_VAR 0 2
10538: PUSH
10539: LD_INT 1
10541: ARRAY
10542: PPUSH
10543: LD_VAR 0 2
10547: PUSH
10548: LD_INT 2
10550: ARRAY
10551: PPUSH
10552: LD_INT 6
10554: PPUSH
10555: CALL_OW 441
// end ;
10559: GO 10481
10561: POP
10562: POP
// end ;
10563: LD_VAR 0 1
10567: RET
// export function LoadCam ; var i , tmp ; begin
10568: LD_INT 0
10570: PPUSH
10571: PPUSH
10572: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
10573: LD_ADDR_VAR 0 3
10577: PUSH
10578: LD_STRING 09_cameras
10580: PPUSH
10581: EMPTY
10582: PPUSH
10583: CALL_OW 30
10587: ST_TO_ADDR
// if not tmp then
10588: LD_VAR 0 3
10592: NOT
10593: IFFALSE 10597
// exit ;
10595: GO 10639
// for i in tmp do
10597: LD_ADDR_VAR 0 2
10601: PUSH
10602: LD_VAR 0 3
10606: PUSH
10607: FOR_IN
10608: IFFALSE 10637
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
10610: LD_VAR 0 2
10614: PUSH
10615: LD_INT 1
10617: ARRAY
10618: PPUSH
10619: LD_VAR 0 2
10623: PUSH
10624: LD_INT 2
10626: ARRAY
10627: PPUSH
10628: LD_INT 2
10630: PPUSH
10631: CALL_OW 244
10635: GO 10607
10637: POP
10638: POP
// end ;
10639: LD_VAR 0 1
10643: RET
// export function LoadTech ; var i , tmp , default ; begin
10644: LD_INT 0
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
// default := [ 2 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
10650: LD_ADDR_VAR 0 4
10654: PUSH
10655: LD_INT 2
10657: PUSH
10658: LD_INT 2
10660: PUSH
10661: LD_INT 0
10663: PUSH
10664: LD_INT 0
10666: PUSH
10667: LD_INT 0
10669: PUSH
10670: LD_INT 2
10672: PUSH
10673: LD_INT 2
10675: PUSH
10676: LD_INT 0
10678: PUSH
10679: LD_INT 1
10681: PUSH
10682: LD_INT 0
10684: PUSH
10685: LD_INT 2
10687: PUSH
10688: LD_INT 0
10690: PUSH
10691: LD_INT 0
10693: PUSH
10694: LD_INT 0
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 0
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: LD_INT 1
10708: PUSH
10709: LD_INT 0
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: LD_INT 1
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: LD_INT 0
10723: PUSH
10724: LD_INT 0
10726: PUSH
10727: LD_INT 0
10729: PUSH
10730: LD_INT 0
10732: PUSH
10733: LD_INT 0
10735: PUSH
10736: LD_INT 0
10738: PUSH
10739: LD_INT 0
10741: PUSH
10742: LD_INT 0
10744: PUSH
10745: LD_INT 0
10747: PUSH
10748: LD_INT 0
10750: PUSH
10751: LD_INT 0
10753: PUSH
10754: LD_INT 0
10756: PUSH
10757: LD_INT 2
10759: PUSH
10760: LD_INT 0
10762: PUSH
10763: LD_INT 0
10765: PUSH
10766: LD_INT 0
10768: PUSH
10769: LD_INT 1
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: LD_INT 1
10777: PUSH
10778: LD_INT 1
10780: PUSH
10781: LD_INT 0
10783: PUSH
10784: LD_INT 0
10786: PUSH
10787: LD_INT 2
10789: PUSH
10790: LD_INT 2
10792: PUSH
10793: LD_INT 2
10795: PUSH
10796: LD_INT 2
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 2
10804: PUSH
10805: LD_INT 1
10807: PUSH
10808: LD_INT 1
10810: PUSH
10811: LD_INT 0
10813: PUSH
10814: LD_INT 1
10816: PUSH
10817: LD_INT 0
10819: PUSH
10820: LD_INT 0
10822: PUSH
10823: LD_INT 0
10825: PUSH
10826: LD_INT 0
10828: PUSH
10829: LD_INT 0
10831: PUSH
10832: LD_INT 2
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: LD_INT 0
10840: PUSH
10841: LD_INT 0
10843: PUSH
10844: LD_INT 0
10846: PUSH
10847: LD_INT 0
10849: PUSH
10850: LD_INT 1
10852: PUSH
10853: LD_INT 0
10855: PUSH
10856: LD_INT 0
10858: PUSH
10859: LD_INT 2
10861: PUSH
10862: LD_INT 2
10864: PUSH
10865: LD_INT 0
10867: PUSH
10868: LD_INT 0
10870: PUSH
10871: LD_INT 1
10873: PUSH
10874: LD_INT 1
10876: PUSH
10877: LD_INT 1
10879: PUSH
10880: LD_INT 1
10882: PUSH
10883: LD_INT 1
10885: PUSH
10886: LD_INT 1
10888: PUSH
10889: LD_INT 1
10891: PUSH
10892: LD_INT 0
10894: PUSH
10895: LD_INT 0
10897: PUSH
10898: LD_INT 2
10900: PUSH
10901: LD_INT 2
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: LD_INT 0
10912: PUSH
10913: LD_INT 0
10915: PUSH
10916: LD_INT 0
10918: PUSH
10919: LD_INT 1
10921: PUSH
10922: LD_INT 1
10924: PUSH
10925: LD_INT 1
10927: PUSH
10928: LD_INT 1
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: LD_INT 1
10936: PUSH
10937: LD_INT 1
10939: PUSH
10940: LD_INT 1
10942: PUSH
10943: LD_INT 1
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: LD_INT 1
10951: PUSH
10952: LD_INT 1
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: ST_TO_ADDR
// tmp := LoadVariable ( 09_tech , default ) ;
11057: LD_ADDR_VAR 0 3
11061: PUSH
11062: LD_STRING 09_tech
11064: PPUSH
11065: LD_VAR 0 4
11069: PPUSH
11070: CALL_OW 30
11074: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
11075: LD_ADDR_VAR 0 2
11079: PUSH
11080: DOUBLE
11081: LD_INT 1
11083: DEC
11084: ST_TO_ADDR
11085: LD_VAR 0 3
11089: PPUSH
11090: CALL 17782 0 1
11094: PUSH
11095: FOR_TO
11096: IFFALSE 11123
// SetTech ( i , 2 , tmp [ i ] ) ;
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_INT 2
11105: PPUSH
11106: LD_VAR 0 3
11110: PUSH
11111: LD_VAR 0 2
11115: ARRAY
11116: PPUSH
11117: CALL_OW 322
11121: GO 11095
11123: POP
11124: POP
// end ;
11125: LD_VAR 0 1
11129: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
11130: LD_INT 0
11132: PPUSH
11133: PPUSH
11134: PPUSH
11135: PPUSH
11136: PPUSH
11137: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
11138: LD_ADDR_VAR 0 3
11142: PUSH
11143: LD_STRING 09_buildings
11145: PPUSH
11146: EMPTY
11147: PPUSH
11148: CALL_OW 30
11152: ST_TO_ADDR
// for i in tmp do
11153: LD_ADDR_VAR 0 2
11157: PUSH
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_IN
11164: IFFALSE 11558
// begin uc_side := 2 ;
11166: LD_ADDR_OWVAR 20
11170: PUSH
11171: LD_INT 2
11173: ST_TO_ADDR
// uc_nation := nation_arabian ;
11174: LD_ADDR_OWVAR 21
11178: PUSH
11179: LD_INT 2
11181: ST_TO_ADDR
// bc_type := i [ 1 ] ;
11182: LD_ADDR_OWVAR 42
11186: PUSH
11187: LD_VAR 0 2
11191: PUSH
11192: LD_INT 1
11194: ARRAY
11195: ST_TO_ADDR
// bc_level := i [ 5 ] ;
11196: LD_ADDR_OWVAR 43
11200: PUSH
11201: LD_VAR 0 2
11205: PUSH
11206: LD_INT 5
11208: ARRAY
11209: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
11210: LD_ADDR_OWVAR 44
11214: PUSH
11215: LD_INT 9
11217: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
11218: LD_ADDR_OWVAR 45
11222: PUSH
11223: LD_INT 9
11225: ST_TO_ADDR
// if i [ 7 ] then
11226: LD_VAR 0 2
11230: PUSH
11231: LD_INT 7
11233: ARRAY
11234: IFFALSE 11274
// begin bc_kind1 := i [ 7 ] ;
11236: LD_ADDR_OWVAR 44
11240: PUSH
11241: LD_VAR 0 2
11245: PUSH
11246: LD_INT 7
11248: ARRAY
11249: ST_TO_ADDR
// if i [ 8 ] then
11250: LD_VAR 0 2
11254: PUSH
11255: LD_INT 8
11257: ARRAY
11258: IFFALSE 11274
// bc_kind2 := i [ 8 ] ;
11260: LD_ADDR_OWVAR 45
11264: PUSH
11265: LD_VAR 0 2
11269: PUSH
11270: LD_INT 8
11272: ARRAY
11273: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
11274: LD_ADDR_VAR 0 4
11278: PUSH
11279: LD_VAR 0 2
11283: PUSH
11284: LD_INT 2
11286: ARRAY
11287: PPUSH
11288: LD_VAR 0 2
11292: PUSH
11293: LD_INT 3
11295: ARRAY
11296: PPUSH
11297: LD_VAR 0 2
11301: PUSH
11302: LD_INT 4
11304: ARRAY
11305: PPUSH
11306: CALL_OW 47
11310: ST_TO_ADDR
// if i [ 8 ] then
11311: LD_VAR 0 2
11315: PUSH
11316: LD_INT 8
11318: ARRAY
11319: IFFALSE 11339
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
11321: LD_VAR 0 4
11325: PPUSH
11326: LD_VAR 0 2
11330: PUSH
11331: LD_INT 8
11333: ARRAY
11334: PPUSH
11335: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
11339: LD_VAR 0 2
11343: PUSH
11344: LD_INT 1
11346: ARRAY
11347: PUSH
11348: LD_INT 0
11350: PUSH
11351: LD_INT 1
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: IN
11358: IFFALSE 11556
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
11360: LD_ADDR_VAR 0 6
11364: PUSH
11365: LD_STRING 09_materials
11367: PPUSH
11368: LD_INT 100
11370: PUSH
11371: LD_INT 50
11373: PUSH
11374: LD_INT 30
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: LIST
11381: PUSH
11382: EMPTY
11383: LIST
11384: PPUSH
11385: CALL_OW 30
11389: ST_TO_ADDR
// for j := 1 to 3 do
11390: LD_ADDR_VAR 0 5
11394: PUSH
11395: DOUBLE
11396: LD_INT 1
11398: DEC
11399: ST_TO_ADDR
11400: LD_INT 3
11402: PUSH
11403: FOR_TO
11404: IFFALSE 11554
// if mat [ 1 ] [ j ] then
11406: LD_VAR 0 6
11410: PUSH
11411: LD_INT 1
11413: ARRAY
11414: PUSH
11415: LD_VAR 0 5
11419: ARRAY
11420: IFFALSE 11552
// if j > 1 then
11422: LD_VAR 0 5
11426: PUSH
11427: LD_INT 1
11429: GREATER
11430: IFFALSE 11493
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 35 , 25 , 20 , 10 ] [ Difficulty ] ) else
11432: LD_VAR 0 4
11436: PPUSH
11437: CALL_OW 274
11441: PPUSH
11442: LD_VAR 0 5
11446: PPUSH
11447: LD_VAR 0 6
11451: PUSH
11452: LD_INT 1
11454: ARRAY
11455: PUSH
11456: LD_VAR 0 5
11460: ARRAY
11461: PUSH
11462: LD_INT 35
11464: PUSH
11465: LD_INT 25
11467: PUSH
11468: LD_INT 20
11470: PUSH
11471: LD_INT 10
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: PUSH
11480: LD_OWVAR 67
11484: ARRAY
11485: PLUS
11486: PPUSH
11487: CALL_OW 277
11491: GO 11552
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 350 , 250 , 150 , 100 ] [ Difficulty ] ) ;
11493: LD_VAR 0 4
11497: PPUSH
11498: CALL_OW 274
11502: PPUSH
11503: LD_VAR 0 5
11507: PPUSH
11508: LD_VAR 0 6
11512: PUSH
11513: LD_INT 1
11515: ARRAY
11516: PUSH
11517: LD_VAR 0 5
11521: ARRAY
11522: PUSH
11523: LD_INT 350
11525: PUSH
11526: LD_INT 250
11528: PUSH
11529: LD_INT 150
11531: PUSH
11532: LD_INT 100
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: PUSH
11541: LD_OWVAR 67
11545: ARRAY
11546: PLUS
11547: PPUSH
11548: CALL_OW 277
11552: GO 11403
11554: POP
11555: POP
// end ; end ;
11556: GO 11163
11558: POP
11559: POP
// end ;
11560: LD_VAR 0 1
11564: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
11565: LD_INT 0
11567: PPUSH
11568: PPUSH
// area = ListEnvironmentArea ( area ) ;
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: LD_VAR 0 2
11578: PPUSH
11579: CALL_OW 353
11583: ST_TO_ADDR
// if bulldozer > 0 then
11584: LD_VAR 0 1
11588: PUSH
11589: LD_INT 0
11591: GREATER
11592: IFFALSE 11703
// for i = area downto 1 do
11594: LD_ADDR_VAR 0 4
11598: PUSH
11599: DOUBLE
11600: LD_VAR 0 2
11604: INC
11605: ST_TO_ADDR
11606: LD_INT 1
11608: PUSH
11609: FOR_DOWNTO
11610: IFFALSE 11701
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
11612: LD_VAR 0 2
11616: PUSH
11617: LD_VAR 0 4
11621: ARRAY
11622: PUSH
11623: LD_INT 1
11625: ARRAY
11626: PPUSH
11627: LD_VAR 0 2
11631: PUSH
11632: LD_VAR 0 4
11636: ARRAY
11637: PUSH
11638: LD_INT 2
11640: ARRAY
11641: PPUSH
11642: CALL_OW 351
11646: IFFALSE 11699
// if not HasTask ( bulldozer ) then
11648: LD_VAR 0 1
11652: PPUSH
11653: CALL_OW 314
11657: NOT
11658: IFFALSE 11699
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
11660: LD_VAR 0 1
11664: PPUSH
11665: LD_VAR 0 2
11669: PUSH
11670: LD_VAR 0 4
11674: ARRAY
11675: PUSH
11676: LD_INT 1
11678: ARRAY
11679: PPUSH
11680: LD_VAR 0 2
11684: PUSH
11685: LD_VAR 0 4
11689: ARRAY
11690: PUSH
11691: LD_INT 2
11693: ARRAY
11694: PPUSH
11695: CALL_OW 171
11699: GO 11609
11701: POP
11702: POP
// end ; end_of_file
11703: LD_VAR 0 3
11707: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11708: LD_VAR 0 1
11712: PPUSH
11713: LD_VAR 0 2
11717: PPUSH
11718: CALL 75461 0 2
// if GetControl ( vehicle ) = control_apeman then
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 263
11731: PUSH
11732: LD_INT 5
11734: EQUAL
11735: IFFALSE 11747
// begin apeDriver := true ;
11737: LD_ADDR_EXP 8
11741: PUSH
11742: LD_INT 1
11744: ST_TO_ADDR
// exit ;
11745: GO 11800
// end ; if GetSide ( factory ) = 6 then
11747: LD_VAR 0 2
11751: PPUSH
11752: CALL_OW 255
11756: PUSH
11757: LD_INT 6
11759: EQUAL
11760: IFFALSE 11800
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
11762: LD_ADDR_EXP 35
11766: PUSH
11767: LD_EXP 35
11771: PPUSH
11772: LD_INT 1
11774: PPUSH
11775: CALL_OW 3
11779: ST_TO_ADDR
// ruTanks := Join ( ruTanks , vehicle ) ;
11780: LD_ADDR_EXP 36
11784: PUSH
11785: LD_EXP 36
11789: PPUSH
11790: LD_VAR 0 1
11794: PPUSH
11795: CALL 53714 0 2
11799: ST_TO_ADDR
// end ; end ;
11800: PPOPN 2
11802: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) = 6 and not See ( 2 , unit ) then
11803: LD_VAR 0 2
11807: PPUSH
11808: CALL_OW 255
11812: PUSH
11813: LD_INT 6
11815: EQUAL
11816: IFFALSE 11833
11818: PUSH
11819: LD_INT 2
11821: PPUSH
11822: LD_VAR 0 2
11826: PPUSH
11827: CALL_OW 292
11831: NOT
11832: AND
11833: IFFALSE 11847
// SetLives ( unit , 1000 ) ;
11835: LD_VAR 0 2
11839: PPUSH
11840: LD_INT 1000
11842: PPUSH
11843: CALL_OW 234
// end ;
11847: PPOPN 2
11849: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area , fac , arm ;
11850: LD_INT 0
11852: PPUSH
11853: PPUSH
11854: PPUSH
11855: PPUSH
// begin if GetSide ( driver ) = 3 then
11856: LD_VAR 0 1
11860: PPUSH
11861: CALL_OW 255
11865: PUSH
11866: LD_INT 3
11868: EQUAL
11869: IFFALSE 12010
// begin tag := GetTag ( driver ) ;
11871: LD_ADDR_VAR 0 5
11875: PUSH
11876: LD_VAR 0 1
11880: PPUSH
11881: CALL_OW 110
11885: ST_TO_ADDR
// area := [ ruSpawn1AArea , ruSpawn2AArea , ruSpawn3AArea ] [ tag ] ;
11886: LD_ADDR_VAR 0 6
11890: PUSH
11891: LD_INT 21
11893: PUSH
11894: LD_INT 22
11896: PUSH
11897: LD_INT 23
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: LIST
11904: PUSH
11905: LD_VAR 0 5
11909: ARRAY
11910: ST_TO_ADDR
// if not area then
11911: LD_VAR 0 6
11915: NOT
11916: IFFALSE 11920
// exit ;
11918: GO 12278
// repeat ComMoveToArea ( driver , area ) ;
11920: LD_VAR 0 1
11924: PPUSH
11925: LD_VAR 0 6
11929: PPUSH
11930: CALL_OW 113
// wait ( 0 0$3 ) ;
11934: LD_INT 105
11936: PPUSH
11937: CALL_OW 67
// if not IsOk ( driver ) then
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 302
11950: NOT
11951: IFFALSE 11955
// exit ;
11953: GO 12278
// until IsInArea ( driver , ruSpawn1Area ) or IsInArea ( driver , ruSpawn2Area ) or IsInArea ( driver , ruSpawn3Area ) ;
11955: LD_VAR 0 1
11959: PPUSH
11960: LD_INT 15
11962: PPUSH
11963: CALL_OW 308
11967: IFTRUE 11983
11969: PUSH
11970: LD_VAR 0 1
11974: PPUSH
11975: LD_INT 17
11977: PPUSH
11978: CALL_OW 308
11982: OR
11983: IFTRUE 11999
11985: PUSH
11986: LD_VAR 0 1
11990: PPUSH
11991: LD_INT 19
11993: PPUSH
11994: CALL_OW 308
11998: OR
11999: IFFALSE 11920
// RemoveUnit ( driver ) ;
12001: LD_VAR 0 1
12005: PPUSH
12006: CALL_OW 64
// end ; if GetSide ( driver ) = 6 then
12010: LD_VAR 0 1
12014: PPUSH
12015: CALL_OW 255
12019: PUSH
12020: LD_INT 6
12022: EQUAL
12023: IFFALSE 12278
// begin ComMoveXY ( driver , 97 , 139 ) ;
12025: LD_VAR 0 1
12029: PPUSH
12030: LD_INT 97
12032: PPUSH
12033: LD_INT 139
12035: PPUSH
12036: CALL_OW 111
// if GetLives ( driver ) < 1000 then
12040: LD_VAR 0 1
12044: PPUSH
12045: CALL_OW 256
12049: PUSH
12050: LD_INT 1000
12052: LESS
12053: IFFALSE 12067
// SetTag ( driver , tHeal ) ;
12055: LD_VAR 0 1
12059: PPUSH
12060: LD_INT 3
12062: PPUSH
12063: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
12067: LD_INT 35
12069: PPUSH
12070: CALL_OW 67
// if IsDead ( driver ) then
12074: LD_VAR 0 1
12078: PPUSH
12079: CALL_OW 301
12083: IFFALSE 12087
// exit ;
12085: GO 12278
// until GetLives ( driver ) = 1000 ;
12087: LD_VAR 0 1
12091: PPUSH
12092: CALL_OW 256
12096: PUSH
12097: LD_INT 1000
12099: EQUAL
12100: IFFALSE 12067
// SetTag ( driver , 0 ) ;
12102: LD_VAR 0 1
12106: PPUSH
12107: LD_INT 0
12109: PPUSH
12110: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12114: LD_ADDR_VAR 0 7
12118: PUSH
12119: LD_INT 26
12121: PPUSH
12122: LD_INT 22
12124: PUSH
12125: LD_INT 6
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 30
12134: PUSH
12135: LD_INT 3
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 50
12144: PUSH
12145: EMPTY
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 70
12157: ST_TO_ADDR
// if fac then
12158: LD_VAR 0 7
12162: IFFALSE 12184
// begin ComEnterUnit ( driver , fac [ 1 ] ) ;
12164: LD_VAR 0 1
12168: PPUSH
12169: LD_VAR 0 7
12173: PUSH
12174: LD_INT 1
12176: ARRAY
12177: PPUSH
12178: CALL_OW 120
// exit ;
12182: GO 12278
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_barracks ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
12184: LD_ADDR_VAR 0 8
12188: PUSH
12189: LD_INT 26
12191: PPUSH
12192: LD_INT 22
12194: PUSH
12195: LD_INT 6
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 30
12204: PUSH
12205: LD_INT 5
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 3
12214: PUSH
12215: LD_INT 62
12217: PUSH
12218: EMPTY
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 50
12227: PUSH
12228: EMPTY
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PPUSH
12237: CALL_OW 70
12241: ST_TO_ADDR
// if arm then
12242: LD_VAR 0 8
12246: IFFALSE 12278
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
12248: LD_VAR 0 1
12252: PPUSH
12253: LD_VAR 0 8
12257: PUSH
12258: LD_INT 1
12260: ARRAY
12261: PPUSH
12262: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
12266: LD_VAR 0 1
12270: PPUSH
12271: LD_INT 1
12273: PPUSH
12274: CALL_OW 183
// end ; end ; end ;
12278: PPOPN 8
12280: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
12281: LD_VAR 0 3
12285: PUSH
12286: LD_INT 17
12288: EQUAL
12289: IFFALSE 12299
// kamikazeTrained := true ;
12291: LD_ADDR_EXP 6
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// end ;
12299: PPOPN 3
12301: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
12302: LD_VAR 0 1
12306: PPUSH
12307: CALL 75403 0 1
// if un in ruTanks then
12311: LD_VAR 0 1
12315: PUSH
12316: LD_EXP 36
12320: IN
12321: IFFALSE 12384
// ruConstructList := Join ( ruConstructList , [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ) ;
12323: LD_ADDR_EXP 35
12327: PUSH
12328: LD_EXP 35
12332: PPUSH
12333: LD_VAR 0 1
12337: PPUSH
12338: CALL_OW 265
12342: PUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: CALL_OW 262
12352: PUSH
12353: LD_VAR 0 1
12357: PPUSH
12358: CALL_OW 263
12362: PUSH
12363: LD_VAR 0 1
12367: PPUSH
12368: CALL_OW 264
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: PPUSH
12379: CALL 53714 0 2
12383: ST_TO_ADDR
// if un = Schulz then
12384: LD_VAR 0 1
12388: PUSH
12389: LD_EXP 24
12393: EQUAL
12394: IFFALSE 12403
// YouLost ( Schulz ) ;
12396: LD_STRING Schulz
12398: PPUSH
12399: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
12403: LD_VAR 0 1
12407: PUSH
12408: LD_EXP 13
12412: EQUAL
12413: IFFALSE 12430
12415: PUSH
12416: LD_VAR 0 1
12420: PPUSH
12421: CALL_OW 255
12425: PUSH
12426: LD_INT 2
12428: EQUAL
12429: AND
12430: IFFALSE 12439
// YouLost ( Heike ) ;
12432: LD_STRING Heike
12434: PPUSH
12435: CALL_OW 104
// end ; end_of_file
12439: PPOPN 1
12441: END
// export function Action ; begin
12442: LD_INT 0
12444: PPUSH
// InGameOn ;
12445: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
12449: LD_INT 1
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_INT 2
12457: PPUSH
12458: LD_INT 32963
12460: NEG
12461: PPUSH
12462: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
12466: LD_INT 1
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: LD_INT 2
12474: PPUSH
12475: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
12479: LD_INT 173
12481: PPUSH
12482: LD_INT 149
12484: PPUSH
12485: CALL_OW 86
// PrepareExtraRussianBase ;
12489: CALL 3366 0 0
// wait ( 0 0$2 ) ;
12493: LD_INT 70
12495: PPUSH
12496: CALL_OW 67
// InGameOff ;
12500: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
12504: LD_STRING M6
12506: PPUSH
12507: CALL_OW 337
// if Count ( UnitFilter ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] , [ f_ok ] ) ) = Count ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] ) then
12511: LD_EXP 14
12515: PUSH
12516: LD_EXP 15
12520: PUSH
12521: LD_EXP 17
12525: PUSH
12526: LD_EXP 18
12530: PUSH
12531: LD_EXP 20
12535: PUSH
12536: LD_EXP 21
12540: PUSH
12541: LD_EXP 22
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: PPUSH
12555: LD_INT 50
12557: PUSH
12558: EMPTY
12559: LIST
12560: PPUSH
12561: CALL_OW 72
12565: PPUSH
12566: CALL 17782 0 1
12570: PUSH
12571: LD_EXP 14
12575: PUSH
12576: LD_EXP 15
12580: PUSH
12581: LD_EXP 17
12585: PUSH
12586: LD_EXP 18
12590: PUSH
12591: LD_EXP 20
12595: PUSH
12596: LD_EXP 21
12600: PUSH
12601: LD_EXP 22
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: PPUSH
12615: CALL 17782 0 1
12619: EQUAL
12620: IFFALSE 12629
// SetAchievement ( ACH_KNIGHT ) ;
12622: LD_STRING ACH_KNIGHT
12624: PPUSH
12625: CALL_OW 543
// SaveForQuickRestart ;
12629: CALL_OW 22
// end ;
12633: LD_VAR 0 1
12637: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
12638: LD_EXP 5
12642: IFFALSE 12655
12644: PUSH
12645: LD_EXP 33
12649: PPUSH
12650: CALL_OW 302
12654: AND
12655: IFFALSE 12668
12657: PUSH
12658: LD_EXP 13
12662: PPUSH
12663: CALL_OW 302
12667: AND
12668: IFFALSE 12739
12670: PUSH
12671: LD_EXP 13
12675: PPUSH
12676: LD_EXP 33
12680: PPUSH
12681: CALL_OW 296
12685: PUSH
12686: LD_INT 9
12688: LESS
12689: IFTRUE 12738
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_INT 2
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 91
12704: PUSH
12705: LD_EXP 13
12709: PUSH
12710: LD_INT 7
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 21
12720: PUSH
12721: LD_INT 3
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: LIST
12732: PPUSH
12733: CALL_OW 69
12737: OR
12738: AND
12739: IFFALSE 12893
12741: GO 12743
12743: DISABLE
// begin ComExit ( Rolf ) ;
12744: LD_EXP 33
12748: PPUSH
12749: CALL 54112 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
12753: LD_EXP 33
12757: PPUSH
12758: LD_EXP 13
12762: PPUSH
12763: CALL_OW 172
// InGameOn ;
12767: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
12771: LD_EXP 13
12775: PPUSH
12776: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
12780: LD_EXP 33
12784: PPUSH
12785: LD_STRING DRf-Reunion-1
12787: PPUSH
12788: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
12792: LD_EXP 33
12796: PPUSH
12797: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
12801: LD_EXP 13
12805: PPUSH
12806: LD_EXP 33
12810: PPUSH
12811: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
12815: LD_EXP 33
12819: PPUSH
12820: LD_EXP 13
12824: PPUSH
12825: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
12829: LD_EXP 13
12833: PPUSH
12834: LD_STRING DH-Reunion-2
12836: PPUSH
12837: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
12841: LD_EXP 33
12845: PPUSH
12846: LD_STRING DRf-Reunion-3
12848: PPUSH
12849: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
12853: LD_EXP 13
12857: PPUSH
12858: LD_STRING DH-Reunion-4
12860: PPUSH
12861: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
12865: LD_EXP 33
12869: PPUSH
12870: LD_STRING DRf-Reunion-5
12872: PPUSH
12873: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
12877: LD_EXP 13
12881: PPUSH
12882: LD_STRING DH-Reunion-6
12884: PPUSH
12885: CALL_OW 88
// InGameOff ;
12889: CALL_OW 9
// end ;
12893: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
12894: LD_EXP 5
12898: NOT
12899: IFFALSE 12948
12901: PUSH
12902: LD_INT 22
12904: PUSH
12905: LD_INT 2
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 91
12914: PUSH
12915: LD_EXP 24
12919: PUSH
12920: LD_INT 10
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 21
12930: PUSH
12931: LD_INT 3
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: PPUSH
12943: CALL_OW 69
12947: AND
12948: IFFALSE 13737
12950: GO 12952
12952: DISABLE
// begin InGameOn ;
12953: CALL_OW 8
// ComExit ( Schulz ) ;
12957: LD_EXP 24
12961: PPUSH
12962: CALL 54112 0 1
// CenterNowOnUnits ( Schulz ) ;
12966: LD_EXP 24
12970: PPUSH
12971: CALL_OW 87
// wait ( 0 0$0.3 ) ;
12975: LD_INT 10
12977: PPUSH
12978: CALL_OW 67
// DialogueOn ;
12982: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
12986: LD_EXP 24
12990: PPUSH
12991: LD_STRING DL-Def-1
12993: PPUSH
12994: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
12998: LD_EXP 24
13002: PPUSH
13003: LD_STRING DL-Def-2
13005: PPUSH
13006: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
13010: LD_EXP 24
13014: PPUSH
13015: LD_STRING DL-Def-3
13017: PPUSH
13018: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
13022: LD_EXP 25
13026: PPUSH
13027: CALL_OW 302
13031: IFFALSE 13044
13033: PUSH
13034: LD_EXP 23
13038: PPUSH
13039: CALL_OW 302
13043: AND
13044: IFFALSE 13391
// begin Say ( Basim , DBs-Def-4 ) ;
13046: LD_EXP 25
13050: PPUSH
13051: LD_STRING DBs-Def-4
13053: PPUSH
13054: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13058: LD_EXP 25
13062: PPUSH
13063: LD_STRING DBs-Def-5
13065: PPUSH
13066: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
13070: LD_EXP 23
13074: PPUSH
13075: LD_STRING DA-Def-6
13077: PPUSH
13078: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
13082: LD_EXP 25
13086: PPUSH
13087: LD_STRING DBs-Def-7
13089: PPUSH
13090: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
13094: LD_EXP 23
13098: PPUSH
13099: LD_STRING DA-Def-8
13101: PPUSH
13102: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
13106: LD_EXP 23
13110: PPUSH
13111: LD_STRING DA-Def-9
13113: PPUSH
13114: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
13118: LD_EXP 25
13122: PPUSH
13123: LD_STRING DBs-Def-10
13125: PPUSH
13126: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
13130: LD_EXP 23
13134: PPUSH
13135: LD_STRING DA-Def-11
13137: PPUSH
13138: CALL_OW 88
// if Query ( QTech ) = 1 then
13142: LD_STRING QTech
13144: PPUSH
13145: CALL_OW 97
13149: PUSH
13150: LD_INT 1
13152: EQUAL
13153: IFFALSE 13261
// begin Say ( Schulz , DL-Tech-1 ) ;
13155: LD_EXP 24
13159: PPUSH
13160: LD_STRING DL-Tech-1
13162: PPUSH
13163: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
13167: LD_EXP 24
13171: PPUSH
13172: LD_STRING DL-Tech-2
13174: PPUSH
13175: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
13179: LD_EXP 23
13183: PPUSH
13184: LD_STRING DA-Tech-3
13186: PPUSH
13187: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
13191: LD_EXP 18
13195: PPUSH
13196: LD_STRING DK-Tech-4
13198: PPUSH
13199: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
13203: LD_EXP 18
13207: PPUSH
13208: LD_STRING DK-Tech-5
13210: PPUSH
13211: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
13215: LD_EXP 25
13219: PPUSH
13220: LD_STRING DBs-Tech-6
13222: PPUSH
13223: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
13227: LD_EXP 18
13231: PPUSH
13232: LD_STRING DK-Tech-7
13234: PPUSH
13235: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
13239: LD_INT 3
13241: PPUSH
13242: LD_INT 2
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
13252: LD_STRING M7a
13254: PPUSH
13255: CALL_OW 604
// end else
13259: GO 13389
// begin Say ( Schulz , DL-Tech-a-1 ) ;
13261: LD_EXP 24
13265: PPUSH
13266: LD_STRING DL-Tech-a-1
13268: PPUSH
13269: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
13273: LD_EXP 24
13277: PPUSH
13278: LD_STRING DL-Tech-a-2
13280: PPUSH
13281: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
13285: LD_EXP 25
13289: PPUSH
13290: LD_STRING DBs-Tech-a-3
13292: PPUSH
13293: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
13297: LD_EXP 18
13301: PPUSH
13302: LD_STRING DK-Tech-a-4
13304: PPUSH
13305: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
13309: LD_EXP 18
13313: PPUSH
13314: LD_STRING DK-Tech-a-5
13316: PPUSH
13317: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
13321: LD_EXP 23
13325: PPUSH
13326: LD_STRING DA-Tech-a-6
13328: PPUSH
13329: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
13333: LD_EXP 23
13337: PPUSH
13338: LD_STRING DA-Tech-a-7
13340: PPUSH
13341: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
13345: LD_EXP 24
13349: PPUSH
13350: LD_STRING DL-Tech-a-8
13352: PPUSH
13353: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
13357: LD_EXP 23
13361: PPUSH
13362: LD_STRING DA-Tech-a-9
13364: PPUSH
13365: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13369: LD_INT 4
13371: PPUSH
13372: LD_INT 2
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
13382: LD_STRING M7b
13384: PPUSH
13385: CALL_OW 604
// end ; end else
13389: GO 13439
// if IsOk ( Basim ) then
13391: LD_EXP 25
13395: PPUSH
13396: CALL_OW 302
13400: IFFALSE 13439
// begin Say ( Basim , DBs-Def-4 ) ;
13402: LD_EXP 25
13406: PPUSH
13407: LD_STRING DBs-Def-4
13409: PPUSH
13410: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13414: LD_EXP 25
13418: PPUSH
13419: LD_STRING DBs-Def-5
13421: PPUSH
13422: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13426: LD_INT 4
13428: PPUSH
13429: LD_INT 2
13431: PPUSH
13432: LD_INT 1
13434: PPUSH
13435: CALL_OW 322
// end ; DialogueOff ;
13439: CALL_OW 7
// InGameOff ;
13443: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
13447: LD_STRING M7
13449: PPUSH
13450: CALL_OW 337
// playerInBase := true ;
13454: LD_ADDR_EXP 5
13458: PUSH
13459: LD_INT 1
13461: ST_TO_ADDR
// wait ( 0 0$30 ) ;
13462: LD_INT 1050
13464: PPUSH
13465: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13469: LD_INT 35
13471: PPUSH
13472: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) ;
13476: LD_INT 22
13478: PUSH
13479: LD_INT 2
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: LD_INT 50
13488: PUSH
13489: EMPTY
13490: LIST
13491: PUSH
13492: LD_INT 3
13494: PUSH
13495: LD_INT 57
13497: PUSH
13498: EMPTY
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 30
13507: PUSH
13508: LD_INT 30
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: PPUSH
13521: CALL_OW 69
13525: IFFALSE 13469
// if IsOk ( Kurt ) then
13527: LD_EXP 22
13531: PPUSH
13532: CALL_OW 302
13536: IFFALSE 13724
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
13538: LD_INT 22
13540: PUSH
13541: LD_INT 2
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 50
13550: PUSH
13551: EMPTY
13552: LIST
13553: PUSH
13554: LD_INT 3
13556: PUSH
13557: LD_INT 57
13559: PUSH
13560: EMPTY
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 30
13569: PUSH
13570: LD_INT 30
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PPUSH
13583: CALL_OW 69
13587: PUSH
13588: LD_INT 1
13590: ARRAY
13591: PPUSH
13592: CALL_OW 87
// DialogueOn ;
13596: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
13600: LD_EXP 22
13604: PPUSH
13605: LD_STRING DKs-Med-1
13607: PPUSH
13608: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
13612: LD_EXP 22
13616: PPUSH
13617: LD_STRING DKs-Med-2
13619: PPUSH
13620: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
13624: LD_EXP 24
13628: PPUSH
13629: LD_STRING DL-Med-3
13631: PPUSH
13632: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
13636: LD_EXP 24
13640: PPUSH
13641: LD_STRING DL-Med-4
13643: PPUSH
13644: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
13648: LD_EXP 22
13652: PPUSH
13653: LD_STRING DKs-Med-5
13655: PPUSH
13656: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
13660: LD_EXP 22
13664: PPUSH
13665: LD_STRING DKs-Med-6
13667: PPUSH
13668: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
13672: LD_EXP 22
13676: PPUSH
13677: LD_STRING DKs-Med-7
13679: PPUSH
13680: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
13684: LD_EXP 22
13688: PPUSH
13689: LD_STRING DKs-Med-8
13691: PPUSH
13692: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
13696: LD_EXP 24
13700: PPUSH
13701: LD_STRING DL-Med-9
13703: PPUSH
13704: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
13708: LD_EXP 24
13712: PPUSH
13713: LD_STRING DL-Med-10
13715: PPUSH
13716: CALL_OW 88
// DialogueOff ;
13720: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
13724: LD_STRING M8-
13726: PUSH
13727: LD_OWVAR 67
13731: STR
13732: PPUSH
13733: CALL_OW 337
// end ;
13737: END
// every 0 0$1 trigger playerInBase do
13738: LD_EXP 5
13742: IFFALSE 13762
13744: GO 13746
13746: DISABLE
// begin enable ;
13747: ENABLE
// missionTime := missionTime + 0 0$1 ;
13748: LD_ADDR_EXP 9
13752: PUSH
13753: LD_EXP 9
13757: PUSH
13758: LD_INT 35
13760: PLUS
13761: ST_TO_ADDR
// end ;
13762: END
// every 0 0$2 trigger playerInBase and apeDriver do
13763: LD_EXP 5
13767: IFFALSE 13775
13769: PUSH
13770: LD_EXP 8
13774: AND
13775: IFFALSE 14172
13777: GO 13779
13779: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
13780: LD_STRING M7a_out
13782: PPUSH
13783: CALL_OW 337
// wait ( 0 0$2 ) ;
13787: LD_INT 70
13789: PPUSH
13790: CALL_OW 67
// DialogueOn ;
13794: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
13798: LD_INT 22
13800: PUSH
13801: LD_INT 2
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 33
13810: PUSH
13811: LD_INT 5
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PPUSH
13822: CALL_OW 69
13826: PUSH
13827: LD_INT 1
13829: ARRAY
13830: PPUSH
13831: CALL_OW 87
// if IsOk ( Mia ) then
13835: LD_EXP 27
13839: PPUSH
13840: CALL_OW 302
13844: IFFALSE 13870
// begin Say ( Mia , DMm-Apedrive-1 ) ;
13846: LD_EXP 27
13850: PPUSH
13851: LD_STRING DMm-Apedrive-1
13853: PPUSH
13854: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
13858: LD_EXP 15
13862: PPUSH
13863: LD_STRING DM-Apedrive-2
13865: PPUSH
13866: CALL_OW 88
// end ; if IsOk ( Jenna ) then
13870: LD_EXP 29
13874: PPUSH
13875: CALL_OW 302
13879: IFFALSE 14168
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
13881: LD_EXP 29
13885: PPUSH
13886: LD_STRING DJm-Apedrive-3
13888: PPUSH
13889: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
13893: LD_EXP 29
13897: PPUSH
13898: LD_STRING DJm-Apedrive-4
13900: PPUSH
13901: CALL_OW 88
// if IsOk ( Basim ) then
13905: LD_EXP 25
13909: PPUSH
13910: CALL_OW 302
13914: IFFALSE 14168
// begin Say ( Basim , DBs-Apedrive-5 ) ;
13916: LD_EXP 25
13920: PPUSH
13921: LD_STRING DBs-Apedrive-5
13923: PPUSH
13924: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
13928: LD_EXP 25
13932: PPUSH
13933: LD_STRING DBs-Apedrive-6
13935: PPUSH
13936: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
13940: LD_EXP 29
13944: PPUSH
13945: LD_STRING DJm-Apedrive-7
13947: PPUSH
13948: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
13952: LD_EXP 25
13956: PPUSH
13957: LD_STRING DBs-Apedrive-8
13959: PPUSH
13960: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
13964: LD_EXP 29
13968: PPUSH
13969: LD_STRING DJm-Apedrive-9
13971: PPUSH
13972: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
13976: LD_EXP 25
13980: PPUSH
13981: LD_STRING DBs-Apedrive-10
13983: PPUSH
13984: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
13988: LD_EXP 29
13992: PPUSH
13993: LD_STRING DJm-Apedrive-11
13995: PPUSH
13996: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
14000: LD_EXP 18
14004: PPUSH
14005: LD_STRING DK-Apedrive-12
14007: PPUSH
14008: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
14012: LD_EXP 29
14016: PPUSH
14017: LD_STRING DJm-Apedrive-13
14019: PPUSH
14020: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
14024: LD_EXP 29
14028: PPUSH
14029: LD_STRING DJm-Apedrive-14
14031: PPUSH
14032: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
14036: LD_EXP 29
14040: PPUSH
14041: LD_STRING DJm-Apedrive-15
14043: PPUSH
14044: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
14048: LD_EXP 29
14052: PPUSH
14053: LD_STRING DJm-Apedrive-16
14055: PPUSH
14056: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
14060: LD_EXP 27
14064: PPUSH
14065: LD_STRING DMm-Apedrive-17
14067: PPUSH
14068: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
14072: LD_EXP 27
14076: PPUSH
14077: LD_STRING DMm-Apedrive-18
14079: PPUSH
14080: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
14084: LD_EXP 27
14088: PPUSH
14089: LD_STRING DMm-Apedrive-19
14091: PPUSH
14092: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
14096: LD_EXP 27
14100: PPUSH
14101: LD_STRING DMm-Apedrive-20
14103: PPUSH
14104: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
14108: LD_EXP 18
14112: PPUSH
14113: LD_STRING DK-Apedrive-21
14115: PPUSH
14116: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
14120: LD_EXP 18
14124: PPUSH
14125: LD_STRING DK-Apedrive-22
14127: PPUSH
14128: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
14132: LD_EXP 13
14136: PPUSH
14137: LD_STRING DH-Apedrive-23
14139: PPUSH
14140: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
14144: LD_EXP 26
14148: PPUSH
14149: LD_STRING DLt-Apedrive-24
14151: PPUSH
14152: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
14156: LD_EXP 26
14160: PPUSH
14161: LD_STRING DLt-Apedrive-25
14163: PPUSH
14164: CALL_OW 88
// end ; end ; DialogueOff ;
14168: CALL_OW 7
// end ;
14172: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
14173: LD_EXP 5
14177: IFFALSE 14185
14179: PUSH
14180: LD_EXP 6
14184: AND
14185: IFFALSE 14197
14187: GO 14189
14189: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
14190: LD_STRING M7b_out
14192: PPUSH
14193: CALL_OW 337
14197: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
14198: LD_EXP 5
14202: IFFALSE 14248
14204: PUSH
14205: LD_INT 22
14207: PUSH
14208: LD_INT 2
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 30
14217: PUSH
14218: LD_INT 3
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 3
14227: PUSH
14228: LD_INT 58
14230: PUSH
14231: EMPTY
14232: LIST
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: PPUSH
14243: CALL_OW 69
14247: AND
14248: IFFALSE 14261
14250: PUSH
14251: LD_EXP 13
14255: PPUSH
14256: CALL_OW 302
14260: AND
14261: IFFALSE 14274
14263: PUSH
14264: LD_EXP 24
14268: PPUSH
14269: CALL_OW 302
14273: AND
14274: IFFALSE 14447
14276: GO 14278
14278: DISABLE
// begin DialogueOn ;
14279: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
14283: LD_EXP 24
14287: PPUSH
14288: LD_STRING DL-Mort-1
14290: PPUSH
14291: CALL_OW 88
// if IsOk ( Markov ) then
14295: LD_EXP 20
14299: PPUSH
14300: CALL_OW 302
14304: IFFALSE 14357
// begin Say ( Heike , DH-Mort-2 ) ;
14306: LD_EXP 13
14310: PPUSH
14311: LD_STRING DH-Mort-2
14313: PPUSH
14314: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
14318: LD_EXP 20
14322: PPUSH
14323: LD_STRING DMar-Mort-3
14325: PPUSH
14326: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
14330: LD_EXP 20
14334: PPUSH
14335: LD_STRING DMar-Mort-4
14337: PPUSH
14338: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14342: LD_INT 88
14344: PPUSH
14345: LD_INT 2
14347: PPUSH
14348: LD_INT 1
14350: PPUSH
14351: CALL_OW 322
// end else
14355: GO 14443
// if IsOk ( Olaf ) then
14357: LD_EXP 21
14361: PPUSH
14362: CALL_OW 302
14366: IFFALSE 14419
// begin Say ( Heike , DH-Mort-a-2 ) ;
14368: LD_EXP 13
14372: PPUSH
14373: LD_STRING DH-Mort-a-2
14375: PPUSH
14376: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
14380: LD_EXP 21
14384: PPUSH
14385: LD_STRING DO-Mort-a-3
14387: PPUSH
14388: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
14392: LD_EXP 21
14396: PPUSH
14397: LD_STRING DO-Mort-a-4
14399: PPUSH
14400: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14404: LD_INT 88
14406: PPUSH
14407: LD_INT 2
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: CALL_OW 322
// end else
14417: GO 14443
// begin Say ( Heike , DH-Mort-a-5 ) ;
14419: LD_EXP 13
14423: PPUSH
14424: LD_STRING DH-Mort-a-5
14426: PPUSH
14427: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
14431: LD_EXP 13
14435: PPUSH
14436: LD_STRING DH-Mort-a-6
14438: PPUSH
14439: CALL_OW 88
// end ; DialogueOff ;
14443: CALL_OW 7
// end ;
14447: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
14448: LD_EXP 18
14452: PPUSH
14453: CALL_OW 256
14457: PUSH
14458: LD_INT 10
14460: LESS
14461: IFFALSE 14563
14463: GO 14465
14465: DISABLE
// begin DialogueOn ;
14466: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14470: LD_EXP 18
14474: PPUSH
14475: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
14479: LD_EXP 18
14483: PPUSH
14484: LD_STRING DK-Death-1
14486: PPUSH
14487: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
14491: LD_EXP 18
14495: PPUSH
14496: LD_STRING DK-Death-2
14498: PPUSH
14499: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
14503: LD_EXP 18
14507: PPUSH
14508: LD_STRING DK-Death-3
14510: PPUSH
14511: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
14515: LD_EXP 13
14519: PPUSH
14520: LD_STRING DH-Death-4
14522: PPUSH
14523: CALL_OW 88
// if IsOk ( Markov ) then
14527: LD_EXP 20
14531: PPUSH
14532: CALL_OW 302
14536: IFFALSE 14550
// Say ( Markov , DMar-Death-5 ) ;
14538: LD_EXP 20
14542: PPUSH
14543: LD_STRING DMar-Death-5
14545: PPUSH
14546: CALL_OW 88
// DialogueOff ;
14550: CALL_OW 7
// KillUnit ( Kaia ) ;
14554: LD_EXP 18
14558: PPUSH
14559: CALL_OW 66
// end ;
14563: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib ;
14564: LD_EXP 10
14568: IFFALSE 14597
14570: PUSH
14571: LD_INT 81
14573: PUSH
14574: LD_INT 2
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 50
14583: PUSH
14584: EMPTY
14585: LIST
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PPUSH
14591: CALL_OW 69
14595: NOT
14596: AND
14597: IFFALSE 15447
14599: GO 14601
14601: DISABLE
14602: LD_INT 0
14604: PPUSH
14605: PPUSH
// begin InGameOn ;
14606: CALL_OW 8
// DialogueOn ;
14610: CALL_OW 6
// if time09 + time09c + tick < 80 80$00 then
14614: LD_EXP 3
14618: PUSH
14619: LD_EXP 4
14623: PLUS
14624: PUSH
14625: LD_OWVAR 1
14629: PLUS
14630: PUSH
14631: LD_INT 168000
14633: LESS
14634: IFFALSE 14643
// SetAchievement ( ACH_HSPEED_9 ) ;
14636: LD_STRING ACH_HSPEED_9
14638: PPUSH
14639: CALL_OW 543
// CenterOnNow ( Schulz ) ;
14643: LD_EXP 24
14647: PPUSH
14648: CALL 57993 0 1
// dwait ( 0 0$0.3 ) ;
14652: LD_INT 10
14654: PPUSH
14655: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
14659: LD_EXP 24
14663: PPUSH
14664: LD_STRING DL-End-1
14666: PPUSH
14667: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
14671: LD_EXP 13
14675: PPUSH
14676: LD_STRING DH-End-2
14678: PPUSH
14679: CALL_OW 88
// if IsOk ( Kaia ) then
14683: LD_EXP 18
14687: PPUSH
14688: CALL_OW 302
14692: IFFALSE 14754
// begin SaveCharacters ( Kaia , 09_Kaia ) ;
14694: LD_EXP 18
14698: PPUSH
14699: LD_STRING 09_Kaia
14701: PPUSH
14702: CALL_OW 38
// Say ( Kaia , DK-End-a-3 ) ;
14706: LD_EXP 18
14710: PPUSH
14711: LD_STRING DK-End-a-3
14713: PPUSH
14714: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
14718: LD_EXP 18
14722: PPUSH
14723: LD_STRING DK-End-a-4
14725: PPUSH
14726: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
14730: LD_EXP 24
14734: PPUSH
14735: LD_STRING DL-End-a-5
14737: PPUSH
14738: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
14742: LD_EXP 24
14746: PPUSH
14747: LD_STRING DL-End-a-6
14749: PPUSH
14750: CALL_OW 88
// end ; SaveCharacters ( Heike , 09_Heike ) ;
14754: LD_EXP 13
14758: PPUSH
14759: LD_STRING 09_Heike
14761: PPUSH
14762: CALL_OW 38
// SaveCharacters ( Schulz , 09_Schulz ) ;
14766: LD_EXP 24
14770: PPUSH
14771: LD_STRING 09_Schulz
14773: PPUSH
14774: CALL_OW 38
// if IsOk ( Basim ) then
14778: LD_EXP 25
14782: PPUSH
14783: CALL_OW 302
14787: IFFALSE 14801
// SaveCharacters ( Basim , 09_Basim ) ;
14789: LD_EXP 25
14793: PPUSH
14794: LD_STRING 09_Basim
14796: PPUSH
14797: CALL_OW 38
// if IsOk ( Givi ) then
14801: LD_EXP 14
14805: PPUSH
14806: CALL_OW 302
14810: IFFALSE 14824
// SaveCharacters ( Givi , 09_Givi ) ;
14812: LD_EXP 14
14816: PPUSH
14817: LD_STRING 09_Givi
14819: PPUSH
14820: CALL_OW 38
// if IsOk ( Mike ) then
14824: LD_EXP 15
14828: PPUSH
14829: CALL_OW 302
14833: IFFALSE 14847
// SaveCharacters ( Mike , 09_Mike ) ;
14835: LD_EXP 15
14839: PPUSH
14840: LD_STRING 09_Mike
14842: PPUSH
14843: CALL_OW 38
// if IsOk ( Ibrahim ) then
14847: LD_EXP 16
14851: PPUSH
14852: CALL_OW 302
14856: IFFALSE 14870
// SaveCharacters ( Ibrahim , 09_Ibrahim ) ;
14858: LD_EXP 16
14862: PPUSH
14863: LD_STRING 09_Ibrahim
14865: PPUSH
14866: CALL_OW 38
// if IsOk ( Kamil ) then
14870: LD_EXP 17
14874: PPUSH
14875: CALL_OW 302
14879: IFFALSE 14893
// SaveCharacters ( Kamil , 09_Kamil ) ;
14881: LD_EXP 17
14885: PPUSH
14886: LD_STRING 09_Kamil
14888: PPUSH
14889: CALL_OW 38
// if IsOk ( Sophia ) then
14893: LD_EXP 19
14897: PPUSH
14898: CALL_OW 302
14902: IFFALSE 14916
// SaveCharacters ( Sophia , 09_Sophia ) ;
14904: LD_EXP 19
14908: PPUSH
14909: LD_STRING 09_Sophia
14911: PPUSH
14912: CALL_OW 38
// if IsOk ( Markov ) then
14916: LD_EXP 20
14920: PPUSH
14921: CALL_OW 302
14925: IFFALSE 14939
// SaveCharacters ( Markov , 09_Markov ) ;
14927: LD_EXP 20
14931: PPUSH
14932: LD_STRING 09_Markov
14934: PPUSH
14935: CALL_OW 38
// if IsOk ( Olaf ) then
14939: LD_EXP 21
14943: PPUSH
14944: CALL_OW 302
14948: IFFALSE 14962
// SaveCharacters ( Olaf , 09_Olaf ) ;
14950: LD_EXP 21
14954: PPUSH
14955: LD_STRING 09_Olaf
14957: PPUSH
14958: CALL_OW 38
// if IsOk ( Kurt ) then
14962: LD_EXP 22
14966: PPUSH
14967: CALL_OW 302
14971: IFFALSE 14985
// SaveCharacters ( Kurt , 09_Kurt ) ;
14973: LD_EXP 22
14977: PPUSH
14978: LD_STRING 09_Kurt
14980: PPUSH
14981: CALL_OW 38
// if IsOk ( Aviradze ) then
14985: LD_EXP 23
14989: PPUSH
14990: CALL_OW 302
14994: IFFALSE 15008
// SaveCharacters ( Aviradze , 09_Aviradze ) ;
14996: LD_EXP 23
15000: PPUSH
15001: LD_STRING 09_Aviradze
15003: PPUSH
15004: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09_heikeSecondSquad ) ;
15008: LD_EXP 30
15012: PPUSH
15013: LD_INT 50
15015: PUSH
15016: EMPTY
15017: LIST
15018: PPUSH
15019: CALL_OW 72
15023: PPUSH
15024: LD_STRING 09_heikeSecondSquad
15026: PPUSH
15027: CALL_OW 38
// if GetTech ( tech_apeBrain , 2 ) = state_researched then
15031: LD_INT 4
15033: PPUSH
15034: LD_INT 2
15036: PPUSH
15037: CALL_OW 321
15041: PUSH
15042: LD_INT 2
15044: EQUAL
15045: IFFALSE 15057
// SaveVariable ( 1 , 09_ApeBrain ) ;
15047: LD_INT 1
15049: PPUSH
15050: LD_STRING 09_ApeBrain
15052: PPUSH
15053: CALL_OW 39
// if GetTech ( tech_apeNeural , 2 ) = state_researched then
15057: LD_INT 3
15059: PPUSH
15060: LD_INT 2
15062: PPUSH
15063: CALL_OW 321
15067: PUSH
15068: LD_INT 2
15070: EQUAL
15071: IFFALSE 15083
// SaveVariable ( 1 , 09_ApeNeural ) ;
15073: LD_INT 1
15075: PPUSH
15076: LD_STRING 09_ApeNeural
15078: PPUSH
15079: CALL_OW 39
// sib := 0 ;
15083: LD_ADDR_VAR 0 2
15087: PUSH
15088: LD_INT 0
15090: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
15091: LD_ADDR_VAR 0 1
15095: PUSH
15096: LD_INT 22
15098: PUSH
15099: LD_INT 2
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: PUSH
15106: LD_INT 2
15108: PUSH
15109: LD_INT 30
15111: PUSH
15112: LD_INT 0
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 30
15121: PUSH
15122: LD_INT 1
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: LIST
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PPUSH
15138: CALL_OW 69
15142: PUSH
15143: FOR_IN
15144: IFFALSE 15177
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
15146: LD_ADDR_VAR 0 2
15150: PUSH
15151: LD_VAR 0 2
15155: PUSH
15156: LD_VAR 0 1
15160: PPUSH
15161: CALL_OW 274
15165: PPUSH
15166: LD_INT 3
15168: PPUSH
15169: CALL_OW 275
15173: PLUS
15174: ST_TO_ADDR
15175: GO 15143
15177: POP
15178: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
15179: LD_ADDR_VAR 0 1
15183: PUSH
15184: LD_INT 22
15186: PUSH
15187: LD_INT 2
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 2
15196: PUSH
15197: LD_INT 34
15199: PUSH
15200: LD_INT 32
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 34
15209: PUSH
15210: LD_INT 51
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: PUSH
15231: FOR_IN
15232: IFFALSE 15260
// sib := sib + GetCargo ( i , mat_siberit ) ;
15234: LD_ADDR_VAR 0 2
15238: PUSH
15239: LD_VAR 0 2
15243: PUSH
15244: LD_VAR 0 1
15248: PPUSH
15249: LD_INT 3
15251: PPUSH
15252: CALL_OW 289
15256: PLUS
15257: ST_TO_ADDR
15258: GO 15231
15260: POP
15261: POP
// if sib >= sibToCollect then
15262: LD_VAR 0 2
15266: PUSH
15267: LD_EXP 7
15271: GREATEREQUAL
15272: IFFALSE 15286
// AddMedal ( med1 , 1 ) else
15274: LD_STRING med1
15276: PPUSH
15277: LD_INT 1
15279: PPUSH
15280: CALL_OW 101
15284: GO 15297
// AddMedal ( med1 , - 1 ) ;
15286: LD_STRING med1
15288: PPUSH
15289: LD_INT 1
15291: NEG
15292: PPUSH
15293: CALL_OW 101
// if apeDriver or kamikazeTrained then
15297: LD_EXP 8
15301: IFTRUE 15309
15303: PUSH
15304: LD_EXP 6
15308: OR
15309: IFFALSE 15323
// AddMedal ( med2 , 1 ) else
15311: LD_STRING med2
15313: PPUSH
15314: LD_INT 1
15316: PPUSH
15317: CALL_OW 101
15321: GO 15334
// AddMedal ( med2 , - 1 ) ;
15323: LD_STRING med2
15325: PPUSH
15326: LD_INT 1
15328: NEG
15329: PPUSH
15330: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
15334: LD_EXP 14
15338: PUSH
15339: LD_EXP 15
15343: PUSH
15344: LD_EXP 16
15348: PUSH
15349: LD_EXP 17
15353: PUSH
15354: LD_EXP 18
15358: PUSH
15359: LD_EXP 19
15363: PUSH
15364: LD_EXP 20
15368: PUSH
15369: LD_EXP 21
15373: PUSH
15374: LD_EXP 22
15378: PUSH
15379: LD_EXP 23
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: PPUSH
15396: LD_INT 50
15398: PUSH
15399: EMPTY
15400: LIST
15401: PPUSH
15402: CALL_OW 72
15406: NOT
15407: IFFALSE 15422
// AddMedal ( med3 , - 1 ) else
15409: LD_STRING med3
15411: PPUSH
15412: LD_INT 1
15414: NEG
15415: PPUSH
15416: CALL_OW 101
15420: GO 15432
// AddMedal ( med3 , 1 ) ;
15422: LD_STRING med3
15424: PPUSH
15425: LD_INT 1
15427: PPUSH
15428: CALL_OW 101
// GiveMedals ( MAIN ) ;
15432: LD_STRING MAIN
15434: PPUSH
15435: CALL_OW 102
// YouWin ;
15439: CALL_OW 103
// DialogueOff ;
15443: CALL_OW 7
// end ; end_of_file
15447: PPOPN 2
15449: END
// every 0 0$25 + 0 0$20 trigger playerInBase do var i , tmp ;
15450: LD_EXP 5
15454: IFFALSE 15555
15456: GO 15458
15458: DISABLE
15459: LD_INT 0
15461: PPUSH
15462: PPUSH
// begin enable ;
15463: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
15464: LD_ADDR_VAR 0 2
15468: PUSH
15469: LD_INT 9
15471: PUSH
15472: LD_INT 10
15474: PUSH
15475: LD_INT 11
15477: PUSH
15478: LD_INT 12
15480: PUSH
15481: LD_INT 13
15483: PUSH
15484: LD_INT 14
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
15495: LD_ADDR_VAR 0 1
15499: PUSH
15500: LD_VAR 0 2
15504: PUSH
15505: LD_INT 1
15507: PPUSH
15508: LD_INT 6
15510: PPUSH
15511: CALL_OW 12
15515: ARRAY
15516: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 16 then
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 435
15526: PUSH
15527: LD_INT 16
15529: LESS
15530: IFFALSE 15555
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
15532: LD_INT 1
15534: PPUSH
15535: LD_INT 5
15537: PPUSH
15538: CALL_OW 12
15542: PPUSH
15543: LD_VAR 0 1
15547: PPUSH
15548: LD_INT 1
15550: PPUSH
15551: CALL_OW 55
// end ; end_of_file
15555: PPOPN 2
15557: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15558: LD_INT 0
15560: PPUSH
15561: PPUSH
// if exist_mode then
15562: LD_VAR 0 2
15566: IFFALSE 15612
// begin unit := CreateCharacter ( prefix & ident ) ;
15568: LD_ADDR_VAR 0 5
15572: PUSH
15573: LD_VAR 0 3
15577: PUSH
15578: LD_VAR 0 1
15582: STR
15583: PPUSH
15584: CALL_OW 34
15588: ST_TO_ADDR
// if unit then
15589: LD_VAR 0 5
15593: IFFALSE 15610
// DeleteCharacters ( prefix & ident ) ;
15595: LD_VAR 0 3
15599: PUSH
15600: LD_VAR 0 1
15604: STR
15605: PPUSH
15606: CALL_OW 40
// end else
15610: GO 15627
// unit := NewCharacter ( ident ) ;
15612: LD_ADDR_VAR 0 5
15616: PUSH
15617: LD_VAR 0 1
15621: PPUSH
15622: CALL_OW 25
15626: ST_TO_ADDR
// result := unit ;
15627: LD_ADDR_VAR 0 4
15631: PUSH
15632: LD_VAR 0 5
15636: ST_TO_ADDR
// end ;
15637: LD_VAR 0 4
15641: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15642: LD_INT 0
15644: PPUSH
15645: PPUSH
// if exist_mode then
15646: LD_VAR 0 2
15650: IFFALSE 15675
// unit := CreateCharacter ( prefix & ident ) else
15652: LD_ADDR_VAR 0 5
15656: PUSH
15657: LD_VAR 0 3
15661: PUSH
15662: LD_VAR 0 1
15666: STR
15667: PPUSH
15668: CALL_OW 34
15672: ST_TO_ADDR
15673: GO 15690
// unit := NewCharacter ( ident ) ;
15675: LD_ADDR_VAR 0 5
15679: PUSH
15680: LD_VAR 0 1
15684: PPUSH
15685: CALL_OW 25
15689: ST_TO_ADDR
// result := unit ;
15690: LD_ADDR_VAR 0 4
15694: PUSH
15695: LD_VAR 0 5
15699: ST_TO_ADDR
// end ;
15700: LD_VAR 0 4
15704: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15705: LD_INT 0
15707: PPUSH
15708: PPUSH
// if not side or not nation then
15709: LD_VAR 0 1
15713: NOT
15714: IFTRUE 15723
15716: PUSH
15717: LD_VAR 0 2
15721: NOT
15722: OR
15723: IFFALSE 15727
// exit ;
15725: GO 16521
// case nation of nation_american :
15727: LD_VAR 0 2
15731: PUSH
15732: LD_INT 1
15734: DOUBLE
15735: EQUAL
15736: IFTRUE 15740
15738: GO 15962
15740: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
15741: LD_ADDR_VAR 0 4
15745: PUSH
15746: LD_INT 35
15748: PUSH
15749: LD_INT 45
15751: PUSH
15752: LD_INT 46
15754: PUSH
15755: LD_INT 47
15757: PUSH
15758: LD_INT 82
15760: PUSH
15761: LD_INT 83
15763: PUSH
15764: LD_INT 84
15766: PUSH
15767: LD_INT 85
15769: PUSH
15770: LD_INT 86
15772: PUSH
15773: LD_INT 1
15775: PUSH
15776: LD_INT 2
15778: PUSH
15779: LD_INT 6
15781: PUSH
15782: LD_INT 15
15784: PUSH
15785: LD_INT 16
15787: PUSH
15788: LD_INT 7
15790: PUSH
15791: LD_INT 12
15793: PUSH
15794: LD_INT 13
15796: PUSH
15797: LD_INT 10
15799: PUSH
15800: LD_INT 14
15802: PUSH
15803: LD_INT 20
15805: PUSH
15806: LD_INT 21
15808: PUSH
15809: LD_INT 22
15811: PUSH
15812: LD_INT 25
15814: PUSH
15815: LD_INT 32
15817: PUSH
15818: LD_INT 27
15820: PUSH
15821: LD_INT 36
15823: PUSH
15824: LD_INT 69
15826: PUSH
15827: LD_INT 39
15829: PUSH
15830: LD_INT 34
15832: PUSH
15833: LD_INT 40
15835: PUSH
15836: LD_INT 48
15838: PUSH
15839: LD_INT 49
15841: PUSH
15842: LD_INT 50
15844: PUSH
15845: LD_INT 51
15847: PUSH
15848: LD_INT 52
15850: PUSH
15851: LD_INT 53
15853: PUSH
15854: LD_INT 54
15856: PUSH
15857: LD_INT 55
15859: PUSH
15860: LD_INT 56
15862: PUSH
15863: LD_INT 57
15865: PUSH
15866: LD_INT 58
15868: PUSH
15869: LD_INT 59
15871: PUSH
15872: LD_INT 60
15874: PUSH
15875: LD_INT 61
15877: PUSH
15878: LD_INT 62
15880: PUSH
15881: LD_INT 80
15883: PUSH
15884: LD_INT 82
15886: PUSH
15887: LD_INT 83
15889: PUSH
15890: LD_INT 84
15892: PUSH
15893: LD_INT 85
15895: PUSH
15896: LD_INT 86
15898: PUSH
15899: LD_INT 90
15901: PUSH
15902: LD_INT 93
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: ST_TO_ADDR
15960: GO 16443
15962: LD_INT 2
15964: DOUBLE
15965: EQUAL
15966: IFTRUE 15970
15968: GO 16204
15970: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
15971: LD_ADDR_VAR 0 4
15975: PUSH
15976: LD_INT 35
15978: PUSH
15979: LD_INT 45
15981: PUSH
15982: LD_INT 46
15984: PUSH
15985: LD_INT 47
15987: PUSH
15988: LD_INT 82
15990: PUSH
15991: LD_INT 83
15993: PUSH
15994: LD_INT 84
15996: PUSH
15997: LD_INT 85
15999: PUSH
16000: LD_INT 87
16002: PUSH
16003: LD_INT 70
16005: PUSH
16006: LD_INT 1
16008: PUSH
16009: LD_INT 11
16011: PUSH
16012: LD_INT 3
16014: PUSH
16015: LD_INT 4
16017: PUSH
16018: LD_INT 5
16020: PUSH
16021: LD_INT 6
16023: PUSH
16024: LD_INT 15
16026: PUSH
16027: LD_INT 18
16029: PUSH
16030: LD_INT 7
16032: PUSH
16033: LD_INT 17
16035: PUSH
16036: LD_INT 8
16038: PUSH
16039: LD_INT 20
16041: PUSH
16042: LD_INT 21
16044: PUSH
16045: LD_INT 22
16047: PUSH
16048: LD_INT 72
16050: PUSH
16051: LD_INT 26
16053: PUSH
16054: LD_INT 69
16056: PUSH
16057: LD_INT 39
16059: PUSH
16060: LD_INT 40
16062: PUSH
16063: LD_INT 41
16065: PUSH
16066: LD_INT 42
16068: PUSH
16069: LD_INT 43
16071: PUSH
16072: LD_INT 48
16074: PUSH
16075: LD_INT 49
16077: PUSH
16078: LD_INT 50
16080: PUSH
16081: LD_INT 51
16083: PUSH
16084: LD_INT 52
16086: PUSH
16087: LD_INT 53
16089: PUSH
16090: LD_INT 54
16092: PUSH
16093: LD_INT 55
16095: PUSH
16096: LD_INT 56
16098: PUSH
16099: LD_INT 60
16101: PUSH
16102: LD_INT 61
16104: PUSH
16105: LD_INT 62
16107: PUSH
16108: LD_INT 66
16110: PUSH
16111: LD_INT 67
16113: PUSH
16114: LD_INT 68
16116: PUSH
16117: LD_INT 81
16119: PUSH
16120: LD_INT 82
16122: PUSH
16123: LD_INT 83
16125: PUSH
16126: LD_INT 84
16128: PUSH
16129: LD_INT 85
16131: PUSH
16132: LD_INT 87
16134: PUSH
16135: LD_INT 88
16137: PUSH
16138: LD_INT 92
16140: PUSH
16141: LD_INT 94
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: ST_TO_ADDR
16202: GO 16443
16204: LD_INT 3
16206: DOUBLE
16207: EQUAL
16208: IFTRUE 16212
16210: GO 16442
16212: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16213: LD_ADDR_VAR 0 4
16217: PUSH
16218: LD_INT 46
16220: PUSH
16221: LD_INT 47
16223: PUSH
16224: LD_INT 1
16226: PUSH
16227: LD_INT 2
16229: PUSH
16230: LD_INT 82
16232: PUSH
16233: LD_INT 83
16235: PUSH
16236: LD_INT 84
16238: PUSH
16239: LD_INT 85
16241: PUSH
16242: LD_INT 86
16244: PUSH
16245: LD_INT 11
16247: PUSH
16248: LD_INT 9
16250: PUSH
16251: LD_INT 20
16253: PUSH
16254: LD_INT 19
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: LD_INT 24
16262: PUSH
16263: LD_INT 22
16265: PUSH
16266: LD_INT 25
16268: PUSH
16269: LD_INT 28
16271: PUSH
16272: LD_INT 29
16274: PUSH
16275: LD_INT 30
16277: PUSH
16278: LD_INT 31
16280: PUSH
16281: LD_INT 37
16283: PUSH
16284: LD_INT 38
16286: PUSH
16287: LD_INT 32
16289: PUSH
16290: LD_INT 27
16292: PUSH
16293: LD_INT 33
16295: PUSH
16296: LD_INT 69
16298: PUSH
16299: LD_INT 39
16301: PUSH
16302: LD_INT 34
16304: PUSH
16305: LD_INT 40
16307: PUSH
16308: LD_INT 71
16310: PUSH
16311: LD_INT 23
16313: PUSH
16314: LD_INT 44
16316: PUSH
16317: LD_INT 48
16319: PUSH
16320: LD_INT 49
16322: PUSH
16323: LD_INT 50
16325: PUSH
16326: LD_INT 51
16328: PUSH
16329: LD_INT 52
16331: PUSH
16332: LD_INT 53
16334: PUSH
16335: LD_INT 54
16337: PUSH
16338: LD_INT 55
16340: PUSH
16341: LD_INT 56
16343: PUSH
16344: LD_INT 57
16346: PUSH
16347: LD_INT 58
16349: PUSH
16350: LD_INT 59
16352: PUSH
16353: LD_INT 63
16355: PUSH
16356: LD_INT 64
16358: PUSH
16359: LD_INT 65
16361: PUSH
16362: LD_INT 82
16364: PUSH
16365: LD_INT 83
16367: PUSH
16368: LD_INT 84
16370: PUSH
16371: LD_INT 85
16373: PUSH
16374: LD_INT 86
16376: PUSH
16377: LD_INT 89
16379: PUSH
16380: LD_INT 91
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: ST_TO_ADDR
16440: GO 16443
16442: POP
// if state > - 1 and state < 3 then
16443: LD_VAR 0 3
16447: PUSH
16448: LD_INT 1
16450: NEG
16451: GREATER
16452: IFFALSE 16464
16454: PUSH
16455: LD_VAR 0 3
16459: PUSH
16460: LD_INT 3
16462: LESS
16463: AND
16464: IFFALSE 16521
// for i in result do
16466: LD_ADDR_VAR 0 5
16470: PUSH
16471: LD_VAR 0 4
16475: PUSH
16476: FOR_IN
16477: IFFALSE 16519
// if GetTech ( i , side ) <> state then
16479: LD_VAR 0 5
16483: PPUSH
16484: LD_VAR 0 1
16488: PPUSH
16489: CALL_OW 321
16493: PUSH
16494: LD_VAR 0 3
16498: NONEQUAL
16499: IFFALSE 16517
// result := result diff i ;
16501: LD_ADDR_VAR 0 4
16505: PUSH
16506: LD_VAR 0 4
16510: PUSH
16511: LD_VAR 0 5
16515: DIFF
16516: ST_TO_ADDR
16517: GO 16476
16519: POP
16520: POP
// end ;
16521: LD_VAR 0 4
16525: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16526: LD_INT 0
16528: PPUSH
16529: PPUSH
16530: PPUSH
// result := true ;
16531: LD_ADDR_VAR 0 3
16535: PUSH
16536: LD_INT 1
16538: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16539: LD_ADDR_VAR 0 5
16543: PUSH
16544: LD_VAR 0 2
16548: PPUSH
16549: CALL_OW 480
16553: ST_TO_ADDR
// if not tmp then
16554: LD_VAR 0 5
16558: NOT
16559: IFFALSE 16563
// exit ;
16561: GO 16612
// for i in tmp do
16563: LD_ADDR_VAR 0 4
16567: PUSH
16568: LD_VAR 0 5
16572: PUSH
16573: FOR_IN
16574: IFFALSE 16610
// if GetTech ( i , side ) <> state_researched then
16576: LD_VAR 0 4
16580: PPUSH
16581: LD_VAR 0 1
16585: PPUSH
16586: CALL_OW 321
16590: PUSH
16591: LD_INT 2
16593: NONEQUAL
16594: IFFALSE 16608
// begin result := false ;
16596: LD_ADDR_VAR 0 3
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// exit ;
16604: POP
16605: POP
16606: GO 16612
// end ;
16608: GO 16573
16610: POP
16611: POP
// end ;
16612: LD_VAR 0 3
16616: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16617: LD_INT 0
16619: PPUSH
16620: PPUSH
16621: PPUSH
16622: PPUSH
16623: PPUSH
16624: PPUSH
16625: PPUSH
16626: PPUSH
16627: PPUSH
16628: PPUSH
16629: PPUSH
16630: PPUSH
16631: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16632: LD_VAR 0 1
16636: NOT
16637: IFTRUE 16654
16639: PUSH
16640: LD_VAR 0 1
16644: PPUSH
16645: CALL_OW 257
16649: PUSH
16650: LD_INT 9
16652: NONEQUAL
16653: OR
16654: IFFALSE 16658
// exit ;
16656: GO 17237
// side := GetSide ( unit ) ;
16658: LD_ADDR_VAR 0 9
16662: PUSH
16663: LD_VAR 0 1
16667: PPUSH
16668: CALL_OW 255
16672: ST_TO_ADDR
// tech_space := tech_spacanom ;
16673: LD_ADDR_VAR 0 12
16677: PUSH
16678: LD_INT 29
16680: ST_TO_ADDR
// tech_time := tech_taurad ;
16681: LD_ADDR_VAR 0 13
16685: PUSH
16686: LD_INT 28
16688: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16689: LD_ADDR_VAR 0 11
16693: PUSH
16694: LD_VAR 0 1
16698: PPUSH
16699: CALL_OW 310
16703: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16704: LD_VAR 0 11
16708: PPUSH
16709: CALL_OW 247
16713: PUSH
16714: LD_INT 2
16716: EQUAL
16717: IFFALSE 16721
// exit ;
16719: GO 17237
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16721: LD_ADDR_VAR 0 8
16725: PUSH
16726: LD_INT 81
16728: PUSH
16729: LD_VAR 0 9
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 3
16740: PUSH
16741: LD_INT 21
16743: PUSH
16744: LD_INT 3
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PPUSH
16759: CALL_OW 69
16763: ST_TO_ADDR
// if not tmp then
16764: LD_VAR 0 8
16768: NOT
16769: IFFALSE 16773
// exit ;
16771: GO 17237
// if in_unit then
16773: LD_VAR 0 11
16777: IFFALSE 16801
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16779: LD_ADDR_VAR 0 10
16783: PUSH
16784: LD_VAR 0 8
16788: PPUSH
16789: LD_VAR 0 11
16793: PPUSH
16794: CALL_OW 74
16798: ST_TO_ADDR
16799: GO 16821
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16801: LD_ADDR_VAR 0 10
16805: PUSH
16806: LD_VAR 0 8
16810: PPUSH
16811: LD_VAR 0 1
16815: PPUSH
16816: CALL_OW 74
16820: ST_TO_ADDR
// if not enemy then
16821: LD_VAR 0 10
16825: NOT
16826: IFFALSE 16830
// exit ;
16828: GO 17237
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16830: LD_VAR 0 11
16834: IFFALSE 16856
16836: PUSH
16837: LD_VAR 0 11
16841: PPUSH
16842: LD_VAR 0 10
16846: PPUSH
16847: CALL_OW 296
16851: PUSH
16852: LD_INT 13
16854: GREATER
16855: AND
16856: IFTRUE 16878
16858: PUSH
16859: LD_VAR 0 1
16863: PPUSH
16864: LD_VAR 0 10
16868: PPUSH
16869: CALL_OW 296
16873: PUSH
16874: LD_INT 12
16876: GREATER
16877: OR
16878: IFFALSE 16882
// exit ;
16880: GO 17237
// missile := [ 1 ] ;
16882: LD_ADDR_VAR 0 14
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16893: LD_VAR 0 9
16897: PPUSH
16898: LD_VAR 0 12
16902: PPUSH
16903: CALL_OW 325
16907: IFFALSE 16936
// missile := Replace ( missile , missile + 1 , 2 ) ;
16909: LD_ADDR_VAR 0 14
16913: PUSH
16914: LD_VAR 0 14
16918: PPUSH
16919: LD_VAR 0 14
16923: PUSH
16924: LD_INT 1
16926: PLUS
16927: PPUSH
16928: LD_INT 2
16930: PPUSH
16931: CALL_OW 1
16935: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16936: LD_VAR 0 9
16940: PPUSH
16941: LD_VAR 0 13
16945: PPUSH
16946: CALL_OW 325
16950: IFFALSE 16974
16952: PUSH
16953: LD_VAR 0 10
16957: PPUSH
16958: CALL_OW 255
16962: PPUSH
16963: LD_VAR 0 13
16967: PPUSH
16968: CALL_OW 325
16972: NOT
16973: AND
16974: IFFALSE 17003
// missile := Replace ( missile , missile + 1 , 3 ) ;
16976: LD_ADDR_VAR 0 14
16980: PUSH
16981: LD_VAR 0 14
16985: PPUSH
16986: LD_VAR 0 14
16990: PUSH
16991: LD_INT 1
16993: PLUS
16994: PPUSH
16995: LD_INT 3
16997: PPUSH
16998: CALL_OW 1
17002: ST_TO_ADDR
// if missile < 2 then
17003: LD_VAR 0 14
17007: PUSH
17008: LD_INT 2
17010: LESS
17011: IFFALSE 17015
// exit ;
17013: GO 17237
// x := GetX ( enemy ) ;
17015: LD_ADDR_VAR 0 4
17019: PUSH
17020: LD_VAR 0 10
17024: PPUSH
17025: CALL_OW 250
17029: ST_TO_ADDR
// y := GetY ( enemy ) ;
17030: LD_ADDR_VAR 0 5
17034: PUSH
17035: LD_VAR 0 10
17039: PPUSH
17040: CALL_OW 251
17044: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17045: LD_ADDR_VAR 0 6
17049: PUSH
17050: LD_VAR 0 4
17054: PUSH
17055: LD_INT 1
17057: NEG
17058: PPUSH
17059: LD_INT 1
17061: PPUSH
17062: CALL_OW 12
17066: PLUS
17067: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17068: LD_ADDR_VAR 0 7
17072: PUSH
17073: LD_VAR 0 5
17077: PUSH
17078: LD_INT 1
17080: NEG
17081: PPUSH
17082: LD_INT 1
17084: PPUSH
17085: CALL_OW 12
17089: PLUS
17090: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17091: LD_VAR 0 6
17095: PPUSH
17096: LD_VAR 0 7
17100: PPUSH
17101: CALL_OW 488
17105: NOT
17106: IFFALSE 17128
// begin _x := x ;
17108: LD_ADDR_VAR 0 6
17112: PUSH
17113: LD_VAR 0 4
17117: ST_TO_ADDR
// _y := y ;
17118: LD_ADDR_VAR 0 7
17122: PUSH
17123: LD_VAR 0 5
17127: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17128: LD_ADDR_VAR 0 3
17132: PUSH
17133: LD_INT 1
17135: PPUSH
17136: LD_VAR 0 14
17140: PPUSH
17141: CALL_OW 12
17145: ST_TO_ADDR
// case i of 1 :
17146: LD_VAR 0 3
17150: PUSH
17151: LD_INT 1
17153: DOUBLE
17154: EQUAL
17155: IFTRUE 17159
17157: GO 17176
17159: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17160: LD_VAR 0 1
17164: PPUSH
17165: LD_VAR 0 10
17169: PPUSH
17170: CALL_OW 115
17174: GO 17237
17176: LD_INT 2
17178: DOUBLE
17179: EQUAL
17180: IFTRUE 17184
17182: GO 17206
17184: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17185: LD_VAR 0 1
17189: PPUSH
17190: LD_VAR 0 6
17194: PPUSH
17195: LD_VAR 0 7
17199: PPUSH
17200: CALL_OW 153
17204: GO 17237
17206: LD_INT 3
17208: DOUBLE
17209: EQUAL
17210: IFTRUE 17214
17212: GO 17236
17214: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17215: LD_VAR 0 1
17219: PPUSH
17220: LD_VAR 0 6
17224: PPUSH
17225: LD_VAR 0 7
17229: PPUSH
17230: CALL_OW 154
17234: GO 17237
17236: POP
// end ;
17237: LD_VAR 0 2
17241: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17242: LD_INT 0
17244: PPUSH
17245: PPUSH
17246: PPUSH
17247: PPUSH
17248: PPUSH
17249: PPUSH
// if not unit or not building then
17250: LD_VAR 0 1
17254: NOT
17255: IFTRUE 17264
17257: PUSH
17258: LD_VAR 0 2
17262: NOT
17263: OR
17264: IFFALSE 17268
// exit ;
17266: GO 17426
// x := GetX ( building ) ;
17268: LD_ADDR_VAR 0 5
17272: PUSH
17273: LD_VAR 0 2
17277: PPUSH
17278: CALL_OW 250
17282: ST_TO_ADDR
// y := GetY ( building ) ;
17283: LD_ADDR_VAR 0 6
17287: PUSH
17288: LD_VAR 0 2
17292: PPUSH
17293: CALL_OW 251
17297: ST_TO_ADDR
// for i := 0 to 5 do
17298: LD_ADDR_VAR 0 4
17302: PUSH
17303: DOUBLE
17304: LD_INT 0
17306: DEC
17307: ST_TO_ADDR
17308: LD_INT 5
17310: PUSH
17311: FOR_TO
17312: IFFALSE 17424
// begin _x := ShiftX ( x , i , 3 ) ;
17314: LD_ADDR_VAR 0 7
17318: PUSH
17319: LD_VAR 0 5
17323: PPUSH
17324: LD_VAR 0 4
17328: PPUSH
17329: LD_INT 3
17331: PPUSH
17332: CALL_OW 272
17336: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17337: LD_ADDR_VAR 0 8
17341: PUSH
17342: LD_VAR 0 6
17346: PPUSH
17347: LD_VAR 0 4
17351: PPUSH
17352: LD_INT 3
17354: PPUSH
17355: CALL_OW 273
17359: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17360: LD_VAR 0 7
17364: PPUSH
17365: LD_VAR 0 8
17369: PPUSH
17370: CALL_OW 488
17374: NOT
17375: IFFALSE 17379
// continue ;
17377: GO 17311
// if HexInfo ( _x , _y ) = 0 then
17379: LD_VAR 0 7
17383: PPUSH
17384: LD_VAR 0 8
17388: PPUSH
17389: CALL_OW 428
17393: PUSH
17394: LD_INT 0
17396: EQUAL
17397: IFFALSE 17422
// begin ComMoveXY ( unit , _x , _y ) ;
17399: LD_VAR 0 1
17403: PPUSH
17404: LD_VAR 0 7
17408: PPUSH
17409: LD_VAR 0 8
17413: PPUSH
17414: CALL_OW 111
// exit ;
17418: POP
17419: POP
17420: GO 17426
// end ; end ;
17422: GO 17311
17424: POP
17425: POP
// end ;
17426: LD_VAR 0 3
17430: RET
// export function ScanBase ( side , base_area ) ; begin
17431: LD_INT 0
17433: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17434: LD_ADDR_VAR 0 3
17438: PUSH
17439: LD_VAR 0 2
17443: PPUSH
17444: LD_INT 81
17446: PUSH
17447: LD_VAR 0 1
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PPUSH
17456: CALL_OW 70
17460: ST_TO_ADDR
// end ;
17461: LD_VAR 0 3
17465: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17466: LD_INT 0
17468: PPUSH
17469: PPUSH
17470: PPUSH
17471: PPUSH
// result := false ;
17472: LD_ADDR_VAR 0 2
17476: PUSH
17477: LD_INT 0
17479: ST_TO_ADDR
// side := GetSide ( unit ) ;
17480: LD_ADDR_VAR 0 3
17484: PUSH
17485: LD_VAR 0 1
17489: PPUSH
17490: CALL_OW 255
17494: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17495: LD_ADDR_VAR 0 4
17499: PUSH
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 248
17509: ST_TO_ADDR
// case nat of 1 :
17510: LD_VAR 0 4
17514: PUSH
17515: LD_INT 1
17517: DOUBLE
17518: EQUAL
17519: IFTRUE 17523
17521: GO 17534
17523: POP
// tech := tech_lassight ; 2 :
17524: LD_ADDR_VAR 0 5
17528: PUSH
17529: LD_INT 12
17531: ST_TO_ADDR
17532: GO 17573
17534: LD_INT 2
17536: DOUBLE
17537: EQUAL
17538: IFTRUE 17542
17540: GO 17553
17542: POP
// tech := tech_mortar ; 3 :
17543: LD_ADDR_VAR 0 5
17547: PUSH
17548: LD_INT 41
17550: ST_TO_ADDR
17551: GO 17573
17553: LD_INT 3
17555: DOUBLE
17556: EQUAL
17557: IFTRUE 17561
17559: GO 17572
17561: POP
// tech := tech_bazooka ; end ;
17562: LD_ADDR_VAR 0 5
17566: PUSH
17567: LD_INT 44
17569: ST_TO_ADDR
17570: GO 17573
17572: POP
// if Researched ( side , tech ) then
17573: LD_VAR 0 3
17577: PPUSH
17578: LD_VAR 0 5
17582: PPUSH
17583: CALL_OW 325
17587: IFFALSE 17614
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17589: LD_ADDR_VAR 0 2
17593: PUSH
17594: LD_INT 5
17596: PUSH
17597: LD_INT 8
17599: PUSH
17600: LD_INT 9
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: LIST
17607: PUSH
17608: LD_VAR 0 4
17612: ARRAY
17613: ST_TO_ADDR
// end ;
17614: LD_VAR 0 2
17618: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17619: LD_INT 0
17621: PPUSH
17622: PPUSH
17623: PPUSH
// if not mines then
17624: LD_VAR 0 2
17628: NOT
17629: IFFALSE 17633
// exit ;
17631: GO 17777
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17633: LD_ADDR_VAR 0 5
17637: PUSH
17638: LD_INT 81
17640: PUSH
17641: LD_VAR 0 1
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 3
17652: PUSH
17653: LD_INT 21
17655: PUSH
17656: LD_INT 3
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PPUSH
17671: CALL_OW 69
17675: ST_TO_ADDR
// for i in mines do
17676: LD_ADDR_VAR 0 4
17680: PUSH
17681: LD_VAR 0 2
17685: PUSH
17686: FOR_IN
17687: IFFALSE 17775
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17689: LD_VAR 0 4
17693: PUSH
17694: LD_INT 1
17696: ARRAY
17697: PPUSH
17698: LD_VAR 0 4
17702: PUSH
17703: LD_INT 2
17705: ARRAY
17706: PPUSH
17707: CALL_OW 458
17711: NOT
17712: IFFALSE 17716
// continue ;
17714: GO 17686
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17716: LD_VAR 0 4
17720: PUSH
17721: LD_INT 1
17723: ARRAY
17724: PPUSH
17725: LD_VAR 0 4
17729: PUSH
17730: LD_INT 2
17732: ARRAY
17733: PPUSH
17734: CALL_OW 428
17738: PUSH
17739: LD_VAR 0 5
17743: IN
17744: IFFALSE 17773
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17746: LD_VAR 0 4
17750: PUSH
17751: LD_INT 1
17753: ARRAY
17754: PPUSH
17755: LD_VAR 0 4
17759: PUSH
17760: LD_INT 2
17762: ARRAY
17763: PPUSH
17764: LD_VAR 0 1
17768: PPUSH
17769: CALL_OW 456
// end ;
17773: GO 17686
17775: POP
17776: POP
// end ;
17777: LD_VAR 0 3
17781: RET
// export function Count ( array ) ; begin
17782: LD_INT 0
17784: PPUSH
// result := array + 0 ;
17785: LD_ADDR_VAR 0 2
17789: PUSH
17790: LD_VAR 0 1
17794: PUSH
17795: LD_INT 0
17797: PLUS
17798: ST_TO_ADDR
// end ;
17799: LD_VAR 0 2
17803: RET
// export function IsEmpty ( building ) ; begin
17804: LD_INT 0
17806: PPUSH
// if not building then
17807: LD_VAR 0 1
17811: NOT
17812: IFFALSE 17816
// exit ;
17814: GO 17859
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17816: LD_ADDR_VAR 0 2
17820: PUSH
17821: LD_VAR 0 1
17825: PUSH
17826: LD_INT 22
17828: PUSH
17829: LD_VAR 0 1
17833: PPUSH
17834: CALL_OW 255
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 58
17845: PUSH
17846: EMPTY
17847: LIST
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PPUSH
17853: CALL_OW 69
17857: IN
17858: ST_TO_ADDR
// end ;
17859: LD_VAR 0 2
17863: RET
// export function IsNotFull ( building ) ; var places ; begin
17864: LD_INT 0
17866: PPUSH
17867: PPUSH
// if not building then
17868: LD_VAR 0 1
17872: NOT
17873: IFFALSE 17877
// exit ;
17875: GO 17905
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17877: LD_ADDR_VAR 0 2
17881: PUSH
17882: LD_VAR 0 1
17886: PPUSH
17887: LD_INT 3
17889: PUSH
17890: LD_INT 62
17892: PUSH
17893: EMPTY
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 72
17904: ST_TO_ADDR
// end ;
17905: LD_VAR 0 2
17909: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17910: LD_INT 0
17912: PPUSH
17913: PPUSH
17914: PPUSH
17915: PPUSH
// tmp := [ ] ;
17916: LD_ADDR_VAR 0 3
17920: PUSH
17921: EMPTY
17922: ST_TO_ADDR
// list := [ ] ;
17923: LD_ADDR_VAR 0 5
17927: PUSH
17928: EMPTY
17929: ST_TO_ADDR
// for i = 16 to 25 do
17930: LD_ADDR_VAR 0 4
17934: PUSH
17935: DOUBLE
17936: LD_INT 16
17938: DEC
17939: ST_TO_ADDR
17940: LD_INT 25
17942: PUSH
17943: FOR_TO
17944: IFFALSE 18017
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17946: LD_ADDR_VAR 0 3
17950: PUSH
17951: LD_VAR 0 3
17955: PUSH
17956: LD_INT 22
17958: PUSH
17959: LD_VAR 0 1
17963: PPUSH
17964: CALL_OW 255
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 91
17975: PUSH
17976: LD_VAR 0 1
17980: PUSH
17981: LD_INT 6
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 30
17991: PUSH
17992: LD_VAR 0 4
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: PPUSH
18009: CALL_OW 69
18013: ADD
18014: ST_TO_ADDR
18015: GO 17943
18017: POP
18018: POP
// for i = 1 to tmp do
18019: LD_ADDR_VAR 0 4
18023: PUSH
18024: DOUBLE
18025: LD_INT 1
18027: DEC
18028: ST_TO_ADDR
18029: LD_VAR 0 3
18033: PUSH
18034: FOR_TO
18035: IFFALSE 18123
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18037: LD_ADDR_VAR 0 5
18041: PUSH
18042: LD_VAR 0 5
18046: PUSH
18047: LD_VAR 0 3
18051: PUSH
18052: LD_VAR 0 4
18056: ARRAY
18057: PPUSH
18058: CALL_OW 266
18062: PUSH
18063: LD_VAR 0 3
18067: PUSH
18068: LD_VAR 0 4
18072: ARRAY
18073: PPUSH
18074: CALL_OW 250
18078: PUSH
18079: LD_VAR 0 3
18083: PUSH
18084: LD_VAR 0 4
18088: ARRAY
18089: PPUSH
18090: CALL_OW 251
18094: PUSH
18095: LD_VAR 0 3
18099: PUSH
18100: LD_VAR 0 4
18104: ARRAY
18105: PPUSH
18106: CALL_OW 254
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: PUSH
18117: EMPTY
18118: LIST
18119: ADD
18120: ST_TO_ADDR
18121: GO 18034
18123: POP
18124: POP
// result := list ;
18125: LD_ADDR_VAR 0 2
18129: PUSH
18130: LD_VAR 0 5
18134: ST_TO_ADDR
// end ;
18135: LD_VAR 0 2
18139: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18140: LD_INT 0
18142: PPUSH
18143: PPUSH
18144: PPUSH
18145: PPUSH
18146: PPUSH
18147: PPUSH
18148: PPUSH
// if not factory then
18149: LD_VAR 0 1
18153: NOT
18154: IFFALSE 18158
// exit ;
18156: GO 18761
// if control = control_apeman then
18158: LD_VAR 0 4
18162: PUSH
18163: LD_INT 5
18165: EQUAL
18166: IFFALSE 18275
// begin tmp := UnitsInside ( factory ) ;
18168: LD_ADDR_VAR 0 8
18172: PUSH
18173: LD_VAR 0 1
18177: PPUSH
18178: CALL_OW 313
18182: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18183: LD_VAR 0 8
18187: PPUSH
18188: LD_INT 25
18190: PUSH
18191: LD_INT 12
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PPUSH
18198: CALL_OW 72
18202: NOT
18203: IFFALSE 18213
// control := control_manual ;
18205: LD_ADDR_VAR 0 4
18209: PUSH
18210: LD_INT 1
18212: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18213: LD_ADDR_VAR 0 8
18217: PUSH
18218: LD_VAR 0 1
18222: PPUSH
18223: CALL 17910 0 1
18227: ST_TO_ADDR
// if tmp then
18228: LD_VAR 0 8
18232: IFFALSE 18275
// begin for i in tmp do
18234: LD_ADDR_VAR 0 7
18238: PUSH
18239: LD_VAR 0 8
18243: PUSH
18244: FOR_IN
18245: IFFALSE 18273
// if i [ 1 ] = b_ext_radio then
18247: LD_VAR 0 7
18251: PUSH
18252: LD_INT 1
18254: ARRAY
18255: PUSH
18256: LD_INT 22
18258: EQUAL
18259: IFFALSE 18271
// begin control := control_remote ;
18261: LD_ADDR_VAR 0 4
18265: PUSH
18266: LD_INT 2
18268: ST_TO_ADDR
// break ;
18269: GO 18273
// end ;
18271: GO 18244
18273: POP
18274: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18275: LD_VAR 0 1
18279: PPUSH
18280: LD_VAR 0 2
18284: PPUSH
18285: LD_VAR 0 3
18289: PPUSH
18290: LD_VAR 0 4
18294: PPUSH
18295: LD_VAR 0 5
18299: PPUSH
18300: CALL_OW 448
18304: IFFALSE 18339
// begin result := [ chassis , engine , control , weapon ] ;
18306: LD_ADDR_VAR 0 6
18310: PUSH
18311: LD_VAR 0 2
18315: PUSH
18316: LD_VAR 0 3
18320: PUSH
18321: LD_VAR 0 4
18325: PUSH
18326: LD_VAR 0 5
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: ST_TO_ADDR
// exit ;
18337: GO 18761
// end ; _chassis := AvailableChassisList ( factory ) ;
18339: LD_ADDR_VAR 0 9
18343: PUSH
18344: LD_VAR 0 1
18348: PPUSH
18349: CALL_OW 475
18353: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18354: LD_ADDR_VAR 0 11
18358: PUSH
18359: LD_VAR 0 1
18363: PPUSH
18364: CALL_OW 476
18368: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18369: LD_ADDR_VAR 0 12
18373: PUSH
18374: LD_VAR 0 1
18378: PPUSH
18379: CALL_OW 477
18383: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18384: LD_ADDR_VAR 0 10
18388: PUSH
18389: LD_VAR 0 1
18393: PPUSH
18394: CALL_OW 478
18398: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18399: LD_VAR 0 9
18403: NOT
18404: IFTRUE 18413
18406: PUSH
18407: LD_VAR 0 11
18411: NOT
18412: OR
18413: IFTRUE 18422
18415: PUSH
18416: LD_VAR 0 12
18420: NOT
18421: OR
18422: IFTRUE 18431
18424: PUSH
18425: LD_VAR 0 10
18429: NOT
18430: OR
18431: IFFALSE 18466
// begin result := [ chassis , engine , control , weapon ] ;
18433: LD_ADDR_VAR 0 6
18437: PUSH
18438: LD_VAR 0 2
18442: PUSH
18443: LD_VAR 0 3
18447: PUSH
18448: LD_VAR 0 4
18452: PUSH
18453: LD_VAR 0 5
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: ST_TO_ADDR
// exit ;
18464: GO 18761
// end ; if not chassis in _chassis then
18466: LD_VAR 0 2
18470: PUSH
18471: LD_VAR 0 9
18475: IN
18476: NOT
18477: IFFALSE 18503
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18479: LD_ADDR_VAR 0 2
18483: PUSH
18484: LD_VAR 0 9
18488: PUSH
18489: LD_INT 1
18491: PPUSH
18492: LD_VAR 0 9
18496: PPUSH
18497: CALL_OW 12
18501: ARRAY
18502: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18503: LD_VAR 0 2
18507: PPUSH
18508: LD_VAR 0 3
18512: PPUSH
18513: CALL 18766 0 2
18517: NOT
18518: IFFALSE 18579
// repeat engine := _engine [ 1 ] ;
18520: LD_ADDR_VAR 0 3
18524: PUSH
18525: LD_VAR 0 11
18529: PUSH
18530: LD_INT 1
18532: ARRAY
18533: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18534: LD_ADDR_VAR 0 11
18538: PUSH
18539: LD_VAR 0 11
18543: PPUSH
18544: LD_INT 1
18546: PPUSH
18547: CALL_OW 3
18551: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18552: LD_VAR 0 2
18556: PPUSH
18557: LD_VAR 0 3
18561: PPUSH
18562: CALL 18766 0 2
18566: IFTRUE 18577
18568: PUSH
18569: LD_VAR 0 11
18573: PUSH
18574: EMPTY
18575: EQUAL
18576: OR
18577: IFFALSE 18520
// if not control in _control then
18579: LD_VAR 0 4
18583: PUSH
18584: LD_VAR 0 12
18588: IN
18589: NOT
18590: IFFALSE 18616
// control := _control [ rand ( 1 , _control ) ] ;
18592: LD_ADDR_VAR 0 4
18596: PUSH
18597: LD_VAR 0 12
18601: PUSH
18602: LD_INT 1
18604: PPUSH
18605: LD_VAR 0 12
18609: PPUSH
18610: CALL_OW 12
18614: ARRAY
18615: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18616: LD_VAR 0 2
18620: PPUSH
18621: LD_VAR 0 5
18625: PPUSH
18626: CALL 18988 0 2
18630: NOT
18631: IFFALSE 18692
// repeat weapon := _weapon [ 1 ] ;
18633: LD_ADDR_VAR 0 5
18637: PUSH
18638: LD_VAR 0 10
18642: PUSH
18643: LD_INT 1
18645: ARRAY
18646: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18647: LD_ADDR_VAR 0 10
18651: PUSH
18652: LD_VAR 0 10
18656: PPUSH
18657: LD_INT 1
18659: PPUSH
18660: CALL_OW 3
18664: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18665: LD_VAR 0 2
18669: PPUSH
18670: LD_VAR 0 5
18674: PPUSH
18675: CALL 18988 0 2
18679: IFTRUE 18690
18681: PUSH
18682: LD_VAR 0 10
18686: PUSH
18687: EMPTY
18688: EQUAL
18689: OR
18690: IFFALSE 18633
// result := [ ] ;
18692: LD_ADDR_VAR 0 6
18696: PUSH
18697: EMPTY
18698: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18699: LD_VAR 0 1
18703: PPUSH
18704: LD_VAR 0 2
18708: PPUSH
18709: LD_VAR 0 3
18713: PPUSH
18714: LD_VAR 0 4
18718: PPUSH
18719: LD_VAR 0 5
18723: PPUSH
18724: CALL_OW 448
18728: IFFALSE 18761
// result := [ chassis , engine , control , weapon ] ;
18730: LD_ADDR_VAR 0 6
18734: PUSH
18735: LD_VAR 0 2
18739: PUSH
18740: LD_VAR 0 3
18744: PUSH
18745: LD_VAR 0 4
18749: PUSH
18750: LD_VAR 0 5
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: ST_TO_ADDR
// end ;
18761: LD_VAR 0 6
18765: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18766: LD_INT 0
18768: PPUSH
// if not chassis or not engine then
18769: LD_VAR 0 1
18773: NOT
18774: IFTRUE 18783
18776: PUSH
18777: LD_VAR 0 2
18781: NOT
18782: OR
18783: IFFALSE 18787
// exit ;
18785: GO 18983
// case engine of engine_solar :
18787: LD_VAR 0 2
18791: PUSH
18792: LD_INT 2
18794: DOUBLE
18795: EQUAL
18796: IFTRUE 18800
18798: GO 18838
18800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18801: LD_ADDR_VAR 0 3
18805: PUSH
18806: LD_INT 11
18808: PUSH
18809: LD_INT 12
18811: PUSH
18812: LD_INT 13
18814: PUSH
18815: LD_INT 14
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: LD_INT 3
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: ST_TO_ADDR
18836: GO 18967
18838: LD_INT 1
18840: DOUBLE
18841: EQUAL
18842: IFTRUE 18846
18844: GO 18908
18846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18847: LD_ADDR_VAR 0 3
18851: PUSH
18852: LD_INT 11
18854: PUSH
18855: LD_INT 12
18857: PUSH
18858: LD_INT 13
18860: PUSH
18861: LD_INT 14
18863: PUSH
18864: LD_INT 1
18866: PUSH
18867: LD_INT 2
18869: PUSH
18870: LD_INT 3
18872: PUSH
18873: LD_INT 4
18875: PUSH
18876: LD_INT 5
18878: PUSH
18879: LD_INT 21
18881: PUSH
18882: LD_INT 23
18884: PUSH
18885: LD_INT 22
18887: PUSH
18888: LD_INT 24
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: ST_TO_ADDR
18906: GO 18967
18908: LD_INT 3
18910: DOUBLE
18911: EQUAL
18912: IFTRUE 18916
18914: GO 18966
18916: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18917: LD_ADDR_VAR 0 3
18921: PUSH
18922: LD_INT 13
18924: PUSH
18925: LD_INT 14
18927: PUSH
18928: LD_INT 2
18930: PUSH
18931: LD_INT 3
18933: PUSH
18934: LD_INT 4
18936: PUSH
18937: LD_INT 5
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 22
18945: PUSH
18946: LD_INT 23
18948: PUSH
18949: LD_INT 24
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: ST_TO_ADDR
18964: GO 18967
18966: POP
// result := ( chassis in result ) ;
18967: LD_ADDR_VAR 0 3
18971: PUSH
18972: LD_VAR 0 1
18976: PUSH
18977: LD_VAR 0 3
18981: IN
18982: ST_TO_ADDR
// end ;
18983: LD_VAR 0 3
18987: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18988: LD_INT 0
18990: PPUSH
// if not chassis or not weapon then
18991: LD_VAR 0 1
18995: NOT
18996: IFTRUE 19005
18998: PUSH
18999: LD_VAR 0 2
19003: NOT
19004: OR
19005: IFFALSE 19009
// exit ;
19007: GO 20069
// case weapon of us_machine_gun :
19009: LD_VAR 0 2
19013: PUSH
19014: LD_INT 2
19016: DOUBLE
19017: EQUAL
19018: IFTRUE 19022
19020: GO 19052
19022: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19023: LD_ADDR_VAR 0 3
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: LD_INT 3
19036: PUSH
19037: LD_INT 4
19039: PUSH
19040: LD_INT 5
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: ST_TO_ADDR
19050: GO 20053
19052: LD_INT 3
19054: DOUBLE
19055: EQUAL
19056: IFTRUE 19060
19058: GO 19090
19060: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19061: LD_ADDR_VAR 0 3
19065: PUSH
19066: LD_INT 1
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: LD_INT 3
19074: PUSH
19075: LD_INT 4
19077: PUSH
19078: LD_INT 5
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: ST_TO_ADDR
19088: GO 20053
19090: LD_INT 11
19092: DOUBLE
19093: EQUAL
19094: IFTRUE 19098
19096: GO 19128
19098: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19099: LD_ADDR_VAR 0 3
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: LD_INT 3
19112: PUSH
19113: LD_INT 4
19115: PUSH
19116: LD_INT 5
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: ST_TO_ADDR
19126: GO 20053
19128: LD_INT 4
19130: DOUBLE
19131: EQUAL
19132: IFTRUE 19136
19134: GO 19162
19136: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19137: LD_ADDR_VAR 0 3
19141: PUSH
19142: LD_INT 2
19144: PUSH
19145: LD_INT 3
19147: PUSH
19148: LD_INT 4
19150: PUSH
19151: LD_INT 5
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: ST_TO_ADDR
19160: GO 20053
19162: LD_INT 5
19164: DOUBLE
19165: EQUAL
19166: IFTRUE 19170
19168: GO 19196
19170: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19171: LD_ADDR_VAR 0 3
19175: PUSH
19176: LD_INT 2
19178: PUSH
19179: LD_INT 3
19181: PUSH
19182: LD_INT 4
19184: PUSH
19185: LD_INT 5
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: ST_TO_ADDR
19194: GO 20053
19196: LD_INT 9
19198: DOUBLE
19199: EQUAL
19200: IFTRUE 19204
19202: GO 19230
19204: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19205: LD_ADDR_VAR 0 3
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: LD_INT 3
19215: PUSH
19216: LD_INT 4
19218: PUSH
19219: LD_INT 5
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: ST_TO_ADDR
19228: GO 20053
19230: LD_INT 7
19232: DOUBLE
19233: EQUAL
19234: IFTRUE 19238
19236: GO 19264
19238: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19239: LD_ADDR_VAR 0 3
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: LD_INT 3
19249: PUSH
19250: LD_INT 4
19252: PUSH
19253: LD_INT 5
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: ST_TO_ADDR
19262: GO 20053
19264: LD_INT 12
19266: DOUBLE
19267: EQUAL
19268: IFTRUE 19272
19270: GO 19298
19272: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19273: LD_ADDR_VAR 0 3
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: LD_INT 3
19283: PUSH
19284: LD_INT 4
19286: PUSH
19287: LD_INT 5
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: ST_TO_ADDR
19296: GO 20053
19298: LD_INT 13
19300: DOUBLE
19301: EQUAL
19302: IFTRUE 19306
19304: GO 19332
19306: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19307: LD_ADDR_VAR 0 3
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: LD_INT 3
19317: PUSH
19318: LD_INT 4
19320: PUSH
19321: LD_INT 5
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: ST_TO_ADDR
19330: GO 20053
19332: LD_INT 14
19334: DOUBLE
19335: EQUAL
19336: IFTRUE 19340
19338: GO 19358
19340: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19341: LD_ADDR_VAR 0 3
19345: PUSH
19346: LD_INT 4
19348: PUSH
19349: LD_INT 5
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: ST_TO_ADDR
19356: GO 20053
19358: LD_INT 6
19360: DOUBLE
19361: EQUAL
19362: IFTRUE 19366
19364: GO 19384
19366: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19367: LD_ADDR_VAR 0 3
19371: PUSH
19372: LD_INT 4
19374: PUSH
19375: LD_INT 5
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: ST_TO_ADDR
19382: GO 20053
19384: LD_INT 10
19386: DOUBLE
19387: EQUAL
19388: IFTRUE 19392
19390: GO 19410
19392: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19393: LD_ADDR_VAR 0 3
19397: PUSH
19398: LD_INT 4
19400: PUSH
19401: LD_INT 5
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: ST_TO_ADDR
19408: GO 20053
19410: LD_INT 22
19412: DOUBLE
19413: EQUAL
19414: IFTRUE 19418
19416: GO 19444
19418: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19419: LD_ADDR_VAR 0 3
19423: PUSH
19424: LD_INT 11
19426: PUSH
19427: LD_INT 12
19429: PUSH
19430: LD_INT 13
19432: PUSH
19433: LD_INT 14
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: ST_TO_ADDR
19442: GO 20053
19444: LD_INT 23
19446: DOUBLE
19447: EQUAL
19448: IFTRUE 19452
19450: GO 19478
19452: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19453: LD_ADDR_VAR 0 3
19457: PUSH
19458: LD_INT 11
19460: PUSH
19461: LD_INT 12
19463: PUSH
19464: LD_INT 13
19466: PUSH
19467: LD_INT 14
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: ST_TO_ADDR
19476: GO 20053
19478: LD_INT 24
19480: DOUBLE
19481: EQUAL
19482: IFTRUE 19486
19484: GO 19512
19486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19487: LD_ADDR_VAR 0 3
19491: PUSH
19492: LD_INT 11
19494: PUSH
19495: LD_INT 12
19497: PUSH
19498: LD_INT 13
19500: PUSH
19501: LD_INT 14
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: ST_TO_ADDR
19510: GO 20053
19512: LD_INT 30
19514: DOUBLE
19515: EQUAL
19516: IFTRUE 19520
19518: GO 19546
19520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19521: LD_ADDR_VAR 0 3
19525: PUSH
19526: LD_INT 11
19528: PUSH
19529: LD_INT 12
19531: PUSH
19532: LD_INT 13
19534: PUSH
19535: LD_INT 14
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: ST_TO_ADDR
19544: GO 20053
19546: LD_INT 25
19548: DOUBLE
19549: EQUAL
19550: IFTRUE 19554
19552: GO 19572
19554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19555: LD_ADDR_VAR 0 3
19559: PUSH
19560: LD_INT 13
19562: PUSH
19563: LD_INT 14
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: ST_TO_ADDR
19570: GO 20053
19572: LD_INT 27
19574: DOUBLE
19575: EQUAL
19576: IFTRUE 19580
19578: GO 19598
19580: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19581: LD_ADDR_VAR 0 3
19585: PUSH
19586: LD_INT 13
19588: PUSH
19589: LD_INT 14
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: ST_TO_ADDR
19596: GO 20053
19598: LD_INT 92
19600: DOUBLE
19601: EQUAL
19602: IFTRUE 19606
19604: GO 19632
19606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19607: LD_ADDR_VAR 0 3
19611: PUSH
19612: LD_INT 11
19614: PUSH
19615: LD_INT 12
19617: PUSH
19618: LD_INT 13
19620: PUSH
19621: LD_INT 14
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: ST_TO_ADDR
19630: GO 20053
19632: LD_INT 28
19634: DOUBLE
19635: EQUAL
19636: IFTRUE 19640
19638: GO 19658
19640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19641: LD_ADDR_VAR 0 3
19645: PUSH
19646: LD_INT 13
19648: PUSH
19649: LD_INT 14
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: ST_TO_ADDR
19656: GO 20053
19658: LD_INT 29
19660: DOUBLE
19661: EQUAL
19662: IFTRUE 19666
19664: GO 19684
19666: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19667: LD_ADDR_VAR 0 3
19671: PUSH
19672: LD_INT 13
19674: PUSH
19675: LD_INT 14
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: ST_TO_ADDR
19682: GO 20053
19684: LD_INT 31
19686: DOUBLE
19687: EQUAL
19688: IFTRUE 19692
19690: GO 19710
19692: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19693: LD_ADDR_VAR 0 3
19697: PUSH
19698: LD_INT 13
19700: PUSH
19701: LD_INT 14
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: ST_TO_ADDR
19708: GO 20053
19710: LD_INT 26
19712: DOUBLE
19713: EQUAL
19714: IFTRUE 19718
19716: GO 19736
19718: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19719: LD_ADDR_VAR 0 3
19723: PUSH
19724: LD_INT 13
19726: PUSH
19727: LD_INT 14
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: ST_TO_ADDR
19734: GO 20053
19736: LD_INT 42
19738: DOUBLE
19739: EQUAL
19740: IFTRUE 19744
19742: GO 19770
19744: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19745: LD_ADDR_VAR 0 3
19749: PUSH
19750: LD_INT 21
19752: PUSH
19753: LD_INT 22
19755: PUSH
19756: LD_INT 23
19758: PUSH
19759: LD_INT 24
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: ST_TO_ADDR
19768: GO 20053
19770: LD_INT 43
19772: DOUBLE
19773: EQUAL
19774: IFTRUE 19778
19776: GO 19804
19778: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19779: LD_ADDR_VAR 0 3
19783: PUSH
19784: LD_INT 21
19786: PUSH
19787: LD_INT 22
19789: PUSH
19790: LD_INT 23
19792: PUSH
19793: LD_INT 24
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: ST_TO_ADDR
19802: GO 20053
19804: LD_INT 44
19806: DOUBLE
19807: EQUAL
19808: IFTRUE 19812
19810: GO 19838
19812: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19813: LD_ADDR_VAR 0 3
19817: PUSH
19818: LD_INT 21
19820: PUSH
19821: LD_INT 22
19823: PUSH
19824: LD_INT 23
19826: PUSH
19827: LD_INT 24
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: ST_TO_ADDR
19836: GO 20053
19838: LD_INT 45
19840: DOUBLE
19841: EQUAL
19842: IFTRUE 19846
19844: GO 19872
19846: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19847: LD_ADDR_VAR 0 3
19851: PUSH
19852: LD_INT 21
19854: PUSH
19855: LD_INT 22
19857: PUSH
19858: LD_INT 23
19860: PUSH
19861: LD_INT 24
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: ST_TO_ADDR
19870: GO 20053
19872: LD_INT 49
19874: DOUBLE
19875: EQUAL
19876: IFTRUE 19880
19878: GO 19906
19880: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19881: LD_ADDR_VAR 0 3
19885: PUSH
19886: LD_INT 21
19888: PUSH
19889: LD_INT 22
19891: PUSH
19892: LD_INT 23
19894: PUSH
19895: LD_INT 24
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: ST_TO_ADDR
19904: GO 20053
19906: LD_INT 51
19908: DOUBLE
19909: EQUAL
19910: IFTRUE 19914
19912: GO 19940
19914: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19915: LD_ADDR_VAR 0 3
19919: PUSH
19920: LD_INT 21
19922: PUSH
19923: LD_INT 22
19925: PUSH
19926: LD_INT 23
19928: PUSH
19929: LD_INT 24
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: ST_TO_ADDR
19938: GO 20053
19940: LD_INT 52
19942: DOUBLE
19943: EQUAL
19944: IFTRUE 19948
19946: GO 19974
19948: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19949: LD_ADDR_VAR 0 3
19953: PUSH
19954: LD_INT 21
19956: PUSH
19957: LD_INT 22
19959: PUSH
19960: LD_INT 23
19962: PUSH
19963: LD_INT 24
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: ST_TO_ADDR
19972: GO 20053
19974: LD_INT 53
19976: DOUBLE
19977: EQUAL
19978: IFTRUE 19982
19980: GO 20000
19982: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19983: LD_ADDR_VAR 0 3
19987: PUSH
19988: LD_INT 23
19990: PUSH
19991: LD_INT 24
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: ST_TO_ADDR
19998: GO 20053
20000: LD_INT 46
20002: DOUBLE
20003: EQUAL
20004: IFTRUE 20008
20006: GO 20026
20008: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20009: LD_ADDR_VAR 0 3
20013: PUSH
20014: LD_INT 23
20016: PUSH
20017: LD_INT 24
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: ST_TO_ADDR
20024: GO 20053
20026: LD_INT 47
20028: DOUBLE
20029: EQUAL
20030: IFTRUE 20034
20032: GO 20052
20034: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20035: LD_ADDR_VAR 0 3
20039: PUSH
20040: LD_INT 23
20042: PUSH
20043: LD_INT 24
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: ST_TO_ADDR
20050: GO 20053
20052: POP
// result := ( chassis in result ) ;
20053: LD_ADDR_VAR 0 3
20057: PUSH
20058: LD_VAR 0 1
20062: PUSH
20063: LD_VAR 0 3
20067: IN
20068: ST_TO_ADDR
// end ;
20069: LD_VAR 0 3
20073: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20074: LD_INT 0
20076: PPUSH
20077: PPUSH
20078: PPUSH
20079: PPUSH
20080: PPUSH
20081: PPUSH
20082: PPUSH
// result := array ;
20083: LD_ADDR_VAR 0 5
20087: PUSH
20088: LD_VAR 0 1
20092: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20093: LD_VAR 0 1
20097: NOT
20098: IFTRUE 20107
20100: PUSH
20101: LD_VAR 0 2
20105: NOT
20106: OR
20107: IFTRUE 20116
20109: PUSH
20110: LD_VAR 0 3
20114: NOT
20115: OR
20116: IFTRUE 20130
20118: PUSH
20119: LD_VAR 0 2
20123: PUSH
20124: LD_VAR 0 1
20128: GREATER
20129: OR
20130: IFTRUE 20144
20132: PUSH
20133: LD_VAR 0 3
20137: PUSH
20138: LD_VAR 0 1
20142: GREATER
20143: OR
20144: IFFALSE 20148
// exit ;
20146: GO 20444
// if direction then
20148: LD_VAR 0 4
20152: IFFALSE 20216
// begin d := 1 ;
20154: LD_ADDR_VAR 0 9
20158: PUSH
20159: LD_INT 1
20161: ST_TO_ADDR
// if i_from > i_to then
20162: LD_VAR 0 2
20166: PUSH
20167: LD_VAR 0 3
20171: GREATER
20172: IFFALSE 20198
// length := ( array - i_from ) + i_to else
20174: LD_ADDR_VAR 0 11
20178: PUSH
20179: LD_VAR 0 1
20183: PUSH
20184: LD_VAR 0 2
20188: MINUS
20189: PUSH
20190: LD_VAR 0 3
20194: PLUS
20195: ST_TO_ADDR
20196: GO 20214
// length := i_to - i_from ;
20198: LD_ADDR_VAR 0 11
20202: PUSH
20203: LD_VAR 0 3
20207: PUSH
20208: LD_VAR 0 2
20212: MINUS
20213: ST_TO_ADDR
// end else
20214: GO 20277
// begin d := - 1 ;
20216: LD_ADDR_VAR 0 9
20220: PUSH
20221: LD_INT 1
20223: NEG
20224: ST_TO_ADDR
// if i_from > i_to then
20225: LD_VAR 0 2
20229: PUSH
20230: LD_VAR 0 3
20234: GREATER
20235: IFFALSE 20255
// length := i_from - i_to else
20237: LD_ADDR_VAR 0 11
20241: PUSH
20242: LD_VAR 0 2
20246: PUSH
20247: LD_VAR 0 3
20251: MINUS
20252: ST_TO_ADDR
20253: GO 20277
// length := ( array - i_to ) + i_from ;
20255: LD_ADDR_VAR 0 11
20259: PUSH
20260: LD_VAR 0 1
20264: PUSH
20265: LD_VAR 0 3
20269: MINUS
20270: PUSH
20271: LD_VAR 0 2
20275: PLUS
20276: ST_TO_ADDR
// end ; if not length then
20277: LD_VAR 0 11
20281: NOT
20282: IFFALSE 20286
// exit ;
20284: GO 20444
// tmp := array ;
20286: LD_ADDR_VAR 0 10
20290: PUSH
20291: LD_VAR 0 1
20295: ST_TO_ADDR
// for i = 1 to length do
20296: LD_ADDR_VAR 0 6
20300: PUSH
20301: DOUBLE
20302: LD_INT 1
20304: DEC
20305: ST_TO_ADDR
20306: LD_VAR 0 11
20310: PUSH
20311: FOR_TO
20312: IFFALSE 20432
// begin for j = 1 to array do
20314: LD_ADDR_VAR 0 7
20318: PUSH
20319: DOUBLE
20320: LD_INT 1
20322: DEC
20323: ST_TO_ADDR
20324: LD_VAR 0 1
20328: PUSH
20329: FOR_TO
20330: IFFALSE 20418
// begin k := j + d ;
20332: LD_ADDR_VAR 0 8
20336: PUSH
20337: LD_VAR 0 7
20341: PUSH
20342: LD_VAR 0 9
20346: PLUS
20347: ST_TO_ADDR
// if k > array then
20348: LD_VAR 0 8
20352: PUSH
20353: LD_VAR 0 1
20357: GREATER
20358: IFFALSE 20368
// k := 1 ;
20360: LD_ADDR_VAR 0 8
20364: PUSH
20365: LD_INT 1
20367: ST_TO_ADDR
// if not k then
20368: LD_VAR 0 8
20372: NOT
20373: IFFALSE 20385
// k := array ;
20375: LD_ADDR_VAR 0 8
20379: PUSH
20380: LD_VAR 0 1
20384: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20385: LD_ADDR_VAR 0 10
20389: PUSH
20390: LD_VAR 0 10
20394: PPUSH
20395: LD_VAR 0 8
20399: PPUSH
20400: LD_VAR 0 1
20404: PUSH
20405: LD_VAR 0 7
20409: ARRAY
20410: PPUSH
20411: CALL_OW 1
20415: ST_TO_ADDR
// end ;
20416: GO 20329
20418: POP
20419: POP
// array := tmp ;
20420: LD_ADDR_VAR 0 1
20424: PUSH
20425: LD_VAR 0 10
20429: ST_TO_ADDR
// end ;
20430: GO 20311
20432: POP
20433: POP
// result := array ;
20434: LD_ADDR_VAR 0 5
20438: PUSH
20439: LD_VAR 0 1
20443: ST_TO_ADDR
// end ;
20444: LD_VAR 0 5
20448: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20449: LD_INT 0
20451: PPUSH
20452: PPUSH
// result := 0 ;
20453: LD_ADDR_VAR 0 3
20457: PUSH
20458: LD_INT 0
20460: ST_TO_ADDR
// if not array or not value in array then
20461: LD_VAR 0 1
20465: NOT
20466: IFTRUE 20481
20468: PUSH
20469: LD_VAR 0 2
20473: PUSH
20474: LD_VAR 0 1
20478: IN
20479: NOT
20480: OR
20481: IFFALSE 20485
// exit ;
20483: GO 20539
// for i = 1 to array do
20485: LD_ADDR_VAR 0 4
20489: PUSH
20490: DOUBLE
20491: LD_INT 1
20493: DEC
20494: ST_TO_ADDR
20495: LD_VAR 0 1
20499: PUSH
20500: FOR_TO
20501: IFFALSE 20537
// if value = array [ i ] then
20503: LD_VAR 0 2
20507: PUSH
20508: LD_VAR 0 1
20512: PUSH
20513: LD_VAR 0 4
20517: ARRAY
20518: EQUAL
20519: IFFALSE 20535
// begin result := i ;
20521: LD_ADDR_VAR 0 3
20525: PUSH
20526: LD_VAR 0 4
20530: ST_TO_ADDR
// exit ;
20531: POP
20532: POP
20533: GO 20539
// end ;
20535: GO 20500
20537: POP
20538: POP
// end ;
20539: LD_VAR 0 3
20543: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20544: LD_INT 0
20546: PPUSH
// vc_chassis := chassis ;
20547: LD_ADDR_OWVAR 37
20551: PUSH
20552: LD_VAR 0 1
20556: ST_TO_ADDR
// vc_engine := engine ;
20557: LD_ADDR_OWVAR 39
20561: PUSH
20562: LD_VAR 0 2
20566: ST_TO_ADDR
// vc_control := control ;
20567: LD_ADDR_OWVAR 38
20571: PUSH
20572: LD_VAR 0 3
20576: ST_TO_ADDR
// vc_weapon := weapon ;
20577: LD_ADDR_OWVAR 40
20581: PUSH
20582: LD_VAR 0 4
20586: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20587: LD_ADDR_OWVAR 41
20591: PUSH
20592: LD_VAR 0 5
20596: ST_TO_ADDR
// end ;
20597: LD_VAR 0 6
20601: RET
// export function WantPlant ( unit ) ; var task ; begin
20602: LD_INT 0
20604: PPUSH
20605: PPUSH
// result := false ;
20606: LD_ADDR_VAR 0 2
20610: PUSH
20611: LD_INT 0
20613: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20614: LD_ADDR_VAR 0 3
20618: PUSH
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 437
20628: ST_TO_ADDR
// if task then
20629: LD_VAR 0 3
20633: IFFALSE 20661
// if task [ 1 ] [ 1 ] = p then
20635: LD_VAR 0 3
20639: PUSH
20640: LD_INT 1
20642: ARRAY
20643: PUSH
20644: LD_INT 1
20646: ARRAY
20647: PUSH
20648: LD_STRING p
20650: EQUAL
20651: IFFALSE 20661
// result := true ;
20653: LD_ADDR_VAR 0 2
20657: PUSH
20658: LD_INT 1
20660: ST_TO_ADDR
// end ;
20661: LD_VAR 0 2
20665: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20666: LD_INT 0
20668: PPUSH
20669: PPUSH
20670: PPUSH
20671: PPUSH
// if pos < 1 then
20672: LD_VAR 0 2
20676: PUSH
20677: LD_INT 1
20679: LESS
20680: IFFALSE 20684
// exit ;
20682: GO 20987
// if pos = 1 then
20684: LD_VAR 0 2
20688: PUSH
20689: LD_INT 1
20691: EQUAL
20692: IFFALSE 20725
// result := Replace ( arr , pos [ 1 ] , value ) else
20694: LD_ADDR_VAR 0 4
20698: PUSH
20699: LD_VAR 0 1
20703: PPUSH
20704: LD_VAR 0 2
20708: PUSH
20709: LD_INT 1
20711: ARRAY
20712: PPUSH
20713: LD_VAR 0 3
20717: PPUSH
20718: CALL_OW 1
20722: ST_TO_ADDR
20723: GO 20987
// begin tmp := arr ;
20725: LD_ADDR_VAR 0 6
20729: PUSH
20730: LD_VAR 0 1
20734: ST_TO_ADDR
// s_arr := [ tmp ] ;
20735: LD_ADDR_VAR 0 7
20739: PUSH
20740: LD_VAR 0 6
20744: PUSH
20745: EMPTY
20746: LIST
20747: ST_TO_ADDR
// for i = 1 to pos - 1 do
20748: LD_ADDR_VAR 0 5
20752: PUSH
20753: DOUBLE
20754: LD_INT 1
20756: DEC
20757: ST_TO_ADDR
20758: LD_VAR 0 2
20762: PUSH
20763: LD_INT 1
20765: MINUS
20766: PUSH
20767: FOR_TO
20768: IFFALSE 20813
// begin tmp := tmp [ pos [ i ] ] ;
20770: LD_ADDR_VAR 0 6
20774: PUSH
20775: LD_VAR 0 6
20779: PUSH
20780: LD_VAR 0 2
20784: PUSH
20785: LD_VAR 0 5
20789: ARRAY
20790: ARRAY
20791: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20792: LD_ADDR_VAR 0 7
20796: PUSH
20797: LD_VAR 0 7
20801: PUSH
20802: LD_VAR 0 6
20806: PUSH
20807: EMPTY
20808: LIST
20809: ADD
20810: ST_TO_ADDR
// end ;
20811: GO 20767
20813: POP
20814: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20815: LD_ADDR_VAR 0 6
20819: PUSH
20820: LD_VAR 0 6
20824: PPUSH
20825: LD_VAR 0 2
20829: PUSH
20830: LD_VAR 0 2
20834: ARRAY
20835: PPUSH
20836: LD_VAR 0 3
20840: PPUSH
20841: CALL_OW 1
20845: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20846: LD_ADDR_VAR 0 7
20850: PUSH
20851: LD_VAR 0 7
20855: PPUSH
20856: LD_VAR 0 7
20860: PPUSH
20861: LD_VAR 0 6
20865: PPUSH
20866: CALL_OW 1
20870: ST_TO_ADDR
// for i = s_arr downto 2 do
20871: LD_ADDR_VAR 0 5
20875: PUSH
20876: DOUBLE
20877: LD_VAR 0 7
20881: INC
20882: ST_TO_ADDR
20883: LD_INT 2
20885: PUSH
20886: FOR_DOWNTO
20887: IFFALSE 20971
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20889: LD_ADDR_VAR 0 6
20893: PUSH
20894: LD_VAR 0 7
20898: PUSH
20899: LD_VAR 0 5
20903: PUSH
20904: LD_INT 1
20906: MINUS
20907: ARRAY
20908: PPUSH
20909: LD_VAR 0 2
20913: PUSH
20914: LD_VAR 0 5
20918: PUSH
20919: LD_INT 1
20921: MINUS
20922: ARRAY
20923: PPUSH
20924: LD_VAR 0 7
20928: PUSH
20929: LD_VAR 0 5
20933: ARRAY
20934: PPUSH
20935: CALL_OW 1
20939: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20940: LD_ADDR_VAR 0 7
20944: PUSH
20945: LD_VAR 0 7
20949: PPUSH
20950: LD_VAR 0 5
20954: PUSH
20955: LD_INT 1
20957: MINUS
20958: PPUSH
20959: LD_VAR 0 6
20963: PPUSH
20964: CALL_OW 1
20968: ST_TO_ADDR
// end ;
20969: GO 20886
20971: POP
20972: POP
// result := s_arr [ 1 ] ;
20973: LD_ADDR_VAR 0 4
20977: PUSH
20978: LD_VAR 0 7
20982: PUSH
20983: LD_INT 1
20985: ARRAY
20986: ST_TO_ADDR
// end ; end ;
20987: LD_VAR 0 4
20991: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20992: LD_INT 0
20994: PPUSH
20995: PPUSH
// if not list then
20996: LD_VAR 0 1
21000: NOT
21001: IFFALSE 21005
// exit ;
21003: GO 21096
// i := list [ pos1 ] ;
21005: LD_ADDR_VAR 0 5
21009: PUSH
21010: LD_VAR 0 1
21014: PUSH
21015: LD_VAR 0 2
21019: ARRAY
21020: ST_TO_ADDR
// if not i then
21021: LD_VAR 0 5
21025: NOT
21026: IFFALSE 21030
// exit ;
21028: GO 21096
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21030: LD_ADDR_VAR 0 1
21034: PUSH
21035: LD_VAR 0 1
21039: PPUSH
21040: LD_VAR 0 2
21044: PPUSH
21045: LD_VAR 0 1
21049: PUSH
21050: LD_VAR 0 3
21054: ARRAY
21055: PPUSH
21056: CALL_OW 1
21060: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21061: LD_ADDR_VAR 0 1
21065: PUSH
21066: LD_VAR 0 1
21070: PPUSH
21071: LD_VAR 0 3
21075: PPUSH
21076: LD_VAR 0 5
21080: PPUSH
21081: CALL_OW 1
21085: ST_TO_ADDR
// result := list ;
21086: LD_ADDR_VAR 0 4
21090: PUSH
21091: LD_VAR 0 1
21095: ST_TO_ADDR
// end ;
21096: LD_VAR 0 4
21100: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21101: LD_INT 0
21103: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21104: LD_ADDR_VAR 0 5
21108: PUSH
21109: LD_VAR 0 1
21113: PPUSH
21114: CALL_OW 250
21118: PPUSH
21119: LD_VAR 0 1
21123: PPUSH
21124: CALL_OW 251
21128: PPUSH
21129: LD_VAR 0 2
21133: PPUSH
21134: LD_VAR 0 3
21138: PPUSH
21139: LD_VAR 0 4
21143: PPUSH
21144: CALL 21526 0 5
21148: ST_TO_ADDR
// end ;
21149: LD_VAR 0 5
21153: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21154: LD_INT 0
21156: PPUSH
21157: PPUSH
21158: PPUSH
21159: PPUSH
// if not list or not unit then
21160: LD_VAR 0 2
21164: NOT
21165: IFTRUE 21174
21167: PUSH
21168: LD_VAR 0 1
21172: NOT
21173: OR
21174: IFFALSE 21178
// exit ;
21176: GO 21521
// result := [ ] ;
21178: LD_ADDR_VAR 0 5
21182: PUSH
21183: EMPTY
21184: ST_TO_ADDR
// for i in list do
21185: LD_ADDR_VAR 0 6
21189: PUSH
21190: LD_VAR 0 2
21194: PUSH
21195: FOR_IN
21196: IFFALSE 21414
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21198: LD_ADDR_VAR 0 8
21202: PUSH
21203: LD_VAR 0 1
21207: PPUSH
21208: LD_VAR 0 6
21212: PUSH
21213: LD_INT 1
21215: ARRAY
21216: PPUSH
21217: LD_VAR 0 6
21221: PUSH
21222: LD_INT 2
21224: ARRAY
21225: PPUSH
21226: CALL_OW 297
21230: ST_TO_ADDR
// if not Count ( result ) then
21231: LD_VAR 0 5
21235: PPUSH
21236: CALL 17782 0 1
21240: NOT
21241: IFFALSE 21274
// begin result := Join ( result , [ i , tmp ] ) ;
21243: LD_ADDR_VAR 0 5
21247: PUSH
21248: LD_VAR 0 5
21252: PPUSH
21253: LD_VAR 0 6
21257: PUSH
21258: LD_VAR 0 8
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL 53714 0 2
21271: ST_TO_ADDR
// continue ;
21272: GO 21195
// end ; if result [ result ] [ 2 ] <= tmp then
21274: LD_VAR 0 5
21278: PUSH
21279: LD_VAR 0 5
21283: ARRAY
21284: PUSH
21285: LD_INT 2
21287: ARRAY
21288: PUSH
21289: LD_VAR 0 8
21293: LESSEQUAL
21294: IFFALSE 21327
// result := Join ( result , [ i , tmp ] ) else
21296: LD_ADDR_VAR 0 5
21300: PUSH
21301: LD_VAR 0 5
21305: PPUSH
21306: LD_VAR 0 6
21310: PUSH
21311: LD_VAR 0 8
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PPUSH
21320: CALL 53714 0 2
21324: ST_TO_ADDR
21325: GO 21412
// begin for j := 1 to Count ( result ) do
21327: LD_ADDR_VAR 0 7
21331: PUSH
21332: DOUBLE
21333: LD_INT 1
21335: DEC
21336: ST_TO_ADDR
21337: LD_VAR 0 5
21341: PPUSH
21342: CALL 17782 0 1
21346: PUSH
21347: FOR_TO
21348: IFFALSE 21410
// begin if tmp < result [ j ] [ 2 ] then
21350: LD_VAR 0 8
21354: PUSH
21355: LD_VAR 0 5
21359: PUSH
21360: LD_VAR 0 7
21364: ARRAY
21365: PUSH
21366: LD_INT 2
21368: ARRAY
21369: LESS
21370: IFFALSE 21408
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21372: LD_ADDR_VAR 0 5
21376: PUSH
21377: LD_VAR 0 5
21381: PPUSH
21382: LD_VAR 0 7
21386: PPUSH
21387: LD_VAR 0 6
21391: PUSH
21392: LD_VAR 0 8
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PPUSH
21401: CALL_OW 2
21405: ST_TO_ADDR
// break ;
21406: GO 21410
// end ; end ;
21408: GO 21347
21410: POP
21411: POP
// end ; end ;
21412: GO 21195
21414: POP
21415: POP
// if result and not asc then
21416: LD_VAR 0 5
21420: IFFALSE 21429
21422: PUSH
21423: LD_VAR 0 3
21427: NOT
21428: AND
21429: IFFALSE 21446
// result := ReverseArray ( result ) ;
21431: LD_ADDR_VAR 0 5
21435: PUSH
21436: LD_VAR 0 5
21440: PPUSH
21441: CALL 48804 0 1
21445: ST_TO_ADDR
// tmp := [ ] ;
21446: LD_ADDR_VAR 0 8
21450: PUSH
21451: EMPTY
21452: ST_TO_ADDR
// if mode then
21453: LD_VAR 0 4
21457: IFFALSE 21521
// begin for i := 1 to result do
21459: LD_ADDR_VAR 0 6
21463: PUSH
21464: DOUBLE
21465: LD_INT 1
21467: DEC
21468: ST_TO_ADDR
21469: LD_VAR 0 5
21473: PUSH
21474: FOR_TO
21475: IFFALSE 21509
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21477: LD_ADDR_VAR 0 8
21481: PUSH
21482: LD_VAR 0 8
21486: PPUSH
21487: LD_VAR 0 5
21491: PUSH
21492: LD_VAR 0 6
21496: ARRAY
21497: PUSH
21498: LD_INT 1
21500: ARRAY
21501: PPUSH
21502: CALL 53714 0 2
21506: ST_TO_ADDR
21507: GO 21474
21509: POP
21510: POP
// result := tmp ;
21511: LD_ADDR_VAR 0 5
21515: PUSH
21516: LD_VAR 0 8
21520: ST_TO_ADDR
// end ; end ;
21521: LD_VAR 0 5
21525: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21526: LD_INT 0
21528: PPUSH
21529: PPUSH
21530: PPUSH
21531: PPUSH
// if not list then
21532: LD_VAR 0 3
21536: NOT
21537: IFFALSE 21541
// exit ;
21539: GO 21931
// result := [ ] ;
21541: LD_ADDR_VAR 0 6
21545: PUSH
21546: EMPTY
21547: ST_TO_ADDR
// for i in list do
21548: LD_ADDR_VAR 0 7
21552: PUSH
21553: LD_VAR 0 3
21557: PUSH
21558: FOR_IN
21559: IFFALSE 21761
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21561: LD_ADDR_VAR 0 9
21565: PUSH
21566: LD_VAR 0 7
21570: PPUSH
21571: LD_VAR 0 1
21575: PPUSH
21576: LD_VAR 0 2
21580: PPUSH
21581: CALL_OW 297
21585: ST_TO_ADDR
// if not result then
21586: LD_VAR 0 6
21590: NOT
21591: IFFALSE 21617
// result := [ [ i , tmp ] ] else
21593: LD_ADDR_VAR 0 6
21597: PUSH
21598: LD_VAR 0 7
21602: PUSH
21603: LD_VAR 0 9
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: EMPTY
21613: LIST
21614: ST_TO_ADDR
21615: GO 21759
// begin if result [ result ] [ 2 ] <= tmp then
21617: LD_VAR 0 6
21621: PUSH
21622: LD_VAR 0 6
21626: ARRAY
21627: PUSH
21628: LD_INT 2
21630: ARRAY
21631: PUSH
21632: LD_VAR 0 9
21636: LESSEQUAL
21637: IFFALSE 21679
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21639: LD_ADDR_VAR 0 6
21643: PUSH
21644: LD_VAR 0 6
21648: PPUSH
21649: LD_VAR 0 6
21653: PUSH
21654: LD_INT 1
21656: PLUS
21657: PPUSH
21658: LD_VAR 0 7
21662: PUSH
21663: LD_VAR 0 9
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PPUSH
21672: CALL_OW 2
21676: ST_TO_ADDR
21677: GO 21759
// for j := 1 to result do
21679: LD_ADDR_VAR 0 8
21683: PUSH
21684: DOUBLE
21685: LD_INT 1
21687: DEC
21688: ST_TO_ADDR
21689: LD_VAR 0 6
21693: PUSH
21694: FOR_TO
21695: IFFALSE 21757
// begin if tmp < result [ j ] [ 2 ] then
21697: LD_VAR 0 9
21701: PUSH
21702: LD_VAR 0 6
21706: PUSH
21707: LD_VAR 0 8
21711: ARRAY
21712: PUSH
21713: LD_INT 2
21715: ARRAY
21716: LESS
21717: IFFALSE 21755
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21719: LD_ADDR_VAR 0 6
21723: PUSH
21724: LD_VAR 0 6
21728: PPUSH
21729: LD_VAR 0 8
21733: PPUSH
21734: LD_VAR 0 7
21738: PUSH
21739: LD_VAR 0 9
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PPUSH
21748: CALL_OW 2
21752: ST_TO_ADDR
// break ;
21753: GO 21757
// end ; end ;
21755: GO 21694
21757: POP
21758: POP
// end ; end ;
21759: GO 21558
21761: POP
21762: POP
// if result and not asc then
21763: LD_VAR 0 6
21767: IFFALSE 21776
21769: PUSH
21770: LD_VAR 0 4
21774: NOT
21775: AND
21776: IFFALSE 21851
// begin tmp := result ;
21778: LD_ADDR_VAR 0 9
21782: PUSH
21783: LD_VAR 0 6
21787: ST_TO_ADDR
// for i = tmp downto 1 do
21788: LD_ADDR_VAR 0 7
21792: PUSH
21793: DOUBLE
21794: LD_VAR 0 9
21798: INC
21799: ST_TO_ADDR
21800: LD_INT 1
21802: PUSH
21803: FOR_DOWNTO
21804: IFFALSE 21849
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21806: LD_ADDR_VAR 0 6
21810: PUSH
21811: LD_VAR 0 6
21815: PPUSH
21816: LD_VAR 0 9
21820: PUSH
21821: LD_VAR 0 7
21825: MINUS
21826: PUSH
21827: LD_INT 1
21829: PLUS
21830: PPUSH
21831: LD_VAR 0 9
21835: PUSH
21836: LD_VAR 0 7
21840: ARRAY
21841: PPUSH
21842: CALL_OW 1
21846: ST_TO_ADDR
21847: GO 21803
21849: POP
21850: POP
// end ; tmp := [ ] ;
21851: LD_ADDR_VAR 0 9
21855: PUSH
21856: EMPTY
21857: ST_TO_ADDR
// if mode then
21858: LD_VAR 0 5
21862: IFFALSE 21931
// begin for i = 1 to result do
21864: LD_ADDR_VAR 0 7
21868: PUSH
21869: DOUBLE
21870: LD_INT 1
21872: DEC
21873: ST_TO_ADDR
21874: LD_VAR 0 6
21878: PUSH
21879: FOR_TO
21880: IFFALSE 21919
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21882: LD_ADDR_VAR 0 9
21886: PUSH
21887: LD_VAR 0 9
21891: PPUSH
21892: LD_VAR 0 7
21896: PPUSH
21897: LD_VAR 0 6
21901: PUSH
21902: LD_VAR 0 7
21906: ARRAY
21907: PUSH
21908: LD_INT 1
21910: ARRAY
21911: PPUSH
21912: CALL_OW 1
21916: ST_TO_ADDR
21917: GO 21879
21919: POP
21920: POP
// result := tmp ;
21921: LD_ADDR_VAR 0 6
21925: PUSH
21926: LD_VAR 0 9
21930: ST_TO_ADDR
// end ; end ;
21931: LD_VAR 0 6
21935: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21936: LD_INT 0
21938: PPUSH
21939: PPUSH
21940: PPUSH
21941: PPUSH
21942: PPUSH
21943: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21944: LD_ADDR_VAR 0 5
21948: PUSH
21949: LD_INT 0
21951: PUSH
21952: LD_INT 0
21954: PUSH
21955: LD_INT 0
21957: PUSH
21958: EMPTY
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: ST_TO_ADDR
// if not x or not y then
21966: LD_VAR 0 2
21970: NOT
21971: IFTRUE 21980
21973: PUSH
21974: LD_VAR 0 3
21978: NOT
21979: OR
21980: IFFALSE 21984
// exit ;
21982: GO 23640
// if not range then
21984: LD_VAR 0 4
21988: NOT
21989: IFFALSE 21999
// range := 10 ;
21991: LD_ADDR_VAR 0 4
21995: PUSH
21996: LD_INT 10
21998: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21999: LD_ADDR_VAR 0 8
22003: PUSH
22004: LD_INT 81
22006: PUSH
22007: LD_VAR 0 1
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 92
22018: PUSH
22019: LD_VAR 0 2
22023: PUSH
22024: LD_VAR 0 3
22028: PUSH
22029: LD_VAR 0 4
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 3
22042: PUSH
22043: LD_INT 21
22045: PUSH
22046: LD_INT 3
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: LIST
22061: PPUSH
22062: CALL_OW 69
22066: ST_TO_ADDR
// if not tmp then
22067: LD_VAR 0 8
22071: NOT
22072: IFFALSE 22076
// exit ;
22074: GO 23640
// for i in tmp do
22076: LD_ADDR_VAR 0 6
22080: PUSH
22081: LD_VAR 0 8
22085: PUSH
22086: FOR_IN
22087: IFFALSE 23615
// begin points := [ 0 , 0 , 0 ] ;
22089: LD_ADDR_VAR 0 9
22093: PUSH
22094: LD_INT 0
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: LIST
22107: ST_TO_ADDR
// bpoints := 1 ;
22108: LD_ADDR_VAR 0 10
22112: PUSH
22113: LD_INT 1
22115: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22116: LD_VAR 0 6
22120: PPUSH
22121: CALL_OW 247
22125: PUSH
22126: LD_INT 1
22128: DOUBLE
22129: EQUAL
22130: IFTRUE 22134
22132: GO 22716
22134: POP
// begin if GetClass ( i ) = 1 then
22135: LD_VAR 0 6
22139: PPUSH
22140: CALL_OW 257
22144: PUSH
22145: LD_INT 1
22147: EQUAL
22148: IFFALSE 22169
// points := [ 10 , 5 , 3 ] ;
22150: LD_ADDR_VAR 0 9
22154: PUSH
22155: LD_INT 10
22157: PUSH
22158: LD_INT 5
22160: PUSH
22161: LD_INT 3
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: LIST
22168: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22169: LD_VAR 0 6
22173: PPUSH
22174: CALL_OW 257
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: LD_INT 3
22184: PUSH
22185: LD_INT 4
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: IN
22193: IFFALSE 22214
// points := [ 3 , 2 , 1 ] ;
22195: LD_ADDR_VAR 0 9
22199: PUSH
22200: LD_INT 3
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: LIST
22213: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22214: LD_VAR 0 6
22218: PPUSH
22219: CALL_OW 257
22223: PUSH
22224: LD_INT 5
22226: EQUAL
22227: IFFALSE 22248
// points := [ 130 , 5 , 2 ] ;
22229: LD_ADDR_VAR 0 9
22233: PUSH
22234: LD_INT 130
22236: PUSH
22237: LD_INT 5
22239: PUSH
22240: LD_INT 2
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22248: LD_VAR 0 6
22252: PPUSH
22253: CALL_OW 257
22257: PUSH
22258: LD_INT 8
22260: EQUAL
22261: IFFALSE 22282
// points := [ 35 , 35 , 30 ] ;
22263: LD_ADDR_VAR 0 9
22267: PUSH
22268: LD_INT 35
22270: PUSH
22271: LD_INT 35
22273: PUSH
22274: LD_INT 30
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: LIST
22281: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22282: LD_VAR 0 6
22286: PPUSH
22287: CALL_OW 257
22291: PUSH
22292: LD_INT 9
22294: EQUAL
22295: IFFALSE 22316
// points := [ 20 , 55 , 40 ] ;
22297: LD_ADDR_VAR 0 9
22301: PUSH
22302: LD_INT 20
22304: PUSH
22305: LD_INT 55
22307: PUSH
22308: LD_INT 40
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: LIST
22315: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22316: LD_VAR 0 6
22320: PPUSH
22321: CALL_OW 257
22325: PUSH
22326: LD_INT 12
22328: PUSH
22329: LD_INT 16
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: IN
22336: IFFALSE 22357
// points := [ 5 , 3 , 2 ] ;
22338: LD_ADDR_VAR 0 9
22342: PUSH
22343: LD_INT 5
22345: PUSH
22346: LD_INT 3
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: LIST
22356: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22357: LD_VAR 0 6
22361: PPUSH
22362: CALL_OW 257
22366: PUSH
22367: LD_INT 17
22369: EQUAL
22370: IFFALSE 22391
// points := [ 100 , 50 , 75 ] ;
22372: LD_ADDR_VAR 0 9
22376: PUSH
22377: LD_INT 100
22379: PUSH
22380: LD_INT 50
22382: PUSH
22383: LD_INT 75
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: LIST
22390: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22391: LD_VAR 0 6
22395: PPUSH
22396: CALL_OW 257
22400: PUSH
22401: LD_INT 15
22403: EQUAL
22404: IFFALSE 22425
// points := [ 10 , 5 , 3 ] ;
22406: LD_ADDR_VAR 0 9
22410: PUSH
22411: LD_INT 10
22413: PUSH
22414: LD_INT 5
22416: PUSH
22417: LD_INT 3
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: LIST
22424: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22425: LD_VAR 0 6
22429: PPUSH
22430: CALL_OW 257
22434: PUSH
22435: LD_INT 14
22437: EQUAL
22438: IFFALSE 22459
// points := [ 10 , 0 , 0 ] ;
22440: LD_ADDR_VAR 0 9
22444: PUSH
22445: LD_INT 10
22447: PUSH
22448: LD_INT 0
22450: PUSH
22451: LD_INT 0
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22459: LD_VAR 0 6
22463: PPUSH
22464: CALL_OW 257
22468: PUSH
22469: LD_INT 11
22471: EQUAL
22472: IFFALSE 22493
// points := [ 30 , 10 , 5 ] ;
22474: LD_ADDR_VAR 0 9
22478: PUSH
22479: LD_INT 30
22481: PUSH
22482: LD_INT 10
22484: PUSH
22485: LD_INT 5
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: LIST
22492: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22493: LD_VAR 0 1
22497: PPUSH
22498: LD_INT 5
22500: PPUSH
22501: CALL_OW 321
22505: PUSH
22506: LD_INT 2
22508: EQUAL
22509: IFFALSE 22526
// bpoints := bpoints * 1.8 ;
22511: LD_ADDR_VAR 0 10
22515: PUSH
22516: LD_VAR 0 10
22520: PUSH
22521: LD_REAL  1.80000000000000E+0000
22524: MUL
22525: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22526: LD_VAR 0 6
22530: PPUSH
22531: CALL_OW 257
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: LD_INT 2
22541: PUSH
22542: LD_INT 3
22544: PUSH
22545: LD_INT 4
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: IN
22554: IFFALSE 22574
22556: PUSH
22557: LD_VAR 0 1
22561: PPUSH
22562: LD_INT 51
22564: PPUSH
22565: CALL_OW 321
22569: PUSH
22570: LD_INT 2
22572: EQUAL
22573: AND
22574: IFFALSE 22591
// bpoints := bpoints * 1.2 ;
22576: LD_ADDR_VAR 0 10
22580: PUSH
22581: LD_VAR 0 10
22585: PUSH
22586: LD_REAL  1.20000000000000E+0000
22589: MUL
22590: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22591: LD_VAR 0 6
22595: PPUSH
22596: CALL_OW 257
22600: PUSH
22601: LD_INT 5
22603: PUSH
22604: LD_INT 7
22606: PUSH
22607: LD_INT 9
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: LIST
22614: IN
22615: IFFALSE 22635
22617: PUSH
22618: LD_VAR 0 1
22622: PPUSH
22623: LD_INT 52
22625: PPUSH
22626: CALL_OW 321
22630: PUSH
22631: LD_INT 2
22633: EQUAL
22634: AND
22635: IFFALSE 22652
// bpoints := bpoints * 1.5 ;
22637: LD_ADDR_VAR 0 10
22641: PUSH
22642: LD_VAR 0 10
22646: PUSH
22647: LD_REAL  1.50000000000000E+0000
22650: MUL
22651: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22652: LD_VAR 0 1
22656: PPUSH
22657: LD_INT 66
22659: PPUSH
22660: CALL_OW 321
22664: PUSH
22665: LD_INT 2
22667: EQUAL
22668: IFFALSE 22685
// bpoints := bpoints * 1.1 ;
22670: LD_ADDR_VAR 0 10
22674: PUSH
22675: LD_VAR 0 10
22679: PUSH
22680: LD_REAL  1.10000000000000E+0000
22683: MUL
22684: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22685: LD_ADDR_VAR 0 10
22689: PUSH
22690: LD_VAR 0 10
22694: PUSH
22695: LD_VAR 0 6
22699: PPUSH
22700: LD_INT 1
22702: PPUSH
22703: CALL_OW 259
22707: PUSH
22708: LD_REAL  1.15000000000000E+0000
22711: MUL
22712: MUL
22713: ST_TO_ADDR
// end ; unit_vehicle :
22714: GO 23544
22716: LD_INT 2
22718: DOUBLE
22719: EQUAL
22720: IFTRUE 22724
22722: GO 23532
22724: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22725: LD_VAR 0 6
22729: PPUSH
22730: CALL_OW 264
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 42
22740: PUSH
22741: LD_INT 24
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: IN
22749: IFFALSE 22770
// points := [ 25 , 5 , 3 ] ;
22751: LD_ADDR_VAR 0 9
22755: PUSH
22756: LD_INT 25
22758: PUSH
22759: LD_INT 5
22761: PUSH
22762: LD_INT 3
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22770: LD_VAR 0 6
22774: PPUSH
22775: CALL_OW 264
22779: PUSH
22780: LD_INT 4
22782: PUSH
22783: LD_INT 43
22785: PUSH
22786: LD_INT 25
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: IN
22794: IFFALSE 22815
// points := [ 40 , 15 , 5 ] ;
22796: LD_ADDR_VAR 0 9
22800: PUSH
22801: LD_INT 40
22803: PUSH
22804: LD_INT 15
22806: PUSH
22807: LD_INT 5
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: LIST
22814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22815: LD_VAR 0 6
22819: PPUSH
22820: CALL_OW 264
22824: PUSH
22825: LD_INT 3
22827: PUSH
22828: LD_INT 23
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: IN
22835: IFFALSE 22856
// points := [ 7 , 25 , 8 ] ;
22837: LD_ADDR_VAR 0 9
22841: PUSH
22842: LD_INT 7
22844: PUSH
22845: LD_INT 25
22847: PUSH
22848: LD_INT 8
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: LIST
22855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22856: LD_VAR 0 6
22860: PPUSH
22861: CALL_OW 264
22865: PUSH
22866: LD_INT 5
22868: PUSH
22869: LD_INT 27
22871: PUSH
22872: LD_INT 44
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: LIST
22879: IN
22880: IFFALSE 22901
// points := [ 14 , 50 , 16 ] ;
22882: LD_ADDR_VAR 0 9
22886: PUSH
22887: LD_INT 14
22889: PUSH
22890: LD_INT 50
22892: PUSH
22893: LD_INT 16
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22901: LD_VAR 0 6
22905: PPUSH
22906: CALL_OW 264
22910: PUSH
22911: LD_INT 6
22913: PUSH
22914: LD_INT 46
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: IN
22921: IFFALSE 22942
// points := [ 32 , 120 , 70 ] ;
22923: LD_ADDR_VAR 0 9
22927: PUSH
22928: LD_INT 32
22930: PUSH
22931: LD_INT 120
22933: PUSH
22934: LD_INT 70
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: LIST
22941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22942: LD_VAR 0 6
22946: PPUSH
22947: CALL_OW 264
22951: PUSH
22952: LD_INT 7
22954: PUSH
22955: LD_INT 28
22957: PUSH
22958: LD_INT 45
22960: PUSH
22961: LD_INT 92
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: IN
22970: IFFALSE 22991
// points := [ 35 , 20 , 45 ] ;
22972: LD_ADDR_VAR 0 9
22976: PUSH
22977: LD_INT 35
22979: PUSH
22980: LD_INT 20
22982: PUSH
22983: LD_INT 45
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: LIST
22990: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22991: LD_VAR 0 6
22995: PPUSH
22996: CALL_OW 264
23000: PUSH
23001: LD_INT 47
23003: PUSH
23004: EMPTY
23005: LIST
23006: IN
23007: IFFALSE 23028
// points := [ 67 , 45 , 75 ] ;
23009: LD_ADDR_VAR 0 9
23013: PUSH
23014: LD_INT 67
23016: PUSH
23017: LD_INT 45
23019: PUSH
23020: LD_INT 75
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: LIST
23027: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23028: LD_VAR 0 6
23032: PPUSH
23033: CALL_OW 264
23037: PUSH
23038: LD_INT 26
23040: PUSH
23041: EMPTY
23042: LIST
23043: IN
23044: IFFALSE 23065
// points := [ 120 , 30 , 80 ] ;
23046: LD_ADDR_VAR 0 9
23050: PUSH
23051: LD_INT 120
23053: PUSH
23054: LD_INT 30
23056: PUSH
23057: LD_INT 80
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: LIST
23064: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23065: LD_VAR 0 6
23069: PPUSH
23070: CALL_OW 264
23074: PUSH
23075: LD_INT 22
23077: PUSH
23078: EMPTY
23079: LIST
23080: IN
23081: IFFALSE 23102
// points := [ 40 , 1 , 1 ] ;
23083: LD_ADDR_VAR 0 9
23087: PUSH
23088: LD_INT 40
23090: PUSH
23091: LD_INT 1
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: LIST
23101: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23102: LD_VAR 0 6
23106: PPUSH
23107: CALL_OW 264
23111: PUSH
23112: LD_INT 29
23114: PUSH
23115: EMPTY
23116: LIST
23117: IN
23118: IFFALSE 23139
// points := [ 70 , 200 , 400 ] ;
23120: LD_ADDR_VAR 0 9
23124: PUSH
23125: LD_INT 70
23127: PUSH
23128: LD_INT 200
23130: PUSH
23131: LD_INT 400
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: LIST
23138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23139: LD_VAR 0 6
23143: PPUSH
23144: CALL_OW 264
23148: PUSH
23149: LD_INT 14
23151: PUSH
23152: LD_INT 53
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: IN
23159: IFFALSE 23180
// points := [ 40 , 10 , 20 ] ;
23161: LD_ADDR_VAR 0 9
23165: PUSH
23166: LD_INT 40
23168: PUSH
23169: LD_INT 10
23171: PUSH
23172: LD_INT 20
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23180: LD_VAR 0 6
23184: PPUSH
23185: CALL_OW 264
23189: PUSH
23190: LD_INT 9
23192: PUSH
23193: EMPTY
23194: LIST
23195: IN
23196: IFFALSE 23217
// points := [ 5 , 70 , 20 ] ;
23198: LD_ADDR_VAR 0 9
23202: PUSH
23203: LD_INT 5
23205: PUSH
23206: LD_INT 70
23208: PUSH
23209: LD_INT 20
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: LIST
23216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23217: LD_VAR 0 6
23221: PPUSH
23222: CALL_OW 264
23226: PUSH
23227: LD_INT 10
23229: PUSH
23230: EMPTY
23231: LIST
23232: IN
23233: IFFALSE 23254
// points := [ 35 , 110 , 70 ] ;
23235: LD_ADDR_VAR 0 9
23239: PUSH
23240: LD_INT 35
23242: PUSH
23243: LD_INT 110
23245: PUSH
23246: LD_INT 70
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23254: LD_VAR 0 6
23258: PPUSH
23259: CALL_OW 265
23263: PUSH
23264: LD_INT 25
23266: EQUAL
23267: IFFALSE 23288
// points := [ 80 , 65 , 100 ] ;
23269: LD_ADDR_VAR 0 9
23273: PUSH
23274: LD_INT 80
23276: PUSH
23277: LD_INT 65
23279: PUSH
23280: LD_INT 100
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: LIST
23287: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23288: LD_VAR 0 6
23292: PPUSH
23293: CALL_OW 263
23297: PUSH
23298: LD_INT 1
23300: EQUAL
23301: IFFALSE 23336
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23303: LD_ADDR_VAR 0 10
23307: PUSH
23308: LD_VAR 0 10
23312: PUSH
23313: LD_VAR 0 6
23317: PPUSH
23318: CALL_OW 311
23322: PPUSH
23323: LD_INT 3
23325: PPUSH
23326: CALL_OW 259
23330: PUSH
23331: LD_INT 4
23333: MUL
23334: MUL
23335: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23336: LD_VAR 0 6
23340: PPUSH
23341: CALL_OW 263
23345: PUSH
23346: LD_INT 2
23348: EQUAL
23349: IFFALSE 23400
// begin j := IsControledBy ( i ) ;
23351: LD_ADDR_VAR 0 7
23355: PUSH
23356: LD_VAR 0 6
23360: PPUSH
23361: CALL_OW 312
23365: ST_TO_ADDR
// if j then
23366: LD_VAR 0 7
23370: IFFALSE 23400
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23372: LD_ADDR_VAR 0 10
23376: PUSH
23377: LD_VAR 0 10
23381: PUSH
23382: LD_VAR 0 7
23386: PPUSH
23387: LD_INT 3
23389: PPUSH
23390: CALL_OW 259
23394: PUSH
23395: LD_INT 3
23397: MUL
23398: MUL
23399: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23400: LD_VAR 0 6
23404: PPUSH
23405: CALL_OW 264
23409: PUSH
23410: LD_INT 5
23412: PUSH
23413: LD_INT 6
23415: PUSH
23416: LD_INT 46
23418: PUSH
23419: LD_INT 44
23421: PUSH
23422: LD_INT 47
23424: PUSH
23425: LD_INT 45
23427: PUSH
23428: LD_INT 28
23430: PUSH
23431: LD_INT 7
23433: PUSH
23434: LD_INT 27
23436: PUSH
23437: LD_INT 29
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: IN
23452: IFFALSE 23472
23454: PUSH
23455: LD_VAR 0 1
23459: PPUSH
23460: LD_INT 52
23462: PPUSH
23463: CALL_OW 321
23467: PUSH
23468: LD_INT 2
23470: EQUAL
23471: AND
23472: IFFALSE 23489
// bpoints := bpoints * 1.2 ;
23474: LD_ADDR_VAR 0 10
23478: PUSH
23479: LD_VAR 0 10
23483: PUSH
23484: LD_REAL  1.20000000000000E+0000
23487: MUL
23488: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23489: LD_VAR 0 6
23493: PPUSH
23494: CALL_OW 264
23498: PUSH
23499: LD_INT 6
23501: PUSH
23502: LD_INT 46
23504: PUSH
23505: LD_INT 47
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: LIST
23512: IN
23513: IFFALSE 23530
// bpoints := bpoints * 1.2 ;
23515: LD_ADDR_VAR 0 10
23519: PUSH
23520: LD_VAR 0 10
23524: PUSH
23525: LD_REAL  1.20000000000000E+0000
23528: MUL
23529: ST_TO_ADDR
// end ; unit_building :
23530: GO 23544
23532: LD_INT 3
23534: DOUBLE
23535: EQUAL
23536: IFTRUE 23540
23538: GO 23543
23540: POP
// ; end ;
23541: GO 23544
23543: POP
// for j = 1 to 3 do
23544: LD_ADDR_VAR 0 7
23548: PUSH
23549: DOUBLE
23550: LD_INT 1
23552: DEC
23553: ST_TO_ADDR
23554: LD_INT 3
23556: PUSH
23557: FOR_TO
23558: IFFALSE 23611
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23560: LD_ADDR_VAR 0 5
23564: PUSH
23565: LD_VAR 0 5
23569: PPUSH
23570: LD_VAR 0 7
23574: PPUSH
23575: LD_VAR 0 5
23579: PUSH
23580: LD_VAR 0 7
23584: ARRAY
23585: PUSH
23586: LD_VAR 0 9
23590: PUSH
23591: LD_VAR 0 7
23595: ARRAY
23596: PUSH
23597: LD_VAR 0 10
23601: MUL
23602: PLUS
23603: PPUSH
23604: CALL_OW 1
23608: ST_TO_ADDR
23609: GO 23557
23611: POP
23612: POP
// end ;
23613: GO 22086
23615: POP
23616: POP
// result := Replace ( result , 4 , tmp ) ;
23617: LD_ADDR_VAR 0 5
23621: PUSH
23622: LD_VAR 0 5
23626: PPUSH
23627: LD_INT 4
23629: PPUSH
23630: LD_VAR 0 8
23634: PPUSH
23635: CALL_OW 1
23639: ST_TO_ADDR
// end ;
23640: LD_VAR 0 5
23644: RET
// export function DangerAtRange ( unit , range ) ; begin
23645: LD_INT 0
23647: PPUSH
// if not unit then
23648: LD_VAR 0 1
23652: NOT
23653: IFFALSE 23657
// exit ;
23655: GO 23702
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23657: LD_ADDR_VAR 0 3
23661: PUSH
23662: LD_VAR 0 1
23666: PPUSH
23667: CALL_OW 255
23671: PPUSH
23672: LD_VAR 0 1
23676: PPUSH
23677: CALL_OW 250
23681: PPUSH
23682: LD_VAR 0 1
23686: PPUSH
23687: CALL_OW 251
23691: PPUSH
23692: LD_VAR 0 2
23696: PPUSH
23697: CALL 21936 0 4
23701: ST_TO_ADDR
// end ;
23702: LD_VAR 0 3
23706: RET
// export function DangerInArea ( side , area ) ; begin
23707: LD_INT 0
23709: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23710: LD_ADDR_VAR 0 3
23714: PUSH
23715: LD_VAR 0 2
23719: PPUSH
23720: LD_INT 81
23722: PUSH
23723: LD_VAR 0 1
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PPUSH
23732: CALL_OW 70
23736: ST_TO_ADDR
// end ;
23737: LD_VAR 0 3
23741: RET
// export function IsExtension ( b ) ; begin
23742: LD_INT 0
23744: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23745: LD_ADDR_VAR 0 2
23749: PUSH
23750: LD_VAR 0 1
23754: PUSH
23755: LD_INT 23
23757: PUSH
23758: LD_INT 20
23760: PUSH
23761: LD_INT 22
23763: PUSH
23764: LD_INT 17
23766: PUSH
23767: LD_INT 24
23769: PUSH
23770: LD_INT 21
23772: PUSH
23773: LD_INT 19
23775: PUSH
23776: LD_INT 16
23778: PUSH
23779: LD_INT 25
23781: PUSH
23782: LD_INT 18
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: IN
23797: ST_TO_ADDR
// end ;
23798: LD_VAR 0 2
23802: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23803: LD_INT 0
23805: PPUSH
23806: PPUSH
23807: PPUSH
// result := [ ] ;
23808: LD_ADDR_VAR 0 4
23812: PUSH
23813: EMPTY
23814: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23815: LD_ADDR_VAR 0 5
23819: PUSH
23820: LD_VAR 0 2
23824: PPUSH
23825: LD_INT 21
23827: PUSH
23828: LD_INT 3
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PPUSH
23835: CALL_OW 70
23839: ST_TO_ADDR
// if not tmp then
23840: LD_VAR 0 5
23844: NOT
23845: IFFALSE 23849
// exit ;
23847: GO 23913
// if checkLink then
23849: LD_VAR 0 3
23853: IFFALSE 23903
// begin for i in tmp do
23855: LD_ADDR_VAR 0 6
23859: PUSH
23860: LD_VAR 0 5
23864: PUSH
23865: FOR_IN
23866: IFFALSE 23901
// if GetBase ( i ) <> base then
23868: LD_VAR 0 6
23872: PPUSH
23873: CALL_OW 274
23877: PUSH
23878: LD_VAR 0 1
23882: NONEQUAL
23883: IFFALSE 23899
// ComLinkToBase ( base , i ) ;
23885: LD_VAR 0 1
23889: PPUSH
23890: LD_VAR 0 6
23894: PPUSH
23895: CALL_OW 169
23899: GO 23865
23901: POP
23902: POP
// end ; result := tmp ;
23903: LD_ADDR_VAR 0 4
23907: PUSH
23908: LD_VAR 0 5
23912: ST_TO_ADDR
// end ;
23913: LD_VAR 0 4
23917: RET
// export function ComComplete ( units , b ) ; var i ; begin
23918: LD_INT 0
23920: PPUSH
23921: PPUSH
// if not units then
23922: LD_VAR 0 1
23926: NOT
23927: IFFALSE 23931
// exit ;
23929: GO 24021
// for i in units do
23931: LD_ADDR_VAR 0 4
23935: PUSH
23936: LD_VAR 0 1
23940: PUSH
23941: FOR_IN
23942: IFFALSE 24019
// if BuildingStatus ( b ) = bs_build then
23944: LD_VAR 0 2
23948: PPUSH
23949: CALL_OW 461
23953: PUSH
23954: LD_INT 1
23956: EQUAL
23957: IFFALSE 24017
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23959: LD_VAR 0 4
23963: PPUSH
23964: LD_STRING h
23966: PUSH
23967: LD_VAR 0 2
23971: PPUSH
23972: CALL_OW 250
23976: PUSH
23977: LD_VAR 0 2
23981: PPUSH
23982: CALL_OW 251
23986: PUSH
23987: LD_VAR 0 2
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: LD_INT 0
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: PUSH
24010: EMPTY
24011: LIST
24012: PPUSH
24013: CALL_OW 446
24017: GO 23941
24019: POP
24020: POP
// end ;
24021: LD_VAR 0 3
24025: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24026: LD_INT 0
24028: PPUSH
24029: PPUSH
24030: PPUSH
24031: PPUSH
24032: PPUSH
24033: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24034: LD_VAR 0 1
24038: NOT
24039: IFTRUE 24056
24041: PUSH
24042: LD_VAR 0 1
24046: PPUSH
24047: CALL_OW 263
24051: PUSH
24052: LD_INT 2
24054: NONEQUAL
24055: OR
24056: IFFALSE 24060
// exit ;
24058: GO 24376
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24060: LD_ADDR_VAR 0 6
24064: PUSH
24065: LD_INT 22
24067: PUSH
24068: LD_VAR 0 1
24072: PPUSH
24073: CALL_OW 255
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 2
24084: PUSH
24085: LD_INT 30
24087: PUSH
24088: LD_INT 36
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 34
24097: PUSH
24098: LD_INT 31
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PPUSH
24114: CALL_OW 69
24118: ST_TO_ADDR
// if not tmp then
24119: LD_VAR 0 6
24123: NOT
24124: IFFALSE 24128
// exit ;
24126: GO 24376
// result := [ ] ;
24128: LD_ADDR_VAR 0 2
24132: PUSH
24133: EMPTY
24134: ST_TO_ADDR
// for i in tmp do
24135: LD_ADDR_VAR 0 3
24139: PUSH
24140: LD_VAR 0 6
24144: PUSH
24145: FOR_IN
24146: IFFALSE 24217
// begin t := UnitsInside ( i ) ;
24148: LD_ADDR_VAR 0 4
24152: PUSH
24153: LD_VAR 0 3
24157: PPUSH
24158: CALL_OW 313
24162: ST_TO_ADDR
// if t then
24163: LD_VAR 0 4
24167: IFFALSE 24215
// for j in t do
24169: LD_ADDR_VAR 0 7
24173: PUSH
24174: LD_VAR 0 4
24178: PUSH
24179: FOR_IN
24180: IFFALSE 24213
// result := Replace ( result , result + 1 , j ) ;
24182: LD_ADDR_VAR 0 2
24186: PUSH
24187: LD_VAR 0 2
24191: PPUSH
24192: LD_VAR 0 2
24196: PUSH
24197: LD_INT 1
24199: PLUS
24200: PPUSH
24201: LD_VAR 0 7
24205: PPUSH
24206: CALL_OW 1
24210: ST_TO_ADDR
24211: GO 24179
24213: POP
24214: POP
// end ;
24215: GO 24145
24217: POP
24218: POP
// if not result then
24219: LD_VAR 0 2
24223: NOT
24224: IFFALSE 24228
// exit ;
24226: GO 24376
// mech := result [ 1 ] ;
24228: LD_ADDR_VAR 0 5
24232: PUSH
24233: LD_VAR 0 2
24237: PUSH
24238: LD_INT 1
24240: ARRAY
24241: ST_TO_ADDR
// if result > 1 then
24242: LD_VAR 0 2
24246: PUSH
24247: LD_INT 1
24249: GREATER
24250: IFFALSE 24362
// begin for i = 2 to result do
24252: LD_ADDR_VAR 0 3
24256: PUSH
24257: DOUBLE
24258: LD_INT 2
24260: DEC
24261: ST_TO_ADDR
24262: LD_VAR 0 2
24266: PUSH
24267: FOR_TO
24268: IFFALSE 24360
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24270: LD_ADDR_VAR 0 4
24274: PUSH
24275: LD_VAR 0 2
24279: PUSH
24280: LD_VAR 0 3
24284: ARRAY
24285: PPUSH
24286: LD_INT 3
24288: PPUSH
24289: CALL_OW 259
24293: PUSH
24294: LD_VAR 0 2
24298: PUSH
24299: LD_VAR 0 3
24303: ARRAY
24304: PPUSH
24305: CALL_OW 432
24309: MINUS
24310: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24311: LD_VAR 0 4
24315: PUSH
24316: LD_VAR 0 5
24320: PPUSH
24321: LD_INT 3
24323: PPUSH
24324: CALL_OW 259
24328: PUSH
24329: LD_VAR 0 5
24333: PPUSH
24334: CALL_OW 432
24338: MINUS
24339: GREATEREQUAL
24340: IFFALSE 24358
// mech := result [ i ] ;
24342: LD_ADDR_VAR 0 5
24346: PUSH
24347: LD_VAR 0 2
24351: PUSH
24352: LD_VAR 0 3
24356: ARRAY
24357: ST_TO_ADDR
// end ;
24358: GO 24267
24360: POP
24361: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24362: LD_VAR 0 1
24366: PPUSH
24367: LD_VAR 0 5
24371: PPUSH
24372: CALL_OW 135
// end ;
24376: LD_VAR 0 2
24380: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24381: LD_INT 0
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
24388: PPUSH
24389: PPUSH
24390: PPUSH
24391: PPUSH
24392: PPUSH
24393: PPUSH
24394: PPUSH
24395: PPUSH
// result := [ ] ;
24396: LD_ADDR_VAR 0 7
24400: PUSH
24401: EMPTY
24402: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24403: LD_VAR 0 1
24407: PPUSH
24408: CALL_OW 266
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: IN
24423: NOT
24424: IFFALSE 24428
// exit ;
24426: GO 26068
// if name then
24428: LD_VAR 0 3
24432: IFFALSE 24448
// SetBName ( base_dep , name ) ;
24434: LD_VAR 0 1
24438: PPUSH
24439: LD_VAR 0 3
24443: PPUSH
24444: CALL_OW 500
// base := GetBase ( base_dep ) ;
24448: LD_ADDR_VAR 0 15
24452: PUSH
24453: LD_VAR 0 1
24457: PPUSH
24458: CALL_OW 274
24462: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24463: LD_ADDR_VAR 0 16
24467: PUSH
24468: LD_VAR 0 1
24472: PPUSH
24473: CALL_OW 255
24477: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24478: LD_ADDR_VAR 0 17
24482: PUSH
24483: LD_VAR 0 1
24487: PPUSH
24488: CALL_OW 248
24492: ST_TO_ADDR
// if sources then
24493: LD_VAR 0 5
24497: IFFALSE 24544
// for i = 1 to 3 do
24499: LD_ADDR_VAR 0 8
24503: PUSH
24504: DOUBLE
24505: LD_INT 1
24507: DEC
24508: ST_TO_ADDR
24509: LD_INT 3
24511: PUSH
24512: FOR_TO
24513: IFFALSE 24542
// AddResourceType ( base , i , sources [ i ] ) ;
24515: LD_VAR 0 15
24519: PPUSH
24520: LD_VAR 0 8
24524: PPUSH
24525: LD_VAR 0 5
24529: PUSH
24530: LD_VAR 0 8
24534: ARRAY
24535: PPUSH
24536: CALL_OW 276
24540: GO 24512
24542: POP
24543: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24544: LD_ADDR_VAR 0 18
24548: PUSH
24549: LD_VAR 0 15
24553: PPUSH
24554: LD_VAR 0 2
24558: PPUSH
24559: LD_INT 1
24561: PPUSH
24562: CALL 23803 0 3
24566: ST_TO_ADDR
// InitHc ;
24567: CALL_OW 19
// InitUc ;
24571: CALL_OW 18
// uc_side := side ;
24575: LD_ADDR_OWVAR 20
24579: PUSH
24580: LD_VAR 0 16
24584: ST_TO_ADDR
// uc_nation := nation ;
24585: LD_ADDR_OWVAR 21
24589: PUSH
24590: LD_VAR 0 17
24594: ST_TO_ADDR
// if buildings then
24595: LD_VAR 0 18
24599: IFFALSE 25927
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24601: LD_ADDR_VAR 0 19
24605: PUSH
24606: LD_VAR 0 18
24610: PPUSH
24611: LD_INT 2
24613: PUSH
24614: LD_INT 30
24616: PUSH
24617: LD_INT 29
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 30
24626: PUSH
24627: LD_INT 30
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: PPUSH
24639: CALL_OW 72
24643: ST_TO_ADDR
// if tmp then
24644: LD_VAR 0 19
24648: IFFALSE 24696
// for i in tmp do
24650: LD_ADDR_VAR 0 8
24654: PUSH
24655: LD_VAR 0 19
24659: PUSH
24660: FOR_IN
24661: IFFALSE 24694
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24663: LD_VAR 0 8
24667: PPUSH
24668: CALL_OW 250
24672: PPUSH
24673: LD_VAR 0 8
24677: PPUSH
24678: CALL_OW 251
24682: PPUSH
24683: LD_VAR 0 16
24687: PPUSH
24688: CALL_OW 441
24692: GO 24660
24694: POP
24695: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24696: LD_VAR 0 18
24700: PPUSH
24701: LD_INT 2
24703: PUSH
24704: LD_INT 30
24706: PUSH
24707: LD_INT 32
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 30
24716: PUSH
24717: LD_INT 33
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: LIST
24728: PPUSH
24729: CALL_OW 72
24733: IFFALSE 24821
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24735: LD_ADDR_VAR 0 8
24739: PUSH
24740: LD_VAR 0 18
24744: PPUSH
24745: LD_INT 2
24747: PUSH
24748: LD_INT 30
24750: PUSH
24751: LD_INT 32
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 30
24760: PUSH
24761: LD_INT 33
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: LIST
24772: PPUSH
24773: CALL_OW 72
24777: PUSH
24778: FOR_IN
24779: IFFALSE 24819
// begin if not GetBWeapon ( i ) then
24781: LD_VAR 0 8
24785: PPUSH
24786: CALL_OW 269
24790: NOT
24791: IFFALSE 24817
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24793: LD_VAR 0 8
24797: PPUSH
24798: LD_VAR 0 8
24802: PPUSH
24803: LD_VAR 0 2
24807: PPUSH
24808: CALL 26073 0 2
24812: PPUSH
24813: CALL_OW 431
// end ;
24817: GO 24778
24819: POP
24820: POP
// end ; for i = 1 to personel do
24821: LD_ADDR_VAR 0 8
24825: PUSH
24826: DOUBLE
24827: LD_INT 1
24829: DEC
24830: ST_TO_ADDR
24831: LD_VAR 0 6
24835: PUSH
24836: FOR_TO
24837: IFFALSE 25907
// begin if i > 4 then
24839: LD_VAR 0 8
24843: PUSH
24844: LD_INT 4
24846: GREATER
24847: IFFALSE 24851
// break ;
24849: GO 25907
// case i of 1 :
24851: LD_VAR 0 8
24855: PUSH
24856: LD_INT 1
24858: DOUBLE
24859: EQUAL
24860: IFTRUE 24864
24862: GO 24944
24864: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24865: LD_ADDR_VAR 0 12
24869: PUSH
24870: LD_VAR 0 18
24874: PPUSH
24875: LD_INT 22
24877: PUSH
24878: LD_VAR 0 16
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 58
24889: PUSH
24890: EMPTY
24891: LIST
24892: PUSH
24893: LD_INT 2
24895: PUSH
24896: LD_INT 30
24898: PUSH
24899: LD_INT 32
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 30
24908: PUSH
24909: LD_INT 4
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 30
24918: PUSH
24919: LD_INT 5
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: LIST
24936: PPUSH
24937: CALL_OW 72
24941: ST_TO_ADDR
24942: GO 25166
24944: LD_INT 2
24946: DOUBLE
24947: EQUAL
24948: IFTRUE 24952
24950: GO 25014
24952: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24953: LD_ADDR_VAR 0 12
24957: PUSH
24958: LD_VAR 0 18
24962: PPUSH
24963: LD_INT 22
24965: PUSH
24966: LD_VAR 0 16
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 2
24977: PUSH
24978: LD_INT 30
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 30
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: LIST
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PPUSH
25007: CALL_OW 72
25011: ST_TO_ADDR
25012: GO 25166
25014: LD_INT 3
25016: DOUBLE
25017: EQUAL
25018: IFTRUE 25022
25020: GO 25084
25022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25023: LD_ADDR_VAR 0 12
25027: PUSH
25028: LD_VAR 0 18
25032: PPUSH
25033: LD_INT 22
25035: PUSH
25036: LD_VAR 0 16
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 2
25047: PUSH
25048: LD_INT 30
25050: PUSH
25051: LD_INT 2
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 30
25060: PUSH
25061: LD_INT 3
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: LIST
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PPUSH
25077: CALL_OW 72
25081: ST_TO_ADDR
25082: GO 25166
25084: LD_INT 4
25086: DOUBLE
25087: EQUAL
25088: IFTRUE 25092
25090: GO 25165
25092: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25093: LD_ADDR_VAR 0 12
25097: PUSH
25098: LD_VAR 0 18
25102: PPUSH
25103: LD_INT 22
25105: PUSH
25106: LD_VAR 0 16
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: LD_INT 30
25120: PUSH
25121: LD_INT 6
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 30
25130: PUSH
25131: LD_INT 7
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 30
25140: PUSH
25141: LD_INT 8
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PPUSH
25158: CALL_OW 72
25162: ST_TO_ADDR
25163: GO 25166
25165: POP
// if i = 1 then
25166: LD_VAR 0 8
25170: PUSH
25171: LD_INT 1
25173: EQUAL
25174: IFFALSE 25285
// begin tmp := [ ] ;
25176: LD_ADDR_VAR 0 19
25180: PUSH
25181: EMPTY
25182: ST_TO_ADDR
// for j in f do
25183: LD_ADDR_VAR 0 9
25187: PUSH
25188: LD_VAR 0 12
25192: PUSH
25193: FOR_IN
25194: IFFALSE 25267
// if GetBType ( j ) = b_bunker then
25196: LD_VAR 0 9
25200: PPUSH
25201: CALL_OW 266
25205: PUSH
25206: LD_INT 32
25208: EQUAL
25209: IFFALSE 25236
// tmp := Insert ( tmp , 1 , j ) else
25211: LD_ADDR_VAR 0 19
25215: PUSH
25216: LD_VAR 0 19
25220: PPUSH
25221: LD_INT 1
25223: PPUSH
25224: LD_VAR 0 9
25228: PPUSH
25229: CALL_OW 2
25233: ST_TO_ADDR
25234: GO 25265
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25236: LD_ADDR_VAR 0 19
25240: PUSH
25241: LD_VAR 0 19
25245: PPUSH
25246: LD_VAR 0 19
25250: PUSH
25251: LD_INT 1
25253: PLUS
25254: PPUSH
25255: LD_VAR 0 9
25259: PPUSH
25260: CALL_OW 2
25264: ST_TO_ADDR
25265: GO 25193
25267: POP
25268: POP
// if tmp then
25269: LD_VAR 0 19
25273: IFFALSE 25285
// f := tmp ;
25275: LD_ADDR_VAR 0 12
25279: PUSH
25280: LD_VAR 0 19
25284: ST_TO_ADDR
// end ; x := personel [ i ] ;
25285: LD_ADDR_VAR 0 13
25289: PUSH
25290: LD_VAR 0 6
25294: PUSH
25295: LD_VAR 0 8
25299: ARRAY
25300: ST_TO_ADDR
// if x = - 1 then
25301: LD_VAR 0 13
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: EQUAL
25310: IFFALSE 25521
// begin for j in f do
25312: LD_ADDR_VAR 0 9
25316: PUSH
25317: LD_VAR 0 12
25321: PUSH
25322: FOR_IN
25323: IFFALSE 25517
// repeat InitHc ;
25325: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25329: LD_VAR 0 9
25333: PPUSH
25334: CALL_OW 266
25338: PUSH
25339: LD_INT 5
25341: EQUAL
25342: IFFALSE 25412
// begin if UnitsInside ( j ) < 3 then
25344: LD_VAR 0 9
25348: PPUSH
25349: CALL_OW 313
25353: PUSH
25354: LD_INT 3
25356: LESS
25357: IFFALSE 25393
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25359: LD_INT 0
25361: PPUSH
25362: LD_INT 5
25364: PUSH
25365: LD_INT 8
25367: PUSH
25368: LD_INT 9
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: LIST
25375: PUSH
25376: LD_VAR 0 17
25380: ARRAY
25381: PPUSH
25382: LD_VAR 0 4
25386: PPUSH
25387: CALL_OW 380
25391: GO 25410
// PrepareHuman ( false , i , skill ) ;
25393: LD_INT 0
25395: PPUSH
25396: LD_VAR 0 8
25400: PPUSH
25401: LD_VAR 0 4
25405: PPUSH
25406: CALL_OW 380
// end else
25410: GO 25429
// PrepareHuman ( false , i , skill ) ;
25412: LD_INT 0
25414: PPUSH
25415: LD_VAR 0 8
25419: PPUSH
25420: LD_VAR 0 4
25424: PPUSH
25425: CALL_OW 380
// un := CreateHuman ;
25429: LD_ADDR_VAR 0 14
25433: PUSH
25434: CALL_OW 44
25438: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25439: LD_ADDR_VAR 0 7
25443: PUSH
25444: LD_VAR 0 7
25448: PPUSH
25449: LD_INT 1
25451: PPUSH
25452: LD_VAR 0 14
25456: PPUSH
25457: CALL_OW 2
25461: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25462: LD_VAR 0 14
25466: PPUSH
25467: LD_VAR 0 9
25471: PPUSH
25472: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25476: LD_VAR 0 9
25480: PPUSH
25481: CALL_OW 313
25485: PUSH
25486: LD_INT 6
25488: EQUAL
25489: IFTRUE 25513
25491: PUSH
25492: LD_VAR 0 9
25496: PPUSH
25497: CALL_OW 266
25501: PUSH
25502: LD_INT 32
25504: PUSH
25505: LD_INT 31
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: IN
25512: OR
25513: IFFALSE 25325
25515: GO 25322
25517: POP
25518: POP
// end else
25519: GO 25905
// for j = 1 to x do
25521: LD_ADDR_VAR 0 9
25525: PUSH
25526: DOUBLE
25527: LD_INT 1
25529: DEC
25530: ST_TO_ADDR
25531: LD_VAR 0 13
25535: PUSH
25536: FOR_TO
25537: IFFALSE 25903
// begin InitHc ;
25539: CALL_OW 19
// if not f then
25543: LD_VAR 0 12
25547: NOT
25548: IFFALSE 25637
// begin PrepareHuman ( false , i , skill ) ;
25550: LD_INT 0
25552: PPUSH
25553: LD_VAR 0 8
25557: PPUSH
25558: LD_VAR 0 4
25562: PPUSH
25563: CALL_OW 380
// un := CreateHuman ;
25567: LD_ADDR_VAR 0 14
25571: PUSH
25572: CALL_OW 44
25576: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25577: LD_ADDR_VAR 0 7
25581: PUSH
25582: LD_VAR 0 7
25586: PPUSH
25587: LD_INT 1
25589: PPUSH
25590: LD_VAR 0 14
25594: PPUSH
25595: CALL_OW 2
25599: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25600: LD_VAR 0 14
25604: PPUSH
25605: LD_VAR 0 1
25609: PPUSH
25610: CALL_OW 250
25614: PPUSH
25615: LD_VAR 0 1
25619: PPUSH
25620: CALL_OW 251
25624: PPUSH
25625: LD_INT 10
25627: PPUSH
25628: LD_INT 0
25630: PPUSH
25631: CALL_OW 50
// continue ;
25635: GO 25536
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25637: LD_VAR 0 12
25641: PUSH
25642: LD_INT 1
25644: ARRAY
25645: PPUSH
25646: CALL_OW 313
25650: IFFALSE 25678
25652: PUSH
25653: LD_VAR 0 12
25657: PUSH
25658: LD_INT 1
25660: ARRAY
25661: PPUSH
25662: CALL_OW 266
25666: PUSH
25667: LD_INT 32
25669: PUSH
25670: LD_INT 31
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: IN
25677: AND
25678: IFTRUE 25699
25680: PUSH
25681: LD_VAR 0 12
25685: PUSH
25686: LD_INT 1
25688: ARRAY
25689: PPUSH
25690: CALL_OW 313
25694: PUSH
25695: LD_INT 6
25697: EQUAL
25698: OR
25699: IFFALSE 25719
// f := Delete ( f , 1 ) ;
25701: LD_ADDR_VAR 0 12
25705: PUSH
25706: LD_VAR 0 12
25710: PPUSH
25711: LD_INT 1
25713: PPUSH
25714: CALL_OW 3
25718: ST_TO_ADDR
// if not f then
25719: LD_VAR 0 12
25723: NOT
25724: IFFALSE 25742
// begin x := x + 2 ;
25726: LD_ADDR_VAR 0 13
25730: PUSH
25731: LD_VAR 0 13
25735: PUSH
25736: LD_INT 2
25738: PLUS
25739: ST_TO_ADDR
// continue ;
25740: GO 25536
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25742: LD_VAR 0 12
25746: PUSH
25747: LD_INT 1
25749: ARRAY
25750: PPUSH
25751: CALL_OW 266
25755: PUSH
25756: LD_INT 5
25758: EQUAL
25759: IFFALSE 25833
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25761: LD_VAR 0 12
25765: PUSH
25766: LD_INT 1
25768: ARRAY
25769: PPUSH
25770: CALL_OW 313
25774: PUSH
25775: LD_INT 3
25777: LESS
25778: IFFALSE 25814
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25780: LD_INT 0
25782: PPUSH
25783: LD_INT 5
25785: PUSH
25786: LD_INT 8
25788: PUSH
25789: LD_INT 9
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: LIST
25796: PUSH
25797: LD_VAR 0 17
25801: ARRAY
25802: PPUSH
25803: LD_VAR 0 4
25807: PPUSH
25808: CALL_OW 380
25812: GO 25831
// PrepareHuman ( false , i , skill ) ;
25814: LD_INT 0
25816: PPUSH
25817: LD_VAR 0 8
25821: PPUSH
25822: LD_VAR 0 4
25826: PPUSH
25827: CALL_OW 380
// end else
25831: GO 25850
// PrepareHuman ( false , i , skill ) ;
25833: LD_INT 0
25835: PPUSH
25836: LD_VAR 0 8
25840: PPUSH
25841: LD_VAR 0 4
25845: PPUSH
25846: CALL_OW 380
// un := CreateHuman ;
25850: LD_ADDR_VAR 0 14
25854: PUSH
25855: CALL_OW 44
25859: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25860: LD_ADDR_VAR 0 7
25864: PUSH
25865: LD_VAR 0 7
25869: PPUSH
25870: LD_INT 1
25872: PPUSH
25873: LD_VAR 0 14
25877: PPUSH
25878: CALL_OW 2
25882: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25883: LD_VAR 0 14
25887: PPUSH
25888: LD_VAR 0 12
25892: PUSH
25893: LD_INT 1
25895: ARRAY
25896: PPUSH
25897: CALL_OW 52
// end ;
25901: GO 25536
25903: POP
25904: POP
// end ;
25905: GO 24836
25907: POP
25908: POP
// result := result ^ buildings ;
25909: LD_ADDR_VAR 0 7
25913: PUSH
25914: LD_VAR 0 7
25918: PUSH
25919: LD_VAR 0 18
25923: ADD
25924: ST_TO_ADDR
// end else
25925: GO 26068
// begin for i = 1 to personel do
25927: LD_ADDR_VAR 0 8
25931: PUSH
25932: DOUBLE
25933: LD_INT 1
25935: DEC
25936: ST_TO_ADDR
25937: LD_VAR 0 6
25941: PUSH
25942: FOR_TO
25943: IFFALSE 26066
// begin if i > 4 then
25945: LD_VAR 0 8
25949: PUSH
25950: LD_INT 4
25952: GREATER
25953: IFFALSE 25957
// break ;
25955: GO 26066
// x := personel [ i ] ;
25957: LD_ADDR_VAR 0 13
25961: PUSH
25962: LD_VAR 0 6
25966: PUSH
25967: LD_VAR 0 8
25971: ARRAY
25972: ST_TO_ADDR
// if x = - 1 then
25973: LD_VAR 0 13
25977: PUSH
25978: LD_INT 1
25980: NEG
25981: EQUAL
25982: IFFALSE 25986
// continue ;
25984: GO 25942
// PrepareHuman ( false , i , skill ) ;
25986: LD_INT 0
25988: PPUSH
25989: LD_VAR 0 8
25993: PPUSH
25994: LD_VAR 0 4
25998: PPUSH
25999: CALL_OW 380
// un := CreateHuman ;
26003: LD_ADDR_VAR 0 14
26007: PUSH
26008: CALL_OW 44
26012: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26013: LD_VAR 0 14
26017: PPUSH
26018: LD_VAR 0 1
26022: PPUSH
26023: CALL_OW 250
26027: PPUSH
26028: LD_VAR 0 1
26032: PPUSH
26033: CALL_OW 251
26037: PPUSH
26038: LD_INT 10
26040: PPUSH
26041: LD_INT 0
26043: PPUSH
26044: CALL_OW 50
// result := result ^ un ;
26048: LD_ADDR_VAR 0 7
26052: PUSH
26053: LD_VAR 0 7
26057: PUSH
26058: LD_VAR 0 14
26062: ADD
26063: ST_TO_ADDR
// end ;
26064: GO 25942
26066: POP
26067: POP
// end ; end ;
26068: LD_VAR 0 7
26072: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26073: LD_INT 0
26075: PPUSH
26076: PPUSH
26077: PPUSH
26078: PPUSH
26079: PPUSH
26080: PPUSH
26081: PPUSH
26082: PPUSH
26083: PPUSH
26084: PPUSH
26085: PPUSH
26086: PPUSH
26087: PPUSH
26088: PPUSH
26089: PPUSH
26090: PPUSH
// result := false ;
26091: LD_ADDR_VAR 0 3
26095: PUSH
26096: LD_INT 0
26098: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26099: LD_VAR 0 1
26103: NOT
26104: IFTRUE 26129
26106: PUSH
26107: LD_VAR 0 1
26111: PPUSH
26112: CALL_OW 266
26116: PUSH
26117: LD_INT 32
26119: PUSH
26120: LD_INT 33
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: IN
26127: NOT
26128: OR
26129: IFFALSE 26133
// exit ;
26131: GO 27268
// nat := GetNation ( tower ) ;
26133: LD_ADDR_VAR 0 12
26137: PUSH
26138: LD_VAR 0 1
26142: PPUSH
26143: CALL_OW 248
26147: ST_TO_ADDR
// side := GetSide ( tower ) ;
26148: LD_ADDR_VAR 0 16
26152: PUSH
26153: LD_VAR 0 1
26157: PPUSH
26158: CALL_OW 255
26162: ST_TO_ADDR
// x := GetX ( tower ) ;
26163: LD_ADDR_VAR 0 10
26167: PUSH
26168: LD_VAR 0 1
26172: PPUSH
26173: CALL_OW 250
26177: ST_TO_ADDR
// y := GetY ( tower ) ;
26178: LD_ADDR_VAR 0 11
26182: PUSH
26183: LD_VAR 0 1
26187: PPUSH
26188: CALL_OW 251
26192: ST_TO_ADDR
// if not x or not y then
26193: LD_VAR 0 10
26197: NOT
26198: IFTRUE 26207
26200: PUSH
26201: LD_VAR 0 11
26205: NOT
26206: OR
26207: IFFALSE 26211
// exit ;
26209: GO 27268
// weapon := 0 ;
26211: LD_ADDR_VAR 0 18
26215: PUSH
26216: LD_INT 0
26218: ST_TO_ADDR
// fac_list := [ ] ;
26219: LD_ADDR_VAR 0 17
26223: PUSH
26224: EMPTY
26225: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26226: LD_ADDR_VAR 0 6
26230: PUSH
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL_OW 274
26240: PPUSH
26241: LD_VAR 0 2
26245: PPUSH
26246: LD_INT 0
26248: PPUSH
26249: CALL 23803 0 3
26253: PPUSH
26254: LD_INT 30
26256: PUSH
26257: LD_INT 3
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PPUSH
26264: CALL_OW 72
26268: ST_TO_ADDR
// if not factories then
26269: LD_VAR 0 6
26273: NOT
26274: IFFALSE 26278
// exit ;
26276: GO 27268
// for i in factories do
26278: LD_ADDR_VAR 0 8
26282: PUSH
26283: LD_VAR 0 6
26287: PUSH
26288: FOR_IN
26289: IFFALSE 26314
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26291: LD_ADDR_VAR 0 17
26295: PUSH
26296: LD_VAR 0 17
26300: PUSH
26301: LD_VAR 0 8
26305: PPUSH
26306: CALL_OW 478
26310: UNION
26311: ST_TO_ADDR
26312: GO 26288
26314: POP
26315: POP
// if not fac_list then
26316: LD_VAR 0 17
26320: NOT
26321: IFFALSE 26325
// exit ;
26323: GO 27268
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26325: LD_ADDR_VAR 0 5
26329: PUSH
26330: LD_INT 4
26332: PUSH
26333: LD_INT 5
26335: PUSH
26336: LD_INT 9
26338: PUSH
26339: LD_INT 10
26341: PUSH
26342: LD_INT 6
26344: PUSH
26345: LD_INT 7
26347: PUSH
26348: LD_INT 11
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 27
26362: PUSH
26363: LD_INT 28
26365: PUSH
26366: LD_INT 26
26368: PUSH
26369: LD_INT 30
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 43
26380: PUSH
26381: LD_INT 44
26383: PUSH
26384: LD_INT 46
26386: PUSH
26387: LD_INT 45
26389: PUSH
26390: LD_INT 47
26392: PUSH
26393: LD_INT 49
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: PUSH
26409: LD_VAR 0 12
26413: ARRAY
26414: ST_TO_ADDR
// list := list isect fac_list ;
26415: LD_ADDR_VAR 0 5
26419: PUSH
26420: LD_VAR 0 5
26424: PUSH
26425: LD_VAR 0 17
26429: ISECT
26430: ST_TO_ADDR
// if not list then
26431: LD_VAR 0 5
26435: NOT
26436: IFFALSE 26440
// exit ;
26438: GO 27268
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26440: LD_VAR 0 12
26444: PUSH
26445: LD_INT 3
26447: EQUAL
26448: IFFALSE 26460
26450: PUSH
26451: LD_INT 49
26453: PUSH
26454: LD_VAR 0 5
26458: IN
26459: AND
26460: IFFALSE 26480
26462: PUSH
26463: LD_INT 31
26465: PPUSH
26466: LD_VAR 0 16
26470: PPUSH
26471: CALL_OW 321
26475: PUSH
26476: LD_INT 2
26478: EQUAL
26479: AND
26480: IFFALSE 26540
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26482: LD_INT 22
26484: PUSH
26485: LD_VAR 0 16
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 35
26496: PUSH
26497: LD_INT 49
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 91
26506: PUSH
26507: LD_VAR 0 1
26511: PUSH
26512: LD_INT 10
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: PPUSH
26525: CALL_OW 69
26529: NOT
26530: IFFALSE 26540
// weapon := ru_time_lapser ;
26532: LD_ADDR_VAR 0 18
26536: PUSH
26537: LD_INT 49
26539: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26540: LD_VAR 0 12
26544: PUSH
26545: LD_INT 1
26547: PUSH
26548: LD_INT 2
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: IN
26555: IFFALSE 26579
26557: PUSH
26558: LD_INT 11
26560: PUSH
26561: LD_VAR 0 5
26565: IN
26566: IFTRUE 26578
26568: PUSH
26569: LD_INT 30
26571: PUSH
26572: LD_VAR 0 5
26576: IN
26577: OR
26578: AND
26579: IFFALSE 26599
26581: PUSH
26582: LD_INT 6
26584: PPUSH
26585: LD_VAR 0 16
26589: PPUSH
26590: CALL_OW 321
26594: PUSH
26595: LD_INT 2
26597: EQUAL
26598: AND
26599: IFFALSE 26766
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26601: LD_INT 22
26603: PUSH
26604: LD_VAR 0 16
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 2
26615: PUSH
26616: LD_INT 35
26618: PUSH
26619: LD_INT 11
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 35
26628: PUSH
26629: LD_INT 30
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 91
26643: PUSH
26644: LD_VAR 0 1
26648: PUSH
26649: LD_INT 18
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: LIST
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: LIST
26661: PPUSH
26662: CALL_OW 69
26666: NOT
26667: IFFALSE 26743
26669: PUSH
26670: LD_INT 22
26672: PUSH
26673: LD_VAR 0 16
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 2
26684: PUSH
26685: LD_INT 30
26687: PUSH
26688: LD_INT 32
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 30
26697: PUSH
26698: LD_INT 33
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 91
26712: PUSH
26713: LD_VAR 0 1
26717: PUSH
26718: LD_INT 12
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: LIST
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: LIST
26730: PUSH
26731: EMPTY
26732: LIST
26733: PPUSH
26734: CALL_OW 69
26738: PUSH
26739: LD_INT 2
26741: GREATER
26742: AND
26743: IFFALSE 26766
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26745: LD_ADDR_VAR 0 18
26749: PUSH
26750: LD_INT 11
26752: PUSH
26753: LD_INT 30
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_VAR 0 12
26764: ARRAY
26765: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26766: LD_VAR 0 18
26770: NOT
26771: IFFALSE 26791
26773: PUSH
26774: LD_INT 40
26776: PPUSH
26777: LD_VAR 0 16
26781: PPUSH
26782: CALL_OW 321
26786: PUSH
26787: LD_INT 2
26789: EQUAL
26790: AND
26791: IFFALSE 26827
26793: PUSH
26794: LD_INT 7
26796: PUSH
26797: LD_VAR 0 5
26801: IN
26802: IFTRUE 26814
26804: PUSH
26805: LD_INT 28
26807: PUSH
26808: LD_VAR 0 5
26812: IN
26813: OR
26814: IFTRUE 26826
26816: PUSH
26817: LD_INT 45
26819: PUSH
26820: LD_VAR 0 5
26824: IN
26825: OR
26826: AND
26827: IFFALSE 27081
// begin hex := GetHexInfo ( x , y ) ;
26829: LD_ADDR_VAR 0 4
26833: PUSH
26834: LD_VAR 0 10
26838: PPUSH
26839: LD_VAR 0 11
26843: PPUSH
26844: CALL_OW 546
26848: ST_TO_ADDR
// if hex [ 1 ] then
26849: LD_VAR 0 4
26853: PUSH
26854: LD_INT 1
26856: ARRAY
26857: IFFALSE 26861
// exit ;
26859: GO 27268
// height := hex [ 2 ] ;
26861: LD_ADDR_VAR 0 15
26865: PUSH
26866: LD_VAR 0 4
26870: PUSH
26871: LD_INT 2
26873: ARRAY
26874: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26875: LD_ADDR_VAR 0 14
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: LD_INT 2
26885: PUSH
26886: LD_INT 3
26888: PUSH
26889: LD_INT 5
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: ST_TO_ADDR
// for i in tmp do
26898: LD_ADDR_VAR 0 8
26902: PUSH
26903: LD_VAR 0 14
26907: PUSH
26908: FOR_IN
26909: IFFALSE 27079
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26911: LD_ADDR_VAR 0 9
26915: PUSH
26916: LD_VAR 0 10
26920: PPUSH
26921: LD_VAR 0 8
26925: PPUSH
26926: LD_INT 5
26928: PPUSH
26929: CALL_OW 272
26933: PUSH
26934: LD_VAR 0 11
26938: PPUSH
26939: LD_VAR 0 8
26943: PPUSH
26944: LD_INT 5
26946: PPUSH
26947: CALL_OW 273
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26956: LD_VAR 0 9
26960: PUSH
26961: LD_INT 1
26963: ARRAY
26964: PPUSH
26965: LD_VAR 0 9
26969: PUSH
26970: LD_INT 2
26972: ARRAY
26973: PPUSH
26974: CALL_OW 488
26978: IFFALSE 27077
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26980: LD_ADDR_VAR 0 4
26984: PUSH
26985: LD_VAR 0 9
26989: PUSH
26990: LD_INT 1
26992: ARRAY
26993: PPUSH
26994: LD_VAR 0 9
26998: PUSH
26999: LD_INT 2
27001: ARRAY
27002: PPUSH
27003: CALL_OW 546
27007: ST_TO_ADDR
// if hex [ 1 ] then
27008: LD_VAR 0 4
27012: PUSH
27013: LD_INT 1
27015: ARRAY
27016: IFFALSE 27020
// continue ;
27018: GO 26908
// h := hex [ 2 ] ;
27020: LD_ADDR_VAR 0 13
27024: PUSH
27025: LD_VAR 0 4
27029: PUSH
27030: LD_INT 2
27032: ARRAY
27033: ST_TO_ADDR
// if h + 7 < height then
27034: LD_VAR 0 13
27038: PUSH
27039: LD_INT 7
27041: PLUS
27042: PUSH
27043: LD_VAR 0 15
27047: LESS
27048: IFFALSE 27077
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27050: LD_ADDR_VAR 0 18
27054: PUSH
27055: LD_INT 7
27057: PUSH
27058: LD_INT 28
27060: PUSH
27061: LD_INT 45
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: LIST
27068: PUSH
27069: LD_VAR 0 12
27073: ARRAY
27074: ST_TO_ADDR
// break ;
27075: GO 27079
// end ; end ; end ;
27077: GO 26908
27079: POP
27080: POP
// end ; if not weapon then
27081: LD_VAR 0 18
27085: NOT
27086: IFFALSE 27146
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27088: LD_ADDR_VAR 0 5
27092: PUSH
27093: LD_VAR 0 5
27097: PUSH
27098: LD_INT 11
27100: PUSH
27101: LD_INT 30
27103: PUSH
27104: LD_INT 49
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: LIST
27111: DIFF
27112: ST_TO_ADDR
// if not list then
27113: LD_VAR 0 5
27117: NOT
27118: IFFALSE 27122
// exit ;
27120: GO 27268
// weapon := list [ rand ( 1 , list ) ] ;
27122: LD_ADDR_VAR 0 18
27126: PUSH
27127: LD_VAR 0 5
27131: PUSH
27132: LD_INT 1
27134: PPUSH
27135: LD_VAR 0 5
27139: PPUSH
27140: CALL_OW 12
27144: ARRAY
27145: ST_TO_ADDR
// end ; if weapon then
27146: LD_VAR 0 18
27150: IFFALSE 27268
// begin tmp := CostOfWeapon ( weapon ) ;
27152: LD_ADDR_VAR 0 14
27156: PUSH
27157: LD_VAR 0 18
27161: PPUSH
27162: CALL_OW 451
27166: ST_TO_ADDR
// j := GetBase ( tower ) ;
27167: LD_ADDR_VAR 0 9
27171: PUSH
27172: LD_VAR 0 1
27176: PPUSH
27177: CALL_OW 274
27181: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27182: LD_VAR 0 9
27186: PPUSH
27187: LD_INT 1
27189: PPUSH
27190: CALL_OW 275
27194: PUSH
27195: LD_VAR 0 14
27199: PUSH
27200: LD_INT 1
27202: ARRAY
27203: GREATEREQUAL
27204: IFFALSE 27230
27206: PUSH
27207: LD_VAR 0 9
27211: PPUSH
27212: LD_INT 2
27214: PPUSH
27215: CALL_OW 275
27219: PUSH
27220: LD_VAR 0 14
27224: PUSH
27225: LD_INT 2
27227: ARRAY
27228: GREATEREQUAL
27229: AND
27230: IFFALSE 27256
27232: PUSH
27233: LD_VAR 0 9
27237: PPUSH
27238: LD_INT 3
27240: PPUSH
27241: CALL_OW 275
27245: PUSH
27246: LD_VAR 0 14
27250: PUSH
27251: LD_INT 3
27253: ARRAY
27254: GREATEREQUAL
27255: AND
27256: IFFALSE 27268
// result := weapon ;
27258: LD_ADDR_VAR 0 3
27262: PUSH
27263: LD_VAR 0 18
27267: ST_TO_ADDR
// end ; end ;
27268: LD_VAR 0 3
27272: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27273: LD_INT 0
27275: PPUSH
27276: PPUSH
// result := true ;
27277: LD_ADDR_VAR 0 3
27281: PUSH
27282: LD_INT 1
27284: ST_TO_ADDR
// if array1 = array2 then
27285: LD_VAR 0 1
27289: PUSH
27290: LD_VAR 0 2
27294: EQUAL
27295: IFFALSE 27355
// begin for i = 1 to array1 do
27297: LD_ADDR_VAR 0 4
27301: PUSH
27302: DOUBLE
27303: LD_INT 1
27305: DEC
27306: ST_TO_ADDR
27307: LD_VAR 0 1
27311: PUSH
27312: FOR_TO
27313: IFFALSE 27351
// if array1 [ i ] <> array2 [ i ] then
27315: LD_VAR 0 1
27319: PUSH
27320: LD_VAR 0 4
27324: ARRAY
27325: PUSH
27326: LD_VAR 0 2
27330: PUSH
27331: LD_VAR 0 4
27335: ARRAY
27336: NONEQUAL
27337: IFFALSE 27349
// begin result := false ;
27339: LD_ADDR_VAR 0 3
27343: PUSH
27344: LD_INT 0
27346: ST_TO_ADDR
// break ;
27347: GO 27351
// end ;
27349: GO 27312
27351: POP
27352: POP
// end else
27353: GO 27363
// result := false ;
27355: LD_ADDR_VAR 0 3
27359: PUSH
27360: LD_INT 0
27362: ST_TO_ADDR
// end ;
27363: LD_VAR 0 3
27367: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27368: LD_INT 0
27370: PPUSH
27371: PPUSH
// if not array1 or not array2 then
27372: LD_VAR 0 1
27376: NOT
27377: IFTRUE 27386
27379: PUSH
27380: LD_VAR 0 2
27384: NOT
27385: OR
27386: IFFALSE 27390
// exit ;
27388: GO 27454
// result := true ;
27390: LD_ADDR_VAR 0 3
27394: PUSH
27395: LD_INT 1
27397: ST_TO_ADDR
// for i = 1 to array1 do
27398: LD_ADDR_VAR 0 4
27402: PUSH
27403: DOUBLE
27404: LD_INT 1
27406: DEC
27407: ST_TO_ADDR
27408: LD_VAR 0 1
27412: PUSH
27413: FOR_TO
27414: IFFALSE 27452
// if array1 [ i ] <> array2 [ i ] then
27416: LD_VAR 0 1
27420: PUSH
27421: LD_VAR 0 4
27425: ARRAY
27426: PUSH
27427: LD_VAR 0 2
27431: PUSH
27432: LD_VAR 0 4
27436: ARRAY
27437: NONEQUAL
27438: IFFALSE 27450
// begin result := false ;
27440: LD_ADDR_VAR 0 3
27444: PUSH
27445: LD_INT 0
27447: ST_TO_ADDR
// break ;
27448: GO 27452
// end ;
27450: GO 27413
27452: POP
27453: POP
// end ;
27454: LD_VAR 0 3
27458: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27459: LD_INT 0
27461: PPUSH
27462: PPUSH
27463: PPUSH
// pom := GetBase ( fac ) ;
27464: LD_ADDR_VAR 0 5
27468: PUSH
27469: LD_VAR 0 1
27473: PPUSH
27474: CALL_OW 274
27478: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27479: LD_ADDR_VAR 0 4
27483: PUSH
27484: LD_VAR 0 2
27488: PUSH
27489: LD_INT 1
27491: ARRAY
27492: PPUSH
27493: LD_VAR 0 2
27497: PUSH
27498: LD_INT 2
27500: ARRAY
27501: PPUSH
27502: LD_VAR 0 2
27506: PUSH
27507: LD_INT 3
27509: ARRAY
27510: PPUSH
27511: LD_VAR 0 2
27515: PUSH
27516: LD_INT 4
27518: ARRAY
27519: PPUSH
27520: CALL_OW 449
27524: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27525: LD_ADDR_VAR 0 3
27529: PUSH
27530: LD_VAR 0 5
27534: PPUSH
27535: LD_INT 1
27537: PPUSH
27538: CALL_OW 275
27542: PUSH
27543: LD_VAR 0 4
27547: PUSH
27548: LD_INT 1
27550: ARRAY
27551: GREATEREQUAL
27552: IFFALSE 27578
27554: PUSH
27555: LD_VAR 0 5
27559: PPUSH
27560: LD_INT 2
27562: PPUSH
27563: CALL_OW 275
27567: PUSH
27568: LD_VAR 0 4
27572: PUSH
27573: LD_INT 2
27575: ARRAY
27576: GREATEREQUAL
27577: AND
27578: IFFALSE 27604
27580: PUSH
27581: LD_VAR 0 5
27585: PPUSH
27586: LD_INT 3
27588: PPUSH
27589: CALL_OW 275
27593: PUSH
27594: LD_VAR 0 4
27598: PUSH
27599: LD_INT 3
27601: ARRAY
27602: GREATEREQUAL
27603: AND
27604: ST_TO_ADDR
// end ;
27605: LD_VAR 0 3
27609: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27610: LD_INT 0
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
// pom := GetBase ( building ) ;
27616: LD_ADDR_VAR 0 3
27620: PUSH
27621: LD_VAR 0 1
27625: PPUSH
27626: CALL_OW 274
27630: ST_TO_ADDR
// if not pom then
27631: LD_VAR 0 3
27635: NOT
27636: IFFALSE 27640
// exit ;
27638: GO 27814
// btype := GetBType ( building ) ;
27640: LD_ADDR_VAR 0 5
27644: PUSH
27645: LD_VAR 0 1
27649: PPUSH
27650: CALL_OW 266
27654: ST_TO_ADDR
// if btype = b_armoury then
27655: LD_VAR 0 5
27659: PUSH
27660: LD_INT 4
27662: EQUAL
27663: IFFALSE 27673
// btype := b_barracks ;
27665: LD_ADDR_VAR 0 5
27669: PUSH
27670: LD_INT 5
27672: ST_TO_ADDR
// if btype = b_depot then
27673: LD_VAR 0 5
27677: PUSH
27678: LD_INT 0
27680: EQUAL
27681: IFFALSE 27691
// btype := b_warehouse ;
27683: LD_ADDR_VAR 0 5
27687: PUSH
27688: LD_INT 1
27690: ST_TO_ADDR
// if btype = b_workshop then
27691: LD_VAR 0 5
27695: PUSH
27696: LD_INT 2
27698: EQUAL
27699: IFFALSE 27709
// btype := b_factory ;
27701: LD_ADDR_VAR 0 5
27705: PUSH
27706: LD_INT 3
27708: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27709: LD_ADDR_VAR 0 4
27713: PUSH
27714: LD_VAR 0 5
27718: PPUSH
27719: LD_VAR 0 1
27723: PPUSH
27724: CALL_OW 248
27728: PPUSH
27729: CALL_OW 450
27733: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27734: LD_ADDR_VAR 0 2
27738: PUSH
27739: LD_VAR 0 3
27743: PPUSH
27744: LD_INT 1
27746: PPUSH
27747: CALL_OW 275
27751: PUSH
27752: LD_VAR 0 4
27756: PUSH
27757: LD_INT 1
27759: ARRAY
27760: GREATEREQUAL
27761: IFFALSE 27787
27763: PUSH
27764: LD_VAR 0 3
27768: PPUSH
27769: LD_INT 2
27771: PPUSH
27772: CALL_OW 275
27776: PUSH
27777: LD_VAR 0 4
27781: PUSH
27782: LD_INT 2
27784: ARRAY
27785: GREATEREQUAL
27786: AND
27787: IFFALSE 27813
27789: PUSH
27790: LD_VAR 0 3
27794: PPUSH
27795: LD_INT 3
27797: PPUSH
27798: CALL_OW 275
27802: PUSH
27803: LD_VAR 0 4
27807: PUSH
27808: LD_INT 3
27810: ARRAY
27811: GREATEREQUAL
27812: AND
27813: ST_TO_ADDR
// end ;
27814: LD_VAR 0 2
27818: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27819: LD_INT 0
27821: PPUSH
27822: PPUSH
27823: PPUSH
// pom := GetBase ( building ) ;
27824: LD_ADDR_VAR 0 4
27828: PUSH
27829: LD_VAR 0 1
27833: PPUSH
27834: CALL_OW 274
27838: ST_TO_ADDR
// if not pom then
27839: LD_VAR 0 4
27843: NOT
27844: IFFALSE 27848
// exit ;
27846: GO 27953
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27848: LD_ADDR_VAR 0 5
27852: PUSH
27853: LD_VAR 0 2
27857: PPUSH
27858: LD_VAR 0 1
27862: PPUSH
27863: CALL_OW 248
27867: PPUSH
27868: CALL_OW 450
27872: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27873: LD_ADDR_VAR 0 3
27877: PUSH
27878: LD_VAR 0 4
27882: PPUSH
27883: LD_INT 1
27885: PPUSH
27886: CALL_OW 275
27890: PUSH
27891: LD_VAR 0 5
27895: PUSH
27896: LD_INT 1
27898: ARRAY
27899: GREATEREQUAL
27900: IFFALSE 27926
27902: PUSH
27903: LD_VAR 0 4
27907: PPUSH
27908: LD_INT 2
27910: PPUSH
27911: CALL_OW 275
27915: PUSH
27916: LD_VAR 0 5
27920: PUSH
27921: LD_INT 2
27923: ARRAY
27924: GREATEREQUAL
27925: AND
27926: IFFALSE 27952
27928: PUSH
27929: LD_VAR 0 4
27933: PPUSH
27934: LD_INT 3
27936: PPUSH
27937: CALL_OW 275
27941: PUSH
27942: LD_VAR 0 5
27946: PUSH
27947: LD_INT 3
27949: ARRAY
27950: GREATEREQUAL
27951: AND
27952: ST_TO_ADDR
// end ;
27953: LD_VAR 0 3
27957: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27958: LD_INT 0
27960: PPUSH
27961: PPUSH
27962: PPUSH
27963: PPUSH
27964: PPUSH
27965: PPUSH
27966: PPUSH
27967: PPUSH
27968: PPUSH
27969: PPUSH
27970: PPUSH
// result := false ;
27971: LD_ADDR_VAR 0 8
27975: PUSH
27976: LD_INT 0
27978: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27979: LD_VAR 0 5
27983: NOT
27984: IFTRUE 27993
27986: PUSH
27987: LD_VAR 0 1
27991: NOT
27992: OR
27993: IFTRUE 28002
27995: PUSH
27996: LD_VAR 0 2
28000: NOT
28001: OR
28002: IFTRUE 28011
28004: PUSH
28005: LD_VAR 0 3
28009: NOT
28010: OR
28011: IFFALSE 28015
// exit ;
28013: GO 28841
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28015: LD_ADDR_VAR 0 14
28019: PUSH
28020: LD_VAR 0 1
28024: PPUSH
28025: LD_VAR 0 2
28029: PPUSH
28030: LD_VAR 0 3
28034: PPUSH
28035: LD_VAR 0 4
28039: PPUSH
28040: LD_VAR 0 5
28044: PUSH
28045: LD_INT 1
28047: ARRAY
28048: PPUSH
28049: CALL_OW 248
28053: PPUSH
28054: LD_INT 0
28056: PPUSH
28057: CALL 30122 0 6
28061: ST_TO_ADDR
// if not hexes then
28062: LD_VAR 0 14
28066: NOT
28067: IFFALSE 28071
// exit ;
28069: GO 28841
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28071: LD_ADDR_VAR 0 17
28075: PUSH
28076: LD_VAR 0 5
28080: PPUSH
28081: LD_INT 22
28083: PUSH
28084: LD_VAR 0 13
28088: PPUSH
28089: CALL_OW 255
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 2
28100: PUSH
28101: LD_INT 30
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 30
28113: PUSH
28114: LD_INT 1
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: LIST
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PPUSH
28130: CALL_OW 72
28134: ST_TO_ADDR
// for i = 1 to hexes do
28135: LD_ADDR_VAR 0 9
28139: PUSH
28140: DOUBLE
28141: LD_INT 1
28143: DEC
28144: ST_TO_ADDR
28145: LD_VAR 0 14
28149: PUSH
28150: FOR_TO
28151: IFFALSE 28839
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28153: LD_ADDR_VAR 0 13
28157: PUSH
28158: LD_VAR 0 14
28162: PUSH
28163: LD_VAR 0 9
28167: ARRAY
28168: PUSH
28169: LD_INT 1
28171: ARRAY
28172: PPUSH
28173: LD_VAR 0 14
28177: PUSH
28178: LD_VAR 0 9
28182: ARRAY
28183: PUSH
28184: LD_INT 2
28186: ARRAY
28187: PPUSH
28188: CALL_OW 428
28192: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28193: LD_VAR 0 14
28197: PUSH
28198: LD_VAR 0 9
28202: ARRAY
28203: PUSH
28204: LD_INT 1
28206: ARRAY
28207: PPUSH
28208: LD_VAR 0 14
28212: PUSH
28213: LD_VAR 0 9
28217: ARRAY
28218: PUSH
28219: LD_INT 2
28221: ARRAY
28222: PPUSH
28223: CALL_OW 351
28227: IFTRUE 28266
28229: PUSH
28230: LD_VAR 0 14
28234: PUSH
28235: LD_VAR 0 9
28239: ARRAY
28240: PUSH
28241: LD_INT 1
28243: ARRAY
28244: PPUSH
28245: LD_VAR 0 14
28249: PUSH
28250: LD_VAR 0 9
28254: ARRAY
28255: PUSH
28256: LD_INT 2
28258: ARRAY
28259: PPUSH
28260: CALL_OW 488
28264: NOT
28265: OR
28266: IFTRUE 28283
28268: PUSH
28269: LD_VAR 0 13
28273: PPUSH
28274: CALL_OW 247
28278: PUSH
28279: LD_INT 3
28281: EQUAL
28282: OR
28283: IFFALSE 28289
// exit ;
28285: POP
28286: POP
28287: GO 28841
// if not tmp then
28289: LD_VAR 0 13
28293: NOT
28294: IFFALSE 28298
// continue ;
28296: GO 28150
// result := true ;
28298: LD_ADDR_VAR 0 8
28302: PUSH
28303: LD_INT 1
28305: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28306: LD_VAR 0 6
28310: IFFALSE 28327
28312: PUSH
28313: LD_VAR 0 13
28317: PPUSH
28318: CALL_OW 247
28322: PUSH
28323: LD_INT 2
28325: EQUAL
28326: AND
28327: IFFALSE 28344
28329: PUSH
28330: LD_VAR 0 13
28334: PPUSH
28335: CALL_OW 263
28339: PUSH
28340: LD_INT 1
28342: EQUAL
28343: AND
28344: IFFALSE 28508
// begin if IsDrivenBy ( tmp ) then
28346: LD_VAR 0 13
28350: PPUSH
28351: CALL_OW 311
28355: IFFALSE 28359
// continue ;
28357: GO 28150
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28359: LD_VAR 0 6
28363: PPUSH
28364: LD_INT 3
28366: PUSH
28367: LD_INT 60
28369: PUSH
28370: EMPTY
28371: LIST
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 3
28379: PUSH
28380: LD_INT 55
28382: PUSH
28383: EMPTY
28384: LIST
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PPUSH
28394: CALL_OW 72
28398: IFFALSE 28506
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28400: LD_ADDR_VAR 0 18
28404: PUSH
28405: LD_VAR 0 6
28409: PPUSH
28410: LD_INT 3
28412: PUSH
28413: LD_INT 60
28415: PUSH
28416: EMPTY
28417: LIST
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 3
28425: PUSH
28426: LD_INT 55
28428: PUSH
28429: EMPTY
28430: LIST
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PPUSH
28440: CALL_OW 72
28444: PUSH
28445: LD_INT 1
28447: ARRAY
28448: ST_TO_ADDR
// if IsInUnit ( driver ) then
28449: LD_VAR 0 18
28453: PPUSH
28454: CALL_OW 310
28458: IFFALSE 28469
// ComExit ( driver ) ;
28460: LD_VAR 0 18
28464: PPUSH
28465: CALL 54112 0 1
// AddComEnterUnit ( driver , tmp ) ;
28469: LD_VAR 0 18
28473: PPUSH
28474: LD_VAR 0 13
28478: PPUSH
28479: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28483: LD_VAR 0 18
28487: PPUSH
28488: LD_VAR 0 7
28492: PPUSH
28493: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28497: LD_VAR 0 18
28501: PPUSH
28502: CALL_OW 181
// end ; continue ;
28506: GO 28150
// end ; if not cleaners or not tmp in cleaners then
28508: LD_VAR 0 6
28512: NOT
28513: IFTRUE 28528
28515: PUSH
28516: LD_VAR 0 13
28520: PUSH
28521: LD_VAR 0 6
28525: IN
28526: NOT
28527: OR
28528: IFFALSE 28837
// begin if dep then
28530: LD_VAR 0 17
28534: IFFALSE 28670
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28536: LD_ADDR_VAR 0 16
28540: PUSH
28541: LD_VAR 0 17
28545: PUSH
28546: LD_INT 1
28548: ARRAY
28549: PPUSH
28550: CALL_OW 250
28554: PPUSH
28555: LD_VAR 0 17
28559: PUSH
28560: LD_INT 1
28562: ARRAY
28563: PPUSH
28564: CALL_OW 254
28568: PPUSH
28569: LD_INT 5
28571: PPUSH
28572: CALL_OW 272
28576: PUSH
28577: LD_VAR 0 17
28581: PUSH
28582: LD_INT 1
28584: ARRAY
28585: PPUSH
28586: CALL_OW 251
28590: PPUSH
28591: LD_VAR 0 17
28595: PUSH
28596: LD_INT 1
28598: ARRAY
28599: PPUSH
28600: CALL_OW 254
28604: PPUSH
28605: LD_INT 5
28607: PPUSH
28608: CALL_OW 273
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28617: LD_VAR 0 16
28621: PUSH
28622: LD_INT 1
28624: ARRAY
28625: PPUSH
28626: LD_VAR 0 16
28630: PUSH
28631: LD_INT 2
28633: ARRAY
28634: PPUSH
28635: CALL_OW 488
28639: IFFALSE 28670
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28641: LD_VAR 0 13
28645: PPUSH
28646: LD_VAR 0 16
28650: PUSH
28651: LD_INT 1
28653: ARRAY
28654: PPUSH
28655: LD_VAR 0 16
28659: PUSH
28660: LD_INT 2
28662: ARRAY
28663: PPUSH
28664: CALL_OW 111
// continue ;
28668: GO 28150
// end ; end ; r := GetDir ( tmp ) ;
28670: LD_ADDR_VAR 0 15
28674: PUSH
28675: LD_VAR 0 13
28679: PPUSH
28680: CALL_OW 254
28684: ST_TO_ADDR
// if r = 5 then
28685: LD_VAR 0 15
28689: PUSH
28690: LD_INT 5
28692: EQUAL
28693: IFFALSE 28703
// r := 0 ;
28695: LD_ADDR_VAR 0 15
28699: PUSH
28700: LD_INT 0
28702: ST_TO_ADDR
// for j = r to 5 do
28703: LD_ADDR_VAR 0 10
28707: PUSH
28708: DOUBLE
28709: LD_VAR 0 15
28713: DEC
28714: ST_TO_ADDR
28715: LD_INT 5
28717: PUSH
28718: FOR_TO
28719: IFFALSE 28835
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28721: LD_ADDR_VAR 0 11
28725: PUSH
28726: LD_VAR 0 13
28730: PPUSH
28731: CALL_OW 250
28735: PPUSH
28736: LD_VAR 0 10
28740: PPUSH
28741: LD_INT 2
28743: PPUSH
28744: CALL_OW 272
28748: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28749: LD_ADDR_VAR 0 12
28753: PUSH
28754: LD_VAR 0 13
28758: PPUSH
28759: CALL_OW 251
28763: PPUSH
28764: LD_VAR 0 10
28768: PPUSH
28769: LD_INT 2
28771: PPUSH
28772: CALL_OW 273
28776: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28777: LD_VAR 0 11
28781: PPUSH
28782: LD_VAR 0 12
28786: PPUSH
28787: CALL_OW 488
28791: IFFALSE 28810
28793: PUSH
28794: LD_VAR 0 11
28798: PPUSH
28799: LD_VAR 0 12
28803: PPUSH
28804: CALL_OW 428
28808: NOT
28809: AND
28810: IFFALSE 28833
// begin ComMoveXY ( tmp , _x , _y ) ;
28812: LD_VAR 0 13
28816: PPUSH
28817: LD_VAR 0 11
28821: PPUSH
28822: LD_VAR 0 12
28826: PPUSH
28827: CALL_OW 111
// break ;
28831: GO 28835
// end ; end ;
28833: GO 28718
28835: POP
28836: POP
// end ; end ;
28837: GO 28150
28839: POP
28840: POP
// end ;
28841: LD_VAR 0 8
28845: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28846: LD_INT 0
28848: PPUSH
// result := true ;
28849: LD_ADDR_VAR 0 3
28853: PUSH
28854: LD_INT 1
28856: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28857: LD_VAR 0 2
28861: PUSH
28862: LD_INT 24
28864: DOUBLE
28865: EQUAL
28866: IFTRUE 28876
28868: LD_INT 33
28870: DOUBLE
28871: EQUAL
28872: IFTRUE 28876
28874: GO 28901
28876: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28877: LD_ADDR_VAR 0 3
28881: PUSH
28882: LD_INT 32
28884: PPUSH
28885: LD_VAR 0 1
28889: PPUSH
28890: CALL_OW 321
28894: PUSH
28895: LD_INT 2
28897: EQUAL
28898: ST_TO_ADDR
28899: GO 29217
28901: LD_INT 20
28903: DOUBLE
28904: EQUAL
28905: IFTRUE 28909
28907: GO 28934
28909: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28910: LD_ADDR_VAR 0 3
28914: PUSH
28915: LD_INT 6
28917: PPUSH
28918: LD_VAR 0 1
28922: PPUSH
28923: CALL_OW 321
28927: PUSH
28928: LD_INT 2
28930: EQUAL
28931: ST_TO_ADDR
28932: GO 29217
28934: LD_INT 22
28936: DOUBLE
28937: EQUAL
28938: IFTRUE 28948
28940: LD_INT 36
28942: DOUBLE
28943: EQUAL
28944: IFTRUE 28948
28946: GO 28973
28948: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28949: LD_ADDR_VAR 0 3
28953: PUSH
28954: LD_INT 15
28956: PPUSH
28957: LD_VAR 0 1
28961: PPUSH
28962: CALL_OW 321
28966: PUSH
28967: LD_INT 2
28969: EQUAL
28970: ST_TO_ADDR
28971: GO 29217
28973: LD_INT 30
28975: DOUBLE
28976: EQUAL
28977: IFTRUE 28981
28979: GO 29006
28981: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28982: LD_ADDR_VAR 0 3
28986: PUSH
28987: LD_INT 20
28989: PPUSH
28990: LD_VAR 0 1
28994: PPUSH
28995: CALL_OW 321
28999: PUSH
29000: LD_INT 2
29002: EQUAL
29003: ST_TO_ADDR
29004: GO 29217
29006: LD_INT 28
29008: DOUBLE
29009: EQUAL
29010: IFTRUE 29020
29012: LD_INT 21
29014: DOUBLE
29015: EQUAL
29016: IFTRUE 29020
29018: GO 29045
29020: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29021: LD_ADDR_VAR 0 3
29025: PUSH
29026: LD_INT 21
29028: PPUSH
29029: LD_VAR 0 1
29033: PPUSH
29034: CALL_OW 321
29038: PUSH
29039: LD_INT 2
29041: EQUAL
29042: ST_TO_ADDR
29043: GO 29217
29045: LD_INT 16
29047: DOUBLE
29048: EQUAL
29049: IFTRUE 29053
29051: GO 29078
29053: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29054: LD_ADDR_VAR 0 3
29058: PUSH
29059: LD_INT 84
29061: PPUSH
29062: LD_VAR 0 1
29066: PPUSH
29067: CALL_OW 321
29071: PUSH
29072: LD_INT 2
29074: EQUAL
29075: ST_TO_ADDR
29076: GO 29217
29078: LD_INT 19
29080: DOUBLE
29081: EQUAL
29082: IFTRUE 29092
29084: LD_INT 23
29086: DOUBLE
29087: EQUAL
29088: IFTRUE 29092
29090: GO 29117
29092: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29093: LD_ADDR_VAR 0 3
29097: PUSH
29098: LD_INT 83
29100: PPUSH
29101: LD_VAR 0 1
29105: PPUSH
29106: CALL_OW 321
29110: PUSH
29111: LD_INT 2
29113: EQUAL
29114: ST_TO_ADDR
29115: GO 29217
29117: LD_INT 17
29119: DOUBLE
29120: EQUAL
29121: IFTRUE 29125
29123: GO 29150
29125: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29126: LD_ADDR_VAR 0 3
29130: PUSH
29131: LD_INT 39
29133: PPUSH
29134: LD_VAR 0 1
29138: PPUSH
29139: CALL_OW 321
29143: PUSH
29144: LD_INT 2
29146: EQUAL
29147: ST_TO_ADDR
29148: GO 29217
29150: LD_INT 18
29152: DOUBLE
29153: EQUAL
29154: IFTRUE 29158
29156: GO 29183
29158: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29159: LD_ADDR_VAR 0 3
29163: PUSH
29164: LD_INT 40
29166: PPUSH
29167: LD_VAR 0 1
29171: PPUSH
29172: CALL_OW 321
29176: PUSH
29177: LD_INT 2
29179: EQUAL
29180: ST_TO_ADDR
29181: GO 29217
29183: LD_INT 27
29185: DOUBLE
29186: EQUAL
29187: IFTRUE 29191
29189: GO 29216
29191: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29192: LD_ADDR_VAR 0 3
29196: PUSH
29197: LD_INT 35
29199: PPUSH
29200: LD_VAR 0 1
29204: PPUSH
29205: CALL_OW 321
29209: PUSH
29210: LD_INT 2
29212: EQUAL
29213: ST_TO_ADDR
29214: GO 29217
29216: POP
// end ;
29217: LD_VAR 0 3
29221: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29222: LD_INT 0
29224: PPUSH
29225: PPUSH
29226: PPUSH
29227: PPUSH
29228: PPUSH
29229: PPUSH
29230: PPUSH
29231: PPUSH
29232: PPUSH
29233: PPUSH
29234: PPUSH
// result := false ;
29235: LD_ADDR_VAR 0 6
29239: PUSH
29240: LD_INT 0
29242: ST_TO_ADDR
// if btype = b_depot then
29243: LD_VAR 0 2
29247: PUSH
29248: LD_INT 0
29250: EQUAL
29251: IFFALSE 29263
// begin result := true ;
29253: LD_ADDR_VAR 0 6
29257: PUSH
29258: LD_INT 1
29260: ST_TO_ADDR
// exit ;
29261: GO 30117
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29263: LD_VAR 0 1
29267: NOT
29268: IFTRUE 29293
29270: PUSH
29271: LD_VAR 0 1
29275: PPUSH
29276: CALL_OW 266
29280: PUSH
29281: LD_INT 0
29283: PUSH
29284: LD_INT 1
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: IN
29291: NOT
29292: OR
29293: IFTRUE 29302
29295: PUSH
29296: LD_VAR 0 2
29300: NOT
29301: OR
29302: IFTRUE 29338
29304: PUSH
29305: LD_VAR 0 5
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: LD_INT 2
29318: PUSH
29319: LD_INT 3
29321: PUSH
29322: LD_INT 4
29324: PUSH
29325: LD_INT 5
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: IN
29336: NOT
29337: OR
29338: IFTRUE 29357
29340: PUSH
29341: LD_VAR 0 3
29345: PPUSH
29346: LD_VAR 0 4
29350: PPUSH
29351: CALL_OW 488
29355: NOT
29356: OR
29357: IFFALSE 29361
// exit ;
29359: GO 30117
// side := GetSide ( depot ) ;
29361: LD_ADDR_VAR 0 9
29365: PUSH
29366: LD_VAR 0 1
29370: PPUSH
29371: CALL_OW 255
29375: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29376: LD_VAR 0 9
29380: PPUSH
29381: LD_VAR 0 2
29385: PPUSH
29386: CALL 28846 0 2
29390: NOT
29391: IFFALSE 29395
// exit ;
29393: GO 30117
// pom := GetBase ( depot ) ;
29395: LD_ADDR_VAR 0 10
29399: PUSH
29400: LD_VAR 0 1
29404: PPUSH
29405: CALL_OW 274
29409: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29410: LD_ADDR_VAR 0 11
29414: PUSH
29415: LD_VAR 0 2
29419: PPUSH
29420: LD_VAR 0 1
29424: PPUSH
29425: CALL_OW 248
29429: PPUSH
29430: CALL_OW 450
29434: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29435: LD_VAR 0 10
29439: PPUSH
29440: LD_INT 1
29442: PPUSH
29443: CALL_OW 275
29447: PUSH
29448: LD_VAR 0 11
29452: PUSH
29453: LD_INT 1
29455: ARRAY
29456: GREATEREQUAL
29457: IFFALSE 29483
29459: PUSH
29460: LD_VAR 0 10
29464: PPUSH
29465: LD_INT 2
29467: PPUSH
29468: CALL_OW 275
29472: PUSH
29473: LD_VAR 0 11
29477: PUSH
29478: LD_INT 2
29480: ARRAY
29481: GREATEREQUAL
29482: AND
29483: IFFALSE 29509
29485: PUSH
29486: LD_VAR 0 10
29490: PPUSH
29491: LD_INT 3
29493: PPUSH
29494: CALL_OW 275
29498: PUSH
29499: LD_VAR 0 11
29503: PUSH
29504: LD_INT 3
29506: ARRAY
29507: GREATEREQUAL
29508: AND
29509: NOT
29510: IFFALSE 29514
// exit ;
29512: GO 30117
// if GetBType ( depot ) = b_depot then
29514: LD_VAR 0 1
29518: PPUSH
29519: CALL_OW 266
29523: PUSH
29524: LD_INT 0
29526: EQUAL
29527: IFFALSE 29539
// dist := 28 else
29529: LD_ADDR_VAR 0 14
29533: PUSH
29534: LD_INT 28
29536: ST_TO_ADDR
29537: GO 29547
// dist := 36 ;
29539: LD_ADDR_VAR 0 14
29543: PUSH
29544: LD_INT 36
29546: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29547: LD_VAR 0 1
29551: PPUSH
29552: LD_VAR 0 3
29556: PPUSH
29557: LD_VAR 0 4
29561: PPUSH
29562: CALL_OW 297
29566: PUSH
29567: LD_VAR 0 14
29571: GREATER
29572: IFFALSE 29576
// exit ;
29574: GO 30117
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29576: LD_ADDR_VAR 0 12
29580: PUSH
29581: LD_VAR 0 2
29585: PPUSH
29586: LD_VAR 0 3
29590: PPUSH
29591: LD_VAR 0 4
29595: PPUSH
29596: LD_VAR 0 5
29600: PPUSH
29601: LD_VAR 0 1
29605: PPUSH
29606: CALL_OW 248
29610: PPUSH
29611: LD_INT 0
29613: PPUSH
29614: CALL 30122 0 6
29618: ST_TO_ADDR
// if not hexes then
29619: LD_VAR 0 12
29623: NOT
29624: IFFALSE 29628
// exit ;
29626: GO 30117
// hex := GetHexInfo ( x , y ) ;
29628: LD_ADDR_VAR 0 15
29632: PUSH
29633: LD_VAR 0 3
29637: PPUSH
29638: LD_VAR 0 4
29642: PPUSH
29643: CALL_OW 546
29647: ST_TO_ADDR
// if hex [ 1 ] then
29648: LD_VAR 0 15
29652: PUSH
29653: LD_INT 1
29655: ARRAY
29656: IFFALSE 29660
// exit ;
29658: GO 30117
// height := hex [ 2 ] ;
29660: LD_ADDR_VAR 0 13
29664: PUSH
29665: LD_VAR 0 15
29669: PUSH
29670: LD_INT 2
29672: ARRAY
29673: ST_TO_ADDR
// for i = 1 to hexes do
29674: LD_ADDR_VAR 0 7
29678: PUSH
29679: DOUBLE
29680: LD_INT 1
29682: DEC
29683: ST_TO_ADDR
29684: LD_VAR 0 12
29688: PUSH
29689: FOR_TO
29690: IFFALSE 30034
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29692: LD_VAR 0 12
29696: PUSH
29697: LD_VAR 0 7
29701: ARRAY
29702: PUSH
29703: LD_INT 1
29705: ARRAY
29706: PPUSH
29707: LD_VAR 0 12
29711: PUSH
29712: LD_VAR 0 7
29716: ARRAY
29717: PUSH
29718: LD_INT 2
29720: ARRAY
29721: PPUSH
29722: CALL_OW 488
29726: NOT
29727: IFTRUE 29769
29729: PUSH
29730: LD_VAR 0 12
29734: PUSH
29735: LD_VAR 0 7
29739: ARRAY
29740: PUSH
29741: LD_INT 1
29743: ARRAY
29744: PPUSH
29745: LD_VAR 0 12
29749: PUSH
29750: LD_VAR 0 7
29754: ARRAY
29755: PUSH
29756: LD_INT 2
29758: ARRAY
29759: PPUSH
29760: CALL_OW 428
29764: PUSH
29765: LD_INT 0
29767: GREATER
29768: OR
29769: IFTRUE 29807
29771: PUSH
29772: LD_VAR 0 12
29776: PUSH
29777: LD_VAR 0 7
29781: ARRAY
29782: PUSH
29783: LD_INT 1
29785: ARRAY
29786: PPUSH
29787: LD_VAR 0 12
29791: PUSH
29792: LD_VAR 0 7
29796: ARRAY
29797: PUSH
29798: LD_INT 2
29800: ARRAY
29801: PPUSH
29802: CALL_OW 351
29806: OR
29807: IFFALSE 29813
// exit ;
29809: POP
29810: POP
29811: GO 30117
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29813: LD_ADDR_VAR 0 8
29817: PUSH
29818: LD_VAR 0 12
29822: PUSH
29823: LD_VAR 0 7
29827: ARRAY
29828: PUSH
29829: LD_INT 1
29831: ARRAY
29832: PPUSH
29833: LD_VAR 0 12
29837: PUSH
29838: LD_VAR 0 7
29842: ARRAY
29843: PUSH
29844: LD_INT 2
29846: ARRAY
29847: PPUSH
29848: CALL_OW 546
29852: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29853: LD_VAR 0 8
29857: PUSH
29858: LD_INT 1
29860: ARRAY
29861: IFTRUE 29883
29863: PUSH
29864: LD_VAR 0 8
29868: PUSH
29869: LD_INT 2
29871: ARRAY
29872: PUSH
29873: LD_VAR 0 13
29877: PUSH
29878: LD_INT 2
29880: PLUS
29881: GREATER
29882: OR
29883: IFTRUE 29905
29885: PUSH
29886: LD_VAR 0 8
29890: PUSH
29891: LD_INT 2
29893: ARRAY
29894: PUSH
29895: LD_VAR 0 13
29899: PUSH
29900: LD_INT 2
29902: MINUS
29903: LESS
29904: OR
29905: IFTRUE 29973
29907: PUSH
29908: LD_VAR 0 8
29912: PUSH
29913: LD_INT 3
29915: ARRAY
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: LD_INT 8
29922: PUSH
29923: LD_INT 9
29925: PUSH
29926: LD_INT 10
29928: PUSH
29929: LD_INT 11
29931: PUSH
29932: LD_INT 12
29934: PUSH
29935: LD_INT 13
29937: PUSH
29938: LD_INT 16
29940: PUSH
29941: LD_INT 17
29943: PUSH
29944: LD_INT 18
29946: PUSH
29947: LD_INT 19
29949: PUSH
29950: LD_INT 20
29952: PUSH
29953: LD_INT 21
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: IN
29971: NOT
29972: OR
29973: IFTRUE 29986
29975: PUSH
29976: LD_VAR 0 8
29980: PUSH
29981: LD_INT 5
29983: ARRAY
29984: NOT
29985: OR
29986: IFTRUE 30026
29988: PUSH
29989: LD_VAR 0 8
29993: PUSH
29994: LD_INT 6
29996: ARRAY
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: LD_INT 7
30006: PUSH
30007: LD_INT 9
30009: PUSH
30010: LD_INT 10
30012: PUSH
30013: LD_INT 11
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: IN
30024: NOT
30025: OR
30026: IFFALSE 30032
// exit ;
30028: POP
30029: POP
30030: GO 30117
// end ;
30032: GO 29689
30034: POP
30035: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30036: LD_VAR 0 9
30040: PPUSH
30041: LD_VAR 0 3
30045: PPUSH
30046: LD_VAR 0 4
30050: PPUSH
30051: LD_INT 20
30053: PPUSH
30054: CALL 21936 0 4
30058: PUSH
30059: LD_INT 4
30061: ARRAY
30062: IFFALSE 30066
// exit ;
30064: GO 30117
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30066: LD_VAR 0 2
30070: PUSH
30071: LD_INT 29
30073: PUSH
30074: LD_INT 30
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: IN
30081: IFFALSE 30105
30083: PUSH
30084: LD_VAR 0 3
30088: PPUSH
30089: LD_VAR 0 4
30093: PPUSH
30094: LD_VAR 0 9
30098: PPUSH
30099: CALL_OW 440
30103: NOT
30104: AND
30105: IFFALSE 30109
// exit ;
30107: GO 30117
// result := true ;
30109: LD_ADDR_VAR 0 6
30113: PUSH
30114: LD_INT 1
30116: ST_TO_ADDR
// end ;
30117: LD_VAR 0 6
30121: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30122: LD_INT 0
30124: PPUSH
30125: PPUSH
30126: PPUSH
30127: PPUSH
30128: PPUSH
30129: PPUSH
30130: PPUSH
30131: PPUSH
30132: PPUSH
30133: PPUSH
30134: PPUSH
30135: PPUSH
30136: PPUSH
30137: PPUSH
30138: PPUSH
30139: PPUSH
30140: PPUSH
30141: PPUSH
30142: PPUSH
30143: PPUSH
30144: PPUSH
30145: PPUSH
30146: PPUSH
30147: PPUSH
30148: PPUSH
30149: PPUSH
30150: PPUSH
30151: PPUSH
30152: PPUSH
30153: PPUSH
30154: PPUSH
30155: PPUSH
30156: PPUSH
30157: PPUSH
30158: PPUSH
30159: PPUSH
30160: PPUSH
30161: PPUSH
30162: PPUSH
30163: PPUSH
30164: PPUSH
30165: PPUSH
30166: PPUSH
30167: PPUSH
30168: PPUSH
30169: PPUSH
30170: PPUSH
30171: PPUSH
30172: PPUSH
30173: PPUSH
30174: PPUSH
30175: PPUSH
30176: PPUSH
30177: PPUSH
30178: PPUSH
30179: PPUSH
30180: PPUSH
30181: PPUSH
// result = [ ] ;
30182: LD_ADDR_VAR 0 7
30186: PUSH
30187: EMPTY
30188: ST_TO_ADDR
// temp_list = [ ] ;
30189: LD_ADDR_VAR 0 9
30193: PUSH
30194: EMPTY
30195: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30196: LD_VAR 0 4
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: LD_INT 3
30212: PUSH
30213: LD_INT 4
30215: PUSH
30216: LD_INT 5
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: IN
30227: NOT
30228: IFTRUE 30271
30230: PUSH
30231: LD_VAR 0 1
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: IN
30246: IFFALSE 30270
30248: PUSH
30249: LD_VAR 0 5
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: LD_INT 2
30259: PUSH
30260: LD_INT 3
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: LIST
30267: IN
30268: NOT
30269: AND
30270: OR
30271: IFFALSE 30275
// exit ;
30273: GO 48674
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30275: LD_VAR 0 1
30279: PUSH
30280: LD_INT 6
30282: PUSH
30283: LD_INT 7
30285: PUSH
30286: LD_INT 8
30288: PUSH
30289: LD_INT 13
30291: PUSH
30292: LD_INT 12
30294: PUSH
30295: LD_INT 15
30297: PUSH
30298: LD_INT 11
30300: PUSH
30301: LD_INT 14
30303: PUSH
30304: LD_INT 10
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: IN
30318: IFFALSE 30328
// btype = b_lab ;
30320: LD_ADDR_VAR 0 1
30324: PUSH
30325: LD_INT 6
30327: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30328: LD_VAR 0 6
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: IN
30347: NOT
30348: IFTRUE 30416
30350: PUSH
30351: LD_VAR 0 1
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: LD_INT 3
30367: PUSH
30368: LD_INT 6
30370: PUSH
30371: LD_INT 36
30373: PUSH
30374: LD_INT 4
30376: PUSH
30377: LD_INT 5
30379: PUSH
30380: LD_INT 31
30382: PUSH
30383: LD_INT 32
30385: PUSH
30386: LD_INT 33
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: IN
30402: NOT
30403: IFFALSE 30415
30405: PUSH
30406: LD_VAR 0 6
30410: PUSH
30411: LD_INT 1
30413: EQUAL
30414: AND
30415: OR
30416: IFTRUE 30448
30418: PUSH
30419: LD_VAR 0 1
30423: PUSH
30424: LD_INT 2
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: IN
30434: NOT
30435: IFFALSE 30447
30437: PUSH
30438: LD_VAR 0 6
30442: PUSH
30443: LD_INT 2
30445: EQUAL
30446: AND
30447: OR
30448: IFFALSE 30458
// mode = 0 ;
30450: LD_ADDR_VAR 0 6
30454: PUSH
30455: LD_INT 0
30457: ST_TO_ADDR
// case mode of 0 :
30458: LD_VAR 0 6
30462: PUSH
30463: LD_INT 0
30465: DOUBLE
30466: EQUAL
30467: IFTRUE 30471
30469: GO 41924
30471: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30472: LD_ADDR_VAR 0 11
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 0
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: LD_INT 0
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: LD_INT 1
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: LD_INT 2
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 1
30607: NEG
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: LD_INT 3
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: LD_INT 3
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 1
30638: NEG
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30665: LD_ADDR_VAR 0 12
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: LD_INT 1
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: LD_INT 1
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 1
30723: NEG
30724: PUSH
30725: LD_INT 0
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: LD_INT 1
30738: NEG
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 2
30757: PUSH
30758: LD_INT 0
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 2
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: LD_INT 1
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 2
30788: NEG
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 2
30799: NEG
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 2
30811: NEG
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 3
30833: NEG
30834: PUSH
30835: LD_INT 1
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30861: LD_ADDR_VAR 0 13
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 1
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 1
30930: NEG
30931: PUSH
30932: LD_INT 1
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PUSH
30944: LD_INT 2
30946: NEG
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 2
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 2
30964: PUSH
30965: LD_INT 2
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 1
30974: PUSH
30975: LD_INT 2
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 2
30984: NEG
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 2
30996: NEG
30997: PUSH
30998: LD_INT 2
31000: NEG
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 2
31008: NEG
31009: PUSH
31010: LD_INT 3
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: NEG
31021: PUSH
31022: LD_INT 2
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 3
31032: NEG
31033: PUSH
31034: LD_INT 3
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31060: LD_ADDR_VAR 0 14
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 1
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: LD_INT 0
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 1
31129: NEG
31130: PUSH
31131: LD_INT 1
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: PUSH
31143: LD_INT 2
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: LD_INT 2
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 1
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: LD_INT 1
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: LD_INT 3
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 0
31218: PUSH
31219: LD_INT 3
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: LD_INT 2
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31256: LD_ADDR_VAR 0 15
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 0
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: NEG
31315: PUSH
31316: LD_INT 0
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: NEG
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: NEG
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 2
31390: NEG
31391: PUSH
31392: LD_INT 1
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 2
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 3
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 3
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31449: LD_ADDR_VAR 0 16
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: NEG
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: LD_INT 2
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: LD_INT 2
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: LD_INT 2
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 2
31572: NEG
31573: PUSH
31574: LD_INT 1
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 2
31584: NEG
31585: PUSH
31586: LD_INT 2
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 3
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 3
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 2
31616: PUSH
31617: LD_INT 3
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31642: LD_ADDR_VAR 0 17
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: LD_INT 1
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: LD_INT 0
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: NEG
31724: PUSH
31725: LD_INT 2
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: NEG
31842: PUSH
31843: LD_INT 2
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31872: LD_ADDR_VAR 0 18
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: LD_INT 2
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: LD_INT 2
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: LD_INT 1
31979: NEG
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 2
31987: PUSH
31988: LD_INT 0
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 2
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: LD_INT 2
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 2
32059: NEG
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: NEG
32072: PUSH
32073: LD_INT 2
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32102: LD_ADDR_VAR 0 19
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 2
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 2
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: LD_INT 2
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: LD_INT 2
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 1
32267: NEG
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 2
32278: NEG
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: NEG
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 2
32301: NEG
32302: PUSH
32303: LD_INT 2
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32332: LD_ADDR_VAR 0 20
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: LD_INT 1
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 1
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 1
32390: NEG
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 1
32413: NEG
32414: PUSH
32415: LD_INT 2
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: LD_INT 2
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: LD_INT 2
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 1
32497: NEG
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 2
32508: NEG
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 2
32519: NEG
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: NEG
32532: PUSH
32533: LD_INT 2
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32562: LD_ADDR_VAR 0 21
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 1
32643: NEG
32644: PUSH
32645: LD_INT 2
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: LD_INT 2
32658: NEG
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 1
32666: PUSH
32667: LD_INT 1
32669: NEG
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: LD_INT 2
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 2
32738: NEG
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 2
32749: NEG
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: NEG
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32792: LD_ADDR_VAR 0 22
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 2
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 2
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 2
32927: PUSH
32928: LD_INT 2
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: LD_INT 2
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: NEG
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: NEG
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: LD_INT 2
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33022: LD_ADDR_VAR 0 23
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 1
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: PUSH
33061: LD_INT 1
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: LD_INT 2
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: LD_INT 1
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 2
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 2
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 2
33198: NEG
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 2
33209: NEG
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 2
33221: NEG
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 2
33233: NEG
33234: PUSH
33235: LD_INT 3
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 1
33245: NEG
33246: PUSH
33247: LD_INT 3
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: LD_INT 2
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 2
33268: PUSH
33269: LD_INT 1
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33302: LD_ADDR_VAR 0 24
33306: PUSH
33307: LD_INT 0
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 1
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: NEG
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 1
33371: NEG
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: LD_INT 2
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 1
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 2
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: LD_INT 2
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: LD_INT 2
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 1
33467: NEG
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 2
33478: NEG
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: NEG
33490: PUSH
33491: LD_INT 1
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 2
33501: NEG
33502: PUSH
33503: LD_INT 2
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: PUSH
33514: LD_INT 2
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 3
33545: PUSH
33546: LD_INT 2
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33578: LD_ADDR_VAR 0 25
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: LD_INT 2
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: LD_INT 2
33674: NEG
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 2
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: LD_INT 2
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 2
33754: NEG
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 2
33765: NEG
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: LD_INT 2
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 3
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 3
33799: PUSH
33800: LD_INT 2
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 3
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 1
33819: PUSH
33820: LD_INT 3
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33852: LD_ADDR_VAR 0 26
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 0
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 0
33900: PUSH
33901: LD_INT 1
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: LD_INT 1
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: LD_INT 2
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: LD_INT 2
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 2
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 2
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 2
33987: PUSH
33988: LD_INT 2
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 2
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: LD_INT 2
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: LD_INT 1
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 2
34028: NEG
34029: PUSH
34030: LD_INT 0
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 2
34039: NEG
34040: PUSH
34041: LD_INT 1
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: LD_INT 2
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 2
34063: PUSH
34064: LD_INT 3
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: LD_INT 3
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: LD_INT 1
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34128: LD_ADDR_VAR 0 27
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 1
34156: PUSH
34157: LD_INT 0
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: LD_INT 1
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 0
34176: PUSH
34177: LD_INT 1
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: LD_INT 1
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 2
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 2
34253: PUSH
34254: LD_INT 1
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 2
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 2
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: NEG
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 2
34304: NEG
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 2
34315: NEG
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 2
34327: NEG
34328: PUSH
34329: LD_INT 2
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: LD_INT 2
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 2
34350: NEG
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 3
34361: NEG
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 3
34373: NEG
34374: PUSH
34375: LD_INT 2
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34408: LD_ADDR_VAR 0 28
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 0
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: LD_INT 0
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: LD_INT 2
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: LD_INT 2
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: LD_INT 2
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: NEG
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 2
34595: NEG
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: NEG
34608: PUSH
34609: LD_INT 2
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 2
34619: NEG
34620: PUSH
34621: LD_INT 3
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: NEG
34632: PUSH
34633: LD_INT 3
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 3
34643: NEG
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 3
34655: NEG
34656: PUSH
34657: LD_INT 2
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34690: LD_ADDR_VAR 0 29
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: NEG
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 0
34783: PUSH
34784: LD_INT 2
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 2
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 2
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: LD_INT 2
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: LD_INT 2
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 1
34845: NEG
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: NEG
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 2
34868: NEG
34869: PUSH
34870: LD_INT 2
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 2
34880: NEG
34881: PUSH
34882: LD_INT 3
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 2
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: LD_INT 3
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 1
34923: NEG
34924: PUSH
34925: LD_INT 2
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 3
34934: NEG
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34969: LD_ADDR_VAR 0 30
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 2
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: NEG
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 2
35146: NEG
35147: PUSH
35148: LD_INT 1
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: LD_INT 3
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 3
35181: PUSH
35182: LD_INT 2
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: LD_INT 3
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 2
35201: NEG
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 3
35212: NEG
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35247: LD_ADDR_VAR 0 31
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 1
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 0
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: NEG
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 1
35316: NEG
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: LD_INT 2
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 2
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 2
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 2
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 1
35381: PUSH
35382: LD_INT 2
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: LD_INT 2
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 1
35401: NEG
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 2
35412: NEG
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 2
35424: NEG
35425: PUSH
35426: LD_INT 2
35428: NEG
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: NEG
35437: PUSH
35438: LD_INT 3
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 3
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: LD_INT 3
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 3
35490: NEG
35491: PUSH
35492: LD_INT 2
35494: NEG
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35525: LD_ADDR_VAR 0 32
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: LD_INT 2
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: LD_INT 2
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 2
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: LD_INT 2
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 2
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 2
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 2
35691: NEG
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 2
35702: NEG
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: LD_INT 3
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 2
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 3
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: LD_INT 3
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: NEG
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 3
35768: NEG
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35803: LD_ADDR_VAR 0 33
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 0
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: NEG
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: LD_INT 2
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 2
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 2
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 2
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: NEG
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 2
35969: NEG
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 2
35981: NEG
35982: PUSH
35983: LD_INT 2
35985: NEG
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 2
35993: NEG
35994: PUSH
35995: LD_INT 3
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: LD_INT 1
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 3
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: LD_INT 3
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 3
36047: NEG
36048: PUSH
36049: LD_INT 2
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36082: LD_ADDR_VAR 0 34
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: LD_INT 1
36102: NEG
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 1
36140: NEG
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: LD_INT 2
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: LD_INT 2
36178: NEG
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 2
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 2
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 2
36238: NEG
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 2
36249: NEG
36250: PUSH
36251: LD_INT 1
36253: NEG
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 2
36261: NEG
36262: PUSH
36263: LD_INT 2
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: LD_INT 3
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: LD_INT 2
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 3
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: LD_INT 3
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 2
36316: NEG
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 3
36327: NEG
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36362: LD_ADDR_VAR 0 35
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: LD_INT 1
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 1
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36474: LD_ADDR_VAR 0 36
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: LD_INT 1
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: LD_INT 2
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: LD_INT 2
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36586: LD_ADDR_VAR 0 37
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: NEG
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 1
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 1
36678: NEG
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36698: LD_ADDR_VAR 0 38
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 2
36789: NEG
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36810: LD_ADDR_VAR 0 39
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 0
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: LD_INT 1
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: LD_INT 0
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: LD_INT 1
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: LD_INT 2
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36922: LD_ADDR_VAR 0 40
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 1
37014: NEG
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37034: LD_ADDR_VAR 0 41
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 0
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: NEG
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: LD_INT 2
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 2
37224: NEG
37225: PUSH
37226: LD_INT 3
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 3
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 3
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 3
37277: PUSH
37278: LD_INT 3
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: LD_INT 3
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 2
37297: NEG
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 3
37308: NEG
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 3
37319: NEG
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 3
37331: NEG
37332: PUSH
37333: LD_INT 2
37335: NEG
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 3
37343: NEG
37344: PUSH
37345: LD_INT 3
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37384: LD_ADDR_VAR 0 42
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: NEG
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: LD_INT 2
37469: NEG
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: LD_INT 2
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: LD_INT 1
37491: NEG
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 2
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 2
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: LD_INT 2
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: LD_INT 3
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: LD_INT 3
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: LD_INT 3
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: LD_INT 2
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 3
37620: PUSH
37621: LD_INT 2
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 3
37630: PUSH
37631: LD_INT 3
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 2
37640: PUSH
37641: LD_INT 3
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: LD_INT 3
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: LD_INT 3
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: LD_INT 2
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 3
37681: NEG
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 3
37693: NEG
37694: PUSH
37695: LD_INT 3
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37734: LD_ADDR_VAR 0 43
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 2
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: LD_INT 2
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: LD_INT 2
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 2
37911: NEG
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: LD_INT 3
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: LD_INT 3
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 2
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 3
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: LD_INT 3
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: LD_INT 3
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 2
38019: NEG
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 3
38030: NEG
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 3
38041: NEG
38042: PUSH
38043: LD_INT 1
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38082: LD_ADDR_VAR 0 44
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: LD_INT 2
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 2
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 2
38248: NEG
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 2
38260: NEG
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 2
38272: NEG
38273: PUSH
38274: LD_INT 3
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 3
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 3
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 3
38315: PUSH
38316: LD_INT 2
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 3
38325: PUSH
38326: LD_INT 3
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: LD_INT 3
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: NEG
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 3
38356: NEG
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 3
38367: NEG
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 3
38379: NEG
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 3
38391: NEG
38392: PUSH
38393: LD_INT 3
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38432: LD_ADDR_VAR 0 45
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: LD_INT 2
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: LD_INT 2
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: LD_INT 1
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 2
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: NEG
38611: PUSH
38612: LD_INT 2
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: NEG
38623: PUSH
38624: LD_INT 3
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 1
38634: NEG
38635: PUSH
38636: LD_INT 3
38638: NEG
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: LD_INT 3
38649: NEG
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: LD_INT 2
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 3
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 3
38678: PUSH
38679: LD_INT 3
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 2
38688: PUSH
38689: LD_INT 3
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: LD_INT 3
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 3
38729: NEG
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 3
38741: NEG
38742: PUSH
38743: LD_INT 3
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38782: LD_ADDR_VAR 0 46
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 2
38948: NEG
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: NEG
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 3
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: LD_INT 3
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: LD_INT 2
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 3
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 3
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: LD_INT 3
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: LD_INT 3
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: NEG
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 3
39078: NEG
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 3
39089: NEG
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39130: LD_ADDR_VAR 0 47
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: LD_INT 2
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 2
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 2
39245: NEG
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 2
39257: NEG
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39281: LD_ADDR_VAR 0 48
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39428: LD_ADDR_VAR 0 49
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 2
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 2
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: LD_INT 2
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39572: LD_ADDR_VAR 0 50
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: LD_INT 2
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: LD_INT 2
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39716: LD_ADDR_VAR 0 51
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: LD_INT 2
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: LD_INT 2
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: NEG
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 2
39839: NEG
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39863: LD_ADDR_VAR 0 52
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: LD_INT 2
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: LD_INT 2
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40014: LD_ADDR_VAR 0 53
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: LD_INT 2
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: NEG
40214: PUSH
40215: LD_INT 2
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40244: LD_ADDR_VAR 0 54
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: LD_INT 2
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: LD_INT 2
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: LD_INT 2
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 2
40420: NEG
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: NEG
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: NEG
40444: PUSH
40445: LD_INT 2
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40474: LD_ADDR_VAR 0 55
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: LD_INT 2
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 2
40609: PUSH
40610: LD_INT 2
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 2
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 2
40661: NEG
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 2
40673: NEG
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40704: LD_ADDR_VAR 0 56
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 2
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 2
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 2
40880: NEG
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: LD_INT 1
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: LD_INT 2
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40934: LD_ADDR_VAR 0 57
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: LD_INT 2
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: LD_INT 2
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 2
41121: NEG
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: LD_INT 2
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41164: LD_ADDR_VAR 0 58
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: LD_INT 2
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: LD_INT 2
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: NEG
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41394: LD_ADDR_VAR 0 59
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41482: LD_ADDR_VAR 0 60
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41570: LD_ADDR_VAR 0 61
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41658: LD_ADDR_VAR 0 62
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41746: LD_ADDR_VAR 0 63
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41834: LD_ADDR_VAR 0 64
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: ST_TO_ADDR
// end ; 1 :
41922: GO 47819
41924: LD_INT 1
41926: DOUBLE
41927: EQUAL
41928: IFTRUE 41932
41930: GO 44555
41932: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41933: LD_ADDR_VAR 0 11
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: LD_INT 3
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41977: LD_ADDR_VAR 0 12
41981: PUSH
41982: LD_INT 2
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 3
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 3
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: LIST
42017: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42018: LD_ADDR_VAR 0 13
42022: PUSH
42023: LD_INT 3
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: LD_INT 3
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 3
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: LIST
42057: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42058: LD_ADDR_VAR 0 14
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: LD_INT 3
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 3
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: LIST
42098: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42099: LD_ADDR_VAR 0 15
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 3
42128: NEG
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: LIST
42142: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42143: LD_ADDR_VAR 0 16
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: LD_INT 3
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 3
42162: NEG
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 3
42174: NEG
42175: PUSH
42176: LD_INT 3
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42189: LD_ADDR_VAR 0 17
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 3
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 3
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 2
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: LIST
42232: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42233: LD_ADDR_VAR 0 18
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 3
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 3
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42274: LD_ADDR_VAR 0 19
42278: PUSH
42279: LD_INT 3
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 3
42291: PUSH
42292: LD_INT 3
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: LIST
42313: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42314: LD_ADDR_VAR 0 20
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: LD_INT 3
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: LD_INT 3
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: LIST
42354: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42355: LD_ADDR_VAR 0 21
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 3
42373: NEG
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 3
42384: NEG
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: LIST
42398: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42399: LD_ADDR_VAR 0 22
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: LD_INT 3
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 3
42418: NEG
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 3
42430: NEG
42431: PUSH
42432: LD_INT 3
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42445: LD_ADDR_VAR 0 23
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: LD_INT 3
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 4
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 3
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42489: LD_ADDR_VAR 0 24
42493: PUSH
42494: LD_INT 3
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 3
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 4
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42530: LD_ADDR_VAR 0 25
42534: PUSH
42535: LD_INT 3
42537: PUSH
42538: LD_INT 3
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 4
42547: PUSH
42548: LD_INT 3
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 3
42557: PUSH
42558: LD_INT 4
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42570: LD_ADDR_VAR 0 26
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 3
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 4
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: LD_INT 3
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: LIST
42610: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42611: LD_ADDR_VAR 0 27
42615: PUSH
42616: LD_INT 3
42618: NEG
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 3
42629: NEG
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 4
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: LIST
42654: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42655: LD_ADDR_VAR 0 28
42659: PUSH
42660: LD_INT 3
42662: NEG
42663: PUSH
42664: LD_INT 3
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 3
42674: NEG
42675: PUSH
42676: LD_INT 4
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 4
42686: NEG
42687: PUSH
42688: LD_INT 3
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42701: LD_ADDR_VAR 0 29
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: LD_INT 3
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 3
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 2
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: LD_INT 4
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 4
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 3
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: LD_INT 5
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: LD_INT 5
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 4
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: LD_INT 6
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: LD_INT 6
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: LD_INT 5
42836: NEG
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42856: LD_ADDR_VAR 0 30
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 3
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 3
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 3
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 4
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 4
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 4
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 5
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 5
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 5
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 6
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 6
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42999: LD_ADDR_VAR 0 31
43003: PUSH
43004: LD_INT 3
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 3
43016: PUSH
43017: LD_INT 3
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 3
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 4
43036: PUSH
43037: LD_INT 3
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 4
43046: PUSH
43047: LD_INT 4
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 3
43056: PUSH
43057: LD_INT 4
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 5
43066: PUSH
43067: LD_INT 4
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 5
43076: PUSH
43077: LD_INT 5
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 4
43086: PUSH
43087: LD_INT 5
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 6
43096: PUSH
43097: LD_INT 5
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 6
43106: PUSH
43107: LD_INT 6
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 5
43116: PUSH
43117: LD_INT 6
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43138: LD_ADDR_VAR 0 32
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 3
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 4
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 4
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: LD_INT 5
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: LD_INT 5
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: LD_INT 4
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: LD_INT 6
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 6
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: LD_INT 5
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43281: LD_ADDR_VAR 0 33
43285: PUSH
43286: LD_INT 2
43288: NEG
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 3
43299: NEG
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 3
43310: NEG
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 3
43322: NEG
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 4
43333: NEG
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 4
43344: NEG
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 4
43356: NEG
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 5
43367: NEG
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 5
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 5
43390: NEG
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 6
43401: NEG
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 6
43412: NEG
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43436: LD_ADDR_VAR 0 34
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: LD_INT 3
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 3
43455: NEG
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 3
43467: NEG
43468: PUSH
43469: LD_INT 3
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 3
43479: NEG
43480: PUSH
43481: LD_INT 4
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 4
43491: NEG
43492: PUSH
43493: LD_INT 3
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 4
43503: NEG
43504: PUSH
43505: LD_INT 4
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 4
43515: NEG
43516: PUSH
43517: LD_INT 5
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 5
43527: NEG
43528: PUSH
43529: LD_INT 4
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 5
43539: NEG
43540: PUSH
43541: LD_INT 5
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 5
43551: NEG
43552: PUSH
43553: LD_INT 6
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 6
43563: NEG
43564: PUSH
43565: LD_INT 5
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 6
43575: NEG
43576: PUSH
43577: LD_INT 6
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43599: LD_ADDR_VAR 0 41
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: LD_INT 3
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 2
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43643: LD_ADDR_VAR 0 42
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 3
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: LIST
43683: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43684: LD_ADDR_VAR 0 43
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 3
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: LD_INT 3
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: LIST
43723: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43724: LD_ADDR_VAR 0 44
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 3
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43765: LD_ADDR_VAR 0 45
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 3
43794: NEG
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: LIST
43808: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43809: LD_ADDR_VAR 0 46
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: LD_INT 2
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: LD_INT 3
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 3
43840: NEG
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43855: LD_ADDR_VAR 0 47
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 3
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: LD_INT 3
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43888: LD_ADDR_VAR 0 48
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 2
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43919: LD_ADDR_VAR 0 49
43923: PUSH
43924: LD_INT 3
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 3
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43948: LD_ADDR_VAR 0 50
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 3
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 3
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43977: LD_ADDR_VAR 0 51
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: NEG
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44008: LD_ADDR_VAR 0 52
44012: PUSH
44013: LD_INT 3
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 3
44027: NEG
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44041: LD_ADDR_VAR 0 53
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 3
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 3
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: LD_INT 2
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: LIST
44084: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44085: LD_ADDR_VAR 0 54
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 3
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44126: LD_ADDR_VAR 0 55
44130: PUSH
44131: LD_INT 3
44133: PUSH
44134: LD_INT 2
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 3
44143: PUSH
44144: LD_INT 3
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: LD_INT 3
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44166: LD_ADDR_VAR 0 56
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 3
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 3
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44207: LD_ADDR_VAR 0 57
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 3
44225: NEG
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 3
44236: NEG
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: LIST
44250: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44251: LD_ADDR_VAR 0 58
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: LD_INT 3
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 3
44270: NEG
44271: PUSH
44272: LD_INT 2
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 3
44282: NEG
44283: PUSH
44284: LD_INT 3
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: LIST
44296: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44297: LD_ADDR_VAR 0 59
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: LIST
44340: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44341: LD_ADDR_VAR 0 60
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44382: LD_ADDR_VAR 0 61
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: LIST
44421: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44422: LD_ADDR_VAR 0 62
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: LIST
44462: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44463: LD_ADDR_VAR 0 63
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 2
44481: NEG
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: LIST
44506: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44507: LD_ADDR_VAR 0 64
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: LIST
44552: ST_TO_ADDR
// end ; 2 :
44553: GO 47819
44555: LD_INT 2
44557: DOUBLE
44558: EQUAL
44559: IFTRUE 44563
44561: GO 47818
44563: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44564: LD_ADDR_VAR 0 29
44568: PUSH
44569: LD_INT 4
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 4
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 5
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 5
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 4
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 3
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 3
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 3
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 5
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 3
44664: PUSH
44665: LD_INT 3
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 3
44674: PUSH
44675: LD_INT 2
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 4
44684: PUSH
44685: LD_INT 3
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 4
44694: PUSH
44695: LD_INT 4
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 3
44704: PUSH
44705: LD_INT 4
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: LD_INT 3
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 4
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: LD_INT 4
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 4
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 3
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 4
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 5
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: LD_INT 5
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: LD_INT 4
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 3
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: LD_INT 5
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: LD_INT 3
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 3
44847: NEG
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 3
44858: NEG
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 3
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 4
44903: NEG
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 4
44914: NEG
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 4
44926: NEG
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 4
44949: NEG
44950: PUSH
44951: LD_INT 4
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 4
44961: NEG
44962: PUSH
44963: LD_INT 5
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 3
44973: NEG
44974: PUSH
44975: LD_INT 4
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 3
44985: NEG
44986: PUSH
44987: LD_INT 3
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 4
44997: NEG
44998: PUSH
44999: LD_INT 3
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 5
45009: NEG
45010: PUSH
45011: LD_INT 4
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 5
45021: NEG
45022: PUSH
45023: LD_INT 5
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 3
45033: NEG
45034: PUSH
45035: LD_INT 5
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 5
45045: NEG
45046: PUSH
45047: LD_INT 3
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45102: LD_ADDR_VAR 0 30
45106: PUSH
45107: LD_INT 4
45109: PUSH
45110: LD_INT 4
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 4
45119: PUSH
45120: LD_INT 3
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 5
45129: PUSH
45130: LD_INT 4
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 5
45139: PUSH
45140: LD_INT 5
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 4
45149: PUSH
45150: LD_INT 5
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 3
45159: PUSH
45160: LD_INT 4
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 3
45169: PUSH
45170: LD_INT 3
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 5
45179: PUSH
45180: LD_INT 3
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 3
45189: PUSH
45190: LD_INT 5
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: LD_INT 3
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 3
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 4
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 4
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: LD_INT 3
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 4
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 4
45292: NEG
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 4
45303: NEG
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 3
45315: NEG
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 3
45326: NEG
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 4
45337: NEG
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 5
45348: NEG
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 5
45359: NEG
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 5
45371: NEG
45372: PUSH
45373: LD_INT 2
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 3
45383: NEG
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 3
45394: NEG
45395: PUSH
45396: LD_INT 3
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 3
45406: NEG
45407: PUSH
45408: LD_INT 4
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: LD_INT 3
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 3
45442: NEG
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 4
45454: NEG
45455: PUSH
45456: LD_INT 3
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 4
45466: NEG
45467: PUSH
45468: LD_INT 4
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: LD_INT 4
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 4
45490: NEG
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 4
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 5
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 4
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 3
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 3
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 4
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: LD_INT 5
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: LD_INT 3
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: LD_INT 5
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45649: LD_ADDR_VAR 0 31
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 4
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 3
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: LD_INT 4
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: LD_INT 5
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 5
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 4
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: LD_INT 3
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: LD_INT 5
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: LD_INT 3
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 3
45749: NEG
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: NEG
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 3
45794: NEG
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 4
45805: NEG
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 4
45816: NEG
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 4
45828: NEG
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 4
45851: NEG
45852: PUSH
45853: LD_INT 4
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 4
45863: NEG
45864: PUSH
45865: LD_INT 5
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 3
45875: NEG
45876: PUSH
45877: LD_INT 4
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 3
45887: NEG
45888: PUSH
45889: LD_INT 3
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 4
45899: NEG
45900: PUSH
45901: LD_INT 3
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 5
45911: NEG
45912: PUSH
45913: LD_INT 4
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 5
45923: NEG
45924: PUSH
45925: LD_INT 5
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 3
45935: NEG
45936: PUSH
45937: LD_INT 5
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 5
45947: NEG
45948: PUSH
45949: LD_INT 3
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 3
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 4
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: LD_INT 3
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: LD_INT 4
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: LD_INT 2
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: LD_INT 4
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 4
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 4
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 5
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 5
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 4
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 3
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 3
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 5
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46199: LD_ADDR_VAR 0 32
46203: PUSH
46204: LD_INT 4
46206: NEG
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 4
46217: NEG
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 3
46229: NEG
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 3
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 4
46251: NEG
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 5
46262: NEG
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 5
46273: NEG
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 5
46285: NEG
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 3
46297: NEG
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: LD_INT 3
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 3
46320: NEG
46321: PUSH
46322: LD_INT 4
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: LD_INT 3
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 3
46356: NEG
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 4
46368: NEG
46369: PUSH
46370: LD_INT 3
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 4
46380: NEG
46381: PUSH
46382: LD_INT 4
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: LD_INT 4
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 4
46404: NEG
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 4
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 5
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 4
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 3
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 3
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: LD_INT 4
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 5
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: LD_INT 3
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: LD_INT 5
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 3
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 3
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 4
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 4
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 3
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 4
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 4
46611: PUSH
46612: LD_INT 4
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 4
46621: PUSH
46622: LD_INT 3
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 5
46631: PUSH
46632: LD_INT 4
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 5
46641: PUSH
46642: LD_INT 5
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 4
46651: PUSH
46652: LD_INT 5
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 3
46661: PUSH
46662: LD_INT 4
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 3
46671: PUSH
46672: LD_INT 3
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 5
46681: PUSH
46682: LD_INT 3
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: LD_INT 5
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46746: LD_ADDR_VAR 0 33
46750: PUSH
46751: LD_INT 4
46753: NEG
46754: PUSH
46755: LD_INT 4
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 4
46765: NEG
46766: PUSH
46767: LD_INT 5
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 3
46777: NEG
46778: PUSH
46779: LD_INT 4
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 3
46789: NEG
46790: PUSH
46791: LD_INT 3
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 4
46801: NEG
46802: PUSH
46803: LD_INT 3
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 5
46813: NEG
46814: PUSH
46815: LD_INT 4
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 5
46825: NEG
46826: PUSH
46827: LD_INT 5
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 3
46837: NEG
46838: PUSH
46839: LD_INT 5
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 5
46849: NEG
46850: PUSH
46851: LD_INT 3
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 3
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 4
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 3
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: LD_INT 3
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 4
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: LD_INT 4
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 4
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 4
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 5
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 5
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 4
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 3
47035: PUSH
47036: LD_INT 2
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 5
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 3
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 4
47076: PUSH
47077: LD_INT 3
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 4
47086: PUSH
47087: LD_INT 4
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: LD_INT 4
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 3
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 4
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 4
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 4
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 3
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: LD_INT 4
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 5
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: LD_INT 5
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 4
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 5
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: LD_INT 3
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47284: LD_ADDR_VAR 0 34
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 4
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 5
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 4
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 3
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 3
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 4
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 5
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: LD_INT 3
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: LD_INT 5
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 3
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 3
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 4
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 4
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 4
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 4
47486: PUSH
47487: LD_INT 4
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 4
47496: PUSH
47497: LD_INT 3
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 5
47506: PUSH
47507: LD_INT 4
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 5
47516: PUSH
47517: LD_INT 5
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 4
47526: PUSH
47527: LD_INT 5
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 3
47536: PUSH
47537: LD_INT 4
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: LD_INT 3
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 5
47556: PUSH
47557: LD_INT 3
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 3
47566: PUSH
47567: LD_INT 5
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 2
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: LD_INT 3
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 4
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 4
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: PUSH
47649: LD_INT 4
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 4
47669: NEG
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 4
47680: NEG
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 3
47692: NEG
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 3
47703: NEG
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 4
47714: NEG
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 5
47725: NEG
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 5
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 5
47748: NEG
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 3
47760: NEG
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: ST_TO_ADDR
// end ; end ;
47816: GO 47819
47818: POP
// case btype of b_depot , b_warehouse :
47819: LD_VAR 0 1
47823: PUSH
47824: LD_INT 0
47826: DOUBLE
47827: EQUAL
47828: IFTRUE 47838
47830: LD_INT 1
47832: DOUBLE
47833: EQUAL
47834: IFTRUE 47838
47836: GO 48039
47838: POP
// case nation of nation_american :
47839: LD_VAR 0 5
47843: PUSH
47844: LD_INT 1
47846: DOUBLE
47847: EQUAL
47848: IFTRUE 47852
47850: GO 47908
47852: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47853: LD_ADDR_VAR 0 9
47857: PUSH
47858: LD_VAR 0 11
47862: PUSH
47863: LD_VAR 0 12
47867: PUSH
47868: LD_VAR 0 13
47872: PUSH
47873: LD_VAR 0 14
47877: PUSH
47878: LD_VAR 0 15
47882: PUSH
47883: LD_VAR 0 16
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: PUSH
47896: LD_VAR 0 4
47900: PUSH
47901: LD_INT 1
47903: PLUS
47904: ARRAY
47905: ST_TO_ADDR
47906: GO 48037
47908: LD_INT 2
47910: DOUBLE
47911: EQUAL
47912: IFTRUE 47916
47914: GO 47972
47916: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47917: LD_ADDR_VAR 0 9
47921: PUSH
47922: LD_VAR 0 17
47926: PUSH
47927: LD_VAR 0 18
47931: PUSH
47932: LD_VAR 0 19
47936: PUSH
47937: LD_VAR 0 20
47941: PUSH
47942: LD_VAR 0 21
47946: PUSH
47947: LD_VAR 0 22
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: PUSH
47960: LD_VAR 0 4
47964: PUSH
47965: LD_INT 1
47967: PLUS
47968: ARRAY
47969: ST_TO_ADDR
47970: GO 48037
47972: LD_INT 3
47974: DOUBLE
47975: EQUAL
47976: IFTRUE 47980
47978: GO 48036
47980: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47981: LD_ADDR_VAR 0 9
47985: PUSH
47986: LD_VAR 0 23
47990: PUSH
47991: LD_VAR 0 24
47995: PUSH
47996: LD_VAR 0 25
48000: PUSH
48001: LD_VAR 0 26
48005: PUSH
48006: LD_VAR 0 27
48010: PUSH
48011: LD_VAR 0 28
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: PUSH
48024: LD_VAR 0 4
48028: PUSH
48029: LD_INT 1
48031: PLUS
48032: ARRAY
48033: ST_TO_ADDR
48034: GO 48037
48036: POP
48037: GO 48592
48039: LD_INT 2
48041: DOUBLE
48042: EQUAL
48043: IFTRUE 48053
48045: LD_INT 3
48047: DOUBLE
48048: EQUAL
48049: IFTRUE 48053
48051: GO 48109
48053: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48054: LD_ADDR_VAR 0 9
48058: PUSH
48059: LD_VAR 0 29
48063: PUSH
48064: LD_VAR 0 30
48068: PUSH
48069: LD_VAR 0 31
48073: PUSH
48074: LD_VAR 0 32
48078: PUSH
48079: LD_VAR 0 33
48083: PUSH
48084: LD_VAR 0 34
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: PUSH
48097: LD_VAR 0 4
48101: PUSH
48102: LD_INT 1
48104: PLUS
48105: ARRAY
48106: ST_TO_ADDR
48107: GO 48592
48109: LD_INT 16
48111: DOUBLE
48112: EQUAL
48113: IFTRUE 48171
48115: LD_INT 17
48117: DOUBLE
48118: EQUAL
48119: IFTRUE 48171
48121: LD_INT 18
48123: DOUBLE
48124: EQUAL
48125: IFTRUE 48171
48127: LD_INT 19
48129: DOUBLE
48130: EQUAL
48131: IFTRUE 48171
48133: LD_INT 22
48135: DOUBLE
48136: EQUAL
48137: IFTRUE 48171
48139: LD_INT 20
48141: DOUBLE
48142: EQUAL
48143: IFTRUE 48171
48145: LD_INT 21
48147: DOUBLE
48148: EQUAL
48149: IFTRUE 48171
48151: LD_INT 23
48153: DOUBLE
48154: EQUAL
48155: IFTRUE 48171
48157: LD_INT 24
48159: DOUBLE
48160: EQUAL
48161: IFTRUE 48171
48163: LD_INT 25
48165: DOUBLE
48166: EQUAL
48167: IFTRUE 48171
48169: GO 48227
48171: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48172: LD_ADDR_VAR 0 9
48176: PUSH
48177: LD_VAR 0 35
48181: PUSH
48182: LD_VAR 0 36
48186: PUSH
48187: LD_VAR 0 37
48191: PUSH
48192: LD_VAR 0 38
48196: PUSH
48197: LD_VAR 0 39
48201: PUSH
48202: LD_VAR 0 40
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: PUSH
48215: LD_VAR 0 4
48219: PUSH
48220: LD_INT 1
48222: PLUS
48223: ARRAY
48224: ST_TO_ADDR
48225: GO 48592
48227: LD_INT 6
48229: DOUBLE
48230: EQUAL
48231: IFTRUE 48283
48233: LD_INT 7
48235: DOUBLE
48236: EQUAL
48237: IFTRUE 48283
48239: LD_INT 8
48241: DOUBLE
48242: EQUAL
48243: IFTRUE 48283
48245: LD_INT 13
48247: DOUBLE
48248: EQUAL
48249: IFTRUE 48283
48251: LD_INT 12
48253: DOUBLE
48254: EQUAL
48255: IFTRUE 48283
48257: LD_INT 15
48259: DOUBLE
48260: EQUAL
48261: IFTRUE 48283
48263: LD_INT 11
48265: DOUBLE
48266: EQUAL
48267: IFTRUE 48283
48269: LD_INT 14
48271: DOUBLE
48272: EQUAL
48273: IFTRUE 48283
48275: LD_INT 10
48277: DOUBLE
48278: EQUAL
48279: IFTRUE 48283
48281: GO 48339
48283: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48284: LD_ADDR_VAR 0 9
48288: PUSH
48289: LD_VAR 0 41
48293: PUSH
48294: LD_VAR 0 42
48298: PUSH
48299: LD_VAR 0 43
48303: PUSH
48304: LD_VAR 0 44
48308: PUSH
48309: LD_VAR 0 45
48313: PUSH
48314: LD_VAR 0 46
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: PUSH
48327: LD_VAR 0 4
48331: PUSH
48332: LD_INT 1
48334: PLUS
48335: ARRAY
48336: ST_TO_ADDR
48337: GO 48592
48339: LD_INT 36
48341: DOUBLE
48342: EQUAL
48343: IFTRUE 48347
48345: GO 48403
48347: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48348: LD_ADDR_VAR 0 9
48352: PUSH
48353: LD_VAR 0 47
48357: PUSH
48358: LD_VAR 0 48
48362: PUSH
48363: LD_VAR 0 49
48367: PUSH
48368: LD_VAR 0 50
48372: PUSH
48373: LD_VAR 0 51
48377: PUSH
48378: LD_VAR 0 52
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: PUSH
48391: LD_VAR 0 4
48395: PUSH
48396: LD_INT 1
48398: PLUS
48399: ARRAY
48400: ST_TO_ADDR
48401: GO 48592
48403: LD_INT 4
48405: DOUBLE
48406: EQUAL
48407: IFTRUE 48429
48409: LD_INT 5
48411: DOUBLE
48412: EQUAL
48413: IFTRUE 48429
48415: LD_INT 34
48417: DOUBLE
48418: EQUAL
48419: IFTRUE 48429
48421: LD_INT 37
48423: DOUBLE
48424: EQUAL
48425: IFTRUE 48429
48427: GO 48485
48429: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48430: LD_ADDR_VAR 0 9
48434: PUSH
48435: LD_VAR 0 53
48439: PUSH
48440: LD_VAR 0 54
48444: PUSH
48445: LD_VAR 0 55
48449: PUSH
48450: LD_VAR 0 56
48454: PUSH
48455: LD_VAR 0 57
48459: PUSH
48460: LD_VAR 0 58
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: PUSH
48473: LD_VAR 0 4
48477: PUSH
48478: LD_INT 1
48480: PLUS
48481: ARRAY
48482: ST_TO_ADDR
48483: GO 48592
48485: LD_INT 31
48487: DOUBLE
48488: EQUAL
48489: IFTRUE 48535
48491: LD_INT 32
48493: DOUBLE
48494: EQUAL
48495: IFTRUE 48535
48497: LD_INT 33
48499: DOUBLE
48500: EQUAL
48501: IFTRUE 48535
48503: LD_INT 27
48505: DOUBLE
48506: EQUAL
48507: IFTRUE 48535
48509: LD_INT 26
48511: DOUBLE
48512: EQUAL
48513: IFTRUE 48535
48515: LD_INT 28
48517: DOUBLE
48518: EQUAL
48519: IFTRUE 48535
48521: LD_INT 29
48523: DOUBLE
48524: EQUAL
48525: IFTRUE 48535
48527: LD_INT 30
48529: DOUBLE
48530: EQUAL
48531: IFTRUE 48535
48533: GO 48591
48535: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48536: LD_ADDR_VAR 0 9
48540: PUSH
48541: LD_VAR 0 59
48545: PUSH
48546: LD_VAR 0 60
48550: PUSH
48551: LD_VAR 0 61
48555: PUSH
48556: LD_VAR 0 62
48560: PUSH
48561: LD_VAR 0 63
48565: PUSH
48566: LD_VAR 0 64
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: PUSH
48579: LD_VAR 0 4
48583: PUSH
48584: LD_INT 1
48586: PLUS
48587: ARRAY
48588: ST_TO_ADDR
48589: GO 48592
48591: POP
// temp_list2 = [ ] ;
48592: LD_ADDR_VAR 0 10
48596: PUSH
48597: EMPTY
48598: ST_TO_ADDR
// for i in temp_list do
48599: LD_ADDR_VAR 0 8
48603: PUSH
48604: LD_VAR 0 9
48608: PUSH
48609: FOR_IN
48610: IFFALSE 48662
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48612: LD_ADDR_VAR 0 10
48616: PUSH
48617: LD_VAR 0 10
48621: PUSH
48622: LD_VAR 0 8
48626: PUSH
48627: LD_INT 1
48629: ARRAY
48630: PUSH
48631: LD_VAR 0 2
48635: PLUS
48636: PUSH
48637: LD_VAR 0 8
48641: PUSH
48642: LD_INT 2
48644: ARRAY
48645: PUSH
48646: LD_VAR 0 3
48650: PLUS
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: EMPTY
48657: LIST
48658: ADD
48659: ST_TO_ADDR
48660: GO 48609
48662: POP
48663: POP
// result = temp_list2 ;
48664: LD_ADDR_VAR 0 7
48668: PUSH
48669: LD_VAR 0 10
48673: ST_TO_ADDR
// end ;
48674: LD_VAR 0 7
48678: RET
// export function EnemyInRange ( unit , dist ) ; begin
48679: LD_INT 0
48681: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48682: LD_ADDR_VAR 0 3
48686: PUSH
48687: LD_VAR 0 1
48691: PPUSH
48692: CALL_OW 255
48696: PPUSH
48697: LD_VAR 0 1
48701: PPUSH
48702: CALL_OW 250
48706: PPUSH
48707: LD_VAR 0 1
48711: PPUSH
48712: CALL_OW 251
48716: PPUSH
48717: LD_VAR 0 2
48721: PPUSH
48722: CALL 21936 0 4
48726: PUSH
48727: LD_INT 4
48729: ARRAY
48730: ST_TO_ADDR
// end ;
48731: LD_VAR 0 3
48735: RET
// export function PlayerSeeMe ( unit ) ; begin
48736: LD_INT 0
48738: PPUSH
// result := See ( your_side , unit ) ;
48739: LD_ADDR_VAR 0 2
48743: PUSH
48744: LD_OWVAR 2
48748: PPUSH
48749: LD_VAR 0 1
48753: PPUSH
48754: CALL_OW 292
48758: ST_TO_ADDR
// end ;
48759: LD_VAR 0 2
48763: RET
// export function ReverseDir ( unit ) ; begin
48764: LD_INT 0
48766: PPUSH
// if not unit then
48767: LD_VAR 0 1
48771: NOT
48772: IFFALSE 48776
// exit ;
48774: GO 48799
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48776: LD_ADDR_VAR 0 2
48780: PUSH
48781: LD_VAR 0 1
48785: PPUSH
48786: CALL_OW 254
48790: PUSH
48791: LD_INT 3
48793: PLUS
48794: PUSH
48795: LD_INT 6
48797: MOD
48798: ST_TO_ADDR
// end ;
48799: LD_VAR 0 2
48803: RET
// export function ReverseArray ( array ) ; var i ; begin
48804: LD_INT 0
48806: PPUSH
48807: PPUSH
// if not array then
48808: LD_VAR 0 1
48812: NOT
48813: IFFALSE 48817
// exit ;
48815: GO 48872
// result := [ ] ;
48817: LD_ADDR_VAR 0 2
48821: PUSH
48822: EMPTY
48823: ST_TO_ADDR
// for i := array downto 1 do
48824: LD_ADDR_VAR 0 3
48828: PUSH
48829: DOUBLE
48830: LD_VAR 0 1
48834: INC
48835: ST_TO_ADDR
48836: LD_INT 1
48838: PUSH
48839: FOR_DOWNTO
48840: IFFALSE 48870
// result := Join ( result , array [ i ] ) ;
48842: LD_ADDR_VAR 0 2
48846: PUSH
48847: LD_VAR 0 2
48851: PPUSH
48852: LD_VAR 0 1
48856: PUSH
48857: LD_VAR 0 3
48861: ARRAY
48862: PPUSH
48863: CALL 53714 0 2
48867: ST_TO_ADDR
48868: GO 48839
48870: POP
48871: POP
// end ;
48872: LD_VAR 0 2
48876: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48877: LD_INT 0
48879: PPUSH
48880: PPUSH
48881: PPUSH
48882: PPUSH
48883: PPUSH
48884: PPUSH
// if not unit or not hexes then
48885: LD_VAR 0 1
48889: NOT
48890: IFTRUE 48899
48892: PUSH
48893: LD_VAR 0 2
48897: NOT
48898: OR
48899: IFFALSE 48903
// exit ;
48901: GO 49026
// dist := 9999 ;
48903: LD_ADDR_VAR 0 5
48907: PUSH
48908: LD_INT 9999
48910: ST_TO_ADDR
// for i = 1 to hexes do
48911: LD_ADDR_VAR 0 4
48915: PUSH
48916: DOUBLE
48917: LD_INT 1
48919: DEC
48920: ST_TO_ADDR
48921: LD_VAR 0 2
48925: PUSH
48926: FOR_TO
48927: IFFALSE 49014
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48929: LD_ADDR_VAR 0 6
48933: PUSH
48934: LD_VAR 0 1
48938: PPUSH
48939: LD_VAR 0 2
48943: PUSH
48944: LD_VAR 0 4
48948: ARRAY
48949: PUSH
48950: LD_INT 1
48952: ARRAY
48953: PPUSH
48954: LD_VAR 0 2
48958: PUSH
48959: LD_VAR 0 4
48963: ARRAY
48964: PUSH
48965: LD_INT 2
48967: ARRAY
48968: PPUSH
48969: CALL_OW 297
48973: ST_TO_ADDR
// if tdist < dist then
48974: LD_VAR 0 6
48978: PUSH
48979: LD_VAR 0 5
48983: LESS
48984: IFFALSE 49012
// begin hex := hexes [ i ] ;
48986: LD_ADDR_VAR 0 8
48990: PUSH
48991: LD_VAR 0 2
48995: PUSH
48996: LD_VAR 0 4
49000: ARRAY
49001: ST_TO_ADDR
// dist := tdist ;
49002: LD_ADDR_VAR 0 5
49006: PUSH
49007: LD_VAR 0 6
49011: ST_TO_ADDR
// end ; end ;
49012: GO 48926
49014: POP
49015: POP
// result := hex ;
49016: LD_ADDR_VAR 0 3
49020: PUSH
49021: LD_VAR 0 8
49025: ST_TO_ADDR
// end ;
49026: LD_VAR 0 3
49030: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49031: LD_INT 0
49033: PPUSH
49034: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49035: LD_VAR 0 1
49039: NOT
49040: IFTRUE 49079
49042: PUSH
49043: LD_VAR 0 1
49047: PUSH
49048: LD_INT 21
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 23
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PPUSH
49072: CALL_OW 69
49076: IN
49077: NOT
49078: OR
49079: IFFALSE 49083
// exit ;
49081: GO 49130
// for i = 1 to 3 do
49083: LD_ADDR_VAR 0 3
49087: PUSH
49088: DOUBLE
49089: LD_INT 1
49091: DEC
49092: ST_TO_ADDR
49093: LD_INT 3
49095: PUSH
49096: FOR_TO
49097: IFFALSE 49128
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49099: LD_VAR 0 1
49103: PPUSH
49104: CALL_OW 250
49108: PPUSH
49109: LD_VAR 0 1
49113: PPUSH
49114: CALL_OW 251
49118: PPUSH
49119: LD_INT 1
49121: PPUSH
49122: CALL_OW 453
49126: GO 49096
49128: POP
49129: POP
// end ;
49130: LD_VAR 0 2
49134: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49135: LD_INT 0
49137: PPUSH
49138: PPUSH
49139: PPUSH
49140: PPUSH
49141: PPUSH
49142: PPUSH
// if not unit or not enemy_unit then
49143: LD_VAR 0 1
49147: NOT
49148: IFTRUE 49157
49150: PUSH
49151: LD_VAR 0 2
49155: NOT
49156: OR
49157: IFFALSE 49161
// exit ;
49159: GO 49632
// if GetLives ( i ) < 250 then
49161: LD_VAR 0 4
49165: PPUSH
49166: CALL_OW 256
49170: PUSH
49171: LD_INT 250
49173: LESS
49174: IFFALSE 49187
// begin ComAutodestruct ( i ) ;
49176: LD_VAR 0 4
49180: PPUSH
49181: CALL 49031 0 1
// exit ;
49185: GO 49632
// end ; x := GetX ( enemy_unit ) ;
49187: LD_ADDR_VAR 0 7
49191: PUSH
49192: LD_VAR 0 2
49196: PPUSH
49197: CALL_OW 250
49201: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49202: LD_ADDR_VAR 0 8
49206: PUSH
49207: LD_VAR 0 2
49211: PPUSH
49212: CALL_OW 251
49216: ST_TO_ADDR
// if not x or not y then
49217: LD_VAR 0 7
49221: NOT
49222: IFTRUE 49231
49224: PUSH
49225: LD_VAR 0 8
49229: NOT
49230: OR
49231: IFFALSE 49235
// exit ;
49233: GO 49632
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49235: LD_ADDR_VAR 0 6
49239: PUSH
49240: LD_VAR 0 7
49244: PPUSH
49245: LD_INT 0
49247: PPUSH
49248: LD_INT 4
49250: PPUSH
49251: CALL_OW 272
49255: PUSH
49256: LD_VAR 0 8
49260: PPUSH
49261: LD_INT 0
49263: PPUSH
49264: LD_INT 4
49266: PPUSH
49267: CALL_OW 273
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_VAR 0 7
49280: PPUSH
49281: LD_INT 1
49283: PPUSH
49284: LD_INT 4
49286: PPUSH
49287: CALL_OW 272
49291: PUSH
49292: LD_VAR 0 8
49296: PPUSH
49297: LD_INT 1
49299: PPUSH
49300: LD_INT 4
49302: PPUSH
49303: CALL_OW 273
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_VAR 0 7
49316: PPUSH
49317: LD_INT 2
49319: PPUSH
49320: LD_INT 4
49322: PPUSH
49323: CALL_OW 272
49327: PUSH
49328: LD_VAR 0 8
49332: PPUSH
49333: LD_INT 2
49335: PPUSH
49336: LD_INT 4
49338: PPUSH
49339: CALL_OW 273
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_VAR 0 7
49352: PPUSH
49353: LD_INT 3
49355: PPUSH
49356: LD_INT 4
49358: PPUSH
49359: CALL_OW 272
49363: PUSH
49364: LD_VAR 0 8
49368: PPUSH
49369: LD_INT 3
49371: PPUSH
49372: LD_INT 4
49374: PPUSH
49375: CALL_OW 273
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_VAR 0 7
49388: PPUSH
49389: LD_INT 4
49391: PPUSH
49392: LD_INT 4
49394: PPUSH
49395: CALL_OW 272
49399: PUSH
49400: LD_VAR 0 8
49404: PPUSH
49405: LD_INT 4
49407: PPUSH
49408: LD_INT 4
49410: PPUSH
49411: CALL_OW 273
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_VAR 0 7
49424: PPUSH
49425: LD_INT 5
49427: PPUSH
49428: LD_INT 4
49430: PPUSH
49431: CALL_OW 272
49435: PUSH
49436: LD_VAR 0 8
49440: PPUSH
49441: LD_INT 5
49443: PPUSH
49444: LD_INT 4
49446: PPUSH
49447: CALL_OW 273
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: ST_TO_ADDR
// for i = tmp downto 1 do
49464: LD_ADDR_VAR 0 4
49468: PUSH
49469: DOUBLE
49470: LD_VAR 0 6
49474: INC
49475: ST_TO_ADDR
49476: LD_INT 1
49478: PUSH
49479: FOR_DOWNTO
49480: IFFALSE 49583
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49482: LD_VAR 0 6
49486: PUSH
49487: LD_VAR 0 4
49491: ARRAY
49492: PUSH
49493: LD_INT 1
49495: ARRAY
49496: PPUSH
49497: LD_VAR 0 6
49501: PUSH
49502: LD_VAR 0 4
49506: ARRAY
49507: PUSH
49508: LD_INT 2
49510: ARRAY
49511: PPUSH
49512: CALL_OW 488
49516: NOT
49517: IFTRUE 49559
49519: PUSH
49520: LD_VAR 0 6
49524: PUSH
49525: LD_VAR 0 4
49529: ARRAY
49530: PUSH
49531: LD_INT 1
49533: ARRAY
49534: PPUSH
49535: LD_VAR 0 6
49539: PUSH
49540: LD_VAR 0 4
49544: ARRAY
49545: PUSH
49546: LD_INT 2
49548: ARRAY
49549: PPUSH
49550: CALL_OW 428
49554: PUSH
49555: LD_INT 0
49557: NONEQUAL
49558: OR
49559: IFFALSE 49581
// tmp := Delete ( tmp , i ) ;
49561: LD_ADDR_VAR 0 6
49565: PUSH
49566: LD_VAR 0 6
49570: PPUSH
49571: LD_VAR 0 4
49575: PPUSH
49576: CALL_OW 3
49580: ST_TO_ADDR
49581: GO 49479
49583: POP
49584: POP
// j := GetClosestHex ( unit , tmp ) ;
49585: LD_ADDR_VAR 0 5
49589: PUSH
49590: LD_VAR 0 1
49594: PPUSH
49595: LD_VAR 0 6
49599: PPUSH
49600: CALL 48877 0 2
49604: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49605: LD_VAR 0 1
49609: PPUSH
49610: LD_VAR 0 5
49614: PUSH
49615: LD_INT 1
49617: ARRAY
49618: PPUSH
49619: LD_VAR 0 5
49623: PUSH
49624: LD_INT 2
49626: ARRAY
49627: PPUSH
49628: CALL_OW 111
// end ;
49632: LD_VAR 0 3
49636: RET
// export function PrepareApemanSoldier ( ) ; begin
49637: LD_INT 0
49639: PPUSH
// uc_nation := 0 ;
49640: LD_ADDR_OWVAR 21
49644: PUSH
49645: LD_INT 0
49647: ST_TO_ADDR
// hc_sex := sex_male ;
49648: LD_ADDR_OWVAR 27
49652: PUSH
49653: LD_INT 1
49655: ST_TO_ADDR
// hc_name :=  ;
49656: LD_ADDR_OWVAR 26
49660: PUSH
49661: LD_STRING 
49663: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49664: LD_ADDR_OWVAR 28
49668: PUSH
49669: LD_INT 15
49671: ST_TO_ADDR
// hc_gallery :=  ;
49672: LD_ADDR_OWVAR 33
49676: PUSH
49677: LD_STRING 
49679: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49680: LD_ADDR_OWVAR 31
49684: PUSH
49685: LD_INT 0
49687: PPUSH
49688: LD_INT 3
49690: PPUSH
49691: CALL_OW 12
49695: PUSH
49696: LD_INT 0
49698: PPUSH
49699: LD_INT 3
49701: PPUSH
49702: CALL_OW 12
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49719: LD_ADDR_OWVAR 29
49723: PUSH
49724: LD_INT 12
49726: PUSH
49727: LD_INT 12
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: ST_TO_ADDR
// end ;
49734: LD_VAR 0 1
49738: RET
// export function PrepareApemanEngineer ( ) ; begin
49739: LD_INT 0
49741: PPUSH
// uc_nation := 0 ;
49742: LD_ADDR_OWVAR 21
49746: PUSH
49747: LD_INT 0
49749: ST_TO_ADDR
// hc_sex := sex_male ;
49750: LD_ADDR_OWVAR 27
49754: PUSH
49755: LD_INT 1
49757: ST_TO_ADDR
// hc_name :=  ;
49758: LD_ADDR_OWVAR 26
49762: PUSH
49763: LD_STRING 
49765: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49766: LD_ADDR_OWVAR 28
49770: PUSH
49771: LD_INT 16
49773: ST_TO_ADDR
// hc_gallery :=  ;
49774: LD_ADDR_OWVAR 33
49778: PUSH
49779: LD_STRING 
49781: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49782: LD_ADDR_OWVAR 31
49786: PUSH
49787: LD_INT 0
49789: PPUSH
49790: LD_INT 3
49792: PPUSH
49793: CALL_OW 12
49797: PUSH
49798: LD_INT 0
49800: PPUSH
49801: LD_INT 3
49803: PPUSH
49804: CALL_OW 12
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49821: LD_ADDR_OWVAR 29
49825: PUSH
49826: LD_INT 12
49828: PUSH
49829: LD_INT 12
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: ST_TO_ADDR
// end ;
49836: LD_VAR 0 1
49840: RET
// export function PrepareApeman ( agressivity ) ; begin
49841: LD_INT 0
49843: PPUSH
// uc_side := 0 ;
49844: LD_ADDR_OWVAR 20
49848: PUSH
49849: LD_INT 0
49851: ST_TO_ADDR
// uc_nation := 0 ;
49852: LD_ADDR_OWVAR 21
49856: PUSH
49857: LD_INT 0
49859: ST_TO_ADDR
// hc_sex := sex_male ;
49860: LD_ADDR_OWVAR 27
49864: PUSH
49865: LD_INT 1
49867: ST_TO_ADDR
// hc_class := class_apeman ;
49868: LD_ADDR_OWVAR 28
49872: PUSH
49873: LD_INT 12
49875: ST_TO_ADDR
// hc_gallery :=  ;
49876: LD_ADDR_OWVAR 33
49880: PUSH
49881: LD_STRING 
49883: ST_TO_ADDR
// hc_name :=  ;
49884: LD_ADDR_OWVAR 26
49888: PUSH
49889: LD_STRING 
49891: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49892: LD_ADDR_OWVAR 29
49896: PUSH
49897: LD_INT 12
49899: PUSH
49900: LD_INT 12
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: ST_TO_ADDR
// if agressivity = 0 then
49907: LD_VAR 0 1
49911: PUSH
49912: LD_INT 0
49914: EQUAL
49915: IFFALSE 49927
// hc_agressivity := 0 else
49917: LD_ADDR_OWVAR 35
49921: PUSH
49922: LD_INT 0
49924: ST_TO_ADDR
49925: GO 49948
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49927: LD_ADDR_OWVAR 35
49931: PUSH
49932: LD_VAR 0 1
49936: NEG
49937: PPUSH
49938: LD_VAR 0 1
49942: PPUSH
49943: CALL_OW 12
49947: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49948: LD_ADDR_OWVAR 31
49952: PUSH
49953: LD_INT 0
49955: PPUSH
49956: LD_INT 3
49958: PPUSH
49959: CALL_OW 12
49963: PUSH
49964: LD_INT 0
49966: PPUSH
49967: LD_INT 3
49969: PPUSH
49970: CALL_OW 12
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: ST_TO_ADDR
// end ;
49987: LD_VAR 0 2
49991: RET
// export function PrepareTiger ( agressivity ) ; begin
49992: LD_INT 0
49994: PPUSH
// uc_side := 0 ;
49995: LD_ADDR_OWVAR 20
49999: PUSH
50000: LD_INT 0
50002: ST_TO_ADDR
// uc_nation := 0 ;
50003: LD_ADDR_OWVAR 21
50007: PUSH
50008: LD_INT 0
50010: ST_TO_ADDR
// InitHc ;
50011: CALL_OW 19
// hc_class := class_tiger ;
50015: LD_ADDR_OWVAR 28
50019: PUSH
50020: LD_INT 14
50022: ST_TO_ADDR
// hc_gallery :=  ;
50023: LD_ADDR_OWVAR 33
50027: PUSH
50028: LD_STRING 
50030: ST_TO_ADDR
// hc_name :=  ;
50031: LD_ADDR_OWVAR 26
50035: PUSH
50036: LD_STRING 
50038: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50039: LD_ADDR_OWVAR 35
50043: PUSH
50044: LD_VAR 0 1
50048: NEG
50049: PPUSH
50050: LD_VAR 0 1
50054: PPUSH
50055: CALL_OW 12
50059: ST_TO_ADDR
// end ;
50060: LD_VAR 0 2
50064: RET
// export function PrepareEnchidna ( ) ; begin
50065: LD_INT 0
50067: PPUSH
// uc_side := 0 ;
50068: LD_ADDR_OWVAR 20
50072: PUSH
50073: LD_INT 0
50075: ST_TO_ADDR
// uc_nation := 0 ;
50076: LD_ADDR_OWVAR 21
50080: PUSH
50081: LD_INT 0
50083: ST_TO_ADDR
// InitHc ;
50084: CALL_OW 19
// hc_class := class_baggie ;
50088: LD_ADDR_OWVAR 28
50092: PUSH
50093: LD_INT 13
50095: ST_TO_ADDR
// hc_gallery :=  ;
50096: LD_ADDR_OWVAR 33
50100: PUSH
50101: LD_STRING 
50103: ST_TO_ADDR
// hc_name :=  ;
50104: LD_ADDR_OWVAR 26
50108: PUSH
50109: LD_STRING 
50111: ST_TO_ADDR
// end ;
50112: LD_VAR 0 1
50116: RET
// export function PrepareFrog ( ) ; begin
50117: LD_INT 0
50119: PPUSH
// uc_side := 0 ;
50120: LD_ADDR_OWVAR 20
50124: PUSH
50125: LD_INT 0
50127: ST_TO_ADDR
// uc_nation := 0 ;
50128: LD_ADDR_OWVAR 21
50132: PUSH
50133: LD_INT 0
50135: ST_TO_ADDR
// InitHc ;
50136: CALL_OW 19
// hc_class := class_frog ;
50140: LD_ADDR_OWVAR 28
50144: PUSH
50145: LD_INT 19
50147: ST_TO_ADDR
// hc_gallery :=  ;
50148: LD_ADDR_OWVAR 33
50152: PUSH
50153: LD_STRING 
50155: ST_TO_ADDR
// hc_name :=  ;
50156: LD_ADDR_OWVAR 26
50160: PUSH
50161: LD_STRING 
50163: ST_TO_ADDR
// end ;
50164: LD_VAR 0 1
50168: RET
// export function PrepareFish ( ) ; begin
50169: LD_INT 0
50171: PPUSH
// uc_side := 0 ;
50172: LD_ADDR_OWVAR 20
50176: PUSH
50177: LD_INT 0
50179: ST_TO_ADDR
// uc_nation := 0 ;
50180: LD_ADDR_OWVAR 21
50184: PUSH
50185: LD_INT 0
50187: ST_TO_ADDR
// InitHc ;
50188: CALL_OW 19
// hc_class := class_fish ;
50192: LD_ADDR_OWVAR 28
50196: PUSH
50197: LD_INT 20
50199: ST_TO_ADDR
// hc_gallery :=  ;
50200: LD_ADDR_OWVAR 33
50204: PUSH
50205: LD_STRING 
50207: ST_TO_ADDR
// hc_name :=  ;
50208: LD_ADDR_OWVAR 26
50212: PUSH
50213: LD_STRING 
50215: ST_TO_ADDR
// end ;
50216: LD_VAR 0 1
50220: RET
// export function PrepareBird ( ) ; begin
50221: LD_INT 0
50223: PPUSH
// uc_side := 0 ;
50224: LD_ADDR_OWVAR 20
50228: PUSH
50229: LD_INT 0
50231: ST_TO_ADDR
// uc_nation := 0 ;
50232: LD_ADDR_OWVAR 21
50236: PUSH
50237: LD_INT 0
50239: ST_TO_ADDR
// InitHc ;
50240: CALL_OW 19
// hc_class := class_phororhacos ;
50244: LD_ADDR_OWVAR 28
50248: PUSH
50249: LD_INT 18
50251: ST_TO_ADDR
// hc_gallery :=  ;
50252: LD_ADDR_OWVAR 33
50256: PUSH
50257: LD_STRING 
50259: ST_TO_ADDR
// hc_name :=  ;
50260: LD_ADDR_OWVAR 26
50264: PUSH
50265: LD_STRING 
50267: ST_TO_ADDR
// end ;
50268: LD_VAR 0 1
50272: RET
// export function PrepareHorse ( ) ; begin
50273: LD_INT 0
50275: PPUSH
// uc_side := 0 ;
50276: LD_ADDR_OWVAR 20
50280: PUSH
50281: LD_INT 0
50283: ST_TO_ADDR
// uc_nation := 0 ;
50284: LD_ADDR_OWVAR 21
50288: PUSH
50289: LD_INT 0
50291: ST_TO_ADDR
// InitHc ;
50292: CALL_OW 19
// hc_class := class_horse ;
50296: LD_ADDR_OWVAR 28
50300: PUSH
50301: LD_INT 21
50303: ST_TO_ADDR
// hc_gallery :=  ;
50304: LD_ADDR_OWVAR 33
50308: PUSH
50309: LD_STRING 
50311: ST_TO_ADDR
// hc_name :=  ;
50312: LD_ADDR_OWVAR 26
50316: PUSH
50317: LD_STRING 
50319: ST_TO_ADDR
// end ;
50320: LD_VAR 0 1
50324: RET
// export function PrepareMastodont ( ) ; begin
50325: LD_INT 0
50327: PPUSH
// uc_side := 0 ;
50328: LD_ADDR_OWVAR 20
50332: PUSH
50333: LD_INT 0
50335: ST_TO_ADDR
// uc_nation := 0 ;
50336: LD_ADDR_OWVAR 21
50340: PUSH
50341: LD_INT 0
50343: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50344: LD_ADDR_OWVAR 37
50348: PUSH
50349: LD_INT 31
50351: ST_TO_ADDR
// vc_control := control_rider ;
50352: LD_ADDR_OWVAR 38
50356: PUSH
50357: LD_INT 4
50359: ST_TO_ADDR
// end ;
50360: LD_VAR 0 1
50364: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50365: LD_INT 0
50367: PPUSH
50368: PPUSH
50369: PPUSH
// uc_side = 0 ;
50370: LD_ADDR_OWVAR 20
50374: PUSH
50375: LD_INT 0
50377: ST_TO_ADDR
// uc_nation = 0 ;
50378: LD_ADDR_OWVAR 21
50382: PUSH
50383: LD_INT 0
50385: ST_TO_ADDR
// InitHc_All ( ) ;
50386: CALL_OW 584
// InitVc ;
50390: CALL_OW 20
// if mastodonts then
50394: LD_VAR 0 6
50398: IFFALSE 50465
// for i = 1 to mastodonts do
50400: LD_ADDR_VAR 0 11
50404: PUSH
50405: DOUBLE
50406: LD_INT 1
50408: DEC
50409: ST_TO_ADDR
50410: LD_VAR 0 6
50414: PUSH
50415: FOR_TO
50416: IFFALSE 50463
// begin vc_chassis := 31 ;
50418: LD_ADDR_OWVAR 37
50422: PUSH
50423: LD_INT 31
50425: ST_TO_ADDR
// vc_control := control_rider ;
50426: LD_ADDR_OWVAR 38
50430: PUSH
50431: LD_INT 4
50433: ST_TO_ADDR
// animal := CreateVehicle ;
50434: LD_ADDR_VAR 0 12
50438: PUSH
50439: CALL_OW 45
50443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50444: LD_VAR 0 12
50448: PPUSH
50449: LD_VAR 0 8
50453: PPUSH
50454: LD_INT 0
50456: PPUSH
50457: CALL 52607 0 3
// end ;
50461: GO 50415
50463: POP
50464: POP
// if horses then
50465: LD_VAR 0 5
50469: IFFALSE 50536
// for i = 1 to horses do
50471: LD_ADDR_VAR 0 11
50475: PUSH
50476: DOUBLE
50477: LD_INT 1
50479: DEC
50480: ST_TO_ADDR
50481: LD_VAR 0 5
50485: PUSH
50486: FOR_TO
50487: IFFALSE 50534
// begin hc_class := 21 ;
50489: LD_ADDR_OWVAR 28
50493: PUSH
50494: LD_INT 21
50496: ST_TO_ADDR
// hc_gallery :=  ;
50497: LD_ADDR_OWVAR 33
50501: PUSH
50502: LD_STRING 
50504: ST_TO_ADDR
// animal := CreateHuman ;
50505: LD_ADDR_VAR 0 12
50509: PUSH
50510: CALL_OW 44
50514: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50515: LD_VAR 0 12
50519: PPUSH
50520: LD_VAR 0 8
50524: PPUSH
50525: LD_INT 0
50527: PPUSH
50528: CALL 52607 0 3
// end ;
50532: GO 50486
50534: POP
50535: POP
// if birds then
50536: LD_VAR 0 1
50540: IFFALSE 50607
// for i = 1 to birds do
50542: LD_ADDR_VAR 0 11
50546: PUSH
50547: DOUBLE
50548: LD_INT 1
50550: DEC
50551: ST_TO_ADDR
50552: LD_VAR 0 1
50556: PUSH
50557: FOR_TO
50558: IFFALSE 50605
// begin hc_class := 18 ;
50560: LD_ADDR_OWVAR 28
50564: PUSH
50565: LD_INT 18
50567: ST_TO_ADDR
// hc_gallery =  ;
50568: LD_ADDR_OWVAR 33
50572: PUSH
50573: LD_STRING 
50575: ST_TO_ADDR
// animal := CreateHuman ;
50576: LD_ADDR_VAR 0 12
50580: PUSH
50581: CALL_OW 44
50585: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50586: LD_VAR 0 12
50590: PPUSH
50591: LD_VAR 0 8
50595: PPUSH
50596: LD_INT 0
50598: PPUSH
50599: CALL 52607 0 3
// end ;
50603: GO 50557
50605: POP
50606: POP
// if tigers then
50607: LD_VAR 0 2
50611: IFFALSE 50695
// for i = 1 to tigers do
50613: LD_ADDR_VAR 0 11
50617: PUSH
50618: DOUBLE
50619: LD_INT 1
50621: DEC
50622: ST_TO_ADDR
50623: LD_VAR 0 2
50627: PUSH
50628: FOR_TO
50629: IFFALSE 50693
// begin hc_class = class_tiger ;
50631: LD_ADDR_OWVAR 28
50635: PUSH
50636: LD_INT 14
50638: ST_TO_ADDR
// hc_gallery =  ;
50639: LD_ADDR_OWVAR 33
50643: PUSH
50644: LD_STRING 
50646: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50647: LD_ADDR_OWVAR 35
50651: PUSH
50652: LD_INT 7
50654: NEG
50655: PPUSH
50656: LD_INT 7
50658: PPUSH
50659: CALL_OW 12
50663: ST_TO_ADDR
// animal := CreateHuman ;
50664: LD_ADDR_VAR 0 12
50668: PUSH
50669: CALL_OW 44
50673: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50674: LD_VAR 0 12
50678: PPUSH
50679: LD_VAR 0 8
50683: PPUSH
50684: LD_INT 0
50686: PPUSH
50687: CALL 52607 0 3
// end ;
50691: GO 50628
50693: POP
50694: POP
// if apemans then
50695: LD_VAR 0 3
50699: IFFALSE 50822
// for i = 1 to apemans do
50701: LD_ADDR_VAR 0 11
50705: PUSH
50706: DOUBLE
50707: LD_INT 1
50709: DEC
50710: ST_TO_ADDR
50711: LD_VAR 0 3
50715: PUSH
50716: FOR_TO
50717: IFFALSE 50820
// begin hc_class = class_apeman ;
50719: LD_ADDR_OWVAR 28
50723: PUSH
50724: LD_INT 12
50726: ST_TO_ADDR
// hc_gallery =  ;
50727: LD_ADDR_OWVAR 33
50731: PUSH
50732: LD_STRING 
50734: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50735: LD_ADDR_OWVAR 35
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PPUSH
50744: LD_INT 2
50746: PPUSH
50747: CALL_OW 12
50751: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50752: LD_ADDR_OWVAR 31
50756: PUSH
50757: LD_INT 1
50759: PPUSH
50760: LD_INT 3
50762: PPUSH
50763: CALL_OW 12
50767: PUSH
50768: LD_INT 1
50770: PPUSH
50771: LD_INT 3
50773: PPUSH
50774: CALL_OW 12
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: ST_TO_ADDR
// animal := CreateHuman ;
50791: LD_ADDR_VAR 0 12
50795: PUSH
50796: CALL_OW 44
50800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50801: LD_VAR 0 12
50805: PPUSH
50806: LD_VAR 0 8
50810: PPUSH
50811: LD_INT 0
50813: PPUSH
50814: CALL 52607 0 3
// end ;
50818: GO 50716
50820: POP
50821: POP
// if enchidnas then
50822: LD_VAR 0 4
50826: IFFALSE 50893
// for i = 1 to enchidnas do
50828: LD_ADDR_VAR 0 11
50832: PUSH
50833: DOUBLE
50834: LD_INT 1
50836: DEC
50837: ST_TO_ADDR
50838: LD_VAR 0 4
50842: PUSH
50843: FOR_TO
50844: IFFALSE 50891
// begin hc_class = 13 ;
50846: LD_ADDR_OWVAR 28
50850: PUSH
50851: LD_INT 13
50853: ST_TO_ADDR
// hc_gallery =  ;
50854: LD_ADDR_OWVAR 33
50858: PUSH
50859: LD_STRING 
50861: ST_TO_ADDR
// animal := CreateHuman ;
50862: LD_ADDR_VAR 0 12
50866: PUSH
50867: CALL_OW 44
50871: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50872: LD_VAR 0 12
50876: PPUSH
50877: LD_VAR 0 8
50881: PPUSH
50882: LD_INT 0
50884: PPUSH
50885: CALL 52607 0 3
// end ;
50889: GO 50843
50891: POP
50892: POP
// if fishes then
50893: LD_VAR 0 7
50897: IFFALSE 50964
// for i = 1 to fishes do
50899: LD_ADDR_VAR 0 11
50903: PUSH
50904: DOUBLE
50905: LD_INT 1
50907: DEC
50908: ST_TO_ADDR
50909: LD_VAR 0 7
50913: PUSH
50914: FOR_TO
50915: IFFALSE 50962
// begin hc_class = 20 ;
50917: LD_ADDR_OWVAR 28
50921: PUSH
50922: LD_INT 20
50924: ST_TO_ADDR
// hc_gallery =  ;
50925: LD_ADDR_OWVAR 33
50929: PUSH
50930: LD_STRING 
50932: ST_TO_ADDR
// animal := CreateHuman ;
50933: LD_ADDR_VAR 0 12
50937: PUSH
50938: CALL_OW 44
50942: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50943: LD_VAR 0 12
50947: PPUSH
50948: LD_VAR 0 9
50952: PPUSH
50953: LD_INT 0
50955: PPUSH
50956: CALL 52607 0 3
// end ;
50960: GO 50914
50962: POP
50963: POP
// end ;
50964: LD_VAR 0 10
50968: RET
// export function WantHeal ( sci , unit ) ; begin
50969: LD_INT 0
50971: PPUSH
// if GetTaskList ( sci ) > 0 then
50972: LD_VAR 0 1
50976: PPUSH
50977: CALL_OW 437
50981: PUSH
50982: LD_INT 0
50984: GREATER
50985: IFFALSE 51057
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50987: LD_VAR 0 1
50991: PPUSH
50992: CALL_OW 437
50996: PUSH
50997: LD_INT 1
50999: ARRAY
51000: PUSH
51001: LD_INT 1
51003: ARRAY
51004: PUSH
51005: LD_STRING l
51007: EQUAL
51008: IFFALSE 51035
51010: PUSH
51011: LD_VAR 0 1
51015: PPUSH
51016: CALL_OW 437
51020: PUSH
51021: LD_INT 1
51023: ARRAY
51024: PUSH
51025: LD_INT 4
51027: ARRAY
51028: PUSH
51029: LD_VAR 0 2
51033: EQUAL
51034: AND
51035: IFFALSE 51047
// result := true else
51037: LD_ADDR_VAR 0 3
51041: PUSH
51042: LD_INT 1
51044: ST_TO_ADDR
51045: GO 51055
// result := false ;
51047: LD_ADDR_VAR 0 3
51051: PUSH
51052: LD_INT 0
51054: ST_TO_ADDR
// end else
51055: GO 51065
// result := false ;
51057: LD_ADDR_VAR 0 3
51061: PUSH
51062: LD_INT 0
51064: ST_TO_ADDR
// end ;
51065: LD_VAR 0 3
51069: RET
// export function HealTarget ( sci ) ; begin
51070: LD_INT 0
51072: PPUSH
// if not sci then
51073: LD_VAR 0 1
51077: NOT
51078: IFFALSE 51082
// exit ;
51080: GO 51147
// result := 0 ;
51082: LD_ADDR_VAR 0 2
51086: PUSH
51087: LD_INT 0
51089: ST_TO_ADDR
// if GetTaskList ( sci ) then
51090: LD_VAR 0 1
51094: PPUSH
51095: CALL_OW 437
51099: IFFALSE 51147
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51101: LD_VAR 0 1
51105: PPUSH
51106: CALL_OW 437
51110: PUSH
51111: LD_INT 1
51113: ARRAY
51114: PUSH
51115: LD_INT 1
51117: ARRAY
51118: PUSH
51119: LD_STRING l
51121: EQUAL
51122: IFFALSE 51147
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51124: LD_ADDR_VAR 0 2
51128: PUSH
51129: LD_VAR 0 1
51133: PPUSH
51134: CALL_OW 437
51138: PUSH
51139: LD_INT 1
51141: ARRAY
51142: PUSH
51143: LD_INT 4
51145: ARRAY
51146: ST_TO_ADDR
// end ;
51147: LD_VAR 0 2
51151: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51152: LD_INT 0
51154: PPUSH
51155: PPUSH
51156: PPUSH
51157: PPUSH
// if not base_units then
51158: LD_VAR 0 1
51162: NOT
51163: IFFALSE 51167
// exit ;
51165: GO 51254
// result := false ;
51167: LD_ADDR_VAR 0 2
51171: PUSH
51172: LD_INT 0
51174: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51175: LD_ADDR_VAR 0 5
51179: PUSH
51180: LD_VAR 0 1
51184: PPUSH
51185: LD_INT 21
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PPUSH
51195: CALL_OW 72
51199: ST_TO_ADDR
// if not tmp then
51200: LD_VAR 0 5
51204: NOT
51205: IFFALSE 51209
// exit ;
51207: GO 51254
// for i in tmp do
51209: LD_ADDR_VAR 0 3
51213: PUSH
51214: LD_VAR 0 5
51218: PUSH
51219: FOR_IN
51220: IFFALSE 51252
// begin result := EnemyInRange ( i , 22 ) ;
51222: LD_ADDR_VAR 0 2
51226: PUSH
51227: LD_VAR 0 3
51231: PPUSH
51232: LD_INT 22
51234: PPUSH
51235: CALL 48679 0 2
51239: ST_TO_ADDR
// if result then
51240: LD_VAR 0 2
51244: IFFALSE 51250
// exit ;
51246: POP
51247: POP
51248: GO 51254
// end ;
51250: GO 51219
51252: POP
51253: POP
// end ;
51254: LD_VAR 0 2
51258: RET
// export function FilterByTag ( units , tag ) ; begin
51259: LD_INT 0
51261: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51262: LD_ADDR_VAR 0 3
51266: PUSH
51267: LD_VAR 0 1
51271: PPUSH
51272: LD_INT 120
51274: PUSH
51275: LD_VAR 0 2
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PPUSH
51284: CALL_OW 72
51288: ST_TO_ADDR
// end ;
51289: LD_VAR 0 3
51293: RET
// export function IsDriver ( un ) ; begin
51294: LD_INT 0
51296: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51297: LD_ADDR_VAR 0 2
51301: PUSH
51302: LD_VAR 0 1
51306: PUSH
51307: LD_INT 55
51309: PUSH
51310: EMPTY
51311: LIST
51312: PPUSH
51313: CALL_OW 69
51317: IN
51318: ST_TO_ADDR
// end ;
51319: LD_VAR 0 2
51323: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51324: LD_INT 0
51326: PPUSH
51327: PPUSH
// list := [ ] ;
51328: LD_ADDR_VAR 0 5
51332: PUSH
51333: EMPTY
51334: ST_TO_ADDR
// case d of 0 :
51335: LD_VAR 0 3
51339: PUSH
51340: LD_INT 0
51342: DOUBLE
51343: EQUAL
51344: IFTRUE 51348
51346: GO 51481
51348: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51349: LD_ADDR_VAR 0 5
51353: PUSH
51354: LD_VAR 0 1
51358: PUSH
51359: LD_INT 4
51361: MINUS
51362: PUSH
51363: LD_VAR 0 2
51367: PUSH
51368: LD_INT 4
51370: MINUS
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: LIST
51379: PUSH
51380: LD_VAR 0 1
51384: PUSH
51385: LD_INT 3
51387: MINUS
51388: PUSH
51389: LD_VAR 0 2
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: LIST
51401: PUSH
51402: LD_VAR 0 1
51406: PUSH
51407: LD_INT 4
51409: PLUS
51410: PUSH
51411: LD_VAR 0 2
51415: PUSH
51416: LD_INT 4
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: LIST
51423: PUSH
51424: LD_VAR 0 1
51428: PUSH
51429: LD_INT 3
51431: PLUS
51432: PUSH
51433: LD_VAR 0 2
51437: PUSH
51438: LD_INT 3
51440: PLUS
51441: PUSH
51442: LD_INT 5
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: PUSH
51450: LD_VAR 0 1
51454: PUSH
51455: LD_VAR 0 2
51459: PUSH
51460: LD_INT 4
51462: PLUS
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: LIST
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: ST_TO_ADDR
// end ; 1 :
51479: GO 52179
51481: LD_INT 1
51483: DOUBLE
51484: EQUAL
51485: IFTRUE 51489
51487: GO 51622
51489: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51490: LD_ADDR_VAR 0 5
51494: PUSH
51495: LD_VAR 0 1
51499: PUSH
51500: LD_VAR 0 2
51504: PUSH
51505: LD_INT 4
51507: MINUS
51508: PUSH
51509: LD_INT 3
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: LIST
51516: PUSH
51517: LD_VAR 0 1
51521: PUSH
51522: LD_INT 3
51524: MINUS
51525: PUSH
51526: LD_VAR 0 2
51530: PUSH
51531: LD_INT 3
51533: MINUS
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: LIST
51542: PUSH
51543: LD_VAR 0 1
51547: PUSH
51548: LD_INT 4
51550: MINUS
51551: PUSH
51552: LD_VAR 0 2
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: PUSH
51565: LD_VAR 0 1
51569: PUSH
51570: LD_VAR 0 2
51574: PUSH
51575: LD_INT 3
51577: PLUS
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: LIST
51586: PUSH
51587: LD_VAR 0 1
51591: PUSH
51592: LD_INT 4
51594: PLUS
51595: PUSH
51596: LD_VAR 0 2
51600: PUSH
51601: LD_INT 4
51603: PLUS
51604: PUSH
51605: LD_INT 5
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: ST_TO_ADDR
// end ; 2 :
51620: GO 52179
51622: LD_INT 2
51624: DOUBLE
51625: EQUAL
51626: IFTRUE 51630
51628: GO 51759
51630: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51631: LD_ADDR_VAR 0 5
51635: PUSH
51636: LD_VAR 0 1
51640: PUSH
51641: LD_VAR 0 2
51645: PUSH
51646: LD_INT 3
51648: MINUS
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: LIST
51657: PUSH
51658: LD_VAR 0 1
51662: PUSH
51663: LD_INT 4
51665: PLUS
51666: PUSH
51667: LD_VAR 0 2
51671: PUSH
51672: LD_INT 4
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: LIST
51679: PUSH
51680: LD_VAR 0 1
51684: PUSH
51685: LD_VAR 0 2
51689: PUSH
51690: LD_INT 4
51692: PLUS
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: PUSH
51702: LD_VAR 0 1
51706: PUSH
51707: LD_INT 3
51709: MINUS
51710: PUSH
51711: LD_VAR 0 2
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: LIST
51723: PUSH
51724: LD_VAR 0 1
51728: PUSH
51729: LD_INT 4
51731: MINUS
51732: PUSH
51733: LD_VAR 0 2
51737: PUSH
51738: LD_INT 4
51740: MINUS
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: LIST
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: ST_TO_ADDR
// end ; 3 :
51757: GO 52179
51759: LD_INT 3
51761: DOUBLE
51762: EQUAL
51763: IFTRUE 51767
51765: GO 51900
51767: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51768: LD_ADDR_VAR 0 5
51772: PUSH
51773: LD_VAR 0 1
51777: PUSH
51778: LD_INT 3
51780: PLUS
51781: PUSH
51782: LD_VAR 0 2
51786: PUSH
51787: LD_INT 4
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: LIST
51794: PUSH
51795: LD_VAR 0 1
51799: PUSH
51800: LD_INT 4
51802: PLUS
51803: PUSH
51804: LD_VAR 0 2
51808: PUSH
51809: LD_INT 4
51811: PLUS
51812: PUSH
51813: LD_INT 5
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: PUSH
51821: LD_VAR 0 1
51825: PUSH
51826: LD_INT 4
51828: MINUS
51829: PUSH
51830: LD_VAR 0 2
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: PUSH
51843: LD_VAR 0 1
51847: PUSH
51848: LD_VAR 0 2
51852: PUSH
51853: LD_INT 4
51855: MINUS
51856: PUSH
51857: LD_INT 3
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: PUSH
51865: LD_VAR 0 1
51869: PUSH
51870: LD_INT 3
51872: MINUS
51873: PUSH
51874: LD_VAR 0 2
51878: PUSH
51879: LD_INT 3
51881: MINUS
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: ST_TO_ADDR
// end ; 4 :
51898: GO 52179
51900: LD_INT 4
51902: DOUBLE
51903: EQUAL
51904: IFTRUE 51908
51906: GO 52041
51908: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51909: LD_ADDR_VAR 0 5
51913: PUSH
51914: LD_VAR 0 1
51918: PUSH
51919: LD_VAR 0 2
51923: PUSH
51924: LD_INT 4
51926: PLUS
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: PUSH
51936: LD_VAR 0 1
51940: PUSH
51941: LD_INT 3
51943: PLUS
51944: PUSH
51945: LD_VAR 0 2
51949: PUSH
51950: LD_INT 3
51952: PLUS
51953: PUSH
51954: LD_INT 5
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: PUSH
51962: LD_VAR 0 1
51966: PUSH
51967: LD_INT 4
51969: PLUS
51970: PUSH
51971: LD_VAR 0 2
51975: PUSH
51976: LD_INT 4
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: LIST
51983: PUSH
51984: LD_VAR 0 1
51988: PUSH
51989: LD_VAR 0 2
51993: PUSH
51994: LD_INT 3
51996: MINUS
51997: PUSH
51998: LD_INT 3
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: PUSH
52006: LD_VAR 0 1
52010: PUSH
52011: LD_INT 4
52013: MINUS
52014: PUSH
52015: LD_VAR 0 2
52019: PUSH
52020: LD_INT 4
52022: MINUS
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: LIST
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: ST_TO_ADDR
// end ; 5 :
52039: GO 52179
52041: LD_INT 5
52043: DOUBLE
52044: EQUAL
52045: IFTRUE 52049
52047: GO 52178
52049: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52050: LD_ADDR_VAR 0 5
52054: PUSH
52055: LD_VAR 0 1
52059: PUSH
52060: LD_INT 4
52062: MINUS
52063: PUSH
52064: LD_VAR 0 2
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: LIST
52076: PUSH
52077: LD_VAR 0 1
52081: PUSH
52082: LD_VAR 0 2
52086: PUSH
52087: LD_INT 4
52089: MINUS
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: PUSH
52099: LD_VAR 0 1
52103: PUSH
52104: LD_INT 4
52106: PLUS
52107: PUSH
52108: LD_VAR 0 2
52112: PUSH
52113: LD_INT 4
52115: PLUS
52116: PUSH
52117: LD_INT 5
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: PUSH
52125: LD_VAR 0 1
52129: PUSH
52130: LD_INT 3
52132: PLUS
52133: PUSH
52134: LD_VAR 0 2
52138: PUSH
52139: LD_INT 4
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: LIST
52146: PUSH
52147: LD_VAR 0 1
52151: PUSH
52152: LD_VAR 0 2
52156: PUSH
52157: LD_INT 3
52159: PLUS
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: LIST
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: ST_TO_ADDR
// end ; end ;
52176: GO 52179
52178: POP
// result := list ;
52179: LD_ADDR_VAR 0 4
52183: PUSH
52184: LD_VAR 0 5
52188: ST_TO_ADDR
// end ;
52189: LD_VAR 0 4
52193: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52194: LD_INT 0
52196: PPUSH
52197: PPUSH
52198: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52199: LD_VAR 0 1
52203: NOT
52204: IFTRUE 52232
52206: PUSH
52207: LD_VAR 0 2
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: LD_INT 3
52220: PUSH
52221: LD_INT 4
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: IN
52230: NOT
52231: OR
52232: IFFALSE 52236
// exit ;
52234: GO 52319
// tmp := [ ] ;
52236: LD_ADDR_VAR 0 5
52240: PUSH
52241: EMPTY
52242: ST_TO_ADDR
// for i in units do
52243: LD_ADDR_VAR 0 4
52247: PUSH
52248: LD_VAR 0 1
52252: PUSH
52253: FOR_IN
52254: IFFALSE 52288
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52256: LD_ADDR_VAR 0 5
52260: PUSH
52261: LD_VAR 0 5
52265: PPUSH
52266: LD_VAR 0 4
52270: PPUSH
52271: LD_VAR 0 2
52275: PPUSH
52276: CALL_OW 259
52280: PPUSH
52281: CALL 53714 0 2
52285: ST_TO_ADDR
52286: GO 52253
52288: POP
52289: POP
// if not tmp then
52290: LD_VAR 0 5
52294: NOT
52295: IFFALSE 52299
// exit ;
52297: GO 52319
// result := SortListByListDesc ( units , tmp ) ;
52299: LD_ADDR_VAR 0 3
52303: PUSH
52304: LD_VAR 0 1
52308: PPUSH
52309: LD_VAR 0 5
52313: PPUSH
52314: CALL_OW 77
52318: ST_TO_ADDR
// end ;
52319: LD_VAR 0 3
52323: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52324: LD_INT 0
52326: PPUSH
52327: PPUSH
52328: PPUSH
// result := false ;
52329: LD_ADDR_VAR 0 3
52333: PUSH
52334: LD_INT 0
52336: ST_TO_ADDR
// if not building then
52337: LD_VAR 0 2
52341: NOT
52342: IFFALSE 52346
// exit ;
52344: GO 52490
// x := GetX ( building ) ;
52346: LD_ADDR_VAR 0 4
52350: PUSH
52351: LD_VAR 0 2
52355: PPUSH
52356: CALL_OW 250
52360: ST_TO_ADDR
// y := GetY ( building ) ;
52361: LD_ADDR_VAR 0 5
52365: PUSH
52366: LD_VAR 0 2
52370: PPUSH
52371: CALL_OW 251
52375: ST_TO_ADDR
// if not x or not y then
52376: LD_VAR 0 4
52380: NOT
52381: IFTRUE 52390
52383: PUSH
52384: LD_VAR 0 5
52388: NOT
52389: OR
52390: IFFALSE 52394
// exit ;
52392: GO 52490
// if GetTaskList ( unit ) then
52394: LD_VAR 0 1
52398: PPUSH
52399: CALL_OW 437
52403: IFFALSE 52490
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52405: LD_STRING e
52407: PUSH
52408: LD_VAR 0 1
52412: PPUSH
52413: CALL_OW 437
52417: PUSH
52418: LD_INT 1
52420: ARRAY
52421: PUSH
52422: LD_INT 1
52424: ARRAY
52425: EQUAL
52426: IFFALSE 52453
52428: PUSH
52429: LD_VAR 0 4
52433: PUSH
52434: LD_VAR 0 1
52438: PPUSH
52439: CALL_OW 437
52443: PUSH
52444: LD_INT 1
52446: ARRAY
52447: PUSH
52448: LD_INT 2
52450: ARRAY
52451: EQUAL
52452: AND
52453: IFFALSE 52480
52455: PUSH
52456: LD_VAR 0 5
52460: PUSH
52461: LD_VAR 0 1
52465: PPUSH
52466: CALL_OW 437
52470: PUSH
52471: LD_INT 1
52473: ARRAY
52474: PUSH
52475: LD_INT 3
52477: ARRAY
52478: EQUAL
52479: AND
52480: IFFALSE 52490
// result := true end ;
52482: LD_ADDR_VAR 0 3
52486: PUSH
52487: LD_INT 1
52489: ST_TO_ADDR
// end ;
52490: LD_VAR 0 3
52494: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52495: LD_INT 0
52497: PPUSH
// result := false ;
52498: LD_ADDR_VAR 0 4
52502: PUSH
52503: LD_INT 0
52505: ST_TO_ADDR
// if GetTaskList ( unit ) then
52506: LD_VAR 0 1
52510: PPUSH
52511: CALL_OW 437
52515: IFFALSE 52602
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52517: LD_STRING M
52519: PUSH
52520: LD_VAR 0 1
52524: PPUSH
52525: CALL_OW 437
52529: PUSH
52530: LD_INT 1
52532: ARRAY
52533: PUSH
52534: LD_INT 1
52536: ARRAY
52537: EQUAL
52538: IFFALSE 52565
52540: PUSH
52541: LD_VAR 0 2
52545: PUSH
52546: LD_VAR 0 1
52550: PPUSH
52551: CALL_OW 437
52555: PUSH
52556: LD_INT 1
52558: ARRAY
52559: PUSH
52560: LD_INT 2
52562: ARRAY
52563: EQUAL
52564: AND
52565: IFFALSE 52592
52567: PUSH
52568: LD_VAR 0 3
52572: PUSH
52573: LD_VAR 0 1
52577: PPUSH
52578: CALL_OW 437
52582: PUSH
52583: LD_INT 1
52585: ARRAY
52586: PUSH
52587: LD_INT 3
52589: ARRAY
52590: EQUAL
52591: AND
52592: IFFALSE 52602
// result := true ;
52594: LD_ADDR_VAR 0 4
52598: PUSH
52599: LD_INT 1
52601: ST_TO_ADDR
// end ; end ;
52602: LD_VAR 0 4
52606: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52607: LD_INT 0
52609: PPUSH
52610: PPUSH
52611: PPUSH
52612: PPUSH
// if not unit or not area then
52613: LD_VAR 0 1
52617: NOT
52618: IFTRUE 52627
52620: PUSH
52621: LD_VAR 0 2
52625: NOT
52626: OR
52627: IFFALSE 52631
// exit ;
52629: GO 52807
// tmp := AreaToList ( area , i ) ;
52631: LD_ADDR_VAR 0 6
52635: PUSH
52636: LD_VAR 0 2
52640: PPUSH
52641: LD_VAR 0 5
52645: PPUSH
52646: CALL_OW 517
52650: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52651: LD_ADDR_VAR 0 5
52655: PUSH
52656: DOUBLE
52657: LD_INT 1
52659: DEC
52660: ST_TO_ADDR
52661: LD_VAR 0 6
52665: PUSH
52666: LD_INT 1
52668: ARRAY
52669: PUSH
52670: FOR_TO
52671: IFFALSE 52805
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52673: LD_ADDR_VAR 0 7
52677: PUSH
52678: LD_VAR 0 6
52682: PUSH
52683: LD_INT 1
52685: ARRAY
52686: PUSH
52687: LD_VAR 0 5
52691: ARRAY
52692: PUSH
52693: LD_VAR 0 6
52697: PUSH
52698: LD_INT 2
52700: ARRAY
52701: PUSH
52702: LD_VAR 0 5
52706: ARRAY
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52712: LD_INT 92
52714: PUSH
52715: LD_VAR 0 7
52719: PUSH
52720: LD_INT 1
52722: ARRAY
52723: PUSH
52724: LD_VAR 0 7
52728: PUSH
52729: LD_INT 2
52731: ARRAY
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: PPUSH
52742: CALL_OW 69
52746: PUSH
52747: LD_INT 0
52749: EQUAL
52750: IFFALSE 52803
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52752: LD_VAR 0 1
52756: PPUSH
52757: LD_VAR 0 7
52761: PUSH
52762: LD_INT 1
52764: ARRAY
52765: PPUSH
52766: LD_VAR 0 7
52770: PUSH
52771: LD_INT 2
52773: ARRAY
52774: PPUSH
52775: LD_VAR 0 3
52779: PPUSH
52780: CALL_OW 48
// result := IsPlaced ( unit ) ;
52784: LD_ADDR_VAR 0 4
52788: PUSH
52789: LD_VAR 0 1
52793: PPUSH
52794: CALL_OW 305
52798: ST_TO_ADDR
// exit ;
52799: POP
52800: POP
52801: GO 52807
// end ; end ;
52803: GO 52670
52805: POP
52806: POP
// end ;
52807: LD_VAR 0 4
52811: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52812: LD_INT 0
52814: PPUSH
52815: PPUSH
52816: PPUSH
// if not side or side > 8 then
52817: LD_VAR 0 1
52821: NOT
52822: IFTRUE 52834
52824: PUSH
52825: LD_VAR 0 1
52829: PUSH
52830: LD_INT 8
52832: GREATER
52833: OR
52834: IFFALSE 52838
// exit ;
52836: GO 53025
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52838: LD_ADDR_VAR 0 4
52842: PUSH
52843: LD_INT 22
52845: PUSH
52846: LD_VAR 0 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 21
52857: PUSH
52858: LD_INT 3
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PPUSH
52869: CALL_OW 69
52873: ST_TO_ADDR
// if not tmp then
52874: LD_VAR 0 4
52878: NOT
52879: IFFALSE 52883
// exit ;
52881: GO 53025
// enable_addtolog := true ;
52883: LD_ADDR_OWVAR 81
52887: PUSH
52888: LD_INT 1
52890: ST_TO_ADDR
// AddToLog ( [ ) ;
52891: LD_STRING [
52893: PPUSH
52894: CALL_OW 561
// for i in tmp do
52898: LD_ADDR_VAR 0 3
52902: PUSH
52903: LD_VAR 0 4
52907: PUSH
52908: FOR_IN
52909: IFFALSE 53016
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52911: LD_STRING [
52913: PUSH
52914: LD_VAR 0 3
52918: PPUSH
52919: CALL_OW 266
52923: STR
52924: PUSH
52925: LD_STRING , 
52927: STR
52928: PUSH
52929: LD_VAR 0 3
52933: PPUSH
52934: CALL_OW 250
52938: STR
52939: PUSH
52940: LD_STRING , 
52942: STR
52943: PUSH
52944: LD_VAR 0 3
52948: PPUSH
52949: CALL_OW 251
52953: STR
52954: PUSH
52955: LD_STRING , 
52957: STR
52958: PUSH
52959: LD_VAR 0 3
52963: PPUSH
52964: CALL_OW 254
52968: STR
52969: PUSH
52970: LD_STRING , 
52972: STR
52973: PUSH
52974: LD_VAR 0 3
52978: PPUSH
52979: LD_INT 1
52981: PPUSH
52982: CALL_OW 268
52986: STR
52987: PUSH
52988: LD_STRING , 
52990: STR
52991: PUSH
52992: LD_VAR 0 3
52996: PPUSH
52997: LD_INT 2
52999: PPUSH
53000: CALL_OW 268
53004: STR
53005: PUSH
53006: LD_STRING ],
53008: STR
53009: PPUSH
53010: CALL_OW 561
// end ;
53014: GO 52908
53016: POP
53017: POP
// AddToLog ( ]; ) ;
53018: LD_STRING ];
53020: PPUSH
53021: CALL_OW 561
// end ;
53025: LD_VAR 0 2
53029: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53030: LD_INT 0
53032: PPUSH
53033: PPUSH
53034: PPUSH
53035: PPUSH
53036: PPUSH
// if not area or not rate or not max then
53037: LD_VAR 0 1
53041: NOT
53042: IFTRUE 53051
53044: PUSH
53045: LD_VAR 0 2
53049: NOT
53050: OR
53051: IFTRUE 53060
53053: PUSH
53054: LD_VAR 0 4
53058: NOT
53059: OR
53060: IFFALSE 53064
// exit ;
53062: GO 53253
// while 1 do
53064: LD_INT 1
53066: IFFALSE 53253
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53068: LD_ADDR_VAR 0 9
53072: PUSH
53073: LD_VAR 0 1
53077: PPUSH
53078: LD_INT 1
53080: PPUSH
53081: CALL_OW 287
53085: PUSH
53086: LD_INT 10
53088: MUL
53089: ST_TO_ADDR
// r := rate / 10 ;
53090: LD_ADDR_VAR 0 7
53094: PUSH
53095: LD_VAR 0 2
53099: PUSH
53100: LD_INT 10
53102: DIVREAL
53103: ST_TO_ADDR
// time := 1 1$00 ;
53104: LD_ADDR_VAR 0 8
53108: PUSH
53109: LD_INT 2100
53111: ST_TO_ADDR
// if amount < min then
53112: LD_VAR 0 9
53116: PUSH
53117: LD_VAR 0 3
53121: LESS
53122: IFFALSE 53140
// r := r * 2 else
53124: LD_ADDR_VAR 0 7
53128: PUSH
53129: LD_VAR 0 7
53133: PUSH
53134: LD_INT 2
53136: MUL
53137: ST_TO_ADDR
53138: GO 53166
// if amount > max then
53140: LD_VAR 0 9
53144: PUSH
53145: LD_VAR 0 4
53149: GREATER
53150: IFFALSE 53166
// r := r / 2 ;
53152: LD_ADDR_VAR 0 7
53156: PUSH
53157: LD_VAR 0 7
53161: PUSH
53162: LD_INT 2
53164: DIVREAL
53165: ST_TO_ADDR
// time := time / r ;
53166: LD_ADDR_VAR 0 8
53170: PUSH
53171: LD_VAR 0 8
53175: PUSH
53176: LD_VAR 0 7
53180: DIVREAL
53181: ST_TO_ADDR
// if time < 0 then
53182: LD_VAR 0 8
53186: PUSH
53187: LD_INT 0
53189: LESS
53190: IFFALSE 53207
// time := time * - 1 ;
53192: LD_ADDR_VAR 0 8
53196: PUSH
53197: LD_VAR 0 8
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: MUL
53206: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53207: LD_VAR 0 8
53211: PUSH
53212: LD_INT 35
53214: PPUSH
53215: LD_INT 875
53217: PPUSH
53218: CALL_OW 12
53222: PLUS
53223: PPUSH
53224: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53228: LD_INT 1
53230: PPUSH
53231: LD_INT 5
53233: PPUSH
53234: CALL_OW 12
53238: PPUSH
53239: LD_VAR 0 1
53243: PPUSH
53244: LD_INT 1
53246: PPUSH
53247: CALL_OW 55
// end ;
53251: GO 53064
// end ;
53253: LD_VAR 0 5
53257: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53258: LD_INT 0
53260: PPUSH
53261: PPUSH
53262: PPUSH
53263: PPUSH
53264: PPUSH
53265: PPUSH
53266: PPUSH
53267: PPUSH
// if not turrets or not factories then
53268: LD_VAR 0 1
53272: NOT
53273: IFTRUE 53282
53275: PUSH
53276: LD_VAR 0 2
53280: NOT
53281: OR
53282: IFFALSE 53286
// exit ;
53284: GO 53593
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53286: LD_ADDR_VAR 0 10
53290: PUSH
53291: LD_INT 5
53293: PUSH
53294: LD_INT 6
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 4
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: LD_INT 5
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 24
53328: PUSH
53329: LD_INT 25
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 23
53338: PUSH
53339: LD_INT 27
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 42
53352: PUSH
53353: LD_INT 43
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 44
53362: PUSH
53363: LD_INT 46
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 45
53372: PUSH
53373: LD_INT 47
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: LIST
53389: ST_TO_ADDR
// result := [ ] ;
53390: LD_ADDR_VAR 0 3
53394: PUSH
53395: EMPTY
53396: ST_TO_ADDR
// for i in turrets do
53397: LD_ADDR_VAR 0 4
53401: PUSH
53402: LD_VAR 0 1
53406: PUSH
53407: FOR_IN
53408: IFFALSE 53591
// begin nat := GetNation ( i ) ;
53410: LD_ADDR_VAR 0 7
53414: PUSH
53415: LD_VAR 0 4
53419: PPUSH
53420: CALL_OW 248
53424: ST_TO_ADDR
// weapon := 0 ;
53425: LD_ADDR_VAR 0 8
53429: PUSH
53430: LD_INT 0
53432: ST_TO_ADDR
// if not nat then
53433: LD_VAR 0 7
53437: NOT
53438: IFFALSE 53442
// continue ;
53440: GO 53407
// for j in list [ nat ] do
53442: LD_ADDR_VAR 0 5
53446: PUSH
53447: LD_VAR 0 10
53451: PUSH
53452: LD_VAR 0 7
53456: ARRAY
53457: PUSH
53458: FOR_IN
53459: IFFALSE 53500
// if GetBWeapon ( i ) = j [ 1 ] then
53461: LD_VAR 0 4
53465: PPUSH
53466: CALL_OW 269
53470: PUSH
53471: LD_VAR 0 5
53475: PUSH
53476: LD_INT 1
53478: ARRAY
53479: EQUAL
53480: IFFALSE 53498
// begin weapon := j [ 2 ] ;
53482: LD_ADDR_VAR 0 8
53486: PUSH
53487: LD_VAR 0 5
53491: PUSH
53492: LD_INT 2
53494: ARRAY
53495: ST_TO_ADDR
// break ;
53496: GO 53500
// end ;
53498: GO 53458
53500: POP
53501: POP
// if not weapon then
53502: LD_VAR 0 8
53506: NOT
53507: IFFALSE 53511
// continue ;
53509: GO 53407
// for k in factories do
53511: LD_ADDR_VAR 0 6
53515: PUSH
53516: LD_VAR 0 2
53520: PUSH
53521: FOR_IN
53522: IFFALSE 53587
// begin weapons := AvailableWeaponList ( k ) ;
53524: LD_ADDR_VAR 0 9
53528: PUSH
53529: LD_VAR 0 6
53533: PPUSH
53534: CALL_OW 478
53538: ST_TO_ADDR
// if not weapons then
53539: LD_VAR 0 9
53543: NOT
53544: IFFALSE 53548
// continue ;
53546: GO 53521
// if weapon in weapons then
53548: LD_VAR 0 8
53552: PUSH
53553: LD_VAR 0 9
53557: IN
53558: IFFALSE 53585
// begin result := [ i , weapon ] ;
53560: LD_ADDR_VAR 0 3
53564: PUSH
53565: LD_VAR 0 4
53569: PUSH
53570: LD_VAR 0 8
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: ST_TO_ADDR
// exit ;
53579: POP
53580: POP
53581: POP
53582: POP
53583: GO 53593
// end ; end ;
53585: GO 53521
53587: POP
53588: POP
// end ;
53589: GO 53407
53591: POP
53592: POP
// end ;
53593: LD_VAR 0 3
53597: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53598: LD_INT 0
53600: PPUSH
// if not side or side > 8 then
53601: LD_VAR 0 3
53605: NOT
53606: IFTRUE 53618
53608: PUSH
53609: LD_VAR 0 3
53613: PUSH
53614: LD_INT 8
53616: GREATER
53617: OR
53618: IFFALSE 53622
// exit ;
53620: GO 53681
// if not range then
53622: LD_VAR 0 4
53626: NOT
53627: IFFALSE 53638
// range := - 12 ;
53629: LD_ADDR_VAR 0 4
53633: PUSH
53634: LD_INT 12
53636: NEG
53637: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53638: LD_VAR 0 1
53642: PPUSH
53643: LD_VAR 0 2
53647: PPUSH
53648: LD_VAR 0 3
53652: PPUSH
53653: LD_VAR 0 4
53657: PPUSH
53658: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53662: LD_VAR 0 1
53666: PPUSH
53667: LD_VAR 0 2
53671: PPUSH
53672: LD_VAR 0 3
53676: PPUSH
53677: CALL_OW 331
// end ;
53681: LD_VAR 0 5
53685: RET
// export function Video ( mode ) ; begin
53686: LD_INT 0
53688: PPUSH
// ingame_video = mode ;
53689: LD_ADDR_OWVAR 52
53693: PUSH
53694: LD_VAR 0 1
53698: ST_TO_ADDR
// interface_hidden = mode ;
53699: LD_ADDR_OWVAR 54
53703: PUSH
53704: LD_VAR 0 1
53708: ST_TO_ADDR
// end ;
53709: LD_VAR 0 2
53713: RET
// export function Join ( array , element ) ; begin
53714: LD_INT 0
53716: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53717: LD_ADDR_VAR 0 3
53721: PUSH
53722: LD_VAR 0 1
53726: PPUSH
53727: LD_VAR 0 1
53731: PUSH
53732: LD_INT 1
53734: PLUS
53735: PPUSH
53736: LD_VAR 0 2
53740: PPUSH
53741: CALL_OW 1
53745: ST_TO_ADDR
// end ;
53746: LD_VAR 0 3
53750: RET
// export function JoinUnion ( array , element ) ; begin
53751: LD_INT 0
53753: PPUSH
// result := array union element ;
53754: LD_ADDR_VAR 0 3
53758: PUSH
53759: LD_VAR 0 1
53763: PUSH
53764: LD_VAR 0 2
53768: UNION
53769: ST_TO_ADDR
// end ;
53770: LD_VAR 0 3
53774: RET
// export function GetBehemoths ( side ) ; begin
53775: LD_INT 0
53777: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53778: LD_ADDR_VAR 0 2
53782: PUSH
53783: LD_INT 22
53785: PUSH
53786: LD_VAR 0 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 31
53797: PUSH
53798: LD_INT 25
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PPUSH
53809: CALL_OW 69
53813: ST_TO_ADDR
// end ;
53814: LD_VAR 0 2
53818: RET
// export function Shuffle ( array ) ; var i , index ; begin
53819: LD_INT 0
53821: PPUSH
53822: PPUSH
53823: PPUSH
// result := [ ] ;
53824: LD_ADDR_VAR 0 2
53828: PUSH
53829: EMPTY
53830: ST_TO_ADDR
// if not array then
53831: LD_VAR 0 1
53835: NOT
53836: IFFALSE 53840
// exit ;
53838: GO 53939
// Randomize ;
53840: CALL_OW 10
// for i = array downto 1 do
53844: LD_ADDR_VAR 0 3
53848: PUSH
53849: DOUBLE
53850: LD_VAR 0 1
53854: INC
53855: ST_TO_ADDR
53856: LD_INT 1
53858: PUSH
53859: FOR_DOWNTO
53860: IFFALSE 53937
// begin index := rand ( 1 , array ) ;
53862: LD_ADDR_VAR 0 4
53866: PUSH
53867: LD_INT 1
53869: PPUSH
53870: LD_VAR 0 1
53874: PPUSH
53875: CALL_OW 12
53879: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53880: LD_ADDR_VAR 0 2
53884: PUSH
53885: LD_VAR 0 2
53889: PPUSH
53890: LD_VAR 0 2
53894: PUSH
53895: LD_INT 1
53897: PLUS
53898: PPUSH
53899: LD_VAR 0 1
53903: PUSH
53904: LD_VAR 0 4
53908: ARRAY
53909: PPUSH
53910: CALL_OW 2
53914: ST_TO_ADDR
// array := Delete ( array , index ) ;
53915: LD_ADDR_VAR 0 1
53919: PUSH
53920: LD_VAR 0 1
53924: PPUSH
53925: LD_VAR 0 4
53929: PPUSH
53930: CALL_OW 3
53934: ST_TO_ADDR
// end ;
53935: GO 53859
53937: POP
53938: POP
// end ;
53939: LD_VAR 0 2
53943: RET
// export function GetBaseMaterials ( base ) ; begin
53944: LD_INT 0
53946: PPUSH
// result := [ 0 , 0 , 0 ] ;
53947: LD_ADDR_VAR 0 2
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: LIST
53965: ST_TO_ADDR
// if not base then
53966: LD_VAR 0 1
53970: NOT
53971: IFFALSE 53975
// exit ;
53973: GO 54024
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53975: LD_ADDR_VAR 0 2
53979: PUSH
53980: LD_VAR 0 1
53984: PPUSH
53985: LD_INT 1
53987: PPUSH
53988: CALL_OW 275
53992: PUSH
53993: LD_VAR 0 1
53997: PPUSH
53998: LD_INT 2
54000: PPUSH
54001: CALL_OW 275
54005: PUSH
54006: LD_VAR 0 1
54010: PPUSH
54011: LD_INT 3
54013: PPUSH
54014: CALL_OW 275
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: LIST
54023: ST_TO_ADDR
// end ;
54024: LD_VAR 0 2
54028: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54029: LD_INT 0
54031: PPUSH
54032: PPUSH
// result := array ;
54033: LD_ADDR_VAR 0 3
54037: PUSH
54038: LD_VAR 0 1
54042: ST_TO_ADDR
// if size >= result then
54043: LD_VAR 0 2
54047: PUSH
54048: LD_VAR 0 3
54052: GREATEREQUAL
54053: IFFALSE 54057
// exit ;
54055: GO 54107
// if size then
54057: LD_VAR 0 2
54061: IFFALSE 54107
// for i := array downto size do
54063: LD_ADDR_VAR 0 4
54067: PUSH
54068: DOUBLE
54069: LD_VAR 0 1
54073: INC
54074: ST_TO_ADDR
54075: LD_VAR 0 2
54079: PUSH
54080: FOR_DOWNTO
54081: IFFALSE 54105
// result := Delete ( result , result ) ;
54083: LD_ADDR_VAR 0 3
54087: PUSH
54088: LD_VAR 0 3
54092: PPUSH
54093: LD_VAR 0 3
54097: PPUSH
54098: CALL_OW 3
54102: ST_TO_ADDR
54103: GO 54080
54105: POP
54106: POP
// end ;
54107: LD_VAR 0 3
54111: RET
// export function ComExit ( unit ) ; var tmp ; begin
54112: LD_INT 0
54114: PPUSH
54115: PPUSH
// if not IsInUnit ( unit ) then
54116: LD_VAR 0 1
54120: PPUSH
54121: CALL_OW 310
54125: NOT
54126: IFFALSE 54130
// exit ;
54128: GO 54190
// tmp := IsInUnit ( unit ) ;
54130: LD_ADDR_VAR 0 3
54134: PUSH
54135: LD_VAR 0 1
54139: PPUSH
54140: CALL_OW 310
54144: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54145: LD_VAR 0 3
54149: PPUSH
54150: CALL_OW 247
54154: PUSH
54155: LD_INT 2
54157: EQUAL
54158: IFFALSE 54171
// ComExitVehicle ( unit ) else
54160: LD_VAR 0 1
54164: PPUSH
54165: CALL_OW 121
54169: GO 54180
// ComExitBuilding ( unit ) ;
54171: LD_VAR 0 1
54175: PPUSH
54176: CALL_OW 122
// result := tmp ;
54180: LD_ADDR_VAR 0 2
54184: PUSH
54185: LD_VAR 0 3
54189: ST_TO_ADDR
// end ;
54190: LD_VAR 0 2
54194: RET
// export function ComExitAll ( units ) ; var i ; begin
54195: LD_INT 0
54197: PPUSH
54198: PPUSH
// if not units then
54199: LD_VAR 0 1
54203: NOT
54204: IFFALSE 54208
// exit ;
54206: GO 54234
// for i in units do
54208: LD_ADDR_VAR 0 3
54212: PUSH
54213: LD_VAR 0 1
54217: PUSH
54218: FOR_IN
54219: IFFALSE 54232
// ComExit ( i ) ;
54221: LD_VAR 0 3
54225: PPUSH
54226: CALL 54112 0 1
54230: GO 54218
54232: POP
54233: POP
// end ;
54234: LD_VAR 0 2
54238: RET
// export function ResetHc ; begin
54239: LD_INT 0
54241: PPUSH
// InitHc ;
54242: CALL_OW 19
// hc_importance := 0 ;
54246: LD_ADDR_OWVAR 32
54250: PUSH
54251: LD_INT 0
54253: ST_TO_ADDR
// end ;
54254: LD_VAR 0 1
54258: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54259: LD_INT 0
54261: PPUSH
54262: PPUSH
54263: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54264: LD_ADDR_VAR 0 6
54268: PUSH
54269: LD_VAR 0 1
54273: PUSH
54274: LD_VAR 0 3
54278: PLUS
54279: PUSH
54280: LD_INT 2
54282: DIV
54283: ST_TO_ADDR
// if _x < 0 then
54284: LD_VAR 0 6
54288: PUSH
54289: LD_INT 0
54291: LESS
54292: IFFALSE 54309
// _x := _x * - 1 ;
54294: LD_ADDR_VAR 0 6
54298: PUSH
54299: LD_VAR 0 6
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: MUL
54308: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54309: LD_ADDR_VAR 0 7
54313: PUSH
54314: LD_VAR 0 2
54318: PUSH
54319: LD_VAR 0 4
54323: PLUS
54324: PUSH
54325: LD_INT 2
54327: DIV
54328: ST_TO_ADDR
// if _y < 0 then
54329: LD_VAR 0 7
54333: PUSH
54334: LD_INT 0
54336: LESS
54337: IFFALSE 54354
// _y := _y * - 1 ;
54339: LD_ADDR_VAR 0 7
54343: PUSH
54344: LD_VAR 0 7
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: MUL
54353: ST_TO_ADDR
// result := [ _x , _y ] ;
54354: LD_ADDR_VAR 0 5
54358: PUSH
54359: LD_VAR 0 6
54363: PUSH
54364: LD_VAR 0 7
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: ST_TO_ADDR
// end ;
54373: LD_VAR 0 5
54377: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54378: LD_INT 0
54380: PPUSH
54381: PPUSH
54382: PPUSH
54383: PPUSH
// task := GetTaskList ( unit ) ;
54384: LD_ADDR_VAR 0 7
54388: PUSH
54389: LD_VAR 0 1
54393: PPUSH
54394: CALL_OW 437
54398: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54399: LD_VAR 0 7
54403: NOT
54404: IFFALSE 54423
54406: PUSH
54407: LD_VAR 0 1
54411: PPUSH
54412: LD_VAR 0 2
54416: PPUSH
54417: CALL_OW 308
54421: NOT
54422: AND
54423: IFFALSE 54427
// exit ;
54425: GO 54545
// if IsInArea ( unit , area ) then
54427: LD_VAR 0 1
54431: PPUSH
54432: LD_VAR 0 2
54436: PPUSH
54437: CALL_OW 308
54441: IFFALSE 54459
// begin ComMoveToArea ( unit , goAway ) ;
54443: LD_VAR 0 1
54447: PPUSH
54448: LD_VAR 0 3
54452: PPUSH
54453: CALL_OW 113
// exit ;
54457: GO 54545
// end ; if task [ 1 ] [ 1 ] <> M then
54459: LD_VAR 0 7
54463: PUSH
54464: LD_INT 1
54466: ARRAY
54467: PUSH
54468: LD_INT 1
54470: ARRAY
54471: PUSH
54472: LD_STRING M
54474: NONEQUAL
54475: IFFALSE 54479
// exit ;
54477: GO 54545
// x := task [ 1 ] [ 2 ] ;
54479: LD_ADDR_VAR 0 5
54483: PUSH
54484: LD_VAR 0 7
54488: PUSH
54489: LD_INT 1
54491: ARRAY
54492: PUSH
54493: LD_INT 2
54495: ARRAY
54496: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54497: LD_ADDR_VAR 0 6
54501: PUSH
54502: LD_VAR 0 7
54506: PUSH
54507: LD_INT 1
54509: ARRAY
54510: PUSH
54511: LD_INT 3
54513: ARRAY
54514: ST_TO_ADDR
// if InArea ( x , y , area ) then
54515: LD_VAR 0 5
54519: PPUSH
54520: LD_VAR 0 6
54524: PPUSH
54525: LD_VAR 0 2
54529: PPUSH
54530: CALL_OW 309
54534: IFFALSE 54545
// ComStop ( unit ) ;
54536: LD_VAR 0 1
54540: PPUSH
54541: CALL_OW 141
// end ;
54545: LD_VAR 0 4
54549: RET
// export function Abs ( value ) ; begin
54550: LD_INT 0
54552: PPUSH
// result := value ;
54553: LD_ADDR_VAR 0 2
54557: PUSH
54558: LD_VAR 0 1
54562: ST_TO_ADDR
// if value < 0 then
54563: LD_VAR 0 1
54567: PUSH
54568: LD_INT 0
54570: LESS
54571: IFFALSE 54588
// result := value * - 1 ;
54573: LD_ADDR_VAR 0 2
54577: PUSH
54578: LD_VAR 0 1
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: MUL
54587: ST_TO_ADDR
// end ;
54588: LD_VAR 0 2
54592: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54593: LD_INT 0
54595: PPUSH
54596: PPUSH
54597: PPUSH
54598: PPUSH
54599: PPUSH
54600: PPUSH
54601: PPUSH
54602: PPUSH
// if not unit or not building then
54603: LD_VAR 0 1
54607: NOT
54608: IFTRUE 54617
54610: PUSH
54611: LD_VAR 0 2
54615: NOT
54616: OR
54617: IFFALSE 54621
// exit ;
54619: GO 54849
// x := GetX ( building ) ;
54621: LD_ADDR_VAR 0 4
54625: PUSH
54626: LD_VAR 0 2
54630: PPUSH
54631: CALL_OW 250
54635: ST_TO_ADDR
// y := GetY ( building ) ;
54636: LD_ADDR_VAR 0 6
54640: PUSH
54641: LD_VAR 0 2
54645: PPUSH
54646: CALL_OW 251
54650: ST_TO_ADDR
// d := GetDir ( building ) ;
54651: LD_ADDR_VAR 0 8
54655: PUSH
54656: LD_VAR 0 2
54660: PPUSH
54661: CALL_OW 254
54665: ST_TO_ADDR
// r := 4 ;
54666: LD_ADDR_VAR 0 9
54670: PUSH
54671: LD_INT 4
54673: ST_TO_ADDR
// for i := 1 to 5 do
54674: LD_ADDR_VAR 0 10
54678: PUSH
54679: DOUBLE
54680: LD_INT 1
54682: DEC
54683: ST_TO_ADDR
54684: LD_INT 5
54686: PUSH
54687: FOR_TO
54688: IFFALSE 54847
// begin _x := ShiftX ( x , d , r + i ) ;
54690: LD_ADDR_VAR 0 5
54694: PUSH
54695: LD_VAR 0 4
54699: PPUSH
54700: LD_VAR 0 8
54704: PPUSH
54705: LD_VAR 0 9
54709: PUSH
54710: LD_VAR 0 10
54714: PLUS
54715: PPUSH
54716: CALL_OW 272
54720: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54721: LD_ADDR_VAR 0 7
54725: PUSH
54726: LD_VAR 0 6
54730: PPUSH
54731: LD_VAR 0 8
54735: PPUSH
54736: LD_VAR 0 9
54740: PUSH
54741: LD_VAR 0 10
54745: PLUS
54746: PPUSH
54747: CALL_OW 273
54751: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54752: LD_VAR 0 5
54756: PPUSH
54757: LD_VAR 0 7
54761: PPUSH
54762: CALL_OW 488
54766: IFFALSE 54801
54768: PUSH
54769: LD_VAR 0 5
54773: PPUSH
54774: LD_VAR 0 7
54778: PPUSH
54779: CALL_OW 428
54783: PPUSH
54784: CALL_OW 247
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: IN
54799: NOT
54800: AND
54801: IFFALSE 54845
// begin ComMoveXY ( unit , _x , _y ) ;
54803: LD_VAR 0 1
54807: PPUSH
54808: LD_VAR 0 5
54812: PPUSH
54813: LD_VAR 0 7
54817: PPUSH
54818: CALL_OW 111
// result := [ _x , _y ] ;
54822: LD_ADDR_VAR 0 3
54826: PUSH
54827: LD_VAR 0 5
54831: PUSH
54832: LD_VAR 0 7
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: ST_TO_ADDR
// exit ;
54841: POP
54842: POP
54843: GO 54849
// end ; end ;
54845: GO 54687
54847: POP
54848: POP
// end ;
54849: LD_VAR 0 3
54853: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54854: LD_INT 0
54856: PPUSH
54857: PPUSH
54858: PPUSH
// result := 0 ;
54859: LD_ADDR_VAR 0 3
54863: PUSH
54864: LD_INT 0
54866: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54867: LD_VAR 0 1
54871: PUSH
54872: LD_INT 0
54874: LESS
54875: IFTRUE 54887
54877: PUSH
54878: LD_VAR 0 1
54882: PUSH
54883: LD_INT 8
54885: GREATER
54886: OR
54887: IFTRUE 54899
54889: PUSH
54890: LD_VAR 0 2
54894: PUSH
54895: LD_INT 0
54897: LESS
54898: OR
54899: IFTRUE 54911
54901: PUSH
54902: LD_VAR 0 2
54906: PUSH
54907: LD_INT 8
54909: GREATER
54910: OR
54911: IFFALSE 54915
// exit ;
54913: GO 54990
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54915: LD_ADDR_VAR 0 4
54919: PUSH
54920: LD_INT 22
54922: PUSH
54923: LD_VAR 0 2
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PPUSH
54932: CALL_OW 69
54936: PUSH
54937: FOR_IN
54938: IFFALSE 54988
// begin un := UnitShoot ( i ) ;
54940: LD_ADDR_VAR 0 5
54944: PUSH
54945: LD_VAR 0 4
54949: PPUSH
54950: CALL_OW 504
54954: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54955: LD_VAR 0 5
54959: PPUSH
54960: CALL_OW 255
54964: PUSH
54965: LD_VAR 0 1
54969: EQUAL
54970: IFFALSE 54986
// begin result := un ;
54972: LD_ADDR_VAR 0 3
54976: PUSH
54977: LD_VAR 0 5
54981: ST_TO_ADDR
// exit ;
54982: POP
54983: POP
54984: GO 54990
// end ; end ;
54986: GO 54937
54988: POP
54989: POP
// end ;
54990: LD_VAR 0 3
54994: RET
// export function GetCargoBay ( units ) ; begin
54995: LD_INT 0
54997: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54998: LD_ADDR_VAR 0 2
55002: PUSH
55003: LD_VAR 0 1
55007: PPUSH
55008: LD_INT 2
55010: PUSH
55011: LD_INT 34
55013: PUSH
55014: LD_INT 12
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 34
55023: PUSH
55024: LD_INT 51
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 34
55033: PUSH
55034: LD_INT 32
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 34
55043: PUSH
55044: LD_INT 89
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: PPUSH
55058: CALL_OW 72
55062: ST_TO_ADDR
// end ;
55063: LD_VAR 0 2
55067: RET
// export function Negate ( value ) ; begin
55068: LD_INT 0
55070: PPUSH
// result := not value ;
55071: LD_ADDR_VAR 0 2
55075: PUSH
55076: LD_VAR 0 1
55080: NOT
55081: ST_TO_ADDR
// end ;
55082: LD_VAR 0 2
55086: RET
// export function Inc ( value ) ; begin
55087: LD_INT 0
55089: PPUSH
// result := value + 1 ;
55090: LD_ADDR_VAR 0 2
55094: PUSH
55095: LD_VAR 0 1
55099: PUSH
55100: LD_INT 1
55102: PLUS
55103: ST_TO_ADDR
// end ;
55104: LD_VAR 0 2
55108: RET
// export function Dec ( value ) ; begin
55109: LD_INT 0
55111: PPUSH
// result := value - 1 ;
55112: LD_ADDR_VAR 0 2
55116: PUSH
55117: LD_VAR 0 1
55121: PUSH
55122: LD_INT 1
55124: MINUS
55125: ST_TO_ADDR
// end ;
55126: LD_VAR 0 2
55130: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55131: LD_INT 0
55133: PPUSH
55134: PPUSH
55135: PPUSH
55136: PPUSH
55137: PPUSH
55138: PPUSH
55139: PPUSH
55140: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55141: LD_VAR 0 1
55145: PPUSH
55146: LD_VAR 0 2
55150: PPUSH
55151: CALL_OW 488
55155: NOT
55156: IFTRUE 55175
55158: PUSH
55159: LD_VAR 0 3
55163: PPUSH
55164: LD_VAR 0 4
55168: PPUSH
55169: CALL_OW 488
55173: NOT
55174: OR
55175: IFFALSE 55188
// begin result := - 1 ;
55177: LD_ADDR_VAR 0 5
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: ST_TO_ADDR
// exit ;
55186: GO 55423
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55188: LD_ADDR_VAR 0 12
55192: PUSH
55193: LD_VAR 0 1
55197: PPUSH
55198: LD_VAR 0 2
55202: PPUSH
55203: LD_VAR 0 3
55207: PPUSH
55208: LD_VAR 0 4
55212: PPUSH
55213: CALL 54259 0 4
55217: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55218: LD_ADDR_VAR 0 11
55222: PUSH
55223: LD_VAR 0 1
55227: PPUSH
55228: LD_VAR 0 2
55232: PPUSH
55233: LD_VAR 0 12
55237: PUSH
55238: LD_INT 1
55240: ARRAY
55241: PPUSH
55242: LD_VAR 0 12
55246: PUSH
55247: LD_INT 2
55249: ARRAY
55250: PPUSH
55251: CALL_OW 298
55255: ST_TO_ADDR
// distance := 9999 ;
55256: LD_ADDR_VAR 0 10
55260: PUSH
55261: LD_INT 9999
55263: ST_TO_ADDR
// for i := 0 to 5 do
55264: LD_ADDR_VAR 0 6
55268: PUSH
55269: DOUBLE
55270: LD_INT 0
55272: DEC
55273: ST_TO_ADDR
55274: LD_INT 5
55276: PUSH
55277: FOR_TO
55278: IFFALSE 55421
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55280: LD_ADDR_VAR 0 7
55284: PUSH
55285: LD_VAR 0 1
55289: PPUSH
55290: LD_VAR 0 6
55294: PPUSH
55295: LD_VAR 0 11
55299: PPUSH
55300: CALL_OW 272
55304: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55305: LD_ADDR_VAR 0 8
55309: PUSH
55310: LD_VAR 0 2
55314: PPUSH
55315: LD_VAR 0 6
55319: PPUSH
55320: LD_VAR 0 11
55324: PPUSH
55325: CALL_OW 273
55329: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55330: LD_VAR 0 7
55334: PPUSH
55335: LD_VAR 0 8
55339: PPUSH
55340: CALL_OW 488
55344: NOT
55345: IFFALSE 55349
// continue ;
55347: GO 55277
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55349: LD_ADDR_VAR 0 9
55353: PUSH
55354: LD_VAR 0 12
55358: PUSH
55359: LD_INT 1
55361: ARRAY
55362: PPUSH
55363: LD_VAR 0 12
55367: PUSH
55368: LD_INT 2
55370: ARRAY
55371: PPUSH
55372: LD_VAR 0 7
55376: PPUSH
55377: LD_VAR 0 8
55381: PPUSH
55382: CALL_OW 298
55386: ST_TO_ADDR
// if tmp < distance then
55387: LD_VAR 0 9
55391: PUSH
55392: LD_VAR 0 10
55396: LESS
55397: IFFALSE 55419
// begin result := i ;
55399: LD_ADDR_VAR 0 5
55403: PUSH
55404: LD_VAR 0 6
55408: ST_TO_ADDR
// distance := tmp ;
55409: LD_ADDR_VAR 0 10
55413: PUSH
55414: LD_VAR 0 9
55418: ST_TO_ADDR
// end ; end ;
55419: GO 55277
55421: POP
55422: POP
// end ;
55423: LD_VAR 0 5
55427: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55428: LD_INT 0
55430: PPUSH
55431: PPUSH
// if not driver or not IsInUnit ( driver ) then
55432: LD_VAR 0 1
55436: NOT
55437: IFTRUE 55451
55439: PUSH
55440: LD_VAR 0 1
55444: PPUSH
55445: CALL_OW 310
55449: NOT
55450: OR
55451: IFFALSE 55455
// exit ;
55453: GO 55545
// vehicle := IsInUnit ( driver ) ;
55455: LD_ADDR_VAR 0 3
55459: PUSH
55460: LD_VAR 0 1
55464: PPUSH
55465: CALL_OW 310
55469: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55470: LD_VAR 0 1
55474: PPUSH
55475: LD_STRING \
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: PUSH
55505: LD_STRING E
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_VAR 0 3
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PPUSH
55541: CALL_OW 446
// end ;
55545: LD_VAR 0 2
55549: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55550: LD_INT 0
55552: PPUSH
55553: PPUSH
// if not driver or not IsInUnit ( driver ) then
55554: LD_VAR 0 1
55558: NOT
55559: IFTRUE 55573
55561: PUSH
55562: LD_VAR 0 1
55566: PPUSH
55567: CALL_OW 310
55571: NOT
55572: OR
55573: IFFALSE 55577
// exit ;
55575: GO 55667
// vehicle := IsInUnit ( driver ) ;
55577: LD_ADDR_VAR 0 3
55581: PUSH
55582: LD_VAR 0 1
55586: PPUSH
55587: CALL_OW 310
55591: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55592: LD_VAR 0 1
55596: PPUSH
55597: LD_STRING \
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: PUSH
55627: LD_STRING E
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_VAR 0 3
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PPUSH
55663: CALL_OW 447
// end ;
55667: LD_VAR 0 2
55671: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55672: LD_INT 0
55674: PPUSH
55675: PPUSH
55676: PPUSH
// tmp := [ ] ;
55677: LD_ADDR_VAR 0 5
55681: PUSH
55682: EMPTY
55683: ST_TO_ADDR
// for i in units do
55684: LD_ADDR_VAR 0 4
55688: PUSH
55689: LD_VAR 0 1
55693: PUSH
55694: FOR_IN
55695: IFFALSE 55733
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55697: LD_ADDR_VAR 0 5
55701: PUSH
55702: LD_VAR 0 5
55706: PPUSH
55707: LD_VAR 0 5
55711: PUSH
55712: LD_INT 1
55714: PLUS
55715: PPUSH
55716: LD_VAR 0 4
55720: PPUSH
55721: CALL_OW 256
55725: PPUSH
55726: CALL_OW 2
55730: ST_TO_ADDR
55731: GO 55694
55733: POP
55734: POP
// if not tmp then
55735: LD_VAR 0 5
55739: NOT
55740: IFFALSE 55744
// exit ;
55742: GO 55792
// if asc then
55744: LD_VAR 0 2
55748: IFFALSE 55772
// result := SortListByListAsc ( units , tmp ) else
55750: LD_ADDR_VAR 0 3
55754: PUSH
55755: LD_VAR 0 1
55759: PPUSH
55760: LD_VAR 0 5
55764: PPUSH
55765: CALL_OW 76
55769: ST_TO_ADDR
55770: GO 55792
// result := SortListByListDesc ( units , tmp ) ;
55772: LD_ADDR_VAR 0 3
55776: PUSH
55777: LD_VAR 0 1
55781: PPUSH
55782: LD_VAR 0 5
55786: PPUSH
55787: CALL_OW 77
55791: ST_TO_ADDR
// end ;
55792: LD_VAR 0 3
55796: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55797: LD_INT 0
55799: PPUSH
55800: PPUSH
// task := GetTaskList ( mech ) ;
55801: LD_ADDR_VAR 0 4
55805: PUSH
55806: LD_VAR 0 1
55810: PPUSH
55811: CALL_OW 437
55815: ST_TO_ADDR
// if not task then
55816: LD_VAR 0 4
55820: NOT
55821: IFFALSE 55825
// exit ;
55823: GO 55869
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55825: LD_ADDR_VAR 0 3
55829: PUSH
55830: LD_VAR 0 4
55834: PUSH
55835: LD_INT 1
55837: ARRAY
55838: PUSH
55839: LD_INT 1
55841: ARRAY
55842: PUSH
55843: LD_STRING r
55845: EQUAL
55846: IFFALSE 55868
55848: PUSH
55849: LD_VAR 0 4
55853: PUSH
55854: LD_INT 1
55856: ARRAY
55857: PUSH
55858: LD_INT 4
55860: ARRAY
55861: PUSH
55862: LD_VAR 0 2
55866: EQUAL
55867: AND
55868: ST_TO_ADDR
// end ;
55869: LD_VAR 0 3
55873: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55874: LD_INT 0
55876: PPUSH
// SetDir ( unit , d ) ;
55877: LD_VAR 0 1
55881: PPUSH
55882: LD_VAR 0 4
55886: PPUSH
55887: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
55891: LD_ADDR_VAR 0 6
55895: PUSH
55896: LD_VAR 0 1
55900: PPUSH
55901: LD_VAR 0 2
55905: PPUSH
55906: LD_VAR 0 3
55910: PPUSH
55911: LD_VAR 0 5
55915: PPUSH
55916: CALL_OW 48
55920: ST_TO_ADDR
// end ;
55921: LD_VAR 0 6
55925: RET
// export function ToNaturalNumber ( number ) ; begin
55926: LD_INT 0
55928: PPUSH
// result := number div 1 ;
55929: LD_ADDR_VAR 0 2
55933: PUSH
55934: LD_VAR 0 1
55938: PUSH
55939: LD_INT 1
55941: DIV
55942: ST_TO_ADDR
// if number < 0 then
55943: LD_VAR 0 1
55947: PUSH
55948: LD_INT 0
55950: LESS
55951: IFFALSE 55961
// result := 0 ;
55953: LD_ADDR_VAR 0 2
55957: PUSH
55958: LD_INT 0
55960: ST_TO_ADDR
// end ;
55961: LD_VAR 0 2
55965: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
55966: LD_INT 0
55968: PPUSH
55969: PPUSH
55970: PPUSH
// if not buildings then
55971: LD_VAR 0 1
55975: NOT
55976: IFFALSE 55980
// exit ;
55978: GO 56095
// tmp := [ ] ;
55980: LD_ADDR_VAR 0 5
55984: PUSH
55985: EMPTY
55986: ST_TO_ADDR
// for b in buildings do
55987: LD_ADDR_VAR 0 4
55991: PUSH
55992: LD_VAR 0 1
55996: PUSH
55997: FOR_IN
55998: IFFALSE 56036
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56000: LD_ADDR_VAR 0 5
56004: PUSH
56005: LD_VAR 0 5
56009: PPUSH
56010: LD_VAR 0 5
56014: PUSH
56015: LD_INT 1
56017: PLUS
56018: PPUSH
56019: LD_VAR 0 4
56023: PPUSH
56024: CALL_OW 266
56028: PPUSH
56029: CALL_OW 1
56033: ST_TO_ADDR
56034: GO 55997
56036: POP
56037: POP
// if not tmp then
56038: LD_VAR 0 5
56042: NOT
56043: IFFALSE 56047
// exit ;
56045: GO 56095
// if asc then
56047: LD_VAR 0 2
56051: IFFALSE 56075
// result := SortListByListAsc ( buildings , tmp ) else
56053: LD_ADDR_VAR 0 3
56057: PUSH
56058: LD_VAR 0 1
56062: PPUSH
56063: LD_VAR 0 5
56067: PPUSH
56068: CALL_OW 76
56072: ST_TO_ADDR
56073: GO 56095
// result := SortListByListDesc ( buildings , tmp ) ;
56075: LD_ADDR_VAR 0 3
56079: PUSH
56080: LD_VAR 0 1
56084: PPUSH
56085: LD_VAR 0 5
56089: PPUSH
56090: CALL_OW 77
56094: ST_TO_ADDR
// end ;
56095: LD_VAR 0 3
56099: RET
// export function SortByClass ( units , class ) ; var un ; begin
56100: LD_INT 0
56102: PPUSH
56103: PPUSH
// if not units or not class then
56104: LD_VAR 0 1
56108: NOT
56109: IFTRUE 56118
56111: PUSH
56112: LD_VAR 0 2
56116: NOT
56117: OR
56118: IFFALSE 56122
// exit ;
56120: GO 56217
// result := [ ] ;
56122: LD_ADDR_VAR 0 3
56126: PUSH
56127: EMPTY
56128: ST_TO_ADDR
// for un in units do
56129: LD_ADDR_VAR 0 4
56133: PUSH
56134: LD_VAR 0 1
56138: PUSH
56139: FOR_IN
56140: IFFALSE 56215
// if GetClass ( un ) = class then
56142: LD_VAR 0 4
56146: PPUSH
56147: CALL_OW 257
56151: PUSH
56152: LD_VAR 0 2
56156: EQUAL
56157: IFFALSE 56184
// result := Insert ( result , 1 , un ) else
56159: LD_ADDR_VAR 0 3
56163: PUSH
56164: LD_VAR 0 3
56168: PPUSH
56169: LD_INT 1
56171: PPUSH
56172: LD_VAR 0 4
56176: PPUSH
56177: CALL_OW 2
56181: ST_TO_ADDR
56182: GO 56213
// result := Replace ( result , result + 1 , un ) ;
56184: LD_ADDR_VAR 0 3
56188: PUSH
56189: LD_VAR 0 3
56193: PPUSH
56194: LD_VAR 0 3
56198: PUSH
56199: LD_INT 1
56201: PLUS
56202: PPUSH
56203: LD_VAR 0 4
56207: PPUSH
56208: CALL_OW 1
56212: ST_TO_ADDR
56213: GO 56139
56215: POP
56216: POP
// end ;
56217: LD_VAR 0 3
56221: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56222: LD_INT 0
56224: PPUSH
56225: PPUSH
56226: PPUSH
56227: PPUSH
56228: PPUSH
56229: PPUSH
56230: PPUSH
// result := [ ] ;
56231: LD_ADDR_VAR 0 4
56235: PUSH
56236: EMPTY
56237: ST_TO_ADDR
// if x - r < 0 then
56238: LD_VAR 0 1
56242: PUSH
56243: LD_VAR 0 3
56247: MINUS
56248: PUSH
56249: LD_INT 0
56251: LESS
56252: IFFALSE 56264
// min_x := 0 else
56254: LD_ADDR_VAR 0 8
56258: PUSH
56259: LD_INT 0
56261: ST_TO_ADDR
56262: GO 56280
// min_x := x - r ;
56264: LD_ADDR_VAR 0 8
56268: PUSH
56269: LD_VAR 0 1
56273: PUSH
56274: LD_VAR 0 3
56278: MINUS
56279: ST_TO_ADDR
// if y - r < 0 then
56280: LD_VAR 0 2
56284: PUSH
56285: LD_VAR 0 3
56289: MINUS
56290: PUSH
56291: LD_INT 0
56293: LESS
56294: IFFALSE 56306
// min_y := 0 else
56296: LD_ADDR_VAR 0 7
56300: PUSH
56301: LD_INT 0
56303: ST_TO_ADDR
56304: GO 56322
// min_y := y - r ;
56306: LD_ADDR_VAR 0 7
56310: PUSH
56311: LD_VAR 0 2
56315: PUSH
56316: LD_VAR 0 3
56320: MINUS
56321: ST_TO_ADDR
// max_x := x + r ;
56322: LD_ADDR_VAR 0 9
56326: PUSH
56327: LD_VAR 0 1
56331: PUSH
56332: LD_VAR 0 3
56336: PLUS
56337: ST_TO_ADDR
// max_y := y + r ;
56338: LD_ADDR_VAR 0 10
56342: PUSH
56343: LD_VAR 0 2
56347: PUSH
56348: LD_VAR 0 3
56352: PLUS
56353: ST_TO_ADDR
// for _x = min_x to max_x do
56354: LD_ADDR_VAR 0 5
56358: PUSH
56359: DOUBLE
56360: LD_VAR 0 8
56364: DEC
56365: ST_TO_ADDR
56366: LD_VAR 0 9
56370: PUSH
56371: FOR_TO
56372: IFFALSE 56473
// for _y = min_y to max_y do
56374: LD_ADDR_VAR 0 6
56378: PUSH
56379: DOUBLE
56380: LD_VAR 0 7
56384: DEC
56385: ST_TO_ADDR
56386: LD_VAR 0 10
56390: PUSH
56391: FOR_TO
56392: IFFALSE 56469
// begin if not ValidHex ( _x , _y ) then
56394: LD_VAR 0 5
56398: PPUSH
56399: LD_VAR 0 6
56403: PPUSH
56404: CALL_OW 488
56408: NOT
56409: IFFALSE 56413
// continue ;
56411: GO 56391
// if GetResourceTypeXY ( _x , _y ) then
56413: LD_VAR 0 5
56417: PPUSH
56418: LD_VAR 0 6
56422: PPUSH
56423: CALL_OW 283
56427: IFFALSE 56467
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56429: LD_ADDR_VAR 0 4
56433: PUSH
56434: LD_VAR 0 4
56438: PPUSH
56439: LD_VAR 0 4
56443: PUSH
56444: LD_INT 1
56446: PLUS
56447: PPUSH
56448: LD_VAR 0 5
56452: PUSH
56453: LD_VAR 0 6
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PPUSH
56462: CALL_OW 1
56466: ST_TO_ADDR
// end ;
56467: GO 56391
56469: POP
56470: POP
56471: GO 56371
56473: POP
56474: POP
// end ;
56475: LD_VAR 0 4
56479: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56480: LD_INT 0
56482: PPUSH
56483: PPUSH
56484: PPUSH
56485: PPUSH
56486: PPUSH
56487: PPUSH
56488: PPUSH
56489: PPUSH
// if not units then
56490: LD_VAR 0 1
56494: NOT
56495: IFFALSE 56499
// exit ;
56497: GO 57031
// result := UnitFilter ( units , [ f_ok ] ) ;
56499: LD_ADDR_VAR 0 3
56503: PUSH
56504: LD_VAR 0 1
56508: PPUSH
56509: LD_INT 50
56511: PUSH
56512: EMPTY
56513: LIST
56514: PPUSH
56515: CALL_OW 72
56519: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56520: LD_ADDR_VAR 0 8
56524: PUSH
56525: LD_VAR 0 1
56529: PUSH
56530: LD_INT 1
56532: ARRAY
56533: PPUSH
56534: CALL_OW 255
56538: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56539: LD_ADDR_VAR 0 10
56543: PUSH
56544: LD_INT 29
56546: PUSH
56547: LD_INT 91
56549: PUSH
56550: LD_INT 49
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: ST_TO_ADDR
// if not result then
56558: LD_VAR 0 3
56562: NOT
56563: IFFALSE 56567
// exit ;
56565: GO 57031
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56567: LD_ADDR_VAR 0 5
56571: PUSH
56572: LD_INT 81
56574: PUSH
56575: LD_VAR 0 8
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PPUSH
56584: CALL_OW 69
56588: ST_TO_ADDR
// for i in result do
56589: LD_ADDR_VAR 0 4
56593: PUSH
56594: LD_VAR 0 3
56598: PUSH
56599: FOR_IN
56600: IFFALSE 57029
// begin tag := GetTag ( i ) + 1 ;
56602: LD_ADDR_VAR 0 9
56606: PUSH
56607: LD_VAR 0 4
56611: PPUSH
56612: CALL_OW 110
56616: PUSH
56617: LD_INT 1
56619: PLUS
56620: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56621: LD_ADDR_VAR 0 7
56625: PUSH
56626: LD_VAR 0 4
56630: PPUSH
56631: CALL_OW 250
56635: PPUSH
56636: LD_VAR 0 4
56640: PPUSH
56641: CALL_OW 251
56645: PPUSH
56646: LD_INT 4
56648: PPUSH
56649: CALL 56222 0 3
56653: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56654: LD_VAR 0 4
56658: PPUSH
56659: CALL_OW 247
56663: PUSH
56664: LD_INT 2
56666: EQUAL
56667: IFFALSE 56679
56669: PUSH
56670: LD_VAR 0 7
56674: PUSH
56675: LD_INT 2
56677: GREATER
56678: AND
56679: IFFALSE 56699
56681: PUSH
56682: LD_VAR 0 4
56686: PPUSH
56687: CALL_OW 264
56691: PUSH
56692: LD_VAR 0 10
56696: IN
56697: NOT
56698: AND
56699: IFFALSE 56738
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56701: LD_VAR 0 4
56705: PPUSH
56706: LD_VAR 0 7
56710: PUSH
56711: LD_INT 1
56713: ARRAY
56714: PUSH
56715: LD_INT 1
56717: ARRAY
56718: PPUSH
56719: LD_VAR 0 7
56723: PUSH
56724: LD_INT 1
56726: ARRAY
56727: PUSH
56728: LD_INT 2
56730: ARRAY
56731: PPUSH
56732: CALL_OW 116
56736: GO 57027
// if path > tag then
56738: LD_VAR 0 2
56742: PUSH
56743: LD_VAR 0 9
56747: GREATER
56748: IFFALSE 56956
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56750: LD_ADDR_VAR 0 6
56754: PUSH
56755: LD_VAR 0 5
56759: PPUSH
56760: LD_INT 91
56762: PUSH
56763: LD_VAR 0 4
56767: PUSH
56768: LD_INT 8
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: LIST
56775: PPUSH
56776: CALL_OW 72
56780: ST_TO_ADDR
// if nearEnemy then
56781: LD_VAR 0 6
56785: IFFALSE 56854
// begin if GetWeapon ( i ) = ru_time_lapser then
56787: LD_VAR 0 4
56791: PPUSH
56792: CALL_OW 264
56796: PUSH
56797: LD_INT 49
56799: EQUAL
56800: IFFALSE 56828
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56802: LD_VAR 0 4
56806: PPUSH
56807: LD_VAR 0 6
56811: PPUSH
56812: LD_VAR 0 4
56816: PPUSH
56817: CALL_OW 74
56821: PPUSH
56822: CALL_OW 112
56826: GO 56852
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56828: LD_VAR 0 4
56832: PPUSH
56833: LD_VAR 0 6
56837: PPUSH
56838: LD_VAR 0 4
56842: PPUSH
56843: CALL_OW 74
56847: PPUSH
56848: CALL 58112 0 2
// end else
56852: GO 56954
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56854: LD_VAR 0 4
56858: PPUSH
56859: LD_VAR 0 2
56863: PUSH
56864: LD_VAR 0 9
56868: ARRAY
56869: PUSH
56870: LD_INT 1
56872: ARRAY
56873: PPUSH
56874: LD_VAR 0 2
56878: PUSH
56879: LD_VAR 0 9
56883: ARRAY
56884: PUSH
56885: LD_INT 2
56887: ARRAY
56888: PPUSH
56889: CALL_OW 297
56893: PUSH
56894: LD_INT 6
56896: GREATER
56897: IFFALSE 56940
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56899: LD_VAR 0 4
56903: PPUSH
56904: LD_VAR 0 2
56908: PUSH
56909: LD_VAR 0 9
56913: ARRAY
56914: PUSH
56915: LD_INT 1
56917: ARRAY
56918: PPUSH
56919: LD_VAR 0 2
56923: PUSH
56924: LD_VAR 0 9
56928: ARRAY
56929: PUSH
56930: LD_INT 2
56932: ARRAY
56933: PPUSH
56934: CALL_OW 114
56938: GO 56954
// SetTag ( i , tag ) ;
56940: LD_VAR 0 4
56944: PPUSH
56945: LD_VAR 0 9
56949: PPUSH
56950: CALL_OW 109
// end else
56954: GO 57027
// if enemy then
56956: LD_VAR 0 5
56960: IFFALSE 57027
// begin if GetWeapon ( i ) = ru_time_lapser then
56962: LD_VAR 0 4
56966: PPUSH
56967: CALL_OW 264
56971: PUSH
56972: LD_INT 49
56974: EQUAL
56975: IFFALSE 57003
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56977: LD_VAR 0 4
56981: PPUSH
56982: LD_VAR 0 5
56986: PPUSH
56987: LD_VAR 0 4
56991: PPUSH
56992: CALL_OW 74
56996: PPUSH
56997: CALL_OW 112
57001: GO 57027
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57003: LD_VAR 0 4
57007: PPUSH
57008: LD_VAR 0 5
57012: PPUSH
57013: LD_VAR 0 4
57017: PPUSH
57018: CALL_OW 74
57022: PPUSH
57023: CALL 58112 0 2
// end ; end ;
57027: GO 56599
57029: POP
57030: POP
// end ;
57031: LD_VAR 0 3
57035: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57036: LD_INT 0
57038: PPUSH
57039: PPUSH
57040: PPUSH
// if not unit or IsInUnit ( unit ) then
57041: LD_VAR 0 1
57045: NOT
57046: IFTRUE 57059
57048: PUSH
57049: LD_VAR 0 1
57053: PPUSH
57054: CALL_OW 310
57058: OR
57059: IFFALSE 57063
// exit ;
57061: GO 57154
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57063: LD_ADDR_VAR 0 4
57067: PUSH
57068: LD_VAR 0 1
57072: PPUSH
57073: CALL_OW 250
57077: PPUSH
57078: LD_VAR 0 2
57082: PPUSH
57083: LD_INT 1
57085: PPUSH
57086: CALL_OW 272
57090: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57091: LD_ADDR_VAR 0 5
57095: PUSH
57096: LD_VAR 0 1
57100: PPUSH
57101: CALL_OW 251
57105: PPUSH
57106: LD_VAR 0 2
57110: PPUSH
57111: LD_INT 1
57113: PPUSH
57114: CALL_OW 273
57118: ST_TO_ADDR
// if ValidHex ( x , y ) then
57119: LD_VAR 0 4
57123: PPUSH
57124: LD_VAR 0 5
57128: PPUSH
57129: CALL_OW 488
57133: IFFALSE 57154
// ComTurnXY ( unit , x , y ) ;
57135: LD_VAR 0 1
57139: PPUSH
57140: LD_VAR 0 4
57144: PPUSH
57145: LD_VAR 0 5
57149: PPUSH
57150: CALL_OW 118
// end ;
57154: LD_VAR 0 3
57158: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57159: LD_INT 0
57161: PPUSH
57162: PPUSH
// result := false ;
57163: LD_ADDR_VAR 0 3
57167: PUSH
57168: LD_INT 0
57170: ST_TO_ADDR
// if not units then
57171: LD_VAR 0 2
57175: NOT
57176: IFFALSE 57180
// exit ;
57178: GO 57225
// for i in units do
57180: LD_ADDR_VAR 0 4
57184: PUSH
57185: LD_VAR 0 2
57189: PUSH
57190: FOR_IN
57191: IFFALSE 57223
// if See ( side , i ) then
57193: LD_VAR 0 1
57197: PPUSH
57198: LD_VAR 0 4
57202: PPUSH
57203: CALL_OW 292
57207: IFFALSE 57221
// begin result := true ;
57209: LD_ADDR_VAR 0 3
57213: PUSH
57214: LD_INT 1
57216: ST_TO_ADDR
// exit ;
57217: POP
57218: POP
57219: GO 57225
// end ;
57221: GO 57190
57223: POP
57224: POP
// end ;
57225: LD_VAR 0 3
57229: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57230: LD_INT 0
57232: PPUSH
57233: PPUSH
57234: PPUSH
57235: PPUSH
// if not unit or not points then
57236: LD_VAR 0 1
57240: NOT
57241: IFTRUE 57250
57243: PUSH
57244: LD_VAR 0 2
57248: NOT
57249: OR
57250: IFFALSE 57254
// exit ;
57252: GO 57344
// dist := 99999 ;
57254: LD_ADDR_VAR 0 5
57258: PUSH
57259: LD_INT 99999
57261: ST_TO_ADDR
// for i in points do
57262: LD_ADDR_VAR 0 4
57266: PUSH
57267: LD_VAR 0 2
57271: PUSH
57272: FOR_IN
57273: IFFALSE 57342
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57275: LD_ADDR_VAR 0 6
57279: PUSH
57280: LD_VAR 0 1
57284: PPUSH
57285: LD_VAR 0 4
57289: PUSH
57290: LD_INT 1
57292: ARRAY
57293: PPUSH
57294: LD_VAR 0 4
57298: PUSH
57299: LD_INT 2
57301: ARRAY
57302: PPUSH
57303: CALL_OW 297
57307: ST_TO_ADDR
// if tmpDist < dist then
57308: LD_VAR 0 6
57312: PUSH
57313: LD_VAR 0 5
57317: LESS
57318: IFFALSE 57340
// begin result := i ;
57320: LD_ADDR_VAR 0 3
57324: PUSH
57325: LD_VAR 0 4
57329: ST_TO_ADDR
// dist := tmpDist ;
57330: LD_ADDR_VAR 0 5
57334: PUSH
57335: LD_VAR 0 6
57339: ST_TO_ADDR
// end ; end ;
57340: GO 57272
57342: POP
57343: POP
// end ;
57344: LD_VAR 0 3
57348: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57349: LD_INT 0
57351: PPUSH
// uc_side := side ;
57352: LD_ADDR_OWVAR 20
57356: PUSH
57357: LD_VAR 0 1
57361: ST_TO_ADDR
// uc_nation := 3 ;
57362: LD_ADDR_OWVAR 21
57366: PUSH
57367: LD_INT 3
57369: ST_TO_ADDR
// vc_chassis := 25 ;
57370: LD_ADDR_OWVAR 37
57374: PUSH
57375: LD_INT 25
57377: ST_TO_ADDR
// vc_engine := engine_siberite ;
57378: LD_ADDR_OWVAR 39
57382: PUSH
57383: LD_INT 3
57385: ST_TO_ADDR
// vc_control := control_computer ;
57386: LD_ADDR_OWVAR 38
57390: PUSH
57391: LD_INT 3
57393: ST_TO_ADDR
// vc_weapon := 59 ;
57394: LD_ADDR_OWVAR 40
57398: PUSH
57399: LD_INT 59
57401: ST_TO_ADDR
// result := CreateVehicle ;
57402: LD_ADDR_VAR 0 5
57406: PUSH
57407: CALL_OW 45
57411: ST_TO_ADDR
// SetDir ( result , d ) ;
57412: LD_VAR 0 5
57416: PPUSH
57417: LD_VAR 0 4
57421: PPUSH
57422: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57426: LD_VAR 0 5
57430: PPUSH
57431: LD_VAR 0 2
57435: PPUSH
57436: LD_VAR 0 3
57440: PPUSH
57441: LD_INT 0
57443: PPUSH
57444: CALL_OW 48
// end ;
57448: LD_VAR 0 5
57452: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57453: LD_INT 0
57455: PPUSH
57456: PPUSH
57457: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57458: LD_ADDR_VAR 0 2
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57481: LD_VAR 0 1
57485: NOT
57486: IFTRUE 57519
57488: PUSH
57489: LD_VAR 0 1
57493: PPUSH
57494: CALL_OW 264
57498: PUSH
57499: LD_INT 12
57501: PUSH
57502: LD_INT 51
57504: PUSH
57505: LD_INT 32
57507: PUSH
57508: LD_INT 89
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: IN
57517: NOT
57518: OR
57519: IFFALSE 57523
// exit ;
57521: GO 57621
// for i := 1 to 3 do
57523: LD_ADDR_VAR 0 3
57527: PUSH
57528: DOUBLE
57529: LD_INT 1
57531: DEC
57532: ST_TO_ADDR
57533: LD_INT 3
57535: PUSH
57536: FOR_TO
57537: IFFALSE 57619
// begin tmp := GetCargo ( cargo , i ) ;
57539: LD_ADDR_VAR 0 4
57543: PUSH
57544: LD_VAR 0 1
57548: PPUSH
57549: LD_VAR 0 3
57553: PPUSH
57554: CALL_OW 289
57558: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57559: LD_ADDR_VAR 0 2
57563: PUSH
57564: LD_VAR 0 2
57568: PPUSH
57569: LD_VAR 0 3
57573: PPUSH
57574: LD_VAR 0 4
57578: PPUSH
57579: CALL_OW 1
57583: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57584: LD_ADDR_VAR 0 2
57588: PUSH
57589: LD_VAR 0 2
57593: PPUSH
57594: LD_INT 4
57596: PPUSH
57597: LD_VAR 0 2
57601: PUSH
57602: LD_INT 4
57604: ARRAY
57605: PUSH
57606: LD_VAR 0 4
57610: PLUS
57611: PPUSH
57612: CALL_OW 1
57616: ST_TO_ADDR
// end ;
57617: GO 57536
57619: POP
57620: POP
// end ;
57621: LD_VAR 0 2
57625: RET
// export function Length ( array ) ; begin
57626: LD_INT 0
57628: PPUSH
// result := array + 0 ;
57629: LD_ADDR_VAR 0 2
57633: PUSH
57634: LD_VAR 0 1
57638: PUSH
57639: LD_INT 0
57641: PLUS
57642: ST_TO_ADDR
// end ;
57643: LD_VAR 0 2
57647: RET
// export function PrepareArray ( array ) ; begin
57648: LD_INT 0
57650: PPUSH
// result := array diff 0 ;
57651: LD_ADDR_VAR 0 2
57655: PUSH
57656: LD_VAR 0 1
57660: PUSH
57661: LD_INT 0
57663: DIFF
57664: ST_TO_ADDR
// if not result [ 1 ] then
57665: LD_VAR 0 2
57669: PUSH
57670: LD_INT 1
57672: ARRAY
57673: NOT
57674: IFFALSE 57694
// result := Delete ( result , 1 ) ;
57676: LD_ADDR_VAR 0 2
57680: PUSH
57681: LD_VAR 0 2
57685: PPUSH
57686: LD_INT 1
57688: PPUSH
57689: CALL_OW 3
57693: ST_TO_ADDR
// end ;
57694: LD_VAR 0 2
57698: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57699: LD_INT 0
57701: PPUSH
57702: PPUSH
57703: PPUSH
57704: PPUSH
// sibRocketRange := 25 ;
57705: LD_ADDR_VAR 0 6
57709: PUSH
57710: LD_INT 25
57712: ST_TO_ADDR
// result := false ;
57713: LD_ADDR_VAR 0 4
57717: PUSH
57718: LD_INT 0
57720: ST_TO_ADDR
// for i := 0 to 5 do
57721: LD_ADDR_VAR 0 5
57725: PUSH
57726: DOUBLE
57727: LD_INT 0
57729: DEC
57730: ST_TO_ADDR
57731: LD_INT 5
57733: PUSH
57734: FOR_TO
57735: IFFALSE 57802
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57737: LD_VAR 0 1
57741: PPUSH
57742: LD_VAR 0 5
57746: PPUSH
57747: LD_VAR 0 6
57751: PPUSH
57752: CALL_OW 272
57756: PPUSH
57757: LD_VAR 0 2
57761: PPUSH
57762: LD_VAR 0 5
57766: PPUSH
57767: LD_VAR 0 6
57771: PPUSH
57772: CALL_OW 273
57776: PPUSH
57777: LD_VAR 0 3
57781: PPUSH
57782: CALL_OW 309
57786: IFFALSE 57800
// begin result := true ;
57788: LD_ADDR_VAR 0 4
57792: PUSH
57793: LD_INT 1
57795: ST_TO_ADDR
// exit ;
57796: POP
57797: POP
57798: GO 57804
// end ;
57800: GO 57734
57802: POP
57803: POP
// end ;
57804: LD_VAR 0 4
57808: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57809: LD_INT 0
57811: PPUSH
57812: PPUSH
57813: PPUSH
// if btype = b_depot then
57814: LD_VAR 0 2
57818: PUSH
57819: LD_INT 0
57821: EQUAL
57822: IFFALSE 57834
// begin result := true ;
57824: LD_ADDR_VAR 0 3
57828: PUSH
57829: LD_INT 1
57831: ST_TO_ADDR
// exit ;
57832: GO 57954
// end ; pom := GetBase ( depot ) ;
57834: LD_ADDR_VAR 0 4
57838: PUSH
57839: LD_VAR 0 1
57843: PPUSH
57844: CALL_OW 274
57848: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57849: LD_ADDR_VAR 0 5
57853: PUSH
57854: LD_VAR 0 2
57858: PPUSH
57859: LD_VAR 0 1
57863: PPUSH
57864: CALL_OW 248
57868: PPUSH
57869: CALL_OW 450
57873: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57874: LD_ADDR_VAR 0 3
57878: PUSH
57879: LD_VAR 0 4
57883: PPUSH
57884: LD_INT 1
57886: PPUSH
57887: CALL_OW 275
57891: PUSH
57892: LD_VAR 0 5
57896: PUSH
57897: LD_INT 1
57899: ARRAY
57900: GREATEREQUAL
57901: IFFALSE 57927
57903: PUSH
57904: LD_VAR 0 4
57908: PPUSH
57909: LD_INT 2
57911: PPUSH
57912: CALL_OW 275
57916: PUSH
57917: LD_VAR 0 5
57921: PUSH
57922: LD_INT 2
57924: ARRAY
57925: GREATEREQUAL
57926: AND
57927: IFFALSE 57953
57929: PUSH
57930: LD_VAR 0 4
57934: PPUSH
57935: LD_INT 3
57937: PPUSH
57938: CALL_OW 275
57942: PUSH
57943: LD_VAR 0 5
57947: PUSH
57948: LD_INT 3
57950: ARRAY
57951: GREATEREQUAL
57952: AND
57953: ST_TO_ADDR
// end ;
57954: LD_VAR 0 3
57958: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57959: LD_INT 0
57961: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57962: LD_VAR 0 1
57966: PPUSH
57967: LD_VAR 0 2
57971: PPUSH
57972: LD_INT 0
57974: PPUSH
57975: LD_INT 0
57977: PPUSH
57978: LD_INT 1
57980: PPUSH
57981: LD_INT 0
57983: PPUSH
57984: CALL_OW 587
// end ;
57988: LD_VAR 0 3
57992: RET
// export function CenterOnNow ( unit ) ; begin
57993: LD_INT 0
57995: PPUSH
// result := IsInUnit ( unit ) ;
57996: LD_ADDR_VAR 0 2
58000: PUSH
58001: LD_VAR 0 1
58005: PPUSH
58006: CALL_OW 310
58010: ST_TO_ADDR
// if not result then
58011: LD_VAR 0 2
58015: NOT
58016: IFFALSE 58028
// result := unit ;
58018: LD_ADDR_VAR 0 2
58022: PUSH
58023: LD_VAR 0 1
58027: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58028: LD_VAR 0 1
58032: PPUSH
58033: CALL_OW 87
// end ;
58037: LD_VAR 0 2
58041: RET
// export function ComMoveHex ( unit , hex ) ; begin
58042: LD_INT 0
58044: PPUSH
// if not hex then
58045: LD_VAR 0 2
58049: NOT
58050: IFFALSE 58054
// exit ;
58052: GO 58107
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58054: LD_VAR 0 2
58058: PUSH
58059: LD_INT 1
58061: ARRAY
58062: PPUSH
58063: LD_VAR 0 2
58067: PUSH
58068: LD_INT 2
58070: ARRAY
58071: PPUSH
58072: CALL_OW 428
58076: IFFALSE 58080
// exit ;
58078: GO 58107
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58080: LD_VAR 0 1
58084: PPUSH
58085: LD_VAR 0 2
58089: PUSH
58090: LD_INT 1
58092: ARRAY
58093: PPUSH
58094: LD_VAR 0 2
58098: PUSH
58099: LD_INT 2
58101: ARRAY
58102: PPUSH
58103: CALL_OW 111
// end ;
58107: LD_VAR 0 3
58111: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58112: LD_INT 0
58114: PPUSH
58115: PPUSH
58116: PPUSH
// if not unit or not enemy then
58117: LD_VAR 0 1
58121: NOT
58122: IFTRUE 58131
58124: PUSH
58125: LD_VAR 0 2
58129: NOT
58130: OR
58131: IFFALSE 58135
// exit ;
58133: GO 58261
// x := GetX ( enemy ) ;
58135: LD_ADDR_VAR 0 4
58139: PUSH
58140: LD_VAR 0 2
58144: PPUSH
58145: CALL_OW 250
58149: ST_TO_ADDR
// y := GetY ( enemy ) ;
58150: LD_ADDR_VAR 0 5
58154: PUSH
58155: LD_VAR 0 2
58159: PPUSH
58160: CALL_OW 251
58164: ST_TO_ADDR
// if ValidHex ( x , y ) then
58165: LD_VAR 0 4
58169: PPUSH
58170: LD_VAR 0 5
58174: PPUSH
58175: CALL_OW 488
58179: IFFALSE 58261
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58181: LD_VAR 0 2
58185: PPUSH
58186: CALL_OW 247
58190: PUSH
58191: LD_INT 3
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: IN
58201: IFTRUE 58224
58203: PUSH
58204: LD_VAR 0 1
58208: PPUSH
58209: CALL_OW 255
58213: PPUSH
58214: LD_VAR 0 2
58218: PPUSH
58219: CALL_OW 292
58223: OR
58224: IFFALSE 58242
// ComAttackUnit ( unit , enemy ) else
58226: LD_VAR 0 1
58230: PPUSH
58231: LD_VAR 0 2
58235: PPUSH
58236: CALL_OW 115
58240: GO 58261
// ComAgressiveMove ( unit , x , y ) ;
58242: LD_VAR 0 1
58246: PPUSH
58247: LD_VAR 0 4
58251: PPUSH
58252: LD_VAR 0 5
58256: PPUSH
58257: CALL_OW 114
// end ;
58261: LD_VAR 0 3
58265: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58266: LD_INT 0
58268: PPUSH
58269: PPUSH
58270: PPUSH
// list := AreaToList ( area , 0 ) ;
58271: LD_ADDR_VAR 0 5
58275: PUSH
58276: LD_VAR 0 1
58280: PPUSH
58281: LD_INT 0
58283: PPUSH
58284: CALL_OW 517
58288: ST_TO_ADDR
// if not list then
58289: LD_VAR 0 5
58293: NOT
58294: IFFALSE 58298
// exit ;
58296: GO 58428
// if all then
58298: LD_VAR 0 2
58302: IFFALSE 58390
// begin for i := 1 to list [ 1 ] do
58304: LD_ADDR_VAR 0 4
58308: PUSH
58309: DOUBLE
58310: LD_INT 1
58312: DEC
58313: ST_TO_ADDR
58314: LD_VAR 0 5
58318: PUSH
58319: LD_INT 1
58321: ARRAY
58322: PUSH
58323: FOR_TO
58324: IFFALSE 58386
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58326: LD_ADDR_VAR 0 3
58330: PUSH
58331: LD_VAR 0 3
58335: PPUSH
58336: LD_VAR 0 3
58340: PUSH
58341: LD_INT 1
58343: PLUS
58344: PPUSH
58345: LD_VAR 0 5
58349: PUSH
58350: LD_INT 1
58352: ARRAY
58353: PUSH
58354: LD_VAR 0 4
58358: ARRAY
58359: PUSH
58360: LD_VAR 0 5
58364: PUSH
58365: LD_INT 2
58367: ARRAY
58368: PUSH
58369: LD_VAR 0 4
58373: ARRAY
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PPUSH
58379: CALL_OW 1
58383: ST_TO_ADDR
58384: GO 58323
58386: POP
58387: POP
// exit ;
58388: GO 58428
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58390: LD_ADDR_VAR 0 3
58394: PUSH
58395: LD_VAR 0 5
58399: PUSH
58400: LD_INT 1
58402: ARRAY
58403: PUSH
58404: LD_INT 1
58406: ARRAY
58407: PUSH
58408: LD_VAR 0 5
58412: PUSH
58413: LD_INT 2
58415: ARRAY
58416: PUSH
58417: LD_INT 1
58419: ARRAY
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: EMPTY
58426: LIST
58427: ST_TO_ADDR
// end ;
58428: LD_VAR 0 3
58432: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58433: LD_INT 0
58435: PPUSH
58436: PPUSH
// list := AreaToList ( area , 0 ) ;
58437: LD_ADDR_VAR 0 4
58441: PUSH
58442: LD_VAR 0 1
58446: PPUSH
58447: LD_INT 0
58449: PPUSH
58450: CALL_OW 517
58454: ST_TO_ADDR
// if not list then
58455: LD_VAR 0 4
58459: NOT
58460: IFFALSE 58464
// exit ;
58462: GO 58505
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58464: LD_ADDR_VAR 0 3
58468: PUSH
58469: LD_VAR 0 4
58473: PUSH
58474: LD_INT 1
58476: ARRAY
58477: PUSH
58478: LD_INT 1
58480: ARRAY
58481: PUSH
58482: LD_VAR 0 4
58486: PUSH
58487: LD_INT 2
58489: ARRAY
58490: PUSH
58491: LD_INT 1
58493: ARRAY
58494: PUSH
58495: LD_VAR 0 2
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// end ;
58505: LD_VAR 0 3
58509: RET
// export function First ( array ) ; begin
58510: LD_INT 0
58512: PPUSH
// if not array then
58513: LD_VAR 0 1
58517: NOT
58518: IFFALSE 58522
// exit ;
58520: GO 58536
// result := array [ 1 ] ;
58522: LD_ADDR_VAR 0 2
58526: PUSH
58527: LD_VAR 0 1
58531: PUSH
58532: LD_INT 1
58534: ARRAY
58535: ST_TO_ADDR
// end ;
58536: LD_VAR 0 2
58540: RET
// export function Last ( array ) ; begin
58541: LD_INT 0
58543: PPUSH
// if not array then
58544: LD_VAR 0 1
58548: NOT
58549: IFFALSE 58553
// exit ;
58551: GO 58569
// result := array [ array ] ;
58553: LD_ADDR_VAR 0 2
58557: PUSH
58558: LD_VAR 0 1
58562: PUSH
58563: LD_VAR 0 1
58567: ARRAY
58568: ST_TO_ADDR
// end ;
58569: LD_VAR 0 2
58573: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58574: LD_INT 0
58576: PPUSH
58577: PPUSH
// result := [ ] ;
58578: LD_ADDR_VAR 0 5
58582: PUSH
58583: EMPTY
58584: ST_TO_ADDR
// if not array then
58585: LD_VAR 0 1
58589: NOT
58590: IFFALSE 58594
// exit ;
58592: GO 58706
// for i := 1 to array do
58594: LD_ADDR_VAR 0 6
58598: PUSH
58599: DOUBLE
58600: LD_INT 1
58602: DEC
58603: ST_TO_ADDR
58604: LD_VAR 0 1
58608: PUSH
58609: FOR_TO
58610: IFFALSE 58704
// if array [ i ] [ index ] = value then
58612: LD_VAR 0 1
58616: PUSH
58617: LD_VAR 0 6
58621: ARRAY
58622: PUSH
58623: LD_VAR 0 2
58627: ARRAY
58628: PUSH
58629: LD_VAR 0 3
58633: EQUAL
58634: IFFALSE 58702
// begin if indexColumn then
58636: LD_VAR 0 4
58640: IFFALSE 58676
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58642: LD_ADDR_VAR 0 5
58646: PUSH
58647: LD_VAR 0 5
58651: PPUSH
58652: LD_VAR 0 1
58656: PUSH
58657: LD_VAR 0 6
58661: ARRAY
58662: PUSH
58663: LD_VAR 0 4
58667: ARRAY
58668: PPUSH
58669: CALL 53714 0 2
58673: ST_TO_ADDR
58674: GO 58702
// result := Join ( result , array [ i ] ) ;
58676: LD_ADDR_VAR 0 5
58680: PUSH
58681: LD_VAR 0 5
58685: PPUSH
58686: LD_VAR 0 1
58690: PUSH
58691: LD_VAR 0 6
58695: ARRAY
58696: PPUSH
58697: CALL 53714 0 2
58701: ST_TO_ADDR
// end ;
58702: GO 58609
58704: POP
58705: POP
// end ;
58706: LD_VAR 0 5
58710: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58711: LD_INT 0
58713: PPUSH
// if not vehicles or not parkingPoint then
58714: LD_VAR 0 1
58718: NOT
58719: IFTRUE 58728
58721: PUSH
58722: LD_VAR 0 2
58726: NOT
58727: OR
58728: IFFALSE 58732
// exit ;
58730: GO 58830
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58732: LD_ADDR_VAR 0 1
58736: PUSH
58737: LD_VAR 0 1
58741: PPUSH
58742: LD_INT 50
58744: PUSH
58745: EMPTY
58746: LIST
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: LD_INT 92
58753: PUSH
58754: LD_VAR 0 2
58758: PUSH
58759: LD_INT 1
58761: ARRAY
58762: PUSH
58763: LD_VAR 0 2
58767: PUSH
58768: LD_INT 2
58770: ARRAY
58771: PUSH
58772: LD_INT 8
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PPUSH
58789: CALL_OW 72
58793: ST_TO_ADDR
// if not vehicles then
58794: LD_VAR 0 1
58798: NOT
58799: IFFALSE 58803
// exit ;
58801: GO 58830
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58803: LD_VAR 0 1
58807: PPUSH
58808: LD_VAR 0 2
58812: PUSH
58813: LD_INT 1
58815: ARRAY
58816: PPUSH
58817: LD_VAR 0 2
58821: PUSH
58822: LD_INT 2
58824: ARRAY
58825: PPUSH
58826: CALL_OW 111
// end ;
58830: LD_VAR 0 3
58834: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58835: LD_INT 0
58837: PPUSH
58838: PPUSH
58839: PPUSH
// if not side or not area then
58840: LD_VAR 0 1
58844: NOT
58845: IFTRUE 58854
58847: PUSH
58848: LD_VAR 0 2
58852: NOT
58853: OR
58854: IFFALSE 58858
// exit ;
58856: GO 58977
// tmp := AreaToList ( area , 0 ) ;
58858: LD_ADDR_VAR 0 5
58862: PUSH
58863: LD_VAR 0 2
58867: PPUSH
58868: LD_INT 0
58870: PPUSH
58871: CALL_OW 517
58875: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58876: LD_ADDR_VAR 0 4
58880: PUSH
58881: DOUBLE
58882: LD_INT 1
58884: DEC
58885: ST_TO_ADDR
58886: LD_VAR 0 5
58890: PUSH
58891: LD_INT 1
58893: ARRAY
58894: PUSH
58895: FOR_TO
58896: IFFALSE 58975
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
58898: LD_VAR 0 5
58902: PUSH
58903: LD_INT 1
58905: ARRAY
58906: PUSH
58907: LD_VAR 0 4
58911: ARRAY
58912: PPUSH
58913: LD_VAR 0 5
58917: PUSH
58918: LD_INT 2
58920: ARRAY
58921: PUSH
58922: LD_VAR 0 4
58926: ARRAY
58927: PPUSH
58928: CALL_OW 351
58932: IFFALSE 58973
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
58934: LD_VAR 0 5
58938: PUSH
58939: LD_INT 1
58941: ARRAY
58942: PUSH
58943: LD_VAR 0 4
58947: ARRAY
58948: PPUSH
58949: LD_VAR 0 5
58953: PUSH
58954: LD_INT 2
58956: ARRAY
58957: PUSH
58958: LD_VAR 0 4
58962: ARRAY
58963: PPUSH
58964: LD_VAR 0 1
58968: PPUSH
58969: CALL_OW 244
// end ;
58973: GO 58895
58975: POP
58976: POP
// end ;
58977: LD_VAR 0 3
58981: RET
// export function UniqueArray ( array ) ; var i ; begin
58982: LD_INT 0
58984: PPUSH
58985: PPUSH
// result := [ ] ;
58986: LD_ADDR_VAR 0 2
58990: PUSH
58991: EMPTY
58992: ST_TO_ADDR
// if not array then
58993: LD_VAR 0 1
58997: NOT
58998: IFFALSE 59002
// exit ;
59000: GO 59063
// for i := 1 to array do
59002: LD_ADDR_VAR 0 3
59006: PUSH
59007: DOUBLE
59008: LD_INT 1
59010: DEC
59011: ST_TO_ADDR
59012: LD_VAR 0 1
59016: PUSH
59017: FOR_TO
59018: IFFALSE 59061
// if not array [ i ] in result then
59020: LD_VAR 0 1
59024: PUSH
59025: LD_VAR 0 3
59029: ARRAY
59030: PUSH
59031: LD_VAR 0 2
59035: IN
59036: NOT
59037: IFFALSE 59059
// result := Join ( result , i ) ;
59039: LD_ADDR_VAR 0 2
59043: PUSH
59044: LD_VAR 0 2
59048: PPUSH
59049: LD_VAR 0 3
59053: PPUSH
59054: CALL 53714 0 2
59058: ST_TO_ADDR
59059: GO 59017
59061: POP
59062: POP
// end ; end_of_file end_of_file
59063: LD_VAR 0 2
59067: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59068: LD_VAR 0 1
59072: PPUSH
59073: LD_VAR 0 2
59077: PPUSH
59078: LD_VAR 0 3
59082: PPUSH
59083: LD_VAR 0 4
59087: PPUSH
59088: LD_VAR 0 5
59092: PPUSH
59093: LD_VAR 0 6
59097: PPUSH
59098: CALL 59333 0 6
// end ;
59102: PPOPN 6
59104: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
59105: LD_INT 0
59107: PPUSH
// begin if not units then
59108: LD_VAR 0 1
59112: NOT
59113: IFFALSE 59117
// exit ;
59115: GO 59151
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
59117: LD_VAR 0 1
59121: PPUSH
59122: LD_VAR 0 2
59126: PPUSH
59127: LD_VAR 0 3
59131: PPUSH
59132: LD_VAR 0 4
59136: PPUSH
59137: LD_VAR 0 5
59141: PPUSH
59142: LD_VAR 0 6
59146: PPUSH
59147: CALL 81579 0 6
// end ;
59151: PPOPN 7
59153: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59154: CALL 59220 0 0
// end ; end_of_file
59158: PPOPN 1
59160: END
// export globalGameSaveCounter ; every 0 0$1 do
59161: GO 59163
59163: DISABLE
// begin enable ;
59164: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59165: LD_STRING updateTimer(
59167: PUSH
59168: LD_OWVAR 1
59172: STR
59173: PUSH
59174: LD_STRING );
59176: STR
59177: PPUSH
59178: CALL_OW 559
// end ;
59182: END
// every 0 0$1 do
59183: GO 59185
59185: DISABLE
// begin globalGameSaveCounter := 0 ;
59186: LD_ADDR_EXP 37
59190: PUSH
59191: LD_INT 0
59193: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
59194: LD_STRING setGameSaveCounter(0)
59196: PPUSH
59197: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
59201: LD_STRING initStreamRollete();
59203: PPUSH
59204: CALL_OW 559
// InitStreamMode ;
59208: CALL 60553 0 0
// DefineStreamItems ( false ) ;
59212: LD_INT 0
59214: PPUSH
59215: CALL 61017 0 1
// end ;
59219: END
// export function SOS_MapStart ( ) ; begin
59220: LD_INT 0
59222: PPUSH
// if streamModeActive then
59223: LD_EXP 38
59227: IFFALSE 59236
// DefineStreamItems ( true ) ;
59229: LD_INT 1
59231: PPUSH
59232: CALL 61017 0 1
// UpdateLuaVariables ( ) ;
59236: CALL 59253 0 0
// UpdateFactoryWaypoints ( ) ;
59240: CALL 74139 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59244: CALL 74391 0 0
// end ;
59248: LD_VAR 0 1
59252: RET
// function UpdateLuaVariables ( ) ; begin
59253: LD_INT 0
59255: PPUSH
// if globalGameSaveCounter then
59256: LD_EXP 37
59260: IFFALSE 59294
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
59262: LD_ADDR_EXP 37
59266: PUSH
59267: LD_EXP 37
59271: PPUSH
59272: CALL 55087 0 1
59276: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59277: LD_STRING setGameSaveCounter(
59279: PUSH
59280: LD_EXP 37
59284: STR
59285: PUSH
59286: LD_STRING )
59288: STR
59289: PPUSH
59290: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59294: LD_STRING setGameDifficulty(
59296: PUSH
59297: LD_OWVAR 67
59301: STR
59302: PUSH
59303: LD_STRING )
59305: STR
59306: PPUSH
59307: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59311: LD_STRING displayDifficulty(
59313: PUSH
59314: LD_OWVAR 67
59318: STR
59319: PUSH
59320: LD_STRING )
59322: STR
59323: PPUSH
59324: CALL_OW 559
// end ;
59328: LD_VAR 0 1
59332: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59333: LD_INT 0
59335: PPUSH
// if p2 = stream_mode then
59336: LD_VAR 0 2
59340: PUSH
59341: LD_INT 100
59343: EQUAL
59344: IFFALSE 60347
// begin if not StreamModeActive then
59346: LD_EXP 38
59350: NOT
59351: IFFALSE 59361
// StreamModeActive := true ;
59353: LD_ADDR_EXP 38
59357: PUSH
59358: LD_INT 1
59360: ST_TO_ADDR
// if p3 = 0 then
59361: LD_VAR 0 3
59365: PUSH
59366: LD_INT 0
59368: EQUAL
59369: IFFALSE 59375
// InitStreamMode ;
59371: CALL 60553 0 0
// if p3 = 1 then
59375: LD_VAR 0 3
59379: PUSH
59380: LD_INT 1
59382: EQUAL
59383: IFFALSE 59393
// sRocket := true ;
59385: LD_ADDR_EXP 43
59389: PUSH
59390: LD_INT 1
59392: ST_TO_ADDR
// if p3 = 2 then
59393: LD_VAR 0 3
59397: PUSH
59398: LD_INT 2
59400: EQUAL
59401: IFFALSE 59411
// sSpeed := true ;
59403: LD_ADDR_EXP 42
59407: PUSH
59408: LD_INT 1
59410: ST_TO_ADDR
// if p3 = 3 then
59411: LD_VAR 0 3
59415: PUSH
59416: LD_INT 3
59418: EQUAL
59419: IFFALSE 59429
// sEngine := true ;
59421: LD_ADDR_EXP 44
59425: PUSH
59426: LD_INT 1
59428: ST_TO_ADDR
// if p3 = 4 then
59429: LD_VAR 0 3
59433: PUSH
59434: LD_INT 4
59436: EQUAL
59437: IFFALSE 59447
// sSpec := true ;
59439: LD_ADDR_EXP 41
59443: PUSH
59444: LD_INT 1
59446: ST_TO_ADDR
// if p3 = 5 then
59447: LD_VAR 0 3
59451: PUSH
59452: LD_INT 5
59454: EQUAL
59455: IFFALSE 59465
// sLevel := true ;
59457: LD_ADDR_EXP 45
59461: PUSH
59462: LD_INT 1
59464: ST_TO_ADDR
// if p3 = 6 then
59465: LD_VAR 0 3
59469: PUSH
59470: LD_INT 6
59472: EQUAL
59473: IFFALSE 59483
// sArmoury := true ;
59475: LD_ADDR_EXP 46
59479: PUSH
59480: LD_INT 1
59482: ST_TO_ADDR
// if p3 = 7 then
59483: LD_VAR 0 3
59487: PUSH
59488: LD_INT 7
59490: EQUAL
59491: IFFALSE 59501
// sRadar := true ;
59493: LD_ADDR_EXP 47
59497: PUSH
59498: LD_INT 1
59500: ST_TO_ADDR
// if p3 = 8 then
59501: LD_VAR 0 3
59505: PUSH
59506: LD_INT 8
59508: EQUAL
59509: IFFALSE 59519
// sBunker := true ;
59511: LD_ADDR_EXP 48
59515: PUSH
59516: LD_INT 1
59518: ST_TO_ADDR
// if p3 = 9 then
59519: LD_VAR 0 3
59523: PUSH
59524: LD_INT 9
59526: EQUAL
59527: IFFALSE 59537
// sHack := true ;
59529: LD_ADDR_EXP 49
59533: PUSH
59534: LD_INT 1
59536: ST_TO_ADDR
// if p3 = 10 then
59537: LD_VAR 0 3
59541: PUSH
59542: LD_INT 10
59544: EQUAL
59545: IFFALSE 59555
// sFire := true ;
59547: LD_ADDR_EXP 50
59551: PUSH
59552: LD_INT 1
59554: ST_TO_ADDR
// if p3 = 11 then
59555: LD_VAR 0 3
59559: PUSH
59560: LD_INT 11
59562: EQUAL
59563: IFFALSE 59573
// sRefresh := true ;
59565: LD_ADDR_EXP 51
59569: PUSH
59570: LD_INT 1
59572: ST_TO_ADDR
// if p3 = 12 then
59573: LD_VAR 0 3
59577: PUSH
59578: LD_INT 12
59580: EQUAL
59581: IFFALSE 59591
// sExp := true ;
59583: LD_ADDR_EXP 52
59587: PUSH
59588: LD_INT 1
59590: ST_TO_ADDR
// if p3 = 13 then
59591: LD_VAR 0 3
59595: PUSH
59596: LD_INT 13
59598: EQUAL
59599: IFFALSE 59609
// sDepot := true ;
59601: LD_ADDR_EXP 53
59605: PUSH
59606: LD_INT 1
59608: ST_TO_ADDR
// if p3 = 14 then
59609: LD_VAR 0 3
59613: PUSH
59614: LD_INT 14
59616: EQUAL
59617: IFFALSE 59627
// sFlag := true ;
59619: LD_ADDR_EXP 54
59623: PUSH
59624: LD_INT 1
59626: ST_TO_ADDR
// if p3 = 15 then
59627: LD_VAR 0 3
59631: PUSH
59632: LD_INT 15
59634: EQUAL
59635: IFFALSE 59645
// sKamikadze := true ;
59637: LD_ADDR_EXP 62
59641: PUSH
59642: LD_INT 1
59644: ST_TO_ADDR
// if p3 = 16 then
59645: LD_VAR 0 3
59649: PUSH
59650: LD_INT 16
59652: EQUAL
59653: IFFALSE 59663
// sTroll := true ;
59655: LD_ADDR_EXP 63
59659: PUSH
59660: LD_INT 1
59662: ST_TO_ADDR
// if p3 = 17 then
59663: LD_VAR 0 3
59667: PUSH
59668: LD_INT 17
59670: EQUAL
59671: IFFALSE 59681
// sSlow := true ;
59673: LD_ADDR_EXP 64
59677: PUSH
59678: LD_INT 1
59680: ST_TO_ADDR
// if p3 = 18 then
59681: LD_VAR 0 3
59685: PUSH
59686: LD_INT 18
59688: EQUAL
59689: IFFALSE 59699
// sLack := true ;
59691: LD_ADDR_EXP 65
59695: PUSH
59696: LD_INT 1
59698: ST_TO_ADDR
// if p3 = 19 then
59699: LD_VAR 0 3
59703: PUSH
59704: LD_INT 19
59706: EQUAL
59707: IFFALSE 59717
// sTank := true ;
59709: LD_ADDR_EXP 67
59713: PUSH
59714: LD_INT 1
59716: ST_TO_ADDR
// if p3 = 20 then
59717: LD_VAR 0 3
59721: PUSH
59722: LD_INT 20
59724: EQUAL
59725: IFFALSE 59735
// sRemote := true ;
59727: LD_ADDR_EXP 68
59731: PUSH
59732: LD_INT 1
59734: ST_TO_ADDR
// if p3 = 21 then
59735: LD_VAR 0 3
59739: PUSH
59740: LD_INT 21
59742: EQUAL
59743: IFFALSE 59753
// sPowell := true ;
59745: LD_ADDR_EXP 69
59749: PUSH
59750: LD_INT 1
59752: ST_TO_ADDR
// if p3 = 22 then
59753: LD_VAR 0 3
59757: PUSH
59758: LD_INT 22
59760: EQUAL
59761: IFFALSE 59771
// sTeleport := true ;
59763: LD_ADDR_EXP 72
59767: PUSH
59768: LD_INT 1
59770: ST_TO_ADDR
// if p3 = 23 then
59771: LD_VAR 0 3
59775: PUSH
59776: LD_INT 23
59778: EQUAL
59779: IFFALSE 59789
// sOilTower := true ;
59781: LD_ADDR_EXP 74
59785: PUSH
59786: LD_INT 1
59788: ST_TO_ADDR
// if p3 = 24 then
59789: LD_VAR 0 3
59793: PUSH
59794: LD_INT 24
59796: EQUAL
59797: IFFALSE 59807
// sShovel := true ;
59799: LD_ADDR_EXP 75
59803: PUSH
59804: LD_INT 1
59806: ST_TO_ADDR
// if p3 = 25 then
59807: LD_VAR 0 3
59811: PUSH
59812: LD_INT 25
59814: EQUAL
59815: IFFALSE 59825
// sSheik := true ;
59817: LD_ADDR_EXP 76
59821: PUSH
59822: LD_INT 1
59824: ST_TO_ADDR
// if p3 = 26 then
59825: LD_VAR 0 3
59829: PUSH
59830: LD_INT 26
59832: EQUAL
59833: IFFALSE 59843
// sEarthquake := true ;
59835: LD_ADDR_EXP 78
59839: PUSH
59840: LD_INT 1
59842: ST_TO_ADDR
// if p3 = 27 then
59843: LD_VAR 0 3
59847: PUSH
59848: LD_INT 27
59850: EQUAL
59851: IFFALSE 59861
// sAI := true ;
59853: LD_ADDR_EXP 79
59857: PUSH
59858: LD_INT 1
59860: ST_TO_ADDR
// if p3 = 28 then
59861: LD_VAR 0 3
59865: PUSH
59866: LD_INT 28
59868: EQUAL
59869: IFFALSE 59879
// sCargo := true ;
59871: LD_ADDR_EXP 82
59875: PUSH
59876: LD_INT 1
59878: ST_TO_ADDR
// if p3 = 29 then
59879: LD_VAR 0 3
59883: PUSH
59884: LD_INT 29
59886: EQUAL
59887: IFFALSE 59897
// sDLaser := true ;
59889: LD_ADDR_EXP 83
59893: PUSH
59894: LD_INT 1
59896: ST_TO_ADDR
// if p3 = 30 then
59897: LD_VAR 0 3
59901: PUSH
59902: LD_INT 30
59904: EQUAL
59905: IFFALSE 59915
// sExchange := true ;
59907: LD_ADDR_EXP 84
59911: PUSH
59912: LD_INT 1
59914: ST_TO_ADDR
// if p3 = 31 then
59915: LD_VAR 0 3
59919: PUSH
59920: LD_INT 31
59922: EQUAL
59923: IFFALSE 59933
// sFac := true ;
59925: LD_ADDR_EXP 85
59929: PUSH
59930: LD_INT 1
59932: ST_TO_ADDR
// if p3 = 32 then
59933: LD_VAR 0 3
59937: PUSH
59938: LD_INT 32
59940: EQUAL
59941: IFFALSE 59951
// sPower := true ;
59943: LD_ADDR_EXP 86
59947: PUSH
59948: LD_INT 1
59950: ST_TO_ADDR
// if p3 = 33 then
59951: LD_VAR 0 3
59955: PUSH
59956: LD_INT 33
59958: EQUAL
59959: IFFALSE 59969
// sRandom := true ;
59961: LD_ADDR_EXP 87
59965: PUSH
59966: LD_INT 1
59968: ST_TO_ADDR
// if p3 = 34 then
59969: LD_VAR 0 3
59973: PUSH
59974: LD_INT 34
59976: EQUAL
59977: IFFALSE 59987
// sShield := true ;
59979: LD_ADDR_EXP 88
59983: PUSH
59984: LD_INT 1
59986: ST_TO_ADDR
// if p3 = 35 then
59987: LD_VAR 0 3
59991: PUSH
59992: LD_INT 35
59994: EQUAL
59995: IFFALSE 60005
// sTime := true ;
59997: LD_ADDR_EXP 89
60001: PUSH
60002: LD_INT 1
60004: ST_TO_ADDR
// if p3 = 36 then
60005: LD_VAR 0 3
60009: PUSH
60010: LD_INT 36
60012: EQUAL
60013: IFFALSE 60023
// sTools := true ;
60015: LD_ADDR_EXP 90
60019: PUSH
60020: LD_INT 1
60022: ST_TO_ADDR
// if p3 = 101 then
60023: LD_VAR 0 3
60027: PUSH
60028: LD_INT 101
60030: EQUAL
60031: IFFALSE 60041
// sSold := true ;
60033: LD_ADDR_EXP 55
60037: PUSH
60038: LD_INT 1
60040: ST_TO_ADDR
// if p3 = 102 then
60041: LD_VAR 0 3
60045: PUSH
60046: LD_INT 102
60048: EQUAL
60049: IFFALSE 60059
// sDiff := true ;
60051: LD_ADDR_EXP 56
60055: PUSH
60056: LD_INT 1
60058: ST_TO_ADDR
// if p3 = 103 then
60059: LD_VAR 0 3
60063: PUSH
60064: LD_INT 103
60066: EQUAL
60067: IFFALSE 60077
// sFog := true ;
60069: LD_ADDR_EXP 59
60073: PUSH
60074: LD_INT 1
60076: ST_TO_ADDR
// if p3 = 104 then
60077: LD_VAR 0 3
60081: PUSH
60082: LD_INT 104
60084: EQUAL
60085: IFFALSE 60095
// sReset := true ;
60087: LD_ADDR_EXP 60
60091: PUSH
60092: LD_INT 1
60094: ST_TO_ADDR
// if p3 = 105 then
60095: LD_VAR 0 3
60099: PUSH
60100: LD_INT 105
60102: EQUAL
60103: IFFALSE 60113
// sSun := true ;
60105: LD_ADDR_EXP 61
60109: PUSH
60110: LD_INT 1
60112: ST_TO_ADDR
// if p3 = 106 then
60113: LD_VAR 0 3
60117: PUSH
60118: LD_INT 106
60120: EQUAL
60121: IFFALSE 60131
// sTiger := true ;
60123: LD_ADDR_EXP 57
60127: PUSH
60128: LD_INT 1
60130: ST_TO_ADDR
// if p3 = 107 then
60131: LD_VAR 0 3
60135: PUSH
60136: LD_INT 107
60138: EQUAL
60139: IFFALSE 60149
// sBomb := true ;
60141: LD_ADDR_EXP 58
60145: PUSH
60146: LD_INT 1
60148: ST_TO_ADDR
// if p3 = 108 then
60149: LD_VAR 0 3
60153: PUSH
60154: LD_INT 108
60156: EQUAL
60157: IFFALSE 60167
// sWound := true ;
60159: LD_ADDR_EXP 66
60163: PUSH
60164: LD_INT 1
60166: ST_TO_ADDR
// if p3 = 109 then
60167: LD_VAR 0 3
60171: PUSH
60172: LD_INT 109
60174: EQUAL
60175: IFFALSE 60185
// sBetray := true ;
60177: LD_ADDR_EXP 70
60181: PUSH
60182: LD_INT 1
60184: ST_TO_ADDR
// if p3 = 110 then
60185: LD_VAR 0 3
60189: PUSH
60190: LD_INT 110
60192: EQUAL
60193: IFFALSE 60203
// sContamin := true ;
60195: LD_ADDR_EXP 71
60199: PUSH
60200: LD_INT 1
60202: ST_TO_ADDR
// if p3 = 111 then
60203: LD_VAR 0 3
60207: PUSH
60208: LD_INT 111
60210: EQUAL
60211: IFFALSE 60221
// sOil := true ;
60213: LD_ADDR_EXP 73
60217: PUSH
60218: LD_INT 1
60220: ST_TO_ADDR
// if p3 = 112 then
60221: LD_VAR 0 3
60225: PUSH
60226: LD_INT 112
60228: EQUAL
60229: IFFALSE 60239
// sStu := true ;
60231: LD_ADDR_EXP 77
60235: PUSH
60236: LD_INT 1
60238: ST_TO_ADDR
// if p3 = 113 then
60239: LD_VAR 0 3
60243: PUSH
60244: LD_INT 113
60246: EQUAL
60247: IFFALSE 60257
// sBazooka := true ;
60249: LD_ADDR_EXP 80
60253: PUSH
60254: LD_INT 1
60256: ST_TO_ADDR
// if p3 = 114 then
60257: LD_VAR 0 3
60261: PUSH
60262: LD_INT 114
60264: EQUAL
60265: IFFALSE 60275
// sMortar := true ;
60267: LD_ADDR_EXP 81
60271: PUSH
60272: LD_INT 1
60274: ST_TO_ADDR
// if p3 = 115 then
60275: LD_VAR 0 3
60279: PUSH
60280: LD_INT 115
60282: EQUAL
60283: IFFALSE 60293
// sRanger := true ;
60285: LD_ADDR_EXP 91
60289: PUSH
60290: LD_INT 1
60292: ST_TO_ADDR
// if p3 = 116 then
60293: LD_VAR 0 3
60297: PUSH
60298: LD_INT 116
60300: EQUAL
60301: IFFALSE 60311
// sComputer := true ;
60303: LD_ADDR_EXP 92
60307: PUSH
60308: LD_INT 1
60310: ST_TO_ADDR
// if p3 = 117 then
60311: LD_VAR 0 3
60315: PUSH
60316: LD_INT 117
60318: EQUAL
60319: IFFALSE 60329
// s30 := true ;
60321: LD_ADDR_EXP 93
60325: PUSH
60326: LD_INT 1
60328: ST_TO_ADDR
// if p3 = 118 then
60329: LD_VAR 0 3
60333: PUSH
60334: LD_INT 118
60336: EQUAL
60337: IFFALSE 60347
// s60 := true ;
60339: LD_ADDR_EXP 94
60343: PUSH
60344: LD_INT 1
60346: ST_TO_ADDR
// end ; if p2 = hack_mode then
60347: LD_VAR 0 2
60351: PUSH
60352: LD_INT 101
60354: EQUAL
60355: IFFALSE 60483
// begin case p3 of 1 :
60357: LD_VAR 0 3
60361: PUSH
60362: LD_INT 1
60364: DOUBLE
60365: EQUAL
60366: IFTRUE 60370
60368: GO 60377
60370: POP
// hHackUnlimitedResources ; 2 :
60371: CALL 72746 0 0
60375: GO 60483
60377: LD_INT 2
60379: DOUBLE
60380: EQUAL
60381: IFTRUE 60385
60383: GO 60392
60385: POP
// hHackSetLevel10 ; 3 :
60386: CALL 72879 0 0
60390: GO 60483
60392: LD_INT 3
60394: DOUBLE
60395: EQUAL
60396: IFTRUE 60400
60398: GO 60407
60400: POP
// hHackSetLevel10YourUnits ; 4 :
60401: CALL 72964 0 0
60405: GO 60483
60407: LD_INT 4
60409: DOUBLE
60410: EQUAL
60411: IFTRUE 60415
60413: GO 60422
60415: POP
// hHackInvincible ; 5 :
60416: CALL 73412 0 0
60420: GO 60483
60422: LD_INT 5
60424: DOUBLE
60425: EQUAL
60426: IFTRUE 60430
60428: GO 60437
60430: POP
// hHackInvisible ; 6 :
60431: CALL 73523 0 0
60435: GO 60483
60437: LD_INT 6
60439: DOUBLE
60440: EQUAL
60441: IFTRUE 60445
60443: GO 60452
60445: POP
// hHackChangeYourSide ; 7 :
60446: CALL 73580 0 0
60450: GO 60483
60452: LD_INT 7
60454: DOUBLE
60455: EQUAL
60456: IFTRUE 60460
60458: GO 60467
60460: POP
// hHackChangeUnitSide ; 8 :
60461: CALL 73622 0 0
60465: GO 60483
60467: LD_INT 8
60469: DOUBLE
60470: EQUAL
60471: IFTRUE 60475
60473: GO 60482
60475: POP
// hHackFog ; end ;
60476: CALL 73723 0 0
60480: GO 60483
60482: POP
// end ; if p2 = game_save_mode then
60483: LD_VAR 0 2
60487: PUSH
60488: LD_INT 102
60490: EQUAL
60491: IFFALSE 60548
// begin if p3 = 1 then
60493: LD_VAR 0 3
60497: PUSH
60498: LD_INT 1
60500: EQUAL
60501: IFFALSE 60513
// globalGameSaveCounter := p4 ;
60503: LD_ADDR_EXP 37
60507: PUSH
60508: LD_VAR 0 4
60512: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
60513: LD_VAR 0 3
60517: PUSH
60518: LD_INT 2
60520: EQUAL
60521: IFFALSE 60529
60523: PUSH
60524: LD_EXP 37
60528: AND
60529: IFFALSE 60548
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
60531: LD_STRING setGameSaveCounter(
60533: PUSH
60534: LD_EXP 37
60538: STR
60539: PUSH
60540: LD_STRING )
60542: STR
60543: PPUSH
60544: CALL_OW 559
// end ; end ;
60548: LD_VAR 0 7
60552: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
60553: LD_INT 0
60555: PPUSH
// streamModeActive := false ;
60556: LD_ADDR_EXP 38
60560: PUSH
60561: LD_INT 0
60563: ST_TO_ADDR
// normalCounter := 36 ;
60564: LD_ADDR_EXP 39
60568: PUSH
60569: LD_INT 36
60571: ST_TO_ADDR
// hardcoreCounter := 18 ;
60572: LD_ADDR_EXP 40
60576: PUSH
60577: LD_INT 18
60579: ST_TO_ADDR
// sRocket := false ;
60580: LD_ADDR_EXP 43
60584: PUSH
60585: LD_INT 0
60587: ST_TO_ADDR
// sSpeed := false ;
60588: LD_ADDR_EXP 42
60592: PUSH
60593: LD_INT 0
60595: ST_TO_ADDR
// sEngine := false ;
60596: LD_ADDR_EXP 44
60600: PUSH
60601: LD_INT 0
60603: ST_TO_ADDR
// sSpec := false ;
60604: LD_ADDR_EXP 41
60608: PUSH
60609: LD_INT 0
60611: ST_TO_ADDR
// sLevel := false ;
60612: LD_ADDR_EXP 45
60616: PUSH
60617: LD_INT 0
60619: ST_TO_ADDR
// sArmoury := false ;
60620: LD_ADDR_EXP 46
60624: PUSH
60625: LD_INT 0
60627: ST_TO_ADDR
// sRadar := false ;
60628: LD_ADDR_EXP 47
60632: PUSH
60633: LD_INT 0
60635: ST_TO_ADDR
// sBunker := false ;
60636: LD_ADDR_EXP 48
60640: PUSH
60641: LD_INT 0
60643: ST_TO_ADDR
// sHack := false ;
60644: LD_ADDR_EXP 49
60648: PUSH
60649: LD_INT 0
60651: ST_TO_ADDR
// sFire := false ;
60652: LD_ADDR_EXP 50
60656: PUSH
60657: LD_INT 0
60659: ST_TO_ADDR
// sRefresh := false ;
60660: LD_ADDR_EXP 51
60664: PUSH
60665: LD_INT 0
60667: ST_TO_ADDR
// sExp := false ;
60668: LD_ADDR_EXP 52
60672: PUSH
60673: LD_INT 0
60675: ST_TO_ADDR
// sDepot := false ;
60676: LD_ADDR_EXP 53
60680: PUSH
60681: LD_INT 0
60683: ST_TO_ADDR
// sFlag := false ;
60684: LD_ADDR_EXP 54
60688: PUSH
60689: LD_INT 0
60691: ST_TO_ADDR
// sKamikadze := false ;
60692: LD_ADDR_EXP 62
60696: PUSH
60697: LD_INT 0
60699: ST_TO_ADDR
// sTroll := false ;
60700: LD_ADDR_EXP 63
60704: PUSH
60705: LD_INT 0
60707: ST_TO_ADDR
// sSlow := false ;
60708: LD_ADDR_EXP 64
60712: PUSH
60713: LD_INT 0
60715: ST_TO_ADDR
// sLack := false ;
60716: LD_ADDR_EXP 65
60720: PUSH
60721: LD_INT 0
60723: ST_TO_ADDR
// sTank := false ;
60724: LD_ADDR_EXP 67
60728: PUSH
60729: LD_INT 0
60731: ST_TO_ADDR
// sRemote := false ;
60732: LD_ADDR_EXP 68
60736: PUSH
60737: LD_INT 0
60739: ST_TO_ADDR
// sPowell := false ;
60740: LD_ADDR_EXP 69
60744: PUSH
60745: LD_INT 0
60747: ST_TO_ADDR
// sTeleport := false ;
60748: LD_ADDR_EXP 72
60752: PUSH
60753: LD_INT 0
60755: ST_TO_ADDR
// sOilTower := false ;
60756: LD_ADDR_EXP 74
60760: PUSH
60761: LD_INT 0
60763: ST_TO_ADDR
// sShovel := false ;
60764: LD_ADDR_EXP 75
60768: PUSH
60769: LD_INT 0
60771: ST_TO_ADDR
// sSheik := false ;
60772: LD_ADDR_EXP 76
60776: PUSH
60777: LD_INT 0
60779: ST_TO_ADDR
// sEarthquake := false ;
60780: LD_ADDR_EXP 78
60784: PUSH
60785: LD_INT 0
60787: ST_TO_ADDR
// sAI := false ;
60788: LD_ADDR_EXP 79
60792: PUSH
60793: LD_INT 0
60795: ST_TO_ADDR
// sCargo := false ;
60796: LD_ADDR_EXP 82
60800: PUSH
60801: LD_INT 0
60803: ST_TO_ADDR
// sDLaser := false ;
60804: LD_ADDR_EXP 83
60808: PUSH
60809: LD_INT 0
60811: ST_TO_ADDR
// sExchange := false ;
60812: LD_ADDR_EXP 84
60816: PUSH
60817: LD_INT 0
60819: ST_TO_ADDR
// sFac := false ;
60820: LD_ADDR_EXP 85
60824: PUSH
60825: LD_INT 0
60827: ST_TO_ADDR
// sPower := false ;
60828: LD_ADDR_EXP 86
60832: PUSH
60833: LD_INT 0
60835: ST_TO_ADDR
// sRandom := false ;
60836: LD_ADDR_EXP 87
60840: PUSH
60841: LD_INT 0
60843: ST_TO_ADDR
// sShield := false ;
60844: LD_ADDR_EXP 88
60848: PUSH
60849: LD_INT 0
60851: ST_TO_ADDR
// sTime := false ;
60852: LD_ADDR_EXP 89
60856: PUSH
60857: LD_INT 0
60859: ST_TO_ADDR
// sTools := false ;
60860: LD_ADDR_EXP 90
60864: PUSH
60865: LD_INT 0
60867: ST_TO_ADDR
// sSold := false ;
60868: LD_ADDR_EXP 55
60872: PUSH
60873: LD_INT 0
60875: ST_TO_ADDR
// sDiff := false ;
60876: LD_ADDR_EXP 56
60880: PUSH
60881: LD_INT 0
60883: ST_TO_ADDR
// sFog := false ;
60884: LD_ADDR_EXP 59
60888: PUSH
60889: LD_INT 0
60891: ST_TO_ADDR
// sReset := false ;
60892: LD_ADDR_EXP 60
60896: PUSH
60897: LD_INT 0
60899: ST_TO_ADDR
// sSun := false ;
60900: LD_ADDR_EXP 61
60904: PUSH
60905: LD_INT 0
60907: ST_TO_ADDR
// sTiger := false ;
60908: LD_ADDR_EXP 57
60912: PUSH
60913: LD_INT 0
60915: ST_TO_ADDR
// sBomb := false ;
60916: LD_ADDR_EXP 58
60920: PUSH
60921: LD_INT 0
60923: ST_TO_ADDR
// sWound := false ;
60924: LD_ADDR_EXP 66
60928: PUSH
60929: LD_INT 0
60931: ST_TO_ADDR
// sBetray := false ;
60932: LD_ADDR_EXP 70
60936: PUSH
60937: LD_INT 0
60939: ST_TO_ADDR
// sContamin := false ;
60940: LD_ADDR_EXP 71
60944: PUSH
60945: LD_INT 0
60947: ST_TO_ADDR
// sOil := false ;
60948: LD_ADDR_EXP 73
60952: PUSH
60953: LD_INT 0
60955: ST_TO_ADDR
// sStu := false ;
60956: LD_ADDR_EXP 77
60960: PUSH
60961: LD_INT 0
60963: ST_TO_ADDR
// sBazooka := false ;
60964: LD_ADDR_EXP 80
60968: PUSH
60969: LD_INT 0
60971: ST_TO_ADDR
// sMortar := false ;
60972: LD_ADDR_EXP 81
60976: PUSH
60977: LD_INT 0
60979: ST_TO_ADDR
// sRanger := false ;
60980: LD_ADDR_EXP 91
60984: PUSH
60985: LD_INT 0
60987: ST_TO_ADDR
// sComputer := false ;
60988: LD_ADDR_EXP 92
60992: PUSH
60993: LD_INT 0
60995: ST_TO_ADDR
// s30 := false ;
60996: LD_ADDR_EXP 93
61000: PUSH
61001: LD_INT 0
61003: ST_TO_ADDR
// s60 := false ;
61004: LD_ADDR_EXP 94
61008: PUSH
61009: LD_INT 0
61011: ST_TO_ADDR
// end ;
61012: LD_VAR 0 1
61016: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
61017: LD_INT 0
61019: PPUSH
61020: PPUSH
61021: PPUSH
61022: PPUSH
61023: PPUSH
61024: PPUSH
61025: PPUSH
// result := [ ] ;
61026: LD_ADDR_VAR 0 2
61030: PUSH
61031: EMPTY
61032: ST_TO_ADDR
// if campaign_id = 1 then
61033: LD_OWVAR 69
61037: PUSH
61038: LD_INT 1
61040: EQUAL
61041: IFFALSE 64207
// begin case mission_number of 1 :
61043: LD_OWVAR 70
61047: PUSH
61048: LD_INT 1
61050: DOUBLE
61051: EQUAL
61052: IFTRUE 61056
61054: GO 61132
61056: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
61057: LD_ADDR_VAR 0 2
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: LD_INT 4
61067: PUSH
61068: LD_INT 11
61070: PUSH
61071: LD_INT 12
61073: PUSH
61074: LD_INT 15
61076: PUSH
61077: LD_INT 16
61079: PUSH
61080: LD_INT 22
61082: PUSH
61083: LD_INT 23
61085: PUSH
61086: LD_INT 26
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 101
61102: PUSH
61103: LD_INT 102
61105: PUSH
61106: LD_INT 106
61108: PUSH
61109: LD_INT 116
61111: PUSH
61112: LD_INT 117
61114: PUSH
61115: LD_INT 118
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: ST_TO_ADDR
61130: GO 64205
61132: LD_INT 2
61134: DOUBLE
61135: EQUAL
61136: IFTRUE 61140
61138: GO 61224
61140: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
61141: LD_ADDR_VAR 0 2
61145: PUSH
61146: LD_INT 2
61148: PUSH
61149: LD_INT 4
61151: PUSH
61152: LD_INT 11
61154: PUSH
61155: LD_INT 12
61157: PUSH
61158: LD_INT 15
61160: PUSH
61161: LD_INT 16
61163: PUSH
61164: LD_INT 22
61166: PUSH
61167: LD_INT 23
61169: PUSH
61170: LD_INT 26
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 101
61186: PUSH
61187: LD_INT 102
61189: PUSH
61190: LD_INT 105
61192: PUSH
61193: LD_INT 106
61195: PUSH
61196: LD_INT 108
61198: PUSH
61199: LD_INT 116
61201: PUSH
61202: LD_INT 117
61204: PUSH
61205: LD_INT 118
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: ST_TO_ADDR
61222: GO 64205
61224: LD_INT 3
61226: DOUBLE
61227: EQUAL
61228: IFTRUE 61232
61230: GO 61320
61232: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
61233: LD_ADDR_VAR 0 2
61237: PUSH
61238: LD_INT 2
61240: PUSH
61241: LD_INT 4
61243: PUSH
61244: LD_INT 5
61246: PUSH
61247: LD_INT 11
61249: PUSH
61250: LD_INT 12
61252: PUSH
61253: LD_INT 15
61255: PUSH
61256: LD_INT 16
61258: PUSH
61259: LD_INT 22
61261: PUSH
61262: LD_INT 26
61264: PUSH
61265: LD_INT 36
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 101
61282: PUSH
61283: LD_INT 102
61285: PUSH
61286: LD_INT 105
61288: PUSH
61289: LD_INT 106
61291: PUSH
61292: LD_INT 108
61294: PUSH
61295: LD_INT 116
61297: PUSH
61298: LD_INT 117
61300: PUSH
61301: LD_INT 118
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: ST_TO_ADDR
61318: GO 64205
61320: LD_INT 4
61322: DOUBLE
61323: EQUAL
61324: IFTRUE 61328
61326: GO 61424
61328: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
61329: LD_ADDR_VAR 0 2
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: LD_INT 4
61339: PUSH
61340: LD_INT 5
61342: PUSH
61343: LD_INT 8
61345: PUSH
61346: LD_INT 11
61348: PUSH
61349: LD_INT 12
61351: PUSH
61352: LD_INT 15
61354: PUSH
61355: LD_INT 16
61357: PUSH
61358: LD_INT 22
61360: PUSH
61361: LD_INT 23
61363: PUSH
61364: LD_INT 26
61366: PUSH
61367: LD_INT 36
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 101
61386: PUSH
61387: LD_INT 102
61389: PUSH
61390: LD_INT 105
61392: PUSH
61393: LD_INT 106
61395: PUSH
61396: LD_INT 108
61398: PUSH
61399: LD_INT 116
61401: PUSH
61402: LD_INT 117
61404: PUSH
61405: LD_INT 118
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: ST_TO_ADDR
61422: GO 64205
61424: LD_INT 5
61426: DOUBLE
61427: EQUAL
61428: IFTRUE 61432
61430: GO 61544
61432: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
61433: LD_ADDR_VAR 0 2
61437: PUSH
61438: LD_INT 2
61440: PUSH
61441: LD_INT 4
61443: PUSH
61444: LD_INT 5
61446: PUSH
61447: LD_INT 6
61449: PUSH
61450: LD_INT 8
61452: PUSH
61453: LD_INT 11
61455: PUSH
61456: LD_INT 12
61458: PUSH
61459: LD_INT 15
61461: PUSH
61462: LD_INT 16
61464: PUSH
61465: LD_INT 22
61467: PUSH
61468: LD_INT 23
61470: PUSH
61471: LD_INT 25
61473: PUSH
61474: LD_INT 26
61476: PUSH
61477: LD_INT 36
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 101
61498: PUSH
61499: LD_INT 102
61501: PUSH
61502: LD_INT 105
61504: PUSH
61505: LD_INT 106
61507: PUSH
61508: LD_INT 108
61510: PUSH
61511: LD_INT 109
61513: PUSH
61514: LD_INT 112
61516: PUSH
61517: LD_INT 116
61519: PUSH
61520: LD_INT 117
61522: PUSH
61523: LD_INT 118
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: ST_TO_ADDR
61542: GO 64205
61544: LD_INT 6
61546: DOUBLE
61547: EQUAL
61548: IFTRUE 61552
61550: GO 61684
61552: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
61553: LD_ADDR_VAR 0 2
61557: PUSH
61558: LD_INT 2
61560: PUSH
61561: LD_INT 4
61563: PUSH
61564: LD_INT 5
61566: PUSH
61567: LD_INT 6
61569: PUSH
61570: LD_INT 8
61572: PUSH
61573: LD_INT 11
61575: PUSH
61576: LD_INT 12
61578: PUSH
61579: LD_INT 15
61581: PUSH
61582: LD_INT 16
61584: PUSH
61585: LD_INT 20
61587: PUSH
61588: LD_INT 21
61590: PUSH
61591: LD_INT 22
61593: PUSH
61594: LD_INT 23
61596: PUSH
61597: LD_INT 25
61599: PUSH
61600: LD_INT 26
61602: PUSH
61603: LD_INT 30
61605: PUSH
61606: LD_INT 31
61608: PUSH
61609: LD_INT 32
61611: PUSH
61612: LD_INT 36
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 101
61638: PUSH
61639: LD_INT 102
61641: PUSH
61642: LD_INT 105
61644: PUSH
61645: LD_INT 106
61647: PUSH
61648: LD_INT 108
61650: PUSH
61651: LD_INT 109
61653: PUSH
61654: LD_INT 112
61656: PUSH
61657: LD_INT 116
61659: PUSH
61660: LD_INT 117
61662: PUSH
61663: LD_INT 118
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: ST_TO_ADDR
61682: GO 64205
61684: LD_INT 7
61686: DOUBLE
61687: EQUAL
61688: IFTRUE 61692
61690: GO 61804
61692: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
61693: LD_ADDR_VAR 0 2
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: LD_INT 4
61703: PUSH
61704: LD_INT 5
61706: PUSH
61707: LD_INT 7
61709: PUSH
61710: LD_INT 11
61712: PUSH
61713: LD_INT 12
61715: PUSH
61716: LD_INT 15
61718: PUSH
61719: LD_INT 16
61721: PUSH
61722: LD_INT 20
61724: PUSH
61725: LD_INT 21
61727: PUSH
61728: LD_INT 22
61730: PUSH
61731: LD_INT 23
61733: PUSH
61734: LD_INT 25
61736: PUSH
61737: LD_INT 26
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 101
61758: PUSH
61759: LD_INT 102
61761: PUSH
61762: LD_INT 103
61764: PUSH
61765: LD_INT 105
61767: PUSH
61768: LD_INT 106
61770: PUSH
61771: LD_INT 108
61773: PUSH
61774: LD_INT 112
61776: PUSH
61777: LD_INT 116
61779: PUSH
61780: LD_INT 117
61782: PUSH
61783: LD_INT 118
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: ST_TO_ADDR
61802: GO 64205
61804: LD_INT 8
61806: DOUBLE
61807: EQUAL
61808: IFTRUE 61812
61810: GO 61952
61812: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
61813: LD_ADDR_VAR 0 2
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: LD_INT 4
61823: PUSH
61824: LD_INT 5
61826: PUSH
61827: LD_INT 6
61829: PUSH
61830: LD_INT 7
61832: PUSH
61833: LD_INT 8
61835: PUSH
61836: LD_INT 11
61838: PUSH
61839: LD_INT 12
61841: PUSH
61842: LD_INT 15
61844: PUSH
61845: LD_INT 16
61847: PUSH
61848: LD_INT 20
61850: PUSH
61851: LD_INT 21
61853: PUSH
61854: LD_INT 22
61856: PUSH
61857: LD_INT 23
61859: PUSH
61860: LD_INT 25
61862: PUSH
61863: LD_INT 26
61865: PUSH
61866: LD_INT 30
61868: PUSH
61869: LD_INT 31
61871: PUSH
61872: LD_INT 32
61874: PUSH
61875: LD_INT 36
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 101
61902: PUSH
61903: LD_INT 102
61905: PUSH
61906: LD_INT 103
61908: PUSH
61909: LD_INT 105
61911: PUSH
61912: LD_INT 106
61914: PUSH
61915: LD_INT 108
61917: PUSH
61918: LD_INT 109
61920: PUSH
61921: LD_INT 112
61923: PUSH
61924: LD_INT 116
61926: PUSH
61927: LD_INT 117
61929: PUSH
61930: LD_INT 118
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: ST_TO_ADDR
61950: GO 64205
61952: LD_INT 9
61954: DOUBLE
61955: EQUAL
61956: IFTRUE 61960
61958: GO 62108
61960: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
61961: LD_ADDR_VAR 0 2
61965: PUSH
61966: LD_INT 2
61968: PUSH
61969: LD_INT 4
61971: PUSH
61972: LD_INT 5
61974: PUSH
61975: LD_INT 6
61977: PUSH
61978: LD_INT 7
61980: PUSH
61981: LD_INT 8
61983: PUSH
61984: LD_INT 11
61986: PUSH
61987: LD_INT 12
61989: PUSH
61990: LD_INT 15
61992: PUSH
61993: LD_INT 16
61995: PUSH
61996: LD_INT 20
61998: PUSH
61999: LD_INT 21
62001: PUSH
62002: LD_INT 22
62004: PUSH
62005: LD_INT 23
62007: PUSH
62008: LD_INT 25
62010: PUSH
62011: LD_INT 26
62013: PUSH
62014: LD_INT 28
62016: PUSH
62017: LD_INT 30
62019: PUSH
62020: LD_INT 31
62022: PUSH
62023: LD_INT 32
62025: PUSH
62026: LD_INT 36
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 101
62054: PUSH
62055: LD_INT 102
62057: PUSH
62058: LD_INT 103
62060: PUSH
62061: LD_INT 105
62063: PUSH
62064: LD_INT 106
62066: PUSH
62067: LD_INT 108
62069: PUSH
62070: LD_INT 109
62072: PUSH
62073: LD_INT 112
62075: PUSH
62076: LD_INT 114
62078: PUSH
62079: LD_INT 116
62081: PUSH
62082: LD_INT 117
62084: PUSH
62085: LD_INT 118
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: ST_TO_ADDR
62106: GO 64205
62108: LD_INT 10
62110: DOUBLE
62111: EQUAL
62112: IFTRUE 62116
62114: GO 62312
62116: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
62117: LD_ADDR_VAR 0 2
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: LD_INT 4
62127: PUSH
62128: LD_INT 5
62130: PUSH
62131: LD_INT 6
62133: PUSH
62134: LD_INT 7
62136: PUSH
62137: LD_INT 8
62139: PUSH
62140: LD_INT 9
62142: PUSH
62143: LD_INT 10
62145: PUSH
62146: LD_INT 11
62148: PUSH
62149: LD_INT 12
62151: PUSH
62152: LD_INT 13
62154: PUSH
62155: LD_INT 14
62157: PUSH
62158: LD_INT 15
62160: PUSH
62161: LD_INT 16
62163: PUSH
62164: LD_INT 17
62166: PUSH
62167: LD_INT 18
62169: PUSH
62170: LD_INT 19
62172: PUSH
62173: LD_INT 20
62175: PUSH
62176: LD_INT 21
62178: PUSH
62179: LD_INT 22
62181: PUSH
62182: LD_INT 23
62184: PUSH
62185: LD_INT 24
62187: PUSH
62188: LD_INT 25
62190: PUSH
62191: LD_INT 26
62193: PUSH
62194: LD_INT 28
62196: PUSH
62197: LD_INT 30
62199: PUSH
62200: LD_INT 31
62202: PUSH
62203: LD_INT 32
62205: PUSH
62206: LD_INT 36
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 101
62242: PUSH
62243: LD_INT 102
62245: PUSH
62246: LD_INT 103
62248: PUSH
62249: LD_INT 104
62251: PUSH
62252: LD_INT 105
62254: PUSH
62255: LD_INT 106
62257: PUSH
62258: LD_INT 107
62260: PUSH
62261: LD_INT 108
62263: PUSH
62264: LD_INT 109
62266: PUSH
62267: LD_INT 110
62269: PUSH
62270: LD_INT 111
62272: PUSH
62273: LD_INT 112
62275: PUSH
62276: LD_INT 114
62278: PUSH
62279: LD_INT 116
62281: PUSH
62282: LD_INT 117
62284: PUSH
62285: LD_INT 118
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: ST_TO_ADDR
62310: GO 64205
62312: LD_INT 11
62314: DOUBLE
62315: EQUAL
62316: IFTRUE 62320
62318: GO 62524
62320: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
62321: LD_ADDR_VAR 0 2
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: LD_INT 3
62331: PUSH
62332: LD_INT 4
62334: PUSH
62335: LD_INT 5
62337: PUSH
62338: LD_INT 6
62340: PUSH
62341: LD_INT 7
62343: PUSH
62344: LD_INT 8
62346: PUSH
62347: LD_INT 9
62349: PUSH
62350: LD_INT 10
62352: PUSH
62353: LD_INT 11
62355: PUSH
62356: LD_INT 12
62358: PUSH
62359: LD_INT 13
62361: PUSH
62362: LD_INT 14
62364: PUSH
62365: LD_INT 15
62367: PUSH
62368: LD_INT 16
62370: PUSH
62371: LD_INT 17
62373: PUSH
62374: LD_INT 18
62376: PUSH
62377: LD_INT 19
62379: PUSH
62380: LD_INT 20
62382: PUSH
62383: LD_INT 21
62385: PUSH
62386: LD_INT 22
62388: PUSH
62389: LD_INT 23
62391: PUSH
62392: LD_INT 24
62394: PUSH
62395: LD_INT 25
62397: PUSH
62398: LD_INT 26
62400: PUSH
62401: LD_INT 28
62403: PUSH
62404: LD_INT 30
62406: PUSH
62407: LD_INT 31
62409: PUSH
62410: LD_INT 32
62412: PUSH
62413: LD_INT 34
62415: PUSH
62416: LD_INT 36
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 101
62454: PUSH
62455: LD_INT 102
62457: PUSH
62458: LD_INT 103
62460: PUSH
62461: LD_INT 104
62463: PUSH
62464: LD_INT 105
62466: PUSH
62467: LD_INT 106
62469: PUSH
62470: LD_INT 107
62472: PUSH
62473: LD_INT 108
62475: PUSH
62476: LD_INT 109
62478: PUSH
62479: LD_INT 110
62481: PUSH
62482: LD_INT 111
62484: PUSH
62485: LD_INT 112
62487: PUSH
62488: LD_INT 114
62490: PUSH
62491: LD_INT 116
62493: PUSH
62494: LD_INT 117
62496: PUSH
62497: LD_INT 118
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: ST_TO_ADDR
62522: GO 64205
62524: LD_INT 12
62526: DOUBLE
62527: EQUAL
62528: IFTRUE 62532
62530: GO 62752
62532: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
62533: LD_ADDR_VAR 0 2
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: LD_INT 2
62543: PUSH
62544: LD_INT 3
62546: PUSH
62547: LD_INT 4
62549: PUSH
62550: LD_INT 5
62552: PUSH
62553: LD_INT 6
62555: PUSH
62556: LD_INT 7
62558: PUSH
62559: LD_INT 8
62561: PUSH
62562: LD_INT 9
62564: PUSH
62565: LD_INT 10
62567: PUSH
62568: LD_INT 11
62570: PUSH
62571: LD_INT 12
62573: PUSH
62574: LD_INT 13
62576: PUSH
62577: LD_INT 14
62579: PUSH
62580: LD_INT 15
62582: PUSH
62583: LD_INT 16
62585: PUSH
62586: LD_INT 17
62588: PUSH
62589: LD_INT 18
62591: PUSH
62592: LD_INT 19
62594: PUSH
62595: LD_INT 20
62597: PUSH
62598: LD_INT 21
62600: PUSH
62601: LD_INT 22
62603: PUSH
62604: LD_INT 23
62606: PUSH
62607: LD_INT 24
62609: PUSH
62610: LD_INT 25
62612: PUSH
62613: LD_INT 26
62615: PUSH
62616: LD_INT 27
62618: PUSH
62619: LD_INT 28
62621: PUSH
62622: LD_INT 30
62624: PUSH
62625: LD_INT 31
62627: PUSH
62628: LD_INT 32
62630: PUSH
62631: LD_INT 33
62633: PUSH
62634: LD_INT 34
62636: PUSH
62637: LD_INT 36
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 101
62678: PUSH
62679: LD_INT 102
62681: PUSH
62682: LD_INT 103
62684: PUSH
62685: LD_INT 104
62687: PUSH
62688: LD_INT 105
62690: PUSH
62691: LD_INT 106
62693: PUSH
62694: LD_INT 107
62696: PUSH
62697: LD_INT 108
62699: PUSH
62700: LD_INT 109
62702: PUSH
62703: LD_INT 110
62705: PUSH
62706: LD_INT 111
62708: PUSH
62709: LD_INT 112
62711: PUSH
62712: LD_INT 113
62714: PUSH
62715: LD_INT 114
62717: PUSH
62718: LD_INT 116
62720: PUSH
62721: LD_INT 117
62723: PUSH
62724: LD_INT 118
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: ST_TO_ADDR
62750: GO 64205
62752: LD_INT 13
62754: DOUBLE
62755: EQUAL
62756: IFTRUE 62760
62758: GO 62968
62760: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
62761: LD_ADDR_VAR 0 2
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: LD_INT 2
62771: PUSH
62772: LD_INT 3
62774: PUSH
62775: LD_INT 4
62777: PUSH
62778: LD_INT 5
62780: PUSH
62781: LD_INT 8
62783: PUSH
62784: LD_INT 9
62786: PUSH
62787: LD_INT 10
62789: PUSH
62790: LD_INT 11
62792: PUSH
62793: LD_INT 12
62795: PUSH
62796: LD_INT 14
62798: PUSH
62799: LD_INT 15
62801: PUSH
62802: LD_INT 16
62804: PUSH
62805: LD_INT 17
62807: PUSH
62808: LD_INT 18
62810: PUSH
62811: LD_INT 19
62813: PUSH
62814: LD_INT 20
62816: PUSH
62817: LD_INT 21
62819: PUSH
62820: LD_INT 22
62822: PUSH
62823: LD_INT 23
62825: PUSH
62826: LD_INT 24
62828: PUSH
62829: LD_INT 25
62831: PUSH
62832: LD_INT 26
62834: PUSH
62835: LD_INT 27
62837: PUSH
62838: LD_INT 28
62840: PUSH
62841: LD_INT 30
62843: PUSH
62844: LD_INT 31
62846: PUSH
62847: LD_INT 32
62849: PUSH
62850: LD_INT 33
62852: PUSH
62853: LD_INT 34
62855: PUSH
62856: LD_INT 36
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 101
62894: PUSH
62895: LD_INT 102
62897: PUSH
62898: LD_INT 103
62900: PUSH
62901: LD_INT 104
62903: PUSH
62904: LD_INT 105
62906: PUSH
62907: LD_INT 106
62909: PUSH
62910: LD_INT 107
62912: PUSH
62913: LD_INT 108
62915: PUSH
62916: LD_INT 109
62918: PUSH
62919: LD_INT 110
62921: PUSH
62922: LD_INT 111
62924: PUSH
62925: LD_INT 112
62927: PUSH
62928: LD_INT 113
62930: PUSH
62931: LD_INT 114
62933: PUSH
62934: LD_INT 116
62936: PUSH
62937: LD_INT 117
62939: PUSH
62940: LD_INT 118
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: ST_TO_ADDR
62966: GO 64205
62968: LD_INT 14
62970: DOUBLE
62971: EQUAL
62972: IFTRUE 62976
62974: GO 63200
62976: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
62977: LD_ADDR_VAR 0 2
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: LD_INT 2
62987: PUSH
62988: LD_INT 3
62990: PUSH
62991: LD_INT 4
62993: PUSH
62994: LD_INT 5
62996: PUSH
62997: LD_INT 6
62999: PUSH
63000: LD_INT 7
63002: PUSH
63003: LD_INT 8
63005: PUSH
63006: LD_INT 9
63008: PUSH
63009: LD_INT 10
63011: PUSH
63012: LD_INT 11
63014: PUSH
63015: LD_INT 12
63017: PUSH
63018: LD_INT 13
63020: PUSH
63021: LD_INT 14
63023: PUSH
63024: LD_INT 15
63026: PUSH
63027: LD_INT 16
63029: PUSH
63030: LD_INT 17
63032: PUSH
63033: LD_INT 18
63035: PUSH
63036: LD_INT 19
63038: PUSH
63039: LD_INT 20
63041: PUSH
63042: LD_INT 21
63044: PUSH
63045: LD_INT 22
63047: PUSH
63048: LD_INT 23
63050: PUSH
63051: LD_INT 24
63053: PUSH
63054: LD_INT 25
63056: PUSH
63057: LD_INT 26
63059: PUSH
63060: LD_INT 27
63062: PUSH
63063: LD_INT 28
63065: PUSH
63066: LD_INT 29
63068: PUSH
63069: LD_INT 30
63071: PUSH
63072: LD_INT 31
63074: PUSH
63075: LD_INT 32
63077: PUSH
63078: LD_INT 33
63080: PUSH
63081: LD_INT 34
63083: PUSH
63084: LD_INT 36
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 101
63126: PUSH
63127: LD_INT 102
63129: PUSH
63130: LD_INT 103
63132: PUSH
63133: LD_INT 104
63135: PUSH
63136: LD_INT 105
63138: PUSH
63139: LD_INT 106
63141: PUSH
63142: LD_INT 107
63144: PUSH
63145: LD_INT 108
63147: PUSH
63148: LD_INT 109
63150: PUSH
63151: LD_INT 110
63153: PUSH
63154: LD_INT 111
63156: PUSH
63157: LD_INT 112
63159: PUSH
63160: LD_INT 113
63162: PUSH
63163: LD_INT 114
63165: PUSH
63166: LD_INT 116
63168: PUSH
63169: LD_INT 117
63171: PUSH
63172: LD_INT 118
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: ST_TO_ADDR
63198: GO 64205
63200: LD_INT 15
63202: DOUBLE
63203: EQUAL
63204: IFTRUE 63208
63206: GO 63432
63208: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
63209: LD_ADDR_VAR 0 2
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: LD_INT 3
63222: PUSH
63223: LD_INT 4
63225: PUSH
63226: LD_INT 5
63228: PUSH
63229: LD_INT 6
63231: PUSH
63232: LD_INT 7
63234: PUSH
63235: LD_INT 8
63237: PUSH
63238: LD_INT 9
63240: PUSH
63241: LD_INT 10
63243: PUSH
63244: LD_INT 11
63246: PUSH
63247: LD_INT 12
63249: PUSH
63250: LD_INT 13
63252: PUSH
63253: LD_INT 14
63255: PUSH
63256: LD_INT 15
63258: PUSH
63259: LD_INT 16
63261: PUSH
63262: LD_INT 17
63264: PUSH
63265: LD_INT 18
63267: PUSH
63268: LD_INT 19
63270: PUSH
63271: LD_INT 20
63273: PUSH
63274: LD_INT 21
63276: PUSH
63277: LD_INT 22
63279: PUSH
63280: LD_INT 23
63282: PUSH
63283: LD_INT 24
63285: PUSH
63286: LD_INT 25
63288: PUSH
63289: LD_INT 26
63291: PUSH
63292: LD_INT 27
63294: PUSH
63295: LD_INT 28
63297: PUSH
63298: LD_INT 29
63300: PUSH
63301: LD_INT 30
63303: PUSH
63304: LD_INT 31
63306: PUSH
63307: LD_INT 32
63309: PUSH
63310: LD_INT 33
63312: PUSH
63313: LD_INT 34
63315: PUSH
63316: LD_INT 36
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 101
63358: PUSH
63359: LD_INT 102
63361: PUSH
63362: LD_INT 103
63364: PUSH
63365: LD_INT 104
63367: PUSH
63368: LD_INT 105
63370: PUSH
63371: LD_INT 106
63373: PUSH
63374: LD_INT 107
63376: PUSH
63377: LD_INT 108
63379: PUSH
63380: LD_INT 109
63382: PUSH
63383: LD_INT 110
63385: PUSH
63386: LD_INT 111
63388: PUSH
63389: LD_INT 112
63391: PUSH
63392: LD_INT 113
63394: PUSH
63395: LD_INT 114
63397: PUSH
63398: LD_INT 116
63400: PUSH
63401: LD_INT 117
63403: PUSH
63404: LD_INT 118
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: ST_TO_ADDR
63430: GO 64205
63432: LD_INT 16
63434: DOUBLE
63435: EQUAL
63436: IFTRUE 63440
63438: GO 63576
63440: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
63441: LD_ADDR_VAR 0 2
63445: PUSH
63446: LD_INT 2
63448: PUSH
63449: LD_INT 4
63451: PUSH
63452: LD_INT 5
63454: PUSH
63455: LD_INT 7
63457: PUSH
63458: LD_INT 11
63460: PUSH
63461: LD_INT 12
63463: PUSH
63464: LD_INT 15
63466: PUSH
63467: LD_INT 16
63469: PUSH
63470: LD_INT 20
63472: PUSH
63473: LD_INT 21
63475: PUSH
63476: LD_INT 22
63478: PUSH
63479: LD_INT 23
63481: PUSH
63482: LD_INT 25
63484: PUSH
63485: LD_INT 26
63487: PUSH
63488: LD_INT 30
63490: PUSH
63491: LD_INT 31
63493: PUSH
63494: LD_INT 32
63496: PUSH
63497: LD_INT 33
63499: PUSH
63500: LD_INT 34
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 101
63526: PUSH
63527: LD_INT 102
63529: PUSH
63530: LD_INT 103
63532: PUSH
63533: LD_INT 106
63535: PUSH
63536: LD_INT 108
63538: PUSH
63539: LD_INT 112
63541: PUSH
63542: LD_INT 113
63544: PUSH
63545: LD_INT 114
63547: PUSH
63548: LD_INT 116
63550: PUSH
63551: LD_INT 117
63553: PUSH
63554: LD_INT 118
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: ST_TO_ADDR
63574: GO 64205
63576: LD_INT 17
63578: DOUBLE
63579: EQUAL
63580: IFTRUE 63584
63582: GO 63808
63584: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
63585: LD_ADDR_VAR 0 2
63589: PUSH
63590: LD_INT 1
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: LD_INT 3
63598: PUSH
63599: LD_INT 4
63601: PUSH
63602: LD_INT 5
63604: PUSH
63605: LD_INT 6
63607: PUSH
63608: LD_INT 7
63610: PUSH
63611: LD_INT 8
63613: PUSH
63614: LD_INT 9
63616: PUSH
63617: LD_INT 10
63619: PUSH
63620: LD_INT 11
63622: PUSH
63623: LD_INT 12
63625: PUSH
63626: LD_INT 13
63628: PUSH
63629: LD_INT 14
63631: PUSH
63632: LD_INT 15
63634: PUSH
63635: LD_INT 16
63637: PUSH
63638: LD_INT 17
63640: PUSH
63641: LD_INT 18
63643: PUSH
63644: LD_INT 19
63646: PUSH
63647: LD_INT 20
63649: PUSH
63650: LD_INT 21
63652: PUSH
63653: LD_INT 22
63655: PUSH
63656: LD_INT 23
63658: PUSH
63659: LD_INT 24
63661: PUSH
63662: LD_INT 25
63664: PUSH
63665: LD_INT 26
63667: PUSH
63668: LD_INT 27
63670: PUSH
63671: LD_INT 28
63673: PUSH
63674: LD_INT 29
63676: PUSH
63677: LD_INT 30
63679: PUSH
63680: LD_INT 31
63682: PUSH
63683: LD_INT 32
63685: PUSH
63686: LD_INT 33
63688: PUSH
63689: LD_INT 34
63691: PUSH
63692: LD_INT 36
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 101
63734: PUSH
63735: LD_INT 102
63737: PUSH
63738: LD_INT 103
63740: PUSH
63741: LD_INT 104
63743: PUSH
63744: LD_INT 105
63746: PUSH
63747: LD_INT 106
63749: PUSH
63750: LD_INT 107
63752: PUSH
63753: LD_INT 108
63755: PUSH
63756: LD_INT 109
63758: PUSH
63759: LD_INT 110
63761: PUSH
63762: LD_INT 111
63764: PUSH
63765: LD_INT 112
63767: PUSH
63768: LD_INT 113
63770: PUSH
63771: LD_INT 114
63773: PUSH
63774: LD_INT 116
63776: PUSH
63777: LD_INT 117
63779: PUSH
63780: LD_INT 118
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: ST_TO_ADDR
63806: GO 64205
63808: LD_INT 18
63810: DOUBLE
63811: EQUAL
63812: IFTRUE 63816
63814: GO 63964
63816: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
63817: LD_ADDR_VAR 0 2
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: LD_INT 4
63827: PUSH
63828: LD_INT 5
63830: PUSH
63831: LD_INT 7
63833: PUSH
63834: LD_INT 11
63836: PUSH
63837: LD_INT 12
63839: PUSH
63840: LD_INT 15
63842: PUSH
63843: LD_INT 16
63845: PUSH
63846: LD_INT 20
63848: PUSH
63849: LD_INT 21
63851: PUSH
63852: LD_INT 22
63854: PUSH
63855: LD_INT 23
63857: PUSH
63858: LD_INT 25
63860: PUSH
63861: LD_INT 26
63863: PUSH
63864: LD_INT 30
63866: PUSH
63867: LD_INT 31
63869: PUSH
63870: LD_INT 32
63872: PUSH
63873: LD_INT 33
63875: PUSH
63876: LD_INT 34
63878: PUSH
63879: LD_INT 35
63881: PUSH
63882: LD_INT 36
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 101
63910: PUSH
63911: LD_INT 102
63913: PUSH
63914: LD_INT 103
63916: PUSH
63917: LD_INT 106
63919: PUSH
63920: LD_INT 108
63922: PUSH
63923: LD_INT 112
63925: PUSH
63926: LD_INT 113
63928: PUSH
63929: LD_INT 114
63931: PUSH
63932: LD_INT 115
63934: PUSH
63935: LD_INT 116
63937: PUSH
63938: LD_INT 117
63940: PUSH
63941: LD_INT 118
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: ST_TO_ADDR
63962: GO 64205
63964: LD_INT 19
63966: DOUBLE
63967: EQUAL
63968: IFTRUE 63972
63970: GO 64204
63972: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
63973: LD_ADDR_VAR 0 2
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: LD_INT 3
63986: PUSH
63987: LD_INT 4
63989: PUSH
63990: LD_INT 5
63992: PUSH
63993: LD_INT 6
63995: PUSH
63996: LD_INT 7
63998: PUSH
63999: LD_INT 8
64001: PUSH
64002: LD_INT 9
64004: PUSH
64005: LD_INT 10
64007: PUSH
64008: LD_INT 11
64010: PUSH
64011: LD_INT 12
64013: PUSH
64014: LD_INT 13
64016: PUSH
64017: LD_INT 14
64019: PUSH
64020: LD_INT 15
64022: PUSH
64023: LD_INT 16
64025: PUSH
64026: LD_INT 17
64028: PUSH
64029: LD_INT 18
64031: PUSH
64032: LD_INT 19
64034: PUSH
64035: LD_INT 20
64037: PUSH
64038: LD_INT 21
64040: PUSH
64041: LD_INT 22
64043: PUSH
64044: LD_INT 23
64046: PUSH
64047: LD_INT 24
64049: PUSH
64050: LD_INT 25
64052: PUSH
64053: LD_INT 26
64055: PUSH
64056: LD_INT 27
64058: PUSH
64059: LD_INT 28
64061: PUSH
64062: LD_INT 29
64064: PUSH
64065: LD_INT 30
64067: PUSH
64068: LD_INT 31
64070: PUSH
64071: LD_INT 32
64073: PUSH
64074: LD_INT 33
64076: PUSH
64077: LD_INT 34
64079: PUSH
64080: LD_INT 35
64082: PUSH
64083: LD_INT 36
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 101
64126: PUSH
64127: LD_INT 102
64129: PUSH
64130: LD_INT 103
64132: PUSH
64133: LD_INT 104
64135: PUSH
64136: LD_INT 105
64138: PUSH
64139: LD_INT 106
64141: PUSH
64142: LD_INT 107
64144: PUSH
64145: LD_INT 108
64147: PUSH
64148: LD_INT 109
64150: PUSH
64151: LD_INT 110
64153: PUSH
64154: LD_INT 111
64156: PUSH
64157: LD_INT 112
64159: PUSH
64160: LD_INT 113
64162: PUSH
64163: LD_INT 114
64165: PUSH
64166: LD_INT 115
64168: PUSH
64169: LD_INT 116
64171: PUSH
64172: LD_INT 117
64174: PUSH
64175: LD_INT 118
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: ST_TO_ADDR
64202: GO 64205
64204: POP
// end else
64205: GO 64436
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
64207: LD_ADDR_VAR 0 2
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: LD_INT 2
64217: PUSH
64218: LD_INT 3
64220: PUSH
64221: LD_INT 4
64223: PUSH
64224: LD_INT 5
64226: PUSH
64227: LD_INT 6
64229: PUSH
64230: LD_INT 7
64232: PUSH
64233: LD_INT 8
64235: PUSH
64236: LD_INT 9
64238: PUSH
64239: LD_INT 10
64241: PUSH
64242: LD_INT 11
64244: PUSH
64245: LD_INT 12
64247: PUSH
64248: LD_INT 13
64250: PUSH
64251: LD_INT 14
64253: PUSH
64254: LD_INT 15
64256: PUSH
64257: LD_INT 16
64259: PUSH
64260: LD_INT 17
64262: PUSH
64263: LD_INT 18
64265: PUSH
64266: LD_INT 19
64268: PUSH
64269: LD_INT 20
64271: PUSH
64272: LD_INT 21
64274: PUSH
64275: LD_INT 22
64277: PUSH
64278: LD_INT 23
64280: PUSH
64281: LD_INT 24
64283: PUSH
64284: LD_INT 25
64286: PUSH
64287: LD_INT 26
64289: PUSH
64290: LD_INT 27
64292: PUSH
64293: LD_INT 28
64295: PUSH
64296: LD_INT 29
64298: PUSH
64299: LD_INT 30
64301: PUSH
64302: LD_INT 31
64304: PUSH
64305: LD_INT 32
64307: PUSH
64308: LD_INT 33
64310: PUSH
64311: LD_INT 34
64313: PUSH
64314: LD_INT 35
64316: PUSH
64317: LD_INT 36
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 101
64360: PUSH
64361: LD_INT 102
64363: PUSH
64364: LD_INT 103
64366: PUSH
64367: LD_INT 104
64369: PUSH
64370: LD_INT 105
64372: PUSH
64373: LD_INT 106
64375: PUSH
64376: LD_INT 107
64378: PUSH
64379: LD_INT 108
64381: PUSH
64382: LD_INT 109
64384: PUSH
64385: LD_INT 110
64387: PUSH
64388: LD_INT 111
64390: PUSH
64391: LD_INT 112
64393: PUSH
64394: LD_INT 113
64396: PUSH
64397: LD_INT 114
64399: PUSH
64400: LD_INT 115
64402: PUSH
64403: LD_INT 116
64405: PUSH
64406: LD_INT 117
64408: PUSH
64409: LD_INT 118
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: ST_TO_ADDR
// if result then
64436: LD_VAR 0 2
64440: IFFALSE 65226
// begin normal :=  ;
64442: LD_ADDR_VAR 0 5
64446: PUSH
64447: LD_STRING 
64449: ST_TO_ADDR
// hardcore :=  ;
64450: LD_ADDR_VAR 0 6
64454: PUSH
64455: LD_STRING 
64457: ST_TO_ADDR
// active :=  ;
64458: LD_ADDR_VAR 0 7
64462: PUSH
64463: LD_STRING 
64465: ST_TO_ADDR
// for i = 1 to normalCounter do
64466: LD_ADDR_VAR 0 8
64470: PUSH
64471: DOUBLE
64472: LD_INT 1
64474: DEC
64475: ST_TO_ADDR
64476: LD_EXP 39
64480: PUSH
64481: FOR_TO
64482: IFFALSE 64583
// begin tmp := 0 ;
64484: LD_ADDR_VAR 0 3
64488: PUSH
64489: LD_STRING 0
64491: ST_TO_ADDR
// if result [ 1 ] then
64492: LD_VAR 0 2
64496: PUSH
64497: LD_INT 1
64499: ARRAY
64500: IFFALSE 64565
// if result [ 1 ] [ 1 ] = i then
64502: LD_VAR 0 2
64506: PUSH
64507: LD_INT 1
64509: ARRAY
64510: PUSH
64511: LD_INT 1
64513: ARRAY
64514: PUSH
64515: LD_VAR 0 8
64519: EQUAL
64520: IFFALSE 64565
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
64522: LD_ADDR_VAR 0 2
64526: PUSH
64527: LD_VAR 0 2
64531: PPUSH
64532: LD_INT 1
64534: PPUSH
64535: LD_VAR 0 2
64539: PUSH
64540: LD_INT 1
64542: ARRAY
64543: PPUSH
64544: LD_INT 1
64546: PPUSH
64547: CALL_OW 3
64551: PPUSH
64552: CALL_OW 1
64556: ST_TO_ADDR
// tmp := 1 ;
64557: LD_ADDR_VAR 0 3
64561: PUSH
64562: LD_STRING 1
64564: ST_TO_ADDR
// end ; normal := normal & tmp ;
64565: LD_ADDR_VAR 0 5
64569: PUSH
64570: LD_VAR 0 5
64574: PUSH
64575: LD_VAR 0 3
64579: STR
64580: ST_TO_ADDR
// end ;
64581: GO 64481
64583: POP
64584: POP
// for i = 1 to hardcoreCounter do
64585: LD_ADDR_VAR 0 8
64589: PUSH
64590: DOUBLE
64591: LD_INT 1
64593: DEC
64594: ST_TO_ADDR
64595: LD_EXP 40
64599: PUSH
64600: FOR_TO
64601: IFFALSE 64706
// begin tmp := 0 ;
64603: LD_ADDR_VAR 0 3
64607: PUSH
64608: LD_STRING 0
64610: ST_TO_ADDR
// if result [ 2 ] then
64611: LD_VAR 0 2
64615: PUSH
64616: LD_INT 2
64618: ARRAY
64619: IFFALSE 64688
// if result [ 2 ] [ 1 ] = 100 + i then
64621: LD_VAR 0 2
64625: PUSH
64626: LD_INT 2
64628: ARRAY
64629: PUSH
64630: LD_INT 1
64632: ARRAY
64633: PUSH
64634: LD_INT 100
64636: PUSH
64637: LD_VAR 0 8
64641: PLUS
64642: EQUAL
64643: IFFALSE 64688
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
64645: LD_ADDR_VAR 0 2
64649: PUSH
64650: LD_VAR 0 2
64654: PPUSH
64655: LD_INT 2
64657: PPUSH
64658: LD_VAR 0 2
64662: PUSH
64663: LD_INT 2
64665: ARRAY
64666: PPUSH
64667: LD_INT 1
64669: PPUSH
64670: CALL_OW 3
64674: PPUSH
64675: CALL_OW 1
64679: ST_TO_ADDR
// tmp := 1 ;
64680: LD_ADDR_VAR 0 3
64684: PUSH
64685: LD_STRING 1
64687: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
64688: LD_ADDR_VAR 0 6
64692: PUSH
64693: LD_VAR 0 6
64697: PUSH
64698: LD_VAR 0 3
64702: STR
64703: ST_TO_ADDR
// end ;
64704: GO 64600
64706: POP
64707: POP
// if isGameLoad then
64708: LD_VAR 0 1
64712: IFFALSE 65187
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
64714: LD_ADDR_VAR 0 4
64718: PUSH
64719: LD_EXP 43
64723: PUSH
64724: LD_EXP 42
64728: PUSH
64729: LD_EXP 44
64733: PUSH
64734: LD_EXP 41
64738: PUSH
64739: LD_EXP 45
64743: PUSH
64744: LD_EXP 46
64748: PUSH
64749: LD_EXP 47
64753: PUSH
64754: LD_EXP 48
64758: PUSH
64759: LD_EXP 49
64763: PUSH
64764: LD_EXP 50
64768: PUSH
64769: LD_EXP 51
64773: PUSH
64774: LD_EXP 52
64778: PUSH
64779: LD_EXP 53
64783: PUSH
64784: LD_EXP 54
64788: PUSH
64789: LD_EXP 62
64793: PUSH
64794: LD_EXP 63
64798: PUSH
64799: LD_EXP 64
64803: PUSH
64804: LD_EXP 65
64808: PUSH
64809: LD_EXP 67
64813: PUSH
64814: LD_EXP 68
64818: PUSH
64819: LD_EXP 69
64823: PUSH
64824: LD_EXP 72
64828: PUSH
64829: LD_EXP 74
64833: PUSH
64834: LD_EXP 75
64838: PUSH
64839: LD_EXP 76
64843: PUSH
64844: LD_EXP 78
64848: PUSH
64849: LD_EXP 79
64853: PUSH
64854: LD_EXP 82
64858: PUSH
64859: LD_EXP 83
64863: PUSH
64864: LD_EXP 84
64868: PUSH
64869: LD_EXP 85
64873: PUSH
64874: LD_EXP 86
64878: PUSH
64879: LD_EXP 87
64883: PUSH
64884: LD_EXP 88
64888: PUSH
64889: LD_EXP 89
64893: PUSH
64894: LD_EXP 90
64898: PUSH
64899: LD_EXP 55
64903: PUSH
64904: LD_EXP 56
64908: PUSH
64909: LD_EXP 59
64913: PUSH
64914: LD_EXP 60
64918: PUSH
64919: LD_EXP 61
64923: PUSH
64924: LD_EXP 57
64928: PUSH
64929: LD_EXP 58
64933: PUSH
64934: LD_EXP 66
64938: PUSH
64939: LD_EXP 70
64943: PUSH
64944: LD_EXP 71
64948: PUSH
64949: LD_EXP 73
64953: PUSH
64954: LD_EXP 77
64958: PUSH
64959: LD_EXP 80
64963: PUSH
64964: LD_EXP 81
64968: PUSH
64969: LD_EXP 91
64973: PUSH
64974: LD_EXP 92
64978: PUSH
64979: LD_EXP 93
64983: PUSH
64984: LD_EXP 94
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: ST_TO_ADDR
// tmp :=  ;
65045: LD_ADDR_VAR 0 3
65049: PUSH
65050: LD_STRING 
65052: ST_TO_ADDR
// for i = 1 to normalCounter do
65053: LD_ADDR_VAR 0 8
65057: PUSH
65058: DOUBLE
65059: LD_INT 1
65061: DEC
65062: ST_TO_ADDR
65063: LD_EXP 39
65067: PUSH
65068: FOR_TO
65069: IFFALSE 65105
// begin if flags [ i ] then
65071: LD_VAR 0 4
65075: PUSH
65076: LD_VAR 0 8
65080: ARRAY
65081: IFFALSE 65103
// tmp := tmp & i & ; ;
65083: LD_ADDR_VAR 0 3
65087: PUSH
65088: LD_VAR 0 3
65092: PUSH
65093: LD_VAR 0 8
65097: STR
65098: PUSH
65099: LD_STRING ;
65101: STR
65102: ST_TO_ADDR
// end ;
65103: GO 65068
65105: POP
65106: POP
// for i = 1 to hardcoreCounter do
65107: LD_ADDR_VAR 0 8
65111: PUSH
65112: DOUBLE
65113: LD_INT 1
65115: DEC
65116: ST_TO_ADDR
65117: LD_EXP 40
65121: PUSH
65122: FOR_TO
65123: IFFALSE 65169
// begin if flags [ normalCounter + i ] then
65125: LD_VAR 0 4
65129: PUSH
65130: LD_EXP 39
65134: PUSH
65135: LD_VAR 0 8
65139: PLUS
65140: ARRAY
65141: IFFALSE 65167
// tmp := tmp & ( 100 + i ) & ; ;
65143: LD_ADDR_VAR 0 3
65147: PUSH
65148: LD_VAR 0 3
65152: PUSH
65153: LD_INT 100
65155: PUSH
65156: LD_VAR 0 8
65160: PLUS
65161: STR
65162: PUSH
65163: LD_STRING ;
65165: STR
65166: ST_TO_ADDR
// end ;
65167: GO 65122
65169: POP
65170: POP
// if tmp then
65171: LD_VAR 0 3
65175: IFFALSE 65187
// active := tmp ;
65177: LD_ADDR_VAR 0 7
65181: PUSH
65182: LD_VAR 0 3
65186: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
65187: LD_STRING getStreamItemsFromMission("
65189: PUSH
65190: LD_VAR 0 5
65194: STR
65195: PUSH
65196: LD_STRING ","
65198: STR
65199: PUSH
65200: LD_VAR 0 6
65204: STR
65205: PUSH
65206: LD_STRING ","
65208: STR
65209: PUSH
65210: LD_VAR 0 7
65214: STR
65215: PUSH
65216: LD_STRING ")
65218: STR
65219: PPUSH
65220: CALL_OW 559
// end else
65224: GO 65233
// ToLua ( getStreamItemsFromMission("","","") ) ;
65226: LD_STRING getStreamItemsFromMission("","","")
65228: PPUSH
65229: CALL_OW 559
// end ;
65233: LD_VAR 0 2
65237: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
65238: LD_EXP 38
65242: IFFALSE 65250
65244: PUSH
65245: LD_EXP 43
65249: AND
65250: IFFALSE 65374
65252: GO 65254
65254: DISABLE
65255: LD_INT 0
65257: PPUSH
65258: PPUSH
// begin enable ;
65259: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
65260: LD_ADDR_VAR 0 2
65264: PUSH
65265: LD_INT 22
65267: PUSH
65268: LD_OWVAR 2
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: LD_INT 34
65282: PUSH
65283: LD_INT 7
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 34
65292: PUSH
65293: LD_INT 45
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 34
65302: PUSH
65303: LD_INT 28
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 34
65312: PUSH
65313: LD_INT 47
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PPUSH
65331: CALL_OW 69
65335: ST_TO_ADDR
// if not tmp then
65336: LD_VAR 0 2
65340: NOT
65341: IFFALSE 65345
// exit ;
65343: GO 65374
// for i in tmp do
65345: LD_ADDR_VAR 0 1
65349: PUSH
65350: LD_VAR 0 2
65354: PUSH
65355: FOR_IN
65356: IFFALSE 65372
// begin SetLives ( i , 0 ) ;
65358: LD_VAR 0 1
65362: PPUSH
65363: LD_INT 0
65365: PPUSH
65366: CALL_OW 234
// end ;
65370: GO 65355
65372: POP
65373: POP
// end ;
65374: PPOPN 2
65376: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
65377: LD_EXP 38
65381: IFFALSE 65389
65383: PUSH
65384: LD_EXP 44
65388: AND
65389: IFFALSE 65473
65391: GO 65393
65393: DISABLE
65394: LD_INT 0
65396: PPUSH
65397: PPUSH
// begin enable ;
65398: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
65399: LD_ADDR_VAR 0 2
65403: PUSH
65404: LD_INT 22
65406: PUSH
65407: LD_OWVAR 2
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 32
65418: PUSH
65419: LD_INT 3
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PPUSH
65430: CALL_OW 69
65434: ST_TO_ADDR
// if not tmp then
65435: LD_VAR 0 2
65439: NOT
65440: IFFALSE 65444
// exit ;
65442: GO 65473
// for i in tmp do
65444: LD_ADDR_VAR 0 1
65448: PUSH
65449: LD_VAR 0 2
65453: PUSH
65454: FOR_IN
65455: IFFALSE 65471
// begin SetLives ( i , 0 ) ;
65457: LD_VAR 0 1
65461: PPUSH
65462: LD_INT 0
65464: PPUSH
65465: CALL_OW 234
// end ;
65469: GO 65454
65471: POP
65472: POP
// end ;
65473: PPOPN 2
65475: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
65476: LD_EXP 38
65480: IFFALSE 65488
65482: PUSH
65483: LD_EXP 41
65487: AND
65488: IFFALSE 65581
65490: GO 65492
65492: DISABLE
65493: LD_INT 0
65495: PPUSH
// begin enable ;
65496: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
65497: LD_ADDR_VAR 0 1
65501: PUSH
65502: LD_INT 22
65504: PUSH
65505: LD_OWVAR 2
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 2
65516: PUSH
65517: LD_INT 25
65519: PUSH
65520: LD_INT 5
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 25
65529: PUSH
65530: LD_INT 9
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 25
65539: PUSH
65540: LD_INT 8
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PPUSH
65557: CALL_OW 69
65561: PUSH
65562: FOR_IN
65563: IFFALSE 65579
// begin SetClass ( i , 1 ) ;
65565: LD_VAR 0 1
65569: PPUSH
65570: LD_INT 1
65572: PPUSH
65573: CALL_OW 336
// end ;
65577: GO 65562
65579: POP
65580: POP
// end ;
65581: PPOPN 1
65583: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
65584: LD_EXP 38
65588: IFFALSE 65596
65590: PUSH
65591: LD_EXP 42
65595: AND
65596: IFFALSE 65608
65598: PUSH
65599: LD_OWVAR 65
65603: PUSH
65604: LD_INT 7
65606: LESS
65607: AND
65608: IFFALSE 65622
65610: GO 65612
65612: DISABLE
// begin enable ;
65613: ENABLE
// game_speed := 7 ;
65614: LD_ADDR_OWVAR 65
65618: PUSH
65619: LD_INT 7
65621: ST_TO_ADDR
// end ;
65622: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
65623: LD_EXP 38
65627: IFFALSE 65635
65629: PUSH
65630: LD_EXP 45
65634: AND
65635: IFFALSE 65837
65637: GO 65639
65639: DISABLE
65640: LD_INT 0
65642: PPUSH
65643: PPUSH
65644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65645: LD_ADDR_VAR 0 3
65649: PUSH
65650: LD_INT 81
65652: PUSH
65653: LD_OWVAR 2
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 21
65664: PUSH
65665: LD_INT 1
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PPUSH
65676: CALL_OW 69
65680: ST_TO_ADDR
// if not tmp then
65681: LD_VAR 0 3
65685: NOT
65686: IFFALSE 65690
// exit ;
65688: GO 65837
// if tmp > 5 then
65690: LD_VAR 0 3
65694: PUSH
65695: LD_INT 5
65697: GREATER
65698: IFFALSE 65710
// k := 5 else
65700: LD_ADDR_VAR 0 2
65704: PUSH
65705: LD_INT 5
65707: ST_TO_ADDR
65708: GO 65720
// k := tmp ;
65710: LD_ADDR_VAR 0 2
65714: PUSH
65715: LD_VAR 0 3
65719: ST_TO_ADDR
// for i := 1 to k do
65720: LD_ADDR_VAR 0 1
65724: PUSH
65725: DOUBLE
65726: LD_INT 1
65728: DEC
65729: ST_TO_ADDR
65730: LD_VAR 0 2
65734: PUSH
65735: FOR_TO
65736: IFFALSE 65835
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
65738: LD_VAR 0 3
65742: PUSH
65743: LD_VAR 0 1
65747: ARRAY
65748: PPUSH
65749: LD_VAR 0 1
65753: PUSH
65754: LD_INT 4
65756: MOD
65757: PUSH
65758: LD_INT 1
65760: PLUS
65761: PPUSH
65762: CALL_OW 259
65766: PUSH
65767: LD_INT 10
65769: LESS
65770: IFFALSE 65833
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
65772: LD_VAR 0 3
65776: PUSH
65777: LD_VAR 0 1
65781: ARRAY
65782: PPUSH
65783: LD_VAR 0 1
65787: PUSH
65788: LD_INT 4
65790: MOD
65791: PUSH
65792: LD_INT 1
65794: PLUS
65795: PPUSH
65796: LD_VAR 0 3
65800: PUSH
65801: LD_VAR 0 1
65805: ARRAY
65806: PPUSH
65807: LD_VAR 0 1
65811: PUSH
65812: LD_INT 4
65814: MOD
65815: PUSH
65816: LD_INT 1
65818: PLUS
65819: PPUSH
65820: CALL_OW 259
65824: PUSH
65825: LD_INT 1
65827: PLUS
65828: PPUSH
65829: CALL_OW 237
65833: GO 65735
65835: POP
65836: POP
// end ;
65837: PPOPN 3
65839: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
65840: LD_EXP 38
65844: IFFALSE 65852
65846: PUSH
65847: LD_EXP 46
65851: AND
65852: IFFALSE 65872
65854: GO 65856
65856: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
65857: LD_INT 4
65859: PPUSH
65860: LD_OWVAR 2
65864: PPUSH
65865: LD_INT 0
65867: PPUSH
65868: CALL_OW 324
65872: END
// every 0 0$1 trigger StreamModeActive and sShovel do
65873: LD_EXP 38
65877: IFFALSE 65885
65879: PUSH
65880: LD_EXP 75
65884: AND
65885: IFFALSE 65905
65887: GO 65889
65889: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
65890: LD_INT 19
65892: PPUSH
65893: LD_OWVAR 2
65897: PPUSH
65898: LD_INT 0
65900: PPUSH
65901: CALL_OW 324
65905: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
65906: LD_EXP 38
65910: IFFALSE 65918
65912: PUSH
65913: LD_EXP 47
65917: AND
65918: IFFALSE 66020
65920: GO 65922
65922: DISABLE
65923: LD_INT 0
65925: PPUSH
65926: PPUSH
// begin enable ;
65927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
65928: LD_ADDR_VAR 0 2
65932: PUSH
65933: LD_INT 22
65935: PUSH
65936: LD_OWVAR 2
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 2
65947: PUSH
65948: LD_INT 34
65950: PUSH
65951: LD_INT 11
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 34
65960: PUSH
65961: LD_INT 30
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: LIST
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PPUSH
65977: CALL_OW 69
65981: ST_TO_ADDR
// if not tmp then
65982: LD_VAR 0 2
65986: NOT
65987: IFFALSE 65991
// exit ;
65989: GO 66020
// for i in tmp do
65991: LD_ADDR_VAR 0 1
65995: PUSH
65996: LD_VAR 0 2
66000: PUSH
66001: FOR_IN
66002: IFFALSE 66018
// begin SetLives ( i , 0 ) ;
66004: LD_VAR 0 1
66008: PPUSH
66009: LD_INT 0
66011: PPUSH
66012: CALL_OW 234
// end ;
66016: GO 66001
66018: POP
66019: POP
// end ;
66020: PPOPN 2
66022: END
// every 0 0$1 trigger StreamModeActive and sBunker do
66023: LD_EXP 38
66027: IFFALSE 66035
66029: PUSH
66030: LD_EXP 48
66034: AND
66035: IFFALSE 66055
66037: GO 66039
66039: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
66040: LD_INT 32
66042: PPUSH
66043: LD_OWVAR 2
66047: PPUSH
66048: LD_INT 0
66050: PPUSH
66051: CALL_OW 324
66055: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
66056: LD_EXP 38
66060: IFFALSE 66068
66062: PUSH
66063: LD_EXP 49
66067: AND
66068: IFFALSE 66251
66070: GO 66072
66072: DISABLE
66073: LD_INT 0
66075: PPUSH
66076: PPUSH
66077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
66078: LD_ADDR_VAR 0 2
66082: PUSH
66083: LD_INT 22
66085: PUSH
66086: LD_OWVAR 2
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 33
66097: PUSH
66098: LD_INT 3
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PPUSH
66109: CALL_OW 69
66113: ST_TO_ADDR
// if not tmp then
66114: LD_VAR 0 2
66118: NOT
66119: IFFALSE 66123
// exit ;
66121: GO 66251
// side := 0 ;
66123: LD_ADDR_VAR 0 3
66127: PUSH
66128: LD_INT 0
66130: ST_TO_ADDR
// for i := 1 to 8 do
66131: LD_ADDR_VAR 0 1
66135: PUSH
66136: DOUBLE
66137: LD_INT 1
66139: DEC
66140: ST_TO_ADDR
66141: LD_INT 8
66143: PUSH
66144: FOR_TO
66145: IFFALSE 66195
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
66147: LD_OWVAR 2
66151: PUSH
66152: LD_VAR 0 1
66156: NONEQUAL
66157: IFFALSE 66179
66159: PUSH
66160: LD_OWVAR 2
66164: PPUSH
66165: LD_VAR 0 1
66169: PPUSH
66170: CALL_OW 81
66174: PUSH
66175: LD_INT 2
66177: EQUAL
66178: AND
66179: IFFALSE 66193
// begin side := i ;
66181: LD_ADDR_VAR 0 3
66185: PUSH
66186: LD_VAR 0 1
66190: ST_TO_ADDR
// break ;
66191: GO 66195
// end ;
66193: GO 66144
66195: POP
66196: POP
// if not side then
66197: LD_VAR 0 3
66201: NOT
66202: IFFALSE 66206
// exit ;
66204: GO 66251
// for i := 1 to tmp do
66206: LD_ADDR_VAR 0 1
66210: PUSH
66211: DOUBLE
66212: LD_INT 1
66214: DEC
66215: ST_TO_ADDR
66216: LD_VAR 0 2
66220: PUSH
66221: FOR_TO
66222: IFFALSE 66249
// if Prob ( 60 ) then
66224: LD_INT 60
66226: PPUSH
66227: CALL_OW 13
66231: IFFALSE 66247
// SetSide ( i , side ) ;
66233: LD_VAR 0 1
66237: PPUSH
66238: LD_VAR 0 3
66242: PPUSH
66243: CALL_OW 235
66247: GO 66221
66249: POP
66250: POP
// end ;
66251: PPOPN 3
66253: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
66254: LD_EXP 38
66258: IFFALSE 66266
66260: PUSH
66261: LD_EXP 51
66265: AND
66266: IFFALSE 66385
66268: GO 66270
66270: DISABLE
66271: LD_INT 0
66273: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
66274: LD_ADDR_VAR 0 1
66278: PUSH
66279: LD_INT 22
66281: PUSH
66282: LD_OWVAR 2
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 21
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 3
66303: PUSH
66304: LD_INT 23
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: PPUSH
66323: CALL_OW 69
66327: PUSH
66328: FOR_IN
66329: IFFALSE 66383
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
66331: LD_VAR 0 1
66335: PPUSH
66336: CALL_OW 257
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: LD_INT 2
66346: PUSH
66347: LD_INT 3
66349: PUSH
66350: LD_INT 4
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: IN
66359: IFFALSE 66381
// SetClass ( un , rand ( 1 , 4 ) ) ;
66361: LD_VAR 0 1
66365: PPUSH
66366: LD_INT 1
66368: PPUSH
66369: LD_INT 4
66371: PPUSH
66372: CALL_OW 12
66376: PPUSH
66377: CALL_OW 336
66381: GO 66328
66383: POP
66384: POP
// end ;
66385: PPOPN 1
66387: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
66388: LD_EXP 38
66392: IFFALSE 66400
66394: PUSH
66395: LD_EXP 50
66399: AND
66400: IFFALSE 66479
66402: GO 66404
66404: DISABLE
66405: LD_INT 0
66407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66408: LD_ADDR_VAR 0 1
66412: PUSH
66413: LD_INT 22
66415: PUSH
66416: LD_OWVAR 2
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 21
66427: PUSH
66428: LD_INT 3
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PPUSH
66439: CALL_OW 69
66443: ST_TO_ADDR
// if not tmp then
66444: LD_VAR 0 1
66448: NOT
66449: IFFALSE 66453
// exit ;
66451: GO 66479
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
66453: LD_VAR 0 1
66457: PUSH
66458: LD_INT 1
66460: PPUSH
66461: LD_VAR 0 1
66465: PPUSH
66466: CALL_OW 12
66470: ARRAY
66471: PPUSH
66472: LD_INT 100
66474: PPUSH
66475: CALL_OW 234
// end ;
66479: PPOPN 1
66481: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
66482: LD_EXP 38
66486: IFFALSE 66494
66488: PUSH
66489: LD_EXP 52
66493: AND
66494: IFFALSE 66592
66496: GO 66498
66498: DISABLE
66499: LD_INT 0
66501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66502: LD_ADDR_VAR 0 1
66506: PUSH
66507: LD_INT 22
66509: PUSH
66510: LD_OWVAR 2
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 21
66521: PUSH
66522: LD_INT 1
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PPUSH
66533: CALL_OW 69
66537: ST_TO_ADDR
// if not tmp then
66538: LD_VAR 0 1
66542: NOT
66543: IFFALSE 66547
// exit ;
66545: GO 66592
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
66547: LD_VAR 0 1
66551: PUSH
66552: LD_INT 1
66554: PPUSH
66555: LD_VAR 0 1
66559: PPUSH
66560: CALL_OW 12
66564: ARRAY
66565: PPUSH
66566: LD_INT 1
66568: PPUSH
66569: LD_INT 4
66571: PPUSH
66572: CALL_OW 12
66576: PPUSH
66577: LD_INT 3000
66579: PPUSH
66580: LD_INT 9000
66582: PPUSH
66583: CALL_OW 12
66587: PPUSH
66588: CALL_OW 492
// end ;
66592: PPOPN 1
66594: END
// every 0 0$1 trigger StreamModeActive and sDepot do
66595: LD_EXP 38
66599: IFFALSE 66607
66601: PUSH
66602: LD_EXP 53
66606: AND
66607: IFFALSE 66627
66609: GO 66611
66611: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
66612: LD_INT 1
66614: PPUSH
66615: LD_OWVAR 2
66619: PPUSH
66620: LD_INT 0
66622: PPUSH
66623: CALL_OW 324
66627: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
66628: LD_EXP 38
66632: IFFALSE 66640
66634: PUSH
66635: LD_EXP 54
66639: AND
66640: IFFALSE 66723
66642: GO 66644
66644: DISABLE
66645: LD_INT 0
66647: PPUSH
66648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66649: LD_ADDR_VAR 0 2
66653: PUSH
66654: LD_INT 22
66656: PUSH
66657: LD_OWVAR 2
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 21
66668: PUSH
66669: LD_INT 3
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PPUSH
66680: CALL_OW 69
66684: ST_TO_ADDR
// if not tmp then
66685: LD_VAR 0 2
66689: NOT
66690: IFFALSE 66694
// exit ;
66692: GO 66723
// for i in tmp do
66694: LD_ADDR_VAR 0 1
66698: PUSH
66699: LD_VAR 0 2
66703: PUSH
66704: FOR_IN
66705: IFFALSE 66721
// SetBLevel ( i , 10 ) ;
66707: LD_VAR 0 1
66711: PPUSH
66712: LD_INT 10
66714: PPUSH
66715: CALL_OW 241
66719: GO 66704
66721: POP
66722: POP
// end ;
66723: PPOPN 2
66725: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
66726: LD_EXP 38
66730: IFFALSE 66738
66732: PUSH
66733: LD_EXP 55
66737: AND
66738: IFFALSE 66849
66740: GO 66742
66742: DISABLE
66743: LD_INT 0
66745: PPUSH
66746: PPUSH
66747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66748: LD_ADDR_VAR 0 3
66752: PUSH
66753: LD_INT 22
66755: PUSH
66756: LD_OWVAR 2
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 25
66767: PUSH
66768: LD_INT 1
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PPUSH
66779: CALL_OW 69
66783: ST_TO_ADDR
// if not tmp then
66784: LD_VAR 0 3
66788: NOT
66789: IFFALSE 66793
// exit ;
66791: GO 66849
// un := tmp [ rand ( 1 , tmp ) ] ;
66793: LD_ADDR_VAR 0 2
66797: PUSH
66798: LD_VAR 0 3
66802: PUSH
66803: LD_INT 1
66805: PPUSH
66806: LD_VAR 0 3
66810: PPUSH
66811: CALL_OW 12
66815: ARRAY
66816: ST_TO_ADDR
// if Crawls ( un ) then
66817: LD_VAR 0 2
66821: PPUSH
66822: CALL_OW 318
66826: IFFALSE 66837
// ComWalk ( un ) ;
66828: LD_VAR 0 2
66832: PPUSH
66833: CALL_OW 138
// SetClass ( un , class_sniper ) ;
66837: LD_VAR 0 2
66841: PPUSH
66842: LD_INT 5
66844: PPUSH
66845: CALL_OW 336
// end ;
66849: PPOPN 3
66851: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
66852: LD_EXP 38
66856: IFFALSE 66864
66858: PUSH
66859: LD_EXP 56
66863: AND
66864: IFFALSE 66876
66866: PUSH
66867: LD_OWVAR 67
66871: PUSH
66872: LD_INT 4
66874: LESS
66875: AND
66876: IFFALSE 66895
66878: GO 66880
66880: DISABLE
// begin Difficulty := Difficulty + 1 ;
66881: LD_ADDR_OWVAR 67
66885: PUSH
66886: LD_OWVAR 67
66890: PUSH
66891: LD_INT 1
66893: PLUS
66894: ST_TO_ADDR
// end ;
66895: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
66896: LD_EXP 38
66900: IFFALSE 66908
66902: PUSH
66903: LD_EXP 57
66907: AND
66908: IFFALSE 67011
66910: GO 66912
66912: DISABLE
66913: LD_INT 0
66915: PPUSH
// begin for i := 1 to 5 do
66916: LD_ADDR_VAR 0 1
66920: PUSH
66921: DOUBLE
66922: LD_INT 1
66924: DEC
66925: ST_TO_ADDR
66926: LD_INT 5
66928: PUSH
66929: FOR_TO
66930: IFFALSE 67009
// begin uc_nation := nation_nature ;
66932: LD_ADDR_OWVAR 21
66936: PUSH
66937: LD_INT 0
66939: ST_TO_ADDR
// uc_side := 0 ;
66940: LD_ADDR_OWVAR 20
66944: PUSH
66945: LD_INT 0
66947: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66948: LD_ADDR_OWVAR 29
66952: PUSH
66953: LD_INT 12
66955: PUSH
66956: LD_INT 12
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: ST_TO_ADDR
// hc_agressivity := 20 ;
66963: LD_ADDR_OWVAR 35
66967: PUSH
66968: LD_INT 20
66970: ST_TO_ADDR
// hc_class := class_tiger ;
66971: LD_ADDR_OWVAR 28
66975: PUSH
66976: LD_INT 14
66978: ST_TO_ADDR
// hc_gallery :=  ;
66979: LD_ADDR_OWVAR 33
66983: PUSH
66984: LD_STRING 
66986: ST_TO_ADDR
// hc_name :=  ;
66987: LD_ADDR_OWVAR 26
66991: PUSH
66992: LD_STRING 
66994: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
66995: CALL_OW 44
66999: PPUSH
67000: LD_INT 0
67002: PPUSH
67003: CALL_OW 51
// end ;
67007: GO 66929
67009: POP
67010: POP
// end ;
67011: PPOPN 1
67013: END
// every 0 0$1 trigger StreamModeActive and sBomb do
67014: LD_EXP 38
67018: IFFALSE 67026
67020: PUSH
67021: LD_EXP 58
67025: AND
67026: IFFALSE 67035
67028: GO 67030
67030: DISABLE
// StreamSibBomb ;
67031: CALL 67036 0 0
67035: END
// export function StreamSibBomb ; var i , x , y ; begin
67036: LD_INT 0
67038: PPUSH
67039: PPUSH
67040: PPUSH
67041: PPUSH
// result := false ;
67042: LD_ADDR_VAR 0 1
67046: PUSH
67047: LD_INT 0
67049: ST_TO_ADDR
// for i := 1 to 16 do
67050: LD_ADDR_VAR 0 2
67054: PUSH
67055: DOUBLE
67056: LD_INT 1
67058: DEC
67059: ST_TO_ADDR
67060: LD_INT 16
67062: PUSH
67063: FOR_TO
67064: IFFALSE 67263
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67066: LD_ADDR_VAR 0 3
67070: PUSH
67071: LD_INT 10
67073: PUSH
67074: LD_INT 20
67076: PUSH
67077: LD_INT 30
67079: PUSH
67080: LD_INT 40
67082: PUSH
67083: LD_INT 50
67085: PUSH
67086: LD_INT 60
67088: PUSH
67089: LD_INT 70
67091: PUSH
67092: LD_INT 80
67094: PUSH
67095: LD_INT 90
67097: PUSH
67098: LD_INT 100
67100: PUSH
67101: LD_INT 110
67103: PUSH
67104: LD_INT 120
67106: PUSH
67107: LD_INT 130
67109: PUSH
67110: LD_INT 140
67112: PUSH
67113: LD_INT 150
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 1
67135: PPUSH
67136: LD_INT 15
67138: PPUSH
67139: CALL_OW 12
67143: ARRAY
67144: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67145: LD_ADDR_VAR 0 4
67149: PUSH
67150: LD_INT 10
67152: PUSH
67153: LD_INT 20
67155: PUSH
67156: LD_INT 30
67158: PUSH
67159: LD_INT 40
67161: PUSH
67162: LD_INT 50
67164: PUSH
67165: LD_INT 60
67167: PUSH
67168: LD_INT 70
67170: PUSH
67171: LD_INT 80
67173: PUSH
67174: LD_INT 90
67176: PUSH
67177: LD_INT 100
67179: PUSH
67180: LD_INT 110
67182: PUSH
67183: LD_INT 120
67185: PUSH
67186: LD_INT 130
67188: PUSH
67189: LD_INT 140
67191: PUSH
67192: LD_INT 150
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 1
67214: PPUSH
67215: LD_INT 15
67217: PPUSH
67218: CALL_OW 12
67222: ARRAY
67223: ST_TO_ADDR
// if ValidHex ( x , y ) then
67224: LD_VAR 0 3
67228: PPUSH
67229: LD_VAR 0 4
67233: PPUSH
67234: CALL_OW 488
67238: IFFALSE 67261
// begin result := [ x , y ] ;
67240: LD_ADDR_VAR 0 1
67244: PUSH
67245: LD_VAR 0 3
67249: PUSH
67250: LD_VAR 0 4
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: ST_TO_ADDR
// break ;
67259: GO 67263
// end ; end ;
67261: GO 67063
67263: POP
67264: POP
// if result then
67265: LD_VAR 0 1
67269: IFFALSE 67329
// begin ToLua ( playSibBomb() ) ;
67271: LD_STRING playSibBomb()
67273: PPUSH
67274: CALL_OW 559
// wait ( 0 0$14 ) ;
67278: LD_INT 490
67280: PPUSH
67281: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
67285: LD_VAR 0 1
67289: PUSH
67290: LD_INT 1
67292: ARRAY
67293: PPUSH
67294: LD_VAR 0 1
67298: PUSH
67299: LD_INT 2
67301: ARRAY
67302: PPUSH
67303: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
67307: LD_VAR 0 1
67311: PUSH
67312: LD_INT 1
67314: ARRAY
67315: PPUSH
67316: LD_VAR 0 1
67320: PUSH
67321: LD_INT 2
67323: ARRAY
67324: PPUSH
67325: CALL_OW 429
// end ; end ;
67329: LD_VAR 0 1
67333: RET
// every 0 0$1 trigger StreamModeActive and sReset do
67334: LD_EXP 38
67338: IFFALSE 67346
67340: PUSH
67341: LD_EXP 60
67345: AND
67346: IFFALSE 67358
67348: GO 67350
67350: DISABLE
// YouLost (  ) ;
67351: LD_STRING 
67353: PPUSH
67354: CALL_OW 104
67358: END
// every 0 0$1 trigger StreamModeActive and sFog do
67359: LD_EXP 38
67363: IFFALSE 67371
67365: PUSH
67366: LD_EXP 59
67370: AND
67371: IFFALSE 67385
67373: GO 67375
67375: DISABLE
// FogOff ( your_side ) ;
67376: LD_OWVAR 2
67380: PPUSH
67381: CALL_OW 344
67385: END
// every 0 0$1 trigger StreamModeActive and sSun do
67386: LD_EXP 38
67390: IFFALSE 67398
67392: PUSH
67393: LD_EXP 61
67397: AND
67398: IFFALSE 67426
67400: GO 67402
67402: DISABLE
// begin solar_recharge_percent := 0 ;
67403: LD_ADDR_OWVAR 79
67407: PUSH
67408: LD_INT 0
67410: ST_TO_ADDR
// wait ( 5 5$00 ) ;
67411: LD_INT 10500
67413: PPUSH
67414: CALL_OW 67
// solar_recharge_percent := 100 ;
67418: LD_ADDR_OWVAR 79
67422: PUSH
67423: LD_INT 100
67425: ST_TO_ADDR
// end ;
67426: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
67427: LD_EXP 38
67431: IFFALSE 67439
67433: PUSH
67434: LD_EXP 62
67438: AND
67439: IFFALSE 67678
67441: GO 67443
67443: DISABLE
67444: LD_INT 0
67446: PPUSH
67447: PPUSH
67448: PPUSH
// begin tmp := [ ] ;
67449: LD_ADDR_VAR 0 3
67453: PUSH
67454: EMPTY
67455: ST_TO_ADDR
// for i := 1 to 6 do
67456: LD_ADDR_VAR 0 1
67460: PUSH
67461: DOUBLE
67462: LD_INT 1
67464: DEC
67465: ST_TO_ADDR
67466: LD_INT 6
67468: PUSH
67469: FOR_TO
67470: IFFALSE 67575
// begin uc_nation := nation_nature ;
67472: LD_ADDR_OWVAR 21
67476: PUSH
67477: LD_INT 0
67479: ST_TO_ADDR
// uc_side := 0 ;
67480: LD_ADDR_OWVAR 20
67484: PUSH
67485: LD_INT 0
67487: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67488: LD_ADDR_OWVAR 29
67492: PUSH
67493: LD_INT 12
67495: PUSH
67496: LD_INT 12
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: ST_TO_ADDR
// hc_agressivity := 20 ;
67503: LD_ADDR_OWVAR 35
67507: PUSH
67508: LD_INT 20
67510: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
67511: LD_ADDR_OWVAR 28
67515: PUSH
67516: LD_INT 17
67518: ST_TO_ADDR
// hc_gallery :=  ;
67519: LD_ADDR_OWVAR 33
67523: PUSH
67524: LD_STRING 
67526: ST_TO_ADDR
// hc_name :=  ;
67527: LD_ADDR_OWVAR 26
67531: PUSH
67532: LD_STRING 
67534: ST_TO_ADDR
// un := CreateHuman ;
67535: LD_ADDR_VAR 0 2
67539: PUSH
67540: CALL_OW 44
67544: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
67545: LD_VAR 0 2
67549: PPUSH
67550: LD_INT 1
67552: PPUSH
67553: CALL_OW 51
// tmp := tmp ^ un ;
67557: LD_ADDR_VAR 0 3
67561: PUSH
67562: LD_VAR 0 3
67566: PUSH
67567: LD_VAR 0 2
67571: ADD
67572: ST_TO_ADDR
// end ;
67573: GO 67469
67575: POP
67576: POP
// repeat wait ( 0 0$1 ) ;
67577: LD_INT 35
67579: PPUSH
67580: CALL_OW 67
// for un in tmp do
67584: LD_ADDR_VAR 0 2
67588: PUSH
67589: LD_VAR 0 3
67593: PUSH
67594: FOR_IN
67595: IFFALSE 67669
// begin if IsDead ( un ) then
67597: LD_VAR 0 2
67601: PPUSH
67602: CALL_OW 301
67606: IFFALSE 67626
// begin tmp := tmp diff un ;
67608: LD_ADDR_VAR 0 3
67612: PUSH
67613: LD_VAR 0 3
67617: PUSH
67618: LD_VAR 0 2
67622: DIFF
67623: ST_TO_ADDR
// continue ;
67624: GO 67594
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
67626: LD_VAR 0 2
67630: PPUSH
67631: LD_INT 3
67633: PUSH
67634: LD_INT 22
67636: PUSH
67637: LD_INT 0
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PPUSH
67648: CALL_OW 69
67652: PPUSH
67653: LD_VAR 0 2
67657: PPUSH
67658: CALL_OW 74
67662: PPUSH
67663: CALL_OW 115
// end ;
67667: GO 67594
67669: POP
67670: POP
// until not tmp ;
67671: LD_VAR 0 3
67675: NOT
67676: IFFALSE 67577
// end ;
67678: PPOPN 3
67680: END
// every 0 0$1 trigger StreamModeActive and sTroll do
67681: LD_EXP 38
67685: IFFALSE 67693
67687: PUSH
67688: LD_EXP 63
67692: AND
67693: IFFALSE 67747
67695: GO 67697
67697: DISABLE
// begin ToLua ( displayTroll(); ) ;
67698: LD_STRING displayTroll();
67700: PPUSH
67701: CALL_OW 559
// wait ( 3 3$00 ) ;
67705: LD_INT 6300
67707: PPUSH
67708: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67712: LD_STRING hideTroll();
67714: PPUSH
67715: CALL_OW 559
// wait ( 1 1$00 ) ;
67719: LD_INT 2100
67721: PPUSH
67722: CALL_OW 67
// ToLua ( displayTroll(); ) ;
67726: LD_STRING displayTroll();
67728: PPUSH
67729: CALL_OW 559
// wait ( 1 1$00 ) ;
67733: LD_INT 2100
67735: PPUSH
67736: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67740: LD_STRING hideTroll();
67742: PPUSH
67743: CALL_OW 559
// end ;
67747: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
67748: LD_EXP 38
67752: IFFALSE 67760
67754: PUSH
67755: LD_EXP 64
67759: AND
67760: IFFALSE 67823
67762: GO 67764
67764: DISABLE
67765: LD_INT 0
67767: PPUSH
// begin p := 0 ;
67768: LD_ADDR_VAR 0 1
67772: PUSH
67773: LD_INT 0
67775: ST_TO_ADDR
// repeat game_speed := 1 ;
67776: LD_ADDR_OWVAR 65
67780: PUSH
67781: LD_INT 1
67783: ST_TO_ADDR
// wait ( 0 0$1 ) ;
67784: LD_INT 35
67786: PPUSH
67787: CALL_OW 67
// p := p + 1 ;
67791: LD_ADDR_VAR 0 1
67795: PUSH
67796: LD_VAR 0 1
67800: PUSH
67801: LD_INT 1
67803: PLUS
67804: ST_TO_ADDR
// until p >= 60 ;
67805: LD_VAR 0 1
67809: PUSH
67810: LD_INT 60
67812: GREATEREQUAL
67813: IFFALSE 67776
// game_speed := 4 ;
67815: LD_ADDR_OWVAR 65
67819: PUSH
67820: LD_INT 4
67822: ST_TO_ADDR
// end ;
67823: PPOPN 1
67825: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
67826: LD_EXP 38
67830: IFFALSE 67838
67832: PUSH
67833: LD_EXP 65
67837: AND
67838: IFFALSE 67984
67840: GO 67842
67842: DISABLE
67843: LD_INT 0
67845: PPUSH
67846: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67847: LD_ADDR_VAR 0 1
67851: PUSH
67852: LD_INT 22
67854: PUSH
67855: LD_OWVAR 2
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 2
67866: PUSH
67867: LD_INT 30
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 30
67879: PUSH
67880: LD_INT 1
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: LIST
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PPUSH
67896: CALL_OW 69
67900: ST_TO_ADDR
// if not depot then
67901: LD_VAR 0 1
67905: NOT
67906: IFFALSE 67910
// exit ;
67908: GO 67984
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
67910: LD_ADDR_VAR 0 2
67914: PUSH
67915: LD_VAR 0 1
67919: PUSH
67920: LD_INT 1
67922: PPUSH
67923: LD_VAR 0 1
67927: PPUSH
67928: CALL_OW 12
67932: ARRAY
67933: PPUSH
67934: CALL_OW 274
67938: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
67939: LD_VAR 0 2
67943: PPUSH
67944: LD_INT 1
67946: PPUSH
67947: LD_INT 0
67949: PPUSH
67950: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
67954: LD_VAR 0 2
67958: PPUSH
67959: LD_INT 2
67961: PPUSH
67962: LD_INT 0
67964: PPUSH
67965: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
67969: LD_VAR 0 2
67973: PPUSH
67974: LD_INT 3
67976: PPUSH
67977: LD_INT 0
67979: PPUSH
67980: CALL_OW 277
// end ;
67984: PPOPN 2
67986: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
67987: LD_EXP 38
67991: IFFALSE 67999
67993: PUSH
67994: LD_EXP 66
67998: AND
67999: IFFALSE 68096
68001: GO 68003
68003: DISABLE
68004: LD_INT 0
68006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68007: LD_ADDR_VAR 0 1
68011: PUSH
68012: LD_INT 22
68014: PUSH
68015: LD_OWVAR 2
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 21
68026: PUSH
68027: LD_INT 1
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 3
68036: PUSH
68037: LD_INT 23
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: LIST
68055: PPUSH
68056: CALL_OW 69
68060: ST_TO_ADDR
// if not tmp then
68061: LD_VAR 0 1
68065: NOT
68066: IFFALSE 68070
// exit ;
68068: GO 68096
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
68070: LD_VAR 0 1
68074: PUSH
68075: LD_INT 1
68077: PPUSH
68078: LD_VAR 0 1
68082: PPUSH
68083: CALL_OW 12
68087: ARRAY
68088: PPUSH
68089: LD_INT 200
68091: PPUSH
68092: CALL_OW 234
// end ;
68096: PPOPN 1
68098: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
68099: LD_EXP 38
68103: IFFALSE 68111
68105: PUSH
68106: LD_EXP 67
68110: AND
68111: IFFALSE 68190
68113: GO 68115
68115: DISABLE
68116: LD_INT 0
68118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
68119: LD_ADDR_VAR 0 1
68123: PUSH
68124: LD_INT 22
68126: PUSH
68127: LD_OWVAR 2
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 21
68138: PUSH
68139: LD_INT 2
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PPUSH
68150: CALL_OW 69
68154: ST_TO_ADDR
// if not tmp then
68155: LD_VAR 0 1
68159: NOT
68160: IFFALSE 68164
// exit ;
68162: GO 68190
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
68164: LD_VAR 0 1
68168: PUSH
68169: LD_INT 1
68171: PPUSH
68172: LD_VAR 0 1
68176: PPUSH
68177: CALL_OW 12
68181: ARRAY
68182: PPUSH
68183: LD_INT 60
68185: PPUSH
68186: CALL_OW 234
// end ;
68190: PPOPN 1
68192: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
68193: LD_EXP 38
68197: IFFALSE 68205
68199: PUSH
68200: LD_EXP 68
68204: AND
68205: IFFALSE 68304
68207: GO 68209
68209: DISABLE
68210: LD_INT 0
68212: PPUSH
68213: PPUSH
// begin enable ;
68214: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
68215: LD_ADDR_VAR 0 1
68219: PUSH
68220: LD_INT 22
68222: PUSH
68223: LD_OWVAR 2
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 61
68234: PUSH
68235: EMPTY
68236: LIST
68237: PUSH
68238: LD_INT 33
68240: PUSH
68241: LD_INT 2
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: LIST
68252: PPUSH
68253: CALL_OW 69
68257: ST_TO_ADDR
// if not tmp then
68258: LD_VAR 0 1
68262: NOT
68263: IFFALSE 68267
// exit ;
68265: GO 68304
// for i in tmp do
68267: LD_ADDR_VAR 0 2
68271: PUSH
68272: LD_VAR 0 1
68276: PUSH
68277: FOR_IN
68278: IFFALSE 68302
// if IsControledBy ( i ) then
68280: LD_VAR 0 2
68284: PPUSH
68285: CALL_OW 312
68289: IFFALSE 68300
// ComUnlink ( i ) ;
68291: LD_VAR 0 2
68295: PPUSH
68296: CALL_OW 136
68300: GO 68277
68302: POP
68303: POP
// end ;
68304: PPOPN 2
68306: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
68307: LD_EXP 38
68311: IFFALSE 68319
68313: PUSH
68314: LD_EXP 69
68318: AND
68319: IFFALSE 68459
68321: GO 68323
68323: DISABLE
68324: LD_INT 0
68326: PPUSH
68327: PPUSH
// begin ToLua ( displayPowell(); ) ;
68328: LD_STRING displayPowell();
68330: PPUSH
68331: CALL_OW 559
// uc_side := 0 ;
68335: LD_ADDR_OWVAR 20
68339: PUSH
68340: LD_INT 0
68342: ST_TO_ADDR
// uc_nation := 2 ;
68343: LD_ADDR_OWVAR 21
68347: PUSH
68348: LD_INT 2
68350: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
68351: LD_ADDR_OWVAR 37
68355: PUSH
68356: LD_INT 14
68358: ST_TO_ADDR
// vc_engine := engine_siberite ;
68359: LD_ADDR_OWVAR 39
68363: PUSH
68364: LD_INT 3
68366: ST_TO_ADDR
// vc_control := control_apeman ;
68367: LD_ADDR_OWVAR 38
68371: PUSH
68372: LD_INT 5
68374: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
68375: LD_ADDR_OWVAR 40
68379: PUSH
68380: LD_INT 29
68382: ST_TO_ADDR
// un := CreateVehicle ;
68383: LD_ADDR_VAR 0 2
68387: PUSH
68388: CALL_OW 45
68392: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68393: LD_VAR 0 2
68397: PPUSH
68398: LD_INT 1
68400: PPUSH
68401: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68405: LD_INT 35
68407: PPUSH
68408: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68412: LD_VAR 0 2
68416: PPUSH
68417: LD_INT 22
68419: PUSH
68420: LD_OWVAR 2
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PPUSH
68429: CALL_OW 69
68433: PPUSH
68434: LD_VAR 0 2
68438: PPUSH
68439: CALL_OW 74
68443: PPUSH
68444: CALL_OW 115
// until IsDead ( un ) ;
68448: LD_VAR 0 2
68452: PPUSH
68453: CALL_OW 301
68457: IFFALSE 68405
// end ;
68459: PPOPN 2
68461: END
// every 0 0$1 trigger StreamModeActive and sStu do
68462: LD_EXP 38
68466: IFFALSE 68474
68468: PUSH
68469: LD_EXP 77
68473: AND
68474: IFFALSE 68490
68476: GO 68478
68478: DISABLE
// begin ToLua ( displayStucuk(); ) ;
68479: LD_STRING displayStucuk();
68481: PPUSH
68482: CALL_OW 559
// ResetFog ;
68486: CALL_OW 335
// end ;
68490: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
68491: LD_EXP 38
68495: IFFALSE 68503
68497: PUSH
68498: LD_EXP 70
68502: AND
68503: IFFALSE 68644
68505: GO 68507
68507: DISABLE
68508: LD_INT 0
68510: PPUSH
68511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68512: LD_ADDR_VAR 0 2
68516: PUSH
68517: LD_INT 22
68519: PUSH
68520: LD_OWVAR 2
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 21
68531: PUSH
68532: LD_INT 1
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PPUSH
68543: CALL_OW 69
68547: ST_TO_ADDR
// if not tmp then
68548: LD_VAR 0 2
68552: NOT
68553: IFFALSE 68557
// exit ;
68555: GO 68644
// un := tmp [ rand ( 1 , tmp ) ] ;
68557: LD_ADDR_VAR 0 1
68561: PUSH
68562: LD_VAR 0 2
68566: PUSH
68567: LD_INT 1
68569: PPUSH
68570: LD_VAR 0 2
68574: PPUSH
68575: CALL_OW 12
68579: ARRAY
68580: ST_TO_ADDR
// SetSide ( un , 0 ) ;
68581: LD_VAR 0 1
68585: PPUSH
68586: LD_INT 0
68588: PPUSH
68589: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
68593: LD_VAR 0 1
68597: PPUSH
68598: LD_OWVAR 3
68602: PUSH
68603: LD_VAR 0 1
68607: DIFF
68608: PPUSH
68609: LD_VAR 0 1
68613: PPUSH
68614: CALL_OW 74
68618: PPUSH
68619: CALL_OW 115
// wait ( 0 0$20 ) ;
68623: LD_INT 700
68625: PPUSH
68626: CALL_OW 67
// SetSide ( un , your_side ) ;
68630: LD_VAR 0 1
68634: PPUSH
68635: LD_OWVAR 2
68639: PPUSH
68640: CALL_OW 235
// end ;
68644: PPOPN 2
68646: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
68647: LD_EXP 38
68651: IFFALSE 68659
68653: PUSH
68654: LD_EXP 71
68658: AND
68659: IFFALSE 68765
68661: GO 68663
68663: DISABLE
68664: LD_INT 0
68666: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68667: LD_ADDR_VAR 0 1
68671: PUSH
68672: LD_INT 22
68674: PUSH
68675: LD_OWVAR 2
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 2
68686: PUSH
68687: LD_INT 30
68689: PUSH
68690: LD_INT 0
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 30
68699: PUSH
68700: LD_INT 1
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: LIST
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PPUSH
68716: CALL_OW 69
68720: ST_TO_ADDR
// if not depot then
68721: LD_VAR 0 1
68725: NOT
68726: IFFALSE 68730
// exit ;
68728: GO 68765
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
68730: LD_VAR 0 1
68734: PUSH
68735: LD_INT 1
68737: ARRAY
68738: PPUSH
68739: CALL_OW 250
68743: PPUSH
68744: LD_VAR 0 1
68748: PUSH
68749: LD_INT 1
68751: ARRAY
68752: PPUSH
68753: CALL_OW 251
68757: PPUSH
68758: LD_INT 70
68760: PPUSH
68761: CALL_OW 495
// end ;
68765: PPOPN 1
68767: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
68768: LD_EXP 38
68772: IFFALSE 68780
68774: PUSH
68775: LD_EXP 72
68779: AND
68780: IFFALSE 68991
68782: GO 68784
68784: DISABLE
68785: LD_INT 0
68787: PPUSH
68788: PPUSH
68789: PPUSH
68790: PPUSH
68791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68792: LD_ADDR_VAR 0 5
68796: PUSH
68797: LD_INT 22
68799: PUSH
68800: LD_OWVAR 2
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 21
68811: PUSH
68812: LD_INT 1
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PPUSH
68823: CALL_OW 69
68827: ST_TO_ADDR
// if not tmp then
68828: LD_VAR 0 5
68832: NOT
68833: IFFALSE 68837
// exit ;
68835: GO 68991
// for i in tmp do
68837: LD_ADDR_VAR 0 1
68841: PUSH
68842: LD_VAR 0 5
68846: PUSH
68847: FOR_IN
68848: IFFALSE 68989
// begin d := rand ( 0 , 5 ) ;
68850: LD_ADDR_VAR 0 4
68854: PUSH
68855: LD_INT 0
68857: PPUSH
68858: LD_INT 5
68860: PPUSH
68861: CALL_OW 12
68865: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
68866: LD_ADDR_VAR 0 2
68870: PUSH
68871: LD_VAR 0 1
68875: PPUSH
68876: CALL_OW 250
68880: PPUSH
68881: LD_VAR 0 4
68885: PPUSH
68886: LD_INT 3
68888: PPUSH
68889: LD_INT 12
68891: PPUSH
68892: CALL_OW 12
68896: PPUSH
68897: CALL_OW 272
68901: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
68902: LD_ADDR_VAR 0 3
68906: PUSH
68907: LD_VAR 0 1
68911: PPUSH
68912: CALL_OW 251
68916: PPUSH
68917: LD_VAR 0 4
68921: PPUSH
68922: LD_INT 3
68924: PPUSH
68925: LD_INT 12
68927: PPUSH
68928: CALL_OW 12
68932: PPUSH
68933: CALL_OW 273
68937: ST_TO_ADDR
// if ValidHex ( x , y ) then
68938: LD_VAR 0 2
68942: PPUSH
68943: LD_VAR 0 3
68947: PPUSH
68948: CALL_OW 488
68952: IFFALSE 68987
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
68954: LD_VAR 0 1
68958: PPUSH
68959: LD_VAR 0 2
68963: PPUSH
68964: LD_VAR 0 3
68968: PPUSH
68969: LD_INT 3
68971: PPUSH
68972: LD_INT 6
68974: PPUSH
68975: CALL_OW 12
68979: PPUSH
68980: LD_INT 1
68982: PPUSH
68983: CALL_OW 483
// end ;
68987: GO 68847
68989: POP
68990: POP
// end ;
68991: PPOPN 5
68993: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
68994: LD_EXP 38
68998: IFFALSE 69006
69000: PUSH
69001: LD_EXP 73
69005: AND
69006: IFFALSE 69100
69008: GO 69010
69010: DISABLE
69011: LD_INT 0
69013: PPUSH
69014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
69015: LD_ADDR_VAR 0 2
69019: PUSH
69020: LD_INT 22
69022: PUSH
69023: LD_OWVAR 2
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 32
69034: PUSH
69035: LD_INT 1
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 21
69044: PUSH
69045: LD_INT 2
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: LIST
69056: PPUSH
69057: CALL_OW 69
69061: ST_TO_ADDR
// if not tmp then
69062: LD_VAR 0 2
69066: NOT
69067: IFFALSE 69071
// exit ;
69069: GO 69100
// for i in tmp do
69071: LD_ADDR_VAR 0 1
69075: PUSH
69076: LD_VAR 0 2
69080: PUSH
69081: FOR_IN
69082: IFFALSE 69098
// SetFuel ( i , 0 ) ;
69084: LD_VAR 0 1
69088: PPUSH
69089: LD_INT 0
69091: PPUSH
69092: CALL_OW 240
69096: GO 69081
69098: POP
69099: POP
// end ;
69100: PPOPN 2
69102: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
69103: LD_EXP 38
69107: IFFALSE 69115
69109: PUSH
69110: LD_EXP 74
69114: AND
69115: IFFALSE 69181
69117: GO 69119
69119: DISABLE
69120: LD_INT 0
69122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69123: LD_ADDR_VAR 0 1
69127: PUSH
69128: LD_INT 22
69130: PUSH
69131: LD_OWVAR 2
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 30
69142: PUSH
69143: LD_INT 29
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PPUSH
69154: CALL_OW 69
69158: ST_TO_ADDR
// if not tmp then
69159: LD_VAR 0 1
69163: NOT
69164: IFFALSE 69168
// exit ;
69166: GO 69181
// DestroyUnit ( tmp [ 1 ] ) ;
69168: LD_VAR 0 1
69172: PUSH
69173: LD_INT 1
69175: ARRAY
69176: PPUSH
69177: CALL_OW 65
// end ;
69181: PPOPN 1
69183: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
69184: LD_EXP 38
69188: IFFALSE 69196
69190: PUSH
69191: LD_EXP 76
69195: AND
69196: IFFALSE 69325
69198: GO 69200
69200: DISABLE
69201: LD_INT 0
69203: PPUSH
// begin uc_side := 0 ;
69204: LD_ADDR_OWVAR 20
69208: PUSH
69209: LD_INT 0
69211: ST_TO_ADDR
// uc_nation := nation_arabian ;
69212: LD_ADDR_OWVAR 21
69216: PUSH
69217: LD_INT 2
69219: ST_TO_ADDR
// hc_gallery :=  ;
69220: LD_ADDR_OWVAR 33
69224: PUSH
69225: LD_STRING 
69227: ST_TO_ADDR
// hc_name :=  ;
69228: LD_ADDR_OWVAR 26
69232: PUSH
69233: LD_STRING 
69235: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
69236: LD_INT 1
69238: PPUSH
69239: LD_INT 11
69241: PPUSH
69242: LD_INT 10
69244: PPUSH
69245: CALL_OW 380
// un := CreateHuman ;
69249: LD_ADDR_VAR 0 1
69253: PUSH
69254: CALL_OW 44
69258: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69259: LD_VAR 0 1
69263: PPUSH
69264: LD_INT 1
69266: PPUSH
69267: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69271: LD_INT 35
69273: PPUSH
69274: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69278: LD_VAR 0 1
69282: PPUSH
69283: LD_INT 22
69285: PUSH
69286: LD_OWVAR 2
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PPUSH
69295: CALL_OW 69
69299: PPUSH
69300: LD_VAR 0 1
69304: PPUSH
69305: CALL_OW 74
69309: PPUSH
69310: CALL_OW 115
// until IsDead ( un ) ;
69314: LD_VAR 0 1
69318: PPUSH
69319: CALL_OW 301
69323: IFFALSE 69271
// end ;
69325: PPOPN 1
69327: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
69328: LD_EXP 38
69332: IFFALSE 69340
69334: PUSH
69335: LD_EXP 78
69339: AND
69340: IFFALSE 69352
69342: GO 69344
69344: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
69345: LD_STRING earthquake(getX(game), 0, 32)
69347: PPUSH
69348: CALL_OW 559
69352: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
69353: LD_EXP 38
69357: IFFALSE 69365
69359: PUSH
69360: LD_EXP 79
69364: AND
69365: IFFALSE 69456
69367: GO 69369
69369: DISABLE
69370: LD_INT 0
69372: PPUSH
// begin enable ;
69373: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
69374: LD_ADDR_VAR 0 1
69378: PUSH
69379: LD_INT 22
69381: PUSH
69382: LD_OWVAR 2
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 21
69393: PUSH
69394: LD_INT 2
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 33
69403: PUSH
69404: LD_INT 3
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: LIST
69415: PPUSH
69416: CALL_OW 69
69420: ST_TO_ADDR
// if not tmp then
69421: LD_VAR 0 1
69425: NOT
69426: IFFALSE 69430
// exit ;
69428: GO 69456
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69430: LD_VAR 0 1
69434: PUSH
69435: LD_INT 1
69437: PPUSH
69438: LD_VAR 0 1
69442: PPUSH
69443: CALL_OW 12
69447: ARRAY
69448: PPUSH
69449: LD_INT 1
69451: PPUSH
69452: CALL_OW 234
// end ;
69456: PPOPN 1
69458: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
69459: LD_EXP 38
69463: IFFALSE 69471
69465: PUSH
69466: LD_EXP 80
69470: AND
69471: IFFALSE 69612
69473: GO 69475
69475: DISABLE
69476: LD_INT 0
69478: PPUSH
69479: PPUSH
69480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69481: LD_ADDR_VAR 0 3
69485: PUSH
69486: LD_INT 22
69488: PUSH
69489: LD_OWVAR 2
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 25
69500: PUSH
69501: LD_INT 1
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PPUSH
69512: CALL_OW 69
69516: ST_TO_ADDR
// if not tmp then
69517: LD_VAR 0 3
69521: NOT
69522: IFFALSE 69526
// exit ;
69524: GO 69612
// un := tmp [ rand ( 1 , tmp ) ] ;
69526: LD_ADDR_VAR 0 2
69530: PUSH
69531: LD_VAR 0 3
69535: PUSH
69536: LD_INT 1
69538: PPUSH
69539: LD_VAR 0 3
69543: PPUSH
69544: CALL_OW 12
69548: ARRAY
69549: ST_TO_ADDR
// if Crawls ( un ) then
69550: LD_VAR 0 2
69554: PPUSH
69555: CALL_OW 318
69559: IFFALSE 69570
// ComWalk ( un ) ;
69561: LD_VAR 0 2
69565: PPUSH
69566: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
69570: LD_VAR 0 2
69574: PPUSH
69575: LD_INT 9
69577: PPUSH
69578: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
69582: LD_INT 28
69584: PPUSH
69585: LD_OWVAR 2
69589: PPUSH
69590: LD_INT 2
69592: PPUSH
69593: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
69597: LD_INT 29
69599: PPUSH
69600: LD_OWVAR 2
69604: PPUSH
69605: LD_INT 2
69607: PPUSH
69608: CALL_OW 322
// end ;
69612: PPOPN 3
69614: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
69615: LD_EXP 38
69619: IFFALSE 69627
69621: PUSH
69622: LD_EXP 81
69626: AND
69627: IFFALSE 69738
69629: GO 69631
69631: DISABLE
69632: LD_INT 0
69634: PPUSH
69635: PPUSH
69636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69637: LD_ADDR_VAR 0 3
69641: PUSH
69642: LD_INT 22
69644: PUSH
69645: LD_OWVAR 2
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 25
69656: PUSH
69657: LD_INT 1
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PPUSH
69668: CALL_OW 69
69672: ST_TO_ADDR
// if not tmp then
69673: LD_VAR 0 3
69677: NOT
69678: IFFALSE 69682
// exit ;
69680: GO 69738
// un := tmp [ rand ( 1 , tmp ) ] ;
69682: LD_ADDR_VAR 0 2
69686: PUSH
69687: LD_VAR 0 3
69691: PUSH
69692: LD_INT 1
69694: PPUSH
69695: LD_VAR 0 3
69699: PPUSH
69700: CALL_OW 12
69704: ARRAY
69705: ST_TO_ADDR
// if Crawls ( un ) then
69706: LD_VAR 0 2
69710: PPUSH
69711: CALL_OW 318
69715: IFFALSE 69726
// ComWalk ( un ) ;
69717: LD_VAR 0 2
69721: PPUSH
69722: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69726: LD_VAR 0 2
69730: PPUSH
69731: LD_INT 8
69733: PPUSH
69734: CALL_OW 336
// end ;
69738: PPOPN 3
69740: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
69741: LD_EXP 38
69745: IFFALSE 69753
69747: PUSH
69748: LD_EXP 82
69752: AND
69753: IFFALSE 69897
69755: GO 69757
69757: DISABLE
69758: LD_INT 0
69760: PPUSH
69761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
69762: LD_ADDR_VAR 0 2
69766: PUSH
69767: LD_INT 22
69769: PUSH
69770: LD_OWVAR 2
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 21
69781: PUSH
69782: LD_INT 2
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 2
69791: PUSH
69792: LD_INT 34
69794: PUSH
69795: LD_INT 12
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 34
69804: PUSH
69805: LD_INT 51
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 34
69814: PUSH
69815: LD_INT 32
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: LIST
69832: PPUSH
69833: CALL_OW 69
69837: ST_TO_ADDR
// if not tmp then
69838: LD_VAR 0 2
69842: NOT
69843: IFFALSE 69847
// exit ;
69845: GO 69897
// for i in tmp do
69847: LD_ADDR_VAR 0 1
69851: PUSH
69852: LD_VAR 0 2
69856: PUSH
69857: FOR_IN
69858: IFFALSE 69895
// if GetCargo ( i , mat_artifact ) = 0 then
69860: LD_VAR 0 1
69864: PPUSH
69865: LD_INT 4
69867: PPUSH
69868: CALL_OW 289
69872: PUSH
69873: LD_INT 0
69875: EQUAL
69876: IFFALSE 69893
// SetCargo ( i , mat_siberit , 100 ) ;
69878: LD_VAR 0 1
69882: PPUSH
69883: LD_INT 3
69885: PPUSH
69886: LD_INT 100
69888: PPUSH
69889: CALL_OW 290
69893: GO 69857
69895: POP
69896: POP
// end ;
69897: PPOPN 2
69899: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
69900: LD_EXP 38
69904: IFFALSE 69912
69906: PUSH
69907: LD_EXP 83
69911: AND
69912: IFFALSE 70095
69914: GO 69916
69916: DISABLE
69917: LD_INT 0
69919: PPUSH
69920: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69921: LD_ADDR_VAR 0 2
69925: PUSH
69926: LD_INT 22
69928: PUSH
69929: LD_OWVAR 2
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PPUSH
69938: CALL_OW 69
69942: ST_TO_ADDR
// if not tmp then
69943: LD_VAR 0 2
69947: NOT
69948: IFFALSE 69952
// exit ;
69950: GO 70095
// for i := 1 to 2 do
69952: LD_ADDR_VAR 0 1
69956: PUSH
69957: DOUBLE
69958: LD_INT 1
69960: DEC
69961: ST_TO_ADDR
69962: LD_INT 2
69964: PUSH
69965: FOR_TO
69966: IFFALSE 70093
// begin uc_side := your_side ;
69968: LD_ADDR_OWVAR 20
69972: PUSH
69973: LD_OWVAR 2
69977: ST_TO_ADDR
// uc_nation := nation_american ;
69978: LD_ADDR_OWVAR 21
69982: PUSH
69983: LD_INT 1
69985: ST_TO_ADDR
// vc_chassis := us_morphling ;
69986: LD_ADDR_OWVAR 37
69990: PUSH
69991: LD_INT 5
69993: ST_TO_ADDR
// vc_engine := engine_siberite ;
69994: LD_ADDR_OWVAR 39
69998: PUSH
69999: LD_INT 3
70001: ST_TO_ADDR
// vc_control := control_computer ;
70002: LD_ADDR_OWVAR 38
70006: PUSH
70007: LD_INT 3
70009: ST_TO_ADDR
// vc_weapon := us_double_laser ;
70010: LD_ADDR_OWVAR 40
70014: PUSH
70015: LD_INT 10
70017: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
70018: LD_VAR 0 2
70022: PUSH
70023: LD_INT 1
70025: ARRAY
70026: PPUSH
70027: CALL_OW 310
70031: NOT
70032: IFFALSE 70079
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
70034: CALL_OW 45
70038: PPUSH
70039: LD_VAR 0 2
70043: PUSH
70044: LD_INT 1
70046: ARRAY
70047: PPUSH
70048: CALL_OW 250
70052: PPUSH
70053: LD_VAR 0 2
70057: PUSH
70058: LD_INT 1
70060: ARRAY
70061: PPUSH
70062: CALL_OW 251
70066: PPUSH
70067: LD_INT 12
70069: PPUSH
70070: LD_INT 1
70072: PPUSH
70073: CALL_OW 50
70077: GO 70091
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
70079: CALL_OW 45
70083: PPUSH
70084: LD_INT 1
70086: PPUSH
70087: CALL_OW 51
// end ;
70091: GO 69965
70093: POP
70094: POP
// end ;
70095: PPOPN 2
70097: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
70098: LD_EXP 38
70102: IFFALSE 70110
70104: PUSH
70105: LD_EXP 84
70109: AND
70110: IFFALSE 70332
70112: GO 70114
70114: DISABLE
70115: LD_INT 0
70117: PPUSH
70118: PPUSH
70119: PPUSH
70120: PPUSH
70121: PPUSH
70122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70123: LD_ADDR_VAR 0 6
70127: PUSH
70128: LD_INT 22
70130: PUSH
70131: LD_OWVAR 2
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 21
70142: PUSH
70143: LD_INT 1
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 3
70152: PUSH
70153: LD_INT 23
70155: PUSH
70156: LD_INT 0
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: LIST
70171: PPUSH
70172: CALL_OW 69
70176: ST_TO_ADDR
// if not tmp then
70177: LD_VAR 0 6
70181: NOT
70182: IFFALSE 70186
// exit ;
70184: GO 70332
// s1 := rand ( 1 , 4 ) ;
70186: LD_ADDR_VAR 0 2
70190: PUSH
70191: LD_INT 1
70193: PPUSH
70194: LD_INT 4
70196: PPUSH
70197: CALL_OW 12
70201: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
70202: LD_ADDR_VAR 0 4
70206: PUSH
70207: LD_VAR 0 6
70211: PUSH
70212: LD_INT 1
70214: ARRAY
70215: PPUSH
70216: LD_VAR 0 2
70220: PPUSH
70221: CALL_OW 259
70225: ST_TO_ADDR
// if s1 = 1 then
70226: LD_VAR 0 2
70230: PUSH
70231: LD_INT 1
70233: EQUAL
70234: IFFALSE 70254
// s2 := rand ( 2 , 4 ) else
70236: LD_ADDR_VAR 0 3
70240: PUSH
70241: LD_INT 2
70243: PPUSH
70244: LD_INT 4
70246: PPUSH
70247: CALL_OW 12
70251: ST_TO_ADDR
70252: GO 70262
// s2 := 1 ;
70254: LD_ADDR_VAR 0 3
70258: PUSH
70259: LD_INT 1
70261: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
70262: LD_ADDR_VAR 0 5
70266: PUSH
70267: LD_VAR 0 6
70271: PUSH
70272: LD_INT 1
70274: ARRAY
70275: PPUSH
70276: LD_VAR 0 3
70280: PPUSH
70281: CALL_OW 259
70285: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
70286: LD_VAR 0 6
70290: PUSH
70291: LD_INT 1
70293: ARRAY
70294: PPUSH
70295: LD_VAR 0 2
70299: PPUSH
70300: LD_VAR 0 5
70304: PPUSH
70305: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
70309: LD_VAR 0 6
70313: PUSH
70314: LD_INT 1
70316: ARRAY
70317: PPUSH
70318: LD_VAR 0 3
70322: PPUSH
70323: LD_VAR 0 4
70327: PPUSH
70328: CALL_OW 237
// end ;
70332: PPOPN 6
70334: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
70335: LD_EXP 38
70339: IFFALSE 70347
70341: PUSH
70342: LD_EXP 85
70346: AND
70347: IFFALSE 70426
70349: GO 70351
70351: DISABLE
70352: LD_INT 0
70354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
70355: LD_ADDR_VAR 0 1
70359: PUSH
70360: LD_INT 22
70362: PUSH
70363: LD_OWVAR 2
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 30
70374: PUSH
70375: LD_INT 3
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PPUSH
70386: CALL_OW 69
70390: ST_TO_ADDR
// if not tmp then
70391: LD_VAR 0 1
70395: NOT
70396: IFFALSE 70400
// exit ;
70398: GO 70426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70400: LD_VAR 0 1
70404: PUSH
70405: LD_INT 1
70407: PPUSH
70408: LD_VAR 0 1
70412: PPUSH
70413: CALL_OW 12
70417: ARRAY
70418: PPUSH
70419: LD_INT 1
70421: PPUSH
70422: CALL_OW 234
// end ;
70426: PPOPN 1
70428: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
70429: LD_EXP 38
70433: IFFALSE 70441
70435: PUSH
70436: LD_EXP 86
70440: AND
70441: IFFALSE 70553
70443: GO 70445
70445: DISABLE
70446: LD_INT 0
70448: PPUSH
70449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
70450: LD_ADDR_VAR 0 2
70454: PUSH
70455: LD_INT 22
70457: PUSH
70458: LD_OWVAR 2
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 2
70469: PUSH
70470: LD_INT 30
70472: PUSH
70473: LD_INT 27
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 30
70482: PUSH
70483: LD_INT 26
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 30
70492: PUSH
70493: LD_INT 28
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PPUSH
70510: CALL_OW 69
70514: ST_TO_ADDR
// if not tmp then
70515: LD_VAR 0 2
70519: NOT
70520: IFFALSE 70524
// exit ;
70522: GO 70553
// for i in tmp do
70524: LD_ADDR_VAR 0 1
70528: PUSH
70529: LD_VAR 0 2
70533: PUSH
70534: FOR_IN
70535: IFFALSE 70551
// SetLives ( i , 1 ) ;
70537: LD_VAR 0 1
70541: PPUSH
70542: LD_INT 1
70544: PPUSH
70545: CALL_OW 234
70549: GO 70534
70551: POP
70552: POP
// end ;
70553: PPOPN 2
70555: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
70556: LD_EXP 38
70560: IFFALSE 70568
70562: PUSH
70563: LD_EXP 87
70567: AND
70568: IFFALSE 70855
70570: GO 70572
70572: DISABLE
70573: LD_INT 0
70575: PPUSH
70576: PPUSH
70577: PPUSH
// begin i := rand ( 1 , 7 ) ;
70578: LD_ADDR_VAR 0 1
70582: PUSH
70583: LD_INT 1
70585: PPUSH
70586: LD_INT 7
70588: PPUSH
70589: CALL_OW 12
70593: ST_TO_ADDR
// case i of 1 :
70594: LD_VAR 0 1
70598: PUSH
70599: LD_INT 1
70601: DOUBLE
70602: EQUAL
70603: IFTRUE 70607
70605: GO 70617
70607: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
70608: LD_STRING earthquake(getX(game), 0, 32)
70610: PPUSH
70611: CALL_OW 559
70615: GO 70855
70617: LD_INT 2
70619: DOUBLE
70620: EQUAL
70621: IFTRUE 70625
70623: GO 70639
70625: POP
// begin ToLua ( displayStucuk(); ) ;
70626: LD_STRING displayStucuk();
70628: PPUSH
70629: CALL_OW 559
// ResetFog ;
70633: CALL_OW 335
// end ; 3 :
70637: GO 70855
70639: LD_INT 3
70641: DOUBLE
70642: EQUAL
70643: IFTRUE 70647
70645: GO 70751
70647: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70648: LD_ADDR_VAR 0 2
70652: PUSH
70653: LD_INT 22
70655: PUSH
70656: LD_OWVAR 2
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 25
70667: PUSH
70668: LD_INT 1
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PPUSH
70679: CALL_OW 69
70683: ST_TO_ADDR
// if not tmp then
70684: LD_VAR 0 2
70688: NOT
70689: IFFALSE 70693
// exit ;
70691: GO 70855
// un := tmp [ rand ( 1 , tmp ) ] ;
70693: LD_ADDR_VAR 0 3
70697: PUSH
70698: LD_VAR 0 2
70702: PUSH
70703: LD_INT 1
70705: PPUSH
70706: LD_VAR 0 2
70710: PPUSH
70711: CALL_OW 12
70715: ARRAY
70716: ST_TO_ADDR
// if Crawls ( un ) then
70717: LD_VAR 0 3
70721: PPUSH
70722: CALL_OW 318
70726: IFFALSE 70737
// ComWalk ( un ) ;
70728: LD_VAR 0 3
70732: PPUSH
70733: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70737: LD_VAR 0 3
70741: PPUSH
70742: LD_INT 8
70744: PPUSH
70745: CALL_OW 336
// end ; 4 :
70749: GO 70855
70751: LD_INT 4
70753: DOUBLE
70754: EQUAL
70755: IFTRUE 70759
70757: GO 70833
70759: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70760: LD_ADDR_VAR 0 2
70764: PUSH
70765: LD_INT 22
70767: PUSH
70768: LD_OWVAR 2
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 30
70779: PUSH
70780: LD_INT 29
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PPUSH
70791: CALL_OW 69
70795: ST_TO_ADDR
// if not tmp then
70796: LD_VAR 0 2
70800: NOT
70801: IFFALSE 70805
// exit ;
70803: GO 70855
// CenterNowOnUnits ( tmp [ 1 ] ) ;
70805: LD_VAR 0 2
70809: PUSH
70810: LD_INT 1
70812: ARRAY
70813: PPUSH
70814: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
70818: LD_VAR 0 2
70822: PUSH
70823: LD_INT 1
70825: ARRAY
70826: PPUSH
70827: CALL_OW 65
// end ; 5 .. 7 :
70831: GO 70855
70833: LD_INT 5
70835: DOUBLE
70836: GREATEREQUAL
70837: IFFALSE 70845
70839: LD_INT 7
70841: DOUBLE
70842: LESSEQUAL
70843: IFTRUE 70847
70845: GO 70854
70847: POP
// StreamSibBomb ; end ;
70848: CALL 67036 0 0
70852: GO 70855
70854: POP
// end ;
70855: PPOPN 3
70857: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
70858: LD_EXP 38
70862: IFFALSE 70870
70864: PUSH
70865: LD_EXP 88
70869: AND
70870: IFFALSE 71026
70872: GO 70874
70874: DISABLE
70875: LD_INT 0
70877: PPUSH
70878: PPUSH
70879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
70880: LD_ADDR_VAR 0 2
70884: PUSH
70885: LD_INT 81
70887: PUSH
70888: LD_OWVAR 2
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 2
70899: PUSH
70900: LD_INT 21
70902: PUSH
70903: LD_INT 1
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 21
70912: PUSH
70913: LD_INT 2
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: LIST
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PPUSH
70929: CALL_OW 69
70933: ST_TO_ADDR
// if not tmp then
70934: LD_VAR 0 2
70938: NOT
70939: IFFALSE 70943
// exit ;
70941: GO 71026
// p := 0 ;
70943: LD_ADDR_VAR 0 3
70947: PUSH
70948: LD_INT 0
70950: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70951: LD_INT 35
70953: PPUSH
70954: CALL_OW 67
// p := p + 1 ;
70958: LD_ADDR_VAR 0 3
70962: PUSH
70963: LD_VAR 0 3
70967: PUSH
70968: LD_INT 1
70970: PLUS
70971: ST_TO_ADDR
// for i in tmp do
70972: LD_ADDR_VAR 0 1
70976: PUSH
70977: LD_VAR 0 2
70981: PUSH
70982: FOR_IN
70983: IFFALSE 71014
// if GetLives ( i ) < 1000 then
70985: LD_VAR 0 1
70989: PPUSH
70990: CALL_OW 256
70994: PUSH
70995: LD_INT 1000
70997: LESS
70998: IFFALSE 71012
// SetLives ( i , 1000 ) ;
71000: LD_VAR 0 1
71004: PPUSH
71005: LD_INT 1000
71007: PPUSH
71008: CALL_OW 234
71012: GO 70982
71014: POP
71015: POP
// until p > 20 ;
71016: LD_VAR 0 3
71020: PUSH
71021: LD_INT 20
71023: GREATER
71024: IFFALSE 70951
// end ;
71026: PPOPN 3
71028: END
// every 0 0$1 trigger StreamModeActive and sTime do
71029: LD_EXP 38
71033: IFFALSE 71041
71035: PUSH
71036: LD_EXP 89
71040: AND
71041: IFFALSE 71076
71043: GO 71045
71045: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
71046: LD_INT 28
71048: PPUSH
71049: LD_OWVAR 2
71053: PPUSH
71054: LD_INT 2
71056: PPUSH
71057: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
71061: LD_INT 30
71063: PPUSH
71064: LD_OWVAR 2
71068: PPUSH
71069: LD_INT 2
71071: PPUSH
71072: CALL_OW 322
// end ;
71076: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
71077: LD_EXP 38
71081: IFFALSE 71089
71083: PUSH
71084: LD_EXP 90
71088: AND
71089: IFFALSE 71210
71091: GO 71093
71093: DISABLE
71094: LD_INT 0
71096: PPUSH
71097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71098: LD_ADDR_VAR 0 2
71102: PUSH
71103: LD_INT 22
71105: PUSH
71106: LD_OWVAR 2
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 21
71117: PUSH
71118: LD_INT 1
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 3
71127: PUSH
71128: LD_INT 23
71130: PUSH
71131: LD_INT 0
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: LIST
71146: PPUSH
71147: CALL_OW 69
71151: ST_TO_ADDR
// if not tmp then
71152: LD_VAR 0 2
71156: NOT
71157: IFFALSE 71161
// exit ;
71159: GO 71210
// for i in tmp do
71161: LD_ADDR_VAR 0 1
71165: PUSH
71166: LD_VAR 0 2
71170: PUSH
71171: FOR_IN
71172: IFFALSE 71208
// begin if Crawls ( i ) then
71174: LD_VAR 0 1
71178: PPUSH
71179: CALL_OW 318
71183: IFFALSE 71194
// ComWalk ( i ) ;
71185: LD_VAR 0 1
71189: PPUSH
71190: CALL_OW 138
// SetClass ( i , 2 ) ;
71194: LD_VAR 0 1
71198: PPUSH
71199: LD_INT 2
71201: PPUSH
71202: CALL_OW 336
// end ;
71206: GO 71171
71208: POP
71209: POP
// end ;
71210: PPOPN 2
71212: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
71213: LD_EXP 38
71217: IFFALSE 71225
71219: PUSH
71220: LD_EXP 91
71224: AND
71225: IFFALSE 71515
71227: GO 71229
71229: DISABLE
71230: LD_INT 0
71232: PPUSH
71233: PPUSH
71234: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
71235: LD_OWVAR 2
71239: PPUSH
71240: LD_INT 9
71242: PPUSH
71243: LD_INT 1
71245: PPUSH
71246: LD_INT 1
71248: PPUSH
71249: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
71253: LD_INT 9
71255: PPUSH
71256: LD_OWVAR 2
71260: PPUSH
71261: CALL_OW 343
// uc_side := 9 ;
71265: LD_ADDR_OWVAR 20
71269: PUSH
71270: LD_INT 9
71272: ST_TO_ADDR
// uc_nation := 2 ;
71273: LD_ADDR_OWVAR 21
71277: PUSH
71278: LD_INT 2
71280: ST_TO_ADDR
// hc_name := Dark Warrior ;
71281: LD_ADDR_OWVAR 26
71285: PUSH
71286: LD_STRING Dark Warrior
71288: ST_TO_ADDR
// hc_gallery :=  ;
71289: LD_ADDR_OWVAR 33
71293: PUSH
71294: LD_STRING 
71296: ST_TO_ADDR
// hc_noskilllimit := true ;
71297: LD_ADDR_OWVAR 76
71301: PUSH
71302: LD_INT 1
71304: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
71305: LD_ADDR_OWVAR 31
71309: PUSH
71310: LD_INT 30
71312: PUSH
71313: LD_INT 30
71315: PUSH
71316: LD_INT 30
71318: PUSH
71319: LD_INT 30
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: ST_TO_ADDR
// un := CreateHuman ;
71328: LD_ADDR_VAR 0 3
71332: PUSH
71333: CALL_OW 44
71337: ST_TO_ADDR
// hc_noskilllimit := false ;
71338: LD_ADDR_OWVAR 76
71342: PUSH
71343: LD_INT 0
71345: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71346: LD_VAR 0 3
71350: PPUSH
71351: LD_INT 1
71353: PPUSH
71354: CALL_OW 51
// ToLua ( playRanger() ) ;
71358: LD_STRING playRanger()
71360: PPUSH
71361: CALL_OW 559
// p := 0 ;
71365: LD_ADDR_VAR 0 2
71369: PUSH
71370: LD_INT 0
71372: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71373: LD_INT 35
71375: PPUSH
71376: CALL_OW 67
// p := p + 1 ;
71380: LD_ADDR_VAR 0 2
71384: PUSH
71385: LD_VAR 0 2
71389: PUSH
71390: LD_INT 1
71392: PLUS
71393: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
71394: LD_VAR 0 3
71398: PPUSH
71399: CALL_OW 256
71403: PUSH
71404: LD_INT 1000
71406: LESS
71407: IFFALSE 71421
// SetLives ( un , 1000 ) ;
71409: LD_VAR 0 3
71413: PPUSH
71414: LD_INT 1000
71416: PPUSH
71417: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
71421: LD_VAR 0 3
71425: PPUSH
71426: LD_INT 81
71428: PUSH
71429: LD_OWVAR 2
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 91
71440: PUSH
71441: LD_VAR 0 3
71445: PUSH
71446: LD_INT 30
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: LIST
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PPUSH
71458: CALL_OW 69
71462: PPUSH
71463: LD_VAR 0 3
71467: PPUSH
71468: CALL_OW 74
71472: PPUSH
71473: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
71477: LD_VAR 0 2
71481: PUSH
71482: LD_INT 80
71484: GREATER
71485: IFTRUE 71498
71487: PUSH
71488: LD_VAR 0 3
71492: PPUSH
71493: CALL_OW 301
71497: OR
71498: IFFALSE 71373
// if un then
71500: LD_VAR 0 3
71504: IFFALSE 71515
// RemoveUnit ( un ) ;
71506: LD_VAR 0 3
71510: PPUSH
71511: CALL_OW 64
// end ;
71515: PPOPN 3
71517: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
71518: LD_EXP 92
71522: IFFALSE 71638
71524: GO 71526
71526: DISABLE
71527: LD_INT 0
71529: PPUSH
71530: PPUSH
71531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71532: LD_ADDR_VAR 0 2
71536: PUSH
71537: LD_INT 81
71539: PUSH
71540: LD_OWVAR 2
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 21
71551: PUSH
71552: LD_INT 1
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PPUSH
71563: CALL_OW 69
71567: ST_TO_ADDR
// ToLua ( playComputer() ) ;
71568: LD_STRING playComputer()
71570: PPUSH
71571: CALL_OW 559
// if not tmp then
71575: LD_VAR 0 2
71579: NOT
71580: IFFALSE 71584
// exit ;
71582: GO 71638
// for i in tmp do
71584: LD_ADDR_VAR 0 1
71588: PUSH
71589: LD_VAR 0 2
71593: PUSH
71594: FOR_IN
71595: IFFALSE 71636
// for j := 1 to 4 do
71597: LD_ADDR_VAR 0 3
71601: PUSH
71602: DOUBLE
71603: LD_INT 1
71605: DEC
71606: ST_TO_ADDR
71607: LD_INT 4
71609: PUSH
71610: FOR_TO
71611: IFFALSE 71632
// SetSkill ( i , j , 10 ) ;
71613: LD_VAR 0 1
71617: PPUSH
71618: LD_VAR 0 3
71622: PPUSH
71623: LD_INT 10
71625: PPUSH
71626: CALL_OW 237
71630: GO 71610
71632: POP
71633: POP
71634: GO 71594
71636: POP
71637: POP
// end ;
71638: PPOPN 3
71640: END
// every 0 0$1 trigger s30 do var i , tmp ;
71641: LD_EXP 93
71645: IFFALSE 71714
71647: GO 71649
71649: DISABLE
71650: LD_INT 0
71652: PPUSH
71653: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71654: LD_ADDR_VAR 0 2
71658: PUSH
71659: LD_INT 22
71661: PUSH
71662: LD_OWVAR 2
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PPUSH
71671: CALL_OW 69
71675: ST_TO_ADDR
// if not tmp then
71676: LD_VAR 0 2
71680: NOT
71681: IFFALSE 71685
// exit ;
71683: GO 71714
// for i in tmp do
71685: LD_ADDR_VAR 0 1
71689: PUSH
71690: LD_VAR 0 2
71694: PUSH
71695: FOR_IN
71696: IFFALSE 71712
// SetLives ( i , 300 ) ;
71698: LD_VAR 0 1
71702: PPUSH
71703: LD_INT 300
71705: PPUSH
71706: CALL_OW 234
71710: GO 71695
71712: POP
71713: POP
// end ;
71714: PPOPN 2
71716: END
// every 0 0$1 trigger s60 do var i , tmp ;
71717: LD_EXP 94
71721: IFFALSE 71790
71723: GO 71725
71725: DISABLE
71726: LD_INT 0
71728: PPUSH
71729: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71730: LD_ADDR_VAR 0 2
71734: PUSH
71735: LD_INT 22
71737: PUSH
71738: LD_OWVAR 2
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PPUSH
71747: CALL_OW 69
71751: ST_TO_ADDR
// if not tmp then
71752: LD_VAR 0 2
71756: NOT
71757: IFFALSE 71761
// exit ;
71759: GO 71790
// for i in tmp do
71761: LD_ADDR_VAR 0 1
71765: PUSH
71766: LD_VAR 0 2
71770: PUSH
71771: FOR_IN
71772: IFFALSE 71788
// SetLives ( i , 600 ) ;
71774: LD_VAR 0 1
71778: PPUSH
71779: LD_INT 600
71781: PPUSH
71782: CALL_OW 234
71786: GO 71771
71788: POP
71789: POP
// end ;
71790: PPOPN 2
71792: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71793: LD_INT 0
71795: PPUSH
// case cmd of 301 :
71796: LD_VAR 0 1
71800: PUSH
71801: LD_INT 301
71803: DOUBLE
71804: EQUAL
71805: IFTRUE 71809
71807: GO 71841
71809: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
71810: LD_VAR 0 6
71814: PPUSH
71815: LD_VAR 0 7
71819: PPUSH
71820: LD_VAR 0 8
71824: PPUSH
71825: LD_VAR 0 4
71829: PPUSH
71830: LD_VAR 0 5
71834: PPUSH
71835: CALL 73054 0 5
71839: GO 71962
71841: LD_INT 302
71843: DOUBLE
71844: EQUAL
71845: IFTRUE 71849
71847: GO 71886
71849: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
71850: LD_VAR 0 6
71854: PPUSH
71855: LD_VAR 0 7
71859: PPUSH
71860: LD_VAR 0 8
71864: PPUSH
71865: LD_VAR 0 9
71869: PPUSH
71870: LD_VAR 0 4
71874: PPUSH
71875: LD_VAR 0 5
71879: PPUSH
71880: CALL 73145 0 6
71884: GO 71962
71886: LD_INT 303
71888: DOUBLE
71889: EQUAL
71890: IFTRUE 71894
71892: GO 71931
71894: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
71895: LD_VAR 0 6
71899: PPUSH
71900: LD_VAR 0 7
71904: PPUSH
71905: LD_VAR 0 8
71909: PPUSH
71910: LD_VAR 0 9
71914: PPUSH
71915: LD_VAR 0 4
71919: PPUSH
71920: LD_VAR 0 5
71924: PPUSH
71925: CALL 71967 0 6
71929: GO 71962
71931: LD_INT 304
71933: DOUBLE
71934: EQUAL
71935: IFTRUE 71939
71937: GO 71961
71939: POP
// hHackTeleport ( unit , x , y ) ; end ;
71940: LD_VAR 0 2
71944: PPUSH
71945: LD_VAR 0 4
71949: PPUSH
71950: LD_VAR 0 5
71954: PPUSH
71955: CALL 73738 0 3
71959: GO 71962
71961: POP
// end ;
71962: LD_VAR 0 12
71966: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
71967: LD_INT 0
71969: PPUSH
71970: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
71971: LD_VAR 0 1
71975: PUSH
71976: LD_INT 1
71978: LESS
71979: IFTRUE 71991
71981: PUSH
71982: LD_VAR 0 1
71986: PUSH
71987: LD_INT 3
71989: GREATER
71990: OR
71991: IFTRUE 72009
71993: PUSH
71994: LD_VAR 0 5
71998: PPUSH
71999: LD_VAR 0 6
72003: PPUSH
72004: CALL_OW 428
72008: OR
72009: IFFALSE 72013
// exit ;
72011: GO 72741
// uc_side := your_side ;
72013: LD_ADDR_OWVAR 20
72017: PUSH
72018: LD_OWVAR 2
72022: ST_TO_ADDR
// uc_nation := nation ;
72023: LD_ADDR_OWVAR 21
72027: PUSH
72028: LD_VAR 0 1
72032: ST_TO_ADDR
// bc_level = 1 ;
72033: LD_ADDR_OWVAR 43
72037: PUSH
72038: LD_INT 1
72040: ST_TO_ADDR
// case btype of 1 :
72041: LD_VAR 0 2
72045: PUSH
72046: LD_INT 1
72048: DOUBLE
72049: EQUAL
72050: IFTRUE 72054
72052: GO 72065
72054: POP
// bc_type := b_depot ; 2 :
72055: LD_ADDR_OWVAR 42
72059: PUSH
72060: LD_INT 0
72062: ST_TO_ADDR
72063: GO 72685
72065: LD_INT 2
72067: DOUBLE
72068: EQUAL
72069: IFTRUE 72073
72071: GO 72084
72073: POP
// bc_type := b_warehouse ; 3 :
72074: LD_ADDR_OWVAR 42
72078: PUSH
72079: LD_INT 1
72081: ST_TO_ADDR
72082: GO 72685
72084: LD_INT 3
72086: DOUBLE
72087: EQUAL
72088: IFTRUE 72092
72090: GO 72103
72092: POP
// bc_type := b_lab ; 4 .. 9 :
72093: LD_ADDR_OWVAR 42
72097: PUSH
72098: LD_INT 6
72100: ST_TO_ADDR
72101: GO 72685
72103: LD_INT 4
72105: DOUBLE
72106: GREATEREQUAL
72107: IFFALSE 72115
72109: LD_INT 9
72111: DOUBLE
72112: LESSEQUAL
72113: IFTRUE 72117
72115: GO 72177
72117: POP
// begin bc_type := b_lab_half ;
72118: LD_ADDR_OWVAR 42
72122: PUSH
72123: LD_INT 7
72125: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
72126: LD_ADDR_OWVAR 44
72130: PUSH
72131: LD_INT 10
72133: PUSH
72134: LD_INT 11
72136: PUSH
72137: LD_INT 12
72139: PUSH
72140: LD_INT 15
72142: PUSH
72143: LD_INT 14
72145: PUSH
72146: LD_INT 13
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: PUSH
72157: LD_VAR 0 2
72161: PUSH
72162: LD_INT 3
72164: MINUS
72165: ARRAY
72166: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
72167: LD_ADDR_OWVAR 45
72171: PUSH
72172: LD_INT 9
72174: ST_TO_ADDR
// end ; 10 .. 13 :
72175: GO 72685
72177: LD_INT 10
72179: DOUBLE
72180: GREATEREQUAL
72181: IFFALSE 72189
72183: LD_INT 13
72185: DOUBLE
72186: LESSEQUAL
72187: IFTRUE 72191
72189: GO 72268
72191: POP
// begin bc_type := b_lab_full ;
72192: LD_ADDR_OWVAR 42
72196: PUSH
72197: LD_INT 8
72199: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
72200: LD_ADDR_OWVAR 44
72204: PUSH
72205: LD_INT 10
72207: PUSH
72208: LD_INT 12
72210: PUSH
72211: LD_INT 14
72213: PUSH
72214: LD_INT 13
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: PUSH
72223: LD_VAR 0 2
72227: PUSH
72228: LD_INT 9
72230: MINUS
72231: ARRAY
72232: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
72233: LD_ADDR_OWVAR 45
72237: PUSH
72238: LD_INT 11
72240: PUSH
72241: LD_INT 15
72243: PUSH
72244: LD_INT 12
72246: PUSH
72247: LD_INT 15
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: PUSH
72256: LD_VAR 0 2
72260: PUSH
72261: LD_INT 9
72263: MINUS
72264: ARRAY
72265: ST_TO_ADDR
// end ; 14 :
72266: GO 72685
72268: LD_INT 14
72270: DOUBLE
72271: EQUAL
72272: IFTRUE 72276
72274: GO 72287
72276: POP
// bc_type := b_workshop ; 15 :
72277: LD_ADDR_OWVAR 42
72281: PUSH
72282: LD_INT 2
72284: ST_TO_ADDR
72285: GO 72685
72287: LD_INT 15
72289: DOUBLE
72290: EQUAL
72291: IFTRUE 72295
72293: GO 72306
72295: POP
// bc_type := b_factory ; 16 :
72296: LD_ADDR_OWVAR 42
72300: PUSH
72301: LD_INT 3
72303: ST_TO_ADDR
72304: GO 72685
72306: LD_INT 16
72308: DOUBLE
72309: EQUAL
72310: IFTRUE 72314
72312: GO 72325
72314: POP
// bc_type := b_ext_gun ; 17 :
72315: LD_ADDR_OWVAR 42
72319: PUSH
72320: LD_INT 17
72322: ST_TO_ADDR
72323: GO 72685
72325: LD_INT 17
72327: DOUBLE
72328: EQUAL
72329: IFTRUE 72333
72331: GO 72361
72333: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
72334: LD_ADDR_OWVAR 42
72338: PUSH
72339: LD_INT 19
72341: PUSH
72342: LD_INT 23
72344: PUSH
72345: LD_INT 19
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: LIST
72352: PUSH
72353: LD_VAR 0 1
72357: ARRAY
72358: ST_TO_ADDR
72359: GO 72685
72361: LD_INT 18
72363: DOUBLE
72364: EQUAL
72365: IFTRUE 72369
72367: GO 72380
72369: POP
// bc_type := b_ext_radar ; 19 :
72370: LD_ADDR_OWVAR 42
72374: PUSH
72375: LD_INT 20
72377: ST_TO_ADDR
72378: GO 72685
72380: LD_INT 19
72382: DOUBLE
72383: EQUAL
72384: IFTRUE 72388
72386: GO 72399
72388: POP
// bc_type := b_ext_radio ; 20 :
72389: LD_ADDR_OWVAR 42
72393: PUSH
72394: LD_INT 22
72396: ST_TO_ADDR
72397: GO 72685
72399: LD_INT 20
72401: DOUBLE
72402: EQUAL
72403: IFTRUE 72407
72405: GO 72418
72407: POP
// bc_type := b_ext_siberium ; 21 :
72408: LD_ADDR_OWVAR 42
72412: PUSH
72413: LD_INT 21
72415: ST_TO_ADDR
72416: GO 72685
72418: LD_INT 21
72420: DOUBLE
72421: EQUAL
72422: IFTRUE 72426
72424: GO 72437
72426: POP
// bc_type := b_ext_computer ; 22 :
72427: LD_ADDR_OWVAR 42
72431: PUSH
72432: LD_INT 24
72434: ST_TO_ADDR
72435: GO 72685
72437: LD_INT 22
72439: DOUBLE
72440: EQUAL
72441: IFTRUE 72445
72443: GO 72456
72445: POP
// bc_type := b_ext_track ; 23 :
72446: LD_ADDR_OWVAR 42
72450: PUSH
72451: LD_INT 16
72453: ST_TO_ADDR
72454: GO 72685
72456: LD_INT 23
72458: DOUBLE
72459: EQUAL
72460: IFTRUE 72464
72462: GO 72475
72464: POP
// bc_type := b_ext_laser ; 24 :
72465: LD_ADDR_OWVAR 42
72469: PUSH
72470: LD_INT 25
72472: ST_TO_ADDR
72473: GO 72685
72475: LD_INT 24
72477: DOUBLE
72478: EQUAL
72479: IFTRUE 72483
72481: GO 72494
72483: POP
// bc_type := b_control_tower ; 25 :
72484: LD_ADDR_OWVAR 42
72488: PUSH
72489: LD_INT 36
72491: ST_TO_ADDR
72492: GO 72685
72494: LD_INT 25
72496: DOUBLE
72497: EQUAL
72498: IFTRUE 72502
72500: GO 72513
72502: POP
// bc_type := b_breastwork ; 26 :
72503: LD_ADDR_OWVAR 42
72507: PUSH
72508: LD_INT 31
72510: ST_TO_ADDR
72511: GO 72685
72513: LD_INT 26
72515: DOUBLE
72516: EQUAL
72517: IFTRUE 72521
72519: GO 72532
72521: POP
// bc_type := b_bunker ; 27 :
72522: LD_ADDR_OWVAR 42
72526: PUSH
72527: LD_INT 32
72529: ST_TO_ADDR
72530: GO 72685
72532: LD_INT 27
72534: DOUBLE
72535: EQUAL
72536: IFTRUE 72540
72538: GO 72551
72540: POP
// bc_type := b_turret ; 28 :
72541: LD_ADDR_OWVAR 42
72545: PUSH
72546: LD_INT 33
72548: ST_TO_ADDR
72549: GO 72685
72551: LD_INT 28
72553: DOUBLE
72554: EQUAL
72555: IFTRUE 72559
72557: GO 72570
72559: POP
// bc_type := b_armoury ; 29 :
72560: LD_ADDR_OWVAR 42
72564: PUSH
72565: LD_INT 4
72567: ST_TO_ADDR
72568: GO 72685
72570: LD_INT 29
72572: DOUBLE
72573: EQUAL
72574: IFTRUE 72578
72576: GO 72589
72578: POP
// bc_type := b_barracks ; 30 :
72579: LD_ADDR_OWVAR 42
72583: PUSH
72584: LD_INT 5
72586: ST_TO_ADDR
72587: GO 72685
72589: LD_INT 30
72591: DOUBLE
72592: EQUAL
72593: IFTRUE 72597
72595: GO 72608
72597: POP
// bc_type := b_solar_power ; 31 :
72598: LD_ADDR_OWVAR 42
72602: PUSH
72603: LD_INT 27
72605: ST_TO_ADDR
72606: GO 72685
72608: LD_INT 31
72610: DOUBLE
72611: EQUAL
72612: IFTRUE 72616
72614: GO 72627
72616: POP
// bc_type := b_oil_power ; 32 :
72617: LD_ADDR_OWVAR 42
72621: PUSH
72622: LD_INT 26
72624: ST_TO_ADDR
72625: GO 72685
72627: LD_INT 32
72629: DOUBLE
72630: EQUAL
72631: IFTRUE 72635
72633: GO 72646
72635: POP
// bc_type := b_siberite_power ; 33 :
72636: LD_ADDR_OWVAR 42
72640: PUSH
72641: LD_INT 28
72643: ST_TO_ADDR
72644: GO 72685
72646: LD_INT 33
72648: DOUBLE
72649: EQUAL
72650: IFTRUE 72654
72652: GO 72665
72654: POP
// bc_type := b_oil_mine ; 34 :
72655: LD_ADDR_OWVAR 42
72659: PUSH
72660: LD_INT 29
72662: ST_TO_ADDR
72663: GO 72685
72665: LD_INT 34
72667: DOUBLE
72668: EQUAL
72669: IFTRUE 72673
72671: GO 72684
72673: POP
// bc_type := b_siberite_mine ; end ;
72674: LD_ADDR_OWVAR 42
72678: PUSH
72679: LD_INT 30
72681: ST_TO_ADDR
72682: GO 72685
72684: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
72685: LD_ADDR_VAR 0 8
72689: PUSH
72690: LD_VAR 0 5
72694: PPUSH
72695: LD_VAR 0 6
72699: PPUSH
72700: LD_VAR 0 3
72704: PPUSH
72705: CALL_OW 47
72709: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
72710: LD_OWVAR 42
72714: PUSH
72715: LD_INT 32
72717: PUSH
72718: LD_INT 33
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: IN
72725: IFFALSE 72741
// PlaceWeaponTurret ( b , weapon ) ;
72727: LD_VAR 0 8
72731: PPUSH
72732: LD_VAR 0 4
72736: PPUSH
72737: CALL_OW 431
// end ;
72741: LD_VAR 0 7
72745: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
72746: LD_INT 0
72748: PPUSH
72749: PPUSH
72750: PPUSH
72751: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72752: LD_ADDR_VAR 0 4
72756: PUSH
72757: LD_INT 22
72759: PUSH
72760: LD_OWVAR 2
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 2
72771: PUSH
72772: LD_INT 30
72774: PUSH
72775: LD_INT 0
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: PUSH
72782: LD_INT 30
72784: PUSH
72785: LD_INT 1
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: LIST
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PPUSH
72801: CALL_OW 69
72805: ST_TO_ADDR
// if not tmp then
72806: LD_VAR 0 4
72810: NOT
72811: IFFALSE 72815
// exit ;
72813: GO 72874
// for i in tmp do
72815: LD_ADDR_VAR 0 2
72819: PUSH
72820: LD_VAR 0 4
72824: PUSH
72825: FOR_IN
72826: IFFALSE 72872
// for j = 1 to 3 do
72828: LD_ADDR_VAR 0 3
72832: PUSH
72833: DOUBLE
72834: LD_INT 1
72836: DEC
72837: ST_TO_ADDR
72838: LD_INT 3
72840: PUSH
72841: FOR_TO
72842: IFFALSE 72868
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
72844: LD_VAR 0 2
72848: PPUSH
72849: CALL_OW 274
72853: PPUSH
72854: LD_VAR 0 3
72858: PPUSH
72859: LD_INT 99999
72861: PPUSH
72862: CALL_OW 277
72866: GO 72841
72868: POP
72869: POP
72870: GO 72825
72872: POP
72873: POP
// end ;
72874: LD_VAR 0 1
72878: RET
// export function hHackSetLevel10 ; var i , j ; begin
72879: LD_INT 0
72881: PPUSH
72882: PPUSH
72883: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72884: LD_ADDR_VAR 0 2
72888: PUSH
72889: LD_INT 21
72891: PUSH
72892: LD_INT 1
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PPUSH
72899: CALL_OW 69
72903: PUSH
72904: FOR_IN
72905: IFFALSE 72957
// if IsSelected ( i ) then
72907: LD_VAR 0 2
72911: PPUSH
72912: CALL_OW 306
72916: IFFALSE 72955
// begin for j := 1 to 4 do
72918: LD_ADDR_VAR 0 3
72922: PUSH
72923: DOUBLE
72924: LD_INT 1
72926: DEC
72927: ST_TO_ADDR
72928: LD_INT 4
72930: PUSH
72931: FOR_TO
72932: IFFALSE 72953
// SetSkill ( i , j , 10 ) ;
72934: LD_VAR 0 2
72938: PPUSH
72939: LD_VAR 0 3
72943: PPUSH
72944: LD_INT 10
72946: PPUSH
72947: CALL_OW 237
72951: GO 72931
72953: POP
72954: POP
// end ;
72955: GO 72904
72957: POP
72958: POP
// end ;
72959: LD_VAR 0 1
72963: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
72964: LD_INT 0
72966: PPUSH
72967: PPUSH
72968: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
72969: LD_ADDR_VAR 0 2
72973: PUSH
72974: LD_INT 22
72976: PUSH
72977: LD_OWVAR 2
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: PUSH
72986: LD_INT 21
72988: PUSH
72989: LD_INT 1
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PPUSH
73000: CALL_OW 69
73004: PUSH
73005: FOR_IN
73006: IFFALSE 73047
// begin for j := 1 to 4 do
73008: LD_ADDR_VAR 0 3
73012: PUSH
73013: DOUBLE
73014: LD_INT 1
73016: DEC
73017: ST_TO_ADDR
73018: LD_INT 4
73020: PUSH
73021: FOR_TO
73022: IFFALSE 73043
// SetSkill ( i , j , 10 ) ;
73024: LD_VAR 0 2
73028: PPUSH
73029: LD_VAR 0 3
73033: PPUSH
73034: LD_INT 10
73036: PPUSH
73037: CALL_OW 237
73041: GO 73021
73043: POP
73044: POP
// end ;
73045: GO 73005
73047: POP
73048: POP
// end ;
73049: LD_VAR 0 1
73053: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
73054: LD_INT 0
73056: PPUSH
// uc_side := your_side ;
73057: LD_ADDR_OWVAR 20
73061: PUSH
73062: LD_OWVAR 2
73066: ST_TO_ADDR
// uc_nation := nation ;
73067: LD_ADDR_OWVAR 21
73071: PUSH
73072: LD_VAR 0 1
73076: ST_TO_ADDR
// InitHc ;
73077: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
73081: LD_INT 0
73083: PPUSH
73084: LD_VAR 0 2
73088: PPUSH
73089: LD_VAR 0 3
73093: PPUSH
73094: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
73098: LD_VAR 0 4
73102: PPUSH
73103: LD_VAR 0 5
73107: PPUSH
73108: CALL_OW 428
73112: PUSH
73113: LD_INT 0
73115: EQUAL
73116: IFFALSE 73140
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
73118: CALL_OW 44
73122: PPUSH
73123: LD_VAR 0 4
73127: PPUSH
73128: LD_VAR 0 5
73132: PPUSH
73133: LD_INT 1
73135: PPUSH
73136: CALL_OW 48
// end ;
73140: LD_VAR 0 6
73144: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
73145: LD_INT 0
73147: PPUSH
73148: PPUSH
// uc_side := your_side ;
73149: LD_ADDR_OWVAR 20
73153: PUSH
73154: LD_OWVAR 2
73158: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
73159: LD_VAR 0 1
73163: PUSH
73164: LD_INT 1
73166: PUSH
73167: LD_INT 2
73169: PUSH
73170: LD_INT 3
73172: PUSH
73173: LD_INT 4
73175: PUSH
73176: LD_INT 5
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: IN
73186: IFFALSE 73198
// uc_nation := nation_american else
73188: LD_ADDR_OWVAR 21
73192: PUSH
73193: LD_INT 1
73195: ST_TO_ADDR
73196: GO 73241
// if chassis in [ 11 , 12 , 13 , 14 ] then
73198: LD_VAR 0 1
73202: PUSH
73203: LD_INT 11
73205: PUSH
73206: LD_INT 12
73208: PUSH
73209: LD_INT 13
73211: PUSH
73212: LD_INT 14
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: IN
73221: IFFALSE 73233
// uc_nation := nation_arabian else
73223: LD_ADDR_OWVAR 21
73227: PUSH
73228: LD_INT 2
73230: ST_TO_ADDR
73231: GO 73241
// uc_nation := nation_russian ;
73233: LD_ADDR_OWVAR 21
73237: PUSH
73238: LD_INT 3
73240: ST_TO_ADDR
// vc_chassis := chassis ;
73241: LD_ADDR_OWVAR 37
73245: PUSH
73246: LD_VAR 0 1
73250: ST_TO_ADDR
// vc_engine := engine ;
73251: LD_ADDR_OWVAR 39
73255: PUSH
73256: LD_VAR 0 2
73260: ST_TO_ADDR
// vc_control := control ;
73261: LD_ADDR_OWVAR 38
73265: PUSH
73266: LD_VAR 0 3
73270: ST_TO_ADDR
// vc_weapon := weapon ;
73271: LD_ADDR_OWVAR 40
73275: PUSH
73276: LD_VAR 0 4
73280: ST_TO_ADDR
// un := CreateVehicle ;
73281: LD_ADDR_VAR 0 8
73285: PUSH
73286: CALL_OW 45
73290: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
73291: LD_VAR 0 8
73295: PPUSH
73296: LD_INT 0
73298: PPUSH
73299: LD_INT 5
73301: PPUSH
73302: CALL_OW 12
73306: PPUSH
73307: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
73311: LD_VAR 0 8
73315: PPUSH
73316: LD_VAR 0 5
73320: PPUSH
73321: LD_VAR 0 6
73325: PPUSH
73326: LD_INT 1
73328: PPUSH
73329: CALL_OW 48
// end ;
73333: LD_VAR 0 7
73337: RET
// export hInvincible ; every 1 do
73338: GO 73340
73340: DISABLE
// hInvincible := [ ] ;
73341: LD_ADDR_EXP 95
73345: PUSH
73346: EMPTY
73347: ST_TO_ADDR
73348: END
// every 10 do var i ;
73349: GO 73351
73351: DISABLE
73352: LD_INT 0
73354: PPUSH
// begin enable ;
73355: ENABLE
// if not hInvincible then
73356: LD_EXP 95
73360: NOT
73361: IFFALSE 73365
// exit ;
73363: GO 73409
// for i in hInvincible do
73365: LD_ADDR_VAR 0 1
73369: PUSH
73370: LD_EXP 95
73374: PUSH
73375: FOR_IN
73376: IFFALSE 73407
// if GetLives ( i ) < 1000 then
73378: LD_VAR 0 1
73382: PPUSH
73383: CALL_OW 256
73387: PUSH
73388: LD_INT 1000
73390: LESS
73391: IFFALSE 73405
// SetLives ( i , 1000 ) ;
73393: LD_VAR 0 1
73397: PPUSH
73398: LD_INT 1000
73400: PPUSH
73401: CALL_OW 234
73405: GO 73375
73407: POP
73408: POP
// end ;
73409: PPOPN 1
73411: END
// export function hHackInvincible ; var i ; begin
73412: LD_INT 0
73414: PPUSH
73415: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
73416: LD_ADDR_VAR 0 2
73420: PUSH
73421: LD_INT 2
73423: PUSH
73424: LD_INT 21
73426: PUSH
73427: LD_INT 1
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: LD_INT 21
73436: PUSH
73437: LD_INT 2
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: LIST
73448: PPUSH
73449: CALL_OW 69
73453: PUSH
73454: FOR_IN
73455: IFFALSE 73516
// if IsSelected ( i ) then
73457: LD_VAR 0 2
73461: PPUSH
73462: CALL_OW 306
73466: IFFALSE 73514
// begin if i in hInvincible then
73468: LD_VAR 0 2
73472: PUSH
73473: LD_EXP 95
73477: IN
73478: IFFALSE 73498
// hInvincible := hInvincible diff i else
73480: LD_ADDR_EXP 95
73484: PUSH
73485: LD_EXP 95
73489: PUSH
73490: LD_VAR 0 2
73494: DIFF
73495: ST_TO_ADDR
73496: GO 73514
// hInvincible := hInvincible union i ;
73498: LD_ADDR_EXP 95
73502: PUSH
73503: LD_EXP 95
73507: PUSH
73508: LD_VAR 0 2
73512: UNION
73513: ST_TO_ADDR
// end ;
73514: GO 73454
73516: POP
73517: POP
// end ;
73518: LD_VAR 0 1
73522: RET
// export function hHackInvisible ; var i , j ; begin
73523: LD_INT 0
73525: PPUSH
73526: PPUSH
73527: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73528: LD_ADDR_VAR 0 2
73532: PUSH
73533: LD_INT 21
73535: PUSH
73536: LD_INT 1
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: PPUSH
73543: CALL_OW 69
73547: PUSH
73548: FOR_IN
73549: IFFALSE 73573
// if IsSelected ( i ) then
73551: LD_VAR 0 2
73555: PPUSH
73556: CALL_OW 306
73560: IFFALSE 73571
// ComForceInvisible ( i ) ;
73562: LD_VAR 0 2
73566: PPUSH
73567: CALL_OW 496
73571: GO 73548
73573: POP
73574: POP
// end ;
73575: LD_VAR 0 1
73579: RET
// export function hHackChangeYourSide ; begin
73580: LD_INT 0
73582: PPUSH
// if your_side = 8 then
73583: LD_OWVAR 2
73587: PUSH
73588: LD_INT 8
73590: EQUAL
73591: IFFALSE 73603
// your_side := 0 else
73593: LD_ADDR_OWVAR 2
73597: PUSH
73598: LD_INT 0
73600: ST_TO_ADDR
73601: GO 73617
// your_side := your_side + 1 ;
73603: LD_ADDR_OWVAR 2
73607: PUSH
73608: LD_OWVAR 2
73612: PUSH
73613: LD_INT 1
73615: PLUS
73616: ST_TO_ADDR
// end ;
73617: LD_VAR 0 1
73621: RET
// export function hHackChangeUnitSide ; var i , j ; begin
73622: LD_INT 0
73624: PPUSH
73625: PPUSH
73626: PPUSH
// for i in all_units do
73627: LD_ADDR_VAR 0 2
73631: PUSH
73632: LD_OWVAR 3
73636: PUSH
73637: FOR_IN
73638: IFFALSE 73716
// if IsSelected ( i ) then
73640: LD_VAR 0 2
73644: PPUSH
73645: CALL_OW 306
73649: IFFALSE 73714
// begin j := GetSide ( i ) ;
73651: LD_ADDR_VAR 0 3
73655: PUSH
73656: LD_VAR 0 2
73660: PPUSH
73661: CALL_OW 255
73665: ST_TO_ADDR
// if j = 8 then
73666: LD_VAR 0 3
73670: PUSH
73671: LD_INT 8
73673: EQUAL
73674: IFFALSE 73686
// j := 0 else
73676: LD_ADDR_VAR 0 3
73680: PUSH
73681: LD_INT 0
73683: ST_TO_ADDR
73684: GO 73700
// j := j + 1 ;
73686: LD_ADDR_VAR 0 3
73690: PUSH
73691: LD_VAR 0 3
73695: PUSH
73696: LD_INT 1
73698: PLUS
73699: ST_TO_ADDR
// SetSide ( i , j ) ;
73700: LD_VAR 0 2
73704: PPUSH
73705: LD_VAR 0 3
73709: PPUSH
73710: CALL_OW 235
// end ;
73714: GO 73637
73716: POP
73717: POP
// end ;
73718: LD_VAR 0 1
73722: RET
// export function hHackFog ; begin
73723: LD_INT 0
73725: PPUSH
// FogOff ( true ) ;
73726: LD_INT 1
73728: PPUSH
73729: CALL_OW 344
// end ;
73733: LD_VAR 0 1
73737: RET
// export function hHackTeleport ( unit , x , y ) ; begin
73738: LD_INT 0
73740: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
73741: LD_VAR 0 1
73745: PPUSH
73746: LD_VAR 0 2
73750: PPUSH
73751: LD_VAR 0 3
73755: PPUSH
73756: LD_INT 1
73758: PPUSH
73759: LD_INT 1
73761: PPUSH
73762: CALL_OW 483
// CenterOnXY ( x , y ) ;
73766: LD_VAR 0 2
73770: PPUSH
73771: LD_VAR 0 3
73775: PPUSH
73776: CALL_OW 84
// end ;
73780: LD_VAR 0 4
73784: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
73785: LD_INT 0
73787: PPUSH
73788: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
73789: LD_VAR 0 1
73793: NOT
73794: IFTRUE 73813
73796: PUSH
73797: LD_VAR 0 2
73801: PPUSH
73802: LD_VAR 0 3
73806: PPUSH
73807: CALL_OW 488
73811: NOT
73812: OR
73813: IFTRUE 73848
73815: PUSH
73816: LD_VAR 0 1
73820: PPUSH
73821: CALL_OW 266
73825: PUSH
73826: LD_INT 3
73828: NONEQUAL
73829: IFFALSE 73847
73831: PUSH
73832: LD_VAR 0 1
73836: PPUSH
73837: CALL_OW 247
73841: PUSH
73842: LD_INT 1
73844: EQUAL
73845: NOT
73846: AND
73847: OR
73848: IFFALSE 73852
// exit ;
73850: GO 74134
// if GetType ( factory ) = unit_human then
73852: LD_VAR 0 1
73856: PPUSH
73857: CALL_OW 247
73861: PUSH
73862: LD_INT 1
73864: EQUAL
73865: IFFALSE 73882
// factory := IsInUnit ( factory ) ;
73867: LD_ADDR_VAR 0 1
73871: PUSH
73872: LD_VAR 0 1
73876: PPUSH
73877: CALL_OW 310
73881: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
73882: LD_VAR 0 1
73886: PPUSH
73887: CALL_OW 266
73891: PUSH
73892: LD_INT 3
73894: NONEQUAL
73895: IFFALSE 73899
// exit ;
73897: GO 74134
// for i := 1 to Count ( factoryWaypoints ) do
73899: LD_ADDR_VAR 0 5
73903: PUSH
73904: DOUBLE
73905: LD_INT 1
73907: DEC
73908: ST_TO_ADDR
73909: LD_EXP 96
73913: PPUSH
73914: CALL 17782 0 1
73918: PUSH
73919: FOR_TO
73920: IFFALSE 74082
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
73922: LD_VAR 0 2
73926: PPUSH
73927: LD_VAR 0 3
73931: PPUSH
73932: CALL_OW 428
73936: PUSH
73937: LD_EXP 96
73941: PUSH
73942: LD_VAR 0 5
73946: ARRAY
73947: PUSH
73948: LD_INT 2
73950: ARRAY
73951: EQUAL
73952: IFFALSE 73984
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
73954: LD_ADDR_EXP 96
73958: PUSH
73959: LD_EXP 96
73963: PPUSH
73964: LD_VAR 0 5
73968: PPUSH
73969: CALL_OW 3
73973: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73974: CALL 74139 0 0
// exit ;
73978: POP
73979: POP
73980: GO 74134
// end else
73982: GO 74080
// if factory = factoryWaypoints [ i ] [ 2 ] then
73984: LD_VAR 0 1
73988: PUSH
73989: LD_EXP 96
73993: PUSH
73994: LD_VAR 0 5
73998: ARRAY
73999: PUSH
74000: LD_INT 2
74002: ARRAY
74003: EQUAL
74004: IFFALSE 74080
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74006: LD_ADDR_EXP 96
74010: PUSH
74011: LD_EXP 96
74015: PPUSH
74016: LD_VAR 0 5
74020: PPUSH
74021: CALL_OW 3
74025: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74026: LD_ADDR_EXP 96
74030: PUSH
74031: LD_EXP 96
74035: PPUSH
74036: LD_VAR 0 1
74040: PPUSH
74041: CALL_OW 255
74045: PUSH
74046: LD_VAR 0 1
74050: PUSH
74051: LD_VAR 0 2
74055: PUSH
74056: LD_VAR 0 3
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: LIST
74065: LIST
74066: PPUSH
74067: CALL 53714 0 2
74071: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74072: CALL 74139 0 0
// exit ;
74076: POP
74077: POP
74078: GO 74134
// end ; end ;
74080: GO 73919
74082: POP
74083: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74084: LD_ADDR_EXP 96
74088: PUSH
74089: LD_EXP 96
74093: PPUSH
74094: LD_VAR 0 1
74098: PPUSH
74099: CALL_OW 255
74103: PUSH
74104: LD_VAR 0 1
74108: PUSH
74109: LD_VAR 0 2
74113: PUSH
74114: LD_VAR 0 3
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: PPUSH
74125: CALL 53714 0 2
74129: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74130: CALL 74139 0 0
// end ;
74134: LD_VAR 0 4
74138: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
74139: LD_INT 0
74141: PPUSH
74142: PPUSH
74143: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
74144: LD_STRING resetFactoryWaypoint();
74146: PPUSH
74147: CALL_OW 559
// if factoryWaypoints then
74151: LD_EXP 96
74155: IFFALSE 74276
// begin list := factoryWaypoints ;
74157: LD_ADDR_VAR 0 3
74161: PUSH
74162: LD_EXP 96
74166: ST_TO_ADDR
// for i := 1 to list do
74167: LD_ADDR_VAR 0 2
74171: PUSH
74172: DOUBLE
74173: LD_INT 1
74175: DEC
74176: ST_TO_ADDR
74177: LD_VAR 0 3
74181: PUSH
74182: FOR_TO
74183: IFFALSE 74274
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74185: LD_STRING setFactoryWaypointXY(
74187: PUSH
74188: LD_VAR 0 3
74192: PUSH
74193: LD_VAR 0 2
74197: ARRAY
74198: PUSH
74199: LD_INT 1
74201: ARRAY
74202: STR
74203: PUSH
74204: LD_STRING ,
74206: STR
74207: PUSH
74208: LD_VAR 0 3
74212: PUSH
74213: LD_VAR 0 2
74217: ARRAY
74218: PUSH
74219: LD_INT 2
74221: ARRAY
74222: STR
74223: PUSH
74224: LD_STRING ,
74226: STR
74227: PUSH
74228: LD_VAR 0 3
74232: PUSH
74233: LD_VAR 0 2
74237: ARRAY
74238: PUSH
74239: LD_INT 3
74241: ARRAY
74242: STR
74243: PUSH
74244: LD_STRING ,
74246: STR
74247: PUSH
74248: LD_VAR 0 3
74252: PUSH
74253: LD_VAR 0 2
74257: ARRAY
74258: PUSH
74259: LD_INT 4
74261: ARRAY
74262: STR
74263: PUSH
74264: LD_STRING )
74266: STR
74267: PPUSH
74268: CALL_OW 559
74272: GO 74182
74274: POP
74275: POP
// end ; end ;
74276: LD_VAR 0 1
74280: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
74281: LD_INT 0
74283: PPUSH
// if HexInfo ( x , y ) = warehouse then
74284: LD_VAR 0 2
74288: PPUSH
74289: LD_VAR 0 3
74293: PPUSH
74294: CALL_OW 428
74298: PUSH
74299: LD_VAR 0 1
74303: EQUAL
74304: IFFALSE 74331
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
74306: LD_ADDR_EXP 98
74310: PUSH
74311: LD_EXP 98
74315: PPUSH
74316: LD_VAR 0 1
74320: PPUSH
74321: LD_INT 0
74323: PPUSH
74324: CALL_OW 1
74328: ST_TO_ADDR
74329: GO 74382
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
74331: LD_ADDR_EXP 98
74335: PUSH
74336: LD_EXP 98
74340: PPUSH
74341: LD_VAR 0 1
74345: PPUSH
74346: LD_VAR 0 1
74350: PPUSH
74351: CALL_OW 255
74355: PUSH
74356: LD_VAR 0 1
74360: PUSH
74361: LD_VAR 0 2
74365: PUSH
74366: LD_VAR 0 3
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: PPUSH
74377: CALL_OW 1
74381: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
74382: CALL 74391 0 0
// end ;
74386: LD_VAR 0 4
74390: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
74391: LD_INT 0
74393: PPUSH
74394: PPUSH
74395: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
74396: LD_STRING resetWarehouseGatheringPoints();
74398: PPUSH
74399: CALL_OW 559
// if warehouseGatheringPoints then
74403: LD_EXP 98
74407: IFFALSE 74533
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
74409: LD_ADDR_VAR 0 3
74413: PUSH
74414: LD_EXP 98
74418: PPUSH
74419: CALL 57648 0 1
74423: ST_TO_ADDR
// for i := 1 to list do
74424: LD_ADDR_VAR 0 2
74428: PUSH
74429: DOUBLE
74430: LD_INT 1
74432: DEC
74433: ST_TO_ADDR
74434: LD_VAR 0 3
74438: PUSH
74439: FOR_TO
74440: IFFALSE 74531
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74442: LD_STRING setWarehouseGatheringPointXY(
74444: PUSH
74445: LD_VAR 0 3
74449: PUSH
74450: LD_VAR 0 2
74454: ARRAY
74455: PUSH
74456: LD_INT 1
74458: ARRAY
74459: STR
74460: PUSH
74461: LD_STRING ,
74463: STR
74464: PUSH
74465: LD_VAR 0 3
74469: PUSH
74470: LD_VAR 0 2
74474: ARRAY
74475: PUSH
74476: LD_INT 2
74478: ARRAY
74479: STR
74480: PUSH
74481: LD_STRING ,
74483: STR
74484: PUSH
74485: LD_VAR 0 3
74489: PUSH
74490: LD_VAR 0 2
74494: ARRAY
74495: PUSH
74496: LD_INT 3
74498: ARRAY
74499: STR
74500: PUSH
74501: LD_STRING ,
74503: STR
74504: PUSH
74505: LD_VAR 0 3
74509: PUSH
74510: LD_VAR 0 2
74514: ARRAY
74515: PUSH
74516: LD_INT 4
74518: ARRAY
74519: STR
74520: PUSH
74521: LD_STRING )
74523: STR
74524: PPUSH
74525: CALL_OW 559
74529: GO 74439
74531: POP
74532: POP
// end ; end ;
74533: LD_VAR 0 1
74537: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
74538: LD_EXP 98
74542: IFFALSE 75237
74544: GO 74546
74546: DISABLE
74547: LD_INT 0
74549: PPUSH
74550: PPUSH
74551: PPUSH
74552: PPUSH
74553: PPUSH
74554: PPUSH
74555: PPUSH
74556: PPUSH
74557: PPUSH
// begin enable ;
74558: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
74559: LD_ADDR_VAR 0 3
74563: PUSH
74564: LD_EXP 98
74568: PPUSH
74569: CALL 57648 0 1
74573: ST_TO_ADDR
// if not list then
74574: LD_VAR 0 3
74578: NOT
74579: IFFALSE 74583
// exit ;
74581: GO 75237
// for i := 1 to list do
74583: LD_ADDR_VAR 0 1
74587: PUSH
74588: DOUBLE
74589: LD_INT 1
74591: DEC
74592: ST_TO_ADDR
74593: LD_VAR 0 3
74597: PUSH
74598: FOR_TO
74599: IFFALSE 75235
// begin depot := list [ i ] [ 2 ] ;
74601: LD_ADDR_VAR 0 8
74605: PUSH
74606: LD_VAR 0 3
74610: PUSH
74611: LD_VAR 0 1
74615: ARRAY
74616: PUSH
74617: LD_INT 2
74619: ARRAY
74620: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
74621: LD_ADDR_VAR 0 5
74625: PUSH
74626: LD_VAR 0 3
74630: PUSH
74631: LD_VAR 0 1
74635: ARRAY
74636: PUSH
74637: LD_INT 1
74639: ARRAY
74640: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
74641: LD_VAR 0 8
74645: PPUSH
74646: CALL_OW 301
74650: IFTRUE 74669
74652: PUSH
74653: LD_VAR 0 5
74657: PUSH
74658: LD_VAR 0 8
74662: PPUSH
74663: CALL_OW 255
74667: NONEQUAL
74668: OR
74669: IFFALSE 74698
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
74671: LD_ADDR_EXP 98
74675: PUSH
74676: LD_EXP 98
74680: PPUSH
74681: LD_VAR 0 8
74685: PPUSH
74686: LD_INT 0
74688: PPUSH
74689: CALL_OW 1
74693: ST_TO_ADDR
// exit ;
74694: POP
74695: POP
74696: GO 75237
// end ; x := list [ i ] [ 3 ] ;
74698: LD_ADDR_VAR 0 6
74702: PUSH
74703: LD_VAR 0 3
74707: PUSH
74708: LD_VAR 0 1
74712: ARRAY
74713: PUSH
74714: LD_INT 3
74716: ARRAY
74717: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
74718: LD_ADDR_VAR 0 7
74722: PUSH
74723: LD_VAR 0 3
74727: PUSH
74728: LD_VAR 0 1
74732: ARRAY
74733: PUSH
74734: LD_INT 4
74736: ARRAY
74737: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
74738: LD_ADDR_VAR 0 9
74742: PUSH
74743: LD_VAR 0 6
74747: PPUSH
74748: LD_VAR 0 7
74752: PPUSH
74753: LD_INT 16
74755: PPUSH
74756: CALL 56222 0 3
74760: ST_TO_ADDR
// if not cratesNearbyPoint then
74761: LD_VAR 0 9
74765: NOT
74766: IFFALSE 74772
// exit ;
74768: POP
74769: POP
74770: GO 75237
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
74772: LD_ADDR_VAR 0 4
74776: PUSH
74777: LD_INT 22
74779: PUSH
74780: LD_VAR 0 5
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PUSH
74789: LD_INT 3
74791: PUSH
74792: LD_INT 60
74794: PUSH
74795: EMPTY
74796: LIST
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: PUSH
74802: LD_INT 91
74804: PUSH
74805: LD_VAR 0 8
74809: PUSH
74810: LD_INT 6
74812: PUSH
74813: EMPTY
74814: LIST
74815: LIST
74816: LIST
74817: PUSH
74818: LD_INT 2
74820: PUSH
74821: LD_INT 25
74823: PUSH
74824: LD_INT 2
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: PUSH
74831: LD_INT 25
74833: PUSH
74834: LD_INT 16
74836: PUSH
74837: EMPTY
74838: LIST
74839: LIST
74840: PUSH
74841: EMPTY
74842: LIST
74843: LIST
74844: LIST
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: PPUSH
74852: CALL_OW 69
74856: PUSH
74857: LD_VAR 0 8
74861: PPUSH
74862: CALL_OW 313
74866: PPUSH
74867: LD_INT 3
74869: PUSH
74870: LD_INT 60
74872: PUSH
74873: EMPTY
74874: LIST
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PUSH
74880: LD_INT 2
74882: PUSH
74883: LD_INT 25
74885: PUSH
74886: LD_INT 2
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 25
74895: PUSH
74896: LD_INT 16
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: LIST
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: PPUSH
74912: CALL_OW 72
74916: UNION
74917: ST_TO_ADDR
// if tmp then
74918: LD_VAR 0 4
74922: IFFALSE 75002
// begin tmp := ShrinkArray ( tmp , 3 ) ;
74924: LD_ADDR_VAR 0 4
74928: PUSH
74929: LD_VAR 0 4
74933: PPUSH
74934: LD_INT 3
74936: PPUSH
74937: CALL 54029 0 2
74941: ST_TO_ADDR
// for j in tmp do
74942: LD_ADDR_VAR 0 2
74946: PUSH
74947: LD_VAR 0 4
74951: PUSH
74952: FOR_IN
74953: IFFALSE 74996
// begin if IsInUnit ( j ) then
74955: LD_VAR 0 2
74959: PPUSH
74960: CALL_OW 310
74964: IFFALSE 74975
// ComExit ( j ) ;
74966: LD_VAR 0 2
74970: PPUSH
74971: CALL 54112 0 1
// AddComCollect ( j , x , y ) ;
74975: LD_VAR 0 2
74979: PPUSH
74980: LD_VAR 0 6
74984: PPUSH
74985: LD_VAR 0 7
74989: PPUSH
74990: CALL_OW 177
// end ;
74994: GO 74952
74996: POP
74997: POP
// exit ;
74998: POP
74999: POP
75000: GO 75237
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
75002: LD_ADDR_VAR 0 4
75006: PUSH
75007: LD_INT 22
75009: PUSH
75010: LD_VAR 0 5
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: PUSH
75019: LD_INT 91
75021: PUSH
75022: LD_VAR 0 8
75026: PUSH
75027: LD_INT 8
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: LIST
75034: PUSH
75035: LD_INT 2
75037: PUSH
75038: LD_INT 34
75040: PUSH
75041: LD_INT 12
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: PUSH
75048: LD_INT 34
75050: PUSH
75051: LD_INT 51
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: PUSH
75058: LD_INT 34
75060: PUSH
75061: LD_INT 32
75063: PUSH
75064: EMPTY
75065: LIST
75066: LIST
75067: PUSH
75068: LD_INT 34
75070: PUSH
75071: LD_INT 89
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: PUSH
75078: EMPTY
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: LIST
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: LIST
75089: PPUSH
75090: CALL_OW 69
75094: ST_TO_ADDR
// if tmp then
75095: LD_VAR 0 4
75099: IFFALSE 75233
// begin for j in tmp do
75101: LD_ADDR_VAR 0 2
75105: PUSH
75106: LD_VAR 0 4
75110: PUSH
75111: FOR_IN
75112: IFFALSE 75231
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
75114: LD_VAR 0 2
75118: PPUSH
75119: CALL_OW 262
75123: PUSH
75124: LD_INT 3
75126: EQUAL
75127: IFTRUE 75144
75129: PUSH
75130: LD_VAR 0 2
75134: PPUSH
75135: CALL_OW 261
75139: PUSH
75140: LD_INT 20
75142: GREATER
75143: OR
75144: IFFALSE 75158
75146: PUSH
75147: LD_VAR 0 2
75151: PPUSH
75152: CALL_OW 314
75156: NOT
75157: AND
75158: IFFALSE 75188
75160: PUSH
75161: LD_VAR 0 2
75165: PPUSH
75166: CALL_OW 263
75170: PUSH
75171: LD_INT 1
75173: NONEQUAL
75174: IFTRUE 75187
75176: PUSH
75177: LD_VAR 0 2
75181: PPUSH
75182: CALL_OW 311
75186: OR
75187: AND
75188: IFFALSE 75229
// begin ComCollect ( j , x , y ) ;
75190: LD_VAR 0 2
75194: PPUSH
75195: LD_VAR 0 6
75199: PPUSH
75200: LD_VAR 0 7
75204: PPUSH
75205: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
75209: LD_VAR 0 2
75213: PPUSH
75214: LD_VAR 0 8
75218: PPUSH
75219: CALL_OW 172
// exit ;
75223: POP
75224: POP
75225: POP
75226: POP
75227: GO 75237
// end ;
75229: GO 75111
75231: POP
75232: POP
// end ; end ;
75233: GO 74598
75235: POP
75236: POP
// end ; end_of_file
75237: PPOPN 9
75239: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75240: LD_VAR 0 1
75244: PUSH
75245: LD_INT 200
75247: DOUBLE
75248: GREATEREQUAL
75249: IFFALSE 75257
75251: LD_INT 299
75253: DOUBLE
75254: LESSEQUAL
75255: IFTRUE 75259
75257: GO 75291
75259: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75260: LD_VAR 0 1
75264: PPUSH
75265: LD_VAR 0 2
75269: PPUSH
75270: LD_VAR 0 3
75274: PPUSH
75275: LD_VAR 0 4
75279: PPUSH
75280: LD_VAR 0 5
75284: PPUSH
75285: CALL 76072 0 5
75289: GO 75368
75291: LD_INT 300
75293: DOUBLE
75294: GREATEREQUAL
75295: IFFALSE 75303
75297: LD_INT 399
75299: DOUBLE
75300: LESSEQUAL
75301: IFTRUE 75305
75303: GO 75367
75305: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75306: LD_VAR 0 1
75310: PPUSH
75311: LD_VAR 0 2
75315: PPUSH
75316: LD_VAR 0 3
75320: PPUSH
75321: LD_VAR 0 4
75325: PPUSH
75326: LD_VAR 0 5
75330: PPUSH
75331: LD_VAR 0 6
75335: PPUSH
75336: LD_VAR 0 7
75340: PPUSH
75341: LD_VAR 0 8
75345: PPUSH
75346: LD_VAR 0 9
75350: PPUSH
75351: LD_VAR 0 10
75355: PPUSH
75356: LD_VAR 0 11
75360: PPUSH
75361: CALL 71793 0 11
75365: GO 75368
75367: POP
// end ;
75368: PPOPN 11
75370: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75371: LD_VAR 0 1
75375: PPUSH
75376: LD_VAR 0 2
75380: PPUSH
75381: LD_VAR 0 3
75385: PPUSH
75386: LD_VAR 0 4
75390: PPUSH
75391: LD_VAR 0 5
75395: PPUSH
75396: CALL 75453 0 5
// end ; end_of_file
75400: PPOPN 5
75402: END
// export function SOS_UnitDestroyed ( un ) ; begin
75403: LD_INT 0
75405: PPUSH
// ComRadiation ( un ) ;
75406: LD_VAR 0 1
75410: PPUSH
75411: CALL 76492 0 1
// end ;
75415: LD_VAR 0 2
75419: RET
// export function SOS_UnitKamikazed ( un ) ; begin
75420: LD_INT 0
75422: PPUSH
// ComRadiation ( un ) ;
75423: LD_VAR 0 1
75427: PPUSH
75428: CALL 76492 0 1
// end ;
75432: LD_VAR 0 2
75436: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
75437: LD_INT 0
75439: PPUSH
// end ;
75440: LD_VAR 0 4
75444: RET
// export function SOS_Command ( cmd ) ; begin
75445: LD_INT 0
75447: PPUSH
// end ;
75448: LD_VAR 0 2
75452: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
75453: LD_INT 0
75455: PPUSH
// end ;
75456: LD_VAR 0 6
75460: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
75461: LD_INT 0
75463: PPUSH
75464: PPUSH
75465: PPUSH
75466: PPUSH
// if not vehicle or not factory then
75467: LD_VAR 0 1
75471: NOT
75472: IFTRUE 75481
75474: PUSH
75475: LD_VAR 0 2
75479: NOT
75480: OR
75481: IFFALSE 75485
// exit ;
75483: GO 76067
// if not factoryWaypoints then
75485: LD_EXP 96
75489: NOT
75490: IFFALSE 75494
// exit ;
75492: GO 76067
// for i := 1 to Count ( factoryWaypoints ) do
75494: LD_ADDR_VAR 0 4
75498: PUSH
75499: DOUBLE
75500: LD_INT 1
75502: DEC
75503: ST_TO_ADDR
75504: LD_EXP 96
75508: PPUSH
75509: CALL 17782 0 1
75513: PUSH
75514: FOR_TO
75515: IFFALSE 76065
// if factoryWaypoints [ i ] [ 2 ] = factory then
75517: LD_EXP 96
75521: PUSH
75522: LD_VAR 0 4
75526: ARRAY
75527: PUSH
75528: LD_INT 2
75530: ARRAY
75531: PUSH
75532: LD_VAR 0 2
75536: EQUAL
75537: IFFALSE 76063
// begin if GetControl ( vehicle ) = control_manual then
75539: LD_VAR 0 1
75543: PPUSH
75544: CALL_OW 263
75548: PUSH
75549: LD_INT 1
75551: EQUAL
75552: IFFALSE 75916
// begin driver := IsDrivenBy ( vehicle ) ;
75554: LD_ADDR_VAR 0 5
75558: PUSH
75559: LD_VAR 0 1
75563: PPUSH
75564: CALL_OW 311
75568: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
75569: LD_VAR 0 5
75573: PUSH
75574: LD_EXP 97
75578: IN
75579: IFTRUE 75593
75581: PUSH
75582: LD_VAR 0 1
75586: PUSH
75587: LD_EXP 97
75591: IN
75592: OR
75593: IFFALSE 75599
// exit ;
75595: POP
75596: POP
75597: GO 76067
// if not HasTask ( driver ) then
75599: LD_VAR 0 5
75603: PPUSH
75604: CALL_OW 314
75608: NOT
75609: IFFALSE 75914
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
75611: LD_ADDR_EXP 97
75615: PUSH
75616: LD_EXP 97
75620: PPUSH
75621: LD_VAR 0 5
75625: PPUSH
75626: CALL 53714 0 2
75630: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
75631: LD_ADDR_EXP 97
75635: PUSH
75636: LD_EXP 97
75640: PPUSH
75641: LD_VAR 0 1
75645: PPUSH
75646: CALL 53714 0 2
75650: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75651: LD_ADDR_VAR 0 6
75655: PUSH
75656: LD_EXP 96
75660: PUSH
75661: LD_VAR 0 4
75665: ARRAY
75666: PUSH
75667: LD_INT 3
75669: ARRAY
75670: PPUSH
75671: LD_EXP 96
75675: PUSH
75676: LD_VAR 0 4
75680: ARRAY
75681: PUSH
75682: LD_INT 4
75684: ARRAY
75685: PPUSH
75686: CALL_OW 428
75690: ST_TO_ADDR
// if hex then
75691: LD_VAR 0 6
75695: IFFALSE 75713
// ComMoveUnit ( driver , hex ) else
75697: LD_VAR 0 5
75701: PPUSH
75702: LD_VAR 0 6
75706: PPUSH
75707: CALL_OW 112
75711: GO 75797
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
75713: LD_VAR 0 1
75717: PPUSH
75718: LD_EXP 96
75722: PUSH
75723: LD_VAR 0 4
75727: ARRAY
75728: PUSH
75729: LD_INT 3
75731: ARRAY
75732: PPUSH
75733: LD_EXP 96
75737: PUSH
75738: LD_VAR 0 4
75742: ARRAY
75743: PUSH
75744: LD_INT 4
75746: ARRAY
75747: PPUSH
75748: CALL_OW 297
75752: PUSH
75753: LD_INT 0
75755: GREATER
75756: IFFALSE 75797
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75758: LD_VAR 0 5
75762: PPUSH
75763: LD_EXP 96
75767: PUSH
75768: LD_VAR 0 4
75772: ARRAY
75773: PUSH
75774: LD_INT 3
75776: ARRAY
75777: PPUSH
75778: LD_EXP 96
75782: PUSH
75783: LD_VAR 0 4
75787: ARRAY
75788: PUSH
75789: LD_INT 4
75791: ARRAY
75792: PPUSH
75793: CALL_OW 111
// AddComExitVehicle ( driver ) ;
75797: LD_VAR 0 5
75801: PPUSH
75802: CALL_OW 181
// if Multiplayer then
75806: LD_OWVAR 4
75810: IFFALSE 75859
// begin repeat wait ( 10 ) ;
75812: LD_INT 10
75814: PPUSH
75815: CALL_OW 67
// until not IsInUnit ( driver ) ;
75819: LD_VAR 0 5
75823: PPUSH
75824: CALL_OW 310
75828: NOT
75829: IFFALSE 75812
// if not HasTask ( driver ) then
75831: LD_VAR 0 5
75835: PPUSH
75836: CALL_OW 314
75840: NOT
75841: IFFALSE 75857
// ComEnterUnit ( driver , factory ) ;
75843: LD_VAR 0 5
75847: PPUSH
75848: LD_VAR 0 2
75852: PPUSH
75853: CALL_OW 120
// end else
75857: GO 75873
// AddComEnterUnit ( driver , factory ) ;
75859: LD_VAR 0 5
75863: PPUSH
75864: LD_VAR 0 2
75868: PPUSH
75869: CALL_OW 180
// wait ( 0 0$1 ) ;
75873: LD_INT 35
75875: PPUSH
75876: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
75880: LD_ADDR_EXP 97
75884: PUSH
75885: LD_EXP 97
75889: PUSH
75890: LD_VAR 0 5
75894: DIFF
75895: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
75896: LD_ADDR_EXP 97
75900: PUSH
75901: LD_EXP 97
75905: PUSH
75906: LD_VAR 0 1
75910: DIFF
75911: ST_TO_ADDR
// break ;
75912: GO 76065
// end ; end else
75914: GO 76063
// if GetControl ( vehicle ) = control_remote then
75916: LD_VAR 0 1
75920: PPUSH
75921: CALL_OW 263
75925: PUSH
75926: LD_INT 2
75928: EQUAL
75929: IFFALSE 76015
// begin wait ( 0 0$2 ) ;
75931: LD_INT 70
75933: PPUSH
75934: CALL_OW 67
// repeat wait ( 10 ) ;
75938: LD_INT 10
75940: PPUSH
75941: CALL_OW 67
// Connect ( vehicle ) ;
75945: LD_VAR 0 1
75949: PPUSH
75950: CALL 24026 0 1
// until IsControledBy ( vehicle ) ;
75954: LD_VAR 0 1
75958: PPUSH
75959: CALL_OW 312
75963: IFFALSE 75938
// wait ( 10 ) ;
75965: LD_INT 10
75967: PPUSH
75968: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75972: LD_VAR 0 1
75976: PPUSH
75977: LD_EXP 96
75981: PUSH
75982: LD_VAR 0 4
75986: ARRAY
75987: PUSH
75988: LD_INT 3
75990: ARRAY
75991: PPUSH
75992: LD_EXP 96
75996: PUSH
75997: LD_VAR 0 4
76001: ARRAY
76002: PUSH
76003: LD_INT 4
76005: ARRAY
76006: PPUSH
76007: CALL_OW 111
// break ;
76011: GO 76065
// end else
76013: GO 76063
// begin wait ( 0 0$3 ) ;
76015: LD_INT 105
76017: PPUSH
76018: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76022: LD_VAR 0 1
76026: PPUSH
76027: LD_EXP 96
76031: PUSH
76032: LD_VAR 0 4
76036: ARRAY
76037: PUSH
76038: LD_INT 3
76040: ARRAY
76041: PPUSH
76042: LD_EXP 96
76046: PUSH
76047: LD_VAR 0 4
76051: ARRAY
76052: PUSH
76053: LD_INT 4
76055: ARRAY
76056: PPUSH
76057: CALL_OW 111
// break ;
76061: GO 76065
// end ; end ;
76063: GO 75514
76065: POP
76066: POP
// end ;
76067: LD_VAR 0 3
76071: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
76072: LD_INT 0
76074: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
76075: LD_VAR 0 1
76079: PUSH
76080: LD_INT 250
76082: EQUAL
76083: IFFALSE 76100
76085: PUSH
76086: LD_VAR 0 2
76090: PPUSH
76091: CALL_OW 264
76095: PUSH
76096: LD_INT 81
76098: EQUAL
76099: AND
76100: IFFALSE 76121
// MinerPlaceMine ( unit , x , y ) ;
76102: LD_VAR 0 2
76106: PPUSH
76107: LD_VAR 0 4
76111: PPUSH
76112: LD_VAR 0 5
76116: PPUSH
76117: CALL 79253 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
76121: LD_VAR 0 1
76125: PUSH
76126: LD_INT 251
76128: EQUAL
76129: IFFALSE 76146
76131: PUSH
76132: LD_VAR 0 2
76136: PPUSH
76137: CALL_OW 264
76141: PUSH
76142: LD_INT 81
76144: EQUAL
76145: AND
76146: IFFALSE 76167
// MinerDetonateMine ( unit , x , y ) ;
76148: LD_VAR 0 2
76152: PPUSH
76153: LD_VAR 0 4
76157: PPUSH
76158: LD_VAR 0 5
76162: PPUSH
76163: CALL 79532 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
76167: LD_VAR 0 1
76171: PUSH
76172: LD_INT 252
76174: EQUAL
76175: IFFALSE 76192
76177: PUSH
76178: LD_VAR 0 2
76182: PPUSH
76183: CALL_OW 264
76187: PUSH
76188: LD_INT 81
76190: EQUAL
76191: AND
76192: IFFALSE 76213
// MinerCreateMinefield ( unit , x , y ) ;
76194: LD_VAR 0 2
76198: PPUSH
76199: LD_VAR 0 4
76203: PPUSH
76204: LD_VAR 0 5
76208: PPUSH
76209: CALL 79951 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
76213: LD_VAR 0 1
76217: PUSH
76218: LD_INT 253
76220: EQUAL
76221: IFFALSE 76238
76223: PUSH
76224: LD_VAR 0 2
76228: PPUSH
76229: CALL_OW 257
76233: PUSH
76234: LD_INT 5
76236: EQUAL
76237: AND
76238: IFFALSE 76259
// ComBinocular ( unit , x , y ) ;
76240: LD_VAR 0 2
76244: PPUSH
76245: LD_VAR 0 4
76249: PPUSH
76250: LD_VAR 0 5
76254: PPUSH
76255: CALL 80326 0 3
// if selectedUnit then
76259: LD_VAR 0 3
76263: IFFALSE 76323
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
76265: LD_VAR 0 1
76269: PUSH
76270: LD_INT 254
76272: EQUAL
76273: IFFALSE 76290
76275: PUSH
76276: LD_VAR 0 2
76280: PPUSH
76281: CALL_OW 264
76285: PUSH
76286: LD_INT 99
76288: EQUAL
76289: AND
76290: IFFALSE 76307
76292: PUSH
76293: LD_VAR 0 3
76297: PPUSH
76298: CALL_OW 263
76302: PUSH
76303: LD_INT 3
76305: EQUAL
76306: AND
76307: IFFALSE 76323
// HackDestroyVehicle ( unit , selectedUnit ) ;
76309: LD_VAR 0 2
76313: PPUSH
76314: LD_VAR 0 3
76318: PPUSH
76319: CALL 78613 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
76323: LD_VAR 0 1
76327: PUSH
76328: LD_INT 255
76330: EQUAL
76331: IFFALSE 76355
76333: PUSH
76334: LD_VAR 0 2
76338: PPUSH
76339: CALL_OW 264
76343: PUSH
76344: LD_INT 14
76346: PUSH
76347: LD_INT 53
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: IN
76354: AND
76355: IFFALSE 76373
76357: PUSH
76358: LD_VAR 0 4
76362: PPUSH
76363: LD_VAR 0 5
76367: PPUSH
76368: CALL_OW 488
76372: AND
76373: IFFALSE 76397
// CutTreeXYR ( unit , x , y , 12 ) ;
76375: LD_VAR 0 2
76379: PPUSH
76380: LD_VAR 0 4
76384: PPUSH
76385: LD_VAR 0 5
76389: PPUSH
76390: LD_INT 12
76392: PPUSH
76393: CALL 76588 0 4
// if cmd = 256 then
76397: LD_VAR 0 1
76401: PUSH
76402: LD_INT 256
76404: EQUAL
76405: IFFALSE 76426
// SetFactoryWaypoint ( unit , x , y ) ;
76407: LD_VAR 0 2
76411: PPUSH
76412: LD_VAR 0 4
76416: PPUSH
76417: LD_VAR 0 5
76421: PPUSH
76422: CALL 73785 0 3
// if cmd = 257 then
76426: LD_VAR 0 1
76430: PUSH
76431: LD_INT 257
76433: EQUAL
76434: IFFALSE 76455
// SetWarehouseGatheringPoint ( unit , x , y ) ;
76436: LD_VAR 0 2
76440: PPUSH
76441: LD_VAR 0 4
76445: PPUSH
76446: LD_VAR 0 5
76450: PPUSH
76451: CALL 74281 0 3
// if cmd = 258 then
76455: LD_VAR 0 1
76459: PUSH
76460: LD_INT 258
76462: EQUAL
76463: IFFALSE 76487
// BurnTreeXYR ( unit , x , y , 8 ) ;
76465: LD_VAR 0 2
76469: PPUSH
76470: LD_VAR 0 4
76474: PPUSH
76475: LD_VAR 0 5
76479: PPUSH
76480: LD_INT 8
76482: PPUSH
76483: CALL 76988 0 4
// end ;
76487: LD_VAR 0 6
76491: RET
// export function ComRadiation ( un ) ; var eff ; begin
76492: LD_INT 0
76494: PPUSH
76495: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
76496: LD_VAR 0 1
76500: PPUSH
76501: CALL_OW 264
76505: PUSH
76506: LD_INT 91
76508: NONEQUAL
76509: IFFALSE 76513
// exit ;
76511: GO 76583
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
76513: LD_INT 68
76515: PPUSH
76516: LD_VAR 0 1
76520: PPUSH
76521: CALL_OW 255
76525: PPUSH
76526: CALL_OW 321
76530: PUSH
76531: LD_INT 2
76533: EQUAL
76534: IFFALSE 76546
// eff := 50 else
76536: LD_ADDR_VAR 0 3
76540: PUSH
76541: LD_INT 50
76543: ST_TO_ADDR
76544: GO 76554
// eff := 25 ;
76546: LD_ADDR_VAR 0 3
76550: PUSH
76551: LD_INT 25
76553: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
76554: LD_VAR 0 1
76558: PPUSH
76559: CALL_OW 250
76563: PPUSH
76564: LD_VAR 0 1
76568: PPUSH
76569: CALL_OW 251
76573: PPUSH
76574: LD_VAR 0 3
76578: PPUSH
76579: CALL_OW 495
// end ;
76583: LD_VAR 0 2
76587: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
76588: LD_INT 0
76590: PPUSH
76591: PPUSH
76592: PPUSH
76593: PPUSH
76594: PPUSH
76595: PPUSH
76596: PPUSH
76597: PPUSH
76598: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
76599: LD_VAR 0 1
76603: PPUSH
76604: CALL_OW 302
76608: NOT
76609: IFTRUE 76628
76611: PUSH
76612: LD_VAR 0 2
76616: PPUSH
76617: LD_VAR 0 3
76621: PPUSH
76622: CALL_OW 488
76626: NOT
76627: OR
76628: IFTRUE 76637
76630: PUSH
76631: LD_VAR 0 4
76635: NOT
76636: OR
76637: IFFALSE 76641
// exit ;
76639: GO 76983
// list := [ ] ;
76641: LD_ADDR_VAR 0 13
76645: PUSH
76646: EMPTY
76647: ST_TO_ADDR
// if x - r < 0 then
76648: LD_VAR 0 2
76652: PUSH
76653: LD_VAR 0 4
76657: MINUS
76658: PUSH
76659: LD_INT 0
76661: LESS
76662: IFFALSE 76674
// min_x := 0 else
76664: LD_ADDR_VAR 0 7
76668: PUSH
76669: LD_INT 0
76671: ST_TO_ADDR
76672: GO 76690
// min_x := x - r ;
76674: LD_ADDR_VAR 0 7
76678: PUSH
76679: LD_VAR 0 2
76683: PUSH
76684: LD_VAR 0 4
76688: MINUS
76689: ST_TO_ADDR
// if y - r < 0 then
76690: LD_VAR 0 3
76694: PUSH
76695: LD_VAR 0 4
76699: MINUS
76700: PUSH
76701: LD_INT 0
76703: LESS
76704: IFFALSE 76716
// min_y := 0 else
76706: LD_ADDR_VAR 0 8
76710: PUSH
76711: LD_INT 0
76713: ST_TO_ADDR
76714: GO 76732
// min_y := y - r ;
76716: LD_ADDR_VAR 0 8
76720: PUSH
76721: LD_VAR 0 3
76725: PUSH
76726: LD_VAR 0 4
76730: MINUS
76731: ST_TO_ADDR
// max_x := x + r ;
76732: LD_ADDR_VAR 0 9
76736: PUSH
76737: LD_VAR 0 2
76741: PUSH
76742: LD_VAR 0 4
76746: PLUS
76747: ST_TO_ADDR
// max_y := y + r ;
76748: LD_ADDR_VAR 0 10
76752: PUSH
76753: LD_VAR 0 3
76757: PUSH
76758: LD_VAR 0 4
76762: PLUS
76763: ST_TO_ADDR
// for _x = min_x to max_x do
76764: LD_ADDR_VAR 0 11
76768: PUSH
76769: DOUBLE
76770: LD_VAR 0 7
76774: DEC
76775: ST_TO_ADDR
76776: LD_VAR 0 9
76780: PUSH
76781: FOR_TO
76782: IFFALSE 76901
// for _y = min_y to max_y do
76784: LD_ADDR_VAR 0 12
76788: PUSH
76789: DOUBLE
76790: LD_VAR 0 8
76794: DEC
76795: ST_TO_ADDR
76796: LD_VAR 0 10
76800: PUSH
76801: FOR_TO
76802: IFFALSE 76897
// begin if not ValidHex ( _x , _y ) then
76804: LD_VAR 0 11
76808: PPUSH
76809: LD_VAR 0 12
76813: PPUSH
76814: CALL_OW 488
76818: NOT
76819: IFFALSE 76823
// continue ;
76821: GO 76801
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
76823: LD_VAR 0 11
76827: PPUSH
76828: LD_VAR 0 12
76832: PPUSH
76833: CALL_OW 351
76837: IFFALSE 76855
76839: PUSH
76840: LD_VAR 0 11
76844: PPUSH
76845: LD_VAR 0 12
76849: PPUSH
76850: CALL_OW 554
76854: AND
76855: IFFALSE 76895
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
76857: LD_ADDR_VAR 0 13
76861: PUSH
76862: LD_VAR 0 13
76866: PPUSH
76867: LD_VAR 0 13
76871: PUSH
76872: LD_INT 1
76874: PLUS
76875: PPUSH
76876: LD_VAR 0 11
76880: PUSH
76881: LD_VAR 0 12
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: PPUSH
76890: CALL_OW 2
76894: ST_TO_ADDR
// end ;
76895: GO 76801
76897: POP
76898: POP
76899: GO 76781
76901: POP
76902: POP
// if not list then
76903: LD_VAR 0 13
76907: NOT
76908: IFFALSE 76912
// exit ;
76910: GO 76983
// for i in list do
76912: LD_ADDR_VAR 0 6
76916: PUSH
76917: LD_VAR 0 13
76921: PUSH
76922: FOR_IN
76923: IFFALSE 76981
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
76925: LD_VAR 0 1
76929: PPUSH
76930: LD_STRING M
76932: PUSH
76933: LD_VAR 0 6
76937: PUSH
76938: LD_INT 1
76940: ARRAY
76941: PUSH
76942: LD_VAR 0 6
76946: PUSH
76947: LD_INT 2
76949: ARRAY
76950: PUSH
76951: LD_INT 0
76953: PUSH
76954: LD_INT 0
76956: PUSH
76957: LD_INT 0
76959: PUSH
76960: LD_INT 0
76962: PUSH
76963: EMPTY
76964: LIST
76965: LIST
76966: LIST
76967: LIST
76968: LIST
76969: LIST
76970: LIST
76971: PUSH
76972: EMPTY
76973: LIST
76974: PPUSH
76975: CALL_OW 447
76979: GO 76922
76981: POP
76982: POP
// end ;
76983: LD_VAR 0 5
76987: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
76988: LD_INT 0
76990: PPUSH
76991: PPUSH
76992: PPUSH
76993: PPUSH
76994: PPUSH
76995: PPUSH
76996: PPUSH
76997: PPUSH
76998: PPUSH
76999: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
77000: LD_VAR 0 1
77004: PPUSH
77005: CALL_OW 302
77009: NOT
77010: IFTRUE 77029
77012: PUSH
77013: LD_VAR 0 2
77017: PPUSH
77018: LD_VAR 0 3
77022: PPUSH
77023: CALL_OW 488
77027: NOT
77028: OR
77029: IFTRUE 77038
77031: PUSH
77032: LD_VAR 0 4
77036: NOT
77037: OR
77038: IFFALSE 77042
// exit ;
77040: GO 77559
// list := [ ] ;
77042: LD_ADDR_VAR 0 13
77046: PUSH
77047: EMPTY
77048: ST_TO_ADDR
// if x - r < 0 then
77049: LD_VAR 0 2
77053: PUSH
77054: LD_VAR 0 4
77058: MINUS
77059: PUSH
77060: LD_INT 0
77062: LESS
77063: IFFALSE 77075
// min_x := 0 else
77065: LD_ADDR_VAR 0 7
77069: PUSH
77070: LD_INT 0
77072: ST_TO_ADDR
77073: GO 77091
// min_x := x - r ;
77075: LD_ADDR_VAR 0 7
77079: PUSH
77080: LD_VAR 0 2
77084: PUSH
77085: LD_VAR 0 4
77089: MINUS
77090: ST_TO_ADDR
// if y - r < 0 then
77091: LD_VAR 0 3
77095: PUSH
77096: LD_VAR 0 4
77100: MINUS
77101: PUSH
77102: LD_INT 0
77104: LESS
77105: IFFALSE 77117
// min_y := 0 else
77107: LD_ADDR_VAR 0 8
77111: PUSH
77112: LD_INT 0
77114: ST_TO_ADDR
77115: GO 77133
// min_y := y - r ;
77117: LD_ADDR_VAR 0 8
77121: PUSH
77122: LD_VAR 0 3
77126: PUSH
77127: LD_VAR 0 4
77131: MINUS
77132: ST_TO_ADDR
// max_x := x + r ;
77133: LD_ADDR_VAR 0 9
77137: PUSH
77138: LD_VAR 0 2
77142: PUSH
77143: LD_VAR 0 4
77147: PLUS
77148: ST_TO_ADDR
// max_y := y + r ;
77149: LD_ADDR_VAR 0 10
77153: PUSH
77154: LD_VAR 0 3
77158: PUSH
77159: LD_VAR 0 4
77163: PLUS
77164: ST_TO_ADDR
// for _x = min_x to max_x do
77165: LD_ADDR_VAR 0 11
77169: PUSH
77170: DOUBLE
77171: LD_VAR 0 7
77175: DEC
77176: ST_TO_ADDR
77177: LD_VAR 0 9
77181: PUSH
77182: FOR_TO
77183: IFFALSE 77302
// for _y = min_y to max_y do
77185: LD_ADDR_VAR 0 12
77189: PUSH
77190: DOUBLE
77191: LD_VAR 0 8
77195: DEC
77196: ST_TO_ADDR
77197: LD_VAR 0 10
77201: PUSH
77202: FOR_TO
77203: IFFALSE 77298
// begin if not ValidHex ( _x , _y ) then
77205: LD_VAR 0 11
77209: PPUSH
77210: LD_VAR 0 12
77214: PPUSH
77215: CALL_OW 488
77219: NOT
77220: IFFALSE 77224
// continue ;
77222: GO 77202
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77224: LD_VAR 0 11
77228: PPUSH
77229: LD_VAR 0 12
77233: PPUSH
77234: CALL_OW 351
77238: IFFALSE 77256
77240: PUSH
77241: LD_VAR 0 11
77245: PPUSH
77246: LD_VAR 0 12
77250: PPUSH
77251: CALL_OW 554
77255: AND
77256: IFFALSE 77296
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77258: LD_ADDR_VAR 0 13
77262: PUSH
77263: LD_VAR 0 13
77267: PPUSH
77268: LD_VAR 0 13
77272: PUSH
77273: LD_INT 1
77275: PLUS
77276: PPUSH
77277: LD_VAR 0 11
77281: PUSH
77282: LD_VAR 0 12
77286: PUSH
77287: EMPTY
77288: LIST
77289: LIST
77290: PPUSH
77291: CALL_OW 2
77295: ST_TO_ADDR
// end ;
77296: GO 77202
77298: POP
77299: POP
77300: GO 77182
77302: POP
77303: POP
// if not list then
77304: LD_VAR 0 13
77308: NOT
77309: IFFALSE 77313
// exit ;
77311: GO 77559
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
77313: LD_ADDR_VAR 0 13
77317: PUSH
77318: LD_VAR 0 1
77322: PPUSH
77323: LD_VAR 0 13
77327: PPUSH
77328: LD_INT 1
77330: PPUSH
77331: LD_INT 1
77333: PPUSH
77334: CALL 21154 0 4
77338: ST_TO_ADDR
// ComStop ( flame ) ;
77339: LD_VAR 0 1
77343: PPUSH
77344: CALL_OW 141
// for i in list do
77348: LD_ADDR_VAR 0 6
77352: PUSH
77353: LD_VAR 0 13
77357: PUSH
77358: FOR_IN
77359: IFFALSE 77390
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
77361: LD_VAR 0 1
77365: PPUSH
77366: LD_VAR 0 6
77370: PUSH
77371: LD_INT 1
77373: ARRAY
77374: PPUSH
77375: LD_VAR 0 6
77379: PUSH
77380: LD_INT 2
77382: ARRAY
77383: PPUSH
77384: CALL_OW 176
77388: GO 77358
77390: POP
77391: POP
// repeat wait ( 0 0$1 ) ;
77392: LD_INT 35
77394: PPUSH
77395: CALL_OW 67
// task := GetTaskList ( flame ) ;
77399: LD_ADDR_VAR 0 14
77403: PUSH
77404: LD_VAR 0 1
77408: PPUSH
77409: CALL_OW 437
77413: ST_TO_ADDR
// if not task then
77414: LD_VAR 0 14
77418: NOT
77419: IFFALSE 77423
// exit ;
77421: GO 77559
// if task [ 1 ] [ 1 ] <> | then
77423: LD_VAR 0 14
77427: PUSH
77428: LD_INT 1
77430: ARRAY
77431: PUSH
77432: LD_INT 1
77434: ARRAY
77435: PUSH
77436: LD_STRING |
77438: NONEQUAL
77439: IFFALSE 77443
// exit ;
77441: GO 77559
// _x := task [ 1 ] [ 2 ] ;
77443: LD_ADDR_VAR 0 11
77447: PUSH
77448: LD_VAR 0 14
77452: PUSH
77453: LD_INT 1
77455: ARRAY
77456: PUSH
77457: LD_INT 2
77459: ARRAY
77460: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
77461: LD_ADDR_VAR 0 12
77465: PUSH
77466: LD_VAR 0 14
77470: PUSH
77471: LD_INT 1
77473: ARRAY
77474: PUSH
77475: LD_INT 3
77477: ARRAY
77478: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
77479: LD_VAR 0 11
77483: PPUSH
77484: LD_VAR 0 12
77488: PPUSH
77489: CALL_OW 351
77493: NOT
77494: IFTRUE 77513
77496: PUSH
77497: LD_VAR 0 11
77501: PPUSH
77502: LD_VAR 0 12
77506: PPUSH
77507: CALL_OW 554
77511: NOT
77512: OR
77513: IFFALSE 77547
// begin task := Delete ( task , 1 ) ;
77515: LD_ADDR_VAR 0 14
77519: PUSH
77520: LD_VAR 0 14
77524: PPUSH
77525: LD_INT 1
77527: PPUSH
77528: CALL_OW 3
77532: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
77533: LD_VAR 0 1
77537: PPUSH
77538: LD_VAR 0 14
77542: PPUSH
77543: CALL_OW 446
// end ; until not HasTask ( flame ) ;
77547: LD_VAR 0 1
77551: PPUSH
77552: CALL_OW 314
77556: NOT
77557: IFFALSE 77392
// end ;
77559: LD_VAR 0 5
77563: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
77564: LD_EXP 100
77568: NOT
77569: IFFALSE 77619
77571: GO 77573
77573: DISABLE
// begin initHack := true ;
77574: LD_ADDR_EXP 100
77578: PUSH
77579: LD_INT 1
77581: ST_TO_ADDR
// hackTanks := [ ] ;
77582: LD_ADDR_EXP 101
77586: PUSH
77587: EMPTY
77588: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
77589: LD_ADDR_EXP 102
77593: PUSH
77594: EMPTY
77595: ST_TO_ADDR
// hackLimit := 3 ;
77596: LD_ADDR_EXP 103
77600: PUSH
77601: LD_INT 3
77603: ST_TO_ADDR
// hackDist := 12 ;
77604: LD_ADDR_EXP 104
77608: PUSH
77609: LD_INT 12
77611: ST_TO_ADDR
// hackCounter := [ ] ;
77612: LD_ADDR_EXP 105
77616: PUSH
77617: EMPTY
77618: ST_TO_ADDR
// end ;
77619: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
77620: LD_EXP 100
77624: IFFALSE 77642
77626: PUSH
77627: LD_INT 34
77629: PUSH
77630: LD_INT 99
77632: PUSH
77633: EMPTY
77634: LIST
77635: LIST
77636: PPUSH
77637: CALL_OW 69
77641: AND
77642: IFFALSE 77895
77644: GO 77646
77646: DISABLE
77647: LD_INT 0
77649: PPUSH
77650: PPUSH
// begin enable ;
77651: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
77652: LD_ADDR_VAR 0 1
77656: PUSH
77657: LD_INT 34
77659: PUSH
77660: LD_INT 99
77662: PUSH
77663: EMPTY
77664: LIST
77665: LIST
77666: PPUSH
77667: CALL_OW 69
77671: PUSH
77672: FOR_IN
77673: IFFALSE 77893
// begin if not i in hackTanks then
77675: LD_VAR 0 1
77679: PUSH
77680: LD_EXP 101
77684: IN
77685: NOT
77686: IFFALSE 77769
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
77688: LD_ADDR_EXP 101
77692: PUSH
77693: LD_EXP 101
77697: PPUSH
77698: LD_EXP 101
77702: PUSH
77703: LD_INT 1
77705: PLUS
77706: PPUSH
77707: LD_VAR 0 1
77711: PPUSH
77712: CALL_OW 1
77716: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
77717: LD_ADDR_EXP 102
77721: PUSH
77722: LD_EXP 102
77726: PPUSH
77727: LD_EXP 102
77731: PUSH
77732: LD_INT 1
77734: PLUS
77735: PPUSH
77736: EMPTY
77737: PPUSH
77738: CALL_OW 1
77742: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
77743: LD_ADDR_EXP 105
77747: PUSH
77748: LD_EXP 105
77752: PPUSH
77753: LD_EXP 105
77757: PUSH
77758: LD_INT 1
77760: PLUS
77761: PPUSH
77762: EMPTY
77763: PPUSH
77764: CALL_OW 1
77768: ST_TO_ADDR
// end ; if not IsOk ( i ) then
77769: LD_VAR 0 1
77773: PPUSH
77774: CALL_OW 302
77778: NOT
77779: IFFALSE 77792
// begin HackUnlinkAll ( i ) ;
77781: LD_VAR 0 1
77785: PPUSH
77786: CALL 77898 0 1
// continue ;
77790: GO 77672
// end ; HackCheckCapturedStatus ( i ) ;
77792: LD_VAR 0 1
77796: PPUSH
77797: CALL 78343 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
77801: LD_ADDR_VAR 0 2
77805: PUSH
77806: LD_INT 81
77808: PUSH
77809: LD_VAR 0 1
77813: PPUSH
77814: CALL_OW 255
77818: PUSH
77819: EMPTY
77820: LIST
77821: LIST
77822: PUSH
77823: LD_INT 33
77825: PUSH
77826: LD_INT 3
77828: PUSH
77829: EMPTY
77830: LIST
77831: LIST
77832: PUSH
77833: LD_INT 91
77835: PUSH
77836: LD_VAR 0 1
77840: PUSH
77841: LD_EXP 104
77845: PUSH
77846: EMPTY
77847: LIST
77848: LIST
77849: LIST
77850: PUSH
77851: LD_INT 50
77853: PUSH
77854: EMPTY
77855: LIST
77856: PUSH
77857: EMPTY
77858: LIST
77859: LIST
77860: LIST
77861: LIST
77862: PPUSH
77863: CALL_OW 69
77867: ST_TO_ADDR
// if not tmp then
77868: LD_VAR 0 2
77872: NOT
77873: IFFALSE 77877
// continue ;
77875: GO 77672
// HackLink ( i , tmp ) ;
77877: LD_VAR 0 1
77881: PPUSH
77882: LD_VAR 0 2
77886: PPUSH
77887: CALL 78034 0 2
// end ;
77891: GO 77672
77893: POP
77894: POP
// end ;
77895: PPOPN 2
77897: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
77898: LD_INT 0
77900: PPUSH
77901: PPUSH
77902: PPUSH
// if not hack in hackTanks then
77903: LD_VAR 0 1
77907: PUSH
77908: LD_EXP 101
77912: IN
77913: NOT
77914: IFFALSE 77918
// exit ;
77916: GO 78029
// index := GetElementIndex ( hackTanks , hack ) ;
77918: LD_ADDR_VAR 0 4
77922: PUSH
77923: LD_EXP 101
77927: PPUSH
77928: LD_VAR 0 1
77932: PPUSH
77933: CALL 20449 0 2
77937: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
77938: LD_EXP 102
77942: PUSH
77943: LD_VAR 0 4
77947: ARRAY
77948: IFFALSE 78029
// begin for i in hackTanksCaptured [ index ] do
77950: LD_ADDR_VAR 0 3
77954: PUSH
77955: LD_EXP 102
77959: PUSH
77960: LD_VAR 0 4
77964: ARRAY
77965: PUSH
77966: FOR_IN
77967: IFFALSE 77993
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
77969: LD_VAR 0 3
77973: PUSH
77974: LD_INT 1
77976: ARRAY
77977: PPUSH
77978: LD_VAR 0 3
77982: PUSH
77983: LD_INT 2
77985: ARRAY
77986: PPUSH
77987: CALL_OW 235
77991: GO 77966
77993: POP
77994: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
77995: LD_ADDR_EXP 102
77999: PUSH
78000: LD_EXP 102
78004: PPUSH
78005: LD_VAR 0 4
78009: PPUSH
78010: EMPTY
78011: PPUSH
78012: CALL_OW 1
78016: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78017: LD_VAR 0 1
78021: PPUSH
78022: LD_INT 0
78024: PPUSH
78025: CALL_OW 505
// end ; end ;
78029: LD_VAR 0 2
78033: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78034: LD_INT 0
78036: PPUSH
78037: PPUSH
78038: PPUSH
// if not hack in hackTanks or not vehicles then
78039: LD_VAR 0 1
78043: PUSH
78044: LD_EXP 101
78048: IN
78049: NOT
78050: IFTRUE 78059
78052: PUSH
78053: LD_VAR 0 2
78057: NOT
78058: OR
78059: IFFALSE 78063
// exit ;
78061: GO 78338
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78063: LD_ADDR_VAR 0 2
78067: PUSH
78068: LD_VAR 0 1
78072: PPUSH
78073: LD_VAR 0 2
78077: PPUSH
78078: LD_INT 1
78080: PPUSH
78081: LD_INT 1
78083: PPUSH
78084: CALL 21101 0 4
78088: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78089: LD_ADDR_VAR 0 5
78093: PUSH
78094: LD_EXP 101
78098: PPUSH
78099: LD_VAR 0 1
78103: PPUSH
78104: CALL 20449 0 2
78108: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78109: LD_EXP 102
78113: PUSH
78114: LD_VAR 0 5
78118: ARRAY
78119: PUSH
78120: LD_EXP 103
78124: LESS
78125: IFFALSE 78314
// begin for i := 1 to vehicles do
78127: LD_ADDR_VAR 0 4
78131: PUSH
78132: DOUBLE
78133: LD_INT 1
78135: DEC
78136: ST_TO_ADDR
78137: LD_VAR 0 2
78141: PUSH
78142: FOR_TO
78143: IFFALSE 78312
// begin if hackTanksCaptured [ index ] = hackLimit then
78145: LD_EXP 102
78149: PUSH
78150: LD_VAR 0 5
78154: ARRAY
78155: PUSH
78156: LD_EXP 103
78160: EQUAL
78161: IFFALSE 78165
// break ;
78163: GO 78312
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78165: LD_ADDR_EXP 105
78169: PUSH
78170: LD_EXP 105
78174: PPUSH
78175: LD_VAR 0 5
78179: PPUSH
78180: LD_EXP 105
78184: PUSH
78185: LD_VAR 0 5
78189: ARRAY
78190: PUSH
78191: LD_INT 1
78193: PLUS
78194: PPUSH
78195: CALL_OW 1
78199: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78200: LD_ADDR_EXP 102
78204: PUSH
78205: LD_EXP 102
78209: PPUSH
78210: LD_VAR 0 5
78214: PUSH
78215: LD_EXP 102
78219: PUSH
78220: LD_VAR 0 5
78224: ARRAY
78225: PUSH
78226: LD_INT 1
78228: PLUS
78229: PUSH
78230: EMPTY
78231: LIST
78232: LIST
78233: PPUSH
78234: LD_VAR 0 2
78238: PUSH
78239: LD_VAR 0 4
78243: ARRAY
78244: PUSH
78245: LD_VAR 0 2
78249: PUSH
78250: LD_VAR 0 4
78254: ARRAY
78255: PPUSH
78256: CALL_OW 255
78260: PUSH
78261: EMPTY
78262: LIST
78263: LIST
78264: PPUSH
78265: CALL 20666 0 3
78269: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78270: LD_VAR 0 2
78274: PUSH
78275: LD_VAR 0 4
78279: ARRAY
78280: PPUSH
78281: LD_VAR 0 1
78285: PPUSH
78286: CALL_OW 255
78290: PPUSH
78291: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78295: LD_VAR 0 2
78299: PUSH
78300: LD_VAR 0 4
78304: ARRAY
78305: PPUSH
78306: CALL_OW 141
// end ;
78310: GO 78142
78312: POP
78313: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78314: LD_VAR 0 1
78318: PPUSH
78319: LD_EXP 102
78323: PUSH
78324: LD_VAR 0 5
78328: ARRAY
78329: PUSH
78330: LD_INT 0
78332: PLUS
78333: PPUSH
78334: CALL_OW 505
// end ;
78338: LD_VAR 0 3
78342: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
78343: LD_INT 0
78345: PPUSH
78346: PPUSH
78347: PPUSH
78348: PPUSH
// if not hack in hackTanks then
78349: LD_VAR 0 1
78353: PUSH
78354: LD_EXP 101
78358: IN
78359: NOT
78360: IFFALSE 78364
// exit ;
78362: GO 78608
// index := GetElementIndex ( hackTanks , hack ) ;
78364: LD_ADDR_VAR 0 4
78368: PUSH
78369: LD_EXP 101
78373: PPUSH
78374: LD_VAR 0 1
78378: PPUSH
78379: CALL 20449 0 2
78383: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
78384: LD_ADDR_VAR 0 3
78388: PUSH
78389: DOUBLE
78390: LD_EXP 102
78394: PUSH
78395: LD_VAR 0 4
78399: ARRAY
78400: INC
78401: ST_TO_ADDR
78402: LD_INT 1
78404: PUSH
78405: FOR_DOWNTO
78406: IFFALSE 78582
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
78408: LD_ADDR_VAR 0 5
78412: PUSH
78413: LD_EXP 102
78417: PUSH
78418: LD_VAR 0 4
78422: ARRAY
78423: PUSH
78424: LD_VAR 0 3
78428: ARRAY
78429: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
78430: LD_VAR 0 5
78434: PUSH
78435: LD_INT 1
78437: ARRAY
78438: PPUSH
78439: CALL_OW 302
78443: NOT
78444: IFTRUE 78472
78446: PUSH
78447: LD_VAR 0 5
78451: PUSH
78452: LD_INT 1
78454: ARRAY
78455: PPUSH
78456: CALL_OW 255
78460: PUSH
78461: LD_VAR 0 1
78465: PPUSH
78466: CALL_OW 255
78470: NONEQUAL
78471: OR
78472: IFFALSE 78580
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
78474: LD_VAR 0 5
78478: PUSH
78479: LD_INT 1
78481: ARRAY
78482: PPUSH
78483: CALL_OW 305
78487: IFFALSE 78515
78489: PUSH
78490: LD_VAR 0 5
78494: PUSH
78495: LD_INT 1
78497: ARRAY
78498: PPUSH
78499: CALL_OW 255
78503: PUSH
78504: LD_VAR 0 1
78508: PPUSH
78509: CALL_OW 255
78513: EQUAL
78514: AND
78515: IFFALSE 78539
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
78517: LD_VAR 0 5
78521: PUSH
78522: LD_INT 1
78524: ARRAY
78525: PPUSH
78526: LD_VAR 0 5
78530: PUSH
78531: LD_INT 2
78533: ARRAY
78534: PPUSH
78535: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
78539: LD_ADDR_EXP 102
78543: PUSH
78544: LD_EXP 102
78548: PPUSH
78549: LD_VAR 0 4
78553: PPUSH
78554: LD_EXP 102
78558: PUSH
78559: LD_VAR 0 4
78563: ARRAY
78564: PPUSH
78565: LD_VAR 0 3
78569: PPUSH
78570: CALL_OW 3
78574: PPUSH
78575: CALL_OW 1
78579: ST_TO_ADDR
// end ; end ;
78580: GO 78405
78582: POP
78583: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78584: LD_VAR 0 1
78588: PPUSH
78589: LD_EXP 102
78593: PUSH
78594: LD_VAR 0 4
78598: ARRAY
78599: PUSH
78600: LD_INT 0
78602: PLUS
78603: PPUSH
78604: CALL_OW 505
// end ;
78608: LD_VAR 0 2
78612: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
78613: LD_INT 0
78615: PPUSH
78616: PPUSH
78617: PPUSH
78618: PPUSH
// if not hack in hackTanks then
78619: LD_VAR 0 1
78623: PUSH
78624: LD_EXP 101
78628: IN
78629: NOT
78630: IFFALSE 78634
// exit ;
78632: GO 78719
// index := GetElementIndex ( hackTanks , hack ) ;
78634: LD_ADDR_VAR 0 5
78638: PUSH
78639: LD_EXP 101
78643: PPUSH
78644: LD_VAR 0 1
78648: PPUSH
78649: CALL 20449 0 2
78653: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
78654: LD_ADDR_VAR 0 4
78658: PUSH
78659: DOUBLE
78660: LD_INT 1
78662: DEC
78663: ST_TO_ADDR
78664: LD_EXP 102
78668: PUSH
78669: LD_VAR 0 5
78673: ARRAY
78674: PUSH
78675: FOR_TO
78676: IFFALSE 78717
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
78678: LD_EXP 102
78682: PUSH
78683: LD_VAR 0 5
78687: ARRAY
78688: PUSH
78689: LD_VAR 0 4
78693: ARRAY
78694: PUSH
78695: LD_INT 1
78697: ARRAY
78698: PUSH
78699: LD_VAR 0 2
78703: EQUAL
78704: IFFALSE 78715
// KillUnit ( vehicle ) ;
78706: LD_VAR 0 2
78710: PPUSH
78711: CALL_OW 66
78715: GO 78675
78717: POP
78718: POP
// end ;
78719: LD_VAR 0 3
78723: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
78724: LD_EXP 106
78728: NOT
78729: IFFALSE 78764
78731: GO 78733
78733: DISABLE
// begin initMiner := true ;
78734: LD_ADDR_EXP 106
78738: PUSH
78739: LD_INT 1
78741: ST_TO_ADDR
// minersList := [ ] ;
78742: LD_ADDR_EXP 107
78746: PUSH
78747: EMPTY
78748: ST_TO_ADDR
// minerMinesList := [ ] ;
78749: LD_ADDR_EXP 108
78753: PUSH
78754: EMPTY
78755: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
78756: LD_ADDR_EXP 109
78760: PUSH
78761: LD_INT 5
78763: ST_TO_ADDR
// end ;
78764: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
78765: LD_EXP 106
78769: IFFALSE 78787
78771: PUSH
78772: LD_INT 34
78774: PUSH
78775: LD_INT 81
78777: PUSH
78778: EMPTY
78779: LIST
78780: LIST
78781: PPUSH
78782: CALL_OW 69
78786: AND
78787: IFFALSE 79250
78789: GO 78791
78791: DISABLE
78792: LD_INT 0
78794: PPUSH
78795: PPUSH
78796: PPUSH
78797: PPUSH
// begin enable ;
78798: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
78799: LD_ADDR_VAR 0 1
78803: PUSH
78804: LD_INT 34
78806: PUSH
78807: LD_INT 81
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: PPUSH
78814: CALL_OW 69
78818: PUSH
78819: FOR_IN
78820: IFFALSE 78892
// begin if not i in minersList then
78822: LD_VAR 0 1
78826: PUSH
78827: LD_EXP 107
78831: IN
78832: NOT
78833: IFFALSE 78890
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
78835: LD_ADDR_EXP 107
78839: PUSH
78840: LD_EXP 107
78844: PPUSH
78845: LD_EXP 107
78849: PUSH
78850: LD_INT 1
78852: PLUS
78853: PPUSH
78854: LD_VAR 0 1
78858: PPUSH
78859: CALL_OW 1
78863: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
78864: LD_ADDR_EXP 108
78868: PUSH
78869: LD_EXP 108
78873: PPUSH
78874: LD_EXP 108
78878: PUSH
78879: LD_INT 1
78881: PLUS
78882: PPUSH
78883: EMPTY
78884: PPUSH
78885: CALL_OW 1
78889: ST_TO_ADDR
// end end ;
78890: GO 78819
78892: POP
78893: POP
// for i := minerMinesList downto 1 do
78894: LD_ADDR_VAR 0 1
78898: PUSH
78899: DOUBLE
78900: LD_EXP 108
78904: INC
78905: ST_TO_ADDR
78906: LD_INT 1
78908: PUSH
78909: FOR_DOWNTO
78910: IFFALSE 79248
// begin if IsLive ( minersList [ i ] ) then
78912: LD_EXP 107
78916: PUSH
78917: LD_VAR 0 1
78921: ARRAY
78922: PPUSH
78923: CALL_OW 300
78927: IFFALSE 78955
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
78929: LD_EXP 107
78933: PUSH
78934: LD_VAR 0 1
78938: ARRAY
78939: PPUSH
78940: LD_EXP 108
78944: PUSH
78945: LD_VAR 0 1
78949: ARRAY
78950: PPUSH
78951: CALL_OW 505
// if not minerMinesList [ i ] then
78955: LD_EXP 108
78959: PUSH
78960: LD_VAR 0 1
78964: ARRAY
78965: NOT
78966: IFFALSE 78970
// continue ;
78968: GO 78909
// for j := minerMinesList [ i ] downto 1 do
78970: LD_ADDR_VAR 0 2
78974: PUSH
78975: DOUBLE
78976: LD_EXP 108
78980: PUSH
78981: LD_VAR 0 1
78985: ARRAY
78986: INC
78987: ST_TO_ADDR
78988: LD_INT 1
78990: PUSH
78991: FOR_DOWNTO
78992: IFFALSE 79244
// begin side := GetSide ( minersList [ i ] ) ;
78994: LD_ADDR_VAR 0 3
78998: PUSH
78999: LD_EXP 107
79003: PUSH
79004: LD_VAR 0 1
79008: ARRAY
79009: PPUSH
79010: CALL_OW 255
79014: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79015: LD_ADDR_VAR 0 4
79019: PUSH
79020: LD_EXP 108
79024: PUSH
79025: LD_VAR 0 1
79029: ARRAY
79030: PUSH
79031: LD_VAR 0 2
79035: ARRAY
79036: PUSH
79037: LD_INT 1
79039: ARRAY
79040: PPUSH
79041: LD_EXP 108
79045: PUSH
79046: LD_VAR 0 1
79050: ARRAY
79051: PUSH
79052: LD_VAR 0 2
79056: ARRAY
79057: PUSH
79058: LD_INT 2
79060: ARRAY
79061: PPUSH
79062: CALL_OW 428
79066: ST_TO_ADDR
// if not tmp then
79067: LD_VAR 0 4
79071: NOT
79072: IFFALSE 79076
// continue ;
79074: GO 78991
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79076: LD_VAR 0 4
79080: PUSH
79081: LD_INT 81
79083: PUSH
79084: LD_VAR 0 3
79088: PUSH
79089: EMPTY
79090: LIST
79091: LIST
79092: PPUSH
79093: CALL_OW 69
79097: IN
79098: IFFALSE 79148
79100: PUSH
79101: LD_EXP 108
79105: PUSH
79106: LD_VAR 0 1
79110: ARRAY
79111: PUSH
79112: LD_VAR 0 2
79116: ARRAY
79117: PUSH
79118: LD_INT 1
79120: ARRAY
79121: PPUSH
79122: LD_EXP 108
79126: PUSH
79127: LD_VAR 0 1
79131: ARRAY
79132: PUSH
79133: LD_VAR 0 2
79137: ARRAY
79138: PUSH
79139: LD_INT 2
79141: ARRAY
79142: PPUSH
79143: CALL_OW 458
79147: AND
79148: IFFALSE 79242
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79150: LD_EXP 108
79154: PUSH
79155: LD_VAR 0 1
79159: ARRAY
79160: PUSH
79161: LD_VAR 0 2
79165: ARRAY
79166: PUSH
79167: LD_INT 1
79169: ARRAY
79170: PPUSH
79171: LD_EXP 108
79175: PUSH
79176: LD_VAR 0 1
79180: ARRAY
79181: PUSH
79182: LD_VAR 0 2
79186: ARRAY
79187: PUSH
79188: LD_INT 2
79190: ARRAY
79191: PPUSH
79192: LD_VAR 0 3
79196: PPUSH
79197: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79201: LD_ADDR_EXP 108
79205: PUSH
79206: LD_EXP 108
79210: PPUSH
79211: LD_VAR 0 1
79215: PPUSH
79216: LD_EXP 108
79220: PUSH
79221: LD_VAR 0 1
79225: ARRAY
79226: PPUSH
79227: LD_VAR 0 2
79231: PPUSH
79232: CALL_OW 3
79236: PPUSH
79237: CALL_OW 1
79241: ST_TO_ADDR
// end ; end ;
79242: GO 78991
79244: POP
79245: POP
// end ;
79246: GO 78909
79248: POP
79249: POP
// end ;
79250: PPOPN 4
79252: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
79253: LD_INT 0
79255: PPUSH
79256: PPUSH
// result := false ;
79257: LD_ADDR_VAR 0 4
79261: PUSH
79262: LD_INT 0
79264: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79265: LD_VAR 0 1
79269: PPUSH
79270: CALL_OW 264
79274: PUSH
79275: LD_INT 81
79277: EQUAL
79278: NOT
79279: IFFALSE 79283
// exit ;
79281: GO 79527
// index := GetElementIndex ( minersList , unit ) ;
79283: LD_ADDR_VAR 0 5
79287: PUSH
79288: LD_EXP 107
79292: PPUSH
79293: LD_VAR 0 1
79297: PPUSH
79298: CALL 20449 0 2
79302: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79303: LD_EXP 108
79307: PUSH
79308: LD_VAR 0 5
79312: ARRAY
79313: PUSH
79314: LD_EXP 109
79318: GREATEREQUAL
79319: IFFALSE 79323
// exit ;
79321: GO 79527
// ComMoveXY ( unit , x , y ) ;
79323: LD_VAR 0 1
79327: PPUSH
79328: LD_VAR 0 2
79332: PPUSH
79333: LD_VAR 0 3
79337: PPUSH
79338: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79342: LD_INT 35
79344: PPUSH
79345: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
79349: LD_VAR 0 1
79353: PPUSH
79354: LD_VAR 0 2
79358: PPUSH
79359: LD_VAR 0 3
79363: PPUSH
79364: CALL 52495 0 3
79368: NOT
79369: IFFALSE 79382
79371: PUSH
79372: LD_VAR 0 1
79376: PPUSH
79377: CALL_OW 314
79381: AND
79382: IFFALSE 79386
// exit ;
79384: GO 79527
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
79386: LD_VAR 0 2
79390: PPUSH
79391: LD_VAR 0 3
79395: PPUSH
79396: CALL_OW 428
79400: PUSH
79401: LD_VAR 0 1
79405: EQUAL
79406: IFFALSE 79420
79408: PUSH
79409: LD_VAR 0 1
79413: PPUSH
79414: CALL_OW 314
79418: NOT
79419: AND
79420: IFFALSE 79342
// PlaySoundXY ( x , y , PlantMine ) ;
79422: LD_VAR 0 2
79426: PPUSH
79427: LD_VAR 0 3
79431: PPUSH
79432: LD_STRING PlantMine
79434: PPUSH
79435: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
79439: LD_VAR 0 2
79443: PPUSH
79444: LD_VAR 0 3
79448: PPUSH
79449: LD_VAR 0 1
79453: PPUSH
79454: CALL_OW 255
79458: PPUSH
79459: LD_INT 0
79461: PPUSH
79462: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
79466: LD_ADDR_EXP 108
79470: PUSH
79471: LD_EXP 108
79475: PPUSH
79476: LD_VAR 0 5
79480: PUSH
79481: LD_EXP 108
79485: PUSH
79486: LD_VAR 0 5
79490: ARRAY
79491: PUSH
79492: LD_INT 1
79494: PLUS
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: PPUSH
79500: LD_VAR 0 2
79504: PUSH
79505: LD_VAR 0 3
79509: PUSH
79510: EMPTY
79511: LIST
79512: LIST
79513: PPUSH
79514: CALL 20666 0 3
79518: ST_TO_ADDR
// result := true ;
79519: LD_ADDR_VAR 0 4
79523: PUSH
79524: LD_INT 1
79526: ST_TO_ADDR
// end ;
79527: LD_VAR 0 4
79531: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
79532: LD_INT 0
79534: PPUSH
79535: PPUSH
79536: PPUSH
// if not unit in minersList then
79537: LD_VAR 0 1
79541: PUSH
79542: LD_EXP 107
79546: IN
79547: NOT
79548: IFFALSE 79552
// exit ;
79550: GO 79946
// index := GetElementIndex ( minersList , unit ) ;
79552: LD_ADDR_VAR 0 6
79556: PUSH
79557: LD_EXP 107
79561: PPUSH
79562: LD_VAR 0 1
79566: PPUSH
79567: CALL 20449 0 2
79571: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
79572: LD_ADDR_VAR 0 5
79576: PUSH
79577: DOUBLE
79578: LD_EXP 108
79582: PUSH
79583: LD_VAR 0 6
79587: ARRAY
79588: INC
79589: ST_TO_ADDR
79590: LD_INT 1
79592: PUSH
79593: FOR_DOWNTO
79594: IFFALSE 79757
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
79596: LD_EXP 108
79600: PUSH
79601: LD_VAR 0 6
79605: ARRAY
79606: PUSH
79607: LD_VAR 0 5
79611: ARRAY
79612: PUSH
79613: LD_INT 1
79615: ARRAY
79616: PUSH
79617: LD_VAR 0 2
79621: EQUAL
79622: IFFALSE 79652
79624: PUSH
79625: LD_EXP 108
79629: PUSH
79630: LD_VAR 0 6
79634: ARRAY
79635: PUSH
79636: LD_VAR 0 5
79640: ARRAY
79641: PUSH
79642: LD_INT 2
79644: ARRAY
79645: PUSH
79646: LD_VAR 0 3
79650: EQUAL
79651: AND
79652: IFFALSE 79755
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79654: LD_EXP 108
79658: PUSH
79659: LD_VAR 0 6
79663: ARRAY
79664: PUSH
79665: LD_VAR 0 5
79669: ARRAY
79670: PUSH
79671: LD_INT 1
79673: ARRAY
79674: PPUSH
79675: LD_EXP 108
79679: PUSH
79680: LD_VAR 0 6
79684: ARRAY
79685: PUSH
79686: LD_VAR 0 5
79690: ARRAY
79691: PUSH
79692: LD_INT 2
79694: ARRAY
79695: PPUSH
79696: LD_VAR 0 1
79700: PPUSH
79701: CALL_OW 255
79705: PPUSH
79706: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79710: LD_ADDR_EXP 108
79714: PUSH
79715: LD_EXP 108
79719: PPUSH
79720: LD_VAR 0 6
79724: PPUSH
79725: LD_EXP 108
79729: PUSH
79730: LD_VAR 0 6
79734: ARRAY
79735: PPUSH
79736: LD_VAR 0 5
79740: PPUSH
79741: CALL_OW 3
79745: PPUSH
79746: CALL_OW 1
79750: ST_TO_ADDR
// exit ;
79751: POP
79752: POP
79753: GO 79946
// end ; end ;
79755: GO 79593
79757: POP
79758: POP
// for i := minerMinesList [ index ] downto 1 do
79759: LD_ADDR_VAR 0 5
79763: PUSH
79764: DOUBLE
79765: LD_EXP 108
79769: PUSH
79770: LD_VAR 0 6
79774: ARRAY
79775: INC
79776: ST_TO_ADDR
79777: LD_INT 1
79779: PUSH
79780: FOR_DOWNTO
79781: IFFALSE 79944
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
79783: LD_EXP 108
79787: PUSH
79788: LD_VAR 0 6
79792: ARRAY
79793: PUSH
79794: LD_VAR 0 5
79798: ARRAY
79799: PUSH
79800: LD_INT 1
79802: ARRAY
79803: PPUSH
79804: LD_EXP 108
79808: PUSH
79809: LD_VAR 0 6
79813: ARRAY
79814: PUSH
79815: LD_VAR 0 5
79819: ARRAY
79820: PUSH
79821: LD_INT 2
79823: ARRAY
79824: PPUSH
79825: LD_VAR 0 2
79829: PPUSH
79830: LD_VAR 0 3
79834: PPUSH
79835: CALL_OW 298
79839: PUSH
79840: LD_INT 6
79842: LESS
79843: IFFALSE 79942
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79845: LD_EXP 108
79849: PUSH
79850: LD_VAR 0 6
79854: ARRAY
79855: PUSH
79856: LD_VAR 0 5
79860: ARRAY
79861: PUSH
79862: LD_INT 1
79864: ARRAY
79865: PPUSH
79866: LD_EXP 108
79870: PUSH
79871: LD_VAR 0 6
79875: ARRAY
79876: PUSH
79877: LD_VAR 0 5
79881: ARRAY
79882: PUSH
79883: LD_INT 2
79885: ARRAY
79886: PPUSH
79887: LD_VAR 0 1
79891: PPUSH
79892: CALL_OW 255
79896: PPUSH
79897: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79901: LD_ADDR_EXP 108
79905: PUSH
79906: LD_EXP 108
79910: PPUSH
79911: LD_VAR 0 6
79915: PPUSH
79916: LD_EXP 108
79920: PUSH
79921: LD_VAR 0 6
79925: ARRAY
79926: PPUSH
79927: LD_VAR 0 5
79931: PPUSH
79932: CALL_OW 3
79936: PPUSH
79937: CALL_OW 1
79941: ST_TO_ADDR
// end ; end ;
79942: GO 79780
79944: POP
79945: POP
// end ;
79946: LD_VAR 0 4
79950: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
79951: LD_INT 0
79953: PPUSH
79954: PPUSH
79955: PPUSH
79956: PPUSH
79957: PPUSH
79958: PPUSH
79959: PPUSH
79960: PPUSH
79961: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
79962: LD_VAR 0 1
79966: PPUSH
79967: CALL_OW 264
79971: PUSH
79972: LD_INT 81
79974: EQUAL
79975: NOT
79976: IFTRUE 79991
79978: PUSH
79979: LD_VAR 0 1
79983: PUSH
79984: LD_EXP 107
79988: IN
79989: NOT
79990: OR
79991: IFFALSE 79995
// exit ;
79993: GO 80321
// index := GetElementIndex ( minersList , unit ) ;
79995: LD_ADDR_VAR 0 6
79999: PUSH
80000: LD_EXP 107
80004: PPUSH
80005: LD_VAR 0 1
80009: PPUSH
80010: CALL 20449 0 2
80014: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80015: LD_ADDR_VAR 0 8
80019: PUSH
80020: LD_EXP 109
80024: PUSH
80025: LD_EXP 108
80029: PUSH
80030: LD_VAR 0 6
80034: ARRAY
80035: MINUS
80036: ST_TO_ADDR
// if not minesFreeAmount then
80037: LD_VAR 0 8
80041: NOT
80042: IFFALSE 80046
// exit ;
80044: GO 80321
// tmp := [ ] ;
80046: LD_ADDR_VAR 0 7
80050: PUSH
80051: EMPTY
80052: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80053: LD_ADDR_VAR 0 5
80057: PUSH
80058: DOUBLE
80059: LD_INT 1
80061: DEC
80062: ST_TO_ADDR
80063: LD_VAR 0 8
80067: PUSH
80068: FOR_TO
80069: IFFALSE 80268
// begin _d := rand ( 0 , 5 ) ;
80071: LD_ADDR_VAR 0 11
80075: PUSH
80076: LD_INT 0
80078: PPUSH
80079: LD_INT 5
80081: PPUSH
80082: CALL_OW 12
80086: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80087: LD_ADDR_VAR 0 12
80091: PUSH
80092: LD_INT 2
80094: PPUSH
80095: LD_INT 6
80097: PPUSH
80098: CALL_OW 12
80102: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80103: LD_ADDR_VAR 0 9
80107: PUSH
80108: LD_VAR 0 2
80112: PPUSH
80113: LD_VAR 0 11
80117: PPUSH
80118: LD_VAR 0 12
80122: PPUSH
80123: CALL_OW 272
80127: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80128: LD_ADDR_VAR 0 10
80132: PUSH
80133: LD_VAR 0 3
80137: PPUSH
80138: LD_VAR 0 11
80142: PPUSH
80143: LD_VAR 0 12
80147: PPUSH
80148: CALL_OW 273
80152: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80153: LD_VAR 0 9
80157: PPUSH
80158: LD_VAR 0 10
80162: PPUSH
80163: CALL_OW 488
80167: IFFALSE 80191
80169: PUSH
80170: LD_VAR 0 9
80174: PUSH
80175: LD_VAR 0 10
80179: PUSH
80180: EMPTY
80181: LIST
80182: LIST
80183: PUSH
80184: LD_VAR 0 7
80188: IN
80189: NOT
80190: AND
80191: IFFALSE 80210
80193: PUSH
80194: LD_VAR 0 9
80198: PPUSH
80199: LD_VAR 0 10
80203: PPUSH
80204: CALL_OW 458
80208: NOT
80209: AND
80210: IFFALSE 80252
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80212: LD_ADDR_VAR 0 7
80216: PUSH
80217: LD_VAR 0 7
80221: PPUSH
80222: LD_VAR 0 7
80226: PUSH
80227: LD_INT 1
80229: PLUS
80230: PPUSH
80231: LD_VAR 0 9
80235: PUSH
80236: LD_VAR 0 10
80240: PUSH
80241: EMPTY
80242: LIST
80243: LIST
80244: PPUSH
80245: CALL_OW 1
80249: ST_TO_ADDR
80250: GO 80266
// i := i - 1 ;
80252: LD_ADDR_VAR 0 5
80256: PUSH
80257: LD_VAR 0 5
80261: PUSH
80262: LD_INT 1
80264: MINUS
80265: ST_TO_ADDR
// end ;
80266: GO 80068
80268: POP
80269: POP
// for i in tmp do
80270: LD_ADDR_VAR 0 5
80274: PUSH
80275: LD_VAR 0 7
80279: PUSH
80280: FOR_IN
80281: IFFALSE 80319
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80283: LD_VAR 0 1
80287: PPUSH
80288: LD_VAR 0 5
80292: PUSH
80293: LD_INT 1
80295: ARRAY
80296: PPUSH
80297: LD_VAR 0 5
80301: PUSH
80302: LD_INT 2
80304: ARRAY
80305: PPUSH
80306: CALL 79253 0 3
80310: NOT
80311: IFFALSE 80317
// exit ;
80313: POP
80314: POP
80315: GO 80321
80317: GO 80280
80319: POP
80320: POP
// end ;
80321: LD_VAR 0 4
80325: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
80326: LD_INT 0
80328: PPUSH
80329: PPUSH
80330: PPUSH
80331: PPUSH
80332: PPUSH
80333: PPUSH
80334: PPUSH
80335: PPUSH
80336: PPUSH
// if GetClass ( unit ) <> class_sniper then
80337: LD_VAR 0 1
80341: PPUSH
80342: CALL_OW 257
80346: PUSH
80347: LD_INT 5
80349: NONEQUAL
80350: IFFALSE 80354
// exit ;
80352: GO 80824
// dist := 8 ;
80354: LD_ADDR_VAR 0 5
80358: PUSH
80359: LD_INT 8
80361: ST_TO_ADDR
// viewRange := 12 ;
80362: LD_ADDR_VAR 0 8
80366: PUSH
80367: LD_INT 12
80369: ST_TO_ADDR
// side := GetSide ( unit ) ;
80370: LD_ADDR_VAR 0 6
80374: PUSH
80375: LD_VAR 0 1
80379: PPUSH
80380: CALL_OW 255
80384: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
80385: LD_INT 61
80387: PPUSH
80388: LD_VAR 0 6
80392: PPUSH
80393: CALL_OW 321
80397: PUSH
80398: LD_INT 2
80400: EQUAL
80401: IFFALSE 80411
// viewRange := 16 ;
80403: LD_ADDR_VAR 0 8
80407: PUSH
80408: LD_INT 16
80410: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
80411: LD_VAR 0 1
80415: PPUSH
80416: LD_VAR 0 2
80420: PPUSH
80421: LD_VAR 0 3
80425: PPUSH
80426: CALL_OW 297
80430: PUSH
80431: LD_VAR 0 5
80435: GREATER
80436: IFFALSE 80515
// begin ComMoveXY ( unit , x , y ) ;
80438: LD_VAR 0 1
80442: PPUSH
80443: LD_VAR 0 2
80447: PPUSH
80448: LD_VAR 0 3
80452: PPUSH
80453: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80457: LD_INT 35
80459: PPUSH
80460: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
80464: LD_VAR 0 1
80468: PPUSH
80469: LD_VAR 0 2
80473: PPUSH
80474: LD_VAR 0 3
80478: PPUSH
80479: CALL 52495 0 3
80483: NOT
80484: IFFALSE 80488
// exit ;
80486: GO 80824
// until GetDistUnitXY ( unit , x , y ) < dist ;
80488: LD_VAR 0 1
80492: PPUSH
80493: LD_VAR 0 2
80497: PPUSH
80498: LD_VAR 0 3
80502: PPUSH
80503: CALL_OW 297
80507: PUSH
80508: LD_VAR 0 5
80512: LESS
80513: IFFALSE 80457
// end ; ComTurnXY ( unit , x , y ) ;
80515: LD_VAR 0 1
80519: PPUSH
80520: LD_VAR 0 2
80524: PPUSH
80525: LD_VAR 0 3
80529: PPUSH
80530: CALL_OW 118
// repeat if Multiplayer then
80534: LD_OWVAR 4
80538: IFFALSE 80549
// wait ( 35 ) else
80540: LD_INT 35
80542: PPUSH
80543: CALL_OW 67
80547: GO 80556
// wait ( 5 ) ;
80549: LD_INT 5
80551: PPUSH
80552: CALL_OW 67
// _d := GetDir ( unit ) ;
80556: LD_ADDR_VAR 0 11
80560: PUSH
80561: LD_VAR 0 1
80565: PPUSH
80566: CALL_OW 254
80570: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
80571: LD_ADDR_VAR 0 7
80575: PUSH
80576: LD_VAR 0 1
80580: PPUSH
80581: CALL_OW 250
80585: PPUSH
80586: LD_VAR 0 1
80590: PPUSH
80591: CALL_OW 251
80595: PPUSH
80596: LD_VAR 0 2
80600: PPUSH
80601: LD_VAR 0 3
80605: PPUSH
80606: CALL 55131 0 4
80610: ST_TO_ADDR
// until dir = _d ;
80611: LD_VAR 0 7
80615: PUSH
80616: LD_VAR 0 11
80620: EQUAL
80621: IFFALSE 80534
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
80623: LD_ADDR_VAR 0 9
80627: PUSH
80628: LD_VAR 0 1
80632: PPUSH
80633: CALL_OW 250
80637: PPUSH
80638: LD_VAR 0 7
80642: PPUSH
80643: LD_VAR 0 5
80647: PPUSH
80648: CALL_OW 272
80652: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
80653: LD_ADDR_VAR 0 10
80657: PUSH
80658: LD_VAR 0 1
80662: PPUSH
80663: CALL_OW 251
80667: PPUSH
80668: LD_VAR 0 7
80672: PPUSH
80673: LD_VAR 0 5
80677: PPUSH
80678: CALL_OW 273
80682: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80683: LD_VAR 0 9
80687: PPUSH
80688: LD_VAR 0 10
80692: PPUSH
80693: CALL_OW 488
80697: NOT
80698: IFFALSE 80702
// exit ;
80700: GO 80824
// ComAnimCustom ( unit , 1 ) ;
80702: LD_VAR 0 1
80706: PPUSH
80707: LD_INT 1
80709: PPUSH
80710: CALL_OW 592
// p := 0 ;
80714: LD_ADDR_VAR 0 12
80718: PUSH
80719: LD_INT 0
80721: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
80722: LD_VAR 0 9
80726: PPUSH
80727: LD_VAR 0 10
80731: PPUSH
80732: LD_VAR 0 6
80736: PPUSH
80737: LD_VAR 0 8
80741: PPUSH
80742: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
80746: LD_INT 35
80748: PPUSH
80749: CALL_OW 67
// p := Inc ( p ) ;
80753: LD_ADDR_VAR 0 12
80757: PUSH
80758: LD_VAR 0 12
80762: PPUSH
80763: CALL 55087 0 1
80767: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
80768: LD_VAR 0 12
80772: PUSH
80773: LD_INT 3
80775: EQUAL
80776: IFTRUE 80790
80778: PUSH
80779: LD_VAR 0 1
80783: PPUSH
80784: CALL_OW 302
80788: NOT
80789: OR
80790: IFTRUE 80803
80792: PUSH
80793: LD_VAR 0 1
80797: PPUSH
80798: CALL_OW 301
80802: OR
80803: IFFALSE 80746
// RemoveSeeing ( _x , _y , side ) ;
80805: LD_VAR 0 9
80809: PPUSH
80810: LD_VAR 0 10
80814: PPUSH
80815: LD_VAR 0 6
80819: PPUSH
80820: CALL_OW 331
// end ;
80824: LD_VAR 0 4
80828: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
80829: LD_INT 0
80831: PPUSH
80832: PPUSH
80833: PPUSH
80834: PPUSH
80835: PPUSH
80836: PPUSH
80837: PPUSH
80838: PPUSH
80839: PPUSH
80840: PPUSH
80841: PPUSH
// if not unit then
80842: LD_VAR 0 1
80846: NOT
80847: IFFALSE 80851
// exit ;
80849: GO 81122
// side := GetSide ( unit ) ;
80851: LD_ADDR_VAR 0 3
80855: PUSH
80856: LD_VAR 0 1
80860: PPUSH
80861: CALL_OW 255
80865: ST_TO_ADDR
// x := GetX ( unit ) ;
80866: LD_ADDR_VAR 0 5
80870: PUSH
80871: LD_VAR 0 1
80875: PPUSH
80876: CALL_OW 250
80880: ST_TO_ADDR
// y := GetY ( unit ) ;
80881: LD_ADDR_VAR 0 6
80885: PUSH
80886: LD_VAR 0 1
80890: PPUSH
80891: CALL_OW 251
80895: ST_TO_ADDR
// r := 8 ;
80896: LD_ADDR_VAR 0 4
80900: PUSH
80901: LD_INT 8
80903: ST_TO_ADDR
// if x - r < 0 then
80904: LD_VAR 0 5
80908: PUSH
80909: LD_VAR 0 4
80913: MINUS
80914: PUSH
80915: LD_INT 0
80917: LESS
80918: IFFALSE 80930
// min_x := 0 else
80920: LD_ADDR_VAR 0 7
80924: PUSH
80925: LD_INT 0
80927: ST_TO_ADDR
80928: GO 80946
// min_x := x - r ;
80930: LD_ADDR_VAR 0 7
80934: PUSH
80935: LD_VAR 0 5
80939: PUSH
80940: LD_VAR 0 4
80944: MINUS
80945: ST_TO_ADDR
// if y - r < 0 then
80946: LD_VAR 0 6
80950: PUSH
80951: LD_VAR 0 4
80955: MINUS
80956: PUSH
80957: LD_INT 0
80959: LESS
80960: IFFALSE 80972
// min_y := 0 else
80962: LD_ADDR_VAR 0 8
80966: PUSH
80967: LD_INT 0
80969: ST_TO_ADDR
80970: GO 80988
// min_y := y - r ;
80972: LD_ADDR_VAR 0 8
80976: PUSH
80977: LD_VAR 0 6
80981: PUSH
80982: LD_VAR 0 4
80986: MINUS
80987: ST_TO_ADDR
// max_x := x + r ;
80988: LD_ADDR_VAR 0 9
80992: PUSH
80993: LD_VAR 0 5
80997: PUSH
80998: LD_VAR 0 4
81002: PLUS
81003: ST_TO_ADDR
// max_y := y + r ;
81004: LD_ADDR_VAR 0 10
81008: PUSH
81009: LD_VAR 0 6
81013: PUSH
81014: LD_VAR 0 4
81018: PLUS
81019: ST_TO_ADDR
// for _x = min_x to max_x do
81020: LD_ADDR_VAR 0 11
81024: PUSH
81025: DOUBLE
81026: LD_VAR 0 7
81030: DEC
81031: ST_TO_ADDR
81032: LD_VAR 0 9
81036: PUSH
81037: FOR_TO
81038: IFFALSE 81120
// for _y = min_y to max_y do
81040: LD_ADDR_VAR 0 12
81044: PUSH
81045: DOUBLE
81046: LD_VAR 0 8
81050: DEC
81051: ST_TO_ADDR
81052: LD_VAR 0 10
81056: PUSH
81057: FOR_TO
81058: IFFALSE 81116
// begin if not ValidHex ( _x , _y ) then
81060: LD_VAR 0 11
81064: PPUSH
81065: LD_VAR 0 12
81069: PPUSH
81070: CALL_OW 488
81074: NOT
81075: IFFALSE 81079
// continue ;
81077: GO 81057
// if MineAtPos ( _x , _y ) then
81079: LD_VAR 0 11
81083: PPUSH
81084: LD_VAR 0 12
81088: PPUSH
81089: CALL_OW 458
81093: IFFALSE 81114
// ViewMineAtPos ( _x , _y , side ) ;
81095: LD_VAR 0 11
81099: PPUSH
81100: LD_VAR 0 12
81104: PPUSH
81105: LD_VAR 0 3
81109: PPUSH
81110: CALL_OW 457
// end ;
81114: GO 81057
81116: POP
81117: POP
81118: GO 81037
81120: POP
81121: POP
// end ;
81122: LD_VAR 0 2
81126: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
81127: LD_INT 0
81129: PPUSH
81130: PPUSH
81131: PPUSH
81132: PPUSH
81133: PPUSH
81134: PPUSH
// if not units then
81135: LD_VAR 0 1
81139: NOT
81140: IFFALSE 81144
// exit ;
81142: GO 81574
// scaners := [ ] ;
81144: LD_ADDR_VAR 0 6
81148: PUSH
81149: EMPTY
81150: ST_TO_ADDR
// for i in units do
81151: LD_ADDR_VAR 0 3
81155: PUSH
81156: LD_VAR 0 1
81160: PUSH
81161: FOR_IN
81162: IFFALSE 81319
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
81164: LD_VAR 0 3
81168: PPUSH
81169: CALL_OW 264
81173: PUSH
81174: LD_INT 11
81176: NONEQUAL
81177: IFTRUE 81191
81179: PUSH
81180: LD_VAR 0 3
81184: PPUSH
81185: CALL_OW 302
81189: NOT
81190: OR
81191: IFTRUE 81208
81193: PUSH
81194: LD_VAR 0 3
81198: PPUSH
81199: CALL_OW 110
81203: PUSH
81204: LD_INT 502
81206: EQUAL
81207: OR
81208: IFFALSE 81212
// continue ;
81210: GO 81161
// ComStop ( i ) ;
81212: LD_VAR 0 3
81216: PPUSH
81217: CALL_OW 141
// x := GetX ( i ) ;
81221: LD_ADDR_VAR 0 4
81225: PUSH
81226: LD_VAR 0 3
81230: PPUSH
81231: CALL_OW 250
81235: ST_TO_ADDR
// y := GetY ( i ) ;
81236: LD_ADDR_VAR 0 5
81240: PUSH
81241: LD_VAR 0 3
81245: PPUSH
81246: CALL_OW 251
81250: ST_TO_ADDR
// if GetSide ( i ) = your_side then
81251: LD_VAR 0 3
81255: PPUSH
81256: CALL_OW 255
81260: PUSH
81261: LD_OWVAR 2
81265: EQUAL
81266: IFFALSE 81285
// PlaySoundXY ( x , y , mineDetector ) ;
81268: LD_VAR 0 4
81272: PPUSH
81273: LD_VAR 0 5
81277: PPUSH
81278: LD_STRING mineDetector
81280: PPUSH
81281: CALL_OW 366
// scaners := Join ( scaners , i ) ;
81285: LD_ADDR_VAR 0 6
81289: PUSH
81290: LD_VAR 0 6
81294: PPUSH
81295: LD_VAR 0 3
81299: PPUSH
81300: CALL 53714 0 2
81304: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
81305: LD_VAR 0 3
81309: PPUSH
81310: LD_INT 502
81312: PPUSH
81313: CALL_OW 109
// end ;
81317: GO 81161
81319: POP
81320: POP
// if not scaners then
81321: LD_VAR 0 6
81325: NOT
81326: IFFALSE 81330
// exit ;
81328: GO 81574
// wait ( 3 ) ;
81330: LD_INT 3
81332: PPUSH
81333: CALL_OW 67
// timer := 6 ;
81337: LD_ADDR_VAR 0 7
81341: PUSH
81342: LD_INT 6
81344: ST_TO_ADDR
// repeat for i in scaners do
81345: LD_ADDR_VAR 0 3
81349: PUSH
81350: LD_VAR 0 6
81354: PUSH
81355: FOR_IN
81356: IFFALSE 81472
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
81358: LD_VAR 0 3
81362: PPUSH
81363: CALL_OW 302
81367: NOT
81368: IFTRUE 81381
81370: PUSH
81371: LD_VAR 0 3
81375: PPUSH
81376: CALL_OW 314
81380: OR
81381: IFTRUE 81412
81383: PUSH
81384: LD_VAR 0 3
81388: PPUSH
81389: CALL_OW 263
81393: PUSH
81394: LD_INT 1
81396: EQUAL
81397: IFFALSE 81411
81399: PUSH
81400: LD_VAR 0 3
81404: PPUSH
81405: CALL_OW 311
81409: NOT
81410: AND
81411: OR
81412: IFFALSE 81456
// begin SetUnitDisplayNumber ( i , 0 ) ;
81414: LD_VAR 0 3
81418: PPUSH
81419: LD_INT 0
81421: PPUSH
81422: CALL_OW 505
// SetTag ( i , 0 ) ;
81426: LD_VAR 0 3
81430: PPUSH
81431: LD_INT 0
81433: PPUSH
81434: CALL_OW 109
// scaners := scaners diff i ;
81438: LD_ADDR_VAR 0 6
81442: PUSH
81443: LD_VAR 0 6
81447: PUSH
81448: LD_VAR 0 3
81452: DIFF
81453: ST_TO_ADDR
// continue ;
81454: GO 81355
// end ; SetUnitDisplayNumber ( i , timer ) ;
81456: LD_VAR 0 3
81460: PPUSH
81461: LD_VAR 0 7
81465: PPUSH
81466: CALL_OW 505
// end ;
81470: GO 81355
81472: POP
81473: POP
// if not scaners then
81474: LD_VAR 0 6
81478: NOT
81479: IFFALSE 81483
// exit ;
81481: GO 81574
// timer := Dec ( timer ) ;
81483: LD_ADDR_VAR 0 7
81487: PUSH
81488: LD_VAR 0 7
81492: PPUSH
81493: CALL 55109 0 1
81497: ST_TO_ADDR
// wait ( 0 0$1 ) ;
81498: LD_INT 35
81500: PPUSH
81501: CALL_OW 67
// until timer = 0 ;
81505: LD_VAR 0 7
81509: PUSH
81510: LD_INT 0
81512: EQUAL
81513: IFFALSE 81345
// if not scaners then
81515: LD_VAR 0 6
81519: NOT
81520: IFFALSE 81524
// exit ;
81522: GO 81574
// for i in scaners do
81524: LD_ADDR_VAR 0 3
81528: PUSH
81529: LD_VAR 0 6
81533: PUSH
81534: FOR_IN
81535: IFFALSE 81572
// begin SetUnitDisplayNumber ( i , 0 ) ;
81537: LD_VAR 0 3
81541: PPUSH
81542: LD_INT 0
81544: PPUSH
81545: CALL_OW 505
// SetTag ( i , 0 ) ;
81549: LD_VAR 0 3
81553: PPUSH
81554: LD_INT 0
81556: PPUSH
81557: CALL_OW 109
// RevealDetectorMine ( i ) ;
81561: LD_VAR 0 3
81565: PPUSH
81566: CALL 80829 0 1
// end ;
81570: GO 81534
81572: POP
81573: POP
// end ;
81574: LD_VAR 0 2
81578: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
81579: LD_INT 0
81581: PPUSH
// if p1 = mine_detector_mode then
81582: LD_VAR 0 2
81586: PUSH
81587: LD_INT 103
81589: EQUAL
81590: IFFALSE 81601
// DetectMine ( units ) ;
81592: LD_VAR 0 1
81596: PPUSH
81597: CALL 81127 0 1
// end ;
81601: LD_VAR 0 7
81605: RET
