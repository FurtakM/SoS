// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 10239 0 0
// LoadEnv ;
  16: CALL 9837 0 0
// LoadCam ;
  20: CALL 10503 0 0
// LoadTech ;
  24: CALL 10579 0 0
// LoadBase ;
  28: CALL 11065 0 0
// PrepareArabian ;
  32: CALL 186 0 0
// PrepareRussian ;
  36: CALL 3050 0 0
// Action ;
  40: CALL 12369 0 0
// end ;
  44: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; export wave , strength ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 09c_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 09c_
  63: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 09_tick
  71: PPUSH
  72: LD_INT 31500
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 09c_tick
  87: PPUSH
  88: LD_INT 10500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// playerInBase := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// kamikazeTrained := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// apeDriver := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 120
 127: PUSH
 128: LD_INT 150
 130: PUSH
 131: LD_INT 180
 133: PUSH
 134: LD_INT 220
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// missionTime := 0 0$00 ;
 149: LD_ADDR_EXP 9
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// ruDefeated := false ;
 157: LD_ADDR_EXP 10
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// wave := 0 ;
 165: LD_ADDR_EXP 11
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// strength := 0 ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ; end_of_file
 181: LD_VAR 0 1
 185: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 197: LD_STRING 05_DrugsTested
 199: PPUSH
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 30
 209: IFFALSE 224
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 211: LD_INT 5
 213: PPUSH
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 2
 219: PPUSH
 220: CALL_OW 322
// uc_side := 2 ;
 224: LD_ADDR_OWVAR 20
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// uc_nation := nation_nature ;
 232: LD_ADDR_OWVAR 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 240: LD_ADDR_VAR 0 3
 244: PUSH
 245: LD_STRING 09_apes
 247: PPUSH
 248: CALL_OW 31
 252: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 253: LD_ADDR_VAR 0 6
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 30
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: ST_TO_ADDR
// if apes then
 305: LD_VAR 0 3
 309: IFFALSE 388
// for i in apes do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: LD_VAR 0 3
 320: PUSH
 321: FOR_IN
 322: IFFALSE 386
// if UnitsInside ( b [ 1 ] ) < 6 then
 324: LD_VAR 0 6
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: CALL_OW 313
 337: PUSH
 338: LD_INT 6
 340: LESS
 341: IFFALSE 363
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_VAR 0 6
 352: PUSH
 353: LD_INT 1
 355: ARRAY
 356: PPUSH
 357: CALL_OW 52
 361: GO 384
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 363: LD_VAR 0 2
 367: PPUSH
 368: LD_INT 82
 370: PPUSH
 371: LD_INT 27
 373: PPUSH
 374: LD_INT 6
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 50
 384: GO 321
 386: POP
 387: POP
// InitHC_All ( ) ;
 388: CALL_OW 584
// uc_nation := nation_arabian ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 2
 399: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 400: LD_ADDR_VAR 0 6
 404: PUSH
 405: LD_INT 22
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 5
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 474: LD_ADDR_EXP 33
 478: PUSH
 479: LD_STRING Rolf
 481: PPUSH
 482: LD_EXP 1
 486: NOT
 487: PPUSH
 488: LD_STRING 06_
 490: PPUSH
 491: CALL 15324 0 3
 495: ST_TO_ADDR
// if Rolf then
 496: LD_EXP 33
 500: IFFALSE 709
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 502: LD_ADDR_EXP 32
 506: PUSH
 507: LD_STRING 06_RolfSquad
 509: PPUSH
 510: CALL_OW 31
 514: ST_TO_ADDR
// if rolfSquad < 3 then
 515: LD_EXP 32
 519: PUSH
 520: LD_INT 3
 522: LESS
 523: IFFALSE 586
// for i := 1 to 3 - Count ( rolfSquad ) do
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: DOUBLE
 531: LD_INT 1
 533: DEC
 534: ST_TO_ADDR
 535: LD_INT 3
 537: PUSH
 538: LD_EXP 32
 542: PPUSH
 543: CALL 17426 0 1
 547: MINUS
 548: PUSH
 549: FOR_TO
 550: IFFALSE 584
// begin PrepareSoldier ( false , 4 ) ;
 552: LD_INT 0
 554: PPUSH
 555: LD_INT 4
 557: PPUSH
 558: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 562: LD_ADDR_EXP 32
 566: PUSH
 567: LD_EXP 32
 571: PPUSH
 572: CALL_OW 44
 576: PPUSH
 577: CALL 52625 0 2
 581: ST_TO_ADDR
// end ;
 582: GO 549
 584: POP
 585: POP
// if b then
 586: LD_VAR 0 6
 590: IFFALSE 665
// begin for i in rolfSquad union Rolf do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_EXP 32
 601: PUSH
 602: LD_EXP 33
 606: UNION
 607: PUSH
 608: FOR_IN
 609: IFFALSE 661
// begin SetClass ( i , 1 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_VAR 0 6
 632: PPUSH
 633: LD_INT 3
 635: PUSH
 636: LD_INT 62
 638: PUSH
 639: EMPTY
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 52
// end ;
 659: GO 608
 661: POP
 662: POP
// end else
 663: GO 709
// for i in rolfSquad union Rolf do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_EXP 32
 674: PUSH
 675: LD_EXP 33
 679: UNION
 680: PUSH
 681: FOR_IN
 682: IFFALSE 707
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 684: LD_VAR 0 2
 688: PPUSH
 689: LD_INT 82
 691: PPUSH
 692: LD_INT 27
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 50
 705: GO 681
 707: POP
 708: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 13
 713: PUSH
 714: LD_STRING Heike
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 15324 0 3
 732: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 16
 737: PUSH
 738: LD_STRING Ibrahim
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 15324 0 3
 756: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 14
 761: PUSH
 762: LD_STRING Givi
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 15324 0 3
 780: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 17
 785: PUSH
 786: LD_STRING Kamil
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 15324 0 3
 804: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 18
 809: PUSH
 810: LD_STRING Kaia
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 15324 0 3
 828: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 19
 833: PUSH
 834: LD_STRING Sophia
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 15324 0 3
 852: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 20
 857: PUSH
 858: LD_STRING Markov
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 15324 0 3
 876: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 23
 881: PUSH
 882: LD_STRING Aviradze
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 15324 0 3
 900: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 22
 905: PUSH
 906: LD_STRING Kurt
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 15324 0 3
 924: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_STRING Mike
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 15324 0 3
 948: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 21
 953: PUSH
 954: LD_STRING Olaf
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 15324 0 3
 972: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 973: LD_ADDR_EXP 30
 977: PUSH
 978: LD_STRING 09c_heikeSecondSquad
 980: PPUSH
 981: CALL_OW 31
 985: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 986: LD_ADDR_EXP 24
 990: PUSH
 991: LD_STRING Schulz
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_EXP 2
1004: PPUSH
1005: CALL 15324 0 3
1009: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
1010: LD_ADDR_EXP 25
1014: PUSH
1015: LD_STRING Basim
1017: PPUSH
1018: LD_EXP 1
1022: NOT
1023: PPUSH
1024: LD_EXP 2
1028: PPUSH
1029: CALL 15324 0 3
1033: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1034: LD_ADDR_EXP 26
1038: PUSH
1039: LD_STRING Lemmy
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 2
1052: PPUSH
1053: CALL 15324 0 3
1057: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1058: LD_ADDR_EXP 27
1062: PUSH
1063: LD_STRING Mia
1065: PPUSH
1066: LD_EXP 1
1070: NOT
1071: PPUSH
1072: LD_EXP 2
1076: PPUSH
1077: CALL 15324 0 3
1081: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1082: LD_ADDR_EXP 28
1086: PUSH
1087: LD_STRING Nia
1089: PPUSH
1090: LD_EXP 1
1094: NOT
1095: PPUSH
1096: LD_EXP 2
1100: PPUSH
1101: CALL 15324 0 3
1105: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1106: LD_ADDR_EXP 29
1110: PUSH
1111: LD_STRING Jenna
1113: PPUSH
1114: LD_EXP 1
1118: NOT
1119: PPUSH
1120: LD_EXP 2
1124: PPUSH
1125: CALL 15324 0 3
1129: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING 09c_schulzSecondSquad
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// if debug then
1143: LD_EXP 1
1147: IFFALSE 1227
// begin schulzSecondSquad := [ ] ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: EMPTY
1155: ST_TO_ADDR
// for i := 1 to 3 do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_INT 3
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1225
// begin uc_side := 2 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
// uc_nation := nation_arabian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 2
1187: ST_TO_ADDR
// PrepareHuman ( false , i , 0 ) ;
1188: LD_INT 0
1190: PPUSH
1191: LD_VAR 0 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PPUSH
1213: CALL_OW 44
1217: PPUSH
1218: CALL 52625 0 2
1222: ST_TO_ADDR
// end ;
1223: GO 1169
1225: POP
1226: POP
// end ; vehicles := LoadVariable ( 09c_vehicles , [ [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 36 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 41 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 37 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 35 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 34 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 38 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 40 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 39 ] ] ) ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_STRING 09c_vehicles
1234: PPUSH
1235: LD_INT 13
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 28
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 36
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 13
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 28
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 0
1289: PUSH
1290: LD_INT 41
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 13
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: LD_INT 28
1314: PUSH
1315: LD_INT 2
1317: PUSH
1318: LD_INT 0
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 37
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 13
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 28
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 35
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 13
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 28
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: LD_INT 34
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 13
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 28
1416: PUSH
1417: LD_INT 2
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 38
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 13
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 28
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 40
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 13
1475: PUSH
1476: LD_INT 3
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 28
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 39
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 30
1521: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Heike , LoadVariable ( 09c_Heike_ID , - 1 ) , vehicles ) ;
1522: LD_ADDR_VAR 0 9
1526: PUSH
1527: LD_VAR 0 9
1531: PUSH
1532: LD_EXP 13
1536: PPUSH
1537: LD_STRING 09c_Heike_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2764 0 3
1558: DIFF
1559: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Givi , LoadVariable ( 09c_Givi_ID , - 1 ) , vehicles ) ;
1560: LD_ADDR_VAR 0 9
1564: PUSH
1565: LD_VAR 0 9
1569: PUSH
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING 09c_Givi_ID
1577: PPUSH
1578: LD_INT 1
1580: NEG
1581: PPUSH
1582: CALL_OW 30
1586: PPUSH
1587: LD_VAR 0 9
1591: PPUSH
1592: CALL 2764 0 3
1596: DIFF
1597: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mike , LoadVariable ( 09c_Mike_ID , - 1 ) , vehicles ) ;
1598: LD_ADDR_VAR 0 9
1602: PUSH
1603: LD_VAR 0 9
1607: PUSH
1608: LD_EXP 15
1612: PPUSH
1613: LD_STRING 09c_Mike_ID
1615: PPUSH
1616: LD_INT 1
1618: NEG
1619: PPUSH
1620: CALL_OW 30
1624: PPUSH
1625: LD_VAR 0 9
1629: PPUSH
1630: CALL 2764 0 3
1634: DIFF
1635: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Ibrahim , LoadVariable ( 09c_Ibrahim_ID , - 1 ) , vehicles ) ;
1636: LD_ADDR_VAR 0 9
1640: PUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_EXP 16
1650: PPUSH
1651: LD_STRING 09c_Ibrahim_ID
1653: PPUSH
1654: LD_INT 1
1656: NEG
1657: PPUSH
1658: CALL_OW 30
1662: PPUSH
1663: LD_VAR 0 9
1667: PPUSH
1668: CALL 2764 0 3
1672: DIFF
1673: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kamil , LoadVariable ( 09c_Kamil_ID , - 1 ) , vehicles ) ;
1674: LD_ADDR_VAR 0 9
1678: PUSH
1679: LD_VAR 0 9
1683: PUSH
1684: LD_EXP 17
1688: PPUSH
1689: LD_STRING 09c_Kamil_ID
1691: PPUSH
1692: LD_INT 1
1694: NEG
1695: PPUSH
1696: CALL_OW 30
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL 2764 0 3
1710: DIFF
1711: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kaia , LoadVariable ( 09c_Kaia_ID , - 1 ) , vehicles ) ;
1712: LD_ADDR_VAR 0 9
1716: PUSH
1717: LD_VAR 0 9
1721: PUSH
1722: LD_EXP 18
1726: PPUSH
1727: LD_STRING 09c_Kaia_ID
1729: PPUSH
1730: LD_INT 1
1732: NEG
1733: PPUSH
1734: CALL_OW 30
1738: PPUSH
1739: LD_VAR 0 9
1743: PPUSH
1744: CALL 2764 0 3
1748: DIFF
1749: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Sophia , LoadVariable ( 09c_Sophia_ID , - 1 ) , vehicles ) ;
1750: LD_ADDR_VAR 0 9
1754: PUSH
1755: LD_VAR 0 9
1759: PUSH
1760: LD_EXP 19
1764: PPUSH
1765: LD_STRING 09c_Sophia_ID
1767: PPUSH
1768: LD_INT 1
1770: NEG
1771: PPUSH
1772: CALL_OW 30
1776: PPUSH
1777: LD_VAR 0 9
1781: PPUSH
1782: CALL 2764 0 3
1786: DIFF
1787: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Markov , LoadVariable ( 09c_Markov_ID , - 1 ) , vehicles ) ;
1788: LD_ADDR_VAR 0 9
1792: PUSH
1793: LD_VAR 0 9
1797: PUSH
1798: LD_EXP 20
1802: PPUSH
1803: LD_STRING 09c_Markov_ID
1805: PPUSH
1806: LD_INT 1
1808: NEG
1809: PPUSH
1810: CALL_OW 30
1814: PPUSH
1815: LD_VAR 0 9
1819: PPUSH
1820: CALL 2764 0 3
1824: DIFF
1825: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Olaf , LoadVariable ( 09c_Olaf_ID , - 1 ) , vehicles ) ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_VAR 0 9
1835: PUSH
1836: LD_EXP 21
1840: PPUSH
1841: LD_STRING 09c_Olaf_ID
1843: PPUSH
1844: LD_INT 1
1846: NEG
1847: PPUSH
1848: CALL_OW 30
1852: PPUSH
1853: LD_VAR 0 9
1857: PPUSH
1858: CALL 2764 0 3
1862: DIFF
1863: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kurt , LoadVariable ( 09c_Kurt_ID , - 1 ) , vehicles ) ;
1864: LD_ADDR_VAR 0 9
1868: PUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_STRING 09c_Kurt_ID
1881: PPUSH
1882: LD_INT 1
1884: NEG
1885: PPUSH
1886: CALL_OW 30
1890: PPUSH
1891: LD_VAR 0 9
1895: PPUSH
1896: CALL 2764 0 3
1900: DIFF
1901: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Aviradze , LoadVariable ( 09c_Aviradze_ID , - 1 ) , vehicles ) ;
1902: LD_ADDR_VAR 0 9
1906: PUSH
1907: LD_VAR 0 9
1911: PUSH
1912: LD_EXP 23
1916: PPUSH
1917: LD_STRING 09c_Aviradze_ID
1919: PPUSH
1920: LD_INT 1
1922: NEG
1923: PPUSH
1924: CALL_OW 30
1928: PPUSH
1929: LD_VAR 0 9
1933: PPUSH
1934: CALL 2764 0 3
1938: DIFF
1939: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Schulz , LoadVariable ( 09c_Schulz_ID , 34 ) , vehicles ) ;
1940: LD_ADDR_VAR 0 9
1944: PUSH
1945: LD_VAR 0 9
1949: PUSH
1950: LD_EXP 24
1954: PPUSH
1955: LD_STRING 09c_Schulz_ID
1957: PPUSH
1958: LD_INT 34
1960: PPUSH
1961: CALL_OW 30
1965: PPUSH
1966: LD_VAR 0 9
1970: PPUSH
1971: CALL 2764 0 3
1975: DIFF
1976: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Lemmy , LoadVariable ( 09c_Lemmy_ID , 35 ) , vehicles ) ;
1977: LD_ADDR_VAR 0 9
1981: PUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_EXP 26
1991: PPUSH
1992: LD_STRING 09c_Lemmy_ID
1994: PPUSH
1995: LD_INT 35
1997: PPUSH
1998: CALL_OW 30
2002: PPUSH
2003: LD_VAR 0 9
2007: PPUSH
2008: CALL 2764 0 3
2012: DIFF
2013: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mia , LoadVariable ( 09c_Mia_ID , 36 ) , vehicles ) ;
2014: LD_ADDR_VAR 0 9
2018: PUSH
2019: LD_VAR 0 9
2023: PUSH
2024: LD_EXP 27
2028: PPUSH
2029: LD_STRING 09c_Mia_ID
2031: PPUSH
2032: LD_INT 36
2034: PPUSH
2035: CALL_OW 30
2039: PPUSH
2040: LD_VAR 0 9
2044: PPUSH
2045: CALL 2764 0 3
2049: DIFF
2050: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Nia , LoadVariable ( 09c_Nia_ID , 37 ) , vehicles ) ;
2051: LD_ADDR_VAR 0 9
2055: PUSH
2056: LD_VAR 0 9
2060: PUSH
2061: LD_EXP 28
2065: PPUSH
2066: LD_STRING 09c_Nia_ID
2068: PPUSH
2069: LD_INT 37
2071: PPUSH
2072: CALL_OW 30
2076: PPUSH
2077: LD_VAR 0 9
2081: PPUSH
2082: CALL 2764 0 3
2086: DIFF
2087: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Jenna , LoadVariable ( 09c_Jenna_ID , 38 ) , vehicles ) ;
2088: LD_ADDR_VAR 0 9
2092: PUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_EXP 29
2102: PPUSH
2103: LD_STRING 09c_Jenna_ID
2105: PPUSH
2106: LD_INT 38
2108: PPUSH
2109: CALL_OW 30
2113: PPUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: CALL 2764 0 3
2123: DIFF
2124: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Basim , LoadVariable ( 09c_Basim_ID , - 1 ) , vehicles ) ;
2125: LD_ADDR_VAR 0 9
2129: PUSH
2130: LD_VAR 0 9
2134: PUSH
2135: LD_EXP 25
2139: PPUSH
2140: LD_STRING 09c_Basim_ID
2142: PPUSH
2143: LD_INT 1
2145: NEG
2146: PPUSH
2147: CALL_OW 30
2151: PPUSH
2152: LD_VAR 0 9
2156: PPUSH
2157: CALL 2764 0 3
2161: DIFF
2162: ST_TO_ADDR
// for i := 1 to schulzSecondSquad do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_EXP 31
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2238
// vehicles := vehicles diff SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 38 + i ) , vehicles ) ;
2181: LD_ADDR_VAR 0 9
2185: PUSH
2186: LD_VAR 0 9
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_VAR 0 2
2200: ARRAY
2201: PPUSH
2202: LD_STRING 09c_random_ID_
2204: PUSH
2205: LD_VAR 0 2
2209: STR
2210: PPUSH
2211: LD_INT 38
2213: PUSH
2214: LD_VAR 0 2
2218: PLUS
2219: PPUSH
2220: CALL_OW 30
2224: PPUSH
2225: LD_VAR 0 9
2229: PPUSH
2230: CALL 2764 0 3
2234: DIFF
2235: ST_TO_ADDR
2236: GO 2178
2238: POP
2239: POP
// for i := 1 to heikeSecondSquad do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 30
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2310
// vehicles := vehicles diff SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_hrandom_ID_ & i , - 1 ) , vehicles ) ;
2258: LD_ADDR_VAR 0 9
2262: PUSH
2263: LD_VAR 0 9
2267: PUSH
2268: LD_EXP 30
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_STRING 09c_hrandom_ID_
2281: PUSH
2282: LD_VAR 0 2
2286: STR
2287: PPUSH
2288: LD_INT 1
2290: NEG
2291: PPUSH
2292: CALL_OW 30
2296: PPUSH
2297: LD_VAR 0 9
2301: PPUSH
2302: CALL 2764 0 3
2306: DIFF
2307: ST_TO_ADDR
2308: GO 2255
2310: POP
2311: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2312: LD_INT 22
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 34
2324: PUSH
2325: LD_INT 31
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: IFFALSE 2543
// begin for j := Count ( vehicles ) downto 1 do
2342: LD_ADDR_VAR 0 7
2346: PUSH
2347: DOUBLE
2348: LD_VAR 0 9
2352: PPUSH
2353: CALL 17426 0 1
2357: INC
2358: ST_TO_ADDR
2359: LD_INT 1
2361: PUSH
2362: FOR_DOWNTO
2363: IFFALSE 2541
// begin i := vehicles [ j ] ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 9
2374: PUSH
2375: LD_VAR 0 7
2379: ARRAY
2380: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2381: LD_VAR 0 2
2385: PUSH
2386: LD_INT 3
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: IFFALSE 2539
// begin uc_side := 2 ;
2395: LD_ADDR_OWVAR 20
2399: PUSH
2400: LD_INT 2
2402: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2403: LD_ADDR_OWVAR 21
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 5
2415: ARRAY
2416: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 2
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 6
2460: ARRAY
2461: PPUSH
2462: CALL 20164 0 5
// veh := CreateVehicle ;
2466: LD_ADDR_VAR 0 8
2470: PUSH
2471: CALL_OW 45
2475: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2488: LD_VAR 0 8
2492: PPUSH
2493: LD_INT 7
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2503: LD_ADDR_VAR 0 9
2507: PUSH
2508: LD_VAR 0 9
2512: PPUSH
2513: LD_VAR 0 7
2517: PPUSH
2518: CALL_OW 3
2522: ST_TO_ADDR
// Connect ( veh ) ;
2523: LD_VAR 0 8
2527: PPUSH
2528: CALL 23264 0 1
// wait ( 0 0$0.3 ) ;
2532: LD_INT 10
2534: PPUSH
2535: CALL_OW 67
// end ; end ;
2539: GO 2362
2541: POP
2542: POP
// end ; vehicles := LoadVariable ( 09_otherVehicles , [ ] ) ;
2543: LD_ADDR_VAR 0 9
2547: PUSH
2548: LD_STRING 09_otherVehicles
2550: PPUSH
2551: EMPTY
2552: PPUSH
2553: CALL_OW 30
2557: ST_TO_ADDR
// if vehicles then
2558: LD_VAR 0 9
2562: IFFALSE 2759
// begin for i in vehicles do
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_VAR 0 9
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2757
// begin uc_side := 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 5
2597: ARRAY
2598: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 2
2612: PUSH
2613: LD_INT 2
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 2
2621: PUSH
2622: LD_INT 3
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 4
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 6
2642: ARRAY
2643: PPUSH
2644: CALL 20164 0 5
// veh := CreateVehicle ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2658: LD_VAR 0 8
2662: PPUSH
2663: LD_INT 5
2665: PPUSH
2666: CALL_OW 233
// if i [ 7 ] then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 7
2677: ARRAY
2678: IFFALSE 2698
// SetMark ( veh , i [ 7 ] ) ;
2680: LD_VAR 0 8
2684: PPUSH
2685: LD_VAR 0 2
2689: PUSH
2690: LD_INT 7
2692: ARRAY
2693: PPUSH
2694: CALL_OW 242
// PlaceUnitXYD ( veh , i [ 8 ] , i [ 9 ] , i [ 10 ] , false ) ;
2698: LD_VAR 0 8
2702: PPUSH
2703: LD_VAR 0 2
2707: PUSH
2708: LD_INT 8
2710: ARRAY
2711: PPUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 9
2719: ARRAY
2720: PPUSH
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 10
2728: ARRAY
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: CALL 54765 0 5
// SetFuel ( veh , i [ 6 ] ) ;
2737: LD_VAR 0 8
2741: PPUSH
2742: LD_VAR 0 2
2746: PUSH
2747: LD_INT 6
2749: ARRAY
2750: PPUSH
2751: CALL_OW 240
// end ;
2755: GO 2574
2757: POP
2758: POP
// end ; end ;
2759: LD_VAR 0 1
2763: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
// for i in vehicles do
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3016
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 8
2789: ARRAY
2790: PUSH
2791: LD_VAR 0 2
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 5
2801: PUSH
2802: LD_INT 3
2804: ARRAY
2805: PUSH
2806: LD_INT 1
2808: EQUAL
2809: AND
2810: IFFALSE 3014
// begin result := i ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_VAR 0 5
2821: ST_TO_ADDR
// uc_side := 2 ;
2822: LD_ADDR_OWVAR 20
2826: PUSH
2827: LD_INT 2
2829: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2830: LD_ADDR_OWVAR 21
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 5
2842: ARRAY
2843: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 1
2851: ARRAY
2852: PPUSH
2853: LD_VAR 0 5
2857: PUSH
2858: LD_INT 2
2860: ARRAY
2861: PPUSH
2862: LD_VAR 0 5
2866: PUSH
2867: LD_INT 3
2869: ARRAY
2870: PPUSH
2871: LD_VAR 0 5
2875: PUSH
2876: LD_INT 4
2878: ARRAY
2879: PPUSH
2880: LD_VAR 0 5
2884: PUSH
2885: LD_INT 6
2887: ARRAY
2888: PPUSH
2889: CALL 20164 0 5
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2903: LD_VAR 0 6
2907: PPUSH
2908: LD_INT 5
2910: PPUSH
2911: CALL_OW 233
// if i [ 7 ] < 0 then
2915: LD_VAR 0 5
2919: PUSH
2920: LD_INT 7
2922: ARRAY
2923: PUSH
2924: LD_INT 0
2926: LESS
2927: IFFALSE 2947
// SetMark ( veh , i [ 7 ] ) ;
2929: LD_VAR 0 6
2933: PPUSH
2934: LD_VAR 0 5
2938: PUSH
2939: LD_INT 7
2941: ARRAY
2942: PPUSH
2943: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2947: LD_VAR 0 6
2951: PPUSH
2952: LD_INT 7
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL 51543 0 3
2962: NOT
2963: IFFALSE 2996
// begin SetDir ( unit , 5 ) ;
2965: LD_VAR 0 1
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2977: LD_VAR 0 1
2981: PPUSH
2982: LD_INT 8
2984: PPUSH
2985: LD_INT 0
2987: PPUSH
2988: CALL_OW 49
// exit ;
2992: POP
2993: POP
2994: GO 3045
// end ; PlaceHumanInUnit ( unit , veh ) ;
2996: LD_VAR 0 1
3000: PPUSH
3001: LD_VAR 0 6
3005: PPUSH
3006: CALL_OW 52
// exit ;
3010: POP
3011: POP
3012: GO 3045
// end ;
3014: GO 2779
3016: POP
3017: POP
// SetDir ( unit , 5 ) ;
3018: LD_VAR 0 1
3022: PPUSH
3023: LD_INT 5
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
3030: LD_VAR 0 1
3034: PPUSH
3035: LD_INT 8
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 49
// end ; end_of_file
3045: LD_VAR 0 4
3049: RET
// export function PrepareRussian ; begin
3050: LD_INT 0
3052: PPUSH
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
3053: LD_INT 48
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: LD_INT 2
3061: PPUSH
3062: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
3066: LD_INT 49
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 2
3074: PPUSH
3075: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
3079: LD_INT 50
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
3092: LD_INT 51
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3105: LD_INT 57
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 2
3113: PPUSH
3114: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
3118: LD_INT 48
3120: PPUSH
3121: LD_INT 6
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
3131: LD_INT 49
3133: PPUSH
3134: LD_INT 6
3136: PPUSH
3137: LD_INT 2
3139: PPUSH
3140: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
3144: LD_INT 50
3146: PPUSH
3147: LD_INT 6
3149: PPUSH
3150: LD_INT 2
3152: PPUSH
3153: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
3157: LD_INT 51
3159: PPUSH
3160: LD_INT 6
3162: PPUSH
3163: LD_INT 2
3165: PPUSH
3166: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3170: LD_INT 57
3172: PPUSH
3173: LD_INT 6
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: CALL_OW 322
// if Difficulty >= 2 then
3183: LD_OWVAR 67
3187: PUSH
3188: LD_INT 2
3190: GREATEREQUAL
3191: IFFALSE 3271
// begin SetTech ( tech_Weap2 , 3 , state_researched ) ;
3193: LD_INT 52
3195: PPUSH
3196: LD_INT 3
3198: PPUSH
3199: LD_INT 2
3201: PPUSH
3202: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3206: LD_INT 58
3208: PPUSH
3209: LD_INT 3
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3219: LD_INT 63
3221: PPUSH
3222: LD_INT 3
3224: PPUSH
3225: LD_INT 2
3227: PPUSH
3228: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3232: LD_INT 52
3234: PPUSH
3235: LD_INT 6
3237: PPUSH
3238: LD_INT 2
3240: PPUSH
3241: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3245: LD_INT 58
3247: PPUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
3258: LD_INT 63
3260: PPUSH
3261: LD_INT 6
3263: PPUSH
3264: LD_INT 2
3266: PPUSH
3267: CALL_OW 322
// end ; if Difficulty > 2 then
3271: LD_OWVAR 67
3275: PUSH
3276: LD_INT 2
3278: GREATER
3279: IFFALSE 3359
// begin SetTech ( tech_Weap3 , 3 , state_researched ) ;
3281: LD_INT 53
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: LD_INT 2
3289: PPUSH
3290: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3294: LD_INT 59
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_INT 2
3302: PPUSH
3303: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3307: LD_INT 64
3309: PPUSH
3310: LD_INT 3
3312: PPUSH
3313: LD_INT 2
3315: PPUSH
3316: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
3320: LD_INT 53
3322: PPUSH
3323: LD_INT 6
3325: PPUSH
3326: LD_INT 2
3328: PPUSH
3329: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
3333: LD_INT 59
3335: PPUSH
3336: LD_INT 6
3338: PPUSH
3339: LD_INT 2
3341: PPUSH
3342: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
3346: LD_INT 64
3348: PPUSH
3349: LD_INT 6
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 322
// end ; end ;
3359: LD_VAR 0 1
3363: RET
// export ruForces , ruConstructList , ruTanks ; export function PrepareExtraRussianBase ; var i , j , tmp , un , side , skill , b ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
3370: PPUSH
3371: PPUSH
3372: PPUSH
3373: PPUSH
// side := 6 ;
3374: LD_ADDR_VAR 0 6
3378: PUSH
3379: LD_INT 6
3381: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
3382: LD_ADDR_VAR 0 7
3386: PUSH
3387: LD_INT 7
3389: PUSH
3390: LD_INT 8
3392: PUSH
3393: LD_INT 9
3395: PUSH
3396: LD_INT 10
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_OWVAR 67
3409: ARRAY
3410: ST_TO_ADDR
// ruForces := [ ] ;
3411: LD_ADDR_EXP 34
3415: PUSH
3416: EMPTY
3417: ST_TO_ADDR
// ruConstructList := [ ] ;
3418: LD_ADDR_EXP 35
3422: PUSH
3423: EMPTY
3424: ST_TO_ADDR
// ruTanks := [ ] ;
3425: LD_ADDR_EXP 36
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// tmp := [ [ b_warehouse , 107 , 149 , 4 ] , [ b_oil_mine , 115 , 150 , 4 ] , [ b_factory , 101 , 160 , 0 ] , [ b_ext_computer , 97 , 156 , 2 ] , [ b_ext_siberium , 98 , 160 , 1 ] , [ b_ext_noncombat , 101 , 164 , 0 ] , [ b_ext_gun , 104 , 163 , 5 ] , [ b_ext_rocket , 105 , 160 , 4 ] , [ b_siberite_mine , 128 , 132 , 0 ] , [ b_lab_full , 94 , 142 , 1 , b_lab_weapon , b_lab_spacetime ] , [ b_oil_power , 93 , 137 , 0 ] , [ b_oil_power , 111 , 157 , 0 ] , [ b_oil_power , 109 , 158 , 0 ] , [ b_oil_power , 121 , 150 , 0 ] , [ b_siberite_power , 118 , 151 , 0 ] , [ b_barracks , 97 , 133 , 2 ] , [ b_barracks , 117 , 143 , 4 ] , [ b_turret , 100 , 132 , 2 ] , [ b_turret , 130 , 159 , 4 ] , [ b_turret , 131 , 155 , 4 ] , [ b_turret , 90 , 133 , 2 ] , [ b_turret , 70 , 135 , 3 ] ] ;
3432: LD_ADDR_VAR 0 4
3436: PUSH
3437: LD_INT 1
3439: PUSH
3440: LD_INT 107
3442: PUSH
3443: LD_INT 149
3445: PUSH
3446: LD_INT 4
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 29
3457: PUSH
3458: LD_INT 115
3460: PUSH
3461: LD_INT 150
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 3
3475: PUSH
3476: LD_INT 101
3478: PUSH
3479: LD_INT 160
3481: PUSH
3482: LD_INT 0
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 24
3493: PUSH
3494: LD_INT 97
3496: PUSH
3497: LD_INT 156
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 21
3511: PUSH
3512: LD_INT 98
3514: PUSH
3515: LD_INT 160
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_INT 19
3529: PUSH
3530: LD_INT 101
3532: PUSH
3533: LD_INT 164
3535: PUSH
3536: LD_INT 0
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: PUSH
3545: LD_INT 17
3547: PUSH
3548: LD_INT 104
3550: PUSH
3551: LD_INT 163
3553: PUSH
3554: LD_INT 5
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 18
3565: PUSH
3566: LD_INT 105
3568: PUSH
3569: LD_INT 160
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 30
3583: PUSH
3584: LD_INT 128
3586: PUSH
3587: LD_INT 132
3589: PUSH
3590: LD_INT 0
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 8
3601: PUSH
3602: LD_INT 94
3604: PUSH
3605: LD_INT 142
3607: PUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 10
3613: PUSH
3614: LD_INT 14
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 26
3627: PUSH
3628: LD_INT 93
3630: PUSH
3631: LD_INT 137
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 26
3645: PUSH
3646: LD_INT 111
3648: PUSH
3649: LD_INT 157
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 26
3663: PUSH
3664: LD_INT 109
3666: PUSH
3667: LD_INT 158
3669: PUSH
3670: LD_INT 0
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PUSH
3679: LD_INT 26
3681: PUSH
3682: LD_INT 121
3684: PUSH
3685: LD_INT 150
3687: PUSH
3688: LD_INT 0
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 28
3699: PUSH
3700: LD_INT 118
3702: PUSH
3703: LD_INT 151
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 5
3717: PUSH
3718: LD_INT 97
3720: PUSH
3721: LD_INT 133
3723: PUSH
3724: LD_INT 2
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 5
3735: PUSH
3736: LD_INT 117
3738: PUSH
3739: LD_INT 143
3741: PUSH
3742: LD_INT 4
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 33
3753: PUSH
3754: LD_INT 100
3756: PUSH
3757: LD_INT 132
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 33
3771: PUSH
3772: LD_INT 130
3774: PUSH
3775: LD_INT 159
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 33
3789: PUSH
3790: LD_INT 131
3792: PUSH
3793: LD_INT 155
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 33
3807: PUSH
3808: LD_INT 90
3810: PUSH
3811: LD_INT 133
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 33
3825: PUSH
3826: LD_INT 70
3828: PUSH
3829: LD_INT 135
3831: PUSH
3832: LD_INT 3
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: ST_TO_ADDR
// uc_side := side ;
3865: LD_ADDR_OWVAR 20
3869: PUSH
3870: LD_VAR 0 6
3874: ST_TO_ADDR
// uc_nation := nation_russian ;
3875: LD_ADDR_OWVAR 21
3879: PUSH
3880: LD_INT 3
3882: ST_TO_ADDR
// for i in tmp do
3883: LD_ADDR_VAR 0 2
3887: PUSH
3888: LD_VAR 0 4
3892: PUSH
3893: FOR_IN
3894: IFFALSE 4032
// begin InitBc ;
3896: CALL_OW 21
// bc_type := i [ 1 ] ;
3900: LD_ADDR_OWVAR 42
3904: PUSH
3905: LD_VAR 0 2
3909: PUSH
3910: LD_INT 1
3912: ARRAY
3913: ST_TO_ADDR
// bc_level := 6 ;
3914: LD_ADDR_OWVAR 43
3918: PUSH
3919: LD_INT 6
3921: ST_TO_ADDR
// if i > 4 then
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 4
3929: GREATER
3930: IFFALSE 3960
// begin bc_kind1 := i [ 5 ] ;
3932: LD_ADDR_OWVAR 44
3936: PUSH
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 5
3944: ARRAY
3945: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
3946: LD_ADDR_OWVAR 45
3950: PUSH
3951: LD_VAR 0 2
3955: PUSH
3956: LD_INT 6
3958: ARRAY
3959: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3960: LD_ADDR_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 2
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 3
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 4
3990: ARRAY
3991: PPUSH
3992: CALL_OW 47
3996: ST_TO_ADDR
// if i [ 1 ] in [ b_bunker , b_turret ] then
3997: LD_VAR 0 2
4001: PUSH
4002: LD_INT 1
4004: ARRAY
4005: PUSH
4006: LD_INT 32
4008: PUSH
4009: LD_INT 33
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: IN
4016: IFFALSE 4030
// PlaceWeaponTurret ( b , ru_rocket_launcher ) ;
4018: LD_VAR 0 8
4022: PPUSH
4023: LD_INT 45
4025: PPUSH
4026: CALL_OW 431
// end ;
4030: GO 3893
4032: POP
4033: POP
// InitHC_All ( ) ;
4034: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_VAR 0 6
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 30
4057: PUSH
4058: LD_INT 5
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PPUSH
4069: CALL_OW 69
4073: ST_TO_ADDR
// for i in tmp do
4074: LD_ADDR_VAR 0 2
4078: PUSH
4079: LD_VAR 0 4
4083: PUSH
4084: FOR_IN
4085: IFFALSE 4212
// begin for j := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: DOUBLE
4093: LD_INT 1
4095: DEC
4096: ST_TO_ADDR
4097: LD_INT 2
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: LD_INT 4
4105: PUSH
4106: LD_INT 4
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: PUSH
4115: LD_OWVAR 67
4119: ARRAY
4120: PUSH
4121: FOR_TO
4122: IFFALSE 4208
// begin PrepareSoldier ( false , skill ) ;
4124: LD_INT 0
4126: PPUSH
4127: LD_VAR 0 7
4131: PPUSH
4132: CALL_OW 381
// un := CreateHuman ;
4136: LD_ADDR_VAR 0 5
4140: PUSH
4141: CALL_OW 44
4145: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4146: LD_ADDR_EXP 34
4150: PUSH
4151: LD_EXP 34
4155: PPUSH
4156: LD_VAR 0 5
4160: PPUSH
4161: CALL 52625 0 2
4165: ST_TO_ADDR
// if j mod 2 = 0 then
4166: LD_VAR 0 3
4170: PUSH
4171: LD_INT 2
4173: MOD
4174: PUSH
4175: LD_INT 0
4177: EQUAL
4178: IFFALSE 4192
// SetClass ( un , class_bazooker ) ;
4180: LD_VAR 0 5
4184: PPUSH
4185: LD_INT 9
4187: PPUSH
4188: CALL_OW 336
// PlaceHumanInUnit ( un , i ) ;
4192: LD_VAR 0 5
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: CALL_OW 52
// end ;
4206: GO 4121
4208: POP
4209: POP
// end ;
4210: GO 4084
4212: POP
4213: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
4214: LD_ADDR_VAR 0 4
4218: PUSH
4219: LD_INT 22
4221: PUSH
4222: LD_VAR 0 6
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 30
4233: PUSH
4234: LD_INT 1
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: ST_TO_ADDR
// for i in tmp do
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_VAR 0 4
4259: PUSH
4260: FOR_IN
4261: IFFALSE 4485
// begin for j := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
4263: LD_ADDR_VAR 0 3
4267: PUSH
4268: DOUBLE
4269: LD_INT 1
4271: DEC
4272: ST_TO_ADDR
4273: LD_INT 3
4275: PUSH
4276: LD_INT 3
4278: PUSH
4279: LD_INT 4
4281: PUSH
4282: LD_INT 4
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: PUSH
4297: FOR_TO
4298: IFFALSE 4358
// begin PrepareEngineer ( false , skill ) ;
4300: LD_INT 0
4302: PPUSH
4303: LD_VAR 0 7
4307: PPUSH
4308: CALL_OW 382
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 5
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4322: LD_ADDR_EXP 34
4326: PUSH
4327: LD_EXP 34
4331: PPUSH
4332: LD_VAR 0 5
4336: PPUSH
4337: CALL 52625 0 2
4341: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4342: LD_VAR 0 5
4346: PPUSH
4347: LD_VAR 0 2
4351: PPUSH
4352: CALL_OW 52
// end ;
4356: GO 4297
4358: POP
4359: POP
// SetResourceType ( GetBase ( i ) , mat_cans , [ 550 , 600 , 780 , 820 ] [ Difficulty ] ) ;
4360: LD_VAR 0 2
4364: PPUSH
4365: CALL_OW 274
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_INT 550
4375: PUSH
4376: LD_INT 600
4378: PUSH
4379: LD_INT 780
4381: PUSH
4382: LD_INT 820
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_OWVAR 67
4395: ARRAY
4396: PPUSH
4397: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , [ 160 , 160 , 210 , 240 ] [ Difficulty ] ) ;
4401: LD_VAR 0 2
4405: PPUSH
4406: CALL_OW 274
4410: PPUSH
4411: LD_INT 2
4413: PPUSH
4414: LD_INT 160
4416: PUSH
4417: LD_INT 160
4419: PUSH
4420: LD_INT 210
4422: PUSH
4423: LD_INT 240
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_OWVAR 67
4436: ARRAY
4437: PPUSH
4438: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , [ 60 , 60 , 70 , 80 ] [ Difficulty ] ) ;
4442: LD_VAR 0 2
4446: PPUSH
4447: CALL_OW 274
4451: PPUSH
4452: LD_INT 3
4454: PPUSH
4455: LD_INT 60
4457: PUSH
4458: LD_INT 60
4460: PUSH
4461: LD_INT 70
4463: PUSH
4464: LD_INT 80
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: PPUSH
4479: CALL_OW 277
// end ;
4483: GO 4260
4485: POP
4486: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
4487: LD_ADDR_VAR 0 4
4491: PUSH
4492: LD_INT 22
4494: PUSH
4495: LD_VAR 0 6
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 30
4506: PUSH
4507: LD_INT 3
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: ST_TO_ADDR
// for i in tmp do
4523: LD_ADDR_VAR 0 2
4527: PUSH
4528: LD_VAR 0 4
4532: PUSH
4533: FOR_IN
4534: IFFALSE 4629
// begin for j := 1 to 6 do
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: DOUBLE
4542: LD_INT 1
4544: DEC
4545: ST_TO_ADDR
4546: LD_INT 6
4548: PUSH
4549: FOR_TO
4550: IFFALSE 4625
// begin PrepareMechanic ( false , skill ) ;
4552: LD_INT 0
4554: PPUSH
4555: LD_VAR 0 7
4559: PPUSH
4560: CALL_OW 383
// hc_attr := [ 12 , 12 ] ;
4564: LD_ADDR_OWVAR 29
4568: PUSH
4569: LD_INT 12
4571: PUSH
4572: LD_INT 12
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: ST_TO_ADDR
// un := CreateHuman ;
4579: LD_ADDR_VAR 0 5
4583: PUSH
4584: CALL_OW 44
4588: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4589: LD_ADDR_EXP 34
4593: PUSH
4594: LD_EXP 34
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: CALL 52625 0 2
4608: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4609: LD_VAR 0 5
4613: PPUSH
4614: LD_VAR 0 2
4618: PPUSH
4619: CALL_OW 52
// end ;
4623: GO 4549
4625: POP
4626: POP
// end ;
4627: GO 4533
4629: POP
4630: POP
// InitHC_All ( ) ;
4631: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
4635: LD_ADDR_VAR 0 4
4639: PUSH
4640: LD_INT 22
4642: PUSH
4643: LD_VAR 0 6
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 8
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PPUSH
4666: CALL_OW 69
4670: ST_TO_ADDR
// for i in tmp do
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_VAR 0 4
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4762
// begin for j := 1 to 2 do
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: DOUBLE
4690: LD_INT 1
4692: DEC
4693: ST_TO_ADDR
4694: LD_INT 2
4696: PUSH
4697: FOR_TO
4698: IFFALSE 4758
// begin PrepareScientist ( false , skill ) ;
4700: LD_INT 0
4702: PPUSH
4703: LD_VAR 0 7
4707: PPUSH
4708: CALL_OW 384
// un := CreateHuman ;
4712: LD_ADDR_VAR 0 5
4716: PUSH
4717: CALL_OW 44
4721: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4722: LD_ADDR_EXP 34
4726: PUSH
4727: LD_EXP 34
4731: PPUSH
4732: LD_VAR 0 5
4736: PPUSH
4737: CALL 52625 0 2
4741: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4742: LD_VAR 0 5
4746: PPUSH
4747: LD_VAR 0 2
4751: PPUSH
4752: CALL_OW 52
// end ;
4756: GO 4697
4758: POP
4759: POP
// end ;
4760: GO 4681
4762: POP
4763: POP
// end ;
4764: LD_VAR 0 1
4768: RET
// function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
4769: LD_INT 0
4771: PPUSH
4772: PPUSH
4773: PPUSH
4774: PPUSH
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// result := [ ] ;
4781: LD_ADDR_VAR 0 3
4785: PUSH
4786: EMPTY
4787: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
4788: LD_ADDR_VAR 0 8
4792: PUSH
4793: LD_INT 7
4795: PUSH
4796: LD_INT 8
4798: PUSH
4799: LD_INT 9
4801: PUSH
4802: LD_INT 10
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_OWVAR 67
4815: ARRAY
4816: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
4817: LD_ADDR_VAR 0 9
4821: PUSH
4822: LD_INT 15
4824: PUSH
4825: LD_INT 17
4827: PUSH
4828: LD_INT 19
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_VAR 0 1
4840: ARRAY
4841: ST_TO_ADDR
// parking := [ ruGatPoint1Area , ruGatPoint2Area , ruGatPoint3Area ] [ spot ] ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_INT 16
4849: PUSH
4850: LD_INT 18
4852: PUSH
4853: LD_INT 20
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: LD_VAR 0 1
4865: ARRAY
4866: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
4867: LD_ADDR_VAR 0 11
4871: PUSH
4872: LD_INT 5
4874: PUSH
4875: LD_INT 0
4877: PUSH
4878: LD_INT 2
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: ARRAY
4891: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) then
4892: LD_VAR 0 9
4896: PPUSH
4897: LD_INT 2
4899: PUSH
4900: LD_INT 22
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 22
4912: PUSH
4913: LD_INT 3
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: IFFALSE 4990
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) do
4931: LD_ADDR_VAR 0 4
4935: PUSH
4936: LD_VAR 0 9
4940: PPUSH
4941: LD_INT 2
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: PPUSH
4969: CALL_OW 70
4973: PUSH
4974: FOR_IN
4975: IFFALSE 4988
// RemoveUnit ( i ) ;
4977: LD_VAR 0 4
4981: PPUSH
4982: CALL_OW 64
4986: GO 4974
4988: POP
4989: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
4990: LD_VAR 0 9
4994: PPUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 21
5000: PUSH
5001: LD_INT 1
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 70
5030: IFFALSE 5094
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: LD_VAR 0 9
5041: PPUSH
5042: LD_INT 3
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: LD_INT 22
5061: PUSH
5062: LD_INT 2
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: PUSH
5078: FOR_IN
5079: IFFALSE 5092
// KillUnit ( i ) ;
5081: LD_VAR 0 4
5085: PPUSH
5086: CALL_OW 66
5090: GO 5078
5092: POP
5093: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
5094: LD_VAR 0 9
5098: PPUSH
5099: LD_INT 21
5101: PUSH
5102: LD_INT 1
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5190
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
5129: LD_ADDR_VAR 0 4
5133: PUSH
5134: LD_VAR 0 9
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 22
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5188
// ComMoveXY ( i , 91 , 56 ) ;
5171: LD_VAR 0 4
5175: PPUSH
5176: LD_INT 91
5178: PPUSH
5179: LD_INT 56
5181: PPUSH
5182: CALL_OW 111
5186: GO 5168
5188: POP
5189: POP
// repeat wait ( 0 0$1 ) ;
5190: LD_INT 35
5192: PPUSH
5193: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5197: LD_VAR 0 9
5201: PPUSH
5202: LD_INT 50
5204: PUSH
5205: EMPTY
5206: LIST
5207: PPUSH
5208: CALL_OW 70
5212: NOT
5213: IFFALSE 5190
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] + strength do
5215: LD_ADDR_VAR 0 4
5219: PUSH
5220: DOUBLE
5221: LD_INT 1
5223: DEC
5224: ST_TO_ADDR
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 5
5233: PUSH
5234: LD_INT 6
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: PUSH
5243: LD_OWVAR 67
5247: ARRAY
5248: PUSH
5249: LD_VAR 0 2
5253: PLUS
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5577
// begin uc_side := 3 ;
5258: LD_ADDR_OWVAR 20
5262: PUSH
5263: LD_INT 3
5265: ST_TO_ADDR
// uc_nation := nation_russian ;
5266: LD_ADDR_OWVAR 21
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
5274: LD_ADDR_VAR 0 12
5278: PUSH
5279: LD_INT 1
5281: PUSH
5282: LD_INT 3
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 12
5307: ARRAY
5308: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
5309: LD_INT 22
5311: PUSH
5312: LD_INT 24
5314: PUSH
5315: LD_INT 23
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_VAR 0 4
5327: PUSH
5328: LD_INT 3
5330: MOD
5331: PUSH
5332: LD_INT 1
5334: PLUS
5335: ARRAY
5336: PPUSH
5337: LD_INT 3
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: LD_INT 1
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: CALL_OW 12
5357: ARRAY
5358: PPUSH
5359: LD_VAR 0 12
5363: PPUSH
5364: LD_INT 45
5366: PUSH
5367: LD_INT 46
5369: PUSH
5370: LD_INT 43
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: LD_VAR 0 4
5382: PUSH
5383: LD_INT 3
5385: MOD
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: ARRAY
5391: PPUSH
5392: LD_INT 100
5394: PPUSH
5395: CALL 20164 0 5
// veh := CreateVehicle ;
5399: LD_ADDR_VAR 0 7
5403: PUSH
5404: CALL_OW 45
5408: ST_TO_ADDR
// SetDir ( veh , dir ) ;
5409: LD_VAR 0 7
5413: PPUSH
5414: LD_VAR 0 11
5418: PPUSH
5419: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
5423: LD_VAR 0 7
5427: PPUSH
5428: LD_VAR 0 9
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: CALL_OW 49
// if control = control_manual then
5440: LD_VAR 0 12
5444: PUSH
5445: LD_INT 1
5447: EQUAL
5448: IFFALSE 5516
// begin uc_side := 3 ;
5450: LD_ADDR_OWVAR 20
5454: PUSH
5455: LD_INT 3
5457: ST_TO_ADDR
// uc_nation := nation_russian ;
5458: LD_ADDR_OWVAR 21
5462: PUSH
5463: LD_INT 3
5465: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5466: LD_INT 0
5468: PPUSH
5469: LD_VAR 0 8
5473: PPUSH
5474: CALL_OW 383
// un := CreateHuman ;
5478: LD_ADDR_VAR 0 6
5482: PUSH
5483: CALL_OW 44
5487: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5488: LD_VAR 0 6
5492: PPUSH
5493: LD_VAR 0 7
5497: PPUSH
5498: CALL_OW 52
// SetTag ( un , spot ) ;
5502: LD_VAR 0 6
5506: PPUSH
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 109
// end ; repeat ComMoveToArea ( veh , parking ) ;
5516: LD_VAR 0 7
5520: PPUSH
5521: LD_VAR 0 10
5525: PPUSH
5526: CALL_OW 113
// wait ( 0 0$3 ) ;
5530: LD_INT 105
5532: PPUSH
5533: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5537: LD_VAR 0 9
5541: PPUSH
5542: LD_INT 50
5544: PUSH
5545: EMPTY
5546: LIST
5547: PPUSH
5548: CALL_OW 70
5552: NOT
5553: IFFALSE 5516
// result := Join ( result , veh ) ;
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_VAR 0 3
5564: PPUSH
5565: LD_VAR 0 7
5569: PPUSH
5570: CALL 52625 0 2
5574: ST_TO_ADDR
// end ;
5575: GO 5255
5577: POP
5578: POP
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
5579: LD_ADDR_VAR 0 4
5583: PUSH
5584: DOUBLE
5585: LD_INT 1
5587: DEC
5588: ST_TO_ADDR
5589: LD_INT 2
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: LD_INT 3
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: PUSH
5607: LD_OWVAR 67
5611: ARRAY
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5784
// begin uc_side := 3 ;
5616: LD_ADDR_OWVAR 20
5620: PUSH
5621: LD_INT 3
5623: ST_TO_ADDR
// uc_nation := nation_russian ;
5624: LD_ADDR_OWVAR 21
5628: PUSH
5629: LD_INT 3
5631: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5632: LD_INT 0
5634: PPUSH
5635: LD_VAR 0 8
5639: PPUSH
5640: CALL_OW 381
// un := CreateHuman ;
5644: LD_ADDR_VAR 0 6
5648: PUSH
5649: CALL_OW 44
5653: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5654: LD_INT 30
5656: PUSH
5657: LD_INT 40
5659: PUSH
5660: LD_INT 50
5662: PUSH
5663: LD_INT 50
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_OWVAR 67
5676: ARRAY
5677: PPUSH
5678: CALL_OW 13
5682: IFFALSE 5696
// SetClass ( un , class_bazooker ) ;
5684: LD_VAR 0 6
5688: PPUSH
5689: LD_INT 9
5691: PPUSH
5692: CALL_OW 336
// SetDir ( un , dir ) ;
5696: LD_VAR 0 6
5700: PPUSH
5701: LD_VAR 0 11
5705: PPUSH
5706: CALL_OW 233
// SetTag ( un , spot ) ;
5710: LD_VAR 0 6
5714: PPUSH
5715: LD_VAR 0 1
5719: PPUSH
5720: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
5724: LD_VAR 0 6
5728: PPUSH
5729: LD_VAR 0 9
5733: PPUSH
5734: LD_INT 0
5736: PPUSH
5737: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
5741: LD_VAR 0 6
5745: PPUSH
5746: LD_VAR 0 10
5750: PPUSH
5751: CALL_OW 113
// wait ( 0 0$1 ) ;
5755: LD_INT 35
5757: PPUSH
5758: CALL_OW 67
// result := Join ( result , un ) ;
5762: LD_ADDR_VAR 0 3
5766: PUSH
5767: LD_VAR 0 3
5771: PPUSH
5772: LD_VAR 0 6
5776: PPUSH
5777: CALL 52625 0 2
5781: ST_TO_ADDR
// end ;
5782: GO 5613
5784: POP
5785: POP
// end ;
5786: LD_VAR 0 3
5790: RET
// function PrepareRussianExtraInfantry ; var i , un ; begin
5791: LD_INT 0
5793: PPUSH
5794: PPUSH
5795: PPUSH
// result := [ ] ;
5796: LD_ADDR_VAR 0 1
5800: PUSH
5801: EMPTY
5802: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty + 1 ] do
5803: LD_ADDR_VAR 0 2
5807: PUSH
5808: DOUBLE
5809: LD_INT 1
5811: DEC
5812: ST_TO_ADDR
5813: LD_INT 3
5815: PUSH
5816: LD_INT 3
5818: PUSH
5819: LD_INT 4
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: PUSH
5827: LD_OWVAR 67
5831: PUSH
5832: LD_INT 1
5834: PLUS
5835: ARRAY
5836: PUSH
5837: FOR_TO
5838: IFFALSE 5976
// begin uc_side := 3 ;
5840: LD_ADDR_OWVAR 20
5844: PUSH
5845: LD_INT 3
5847: ST_TO_ADDR
// uc_nation := nation_russian ;
5848: LD_ADDR_OWVAR 21
5852: PUSH
5853: LD_INT 3
5855: ST_TO_ADDR
// PrepareSoldier ( false , [ 7 , 8 , 9 ] [ Difficulty + 1 ] ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_INT 7
5861: PUSH
5862: LD_INT 8
5864: PUSH
5865: LD_INT 9
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: PUSH
5873: LD_OWVAR 67
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ARRAY
5882: PPUSH
5883: CALL_OW 381
// un := CreateHuman ;
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: CALL_OW 44
5896: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5897: LD_INT 30
5899: PUSH
5900: LD_INT 40
5902: PUSH
5903: LD_INT 50
5905: PUSH
5906: LD_INT 50
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: PUSH
5915: LD_OWVAR 67
5919: ARRAY
5920: PPUSH
5921: CALL_OW 13
5925: IFFALSE 5939
// SetClass ( un , class_bazooker ) ;
5927: LD_VAR 0 3
5931: PPUSH
5932: LD_INT 9
5934: PPUSH
5935: CALL_OW 336
// PlaceUnitArea ( un , extraSpawnAttackArea , false ) ;
5939: LD_VAR 0 3
5943: PPUSH
5944: LD_INT 25
5946: PPUSH
5947: LD_INT 0
5949: PPUSH
5950: CALL_OW 49
// result := Join ( result , un ) ;
5954: LD_ADDR_VAR 0 1
5958: PUSH
5959: LD_VAR 0 1
5963: PPUSH
5964: LD_VAR 0 3
5968: PPUSH
5969: CALL 52625 0 2
5973: ST_TO_ADDR
// end ;
5974: GO 5837
5976: POP
5977: POP
// end ;
5978: LD_VAR 0 1
5982: RET
// function SendBulldozer ; var un ; begin
5983: LD_INT 0
5985: PPUSH
5986: PPUSH
// uc_side := 3 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 3
5994: ST_TO_ADDR
// uc_nation := nation_russian ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 3
6002: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
6003: LD_INT 23
6005: PPUSH
6006: LD_INT 3
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: LD_INT 53
6014: PPUSH
6015: LD_INT 100
6017: PPUSH
6018: CALL 20164 0 5
// un := CreateVehicle ;
6022: LD_ADDR_VAR 0 2
6026: PUSH
6027: CALL_OW 45
6031: ST_TO_ADDR
// PlaceUnitXYD ( un , 7 , 8 , 1 , false ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_INT 7
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_INT 1
6045: PPUSH
6046: LD_INT 0
6048: PPUSH
6049: CALL 54765 0 5
// wait ( 0 0$1 ) ;
6053: LD_INT 35
6055: PPUSH
6056: CALL_OW 67
// CutTreeInArea ( un , cutTreeWArea ) ;
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_INT 24
6067: PPUSH
6068: CALL 11500 0 2
// end ;
6072: LD_VAR 0 1
6076: RET
// every 0 0$3 trigger wave >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
6077: LD_EXP 11
6081: PUSH
6082: LD_INT 4
6084: PUSH
6085: LD_INT 5
6087: PUSH
6088: LD_INT 6
6090: PUSH
6091: LD_INT 7
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: LD_OWVAR 67
6104: ARRAY
6105: GREATEREQUAL
6106: IFFALSE 6170
6108: GO 6110
6110: DISABLE
// begin ChangeSideFog ( 3 , 2 ) ;
6111: LD_INT 3
6113: PPUSH
6114: LD_INT 2
6116: PPUSH
6117: CALL_OW 343
// repeat wait ( 0 0$1 ) ;
6121: LD_INT 35
6123: PPUSH
6124: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 ;
6128: LD_INT 22
6130: PUSH
6131: LD_INT 6
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 21
6140: PUSH
6141: LD_INT 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PPUSH
6152: CALL_OW 69
6156: PUSH
6157: LD_INT 0
6159: EQUAL
6160: IFFALSE 6121
// ruDefeated := true ;
6162: LD_ADDR_EXP 10
6166: PUSH
6167: LD_INT 1
6169: ST_TO_ADDR
// end ;
6170: END
// every 6 6$20 + 4 4$00 trigger wave < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do var i , e , attackers , extraAttackers , spot , extraSpot , paths , enemy ;
6171: LD_EXP 11
6175: PUSH
6176: LD_INT 4
6178: PUSH
6179: LD_INT 5
6181: PUSH
6182: LD_INT 6
6184: PUSH
6185: LD_INT 7
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: LD_OWVAR 67
6198: ARRAY
6199: LESS
6200: IFFALSE 7303
6202: GO 6204
6204: DISABLE
6205: LD_INT 0
6207: PPUSH
6208: PPUSH
6209: PPUSH
6210: PPUSH
6211: PPUSH
6212: PPUSH
6213: PPUSH
6214: PPUSH
// begin enable ;
6215: ENABLE
// attackers := [ ] ;
6216: LD_ADDR_VAR 0 3
6220: PUSH
6221: EMPTY
6222: ST_TO_ADDR
// extraAttackers := [ ] ;
6223: LD_ADDR_VAR 0 4
6227: PUSH
6228: EMPTY
6229: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 87 , 141 ] , [ 80 , 120 ] , [ 66 , 95 ] , [ 51 , 69 ] , [ 36 , 40 ] , [ 47 , 31 ] , [ 60 , 28 ] ] , [ [ 21 , 17 ] , [ 35 , 30 ] , [ 49 , 31 ] ] ] ;
6230: LD_ADDR_VAR 0 7
6234: PUSH
6235: LD_INT 176
6237: PUSH
6238: LD_INT 152
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 157
6247: PUSH
6248: LD_INT 122
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 146
6257: PUSH
6258: LD_INT 89
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 125
6267: PUSH
6268: LD_INT 46
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 87
6283: PUSH
6284: LD_INT 141
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 80
6293: PUSH
6294: LD_INT 120
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 66
6303: PUSH
6304: LD_INT 95
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 51
6313: PUSH
6314: LD_INT 69
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 36
6323: PUSH
6324: LD_INT 40
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 47
6333: PUSH
6334: LD_INT 31
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 60
6343: PUSH
6344: LD_INT 28
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 21
6362: PUSH
6363: LD_INT 17
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 35
6372: PUSH
6373: LD_INT 30
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 49
6382: PUSH
6383: LD_INT 31
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: ST_TO_ADDR
// wave := Inc ( wave ) ;
6400: LD_ADDR_EXP 11
6404: PUSH
6405: LD_EXP 11
6409: PPUSH
6410: CALL 53986 0 1
6414: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
6415: LD_ADDR_VAR 0 5
6419: PUSH
6420: LD_INT 1
6422: PPUSH
6423: LD_INT 3
6425: PPUSH
6426: CALL_OW 12
6430: ST_TO_ADDR
// if wave mod 2 = 0 then
6431: LD_EXP 11
6435: PUSH
6436: LD_INT 2
6438: MOD
6439: PUSH
6440: LD_INT 0
6442: EQUAL
6443: IFFALSE 6460
// strength := Inc ( strength ) ;
6445: LD_ADDR_EXP 12
6449: PUSH
6450: LD_EXP 12
6454: PPUSH
6455: CALL 53986 0 1
6459: ST_TO_ADDR
// if Count ( ListEnvironmentArea ( cutTreeWArea ) ) then
6460: LD_INT 24
6462: PPUSH
6463: CALL_OW 353
6467: PPUSH
6468: CALL 17426 0 1
6472: IFFALSE 6478
// SendBulldozer ;
6474: CALL 5983 0 0
// attackers := PrepareRussianAttack ( spot , strength ) ;
6478: LD_ADDR_VAR 0 3
6482: PUSH
6483: LD_VAR 0 5
6487: PPUSH
6488: LD_EXP 12
6492: PPUSH
6493: CALL 4769 0 2
6497: ST_TO_ADDR
// if wave + [ 2 , 2 , 3 , 3 ] [ Difficulty ] >= [ 6 , 7 , 8 , 9 ] [ Difficulty ] then
6498: LD_EXP 11
6502: PUSH
6503: LD_INT 2
6505: PUSH
6506: LD_INT 2
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 3
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_OWVAR 67
6525: ARRAY
6526: PLUS
6527: PUSH
6528: LD_INT 6
6530: PUSH
6531: LD_INT 7
6533: PUSH
6534: LD_INT 8
6536: PUSH
6537: LD_INT 9
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_OWVAR 67
6550: ARRAY
6551: GREATEREQUAL
6552: IFFALSE 6620
// begin extraSpot := spot - 1 ;
6554: LD_ADDR_VAR 0 6
6558: PUSH
6559: LD_VAR 0 5
6563: PUSH
6564: LD_INT 1
6566: MINUS
6567: ST_TO_ADDR
// if extraSpot < 1 then
6568: LD_VAR 0 6
6572: PUSH
6573: LD_INT 1
6575: LESS
6576: IFFALSE 6586
// extraSpot := 3 ;
6578: LD_ADDR_VAR 0 6
6582: PUSH
6583: LD_INT 3
6585: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , strength ) ;
6586: LD_ADDR_VAR 0 4
6590: PUSH
6591: LD_VAR 0 6
6595: PPUSH
6596: LD_EXP 12
6600: PPUSH
6601: CALL 4769 0 2
6605: ST_TO_ADDR
// if Difficulty > 1 then
6606: LD_OWVAR 67
6610: PUSH
6611: LD_INT 1
6613: GREATER
6614: IFFALSE 6620
// PrepareRussianExtraInfantry ;
6616: CALL 5791 0 0
// end ; repeat wait ( 0 0$2 ) ;
6620: LD_INT 70
6622: PPUSH
6623: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
6627: LD_ADDR_VAR 0 8
6631: PUSH
6632: LD_INT 22
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: ST_TO_ADDR
// for i in attackers do
6647: LD_ADDR_VAR 0 1
6651: PUSH
6652: LD_VAR 0 3
6656: PUSH
6657: FOR_IN
6658: IFFALSE 6963
// begin if not IsOk ( i ) then
6660: LD_VAR 0 1
6664: PPUSH
6665: CALL_OW 302
6669: NOT
6670: IFFALSE 6690
// begin attackers := attackers diff i ;
6672: LD_ADDR_VAR 0 3
6676: PUSH
6677: LD_VAR 0 3
6681: PUSH
6682: LD_VAR 0 1
6686: DIFF
6687: ST_TO_ADDR
// continue ;
6688: GO 6657
// end ; if GetType ( i ) = unit_vehicle then
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 247
6699: PUSH
6700: LD_INT 2
6702: EQUAL
6703: IFFALSE 6727
// AgressiveMove ( i , paths [ spot ] ) else
6705: LD_VAR 0 1
6709: PPUSH
6710: LD_VAR 0 7
6714: PUSH
6715: LD_VAR 0 5
6719: ARRAY
6720: PPUSH
6721: CALL 55229 0 2
6725: GO 6961
// begin if GetClass ( i ) = class_bazooker then
6727: LD_VAR 0 1
6731: PPUSH
6732: CALL_OW 257
6736: PUSH
6737: LD_INT 9
6739: EQUAL
6740: IFFALSE 6937
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
6742: LD_VAR 0 1
6746: PPUSH
6747: LD_VAR 0 8
6751: PPUSH
6752: LD_VAR 0 1
6756: PPUSH
6757: CALL_OW 74
6761: PPUSH
6762: CALL_OW 296
6766: PUSH
6767: LD_INT 12
6769: GREATER
6770: IFFALSE 6798
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
6772: LD_VAR 0 1
6776: PPUSH
6777: LD_VAR 0 8
6781: PPUSH
6782: LD_VAR 0 1
6786: PPUSH
6787: CALL_OW 74
6791: PPUSH
6792: CALL 56697 0 2
6796: GO 6935
// begin e := NearestUnitToUnit ( enemy , i ) ;
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: LD_VAR 0 8
6807: PPUSH
6808: LD_VAR 0 1
6812: PPUSH
6813: CALL_OW 74
6817: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
6818: LD_INT 1
6820: PPUSH
6821: LD_INT 3
6823: PPUSH
6824: CALL_OW 12
6828: PUSH
6829: LD_INT 1
6831: DOUBLE
6832: EQUAL
6833: IFTRUE 6837
6835: GO 6854
6837: POP
// ComAttackUnit ( i , e ) ; 2 :
6838: LD_VAR 0 1
6842: PPUSH
6843: LD_VAR 0 2
6847: PPUSH
6848: CALL_OW 115
6852: GO 6935
6854: LD_INT 2
6856: DOUBLE
6857: EQUAL
6858: IFTRUE 6862
6860: GO 6894
6862: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
6863: LD_VAR 0 1
6867: PPUSH
6868: LD_VAR 0 2
6872: PPUSH
6873: CALL_OW 250
6877: PPUSH
6878: LD_VAR 0 2
6882: PPUSH
6883: CALL_OW 251
6887: PPUSH
6888: CALL_OW 153
6892: GO 6935
6894: LD_INT 3
6896: DOUBLE
6897: EQUAL
6898: IFTRUE 6902
6900: GO 6934
6902: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
6903: LD_VAR 0 1
6907: PPUSH
6908: LD_VAR 0 2
6912: PPUSH
6913: CALL_OW 250
6917: PPUSH
6918: LD_VAR 0 2
6922: PPUSH
6923: CALL_OW 251
6927: PPUSH
6928: CALL_OW 154
6932: GO 6935
6934: POP
// end ; end else
6935: GO 6961
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6937: LD_VAR 0 1
6941: PPUSH
6942: LD_VAR 0 8
6946: PPUSH
6947: LD_VAR 0 1
6951: PPUSH
6952: CALL_OW 74
6956: PPUSH
6957: CALL 56697 0 2
// end ; end ;
6961: GO 6657
6963: POP
6964: POP
// if extraAttackers then
6965: LD_VAR 0 4
6969: IFFALSE 7289
// begin for i in extraAttackers do
6971: LD_ADDR_VAR 0 1
6975: PUSH
6976: LD_VAR 0 4
6980: PUSH
6981: FOR_IN
6982: IFFALSE 7287
// begin if not IsOk ( i ) then
6984: LD_VAR 0 1
6988: PPUSH
6989: CALL_OW 302
6993: NOT
6994: IFFALSE 7014
// begin extraAttackers := extraAttackers diff i ;
6996: LD_ADDR_VAR 0 4
7000: PUSH
7001: LD_VAR 0 4
7005: PUSH
7006: LD_VAR 0 1
7010: DIFF
7011: ST_TO_ADDR
// continue ;
7012: GO 6981
// end ; if GetType ( i ) = unit_vehicle then
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL_OW 247
7023: PUSH
7024: LD_INT 2
7026: EQUAL
7027: IFFALSE 7051
// AgressiveMove ( i , paths [ extraSpot ] ) else
7029: LD_VAR 0 1
7033: PPUSH
7034: LD_VAR 0 7
7038: PUSH
7039: LD_VAR 0 6
7043: ARRAY
7044: PPUSH
7045: CALL 55229 0 2
7049: GO 7285
// begin if GetClass ( i ) = class_bazooker then
7051: LD_VAR 0 1
7055: PPUSH
7056: CALL_OW 257
7060: PUSH
7061: LD_INT 9
7063: EQUAL
7064: IFFALSE 7261
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
7066: LD_VAR 0 1
7070: PPUSH
7071: LD_VAR 0 8
7075: PPUSH
7076: LD_VAR 0 1
7080: PPUSH
7081: CALL_OW 74
7085: PPUSH
7086: CALL_OW 296
7090: PUSH
7091: LD_INT 12
7093: GREATER
7094: IFFALSE 7122
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
7096: LD_VAR 0 1
7100: PPUSH
7101: LD_VAR 0 8
7105: PPUSH
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 74
7115: PPUSH
7116: CALL 56697 0 2
7120: GO 7259
// begin e := NearestUnitToUnit ( enemy , i ) ;
7122: LD_ADDR_VAR 0 2
7126: PUSH
7127: LD_VAR 0 8
7131: PPUSH
7132: LD_VAR 0 1
7136: PPUSH
7137: CALL_OW 74
7141: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
7142: LD_INT 1
7144: PPUSH
7145: LD_INT 3
7147: PPUSH
7148: CALL_OW 12
7152: PUSH
7153: LD_INT 1
7155: DOUBLE
7156: EQUAL
7157: IFTRUE 7161
7159: GO 7178
7161: POP
// ComAttackUnit ( i , e ) ; 2 :
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_VAR 0 2
7171: PPUSH
7172: CALL_OW 115
7176: GO 7259
7178: LD_INT 2
7180: DOUBLE
7181: EQUAL
7182: IFTRUE 7186
7184: GO 7218
7186: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 250
7201: PPUSH
7202: LD_VAR 0 2
7206: PPUSH
7207: CALL_OW 251
7211: PPUSH
7212: CALL_OW 153
7216: GO 7259
7218: LD_INT 3
7220: DOUBLE
7221: EQUAL
7222: IFTRUE 7226
7224: GO 7258
7226: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
7227: LD_VAR 0 1
7231: PPUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: CALL_OW 250
7241: PPUSH
7242: LD_VAR 0 2
7246: PPUSH
7247: CALL_OW 251
7251: PPUSH
7252: CALL_OW 154
7256: GO 7259
7258: POP
// end ; end else
7259: GO 7285
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7261: LD_VAR 0 1
7265: PPUSH
7266: LD_VAR 0 8
7270: PPUSH
7271: LD_VAR 0 1
7275: PPUSH
7276: CALL_OW 74
7280: PPUSH
7281: CALL 56697 0 2
// end ; end ;
7285: GO 6981
7287: POP
7288: POP
// end ; until not attackers and not extraAttackers ;
7289: LD_VAR 0 3
7293: NOT
7294: PUSH
7295: LD_VAR 0 4
7299: NOT
7300: AND
7301: IFFALSE 6620
// end ;
7303: PPOPN 8
7305: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] ] ) do var i , tmp , lab , eng , tag , un , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , ruBase , fac ;
7306: LD_INT 22
7308: PUSH
7309: LD_INT 6
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 50
7318: PUSH
7319: EMPTY
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 69
7330: IFFALSE 9019
7332: GO 7334
7334: DISABLE
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
7346: PPUSH
7347: PPUSH
7348: PPUSH
7349: PPUSH
7350: PPUSH
7351: PPUSH
// begin enable ;
7352: ENABLE
// ruBase := FilterUnitsInARea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_warehouse ] , [ f_ok ] ] ) ;
7353: LD_ADDR_VAR 0 14
7357: PUSH
7358: LD_INT 26
7360: PPUSH
7361: LD_INT 22
7363: PUSH
7364: LD_INT 6
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 30
7373: PUSH
7374: LD_INT 1
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: LD_INT 50
7383: PUSH
7384: EMPTY
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 70
7396: ST_TO_ADDR
// if ruBase then
7397: LD_VAR 0 14
7401: IFFALSE 7417
// ruBase := ruBase [ 1 ] ;
7403: LD_ADDR_VAR 0 14
7407: PUSH
7408: LD_VAR 0 14
7412: PUSH
7413: LD_INT 1
7415: ARRAY
7416: ST_TO_ADDR
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7417: LD_ADDR_VAR 0 15
7421: PUSH
7422: LD_INT 26
7424: PPUSH
7425: LD_INT 22
7427: PUSH
7428: LD_INT 6
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 30
7437: PUSH
7438: LD_INT 3
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 50
7447: PUSH
7448: EMPTY
7449: LIST
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 70
7460: ST_TO_ADDR
// if ruConstructList and fac then
7461: LD_EXP 35
7465: PUSH
7466: LD_VAR 0 15
7470: AND
7471: IFFALSE 7624
// if BuildingStatus ( fac [ 1 ] ) = bs_idle and CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
7473: LD_VAR 0 15
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: CALL_OW 461
7486: PUSH
7487: LD_INT 2
7489: EQUAL
7490: PUSH
7491: LD_VAR 0 15
7495: PUSH
7496: LD_INT 1
7498: ARRAY
7499: PPUSH
7500: LD_EXP 35
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: ARRAY
7512: PPUSH
7513: LD_EXP 35
7517: PUSH
7518: LD_INT 1
7520: ARRAY
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PPUSH
7526: LD_EXP 35
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: PUSH
7535: LD_INT 3
7537: ARRAY
7538: PPUSH
7539: LD_EXP 35
7543: PUSH
7544: LD_INT 1
7546: ARRAY
7547: PUSH
7548: LD_INT 4
7550: ARRAY
7551: PPUSH
7552: CALL_OW 448
7556: AND
7557: IFFALSE 7624
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
7559: LD_VAR 0 15
7563: PUSH
7564: LD_INT 1
7566: ARRAY
7567: PPUSH
7568: LD_EXP 35
7572: PUSH
7573: LD_INT 1
7575: ARRAY
7576: PUSH
7577: LD_INT 1
7579: ARRAY
7580: PPUSH
7581: LD_EXP 35
7585: PUSH
7586: LD_INT 1
7588: ARRAY
7589: PUSH
7590: LD_INT 2
7592: ARRAY
7593: PPUSH
7594: LD_EXP 35
7598: PUSH
7599: LD_INT 1
7601: ARRAY
7602: PUSH
7603: LD_INT 3
7605: ARRAY
7606: PPUSH
7607: LD_EXP 35
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PUSH
7616: LD_INT 4
7618: ARRAY
7619: PPUSH
7620: CALL_OW 125
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: LD_INT 26
7631: PPUSH
7632: LD_INT 21
7634: PUSH
7635: LD_INT 3
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 3
7644: PUSH
7645: LD_INT 24
7647: PUSH
7648: LD_INT 1000
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PPUSH
7663: CALL_OW 70
7667: ST_TO_ADDR
// cr := GetListOfCratesInArea ( crates6Area ) ;
7668: LD_ADDR_VAR 0 8
7672: PUSH
7673: LD_INT 14
7675: PPUSH
7676: CALL_OW 435
7680: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7681: LD_ADDR_VAR 0 9
7685: PUSH
7686: LD_EXP 34
7690: PPUSH
7691: LD_INT 25
7693: PUSH
7694: LD_INT 4
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 50
7703: PUSH
7704: EMPTY
7705: LIST
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PPUSH
7711: CALL_OW 72
7715: ST_TO_ADDR
// if sci then
7716: LD_VAR 0 9
7720: IFFALSE 7947
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
7722: LD_ADDR_VAR 0 11
7726: PUSH
7727: LD_EXP 34
7731: PPUSH
7732: LD_INT 95
7734: PUSH
7735: LD_INT 26
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 120
7744: PUSH
7745: LD_INT 3
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PPUSH
7756: CALL_OW 72
7760: ST_TO_ADDR
// lab := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7761: LD_ADDR_VAR 0 3
7765: PUSH
7766: LD_EXP 34
7770: PPUSH
7771: LD_INT 95
7773: PUSH
7774: LD_INT 26
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 2
7783: PUSH
7784: LD_INT 30
7786: PUSH
7787: LD_INT 6
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 30
7796: PUSH
7797: LD_INT 7
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 30
7806: PUSH
7807: LD_INT 8
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 72
7828: ST_TO_ADDR
// if hurtUnits then
7829: LD_VAR 0 11
7833: IFFALSE 7894
// begin for i in sci do
7835: LD_ADDR_VAR 0 1
7839: PUSH
7840: LD_VAR 0 9
7844: PUSH
7845: FOR_IN
7846: IFFALSE 7890
// if IsInUnit ( i ) then
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 310
7857: IFFALSE 7870
// ComExitBuilding ( i ) else
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 122
7868: GO 7888
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7870: LD_VAR 0 1
7874: PPUSH
7875: LD_VAR 0 11
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PPUSH
7884: CALL_OW 128
7888: GO 7845
7890: POP
7891: POP
// end else
7892: GO 7947
// if lab then
7894: LD_VAR 0 3
7898: IFFALSE 7947
// begin for i in sci do
7900: LD_ADDR_VAR 0 1
7904: PUSH
7905: LD_VAR 0 9
7909: PUSH
7910: FOR_IN
7911: IFFALSE 7945
// if not IsInUnit ( i ) then
7913: LD_VAR 0 1
7917: PPUSH
7918: CALL_OW 310
7922: NOT
7923: IFFALSE 7943
// ComEnterUnit ( i , lab [ 1 ] ) ;
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_VAR 0 3
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PPUSH
7939: CALL_OW 120
7943: GO 7910
7945: POP
7946: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
7947: LD_ADDR_VAR 0 4
7951: PUSH
7952: LD_EXP 34
7956: PPUSH
7957: LD_INT 25
7959: PUSH
7960: LD_INT 2
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PPUSH
7967: CALL_OW 72
7971: ST_TO_ADDR
// if eng then
7972: LD_VAR 0 4
7976: IFFALSE 8416
// begin for i in eng do
7978: LD_ADDR_VAR 0 1
7982: PUSH
7983: LD_VAR 0 4
7987: PUSH
7988: FOR_IN
7989: IFFALSE 8414
// begin tag := GetTag ( i ) ;
7991: LD_ADDR_VAR 0 5
7995: PUSH
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 110
8005: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 256
8015: PUSH
8016: LD_INT 800
8018: LESS
8019: PUSH
8020: LD_VAR 0 5
8024: PUSH
8025: LD_INT 3
8027: NONEQUAL
8028: AND
8029: IFFALSE 8067
// begin SetTag ( i , tHeal ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 3
8038: PPUSH
8039: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8043: LD_VAR 0 1
8047: PPUSH
8048: LD_INT 97
8050: PPUSH
8051: LD_INT 139
8053: PPUSH
8054: CALL_OW 111
// AddComHold ( i ) ;
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8067: LD_VAR 0 5
8071: PUSH
8072: LD_INT 3
8074: EQUAL
8075: PUSH
8076: LD_VAR 0 1
8080: PPUSH
8081: CALL_OW 256
8085: PUSH
8086: LD_INT 1000
8088: EQUAL
8089: AND
8090: IFFALSE 8104
// SetTag ( i , 0 ) ;
8092: LD_VAR 0 1
8096: PPUSH
8097: LD_INT 0
8099: PPUSH
8100: CALL_OW 109
// if not tag then
8104: LD_VAR 0 5
8108: NOT
8109: IFFALSE 8203
// begin if cr or tmp then
8111: LD_VAR 0 8
8115: PUSH
8116: LD_VAR 0 2
8120: OR
8121: IFFALSE 8177
// begin if IsInUnit ( i ) then
8123: LD_VAR 0 1
8127: PPUSH
8128: CALL_OW 310
8132: IFFALSE 8143
// ComExitBuilding ( i ) ;
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 122
// if tmp then
8143: LD_VAR 0 2
8147: IFFALSE 8163
// SetTag ( i , tRepair ) else
8149: LD_VAR 0 1
8153: PPUSH
8154: LD_INT 1
8156: PPUSH
8157: CALL_OW 109
8161: GO 8175
// SetTag ( i , tCrates ) ;
8163: LD_VAR 0 1
8167: PPUSH
8168: LD_INT 2
8170: PPUSH
8171: CALL_OW 109
// end else
8175: GO 8203
// if not IsInUnit ( i ) then
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 310
8186: NOT
8187: IFFALSE 8203
// ComEnterUnit ( i , ruBase ) ;
8189: LD_VAR 0 1
8193: PPUSH
8194: LD_VAR 0 14
8198: PPUSH
8199: CALL_OW 120
// end ; if tag = tRepair then
8203: LD_VAR 0 5
8207: PUSH
8208: LD_INT 1
8210: EQUAL
8211: IFFALSE 8291
// begin if not tmp then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8234
// begin SetTag ( i , 0 ) ;
8220: LD_VAR 0 1
8224: PPUSH
8225: LD_INT 0
8227: PPUSH
8228: CALL_OW 109
// continue ;
8232: GO 7988
// end ; if not HasTask ( i ) then
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL_OW 314
8243: NOT
8244: IFFALSE 8264
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8246: LD_VAR 0 1
8250: PPUSH
8251: LD_VAR 0 2
8255: PUSH
8256: LD_INT 1
8258: ARRAY
8259: PPUSH
8260: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
8264: LD_VAR 0 1
8268: PPUSH
8269: LD_INT 26
8271: PPUSH
8272: CALL_OW 308
8276: NOT
8277: IFFALSE 8291
// ComMoveToArea ( i , ruBaseArea ) ;
8279: LD_VAR 0 1
8283: PPUSH
8284: LD_INT 26
8286: PPUSH
8287: CALL_OW 113
// end ; if tag = tCrates then
8291: LD_VAR 0 5
8295: PUSH
8296: LD_INT 2
8298: EQUAL
8299: IFFALSE 8412
// begin if not cr then
8301: LD_VAR 0 8
8305: NOT
8306: IFFALSE 8322
// begin SetTag ( i , 0 ) ;
8308: LD_VAR 0 1
8312: PPUSH
8313: LD_INT 0
8315: PPUSH
8316: CALL_OW 109
// continue ;
8320: GO 7988
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8322: LD_VAR 0 1
8326: PPUSH
8327: CALL_OW 314
8331: NOT
8332: PUSH
8333: LD_INT 81
8335: PUSH
8336: LD_INT 6
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 92
8345: PUSH
8346: LD_VAR 0 8
8350: PUSH
8351: LD_INT 1
8353: ARRAY
8354: PUSH
8355: LD_VAR 0 8
8359: PUSH
8360: LD_INT 2
8362: ARRAY
8363: PUSH
8364: LD_INT 12
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PPUSH
8377: CALL_OW 69
8381: NOT
8382: AND
8383: IFFALSE 8412
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8385: LD_VAR 0 1
8389: PPUSH
8390: LD_VAR 0 8
8394: PUSH
8395: LD_INT 1
8397: ARRAY
8398: PPUSH
8399: LD_VAR 0 8
8403: PUSH
8404: LD_INT 2
8406: ARRAY
8407: PPUSH
8408: CALL_OW 117
// end ; end ;
8412: GO 7988
8414: POP
8415: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8416: LD_ADDR_VAR 0 10
8420: PUSH
8421: LD_EXP 34
8425: PPUSH
8426: LD_INT 2
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 1
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: LD_INT 25
8441: PUSH
8442: LD_INT 9
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 50
8456: PUSH
8457: EMPTY
8458: LIST
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PPUSH
8464: CALL_OW 72
8468: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
8469: LD_ADDR_VAR 0 12
8473: PUSH
8474: LD_INT 26
8476: PPUSH
8477: LD_INT 81
8479: PUSH
8480: LD_INT 6
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 70
8491: ST_TO_ADDR
// if sol then
8492: LD_VAR 0 10
8496: IFFALSE 9019
// begin if enemyInBase then
8498: LD_VAR 0 12
8502: IFFALSE 8721
// begin for i in sol do
8504: LD_ADDR_VAR 0 1
8508: PUSH
8509: LD_VAR 0 10
8513: PUSH
8514: FOR_IN
8515: IFFALSE 8717
// begin tw := IsInUnit ( i ) ;
8517: LD_ADDR_VAR 0 7
8521: PUSH
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 310
8531: ST_TO_ADDR
// if tw then
8532: LD_VAR 0 7
8536: IFFALSE 8626
// begin if not tw in FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8538: LD_VAR 0 7
8542: PUSH
8543: LD_INT 22
8545: PUSH
8546: LD_INT 6
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 101
8555: PUSH
8556: LD_INT 2
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: LD_INT 30
8568: PUSH
8569: LD_INT 5
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 30
8578: PUSH
8579: LD_INT 32
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 30
8588: PUSH
8589: LD_INT 31
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: PPUSH
8607: CALL_OW 69
8611: IN
8612: NOT
8613: IFFALSE 8624
// ComExitBuilding ( i ) ;
8615: LD_VAR 0 1
8619: PPUSH
8620: CALL_OW 122
// end else
8624: GO 8715
// begin un := NearestUnitToUnit ( enemyInBase , i ) ;
8626: LD_ADDR_VAR 0 6
8630: PUSH
8631: LD_VAR 0 12
8635: PPUSH
8636: LD_VAR 0 1
8640: PPUSH
8641: CALL_OW 74
8645: ST_TO_ADDR
// if GetClass ( i ) = class_bazooker and Prob ( 30 ) then
8646: LD_VAR 0 1
8650: PPUSH
8651: CALL_OW 257
8655: PUSH
8656: LD_INT 9
8658: EQUAL
8659: PUSH
8660: LD_INT 30
8662: PPUSH
8663: CALL_OW 13
8667: AND
8668: IFFALSE 8701
// ComTimeShift ( i , GetX ( un ) , GetY ( un ) ) else
8670: LD_VAR 0 1
8674: PPUSH
8675: LD_VAR 0 6
8679: PPUSH
8680: CALL_OW 250
8684: PPUSH
8685: LD_VAR 0 6
8689: PPUSH
8690: CALL_OW 251
8694: PPUSH
8695: CALL_OW 154
8699: GO 8715
// ComAttackUnit ( i , un ) ;
8701: LD_VAR 0 1
8705: PPUSH
8706: LD_VAR 0 6
8710: PPUSH
8711: CALL_OW 115
// end ; end ;
8715: GO 8514
8717: POP
8718: POP
// end else
8719: GO 9019
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8721: LD_ADDR_VAR 0 13
8725: PUSH
8726: LD_INT 26
8728: PPUSH
8729: LD_INT 3
8731: PUSH
8732: LD_INT 62
8734: PUSH
8735: EMPTY
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PUSH
8742: LD_INT 2
8744: PUSH
8745: LD_INT 30
8747: PUSH
8748: LD_INT 32
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 30
8757: PUSH
8758: LD_INT 4
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 30
8767: PUSH
8768: LD_INT 31
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 70
8789: ST_TO_ADDR
// if empty then
8790: LD_VAR 0 13
8794: IFFALSE 8811
// empty := ReverseArray ( empty ) ;
8796: LD_ADDR_VAR 0 13
8800: PUSH
8801: LD_VAR 0 13
8805: PPUSH
8806: CALL 47914 0 1
8810: ST_TO_ADDR
// for i in sol do
8811: LD_ADDR_VAR 0 1
8815: PUSH
8816: LD_VAR 0 10
8820: PUSH
8821: FOR_IN
8822: IFFALSE 9017
// begin tag := GetTag ( i ) ;
8824: LD_ADDR_VAR 0 5
8828: PUSH
8829: LD_VAR 0 1
8833: PPUSH
8834: CALL_OW 110
8838: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8839: LD_VAR 0 1
8843: PPUSH
8844: CALL_OW 256
8848: PUSH
8849: LD_INT 1000
8851: LESS
8852: PUSH
8853: LD_VAR 0 5
8857: PUSH
8858: LD_INT 3
8860: NONEQUAL
8861: AND
8862: IFFALSE 8902
// begin SetTag ( i , tHeal ) ;
8864: LD_VAR 0 1
8868: PPUSH
8869: LD_INT 3
8871: PPUSH
8872: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8876: LD_VAR 0 1
8880: PPUSH
8881: LD_INT 97
8883: PPUSH
8884: LD_INT 139
8886: PPUSH
8887: CALL_OW 111
// AddComHold ( i ) ;
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 200
// continue ;
8900: GO 8821
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 256
8911: PUSH
8912: LD_INT 1000
8914: EQUAL
8915: PUSH
8916: LD_VAR 0 5
8920: PUSH
8921: LD_INT 3
8923: EQUAL
8924: AND
8925: IFFALSE 8941
// begin SetTag ( i , 0 ) ;
8927: LD_VAR 0 1
8931: PPUSH
8932: LD_INT 0
8934: PPUSH
8935: CALL_OW 109
// continue ;
8939: GO 8821
// end ; if HasTask ( i ) then
8941: LD_VAR 0 1
8945: PPUSH
8946: CALL_OW 314
8950: IFFALSE 8954
// continue ;
8952: GO 8821
// if not IsInUnit ( i ) and not tag and empty then
8954: LD_VAR 0 1
8958: PPUSH
8959: CALL_OW 310
8963: NOT
8964: PUSH
8965: LD_VAR 0 5
8969: NOT
8970: AND
8971: PUSH
8972: LD_VAR 0 13
8976: AND
8977: IFFALSE 9015
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8979: LD_VAR 0 1
8983: PPUSH
8984: LD_VAR 0 13
8988: PUSH
8989: LD_INT 1
8991: ARRAY
8992: PPUSH
8993: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
8997: LD_ADDR_VAR 0 13
9001: PUSH
9002: LD_VAR 0 13
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: CALL_OW 3
9014: ST_TO_ADDR
// end ; end ;
9015: GO 8821
9017: POP
9018: POP
// end ; end ; end ;
9019: PPOPN 15
9021: END
// every 0 0$1 trigger ruTanks do var i , mech , enemy ;
9022: LD_EXP 36
9026: IFFALSE 9602
9028: GO 9030
9030: DISABLE
9031: LD_INT 0
9033: PPUSH
9034: PPUSH
9035: PPUSH
// begin enable ;
9036: ENABLE
// if not ruTanks then
9037: LD_EXP 36
9041: NOT
9042: IFFALSE 9046
// exit ;
9044: GO 9602
// for i in ruTanks do
9046: LD_ADDR_VAR 0 1
9050: PUSH
9051: LD_EXP 36
9055: PUSH
9056: FOR_IN
9057: IFFALSE 9600
// begin if not IsOk ( i ) or GetSide ( i ) <> 6 then
9059: LD_VAR 0 1
9063: PPUSH
9064: CALL_OW 302
9068: NOT
9069: PUSH
9070: LD_VAR 0 1
9074: PPUSH
9075: CALL_OW 255
9079: PUSH
9080: LD_INT 6
9082: NONEQUAL
9083: OR
9084: IFFALSE 9104
// begin ruTanks := ruTanks diff i ;
9086: LD_ADDR_EXP 36
9090: PUSH
9091: LD_EXP 36
9095: PUSH
9096: LD_VAR 0 1
9100: DIFF
9101: ST_TO_ADDR
// continue ;
9102: GO 9056
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 110
9113: NOT
9114: PUSH
9115: LD_VAR 0 1
9119: PPUSH
9120: CALL_OW 110
9124: PUSH
9125: LD_INT 0
9127: EQUAL
9128: OR
9129: IFFALSE 9259
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9131: LD_VAR 0 1
9135: PPUSH
9136: CALL_OW 261
9140: PUSH
9141: LD_INT 50
9143: LESS
9144: PUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 262
9154: PUSH
9155: LD_INT 1
9157: EQUAL
9158: AND
9159: IFFALSE 9218
// begin ComMoveXY ( i , 103 , 149 ) ;
9161: LD_VAR 0 1
9165: PPUSH
9166: LD_INT 103
9168: PPUSH
9169: LD_INT 149
9171: PPUSH
9172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9176: LD_INT 35
9178: PPUSH
9179: CALL_OW 67
// until GetDistUnitXY ( i , 103 , 149 ) < 4 ;
9183: LD_VAR 0 1
9187: PPUSH
9188: LD_INT 103
9190: PPUSH
9191: LD_INT 149
9193: PPUSH
9194: CALL_OW 297
9198: PUSH
9199: LD_INT 4
9201: LESS
9202: IFFALSE 9176
// SetFuel ( i , 100 ) ;
9204: LD_VAR 0 1
9208: PPUSH
9209: LD_INT 100
9211: PPUSH
9212: CALL_OW 240
// end else
9216: GO 9259
// if not IsInArea ( i , ruParkingArea ) then
9218: LD_VAR 0 1
9222: PPUSH
9223: LD_INT 27
9225: PPUSH
9226: CALL_OW 308
9230: NOT
9231: IFFALSE 9247
// ComMoveToArea ( i , ruParkingArea ) else
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 27
9240: PPUSH
9241: CALL_OW 113
9245: GO 9259
// SetTag ( i , tParking ) ;
9247: LD_VAR 0 1
9251: PPUSH
9252: LD_INT 11
9254: PPUSH
9255: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9259: LD_VAR 0 1
9263: PPUSH
9264: CALL_OW 110
9268: PUSH
9269: LD_INT 11
9271: EQUAL
9272: IFFALSE 9402
// begin if GetLives ( i ) < 650 then
9274: LD_VAR 0 1
9278: PPUSH
9279: CALL_OW 256
9283: PUSH
9284: LD_INT 650
9286: LESS
9287: IFFALSE 9379
// begin if not IsDrivenBy ( i ) then
9289: LD_VAR 0 1
9293: PPUSH
9294: CALL_OW 311
9298: NOT
9299: IFFALSE 9303
// continue ;
9301: GO 9056
// mech := IsDrivenBy ( i ) ;
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: LD_VAR 0 1
9312: PPUSH
9313: CALL_OW 311
9317: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9318: LD_VAR 0 2
9322: PPUSH
9323: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9327: LD_VAR 0 2
9331: PPUSH
9332: LD_VAR 0 1
9336: PPUSH
9337: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9341: LD_INT 35
9343: PPUSH
9344: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9348: LD_VAR 0 1
9352: PPUSH
9353: CALL_OW 256
9357: PUSH
9358: LD_INT 1000
9360: EQUAL
9361: IFFALSE 9341
// ComEnterUnit ( mech , i ) ;
9363: LD_VAR 0 2
9367: PPUSH
9368: LD_VAR 0 1
9372: PPUSH
9373: CALL_OW 120
// end else
9377: GO 9402
// if IsDrivenBy ( i ) then
9379: LD_VAR 0 1
9383: PPUSH
9384: CALL_OW 311
9388: IFFALSE 9402
// SetTag ( i , tAttack ) ;
9390: LD_VAR 0 1
9394: PPUSH
9395: LD_INT 12
9397: PPUSH
9398: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9402: LD_VAR 0 1
9406: PPUSH
9407: CALL_OW 110
9411: PUSH
9412: LD_INT 12
9414: EQUAL
9415: IFFALSE 9598
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
9417: LD_ADDR_VAR 0 3
9421: PUSH
9422: LD_INT 26
9424: PPUSH
9425: LD_INT 81
9427: PUSH
9428: LD_INT 6
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 70
9439: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9440: LD_VAR 0 1
9444: PPUSH
9445: CALL_OW 256
9449: PUSH
9450: LD_INT 650
9452: LESS
9453: IFFALSE 9478
// begin ComStop ( i ) ;
9455: LD_VAR 0 1
9459: PPUSH
9460: CALL_OW 141
// SetTag ( i , 0 ) ;
9464: LD_VAR 0 1
9468: PPUSH
9469: LD_INT 0
9471: PPUSH
9472: CALL_OW 109
// continue ;
9476: GO 9056
// end ; if enemy then
9478: LD_VAR 0 3
9482: IFFALSE 9522
// begin if not HasTask ( i ) then
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 314
9493: NOT
9494: IFFALSE 9520
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9496: LD_VAR 0 1
9500: PPUSH
9501: LD_VAR 0 3
9505: PPUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 74
9515: PPUSH
9516: CALL 56697 0 2
// end else
9520: GO 9598
// if ruTanks > 1 then
9522: LD_EXP 36
9526: PUSH
9527: LD_INT 1
9529: GREATER
9530: IFFALSE 9598
// AgressiveMove ( i , [ [ 78 , 112 ] , [ 104 , 106 ] , [ 130 , 107 ] , [ 143 , 83 ] , [ 120 , 35 ] ] ) ;
9532: LD_VAR 0 1
9536: PPUSH
9537: LD_INT 78
9539: PUSH
9540: LD_INT 112
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 104
9549: PUSH
9550: LD_INT 106
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 130
9559: PUSH
9560: LD_INT 107
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 143
9569: PUSH
9570: LD_INT 83
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 120
9579: PUSH
9580: LD_INT 35
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PPUSH
9594: CALL 55229 0 2
// end ; end ;
9598: GO 9056
9600: POP
9601: POP
// end ;
9602: PPOPN 3
9604: END
// every 0 0$1 trigger InBattle ( 6 ) or playerInBase do
9605: LD_INT 6
9607: PPUSH
9608: CALL_OW 463
9612: PUSH
9613: LD_EXP 5
9617: OR
9618: IFFALSE 9836
9620: GO 9622
9622: DISABLE
// begin wait ( 0 0$10 ) ;
9623: LD_INT 350
9625: PPUSH
9626: CALL_OW 67
// if playerInBase then
9630: LD_EXP 5
9634: IFFALSE 9643
// wait ( 3 3$00 ) ;
9636: LD_INT 6300
9638: PPUSH
9639: CALL_OW 67
// ruConstructList := [ [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] ] ;
9643: LD_ADDR_EXP 35
9647: PUSH
9648: LD_INT 21
9650: PUSH
9651: LD_INT 3
9653: PUSH
9654: LD_INT 1
9656: PUSH
9657: LD_INT 45
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 21
9668: PUSH
9669: LD_INT 3
9671: PUSH
9672: LD_INT 1
9674: PUSH
9675: LD_INT 45
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 3
9689: PUSH
9690: LD_INT 1
9692: PUSH
9693: LD_INT 45
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: ST_TO_ADDR
// if Difficulty > 1 then
9707: LD_OWVAR 67
9711: PUSH
9712: LD_INT 1
9714: GREATER
9715: IFFALSE 9750
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gatling_gun ] ) ;
9717: LD_ADDR_EXP 35
9721: PUSH
9722: LD_EXP 35
9726: PPUSH
9727: LD_INT 21
9729: PUSH
9730: LD_INT 3
9732: PUSH
9733: LD_INT 1
9735: PUSH
9736: LD_INT 43
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL 52625 0 2
9749: ST_TO_ADDR
// if Difficulty > 2 then
9750: LD_OWVAR 67
9754: PUSH
9755: LD_INT 2
9757: GREATER
9758: IFFALSE 9793
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9760: LD_ADDR_EXP 35
9764: PUSH
9765: LD_EXP 35
9769: PPUSH
9770: LD_INT 21
9772: PUSH
9773: LD_INT 3
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: LD_INT 44
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PPUSH
9788: CALL 52625 0 2
9792: ST_TO_ADDR
// if Difficulty > 3 then
9793: LD_OWVAR 67
9797: PUSH
9798: LD_INT 3
9800: GREATER
9801: IFFALSE 9836
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9803: LD_ADDR_EXP 35
9807: PUSH
9808: LD_EXP 35
9812: PPUSH
9813: LD_INT 21
9815: PUSH
9816: LD_INT 3
9818: PUSH
9819: LD_INT 1
9821: PUSH
9822: LD_INT 44
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: PPUSH
9831: CALL 52625 0 2
9835: ST_TO_ADDR
// end ; end_of_file
9836: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
9837: LD_INT 0
9839: PPUSH
9840: PPUSH
9841: PPUSH
9842: PPUSH
9843: PPUSH
9844: PPUSH
9845: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
9846: LD_ADDR_VAR 0 2
9850: PUSH
9851: LD_STRING 09_env
9853: PPUSH
9854: EMPTY
9855: PPUSH
9856: CALL_OW 30
9860: ST_TO_ADDR
// if not tmp then
9861: LD_VAR 0 2
9865: NOT
9866: IFFALSE 9870
// exit ;
9868: GO 10234
// list := ListEnvironmentArea ( mapArea ) ;
9870: LD_ADDR_VAR 0 7
9874: PUSH
9875: LD_INT 4
9877: PPUSH
9878: CALL_OW 353
9882: ST_TO_ADDR
// if not list then
9883: LD_VAR 0 7
9887: NOT
9888: IFFALSE 9892
// exit ;
9890: GO 10234
// for i in list do
9892: LD_ADDR_VAR 0 3
9896: PUSH
9897: LD_VAR 0 7
9901: PUSH
9902: FOR_IN
9903: IFFALSE 10011
// begin exist := false ;
9905: LD_ADDR_VAR 0 6
9909: PUSH
9910: LD_INT 0
9912: ST_TO_ADDR
// for j in tmp do
9913: LD_ADDR_VAR 0 4
9917: PUSH
9918: LD_VAR 0 2
9922: PUSH
9923: FOR_IN
9924: IFFALSE 9978
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
9926: LD_VAR 0 3
9930: PUSH
9931: LD_INT 1
9933: ARRAY
9934: PUSH
9935: LD_VAR 0 4
9939: PUSH
9940: LD_INT 1
9942: ARRAY
9943: EQUAL
9944: PUSH
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 2
9952: ARRAY
9953: PUSH
9954: LD_VAR 0 4
9958: PUSH
9959: LD_INT 2
9961: ARRAY
9962: EQUAL
9963: AND
9964: IFFALSE 9976
// begin exist := true ;
9966: LD_ADDR_VAR 0 6
9970: PUSH
9971: LD_INT 1
9973: ST_TO_ADDR
// break ;
9974: GO 9978
// end ;
9976: GO 9923
9978: POP
9979: POP
// if not exist then
9980: LD_VAR 0 6
9984: NOT
9985: IFFALSE 10009
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
9987: LD_VAR 0 3
9991: PUSH
9992: LD_INT 1
9994: ARRAY
9995: PPUSH
9996: LD_VAR 0 3
10000: PUSH
10001: LD_INT 2
10003: ARRAY
10004: PPUSH
10005: CALL_OW 347
// end ;
10009: GO 9902
10011: POP
10012: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
10013: LD_ADDR_VAR 0 2
10017: PUSH
10018: LD_STRING 09_animals
10020: PPUSH
10021: EMPTY
10022: PPUSH
10023: CALL_OW 30
10027: ST_TO_ADDR
// if not tmp then
10028: LD_VAR 0 2
10032: NOT
10033: IFFALSE 10037
// exit ;
10035: GO 10234
// InitHc_All ( ) ;
10037: CALL_OW 584
// for i in tmp do
10041: LD_ADDR_VAR 0 3
10045: PUSH
10046: LD_VAR 0 2
10050: PUSH
10051: FOR_IN
10052: IFFALSE 10169
// begin uc_side := 0 ;
10054: LD_ADDR_OWVAR 20
10058: PUSH
10059: LD_INT 0
10061: ST_TO_ADDR
// uc_nation := nation_nature ;
10062: LD_ADDR_OWVAR 21
10066: PUSH
10067: LD_INT 0
10069: ST_TO_ADDR
// hc_gallery :=  ;
10070: LD_ADDR_OWVAR 33
10074: PUSH
10075: LD_STRING 
10077: ST_TO_ADDR
// hc_name :=  ;
10078: LD_ADDR_OWVAR 26
10082: PUSH
10083: LD_STRING 
10085: ST_TO_ADDR
// hc_class := i [ 1 ] ;
10086: LD_ADDR_OWVAR 28
10090: PUSH
10091: LD_VAR 0 3
10095: PUSH
10096: LD_INT 1
10098: ARRAY
10099: ST_TO_ADDR
// un := CreateHuman ;
10100: LD_ADDR_VAR 0 5
10104: PUSH
10105: CALL_OW 44
10109: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
10110: LD_VAR 0 5
10114: PPUSH
10115: LD_VAR 0 3
10119: PUSH
10120: LD_INT 2
10122: ARRAY
10123: PPUSH
10124: LD_VAR 0 3
10128: PUSH
10129: LD_INT 3
10131: ARRAY
10132: PPUSH
10133: LD_VAR 0 3
10137: PUSH
10138: LD_INT 4
10140: ARRAY
10141: PPUSH
10142: LD_INT 0
10144: PPUSH
10145: CALL 54765 0 5
// SetLives ( un , i [ 5 ] ) ;
10149: LD_VAR 0 5
10153: PPUSH
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 5
10161: ARRAY
10162: PPUSH
10163: CALL_OW 234
// end ;
10167: GO 10051
10169: POP
10170: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
10171: LD_ADDR_VAR 0 3
10175: PUSH
10176: DOUBLE
10177: LD_INT 1
10179: DEC
10180: ST_TO_ADDR
10181: LD_INT 6
10183: PUSH
10184: LD_INT 5
10186: PUSH
10187: LD_INT 4
10189: PUSH
10190: LD_INT 3
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: PUSH
10199: LD_OWVAR 67
10203: ARRAY
10204: PUSH
10205: FOR_TO
10206: IFFALSE 10232
// begin PrepareApeman ( 5 ) ;
10208: LD_INT 5
10210: PPUSH
10211: CALL 48906 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10215: CALL_OW 44
10219: PPUSH
10220: LD_INT 5
10222: PPUSH
10223: LD_INT 0
10225: PPUSH
10226: CALL_OW 49
// end ;
10230: GO 10205
10232: POP
10233: POP
// end ;
10234: LD_VAR 0 1
10238: RET
// export function CreateDeposits ; var i , oil , sib ; begin
10239: LD_INT 0
10241: PPUSH
10242: PPUSH
10243: PPUSH
10244: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
10245: LD_ADDR_VAR 0 3
10249: PUSH
10250: LD_INT 91
10252: PUSH
10253: LD_INT 13
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 52
10262: PUSH
10263: LD_INT 23
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 115
10272: PUSH
10273: LD_INT 150
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
10285: LD_ADDR_VAR 0 4
10289: PUSH
10290: LD_INT 82
10292: PUSH
10293: LD_INT 42
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 128
10302: PUSH
10303: LD_INT 132
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: ST_TO_ADDR
// for i in oil do
10314: LD_ADDR_VAR 0 2
10318: PUSH
10319: LD_VAR 0 3
10323: PUSH
10324: FOR_IN
10325: IFFALSE 10404
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
10327: LD_VAR 0 2
10331: PUSH
10332: LD_INT 1
10334: ARRAY
10335: PPUSH
10336: LD_VAR 0 2
10340: PUSH
10341: LD_INT 2
10343: ARRAY
10344: PPUSH
10345: LD_INT 2
10347: PPUSH
10348: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10352: LD_VAR 0 2
10356: PUSH
10357: LD_INT 1
10359: ARRAY
10360: PPUSH
10361: LD_VAR 0 2
10365: PUSH
10366: LD_INT 2
10368: ARRAY
10369: PPUSH
10370: LD_INT 2
10372: PPUSH
10373: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10377: LD_VAR 0 2
10381: PUSH
10382: LD_INT 1
10384: ARRAY
10385: PPUSH
10386: LD_VAR 0 2
10390: PUSH
10391: LD_INT 2
10393: ARRAY
10394: PPUSH
10395: LD_INT 6
10397: PPUSH
10398: CALL_OW 441
// end ;
10402: GO 10324
10404: POP
10405: POP
// for i in sib do
10406: LD_ADDR_VAR 0 2
10410: PUSH
10411: LD_VAR 0 4
10415: PUSH
10416: FOR_IN
10417: IFFALSE 10496
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
10419: LD_VAR 0 2
10423: PUSH
10424: LD_INT 1
10426: ARRAY
10427: PPUSH
10428: LD_VAR 0 2
10432: PUSH
10433: LD_INT 2
10435: ARRAY
10436: PPUSH
10437: LD_INT 3
10439: PPUSH
10440: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10444: LD_VAR 0 2
10448: PUSH
10449: LD_INT 1
10451: ARRAY
10452: PPUSH
10453: LD_VAR 0 2
10457: PUSH
10458: LD_INT 2
10460: ARRAY
10461: PPUSH
10462: LD_INT 2
10464: PPUSH
10465: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10469: LD_VAR 0 2
10473: PUSH
10474: LD_INT 1
10476: ARRAY
10477: PPUSH
10478: LD_VAR 0 2
10482: PUSH
10483: LD_INT 2
10485: ARRAY
10486: PPUSH
10487: LD_INT 6
10489: PPUSH
10490: CALL_OW 441
// end ;
10494: GO 10416
10496: POP
10497: POP
// end ;
10498: LD_VAR 0 1
10502: RET
// export function LoadCam ; var i , tmp ; begin
10503: LD_INT 0
10505: PPUSH
10506: PPUSH
10507: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
10508: LD_ADDR_VAR 0 3
10512: PUSH
10513: LD_STRING 09_cameras
10515: PPUSH
10516: EMPTY
10517: PPUSH
10518: CALL_OW 30
10522: ST_TO_ADDR
// if not tmp then
10523: LD_VAR 0 3
10527: NOT
10528: IFFALSE 10532
// exit ;
10530: GO 10574
// for i in tmp do
10532: LD_ADDR_VAR 0 2
10536: PUSH
10537: LD_VAR 0 3
10541: PUSH
10542: FOR_IN
10543: IFFALSE 10572
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
10545: LD_VAR 0 2
10549: PUSH
10550: LD_INT 1
10552: ARRAY
10553: PPUSH
10554: LD_VAR 0 2
10558: PUSH
10559: LD_INT 2
10561: ARRAY
10562: PPUSH
10563: LD_INT 2
10565: PPUSH
10566: CALL_OW 244
10570: GO 10542
10572: POP
10573: POP
// end ;
10574: LD_VAR 0 1
10578: RET
// export function LoadTech ; var i , tmp , default ; begin
10579: LD_INT 0
10581: PPUSH
10582: PPUSH
10583: PPUSH
10584: PPUSH
// default := [ 2 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
10585: LD_ADDR_VAR 0 4
10589: PUSH
10590: LD_INT 2
10592: PUSH
10593: LD_INT 2
10595: PUSH
10596: LD_INT 0
10598: PUSH
10599: LD_INT 0
10601: PUSH
10602: LD_INT 0
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 2
10610: PUSH
10611: LD_INT 0
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: LD_INT 0
10619: PUSH
10620: LD_INT 2
10622: PUSH
10623: LD_INT 0
10625: PUSH
10626: LD_INT 0
10628: PUSH
10629: LD_INT 0
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: LD_INT 0
10637: PUSH
10638: LD_INT 2
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: LD_INT 0
10646: PUSH
10647: LD_INT 2
10649: PUSH
10650: LD_INT 1
10652: PUSH
10653: LD_INT 1
10655: PUSH
10656: LD_INT 0
10658: PUSH
10659: LD_INT 0
10661: PUSH
10662: LD_INT 0
10664: PUSH
10665: LD_INT 0
10667: PUSH
10668: LD_INT 0
10670: PUSH
10671: LD_INT 0
10673: PUSH
10674: LD_INT 0
10676: PUSH
10677: LD_INT 0
10679: PUSH
10680: LD_INT 0
10682: PUSH
10683: LD_INT 0
10685: PUSH
10686: LD_INT 0
10688: PUSH
10689: LD_INT 0
10691: PUSH
10692: LD_INT 2
10694: PUSH
10695: LD_INT 0
10697: PUSH
10698: LD_INT 0
10700: PUSH
10701: LD_INT 0
10703: PUSH
10704: LD_INT 1
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: LD_INT 1
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: LD_INT 0
10718: PUSH
10719: LD_INT 0
10721: PUSH
10722: LD_INT 2
10724: PUSH
10725: LD_INT 2
10727: PUSH
10728: LD_INT 2
10730: PUSH
10731: LD_INT 2
10733: PUSH
10734: LD_INT 2
10736: PUSH
10737: LD_INT 2
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: LD_INT 1
10745: PUSH
10746: LD_INT 0
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: LD_INT 0
10754: PUSH
10755: LD_INT 0
10757: PUSH
10758: LD_INT 0
10760: PUSH
10761: LD_INT 0
10763: PUSH
10764: LD_INT 0
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 1
10772: PUSH
10773: LD_INT 0
10775: PUSH
10776: LD_INT 0
10778: PUSH
10779: LD_INT 0
10781: PUSH
10782: LD_INT 0
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: LD_INT 0
10790: PUSH
10791: LD_INT 0
10793: PUSH
10794: LD_INT 2
10796: PUSH
10797: LD_INT 2
10799: PUSH
10800: LD_INT 0
10802: PUSH
10803: LD_INT 0
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: LD_INT 1
10811: PUSH
10812: LD_INT 1
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: LD_INT 1
10820: PUSH
10821: LD_INT 1
10823: PUSH
10824: LD_INT 1
10826: PUSH
10827: LD_INT 0
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: LD_INT 0
10847: PUSH
10848: LD_INT 0
10850: PUSH
10851: LD_INT 0
10853: PUSH
10854: LD_INT 1
10856: PUSH
10857: LD_INT 1
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: LD_INT 1
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: LD_INT 1
10877: PUSH
10878: LD_INT 1
10880: PUSH
10881: LD_INT 1
10883: PUSH
10884: LD_INT 1
10886: PUSH
10887: LD_INT 1
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: ST_TO_ADDR
// tmp := LoadVariable ( 09_tech , default ) ;
10992: LD_ADDR_VAR 0 3
10996: PUSH
10997: LD_STRING 09_tech
10999: PPUSH
11000: LD_VAR 0 4
11004: PPUSH
11005: CALL_OW 30
11009: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
11010: LD_ADDR_VAR 0 2
11014: PUSH
11015: DOUBLE
11016: LD_INT 1
11018: DEC
11019: ST_TO_ADDR
11020: LD_VAR 0 3
11024: PPUSH
11025: CALL 17426 0 1
11029: PUSH
11030: FOR_TO
11031: IFFALSE 11058
// SetTech ( i , 2 , tmp [ i ] ) ;
11033: LD_VAR 0 2
11037: PPUSH
11038: LD_INT 2
11040: PPUSH
11041: LD_VAR 0 3
11045: PUSH
11046: LD_VAR 0 2
11050: ARRAY
11051: PPUSH
11052: CALL_OW 322
11056: GO 11030
11058: POP
11059: POP
// end ;
11060: LD_VAR 0 1
11064: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
11065: LD_INT 0
11067: PPUSH
11068: PPUSH
11069: PPUSH
11070: PPUSH
11071: PPUSH
11072: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
11073: LD_ADDR_VAR 0 3
11077: PUSH
11078: LD_STRING 09_buildings
11080: PPUSH
11081: EMPTY
11082: PPUSH
11083: CALL_OW 30
11087: ST_TO_ADDR
// for i in tmp do
11088: LD_ADDR_VAR 0 2
11092: PUSH
11093: LD_VAR 0 3
11097: PUSH
11098: FOR_IN
11099: IFFALSE 11493
// begin uc_side := 2 ;
11101: LD_ADDR_OWVAR 20
11105: PUSH
11106: LD_INT 2
11108: ST_TO_ADDR
// uc_nation := nation_arabian ;
11109: LD_ADDR_OWVAR 21
11113: PUSH
11114: LD_INT 2
11116: ST_TO_ADDR
// bc_type := i [ 1 ] ;
11117: LD_ADDR_OWVAR 42
11121: PUSH
11122: LD_VAR 0 2
11126: PUSH
11127: LD_INT 1
11129: ARRAY
11130: ST_TO_ADDR
// bc_level := i [ 5 ] ;
11131: LD_ADDR_OWVAR 43
11135: PUSH
11136: LD_VAR 0 2
11140: PUSH
11141: LD_INT 5
11143: ARRAY
11144: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
11145: LD_ADDR_OWVAR 44
11149: PUSH
11150: LD_INT 9
11152: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
11153: LD_ADDR_OWVAR 45
11157: PUSH
11158: LD_INT 9
11160: ST_TO_ADDR
// if i [ 7 ] then
11161: LD_VAR 0 2
11165: PUSH
11166: LD_INT 7
11168: ARRAY
11169: IFFALSE 11209
// begin bc_kind1 := i [ 7 ] ;
11171: LD_ADDR_OWVAR 44
11175: PUSH
11176: LD_VAR 0 2
11180: PUSH
11181: LD_INT 7
11183: ARRAY
11184: ST_TO_ADDR
// if i [ 8 ] then
11185: LD_VAR 0 2
11189: PUSH
11190: LD_INT 8
11192: ARRAY
11193: IFFALSE 11209
// bc_kind2 := i [ 8 ] ;
11195: LD_ADDR_OWVAR 45
11199: PUSH
11200: LD_VAR 0 2
11204: PUSH
11205: LD_INT 8
11207: ARRAY
11208: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
11209: LD_ADDR_VAR 0 4
11213: PUSH
11214: LD_VAR 0 2
11218: PUSH
11219: LD_INT 2
11221: ARRAY
11222: PPUSH
11223: LD_VAR 0 2
11227: PUSH
11228: LD_INT 3
11230: ARRAY
11231: PPUSH
11232: LD_VAR 0 2
11236: PUSH
11237: LD_INT 4
11239: ARRAY
11240: PPUSH
11241: CALL_OW 47
11245: ST_TO_ADDR
// if i [ 8 ] then
11246: LD_VAR 0 2
11250: PUSH
11251: LD_INT 8
11253: ARRAY
11254: IFFALSE 11274
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
11256: LD_VAR 0 4
11260: PPUSH
11261: LD_VAR 0 2
11265: PUSH
11266: LD_INT 8
11268: ARRAY
11269: PPUSH
11270: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
11274: LD_VAR 0 2
11278: PUSH
11279: LD_INT 1
11281: ARRAY
11282: PUSH
11283: LD_INT 0
11285: PUSH
11286: LD_INT 1
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: IN
11293: IFFALSE 11491
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
11295: LD_ADDR_VAR 0 6
11299: PUSH
11300: LD_STRING 09_materials
11302: PPUSH
11303: LD_INT 100
11305: PUSH
11306: LD_INT 50
11308: PUSH
11309: LD_INT 30
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: PPUSH
11320: CALL_OW 30
11324: ST_TO_ADDR
// for j := 1 to 3 do
11325: LD_ADDR_VAR 0 5
11329: PUSH
11330: DOUBLE
11331: LD_INT 1
11333: DEC
11334: ST_TO_ADDR
11335: LD_INT 3
11337: PUSH
11338: FOR_TO
11339: IFFALSE 11489
// if mat [ 1 ] [ j ] then
11341: LD_VAR 0 6
11345: PUSH
11346: LD_INT 1
11348: ARRAY
11349: PUSH
11350: LD_VAR 0 5
11354: ARRAY
11355: IFFALSE 11487
// if j > 1 then
11357: LD_VAR 0 5
11361: PUSH
11362: LD_INT 1
11364: GREATER
11365: IFFALSE 11428
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 35 , 25 , 20 , 10 ] [ Difficulty ] ) else
11367: LD_VAR 0 4
11371: PPUSH
11372: CALL_OW 274
11376: PPUSH
11377: LD_VAR 0 5
11381: PPUSH
11382: LD_VAR 0 6
11386: PUSH
11387: LD_INT 1
11389: ARRAY
11390: PUSH
11391: LD_VAR 0 5
11395: ARRAY
11396: PUSH
11397: LD_INT 35
11399: PUSH
11400: LD_INT 25
11402: PUSH
11403: LD_INT 20
11405: PUSH
11406: LD_INT 10
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: LD_OWVAR 67
11419: ARRAY
11420: PLUS
11421: PPUSH
11422: CALL_OW 277
11426: GO 11487
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 350 , 250 , 150 , 100 ] [ Difficulty ] ) ;
11428: LD_VAR 0 4
11432: PPUSH
11433: CALL_OW 274
11437: PPUSH
11438: LD_VAR 0 5
11442: PPUSH
11443: LD_VAR 0 6
11447: PUSH
11448: LD_INT 1
11450: ARRAY
11451: PUSH
11452: LD_VAR 0 5
11456: ARRAY
11457: PUSH
11458: LD_INT 350
11460: PUSH
11461: LD_INT 250
11463: PUSH
11464: LD_INT 150
11466: PUSH
11467: LD_INT 100
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: PUSH
11476: LD_OWVAR 67
11480: ARRAY
11481: PLUS
11482: PPUSH
11483: CALL_OW 277
11487: GO 11338
11489: POP
11490: POP
// end ; end ;
11491: GO 11098
11493: POP
11494: POP
// end ;
11495: LD_VAR 0 1
11499: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
11500: LD_INT 0
11502: PPUSH
11503: PPUSH
// area = ListEnvironmentArea ( area ) ;
11504: LD_ADDR_VAR 0 2
11508: PUSH
11509: LD_VAR 0 2
11513: PPUSH
11514: CALL_OW 353
11518: ST_TO_ADDR
// if bulldozer > 0 then
11519: LD_VAR 0 1
11523: PUSH
11524: LD_INT 0
11526: GREATER
11527: IFFALSE 11638
// for i = area downto 1 do
11529: LD_ADDR_VAR 0 4
11533: PUSH
11534: DOUBLE
11535: LD_VAR 0 2
11539: INC
11540: ST_TO_ADDR
11541: LD_INT 1
11543: PUSH
11544: FOR_DOWNTO
11545: IFFALSE 11636
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
11547: LD_VAR 0 2
11551: PUSH
11552: LD_VAR 0 4
11556: ARRAY
11557: PUSH
11558: LD_INT 1
11560: ARRAY
11561: PPUSH
11562: LD_VAR 0 2
11566: PUSH
11567: LD_VAR 0 4
11571: ARRAY
11572: PUSH
11573: LD_INT 2
11575: ARRAY
11576: PPUSH
11577: CALL_OW 351
11581: IFFALSE 11634
// if not HasTask ( bulldozer ) then
11583: LD_VAR 0 1
11587: PPUSH
11588: CALL_OW 314
11592: NOT
11593: IFFALSE 11634
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
11595: LD_VAR 0 1
11599: PPUSH
11600: LD_VAR 0 2
11604: PUSH
11605: LD_VAR 0 4
11609: ARRAY
11610: PUSH
11611: LD_INT 1
11613: ARRAY
11614: PPUSH
11615: LD_VAR 0 2
11619: PUSH
11620: LD_VAR 0 4
11624: ARRAY
11625: PUSH
11626: LD_INT 2
11628: ARRAY
11629: PPUSH
11630: CALL_OW 171
11634: GO 11544
11636: POP
11637: POP
// end ; end_of_file
11638: LD_VAR 0 3
11642: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11643: LD_VAR 0 1
11647: PPUSH
11648: LD_VAR 0 2
11652: PPUSH
11653: CALL 72984 0 2
// if GetControl ( vehicle ) = control_apeman then
11657: LD_VAR 0 1
11661: PPUSH
11662: CALL_OW 263
11666: PUSH
11667: LD_INT 5
11669: EQUAL
11670: IFFALSE 11682
// begin apeDriver := true ;
11672: LD_ADDR_EXP 8
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// exit ;
11680: GO 11735
// end ; if GetSide ( factory ) = 6 then
11682: LD_VAR 0 2
11686: PPUSH
11687: CALL_OW 255
11691: PUSH
11692: LD_INT 6
11694: EQUAL
11695: IFFALSE 11735
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
11697: LD_ADDR_EXP 35
11701: PUSH
11702: LD_EXP 35
11706: PPUSH
11707: LD_INT 1
11709: PPUSH
11710: CALL_OW 3
11714: ST_TO_ADDR
// ruTanks := Join ( ruTanks , vehicle ) ;
11715: LD_ADDR_EXP 36
11719: PUSH
11720: LD_EXP 36
11724: PPUSH
11725: LD_VAR 0 1
11729: PPUSH
11730: CALL 52625 0 2
11734: ST_TO_ADDR
// end ; end ;
11735: PPOPN 2
11737: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) = 6 and not See ( 2 , unit ) then
11738: LD_VAR 0 2
11742: PPUSH
11743: CALL_OW 255
11747: PUSH
11748: LD_INT 6
11750: EQUAL
11751: PUSH
11752: LD_INT 2
11754: PPUSH
11755: LD_VAR 0 2
11759: PPUSH
11760: CALL_OW 292
11764: NOT
11765: AND
11766: IFFALSE 11780
// SetLives ( unit , 1000 ) ;
11768: LD_VAR 0 2
11772: PPUSH
11773: LD_INT 1000
11775: PPUSH
11776: CALL_OW 234
// end ;
11780: PPOPN 2
11782: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area , fac , arm ;
11783: LD_INT 0
11785: PPUSH
11786: PPUSH
11787: PPUSH
11788: PPUSH
// begin if GetSide ( driver ) = 3 then
11789: LD_VAR 0 1
11793: PPUSH
11794: CALL_OW 255
11798: PUSH
11799: LD_INT 3
11801: EQUAL
11802: IFFALSE 11939
// begin tag := GetTag ( driver ) ;
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL_OW 110
11818: ST_TO_ADDR
// area := [ ruSpawn1AArea , ruSpawn2AArea , ruSpawn3AArea ] [ tag ] ;
11819: LD_ADDR_VAR 0 6
11823: PUSH
11824: LD_INT 21
11826: PUSH
11827: LD_INT 22
11829: PUSH
11830: LD_INT 23
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: PUSH
11838: LD_VAR 0 5
11842: ARRAY
11843: ST_TO_ADDR
// if not area then
11844: LD_VAR 0 6
11848: NOT
11849: IFFALSE 11853
// exit ;
11851: GO 12207
// repeat ComMoveToArea ( driver , area ) ;
11853: LD_VAR 0 1
11857: PPUSH
11858: LD_VAR 0 6
11862: PPUSH
11863: CALL_OW 113
// wait ( 0 0$3 ) ;
11867: LD_INT 105
11869: PPUSH
11870: CALL_OW 67
// if not IsOk ( driver ) then
11874: LD_VAR 0 1
11878: PPUSH
11879: CALL_OW 302
11883: NOT
11884: IFFALSE 11888
// exit ;
11886: GO 12207
// until IsInArea ( driver , ruSpawn1Area ) or IsInArea ( driver , ruSpawn2Area ) or IsInArea ( driver , ruSpawn3Area ) ;
11888: LD_VAR 0 1
11892: PPUSH
11893: LD_INT 15
11895: PPUSH
11896: CALL_OW 308
11900: PUSH
11901: LD_VAR 0 1
11905: PPUSH
11906: LD_INT 17
11908: PPUSH
11909: CALL_OW 308
11913: OR
11914: PUSH
11915: LD_VAR 0 1
11919: PPUSH
11920: LD_INT 19
11922: PPUSH
11923: CALL_OW 308
11927: OR
11928: IFFALSE 11853
// RemoveUnit ( driver ) ;
11930: LD_VAR 0 1
11934: PPUSH
11935: CALL_OW 64
// end ; if GetSide ( driver ) = 6 then
11939: LD_VAR 0 1
11943: PPUSH
11944: CALL_OW 255
11948: PUSH
11949: LD_INT 6
11951: EQUAL
11952: IFFALSE 12207
// begin ComMoveXY ( driver , 97 , 139 ) ;
11954: LD_VAR 0 1
11958: PPUSH
11959: LD_INT 97
11961: PPUSH
11962: LD_INT 139
11964: PPUSH
11965: CALL_OW 111
// if GetLives ( driver ) < 1000 then
11969: LD_VAR 0 1
11973: PPUSH
11974: CALL_OW 256
11978: PUSH
11979: LD_INT 1000
11981: LESS
11982: IFFALSE 11996
// SetTag ( driver , tHeal ) ;
11984: LD_VAR 0 1
11988: PPUSH
11989: LD_INT 3
11991: PPUSH
11992: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
11996: LD_INT 35
11998: PPUSH
11999: CALL_OW 67
// if IsDead ( driver ) then
12003: LD_VAR 0 1
12007: PPUSH
12008: CALL_OW 301
12012: IFFALSE 12016
// exit ;
12014: GO 12207
// until GetLives ( driver ) = 1000 ;
12016: LD_VAR 0 1
12020: PPUSH
12021: CALL_OW 256
12025: PUSH
12026: LD_INT 1000
12028: EQUAL
12029: IFFALSE 11996
// SetTag ( driver , 0 ) ;
12031: LD_VAR 0 1
12035: PPUSH
12036: LD_INT 0
12038: PPUSH
12039: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12043: LD_ADDR_VAR 0 7
12047: PUSH
12048: LD_INT 26
12050: PPUSH
12051: LD_INT 22
12053: PUSH
12054: LD_INT 6
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 30
12063: PUSH
12064: LD_INT 3
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 50
12073: PUSH
12074: EMPTY
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 70
12086: ST_TO_ADDR
// if fac then
12087: LD_VAR 0 7
12091: IFFALSE 12113
// begin ComEnterUnit ( driver , fac [ 1 ] ) ;
12093: LD_VAR 0 1
12097: PPUSH
12098: LD_VAR 0 7
12102: PUSH
12103: LD_INT 1
12105: ARRAY
12106: PPUSH
12107: CALL_OW 120
// exit ;
12111: GO 12207
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_barracks ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
12113: LD_ADDR_VAR 0 8
12117: PUSH
12118: LD_INT 26
12120: PPUSH
12121: LD_INT 22
12123: PUSH
12124: LD_INT 6
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 5
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 3
12143: PUSH
12144: LD_INT 62
12146: PUSH
12147: EMPTY
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 50
12156: PUSH
12157: EMPTY
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 70
12170: ST_TO_ADDR
// if arm then
12171: LD_VAR 0 8
12175: IFFALSE 12207
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
12177: LD_VAR 0 1
12181: PPUSH
12182: LD_VAR 0 8
12186: PUSH
12187: LD_INT 1
12189: ARRAY
12190: PPUSH
12191: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
12195: LD_VAR 0 1
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 183
// end ; end ; end ;
12207: PPOPN 8
12209: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
12210: LD_VAR 0 3
12214: PUSH
12215: LD_INT 17
12217: EQUAL
12218: IFFALSE 12228
// kamikazeTrained := true ;
12220: LD_ADDR_EXP 6
12224: PUSH
12225: LD_INT 1
12227: ST_TO_ADDR
// end ;
12228: PPOPN 3
12230: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL 72864 0 1
// if un in ruTanks then
12240: LD_VAR 0 1
12244: PUSH
12245: LD_EXP 36
12249: IN
12250: IFFALSE 12313
// ruConstructList := Join ( ruConstructList , [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ) ;
12252: LD_ADDR_EXP 35
12256: PUSH
12257: LD_EXP 35
12261: PPUSH
12262: LD_VAR 0 1
12266: PPUSH
12267: CALL_OW 265
12271: PUSH
12272: LD_VAR 0 1
12276: PPUSH
12277: CALL_OW 262
12281: PUSH
12282: LD_VAR 0 1
12286: PPUSH
12287: CALL_OW 263
12291: PUSH
12292: LD_VAR 0 1
12296: PPUSH
12297: CALL_OW 264
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL 52625 0 2
12312: ST_TO_ADDR
// if un = Schulz then
12313: LD_VAR 0 1
12317: PUSH
12318: LD_EXP 24
12322: EQUAL
12323: IFFALSE 12332
// YouLost ( Schulz ) ;
12325: LD_STRING Schulz
12327: PPUSH
12328: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
12332: LD_VAR 0 1
12336: PUSH
12337: LD_EXP 13
12341: EQUAL
12342: PUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: CALL_OW 255
12352: PUSH
12353: LD_INT 2
12355: EQUAL
12356: AND
12357: IFFALSE 12366
// YouLost ( Heike ) ;
12359: LD_STRING Heike
12361: PPUSH
12362: CALL_OW 104
// end ; end_of_file
12366: PPOPN 1
12368: END
// export function Action ; begin
12369: LD_INT 0
12371: PPUSH
// InGameOn ;
12372: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
12376: LD_INT 1
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_INT 2
12384: PPUSH
12385: LD_INT 32963
12387: NEG
12388: PPUSH
12389: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
12393: LD_INT 1
12395: PPUSH
12396: LD_INT 1
12398: PPUSH
12399: LD_INT 2
12401: PPUSH
12402: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
12406: LD_INT 173
12408: PPUSH
12409: LD_INT 149
12411: PPUSH
12412: CALL_OW 86
// PrepareExtraRussianBase ;
12416: CALL 3364 0 0
// wait ( 0 0$2 ) ;
12420: LD_INT 70
12422: PPUSH
12423: CALL_OW 67
// InGameOff ;
12427: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
12431: LD_STRING M6
12433: PPUSH
12434: CALL_OW 337
// if Count ( UnitFilter ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] , [ f_ok ] ) ) = Count ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] ) then
12438: LD_EXP 14
12442: PUSH
12443: LD_EXP 15
12447: PUSH
12448: LD_EXP 17
12452: PUSH
12453: LD_EXP 18
12457: PUSH
12458: LD_EXP 20
12462: PUSH
12463: LD_EXP 21
12467: PUSH
12468: LD_EXP 22
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PPUSH
12482: LD_INT 50
12484: PUSH
12485: EMPTY
12486: LIST
12487: PPUSH
12488: CALL_OW 72
12492: PPUSH
12493: CALL 17426 0 1
12497: PUSH
12498: LD_EXP 14
12502: PUSH
12503: LD_EXP 15
12507: PUSH
12508: LD_EXP 17
12512: PUSH
12513: LD_EXP 18
12517: PUSH
12518: LD_EXP 20
12522: PUSH
12523: LD_EXP 21
12527: PUSH
12528: LD_EXP 22
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL 17426 0 1
12546: EQUAL
12547: IFFALSE 12556
// SetAchievement ( ACH_KNIGHT ) ;
12549: LD_STRING ACH_KNIGHT
12551: PPUSH
12552: CALL_OW 543
// SaveForQuickRestart ;
12556: CALL_OW 22
// end ;
12560: LD_VAR 0 1
12564: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
12565: LD_EXP 5
12569: PUSH
12570: LD_EXP 33
12574: PPUSH
12575: CALL_OW 302
12579: AND
12580: PUSH
12581: LD_EXP 13
12585: PPUSH
12586: CALL_OW 302
12590: AND
12591: PUSH
12592: LD_EXP 13
12596: PPUSH
12597: LD_EXP 33
12601: PPUSH
12602: CALL_OW 296
12606: PUSH
12607: LD_INT 9
12609: LESS
12610: PUSH
12611: LD_INT 22
12613: PUSH
12614: LD_INT 2
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 91
12623: PUSH
12624: LD_EXP 13
12628: PUSH
12629: LD_INT 7
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 21
12639: PUSH
12640: LD_INT 3
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: PPUSH
12652: CALL_OW 69
12656: OR
12657: AND
12658: IFFALSE 12812
12660: GO 12662
12662: DISABLE
// begin ComExit ( Rolf ) ;
12663: LD_EXP 33
12667: PPUSH
12668: CALL 53023 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
12672: LD_EXP 33
12676: PPUSH
12677: LD_EXP 13
12681: PPUSH
12682: CALL_OW 172
// InGameOn ;
12686: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
12690: LD_EXP 13
12694: PPUSH
12695: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
12699: LD_EXP 33
12703: PPUSH
12704: LD_STRING DRf-Reunion-1
12706: PPUSH
12707: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
12711: LD_EXP 33
12715: PPUSH
12716: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
12720: LD_EXP 13
12724: PPUSH
12725: LD_EXP 33
12729: PPUSH
12730: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
12734: LD_EXP 33
12738: PPUSH
12739: LD_EXP 13
12743: PPUSH
12744: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
12748: LD_EXP 13
12752: PPUSH
12753: LD_STRING DH-Reunion-2
12755: PPUSH
12756: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
12760: LD_EXP 33
12764: PPUSH
12765: LD_STRING DRf-Reunion-3
12767: PPUSH
12768: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
12772: LD_EXP 13
12776: PPUSH
12777: LD_STRING DH-Reunion-4
12779: PPUSH
12780: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
12784: LD_EXP 33
12788: PPUSH
12789: LD_STRING DRf-Reunion-5
12791: PPUSH
12792: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
12796: LD_EXP 13
12800: PPUSH
12801: LD_STRING DH-Reunion-6
12803: PPUSH
12804: CALL_OW 88
// InGameOff ;
12808: CALL_OW 9
// end ;
12812: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
12813: LD_EXP 5
12817: NOT
12818: PUSH
12819: LD_INT 22
12821: PUSH
12822: LD_INT 2
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 91
12831: PUSH
12832: LD_EXP 24
12836: PUSH
12837: LD_INT 10
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 21
12847: PUSH
12848: LD_INT 3
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 69
12864: AND
12865: IFFALSE 13652
12867: GO 12869
12869: DISABLE
// begin InGameOn ;
12870: CALL_OW 8
// ComExit ( Schulz ) ;
12874: LD_EXP 24
12878: PPUSH
12879: CALL 53023 0 1
// CenterNowOnUnits ( Schulz ) ;
12883: LD_EXP 24
12887: PPUSH
12888: CALL_OW 87
// wait ( 0 0$0.3 ) ;
12892: LD_INT 10
12894: PPUSH
12895: CALL_OW 67
// DialogueOn ;
12899: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
12903: LD_EXP 24
12907: PPUSH
12908: LD_STRING DL-Def-1
12910: PPUSH
12911: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
12915: LD_EXP 24
12919: PPUSH
12920: LD_STRING DL-Def-2
12922: PPUSH
12923: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
12927: LD_EXP 24
12931: PPUSH
12932: LD_STRING DL-Def-3
12934: PPUSH
12935: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
12939: LD_EXP 25
12943: PPUSH
12944: CALL_OW 302
12948: PUSH
12949: LD_EXP 23
12953: PPUSH
12954: CALL_OW 302
12958: AND
12959: IFFALSE 13306
// begin Say ( Basim , DBs-Def-4 ) ;
12961: LD_EXP 25
12965: PPUSH
12966: LD_STRING DBs-Def-4
12968: PPUSH
12969: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
12973: LD_EXP 25
12977: PPUSH
12978: LD_STRING DBs-Def-5
12980: PPUSH
12981: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
12985: LD_EXP 23
12989: PPUSH
12990: LD_STRING DA-Def-6
12992: PPUSH
12993: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
12997: LD_EXP 25
13001: PPUSH
13002: LD_STRING DBs-Def-7
13004: PPUSH
13005: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
13009: LD_EXP 23
13013: PPUSH
13014: LD_STRING DA-Def-8
13016: PPUSH
13017: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
13021: LD_EXP 23
13025: PPUSH
13026: LD_STRING DA-Def-9
13028: PPUSH
13029: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
13033: LD_EXP 25
13037: PPUSH
13038: LD_STRING DBs-Def-10
13040: PPUSH
13041: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
13045: LD_EXP 23
13049: PPUSH
13050: LD_STRING DA-Def-11
13052: PPUSH
13053: CALL_OW 88
// if Query ( QTech ) = 1 then
13057: LD_STRING QTech
13059: PPUSH
13060: CALL_OW 97
13064: PUSH
13065: LD_INT 1
13067: EQUAL
13068: IFFALSE 13176
// begin Say ( Schulz , DL-Tech-1 ) ;
13070: LD_EXP 24
13074: PPUSH
13075: LD_STRING DL-Tech-1
13077: PPUSH
13078: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
13082: LD_EXP 24
13086: PPUSH
13087: LD_STRING DL-Tech-2
13089: PPUSH
13090: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
13094: LD_EXP 23
13098: PPUSH
13099: LD_STRING DA-Tech-3
13101: PPUSH
13102: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
13106: LD_EXP 18
13110: PPUSH
13111: LD_STRING DK-Tech-4
13113: PPUSH
13114: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
13118: LD_EXP 18
13122: PPUSH
13123: LD_STRING DK-Tech-5
13125: PPUSH
13126: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
13130: LD_EXP 25
13134: PPUSH
13135: LD_STRING DBs-Tech-6
13137: PPUSH
13138: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
13142: LD_EXP 18
13146: PPUSH
13147: LD_STRING DK-Tech-7
13149: PPUSH
13150: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
13154: LD_INT 3
13156: PPUSH
13157: LD_INT 2
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
13167: LD_STRING M7a
13169: PPUSH
13170: CALL_OW 604
// end else
13174: GO 13304
// begin Say ( Schulz , DL-Tech-a-1 ) ;
13176: LD_EXP 24
13180: PPUSH
13181: LD_STRING DL-Tech-a-1
13183: PPUSH
13184: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
13188: LD_EXP 24
13192: PPUSH
13193: LD_STRING DL-Tech-a-2
13195: PPUSH
13196: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
13200: LD_EXP 25
13204: PPUSH
13205: LD_STRING DBs-Tech-a-3
13207: PPUSH
13208: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
13212: LD_EXP 18
13216: PPUSH
13217: LD_STRING DK-Tech-a-4
13219: PPUSH
13220: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
13224: LD_EXP 18
13228: PPUSH
13229: LD_STRING DK-Tech-a-5
13231: PPUSH
13232: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
13236: LD_EXP 23
13240: PPUSH
13241: LD_STRING DA-Tech-a-6
13243: PPUSH
13244: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
13248: LD_EXP 23
13252: PPUSH
13253: LD_STRING DA-Tech-a-7
13255: PPUSH
13256: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
13260: LD_EXP 24
13264: PPUSH
13265: LD_STRING DL-Tech-a-8
13267: PPUSH
13268: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
13272: LD_EXP 23
13276: PPUSH
13277: LD_STRING DA-Tech-a-9
13279: PPUSH
13280: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13284: LD_INT 4
13286: PPUSH
13287: LD_INT 2
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
13297: LD_STRING M7b
13299: PPUSH
13300: CALL_OW 604
// end ; end else
13304: GO 13354
// if IsOk ( Basim ) then
13306: LD_EXP 25
13310: PPUSH
13311: CALL_OW 302
13315: IFFALSE 13354
// begin Say ( Basim , DBs-Def-4 ) ;
13317: LD_EXP 25
13321: PPUSH
13322: LD_STRING DBs-Def-4
13324: PPUSH
13325: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13329: LD_EXP 25
13333: PPUSH
13334: LD_STRING DBs-Def-5
13336: PPUSH
13337: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13341: LD_INT 4
13343: PPUSH
13344: LD_INT 2
13346: PPUSH
13347: LD_INT 1
13349: PPUSH
13350: CALL_OW 322
// end ; DialogueOff ;
13354: CALL_OW 7
// InGameOff ;
13358: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
13362: LD_STRING M7
13364: PPUSH
13365: CALL_OW 337
// playerInBase := true ;
13369: LD_ADDR_EXP 5
13373: PUSH
13374: LD_INT 1
13376: ST_TO_ADDR
// wait ( 0 0$30 ) ;
13377: LD_INT 1050
13379: PPUSH
13380: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13384: LD_INT 35
13386: PPUSH
13387: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) ;
13391: LD_INT 22
13393: PUSH
13394: LD_INT 2
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 50
13403: PUSH
13404: EMPTY
13405: LIST
13406: PUSH
13407: LD_INT 3
13409: PUSH
13410: LD_INT 57
13412: PUSH
13413: EMPTY
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 30
13422: PUSH
13423: LD_INT 30
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 69
13440: IFFALSE 13384
// if IsOk ( Kurt ) then
13442: LD_EXP 22
13446: PPUSH
13447: CALL_OW 302
13451: IFFALSE 13639
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
13453: LD_INT 22
13455: PUSH
13456: LD_INT 2
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 50
13465: PUSH
13466: EMPTY
13467: LIST
13468: PUSH
13469: LD_INT 3
13471: PUSH
13472: LD_INT 57
13474: PUSH
13475: EMPTY
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 30
13484: PUSH
13485: LD_INT 30
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: PUSH
13503: LD_INT 1
13505: ARRAY
13506: PPUSH
13507: CALL_OW 87
// DialogueOn ;
13511: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
13515: LD_EXP 22
13519: PPUSH
13520: LD_STRING DKs-Med-1
13522: PPUSH
13523: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
13527: LD_EXP 22
13531: PPUSH
13532: LD_STRING DKs-Med-2
13534: PPUSH
13535: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
13539: LD_EXP 24
13543: PPUSH
13544: LD_STRING DL-Med-3
13546: PPUSH
13547: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
13551: LD_EXP 24
13555: PPUSH
13556: LD_STRING DL-Med-4
13558: PPUSH
13559: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
13563: LD_EXP 22
13567: PPUSH
13568: LD_STRING DKs-Med-5
13570: PPUSH
13571: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
13575: LD_EXP 22
13579: PPUSH
13580: LD_STRING DKs-Med-6
13582: PPUSH
13583: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
13587: LD_EXP 22
13591: PPUSH
13592: LD_STRING DKs-Med-7
13594: PPUSH
13595: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
13599: LD_EXP 22
13603: PPUSH
13604: LD_STRING DKs-Med-8
13606: PPUSH
13607: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
13611: LD_EXP 24
13615: PPUSH
13616: LD_STRING DL-Med-9
13618: PPUSH
13619: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
13623: LD_EXP 24
13627: PPUSH
13628: LD_STRING DL-Med-10
13630: PPUSH
13631: CALL_OW 88
// DialogueOff ;
13635: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
13639: LD_STRING M8-
13641: PUSH
13642: LD_OWVAR 67
13646: STR
13647: PPUSH
13648: CALL_OW 337
// end ;
13652: END
// every 0 0$1 trigger playerInBase do
13653: LD_EXP 5
13657: IFFALSE 13677
13659: GO 13661
13661: DISABLE
// begin enable ;
13662: ENABLE
// missionTime := missionTime + 0 0$1 ;
13663: LD_ADDR_EXP 9
13667: PUSH
13668: LD_EXP 9
13672: PUSH
13673: LD_INT 35
13675: PLUS
13676: ST_TO_ADDR
// end ;
13677: END
// every 0 0$2 trigger playerInBase and apeDriver do
13678: LD_EXP 5
13682: PUSH
13683: LD_EXP 8
13687: AND
13688: IFFALSE 14085
13690: GO 13692
13692: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
13693: LD_STRING M7a_out
13695: PPUSH
13696: CALL_OW 337
// wait ( 0 0$2 ) ;
13700: LD_INT 70
13702: PPUSH
13703: CALL_OW 67
// DialogueOn ;
13707: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
13711: LD_INT 22
13713: PUSH
13714: LD_INT 2
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 33
13723: PUSH
13724: LD_INT 5
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: PUSH
13740: LD_INT 1
13742: ARRAY
13743: PPUSH
13744: CALL_OW 87
// if IsOk ( Mia ) then
13748: LD_EXP 27
13752: PPUSH
13753: CALL_OW 302
13757: IFFALSE 13783
// begin Say ( Mia , DMm-Apedrive-1 ) ;
13759: LD_EXP 27
13763: PPUSH
13764: LD_STRING DMm-Apedrive-1
13766: PPUSH
13767: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
13771: LD_EXP 15
13775: PPUSH
13776: LD_STRING DM-Apedrive-2
13778: PPUSH
13779: CALL_OW 88
// end ; if IsOk ( Jenna ) then
13783: LD_EXP 29
13787: PPUSH
13788: CALL_OW 302
13792: IFFALSE 14081
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
13794: LD_EXP 29
13798: PPUSH
13799: LD_STRING DJm-Apedrive-3
13801: PPUSH
13802: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
13806: LD_EXP 29
13810: PPUSH
13811: LD_STRING DJm-Apedrive-4
13813: PPUSH
13814: CALL_OW 88
// if IsOk ( Basim ) then
13818: LD_EXP 25
13822: PPUSH
13823: CALL_OW 302
13827: IFFALSE 14081
// begin Say ( Basim , DBs-Apedrive-5 ) ;
13829: LD_EXP 25
13833: PPUSH
13834: LD_STRING DBs-Apedrive-5
13836: PPUSH
13837: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
13841: LD_EXP 25
13845: PPUSH
13846: LD_STRING DBs-Apedrive-6
13848: PPUSH
13849: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
13853: LD_EXP 29
13857: PPUSH
13858: LD_STRING DJm-Apedrive-7
13860: PPUSH
13861: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
13865: LD_EXP 25
13869: PPUSH
13870: LD_STRING DBs-Apedrive-8
13872: PPUSH
13873: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
13877: LD_EXP 29
13881: PPUSH
13882: LD_STRING DJm-Apedrive-9
13884: PPUSH
13885: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
13889: LD_EXP 25
13893: PPUSH
13894: LD_STRING DBs-Apedrive-10
13896: PPUSH
13897: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
13901: LD_EXP 29
13905: PPUSH
13906: LD_STRING DJm-Apedrive-11
13908: PPUSH
13909: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
13913: LD_EXP 18
13917: PPUSH
13918: LD_STRING DK-Apedrive-12
13920: PPUSH
13921: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
13925: LD_EXP 29
13929: PPUSH
13930: LD_STRING DJm-Apedrive-13
13932: PPUSH
13933: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
13937: LD_EXP 29
13941: PPUSH
13942: LD_STRING DJm-Apedrive-14
13944: PPUSH
13945: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
13949: LD_EXP 29
13953: PPUSH
13954: LD_STRING DJm-Apedrive-15
13956: PPUSH
13957: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
13961: LD_EXP 29
13965: PPUSH
13966: LD_STRING DJm-Apedrive-16
13968: PPUSH
13969: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
13973: LD_EXP 27
13977: PPUSH
13978: LD_STRING DMm-Apedrive-17
13980: PPUSH
13981: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
13985: LD_EXP 27
13989: PPUSH
13990: LD_STRING DMm-Apedrive-18
13992: PPUSH
13993: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
13997: LD_EXP 27
14001: PPUSH
14002: LD_STRING DMm-Apedrive-19
14004: PPUSH
14005: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
14009: LD_EXP 27
14013: PPUSH
14014: LD_STRING DMm-Apedrive-20
14016: PPUSH
14017: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
14021: LD_EXP 18
14025: PPUSH
14026: LD_STRING DK-Apedrive-21
14028: PPUSH
14029: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
14033: LD_EXP 18
14037: PPUSH
14038: LD_STRING DK-Apedrive-22
14040: PPUSH
14041: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
14045: LD_EXP 13
14049: PPUSH
14050: LD_STRING DH-Apedrive-23
14052: PPUSH
14053: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
14057: LD_EXP 26
14061: PPUSH
14062: LD_STRING DLt-Apedrive-24
14064: PPUSH
14065: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
14069: LD_EXP 26
14073: PPUSH
14074: LD_STRING DLt-Apedrive-25
14076: PPUSH
14077: CALL_OW 88
// end ; end ; DialogueOff ;
14081: CALL_OW 7
// end ;
14085: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
14086: LD_EXP 5
14090: PUSH
14091: LD_EXP 6
14095: AND
14096: IFFALSE 14108
14098: GO 14100
14100: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
14101: LD_STRING M7b_out
14103: PPUSH
14104: CALL_OW 337
14108: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
14109: LD_EXP 5
14113: PUSH
14114: LD_INT 22
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: LD_INT 3
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 3
14136: PUSH
14137: LD_INT 58
14139: PUSH
14140: EMPTY
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: LIST
14151: PPUSH
14152: CALL_OW 69
14156: AND
14157: PUSH
14158: LD_EXP 13
14162: PPUSH
14163: CALL_OW 302
14167: AND
14168: PUSH
14169: LD_EXP 24
14173: PPUSH
14174: CALL_OW 302
14178: AND
14179: IFFALSE 14352
14181: GO 14183
14183: DISABLE
// begin DialogueOn ;
14184: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
14188: LD_EXP 24
14192: PPUSH
14193: LD_STRING DL-Mort-1
14195: PPUSH
14196: CALL_OW 88
// if IsOk ( Markov ) then
14200: LD_EXP 20
14204: PPUSH
14205: CALL_OW 302
14209: IFFALSE 14262
// begin Say ( Heike , DH-Mort-2 ) ;
14211: LD_EXP 13
14215: PPUSH
14216: LD_STRING DH-Mort-2
14218: PPUSH
14219: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
14223: LD_EXP 20
14227: PPUSH
14228: LD_STRING DMar-Mort-3
14230: PPUSH
14231: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
14235: LD_EXP 20
14239: PPUSH
14240: LD_STRING DMar-Mort-4
14242: PPUSH
14243: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14247: LD_INT 88
14249: PPUSH
14250: LD_INT 2
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: CALL_OW 322
// end else
14260: GO 14348
// if IsOk ( Olaf ) then
14262: LD_EXP 21
14266: PPUSH
14267: CALL_OW 302
14271: IFFALSE 14324
// begin Say ( Heike , DH-Mort-a-2 ) ;
14273: LD_EXP 13
14277: PPUSH
14278: LD_STRING DH-Mort-a-2
14280: PPUSH
14281: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
14285: LD_EXP 21
14289: PPUSH
14290: LD_STRING DO-Mort-a-3
14292: PPUSH
14293: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
14297: LD_EXP 21
14301: PPUSH
14302: LD_STRING DO-Mort-a-4
14304: PPUSH
14305: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14309: LD_INT 88
14311: PPUSH
14312: LD_INT 2
14314: PPUSH
14315: LD_INT 1
14317: PPUSH
14318: CALL_OW 322
// end else
14322: GO 14348
// begin Say ( Heike , DH-Mort-a-5 ) ;
14324: LD_EXP 13
14328: PPUSH
14329: LD_STRING DH-Mort-a-5
14331: PPUSH
14332: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
14336: LD_EXP 13
14340: PPUSH
14341: LD_STRING DH-Mort-a-6
14343: PPUSH
14344: CALL_OW 88
// end ; DialogueOff ;
14348: CALL_OW 7
// end ;
14352: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
14353: LD_EXP 18
14357: PPUSH
14358: CALL_OW 256
14362: PUSH
14363: LD_INT 10
14365: LESS
14366: IFFALSE 14468
14368: GO 14370
14370: DISABLE
// begin DialogueOn ;
14371: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14375: LD_EXP 18
14379: PPUSH
14380: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
14384: LD_EXP 18
14388: PPUSH
14389: LD_STRING DK-Death-1
14391: PPUSH
14392: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
14396: LD_EXP 18
14400: PPUSH
14401: LD_STRING DK-Death-2
14403: PPUSH
14404: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
14408: LD_EXP 18
14412: PPUSH
14413: LD_STRING DK-Death-3
14415: PPUSH
14416: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
14420: LD_EXP 13
14424: PPUSH
14425: LD_STRING DH-Death-4
14427: PPUSH
14428: CALL_OW 88
// if IsOk ( Markov ) then
14432: LD_EXP 20
14436: PPUSH
14437: CALL_OW 302
14441: IFFALSE 14455
// Say ( Markov , DMar-Death-5 ) ;
14443: LD_EXP 20
14447: PPUSH
14448: LD_STRING DMar-Death-5
14450: PPUSH
14451: CALL_OW 88
// DialogueOff ;
14455: CALL_OW 7
// KillUnit ( Kaia ) ;
14459: LD_EXP 18
14463: PPUSH
14464: CALL_OW 66
// end ;
14468: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib ;
14469: LD_EXP 10
14473: PUSH
14474: LD_INT 81
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 50
14486: PUSH
14487: EMPTY
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PPUSH
14494: CALL_OW 69
14498: NOT
14499: AND
14500: IFFALSE 15213
14502: GO 14504
14504: DISABLE
14505: LD_INT 0
14507: PPUSH
14508: PPUSH
// begin InGameOn ;
14509: CALL_OW 8
// DialogueOn ;
14513: CALL_OW 6
// if time09 + time09c + tick < 80 80$00 then
14517: LD_EXP 3
14521: PUSH
14522: LD_EXP 4
14526: PLUS
14527: PUSH
14528: LD_OWVAR 1
14532: PLUS
14533: PUSH
14534: LD_INT 168000
14536: LESS
14537: IFFALSE 14546
// SetAchievement ( ACH_HSPEED_9 ) ;
14539: LD_STRING ACH_HSPEED_9
14541: PPUSH
14542: CALL_OW 543
// CenterOnNow ( Schulz ) ;
14546: LD_EXP 24
14550: PPUSH
14551: CALL 56578 0 1
// dwait ( 0 0$0.3 ) ;
14555: LD_INT 10
14557: PPUSH
14558: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
14562: LD_EXP 24
14566: PPUSH
14567: LD_STRING DL-End-1
14569: PPUSH
14570: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
14574: LD_EXP 13
14578: PPUSH
14579: LD_STRING DH-End-2
14581: PPUSH
14582: CALL_OW 88
// if IsOk ( Kaia ) then
14586: LD_EXP 18
14590: PPUSH
14591: CALL_OW 302
14595: IFFALSE 14657
// begin SaveCharacters ( Kaia , 09_Kaia ) ;
14597: LD_EXP 18
14601: PPUSH
14602: LD_STRING 09_Kaia
14604: PPUSH
14605: CALL_OW 38
// Say ( Kaia , DK-End-a-3 ) ;
14609: LD_EXP 18
14613: PPUSH
14614: LD_STRING DK-End-a-3
14616: PPUSH
14617: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
14621: LD_EXP 18
14625: PPUSH
14626: LD_STRING DK-End-a-4
14628: PPUSH
14629: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
14633: LD_EXP 24
14637: PPUSH
14638: LD_STRING DL-End-a-5
14640: PPUSH
14641: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
14645: LD_EXP 24
14649: PPUSH
14650: LD_STRING DL-End-a-6
14652: PPUSH
14653: CALL_OW 88
// end ; SaveCharacters ( Heike , 09_Heike ) ;
14657: LD_EXP 13
14661: PPUSH
14662: LD_STRING 09_Heike
14664: PPUSH
14665: CALL_OW 38
// SaveCharacters ( Schulz , 09_Schulz ) ;
14669: LD_EXP 24
14673: PPUSH
14674: LD_STRING 09_Schulz
14676: PPUSH
14677: CALL_OW 38
// if IsOk ( Basim ) then
14681: LD_EXP 25
14685: PPUSH
14686: CALL_OW 302
14690: IFFALSE 14704
// SaveCharacters ( Basim , 09_Basim ) ;
14692: LD_EXP 25
14696: PPUSH
14697: LD_STRING 09_Basim
14699: PPUSH
14700: CALL_OW 38
// if IsOk ( Givi ) then
14704: LD_EXP 14
14708: PPUSH
14709: CALL_OW 302
14713: IFFALSE 14727
// SaveCharacters ( Givi , 09_Givi ) ;
14715: LD_EXP 14
14719: PPUSH
14720: LD_STRING 09_Givi
14722: PPUSH
14723: CALL_OW 38
// if IsOk ( Mike ) then
14727: LD_EXP 15
14731: PPUSH
14732: CALL_OW 302
14736: IFFALSE 14750
// SaveCharacters ( Mike , 09_Mike ) ;
14738: LD_EXP 15
14742: PPUSH
14743: LD_STRING 09_Mike
14745: PPUSH
14746: CALL_OW 38
// if IsOk ( Ibrahim ) then
14750: LD_EXP 16
14754: PPUSH
14755: CALL_OW 302
14759: IFFALSE 14773
// SaveCharacters ( Ibrahim , 09_Ibrahim ) ;
14761: LD_EXP 16
14765: PPUSH
14766: LD_STRING 09_Ibrahim
14768: PPUSH
14769: CALL_OW 38
// if IsOk ( Kamil ) then
14773: LD_EXP 17
14777: PPUSH
14778: CALL_OW 302
14782: IFFALSE 14796
// SaveCharacters ( Kamil , 09_Kamil ) ;
14784: LD_EXP 17
14788: PPUSH
14789: LD_STRING 09_Kamil
14791: PPUSH
14792: CALL_OW 38
// if IsOk ( Sophia ) then
14796: LD_EXP 19
14800: PPUSH
14801: CALL_OW 302
14805: IFFALSE 14819
// SaveCharacters ( Sophia , 09_Sophia ) ;
14807: LD_EXP 19
14811: PPUSH
14812: LD_STRING 09_Sophia
14814: PPUSH
14815: CALL_OW 38
// if IsOk ( Markov ) then
14819: LD_EXP 20
14823: PPUSH
14824: CALL_OW 302
14828: IFFALSE 14842
// SaveCharacters ( Markov , 09_Markov ) ;
14830: LD_EXP 20
14834: PPUSH
14835: LD_STRING 09_Markov
14837: PPUSH
14838: CALL_OW 38
// if IsOk ( Olaf ) then
14842: LD_EXP 21
14846: PPUSH
14847: CALL_OW 302
14851: IFFALSE 14865
// SaveCharacters ( Olaf , 09_Olaf ) ;
14853: LD_EXP 21
14857: PPUSH
14858: LD_STRING 09_Olaf
14860: PPUSH
14861: CALL_OW 38
// if IsOk ( Kurt ) then
14865: LD_EXP 22
14869: PPUSH
14870: CALL_OW 302
14874: IFFALSE 14888
// SaveCharacters ( Kurt , 09_Kurt ) ;
14876: LD_EXP 22
14880: PPUSH
14881: LD_STRING 09_Kurt
14883: PPUSH
14884: CALL_OW 38
// if IsOk ( Aviradze ) then
14888: LD_EXP 23
14892: PPUSH
14893: CALL_OW 302
14897: IFFALSE 14911
// SaveCharacters ( Aviradze , 09_Aviradze ) ;
14899: LD_EXP 23
14903: PPUSH
14904: LD_STRING 09_Aviradze
14906: PPUSH
14907: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09_heikeSecondSquad ) ;
14911: LD_EXP 30
14915: PPUSH
14916: LD_INT 50
14918: PUSH
14919: EMPTY
14920: LIST
14921: PPUSH
14922: CALL_OW 72
14926: PPUSH
14927: LD_STRING 09_heikeSecondSquad
14929: PPUSH
14930: CALL_OW 38
// sib := 0 ;
14934: LD_ADDR_VAR 0 2
14938: PUSH
14939: LD_INT 0
14941: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
14942: LD_ADDR_VAR 0 1
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 2
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 2
14959: PUSH
14960: LD_INT 30
14962: PUSH
14963: LD_INT 0
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 30
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: LIST
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PPUSH
14989: CALL_OW 69
14993: PUSH
14994: FOR_IN
14995: IFFALSE 15028
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
14997: LD_ADDR_VAR 0 2
15001: PUSH
15002: LD_VAR 0 2
15006: PUSH
15007: LD_VAR 0 1
15011: PPUSH
15012: CALL_OW 274
15016: PPUSH
15017: LD_INT 3
15019: PPUSH
15020: CALL_OW 275
15024: PLUS
15025: ST_TO_ADDR
15026: GO 14994
15028: POP
15029: POP
// if sib >= sibToCollect then
15030: LD_VAR 0 2
15034: PUSH
15035: LD_EXP 7
15039: GREATEREQUAL
15040: IFFALSE 15054
// AddMedal ( med1 , 1 ) else
15042: LD_STRING med1
15044: PPUSH
15045: LD_INT 1
15047: PPUSH
15048: CALL_OW 101
15052: GO 15065
// AddMedal ( med1 , - 1 ) ;
15054: LD_STRING med1
15056: PPUSH
15057: LD_INT 1
15059: NEG
15060: PPUSH
15061: CALL_OW 101
// if apeDriver or kamikazeTrained then
15065: LD_EXP 8
15069: PUSH
15070: LD_EXP 6
15074: OR
15075: IFFALSE 15089
// AddMedal ( med2 , 1 ) else
15077: LD_STRING med2
15079: PPUSH
15080: LD_INT 1
15082: PPUSH
15083: CALL_OW 101
15087: GO 15100
// AddMedal ( med2 , - 1 ) ;
15089: LD_STRING med2
15091: PPUSH
15092: LD_INT 1
15094: NEG
15095: PPUSH
15096: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
15100: LD_EXP 14
15104: PUSH
15105: LD_EXP 15
15109: PUSH
15110: LD_EXP 16
15114: PUSH
15115: LD_EXP 17
15119: PUSH
15120: LD_EXP 18
15124: PUSH
15125: LD_EXP 19
15129: PUSH
15130: LD_EXP 20
15134: PUSH
15135: LD_EXP 21
15139: PUSH
15140: LD_EXP 22
15144: PUSH
15145: LD_EXP 23
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: PPUSH
15162: LD_INT 50
15164: PUSH
15165: EMPTY
15166: LIST
15167: PPUSH
15168: CALL_OW 72
15172: NOT
15173: IFFALSE 15188
// AddMedal ( med3 , - 1 ) else
15175: LD_STRING med3
15177: PPUSH
15178: LD_INT 1
15180: NEG
15181: PPUSH
15182: CALL_OW 101
15186: GO 15198
// AddMedal ( med3 , 1 ) ;
15188: LD_STRING med3
15190: PPUSH
15191: LD_INT 1
15193: PPUSH
15194: CALL_OW 101
// GiveMedals ( MAIN ) ;
15198: LD_STRING MAIN
15200: PPUSH
15201: CALL_OW 102
// YouWin ;
15205: CALL_OW 103
// DialogueOff ;
15209: CALL_OW 7
// end ; end_of_file
15213: PPOPN 2
15215: END
// every 0 0$25 + 0 0$20 trigger playerInBase do var i , tmp ;
15216: LD_EXP 5
15220: IFFALSE 15321
15222: GO 15224
15224: DISABLE
15225: LD_INT 0
15227: PPUSH
15228: PPUSH
// begin enable ;
15229: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
15230: LD_ADDR_VAR 0 2
15234: PUSH
15235: LD_INT 9
15237: PUSH
15238: LD_INT 10
15240: PUSH
15241: LD_INT 11
15243: PUSH
15244: LD_INT 12
15246: PUSH
15247: LD_INT 13
15249: PUSH
15250: LD_INT 14
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
15261: LD_ADDR_VAR 0 1
15265: PUSH
15266: LD_VAR 0 2
15270: PUSH
15271: LD_INT 1
15273: PPUSH
15274: LD_INT 6
15276: PPUSH
15277: CALL_OW 12
15281: ARRAY
15282: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 16 then
15283: LD_VAR 0 1
15287: PPUSH
15288: CALL_OW 435
15292: PUSH
15293: LD_INT 16
15295: LESS
15296: IFFALSE 15321
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
15298: LD_INT 1
15300: PPUSH
15301: LD_INT 5
15303: PPUSH
15304: CALL_OW 12
15308: PPUSH
15309: LD_VAR 0 1
15313: PPUSH
15314: LD_INT 1
15316: PPUSH
15317: CALL_OW 55
// end ; end_of_file
15321: PPOPN 2
15323: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15324: LD_INT 0
15326: PPUSH
15327: PPUSH
// if exist_mode then
15328: LD_VAR 0 2
15332: IFFALSE 15357
// unit := CreateCharacter ( prefix & ident ) else
15334: LD_ADDR_VAR 0 5
15338: PUSH
15339: LD_VAR 0 3
15343: PUSH
15344: LD_VAR 0 1
15348: STR
15349: PPUSH
15350: CALL_OW 34
15354: ST_TO_ADDR
15355: GO 15372
// unit := NewCharacter ( ident ) ;
15357: LD_ADDR_VAR 0 5
15361: PUSH
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL_OW 25
15371: ST_TO_ADDR
// result := unit ;
15372: LD_ADDR_VAR 0 4
15376: PUSH
15377: LD_VAR 0 5
15381: ST_TO_ADDR
// end ;
15382: LD_VAR 0 4
15386: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15387: LD_INT 0
15389: PPUSH
15390: PPUSH
// if not side or not nation then
15391: LD_VAR 0 1
15395: NOT
15396: PUSH
15397: LD_VAR 0 2
15401: NOT
15402: OR
15403: IFFALSE 15407
// exit ;
15405: GO 16175
// case nation of nation_american :
15407: LD_VAR 0 2
15411: PUSH
15412: LD_INT 1
15414: DOUBLE
15415: EQUAL
15416: IFTRUE 15420
15418: GO 15634
15420: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15421: LD_ADDR_VAR 0 4
15425: PUSH
15426: LD_INT 35
15428: PUSH
15429: LD_INT 45
15431: PUSH
15432: LD_INT 46
15434: PUSH
15435: LD_INT 47
15437: PUSH
15438: LD_INT 82
15440: PUSH
15441: LD_INT 83
15443: PUSH
15444: LD_INT 84
15446: PUSH
15447: LD_INT 85
15449: PUSH
15450: LD_INT 86
15452: PUSH
15453: LD_INT 1
15455: PUSH
15456: LD_INT 2
15458: PUSH
15459: LD_INT 6
15461: PUSH
15462: LD_INT 15
15464: PUSH
15465: LD_INT 16
15467: PUSH
15468: LD_INT 7
15470: PUSH
15471: LD_INT 12
15473: PUSH
15474: LD_INT 13
15476: PUSH
15477: LD_INT 10
15479: PUSH
15480: LD_INT 14
15482: PUSH
15483: LD_INT 20
15485: PUSH
15486: LD_INT 21
15488: PUSH
15489: LD_INT 22
15491: PUSH
15492: LD_INT 25
15494: PUSH
15495: LD_INT 32
15497: PUSH
15498: LD_INT 27
15500: PUSH
15501: LD_INT 36
15503: PUSH
15504: LD_INT 69
15506: PUSH
15507: LD_INT 39
15509: PUSH
15510: LD_INT 34
15512: PUSH
15513: LD_INT 40
15515: PUSH
15516: LD_INT 48
15518: PUSH
15519: LD_INT 49
15521: PUSH
15522: LD_INT 50
15524: PUSH
15525: LD_INT 51
15527: PUSH
15528: LD_INT 52
15530: PUSH
15531: LD_INT 53
15533: PUSH
15534: LD_INT 54
15536: PUSH
15537: LD_INT 55
15539: PUSH
15540: LD_INT 56
15542: PUSH
15543: LD_INT 57
15545: PUSH
15546: LD_INT 58
15548: PUSH
15549: LD_INT 59
15551: PUSH
15552: LD_INT 60
15554: PUSH
15555: LD_INT 61
15557: PUSH
15558: LD_INT 62
15560: PUSH
15561: LD_INT 80
15563: PUSH
15564: LD_INT 82
15566: PUSH
15567: LD_INT 83
15569: PUSH
15570: LD_INT 84
15572: PUSH
15573: LD_INT 85
15575: PUSH
15576: LD_INT 86
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: ST_TO_ADDR
15632: GO 16099
15634: LD_INT 2
15636: DOUBLE
15637: EQUAL
15638: IFTRUE 15642
15640: GO 15868
15642: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15643: LD_ADDR_VAR 0 4
15647: PUSH
15648: LD_INT 35
15650: PUSH
15651: LD_INT 45
15653: PUSH
15654: LD_INT 46
15656: PUSH
15657: LD_INT 47
15659: PUSH
15660: LD_INT 82
15662: PUSH
15663: LD_INT 83
15665: PUSH
15666: LD_INT 84
15668: PUSH
15669: LD_INT 85
15671: PUSH
15672: LD_INT 87
15674: PUSH
15675: LD_INT 70
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: LD_INT 11
15683: PUSH
15684: LD_INT 3
15686: PUSH
15687: LD_INT 4
15689: PUSH
15690: LD_INT 5
15692: PUSH
15693: LD_INT 6
15695: PUSH
15696: LD_INT 15
15698: PUSH
15699: LD_INT 18
15701: PUSH
15702: LD_INT 7
15704: PUSH
15705: LD_INT 17
15707: PUSH
15708: LD_INT 8
15710: PUSH
15711: LD_INT 20
15713: PUSH
15714: LD_INT 21
15716: PUSH
15717: LD_INT 22
15719: PUSH
15720: LD_INT 72
15722: PUSH
15723: LD_INT 26
15725: PUSH
15726: LD_INT 69
15728: PUSH
15729: LD_INT 39
15731: PUSH
15732: LD_INT 40
15734: PUSH
15735: LD_INT 41
15737: PUSH
15738: LD_INT 42
15740: PUSH
15741: LD_INT 43
15743: PUSH
15744: LD_INT 48
15746: PUSH
15747: LD_INT 49
15749: PUSH
15750: LD_INT 50
15752: PUSH
15753: LD_INT 51
15755: PUSH
15756: LD_INT 52
15758: PUSH
15759: LD_INT 53
15761: PUSH
15762: LD_INT 54
15764: PUSH
15765: LD_INT 55
15767: PUSH
15768: LD_INT 56
15770: PUSH
15771: LD_INT 60
15773: PUSH
15774: LD_INT 61
15776: PUSH
15777: LD_INT 62
15779: PUSH
15780: LD_INT 66
15782: PUSH
15783: LD_INT 67
15785: PUSH
15786: LD_INT 68
15788: PUSH
15789: LD_INT 81
15791: PUSH
15792: LD_INT 82
15794: PUSH
15795: LD_INT 83
15797: PUSH
15798: LD_INT 84
15800: PUSH
15801: LD_INT 85
15803: PUSH
15804: LD_INT 87
15806: PUSH
15807: LD_INT 88
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: ST_TO_ADDR
15866: GO 16099
15868: LD_INT 3
15870: DOUBLE
15871: EQUAL
15872: IFTRUE 15876
15874: GO 16098
15876: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15877: LD_ADDR_VAR 0 4
15881: PUSH
15882: LD_INT 46
15884: PUSH
15885: LD_INT 47
15887: PUSH
15888: LD_INT 1
15890: PUSH
15891: LD_INT 2
15893: PUSH
15894: LD_INT 82
15896: PUSH
15897: LD_INT 83
15899: PUSH
15900: LD_INT 84
15902: PUSH
15903: LD_INT 85
15905: PUSH
15906: LD_INT 86
15908: PUSH
15909: LD_INT 11
15911: PUSH
15912: LD_INT 9
15914: PUSH
15915: LD_INT 20
15917: PUSH
15918: LD_INT 19
15920: PUSH
15921: LD_INT 21
15923: PUSH
15924: LD_INT 24
15926: PUSH
15927: LD_INT 22
15929: PUSH
15930: LD_INT 25
15932: PUSH
15933: LD_INT 28
15935: PUSH
15936: LD_INT 29
15938: PUSH
15939: LD_INT 30
15941: PUSH
15942: LD_INT 31
15944: PUSH
15945: LD_INT 37
15947: PUSH
15948: LD_INT 38
15950: PUSH
15951: LD_INT 32
15953: PUSH
15954: LD_INT 27
15956: PUSH
15957: LD_INT 33
15959: PUSH
15960: LD_INT 69
15962: PUSH
15963: LD_INT 39
15965: PUSH
15966: LD_INT 34
15968: PUSH
15969: LD_INT 40
15971: PUSH
15972: LD_INT 71
15974: PUSH
15975: LD_INT 23
15977: PUSH
15978: LD_INT 44
15980: PUSH
15981: LD_INT 48
15983: PUSH
15984: LD_INT 49
15986: PUSH
15987: LD_INT 50
15989: PUSH
15990: LD_INT 51
15992: PUSH
15993: LD_INT 52
15995: PUSH
15996: LD_INT 53
15998: PUSH
15999: LD_INT 54
16001: PUSH
16002: LD_INT 55
16004: PUSH
16005: LD_INT 56
16007: PUSH
16008: LD_INT 57
16010: PUSH
16011: LD_INT 58
16013: PUSH
16014: LD_INT 59
16016: PUSH
16017: LD_INT 63
16019: PUSH
16020: LD_INT 64
16022: PUSH
16023: LD_INT 65
16025: PUSH
16026: LD_INT 82
16028: PUSH
16029: LD_INT 83
16031: PUSH
16032: LD_INT 84
16034: PUSH
16035: LD_INT 85
16037: PUSH
16038: LD_INT 86
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: ST_TO_ADDR
16096: GO 16099
16098: POP
// if state > - 1 and state < 3 then
16099: LD_VAR 0 3
16103: PUSH
16104: LD_INT 1
16106: NEG
16107: GREATER
16108: PUSH
16109: LD_VAR 0 3
16113: PUSH
16114: LD_INT 3
16116: LESS
16117: AND
16118: IFFALSE 16175
// for i in result do
16120: LD_ADDR_VAR 0 5
16124: PUSH
16125: LD_VAR 0 4
16129: PUSH
16130: FOR_IN
16131: IFFALSE 16173
// if GetTech ( i , side ) <> state then
16133: LD_VAR 0 5
16137: PPUSH
16138: LD_VAR 0 1
16142: PPUSH
16143: CALL_OW 321
16147: PUSH
16148: LD_VAR 0 3
16152: NONEQUAL
16153: IFFALSE 16171
// result := result diff i ;
16155: LD_ADDR_VAR 0 4
16159: PUSH
16160: LD_VAR 0 4
16164: PUSH
16165: LD_VAR 0 5
16169: DIFF
16170: ST_TO_ADDR
16171: GO 16130
16173: POP
16174: POP
// end ;
16175: LD_VAR 0 4
16179: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16180: LD_INT 0
16182: PPUSH
16183: PPUSH
16184: PPUSH
// result := true ;
16185: LD_ADDR_VAR 0 3
16189: PUSH
16190: LD_INT 1
16192: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16193: LD_ADDR_VAR 0 5
16197: PUSH
16198: LD_VAR 0 2
16202: PPUSH
16203: CALL_OW 480
16207: ST_TO_ADDR
// if not tmp then
16208: LD_VAR 0 5
16212: NOT
16213: IFFALSE 16217
// exit ;
16215: GO 16266
// for i in tmp do
16217: LD_ADDR_VAR 0 4
16221: PUSH
16222: LD_VAR 0 5
16226: PUSH
16227: FOR_IN
16228: IFFALSE 16264
// if GetTech ( i , side ) <> state_researched then
16230: LD_VAR 0 4
16234: PPUSH
16235: LD_VAR 0 1
16239: PPUSH
16240: CALL_OW 321
16244: PUSH
16245: LD_INT 2
16247: NONEQUAL
16248: IFFALSE 16262
// begin result := false ;
16250: LD_ADDR_VAR 0 3
16254: PUSH
16255: LD_INT 0
16257: ST_TO_ADDR
// exit ;
16258: POP
16259: POP
16260: GO 16266
// end ;
16262: GO 16227
16264: POP
16265: POP
// end ;
16266: LD_VAR 0 3
16270: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16271: LD_INT 0
16273: PPUSH
16274: PPUSH
16275: PPUSH
16276: PPUSH
16277: PPUSH
16278: PPUSH
16279: PPUSH
16280: PPUSH
16281: PPUSH
16282: PPUSH
16283: PPUSH
16284: PPUSH
16285: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16286: LD_VAR 0 1
16290: NOT
16291: PUSH
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 257
16301: PUSH
16302: LD_INT 9
16304: NONEQUAL
16305: OR
16306: IFFALSE 16310
// exit ;
16308: GO 16883
// side := GetSide ( unit ) ;
16310: LD_ADDR_VAR 0 9
16314: PUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: CALL_OW 255
16324: ST_TO_ADDR
// tech_space := tech_spacanom ;
16325: LD_ADDR_VAR 0 12
16329: PUSH
16330: LD_INT 29
16332: ST_TO_ADDR
// tech_time := tech_taurad ;
16333: LD_ADDR_VAR 0 13
16337: PUSH
16338: LD_INT 28
16340: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16341: LD_ADDR_VAR 0 11
16345: PUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 310
16355: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16356: LD_VAR 0 11
16360: PPUSH
16361: CALL_OW 247
16365: PUSH
16366: LD_INT 2
16368: EQUAL
16369: IFFALSE 16373
// exit ;
16371: GO 16883
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16373: LD_ADDR_VAR 0 8
16377: PUSH
16378: LD_INT 81
16380: PUSH
16381: LD_VAR 0 9
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 3
16392: PUSH
16393: LD_INT 21
16395: PUSH
16396: LD_INT 3
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PPUSH
16411: CALL_OW 69
16415: ST_TO_ADDR
// if not tmp then
16416: LD_VAR 0 8
16420: NOT
16421: IFFALSE 16425
// exit ;
16423: GO 16883
// if in_unit then
16425: LD_VAR 0 11
16429: IFFALSE 16453
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16431: LD_ADDR_VAR 0 10
16435: PUSH
16436: LD_VAR 0 8
16440: PPUSH
16441: LD_VAR 0 11
16445: PPUSH
16446: CALL_OW 74
16450: ST_TO_ADDR
16451: GO 16473
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16453: LD_ADDR_VAR 0 10
16457: PUSH
16458: LD_VAR 0 8
16462: PPUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 74
16472: ST_TO_ADDR
// if not enemy then
16473: LD_VAR 0 10
16477: NOT
16478: IFFALSE 16482
// exit ;
16480: GO 16883
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16482: LD_VAR 0 11
16486: PUSH
16487: LD_VAR 0 11
16491: PPUSH
16492: LD_VAR 0 10
16496: PPUSH
16497: CALL_OW 296
16501: PUSH
16502: LD_INT 13
16504: GREATER
16505: AND
16506: PUSH
16507: LD_VAR 0 1
16511: PPUSH
16512: LD_VAR 0 10
16516: PPUSH
16517: CALL_OW 296
16521: PUSH
16522: LD_INT 12
16524: GREATER
16525: OR
16526: IFFALSE 16530
// exit ;
16528: GO 16883
// missile := [ 1 ] ;
16530: LD_ADDR_VAR 0 14
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16541: LD_VAR 0 9
16545: PPUSH
16546: LD_VAR 0 12
16550: PPUSH
16551: CALL_OW 325
16555: IFFALSE 16584
// missile := Replace ( missile , missile + 1 , 2 ) ;
16557: LD_ADDR_VAR 0 14
16561: PUSH
16562: LD_VAR 0 14
16566: PPUSH
16567: LD_VAR 0 14
16571: PUSH
16572: LD_INT 1
16574: PLUS
16575: PPUSH
16576: LD_INT 2
16578: PPUSH
16579: CALL_OW 1
16583: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16584: LD_VAR 0 9
16588: PPUSH
16589: LD_VAR 0 13
16593: PPUSH
16594: CALL_OW 325
16598: PUSH
16599: LD_VAR 0 10
16603: PPUSH
16604: CALL_OW 255
16608: PPUSH
16609: LD_VAR 0 13
16613: PPUSH
16614: CALL_OW 325
16618: NOT
16619: AND
16620: IFFALSE 16649
// missile := Replace ( missile , missile + 1 , 3 ) ;
16622: LD_ADDR_VAR 0 14
16626: PUSH
16627: LD_VAR 0 14
16631: PPUSH
16632: LD_VAR 0 14
16636: PUSH
16637: LD_INT 1
16639: PLUS
16640: PPUSH
16641: LD_INT 3
16643: PPUSH
16644: CALL_OW 1
16648: ST_TO_ADDR
// if missile < 2 then
16649: LD_VAR 0 14
16653: PUSH
16654: LD_INT 2
16656: LESS
16657: IFFALSE 16661
// exit ;
16659: GO 16883
// x := GetX ( enemy ) ;
16661: LD_ADDR_VAR 0 4
16665: PUSH
16666: LD_VAR 0 10
16670: PPUSH
16671: CALL_OW 250
16675: ST_TO_ADDR
// y := GetY ( enemy ) ;
16676: LD_ADDR_VAR 0 5
16680: PUSH
16681: LD_VAR 0 10
16685: PPUSH
16686: CALL_OW 251
16690: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16691: LD_ADDR_VAR 0 6
16695: PUSH
16696: LD_VAR 0 4
16700: PUSH
16701: LD_INT 1
16703: NEG
16704: PPUSH
16705: LD_INT 1
16707: PPUSH
16708: CALL_OW 12
16712: PLUS
16713: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16714: LD_ADDR_VAR 0 7
16718: PUSH
16719: LD_VAR 0 5
16723: PUSH
16724: LD_INT 1
16726: NEG
16727: PPUSH
16728: LD_INT 1
16730: PPUSH
16731: CALL_OW 12
16735: PLUS
16736: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16737: LD_VAR 0 6
16741: PPUSH
16742: LD_VAR 0 7
16746: PPUSH
16747: CALL_OW 488
16751: NOT
16752: IFFALSE 16774
// begin _x := x ;
16754: LD_ADDR_VAR 0 6
16758: PUSH
16759: LD_VAR 0 4
16763: ST_TO_ADDR
// _y := y ;
16764: LD_ADDR_VAR 0 7
16768: PUSH
16769: LD_VAR 0 5
16773: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16774: LD_ADDR_VAR 0 3
16778: PUSH
16779: LD_INT 1
16781: PPUSH
16782: LD_VAR 0 14
16786: PPUSH
16787: CALL_OW 12
16791: ST_TO_ADDR
// case i of 1 :
16792: LD_VAR 0 3
16796: PUSH
16797: LD_INT 1
16799: DOUBLE
16800: EQUAL
16801: IFTRUE 16805
16803: GO 16822
16805: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16806: LD_VAR 0 1
16810: PPUSH
16811: LD_VAR 0 10
16815: PPUSH
16816: CALL_OW 115
16820: GO 16883
16822: LD_INT 2
16824: DOUBLE
16825: EQUAL
16826: IFTRUE 16830
16828: GO 16852
16830: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16831: LD_VAR 0 1
16835: PPUSH
16836: LD_VAR 0 6
16840: PPUSH
16841: LD_VAR 0 7
16845: PPUSH
16846: CALL_OW 153
16850: GO 16883
16852: LD_INT 3
16854: DOUBLE
16855: EQUAL
16856: IFTRUE 16860
16858: GO 16882
16860: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16861: LD_VAR 0 1
16865: PPUSH
16866: LD_VAR 0 6
16870: PPUSH
16871: LD_VAR 0 7
16875: PPUSH
16876: CALL_OW 154
16880: GO 16883
16882: POP
// end ;
16883: LD_VAR 0 2
16887: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16888: LD_INT 0
16890: PPUSH
16891: PPUSH
16892: PPUSH
16893: PPUSH
16894: PPUSH
16895: PPUSH
// if not unit or not building then
16896: LD_VAR 0 1
16900: NOT
16901: PUSH
16902: LD_VAR 0 2
16906: NOT
16907: OR
16908: IFFALSE 16912
// exit ;
16910: GO 17070
// x := GetX ( building ) ;
16912: LD_ADDR_VAR 0 5
16916: PUSH
16917: LD_VAR 0 2
16921: PPUSH
16922: CALL_OW 250
16926: ST_TO_ADDR
// y := GetY ( building ) ;
16927: LD_ADDR_VAR 0 6
16931: PUSH
16932: LD_VAR 0 2
16936: PPUSH
16937: CALL_OW 251
16941: ST_TO_ADDR
// for i = 0 to 5 do
16942: LD_ADDR_VAR 0 4
16946: PUSH
16947: DOUBLE
16948: LD_INT 0
16950: DEC
16951: ST_TO_ADDR
16952: LD_INT 5
16954: PUSH
16955: FOR_TO
16956: IFFALSE 17068
// begin _x := ShiftX ( x , i , 3 ) ;
16958: LD_ADDR_VAR 0 7
16962: PUSH
16963: LD_VAR 0 5
16967: PPUSH
16968: LD_VAR 0 4
16972: PPUSH
16973: LD_INT 3
16975: PPUSH
16976: CALL_OW 272
16980: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16981: LD_ADDR_VAR 0 8
16985: PUSH
16986: LD_VAR 0 6
16990: PPUSH
16991: LD_VAR 0 4
16995: PPUSH
16996: LD_INT 3
16998: PPUSH
16999: CALL_OW 273
17003: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17004: LD_VAR 0 7
17008: PPUSH
17009: LD_VAR 0 8
17013: PPUSH
17014: CALL_OW 488
17018: NOT
17019: IFFALSE 17023
// continue ;
17021: GO 16955
// if HexInfo ( _x , _y ) = 0 then
17023: LD_VAR 0 7
17027: PPUSH
17028: LD_VAR 0 8
17032: PPUSH
17033: CALL_OW 428
17037: PUSH
17038: LD_INT 0
17040: EQUAL
17041: IFFALSE 17066
// begin ComMoveXY ( unit , _x , _y ) ;
17043: LD_VAR 0 1
17047: PPUSH
17048: LD_VAR 0 7
17052: PPUSH
17053: LD_VAR 0 8
17057: PPUSH
17058: CALL_OW 111
// exit ;
17062: POP
17063: POP
17064: GO 17070
// end ; end ;
17066: GO 16955
17068: POP
17069: POP
// end ;
17070: LD_VAR 0 3
17074: RET
// export function ScanBase ( side , base_area ) ; begin
17075: LD_INT 0
17077: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17078: LD_ADDR_VAR 0 3
17082: PUSH
17083: LD_VAR 0 2
17087: PPUSH
17088: LD_INT 81
17090: PUSH
17091: LD_VAR 0 1
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PPUSH
17100: CALL_OW 70
17104: ST_TO_ADDR
// end ;
17105: LD_VAR 0 3
17109: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17110: LD_INT 0
17112: PPUSH
17113: PPUSH
17114: PPUSH
17115: PPUSH
// result := false ;
17116: LD_ADDR_VAR 0 2
17120: PUSH
17121: LD_INT 0
17123: ST_TO_ADDR
// side := GetSide ( unit ) ;
17124: LD_ADDR_VAR 0 3
17128: PUSH
17129: LD_VAR 0 1
17133: PPUSH
17134: CALL_OW 255
17138: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17139: LD_ADDR_VAR 0 4
17143: PUSH
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 248
17153: ST_TO_ADDR
// case nat of 1 :
17154: LD_VAR 0 4
17158: PUSH
17159: LD_INT 1
17161: DOUBLE
17162: EQUAL
17163: IFTRUE 17167
17165: GO 17178
17167: POP
// tech := tech_lassight ; 2 :
17168: LD_ADDR_VAR 0 5
17172: PUSH
17173: LD_INT 12
17175: ST_TO_ADDR
17176: GO 17217
17178: LD_INT 2
17180: DOUBLE
17181: EQUAL
17182: IFTRUE 17186
17184: GO 17197
17186: POP
// tech := tech_mortar ; 3 :
17187: LD_ADDR_VAR 0 5
17191: PUSH
17192: LD_INT 41
17194: ST_TO_ADDR
17195: GO 17217
17197: LD_INT 3
17199: DOUBLE
17200: EQUAL
17201: IFTRUE 17205
17203: GO 17216
17205: POP
// tech := tech_bazooka ; end ;
17206: LD_ADDR_VAR 0 5
17210: PUSH
17211: LD_INT 44
17213: ST_TO_ADDR
17214: GO 17217
17216: POP
// if Researched ( side , tech ) then
17217: LD_VAR 0 3
17221: PPUSH
17222: LD_VAR 0 5
17226: PPUSH
17227: CALL_OW 325
17231: IFFALSE 17258
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17233: LD_ADDR_VAR 0 2
17237: PUSH
17238: LD_INT 5
17240: PUSH
17241: LD_INT 8
17243: PUSH
17244: LD_INT 9
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: PUSH
17252: LD_VAR 0 4
17256: ARRAY
17257: ST_TO_ADDR
// end ;
17258: LD_VAR 0 2
17262: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17263: LD_INT 0
17265: PPUSH
17266: PPUSH
17267: PPUSH
// if not mines then
17268: LD_VAR 0 2
17272: NOT
17273: IFFALSE 17277
// exit ;
17275: GO 17421
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17277: LD_ADDR_VAR 0 5
17281: PUSH
17282: LD_INT 81
17284: PUSH
17285: LD_VAR 0 1
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 3
17296: PUSH
17297: LD_INT 21
17299: PUSH
17300: LD_INT 3
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: ST_TO_ADDR
// for i in mines do
17320: LD_ADDR_VAR 0 4
17324: PUSH
17325: LD_VAR 0 2
17329: PUSH
17330: FOR_IN
17331: IFFALSE 17419
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17333: LD_VAR 0 4
17337: PUSH
17338: LD_INT 1
17340: ARRAY
17341: PPUSH
17342: LD_VAR 0 4
17346: PUSH
17347: LD_INT 2
17349: ARRAY
17350: PPUSH
17351: CALL_OW 458
17355: NOT
17356: IFFALSE 17360
// continue ;
17358: GO 17330
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17360: LD_VAR 0 4
17364: PUSH
17365: LD_INT 1
17367: ARRAY
17368: PPUSH
17369: LD_VAR 0 4
17373: PUSH
17374: LD_INT 2
17376: ARRAY
17377: PPUSH
17378: CALL_OW 428
17382: PUSH
17383: LD_VAR 0 5
17387: IN
17388: IFFALSE 17417
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17390: LD_VAR 0 4
17394: PUSH
17395: LD_INT 1
17397: ARRAY
17398: PPUSH
17399: LD_VAR 0 4
17403: PUSH
17404: LD_INT 2
17406: ARRAY
17407: PPUSH
17408: LD_VAR 0 1
17412: PPUSH
17413: CALL_OW 456
// end ;
17417: GO 17330
17419: POP
17420: POP
// end ;
17421: LD_VAR 0 3
17425: RET
// export function Count ( array ) ; begin
17426: LD_INT 0
17428: PPUSH
// result := array + 0 ;
17429: LD_ADDR_VAR 0 2
17433: PUSH
17434: LD_VAR 0 1
17438: PUSH
17439: LD_INT 0
17441: PLUS
17442: ST_TO_ADDR
// end ;
17443: LD_VAR 0 2
17447: RET
// export function IsEmpty ( building ) ; begin
17448: LD_INT 0
17450: PPUSH
// if not building then
17451: LD_VAR 0 1
17455: NOT
17456: IFFALSE 17460
// exit ;
17458: GO 17503
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17460: LD_ADDR_VAR 0 2
17464: PUSH
17465: LD_VAR 0 1
17469: PUSH
17470: LD_INT 22
17472: PUSH
17473: LD_VAR 0 1
17477: PPUSH
17478: CALL_OW 255
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 58
17489: PUSH
17490: EMPTY
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PPUSH
17497: CALL_OW 69
17501: IN
17502: ST_TO_ADDR
// end ;
17503: LD_VAR 0 2
17507: RET
// export function IsNotFull ( building ) ; var places ; begin
17508: LD_INT 0
17510: PPUSH
17511: PPUSH
// if not building then
17512: LD_VAR 0 1
17516: NOT
17517: IFFALSE 17521
// exit ;
17519: GO 17549
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17521: LD_ADDR_VAR 0 2
17525: PUSH
17526: LD_VAR 0 1
17530: PPUSH
17531: LD_INT 3
17533: PUSH
17534: LD_INT 62
17536: PUSH
17537: EMPTY
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 72
17548: ST_TO_ADDR
// end ;
17549: LD_VAR 0 2
17553: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17554: LD_INT 0
17556: PPUSH
17557: PPUSH
17558: PPUSH
17559: PPUSH
// tmp := [ ] ;
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: EMPTY
17566: ST_TO_ADDR
// list := [ ] ;
17567: LD_ADDR_VAR 0 5
17571: PUSH
17572: EMPTY
17573: ST_TO_ADDR
// for i = 16 to 25 do
17574: LD_ADDR_VAR 0 4
17578: PUSH
17579: DOUBLE
17580: LD_INT 16
17582: DEC
17583: ST_TO_ADDR
17584: LD_INT 25
17586: PUSH
17587: FOR_TO
17588: IFFALSE 17661
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17590: LD_ADDR_VAR 0 3
17594: PUSH
17595: LD_VAR 0 3
17599: PUSH
17600: LD_INT 22
17602: PUSH
17603: LD_VAR 0 1
17607: PPUSH
17608: CALL_OW 255
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 91
17619: PUSH
17620: LD_VAR 0 1
17624: PUSH
17625: LD_INT 6
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 30
17635: PUSH
17636: LD_VAR 0 4
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: PUSH
17650: EMPTY
17651: LIST
17652: PPUSH
17653: CALL_OW 69
17657: ADD
17658: ST_TO_ADDR
17659: GO 17587
17661: POP
17662: POP
// for i = 1 to tmp do
17663: LD_ADDR_VAR 0 4
17667: PUSH
17668: DOUBLE
17669: LD_INT 1
17671: DEC
17672: ST_TO_ADDR
17673: LD_VAR 0 3
17677: PUSH
17678: FOR_TO
17679: IFFALSE 17767
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17681: LD_ADDR_VAR 0 5
17685: PUSH
17686: LD_VAR 0 5
17690: PUSH
17691: LD_VAR 0 3
17695: PUSH
17696: LD_VAR 0 4
17700: ARRAY
17701: PPUSH
17702: CALL_OW 266
17706: PUSH
17707: LD_VAR 0 3
17711: PUSH
17712: LD_VAR 0 4
17716: ARRAY
17717: PPUSH
17718: CALL_OW 250
17722: PUSH
17723: LD_VAR 0 3
17727: PUSH
17728: LD_VAR 0 4
17732: ARRAY
17733: PPUSH
17734: CALL_OW 251
17738: PUSH
17739: LD_VAR 0 3
17743: PUSH
17744: LD_VAR 0 4
17748: ARRAY
17749: PPUSH
17750: CALL_OW 254
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: PUSH
17761: EMPTY
17762: LIST
17763: ADD
17764: ST_TO_ADDR
17765: GO 17678
17767: POP
17768: POP
// result := list ;
17769: LD_ADDR_VAR 0 2
17773: PUSH
17774: LD_VAR 0 5
17778: ST_TO_ADDR
// end ;
17779: LD_VAR 0 2
17783: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17784: LD_INT 0
17786: PPUSH
17787: PPUSH
17788: PPUSH
17789: PPUSH
17790: PPUSH
17791: PPUSH
17792: PPUSH
// if not factory then
17793: LD_VAR 0 1
17797: NOT
17798: IFFALSE 17802
// exit ;
17800: GO 18395
// if control = control_apeman then
17802: LD_VAR 0 4
17806: PUSH
17807: LD_INT 5
17809: EQUAL
17810: IFFALSE 17919
// begin tmp := UnitsInside ( factory ) ;
17812: LD_ADDR_VAR 0 8
17816: PUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 313
17826: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17827: LD_VAR 0 8
17831: PPUSH
17832: LD_INT 25
17834: PUSH
17835: LD_INT 12
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PPUSH
17842: CALL_OW 72
17846: NOT
17847: IFFALSE 17857
// control := control_manual ;
17849: LD_ADDR_VAR 0 4
17853: PUSH
17854: LD_INT 1
17856: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17857: LD_ADDR_VAR 0 8
17861: PUSH
17862: LD_VAR 0 1
17866: PPUSH
17867: CALL 17554 0 1
17871: ST_TO_ADDR
// if tmp then
17872: LD_VAR 0 8
17876: IFFALSE 17919
// begin for i in tmp do
17878: LD_ADDR_VAR 0 7
17882: PUSH
17883: LD_VAR 0 8
17887: PUSH
17888: FOR_IN
17889: IFFALSE 17917
// if i [ 1 ] = b_ext_radio then
17891: LD_VAR 0 7
17895: PUSH
17896: LD_INT 1
17898: ARRAY
17899: PUSH
17900: LD_INT 22
17902: EQUAL
17903: IFFALSE 17915
// begin control := control_remote ;
17905: LD_ADDR_VAR 0 4
17909: PUSH
17910: LD_INT 2
17912: ST_TO_ADDR
// break ;
17913: GO 17917
// end ;
17915: GO 17888
17917: POP
17918: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17919: LD_VAR 0 1
17923: PPUSH
17924: LD_VAR 0 2
17928: PPUSH
17929: LD_VAR 0 3
17933: PPUSH
17934: LD_VAR 0 4
17938: PPUSH
17939: LD_VAR 0 5
17943: PPUSH
17944: CALL_OW 448
17948: IFFALSE 17983
// begin result := [ chassis , engine , control , weapon ] ;
17950: LD_ADDR_VAR 0 6
17954: PUSH
17955: LD_VAR 0 2
17959: PUSH
17960: LD_VAR 0 3
17964: PUSH
17965: LD_VAR 0 4
17969: PUSH
17970: LD_VAR 0 5
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: ST_TO_ADDR
// exit ;
17981: GO 18395
// end ; _chassis := AvailableChassisList ( factory ) ;
17983: LD_ADDR_VAR 0 9
17987: PUSH
17988: LD_VAR 0 1
17992: PPUSH
17993: CALL_OW 475
17997: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17998: LD_ADDR_VAR 0 11
18002: PUSH
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 476
18012: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18013: LD_ADDR_VAR 0 12
18017: PUSH
18018: LD_VAR 0 1
18022: PPUSH
18023: CALL_OW 477
18027: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18028: LD_ADDR_VAR 0 10
18032: PUSH
18033: LD_VAR 0 1
18037: PPUSH
18038: CALL_OW 478
18042: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18043: LD_VAR 0 9
18047: NOT
18048: PUSH
18049: LD_VAR 0 11
18053: NOT
18054: OR
18055: PUSH
18056: LD_VAR 0 12
18060: NOT
18061: OR
18062: PUSH
18063: LD_VAR 0 10
18067: NOT
18068: OR
18069: IFFALSE 18104
// begin result := [ chassis , engine , control , weapon ] ;
18071: LD_ADDR_VAR 0 6
18075: PUSH
18076: LD_VAR 0 2
18080: PUSH
18081: LD_VAR 0 3
18085: PUSH
18086: LD_VAR 0 4
18090: PUSH
18091: LD_VAR 0 5
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: ST_TO_ADDR
// exit ;
18102: GO 18395
// end ; if not chassis in _chassis then
18104: LD_VAR 0 2
18108: PUSH
18109: LD_VAR 0 9
18113: IN
18114: NOT
18115: IFFALSE 18141
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18117: LD_ADDR_VAR 0 2
18121: PUSH
18122: LD_VAR 0 9
18126: PUSH
18127: LD_INT 1
18129: PPUSH
18130: LD_VAR 0 9
18134: PPUSH
18135: CALL_OW 12
18139: ARRAY
18140: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18141: LD_VAR 0 2
18145: PPUSH
18146: LD_VAR 0 3
18150: PPUSH
18151: CALL 18400 0 2
18155: NOT
18156: IFFALSE 18215
// repeat engine := _engine [ 1 ] ;
18158: LD_ADDR_VAR 0 3
18162: PUSH
18163: LD_VAR 0 11
18167: PUSH
18168: LD_INT 1
18170: ARRAY
18171: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18172: LD_ADDR_VAR 0 11
18176: PUSH
18177: LD_VAR 0 11
18181: PPUSH
18182: LD_INT 1
18184: PPUSH
18185: CALL_OW 3
18189: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18190: LD_VAR 0 2
18194: PPUSH
18195: LD_VAR 0 3
18199: PPUSH
18200: CALL 18400 0 2
18204: PUSH
18205: LD_VAR 0 11
18209: PUSH
18210: EMPTY
18211: EQUAL
18212: OR
18213: IFFALSE 18158
// if not control in _control then
18215: LD_VAR 0 4
18219: PUSH
18220: LD_VAR 0 12
18224: IN
18225: NOT
18226: IFFALSE 18252
// control := _control [ rand ( 1 , _control ) ] ;
18228: LD_ADDR_VAR 0 4
18232: PUSH
18233: LD_VAR 0 12
18237: PUSH
18238: LD_INT 1
18240: PPUSH
18241: LD_VAR 0 12
18245: PPUSH
18246: CALL_OW 12
18250: ARRAY
18251: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18252: LD_VAR 0 2
18256: PPUSH
18257: LD_VAR 0 5
18261: PPUSH
18262: CALL 18620 0 2
18266: NOT
18267: IFFALSE 18326
// repeat weapon := _weapon [ 1 ] ;
18269: LD_ADDR_VAR 0 5
18273: PUSH
18274: LD_VAR 0 10
18278: PUSH
18279: LD_INT 1
18281: ARRAY
18282: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18283: LD_ADDR_VAR 0 10
18287: PUSH
18288: LD_VAR 0 10
18292: PPUSH
18293: LD_INT 1
18295: PPUSH
18296: CALL_OW 3
18300: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18301: LD_VAR 0 2
18305: PPUSH
18306: LD_VAR 0 5
18310: PPUSH
18311: CALL 18620 0 2
18315: PUSH
18316: LD_VAR 0 10
18320: PUSH
18321: EMPTY
18322: EQUAL
18323: OR
18324: IFFALSE 18269
// result := [ ] ;
18326: LD_ADDR_VAR 0 6
18330: PUSH
18331: EMPTY
18332: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18333: LD_VAR 0 1
18337: PPUSH
18338: LD_VAR 0 2
18342: PPUSH
18343: LD_VAR 0 3
18347: PPUSH
18348: LD_VAR 0 4
18352: PPUSH
18353: LD_VAR 0 5
18357: PPUSH
18358: CALL_OW 448
18362: IFFALSE 18395
// result := [ chassis , engine , control , weapon ] ;
18364: LD_ADDR_VAR 0 6
18368: PUSH
18369: LD_VAR 0 2
18373: PUSH
18374: LD_VAR 0 3
18378: PUSH
18379: LD_VAR 0 4
18383: PUSH
18384: LD_VAR 0 5
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: ST_TO_ADDR
// end ;
18395: LD_VAR 0 6
18399: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18400: LD_INT 0
18402: PPUSH
// if not chassis or not engine then
18403: LD_VAR 0 1
18407: NOT
18408: PUSH
18409: LD_VAR 0 2
18413: NOT
18414: OR
18415: IFFALSE 18419
// exit ;
18417: GO 18615
// case engine of engine_solar :
18419: LD_VAR 0 2
18423: PUSH
18424: LD_INT 2
18426: DOUBLE
18427: EQUAL
18428: IFTRUE 18432
18430: GO 18470
18432: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18433: LD_ADDR_VAR 0 3
18437: PUSH
18438: LD_INT 11
18440: PUSH
18441: LD_INT 12
18443: PUSH
18444: LD_INT 13
18446: PUSH
18447: LD_INT 14
18449: PUSH
18450: LD_INT 1
18452: PUSH
18453: LD_INT 2
18455: PUSH
18456: LD_INT 3
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: ST_TO_ADDR
18468: GO 18599
18470: LD_INT 1
18472: DOUBLE
18473: EQUAL
18474: IFTRUE 18478
18476: GO 18540
18478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18479: LD_ADDR_VAR 0 3
18483: PUSH
18484: LD_INT 11
18486: PUSH
18487: LD_INT 12
18489: PUSH
18490: LD_INT 13
18492: PUSH
18493: LD_INT 14
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: LD_INT 2
18501: PUSH
18502: LD_INT 3
18504: PUSH
18505: LD_INT 4
18507: PUSH
18508: LD_INT 5
18510: PUSH
18511: LD_INT 21
18513: PUSH
18514: LD_INT 23
18516: PUSH
18517: LD_INT 22
18519: PUSH
18520: LD_INT 24
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: ST_TO_ADDR
18538: GO 18599
18540: LD_INT 3
18542: DOUBLE
18543: EQUAL
18544: IFTRUE 18548
18546: GO 18598
18548: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18549: LD_ADDR_VAR 0 3
18553: PUSH
18554: LD_INT 13
18556: PUSH
18557: LD_INT 14
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: LD_INT 3
18565: PUSH
18566: LD_INT 4
18568: PUSH
18569: LD_INT 5
18571: PUSH
18572: LD_INT 21
18574: PUSH
18575: LD_INT 22
18577: PUSH
18578: LD_INT 23
18580: PUSH
18581: LD_INT 24
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: ST_TO_ADDR
18596: GO 18599
18598: POP
// result := ( chassis in result ) ;
18599: LD_ADDR_VAR 0 3
18603: PUSH
18604: LD_VAR 0 1
18608: PUSH
18609: LD_VAR 0 3
18613: IN
18614: ST_TO_ADDR
// end ;
18615: LD_VAR 0 3
18619: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18620: LD_INT 0
18622: PPUSH
// if not chassis or not weapon then
18623: LD_VAR 0 1
18627: NOT
18628: PUSH
18629: LD_VAR 0 2
18633: NOT
18634: OR
18635: IFFALSE 18639
// exit ;
18637: GO 19699
// case weapon of us_machine_gun :
18639: LD_VAR 0 2
18643: PUSH
18644: LD_INT 2
18646: DOUBLE
18647: EQUAL
18648: IFTRUE 18652
18650: GO 18682
18652: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18653: LD_ADDR_VAR 0 3
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: LD_INT 3
18666: PUSH
18667: LD_INT 4
18669: PUSH
18670: LD_INT 5
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: ST_TO_ADDR
18680: GO 19683
18682: LD_INT 3
18684: DOUBLE
18685: EQUAL
18686: IFTRUE 18690
18688: GO 18720
18690: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18691: LD_ADDR_VAR 0 3
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: LD_INT 3
18704: PUSH
18705: LD_INT 4
18707: PUSH
18708: LD_INT 5
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: ST_TO_ADDR
18718: GO 19683
18720: LD_INT 11
18722: DOUBLE
18723: EQUAL
18724: IFTRUE 18728
18726: GO 18758
18728: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18729: LD_ADDR_VAR 0 3
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: LD_INT 3
18742: PUSH
18743: LD_INT 4
18745: PUSH
18746: LD_INT 5
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: ST_TO_ADDR
18756: GO 19683
18758: LD_INT 4
18760: DOUBLE
18761: EQUAL
18762: IFTRUE 18766
18764: GO 18792
18766: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18767: LD_ADDR_VAR 0 3
18771: PUSH
18772: LD_INT 2
18774: PUSH
18775: LD_INT 3
18777: PUSH
18778: LD_INT 4
18780: PUSH
18781: LD_INT 5
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: ST_TO_ADDR
18790: GO 19683
18792: LD_INT 5
18794: DOUBLE
18795: EQUAL
18796: IFTRUE 18800
18798: GO 18826
18800: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18801: LD_ADDR_VAR 0 3
18805: PUSH
18806: LD_INT 2
18808: PUSH
18809: LD_INT 3
18811: PUSH
18812: LD_INT 4
18814: PUSH
18815: LD_INT 5
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: ST_TO_ADDR
18824: GO 19683
18826: LD_INT 9
18828: DOUBLE
18829: EQUAL
18830: IFTRUE 18834
18832: GO 18860
18834: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18835: LD_ADDR_VAR 0 3
18839: PUSH
18840: LD_INT 2
18842: PUSH
18843: LD_INT 3
18845: PUSH
18846: LD_INT 4
18848: PUSH
18849: LD_INT 5
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: ST_TO_ADDR
18858: GO 19683
18860: LD_INT 7
18862: DOUBLE
18863: EQUAL
18864: IFTRUE 18868
18866: GO 18894
18868: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18869: LD_ADDR_VAR 0 3
18873: PUSH
18874: LD_INT 2
18876: PUSH
18877: LD_INT 3
18879: PUSH
18880: LD_INT 4
18882: PUSH
18883: LD_INT 5
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: ST_TO_ADDR
18892: GO 19683
18894: LD_INT 12
18896: DOUBLE
18897: EQUAL
18898: IFTRUE 18902
18900: GO 18928
18902: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18903: LD_ADDR_VAR 0 3
18907: PUSH
18908: LD_INT 2
18910: PUSH
18911: LD_INT 3
18913: PUSH
18914: LD_INT 4
18916: PUSH
18917: LD_INT 5
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: ST_TO_ADDR
18926: GO 19683
18928: LD_INT 13
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 18962
18936: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18937: LD_ADDR_VAR 0 3
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 3
18947: PUSH
18948: LD_INT 4
18950: PUSH
18951: LD_INT 5
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: ST_TO_ADDR
18960: GO 19683
18962: LD_INT 14
18964: DOUBLE
18965: EQUAL
18966: IFTRUE 18970
18968: GO 18988
18970: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18971: LD_ADDR_VAR 0 3
18975: PUSH
18976: LD_INT 4
18978: PUSH
18979: LD_INT 5
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: ST_TO_ADDR
18986: GO 19683
18988: LD_INT 6
18990: DOUBLE
18991: EQUAL
18992: IFTRUE 18996
18994: GO 19014
18996: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18997: LD_ADDR_VAR 0 3
19001: PUSH
19002: LD_INT 4
19004: PUSH
19005: LD_INT 5
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: ST_TO_ADDR
19012: GO 19683
19014: LD_INT 10
19016: DOUBLE
19017: EQUAL
19018: IFTRUE 19022
19020: GO 19040
19022: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19023: LD_ADDR_VAR 0 3
19027: PUSH
19028: LD_INT 4
19030: PUSH
19031: LD_INT 5
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: ST_TO_ADDR
19038: GO 19683
19040: LD_INT 22
19042: DOUBLE
19043: EQUAL
19044: IFTRUE 19048
19046: GO 19074
19048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19049: LD_ADDR_VAR 0 3
19053: PUSH
19054: LD_INT 11
19056: PUSH
19057: LD_INT 12
19059: PUSH
19060: LD_INT 13
19062: PUSH
19063: LD_INT 14
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: ST_TO_ADDR
19072: GO 19683
19074: LD_INT 23
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19108
19082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19083: LD_ADDR_VAR 0 3
19087: PUSH
19088: LD_INT 11
19090: PUSH
19091: LD_INT 12
19093: PUSH
19094: LD_INT 13
19096: PUSH
19097: LD_INT 14
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: ST_TO_ADDR
19106: GO 19683
19108: LD_INT 24
19110: DOUBLE
19111: EQUAL
19112: IFTRUE 19116
19114: GO 19142
19116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19117: LD_ADDR_VAR 0 3
19121: PUSH
19122: LD_INT 11
19124: PUSH
19125: LD_INT 12
19127: PUSH
19128: LD_INT 13
19130: PUSH
19131: LD_INT 14
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: ST_TO_ADDR
19140: GO 19683
19142: LD_INT 30
19144: DOUBLE
19145: EQUAL
19146: IFTRUE 19150
19148: GO 19176
19150: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19151: LD_ADDR_VAR 0 3
19155: PUSH
19156: LD_INT 11
19158: PUSH
19159: LD_INT 12
19161: PUSH
19162: LD_INT 13
19164: PUSH
19165: LD_INT 14
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: ST_TO_ADDR
19174: GO 19683
19176: LD_INT 25
19178: DOUBLE
19179: EQUAL
19180: IFTRUE 19184
19182: GO 19202
19184: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19185: LD_ADDR_VAR 0 3
19189: PUSH
19190: LD_INT 13
19192: PUSH
19193: LD_INT 14
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: ST_TO_ADDR
19200: GO 19683
19202: LD_INT 27
19204: DOUBLE
19205: EQUAL
19206: IFTRUE 19210
19208: GO 19228
19210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19211: LD_ADDR_VAR 0 3
19215: PUSH
19216: LD_INT 13
19218: PUSH
19219: LD_INT 14
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: ST_TO_ADDR
19226: GO 19683
19228: LD_INT 92
19230: DOUBLE
19231: EQUAL
19232: IFTRUE 19236
19234: GO 19262
19236: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19237: LD_ADDR_VAR 0 3
19241: PUSH
19242: LD_INT 11
19244: PUSH
19245: LD_INT 12
19247: PUSH
19248: LD_INT 13
19250: PUSH
19251: LD_INT 14
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: ST_TO_ADDR
19260: GO 19683
19262: LD_INT 28
19264: DOUBLE
19265: EQUAL
19266: IFTRUE 19270
19268: GO 19288
19270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19271: LD_ADDR_VAR 0 3
19275: PUSH
19276: LD_INT 13
19278: PUSH
19279: LD_INT 14
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: ST_TO_ADDR
19286: GO 19683
19288: LD_INT 29
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19314
19296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19297: LD_ADDR_VAR 0 3
19301: PUSH
19302: LD_INT 13
19304: PUSH
19305: LD_INT 14
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: ST_TO_ADDR
19312: GO 19683
19314: LD_INT 31
19316: DOUBLE
19317: EQUAL
19318: IFTRUE 19322
19320: GO 19340
19322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19323: LD_ADDR_VAR 0 3
19327: PUSH
19328: LD_INT 13
19330: PUSH
19331: LD_INT 14
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: ST_TO_ADDR
19338: GO 19683
19340: LD_INT 26
19342: DOUBLE
19343: EQUAL
19344: IFTRUE 19348
19346: GO 19366
19348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19349: LD_ADDR_VAR 0 3
19353: PUSH
19354: LD_INT 13
19356: PUSH
19357: LD_INT 14
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: ST_TO_ADDR
19364: GO 19683
19366: LD_INT 42
19368: DOUBLE
19369: EQUAL
19370: IFTRUE 19374
19372: GO 19400
19374: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19375: LD_ADDR_VAR 0 3
19379: PUSH
19380: LD_INT 21
19382: PUSH
19383: LD_INT 22
19385: PUSH
19386: LD_INT 23
19388: PUSH
19389: LD_INT 24
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: ST_TO_ADDR
19398: GO 19683
19400: LD_INT 43
19402: DOUBLE
19403: EQUAL
19404: IFTRUE 19408
19406: GO 19434
19408: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19409: LD_ADDR_VAR 0 3
19413: PUSH
19414: LD_INT 21
19416: PUSH
19417: LD_INT 22
19419: PUSH
19420: LD_INT 23
19422: PUSH
19423: LD_INT 24
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: ST_TO_ADDR
19432: GO 19683
19434: LD_INT 44
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19468
19442: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19443: LD_ADDR_VAR 0 3
19447: PUSH
19448: LD_INT 21
19450: PUSH
19451: LD_INT 22
19453: PUSH
19454: LD_INT 23
19456: PUSH
19457: LD_INT 24
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: ST_TO_ADDR
19466: GO 19683
19468: LD_INT 45
19470: DOUBLE
19471: EQUAL
19472: IFTRUE 19476
19474: GO 19502
19476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19477: LD_ADDR_VAR 0 3
19481: PUSH
19482: LD_INT 21
19484: PUSH
19485: LD_INT 22
19487: PUSH
19488: LD_INT 23
19490: PUSH
19491: LD_INT 24
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: ST_TO_ADDR
19500: GO 19683
19502: LD_INT 49
19504: DOUBLE
19505: EQUAL
19506: IFTRUE 19510
19508: GO 19536
19510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19511: LD_ADDR_VAR 0 3
19515: PUSH
19516: LD_INT 21
19518: PUSH
19519: LD_INT 22
19521: PUSH
19522: LD_INT 23
19524: PUSH
19525: LD_INT 24
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: ST_TO_ADDR
19534: GO 19683
19536: LD_INT 51
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19570
19544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19545: LD_ADDR_VAR 0 3
19549: PUSH
19550: LD_INT 21
19552: PUSH
19553: LD_INT 22
19555: PUSH
19556: LD_INT 23
19558: PUSH
19559: LD_INT 24
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: ST_TO_ADDR
19568: GO 19683
19570: LD_INT 52
19572: DOUBLE
19573: EQUAL
19574: IFTRUE 19578
19576: GO 19604
19578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19579: LD_ADDR_VAR 0 3
19583: PUSH
19584: LD_INT 21
19586: PUSH
19587: LD_INT 22
19589: PUSH
19590: LD_INT 23
19592: PUSH
19593: LD_INT 24
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: ST_TO_ADDR
19602: GO 19683
19604: LD_INT 53
19606: DOUBLE
19607: EQUAL
19608: IFTRUE 19612
19610: GO 19630
19612: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19613: LD_ADDR_VAR 0 3
19617: PUSH
19618: LD_INT 23
19620: PUSH
19621: LD_INT 24
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: ST_TO_ADDR
19628: GO 19683
19630: LD_INT 46
19632: DOUBLE
19633: EQUAL
19634: IFTRUE 19638
19636: GO 19656
19638: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19639: LD_ADDR_VAR 0 3
19643: PUSH
19644: LD_INT 23
19646: PUSH
19647: LD_INT 24
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: ST_TO_ADDR
19654: GO 19683
19656: LD_INT 47
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19682
19664: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19665: LD_ADDR_VAR 0 3
19669: PUSH
19670: LD_INT 23
19672: PUSH
19673: LD_INT 24
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: ST_TO_ADDR
19680: GO 19683
19682: POP
// result := ( chassis in result ) ;
19683: LD_ADDR_VAR 0 3
19687: PUSH
19688: LD_VAR 0 1
19692: PUSH
19693: LD_VAR 0 3
19697: IN
19698: ST_TO_ADDR
// end ;
19699: LD_VAR 0 3
19703: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19704: LD_INT 0
19706: PPUSH
19707: PPUSH
19708: PPUSH
19709: PPUSH
19710: PPUSH
19711: PPUSH
19712: PPUSH
// result := array ;
19713: LD_ADDR_VAR 0 5
19717: PUSH
19718: LD_VAR 0 1
19722: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19723: LD_VAR 0 1
19727: NOT
19728: PUSH
19729: LD_VAR 0 2
19733: NOT
19734: OR
19735: PUSH
19736: LD_VAR 0 3
19740: NOT
19741: OR
19742: PUSH
19743: LD_VAR 0 2
19747: PUSH
19748: LD_VAR 0 1
19752: GREATER
19753: OR
19754: PUSH
19755: LD_VAR 0 3
19759: PUSH
19760: LD_VAR 0 1
19764: GREATER
19765: OR
19766: IFFALSE 19770
// exit ;
19768: GO 20066
// if direction then
19770: LD_VAR 0 4
19774: IFFALSE 19838
// begin d := 1 ;
19776: LD_ADDR_VAR 0 9
19780: PUSH
19781: LD_INT 1
19783: ST_TO_ADDR
// if i_from > i_to then
19784: LD_VAR 0 2
19788: PUSH
19789: LD_VAR 0 3
19793: GREATER
19794: IFFALSE 19820
// length := ( array - i_from ) + i_to else
19796: LD_ADDR_VAR 0 11
19800: PUSH
19801: LD_VAR 0 1
19805: PUSH
19806: LD_VAR 0 2
19810: MINUS
19811: PUSH
19812: LD_VAR 0 3
19816: PLUS
19817: ST_TO_ADDR
19818: GO 19836
// length := i_to - i_from ;
19820: LD_ADDR_VAR 0 11
19824: PUSH
19825: LD_VAR 0 3
19829: PUSH
19830: LD_VAR 0 2
19834: MINUS
19835: ST_TO_ADDR
// end else
19836: GO 19899
// begin d := - 1 ;
19838: LD_ADDR_VAR 0 9
19842: PUSH
19843: LD_INT 1
19845: NEG
19846: ST_TO_ADDR
// if i_from > i_to then
19847: LD_VAR 0 2
19851: PUSH
19852: LD_VAR 0 3
19856: GREATER
19857: IFFALSE 19877
// length := i_from - i_to else
19859: LD_ADDR_VAR 0 11
19863: PUSH
19864: LD_VAR 0 2
19868: PUSH
19869: LD_VAR 0 3
19873: MINUS
19874: ST_TO_ADDR
19875: GO 19899
// length := ( array - i_to ) + i_from ;
19877: LD_ADDR_VAR 0 11
19881: PUSH
19882: LD_VAR 0 1
19886: PUSH
19887: LD_VAR 0 3
19891: MINUS
19892: PUSH
19893: LD_VAR 0 2
19897: PLUS
19898: ST_TO_ADDR
// end ; if not length then
19899: LD_VAR 0 11
19903: NOT
19904: IFFALSE 19908
// exit ;
19906: GO 20066
// tmp := array ;
19908: LD_ADDR_VAR 0 10
19912: PUSH
19913: LD_VAR 0 1
19917: ST_TO_ADDR
// for i = 1 to length do
19918: LD_ADDR_VAR 0 6
19922: PUSH
19923: DOUBLE
19924: LD_INT 1
19926: DEC
19927: ST_TO_ADDR
19928: LD_VAR 0 11
19932: PUSH
19933: FOR_TO
19934: IFFALSE 20054
// begin for j = 1 to array do
19936: LD_ADDR_VAR 0 7
19940: PUSH
19941: DOUBLE
19942: LD_INT 1
19944: DEC
19945: ST_TO_ADDR
19946: LD_VAR 0 1
19950: PUSH
19951: FOR_TO
19952: IFFALSE 20040
// begin k := j + d ;
19954: LD_ADDR_VAR 0 8
19958: PUSH
19959: LD_VAR 0 7
19963: PUSH
19964: LD_VAR 0 9
19968: PLUS
19969: ST_TO_ADDR
// if k > array then
19970: LD_VAR 0 8
19974: PUSH
19975: LD_VAR 0 1
19979: GREATER
19980: IFFALSE 19990
// k := 1 ;
19982: LD_ADDR_VAR 0 8
19986: PUSH
19987: LD_INT 1
19989: ST_TO_ADDR
// if not k then
19990: LD_VAR 0 8
19994: NOT
19995: IFFALSE 20007
// k := array ;
19997: LD_ADDR_VAR 0 8
20001: PUSH
20002: LD_VAR 0 1
20006: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20007: LD_ADDR_VAR 0 10
20011: PUSH
20012: LD_VAR 0 10
20016: PPUSH
20017: LD_VAR 0 8
20021: PPUSH
20022: LD_VAR 0 1
20026: PUSH
20027: LD_VAR 0 7
20031: ARRAY
20032: PPUSH
20033: CALL_OW 1
20037: ST_TO_ADDR
// end ;
20038: GO 19951
20040: POP
20041: POP
// array := tmp ;
20042: LD_ADDR_VAR 0 1
20046: PUSH
20047: LD_VAR 0 10
20051: ST_TO_ADDR
// end ;
20052: GO 19933
20054: POP
20055: POP
// result := array ;
20056: LD_ADDR_VAR 0 5
20060: PUSH
20061: LD_VAR 0 1
20065: ST_TO_ADDR
// end ;
20066: LD_VAR 0 5
20070: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20071: LD_INT 0
20073: PPUSH
20074: PPUSH
// result := 0 ;
20075: LD_ADDR_VAR 0 3
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// if not array or not value in array then
20083: LD_VAR 0 1
20087: NOT
20088: PUSH
20089: LD_VAR 0 2
20093: PUSH
20094: LD_VAR 0 1
20098: IN
20099: NOT
20100: OR
20101: IFFALSE 20105
// exit ;
20103: GO 20159
// for i = 1 to array do
20105: LD_ADDR_VAR 0 4
20109: PUSH
20110: DOUBLE
20111: LD_INT 1
20113: DEC
20114: ST_TO_ADDR
20115: LD_VAR 0 1
20119: PUSH
20120: FOR_TO
20121: IFFALSE 20157
// if value = array [ i ] then
20123: LD_VAR 0 2
20127: PUSH
20128: LD_VAR 0 1
20132: PUSH
20133: LD_VAR 0 4
20137: ARRAY
20138: EQUAL
20139: IFFALSE 20155
// begin result := i ;
20141: LD_ADDR_VAR 0 3
20145: PUSH
20146: LD_VAR 0 4
20150: ST_TO_ADDR
// exit ;
20151: POP
20152: POP
20153: GO 20159
// end ;
20155: GO 20120
20157: POP
20158: POP
// end ;
20159: LD_VAR 0 3
20163: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20164: LD_INT 0
20166: PPUSH
// vc_chassis := chassis ;
20167: LD_ADDR_OWVAR 37
20171: PUSH
20172: LD_VAR 0 1
20176: ST_TO_ADDR
// vc_engine := engine ;
20177: LD_ADDR_OWVAR 39
20181: PUSH
20182: LD_VAR 0 2
20186: ST_TO_ADDR
// vc_control := control ;
20187: LD_ADDR_OWVAR 38
20191: PUSH
20192: LD_VAR 0 3
20196: ST_TO_ADDR
// vc_weapon := weapon ;
20197: LD_ADDR_OWVAR 40
20201: PUSH
20202: LD_VAR 0 4
20206: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20207: LD_ADDR_OWVAR 41
20211: PUSH
20212: LD_VAR 0 5
20216: ST_TO_ADDR
// end ;
20217: LD_VAR 0 6
20221: RET
// export function WantPlant ( unit ) ; var task ; begin
20222: LD_INT 0
20224: PPUSH
20225: PPUSH
// result := false ;
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_INT 0
20233: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20234: LD_ADDR_VAR 0 3
20238: PUSH
20239: LD_VAR 0 1
20243: PPUSH
20244: CALL_OW 437
20248: ST_TO_ADDR
// if task then
20249: LD_VAR 0 3
20253: IFFALSE 20281
// if task [ 1 ] [ 1 ] = p then
20255: LD_VAR 0 3
20259: PUSH
20260: LD_INT 1
20262: ARRAY
20263: PUSH
20264: LD_INT 1
20266: ARRAY
20267: PUSH
20268: LD_STRING p
20270: EQUAL
20271: IFFALSE 20281
// result := true ;
20273: LD_ADDR_VAR 0 2
20277: PUSH
20278: LD_INT 1
20280: ST_TO_ADDR
// end ;
20281: LD_VAR 0 2
20285: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20286: LD_INT 0
20288: PPUSH
20289: PPUSH
20290: PPUSH
20291: PPUSH
// if pos < 1 then
20292: LD_VAR 0 2
20296: PUSH
20297: LD_INT 1
20299: LESS
20300: IFFALSE 20304
// exit ;
20302: GO 20607
// if pos = 1 then
20304: LD_VAR 0 2
20308: PUSH
20309: LD_INT 1
20311: EQUAL
20312: IFFALSE 20345
// result := Replace ( arr , pos [ 1 ] , value ) else
20314: LD_ADDR_VAR 0 4
20318: PUSH
20319: LD_VAR 0 1
20323: PPUSH
20324: LD_VAR 0 2
20328: PUSH
20329: LD_INT 1
20331: ARRAY
20332: PPUSH
20333: LD_VAR 0 3
20337: PPUSH
20338: CALL_OW 1
20342: ST_TO_ADDR
20343: GO 20607
// begin tmp := arr ;
20345: LD_ADDR_VAR 0 6
20349: PUSH
20350: LD_VAR 0 1
20354: ST_TO_ADDR
// s_arr := [ tmp ] ;
20355: LD_ADDR_VAR 0 7
20359: PUSH
20360: LD_VAR 0 6
20364: PUSH
20365: EMPTY
20366: LIST
20367: ST_TO_ADDR
// for i = 1 to pos - 1 do
20368: LD_ADDR_VAR 0 5
20372: PUSH
20373: DOUBLE
20374: LD_INT 1
20376: DEC
20377: ST_TO_ADDR
20378: LD_VAR 0 2
20382: PUSH
20383: LD_INT 1
20385: MINUS
20386: PUSH
20387: FOR_TO
20388: IFFALSE 20433
// begin tmp := tmp [ pos [ i ] ] ;
20390: LD_ADDR_VAR 0 6
20394: PUSH
20395: LD_VAR 0 6
20399: PUSH
20400: LD_VAR 0 2
20404: PUSH
20405: LD_VAR 0 5
20409: ARRAY
20410: ARRAY
20411: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20412: LD_ADDR_VAR 0 7
20416: PUSH
20417: LD_VAR 0 7
20421: PUSH
20422: LD_VAR 0 6
20426: PUSH
20427: EMPTY
20428: LIST
20429: ADD
20430: ST_TO_ADDR
// end ;
20431: GO 20387
20433: POP
20434: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20435: LD_ADDR_VAR 0 6
20439: PUSH
20440: LD_VAR 0 6
20444: PPUSH
20445: LD_VAR 0 2
20449: PUSH
20450: LD_VAR 0 2
20454: ARRAY
20455: PPUSH
20456: LD_VAR 0 3
20460: PPUSH
20461: CALL_OW 1
20465: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20466: LD_ADDR_VAR 0 7
20470: PUSH
20471: LD_VAR 0 7
20475: PPUSH
20476: LD_VAR 0 7
20480: PPUSH
20481: LD_VAR 0 6
20485: PPUSH
20486: CALL_OW 1
20490: ST_TO_ADDR
// for i = s_arr downto 2 do
20491: LD_ADDR_VAR 0 5
20495: PUSH
20496: DOUBLE
20497: LD_VAR 0 7
20501: INC
20502: ST_TO_ADDR
20503: LD_INT 2
20505: PUSH
20506: FOR_DOWNTO
20507: IFFALSE 20591
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20509: LD_ADDR_VAR 0 6
20513: PUSH
20514: LD_VAR 0 7
20518: PUSH
20519: LD_VAR 0 5
20523: PUSH
20524: LD_INT 1
20526: MINUS
20527: ARRAY
20528: PPUSH
20529: LD_VAR 0 2
20533: PUSH
20534: LD_VAR 0 5
20538: PUSH
20539: LD_INT 1
20541: MINUS
20542: ARRAY
20543: PPUSH
20544: LD_VAR 0 7
20548: PUSH
20549: LD_VAR 0 5
20553: ARRAY
20554: PPUSH
20555: CALL_OW 1
20559: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20560: LD_ADDR_VAR 0 7
20564: PUSH
20565: LD_VAR 0 7
20569: PPUSH
20570: LD_VAR 0 5
20574: PUSH
20575: LD_INT 1
20577: MINUS
20578: PPUSH
20579: LD_VAR 0 6
20583: PPUSH
20584: CALL_OW 1
20588: ST_TO_ADDR
// end ;
20589: GO 20506
20591: POP
20592: POP
// result := s_arr [ 1 ] ;
20593: LD_ADDR_VAR 0 4
20597: PUSH
20598: LD_VAR 0 7
20602: PUSH
20603: LD_INT 1
20605: ARRAY
20606: ST_TO_ADDR
// end ; end ;
20607: LD_VAR 0 4
20611: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20612: LD_INT 0
20614: PPUSH
20615: PPUSH
// if not list then
20616: LD_VAR 0 1
20620: NOT
20621: IFFALSE 20625
// exit ;
20623: GO 20716
// i := list [ pos1 ] ;
20625: LD_ADDR_VAR 0 5
20629: PUSH
20630: LD_VAR 0 1
20634: PUSH
20635: LD_VAR 0 2
20639: ARRAY
20640: ST_TO_ADDR
// if not i then
20641: LD_VAR 0 5
20645: NOT
20646: IFFALSE 20650
// exit ;
20648: GO 20716
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20650: LD_ADDR_VAR 0 1
20654: PUSH
20655: LD_VAR 0 1
20659: PPUSH
20660: LD_VAR 0 2
20664: PPUSH
20665: LD_VAR 0 1
20669: PUSH
20670: LD_VAR 0 3
20674: ARRAY
20675: PPUSH
20676: CALL_OW 1
20680: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20681: LD_ADDR_VAR 0 1
20685: PUSH
20686: LD_VAR 0 1
20690: PPUSH
20691: LD_VAR 0 3
20695: PPUSH
20696: LD_VAR 0 5
20700: PPUSH
20701: CALL_OW 1
20705: ST_TO_ADDR
// result := list ;
20706: LD_ADDR_VAR 0 4
20710: PUSH
20711: LD_VAR 0 1
20715: ST_TO_ADDR
// end ;
20716: LD_VAR 0 4
20720: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20721: LD_INT 0
20723: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20724: LD_ADDR_VAR 0 5
20728: PUSH
20729: LD_VAR 0 1
20733: PPUSH
20734: CALL_OW 250
20738: PPUSH
20739: LD_VAR 0 1
20743: PPUSH
20744: CALL_OW 251
20748: PPUSH
20749: LD_VAR 0 2
20753: PPUSH
20754: LD_VAR 0 3
20758: PPUSH
20759: LD_VAR 0 4
20763: PPUSH
20764: CALL 20774 0 5
20768: ST_TO_ADDR
// end ;
20769: LD_VAR 0 5
20773: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20774: LD_INT 0
20776: PPUSH
20777: PPUSH
20778: PPUSH
20779: PPUSH
// if not list then
20780: LD_VAR 0 3
20784: NOT
20785: IFFALSE 20789
// exit ;
20787: GO 21177
// result := [ ] ;
20789: LD_ADDR_VAR 0 6
20793: PUSH
20794: EMPTY
20795: ST_TO_ADDR
// for i in list do
20796: LD_ADDR_VAR 0 7
20800: PUSH
20801: LD_VAR 0 3
20805: PUSH
20806: FOR_IN
20807: IFFALSE 21009
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20809: LD_ADDR_VAR 0 9
20813: PUSH
20814: LD_VAR 0 7
20818: PPUSH
20819: LD_VAR 0 1
20823: PPUSH
20824: LD_VAR 0 2
20828: PPUSH
20829: CALL_OW 297
20833: ST_TO_ADDR
// if not result then
20834: LD_VAR 0 6
20838: NOT
20839: IFFALSE 20865
// result := [ [ i , tmp ] ] else
20841: LD_ADDR_VAR 0 6
20845: PUSH
20846: LD_VAR 0 7
20850: PUSH
20851: LD_VAR 0 9
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: ST_TO_ADDR
20863: GO 21007
// begin if result [ result ] [ 2 ] < tmp then
20865: LD_VAR 0 6
20869: PUSH
20870: LD_VAR 0 6
20874: ARRAY
20875: PUSH
20876: LD_INT 2
20878: ARRAY
20879: PUSH
20880: LD_VAR 0 9
20884: LESS
20885: IFFALSE 20927
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20887: LD_ADDR_VAR 0 6
20891: PUSH
20892: LD_VAR 0 6
20896: PPUSH
20897: LD_VAR 0 6
20901: PUSH
20902: LD_INT 1
20904: PLUS
20905: PPUSH
20906: LD_VAR 0 7
20910: PUSH
20911: LD_VAR 0 9
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PPUSH
20920: CALL_OW 2
20924: ST_TO_ADDR
20925: GO 21007
// for j = 1 to result do
20927: LD_ADDR_VAR 0 8
20931: PUSH
20932: DOUBLE
20933: LD_INT 1
20935: DEC
20936: ST_TO_ADDR
20937: LD_VAR 0 6
20941: PUSH
20942: FOR_TO
20943: IFFALSE 21005
// begin if tmp < result [ j ] [ 2 ] then
20945: LD_VAR 0 9
20949: PUSH
20950: LD_VAR 0 6
20954: PUSH
20955: LD_VAR 0 8
20959: ARRAY
20960: PUSH
20961: LD_INT 2
20963: ARRAY
20964: LESS
20965: IFFALSE 21003
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20967: LD_ADDR_VAR 0 6
20971: PUSH
20972: LD_VAR 0 6
20976: PPUSH
20977: LD_VAR 0 8
20981: PPUSH
20982: LD_VAR 0 7
20986: PUSH
20987: LD_VAR 0 9
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PPUSH
20996: CALL_OW 2
21000: ST_TO_ADDR
// break ;
21001: GO 21005
// end ; end ;
21003: GO 20942
21005: POP
21006: POP
// end ; end ;
21007: GO 20806
21009: POP
21010: POP
// if result and not asc then
21011: LD_VAR 0 6
21015: PUSH
21016: LD_VAR 0 4
21020: NOT
21021: AND
21022: IFFALSE 21097
// begin tmp := result ;
21024: LD_ADDR_VAR 0 9
21028: PUSH
21029: LD_VAR 0 6
21033: ST_TO_ADDR
// for i = tmp downto 1 do
21034: LD_ADDR_VAR 0 7
21038: PUSH
21039: DOUBLE
21040: LD_VAR 0 9
21044: INC
21045: ST_TO_ADDR
21046: LD_INT 1
21048: PUSH
21049: FOR_DOWNTO
21050: IFFALSE 21095
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21052: LD_ADDR_VAR 0 6
21056: PUSH
21057: LD_VAR 0 6
21061: PPUSH
21062: LD_VAR 0 9
21066: PUSH
21067: LD_VAR 0 7
21071: MINUS
21072: PUSH
21073: LD_INT 1
21075: PLUS
21076: PPUSH
21077: LD_VAR 0 9
21081: PUSH
21082: LD_VAR 0 7
21086: ARRAY
21087: PPUSH
21088: CALL_OW 1
21092: ST_TO_ADDR
21093: GO 21049
21095: POP
21096: POP
// end ; tmp := [ ] ;
21097: LD_ADDR_VAR 0 9
21101: PUSH
21102: EMPTY
21103: ST_TO_ADDR
// if mode then
21104: LD_VAR 0 5
21108: IFFALSE 21177
// begin for i = 1 to result do
21110: LD_ADDR_VAR 0 7
21114: PUSH
21115: DOUBLE
21116: LD_INT 1
21118: DEC
21119: ST_TO_ADDR
21120: LD_VAR 0 6
21124: PUSH
21125: FOR_TO
21126: IFFALSE 21165
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21128: LD_ADDR_VAR 0 9
21132: PUSH
21133: LD_VAR 0 9
21137: PPUSH
21138: LD_VAR 0 7
21142: PPUSH
21143: LD_VAR 0 6
21147: PUSH
21148: LD_VAR 0 7
21152: ARRAY
21153: PUSH
21154: LD_INT 1
21156: ARRAY
21157: PPUSH
21158: CALL_OW 1
21162: ST_TO_ADDR
21163: GO 21125
21165: POP
21166: POP
// result := tmp ;
21167: LD_ADDR_VAR 0 6
21171: PUSH
21172: LD_VAR 0 9
21176: ST_TO_ADDR
// end ; end ;
21177: LD_VAR 0 6
21181: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21182: LD_INT 0
21184: PPUSH
21185: PPUSH
21186: PPUSH
21187: PPUSH
21188: PPUSH
21189: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21190: LD_ADDR_VAR 0 5
21194: PUSH
21195: LD_INT 0
21197: PUSH
21198: LD_INT 0
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: EMPTY
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: ST_TO_ADDR
// if not x or not y then
21212: LD_VAR 0 2
21216: NOT
21217: PUSH
21218: LD_VAR 0 3
21222: NOT
21223: OR
21224: IFFALSE 21228
// exit ;
21226: GO 22878
// if not range then
21228: LD_VAR 0 4
21232: NOT
21233: IFFALSE 21243
// range := 10 ;
21235: LD_ADDR_VAR 0 4
21239: PUSH
21240: LD_INT 10
21242: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21243: LD_ADDR_VAR 0 8
21247: PUSH
21248: LD_INT 81
21250: PUSH
21251: LD_VAR 0 1
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 92
21262: PUSH
21263: LD_VAR 0 2
21267: PUSH
21268: LD_VAR 0 3
21272: PUSH
21273: LD_VAR 0 4
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 3
21286: PUSH
21287: LD_INT 21
21289: PUSH
21290: LD_INT 3
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: LIST
21305: PPUSH
21306: CALL_OW 69
21310: ST_TO_ADDR
// if not tmp then
21311: LD_VAR 0 8
21315: NOT
21316: IFFALSE 21320
// exit ;
21318: GO 22878
// for i in tmp do
21320: LD_ADDR_VAR 0 6
21324: PUSH
21325: LD_VAR 0 8
21329: PUSH
21330: FOR_IN
21331: IFFALSE 22853
// begin points := [ 0 , 0 , 0 ] ;
21333: LD_ADDR_VAR 0 9
21337: PUSH
21338: LD_INT 0
21340: PUSH
21341: LD_INT 0
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: ST_TO_ADDR
// bpoints := 1 ;
21352: LD_ADDR_VAR 0 10
21356: PUSH
21357: LD_INT 1
21359: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21360: LD_VAR 0 6
21364: PPUSH
21365: CALL_OW 247
21369: PUSH
21370: LD_INT 1
21372: DOUBLE
21373: EQUAL
21374: IFTRUE 21378
21376: GO 21956
21378: POP
// begin if GetClass ( i ) = 1 then
21379: LD_VAR 0 6
21383: PPUSH
21384: CALL_OW 257
21388: PUSH
21389: LD_INT 1
21391: EQUAL
21392: IFFALSE 21413
// points := [ 10 , 5 , 3 ] ;
21394: LD_ADDR_VAR 0 9
21398: PUSH
21399: LD_INT 10
21401: PUSH
21402: LD_INT 5
21404: PUSH
21405: LD_INT 3
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21413: LD_VAR 0 6
21417: PPUSH
21418: CALL_OW 257
21422: PUSH
21423: LD_INT 2
21425: PUSH
21426: LD_INT 3
21428: PUSH
21429: LD_INT 4
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: IN
21437: IFFALSE 21458
// points := [ 3 , 2 , 1 ] ;
21439: LD_ADDR_VAR 0 9
21443: PUSH
21444: LD_INT 3
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21458: LD_VAR 0 6
21462: PPUSH
21463: CALL_OW 257
21467: PUSH
21468: LD_INT 5
21470: EQUAL
21471: IFFALSE 21492
// points := [ 130 , 5 , 2 ] ;
21473: LD_ADDR_VAR 0 9
21477: PUSH
21478: LD_INT 130
21480: PUSH
21481: LD_INT 5
21483: PUSH
21484: LD_INT 2
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: LIST
21491: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21492: LD_VAR 0 6
21496: PPUSH
21497: CALL_OW 257
21501: PUSH
21502: LD_INT 8
21504: EQUAL
21505: IFFALSE 21526
// points := [ 35 , 35 , 30 ] ;
21507: LD_ADDR_VAR 0 9
21511: PUSH
21512: LD_INT 35
21514: PUSH
21515: LD_INT 35
21517: PUSH
21518: LD_INT 30
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21526: LD_VAR 0 6
21530: PPUSH
21531: CALL_OW 257
21535: PUSH
21536: LD_INT 9
21538: EQUAL
21539: IFFALSE 21560
// points := [ 20 , 55 , 40 ] ;
21541: LD_ADDR_VAR 0 9
21545: PUSH
21546: LD_INT 20
21548: PUSH
21549: LD_INT 55
21551: PUSH
21552: LD_INT 40
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21560: LD_VAR 0 6
21564: PPUSH
21565: CALL_OW 257
21569: PUSH
21570: LD_INT 12
21572: PUSH
21573: LD_INT 16
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: IN
21580: IFFALSE 21601
// points := [ 5 , 3 , 2 ] ;
21582: LD_ADDR_VAR 0 9
21586: PUSH
21587: LD_INT 5
21589: PUSH
21590: LD_INT 3
21592: PUSH
21593: LD_INT 2
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21601: LD_VAR 0 6
21605: PPUSH
21606: CALL_OW 257
21610: PUSH
21611: LD_INT 17
21613: EQUAL
21614: IFFALSE 21635
// points := [ 100 , 50 , 75 ] ;
21616: LD_ADDR_VAR 0 9
21620: PUSH
21621: LD_INT 100
21623: PUSH
21624: LD_INT 50
21626: PUSH
21627: LD_INT 75
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21635: LD_VAR 0 6
21639: PPUSH
21640: CALL_OW 257
21644: PUSH
21645: LD_INT 15
21647: EQUAL
21648: IFFALSE 21669
// points := [ 10 , 5 , 3 ] ;
21650: LD_ADDR_VAR 0 9
21654: PUSH
21655: LD_INT 10
21657: PUSH
21658: LD_INT 5
21660: PUSH
21661: LD_INT 3
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: LIST
21668: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21669: LD_VAR 0 6
21673: PPUSH
21674: CALL_OW 257
21678: PUSH
21679: LD_INT 14
21681: EQUAL
21682: IFFALSE 21703
// points := [ 10 , 0 , 0 ] ;
21684: LD_ADDR_VAR 0 9
21688: PUSH
21689: LD_INT 10
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: LIST
21702: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21703: LD_VAR 0 6
21707: PPUSH
21708: CALL_OW 257
21712: PUSH
21713: LD_INT 11
21715: EQUAL
21716: IFFALSE 21737
// points := [ 30 , 10 , 5 ] ;
21718: LD_ADDR_VAR 0 9
21722: PUSH
21723: LD_INT 30
21725: PUSH
21726: LD_INT 10
21728: PUSH
21729: LD_INT 5
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: LIST
21736: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21737: LD_VAR 0 1
21741: PPUSH
21742: LD_INT 5
21744: PPUSH
21745: CALL_OW 321
21749: PUSH
21750: LD_INT 2
21752: EQUAL
21753: IFFALSE 21770
// bpoints := bpoints * 1.8 ;
21755: LD_ADDR_VAR 0 10
21759: PUSH
21760: LD_VAR 0 10
21764: PUSH
21765: LD_REAL  1.80000000000000E+0000
21768: MUL
21769: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21770: LD_VAR 0 6
21774: PPUSH
21775: CALL_OW 257
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: LD_INT 3
21788: PUSH
21789: LD_INT 4
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: IN
21798: PUSH
21799: LD_VAR 0 1
21803: PPUSH
21804: LD_INT 51
21806: PPUSH
21807: CALL_OW 321
21811: PUSH
21812: LD_INT 2
21814: EQUAL
21815: AND
21816: IFFALSE 21833
// bpoints := bpoints * 1.2 ;
21818: LD_ADDR_VAR 0 10
21822: PUSH
21823: LD_VAR 0 10
21827: PUSH
21828: LD_REAL  1.20000000000000E+0000
21831: MUL
21832: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21833: LD_VAR 0 6
21837: PPUSH
21838: CALL_OW 257
21842: PUSH
21843: LD_INT 5
21845: PUSH
21846: LD_INT 7
21848: PUSH
21849: LD_INT 9
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: IN
21857: PUSH
21858: LD_VAR 0 1
21862: PPUSH
21863: LD_INT 52
21865: PPUSH
21866: CALL_OW 321
21870: PUSH
21871: LD_INT 2
21873: EQUAL
21874: AND
21875: IFFALSE 21892
// bpoints := bpoints * 1.5 ;
21877: LD_ADDR_VAR 0 10
21881: PUSH
21882: LD_VAR 0 10
21886: PUSH
21887: LD_REAL  1.50000000000000E+0000
21890: MUL
21891: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21892: LD_VAR 0 1
21896: PPUSH
21897: LD_INT 66
21899: PPUSH
21900: CALL_OW 321
21904: PUSH
21905: LD_INT 2
21907: EQUAL
21908: IFFALSE 21925
// bpoints := bpoints * 1.1 ;
21910: LD_ADDR_VAR 0 10
21914: PUSH
21915: LD_VAR 0 10
21919: PUSH
21920: LD_REAL  1.10000000000000E+0000
21923: MUL
21924: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21925: LD_ADDR_VAR 0 10
21929: PUSH
21930: LD_VAR 0 10
21934: PUSH
21935: LD_VAR 0 6
21939: PPUSH
21940: LD_INT 1
21942: PPUSH
21943: CALL_OW 259
21947: PUSH
21948: LD_REAL  1.15000000000000E+0000
21951: MUL
21952: MUL
21953: ST_TO_ADDR
// end ; unit_vehicle :
21954: GO 22782
21956: LD_INT 2
21958: DOUBLE
21959: EQUAL
21960: IFTRUE 21964
21962: GO 22770
21964: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21965: LD_VAR 0 6
21969: PPUSH
21970: CALL_OW 264
21974: PUSH
21975: LD_INT 2
21977: PUSH
21978: LD_INT 42
21980: PUSH
21981: LD_INT 24
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: IN
21989: IFFALSE 22010
// points := [ 25 , 5 , 3 ] ;
21991: LD_ADDR_VAR 0 9
21995: PUSH
21996: LD_INT 25
21998: PUSH
21999: LD_INT 5
22001: PUSH
22002: LD_INT 3
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22010: LD_VAR 0 6
22014: PPUSH
22015: CALL_OW 264
22019: PUSH
22020: LD_INT 4
22022: PUSH
22023: LD_INT 43
22025: PUSH
22026: LD_INT 25
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: IN
22034: IFFALSE 22055
// points := [ 40 , 15 , 5 ] ;
22036: LD_ADDR_VAR 0 9
22040: PUSH
22041: LD_INT 40
22043: PUSH
22044: LD_INT 15
22046: PUSH
22047: LD_INT 5
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22055: LD_VAR 0 6
22059: PPUSH
22060: CALL_OW 264
22064: PUSH
22065: LD_INT 3
22067: PUSH
22068: LD_INT 23
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: IN
22075: IFFALSE 22096
// points := [ 7 , 25 , 8 ] ;
22077: LD_ADDR_VAR 0 9
22081: PUSH
22082: LD_INT 7
22084: PUSH
22085: LD_INT 25
22087: PUSH
22088: LD_INT 8
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: LIST
22095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22096: LD_VAR 0 6
22100: PPUSH
22101: CALL_OW 264
22105: PUSH
22106: LD_INT 5
22108: PUSH
22109: LD_INT 27
22111: PUSH
22112: LD_INT 44
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: LIST
22119: IN
22120: IFFALSE 22141
// points := [ 14 , 50 , 16 ] ;
22122: LD_ADDR_VAR 0 9
22126: PUSH
22127: LD_INT 14
22129: PUSH
22130: LD_INT 50
22132: PUSH
22133: LD_INT 16
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22141: LD_VAR 0 6
22145: PPUSH
22146: CALL_OW 264
22150: PUSH
22151: LD_INT 6
22153: PUSH
22154: LD_INT 46
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: IN
22161: IFFALSE 22182
// points := [ 32 , 120 , 70 ] ;
22163: LD_ADDR_VAR 0 9
22167: PUSH
22168: LD_INT 32
22170: PUSH
22171: LD_INT 120
22173: PUSH
22174: LD_INT 70
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: LIST
22181: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22182: LD_VAR 0 6
22186: PPUSH
22187: CALL_OW 264
22191: PUSH
22192: LD_INT 7
22194: PUSH
22195: LD_INT 28
22197: PUSH
22198: LD_INT 45
22200: PUSH
22201: LD_INT 92
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: IN
22210: IFFALSE 22231
// points := [ 35 , 20 , 45 ] ;
22212: LD_ADDR_VAR 0 9
22216: PUSH
22217: LD_INT 35
22219: PUSH
22220: LD_INT 20
22222: PUSH
22223: LD_INT 45
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22231: LD_VAR 0 6
22235: PPUSH
22236: CALL_OW 264
22240: PUSH
22241: LD_INT 47
22243: PUSH
22244: EMPTY
22245: LIST
22246: IN
22247: IFFALSE 22268
// points := [ 67 , 45 , 75 ] ;
22249: LD_ADDR_VAR 0 9
22253: PUSH
22254: LD_INT 67
22256: PUSH
22257: LD_INT 45
22259: PUSH
22260: LD_INT 75
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22268: LD_VAR 0 6
22272: PPUSH
22273: CALL_OW 264
22277: PUSH
22278: LD_INT 26
22280: PUSH
22281: EMPTY
22282: LIST
22283: IN
22284: IFFALSE 22305
// points := [ 120 , 30 , 80 ] ;
22286: LD_ADDR_VAR 0 9
22290: PUSH
22291: LD_INT 120
22293: PUSH
22294: LD_INT 30
22296: PUSH
22297: LD_INT 80
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: LIST
22304: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22305: LD_VAR 0 6
22309: PPUSH
22310: CALL_OW 264
22314: PUSH
22315: LD_INT 22
22317: PUSH
22318: EMPTY
22319: LIST
22320: IN
22321: IFFALSE 22342
// points := [ 40 , 1 , 1 ] ;
22323: LD_ADDR_VAR 0 9
22327: PUSH
22328: LD_INT 40
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 1
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: LIST
22341: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22342: LD_VAR 0 6
22346: PPUSH
22347: CALL_OW 264
22351: PUSH
22352: LD_INT 29
22354: PUSH
22355: EMPTY
22356: LIST
22357: IN
22358: IFFALSE 22379
// points := [ 70 , 200 , 400 ] ;
22360: LD_ADDR_VAR 0 9
22364: PUSH
22365: LD_INT 70
22367: PUSH
22368: LD_INT 200
22370: PUSH
22371: LD_INT 400
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: LIST
22378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22379: LD_VAR 0 6
22383: PPUSH
22384: CALL_OW 264
22388: PUSH
22389: LD_INT 14
22391: PUSH
22392: LD_INT 53
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: IN
22399: IFFALSE 22420
// points := [ 40 , 10 , 20 ] ;
22401: LD_ADDR_VAR 0 9
22405: PUSH
22406: LD_INT 40
22408: PUSH
22409: LD_INT 10
22411: PUSH
22412: LD_INT 20
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22420: LD_VAR 0 6
22424: PPUSH
22425: CALL_OW 264
22429: PUSH
22430: LD_INT 9
22432: PUSH
22433: EMPTY
22434: LIST
22435: IN
22436: IFFALSE 22457
// points := [ 5 , 70 , 20 ] ;
22438: LD_ADDR_VAR 0 9
22442: PUSH
22443: LD_INT 5
22445: PUSH
22446: LD_INT 70
22448: PUSH
22449: LD_INT 20
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22457: LD_VAR 0 6
22461: PPUSH
22462: CALL_OW 264
22466: PUSH
22467: LD_INT 10
22469: PUSH
22470: EMPTY
22471: LIST
22472: IN
22473: IFFALSE 22494
// points := [ 35 , 110 , 70 ] ;
22475: LD_ADDR_VAR 0 9
22479: PUSH
22480: LD_INT 35
22482: PUSH
22483: LD_INT 110
22485: PUSH
22486: LD_INT 70
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22494: LD_VAR 0 6
22498: PPUSH
22499: CALL_OW 265
22503: PUSH
22504: LD_INT 25
22506: EQUAL
22507: IFFALSE 22528
// points := [ 80 , 65 , 100 ] ;
22509: LD_ADDR_VAR 0 9
22513: PUSH
22514: LD_INT 80
22516: PUSH
22517: LD_INT 65
22519: PUSH
22520: LD_INT 100
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22528: LD_VAR 0 6
22532: PPUSH
22533: CALL_OW 263
22537: PUSH
22538: LD_INT 1
22540: EQUAL
22541: IFFALSE 22576
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22543: LD_ADDR_VAR 0 10
22547: PUSH
22548: LD_VAR 0 10
22552: PUSH
22553: LD_VAR 0 6
22557: PPUSH
22558: CALL_OW 311
22562: PPUSH
22563: LD_INT 3
22565: PPUSH
22566: CALL_OW 259
22570: PUSH
22571: LD_INT 4
22573: MUL
22574: MUL
22575: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22576: LD_VAR 0 6
22580: PPUSH
22581: CALL_OW 263
22585: PUSH
22586: LD_INT 2
22588: EQUAL
22589: IFFALSE 22640
// begin j := IsControledBy ( i ) ;
22591: LD_ADDR_VAR 0 7
22595: PUSH
22596: LD_VAR 0 6
22600: PPUSH
22601: CALL_OW 312
22605: ST_TO_ADDR
// if j then
22606: LD_VAR 0 7
22610: IFFALSE 22640
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22612: LD_ADDR_VAR 0 10
22616: PUSH
22617: LD_VAR 0 10
22621: PUSH
22622: LD_VAR 0 7
22626: PPUSH
22627: LD_INT 3
22629: PPUSH
22630: CALL_OW 259
22634: PUSH
22635: LD_INT 3
22637: MUL
22638: MUL
22639: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22640: LD_VAR 0 6
22644: PPUSH
22645: CALL_OW 264
22649: PUSH
22650: LD_INT 5
22652: PUSH
22653: LD_INT 6
22655: PUSH
22656: LD_INT 46
22658: PUSH
22659: LD_INT 44
22661: PUSH
22662: LD_INT 47
22664: PUSH
22665: LD_INT 45
22667: PUSH
22668: LD_INT 28
22670: PUSH
22671: LD_INT 7
22673: PUSH
22674: LD_INT 27
22676: PUSH
22677: LD_INT 29
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: IN
22692: PUSH
22693: LD_VAR 0 1
22697: PPUSH
22698: LD_INT 52
22700: PPUSH
22701: CALL_OW 321
22705: PUSH
22706: LD_INT 2
22708: EQUAL
22709: AND
22710: IFFALSE 22727
// bpoints := bpoints * 1.2 ;
22712: LD_ADDR_VAR 0 10
22716: PUSH
22717: LD_VAR 0 10
22721: PUSH
22722: LD_REAL  1.20000000000000E+0000
22725: MUL
22726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22727: LD_VAR 0 6
22731: PPUSH
22732: CALL_OW 264
22736: PUSH
22737: LD_INT 6
22739: PUSH
22740: LD_INT 46
22742: PUSH
22743: LD_INT 47
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: LIST
22750: IN
22751: IFFALSE 22768
// bpoints := bpoints * 1.2 ;
22753: LD_ADDR_VAR 0 10
22757: PUSH
22758: LD_VAR 0 10
22762: PUSH
22763: LD_REAL  1.20000000000000E+0000
22766: MUL
22767: ST_TO_ADDR
// end ; unit_building :
22768: GO 22782
22770: LD_INT 3
22772: DOUBLE
22773: EQUAL
22774: IFTRUE 22778
22776: GO 22781
22778: POP
// ; end ;
22779: GO 22782
22781: POP
// for j = 1 to 3 do
22782: LD_ADDR_VAR 0 7
22786: PUSH
22787: DOUBLE
22788: LD_INT 1
22790: DEC
22791: ST_TO_ADDR
22792: LD_INT 3
22794: PUSH
22795: FOR_TO
22796: IFFALSE 22849
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22798: LD_ADDR_VAR 0 5
22802: PUSH
22803: LD_VAR 0 5
22807: PPUSH
22808: LD_VAR 0 7
22812: PPUSH
22813: LD_VAR 0 5
22817: PUSH
22818: LD_VAR 0 7
22822: ARRAY
22823: PUSH
22824: LD_VAR 0 9
22828: PUSH
22829: LD_VAR 0 7
22833: ARRAY
22834: PUSH
22835: LD_VAR 0 10
22839: MUL
22840: PLUS
22841: PPUSH
22842: CALL_OW 1
22846: ST_TO_ADDR
22847: GO 22795
22849: POP
22850: POP
// end ;
22851: GO 21330
22853: POP
22854: POP
// result := Replace ( result , 4 , tmp ) ;
22855: LD_ADDR_VAR 0 5
22859: PUSH
22860: LD_VAR 0 5
22864: PPUSH
22865: LD_INT 4
22867: PPUSH
22868: LD_VAR 0 8
22872: PPUSH
22873: CALL_OW 1
22877: ST_TO_ADDR
// end ;
22878: LD_VAR 0 5
22882: RET
// export function DangerAtRange ( unit , range ) ; begin
22883: LD_INT 0
22885: PPUSH
// if not unit then
22886: LD_VAR 0 1
22890: NOT
22891: IFFALSE 22895
// exit ;
22893: GO 22940
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22895: LD_ADDR_VAR 0 3
22899: PUSH
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL_OW 255
22909: PPUSH
22910: LD_VAR 0 1
22914: PPUSH
22915: CALL_OW 250
22919: PPUSH
22920: LD_VAR 0 1
22924: PPUSH
22925: CALL_OW 251
22929: PPUSH
22930: LD_VAR 0 2
22934: PPUSH
22935: CALL 21182 0 4
22939: ST_TO_ADDR
// end ;
22940: LD_VAR 0 3
22944: RET
// export function DangerInArea ( side , area ) ; begin
22945: LD_INT 0
22947: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22948: LD_ADDR_VAR 0 3
22952: PUSH
22953: LD_VAR 0 2
22957: PPUSH
22958: LD_INT 81
22960: PUSH
22961: LD_VAR 0 1
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PPUSH
22970: CALL_OW 70
22974: ST_TO_ADDR
// end ;
22975: LD_VAR 0 3
22979: RET
// export function IsExtension ( b ) ; begin
22980: LD_INT 0
22982: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22983: LD_ADDR_VAR 0 2
22987: PUSH
22988: LD_VAR 0 1
22992: PUSH
22993: LD_INT 23
22995: PUSH
22996: LD_INT 20
22998: PUSH
22999: LD_INT 22
23001: PUSH
23002: LD_INT 17
23004: PUSH
23005: LD_INT 24
23007: PUSH
23008: LD_INT 21
23010: PUSH
23011: LD_INT 19
23013: PUSH
23014: LD_INT 16
23016: PUSH
23017: LD_INT 25
23019: PUSH
23020: LD_INT 18
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: IN
23035: ST_TO_ADDR
// end ;
23036: LD_VAR 0 2
23040: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23041: LD_INT 0
23043: PPUSH
23044: PPUSH
23045: PPUSH
// result := [ ] ;
23046: LD_ADDR_VAR 0 4
23050: PUSH
23051: EMPTY
23052: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23053: LD_ADDR_VAR 0 5
23057: PUSH
23058: LD_VAR 0 2
23062: PPUSH
23063: LD_INT 21
23065: PUSH
23066: LD_INT 3
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PPUSH
23073: CALL_OW 70
23077: ST_TO_ADDR
// if not tmp then
23078: LD_VAR 0 5
23082: NOT
23083: IFFALSE 23087
// exit ;
23085: GO 23151
// if checkLink then
23087: LD_VAR 0 3
23091: IFFALSE 23141
// begin for i in tmp do
23093: LD_ADDR_VAR 0 6
23097: PUSH
23098: LD_VAR 0 5
23102: PUSH
23103: FOR_IN
23104: IFFALSE 23139
// if GetBase ( i ) <> base then
23106: LD_VAR 0 6
23110: PPUSH
23111: CALL_OW 274
23115: PUSH
23116: LD_VAR 0 1
23120: NONEQUAL
23121: IFFALSE 23137
// ComLinkToBase ( base , i ) ;
23123: LD_VAR 0 1
23127: PPUSH
23128: LD_VAR 0 6
23132: PPUSH
23133: CALL_OW 169
23137: GO 23103
23139: POP
23140: POP
// end ; result := tmp ;
23141: LD_ADDR_VAR 0 4
23145: PUSH
23146: LD_VAR 0 5
23150: ST_TO_ADDR
// end ;
23151: LD_VAR 0 4
23155: RET
// export function ComComplete ( units , b ) ; var i ; begin
23156: LD_INT 0
23158: PPUSH
23159: PPUSH
// if not units then
23160: LD_VAR 0 1
23164: NOT
23165: IFFALSE 23169
// exit ;
23167: GO 23259
// for i in units do
23169: LD_ADDR_VAR 0 4
23173: PUSH
23174: LD_VAR 0 1
23178: PUSH
23179: FOR_IN
23180: IFFALSE 23257
// if BuildingStatus ( b ) = bs_build then
23182: LD_VAR 0 2
23186: PPUSH
23187: CALL_OW 461
23191: PUSH
23192: LD_INT 1
23194: EQUAL
23195: IFFALSE 23255
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23197: LD_VAR 0 4
23201: PPUSH
23202: LD_STRING h
23204: PUSH
23205: LD_VAR 0 2
23209: PPUSH
23210: CALL_OW 250
23214: PUSH
23215: LD_VAR 0 2
23219: PPUSH
23220: CALL_OW 251
23224: PUSH
23225: LD_VAR 0 2
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 0
23235: PUSH
23236: LD_INT 0
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: PUSH
23248: EMPTY
23249: LIST
23250: PPUSH
23251: CALL_OW 446
23255: GO 23179
23257: POP
23258: POP
// end ;
23259: LD_VAR 0 3
23263: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23264: LD_INT 0
23266: PPUSH
23267: PPUSH
23268: PPUSH
23269: PPUSH
23270: PPUSH
23271: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23272: LD_VAR 0 1
23276: NOT
23277: PUSH
23278: LD_VAR 0 1
23282: PPUSH
23283: CALL_OW 263
23287: PUSH
23288: LD_INT 2
23290: NONEQUAL
23291: OR
23292: IFFALSE 23296
// exit ;
23294: GO 23612
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23296: LD_ADDR_VAR 0 6
23300: PUSH
23301: LD_INT 22
23303: PUSH
23304: LD_VAR 0 1
23308: PPUSH
23309: CALL_OW 255
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: LD_INT 30
23323: PUSH
23324: LD_INT 36
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 34
23333: PUSH
23334: LD_INT 31
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PPUSH
23350: CALL_OW 69
23354: ST_TO_ADDR
// if not tmp then
23355: LD_VAR 0 6
23359: NOT
23360: IFFALSE 23364
// exit ;
23362: GO 23612
// result := [ ] ;
23364: LD_ADDR_VAR 0 2
23368: PUSH
23369: EMPTY
23370: ST_TO_ADDR
// for i in tmp do
23371: LD_ADDR_VAR 0 3
23375: PUSH
23376: LD_VAR 0 6
23380: PUSH
23381: FOR_IN
23382: IFFALSE 23453
// begin t := UnitsInside ( i ) ;
23384: LD_ADDR_VAR 0 4
23388: PUSH
23389: LD_VAR 0 3
23393: PPUSH
23394: CALL_OW 313
23398: ST_TO_ADDR
// if t then
23399: LD_VAR 0 4
23403: IFFALSE 23451
// for j in t do
23405: LD_ADDR_VAR 0 7
23409: PUSH
23410: LD_VAR 0 4
23414: PUSH
23415: FOR_IN
23416: IFFALSE 23449
// result := Replace ( result , result + 1 , j ) ;
23418: LD_ADDR_VAR 0 2
23422: PUSH
23423: LD_VAR 0 2
23427: PPUSH
23428: LD_VAR 0 2
23432: PUSH
23433: LD_INT 1
23435: PLUS
23436: PPUSH
23437: LD_VAR 0 7
23441: PPUSH
23442: CALL_OW 1
23446: ST_TO_ADDR
23447: GO 23415
23449: POP
23450: POP
// end ;
23451: GO 23381
23453: POP
23454: POP
// if not result then
23455: LD_VAR 0 2
23459: NOT
23460: IFFALSE 23464
// exit ;
23462: GO 23612
// mech := result [ 1 ] ;
23464: LD_ADDR_VAR 0 5
23468: PUSH
23469: LD_VAR 0 2
23473: PUSH
23474: LD_INT 1
23476: ARRAY
23477: ST_TO_ADDR
// if result > 1 then
23478: LD_VAR 0 2
23482: PUSH
23483: LD_INT 1
23485: GREATER
23486: IFFALSE 23598
// begin for i = 2 to result do
23488: LD_ADDR_VAR 0 3
23492: PUSH
23493: DOUBLE
23494: LD_INT 2
23496: DEC
23497: ST_TO_ADDR
23498: LD_VAR 0 2
23502: PUSH
23503: FOR_TO
23504: IFFALSE 23596
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23506: LD_ADDR_VAR 0 4
23510: PUSH
23511: LD_VAR 0 2
23515: PUSH
23516: LD_VAR 0 3
23520: ARRAY
23521: PPUSH
23522: LD_INT 3
23524: PPUSH
23525: CALL_OW 259
23529: PUSH
23530: LD_VAR 0 2
23534: PUSH
23535: LD_VAR 0 3
23539: ARRAY
23540: PPUSH
23541: CALL_OW 432
23545: MINUS
23546: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23547: LD_VAR 0 4
23551: PUSH
23552: LD_VAR 0 5
23556: PPUSH
23557: LD_INT 3
23559: PPUSH
23560: CALL_OW 259
23564: PUSH
23565: LD_VAR 0 5
23569: PPUSH
23570: CALL_OW 432
23574: MINUS
23575: GREATEREQUAL
23576: IFFALSE 23594
// mech := result [ i ] ;
23578: LD_ADDR_VAR 0 5
23582: PUSH
23583: LD_VAR 0 2
23587: PUSH
23588: LD_VAR 0 3
23592: ARRAY
23593: ST_TO_ADDR
// end ;
23594: GO 23503
23596: POP
23597: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23598: LD_VAR 0 1
23602: PPUSH
23603: LD_VAR 0 5
23607: PPUSH
23608: CALL_OW 135
// end ;
23612: LD_VAR 0 2
23616: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23617: LD_INT 0
23619: PPUSH
23620: PPUSH
23621: PPUSH
23622: PPUSH
23623: PPUSH
23624: PPUSH
23625: PPUSH
23626: PPUSH
23627: PPUSH
23628: PPUSH
23629: PPUSH
23630: PPUSH
23631: PPUSH
// result := [ ] ;
23632: LD_ADDR_VAR 0 7
23636: PUSH
23637: EMPTY
23638: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23639: LD_VAR 0 1
23643: PPUSH
23644: CALL_OW 266
23648: PUSH
23649: LD_INT 0
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: IN
23659: NOT
23660: IFFALSE 23664
// exit ;
23662: GO 25298
// if name then
23664: LD_VAR 0 3
23668: IFFALSE 23684
// SetBName ( base_dep , name ) ;
23670: LD_VAR 0 1
23674: PPUSH
23675: LD_VAR 0 3
23679: PPUSH
23680: CALL_OW 500
// base := GetBase ( base_dep ) ;
23684: LD_ADDR_VAR 0 15
23688: PUSH
23689: LD_VAR 0 1
23693: PPUSH
23694: CALL_OW 274
23698: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23699: LD_ADDR_VAR 0 16
23703: PUSH
23704: LD_VAR 0 1
23708: PPUSH
23709: CALL_OW 255
23713: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23714: LD_ADDR_VAR 0 17
23718: PUSH
23719: LD_VAR 0 1
23723: PPUSH
23724: CALL_OW 248
23728: ST_TO_ADDR
// if sources then
23729: LD_VAR 0 5
23733: IFFALSE 23780
// for i = 1 to 3 do
23735: LD_ADDR_VAR 0 8
23739: PUSH
23740: DOUBLE
23741: LD_INT 1
23743: DEC
23744: ST_TO_ADDR
23745: LD_INT 3
23747: PUSH
23748: FOR_TO
23749: IFFALSE 23778
// AddResourceType ( base , i , sources [ i ] ) ;
23751: LD_VAR 0 15
23755: PPUSH
23756: LD_VAR 0 8
23760: PPUSH
23761: LD_VAR 0 5
23765: PUSH
23766: LD_VAR 0 8
23770: ARRAY
23771: PPUSH
23772: CALL_OW 276
23776: GO 23748
23778: POP
23779: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23780: LD_ADDR_VAR 0 18
23784: PUSH
23785: LD_VAR 0 15
23789: PPUSH
23790: LD_VAR 0 2
23794: PPUSH
23795: LD_INT 1
23797: PPUSH
23798: CALL 23041 0 3
23802: ST_TO_ADDR
// InitHc ;
23803: CALL_OW 19
// InitUc ;
23807: CALL_OW 18
// uc_side := side ;
23811: LD_ADDR_OWVAR 20
23815: PUSH
23816: LD_VAR 0 16
23820: ST_TO_ADDR
// uc_nation := nation ;
23821: LD_ADDR_OWVAR 21
23825: PUSH
23826: LD_VAR 0 17
23830: ST_TO_ADDR
// if buildings then
23831: LD_VAR 0 18
23835: IFFALSE 25157
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23837: LD_ADDR_VAR 0 19
23841: PUSH
23842: LD_VAR 0 18
23846: PPUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 30
23852: PUSH
23853: LD_INT 29
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 30
23862: PUSH
23863: LD_INT 30
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: LIST
23874: PPUSH
23875: CALL_OW 72
23879: ST_TO_ADDR
// if tmp then
23880: LD_VAR 0 19
23884: IFFALSE 23932
// for i in tmp do
23886: LD_ADDR_VAR 0 8
23890: PUSH
23891: LD_VAR 0 19
23895: PUSH
23896: FOR_IN
23897: IFFALSE 23930
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23899: LD_VAR 0 8
23903: PPUSH
23904: CALL_OW 250
23908: PPUSH
23909: LD_VAR 0 8
23913: PPUSH
23914: CALL_OW 251
23918: PPUSH
23919: LD_VAR 0 16
23923: PPUSH
23924: CALL_OW 441
23928: GO 23896
23930: POP
23931: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23932: LD_VAR 0 18
23936: PPUSH
23937: LD_INT 2
23939: PUSH
23940: LD_INT 30
23942: PUSH
23943: LD_INT 32
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 30
23952: PUSH
23953: LD_INT 33
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: PPUSH
23965: CALL_OW 72
23969: IFFALSE 24057
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23971: LD_ADDR_VAR 0 8
23975: PUSH
23976: LD_VAR 0 18
23980: PPUSH
23981: LD_INT 2
23983: PUSH
23984: LD_INT 30
23986: PUSH
23987: LD_INT 32
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 30
23996: PUSH
23997: LD_INT 33
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: LIST
24008: PPUSH
24009: CALL_OW 72
24013: PUSH
24014: FOR_IN
24015: IFFALSE 24055
// begin if not GetBWeapon ( i ) then
24017: LD_VAR 0 8
24021: PPUSH
24022: CALL_OW 269
24026: NOT
24027: IFFALSE 24053
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24029: LD_VAR 0 8
24033: PPUSH
24034: LD_VAR 0 8
24038: PPUSH
24039: LD_VAR 0 2
24043: PPUSH
24044: CALL 25303 0 2
24048: PPUSH
24049: CALL_OW 431
// end ;
24053: GO 24014
24055: POP
24056: POP
// end ; for i = 1 to personel do
24057: LD_ADDR_VAR 0 8
24061: PUSH
24062: DOUBLE
24063: LD_INT 1
24065: DEC
24066: ST_TO_ADDR
24067: LD_VAR 0 6
24071: PUSH
24072: FOR_TO
24073: IFFALSE 25137
// begin if i > 4 then
24075: LD_VAR 0 8
24079: PUSH
24080: LD_INT 4
24082: GREATER
24083: IFFALSE 24087
// break ;
24085: GO 25137
// case i of 1 :
24087: LD_VAR 0 8
24091: PUSH
24092: LD_INT 1
24094: DOUBLE
24095: EQUAL
24096: IFTRUE 24100
24098: GO 24180
24100: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24101: LD_ADDR_VAR 0 12
24105: PUSH
24106: LD_VAR 0 18
24110: PPUSH
24111: LD_INT 22
24113: PUSH
24114: LD_VAR 0 16
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 58
24125: PUSH
24126: EMPTY
24127: LIST
24128: PUSH
24129: LD_INT 2
24131: PUSH
24132: LD_INT 30
24134: PUSH
24135: LD_INT 32
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 30
24144: PUSH
24145: LD_INT 4
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 30
24154: PUSH
24155: LD_INT 5
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: PPUSH
24173: CALL_OW 72
24177: ST_TO_ADDR
24178: GO 24402
24180: LD_INT 2
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24250
24188: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24189: LD_ADDR_VAR 0 12
24193: PUSH
24194: LD_VAR 0 18
24198: PPUSH
24199: LD_INT 22
24201: PUSH
24202: LD_VAR 0 16
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 30
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 30
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PPUSH
24243: CALL_OW 72
24247: ST_TO_ADDR
24248: GO 24402
24250: LD_INT 3
24252: DOUBLE
24253: EQUAL
24254: IFTRUE 24258
24256: GO 24320
24258: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24259: LD_ADDR_VAR 0 12
24263: PUSH
24264: LD_VAR 0 18
24268: PPUSH
24269: LD_INT 22
24271: PUSH
24272: LD_VAR 0 16
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 2
24283: PUSH
24284: LD_INT 30
24286: PUSH
24287: LD_INT 2
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 30
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PPUSH
24313: CALL_OW 72
24317: ST_TO_ADDR
24318: GO 24402
24320: LD_INT 4
24322: DOUBLE
24323: EQUAL
24324: IFTRUE 24328
24326: GO 24401
24328: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24329: LD_ADDR_VAR 0 12
24333: PUSH
24334: LD_VAR 0 18
24338: PPUSH
24339: LD_INT 22
24341: PUSH
24342: LD_VAR 0 16
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: LD_INT 30
24356: PUSH
24357: LD_INT 6
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 30
24366: PUSH
24367: LD_INT 7
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 30
24376: PUSH
24377: LD_INT 8
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PPUSH
24394: CALL_OW 72
24398: ST_TO_ADDR
24399: GO 24402
24401: POP
// if i = 1 then
24402: LD_VAR 0 8
24406: PUSH
24407: LD_INT 1
24409: EQUAL
24410: IFFALSE 24521
// begin tmp := [ ] ;
24412: LD_ADDR_VAR 0 19
24416: PUSH
24417: EMPTY
24418: ST_TO_ADDR
// for j in f do
24419: LD_ADDR_VAR 0 9
24423: PUSH
24424: LD_VAR 0 12
24428: PUSH
24429: FOR_IN
24430: IFFALSE 24503
// if GetBType ( j ) = b_bunker then
24432: LD_VAR 0 9
24436: PPUSH
24437: CALL_OW 266
24441: PUSH
24442: LD_INT 32
24444: EQUAL
24445: IFFALSE 24472
// tmp := Insert ( tmp , 1 , j ) else
24447: LD_ADDR_VAR 0 19
24451: PUSH
24452: LD_VAR 0 19
24456: PPUSH
24457: LD_INT 1
24459: PPUSH
24460: LD_VAR 0 9
24464: PPUSH
24465: CALL_OW 2
24469: ST_TO_ADDR
24470: GO 24501
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24472: LD_ADDR_VAR 0 19
24476: PUSH
24477: LD_VAR 0 19
24481: PPUSH
24482: LD_VAR 0 19
24486: PUSH
24487: LD_INT 1
24489: PLUS
24490: PPUSH
24491: LD_VAR 0 9
24495: PPUSH
24496: CALL_OW 2
24500: ST_TO_ADDR
24501: GO 24429
24503: POP
24504: POP
// if tmp then
24505: LD_VAR 0 19
24509: IFFALSE 24521
// f := tmp ;
24511: LD_ADDR_VAR 0 12
24515: PUSH
24516: LD_VAR 0 19
24520: ST_TO_ADDR
// end ; x := personel [ i ] ;
24521: LD_ADDR_VAR 0 13
24525: PUSH
24526: LD_VAR 0 6
24530: PUSH
24531: LD_VAR 0 8
24535: ARRAY
24536: ST_TO_ADDR
// if x = - 1 then
24537: LD_VAR 0 13
24541: PUSH
24542: LD_INT 1
24544: NEG
24545: EQUAL
24546: IFFALSE 24755
// begin for j in f do
24548: LD_ADDR_VAR 0 9
24552: PUSH
24553: LD_VAR 0 12
24557: PUSH
24558: FOR_IN
24559: IFFALSE 24751
// repeat InitHc ;
24561: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24565: LD_VAR 0 9
24569: PPUSH
24570: CALL_OW 266
24574: PUSH
24575: LD_INT 5
24577: EQUAL
24578: IFFALSE 24648
// begin if UnitsInside ( j ) < 3 then
24580: LD_VAR 0 9
24584: PPUSH
24585: CALL_OW 313
24589: PUSH
24590: LD_INT 3
24592: LESS
24593: IFFALSE 24629
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24595: LD_INT 0
24597: PPUSH
24598: LD_INT 5
24600: PUSH
24601: LD_INT 8
24603: PUSH
24604: LD_INT 9
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: LIST
24611: PUSH
24612: LD_VAR 0 17
24616: ARRAY
24617: PPUSH
24618: LD_VAR 0 4
24622: PPUSH
24623: CALL_OW 380
24627: GO 24646
// PrepareHuman ( false , i , skill ) ;
24629: LD_INT 0
24631: PPUSH
24632: LD_VAR 0 8
24636: PPUSH
24637: LD_VAR 0 4
24641: PPUSH
24642: CALL_OW 380
// end else
24646: GO 24665
// PrepareHuman ( false , i , skill ) ;
24648: LD_INT 0
24650: PPUSH
24651: LD_VAR 0 8
24655: PPUSH
24656: LD_VAR 0 4
24660: PPUSH
24661: CALL_OW 380
// un := CreateHuman ;
24665: LD_ADDR_VAR 0 14
24669: PUSH
24670: CALL_OW 44
24674: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24675: LD_ADDR_VAR 0 7
24679: PUSH
24680: LD_VAR 0 7
24684: PPUSH
24685: LD_INT 1
24687: PPUSH
24688: LD_VAR 0 14
24692: PPUSH
24693: CALL_OW 2
24697: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24698: LD_VAR 0 14
24702: PPUSH
24703: LD_VAR 0 9
24707: PPUSH
24708: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24712: LD_VAR 0 9
24716: PPUSH
24717: CALL_OW 313
24721: PUSH
24722: LD_INT 6
24724: EQUAL
24725: PUSH
24726: LD_VAR 0 9
24730: PPUSH
24731: CALL_OW 266
24735: PUSH
24736: LD_INT 32
24738: PUSH
24739: LD_INT 31
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: IN
24746: OR
24747: IFFALSE 24561
24749: GO 24558
24751: POP
24752: POP
// end else
24753: GO 25135
// for j = 1 to x do
24755: LD_ADDR_VAR 0 9
24759: PUSH
24760: DOUBLE
24761: LD_INT 1
24763: DEC
24764: ST_TO_ADDR
24765: LD_VAR 0 13
24769: PUSH
24770: FOR_TO
24771: IFFALSE 25133
// begin InitHc ;
24773: CALL_OW 19
// if not f then
24777: LD_VAR 0 12
24781: NOT
24782: IFFALSE 24871
// begin PrepareHuman ( false , i , skill ) ;
24784: LD_INT 0
24786: PPUSH
24787: LD_VAR 0 8
24791: PPUSH
24792: LD_VAR 0 4
24796: PPUSH
24797: CALL_OW 380
// un := CreateHuman ;
24801: LD_ADDR_VAR 0 14
24805: PUSH
24806: CALL_OW 44
24810: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24811: LD_ADDR_VAR 0 7
24815: PUSH
24816: LD_VAR 0 7
24820: PPUSH
24821: LD_INT 1
24823: PPUSH
24824: LD_VAR 0 14
24828: PPUSH
24829: CALL_OW 2
24833: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24834: LD_VAR 0 14
24838: PPUSH
24839: LD_VAR 0 1
24843: PPUSH
24844: CALL_OW 250
24848: PPUSH
24849: LD_VAR 0 1
24853: PPUSH
24854: CALL_OW 251
24858: PPUSH
24859: LD_INT 10
24861: PPUSH
24862: LD_INT 0
24864: PPUSH
24865: CALL_OW 50
// continue ;
24869: GO 24770
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24871: LD_VAR 0 12
24875: PUSH
24876: LD_INT 1
24878: ARRAY
24879: PPUSH
24880: CALL_OW 313
24884: PUSH
24885: LD_VAR 0 12
24889: PUSH
24890: LD_INT 1
24892: ARRAY
24893: PPUSH
24894: CALL_OW 266
24898: PUSH
24899: LD_INT 32
24901: PUSH
24902: LD_INT 31
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: IN
24909: AND
24910: PUSH
24911: LD_VAR 0 12
24915: PUSH
24916: LD_INT 1
24918: ARRAY
24919: PPUSH
24920: CALL_OW 313
24924: PUSH
24925: LD_INT 6
24927: EQUAL
24928: OR
24929: IFFALSE 24949
// f := Delete ( f , 1 ) ;
24931: LD_ADDR_VAR 0 12
24935: PUSH
24936: LD_VAR 0 12
24940: PPUSH
24941: LD_INT 1
24943: PPUSH
24944: CALL_OW 3
24948: ST_TO_ADDR
// if not f then
24949: LD_VAR 0 12
24953: NOT
24954: IFFALSE 24972
// begin x := x + 2 ;
24956: LD_ADDR_VAR 0 13
24960: PUSH
24961: LD_VAR 0 13
24965: PUSH
24966: LD_INT 2
24968: PLUS
24969: ST_TO_ADDR
// continue ;
24970: GO 24770
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24972: LD_VAR 0 12
24976: PUSH
24977: LD_INT 1
24979: ARRAY
24980: PPUSH
24981: CALL_OW 266
24985: PUSH
24986: LD_INT 5
24988: EQUAL
24989: IFFALSE 25063
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24991: LD_VAR 0 12
24995: PUSH
24996: LD_INT 1
24998: ARRAY
24999: PPUSH
25000: CALL_OW 313
25004: PUSH
25005: LD_INT 3
25007: LESS
25008: IFFALSE 25044
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25010: LD_INT 0
25012: PPUSH
25013: LD_INT 5
25015: PUSH
25016: LD_INT 8
25018: PUSH
25019: LD_INT 9
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: LIST
25026: PUSH
25027: LD_VAR 0 17
25031: ARRAY
25032: PPUSH
25033: LD_VAR 0 4
25037: PPUSH
25038: CALL_OW 380
25042: GO 25061
// PrepareHuman ( false , i , skill ) ;
25044: LD_INT 0
25046: PPUSH
25047: LD_VAR 0 8
25051: PPUSH
25052: LD_VAR 0 4
25056: PPUSH
25057: CALL_OW 380
// end else
25061: GO 25080
// PrepareHuman ( false , i , skill ) ;
25063: LD_INT 0
25065: PPUSH
25066: LD_VAR 0 8
25070: PPUSH
25071: LD_VAR 0 4
25075: PPUSH
25076: CALL_OW 380
// un := CreateHuman ;
25080: LD_ADDR_VAR 0 14
25084: PUSH
25085: CALL_OW 44
25089: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25090: LD_ADDR_VAR 0 7
25094: PUSH
25095: LD_VAR 0 7
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: LD_VAR 0 14
25107: PPUSH
25108: CALL_OW 2
25112: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25113: LD_VAR 0 14
25117: PPUSH
25118: LD_VAR 0 12
25122: PUSH
25123: LD_INT 1
25125: ARRAY
25126: PPUSH
25127: CALL_OW 52
// end ;
25131: GO 24770
25133: POP
25134: POP
// end ;
25135: GO 24072
25137: POP
25138: POP
// result := result ^ buildings ;
25139: LD_ADDR_VAR 0 7
25143: PUSH
25144: LD_VAR 0 7
25148: PUSH
25149: LD_VAR 0 18
25153: ADD
25154: ST_TO_ADDR
// end else
25155: GO 25298
// begin for i = 1 to personel do
25157: LD_ADDR_VAR 0 8
25161: PUSH
25162: DOUBLE
25163: LD_INT 1
25165: DEC
25166: ST_TO_ADDR
25167: LD_VAR 0 6
25171: PUSH
25172: FOR_TO
25173: IFFALSE 25296
// begin if i > 4 then
25175: LD_VAR 0 8
25179: PUSH
25180: LD_INT 4
25182: GREATER
25183: IFFALSE 25187
// break ;
25185: GO 25296
// x := personel [ i ] ;
25187: LD_ADDR_VAR 0 13
25191: PUSH
25192: LD_VAR 0 6
25196: PUSH
25197: LD_VAR 0 8
25201: ARRAY
25202: ST_TO_ADDR
// if x = - 1 then
25203: LD_VAR 0 13
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: EQUAL
25212: IFFALSE 25216
// continue ;
25214: GO 25172
// PrepareHuman ( false , i , skill ) ;
25216: LD_INT 0
25218: PPUSH
25219: LD_VAR 0 8
25223: PPUSH
25224: LD_VAR 0 4
25228: PPUSH
25229: CALL_OW 380
// un := CreateHuman ;
25233: LD_ADDR_VAR 0 14
25237: PUSH
25238: CALL_OW 44
25242: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25243: LD_VAR 0 14
25247: PPUSH
25248: LD_VAR 0 1
25252: PPUSH
25253: CALL_OW 250
25257: PPUSH
25258: LD_VAR 0 1
25262: PPUSH
25263: CALL_OW 251
25267: PPUSH
25268: LD_INT 10
25270: PPUSH
25271: LD_INT 0
25273: PPUSH
25274: CALL_OW 50
// result := result ^ un ;
25278: LD_ADDR_VAR 0 7
25282: PUSH
25283: LD_VAR 0 7
25287: PUSH
25288: LD_VAR 0 14
25292: ADD
25293: ST_TO_ADDR
// end ;
25294: GO 25172
25296: POP
25297: POP
// end ; end ;
25298: LD_VAR 0 7
25302: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25303: LD_INT 0
25305: PPUSH
25306: PPUSH
25307: PPUSH
25308: PPUSH
25309: PPUSH
25310: PPUSH
25311: PPUSH
25312: PPUSH
25313: PPUSH
25314: PPUSH
25315: PPUSH
25316: PPUSH
25317: PPUSH
25318: PPUSH
25319: PPUSH
25320: PPUSH
// result := false ;
25321: LD_ADDR_VAR 0 3
25325: PUSH
25326: LD_INT 0
25328: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25329: LD_VAR 0 1
25333: NOT
25334: PUSH
25335: LD_VAR 0 1
25339: PPUSH
25340: CALL_OW 266
25344: PUSH
25345: LD_INT 32
25347: PUSH
25348: LD_INT 33
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: IN
25355: NOT
25356: OR
25357: IFFALSE 25361
// exit ;
25359: GO 26470
// nat := GetNation ( tower ) ;
25361: LD_ADDR_VAR 0 12
25365: PUSH
25366: LD_VAR 0 1
25370: PPUSH
25371: CALL_OW 248
25375: ST_TO_ADDR
// side := GetSide ( tower ) ;
25376: LD_ADDR_VAR 0 16
25380: PUSH
25381: LD_VAR 0 1
25385: PPUSH
25386: CALL_OW 255
25390: ST_TO_ADDR
// x := GetX ( tower ) ;
25391: LD_ADDR_VAR 0 10
25395: PUSH
25396: LD_VAR 0 1
25400: PPUSH
25401: CALL_OW 250
25405: ST_TO_ADDR
// y := GetY ( tower ) ;
25406: LD_ADDR_VAR 0 11
25410: PUSH
25411: LD_VAR 0 1
25415: PPUSH
25416: CALL_OW 251
25420: ST_TO_ADDR
// if not x or not y then
25421: LD_VAR 0 10
25425: NOT
25426: PUSH
25427: LD_VAR 0 11
25431: NOT
25432: OR
25433: IFFALSE 25437
// exit ;
25435: GO 26470
// weapon := 0 ;
25437: LD_ADDR_VAR 0 18
25441: PUSH
25442: LD_INT 0
25444: ST_TO_ADDR
// fac_list := [ ] ;
25445: LD_ADDR_VAR 0 17
25449: PUSH
25450: EMPTY
25451: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25452: LD_ADDR_VAR 0 6
25456: PUSH
25457: LD_VAR 0 1
25461: PPUSH
25462: CALL_OW 274
25466: PPUSH
25467: LD_VAR 0 2
25471: PPUSH
25472: LD_INT 0
25474: PPUSH
25475: CALL 23041 0 3
25479: PPUSH
25480: LD_INT 30
25482: PUSH
25483: LD_INT 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PPUSH
25490: CALL_OW 72
25494: ST_TO_ADDR
// if not factories then
25495: LD_VAR 0 6
25499: NOT
25500: IFFALSE 25504
// exit ;
25502: GO 26470
// for i in factories do
25504: LD_ADDR_VAR 0 8
25508: PUSH
25509: LD_VAR 0 6
25513: PUSH
25514: FOR_IN
25515: IFFALSE 25540
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25517: LD_ADDR_VAR 0 17
25521: PUSH
25522: LD_VAR 0 17
25526: PUSH
25527: LD_VAR 0 8
25531: PPUSH
25532: CALL_OW 478
25536: UNION
25537: ST_TO_ADDR
25538: GO 25514
25540: POP
25541: POP
// if not fac_list then
25542: LD_VAR 0 17
25546: NOT
25547: IFFALSE 25551
// exit ;
25549: GO 26470
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25551: LD_ADDR_VAR 0 5
25555: PUSH
25556: LD_INT 4
25558: PUSH
25559: LD_INT 5
25561: PUSH
25562: LD_INT 9
25564: PUSH
25565: LD_INT 10
25567: PUSH
25568: LD_INT 6
25570: PUSH
25571: LD_INT 7
25573: PUSH
25574: LD_INT 11
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 27
25588: PUSH
25589: LD_INT 28
25591: PUSH
25592: LD_INT 26
25594: PUSH
25595: LD_INT 30
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 43
25606: PUSH
25607: LD_INT 44
25609: PUSH
25610: LD_INT 46
25612: PUSH
25613: LD_INT 45
25615: PUSH
25616: LD_INT 47
25618: PUSH
25619: LD_INT 49
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: LIST
25634: PUSH
25635: LD_VAR 0 12
25639: ARRAY
25640: ST_TO_ADDR
// list := list isect fac_list ;
25641: LD_ADDR_VAR 0 5
25645: PUSH
25646: LD_VAR 0 5
25650: PUSH
25651: LD_VAR 0 17
25655: ISECT
25656: ST_TO_ADDR
// if not list then
25657: LD_VAR 0 5
25661: NOT
25662: IFFALSE 25666
// exit ;
25664: GO 26470
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25666: LD_VAR 0 12
25670: PUSH
25671: LD_INT 3
25673: EQUAL
25674: PUSH
25675: LD_INT 49
25677: PUSH
25678: LD_VAR 0 5
25682: IN
25683: AND
25684: PUSH
25685: LD_INT 31
25687: PPUSH
25688: LD_VAR 0 16
25692: PPUSH
25693: CALL_OW 321
25697: PUSH
25698: LD_INT 2
25700: EQUAL
25701: AND
25702: IFFALSE 25762
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25704: LD_INT 22
25706: PUSH
25707: LD_VAR 0 16
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 35
25718: PUSH
25719: LD_INT 49
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 91
25728: PUSH
25729: LD_VAR 0 1
25733: PUSH
25734: LD_INT 10
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: LIST
25746: PPUSH
25747: CALL_OW 69
25751: NOT
25752: IFFALSE 25762
// weapon := ru_time_lapser ;
25754: LD_ADDR_VAR 0 18
25758: PUSH
25759: LD_INT 49
25761: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25762: LD_VAR 0 12
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: IN
25777: PUSH
25778: LD_INT 11
25780: PUSH
25781: LD_VAR 0 5
25785: IN
25786: PUSH
25787: LD_INT 30
25789: PUSH
25790: LD_VAR 0 5
25794: IN
25795: OR
25796: AND
25797: PUSH
25798: LD_INT 6
25800: PPUSH
25801: LD_VAR 0 16
25805: PPUSH
25806: CALL_OW 321
25810: PUSH
25811: LD_INT 2
25813: EQUAL
25814: AND
25815: IFFALSE 25980
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25817: LD_INT 22
25819: PUSH
25820: LD_VAR 0 16
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 2
25831: PUSH
25832: LD_INT 35
25834: PUSH
25835: LD_INT 11
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 35
25844: PUSH
25845: LD_INT 30
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 91
25859: PUSH
25860: LD_VAR 0 1
25864: PUSH
25865: LD_INT 18
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: PPUSH
25878: CALL_OW 69
25882: NOT
25883: PUSH
25884: LD_INT 22
25886: PUSH
25887: LD_VAR 0 16
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 2
25898: PUSH
25899: LD_INT 30
25901: PUSH
25902: LD_INT 32
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 30
25911: PUSH
25912: LD_INT 33
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 91
25926: PUSH
25927: LD_VAR 0 1
25931: PUSH
25932: LD_INT 12
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: LIST
25944: PUSH
25945: EMPTY
25946: LIST
25947: PPUSH
25948: CALL_OW 69
25952: PUSH
25953: LD_INT 2
25955: GREATER
25956: AND
25957: IFFALSE 25980
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25959: LD_ADDR_VAR 0 18
25963: PUSH
25964: LD_INT 11
25966: PUSH
25967: LD_INT 30
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_VAR 0 12
25978: ARRAY
25979: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25980: LD_VAR 0 18
25984: NOT
25985: PUSH
25986: LD_INT 40
25988: PPUSH
25989: LD_VAR 0 16
25993: PPUSH
25994: CALL_OW 321
25998: PUSH
25999: LD_INT 2
26001: EQUAL
26002: AND
26003: PUSH
26004: LD_INT 7
26006: PUSH
26007: LD_VAR 0 5
26011: IN
26012: PUSH
26013: LD_INT 28
26015: PUSH
26016: LD_VAR 0 5
26020: IN
26021: OR
26022: PUSH
26023: LD_INT 45
26025: PUSH
26026: LD_VAR 0 5
26030: IN
26031: OR
26032: AND
26033: IFFALSE 26287
// begin hex := GetHexInfo ( x , y ) ;
26035: LD_ADDR_VAR 0 4
26039: PUSH
26040: LD_VAR 0 10
26044: PPUSH
26045: LD_VAR 0 11
26049: PPUSH
26050: CALL_OW 546
26054: ST_TO_ADDR
// if hex [ 1 ] then
26055: LD_VAR 0 4
26059: PUSH
26060: LD_INT 1
26062: ARRAY
26063: IFFALSE 26067
// exit ;
26065: GO 26470
// height := hex [ 2 ] ;
26067: LD_ADDR_VAR 0 15
26071: PUSH
26072: LD_VAR 0 4
26076: PUSH
26077: LD_INT 2
26079: ARRAY
26080: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26081: LD_ADDR_VAR 0 14
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: LD_INT 2
26091: PUSH
26092: LD_INT 3
26094: PUSH
26095: LD_INT 5
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: ST_TO_ADDR
// for i in tmp do
26104: LD_ADDR_VAR 0 8
26108: PUSH
26109: LD_VAR 0 14
26113: PUSH
26114: FOR_IN
26115: IFFALSE 26285
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26117: LD_ADDR_VAR 0 9
26121: PUSH
26122: LD_VAR 0 10
26126: PPUSH
26127: LD_VAR 0 8
26131: PPUSH
26132: LD_INT 5
26134: PPUSH
26135: CALL_OW 272
26139: PUSH
26140: LD_VAR 0 11
26144: PPUSH
26145: LD_VAR 0 8
26149: PPUSH
26150: LD_INT 5
26152: PPUSH
26153: CALL_OW 273
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26162: LD_VAR 0 9
26166: PUSH
26167: LD_INT 1
26169: ARRAY
26170: PPUSH
26171: LD_VAR 0 9
26175: PUSH
26176: LD_INT 2
26178: ARRAY
26179: PPUSH
26180: CALL_OW 488
26184: IFFALSE 26283
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26186: LD_ADDR_VAR 0 4
26190: PUSH
26191: LD_VAR 0 9
26195: PUSH
26196: LD_INT 1
26198: ARRAY
26199: PPUSH
26200: LD_VAR 0 9
26204: PUSH
26205: LD_INT 2
26207: ARRAY
26208: PPUSH
26209: CALL_OW 546
26213: ST_TO_ADDR
// if hex [ 1 ] then
26214: LD_VAR 0 4
26218: PUSH
26219: LD_INT 1
26221: ARRAY
26222: IFFALSE 26226
// continue ;
26224: GO 26114
// h := hex [ 2 ] ;
26226: LD_ADDR_VAR 0 13
26230: PUSH
26231: LD_VAR 0 4
26235: PUSH
26236: LD_INT 2
26238: ARRAY
26239: ST_TO_ADDR
// if h + 7 < height then
26240: LD_VAR 0 13
26244: PUSH
26245: LD_INT 7
26247: PLUS
26248: PUSH
26249: LD_VAR 0 15
26253: LESS
26254: IFFALSE 26283
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26256: LD_ADDR_VAR 0 18
26260: PUSH
26261: LD_INT 7
26263: PUSH
26264: LD_INT 28
26266: PUSH
26267: LD_INT 45
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: LIST
26274: PUSH
26275: LD_VAR 0 12
26279: ARRAY
26280: ST_TO_ADDR
// break ;
26281: GO 26285
// end ; end ; end ;
26283: GO 26114
26285: POP
26286: POP
// end ; if not weapon then
26287: LD_VAR 0 18
26291: NOT
26292: IFFALSE 26352
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26294: LD_ADDR_VAR 0 5
26298: PUSH
26299: LD_VAR 0 5
26303: PUSH
26304: LD_INT 11
26306: PUSH
26307: LD_INT 30
26309: PUSH
26310: LD_INT 49
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: DIFF
26318: ST_TO_ADDR
// if not list then
26319: LD_VAR 0 5
26323: NOT
26324: IFFALSE 26328
// exit ;
26326: GO 26470
// weapon := list [ rand ( 1 , list ) ] ;
26328: LD_ADDR_VAR 0 18
26332: PUSH
26333: LD_VAR 0 5
26337: PUSH
26338: LD_INT 1
26340: PPUSH
26341: LD_VAR 0 5
26345: PPUSH
26346: CALL_OW 12
26350: ARRAY
26351: ST_TO_ADDR
// end ; if weapon then
26352: LD_VAR 0 18
26356: IFFALSE 26470
// begin tmp := CostOfWeapon ( weapon ) ;
26358: LD_ADDR_VAR 0 14
26362: PUSH
26363: LD_VAR 0 18
26367: PPUSH
26368: CALL_OW 451
26372: ST_TO_ADDR
// j := GetBase ( tower ) ;
26373: LD_ADDR_VAR 0 9
26377: PUSH
26378: LD_VAR 0 1
26382: PPUSH
26383: CALL_OW 274
26387: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26388: LD_VAR 0 9
26392: PPUSH
26393: LD_INT 1
26395: PPUSH
26396: CALL_OW 275
26400: PUSH
26401: LD_VAR 0 14
26405: PUSH
26406: LD_INT 1
26408: ARRAY
26409: GREATEREQUAL
26410: PUSH
26411: LD_VAR 0 9
26415: PPUSH
26416: LD_INT 2
26418: PPUSH
26419: CALL_OW 275
26423: PUSH
26424: LD_VAR 0 14
26428: PUSH
26429: LD_INT 2
26431: ARRAY
26432: GREATEREQUAL
26433: AND
26434: PUSH
26435: LD_VAR 0 9
26439: PPUSH
26440: LD_INT 3
26442: PPUSH
26443: CALL_OW 275
26447: PUSH
26448: LD_VAR 0 14
26452: PUSH
26453: LD_INT 3
26455: ARRAY
26456: GREATEREQUAL
26457: AND
26458: IFFALSE 26470
// result := weapon ;
26460: LD_ADDR_VAR 0 3
26464: PUSH
26465: LD_VAR 0 18
26469: ST_TO_ADDR
// end ; end ;
26470: LD_VAR 0 3
26474: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26475: LD_INT 0
26477: PPUSH
26478: PPUSH
// result := true ;
26479: LD_ADDR_VAR 0 3
26483: PUSH
26484: LD_INT 1
26486: ST_TO_ADDR
// if array1 = array2 then
26487: LD_VAR 0 1
26491: PUSH
26492: LD_VAR 0 2
26496: EQUAL
26497: IFFALSE 26557
// begin for i = 1 to array1 do
26499: LD_ADDR_VAR 0 4
26503: PUSH
26504: DOUBLE
26505: LD_INT 1
26507: DEC
26508: ST_TO_ADDR
26509: LD_VAR 0 1
26513: PUSH
26514: FOR_TO
26515: IFFALSE 26553
// if array1 [ i ] <> array2 [ i ] then
26517: LD_VAR 0 1
26521: PUSH
26522: LD_VAR 0 4
26526: ARRAY
26527: PUSH
26528: LD_VAR 0 2
26532: PUSH
26533: LD_VAR 0 4
26537: ARRAY
26538: NONEQUAL
26539: IFFALSE 26551
// begin result := false ;
26541: LD_ADDR_VAR 0 3
26545: PUSH
26546: LD_INT 0
26548: ST_TO_ADDR
// break ;
26549: GO 26553
// end ;
26551: GO 26514
26553: POP
26554: POP
// end else
26555: GO 26565
// result := false ;
26557: LD_ADDR_VAR 0 3
26561: PUSH
26562: LD_INT 0
26564: ST_TO_ADDR
// end ;
26565: LD_VAR 0 3
26569: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26570: LD_INT 0
26572: PPUSH
26573: PPUSH
// if not array1 or not array2 then
26574: LD_VAR 0 1
26578: NOT
26579: PUSH
26580: LD_VAR 0 2
26584: NOT
26585: OR
26586: IFFALSE 26590
// exit ;
26588: GO 26654
// result := true ;
26590: LD_ADDR_VAR 0 3
26594: PUSH
26595: LD_INT 1
26597: ST_TO_ADDR
// for i = 1 to array1 do
26598: LD_ADDR_VAR 0 4
26602: PUSH
26603: DOUBLE
26604: LD_INT 1
26606: DEC
26607: ST_TO_ADDR
26608: LD_VAR 0 1
26612: PUSH
26613: FOR_TO
26614: IFFALSE 26652
// if array1 [ i ] <> array2 [ i ] then
26616: LD_VAR 0 1
26620: PUSH
26621: LD_VAR 0 4
26625: ARRAY
26626: PUSH
26627: LD_VAR 0 2
26631: PUSH
26632: LD_VAR 0 4
26636: ARRAY
26637: NONEQUAL
26638: IFFALSE 26650
// begin result := false ;
26640: LD_ADDR_VAR 0 3
26644: PUSH
26645: LD_INT 0
26647: ST_TO_ADDR
// break ;
26648: GO 26652
// end ;
26650: GO 26613
26652: POP
26653: POP
// end ;
26654: LD_VAR 0 3
26658: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26659: LD_INT 0
26661: PPUSH
26662: PPUSH
26663: PPUSH
// pom := GetBase ( fac ) ;
26664: LD_ADDR_VAR 0 5
26668: PUSH
26669: LD_VAR 0 1
26673: PPUSH
26674: CALL_OW 274
26678: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26679: LD_ADDR_VAR 0 4
26683: PUSH
26684: LD_VAR 0 2
26688: PUSH
26689: LD_INT 1
26691: ARRAY
26692: PPUSH
26693: LD_VAR 0 2
26697: PUSH
26698: LD_INT 2
26700: ARRAY
26701: PPUSH
26702: LD_VAR 0 2
26706: PUSH
26707: LD_INT 3
26709: ARRAY
26710: PPUSH
26711: LD_VAR 0 2
26715: PUSH
26716: LD_INT 4
26718: ARRAY
26719: PPUSH
26720: CALL_OW 449
26724: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26725: LD_ADDR_VAR 0 3
26729: PUSH
26730: LD_VAR 0 5
26734: PPUSH
26735: LD_INT 1
26737: PPUSH
26738: CALL_OW 275
26742: PUSH
26743: LD_VAR 0 4
26747: PUSH
26748: LD_INT 1
26750: ARRAY
26751: GREATEREQUAL
26752: PUSH
26753: LD_VAR 0 5
26757: PPUSH
26758: LD_INT 2
26760: PPUSH
26761: CALL_OW 275
26765: PUSH
26766: LD_VAR 0 4
26770: PUSH
26771: LD_INT 2
26773: ARRAY
26774: GREATEREQUAL
26775: AND
26776: PUSH
26777: LD_VAR 0 5
26781: PPUSH
26782: LD_INT 3
26784: PPUSH
26785: CALL_OW 275
26789: PUSH
26790: LD_VAR 0 4
26794: PUSH
26795: LD_INT 3
26797: ARRAY
26798: GREATEREQUAL
26799: AND
26800: ST_TO_ADDR
// end ;
26801: LD_VAR 0 3
26805: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26806: LD_INT 0
26808: PPUSH
26809: PPUSH
26810: PPUSH
26811: PPUSH
// pom := GetBase ( building ) ;
26812: LD_ADDR_VAR 0 3
26816: PUSH
26817: LD_VAR 0 1
26821: PPUSH
26822: CALL_OW 274
26826: ST_TO_ADDR
// if not pom then
26827: LD_VAR 0 3
26831: NOT
26832: IFFALSE 26836
// exit ;
26834: GO 27006
// btype := GetBType ( building ) ;
26836: LD_ADDR_VAR 0 5
26840: PUSH
26841: LD_VAR 0 1
26845: PPUSH
26846: CALL_OW 266
26850: ST_TO_ADDR
// if btype = b_armoury then
26851: LD_VAR 0 5
26855: PUSH
26856: LD_INT 4
26858: EQUAL
26859: IFFALSE 26869
// btype := b_barracks ;
26861: LD_ADDR_VAR 0 5
26865: PUSH
26866: LD_INT 5
26868: ST_TO_ADDR
// if btype = b_depot then
26869: LD_VAR 0 5
26873: PUSH
26874: LD_INT 0
26876: EQUAL
26877: IFFALSE 26887
// btype := b_warehouse ;
26879: LD_ADDR_VAR 0 5
26883: PUSH
26884: LD_INT 1
26886: ST_TO_ADDR
// if btype = b_workshop then
26887: LD_VAR 0 5
26891: PUSH
26892: LD_INT 2
26894: EQUAL
26895: IFFALSE 26905
// btype := b_factory ;
26897: LD_ADDR_VAR 0 5
26901: PUSH
26902: LD_INT 3
26904: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26905: LD_ADDR_VAR 0 4
26909: PUSH
26910: LD_VAR 0 5
26914: PPUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 248
26924: PPUSH
26925: CALL_OW 450
26929: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26930: LD_ADDR_VAR 0 2
26934: PUSH
26935: LD_VAR 0 3
26939: PPUSH
26940: LD_INT 1
26942: PPUSH
26943: CALL_OW 275
26947: PUSH
26948: LD_VAR 0 4
26952: PUSH
26953: LD_INT 1
26955: ARRAY
26956: GREATEREQUAL
26957: PUSH
26958: LD_VAR 0 3
26962: PPUSH
26963: LD_INT 2
26965: PPUSH
26966: CALL_OW 275
26970: PUSH
26971: LD_VAR 0 4
26975: PUSH
26976: LD_INT 2
26978: ARRAY
26979: GREATEREQUAL
26980: AND
26981: PUSH
26982: LD_VAR 0 3
26986: PPUSH
26987: LD_INT 3
26989: PPUSH
26990: CALL_OW 275
26994: PUSH
26995: LD_VAR 0 4
26999: PUSH
27000: LD_INT 3
27002: ARRAY
27003: GREATEREQUAL
27004: AND
27005: ST_TO_ADDR
// end ;
27006: LD_VAR 0 2
27010: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27011: LD_INT 0
27013: PPUSH
27014: PPUSH
27015: PPUSH
// pom := GetBase ( building ) ;
27016: LD_ADDR_VAR 0 4
27020: PUSH
27021: LD_VAR 0 1
27025: PPUSH
27026: CALL_OW 274
27030: ST_TO_ADDR
// if not pom then
27031: LD_VAR 0 4
27035: NOT
27036: IFFALSE 27040
// exit ;
27038: GO 27141
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27040: LD_ADDR_VAR 0 5
27044: PUSH
27045: LD_VAR 0 2
27049: PPUSH
27050: LD_VAR 0 1
27054: PPUSH
27055: CALL_OW 248
27059: PPUSH
27060: CALL_OW 450
27064: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27065: LD_ADDR_VAR 0 3
27069: PUSH
27070: LD_VAR 0 4
27074: PPUSH
27075: LD_INT 1
27077: PPUSH
27078: CALL_OW 275
27082: PUSH
27083: LD_VAR 0 5
27087: PUSH
27088: LD_INT 1
27090: ARRAY
27091: GREATEREQUAL
27092: PUSH
27093: LD_VAR 0 4
27097: PPUSH
27098: LD_INT 2
27100: PPUSH
27101: CALL_OW 275
27105: PUSH
27106: LD_VAR 0 5
27110: PUSH
27111: LD_INT 2
27113: ARRAY
27114: GREATEREQUAL
27115: AND
27116: PUSH
27117: LD_VAR 0 4
27121: PPUSH
27122: LD_INT 3
27124: PPUSH
27125: CALL_OW 275
27129: PUSH
27130: LD_VAR 0 5
27134: PUSH
27135: LD_INT 3
27137: ARRAY
27138: GREATEREQUAL
27139: AND
27140: ST_TO_ADDR
// end ;
27141: LD_VAR 0 3
27145: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27146: LD_INT 0
27148: PPUSH
27149: PPUSH
27150: PPUSH
27151: PPUSH
27152: PPUSH
27153: PPUSH
27154: PPUSH
27155: PPUSH
27156: PPUSH
27157: PPUSH
27158: PPUSH
// result := false ;
27159: LD_ADDR_VAR 0 8
27163: PUSH
27164: LD_INT 0
27166: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27167: LD_VAR 0 5
27171: NOT
27172: PUSH
27173: LD_VAR 0 1
27177: NOT
27178: OR
27179: PUSH
27180: LD_VAR 0 2
27184: NOT
27185: OR
27186: PUSH
27187: LD_VAR 0 3
27191: NOT
27192: OR
27193: IFFALSE 27197
// exit ;
27195: GO 28011
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27197: LD_ADDR_VAR 0 14
27201: PUSH
27202: LD_VAR 0 1
27206: PPUSH
27207: LD_VAR 0 2
27211: PPUSH
27212: LD_VAR 0 3
27216: PPUSH
27217: LD_VAR 0 4
27221: PPUSH
27222: LD_VAR 0 5
27226: PUSH
27227: LD_INT 1
27229: ARRAY
27230: PPUSH
27231: CALL_OW 248
27235: PPUSH
27236: LD_INT 0
27238: PPUSH
27239: CALL 29244 0 6
27243: ST_TO_ADDR
// if not hexes then
27244: LD_VAR 0 14
27248: NOT
27249: IFFALSE 27253
// exit ;
27251: GO 28011
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27253: LD_ADDR_VAR 0 17
27257: PUSH
27258: LD_VAR 0 5
27262: PPUSH
27263: LD_INT 22
27265: PUSH
27266: LD_VAR 0 13
27270: PPUSH
27271: CALL_OW 255
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 2
27282: PUSH
27283: LD_INT 30
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 30
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: LIST
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PPUSH
27312: CALL_OW 72
27316: ST_TO_ADDR
// for i = 1 to hexes do
27317: LD_ADDR_VAR 0 9
27321: PUSH
27322: DOUBLE
27323: LD_INT 1
27325: DEC
27326: ST_TO_ADDR
27327: LD_VAR 0 14
27331: PUSH
27332: FOR_TO
27333: IFFALSE 28009
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27335: LD_ADDR_VAR 0 13
27339: PUSH
27340: LD_VAR 0 14
27344: PUSH
27345: LD_VAR 0 9
27349: ARRAY
27350: PUSH
27351: LD_INT 1
27353: ARRAY
27354: PPUSH
27355: LD_VAR 0 14
27359: PUSH
27360: LD_VAR 0 9
27364: ARRAY
27365: PUSH
27366: LD_INT 2
27368: ARRAY
27369: PPUSH
27370: CALL_OW 428
27374: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27375: LD_VAR 0 14
27379: PUSH
27380: LD_VAR 0 9
27384: ARRAY
27385: PUSH
27386: LD_INT 1
27388: ARRAY
27389: PPUSH
27390: LD_VAR 0 14
27394: PUSH
27395: LD_VAR 0 9
27399: ARRAY
27400: PUSH
27401: LD_INT 2
27403: ARRAY
27404: PPUSH
27405: CALL_OW 351
27409: PUSH
27410: LD_VAR 0 14
27414: PUSH
27415: LD_VAR 0 9
27419: ARRAY
27420: PUSH
27421: LD_INT 1
27423: ARRAY
27424: PPUSH
27425: LD_VAR 0 14
27429: PUSH
27430: LD_VAR 0 9
27434: ARRAY
27435: PUSH
27436: LD_INT 2
27438: ARRAY
27439: PPUSH
27440: CALL_OW 488
27444: NOT
27445: OR
27446: PUSH
27447: LD_VAR 0 13
27451: PPUSH
27452: CALL_OW 247
27456: PUSH
27457: LD_INT 3
27459: EQUAL
27460: OR
27461: IFFALSE 27467
// exit ;
27463: POP
27464: POP
27465: GO 28011
// if not tmp then
27467: LD_VAR 0 13
27471: NOT
27472: IFFALSE 27476
// continue ;
27474: GO 27332
// result := true ;
27476: LD_ADDR_VAR 0 8
27480: PUSH
27481: LD_INT 1
27483: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27484: LD_VAR 0 6
27488: PUSH
27489: LD_VAR 0 13
27493: PPUSH
27494: CALL_OW 247
27498: PUSH
27499: LD_INT 2
27501: EQUAL
27502: AND
27503: PUSH
27504: LD_VAR 0 13
27508: PPUSH
27509: CALL_OW 263
27513: PUSH
27514: LD_INT 1
27516: EQUAL
27517: AND
27518: IFFALSE 27682
// begin if IsDrivenBy ( tmp ) then
27520: LD_VAR 0 13
27524: PPUSH
27525: CALL_OW 311
27529: IFFALSE 27533
// continue ;
27531: GO 27332
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27533: LD_VAR 0 6
27537: PPUSH
27538: LD_INT 3
27540: PUSH
27541: LD_INT 60
27543: PUSH
27544: EMPTY
27545: LIST
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 3
27553: PUSH
27554: LD_INT 55
27556: PUSH
27557: EMPTY
27558: LIST
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PPUSH
27568: CALL_OW 72
27572: IFFALSE 27680
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27574: LD_ADDR_VAR 0 18
27578: PUSH
27579: LD_VAR 0 6
27583: PPUSH
27584: LD_INT 3
27586: PUSH
27587: LD_INT 60
27589: PUSH
27590: EMPTY
27591: LIST
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 3
27599: PUSH
27600: LD_INT 55
27602: PUSH
27603: EMPTY
27604: LIST
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PPUSH
27614: CALL_OW 72
27618: PUSH
27619: LD_INT 1
27621: ARRAY
27622: ST_TO_ADDR
// if IsInUnit ( driver ) then
27623: LD_VAR 0 18
27627: PPUSH
27628: CALL_OW 310
27632: IFFALSE 27643
// ComExit ( driver ) ;
27634: LD_VAR 0 18
27638: PPUSH
27639: CALL 53023 0 1
// AddComEnterUnit ( driver , tmp ) ;
27643: LD_VAR 0 18
27647: PPUSH
27648: LD_VAR 0 13
27652: PPUSH
27653: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27657: LD_VAR 0 18
27661: PPUSH
27662: LD_VAR 0 7
27666: PPUSH
27667: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27671: LD_VAR 0 18
27675: PPUSH
27676: CALL_OW 181
// end ; continue ;
27680: GO 27332
// end ; if not cleaners or not tmp in cleaners then
27682: LD_VAR 0 6
27686: NOT
27687: PUSH
27688: LD_VAR 0 13
27692: PUSH
27693: LD_VAR 0 6
27697: IN
27698: NOT
27699: OR
27700: IFFALSE 28007
// begin if dep then
27702: LD_VAR 0 17
27706: IFFALSE 27842
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27708: LD_ADDR_VAR 0 16
27712: PUSH
27713: LD_VAR 0 17
27717: PUSH
27718: LD_INT 1
27720: ARRAY
27721: PPUSH
27722: CALL_OW 250
27726: PPUSH
27727: LD_VAR 0 17
27731: PUSH
27732: LD_INT 1
27734: ARRAY
27735: PPUSH
27736: CALL_OW 254
27740: PPUSH
27741: LD_INT 5
27743: PPUSH
27744: CALL_OW 272
27748: PUSH
27749: LD_VAR 0 17
27753: PUSH
27754: LD_INT 1
27756: ARRAY
27757: PPUSH
27758: CALL_OW 251
27762: PPUSH
27763: LD_VAR 0 17
27767: PUSH
27768: LD_INT 1
27770: ARRAY
27771: PPUSH
27772: CALL_OW 254
27776: PPUSH
27777: LD_INT 5
27779: PPUSH
27780: CALL_OW 273
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27789: LD_VAR 0 16
27793: PUSH
27794: LD_INT 1
27796: ARRAY
27797: PPUSH
27798: LD_VAR 0 16
27802: PUSH
27803: LD_INT 2
27805: ARRAY
27806: PPUSH
27807: CALL_OW 488
27811: IFFALSE 27842
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27813: LD_VAR 0 13
27817: PPUSH
27818: LD_VAR 0 16
27822: PUSH
27823: LD_INT 1
27825: ARRAY
27826: PPUSH
27827: LD_VAR 0 16
27831: PUSH
27832: LD_INT 2
27834: ARRAY
27835: PPUSH
27836: CALL_OW 111
// continue ;
27840: GO 27332
// end ; end ; r := GetDir ( tmp ) ;
27842: LD_ADDR_VAR 0 15
27846: PUSH
27847: LD_VAR 0 13
27851: PPUSH
27852: CALL_OW 254
27856: ST_TO_ADDR
// if r = 5 then
27857: LD_VAR 0 15
27861: PUSH
27862: LD_INT 5
27864: EQUAL
27865: IFFALSE 27875
// r := 0 ;
27867: LD_ADDR_VAR 0 15
27871: PUSH
27872: LD_INT 0
27874: ST_TO_ADDR
// for j = r to 5 do
27875: LD_ADDR_VAR 0 10
27879: PUSH
27880: DOUBLE
27881: LD_VAR 0 15
27885: DEC
27886: ST_TO_ADDR
27887: LD_INT 5
27889: PUSH
27890: FOR_TO
27891: IFFALSE 28005
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27893: LD_ADDR_VAR 0 11
27897: PUSH
27898: LD_VAR 0 13
27902: PPUSH
27903: CALL_OW 250
27907: PPUSH
27908: LD_VAR 0 10
27912: PPUSH
27913: LD_INT 2
27915: PPUSH
27916: CALL_OW 272
27920: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27921: LD_ADDR_VAR 0 12
27925: PUSH
27926: LD_VAR 0 13
27930: PPUSH
27931: CALL_OW 251
27935: PPUSH
27936: LD_VAR 0 10
27940: PPUSH
27941: LD_INT 2
27943: PPUSH
27944: CALL_OW 273
27948: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27949: LD_VAR 0 11
27953: PPUSH
27954: LD_VAR 0 12
27958: PPUSH
27959: CALL_OW 488
27963: PUSH
27964: LD_VAR 0 11
27968: PPUSH
27969: LD_VAR 0 12
27973: PPUSH
27974: CALL_OW 428
27978: NOT
27979: AND
27980: IFFALSE 28003
// begin ComMoveXY ( tmp , _x , _y ) ;
27982: LD_VAR 0 13
27986: PPUSH
27987: LD_VAR 0 11
27991: PPUSH
27992: LD_VAR 0 12
27996: PPUSH
27997: CALL_OW 111
// break ;
28001: GO 28005
// end ; end ;
28003: GO 27890
28005: POP
28006: POP
// end ; end ;
28007: GO 27332
28009: POP
28010: POP
// end ;
28011: LD_VAR 0 8
28015: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28016: LD_INT 0
28018: PPUSH
// result := true ;
28019: LD_ADDR_VAR 0 3
28023: PUSH
28024: LD_INT 1
28026: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28027: LD_VAR 0 2
28031: PUSH
28032: LD_INT 24
28034: DOUBLE
28035: EQUAL
28036: IFTRUE 28046
28038: LD_INT 33
28040: DOUBLE
28041: EQUAL
28042: IFTRUE 28046
28044: GO 28071
28046: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28047: LD_ADDR_VAR 0 3
28051: PUSH
28052: LD_INT 32
28054: PPUSH
28055: LD_VAR 0 1
28059: PPUSH
28060: CALL_OW 321
28064: PUSH
28065: LD_INT 2
28067: EQUAL
28068: ST_TO_ADDR
28069: GO 28387
28071: LD_INT 20
28073: DOUBLE
28074: EQUAL
28075: IFTRUE 28079
28077: GO 28104
28079: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28080: LD_ADDR_VAR 0 3
28084: PUSH
28085: LD_INT 6
28087: PPUSH
28088: LD_VAR 0 1
28092: PPUSH
28093: CALL_OW 321
28097: PUSH
28098: LD_INT 2
28100: EQUAL
28101: ST_TO_ADDR
28102: GO 28387
28104: LD_INT 22
28106: DOUBLE
28107: EQUAL
28108: IFTRUE 28118
28110: LD_INT 36
28112: DOUBLE
28113: EQUAL
28114: IFTRUE 28118
28116: GO 28143
28118: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28119: LD_ADDR_VAR 0 3
28123: PUSH
28124: LD_INT 15
28126: PPUSH
28127: LD_VAR 0 1
28131: PPUSH
28132: CALL_OW 321
28136: PUSH
28137: LD_INT 2
28139: EQUAL
28140: ST_TO_ADDR
28141: GO 28387
28143: LD_INT 30
28145: DOUBLE
28146: EQUAL
28147: IFTRUE 28151
28149: GO 28176
28151: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28152: LD_ADDR_VAR 0 3
28156: PUSH
28157: LD_INT 20
28159: PPUSH
28160: LD_VAR 0 1
28164: PPUSH
28165: CALL_OW 321
28169: PUSH
28170: LD_INT 2
28172: EQUAL
28173: ST_TO_ADDR
28174: GO 28387
28176: LD_INT 28
28178: DOUBLE
28179: EQUAL
28180: IFTRUE 28190
28182: LD_INT 21
28184: DOUBLE
28185: EQUAL
28186: IFTRUE 28190
28188: GO 28215
28190: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28191: LD_ADDR_VAR 0 3
28195: PUSH
28196: LD_INT 21
28198: PPUSH
28199: LD_VAR 0 1
28203: PPUSH
28204: CALL_OW 321
28208: PUSH
28209: LD_INT 2
28211: EQUAL
28212: ST_TO_ADDR
28213: GO 28387
28215: LD_INT 16
28217: DOUBLE
28218: EQUAL
28219: IFTRUE 28223
28221: GO 28248
28223: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28224: LD_ADDR_VAR 0 3
28228: PUSH
28229: LD_INT 84
28231: PPUSH
28232: LD_VAR 0 1
28236: PPUSH
28237: CALL_OW 321
28241: PUSH
28242: LD_INT 2
28244: EQUAL
28245: ST_TO_ADDR
28246: GO 28387
28248: LD_INT 19
28250: DOUBLE
28251: EQUAL
28252: IFTRUE 28262
28254: LD_INT 23
28256: DOUBLE
28257: EQUAL
28258: IFTRUE 28262
28260: GO 28287
28262: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28263: LD_ADDR_VAR 0 3
28267: PUSH
28268: LD_INT 83
28270: PPUSH
28271: LD_VAR 0 1
28275: PPUSH
28276: CALL_OW 321
28280: PUSH
28281: LD_INT 2
28283: EQUAL
28284: ST_TO_ADDR
28285: GO 28387
28287: LD_INT 17
28289: DOUBLE
28290: EQUAL
28291: IFTRUE 28295
28293: GO 28320
28295: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28296: LD_ADDR_VAR 0 3
28300: PUSH
28301: LD_INT 39
28303: PPUSH
28304: LD_VAR 0 1
28308: PPUSH
28309: CALL_OW 321
28313: PUSH
28314: LD_INT 2
28316: EQUAL
28317: ST_TO_ADDR
28318: GO 28387
28320: LD_INT 18
28322: DOUBLE
28323: EQUAL
28324: IFTRUE 28328
28326: GO 28353
28328: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28329: LD_ADDR_VAR 0 3
28333: PUSH
28334: LD_INT 40
28336: PPUSH
28337: LD_VAR 0 1
28341: PPUSH
28342: CALL_OW 321
28346: PUSH
28347: LD_INT 2
28349: EQUAL
28350: ST_TO_ADDR
28351: GO 28387
28353: LD_INT 27
28355: DOUBLE
28356: EQUAL
28357: IFTRUE 28361
28359: GO 28386
28361: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28362: LD_ADDR_VAR 0 3
28366: PUSH
28367: LD_INT 35
28369: PPUSH
28370: LD_VAR 0 1
28374: PPUSH
28375: CALL_OW 321
28379: PUSH
28380: LD_INT 2
28382: EQUAL
28383: ST_TO_ADDR
28384: GO 28387
28386: POP
// end ;
28387: LD_VAR 0 3
28391: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28392: LD_INT 0
28394: PPUSH
28395: PPUSH
28396: PPUSH
28397: PPUSH
28398: PPUSH
28399: PPUSH
28400: PPUSH
28401: PPUSH
28402: PPUSH
28403: PPUSH
28404: PPUSH
// result := false ;
28405: LD_ADDR_VAR 0 6
28409: PUSH
28410: LD_INT 0
28412: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28413: LD_VAR 0 1
28417: NOT
28418: PUSH
28419: LD_VAR 0 1
28423: PPUSH
28424: CALL_OW 266
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: IN
28439: NOT
28440: OR
28441: PUSH
28442: LD_VAR 0 2
28446: NOT
28447: OR
28448: PUSH
28449: LD_VAR 0 5
28453: PUSH
28454: LD_INT 0
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: LD_INT 2
28462: PUSH
28463: LD_INT 3
28465: PUSH
28466: LD_INT 4
28468: PUSH
28469: LD_INT 5
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: IN
28480: NOT
28481: OR
28482: PUSH
28483: LD_VAR 0 3
28487: PPUSH
28488: LD_VAR 0 4
28492: PPUSH
28493: CALL_OW 488
28497: NOT
28498: OR
28499: IFFALSE 28503
// exit ;
28501: GO 29239
// side := GetSide ( depot ) ;
28503: LD_ADDR_VAR 0 9
28507: PUSH
28508: LD_VAR 0 1
28512: PPUSH
28513: CALL_OW 255
28517: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28518: LD_VAR 0 9
28522: PPUSH
28523: LD_VAR 0 2
28527: PPUSH
28528: CALL 28016 0 2
28532: NOT
28533: IFFALSE 28537
// exit ;
28535: GO 29239
// pom := GetBase ( depot ) ;
28537: LD_ADDR_VAR 0 10
28541: PUSH
28542: LD_VAR 0 1
28546: PPUSH
28547: CALL_OW 274
28551: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28552: LD_ADDR_VAR 0 11
28556: PUSH
28557: LD_VAR 0 2
28561: PPUSH
28562: LD_VAR 0 1
28566: PPUSH
28567: CALL_OW 248
28571: PPUSH
28572: CALL_OW 450
28576: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28577: LD_VAR 0 10
28581: PPUSH
28582: LD_INT 1
28584: PPUSH
28585: CALL_OW 275
28589: PUSH
28590: LD_VAR 0 11
28594: PUSH
28595: LD_INT 1
28597: ARRAY
28598: GREATEREQUAL
28599: PUSH
28600: LD_VAR 0 10
28604: PPUSH
28605: LD_INT 2
28607: PPUSH
28608: CALL_OW 275
28612: PUSH
28613: LD_VAR 0 11
28617: PUSH
28618: LD_INT 2
28620: ARRAY
28621: GREATEREQUAL
28622: AND
28623: PUSH
28624: LD_VAR 0 10
28628: PPUSH
28629: LD_INT 3
28631: PPUSH
28632: CALL_OW 275
28636: PUSH
28637: LD_VAR 0 11
28641: PUSH
28642: LD_INT 3
28644: ARRAY
28645: GREATEREQUAL
28646: AND
28647: NOT
28648: IFFALSE 28652
// exit ;
28650: GO 29239
// if GetBType ( depot ) = b_depot then
28652: LD_VAR 0 1
28656: PPUSH
28657: CALL_OW 266
28661: PUSH
28662: LD_INT 0
28664: EQUAL
28665: IFFALSE 28677
// dist := 28 else
28667: LD_ADDR_VAR 0 14
28671: PUSH
28672: LD_INT 28
28674: ST_TO_ADDR
28675: GO 28685
// dist := 36 ;
28677: LD_ADDR_VAR 0 14
28681: PUSH
28682: LD_INT 36
28684: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28685: LD_VAR 0 1
28689: PPUSH
28690: LD_VAR 0 3
28694: PPUSH
28695: LD_VAR 0 4
28699: PPUSH
28700: CALL_OW 297
28704: PUSH
28705: LD_VAR 0 14
28709: GREATER
28710: IFFALSE 28714
// exit ;
28712: GO 29239
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28714: LD_ADDR_VAR 0 12
28718: PUSH
28719: LD_VAR 0 2
28723: PPUSH
28724: LD_VAR 0 3
28728: PPUSH
28729: LD_VAR 0 4
28733: PPUSH
28734: LD_VAR 0 5
28738: PPUSH
28739: LD_VAR 0 1
28743: PPUSH
28744: CALL_OW 248
28748: PPUSH
28749: LD_INT 0
28751: PPUSH
28752: CALL 29244 0 6
28756: ST_TO_ADDR
// if not hexes then
28757: LD_VAR 0 12
28761: NOT
28762: IFFALSE 28766
// exit ;
28764: GO 29239
// hex := GetHexInfo ( x , y ) ;
28766: LD_ADDR_VAR 0 15
28770: PUSH
28771: LD_VAR 0 3
28775: PPUSH
28776: LD_VAR 0 4
28780: PPUSH
28781: CALL_OW 546
28785: ST_TO_ADDR
// if hex [ 1 ] then
28786: LD_VAR 0 15
28790: PUSH
28791: LD_INT 1
28793: ARRAY
28794: IFFALSE 28798
// exit ;
28796: GO 29239
// height := hex [ 2 ] ;
28798: LD_ADDR_VAR 0 13
28802: PUSH
28803: LD_VAR 0 15
28807: PUSH
28808: LD_INT 2
28810: ARRAY
28811: ST_TO_ADDR
// for i = 1 to hexes do
28812: LD_ADDR_VAR 0 7
28816: PUSH
28817: DOUBLE
28818: LD_INT 1
28820: DEC
28821: ST_TO_ADDR
28822: LD_VAR 0 12
28826: PUSH
28827: FOR_TO
28828: IFFALSE 29158
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28830: LD_VAR 0 12
28834: PUSH
28835: LD_VAR 0 7
28839: ARRAY
28840: PUSH
28841: LD_INT 1
28843: ARRAY
28844: PPUSH
28845: LD_VAR 0 12
28849: PUSH
28850: LD_VAR 0 7
28854: ARRAY
28855: PUSH
28856: LD_INT 2
28858: ARRAY
28859: PPUSH
28860: CALL_OW 488
28864: NOT
28865: PUSH
28866: LD_VAR 0 12
28870: PUSH
28871: LD_VAR 0 7
28875: ARRAY
28876: PUSH
28877: LD_INT 1
28879: ARRAY
28880: PPUSH
28881: LD_VAR 0 12
28885: PUSH
28886: LD_VAR 0 7
28890: ARRAY
28891: PUSH
28892: LD_INT 2
28894: ARRAY
28895: PPUSH
28896: CALL_OW 428
28900: PUSH
28901: LD_INT 0
28903: GREATER
28904: OR
28905: PUSH
28906: LD_VAR 0 12
28910: PUSH
28911: LD_VAR 0 7
28915: ARRAY
28916: PUSH
28917: LD_INT 1
28919: ARRAY
28920: PPUSH
28921: LD_VAR 0 12
28925: PUSH
28926: LD_VAR 0 7
28930: ARRAY
28931: PUSH
28932: LD_INT 2
28934: ARRAY
28935: PPUSH
28936: CALL_OW 351
28940: OR
28941: IFFALSE 28947
// exit ;
28943: POP
28944: POP
28945: GO 29239
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28947: LD_ADDR_VAR 0 8
28951: PUSH
28952: LD_VAR 0 12
28956: PUSH
28957: LD_VAR 0 7
28961: ARRAY
28962: PUSH
28963: LD_INT 1
28965: ARRAY
28966: PPUSH
28967: LD_VAR 0 12
28971: PUSH
28972: LD_VAR 0 7
28976: ARRAY
28977: PUSH
28978: LD_INT 2
28980: ARRAY
28981: PPUSH
28982: CALL_OW 546
28986: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
28987: LD_VAR 0 8
28991: PUSH
28992: LD_INT 1
28994: ARRAY
28995: PUSH
28996: LD_VAR 0 8
29000: PUSH
29001: LD_INT 2
29003: ARRAY
29004: PUSH
29005: LD_VAR 0 13
29009: PUSH
29010: LD_INT 2
29012: PLUS
29013: GREATER
29014: OR
29015: PUSH
29016: LD_VAR 0 8
29020: PUSH
29021: LD_INT 2
29023: ARRAY
29024: PUSH
29025: LD_VAR 0 13
29029: PUSH
29030: LD_INT 2
29032: MINUS
29033: LESS
29034: OR
29035: PUSH
29036: LD_VAR 0 8
29040: PUSH
29041: LD_INT 3
29043: ARRAY
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: LD_INT 8
29050: PUSH
29051: LD_INT 9
29053: PUSH
29054: LD_INT 10
29056: PUSH
29057: LD_INT 11
29059: PUSH
29060: LD_INT 12
29062: PUSH
29063: LD_INT 13
29065: PUSH
29066: LD_INT 16
29068: PUSH
29069: LD_INT 17
29071: PUSH
29072: LD_INT 18
29074: PUSH
29075: LD_INT 19
29077: PUSH
29078: LD_INT 20
29080: PUSH
29081: LD_INT 21
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: IN
29099: NOT
29100: OR
29101: PUSH
29102: LD_VAR 0 8
29106: PUSH
29107: LD_INT 5
29109: ARRAY
29110: NOT
29111: OR
29112: PUSH
29113: LD_VAR 0 8
29117: PUSH
29118: LD_INT 6
29120: ARRAY
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: LD_INT 2
29127: PUSH
29128: LD_INT 7
29130: PUSH
29131: LD_INT 9
29133: PUSH
29134: LD_INT 10
29136: PUSH
29137: LD_INT 11
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: IN
29148: NOT
29149: OR
29150: IFFALSE 29156
// exit ;
29152: POP
29153: POP
29154: GO 29239
// end ;
29156: GO 28827
29158: POP
29159: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29160: LD_VAR 0 9
29164: PPUSH
29165: LD_VAR 0 3
29169: PPUSH
29170: LD_VAR 0 4
29174: PPUSH
29175: LD_INT 20
29177: PPUSH
29178: CALL 21182 0 4
29182: PUSH
29183: LD_INT 4
29185: ARRAY
29186: IFFALSE 29190
// exit ;
29188: GO 29239
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29190: LD_VAR 0 2
29194: PUSH
29195: LD_INT 29
29197: PUSH
29198: LD_INT 30
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: IN
29205: PUSH
29206: LD_VAR 0 3
29210: PPUSH
29211: LD_VAR 0 4
29215: PPUSH
29216: LD_VAR 0 9
29220: PPUSH
29221: CALL_OW 440
29225: NOT
29226: AND
29227: IFFALSE 29231
// exit ;
29229: GO 29239
// result := true ;
29231: LD_ADDR_VAR 0 6
29235: PUSH
29236: LD_INT 1
29238: ST_TO_ADDR
// end ;
29239: LD_VAR 0 6
29243: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29244: LD_INT 0
29246: PPUSH
29247: PPUSH
29248: PPUSH
29249: PPUSH
29250: PPUSH
29251: PPUSH
29252: PPUSH
29253: PPUSH
29254: PPUSH
29255: PPUSH
29256: PPUSH
29257: PPUSH
29258: PPUSH
29259: PPUSH
29260: PPUSH
29261: PPUSH
29262: PPUSH
29263: PPUSH
29264: PPUSH
29265: PPUSH
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
29282: PPUSH
29283: PPUSH
29284: PPUSH
29285: PPUSH
29286: PPUSH
29287: PPUSH
29288: PPUSH
29289: PPUSH
29290: PPUSH
29291: PPUSH
29292: PPUSH
29293: PPUSH
29294: PPUSH
29295: PPUSH
29296: PPUSH
29297: PPUSH
29298: PPUSH
29299: PPUSH
29300: PPUSH
29301: PPUSH
29302: PPUSH
29303: PPUSH
// result = [ ] ;
29304: LD_ADDR_VAR 0 7
29308: PUSH
29309: EMPTY
29310: ST_TO_ADDR
// temp_list = [ ] ;
29311: LD_ADDR_VAR 0 9
29315: PUSH
29316: EMPTY
29317: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29318: LD_VAR 0 4
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: LD_INT 3
29334: PUSH
29335: LD_INT 4
29337: PUSH
29338: LD_INT 5
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: IN
29349: NOT
29350: PUSH
29351: LD_VAR 0 1
29355: PUSH
29356: LD_INT 0
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: IN
29366: PUSH
29367: LD_VAR 0 5
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: LIST
29385: IN
29386: NOT
29387: AND
29388: OR
29389: IFFALSE 29393
// exit ;
29391: GO 47784
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29393: LD_VAR 0 1
29397: PUSH
29398: LD_INT 6
29400: PUSH
29401: LD_INT 7
29403: PUSH
29404: LD_INT 8
29406: PUSH
29407: LD_INT 13
29409: PUSH
29410: LD_INT 12
29412: PUSH
29413: LD_INT 15
29415: PUSH
29416: LD_INT 11
29418: PUSH
29419: LD_INT 14
29421: PUSH
29422: LD_INT 10
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: IN
29436: IFFALSE 29446
// btype = b_lab ;
29438: LD_ADDR_VAR 0 1
29442: PUSH
29443: LD_INT 6
29445: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29446: LD_VAR 0 6
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: LIST
29464: IN
29465: NOT
29466: PUSH
29467: LD_VAR 0 1
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: LD_INT 3
29483: PUSH
29484: LD_INT 6
29486: PUSH
29487: LD_INT 36
29489: PUSH
29490: LD_INT 4
29492: PUSH
29493: LD_INT 5
29495: PUSH
29496: LD_INT 31
29498: PUSH
29499: LD_INT 32
29501: PUSH
29502: LD_INT 33
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: IN
29518: NOT
29519: PUSH
29520: LD_VAR 0 6
29524: PUSH
29525: LD_INT 1
29527: EQUAL
29528: AND
29529: OR
29530: PUSH
29531: LD_VAR 0 1
29535: PUSH
29536: LD_INT 2
29538: PUSH
29539: LD_INT 3
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: IN
29546: NOT
29547: PUSH
29548: LD_VAR 0 6
29552: PUSH
29553: LD_INT 2
29555: EQUAL
29556: AND
29557: OR
29558: IFFALSE 29568
// mode = 0 ;
29560: LD_ADDR_VAR 0 6
29564: PUSH
29565: LD_INT 0
29567: ST_TO_ADDR
// case mode of 0 :
29568: LD_VAR 0 6
29572: PUSH
29573: LD_INT 0
29575: DOUBLE
29576: EQUAL
29577: IFTRUE 29581
29579: GO 41034
29581: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29582: LD_ADDR_VAR 0 11
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: LD_INT 0
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: LD_INT 1
29602: NEG
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: LD_INT 0
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 1
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 1
29640: NEG
29641: PUSH
29642: LD_INT 0
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 1
29651: NEG
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 1
29663: NEG
29664: PUSH
29665: LD_INT 2
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: LD_INT 2
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: LD_INT 2
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: LD_INT 2
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: NEG
29718: PUSH
29719: LD_INT 1
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 1
29728: PUSH
29729: LD_INT 3
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: LD_INT 3
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 1
29748: NEG
29749: PUSH
29750: LD_INT 2
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29775: LD_ADDR_VAR 0 12
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: LD_INT 0
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: LD_INT 1
29795: NEG
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: LD_INT 0
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 1
29856: PUSH
29857: LD_INT 1
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 2
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 2
29909: NEG
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 2
29921: NEG
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 3
29932: NEG
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 3
29943: NEG
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29971: LD_ADDR_VAR 0 13
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: LD_INT 0
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 0
29988: PUSH
29989: LD_INT 1
29991: NEG
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 1
30009: PUSH
30010: LD_INT 1
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: LD_INT 1
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: LD_INT 2
30056: NEG
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 2
30074: PUSH
30075: LD_INT 2
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 1
30084: PUSH
30085: LD_INT 2
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 2
30094: NEG
30095: PUSH
30096: LD_INT 1
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 2
30106: NEG
30107: PUSH
30108: LD_INT 2
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 2
30118: NEG
30119: PUSH
30120: LD_INT 3
30122: NEG
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 3
30130: NEG
30131: PUSH
30132: LD_INT 2
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 3
30142: NEG
30143: PUSH
30144: LD_INT 3
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30170: LD_ADDR_VAR 0 14
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 1
30239: NEG
30240: PUSH
30241: LD_INT 1
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: LD_INT 2
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: LD_INT 2
30266: NEG
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: LD_INT 2
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: NEG
30306: PUSH
30307: LD_INT 1
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 1
30316: NEG
30317: PUSH
30318: LD_INT 3
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: LD_INT 3
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: LD_INT 2
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30366: LD_ADDR_VAR 0 15
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 0
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: LD_INT 0
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 0
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 1
30424: NEG
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: LD_INT 1
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: LD_INT 1
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 2
30489: NEG
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 2
30500: NEG
30501: PUSH
30502: LD_INT 1
30504: NEG
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 2
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 3
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 3
30533: PUSH
30534: LD_INT 1
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30559: LD_ADDR_VAR 0 16
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: LD_INT 0
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 0
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: LD_INT 0
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 1
30597: PUSH
30598: LD_INT 1
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: LD_INT 0
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: NEG
30641: PUSH
30642: LD_INT 2
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 2
30662: PUSH
30663: LD_INT 2
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 2
30682: NEG
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 2
30694: NEG
30695: PUSH
30696: LD_INT 2
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 3
30706: PUSH
30707: LD_INT 2
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 3
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: LD_INT 3
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30752: LD_ADDR_VAR 0 17
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 1
30780: PUSH
30781: LD_INT 0
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 0
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 1
30821: NEG
30822: PUSH
30823: LD_INT 1
30825: NEG
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 1
30833: NEG
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: LD_INT 1
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: LD_INT 0
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 2
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 2
30887: PUSH
30888: LD_INT 2
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 1
30917: NEG
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: LD_INT 0
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 2
30951: NEG
30952: PUSH
30953: LD_INT 2
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30982: LD_ADDR_VAR 0 18
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: LD_INT 2
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 1
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 2
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: LD_INT 2
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: LD_INT 2
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: NEG
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 2
31158: NEG
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 2
31169: NEG
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: NEG
31182: PUSH
31183: LD_INT 2
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31212: LD_ADDR_VAR 0 19
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 0
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 1
31270: NEG
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: NEG
31282: PUSH
31283: LD_INT 1
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: LD_INT 2
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 2
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 2
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: NEG
31400: PUSH
31401: LD_INT 1
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 2
31411: NEG
31412: PUSH
31413: LD_INT 2
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31442: LD_ADDR_VAR 0 20
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 1
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 1
31511: NEG
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 1
31523: NEG
31524: PUSH
31525: LD_INT 2
31527: NEG
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 2
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 2
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: NEG
31630: PUSH
31631: LD_INT 1
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 2
31641: NEG
31642: PUSH
31643: LD_INT 2
31645: NEG
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31672: LD_ADDR_VAR 0 21
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: LD_INT 0
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 0
31720: PUSH
31721: LD_INT 1
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 1
31741: NEG
31742: PUSH
31743: LD_INT 1
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: LD_INT 2
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: LD_INT 2
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: LD_INT 1
31779: NEG
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 2
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 2
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: PUSH
31808: LD_INT 2
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: LD_INT 2
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 1
31837: NEG
31838: PUSH
31839: LD_INT 1
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 2
31848: NEG
31849: PUSH
31850: LD_INT 0
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: NEG
31860: PUSH
31861: LD_INT 1
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 2
31871: NEG
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31902: LD_ADDR_VAR 0 22
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 0
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 1
31960: NEG
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: NEG
31972: PUSH
31973: LD_INT 1
31975: NEG
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 1
31983: NEG
31984: PUSH
31985: LD_INT 2
31987: NEG
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 2
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 1
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: LD_INT 2
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: LD_INT 1
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 2
32078: NEG
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 2
32089: NEG
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 2
32101: NEG
32102: PUSH
32103: LD_INT 2
32105: NEG
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32132: LD_ADDR_VAR 0 23
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: LD_INT 0
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 1
32190: NEG
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: LD_INT 1
32205: NEG
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 1
32213: NEG
32214: PUSH
32215: LD_INT 2
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: LD_INT 2
32228: NEG
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: LD_INT 2
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 2
32308: NEG
32309: PUSH
32310: LD_INT 0
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 2
32319: NEG
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 2
32331: NEG
32332: PUSH
32333: LD_INT 2
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: NEG
32344: PUSH
32345: LD_INT 3
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: LD_INT 3
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 2
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32412: LD_ADDR_VAR 0 24
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 0
32505: PUSH
32506: LD_INT 2
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 2
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 2
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: LD_INT 2
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: LD_INT 2
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: NEG
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 2
32588: NEG
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 2
32599: NEG
32600: PUSH
32601: LD_INT 1
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 2
32611: NEG
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: LD_INT 2
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 2
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 3
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 3
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32688: LD_ADDR_VAR 0 25
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 1
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: LD_INT 1
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: LD_INT 2
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: LD_INT 2
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: LD_INT 2
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: NEG
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: LD_INT 0
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 2
32875: NEG
32876: PUSH
32877: LD_INT 1
32879: NEG
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 2
32887: NEG
32888: PUSH
32889: LD_INT 2
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 3
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 3
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 2
32919: PUSH
32920: LD_INT 3
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: LD_INT 3
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32962: LD_ADDR_VAR 0 26
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: NEG
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: LD_INT 2
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 2
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 2
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 2
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 2
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 1
33127: NEG
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: NEG
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 2
33149: NEG
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 2
33161: NEG
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 2
33173: PUSH
33174: LD_INT 3
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: LD_INT 3
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 1
33193: NEG
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 2
33204: NEG
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33238: LD_ADDR_VAR 0 27
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: LD_INT 0
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: LD_INT 1
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: LD_INT 2
33323: NEG
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 2
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: LD_INT 1
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: LD_INT 2
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: LD_INT 1
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 2
33425: NEG
33426: PUSH
33427: LD_INT 1
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: LD_INT 2
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: NEG
33461: PUSH
33462: LD_INT 1
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 3
33471: NEG
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 3
33483: NEG
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33518: LD_ADDR_VAR 0 28
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 0
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: LD_INT 1
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: LD_INT 2
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: LD_INT 2
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 2
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 2
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: LD_INT 2
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: LD_INT 2
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 1
33683: NEG
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 2
33694: NEG
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 2
33705: NEG
33706: PUSH
33707: LD_INT 1
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 2
33717: NEG
33718: PUSH
33719: LD_INT 2
33721: NEG
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: LD_INT 3
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: LD_INT 3
33745: NEG
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 3
33753: NEG
33754: PUSH
33755: LD_INT 1
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 3
33765: NEG
33766: PUSH
33767: LD_INT 2
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33800: LD_ADDR_VAR 0 29
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: LD_INT 0
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 1
33858: NEG
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: LD_INT 1
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: LD_INT 2
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 0
33893: PUSH
33894: LD_INT 2
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: LD_INT 1
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 2
33925: PUSH
33926: LD_INT 1
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: NEG
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 2
33966: NEG
33967: PUSH
33968: LD_INT 1
33970: NEG
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 2
33978: NEG
33979: PUSH
33980: LD_INT 2
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 2
33990: NEG
33991: PUSH
33992: LD_INT 3
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 1
34023: PUSH
34024: LD_INT 3
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: LD_INT 2
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 3
34044: NEG
34045: PUSH
34046: LD_INT 2
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34079: LD_ADDR_VAR 0 30
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: LD_INT 0
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 1
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: LD_INT 1
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: LD_INT 2
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: LD_INT 2
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 2
34194: PUSH
34195: LD_INT 0
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: LD_INT 2
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 1
34224: PUSH
34225: LD_INT 2
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 2
34245: NEG
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 2
34256: NEG
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: LD_INT 3
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 2
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 3
34291: PUSH
34292: LD_INT 2
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 2
34301: PUSH
34302: LD_INT 3
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 2
34311: NEG
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 3
34322: NEG
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34357: LD_ADDR_VAR 0 31
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: NEG
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 1
34438: NEG
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: LD_INT 1
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 2
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: LD_INT 2
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: LD_INT 2
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: LD_INT 2
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 2
34522: NEG
34523: PUSH
34524: LD_INT 1
34526: NEG
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: LD_INT 2
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 2
34546: NEG
34547: PUSH
34548: LD_INT 3
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 3
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: LD_INT 3
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: LD_INT 2
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 3
34600: NEG
34601: PUSH
34602: LD_INT 2
34604: NEG
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34635: LD_ADDR_VAR 0 32
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: LD_INT 1
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: NEG
34705: PUSH
34706: LD_INT 1
34708: NEG
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: LD_INT 2
34720: NEG
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: LD_INT 2
34731: NEG
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 2
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 2
34801: NEG
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: LD_INT 3
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 1
34836: PUSH
34837: LD_INT 2
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 3
34847: PUSH
34848: LD_INT 2
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 3
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 2
34867: NEG
34868: PUSH
34869: LD_INT 1
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 3
34878: NEG
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34913: LD_ADDR_VAR 0 33
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: LD_INT 1
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PUSH
34984: LD_INT 1
34986: NEG
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: LD_INT 2
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 1
35006: PUSH
35007: LD_INT 1
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 2
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: LD_INT 2
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 2
35068: NEG
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 2
35079: NEG
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: NEG
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: NEG
35104: PUSH
35105: LD_INT 3
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 2
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 3
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: LD_INT 3
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 3
35157: NEG
35158: PUSH
35159: LD_INT 2
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35192: LD_ADDR_VAR 0 34
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 1
35250: NEG
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: LD_INT 2
35288: NEG
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 1
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 2
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 2
35317: PUSH
35318: LD_INT 2
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 2
35348: NEG
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 2
35359: NEG
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 2
35371: NEG
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: NEG
35384: PUSH
35385: LD_INT 3
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: LD_INT 2
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 3
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: LD_INT 3
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 2
35426: NEG
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 3
35437: NEG
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35472: LD_ADDR_VAR 0 35
35476: PUSH
35477: LD_INT 0
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: LD_INT 1
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: LD_INT 0
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: NEG
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35584: LD_ADDR_VAR 0 36
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: LD_INT 1
35604: NEG
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: LD_INT 1
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: LD_INT 2
35669: NEG
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: LD_INT 2
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35696: LD_ADDR_VAR 0 37
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: LD_INT 1
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: NEG
35766: PUSH
35767: LD_INT 1
35769: NEG
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: LD_INT 1
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35808: LD_ADDR_VAR 0 38
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 0
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: LD_INT 0
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: LD_INT 0
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 1
35877: NEG
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 2
35899: NEG
35900: PUSH
35901: LD_INT 1
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35920: LD_ADDR_VAR 0 39
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 2
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: LD_INT 2
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36032: LD_ADDR_VAR 0 40
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: LD_INT 1
36052: NEG
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36144: LD_ADDR_VAR 0 41
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 1
36213: NEG
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: NEG
36226: PUSH
36227: LD_INT 2
36229: NEG
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: PUSH
36279: LD_INT 2
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 2
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 2
36322: NEG
36323: PUSH
36324: LD_INT 2
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 2
36334: NEG
36335: PUSH
36336: LD_INT 3
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 2
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 3
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 3
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 3
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 3
36387: PUSH
36388: LD_INT 3
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: LD_INT 3
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 2
36407: NEG
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 3
36418: NEG
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 3
36429: NEG
36430: PUSH
36431: LD_INT 1
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 3
36441: NEG
36442: PUSH
36443: LD_INT 2
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 3
36453: NEG
36454: PUSH
36455: LD_INT 3
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36494: LD_ADDR_VAR 0 42
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: LD_INT 1
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: NEG
36576: PUSH
36577: LD_INT 2
36579: NEG
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: LD_INT 2
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: LD_INT 2
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: LD_INT 2
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: LD_INT 2
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 2
36660: NEG
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: LD_INT 2
36676: NEG
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 2
36684: NEG
36685: PUSH
36686: LD_INT 3
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: LD_INT 3
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: LD_INT 3
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: LD_INT 2
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 3
36730: PUSH
36731: LD_INT 2
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 3
36740: PUSH
36741: LD_INT 3
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: LD_INT 3
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 3
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: LD_INT 3
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 3
36791: NEG
36792: PUSH
36793: LD_INT 2
36795: NEG
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 3
36803: NEG
36804: PUSH
36805: LD_INT 3
36807: NEG
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36844: LD_ADDR_VAR 0 43
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 1
36902: NEG
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: NEG
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: LD_INT 2
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 2
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 2
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 2
37010: NEG
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: NEG
37022: PUSH
37023: LD_INT 1
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: LD_INT 3
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 3
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: LD_INT 2
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 3
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 3
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: LD_INT 3
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: LD_INT 3
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: LD_INT 2
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 2
37129: NEG
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 3
37140: NEG
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 3
37151: NEG
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37192: LD_ADDR_VAR 0 44
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: LD_INT 2
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 2
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 2
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: LD_INT 2
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 2
37347: NEG
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 2
37358: NEG
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 2
37370: NEG
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 2
37382: NEG
37383: PUSH
37384: LD_INT 3
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 2
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 3
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 3
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 3
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 3
37435: PUSH
37436: LD_INT 3
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 2
37445: PUSH
37446: LD_INT 3
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 3
37466: NEG
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 3
37477: NEG
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 3
37489: NEG
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 3
37501: NEG
37502: PUSH
37503: LD_INT 3
37505: NEG
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37542: LD_ADDR_VAR 0 45
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: LD_INT 2
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: LD_INT 2
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 1
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 2
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 2
37708: NEG
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 2
37720: NEG
37721: PUSH
37722: LD_INT 2
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 2
37732: NEG
37733: PUSH
37734: LD_INT 3
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: LD_INT 3
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: LD_INT 3
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 3
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 3
37788: PUSH
37789: LD_INT 3
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: LD_INT 3
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: LD_INT 3
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 3
37839: NEG
37840: PUSH
37841: LD_INT 2
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 3
37851: NEG
37852: PUSH
37853: LD_INT 3
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37892: LD_ADDR_VAR 0 46
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: LD_INT 2
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: LD_INT 2
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 1
38027: PUSH
38028: LD_INT 2
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 2
38058: NEG
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 2
38069: NEG
38070: PUSH
38071: LD_INT 1
38073: NEG
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: LD_INT 3
38085: NEG
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: LD_INT 3
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 3
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 3
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: LD_INT 3
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: LD_INT 3
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 2
38177: NEG
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 3
38188: NEG
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 3
38199: NEG
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38240: LD_ADDR_VAR 0 47
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: NEG
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: LD_INT 2
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: LD_INT 2
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 2
38355: NEG
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: LD_INT 2
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38391: LD_ADDR_VAR 0 48
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: LD_INT 2
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: LD_INT 2
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 2
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38538: LD_ADDR_VAR 0 49
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: LD_INT 0
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: LD_INT 1
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: LD_INT 1
38622: NEG
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: LD_INT 2
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: LD_INT 2
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38682: LD_ADDR_VAR 0 50
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: LD_INT 1
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: NEG
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38826: LD_ADDR_VAR 0 51
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: LD_INT 2
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 2
38938: NEG
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 2
38949: NEG
38950: PUSH
38951: LD_INT 1
38953: NEG
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38973: LD_ADDR_VAR 0 52
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 1
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: NEG
39055: PUSH
39056: LD_INT 2
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: NEG
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 2
39100: NEG
39101: PUSH
39102: LD_INT 2
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39124: LD_ADDR_VAR 0 53
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: LD_INT 2
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 2
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 2
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: LD_INT 2
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: NEG
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: LD_INT 2
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39354: LD_ADDR_VAR 0 54
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: LD_INT 2
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: LD_INT 2
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 2
39530: NEG
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 2
39553: NEG
39554: PUSH
39555: LD_INT 2
39557: NEG
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39584: LD_ADDR_VAR 0 55
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 2
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: LD_INT 2
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 2
39760: NEG
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 2
39771: NEG
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39814: LD_ADDR_VAR 0 56
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: LD_INT 2
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 2
40001: NEG
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: LD_INT 2
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40044: LD_ADDR_VAR 0 57
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: NEG
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: LD_INT 2
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: LD_INT 1
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: LD_INT 2
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: LD_INT 2
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 2
40220: NEG
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: NEG
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: LD_INT 2
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40274: LD_ADDR_VAR 0 58
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 2
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 2
40450: NEG
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: LD_INT 2
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40504: LD_ADDR_VAR 0 59
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40592: LD_ADDR_VAR 0 60
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40680: LD_ADDR_VAR 0 61
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: NEG
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40768: LD_ADDR_VAR 0 62
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40856: LD_ADDR_VAR 0 63
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40944: LD_ADDR_VAR 0 64
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: ST_TO_ADDR
// end ; 1 :
41032: GO 46929
41034: LD_INT 1
41036: DOUBLE
41037: EQUAL
41038: IFTRUE 41042
41040: GO 43665
41042: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41043: LD_ADDR_VAR 0 11
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: LD_INT 3
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: LD_INT 3
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: LIST
41086: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41087: LD_ADDR_VAR 0 12
41091: PUSH
41092: LD_INT 2
41094: PUSH
41095: LD_INT 1
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 3
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 3
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: LIST
41127: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41128: LD_ADDR_VAR 0 13
41132: PUSH
41133: LD_INT 3
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 3
41145: PUSH
41146: LD_INT 3
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 2
41155: PUSH
41156: LD_INT 3
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: LIST
41167: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41168: LD_ADDR_VAR 0 14
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 3
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 3
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: LIST
41208: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41209: LD_ADDR_VAR 0 15
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 3
41227: NEG
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 3
41238: NEG
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: LIST
41252: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41253: LD_ADDR_VAR 0 16
41257: PUSH
41258: LD_INT 2
41260: NEG
41261: PUSH
41262: LD_INT 3
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 3
41272: NEG
41273: PUSH
41274: LD_INT 2
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 3
41284: NEG
41285: PUSH
41286: LD_INT 3
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: LIST
41298: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41299: LD_ADDR_VAR 0 17
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: LD_INT 3
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: LD_INT 3
41321: NEG
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: LIST
41342: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41343: LD_ADDR_VAR 0 18
41347: PUSH
41348: LD_INT 2
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 3
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 3
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41384: LD_ADDR_VAR 0 19
41388: PUSH
41389: LD_INT 3
41391: PUSH
41392: LD_INT 2
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 3
41401: PUSH
41402: LD_INT 3
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 3
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: LIST
41423: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41424: LD_ADDR_VAR 0 20
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: LD_INT 3
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41465: LD_ADDR_VAR 0 21
41469: PUSH
41470: LD_INT 2
41472: NEG
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 3
41483: NEG
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 3
41494: NEG
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: LIST
41508: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41509: LD_ADDR_VAR 0 22
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: LD_INT 3
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 3
41528: NEG
41529: PUSH
41530: LD_INT 2
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 3
41540: NEG
41541: PUSH
41542: LD_INT 3
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41555: LD_ADDR_VAR 0 23
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 3
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: LD_INT 4
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: LD_INT 3
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: LIST
41598: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41599: LD_ADDR_VAR 0 24
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 3
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 4
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: LIST
41639: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41640: LD_ADDR_VAR 0 25
41644: PUSH
41645: LD_INT 3
41647: PUSH
41648: LD_INT 3
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 4
41657: PUSH
41658: LD_INT 3
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 3
41667: PUSH
41668: LD_INT 4
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41680: LD_ADDR_VAR 0 26
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: LD_INT 3
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 4
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: LD_INT 3
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: LIST
41720: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41721: LD_ADDR_VAR 0 27
41725: PUSH
41726: LD_INT 3
41728: NEG
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 3
41739: NEG
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 4
41750: NEG
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: LIST
41764: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41765: LD_ADDR_VAR 0 28
41769: PUSH
41770: LD_INT 3
41772: NEG
41773: PUSH
41774: LD_INT 3
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 3
41784: NEG
41785: PUSH
41786: LD_INT 4
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 4
41796: NEG
41797: PUSH
41798: LD_INT 3
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: LIST
41810: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41811: LD_ADDR_VAR 0 29
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 3
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 3
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: LD_INT 4
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 4
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 3
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: LD_INT 5
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: LD_INT 5
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: LD_INT 4
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 6
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: LD_INT 6
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: LD_INT 5
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
41966: LD_ADDR_VAR 0 30
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 3
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 3
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 4
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 4
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 4
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 5
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 5
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 5
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 6
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 6
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42109: LD_ADDR_VAR 0 31
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 3
42126: PUSH
42127: LD_INT 3
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: LD_INT 3
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 4
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 4
42156: PUSH
42157: LD_INT 4
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 3
42166: PUSH
42167: LD_INT 4
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 5
42176: PUSH
42177: LD_INT 4
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 5
42186: PUSH
42187: LD_INT 5
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 4
42196: PUSH
42197: LD_INT 5
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 6
42206: PUSH
42207: LD_INT 5
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 6
42216: PUSH
42217: LD_INT 6
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 5
42226: PUSH
42227: LD_INT 6
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42248: LD_ADDR_VAR 0 32
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: LD_INT 3
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 3
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 2
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 4
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 4
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: LD_INT 3
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 5
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 5
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 4
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: LD_INT 6
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 6
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: LD_INT 5
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42391: LD_ADDR_VAR 0 33
42395: PUSH
42396: LD_INT 2
42398: NEG
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 3
42409: NEG
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 3
42420: NEG
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 3
42432: NEG
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 4
42443: NEG
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 4
42454: NEG
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 4
42466: NEG
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 5
42477: NEG
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 5
42488: NEG
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 5
42500: NEG
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 6
42511: NEG
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 6
42522: NEG
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42546: LD_ADDR_VAR 0 34
42550: PUSH
42551: LD_INT 2
42553: NEG
42554: PUSH
42555: LD_INT 3
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 3
42565: NEG
42566: PUSH
42567: LD_INT 2
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 3
42577: NEG
42578: PUSH
42579: LD_INT 3
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 3
42589: NEG
42590: PUSH
42591: LD_INT 4
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 4
42601: NEG
42602: PUSH
42603: LD_INT 3
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 4
42613: NEG
42614: PUSH
42615: LD_INT 4
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 4
42625: NEG
42626: PUSH
42627: LD_INT 5
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 5
42637: NEG
42638: PUSH
42639: LD_INT 4
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 5
42649: NEG
42650: PUSH
42651: LD_INT 5
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 5
42661: NEG
42662: PUSH
42663: LD_INT 6
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 6
42673: NEG
42674: PUSH
42675: LD_INT 5
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 6
42685: NEG
42686: PUSH
42687: LD_INT 6
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42709: LD_ADDR_VAR 0 41
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 3
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: LIST
42752: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42753: LD_ADDR_VAR 0 42
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 3
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42794: LD_ADDR_VAR 0 43
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 3
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: LD_INT 3
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42834: LD_ADDR_VAR 0 44
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: LD_INT 3
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: LIST
42874: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42875: LD_ADDR_VAR 0 45
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 3
42904: NEG
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42919: LD_ADDR_VAR 0 46
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 2
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: LD_INT 3
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 3
42950: NEG
42951: PUSH
42952: LD_INT 2
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: LIST
42964: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
42965: LD_ADDR_VAR 0 47
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: LD_INT 3
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: LD_INT 3
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42998: LD_ADDR_VAR 0 48
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43029: LD_ADDR_VAR 0 49
43033: PUSH
43034: LD_INT 3
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 3
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43058: LD_ADDR_VAR 0 50
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 3
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 3
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43087: LD_ADDR_VAR 0 51
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43118: LD_ADDR_VAR 0 52
43122: PUSH
43123: LD_INT 3
43125: NEG
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 3
43137: NEG
43138: PUSH
43139: LD_INT 2
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43151: LD_ADDR_VAR 0 53
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: LD_INT 3
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: LD_INT 3
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: LD_INT 2
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: LIST
43194: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43195: LD_ADDR_VAR 0 54
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: LIST
43235: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43236: LD_ADDR_VAR 0 55
43240: PUSH
43241: LD_INT 3
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 3
43253: PUSH
43254: LD_INT 3
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: LD_INT 3
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43276: LD_ADDR_VAR 0 56
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: LD_INT 3
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: LD_INT 3
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43317: LD_ADDR_VAR 0 57
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 3
43335: NEG
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 3
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43361: LD_ADDR_VAR 0 58
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: LD_INT 3
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 3
43380: NEG
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 3
43392: NEG
43393: PUSH
43394: LD_INT 3
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: LIST
43406: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43407: LD_ADDR_VAR 0 59
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: LIST
43450: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43451: LD_ADDR_VAR 0 60
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 2
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43492: LD_ADDR_VAR 0 61
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: LIST
43531: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43532: LD_ADDR_VAR 0 62
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: LIST
43572: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43573: LD_ADDR_VAR 0 63
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: NEG
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: LIST
43616: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43617: LD_ADDR_VAR 0 64
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 2
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
// end ; 2 :
43663: GO 46929
43665: LD_INT 2
43667: DOUBLE
43668: EQUAL
43669: IFTRUE 43673
43671: GO 46928
43673: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43674: LD_ADDR_VAR 0 29
43678: PUSH
43679: LD_INT 4
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 4
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 5
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 5
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 4
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 3
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 3
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 3
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 5
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 3
43774: PUSH
43775: LD_INT 3
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 3
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 4
43794: PUSH
43795: LD_INT 3
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 4
43804: PUSH
43805: LD_INT 4
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 3
43814: PUSH
43815: LD_INT 4
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 3
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 4
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: LD_INT 4
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 4
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 3
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 4
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 5
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 5
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 4
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 3
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: LD_INT 5
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 3
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 3
43957: NEG
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 3
43968: NEG
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: NEG
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 3
44002: NEG
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 4
44013: NEG
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 4
44024: NEG
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 4
44036: NEG
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: NEG
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 4
44059: NEG
44060: PUSH
44061: LD_INT 4
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 4
44071: NEG
44072: PUSH
44073: LD_INT 5
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 3
44083: NEG
44084: PUSH
44085: LD_INT 4
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 3
44095: NEG
44096: PUSH
44097: LD_INT 3
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 4
44107: NEG
44108: PUSH
44109: LD_INT 3
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 5
44119: NEG
44120: PUSH
44121: LD_INT 4
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 5
44131: NEG
44132: PUSH
44133: LD_INT 5
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 3
44143: NEG
44144: PUSH
44145: LD_INT 5
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 5
44155: NEG
44156: PUSH
44157: LD_INT 3
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44212: LD_ADDR_VAR 0 30
44216: PUSH
44217: LD_INT 4
44219: PUSH
44220: LD_INT 4
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 4
44229: PUSH
44230: LD_INT 3
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 5
44239: PUSH
44240: LD_INT 4
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 5
44249: PUSH
44250: LD_INT 5
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 4
44259: PUSH
44260: LD_INT 5
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 3
44269: PUSH
44270: LD_INT 4
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 3
44279: PUSH
44280: LD_INT 3
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 5
44289: PUSH
44290: LD_INT 3
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 3
44299: PUSH
44300: LD_INT 5
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 3
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 3
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: LD_INT 4
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 4
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 3
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: LD_INT 4
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 4
44402: NEG
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 4
44413: NEG
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 3
44425: NEG
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 3
44436: NEG
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 4
44447: NEG
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 5
44458: NEG
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 5
44469: NEG
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 5
44481: NEG
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 3
44493: NEG
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 3
44504: NEG
44505: PUSH
44506: LD_INT 3
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 3
44516: NEG
44517: PUSH
44518: LD_INT 4
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: LD_INT 3
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 3
44552: NEG
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 4
44564: NEG
44565: PUSH
44566: LD_INT 3
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 4
44576: NEG
44577: PUSH
44578: LD_INT 4
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: NEG
44589: PUSH
44590: LD_INT 4
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 4
44600: NEG
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 4
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 5
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 4
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: LD_INT 3
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 3
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: LD_INT 4
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: LD_INT 5
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: LD_INT 3
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: NEG
44703: PUSH
44704: LD_INT 5
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44759: LD_ADDR_VAR 0 31
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 4
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 3
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 4
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: LD_INT 5
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: LD_INT 5
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 4
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: LD_INT 3
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: LD_INT 5
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 2
44848: NEG
44849: PUSH
44850: LD_INT 3
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 3
44859: NEG
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 3
44870: NEG
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 3
44904: NEG
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 4
44915: NEG
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 4
44926: NEG
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 4
44938: NEG
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 4
44961: NEG
44962: PUSH
44963: LD_INT 4
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 4
44973: NEG
44974: PUSH
44975: LD_INT 5
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 3
44985: NEG
44986: PUSH
44987: LD_INT 4
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 3
44997: NEG
44998: PUSH
44999: LD_INT 3
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 4
45009: NEG
45010: PUSH
45011: LD_INT 3
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 5
45021: NEG
45022: PUSH
45023: LD_INT 4
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 5
45033: NEG
45034: PUSH
45035: LD_INT 5
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: LD_INT 5
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 5
45057: NEG
45058: PUSH
45059: LD_INT 3
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 3
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 4
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 3
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 3
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: LD_INT 4
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: LD_INT 4
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 4
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 4
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 5
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 5
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 4
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 3
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 3
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 5
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45309: LD_ADDR_VAR 0 32
45313: PUSH
45314: LD_INT 4
45316: NEG
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 4
45327: NEG
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 3
45339: NEG
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 3
45350: NEG
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 4
45361: NEG
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 5
45372: NEG
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 5
45383: NEG
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 5
45395: NEG
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 3
45407: NEG
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 3
45418: NEG
45419: PUSH
45420: LD_INT 3
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 3
45430: NEG
45431: PUSH
45432: LD_INT 4
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: LD_INT 3
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 3
45466: NEG
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 4
45478: NEG
45479: PUSH
45480: LD_INT 3
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 4
45490: NEG
45491: PUSH
45492: LD_INT 4
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 4
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 4
45514: NEG
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 4
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 5
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 4
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 3
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 3
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: LD_INT 4
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: LD_INT 5
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: LD_INT 3
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: LD_INT 5
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 3
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 3
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 4
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 4
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 3
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 4
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 4
45721: PUSH
45722: LD_INT 4
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 4
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 5
45741: PUSH
45742: LD_INT 4
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 5
45751: PUSH
45752: LD_INT 5
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 4
45761: PUSH
45762: LD_INT 5
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 3
45771: PUSH
45772: LD_INT 4
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 3
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 5
45791: PUSH
45792: LD_INT 3
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 3
45801: PUSH
45802: LD_INT 5
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45856: LD_ADDR_VAR 0 33
45860: PUSH
45861: LD_INT 4
45863: NEG
45864: PUSH
45865: LD_INT 4
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 4
45875: NEG
45876: PUSH
45877: LD_INT 5
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 3
45887: NEG
45888: PUSH
45889: LD_INT 4
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 3
45899: NEG
45900: PUSH
45901: LD_INT 3
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 4
45911: NEG
45912: PUSH
45913: LD_INT 3
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 5
45923: NEG
45924: PUSH
45925: LD_INT 4
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 5
45935: NEG
45936: PUSH
45937: LD_INT 5
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 3
45947: NEG
45948: PUSH
45949: LD_INT 5
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 5
45959: NEG
45960: PUSH
45961: LD_INT 3
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: LD_INT 4
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: LD_INT 3
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 2
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: LD_INT 3
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: LD_INT 4
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: LD_INT 4
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 4
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 4
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 5
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 5
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 4
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 3
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 3
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 5
46156: PUSH
46157: LD_INT 2
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 3
46166: PUSH
46167: LD_INT 3
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 4
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 4
46196: PUSH
46197: LD_INT 4
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 3
46206: PUSH
46207: LD_INT 4
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 4
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: LD_INT 4
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 4
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 3
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: LD_INT 4
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: LD_INT 5
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 5
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 4
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: LD_INT 5
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46394: LD_ADDR_VAR 0 34
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 4
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 5
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 4
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: LD_INT 3
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 3
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 4
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 5
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: LD_INT 5
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 3
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 3
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 4
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 4
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 3
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 4
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 4
46596: PUSH
46597: LD_INT 4
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 4
46606: PUSH
46607: LD_INT 3
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 5
46616: PUSH
46617: LD_INT 4
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 5
46626: PUSH
46627: LD_INT 5
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 4
46636: PUSH
46637: LD_INT 5
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 3
46646: PUSH
46647: LD_INT 4
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 3
46656: PUSH
46657: LD_INT 3
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 5
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 3
46676: PUSH
46677: LD_INT 5
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 4
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 4
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 3
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 4
46779: NEG
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 4
46790: NEG
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 3
46802: NEG
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 4
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 5
46835: NEG
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 5
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 5
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 3
46870: NEG
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: ST_TO_ADDR
// end ; end ;
46926: GO 46929
46928: POP
// case btype of b_depot , b_warehouse :
46929: LD_VAR 0 1
46933: PUSH
46934: LD_INT 0
46936: DOUBLE
46937: EQUAL
46938: IFTRUE 46948
46940: LD_INT 1
46942: DOUBLE
46943: EQUAL
46944: IFTRUE 46948
46946: GO 47149
46948: POP
// case nation of nation_american :
46949: LD_VAR 0 5
46953: PUSH
46954: LD_INT 1
46956: DOUBLE
46957: EQUAL
46958: IFTRUE 46962
46960: GO 47018
46962: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
46963: LD_ADDR_VAR 0 9
46967: PUSH
46968: LD_VAR 0 11
46972: PUSH
46973: LD_VAR 0 12
46977: PUSH
46978: LD_VAR 0 13
46982: PUSH
46983: LD_VAR 0 14
46987: PUSH
46988: LD_VAR 0 15
46992: PUSH
46993: LD_VAR 0 16
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: PUSH
47006: LD_VAR 0 4
47010: PUSH
47011: LD_INT 1
47013: PLUS
47014: ARRAY
47015: ST_TO_ADDR
47016: GO 47147
47018: LD_INT 2
47020: DOUBLE
47021: EQUAL
47022: IFTRUE 47026
47024: GO 47082
47026: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47027: LD_ADDR_VAR 0 9
47031: PUSH
47032: LD_VAR 0 17
47036: PUSH
47037: LD_VAR 0 18
47041: PUSH
47042: LD_VAR 0 19
47046: PUSH
47047: LD_VAR 0 20
47051: PUSH
47052: LD_VAR 0 21
47056: PUSH
47057: LD_VAR 0 22
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: PUSH
47070: LD_VAR 0 4
47074: PUSH
47075: LD_INT 1
47077: PLUS
47078: ARRAY
47079: ST_TO_ADDR
47080: GO 47147
47082: LD_INT 3
47084: DOUBLE
47085: EQUAL
47086: IFTRUE 47090
47088: GO 47146
47090: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47091: LD_ADDR_VAR 0 9
47095: PUSH
47096: LD_VAR 0 23
47100: PUSH
47101: LD_VAR 0 24
47105: PUSH
47106: LD_VAR 0 25
47110: PUSH
47111: LD_VAR 0 26
47115: PUSH
47116: LD_VAR 0 27
47120: PUSH
47121: LD_VAR 0 28
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: PUSH
47134: LD_VAR 0 4
47138: PUSH
47139: LD_INT 1
47141: PLUS
47142: ARRAY
47143: ST_TO_ADDR
47144: GO 47147
47146: POP
47147: GO 47702
47149: LD_INT 2
47151: DOUBLE
47152: EQUAL
47153: IFTRUE 47163
47155: LD_INT 3
47157: DOUBLE
47158: EQUAL
47159: IFTRUE 47163
47161: GO 47219
47163: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47164: LD_ADDR_VAR 0 9
47168: PUSH
47169: LD_VAR 0 29
47173: PUSH
47174: LD_VAR 0 30
47178: PUSH
47179: LD_VAR 0 31
47183: PUSH
47184: LD_VAR 0 32
47188: PUSH
47189: LD_VAR 0 33
47193: PUSH
47194: LD_VAR 0 34
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: PUSH
47207: LD_VAR 0 4
47211: PUSH
47212: LD_INT 1
47214: PLUS
47215: ARRAY
47216: ST_TO_ADDR
47217: GO 47702
47219: LD_INT 16
47221: DOUBLE
47222: EQUAL
47223: IFTRUE 47281
47225: LD_INT 17
47227: DOUBLE
47228: EQUAL
47229: IFTRUE 47281
47231: LD_INT 18
47233: DOUBLE
47234: EQUAL
47235: IFTRUE 47281
47237: LD_INT 19
47239: DOUBLE
47240: EQUAL
47241: IFTRUE 47281
47243: LD_INT 22
47245: DOUBLE
47246: EQUAL
47247: IFTRUE 47281
47249: LD_INT 20
47251: DOUBLE
47252: EQUAL
47253: IFTRUE 47281
47255: LD_INT 21
47257: DOUBLE
47258: EQUAL
47259: IFTRUE 47281
47261: LD_INT 23
47263: DOUBLE
47264: EQUAL
47265: IFTRUE 47281
47267: LD_INT 24
47269: DOUBLE
47270: EQUAL
47271: IFTRUE 47281
47273: LD_INT 25
47275: DOUBLE
47276: EQUAL
47277: IFTRUE 47281
47279: GO 47337
47281: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47282: LD_ADDR_VAR 0 9
47286: PUSH
47287: LD_VAR 0 35
47291: PUSH
47292: LD_VAR 0 36
47296: PUSH
47297: LD_VAR 0 37
47301: PUSH
47302: LD_VAR 0 38
47306: PUSH
47307: LD_VAR 0 39
47311: PUSH
47312: LD_VAR 0 40
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: PUSH
47325: LD_VAR 0 4
47329: PUSH
47330: LD_INT 1
47332: PLUS
47333: ARRAY
47334: ST_TO_ADDR
47335: GO 47702
47337: LD_INT 6
47339: DOUBLE
47340: EQUAL
47341: IFTRUE 47393
47343: LD_INT 7
47345: DOUBLE
47346: EQUAL
47347: IFTRUE 47393
47349: LD_INT 8
47351: DOUBLE
47352: EQUAL
47353: IFTRUE 47393
47355: LD_INT 13
47357: DOUBLE
47358: EQUAL
47359: IFTRUE 47393
47361: LD_INT 12
47363: DOUBLE
47364: EQUAL
47365: IFTRUE 47393
47367: LD_INT 15
47369: DOUBLE
47370: EQUAL
47371: IFTRUE 47393
47373: LD_INT 11
47375: DOUBLE
47376: EQUAL
47377: IFTRUE 47393
47379: LD_INT 14
47381: DOUBLE
47382: EQUAL
47383: IFTRUE 47393
47385: LD_INT 10
47387: DOUBLE
47388: EQUAL
47389: IFTRUE 47393
47391: GO 47449
47393: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47394: LD_ADDR_VAR 0 9
47398: PUSH
47399: LD_VAR 0 41
47403: PUSH
47404: LD_VAR 0 42
47408: PUSH
47409: LD_VAR 0 43
47413: PUSH
47414: LD_VAR 0 44
47418: PUSH
47419: LD_VAR 0 45
47423: PUSH
47424: LD_VAR 0 46
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: PUSH
47437: LD_VAR 0 4
47441: PUSH
47442: LD_INT 1
47444: PLUS
47445: ARRAY
47446: ST_TO_ADDR
47447: GO 47702
47449: LD_INT 36
47451: DOUBLE
47452: EQUAL
47453: IFTRUE 47457
47455: GO 47513
47457: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47458: LD_ADDR_VAR 0 9
47462: PUSH
47463: LD_VAR 0 47
47467: PUSH
47468: LD_VAR 0 48
47472: PUSH
47473: LD_VAR 0 49
47477: PUSH
47478: LD_VAR 0 50
47482: PUSH
47483: LD_VAR 0 51
47487: PUSH
47488: LD_VAR 0 52
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: PUSH
47501: LD_VAR 0 4
47505: PUSH
47506: LD_INT 1
47508: PLUS
47509: ARRAY
47510: ST_TO_ADDR
47511: GO 47702
47513: LD_INT 4
47515: DOUBLE
47516: EQUAL
47517: IFTRUE 47539
47519: LD_INT 5
47521: DOUBLE
47522: EQUAL
47523: IFTRUE 47539
47525: LD_INT 34
47527: DOUBLE
47528: EQUAL
47529: IFTRUE 47539
47531: LD_INT 37
47533: DOUBLE
47534: EQUAL
47535: IFTRUE 47539
47537: GO 47595
47539: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47540: LD_ADDR_VAR 0 9
47544: PUSH
47545: LD_VAR 0 53
47549: PUSH
47550: LD_VAR 0 54
47554: PUSH
47555: LD_VAR 0 55
47559: PUSH
47560: LD_VAR 0 56
47564: PUSH
47565: LD_VAR 0 57
47569: PUSH
47570: LD_VAR 0 58
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: PUSH
47583: LD_VAR 0 4
47587: PUSH
47588: LD_INT 1
47590: PLUS
47591: ARRAY
47592: ST_TO_ADDR
47593: GO 47702
47595: LD_INT 31
47597: DOUBLE
47598: EQUAL
47599: IFTRUE 47645
47601: LD_INT 32
47603: DOUBLE
47604: EQUAL
47605: IFTRUE 47645
47607: LD_INT 33
47609: DOUBLE
47610: EQUAL
47611: IFTRUE 47645
47613: LD_INT 27
47615: DOUBLE
47616: EQUAL
47617: IFTRUE 47645
47619: LD_INT 26
47621: DOUBLE
47622: EQUAL
47623: IFTRUE 47645
47625: LD_INT 28
47627: DOUBLE
47628: EQUAL
47629: IFTRUE 47645
47631: LD_INT 29
47633: DOUBLE
47634: EQUAL
47635: IFTRUE 47645
47637: LD_INT 30
47639: DOUBLE
47640: EQUAL
47641: IFTRUE 47645
47643: GO 47701
47645: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47646: LD_ADDR_VAR 0 9
47650: PUSH
47651: LD_VAR 0 59
47655: PUSH
47656: LD_VAR 0 60
47660: PUSH
47661: LD_VAR 0 61
47665: PUSH
47666: LD_VAR 0 62
47670: PUSH
47671: LD_VAR 0 63
47675: PUSH
47676: LD_VAR 0 64
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: PUSH
47689: LD_VAR 0 4
47693: PUSH
47694: LD_INT 1
47696: PLUS
47697: ARRAY
47698: ST_TO_ADDR
47699: GO 47702
47701: POP
// temp_list2 = [ ] ;
47702: LD_ADDR_VAR 0 10
47706: PUSH
47707: EMPTY
47708: ST_TO_ADDR
// for i in temp_list do
47709: LD_ADDR_VAR 0 8
47713: PUSH
47714: LD_VAR 0 9
47718: PUSH
47719: FOR_IN
47720: IFFALSE 47772
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47722: LD_ADDR_VAR 0 10
47726: PUSH
47727: LD_VAR 0 10
47731: PUSH
47732: LD_VAR 0 8
47736: PUSH
47737: LD_INT 1
47739: ARRAY
47740: PUSH
47741: LD_VAR 0 2
47745: PLUS
47746: PUSH
47747: LD_VAR 0 8
47751: PUSH
47752: LD_INT 2
47754: ARRAY
47755: PUSH
47756: LD_VAR 0 3
47760: PLUS
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: EMPTY
47767: LIST
47768: ADD
47769: ST_TO_ADDR
47770: GO 47719
47772: POP
47773: POP
// result = temp_list2 ;
47774: LD_ADDR_VAR 0 7
47778: PUSH
47779: LD_VAR 0 10
47783: ST_TO_ADDR
// end ;
47784: LD_VAR 0 7
47788: RET
// export function EnemyInRange ( unit , dist ) ; begin
47789: LD_INT 0
47791: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47792: LD_ADDR_VAR 0 3
47796: PUSH
47797: LD_VAR 0 1
47801: PPUSH
47802: CALL_OW 255
47806: PPUSH
47807: LD_VAR 0 1
47811: PPUSH
47812: CALL_OW 250
47816: PPUSH
47817: LD_VAR 0 1
47821: PPUSH
47822: CALL_OW 251
47826: PPUSH
47827: LD_VAR 0 2
47831: PPUSH
47832: CALL 21182 0 4
47836: PUSH
47837: LD_INT 4
47839: ARRAY
47840: ST_TO_ADDR
// end ;
47841: LD_VAR 0 3
47845: RET
// export function PlayerSeeMe ( unit ) ; begin
47846: LD_INT 0
47848: PPUSH
// result := See ( your_side , unit ) ;
47849: LD_ADDR_VAR 0 2
47853: PUSH
47854: LD_OWVAR 2
47858: PPUSH
47859: LD_VAR 0 1
47863: PPUSH
47864: CALL_OW 292
47868: ST_TO_ADDR
// end ;
47869: LD_VAR 0 2
47873: RET
// export function ReverseDir ( unit ) ; begin
47874: LD_INT 0
47876: PPUSH
// if not unit then
47877: LD_VAR 0 1
47881: NOT
47882: IFFALSE 47886
// exit ;
47884: GO 47909
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47886: LD_ADDR_VAR 0 2
47890: PUSH
47891: LD_VAR 0 1
47895: PPUSH
47896: CALL_OW 254
47900: PUSH
47901: LD_INT 3
47903: PLUS
47904: PUSH
47905: LD_INT 6
47907: MOD
47908: ST_TO_ADDR
// end ;
47909: LD_VAR 0 2
47913: RET
// export function ReverseArray ( array ) ; var i ; begin
47914: LD_INT 0
47916: PPUSH
47917: PPUSH
// if not array then
47918: LD_VAR 0 1
47922: NOT
47923: IFFALSE 47927
// exit ;
47925: GO 47982
// result := [ ] ;
47927: LD_ADDR_VAR 0 2
47931: PUSH
47932: EMPTY
47933: ST_TO_ADDR
// for i := array downto 1 do
47934: LD_ADDR_VAR 0 3
47938: PUSH
47939: DOUBLE
47940: LD_VAR 0 1
47944: INC
47945: ST_TO_ADDR
47946: LD_INT 1
47948: PUSH
47949: FOR_DOWNTO
47950: IFFALSE 47980
// result := Join ( result , array [ i ] ) ;
47952: LD_ADDR_VAR 0 2
47956: PUSH
47957: LD_VAR 0 2
47961: PPUSH
47962: LD_VAR 0 1
47966: PUSH
47967: LD_VAR 0 3
47971: ARRAY
47972: PPUSH
47973: CALL 52625 0 2
47977: ST_TO_ADDR
47978: GO 47949
47980: POP
47981: POP
// end ;
47982: LD_VAR 0 2
47986: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
47987: LD_INT 0
47989: PPUSH
47990: PPUSH
47991: PPUSH
47992: PPUSH
47993: PPUSH
47994: PPUSH
// if not unit or not hexes then
47995: LD_VAR 0 1
47999: NOT
48000: PUSH
48001: LD_VAR 0 2
48005: NOT
48006: OR
48007: IFFALSE 48011
// exit ;
48009: GO 48134
// dist := 9999 ;
48011: LD_ADDR_VAR 0 5
48015: PUSH
48016: LD_INT 9999
48018: ST_TO_ADDR
// for i = 1 to hexes do
48019: LD_ADDR_VAR 0 4
48023: PUSH
48024: DOUBLE
48025: LD_INT 1
48027: DEC
48028: ST_TO_ADDR
48029: LD_VAR 0 2
48033: PUSH
48034: FOR_TO
48035: IFFALSE 48122
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48037: LD_ADDR_VAR 0 6
48041: PUSH
48042: LD_VAR 0 1
48046: PPUSH
48047: LD_VAR 0 2
48051: PUSH
48052: LD_VAR 0 4
48056: ARRAY
48057: PUSH
48058: LD_INT 1
48060: ARRAY
48061: PPUSH
48062: LD_VAR 0 2
48066: PUSH
48067: LD_VAR 0 4
48071: ARRAY
48072: PUSH
48073: LD_INT 2
48075: ARRAY
48076: PPUSH
48077: CALL_OW 297
48081: ST_TO_ADDR
// if tdist < dist then
48082: LD_VAR 0 6
48086: PUSH
48087: LD_VAR 0 5
48091: LESS
48092: IFFALSE 48120
// begin hex := hexes [ i ] ;
48094: LD_ADDR_VAR 0 8
48098: PUSH
48099: LD_VAR 0 2
48103: PUSH
48104: LD_VAR 0 4
48108: ARRAY
48109: ST_TO_ADDR
// dist := tdist ;
48110: LD_ADDR_VAR 0 5
48114: PUSH
48115: LD_VAR 0 6
48119: ST_TO_ADDR
// end ; end ;
48120: GO 48034
48122: POP
48123: POP
// result := hex ;
48124: LD_ADDR_VAR 0 3
48128: PUSH
48129: LD_VAR 0 8
48133: ST_TO_ADDR
// end ;
48134: LD_VAR 0 3
48138: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48139: LD_INT 0
48141: PPUSH
48142: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48143: LD_VAR 0 1
48147: NOT
48148: PUSH
48149: LD_VAR 0 1
48153: PUSH
48154: LD_INT 21
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 23
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PPUSH
48178: CALL_OW 69
48182: IN
48183: NOT
48184: OR
48185: IFFALSE 48189
// exit ;
48187: GO 48236
// for i = 1 to 3 do
48189: LD_ADDR_VAR 0 3
48193: PUSH
48194: DOUBLE
48195: LD_INT 1
48197: DEC
48198: ST_TO_ADDR
48199: LD_INT 3
48201: PUSH
48202: FOR_TO
48203: IFFALSE 48234
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48205: LD_VAR 0 1
48209: PPUSH
48210: CALL_OW 250
48214: PPUSH
48215: LD_VAR 0 1
48219: PPUSH
48220: CALL_OW 251
48224: PPUSH
48225: LD_INT 1
48227: PPUSH
48228: CALL_OW 453
48232: GO 48202
48234: POP
48235: POP
// end ;
48236: LD_VAR 0 2
48240: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48241: LD_INT 0
48243: PPUSH
48244: PPUSH
48245: PPUSH
48246: PPUSH
48247: PPUSH
48248: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48249: LD_VAR 0 1
48253: NOT
48254: PUSH
48255: LD_VAR 0 2
48259: NOT
48260: OR
48261: PUSH
48262: LD_VAR 0 1
48266: PPUSH
48267: CALL_OW 314
48271: OR
48272: IFFALSE 48276
// exit ;
48274: GO 48743
// if GetLives ( i ) < 250 then
48276: LD_VAR 0 4
48280: PPUSH
48281: CALL_OW 256
48285: PUSH
48286: LD_INT 250
48288: LESS
48289: IFFALSE 48302
// begin ComAutodestruct ( i ) ;
48291: LD_VAR 0 4
48295: PPUSH
48296: CALL 48139 0 1
// exit ;
48300: GO 48743
// end ; x := GetX ( enemy_unit ) ;
48302: LD_ADDR_VAR 0 7
48306: PUSH
48307: LD_VAR 0 2
48311: PPUSH
48312: CALL_OW 250
48316: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48317: LD_ADDR_VAR 0 8
48321: PUSH
48322: LD_VAR 0 2
48326: PPUSH
48327: CALL_OW 251
48331: ST_TO_ADDR
// if not x or not y then
48332: LD_VAR 0 7
48336: NOT
48337: PUSH
48338: LD_VAR 0 8
48342: NOT
48343: OR
48344: IFFALSE 48348
// exit ;
48346: GO 48743
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48348: LD_ADDR_VAR 0 6
48352: PUSH
48353: LD_VAR 0 7
48357: PPUSH
48358: LD_INT 0
48360: PPUSH
48361: LD_INT 4
48363: PPUSH
48364: CALL_OW 272
48368: PUSH
48369: LD_VAR 0 8
48373: PPUSH
48374: LD_INT 0
48376: PPUSH
48377: LD_INT 4
48379: PPUSH
48380: CALL_OW 273
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_VAR 0 7
48393: PPUSH
48394: LD_INT 1
48396: PPUSH
48397: LD_INT 4
48399: PPUSH
48400: CALL_OW 272
48404: PUSH
48405: LD_VAR 0 8
48409: PPUSH
48410: LD_INT 1
48412: PPUSH
48413: LD_INT 4
48415: PPUSH
48416: CALL_OW 273
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_VAR 0 7
48429: PPUSH
48430: LD_INT 2
48432: PPUSH
48433: LD_INT 4
48435: PPUSH
48436: CALL_OW 272
48440: PUSH
48441: LD_VAR 0 8
48445: PPUSH
48446: LD_INT 2
48448: PPUSH
48449: LD_INT 4
48451: PPUSH
48452: CALL_OW 273
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_VAR 0 7
48465: PPUSH
48466: LD_INT 3
48468: PPUSH
48469: LD_INT 4
48471: PPUSH
48472: CALL_OW 272
48476: PUSH
48477: LD_VAR 0 8
48481: PPUSH
48482: LD_INT 3
48484: PPUSH
48485: LD_INT 4
48487: PPUSH
48488: CALL_OW 273
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_VAR 0 7
48501: PPUSH
48502: LD_INT 4
48504: PPUSH
48505: LD_INT 4
48507: PPUSH
48508: CALL_OW 272
48512: PUSH
48513: LD_VAR 0 8
48517: PPUSH
48518: LD_INT 4
48520: PPUSH
48521: LD_INT 4
48523: PPUSH
48524: CALL_OW 273
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_VAR 0 7
48537: PPUSH
48538: LD_INT 5
48540: PPUSH
48541: LD_INT 4
48543: PPUSH
48544: CALL_OW 272
48548: PUSH
48549: LD_VAR 0 8
48553: PPUSH
48554: LD_INT 5
48556: PPUSH
48557: LD_INT 4
48559: PPUSH
48560: CALL_OW 273
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: ST_TO_ADDR
// for i = tmp downto 1 do
48577: LD_ADDR_VAR 0 4
48581: PUSH
48582: DOUBLE
48583: LD_VAR 0 6
48587: INC
48588: ST_TO_ADDR
48589: LD_INT 1
48591: PUSH
48592: FOR_DOWNTO
48593: IFFALSE 48694
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48595: LD_VAR 0 6
48599: PUSH
48600: LD_VAR 0 4
48604: ARRAY
48605: PUSH
48606: LD_INT 1
48608: ARRAY
48609: PPUSH
48610: LD_VAR 0 6
48614: PUSH
48615: LD_VAR 0 4
48619: ARRAY
48620: PUSH
48621: LD_INT 2
48623: ARRAY
48624: PPUSH
48625: CALL_OW 488
48629: NOT
48630: PUSH
48631: LD_VAR 0 6
48635: PUSH
48636: LD_VAR 0 4
48640: ARRAY
48641: PUSH
48642: LD_INT 1
48644: ARRAY
48645: PPUSH
48646: LD_VAR 0 6
48650: PUSH
48651: LD_VAR 0 4
48655: ARRAY
48656: PUSH
48657: LD_INT 2
48659: ARRAY
48660: PPUSH
48661: CALL_OW 428
48665: PUSH
48666: LD_INT 0
48668: NONEQUAL
48669: OR
48670: IFFALSE 48692
// tmp := Delete ( tmp , i ) ;
48672: LD_ADDR_VAR 0 6
48676: PUSH
48677: LD_VAR 0 6
48681: PPUSH
48682: LD_VAR 0 4
48686: PPUSH
48687: CALL_OW 3
48691: ST_TO_ADDR
48692: GO 48592
48694: POP
48695: POP
// j := GetClosestHex ( unit , tmp ) ;
48696: LD_ADDR_VAR 0 5
48700: PUSH
48701: LD_VAR 0 1
48705: PPUSH
48706: LD_VAR 0 6
48710: PPUSH
48711: CALL 47987 0 2
48715: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48716: LD_VAR 0 1
48720: PPUSH
48721: LD_VAR 0 5
48725: PUSH
48726: LD_INT 1
48728: ARRAY
48729: PPUSH
48730: LD_VAR 0 5
48734: PUSH
48735: LD_INT 2
48737: ARRAY
48738: PPUSH
48739: CALL_OW 111
// end ;
48743: LD_VAR 0 3
48747: RET
// export function PrepareApemanSoldier ( ) ; begin
48748: LD_INT 0
48750: PPUSH
// uc_nation := 0 ;
48751: LD_ADDR_OWVAR 21
48755: PUSH
48756: LD_INT 0
48758: ST_TO_ADDR
// hc_sex := sex_male ;
48759: LD_ADDR_OWVAR 27
48763: PUSH
48764: LD_INT 1
48766: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48767: LD_ADDR_OWVAR 28
48771: PUSH
48772: LD_INT 15
48774: ST_TO_ADDR
// hc_gallery :=  ;
48775: LD_ADDR_OWVAR 33
48779: PUSH
48780: LD_STRING 
48782: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48783: LD_ADDR_OWVAR 31
48787: PUSH
48788: LD_INT 0
48790: PPUSH
48791: LD_INT 3
48793: PPUSH
48794: CALL_OW 12
48798: PUSH
48799: LD_INT 0
48801: PPUSH
48802: LD_INT 3
48804: PPUSH
48805: CALL_OW 12
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: ST_TO_ADDR
// end ;
48822: LD_VAR 0 1
48826: RET
// export function PrepareApemanEngineer ( ) ; begin
48827: LD_INT 0
48829: PPUSH
// uc_nation := 0 ;
48830: LD_ADDR_OWVAR 21
48834: PUSH
48835: LD_INT 0
48837: ST_TO_ADDR
// hc_sex := sex_male ;
48838: LD_ADDR_OWVAR 27
48842: PUSH
48843: LD_INT 1
48845: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
48846: LD_ADDR_OWVAR 28
48850: PUSH
48851: LD_INT 16
48853: ST_TO_ADDR
// hc_gallery :=  ;
48854: LD_ADDR_OWVAR 33
48858: PUSH
48859: LD_STRING 
48861: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48862: LD_ADDR_OWVAR 31
48866: PUSH
48867: LD_INT 0
48869: PPUSH
48870: LD_INT 3
48872: PPUSH
48873: CALL_OW 12
48877: PUSH
48878: LD_INT 0
48880: PPUSH
48881: LD_INT 3
48883: PPUSH
48884: CALL_OW 12
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: ST_TO_ADDR
// end ;
48901: LD_VAR 0 1
48905: RET
// export function PrepareApeman ( agressivity ) ; begin
48906: LD_INT 0
48908: PPUSH
// uc_side := 0 ;
48909: LD_ADDR_OWVAR 20
48913: PUSH
48914: LD_INT 0
48916: ST_TO_ADDR
// uc_nation := 0 ;
48917: LD_ADDR_OWVAR 21
48921: PUSH
48922: LD_INT 0
48924: ST_TO_ADDR
// hc_sex := sex_male ;
48925: LD_ADDR_OWVAR 27
48929: PUSH
48930: LD_INT 1
48932: ST_TO_ADDR
// hc_class := class_apeman ;
48933: LD_ADDR_OWVAR 28
48937: PUSH
48938: LD_INT 12
48940: ST_TO_ADDR
// hc_gallery :=  ;
48941: LD_ADDR_OWVAR 33
48945: PUSH
48946: LD_STRING 
48948: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48949: LD_ADDR_OWVAR 35
48953: PUSH
48954: LD_VAR 0 1
48958: NEG
48959: PPUSH
48960: LD_VAR 0 1
48964: PPUSH
48965: CALL_OW 12
48969: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48970: LD_ADDR_OWVAR 31
48974: PUSH
48975: LD_INT 0
48977: PPUSH
48978: LD_INT 3
48980: PPUSH
48981: CALL_OW 12
48985: PUSH
48986: LD_INT 0
48988: PPUSH
48989: LD_INT 3
48991: PPUSH
48992: CALL_OW 12
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: ST_TO_ADDR
// end ;
49009: LD_VAR 0 2
49013: RET
// export function PrepareTiger ( agressivity ) ; begin
49014: LD_INT 0
49016: PPUSH
// uc_side := 0 ;
49017: LD_ADDR_OWVAR 20
49021: PUSH
49022: LD_INT 0
49024: ST_TO_ADDR
// uc_nation := 0 ;
49025: LD_ADDR_OWVAR 21
49029: PUSH
49030: LD_INT 0
49032: ST_TO_ADDR
// hc_class := class_tiger ;
49033: LD_ADDR_OWVAR 28
49037: PUSH
49038: LD_INT 14
49040: ST_TO_ADDR
// hc_gallery :=  ;
49041: LD_ADDR_OWVAR 33
49045: PUSH
49046: LD_STRING 
49048: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49049: LD_ADDR_OWVAR 35
49053: PUSH
49054: LD_VAR 0 1
49058: NEG
49059: PPUSH
49060: LD_VAR 0 1
49064: PPUSH
49065: CALL_OW 12
49069: ST_TO_ADDR
// end ;
49070: LD_VAR 0 2
49074: RET
// export function PrepareEnchidna ( ) ; begin
49075: LD_INT 0
49077: PPUSH
// uc_side := 0 ;
49078: LD_ADDR_OWVAR 20
49082: PUSH
49083: LD_INT 0
49085: ST_TO_ADDR
// uc_nation := 0 ;
49086: LD_ADDR_OWVAR 21
49090: PUSH
49091: LD_INT 0
49093: ST_TO_ADDR
// hc_class := class_baggie ;
49094: LD_ADDR_OWVAR 28
49098: PUSH
49099: LD_INT 13
49101: ST_TO_ADDR
// hc_gallery :=  ;
49102: LD_ADDR_OWVAR 33
49106: PUSH
49107: LD_STRING 
49109: ST_TO_ADDR
// end ;
49110: LD_VAR 0 1
49114: RET
// export function PrepareFrog ( ) ; begin
49115: LD_INT 0
49117: PPUSH
// uc_side := 0 ;
49118: LD_ADDR_OWVAR 20
49122: PUSH
49123: LD_INT 0
49125: ST_TO_ADDR
// uc_nation := 0 ;
49126: LD_ADDR_OWVAR 21
49130: PUSH
49131: LD_INT 0
49133: ST_TO_ADDR
// hc_class := class_frog ;
49134: LD_ADDR_OWVAR 28
49138: PUSH
49139: LD_INT 19
49141: ST_TO_ADDR
// hc_gallery :=  ;
49142: LD_ADDR_OWVAR 33
49146: PUSH
49147: LD_STRING 
49149: ST_TO_ADDR
// end ;
49150: LD_VAR 0 1
49154: RET
// export function PrepareFish ( ) ; begin
49155: LD_INT 0
49157: PPUSH
// uc_side := 0 ;
49158: LD_ADDR_OWVAR 20
49162: PUSH
49163: LD_INT 0
49165: ST_TO_ADDR
// uc_nation := 0 ;
49166: LD_ADDR_OWVAR 21
49170: PUSH
49171: LD_INT 0
49173: ST_TO_ADDR
// hc_class := class_fish ;
49174: LD_ADDR_OWVAR 28
49178: PUSH
49179: LD_INT 20
49181: ST_TO_ADDR
// hc_gallery :=  ;
49182: LD_ADDR_OWVAR 33
49186: PUSH
49187: LD_STRING 
49189: ST_TO_ADDR
// end ;
49190: LD_VAR 0 1
49194: RET
// export function PrepareBird ( ) ; begin
49195: LD_INT 0
49197: PPUSH
// uc_side := 0 ;
49198: LD_ADDR_OWVAR 20
49202: PUSH
49203: LD_INT 0
49205: ST_TO_ADDR
// uc_nation := 0 ;
49206: LD_ADDR_OWVAR 21
49210: PUSH
49211: LD_INT 0
49213: ST_TO_ADDR
// hc_class := class_phororhacos ;
49214: LD_ADDR_OWVAR 28
49218: PUSH
49219: LD_INT 18
49221: ST_TO_ADDR
// hc_gallery :=  ;
49222: LD_ADDR_OWVAR 33
49226: PUSH
49227: LD_STRING 
49229: ST_TO_ADDR
// end ;
49230: LD_VAR 0 1
49234: RET
// export function PrepareHorse ( ) ; begin
49235: LD_INT 0
49237: PPUSH
// uc_side := 0 ;
49238: LD_ADDR_OWVAR 20
49242: PUSH
49243: LD_INT 0
49245: ST_TO_ADDR
// uc_nation := 0 ;
49246: LD_ADDR_OWVAR 21
49250: PUSH
49251: LD_INT 0
49253: ST_TO_ADDR
// hc_class := class_horse ;
49254: LD_ADDR_OWVAR 28
49258: PUSH
49259: LD_INT 21
49261: ST_TO_ADDR
// hc_gallery :=  ;
49262: LD_ADDR_OWVAR 33
49266: PUSH
49267: LD_STRING 
49269: ST_TO_ADDR
// end ;
49270: LD_VAR 0 1
49274: RET
// export function PrepareMastodont ( ) ; begin
49275: LD_INT 0
49277: PPUSH
// uc_side := 0 ;
49278: LD_ADDR_OWVAR 20
49282: PUSH
49283: LD_INT 0
49285: ST_TO_ADDR
// uc_nation := 0 ;
49286: LD_ADDR_OWVAR 21
49290: PUSH
49291: LD_INT 0
49293: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49294: LD_ADDR_OWVAR 37
49298: PUSH
49299: LD_INT 31
49301: ST_TO_ADDR
// vc_control := control_rider ;
49302: LD_ADDR_OWVAR 38
49306: PUSH
49307: LD_INT 4
49309: ST_TO_ADDR
// end ;
49310: LD_VAR 0 1
49314: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49315: LD_INT 0
49317: PPUSH
49318: PPUSH
49319: PPUSH
// uc_side = 0 ;
49320: LD_ADDR_OWVAR 20
49324: PUSH
49325: LD_INT 0
49327: ST_TO_ADDR
// uc_nation = 0 ;
49328: LD_ADDR_OWVAR 21
49332: PUSH
49333: LD_INT 0
49335: ST_TO_ADDR
// InitHc_All ( ) ;
49336: CALL_OW 584
// InitVc ;
49340: CALL_OW 20
// if mastodonts then
49344: LD_VAR 0 6
49348: IFFALSE 49415
// for i = 1 to mastodonts do
49350: LD_ADDR_VAR 0 11
49354: PUSH
49355: DOUBLE
49356: LD_INT 1
49358: DEC
49359: ST_TO_ADDR
49360: LD_VAR 0 6
49364: PUSH
49365: FOR_TO
49366: IFFALSE 49413
// begin vc_chassis := 31 ;
49368: LD_ADDR_OWVAR 37
49372: PUSH
49373: LD_INT 31
49375: ST_TO_ADDR
// vc_control := control_rider ;
49376: LD_ADDR_OWVAR 38
49380: PUSH
49381: LD_INT 4
49383: ST_TO_ADDR
// animal := CreateVehicle ;
49384: LD_ADDR_VAR 0 12
49388: PUSH
49389: CALL_OW 45
49393: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49394: LD_VAR 0 12
49398: PPUSH
49399: LD_VAR 0 8
49403: PPUSH
49404: LD_INT 0
49406: PPUSH
49407: CALL 51543 0 3
// end ;
49411: GO 49365
49413: POP
49414: POP
// if horses then
49415: LD_VAR 0 5
49419: IFFALSE 49486
// for i = 1 to horses do
49421: LD_ADDR_VAR 0 11
49425: PUSH
49426: DOUBLE
49427: LD_INT 1
49429: DEC
49430: ST_TO_ADDR
49431: LD_VAR 0 5
49435: PUSH
49436: FOR_TO
49437: IFFALSE 49484
// begin hc_class := 21 ;
49439: LD_ADDR_OWVAR 28
49443: PUSH
49444: LD_INT 21
49446: ST_TO_ADDR
// hc_gallery :=  ;
49447: LD_ADDR_OWVAR 33
49451: PUSH
49452: LD_STRING 
49454: ST_TO_ADDR
// animal := CreateHuman ;
49455: LD_ADDR_VAR 0 12
49459: PUSH
49460: CALL_OW 44
49464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49465: LD_VAR 0 12
49469: PPUSH
49470: LD_VAR 0 8
49474: PPUSH
49475: LD_INT 0
49477: PPUSH
49478: CALL 51543 0 3
// end ;
49482: GO 49436
49484: POP
49485: POP
// if birds then
49486: LD_VAR 0 1
49490: IFFALSE 49557
// for i = 1 to birds do
49492: LD_ADDR_VAR 0 11
49496: PUSH
49497: DOUBLE
49498: LD_INT 1
49500: DEC
49501: ST_TO_ADDR
49502: LD_VAR 0 1
49506: PUSH
49507: FOR_TO
49508: IFFALSE 49555
// begin hc_class = 18 ;
49510: LD_ADDR_OWVAR 28
49514: PUSH
49515: LD_INT 18
49517: ST_TO_ADDR
// hc_gallery =  ;
49518: LD_ADDR_OWVAR 33
49522: PUSH
49523: LD_STRING 
49525: ST_TO_ADDR
// animal := CreateHuman ;
49526: LD_ADDR_VAR 0 12
49530: PUSH
49531: CALL_OW 44
49535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49536: LD_VAR 0 12
49540: PPUSH
49541: LD_VAR 0 8
49545: PPUSH
49546: LD_INT 0
49548: PPUSH
49549: CALL 51543 0 3
// end ;
49553: GO 49507
49555: POP
49556: POP
// if tigers then
49557: LD_VAR 0 2
49561: IFFALSE 49645
// for i = 1 to tigers do
49563: LD_ADDR_VAR 0 11
49567: PUSH
49568: DOUBLE
49569: LD_INT 1
49571: DEC
49572: ST_TO_ADDR
49573: LD_VAR 0 2
49577: PUSH
49578: FOR_TO
49579: IFFALSE 49643
// begin hc_class = class_tiger ;
49581: LD_ADDR_OWVAR 28
49585: PUSH
49586: LD_INT 14
49588: ST_TO_ADDR
// hc_gallery =  ;
49589: LD_ADDR_OWVAR 33
49593: PUSH
49594: LD_STRING 
49596: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49597: LD_ADDR_OWVAR 35
49601: PUSH
49602: LD_INT 7
49604: NEG
49605: PPUSH
49606: LD_INT 7
49608: PPUSH
49609: CALL_OW 12
49613: ST_TO_ADDR
// animal := CreateHuman ;
49614: LD_ADDR_VAR 0 12
49618: PUSH
49619: CALL_OW 44
49623: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49624: LD_VAR 0 12
49628: PPUSH
49629: LD_VAR 0 8
49633: PPUSH
49634: LD_INT 0
49636: PPUSH
49637: CALL 51543 0 3
// end ;
49641: GO 49578
49643: POP
49644: POP
// if apemans then
49645: LD_VAR 0 3
49649: IFFALSE 49772
// for i = 1 to apemans do
49651: LD_ADDR_VAR 0 11
49655: PUSH
49656: DOUBLE
49657: LD_INT 1
49659: DEC
49660: ST_TO_ADDR
49661: LD_VAR 0 3
49665: PUSH
49666: FOR_TO
49667: IFFALSE 49770
// begin hc_class = class_apeman ;
49669: LD_ADDR_OWVAR 28
49673: PUSH
49674: LD_INT 12
49676: ST_TO_ADDR
// hc_gallery =  ;
49677: LD_ADDR_OWVAR 33
49681: PUSH
49682: LD_STRING 
49684: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49685: LD_ADDR_OWVAR 35
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PPUSH
49694: LD_INT 2
49696: PPUSH
49697: CALL_OW 12
49701: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49702: LD_ADDR_OWVAR 31
49706: PUSH
49707: LD_INT 1
49709: PPUSH
49710: LD_INT 3
49712: PPUSH
49713: CALL_OW 12
49717: PUSH
49718: LD_INT 1
49720: PPUSH
49721: LD_INT 3
49723: PPUSH
49724: CALL_OW 12
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: ST_TO_ADDR
// animal := CreateHuman ;
49741: LD_ADDR_VAR 0 12
49745: PUSH
49746: CALL_OW 44
49750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49751: LD_VAR 0 12
49755: PPUSH
49756: LD_VAR 0 8
49760: PPUSH
49761: LD_INT 0
49763: PPUSH
49764: CALL 51543 0 3
// end ;
49768: GO 49666
49770: POP
49771: POP
// if enchidnas then
49772: LD_VAR 0 4
49776: IFFALSE 49843
// for i = 1 to enchidnas do
49778: LD_ADDR_VAR 0 11
49782: PUSH
49783: DOUBLE
49784: LD_INT 1
49786: DEC
49787: ST_TO_ADDR
49788: LD_VAR 0 4
49792: PUSH
49793: FOR_TO
49794: IFFALSE 49841
// begin hc_class = 13 ;
49796: LD_ADDR_OWVAR 28
49800: PUSH
49801: LD_INT 13
49803: ST_TO_ADDR
// hc_gallery =  ;
49804: LD_ADDR_OWVAR 33
49808: PUSH
49809: LD_STRING 
49811: ST_TO_ADDR
// animal := CreateHuman ;
49812: LD_ADDR_VAR 0 12
49816: PUSH
49817: CALL_OW 44
49821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49822: LD_VAR 0 12
49826: PPUSH
49827: LD_VAR 0 8
49831: PPUSH
49832: LD_INT 0
49834: PPUSH
49835: CALL 51543 0 3
// end ;
49839: GO 49793
49841: POP
49842: POP
// if fishes then
49843: LD_VAR 0 7
49847: IFFALSE 49914
// for i = 1 to fishes do
49849: LD_ADDR_VAR 0 11
49853: PUSH
49854: DOUBLE
49855: LD_INT 1
49857: DEC
49858: ST_TO_ADDR
49859: LD_VAR 0 7
49863: PUSH
49864: FOR_TO
49865: IFFALSE 49912
// begin hc_class = 20 ;
49867: LD_ADDR_OWVAR 28
49871: PUSH
49872: LD_INT 20
49874: ST_TO_ADDR
// hc_gallery =  ;
49875: LD_ADDR_OWVAR 33
49879: PUSH
49880: LD_STRING 
49882: ST_TO_ADDR
// animal := CreateHuman ;
49883: LD_ADDR_VAR 0 12
49887: PUSH
49888: CALL_OW 44
49892: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49893: LD_VAR 0 12
49897: PPUSH
49898: LD_VAR 0 9
49902: PPUSH
49903: LD_INT 0
49905: PPUSH
49906: CALL 51543 0 3
// end ;
49910: GO 49864
49912: POP
49913: POP
// end ;
49914: LD_VAR 0 10
49918: RET
// export function WantHeal ( sci , unit ) ; begin
49919: LD_INT 0
49921: PPUSH
// if GetTaskList ( sci ) > 0 then
49922: LD_VAR 0 1
49926: PPUSH
49927: CALL_OW 437
49931: PUSH
49932: LD_INT 0
49934: GREATER
49935: IFFALSE 50005
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49937: LD_VAR 0 1
49941: PPUSH
49942: CALL_OW 437
49946: PUSH
49947: LD_INT 1
49949: ARRAY
49950: PUSH
49951: LD_INT 1
49953: ARRAY
49954: PUSH
49955: LD_STRING l
49957: EQUAL
49958: PUSH
49959: LD_VAR 0 1
49963: PPUSH
49964: CALL_OW 437
49968: PUSH
49969: LD_INT 1
49971: ARRAY
49972: PUSH
49973: LD_INT 4
49975: ARRAY
49976: PUSH
49977: LD_VAR 0 2
49981: EQUAL
49982: AND
49983: IFFALSE 49995
// result := true else
49985: LD_ADDR_VAR 0 3
49989: PUSH
49990: LD_INT 1
49992: ST_TO_ADDR
49993: GO 50003
// result := false ;
49995: LD_ADDR_VAR 0 3
49999: PUSH
50000: LD_INT 0
50002: ST_TO_ADDR
// end else
50003: GO 50013
// result := false ;
50005: LD_ADDR_VAR 0 3
50009: PUSH
50010: LD_INT 0
50012: ST_TO_ADDR
// end ;
50013: LD_VAR 0 3
50017: RET
// export function HealTarget ( sci ) ; begin
50018: LD_INT 0
50020: PPUSH
// if not sci then
50021: LD_VAR 0 1
50025: NOT
50026: IFFALSE 50030
// exit ;
50028: GO 50095
// result := 0 ;
50030: LD_ADDR_VAR 0 2
50034: PUSH
50035: LD_INT 0
50037: ST_TO_ADDR
// if GetTaskList ( sci ) then
50038: LD_VAR 0 1
50042: PPUSH
50043: CALL_OW 437
50047: IFFALSE 50095
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50049: LD_VAR 0 1
50053: PPUSH
50054: CALL_OW 437
50058: PUSH
50059: LD_INT 1
50061: ARRAY
50062: PUSH
50063: LD_INT 1
50065: ARRAY
50066: PUSH
50067: LD_STRING l
50069: EQUAL
50070: IFFALSE 50095
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50072: LD_ADDR_VAR 0 2
50076: PUSH
50077: LD_VAR 0 1
50081: PPUSH
50082: CALL_OW 437
50086: PUSH
50087: LD_INT 1
50089: ARRAY
50090: PUSH
50091: LD_INT 4
50093: ARRAY
50094: ST_TO_ADDR
// end ;
50095: LD_VAR 0 2
50099: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50100: LD_INT 0
50102: PPUSH
50103: PPUSH
50104: PPUSH
50105: PPUSH
// if not base_units then
50106: LD_VAR 0 1
50110: NOT
50111: IFFALSE 50115
// exit ;
50113: GO 50202
// result := false ;
50115: LD_ADDR_VAR 0 2
50119: PUSH
50120: LD_INT 0
50122: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50123: LD_ADDR_VAR 0 5
50127: PUSH
50128: LD_VAR 0 1
50132: PPUSH
50133: LD_INT 21
50135: PUSH
50136: LD_INT 3
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PPUSH
50143: CALL_OW 72
50147: ST_TO_ADDR
// if not tmp then
50148: LD_VAR 0 5
50152: NOT
50153: IFFALSE 50157
// exit ;
50155: GO 50202
// for i in tmp do
50157: LD_ADDR_VAR 0 3
50161: PUSH
50162: LD_VAR 0 5
50166: PUSH
50167: FOR_IN
50168: IFFALSE 50200
// begin result := EnemyInRange ( i , 22 ) ;
50170: LD_ADDR_VAR 0 2
50174: PUSH
50175: LD_VAR 0 3
50179: PPUSH
50180: LD_INT 22
50182: PPUSH
50183: CALL 47789 0 2
50187: ST_TO_ADDR
// if result then
50188: LD_VAR 0 2
50192: IFFALSE 50198
// exit ;
50194: POP
50195: POP
50196: GO 50202
// end ;
50198: GO 50167
50200: POP
50201: POP
// end ;
50202: LD_VAR 0 2
50206: RET
// export function FilterByTag ( units , tag ) ; begin
50207: LD_INT 0
50209: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50210: LD_ADDR_VAR 0 3
50214: PUSH
50215: LD_VAR 0 1
50219: PPUSH
50220: LD_INT 120
50222: PUSH
50223: LD_VAR 0 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PPUSH
50232: CALL_OW 72
50236: ST_TO_ADDR
// end ;
50237: LD_VAR 0 3
50241: RET
// export function IsDriver ( un ) ; begin
50242: LD_INT 0
50244: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50245: LD_ADDR_VAR 0 2
50249: PUSH
50250: LD_VAR 0 1
50254: PUSH
50255: LD_INT 55
50257: PUSH
50258: EMPTY
50259: LIST
50260: PPUSH
50261: CALL_OW 69
50265: IN
50266: ST_TO_ADDR
// end ;
50267: LD_VAR 0 2
50271: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50272: LD_INT 0
50274: PPUSH
50275: PPUSH
// list := [ ] ;
50276: LD_ADDR_VAR 0 5
50280: PUSH
50281: EMPTY
50282: ST_TO_ADDR
// case d of 0 :
50283: LD_VAR 0 3
50287: PUSH
50288: LD_INT 0
50290: DOUBLE
50291: EQUAL
50292: IFTRUE 50296
50294: GO 50429
50296: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50297: LD_ADDR_VAR 0 5
50301: PUSH
50302: LD_VAR 0 1
50306: PUSH
50307: LD_INT 4
50309: MINUS
50310: PUSH
50311: LD_VAR 0 2
50315: PUSH
50316: LD_INT 4
50318: MINUS
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: LIST
50327: PUSH
50328: LD_VAR 0 1
50332: PUSH
50333: LD_INT 3
50335: MINUS
50336: PUSH
50337: LD_VAR 0 2
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: LIST
50349: PUSH
50350: LD_VAR 0 1
50354: PUSH
50355: LD_INT 4
50357: PLUS
50358: PUSH
50359: LD_VAR 0 2
50363: PUSH
50364: LD_INT 4
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: LIST
50371: PUSH
50372: LD_VAR 0 1
50376: PUSH
50377: LD_INT 3
50379: PLUS
50380: PUSH
50381: LD_VAR 0 2
50385: PUSH
50386: LD_INT 3
50388: PLUS
50389: PUSH
50390: LD_INT 5
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: LIST
50397: PUSH
50398: LD_VAR 0 1
50402: PUSH
50403: LD_VAR 0 2
50407: PUSH
50408: LD_INT 4
50410: PLUS
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: ST_TO_ADDR
// end ; 1 :
50427: GO 51127
50429: LD_INT 1
50431: DOUBLE
50432: EQUAL
50433: IFTRUE 50437
50435: GO 50570
50437: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50438: LD_ADDR_VAR 0 5
50442: PUSH
50443: LD_VAR 0 1
50447: PUSH
50448: LD_VAR 0 2
50452: PUSH
50453: LD_INT 4
50455: MINUS
50456: PUSH
50457: LD_INT 3
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: PUSH
50465: LD_VAR 0 1
50469: PUSH
50470: LD_INT 3
50472: MINUS
50473: PUSH
50474: LD_VAR 0 2
50478: PUSH
50479: LD_INT 3
50481: MINUS
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: LIST
50490: PUSH
50491: LD_VAR 0 1
50495: PUSH
50496: LD_INT 4
50498: MINUS
50499: PUSH
50500: LD_VAR 0 2
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: LIST
50512: PUSH
50513: LD_VAR 0 1
50517: PUSH
50518: LD_VAR 0 2
50522: PUSH
50523: LD_INT 3
50525: PLUS
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: PUSH
50535: LD_VAR 0 1
50539: PUSH
50540: LD_INT 4
50542: PLUS
50543: PUSH
50544: LD_VAR 0 2
50548: PUSH
50549: LD_INT 4
50551: PLUS
50552: PUSH
50553: LD_INT 5
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: LIST
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: ST_TO_ADDR
// end ; 2 :
50568: GO 51127
50570: LD_INT 2
50572: DOUBLE
50573: EQUAL
50574: IFTRUE 50578
50576: GO 50707
50578: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50579: LD_ADDR_VAR 0 5
50583: PUSH
50584: LD_VAR 0 1
50588: PUSH
50589: LD_VAR 0 2
50593: PUSH
50594: LD_INT 3
50596: MINUS
50597: PUSH
50598: LD_INT 3
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: PUSH
50606: LD_VAR 0 1
50610: PUSH
50611: LD_INT 4
50613: PLUS
50614: PUSH
50615: LD_VAR 0 2
50619: PUSH
50620: LD_INT 4
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: LIST
50627: PUSH
50628: LD_VAR 0 1
50632: PUSH
50633: LD_VAR 0 2
50637: PUSH
50638: LD_INT 4
50640: PLUS
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: LIST
50649: PUSH
50650: LD_VAR 0 1
50654: PUSH
50655: LD_INT 3
50657: MINUS
50658: PUSH
50659: LD_VAR 0 2
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: LIST
50671: PUSH
50672: LD_VAR 0 1
50676: PUSH
50677: LD_INT 4
50679: MINUS
50680: PUSH
50681: LD_VAR 0 2
50685: PUSH
50686: LD_INT 4
50688: MINUS
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: LIST
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: ST_TO_ADDR
// end ; 3 :
50705: GO 51127
50707: LD_INT 3
50709: DOUBLE
50710: EQUAL
50711: IFTRUE 50715
50713: GO 50848
50715: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50716: LD_ADDR_VAR 0 5
50720: PUSH
50721: LD_VAR 0 1
50725: PUSH
50726: LD_INT 3
50728: PLUS
50729: PUSH
50730: LD_VAR 0 2
50734: PUSH
50735: LD_INT 4
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: LIST
50742: PUSH
50743: LD_VAR 0 1
50747: PUSH
50748: LD_INT 4
50750: PLUS
50751: PUSH
50752: LD_VAR 0 2
50756: PUSH
50757: LD_INT 4
50759: PLUS
50760: PUSH
50761: LD_INT 5
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: LIST
50768: PUSH
50769: LD_VAR 0 1
50773: PUSH
50774: LD_INT 4
50776: MINUS
50777: PUSH
50778: LD_VAR 0 2
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: PUSH
50791: LD_VAR 0 1
50795: PUSH
50796: LD_VAR 0 2
50800: PUSH
50801: LD_INT 4
50803: MINUS
50804: PUSH
50805: LD_INT 3
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: LIST
50812: PUSH
50813: LD_VAR 0 1
50817: PUSH
50818: LD_INT 3
50820: MINUS
50821: PUSH
50822: LD_VAR 0 2
50826: PUSH
50827: LD_INT 3
50829: MINUS
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: ST_TO_ADDR
// end ; 4 :
50846: GO 51127
50848: LD_INT 4
50850: DOUBLE
50851: EQUAL
50852: IFTRUE 50856
50854: GO 50989
50856: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50857: LD_ADDR_VAR 0 5
50861: PUSH
50862: LD_VAR 0 1
50866: PUSH
50867: LD_VAR 0 2
50871: PUSH
50872: LD_INT 4
50874: PLUS
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: PUSH
50884: LD_VAR 0 1
50888: PUSH
50889: LD_INT 3
50891: PLUS
50892: PUSH
50893: LD_VAR 0 2
50897: PUSH
50898: LD_INT 3
50900: PLUS
50901: PUSH
50902: LD_INT 5
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: LIST
50909: PUSH
50910: LD_VAR 0 1
50914: PUSH
50915: LD_INT 4
50917: PLUS
50918: PUSH
50919: LD_VAR 0 2
50923: PUSH
50924: LD_INT 4
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: PUSH
50932: LD_VAR 0 1
50936: PUSH
50937: LD_VAR 0 2
50941: PUSH
50942: LD_INT 3
50944: MINUS
50945: PUSH
50946: LD_INT 3
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: LIST
50953: PUSH
50954: LD_VAR 0 1
50958: PUSH
50959: LD_INT 4
50961: MINUS
50962: PUSH
50963: LD_VAR 0 2
50967: PUSH
50968: LD_INT 4
50970: MINUS
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: LIST
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: ST_TO_ADDR
// end ; 5 :
50987: GO 51127
50989: LD_INT 5
50991: DOUBLE
50992: EQUAL
50993: IFTRUE 50997
50995: GO 51126
50997: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50998: LD_ADDR_VAR 0 5
51002: PUSH
51003: LD_VAR 0 1
51007: PUSH
51008: LD_INT 4
51010: MINUS
51011: PUSH
51012: LD_VAR 0 2
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: LIST
51024: PUSH
51025: LD_VAR 0 1
51029: PUSH
51030: LD_VAR 0 2
51034: PUSH
51035: LD_INT 4
51037: MINUS
51038: PUSH
51039: LD_INT 3
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: PUSH
51047: LD_VAR 0 1
51051: PUSH
51052: LD_INT 4
51054: PLUS
51055: PUSH
51056: LD_VAR 0 2
51060: PUSH
51061: LD_INT 4
51063: PLUS
51064: PUSH
51065: LD_INT 5
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: PUSH
51073: LD_VAR 0 1
51077: PUSH
51078: LD_INT 3
51080: PLUS
51081: PUSH
51082: LD_VAR 0 2
51086: PUSH
51087: LD_INT 4
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: PUSH
51095: LD_VAR 0 1
51099: PUSH
51100: LD_VAR 0 2
51104: PUSH
51105: LD_INT 3
51107: PLUS
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: ST_TO_ADDR
// end ; end ;
51124: GO 51127
51126: POP
// result := list ;
51127: LD_ADDR_VAR 0 4
51131: PUSH
51132: LD_VAR 0 5
51136: ST_TO_ADDR
// end ;
51137: LD_VAR 0 4
51141: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51142: LD_INT 0
51144: PPUSH
51145: PPUSH
51146: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51147: LD_VAR 0 1
51151: NOT
51152: PUSH
51153: LD_VAR 0 2
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: LD_INT 3
51166: PUSH
51167: LD_INT 4
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: IN
51176: NOT
51177: OR
51178: IFFALSE 51182
// exit ;
51180: GO 51265
// tmp := [ ] ;
51182: LD_ADDR_VAR 0 5
51186: PUSH
51187: EMPTY
51188: ST_TO_ADDR
// for i in units do
51189: LD_ADDR_VAR 0 4
51193: PUSH
51194: LD_VAR 0 1
51198: PUSH
51199: FOR_IN
51200: IFFALSE 51234
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51202: LD_ADDR_VAR 0 5
51206: PUSH
51207: LD_VAR 0 5
51211: PPUSH
51212: LD_VAR 0 4
51216: PPUSH
51217: LD_VAR 0 2
51221: PPUSH
51222: CALL_OW 259
51226: PPUSH
51227: CALL 52625 0 2
51231: ST_TO_ADDR
51232: GO 51199
51234: POP
51235: POP
// if not tmp then
51236: LD_VAR 0 5
51240: NOT
51241: IFFALSE 51245
// exit ;
51243: GO 51265
// result := SortListByListDesc ( units , tmp ) ;
51245: LD_ADDR_VAR 0 3
51249: PUSH
51250: LD_VAR 0 1
51254: PPUSH
51255: LD_VAR 0 5
51259: PPUSH
51260: CALL_OW 77
51264: ST_TO_ADDR
// end ;
51265: LD_VAR 0 3
51269: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51270: LD_INT 0
51272: PPUSH
51273: PPUSH
51274: PPUSH
// result := false ;
51275: LD_ADDR_VAR 0 3
51279: PUSH
51280: LD_INT 0
51282: ST_TO_ADDR
// if not building then
51283: LD_VAR 0 2
51287: NOT
51288: IFFALSE 51292
// exit ;
51290: GO 51430
// x := GetX ( building ) ;
51292: LD_ADDR_VAR 0 4
51296: PUSH
51297: LD_VAR 0 2
51301: PPUSH
51302: CALL_OW 250
51306: ST_TO_ADDR
// y := GetY ( building ) ;
51307: LD_ADDR_VAR 0 5
51311: PUSH
51312: LD_VAR 0 2
51316: PPUSH
51317: CALL_OW 251
51321: ST_TO_ADDR
// if not x or not y then
51322: LD_VAR 0 4
51326: NOT
51327: PUSH
51328: LD_VAR 0 5
51332: NOT
51333: OR
51334: IFFALSE 51338
// exit ;
51336: GO 51430
// if GetTaskList ( unit ) then
51338: LD_VAR 0 1
51342: PPUSH
51343: CALL_OW 437
51347: IFFALSE 51430
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51349: LD_STRING e
51351: PUSH
51352: LD_VAR 0 1
51356: PPUSH
51357: CALL_OW 437
51361: PUSH
51362: LD_INT 1
51364: ARRAY
51365: PUSH
51366: LD_INT 1
51368: ARRAY
51369: EQUAL
51370: PUSH
51371: LD_VAR 0 4
51375: PUSH
51376: LD_VAR 0 1
51380: PPUSH
51381: CALL_OW 437
51385: PUSH
51386: LD_INT 1
51388: ARRAY
51389: PUSH
51390: LD_INT 2
51392: ARRAY
51393: EQUAL
51394: AND
51395: PUSH
51396: LD_VAR 0 5
51400: PUSH
51401: LD_VAR 0 1
51405: PPUSH
51406: CALL_OW 437
51410: PUSH
51411: LD_INT 1
51413: ARRAY
51414: PUSH
51415: LD_INT 3
51417: ARRAY
51418: EQUAL
51419: AND
51420: IFFALSE 51430
// result := true end ;
51422: LD_ADDR_VAR 0 3
51426: PUSH
51427: LD_INT 1
51429: ST_TO_ADDR
// end ;
51430: LD_VAR 0 3
51434: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51435: LD_INT 0
51437: PPUSH
// result := false ;
51438: LD_ADDR_VAR 0 4
51442: PUSH
51443: LD_INT 0
51445: ST_TO_ADDR
// if GetTaskList ( unit ) then
51446: LD_VAR 0 1
51450: PPUSH
51451: CALL_OW 437
51455: IFFALSE 51538
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51457: LD_STRING M
51459: PUSH
51460: LD_VAR 0 1
51464: PPUSH
51465: CALL_OW 437
51469: PUSH
51470: LD_INT 1
51472: ARRAY
51473: PUSH
51474: LD_INT 1
51476: ARRAY
51477: EQUAL
51478: PUSH
51479: LD_VAR 0 2
51483: PUSH
51484: LD_VAR 0 1
51488: PPUSH
51489: CALL_OW 437
51493: PUSH
51494: LD_INT 1
51496: ARRAY
51497: PUSH
51498: LD_INT 2
51500: ARRAY
51501: EQUAL
51502: AND
51503: PUSH
51504: LD_VAR 0 3
51508: PUSH
51509: LD_VAR 0 1
51513: PPUSH
51514: CALL_OW 437
51518: PUSH
51519: LD_INT 1
51521: ARRAY
51522: PUSH
51523: LD_INT 3
51525: ARRAY
51526: EQUAL
51527: AND
51528: IFFALSE 51538
// result := true ;
51530: LD_ADDR_VAR 0 4
51534: PUSH
51535: LD_INT 1
51537: ST_TO_ADDR
// end ; end ;
51538: LD_VAR 0 4
51542: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51543: LD_INT 0
51545: PPUSH
51546: PPUSH
51547: PPUSH
51548: PPUSH
// if not unit or not area then
51549: LD_VAR 0 1
51553: NOT
51554: PUSH
51555: LD_VAR 0 2
51559: NOT
51560: OR
51561: IFFALSE 51565
// exit ;
51563: GO 51728
// tmp := AreaToList ( area , i ) ;
51565: LD_ADDR_VAR 0 6
51569: PUSH
51570: LD_VAR 0 2
51574: PPUSH
51575: LD_VAR 0 5
51579: PPUSH
51580: CALL_OW 517
51584: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51585: LD_ADDR_VAR 0 5
51589: PUSH
51590: DOUBLE
51591: LD_INT 1
51593: DEC
51594: ST_TO_ADDR
51595: LD_VAR 0 6
51599: PUSH
51600: LD_INT 1
51602: ARRAY
51603: PUSH
51604: FOR_TO
51605: IFFALSE 51726
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51607: LD_ADDR_VAR 0 7
51611: PUSH
51612: LD_VAR 0 6
51616: PUSH
51617: LD_INT 1
51619: ARRAY
51620: PUSH
51621: LD_VAR 0 5
51625: ARRAY
51626: PUSH
51627: LD_VAR 0 6
51631: PUSH
51632: LD_INT 2
51634: ARRAY
51635: PUSH
51636: LD_VAR 0 5
51640: ARRAY
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
51646: LD_INT 92
51648: PUSH
51649: LD_VAR 0 7
51653: PUSH
51654: LD_INT 1
51656: ARRAY
51657: PUSH
51658: LD_VAR 0 7
51662: PUSH
51663: LD_INT 2
51665: ARRAY
51666: PUSH
51667: LD_INT 3
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: PPUSH
51676: CALL_OW 69
51680: PUSH
51681: LD_INT 0
51683: EQUAL
51684: IFFALSE 51724
// begin PlaceUnitArea ( unit , area , mode ) ;
51686: LD_VAR 0 1
51690: PPUSH
51691: LD_VAR 0 2
51695: PPUSH
51696: LD_VAR 0 3
51700: PPUSH
51701: CALL_OW 49
// result := IsPlaced ( unit ) ;
51705: LD_ADDR_VAR 0 4
51709: PUSH
51710: LD_VAR 0 1
51714: PPUSH
51715: CALL_OW 305
51719: ST_TO_ADDR
// exit ;
51720: POP
51721: POP
51722: GO 51728
// end ; end ;
51724: GO 51604
51726: POP
51727: POP
// end ;
51728: LD_VAR 0 4
51732: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51733: LD_INT 0
51735: PPUSH
51736: PPUSH
51737: PPUSH
// if not side or side > 8 then
51738: LD_VAR 0 1
51742: NOT
51743: PUSH
51744: LD_VAR 0 1
51748: PUSH
51749: LD_INT 8
51751: GREATER
51752: OR
51753: IFFALSE 51757
// exit ;
51755: GO 51944
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51757: LD_ADDR_VAR 0 4
51761: PUSH
51762: LD_INT 22
51764: PUSH
51765: LD_VAR 0 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 21
51776: PUSH
51777: LD_INT 3
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PPUSH
51788: CALL_OW 69
51792: ST_TO_ADDR
// if not tmp then
51793: LD_VAR 0 4
51797: NOT
51798: IFFALSE 51802
// exit ;
51800: GO 51944
// enable_addtolog := true ;
51802: LD_ADDR_OWVAR 81
51806: PUSH
51807: LD_INT 1
51809: ST_TO_ADDR
// AddToLog ( [ ) ;
51810: LD_STRING [
51812: PPUSH
51813: CALL_OW 561
// for i in tmp do
51817: LD_ADDR_VAR 0 3
51821: PUSH
51822: LD_VAR 0 4
51826: PUSH
51827: FOR_IN
51828: IFFALSE 51935
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51830: LD_STRING [
51832: PUSH
51833: LD_VAR 0 3
51837: PPUSH
51838: CALL_OW 266
51842: STR
51843: PUSH
51844: LD_STRING , 
51846: STR
51847: PUSH
51848: LD_VAR 0 3
51852: PPUSH
51853: CALL_OW 250
51857: STR
51858: PUSH
51859: LD_STRING , 
51861: STR
51862: PUSH
51863: LD_VAR 0 3
51867: PPUSH
51868: CALL_OW 251
51872: STR
51873: PUSH
51874: LD_STRING , 
51876: STR
51877: PUSH
51878: LD_VAR 0 3
51882: PPUSH
51883: CALL_OW 254
51887: STR
51888: PUSH
51889: LD_STRING , 
51891: STR
51892: PUSH
51893: LD_VAR 0 3
51897: PPUSH
51898: LD_INT 1
51900: PPUSH
51901: CALL_OW 268
51905: STR
51906: PUSH
51907: LD_STRING , 
51909: STR
51910: PUSH
51911: LD_VAR 0 3
51915: PPUSH
51916: LD_INT 2
51918: PPUSH
51919: CALL_OW 268
51923: STR
51924: PUSH
51925: LD_STRING ],
51927: STR
51928: PPUSH
51929: CALL_OW 561
// end ;
51933: GO 51827
51935: POP
51936: POP
// AddToLog ( ]; ) ;
51937: LD_STRING ];
51939: PPUSH
51940: CALL_OW 561
// end ;
51944: LD_VAR 0 2
51948: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51949: LD_INT 0
51951: PPUSH
51952: PPUSH
51953: PPUSH
51954: PPUSH
51955: PPUSH
// if not area or not rate or not max then
51956: LD_VAR 0 1
51960: NOT
51961: PUSH
51962: LD_VAR 0 2
51966: NOT
51967: OR
51968: PUSH
51969: LD_VAR 0 4
51973: NOT
51974: OR
51975: IFFALSE 51979
// exit ;
51977: GO 52168
// while 1 do
51979: LD_INT 1
51981: IFFALSE 52168
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51983: LD_ADDR_VAR 0 9
51987: PUSH
51988: LD_VAR 0 1
51992: PPUSH
51993: LD_INT 1
51995: PPUSH
51996: CALL_OW 287
52000: PUSH
52001: LD_INT 10
52003: MUL
52004: ST_TO_ADDR
// r := rate / 10 ;
52005: LD_ADDR_VAR 0 7
52009: PUSH
52010: LD_VAR 0 2
52014: PUSH
52015: LD_INT 10
52017: DIVREAL
52018: ST_TO_ADDR
// time := 1 1$00 ;
52019: LD_ADDR_VAR 0 8
52023: PUSH
52024: LD_INT 2100
52026: ST_TO_ADDR
// if amount < min then
52027: LD_VAR 0 9
52031: PUSH
52032: LD_VAR 0 3
52036: LESS
52037: IFFALSE 52055
// r := r * 2 else
52039: LD_ADDR_VAR 0 7
52043: PUSH
52044: LD_VAR 0 7
52048: PUSH
52049: LD_INT 2
52051: MUL
52052: ST_TO_ADDR
52053: GO 52081
// if amount > max then
52055: LD_VAR 0 9
52059: PUSH
52060: LD_VAR 0 4
52064: GREATER
52065: IFFALSE 52081
// r := r / 2 ;
52067: LD_ADDR_VAR 0 7
52071: PUSH
52072: LD_VAR 0 7
52076: PUSH
52077: LD_INT 2
52079: DIVREAL
52080: ST_TO_ADDR
// time := time / r ;
52081: LD_ADDR_VAR 0 8
52085: PUSH
52086: LD_VAR 0 8
52090: PUSH
52091: LD_VAR 0 7
52095: DIVREAL
52096: ST_TO_ADDR
// if time < 0 then
52097: LD_VAR 0 8
52101: PUSH
52102: LD_INT 0
52104: LESS
52105: IFFALSE 52122
// time := time * - 1 ;
52107: LD_ADDR_VAR 0 8
52111: PUSH
52112: LD_VAR 0 8
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: MUL
52121: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52122: LD_VAR 0 8
52126: PUSH
52127: LD_INT 35
52129: PPUSH
52130: LD_INT 875
52132: PPUSH
52133: CALL_OW 12
52137: PLUS
52138: PPUSH
52139: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52143: LD_INT 1
52145: PPUSH
52146: LD_INT 5
52148: PPUSH
52149: CALL_OW 12
52153: PPUSH
52154: LD_VAR 0 1
52158: PPUSH
52159: LD_INT 1
52161: PPUSH
52162: CALL_OW 55
// end ;
52166: GO 51979
// end ;
52168: LD_VAR 0 5
52172: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52173: LD_INT 0
52175: PPUSH
52176: PPUSH
52177: PPUSH
52178: PPUSH
52179: PPUSH
52180: PPUSH
52181: PPUSH
52182: PPUSH
// if not turrets or not factories then
52183: LD_VAR 0 1
52187: NOT
52188: PUSH
52189: LD_VAR 0 2
52193: NOT
52194: OR
52195: IFFALSE 52199
// exit ;
52197: GO 52506
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52199: LD_ADDR_VAR 0 10
52203: PUSH
52204: LD_INT 5
52206: PUSH
52207: LD_INT 6
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 4
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 3
52226: PUSH
52227: LD_INT 5
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 24
52241: PUSH
52242: LD_INT 25
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 23
52251: PUSH
52252: LD_INT 27
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 42
52265: PUSH
52266: LD_INT 43
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 44
52275: PUSH
52276: LD_INT 46
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 45
52285: PUSH
52286: LD_INT 47
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// result := [ ] ;
52303: LD_ADDR_VAR 0 3
52307: PUSH
52308: EMPTY
52309: ST_TO_ADDR
// for i in turrets do
52310: LD_ADDR_VAR 0 4
52314: PUSH
52315: LD_VAR 0 1
52319: PUSH
52320: FOR_IN
52321: IFFALSE 52504
// begin nat := GetNation ( i ) ;
52323: LD_ADDR_VAR 0 7
52327: PUSH
52328: LD_VAR 0 4
52332: PPUSH
52333: CALL_OW 248
52337: ST_TO_ADDR
// weapon := 0 ;
52338: LD_ADDR_VAR 0 8
52342: PUSH
52343: LD_INT 0
52345: ST_TO_ADDR
// if not nat then
52346: LD_VAR 0 7
52350: NOT
52351: IFFALSE 52355
// continue ;
52353: GO 52320
// for j in list [ nat ] do
52355: LD_ADDR_VAR 0 5
52359: PUSH
52360: LD_VAR 0 10
52364: PUSH
52365: LD_VAR 0 7
52369: ARRAY
52370: PUSH
52371: FOR_IN
52372: IFFALSE 52413
// if GetBWeapon ( i ) = j [ 1 ] then
52374: LD_VAR 0 4
52378: PPUSH
52379: CALL_OW 269
52383: PUSH
52384: LD_VAR 0 5
52388: PUSH
52389: LD_INT 1
52391: ARRAY
52392: EQUAL
52393: IFFALSE 52411
// begin weapon := j [ 2 ] ;
52395: LD_ADDR_VAR 0 8
52399: PUSH
52400: LD_VAR 0 5
52404: PUSH
52405: LD_INT 2
52407: ARRAY
52408: ST_TO_ADDR
// break ;
52409: GO 52413
// end ;
52411: GO 52371
52413: POP
52414: POP
// if not weapon then
52415: LD_VAR 0 8
52419: NOT
52420: IFFALSE 52424
// continue ;
52422: GO 52320
// for k in factories do
52424: LD_ADDR_VAR 0 6
52428: PUSH
52429: LD_VAR 0 2
52433: PUSH
52434: FOR_IN
52435: IFFALSE 52500
// begin weapons := AvailableWeaponList ( k ) ;
52437: LD_ADDR_VAR 0 9
52441: PUSH
52442: LD_VAR 0 6
52446: PPUSH
52447: CALL_OW 478
52451: ST_TO_ADDR
// if not weapons then
52452: LD_VAR 0 9
52456: NOT
52457: IFFALSE 52461
// continue ;
52459: GO 52434
// if weapon in weapons then
52461: LD_VAR 0 8
52465: PUSH
52466: LD_VAR 0 9
52470: IN
52471: IFFALSE 52498
// begin result := [ i , weapon ] ;
52473: LD_ADDR_VAR 0 3
52477: PUSH
52478: LD_VAR 0 4
52482: PUSH
52483: LD_VAR 0 8
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: ST_TO_ADDR
// exit ;
52492: POP
52493: POP
52494: POP
52495: POP
52496: GO 52506
// end ; end ;
52498: GO 52434
52500: POP
52501: POP
// end ;
52502: GO 52320
52504: POP
52505: POP
// end ;
52506: LD_VAR 0 3
52510: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52511: LD_INT 0
52513: PPUSH
// if not side or side > 8 then
52514: LD_VAR 0 3
52518: NOT
52519: PUSH
52520: LD_VAR 0 3
52524: PUSH
52525: LD_INT 8
52527: GREATER
52528: OR
52529: IFFALSE 52533
// exit ;
52531: GO 52592
// if not range then
52533: LD_VAR 0 4
52537: NOT
52538: IFFALSE 52549
// range := - 12 ;
52540: LD_ADDR_VAR 0 4
52544: PUSH
52545: LD_INT 12
52547: NEG
52548: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52549: LD_VAR 0 1
52553: PPUSH
52554: LD_VAR 0 2
52558: PPUSH
52559: LD_VAR 0 3
52563: PPUSH
52564: LD_VAR 0 4
52568: PPUSH
52569: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52573: LD_VAR 0 1
52577: PPUSH
52578: LD_VAR 0 2
52582: PPUSH
52583: LD_VAR 0 3
52587: PPUSH
52588: CALL_OW 331
// end ;
52592: LD_VAR 0 5
52596: RET
// export function Video ( mode ) ; begin
52597: LD_INT 0
52599: PPUSH
// ingame_video = mode ;
52600: LD_ADDR_OWVAR 52
52604: PUSH
52605: LD_VAR 0 1
52609: ST_TO_ADDR
// interface_hidden = mode ;
52610: LD_ADDR_OWVAR 54
52614: PUSH
52615: LD_VAR 0 1
52619: ST_TO_ADDR
// end ;
52620: LD_VAR 0 2
52624: RET
// export function Join ( array , element ) ; begin
52625: LD_INT 0
52627: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52628: LD_ADDR_VAR 0 3
52632: PUSH
52633: LD_VAR 0 1
52637: PPUSH
52638: LD_VAR 0 1
52642: PUSH
52643: LD_INT 1
52645: PLUS
52646: PPUSH
52647: LD_VAR 0 2
52651: PPUSH
52652: CALL_OW 1
52656: ST_TO_ADDR
// end ;
52657: LD_VAR 0 3
52661: RET
// export function JoinUnion ( array , element ) ; begin
52662: LD_INT 0
52664: PPUSH
// result := array union element ;
52665: LD_ADDR_VAR 0 3
52669: PUSH
52670: LD_VAR 0 1
52674: PUSH
52675: LD_VAR 0 2
52679: UNION
52680: ST_TO_ADDR
// end ;
52681: LD_VAR 0 3
52685: RET
// export function GetBehemoths ( side ) ; begin
52686: LD_INT 0
52688: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52689: LD_ADDR_VAR 0 2
52693: PUSH
52694: LD_INT 22
52696: PUSH
52697: LD_VAR 0 1
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 31
52708: PUSH
52709: LD_INT 25
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PPUSH
52720: CALL_OW 69
52724: ST_TO_ADDR
// end ;
52725: LD_VAR 0 2
52729: RET
// export function Shuffle ( array ) ; var i , index ; begin
52730: LD_INT 0
52732: PPUSH
52733: PPUSH
52734: PPUSH
// result := [ ] ;
52735: LD_ADDR_VAR 0 2
52739: PUSH
52740: EMPTY
52741: ST_TO_ADDR
// if not array then
52742: LD_VAR 0 1
52746: NOT
52747: IFFALSE 52751
// exit ;
52749: GO 52850
// Randomize ;
52751: CALL_OW 10
// for i = array downto 1 do
52755: LD_ADDR_VAR 0 3
52759: PUSH
52760: DOUBLE
52761: LD_VAR 0 1
52765: INC
52766: ST_TO_ADDR
52767: LD_INT 1
52769: PUSH
52770: FOR_DOWNTO
52771: IFFALSE 52848
// begin index := rand ( 1 , array ) ;
52773: LD_ADDR_VAR 0 4
52777: PUSH
52778: LD_INT 1
52780: PPUSH
52781: LD_VAR 0 1
52785: PPUSH
52786: CALL_OW 12
52790: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52791: LD_ADDR_VAR 0 2
52795: PUSH
52796: LD_VAR 0 2
52800: PPUSH
52801: LD_VAR 0 2
52805: PUSH
52806: LD_INT 1
52808: PLUS
52809: PPUSH
52810: LD_VAR 0 1
52814: PUSH
52815: LD_VAR 0 4
52819: ARRAY
52820: PPUSH
52821: CALL_OW 2
52825: ST_TO_ADDR
// array := Delete ( array , index ) ;
52826: LD_ADDR_VAR 0 1
52830: PUSH
52831: LD_VAR 0 1
52835: PPUSH
52836: LD_VAR 0 4
52840: PPUSH
52841: CALL_OW 3
52845: ST_TO_ADDR
// end ;
52846: GO 52770
52848: POP
52849: POP
// end ;
52850: LD_VAR 0 2
52854: RET
// export function GetBaseMaterials ( base ) ; begin
52855: LD_INT 0
52857: PPUSH
// result := [ 0 , 0 , 0 ] ;
52858: LD_ADDR_VAR 0 2
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: LIST
52876: ST_TO_ADDR
// if not base then
52877: LD_VAR 0 1
52881: NOT
52882: IFFALSE 52886
// exit ;
52884: GO 52935
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52886: LD_ADDR_VAR 0 2
52890: PUSH
52891: LD_VAR 0 1
52895: PPUSH
52896: LD_INT 1
52898: PPUSH
52899: CALL_OW 275
52903: PUSH
52904: LD_VAR 0 1
52908: PPUSH
52909: LD_INT 2
52911: PPUSH
52912: CALL_OW 275
52916: PUSH
52917: LD_VAR 0 1
52921: PPUSH
52922: LD_INT 3
52924: PPUSH
52925: CALL_OW 275
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: ST_TO_ADDR
// end ;
52935: LD_VAR 0 2
52939: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52940: LD_INT 0
52942: PPUSH
52943: PPUSH
// result := array ;
52944: LD_ADDR_VAR 0 3
52948: PUSH
52949: LD_VAR 0 1
52953: ST_TO_ADDR
// if size >= result then
52954: LD_VAR 0 2
52958: PUSH
52959: LD_VAR 0 3
52963: GREATEREQUAL
52964: IFFALSE 52968
// exit ;
52966: GO 53018
// if size then
52968: LD_VAR 0 2
52972: IFFALSE 53018
// for i := array downto size do
52974: LD_ADDR_VAR 0 4
52978: PUSH
52979: DOUBLE
52980: LD_VAR 0 1
52984: INC
52985: ST_TO_ADDR
52986: LD_VAR 0 2
52990: PUSH
52991: FOR_DOWNTO
52992: IFFALSE 53016
// result := Delete ( result , result ) ;
52994: LD_ADDR_VAR 0 3
52998: PUSH
52999: LD_VAR 0 3
53003: PPUSH
53004: LD_VAR 0 3
53008: PPUSH
53009: CALL_OW 3
53013: ST_TO_ADDR
53014: GO 52991
53016: POP
53017: POP
// end ;
53018: LD_VAR 0 3
53022: RET
// export function ComExit ( unit ) ; var tmp ; begin
53023: LD_INT 0
53025: PPUSH
53026: PPUSH
// if not IsInUnit ( unit ) then
53027: LD_VAR 0 1
53031: PPUSH
53032: CALL_OW 310
53036: NOT
53037: IFFALSE 53041
// exit ;
53039: GO 53101
// tmp := IsInUnit ( unit ) ;
53041: LD_ADDR_VAR 0 3
53045: PUSH
53046: LD_VAR 0 1
53050: PPUSH
53051: CALL_OW 310
53055: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53056: LD_VAR 0 3
53060: PPUSH
53061: CALL_OW 247
53065: PUSH
53066: LD_INT 2
53068: EQUAL
53069: IFFALSE 53082
// ComExitVehicle ( unit ) else
53071: LD_VAR 0 1
53075: PPUSH
53076: CALL_OW 121
53080: GO 53091
// ComExitBuilding ( unit ) ;
53082: LD_VAR 0 1
53086: PPUSH
53087: CALL_OW 122
// result := tmp ;
53091: LD_ADDR_VAR 0 2
53095: PUSH
53096: LD_VAR 0 3
53100: ST_TO_ADDR
// end ;
53101: LD_VAR 0 2
53105: RET
// export function ComExitAll ( units ) ; var i ; begin
53106: LD_INT 0
53108: PPUSH
53109: PPUSH
// if not units then
53110: LD_VAR 0 1
53114: NOT
53115: IFFALSE 53119
// exit ;
53117: GO 53145
// for i in units do
53119: LD_ADDR_VAR 0 3
53123: PUSH
53124: LD_VAR 0 1
53128: PUSH
53129: FOR_IN
53130: IFFALSE 53143
// ComExit ( i ) ;
53132: LD_VAR 0 3
53136: PPUSH
53137: CALL 53023 0 1
53141: GO 53129
53143: POP
53144: POP
// end ;
53145: LD_VAR 0 2
53149: RET
// export function ResetHc ; begin
53150: LD_INT 0
53152: PPUSH
// InitHc ;
53153: CALL_OW 19
// hc_importance := 0 ;
53157: LD_ADDR_OWVAR 32
53161: PUSH
53162: LD_INT 0
53164: ST_TO_ADDR
// end ;
53165: LD_VAR 0 1
53169: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53170: LD_INT 0
53172: PPUSH
53173: PPUSH
53174: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53175: LD_ADDR_VAR 0 6
53179: PUSH
53180: LD_VAR 0 1
53184: PUSH
53185: LD_VAR 0 3
53189: PLUS
53190: PUSH
53191: LD_INT 2
53193: DIV
53194: ST_TO_ADDR
// if _x < 0 then
53195: LD_VAR 0 6
53199: PUSH
53200: LD_INT 0
53202: LESS
53203: IFFALSE 53220
// _x := _x * - 1 ;
53205: LD_ADDR_VAR 0 6
53209: PUSH
53210: LD_VAR 0 6
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: MUL
53219: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53220: LD_ADDR_VAR 0 7
53224: PUSH
53225: LD_VAR 0 2
53229: PUSH
53230: LD_VAR 0 4
53234: PLUS
53235: PUSH
53236: LD_INT 2
53238: DIV
53239: ST_TO_ADDR
// if _y < 0 then
53240: LD_VAR 0 7
53244: PUSH
53245: LD_INT 0
53247: LESS
53248: IFFALSE 53265
// _y := _y * - 1 ;
53250: LD_ADDR_VAR 0 7
53254: PUSH
53255: LD_VAR 0 7
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: MUL
53264: ST_TO_ADDR
// result := [ _x , _y ] ;
53265: LD_ADDR_VAR 0 5
53269: PUSH
53270: LD_VAR 0 6
53274: PUSH
53275: LD_VAR 0 7
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: ST_TO_ADDR
// end ;
53284: LD_VAR 0 5
53288: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53289: LD_INT 0
53291: PPUSH
53292: PPUSH
53293: PPUSH
53294: PPUSH
// task := GetTaskList ( unit ) ;
53295: LD_ADDR_VAR 0 7
53299: PUSH
53300: LD_VAR 0 1
53304: PPUSH
53305: CALL_OW 437
53309: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53310: LD_VAR 0 7
53314: NOT
53315: PUSH
53316: LD_VAR 0 1
53320: PPUSH
53321: LD_VAR 0 2
53325: PPUSH
53326: CALL_OW 308
53330: NOT
53331: AND
53332: IFFALSE 53336
// exit ;
53334: GO 53454
// if IsInArea ( unit , area ) then
53336: LD_VAR 0 1
53340: PPUSH
53341: LD_VAR 0 2
53345: PPUSH
53346: CALL_OW 308
53350: IFFALSE 53368
// begin ComMoveToArea ( unit , goAway ) ;
53352: LD_VAR 0 1
53356: PPUSH
53357: LD_VAR 0 3
53361: PPUSH
53362: CALL_OW 113
// exit ;
53366: GO 53454
// end ; if task [ 1 ] [ 1 ] <> M then
53368: LD_VAR 0 7
53372: PUSH
53373: LD_INT 1
53375: ARRAY
53376: PUSH
53377: LD_INT 1
53379: ARRAY
53380: PUSH
53381: LD_STRING M
53383: NONEQUAL
53384: IFFALSE 53388
// exit ;
53386: GO 53454
// x := task [ 1 ] [ 2 ] ;
53388: LD_ADDR_VAR 0 5
53392: PUSH
53393: LD_VAR 0 7
53397: PUSH
53398: LD_INT 1
53400: ARRAY
53401: PUSH
53402: LD_INT 2
53404: ARRAY
53405: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53406: LD_ADDR_VAR 0 6
53410: PUSH
53411: LD_VAR 0 7
53415: PUSH
53416: LD_INT 1
53418: ARRAY
53419: PUSH
53420: LD_INT 3
53422: ARRAY
53423: ST_TO_ADDR
// if InArea ( x , y , area ) then
53424: LD_VAR 0 5
53428: PPUSH
53429: LD_VAR 0 6
53433: PPUSH
53434: LD_VAR 0 2
53438: PPUSH
53439: CALL_OW 309
53443: IFFALSE 53454
// ComStop ( unit ) ;
53445: LD_VAR 0 1
53449: PPUSH
53450: CALL_OW 141
// end ;
53454: LD_VAR 0 4
53458: RET
// export function Abs ( value ) ; begin
53459: LD_INT 0
53461: PPUSH
// result := value ;
53462: LD_ADDR_VAR 0 2
53466: PUSH
53467: LD_VAR 0 1
53471: ST_TO_ADDR
// if value < 0 then
53472: LD_VAR 0 1
53476: PUSH
53477: LD_INT 0
53479: LESS
53480: IFFALSE 53497
// result := value * - 1 ;
53482: LD_ADDR_VAR 0 2
53486: PUSH
53487: LD_VAR 0 1
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: MUL
53496: ST_TO_ADDR
// end ;
53497: LD_VAR 0 2
53501: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53502: LD_INT 0
53504: PPUSH
53505: PPUSH
53506: PPUSH
53507: PPUSH
53508: PPUSH
53509: PPUSH
53510: PPUSH
53511: PPUSH
// if not unit or not building then
53512: LD_VAR 0 1
53516: NOT
53517: PUSH
53518: LD_VAR 0 2
53522: NOT
53523: OR
53524: IFFALSE 53528
// exit ;
53526: GO 53754
// x := GetX ( building ) ;
53528: LD_ADDR_VAR 0 4
53532: PUSH
53533: LD_VAR 0 2
53537: PPUSH
53538: CALL_OW 250
53542: ST_TO_ADDR
// y := GetY ( building ) ;
53543: LD_ADDR_VAR 0 6
53547: PUSH
53548: LD_VAR 0 2
53552: PPUSH
53553: CALL_OW 251
53557: ST_TO_ADDR
// d := GetDir ( building ) ;
53558: LD_ADDR_VAR 0 8
53562: PUSH
53563: LD_VAR 0 2
53567: PPUSH
53568: CALL_OW 254
53572: ST_TO_ADDR
// r := 4 ;
53573: LD_ADDR_VAR 0 9
53577: PUSH
53578: LD_INT 4
53580: ST_TO_ADDR
// for i := 1 to 5 do
53581: LD_ADDR_VAR 0 10
53585: PUSH
53586: DOUBLE
53587: LD_INT 1
53589: DEC
53590: ST_TO_ADDR
53591: LD_INT 5
53593: PUSH
53594: FOR_TO
53595: IFFALSE 53752
// begin _x := ShiftX ( x , d , r + i ) ;
53597: LD_ADDR_VAR 0 5
53601: PUSH
53602: LD_VAR 0 4
53606: PPUSH
53607: LD_VAR 0 8
53611: PPUSH
53612: LD_VAR 0 9
53616: PUSH
53617: LD_VAR 0 10
53621: PLUS
53622: PPUSH
53623: CALL_OW 272
53627: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53628: LD_ADDR_VAR 0 7
53632: PUSH
53633: LD_VAR 0 6
53637: PPUSH
53638: LD_VAR 0 8
53642: PPUSH
53643: LD_VAR 0 9
53647: PUSH
53648: LD_VAR 0 10
53652: PLUS
53653: PPUSH
53654: CALL_OW 273
53658: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53659: LD_VAR 0 5
53663: PPUSH
53664: LD_VAR 0 7
53668: PPUSH
53669: CALL_OW 488
53673: PUSH
53674: LD_VAR 0 5
53678: PPUSH
53679: LD_VAR 0 7
53683: PPUSH
53684: CALL_OW 428
53688: PPUSH
53689: CALL_OW 247
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: IN
53704: NOT
53705: AND
53706: IFFALSE 53750
// begin ComMoveXY ( unit , _x , _y ) ;
53708: LD_VAR 0 1
53712: PPUSH
53713: LD_VAR 0 5
53717: PPUSH
53718: LD_VAR 0 7
53722: PPUSH
53723: CALL_OW 111
// result := [ _x , _y ] ;
53727: LD_ADDR_VAR 0 3
53731: PUSH
53732: LD_VAR 0 5
53736: PUSH
53737: LD_VAR 0 7
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: ST_TO_ADDR
// exit ;
53746: POP
53747: POP
53748: GO 53754
// end ; end ;
53750: GO 53594
53752: POP
53753: POP
// end ;
53754: LD_VAR 0 3
53758: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53759: LD_INT 0
53761: PPUSH
53762: PPUSH
53763: PPUSH
// result := 0 ;
53764: LD_ADDR_VAR 0 3
53768: PUSH
53769: LD_INT 0
53771: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53772: LD_VAR 0 1
53776: PUSH
53777: LD_INT 0
53779: LESS
53780: PUSH
53781: LD_VAR 0 1
53785: PUSH
53786: LD_INT 8
53788: GREATER
53789: OR
53790: PUSH
53791: LD_VAR 0 2
53795: PUSH
53796: LD_INT 0
53798: LESS
53799: OR
53800: PUSH
53801: LD_VAR 0 2
53805: PUSH
53806: LD_INT 8
53808: GREATER
53809: OR
53810: IFFALSE 53814
// exit ;
53812: GO 53889
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53814: LD_ADDR_VAR 0 4
53818: PUSH
53819: LD_INT 22
53821: PUSH
53822: LD_VAR 0 2
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PPUSH
53831: CALL_OW 69
53835: PUSH
53836: FOR_IN
53837: IFFALSE 53887
// begin un := UnitShoot ( i ) ;
53839: LD_ADDR_VAR 0 5
53843: PUSH
53844: LD_VAR 0 4
53848: PPUSH
53849: CALL_OW 504
53853: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53854: LD_VAR 0 5
53858: PPUSH
53859: CALL_OW 255
53863: PUSH
53864: LD_VAR 0 1
53868: EQUAL
53869: IFFALSE 53885
// begin result := un ;
53871: LD_ADDR_VAR 0 3
53875: PUSH
53876: LD_VAR 0 5
53880: ST_TO_ADDR
// exit ;
53881: POP
53882: POP
53883: GO 53889
// end ; end ;
53885: GO 53836
53887: POP
53888: POP
// end ;
53889: LD_VAR 0 3
53893: RET
// export function GetCargoBay ( units ) ; begin
53894: LD_INT 0
53896: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53897: LD_ADDR_VAR 0 2
53901: PUSH
53902: LD_VAR 0 1
53906: PPUSH
53907: LD_INT 2
53909: PUSH
53910: LD_INT 34
53912: PUSH
53913: LD_INT 12
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 34
53922: PUSH
53923: LD_INT 51
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 34
53932: PUSH
53933: LD_INT 32
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 34
53942: PUSH
53943: LD_INT 89
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: PPUSH
53957: CALL_OW 72
53961: ST_TO_ADDR
// end ;
53962: LD_VAR 0 2
53966: RET
// export function Negate ( value ) ; begin
53967: LD_INT 0
53969: PPUSH
// result := not value ;
53970: LD_ADDR_VAR 0 2
53974: PUSH
53975: LD_VAR 0 1
53979: NOT
53980: ST_TO_ADDR
// end ;
53981: LD_VAR 0 2
53985: RET
// export function Inc ( value ) ; begin
53986: LD_INT 0
53988: PPUSH
// result := value + 1 ;
53989: LD_ADDR_VAR 0 2
53993: PUSH
53994: LD_VAR 0 1
53998: PUSH
53999: LD_INT 1
54001: PLUS
54002: ST_TO_ADDR
// end ;
54003: LD_VAR 0 2
54007: RET
// export function Dec ( value ) ; begin
54008: LD_INT 0
54010: PPUSH
// result := value - 1 ;
54011: LD_ADDR_VAR 0 2
54015: PUSH
54016: LD_VAR 0 1
54020: PUSH
54021: LD_INT 1
54023: MINUS
54024: ST_TO_ADDR
// end ;
54025: LD_VAR 0 2
54029: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54030: LD_INT 0
54032: PPUSH
54033: PPUSH
54034: PPUSH
54035: PPUSH
54036: PPUSH
54037: PPUSH
54038: PPUSH
54039: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54040: LD_VAR 0 1
54044: PPUSH
54045: LD_VAR 0 2
54049: PPUSH
54050: CALL_OW 488
54054: NOT
54055: PUSH
54056: LD_VAR 0 3
54060: PPUSH
54061: LD_VAR 0 4
54065: PPUSH
54066: CALL_OW 488
54070: NOT
54071: OR
54072: IFFALSE 54085
// begin result := - 1 ;
54074: LD_ADDR_VAR 0 5
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: ST_TO_ADDR
// exit ;
54083: GO 54320
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54085: LD_ADDR_VAR 0 12
54089: PUSH
54090: LD_VAR 0 1
54094: PPUSH
54095: LD_VAR 0 2
54099: PPUSH
54100: LD_VAR 0 3
54104: PPUSH
54105: LD_VAR 0 4
54109: PPUSH
54110: CALL 53170 0 4
54114: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54115: LD_ADDR_VAR 0 11
54119: PUSH
54120: LD_VAR 0 1
54124: PPUSH
54125: LD_VAR 0 2
54129: PPUSH
54130: LD_VAR 0 12
54134: PUSH
54135: LD_INT 1
54137: ARRAY
54138: PPUSH
54139: LD_VAR 0 12
54143: PUSH
54144: LD_INT 2
54146: ARRAY
54147: PPUSH
54148: CALL_OW 298
54152: ST_TO_ADDR
// distance := 9999 ;
54153: LD_ADDR_VAR 0 10
54157: PUSH
54158: LD_INT 9999
54160: ST_TO_ADDR
// for i := 0 to 5 do
54161: LD_ADDR_VAR 0 6
54165: PUSH
54166: DOUBLE
54167: LD_INT 0
54169: DEC
54170: ST_TO_ADDR
54171: LD_INT 5
54173: PUSH
54174: FOR_TO
54175: IFFALSE 54318
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54177: LD_ADDR_VAR 0 7
54181: PUSH
54182: LD_VAR 0 1
54186: PPUSH
54187: LD_VAR 0 6
54191: PPUSH
54192: LD_VAR 0 11
54196: PPUSH
54197: CALL_OW 272
54201: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54202: LD_ADDR_VAR 0 8
54206: PUSH
54207: LD_VAR 0 2
54211: PPUSH
54212: LD_VAR 0 6
54216: PPUSH
54217: LD_VAR 0 11
54221: PPUSH
54222: CALL_OW 273
54226: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54227: LD_VAR 0 7
54231: PPUSH
54232: LD_VAR 0 8
54236: PPUSH
54237: CALL_OW 488
54241: NOT
54242: IFFALSE 54246
// continue ;
54244: GO 54174
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54246: LD_ADDR_VAR 0 9
54250: PUSH
54251: LD_VAR 0 12
54255: PUSH
54256: LD_INT 1
54258: ARRAY
54259: PPUSH
54260: LD_VAR 0 12
54264: PUSH
54265: LD_INT 2
54267: ARRAY
54268: PPUSH
54269: LD_VAR 0 7
54273: PPUSH
54274: LD_VAR 0 8
54278: PPUSH
54279: CALL_OW 298
54283: ST_TO_ADDR
// if tmp < distance then
54284: LD_VAR 0 9
54288: PUSH
54289: LD_VAR 0 10
54293: LESS
54294: IFFALSE 54316
// begin result := i ;
54296: LD_ADDR_VAR 0 5
54300: PUSH
54301: LD_VAR 0 6
54305: ST_TO_ADDR
// distance := tmp ;
54306: LD_ADDR_VAR 0 10
54310: PUSH
54311: LD_VAR 0 9
54315: ST_TO_ADDR
// end ; end ;
54316: GO 54174
54318: POP
54319: POP
// end ;
54320: LD_VAR 0 5
54324: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54325: LD_INT 0
54327: PPUSH
54328: PPUSH
// if not driver or not IsInUnit ( driver ) then
54329: LD_VAR 0 1
54333: NOT
54334: PUSH
54335: LD_VAR 0 1
54339: PPUSH
54340: CALL_OW 310
54344: NOT
54345: OR
54346: IFFALSE 54350
// exit ;
54348: GO 54440
// vehicle := IsInUnit ( driver ) ;
54350: LD_ADDR_VAR 0 3
54354: PUSH
54355: LD_VAR 0 1
54359: PPUSH
54360: CALL_OW 310
54364: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54365: LD_VAR 0 1
54369: PPUSH
54370: LD_STRING \
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: PUSH
54400: LD_STRING E
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_VAR 0 3
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PPUSH
54436: CALL_OW 446
// end ;
54440: LD_VAR 0 2
54444: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54445: LD_INT 0
54447: PPUSH
54448: PPUSH
// if not driver or not IsInUnit ( driver ) then
54449: LD_VAR 0 1
54453: NOT
54454: PUSH
54455: LD_VAR 0 1
54459: PPUSH
54460: CALL_OW 310
54464: NOT
54465: OR
54466: IFFALSE 54470
// exit ;
54468: GO 54560
// vehicle := IsInUnit ( driver ) ;
54470: LD_ADDR_VAR 0 3
54474: PUSH
54475: LD_VAR 0 1
54479: PPUSH
54480: CALL_OW 310
54484: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54485: LD_VAR 0 1
54489: PPUSH
54490: LD_STRING \
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: PUSH
54520: LD_STRING E
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_VAR 0 3
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PPUSH
54556: CALL_OW 447
// end ;
54560: LD_VAR 0 2
54564: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54565: LD_INT 0
54567: PPUSH
54568: PPUSH
54569: PPUSH
// tmp := [ ] ;
54570: LD_ADDR_VAR 0 5
54574: PUSH
54575: EMPTY
54576: ST_TO_ADDR
// for i in units do
54577: LD_ADDR_VAR 0 4
54581: PUSH
54582: LD_VAR 0 1
54586: PUSH
54587: FOR_IN
54588: IFFALSE 54626
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54590: LD_ADDR_VAR 0 5
54594: PUSH
54595: LD_VAR 0 5
54599: PPUSH
54600: LD_VAR 0 5
54604: PUSH
54605: LD_INT 1
54607: PLUS
54608: PPUSH
54609: LD_VAR 0 4
54613: PPUSH
54614: CALL_OW 256
54618: PPUSH
54619: CALL_OW 2
54623: ST_TO_ADDR
54624: GO 54587
54626: POP
54627: POP
// if not tmp then
54628: LD_VAR 0 5
54632: NOT
54633: IFFALSE 54637
// exit ;
54635: GO 54685
// if asc then
54637: LD_VAR 0 2
54641: IFFALSE 54665
// result := SortListByListAsc ( units , tmp ) else
54643: LD_ADDR_VAR 0 3
54647: PUSH
54648: LD_VAR 0 1
54652: PPUSH
54653: LD_VAR 0 5
54657: PPUSH
54658: CALL_OW 76
54662: ST_TO_ADDR
54663: GO 54685
// result := SortListByListDesc ( units , tmp ) ;
54665: LD_ADDR_VAR 0 3
54669: PUSH
54670: LD_VAR 0 1
54674: PPUSH
54675: LD_VAR 0 5
54679: PPUSH
54680: CALL_OW 77
54684: ST_TO_ADDR
// end ;
54685: LD_VAR 0 3
54689: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54690: LD_INT 0
54692: PPUSH
54693: PPUSH
// task := GetTaskList ( mech ) ;
54694: LD_ADDR_VAR 0 4
54698: PUSH
54699: LD_VAR 0 1
54703: PPUSH
54704: CALL_OW 437
54708: ST_TO_ADDR
// if not task then
54709: LD_VAR 0 4
54713: NOT
54714: IFFALSE 54718
// exit ;
54716: GO 54760
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54718: LD_ADDR_VAR 0 3
54722: PUSH
54723: LD_VAR 0 4
54727: PUSH
54728: LD_INT 1
54730: ARRAY
54731: PUSH
54732: LD_INT 1
54734: ARRAY
54735: PUSH
54736: LD_STRING r
54738: EQUAL
54739: PUSH
54740: LD_VAR 0 4
54744: PUSH
54745: LD_INT 1
54747: ARRAY
54748: PUSH
54749: LD_INT 4
54751: ARRAY
54752: PUSH
54753: LD_VAR 0 2
54757: EQUAL
54758: AND
54759: ST_TO_ADDR
// end ;
54760: LD_VAR 0 3
54764: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54765: LD_INT 0
54767: PPUSH
// SetDir ( unit , d ) ;
54768: LD_VAR 0 1
54772: PPUSH
54773: LD_VAR 0 4
54777: PPUSH
54778: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54782: LD_VAR 0 1
54786: PPUSH
54787: LD_VAR 0 2
54791: PPUSH
54792: LD_VAR 0 3
54796: PPUSH
54797: LD_VAR 0 5
54801: PPUSH
54802: CALL_OW 48
// end ;
54806: LD_VAR 0 6
54810: RET
// export function ToNaturalNumber ( number ) ; begin
54811: LD_INT 0
54813: PPUSH
// result := number div 1 ;
54814: LD_ADDR_VAR 0 2
54818: PUSH
54819: LD_VAR 0 1
54823: PUSH
54824: LD_INT 1
54826: DIV
54827: ST_TO_ADDR
// if number < 0 then
54828: LD_VAR 0 1
54832: PUSH
54833: LD_INT 0
54835: LESS
54836: IFFALSE 54846
// result := 0 ;
54838: LD_ADDR_VAR 0 2
54842: PUSH
54843: LD_INT 0
54845: ST_TO_ADDR
// end ;
54846: LD_VAR 0 2
54850: RET
// export function SortByClass ( units , class ) ; var un ; begin
54851: LD_INT 0
54853: PPUSH
54854: PPUSH
// if not units or not class then
54855: LD_VAR 0 1
54859: NOT
54860: PUSH
54861: LD_VAR 0 2
54865: NOT
54866: OR
54867: IFFALSE 54871
// exit ;
54869: GO 54966
// result := [ ] ;
54871: LD_ADDR_VAR 0 3
54875: PUSH
54876: EMPTY
54877: ST_TO_ADDR
// for un in units do
54878: LD_ADDR_VAR 0 4
54882: PUSH
54883: LD_VAR 0 1
54887: PUSH
54888: FOR_IN
54889: IFFALSE 54964
// if GetClass ( un ) = class then
54891: LD_VAR 0 4
54895: PPUSH
54896: CALL_OW 257
54900: PUSH
54901: LD_VAR 0 2
54905: EQUAL
54906: IFFALSE 54933
// result := Insert ( result , 1 , un ) else
54908: LD_ADDR_VAR 0 3
54912: PUSH
54913: LD_VAR 0 3
54917: PPUSH
54918: LD_INT 1
54920: PPUSH
54921: LD_VAR 0 4
54925: PPUSH
54926: CALL_OW 2
54930: ST_TO_ADDR
54931: GO 54962
// result := Replace ( result , result + 1 , un ) ;
54933: LD_ADDR_VAR 0 3
54937: PUSH
54938: LD_VAR 0 3
54942: PPUSH
54943: LD_VAR 0 3
54947: PUSH
54948: LD_INT 1
54950: PLUS
54951: PPUSH
54952: LD_VAR 0 4
54956: PPUSH
54957: CALL_OW 1
54961: ST_TO_ADDR
54962: GO 54888
54964: POP
54965: POP
// end ;
54966: LD_VAR 0 3
54970: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
54971: LD_INT 0
54973: PPUSH
54974: PPUSH
54975: PPUSH
54976: PPUSH
54977: PPUSH
54978: PPUSH
54979: PPUSH
// result := [ ] ;
54980: LD_ADDR_VAR 0 4
54984: PUSH
54985: EMPTY
54986: ST_TO_ADDR
// if x - r < 0 then
54987: LD_VAR 0 1
54991: PUSH
54992: LD_VAR 0 3
54996: MINUS
54997: PUSH
54998: LD_INT 0
55000: LESS
55001: IFFALSE 55013
// min_x := 0 else
55003: LD_ADDR_VAR 0 8
55007: PUSH
55008: LD_INT 0
55010: ST_TO_ADDR
55011: GO 55029
// min_x := x - r ;
55013: LD_ADDR_VAR 0 8
55017: PUSH
55018: LD_VAR 0 1
55022: PUSH
55023: LD_VAR 0 3
55027: MINUS
55028: ST_TO_ADDR
// if y - r < 0 then
55029: LD_VAR 0 2
55033: PUSH
55034: LD_VAR 0 3
55038: MINUS
55039: PUSH
55040: LD_INT 0
55042: LESS
55043: IFFALSE 55055
// min_y := 0 else
55045: LD_ADDR_VAR 0 7
55049: PUSH
55050: LD_INT 0
55052: ST_TO_ADDR
55053: GO 55071
// min_y := y - r ;
55055: LD_ADDR_VAR 0 7
55059: PUSH
55060: LD_VAR 0 2
55064: PUSH
55065: LD_VAR 0 3
55069: MINUS
55070: ST_TO_ADDR
// max_x := x + r ;
55071: LD_ADDR_VAR 0 9
55075: PUSH
55076: LD_VAR 0 1
55080: PUSH
55081: LD_VAR 0 3
55085: PLUS
55086: ST_TO_ADDR
// max_y := y + r ;
55087: LD_ADDR_VAR 0 10
55091: PUSH
55092: LD_VAR 0 2
55096: PUSH
55097: LD_VAR 0 3
55101: PLUS
55102: ST_TO_ADDR
// for _x = min_x to max_x do
55103: LD_ADDR_VAR 0 5
55107: PUSH
55108: DOUBLE
55109: LD_VAR 0 8
55113: DEC
55114: ST_TO_ADDR
55115: LD_VAR 0 9
55119: PUSH
55120: FOR_TO
55121: IFFALSE 55222
// for _y = min_y to max_y do
55123: LD_ADDR_VAR 0 6
55127: PUSH
55128: DOUBLE
55129: LD_VAR 0 7
55133: DEC
55134: ST_TO_ADDR
55135: LD_VAR 0 10
55139: PUSH
55140: FOR_TO
55141: IFFALSE 55218
// begin if not ValidHex ( _x , _y ) then
55143: LD_VAR 0 5
55147: PPUSH
55148: LD_VAR 0 6
55152: PPUSH
55153: CALL_OW 488
55157: NOT
55158: IFFALSE 55162
// continue ;
55160: GO 55140
// if GetResourceTypeXY ( _x , _y ) then
55162: LD_VAR 0 5
55166: PPUSH
55167: LD_VAR 0 6
55171: PPUSH
55172: CALL_OW 283
55176: IFFALSE 55216
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55178: LD_ADDR_VAR 0 4
55182: PUSH
55183: LD_VAR 0 4
55187: PPUSH
55188: LD_VAR 0 4
55192: PUSH
55193: LD_INT 1
55195: PLUS
55196: PPUSH
55197: LD_VAR 0 5
55201: PUSH
55202: LD_VAR 0 6
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PPUSH
55211: CALL_OW 1
55215: ST_TO_ADDR
// end ;
55216: GO 55140
55218: POP
55219: POP
55220: GO 55120
55222: POP
55223: POP
// end ;
55224: LD_VAR 0 4
55228: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55229: LD_INT 0
55231: PPUSH
55232: PPUSH
55233: PPUSH
55234: PPUSH
55235: PPUSH
55236: PPUSH
55237: PPUSH
55238: PPUSH
// if not units then
55239: LD_VAR 0 1
55243: NOT
55244: IFFALSE 55248
// exit ;
55246: GO 55772
// result := UnitFilter ( units , [ f_ok ] ) ;
55248: LD_ADDR_VAR 0 3
55252: PUSH
55253: LD_VAR 0 1
55257: PPUSH
55258: LD_INT 50
55260: PUSH
55261: EMPTY
55262: LIST
55263: PPUSH
55264: CALL_OW 72
55268: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55269: LD_ADDR_VAR 0 8
55273: PUSH
55274: LD_VAR 0 1
55278: PUSH
55279: LD_INT 1
55281: ARRAY
55282: PPUSH
55283: CALL_OW 255
55287: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55288: LD_ADDR_VAR 0 10
55292: PUSH
55293: LD_INT 29
55295: PUSH
55296: LD_INT 91
55298: PUSH
55299: LD_INT 49
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: LIST
55306: ST_TO_ADDR
// if not result then
55307: LD_VAR 0 3
55311: NOT
55312: IFFALSE 55316
// exit ;
55314: GO 55772
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55316: LD_ADDR_VAR 0 5
55320: PUSH
55321: LD_INT 81
55323: PUSH
55324: LD_VAR 0 8
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PPUSH
55333: CALL_OW 69
55337: ST_TO_ADDR
// for i in result do
55338: LD_ADDR_VAR 0 4
55342: PUSH
55343: LD_VAR 0 3
55347: PUSH
55348: FOR_IN
55349: IFFALSE 55770
// begin tag := GetTag ( i ) + 1 ;
55351: LD_ADDR_VAR 0 9
55355: PUSH
55356: LD_VAR 0 4
55360: PPUSH
55361: CALL_OW 110
55365: PUSH
55366: LD_INT 1
55368: PLUS
55369: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55370: LD_ADDR_VAR 0 7
55374: PUSH
55375: LD_VAR 0 4
55379: PPUSH
55380: CALL_OW 250
55384: PPUSH
55385: LD_VAR 0 4
55389: PPUSH
55390: CALL_OW 251
55394: PPUSH
55395: LD_INT 6
55397: PPUSH
55398: CALL 54971 0 3
55402: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55403: LD_VAR 0 4
55407: PPUSH
55408: CALL_OW 247
55412: PUSH
55413: LD_INT 2
55415: EQUAL
55416: PUSH
55417: LD_VAR 0 7
55421: AND
55422: PUSH
55423: LD_VAR 0 4
55427: PPUSH
55428: CALL_OW 264
55432: PUSH
55433: LD_VAR 0 10
55437: IN
55438: NOT
55439: AND
55440: IFFALSE 55479
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55442: LD_VAR 0 4
55446: PPUSH
55447: LD_VAR 0 7
55451: PUSH
55452: LD_INT 1
55454: ARRAY
55455: PUSH
55456: LD_INT 1
55458: ARRAY
55459: PPUSH
55460: LD_VAR 0 7
55464: PUSH
55465: LD_INT 1
55467: ARRAY
55468: PUSH
55469: LD_INT 2
55471: ARRAY
55472: PPUSH
55473: CALL_OW 116
55477: GO 55768
// if path > tag then
55479: LD_VAR 0 2
55483: PUSH
55484: LD_VAR 0 9
55488: GREATER
55489: IFFALSE 55697
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55491: LD_ADDR_VAR 0 6
55495: PUSH
55496: LD_VAR 0 5
55500: PPUSH
55501: LD_INT 91
55503: PUSH
55504: LD_VAR 0 4
55508: PUSH
55509: LD_INT 8
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: PPUSH
55517: CALL_OW 72
55521: ST_TO_ADDR
// if nearEnemy then
55522: LD_VAR 0 6
55526: IFFALSE 55595
// begin if GetWeapon ( i ) = ru_time_lapser then
55528: LD_VAR 0 4
55532: PPUSH
55533: CALL_OW 264
55537: PUSH
55538: LD_INT 49
55540: EQUAL
55541: IFFALSE 55569
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55543: LD_VAR 0 4
55547: PPUSH
55548: LD_VAR 0 6
55552: PPUSH
55553: LD_VAR 0 4
55557: PPUSH
55558: CALL_OW 74
55562: PPUSH
55563: CALL_OW 112
55567: GO 55593
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55569: LD_VAR 0 4
55573: PPUSH
55574: LD_VAR 0 6
55578: PPUSH
55579: LD_VAR 0 4
55583: PPUSH
55584: CALL_OW 74
55588: PPUSH
55589: CALL 56697 0 2
// end else
55593: GO 55695
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55595: LD_VAR 0 4
55599: PPUSH
55600: LD_VAR 0 2
55604: PUSH
55605: LD_VAR 0 9
55609: ARRAY
55610: PUSH
55611: LD_INT 1
55613: ARRAY
55614: PPUSH
55615: LD_VAR 0 2
55619: PUSH
55620: LD_VAR 0 9
55624: ARRAY
55625: PUSH
55626: LD_INT 2
55628: ARRAY
55629: PPUSH
55630: CALL_OW 297
55634: PUSH
55635: LD_INT 6
55637: GREATER
55638: IFFALSE 55681
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55640: LD_VAR 0 4
55644: PPUSH
55645: LD_VAR 0 2
55649: PUSH
55650: LD_VAR 0 9
55654: ARRAY
55655: PUSH
55656: LD_INT 1
55658: ARRAY
55659: PPUSH
55660: LD_VAR 0 2
55664: PUSH
55665: LD_VAR 0 9
55669: ARRAY
55670: PUSH
55671: LD_INT 2
55673: ARRAY
55674: PPUSH
55675: CALL_OW 114
55679: GO 55695
// SetTag ( i , tag ) ;
55681: LD_VAR 0 4
55685: PPUSH
55686: LD_VAR 0 9
55690: PPUSH
55691: CALL_OW 109
// end else
55695: GO 55768
// if enemy then
55697: LD_VAR 0 5
55701: IFFALSE 55768
// begin if GetWeapon ( i ) = ru_time_lapser then
55703: LD_VAR 0 4
55707: PPUSH
55708: CALL_OW 264
55712: PUSH
55713: LD_INT 49
55715: EQUAL
55716: IFFALSE 55744
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55718: LD_VAR 0 4
55722: PPUSH
55723: LD_VAR 0 5
55727: PPUSH
55728: LD_VAR 0 4
55732: PPUSH
55733: CALL_OW 74
55737: PPUSH
55738: CALL_OW 112
55742: GO 55768
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55744: LD_VAR 0 4
55748: PPUSH
55749: LD_VAR 0 5
55753: PPUSH
55754: LD_VAR 0 4
55758: PPUSH
55759: CALL_OW 74
55763: PPUSH
55764: CALL 56697 0 2
// end ; end ;
55768: GO 55348
55770: POP
55771: POP
// end ;
55772: LD_VAR 0 3
55776: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55777: LD_INT 0
55779: PPUSH
55780: PPUSH
55781: PPUSH
// if not unit or IsInUnit ( unit ) then
55782: LD_VAR 0 1
55786: NOT
55787: PUSH
55788: LD_VAR 0 1
55792: PPUSH
55793: CALL_OW 310
55797: OR
55798: IFFALSE 55802
// exit ;
55800: GO 55893
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55802: LD_ADDR_VAR 0 4
55806: PUSH
55807: LD_VAR 0 1
55811: PPUSH
55812: CALL_OW 250
55816: PPUSH
55817: LD_VAR 0 2
55821: PPUSH
55822: LD_INT 1
55824: PPUSH
55825: CALL_OW 272
55829: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55830: LD_ADDR_VAR 0 5
55834: PUSH
55835: LD_VAR 0 1
55839: PPUSH
55840: CALL_OW 251
55844: PPUSH
55845: LD_VAR 0 2
55849: PPUSH
55850: LD_INT 1
55852: PPUSH
55853: CALL_OW 273
55857: ST_TO_ADDR
// if ValidHex ( x , y ) then
55858: LD_VAR 0 4
55862: PPUSH
55863: LD_VAR 0 5
55867: PPUSH
55868: CALL_OW 488
55872: IFFALSE 55893
// ComTurnXY ( unit , x , y ) ;
55874: LD_VAR 0 1
55878: PPUSH
55879: LD_VAR 0 4
55883: PPUSH
55884: LD_VAR 0 5
55888: PPUSH
55889: CALL_OW 118
// end ;
55893: LD_VAR 0 3
55897: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55898: LD_INT 0
55900: PPUSH
55901: PPUSH
// result := false ;
55902: LD_ADDR_VAR 0 3
55906: PUSH
55907: LD_INT 0
55909: ST_TO_ADDR
// if not units then
55910: LD_VAR 0 2
55914: NOT
55915: IFFALSE 55919
// exit ;
55917: GO 55964
// for i in units do
55919: LD_ADDR_VAR 0 4
55923: PUSH
55924: LD_VAR 0 2
55928: PUSH
55929: FOR_IN
55930: IFFALSE 55962
// if See ( side , i ) then
55932: LD_VAR 0 1
55936: PPUSH
55937: LD_VAR 0 4
55941: PPUSH
55942: CALL_OW 292
55946: IFFALSE 55960
// begin result := true ;
55948: LD_ADDR_VAR 0 3
55952: PUSH
55953: LD_INT 1
55955: ST_TO_ADDR
// exit ;
55956: POP
55957: POP
55958: GO 55964
// end ;
55960: GO 55929
55962: POP
55963: POP
// end ;
55964: LD_VAR 0 3
55968: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
55969: LD_INT 0
55971: PPUSH
55972: PPUSH
55973: PPUSH
55974: PPUSH
// if not unit or not points then
55975: LD_VAR 0 1
55979: NOT
55980: PUSH
55981: LD_VAR 0 2
55985: NOT
55986: OR
55987: IFFALSE 55991
// exit ;
55989: GO 56081
// dist := 99999 ;
55991: LD_ADDR_VAR 0 5
55995: PUSH
55996: LD_INT 99999
55998: ST_TO_ADDR
// for i in points do
55999: LD_ADDR_VAR 0 4
56003: PUSH
56004: LD_VAR 0 2
56008: PUSH
56009: FOR_IN
56010: IFFALSE 56079
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56012: LD_ADDR_VAR 0 6
56016: PUSH
56017: LD_VAR 0 1
56021: PPUSH
56022: LD_VAR 0 4
56026: PUSH
56027: LD_INT 1
56029: ARRAY
56030: PPUSH
56031: LD_VAR 0 4
56035: PUSH
56036: LD_INT 2
56038: ARRAY
56039: PPUSH
56040: CALL_OW 297
56044: ST_TO_ADDR
// if tmpDist < dist then
56045: LD_VAR 0 6
56049: PUSH
56050: LD_VAR 0 5
56054: LESS
56055: IFFALSE 56077
// begin result := i ;
56057: LD_ADDR_VAR 0 3
56061: PUSH
56062: LD_VAR 0 4
56066: ST_TO_ADDR
// dist := tmpDist ;
56067: LD_ADDR_VAR 0 5
56071: PUSH
56072: LD_VAR 0 6
56076: ST_TO_ADDR
// end ; end ;
56077: GO 56009
56079: POP
56080: POP
// end ;
56081: LD_VAR 0 3
56085: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56086: LD_INT 0
56088: PPUSH
// uc_side := side ;
56089: LD_ADDR_OWVAR 20
56093: PUSH
56094: LD_VAR 0 1
56098: ST_TO_ADDR
// uc_nation := 3 ;
56099: LD_ADDR_OWVAR 21
56103: PUSH
56104: LD_INT 3
56106: ST_TO_ADDR
// vc_chassis := 25 ;
56107: LD_ADDR_OWVAR 37
56111: PUSH
56112: LD_INT 25
56114: ST_TO_ADDR
// vc_engine := engine_siberite ;
56115: LD_ADDR_OWVAR 39
56119: PUSH
56120: LD_INT 3
56122: ST_TO_ADDR
// vc_control := control_computer ;
56123: LD_ADDR_OWVAR 38
56127: PUSH
56128: LD_INT 3
56130: ST_TO_ADDR
// vc_weapon := 59 ;
56131: LD_ADDR_OWVAR 40
56135: PUSH
56136: LD_INT 59
56138: ST_TO_ADDR
// result := CreateVehicle ;
56139: LD_ADDR_VAR 0 5
56143: PUSH
56144: CALL_OW 45
56148: ST_TO_ADDR
// SetDir ( result , d ) ;
56149: LD_VAR 0 5
56153: PPUSH
56154: LD_VAR 0 4
56158: PPUSH
56159: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56163: LD_VAR 0 5
56167: PPUSH
56168: LD_VAR 0 2
56172: PPUSH
56173: LD_VAR 0 3
56177: PPUSH
56178: LD_INT 0
56180: PPUSH
56181: CALL_OW 48
// end ;
56185: LD_VAR 0 5
56189: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56190: LD_INT 0
56192: PPUSH
56193: PPUSH
56194: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56195: LD_ADDR_VAR 0 2
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56218: LD_VAR 0 1
56222: NOT
56223: PUSH
56224: LD_VAR 0 1
56228: PPUSH
56229: CALL_OW 264
56233: PUSH
56234: LD_INT 12
56236: PUSH
56237: LD_INT 51
56239: PUSH
56240: LD_INT 32
56242: PUSH
56243: LD_INT 89
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: IN
56252: NOT
56253: OR
56254: IFFALSE 56258
// exit ;
56256: GO 56356
// for i := 1 to 3 do
56258: LD_ADDR_VAR 0 3
56262: PUSH
56263: DOUBLE
56264: LD_INT 1
56266: DEC
56267: ST_TO_ADDR
56268: LD_INT 3
56270: PUSH
56271: FOR_TO
56272: IFFALSE 56354
// begin tmp := GetCargo ( cargo , i ) ;
56274: LD_ADDR_VAR 0 4
56278: PUSH
56279: LD_VAR 0 1
56283: PPUSH
56284: LD_VAR 0 3
56288: PPUSH
56289: CALL_OW 289
56293: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56294: LD_ADDR_VAR 0 2
56298: PUSH
56299: LD_VAR 0 2
56303: PPUSH
56304: LD_VAR 0 3
56308: PPUSH
56309: LD_VAR 0 4
56313: PPUSH
56314: CALL_OW 1
56318: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56319: LD_ADDR_VAR 0 2
56323: PUSH
56324: LD_VAR 0 2
56328: PPUSH
56329: LD_INT 4
56331: PPUSH
56332: LD_VAR 0 2
56336: PUSH
56337: LD_INT 4
56339: ARRAY
56340: PUSH
56341: LD_VAR 0 4
56345: PLUS
56346: PPUSH
56347: CALL_OW 1
56351: ST_TO_ADDR
// end ;
56352: GO 56271
56354: POP
56355: POP
// end ;
56356: LD_VAR 0 2
56360: RET
// export function Length ( array ) ; begin
56361: LD_INT 0
56363: PPUSH
// result := array + 0 ;
56364: LD_ADDR_VAR 0 2
56368: PUSH
56369: LD_VAR 0 1
56373: PUSH
56374: LD_INT 0
56376: PLUS
56377: ST_TO_ADDR
// end ;
56378: LD_VAR 0 2
56382: RET
// export function PrepareArray ( array ) ; begin
56383: LD_INT 0
56385: PPUSH
// result := array diff 0 ;
56386: LD_ADDR_VAR 0 2
56390: PUSH
56391: LD_VAR 0 1
56395: PUSH
56396: LD_INT 0
56398: DIFF
56399: ST_TO_ADDR
// if not result [ 1 ] then
56400: LD_VAR 0 2
56404: PUSH
56405: LD_INT 1
56407: ARRAY
56408: NOT
56409: IFFALSE 56429
// result := Delete ( result , 1 ) ;
56411: LD_ADDR_VAR 0 2
56415: PUSH
56416: LD_VAR 0 2
56420: PPUSH
56421: LD_INT 1
56423: PPUSH
56424: CALL_OW 3
56428: ST_TO_ADDR
// end ;
56429: LD_VAR 0 2
56433: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56434: LD_INT 0
56436: PPUSH
56437: PPUSH
56438: PPUSH
56439: PPUSH
// sibRocketRange := 25 ;
56440: LD_ADDR_VAR 0 6
56444: PUSH
56445: LD_INT 25
56447: ST_TO_ADDR
// result := false ;
56448: LD_ADDR_VAR 0 4
56452: PUSH
56453: LD_INT 0
56455: ST_TO_ADDR
// for i := 0 to 5 do
56456: LD_ADDR_VAR 0 5
56460: PUSH
56461: DOUBLE
56462: LD_INT 0
56464: DEC
56465: ST_TO_ADDR
56466: LD_INT 5
56468: PUSH
56469: FOR_TO
56470: IFFALSE 56537
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56472: LD_VAR 0 1
56476: PPUSH
56477: LD_VAR 0 5
56481: PPUSH
56482: LD_VAR 0 6
56486: PPUSH
56487: CALL_OW 272
56491: PPUSH
56492: LD_VAR 0 2
56496: PPUSH
56497: LD_VAR 0 5
56501: PPUSH
56502: LD_VAR 0 6
56506: PPUSH
56507: CALL_OW 273
56511: PPUSH
56512: LD_VAR 0 3
56516: PPUSH
56517: CALL_OW 309
56521: IFFALSE 56535
// begin result := true ;
56523: LD_ADDR_VAR 0 4
56527: PUSH
56528: LD_INT 1
56530: ST_TO_ADDR
// exit ;
56531: POP
56532: POP
56533: GO 56539
// end ;
56535: GO 56469
56537: POP
56538: POP
// end ;
56539: LD_VAR 0 4
56543: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56544: LD_INT 0
56546: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56547: LD_VAR 0 1
56551: PPUSH
56552: LD_VAR 0 2
56556: PPUSH
56557: LD_INT 0
56559: PPUSH
56560: LD_INT 0
56562: PPUSH
56563: LD_INT 1
56565: PPUSH
56566: LD_INT 0
56568: PPUSH
56569: CALL_OW 587
// end ;
56573: LD_VAR 0 3
56577: RET
// export function CenterOnNow ( unit ) ; begin
56578: LD_INT 0
56580: PPUSH
// result := IsInUnit ( unit ) ;
56581: LD_ADDR_VAR 0 2
56585: PUSH
56586: LD_VAR 0 1
56590: PPUSH
56591: CALL_OW 310
56595: ST_TO_ADDR
// if not result then
56596: LD_VAR 0 2
56600: NOT
56601: IFFALSE 56613
// result := unit ;
56603: LD_ADDR_VAR 0 2
56607: PUSH
56608: LD_VAR 0 1
56612: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
56613: LD_VAR 0 1
56617: PPUSH
56618: CALL_OW 87
// end ;
56622: LD_VAR 0 2
56626: RET
// export function ComMoveHex ( unit , hex ) ; begin
56627: LD_INT 0
56629: PPUSH
// if not hex then
56630: LD_VAR 0 2
56634: NOT
56635: IFFALSE 56639
// exit ;
56637: GO 56692
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
56639: LD_VAR 0 2
56643: PUSH
56644: LD_INT 1
56646: ARRAY
56647: PPUSH
56648: LD_VAR 0 2
56652: PUSH
56653: LD_INT 2
56655: ARRAY
56656: PPUSH
56657: CALL_OW 428
56661: IFFALSE 56665
// exit ;
56663: GO 56692
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
56665: LD_VAR 0 1
56669: PPUSH
56670: LD_VAR 0 2
56674: PUSH
56675: LD_INT 1
56677: ARRAY
56678: PPUSH
56679: LD_VAR 0 2
56683: PUSH
56684: LD_INT 2
56686: ARRAY
56687: PPUSH
56688: CALL_OW 111
// end ;
56692: LD_VAR 0 3
56696: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
56697: LD_INT 0
56699: PPUSH
56700: PPUSH
56701: PPUSH
// if not unit or not enemy then
56702: LD_VAR 0 1
56706: NOT
56707: PUSH
56708: LD_VAR 0 2
56712: NOT
56713: OR
56714: IFFALSE 56718
// exit ;
56716: GO 56835
// x := GetX ( enemy ) ;
56718: LD_ADDR_VAR 0 4
56722: PUSH
56723: LD_VAR 0 2
56727: PPUSH
56728: CALL_OW 250
56732: ST_TO_ADDR
// y := GetY ( enemy ) ;
56733: LD_ADDR_VAR 0 5
56737: PUSH
56738: LD_VAR 0 2
56742: PPUSH
56743: CALL_OW 251
56747: ST_TO_ADDR
// if ValidHex ( x , y ) then
56748: LD_VAR 0 4
56752: PPUSH
56753: LD_VAR 0 5
56757: PPUSH
56758: CALL_OW 488
56762: IFFALSE 56835
// if GetType ( enemy ) = unit_building and See ( GetSide ( unit ) , enemy ) then
56764: LD_VAR 0 2
56768: PPUSH
56769: CALL_OW 247
56773: PUSH
56774: LD_INT 3
56776: EQUAL
56777: PUSH
56778: LD_VAR 0 1
56782: PPUSH
56783: CALL_OW 255
56787: PPUSH
56788: LD_VAR 0 2
56792: PPUSH
56793: CALL_OW 292
56797: AND
56798: IFFALSE 56816
// ComAttackUnit ( unit , enemy ) else
56800: LD_VAR 0 1
56804: PPUSH
56805: LD_VAR 0 2
56809: PPUSH
56810: CALL_OW 115
56814: GO 56835
// ComAgressiveMove ( unit , x , y ) ;
56816: LD_VAR 0 1
56820: PPUSH
56821: LD_VAR 0 4
56825: PPUSH
56826: LD_VAR 0 5
56830: PPUSH
56831: CALL_OW 114
// end ; end_of_file end_of_file
56835: LD_VAR 0 3
56839: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
56840: LD_VAR 0 1
56844: PPUSH
56845: LD_VAR 0 2
56849: PPUSH
56850: LD_VAR 0 3
56854: PPUSH
56855: LD_VAR 0 4
56859: PPUSH
56860: LD_VAR 0 5
56864: PPUSH
56865: LD_VAR 0 6
56869: PPUSH
56870: CALL 57054 0 6
// end ;
56874: PPOPN 6
56876: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
56877: LD_INT 0
56879: PPUSH
// begin if not units then
56880: LD_VAR 0 1
56884: NOT
56885: IFFALSE 56889
// exit ;
56887: GO 56889
// end ;
56889: PPOPN 7
56891: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
56892: CALL 56958 0 0
// end ; end_of_file
56896: PPOPN 1
56898: END
// export globalGameSaveCounter ; every 0 0$1 do
56899: GO 56901
56901: DISABLE
// begin enable ;
56902: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
56903: LD_STRING updateTimer(
56905: PUSH
56906: LD_OWVAR 1
56910: STR
56911: PUSH
56912: LD_STRING );
56914: STR
56915: PPUSH
56916: CALL_OW 559
// end ;
56920: END
// every 0 0$1 do
56921: GO 56923
56923: DISABLE
// begin globalGameSaveCounter := 0 ;
56924: LD_ADDR_EXP 37
56928: PUSH
56929: LD_INT 0
56931: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
56932: LD_STRING setGameSaveCounter(0)
56934: PPUSH
56935: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
56939: LD_STRING initStreamRollete();
56941: PPUSH
56942: CALL_OW 559
// InitStreamMode ;
56946: CALL 58272 0 0
// DefineStreamItems ( false ) ;
56950: LD_INT 0
56952: PPUSH
56953: CALL 58736 0 1
// end ;
56957: END
// export function SOS_MapStart ( ) ; begin
56958: LD_INT 0
56960: PPUSH
// if streamModeActive then
56961: LD_EXP 38
56965: IFFALSE 56974
// DefineStreamItems ( true ) ;
56967: LD_INT 1
56969: PPUSH
56970: CALL 58736 0 1
// UpdateLuaVariables ( ) ;
56974: CALL 56991 0 0
// UpdateFactoryWaypoints ( ) ;
56978: CALL 71605 0 0
// UpdateWarehouseGatheringPoints ( ) ;
56982: CALL 71862 0 0
// end ;
56986: LD_VAR 0 1
56990: RET
// function UpdateLuaVariables ( ) ; begin
56991: LD_INT 0
56993: PPUSH
// if globalGameSaveCounter then
56994: LD_EXP 37
56998: IFFALSE 57032
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
57000: LD_ADDR_EXP 37
57004: PUSH
57005: LD_EXP 37
57009: PPUSH
57010: CALL 53986 0 1
57014: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
57015: LD_STRING setGameSaveCounter(
57017: PUSH
57018: LD_EXP 37
57022: STR
57023: PUSH
57024: LD_STRING )
57026: STR
57027: PPUSH
57028: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
57032: LD_STRING setGameDifficulty(
57034: PUSH
57035: LD_OWVAR 67
57039: STR
57040: PUSH
57041: LD_STRING )
57043: STR
57044: PPUSH
57045: CALL_OW 559
// end ;
57049: LD_VAR 0 1
57053: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57054: LD_INT 0
57056: PPUSH
// if p2 = stream_mode then
57057: LD_VAR 0 2
57061: PUSH
57062: LD_INT 100
57064: EQUAL
57065: IFFALSE 58068
// begin if not StreamModeActive then
57067: LD_EXP 38
57071: NOT
57072: IFFALSE 57082
// StreamModeActive := true ;
57074: LD_ADDR_EXP 38
57078: PUSH
57079: LD_INT 1
57081: ST_TO_ADDR
// if p3 = 0 then
57082: LD_VAR 0 3
57086: PUSH
57087: LD_INT 0
57089: EQUAL
57090: IFFALSE 57096
// InitStreamMode ;
57092: CALL 58272 0 0
// if p3 = 1 then
57096: LD_VAR 0 3
57100: PUSH
57101: LD_INT 1
57103: EQUAL
57104: IFFALSE 57114
// sRocket := true ;
57106: LD_ADDR_EXP 43
57110: PUSH
57111: LD_INT 1
57113: ST_TO_ADDR
// if p3 = 2 then
57114: LD_VAR 0 3
57118: PUSH
57119: LD_INT 2
57121: EQUAL
57122: IFFALSE 57132
// sSpeed := true ;
57124: LD_ADDR_EXP 42
57128: PUSH
57129: LD_INT 1
57131: ST_TO_ADDR
// if p3 = 3 then
57132: LD_VAR 0 3
57136: PUSH
57137: LD_INT 3
57139: EQUAL
57140: IFFALSE 57150
// sEngine := true ;
57142: LD_ADDR_EXP 44
57146: PUSH
57147: LD_INT 1
57149: ST_TO_ADDR
// if p3 = 4 then
57150: LD_VAR 0 3
57154: PUSH
57155: LD_INT 4
57157: EQUAL
57158: IFFALSE 57168
// sSpec := true ;
57160: LD_ADDR_EXP 41
57164: PUSH
57165: LD_INT 1
57167: ST_TO_ADDR
// if p3 = 5 then
57168: LD_VAR 0 3
57172: PUSH
57173: LD_INT 5
57175: EQUAL
57176: IFFALSE 57186
// sLevel := true ;
57178: LD_ADDR_EXP 45
57182: PUSH
57183: LD_INT 1
57185: ST_TO_ADDR
// if p3 = 6 then
57186: LD_VAR 0 3
57190: PUSH
57191: LD_INT 6
57193: EQUAL
57194: IFFALSE 57204
// sArmoury := true ;
57196: LD_ADDR_EXP 46
57200: PUSH
57201: LD_INT 1
57203: ST_TO_ADDR
// if p3 = 7 then
57204: LD_VAR 0 3
57208: PUSH
57209: LD_INT 7
57211: EQUAL
57212: IFFALSE 57222
// sRadar := true ;
57214: LD_ADDR_EXP 47
57218: PUSH
57219: LD_INT 1
57221: ST_TO_ADDR
// if p3 = 8 then
57222: LD_VAR 0 3
57226: PUSH
57227: LD_INT 8
57229: EQUAL
57230: IFFALSE 57240
// sBunker := true ;
57232: LD_ADDR_EXP 48
57236: PUSH
57237: LD_INT 1
57239: ST_TO_ADDR
// if p3 = 9 then
57240: LD_VAR 0 3
57244: PUSH
57245: LD_INT 9
57247: EQUAL
57248: IFFALSE 57258
// sHack := true ;
57250: LD_ADDR_EXP 49
57254: PUSH
57255: LD_INT 1
57257: ST_TO_ADDR
// if p3 = 10 then
57258: LD_VAR 0 3
57262: PUSH
57263: LD_INT 10
57265: EQUAL
57266: IFFALSE 57276
// sFire := true ;
57268: LD_ADDR_EXP 50
57272: PUSH
57273: LD_INT 1
57275: ST_TO_ADDR
// if p3 = 11 then
57276: LD_VAR 0 3
57280: PUSH
57281: LD_INT 11
57283: EQUAL
57284: IFFALSE 57294
// sRefresh := true ;
57286: LD_ADDR_EXP 51
57290: PUSH
57291: LD_INT 1
57293: ST_TO_ADDR
// if p3 = 12 then
57294: LD_VAR 0 3
57298: PUSH
57299: LD_INT 12
57301: EQUAL
57302: IFFALSE 57312
// sExp := true ;
57304: LD_ADDR_EXP 52
57308: PUSH
57309: LD_INT 1
57311: ST_TO_ADDR
// if p3 = 13 then
57312: LD_VAR 0 3
57316: PUSH
57317: LD_INT 13
57319: EQUAL
57320: IFFALSE 57330
// sDepot := true ;
57322: LD_ADDR_EXP 53
57326: PUSH
57327: LD_INT 1
57329: ST_TO_ADDR
// if p3 = 14 then
57330: LD_VAR 0 3
57334: PUSH
57335: LD_INT 14
57337: EQUAL
57338: IFFALSE 57348
// sFlag := true ;
57340: LD_ADDR_EXP 54
57344: PUSH
57345: LD_INT 1
57347: ST_TO_ADDR
// if p3 = 15 then
57348: LD_VAR 0 3
57352: PUSH
57353: LD_INT 15
57355: EQUAL
57356: IFFALSE 57366
// sKamikadze := true ;
57358: LD_ADDR_EXP 62
57362: PUSH
57363: LD_INT 1
57365: ST_TO_ADDR
// if p3 = 16 then
57366: LD_VAR 0 3
57370: PUSH
57371: LD_INT 16
57373: EQUAL
57374: IFFALSE 57384
// sTroll := true ;
57376: LD_ADDR_EXP 63
57380: PUSH
57381: LD_INT 1
57383: ST_TO_ADDR
// if p3 = 17 then
57384: LD_VAR 0 3
57388: PUSH
57389: LD_INT 17
57391: EQUAL
57392: IFFALSE 57402
// sSlow := true ;
57394: LD_ADDR_EXP 64
57398: PUSH
57399: LD_INT 1
57401: ST_TO_ADDR
// if p3 = 18 then
57402: LD_VAR 0 3
57406: PUSH
57407: LD_INT 18
57409: EQUAL
57410: IFFALSE 57420
// sLack := true ;
57412: LD_ADDR_EXP 65
57416: PUSH
57417: LD_INT 1
57419: ST_TO_ADDR
// if p3 = 19 then
57420: LD_VAR 0 3
57424: PUSH
57425: LD_INT 19
57427: EQUAL
57428: IFFALSE 57438
// sTank := true ;
57430: LD_ADDR_EXP 67
57434: PUSH
57435: LD_INT 1
57437: ST_TO_ADDR
// if p3 = 20 then
57438: LD_VAR 0 3
57442: PUSH
57443: LD_INT 20
57445: EQUAL
57446: IFFALSE 57456
// sRemote := true ;
57448: LD_ADDR_EXP 68
57452: PUSH
57453: LD_INT 1
57455: ST_TO_ADDR
// if p3 = 21 then
57456: LD_VAR 0 3
57460: PUSH
57461: LD_INT 21
57463: EQUAL
57464: IFFALSE 57474
// sPowell := true ;
57466: LD_ADDR_EXP 69
57470: PUSH
57471: LD_INT 1
57473: ST_TO_ADDR
// if p3 = 22 then
57474: LD_VAR 0 3
57478: PUSH
57479: LD_INT 22
57481: EQUAL
57482: IFFALSE 57492
// sTeleport := true ;
57484: LD_ADDR_EXP 72
57488: PUSH
57489: LD_INT 1
57491: ST_TO_ADDR
// if p3 = 23 then
57492: LD_VAR 0 3
57496: PUSH
57497: LD_INT 23
57499: EQUAL
57500: IFFALSE 57510
// sOilTower := true ;
57502: LD_ADDR_EXP 74
57506: PUSH
57507: LD_INT 1
57509: ST_TO_ADDR
// if p3 = 24 then
57510: LD_VAR 0 3
57514: PUSH
57515: LD_INT 24
57517: EQUAL
57518: IFFALSE 57528
// sShovel := true ;
57520: LD_ADDR_EXP 75
57524: PUSH
57525: LD_INT 1
57527: ST_TO_ADDR
// if p3 = 25 then
57528: LD_VAR 0 3
57532: PUSH
57533: LD_INT 25
57535: EQUAL
57536: IFFALSE 57546
// sSheik := true ;
57538: LD_ADDR_EXP 76
57542: PUSH
57543: LD_INT 1
57545: ST_TO_ADDR
// if p3 = 26 then
57546: LD_VAR 0 3
57550: PUSH
57551: LD_INT 26
57553: EQUAL
57554: IFFALSE 57564
// sEarthquake := true ;
57556: LD_ADDR_EXP 78
57560: PUSH
57561: LD_INT 1
57563: ST_TO_ADDR
// if p3 = 27 then
57564: LD_VAR 0 3
57568: PUSH
57569: LD_INT 27
57571: EQUAL
57572: IFFALSE 57582
// sAI := true ;
57574: LD_ADDR_EXP 79
57578: PUSH
57579: LD_INT 1
57581: ST_TO_ADDR
// if p3 = 28 then
57582: LD_VAR 0 3
57586: PUSH
57587: LD_INT 28
57589: EQUAL
57590: IFFALSE 57600
// sCargo := true ;
57592: LD_ADDR_EXP 82
57596: PUSH
57597: LD_INT 1
57599: ST_TO_ADDR
// if p3 = 29 then
57600: LD_VAR 0 3
57604: PUSH
57605: LD_INT 29
57607: EQUAL
57608: IFFALSE 57618
// sDLaser := true ;
57610: LD_ADDR_EXP 83
57614: PUSH
57615: LD_INT 1
57617: ST_TO_ADDR
// if p3 = 30 then
57618: LD_VAR 0 3
57622: PUSH
57623: LD_INT 30
57625: EQUAL
57626: IFFALSE 57636
// sExchange := true ;
57628: LD_ADDR_EXP 84
57632: PUSH
57633: LD_INT 1
57635: ST_TO_ADDR
// if p3 = 31 then
57636: LD_VAR 0 3
57640: PUSH
57641: LD_INT 31
57643: EQUAL
57644: IFFALSE 57654
// sFac := true ;
57646: LD_ADDR_EXP 85
57650: PUSH
57651: LD_INT 1
57653: ST_TO_ADDR
// if p3 = 32 then
57654: LD_VAR 0 3
57658: PUSH
57659: LD_INT 32
57661: EQUAL
57662: IFFALSE 57672
// sPower := true ;
57664: LD_ADDR_EXP 86
57668: PUSH
57669: LD_INT 1
57671: ST_TO_ADDR
// if p3 = 33 then
57672: LD_VAR 0 3
57676: PUSH
57677: LD_INT 33
57679: EQUAL
57680: IFFALSE 57690
// sRandom := true ;
57682: LD_ADDR_EXP 87
57686: PUSH
57687: LD_INT 1
57689: ST_TO_ADDR
// if p3 = 34 then
57690: LD_VAR 0 3
57694: PUSH
57695: LD_INT 34
57697: EQUAL
57698: IFFALSE 57708
// sShield := true ;
57700: LD_ADDR_EXP 88
57704: PUSH
57705: LD_INT 1
57707: ST_TO_ADDR
// if p3 = 35 then
57708: LD_VAR 0 3
57712: PUSH
57713: LD_INT 35
57715: EQUAL
57716: IFFALSE 57726
// sTime := true ;
57718: LD_ADDR_EXP 89
57722: PUSH
57723: LD_INT 1
57725: ST_TO_ADDR
// if p3 = 36 then
57726: LD_VAR 0 3
57730: PUSH
57731: LD_INT 36
57733: EQUAL
57734: IFFALSE 57744
// sTools := true ;
57736: LD_ADDR_EXP 90
57740: PUSH
57741: LD_INT 1
57743: ST_TO_ADDR
// if p3 = 101 then
57744: LD_VAR 0 3
57748: PUSH
57749: LD_INT 101
57751: EQUAL
57752: IFFALSE 57762
// sSold := true ;
57754: LD_ADDR_EXP 55
57758: PUSH
57759: LD_INT 1
57761: ST_TO_ADDR
// if p3 = 102 then
57762: LD_VAR 0 3
57766: PUSH
57767: LD_INT 102
57769: EQUAL
57770: IFFALSE 57780
// sDiff := true ;
57772: LD_ADDR_EXP 56
57776: PUSH
57777: LD_INT 1
57779: ST_TO_ADDR
// if p3 = 103 then
57780: LD_VAR 0 3
57784: PUSH
57785: LD_INT 103
57787: EQUAL
57788: IFFALSE 57798
// sFog := true ;
57790: LD_ADDR_EXP 59
57794: PUSH
57795: LD_INT 1
57797: ST_TO_ADDR
// if p3 = 104 then
57798: LD_VAR 0 3
57802: PUSH
57803: LD_INT 104
57805: EQUAL
57806: IFFALSE 57816
// sReset := true ;
57808: LD_ADDR_EXP 60
57812: PUSH
57813: LD_INT 1
57815: ST_TO_ADDR
// if p3 = 105 then
57816: LD_VAR 0 3
57820: PUSH
57821: LD_INT 105
57823: EQUAL
57824: IFFALSE 57834
// sSun := true ;
57826: LD_ADDR_EXP 61
57830: PUSH
57831: LD_INT 1
57833: ST_TO_ADDR
// if p3 = 106 then
57834: LD_VAR 0 3
57838: PUSH
57839: LD_INT 106
57841: EQUAL
57842: IFFALSE 57852
// sTiger := true ;
57844: LD_ADDR_EXP 57
57848: PUSH
57849: LD_INT 1
57851: ST_TO_ADDR
// if p3 = 107 then
57852: LD_VAR 0 3
57856: PUSH
57857: LD_INT 107
57859: EQUAL
57860: IFFALSE 57870
// sBomb := true ;
57862: LD_ADDR_EXP 58
57866: PUSH
57867: LD_INT 1
57869: ST_TO_ADDR
// if p3 = 108 then
57870: LD_VAR 0 3
57874: PUSH
57875: LD_INT 108
57877: EQUAL
57878: IFFALSE 57888
// sWound := true ;
57880: LD_ADDR_EXP 66
57884: PUSH
57885: LD_INT 1
57887: ST_TO_ADDR
// if p3 = 109 then
57888: LD_VAR 0 3
57892: PUSH
57893: LD_INT 109
57895: EQUAL
57896: IFFALSE 57906
// sBetray := true ;
57898: LD_ADDR_EXP 70
57902: PUSH
57903: LD_INT 1
57905: ST_TO_ADDR
// if p3 = 110 then
57906: LD_VAR 0 3
57910: PUSH
57911: LD_INT 110
57913: EQUAL
57914: IFFALSE 57924
// sContamin := true ;
57916: LD_ADDR_EXP 71
57920: PUSH
57921: LD_INT 1
57923: ST_TO_ADDR
// if p3 = 111 then
57924: LD_VAR 0 3
57928: PUSH
57929: LD_INT 111
57931: EQUAL
57932: IFFALSE 57942
// sOil := true ;
57934: LD_ADDR_EXP 73
57938: PUSH
57939: LD_INT 1
57941: ST_TO_ADDR
// if p3 = 112 then
57942: LD_VAR 0 3
57946: PUSH
57947: LD_INT 112
57949: EQUAL
57950: IFFALSE 57960
// sStu := true ;
57952: LD_ADDR_EXP 77
57956: PUSH
57957: LD_INT 1
57959: ST_TO_ADDR
// if p3 = 113 then
57960: LD_VAR 0 3
57964: PUSH
57965: LD_INT 113
57967: EQUAL
57968: IFFALSE 57978
// sBazooka := true ;
57970: LD_ADDR_EXP 80
57974: PUSH
57975: LD_INT 1
57977: ST_TO_ADDR
// if p3 = 114 then
57978: LD_VAR 0 3
57982: PUSH
57983: LD_INT 114
57985: EQUAL
57986: IFFALSE 57996
// sMortar := true ;
57988: LD_ADDR_EXP 81
57992: PUSH
57993: LD_INT 1
57995: ST_TO_ADDR
// if p3 = 115 then
57996: LD_VAR 0 3
58000: PUSH
58001: LD_INT 115
58003: EQUAL
58004: IFFALSE 58014
// sRanger := true ;
58006: LD_ADDR_EXP 91
58010: PUSH
58011: LD_INT 1
58013: ST_TO_ADDR
// if p3 = 116 then
58014: LD_VAR 0 3
58018: PUSH
58019: LD_INT 116
58021: EQUAL
58022: IFFALSE 58032
// sComputer := true ;
58024: LD_ADDR_EXP 92
58028: PUSH
58029: LD_INT 1
58031: ST_TO_ADDR
// if p3 = 117 then
58032: LD_VAR 0 3
58036: PUSH
58037: LD_INT 117
58039: EQUAL
58040: IFFALSE 58050
// s30 := true ;
58042: LD_ADDR_EXP 93
58046: PUSH
58047: LD_INT 1
58049: ST_TO_ADDR
// if p3 = 118 then
58050: LD_VAR 0 3
58054: PUSH
58055: LD_INT 118
58057: EQUAL
58058: IFFALSE 58068
// s60 := true ;
58060: LD_ADDR_EXP 94
58064: PUSH
58065: LD_INT 1
58067: ST_TO_ADDR
// end ; if p2 = hack_mode then
58068: LD_VAR 0 2
58072: PUSH
58073: LD_INT 101
58075: EQUAL
58076: IFFALSE 58204
// begin case p3 of 1 :
58078: LD_VAR 0 3
58082: PUSH
58083: LD_INT 1
58085: DOUBLE
58086: EQUAL
58087: IFTRUE 58091
58089: GO 58098
58091: POP
// hHackUnlimitedResources ; 2 :
58092: CALL 70351 0 0
58096: GO 58204
58098: LD_INT 2
58100: DOUBLE
58101: EQUAL
58102: IFTRUE 58106
58104: GO 58113
58106: POP
// hHackSetLevel10 ; 3 :
58107: CALL 70484 0 0
58111: GO 58204
58113: LD_INT 3
58115: DOUBLE
58116: EQUAL
58117: IFTRUE 58121
58119: GO 58128
58121: POP
// hHackSetLevel10YourUnits ; 4 :
58122: CALL 70569 0 0
58126: GO 58204
58128: LD_INT 4
58130: DOUBLE
58131: EQUAL
58132: IFTRUE 58136
58134: GO 58143
58136: POP
// hHackInvincible ; 5 :
58137: CALL 71017 0 0
58141: GO 58204
58143: LD_INT 5
58145: DOUBLE
58146: EQUAL
58147: IFTRUE 58151
58149: GO 58158
58151: POP
// hHackInvisible ; 6 :
58152: CALL 71128 0 0
58156: GO 58204
58158: LD_INT 6
58160: DOUBLE
58161: EQUAL
58162: IFTRUE 58166
58164: GO 58173
58166: POP
// hHackChangeYourSide ; 7 :
58167: CALL 71185 0 0
58171: GO 58204
58173: LD_INT 7
58175: DOUBLE
58176: EQUAL
58177: IFTRUE 58181
58179: GO 58188
58181: POP
// hHackChangeUnitSide ; 8 :
58182: CALL 71227 0 0
58186: GO 58204
58188: LD_INT 8
58190: DOUBLE
58191: EQUAL
58192: IFTRUE 58196
58194: GO 58203
58196: POP
// hHackFog ; end ;
58197: CALL 71328 0 0
58201: GO 58204
58203: POP
// end ; if p2 = game_save_mode then
58204: LD_VAR 0 2
58208: PUSH
58209: LD_INT 102
58211: EQUAL
58212: IFFALSE 58267
// begin if p3 = 1 then
58214: LD_VAR 0 3
58218: PUSH
58219: LD_INT 1
58221: EQUAL
58222: IFFALSE 58234
// globalGameSaveCounter := p4 ;
58224: LD_ADDR_EXP 37
58228: PUSH
58229: LD_VAR 0 4
58233: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
58234: LD_VAR 0 3
58238: PUSH
58239: LD_INT 2
58241: EQUAL
58242: PUSH
58243: LD_EXP 37
58247: AND
58248: IFFALSE 58267
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58250: LD_STRING setGameSaveCounter(
58252: PUSH
58253: LD_EXP 37
58257: STR
58258: PUSH
58259: LD_STRING )
58261: STR
58262: PPUSH
58263: CALL_OW 559
// end ; end ;
58267: LD_VAR 0 7
58271: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
58272: LD_INT 0
58274: PPUSH
// streamModeActive := false ;
58275: LD_ADDR_EXP 38
58279: PUSH
58280: LD_INT 0
58282: ST_TO_ADDR
// normalCounter := 36 ;
58283: LD_ADDR_EXP 39
58287: PUSH
58288: LD_INT 36
58290: ST_TO_ADDR
// hardcoreCounter := 18 ;
58291: LD_ADDR_EXP 40
58295: PUSH
58296: LD_INT 18
58298: ST_TO_ADDR
// sRocket := false ;
58299: LD_ADDR_EXP 43
58303: PUSH
58304: LD_INT 0
58306: ST_TO_ADDR
// sSpeed := false ;
58307: LD_ADDR_EXP 42
58311: PUSH
58312: LD_INT 0
58314: ST_TO_ADDR
// sEngine := false ;
58315: LD_ADDR_EXP 44
58319: PUSH
58320: LD_INT 0
58322: ST_TO_ADDR
// sSpec := false ;
58323: LD_ADDR_EXP 41
58327: PUSH
58328: LD_INT 0
58330: ST_TO_ADDR
// sLevel := false ;
58331: LD_ADDR_EXP 45
58335: PUSH
58336: LD_INT 0
58338: ST_TO_ADDR
// sArmoury := false ;
58339: LD_ADDR_EXP 46
58343: PUSH
58344: LD_INT 0
58346: ST_TO_ADDR
// sRadar := false ;
58347: LD_ADDR_EXP 47
58351: PUSH
58352: LD_INT 0
58354: ST_TO_ADDR
// sBunker := false ;
58355: LD_ADDR_EXP 48
58359: PUSH
58360: LD_INT 0
58362: ST_TO_ADDR
// sHack := false ;
58363: LD_ADDR_EXP 49
58367: PUSH
58368: LD_INT 0
58370: ST_TO_ADDR
// sFire := false ;
58371: LD_ADDR_EXP 50
58375: PUSH
58376: LD_INT 0
58378: ST_TO_ADDR
// sRefresh := false ;
58379: LD_ADDR_EXP 51
58383: PUSH
58384: LD_INT 0
58386: ST_TO_ADDR
// sExp := false ;
58387: LD_ADDR_EXP 52
58391: PUSH
58392: LD_INT 0
58394: ST_TO_ADDR
// sDepot := false ;
58395: LD_ADDR_EXP 53
58399: PUSH
58400: LD_INT 0
58402: ST_TO_ADDR
// sFlag := false ;
58403: LD_ADDR_EXP 54
58407: PUSH
58408: LD_INT 0
58410: ST_TO_ADDR
// sKamikadze := false ;
58411: LD_ADDR_EXP 62
58415: PUSH
58416: LD_INT 0
58418: ST_TO_ADDR
// sTroll := false ;
58419: LD_ADDR_EXP 63
58423: PUSH
58424: LD_INT 0
58426: ST_TO_ADDR
// sSlow := false ;
58427: LD_ADDR_EXP 64
58431: PUSH
58432: LD_INT 0
58434: ST_TO_ADDR
// sLack := false ;
58435: LD_ADDR_EXP 65
58439: PUSH
58440: LD_INT 0
58442: ST_TO_ADDR
// sTank := false ;
58443: LD_ADDR_EXP 67
58447: PUSH
58448: LD_INT 0
58450: ST_TO_ADDR
// sRemote := false ;
58451: LD_ADDR_EXP 68
58455: PUSH
58456: LD_INT 0
58458: ST_TO_ADDR
// sPowell := false ;
58459: LD_ADDR_EXP 69
58463: PUSH
58464: LD_INT 0
58466: ST_TO_ADDR
// sTeleport := false ;
58467: LD_ADDR_EXP 72
58471: PUSH
58472: LD_INT 0
58474: ST_TO_ADDR
// sOilTower := false ;
58475: LD_ADDR_EXP 74
58479: PUSH
58480: LD_INT 0
58482: ST_TO_ADDR
// sShovel := false ;
58483: LD_ADDR_EXP 75
58487: PUSH
58488: LD_INT 0
58490: ST_TO_ADDR
// sSheik := false ;
58491: LD_ADDR_EXP 76
58495: PUSH
58496: LD_INT 0
58498: ST_TO_ADDR
// sEarthquake := false ;
58499: LD_ADDR_EXP 78
58503: PUSH
58504: LD_INT 0
58506: ST_TO_ADDR
// sAI := false ;
58507: LD_ADDR_EXP 79
58511: PUSH
58512: LD_INT 0
58514: ST_TO_ADDR
// sCargo := false ;
58515: LD_ADDR_EXP 82
58519: PUSH
58520: LD_INT 0
58522: ST_TO_ADDR
// sDLaser := false ;
58523: LD_ADDR_EXP 83
58527: PUSH
58528: LD_INT 0
58530: ST_TO_ADDR
// sExchange := false ;
58531: LD_ADDR_EXP 84
58535: PUSH
58536: LD_INT 0
58538: ST_TO_ADDR
// sFac := false ;
58539: LD_ADDR_EXP 85
58543: PUSH
58544: LD_INT 0
58546: ST_TO_ADDR
// sPower := false ;
58547: LD_ADDR_EXP 86
58551: PUSH
58552: LD_INT 0
58554: ST_TO_ADDR
// sRandom := false ;
58555: LD_ADDR_EXP 87
58559: PUSH
58560: LD_INT 0
58562: ST_TO_ADDR
// sShield := false ;
58563: LD_ADDR_EXP 88
58567: PUSH
58568: LD_INT 0
58570: ST_TO_ADDR
// sTime := false ;
58571: LD_ADDR_EXP 89
58575: PUSH
58576: LD_INT 0
58578: ST_TO_ADDR
// sTools := false ;
58579: LD_ADDR_EXP 90
58583: PUSH
58584: LD_INT 0
58586: ST_TO_ADDR
// sSold := false ;
58587: LD_ADDR_EXP 55
58591: PUSH
58592: LD_INT 0
58594: ST_TO_ADDR
// sDiff := false ;
58595: LD_ADDR_EXP 56
58599: PUSH
58600: LD_INT 0
58602: ST_TO_ADDR
// sFog := false ;
58603: LD_ADDR_EXP 59
58607: PUSH
58608: LD_INT 0
58610: ST_TO_ADDR
// sReset := false ;
58611: LD_ADDR_EXP 60
58615: PUSH
58616: LD_INT 0
58618: ST_TO_ADDR
// sSun := false ;
58619: LD_ADDR_EXP 61
58623: PUSH
58624: LD_INT 0
58626: ST_TO_ADDR
// sTiger := false ;
58627: LD_ADDR_EXP 57
58631: PUSH
58632: LD_INT 0
58634: ST_TO_ADDR
// sBomb := false ;
58635: LD_ADDR_EXP 58
58639: PUSH
58640: LD_INT 0
58642: ST_TO_ADDR
// sWound := false ;
58643: LD_ADDR_EXP 66
58647: PUSH
58648: LD_INT 0
58650: ST_TO_ADDR
// sBetray := false ;
58651: LD_ADDR_EXP 70
58655: PUSH
58656: LD_INT 0
58658: ST_TO_ADDR
// sContamin := false ;
58659: LD_ADDR_EXP 71
58663: PUSH
58664: LD_INT 0
58666: ST_TO_ADDR
// sOil := false ;
58667: LD_ADDR_EXP 73
58671: PUSH
58672: LD_INT 0
58674: ST_TO_ADDR
// sStu := false ;
58675: LD_ADDR_EXP 77
58679: PUSH
58680: LD_INT 0
58682: ST_TO_ADDR
// sBazooka := false ;
58683: LD_ADDR_EXP 80
58687: PUSH
58688: LD_INT 0
58690: ST_TO_ADDR
// sMortar := false ;
58691: LD_ADDR_EXP 81
58695: PUSH
58696: LD_INT 0
58698: ST_TO_ADDR
// sRanger := false ;
58699: LD_ADDR_EXP 91
58703: PUSH
58704: LD_INT 0
58706: ST_TO_ADDR
// sComputer := false ;
58707: LD_ADDR_EXP 92
58711: PUSH
58712: LD_INT 0
58714: ST_TO_ADDR
// s30 := false ;
58715: LD_ADDR_EXP 93
58719: PUSH
58720: LD_INT 0
58722: ST_TO_ADDR
// s60 := false ;
58723: LD_ADDR_EXP 94
58727: PUSH
58728: LD_INT 0
58730: ST_TO_ADDR
// end ;
58731: LD_VAR 0 1
58735: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
58736: LD_INT 0
58738: PPUSH
58739: PPUSH
58740: PPUSH
58741: PPUSH
58742: PPUSH
58743: PPUSH
58744: PPUSH
// result := [ ] ;
58745: LD_ADDR_VAR 0 2
58749: PUSH
58750: EMPTY
58751: ST_TO_ADDR
// if campaign_id = 1 then
58752: LD_OWVAR 69
58756: PUSH
58757: LD_INT 1
58759: EQUAL
58760: IFFALSE 61926
// begin case mission_number of 1 :
58762: LD_OWVAR 70
58766: PUSH
58767: LD_INT 1
58769: DOUBLE
58770: EQUAL
58771: IFTRUE 58775
58773: GO 58851
58775: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
58776: LD_ADDR_VAR 0 2
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: LD_INT 4
58786: PUSH
58787: LD_INT 11
58789: PUSH
58790: LD_INT 12
58792: PUSH
58793: LD_INT 15
58795: PUSH
58796: LD_INT 16
58798: PUSH
58799: LD_INT 22
58801: PUSH
58802: LD_INT 23
58804: PUSH
58805: LD_INT 26
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 101
58821: PUSH
58822: LD_INT 102
58824: PUSH
58825: LD_INT 106
58827: PUSH
58828: LD_INT 116
58830: PUSH
58831: LD_INT 117
58833: PUSH
58834: LD_INT 118
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: ST_TO_ADDR
58849: GO 61924
58851: LD_INT 2
58853: DOUBLE
58854: EQUAL
58855: IFTRUE 58859
58857: GO 58943
58859: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
58860: LD_ADDR_VAR 0 2
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: LD_INT 4
58870: PUSH
58871: LD_INT 11
58873: PUSH
58874: LD_INT 12
58876: PUSH
58877: LD_INT 15
58879: PUSH
58880: LD_INT 16
58882: PUSH
58883: LD_INT 22
58885: PUSH
58886: LD_INT 23
58888: PUSH
58889: LD_INT 26
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 101
58905: PUSH
58906: LD_INT 102
58908: PUSH
58909: LD_INT 105
58911: PUSH
58912: LD_INT 106
58914: PUSH
58915: LD_INT 108
58917: PUSH
58918: LD_INT 116
58920: PUSH
58921: LD_INT 117
58923: PUSH
58924: LD_INT 118
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: ST_TO_ADDR
58941: GO 61924
58943: LD_INT 3
58945: DOUBLE
58946: EQUAL
58947: IFTRUE 58951
58949: GO 59039
58951: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
58952: LD_ADDR_VAR 0 2
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: LD_INT 4
58962: PUSH
58963: LD_INT 5
58965: PUSH
58966: LD_INT 11
58968: PUSH
58969: LD_INT 12
58971: PUSH
58972: LD_INT 15
58974: PUSH
58975: LD_INT 16
58977: PUSH
58978: LD_INT 22
58980: PUSH
58981: LD_INT 26
58983: PUSH
58984: LD_INT 36
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 101
59001: PUSH
59002: LD_INT 102
59004: PUSH
59005: LD_INT 105
59007: PUSH
59008: LD_INT 106
59010: PUSH
59011: LD_INT 108
59013: PUSH
59014: LD_INT 116
59016: PUSH
59017: LD_INT 117
59019: PUSH
59020: LD_INT 118
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: ST_TO_ADDR
59037: GO 61924
59039: LD_INT 4
59041: DOUBLE
59042: EQUAL
59043: IFTRUE 59047
59045: GO 59143
59047: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
59048: LD_ADDR_VAR 0 2
59052: PUSH
59053: LD_INT 2
59055: PUSH
59056: LD_INT 4
59058: PUSH
59059: LD_INT 5
59061: PUSH
59062: LD_INT 8
59064: PUSH
59065: LD_INT 11
59067: PUSH
59068: LD_INT 12
59070: PUSH
59071: LD_INT 15
59073: PUSH
59074: LD_INT 16
59076: PUSH
59077: LD_INT 22
59079: PUSH
59080: LD_INT 23
59082: PUSH
59083: LD_INT 26
59085: PUSH
59086: LD_INT 36
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 101
59105: PUSH
59106: LD_INT 102
59108: PUSH
59109: LD_INT 105
59111: PUSH
59112: LD_INT 106
59114: PUSH
59115: LD_INT 108
59117: PUSH
59118: LD_INT 116
59120: PUSH
59121: LD_INT 117
59123: PUSH
59124: LD_INT 118
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: ST_TO_ADDR
59141: GO 61924
59143: LD_INT 5
59145: DOUBLE
59146: EQUAL
59147: IFTRUE 59151
59149: GO 59263
59151: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
59152: LD_ADDR_VAR 0 2
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: LD_INT 4
59162: PUSH
59163: LD_INT 5
59165: PUSH
59166: LD_INT 6
59168: PUSH
59169: LD_INT 8
59171: PUSH
59172: LD_INT 11
59174: PUSH
59175: LD_INT 12
59177: PUSH
59178: LD_INT 15
59180: PUSH
59181: LD_INT 16
59183: PUSH
59184: LD_INT 22
59186: PUSH
59187: LD_INT 23
59189: PUSH
59190: LD_INT 25
59192: PUSH
59193: LD_INT 26
59195: PUSH
59196: LD_INT 36
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 101
59217: PUSH
59218: LD_INT 102
59220: PUSH
59221: LD_INT 105
59223: PUSH
59224: LD_INT 106
59226: PUSH
59227: LD_INT 108
59229: PUSH
59230: LD_INT 109
59232: PUSH
59233: LD_INT 112
59235: PUSH
59236: LD_INT 116
59238: PUSH
59239: LD_INT 117
59241: PUSH
59242: LD_INT 118
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: ST_TO_ADDR
59261: GO 61924
59263: LD_INT 6
59265: DOUBLE
59266: EQUAL
59267: IFTRUE 59271
59269: GO 59403
59271: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
59272: LD_ADDR_VAR 0 2
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: LD_INT 4
59282: PUSH
59283: LD_INT 5
59285: PUSH
59286: LD_INT 6
59288: PUSH
59289: LD_INT 8
59291: PUSH
59292: LD_INT 11
59294: PUSH
59295: LD_INT 12
59297: PUSH
59298: LD_INT 15
59300: PUSH
59301: LD_INT 16
59303: PUSH
59304: LD_INT 20
59306: PUSH
59307: LD_INT 21
59309: PUSH
59310: LD_INT 22
59312: PUSH
59313: LD_INT 23
59315: PUSH
59316: LD_INT 25
59318: PUSH
59319: LD_INT 26
59321: PUSH
59322: LD_INT 30
59324: PUSH
59325: LD_INT 31
59327: PUSH
59328: LD_INT 32
59330: PUSH
59331: LD_INT 36
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 101
59357: PUSH
59358: LD_INT 102
59360: PUSH
59361: LD_INT 105
59363: PUSH
59364: LD_INT 106
59366: PUSH
59367: LD_INT 108
59369: PUSH
59370: LD_INT 109
59372: PUSH
59373: LD_INT 112
59375: PUSH
59376: LD_INT 116
59378: PUSH
59379: LD_INT 117
59381: PUSH
59382: LD_INT 118
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: ST_TO_ADDR
59401: GO 61924
59403: LD_INT 7
59405: DOUBLE
59406: EQUAL
59407: IFTRUE 59411
59409: GO 59523
59411: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
59412: LD_ADDR_VAR 0 2
59416: PUSH
59417: LD_INT 2
59419: PUSH
59420: LD_INT 4
59422: PUSH
59423: LD_INT 5
59425: PUSH
59426: LD_INT 7
59428: PUSH
59429: LD_INT 11
59431: PUSH
59432: LD_INT 12
59434: PUSH
59435: LD_INT 15
59437: PUSH
59438: LD_INT 16
59440: PUSH
59441: LD_INT 20
59443: PUSH
59444: LD_INT 21
59446: PUSH
59447: LD_INT 22
59449: PUSH
59450: LD_INT 23
59452: PUSH
59453: LD_INT 25
59455: PUSH
59456: LD_INT 26
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 101
59477: PUSH
59478: LD_INT 102
59480: PUSH
59481: LD_INT 103
59483: PUSH
59484: LD_INT 105
59486: PUSH
59487: LD_INT 106
59489: PUSH
59490: LD_INT 108
59492: PUSH
59493: LD_INT 112
59495: PUSH
59496: LD_INT 116
59498: PUSH
59499: LD_INT 117
59501: PUSH
59502: LD_INT 118
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: ST_TO_ADDR
59521: GO 61924
59523: LD_INT 8
59525: DOUBLE
59526: EQUAL
59527: IFTRUE 59531
59529: GO 59671
59531: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
59532: LD_ADDR_VAR 0 2
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: LD_INT 4
59542: PUSH
59543: LD_INT 5
59545: PUSH
59546: LD_INT 6
59548: PUSH
59549: LD_INT 7
59551: PUSH
59552: LD_INT 8
59554: PUSH
59555: LD_INT 11
59557: PUSH
59558: LD_INT 12
59560: PUSH
59561: LD_INT 15
59563: PUSH
59564: LD_INT 16
59566: PUSH
59567: LD_INT 20
59569: PUSH
59570: LD_INT 21
59572: PUSH
59573: LD_INT 22
59575: PUSH
59576: LD_INT 23
59578: PUSH
59579: LD_INT 25
59581: PUSH
59582: LD_INT 26
59584: PUSH
59585: LD_INT 30
59587: PUSH
59588: LD_INT 31
59590: PUSH
59591: LD_INT 32
59593: PUSH
59594: LD_INT 36
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 101
59621: PUSH
59622: LD_INT 102
59624: PUSH
59625: LD_INT 103
59627: PUSH
59628: LD_INT 105
59630: PUSH
59631: LD_INT 106
59633: PUSH
59634: LD_INT 108
59636: PUSH
59637: LD_INT 109
59639: PUSH
59640: LD_INT 112
59642: PUSH
59643: LD_INT 116
59645: PUSH
59646: LD_INT 117
59648: PUSH
59649: LD_INT 118
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: ST_TO_ADDR
59669: GO 61924
59671: LD_INT 9
59673: DOUBLE
59674: EQUAL
59675: IFTRUE 59679
59677: GO 59827
59679: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
59680: LD_ADDR_VAR 0 2
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: LD_INT 4
59690: PUSH
59691: LD_INT 5
59693: PUSH
59694: LD_INT 6
59696: PUSH
59697: LD_INT 7
59699: PUSH
59700: LD_INT 8
59702: PUSH
59703: LD_INT 11
59705: PUSH
59706: LD_INT 12
59708: PUSH
59709: LD_INT 15
59711: PUSH
59712: LD_INT 16
59714: PUSH
59715: LD_INT 20
59717: PUSH
59718: LD_INT 21
59720: PUSH
59721: LD_INT 22
59723: PUSH
59724: LD_INT 23
59726: PUSH
59727: LD_INT 25
59729: PUSH
59730: LD_INT 26
59732: PUSH
59733: LD_INT 28
59735: PUSH
59736: LD_INT 30
59738: PUSH
59739: LD_INT 31
59741: PUSH
59742: LD_INT 32
59744: PUSH
59745: LD_INT 36
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 101
59773: PUSH
59774: LD_INT 102
59776: PUSH
59777: LD_INT 103
59779: PUSH
59780: LD_INT 105
59782: PUSH
59783: LD_INT 106
59785: PUSH
59786: LD_INT 108
59788: PUSH
59789: LD_INT 109
59791: PUSH
59792: LD_INT 112
59794: PUSH
59795: LD_INT 114
59797: PUSH
59798: LD_INT 116
59800: PUSH
59801: LD_INT 117
59803: PUSH
59804: LD_INT 118
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: ST_TO_ADDR
59825: GO 61924
59827: LD_INT 10
59829: DOUBLE
59830: EQUAL
59831: IFTRUE 59835
59833: GO 60031
59835: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
59836: LD_ADDR_VAR 0 2
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: LD_INT 4
59846: PUSH
59847: LD_INT 5
59849: PUSH
59850: LD_INT 6
59852: PUSH
59853: LD_INT 7
59855: PUSH
59856: LD_INT 8
59858: PUSH
59859: LD_INT 9
59861: PUSH
59862: LD_INT 10
59864: PUSH
59865: LD_INT 11
59867: PUSH
59868: LD_INT 12
59870: PUSH
59871: LD_INT 13
59873: PUSH
59874: LD_INT 14
59876: PUSH
59877: LD_INT 15
59879: PUSH
59880: LD_INT 16
59882: PUSH
59883: LD_INT 17
59885: PUSH
59886: LD_INT 18
59888: PUSH
59889: LD_INT 19
59891: PUSH
59892: LD_INT 20
59894: PUSH
59895: LD_INT 21
59897: PUSH
59898: LD_INT 22
59900: PUSH
59901: LD_INT 23
59903: PUSH
59904: LD_INT 24
59906: PUSH
59907: LD_INT 25
59909: PUSH
59910: LD_INT 26
59912: PUSH
59913: LD_INT 28
59915: PUSH
59916: LD_INT 30
59918: PUSH
59919: LD_INT 31
59921: PUSH
59922: LD_INT 32
59924: PUSH
59925: LD_INT 36
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 101
59961: PUSH
59962: LD_INT 102
59964: PUSH
59965: LD_INT 103
59967: PUSH
59968: LD_INT 104
59970: PUSH
59971: LD_INT 105
59973: PUSH
59974: LD_INT 106
59976: PUSH
59977: LD_INT 107
59979: PUSH
59980: LD_INT 108
59982: PUSH
59983: LD_INT 109
59985: PUSH
59986: LD_INT 110
59988: PUSH
59989: LD_INT 111
59991: PUSH
59992: LD_INT 112
59994: PUSH
59995: LD_INT 114
59997: PUSH
59998: LD_INT 116
60000: PUSH
60001: LD_INT 117
60003: PUSH
60004: LD_INT 118
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: ST_TO_ADDR
60029: GO 61924
60031: LD_INT 11
60033: DOUBLE
60034: EQUAL
60035: IFTRUE 60039
60037: GO 60243
60039: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
60040: LD_ADDR_VAR 0 2
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: LD_INT 4
60053: PUSH
60054: LD_INT 5
60056: PUSH
60057: LD_INT 6
60059: PUSH
60060: LD_INT 7
60062: PUSH
60063: LD_INT 8
60065: PUSH
60066: LD_INT 9
60068: PUSH
60069: LD_INT 10
60071: PUSH
60072: LD_INT 11
60074: PUSH
60075: LD_INT 12
60077: PUSH
60078: LD_INT 13
60080: PUSH
60081: LD_INT 14
60083: PUSH
60084: LD_INT 15
60086: PUSH
60087: LD_INT 16
60089: PUSH
60090: LD_INT 17
60092: PUSH
60093: LD_INT 18
60095: PUSH
60096: LD_INT 19
60098: PUSH
60099: LD_INT 20
60101: PUSH
60102: LD_INT 21
60104: PUSH
60105: LD_INT 22
60107: PUSH
60108: LD_INT 23
60110: PUSH
60111: LD_INT 24
60113: PUSH
60114: LD_INT 25
60116: PUSH
60117: LD_INT 26
60119: PUSH
60120: LD_INT 28
60122: PUSH
60123: LD_INT 30
60125: PUSH
60126: LD_INT 31
60128: PUSH
60129: LD_INT 32
60131: PUSH
60132: LD_INT 34
60134: PUSH
60135: LD_INT 36
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 101
60173: PUSH
60174: LD_INT 102
60176: PUSH
60177: LD_INT 103
60179: PUSH
60180: LD_INT 104
60182: PUSH
60183: LD_INT 105
60185: PUSH
60186: LD_INT 106
60188: PUSH
60189: LD_INT 107
60191: PUSH
60192: LD_INT 108
60194: PUSH
60195: LD_INT 109
60197: PUSH
60198: LD_INT 110
60200: PUSH
60201: LD_INT 111
60203: PUSH
60204: LD_INT 112
60206: PUSH
60207: LD_INT 114
60209: PUSH
60210: LD_INT 116
60212: PUSH
60213: LD_INT 117
60215: PUSH
60216: LD_INT 118
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: ST_TO_ADDR
60241: GO 61924
60243: LD_INT 12
60245: DOUBLE
60246: EQUAL
60247: IFTRUE 60251
60249: GO 60471
60251: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
60252: LD_ADDR_VAR 0 2
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: LD_INT 4
60268: PUSH
60269: LD_INT 5
60271: PUSH
60272: LD_INT 6
60274: PUSH
60275: LD_INT 7
60277: PUSH
60278: LD_INT 8
60280: PUSH
60281: LD_INT 9
60283: PUSH
60284: LD_INT 10
60286: PUSH
60287: LD_INT 11
60289: PUSH
60290: LD_INT 12
60292: PUSH
60293: LD_INT 13
60295: PUSH
60296: LD_INT 14
60298: PUSH
60299: LD_INT 15
60301: PUSH
60302: LD_INT 16
60304: PUSH
60305: LD_INT 17
60307: PUSH
60308: LD_INT 18
60310: PUSH
60311: LD_INT 19
60313: PUSH
60314: LD_INT 20
60316: PUSH
60317: LD_INT 21
60319: PUSH
60320: LD_INT 22
60322: PUSH
60323: LD_INT 23
60325: PUSH
60326: LD_INT 24
60328: PUSH
60329: LD_INT 25
60331: PUSH
60332: LD_INT 26
60334: PUSH
60335: LD_INT 27
60337: PUSH
60338: LD_INT 28
60340: PUSH
60341: LD_INT 30
60343: PUSH
60344: LD_INT 31
60346: PUSH
60347: LD_INT 32
60349: PUSH
60350: LD_INT 33
60352: PUSH
60353: LD_INT 34
60355: PUSH
60356: LD_INT 36
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 101
60397: PUSH
60398: LD_INT 102
60400: PUSH
60401: LD_INT 103
60403: PUSH
60404: LD_INT 104
60406: PUSH
60407: LD_INT 105
60409: PUSH
60410: LD_INT 106
60412: PUSH
60413: LD_INT 107
60415: PUSH
60416: LD_INT 108
60418: PUSH
60419: LD_INT 109
60421: PUSH
60422: LD_INT 110
60424: PUSH
60425: LD_INT 111
60427: PUSH
60428: LD_INT 112
60430: PUSH
60431: LD_INT 113
60433: PUSH
60434: LD_INT 114
60436: PUSH
60437: LD_INT 116
60439: PUSH
60440: LD_INT 117
60442: PUSH
60443: LD_INT 118
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: ST_TO_ADDR
60469: GO 61924
60471: LD_INT 13
60473: DOUBLE
60474: EQUAL
60475: IFTRUE 60479
60477: GO 60687
60479: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
60480: LD_ADDR_VAR 0 2
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: LD_INT 2
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: LD_INT 4
60496: PUSH
60497: LD_INT 5
60499: PUSH
60500: LD_INT 8
60502: PUSH
60503: LD_INT 9
60505: PUSH
60506: LD_INT 10
60508: PUSH
60509: LD_INT 11
60511: PUSH
60512: LD_INT 12
60514: PUSH
60515: LD_INT 14
60517: PUSH
60518: LD_INT 15
60520: PUSH
60521: LD_INT 16
60523: PUSH
60524: LD_INT 17
60526: PUSH
60527: LD_INT 18
60529: PUSH
60530: LD_INT 19
60532: PUSH
60533: LD_INT 20
60535: PUSH
60536: LD_INT 21
60538: PUSH
60539: LD_INT 22
60541: PUSH
60542: LD_INT 23
60544: PUSH
60545: LD_INT 24
60547: PUSH
60548: LD_INT 25
60550: PUSH
60551: LD_INT 26
60553: PUSH
60554: LD_INT 27
60556: PUSH
60557: LD_INT 28
60559: PUSH
60560: LD_INT 30
60562: PUSH
60563: LD_INT 31
60565: PUSH
60566: LD_INT 32
60568: PUSH
60569: LD_INT 33
60571: PUSH
60572: LD_INT 34
60574: PUSH
60575: LD_INT 36
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 101
60613: PUSH
60614: LD_INT 102
60616: PUSH
60617: LD_INT 103
60619: PUSH
60620: LD_INT 104
60622: PUSH
60623: LD_INT 105
60625: PUSH
60626: LD_INT 106
60628: PUSH
60629: LD_INT 107
60631: PUSH
60632: LD_INT 108
60634: PUSH
60635: LD_INT 109
60637: PUSH
60638: LD_INT 110
60640: PUSH
60641: LD_INT 111
60643: PUSH
60644: LD_INT 112
60646: PUSH
60647: LD_INT 113
60649: PUSH
60650: LD_INT 114
60652: PUSH
60653: LD_INT 116
60655: PUSH
60656: LD_INT 117
60658: PUSH
60659: LD_INT 118
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: ST_TO_ADDR
60685: GO 61924
60687: LD_INT 14
60689: DOUBLE
60690: EQUAL
60691: IFTRUE 60695
60693: GO 60919
60695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
60696: LD_ADDR_VAR 0 2
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: LD_INT 3
60709: PUSH
60710: LD_INT 4
60712: PUSH
60713: LD_INT 5
60715: PUSH
60716: LD_INT 6
60718: PUSH
60719: LD_INT 7
60721: PUSH
60722: LD_INT 8
60724: PUSH
60725: LD_INT 9
60727: PUSH
60728: LD_INT 10
60730: PUSH
60731: LD_INT 11
60733: PUSH
60734: LD_INT 12
60736: PUSH
60737: LD_INT 13
60739: PUSH
60740: LD_INT 14
60742: PUSH
60743: LD_INT 15
60745: PUSH
60746: LD_INT 16
60748: PUSH
60749: LD_INT 17
60751: PUSH
60752: LD_INT 18
60754: PUSH
60755: LD_INT 19
60757: PUSH
60758: LD_INT 20
60760: PUSH
60761: LD_INT 21
60763: PUSH
60764: LD_INT 22
60766: PUSH
60767: LD_INT 23
60769: PUSH
60770: LD_INT 24
60772: PUSH
60773: LD_INT 25
60775: PUSH
60776: LD_INT 26
60778: PUSH
60779: LD_INT 27
60781: PUSH
60782: LD_INT 28
60784: PUSH
60785: LD_INT 29
60787: PUSH
60788: LD_INT 30
60790: PUSH
60791: LD_INT 31
60793: PUSH
60794: LD_INT 32
60796: PUSH
60797: LD_INT 33
60799: PUSH
60800: LD_INT 34
60802: PUSH
60803: LD_INT 36
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 101
60845: PUSH
60846: LD_INT 102
60848: PUSH
60849: LD_INT 103
60851: PUSH
60852: LD_INT 104
60854: PUSH
60855: LD_INT 105
60857: PUSH
60858: LD_INT 106
60860: PUSH
60861: LD_INT 107
60863: PUSH
60864: LD_INT 108
60866: PUSH
60867: LD_INT 109
60869: PUSH
60870: LD_INT 110
60872: PUSH
60873: LD_INT 111
60875: PUSH
60876: LD_INT 112
60878: PUSH
60879: LD_INT 113
60881: PUSH
60882: LD_INT 114
60884: PUSH
60885: LD_INT 116
60887: PUSH
60888: LD_INT 117
60890: PUSH
60891: LD_INT 118
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: ST_TO_ADDR
60917: GO 61924
60919: LD_INT 15
60921: DOUBLE
60922: EQUAL
60923: IFTRUE 60927
60925: GO 61151
60927: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
60928: LD_ADDR_VAR 0 2
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: LD_INT 3
60941: PUSH
60942: LD_INT 4
60944: PUSH
60945: LD_INT 5
60947: PUSH
60948: LD_INT 6
60950: PUSH
60951: LD_INT 7
60953: PUSH
60954: LD_INT 8
60956: PUSH
60957: LD_INT 9
60959: PUSH
60960: LD_INT 10
60962: PUSH
60963: LD_INT 11
60965: PUSH
60966: LD_INT 12
60968: PUSH
60969: LD_INT 13
60971: PUSH
60972: LD_INT 14
60974: PUSH
60975: LD_INT 15
60977: PUSH
60978: LD_INT 16
60980: PUSH
60981: LD_INT 17
60983: PUSH
60984: LD_INT 18
60986: PUSH
60987: LD_INT 19
60989: PUSH
60990: LD_INT 20
60992: PUSH
60993: LD_INT 21
60995: PUSH
60996: LD_INT 22
60998: PUSH
60999: LD_INT 23
61001: PUSH
61002: LD_INT 24
61004: PUSH
61005: LD_INT 25
61007: PUSH
61008: LD_INT 26
61010: PUSH
61011: LD_INT 27
61013: PUSH
61014: LD_INT 28
61016: PUSH
61017: LD_INT 29
61019: PUSH
61020: LD_INT 30
61022: PUSH
61023: LD_INT 31
61025: PUSH
61026: LD_INT 32
61028: PUSH
61029: LD_INT 33
61031: PUSH
61032: LD_INT 34
61034: PUSH
61035: LD_INT 36
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 101
61077: PUSH
61078: LD_INT 102
61080: PUSH
61081: LD_INT 103
61083: PUSH
61084: LD_INT 104
61086: PUSH
61087: LD_INT 105
61089: PUSH
61090: LD_INT 106
61092: PUSH
61093: LD_INT 107
61095: PUSH
61096: LD_INT 108
61098: PUSH
61099: LD_INT 109
61101: PUSH
61102: LD_INT 110
61104: PUSH
61105: LD_INT 111
61107: PUSH
61108: LD_INT 112
61110: PUSH
61111: LD_INT 113
61113: PUSH
61114: LD_INT 114
61116: PUSH
61117: LD_INT 116
61119: PUSH
61120: LD_INT 117
61122: PUSH
61123: LD_INT 118
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: ST_TO_ADDR
61149: GO 61924
61151: LD_INT 16
61153: DOUBLE
61154: EQUAL
61155: IFTRUE 61159
61157: GO 61295
61159: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
61160: LD_ADDR_VAR 0 2
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: LD_INT 4
61170: PUSH
61171: LD_INT 5
61173: PUSH
61174: LD_INT 7
61176: PUSH
61177: LD_INT 11
61179: PUSH
61180: LD_INT 12
61182: PUSH
61183: LD_INT 15
61185: PUSH
61186: LD_INT 16
61188: PUSH
61189: LD_INT 20
61191: PUSH
61192: LD_INT 21
61194: PUSH
61195: LD_INT 22
61197: PUSH
61198: LD_INT 23
61200: PUSH
61201: LD_INT 25
61203: PUSH
61204: LD_INT 26
61206: PUSH
61207: LD_INT 30
61209: PUSH
61210: LD_INT 31
61212: PUSH
61213: LD_INT 32
61215: PUSH
61216: LD_INT 33
61218: PUSH
61219: LD_INT 34
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 101
61245: PUSH
61246: LD_INT 102
61248: PUSH
61249: LD_INT 103
61251: PUSH
61252: LD_INT 106
61254: PUSH
61255: LD_INT 108
61257: PUSH
61258: LD_INT 112
61260: PUSH
61261: LD_INT 113
61263: PUSH
61264: LD_INT 114
61266: PUSH
61267: LD_INT 116
61269: PUSH
61270: LD_INT 117
61272: PUSH
61273: LD_INT 118
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: ST_TO_ADDR
61293: GO 61924
61295: LD_INT 17
61297: DOUBLE
61298: EQUAL
61299: IFTRUE 61303
61301: GO 61527
61303: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
61304: LD_ADDR_VAR 0 2
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 3
61317: PUSH
61318: LD_INT 4
61320: PUSH
61321: LD_INT 5
61323: PUSH
61324: LD_INT 6
61326: PUSH
61327: LD_INT 7
61329: PUSH
61330: LD_INT 8
61332: PUSH
61333: LD_INT 9
61335: PUSH
61336: LD_INT 10
61338: PUSH
61339: LD_INT 11
61341: PUSH
61342: LD_INT 12
61344: PUSH
61345: LD_INT 13
61347: PUSH
61348: LD_INT 14
61350: PUSH
61351: LD_INT 15
61353: PUSH
61354: LD_INT 16
61356: PUSH
61357: LD_INT 17
61359: PUSH
61360: LD_INT 18
61362: PUSH
61363: LD_INT 19
61365: PUSH
61366: LD_INT 20
61368: PUSH
61369: LD_INT 21
61371: PUSH
61372: LD_INT 22
61374: PUSH
61375: LD_INT 23
61377: PUSH
61378: LD_INT 24
61380: PUSH
61381: LD_INT 25
61383: PUSH
61384: LD_INT 26
61386: PUSH
61387: LD_INT 27
61389: PUSH
61390: LD_INT 28
61392: PUSH
61393: LD_INT 29
61395: PUSH
61396: LD_INT 30
61398: PUSH
61399: LD_INT 31
61401: PUSH
61402: LD_INT 32
61404: PUSH
61405: LD_INT 33
61407: PUSH
61408: LD_INT 34
61410: PUSH
61411: LD_INT 36
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 101
61453: PUSH
61454: LD_INT 102
61456: PUSH
61457: LD_INT 103
61459: PUSH
61460: LD_INT 104
61462: PUSH
61463: LD_INT 105
61465: PUSH
61466: LD_INT 106
61468: PUSH
61469: LD_INT 107
61471: PUSH
61472: LD_INT 108
61474: PUSH
61475: LD_INT 109
61477: PUSH
61478: LD_INT 110
61480: PUSH
61481: LD_INT 111
61483: PUSH
61484: LD_INT 112
61486: PUSH
61487: LD_INT 113
61489: PUSH
61490: LD_INT 114
61492: PUSH
61493: LD_INT 116
61495: PUSH
61496: LD_INT 117
61498: PUSH
61499: LD_INT 118
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: ST_TO_ADDR
61525: GO 61924
61527: LD_INT 18
61529: DOUBLE
61530: EQUAL
61531: IFTRUE 61535
61533: GO 61683
61535: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
61536: LD_ADDR_VAR 0 2
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: LD_INT 4
61546: PUSH
61547: LD_INT 5
61549: PUSH
61550: LD_INT 7
61552: PUSH
61553: LD_INT 11
61555: PUSH
61556: LD_INT 12
61558: PUSH
61559: LD_INT 15
61561: PUSH
61562: LD_INT 16
61564: PUSH
61565: LD_INT 20
61567: PUSH
61568: LD_INT 21
61570: PUSH
61571: LD_INT 22
61573: PUSH
61574: LD_INT 23
61576: PUSH
61577: LD_INT 25
61579: PUSH
61580: LD_INT 26
61582: PUSH
61583: LD_INT 30
61585: PUSH
61586: LD_INT 31
61588: PUSH
61589: LD_INT 32
61591: PUSH
61592: LD_INT 33
61594: PUSH
61595: LD_INT 34
61597: PUSH
61598: LD_INT 35
61600: PUSH
61601: LD_INT 36
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 101
61629: PUSH
61630: LD_INT 102
61632: PUSH
61633: LD_INT 103
61635: PUSH
61636: LD_INT 106
61638: PUSH
61639: LD_INT 108
61641: PUSH
61642: LD_INT 112
61644: PUSH
61645: LD_INT 113
61647: PUSH
61648: LD_INT 114
61650: PUSH
61651: LD_INT 115
61653: PUSH
61654: LD_INT 116
61656: PUSH
61657: LD_INT 117
61659: PUSH
61660: LD_INT 118
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: ST_TO_ADDR
61681: GO 61924
61683: LD_INT 19
61685: DOUBLE
61686: EQUAL
61687: IFTRUE 61691
61689: GO 61923
61691: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
61692: LD_ADDR_VAR 0 2
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: LD_INT 2
61702: PUSH
61703: LD_INT 3
61705: PUSH
61706: LD_INT 4
61708: PUSH
61709: LD_INT 5
61711: PUSH
61712: LD_INT 6
61714: PUSH
61715: LD_INT 7
61717: PUSH
61718: LD_INT 8
61720: PUSH
61721: LD_INT 9
61723: PUSH
61724: LD_INT 10
61726: PUSH
61727: LD_INT 11
61729: PUSH
61730: LD_INT 12
61732: PUSH
61733: LD_INT 13
61735: PUSH
61736: LD_INT 14
61738: PUSH
61739: LD_INT 15
61741: PUSH
61742: LD_INT 16
61744: PUSH
61745: LD_INT 17
61747: PUSH
61748: LD_INT 18
61750: PUSH
61751: LD_INT 19
61753: PUSH
61754: LD_INT 20
61756: PUSH
61757: LD_INT 21
61759: PUSH
61760: LD_INT 22
61762: PUSH
61763: LD_INT 23
61765: PUSH
61766: LD_INT 24
61768: PUSH
61769: LD_INT 25
61771: PUSH
61772: LD_INT 26
61774: PUSH
61775: LD_INT 27
61777: PUSH
61778: LD_INT 28
61780: PUSH
61781: LD_INT 29
61783: PUSH
61784: LD_INT 30
61786: PUSH
61787: LD_INT 31
61789: PUSH
61790: LD_INT 32
61792: PUSH
61793: LD_INT 33
61795: PUSH
61796: LD_INT 34
61798: PUSH
61799: LD_INT 35
61801: PUSH
61802: LD_INT 36
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 101
61845: PUSH
61846: LD_INT 102
61848: PUSH
61849: LD_INT 103
61851: PUSH
61852: LD_INT 104
61854: PUSH
61855: LD_INT 105
61857: PUSH
61858: LD_INT 106
61860: PUSH
61861: LD_INT 107
61863: PUSH
61864: LD_INT 108
61866: PUSH
61867: LD_INT 109
61869: PUSH
61870: LD_INT 110
61872: PUSH
61873: LD_INT 111
61875: PUSH
61876: LD_INT 112
61878: PUSH
61879: LD_INT 113
61881: PUSH
61882: LD_INT 114
61884: PUSH
61885: LD_INT 115
61887: PUSH
61888: LD_INT 116
61890: PUSH
61891: LD_INT 117
61893: PUSH
61894: LD_INT 118
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: ST_TO_ADDR
61921: GO 61924
61923: POP
// end else
61924: GO 62155
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
61926: LD_ADDR_VAR 0 2
61930: PUSH
61931: LD_INT 1
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: LD_INT 3
61939: PUSH
61940: LD_INT 4
61942: PUSH
61943: LD_INT 5
61945: PUSH
61946: LD_INT 6
61948: PUSH
61949: LD_INT 7
61951: PUSH
61952: LD_INT 8
61954: PUSH
61955: LD_INT 9
61957: PUSH
61958: LD_INT 10
61960: PUSH
61961: LD_INT 11
61963: PUSH
61964: LD_INT 12
61966: PUSH
61967: LD_INT 13
61969: PUSH
61970: LD_INT 14
61972: PUSH
61973: LD_INT 15
61975: PUSH
61976: LD_INT 16
61978: PUSH
61979: LD_INT 17
61981: PUSH
61982: LD_INT 18
61984: PUSH
61985: LD_INT 19
61987: PUSH
61988: LD_INT 20
61990: PUSH
61991: LD_INT 21
61993: PUSH
61994: LD_INT 22
61996: PUSH
61997: LD_INT 23
61999: PUSH
62000: LD_INT 24
62002: PUSH
62003: LD_INT 25
62005: PUSH
62006: LD_INT 26
62008: PUSH
62009: LD_INT 27
62011: PUSH
62012: LD_INT 28
62014: PUSH
62015: LD_INT 29
62017: PUSH
62018: LD_INT 30
62020: PUSH
62021: LD_INT 31
62023: PUSH
62024: LD_INT 32
62026: PUSH
62027: LD_INT 33
62029: PUSH
62030: LD_INT 34
62032: PUSH
62033: LD_INT 35
62035: PUSH
62036: LD_INT 36
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 101
62079: PUSH
62080: LD_INT 102
62082: PUSH
62083: LD_INT 103
62085: PUSH
62086: LD_INT 104
62088: PUSH
62089: LD_INT 105
62091: PUSH
62092: LD_INT 106
62094: PUSH
62095: LD_INT 107
62097: PUSH
62098: LD_INT 108
62100: PUSH
62101: LD_INT 109
62103: PUSH
62104: LD_INT 110
62106: PUSH
62107: LD_INT 111
62109: PUSH
62110: LD_INT 112
62112: PUSH
62113: LD_INT 113
62115: PUSH
62116: LD_INT 114
62118: PUSH
62119: LD_INT 115
62121: PUSH
62122: LD_INT 116
62124: PUSH
62125: LD_INT 117
62127: PUSH
62128: LD_INT 118
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: ST_TO_ADDR
// if result then
62155: LD_VAR 0 2
62159: IFFALSE 62945
// begin normal :=  ;
62161: LD_ADDR_VAR 0 5
62165: PUSH
62166: LD_STRING 
62168: ST_TO_ADDR
// hardcore :=  ;
62169: LD_ADDR_VAR 0 6
62173: PUSH
62174: LD_STRING 
62176: ST_TO_ADDR
// active :=  ;
62177: LD_ADDR_VAR 0 7
62181: PUSH
62182: LD_STRING 
62184: ST_TO_ADDR
// for i = 1 to normalCounter do
62185: LD_ADDR_VAR 0 8
62189: PUSH
62190: DOUBLE
62191: LD_INT 1
62193: DEC
62194: ST_TO_ADDR
62195: LD_EXP 39
62199: PUSH
62200: FOR_TO
62201: IFFALSE 62302
// begin tmp := 0 ;
62203: LD_ADDR_VAR 0 3
62207: PUSH
62208: LD_STRING 0
62210: ST_TO_ADDR
// if result [ 1 ] then
62211: LD_VAR 0 2
62215: PUSH
62216: LD_INT 1
62218: ARRAY
62219: IFFALSE 62284
// if result [ 1 ] [ 1 ] = i then
62221: LD_VAR 0 2
62225: PUSH
62226: LD_INT 1
62228: ARRAY
62229: PUSH
62230: LD_INT 1
62232: ARRAY
62233: PUSH
62234: LD_VAR 0 8
62238: EQUAL
62239: IFFALSE 62284
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
62241: LD_ADDR_VAR 0 2
62245: PUSH
62246: LD_VAR 0 2
62250: PPUSH
62251: LD_INT 1
62253: PPUSH
62254: LD_VAR 0 2
62258: PUSH
62259: LD_INT 1
62261: ARRAY
62262: PPUSH
62263: LD_INT 1
62265: PPUSH
62266: CALL_OW 3
62270: PPUSH
62271: CALL_OW 1
62275: ST_TO_ADDR
// tmp := 1 ;
62276: LD_ADDR_VAR 0 3
62280: PUSH
62281: LD_STRING 1
62283: ST_TO_ADDR
// end ; normal := normal & tmp ;
62284: LD_ADDR_VAR 0 5
62288: PUSH
62289: LD_VAR 0 5
62293: PUSH
62294: LD_VAR 0 3
62298: STR
62299: ST_TO_ADDR
// end ;
62300: GO 62200
62302: POP
62303: POP
// for i = 1 to hardcoreCounter do
62304: LD_ADDR_VAR 0 8
62308: PUSH
62309: DOUBLE
62310: LD_INT 1
62312: DEC
62313: ST_TO_ADDR
62314: LD_EXP 40
62318: PUSH
62319: FOR_TO
62320: IFFALSE 62425
// begin tmp := 0 ;
62322: LD_ADDR_VAR 0 3
62326: PUSH
62327: LD_STRING 0
62329: ST_TO_ADDR
// if result [ 2 ] then
62330: LD_VAR 0 2
62334: PUSH
62335: LD_INT 2
62337: ARRAY
62338: IFFALSE 62407
// if result [ 2 ] [ 1 ] = 100 + i then
62340: LD_VAR 0 2
62344: PUSH
62345: LD_INT 2
62347: ARRAY
62348: PUSH
62349: LD_INT 1
62351: ARRAY
62352: PUSH
62353: LD_INT 100
62355: PUSH
62356: LD_VAR 0 8
62360: PLUS
62361: EQUAL
62362: IFFALSE 62407
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
62364: LD_ADDR_VAR 0 2
62368: PUSH
62369: LD_VAR 0 2
62373: PPUSH
62374: LD_INT 2
62376: PPUSH
62377: LD_VAR 0 2
62381: PUSH
62382: LD_INT 2
62384: ARRAY
62385: PPUSH
62386: LD_INT 1
62388: PPUSH
62389: CALL_OW 3
62393: PPUSH
62394: CALL_OW 1
62398: ST_TO_ADDR
// tmp := 1 ;
62399: LD_ADDR_VAR 0 3
62403: PUSH
62404: LD_STRING 1
62406: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
62407: LD_ADDR_VAR 0 6
62411: PUSH
62412: LD_VAR 0 6
62416: PUSH
62417: LD_VAR 0 3
62421: STR
62422: ST_TO_ADDR
// end ;
62423: GO 62319
62425: POP
62426: POP
// if isGameLoad then
62427: LD_VAR 0 1
62431: IFFALSE 62906
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
62433: LD_ADDR_VAR 0 4
62437: PUSH
62438: LD_EXP 43
62442: PUSH
62443: LD_EXP 42
62447: PUSH
62448: LD_EXP 44
62452: PUSH
62453: LD_EXP 41
62457: PUSH
62458: LD_EXP 45
62462: PUSH
62463: LD_EXP 46
62467: PUSH
62468: LD_EXP 47
62472: PUSH
62473: LD_EXP 48
62477: PUSH
62478: LD_EXP 49
62482: PUSH
62483: LD_EXP 50
62487: PUSH
62488: LD_EXP 51
62492: PUSH
62493: LD_EXP 52
62497: PUSH
62498: LD_EXP 53
62502: PUSH
62503: LD_EXP 54
62507: PUSH
62508: LD_EXP 62
62512: PUSH
62513: LD_EXP 63
62517: PUSH
62518: LD_EXP 64
62522: PUSH
62523: LD_EXP 65
62527: PUSH
62528: LD_EXP 67
62532: PUSH
62533: LD_EXP 68
62537: PUSH
62538: LD_EXP 69
62542: PUSH
62543: LD_EXP 72
62547: PUSH
62548: LD_EXP 74
62552: PUSH
62553: LD_EXP 75
62557: PUSH
62558: LD_EXP 76
62562: PUSH
62563: LD_EXP 78
62567: PUSH
62568: LD_EXP 79
62572: PUSH
62573: LD_EXP 82
62577: PUSH
62578: LD_EXP 83
62582: PUSH
62583: LD_EXP 84
62587: PUSH
62588: LD_EXP 85
62592: PUSH
62593: LD_EXP 86
62597: PUSH
62598: LD_EXP 87
62602: PUSH
62603: LD_EXP 88
62607: PUSH
62608: LD_EXP 89
62612: PUSH
62613: LD_EXP 90
62617: PUSH
62618: LD_EXP 55
62622: PUSH
62623: LD_EXP 56
62627: PUSH
62628: LD_EXP 59
62632: PUSH
62633: LD_EXP 60
62637: PUSH
62638: LD_EXP 61
62642: PUSH
62643: LD_EXP 57
62647: PUSH
62648: LD_EXP 58
62652: PUSH
62653: LD_EXP 66
62657: PUSH
62658: LD_EXP 70
62662: PUSH
62663: LD_EXP 71
62667: PUSH
62668: LD_EXP 73
62672: PUSH
62673: LD_EXP 77
62677: PUSH
62678: LD_EXP 80
62682: PUSH
62683: LD_EXP 81
62687: PUSH
62688: LD_EXP 91
62692: PUSH
62693: LD_EXP 92
62697: PUSH
62698: LD_EXP 93
62702: PUSH
62703: LD_EXP 94
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: ST_TO_ADDR
// tmp :=  ;
62764: LD_ADDR_VAR 0 3
62768: PUSH
62769: LD_STRING 
62771: ST_TO_ADDR
// for i = 1 to normalCounter do
62772: LD_ADDR_VAR 0 8
62776: PUSH
62777: DOUBLE
62778: LD_INT 1
62780: DEC
62781: ST_TO_ADDR
62782: LD_EXP 39
62786: PUSH
62787: FOR_TO
62788: IFFALSE 62824
// begin if flags [ i ] then
62790: LD_VAR 0 4
62794: PUSH
62795: LD_VAR 0 8
62799: ARRAY
62800: IFFALSE 62822
// tmp := tmp & i & ; ;
62802: LD_ADDR_VAR 0 3
62806: PUSH
62807: LD_VAR 0 3
62811: PUSH
62812: LD_VAR 0 8
62816: STR
62817: PUSH
62818: LD_STRING ;
62820: STR
62821: ST_TO_ADDR
// end ;
62822: GO 62787
62824: POP
62825: POP
// for i = 1 to hardcoreCounter do
62826: LD_ADDR_VAR 0 8
62830: PUSH
62831: DOUBLE
62832: LD_INT 1
62834: DEC
62835: ST_TO_ADDR
62836: LD_EXP 40
62840: PUSH
62841: FOR_TO
62842: IFFALSE 62888
// begin if flags [ normalCounter + i ] then
62844: LD_VAR 0 4
62848: PUSH
62849: LD_EXP 39
62853: PUSH
62854: LD_VAR 0 8
62858: PLUS
62859: ARRAY
62860: IFFALSE 62886
// tmp := tmp & ( 100 + i ) & ; ;
62862: LD_ADDR_VAR 0 3
62866: PUSH
62867: LD_VAR 0 3
62871: PUSH
62872: LD_INT 100
62874: PUSH
62875: LD_VAR 0 8
62879: PLUS
62880: STR
62881: PUSH
62882: LD_STRING ;
62884: STR
62885: ST_TO_ADDR
// end ;
62886: GO 62841
62888: POP
62889: POP
// if tmp then
62890: LD_VAR 0 3
62894: IFFALSE 62906
// active := tmp ;
62896: LD_ADDR_VAR 0 7
62900: PUSH
62901: LD_VAR 0 3
62905: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
62906: LD_STRING getStreamItemsFromMission("
62908: PUSH
62909: LD_VAR 0 5
62913: STR
62914: PUSH
62915: LD_STRING ","
62917: STR
62918: PUSH
62919: LD_VAR 0 6
62923: STR
62924: PUSH
62925: LD_STRING ","
62927: STR
62928: PUSH
62929: LD_VAR 0 7
62933: STR
62934: PUSH
62935: LD_STRING ")
62937: STR
62938: PPUSH
62939: CALL_OW 559
// end else
62943: GO 62952
// ToLua ( getStreamItemsFromMission("","","") ) ;
62945: LD_STRING getStreamItemsFromMission("","","")
62947: PPUSH
62948: CALL_OW 559
// end ;
62952: LD_VAR 0 2
62956: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
62957: LD_EXP 38
62961: PUSH
62962: LD_EXP 43
62966: AND
62967: IFFALSE 63091
62969: GO 62971
62971: DISABLE
62972: LD_INT 0
62974: PPUSH
62975: PPUSH
// begin enable ;
62976: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
62977: LD_ADDR_VAR 0 2
62981: PUSH
62982: LD_INT 22
62984: PUSH
62985: LD_OWVAR 2
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 2
62996: PUSH
62997: LD_INT 34
62999: PUSH
63000: LD_INT 7
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 34
63009: PUSH
63010: LD_INT 45
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 34
63019: PUSH
63020: LD_INT 28
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 34
63029: PUSH
63030: LD_INT 47
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PPUSH
63048: CALL_OW 69
63052: ST_TO_ADDR
// if not tmp then
63053: LD_VAR 0 2
63057: NOT
63058: IFFALSE 63062
// exit ;
63060: GO 63091
// for i in tmp do
63062: LD_ADDR_VAR 0 1
63066: PUSH
63067: LD_VAR 0 2
63071: PUSH
63072: FOR_IN
63073: IFFALSE 63089
// begin SetLives ( i , 0 ) ;
63075: LD_VAR 0 1
63079: PPUSH
63080: LD_INT 0
63082: PPUSH
63083: CALL_OW 234
// end ;
63087: GO 63072
63089: POP
63090: POP
// end ;
63091: PPOPN 2
63093: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63094: LD_EXP 38
63098: PUSH
63099: LD_EXP 44
63103: AND
63104: IFFALSE 63188
63106: GO 63108
63108: DISABLE
63109: LD_INT 0
63111: PPUSH
63112: PPUSH
// begin enable ;
63113: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63114: LD_ADDR_VAR 0 2
63118: PUSH
63119: LD_INT 22
63121: PUSH
63122: LD_OWVAR 2
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 32
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PPUSH
63145: CALL_OW 69
63149: ST_TO_ADDR
// if not tmp then
63150: LD_VAR 0 2
63154: NOT
63155: IFFALSE 63159
// exit ;
63157: GO 63188
// for i in tmp do
63159: LD_ADDR_VAR 0 1
63163: PUSH
63164: LD_VAR 0 2
63168: PUSH
63169: FOR_IN
63170: IFFALSE 63186
// begin SetLives ( i , 0 ) ;
63172: LD_VAR 0 1
63176: PPUSH
63177: LD_INT 0
63179: PPUSH
63180: CALL_OW 234
// end ;
63184: GO 63169
63186: POP
63187: POP
// end ;
63188: PPOPN 2
63190: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
63191: LD_EXP 38
63195: PUSH
63196: LD_EXP 41
63200: AND
63201: IFFALSE 63294
63203: GO 63205
63205: DISABLE
63206: LD_INT 0
63208: PPUSH
// begin enable ;
63209: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
63210: LD_ADDR_VAR 0 1
63214: PUSH
63215: LD_INT 22
63217: PUSH
63218: LD_OWVAR 2
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: PUSH
63230: LD_INT 25
63232: PUSH
63233: LD_INT 5
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 25
63242: PUSH
63243: LD_INT 9
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 25
63252: PUSH
63253: LD_INT 8
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PPUSH
63270: CALL_OW 69
63274: PUSH
63275: FOR_IN
63276: IFFALSE 63292
// begin SetClass ( i , 1 ) ;
63278: LD_VAR 0 1
63282: PPUSH
63283: LD_INT 1
63285: PPUSH
63286: CALL_OW 336
// end ;
63290: GO 63275
63292: POP
63293: POP
// end ;
63294: PPOPN 1
63296: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
63297: LD_EXP 38
63301: PUSH
63302: LD_EXP 42
63306: AND
63307: PUSH
63308: LD_OWVAR 65
63312: PUSH
63313: LD_INT 7
63315: LESS
63316: AND
63317: IFFALSE 63331
63319: GO 63321
63321: DISABLE
// begin enable ;
63322: ENABLE
// game_speed := 7 ;
63323: LD_ADDR_OWVAR 65
63327: PUSH
63328: LD_INT 7
63330: ST_TO_ADDR
// end ;
63331: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
63332: LD_EXP 38
63336: PUSH
63337: LD_EXP 45
63341: AND
63342: IFFALSE 63544
63344: GO 63346
63346: DISABLE
63347: LD_INT 0
63349: PPUSH
63350: PPUSH
63351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63352: LD_ADDR_VAR 0 3
63356: PUSH
63357: LD_INT 81
63359: PUSH
63360: LD_OWVAR 2
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 21
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PPUSH
63383: CALL_OW 69
63387: ST_TO_ADDR
// if not tmp then
63388: LD_VAR 0 3
63392: NOT
63393: IFFALSE 63397
// exit ;
63395: GO 63544
// if tmp > 5 then
63397: LD_VAR 0 3
63401: PUSH
63402: LD_INT 5
63404: GREATER
63405: IFFALSE 63417
// k := 5 else
63407: LD_ADDR_VAR 0 2
63411: PUSH
63412: LD_INT 5
63414: ST_TO_ADDR
63415: GO 63427
// k := tmp ;
63417: LD_ADDR_VAR 0 2
63421: PUSH
63422: LD_VAR 0 3
63426: ST_TO_ADDR
// for i := 1 to k do
63427: LD_ADDR_VAR 0 1
63431: PUSH
63432: DOUBLE
63433: LD_INT 1
63435: DEC
63436: ST_TO_ADDR
63437: LD_VAR 0 2
63441: PUSH
63442: FOR_TO
63443: IFFALSE 63542
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
63445: LD_VAR 0 3
63449: PUSH
63450: LD_VAR 0 1
63454: ARRAY
63455: PPUSH
63456: LD_VAR 0 1
63460: PUSH
63461: LD_INT 4
63463: MOD
63464: PUSH
63465: LD_INT 1
63467: PLUS
63468: PPUSH
63469: CALL_OW 259
63473: PUSH
63474: LD_INT 10
63476: LESS
63477: IFFALSE 63540
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
63479: LD_VAR 0 3
63483: PUSH
63484: LD_VAR 0 1
63488: ARRAY
63489: PPUSH
63490: LD_VAR 0 1
63494: PUSH
63495: LD_INT 4
63497: MOD
63498: PUSH
63499: LD_INT 1
63501: PLUS
63502: PPUSH
63503: LD_VAR 0 3
63507: PUSH
63508: LD_VAR 0 1
63512: ARRAY
63513: PPUSH
63514: LD_VAR 0 1
63518: PUSH
63519: LD_INT 4
63521: MOD
63522: PUSH
63523: LD_INT 1
63525: PLUS
63526: PPUSH
63527: CALL_OW 259
63531: PUSH
63532: LD_INT 1
63534: PLUS
63535: PPUSH
63536: CALL_OW 237
63540: GO 63442
63542: POP
63543: POP
// end ;
63544: PPOPN 3
63546: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
63547: LD_EXP 38
63551: PUSH
63552: LD_EXP 46
63556: AND
63557: IFFALSE 63577
63559: GO 63561
63561: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
63562: LD_INT 4
63564: PPUSH
63565: LD_OWVAR 2
63569: PPUSH
63570: LD_INT 0
63572: PPUSH
63573: CALL_OW 324
63577: END
// every 0 0$1 trigger StreamModeActive and sShovel do
63578: LD_EXP 38
63582: PUSH
63583: LD_EXP 75
63587: AND
63588: IFFALSE 63608
63590: GO 63592
63592: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
63593: LD_INT 19
63595: PPUSH
63596: LD_OWVAR 2
63600: PPUSH
63601: LD_INT 0
63603: PPUSH
63604: CALL_OW 324
63608: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
63609: LD_EXP 38
63613: PUSH
63614: LD_EXP 47
63618: AND
63619: IFFALSE 63721
63621: GO 63623
63623: DISABLE
63624: LD_INT 0
63626: PPUSH
63627: PPUSH
// begin enable ;
63628: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
63629: LD_ADDR_VAR 0 2
63633: PUSH
63634: LD_INT 22
63636: PUSH
63637: LD_OWVAR 2
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: LD_INT 34
63651: PUSH
63652: LD_INT 11
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 34
63661: PUSH
63662: LD_INT 30
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: LIST
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PPUSH
63678: CALL_OW 69
63682: ST_TO_ADDR
// if not tmp then
63683: LD_VAR 0 2
63687: NOT
63688: IFFALSE 63692
// exit ;
63690: GO 63721
// for i in tmp do
63692: LD_ADDR_VAR 0 1
63696: PUSH
63697: LD_VAR 0 2
63701: PUSH
63702: FOR_IN
63703: IFFALSE 63719
// begin SetLives ( i , 0 ) ;
63705: LD_VAR 0 1
63709: PPUSH
63710: LD_INT 0
63712: PPUSH
63713: CALL_OW 234
// end ;
63717: GO 63702
63719: POP
63720: POP
// end ;
63721: PPOPN 2
63723: END
// every 0 0$1 trigger StreamModeActive and sBunker do
63724: LD_EXP 38
63728: PUSH
63729: LD_EXP 48
63733: AND
63734: IFFALSE 63754
63736: GO 63738
63738: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
63739: LD_INT 32
63741: PPUSH
63742: LD_OWVAR 2
63746: PPUSH
63747: LD_INT 0
63749: PPUSH
63750: CALL_OW 324
63754: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
63755: LD_EXP 38
63759: PUSH
63760: LD_EXP 49
63764: AND
63765: IFFALSE 63946
63767: GO 63769
63769: DISABLE
63770: LD_INT 0
63772: PPUSH
63773: PPUSH
63774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
63775: LD_ADDR_VAR 0 2
63779: PUSH
63780: LD_INT 22
63782: PUSH
63783: LD_OWVAR 2
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 33
63794: PUSH
63795: LD_INT 3
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PPUSH
63806: CALL_OW 69
63810: ST_TO_ADDR
// if not tmp then
63811: LD_VAR 0 2
63815: NOT
63816: IFFALSE 63820
// exit ;
63818: GO 63946
// side := 0 ;
63820: LD_ADDR_VAR 0 3
63824: PUSH
63825: LD_INT 0
63827: ST_TO_ADDR
// for i := 1 to 8 do
63828: LD_ADDR_VAR 0 1
63832: PUSH
63833: DOUBLE
63834: LD_INT 1
63836: DEC
63837: ST_TO_ADDR
63838: LD_INT 8
63840: PUSH
63841: FOR_TO
63842: IFFALSE 63890
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
63844: LD_OWVAR 2
63848: PUSH
63849: LD_VAR 0 1
63853: NONEQUAL
63854: PUSH
63855: LD_OWVAR 2
63859: PPUSH
63860: LD_VAR 0 1
63864: PPUSH
63865: CALL_OW 81
63869: PUSH
63870: LD_INT 2
63872: EQUAL
63873: AND
63874: IFFALSE 63888
// begin side := i ;
63876: LD_ADDR_VAR 0 3
63880: PUSH
63881: LD_VAR 0 1
63885: ST_TO_ADDR
// break ;
63886: GO 63890
// end ;
63888: GO 63841
63890: POP
63891: POP
// if not side then
63892: LD_VAR 0 3
63896: NOT
63897: IFFALSE 63901
// exit ;
63899: GO 63946
// for i := 1 to tmp do
63901: LD_ADDR_VAR 0 1
63905: PUSH
63906: DOUBLE
63907: LD_INT 1
63909: DEC
63910: ST_TO_ADDR
63911: LD_VAR 0 2
63915: PUSH
63916: FOR_TO
63917: IFFALSE 63944
// if Prob ( 60 ) then
63919: LD_INT 60
63921: PPUSH
63922: CALL_OW 13
63926: IFFALSE 63942
// SetSide ( i , side ) ;
63928: LD_VAR 0 1
63932: PPUSH
63933: LD_VAR 0 3
63937: PPUSH
63938: CALL_OW 235
63942: GO 63916
63944: POP
63945: POP
// end ;
63946: PPOPN 3
63948: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
63949: LD_EXP 38
63953: PUSH
63954: LD_EXP 51
63958: AND
63959: IFFALSE 64078
63961: GO 63963
63963: DISABLE
63964: LD_INT 0
63966: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
63967: LD_ADDR_VAR 0 1
63971: PUSH
63972: LD_INT 22
63974: PUSH
63975: LD_OWVAR 2
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 21
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 3
63996: PUSH
63997: LD_INT 23
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: LIST
64015: PPUSH
64016: CALL_OW 69
64020: PUSH
64021: FOR_IN
64022: IFFALSE 64076
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64024: LD_VAR 0 1
64028: PPUSH
64029: CALL_OW 257
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: LD_INT 2
64039: PUSH
64040: LD_INT 3
64042: PUSH
64043: LD_INT 4
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: IN
64052: IFFALSE 64074
// SetClass ( un , rand ( 1 , 4 ) ) ;
64054: LD_VAR 0 1
64058: PPUSH
64059: LD_INT 1
64061: PPUSH
64062: LD_INT 4
64064: PPUSH
64065: CALL_OW 12
64069: PPUSH
64070: CALL_OW 336
64074: GO 64021
64076: POP
64077: POP
// end ;
64078: PPOPN 1
64080: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64081: LD_EXP 38
64085: PUSH
64086: LD_EXP 50
64090: AND
64091: IFFALSE 64170
64093: GO 64095
64095: DISABLE
64096: LD_INT 0
64098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64099: LD_ADDR_VAR 0 1
64103: PUSH
64104: LD_INT 22
64106: PUSH
64107: LD_OWVAR 2
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 21
64118: PUSH
64119: LD_INT 3
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PPUSH
64130: CALL_OW 69
64134: ST_TO_ADDR
// if not tmp then
64135: LD_VAR 0 1
64139: NOT
64140: IFFALSE 64144
// exit ;
64142: GO 64170
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
64144: LD_VAR 0 1
64148: PUSH
64149: LD_INT 1
64151: PPUSH
64152: LD_VAR 0 1
64156: PPUSH
64157: CALL_OW 12
64161: ARRAY
64162: PPUSH
64163: LD_INT 100
64165: PPUSH
64166: CALL_OW 234
// end ;
64170: PPOPN 1
64172: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
64173: LD_EXP 38
64177: PUSH
64178: LD_EXP 52
64182: AND
64183: IFFALSE 64281
64185: GO 64187
64187: DISABLE
64188: LD_INT 0
64190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64191: LD_ADDR_VAR 0 1
64195: PUSH
64196: LD_INT 22
64198: PUSH
64199: LD_OWVAR 2
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 21
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PPUSH
64222: CALL_OW 69
64226: ST_TO_ADDR
// if not tmp then
64227: LD_VAR 0 1
64231: NOT
64232: IFFALSE 64236
// exit ;
64234: GO 64281
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
64236: LD_VAR 0 1
64240: PUSH
64241: LD_INT 1
64243: PPUSH
64244: LD_VAR 0 1
64248: PPUSH
64249: CALL_OW 12
64253: ARRAY
64254: PPUSH
64255: LD_INT 1
64257: PPUSH
64258: LD_INT 4
64260: PPUSH
64261: CALL_OW 12
64265: PPUSH
64266: LD_INT 3000
64268: PPUSH
64269: LD_INT 9000
64271: PPUSH
64272: CALL_OW 12
64276: PPUSH
64277: CALL_OW 492
// end ;
64281: PPOPN 1
64283: END
// every 0 0$1 trigger StreamModeActive and sDepot do
64284: LD_EXP 38
64288: PUSH
64289: LD_EXP 53
64293: AND
64294: IFFALSE 64314
64296: GO 64298
64298: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
64299: LD_INT 1
64301: PPUSH
64302: LD_OWVAR 2
64306: PPUSH
64307: LD_INT 0
64309: PPUSH
64310: CALL_OW 324
64314: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
64315: LD_EXP 38
64319: PUSH
64320: LD_EXP 54
64324: AND
64325: IFFALSE 64408
64327: GO 64329
64329: DISABLE
64330: LD_INT 0
64332: PPUSH
64333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64334: LD_ADDR_VAR 0 2
64338: PUSH
64339: LD_INT 22
64341: PUSH
64342: LD_OWVAR 2
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 21
64353: PUSH
64354: LD_INT 3
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PPUSH
64365: CALL_OW 69
64369: ST_TO_ADDR
// if not tmp then
64370: LD_VAR 0 2
64374: NOT
64375: IFFALSE 64379
// exit ;
64377: GO 64408
// for i in tmp do
64379: LD_ADDR_VAR 0 1
64383: PUSH
64384: LD_VAR 0 2
64388: PUSH
64389: FOR_IN
64390: IFFALSE 64406
// SetBLevel ( i , 10 ) ;
64392: LD_VAR 0 1
64396: PPUSH
64397: LD_INT 10
64399: PPUSH
64400: CALL_OW 241
64404: GO 64389
64406: POP
64407: POP
// end ;
64408: PPOPN 2
64410: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
64411: LD_EXP 38
64415: PUSH
64416: LD_EXP 55
64420: AND
64421: IFFALSE 64532
64423: GO 64425
64425: DISABLE
64426: LD_INT 0
64428: PPUSH
64429: PPUSH
64430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64431: LD_ADDR_VAR 0 3
64435: PUSH
64436: LD_INT 22
64438: PUSH
64439: LD_OWVAR 2
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 25
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PPUSH
64462: CALL_OW 69
64466: ST_TO_ADDR
// if not tmp then
64467: LD_VAR 0 3
64471: NOT
64472: IFFALSE 64476
// exit ;
64474: GO 64532
// un := tmp [ rand ( 1 , tmp ) ] ;
64476: LD_ADDR_VAR 0 2
64480: PUSH
64481: LD_VAR 0 3
64485: PUSH
64486: LD_INT 1
64488: PPUSH
64489: LD_VAR 0 3
64493: PPUSH
64494: CALL_OW 12
64498: ARRAY
64499: ST_TO_ADDR
// if Crawls ( un ) then
64500: LD_VAR 0 2
64504: PPUSH
64505: CALL_OW 318
64509: IFFALSE 64520
// ComWalk ( un ) ;
64511: LD_VAR 0 2
64515: PPUSH
64516: CALL_OW 138
// SetClass ( un , class_sniper ) ;
64520: LD_VAR 0 2
64524: PPUSH
64525: LD_INT 5
64527: PPUSH
64528: CALL_OW 336
// end ;
64532: PPOPN 3
64534: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
64535: LD_EXP 38
64539: PUSH
64540: LD_EXP 56
64544: AND
64545: PUSH
64546: LD_OWVAR 67
64550: PUSH
64551: LD_INT 4
64553: LESS
64554: AND
64555: IFFALSE 64574
64557: GO 64559
64559: DISABLE
// begin Difficulty := Difficulty + 1 ;
64560: LD_ADDR_OWVAR 67
64564: PUSH
64565: LD_OWVAR 67
64569: PUSH
64570: LD_INT 1
64572: PLUS
64573: ST_TO_ADDR
// end ;
64574: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
64575: LD_EXP 38
64579: PUSH
64580: LD_EXP 57
64584: AND
64585: IFFALSE 64688
64587: GO 64589
64589: DISABLE
64590: LD_INT 0
64592: PPUSH
// begin for i := 1 to 5 do
64593: LD_ADDR_VAR 0 1
64597: PUSH
64598: DOUBLE
64599: LD_INT 1
64601: DEC
64602: ST_TO_ADDR
64603: LD_INT 5
64605: PUSH
64606: FOR_TO
64607: IFFALSE 64686
// begin uc_nation := nation_nature ;
64609: LD_ADDR_OWVAR 21
64613: PUSH
64614: LD_INT 0
64616: ST_TO_ADDR
// uc_side := 0 ;
64617: LD_ADDR_OWVAR 20
64621: PUSH
64622: LD_INT 0
64624: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64625: LD_ADDR_OWVAR 29
64629: PUSH
64630: LD_INT 12
64632: PUSH
64633: LD_INT 12
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: ST_TO_ADDR
// hc_agressivity := 20 ;
64640: LD_ADDR_OWVAR 35
64644: PUSH
64645: LD_INT 20
64647: ST_TO_ADDR
// hc_class := class_tiger ;
64648: LD_ADDR_OWVAR 28
64652: PUSH
64653: LD_INT 14
64655: ST_TO_ADDR
// hc_gallery :=  ;
64656: LD_ADDR_OWVAR 33
64660: PUSH
64661: LD_STRING 
64663: ST_TO_ADDR
// hc_name :=  ;
64664: LD_ADDR_OWVAR 26
64668: PUSH
64669: LD_STRING 
64671: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
64672: CALL_OW 44
64676: PPUSH
64677: LD_INT 0
64679: PPUSH
64680: CALL_OW 51
// end ;
64684: GO 64606
64686: POP
64687: POP
// end ;
64688: PPOPN 1
64690: END
// every 0 0$1 trigger StreamModeActive and sBomb do
64691: LD_EXP 38
64695: PUSH
64696: LD_EXP 58
64700: AND
64701: IFFALSE 64710
64703: GO 64705
64705: DISABLE
// StreamSibBomb ;
64706: CALL 64711 0 0
64710: END
// export function StreamSibBomb ; var i , x , y ; begin
64711: LD_INT 0
64713: PPUSH
64714: PPUSH
64715: PPUSH
64716: PPUSH
// result := false ;
64717: LD_ADDR_VAR 0 1
64721: PUSH
64722: LD_INT 0
64724: ST_TO_ADDR
// for i := 1 to 16 do
64725: LD_ADDR_VAR 0 2
64729: PUSH
64730: DOUBLE
64731: LD_INT 1
64733: DEC
64734: ST_TO_ADDR
64735: LD_INT 16
64737: PUSH
64738: FOR_TO
64739: IFFALSE 64938
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64741: LD_ADDR_VAR 0 3
64745: PUSH
64746: LD_INT 10
64748: PUSH
64749: LD_INT 20
64751: PUSH
64752: LD_INT 30
64754: PUSH
64755: LD_INT 40
64757: PUSH
64758: LD_INT 50
64760: PUSH
64761: LD_INT 60
64763: PUSH
64764: LD_INT 70
64766: PUSH
64767: LD_INT 80
64769: PUSH
64770: LD_INT 90
64772: PUSH
64773: LD_INT 100
64775: PUSH
64776: LD_INT 110
64778: PUSH
64779: LD_INT 120
64781: PUSH
64782: LD_INT 130
64784: PUSH
64785: LD_INT 140
64787: PUSH
64788: LD_INT 150
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 1
64810: PPUSH
64811: LD_INT 15
64813: PPUSH
64814: CALL_OW 12
64818: ARRAY
64819: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64820: LD_ADDR_VAR 0 4
64824: PUSH
64825: LD_INT 10
64827: PUSH
64828: LD_INT 20
64830: PUSH
64831: LD_INT 30
64833: PUSH
64834: LD_INT 40
64836: PUSH
64837: LD_INT 50
64839: PUSH
64840: LD_INT 60
64842: PUSH
64843: LD_INT 70
64845: PUSH
64846: LD_INT 80
64848: PUSH
64849: LD_INT 90
64851: PUSH
64852: LD_INT 100
64854: PUSH
64855: LD_INT 110
64857: PUSH
64858: LD_INT 120
64860: PUSH
64861: LD_INT 130
64863: PUSH
64864: LD_INT 140
64866: PUSH
64867: LD_INT 150
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: PPUSH
64890: LD_INT 15
64892: PPUSH
64893: CALL_OW 12
64897: ARRAY
64898: ST_TO_ADDR
// if ValidHex ( x , y ) then
64899: LD_VAR 0 3
64903: PPUSH
64904: LD_VAR 0 4
64908: PPUSH
64909: CALL_OW 488
64913: IFFALSE 64936
// begin result := [ x , y ] ;
64915: LD_ADDR_VAR 0 1
64919: PUSH
64920: LD_VAR 0 3
64924: PUSH
64925: LD_VAR 0 4
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: ST_TO_ADDR
// break ;
64934: GO 64938
// end ; end ;
64936: GO 64738
64938: POP
64939: POP
// if result then
64940: LD_VAR 0 1
64944: IFFALSE 65004
// begin ToLua ( playSibBomb() ) ;
64946: LD_STRING playSibBomb()
64948: PPUSH
64949: CALL_OW 559
// wait ( 0 0$14 ) ;
64953: LD_INT 490
64955: PPUSH
64956: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
64960: LD_VAR 0 1
64964: PUSH
64965: LD_INT 1
64967: ARRAY
64968: PPUSH
64969: LD_VAR 0 1
64973: PUSH
64974: LD_INT 2
64976: ARRAY
64977: PPUSH
64978: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
64982: LD_VAR 0 1
64986: PUSH
64987: LD_INT 1
64989: ARRAY
64990: PPUSH
64991: LD_VAR 0 1
64995: PUSH
64996: LD_INT 2
64998: ARRAY
64999: PPUSH
65000: CALL_OW 429
// end ; end ;
65004: LD_VAR 0 1
65008: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65009: LD_EXP 38
65013: PUSH
65014: LD_EXP 60
65018: AND
65019: IFFALSE 65031
65021: GO 65023
65023: DISABLE
// YouLost (  ) ;
65024: LD_STRING 
65026: PPUSH
65027: CALL_OW 104
65031: END
// every 0 0$1 trigger StreamModeActive and sFog do
65032: LD_EXP 38
65036: PUSH
65037: LD_EXP 59
65041: AND
65042: IFFALSE 65056
65044: GO 65046
65046: DISABLE
// FogOff ( your_side ) ;
65047: LD_OWVAR 2
65051: PPUSH
65052: CALL_OW 344
65056: END
// every 0 0$1 trigger StreamModeActive and sSun do
65057: LD_EXP 38
65061: PUSH
65062: LD_EXP 61
65066: AND
65067: IFFALSE 65095
65069: GO 65071
65071: DISABLE
// begin solar_recharge_percent := 0 ;
65072: LD_ADDR_OWVAR 79
65076: PUSH
65077: LD_INT 0
65079: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65080: LD_INT 10500
65082: PPUSH
65083: CALL_OW 67
// solar_recharge_percent := 100 ;
65087: LD_ADDR_OWVAR 79
65091: PUSH
65092: LD_INT 100
65094: ST_TO_ADDR
// end ;
65095: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65096: LD_EXP 38
65100: PUSH
65101: LD_EXP 62
65105: AND
65106: IFFALSE 65345
65108: GO 65110
65110: DISABLE
65111: LD_INT 0
65113: PPUSH
65114: PPUSH
65115: PPUSH
// begin tmp := [ ] ;
65116: LD_ADDR_VAR 0 3
65120: PUSH
65121: EMPTY
65122: ST_TO_ADDR
// for i := 1 to 6 do
65123: LD_ADDR_VAR 0 1
65127: PUSH
65128: DOUBLE
65129: LD_INT 1
65131: DEC
65132: ST_TO_ADDR
65133: LD_INT 6
65135: PUSH
65136: FOR_TO
65137: IFFALSE 65242
// begin uc_nation := nation_nature ;
65139: LD_ADDR_OWVAR 21
65143: PUSH
65144: LD_INT 0
65146: ST_TO_ADDR
// uc_side := 0 ;
65147: LD_ADDR_OWVAR 20
65151: PUSH
65152: LD_INT 0
65154: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65155: LD_ADDR_OWVAR 29
65159: PUSH
65160: LD_INT 12
65162: PUSH
65163: LD_INT 12
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: ST_TO_ADDR
// hc_agressivity := 20 ;
65170: LD_ADDR_OWVAR 35
65174: PUSH
65175: LD_INT 20
65177: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
65178: LD_ADDR_OWVAR 28
65182: PUSH
65183: LD_INT 17
65185: ST_TO_ADDR
// hc_gallery :=  ;
65186: LD_ADDR_OWVAR 33
65190: PUSH
65191: LD_STRING 
65193: ST_TO_ADDR
// hc_name :=  ;
65194: LD_ADDR_OWVAR 26
65198: PUSH
65199: LD_STRING 
65201: ST_TO_ADDR
// un := CreateHuman ;
65202: LD_ADDR_VAR 0 2
65206: PUSH
65207: CALL_OW 44
65211: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
65212: LD_VAR 0 2
65216: PPUSH
65217: LD_INT 1
65219: PPUSH
65220: CALL_OW 51
// tmp := tmp ^ un ;
65224: LD_ADDR_VAR 0 3
65228: PUSH
65229: LD_VAR 0 3
65233: PUSH
65234: LD_VAR 0 2
65238: ADD
65239: ST_TO_ADDR
// end ;
65240: GO 65136
65242: POP
65243: POP
// repeat wait ( 0 0$1 ) ;
65244: LD_INT 35
65246: PPUSH
65247: CALL_OW 67
// for un in tmp do
65251: LD_ADDR_VAR 0 2
65255: PUSH
65256: LD_VAR 0 3
65260: PUSH
65261: FOR_IN
65262: IFFALSE 65336
// begin if IsDead ( un ) then
65264: LD_VAR 0 2
65268: PPUSH
65269: CALL_OW 301
65273: IFFALSE 65293
// begin tmp := tmp diff un ;
65275: LD_ADDR_VAR 0 3
65279: PUSH
65280: LD_VAR 0 3
65284: PUSH
65285: LD_VAR 0 2
65289: DIFF
65290: ST_TO_ADDR
// continue ;
65291: GO 65261
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
65293: LD_VAR 0 2
65297: PPUSH
65298: LD_INT 3
65300: PUSH
65301: LD_INT 22
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PPUSH
65315: CALL_OW 69
65319: PPUSH
65320: LD_VAR 0 2
65324: PPUSH
65325: CALL_OW 74
65329: PPUSH
65330: CALL_OW 115
// end ;
65334: GO 65261
65336: POP
65337: POP
// until not tmp ;
65338: LD_VAR 0 3
65342: NOT
65343: IFFALSE 65244
// end ;
65345: PPOPN 3
65347: END
// every 0 0$1 trigger StreamModeActive and sTroll do
65348: LD_EXP 38
65352: PUSH
65353: LD_EXP 63
65357: AND
65358: IFFALSE 65412
65360: GO 65362
65362: DISABLE
// begin ToLua ( displayTroll(); ) ;
65363: LD_STRING displayTroll();
65365: PPUSH
65366: CALL_OW 559
// wait ( 3 3$00 ) ;
65370: LD_INT 6300
65372: PPUSH
65373: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65377: LD_STRING hideTroll();
65379: PPUSH
65380: CALL_OW 559
// wait ( 1 1$00 ) ;
65384: LD_INT 2100
65386: PPUSH
65387: CALL_OW 67
// ToLua ( displayTroll(); ) ;
65391: LD_STRING displayTroll();
65393: PPUSH
65394: CALL_OW 559
// wait ( 1 1$00 ) ;
65398: LD_INT 2100
65400: PPUSH
65401: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65405: LD_STRING hideTroll();
65407: PPUSH
65408: CALL_OW 559
// end ;
65412: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
65413: LD_EXP 38
65417: PUSH
65418: LD_EXP 64
65422: AND
65423: IFFALSE 65486
65425: GO 65427
65427: DISABLE
65428: LD_INT 0
65430: PPUSH
// begin p := 0 ;
65431: LD_ADDR_VAR 0 1
65435: PUSH
65436: LD_INT 0
65438: ST_TO_ADDR
// repeat game_speed := 1 ;
65439: LD_ADDR_OWVAR 65
65443: PUSH
65444: LD_INT 1
65446: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65447: LD_INT 35
65449: PPUSH
65450: CALL_OW 67
// p := p + 1 ;
65454: LD_ADDR_VAR 0 1
65458: PUSH
65459: LD_VAR 0 1
65463: PUSH
65464: LD_INT 1
65466: PLUS
65467: ST_TO_ADDR
// until p >= 60 ;
65468: LD_VAR 0 1
65472: PUSH
65473: LD_INT 60
65475: GREATEREQUAL
65476: IFFALSE 65439
// game_speed := 4 ;
65478: LD_ADDR_OWVAR 65
65482: PUSH
65483: LD_INT 4
65485: ST_TO_ADDR
// end ;
65486: PPOPN 1
65488: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
65489: LD_EXP 38
65493: PUSH
65494: LD_EXP 65
65498: AND
65499: IFFALSE 65645
65501: GO 65503
65503: DISABLE
65504: LD_INT 0
65506: PPUSH
65507: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65508: LD_ADDR_VAR 0 1
65512: PUSH
65513: LD_INT 22
65515: PUSH
65516: LD_OWVAR 2
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 2
65527: PUSH
65528: LD_INT 30
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 30
65540: PUSH
65541: LD_INT 1
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: LIST
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PPUSH
65557: CALL_OW 69
65561: ST_TO_ADDR
// if not depot then
65562: LD_VAR 0 1
65566: NOT
65567: IFFALSE 65571
// exit ;
65569: GO 65645
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
65571: LD_ADDR_VAR 0 2
65575: PUSH
65576: LD_VAR 0 1
65580: PUSH
65581: LD_INT 1
65583: PPUSH
65584: LD_VAR 0 1
65588: PPUSH
65589: CALL_OW 12
65593: ARRAY
65594: PPUSH
65595: CALL_OW 274
65599: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
65600: LD_VAR 0 2
65604: PPUSH
65605: LD_INT 1
65607: PPUSH
65608: LD_INT 0
65610: PPUSH
65611: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
65615: LD_VAR 0 2
65619: PPUSH
65620: LD_INT 2
65622: PPUSH
65623: LD_INT 0
65625: PPUSH
65626: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
65630: LD_VAR 0 2
65634: PPUSH
65635: LD_INT 3
65637: PPUSH
65638: LD_INT 0
65640: PPUSH
65641: CALL_OW 277
// end ;
65645: PPOPN 2
65647: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
65648: LD_EXP 38
65652: PUSH
65653: LD_EXP 66
65657: AND
65658: IFFALSE 65755
65660: GO 65662
65662: DISABLE
65663: LD_INT 0
65665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65666: LD_ADDR_VAR 0 1
65670: PUSH
65671: LD_INT 22
65673: PUSH
65674: LD_OWVAR 2
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 21
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 3
65695: PUSH
65696: LD_INT 23
65698: PUSH
65699: LD_INT 0
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: LIST
65714: PPUSH
65715: CALL_OW 69
65719: ST_TO_ADDR
// if not tmp then
65720: LD_VAR 0 1
65724: NOT
65725: IFFALSE 65729
// exit ;
65727: GO 65755
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
65729: LD_VAR 0 1
65733: PUSH
65734: LD_INT 1
65736: PPUSH
65737: LD_VAR 0 1
65741: PPUSH
65742: CALL_OW 12
65746: ARRAY
65747: PPUSH
65748: LD_INT 200
65750: PPUSH
65751: CALL_OW 234
// end ;
65755: PPOPN 1
65757: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
65758: LD_EXP 38
65762: PUSH
65763: LD_EXP 67
65767: AND
65768: IFFALSE 65847
65770: GO 65772
65772: DISABLE
65773: LD_INT 0
65775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
65776: LD_ADDR_VAR 0 1
65780: PUSH
65781: LD_INT 22
65783: PUSH
65784: LD_OWVAR 2
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 21
65795: PUSH
65796: LD_INT 2
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PPUSH
65807: CALL_OW 69
65811: ST_TO_ADDR
// if not tmp then
65812: LD_VAR 0 1
65816: NOT
65817: IFFALSE 65821
// exit ;
65819: GO 65847
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
65821: LD_VAR 0 1
65825: PUSH
65826: LD_INT 1
65828: PPUSH
65829: LD_VAR 0 1
65833: PPUSH
65834: CALL_OW 12
65838: ARRAY
65839: PPUSH
65840: LD_INT 60
65842: PPUSH
65843: CALL_OW 234
// end ;
65847: PPOPN 1
65849: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
65850: LD_EXP 38
65854: PUSH
65855: LD_EXP 68
65859: AND
65860: IFFALSE 65959
65862: GO 65864
65864: DISABLE
65865: LD_INT 0
65867: PPUSH
65868: PPUSH
// begin enable ;
65869: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
65870: LD_ADDR_VAR 0 1
65874: PUSH
65875: LD_INT 22
65877: PUSH
65878: LD_OWVAR 2
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 61
65889: PUSH
65890: EMPTY
65891: LIST
65892: PUSH
65893: LD_INT 33
65895: PUSH
65896: LD_INT 2
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: LIST
65907: PPUSH
65908: CALL_OW 69
65912: ST_TO_ADDR
// if not tmp then
65913: LD_VAR 0 1
65917: NOT
65918: IFFALSE 65922
// exit ;
65920: GO 65959
// for i in tmp do
65922: LD_ADDR_VAR 0 2
65926: PUSH
65927: LD_VAR 0 1
65931: PUSH
65932: FOR_IN
65933: IFFALSE 65957
// if IsControledBy ( i ) then
65935: LD_VAR 0 2
65939: PPUSH
65940: CALL_OW 312
65944: IFFALSE 65955
// ComUnlink ( i ) ;
65946: LD_VAR 0 2
65950: PPUSH
65951: CALL_OW 136
65955: GO 65932
65957: POP
65958: POP
// end ;
65959: PPOPN 2
65961: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
65962: LD_EXP 38
65966: PUSH
65967: LD_EXP 69
65971: AND
65972: IFFALSE 66112
65974: GO 65976
65976: DISABLE
65977: LD_INT 0
65979: PPUSH
65980: PPUSH
// begin ToLua ( displayPowell(); ) ;
65981: LD_STRING displayPowell();
65983: PPUSH
65984: CALL_OW 559
// uc_side := 0 ;
65988: LD_ADDR_OWVAR 20
65992: PUSH
65993: LD_INT 0
65995: ST_TO_ADDR
// uc_nation := 2 ;
65996: LD_ADDR_OWVAR 21
66000: PUSH
66001: LD_INT 2
66003: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66004: LD_ADDR_OWVAR 37
66008: PUSH
66009: LD_INT 14
66011: ST_TO_ADDR
// vc_engine := engine_siberite ;
66012: LD_ADDR_OWVAR 39
66016: PUSH
66017: LD_INT 3
66019: ST_TO_ADDR
// vc_control := control_apeman ;
66020: LD_ADDR_OWVAR 38
66024: PUSH
66025: LD_INT 5
66027: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66028: LD_ADDR_OWVAR 40
66032: PUSH
66033: LD_INT 29
66035: ST_TO_ADDR
// un := CreateVehicle ;
66036: LD_ADDR_VAR 0 2
66040: PUSH
66041: CALL_OW 45
66045: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66046: LD_VAR 0 2
66050: PPUSH
66051: LD_INT 1
66053: PPUSH
66054: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66058: LD_INT 35
66060: PPUSH
66061: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66065: LD_VAR 0 2
66069: PPUSH
66070: LD_INT 22
66072: PUSH
66073: LD_OWVAR 2
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PPUSH
66082: CALL_OW 69
66086: PPUSH
66087: LD_VAR 0 2
66091: PPUSH
66092: CALL_OW 74
66096: PPUSH
66097: CALL_OW 115
// until IsDead ( un ) ;
66101: LD_VAR 0 2
66105: PPUSH
66106: CALL_OW 301
66110: IFFALSE 66058
// end ;
66112: PPOPN 2
66114: END
// every 0 0$1 trigger StreamModeActive and sStu do
66115: LD_EXP 38
66119: PUSH
66120: LD_EXP 77
66124: AND
66125: IFFALSE 66141
66127: GO 66129
66129: DISABLE
// begin ToLua ( displayStucuk(); ) ;
66130: LD_STRING displayStucuk();
66132: PPUSH
66133: CALL_OW 559
// ResetFog ;
66137: CALL_OW 335
// end ;
66141: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
66142: LD_EXP 38
66146: PUSH
66147: LD_EXP 70
66151: AND
66152: IFFALSE 66293
66154: GO 66156
66156: DISABLE
66157: LD_INT 0
66159: PPUSH
66160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66161: LD_ADDR_VAR 0 2
66165: PUSH
66166: LD_INT 22
66168: PUSH
66169: LD_OWVAR 2
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 21
66180: PUSH
66181: LD_INT 1
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PPUSH
66192: CALL_OW 69
66196: ST_TO_ADDR
// if not tmp then
66197: LD_VAR 0 2
66201: NOT
66202: IFFALSE 66206
// exit ;
66204: GO 66293
// un := tmp [ rand ( 1 , tmp ) ] ;
66206: LD_ADDR_VAR 0 1
66210: PUSH
66211: LD_VAR 0 2
66215: PUSH
66216: LD_INT 1
66218: PPUSH
66219: LD_VAR 0 2
66223: PPUSH
66224: CALL_OW 12
66228: ARRAY
66229: ST_TO_ADDR
// SetSide ( un , 0 ) ;
66230: LD_VAR 0 1
66234: PPUSH
66235: LD_INT 0
66237: PPUSH
66238: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
66242: LD_VAR 0 1
66246: PPUSH
66247: LD_OWVAR 3
66251: PUSH
66252: LD_VAR 0 1
66256: DIFF
66257: PPUSH
66258: LD_VAR 0 1
66262: PPUSH
66263: CALL_OW 74
66267: PPUSH
66268: CALL_OW 115
// wait ( 0 0$20 ) ;
66272: LD_INT 700
66274: PPUSH
66275: CALL_OW 67
// SetSide ( un , your_side ) ;
66279: LD_VAR 0 1
66283: PPUSH
66284: LD_OWVAR 2
66288: PPUSH
66289: CALL_OW 235
// end ;
66293: PPOPN 2
66295: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
66296: LD_EXP 38
66300: PUSH
66301: LD_EXP 71
66305: AND
66306: IFFALSE 66412
66308: GO 66310
66310: DISABLE
66311: LD_INT 0
66313: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66314: LD_ADDR_VAR 0 1
66318: PUSH
66319: LD_INT 22
66321: PUSH
66322: LD_OWVAR 2
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 2
66333: PUSH
66334: LD_INT 30
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 30
66346: PUSH
66347: LD_INT 1
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: LIST
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PPUSH
66363: CALL_OW 69
66367: ST_TO_ADDR
// if not depot then
66368: LD_VAR 0 1
66372: NOT
66373: IFFALSE 66377
// exit ;
66375: GO 66412
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
66377: LD_VAR 0 1
66381: PUSH
66382: LD_INT 1
66384: ARRAY
66385: PPUSH
66386: CALL_OW 250
66390: PPUSH
66391: LD_VAR 0 1
66395: PUSH
66396: LD_INT 1
66398: ARRAY
66399: PPUSH
66400: CALL_OW 251
66404: PPUSH
66405: LD_INT 70
66407: PPUSH
66408: CALL_OW 495
// end ;
66412: PPOPN 1
66414: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
66415: LD_EXP 38
66419: PUSH
66420: LD_EXP 72
66424: AND
66425: IFFALSE 66636
66427: GO 66429
66429: DISABLE
66430: LD_INT 0
66432: PPUSH
66433: PPUSH
66434: PPUSH
66435: PPUSH
66436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66437: LD_ADDR_VAR 0 5
66441: PUSH
66442: LD_INT 22
66444: PUSH
66445: LD_OWVAR 2
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 21
66456: PUSH
66457: LD_INT 1
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PPUSH
66468: CALL_OW 69
66472: ST_TO_ADDR
// if not tmp then
66473: LD_VAR 0 5
66477: NOT
66478: IFFALSE 66482
// exit ;
66480: GO 66636
// for i in tmp do
66482: LD_ADDR_VAR 0 1
66486: PUSH
66487: LD_VAR 0 5
66491: PUSH
66492: FOR_IN
66493: IFFALSE 66634
// begin d := rand ( 0 , 5 ) ;
66495: LD_ADDR_VAR 0 4
66499: PUSH
66500: LD_INT 0
66502: PPUSH
66503: LD_INT 5
66505: PPUSH
66506: CALL_OW 12
66510: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
66511: LD_ADDR_VAR 0 2
66515: PUSH
66516: LD_VAR 0 1
66520: PPUSH
66521: CALL_OW 250
66525: PPUSH
66526: LD_VAR 0 4
66530: PPUSH
66531: LD_INT 3
66533: PPUSH
66534: LD_INT 12
66536: PPUSH
66537: CALL_OW 12
66541: PPUSH
66542: CALL_OW 272
66546: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
66547: LD_ADDR_VAR 0 3
66551: PUSH
66552: LD_VAR 0 1
66556: PPUSH
66557: CALL_OW 251
66561: PPUSH
66562: LD_VAR 0 4
66566: PPUSH
66567: LD_INT 3
66569: PPUSH
66570: LD_INT 12
66572: PPUSH
66573: CALL_OW 12
66577: PPUSH
66578: CALL_OW 273
66582: ST_TO_ADDR
// if ValidHex ( x , y ) then
66583: LD_VAR 0 2
66587: PPUSH
66588: LD_VAR 0 3
66592: PPUSH
66593: CALL_OW 488
66597: IFFALSE 66632
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
66599: LD_VAR 0 1
66603: PPUSH
66604: LD_VAR 0 2
66608: PPUSH
66609: LD_VAR 0 3
66613: PPUSH
66614: LD_INT 3
66616: PPUSH
66617: LD_INT 6
66619: PPUSH
66620: CALL_OW 12
66624: PPUSH
66625: LD_INT 1
66627: PPUSH
66628: CALL_OW 483
// end ;
66632: GO 66492
66634: POP
66635: POP
// end ;
66636: PPOPN 5
66638: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
66639: LD_EXP 38
66643: PUSH
66644: LD_EXP 73
66648: AND
66649: IFFALSE 66743
66651: GO 66653
66653: DISABLE
66654: LD_INT 0
66656: PPUSH
66657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
66658: LD_ADDR_VAR 0 2
66662: PUSH
66663: LD_INT 22
66665: PUSH
66666: LD_OWVAR 2
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 32
66677: PUSH
66678: LD_INT 1
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 21
66687: PUSH
66688: LD_INT 2
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: LIST
66699: PPUSH
66700: CALL_OW 69
66704: ST_TO_ADDR
// if not tmp then
66705: LD_VAR 0 2
66709: NOT
66710: IFFALSE 66714
// exit ;
66712: GO 66743
// for i in tmp do
66714: LD_ADDR_VAR 0 1
66718: PUSH
66719: LD_VAR 0 2
66723: PUSH
66724: FOR_IN
66725: IFFALSE 66741
// SetFuel ( i , 0 ) ;
66727: LD_VAR 0 1
66731: PPUSH
66732: LD_INT 0
66734: PPUSH
66735: CALL_OW 240
66739: GO 66724
66741: POP
66742: POP
// end ;
66743: PPOPN 2
66745: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
66746: LD_EXP 38
66750: PUSH
66751: LD_EXP 74
66755: AND
66756: IFFALSE 66822
66758: GO 66760
66760: DISABLE
66761: LD_INT 0
66763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
66764: LD_ADDR_VAR 0 1
66768: PUSH
66769: LD_INT 22
66771: PUSH
66772: LD_OWVAR 2
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 30
66783: PUSH
66784: LD_INT 29
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PPUSH
66795: CALL_OW 69
66799: ST_TO_ADDR
// if not tmp then
66800: LD_VAR 0 1
66804: NOT
66805: IFFALSE 66809
// exit ;
66807: GO 66822
// DestroyUnit ( tmp [ 1 ] ) ;
66809: LD_VAR 0 1
66813: PUSH
66814: LD_INT 1
66816: ARRAY
66817: PPUSH
66818: CALL_OW 65
// end ;
66822: PPOPN 1
66824: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
66825: LD_EXP 38
66829: PUSH
66830: LD_EXP 76
66834: AND
66835: IFFALSE 66964
66837: GO 66839
66839: DISABLE
66840: LD_INT 0
66842: PPUSH
// begin uc_side := 0 ;
66843: LD_ADDR_OWVAR 20
66847: PUSH
66848: LD_INT 0
66850: ST_TO_ADDR
// uc_nation := nation_arabian ;
66851: LD_ADDR_OWVAR 21
66855: PUSH
66856: LD_INT 2
66858: ST_TO_ADDR
// hc_gallery :=  ;
66859: LD_ADDR_OWVAR 33
66863: PUSH
66864: LD_STRING 
66866: ST_TO_ADDR
// hc_name :=  ;
66867: LD_ADDR_OWVAR 26
66871: PUSH
66872: LD_STRING 
66874: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
66875: LD_INT 1
66877: PPUSH
66878: LD_INT 11
66880: PPUSH
66881: LD_INT 10
66883: PPUSH
66884: CALL_OW 380
// un := CreateHuman ;
66888: LD_ADDR_VAR 0 1
66892: PUSH
66893: CALL_OW 44
66897: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66898: LD_VAR 0 1
66902: PPUSH
66903: LD_INT 1
66905: PPUSH
66906: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66910: LD_INT 35
66912: PPUSH
66913: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66917: LD_VAR 0 1
66921: PPUSH
66922: LD_INT 22
66924: PUSH
66925: LD_OWVAR 2
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PPUSH
66934: CALL_OW 69
66938: PPUSH
66939: LD_VAR 0 1
66943: PPUSH
66944: CALL_OW 74
66948: PPUSH
66949: CALL_OW 115
// until IsDead ( un ) ;
66953: LD_VAR 0 1
66957: PPUSH
66958: CALL_OW 301
66962: IFFALSE 66910
// end ;
66964: PPOPN 1
66966: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
66967: LD_EXP 38
66971: PUSH
66972: LD_EXP 78
66976: AND
66977: IFFALSE 66989
66979: GO 66981
66981: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
66982: LD_STRING earthquake(getX(game), 0, 32)
66984: PPUSH
66985: CALL_OW 559
66989: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
66990: LD_EXP 38
66994: PUSH
66995: LD_EXP 79
66999: AND
67000: IFFALSE 67091
67002: GO 67004
67004: DISABLE
67005: LD_INT 0
67007: PPUSH
// begin enable ;
67008: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67009: LD_ADDR_VAR 0 1
67013: PUSH
67014: LD_INT 22
67016: PUSH
67017: LD_OWVAR 2
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 21
67028: PUSH
67029: LD_INT 2
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 33
67038: PUSH
67039: LD_INT 3
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: LIST
67050: PPUSH
67051: CALL_OW 69
67055: ST_TO_ADDR
// if not tmp then
67056: LD_VAR 0 1
67060: NOT
67061: IFFALSE 67065
// exit ;
67063: GO 67091
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67065: LD_VAR 0 1
67069: PUSH
67070: LD_INT 1
67072: PPUSH
67073: LD_VAR 0 1
67077: PPUSH
67078: CALL_OW 12
67082: ARRAY
67083: PPUSH
67084: LD_INT 1
67086: PPUSH
67087: CALL_OW 234
// end ;
67091: PPOPN 1
67093: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67094: LD_EXP 38
67098: PUSH
67099: LD_EXP 80
67103: AND
67104: IFFALSE 67245
67106: GO 67108
67108: DISABLE
67109: LD_INT 0
67111: PPUSH
67112: PPUSH
67113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67114: LD_ADDR_VAR 0 3
67118: PUSH
67119: LD_INT 22
67121: PUSH
67122: LD_OWVAR 2
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 25
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PPUSH
67145: CALL_OW 69
67149: ST_TO_ADDR
// if not tmp then
67150: LD_VAR 0 3
67154: NOT
67155: IFFALSE 67159
// exit ;
67157: GO 67245
// un := tmp [ rand ( 1 , tmp ) ] ;
67159: LD_ADDR_VAR 0 2
67163: PUSH
67164: LD_VAR 0 3
67168: PUSH
67169: LD_INT 1
67171: PPUSH
67172: LD_VAR 0 3
67176: PPUSH
67177: CALL_OW 12
67181: ARRAY
67182: ST_TO_ADDR
// if Crawls ( un ) then
67183: LD_VAR 0 2
67187: PPUSH
67188: CALL_OW 318
67192: IFFALSE 67203
// ComWalk ( un ) ;
67194: LD_VAR 0 2
67198: PPUSH
67199: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
67203: LD_VAR 0 2
67207: PPUSH
67208: LD_INT 9
67210: PPUSH
67211: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
67215: LD_INT 28
67217: PPUSH
67218: LD_OWVAR 2
67222: PPUSH
67223: LD_INT 2
67225: PPUSH
67226: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
67230: LD_INT 29
67232: PPUSH
67233: LD_OWVAR 2
67237: PPUSH
67238: LD_INT 2
67240: PPUSH
67241: CALL_OW 322
// end ;
67245: PPOPN 3
67247: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
67248: LD_EXP 38
67252: PUSH
67253: LD_EXP 81
67257: AND
67258: IFFALSE 67369
67260: GO 67262
67262: DISABLE
67263: LD_INT 0
67265: PPUSH
67266: PPUSH
67267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67268: LD_ADDR_VAR 0 3
67272: PUSH
67273: LD_INT 22
67275: PUSH
67276: LD_OWVAR 2
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 25
67287: PUSH
67288: LD_INT 1
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PPUSH
67299: CALL_OW 69
67303: ST_TO_ADDR
// if not tmp then
67304: LD_VAR 0 3
67308: NOT
67309: IFFALSE 67313
// exit ;
67311: GO 67369
// un := tmp [ rand ( 1 , tmp ) ] ;
67313: LD_ADDR_VAR 0 2
67317: PUSH
67318: LD_VAR 0 3
67322: PUSH
67323: LD_INT 1
67325: PPUSH
67326: LD_VAR 0 3
67330: PPUSH
67331: CALL_OW 12
67335: ARRAY
67336: ST_TO_ADDR
// if Crawls ( un ) then
67337: LD_VAR 0 2
67341: PPUSH
67342: CALL_OW 318
67346: IFFALSE 67357
// ComWalk ( un ) ;
67348: LD_VAR 0 2
67352: PPUSH
67353: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67357: LD_VAR 0 2
67361: PPUSH
67362: LD_INT 8
67364: PPUSH
67365: CALL_OW 336
// end ;
67369: PPOPN 3
67371: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
67372: LD_EXP 38
67376: PUSH
67377: LD_EXP 82
67381: AND
67382: IFFALSE 67526
67384: GO 67386
67386: DISABLE
67387: LD_INT 0
67389: PPUSH
67390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
67391: LD_ADDR_VAR 0 2
67395: PUSH
67396: LD_INT 22
67398: PUSH
67399: LD_OWVAR 2
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 21
67410: PUSH
67411: LD_INT 2
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 2
67420: PUSH
67421: LD_INT 34
67423: PUSH
67424: LD_INT 12
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 34
67433: PUSH
67434: LD_INT 51
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 34
67443: PUSH
67444: LD_INT 32
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: LIST
67461: PPUSH
67462: CALL_OW 69
67466: ST_TO_ADDR
// if not tmp then
67467: LD_VAR 0 2
67471: NOT
67472: IFFALSE 67476
// exit ;
67474: GO 67526
// for i in tmp do
67476: LD_ADDR_VAR 0 1
67480: PUSH
67481: LD_VAR 0 2
67485: PUSH
67486: FOR_IN
67487: IFFALSE 67524
// if GetCargo ( i , mat_artifact ) = 0 then
67489: LD_VAR 0 1
67493: PPUSH
67494: LD_INT 4
67496: PPUSH
67497: CALL_OW 289
67501: PUSH
67502: LD_INT 0
67504: EQUAL
67505: IFFALSE 67522
// SetCargo ( i , mat_siberit , 100 ) ;
67507: LD_VAR 0 1
67511: PPUSH
67512: LD_INT 3
67514: PPUSH
67515: LD_INT 100
67517: PPUSH
67518: CALL_OW 290
67522: GO 67486
67524: POP
67525: POP
// end ;
67526: PPOPN 2
67528: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
67529: LD_EXP 38
67533: PUSH
67534: LD_EXP 83
67538: AND
67539: IFFALSE 67722
67541: GO 67543
67543: DISABLE
67544: LD_INT 0
67546: PPUSH
67547: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67548: LD_ADDR_VAR 0 2
67552: PUSH
67553: LD_INT 22
67555: PUSH
67556: LD_OWVAR 2
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PPUSH
67565: CALL_OW 69
67569: ST_TO_ADDR
// if not tmp then
67570: LD_VAR 0 2
67574: NOT
67575: IFFALSE 67579
// exit ;
67577: GO 67722
// for i := 1 to 2 do
67579: LD_ADDR_VAR 0 1
67583: PUSH
67584: DOUBLE
67585: LD_INT 1
67587: DEC
67588: ST_TO_ADDR
67589: LD_INT 2
67591: PUSH
67592: FOR_TO
67593: IFFALSE 67720
// begin uc_side := your_side ;
67595: LD_ADDR_OWVAR 20
67599: PUSH
67600: LD_OWVAR 2
67604: ST_TO_ADDR
// uc_nation := nation_american ;
67605: LD_ADDR_OWVAR 21
67609: PUSH
67610: LD_INT 1
67612: ST_TO_ADDR
// vc_chassis := us_morphling ;
67613: LD_ADDR_OWVAR 37
67617: PUSH
67618: LD_INT 5
67620: ST_TO_ADDR
// vc_engine := engine_siberite ;
67621: LD_ADDR_OWVAR 39
67625: PUSH
67626: LD_INT 3
67628: ST_TO_ADDR
// vc_control := control_computer ;
67629: LD_ADDR_OWVAR 38
67633: PUSH
67634: LD_INT 3
67636: ST_TO_ADDR
// vc_weapon := us_double_laser ;
67637: LD_ADDR_OWVAR 40
67641: PUSH
67642: LD_INT 10
67644: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
67645: LD_VAR 0 2
67649: PUSH
67650: LD_INT 1
67652: ARRAY
67653: PPUSH
67654: CALL_OW 310
67658: NOT
67659: IFFALSE 67706
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
67661: CALL_OW 45
67665: PPUSH
67666: LD_VAR 0 2
67670: PUSH
67671: LD_INT 1
67673: ARRAY
67674: PPUSH
67675: CALL_OW 250
67679: PPUSH
67680: LD_VAR 0 2
67684: PUSH
67685: LD_INT 1
67687: ARRAY
67688: PPUSH
67689: CALL_OW 251
67693: PPUSH
67694: LD_INT 12
67696: PPUSH
67697: LD_INT 1
67699: PPUSH
67700: CALL_OW 50
67704: GO 67718
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
67706: CALL_OW 45
67710: PPUSH
67711: LD_INT 1
67713: PPUSH
67714: CALL_OW 51
// end ;
67718: GO 67592
67720: POP
67721: POP
// end ;
67722: PPOPN 2
67724: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
67725: LD_EXP 38
67729: PUSH
67730: LD_EXP 84
67734: AND
67735: IFFALSE 67957
67737: GO 67739
67739: DISABLE
67740: LD_INT 0
67742: PPUSH
67743: PPUSH
67744: PPUSH
67745: PPUSH
67746: PPUSH
67747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67748: LD_ADDR_VAR 0 6
67752: PUSH
67753: LD_INT 22
67755: PUSH
67756: LD_OWVAR 2
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 21
67767: PUSH
67768: LD_INT 1
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 3
67777: PUSH
67778: LD_INT 23
67780: PUSH
67781: LD_INT 0
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: LIST
67796: PPUSH
67797: CALL_OW 69
67801: ST_TO_ADDR
// if not tmp then
67802: LD_VAR 0 6
67806: NOT
67807: IFFALSE 67811
// exit ;
67809: GO 67957
// s1 := rand ( 1 , 4 ) ;
67811: LD_ADDR_VAR 0 2
67815: PUSH
67816: LD_INT 1
67818: PPUSH
67819: LD_INT 4
67821: PPUSH
67822: CALL_OW 12
67826: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
67827: LD_ADDR_VAR 0 4
67831: PUSH
67832: LD_VAR 0 6
67836: PUSH
67837: LD_INT 1
67839: ARRAY
67840: PPUSH
67841: LD_VAR 0 2
67845: PPUSH
67846: CALL_OW 259
67850: ST_TO_ADDR
// if s1 = 1 then
67851: LD_VAR 0 2
67855: PUSH
67856: LD_INT 1
67858: EQUAL
67859: IFFALSE 67879
// s2 := rand ( 2 , 4 ) else
67861: LD_ADDR_VAR 0 3
67865: PUSH
67866: LD_INT 2
67868: PPUSH
67869: LD_INT 4
67871: PPUSH
67872: CALL_OW 12
67876: ST_TO_ADDR
67877: GO 67887
// s2 := 1 ;
67879: LD_ADDR_VAR 0 3
67883: PUSH
67884: LD_INT 1
67886: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
67887: LD_ADDR_VAR 0 5
67891: PUSH
67892: LD_VAR 0 6
67896: PUSH
67897: LD_INT 1
67899: ARRAY
67900: PPUSH
67901: LD_VAR 0 3
67905: PPUSH
67906: CALL_OW 259
67910: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
67911: LD_VAR 0 6
67915: PUSH
67916: LD_INT 1
67918: ARRAY
67919: PPUSH
67920: LD_VAR 0 2
67924: PPUSH
67925: LD_VAR 0 5
67929: PPUSH
67930: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
67934: LD_VAR 0 6
67938: PUSH
67939: LD_INT 1
67941: ARRAY
67942: PPUSH
67943: LD_VAR 0 3
67947: PPUSH
67948: LD_VAR 0 4
67952: PPUSH
67953: CALL_OW 237
// end ;
67957: PPOPN 6
67959: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
67960: LD_EXP 38
67964: PUSH
67965: LD_EXP 85
67969: AND
67970: IFFALSE 68049
67972: GO 67974
67974: DISABLE
67975: LD_INT 0
67977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
67978: LD_ADDR_VAR 0 1
67982: PUSH
67983: LD_INT 22
67985: PUSH
67986: LD_OWVAR 2
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 30
67997: PUSH
67998: LD_INT 3
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PPUSH
68009: CALL_OW 69
68013: ST_TO_ADDR
// if not tmp then
68014: LD_VAR 0 1
68018: NOT
68019: IFFALSE 68023
// exit ;
68021: GO 68049
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68023: LD_VAR 0 1
68027: PUSH
68028: LD_INT 1
68030: PPUSH
68031: LD_VAR 0 1
68035: PPUSH
68036: CALL_OW 12
68040: ARRAY
68041: PPUSH
68042: LD_INT 1
68044: PPUSH
68045: CALL_OW 234
// end ;
68049: PPOPN 1
68051: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68052: LD_EXP 38
68056: PUSH
68057: LD_EXP 86
68061: AND
68062: IFFALSE 68174
68064: GO 68066
68066: DISABLE
68067: LD_INT 0
68069: PPUSH
68070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68071: LD_ADDR_VAR 0 2
68075: PUSH
68076: LD_INT 22
68078: PUSH
68079: LD_OWVAR 2
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 2
68090: PUSH
68091: LD_INT 30
68093: PUSH
68094: LD_INT 27
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 30
68103: PUSH
68104: LD_INT 26
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 30
68113: PUSH
68114: LD_INT 28
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PPUSH
68131: CALL_OW 69
68135: ST_TO_ADDR
// if not tmp then
68136: LD_VAR 0 2
68140: NOT
68141: IFFALSE 68145
// exit ;
68143: GO 68174
// for i in tmp do
68145: LD_ADDR_VAR 0 1
68149: PUSH
68150: LD_VAR 0 2
68154: PUSH
68155: FOR_IN
68156: IFFALSE 68172
// SetLives ( i , 1 ) ;
68158: LD_VAR 0 1
68162: PPUSH
68163: LD_INT 1
68165: PPUSH
68166: CALL_OW 234
68170: GO 68155
68172: POP
68173: POP
// end ;
68174: PPOPN 2
68176: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
68177: LD_EXP 38
68181: PUSH
68182: LD_EXP 87
68186: AND
68187: IFFALSE 68474
68189: GO 68191
68191: DISABLE
68192: LD_INT 0
68194: PPUSH
68195: PPUSH
68196: PPUSH
// begin i := rand ( 1 , 7 ) ;
68197: LD_ADDR_VAR 0 1
68201: PUSH
68202: LD_INT 1
68204: PPUSH
68205: LD_INT 7
68207: PPUSH
68208: CALL_OW 12
68212: ST_TO_ADDR
// case i of 1 :
68213: LD_VAR 0 1
68217: PUSH
68218: LD_INT 1
68220: DOUBLE
68221: EQUAL
68222: IFTRUE 68226
68224: GO 68236
68226: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
68227: LD_STRING earthquake(getX(game), 0, 32)
68229: PPUSH
68230: CALL_OW 559
68234: GO 68474
68236: LD_INT 2
68238: DOUBLE
68239: EQUAL
68240: IFTRUE 68244
68242: GO 68258
68244: POP
// begin ToLua ( displayStucuk(); ) ;
68245: LD_STRING displayStucuk();
68247: PPUSH
68248: CALL_OW 559
// ResetFog ;
68252: CALL_OW 335
// end ; 3 :
68256: GO 68474
68258: LD_INT 3
68260: DOUBLE
68261: EQUAL
68262: IFTRUE 68266
68264: GO 68370
68266: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68267: LD_ADDR_VAR 0 2
68271: PUSH
68272: LD_INT 22
68274: PUSH
68275: LD_OWVAR 2
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 25
68286: PUSH
68287: LD_INT 1
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PPUSH
68298: CALL_OW 69
68302: ST_TO_ADDR
// if not tmp then
68303: LD_VAR 0 2
68307: NOT
68308: IFFALSE 68312
// exit ;
68310: GO 68474
// un := tmp [ rand ( 1 , tmp ) ] ;
68312: LD_ADDR_VAR 0 3
68316: PUSH
68317: LD_VAR 0 2
68321: PUSH
68322: LD_INT 1
68324: PPUSH
68325: LD_VAR 0 2
68329: PPUSH
68330: CALL_OW 12
68334: ARRAY
68335: ST_TO_ADDR
// if Crawls ( un ) then
68336: LD_VAR 0 3
68340: PPUSH
68341: CALL_OW 318
68345: IFFALSE 68356
// ComWalk ( un ) ;
68347: LD_VAR 0 3
68351: PPUSH
68352: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68356: LD_VAR 0 3
68360: PPUSH
68361: LD_INT 8
68363: PPUSH
68364: CALL_OW 336
// end ; 4 :
68368: GO 68474
68370: LD_INT 4
68372: DOUBLE
68373: EQUAL
68374: IFTRUE 68378
68376: GO 68452
68378: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68379: LD_ADDR_VAR 0 2
68383: PUSH
68384: LD_INT 22
68386: PUSH
68387: LD_OWVAR 2
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 30
68398: PUSH
68399: LD_INT 29
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PPUSH
68410: CALL_OW 69
68414: ST_TO_ADDR
// if not tmp then
68415: LD_VAR 0 2
68419: NOT
68420: IFFALSE 68424
// exit ;
68422: GO 68474
// CenterNowOnUnits ( tmp [ 1 ] ) ;
68424: LD_VAR 0 2
68428: PUSH
68429: LD_INT 1
68431: ARRAY
68432: PPUSH
68433: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
68437: LD_VAR 0 2
68441: PUSH
68442: LD_INT 1
68444: ARRAY
68445: PPUSH
68446: CALL_OW 65
// end ; 5 .. 7 :
68450: GO 68474
68452: LD_INT 5
68454: DOUBLE
68455: GREATEREQUAL
68456: IFFALSE 68464
68458: LD_INT 7
68460: DOUBLE
68461: LESSEQUAL
68462: IFTRUE 68466
68464: GO 68473
68466: POP
// StreamSibBomb ; end ;
68467: CALL 64711 0 0
68471: GO 68474
68473: POP
// end ;
68474: PPOPN 3
68476: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
68477: LD_EXP 38
68481: PUSH
68482: LD_EXP 88
68486: AND
68487: IFFALSE 68643
68489: GO 68491
68491: DISABLE
68492: LD_INT 0
68494: PPUSH
68495: PPUSH
68496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
68497: LD_ADDR_VAR 0 2
68501: PUSH
68502: LD_INT 81
68504: PUSH
68505: LD_OWVAR 2
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 2
68516: PUSH
68517: LD_INT 21
68519: PUSH
68520: LD_INT 1
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 21
68529: PUSH
68530: LD_INT 2
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: LIST
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PPUSH
68546: CALL_OW 69
68550: ST_TO_ADDR
// if not tmp then
68551: LD_VAR 0 2
68555: NOT
68556: IFFALSE 68560
// exit ;
68558: GO 68643
// p := 0 ;
68560: LD_ADDR_VAR 0 3
68564: PUSH
68565: LD_INT 0
68567: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68568: LD_INT 35
68570: PPUSH
68571: CALL_OW 67
// p := p + 1 ;
68575: LD_ADDR_VAR 0 3
68579: PUSH
68580: LD_VAR 0 3
68584: PUSH
68585: LD_INT 1
68587: PLUS
68588: ST_TO_ADDR
// for i in tmp do
68589: LD_ADDR_VAR 0 1
68593: PUSH
68594: LD_VAR 0 2
68598: PUSH
68599: FOR_IN
68600: IFFALSE 68631
// if GetLives ( i ) < 1000 then
68602: LD_VAR 0 1
68606: PPUSH
68607: CALL_OW 256
68611: PUSH
68612: LD_INT 1000
68614: LESS
68615: IFFALSE 68629
// SetLives ( i , 1000 ) ;
68617: LD_VAR 0 1
68621: PPUSH
68622: LD_INT 1000
68624: PPUSH
68625: CALL_OW 234
68629: GO 68599
68631: POP
68632: POP
// until p > 20 ;
68633: LD_VAR 0 3
68637: PUSH
68638: LD_INT 20
68640: GREATER
68641: IFFALSE 68568
// end ;
68643: PPOPN 3
68645: END
// every 0 0$1 trigger StreamModeActive and sTime do
68646: LD_EXP 38
68650: PUSH
68651: LD_EXP 89
68655: AND
68656: IFFALSE 68691
68658: GO 68660
68660: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
68661: LD_INT 28
68663: PPUSH
68664: LD_OWVAR 2
68668: PPUSH
68669: LD_INT 2
68671: PPUSH
68672: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
68676: LD_INT 30
68678: PPUSH
68679: LD_OWVAR 2
68683: PPUSH
68684: LD_INT 2
68686: PPUSH
68687: CALL_OW 322
// end ;
68691: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
68692: LD_EXP 38
68696: PUSH
68697: LD_EXP 90
68701: AND
68702: IFFALSE 68823
68704: GO 68706
68706: DISABLE
68707: LD_INT 0
68709: PPUSH
68710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68711: LD_ADDR_VAR 0 2
68715: PUSH
68716: LD_INT 22
68718: PUSH
68719: LD_OWVAR 2
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 21
68730: PUSH
68731: LD_INT 1
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 3
68740: PUSH
68741: LD_INT 23
68743: PUSH
68744: LD_INT 0
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: LIST
68759: PPUSH
68760: CALL_OW 69
68764: ST_TO_ADDR
// if not tmp then
68765: LD_VAR 0 2
68769: NOT
68770: IFFALSE 68774
// exit ;
68772: GO 68823
// for i in tmp do
68774: LD_ADDR_VAR 0 1
68778: PUSH
68779: LD_VAR 0 2
68783: PUSH
68784: FOR_IN
68785: IFFALSE 68821
// begin if Crawls ( i ) then
68787: LD_VAR 0 1
68791: PPUSH
68792: CALL_OW 318
68796: IFFALSE 68807
// ComWalk ( i ) ;
68798: LD_VAR 0 1
68802: PPUSH
68803: CALL_OW 138
// SetClass ( i , 2 ) ;
68807: LD_VAR 0 1
68811: PPUSH
68812: LD_INT 2
68814: PPUSH
68815: CALL_OW 336
// end ;
68819: GO 68784
68821: POP
68822: POP
// end ;
68823: PPOPN 2
68825: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
68826: LD_EXP 38
68830: PUSH
68831: LD_EXP 91
68835: AND
68836: IFFALSE 69124
68838: GO 68840
68840: DISABLE
68841: LD_INT 0
68843: PPUSH
68844: PPUSH
68845: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
68846: LD_OWVAR 2
68850: PPUSH
68851: LD_INT 9
68853: PPUSH
68854: LD_INT 1
68856: PPUSH
68857: LD_INT 1
68859: PPUSH
68860: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
68864: LD_INT 9
68866: PPUSH
68867: LD_OWVAR 2
68871: PPUSH
68872: CALL_OW 343
// uc_side := 9 ;
68876: LD_ADDR_OWVAR 20
68880: PUSH
68881: LD_INT 9
68883: ST_TO_ADDR
// uc_nation := 2 ;
68884: LD_ADDR_OWVAR 21
68888: PUSH
68889: LD_INT 2
68891: ST_TO_ADDR
// hc_name := Dark Warrior ;
68892: LD_ADDR_OWVAR 26
68896: PUSH
68897: LD_STRING Dark Warrior
68899: ST_TO_ADDR
// hc_gallery :=  ;
68900: LD_ADDR_OWVAR 33
68904: PUSH
68905: LD_STRING 
68907: ST_TO_ADDR
// hc_noskilllimit := true ;
68908: LD_ADDR_OWVAR 76
68912: PUSH
68913: LD_INT 1
68915: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
68916: LD_ADDR_OWVAR 31
68920: PUSH
68921: LD_INT 30
68923: PUSH
68924: LD_INT 30
68926: PUSH
68927: LD_INT 30
68929: PUSH
68930: LD_INT 30
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: ST_TO_ADDR
// un := CreateHuman ;
68939: LD_ADDR_VAR 0 3
68943: PUSH
68944: CALL_OW 44
68948: ST_TO_ADDR
// hc_noskilllimit := false ;
68949: LD_ADDR_OWVAR 76
68953: PUSH
68954: LD_INT 0
68956: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68957: LD_VAR 0 3
68961: PPUSH
68962: LD_INT 1
68964: PPUSH
68965: CALL_OW 51
// ToLua ( playRanger() ) ;
68969: LD_STRING playRanger()
68971: PPUSH
68972: CALL_OW 559
// p := 0 ;
68976: LD_ADDR_VAR 0 2
68980: PUSH
68981: LD_INT 0
68983: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68984: LD_INT 35
68986: PPUSH
68987: CALL_OW 67
// p := p + 1 ;
68991: LD_ADDR_VAR 0 2
68995: PUSH
68996: LD_VAR 0 2
69000: PUSH
69001: LD_INT 1
69003: PLUS
69004: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69005: LD_VAR 0 3
69009: PPUSH
69010: CALL_OW 256
69014: PUSH
69015: LD_INT 1000
69017: LESS
69018: IFFALSE 69032
// SetLives ( un , 1000 ) ;
69020: LD_VAR 0 3
69024: PPUSH
69025: LD_INT 1000
69027: PPUSH
69028: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69032: LD_VAR 0 3
69036: PPUSH
69037: LD_INT 81
69039: PUSH
69040: LD_OWVAR 2
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 91
69051: PUSH
69052: LD_VAR 0 3
69056: PUSH
69057: LD_INT 30
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: LIST
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PPUSH
69069: CALL_OW 69
69073: PPUSH
69074: LD_VAR 0 3
69078: PPUSH
69079: CALL_OW 74
69083: PPUSH
69084: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
69088: LD_VAR 0 2
69092: PUSH
69093: LD_INT 80
69095: GREATER
69096: PUSH
69097: LD_VAR 0 3
69101: PPUSH
69102: CALL_OW 301
69106: OR
69107: IFFALSE 68984
// if un then
69109: LD_VAR 0 3
69113: IFFALSE 69124
// RemoveUnit ( un ) ;
69115: LD_VAR 0 3
69119: PPUSH
69120: CALL_OW 64
// end ;
69124: PPOPN 3
69126: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
69127: LD_EXP 92
69131: IFFALSE 69247
69133: GO 69135
69135: DISABLE
69136: LD_INT 0
69138: PPUSH
69139: PPUSH
69140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69141: LD_ADDR_VAR 0 2
69145: PUSH
69146: LD_INT 81
69148: PUSH
69149: LD_OWVAR 2
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 21
69160: PUSH
69161: LD_INT 1
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PPUSH
69172: CALL_OW 69
69176: ST_TO_ADDR
// ToLua ( playComputer() ) ;
69177: LD_STRING playComputer()
69179: PPUSH
69180: CALL_OW 559
// if not tmp then
69184: LD_VAR 0 2
69188: NOT
69189: IFFALSE 69193
// exit ;
69191: GO 69247
// for i in tmp do
69193: LD_ADDR_VAR 0 1
69197: PUSH
69198: LD_VAR 0 2
69202: PUSH
69203: FOR_IN
69204: IFFALSE 69245
// for j := 1 to 4 do
69206: LD_ADDR_VAR 0 3
69210: PUSH
69211: DOUBLE
69212: LD_INT 1
69214: DEC
69215: ST_TO_ADDR
69216: LD_INT 4
69218: PUSH
69219: FOR_TO
69220: IFFALSE 69241
// SetSkill ( i , j , 10 ) ;
69222: LD_VAR 0 1
69226: PPUSH
69227: LD_VAR 0 3
69231: PPUSH
69232: LD_INT 10
69234: PPUSH
69235: CALL_OW 237
69239: GO 69219
69241: POP
69242: POP
69243: GO 69203
69245: POP
69246: POP
// end ;
69247: PPOPN 3
69249: END
// every 0 0$1 trigger s30 do var i , tmp ;
69250: LD_EXP 93
69254: IFFALSE 69323
69256: GO 69258
69258: DISABLE
69259: LD_INT 0
69261: PPUSH
69262: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69263: LD_ADDR_VAR 0 2
69267: PUSH
69268: LD_INT 22
69270: PUSH
69271: LD_OWVAR 2
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PPUSH
69280: CALL_OW 69
69284: ST_TO_ADDR
// if not tmp then
69285: LD_VAR 0 2
69289: NOT
69290: IFFALSE 69294
// exit ;
69292: GO 69323
// for i in tmp do
69294: LD_ADDR_VAR 0 1
69298: PUSH
69299: LD_VAR 0 2
69303: PUSH
69304: FOR_IN
69305: IFFALSE 69321
// SetLives ( i , 300 ) ;
69307: LD_VAR 0 1
69311: PPUSH
69312: LD_INT 300
69314: PPUSH
69315: CALL_OW 234
69319: GO 69304
69321: POP
69322: POP
// end ;
69323: PPOPN 2
69325: END
// every 0 0$1 trigger s60 do var i , tmp ;
69326: LD_EXP 94
69330: IFFALSE 69399
69332: GO 69334
69334: DISABLE
69335: LD_INT 0
69337: PPUSH
69338: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69339: LD_ADDR_VAR 0 2
69343: PUSH
69344: LD_INT 22
69346: PUSH
69347: LD_OWVAR 2
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PPUSH
69356: CALL_OW 69
69360: ST_TO_ADDR
// if not tmp then
69361: LD_VAR 0 2
69365: NOT
69366: IFFALSE 69370
// exit ;
69368: GO 69399
// for i in tmp do
69370: LD_ADDR_VAR 0 1
69374: PUSH
69375: LD_VAR 0 2
69379: PUSH
69380: FOR_IN
69381: IFFALSE 69397
// SetLives ( i , 600 ) ;
69383: LD_VAR 0 1
69387: PPUSH
69388: LD_INT 600
69390: PPUSH
69391: CALL_OW 234
69395: GO 69380
69397: POP
69398: POP
// end ;
69399: PPOPN 2
69401: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69402: LD_INT 0
69404: PPUSH
// case cmd of 301 :
69405: LD_VAR 0 1
69409: PUSH
69410: LD_INT 301
69412: DOUBLE
69413: EQUAL
69414: IFTRUE 69418
69416: GO 69450
69418: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
69419: LD_VAR 0 6
69423: PPUSH
69424: LD_VAR 0 7
69428: PPUSH
69429: LD_VAR 0 8
69433: PPUSH
69434: LD_VAR 0 4
69438: PPUSH
69439: LD_VAR 0 5
69443: PPUSH
69444: CALL 70659 0 5
69448: GO 69571
69450: LD_INT 302
69452: DOUBLE
69453: EQUAL
69454: IFTRUE 69458
69456: GO 69495
69458: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
69459: LD_VAR 0 6
69463: PPUSH
69464: LD_VAR 0 7
69468: PPUSH
69469: LD_VAR 0 8
69473: PPUSH
69474: LD_VAR 0 9
69478: PPUSH
69479: LD_VAR 0 4
69483: PPUSH
69484: LD_VAR 0 5
69488: PPUSH
69489: CALL 70750 0 6
69493: GO 69571
69495: LD_INT 303
69497: DOUBLE
69498: EQUAL
69499: IFTRUE 69503
69501: GO 69540
69503: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
69504: LD_VAR 0 6
69508: PPUSH
69509: LD_VAR 0 7
69513: PPUSH
69514: LD_VAR 0 8
69518: PPUSH
69519: LD_VAR 0 9
69523: PPUSH
69524: LD_VAR 0 4
69528: PPUSH
69529: LD_VAR 0 5
69533: PPUSH
69534: CALL 69576 0 6
69538: GO 69571
69540: LD_INT 304
69542: DOUBLE
69543: EQUAL
69544: IFTRUE 69548
69546: GO 69570
69548: POP
// hHackTeleport ( unit , x , y ) ; end ;
69549: LD_VAR 0 2
69553: PPUSH
69554: LD_VAR 0 4
69558: PPUSH
69559: LD_VAR 0 5
69563: PPUSH
69564: CALL 71343 0 3
69568: GO 69571
69570: POP
// end ;
69571: LD_VAR 0 12
69575: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
69576: LD_INT 0
69578: PPUSH
69579: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
69580: LD_VAR 0 1
69584: PUSH
69585: LD_INT 1
69587: LESS
69588: PUSH
69589: LD_VAR 0 1
69593: PUSH
69594: LD_INT 3
69596: GREATER
69597: OR
69598: PUSH
69599: LD_VAR 0 5
69603: PPUSH
69604: LD_VAR 0 6
69608: PPUSH
69609: CALL_OW 428
69613: OR
69614: IFFALSE 69618
// exit ;
69616: GO 70346
// uc_side := your_side ;
69618: LD_ADDR_OWVAR 20
69622: PUSH
69623: LD_OWVAR 2
69627: ST_TO_ADDR
// uc_nation := nation ;
69628: LD_ADDR_OWVAR 21
69632: PUSH
69633: LD_VAR 0 1
69637: ST_TO_ADDR
// bc_level = 1 ;
69638: LD_ADDR_OWVAR 43
69642: PUSH
69643: LD_INT 1
69645: ST_TO_ADDR
// case btype of 1 :
69646: LD_VAR 0 2
69650: PUSH
69651: LD_INT 1
69653: DOUBLE
69654: EQUAL
69655: IFTRUE 69659
69657: GO 69670
69659: POP
// bc_type := b_depot ; 2 :
69660: LD_ADDR_OWVAR 42
69664: PUSH
69665: LD_INT 0
69667: ST_TO_ADDR
69668: GO 70290
69670: LD_INT 2
69672: DOUBLE
69673: EQUAL
69674: IFTRUE 69678
69676: GO 69689
69678: POP
// bc_type := b_warehouse ; 3 :
69679: LD_ADDR_OWVAR 42
69683: PUSH
69684: LD_INT 1
69686: ST_TO_ADDR
69687: GO 70290
69689: LD_INT 3
69691: DOUBLE
69692: EQUAL
69693: IFTRUE 69697
69695: GO 69708
69697: POP
// bc_type := b_lab ; 4 .. 9 :
69698: LD_ADDR_OWVAR 42
69702: PUSH
69703: LD_INT 6
69705: ST_TO_ADDR
69706: GO 70290
69708: LD_INT 4
69710: DOUBLE
69711: GREATEREQUAL
69712: IFFALSE 69720
69714: LD_INT 9
69716: DOUBLE
69717: LESSEQUAL
69718: IFTRUE 69722
69720: GO 69782
69722: POP
// begin bc_type := b_lab_half ;
69723: LD_ADDR_OWVAR 42
69727: PUSH
69728: LD_INT 7
69730: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
69731: LD_ADDR_OWVAR 44
69735: PUSH
69736: LD_INT 10
69738: PUSH
69739: LD_INT 11
69741: PUSH
69742: LD_INT 12
69744: PUSH
69745: LD_INT 15
69747: PUSH
69748: LD_INT 14
69750: PUSH
69751: LD_INT 13
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: PUSH
69762: LD_VAR 0 2
69766: PUSH
69767: LD_INT 3
69769: MINUS
69770: ARRAY
69771: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
69772: LD_ADDR_OWVAR 45
69776: PUSH
69777: LD_INT 9
69779: ST_TO_ADDR
// end ; 10 .. 13 :
69780: GO 70290
69782: LD_INT 10
69784: DOUBLE
69785: GREATEREQUAL
69786: IFFALSE 69794
69788: LD_INT 13
69790: DOUBLE
69791: LESSEQUAL
69792: IFTRUE 69796
69794: GO 69873
69796: POP
// begin bc_type := b_lab_full ;
69797: LD_ADDR_OWVAR 42
69801: PUSH
69802: LD_INT 8
69804: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
69805: LD_ADDR_OWVAR 44
69809: PUSH
69810: LD_INT 10
69812: PUSH
69813: LD_INT 12
69815: PUSH
69816: LD_INT 14
69818: PUSH
69819: LD_INT 13
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: PUSH
69828: LD_VAR 0 2
69832: PUSH
69833: LD_INT 9
69835: MINUS
69836: ARRAY
69837: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
69838: LD_ADDR_OWVAR 45
69842: PUSH
69843: LD_INT 11
69845: PUSH
69846: LD_INT 15
69848: PUSH
69849: LD_INT 12
69851: PUSH
69852: LD_INT 15
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: PUSH
69861: LD_VAR 0 2
69865: PUSH
69866: LD_INT 9
69868: MINUS
69869: ARRAY
69870: ST_TO_ADDR
// end ; 14 :
69871: GO 70290
69873: LD_INT 14
69875: DOUBLE
69876: EQUAL
69877: IFTRUE 69881
69879: GO 69892
69881: POP
// bc_type := b_workshop ; 15 :
69882: LD_ADDR_OWVAR 42
69886: PUSH
69887: LD_INT 2
69889: ST_TO_ADDR
69890: GO 70290
69892: LD_INT 15
69894: DOUBLE
69895: EQUAL
69896: IFTRUE 69900
69898: GO 69911
69900: POP
// bc_type := b_factory ; 16 :
69901: LD_ADDR_OWVAR 42
69905: PUSH
69906: LD_INT 3
69908: ST_TO_ADDR
69909: GO 70290
69911: LD_INT 16
69913: DOUBLE
69914: EQUAL
69915: IFTRUE 69919
69917: GO 69930
69919: POP
// bc_type := b_ext_gun ; 17 :
69920: LD_ADDR_OWVAR 42
69924: PUSH
69925: LD_INT 17
69927: ST_TO_ADDR
69928: GO 70290
69930: LD_INT 17
69932: DOUBLE
69933: EQUAL
69934: IFTRUE 69938
69936: GO 69966
69938: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
69939: LD_ADDR_OWVAR 42
69943: PUSH
69944: LD_INT 19
69946: PUSH
69947: LD_INT 23
69949: PUSH
69950: LD_INT 19
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: LIST
69957: PUSH
69958: LD_VAR 0 1
69962: ARRAY
69963: ST_TO_ADDR
69964: GO 70290
69966: LD_INT 18
69968: DOUBLE
69969: EQUAL
69970: IFTRUE 69974
69972: GO 69985
69974: POP
// bc_type := b_ext_radar ; 19 :
69975: LD_ADDR_OWVAR 42
69979: PUSH
69980: LD_INT 20
69982: ST_TO_ADDR
69983: GO 70290
69985: LD_INT 19
69987: DOUBLE
69988: EQUAL
69989: IFTRUE 69993
69991: GO 70004
69993: POP
// bc_type := b_ext_radio ; 20 :
69994: LD_ADDR_OWVAR 42
69998: PUSH
69999: LD_INT 22
70001: ST_TO_ADDR
70002: GO 70290
70004: LD_INT 20
70006: DOUBLE
70007: EQUAL
70008: IFTRUE 70012
70010: GO 70023
70012: POP
// bc_type := b_ext_siberium ; 21 :
70013: LD_ADDR_OWVAR 42
70017: PUSH
70018: LD_INT 21
70020: ST_TO_ADDR
70021: GO 70290
70023: LD_INT 21
70025: DOUBLE
70026: EQUAL
70027: IFTRUE 70031
70029: GO 70042
70031: POP
// bc_type := b_ext_computer ; 22 :
70032: LD_ADDR_OWVAR 42
70036: PUSH
70037: LD_INT 24
70039: ST_TO_ADDR
70040: GO 70290
70042: LD_INT 22
70044: DOUBLE
70045: EQUAL
70046: IFTRUE 70050
70048: GO 70061
70050: POP
// bc_type := b_ext_track ; 23 :
70051: LD_ADDR_OWVAR 42
70055: PUSH
70056: LD_INT 16
70058: ST_TO_ADDR
70059: GO 70290
70061: LD_INT 23
70063: DOUBLE
70064: EQUAL
70065: IFTRUE 70069
70067: GO 70080
70069: POP
// bc_type := b_ext_laser ; 24 :
70070: LD_ADDR_OWVAR 42
70074: PUSH
70075: LD_INT 25
70077: ST_TO_ADDR
70078: GO 70290
70080: LD_INT 24
70082: DOUBLE
70083: EQUAL
70084: IFTRUE 70088
70086: GO 70099
70088: POP
// bc_type := b_control_tower ; 25 :
70089: LD_ADDR_OWVAR 42
70093: PUSH
70094: LD_INT 36
70096: ST_TO_ADDR
70097: GO 70290
70099: LD_INT 25
70101: DOUBLE
70102: EQUAL
70103: IFTRUE 70107
70105: GO 70118
70107: POP
// bc_type := b_breastwork ; 26 :
70108: LD_ADDR_OWVAR 42
70112: PUSH
70113: LD_INT 31
70115: ST_TO_ADDR
70116: GO 70290
70118: LD_INT 26
70120: DOUBLE
70121: EQUAL
70122: IFTRUE 70126
70124: GO 70137
70126: POP
// bc_type := b_bunker ; 27 :
70127: LD_ADDR_OWVAR 42
70131: PUSH
70132: LD_INT 32
70134: ST_TO_ADDR
70135: GO 70290
70137: LD_INT 27
70139: DOUBLE
70140: EQUAL
70141: IFTRUE 70145
70143: GO 70156
70145: POP
// bc_type := b_turret ; 28 :
70146: LD_ADDR_OWVAR 42
70150: PUSH
70151: LD_INT 33
70153: ST_TO_ADDR
70154: GO 70290
70156: LD_INT 28
70158: DOUBLE
70159: EQUAL
70160: IFTRUE 70164
70162: GO 70175
70164: POP
// bc_type := b_armoury ; 29 :
70165: LD_ADDR_OWVAR 42
70169: PUSH
70170: LD_INT 4
70172: ST_TO_ADDR
70173: GO 70290
70175: LD_INT 29
70177: DOUBLE
70178: EQUAL
70179: IFTRUE 70183
70181: GO 70194
70183: POP
// bc_type := b_barracks ; 30 :
70184: LD_ADDR_OWVAR 42
70188: PUSH
70189: LD_INT 5
70191: ST_TO_ADDR
70192: GO 70290
70194: LD_INT 30
70196: DOUBLE
70197: EQUAL
70198: IFTRUE 70202
70200: GO 70213
70202: POP
// bc_type := b_solar_power ; 31 :
70203: LD_ADDR_OWVAR 42
70207: PUSH
70208: LD_INT 27
70210: ST_TO_ADDR
70211: GO 70290
70213: LD_INT 31
70215: DOUBLE
70216: EQUAL
70217: IFTRUE 70221
70219: GO 70232
70221: POP
// bc_type := b_oil_power ; 32 :
70222: LD_ADDR_OWVAR 42
70226: PUSH
70227: LD_INT 26
70229: ST_TO_ADDR
70230: GO 70290
70232: LD_INT 32
70234: DOUBLE
70235: EQUAL
70236: IFTRUE 70240
70238: GO 70251
70240: POP
// bc_type := b_siberite_power ; 33 :
70241: LD_ADDR_OWVAR 42
70245: PUSH
70246: LD_INT 28
70248: ST_TO_ADDR
70249: GO 70290
70251: LD_INT 33
70253: DOUBLE
70254: EQUAL
70255: IFTRUE 70259
70257: GO 70270
70259: POP
// bc_type := b_oil_mine ; 34 :
70260: LD_ADDR_OWVAR 42
70264: PUSH
70265: LD_INT 29
70267: ST_TO_ADDR
70268: GO 70290
70270: LD_INT 34
70272: DOUBLE
70273: EQUAL
70274: IFTRUE 70278
70276: GO 70289
70278: POP
// bc_type := b_siberite_mine ; end ;
70279: LD_ADDR_OWVAR 42
70283: PUSH
70284: LD_INT 30
70286: ST_TO_ADDR
70287: GO 70290
70289: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70290: LD_ADDR_VAR 0 8
70294: PUSH
70295: LD_VAR 0 5
70299: PPUSH
70300: LD_VAR 0 6
70304: PPUSH
70305: LD_VAR 0 3
70309: PPUSH
70310: CALL_OW 47
70314: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70315: LD_OWVAR 42
70319: PUSH
70320: LD_INT 32
70322: PUSH
70323: LD_INT 33
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: IN
70330: IFFALSE 70346
// PlaceWeaponTurret ( b , weapon ) ;
70332: LD_VAR 0 8
70336: PPUSH
70337: LD_VAR 0 4
70341: PPUSH
70342: CALL_OW 431
// end ;
70346: LD_VAR 0 7
70350: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70351: LD_INT 0
70353: PPUSH
70354: PPUSH
70355: PPUSH
70356: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70357: LD_ADDR_VAR 0 4
70361: PUSH
70362: LD_INT 22
70364: PUSH
70365: LD_OWVAR 2
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 2
70376: PUSH
70377: LD_INT 30
70379: PUSH
70380: LD_INT 0
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 30
70389: PUSH
70390: LD_INT 1
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: LIST
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PPUSH
70406: CALL_OW 69
70410: ST_TO_ADDR
// if not tmp then
70411: LD_VAR 0 4
70415: NOT
70416: IFFALSE 70420
// exit ;
70418: GO 70479
// for i in tmp do
70420: LD_ADDR_VAR 0 2
70424: PUSH
70425: LD_VAR 0 4
70429: PUSH
70430: FOR_IN
70431: IFFALSE 70477
// for j = 1 to 3 do
70433: LD_ADDR_VAR 0 3
70437: PUSH
70438: DOUBLE
70439: LD_INT 1
70441: DEC
70442: ST_TO_ADDR
70443: LD_INT 3
70445: PUSH
70446: FOR_TO
70447: IFFALSE 70473
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70449: LD_VAR 0 2
70453: PPUSH
70454: CALL_OW 274
70458: PPUSH
70459: LD_VAR 0 3
70463: PPUSH
70464: LD_INT 99999
70466: PPUSH
70467: CALL_OW 277
70471: GO 70446
70473: POP
70474: POP
70475: GO 70430
70477: POP
70478: POP
// end ;
70479: LD_VAR 0 1
70483: RET
// export function hHackSetLevel10 ; var i , j ; begin
70484: LD_INT 0
70486: PPUSH
70487: PPUSH
70488: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70489: LD_ADDR_VAR 0 2
70493: PUSH
70494: LD_INT 21
70496: PUSH
70497: LD_INT 1
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PPUSH
70504: CALL_OW 69
70508: PUSH
70509: FOR_IN
70510: IFFALSE 70562
// if IsSelected ( i ) then
70512: LD_VAR 0 2
70516: PPUSH
70517: CALL_OW 306
70521: IFFALSE 70560
// begin for j := 1 to 4 do
70523: LD_ADDR_VAR 0 3
70527: PUSH
70528: DOUBLE
70529: LD_INT 1
70531: DEC
70532: ST_TO_ADDR
70533: LD_INT 4
70535: PUSH
70536: FOR_TO
70537: IFFALSE 70558
// SetSkill ( i , j , 10 ) ;
70539: LD_VAR 0 2
70543: PPUSH
70544: LD_VAR 0 3
70548: PPUSH
70549: LD_INT 10
70551: PPUSH
70552: CALL_OW 237
70556: GO 70536
70558: POP
70559: POP
// end ;
70560: GO 70509
70562: POP
70563: POP
// end ;
70564: LD_VAR 0 1
70568: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
70569: LD_INT 0
70571: PPUSH
70572: PPUSH
70573: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
70574: LD_ADDR_VAR 0 2
70578: PUSH
70579: LD_INT 22
70581: PUSH
70582: LD_OWVAR 2
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 21
70593: PUSH
70594: LD_INT 1
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PPUSH
70605: CALL_OW 69
70609: PUSH
70610: FOR_IN
70611: IFFALSE 70652
// begin for j := 1 to 4 do
70613: LD_ADDR_VAR 0 3
70617: PUSH
70618: DOUBLE
70619: LD_INT 1
70621: DEC
70622: ST_TO_ADDR
70623: LD_INT 4
70625: PUSH
70626: FOR_TO
70627: IFFALSE 70648
// SetSkill ( i , j , 10 ) ;
70629: LD_VAR 0 2
70633: PPUSH
70634: LD_VAR 0 3
70638: PPUSH
70639: LD_INT 10
70641: PPUSH
70642: CALL_OW 237
70646: GO 70626
70648: POP
70649: POP
// end ;
70650: GO 70610
70652: POP
70653: POP
// end ;
70654: LD_VAR 0 1
70658: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
70659: LD_INT 0
70661: PPUSH
// uc_side := your_side ;
70662: LD_ADDR_OWVAR 20
70666: PUSH
70667: LD_OWVAR 2
70671: ST_TO_ADDR
// uc_nation := nation ;
70672: LD_ADDR_OWVAR 21
70676: PUSH
70677: LD_VAR 0 1
70681: ST_TO_ADDR
// InitHc ;
70682: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
70686: LD_INT 0
70688: PPUSH
70689: LD_VAR 0 2
70693: PPUSH
70694: LD_VAR 0 3
70698: PPUSH
70699: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
70703: LD_VAR 0 4
70707: PPUSH
70708: LD_VAR 0 5
70712: PPUSH
70713: CALL_OW 428
70717: PUSH
70718: LD_INT 0
70720: EQUAL
70721: IFFALSE 70745
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
70723: CALL_OW 44
70727: PPUSH
70728: LD_VAR 0 4
70732: PPUSH
70733: LD_VAR 0 5
70737: PPUSH
70738: LD_INT 1
70740: PPUSH
70741: CALL_OW 48
// end ;
70745: LD_VAR 0 6
70749: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
70750: LD_INT 0
70752: PPUSH
70753: PPUSH
// uc_side := your_side ;
70754: LD_ADDR_OWVAR 20
70758: PUSH
70759: LD_OWVAR 2
70763: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
70764: LD_VAR 0 1
70768: PUSH
70769: LD_INT 1
70771: PUSH
70772: LD_INT 2
70774: PUSH
70775: LD_INT 3
70777: PUSH
70778: LD_INT 4
70780: PUSH
70781: LD_INT 5
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: IN
70791: IFFALSE 70803
// uc_nation := nation_american else
70793: LD_ADDR_OWVAR 21
70797: PUSH
70798: LD_INT 1
70800: ST_TO_ADDR
70801: GO 70846
// if chassis in [ 11 , 12 , 13 , 14 ] then
70803: LD_VAR 0 1
70807: PUSH
70808: LD_INT 11
70810: PUSH
70811: LD_INT 12
70813: PUSH
70814: LD_INT 13
70816: PUSH
70817: LD_INT 14
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: IN
70826: IFFALSE 70838
// uc_nation := nation_arabian else
70828: LD_ADDR_OWVAR 21
70832: PUSH
70833: LD_INT 2
70835: ST_TO_ADDR
70836: GO 70846
// uc_nation := nation_russian ;
70838: LD_ADDR_OWVAR 21
70842: PUSH
70843: LD_INT 3
70845: ST_TO_ADDR
// vc_chassis := chassis ;
70846: LD_ADDR_OWVAR 37
70850: PUSH
70851: LD_VAR 0 1
70855: ST_TO_ADDR
// vc_engine := engine ;
70856: LD_ADDR_OWVAR 39
70860: PUSH
70861: LD_VAR 0 2
70865: ST_TO_ADDR
// vc_control := control ;
70866: LD_ADDR_OWVAR 38
70870: PUSH
70871: LD_VAR 0 3
70875: ST_TO_ADDR
// vc_weapon := weapon ;
70876: LD_ADDR_OWVAR 40
70880: PUSH
70881: LD_VAR 0 4
70885: ST_TO_ADDR
// un := CreateVehicle ;
70886: LD_ADDR_VAR 0 8
70890: PUSH
70891: CALL_OW 45
70895: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
70896: LD_VAR 0 8
70900: PPUSH
70901: LD_INT 0
70903: PPUSH
70904: LD_INT 5
70906: PPUSH
70907: CALL_OW 12
70911: PPUSH
70912: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
70916: LD_VAR 0 8
70920: PPUSH
70921: LD_VAR 0 5
70925: PPUSH
70926: LD_VAR 0 6
70930: PPUSH
70931: LD_INT 1
70933: PPUSH
70934: CALL_OW 48
// end ;
70938: LD_VAR 0 7
70942: RET
// export hInvincible ; every 1 do
70943: GO 70945
70945: DISABLE
// hInvincible := [ ] ;
70946: LD_ADDR_EXP 95
70950: PUSH
70951: EMPTY
70952: ST_TO_ADDR
70953: END
// every 10 do var i ;
70954: GO 70956
70956: DISABLE
70957: LD_INT 0
70959: PPUSH
// begin enable ;
70960: ENABLE
// if not hInvincible then
70961: LD_EXP 95
70965: NOT
70966: IFFALSE 70970
// exit ;
70968: GO 71014
// for i in hInvincible do
70970: LD_ADDR_VAR 0 1
70974: PUSH
70975: LD_EXP 95
70979: PUSH
70980: FOR_IN
70981: IFFALSE 71012
// if GetLives ( i ) < 1000 then
70983: LD_VAR 0 1
70987: PPUSH
70988: CALL_OW 256
70992: PUSH
70993: LD_INT 1000
70995: LESS
70996: IFFALSE 71010
// SetLives ( i , 1000 ) ;
70998: LD_VAR 0 1
71002: PPUSH
71003: LD_INT 1000
71005: PPUSH
71006: CALL_OW 234
71010: GO 70980
71012: POP
71013: POP
// end ;
71014: PPOPN 1
71016: END
// export function hHackInvincible ; var i ; begin
71017: LD_INT 0
71019: PPUSH
71020: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71021: LD_ADDR_VAR 0 2
71025: PUSH
71026: LD_INT 2
71028: PUSH
71029: LD_INT 21
71031: PUSH
71032: LD_INT 1
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: LD_INT 21
71041: PUSH
71042: LD_INT 2
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: LIST
71053: PPUSH
71054: CALL_OW 69
71058: PUSH
71059: FOR_IN
71060: IFFALSE 71121
// if IsSelected ( i ) then
71062: LD_VAR 0 2
71066: PPUSH
71067: CALL_OW 306
71071: IFFALSE 71119
// begin if i in hInvincible then
71073: LD_VAR 0 2
71077: PUSH
71078: LD_EXP 95
71082: IN
71083: IFFALSE 71103
// hInvincible := hInvincible diff i else
71085: LD_ADDR_EXP 95
71089: PUSH
71090: LD_EXP 95
71094: PUSH
71095: LD_VAR 0 2
71099: DIFF
71100: ST_TO_ADDR
71101: GO 71119
// hInvincible := hInvincible union i ;
71103: LD_ADDR_EXP 95
71107: PUSH
71108: LD_EXP 95
71112: PUSH
71113: LD_VAR 0 2
71117: UNION
71118: ST_TO_ADDR
// end ;
71119: GO 71059
71121: POP
71122: POP
// end ;
71123: LD_VAR 0 1
71127: RET
// export function hHackInvisible ; var i , j ; begin
71128: LD_INT 0
71130: PPUSH
71131: PPUSH
71132: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71133: LD_ADDR_VAR 0 2
71137: PUSH
71138: LD_INT 21
71140: PUSH
71141: LD_INT 1
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PPUSH
71148: CALL_OW 69
71152: PUSH
71153: FOR_IN
71154: IFFALSE 71178
// if IsSelected ( i ) then
71156: LD_VAR 0 2
71160: PPUSH
71161: CALL_OW 306
71165: IFFALSE 71176
// ComForceInvisible ( i ) ;
71167: LD_VAR 0 2
71171: PPUSH
71172: CALL_OW 496
71176: GO 71153
71178: POP
71179: POP
// end ;
71180: LD_VAR 0 1
71184: RET
// export function hHackChangeYourSide ; begin
71185: LD_INT 0
71187: PPUSH
// if your_side = 8 then
71188: LD_OWVAR 2
71192: PUSH
71193: LD_INT 8
71195: EQUAL
71196: IFFALSE 71208
// your_side := 0 else
71198: LD_ADDR_OWVAR 2
71202: PUSH
71203: LD_INT 0
71205: ST_TO_ADDR
71206: GO 71222
// your_side := your_side + 1 ;
71208: LD_ADDR_OWVAR 2
71212: PUSH
71213: LD_OWVAR 2
71217: PUSH
71218: LD_INT 1
71220: PLUS
71221: ST_TO_ADDR
// end ;
71222: LD_VAR 0 1
71226: RET
// export function hHackChangeUnitSide ; var i , j ; begin
71227: LD_INT 0
71229: PPUSH
71230: PPUSH
71231: PPUSH
// for i in all_units do
71232: LD_ADDR_VAR 0 2
71236: PUSH
71237: LD_OWVAR 3
71241: PUSH
71242: FOR_IN
71243: IFFALSE 71321
// if IsSelected ( i ) then
71245: LD_VAR 0 2
71249: PPUSH
71250: CALL_OW 306
71254: IFFALSE 71319
// begin j := GetSide ( i ) ;
71256: LD_ADDR_VAR 0 3
71260: PUSH
71261: LD_VAR 0 2
71265: PPUSH
71266: CALL_OW 255
71270: ST_TO_ADDR
// if j = 8 then
71271: LD_VAR 0 3
71275: PUSH
71276: LD_INT 8
71278: EQUAL
71279: IFFALSE 71291
// j := 0 else
71281: LD_ADDR_VAR 0 3
71285: PUSH
71286: LD_INT 0
71288: ST_TO_ADDR
71289: GO 71305
// j := j + 1 ;
71291: LD_ADDR_VAR 0 3
71295: PUSH
71296: LD_VAR 0 3
71300: PUSH
71301: LD_INT 1
71303: PLUS
71304: ST_TO_ADDR
// SetSide ( i , j ) ;
71305: LD_VAR 0 2
71309: PPUSH
71310: LD_VAR 0 3
71314: PPUSH
71315: CALL_OW 235
// end ;
71319: GO 71242
71321: POP
71322: POP
// end ;
71323: LD_VAR 0 1
71327: RET
// export function hHackFog ; begin
71328: LD_INT 0
71330: PPUSH
// FogOff ( true ) ;
71331: LD_INT 1
71333: PPUSH
71334: CALL_OW 344
// end ;
71338: LD_VAR 0 1
71342: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71343: LD_INT 0
71345: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71346: LD_VAR 0 1
71350: PPUSH
71351: LD_VAR 0 2
71355: PPUSH
71356: LD_VAR 0 3
71360: PPUSH
71361: LD_INT 1
71363: PPUSH
71364: LD_INT 1
71366: PPUSH
71367: CALL_OW 483
// CenterOnXY ( x , y ) ;
71371: LD_VAR 0 2
71375: PPUSH
71376: LD_VAR 0 3
71380: PPUSH
71381: CALL_OW 84
// end ;
71385: LD_VAR 0 4
71389: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
71390: LD_INT 0
71392: PPUSH
71393: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
71394: LD_VAR 0 1
71398: NOT
71399: PUSH
71400: LD_VAR 0 2
71404: PPUSH
71405: LD_VAR 0 3
71409: PPUSH
71410: CALL_OW 488
71414: NOT
71415: OR
71416: PUSH
71417: LD_VAR 0 1
71421: PPUSH
71422: CALL_OW 266
71426: PUSH
71427: LD_INT 3
71429: NONEQUAL
71430: PUSH
71431: LD_VAR 0 1
71435: PPUSH
71436: CALL_OW 247
71440: PUSH
71441: LD_INT 1
71443: EQUAL
71444: NOT
71445: AND
71446: OR
71447: IFFALSE 71451
// exit ;
71449: GO 71600
// if GetType ( factory ) = unit_human then
71451: LD_VAR 0 1
71455: PPUSH
71456: CALL_OW 247
71460: PUSH
71461: LD_INT 1
71463: EQUAL
71464: IFFALSE 71481
// factory := IsInUnit ( factory ) ;
71466: LD_ADDR_VAR 0 1
71470: PUSH
71471: LD_VAR 0 1
71475: PPUSH
71476: CALL_OW 310
71480: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
71481: LD_VAR 0 1
71485: PPUSH
71486: CALL_OW 266
71490: PUSH
71491: LD_INT 3
71493: NONEQUAL
71494: IFFALSE 71498
// exit ;
71496: GO 71600
// if HexInfo ( x , y ) = factory then
71498: LD_VAR 0 2
71502: PPUSH
71503: LD_VAR 0 3
71507: PPUSH
71508: CALL_OW 428
71512: PUSH
71513: LD_VAR 0 1
71517: EQUAL
71518: IFFALSE 71545
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
71520: LD_ADDR_EXP 96
71524: PUSH
71525: LD_EXP 96
71529: PPUSH
71530: LD_VAR 0 1
71534: PPUSH
71535: LD_INT 0
71537: PPUSH
71538: CALL_OW 1
71542: ST_TO_ADDR
71543: GO 71596
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
71545: LD_ADDR_EXP 96
71549: PUSH
71550: LD_EXP 96
71554: PPUSH
71555: LD_VAR 0 1
71559: PPUSH
71560: LD_VAR 0 1
71564: PPUSH
71565: CALL_OW 255
71569: PUSH
71570: LD_VAR 0 1
71574: PUSH
71575: LD_VAR 0 2
71579: PUSH
71580: LD_VAR 0 3
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: PPUSH
71591: CALL_OW 1
71595: ST_TO_ADDR
// UpdateFactoryWaypoints ;
71596: CALL 71605 0 0
// end ;
71600: LD_VAR 0 4
71604: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
71605: LD_INT 0
71607: PPUSH
71608: PPUSH
71609: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
71610: LD_STRING resetFactoryWaypoint();
71612: PPUSH
71613: CALL_OW 559
// if factoryWaypoints then
71617: LD_EXP 96
71621: IFFALSE 71747
// begin list := PrepareArray ( factoryWaypoints ) ;
71623: LD_ADDR_VAR 0 3
71627: PUSH
71628: LD_EXP 96
71632: PPUSH
71633: CALL 56383 0 1
71637: ST_TO_ADDR
// for i := 1 to list do
71638: LD_ADDR_VAR 0 2
71642: PUSH
71643: DOUBLE
71644: LD_INT 1
71646: DEC
71647: ST_TO_ADDR
71648: LD_VAR 0 3
71652: PUSH
71653: FOR_TO
71654: IFFALSE 71745
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
71656: LD_STRING setFactoryWaypointXY(
71658: PUSH
71659: LD_VAR 0 3
71663: PUSH
71664: LD_VAR 0 2
71668: ARRAY
71669: PUSH
71670: LD_INT 1
71672: ARRAY
71673: STR
71674: PUSH
71675: LD_STRING ,
71677: STR
71678: PUSH
71679: LD_VAR 0 3
71683: PUSH
71684: LD_VAR 0 2
71688: ARRAY
71689: PUSH
71690: LD_INT 2
71692: ARRAY
71693: STR
71694: PUSH
71695: LD_STRING ,
71697: STR
71698: PUSH
71699: LD_VAR 0 3
71703: PUSH
71704: LD_VAR 0 2
71708: ARRAY
71709: PUSH
71710: LD_INT 3
71712: ARRAY
71713: STR
71714: PUSH
71715: LD_STRING ,
71717: STR
71718: PUSH
71719: LD_VAR 0 3
71723: PUSH
71724: LD_VAR 0 2
71728: ARRAY
71729: PUSH
71730: LD_INT 4
71732: ARRAY
71733: STR
71734: PUSH
71735: LD_STRING )
71737: STR
71738: PPUSH
71739: CALL_OW 559
71743: GO 71653
71745: POP
71746: POP
// end ; end ;
71747: LD_VAR 0 1
71751: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
71752: LD_INT 0
71754: PPUSH
// if HexInfo ( x , y ) = warehouse then
71755: LD_VAR 0 2
71759: PPUSH
71760: LD_VAR 0 3
71764: PPUSH
71765: CALL_OW 428
71769: PUSH
71770: LD_VAR 0 1
71774: EQUAL
71775: IFFALSE 71802
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
71777: LD_ADDR_EXP 97
71781: PUSH
71782: LD_EXP 97
71786: PPUSH
71787: LD_VAR 0 1
71791: PPUSH
71792: LD_INT 0
71794: PPUSH
71795: CALL_OW 1
71799: ST_TO_ADDR
71800: GO 71853
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
71802: LD_ADDR_EXP 97
71806: PUSH
71807: LD_EXP 97
71811: PPUSH
71812: LD_VAR 0 1
71816: PPUSH
71817: LD_VAR 0 1
71821: PPUSH
71822: CALL_OW 255
71826: PUSH
71827: LD_VAR 0 1
71831: PUSH
71832: LD_VAR 0 2
71836: PUSH
71837: LD_VAR 0 3
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: PPUSH
71848: CALL_OW 1
71852: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
71853: CALL 71862 0 0
// end ;
71857: LD_VAR 0 4
71861: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
71862: LD_INT 0
71864: PPUSH
71865: PPUSH
71866: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
71867: LD_STRING resetWarehouseGatheringPoints();
71869: PPUSH
71870: CALL_OW 559
// if warehouseGatheringPoints then
71874: LD_EXP 97
71878: IFFALSE 72004
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
71880: LD_ADDR_VAR 0 3
71884: PUSH
71885: LD_EXP 97
71889: PPUSH
71890: CALL 56383 0 1
71894: ST_TO_ADDR
// for i := 1 to list do
71895: LD_ADDR_VAR 0 2
71899: PUSH
71900: DOUBLE
71901: LD_INT 1
71903: DEC
71904: ST_TO_ADDR
71905: LD_VAR 0 3
71909: PUSH
71910: FOR_TO
71911: IFFALSE 72002
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
71913: LD_STRING setWarehouseGatheringPointXY(
71915: PUSH
71916: LD_VAR 0 3
71920: PUSH
71921: LD_VAR 0 2
71925: ARRAY
71926: PUSH
71927: LD_INT 1
71929: ARRAY
71930: STR
71931: PUSH
71932: LD_STRING ,
71934: STR
71935: PUSH
71936: LD_VAR 0 3
71940: PUSH
71941: LD_VAR 0 2
71945: ARRAY
71946: PUSH
71947: LD_INT 2
71949: ARRAY
71950: STR
71951: PUSH
71952: LD_STRING ,
71954: STR
71955: PUSH
71956: LD_VAR 0 3
71960: PUSH
71961: LD_VAR 0 2
71965: ARRAY
71966: PUSH
71967: LD_INT 3
71969: ARRAY
71970: STR
71971: PUSH
71972: LD_STRING ,
71974: STR
71975: PUSH
71976: LD_VAR 0 3
71980: PUSH
71981: LD_VAR 0 2
71985: ARRAY
71986: PUSH
71987: LD_INT 4
71989: ARRAY
71990: STR
71991: PUSH
71992: LD_STRING )
71994: STR
71995: PPUSH
71996: CALL_OW 559
72000: GO 71910
72002: POP
72003: POP
// end ; end ;
72004: LD_VAR 0 1
72008: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
72009: LD_EXP 97
72013: IFFALSE 72698
72015: GO 72017
72017: DISABLE
72018: LD_INT 0
72020: PPUSH
72021: PPUSH
72022: PPUSH
72023: PPUSH
72024: PPUSH
72025: PPUSH
72026: PPUSH
72027: PPUSH
72028: PPUSH
// begin enable ;
72029: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
72030: LD_ADDR_VAR 0 3
72034: PUSH
72035: LD_EXP 97
72039: PPUSH
72040: CALL 56383 0 1
72044: ST_TO_ADDR
// if not list then
72045: LD_VAR 0 3
72049: NOT
72050: IFFALSE 72054
// exit ;
72052: GO 72698
// for i := 1 to list do
72054: LD_ADDR_VAR 0 1
72058: PUSH
72059: DOUBLE
72060: LD_INT 1
72062: DEC
72063: ST_TO_ADDR
72064: LD_VAR 0 3
72068: PUSH
72069: FOR_TO
72070: IFFALSE 72696
// begin depot := list [ i ] [ 2 ] ;
72072: LD_ADDR_VAR 0 8
72076: PUSH
72077: LD_VAR 0 3
72081: PUSH
72082: LD_VAR 0 1
72086: ARRAY
72087: PUSH
72088: LD_INT 2
72090: ARRAY
72091: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
72092: LD_ADDR_VAR 0 5
72096: PUSH
72097: LD_VAR 0 3
72101: PUSH
72102: LD_VAR 0 1
72106: ARRAY
72107: PUSH
72108: LD_INT 1
72110: ARRAY
72111: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
72112: LD_VAR 0 8
72116: PPUSH
72117: CALL_OW 301
72121: PUSH
72122: LD_VAR 0 5
72126: PUSH
72127: LD_VAR 0 8
72131: PPUSH
72132: CALL_OW 255
72136: NONEQUAL
72137: OR
72138: IFFALSE 72167
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
72140: LD_ADDR_EXP 97
72144: PUSH
72145: LD_EXP 97
72149: PPUSH
72150: LD_VAR 0 8
72154: PPUSH
72155: LD_INT 0
72157: PPUSH
72158: CALL_OW 1
72162: ST_TO_ADDR
// exit ;
72163: POP
72164: POP
72165: GO 72698
// end ; x := list [ i ] [ 3 ] ;
72167: LD_ADDR_VAR 0 6
72171: PUSH
72172: LD_VAR 0 3
72176: PUSH
72177: LD_VAR 0 1
72181: ARRAY
72182: PUSH
72183: LD_INT 3
72185: ARRAY
72186: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
72187: LD_ADDR_VAR 0 7
72191: PUSH
72192: LD_VAR 0 3
72196: PUSH
72197: LD_VAR 0 1
72201: ARRAY
72202: PUSH
72203: LD_INT 4
72205: ARRAY
72206: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
72207: LD_ADDR_VAR 0 9
72211: PUSH
72212: LD_VAR 0 6
72216: PPUSH
72217: LD_VAR 0 7
72221: PPUSH
72222: LD_INT 16
72224: PPUSH
72225: CALL 54971 0 3
72229: ST_TO_ADDR
// if not cratesNearbyPoint then
72230: LD_VAR 0 9
72234: NOT
72235: IFFALSE 72241
// exit ;
72237: POP
72238: POP
72239: GO 72698
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
72241: LD_ADDR_VAR 0 4
72245: PUSH
72246: LD_INT 22
72248: PUSH
72249: LD_VAR 0 5
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: PUSH
72258: LD_INT 3
72260: PUSH
72261: LD_INT 60
72263: PUSH
72264: EMPTY
72265: LIST
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PUSH
72271: LD_INT 91
72273: PUSH
72274: LD_VAR 0 8
72278: PUSH
72279: LD_INT 6
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 2
72289: PUSH
72290: LD_INT 25
72292: PUSH
72293: LD_INT 2
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 25
72302: PUSH
72303: LD_INT 16
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: LIST
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: PPUSH
72321: CALL_OW 69
72325: PUSH
72326: LD_VAR 0 8
72330: PPUSH
72331: CALL_OW 313
72335: PPUSH
72336: LD_INT 3
72338: PUSH
72339: LD_INT 60
72341: PUSH
72342: EMPTY
72343: LIST
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: LD_INT 2
72351: PUSH
72352: LD_INT 25
72354: PUSH
72355: LD_INT 2
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 25
72364: PUSH
72365: LD_INT 16
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: LIST
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: PPUSH
72381: CALL_OW 72
72385: UNION
72386: ST_TO_ADDR
// if tmp then
72387: LD_VAR 0 4
72391: IFFALSE 72471
// begin tmp := ShrinkArray ( tmp , 3 ) ;
72393: LD_ADDR_VAR 0 4
72397: PUSH
72398: LD_VAR 0 4
72402: PPUSH
72403: LD_INT 3
72405: PPUSH
72406: CALL 52940 0 2
72410: ST_TO_ADDR
// for j in tmp do
72411: LD_ADDR_VAR 0 2
72415: PUSH
72416: LD_VAR 0 4
72420: PUSH
72421: FOR_IN
72422: IFFALSE 72465
// begin if IsInUnit ( j ) then
72424: LD_VAR 0 2
72428: PPUSH
72429: CALL_OW 310
72433: IFFALSE 72444
// ComExit ( j ) ;
72435: LD_VAR 0 2
72439: PPUSH
72440: CALL 53023 0 1
// AddComCollect ( j , x , y ) ;
72444: LD_VAR 0 2
72448: PPUSH
72449: LD_VAR 0 6
72453: PPUSH
72454: LD_VAR 0 7
72458: PPUSH
72459: CALL_OW 177
// end ;
72463: GO 72421
72465: POP
72466: POP
// exit ;
72467: POP
72468: POP
72469: GO 72698
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
72471: LD_ADDR_VAR 0 4
72475: PUSH
72476: LD_INT 22
72478: PUSH
72479: LD_VAR 0 5
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 91
72490: PUSH
72491: LD_VAR 0 8
72495: PUSH
72496: LD_INT 8
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 2
72506: PUSH
72507: LD_INT 34
72509: PUSH
72510: LD_INT 12
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 34
72519: PUSH
72520: LD_INT 51
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 34
72529: PUSH
72530: LD_INT 32
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: LD_INT 34
72539: PUSH
72540: LD_INT 89
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: LIST
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: LIST
72558: PPUSH
72559: CALL_OW 69
72563: ST_TO_ADDR
// if tmp then
72564: LD_VAR 0 4
72568: IFFALSE 72694
// begin for j in tmp do
72570: LD_ADDR_VAR 0 2
72574: PUSH
72575: LD_VAR 0 4
72579: PUSH
72580: FOR_IN
72581: IFFALSE 72692
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
72583: LD_VAR 0 2
72587: PPUSH
72588: CALL_OW 262
72592: PUSH
72593: LD_INT 3
72595: EQUAL
72596: PUSH
72597: LD_VAR 0 2
72601: PPUSH
72602: CALL_OW 261
72606: PUSH
72607: LD_INT 20
72609: GREATER
72610: OR
72611: PUSH
72612: LD_VAR 0 2
72616: PPUSH
72617: CALL_OW 314
72621: NOT
72622: AND
72623: PUSH
72624: LD_VAR 0 2
72628: PPUSH
72629: CALL_OW 263
72633: PUSH
72634: LD_INT 1
72636: NONEQUAL
72637: PUSH
72638: LD_VAR 0 2
72642: PPUSH
72643: CALL_OW 311
72647: OR
72648: AND
72649: IFFALSE 72690
// begin ComCollect ( j , x , y ) ;
72651: LD_VAR 0 2
72655: PPUSH
72656: LD_VAR 0 6
72660: PPUSH
72661: LD_VAR 0 7
72665: PPUSH
72666: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
72670: LD_VAR 0 2
72674: PPUSH
72675: LD_VAR 0 8
72679: PPUSH
72680: CALL_OW 172
// exit ;
72684: POP
72685: POP
72686: POP
72687: POP
72688: GO 72698
// end ;
72690: GO 72580
72692: POP
72693: POP
// end ; end ;
72694: GO 72069
72696: POP
72697: POP
// end ; end_of_file
72698: PPOPN 9
72700: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72701: LD_VAR 0 1
72705: PUSH
72706: LD_INT 200
72708: DOUBLE
72709: GREATEREQUAL
72710: IFFALSE 72718
72712: LD_INT 299
72714: DOUBLE
72715: LESSEQUAL
72716: IFTRUE 72720
72718: GO 72752
72720: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72721: LD_VAR 0 1
72725: PPUSH
72726: LD_VAR 0 2
72730: PPUSH
72731: LD_VAR 0 3
72735: PPUSH
72736: LD_VAR 0 4
72740: PPUSH
72741: LD_VAR 0 5
72745: PPUSH
72746: CALL 73240 0 5
72750: GO 72829
72752: LD_INT 300
72754: DOUBLE
72755: GREATEREQUAL
72756: IFFALSE 72764
72758: LD_INT 399
72760: DOUBLE
72761: LESSEQUAL
72762: IFTRUE 72766
72764: GO 72828
72766: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72767: LD_VAR 0 1
72771: PPUSH
72772: LD_VAR 0 2
72776: PPUSH
72777: LD_VAR 0 3
72781: PPUSH
72782: LD_VAR 0 4
72786: PPUSH
72787: LD_VAR 0 5
72791: PPUSH
72792: LD_VAR 0 6
72796: PPUSH
72797: LD_VAR 0 7
72801: PPUSH
72802: LD_VAR 0 8
72806: PPUSH
72807: LD_VAR 0 9
72811: PPUSH
72812: LD_VAR 0 10
72816: PPUSH
72817: LD_VAR 0 11
72821: PPUSH
72822: CALL 69402 0 11
72826: GO 72829
72828: POP
// end ;
72829: PPOPN 11
72831: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72832: LD_VAR 0 1
72836: PPUSH
72837: LD_VAR 0 2
72841: PPUSH
72842: LD_VAR 0 3
72846: PPUSH
72847: LD_VAR 0 4
72851: PPUSH
72852: LD_VAR 0 5
72856: PPUSH
72857: CALL 72976 0 5
// end ; end_of_file
72861: PPOPN 5
72863: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
72864: LD_INT 0
72866: PPUSH
72867: PPUSH
72868: PPUSH
72869: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
72870: LD_VAR 0 1
72874: PPUSH
72875: CALL_OW 264
72879: PUSH
72880: LD_INT 91
72882: EQUAL
72883: IFFALSE 72955
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
72885: LD_INT 68
72887: PPUSH
72888: LD_VAR 0 1
72892: PPUSH
72893: CALL_OW 255
72897: PPUSH
72898: CALL_OW 321
72902: PUSH
72903: LD_INT 2
72905: EQUAL
72906: IFFALSE 72918
// eff := 70 else
72908: LD_ADDR_VAR 0 4
72912: PUSH
72913: LD_INT 70
72915: ST_TO_ADDR
72916: GO 72926
// eff := 30 ;
72918: LD_ADDR_VAR 0 4
72922: PUSH
72923: LD_INT 30
72925: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
72926: LD_VAR 0 1
72930: PPUSH
72931: CALL_OW 250
72935: PPUSH
72936: LD_VAR 0 1
72940: PPUSH
72941: CALL_OW 251
72945: PPUSH
72946: LD_VAR 0 4
72950: PPUSH
72951: CALL_OW 495
// end ; end ;
72955: LD_VAR 0 2
72959: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
72960: LD_INT 0
72962: PPUSH
// end ;
72963: LD_VAR 0 4
72967: RET
// export function SOS_Command ( cmd ) ; begin
72968: LD_INT 0
72970: PPUSH
// end ;
72971: LD_VAR 0 2
72975: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
72976: LD_INT 0
72978: PPUSH
// end ;
72979: LD_VAR 0 6
72983: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
72984: LD_INT 0
72986: PPUSH
72987: PPUSH
// if not vehicle or not factory then
72988: LD_VAR 0 1
72992: NOT
72993: PUSH
72994: LD_VAR 0 2
72998: NOT
72999: OR
73000: IFFALSE 73004
// exit ;
73002: GO 73235
// if factoryWaypoints >= factory then
73004: LD_EXP 96
73008: PUSH
73009: LD_VAR 0 2
73013: GREATEREQUAL
73014: IFFALSE 73235
// if factoryWaypoints [ factory ] then
73016: LD_EXP 96
73020: PUSH
73021: LD_VAR 0 2
73025: ARRAY
73026: IFFALSE 73235
// begin if GetControl ( vehicle ) = control_manual then
73028: LD_VAR 0 1
73032: PPUSH
73033: CALL_OW 263
73037: PUSH
73038: LD_INT 1
73040: EQUAL
73041: IFFALSE 73122
// begin driver := IsDrivenBy ( vehicle ) ;
73043: LD_ADDR_VAR 0 4
73047: PUSH
73048: LD_VAR 0 1
73052: PPUSH
73053: CALL_OW 311
73057: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73058: LD_VAR 0 4
73062: PPUSH
73063: LD_EXP 96
73067: PUSH
73068: LD_VAR 0 2
73072: ARRAY
73073: PUSH
73074: LD_INT 3
73076: ARRAY
73077: PPUSH
73078: LD_EXP 96
73082: PUSH
73083: LD_VAR 0 2
73087: ARRAY
73088: PUSH
73089: LD_INT 4
73091: ARRAY
73092: PPUSH
73093: CALL_OW 171
// AddComExitVehicle ( driver ) ;
73097: LD_VAR 0 4
73101: PPUSH
73102: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
73106: LD_VAR 0 4
73110: PPUSH
73111: LD_VAR 0 2
73115: PPUSH
73116: CALL_OW 180
// end else
73120: GO 73235
// if GetControl ( vehicle ) = control_remote then
73122: LD_VAR 0 1
73126: PPUSH
73127: CALL_OW 263
73131: PUSH
73132: LD_INT 2
73134: EQUAL
73135: IFFALSE 73196
// begin wait ( 0 0$2 ) ;
73137: LD_INT 70
73139: PPUSH
73140: CALL_OW 67
// if Connect ( vehicle ) then
73144: LD_VAR 0 1
73148: PPUSH
73149: CALL 23264 0 1
73153: IFFALSE 73194
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73155: LD_VAR 0 1
73159: PPUSH
73160: LD_EXP 96
73164: PUSH
73165: LD_VAR 0 2
73169: ARRAY
73170: PUSH
73171: LD_INT 3
73173: ARRAY
73174: PPUSH
73175: LD_EXP 96
73179: PUSH
73180: LD_VAR 0 2
73184: ARRAY
73185: PUSH
73186: LD_INT 4
73188: ARRAY
73189: PPUSH
73190: CALL_OW 171
// end else
73194: GO 73235
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73196: LD_VAR 0 1
73200: PPUSH
73201: LD_EXP 96
73205: PUSH
73206: LD_VAR 0 2
73210: ARRAY
73211: PUSH
73212: LD_INT 3
73214: ARRAY
73215: PPUSH
73216: LD_EXP 96
73220: PUSH
73221: LD_VAR 0 2
73225: ARRAY
73226: PUSH
73227: LD_INT 4
73229: ARRAY
73230: PPUSH
73231: CALL_OW 171
// end ; end ;
73235: LD_VAR 0 3
73239: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
73240: LD_INT 0
73242: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
73243: LD_VAR 0 1
73247: PUSH
73248: LD_INT 250
73250: EQUAL
73251: PUSH
73252: LD_VAR 0 2
73256: PPUSH
73257: CALL_OW 264
73261: PUSH
73262: LD_INT 81
73264: EQUAL
73265: AND
73266: IFFALSE 73287
// MinerPlaceMine ( unit , x , y ) ;
73268: LD_VAR 0 2
73272: PPUSH
73273: LD_VAR 0 4
73277: PPUSH
73278: LD_VAR 0 5
73282: PPUSH
73283: CALL 75672 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
73287: LD_VAR 0 1
73291: PUSH
73292: LD_INT 251
73294: EQUAL
73295: PUSH
73296: LD_VAR 0 2
73300: PPUSH
73301: CALL_OW 264
73305: PUSH
73306: LD_INT 81
73308: EQUAL
73309: AND
73310: IFFALSE 73331
// MinerDetonateMine ( unit , x , y ) ;
73312: LD_VAR 0 2
73316: PPUSH
73317: LD_VAR 0 4
73321: PPUSH
73322: LD_VAR 0 5
73326: PPUSH
73327: CALL 75947 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
73331: LD_VAR 0 1
73335: PUSH
73336: LD_INT 252
73338: EQUAL
73339: PUSH
73340: LD_VAR 0 2
73344: PPUSH
73345: CALL_OW 264
73349: PUSH
73350: LD_INT 81
73352: EQUAL
73353: AND
73354: IFFALSE 73375
// MinerCreateMinefield ( unit , x , y ) ;
73356: LD_VAR 0 2
73360: PPUSH
73361: LD_VAR 0 4
73365: PPUSH
73366: LD_VAR 0 5
73370: PPUSH
73371: CALL 76364 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
73375: LD_VAR 0 1
73379: PUSH
73380: LD_INT 253
73382: EQUAL
73383: PUSH
73384: LD_VAR 0 2
73388: PPUSH
73389: CALL_OW 257
73393: PUSH
73394: LD_INT 5
73396: EQUAL
73397: AND
73398: IFFALSE 73419
// ComBinocular ( unit , x , y ) ;
73400: LD_VAR 0 2
73404: PPUSH
73405: LD_VAR 0 4
73409: PPUSH
73410: LD_VAR 0 5
73414: PPUSH
73415: CALL 76733 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
73419: LD_VAR 0 1
73423: PUSH
73424: LD_INT 254
73426: EQUAL
73427: PUSH
73428: LD_VAR 0 2
73432: PPUSH
73433: CALL_OW 264
73437: PUSH
73438: LD_INT 99
73440: EQUAL
73441: AND
73442: PUSH
73443: LD_VAR 0 3
73447: PPUSH
73448: CALL_OW 263
73452: PUSH
73453: LD_INT 3
73455: EQUAL
73456: AND
73457: IFFALSE 73473
// HackDestroyVehicle ( unit , selectedUnit ) ;
73459: LD_VAR 0 2
73463: PPUSH
73464: LD_VAR 0 3
73468: PPUSH
73469: CALL 75036 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
73473: LD_VAR 0 1
73477: PUSH
73478: LD_INT 255
73480: EQUAL
73481: PUSH
73482: LD_VAR 0 2
73486: PPUSH
73487: CALL_OW 264
73491: PUSH
73492: LD_INT 14
73494: PUSH
73495: LD_INT 53
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: IN
73502: AND
73503: PUSH
73504: LD_VAR 0 4
73508: PPUSH
73509: LD_VAR 0 5
73513: PPUSH
73514: CALL_OW 488
73518: AND
73519: IFFALSE 73543
// CutTreeXYR ( unit , x , y , 12 ) ;
73521: LD_VAR 0 2
73525: PPUSH
73526: LD_VAR 0 4
73530: PPUSH
73531: LD_VAR 0 5
73535: PPUSH
73536: LD_INT 12
73538: PPUSH
73539: CALL 73606 0 4
// if cmd = 256 then
73543: LD_VAR 0 1
73547: PUSH
73548: LD_INT 256
73550: EQUAL
73551: IFFALSE 73572
// SetFactoryWaypoint ( unit , x , y ) ;
73553: LD_VAR 0 2
73557: PPUSH
73558: LD_VAR 0 4
73562: PPUSH
73563: LD_VAR 0 5
73567: PPUSH
73568: CALL 71390 0 3
// if cmd = 257 then
73572: LD_VAR 0 1
73576: PUSH
73577: LD_INT 257
73579: EQUAL
73580: IFFALSE 73601
// SetWarehouseGatheringPoint ( unit , x , y ) ;
73582: LD_VAR 0 2
73586: PPUSH
73587: LD_VAR 0 4
73591: PPUSH
73592: LD_VAR 0 5
73596: PPUSH
73597: CALL 71752 0 3
// end ;
73601: LD_VAR 0 6
73605: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
73606: LD_INT 0
73608: PPUSH
73609: PPUSH
73610: PPUSH
73611: PPUSH
73612: PPUSH
73613: PPUSH
73614: PPUSH
73615: PPUSH
73616: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
73617: LD_VAR 0 1
73621: NOT
73622: PUSH
73623: LD_VAR 0 2
73627: PPUSH
73628: LD_VAR 0 3
73632: PPUSH
73633: CALL_OW 488
73637: NOT
73638: OR
73639: PUSH
73640: LD_VAR 0 4
73644: NOT
73645: OR
73646: IFFALSE 73650
// exit ;
73648: GO 73990
// list := [ ] ;
73650: LD_ADDR_VAR 0 13
73654: PUSH
73655: EMPTY
73656: ST_TO_ADDR
// if x - r < 0 then
73657: LD_VAR 0 2
73661: PUSH
73662: LD_VAR 0 4
73666: MINUS
73667: PUSH
73668: LD_INT 0
73670: LESS
73671: IFFALSE 73683
// min_x := 0 else
73673: LD_ADDR_VAR 0 7
73677: PUSH
73678: LD_INT 0
73680: ST_TO_ADDR
73681: GO 73699
// min_x := x - r ;
73683: LD_ADDR_VAR 0 7
73687: PUSH
73688: LD_VAR 0 2
73692: PUSH
73693: LD_VAR 0 4
73697: MINUS
73698: ST_TO_ADDR
// if y - r < 0 then
73699: LD_VAR 0 3
73703: PUSH
73704: LD_VAR 0 4
73708: MINUS
73709: PUSH
73710: LD_INT 0
73712: LESS
73713: IFFALSE 73725
// min_y := 0 else
73715: LD_ADDR_VAR 0 8
73719: PUSH
73720: LD_INT 0
73722: ST_TO_ADDR
73723: GO 73741
// min_y := y - r ;
73725: LD_ADDR_VAR 0 8
73729: PUSH
73730: LD_VAR 0 3
73734: PUSH
73735: LD_VAR 0 4
73739: MINUS
73740: ST_TO_ADDR
// max_x := x + r ;
73741: LD_ADDR_VAR 0 9
73745: PUSH
73746: LD_VAR 0 2
73750: PUSH
73751: LD_VAR 0 4
73755: PLUS
73756: ST_TO_ADDR
// max_y := y + r ;
73757: LD_ADDR_VAR 0 10
73761: PUSH
73762: LD_VAR 0 3
73766: PUSH
73767: LD_VAR 0 4
73771: PLUS
73772: ST_TO_ADDR
// for _x = min_x to max_x do
73773: LD_ADDR_VAR 0 11
73777: PUSH
73778: DOUBLE
73779: LD_VAR 0 7
73783: DEC
73784: ST_TO_ADDR
73785: LD_VAR 0 9
73789: PUSH
73790: FOR_TO
73791: IFFALSE 73908
// for _y = min_y to max_y do
73793: LD_ADDR_VAR 0 12
73797: PUSH
73798: DOUBLE
73799: LD_VAR 0 8
73803: DEC
73804: ST_TO_ADDR
73805: LD_VAR 0 10
73809: PUSH
73810: FOR_TO
73811: IFFALSE 73904
// begin if not ValidHex ( _x , _y ) then
73813: LD_VAR 0 11
73817: PPUSH
73818: LD_VAR 0 12
73822: PPUSH
73823: CALL_OW 488
73827: NOT
73828: IFFALSE 73832
// continue ;
73830: GO 73810
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
73832: LD_VAR 0 11
73836: PPUSH
73837: LD_VAR 0 12
73841: PPUSH
73842: CALL_OW 351
73846: PUSH
73847: LD_VAR 0 11
73851: PPUSH
73852: LD_VAR 0 12
73856: PPUSH
73857: CALL_OW 554
73861: AND
73862: IFFALSE 73902
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
73864: LD_ADDR_VAR 0 13
73868: PUSH
73869: LD_VAR 0 13
73873: PPUSH
73874: LD_VAR 0 13
73878: PUSH
73879: LD_INT 1
73881: PLUS
73882: PPUSH
73883: LD_VAR 0 11
73887: PUSH
73888: LD_VAR 0 12
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PPUSH
73897: CALL_OW 2
73901: ST_TO_ADDR
// end ;
73902: GO 73810
73904: POP
73905: POP
73906: GO 73790
73908: POP
73909: POP
// if not list then
73910: LD_VAR 0 13
73914: NOT
73915: IFFALSE 73919
// exit ;
73917: GO 73990
// for i in list do
73919: LD_ADDR_VAR 0 6
73923: PUSH
73924: LD_VAR 0 13
73928: PUSH
73929: FOR_IN
73930: IFFALSE 73988
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
73932: LD_VAR 0 1
73936: PPUSH
73937: LD_STRING M
73939: PUSH
73940: LD_VAR 0 6
73944: PUSH
73945: LD_INT 1
73947: ARRAY
73948: PUSH
73949: LD_VAR 0 6
73953: PUSH
73954: LD_INT 2
73956: ARRAY
73957: PUSH
73958: LD_INT 0
73960: PUSH
73961: LD_INT 0
73963: PUSH
73964: LD_INT 0
73966: PUSH
73967: LD_INT 0
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: PUSH
73979: EMPTY
73980: LIST
73981: PPUSH
73982: CALL_OW 447
73986: GO 73929
73988: POP
73989: POP
// end ;
73990: LD_VAR 0 5
73994: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
73995: LD_EXP 99
73999: NOT
74000: IFFALSE 74050
74002: GO 74004
74004: DISABLE
// begin initHack := true ;
74005: LD_ADDR_EXP 99
74009: PUSH
74010: LD_INT 1
74012: ST_TO_ADDR
// hackTanks := [ ] ;
74013: LD_ADDR_EXP 100
74017: PUSH
74018: EMPTY
74019: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
74020: LD_ADDR_EXP 101
74024: PUSH
74025: EMPTY
74026: ST_TO_ADDR
// hackLimit := 3 ;
74027: LD_ADDR_EXP 102
74031: PUSH
74032: LD_INT 3
74034: ST_TO_ADDR
// hackDist := 12 ;
74035: LD_ADDR_EXP 103
74039: PUSH
74040: LD_INT 12
74042: ST_TO_ADDR
// hackCounter := [ ] ;
74043: LD_ADDR_EXP 104
74047: PUSH
74048: EMPTY
74049: ST_TO_ADDR
// end ;
74050: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
74051: LD_EXP 99
74055: PUSH
74056: LD_INT 34
74058: PUSH
74059: LD_INT 99
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PPUSH
74066: CALL_OW 69
74070: AND
74071: IFFALSE 74324
74073: GO 74075
74075: DISABLE
74076: LD_INT 0
74078: PPUSH
74079: PPUSH
// begin enable ;
74080: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
74081: LD_ADDR_VAR 0 1
74085: PUSH
74086: LD_INT 34
74088: PUSH
74089: LD_INT 99
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: PPUSH
74096: CALL_OW 69
74100: PUSH
74101: FOR_IN
74102: IFFALSE 74322
// begin if not i in hackTanks then
74104: LD_VAR 0 1
74108: PUSH
74109: LD_EXP 100
74113: IN
74114: NOT
74115: IFFALSE 74198
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
74117: LD_ADDR_EXP 100
74121: PUSH
74122: LD_EXP 100
74126: PPUSH
74127: LD_EXP 100
74131: PUSH
74132: LD_INT 1
74134: PLUS
74135: PPUSH
74136: LD_VAR 0 1
74140: PPUSH
74141: CALL_OW 1
74145: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
74146: LD_ADDR_EXP 101
74150: PUSH
74151: LD_EXP 101
74155: PPUSH
74156: LD_EXP 101
74160: PUSH
74161: LD_INT 1
74163: PLUS
74164: PPUSH
74165: EMPTY
74166: PPUSH
74167: CALL_OW 1
74171: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
74172: LD_ADDR_EXP 104
74176: PUSH
74177: LD_EXP 104
74181: PPUSH
74182: LD_EXP 104
74186: PUSH
74187: LD_INT 1
74189: PLUS
74190: PPUSH
74191: EMPTY
74192: PPUSH
74193: CALL_OW 1
74197: ST_TO_ADDR
// end ; if not IsOk ( i ) then
74198: LD_VAR 0 1
74202: PPUSH
74203: CALL_OW 302
74207: NOT
74208: IFFALSE 74221
// begin HackUnlinkAll ( i ) ;
74210: LD_VAR 0 1
74214: PPUSH
74215: CALL 74327 0 1
// continue ;
74219: GO 74101
// end ; HackCheckCapturedStatus ( i ) ;
74221: LD_VAR 0 1
74225: PPUSH
74226: CALL 74770 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
74230: LD_ADDR_VAR 0 2
74234: PUSH
74235: LD_INT 81
74237: PUSH
74238: LD_VAR 0 1
74242: PPUSH
74243: CALL_OW 255
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: PUSH
74252: LD_INT 33
74254: PUSH
74255: LD_INT 3
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: LD_INT 91
74264: PUSH
74265: LD_VAR 0 1
74269: PUSH
74270: LD_EXP 103
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: LIST
74279: PUSH
74280: LD_INT 50
74282: PUSH
74283: EMPTY
74284: LIST
74285: PUSH
74286: EMPTY
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: PPUSH
74292: CALL_OW 69
74296: ST_TO_ADDR
// if not tmp then
74297: LD_VAR 0 2
74301: NOT
74302: IFFALSE 74306
// continue ;
74304: GO 74101
// HackLink ( i , tmp ) ;
74306: LD_VAR 0 1
74310: PPUSH
74311: LD_VAR 0 2
74315: PPUSH
74316: CALL 74463 0 2
// end ;
74320: GO 74101
74322: POP
74323: POP
// end ;
74324: PPOPN 2
74326: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
74327: LD_INT 0
74329: PPUSH
74330: PPUSH
74331: PPUSH
// if not hack in hackTanks then
74332: LD_VAR 0 1
74336: PUSH
74337: LD_EXP 100
74341: IN
74342: NOT
74343: IFFALSE 74347
// exit ;
74345: GO 74458
// index := GetElementIndex ( hackTanks , hack ) ;
74347: LD_ADDR_VAR 0 4
74351: PUSH
74352: LD_EXP 100
74356: PPUSH
74357: LD_VAR 0 1
74361: PPUSH
74362: CALL 20071 0 2
74366: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
74367: LD_EXP 101
74371: PUSH
74372: LD_VAR 0 4
74376: ARRAY
74377: IFFALSE 74458
// begin for i in hackTanksCaptured [ index ] do
74379: LD_ADDR_VAR 0 3
74383: PUSH
74384: LD_EXP 101
74388: PUSH
74389: LD_VAR 0 4
74393: ARRAY
74394: PUSH
74395: FOR_IN
74396: IFFALSE 74422
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
74398: LD_VAR 0 3
74402: PUSH
74403: LD_INT 1
74405: ARRAY
74406: PPUSH
74407: LD_VAR 0 3
74411: PUSH
74412: LD_INT 2
74414: ARRAY
74415: PPUSH
74416: CALL_OW 235
74420: GO 74395
74422: POP
74423: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
74424: LD_ADDR_EXP 101
74428: PUSH
74429: LD_EXP 101
74433: PPUSH
74434: LD_VAR 0 4
74438: PPUSH
74439: EMPTY
74440: PPUSH
74441: CALL_OW 1
74445: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
74446: LD_VAR 0 1
74450: PPUSH
74451: LD_INT 0
74453: PPUSH
74454: CALL_OW 505
// end ; end ;
74458: LD_VAR 0 2
74462: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
74463: LD_INT 0
74465: PPUSH
74466: PPUSH
74467: PPUSH
// if not hack in hackTanks or not vehicles then
74468: LD_VAR 0 1
74472: PUSH
74473: LD_EXP 100
74477: IN
74478: NOT
74479: PUSH
74480: LD_VAR 0 2
74484: NOT
74485: OR
74486: IFFALSE 74490
// exit ;
74488: GO 74765
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
74490: LD_ADDR_VAR 0 2
74494: PUSH
74495: LD_VAR 0 1
74499: PPUSH
74500: LD_VAR 0 2
74504: PPUSH
74505: LD_INT 1
74507: PPUSH
74508: LD_INT 1
74510: PPUSH
74511: CALL 20721 0 4
74515: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
74516: LD_ADDR_VAR 0 5
74520: PUSH
74521: LD_EXP 100
74525: PPUSH
74526: LD_VAR 0 1
74530: PPUSH
74531: CALL 20071 0 2
74535: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
74536: LD_EXP 101
74540: PUSH
74541: LD_VAR 0 5
74545: ARRAY
74546: PUSH
74547: LD_EXP 102
74551: LESS
74552: IFFALSE 74741
// begin for i := 1 to vehicles do
74554: LD_ADDR_VAR 0 4
74558: PUSH
74559: DOUBLE
74560: LD_INT 1
74562: DEC
74563: ST_TO_ADDR
74564: LD_VAR 0 2
74568: PUSH
74569: FOR_TO
74570: IFFALSE 74739
// begin if hackTanksCaptured [ index ] = hackLimit then
74572: LD_EXP 101
74576: PUSH
74577: LD_VAR 0 5
74581: ARRAY
74582: PUSH
74583: LD_EXP 102
74587: EQUAL
74588: IFFALSE 74592
// break ;
74590: GO 74739
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
74592: LD_ADDR_EXP 104
74596: PUSH
74597: LD_EXP 104
74601: PPUSH
74602: LD_VAR 0 5
74606: PPUSH
74607: LD_EXP 104
74611: PUSH
74612: LD_VAR 0 5
74616: ARRAY
74617: PUSH
74618: LD_INT 1
74620: PLUS
74621: PPUSH
74622: CALL_OW 1
74626: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
74627: LD_ADDR_EXP 101
74631: PUSH
74632: LD_EXP 101
74636: PPUSH
74637: LD_VAR 0 5
74641: PUSH
74642: LD_EXP 101
74646: PUSH
74647: LD_VAR 0 5
74651: ARRAY
74652: PUSH
74653: LD_INT 1
74655: PLUS
74656: PUSH
74657: EMPTY
74658: LIST
74659: LIST
74660: PPUSH
74661: LD_VAR 0 2
74665: PUSH
74666: LD_VAR 0 4
74670: ARRAY
74671: PUSH
74672: LD_VAR 0 2
74676: PUSH
74677: LD_VAR 0 4
74681: ARRAY
74682: PPUSH
74683: CALL_OW 255
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: PPUSH
74692: CALL 20286 0 3
74696: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
74697: LD_VAR 0 2
74701: PUSH
74702: LD_VAR 0 4
74706: ARRAY
74707: PPUSH
74708: LD_VAR 0 1
74712: PPUSH
74713: CALL_OW 255
74717: PPUSH
74718: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
74722: LD_VAR 0 2
74726: PUSH
74727: LD_VAR 0 4
74731: ARRAY
74732: PPUSH
74733: CALL_OW 141
// end ;
74737: GO 74569
74739: POP
74740: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
74741: LD_VAR 0 1
74745: PPUSH
74746: LD_EXP 101
74750: PUSH
74751: LD_VAR 0 5
74755: ARRAY
74756: PUSH
74757: LD_INT 0
74759: PLUS
74760: PPUSH
74761: CALL_OW 505
// end ;
74765: LD_VAR 0 3
74769: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
74770: LD_INT 0
74772: PPUSH
74773: PPUSH
74774: PPUSH
74775: PPUSH
// if not hack in hackTanks then
74776: LD_VAR 0 1
74780: PUSH
74781: LD_EXP 100
74785: IN
74786: NOT
74787: IFFALSE 74791
// exit ;
74789: GO 75031
// index := GetElementIndex ( hackTanks , hack ) ;
74791: LD_ADDR_VAR 0 4
74795: PUSH
74796: LD_EXP 100
74800: PPUSH
74801: LD_VAR 0 1
74805: PPUSH
74806: CALL 20071 0 2
74810: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
74811: LD_ADDR_VAR 0 3
74815: PUSH
74816: DOUBLE
74817: LD_EXP 101
74821: PUSH
74822: LD_VAR 0 4
74826: ARRAY
74827: INC
74828: ST_TO_ADDR
74829: LD_INT 1
74831: PUSH
74832: FOR_DOWNTO
74833: IFFALSE 75005
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
74835: LD_ADDR_VAR 0 5
74839: PUSH
74840: LD_EXP 101
74844: PUSH
74845: LD_VAR 0 4
74849: ARRAY
74850: PUSH
74851: LD_VAR 0 3
74855: ARRAY
74856: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
74857: LD_VAR 0 5
74861: PUSH
74862: LD_INT 1
74864: ARRAY
74865: PPUSH
74866: CALL_OW 302
74870: NOT
74871: PUSH
74872: LD_VAR 0 5
74876: PUSH
74877: LD_INT 1
74879: ARRAY
74880: PPUSH
74881: CALL_OW 255
74885: PUSH
74886: LD_VAR 0 1
74890: PPUSH
74891: CALL_OW 255
74895: NONEQUAL
74896: OR
74897: IFFALSE 75003
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
74899: LD_VAR 0 5
74903: PUSH
74904: LD_INT 1
74906: ARRAY
74907: PPUSH
74908: CALL_OW 305
74912: PUSH
74913: LD_VAR 0 5
74917: PUSH
74918: LD_INT 1
74920: ARRAY
74921: PPUSH
74922: CALL_OW 255
74926: PUSH
74927: LD_VAR 0 1
74931: PPUSH
74932: CALL_OW 255
74936: EQUAL
74937: AND
74938: IFFALSE 74962
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
74940: LD_VAR 0 5
74944: PUSH
74945: LD_INT 1
74947: ARRAY
74948: PPUSH
74949: LD_VAR 0 5
74953: PUSH
74954: LD_INT 2
74956: ARRAY
74957: PPUSH
74958: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
74962: LD_ADDR_EXP 101
74966: PUSH
74967: LD_EXP 101
74971: PPUSH
74972: LD_VAR 0 4
74976: PPUSH
74977: LD_EXP 101
74981: PUSH
74982: LD_VAR 0 4
74986: ARRAY
74987: PPUSH
74988: LD_VAR 0 3
74992: PPUSH
74993: CALL_OW 3
74997: PPUSH
74998: CALL_OW 1
75002: ST_TO_ADDR
// end ; end ;
75003: GO 74832
75005: POP
75006: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
75007: LD_VAR 0 1
75011: PPUSH
75012: LD_EXP 101
75016: PUSH
75017: LD_VAR 0 4
75021: ARRAY
75022: PUSH
75023: LD_INT 0
75025: PLUS
75026: PPUSH
75027: CALL_OW 505
// end ;
75031: LD_VAR 0 2
75035: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
75036: LD_INT 0
75038: PPUSH
75039: PPUSH
75040: PPUSH
75041: PPUSH
// if not hack in hackTanks then
75042: LD_VAR 0 1
75046: PUSH
75047: LD_EXP 100
75051: IN
75052: NOT
75053: IFFALSE 75057
// exit ;
75055: GO 75142
// index := GetElementIndex ( hackTanks , hack ) ;
75057: LD_ADDR_VAR 0 5
75061: PUSH
75062: LD_EXP 100
75066: PPUSH
75067: LD_VAR 0 1
75071: PPUSH
75072: CALL 20071 0 2
75076: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
75077: LD_ADDR_VAR 0 4
75081: PUSH
75082: DOUBLE
75083: LD_INT 1
75085: DEC
75086: ST_TO_ADDR
75087: LD_EXP 101
75091: PUSH
75092: LD_VAR 0 5
75096: ARRAY
75097: PUSH
75098: FOR_TO
75099: IFFALSE 75140
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
75101: LD_EXP 101
75105: PUSH
75106: LD_VAR 0 5
75110: ARRAY
75111: PUSH
75112: LD_VAR 0 4
75116: ARRAY
75117: PUSH
75118: LD_INT 1
75120: ARRAY
75121: PUSH
75122: LD_VAR 0 2
75126: EQUAL
75127: IFFALSE 75138
// KillUnit ( vehicle ) ;
75129: LD_VAR 0 2
75133: PPUSH
75134: CALL_OW 66
75138: GO 75098
75140: POP
75141: POP
// end ;
75142: LD_VAR 0 3
75146: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
75147: LD_EXP 105
75151: NOT
75152: IFFALSE 75187
75154: GO 75156
75156: DISABLE
// begin initMiner := true ;
75157: LD_ADDR_EXP 105
75161: PUSH
75162: LD_INT 1
75164: ST_TO_ADDR
// minersList := [ ] ;
75165: LD_ADDR_EXP 106
75169: PUSH
75170: EMPTY
75171: ST_TO_ADDR
// minerMinesList := [ ] ;
75172: LD_ADDR_EXP 107
75176: PUSH
75177: EMPTY
75178: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
75179: LD_ADDR_EXP 108
75183: PUSH
75184: LD_INT 5
75186: ST_TO_ADDR
// end ;
75187: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
75188: LD_EXP 105
75192: PUSH
75193: LD_INT 34
75195: PUSH
75196: LD_INT 81
75198: PUSH
75199: EMPTY
75200: LIST
75201: LIST
75202: PPUSH
75203: CALL_OW 69
75207: AND
75208: IFFALSE 75669
75210: GO 75212
75212: DISABLE
75213: LD_INT 0
75215: PPUSH
75216: PPUSH
75217: PPUSH
75218: PPUSH
// begin enable ;
75219: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
75220: LD_ADDR_VAR 0 1
75224: PUSH
75225: LD_INT 34
75227: PUSH
75228: LD_INT 81
75230: PUSH
75231: EMPTY
75232: LIST
75233: LIST
75234: PPUSH
75235: CALL_OW 69
75239: PUSH
75240: FOR_IN
75241: IFFALSE 75313
// begin if not i in minersList then
75243: LD_VAR 0 1
75247: PUSH
75248: LD_EXP 106
75252: IN
75253: NOT
75254: IFFALSE 75311
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
75256: LD_ADDR_EXP 106
75260: PUSH
75261: LD_EXP 106
75265: PPUSH
75266: LD_EXP 106
75270: PUSH
75271: LD_INT 1
75273: PLUS
75274: PPUSH
75275: LD_VAR 0 1
75279: PPUSH
75280: CALL_OW 1
75284: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
75285: LD_ADDR_EXP 107
75289: PUSH
75290: LD_EXP 107
75294: PPUSH
75295: LD_EXP 107
75299: PUSH
75300: LD_INT 1
75302: PLUS
75303: PPUSH
75304: EMPTY
75305: PPUSH
75306: CALL_OW 1
75310: ST_TO_ADDR
// end end ;
75311: GO 75240
75313: POP
75314: POP
// for i := minerMinesList downto 1 do
75315: LD_ADDR_VAR 0 1
75319: PUSH
75320: DOUBLE
75321: LD_EXP 107
75325: INC
75326: ST_TO_ADDR
75327: LD_INT 1
75329: PUSH
75330: FOR_DOWNTO
75331: IFFALSE 75667
// begin if IsLive ( minersList [ i ] ) then
75333: LD_EXP 106
75337: PUSH
75338: LD_VAR 0 1
75342: ARRAY
75343: PPUSH
75344: CALL_OW 300
75348: IFFALSE 75376
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
75350: LD_EXP 106
75354: PUSH
75355: LD_VAR 0 1
75359: ARRAY
75360: PPUSH
75361: LD_EXP 107
75365: PUSH
75366: LD_VAR 0 1
75370: ARRAY
75371: PPUSH
75372: CALL_OW 505
// if not minerMinesList [ i ] then
75376: LD_EXP 107
75380: PUSH
75381: LD_VAR 0 1
75385: ARRAY
75386: NOT
75387: IFFALSE 75391
// continue ;
75389: GO 75330
// for j := minerMinesList [ i ] downto 1 do
75391: LD_ADDR_VAR 0 2
75395: PUSH
75396: DOUBLE
75397: LD_EXP 107
75401: PUSH
75402: LD_VAR 0 1
75406: ARRAY
75407: INC
75408: ST_TO_ADDR
75409: LD_INT 1
75411: PUSH
75412: FOR_DOWNTO
75413: IFFALSE 75663
// begin side := GetSide ( minersList [ i ] ) ;
75415: LD_ADDR_VAR 0 3
75419: PUSH
75420: LD_EXP 106
75424: PUSH
75425: LD_VAR 0 1
75429: ARRAY
75430: PPUSH
75431: CALL_OW 255
75435: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
75436: LD_ADDR_VAR 0 4
75440: PUSH
75441: LD_EXP 107
75445: PUSH
75446: LD_VAR 0 1
75450: ARRAY
75451: PUSH
75452: LD_VAR 0 2
75456: ARRAY
75457: PUSH
75458: LD_INT 1
75460: ARRAY
75461: PPUSH
75462: LD_EXP 107
75466: PUSH
75467: LD_VAR 0 1
75471: ARRAY
75472: PUSH
75473: LD_VAR 0 2
75477: ARRAY
75478: PUSH
75479: LD_INT 2
75481: ARRAY
75482: PPUSH
75483: CALL_OW 428
75487: ST_TO_ADDR
// if not tmp then
75488: LD_VAR 0 4
75492: NOT
75493: IFFALSE 75497
// continue ;
75495: GO 75412
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
75497: LD_VAR 0 4
75501: PUSH
75502: LD_INT 81
75504: PUSH
75505: LD_VAR 0 3
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: PPUSH
75514: CALL_OW 69
75518: IN
75519: PUSH
75520: LD_EXP 107
75524: PUSH
75525: LD_VAR 0 1
75529: ARRAY
75530: PUSH
75531: LD_VAR 0 2
75535: ARRAY
75536: PUSH
75537: LD_INT 1
75539: ARRAY
75540: PPUSH
75541: LD_EXP 107
75545: PUSH
75546: LD_VAR 0 1
75550: ARRAY
75551: PUSH
75552: LD_VAR 0 2
75556: ARRAY
75557: PUSH
75558: LD_INT 2
75560: ARRAY
75561: PPUSH
75562: CALL_OW 458
75566: AND
75567: IFFALSE 75661
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
75569: LD_EXP 107
75573: PUSH
75574: LD_VAR 0 1
75578: ARRAY
75579: PUSH
75580: LD_VAR 0 2
75584: ARRAY
75585: PUSH
75586: LD_INT 1
75588: ARRAY
75589: PPUSH
75590: LD_EXP 107
75594: PUSH
75595: LD_VAR 0 1
75599: ARRAY
75600: PUSH
75601: LD_VAR 0 2
75605: ARRAY
75606: PUSH
75607: LD_INT 2
75609: ARRAY
75610: PPUSH
75611: LD_VAR 0 3
75615: PPUSH
75616: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
75620: LD_ADDR_EXP 107
75624: PUSH
75625: LD_EXP 107
75629: PPUSH
75630: LD_VAR 0 1
75634: PPUSH
75635: LD_EXP 107
75639: PUSH
75640: LD_VAR 0 1
75644: ARRAY
75645: PPUSH
75646: LD_VAR 0 2
75650: PPUSH
75651: CALL_OW 3
75655: PPUSH
75656: CALL_OW 1
75660: ST_TO_ADDR
// end ; end ;
75661: GO 75412
75663: POP
75664: POP
// end ;
75665: GO 75330
75667: POP
75668: POP
// end ;
75669: PPOPN 4
75671: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
75672: LD_INT 0
75674: PPUSH
75675: PPUSH
// result := false ;
75676: LD_ADDR_VAR 0 4
75680: PUSH
75681: LD_INT 0
75683: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
75684: LD_VAR 0 1
75688: PPUSH
75689: CALL_OW 264
75693: PUSH
75694: LD_INT 81
75696: EQUAL
75697: NOT
75698: IFFALSE 75702
// exit ;
75700: GO 75942
// index := GetElementIndex ( minersList , unit ) ;
75702: LD_ADDR_VAR 0 5
75706: PUSH
75707: LD_EXP 106
75711: PPUSH
75712: LD_VAR 0 1
75716: PPUSH
75717: CALL 20071 0 2
75721: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
75722: LD_EXP 107
75726: PUSH
75727: LD_VAR 0 5
75731: ARRAY
75732: PUSH
75733: LD_EXP 108
75737: GREATEREQUAL
75738: IFFALSE 75742
// exit ;
75740: GO 75942
// ComMoveXY ( unit , x , y ) ;
75742: LD_VAR 0 1
75746: PPUSH
75747: LD_VAR 0 2
75751: PPUSH
75752: LD_VAR 0 3
75756: PPUSH
75757: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75761: LD_INT 35
75763: PPUSH
75764: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
75768: LD_VAR 0 1
75772: PPUSH
75773: LD_VAR 0 2
75777: PPUSH
75778: LD_VAR 0 3
75782: PPUSH
75783: CALL 51435 0 3
75787: NOT
75788: PUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL_OW 314
75798: AND
75799: IFFALSE 75803
// exit ;
75801: GO 75942
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
75803: LD_VAR 0 2
75807: PPUSH
75808: LD_VAR 0 3
75812: PPUSH
75813: CALL_OW 428
75817: PUSH
75818: LD_VAR 0 1
75822: EQUAL
75823: PUSH
75824: LD_VAR 0 1
75828: PPUSH
75829: CALL_OW 314
75833: NOT
75834: AND
75835: IFFALSE 75761
// PlaySoundXY ( x , y , PlantMine ) ;
75837: LD_VAR 0 2
75841: PPUSH
75842: LD_VAR 0 3
75846: PPUSH
75847: LD_STRING PlantMine
75849: PPUSH
75850: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
75854: LD_VAR 0 2
75858: PPUSH
75859: LD_VAR 0 3
75863: PPUSH
75864: LD_VAR 0 1
75868: PPUSH
75869: CALL_OW 255
75873: PPUSH
75874: LD_INT 0
75876: PPUSH
75877: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
75881: LD_ADDR_EXP 107
75885: PUSH
75886: LD_EXP 107
75890: PPUSH
75891: LD_VAR 0 5
75895: PUSH
75896: LD_EXP 107
75900: PUSH
75901: LD_VAR 0 5
75905: ARRAY
75906: PUSH
75907: LD_INT 1
75909: PLUS
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: PPUSH
75915: LD_VAR 0 2
75919: PUSH
75920: LD_VAR 0 3
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: PPUSH
75929: CALL 20286 0 3
75933: ST_TO_ADDR
// result := true ;
75934: LD_ADDR_VAR 0 4
75938: PUSH
75939: LD_INT 1
75941: ST_TO_ADDR
// end ;
75942: LD_VAR 0 4
75946: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
75947: LD_INT 0
75949: PPUSH
75950: PPUSH
75951: PPUSH
// if not unit in minersList then
75952: LD_VAR 0 1
75956: PUSH
75957: LD_EXP 106
75961: IN
75962: NOT
75963: IFFALSE 75967
// exit ;
75965: GO 76359
// index := GetElementIndex ( minersList , unit ) ;
75967: LD_ADDR_VAR 0 6
75971: PUSH
75972: LD_EXP 106
75976: PPUSH
75977: LD_VAR 0 1
75981: PPUSH
75982: CALL 20071 0 2
75986: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
75987: LD_ADDR_VAR 0 5
75991: PUSH
75992: DOUBLE
75993: LD_EXP 107
75997: PUSH
75998: LD_VAR 0 6
76002: ARRAY
76003: INC
76004: ST_TO_ADDR
76005: LD_INT 1
76007: PUSH
76008: FOR_DOWNTO
76009: IFFALSE 76170
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
76011: LD_EXP 107
76015: PUSH
76016: LD_VAR 0 6
76020: ARRAY
76021: PUSH
76022: LD_VAR 0 5
76026: ARRAY
76027: PUSH
76028: LD_INT 1
76030: ARRAY
76031: PUSH
76032: LD_VAR 0 2
76036: EQUAL
76037: PUSH
76038: LD_EXP 107
76042: PUSH
76043: LD_VAR 0 6
76047: ARRAY
76048: PUSH
76049: LD_VAR 0 5
76053: ARRAY
76054: PUSH
76055: LD_INT 2
76057: ARRAY
76058: PUSH
76059: LD_VAR 0 3
76063: EQUAL
76064: AND
76065: IFFALSE 76168
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
76067: LD_EXP 107
76071: PUSH
76072: LD_VAR 0 6
76076: ARRAY
76077: PUSH
76078: LD_VAR 0 5
76082: ARRAY
76083: PUSH
76084: LD_INT 1
76086: ARRAY
76087: PPUSH
76088: LD_EXP 107
76092: PUSH
76093: LD_VAR 0 6
76097: ARRAY
76098: PUSH
76099: LD_VAR 0 5
76103: ARRAY
76104: PUSH
76105: LD_INT 2
76107: ARRAY
76108: PPUSH
76109: LD_VAR 0 1
76113: PPUSH
76114: CALL_OW 255
76118: PPUSH
76119: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
76123: LD_ADDR_EXP 107
76127: PUSH
76128: LD_EXP 107
76132: PPUSH
76133: LD_VAR 0 6
76137: PPUSH
76138: LD_EXP 107
76142: PUSH
76143: LD_VAR 0 6
76147: ARRAY
76148: PPUSH
76149: LD_VAR 0 5
76153: PPUSH
76154: CALL_OW 3
76158: PPUSH
76159: CALL_OW 1
76163: ST_TO_ADDR
// exit ;
76164: POP
76165: POP
76166: GO 76359
// end ; end ;
76168: GO 76008
76170: POP
76171: POP
// for i := minerMinesList [ index ] downto 1 do
76172: LD_ADDR_VAR 0 5
76176: PUSH
76177: DOUBLE
76178: LD_EXP 107
76182: PUSH
76183: LD_VAR 0 6
76187: ARRAY
76188: INC
76189: ST_TO_ADDR
76190: LD_INT 1
76192: PUSH
76193: FOR_DOWNTO
76194: IFFALSE 76357
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
76196: LD_EXP 107
76200: PUSH
76201: LD_VAR 0 6
76205: ARRAY
76206: PUSH
76207: LD_VAR 0 5
76211: ARRAY
76212: PUSH
76213: LD_INT 1
76215: ARRAY
76216: PPUSH
76217: LD_EXP 107
76221: PUSH
76222: LD_VAR 0 6
76226: ARRAY
76227: PUSH
76228: LD_VAR 0 5
76232: ARRAY
76233: PUSH
76234: LD_INT 2
76236: ARRAY
76237: PPUSH
76238: LD_VAR 0 2
76242: PPUSH
76243: LD_VAR 0 3
76247: PPUSH
76248: CALL_OW 298
76252: PUSH
76253: LD_INT 6
76255: LESS
76256: IFFALSE 76355
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
76258: LD_EXP 107
76262: PUSH
76263: LD_VAR 0 6
76267: ARRAY
76268: PUSH
76269: LD_VAR 0 5
76273: ARRAY
76274: PUSH
76275: LD_INT 1
76277: ARRAY
76278: PPUSH
76279: LD_EXP 107
76283: PUSH
76284: LD_VAR 0 6
76288: ARRAY
76289: PUSH
76290: LD_VAR 0 5
76294: ARRAY
76295: PUSH
76296: LD_INT 2
76298: ARRAY
76299: PPUSH
76300: LD_VAR 0 1
76304: PPUSH
76305: CALL_OW 255
76309: PPUSH
76310: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
76314: LD_ADDR_EXP 107
76318: PUSH
76319: LD_EXP 107
76323: PPUSH
76324: LD_VAR 0 6
76328: PPUSH
76329: LD_EXP 107
76333: PUSH
76334: LD_VAR 0 6
76338: ARRAY
76339: PPUSH
76340: LD_VAR 0 5
76344: PPUSH
76345: CALL_OW 3
76349: PPUSH
76350: CALL_OW 1
76354: ST_TO_ADDR
// end ; end ;
76355: GO 76193
76357: POP
76358: POP
// end ;
76359: LD_VAR 0 4
76363: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
76364: LD_INT 0
76366: PPUSH
76367: PPUSH
76368: PPUSH
76369: PPUSH
76370: PPUSH
76371: PPUSH
76372: PPUSH
76373: PPUSH
76374: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
76375: LD_VAR 0 1
76379: PPUSH
76380: CALL_OW 264
76384: PUSH
76385: LD_INT 81
76387: EQUAL
76388: NOT
76389: PUSH
76390: LD_VAR 0 1
76394: PUSH
76395: LD_EXP 106
76399: IN
76400: NOT
76401: OR
76402: IFFALSE 76406
// exit ;
76404: GO 76728
// index := GetElementIndex ( minersList , unit ) ;
76406: LD_ADDR_VAR 0 6
76410: PUSH
76411: LD_EXP 106
76415: PPUSH
76416: LD_VAR 0 1
76420: PPUSH
76421: CALL 20071 0 2
76425: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
76426: LD_ADDR_VAR 0 8
76430: PUSH
76431: LD_EXP 108
76435: PUSH
76436: LD_EXP 107
76440: PUSH
76441: LD_VAR 0 6
76445: ARRAY
76446: MINUS
76447: ST_TO_ADDR
// if not minesFreeAmount then
76448: LD_VAR 0 8
76452: NOT
76453: IFFALSE 76457
// exit ;
76455: GO 76728
// tmp := [ ] ;
76457: LD_ADDR_VAR 0 7
76461: PUSH
76462: EMPTY
76463: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
76464: LD_ADDR_VAR 0 5
76468: PUSH
76469: DOUBLE
76470: LD_INT 1
76472: DEC
76473: ST_TO_ADDR
76474: LD_VAR 0 8
76478: PUSH
76479: FOR_TO
76480: IFFALSE 76675
// begin _d := rand ( 0 , 5 ) ;
76482: LD_ADDR_VAR 0 11
76486: PUSH
76487: LD_INT 0
76489: PPUSH
76490: LD_INT 5
76492: PPUSH
76493: CALL_OW 12
76497: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
76498: LD_ADDR_VAR 0 12
76502: PUSH
76503: LD_INT 2
76505: PPUSH
76506: LD_INT 6
76508: PPUSH
76509: CALL_OW 12
76513: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
76514: LD_ADDR_VAR 0 9
76518: PUSH
76519: LD_VAR 0 2
76523: PPUSH
76524: LD_VAR 0 11
76528: PPUSH
76529: LD_VAR 0 12
76533: PPUSH
76534: CALL_OW 272
76538: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
76539: LD_ADDR_VAR 0 10
76543: PUSH
76544: LD_VAR 0 3
76548: PPUSH
76549: LD_VAR 0 11
76553: PPUSH
76554: LD_VAR 0 12
76558: PPUSH
76559: CALL_OW 273
76563: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
76564: LD_VAR 0 9
76568: PPUSH
76569: LD_VAR 0 10
76573: PPUSH
76574: CALL_OW 488
76578: PUSH
76579: LD_VAR 0 9
76583: PUSH
76584: LD_VAR 0 10
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PUSH
76593: LD_VAR 0 7
76597: IN
76598: NOT
76599: AND
76600: PUSH
76601: LD_VAR 0 9
76605: PPUSH
76606: LD_VAR 0 10
76610: PPUSH
76611: CALL_OW 458
76615: NOT
76616: AND
76617: IFFALSE 76659
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
76619: LD_ADDR_VAR 0 7
76623: PUSH
76624: LD_VAR 0 7
76628: PPUSH
76629: LD_VAR 0 7
76633: PUSH
76634: LD_INT 1
76636: PLUS
76637: PPUSH
76638: LD_VAR 0 9
76642: PUSH
76643: LD_VAR 0 10
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: PPUSH
76652: CALL_OW 1
76656: ST_TO_ADDR
76657: GO 76673
// i := i - 1 ;
76659: LD_ADDR_VAR 0 5
76663: PUSH
76664: LD_VAR 0 5
76668: PUSH
76669: LD_INT 1
76671: MINUS
76672: ST_TO_ADDR
// end ;
76673: GO 76479
76675: POP
76676: POP
// for i in tmp do
76677: LD_ADDR_VAR 0 5
76681: PUSH
76682: LD_VAR 0 7
76686: PUSH
76687: FOR_IN
76688: IFFALSE 76726
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
76690: LD_VAR 0 1
76694: PPUSH
76695: LD_VAR 0 5
76699: PUSH
76700: LD_INT 1
76702: ARRAY
76703: PPUSH
76704: LD_VAR 0 5
76708: PUSH
76709: LD_INT 2
76711: ARRAY
76712: PPUSH
76713: CALL 75672 0 3
76717: NOT
76718: IFFALSE 76724
// exit ;
76720: POP
76721: POP
76722: GO 76728
76724: GO 76687
76726: POP
76727: POP
// end ;
76728: LD_VAR 0 4
76732: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
76733: LD_INT 0
76735: PPUSH
76736: PPUSH
76737: PPUSH
76738: PPUSH
76739: PPUSH
76740: PPUSH
76741: PPUSH
// if not GetClass ( unit ) = class_sniper then
76742: LD_VAR 0 1
76746: PPUSH
76747: CALL_OW 257
76751: PUSH
76752: LD_INT 5
76754: EQUAL
76755: NOT
76756: IFFALSE 76760
// exit ;
76758: GO 77148
// dist := 8 ;
76760: LD_ADDR_VAR 0 5
76764: PUSH
76765: LD_INT 8
76767: ST_TO_ADDR
// viewRange := 12 ;
76768: LD_ADDR_VAR 0 7
76772: PUSH
76773: LD_INT 12
76775: ST_TO_ADDR
// side := GetSide ( unit ) ;
76776: LD_ADDR_VAR 0 6
76780: PUSH
76781: LD_VAR 0 1
76785: PPUSH
76786: CALL_OW 255
76790: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
76791: LD_INT 61
76793: PPUSH
76794: LD_VAR 0 6
76798: PPUSH
76799: CALL_OW 321
76803: PUSH
76804: LD_INT 2
76806: EQUAL
76807: IFFALSE 76817
// viewRange := 16 ;
76809: LD_ADDR_VAR 0 7
76813: PUSH
76814: LD_INT 16
76816: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
76817: LD_VAR 0 1
76821: PPUSH
76822: LD_VAR 0 2
76826: PPUSH
76827: LD_VAR 0 3
76831: PPUSH
76832: CALL_OW 297
76836: PUSH
76837: LD_VAR 0 5
76841: GREATER
76842: IFFALSE 76921
// begin ComMoveXY ( unit , x , y ) ;
76844: LD_VAR 0 1
76848: PPUSH
76849: LD_VAR 0 2
76853: PPUSH
76854: LD_VAR 0 3
76858: PPUSH
76859: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
76863: LD_INT 35
76865: PPUSH
76866: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
76870: LD_VAR 0 1
76874: PPUSH
76875: LD_VAR 0 2
76879: PPUSH
76880: LD_VAR 0 3
76884: PPUSH
76885: CALL 51435 0 3
76889: NOT
76890: IFFALSE 76894
// exit ;
76892: GO 77148
// until GetDistUnitXY ( unit , x , y ) < dist ;
76894: LD_VAR 0 1
76898: PPUSH
76899: LD_VAR 0 2
76903: PPUSH
76904: LD_VAR 0 3
76908: PPUSH
76909: CALL_OW 297
76913: PUSH
76914: LD_VAR 0 5
76918: LESS
76919: IFFALSE 76863
// end ; ComTurnXY ( unit , x , y ) ;
76921: LD_VAR 0 1
76925: PPUSH
76926: LD_VAR 0 2
76930: PPUSH
76931: LD_VAR 0 3
76935: PPUSH
76936: CALL_OW 118
// wait ( 5 ) ;
76940: LD_INT 5
76942: PPUSH
76943: CALL_OW 67
// _d := GetDir ( unit ) ;
76947: LD_ADDR_VAR 0 10
76951: PUSH
76952: LD_VAR 0 1
76956: PPUSH
76957: CALL_OW 254
76961: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
76962: LD_ADDR_VAR 0 8
76966: PUSH
76967: LD_VAR 0 1
76971: PPUSH
76972: CALL_OW 250
76976: PPUSH
76977: LD_VAR 0 10
76981: PPUSH
76982: LD_VAR 0 5
76986: PPUSH
76987: CALL_OW 272
76991: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
76992: LD_ADDR_VAR 0 9
76996: PUSH
76997: LD_VAR 0 1
77001: PPUSH
77002: CALL_OW 251
77006: PPUSH
77007: LD_VAR 0 10
77011: PPUSH
77012: LD_VAR 0 5
77016: PPUSH
77017: CALL_OW 273
77021: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77022: LD_VAR 0 8
77026: PPUSH
77027: LD_VAR 0 9
77031: PPUSH
77032: CALL_OW 488
77036: NOT
77037: IFFALSE 77041
// exit ;
77039: GO 77148
// ComAnimCustom ( unit , 1 ) ;
77041: LD_VAR 0 1
77045: PPUSH
77046: LD_INT 1
77048: PPUSH
77049: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
77053: LD_VAR 0 8
77057: PPUSH
77058: LD_VAR 0 9
77062: PPUSH
77063: LD_VAR 0 6
77067: PPUSH
77068: LD_VAR 0 7
77072: PPUSH
77073: CALL_OW 330
// repeat wait ( 1 ) ;
77077: LD_INT 1
77079: PPUSH
77080: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
77084: LD_VAR 0 1
77088: PPUSH
77089: CALL_OW 316
77093: PUSH
77094: LD_VAR 0 1
77098: PPUSH
77099: CALL_OW 314
77103: OR
77104: PUSH
77105: LD_VAR 0 1
77109: PPUSH
77110: CALL_OW 302
77114: NOT
77115: OR
77116: PUSH
77117: LD_VAR 0 1
77121: PPUSH
77122: CALL_OW 301
77126: OR
77127: IFFALSE 77077
// RemoveSeeing ( _x , _y , side ) ;
77129: LD_VAR 0 8
77133: PPUSH
77134: LD_VAR 0 9
77138: PPUSH
77139: LD_VAR 0 6
77143: PPUSH
77144: CALL_OW 331
// end ;
77148: LD_VAR 0 4
77152: RET
