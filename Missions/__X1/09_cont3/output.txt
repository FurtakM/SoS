// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 10269 0 0
// LoadEnv ;
  16: CALL 9861 0 0
// LoadCam ;
  20: CALL 10533 0 0
// LoadTech ;
  24: CALL 10609 0 0
// LoadBase ;
  28: CALL 11095 0 0
// PrepareArabian ;
  32: CALL 186 0 0
// PrepareRussian ;
  36: CALL 3052 0 0
// Action ;
  40: CALL 12407 0 0
// end ;
  44: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; export wave , strength ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 09c_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 09c_
  63: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 09_tick
  71: PPUSH
  72: LD_INT 31500
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 09c_tick
  87: PPUSH
  88: LD_INT 10500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// playerInBase := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// kamikazeTrained := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// apeDriver := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 120
 127: PUSH
 128: LD_INT 150
 130: PUSH
 131: LD_INT 180
 133: PUSH
 134: LD_INT 220
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// missionTime := 0 0$00 ;
 149: LD_ADDR_EXP 9
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// ruDefeated := false ;
 157: LD_ADDR_EXP 10
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// wave := 0 ;
 165: LD_ADDR_EXP 11
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// strength := 0 ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ; end_of_file
 181: LD_VAR 0 1
 185: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 197: LD_STRING 05_DrugsTested
 199: PPUSH
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 30
 209: IFFALSE 224
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 211: LD_INT 5
 213: PPUSH
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 2
 219: PPUSH
 220: CALL_OW 322
// uc_side := 2 ;
 224: LD_ADDR_OWVAR 20
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// uc_nation := nation_nature ;
 232: LD_ADDR_OWVAR 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 240: LD_ADDR_VAR 0 3
 244: PUSH
 245: LD_STRING 09_apes
 247: PPUSH
 248: CALL_OW 31
 252: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 253: LD_ADDR_VAR 0 6
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 30
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: ST_TO_ADDR
// if apes then
 305: LD_VAR 0 3
 309: IFFALSE 388
// for i in apes do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: LD_VAR 0 3
 320: PUSH
 321: FOR_IN
 322: IFFALSE 386
// if UnitsInside ( b [ 1 ] ) < 6 then
 324: LD_VAR 0 6
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: CALL_OW 313
 337: PUSH
 338: LD_INT 6
 340: LESS
 341: IFFALSE 363
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_VAR 0 6
 352: PUSH
 353: LD_INT 1
 355: ARRAY
 356: PPUSH
 357: CALL_OW 52
 361: GO 384
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 363: LD_VAR 0 2
 367: PPUSH
 368: LD_INT 82
 370: PPUSH
 371: LD_INT 27
 373: PPUSH
 374: LD_INT 6
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 50
 384: GO 321
 386: POP
 387: POP
// InitHC_All ( ) ;
 388: CALL_OW 584
// uc_nation := nation_arabian ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 2
 399: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 400: LD_ADDR_VAR 0 6
 404: PUSH
 405: LD_INT 22
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 5
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 474: LD_ADDR_EXP 33
 478: PUSH
 479: LD_STRING Rolf
 481: PPUSH
 482: LD_EXP 1
 486: NOT
 487: PPUSH
 488: LD_STRING 06_
 490: PPUSH
 491: CALL 15618 0 3
 495: ST_TO_ADDR
// if Rolf then
 496: LD_EXP 33
 500: IFFALSE 709
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 502: LD_ADDR_EXP 32
 506: PUSH
 507: LD_STRING 06_RolfSquad
 509: PPUSH
 510: CALL_OW 31
 514: ST_TO_ADDR
// if rolfSquad < 3 then
 515: LD_EXP 32
 519: PUSH
 520: LD_INT 3
 522: LESS
 523: IFFALSE 586
// for i := 1 to 3 - Count ( rolfSquad ) do
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: DOUBLE
 531: LD_INT 1
 533: DEC
 534: ST_TO_ADDR
 535: LD_INT 3
 537: PUSH
 538: LD_EXP 32
 542: PPUSH
 543: CALL 17842 0 1
 547: MINUS
 548: PUSH
 549: FOR_TO
 550: IFFALSE 584
// begin PrepareSoldier ( false , 4 ) ;
 552: LD_INT 0
 554: PPUSH
 555: LD_INT 4
 557: PPUSH
 558: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 562: LD_ADDR_EXP 32
 566: PUSH
 567: LD_EXP 32
 571: PPUSH
 572: CALL_OW 44
 576: PPUSH
 577: CALL 53818 0 2
 581: ST_TO_ADDR
// end ;
 582: GO 549
 584: POP
 585: POP
// if b then
 586: LD_VAR 0 6
 590: IFFALSE 665
// begin for i in rolfSquad union Rolf do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_EXP 32
 601: PUSH
 602: LD_EXP 33
 606: UNION
 607: PUSH
 608: FOR_IN
 609: IFFALSE 661
// begin SetClass ( i , 1 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_VAR 0 6
 632: PPUSH
 633: LD_INT 3
 635: PUSH
 636: LD_INT 62
 638: PUSH
 639: EMPTY
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 52
// end ;
 659: GO 608
 661: POP
 662: POP
// end else
 663: GO 709
// for i in rolfSquad union Rolf do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_EXP 32
 674: PUSH
 675: LD_EXP 33
 679: UNION
 680: PUSH
 681: FOR_IN
 682: IFFALSE 707
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 684: LD_VAR 0 2
 688: PPUSH
 689: LD_INT 82
 691: PPUSH
 692: LD_INT 27
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 50
 705: GO 681
 707: POP
 708: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 13
 713: PUSH
 714: LD_STRING Heike
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 15618 0 3
 732: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 16
 737: PUSH
 738: LD_STRING Ibrahim
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 15618 0 3
 756: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 14
 761: PUSH
 762: LD_STRING Givi
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 15618 0 3
 780: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 17
 785: PUSH
 786: LD_STRING Kamil
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 15618 0 3
 804: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 18
 809: PUSH
 810: LD_STRING Kaia
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 15618 0 3
 828: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 19
 833: PUSH
 834: LD_STRING Sophia
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 15618 0 3
 852: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 20
 857: PUSH
 858: LD_STRING Markov
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 15618 0 3
 876: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 23
 881: PUSH
 882: LD_STRING Aviradze
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 15618 0 3
 900: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 22
 905: PUSH
 906: LD_STRING Kurt
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 15618 0 3
 924: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_STRING Mike
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 15618 0 3
 948: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 21
 953: PUSH
 954: LD_STRING Olaf
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 15618 0 3
 972: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 973: LD_ADDR_EXP 30
 977: PUSH
 978: LD_STRING 09c_heikeSecondSquad
 980: PPUSH
 981: CALL_OW 31
 985: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 986: LD_ADDR_EXP 24
 990: PUSH
 991: LD_STRING Schulz
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_EXP 2
1004: PPUSH
1005: CALL 15618 0 3
1009: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
1010: LD_ADDR_EXP 25
1014: PUSH
1015: LD_STRING Basim
1017: PPUSH
1018: LD_EXP 1
1022: NOT
1023: PPUSH
1024: LD_EXP 2
1028: PPUSH
1029: CALL 15618 0 3
1033: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1034: LD_ADDR_EXP 26
1038: PUSH
1039: LD_STRING Lemmy
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 2
1052: PPUSH
1053: CALL 15618 0 3
1057: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1058: LD_ADDR_EXP 27
1062: PUSH
1063: LD_STRING Mia
1065: PPUSH
1066: LD_EXP 1
1070: NOT
1071: PPUSH
1072: LD_EXP 2
1076: PPUSH
1077: CALL 15618 0 3
1081: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1082: LD_ADDR_EXP 28
1086: PUSH
1087: LD_STRING Nia
1089: PPUSH
1090: LD_EXP 1
1094: NOT
1095: PPUSH
1096: LD_EXP 2
1100: PPUSH
1101: CALL 15618 0 3
1105: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1106: LD_ADDR_EXP 29
1110: PUSH
1111: LD_STRING Jenna
1113: PPUSH
1114: LD_EXP 1
1118: NOT
1119: PPUSH
1120: LD_EXP 2
1124: PPUSH
1125: CALL 15618 0 3
1129: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING 09c_schulzSecondSquad
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// if debug then
1143: LD_EXP 1
1147: IFFALSE 1227
// begin schulzSecondSquad := [ ] ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: EMPTY
1155: ST_TO_ADDR
// for i := 1 to 3 do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_INT 3
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1225
// begin uc_side := 2 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
// uc_nation := nation_arabian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 2
1187: ST_TO_ADDR
// PrepareHuman ( false , i , 0 ) ;
1188: LD_INT 0
1190: PPUSH
1191: LD_VAR 0 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PPUSH
1213: CALL_OW 44
1217: PPUSH
1218: CALL 53818 0 2
1222: ST_TO_ADDR
// end ;
1223: GO 1169
1225: POP
1226: POP
// end ; vehicles := LoadVariable ( 09c_vehicles , [ [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 36 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 41 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 37 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 35 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 34 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 38 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 40 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 39 ] ] ) ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_STRING 09c_vehicles
1234: PPUSH
1235: LD_INT 13
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 28
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 36
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 13
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 28
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 0
1289: PUSH
1290: LD_INT 41
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 13
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: LD_INT 28
1314: PUSH
1315: LD_INT 2
1317: PUSH
1318: LD_INT 0
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 37
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 13
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 28
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 35
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 13
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 28
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: LD_INT 34
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 13
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 28
1416: PUSH
1417: LD_INT 2
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 38
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 13
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 28
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 40
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 13
1475: PUSH
1476: LD_INT 3
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 28
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 39
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 30
1521: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Heike , LoadVariable ( 09c_Heike_ID , - 1 ) , vehicles ) ;
1522: LD_ADDR_VAR 0 9
1526: PUSH
1527: LD_VAR 0 9
1531: PUSH
1532: LD_EXP 13
1536: PPUSH
1537: LD_STRING 09c_Heike_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2764 0 3
1558: DIFF
1559: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Givi , LoadVariable ( 09c_Givi_ID , - 1 ) , vehicles ) ;
1560: LD_ADDR_VAR 0 9
1564: PUSH
1565: LD_VAR 0 9
1569: PUSH
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING 09c_Givi_ID
1577: PPUSH
1578: LD_INT 1
1580: NEG
1581: PPUSH
1582: CALL_OW 30
1586: PPUSH
1587: LD_VAR 0 9
1591: PPUSH
1592: CALL 2764 0 3
1596: DIFF
1597: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mike , LoadVariable ( 09c_Mike_ID , - 1 ) , vehicles ) ;
1598: LD_ADDR_VAR 0 9
1602: PUSH
1603: LD_VAR 0 9
1607: PUSH
1608: LD_EXP 15
1612: PPUSH
1613: LD_STRING 09c_Mike_ID
1615: PPUSH
1616: LD_INT 1
1618: NEG
1619: PPUSH
1620: CALL_OW 30
1624: PPUSH
1625: LD_VAR 0 9
1629: PPUSH
1630: CALL 2764 0 3
1634: DIFF
1635: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Ibrahim , LoadVariable ( 09c_Ibrahim_ID , - 1 ) , vehicles ) ;
1636: LD_ADDR_VAR 0 9
1640: PUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_EXP 16
1650: PPUSH
1651: LD_STRING 09c_Ibrahim_ID
1653: PPUSH
1654: LD_INT 1
1656: NEG
1657: PPUSH
1658: CALL_OW 30
1662: PPUSH
1663: LD_VAR 0 9
1667: PPUSH
1668: CALL 2764 0 3
1672: DIFF
1673: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kamil , LoadVariable ( 09c_Kamil_ID , - 1 ) , vehicles ) ;
1674: LD_ADDR_VAR 0 9
1678: PUSH
1679: LD_VAR 0 9
1683: PUSH
1684: LD_EXP 17
1688: PPUSH
1689: LD_STRING 09c_Kamil_ID
1691: PPUSH
1692: LD_INT 1
1694: NEG
1695: PPUSH
1696: CALL_OW 30
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL 2764 0 3
1710: DIFF
1711: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kaia , LoadVariable ( 09c_Kaia_ID , - 1 ) , vehicles ) ;
1712: LD_ADDR_VAR 0 9
1716: PUSH
1717: LD_VAR 0 9
1721: PUSH
1722: LD_EXP 18
1726: PPUSH
1727: LD_STRING 09c_Kaia_ID
1729: PPUSH
1730: LD_INT 1
1732: NEG
1733: PPUSH
1734: CALL_OW 30
1738: PPUSH
1739: LD_VAR 0 9
1743: PPUSH
1744: CALL 2764 0 3
1748: DIFF
1749: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Sophia , LoadVariable ( 09c_Sophia_ID , - 1 ) , vehicles ) ;
1750: LD_ADDR_VAR 0 9
1754: PUSH
1755: LD_VAR 0 9
1759: PUSH
1760: LD_EXP 19
1764: PPUSH
1765: LD_STRING 09c_Sophia_ID
1767: PPUSH
1768: LD_INT 1
1770: NEG
1771: PPUSH
1772: CALL_OW 30
1776: PPUSH
1777: LD_VAR 0 9
1781: PPUSH
1782: CALL 2764 0 3
1786: DIFF
1787: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Markov , LoadVariable ( 09c_Markov_ID , - 1 ) , vehicles ) ;
1788: LD_ADDR_VAR 0 9
1792: PUSH
1793: LD_VAR 0 9
1797: PUSH
1798: LD_EXP 20
1802: PPUSH
1803: LD_STRING 09c_Markov_ID
1805: PPUSH
1806: LD_INT 1
1808: NEG
1809: PPUSH
1810: CALL_OW 30
1814: PPUSH
1815: LD_VAR 0 9
1819: PPUSH
1820: CALL 2764 0 3
1824: DIFF
1825: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Olaf , LoadVariable ( 09c_Olaf_ID , - 1 ) , vehicles ) ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_VAR 0 9
1835: PUSH
1836: LD_EXP 21
1840: PPUSH
1841: LD_STRING 09c_Olaf_ID
1843: PPUSH
1844: LD_INT 1
1846: NEG
1847: PPUSH
1848: CALL_OW 30
1852: PPUSH
1853: LD_VAR 0 9
1857: PPUSH
1858: CALL 2764 0 3
1862: DIFF
1863: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kurt , LoadVariable ( 09c_Kurt_ID , - 1 ) , vehicles ) ;
1864: LD_ADDR_VAR 0 9
1868: PUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_STRING 09c_Kurt_ID
1881: PPUSH
1882: LD_INT 1
1884: NEG
1885: PPUSH
1886: CALL_OW 30
1890: PPUSH
1891: LD_VAR 0 9
1895: PPUSH
1896: CALL 2764 0 3
1900: DIFF
1901: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Aviradze , LoadVariable ( 09c_Aviradze_ID , - 1 ) , vehicles ) ;
1902: LD_ADDR_VAR 0 9
1906: PUSH
1907: LD_VAR 0 9
1911: PUSH
1912: LD_EXP 23
1916: PPUSH
1917: LD_STRING 09c_Aviradze_ID
1919: PPUSH
1920: LD_INT 1
1922: NEG
1923: PPUSH
1924: CALL_OW 30
1928: PPUSH
1929: LD_VAR 0 9
1933: PPUSH
1934: CALL 2764 0 3
1938: DIFF
1939: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Schulz , LoadVariable ( 09c_Schulz_ID , 34 ) , vehicles ) ;
1940: LD_ADDR_VAR 0 9
1944: PUSH
1945: LD_VAR 0 9
1949: PUSH
1950: LD_EXP 24
1954: PPUSH
1955: LD_STRING 09c_Schulz_ID
1957: PPUSH
1958: LD_INT 34
1960: PPUSH
1961: CALL_OW 30
1965: PPUSH
1966: LD_VAR 0 9
1970: PPUSH
1971: CALL 2764 0 3
1975: DIFF
1976: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Lemmy , LoadVariable ( 09c_Lemmy_ID , 35 ) , vehicles ) ;
1977: LD_ADDR_VAR 0 9
1981: PUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_EXP 26
1991: PPUSH
1992: LD_STRING 09c_Lemmy_ID
1994: PPUSH
1995: LD_INT 35
1997: PPUSH
1998: CALL_OW 30
2002: PPUSH
2003: LD_VAR 0 9
2007: PPUSH
2008: CALL 2764 0 3
2012: DIFF
2013: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mia , LoadVariable ( 09c_Mia_ID , 36 ) , vehicles ) ;
2014: LD_ADDR_VAR 0 9
2018: PUSH
2019: LD_VAR 0 9
2023: PUSH
2024: LD_EXP 27
2028: PPUSH
2029: LD_STRING 09c_Mia_ID
2031: PPUSH
2032: LD_INT 36
2034: PPUSH
2035: CALL_OW 30
2039: PPUSH
2040: LD_VAR 0 9
2044: PPUSH
2045: CALL 2764 0 3
2049: DIFF
2050: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Nia , LoadVariable ( 09c_Nia_ID , 37 ) , vehicles ) ;
2051: LD_ADDR_VAR 0 9
2055: PUSH
2056: LD_VAR 0 9
2060: PUSH
2061: LD_EXP 28
2065: PPUSH
2066: LD_STRING 09c_Nia_ID
2068: PPUSH
2069: LD_INT 37
2071: PPUSH
2072: CALL_OW 30
2076: PPUSH
2077: LD_VAR 0 9
2081: PPUSH
2082: CALL 2764 0 3
2086: DIFF
2087: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Jenna , LoadVariable ( 09c_Jenna_ID , 38 ) , vehicles ) ;
2088: LD_ADDR_VAR 0 9
2092: PUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_EXP 29
2102: PPUSH
2103: LD_STRING 09c_Jenna_ID
2105: PPUSH
2106: LD_INT 38
2108: PPUSH
2109: CALL_OW 30
2113: PPUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: CALL 2764 0 3
2123: DIFF
2124: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Basim , LoadVariable ( 09c_Basim_ID , - 1 ) , vehicles ) ;
2125: LD_ADDR_VAR 0 9
2129: PUSH
2130: LD_VAR 0 9
2134: PUSH
2135: LD_EXP 25
2139: PPUSH
2140: LD_STRING 09c_Basim_ID
2142: PPUSH
2143: LD_INT 1
2145: NEG
2146: PPUSH
2147: CALL_OW 30
2151: PPUSH
2152: LD_VAR 0 9
2156: PPUSH
2157: CALL 2764 0 3
2161: DIFF
2162: ST_TO_ADDR
// for i := 1 to schulzSecondSquad do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_EXP 31
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2238
// vehicles := vehicles diff SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 38 + i ) , vehicles ) ;
2181: LD_ADDR_VAR 0 9
2185: PUSH
2186: LD_VAR 0 9
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_VAR 0 2
2200: ARRAY
2201: PPUSH
2202: LD_STRING 09c_random_ID_
2204: PUSH
2205: LD_VAR 0 2
2209: STR
2210: PPUSH
2211: LD_INT 38
2213: PUSH
2214: LD_VAR 0 2
2218: PLUS
2219: PPUSH
2220: CALL_OW 30
2224: PPUSH
2225: LD_VAR 0 9
2229: PPUSH
2230: CALL 2764 0 3
2234: DIFF
2235: ST_TO_ADDR
2236: GO 2178
2238: POP
2239: POP
// for i := 1 to heikeSecondSquad do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 30
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2310
// vehicles := vehicles diff SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_hrandom_ID_ & i , - 1 ) , vehicles ) ;
2258: LD_ADDR_VAR 0 9
2262: PUSH
2263: LD_VAR 0 9
2267: PUSH
2268: LD_EXP 30
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_STRING 09c_hrandom_ID_
2281: PUSH
2282: LD_VAR 0 2
2286: STR
2287: PPUSH
2288: LD_INT 1
2290: NEG
2291: PPUSH
2292: CALL_OW 30
2296: PPUSH
2297: LD_VAR 0 9
2301: PPUSH
2302: CALL 2764 0 3
2306: DIFF
2307: ST_TO_ADDR
2308: GO 2255
2310: POP
2311: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2312: LD_INT 22
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 34
2324: PUSH
2325: LD_INT 31
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: IFFALSE 2543
// begin for j := Count ( vehicles ) downto 1 do
2342: LD_ADDR_VAR 0 7
2346: PUSH
2347: DOUBLE
2348: LD_VAR 0 9
2352: PPUSH
2353: CALL 17842 0 1
2357: INC
2358: ST_TO_ADDR
2359: LD_INT 1
2361: PUSH
2362: FOR_DOWNTO
2363: IFFALSE 2541
// begin i := vehicles [ j ] ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 9
2374: PUSH
2375: LD_VAR 0 7
2379: ARRAY
2380: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2381: LD_VAR 0 2
2385: PUSH
2386: LD_INT 3
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: IFFALSE 2539
// begin uc_side := 2 ;
2395: LD_ADDR_OWVAR 20
2399: PUSH
2400: LD_INT 2
2402: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2403: LD_ADDR_OWVAR 21
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 5
2415: ARRAY
2416: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 2
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 6
2460: ARRAY
2461: PPUSH
2462: CALL 20638 0 5
// veh := CreateVehicle ;
2466: LD_ADDR_VAR 0 8
2470: PUSH
2471: CALL_OW 45
2475: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2488: LD_VAR 0 8
2492: PPUSH
2493: LD_INT 7
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2503: LD_ADDR_VAR 0 9
2507: PUSH
2508: LD_VAR 0 9
2512: PPUSH
2513: LD_VAR 0 7
2517: PPUSH
2518: CALL_OW 3
2522: ST_TO_ADDR
// Connect ( veh ) ;
2523: LD_VAR 0 8
2527: PPUSH
2528: CALL 24120 0 1
// wait ( 0 0$0.3 ) ;
2532: LD_INT 10
2534: PPUSH
2535: CALL_OW 67
// end ; end ;
2539: GO 2362
2541: POP
2542: POP
// end ; vehicles := LoadVariable ( 09_otherVehicles , [ ] ) ;
2543: LD_ADDR_VAR 0 9
2547: PUSH
2548: LD_STRING 09_otherVehicles
2550: PPUSH
2551: EMPTY
2552: PPUSH
2553: CALL_OW 30
2557: ST_TO_ADDR
// if vehicles then
2558: LD_VAR 0 9
2562: IFFALSE 2759
// begin for i in vehicles do
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_VAR 0 9
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2757
// begin uc_side := 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 5
2597: ARRAY
2598: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 2
2612: PUSH
2613: LD_INT 2
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 2
2621: PUSH
2622: LD_INT 3
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 4
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 6
2642: ARRAY
2643: PPUSH
2644: CALL 20638 0 5
// veh := CreateVehicle ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2658: LD_VAR 0 8
2662: PPUSH
2663: LD_INT 5
2665: PPUSH
2666: CALL_OW 233
// if i [ 7 ] then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 7
2677: ARRAY
2678: IFFALSE 2698
// SetMark ( veh , i [ 7 ] ) ;
2680: LD_VAR 0 8
2684: PPUSH
2685: LD_VAR 0 2
2689: PUSH
2690: LD_INT 7
2692: ARRAY
2693: PPUSH
2694: CALL_OW 242
// PlaceUnitXYD ( veh , i [ 8 ] , i [ 9 ] , i [ 10 ] , false ) ;
2698: LD_VAR 0 8
2702: PPUSH
2703: LD_VAR 0 2
2707: PUSH
2708: LD_INT 8
2710: ARRAY
2711: PPUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 9
2719: ARRAY
2720: PPUSH
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 10
2728: ARRAY
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: CALL 55978 0 5
// SetFuel ( veh , i [ 6 ] ) ;
2737: LD_VAR 0 8
2741: PPUSH
2742: LD_VAR 0 2
2746: PUSH
2747: LD_INT 6
2749: ARRAY
2750: PPUSH
2751: CALL_OW 240
// end ;
2755: GO 2574
2757: POP
2758: POP
// end ; end ;
2759: LD_VAR 0 1
2763: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
// for i in vehicles do
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3018
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 8
2789: ARRAY
2790: PUSH
2791: LD_VAR 0 2
2795: EQUAL
2796: IFFALSE 2812
2798: PUSH
2799: LD_VAR 0 5
2803: PUSH
2804: LD_INT 3
2806: ARRAY
2807: PUSH
2808: LD_INT 1
2810: EQUAL
2811: AND
2812: IFFALSE 3016
// begin result := i ;
2814: LD_ADDR_VAR 0 4
2818: PUSH
2819: LD_VAR 0 5
2823: ST_TO_ADDR
// uc_side := 2 ;
2824: LD_ADDR_OWVAR 20
2828: PUSH
2829: LD_INT 2
2831: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2832: LD_ADDR_OWVAR 21
2836: PUSH
2837: LD_VAR 0 5
2841: PUSH
2842: LD_INT 5
2844: ARRAY
2845: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2846: LD_VAR 0 5
2850: PUSH
2851: LD_INT 1
2853: ARRAY
2854: PPUSH
2855: LD_VAR 0 5
2859: PUSH
2860: LD_INT 2
2862: ARRAY
2863: PPUSH
2864: LD_VAR 0 5
2868: PUSH
2869: LD_INT 3
2871: ARRAY
2872: PPUSH
2873: LD_VAR 0 5
2877: PUSH
2878: LD_INT 4
2880: ARRAY
2881: PPUSH
2882: LD_VAR 0 5
2886: PUSH
2887: LD_INT 6
2889: ARRAY
2890: PPUSH
2891: CALL 20638 0 5
// veh := CreateVehicle ;
2895: LD_ADDR_VAR 0 6
2899: PUSH
2900: CALL_OW 45
2904: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2905: LD_VAR 0 6
2909: PPUSH
2910: LD_INT 5
2912: PPUSH
2913: CALL_OW 233
// if i [ 7 ] < 0 then
2917: LD_VAR 0 5
2921: PUSH
2922: LD_INT 7
2924: ARRAY
2925: PUSH
2926: LD_INT 0
2928: LESS
2929: IFFALSE 2949
// SetMark ( veh , i [ 7 ] ) ;
2931: LD_VAR 0 6
2935: PPUSH
2936: LD_VAR 0 5
2940: PUSH
2941: LD_INT 7
2943: ARRAY
2944: PPUSH
2945: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2949: LD_VAR 0 6
2953: PPUSH
2954: LD_INT 7
2956: PPUSH
2957: LD_INT 0
2959: PPUSH
2960: CALL 52711 0 3
2964: NOT
2965: IFFALSE 2998
// begin SetDir ( unit , 5 ) ;
2967: LD_VAR 0 1
2971: PPUSH
2972: LD_INT 5
2974: PPUSH
2975: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2979: LD_VAR 0 1
2983: PPUSH
2984: LD_INT 8
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 49
// exit ;
2994: POP
2995: POP
2996: GO 3047
// end ; PlaceHumanInUnit ( unit , veh ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_VAR 0 6
3007: PPUSH
3008: CALL_OW 52
// exit ;
3012: POP
3013: POP
3014: GO 3047
// end ;
3016: GO 2779
3018: POP
3019: POP
// SetDir ( unit , 5 ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: LD_INT 5
3027: PPUSH
3028: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
3032: LD_VAR 0 1
3036: PPUSH
3037: LD_INT 8
3039: PPUSH
3040: LD_INT 0
3042: PPUSH
3043: CALL_OW 49
// end ; end_of_file
3047: LD_VAR 0 4
3051: RET
// export function PrepareRussian ; begin
3052: LD_INT 0
3054: PPUSH
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
3055: LD_INT 48
3057: PPUSH
3058: LD_INT 3
3060: PPUSH
3061: LD_INT 2
3063: PPUSH
3064: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
3068: LD_INT 49
3070: PPUSH
3071: LD_INT 3
3073: PPUSH
3074: LD_INT 2
3076: PPUSH
3077: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
3081: LD_INT 50
3083: PPUSH
3084: LD_INT 3
3086: PPUSH
3087: LD_INT 2
3089: PPUSH
3090: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
3094: LD_INT 51
3096: PPUSH
3097: LD_INT 3
3099: PPUSH
3100: LD_INT 2
3102: PPUSH
3103: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3107: LD_INT 57
3109: PPUSH
3110: LD_INT 3
3112: PPUSH
3113: LD_INT 2
3115: PPUSH
3116: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
3120: LD_INT 48
3122: PPUSH
3123: LD_INT 6
3125: PPUSH
3126: LD_INT 2
3128: PPUSH
3129: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
3133: LD_INT 49
3135: PPUSH
3136: LD_INT 6
3138: PPUSH
3139: LD_INT 2
3141: PPUSH
3142: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
3146: LD_INT 50
3148: PPUSH
3149: LD_INT 6
3151: PPUSH
3152: LD_INT 2
3154: PPUSH
3155: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
3159: LD_INT 51
3161: PPUSH
3162: LD_INT 6
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3172: LD_INT 57
3174: PPUSH
3175: LD_INT 6
3177: PPUSH
3178: LD_INT 2
3180: PPUSH
3181: CALL_OW 322
// if Difficulty >= 2 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 2
3192: GREATEREQUAL
3193: IFFALSE 3273
// begin SetTech ( tech_Weap2 , 3 , state_researched ) ;
3195: LD_INT 52
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3208: LD_INT 58
3210: PPUSH
3211: LD_INT 3
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3221: LD_INT 63
3223: PPUSH
3224: LD_INT 3
3226: PPUSH
3227: LD_INT 2
3229: PPUSH
3230: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3234: LD_INT 52
3236: PPUSH
3237: LD_INT 6
3239: PPUSH
3240: LD_INT 2
3242: PPUSH
3243: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3247: LD_INT 58
3249: PPUSH
3250: LD_INT 6
3252: PPUSH
3253: LD_INT 2
3255: PPUSH
3256: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
3260: LD_INT 63
3262: PPUSH
3263: LD_INT 6
3265: PPUSH
3266: LD_INT 2
3268: PPUSH
3269: CALL_OW 322
// end ; if Difficulty > 2 then
3273: LD_OWVAR 67
3277: PUSH
3278: LD_INT 2
3280: GREATER
3281: IFFALSE 3361
// begin SetTech ( tech_Weap3 , 3 , state_researched ) ;
3283: LD_INT 53
3285: PPUSH
3286: LD_INT 3
3288: PPUSH
3289: LD_INT 2
3291: PPUSH
3292: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3296: LD_INT 59
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 2
3304: PPUSH
3305: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3309: LD_INT 64
3311: PPUSH
3312: LD_INT 3
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
3322: LD_INT 53
3324: PPUSH
3325: LD_INT 6
3327: PPUSH
3328: LD_INT 2
3330: PPUSH
3331: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
3335: LD_INT 59
3337: PPUSH
3338: LD_INT 6
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
3348: LD_INT 64
3350: PPUSH
3351: LD_INT 6
3353: PPUSH
3354: LD_INT 2
3356: PPUSH
3357: CALL_OW 322
// end ; end ;
3361: LD_VAR 0 1
3365: RET
// export ruForces , ruConstructList , ruTanks ; export function PrepareExtraRussianBase ; var i , j , tmp , un , side , skill , b ; begin
3366: LD_INT 0
3368: PPUSH
3369: PPUSH
3370: PPUSH
3371: PPUSH
3372: PPUSH
3373: PPUSH
3374: PPUSH
3375: PPUSH
// side := 6 ;
3376: LD_ADDR_VAR 0 6
3380: PUSH
3381: LD_INT 6
3383: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
3384: LD_ADDR_VAR 0 7
3388: PUSH
3389: LD_INT 7
3391: PUSH
3392: LD_INT 8
3394: PUSH
3395: LD_INT 9
3397: PUSH
3398: LD_INT 10
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: LD_OWVAR 67
3411: ARRAY
3412: ST_TO_ADDR
// ruForces := [ ] ;
3413: LD_ADDR_EXP 34
3417: PUSH
3418: EMPTY
3419: ST_TO_ADDR
// ruConstructList := [ ] ;
3420: LD_ADDR_EXP 35
3424: PUSH
3425: EMPTY
3426: ST_TO_ADDR
// ruTanks := [ ] ;
3427: LD_ADDR_EXP 36
3431: PUSH
3432: EMPTY
3433: ST_TO_ADDR
// tmp := [ [ b_warehouse , 107 , 149 , 4 ] , [ b_oil_mine , 115 , 150 , 4 ] , [ b_factory , 101 , 160 , 0 ] , [ b_ext_computer , 97 , 156 , 2 ] , [ b_ext_siberium , 98 , 160 , 1 ] , [ b_ext_noncombat , 101 , 164 , 0 ] , [ b_ext_gun , 104 , 163 , 5 ] , [ b_ext_rocket , 105 , 160 , 4 ] , [ b_siberite_mine , 128 , 132 , 0 ] , [ b_lab_full , 94 , 142 , 1 , b_lab_weapon , b_lab_spacetime ] , [ b_oil_power , 93 , 137 , 0 ] , [ b_oil_power , 111 , 157 , 0 ] , [ b_oil_power , 109 , 158 , 0 ] , [ b_oil_power , 121 , 150 , 0 ] , [ b_siberite_power , 118 , 151 , 0 ] , [ b_barracks , 97 , 133 , 2 ] , [ b_barracks , 117 , 143 , 4 ] , [ b_turret , 100 , 132 , 2 ] , [ b_turret , 130 , 159 , 4 ] , [ b_turret , 131 , 155 , 4 ] , [ b_turret , 90 , 133 , 2 ] , [ b_turret , 70 , 135 , 3 ] ] ;
3434: LD_ADDR_VAR 0 4
3438: PUSH
3439: LD_INT 1
3441: PUSH
3442: LD_INT 107
3444: PUSH
3445: LD_INT 149
3447: PUSH
3448: LD_INT 4
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 115
3462: PUSH
3463: LD_INT 150
3465: PUSH
3466: LD_INT 4
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: LD_INT 101
3480: PUSH
3481: LD_INT 160
3483: PUSH
3484: LD_INT 0
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 24
3495: PUSH
3496: LD_INT 97
3498: PUSH
3499: LD_INT 156
3501: PUSH
3502: LD_INT 2
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 21
3513: PUSH
3514: LD_INT 98
3516: PUSH
3517: LD_INT 160
3519: PUSH
3520: LD_INT 1
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 19
3531: PUSH
3532: LD_INT 101
3534: PUSH
3535: LD_INT 164
3537: PUSH
3538: LD_INT 0
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 17
3549: PUSH
3550: LD_INT 104
3552: PUSH
3553: LD_INT 163
3555: PUSH
3556: LD_INT 5
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_INT 18
3567: PUSH
3568: LD_INT 105
3570: PUSH
3571: LD_INT 160
3573: PUSH
3574: LD_INT 4
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 30
3585: PUSH
3586: LD_INT 128
3588: PUSH
3589: LD_INT 132
3591: PUSH
3592: LD_INT 0
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 8
3603: PUSH
3604: LD_INT 94
3606: PUSH
3607: LD_INT 142
3609: PUSH
3610: LD_INT 1
3612: PUSH
3613: LD_INT 10
3615: PUSH
3616: LD_INT 14
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: PUSH
3627: LD_INT 26
3629: PUSH
3630: LD_INT 93
3632: PUSH
3633: LD_INT 137
3635: PUSH
3636: LD_INT 0
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 26
3647: PUSH
3648: LD_INT 111
3650: PUSH
3651: LD_INT 157
3653: PUSH
3654: LD_INT 0
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 26
3665: PUSH
3666: LD_INT 109
3668: PUSH
3669: LD_INT 158
3671: PUSH
3672: LD_INT 0
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: LD_INT 26
3683: PUSH
3684: LD_INT 121
3686: PUSH
3687: LD_INT 150
3689: PUSH
3690: LD_INT 0
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 28
3701: PUSH
3702: LD_INT 118
3704: PUSH
3705: LD_INT 151
3707: PUSH
3708: LD_INT 0
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 5
3719: PUSH
3720: LD_INT 97
3722: PUSH
3723: LD_INT 133
3725: PUSH
3726: LD_INT 2
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: PUSH
3735: LD_INT 5
3737: PUSH
3738: LD_INT 117
3740: PUSH
3741: LD_INT 143
3743: PUSH
3744: LD_INT 4
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 33
3755: PUSH
3756: LD_INT 100
3758: PUSH
3759: LD_INT 132
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 33
3773: PUSH
3774: LD_INT 130
3776: PUSH
3777: LD_INT 159
3779: PUSH
3780: LD_INT 4
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 33
3791: PUSH
3792: LD_INT 131
3794: PUSH
3795: LD_INT 155
3797: PUSH
3798: LD_INT 4
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: PUSH
3807: LD_INT 33
3809: PUSH
3810: LD_INT 90
3812: PUSH
3813: LD_INT 133
3815: PUSH
3816: LD_INT 2
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 33
3827: PUSH
3828: LD_INT 70
3830: PUSH
3831: LD_INT 135
3833: PUSH
3834: LD_INT 3
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: ST_TO_ADDR
// uc_side := side ;
3867: LD_ADDR_OWVAR 20
3871: PUSH
3872: LD_VAR 0 6
3876: ST_TO_ADDR
// uc_nation := nation_russian ;
3877: LD_ADDR_OWVAR 21
3881: PUSH
3882: LD_INT 3
3884: ST_TO_ADDR
// for i in tmp do
3885: LD_ADDR_VAR 0 2
3889: PUSH
3890: LD_VAR 0 4
3894: PUSH
3895: FOR_IN
3896: IFFALSE 4034
// begin InitBc ;
3898: CALL_OW 21
// bc_type := i [ 1 ] ;
3902: LD_ADDR_OWVAR 42
3906: PUSH
3907: LD_VAR 0 2
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: ST_TO_ADDR
// bc_level := 6 ;
3916: LD_ADDR_OWVAR 43
3920: PUSH
3921: LD_INT 6
3923: ST_TO_ADDR
// if i > 4 then
3924: LD_VAR 0 2
3928: PUSH
3929: LD_INT 4
3931: GREATER
3932: IFFALSE 3962
// begin bc_kind1 := i [ 5 ] ;
3934: LD_ADDR_OWVAR 44
3938: PUSH
3939: LD_VAR 0 2
3943: PUSH
3944: LD_INT 5
3946: ARRAY
3947: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
3948: LD_ADDR_OWVAR 45
3952: PUSH
3953: LD_VAR 0 2
3957: PUSH
3958: LD_INT 6
3960: ARRAY
3961: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3962: LD_ADDR_VAR 0 8
3966: PUSH
3967: LD_VAR 0 2
3971: PUSH
3972: LD_INT 2
3974: ARRAY
3975: PPUSH
3976: LD_VAR 0 2
3980: PUSH
3981: LD_INT 3
3983: ARRAY
3984: PPUSH
3985: LD_VAR 0 2
3989: PUSH
3990: LD_INT 4
3992: ARRAY
3993: PPUSH
3994: CALL_OW 47
3998: ST_TO_ADDR
// if i [ 1 ] in [ b_bunker , b_turret ] then
3999: LD_VAR 0 2
4003: PUSH
4004: LD_INT 1
4006: ARRAY
4007: PUSH
4008: LD_INT 32
4010: PUSH
4011: LD_INT 33
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: IN
4018: IFFALSE 4032
// PlaceWeaponTurret ( b , ru_rocket_launcher ) ;
4020: LD_VAR 0 8
4024: PPUSH
4025: LD_INT 45
4027: PPUSH
4028: CALL_OW 431
// end ;
4032: GO 3895
4034: POP
4035: POP
// InitHC_All ( ) ;
4036: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
4040: LD_ADDR_VAR 0 4
4044: PUSH
4045: LD_INT 22
4047: PUSH
4048: LD_VAR 0 6
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 30
4059: PUSH
4060: LD_INT 5
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: ST_TO_ADDR
// for i in tmp do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: LD_VAR 0 4
4085: PUSH
4086: FOR_IN
4087: IFFALSE 4214
// begin for j := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4089: LD_ADDR_VAR 0 3
4093: PUSH
4094: DOUBLE
4095: LD_INT 1
4097: DEC
4098: ST_TO_ADDR
4099: LD_INT 2
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: LD_INT 4
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: PUSH
4117: LD_OWVAR 67
4121: ARRAY
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4210
// begin PrepareSoldier ( false , skill ) ;
4126: LD_INT 0
4128: PPUSH
4129: LD_VAR 0 7
4133: PPUSH
4134: CALL_OW 381
// un := CreateHuman ;
4138: LD_ADDR_VAR 0 5
4142: PUSH
4143: CALL_OW 44
4147: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4148: LD_ADDR_EXP 34
4152: PUSH
4153: LD_EXP 34
4157: PPUSH
4158: LD_VAR 0 5
4162: PPUSH
4163: CALL 53818 0 2
4167: ST_TO_ADDR
// if j mod 2 = 0 then
4168: LD_VAR 0 3
4172: PUSH
4173: LD_INT 2
4175: MOD
4176: PUSH
4177: LD_INT 0
4179: EQUAL
4180: IFFALSE 4194
// SetClass ( un , class_bazooker ) ;
4182: LD_VAR 0 5
4186: PPUSH
4187: LD_INT 9
4189: PPUSH
4190: CALL_OW 336
// PlaceHumanInUnit ( un , i ) ;
4194: LD_VAR 0 5
4198: PPUSH
4199: LD_VAR 0 2
4203: PPUSH
4204: CALL_OW 52
// end ;
4208: GO 4123
4210: POP
4211: POP
// end ;
4212: GO 4086
4214: POP
4215: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
4216: LD_ADDR_VAR 0 4
4220: PUSH
4221: LD_INT 22
4223: PUSH
4224: LD_VAR 0 6
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 30
4235: PUSH
4236: LD_INT 1
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PPUSH
4247: CALL_OW 69
4251: ST_TO_ADDR
// for i in tmp do
4252: LD_ADDR_VAR 0 2
4256: PUSH
4257: LD_VAR 0 4
4261: PUSH
4262: FOR_IN
4263: IFFALSE 4487
// begin for j := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
4265: LD_ADDR_VAR 0 3
4269: PUSH
4270: DOUBLE
4271: LD_INT 1
4273: DEC
4274: ST_TO_ADDR
4275: LD_INT 3
4277: PUSH
4278: LD_INT 3
4280: PUSH
4281: LD_INT 4
4283: PUSH
4284: LD_INT 4
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: PUSH
4293: LD_OWVAR 67
4297: ARRAY
4298: PUSH
4299: FOR_TO
4300: IFFALSE 4360
// begin PrepareEngineer ( false , skill ) ;
4302: LD_INT 0
4304: PPUSH
4305: LD_VAR 0 7
4309: PPUSH
4310: CALL_OW 382
// un := CreateHuman ;
4314: LD_ADDR_VAR 0 5
4318: PUSH
4319: CALL_OW 44
4323: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4324: LD_ADDR_EXP 34
4328: PUSH
4329: LD_EXP 34
4333: PPUSH
4334: LD_VAR 0 5
4338: PPUSH
4339: CALL 53818 0 2
4343: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4344: LD_VAR 0 5
4348: PPUSH
4349: LD_VAR 0 2
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4299
4360: POP
4361: POP
// SetResourceType ( GetBase ( i ) , mat_cans , [ 550 , 600 , 780 , 820 ] [ Difficulty ] ) ;
4362: LD_VAR 0 2
4366: PPUSH
4367: CALL_OW 274
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: LD_INT 550
4377: PUSH
4378: LD_INT 600
4380: PUSH
4381: LD_INT 780
4383: PUSH
4384: LD_INT 820
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: PUSH
4393: LD_OWVAR 67
4397: ARRAY
4398: PPUSH
4399: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , [ 160 , 160 , 210 , 240 ] [ Difficulty ] ) ;
4403: LD_VAR 0 2
4407: PPUSH
4408: CALL_OW 274
4412: PPUSH
4413: LD_INT 2
4415: PPUSH
4416: LD_INT 160
4418: PUSH
4419: LD_INT 160
4421: PUSH
4422: LD_INT 210
4424: PUSH
4425: LD_INT 240
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: PUSH
4434: LD_OWVAR 67
4438: ARRAY
4439: PPUSH
4440: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , [ 60 , 60 , 70 , 80 ] [ Difficulty ] ) ;
4444: LD_VAR 0 2
4448: PPUSH
4449: CALL_OW 274
4453: PPUSH
4454: LD_INT 3
4456: PPUSH
4457: LD_INT 60
4459: PUSH
4460: LD_INT 60
4462: PUSH
4463: LD_INT 70
4465: PUSH
4466: LD_INT 80
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: PUSH
4475: LD_OWVAR 67
4479: ARRAY
4480: PPUSH
4481: CALL_OW 277
// end ;
4485: GO 4262
4487: POP
4488: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
4489: LD_ADDR_VAR 0 4
4493: PUSH
4494: LD_INT 22
4496: PUSH
4497: LD_VAR 0 6
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 30
4508: PUSH
4509: LD_INT 3
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: PPUSH
4520: CALL_OW 69
4524: ST_TO_ADDR
// for i in tmp do
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_VAR 0 4
4534: PUSH
4535: FOR_IN
4536: IFFALSE 4631
// begin for j := 1 to 6 do
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: DOUBLE
4544: LD_INT 1
4546: DEC
4547: ST_TO_ADDR
4548: LD_INT 6
4550: PUSH
4551: FOR_TO
4552: IFFALSE 4627
// begin PrepareMechanic ( false , skill ) ;
4554: LD_INT 0
4556: PPUSH
4557: LD_VAR 0 7
4561: PPUSH
4562: CALL_OW 383
// hc_attr := [ 12 , 12 ] ;
4566: LD_ADDR_OWVAR 29
4570: PUSH
4571: LD_INT 12
4573: PUSH
4574: LD_INT 12
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: ST_TO_ADDR
// un := CreateHuman ;
4581: LD_ADDR_VAR 0 5
4585: PUSH
4586: CALL_OW 44
4590: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4591: LD_ADDR_EXP 34
4595: PUSH
4596: LD_EXP 34
4600: PPUSH
4601: LD_VAR 0 5
4605: PPUSH
4606: CALL 53818 0 2
4610: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4611: LD_VAR 0 5
4615: PPUSH
4616: LD_VAR 0 2
4620: PPUSH
4621: CALL_OW 52
// end ;
4625: GO 4551
4627: POP
4628: POP
// end ;
4629: GO 4535
4631: POP
4632: POP
// InitHC_All ( ) ;
4633: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
4637: LD_ADDR_VAR 0 4
4641: PUSH
4642: LD_INT 22
4644: PUSH
4645: LD_VAR 0 6
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 30
4656: PUSH
4657: LD_INT 8
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 69
4672: ST_TO_ADDR
// for i in tmp do
4673: LD_ADDR_VAR 0 2
4677: PUSH
4678: LD_VAR 0 4
4682: PUSH
4683: FOR_IN
4684: IFFALSE 4764
// begin for j := 1 to 2 do
4686: LD_ADDR_VAR 0 3
4690: PUSH
4691: DOUBLE
4692: LD_INT 1
4694: DEC
4695: ST_TO_ADDR
4696: LD_INT 2
4698: PUSH
4699: FOR_TO
4700: IFFALSE 4760
// begin PrepareScientist ( false , skill ) ;
4702: LD_INT 0
4704: PPUSH
4705: LD_VAR 0 7
4709: PPUSH
4710: CALL_OW 384
// un := CreateHuman ;
4714: LD_ADDR_VAR 0 5
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4724: LD_ADDR_EXP 34
4728: PUSH
4729: LD_EXP 34
4733: PPUSH
4734: LD_VAR 0 5
4738: PPUSH
4739: CALL 53818 0 2
4743: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4744: LD_VAR 0 5
4748: PPUSH
4749: LD_VAR 0 2
4753: PPUSH
4754: CALL_OW 52
// end ;
4758: GO 4699
4760: POP
4761: POP
// end ;
4762: GO 4683
4764: POP
4765: POP
// end ;
4766: LD_VAR 0 1
4770: RET
// function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
4771: LD_INT 0
4773: PPUSH
4774: PPUSH
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
4781: PPUSH
4782: PPUSH
// result := [ ] ;
4783: LD_ADDR_VAR 0 3
4787: PUSH
4788: EMPTY
4789: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
4790: LD_ADDR_VAR 0 8
4794: PUSH
4795: LD_INT 7
4797: PUSH
4798: LD_INT 8
4800: PUSH
4801: LD_INT 9
4803: PUSH
4804: LD_INT 10
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: PUSH
4813: LD_OWVAR 67
4817: ARRAY
4818: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
4819: LD_ADDR_VAR 0 9
4823: PUSH
4824: LD_INT 15
4826: PUSH
4827: LD_INT 17
4829: PUSH
4830: LD_INT 19
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: LIST
4837: PUSH
4838: LD_VAR 0 1
4842: ARRAY
4843: ST_TO_ADDR
// parking := [ ruGatPoint1Area , ruGatPoint2Area , ruGatPoint3Area ] [ spot ] ;
4844: LD_ADDR_VAR 0 10
4848: PUSH
4849: LD_INT 16
4851: PUSH
4852: LD_INT 18
4854: PUSH
4855: LD_INT 20
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_VAR 0 1
4867: ARRAY
4868: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
4869: LD_ADDR_VAR 0 11
4873: PUSH
4874: LD_INT 5
4876: PUSH
4877: LD_INT 0
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 1
4892: ARRAY
4893: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) then
4894: LD_VAR 0 9
4898: PPUSH
4899: LD_INT 2
4901: PUSH
4902: LD_INT 22
4904: PUSH
4905: LD_INT 0
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: LD_INT 22
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: PPUSH
4927: CALL_OW 70
4931: IFFALSE 4992
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) do
4933: LD_ADDR_VAR 0 4
4937: PUSH
4938: LD_VAR 0 9
4942: PPUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 22
4948: PUSH
4949: LD_INT 0
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 22
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: LIST
4970: PPUSH
4971: CALL_OW 70
4975: PUSH
4976: FOR_IN
4977: IFFALSE 4990
// RemoveUnit ( i ) ;
4979: LD_VAR 0 4
4983: PPUSH
4984: CALL_OW 64
4988: GO 4976
4990: POP
4991: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
4992: LD_VAR 0 9
4996: PPUSH
4997: LD_INT 3
4999: PUSH
5000: LD_INT 21
5002: PUSH
5003: LD_INT 1
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 22
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 70
5032: IFFALSE 5096
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
5034: LD_ADDR_VAR 0 4
5038: PUSH
5039: LD_VAR 0 9
5043: PPUSH
5044: LD_INT 3
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 1
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 70
5079: PUSH
5080: FOR_IN
5081: IFFALSE 5094
// KillUnit ( i ) ;
5083: LD_VAR 0 4
5087: PPUSH
5088: CALL_OW 66
5092: GO 5080
5094: POP
5095: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
5096: LD_VAR 0 9
5100: PPUSH
5101: LD_INT 21
5103: PUSH
5104: LD_INT 1
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PUSH
5111: LD_INT 22
5113: PUSH
5114: LD_INT 2
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PPUSH
5125: CALL_OW 70
5129: IFFALSE 5192
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
5131: LD_ADDR_VAR 0 4
5135: PUSH
5136: LD_VAR 0 9
5140: PPUSH
5141: LD_INT 21
5143: PUSH
5144: LD_INT 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 22
5153: PUSH
5154: LD_INT 2
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PPUSH
5165: CALL_OW 70
5169: PUSH
5170: FOR_IN
5171: IFFALSE 5190
// ComMoveXY ( i , 91 , 56 ) ;
5173: LD_VAR 0 4
5177: PPUSH
5178: LD_INT 91
5180: PPUSH
5181: LD_INT 56
5183: PPUSH
5184: CALL_OW 111
5188: GO 5170
5190: POP
5191: POP
// repeat wait ( 0 0$1 ) ;
5192: LD_INT 35
5194: PPUSH
5195: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5199: LD_VAR 0 9
5203: PPUSH
5204: LD_INT 50
5206: PUSH
5207: EMPTY
5208: LIST
5209: PPUSH
5210: CALL_OW 70
5214: NOT
5215: IFFALSE 5192
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] + strength do
5217: LD_ADDR_VAR 0 4
5221: PUSH
5222: DOUBLE
5223: LD_INT 1
5225: DEC
5226: ST_TO_ADDR
5227: LD_INT 4
5229: PUSH
5230: LD_INT 5
5232: PUSH
5233: LD_INT 5
5235: PUSH
5236: LD_INT 6
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: PUSH
5245: LD_OWVAR 67
5249: ARRAY
5250: PUSH
5251: LD_VAR 0 2
5255: PLUS
5256: PUSH
5257: FOR_TO
5258: IFFALSE 5579
// begin uc_side := 3 ;
5260: LD_ADDR_OWVAR 20
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_nation := nation_russian ;
5268: LD_ADDR_OWVAR 21
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
5276: LD_ADDR_VAR 0 12
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: LD_INT 3
5286: PUSH
5287: LD_INT 3
5289: PUSH
5290: LD_INT 3
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 1
5301: PPUSH
5302: LD_INT 4
5304: PPUSH
5305: CALL_OW 12
5309: ARRAY
5310: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
5311: LD_INT 22
5313: PUSH
5314: LD_INT 24
5316: PUSH
5317: LD_INT 23
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: PUSH
5325: LD_VAR 0 4
5329: PUSH
5330: LD_INT 3
5332: MOD
5333: PUSH
5334: LD_INT 1
5336: PLUS
5337: ARRAY
5338: PPUSH
5339: LD_INT 3
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 1
5351: PPUSH
5352: LD_INT 2
5354: PPUSH
5355: CALL_OW 12
5359: ARRAY
5360: PPUSH
5361: LD_VAR 0 12
5365: PPUSH
5366: LD_INT 45
5368: PUSH
5369: LD_INT 46
5371: PUSH
5372: LD_INT 43
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: LIST
5379: PUSH
5380: LD_VAR 0 4
5384: PUSH
5385: LD_INT 3
5387: MOD
5388: PUSH
5389: LD_INT 1
5391: PLUS
5392: ARRAY
5393: PPUSH
5394: LD_INT 100
5396: PPUSH
5397: CALL 20638 0 5
// veh := CreateVehicle ;
5401: LD_ADDR_VAR 0 7
5405: PUSH
5406: CALL_OW 45
5410: ST_TO_ADDR
// SetDir ( veh , dir ) ;
5411: LD_VAR 0 7
5415: PPUSH
5416: LD_VAR 0 11
5420: PPUSH
5421: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
5425: LD_VAR 0 7
5429: PPUSH
5430: LD_VAR 0 9
5434: PPUSH
5435: LD_INT 0
5437: PPUSH
5438: CALL_OW 49
// if control = control_manual then
5442: LD_VAR 0 12
5446: PUSH
5447: LD_INT 1
5449: EQUAL
5450: IFFALSE 5518
// begin uc_side := 3 ;
5452: LD_ADDR_OWVAR 20
5456: PUSH
5457: LD_INT 3
5459: ST_TO_ADDR
// uc_nation := nation_russian ;
5460: LD_ADDR_OWVAR 21
5464: PUSH
5465: LD_INT 3
5467: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5468: LD_INT 0
5470: PPUSH
5471: LD_VAR 0 8
5475: PPUSH
5476: CALL_OW 383
// un := CreateHuman ;
5480: LD_ADDR_VAR 0 6
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5490: LD_VAR 0 6
5494: PPUSH
5495: LD_VAR 0 7
5499: PPUSH
5500: CALL_OW 52
// SetTag ( un , spot ) ;
5504: LD_VAR 0 6
5508: PPUSH
5509: LD_VAR 0 1
5513: PPUSH
5514: CALL_OW 109
// end ; repeat ComMoveToArea ( veh , parking ) ;
5518: LD_VAR 0 7
5522: PPUSH
5523: LD_VAR 0 10
5527: PPUSH
5528: CALL_OW 113
// wait ( 0 0$3 ) ;
5532: LD_INT 105
5534: PPUSH
5535: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5539: LD_VAR 0 9
5543: PPUSH
5544: LD_INT 50
5546: PUSH
5547: EMPTY
5548: LIST
5549: PPUSH
5550: CALL_OW 70
5554: NOT
5555: IFFALSE 5518
// result := Join ( result , veh ) ;
5557: LD_ADDR_VAR 0 3
5561: PUSH
5562: LD_VAR 0 3
5566: PPUSH
5567: LD_VAR 0 7
5571: PPUSH
5572: CALL 53818 0 2
5576: ST_TO_ADDR
// end ;
5577: GO 5257
5579: POP
5580: POP
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
5581: LD_ADDR_VAR 0 4
5585: PUSH
5586: DOUBLE
5587: LD_INT 1
5589: DEC
5590: ST_TO_ADDR
5591: LD_INT 2
5593: PUSH
5594: LD_INT 2
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: LD_INT 3
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: PUSH
5609: LD_OWVAR 67
5613: ARRAY
5614: PUSH
5615: FOR_TO
5616: IFFALSE 5786
// begin uc_side := 3 ;
5618: LD_ADDR_OWVAR 20
5622: PUSH
5623: LD_INT 3
5625: ST_TO_ADDR
// uc_nation := nation_russian ;
5626: LD_ADDR_OWVAR 21
5630: PUSH
5631: LD_INT 3
5633: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5634: LD_INT 0
5636: PPUSH
5637: LD_VAR 0 8
5641: PPUSH
5642: CALL_OW 381
// un := CreateHuman ;
5646: LD_ADDR_VAR 0 6
5650: PUSH
5651: CALL_OW 44
5655: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5656: LD_INT 30
5658: PUSH
5659: LD_INT 40
5661: PUSH
5662: LD_INT 50
5664: PUSH
5665: LD_INT 50
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: PUSH
5674: LD_OWVAR 67
5678: ARRAY
5679: PPUSH
5680: CALL_OW 13
5684: IFFALSE 5698
// SetClass ( un , class_bazooker ) ;
5686: LD_VAR 0 6
5690: PPUSH
5691: LD_INT 9
5693: PPUSH
5694: CALL_OW 336
// SetDir ( un , dir ) ;
5698: LD_VAR 0 6
5702: PPUSH
5703: LD_VAR 0 11
5707: PPUSH
5708: CALL_OW 233
// SetTag ( un , spot ) ;
5712: LD_VAR 0 6
5716: PPUSH
5717: LD_VAR 0 1
5721: PPUSH
5722: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
5726: LD_VAR 0 6
5730: PPUSH
5731: LD_VAR 0 9
5735: PPUSH
5736: LD_INT 0
5738: PPUSH
5739: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
5743: LD_VAR 0 6
5747: PPUSH
5748: LD_VAR 0 10
5752: PPUSH
5753: CALL_OW 113
// wait ( 0 0$1 ) ;
5757: LD_INT 35
5759: PPUSH
5760: CALL_OW 67
// result := Join ( result , un ) ;
5764: LD_ADDR_VAR 0 3
5768: PUSH
5769: LD_VAR 0 3
5773: PPUSH
5774: LD_VAR 0 6
5778: PPUSH
5779: CALL 53818 0 2
5783: ST_TO_ADDR
// end ;
5784: GO 5615
5786: POP
5787: POP
// end ;
5788: LD_VAR 0 3
5792: RET
// function PrepareRussianExtraInfantry ; var i , un ; begin
5793: LD_INT 0
5795: PPUSH
5796: PPUSH
5797: PPUSH
// result := [ ] ;
5798: LD_ADDR_VAR 0 1
5802: PUSH
5803: EMPTY
5804: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty + 1 ] do
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: DOUBLE
5811: LD_INT 1
5813: DEC
5814: ST_TO_ADDR
5815: LD_INT 3
5817: PUSH
5818: LD_INT 3
5820: PUSH
5821: LD_INT 4
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: LD_OWVAR 67
5833: PUSH
5834: LD_INT 1
5836: PLUS
5837: ARRAY
5838: PUSH
5839: FOR_TO
5840: IFFALSE 5978
// begin uc_side := 3 ;
5842: LD_ADDR_OWVAR 20
5846: PUSH
5847: LD_INT 3
5849: ST_TO_ADDR
// uc_nation := nation_russian ;
5850: LD_ADDR_OWVAR 21
5854: PUSH
5855: LD_INT 3
5857: ST_TO_ADDR
// PrepareSoldier ( false , [ 7 , 8 , 9 ] [ Difficulty + 1 ] ) ;
5858: LD_INT 0
5860: PPUSH
5861: LD_INT 7
5863: PUSH
5864: LD_INT 8
5866: PUSH
5867: LD_INT 9
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: LIST
5874: PUSH
5875: LD_OWVAR 67
5879: PUSH
5880: LD_INT 1
5882: PLUS
5883: ARRAY
5884: PPUSH
5885: CALL_OW 381
// un := CreateHuman ;
5889: LD_ADDR_VAR 0 3
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5899: LD_INT 30
5901: PUSH
5902: LD_INT 40
5904: PUSH
5905: LD_INT 50
5907: PUSH
5908: LD_INT 50
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: LD_OWVAR 67
5921: ARRAY
5922: PPUSH
5923: CALL_OW 13
5927: IFFALSE 5941
// SetClass ( un , class_bazooker ) ;
5929: LD_VAR 0 3
5933: PPUSH
5934: LD_INT 9
5936: PPUSH
5937: CALL_OW 336
// PlaceUnitArea ( un , extraSpawnAttackArea , false ) ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 25
5948: PPUSH
5949: LD_INT 0
5951: PPUSH
5952: CALL_OW 49
// result := Join ( result , un ) ;
5956: LD_ADDR_VAR 0 1
5960: PUSH
5961: LD_VAR 0 1
5965: PPUSH
5966: LD_VAR 0 3
5970: PPUSH
5971: CALL 53818 0 2
5975: ST_TO_ADDR
// end ;
5976: GO 5839
5978: POP
5979: POP
// end ;
5980: LD_VAR 0 1
5984: RET
// function SendBulldozer ; var un ; begin
5985: LD_INT 0
5987: PPUSH
5988: PPUSH
// uc_side := 3 ;
5989: LD_ADDR_OWVAR 20
5993: PUSH
5994: LD_INT 3
5996: ST_TO_ADDR
// uc_nation := nation_russian ;
5997: LD_ADDR_OWVAR 21
6001: PUSH
6002: LD_INT 3
6004: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
6005: LD_INT 23
6007: PPUSH
6008: LD_INT 3
6010: PPUSH
6011: LD_INT 3
6013: PPUSH
6014: LD_INT 53
6016: PPUSH
6017: LD_INT 100
6019: PPUSH
6020: CALL 20638 0 5
// un := CreateVehicle ;
6024: LD_ADDR_VAR 0 2
6028: PUSH
6029: CALL_OW 45
6033: ST_TO_ADDR
// PlaceUnitXYD ( un , 7 , 8 , 1 , false ) ;
6034: LD_VAR 0 2
6038: PPUSH
6039: LD_INT 7
6041: PPUSH
6042: LD_INT 8
6044: PPUSH
6045: LD_INT 1
6047: PPUSH
6048: LD_INT 0
6050: PPUSH
6051: CALL 55978 0 5
// wait ( 0 0$1 ) ;
6055: LD_INT 35
6057: PPUSH
6058: CALL_OW 67
// CutTreeInArea ( un , cutTreeWArea ) ;
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_INT 24
6069: PPUSH
6070: CALL 11530 0 2
// end ;
6074: LD_VAR 0 1
6078: RET
// every 0 0$3 trigger wave >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
6079: LD_EXP 11
6083: PUSH
6084: LD_INT 4
6086: PUSH
6087: LD_INT 5
6089: PUSH
6090: LD_INT 6
6092: PUSH
6093: LD_INT 7
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: PUSH
6102: LD_OWVAR 67
6106: ARRAY
6107: GREATEREQUAL
6108: IFFALSE 6162
6110: GO 6112
6112: DISABLE
// begin repeat wait ( 0 0$1 ) ;
6113: LD_INT 35
6115: PPUSH
6116: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 ;
6120: LD_INT 22
6122: PUSH
6123: LD_INT 6
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PUSH
6130: LD_INT 21
6132: PUSH
6133: LD_INT 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PPUSH
6144: CALL_OW 69
6148: PUSH
6149: LD_INT 0
6151: EQUAL
6152: IFFALSE 6113
// ruDefeated := true ;
6154: LD_ADDR_EXP 10
6158: PUSH
6159: LD_INT 1
6161: ST_TO_ADDR
// end ;
6162: END
// every 6 6$20 + 4 4$00 trigger wave < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do var i , e , attackers , extraAttackers , spot , extraSpot , paths , enemy ;
6163: LD_EXP 11
6167: PUSH
6168: LD_INT 4
6170: PUSH
6171: LD_INT 5
6173: PUSH
6174: LD_INT 6
6176: PUSH
6177: LD_INT 7
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: PUSH
6186: LD_OWVAR 67
6190: ARRAY
6191: LESS
6192: IFFALSE 7297
6194: GO 6196
6196: DISABLE
6197: LD_INT 0
6199: PPUSH
6200: PPUSH
6201: PPUSH
6202: PPUSH
6203: PPUSH
6204: PPUSH
6205: PPUSH
6206: PPUSH
// begin enable ;
6207: ENABLE
// attackers := [ ] ;
6208: LD_ADDR_VAR 0 3
6212: PUSH
6213: EMPTY
6214: ST_TO_ADDR
// extraAttackers := [ ] ;
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: EMPTY
6221: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 87 , 141 ] , [ 80 , 120 ] , [ 66 , 95 ] , [ 51 , 69 ] , [ 36 , 40 ] , [ 47 , 31 ] , [ 60 , 28 ] ] , [ [ 21 , 17 ] , [ 35 , 30 ] , [ 49 , 31 ] ] ] ;
6222: LD_ADDR_VAR 0 7
6226: PUSH
6227: LD_INT 176
6229: PUSH
6230: LD_INT 152
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 157
6239: PUSH
6240: LD_INT 122
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 146
6249: PUSH
6250: LD_INT 89
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 125
6259: PUSH
6260: LD_INT 46
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 87
6275: PUSH
6276: LD_INT 141
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 80
6285: PUSH
6286: LD_INT 120
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 66
6295: PUSH
6296: LD_INT 95
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 51
6305: PUSH
6306: LD_INT 69
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 36
6315: PUSH
6316: LD_INT 40
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 47
6325: PUSH
6326: LD_INT 31
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 60
6335: PUSH
6336: LD_INT 28
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 21
6354: PUSH
6355: LD_INT 17
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 35
6364: PUSH
6365: LD_INT 30
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 49
6374: PUSH
6375: LD_INT 31
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: ST_TO_ADDR
// wave := Inc ( wave ) ;
6392: LD_ADDR_EXP 11
6396: PUSH
6397: LD_EXP 11
6401: PPUSH
6402: CALL 55191 0 1
6406: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
6407: LD_ADDR_VAR 0 5
6411: PUSH
6412: LD_INT 1
6414: PPUSH
6415: LD_INT 3
6417: PPUSH
6418: CALL_OW 12
6422: ST_TO_ADDR
// if wave mod 2 = 0 then
6423: LD_EXP 11
6427: PUSH
6428: LD_INT 2
6430: MOD
6431: PUSH
6432: LD_INT 0
6434: EQUAL
6435: IFFALSE 6452
// strength := Inc ( strength ) ;
6437: LD_ADDR_EXP 12
6441: PUSH
6442: LD_EXP 12
6446: PPUSH
6447: CALL 55191 0 1
6451: ST_TO_ADDR
// if Count ( ListEnvironmentArea ( cutTreeWArea ) ) then
6452: LD_INT 24
6454: PPUSH
6455: CALL_OW 353
6459: PPUSH
6460: CALL 17842 0 1
6464: IFFALSE 6470
// SendBulldozer ;
6466: CALL 5985 0 0
// attackers := PrepareRussianAttack ( spot , strength ) ;
6470: LD_ADDR_VAR 0 3
6474: PUSH
6475: LD_VAR 0 5
6479: PPUSH
6480: LD_EXP 12
6484: PPUSH
6485: CALL 4771 0 2
6489: ST_TO_ADDR
// if wave + [ 2 , 2 , 3 , 3 ] [ Difficulty ] >= [ 6 , 7 , 8 , 9 ] [ Difficulty ] then
6490: LD_EXP 11
6494: PUSH
6495: LD_INT 2
6497: PUSH
6498: LD_INT 2
6500: PUSH
6501: LD_INT 3
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: LD_OWVAR 67
6517: ARRAY
6518: PLUS
6519: PUSH
6520: LD_INT 6
6522: PUSH
6523: LD_INT 7
6525: PUSH
6526: LD_INT 8
6528: PUSH
6529: LD_INT 9
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_OWVAR 67
6542: ARRAY
6543: GREATEREQUAL
6544: IFFALSE 6612
// begin extraSpot := spot - 1 ;
6546: LD_ADDR_VAR 0 6
6550: PUSH
6551: LD_VAR 0 5
6555: PUSH
6556: LD_INT 1
6558: MINUS
6559: ST_TO_ADDR
// if extraSpot < 1 then
6560: LD_VAR 0 6
6564: PUSH
6565: LD_INT 1
6567: LESS
6568: IFFALSE 6578
// extraSpot := 3 ;
6570: LD_ADDR_VAR 0 6
6574: PUSH
6575: LD_INT 3
6577: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , strength ) ;
6578: LD_ADDR_VAR 0 4
6582: PUSH
6583: LD_VAR 0 6
6587: PPUSH
6588: LD_EXP 12
6592: PPUSH
6593: CALL 4771 0 2
6597: ST_TO_ADDR
// if Difficulty > 1 then
6598: LD_OWVAR 67
6602: PUSH
6603: LD_INT 1
6605: GREATER
6606: IFFALSE 6612
// PrepareRussianExtraInfantry ;
6608: CALL 5793 0 0
// end ; repeat wait ( 0 0$2 ) ;
6612: LD_INT 70
6614: PPUSH
6615: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
6619: LD_ADDR_VAR 0 8
6623: PUSH
6624: LD_INT 22
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 69
6638: ST_TO_ADDR
// for i in attackers do
6639: LD_ADDR_VAR 0 1
6643: PUSH
6644: LD_VAR 0 3
6648: PUSH
6649: FOR_IN
6650: IFFALSE 6955
// begin if not IsOk ( i ) then
6652: LD_VAR 0 1
6656: PPUSH
6657: CALL_OW 302
6661: NOT
6662: IFFALSE 6682
// begin attackers := attackers diff i ;
6664: LD_ADDR_VAR 0 3
6668: PUSH
6669: LD_VAR 0 3
6673: PUSH
6674: LD_VAR 0 1
6678: DIFF
6679: ST_TO_ADDR
// continue ;
6680: GO 6649
// end ; if GetType ( i ) = unit_vehicle then
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 247
6691: PUSH
6692: LD_INT 2
6694: EQUAL
6695: IFFALSE 6719
// AgressiveMove ( i , paths [ spot ] ) else
6697: LD_VAR 0 1
6701: PPUSH
6702: LD_VAR 0 7
6706: PUSH
6707: LD_VAR 0 5
6711: ARRAY
6712: PPUSH
6713: CALL 56584 0 2
6717: GO 6953
// begin if GetClass ( i ) = class_bazooker then
6719: LD_VAR 0 1
6723: PPUSH
6724: CALL_OW 257
6728: PUSH
6729: LD_INT 9
6731: EQUAL
6732: IFFALSE 6929
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
6734: LD_VAR 0 1
6738: PPUSH
6739: LD_VAR 0 8
6743: PPUSH
6744: LD_VAR 0 1
6748: PPUSH
6749: CALL_OW 74
6753: PPUSH
6754: CALL_OW 296
6758: PUSH
6759: LD_INT 12
6761: GREATER
6762: IFFALSE 6790
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
6764: LD_VAR 0 1
6768: PPUSH
6769: LD_VAR 0 8
6773: PPUSH
6774: LD_VAR 0 1
6778: PPUSH
6779: CALL_OW 74
6783: PPUSH
6784: CALL 58216 0 2
6788: GO 6927
// begin e := NearestUnitToUnit ( enemy , i ) ;
6790: LD_ADDR_VAR 0 2
6794: PUSH
6795: LD_VAR 0 8
6799: PPUSH
6800: LD_VAR 0 1
6804: PPUSH
6805: CALL_OW 74
6809: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
6810: LD_INT 1
6812: PPUSH
6813: LD_INT 3
6815: PPUSH
6816: CALL_OW 12
6820: PUSH
6821: LD_INT 1
6823: DOUBLE
6824: EQUAL
6825: IFTRUE 6829
6827: GO 6846
6829: POP
// ComAttackUnit ( i , e ) ; 2 :
6830: LD_VAR 0 1
6834: PPUSH
6835: LD_VAR 0 2
6839: PPUSH
6840: CALL_OW 115
6844: GO 6927
6846: LD_INT 2
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6886
6854: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
6855: LD_VAR 0 1
6859: PPUSH
6860: LD_VAR 0 2
6864: PPUSH
6865: CALL_OW 250
6869: PPUSH
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL_OW 251
6879: PPUSH
6880: CALL_OW 153
6884: GO 6927
6886: LD_INT 3
6888: DOUBLE
6889: EQUAL
6890: IFTRUE 6894
6892: GO 6926
6894: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
6895: LD_VAR 0 1
6899: PPUSH
6900: LD_VAR 0 2
6904: PPUSH
6905: CALL_OW 250
6909: PPUSH
6910: LD_VAR 0 2
6914: PPUSH
6915: CALL_OW 251
6919: PPUSH
6920: CALL_OW 154
6924: GO 6927
6926: POP
// end ; end else
6927: GO 6953
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6929: LD_VAR 0 1
6933: PPUSH
6934: LD_VAR 0 8
6938: PPUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 74
6948: PPUSH
6949: CALL 58216 0 2
// end ; end ;
6953: GO 6649
6955: POP
6956: POP
// if extraAttackers then
6957: LD_VAR 0 4
6961: IFFALSE 7281
// begin for i in extraAttackers do
6963: LD_ADDR_VAR 0 1
6967: PUSH
6968: LD_VAR 0 4
6972: PUSH
6973: FOR_IN
6974: IFFALSE 7279
// begin if not IsOk ( i ) then
6976: LD_VAR 0 1
6980: PPUSH
6981: CALL_OW 302
6985: NOT
6986: IFFALSE 7006
// begin extraAttackers := extraAttackers diff i ;
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: LD_VAR 0 4
6997: PUSH
6998: LD_VAR 0 1
7002: DIFF
7003: ST_TO_ADDR
// continue ;
7004: GO 6973
// end ; if GetType ( i ) = unit_vehicle then
7006: LD_VAR 0 1
7010: PPUSH
7011: CALL_OW 247
7015: PUSH
7016: LD_INT 2
7018: EQUAL
7019: IFFALSE 7043
// AgressiveMove ( i , paths [ extraSpot ] ) else
7021: LD_VAR 0 1
7025: PPUSH
7026: LD_VAR 0 7
7030: PUSH
7031: LD_VAR 0 6
7035: ARRAY
7036: PPUSH
7037: CALL 56584 0 2
7041: GO 7277
// begin if GetClass ( i ) = class_bazooker then
7043: LD_VAR 0 1
7047: PPUSH
7048: CALL_OW 257
7052: PUSH
7053: LD_INT 9
7055: EQUAL
7056: IFFALSE 7253
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
7058: LD_VAR 0 1
7062: PPUSH
7063: LD_VAR 0 8
7067: PPUSH
7068: LD_VAR 0 1
7072: PPUSH
7073: CALL_OW 74
7077: PPUSH
7078: CALL_OW 296
7082: PUSH
7083: LD_INT 12
7085: GREATER
7086: IFFALSE 7114
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
7088: LD_VAR 0 1
7092: PPUSH
7093: LD_VAR 0 8
7097: PPUSH
7098: LD_VAR 0 1
7102: PPUSH
7103: CALL_OW 74
7107: PPUSH
7108: CALL 58216 0 2
7112: GO 7251
// begin e := NearestUnitToUnit ( enemy , i ) ;
7114: LD_ADDR_VAR 0 2
7118: PUSH
7119: LD_VAR 0 8
7123: PPUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 74
7133: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
7134: LD_INT 1
7136: PPUSH
7137: LD_INT 3
7139: PPUSH
7140: CALL_OW 12
7144: PUSH
7145: LD_INT 1
7147: DOUBLE
7148: EQUAL
7149: IFTRUE 7153
7151: GO 7170
7153: POP
// ComAttackUnit ( i , e ) ; 2 :
7154: LD_VAR 0 1
7158: PPUSH
7159: LD_VAR 0 2
7163: PPUSH
7164: CALL_OW 115
7168: GO 7251
7170: LD_INT 2
7172: DOUBLE
7173: EQUAL
7174: IFTRUE 7178
7176: GO 7210
7178: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
7179: LD_VAR 0 1
7183: PPUSH
7184: LD_VAR 0 2
7188: PPUSH
7189: CALL_OW 250
7193: PPUSH
7194: LD_VAR 0 2
7198: PPUSH
7199: CALL_OW 251
7203: PPUSH
7204: CALL_OW 153
7208: GO 7251
7210: LD_INT 3
7212: DOUBLE
7213: EQUAL
7214: IFTRUE 7218
7216: GO 7250
7218: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
7219: LD_VAR 0 1
7223: PPUSH
7224: LD_VAR 0 2
7228: PPUSH
7229: CALL_OW 250
7233: PPUSH
7234: LD_VAR 0 2
7238: PPUSH
7239: CALL_OW 251
7243: PPUSH
7244: CALL_OW 154
7248: GO 7251
7250: POP
// end ; end else
7251: GO 7277
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7253: LD_VAR 0 1
7257: PPUSH
7258: LD_VAR 0 8
7262: PPUSH
7263: LD_VAR 0 1
7267: PPUSH
7268: CALL_OW 74
7272: PPUSH
7273: CALL 58216 0 2
// end ; end ;
7277: GO 6973
7279: POP
7280: POP
// end ; until not attackers and not extraAttackers ;
7281: LD_VAR 0 3
7285: NOT
7286: IFFALSE 7295
7288: PUSH
7289: LD_VAR 0 4
7293: NOT
7294: AND
7295: IFFALSE 6612
// end ;
7297: PPOPN 8
7299: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] ] ) do var i , tmp , lab , eng , tag , un , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , ruBase , fac ;
7300: LD_INT 22
7302: PUSH
7303: LD_INT 6
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 50
7312: PUSH
7313: EMPTY
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PPUSH
7320: CALL_OW 69
7324: IFFALSE 9035
7326: GO 7328
7328: DISABLE
7329: LD_INT 0
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
// begin enable ;
7346: ENABLE
// ruBase := FilterUnitsInARea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_warehouse ] , [ f_ok ] ] ) ;
7347: LD_ADDR_VAR 0 14
7351: PUSH
7352: LD_INT 26
7354: PPUSH
7355: LD_INT 22
7357: PUSH
7358: LD_INT 6
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 30
7367: PUSH
7368: LD_INT 1
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 50
7377: PUSH
7378: EMPTY
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 70
7390: ST_TO_ADDR
// if ruBase then
7391: LD_VAR 0 14
7395: IFFALSE 7411
// ruBase := ruBase [ 1 ] ;
7397: LD_ADDR_VAR 0 14
7401: PUSH
7402: LD_VAR 0 14
7406: PUSH
7407: LD_INT 1
7409: ARRAY
7410: ST_TO_ADDR
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7411: LD_ADDR_VAR 0 15
7415: PUSH
7416: LD_INT 26
7418: PPUSH
7419: LD_INT 22
7421: PUSH
7422: LD_INT 6
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: PUSH
7429: LD_INT 30
7431: PUSH
7432: LD_INT 3
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 50
7441: PUSH
7442: EMPTY
7443: LIST
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 70
7454: ST_TO_ADDR
// if ruConstructList and fac then
7455: LD_EXP 35
7459: IFFALSE 7467
7461: PUSH
7462: LD_VAR 0 15
7466: AND
7467: IFFALSE 7622
// if BuildingStatus ( fac [ 1 ] ) = bs_idle and CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
7469: LD_VAR 0 15
7473: PUSH
7474: LD_INT 1
7476: ARRAY
7477: PPUSH
7478: CALL_OW 461
7482: PUSH
7483: LD_INT 2
7485: EQUAL
7486: IFFALSE 7555
7488: PUSH
7489: LD_VAR 0 15
7493: PUSH
7494: LD_INT 1
7496: ARRAY
7497: PPUSH
7498: LD_EXP 35
7502: PUSH
7503: LD_INT 1
7505: ARRAY
7506: PUSH
7507: LD_INT 1
7509: ARRAY
7510: PPUSH
7511: LD_EXP 35
7515: PUSH
7516: LD_INT 1
7518: ARRAY
7519: PUSH
7520: LD_INT 2
7522: ARRAY
7523: PPUSH
7524: LD_EXP 35
7528: PUSH
7529: LD_INT 1
7531: ARRAY
7532: PUSH
7533: LD_INT 3
7535: ARRAY
7536: PPUSH
7537: LD_EXP 35
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: PUSH
7546: LD_INT 4
7548: ARRAY
7549: PPUSH
7550: CALL_OW 448
7554: AND
7555: IFFALSE 7622
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
7557: LD_VAR 0 15
7561: PUSH
7562: LD_INT 1
7564: ARRAY
7565: PPUSH
7566: LD_EXP 35
7570: PUSH
7571: LD_INT 1
7573: ARRAY
7574: PUSH
7575: LD_INT 1
7577: ARRAY
7578: PPUSH
7579: LD_EXP 35
7583: PUSH
7584: LD_INT 1
7586: ARRAY
7587: PUSH
7588: LD_INT 2
7590: ARRAY
7591: PPUSH
7592: LD_EXP 35
7596: PUSH
7597: LD_INT 1
7599: ARRAY
7600: PUSH
7601: LD_INT 3
7603: ARRAY
7604: PPUSH
7605: LD_EXP 35
7609: PUSH
7610: LD_INT 1
7612: ARRAY
7613: PUSH
7614: LD_INT 4
7616: ARRAY
7617: PPUSH
7618: CALL_OW 125
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7622: LD_ADDR_VAR 0 2
7626: PUSH
7627: LD_INT 26
7629: PPUSH
7630: LD_INT 21
7632: PUSH
7633: LD_INT 3
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 3
7642: PUSH
7643: LD_INT 24
7645: PUSH
7646: LD_INT 1000
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 70
7665: ST_TO_ADDR
// cr := GetListOfCratesInArea ( crates6Area ) ;
7666: LD_ADDR_VAR 0 8
7670: PUSH
7671: LD_INT 14
7673: PPUSH
7674: CALL_OW 435
7678: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7679: LD_ADDR_VAR 0 9
7683: PUSH
7684: LD_EXP 34
7688: PPUSH
7689: LD_INT 25
7691: PUSH
7692: LD_INT 4
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: LD_INT 50
7701: PUSH
7702: EMPTY
7703: LIST
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PPUSH
7709: CALL_OW 72
7713: ST_TO_ADDR
// if sci then
7714: LD_VAR 0 9
7718: IFFALSE 7945
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
7720: LD_ADDR_VAR 0 11
7724: PUSH
7725: LD_EXP 34
7729: PPUSH
7730: LD_INT 95
7732: PUSH
7733: LD_INT 26
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 120
7742: PUSH
7743: LD_INT 3
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PPUSH
7754: CALL_OW 72
7758: ST_TO_ADDR
// lab := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7759: LD_ADDR_VAR 0 3
7763: PUSH
7764: LD_EXP 34
7768: PPUSH
7769: LD_INT 95
7771: PUSH
7772: LD_INT 26
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 2
7781: PUSH
7782: LD_INT 30
7784: PUSH
7785: LD_INT 6
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 30
7794: PUSH
7795: LD_INT 7
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: LD_INT 30
7804: PUSH
7805: LD_INT 8
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PPUSH
7822: CALL_OW 72
7826: ST_TO_ADDR
// if hurtUnits then
7827: LD_VAR 0 11
7831: IFFALSE 7892
// begin for i in sci do
7833: LD_ADDR_VAR 0 1
7837: PUSH
7838: LD_VAR 0 9
7842: PUSH
7843: FOR_IN
7844: IFFALSE 7888
// if IsInUnit ( i ) then
7846: LD_VAR 0 1
7850: PPUSH
7851: CALL_OW 310
7855: IFFALSE 7868
// ComExitBuilding ( i ) else
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 122
7866: GO 7886
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7868: LD_VAR 0 1
7872: PPUSH
7873: LD_VAR 0 11
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PPUSH
7882: CALL_OW 128
7886: GO 7843
7888: POP
7889: POP
// end else
7890: GO 7945
// if lab then
7892: LD_VAR 0 3
7896: IFFALSE 7945
// begin for i in sci do
7898: LD_ADDR_VAR 0 1
7902: PUSH
7903: LD_VAR 0 9
7907: PUSH
7908: FOR_IN
7909: IFFALSE 7943
// if not IsInUnit ( i ) then
7911: LD_VAR 0 1
7915: PPUSH
7916: CALL_OW 310
7920: NOT
7921: IFFALSE 7941
// ComEnterUnit ( i , lab [ 1 ] ) ;
7923: LD_VAR 0 1
7927: PPUSH
7928: LD_VAR 0 3
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: CALL_OW 120
7941: GO 7908
7943: POP
7944: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
7945: LD_ADDR_VAR 0 4
7949: PUSH
7950: LD_EXP 34
7954: PPUSH
7955: LD_INT 25
7957: PUSH
7958: LD_INT 2
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 72
7969: ST_TO_ADDR
// if eng then
7970: LD_VAR 0 4
7974: IFFALSE 8422
// begin for i in eng do
7976: LD_ADDR_VAR 0 1
7980: PUSH
7981: LD_VAR 0 4
7985: PUSH
7986: FOR_IN
7987: IFFALSE 8420
// begin tag := GetTag ( i ) ;
7989: LD_ADDR_VAR 0 5
7993: PUSH
7994: LD_VAR 0 1
7998: PPUSH
7999: CALL_OW 110
8003: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 256
8013: PUSH
8014: LD_INT 800
8016: LESS
8017: IFFALSE 8029
8019: PUSH
8020: LD_VAR 0 5
8024: PUSH
8025: LD_INT 3
8027: NONEQUAL
8028: AND
8029: IFFALSE 8067
// begin SetTag ( i , tHeal ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 3
8038: PPUSH
8039: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8043: LD_VAR 0 1
8047: PPUSH
8048: LD_INT 97
8050: PPUSH
8051: LD_INT 139
8053: PPUSH
8054: CALL_OW 111
// AddComHold ( i ) ;
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8067: LD_VAR 0 5
8071: PUSH
8072: LD_INT 3
8074: EQUAL
8075: IFFALSE 8092
8077: PUSH
8078: LD_VAR 0 1
8082: PPUSH
8083: CALL_OW 256
8087: PUSH
8088: LD_INT 1000
8090: EQUAL
8091: AND
8092: IFFALSE 8106
// SetTag ( i , 0 ) ;
8094: LD_VAR 0 1
8098: PPUSH
8099: LD_INT 0
8101: PPUSH
8102: CALL_OW 109
// if not tag then
8106: LD_VAR 0 5
8110: NOT
8111: IFFALSE 8207
// begin if cr or tmp then
8113: LD_VAR 0 8
8117: IFTRUE 8125
8119: PUSH
8120: LD_VAR 0 2
8124: OR
8125: IFFALSE 8181
// begin if IsInUnit ( i ) then
8127: LD_VAR 0 1
8131: PPUSH
8132: CALL_OW 310
8136: IFFALSE 8147
// ComExitBuilding ( i ) ;
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 122
// if tmp then
8147: LD_VAR 0 2
8151: IFFALSE 8167
// SetTag ( i , tRepair ) else
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 1
8160: PPUSH
8161: CALL_OW 109
8165: GO 8179
// SetTag ( i , tCrates ) ;
8167: LD_VAR 0 1
8171: PPUSH
8172: LD_INT 2
8174: PPUSH
8175: CALL_OW 109
// end else
8179: GO 8207
// if not IsInUnit ( i ) then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 310
8190: NOT
8191: IFFALSE 8207
// ComEnterUnit ( i , ruBase ) ;
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_VAR 0 14
8202: PPUSH
8203: CALL_OW 120
// end ; if tag = tRepair then
8207: LD_VAR 0 5
8211: PUSH
8212: LD_INT 1
8214: EQUAL
8215: IFFALSE 8295
// begin if not tmp then
8217: LD_VAR 0 2
8221: NOT
8222: IFFALSE 8238
// begin SetTag ( i , 0 ) ;
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_INT 0
8231: PPUSH
8232: CALL_OW 109
// continue ;
8236: GO 7986
// end ; if not HasTask ( i ) then
8238: LD_VAR 0 1
8242: PPUSH
8243: CALL_OW 314
8247: NOT
8248: IFFALSE 8268
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8250: LD_VAR 0 1
8254: PPUSH
8255: LD_VAR 0 2
8259: PUSH
8260: LD_INT 1
8262: ARRAY
8263: PPUSH
8264: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
8268: LD_VAR 0 1
8272: PPUSH
8273: LD_INT 26
8275: PPUSH
8276: CALL_OW 308
8280: NOT
8281: IFFALSE 8295
// ComMoveToArea ( i , ruBaseArea ) ;
8283: LD_VAR 0 1
8287: PPUSH
8288: LD_INT 26
8290: PPUSH
8291: CALL_OW 113
// end ; if tag = tCrates then
8295: LD_VAR 0 5
8299: PUSH
8300: LD_INT 2
8302: EQUAL
8303: IFFALSE 8418
// begin if not cr then
8305: LD_VAR 0 8
8309: NOT
8310: IFFALSE 8326
// begin SetTag ( i , 0 ) ;
8312: LD_VAR 0 1
8316: PPUSH
8317: LD_INT 0
8319: PPUSH
8320: CALL_OW 109
// continue ;
8324: GO 7986
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 314
8335: NOT
8336: IFFALSE 8389
8338: PUSH
8339: LD_INT 81
8341: PUSH
8342: LD_INT 6
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 92
8351: PUSH
8352: LD_VAR 0 8
8356: PUSH
8357: LD_INT 1
8359: ARRAY
8360: PUSH
8361: LD_VAR 0 8
8365: PUSH
8366: LD_INT 2
8368: ARRAY
8369: PUSH
8370: LD_INT 12
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PPUSH
8383: CALL_OW 69
8387: NOT
8388: AND
8389: IFFALSE 8418
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_VAR 0 8
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PPUSH
8405: LD_VAR 0 8
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: CALL_OW 117
// end ; end ;
8418: GO 7986
8420: POP
8421: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8422: LD_ADDR_VAR 0 10
8426: PUSH
8427: LD_EXP 34
8431: PPUSH
8432: LD_INT 2
8434: PUSH
8435: LD_INT 25
8437: PUSH
8438: LD_INT 1
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 25
8447: PUSH
8448: LD_INT 9
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 50
8462: PUSH
8463: EMPTY
8464: LIST
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PPUSH
8470: CALL_OW 72
8474: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
8475: LD_ADDR_VAR 0 12
8479: PUSH
8480: LD_INT 26
8482: PPUSH
8483: LD_INT 81
8485: PUSH
8486: LD_INT 6
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL_OW 70
8497: ST_TO_ADDR
// if sol then
8498: LD_VAR 0 10
8502: IFFALSE 9035
// begin if enemyInBase then
8504: LD_VAR 0 12
8508: IFFALSE 8729
// begin for i in sol do
8510: LD_ADDR_VAR 0 1
8514: PUSH
8515: LD_VAR 0 10
8519: PUSH
8520: FOR_IN
8521: IFFALSE 8725
// begin tw := IsInUnit ( i ) ;
8523: LD_ADDR_VAR 0 7
8527: PUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 310
8537: ST_TO_ADDR
// if tw then
8538: LD_VAR 0 7
8542: IFFALSE 8632
// begin if not tw in FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8544: LD_VAR 0 7
8548: PUSH
8549: LD_INT 22
8551: PUSH
8552: LD_INT 6
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 101
8561: PUSH
8562: LD_INT 2
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 2
8571: PUSH
8572: LD_INT 30
8574: PUSH
8575: LD_INT 5
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: LD_INT 30
8584: PUSH
8585: LD_INT 32
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: LD_INT 30
8594: PUSH
8595: LD_INT 31
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: IN
8618: NOT
8619: IFFALSE 8630
// ComExitBuilding ( i ) ;
8621: LD_VAR 0 1
8625: PPUSH
8626: CALL_OW 122
// end else
8630: GO 8723
// begin un := NearestUnitToUnit ( enemyInBase , i ) ;
8632: LD_ADDR_VAR 0 6
8636: PUSH
8637: LD_VAR 0 12
8641: PPUSH
8642: LD_VAR 0 1
8646: PPUSH
8647: CALL_OW 74
8651: ST_TO_ADDR
// if GetClass ( i ) = class_bazooker and Prob ( 30 ) then
8652: LD_VAR 0 1
8656: PPUSH
8657: CALL_OW 257
8661: PUSH
8662: LD_INT 9
8664: EQUAL
8665: IFFALSE 8676
8667: PUSH
8668: LD_INT 30
8670: PPUSH
8671: CALL_OW 13
8675: AND
8676: IFFALSE 8709
// ComTimeShift ( i , GetX ( un ) , GetY ( un ) ) else
8678: LD_VAR 0 1
8682: PPUSH
8683: LD_VAR 0 6
8687: PPUSH
8688: CALL_OW 250
8692: PPUSH
8693: LD_VAR 0 6
8697: PPUSH
8698: CALL_OW 251
8702: PPUSH
8703: CALL_OW 154
8707: GO 8723
// ComAttackUnit ( i , un ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: LD_VAR 0 6
8718: PPUSH
8719: CALL_OW 115
// end ; end ;
8723: GO 8520
8725: POP
8726: POP
// end else
8727: GO 9035
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8729: LD_ADDR_VAR 0 13
8733: PUSH
8734: LD_INT 26
8736: PPUSH
8737: LD_INT 3
8739: PUSH
8740: LD_INT 62
8742: PUSH
8743: EMPTY
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 2
8752: PUSH
8753: LD_INT 30
8755: PUSH
8756: LD_INT 32
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 30
8765: PUSH
8766: LD_INT 4
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 30
8775: PUSH
8776: LD_INT 31
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 70
8797: ST_TO_ADDR
// if empty then
8798: LD_VAR 0 13
8802: IFFALSE 8819
// empty := ReverseArray ( empty ) ;
8804: LD_ADDR_VAR 0 13
8808: PUSH
8809: LD_VAR 0 13
8813: PPUSH
8814: CALL 48898 0 1
8818: ST_TO_ADDR
// for i in sol do
8819: LD_ADDR_VAR 0 1
8823: PUSH
8824: LD_VAR 0 10
8828: PUSH
8829: FOR_IN
8830: IFFALSE 9033
// begin tag := GetTag ( i ) ;
8832: LD_ADDR_VAR 0 5
8836: PUSH
8837: LD_VAR 0 1
8841: PPUSH
8842: CALL_OW 110
8846: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8847: LD_VAR 0 1
8851: PPUSH
8852: CALL_OW 256
8856: PUSH
8857: LD_INT 1000
8859: LESS
8860: IFFALSE 8872
8862: PUSH
8863: LD_VAR 0 5
8867: PUSH
8868: LD_INT 3
8870: NONEQUAL
8871: AND
8872: IFFALSE 8912
// begin SetTag ( i , tHeal ) ;
8874: LD_VAR 0 1
8878: PPUSH
8879: LD_INT 3
8881: PPUSH
8882: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8886: LD_VAR 0 1
8890: PPUSH
8891: LD_INT 97
8893: PPUSH
8894: LD_INT 139
8896: PPUSH
8897: CALL_OW 111
// AddComHold ( i ) ;
8901: LD_VAR 0 1
8905: PPUSH
8906: CALL_OW 200
// continue ;
8910: GO 8829
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8912: LD_VAR 0 1
8916: PPUSH
8917: CALL_OW 256
8921: PUSH
8922: LD_INT 1000
8924: EQUAL
8925: IFFALSE 8937
8927: PUSH
8928: LD_VAR 0 5
8932: PUSH
8933: LD_INT 3
8935: EQUAL
8936: AND
8937: IFFALSE 8953
// begin SetTag ( i , 0 ) ;
8939: LD_VAR 0 1
8943: PPUSH
8944: LD_INT 0
8946: PPUSH
8947: CALL_OW 109
// continue ;
8951: GO 8829
// end ; if HasTask ( i ) then
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 314
8962: IFFALSE 8966
// continue ;
8964: GO 8829
// if not IsInUnit ( i ) and not tag and empty then
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 310
8975: NOT
8976: IFFALSE 8985
8978: PUSH
8979: LD_VAR 0 5
8983: NOT
8984: AND
8985: IFFALSE 8993
8987: PUSH
8988: LD_VAR 0 13
8992: AND
8993: IFFALSE 9031
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8995: LD_VAR 0 1
8999: PPUSH
9000: LD_VAR 0 13
9004: PUSH
9005: LD_INT 1
9007: ARRAY
9008: PPUSH
9009: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
9013: LD_ADDR_VAR 0 13
9017: PUSH
9018: LD_VAR 0 13
9022: PPUSH
9023: LD_INT 1
9025: PPUSH
9026: CALL_OW 3
9030: ST_TO_ADDR
// end ; end ;
9031: GO 8829
9033: POP
9034: POP
// end ; end ; end ;
9035: PPOPN 15
9037: END
// every 0 0$1 trigger ruTanks do var i , mech , enemy ;
9038: LD_EXP 36
9042: IFFALSE 9624
9044: GO 9046
9046: DISABLE
9047: LD_INT 0
9049: PPUSH
9050: PPUSH
9051: PPUSH
// begin enable ;
9052: ENABLE
// if not ruTanks then
9053: LD_EXP 36
9057: NOT
9058: IFFALSE 9062
// exit ;
9060: GO 9624
// for i in ruTanks do
9062: LD_ADDR_VAR 0 1
9066: PUSH
9067: LD_EXP 36
9071: PUSH
9072: FOR_IN
9073: IFFALSE 9622
// begin if not IsOk ( i ) or GetSide ( i ) <> 6 then
9075: LD_VAR 0 1
9079: PPUSH
9080: CALL_OW 302
9084: NOT
9085: IFTRUE 9102
9087: PUSH
9088: LD_VAR 0 1
9092: PPUSH
9093: CALL_OW 255
9097: PUSH
9098: LD_INT 6
9100: NONEQUAL
9101: OR
9102: IFFALSE 9122
// begin ruTanks := ruTanks diff i ;
9104: LD_ADDR_EXP 36
9108: PUSH
9109: LD_EXP 36
9113: PUSH
9114: LD_VAR 0 1
9118: DIFF
9119: ST_TO_ADDR
// continue ;
9120: GO 9072
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 110
9131: NOT
9132: IFTRUE 9149
9134: PUSH
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL_OW 110
9144: PUSH
9145: LD_INT 0
9147: EQUAL
9148: OR
9149: IFFALSE 9281
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 261
9160: PUSH
9161: LD_INT 50
9163: LESS
9164: IFFALSE 9181
9166: PUSH
9167: LD_VAR 0 1
9171: PPUSH
9172: CALL_OW 262
9176: PUSH
9177: LD_INT 1
9179: EQUAL
9180: AND
9181: IFFALSE 9240
// begin ComMoveXY ( i , 103 , 149 ) ;
9183: LD_VAR 0 1
9187: PPUSH
9188: LD_INT 103
9190: PPUSH
9191: LD_INT 149
9193: PPUSH
9194: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9198: LD_INT 35
9200: PPUSH
9201: CALL_OW 67
// until GetDistUnitXY ( i , 103 , 149 ) < 4 ;
9205: LD_VAR 0 1
9209: PPUSH
9210: LD_INT 103
9212: PPUSH
9213: LD_INT 149
9215: PPUSH
9216: CALL_OW 297
9220: PUSH
9221: LD_INT 4
9223: LESS
9224: IFFALSE 9198
// SetFuel ( i , 100 ) ;
9226: LD_VAR 0 1
9230: PPUSH
9231: LD_INT 100
9233: PPUSH
9234: CALL_OW 240
// end else
9238: GO 9281
// if not IsInArea ( i , ruParkingArea ) then
9240: LD_VAR 0 1
9244: PPUSH
9245: LD_INT 27
9247: PPUSH
9248: CALL_OW 308
9252: NOT
9253: IFFALSE 9269
// ComMoveToArea ( i , ruParkingArea ) else
9255: LD_VAR 0 1
9259: PPUSH
9260: LD_INT 27
9262: PPUSH
9263: CALL_OW 113
9267: GO 9281
// SetTag ( i , tParking ) ;
9269: LD_VAR 0 1
9273: PPUSH
9274: LD_INT 11
9276: PPUSH
9277: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9281: LD_VAR 0 1
9285: PPUSH
9286: CALL_OW 110
9290: PUSH
9291: LD_INT 11
9293: EQUAL
9294: IFFALSE 9424
// begin if GetLives ( i ) < 650 then
9296: LD_VAR 0 1
9300: PPUSH
9301: CALL_OW 256
9305: PUSH
9306: LD_INT 650
9308: LESS
9309: IFFALSE 9401
// begin if not IsDrivenBy ( i ) then
9311: LD_VAR 0 1
9315: PPUSH
9316: CALL_OW 311
9320: NOT
9321: IFFALSE 9325
// continue ;
9323: GO 9072
// mech := IsDrivenBy ( i ) ;
9325: LD_ADDR_VAR 0 2
9329: PUSH
9330: LD_VAR 0 1
9334: PPUSH
9335: CALL_OW 311
9339: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9340: LD_VAR 0 2
9344: PPUSH
9345: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9349: LD_VAR 0 2
9353: PPUSH
9354: LD_VAR 0 1
9358: PPUSH
9359: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9363: LD_INT 35
9365: PPUSH
9366: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9370: LD_VAR 0 1
9374: PPUSH
9375: CALL_OW 256
9379: PUSH
9380: LD_INT 1000
9382: EQUAL
9383: IFFALSE 9363
// ComEnterUnit ( mech , i ) ;
9385: LD_VAR 0 2
9389: PPUSH
9390: LD_VAR 0 1
9394: PPUSH
9395: CALL_OW 120
// end else
9399: GO 9424
// if IsDrivenBy ( i ) then
9401: LD_VAR 0 1
9405: PPUSH
9406: CALL_OW 311
9410: IFFALSE 9424
// SetTag ( i , tAttack ) ;
9412: LD_VAR 0 1
9416: PPUSH
9417: LD_INT 12
9419: PPUSH
9420: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9424: LD_VAR 0 1
9428: PPUSH
9429: CALL_OW 110
9433: PUSH
9434: LD_INT 12
9436: EQUAL
9437: IFFALSE 9620
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
9439: LD_ADDR_VAR 0 3
9443: PUSH
9444: LD_INT 26
9446: PPUSH
9447: LD_INT 81
9449: PUSH
9450: LD_INT 6
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 70
9461: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 256
9471: PUSH
9472: LD_INT 650
9474: LESS
9475: IFFALSE 9500
// begin ComStop ( i ) ;
9477: LD_VAR 0 1
9481: PPUSH
9482: CALL_OW 141
// SetTag ( i , 0 ) ;
9486: LD_VAR 0 1
9490: PPUSH
9491: LD_INT 0
9493: PPUSH
9494: CALL_OW 109
// continue ;
9498: GO 9072
// end ; if enemy then
9500: LD_VAR 0 3
9504: IFFALSE 9544
// begin if not HasTask ( i ) then
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 314
9515: NOT
9516: IFFALSE 9542
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9518: LD_VAR 0 1
9522: PPUSH
9523: LD_VAR 0 3
9527: PPUSH
9528: LD_VAR 0 1
9532: PPUSH
9533: CALL_OW 74
9537: PPUSH
9538: CALL 58216 0 2
// end else
9542: GO 9620
// if ruTanks > 1 then
9544: LD_EXP 36
9548: PUSH
9549: LD_INT 1
9551: GREATER
9552: IFFALSE 9620
// AgressiveMove ( i , [ [ 78 , 112 ] , [ 104 , 106 ] , [ 130 , 107 ] , [ 143 , 83 ] , [ 120 , 35 ] ] ) ;
9554: LD_VAR 0 1
9558: PPUSH
9559: LD_INT 78
9561: PUSH
9562: LD_INT 112
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 104
9571: PUSH
9572: LD_INT 106
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 130
9581: PUSH
9582: LD_INT 107
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: LD_INT 143
9591: PUSH
9592: LD_INT 83
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 120
9601: PUSH
9602: LD_INT 35
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: PPUSH
9616: CALL 56584 0 2
// end ; end ;
9620: GO 9072
9622: POP
9623: POP
// end ;
9624: PPOPN 3
9626: END
// every 0 0$1 trigger InBattle ( 6 ) or playerInBase do
9627: LD_INT 6
9629: PPUSH
9630: CALL_OW 463
9634: IFTRUE 9642
9636: PUSH
9637: LD_EXP 5
9641: OR
9642: IFFALSE 9860
9644: GO 9646
9646: DISABLE
// begin wait ( 0 0$10 ) ;
9647: LD_INT 350
9649: PPUSH
9650: CALL_OW 67
// if playerInBase then
9654: LD_EXP 5
9658: IFFALSE 9667
// wait ( 3 3$00 ) ;
9660: LD_INT 6300
9662: PPUSH
9663: CALL_OW 67
// ruConstructList := [ [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] ] ;
9667: LD_ADDR_EXP 35
9671: PUSH
9672: LD_INT 21
9674: PUSH
9675: LD_INT 3
9677: PUSH
9678: LD_INT 1
9680: PUSH
9681: LD_INT 45
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 21
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: LD_INT 45
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 21
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 1
9716: PUSH
9717: LD_INT 45
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: ST_TO_ADDR
// if Difficulty > 1 then
9731: LD_OWVAR 67
9735: PUSH
9736: LD_INT 1
9738: GREATER
9739: IFFALSE 9774
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gatling_gun ] ) ;
9741: LD_ADDR_EXP 35
9745: PUSH
9746: LD_EXP 35
9750: PPUSH
9751: LD_INT 21
9753: PUSH
9754: LD_INT 3
9756: PUSH
9757: LD_INT 1
9759: PUSH
9760: LD_INT 43
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: PPUSH
9769: CALL 53818 0 2
9773: ST_TO_ADDR
// if Difficulty > 2 then
9774: LD_OWVAR 67
9778: PUSH
9779: LD_INT 2
9781: GREATER
9782: IFFALSE 9817
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9784: LD_ADDR_EXP 35
9788: PUSH
9789: LD_EXP 35
9793: PPUSH
9794: LD_INT 21
9796: PUSH
9797: LD_INT 3
9799: PUSH
9800: LD_INT 1
9802: PUSH
9803: LD_INT 44
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: PPUSH
9812: CALL 53818 0 2
9816: ST_TO_ADDR
// if Difficulty > 3 then
9817: LD_OWVAR 67
9821: PUSH
9822: LD_INT 3
9824: GREATER
9825: IFFALSE 9860
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9827: LD_ADDR_EXP 35
9831: PUSH
9832: LD_EXP 35
9836: PPUSH
9837: LD_INT 21
9839: PUSH
9840: LD_INT 3
9842: PUSH
9843: LD_INT 1
9845: PUSH
9846: LD_INT 44
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL 53818 0 2
9859: ST_TO_ADDR
// end ; end_of_file
9860: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
9861: LD_INT 0
9863: PPUSH
9864: PPUSH
9865: PPUSH
9866: PPUSH
9867: PPUSH
9868: PPUSH
9869: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
9870: LD_ADDR_VAR 0 2
9874: PUSH
9875: LD_STRING 09_env
9877: PPUSH
9878: EMPTY
9879: PPUSH
9880: CALL_OW 30
9884: ST_TO_ADDR
// if not tmp then
9885: LD_VAR 0 2
9889: NOT
9890: IFFALSE 9894
// exit ;
9892: GO 10264
// list := ListEnvironmentArea ( mapArea ) ;
9894: LD_ADDR_VAR 0 7
9898: PUSH
9899: LD_INT 4
9901: PPUSH
9902: CALL_OW 353
9906: ST_TO_ADDR
// if not list then
9907: LD_VAR 0 7
9911: NOT
9912: IFFALSE 9916
// exit ;
9914: GO 10264
// for i in list do
9916: LD_ADDR_VAR 0 3
9920: PUSH
9921: LD_VAR 0 7
9925: PUSH
9926: FOR_IN
9927: IFFALSE 10002
// begin exist := false ;
9929: LD_ADDR_VAR 0 6
9933: PUSH
9934: LD_INT 0
9936: ST_TO_ADDR
// if IsEnvironment ( i [ 1 ] , i [ 2 ] ) then
9937: LD_VAR 0 3
9941: PUSH
9942: LD_INT 1
9944: ARRAY
9945: PPUSH
9946: LD_VAR 0 3
9950: PUSH
9951: LD_INT 2
9953: ARRAY
9954: PPUSH
9955: CALL_OW 351
9959: IFFALSE 9971
// begin exist := true ;
9961: LD_ADDR_VAR 0 6
9965: PUSH
9966: LD_INT 1
9968: ST_TO_ADDR
// break ;
9969: GO 10002
// end ; if not exist then
9971: LD_VAR 0 6
9975: NOT
9976: IFFALSE 10000
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
9978: LD_VAR 0 3
9982: PUSH
9983: LD_INT 1
9985: ARRAY
9986: PPUSH
9987: LD_VAR 0 3
9991: PUSH
9992: LD_INT 2
9994: ARRAY
9995: PPUSH
9996: CALL_OW 347
// end ;
10000: GO 9926
10002: POP
10003: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
10004: LD_ADDR_VAR 0 2
10008: PUSH
10009: LD_STRING 09_animals
10011: PPUSH
10012: EMPTY
10013: PPUSH
10014: CALL_OW 30
10018: ST_TO_ADDR
// if not tmp then
10019: LD_VAR 0 2
10023: NOT
10024: IFFALSE 10028
// exit ;
10026: GO 10264
// InitHc_All ( ) ;
10028: CALL_OW 584
// for i in tmp do
10032: LD_ADDR_VAR 0 3
10036: PUSH
10037: LD_VAR 0 2
10041: PUSH
10042: FOR_IN
10043: IFFALSE 10160
// begin uc_side := 0 ;
10045: LD_ADDR_OWVAR 20
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// uc_nation := nation_nature ;
10053: LD_ADDR_OWVAR 21
10057: PUSH
10058: LD_INT 0
10060: ST_TO_ADDR
// hc_gallery :=  ;
10061: LD_ADDR_OWVAR 33
10065: PUSH
10066: LD_STRING 
10068: ST_TO_ADDR
// hc_name :=  ;
10069: LD_ADDR_OWVAR 26
10073: PUSH
10074: LD_STRING 
10076: ST_TO_ADDR
// hc_class := i [ 1 ] ;
10077: LD_ADDR_OWVAR 28
10081: PUSH
10082: LD_VAR 0 3
10086: PUSH
10087: LD_INT 1
10089: ARRAY
10090: ST_TO_ADDR
// un := CreateHuman ;
10091: LD_ADDR_VAR 0 5
10095: PUSH
10096: CALL_OW 44
10100: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
10101: LD_VAR 0 5
10105: PPUSH
10106: LD_VAR 0 3
10110: PUSH
10111: LD_INT 2
10113: ARRAY
10114: PPUSH
10115: LD_VAR 0 3
10119: PUSH
10120: LD_INT 3
10122: ARRAY
10123: PPUSH
10124: LD_VAR 0 3
10128: PUSH
10129: LD_INT 4
10131: ARRAY
10132: PPUSH
10133: LD_INT 0
10135: PPUSH
10136: CALL 55978 0 5
// SetLives ( un , i [ 5 ] ) ;
10140: LD_VAR 0 5
10144: PPUSH
10145: LD_VAR 0 3
10149: PUSH
10150: LD_INT 5
10152: ARRAY
10153: PPUSH
10154: CALL_OW 234
// end ;
10158: GO 10042
10160: POP
10161: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
10162: LD_ADDR_VAR 0 3
10166: PUSH
10167: DOUBLE
10168: LD_INT 1
10170: DEC
10171: ST_TO_ADDR
10172: LD_INT 6
10174: PUSH
10175: LD_INT 5
10177: PUSH
10178: LD_INT 4
10180: PUSH
10181: LD_INT 3
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: PUSH
10190: LD_OWVAR 67
10194: ARRAY
10195: PUSH
10196: FOR_TO
10197: IFFALSE 10223
// begin PrepareApeman ( 5 ) ;
10199: LD_INT 5
10201: PPUSH
10202: CALL 49945 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10206: CALL_OW 44
10210: PPUSH
10211: LD_INT 5
10213: PPUSH
10214: LD_INT 0
10216: PPUSH
10217: CALL_OW 49
// end ;
10221: GO 10196
10223: POP
10224: POP
// for i in FilterUnitsInArea ( ruBaseArea , [ f_side , 0 ] ) do
10225: LD_ADDR_VAR 0 3
10229: PUSH
10230: LD_INT 26
10232: PPUSH
10233: LD_INT 22
10235: PUSH
10236: LD_INT 0
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PPUSH
10243: CALL_OW 70
10247: PUSH
10248: FOR_IN
10249: IFFALSE 10262
// RemoveUnit ( i ) ;
10251: LD_VAR 0 3
10255: PPUSH
10256: CALL_OW 64
10260: GO 10248
10262: POP
10263: POP
// end ;
10264: LD_VAR 0 1
10268: RET
// export function CreateDeposits ; var i , oil , sib ; begin
10269: LD_INT 0
10271: PPUSH
10272: PPUSH
10273: PPUSH
10274: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
10275: LD_ADDR_VAR 0 3
10279: PUSH
10280: LD_INT 91
10282: PUSH
10283: LD_INT 13
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 52
10292: PUSH
10293: LD_INT 23
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 115
10302: PUSH
10303: LD_INT 150
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
10315: LD_ADDR_VAR 0 4
10319: PUSH
10320: LD_INT 82
10322: PUSH
10323: LD_INT 42
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 128
10332: PUSH
10333: LD_INT 132
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: ST_TO_ADDR
// for i in oil do
10344: LD_ADDR_VAR 0 2
10348: PUSH
10349: LD_VAR 0 3
10353: PUSH
10354: FOR_IN
10355: IFFALSE 10434
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
10357: LD_VAR 0 2
10361: PUSH
10362: LD_INT 1
10364: ARRAY
10365: PPUSH
10366: LD_VAR 0 2
10370: PUSH
10371: LD_INT 2
10373: ARRAY
10374: PPUSH
10375: LD_INT 2
10377: PPUSH
10378: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10382: LD_VAR 0 2
10386: PUSH
10387: LD_INT 1
10389: ARRAY
10390: PPUSH
10391: LD_VAR 0 2
10395: PUSH
10396: LD_INT 2
10398: ARRAY
10399: PPUSH
10400: LD_INT 2
10402: PPUSH
10403: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10407: LD_VAR 0 2
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: PPUSH
10416: LD_VAR 0 2
10420: PUSH
10421: LD_INT 2
10423: ARRAY
10424: PPUSH
10425: LD_INT 6
10427: PPUSH
10428: CALL_OW 441
// end ;
10432: GO 10354
10434: POP
10435: POP
// for i in sib do
10436: LD_ADDR_VAR 0 2
10440: PUSH
10441: LD_VAR 0 4
10445: PUSH
10446: FOR_IN
10447: IFFALSE 10526
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
10449: LD_VAR 0 2
10453: PUSH
10454: LD_INT 1
10456: ARRAY
10457: PPUSH
10458: LD_VAR 0 2
10462: PUSH
10463: LD_INT 2
10465: ARRAY
10466: PPUSH
10467: LD_INT 3
10469: PPUSH
10470: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10474: LD_VAR 0 2
10478: PUSH
10479: LD_INT 1
10481: ARRAY
10482: PPUSH
10483: LD_VAR 0 2
10487: PUSH
10488: LD_INT 2
10490: ARRAY
10491: PPUSH
10492: LD_INT 2
10494: PPUSH
10495: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10499: LD_VAR 0 2
10503: PUSH
10504: LD_INT 1
10506: ARRAY
10507: PPUSH
10508: LD_VAR 0 2
10512: PUSH
10513: LD_INT 2
10515: ARRAY
10516: PPUSH
10517: LD_INT 6
10519: PPUSH
10520: CALL_OW 441
// end ;
10524: GO 10446
10526: POP
10527: POP
// end ;
10528: LD_VAR 0 1
10532: RET
// export function LoadCam ; var i , tmp ; begin
10533: LD_INT 0
10535: PPUSH
10536: PPUSH
10537: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
10538: LD_ADDR_VAR 0 3
10542: PUSH
10543: LD_STRING 09_cameras
10545: PPUSH
10546: EMPTY
10547: PPUSH
10548: CALL_OW 30
10552: ST_TO_ADDR
// if not tmp then
10553: LD_VAR 0 3
10557: NOT
10558: IFFALSE 10562
// exit ;
10560: GO 10604
// for i in tmp do
10562: LD_ADDR_VAR 0 2
10566: PUSH
10567: LD_VAR 0 3
10571: PUSH
10572: FOR_IN
10573: IFFALSE 10602
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
10575: LD_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ARRAY
10583: PPUSH
10584: LD_VAR 0 2
10588: PUSH
10589: LD_INT 2
10591: ARRAY
10592: PPUSH
10593: LD_INT 2
10595: PPUSH
10596: CALL_OW 244
10600: GO 10572
10602: POP
10603: POP
// end ;
10604: LD_VAR 0 1
10608: RET
// export function LoadTech ; var i , tmp , default ; begin
10609: LD_INT 0
10611: PPUSH
10612: PPUSH
10613: PPUSH
10614: PPUSH
// default := [ 2 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
10615: LD_ADDR_VAR 0 4
10619: PUSH
10620: LD_INT 2
10622: PUSH
10623: LD_INT 2
10625: PUSH
10626: LD_INT 0
10628: PUSH
10629: LD_INT 0
10631: PUSH
10632: LD_INT 0
10634: PUSH
10635: LD_INT 2
10637: PUSH
10638: LD_INT 2
10640: PUSH
10641: LD_INT 0
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: LD_INT 0
10649: PUSH
10650: LD_INT 2
10652: PUSH
10653: LD_INT 0
10655: PUSH
10656: LD_INT 0
10658: PUSH
10659: LD_INT 0
10661: PUSH
10662: LD_INT 2
10664: PUSH
10665: LD_INT 0
10667: PUSH
10668: LD_INT 2
10670: PUSH
10671: LD_INT 1
10673: PUSH
10674: LD_INT 0
10676: PUSH
10677: LD_INT 2
10679: PUSH
10680: LD_INT 1
10682: PUSH
10683: LD_INT 1
10685: PUSH
10686: LD_INT 0
10688: PUSH
10689: LD_INT 0
10691: PUSH
10692: LD_INT 0
10694: PUSH
10695: LD_INT 0
10697: PUSH
10698: LD_INT 0
10700: PUSH
10701: LD_INT 0
10703: PUSH
10704: LD_INT 0
10706: PUSH
10707: LD_INT 0
10709: PUSH
10710: LD_INT 0
10712: PUSH
10713: LD_INT 0
10715: PUSH
10716: LD_INT 0
10718: PUSH
10719: LD_INT 0
10721: PUSH
10722: LD_INT 2
10724: PUSH
10725: LD_INT 0
10727: PUSH
10728: LD_INT 0
10730: PUSH
10731: LD_INT 0
10733: PUSH
10734: LD_INT 1
10736: PUSH
10737: LD_INT 1
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: LD_INT 1
10745: PUSH
10746: LD_INT 0
10748: PUSH
10749: LD_INT 0
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: LD_INT 2
10757: PUSH
10758: LD_INT 2
10760: PUSH
10761: LD_INT 2
10763: PUSH
10764: LD_INT 2
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 1
10772: PUSH
10773: LD_INT 1
10775: PUSH
10776: LD_INT 0
10778: PUSH
10779: LD_INT 1
10781: PUSH
10782: LD_INT 0
10784: PUSH
10785: LD_INT 0
10787: PUSH
10788: LD_INT 0
10790: PUSH
10791: LD_INT 0
10793: PUSH
10794: LD_INT 0
10796: PUSH
10797: LD_INT 2
10799: PUSH
10800: LD_INT 1
10802: PUSH
10803: LD_INT 0
10805: PUSH
10806: LD_INT 0
10808: PUSH
10809: LD_INT 0
10811: PUSH
10812: LD_INT 0
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: LD_INT 0
10820: PUSH
10821: LD_INT 0
10823: PUSH
10824: LD_INT 2
10826: PUSH
10827: LD_INT 2
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: LD_INT 0
10835: PUSH
10836: LD_INT 1
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: LD_INT 1
10847: PUSH
10848: LD_INT 1
10850: PUSH
10851: LD_INT 1
10853: PUSH
10854: LD_INT 1
10856: PUSH
10857: LD_INT 0
10859: PUSH
10860: LD_INT 0
10862: PUSH
10863: LD_INT 2
10865: PUSH
10866: LD_INT 2
10868: PUSH
10869: LD_INT 1
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: LD_INT 0
10877: PUSH
10878: LD_INT 0
10880: PUSH
10881: LD_INT 0
10883: PUSH
10884: LD_INT 1
10886: PUSH
10887: LD_INT 1
10889: PUSH
10890: LD_INT 1
10892: PUSH
10893: LD_INT 1
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: LD_INT 1
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: LD_INT 1
10907: PUSH
10908: LD_INT 1
10910: PUSH
10911: LD_INT 1
10913: PUSH
10914: LD_INT 1
10916: PUSH
10917: LD_INT 1
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: ST_TO_ADDR
// tmp := LoadVariable ( 09_tech , default ) ;
11022: LD_ADDR_VAR 0 3
11026: PUSH
11027: LD_STRING 09_tech
11029: PPUSH
11030: LD_VAR 0 4
11034: PPUSH
11035: CALL_OW 30
11039: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
11040: LD_ADDR_VAR 0 2
11044: PUSH
11045: DOUBLE
11046: LD_INT 1
11048: DEC
11049: ST_TO_ADDR
11050: LD_VAR 0 3
11054: PPUSH
11055: CALL 17842 0 1
11059: PUSH
11060: FOR_TO
11061: IFFALSE 11088
// SetTech ( i , 2 , tmp [ i ] ) ;
11063: LD_VAR 0 2
11067: PPUSH
11068: LD_INT 2
11070: PPUSH
11071: LD_VAR 0 3
11075: PUSH
11076: LD_VAR 0 2
11080: ARRAY
11081: PPUSH
11082: CALL_OW 322
11086: GO 11060
11088: POP
11089: POP
// end ;
11090: LD_VAR 0 1
11094: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
11095: LD_INT 0
11097: PPUSH
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
11102: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
11103: LD_ADDR_VAR 0 3
11107: PUSH
11108: LD_STRING 09_buildings
11110: PPUSH
11111: EMPTY
11112: PPUSH
11113: CALL_OW 30
11117: ST_TO_ADDR
// for i in tmp do
11118: LD_ADDR_VAR 0 2
11122: PUSH
11123: LD_VAR 0 3
11127: PUSH
11128: FOR_IN
11129: IFFALSE 11523
// begin uc_side := 2 ;
11131: LD_ADDR_OWVAR 20
11135: PUSH
11136: LD_INT 2
11138: ST_TO_ADDR
// uc_nation := nation_arabian ;
11139: LD_ADDR_OWVAR 21
11143: PUSH
11144: LD_INT 2
11146: ST_TO_ADDR
// bc_type := i [ 1 ] ;
11147: LD_ADDR_OWVAR 42
11151: PUSH
11152: LD_VAR 0 2
11156: PUSH
11157: LD_INT 1
11159: ARRAY
11160: ST_TO_ADDR
// bc_level := i [ 5 ] ;
11161: LD_ADDR_OWVAR 43
11165: PUSH
11166: LD_VAR 0 2
11170: PUSH
11171: LD_INT 5
11173: ARRAY
11174: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
11175: LD_ADDR_OWVAR 44
11179: PUSH
11180: LD_INT 9
11182: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
11183: LD_ADDR_OWVAR 45
11187: PUSH
11188: LD_INT 9
11190: ST_TO_ADDR
// if i [ 7 ] then
11191: LD_VAR 0 2
11195: PUSH
11196: LD_INT 7
11198: ARRAY
11199: IFFALSE 11239
// begin bc_kind1 := i [ 7 ] ;
11201: LD_ADDR_OWVAR 44
11205: PUSH
11206: LD_VAR 0 2
11210: PUSH
11211: LD_INT 7
11213: ARRAY
11214: ST_TO_ADDR
// if i [ 8 ] then
11215: LD_VAR 0 2
11219: PUSH
11220: LD_INT 8
11222: ARRAY
11223: IFFALSE 11239
// bc_kind2 := i [ 8 ] ;
11225: LD_ADDR_OWVAR 45
11229: PUSH
11230: LD_VAR 0 2
11234: PUSH
11235: LD_INT 8
11237: ARRAY
11238: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
11239: LD_ADDR_VAR 0 4
11243: PUSH
11244: LD_VAR 0 2
11248: PUSH
11249: LD_INT 2
11251: ARRAY
11252: PPUSH
11253: LD_VAR 0 2
11257: PUSH
11258: LD_INT 3
11260: ARRAY
11261: PPUSH
11262: LD_VAR 0 2
11266: PUSH
11267: LD_INT 4
11269: ARRAY
11270: PPUSH
11271: CALL_OW 47
11275: ST_TO_ADDR
// if i [ 8 ] then
11276: LD_VAR 0 2
11280: PUSH
11281: LD_INT 8
11283: ARRAY
11284: IFFALSE 11304
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
11286: LD_VAR 0 4
11290: PPUSH
11291: LD_VAR 0 2
11295: PUSH
11296: LD_INT 8
11298: ARRAY
11299: PPUSH
11300: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
11304: LD_VAR 0 2
11308: PUSH
11309: LD_INT 1
11311: ARRAY
11312: PUSH
11313: LD_INT 0
11315: PUSH
11316: LD_INT 1
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: IN
11323: IFFALSE 11521
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
11325: LD_ADDR_VAR 0 6
11329: PUSH
11330: LD_STRING 09_materials
11332: PPUSH
11333: LD_INT 100
11335: PUSH
11336: LD_INT 50
11338: PUSH
11339: LD_INT 30
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: PPUSH
11350: CALL_OW 30
11354: ST_TO_ADDR
// for j := 1 to 3 do
11355: LD_ADDR_VAR 0 5
11359: PUSH
11360: DOUBLE
11361: LD_INT 1
11363: DEC
11364: ST_TO_ADDR
11365: LD_INT 3
11367: PUSH
11368: FOR_TO
11369: IFFALSE 11519
// if mat [ 1 ] [ j ] then
11371: LD_VAR 0 6
11375: PUSH
11376: LD_INT 1
11378: ARRAY
11379: PUSH
11380: LD_VAR 0 5
11384: ARRAY
11385: IFFALSE 11517
// if j > 1 then
11387: LD_VAR 0 5
11391: PUSH
11392: LD_INT 1
11394: GREATER
11395: IFFALSE 11458
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 35 , 25 , 20 , 10 ] [ Difficulty ] ) else
11397: LD_VAR 0 4
11401: PPUSH
11402: CALL_OW 274
11406: PPUSH
11407: LD_VAR 0 5
11411: PPUSH
11412: LD_VAR 0 6
11416: PUSH
11417: LD_INT 1
11419: ARRAY
11420: PUSH
11421: LD_VAR 0 5
11425: ARRAY
11426: PUSH
11427: LD_INT 35
11429: PUSH
11430: LD_INT 25
11432: PUSH
11433: LD_INT 20
11435: PUSH
11436: LD_INT 10
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: PUSH
11445: LD_OWVAR 67
11449: ARRAY
11450: PLUS
11451: PPUSH
11452: CALL_OW 277
11456: GO 11517
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 350 , 250 , 150 , 100 ] [ Difficulty ] ) ;
11458: LD_VAR 0 4
11462: PPUSH
11463: CALL_OW 274
11467: PPUSH
11468: LD_VAR 0 5
11472: PPUSH
11473: LD_VAR 0 6
11477: PUSH
11478: LD_INT 1
11480: ARRAY
11481: PUSH
11482: LD_VAR 0 5
11486: ARRAY
11487: PUSH
11488: LD_INT 350
11490: PUSH
11491: LD_INT 250
11493: PUSH
11494: LD_INT 150
11496: PUSH
11497: LD_INT 100
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: PUSH
11506: LD_OWVAR 67
11510: ARRAY
11511: PLUS
11512: PPUSH
11513: CALL_OW 277
11517: GO 11368
11519: POP
11520: POP
// end ; end ;
11521: GO 11128
11523: POP
11524: POP
// end ;
11525: LD_VAR 0 1
11529: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
11530: LD_INT 0
11532: PPUSH
11533: PPUSH
// area = ListEnvironmentArea ( area ) ;
11534: LD_ADDR_VAR 0 2
11538: PUSH
11539: LD_VAR 0 2
11543: PPUSH
11544: CALL_OW 353
11548: ST_TO_ADDR
// if bulldozer > 0 then
11549: LD_VAR 0 1
11553: PUSH
11554: LD_INT 0
11556: GREATER
11557: IFFALSE 11668
// for i = area downto 1 do
11559: LD_ADDR_VAR 0 4
11563: PUSH
11564: DOUBLE
11565: LD_VAR 0 2
11569: INC
11570: ST_TO_ADDR
11571: LD_INT 1
11573: PUSH
11574: FOR_DOWNTO
11575: IFFALSE 11666
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
11577: LD_VAR 0 2
11581: PUSH
11582: LD_VAR 0 4
11586: ARRAY
11587: PUSH
11588: LD_INT 1
11590: ARRAY
11591: PPUSH
11592: LD_VAR 0 2
11596: PUSH
11597: LD_VAR 0 4
11601: ARRAY
11602: PUSH
11603: LD_INT 2
11605: ARRAY
11606: PPUSH
11607: CALL_OW 351
11611: IFFALSE 11664
// if not HasTask ( bulldozer ) then
11613: LD_VAR 0 1
11617: PPUSH
11618: CALL_OW 314
11622: NOT
11623: IFFALSE 11664
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
11625: LD_VAR 0 1
11629: PPUSH
11630: LD_VAR 0 2
11634: PUSH
11635: LD_VAR 0 4
11639: ARRAY
11640: PUSH
11641: LD_INT 1
11643: ARRAY
11644: PPUSH
11645: LD_VAR 0 2
11649: PUSH
11650: LD_VAR 0 4
11654: ARRAY
11655: PUSH
11656: LD_INT 2
11658: ARRAY
11659: PPUSH
11660: CALL_OW 171
11664: GO 11574
11666: POP
11667: POP
// end ; end_of_file
11668: LD_VAR 0 3
11672: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11673: LD_VAR 0 1
11677: PPUSH
11678: LD_VAR 0 2
11682: PPUSH
11683: CALL 75572 0 2
// if GetControl ( vehicle ) = control_apeman then
11687: LD_VAR 0 1
11691: PPUSH
11692: CALL_OW 263
11696: PUSH
11697: LD_INT 5
11699: EQUAL
11700: IFFALSE 11712
// begin apeDriver := true ;
11702: LD_ADDR_EXP 8
11706: PUSH
11707: LD_INT 1
11709: ST_TO_ADDR
// exit ;
11710: GO 11765
// end ; if GetSide ( factory ) = 6 then
11712: LD_VAR 0 2
11716: PPUSH
11717: CALL_OW 255
11721: PUSH
11722: LD_INT 6
11724: EQUAL
11725: IFFALSE 11765
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
11727: LD_ADDR_EXP 35
11731: PUSH
11732: LD_EXP 35
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: CALL_OW 3
11744: ST_TO_ADDR
// ruTanks := Join ( ruTanks , vehicle ) ;
11745: LD_ADDR_EXP 36
11749: PUSH
11750: LD_EXP 36
11754: PPUSH
11755: LD_VAR 0 1
11759: PPUSH
11760: CALL 53818 0 2
11764: ST_TO_ADDR
// end ; end ;
11765: PPOPN 2
11767: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) = 6 and not See ( 2 , unit ) then
11768: LD_VAR 0 2
11772: PPUSH
11773: CALL_OW 255
11777: PUSH
11778: LD_INT 6
11780: EQUAL
11781: IFFALSE 11798
11783: PUSH
11784: LD_INT 2
11786: PPUSH
11787: LD_VAR 0 2
11791: PPUSH
11792: CALL_OW 292
11796: NOT
11797: AND
11798: IFFALSE 11812
// SetLives ( unit , 1000 ) ;
11800: LD_VAR 0 2
11804: PPUSH
11805: LD_INT 1000
11807: PPUSH
11808: CALL_OW 234
// end ;
11812: PPOPN 2
11814: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area , fac , arm ;
11815: LD_INT 0
11817: PPUSH
11818: PPUSH
11819: PPUSH
11820: PPUSH
// begin if GetSide ( driver ) = 3 then
11821: LD_VAR 0 1
11825: PPUSH
11826: CALL_OW 255
11830: PUSH
11831: LD_INT 3
11833: EQUAL
11834: IFFALSE 11975
// begin tag := GetTag ( driver ) ;
11836: LD_ADDR_VAR 0 5
11840: PUSH
11841: LD_VAR 0 1
11845: PPUSH
11846: CALL_OW 110
11850: ST_TO_ADDR
// area := [ ruSpawn1AArea , ruSpawn2AArea , ruSpawn3AArea ] [ tag ] ;
11851: LD_ADDR_VAR 0 6
11855: PUSH
11856: LD_INT 21
11858: PUSH
11859: LD_INT 22
11861: PUSH
11862: LD_INT 23
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: LIST
11869: PUSH
11870: LD_VAR 0 5
11874: ARRAY
11875: ST_TO_ADDR
// if not area then
11876: LD_VAR 0 6
11880: NOT
11881: IFFALSE 11885
// exit ;
11883: GO 12243
// repeat ComMoveToArea ( driver , area ) ;
11885: LD_VAR 0 1
11889: PPUSH
11890: LD_VAR 0 6
11894: PPUSH
11895: CALL_OW 113
// wait ( 0 0$3 ) ;
11899: LD_INT 105
11901: PPUSH
11902: CALL_OW 67
// if not IsOk ( driver ) then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 302
11915: NOT
11916: IFFALSE 11920
// exit ;
11918: GO 12243
// until IsInArea ( driver , ruSpawn1Area ) or IsInArea ( driver , ruSpawn2Area ) or IsInArea ( driver , ruSpawn3Area ) ;
11920: LD_VAR 0 1
11924: PPUSH
11925: LD_INT 15
11927: PPUSH
11928: CALL_OW 308
11932: IFTRUE 11948
11934: PUSH
11935: LD_VAR 0 1
11939: PPUSH
11940: LD_INT 17
11942: PPUSH
11943: CALL_OW 308
11947: OR
11948: IFTRUE 11964
11950: PUSH
11951: LD_VAR 0 1
11955: PPUSH
11956: LD_INT 19
11958: PPUSH
11959: CALL_OW 308
11963: OR
11964: IFFALSE 11885
// RemoveUnit ( driver ) ;
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL_OW 64
// end ; if GetSide ( driver ) = 6 then
11975: LD_VAR 0 1
11979: PPUSH
11980: CALL_OW 255
11984: PUSH
11985: LD_INT 6
11987: EQUAL
11988: IFFALSE 12243
// begin ComMoveXY ( driver , 97 , 139 ) ;
11990: LD_VAR 0 1
11994: PPUSH
11995: LD_INT 97
11997: PPUSH
11998: LD_INT 139
12000: PPUSH
12001: CALL_OW 111
// if GetLives ( driver ) < 1000 then
12005: LD_VAR 0 1
12009: PPUSH
12010: CALL_OW 256
12014: PUSH
12015: LD_INT 1000
12017: LESS
12018: IFFALSE 12032
// SetTag ( driver , tHeal ) ;
12020: LD_VAR 0 1
12024: PPUSH
12025: LD_INT 3
12027: PPUSH
12028: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
12032: LD_INT 35
12034: PPUSH
12035: CALL_OW 67
// if IsDead ( driver ) then
12039: LD_VAR 0 1
12043: PPUSH
12044: CALL_OW 301
12048: IFFALSE 12052
// exit ;
12050: GO 12243
// until GetLives ( driver ) = 1000 ;
12052: LD_VAR 0 1
12056: PPUSH
12057: CALL_OW 256
12061: PUSH
12062: LD_INT 1000
12064: EQUAL
12065: IFFALSE 12032
// SetTag ( driver , 0 ) ;
12067: LD_VAR 0 1
12071: PPUSH
12072: LD_INT 0
12074: PPUSH
12075: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12079: LD_ADDR_VAR 0 7
12083: PUSH
12084: LD_INT 26
12086: PPUSH
12087: LD_INT 22
12089: PUSH
12090: LD_INT 6
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 30
12099: PUSH
12100: LD_INT 3
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 50
12109: PUSH
12110: EMPTY
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: LIST
12117: PPUSH
12118: CALL_OW 70
12122: ST_TO_ADDR
// if fac then
12123: LD_VAR 0 7
12127: IFFALSE 12149
// begin ComEnterUnit ( driver , fac [ 1 ] ) ;
12129: LD_VAR 0 1
12133: PPUSH
12134: LD_VAR 0 7
12138: PUSH
12139: LD_INT 1
12141: ARRAY
12142: PPUSH
12143: CALL_OW 120
// exit ;
12147: GO 12243
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_barracks ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
12149: LD_ADDR_VAR 0 8
12153: PUSH
12154: LD_INT 26
12156: PPUSH
12157: LD_INT 22
12159: PUSH
12160: LD_INT 6
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: LD_INT 30
12169: PUSH
12170: LD_INT 5
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 3
12179: PUSH
12180: LD_INT 62
12182: PUSH
12183: EMPTY
12184: LIST
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 50
12192: PUSH
12193: EMPTY
12194: LIST
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: PPUSH
12202: CALL_OW 70
12206: ST_TO_ADDR
// if arm then
12207: LD_VAR 0 8
12211: IFFALSE 12243
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
12213: LD_VAR 0 1
12217: PPUSH
12218: LD_VAR 0 8
12222: PUSH
12223: LD_INT 1
12225: ARRAY
12226: PPUSH
12227: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
12231: LD_VAR 0 1
12235: PPUSH
12236: LD_INT 1
12238: PPUSH
12239: CALL_OW 183
// end ; end ; end ;
12243: PPOPN 8
12245: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
12246: LD_VAR 0 3
12250: PUSH
12251: LD_INT 17
12253: EQUAL
12254: IFFALSE 12264
// kamikazeTrained := true ;
12256: LD_ADDR_EXP 6
12260: PUSH
12261: LD_INT 1
12263: ST_TO_ADDR
// end ;
12264: PPOPN 3
12266: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
12267: LD_VAR 0 1
12271: PPUSH
12272: CALL 75514 0 1
// if un in ruTanks then
12276: LD_VAR 0 1
12280: PUSH
12281: LD_EXP 36
12285: IN
12286: IFFALSE 12349
// ruConstructList := Join ( ruConstructList , [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ) ;
12288: LD_ADDR_EXP 35
12292: PUSH
12293: LD_EXP 35
12297: PPUSH
12298: LD_VAR 0 1
12302: PPUSH
12303: CALL_OW 265
12307: PUSH
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 262
12317: PUSH
12318: LD_VAR 0 1
12322: PPUSH
12323: CALL_OW 263
12327: PUSH
12328: LD_VAR 0 1
12332: PPUSH
12333: CALL_OW 264
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: PPUSH
12344: CALL 53818 0 2
12348: ST_TO_ADDR
// if un = Schulz then
12349: LD_VAR 0 1
12353: PUSH
12354: LD_EXP 24
12358: EQUAL
12359: IFFALSE 12368
// YouLost ( Schulz ) ;
12361: LD_STRING Schulz
12363: PPUSH
12364: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
12368: LD_VAR 0 1
12372: PUSH
12373: LD_EXP 13
12377: EQUAL
12378: IFFALSE 12395
12380: PUSH
12381: LD_VAR 0 1
12385: PPUSH
12386: CALL_OW 255
12390: PUSH
12391: LD_INT 2
12393: EQUAL
12394: AND
12395: IFFALSE 12404
// YouLost ( Heike ) ;
12397: LD_STRING Heike
12399: PPUSH
12400: CALL_OW 104
// end ; end_of_file
12404: PPOPN 1
12406: END
// export function Action ; begin
12407: LD_INT 0
12409: PPUSH
// InGameOn ;
12410: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
12414: LD_INT 1
12416: PPUSH
12417: LD_INT 1
12419: PPUSH
12420: LD_INT 2
12422: PPUSH
12423: LD_INT 32963
12425: NEG
12426: PPUSH
12427: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
12431: LD_INT 1
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: LD_INT 2
12439: PPUSH
12440: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
12444: LD_INT 173
12446: PPUSH
12447: LD_INT 149
12449: PPUSH
12450: CALL_OW 86
// PrepareExtraRussianBase ;
12454: CALL 3366 0 0
// wait ( 0 0$2 ) ;
12458: LD_INT 70
12460: PPUSH
12461: CALL_OW 67
// InGameOff ;
12465: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
12469: LD_STRING M6
12471: PPUSH
12472: CALL_OW 337
// if Count ( UnitFilter ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] , [ f_ok ] ) ) = Count ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] ) then
12476: LD_EXP 14
12480: PUSH
12481: LD_EXP 15
12485: PUSH
12486: LD_EXP 17
12490: PUSH
12491: LD_EXP 18
12495: PUSH
12496: LD_EXP 20
12500: PUSH
12501: LD_EXP 21
12505: PUSH
12506: LD_EXP 22
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: PPUSH
12520: LD_INT 50
12522: PUSH
12523: EMPTY
12524: LIST
12525: PPUSH
12526: CALL_OW 72
12530: PPUSH
12531: CALL 17842 0 1
12535: PUSH
12536: LD_EXP 14
12540: PUSH
12541: LD_EXP 15
12545: PUSH
12546: LD_EXP 17
12550: PUSH
12551: LD_EXP 18
12555: PUSH
12556: LD_EXP 20
12560: PUSH
12561: LD_EXP 21
12565: PUSH
12566: LD_EXP 22
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL 17842 0 1
12584: EQUAL
12585: IFFALSE 12594
// SetAchievement ( ACH_KNIGHT ) ;
12587: LD_STRING ACH_KNIGHT
12589: PPUSH
12590: CALL_OW 543
// SaveForQuickRestart ;
12594: CALL_OW 22
// end ;
12598: LD_VAR 0 1
12602: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
12603: LD_EXP 5
12607: IFFALSE 12620
12609: PUSH
12610: LD_EXP 33
12614: PPUSH
12615: CALL_OW 302
12619: AND
12620: IFFALSE 12633
12622: PUSH
12623: LD_EXP 13
12627: PPUSH
12628: CALL_OW 302
12632: AND
12633: IFFALSE 12704
12635: PUSH
12636: LD_EXP 13
12640: PPUSH
12641: LD_EXP 33
12645: PPUSH
12646: CALL_OW 296
12650: PUSH
12651: LD_INT 9
12653: LESS
12654: IFTRUE 12703
12656: PUSH
12657: LD_INT 22
12659: PUSH
12660: LD_INT 2
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 91
12669: PUSH
12670: LD_EXP 13
12674: PUSH
12675: LD_INT 7
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 21
12685: PUSH
12686: LD_INT 3
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: PPUSH
12698: CALL_OW 69
12702: OR
12703: AND
12704: IFFALSE 12858
12706: GO 12708
12708: DISABLE
// begin ComExit ( Rolf ) ;
12709: LD_EXP 33
12713: PPUSH
12714: CALL 54216 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
12718: LD_EXP 33
12722: PPUSH
12723: LD_EXP 13
12727: PPUSH
12728: CALL_OW 172
// InGameOn ;
12732: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
12736: LD_EXP 13
12740: PPUSH
12741: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
12745: LD_EXP 33
12749: PPUSH
12750: LD_STRING DRf-Reunion-1
12752: PPUSH
12753: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
12757: LD_EXP 33
12761: PPUSH
12762: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
12766: LD_EXP 13
12770: PPUSH
12771: LD_EXP 33
12775: PPUSH
12776: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
12780: LD_EXP 33
12784: PPUSH
12785: LD_EXP 13
12789: PPUSH
12790: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
12794: LD_EXP 13
12798: PPUSH
12799: LD_STRING DH-Reunion-2
12801: PPUSH
12802: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
12806: LD_EXP 33
12810: PPUSH
12811: LD_STRING DRf-Reunion-3
12813: PPUSH
12814: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
12818: LD_EXP 13
12822: PPUSH
12823: LD_STRING DH-Reunion-4
12825: PPUSH
12826: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
12830: LD_EXP 33
12834: PPUSH
12835: LD_STRING DRf-Reunion-5
12837: PPUSH
12838: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
12842: LD_EXP 13
12846: PPUSH
12847: LD_STRING DH-Reunion-6
12849: PPUSH
12850: CALL_OW 88
// InGameOff ;
12854: CALL_OW 9
// end ;
12858: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
12859: LD_EXP 5
12863: NOT
12864: IFFALSE 12913
12866: PUSH
12867: LD_INT 22
12869: PUSH
12870: LD_INT 2
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 91
12879: PUSH
12880: LD_EXP 24
12884: PUSH
12885: LD_INT 10
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 21
12895: PUSH
12896: LD_INT 3
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: LIST
12907: PPUSH
12908: CALL_OW 69
12912: AND
12913: IFFALSE 13702
12915: GO 12917
12917: DISABLE
// begin InGameOn ;
12918: CALL_OW 8
// ComExit ( Schulz ) ;
12922: LD_EXP 24
12926: PPUSH
12927: CALL 54216 0 1
// CenterNowOnUnits ( Schulz ) ;
12931: LD_EXP 24
12935: PPUSH
12936: CALL_OW 87
// wait ( 0 0$0.3 ) ;
12940: LD_INT 10
12942: PPUSH
12943: CALL_OW 67
// DialogueOn ;
12947: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
12951: LD_EXP 24
12955: PPUSH
12956: LD_STRING DL-Def-1
12958: PPUSH
12959: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
12963: LD_EXP 24
12967: PPUSH
12968: LD_STRING DL-Def-2
12970: PPUSH
12971: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
12975: LD_EXP 24
12979: PPUSH
12980: LD_STRING DL-Def-3
12982: PPUSH
12983: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
12987: LD_EXP 25
12991: PPUSH
12992: CALL_OW 302
12996: IFFALSE 13009
12998: PUSH
12999: LD_EXP 23
13003: PPUSH
13004: CALL_OW 302
13008: AND
13009: IFFALSE 13356
// begin Say ( Basim , DBs-Def-4 ) ;
13011: LD_EXP 25
13015: PPUSH
13016: LD_STRING DBs-Def-4
13018: PPUSH
13019: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13023: LD_EXP 25
13027: PPUSH
13028: LD_STRING DBs-Def-5
13030: PPUSH
13031: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
13035: LD_EXP 23
13039: PPUSH
13040: LD_STRING DA-Def-6
13042: PPUSH
13043: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
13047: LD_EXP 25
13051: PPUSH
13052: LD_STRING DBs-Def-7
13054: PPUSH
13055: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
13059: LD_EXP 23
13063: PPUSH
13064: LD_STRING DA-Def-8
13066: PPUSH
13067: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
13071: LD_EXP 23
13075: PPUSH
13076: LD_STRING DA-Def-9
13078: PPUSH
13079: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
13083: LD_EXP 25
13087: PPUSH
13088: LD_STRING DBs-Def-10
13090: PPUSH
13091: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
13095: LD_EXP 23
13099: PPUSH
13100: LD_STRING DA-Def-11
13102: PPUSH
13103: CALL_OW 88
// if Query ( QTech ) = 1 then
13107: LD_STRING QTech
13109: PPUSH
13110: CALL_OW 97
13114: PUSH
13115: LD_INT 1
13117: EQUAL
13118: IFFALSE 13226
// begin Say ( Schulz , DL-Tech-1 ) ;
13120: LD_EXP 24
13124: PPUSH
13125: LD_STRING DL-Tech-1
13127: PPUSH
13128: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
13132: LD_EXP 24
13136: PPUSH
13137: LD_STRING DL-Tech-2
13139: PPUSH
13140: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
13144: LD_EXP 23
13148: PPUSH
13149: LD_STRING DA-Tech-3
13151: PPUSH
13152: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
13156: LD_EXP 18
13160: PPUSH
13161: LD_STRING DK-Tech-4
13163: PPUSH
13164: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
13168: LD_EXP 18
13172: PPUSH
13173: LD_STRING DK-Tech-5
13175: PPUSH
13176: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
13180: LD_EXP 25
13184: PPUSH
13185: LD_STRING DBs-Tech-6
13187: PPUSH
13188: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
13192: LD_EXP 18
13196: PPUSH
13197: LD_STRING DK-Tech-7
13199: PPUSH
13200: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
13204: LD_INT 3
13206: PPUSH
13207: LD_INT 2
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
13217: LD_STRING M7a
13219: PPUSH
13220: CALL_OW 604
// end else
13224: GO 13354
// begin Say ( Schulz , DL-Tech-a-1 ) ;
13226: LD_EXP 24
13230: PPUSH
13231: LD_STRING DL-Tech-a-1
13233: PPUSH
13234: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
13238: LD_EXP 24
13242: PPUSH
13243: LD_STRING DL-Tech-a-2
13245: PPUSH
13246: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
13250: LD_EXP 25
13254: PPUSH
13255: LD_STRING DBs-Tech-a-3
13257: PPUSH
13258: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
13262: LD_EXP 18
13266: PPUSH
13267: LD_STRING DK-Tech-a-4
13269: PPUSH
13270: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
13274: LD_EXP 18
13278: PPUSH
13279: LD_STRING DK-Tech-a-5
13281: PPUSH
13282: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
13286: LD_EXP 23
13290: PPUSH
13291: LD_STRING DA-Tech-a-6
13293: PPUSH
13294: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
13298: LD_EXP 23
13302: PPUSH
13303: LD_STRING DA-Tech-a-7
13305: PPUSH
13306: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
13310: LD_EXP 24
13314: PPUSH
13315: LD_STRING DL-Tech-a-8
13317: PPUSH
13318: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
13322: LD_EXP 23
13326: PPUSH
13327: LD_STRING DA-Tech-a-9
13329: PPUSH
13330: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13334: LD_INT 4
13336: PPUSH
13337: LD_INT 2
13339: PPUSH
13340: LD_INT 1
13342: PPUSH
13343: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
13347: LD_STRING M7b
13349: PPUSH
13350: CALL_OW 604
// end ; end else
13354: GO 13404
// if IsOk ( Basim ) then
13356: LD_EXP 25
13360: PPUSH
13361: CALL_OW 302
13365: IFFALSE 13404
// begin Say ( Basim , DBs-Def-4 ) ;
13367: LD_EXP 25
13371: PPUSH
13372: LD_STRING DBs-Def-4
13374: PPUSH
13375: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13379: LD_EXP 25
13383: PPUSH
13384: LD_STRING DBs-Def-5
13386: PPUSH
13387: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13391: LD_INT 4
13393: PPUSH
13394: LD_INT 2
13396: PPUSH
13397: LD_INT 1
13399: PPUSH
13400: CALL_OW 322
// end ; DialogueOff ;
13404: CALL_OW 7
// InGameOff ;
13408: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
13412: LD_STRING M7
13414: PPUSH
13415: CALL_OW 337
// playerInBase := true ;
13419: LD_ADDR_EXP 5
13423: PUSH
13424: LD_INT 1
13426: ST_TO_ADDR
// wait ( 0 0$30 ) ;
13427: LD_INT 1050
13429: PPUSH
13430: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13434: LD_INT 35
13436: PPUSH
13437: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) ;
13441: LD_INT 22
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 50
13453: PUSH
13454: EMPTY
13455: LIST
13456: PUSH
13457: LD_INT 3
13459: PUSH
13460: LD_INT 57
13462: PUSH
13463: EMPTY
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 30
13472: PUSH
13473: LD_INT 30
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: PPUSH
13486: CALL_OW 69
13490: IFFALSE 13434
// if IsOk ( Kurt ) then
13492: LD_EXP 22
13496: PPUSH
13497: CALL_OW 302
13501: IFFALSE 13689
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
13503: LD_INT 22
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 50
13515: PUSH
13516: EMPTY
13517: LIST
13518: PUSH
13519: LD_INT 3
13521: PUSH
13522: LD_INT 57
13524: PUSH
13525: EMPTY
13526: LIST
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 30
13534: PUSH
13535: LD_INT 30
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: PPUSH
13548: CALL_OW 69
13552: PUSH
13553: LD_INT 1
13555: ARRAY
13556: PPUSH
13557: CALL_OW 87
// DialogueOn ;
13561: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
13565: LD_EXP 22
13569: PPUSH
13570: LD_STRING DKs-Med-1
13572: PPUSH
13573: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
13577: LD_EXP 22
13581: PPUSH
13582: LD_STRING DKs-Med-2
13584: PPUSH
13585: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
13589: LD_EXP 24
13593: PPUSH
13594: LD_STRING DL-Med-3
13596: PPUSH
13597: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
13601: LD_EXP 24
13605: PPUSH
13606: LD_STRING DL-Med-4
13608: PPUSH
13609: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
13613: LD_EXP 22
13617: PPUSH
13618: LD_STRING DKs-Med-5
13620: PPUSH
13621: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
13625: LD_EXP 22
13629: PPUSH
13630: LD_STRING DKs-Med-6
13632: PPUSH
13633: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
13637: LD_EXP 22
13641: PPUSH
13642: LD_STRING DKs-Med-7
13644: PPUSH
13645: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
13649: LD_EXP 22
13653: PPUSH
13654: LD_STRING DKs-Med-8
13656: PPUSH
13657: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
13661: LD_EXP 24
13665: PPUSH
13666: LD_STRING DL-Med-9
13668: PPUSH
13669: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
13673: LD_EXP 24
13677: PPUSH
13678: LD_STRING DL-Med-10
13680: PPUSH
13681: CALL_OW 88
// DialogueOff ;
13685: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
13689: LD_STRING M8-
13691: PUSH
13692: LD_OWVAR 67
13696: STR
13697: PPUSH
13698: CALL_OW 337
// end ;
13702: END
// every 0 0$1 trigger playerInBase do
13703: LD_EXP 5
13707: IFFALSE 13727
13709: GO 13711
13711: DISABLE
// begin enable ;
13712: ENABLE
// missionTime := missionTime + 0 0$1 ;
13713: LD_ADDR_EXP 9
13717: PUSH
13718: LD_EXP 9
13722: PUSH
13723: LD_INT 35
13725: PLUS
13726: ST_TO_ADDR
// end ;
13727: END
// every 0 0$2 trigger playerInBase and apeDriver do
13728: LD_EXP 5
13732: IFFALSE 13740
13734: PUSH
13735: LD_EXP 8
13739: AND
13740: IFFALSE 14137
13742: GO 13744
13744: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
13745: LD_STRING M7a_out
13747: PPUSH
13748: CALL_OW 337
// wait ( 0 0$2 ) ;
13752: LD_INT 70
13754: PPUSH
13755: CALL_OW 67
// DialogueOn ;
13759: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
13763: LD_INT 22
13765: PUSH
13766: LD_INT 2
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 33
13775: PUSH
13776: LD_INT 5
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PPUSH
13787: CALL_OW 69
13791: PUSH
13792: LD_INT 1
13794: ARRAY
13795: PPUSH
13796: CALL_OW 87
// if IsOk ( Mia ) then
13800: LD_EXP 27
13804: PPUSH
13805: CALL_OW 302
13809: IFFALSE 13835
// begin Say ( Mia , DMm-Apedrive-1 ) ;
13811: LD_EXP 27
13815: PPUSH
13816: LD_STRING DMm-Apedrive-1
13818: PPUSH
13819: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
13823: LD_EXP 15
13827: PPUSH
13828: LD_STRING DM-Apedrive-2
13830: PPUSH
13831: CALL_OW 88
// end ; if IsOk ( Jenna ) then
13835: LD_EXP 29
13839: PPUSH
13840: CALL_OW 302
13844: IFFALSE 14133
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
13846: LD_EXP 29
13850: PPUSH
13851: LD_STRING DJm-Apedrive-3
13853: PPUSH
13854: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
13858: LD_EXP 29
13862: PPUSH
13863: LD_STRING DJm-Apedrive-4
13865: PPUSH
13866: CALL_OW 88
// if IsOk ( Basim ) then
13870: LD_EXP 25
13874: PPUSH
13875: CALL_OW 302
13879: IFFALSE 14133
// begin Say ( Basim , DBs-Apedrive-5 ) ;
13881: LD_EXP 25
13885: PPUSH
13886: LD_STRING DBs-Apedrive-5
13888: PPUSH
13889: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
13893: LD_EXP 25
13897: PPUSH
13898: LD_STRING DBs-Apedrive-6
13900: PPUSH
13901: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
13905: LD_EXP 29
13909: PPUSH
13910: LD_STRING DJm-Apedrive-7
13912: PPUSH
13913: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
13917: LD_EXP 25
13921: PPUSH
13922: LD_STRING DBs-Apedrive-8
13924: PPUSH
13925: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
13929: LD_EXP 29
13933: PPUSH
13934: LD_STRING DJm-Apedrive-9
13936: PPUSH
13937: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
13941: LD_EXP 25
13945: PPUSH
13946: LD_STRING DBs-Apedrive-10
13948: PPUSH
13949: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
13953: LD_EXP 29
13957: PPUSH
13958: LD_STRING DJm-Apedrive-11
13960: PPUSH
13961: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
13965: LD_EXP 18
13969: PPUSH
13970: LD_STRING DK-Apedrive-12
13972: PPUSH
13973: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
13977: LD_EXP 29
13981: PPUSH
13982: LD_STRING DJm-Apedrive-13
13984: PPUSH
13985: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
13989: LD_EXP 29
13993: PPUSH
13994: LD_STRING DJm-Apedrive-14
13996: PPUSH
13997: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
14001: LD_EXP 29
14005: PPUSH
14006: LD_STRING DJm-Apedrive-15
14008: PPUSH
14009: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
14013: LD_EXP 29
14017: PPUSH
14018: LD_STRING DJm-Apedrive-16
14020: PPUSH
14021: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
14025: LD_EXP 27
14029: PPUSH
14030: LD_STRING DMm-Apedrive-17
14032: PPUSH
14033: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
14037: LD_EXP 27
14041: PPUSH
14042: LD_STRING DMm-Apedrive-18
14044: PPUSH
14045: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
14049: LD_EXP 27
14053: PPUSH
14054: LD_STRING DMm-Apedrive-19
14056: PPUSH
14057: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
14061: LD_EXP 27
14065: PPUSH
14066: LD_STRING DMm-Apedrive-20
14068: PPUSH
14069: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
14073: LD_EXP 18
14077: PPUSH
14078: LD_STRING DK-Apedrive-21
14080: PPUSH
14081: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
14085: LD_EXP 18
14089: PPUSH
14090: LD_STRING DK-Apedrive-22
14092: PPUSH
14093: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
14097: LD_EXP 13
14101: PPUSH
14102: LD_STRING DH-Apedrive-23
14104: PPUSH
14105: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
14109: LD_EXP 26
14113: PPUSH
14114: LD_STRING DLt-Apedrive-24
14116: PPUSH
14117: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
14121: LD_EXP 26
14125: PPUSH
14126: LD_STRING DLt-Apedrive-25
14128: PPUSH
14129: CALL_OW 88
// end ; end ; DialogueOff ;
14133: CALL_OW 7
// end ;
14137: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
14138: LD_EXP 5
14142: IFFALSE 14150
14144: PUSH
14145: LD_EXP 6
14149: AND
14150: IFFALSE 14162
14152: GO 14154
14154: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
14155: LD_STRING M7b_out
14157: PPUSH
14158: CALL_OW 337
14162: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
14163: LD_EXP 5
14167: IFFALSE 14213
14169: PUSH
14170: LD_INT 22
14172: PUSH
14173: LD_INT 2
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 30
14182: PUSH
14183: LD_INT 3
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 3
14192: PUSH
14193: LD_INT 58
14195: PUSH
14196: EMPTY
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: PPUSH
14208: CALL_OW 69
14212: AND
14213: IFFALSE 14226
14215: PUSH
14216: LD_EXP 13
14220: PPUSH
14221: CALL_OW 302
14225: AND
14226: IFFALSE 14239
14228: PUSH
14229: LD_EXP 24
14233: PPUSH
14234: CALL_OW 302
14238: AND
14239: IFFALSE 14412
14241: GO 14243
14243: DISABLE
// begin DialogueOn ;
14244: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
14248: LD_EXP 24
14252: PPUSH
14253: LD_STRING DL-Mort-1
14255: PPUSH
14256: CALL_OW 88
// if IsOk ( Markov ) then
14260: LD_EXP 20
14264: PPUSH
14265: CALL_OW 302
14269: IFFALSE 14322
// begin Say ( Heike , DH-Mort-2 ) ;
14271: LD_EXP 13
14275: PPUSH
14276: LD_STRING DH-Mort-2
14278: PPUSH
14279: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
14283: LD_EXP 20
14287: PPUSH
14288: LD_STRING DMar-Mort-3
14290: PPUSH
14291: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
14295: LD_EXP 20
14299: PPUSH
14300: LD_STRING DMar-Mort-4
14302: PPUSH
14303: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14307: LD_INT 88
14309: PPUSH
14310: LD_INT 2
14312: PPUSH
14313: LD_INT 1
14315: PPUSH
14316: CALL_OW 322
// end else
14320: GO 14408
// if IsOk ( Olaf ) then
14322: LD_EXP 21
14326: PPUSH
14327: CALL_OW 302
14331: IFFALSE 14384
// begin Say ( Heike , DH-Mort-a-2 ) ;
14333: LD_EXP 13
14337: PPUSH
14338: LD_STRING DH-Mort-a-2
14340: PPUSH
14341: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
14345: LD_EXP 21
14349: PPUSH
14350: LD_STRING DO-Mort-a-3
14352: PPUSH
14353: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
14357: LD_EXP 21
14361: PPUSH
14362: LD_STRING DO-Mort-a-4
14364: PPUSH
14365: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14369: LD_INT 88
14371: PPUSH
14372: LD_INT 2
14374: PPUSH
14375: LD_INT 1
14377: PPUSH
14378: CALL_OW 322
// end else
14382: GO 14408
// begin Say ( Heike , DH-Mort-a-5 ) ;
14384: LD_EXP 13
14388: PPUSH
14389: LD_STRING DH-Mort-a-5
14391: PPUSH
14392: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
14396: LD_EXP 13
14400: PPUSH
14401: LD_STRING DH-Mort-a-6
14403: PPUSH
14404: CALL_OW 88
// end ; DialogueOff ;
14408: CALL_OW 7
// end ;
14412: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
14413: LD_EXP 18
14417: PPUSH
14418: CALL_OW 256
14422: PUSH
14423: LD_INT 10
14425: LESS
14426: IFFALSE 14528
14428: GO 14430
14430: DISABLE
// begin DialogueOn ;
14431: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14435: LD_EXP 18
14439: PPUSH
14440: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
14444: LD_EXP 18
14448: PPUSH
14449: LD_STRING DK-Death-1
14451: PPUSH
14452: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
14456: LD_EXP 18
14460: PPUSH
14461: LD_STRING DK-Death-2
14463: PPUSH
14464: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
14468: LD_EXP 18
14472: PPUSH
14473: LD_STRING DK-Death-3
14475: PPUSH
14476: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
14480: LD_EXP 13
14484: PPUSH
14485: LD_STRING DH-Death-4
14487: PPUSH
14488: CALL_OW 88
// if IsOk ( Markov ) then
14492: LD_EXP 20
14496: PPUSH
14497: CALL_OW 302
14501: IFFALSE 14515
// Say ( Markov , DMar-Death-5 ) ;
14503: LD_EXP 20
14507: PPUSH
14508: LD_STRING DMar-Death-5
14510: PPUSH
14511: CALL_OW 88
// DialogueOff ;
14515: CALL_OW 7
// KillUnit ( Kaia ) ;
14519: LD_EXP 18
14523: PPUSH
14524: CALL_OW 66
// end ;
14528: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib , m1 , m2 , m3 ;
14529: LD_EXP 10
14533: IFFALSE 14562
14535: PUSH
14536: LD_INT 81
14538: PUSH
14539: LD_INT 2
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: LD_INT 50
14548: PUSH
14549: EMPTY
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PPUSH
14556: CALL_OW 69
14560: NOT
14561: AND
14562: IFFALSE 15507
14564: GO 14566
14566: DISABLE
14567: LD_INT 0
14569: PPUSH
14570: PPUSH
14571: PPUSH
14572: PPUSH
14573: PPUSH
// begin m1 := false ;
14574: LD_ADDR_VAR 0 3
14578: PUSH
14579: LD_INT 0
14581: ST_TO_ADDR
// m2 := false ;
14582: LD_ADDR_VAR 0 4
14586: PUSH
14587: LD_INT 0
14589: ST_TO_ADDR
// m3 := false ;
14590: LD_ADDR_VAR 0 5
14594: PUSH
14595: LD_INT 0
14597: ST_TO_ADDR
// InGameOn ;
14598: CALL_OW 8
// DialogueOn ;
14602: CALL_OW 6
// if time09 + time09c + tick < 80 80$00 then
14606: LD_EXP 3
14610: PUSH
14611: LD_EXP 4
14615: PLUS
14616: PUSH
14617: LD_OWVAR 1
14621: PLUS
14622: PUSH
14623: LD_INT 168000
14625: LESS
14626: IFFALSE 14635
// SetAchievement ( ACH_HSPEED_9 ) ;
14628: LD_STRING ACH_HSPEED_9
14630: PPUSH
14631: CALL_OW 543
// CenterOnNow ( Schulz ) ;
14635: LD_EXP 24
14639: PPUSH
14640: CALL 58097 0 1
// dwait ( 0 0$0.3 ) ;
14644: LD_INT 10
14646: PPUSH
14647: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
14651: LD_EXP 24
14655: PPUSH
14656: LD_STRING DL-End-1
14658: PPUSH
14659: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
14663: LD_EXP 13
14667: PPUSH
14668: LD_STRING DH-End-2
14670: PPUSH
14671: CALL_OW 88
// if IsOk ( Kaia ) then
14675: LD_EXP 18
14679: PPUSH
14680: CALL_OW 302
14684: IFFALSE 14746
// begin SaveCharacters ( Kaia , 09_Kaia ) ;
14686: LD_EXP 18
14690: PPUSH
14691: LD_STRING 09_Kaia
14693: PPUSH
14694: CALL_OW 38
// Say ( Kaia , DK-End-a-3 ) ;
14698: LD_EXP 18
14702: PPUSH
14703: LD_STRING DK-End-a-3
14705: PPUSH
14706: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
14710: LD_EXP 18
14714: PPUSH
14715: LD_STRING DK-End-a-4
14717: PPUSH
14718: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
14722: LD_EXP 24
14726: PPUSH
14727: LD_STRING DL-End-a-5
14729: PPUSH
14730: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
14734: LD_EXP 24
14738: PPUSH
14739: LD_STRING DL-End-a-6
14741: PPUSH
14742: CALL_OW 88
// end ; SaveCharacters ( Heike , 09_Heike ) ;
14746: LD_EXP 13
14750: PPUSH
14751: LD_STRING 09_Heike
14753: PPUSH
14754: CALL_OW 38
// SaveCharacters ( Schulz , 09_Schulz ) ;
14758: LD_EXP 24
14762: PPUSH
14763: LD_STRING 09_Schulz
14765: PPUSH
14766: CALL_OW 38
// if IsOk ( Basim ) then
14770: LD_EXP 25
14774: PPUSH
14775: CALL_OW 302
14779: IFFALSE 14793
// SaveCharacters ( Basim , 09_Basim ) ;
14781: LD_EXP 25
14785: PPUSH
14786: LD_STRING 09_Basim
14788: PPUSH
14789: CALL_OW 38
// if IsOk ( Givi ) then
14793: LD_EXP 14
14797: PPUSH
14798: CALL_OW 302
14802: IFFALSE 14816
// SaveCharacters ( Givi , 09_Givi ) ;
14804: LD_EXP 14
14808: PPUSH
14809: LD_STRING 09_Givi
14811: PPUSH
14812: CALL_OW 38
// if IsOk ( Mike ) then
14816: LD_EXP 15
14820: PPUSH
14821: CALL_OW 302
14825: IFFALSE 14839
// SaveCharacters ( Mike , 09_Mike ) ;
14827: LD_EXP 15
14831: PPUSH
14832: LD_STRING 09_Mike
14834: PPUSH
14835: CALL_OW 38
// if IsOk ( Ibrahim ) then
14839: LD_EXP 16
14843: PPUSH
14844: CALL_OW 302
14848: IFFALSE 14862
// SaveCharacters ( Ibrahim , 09_Ibrahim ) ;
14850: LD_EXP 16
14854: PPUSH
14855: LD_STRING 09_Ibrahim
14857: PPUSH
14858: CALL_OW 38
// if IsOk ( Kamil ) then
14862: LD_EXP 17
14866: PPUSH
14867: CALL_OW 302
14871: IFFALSE 14885
// SaveCharacters ( Kamil , 09_Kamil ) ;
14873: LD_EXP 17
14877: PPUSH
14878: LD_STRING 09_Kamil
14880: PPUSH
14881: CALL_OW 38
// if IsOk ( Sophia ) then
14885: LD_EXP 19
14889: PPUSH
14890: CALL_OW 302
14894: IFFALSE 14908
// SaveCharacters ( Sophia , 09_Sophia ) ;
14896: LD_EXP 19
14900: PPUSH
14901: LD_STRING 09_Sophia
14903: PPUSH
14904: CALL_OW 38
// if IsOk ( Markov ) then
14908: LD_EXP 20
14912: PPUSH
14913: CALL_OW 302
14917: IFFALSE 14931
// SaveCharacters ( Markov , 09_Markov ) ;
14919: LD_EXP 20
14923: PPUSH
14924: LD_STRING 09_Markov
14926: PPUSH
14927: CALL_OW 38
// if IsOk ( Olaf ) then
14931: LD_EXP 21
14935: PPUSH
14936: CALL_OW 302
14940: IFFALSE 14954
// SaveCharacters ( Olaf , 09_Olaf ) ;
14942: LD_EXP 21
14946: PPUSH
14947: LD_STRING 09_Olaf
14949: PPUSH
14950: CALL_OW 38
// if IsOk ( Kurt ) then
14954: LD_EXP 22
14958: PPUSH
14959: CALL_OW 302
14963: IFFALSE 14977
// SaveCharacters ( Kurt , 09_Kurt ) ;
14965: LD_EXP 22
14969: PPUSH
14970: LD_STRING 09_Kurt
14972: PPUSH
14973: CALL_OW 38
// if IsOk ( Aviradze ) then
14977: LD_EXP 23
14981: PPUSH
14982: CALL_OW 302
14986: IFFALSE 15000
// SaveCharacters ( Aviradze , 09_Aviradze ) ;
14988: LD_EXP 23
14992: PPUSH
14993: LD_STRING 09_Aviradze
14995: PPUSH
14996: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09_heikeSecondSquad ) ;
15000: LD_EXP 30
15004: PPUSH
15005: LD_INT 50
15007: PUSH
15008: EMPTY
15009: LIST
15010: PPUSH
15011: CALL_OW 72
15015: PPUSH
15016: LD_STRING 09_heikeSecondSquad
15018: PPUSH
15019: CALL_OW 38
// if GetTech ( tech_apeBrain , 2 ) = state_researched then
15023: LD_INT 4
15025: PPUSH
15026: LD_INT 2
15028: PPUSH
15029: CALL_OW 321
15033: PUSH
15034: LD_INT 2
15036: EQUAL
15037: IFFALSE 15049
// SaveVariable ( 1 , 09_ApeBrain ) ;
15039: LD_INT 1
15041: PPUSH
15042: LD_STRING 09_ApeBrain
15044: PPUSH
15045: CALL_OW 39
// if GetTech ( tech_apeNeural , 2 ) = state_researched then
15049: LD_INT 3
15051: PPUSH
15052: LD_INT 2
15054: PPUSH
15055: CALL_OW 321
15059: PUSH
15060: LD_INT 2
15062: EQUAL
15063: IFFALSE 15075
// SaveVariable ( 1 , 09_ApeNeural ) ;
15065: LD_INT 1
15067: PPUSH
15068: LD_STRING 09_ApeNeural
15070: PPUSH
15071: CALL_OW 39
// sib := 0 ;
15075: LD_ADDR_VAR 0 2
15079: PUSH
15080: LD_INT 0
15082: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
15083: LD_ADDR_VAR 0 1
15087: PUSH
15088: LD_INT 22
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 2
15100: PUSH
15101: LD_INT 30
15103: PUSH
15104: LD_INT 0
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 30
15113: PUSH
15114: LD_INT 1
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PPUSH
15130: CALL_OW 69
15134: PUSH
15135: FOR_IN
15136: IFFALSE 15169
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
15138: LD_ADDR_VAR 0 2
15142: PUSH
15143: LD_VAR 0 2
15147: PUSH
15148: LD_VAR 0 1
15152: PPUSH
15153: CALL_OW 274
15157: PPUSH
15158: LD_INT 3
15160: PPUSH
15161: CALL_OW 275
15165: PLUS
15166: ST_TO_ADDR
15167: GO 15135
15169: POP
15170: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
15171: LD_ADDR_VAR 0 1
15175: PUSH
15176: LD_INT 22
15178: PUSH
15179: LD_INT 2
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 2
15188: PUSH
15189: LD_INT 34
15191: PUSH
15192: LD_INT 32
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 34
15201: PUSH
15202: LD_INT 51
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PPUSH
15218: CALL_OW 69
15222: PUSH
15223: FOR_IN
15224: IFFALSE 15252
// sib := sib + GetCargo ( i , mat_siberit ) ;
15226: LD_ADDR_VAR 0 2
15230: PUSH
15231: LD_VAR 0 2
15235: PUSH
15236: LD_VAR 0 1
15240: PPUSH
15241: LD_INT 3
15243: PPUSH
15244: CALL_OW 289
15248: PLUS
15249: ST_TO_ADDR
15250: GO 15223
15252: POP
15253: POP
// if sib >= sibToCollect then
15254: LD_VAR 0 2
15258: PUSH
15259: LD_EXP 7
15263: GREATEREQUAL
15264: IFFALSE 15286
// begin m1 := true ;
15266: LD_ADDR_VAR 0 3
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
15274: LD_STRING med1
15276: PPUSH
15277: LD_INT 1
15279: PPUSH
15280: CALL_OW 101
// end else
15284: GO 15297
// AddMedal ( med1 , - 1 ) ;
15286: LD_STRING med1
15288: PPUSH
15289: LD_INT 1
15291: NEG
15292: PPUSH
15293: CALL_OW 101
// if apeDriver or kamikazeTrained then
15297: LD_EXP 8
15301: IFTRUE 15309
15303: PUSH
15304: LD_EXP 6
15308: OR
15309: IFFALSE 15331
// begin m2 := true ;
15311: LD_ADDR_VAR 0 4
15315: PUSH
15316: LD_INT 1
15318: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
15319: LD_STRING med2
15321: PPUSH
15322: LD_INT 1
15324: PPUSH
15325: CALL_OW 101
// end else
15329: GO 15342
// AddMedal ( med2 , - 1 ) ;
15331: LD_STRING med2
15333: PPUSH
15334: LD_INT 1
15336: NEG
15337: PPUSH
15338: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
15342: LD_EXP 14
15346: PUSH
15347: LD_EXP 15
15351: PUSH
15352: LD_EXP 16
15356: PUSH
15357: LD_EXP 17
15361: PUSH
15362: LD_EXP 18
15366: PUSH
15367: LD_EXP 19
15371: PUSH
15372: LD_EXP 20
15376: PUSH
15377: LD_EXP 21
15381: PUSH
15382: LD_EXP 22
15386: PUSH
15387: LD_EXP 23
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: LD_INT 50
15406: PUSH
15407: EMPTY
15408: LIST
15409: PPUSH
15410: CALL_OW 72
15414: NOT
15415: IFFALSE 15430
// AddMedal ( med3 , - 1 ) else
15417: LD_STRING med3
15419: PPUSH
15420: LD_INT 1
15422: NEG
15423: PPUSH
15424: CALL_OW 101
15428: GO 15448
// begin m3 := true ;
15430: LD_ADDR_VAR 0 5
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
15438: LD_STRING med3
15440: PPUSH
15441: LD_INT 1
15443: PPUSH
15444: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
15448: LD_VAR 0 3
15452: IFFALSE 15460
15454: PUSH
15455: LD_VAR 0 4
15459: AND
15460: IFFALSE 15468
15462: PUSH
15463: LD_VAR 0 5
15467: AND
15468: IFFALSE 15480
15470: PUSH
15471: LD_OWVAR 67
15475: PUSH
15476: LD_INT 3
15478: GREATEREQUAL
15479: AND
15480: IFFALSE 15492
// SetAchievementEX ( ACH_ARES , 9 ) ;
15482: LD_STRING ACH_ARES
15484: PPUSH
15485: LD_INT 9
15487: PPUSH
15488: CALL_OW 564
// GiveMedals ( MAIN ) ;
15492: LD_STRING MAIN
15494: PPUSH
15495: CALL_OW 102
// YouWin ;
15499: CALL_OW 103
// DialogueOff ;
15503: CALL_OW 7
// end ; end_of_file
15507: PPOPN 5
15509: END
// every 0 0$25 + 0 0$20 trigger playerInBase do var i , tmp ;
15510: LD_EXP 5
15514: IFFALSE 15615
15516: GO 15518
15518: DISABLE
15519: LD_INT 0
15521: PPUSH
15522: PPUSH
// begin enable ;
15523: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
15524: LD_ADDR_VAR 0 2
15528: PUSH
15529: LD_INT 9
15531: PUSH
15532: LD_INT 10
15534: PUSH
15535: LD_INT 11
15537: PUSH
15538: LD_INT 12
15540: PUSH
15541: LD_INT 13
15543: PUSH
15544: LD_INT 14
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
15555: LD_ADDR_VAR 0 1
15559: PUSH
15560: LD_VAR 0 2
15564: PUSH
15565: LD_INT 1
15567: PPUSH
15568: LD_INT 6
15570: PPUSH
15571: CALL_OW 12
15575: ARRAY
15576: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 16 then
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 435
15586: PUSH
15587: LD_INT 16
15589: LESS
15590: IFFALSE 15615
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
15592: LD_INT 1
15594: PPUSH
15595: LD_INT 5
15597: PPUSH
15598: CALL_OW 12
15602: PPUSH
15603: LD_VAR 0 1
15607: PPUSH
15608: LD_INT 1
15610: PPUSH
15611: CALL_OW 55
// end ; end_of_file
15615: PPOPN 2
15617: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15618: LD_INT 0
15620: PPUSH
15621: PPUSH
// if exist_mode then
15622: LD_VAR 0 2
15626: IFFALSE 15672
// begin unit := CreateCharacter ( prefix & ident ) ;
15628: LD_ADDR_VAR 0 5
15632: PUSH
15633: LD_VAR 0 3
15637: PUSH
15638: LD_VAR 0 1
15642: STR
15643: PPUSH
15644: CALL_OW 34
15648: ST_TO_ADDR
// if unit then
15649: LD_VAR 0 5
15653: IFFALSE 15670
// DeleteCharacters ( prefix & ident ) ;
15655: LD_VAR 0 3
15659: PUSH
15660: LD_VAR 0 1
15664: STR
15665: PPUSH
15666: CALL_OW 40
// end else
15670: GO 15687
// unit := NewCharacter ( ident ) ;
15672: LD_ADDR_VAR 0 5
15676: PUSH
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 25
15686: ST_TO_ADDR
// result := unit ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_VAR 0 5
15696: ST_TO_ADDR
// end ;
15697: LD_VAR 0 4
15701: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15702: LD_INT 0
15704: PPUSH
15705: PPUSH
// if exist_mode then
15706: LD_VAR 0 2
15710: IFFALSE 15735
// unit := CreateCharacter ( prefix & ident ) else
15712: LD_ADDR_VAR 0 5
15716: PUSH
15717: LD_VAR 0 3
15721: PUSH
15722: LD_VAR 0 1
15726: STR
15727: PPUSH
15728: CALL_OW 34
15732: ST_TO_ADDR
15733: GO 15750
// unit := NewCharacter ( ident ) ;
15735: LD_ADDR_VAR 0 5
15739: PUSH
15740: LD_VAR 0 1
15744: PPUSH
15745: CALL_OW 25
15749: ST_TO_ADDR
// result := unit ;
15750: LD_ADDR_VAR 0 4
15754: PUSH
15755: LD_VAR 0 5
15759: ST_TO_ADDR
// end ;
15760: LD_VAR 0 4
15764: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15765: LD_INT 0
15767: PPUSH
15768: PPUSH
// if not side or not nation then
15769: LD_VAR 0 1
15773: NOT
15774: IFTRUE 15783
15776: PUSH
15777: LD_VAR 0 2
15781: NOT
15782: OR
15783: IFFALSE 15787
// exit ;
15785: GO 16581
// case nation of nation_american :
15787: LD_VAR 0 2
15791: PUSH
15792: LD_INT 1
15794: DOUBLE
15795: EQUAL
15796: IFTRUE 15800
15798: GO 16022
15800: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
15801: LD_ADDR_VAR 0 4
15805: PUSH
15806: LD_INT 35
15808: PUSH
15809: LD_INT 45
15811: PUSH
15812: LD_INT 46
15814: PUSH
15815: LD_INT 47
15817: PUSH
15818: LD_INT 82
15820: PUSH
15821: LD_INT 83
15823: PUSH
15824: LD_INT 84
15826: PUSH
15827: LD_INT 85
15829: PUSH
15830: LD_INT 86
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: LD_INT 2
15838: PUSH
15839: LD_INT 6
15841: PUSH
15842: LD_INT 15
15844: PUSH
15845: LD_INT 16
15847: PUSH
15848: LD_INT 7
15850: PUSH
15851: LD_INT 12
15853: PUSH
15854: LD_INT 13
15856: PUSH
15857: LD_INT 10
15859: PUSH
15860: LD_INT 14
15862: PUSH
15863: LD_INT 20
15865: PUSH
15866: LD_INT 21
15868: PUSH
15869: LD_INT 22
15871: PUSH
15872: LD_INT 25
15874: PUSH
15875: LD_INT 32
15877: PUSH
15878: LD_INT 27
15880: PUSH
15881: LD_INT 36
15883: PUSH
15884: LD_INT 69
15886: PUSH
15887: LD_INT 39
15889: PUSH
15890: LD_INT 34
15892: PUSH
15893: LD_INT 40
15895: PUSH
15896: LD_INT 48
15898: PUSH
15899: LD_INT 49
15901: PUSH
15902: LD_INT 50
15904: PUSH
15905: LD_INT 51
15907: PUSH
15908: LD_INT 52
15910: PUSH
15911: LD_INT 53
15913: PUSH
15914: LD_INT 54
15916: PUSH
15917: LD_INT 55
15919: PUSH
15920: LD_INT 56
15922: PUSH
15923: LD_INT 57
15925: PUSH
15926: LD_INT 58
15928: PUSH
15929: LD_INT 59
15931: PUSH
15932: LD_INT 60
15934: PUSH
15935: LD_INT 61
15937: PUSH
15938: LD_INT 62
15940: PUSH
15941: LD_INT 80
15943: PUSH
15944: LD_INT 82
15946: PUSH
15947: LD_INT 83
15949: PUSH
15950: LD_INT 84
15952: PUSH
15953: LD_INT 85
15955: PUSH
15956: LD_INT 86
15958: PUSH
15959: LD_INT 90
15961: PUSH
15962: LD_INT 93
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: ST_TO_ADDR
16020: GO 16503
16022: LD_INT 2
16024: DOUBLE
16025: EQUAL
16026: IFTRUE 16030
16028: GO 16264
16030: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
16031: LD_ADDR_VAR 0 4
16035: PUSH
16036: LD_INT 35
16038: PUSH
16039: LD_INT 45
16041: PUSH
16042: LD_INT 46
16044: PUSH
16045: LD_INT 47
16047: PUSH
16048: LD_INT 82
16050: PUSH
16051: LD_INT 83
16053: PUSH
16054: LD_INT 84
16056: PUSH
16057: LD_INT 85
16059: PUSH
16060: LD_INT 87
16062: PUSH
16063: LD_INT 70
16065: PUSH
16066: LD_INT 1
16068: PUSH
16069: LD_INT 11
16071: PUSH
16072: LD_INT 3
16074: PUSH
16075: LD_INT 4
16077: PUSH
16078: LD_INT 5
16080: PUSH
16081: LD_INT 6
16083: PUSH
16084: LD_INT 15
16086: PUSH
16087: LD_INT 18
16089: PUSH
16090: LD_INT 7
16092: PUSH
16093: LD_INT 17
16095: PUSH
16096: LD_INT 8
16098: PUSH
16099: LD_INT 20
16101: PUSH
16102: LD_INT 21
16104: PUSH
16105: LD_INT 22
16107: PUSH
16108: LD_INT 72
16110: PUSH
16111: LD_INT 26
16113: PUSH
16114: LD_INT 69
16116: PUSH
16117: LD_INT 39
16119: PUSH
16120: LD_INT 40
16122: PUSH
16123: LD_INT 41
16125: PUSH
16126: LD_INT 42
16128: PUSH
16129: LD_INT 43
16131: PUSH
16132: LD_INT 48
16134: PUSH
16135: LD_INT 49
16137: PUSH
16138: LD_INT 50
16140: PUSH
16141: LD_INT 51
16143: PUSH
16144: LD_INT 52
16146: PUSH
16147: LD_INT 53
16149: PUSH
16150: LD_INT 54
16152: PUSH
16153: LD_INT 55
16155: PUSH
16156: LD_INT 56
16158: PUSH
16159: LD_INT 60
16161: PUSH
16162: LD_INT 61
16164: PUSH
16165: LD_INT 62
16167: PUSH
16168: LD_INT 66
16170: PUSH
16171: LD_INT 67
16173: PUSH
16174: LD_INT 68
16176: PUSH
16177: LD_INT 81
16179: PUSH
16180: LD_INT 82
16182: PUSH
16183: LD_INT 83
16185: PUSH
16186: LD_INT 84
16188: PUSH
16189: LD_INT 85
16191: PUSH
16192: LD_INT 87
16194: PUSH
16195: LD_INT 88
16197: PUSH
16198: LD_INT 92
16200: PUSH
16201: LD_INT 94
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: ST_TO_ADDR
16262: GO 16503
16264: LD_INT 3
16266: DOUBLE
16267: EQUAL
16268: IFTRUE 16272
16270: GO 16502
16272: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16273: LD_ADDR_VAR 0 4
16277: PUSH
16278: LD_INT 46
16280: PUSH
16281: LD_INT 47
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: LD_INT 82
16292: PUSH
16293: LD_INT 83
16295: PUSH
16296: LD_INT 84
16298: PUSH
16299: LD_INT 85
16301: PUSH
16302: LD_INT 86
16304: PUSH
16305: LD_INT 11
16307: PUSH
16308: LD_INT 9
16310: PUSH
16311: LD_INT 20
16313: PUSH
16314: LD_INT 19
16316: PUSH
16317: LD_INT 21
16319: PUSH
16320: LD_INT 24
16322: PUSH
16323: LD_INT 22
16325: PUSH
16326: LD_INT 25
16328: PUSH
16329: LD_INT 28
16331: PUSH
16332: LD_INT 29
16334: PUSH
16335: LD_INT 30
16337: PUSH
16338: LD_INT 31
16340: PUSH
16341: LD_INT 37
16343: PUSH
16344: LD_INT 38
16346: PUSH
16347: LD_INT 32
16349: PUSH
16350: LD_INT 27
16352: PUSH
16353: LD_INT 33
16355: PUSH
16356: LD_INT 69
16358: PUSH
16359: LD_INT 39
16361: PUSH
16362: LD_INT 34
16364: PUSH
16365: LD_INT 40
16367: PUSH
16368: LD_INT 71
16370: PUSH
16371: LD_INT 23
16373: PUSH
16374: LD_INT 44
16376: PUSH
16377: LD_INT 48
16379: PUSH
16380: LD_INT 49
16382: PUSH
16383: LD_INT 50
16385: PUSH
16386: LD_INT 51
16388: PUSH
16389: LD_INT 52
16391: PUSH
16392: LD_INT 53
16394: PUSH
16395: LD_INT 54
16397: PUSH
16398: LD_INT 55
16400: PUSH
16401: LD_INT 56
16403: PUSH
16404: LD_INT 57
16406: PUSH
16407: LD_INT 58
16409: PUSH
16410: LD_INT 59
16412: PUSH
16413: LD_INT 63
16415: PUSH
16416: LD_INT 64
16418: PUSH
16419: LD_INT 65
16421: PUSH
16422: LD_INT 82
16424: PUSH
16425: LD_INT 83
16427: PUSH
16428: LD_INT 84
16430: PUSH
16431: LD_INT 85
16433: PUSH
16434: LD_INT 86
16436: PUSH
16437: LD_INT 89
16439: PUSH
16440: LD_INT 91
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: ST_TO_ADDR
16500: GO 16503
16502: POP
// if state > - 1 and state < 3 then
16503: LD_VAR 0 3
16507: PUSH
16508: LD_INT 1
16510: NEG
16511: GREATER
16512: IFFALSE 16524
16514: PUSH
16515: LD_VAR 0 3
16519: PUSH
16520: LD_INT 3
16522: LESS
16523: AND
16524: IFFALSE 16581
// for i in result do
16526: LD_ADDR_VAR 0 5
16530: PUSH
16531: LD_VAR 0 4
16535: PUSH
16536: FOR_IN
16537: IFFALSE 16579
// if GetTech ( i , side ) <> state then
16539: LD_VAR 0 5
16543: PPUSH
16544: LD_VAR 0 1
16548: PPUSH
16549: CALL_OW 321
16553: PUSH
16554: LD_VAR 0 3
16558: NONEQUAL
16559: IFFALSE 16577
// result := result diff i ;
16561: LD_ADDR_VAR 0 4
16565: PUSH
16566: LD_VAR 0 4
16570: PUSH
16571: LD_VAR 0 5
16575: DIFF
16576: ST_TO_ADDR
16577: GO 16536
16579: POP
16580: POP
// end ;
16581: LD_VAR 0 4
16585: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16586: LD_INT 0
16588: PPUSH
16589: PPUSH
16590: PPUSH
// result := true ;
16591: LD_ADDR_VAR 0 3
16595: PUSH
16596: LD_INT 1
16598: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16599: LD_ADDR_VAR 0 5
16603: PUSH
16604: LD_VAR 0 2
16608: PPUSH
16609: CALL_OW 480
16613: ST_TO_ADDR
// if not tmp then
16614: LD_VAR 0 5
16618: NOT
16619: IFFALSE 16623
// exit ;
16621: GO 16672
// for i in tmp do
16623: LD_ADDR_VAR 0 4
16627: PUSH
16628: LD_VAR 0 5
16632: PUSH
16633: FOR_IN
16634: IFFALSE 16670
// if GetTech ( i , side ) <> state_researched then
16636: LD_VAR 0 4
16640: PPUSH
16641: LD_VAR 0 1
16645: PPUSH
16646: CALL_OW 321
16650: PUSH
16651: LD_INT 2
16653: NONEQUAL
16654: IFFALSE 16668
// begin result := false ;
16656: LD_ADDR_VAR 0 3
16660: PUSH
16661: LD_INT 0
16663: ST_TO_ADDR
// exit ;
16664: POP
16665: POP
16666: GO 16672
// end ;
16668: GO 16633
16670: POP
16671: POP
// end ;
16672: LD_VAR 0 3
16676: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16677: LD_INT 0
16679: PPUSH
16680: PPUSH
16681: PPUSH
16682: PPUSH
16683: PPUSH
16684: PPUSH
16685: PPUSH
16686: PPUSH
16687: PPUSH
16688: PPUSH
16689: PPUSH
16690: PPUSH
16691: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16692: LD_VAR 0 1
16696: NOT
16697: IFTRUE 16714
16699: PUSH
16700: LD_VAR 0 1
16704: PPUSH
16705: CALL_OW 257
16709: PUSH
16710: LD_INT 9
16712: NONEQUAL
16713: OR
16714: IFFALSE 16718
// exit ;
16716: GO 17297
// side := GetSide ( unit ) ;
16718: LD_ADDR_VAR 0 9
16722: PUSH
16723: LD_VAR 0 1
16727: PPUSH
16728: CALL_OW 255
16732: ST_TO_ADDR
// tech_space := tech_spacanom ;
16733: LD_ADDR_VAR 0 12
16737: PUSH
16738: LD_INT 29
16740: ST_TO_ADDR
// tech_time := tech_taurad ;
16741: LD_ADDR_VAR 0 13
16745: PUSH
16746: LD_INT 28
16748: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16749: LD_ADDR_VAR 0 11
16753: PUSH
16754: LD_VAR 0 1
16758: PPUSH
16759: CALL_OW 310
16763: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16764: LD_VAR 0 11
16768: PPUSH
16769: CALL_OW 247
16773: PUSH
16774: LD_INT 2
16776: EQUAL
16777: IFFALSE 16781
// exit ;
16779: GO 17297
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16781: LD_ADDR_VAR 0 8
16785: PUSH
16786: LD_INT 81
16788: PUSH
16789: LD_VAR 0 9
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 3
16800: PUSH
16801: LD_INT 21
16803: PUSH
16804: LD_INT 3
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PPUSH
16819: CALL_OW 69
16823: ST_TO_ADDR
// if not tmp then
16824: LD_VAR 0 8
16828: NOT
16829: IFFALSE 16833
// exit ;
16831: GO 17297
// if in_unit then
16833: LD_VAR 0 11
16837: IFFALSE 16861
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16839: LD_ADDR_VAR 0 10
16843: PUSH
16844: LD_VAR 0 8
16848: PPUSH
16849: LD_VAR 0 11
16853: PPUSH
16854: CALL_OW 74
16858: ST_TO_ADDR
16859: GO 16881
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16861: LD_ADDR_VAR 0 10
16865: PUSH
16866: LD_VAR 0 8
16870: PPUSH
16871: LD_VAR 0 1
16875: PPUSH
16876: CALL_OW 74
16880: ST_TO_ADDR
// if not enemy then
16881: LD_VAR 0 10
16885: NOT
16886: IFFALSE 16890
// exit ;
16888: GO 17297
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16890: LD_VAR 0 11
16894: IFFALSE 16916
16896: PUSH
16897: LD_VAR 0 11
16901: PPUSH
16902: LD_VAR 0 10
16906: PPUSH
16907: CALL_OW 296
16911: PUSH
16912: LD_INT 13
16914: GREATER
16915: AND
16916: IFTRUE 16938
16918: PUSH
16919: LD_VAR 0 1
16923: PPUSH
16924: LD_VAR 0 10
16928: PPUSH
16929: CALL_OW 296
16933: PUSH
16934: LD_INT 12
16936: GREATER
16937: OR
16938: IFFALSE 16942
// exit ;
16940: GO 17297
// missile := [ 1 ] ;
16942: LD_ADDR_VAR 0 14
16946: PUSH
16947: LD_INT 1
16949: PUSH
16950: EMPTY
16951: LIST
16952: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16953: LD_VAR 0 9
16957: PPUSH
16958: LD_VAR 0 12
16962: PPUSH
16963: CALL_OW 325
16967: IFFALSE 16996
// missile := Replace ( missile , missile + 1 , 2 ) ;
16969: LD_ADDR_VAR 0 14
16973: PUSH
16974: LD_VAR 0 14
16978: PPUSH
16979: LD_VAR 0 14
16983: PUSH
16984: LD_INT 1
16986: PLUS
16987: PPUSH
16988: LD_INT 2
16990: PPUSH
16991: CALL_OW 1
16995: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16996: LD_VAR 0 9
17000: PPUSH
17001: LD_VAR 0 13
17005: PPUSH
17006: CALL_OW 325
17010: IFFALSE 17034
17012: PUSH
17013: LD_VAR 0 10
17017: PPUSH
17018: CALL_OW 255
17022: PPUSH
17023: LD_VAR 0 13
17027: PPUSH
17028: CALL_OW 325
17032: NOT
17033: AND
17034: IFFALSE 17063
// missile := Replace ( missile , missile + 1 , 3 ) ;
17036: LD_ADDR_VAR 0 14
17040: PUSH
17041: LD_VAR 0 14
17045: PPUSH
17046: LD_VAR 0 14
17050: PUSH
17051: LD_INT 1
17053: PLUS
17054: PPUSH
17055: LD_INT 3
17057: PPUSH
17058: CALL_OW 1
17062: ST_TO_ADDR
// if missile < 2 then
17063: LD_VAR 0 14
17067: PUSH
17068: LD_INT 2
17070: LESS
17071: IFFALSE 17075
// exit ;
17073: GO 17297
// x := GetX ( enemy ) ;
17075: LD_ADDR_VAR 0 4
17079: PUSH
17080: LD_VAR 0 10
17084: PPUSH
17085: CALL_OW 250
17089: ST_TO_ADDR
// y := GetY ( enemy ) ;
17090: LD_ADDR_VAR 0 5
17094: PUSH
17095: LD_VAR 0 10
17099: PPUSH
17100: CALL_OW 251
17104: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17105: LD_ADDR_VAR 0 6
17109: PUSH
17110: LD_VAR 0 4
17114: PUSH
17115: LD_INT 1
17117: NEG
17118: PPUSH
17119: LD_INT 1
17121: PPUSH
17122: CALL_OW 12
17126: PLUS
17127: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17128: LD_ADDR_VAR 0 7
17132: PUSH
17133: LD_VAR 0 5
17137: PUSH
17138: LD_INT 1
17140: NEG
17141: PPUSH
17142: LD_INT 1
17144: PPUSH
17145: CALL_OW 12
17149: PLUS
17150: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17151: LD_VAR 0 6
17155: PPUSH
17156: LD_VAR 0 7
17160: PPUSH
17161: CALL_OW 488
17165: NOT
17166: IFFALSE 17188
// begin _x := x ;
17168: LD_ADDR_VAR 0 6
17172: PUSH
17173: LD_VAR 0 4
17177: ST_TO_ADDR
// _y := y ;
17178: LD_ADDR_VAR 0 7
17182: PUSH
17183: LD_VAR 0 5
17187: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17188: LD_ADDR_VAR 0 3
17192: PUSH
17193: LD_INT 1
17195: PPUSH
17196: LD_VAR 0 14
17200: PPUSH
17201: CALL_OW 12
17205: ST_TO_ADDR
// case i of 1 :
17206: LD_VAR 0 3
17210: PUSH
17211: LD_INT 1
17213: DOUBLE
17214: EQUAL
17215: IFTRUE 17219
17217: GO 17236
17219: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17220: LD_VAR 0 1
17224: PPUSH
17225: LD_VAR 0 10
17229: PPUSH
17230: CALL_OW 115
17234: GO 17297
17236: LD_INT 2
17238: DOUBLE
17239: EQUAL
17240: IFTRUE 17244
17242: GO 17266
17244: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17245: LD_VAR 0 1
17249: PPUSH
17250: LD_VAR 0 6
17254: PPUSH
17255: LD_VAR 0 7
17259: PPUSH
17260: CALL_OW 153
17264: GO 17297
17266: LD_INT 3
17268: DOUBLE
17269: EQUAL
17270: IFTRUE 17274
17272: GO 17296
17274: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17275: LD_VAR 0 1
17279: PPUSH
17280: LD_VAR 0 6
17284: PPUSH
17285: LD_VAR 0 7
17289: PPUSH
17290: CALL_OW 154
17294: GO 17297
17296: POP
// end ;
17297: LD_VAR 0 2
17301: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17302: LD_INT 0
17304: PPUSH
17305: PPUSH
17306: PPUSH
17307: PPUSH
17308: PPUSH
17309: PPUSH
// if not unit or not building then
17310: LD_VAR 0 1
17314: NOT
17315: IFTRUE 17324
17317: PUSH
17318: LD_VAR 0 2
17322: NOT
17323: OR
17324: IFFALSE 17328
// exit ;
17326: GO 17486
// x := GetX ( building ) ;
17328: LD_ADDR_VAR 0 5
17332: PUSH
17333: LD_VAR 0 2
17337: PPUSH
17338: CALL_OW 250
17342: ST_TO_ADDR
// y := GetY ( building ) ;
17343: LD_ADDR_VAR 0 6
17347: PUSH
17348: LD_VAR 0 2
17352: PPUSH
17353: CALL_OW 251
17357: ST_TO_ADDR
// for i := 0 to 5 do
17358: LD_ADDR_VAR 0 4
17362: PUSH
17363: DOUBLE
17364: LD_INT 0
17366: DEC
17367: ST_TO_ADDR
17368: LD_INT 5
17370: PUSH
17371: FOR_TO
17372: IFFALSE 17484
// begin _x := ShiftX ( x , i , 3 ) ;
17374: LD_ADDR_VAR 0 7
17378: PUSH
17379: LD_VAR 0 5
17383: PPUSH
17384: LD_VAR 0 4
17388: PPUSH
17389: LD_INT 3
17391: PPUSH
17392: CALL_OW 272
17396: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17397: LD_ADDR_VAR 0 8
17401: PUSH
17402: LD_VAR 0 6
17406: PPUSH
17407: LD_VAR 0 4
17411: PPUSH
17412: LD_INT 3
17414: PPUSH
17415: CALL_OW 273
17419: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17420: LD_VAR 0 7
17424: PPUSH
17425: LD_VAR 0 8
17429: PPUSH
17430: CALL_OW 488
17434: NOT
17435: IFFALSE 17439
// continue ;
17437: GO 17371
// if HexInfo ( _x , _y ) = 0 then
17439: LD_VAR 0 7
17443: PPUSH
17444: LD_VAR 0 8
17448: PPUSH
17449: CALL_OW 428
17453: PUSH
17454: LD_INT 0
17456: EQUAL
17457: IFFALSE 17482
// begin ComMoveXY ( unit , _x , _y ) ;
17459: LD_VAR 0 1
17463: PPUSH
17464: LD_VAR 0 7
17468: PPUSH
17469: LD_VAR 0 8
17473: PPUSH
17474: CALL_OW 111
// exit ;
17478: POP
17479: POP
17480: GO 17486
// end ; end ;
17482: GO 17371
17484: POP
17485: POP
// end ;
17486: LD_VAR 0 3
17490: RET
// export function ScanBase ( side , base_area ) ; begin
17491: LD_INT 0
17493: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17494: LD_ADDR_VAR 0 3
17498: PUSH
17499: LD_VAR 0 2
17503: PPUSH
17504: LD_INT 81
17506: PUSH
17507: LD_VAR 0 1
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PPUSH
17516: CALL_OW 70
17520: ST_TO_ADDR
// end ;
17521: LD_VAR 0 3
17525: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17526: LD_INT 0
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
// result := false ;
17532: LD_ADDR_VAR 0 2
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// side := GetSide ( unit ) ;
17540: LD_ADDR_VAR 0 3
17544: PUSH
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 255
17554: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17555: LD_ADDR_VAR 0 4
17559: PUSH
17560: LD_VAR 0 1
17564: PPUSH
17565: CALL_OW 248
17569: ST_TO_ADDR
// case nat of 1 :
17570: LD_VAR 0 4
17574: PUSH
17575: LD_INT 1
17577: DOUBLE
17578: EQUAL
17579: IFTRUE 17583
17581: GO 17594
17583: POP
// tech := tech_lassight ; 2 :
17584: LD_ADDR_VAR 0 5
17588: PUSH
17589: LD_INT 12
17591: ST_TO_ADDR
17592: GO 17633
17594: LD_INT 2
17596: DOUBLE
17597: EQUAL
17598: IFTRUE 17602
17600: GO 17613
17602: POP
// tech := tech_mortar ; 3 :
17603: LD_ADDR_VAR 0 5
17607: PUSH
17608: LD_INT 41
17610: ST_TO_ADDR
17611: GO 17633
17613: LD_INT 3
17615: DOUBLE
17616: EQUAL
17617: IFTRUE 17621
17619: GO 17632
17621: POP
// tech := tech_bazooka ; end ;
17622: LD_ADDR_VAR 0 5
17626: PUSH
17627: LD_INT 44
17629: ST_TO_ADDR
17630: GO 17633
17632: POP
// if Researched ( side , tech ) then
17633: LD_VAR 0 3
17637: PPUSH
17638: LD_VAR 0 5
17642: PPUSH
17643: CALL_OW 325
17647: IFFALSE 17674
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17649: LD_ADDR_VAR 0 2
17653: PUSH
17654: LD_INT 5
17656: PUSH
17657: LD_INT 8
17659: PUSH
17660: LD_INT 9
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: PUSH
17668: LD_VAR 0 4
17672: ARRAY
17673: ST_TO_ADDR
// end ;
17674: LD_VAR 0 2
17678: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17679: LD_INT 0
17681: PPUSH
17682: PPUSH
17683: PPUSH
// if not mines then
17684: LD_VAR 0 2
17688: NOT
17689: IFFALSE 17693
// exit ;
17691: GO 17837
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17693: LD_ADDR_VAR 0 5
17697: PUSH
17698: LD_INT 81
17700: PUSH
17701: LD_VAR 0 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: LD_INT 21
17715: PUSH
17716: LD_INT 3
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PPUSH
17731: CALL_OW 69
17735: ST_TO_ADDR
// for i in mines do
17736: LD_ADDR_VAR 0 4
17740: PUSH
17741: LD_VAR 0 2
17745: PUSH
17746: FOR_IN
17747: IFFALSE 17835
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17749: LD_VAR 0 4
17753: PUSH
17754: LD_INT 1
17756: ARRAY
17757: PPUSH
17758: LD_VAR 0 4
17762: PUSH
17763: LD_INT 2
17765: ARRAY
17766: PPUSH
17767: CALL_OW 458
17771: NOT
17772: IFFALSE 17776
// continue ;
17774: GO 17746
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17776: LD_VAR 0 4
17780: PUSH
17781: LD_INT 1
17783: ARRAY
17784: PPUSH
17785: LD_VAR 0 4
17789: PUSH
17790: LD_INT 2
17792: ARRAY
17793: PPUSH
17794: CALL_OW 428
17798: PUSH
17799: LD_VAR 0 5
17803: IN
17804: IFFALSE 17833
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17806: LD_VAR 0 4
17810: PUSH
17811: LD_INT 1
17813: ARRAY
17814: PPUSH
17815: LD_VAR 0 4
17819: PUSH
17820: LD_INT 2
17822: ARRAY
17823: PPUSH
17824: LD_VAR 0 1
17828: PPUSH
17829: CALL_OW 456
// end ;
17833: GO 17746
17835: POP
17836: POP
// end ;
17837: LD_VAR 0 3
17841: RET
// export function Count ( array ) ; begin
17842: LD_INT 0
17844: PPUSH
// result := array + 0 ;
17845: LD_ADDR_VAR 0 2
17849: PUSH
17850: LD_VAR 0 1
17854: PUSH
17855: LD_INT 0
17857: PLUS
17858: ST_TO_ADDR
// end ;
17859: LD_VAR 0 2
17863: RET
// export function IsEmpty ( building ) ; begin
17864: LD_INT 0
17866: PPUSH
// if not building then
17867: LD_VAR 0 1
17871: NOT
17872: IFFALSE 17876
// exit ;
17874: GO 17919
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17876: LD_ADDR_VAR 0 2
17880: PUSH
17881: LD_VAR 0 1
17885: PUSH
17886: LD_INT 22
17888: PUSH
17889: LD_VAR 0 1
17893: PPUSH
17894: CALL_OW 255
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 58
17905: PUSH
17906: EMPTY
17907: LIST
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PPUSH
17913: CALL_OW 69
17917: IN
17918: ST_TO_ADDR
// end ;
17919: LD_VAR 0 2
17923: RET
// export function IsNotFull ( building ) ; var places ; begin
17924: LD_INT 0
17926: PPUSH
17927: PPUSH
// if not building then
17928: LD_VAR 0 1
17932: NOT
17933: IFFALSE 17937
// exit ;
17935: GO 17965
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17937: LD_ADDR_VAR 0 2
17941: PUSH
17942: LD_VAR 0 1
17946: PPUSH
17947: LD_INT 3
17949: PUSH
17950: LD_INT 62
17952: PUSH
17953: EMPTY
17954: LIST
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PPUSH
17960: CALL_OW 72
17964: ST_TO_ADDR
// end ;
17965: LD_VAR 0 2
17969: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17970: LD_INT 0
17972: PPUSH
17973: PPUSH
17974: PPUSH
17975: PPUSH
// tmp := [ ] ;
17976: LD_ADDR_VAR 0 3
17980: PUSH
17981: EMPTY
17982: ST_TO_ADDR
// list := [ ] ;
17983: LD_ADDR_VAR 0 5
17987: PUSH
17988: EMPTY
17989: ST_TO_ADDR
// for i = 16 to 25 do
17990: LD_ADDR_VAR 0 4
17994: PUSH
17995: DOUBLE
17996: LD_INT 16
17998: DEC
17999: ST_TO_ADDR
18000: LD_INT 25
18002: PUSH
18003: FOR_TO
18004: IFFALSE 18077
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18006: LD_ADDR_VAR 0 3
18010: PUSH
18011: LD_VAR 0 3
18015: PUSH
18016: LD_INT 22
18018: PUSH
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 255
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 91
18035: PUSH
18036: LD_VAR 0 1
18040: PUSH
18041: LD_INT 6
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 30
18051: PUSH
18052: LD_VAR 0 4
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: PPUSH
18069: CALL_OW 69
18073: ADD
18074: ST_TO_ADDR
18075: GO 18003
18077: POP
18078: POP
// for i = 1 to tmp do
18079: LD_ADDR_VAR 0 4
18083: PUSH
18084: DOUBLE
18085: LD_INT 1
18087: DEC
18088: ST_TO_ADDR
18089: LD_VAR 0 3
18093: PUSH
18094: FOR_TO
18095: IFFALSE 18183
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18097: LD_ADDR_VAR 0 5
18101: PUSH
18102: LD_VAR 0 5
18106: PUSH
18107: LD_VAR 0 3
18111: PUSH
18112: LD_VAR 0 4
18116: ARRAY
18117: PPUSH
18118: CALL_OW 266
18122: PUSH
18123: LD_VAR 0 3
18127: PUSH
18128: LD_VAR 0 4
18132: ARRAY
18133: PPUSH
18134: CALL_OW 250
18138: PUSH
18139: LD_VAR 0 3
18143: PUSH
18144: LD_VAR 0 4
18148: ARRAY
18149: PPUSH
18150: CALL_OW 251
18154: PUSH
18155: LD_VAR 0 3
18159: PUSH
18160: LD_VAR 0 4
18164: ARRAY
18165: PPUSH
18166: CALL_OW 254
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: PUSH
18177: EMPTY
18178: LIST
18179: ADD
18180: ST_TO_ADDR
18181: GO 18094
18183: POP
18184: POP
// result := list ;
18185: LD_ADDR_VAR 0 2
18189: PUSH
18190: LD_VAR 0 5
18194: ST_TO_ADDR
// end ;
18195: LD_VAR 0 2
18199: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18200: LD_INT 0
18202: PPUSH
18203: PPUSH
18204: PPUSH
18205: PPUSH
18206: PPUSH
18207: PPUSH
18208: PPUSH
// if not factory then
18209: LD_VAR 0 1
18213: NOT
18214: IFFALSE 18218
// exit ;
18216: GO 18821
// if control = control_apeman then
18218: LD_VAR 0 4
18222: PUSH
18223: LD_INT 5
18225: EQUAL
18226: IFFALSE 18335
// begin tmp := UnitsInside ( factory ) ;
18228: LD_ADDR_VAR 0 8
18232: PUSH
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 313
18242: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18243: LD_VAR 0 8
18247: PPUSH
18248: LD_INT 25
18250: PUSH
18251: LD_INT 12
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PPUSH
18258: CALL_OW 72
18262: NOT
18263: IFFALSE 18273
// control := control_manual ;
18265: LD_ADDR_VAR 0 4
18269: PUSH
18270: LD_INT 1
18272: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18273: LD_ADDR_VAR 0 8
18277: PUSH
18278: LD_VAR 0 1
18282: PPUSH
18283: CALL 17970 0 1
18287: ST_TO_ADDR
// if tmp then
18288: LD_VAR 0 8
18292: IFFALSE 18335
// begin for i in tmp do
18294: LD_ADDR_VAR 0 7
18298: PUSH
18299: LD_VAR 0 8
18303: PUSH
18304: FOR_IN
18305: IFFALSE 18333
// if i [ 1 ] = b_ext_radio then
18307: LD_VAR 0 7
18311: PUSH
18312: LD_INT 1
18314: ARRAY
18315: PUSH
18316: LD_INT 22
18318: EQUAL
18319: IFFALSE 18331
// begin control := control_remote ;
18321: LD_ADDR_VAR 0 4
18325: PUSH
18326: LD_INT 2
18328: ST_TO_ADDR
// break ;
18329: GO 18333
// end ;
18331: GO 18304
18333: POP
18334: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18335: LD_VAR 0 1
18339: PPUSH
18340: LD_VAR 0 2
18344: PPUSH
18345: LD_VAR 0 3
18349: PPUSH
18350: LD_VAR 0 4
18354: PPUSH
18355: LD_VAR 0 5
18359: PPUSH
18360: CALL_OW 448
18364: IFFALSE 18399
// begin result := [ chassis , engine , control , weapon ] ;
18366: LD_ADDR_VAR 0 6
18370: PUSH
18371: LD_VAR 0 2
18375: PUSH
18376: LD_VAR 0 3
18380: PUSH
18381: LD_VAR 0 4
18385: PUSH
18386: LD_VAR 0 5
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: ST_TO_ADDR
// exit ;
18397: GO 18821
// end ; _chassis := AvailableChassisList ( factory ) ;
18399: LD_ADDR_VAR 0 9
18403: PUSH
18404: LD_VAR 0 1
18408: PPUSH
18409: CALL_OW 475
18413: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18414: LD_ADDR_VAR 0 11
18418: PUSH
18419: LD_VAR 0 1
18423: PPUSH
18424: CALL_OW 476
18428: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18429: LD_ADDR_VAR 0 12
18433: PUSH
18434: LD_VAR 0 1
18438: PPUSH
18439: CALL_OW 477
18443: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18444: LD_ADDR_VAR 0 10
18448: PUSH
18449: LD_VAR 0 1
18453: PPUSH
18454: CALL_OW 478
18458: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18459: LD_VAR 0 9
18463: NOT
18464: IFTRUE 18473
18466: PUSH
18467: LD_VAR 0 11
18471: NOT
18472: OR
18473: IFTRUE 18482
18475: PUSH
18476: LD_VAR 0 12
18480: NOT
18481: OR
18482: IFTRUE 18491
18484: PUSH
18485: LD_VAR 0 10
18489: NOT
18490: OR
18491: IFFALSE 18526
// begin result := [ chassis , engine , control , weapon ] ;
18493: LD_ADDR_VAR 0 6
18497: PUSH
18498: LD_VAR 0 2
18502: PUSH
18503: LD_VAR 0 3
18507: PUSH
18508: LD_VAR 0 4
18512: PUSH
18513: LD_VAR 0 5
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: ST_TO_ADDR
// exit ;
18524: GO 18821
// end ; if not chassis in _chassis then
18526: LD_VAR 0 2
18530: PUSH
18531: LD_VAR 0 9
18535: IN
18536: NOT
18537: IFFALSE 18563
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18539: LD_ADDR_VAR 0 2
18543: PUSH
18544: LD_VAR 0 9
18548: PUSH
18549: LD_INT 1
18551: PPUSH
18552: LD_VAR 0 9
18556: PPUSH
18557: CALL_OW 12
18561: ARRAY
18562: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18563: LD_VAR 0 2
18567: PPUSH
18568: LD_VAR 0 3
18572: PPUSH
18573: CALL 18826 0 2
18577: NOT
18578: IFFALSE 18639
// repeat engine := _engine [ 1 ] ;
18580: LD_ADDR_VAR 0 3
18584: PUSH
18585: LD_VAR 0 11
18589: PUSH
18590: LD_INT 1
18592: ARRAY
18593: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18594: LD_ADDR_VAR 0 11
18598: PUSH
18599: LD_VAR 0 11
18603: PPUSH
18604: LD_INT 1
18606: PPUSH
18607: CALL_OW 3
18611: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18612: LD_VAR 0 2
18616: PPUSH
18617: LD_VAR 0 3
18621: PPUSH
18622: CALL 18826 0 2
18626: IFTRUE 18637
18628: PUSH
18629: LD_VAR 0 11
18633: PUSH
18634: EMPTY
18635: EQUAL
18636: OR
18637: IFFALSE 18580
// if not control in _control then
18639: LD_VAR 0 4
18643: PUSH
18644: LD_VAR 0 12
18648: IN
18649: NOT
18650: IFFALSE 18676
// control := _control [ rand ( 1 , _control ) ] ;
18652: LD_ADDR_VAR 0 4
18656: PUSH
18657: LD_VAR 0 12
18661: PUSH
18662: LD_INT 1
18664: PPUSH
18665: LD_VAR 0 12
18669: PPUSH
18670: CALL_OW 12
18674: ARRAY
18675: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18676: LD_VAR 0 2
18680: PPUSH
18681: LD_VAR 0 5
18685: PPUSH
18686: CALL 19048 0 2
18690: NOT
18691: IFFALSE 18752
// repeat weapon := _weapon [ 1 ] ;
18693: LD_ADDR_VAR 0 5
18697: PUSH
18698: LD_VAR 0 10
18702: PUSH
18703: LD_INT 1
18705: ARRAY
18706: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18707: LD_ADDR_VAR 0 10
18711: PUSH
18712: LD_VAR 0 10
18716: PPUSH
18717: LD_INT 1
18719: PPUSH
18720: CALL_OW 3
18724: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18725: LD_VAR 0 2
18729: PPUSH
18730: LD_VAR 0 5
18734: PPUSH
18735: CALL 19048 0 2
18739: IFTRUE 18750
18741: PUSH
18742: LD_VAR 0 10
18746: PUSH
18747: EMPTY
18748: EQUAL
18749: OR
18750: IFFALSE 18693
// result := [ ] ;
18752: LD_ADDR_VAR 0 6
18756: PUSH
18757: EMPTY
18758: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_VAR 0 2
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: LD_VAR 0 4
18778: PPUSH
18779: LD_VAR 0 5
18783: PPUSH
18784: CALL_OW 448
18788: IFFALSE 18821
// result := [ chassis , engine , control , weapon ] ;
18790: LD_ADDR_VAR 0 6
18794: PUSH
18795: LD_VAR 0 2
18799: PUSH
18800: LD_VAR 0 3
18804: PUSH
18805: LD_VAR 0 4
18809: PUSH
18810: LD_VAR 0 5
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: ST_TO_ADDR
// end ;
18821: LD_VAR 0 6
18825: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18826: LD_INT 0
18828: PPUSH
// if not chassis or not engine then
18829: LD_VAR 0 1
18833: NOT
18834: IFTRUE 18843
18836: PUSH
18837: LD_VAR 0 2
18841: NOT
18842: OR
18843: IFFALSE 18847
// exit ;
18845: GO 19043
// case engine of engine_solar :
18847: LD_VAR 0 2
18851: PUSH
18852: LD_INT 2
18854: DOUBLE
18855: EQUAL
18856: IFTRUE 18860
18858: GO 18898
18860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18861: LD_ADDR_VAR 0 3
18865: PUSH
18866: LD_INT 11
18868: PUSH
18869: LD_INT 12
18871: PUSH
18872: LD_INT 13
18874: PUSH
18875: LD_INT 14
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: LD_INT 3
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: ST_TO_ADDR
18896: GO 19027
18898: LD_INT 1
18900: DOUBLE
18901: EQUAL
18902: IFTRUE 18906
18904: GO 18968
18906: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18907: LD_ADDR_VAR 0 3
18911: PUSH
18912: LD_INT 11
18914: PUSH
18915: LD_INT 12
18917: PUSH
18918: LD_INT 13
18920: PUSH
18921: LD_INT 14
18923: PUSH
18924: LD_INT 1
18926: PUSH
18927: LD_INT 2
18929: PUSH
18930: LD_INT 3
18932: PUSH
18933: LD_INT 4
18935: PUSH
18936: LD_INT 5
18938: PUSH
18939: LD_INT 21
18941: PUSH
18942: LD_INT 23
18944: PUSH
18945: LD_INT 22
18947: PUSH
18948: LD_INT 24
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: ST_TO_ADDR
18966: GO 19027
18968: LD_INT 3
18970: DOUBLE
18971: EQUAL
18972: IFTRUE 18976
18974: GO 19026
18976: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18977: LD_ADDR_VAR 0 3
18981: PUSH
18982: LD_INT 13
18984: PUSH
18985: LD_INT 14
18987: PUSH
18988: LD_INT 2
18990: PUSH
18991: LD_INT 3
18993: PUSH
18994: LD_INT 4
18996: PUSH
18997: LD_INT 5
18999: PUSH
19000: LD_INT 21
19002: PUSH
19003: LD_INT 22
19005: PUSH
19006: LD_INT 23
19008: PUSH
19009: LD_INT 24
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: ST_TO_ADDR
19024: GO 19027
19026: POP
// result := ( chassis in result ) ;
19027: LD_ADDR_VAR 0 3
19031: PUSH
19032: LD_VAR 0 1
19036: PUSH
19037: LD_VAR 0 3
19041: IN
19042: ST_TO_ADDR
// end ;
19043: LD_VAR 0 3
19047: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19048: LD_INT 0
19050: PPUSH
// if not chassis or not weapon then
19051: LD_VAR 0 1
19055: NOT
19056: IFTRUE 19065
19058: PUSH
19059: LD_VAR 0 2
19063: NOT
19064: OR
19065: IFFALSE 19069
// exit ;
19067: GO 20163
// case weapon of us_machine_gun :
19069: LD_VAR 0 2
19073: PUSH
19074: LD_INT 2
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19112
19082: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19083: LD_ADDR_VAR 0 3
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: LD_INT 3
19096: PUSH
19097: LD_INT 4
19099: PUSH
19100: LD_INT 5
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: ST_TO_ADDR
19110: GO 20147
19112: LD_INT 3
19114: DOUBLE
19115: EQUAL
19116: IFTRUE 19120
19118: GO 19150
19120: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19121: LD_ADDR_VAR 0 3
19125: PUSH
19126: LD_INT 1
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: LD_INT 3
19134: PUSH
19135: LD_INT 4
19137: PUSH
19138: LD_INT 5
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: ST_TO_ADDR
19148: GO 20147
19150: LD_INT 11
19152: DOUBLE
19153: EQUAL
19154: IFTRUE 19158
19156: GO 19188
19158: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19159: LD_ADDR_VAR 0 3
19163: PUSH
19164: LD_INT 1
19166: PUSH
19167: LD_INT 2
19169: PUSH
19170: LD_INT 3
19172: PUSH
19173: LD_INT 4
19175: PUSH
19176: LD_INT 5
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: ST_TO_ADDR
19186: GO 20147
19188: LD_INT 4
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19196
19194: GO 19222
19196: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19197: LD_ADDR_VAR 0 3
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 3
19207: PUSH
19208: LD_INT 4
19210: PUSH
19211: LD_INT 5
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: ST_TO_ADDR
19220: GO 20147
19222: LD_INT 5
19224: DOUBLE
19225: EQUAL
19226: IFTRUE 19230
19228: GO 19256
19230: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19231: LD_ADDR_VAR 0 3
19235: PUSH
19236: LD_INT 2
19238: PUSH
19239: LD_INT 3
19241: PUSH
19242: LD_INT 4
19244: PUSH
19245: LD_INT 5
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: ST_TO_ADDR
19254: GO 20147
19256: LD_INT 9
19258: DOUBLE
19259: EQUAL
19260: IFTRUE 19264
19262: GO 19290
19264: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19265: LD_ADDR_VAR 0 3
19269: PUSH
19270: LD_INT 2
19272: PUSH
19273: LD_INT 3
19275: PUSH
19276: LD_INT 4
19278: PUSH
19279: LD_INT 5
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: ST_TO_ADDR
19288: GO 20147
19290: LD_INT 7
19292: DOUBLE
19293: EQUAL
19294: IFTRUE 19298
19296: GO 19324
19298: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19299: LD_ADDR_VAR 0 3
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: LD_INT 3
19309: PUSH
19310: LD_INT 4
19312: PUSH
19313: LD_INT 5
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: ST_TO_ADDR
19322: GO 20147
19324: LD_INT 12
19326: DOUBLE
19327: EQUAL
19328: IFTRUE 19332
19330: GO 19358
19332: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19333: LD_ADDR_VAR 0 3
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 3
19343: PUSH
19344: LD_INT 4
19346: PUSH
19347: LD_INT 5
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: ST_TO_ADDR
19356: GO 20147
19358: LD_INT 13
19360: DOUBLE
19361: EQUAL
19362: IFTRUE 19366
19364: GO 19392
19366: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19367: LD_ADDR_VAR 0 3
19371: PUSH
19372: LD_INT 2
19374: PUSH
19375: LD_INT 3
19377: PUSH
19378: LD_INT 4
19380: PUSH
19381: LD_INT 5
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: ST_TO_ADDR
19390: GO 20147
19392: LD_INT 14
19394: DOUBLE
19395: EQUAL
19396: IFTRUE 19400
19398: GO 19418
19400: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19401: LD_ADDR_VAR 0 3
19405: PUSH
19406: LD_INT 4
19408: PUSH
19409: LD_INT 5
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: ST_TO_ADDR
19416: GO 20147
19418: LD_INT 6
19420: DOUBLE
19421: EQUAL
19422: IFTRUE 19426
19424: GO 19444
19426: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19427: LD_ADDR_VAR 0 3
19431: PUSH
19432: LD_INT 4
19434: PUSH
19435: LD_INT 5
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: ST_TO_ADDR
19442: GO 20147
19444: LD_INT 10
19446: DOUBLE
19447: EQUAL
19448: IFTRUE 19452
19450: GO 19470
19452: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19453: LD_ADDR_VAR 0 3
19457: PUSH
19458: LD_INT 4
19460: PUSH
19461: LD_INT 5
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: ST_TO_ADDR
19468: GO 20147
19470: LD_INT 22
19472: DOUBLE
19473: EQUAL
19474: IFTRUE 19478
19476: GO 19504
19478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19479: LD_ADDR_VAR 0 3
19483: PUSH
19484: LD_INT 11
19486: PUSH
19487: LD_INT 12
19489: PUSH
19490: LD_INT 13
19492: PUSH
19493: LD_INT 14
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: ST_TO_ADDR
19502: GO 20147
19504: LD_INT 23
19506: DOUBLE
19507: EQUAL
19508: IFTRUE 19512
19510: GO 19538
19512: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19513: LD_ADDR_VAR 0 3
19517: PUSH
19518: LD_INT 11
19520: PUSH
19521: LD_INT 12
19523: PUSH
19524: LD_INT 13
19526: PUSH
19527: LD_INT 14
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: ST_TO_ADDR
19536: GO 20147
19538: LD_INT 24
19540: DOUBLE
19541: EQUAL
19542: IFTRUE 19546
19544: GO 19572
19546: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19547: LD_ADDR_VAR 0 3
19551: PUSH
19552: LD_INT 11
19554: PUSH
19555: LD_INT 12
19557: PUSH
19558: LD_INT 13
19560: PUSH
19561: LD_INT 14
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: ST_TO_ADDR
19570: GO 20147
19572: LD_INT 30
19574: DOUBLE
19575: EQUAL
19576: IFTRUE 19580
19578: GO 19606
19580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19581: LD_ADDR_VAR 0 3
19585: PUSH
19586: LD_INT 11
19588: PUSH
19589: LD_INT 12
19591: PUSH
19592: LD_INT 13
19594: PUSH
19595: LD_INT 14
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: ST_TO_ADDR
19604: GO 20147
19606: LD_INT 25
19608: DOUBLE
19609: EQUAL
19610: IFTRUE 19614
19612: GO 19632
19614: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19615: LD_ADDR_VAR 0 3
19619: PUSH
19620: LD_INT 13
19622: PUSH
19623: LD_INT 14
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: ST_TO_ADDR
19630: GO 20147
19632: LD_INT 27
19634: DOUBLE
19635: EQUAL
19636: IFTRUE 19640
19638: GO 19658
19640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19641: LD_ADDR_VAR 0 3
19645: PUSH
19646: LD_INT 13
19648: PUSH
19649: LD_INT 14
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: ST_TO_ADDR
19656: GO 20147
19658: LD_INT 92
19660: DOUBLE
19661: EQUAL
19662: IFTRUE 19666
19664: GO 19692
19666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19667: LD_ADDR_VAR 0 3
19671: PUSH
19672: LD_INT 11
19674: PUSH
19675: LD_INT 12
19677: PUSH
19678: LD_INT 13
19680: PUSH
19681: LD_INT 14
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: ST_TO_ADDR
19690: GO 20147
19692: LD_INT 28
19694: DOUBLE
19695: EQUAL
19696: IFTRUE 19700
19698: GO 19718
19700: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19701: LD_ADDR_VAR 0 3
19705: PUSH
19706: LD_INT 13
19708: PUSH
19709: LD_INT 14
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: ST_TO_ADDR
19716: GO 20147
19718: LD_INT 29
19720: DOUBLE
19721: EQUAL
19722: IFTRUE 19726
19724: GO 19744
19726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19727: LD_ADDR_VAR 0 3
19731: PUSH
19732: LD_INT 13
19734: PUSH
19735: LD_INT 14
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: ST_TO_ADDR
19742: GO 20147
19744: LD_INT 31
19746: DOUBLE
19747: EQUAL
19748: IFTRUE 19752
19750: GO 19770
19752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19753: LD_ADDR_VAR 0 3
19757: PUSH
19758: LD_INT 13
19760: PUSH
19761: LD_INT 14
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: ST_TO_ADDR
19768: GO 20147
19770: LD_INT 26
19772: DOUBLE
19773: EQUAL
19774: IFTRUE 19778
19776: GO 19796
19778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19779: LD_ADDR_VAR 0 3
19783: PUSH
19784: LD_INT 13
19786: PUSH
19787: LD_INT 14
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: ST_TO_ADDR
19794: GO 20147
19796: LD_INT 42
19798: DOUBLE
19799: EQUAL
19800: IFTRUE 19804
19802: GO 19830
19804: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19805: LD_ADDR_VAR 0 3
19809: PUSH
19810: LD_INT 21
19812: PUSH
19813: LD_INT 22
19815: PUSH
19816: LD_INT 23
19818: PUSH
19819: LD_INT 24
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: ST_TO_ADDR
19828: GO 20147
19830: LD_INT 43
19832: DOUBLE
19833: EQUAL
19834: IFTRUE 19838
19836: GO 19864
19838: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19839: LD_ADDR_VAR 0 3
19843: PUSH
19844: LD_INT 21
19846: PUSH
19847: LD_INT 22
19849: PUSH
19850: LD_INT 23
19852: PUSH
19853: LD_INT 24
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: ST_TO_ADDR
19862: GO 20147
19864: LD_INT 44
19866: DOUBLE
19867: EQUAL
19868: IFTRUE 19872
19870: GO 19898
19872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19873: LD_ADDR_VAR 0 3
19877: PUSH
19878: LD_INT 21
19880: PUSH
19881: LD_INT 22
19883: PUSH
19884: LD_INT 23
19886: PUSH
19887: LD_INT 24
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: ST_TO_ADDR
19896: GO 20147
19898: LD_INT 45
19900: DOUBLE
19901: EQUAL
19902: IFTRUE 19906
19904: GO 19932
19906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19907: LD_ADDR_VAR 0 3
19911: PUSH
19912: LD_INT 21
19914: PUSH
19915: LD_INT 22
19917: PUSH
19918: LD_INT 23
19920: PUSH
19921: LD_INT 24
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: ST_TO_ADDR
19930: GO 20147
19932: LD_INT 49
19934: DOUBLE
19935: EQUAL
19936: IFTRUE 19940
19938: GO 19966
19940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19941: LD_ADDR_VAR 0 3
19945: PUSH
19946: LD_INT 21
19948: PUSH
19949: LD_INT 22
19951: PUSH
19952: LD_INT 23
19954: PUSH
19955: LD_INT 24
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: ST_TO_ADDR
19964: GO 20147
19966: LD_INT 51
19968: DOUBLE
19969: EQUAL
19970: IFTRUE 19974
19972: GO 20000
19974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19975: LD_ADDR_VAR 0 3
19979: PUSH
19980: LD_INT 21
19982: PUSH
19983: LD_INT 22
19985: PUSH
19986: LD_INT 23
19988: PUSH
19989: LD_INT 24
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: ST_TO_ADDR
19998: GO 20147
20000: LD_INT 52
20002: DOUBLE
20003: EQUAL
20004: IFTRUE 20008
20006: GO 20034
20008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20009: LD_ADDR_VAR 0 3
20013: PUSH
20014: LD_INT 21
20016: PUSH
20017: LD_INT 22
20019: PUSH
20020: LD_INT 23
20022: PUSH
20023: LD_INT 24
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: ST_TO_ADDR
20032: GO 20147
20034: LD_INT 53
20036: DOUBLE
20037: EQUAL
20038: IFTRUE 20042
20040: GO 20060
20042: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20043: LD_ADDR_VAR 0 3
20047: PUSH
20048: LD_INT 23
20050: PUSH
20051: LD_INT 24
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: ST_TO_ADDR
20058: GO 20147
20060: LD_INT 46
20062: DOUBLE
20063: EQUAL
20064: IFTRUE 20068
20066: GO 20086
20068: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20069: LD_ADDR_VAR 0 3
20073: PUSH
20074: LD_INT 23
20076: PUSH
20077: LD_INT 24
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: ST_TO_ADDR
20084: GO 20147
20086: LD_INT 47
20088: DOUBLE
20089: EQUAL
20090: IFTRUE 20094
20092: GO 20112
20094: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
20095: LD_ADDR_VAR 0 3
20099: PUSH
20100: LD_INT 23
20102: PUSH
20103: LD_INT 24
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: ST_TO_ADDR
20110: GO 20147
20112: LD_INT 98
20114: DOUBLE
20115: EQUAL
20116: IFTRUE 20120
20118: GO 20146
20120: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20121: LD_ADDR_VAR 0 3
20125: PUSH
20126: LD_INT 21
20128: PUSH
20129: LD_INT 22
20131: PUSH
20132: LD_INT 23
20134: PUSH
20135: LD_INT 24
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: ST_TO_ADDR
20144: GO 20147
20146: POP
// result := ( chassis in result ) ;
20147: LD_ADDR_VAR 0 3
20151: PUSH
20152: LD_VAR 0 1
20156: PUSH
20157: LD_VAR 0 3
20161: IN
20162: ST_TO_ADDR
// end ;
20163: LD_VAR 0 3
20167: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20168: LD_INT 0
20170: PPUSH
20171: PPUSH
20172: PPUSH
20173: PPUSH
20174: PPUSH
20175: PPUSH
20176: PPUSH
// result := array ;
20177: LD_ADDR_VAR 0 5
20181: PUSH
20182: LD_VAR 0 1
20186: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20187: LD_VAR 0 1
20191: NOT
20192: IFTRUE 20201
20194: PUSH
20195: LD_VAR 0 2
20199: NOT
20200: OR
20201: IFTRUE 20210
20203: PUSH
20204: LD_VAR 0 3
20208: NOT
20209: OR
20210: IFTRUE 20224
20212: PUSH
20213: LD_VAR 0 2
20217: PUSH
20218: LD_VAR 0 1
20222: GREATER
20223: OR
20224: IFTRUE 20238
20226: PUSH
20227: LD_VAR 0 3
20231: PUSH
20232: LD_VAR 0 1
20236: GREATER
20237: OR
20238: IFFALSE 20242
// exit ;
20240: GO 20538
// if direction then
20242: LD_VAR 0 4
20246: IFFALSE 20310
// begin d := 1 ;
20248: LD_ADDR_VAR 0 9
20252: PUSH
20253: LD_INT 1
20255: ST_TO_ADDR
// if i_from > i_to then
20256: LD_VAR 0 2
20260: PUSH
20261: LD_VAR 0 3
20265: GREATER
20266: IFFALSE 20292
// length := ( array - i_from ) + i_to else
20268: LD_ADDR_VAR 0 11
20272: PUSH
20273: LD_VAR 0 1
20277: PUSH
20278: LD_VAR 0 2
20282: MINUS
20283: PUSH
20284: LD_VAR 0 3
20288: PLUS
20289: ST_TO_ADDR
20290: GO 20308
// length := i_to - i_from ;
20292: LD_ADDR_VAR 0 11
20296: PUSH
20297: LD_VAR 0 3
20301: PUSH
20302: LD_VAR 0 2
20306: MINUS
20307: ST_TO_ADDR
// end else
20308: GO 20371
// begin d := - 1 ;
20310: LD_ADDR_VAR 0 9
20314: PUSH
20315: LD_INT 1
20317: NEG
20318: ST_TO_ADDR
// if i_from > i_to then
20319: LD_VAR 0 2
20323: PUSH
20324: LD_VAR 0 3
20328: GREATER
20329: IFFALSE 20349
// length := i_from - i_to else
20331: LD_ADDR_VAR 0 11
20335: PUSH
20336: LD_VAR 0 2
20340: PUSH
20341: LD_VAR 0 3
20345: MINUS
20346: ST_TO_ADDR
20347: GO 20371
// length := ( array - i_to ) + i_from ;
20349: LD_ADDR_VAR 0 11
20353: PUSH
20354: LD_VAR 0 1
20358: PUSH
20359: LD_VAR 0 3
20363: MINUS
20364: PUSH
20365: LD_VAR 0 2
20369: PLUS
20370: ST_TO_ADDR
// end ; if not length then
20371: LD_VAR 0 11
20375: NOT
20376: IFFALSE 20380
// exit ;
20378: GO 20538
// tmp := array ;
20380: LD_ADDR_VAR 0 10
20384: PUSH
20385: LD_VAR 0 1
20389: ST_TO_ADDR
// for i = 1 to length do
20390: LD_ADDR_VAR 0 6
20394: PUSH
20395: DOUBLE
20396: LD_INT 1
20398: DEC
20399: ST_TO_ADDR
20400: LD_VAR 0 11
20404: PUSH
20405: FOR_TO
20406: IFFALSE 20526
// begin for j = 1 to array do
20408: LD_ADDR_VAR 0 7
20412: PUSH
20413: DOUBLE
20414: LD_INT 1
20416: DEC
20417: ST_TO_ADDR
20418: LD_VAR 0 1
20422: PUSH
20423: FOR_TO
20424: IFFALSE 20512
// begin k := j + d ;
20426: LD_ADDR_VAR 0 8
20430: PUSH
20431: LD_VAR 0 7
20435: PUSH
20436: LD_VAR 0 9
20440: PLUS
20441: ST_TO_ADDR
// if k > array then
20442: LD_VAR 0 8
20446: PUSH
20447: LD_VAR 0 1
20451: GREATER
20452: IFFALSE 20462
// k := 1 ;
20454: LD_ADDR_VAR 0 8
20458: PUSH
20459: LD_INT 1
20461: ST_TO_ADDR
// if not k then
20462: LD_VAR 0 8
20466: NOT
20467: IFFALSE 20479
// k := array ;
20469: LD_ADDR_VAR 0 8
20473: PUSH
20474: LD_VAR 0 1
20478: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20479: LD_ADDR_VAR 0 10
20483: PUSH
20484: LD_VAR 0 10
20488: PPUSH
20489: LD_VAR 0 8
20493: PPUSH
20494: LD_VAR 0 1
20498: PUSH
20499: LD_VAR 0 7
20503: ARRAY
20504: PPUSH
20505: CALL_OW 1
20509: ST_TO_ADDR
// end ;
20510: GO 20423
20512: POP
20513: POP
// array := tmp ;
20514: LD_ADDR_VAR 0 1
20518: PUSH
20519: LD_VAR 0 10
20523: ST_TO_ADDR
// end ;
20524: GO 20405
20526: POP
20527: POP
// result := array ;
20528: LD_ADDR_VAR 0 5
20532: PUSH
20533: LD_VAR 0 1
20537: ST_TO_ADDR
// end ;
20538: LD_VAR 0 5
20542: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20543: LD_INT 0
20545: PPUSH
20546: PPUSH
// result := 0 ;
20547: LD_ADDR_VAR 0 3
20551: PUSH
20552: LD_INT 0
20554: ST_TO_ADDR
// if not array or not value in array then
20555: LD_VAR 0 1
20559: NOT
20560: IFTRUE 20575
20562: PUSH
20563: LD_VAR 0 2
20567: PUSH
20568: LD_VAR 0 1
20572: IN
20573: NOT
20574: OR
20575: IFFALSE 20579
// exit ;
20577: GO 20633
// for i = 1 to array do
20579: LD_ADDR_VAR 0 4
20583: PUSH
20584: DOUBLE
20585: LD_INT 1
20587: DEC
20588: ST_TO_ADDR
20589: LD_VAR 0 1
20593: PUSH
20594: FOR_TO
20595: IFFALSE 20631
// if value = array [ i ] then
20597: LD_VAR 0 2
20601: PUSH
20602: LD_VAR 0 1
20606: PUSH
20607: LD_VAR 0 4
20611: ARRAY
20612: EQUAL
20613: IFFALSE 20629
// begin result := i ;
20615: LD_ADDR_VAR 0 3
20619: PUSH
20620: LD_VAR 0 4
20624: ST_TO_ADDR
// exit ;
20625: POP
20626: POP
20627: GO 20633
// end ;
20629: GO 20594
20631: POP
20632: POP
// end ;
20633: LD_VAR 0 3
20637: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20638: LD_INT 0
20640: PPUSH
// vc_chassis := chassis ;
20641: LD_ADDR_OWVAR 37
20645: PUSH
20646: LD_VAR 0 1
20650: ST_TO_ADDR
// vc_engine := engine ;
20651: LD_ADDR_OWVAR 39
20655: PUSH
20656: LD_VAR 0 2
20660: ST_TO_ADDR
// vc_control := control ;
20661: LD_ADDR_OWVAR 38
20665: PUSH
20666: LD_VAR 0 3
20670: ST_TO_ADDR
// vc_weapon := weapon ;
20671: LD_ADDR_OWVAR 40
20675: PUSH
20676: LD_VAR 0 4
20680: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20681: LD_ADDR_OWVAR 41
20685: PUSH
20686: LD_VAR 0 5
20690: ST_TO_ADDR
// end ;
20691: LD_VAR 0 6
20695: RET
// export function WantPlant ( unit ) ; var task ; begin
20696: LD_INT 0
20698: PPUSH
20699: PPUSH
// result := false ;
20700: LD_ADDR_VAR 0 2
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20708: LD_ADDR_VAR 0 3
20712: PUSH
20713: LD_VAR 0 1
20717: PPUSH
20718: CALL_OW 437
20722: ST_TO_ADDR
// if task then
20723: LD_VAR 0 3
20727: IFFALSE 20755
// if task [ 1 ] [ 1 ] = p then
20729: LD_VAR 0 3
20733: PUSH
20734: LD_INT 1
20736: ARRAY
20737: PUSH
20738: LD_INT 1
20740: ARRAY
20741: PUSH
20742: LD_STRING p
20744: EQUAL
20745: IFFALSE 20755
// result := true ;
20747: LD_ADDR_VAR 0 2
20751: PUSH
20752: LD_INT 1
20754: ST_TO_ADDR
// end ;
20755: LD_VAR 0 2
20759: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20760: LD_INT 0
20762: PPUSH
20763: PPUSH
20764: PPUSH
20765: PPUSH
// if pos < 1 then
20766: LD_VAR 0 2
20770: PUSH
20771: LD_INT 1
20773: LESS
20774: IFFALSE 20778
// exit ;
20776: GO 21081
// if pos = 1 then
20778: LD_VAR 0 2
20782: PUSH
20783: LD_INT 1
20785: EQUAL
20786: IFFALSE 20819
// result := Replace ( arr , pos [ 1 ] , value ) else
20788: LD_ADDR_VAR 0 4
20792: PUSH
20793: LD_VAR 0 1
20797: PPUSH
20798: LD_VAR 0 2
20802: PUSH
20803: LD_INT 1
20805: ARRAY
20806: PPUSH
20807: LD_VAR 0 3
20811: PPUSH
20812: CALL_OW 1
20816: ST_TO_ADDR
20817: GO 21081
// begin tmp := arr ;
20819: LD_ADDR_VAR 0 6
20823: PUSH
20824: LD_VAR 0 1
20828: ST_TO_ADDR
// s_arr := [ tmp ] ;
20829: LD_ADDR_VAR 0 7
20833: PUSH
20834: LD_VAR 0 6
20838: PUSH
20839: EMPTY
20840: LIST
20841: ST_TO_ADDR
// for i = 1 to pos - 1 do
20842: LD_ADDR_VAR 0 5
20846: PUSH
20847: DOUBLE
20848: LD_INT 1
20850: DEC
20851: ST_TO_ADDR
20852: LD_VAR 0 2
20856: PUSH
20857: LD_INT 1
20859: MINUS
20860: PUSH
20861: FOR_TO
20862: IFFALSE 20907
// begin tmp := tmp [ pos [ i ] ] ;
20864: LD_ADDR_VAR 0 6
20868: PUSH
20869: LD_VAR 0 6
20873: PUSH
20874: LD_VAR 0 2
20878: PUSH
20879: LD_VAR 0 5
20883: ARRAY
20884: ARRAY
20885: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20886: LD_ADDR_VAR 0 7
20890: PUSH
20891: LD_VAR 0 7
20895: PUSH
20896: LD_VAR 0 6
20900: PUSH
20901: EMPTY
20902: LIST
20903: ADD
20904: ST_TO_ADDR
// end ;
20905: GO 20861
20907: POP
20908: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20909: LD_ADDR_VAR 0 6
20913: PUSH
20914: LD_VAR 0 6
20918: PPUSH
20919: LD_VAR 0 2
20923: PUSH
20924: LD_VAR 0 2
20928: ARRAY
20929: PPUSH
20930: LD_VAR 0 3
20934: PPUSH
20935: CALL_OW 1
20939: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20940: LD_ADDR_VAR 0 7
20944: PUSH
20945: LD_VAR 0 7
20949: PPUSH
20950: LD_VAR 0 7
20954: PPUSH
20955: LD_VAR 0 6
20959: PPUSH
20960: CALL_OW 1
20964: ST_TO_ADDR
// for i = s_arr downto 2 do
20965: LD_ADDR_VAR 0 5
20969: PUSH
20970: DOUBLE
20971: LD_VAR 0 7
20975: INC
20976: ST_TO_ADDR
20977: LD_INT 2
20979: PUSH
20980: FOR_DOWNTO
20981: IFFALSE 21065
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20983: LD_ADDR_VAR 0 6
20987: PUSH
20988: LD_VAR 0 7
20992: PUSH
20993: LD_VAR 0 5
20997: PUSH
20998: LD_INT 1
21000: MINUS
21001: ARRAY
21002: PPUSH
21003: LD_VAR 0 2
21007: PUSH
21008: LD_VAR 0 5
21012: PUSH
21013: LD_INT 1
21015: MINUS
21016: ARRAY
21017: PPUSH
21018: LD_VAR 0 7
21022: PUSH
21023: LD_VAR 0 5
21027: ARRAY
21028: PPUSH
21029: CALL_OW 1
21033: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21034: LD_ADDR_VAR 0 7
21038: PUSH
21039: LD_VAR 0 7
21043: PPUSH
21044: LD_VAR 0 5
21048: PUSH
21049: LD_INT 1
21051: MINUS
21052: PPUSH
21053: LD_VAR 0 6
21057: PPUSH
21058: CALL_OW 1
21062: ST_TO_ADDR
// end ;
21063: GO 20980
21065: POP
21066: POP
// result := s_arr [ 1 ] ;
21067: LD_ADDR_VAR 0 4
21071: PUSH
21072: LD_VAR 0 7
21076: PUSH
21077: LD_INT 1
21079: ARRAY
21080: ST_TO_ADDR
// end ; end ;
21081: LD_VAR 0 4
21085: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21086: LD_INT 0
21088: PPUSH
21089: PPUSH
// if not list then
21090: LD_VAR 0 1
21094: NOT
21095: IFFALSE 21099
// exit ;
21097: GO 21190
// i := list [ pos1 ] ;
21099: LD_ADDR_VAR 0 5
21103: PUSH
21104: LD_VAR 0 1
21108: PUSH
21109: LD_VAR 0 2
21113: ARRAY
21114: ST_TO_ADDR
// if not i then
21115: LD_VAR 0 5
21119: NOT
21120: IFFALSE 21124
// exit ;
21122: GO 21190
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21124: LD_ADDR_VAR 0 1
21128: PUSH
21129: LD_VAR 0 1
21133: PPUSH
21134: LD_VAR 0 2
21138: PPUSH
21139: LD_VAR 0 1
21143: PUSH
21144: LD_VAR 0 3
21148: ARRAY
21149: PPUSH
21150: CALL_OW 1
21154: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21155: LD_ADDR_VAR 0 1
21159: PUSH
21160: LD_VAR 0 1
21164: PPUSH
21165: LD_VAR 0 3
21169: PPUSH
21170: LD_VAR 0 5
21174: PPUSH
21175: CALL_OW 1
21179: ST_TO_ADDR
// result := list ;
21180: LD_ADDR_VAR 0 4
21184: PUSH
21185: LD_VAR 0 1
21189: ST_TO_ADDR
// end ;
21190: LD_VAR 0 4
21194: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21195: LD_INT 0
21197: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21198: LD_ADDR_VAR 0 5
21202: PUSH
21203: LD_VAR 0 1
21207: PPUSH
21208: CALL_OW 250
21212: PPUSH
21213: LD_VAR 0 1
21217: PPUSH
21218: CALL_OW 251
21222: PPUSH
21223: LD_VAR 0 2
21227: PPUSH
21228: LD_VAR 0 3
21232: PPUSH
21233: LD_VAR 0 4
21237: PPUSH
21238: CALL 21620 0 5
21242: ST_TO_ADDR
// end ;
21243: LD_VAR 0 5
21247: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21248: LD_INT 0
21250: PPUSH
21251: PPUSH
21252: PPUSH
21253: PPUSH
// if not list or not unit then
21254: LD_VAR 0 2
21258: NOT
21259: IFTRUE 21268
21261: PUSH
21262: LD_VAR 0 1
21266: NOT
21267: OR
21268: IFFALSE 21272
// exit ;
21270: GO 21615
// result := [ ] ;
21272: LD_ADDR_VAR 0 5
21276: PUSH
21277: EMPTY
21278: ST_TO_ADDR
// for i in list do
21279: LD_ADDR_VAR 0 6
21283: PUSH
21284: LD_VAR 0 2
21288: PUSH
21289: FOR_IN
21290: IFFALSE 21508
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21292: LD_ADDR_VAR 0 8
21296: PUSH
21297: LD_VAR 0 1
21301: PPUSH
21302: LD_VAR 0 6
21306: PUSH
21307: LD_INT 1
21309: ARRAY
21310: PPUSH
21311: LD_VAR 0 6
21315: PUSH
21316: LD_INT 2
21318: ARRAY
21319: PPUSH
21320: CALL_OW 297
21324: ST_TO_ADDR
// if not Count ( result ) then
21325: LD_VAR 0 5
21329: PPUSH
21330: CALL 17842 0 1
21334: NOT
21335: IFFALSE 21368
// begin result := Join ( result , [ i , tmp ] ) ;
21337: LD_ADDR_VAR 0 5
21341: PUSH
21342: LD_VAR 0 5
21346: PPUSH
21347: LD_VAR 0 6
21351: PUSH
21352: LD_VAR 0 8
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PPUSH
21361: CALL 53818 0 2
21365: ST_TO_ADDR
// continue ;
21366: GO 21289
// end ; if result [ result ] [ 2 ] <= tmp then
21368: LD_VAR 0 5
21372: PUSH
21373: LD_VAR 0 5
21377: ARRAY
21378: PUSH
21379: LD_INT 2
21381: ARRAY
21382: PUSH
21383: LD_VAR 0 8
21387: LESSEQUAL
21388: IFFALSE 21421
// result := Join ( result , [ i , tmp ] ) else
21390: LD_ADDR_VAR 0 5
21394: PUSH
21395: LD_VAR 0 5
21399: PPUSH
21400: LD_VAR 0 6
21404: PUSH
21405: LD_VAR 0 8
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PPUSH
21414: CALL 53818 0 2
21418: ST_TO_ADDR
21419: GO 21506
// begin for j := 1 to Count ( result ) do
21421: LD_ADDR_VAR 0 7
21425: PUSH
21426: DOUBLE
21427: LD_INT 1
21429: DEC
21430: ST_TO_ADDR
21431: LD_VAR 0 5
21435: PPUSH
21436: CALL 17842 0 1
21440: PUSH
21441: FOR_TO
21442: IFFALSE 21504
// begin if tmp < result [ j ] [ 2 ] then
21444: LD_VAR 0 8
21448: PUSH
21449: LD_VAR 0 5
21453: PUSH
21454: LD_VAR 0 7
21458: ARRAY
21459: PUSH
21460: LD_INT 2
21462: ARRAY
21463: LESS
21464: IFFALSE 21502
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21466: LD_ADDR_VAR 0 5
21470: PUSH
21471: LD_VAR 0 5
21475: PPUSH
21476: LD_VAR 0 7
21480: PPUSH
21481: LD_VAR 0 6
21485: PUSH
21486: LD_VAR 0 8
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PPUSH
21495: CALL_OW 2
21499: ST_TO_ADDR
// break ;
21500: GO 21504
// end ; end ;
21502: GO 21441
21504: POP
21505: POP
// end ; end ;
21506: GO 21289
21508: POP
21509: POP
// if result and not asc then
21510: LD_VAR 0 5
21514: IFFALSE 21523
21516: PUSH
21517: LD_VAR 0 3
21521: NOT
21522: AND
21523: IFFALSE 21540
// result := ReverseArray ( result ) ;
21525: LD_ADDR_VAR 0 5
21529: PUSH
21530: LD_VAR 0 5
21534: PPUSH
21535: CALL 48898 0 1
21539: ST_TO_ADDR
// tmp := [ ] ;
21540: LD_ADDR_VAR 0 8
21544: PUSH
21545: EMPTY
21546: ST_TO_ADDR
// if mode then
21547: LD_VAR 0 4
21551: IFFALSE 21615
// begin for i := 1 to result do
21553: LD_ADDR_VAR 0 6
21557: PUSH
21558: DOUBLE
21559: LD_INT 1
21561: DEC
21562: ST_TO_ADDR
21563: LD_VAR 0 5
21567: PUSH
21568: FOR_TO
21569: IFFALSE 21603
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21571: LD_ADDR_VAR 0 8
21575: PUSH
21576: LD_VAR 0 8
21580: PPUSH
21581: LD_VAR 0 5
21585: PUSH
21586: LD_VAR 0 6
21590: ARRAY
21591: PUSH
21592: LD_INT 1
21594: ARRAY
21595: PPUSH
21596: CALL 53818 0 2
21600: ST_TO_ADDR
21601: GO 21568
21603: POP
21604: POP
// result := tmp ;
21605: LD_ADDR_VAR 0 5
21609: PUSH
21610: LD_VAR 0 8
21614: ST_TO_ADDR
// end ; end ;
21615: LD_VAR 0 5
21619: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21620: LD_INT 0
21622: PPUSH
21623: PPUSH
21624: PPUSH
21625: PPUSH
// if not list then
21626: LD_VAR 0 3
21630: NOT
21631: IFFALSE 21635
// exit ;
21633: GO 22025
// result := [ ] ;
21635: LD_ADDR_VAR 0 6
21639: PUSH
21640: EMPTY
21641: ST_TO_ADDR
// for i in list do
21642: LD_ADDR_VAR 0 7
21646: PUSH
21647: LD_VAR 0 3
21651: PUSH
21652: FOR_IN
21653: IFFALSE 21855
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21655: LD_ADDR_VAR 0 9
21659: PUSH
21660: LD_VAR 0 7
21664: PPUSH
21665: LD_VAR 0 1
21669: PPUSH
21670: LD_VAR 0 2
21674: PPUSH
21675: CALL_OW 297
21679: ST_TO_ADDR
// if not result then
21680: LD_VAR 0 6
21684: NOT
21685: IFFALSE 21711
// result := [ [ i , tmp ] ] else
21687: LD_ADDR_VAR 0 6
21691: PUSH
21692: LD_VAR 0 7
21696: PUSH
21697: LD_VAR 0 9
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: EMPTY
21707: LIST
21708: ST_TO_ADDR
21709: GO 21853
// begin if result [ result ] [ 2 ] <= tmp then
21711: LD_VAR 0 6
21715: PUSH
21716: LD_VAR 0 6
21720: ARRAY
21721: PUSH
21722: LD_INT 2
21724: ARRAY
21725: PUSH
21726: LD_VAR 0 9
21730: LESSEQUAL
21731: IFFALSE 21773
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21733: LD_ADDR_VAR 0 6
21737: PUSH
21738: LD_VAR 0 6
21742: PPUSH
21743: LD_VAR 0 6
21747: PUSH
21748: LD_INT 1
21750: PLUS
21751: PPUSH
21752: LD_VAR 0 7
21756: PUSH
21757: LD_VAR 0 9
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PPUSH
21766: CALL_OW 2
21770: ST_TO_ADDR
21771: GO 21853
// for j := 1 to result do
21773: LD_ADDR_VAR 0 8
21777: PUSH
21778: DOUBLE
21779: LD_INT 1
21781: DEC
21782: ST_TO_ADDR
21783: LD_VAR 0 6
21787: PUSH
21788: FOR_TO
21789: IFFALSE 21851
// begin if tmp < result [ j ] [ 2 ] then
21791: LD_VAR 0 9
21795: PUSH
21796: LD_VAR 0 6
21800: PUSH
21801: LD_VAR 0 8
21805: ARRAY
21806: PUSH
21807: LD_INT 2
21809: ARRAY
21810: LESS
21811: IFFALSE 21849
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21813: LD_ADDR_VAR 0 6
21817: PUSH
21818: LD_VAR 0 6
21822: PPUSH
21823: LD_VAR 0 8
21827: PPUSH
21828: LD_VAR 0 7
21832: PUSH
21833: LD_VAR 0 9
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PPUSH
21842: CALL_OW 2
21846: ST_TO_ADDR
// break ;
21847: GO 21851
// end ; end ;
21849: GO 21788
21851: POP
21852: POP
// end ; end ;
21853: GO 21652
21855: POP
21856: POP
// if result and not asc then
21857: LD_VAR 0 6
21861: IFFALSE 21870
21863: PUSH
21864: LD_VAR 0 4
21868: NOT
21869: AND
21870: IFFALSE 21945
// begin tmp := result ;
21872: LD_ADDR_VAR 0 9
21876: PUSH
21877: LD_VAR 0 6
21881: ST_TO_ADDR
// for i = tmp downto 1 do
21882: LD_ADDR_VAR 0 7
21886: PUSH
21887: DOUBLE
21888: LD_VAR 0 9
21892: INC
21893: ST_TO_ADDR
21894: LD_INT 1
21896: PUSH
21897: FOR_DOWNTO
21898: IFFALSE 21943
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21900: LD_ADDR_VAR 0 6
21904: PUSH
21905: LD_VAR 0 6
21909: PPUSH
21910: LD_VAR 0 9
21914: PUSH
21915: LD_VAR 0 7
21919: MINUS
21920: PUSH
21921: LD_INT 1
21923: PLUS
21924: PPUSH
21925: LD_VAR 0 9
21929: PUSH
21930: LD_VAR 0 7
21934: ARRAY
21935: PPUSH
21936: CALL_OW 1
21940: ST_TO_ADDR
21941: GO 21897
21943: POP
21944: POP
// end ; tmp := [ ] ;
21945: LD_ADDR_VAR 0 9
21949: PUSH
21950: EMPTY
21951: ST_TO_ADDR
// if mode then
21952: LD_VAR 0 5
21956: IFFALSE 22025
// begin for i = 1 to result do
21958: LD_ADDR_VAR 0 7
21962: PUSH
21963: DOUBLE
21964: LD_INT 1
21966: DEC
21967: ST_TO_ADDR
21968: LD_VAR 0 6
21972: PUSH
21973: FOR_TO
21974: IFFALSE 22013
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21976: LD_ADDR_VAR 0 9
21980: PUSH
21981: LD_VAR 0 9
21985: PPUSH
21986: LD_VAR 0 7
21990: PPUSH
21991: LD_VAR 0 6
21995: PUSH
21996: LD_VAR 0 7
22000: ARRAY
22001: PUSH
22002: LD_INT 1
22004: ARRAY
22005: PPUSH
22006: CALL_OW 1
22010: ST_TO_ADDR
22011: GO 21973
22013: POP
22014: POP
// result := tmp ;
22015: LD_ADDR_VAR 0 6
22019: PUSH
22020: LD_VAR 0 9
22024: ST_TO_ADDR
// end ; end ;
22025: LD_VAR 0 6
22029: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22030: LD_INT 0
22032: PPUSH
22033: PPUSH
22034: PPUSH
22035: PPUSH
22036: PPUSH
22037: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22038: LD_ADDR_VAR 0 5
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: LD_INT 0
22048: PUSH
22049: LD_INT 0
22051: PUSH
22052: EMPTY
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: ST_TO_ADDR
// if not x or not y then
22060: LD_VAR 0 2
22064: NOT
22065: IFTRUE 22074
22067: PUSH
22068: LD_VAR 0 3
22072: NOT
22073: OR
22074: IFFALSE 22078
// exit ;
22076: GO 23734
// if not range then
22078: LD_VAR 0 4
22082: NOT
22083: IFFALSE 22093
// range := 10 ;
22085: LD_ADDR_VAR 0 4
22089: PUSH
22090: LD_INT 10
22092: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22093: LD_ADDR_VAR 0 8
22097: PUSH
22098: LD_INT 81
22100: PUSH
22101: LD_VAR 0 1
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 92
22112: PUSH
22113: LD_VAR 0 2
22117: PUSH
22118: LD_VAR 0 3
22122: PUSH
22123: LD_VAR 0 4
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 3
22136: PUSH
22137: LD_INT 21
22139: PUSH
22140: LD_INT 3
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: LIST
22155: PPUSH
22156: CALL_OW 69
22160: ST_TO_ADDR
// if not tmp then
22161: LD_VAR 0 8
22165: NOT
22166: IFFALSE 22170
// exit ;
22168: GO 23734
// for i in tmp do
22170: LD_ADDR_VAR 0 6
22174: PUSH
22175: LD_VAR 0 8
22179: PUSH
22180: FOR_IN
22181: IFFALSE 23709
// begin points := [ 0 , 0 , 0 ] ;
22183: LD_ADDR_VAR 0 9
22187: PUSH
22188: LD_INT 0
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: LD_INT 0
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: ST_TO_ADDR
// bpoints := 1 ;
22202: LD_ADDR_VAR 0 10
22206: PUSH
22207: LD_INT 1
22209: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22210: LD_VAR 0 6
22214: PPUSH
22215: CALL_OW 247
22219: PUSH
22220: LD_INT 1
22222: DOUBLE
22223: EQUAL
22224: IFTRUE 22228
22226: GO 22810
22228: POP
// begin if GetClass ( i ) = 1 then
22229: LD_VAR 0 6
22233: PPUSH
22234: CALL_OW 257
22238: PUSH
22239: LD_INT 1
22241: EQUAL
22242: IFFALSE 22263
// points := [ 10 , 5 , 3 ] ;
22244: LD_ADDR_VAR 0 9
22248: PUSH
22249: LD_INT 10
22251: PUSH
22252: LD_INT 5
22254: PUSH
22255: LD_INT 3
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22263: LD_VAR 0 6
22267: PPUSH
22268: CALL_OW 257
22272: PUSH
22273: LD_INT 2
22275: PUSH
22276: LD_INT 3
22278: PUSH
22279: LD_INT 4
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: LIST
22286: IN
22287: IFFALSE 22308
// points := [ 3 , 2 , 1 ] ;
22289: LD_ADDR_VAR 0 9
22293: PUSH
22294: LD_INT 3
22296: PUSH
22297: LD_INT 2
22299: PUSH
22300: LD_INT 1
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: LIST
22307: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22308: LD_VAR 0 6
22312: PPUSH
22313: CALL_OW 257
22317: PUSH
22318: LD_INT 5
22320: EQUAL
22321: IFFALSE 22342
// points := [ 130 , 5 , 2 ] ;
22323: LD_ADDR_VAR 0 9
22327: PUSH
22328: LD_INT 130
22330: PUSH
22331: LD_INT 5
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: LIST
22341: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22342: LD_VAR 0 6
22346: PPUSH
22347: CALL_OW 257
22351: PUSH
22352: LD_INT 8
22354: EQUAL
22355: IFFALSE 22376
// points := [ 35 , 35 , 30 ] ;
22357: LD_ADDR_VAR 0 9
22361: PUSH
22362: LD_INT 35
22364: PUSH
22365: LD_INT 35
22367: PUSH
22368: LD_INT 30
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22376: LD_VAR 0 6
22380: PPUSH
22381: CALL_OW 257
22385: PUSH
22386: LD_INT 9
22388: EQUAL
22389: IFFALSE 22410
// points := [ 20 , 55 , 40 ] ;
22391: LD_ADDR_VAR 0 9
22395: PUSH
22396: LD_INT 20
22398: PUSH
22399: LD_INT 55
22401: PUSH
22402: LD_INT 40
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: LIST
22409: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22410: LD_VAR 0 6
22414: PPUSH
22415: CALL_OW 257
22419: PUSH
22420: LD_INT 12
22422: PUSH
22423: LD_INT 16
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: IN
22430: IFFALSE 22451
// points := [ 5 , 3 , 2 ] ;
22432: LD_ADDR_VAR 0 9
22436: PUSH
22437: LD_INT 5
22439: PUSH
22440: LD_INT 3
22442: PUSH
22443: LD_INT 2
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: LIST
22450: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22451: LD_VAR 0 6
22455: PPUSH
22456: CALL_OW 257
22460: PUSH
22461: LD_INT 17
22463: EQUAL
22464: IFFALSE 22485
// points := [ 100 , 50 , 75 ] ;
22466: LD_ADDR_VAR 0 9
22470: PUSH
22471: LD_INT 100
22473: PUSH
22474: LD_INT 50
22476: PUSH
22477: LD_INT 75
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22485: LD_VAR 0 6
22489: PPUSH
22490: CALL_OW 257
22494: PUSH
22495: LD_INT 15
22497: EQUAL
22498: IFFALSE 22519
// points := [ 10 , 5 , 3 ] ;
22500: LD_ADDR_VAR 0 9
22504: PUSH
22505: LD_INT 10
22507: PUSH
22508: LD_INT 5
22510: PUSH
22511: LD_INT 3
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22519: LD_VAR 0 6
22523: PPUSH
22524: CALL_OW 257
22528: PUSH
22529: LD_INT 14
22531: EQUAL
22532: IFFALSE 22553
// points := [ 10 , 0 , 0 ] ;
22534: LD_ADDR_VAR 0 9
22538: PUSH
22539: LD_INT 10
22541: PUSH
22542: LD_INT 0
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22553: LD_VAR 0 6
22557: PPUSH
22558: CALL_OW 257
22562: PUSH
22563: LD_INT 11
22565: EQUAL
22566: IFFALSE 22587
// points := [ 30 , 10 , 5 ] ;
22568: LD_ADDR_VAR 0 9
22572: PUSH
22573: LD_INT 30
22575: PUSH
22576: LD_INT 10
22578: PUSH
22579: LD_INT 5
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22587: LD_VAR 0 1
22591: PPUSH
22592: LD_INT 5
22594: PPUSH
22595: CALL_OW 321
22599: PUSH
22600: LD_INT 2
22602: EQUAL
22603: IFFALSE 22620
// bpoints := bpoints * 1.8 ;
22605: LD_ADDR_VAR 0 10
22609: PUSH
22610: LD_VAR 0 10
22614: PUSH
22615: LD_REAL  1.80000000000000E+0000
22618: MUL
22619: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22620: LD_VAR 0 6
22624: PPUSH
22625: CALL_OW 257
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: LD_INT 4
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: IN
22648: IFFALSE 22668
22650: PUSH
22651: LD_VAR 0 1
22655: PPUSH
22656: LD_INT 51
22658: PPUSH
22659: CALL_OW 321
22663: PUSH
22664: LD_INT 2
22666: EQUAL
22667: AND
22668: IFFALSE 22685
// bpoints := bpoints * 1.2 ;
22670: LD_ADDR_VAR 0 10
22674: PUSH
22675: LD_VAR 0 10
22679: PUSH
22680: LD_REAL  1.20000000000000E+0000
22683: MUL
22684: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22685: LD_VAR 0 6
22689: PPUSH
22690: CALL_OW 257
22694: PUSH
22695: LD_INT 5
22697: PUSH
22698: LD_INT 7
22700: PUSH
22701: LD_INT 9
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: LIST
22708: IN
22709: IFFALSE 22729
22711: PUSH
22712: LD_VAR 0 1
22716: PPUSH
22717: LD_INT 52
22719: PPUSH
22720: CALL_OW 321
22724: PUSH
22725: LD_INT 2
22727: EQUAL
22728: AND
22729: IFFALSE 22746
// bpoints := bpoints * 1.5 ;
22731: LD_ADDR_VAR 0 10
22735: PUSH
22736: LD_VAR 0 10
22740: PUSH
22741: LD_REAL  1.50000000000000E+0000
22744: MUL
22745: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22746: LD_VAR 0 1
22750: PPUSH
22751: LD_INT 66
22753: PPUSH
22754: CALL_OW 321
22758: PUSH
22759: LD_INT 2
22761: EQUAL
22762: IFFALSE 22779
// bpoints := bpoints * 1.1 ;
22764: LD_ADDR_VAR 0 10
22768: PUSH
22769: LD_VAR 0 10
22773: PUSH
22774: LD_REAL  1.10000000000000E+0000
22777: MUL
22778: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22779: LD_ADDR_VAR 0 10
22783: PUSH
22784: LD_VAR 0 10
22788: PUSH
22789: LD_VAR 0 6
22793: PPUSH
22794: LD_INT 1
22796: PPUSH
22797: CALL_OW 259
22801: PUSH
22802: LD_REAL  1.15000000000000E+0000
22805: MUL
22806: MUL
22807: ST_TO_ADDR
// end ; unit_vehicle :
22808: GO 23638
22810: LD_INT 2
22812: DOUBLE
22813: EQUAL
22814: IFTRUE 22818
22816: GO 23626
22818: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22819: LD_VAR 0 6
22823: PPUSH
22824: CALL_OW 264
22828: PUSH
22829: LD_INT 2
22831: PUSH
22832: LD_INT 42
22834: PUSH
22835: LD_INT 24
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: IN
22843: IFFALSE 22864
// points := [ 25 , 5 , 3 ] ;
22845: LD_ADDR_VAR 0 9
22849: PUSH
22850: LD_INT 25
22852: PUSH
22853: LD_INT 5
22855: PUSH
22856: LD_INT 3
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22864: LD_VAR 0 6
22868: PPUSH
22869: CALL_OW 264
22873: PUSH
22874: LD_INT 4
22876: PUSH
22877: LD_INT 43
22879: PUSH
22880: LD_INT 25
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: IN
22888: IFFALSE 22909
// points := [ 40 , 15 , 5 ] ;
22890: LD_ADDR_VAR 0 9
22894: PUSH
22895: LD_INT 40
22897: PUSH
22898: LD_INT 15
22900: PUSH
22901: LD_INT 5
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: LIST
22908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22909: LD_VAR 0 6
22913: PPUSH
22914: CALL_OW 264
22918: PUSH
22919: LD_INT 3
22921: PUSH
22922: LD_INT 23
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: IN
22929: IFFALSE 22950
// points := [ 7 , 25 , 8 ] ;
22931: LD_ADDR_VAR 0 9
22935: PUSH
22936: LD_INT 7
22938: PUSH
22939: LD_INT 25
22941: PUSH
22942: LD_INT 8
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22950: LD_VAR 0 6
22954: PPUSH
22955: CALL_OW 264
22959: PUSH
22960: LD_INT 5
22962: PUSH
22963: LD_INT 27
22965: PUSH
22966: LD_INT 44
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: IN
22974: IFFALSE 22995
// points := [ 14 , 50 , 16 ] ;
22976: LD_ADDR_VAR 0 9
22980: PUSH
22981: LD_INT 14
22983: PUSH
22984: LD_INT 50
22986: PUSH
22987: LD_INT 16
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: LIST
22994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22995: LD_VAR 0 6
22999: PPUSH
23000: CALL_OW 264
23004: PUSH
23005: LD_INT 6
23007: PUSH
23008: LD_INT 46
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: IN
23015: IFFALSE 23036
// points := [ 32 , 120 , 70 ] ;
23017: LD_ADDR_VAR 0 9
23021: PUSH
23022: LD_INT 32
23024: PUSH
23025: LD_INT 120
23027: PUSH
23028: LD_INT 70
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: LIST
23035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23036: LD_VAR 0 6
23040: PPUSH
23041: CALL_OW 264
23045: PUSH
23046: LD_INT 7
23048: PUSH
23049: LD_INT 28
23051: PUSH
23052: LD_INT 45
23054: PUSH
23055: LD_INT 92
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: IN
23064: IFFALSE 23085
// points := [ 35 , 20 , 45 ] ;
23066: LD_ADDR_VAR 0 9
23070: PUSH
23071: LD_INT 35
23073: PUSH
23074: LD_INT 20
23076: PUSH
23077: LD_INT 45
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23085: LD_VAR 0 6
23089: PPUSH
23090: CALL_OW 264
23094: PUSH
23095: LD_INT 47
23097: PUSH
23098: EMPTY
23099: LIST
23100: IN
23101: IFFALSE 23122
// points := [ 67 , 45 , 75 ] ;
23103: LD_ADDR_VAR 0 9
23107: PUSH
23108: LD_INT 67
23110: PUSH
23111: LD_INT 45
23113: PUSH
23114: LD_INT 75
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: LIST
23121: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23122: LD_VAR 0 6
23126: PPUSH
23127: CALL_OW 264
23131: PUSH
23132: LD_INT 26
23134: PUSH
23135: EMPTY
23136: LIST
23137: IN
23138: IFFALSE 23159
// points := [ 120 , 30 , 80 ] ;
23140: LD_ADDR_VAR 0 9
23144: PUSH
23145: LD_INT 120
23147: PUSH
23148: LD_INT 30
23150: PUSH
23151: LD_INT 80
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: LIST
23158: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23159: LD_VAR 0 6
23163: PPUSH
23164: CALL_OW 264
23168: PUSH
23169: LD_INT 22
23171: PUSH
23172: EMPTY
23173: LIST
23174: IN
23175: IFFALSE 23196
// points := [ 40 , 1 , 1 ] ;
23177: LD_ADDR_VAR 0 9
23181: PUSH
23182: LD_INT 40
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23196: LD_VAR 0 6
23200: PPUSH
23201: CALL_OW 264
23205: PUSH
23206: LD_INT 29
23208: PUSH
23209: EMPTY
23210: LIST
23211: IN
23212: IFFALSE 23233
// points := [ 70 , 200 , 400 ] ;
23214: LD_ADDR_VAR 0 9
23218: PUSH
23219: LD_INT 70
23221: PUSH
23222: LD_INT 200
23224: PUSH
23225: LD_INT 400
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: LIST
23232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23233: LD_VAR 0 6
23237: PPUSH
23238: CALL_OW 264
23242: PUSH
23243: LD_INT 14
23245: PUSH
23246: LD_INT 53
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: IN
23253: IFFALSE 23274
// points := [ 40 , 10 , 20 ] ;
23255: LD_ADDR_VAR 0 9
23259: PUSH
23260: LD_INT 40
23262: PUSH
23263: LD_INT 10
23265: PUSH
23266: LD_INT 20
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: LIST
23273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23274: LD_VAR 0 6
23278: PPUSH
23279: CALL_OW 264
23283: PUSH
23284: LD_INT 9
23286: PUSH
23287: EMPTY
23288: LIST
23289: IN
23290: IFFALSE 23311
// points := [ 5 , 70 , 20 ] ;
23292: LD_ADDR_VAR 0 9
23296: PUSH
23297: LD_INT 5
23299: PUSH
23300: LD_INT 70
23302: PUSH
23303: LD_INT 20
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: LIST
23310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23311: LD_VAR 0 6
23315: PPUSH
23316: CALL_OW 264
23320: PUSH
23321: LD_INT 10
23323: PUSH
23324: EMPTY
23325: LIST
23326: IN
23327: IFFALSE 23348
// points := [ 35 , 110 , 70 ] ;
23329: LD_ADDR_VAR 0 9
23333: PUSH
23334: LD_INT 35
23336: PUSH
23337: LD_INT 110
23339: PUSH
23340: LD_INT 70
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23348: LD_VAR 0 6
23352: PPUSH
23353: CALL_OW 265
23357: PUSH
23358: LD_INT 25
23360: EQUAL
23361: IFFALSE 23382
// points := [ 80 , 65 , 100 ] ;
23363: LD_ADDR_VAR 0 9
23367: PUSH
23368: LD_INT 80
23370: PUSH
23371: LD_INT 65
23373: PUSH
23374: LD_INT 100
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23382: LD_VAR 0 6
23386: PPUSH
23387: CALL_OW 263
23391: PUSH
23392: LD_INT 1
23394: EQUAL
23395: IFFALSE 23430
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23397: LD_ADDR_VAR 0 10
23401: PUSH
23402: LD_VAR 0 10
23406: PUSH
23407: LD_VAR 0 6
23411: PPUSH
23412: CALL_OW 311
23416: PPUSH
23417: LD_INT 3
23419: PPUSH
23420: CALL_OW 259
23424: PUSH
23425: LD_INT 4
23427: MUL
23428: MUL
23429: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23430: LD_VAR 0 6
23434: PPUSH
23435: CALL_OW 263
23439: PUSH
23440: LD_INT 2
23442: EQUAL
23443: IFFALSE 23494
// begin j := IsControledBy ( i ) ;
23445: LD_ADDR_VAR 0 7
23449: PUSH
23450: LD_VAR 0 6
23454: PPUSH
23455: CALL_OW 312
23459: ST_TO_ADDR
// if j then
23460: LD_VAR 0 7
23464: IFFALSE 23494
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23466: LD_ADDR_VAR 0 10
23470: PUSH
23471: LD_VAR 0 10
23475: PUSH
23476: LD_VAR 0 7
23480: PPUSH
23481: LD_INT 3
23483: PPUSH
23484: CALL_OW 259
23488: PUSH
23489: LD_INT 3
23491: MUL
23492: MUL
23493: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23494: LD_VAR 0 6
23498: PPUSH
23499: CALL_OW 264
23503: PUSH
23504: LD_INT 5
23506: PUSH
23507: LD_INT 6
23509: PUSH
23510: LD_INT 46
23512: PUSH
23513: LD_INT 44
23515: PUSH
23516: LD_INT 47
23518: PUSH
23519: LD_INT 45
23521: PUSH
23522: LD_INT 28
23524: PUSH
23525: LD_INT 7
23527: PUSH
23528: LD_INT 27
23530: PUSH
23531: LD_INT 29
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: IN
23546: IFFALSE 23566
23548: PUSH
23549: LD_VAR 0 1
23553: PPUSH
23554: LD_INT 52
23556: PPUSH
23557: CALL_OW 321
23561: PUSH
23562: LD_INT 2
23564: EQUAL
23565: AND
23566: IFFALSE 23583
// bpoints := bpoints * 1.2 ;
23568: LD_ADDR_VAR 0 10
23572: PUSH
23573: LD_VAR 0 10
23577: PUSH
23578: LD_REAL  1.20000000000000E+0000
23581: MUL
23582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23583: LD_VAR 0 6
23587: PPUSH
23588: CALL_OW 264
23592: PUSH
23593: LD_INT 6
23595: PUSH
23596: LD_INT 46
23598: PUSH
23599: LD_INT 47
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: IN
23607: IFFALSE 23624
// bpoints := bpoints * 1.2 ;
23609: LD_ADDR_VAR 0 10
23613: PUSH
23614: LD_VAR 0 10
23618: PUSH
23619: LD_REAL  1.20000000000000E+0000
23622: MUL
23623: ST_TO_ADDR
// end ; unit_building :
23624: GO 23638
23626: LD_INT 3
23628: DOUBLE
23629: EQUAL
23630: IFTRUE 23634
23632: GO 23637
23634: POP
// ; end ;
23635: GO 23638
23637: POP
// for j = 1 to 3 do
23638: LD_ADDR_VAR 0 7
23642: PUSH
23643: DOUBLE
23644: LD_INT 1
23646: DEC
23647: ST_TO_ADDR
23648: LD_INT 3
23650: PUSH
23651: FOR_TO
23652: IFFALSE 23705
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23654: LD_ADDR_VAR 0 5
23658: PUSH
23659: LD_VAR 0 5
23663: PPUSH
23664: LD_VAR 0 7
23668: PPUSH
23669: LD_VAR 0 5
23673: PUSH
23674: LD_VAR 0 7
23678: ARRAY
23679: PUSH
23680: LD_VAR 0 9
23684: PUSH
23685: LD_VAR 0 7
23689: ARRAY
23690: PUSH
23691: LD_VAR 0 10
23695: MUL
23696: PLUS
23697: PPUSH
23698: CALL_OW 1
23702: ST_TO_ADDR
23703: GO 23651
23705: POP
23706: POP
// end ;
23707: GO 22180
23709: POP
23710: POP
// result := Replace ( result , 4 , tmp ) ;
23711: LD_ADDR_VAR 0 5
23715: PUSH
23716: LD_VAR 0 5
23720: PPUSH
23721: LD_INT 4
23723: PPUSH
23724: LD_VAR 0 8
23728: PPUSH
23729: CALL_OW 1
23733: ST_TO_ADDR
// end ;
23734: LD_VAR 0 5
23738: RET
// export function DangerAtRange ( unit , range ) ; begin
23739: LD_INT 0
23741: PPUSH
// if not unit then
23742: LD_VAR 0 1
23746: NOT
23747: IFFALSE 23751
// exit ;
23749: GO 23796
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23751: LD_ADDR_VAR 0 3
23755: PUSH
23756: LD_VAR 0 1
23760: PPUSH
23761: CALL_OW 255
23765: PPUSH
23766: LD_VAR 0 1
23770: PPUSH
23771: CALL_OW 250
23775: PPUSH
23776: LD_VAR 0 1
23780: PPUSH
23781: CALL_OW 251
23785: PPUSH
23786: LD_VAR 0 2
23790: PPUSH
23791: CALL 22030 0 4
23795: ST_TO_ADDR
// end ;
23796: LD_VAR 0 3
23800: RET
// export function DangerInArea ( side , area ) ; begin
23801: LD_INT 0
23803: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23804: LD_ADDR_VAR 0 3
23808: PUSH
23809: LD_VAR 0 2
23813: PPUSH
23814: LD_INT 81
23816: PUSH
23817: LD_VAR 0 1
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PPUSH
23826: CALL_OW 70
23830: ST_TO_ADDR
// end ;
23831: LD_VAR 0 3
23835: RET
// export function IsExtension ( b ) ; begin
23836: LD_INT 0
23838: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23839: LD_ADDR_VAR 0 2
23843: PUSH
23844: LD_VAR 0 1
23848: PUSH
23849: LD_INT 23
23851: PUSH
23852: LD_INT 20
23854: PUSH
23855: LD_INT 22
23857: PUSH
23858: LD_INT 17
23860: PUSH
23861: LD_INT 24
23863: PUSH
23864: LD_INT 21
23866: PUSH
23867: LD_INT 19
23869: PUSH
23870: LD_INT 16
23872: PUSH
23873: LD_INT 25
23875: PUSH
23876: LD_INT 18
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: IN
23891: ST_TO_ADDR
// end ;
23892: LD_VAR 0 2
23896: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23897: LD_INT 0
23899: PPUSH
23900: PPUSH
23901: PPUSH
// result := [ ] ;
23902: LD_ADDR_VAR 0 4
23906: PUSH
23907: EMPTY
23908: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23909: LD_ADDR_VAR 0 5
23913: PUSH
23914: LD_VAR 0 2
23918: PPUSH
23919: LD_INT 21
23921: PUSH
23922: LD_INT 3
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PPUSH
23929: CALL_OW 70
23933: ST_TO_ADDR
// if not tmp then
23934: LD_VAR 0 5
23938: NOT
23939: IFFALSE 23943
// exit ;
23941: GO 24007
// if checkLink then
23943: LD_VAR 0 3
23947: IFFALSE 23997
// begin for i in tmp do
23949: LD_ADDR_VAR 0 6
23953: PUSH
23954: LD_VAR 0 5
23958: PUSH
23959: FOR_IN
23960: IFFALSE 23995
// if GetBase ( i ) <> base then
23962: LD_VAR 0 6
23966: PPUSH
23967: CALL_OW 274
23971: PUSH
23972: LD_VAR 0 1
23976: NONEQUAL
23977: IFFALSE 23993
// ComLinkToBase ( base , i ) ;
23979: LD_VAR 0 1
23983: PPUSH
23984: LD_VAR 0 6
23988: PPUSH
23989: CALL_OW 169
23993: GO 23959
23995: POP
23996: POP
// end ; result := tmp ;
23997: LD_ADDR_VAR 0 4
24001: PUSH
24002: LD_VAR 0 5
24006: ST_TO_ADDR
// end ;
24007: LD_VAR 0 4
24011: RET
// export function ComComplete ( units , b ) ; var i ; begin
24012: LD_INT 0
24014: PPUSH
24015: PPUSH
// if not units then
24016: LD_VAR 0 1
24020: NOT
24021: IFFALSE 24025
// exit ;
24023: GO 24115
// for i in units do
24025: LD_ADDR_VAR 0 4
24029: PUSH
24030: LD_VAR 0 1
24034: PUSH
24035: FOR_IN
24036: IFFALSE 24113
// if BuildingStatus ( b ) = bs_build then
24038: LD_VAR 0 2
24042: PPUSH
24043: CALL_OW 461
24047: PUSH
24048: LD_INT 1
24050: EQUAL
24051: IFFALSE 24111
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24053: LD_VAR 0 4
24057: PPUSH
24058: LD_STRING h
24060: PUSH
24061: LD_VAR 0 2
24065: PPUSH
24066: CALL_OW 250
24070: PUSH
24071: LD_VAR 0 2
24075: PPUSH
24076: CALL_OW 251
24080: PUSH
24081: LD_VAR 0 2
24085: PUSH
24086: LD_INT 0
24088: PUSH
24089: LD_INT 0
24091: PUSH
24092: LD_INT 0
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: PUSH
24104: EMPTY
24105: LIST
24106: PPUSH
24107: CALL_OW 446
24111: GO 24035
24113: POP
24114: POP
// end ;
24115: LD_VAR 0 3
24119: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24120: LD_INT 0
24122: PPUSH
24123: PPUSH
24124: PPUSH
24125: PPUSH
24126: PPUSH
24127: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24128: LD_VAR 0 1
24132: NOT
24133: IFTRUE 24150
24135: PUSH
24136: LD_VAR 0 1
24140: PPUSH
24141: CALL_OW 263
24145: PUSH
24146: LD_INT 2
24148: NONEQUAL
24149: OR
24150: IFFALSE 24154
// exit ;
24152: GO 24470
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24154: LD_ADDR_VAR 0 6
24158: PUSH
24159: LD_INT 22
24161: PUSH
24162: LD_VAR 0 1
24166: PPUSH
24167: CALL_OW 255
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 2
24178: PUSH
24179: LD_INT 30
24181: PUSH
24182: LD_INT 36
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 34
24191: PUSH
24192: LD_INT 31
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: LIST
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PPUSH
24208: CALL_OW 69
24212: ST_TO_ADDR
// if not tmp then
24213: LD_VAR 0 6
24217: NOT
24218: IFFALSE 24222
// exit ;
24220: GO 24470
// result := [ ] ;
24222: LD_ADDR_VAR 0 2
24226: PUSH
24227: EMPTY
24228: ST_TO_ADDR
// for i in tmp do
24229: LD_ADDR_VAR 0 3
24233: PUSH
24234: LD_VAR 0 6
24238: PUSH
24239: FOR_IN
24240: IFFALSE 24311
// begin t := UnitsInside ( i ) ;
24242: LD_ADDR_VAR 0 4
24246: PUSH
24247: LD_VAR 0 3
24251: PPUSH
24252: CALL_OW 313
24256: ST_TO_ADDR
// if t then
24257: LD_VAR 0 4
24261: IFFALSE 24309
// for j in t do
24263: LD_ADDR_VAR 0 7
24267: PUSH
24268: LD_VAR 0 4
24272: PUSH
24273: FOR_IN
24274: IFFALSE 24307
// result := Replace ( result , result + 1 , j ) ;
24276: LD_ADDR_VAR 0 2
24280: PUSH
24281: LD_VAR 0 2
24285: PPUSH
24286: LD_VAR 0 2
24290: PUSH
24291: LD_INT 1
24293: PLUS
24294: PPUSH
24295: LD_VAR 0 7
24299: PPUSH
24300: CALL_OW 1
24304: ST_TO_ADDR
24305: GO 24273
24307: POP
24308: POP
// end ;
24309: GO 24239
24311: POP
24312: POP
// if not result then
24313: LD_VAR 0 2
24317: NOT
24318: IFFALSE 24322
// exit ;
24320: GO 24470
// mech := result [ 1 ] ;
24322: LD_ADDR_VAR 0 5
24326: PUSH
24327: LD_VAR 0 2
24331: PUSH
24332: LD_INT 1
24334: ARRAY
24335: ST_TO_ADDR
// if result > 1 then
24336: LD_VAR 0 2
24340: PUSH
24341: LD_INT 1
24343: GREATER
24344: IFFALSE 24456
// begin for i = 2 to result do
24346: LD_ADDR_VAR 0 3
24350: PUSH
24351: DOUBLE
24352: LD_INT 2
24354: DEC
24355: ST_TO_ADDR
24356: LD_VAR 0 2
24360: PUSH
24361: FOR_TO
24362: IFFALSE 24454
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24364: LD_ADDR_VAR 0 4
24368: PUSH
24369: LD_VAR 0 2
24373: PUSH
24374: LD_VAR 0 3
24378: ARRAY
24379: PPUSH
24380: LD_INT 3
24382: PPUSH
24383: CALL_OW 259
24387: PUSH
24388: LD_VAR 0 2
24392: PUSH
24393: LD_VAR 0 3
24397: ARRAY
24398: PPUSH
24399: CALL_OW 432
24403: MINUS
24404: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24405: LD_VAR 0 4
24409: PUSH
24410: LD_VAR 0 5
24414: PPUSH
24415: LD_INT 3
24417: PPUSH
24418: CALL_OW 259
24422: PUSH
24423: LD_VAR 0 5
24427: PPUSH
24428: CALL_OW 432
24432: MINUS
24433: GREATEREQUAL
24434: IFFALSE 24452
// mech := result [ i ] ;
24436: LD_ADDR_VAR 0 5
24440: PUSH
24441: LD_VAR 0 2
24445: PUSH
24446: LD_VAR 0 3
24450: ARRAY
24451: ST_TO_ADDR
// end ;
24452: GO 24361
24454: POP
24455: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24456: LD_VAR 0 1
24460: PPUSH
24461: LD_VAR 0 5
24465: PPUSH
24466: CALL_OW 135
// end ;
24470: LD_VAR 0 2
24474: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24475: LD_INT 0
24477: PPUSH
24478: PPUSH
24479: PPUSH
24480: PPUSH
24481: PPUSH
24482: PPUSH
24483: PPUSH
24484: PPUSH
24485: PPUSH
24486: PPUSH
24487: PPUSH
24488: PPUSH
24489: PPUSH
// result := [ ] ;
24490: LD_ADDR_VAR 0 7
24494: PUSH
24495: EMPTY
24496: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL_OW 266
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: IN
24517: NOT
24518: IFFALSE 24522
// exit ;
24520: GO 26162
// if name then
24522: LD_VAR 0 3
24526: IFFALSE 24542
// SetBName ( base_dep , name ) ;
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_VAR 0 3
24537: PPUSH
24538: CALL_OW 500
// base := GetBase ( base_dep ) ;
24542: LD_ADDR_VAR 0 15
24546: PUSH
24547: LD_VAR 0 1
24551: PPUSH
24552: CALL_OW 274
24556: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24557: LD_ADDR_VAR 0 16
24561: PUSH
24562: LD_VAR 0 1
24566: PPUSH
24567: CALL_OW 255
24571: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24572: LD_ADDR_VAR 0 17
24576: PUSH
24577: LD_VAR 0 1
24581: PPUSH
24582: CALL_OW 248
24586: ST_TO_ADDR
// if sources then
24587: LD_VAR 0 5
24591: IFFALSE 24638
// for i = 1 to 3 do
24593: LD_ADDR_VAR 0 8
24597: PUSH
24598: DOUBLE
24599: LD_INT 1
24601: DEC
24602: ST_TO_ADDR
24603: LD_INT 3
24605: PUSH
24606: FOR_TO
24607: IFFALSE 24636
// AddResourceType ( base , i , sources [ i ] ) ;
24609: LD_VAR 0 15
24613: PPUSH
24614: LD_VAR 0 8
24618: PPUSH
24619: LD_VAR 0 5
24623: PUSH
24624: LD_VAR 0 8
24628: ARRAY
24629: PPUSH
24630: CALL_OW 276
24634: GO 24606
24636: POP
24637: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24638: LD_ADDR_VAR 0 18
24642: PUSH
24643: LD_VAR 0 15
24647: PPUSH
24648: LD_VAR 0 2
24652: PPUSH
24653: LD_INT 1
24655: PPUSH
24656: CALL 23897 0 3
24660: ST_TO_ADDR
// InitHc ;
24661: CALL_OW 19
// InitUc ;
24665: CALL_OW 18
// uc_side := side ;
24669: LD_ADDR_OWVAR 20
24673: PUSH
24674: LD_VAR 0 16
24678: ST_TO_ADDR
// uc_nation := nation ;
24679: LD_ADDR_OWVAR 21
24683: PUSH
24684: LD_VAR 0 17
24688: ST_TO_ADDR
// if buildings then
24689: LD_VAR 0 18
24693: IFFALSE 26021
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24695: LD_ADDR_VAR 0 19
24699: PUSH
24700: LD_VAR 0 18
24704: PPUSH
24705: LD_INT 2
24707: PUSH
24708: LD_INT 30
24710: PUSH
24711: LD_INT 29
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 30
24720: PUSH
24721: LD_INT 30
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: PPUSH
24733: CALL_OW 72
24737: ST_TO_ADDR
// if tmp then
24738: LD_VAR 0 19
24742: IFFALSE 24790
// for i in tmp do
24744: LD_ADDR_VAR 0 8
24748: PUSH
24749: LD_VAR 0 19
24753: PUSH
24754: FOR_IN
24755: IFFALSE 24788
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24757: LD_VAR 0 8
24761: PPUSH
24762: CALL_OW 250
24766: PPUSH
24767: LD_VAR 0 8
24771: PPUSH
24772: CALL_OW 251
24776: PPUSH
24777: LD_VAR 0 16
24781: PPUSH
24782: CALL_OW 441
24786: GO 24754
24788: POP
24789: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24790: LD_VAR 0 18
24794: PPUSH
24795: LD_INT 2
24797: PUSH
24798: LD_INT 30
24800: PUSH
24801: LD_INT 32
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 30
24810: PUSH
24811: LD_INT 33
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: LIST
24822: PPUSH
24823: CALL_OW 72
24827: IFFALSE 24915
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24829: LD_ADDR_VAR 0 8
24833: PUSH
24834: LD_VAR 0 18
24838: PPUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 30
24844: PUSH
24845: LD_INT 32
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 30
24854: PUSH
24855: LD_INT 33
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: PPUSH
24867: CALL_OW 72
24871: PUSH
24872: FOR_IN
24873: IFFALSE 24913
// begin if not GetBWeapon ( i ) then
24875: LD_VAR 0 8
24879: PPUSH
24880: CALL_OW 269
24884: NOT
24885: IFFALSE 24911
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24887: LD_VAR 0 8
24891: PPUSH
24892: LD_VAR 0 8
24896: PPUSH
24897: LD_VAR 0 2
24901: PPUSH
24902: CALL 26167 0 2
24906: PPUSH
24907: CALL_OW 431
// end ;
24911: GO 24872
24913: POP
24914: POP
// end ; for i = 1 to personel do
24915: LD_ADDR_VAR 0 8
24919: PUSH
24920: DOUBLE
24921: LD_INT 1
24923: DEC
24924: ST_TO_ADDR
24925: LD_VAR 0 6
24929: PUSH
24930: FOR_TO
24931: IFFALSE 26001
// begin if i > 4 then
24933: LD_VAR 0 8
24937: PUSH
24938: LD_INT 4
24940: GREATER
24941: IFFALSE 24945
// break ;
24943: GO 26001
// case i of 1 :
24945: LD_VAR 0 8
24949: PUSH
24950: LD_INT 1
24952: DOUBLE
24953: EQUAL
24954: IFTRUE 24958
24956: GO 25038
24958: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24959: LD_ADDR_VAR 0 12
24963: PUSH
24964: LD_VAR 0 18
24968: PPUSH
24969: LD_INT 22
24971: PUSH
24972: LD_VAR 0 16
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 58
24983: PUSH
24984: EMPTY
24985: LIST
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: LD_INT 30
24992: PUSH
24993: LD_INT 32
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 30
25002: PUSH
25003: LD_INT 4
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 30
25012: PUSH
25013: LD_INT 5
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: PPUSH
25031: CALL_OW 72
25035: ST_TO_ADDR
25036: GO 25260
25038: LD_INT 2
25040: DOUBLE
25041: EQUAL
25042: IFTRUE 25046
25044: GO 25108
25046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25047: LD_ADDR_VAR 0 12
25051: PUSH
25052: LD_VAR 0 18
25056: PPUSH
25057: LD_INT 22
25059: PUSH
25060: LD_VAR 0 16
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: LD_INT 30
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 30
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: LIST
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PPUSH
25101: CALL_OW 72
25105: ST_TO_ADDR
25106: GO 25260
25108: LD_INT 3
25110: DOUBLE
25111: EQUAL
25112: IFTRUE 25116
25114: GO 25178
25116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25117: LD_ADDR_VAR 0 12
25121: PUSH
25122: LD_VAR 0 18
25126: PPUSH
25127: LD_INT 22
25129: PUSH
25130: LD_VAR 0 16
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: LD_INT 30
25144: PUSH
25145: LD_INT 2
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 30
25154: PUSH
25155: LD_INT 3
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PPUSH
25171: CALL_OW 72
25175: ST_TO_ADDR
25176: GO 25260
25178: LD_INT 4
25180: DOUBLE
25181: EQUAL
25182: IFTRUE 25186
25184: GO 25259
25186: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25187: LD_ADDR_VAR 0 12
25191: PUSH
25192: LD_VAR 0 18
25196: PPUSH
25197: LD_INT 22
25199: PUSH
25200: LD_VAR 0 16
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 2
25211: PUSH
25212: LD_INT 30
25214: PUSH
25215: LD_INT 6
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 30
25224: PUSH
25225: LD_INT 7
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 30
25234: PUSH
25235: LD_INT 8
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PPUSH
25252: CALL_OW 72
25256: ST_TO_ADDR
25257: GO 25260
25259: POP
// if i = 1 then
25260: LD_VAR 0 8
25264: PUSH
25265: LD_INT 1
25267: EQUAL
25268: IFFALSE 25379
// begin tmp := [ ] ;
25270: LD_ADDR_VAR 0 19
25274: PUSH
25275: EMPTY
25276: ST_TO_ADDR
// for j in f do
25277: LD_ADDR_VAR 0 9
25281: PUSH
25282: LD_VAR 0 12
25286: PUSH
25287: FOR_IN
25288: IFFALSE 25361
// if GetBType ( j ) = b_bunker then
25290: LD_VAR 0 9
25294: PPUSH
25295: CALL_OW 266
25299: PUSH
25300: LD_INT 32
25302: EQUAL
25303: IFFALSE 25330
// tmp := Insert ( tmp , 1 , j ) else
25305: LD_ADDR_VAR 0 19
25309: PUSH
25310: LD_VAR 0 19
25314: PPUSH
25315: LD_INT 1
25317: PPUSH
25318: LD_VAR 0 9
25322: PPUSH
25323: CALL_OW 2
25327: ST_TO_ADDR
25328: GO 25359
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25330: LD_ADDR_VAR 0 19
25334: PUSH
25335: LD_VAR 0 19
25339: PPUSH
25340: LD_VAR 0 19
25344: PUSH
25345: LD_INT 1
25347: PLUS
25348: PPUSH
25349: LD_VAR 0 9
25353: PPUSH
25354: CALL_OW 2
25358: ST_TO_ADDR
25359: GO 25287
25361: POP
25362: POP
// if tmp then
25363: LD_VAR 0 19
25367: IFFALSE 25379
// f := tmp ;
25369: LD_ADDR_VAR 0 12
25373: PUSH
25374: LD_VAR 0 19
25378: ST_TO_ADDR
// end ; x := personel [ i ] ;
25379: LD_ADDR_VAR 0 13
25383: PUSH
25384: LD_VAR 0 6
25388: PUSH
25389: LD_VAR 0 8
25393: ARRAY
25394: ST_TO_ADDR
// if x = - 1 then
25395: LD_VAR 0 13
25399: PUSH
25400: LD_INT 1
25402: NEG
25403: EQUAL
25404: IFFALSE 25615
// begin for j in f do
25406: LD_ADDR_VAR 0 9
25410: PUSH
25411: LD_VAR 0 12
25415: PUSH
25416: FOR_IN
25417: IFFALSE 25611
// repeat InitHc ;
25419: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25423: LD_VAR 0 9
25427: PPUSH
25428: CALL_OW 266
25432: PUSH
25433: LD_INT 5
25435: EQUAL
25436: IFFALSE 25506
// begin if UnitsInside ( j ) < 3 then
25438: LD_VAR 0 9
25442: PPUSH
25443: CALL_OW 313
25447: PUSH
25448: LD_INT 3
25450: LESS
25451: IFFALSE 25487
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25453: LD_INT 0
25455: PPUSH
25456: LD_INT 5
25458: PUSH
25459: LD_INT 8
25461: PUSH
25462: LD_INT 9
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: PUSH
25470: LD_VAR 0 17
25474: ARRAY
25475: PPUSH
25476: LD_VAR 0 4
25480: PPUSH
25481: CALL_OW 380
25485: GO 25504
// PrepareHuman ( false , i , skill ) ;
25487: LD_INT 0
25489: PPUSH
25490: LD_VAR 0 8
25494: PPUSH
25495: LD_VAR 0 4
25499: PPUSH
25500: CALL_OW 380
// end else
25504: GO 25523
// PrepareHuman ( false , i , skill ) ;
25506: LD_INT 0
25508: PPUSH
25509: LD_VAR 0 8
25513: PPUSH
25514: LD_VAR 0 4
25518: PPUSH
25519: CALL_OW 380
// un := CreateHuman ;
25523: LD_ADDR_VAR 0 14
25527: PUSH
25528: CALL_OW 44
25532: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25533: LD_ADDR_VAR 0 7
25537: PUSH
25538: LD_VAR 0 7
25542: PPUSH
25543: LD_INT 1
25545: PPUSH
25546: LD_VAR 0 14
25550: PPUSH
25551: CALL_OW 2
25555: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25556: LD_VAR 0 14
25560: PPUSH
25561: LD_VAR 0 9
25565: PPUSH
25566: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25570: LD_VAR 0 9
25574: PPUSH
25575: CALL_OW 313
25579: PUSH
25580: LD_INT 6
25582: EQUAL
25583: IFTRUE 25607
25585: PUSH
25586: LD_VAR 0 9
25590: PPUSH
25591: CALL_OW 266
25595: PUSH
25596: LD_INT 32
25598: PUSH
25599: LD_INT 31
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: IN
25606: OR
25607: IFFALSE 25419
25609: GO 25416
25611: POP
25612: POP
// end else
25613: GO 25999
// for j = 1 to x do
25615: LD_ADDR_VAR 0 9
25619: PUSH
25620: DOUBLE
25621: LD_INT 1
25623: DEC
25624: ST_TO_ADDR
25625: LD_VAR 0 13
25629: PUSH
25630: FOR_TO
25631: IFFALSE 25997
// begin InitHc ;
25633: CALL_OW 19
// if not f then
25637: LD_VAR 0 12
25641: NOT
25642: IFFALSE 25731
// begin PrepareHuman ( false , i , skill ) ;
25644: LD_INT 0
25646: PPUSH
25647: LD_VAR 0 8
25651: PPUSH
25652: LD_VAR 0 4
25656: PPUSH
25657: CALL_OW 380
// un := CreateHuman ;
25661: LD_ADDR_VAR 0 14
25665: PUSH
25666: CALL_OW 44
25670: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25671: LD_ADDR_VAR 0 7
25675: PUSH
25676: LD_VAR 0 7
25680: PPUSH
25681: LD_INT 1
25683: PPUSH
25684: LD_VAR 0 14
25688: PPUSH
25689: CALL_OW 2
25693: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25694: LD_VAR 0 14
25698: PPUSH
25699: LD_VAR 0 1
25703: PPUSH
25704: CALL_OW 250
25708: PPUSH
25709: LD_VAR 0 1
25713: PPUSH
25714: CALL_OW 251
25718: PPUSH
25719: LD_INT 10
25721: PPUSH
25722: LD_INT 0
25724: PPUSH
25725: CALL_OW 50
// continue ;
25729: GO 25630
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25731: LD_VAR 0 12
25735: PUSH
25736: LD_INT 1
25738: ARRAY
25739: PPUSH
25740: CALL_OW 313
25744: IFFALSE 25772
25746: PUSH
25747: LD_VAR 0 12
25751: PUSH
25752: LD_INT 1
25754: ARRAY
25755: PPUSH
25756: CALL_OW 266
25760: PUSH
25761: LD_INT 32
25763: PUSH
25764: LD_INT 31
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: IN
25771: AND
25772: IFTRUE 25793
25774: PUSH
25775: LD_VAR 0 12
25779: PUSH
25780: LD_INT 1
25782: ARRAY
25783: PPUSH
25784: CALL_OW 313
25788: PUSH
25789: LD_INT 6
25791: EQUAL
25792: OR
25793: IFFALSE 25813
// f := Delete ( f , 1 ) ;
25795: LD_ADDR_VAR 0 12
25799: PUSH
25800: LD_VAR 0 12
25804: PPUSH
25805: LD_INT 1
25807: PPUSH
25808: CALL_OW 3
25812: ST_TO_ADDR
// if not f then
25813: LD_VAR 0 12
25817: NOT
25818: IFFALSE 25836
// begin x := x + 2 ;
25820: LD_ADDR_VAR 0 13
25824: PUSH
25825: LD_VAR 0 13
25829: PUSH
25830: LD_INT 2
25832: PLUS
25833: ST_TO_ADDR
// continue ;
25834: GO 25630
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25836: LD_VAR 0 12
25840: PUSH
25841: LD_INT 1
25843: ARRAY
25844: PPUSH
25845: CALL_OW 266
25849: PUSH
25850: LD_INT 5
25852: EQUAL
25853: IFFALSE 25927
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25855: LD_VAR 0 12
25859: PUSH
25860: LD_INT 1
25862: ARRAY
25863: PPUSH
25864: CALL_OW 313
25868: PUSH
25869: LD_INT 3
25871: LESS
25872: IFFALSE 25908
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25874: LD_INT 0
25876: PPUSH
25877: LD_INT 5
25879: PUSH
25880: LD_INT 8
25882: PUSH
25883: LD_INT 9
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: LIST
25890: PUSH
25891: LD_VAR 0 17
25895: ARRAY
25896: PPUSH
25897: LD_VAR 0 4
25901: PPUSH
25902: CALL_OW 380
25906: GO 25925
// PrepareHuman ( false , i , skill ) ;
25908: LD_INT 0
25910: PPUSH
25911: LD_VAR 0 8
25915: PPUSH
25916: LD_VAR 0 4
25920: PPUSH
25921: CALL_OW 380
// end else
25925: GO 25944
// PrepareHuman ( false , i , skill ) ;
25927: LD_INT 0
25929: PPUSH
25930: LD_VAR 0 8
25934: PPUSH
25935: LD_VAR 0 4
25939: PPUSH
25940: CALL_OW 380
// un := CreateHuman ;
25944: LD_ADDR_VAR 0 14
25948: PUSH
25949: CALL_OW 44
25953: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25954: LD_ADDR_VAR 0 7
25958: PUSH
25959: LD_VAR 0 7
25963: PPUSH
25964: LD_INT 1
25966: PPUSH
25967: LD_VAR 0 14
25971: PPUSH
25972: CALL_OW 2
25976: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25977: LD_VAR 0 14
25981: PPUSH
25982: LD_VAR 0 12
25986: PUSH
25987: LD_INT 1
25989: ARRAY
25990: PPUSH
25991: CALL_OW 52
// end ;
25995: GO 25630
25997: POP
25998: POP
// end ;
25999: GO 24930
26001: POP
26002: POP
// result := result ^ buildings ;
26003: LD_ADDR_VAR 0 7
26007: PUSH
26008: LD_VAR 0 7
26012: PUSH
26013: LD_VAR 0 18
26017: ADD
26018: ST_TO_ADDR
// end else
26019: GO 26162
// begin for i = 1 to personel do
26021: LD_ADDR_VAR 0 8
26025: PUSH
26026: DOUBLE
26027: LD_INT 1
26029: DEC
26030: ST_TO_ADDR
26031: LD_VAR 0 6
26035: PUSH
26036: FOR_TO
26037: IFFALSE 26160
// begin if i > 4 then
26039: LD_VAR 0 8
26043: PUSH
26044: LD_INT 4
26046: GREATER
26047: IFFALSE 26051
// break ;
26049: GO 26160
// x := personel [ i ] ;
26051: LD_ADDR_VAR 0 13
26055: PUSH
26056: LD_VAR 0 6
26060: PUSH
26061: LD_VAR 0 8
26065: ARRAY
26066: ST_TO_ADDR
// if x = - 1 then
26067: LD_VAR 0 13
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: EQUAL
26076: IFFALSE 26080
// continue ;
26078: GO 26036
// PrepareHuman ( false , i , skill ) ;
26080: LD_INT 0
26082: PPUSH
26083: LD_VAR 0 8
26087: PPUSH
26088: LD_VAR 0 4
26092: PPUSH
26093: CALL_OW 380
// un := CreateHuman ;
26097: LD_ADDR_VAR 0 14
26101: PUSH
26102: CALL_OW 44
26106: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26107: LD_VAR 0 14
26111: PPUSH
26112: LD_VAR 0 1
26116: PPUSH
26117: CALL_OW 250
26121: PPUSH
26122: LD_VAR 0 1
26126: PPUSH
26127: CALL_OW 251
26131: PPUSH
26132: LD_INT 10
26134: PPUSH
26135: LD_INT 0
26137: PPUSH
26138: CALL_OW 50
// result := result ^ un ;
26142: LD_ADDR_VAR 0 7
26146: PUSH
26147: LD_VAR 0 7
26151: PUSH
26152: LD_VAR 0 14
26156: ADD
26157: ST_TO_ADDR
// end ;
26158: GO 26036
26160: POP
26161: POP
// end ; end ;
26162: LD_VAR 0 7
26166: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26167: LD_INT 0
26169: PPUSH
26170: PPUSH
26171: PPUSH
26172: PPUSH
26173: PPUSH
26174: PPUSH
26175: PPUSH
26176: PPUSH
26177: PPUSH
26178: PPUSH
26179: PPUSH
26180: PPUSH
26181: PPUSH
26182: PPUSH
26183: PPUSH
26184: PPUSH
// result := false ;
26185: LD_ADDR_VAR 0 3
26189: PUSH
26190: LD_INT 0
26192: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26193: LD_VAR 0 1
26197: NOT
26198: IFTRUE 26223
26200: PUSH
26201: LD_VAR 0 1
26205: PPUSH
26206: CALL_OW 266
26210: PUSH
26211: LD_INT 32
26213: PUSH
26214: LD_INT 33
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: IN
26221: NOT
26222: OR
26223: IFFALSE 26227
// exit ;
26225: GO 27362
// nat := GetNation ( tower ) ;
26227: LD_ADDR_VAR 0 12
26231: PUSH
26232: LD_VAR 0 1
26236: PPUSH
26237: CALL_OW 248
26241: ST_TO_ADDR
// side := GetSide ( tower ) ;
26242: LD_ADDR_VAR 0 16
26246: PUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 255
26256: ST_TO_ADDR
// x := GetX ( tower ) ;
26257: LD_ADDR_VAR 0 10
26261: PUSH
26262: LD_VAR 0 1
26266: PPUSH
26267: CALL_OW 250
26271: ST_TO_ADDR
// y := GetY ( tower ) ;
26272: LD_ADDR_VAR 0 11
26276: PUSH
26277: LD_VAR 0 1
26281: PPUSH
26282: CALL_OW 251
26286: ST_TO_ADDR
// if not x or not y then
26287: LD_VAR 0 10
26291: NOT
26292: IFTRUE 26301
26294: PUSH
26295: LD_VAR 0 11
26299: NOT
26300: OR
26301: IFFALSE 26305
// exit ;
26303: GO 27362
// weapon := 0 ;
26305: LD_ADDR_VAR 0 18
26309: PUSH
26310: LD_INT 0
26312: ST_TO_ADDR
// fac_list := [ ] ;
26313: LD_ADDR_VAR 0 17
26317: PUSH
26318: EMPTY
26319: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26320: LD_ADDR_VAR 0 6
26324: PUSH
26325: LD_VAR 0 1
26329: PPUSH
26330: CALL_OW 274
26334: PPUSH
26335: LD_VAR 0 2
26339: PPUSH
26340: LD_INT 0
26342: PPUSH
26343: CALL 23897 0 3
26347: PPUSH
26348: LD_INT 30
26350: PUSH
26351: LD_INT 3
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PPUSH
26358: CALL_OW 72
26362: ST_TO_ADDR
// if not factories then
26363: LD_VAR 0 6
26367: NOT
26368: IFFALSE 26372
// exit ;
26370: GO 27362
// for i in factories do
26372: LD_ADDR_VAR 0 8
26376: PUSH
26377: LD_VAR 0 6
26381: PUSH
26382: FOR_IN
26383: IFFALSE 26408
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26385: LD_ADDR_VAR 0 17
26389: PUSH
26390: LD_VAR 0 17
26394: PUSH
26395: LD_VAR 0 8
26399: PPUSH
26400: CALL_OW 478
26404: UNION
26405: ST_TO_ADDR
26406: GO 26382
26408: POP
26409: POP
// if not fac_list then
26410: LD_VAR 0 17
26414: NOT
26415: IFFALSE 26419
// exit ;
26417: GO 27362
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26419: LD_ADDR_VAR 0 5
26423: PUSH
26424: LD_INT 4
26426: PUSH
26427: LD_INT 5
26429: PUSH
26430: LD_INT 9
26432: PUSH
26433: LD_INT 10
26435: PUSH
26436: LD_INT 6
26438: PUSH
26439: LD_INT 7
26441: PUSH
26442: LD_INT 11
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 27
26456: PUSH
26457: LD_INT 28
26459: PUSH
26460: LD_INT 26
26462: PUSH
26463: LD_INT 30
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 43
26474: PUSH
26475: LD_INT 44
26477: PUSH
26478: LD_INT 46
26480: PUSH
26481: LD_INT 45
26483: PUSH
26484: LD_INT 47
26486: PUSH
26487: LD_INT 49
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: LIST
26502: PUSH
26503: LD_VAR 0 12
26507: ARRAY
26508: ST_TO_ADDR
// list := list isect fac_list ;
26509: LD_ADDR_VAR 0 5
26513: PUSH
26514: LD_VAR 0 5
26518: PUSH
26519: LD_VAR 0 17
26523: ISECT
26524: ST_TO_ADDR
// if not list then
26525: LD_VAR 0 5
26529: NOT
26530: IFFALSE 26534
// exit ;
26532: GO 27362
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26534: LD_VAR 0 12
26538: PUSH
26539: LD_INT 3
26541: EQUAL
26542: IFFALSE 26554
26544: PUSH
26545: LD_INT 49
26547: PUSH
26548: LD_VAR 0 5
26552: IN
26553: AND
26554: IFFALSE 26574
26556: PUSH
26557: LD_INT 31
26559: PPUSH
26560: LD_VAR 0 16
26564: PPUSH
26565: CALL_OW 321
26569: PUSH
26570: LD_INT 2
26572: EQUAL
26573: AND
26574: IFFALSE 26634
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26576: LD_INT 22
26578: PUSH
26579: LD_VAR 0 16
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 35
26590: PUSH
26591: LD_INT 49
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 91
26600: PUSH
26601: LD_VAR 0 1
26605: PUSH
26606: LD_INT 10
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: PPUSH
26619: CALL_OW 69
26623: NOT
26624: IFFALSE 26634
// weapon := ru_time_lapser ;
26626: LD_ADDR_VAR 0 18
26630: PUSH
26631: LD_INT 49
26633: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26634: LD_VAR 0 12
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: LD_INT 2
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: IN
26649: IFFALSE 26673
26651: PUSH
26652: LD_INT 11
26654: PUSH
26655: LD_VAR 0 5
26659: IN
26660: IFTRUE 26672
26662: PUSH
26663: LD_INT 30
26665: PUSH
26666: LD_VAR 0 5
26670: IN
26671: OR
26672: AND
26673: IFFALSE 26693
26675: PUSH
26676: LD_INT 6
26678: PPUSH
26679: LD_VAR 0 16
26683: PPUSH
26684: CALL_OW 321
26688: PUSH
26689: LD_INT 2
26691: EQUAL
26692: AND
26693: IFFALSE 26860
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26695: LD_INT 22
26697: PUSH
26698: LD_VAR 0 16
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 2
26709: PUSH
26710: LD_INT 35
26712: PUSH
26713: LD_INT 11
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 35
26722: PUSH
26723: LD_INT 30
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 91
26737: PUSH
26738: LD_VAR 0 1
26742: PUSH
26743: LD_INT 18
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: LIST
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: LIST
26755: PPUSH
26756: CALL_OW 69
26760: NOT
26761: IFFALSE 26837
26763: PUSH
26764: LD_INT 22
26766: PUSH
26767: LD_VAR 0 16
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: LD_INT 30
26781: PUSH
26782: LD_INT 32
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 30
26791: PUSH
26792: LD_INT 33
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 91
26806: PUSH
26807: LD_VAR 0 1
26811: PUSH
26812: LD_INT 12
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: LIST
26824: PUSH
26825: EMPTY
26826: LIST
26827: PPUSH
26828: CALL_OW 69
26832: PUSH
26833: LD_INT 2
26835: GREATER
26836: AND
26837: IFFALSE 26860
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26839: LD_ADDR_VAR 0 18
26843: PUSH
26844: LD_INT 11
26846: PUSH
26847: LD_INT 30
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_VAR 0 12
26858: ARRAY
26859: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26860: LD_VAR 0 18
26864: NOT
26865: IFFALSE 26885
26867: PUSH
26868: LD_INT 40
26870: PPUSH
26871: LD_VAR 0 16
26875: PPUSH
26876: CALL_OW 321
26880: PUSH
26881: LD_INT 2
26883: EQUAL
26884: AND
26885: IFFALSE 26921
26887: PUSH
26888: LD_INT 7
26890: PUSH
26891: LD_VAR 0 5
26895: IN
26896: IFTRUE 26908
26898: PUSH
26899: LD_INT 28
26901: PUSH
26902: LD_VAR 0 5
26906: IN
26907: OR
26908: IFTRUE 26920
26910: PUSH
26911: LD_INT 45
26913: PUSH
26914: LD_VAR 0 5
26918: IN
26919: OR
26920: AND
26921: IFFALSE 27175
// begin hex := GetHexInfo ( x , y ) ;
26923: LD_ADDR_VAR 0 4
26927: PUSH
26928: LD_VAR 0 10
26932: PPUSH
26933: LD_VAR 0 11
26937: PPUSH
26938: CALL_OW 546
26942: ST_TO_ADDR
// if hex [ 1 ] then
26943: LD_VAR 0 4
26947: PUSH
26948: LD_INT 1
26950: ARRAY
26951: IFFALSE 26955
// exit ;
26953: GO 27362
// height := hex [ 2 ] ;
26955: LD_ADDR_VAR 0 15
26959: PUSH
26960: LD_VAR 0 4
26964: PUSH
26965: LD_INT 2
26967: ARRAY
26968: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26969: LD_ADDR_VAR 0 14
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: LD_INT 2
26979: PUSH
26980: LD_INT 3
26982: PUSH
26983: LD_INT 5
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: ST_TO_ADDR
// for i in tmp do
26992: LD_ADDR_VAR 0 8
26996: PUSH
26997: LD_VAR 0 14
27001: PUSH
27002: FOR_IN
27003: IFFALSE 27173
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27005: LD_ADDR_VAR 0 9
27009: PUSH
27010: LD_VAR 0 10
27014: PPUSH
27015: LD_VAR 0 8
27019: PPUSH
27020: LD_INT 5
27022: PPUSH
27023: CALL_OW 272
27027: PUSH
27028: LD_VAR 0 11
27032: PPUSH
27033: LD_VAR 0 8
27037: PPUSH
27038: LD_INT 5
27040: PPUSH
27041: CALL_OW 273
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27050: LD_VAR 0 9
27054: PUSH
27055: LD_INT 1
27057: ARRAY
27058: PPUSH
27059: LD_VAR 0 9
27063: PUSH
27064: LD_INT 2
27066: ARRAY
27067: PPUSH
27068: CALL_OW 488
27072: IFFALSE 27171
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27074: LD_ADDR_VAR 0 4
27078: PUSH
27079: LD_VAR 0 9
27083: PUSH
27084: LD_INT 1
27086: ARRAY
27087: PPUSH
27088: LD_VAR 0 9
27092: PUSH
27093: LD_INT 2
27095: ARRAY
27096: PPUSH
27097: CALL_OW 546
27101: ST_TO_ADDR
// if hex [ 1 ] then
27102: LD_VAR 0 4
27106: PUSH
27107: LD_INT 1
27109: ARRAY
27110: IFFALSE 27114
// continue ;
27112: GO 27002
// h := hex [ 2 ] ;
27114: LD_ADDR_VAR 0 13
27118: PUSH
27119: LD_VAR 0 4
27123: PUSH
27124: LD_INT 2
27126: ARRAY
27127: ST_TO_ADDR
// if h + 7 < height then
27128: LD_VAR 0 13
27132: PUSH
27133: LD_INT 7
27135: PLUS
27136: PUSH
27137: LD_VAR 0 15
27141: LESS
27142: IFFALSE 27171
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27144: LD_ADDR_VAR 0 18
27148: PUSH
27149: LD_INT 7
27151: PUSH
27152: LD_INT 28
27154: PUSH
27155: LD_INT 45
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: LIST
27162: PUSH
27163: LD_VAR 0 12
27167: ARRAY
27168: ST_TO_ADDR
// break ;
27169: GO 27173
// end ; end ; end ;
27171: GO 27002
27173: POP
27174: POP
// end ; if not weapon then
27175: LD_VAR 0 18
27179: NOT
27180: IFFALSE 27240
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27182: LD_ADDR_VAR 0 5
27186: PUSH
27187: LD_VAR 0 5
27191: PUSH
27192: LD_INT 11
27194: PUSH
27195: LD_INT 30
27197: PUSH
27198: LD_INT 49
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: LIST
27205: DIFF
27206: ST_TO_ADDR
// if not list then
27207: LD_VAR 0 5
27211: NOT
27212: IFFALSE 27216
// exit ;
27214: GO 27362
// weapon := list [ rand ( 1 , list ) ] ;
27216: LD_ADDR_VAR 0 18
27220: PUSH
27221: LD_VAR 0 5
27225: PUSH
27226: LD_INT 1
27228: PPUSH
27229: LD_VAR 0 5
27233: PPUSH
27234: CALL_OW 12
27238: ARRAY
27239: ST_TO_ADDR
// end ; if weapon then
27240: LD_VAR 0 18
27244: IFFALSE 27362
// begin tmp := CostOfWeapon ( weapon ) ;
27246: LD_ADDR_VAR 0 14
27250: PUSH
27251: LD_VAR 0 18
27255: PPUSH
27256: CALL_OW 451
27260: ST_TO_ADDR
// j := GetBase ( tower ) ;
27261: LD_ADDR_VAR 0 9
27265: PUSH
27266: LD_VAR 0 1
27270: PPUSH
27271: CALL_OW 274
27275: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27276: LD_VAR 0 9
27280: PPUSH
27281: LD_INT 1
27283: PPUSH
27284: CALL_OW 275
27288: PUSH
27289: LD_VAR 0 14
27293: PUSH
27294: LD_INT 1
27296: ARRAY
27297: GREATEREQUAL
27298: IFFALSE 27324
27300: PUSH
27301: LD_VAR 0 9
27305: PPUSH
27306: LD_INT 2
27308: PPUSH
27309: CALL_OW 275
27313: PUSH
27314: LD_VAR 0 14
27318: PUSH
27319: LD_INT 2
27321: ARRAY
27322: GREATEREQUAL
27323: AND
27324: IFFALSE 27350
27326: PUSH
27327: LD_VAR 0 9
27331: PPUSH
27332: LD_INT 3
27334: PPUSH
27335: CALL_OW 275
27339: PUSH
27340: LD_VAR 0 14
27344: PUSH
27345: LD_INT 3
27347: ARRAY
27348: GREATEREQUAL
27349: AND
27350: IFFALSE 27362
// result := weapon ;
27352: LD_ADDR_VAR 0 3
27356: PUSH
27357: LD_VAR 0 18
27361: ST_TO_ADDR
// end ; end ;
27362: LD_VAR 0 3
27366: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27367: LD_INT 0
27369: PPUSH
27370: PPUSH
// result := true ;
27371: LD_ADDR_VAR 0 3
27375: PUSH
27376: LD_INT 1
27378: ST_TO_ADDR
// if array1 = array2 then
27379: LD_VAR 0 1
27383: PUSH
27384: LD_VAR 0 2
27388: EQUAL
27389: IFFALSE 27449
// begin for i = 1 to array1 do
27391: LD_ADDR_VAR 0 4
27395: PUSH
27396: DOUBLE
27397: LD_INT 1
27399: DEC
27400: ST_TO_ADDR
27401: LD_VAR 0 1
27405: PUSH
27406: FOR_TO
27407: IFFALSE 27445
// if array1 [ i ] <> array2 [ i ] then
27409: LD_VAR 0 1
27413: PUSH
27414: LD_VAR 0 4
27418: ARRAY
27419: PUSH
27420: LD_VAR 0 2
27424: PUSH
27425: LD_VAR 0 4
27429: ARRAY
27430: NONEQUAL
27431: IFFALSE 27443
// begin result := false ;
27433: LD_ADDR_VAR 0 3
27437: PUSH
27438: LD_INT 0
27440: ST_TO_ADDR
// break ;
27441: GO 27445
// end ;
27443: GO 27406
27445: POP
27446: POP
// end else
27447: GO 27457
// result := false ;
27449: LD_ADDR_VAR 0 3
27453: PUSH
27454: LD_INT 0
27456: ST_TO_ADDR
// end ;
27457: LD_VAR 0 3
27461: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27462: LD_INT 0
27464: PPUSH
27465: PPUSH
// if not array1 or not array2 then
27466: LD_VAR 0 1
27470: NOT
27471: IFTRUE 27480
27473: PUSH
27474: LD_VAR 0 2
27478: NOT
27479: OR
27480: IFFALSE 27484
// exit ;
27482: GO 27548
// result := true ;
27484: LD_ADDR_VAR 0 3
27488: PUSH
27489: LD_INT 1
27491: ST_TO_ADDR
// for i = 1 to array1 do
27492: LD_ADDR_VAR 0 4
27496: PUSH
27497: DOUBLE
27498: LD_INT 1
27500: DEC
27501: ST_TO_ADDR
27502: LD_VAR 0 1
27506: PUSH
27507: FOR_TO
27508: IFFALSE 27546
// if array1 [ i ] <> array2 [ i ] then
27510: LD_VAR 0 1
27514: PUSH
27515: LD_VAR 0 4
27519: ARRAY
27520: PUSH
27521: LD_VAR 0 2
27525: PUSH
27526: LD_VAR 0 4
27530: ARRAY
27531: NONEQUAL
27532: IFFALSE 27544
// begin result := false ;
27534: LD_ADDR_VAR 0 3
27538: PUSH
27539: LD_INT 0
27541: ST_TO_ADDR
// break ;
27542: GO 27546
// end ;
27544: GO 27507
27546: POP
27547: POP
// end ;
27548: LD_VAR 0 3
27552: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27553: LD_INT 0
27555: PPUSH
27556: PPUSH
27557: PPUSH
// pom := GetBase ( fac ) ;
27558: LD_ADDR_VAR 0 5
27562: PUSH
27563: LD_VAR 0 1
27567: PPUSH
27568: CALL_OW 274
27572: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27573: LD_ADDR_VAR 0 4
27577: PUSH
27578: LD_VAR 0 2
27582: PUSH
27583: LD_INT 1
27585: ARRAY
27586: PPUSH
27587: LD_VAR 0 2
27591: PUSH
27592: LD_INT 2
27594: ARRAY
27595: PPUSH
27596: LD_VAR 0 2
27600: PUSH
27601: LD_INT 3
27603: ARRAY
27604: PPUSH
27605: LD_VAR 0 2
27609: PUSH
27610: LD_INT 4
27612: ARRAY
27613: PPUSH
27614: CALL_OW 449
27618: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27619: LD_ADDR_VAR 0 3
27623: PUSH
27624: LD_VAR 0 5
27628: PPUSH
27629: LD_INT 1
27631: PPUSH
27632: CALL_OW 275
27636: PUSH
27637: LD_VAR 0 4
27641: PUSH
27642: LD_INT 1
27644: ARRAY
27645: GREATEREQUAL
27646: IFFALSE 27672
27648: PUSH
27649: LD_VAR 0 5
27653: PPUSH
27654: LD_INT 2
27656: PPUSH
27657: CALL_OW 275
27661: PUSH
27662: LD_VAR 0 4
27666: PUSH
27667: LD_INT 2
27669: ARRAY
27670: GREATEREQUAL
27671: AND
27672: IFFALSE 27698
27674: PUSH
27675: LD_VAR 0 5
27679: PPUSH
27680: LD_INT 3
27682: PPUSH
27683: CALL_OW 275
27687: PUSH
27688: LD_VAR 0 4
27692: PUSH
27693: LD_INT 3
27695: ARRAY
27696: GREATEREQUAL
27697: AND
27698: ST_TO_ADDR
// end ;
27699: LD_VAR 0 3
27703: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27704: LD_INT 0
27706: PPUSH
27707: PPUSH
27708: PPUSH
27709: PPUSH
// pom := GetBase ( building ) ;
27710: LD_ADDR_VAR 0 3
27714: PUSH
27715: LD_VAR 0 1
27719: PPUSH
27720: CALL_OW 274
27724: ST_TO_ADDR
// if not pom then
27725: LD_VAR 0 3
27729: NOT
27730: IFFALSE 27734
// exit ;
27732: GO 27908
// btype := GetBType ( building ) ;
27734: LD_ADDR_VAR 0 5
27738: PUSH
27739: LD_VAR 0 1
27743: PPUSH
27744: CALL_OW 266
27748: ST_TO_ADDR
// if btype = b_armoury then
27749: LD_VAR 0 5
27753: PUSH
27754: LD_INT 4
27756: EQUAL
27757: IFFALSE 27767
// btype := b_barracks ;
27759: LD_ADDR_VAR 0 5
27763: PUSH
27764: LD_INT 5
27766: ST_TO_ADDR
// if btype = b_depot then
27767: LD_VAR 0 5
27771: PUSH
27772: LD_INT 0
27774: EQUAL
27775: IFFALSE 27785
// btype := b_warehouse ;
27777: LD_ADDR_VAR 0 5
27781: PUSH
27782: LD_INT 1
27784: ST_TO_ADDR
// if btype = b_workshop then
27785: LD_VAR 0 5
27789: PUSH
27790: LD_INT 2
27792: EQUAL
27793: IFFALSE 27803
// btype := b_factory ;
27795: LD_ADDR_VAR 0 5
27799: PUSH
27800: LD_INT 3
27802: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27803: LD_ADDR_VAR 0 4
27807: PUSH
27808: LD_VAR 0 5
27812: PPUSH
27813: LD_VAR 0 1
27817: PPUSH
27818: CALL_OW 248
27822: PPUSH
27823: CALL_OW 450
27827: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27828: LD_ADDR_VAR 0 2
27832: PUSH
27833: LD_VAR 0 3
27837: PPUSH
27838: LD_INT 1
27840: PPUSH
27841: CALL_OW 275
27845: PUSH
27846: LD_VAR 0 4
27850: PUSH
27851: LD_INT 1
27853: ARRAY
27854: GREATEREQUAL
27855: IFFALSE 27881
27857: PUSH
27858: LD_VAR 0 3
27862: PPUSH
27863: LD_INT 2
27865: PPUSH
27866: CALL_OW 275
27870: PUSH
27871: LD_VAR 0 4
27875: PUSH
27876: LD_INT 2
27878: ARRAY
27879: GREATEREQUAL
27880: AND
27881: IFFALSE 27907
27883: PUSH
27884: LD_VAR 0 3
27888: PPUSH
27889: LD_INT 3
27891: PPUSH
27892: CALL_OW 275
27896: PUSH
27897: LD_VAR 0 4
27901: PUSH
27902: LD_INT 3
27904: ARRAY
27905: GREATEREQUAL
27906: AND
27907: ST_TO_ADDR
// end ;
27908: LD_VAR 0 2
27912: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27913: LD_INT 0
27915: PPUSH
27916: PPUSH
27917: PPUSH
// pom := GetBase ( building ) ;
27918: LD_ADDR_VAR 0 4
27922: PUSH
27923: LD_VAR 0 1
27927: PPUSH
27928: CALL_OW 274
27932: ST_TO_ADDR
// if not pom then
27933: LD_VAR 0 4
27937: NOT
27938: IFFALSE 27942
// exit ;
27940: GO 28047
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27942: LD_ADDR_VAR 0 5
27946: PUSH
27947: LD_VAR 0 2
27951: PPUSH
27952: LD_VAR 0 1
27956: PPUSH
27957: CALL_OW 248
27961: PPUSH
27962: CALL_OW 450
27966: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27967: LD_ADDR_VAR 0 3
27971: PUSH
27972: LD_VAR 0 4
27976: PPUSH
27977: LD_INT 1
27979: PPUSH
27980: CALL_OW 275
27984: PUSH
27985: LD_VAR 0 5
27989: PUSH
27990: LD_INT 1
27992: ARRAY
27993: GREATEREQUAL
27994: IFFALSE 28020
27996: PUSH
27997: LD_VAR 0 4
28001: PPUSH
28002: LD_INT 2
28004: PPUSH
28005: CALL_OW 275
28009: PUSH
28010: LD_VAR 0 5
28014: PUSH
28015: LD_INT 2
28017: ARRAY
28018: GREATEREQUAL
28019: AND
28020: IFFALSE 28046
28022: PUSH
28023: LD_VAR 0 4
28027: PPUSH
28028: LD_INT 3
28030: PPUSH
28031: CALL_OW 275
28035: PUSH
28036: LD_VAR 0 5
28040: PUSH
28041: LD_INT 3
28043: ARRAY
28044: GREATEREQUAL
28045: AND
28046: ST_TO_ADDR
// end ;
28047: LD_VAR 0 3
28051: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28052: LD_INT 0
28054: PPUSH
28055: PPUSH
28056: PPUSH
28057: PPUSH
28058: PPUSH
28059: PPUSH
28060: PPUSH
28061: PPUSH
28062: PPUSH
28063: PPUSH
28064: PPUSH
// result := false ;
28065: LD_ADDR_VAR 0 8
28069: PUSH
28070: LD_INT 0
28072: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28073: LD_VAR 0 5
28077: NOT
28078: IFTRUE 28087
28080: PUSH
28081: LD_VAR 0 1
28085: NOT
28086: OR
28087: IFTRUE 28096
28089: PUSH
28090: LD_VAR 0 2
28094: NOT
28095: OR
28096: IFTRUE 28105
28098: PUSH
28099: LD_VAR 0 3
28103: NOT
28104: OR
28105: IFFALSE 28109
// exit ;
28107: GO 28935
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28109: LD_ADDR_VAR 0 14
28113: PUSH
28114: LD_VAR 0 1
28118: PPUSH
28119: LD_VAR 0 2
28123: PPUSH
28124: LD_VAR 0 3
28128: PPUSH
28129: LD_VAR 0 4
28133: PPUSH
28134: LD_VAR 0 5
28138: PUSH
28139: LD_INT 1
28141: ARRAY
28142: PPUSH
28143: CALL_OW 248
28147: PPUSH
28148: LD_INT 0
28150: PPUSH
28151: CALL 30216 0 6
28155: ST_TO_ADDR
// if not hexes then
28156: LD_VAR 0 14
28160: NOT
28161: IFFALSE 28165
// exit ;
28163: GO 28935
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28165: LD_ADDR_VAR 0 17
28169: PUSH
28170: LD_VAR 0 5
28174: PPUSH
28175: LD_INT 22
28177: PUSH
28178: LD_VAR 0 13
28182: PPUSH
28183: CALL_OW 255
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 2
28194: PUSH
28195: LD_INT 30
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 30
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PPUSH
28224: CALL_OW 72
28228: ST_TO_ADDR
// for i = 1 to hexes do
28229: LD_ADDR_VAR 0 9
28233: PUSH
28234: DOUBLE
28235: LD_INT 1
28237: DEC
28238: ST_TO_ADDR
28239: LD_VAR 0 14
28243: PUSH
28244: FOR_TO
28245: IFFALSE 28933
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28247: LD_ADDR_VAR 0 13
28251: PUSH
28252: LD_VAR 0 14
28256: PUSH
28257: LD_VAR 0 9
28261: ARRAY
28262: PUSH
28263: LD_INT 1
28265: ARRAY
28266: PPUSH
28267: LD_VAR 0 14
28271: PUSH
28272: LD_VAR 0 9
28276: ARRAY
28277: PUSH
28278: LD_INT 2
28280: ARRAY
28281: PPUSH
28282: CALL_OW 428
28286: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28287: LD_VAR 0 14
28291: PUSH
28292: LD_VAR 0 9
28296: ARRAY
28297: PUSH
28298: LD_INT 1
28300: ARRAY
28301: PPUSH
28302: LD_VAR 0 14
28306: PUSH
28307: LD_VAR 0 9
28311: ARRAY
28312: PUSH
28313: LD_INT 2
28315: ARRAY
28316: PPUSH
28317: CALL_OW 351
28321: IFTRUE 28360
28323: PUSH
28324: LD_VAR 0 14
28328: PUSH
28329: LD_VAR 0 9
28333: ARRAY
28334: PUSH
28335: LD_INT 1
28337: ARRAY
28338: PPUSH
28339: LD_VAR 0 14
28343: PUSH
28344: LD_VAR 0 9
28348: ARRAY
28349: PUSH
28350: LD_INT 2
28352: ARRAY
28353: PPUSH
28354: CALL_OW 488
28358: NOT
28359: OR
28360: IFTRUE 28377
28362: PUSH
28363: LD_VAR 0 13
28367: PPUSH
28368: CALL_OW 247
28372: PUSH
28373: LD_INT 3
28375: EQUAL
28376: OR
28377: IFFALSE 28383
// exit ;
28379: POP
28380: POP
28381: GO 28935
// if not tmp then
28383: LD_VAR 0 13
28387: NOT
28388: IFFALSE 28392
// continue ;
28390: GO 28244
// result := true ;
28392: LD_ADDR_VAR 0 8
28396: PUSH
28397: LD_INT 1
28399: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28400: LD_VAR 0 6
28404: IFFALSE 28421
28406: PUSH
28407: LD_VAR 0 13
28411: PPUSH
28412: CALL_OW 247
28416: PUSH
28417: LD_INT 2
28419: EQUAL
28420: AND
28421: IFFALSE 28438
28423: PUSH
28424: LD_VAR 0 13
28428: PPUSH
28429: CALL_OW 263
28433: PUSH
28434: LD_INT 1
28436: EQUAL
28437: AND
28438: IFFALSE 28602
// begin if IsDrivenBy ( tmp ) then
28440: LD_VAR 0 13
28444: PPUSH
28445: CALL_OW 311
28449: IFFALSE 28453
// continue ;
28451: GO 28244
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28453: LD_VAR 0 6
28457: PPUSH
28458: LD_INT 3
28460: PUSH
28461: LD_INT 60
28463: PUSH
28464: EMPTY
28465: LIST
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 3
28473: PUSH
28474: LD_INT 55
28476: PUSH
28477: EMPTY
28478: LIST
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 72
28492: IFFALSE 28600
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28494: LD_ADDR_VAR 0 18
28498: PUSH
28499: LD_VAR 0 6
28503: PPUSH
28504: LD_INT 3
28506: PUSH
28507: LD_INT 60
28509: PUSH
28510: EMPTY
28511: LIST
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 3
28519: PUSH
28520: LD_INT 55
28522: PUSH
28523: EMPTY
28524: LIST
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PPUSH
28534: CALL_OW 72
28538: PUSH
28539: LD_INT 1
28541: ARRAY
28542: ST_TO_ADDR
// if IsInUnit ( driver ) then
28543: LD_VAR 0 18
28547: PPUSH
28548: CALL_OW 310
28552: IFFALSE 28563
// ComExit ( driver ) ;
28554: LD_VAR 0 18
28558: PPUSH
28559: CALL 54216 0 1
// AddComEnterUnit ( driver , tmp ) ;
28563: LD_VAR 0 18
28567: PPUSH
28568: LD_VAR 0 13
28572: PPUSH
28573: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28577: LD_VAR 0 18
28581: PPUSH
28582: LD_VAR 0 7
28586: PPUSH
28587: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28591: LD_VAR 0 18
28595: PPUSH
28596: CALL_OW 181
// end ; continue ;
28600: GO 28244
// end ; if not cleaners or not tmp in cleaners then
28602: LD_VAR 0 6
28606: NOT
28607: IFTRUE 28622
28609: PUSH
28610: LD_VAR 0 13
28614: PUSH
28615: LD_VAR 0 6
28619: IN
28620: NOT
28621: OR
28622: IFFALSE 28931
// begin if dep then
28624: LD_VAR 0 17
28628: IFFALSE 28764
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28630: LD_ADDR_VAR 0 16
28634: PUSH
28635: LD_VAR 0 17
28639: PUSH
28640: LD_INT 1
28642: ARRAY
28643: PPUSH
28644: CALL_OW 250
28648: PPUSH
28649: LD_VAR 0 17
28653: PUSH
28654: LD_INT 1
28656: ARRAY
28657: PPUSH
28658: CALL_OW 254
28662: PPUSH
28663: LD_INT 5
28665: PPUSH
28666: CALL_OW 272
28670: PUSH
28671: LD_VAR 0 17
28675: PUSH
28676: LD_INT 1
28678: ARRAY
28679: PPUSH
28680: CALL_OW 251
28684: PPUSH
28685: LD_VAR 0 17
28689: PUSH
28690: LD_INT 1
28692: ARRAY
28693: PPUSH
28694: CALL_OW 254
28698: PPUSH
28699: LD_INT 5
28701: PPUSH
28702: CALL_OW 273
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28711: LD_VAR 0 16
28715: PUSH
28716: LD_INT 1
28718: ARRAY
28719: PPUSH
28720: LD_VAR 0 16
28724: PUSH
28725: LD_INT 2
28727: ARRAY
28728: PPUSH
28729: CALL_OW 488
28733: IFFALSE 28764
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28735: LD_VAR 0 13
28739: PPUSH
28740: LD_VAR 0 16
28744: PUSH
28745: LD_INT 1
28747: ARRAY
28748: PPUSH
28749: LD_VAR 0 16
28753: PUSH
28754: LD_INT 2
28756: ARRAY
28757: PPUSH
28758: CALL_OW 111
// continue ;
28762: GO 28244
// end ; end ; r := GetDir ( tmp ) ;
28764: LD_ADDR_VAR 0 15
28768: PUSH
28769: LD_VAR 0 13
28773: PPUSH
28774: CALL_OW 254
28778: ST_TO_ADDR
// if r = 5 then
28779: LD_VAR 0 15
28783: PUSH
28784: LD_INT 5
28786: EQUAL
28787: IFFALSE 28797
// r := 0 ;
28789: LD_ADDR_VAR 0 15
28793: PUSH
28794: LD_INT 0
28796: ST_TO_ADDR
// for j = r to 5 do
28797: LD_ADDR_VAR 0 10
28801: PUSH
28802: DOUBLE
28803: LD_VAR 0 15
28807: DEC
28808: ST_TO_ADDR
28809: LD_INT 5
28811: PUSH
28812: FOR_TO
28813: IFFALSE 28929
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28815: LD_ADDR_VAR 0 11
28819: PUSH
28820: LD_VAR 0 13
28824: PPUSH
28825: CALL_OW 250
28829: PPUSH
28830: LD_VAR 0 10
28834: PPUSH
28835: LD_INT 2
28837: PPUSH
28838: CALL_OW 272
28842: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28843: LD_ADDR_VAR 0 12
28847: PUSH
28848: LD_VAR 0 13
28852: PPUSH
28853: CALL_OW 251
28857: PPUSH
28858: LD_VAR 0 10
28862: PPUSH
28863: LD_INT 2
28865: PPUSH
28866: CALL_OW 273
28870: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28871: LD_VAR 0 11
28875: PPUSH
28876: LD_VAR 0 12
28880: PPUSH
28881: CALL_OW 488
28885: IFFALSE 28904
28887: PUSH
28888: LD_VAR 0 11
28892: PPUSH
28893: LD_VAR 0 12
28897: PPUSH
28898: CALL_OW 428
28902: NOT
28903: AND
28904: IFFALSE 28927
// begin ComMoveXY ( tmp , _x , _y ) ;
28906: LD_VAR 0 13
28910: PPUSH
28911: LD_VAR 0 11
28915: PPUSH
28916: LD_VAR 0 12
28920: PPUSH
28921: CALL_OW 111
// break ;
28925: GO 28929
// end ; end ;
28927: GO 28812
28929: POP
28930: POP
// end ; end ;
28931: GO 28244
28933: POP
28934: POP
// end ;
28935: LD_VAR 0 8
28939: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28940: LD_INT 0
28942: PPUSH
// result := true ;
28943: LD_ADDR_VAR 0 3
28947: PUSH
28948: LD_INT 1
28950: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28951: LD_VAR 0 2
28955: PUSH
28956: LD_INT 24
28958: DOUBLE
28959: EQUAL
28960: IFTRUE 28970
28962: LD_INT 33
28964: DOUBLE
28965: EQUAL
28966: IFTRUE 28970
28968: GO 28995
28970: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28971: LD_ADDR_VAR 0 3
28975: PUSH
28976: LD_INT 32
28978: PPUSH
28979: LD_VAR 0 1
28983: PPUSH
28984: CALL_OW 321
28988: PUSH
28989: LD_INT 2
28991: EQUAL
28992: ST_TO_ADDR
28993: GO 29311
28995: LD_INT 20
28997: DOUBLE
28998: EQUAL
28999: IFTRUE 29003
29001: GO 29028
29003: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29004: LD_ADDR_VAR 0 3
29008: PUSH
29009: LD_INT 6
29011: PPUSH
29012: LD_VAR 0 1
29016: PPUSH
29017: CALL_OW 321
29021: PUSH
29022: LD_INT 2
29024: EQUAL
29025: ST_TO_ADDR
29026: GO 29311
29028: LD_INT 22
29030: DOUBLE
29031: EQUAL
29032: IFTRUE 29042
29034: LD_INT 36
29036: DOUBLE
29037: EQUAL
29038: IFTRUE 29042
29040: GO 29067
29042: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29043: LD_ADDR_VAR 0 3
29047: PUSH
29048: LD_INT 15
29050: PPUSH
29051: LD_VAR 0 1
29055: PPUSH
29056: CALL_OW 321
29060: PUSH
29061: LD_INT 2
29063: EQUAL
29064: ST_TO_ADDR
29065: GO 29311
29067: LD_INT 30
29069: DOUBLE
29070: EQUAL
29071: IFTRUE 29075
29073: GO 29100
29075: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29076: LD_ADDR_VAR 0 3
29080: PUSH
29081: LD_INT 20
29083: PPUSH
29084: LD_VAR 0 1
29088: PPUSH
29089: CALL_OW 321
29093: PUSH
29094: LD_INT 2
29096: EQUAL
29097: ST_TO_ADDR
29098: GO 29311
29100: LD_INT 28
29102: DOUBLE
29103: EQUAL
29104: IFTRUE 29114
29106: LD_INT 21
29108: DOUBLE
29109: EQUAL
29110: IFTRUE 29114
29112: GO 29139
29114: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29115: LD_ADDR_VAR 0 3
29119: PUSH
29120: LD_INT 21
29122: PPUSH
29123: LD_VAR 0 1
29127: PPUSH
29128: CALL_OW 321
29132: PUSH
29133: LD_INT 2
29135: EQUAL
29136: ST_TO_ADDR
29137: GO 29311
29139: LD_INT 16
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29172
29147: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29148: LD_ADDR_VAR 0 3
29152: PUSH
29153: LD_INT 84
29155: PPUSH
29156: LD_VAR 0 1
29160: PPUSH
29161: CALL_OW 321
29165: PUSH
29166: LD_INT 2
29168: EQUAL
29169: ST_TO_ADDR
29170: GO 29311
29172: LD_INT 19
29174: DOUBLE
29175: EQUAL
29176: IFTRUE 29186
29178: LD_INT 23
29180: DOUBLE
29181: EQUAL
29182: IFTRUE 29186
29184: GO 29211
29186: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29187: LD_ADDR_VAR 0 3
29191: PUSH
29192: LD_INT 83
29194: PPUSH
29195: LD_VAR 0 1
29199: PPUSH
29200: CALL_OW 321
29204: PUSH
29205: LD_INT 2
29207: EQUAL
29208: ST_TO_ADDR
29209: GO 29311
29211: LD_INT 17
29213: DOUBLE
29214: EQUAL
29215: IFTRUE 29219
29217: GO 29244
29219: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29220: LD_ADDR_VAR 0 3
29224: PUSH
29225: LD_INT 39
29227: PPUSH
29228: LD_VAR 0 1
29232: PPUSH
29233: CALL_OW 321
29237: PUSH
29238: LD_INT 2
29240: EQUAL
29241: ST_TO_ADDR
29242: GO 29311
29244: LD_INT 18
29246: DOUBLE
29247: EQUAL
29248: IFTRUE 29252
29250: GO 29277
29252: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29253: LD_ADDR_VAR 0 3
29257: PUSH
29258: LD_INT 40
29260: PPUSH
29261: LD_VAR 0 1
29265: PPUSH
29266: CALL_OW 321
29270: PUSH
29271: LD_INT 2
29273: EQUAL
29274: ST_TO_ADDR
29275: GO 29311
29277: LD_INT 27
29279: DOUBLE
29280: EQUAL
29281: IFTRUE 29285
29283: GO 29310
29285: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29286: LD_ADDR_VAR 0 3
29290: PUSH
29291: LD_INT 35
29293: PPUSH
29294: LD_VAR 0 1
29298: PPUSH
29299: CALL_OW 321
29303: PUSH
29304: LD_INT 2
29306: EQUAL
29307: ST_TO_ADDR
29308: GO 29311
29310: POP
// end ;
29311: LD_VAR 0 3
29315: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29316: LD_INT 0
29318: PPUSH
29319: PPUSH
29320: PPUSH
29321: PPUSH
29322: PPUSH
29323: PPUSH
29324: PPUSH
29325: PPUSH
29326: PPUSH
29327: PPUSH
29328: PPUSH
// result := false ;
29329: LD_ADDR_VAR 0 6
29333: PUSH
29334: LD_INT 0
29336: ST_TO_ADDR
// if btype = b_depot then
29337: LD_VAR 0 2
29341: PUSH
29342: LD_INT 0
29344: EQUAL
29345: IFFALSE 29357
// begin result := true ;
29347: LD_ADDR_VAR 0 6
29351: PUSH
29352: LD_INT 1
29354: ST_TO_ADDR
// exit ;
29355: GO 30211
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29357: LD_VAR 0 1
29361: NOT
29362: IFTRUE 29387
29364: PUSH
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL_OW 266
29374: PUSH
29375: LD_INT 0
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: IN
29385: NOT
29386: OR
29387: IFTRUE 29396
29389: PUSH
29390: LD_VAR 0 2
29394: NOT
29395: OR
29396: IFTRUE 29432
29398: PUSH
29399: LD_VAR 0 5
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: LD_INT 2
29412: PUSH
29413: LD_INT 3
29415: PUSH
29416: LD_INT 4
29418: PUSH
29419: LD_INT 5
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: IN
29430: NOT
29431: OR
29432: IFTRUE 29451
29434: PUSH
29435: LD_VAR 0 3
29439: PPUSH
29440: LD_VAR 0 4
29444: PPUSH
29445: CALL_OW 488
29449: NOT
29450: OR
29451: IFFALSE 29455
// exit ;
29453: GO 30211
// side := GetSide ( depot ) ;
29455: LD_ADDR_VAR 0 9
29459: PUSH
29460: LD_VAR 0 1
29464: PPUSH
29465: CALL_OW 255
29469: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29470: LD_VAR 0 9
29474: PPUSH
29475: LD_VAR 0 2
29479: PPUSH
29480: CALL 28940 0 2
29484: NOT
29485: IFFALSE 29489
// exit ;
29487: GO 30211
// pom := GetBase ( depot ) ;
29489: LD_ADDR_VAR 0 10
29493: PUSH
29494: LD_VAR 0 1
29498: PPUSH
29499: CALL_OW 274
29503: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29504: LD_ADDR_VAR 0 11
29508: PUSH
29509: LD_VAR 0 2
29513: PPUSH
29514: LD_VAR 0 1
29518: PPUSH
29519: CALL_OW 248
29523: PPUSH
29524: CALL_OW 450
29528: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29529: LD_VAR 0 10
29533: PPUSH
29534: LD_INT 1
29536: PPUSH
29537: CALL_OW 275
29541: PUSH
29542: LD_VAR 0 11
29546: PUSH
29547: LD_INT 1
29549: ARRAY
29550: GREATEREQUAL
29551: IFFALSE 29577
29553: PUSH
29554: LD_VAR 0 10
29558: PPUSH
29559: LD_INT 2
29561: PPUSH
29562: CALL_OW 275
29566: PUSH
29567: LD_VAR 0 11
29571: PUSH
29572: LD_INT 2
29574: ARRAY
29575: GREATEREQUAL
29576: AND
29577: IFFALSE 29603
29579: PUSH
29580: LD_VAR 0 10
29584: PPUSH
29585: LD_INT 3
29587: PPUSH
29588: CALL_OW 275
29592: PUSH
29593: LD_VAR 0 11
29597: PUSH
29598: LD_INT 3
29600: ARRAY
29601: GREATEREQUAL
29602: AND
29603: NOT
29604: IFFALSE 29608
// exit ;
29606: GO 30211
// if GetBType ( depot ) = b_depot then
29608: LD_VAR 0 1
29612: PPUSH
29613: CALL_OW 266
29617: PUSH
29618: LD_INT 0
29620: EQUAL
29621: IFFALSE 29633
// dist := 28 else
29623: LD_ADDR_VAR 0 14
29627: PUSH
29628: LD_INT 28
29630: ST_TO_ADDR
29631: GO 29641
// dist := 36 ;
29633: LD_ADDR_VAR 0 14
29637: PUSH
29638: LD_INT 36
29640: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29641: LD_VAR 0 1
29645: PPUSH
29646: LD_VAR 0 3
29650: PPUSH
29651: LD_VAR 0 4
29655: PPUSH
29656: CALL_OW 297
29660: PUSH
29661: LD_VAR 0 14
29665: GREATER
29666: IFFALSE 29670
// exit ;
29668: GO 30211
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29670: LD_ADDR_VAR 0 12
29674: PUSH
29675: LD_VAR 0 2
29679: PPUSH
29680: LD_VAR 0 3
29684: PPUSH
29685: LD_VAR 0 4
29689: PPUSH
29690: LD_VAR 0 5
29694: PPUSH
29695: LD_VAR 0 1
29699: PPUSH
29700: CALL_OW 248
29704: PPUSH
29705: LD_INT 0
29707: PPUSH
29708: CALL 30216 0 6
29712: ST_TO_ADDR
// if not hexes then
29713: LD_VAR 0 12
29717: NOT
29718: IFFALSE 29722
// exit ;
29720: GO 30211
// hex := GetHexInfo ( x , y ) ;
29722: LD_ADDR_VAR 0 15
29726: PUSH
29727: LD_VAR 0 3
29731: PPUSH
29732: LD_VAR 0 4
29736: PPUSH
29737: CALL_OW 546
29741: ST_TO_ADDR
// if hex [ 1 ] then
29742: LD_VAR 0 15
29746: PUSH
29747: LD_INT 1
29749: ARRAY
29750: IFFALSE 29754
// exit ;
29752: GO 30211
// height := hex [ 2 ] ;
29754: LD_ADDR_VAR 0 13
29758: PUSH
29759: LD_VAR 0 15
29763: PUSH
29764: LD_INT 2
29766: ARRAY
29767: ST_TO_ADDR
// for i = 1 to hexes do
29768: LD_ADDR_VAR 0 7
29772: PUSH
29773: DOUBLE
29774: LD_INT 1
29776: DEC
29777: ST_TO_ADDR
29778: LD_VAR 0 12
29782: PUSH
29783: FOR_TO
29784: IFFALSE 30128
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29786: LD_VAR 0 12
29790: PUSH
29791: LD_VAR 0 7
29795: ARRAY
29796: PUSH
29797: LD_INT 1
29799: ARRAY
29800: PPUSH
29801: LD_VAR 0 12
29805: PUSH
29806: LD_VAR 0 7
29810: ARRAY
29811: PUSH
29812: LD_INT 2
29814: ARRAY
29815: PPUSH
29816: CALL_OW 488
29820: NOT
29821: IFTRUE 29863
29823: PUSH
29824: LD_VAR 0 12
29828: PUSH
29829: LD_VAR 0 7
29833: ARRAY
29834: PUSH
29835: LD_INT 1
29837: ARRAY
29838: PPUSH
29839: LD_VAR 0 12
29843: PUSH
29844: LD_VAR 0 7
29848: ARRAY
29849: PUSH
29850: LD_INT 2
29852: ARRAY
29853: PPUSH
29854: CALL_OW 428
29858: PUSH
29859: LD_INT 0
29861: GREATER
29862: OR
29863: IFTRUE 29901
29865: PUSH
29866: LD_VAR 0 12
29870: PUSH
29871: LD_VAR 0 7
29875: ARRAY
29876: PUSH
29877: LD_INT 1
29879: ARRAY
29880: PPUSH
29881: LD_VAR 0 12
29885: PUSH
29886: LD_VAR 0 7
29890: ARRAY
29891: PUSH
29892: LD_INT 2
29894: ARRAY
29895: PPUSH
29896: CALL_OW 351
29900: OR
29901: IFFALSE 29907
// exit ;
29903: POP
29904: POP
29905: GO 30211
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29907: LD_ADDR_VAR 0 8
29911: PUSH
29912: LD_VAR 0 12
29916: PUSH
29917: LD_VAR 0 7
29921: ARRAY
29922: PUSH
29923: LD_INT 1
29925: ARRAY
29926: PPUSH
29927: LD_VAR 0 12
29931: PUSH
29932: LD_VAR 0 7
29936: ARRAY
29937: PUSH
29938: LD_INT 2
29940: ARRAY
29941: PPUSH
29942: CALL_OW 546
29946: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29947: LD_VAR 0 8
29951: PUSH
29952: LD_INT 1
29954: ARRAY
29955: IFTRUE 29977
29957: PUSH
29958: LD_VAR 0 8
29962: PUSH
29963: LD_INT 2
29965: ARRAY
29966: PUSH
29967: LD_VAR 0 13
29971: PUSH
29972: LD_INT 2
29974: PLUS
29975: GREATER
29976: OR
29977: IFTRUE 29999
29979: PUSH
29980: LD_VAR 0 8
29984: PUSH
29985: LD_INT 2
29987: ARRAY
29988: PUSH
29989: LD_VAR 0 13
29993: PUSH
29994: LD_INT 2
29996: MINUS
29997: LESS
29998: OR
29999: IFTRUE 30067
30001: PUSH
30002: LD_VAR 0 8
30006: PUSH
30007: LD_INT 3
30009: ARRAY
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: LD_INT 8
30016: PUSH
30017: LD_INT 9
30019: PUSH
30020: LD_INT 10
30022: PUSH
30023: LD_INT 11
30025: PUSH
30026: LD_INT 12
30028: PUSH
30029: LD_INT 13
30031: PUSH
30032: LD_INT 16
30034: PUSH
30035: LD_INT 17
30037: PUSH
30038: LD_INT 18
30040: PUSH
30041: LD_INT 19
30043: PUSH
30044: LD_INT 20
30046: PUSH
30047: LD_INT 21
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: IN
30065: NOT
30066: OR
30067: IFTRUE 30080
30069: PUSH
30070: LD_VAR 0 8
30074: PUSH
30075: LD_INT 5
30077: ARRAY
30078: NOT
30079: OR
30080: IFTRUE 30120
30082: PUSH
30083: LD_VAR 0 8
30087: PUSH
30088: LD_INT 6
30090: ARRAY
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: LD_INT 2
30097: PUSH
30098: LD_INT 7
30100: PUSH
30101: LD_INT 9
30103: PUSH
30104: LD_INT 10
30106: PUSH
30107: LD_INT 11
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: IN
30118: NOT
30119: OR
30120: IFFALSE 30126
// exit ;
30122: POP
30123: POP
30124: GO 30211
// end ;
30126: GO 29783
30128: POP
30129: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30130: LD_VAR 0 9
30134: PPUSH
30135: LD_VAR 0 3
30139: PPUSH
30140: LD_VAR 0 4
30144: PPUSH
30145: LD_INT 20
30147: PPUSH
30148: CALL 22030 0 4
30152: PUSH
30153: LD_INT 4
30155: ARRAY
30156: IFFALSE 30160
// exit ;
30158: GO 30211
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30160: LD_VAR 0 2
30164: PUSH
30165: LD_INT 29
30167: PUSH
30168: LD_INT 30
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: IN
30175: IFFALSE 30199
30177: PUSH
30178: LD_VAR 0 3
30182: PPUSH
30183: LD_VAR 0 4
30187: PPUSH
30188: LD_VAR 0 9
30192: PPUSH
30193: CALL_OW 440
30197: NOT
30198: AND
30199: IFFALSE 30203
// exit ;
30201: GO 30211
// result := true ;
30203: LD_ADDR_VAR 0 6
30207: PUSH
30208: LD_INT 1
30210: ST_TO_ADDR
// end ;
30211: LD_VAR 0 6
30215: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30216: LD_INT 0
30218: PPUSH
30219: PPUSH
30220: PPUSH
30221: PPUSH
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
30226: PPUSH
30227: PPUSH
30228: PPUSH
30229: PPUSH
30230: PPUSH
30231: PPUSH
30232: PPUSH
30233: PPUSH
30234: PPUSH
30235: PPUSH
30236: PPUSH
30237: PPUSH
30238: PPUSH
30239: PPUSH
30240: PPUSH
30241: PPUSH
30242: PPUSH
30243: PPUSH
30244: PPUSH
30245: PPUSH
30246: PPUSH
30247: PPUSH
30248: PPUSH
30249: PPUSH
30250: PPUSH
30251: PPUSH
30252: PPUSH
30253: PPUSH
30254: PPUSH
30255: PPUSH
30256: PPUSH
30257: PPUSH
30258: PPUSH
30259: PPUSH
30260: PPUSH
30261: PPUSH
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
30270: PPUSH
30271: PPUSH
30272: PPUSH
30273: PPUSH
30274: PPUSH
30275: PPUSH
// result = [ ] ;
30276: LD_ADDR_VAR 0 7
30280: PUSH
30281: EMPTY
30282: ST_TO_ADDR
// temp_list = [ ] ;
30283: LD_ADDR_VAR 0 9
30287: PUSH
30288: EMPTY
30289: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30290: LD_VAR 0 4
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: LD_INT 2
30303: PUSH
30304: LD_INT 3
30306: PUSH
30307: LD_INT 4
30309: PUSH
30310: LD_INT 5
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: IN
30321: NOT
30322: IFTRUE 30365
30324: PUSH
30325: LD_VAR 0 1
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: IN
30340: IFFALSE 30364
30342: PUSH
30343: LD_VAR 0 5
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: LD_INT 2
30353: PUSH
30354: LD_INT 3
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: LIST
30361: IN
30362: NOT
30363: AND
30364: OR
30365: IFFALSE 30369
// exit ;
30367: GO 48768
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30369: LD_VAR 0 1
30373: PUSH
30374: LD_INT 6
30376: PUSH
30377: LD_INT 7
30379: PUSH
30380: LD_INT 8
30382: PUSH
30383: LD_INT 13
30385: PUSH
30386: LD_INT 12
30388: PUSH
30389: LD_INT 15
30391: PUSH
30392: LD_INT 11
30394: PUSH
30395: LD_INT 14
30397: PUSH
30398: LD_INT 10
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: IN
30412: IFFALSE 30422
// btype = b_lab ;
30414: LD_ADDR_VAR 0 1
30418: PUSH
30419: LD_INT 6
30421: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30422: LD_VAR 0 6
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: LIST
30440: IN
30441: NOT
30442: IFTRUE 30510
30444: PUSH
30445: LD_VAR 0 1
30449: PUSH
30450: LD_INT 0
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 3
30461: PUSH
30462: LD_INT 6
30464: PUSH
30465: LD_INT 36
30467: PUSH
30468: LD_INT 4
30470: PUSH
30471: LD_INT 5
30473: PUSH
30474: LD_INT 31
30476: PUSH
30477: LD_INT 32
30479: PUSH
30480: LD_INT 33
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: IN
30496: NOT
30497: IFFALSE 30509
30499: PUSH
30500: LD_VAR 0 6
30504: PUSH
30505: LD_INT 1
30507: EQUAL
30508: AND
30509: OR
30510: IFTRUE 30542
30512: PUSH
30513: LD_VAR 0 1
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: LD_INT 3
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: IN
30528: NOT
30529: IFFALSE 30541
30531: PUSH
30532: LD_VAR 0 6
30536: PUSH
30537: LD_INT 2
30539: EQUAL
30540: AND
30541: OR
30542: IFFALSE 30552
// mode = 0 ;
30544: LD_ADDR_VAR 0 6
30548: PUSH
30549: LD_INT 0
30551: ST_TO_ADDR
// case mode of 0 :
30552: LD_VAR 0 6
30556: PUSH
30557: LD_INT 0
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 42018
30565: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30566: LD_ADDR_VAR 0 11
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: LD_INT 0
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 0
30583: PUSH
30584: LD_INT 1
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: LD_INT 1
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 1
30624: NEG
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: NEG
30648: PUSH
30649: LD_INT 2
30651: NEG
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 0
30659: PUSH
30660: LD_INT 2
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: LD_INT 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 0
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: LD_INT 3
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: LD_INT 3
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 1
30732: NEG
30733: PUSH
30734: LD_INT 2
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30759: LD_ADDR_VAR 0 12
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 0
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: LD_INT 1
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 1
30828: NEG
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 1
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: LD_INT 0
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 2
30861: PUSH
30862: LD_INT 1
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 2
30882: NEG
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 2
30893: NEG
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 2
30905: NEG
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 3
30916: NEG
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 3
30927: NEG
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30955: LD_ADDR_VAR 0 13
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 1
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: LD_INT 1
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: LD_INT 1
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 1
31036: NEG
31037: PUSH
31038: LD_INT 2
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 2
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 2
31058: PUSH
31059: LD_INT 2
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 2
31078: NEG
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 2
31090: NEG
31091: PUSH
31092: LD_INT 2
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 2
31102: NEG
31103: PUSH
31104: LD_INT 3
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 3
31114: NEG
31115: PUSH
31116: LD_INT 2
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 3
31126: NEG
31127: PUSH
31128: LD_INT 3
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31154: LD_ADDR_VAR 0 14
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: LD_INT 0
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: LD_INT 1
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: LD_INT 1
31227: NEG
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: LD_INT 2
31239: NEG
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: LD_INT 2
31250: NEG
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 1
31269: PUSH
31270: LD_INT 2
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 1
31289: NEG
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 1
31300: NEG
31301: PUSH
31302: LD_INT 3
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: LD_INT 3
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: LD_INT 2
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31350: LD_ADDR_VAR 0 15
31354: PUSH
31355: LD_INT 0
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 1
31378: PUSH
31379: LD_INT 0
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: LD_INT 1
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: LD_INT 0
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: LD_INT 1
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 3
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 3
31517: PUSH
31518: LD_INT 1
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31543: LD_ADDR_VAR 0 16
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: LD_INT 0
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 1
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 1
31624: NEG
31625: PUSH
31626: LD_INT 2
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 2
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 2
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: LD_INT 2
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 3
31690: PUSH
31691: LD_INT 2
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 3
31700: PUSH
31701: LD_INT 3
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: LD_INT 3
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31736: LD_ADDR_VAR 0 17
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: LD_INT 2
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: LD_INT 2
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 2
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: LD_INT 2
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 2
31912: NEG
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 2
31923: NEG
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 2
31935: NEG
31936: PUSH
31937: LD_INT 2
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31966: LD_ADDR_VAR 0 18
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: LD_INT 0
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 2
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: LD_INT 2
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: LD_INT 2
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 2
32142: NEG
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: NEG
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32196: LD_ADDR_VAR 0 19
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: LD_INT 1
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 2
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: LD_INT 0
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 2
32321: PUSH
32322: LD_INT 1
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: LD_INT 2
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 2
32372: NEG
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 2
32395: NEG
32396: PUSH
32397: LD_INT 2
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32426: LD_ADDR_VAR 0 20
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 1
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 2
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: NEG
32592: PUSH
32593: LD_INT 1
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 2
32602: NEG
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: LD_INT 1
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: LD_INT 2
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32656: LD_ADDR_VAR 0 21
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: LD_INT 1
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 2
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 0
32749: PUSH
32750: LD_INT 2
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: LD_INT 1
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: LD_INT 1
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 2
32832: NEG
32833: PUSH
32834: LD_INT 0
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 2
32843: NEG
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: LD_INT 2
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32886: LD_ADDR_VAR 0 22
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 2
33073: NEG
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 2
33085: NEG
33086: PUSH
33087: LD_INT 2
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33116: LD_ADDR_VAR 0 23
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: LD_INT 0
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 1
33185: NEG
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: LD_INT 2
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: LD_INT 2
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 2
33231: PUSH
33232: LD_INT 0
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 2
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 2
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 1
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 2
33292: NEG
33293: PUSH
33294: LD_INT 0
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: LD_INT 2
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 2
33327: NEG
33328: PUSH
33329: LD_INT 3
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 1
33339: NEG
33340: PUSH
33341: LD_INT 3
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: LD_INT 2
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33396: LD_ADDR_VAR 0 24
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: LD_INT 0
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 1
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 1
33454: NEG
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: LD_INT 1
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 1
33477: NEG
33478: PUSH
33479: LD_INT 2
33481: NEG
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: LD_INT 2
33492: NEG
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 2
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 2
33531: PUSH
33532: LD_INT 2
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: LD_INT 2
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 1
33561: NEG
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 2
33583: NEG
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: NEG
33596: PUSH
33597: LD_INT 2
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: LD_INT 2
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 2
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 3
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 3
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33672: LD_ADDR_VAR 0 25
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: LD_INT 1
33692: NEG
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 1
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 1
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 1
33730: NEG
33731: PUSH
33732: LD_INT 0
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: LD_INT 1
33745: NEG
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: LD_INT 2
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 2
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 2
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 2
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: PUSH
33818: LD_INT 2
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: LD_INT 2
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: NEG
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 2
33848: NEG
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 2
33859: NEG
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 2
33871: NEG
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 3
33883: PUSH
33884: LD_INT 1
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 3
33893: PUSH
33894: LD_INT 2
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: LD_INT 3
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 1
33913: PUSH
33914: LD_INT 3
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33946: LD_ADDR_VAR 0 26
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: LD_INT 1
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 1
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: LD_INT 0
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: PUSH
34017: LD_INT 1
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: LD_INT 2
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 2
34071: PUSH
34072: LD_INT 1
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 2
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: LD_INT 2
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: LD_INT 1
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 2
34122: NEG
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 2
34133: NEG
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: LD_INT 2
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: LD_INT 3
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 1
34167: PUSH
34168: LD_INT 3
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: LD_INT 2
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 2
34188: NEG
34189: PUSH
34190: LD_INT 1
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34222: LD_ADDR_VAR 0 27
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 1
34260: PUSH
34261: LD_INT 1
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PUSH
34293: LD_INT 1
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: LD_INT 2
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: LD_INT 2
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 2
34357: PUSH
34358: LD_INT 2
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: LD_INT 1
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: LD_INT 2
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: NEG
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 3
34455: NEG
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 3
34467: NEG
34468: PUSH
34469: LD_INT 2
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34502: LD_ADDR_VAR 0 28
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PUSH
34573: LD_INT 1
34575: NEG
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: PUSH
34585: LD_INT 2
34587: NEG
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 0
34595: PUSH
34596: LD_INT 2
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: LD_INT 0
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 2
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 1
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: LD_INT 2
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: NEG
34714: PUSH
34715: LD_INT 3
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: LD_INT 3
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 3
34737: NEG
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 3
34749: NEG
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34784: LD_ADDR_VAR 0 29
34788: PUSH
34789: LD_INT 0
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 1
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: LD_INT 1
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: LD_INT 2
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: LD_INT 2
34880: NEG
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 2
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 2
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: NEG
34951: PUSH
34952: LD_INT 1
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 2
34962: NEG
34963: PUSH
34964: LD_INT 2
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 2
34974: NEG
34975: PUSH
34976: LD_INT 3
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 3
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 3
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: LD_INT 2
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 3
35028: NEG
35029: PUSH
35030: LD_INT 2
35032: NEG
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35063: LD_ADDR_VAR 0 30
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 1
35121: NEG
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: LD_INT 2
35159: NEG
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: LD_INT 0
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 2
35188: PUSH
35189: LD_INT 1
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 2
35198: PUSH
35199: LD_INT 2
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: LD_INT 1
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: NEG
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: NEG
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: LD_INT 3
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 3
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 2
35285: PUSH
35286: LD_INT 3
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 3
35306: NEG
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35341: LD_ADDR_VAR 0 31
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 1
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 1
35410: NEG
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 1
35422: NEG
35423: PUSH
35424: LD_INT 2
35426: NEG
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: LD_INT 2
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: LD_INT 1
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 2
35518: NEG
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: NEG
35531: PUSH
35532: LD_INT 3
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 2
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 3
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: LD_INT 3
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 1
35573: NEG
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 3
35584: NEG
35585: PUSH
35586: LD_INT 2
35588: NEG
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35619: LD_ADDR_VAR 0 32
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: LD_INT 1
35639: NEG
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 1
35677: NEG
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: LD_INT 1
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: LD_INT 1
35726: NEG
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 2
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 2
35785: NEG
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 2
35796: NEG
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: LD_INT 3
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 3
35831: PUSH
35832: LD_INT 2
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 2
35841: PUSH
35842: LD_INT 3
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: NEG
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 3
35862: NEG
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35897: LD_ADDR_VAR 0 33
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 2
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 2
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 2
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: LD_INT 2
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: LD_INT 2
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: NEG
36042: PUSH
36043: LD_INT 1
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 2
36052: NEG
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 2
36063: NEG
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 2
36075: NEG
36076: PUSH
36077: LD_INT 2
36079: NEG
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 2
36087: NEG
36088: PUSH
36089: LD_INT 3
36091: NEG
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: PUSH
36100: LD_INT 1
36102: NEG
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 3
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: LD_INT 3
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 3
36141: NEG
36142: PUSH
36143: LD_INT 2
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36176: LD_ADDR_VAR 0 34
36180: PUSH
36181: LD_INT 0
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 2
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 2
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: LD_INT 2
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 1
36321: NEG
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 2
36332: NEG
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 2
36343: NEG
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 2
36355: NEG
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 3
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 3
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: LD_INT 3
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 2
36410: NEG
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 3
36421: NEG
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36456: LD_ADDR_VAR 0 35
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: LD_INT 1
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 2
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 2
36547: NEG
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36568: LD_ADDR_VAR 0 36
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36680: LD_ADDR_VAR 0 37
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36792: LD_ADDR_VAR 0 38
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: LD_INT 0
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: LD_INT 1
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36904: LD_ADDR_VAR 0 39
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: LD_INT 0
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: LD_INT 1
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: LD_INT 2
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: LD_INT 2
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37016: LD_ADDR_VAR 0 40
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 1
37074: NEG
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: LD_INT 1
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: NEG
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37128: LD_ADDR_VAR 0 41
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: LD_INT 2
37213: NEG
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 2
37283: NEG
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: NEG
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: NEG
37307: PUSH
37308: LD_INT 2
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: LD_INT 3
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 2
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 3
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 3
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 3
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 3
37371: PUSH
37372: LD_INT 3
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 2
37381: PUSH
37382: LD_INT 3
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 2
37391: NEG
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 3
37402: NEG
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 3
37413: NEG
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 3
37425: NEG
37426: PUSH
37427: LD_INT 2
37429: NEG
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 3
37437: NEG
37438: PUSH
37439: LD_INT 3
37441: NEG
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37478: LD_ADDR_VAR 0 42
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: LD_INT 2
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: LD_INT 1
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 2
37603: PUSH
37604: LD_INT 2
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 2
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 0
37623: PUSH
37624: LD_INT 2
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: NEG
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 2
37644: NEG
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 2
37656: NEG
37657: PUSH
37658: LD_INT 2
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 2
37668: NEG
37669: PUSH
37670: LD_INT 3
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: LD_INT 3
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: LD_INT 3
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: LD_INT 2
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 3
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 3
37724: PUSH
37725: LD_INT 3
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: LD_INT 3
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: LD_INT 3
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: LD_INT 3
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 3
37775: NEG
37776: PUSH
37777: LD_INT 2
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 3
37787: NEG
37788: PUSH
37789: LD_INT 3
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37828: LD_ADDR_VAR 0 43
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: NEG
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: LD_INT 2
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: LD_INT 2
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: LD_INT 1
37935: NEG
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 2
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 2
37994: NEG
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 2
38005: NEG
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: LD_INT 3
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: LD_INT 3
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 3
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 3
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: LD_INT 3
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 3
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 3
38124: NEG
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 3
38135: NEG
38136: PUSH
38137: LD_INT 1
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38176: LD_ADDR_VAR 0 44
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 2
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: PUSH
38301: LD_INT 2
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: NEG
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: NEG
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 2
38354: NEG
38355: PUSH
38356: LD_INT 2
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 2
38366: NEG
38367: PUSH
38368: LD_INT 3
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 3
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 3
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 3
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 3
38419: PUSH
38420: LD_INT 3
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 2
38429: PUSH
38430: LD_INT 3
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 2
38439: NEG
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 3
38450: NEG
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 3
38461: NEG
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 3
38473: NEG
38474: PUSH
38475: LD_INT 2
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 3
38485: NEG
38486: PUSH
38487: LD_INT 3
38489: NEG
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38526: LD_ADDR_VAR 0 45
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 1
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 1
38595: NEG
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: LD_INT 2
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 2
38622: NEG
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: LD_INT 2
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 2
38704: NEG
38705: PUSH
38706: LD_INT 2
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 2
38716: NEG
38717: PUSH
38718: LD_INT 3
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: LD_INT 3
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: LD_INT 3
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: LD_INT 2
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 3
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 3
38772: PUSH
38773: LD_INT 3
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: LD_INT 3
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 3
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 3
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 3
38823: NEG
38824: PUSH
38825: LD_INT 2
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 3
38835: NEG
38836: PUSH
38837: LD_INT 3
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38876: LD_ADDR_VAR 0 46
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: LD_INT 2
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: LD_INT 2
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 2
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 2
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: LD_INT 2
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: NEG
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: LD_INT 3
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: LD_INT 3
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: LD_INT 2
39091: NEG
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 3
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 3
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: LD_INT 3
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: LD_INT 3
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 3
39172: NEG
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 3
39183: NEG
39184: PUSH
39185: LD_INT 1
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39224: LD_ADDR_VAR 0 47
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 2
39351: NEG
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39375: LD_ADDR_VAR 0 48
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: LD_INT 1
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39522: LD_ADDR_VAR 0 49
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 1
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: LD_INT 1
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39666: LD_ADDR_VAR 0 50
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: LD_INT 2
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 2
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39810: LD_ADDR_VAR 0 51
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: LD_INT 2
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39957: LD_ADDR_VAR 0 52
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40108: LD_ADDR_VAR 0 53
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 2
40284: NEG
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: NEG
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: LD_INT 2
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40338: LD_ADDR_VAR 0 54
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: LD_INT 2
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: LD_INT 2
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: LD_INT 2
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 2
40514: NEG
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: LD_INT 2
40541: NEG
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40568: LD_ADDR_VAR 0 55
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: LD_INT 2
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40798: LD_ADDR_VAR 0 56
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 2
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 2
40974: NEG
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41028: LD_ADDR_VAR 0 57
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 1
41097: NEG
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 2
41227: NEG
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41258: LD_ADDR_VAR 0 58
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: LD_INT 2
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 2
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 2
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: LD_INT 2
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: NEG
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 2
41457: NEG
41458: PUSH
41459: LD_INT 2
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41488: LD_ADDR_VAR 0 59
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 1
41546: NEG
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41576: LD_ADDR_VAR 0 60
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41664: LD_ADDR_VAR 0 61
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41752: LD_ADDR_VAR 0 62
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41840: LD_ADDR_VAR 0 63
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: NEG
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41928: LD_ADDR_VAR 0 64
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: ST_TO_ADDR
// end ; 1 :
42016: GO 47913
42018: LD_INT 1
42020: DOUBLE
42021: EQUAL
42022: IFTRUE 42026
42024: GO 44649
42026: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42027: LD_ADDR_VAR 0 11
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 3
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 3
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: LD_INT 2
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: LIST
42070: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42071: LD_ADDR_VAR 0 12
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 3
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 3
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42112: LD_ADDR_VAR 0 13
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 3
42129: PUSH
42130: LD_INT 3
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42152: LD_ADDR_VAR 0 14
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: LD_INT 3
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 3
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42193: LD_ADDR_VAR 0 15
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 3
42211: NEG
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 3
42222: NEG
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: LIST
42236: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42237: LD_ADDR_VAR 0 16
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: LD_INT 3
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 3
42256: NEG
42257: PUSH
42258: LD_INT 2
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 3
42268: NEG
42269: PUSH
42270: LD_INT 3
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: LIST
42282: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42283: LD_ADDR_VAR 0 17
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 3
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 3
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: LIST
42326: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42327: LD_ADDR_VAR 0 18
42331: PUSH
42332: LD_INT 2
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 3
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 3
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: LIST
42367: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42368: LD_ADDR_VAR 0 19
42372: PUSH
42373: LD_INT 3
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 3
42385: PUSH
42386: LD_INT 3
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: LD_INT 3
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42408: LD_ADDR_VAR 0 20
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 3
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: LIST
42448: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42449: LD_ADDR_VAR 0 21
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 3
42467: NEG
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 3
42478: NEG
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42493: LD_ADDR_VAR 0 22
42497: PUSH
42498: LD_INT 2
42500: NEG
42501: PUSH
42502: LD_INT 3
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 3
42512: NEG
42513: PUSH
42514: LD_INT 2
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: LD_INT 3
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42539: LD_ADDR_VAR 0 23
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 3
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: LD_INT 4
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: LD_INT 3
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: LIST
42582: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42583: LD_ADDR_VAR 0 24
42587: PUSH
42588: LD_INT 3
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 3
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 4
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42624: LD_ADDR_VAR 0 25
42628: PUSH
42629: LD_INT 3
42631: PUSH
42632: LD_INT 3
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 4
42641: PUSH
42642: LD_INT 3
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 3
42651: PUSH
42652: LD_INT 4
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42664: LD_ADDR_VAR 0 26
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 3
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: LD_INT 4
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: LD_INT 3
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: LIST
42704: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42705: LD_ADDR_VAR 0 27
42709: PUSH
42710: LD_INT 3
42712: NEG
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 3
42723: NEG
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 4
42734: NEG
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: LIST
42748: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42749: LD_ADDR_VAR 0 28
42753: PUSH
42754: LD_INT 3
42756: NEG
42757: PUSH
42758: LD_INT 3
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 3
42768: NEG
42769: PUSH
42770: LD_INT 4
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 4
42780: NEG
42781: PUSH
42782: LD_INT 3
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42795: LD_ADDR_VAR 0 29
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 3
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 3
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: LD_INT 4
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 4
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: LD_INT 3
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 5
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 5
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 4
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 6
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: LD_INT 6
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 5
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42950: LD_ADDR_VAR 0 30
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 3
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 3
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 3
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 4
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 4
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 4
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 5
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 5
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 5
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 6
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 6
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43093: LD_ADDR_VAR 0 31
43097: PUSH
43098: LD_INT 3
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 3
43110: PUSH
43111: LD_INT 3
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: LD_INT 3
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 4
43130: PUSH
43131: LD_INT 3
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 4
43140: PUSH
43141: LD_INT 4
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 3
43150: PUSH
43151: LD_INT 4
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 5
43160: PUSH
43161: LD_INT 4
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 5
43170: PUSH
43171: LD_INT 5
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 4
43180: PUSH
43181: LD_INT 5
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 6
43190: PUSH
43191: LD_INT 5
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 6
43200: PUSH
43201: LD_INT 6
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 5
43210: PUSH
43211: LD_INT 6
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43232: LD_ADDR_VAR 0 32
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 3
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 3
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 4
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 4
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 3
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 5
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 5
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: LD_INT 4
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 6
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 6
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 5
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43375: LD_ADDR_VAR 0 33
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 3
43393: NEG
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 3
43404: NEG
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 3
43416: NEG
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 4
43427: NEG
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 4
43438: NEG
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 4
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 5
43461: NEG
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 5
43472: NEG
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 5
43484: NEG
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 6
43495: NEG
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 6
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43530: LD_ADDR_VAR 0 34
43534: PUSH
43535: LD_INT 2
43537: NEG
43538: PUSH
43539: LD_INT 3
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 3
43549: NEG
43550: PUSH
43551: LD_INT 2
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 3
43561: NEG
43562: PUSH
43563: LD_INT 3
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 3
43573: NEG
43574: PUSH
43575: LD_INT 4
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 4
43585: NEG
43586: PUSH
43587: LD_INT 3
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 4
43597: NEG
43598: PUSH
43599: LD_INT 4
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 4
43609: NEG
43610: PUSH
43611: LD_INT 5
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 5
43621: NEG
43622: PUSH
43623: LD_INT 4
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 5
43633: NEG
43634: PUSH
43635: LD_INT 5
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 5
43645: NEG
43646: PUSH
43647: LD_INT 6
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 6
43657: NEG
43658: PUSH
43659: LD_INT 5
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 6
43669: NEG
43670: PUSH
43671: LD_INT 6
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43693: LD_ADDR_VAR 0 41
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: LD_INT 3
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43737: LD_ADDR_VAR 0 42
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: LIST
43777: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43778: LD_ADDR_VAR 0 43
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 3
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: LD_INT 3
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43818: LD_ADDR_VAR 0 44
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 3
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: LD_INT 2
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43859: LD_ADDR_VAR 0 45
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 3
43888: NEG
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43903: LD_ADDR_VAR 0 46
43907: PUSH
43908: LD_INT 2
43910: NEG
43911: PUSH
43912: LD_INT 2
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: LD_INT 3
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 3
43934: NEG
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: LIST
43948: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43949: LD_ADDR_VAR 0 47
43953: PUSH
43954: LD_INT 2
43956: NEG
43957: PUSH
43958: LD_INT 3
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 3
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43982: LD_ADDR_VAR 0 48
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44013: LD_ADDR_VAR 0 49
44017: PUSH
44018: LD_INT 3
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 3
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44042: LD_ADDR_VAR 0 50
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: LD_INT 3
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44071: LD_ADDR_VAR 0 51
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: NEG
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44102: LD_ADDR_VAR 0 52
44106: PUSH
44107: LD_INT 3
44109: NEG
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 3
44121: NEG
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44135: LD_ADDR_VAR 0 53
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: LD_INT 3
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: LD_INT 3
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 2
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44179: LD_ADDR_VAR 0 54
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 3
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: LIST
44219: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44220: LD_ADDR_VAR 0 55
44224: PUSH
44225: LD_INT 3
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 3
44237: PUSH
44238: LD_INT 3
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 3
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: LIST
44259: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44260: LD_ADDR_VAR 0 56
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: LD_INT 3
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 3
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44301: LD_ADDR_VAR 0 57
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 3
44319: NEG
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 3
44330: NEG
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: LIST
44344: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44345: LD_ADDR_VAR 0 58
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: LD_INT 3
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 3
44364: NEG
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 3
44376: NEG
44377: PUSH
44378: LD_INT 3
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44391: LD_ADDR_VAR 0 59
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 2
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: LIST
44434: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44435: LD_ADDR_VAR 0 60
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44476: LD_ADDR_VAR 0 61
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44516: LD_ADDR_VAR 0 62
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44557: LD_ADDR_VAR 0 63
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: LIST
44600: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44601: LD_ADDR_VAR 0 64
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: ST_TO_ADDR
// end ; 2 :
44647: GO 47913
44649: LD_INT 2
44651: DOUBLE
44652: EQUAL
44653: IFTRUE 44657
44655: GO 47912
44657: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44658: LD_ADDR_VAR 0 29
44662: PUSH
44663: LD_INT 4
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 4
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 5
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 5
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 4
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 3
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 3
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 5
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 3
44758: PUSH
44759: LD_INT 3
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 3
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 4
44778: PUSH
44779: LD_INT 3
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 4
44788: PUSH
44789: LD_INT 4
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 3
44798: PUSH
44799: LD_INT 4
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: LD_INT 3
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 4
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: LD_INT 4
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 4
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 3
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: LD_INT 4
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: LD_INT 5
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 5
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 4
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: LD_INT 3
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: LD_INT 5
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 3
44941: NEG
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 3
44952: NEG
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 3
44986: NEG
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 4
44997: NEG
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 4
45008: NEG
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 4
45020: NEG
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 4
45043: NEG
45044: PUSH
45045: LD_INT 4
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 4
45055: NEG
45056: PUSH
45057: LD_INT 5
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 3
45067: NEG
45068: PUSH
45069: LD_INT 4
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 3
45079: NEG
45080: PUSH
45081: LD_INT 3
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 4
45091: NEG
45092: PUSH
45093: LD_INT 3
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 5
45103: NEG
45104: PUSH
45105: LD_INT 4
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 5
45115: NEG
45116: PUSH
45117: LD_INT 5
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 3
45127: NEG
45128: PUSH
45129: LD_INT 5
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 5
45139: NEG
45140: PUSH
45141: LD_INT 3
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45196: LD_ADDR_VAR 0 30
45200: PUSH
45201: LD_INT 4
45203: PUSH
45204: LD_INT 4
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 4
45213: PUSH
45214: LD_INT 3
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 5
45223: PUSH
45224: LD_INT 4
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 5
45233: PUSH
45234: LD_INT 5
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 4
45243: PUSH
45244: LD_INT 5
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 3
45253: PUSH
45254: LD_INT 4
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: LD_INT 3
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 5
45273: PUSH
45274: LD_INT 3
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 3
45283: PUSH
45284: LD_INT 5
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 3
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: LD_INT 3
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: LD_INT 4
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 4
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: LD_INT 3
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: LD_INT 4
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 2
45375: NEG
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 4
45386: NEG
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 4
45397: NEG
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 3
45409: NEG
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 3
45420: NEG
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 4
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 5
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 5
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 5
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 3
45477: NEG
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 3
45488: NEG
45489: PUSH
45490: LD_INT 3
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 3
45500: NEG
45501: PUSH
45502: LD_INT 4
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 3
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 3
45536: NEG
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 4
45548: NEG
45549: PUSH
45550: LD_INT 3
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 4
45560: NEG
45561: PUSH
45562: LD_INT 4
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: LD_INT 4
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 4
45584: NEG
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 4
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 5
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 4
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 3
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 3
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: LD_INT 4
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 5
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: LD_INT 3
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: LD_INT 5
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45743: LD_ADDR_VAR 0 31
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 4
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 3
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 4
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: LD_INT 5
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: LD_INT 5
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 4
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: LD_INT 3
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: LD_INT 5
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: LD_INT 3
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 3
45843: NEG
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 3
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 3
45888: NEG
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 4
45899: NEG
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 4
45910: NEG
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 4
45922: NEG
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 4
45945: NEG
45946: PUSH
45947: LD_INT 4
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 4
45957: NEG
45958: PUSH
45959: LD_INT 5
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 3
45969: NEG
45970: PUSH
45971: LD_INT 4
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 3
45981: NEG
45982: PUSH
45983: LD_INT 3
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 4
45993: NEG
45994: PUSH
45995: LD_INT 3
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 5
46005: NEG
46006: PUSH
46007: LD_INT 4
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 5
46017: NEG
46018: PUSH
46019: LD_INT 5
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 3
46029: NEG
46030: PUSH
46031: LD_INT 5
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 5
46041: NEG
46042: PUSH
46043: LD_INT 3
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 4
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 3
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: LD_INT 2
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 4
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: LD_INT 4
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 4
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 4
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 5
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 5
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 4
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 3
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 3
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 3
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 5
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46293: LD_ADDR_VAR 0 32
46297: PUSH
46298: LD_INT 4
46300: NEG
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 4
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 3
46323: NEG
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 3
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 4
46345: NEG
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 5
46356: NEG
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 5
46367: NEG
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 5
46379: NEG
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 3
46391: NEG
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 3
46402: NEG
46403: PUSH
46404: LD_INT 3
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 3
46414: NEG
46415: PUSH
46416: LD_INT 4
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: LD_INT 3
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 3
46450: NEG
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 4
46462: NEG
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 4
46474: NEG
46475: PUSH
46476: LD_INT 4
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: LD_INT 4
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 4
46498: NEG
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: LD_INT 4
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 5
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 4
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 3
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 3
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: LD_INT 4
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: LD_INT 5
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 5
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 4
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 4
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 4
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 4
46705: PUSH
46706: LD_INT 4
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 4
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 5
46725: PUSH
46726: LD_INT 4
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 5
46735: PUSH
46736: LD_INT 5
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 4
46745: PUSH
46746: LD_INT 5
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 3
46755: PUSH
46756: LD_INT 4
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 3
46765: PUSH
46766: LD_INT 3
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 5
46775: PUSH
46776: LD_INT 3
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 3
46785: PUSH
46786: LD_INT 5
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46840: LD_ADDR_VAR 0 33
46844: PUSH
46845: LD_INT 4
46847: NEG
46848: PUSH
46849: LD_INT 4
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 4
46859: NEG
46860: PUSH
46861: LD_INT 5
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: LD_INT 4
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 3
46883: NEG
46884: PUSH
46885: LD_INT 3
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 4
46895: NEG
46896: PUSH
46897: LD_INT 3
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 5
46907: NEG
46908: PUSH
46909: LD_INT 4
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 5
46919: NEG
46920: PUSH
46921: LD_INT 5
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 3
46931: NEG
46932: PUSH
46933: LD_INT 5
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 5
46943: NEG
46944: PUSH
46945: LD_INT 3
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 3
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 4
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: LD_INT 3
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 3
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 4
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: NEG
47046: PUSH
47047: LD_INT 4
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 4
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 4
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 5
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 5
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 4
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 3
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 3
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 5
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: LD_INT 3
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 3
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 4
47170: PUSH
47171: LD_INT 3
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 4
47180: PUSH
47181: LD_INT 4
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 3
47190: PUSH
47191: LD_INT 4
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: LD_INT 3
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 4
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: LD_INT 4
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 4
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 3
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 4
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 5
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 5
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 4
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 5
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47378: LD_ADDR_VAR 0 34
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 4
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 5
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 4
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 3
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 3
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 4
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: LD_INT 5
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: PUSH
47465: LD_INT 3
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: LD_INT 5
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 3
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 3
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 4
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 4
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 4
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 4
47580: PUSH
47581: LD_INT 4
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 4
47590: PUSH
47591: LD_INT 3
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 5
47600: PUSH
47601: LD_INT 4
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 5
47610: PUSH
47611: LD_INT 5
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 4
47620: PUSH
47621: LD_INT 5
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: LD_INT 4
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 3
47640: PUSH
47641: LD_INT 3
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 5
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: LD_INT 5
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 3
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 4
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 4
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: LD_INT 3
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 4
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 4
47763: NEG
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 4
47774: NEG
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 3
47786: NEG
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 3
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 4
47808: NEG
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 5
47819: NEG
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 5
47830: NEG
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 5
47842: NEG
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 3
47854: NEG
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: ST_TO_ADDR
// end ; end ;
47910: GO 47913
47912: POP
// case btype of b_depot , b_warehouse :
47913: LD_VAR 0 1
47917: PUSH
47918: LD_INT 0
47920: DOUBLE
47921: EQUAL
47922: IFTRUE 47932
47924: LD_INT 1
47926: DOUBLE
47927: EQUAL
47928: IFTRUE 47932
47930: GO 48133
47932: POP
// case nation of nation_american :
47933: LD_VAR 0 5
47937: PUSH
47938: LD_INT 1
47940: DOUBLE
47941: EQUAL
47942: IFTRUE 47946
47944: GO 48002
47946: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47947: LD_ADDR_VAR 0 9
47951: PUSH
47952: LD_VAR 0 11
47956: PUSH
47957: LD_VAR 0 12
47961: PUSH
47962: LD_VAR 0 13
47966: PUSH
47967: LD_VAR 0 14
47971: PUSH
47972: LD_VAR 0 15
47976: PUSH
47977: LD_VAR 0 16
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: PUSH
47990: LD_VAR 0 4
47994: PUSH
47995: LD_INT 1
47997: PLUS
47998: ARRAY
47999: ST_TO_ADDR
48000: GO 48131
48002: LD_INT 2
48004: DOUBLE
48005: EQUAL
48006: IFTRUE 48010
48008: GO 48066
48010: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48011: LD_ADDR_VAR 0 9
48015: PUSH
48016: LD_VAR 0 17
48020: PUSH
48021: LD_VAR 0 18
48025: PUSH
48026: LD_VAR 0 19
48030: PUSH
48031: LD_VAR 0 20
48035: PUSH
48036: LD_VAR 0 21
48040: PUSH
48041: LD_VAR 0 22
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: PUSH
48054: LD_VAR 0 4
48058: PUSH
48059: LD_INT 1
48061: PLUS
48062: ARRAY
48063: ST_TO_ADDR
48064: GO 48131
48066: LD_INT 3
48068: DOUBLE
48069: EQUAL
48070: IFTRUE 48074
48072: GO 48130
48074: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48075: LD_ADDR_VAR 0 9
48079: PUSH
48080: LD_VAR 0 23
48084: PUSH
48085: LD_VAR 0 24
48089: PUSH
48090: LD_VAR 0 25
48094: PUSH
48095: LD_VAR 0 26
48099: PUSH
48100: LD_VAR 0 27
48104: PUSH
48105: LD_VAR 0 28
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: PUSH
48118: LD_VAR 0 4
48122: PUSH
48123: LD_INT 1
48125: PLUS
48126: ARRAY
48127: ST_TO_ADDR
48128: GO 48131
48130: POP
48131: GO 48686
48133: LD_INT 2
48135: DOUBLE
48136: EQUAL
48137: IFTRUE 48147
48139: LD_INT 3
48141: DOUBLE
48142: EQUAL
48143: IFTRUE 48147
48145: GO 48203
48147: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48148: LD_ADDR_VAR 0 9
48152: PUSH
48153: LD_VAR 0 29
48157: PUSH
48158: LD_VAR 0 30
48162: PUSH
48163: LD_VAR 0 31
48167: PUSH
48168: LD_VAR 0 32
48172: PUSH
48173: LD_VAR 0 33
48177: PUSH
48178: LD_VAR 0 34
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: PUSH
48191: LD_VAR 0 4
48195: PUSH
48196: LD_INT 1
48198: PLUS
48199: ARRAY
48200: ST_TO_ADDR
48201: GO 48686
48203: LD_INT 16
48205: DOUBLE
48206: EQUAL
48207: IFTRUE 48265
48209: LD_INT 17
48211: DOUBLE
48212: EQUAL
48213: IFTRUE 48265
48215: LD_INT 18
48217: DOUBLE
48218: EQUAL
48219: IFTRUE 48265
48221: LD_INT 19
48223: DOUBLE
48224: EQUAL
48225: IFTRUE 48265
48227: LD_INT 22
48229: DOUBLE
48230: EQUAL
48231: IFTRUE 48265
48233: LD_INT 20
48235: DOUBLE
48236: EQUAL
48237: IFTRUE 48265
48239: LD_INT 21
48241: DOUBLE
48242: EQUAL
48243: IFTRUE 48265
48245: LD_INT 23
48247: DOUBLE
48248: EQUAL
48249: IFTRUE 48265
48251: LD_INT 24
48253: DOUBLE
48254: EQUAL
48255: IFTRUE 48265
48257: LD_INT 25
48259: DOUBLE
48260: EQUAL
48261: IFTRUE 48265
48263: GO 48321
48265: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48266: LD_ADDR_VAR 0 9
48270: PUSH
48271: LD_VAR 0 35
48275: PUSH
48276: LD_VAR 0 36
48280: PUSH
48281: LD_VAR 0 37
48285: PUSH
48286: LD_VAR 0 38
48290: PUSH
48291: LD_VAR 0 39
48295: PUSH
48296: LD_VAR 0 40
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: PUSH
48309: LD_VAR 0 4
48313: PUSH
48314: LD_INT 1
48316: PLUS
48317: ARRAY
48318: ST_TO_ADDR
48319: GO 48686
48321: LD_INT 6
48323: DOUBLE
48324: EQUAL
48325: IFTRUE 48377
48327: LD_INT 7
48329: DOUBLE
48330: EQUAL
48331: IFTRUE 48377
48333: LD_INT 8
48335: DOUBLE
48336: EQUAL
48337: IFTRUE 48377
48339: LD_INT 13
48341: DOUBLE
48342: EQUAL
48343: IFTRUE 48377
48345: LD_INT 12
48347: DOUBLE
48348: EQUAL
48349: IFTRUE 48377
48351: LD_INT 15
48353: DOUBLE
48354: EQUAL
48355: IFTRUE 48377
48357: LD_INT 11
48359: DOUBLE
48360: EQUAL
48361: IFTRUE 48377
48363: LD_INT 14
48365: DOUBLE
48366: EQUAL
48367: IFTRUE 48377
48369: LD_INT 10
48371: DOUBLE
48372: EQUAL
48373: IFTRUE 48377
48375: GO 48433
48377: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48378: LD_ADDR_VAR 0 9
48382: PUSH
48383: LD_VAR 0 41
48387: PUSH
48388: LD_VAR 0 42
48392: PUSH
48393: LD_VAR 0 43
48397: PUSH
48398: LD_VAR 0 44
48402: PUSH
48403: LD_VAR 0 45
48407: PUSH
48408: LD_VAR 0 46
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: PUSH
48421: LD_VAR 0 4
48425: PUSH
48426: LD_INT 1
48428: PLUS
48429: ARRAY
48430: ST_TO_ADDR
48431: GO 48686
48433: LD_INT 36
48435: DOUBLE
48436: EQUAL
48437: IFTRUE 48441
48439: GO 48497
48441: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48442: LD_ADDR_VAR 0 9
48446: PUSH
48447: LD_VAR 0 47
48451: PUSH
48452: LD_VAR 0 48
48456: PUSH
48457: LD_VAR 0 49
48461: PUSH
48462: LD_VAR 0 50
48466: PUSH
48467: LD_VAR 0 51
48471: PUSH
48472: LD_VAR 0 52
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: PUSH
48485: LD_VAR 0 4
48489: PUSH
48490: LD_INT 1
48492: PLUS
48493: ARRAY
48494: ST_TO_ADDR
48495: GO 48686
48497: LD_INT 4
48499: DOUBLE
48500: EQUAL
48501: IFTRUE 48523
48503: LD_INT 5
48505: DOUBLE
48506: EQUAL
48507: IFTRUE 48523
48509: LD_INT 34
48511: DOUBLE
48512: EQUAL
48513: IFTRUE 48523
48515: LD_INT 37
48517: DOUBLE
48518: EQUAL
48519: IFTRUE 48523
48521: GO 48579
48523: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48524: LD_ADDR_VAR 0 9
48528: PUSH
48529: LD_VAR 0 53
48533: PUSH
48534: LD_VAR 0 54
48538: PUSH
48539: LD_VAR 0 55
48543: PUSH
48544: LD_VAR 0 56
48548: PUSH
48549: LD_VAR 0 57
48553: PUSH
48554: LD_VAR 0 58
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: PUSH
48567: LD_VAR 0 4
48571: PUSH
48572: LD_INT 1
48574: PLUS
48575: ARRAY
48576: ST_TO_ADDR
48577: GO 48686
48579: LD_INT 31
48581: DOUBLE
48582: EQUAL
48583: IFTRUE 48629
48585: LD_INT 32
48587: DOUBLE
48588: EQUAL
48589: IFTRUE 48629
48591: LD_INT 33
48593: DOUBLE
48594: EQUAL
48595: IFTRUE 48629
48597: LD_INT 27
48599: DOUBLE
48600: EQUAL
48601: IFTRUE 48629
48603: LD_INT 26
48605: DOUBLE
48606: EQUAL
48607: IFTRUE 48629
48609: LD_INT 28
48611: DOUBLE
48612: EQUAL
48613: IFTRUE 48629
48615: LD_INT 29
48617: DOUBLE
48618: EQUAL
48619: IFTRUE 48629
48621: LD_INT 30
48623: DOUBLE
48624: EQUAL
48625: IFTRUE 48629
48627: GO 48685
48629: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48630: LD_ADDR_VAR 0 9
48634: PUSH
48635: LD_VAR 0 59
48639: PUSH
48640: LD_VAR 0 60
48644: PUSH
48645: LD_VAR 0 61
48649: PUSH
48650: LD_VAR 0 62
48654: PUSH
48655: LD_VAR 0 63
48659: PUSH
48660: LD_VAR 0 64
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: PUSH
48673: LD_VAR 0 4
48677: PUSH
48678: LD_INT 1
48680: PLUS
48681: ARRAY
48682: ST_TO_ADDR
48683: GO 48686
48685: POP
// temp_list2 = [ ] ;
48686: LD_ADDR_VAR 0 10
48690: PUSH
48691: EMPTY
48692: ST_TO_ADDR
// for i in temp_list do
48693: LD_ADDR_VAR 0 8
48697: PUSH
48698: LD_VAR 0 9
48702: PUSH
48703: FOR_IN
48704: IFFALSE 48756
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48706: LD_ADDR_VAR 0 10
48710: PUSH
48711: LD_VAR 0 10
48715: PUSH
48716: LD_VAR 0 8
48720: PUSH
48721: LD_INT 1
48723: ARRAY
48724: PUSH
48725: LD_VAR 0 2
48729: PLUS
48730: PUSH
48731: LD_VAR 0 8
48735: PUSH
48736: LD_INT 2
48738: ARRAY
48739: PUSH
48740: LD_VAR 0 3
48744: PLUS
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: EMPTY
48751: LIST
48752: ADD
48753: ST_TO_ADDR
48754: GO 48703
48756: POP
48757: POP
// result = temp_list2 ;
48758: LD_ADDR_VAR 0 7
48762: PUSH
48763: LD_VAR 0 10
48767: ST_TO_ADDR
// end ;
48768: LD_VAR 0 7
48772: RET
// export function EnemyInRange ( unit , dist ) ; begin
48773: LD_INT 0
48775: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48776: LD_ADDR_VAR 0 3
48780: PUSH
48781: LD_VAR 0 1
48785: PPUSH
48786: CALL_OW 255
48790: PPUSH
48791: LD_VAR 0 1
48795: PPUSH
48796: CALL_OW 250
48800: PPUSH
48801: LD_VAR 0 1
48805: PPUSH
48806: CALL_OW 251
48810: PPUSH
48811: LD_VAR 0 2
48815: PPUSH
48816: CALL 22030 0 4
48820: PUSH
48821: LD_INT 4
48823: ARRAY
48824: ST_TO_ADDR
// end ;
48825: LD_VAR 0 3
48829: RET
// export function PlayerSeeMe ( unit ) ; begin
48830: LD_INT 0
48832: PPUSH
// result := See ( your_side , unit ) ;
48833: LD_ADDR_VAR 0 2
48837: PUSH
48838: LD_OWVAR 2
48842: PPUSH
48843: LD_VAR 0 1
48847: PPUSH
48848: CALL_OW 292
48852: ST_TO_ADDR
// end ;
48853: LD_VAR 0 2
48857: RET
// export function ReverseDir ( unit ) ; begin
48858: LD_INT 0
48860: PPUSH
// if not unit then
48861: LD_VAR 0 1
48865: NOT
48866: IFFALSE 48870
// exit ;
48868: GO 48893
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48870: LD_ADDR_VAR 0 2
48874: PUSH
48875: LD_VAR 0 1
48879: PPUSH
48880: CALL_OW 254
48884: PUSH
48885: LD_INT 3
48887: PLUS
48888: PUSH
48889: LD_INT 6
48891: MOD
48892: ST_TO_ADDR
// end ;
48893: LD_VAR 0 2
48897: RET
// export function ReverseArray ( array ) ; var i ; begin
48898: LD_INT 0
48900: PPUSH
48901: PPUSH
// if not array then
48902: LD_VAR 0 1
48906: NOT
48907: IFFALSE 48911
// exit ;
48909: GO 48966
// result := [ ] ;
48911: LD_ADDR_VAR 0 2
48915: PUSH
48916: EMPTY
48917: ST_TO_ADDR
// for i := array downto 1 do
48918: LD_ADDR_VAR 0 3
48922: PUSH
48923: DOUBLE
48924: LD_VAR 0 1
48928: INC
48929: ST_TO_ADDR
48930: LD_INT 1
48932: PUSH
48933: FOR_DOWNTO
48934: IFFALSE 48964
// result := Join ( result , array [ i ] ) ;
48936: LD_ADDR_VAR 0 2
48940: PUSH
48941: LD_VAR 0 2
48945: PPUSH
48946: LD_VAR 0 1
48950: PUSH
48951: LD_VAR 0 3
48955: ARRAY
48956: PPUSH
48957: CALL 53818 0 2
48961: ST_TO_ADDR
48962: GO 48933
48964: POP
48965: POP
// end ;
48966: LD_VAR 0 2
48970: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48971: LD_INT 0
48973: PPUSH
48974: PPUSH
48975: PPUSH
48976: PPUSH
48977: PPUSH
48978: PPUSH
// if not unit or not hexes then
48979: LD_VAR 0 1
48983: NOT
48984: IFTRUE 48993
48986: PUSH
48987: LD_VAR 0 2
48991: NOT
48992: OR
48993: IFFALSE 48997
// exit ;
48995: GO 49120
// dist := 9999 ;
48997: LD_ADDR_VAR 0 5
49001: PUSH
49002: LD_INT 9999
49004: ST_TO_ADDR
// for i = 1 to hexes do
49005: LD_ADDR_VAR 0 4
49009: PUSH
49010: DOUBLE
49011: LD_INT 1
49013: DEC
49014: ST_TO_ADDR
49015: LD_VAR 0 2
49019: PUSH
49020: FOR_TO
49021: IFFALSE 49108
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49023: LD_ADDR_VAR 0 6
49027: PUSH
49028: LD_VAR 0 1
49032: PPUSH
49033: LD_VAR 0 2
49037: PUSH
49038: LD_VAR 0 4
49042: ARRAY
49043: PUSH
49044: LD_INT 1
49046: ARRAY
49047: PPUSH
49048: LD_VAR 0 2
49052: PUSH
49053: LD_VAR 0 4
49057: ARRAY
49058: PUSH
49059: LD_INT 2
49061: ARRAY
49062: PPUSH
49063: CALL_OW 297
49067: ST_TO_ADDR
// if tdist < dist then
49068: LD_VAR 0 6
49072: PUSH
49073: LD_VAR 0 5
49077: LESS
49078: IFFALSE 49106
// begin hex := hexes [ i ] ;
49080: LD_ADDR_VAR 0 8
49084: PUSH
49085: LD_VAR 0 2
49089: PUSH
49090: LD_VAR 0 4
49094: ARRAY
49095: ST_TO_ADDR
// dist := tdist ;
49096: LD_ADDR_VAR 0 5
49100: PUSH
49101: LD_VAR 0 6
49105: ST_TO_ADDR
// end ; end ;
49106: GO 49020
49108: POP
49109: POP
// result := hex ;
49110: LD_ADDR_VAR 0 3
49114: PUSH
49115: LD_VAR 0 8
49119: ST_TO_ADDR
// end ;
49120: LD_VAR 0 3
49124: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49125: LD_INT 0
49127: PPUSH
49128: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49129: LD_VAR 0 1
49133: NOT
49134: IFTRUE 49173
49136: PUSH
49137: LD_VAR 0 1
49141: PUSH
49142: LD_INT 21
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 23
49154: PUSH
49155: LD_INT 2
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PPUSH
49166: CALL_OW 69
49170: IN
49171: NOT
49172: OR
49173: IFFALSE 49177
// exit ;
49175: GO 49224
// for i = 1 to 3 do
49177: LD_ADDR_VAR 0 3
49181: PUSH
49182: DOUBLE
49183: LD_INT 1
49185: DEC
49186: ST_TO_ADDR
49187: LD_INT 3
49189: PUSH
49190: FOR_TO
49191: IFFALSE 49222
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49193: LD_VAR 0 1
49197: PPUSH
49198: CALL_OW 250
49202: PPUSH
49203: LD_VAR 0 1
49207: PPUSH
49208: CALL_OW 251
49212: PPUSH
49213: LD_INT 1
49215: PPUSH
49216: CALL_OW 453
49220: GO 49190
49222: POP
49223: POP
// end ;
49224: LD_VAR 0 2
49228: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49229: LD_INT 0
49231: PPUSH
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
49236: PPUSH
// if not unit or not enemy_unit then
49237: LD_VAR 0 1
49241: NOT
49242: IFTRUE 49251
49244: PUSH
49245: LD_VAR 0 2
49249: NOT
49250: OR
49251: IFFALSE 49255
// exit ;
49253: GO 49736
// if GetLives ( i ) < 250 then
49255: LD_VAR 0 4
49259: PPUSH
49260: CALL_OW 256
49264: PUSH
49265: LD_INT 250
49267: LESS
49268: IFFALSE 49281
// begin ComAutodestruct ( i ) ;
49270: LD_VAR 0 4
49274: PPUSH
49275: CALL 49125 0 1
// exit ;
49279: GO 49736
// end ; x := GetX ( enemy_unit ) ;
49281: LD_ADDR_VAR 0 7
49285: PUSH
49286: LD_VAR 0 2
49290: PPUSH
49291: CALL_OW 250
49295: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49296: LD_ADDR_VAR 0 8
49300: PUSH
49301: LD_VAR 0 2
49305: PPUSH
49306: CALL_OW 251
49310: ST_TO_ADDR
// if not x or not y then
49311: LD_VAR 0 7
49315: NOT
49316: IFTRUE 49325
49318: PUSH
49319: LD_VAR 0 8
49323: NOT
49324: OR
49325: IFFALSE 49329
// exit ;
49327: GO 49736
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49329: LD_ADDR_VAR 0 6
49333: PUSH
49334: LD_VAR 0 7
49338: PPUSH
49339: LD_INT 0
49341: PPUSH
49342: LD_INT 4
49344: PPUSH
49345: CALL_OW 272
49349: PUSH
49350: LD_VAR 0 8
49354: PPUSH
49355: LD_INT 0
49357: PPUSH
49358: LD_INT 4
49360: PPUSH
49361: CALL_OW 273
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_VAR 0 7
49374: PPUSH
49375: LD_INT 1
49377: PPUSH
49378: LD_INT 4
49380: PPUSH
49381: CALL_OW 272
49385: PUSH
49386: LD_VAR 0 8
49390: PPUSH
49391: LD_INT 1
49393: PPUSH
49394: LD_INT 4
49396: PPUSH
49397: CALL_OW 273
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_VAR 0 7
49410: PPUSH
49411: LD_INT 2
49413: PPUSH
49414: LD_INT 4
49416: PPUSH
49417: CALL_OW 272
49421: PUSH
49422: LD_VAR 0 8
49426: PPUSH
49427: LD_INT 2
49429: PPUSH
49430: LD_INT 4
49432: PPUSH
49433: CALL_OW 273
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_VAR 0 7
49446: PPUSH
49447: LD_INT 3
49449: PPUSH
49450: LD_INT 4
49452: PPUSH
49453: CALL_OW 272
49457: PUSH
49458: LD_VAR 0 8
49462: PPUSH
49463: LD_INT 3
49465: PPUSH
49466: LD_INT 4
49468: PPUSH
49469: CALL_OW 273
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_VAR 0 7
49482: PPUSH
49483: LD_INT 4
49485: PPUSH
49486: LD_INT 4
49488: PPUSH
49489: CALL_OW 272
49493: PUSH
49494: LD_VAR 0 8
49498: PPUSH
49499: LD_INT 4
49501: PPUSH
49502: LD_INT 4
49504: PPUSH
49505: CALL_OW 273
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_VAR 0 7
49518: PPUSH
49519: LD_INT 5
49521: PPUSH
49522: LD_INT 4
49524: PPUSH
49525: CALL_OW 272
49529: PUSH
49530: LD_VAR 0 8
49534: PPUSH
49535: LD_INT 5
49537: PPUSH
49538: LD_INT 4
49540: PPUSH
49541: CALL_OW 273
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: ST_TO_ADDR
// for i = tmp downto 1 do
49558: LD_ADDR_VAR 0 4
49562: PUSH
49563: DOUBLE
49564: LD_VAR 0 6
49568: INC
49569: ST_TO_ADDR
49570: LD_INT 1
49572: PUSH
49573: FOR_DOWNTO
49574: IFFALSE 49677
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49576: LD_VAR 0 6
49580: PUSH
49581: LD_VAR 0 4
49585: ARRAY
49586: PUSH
49587: LD_INT 1
49589: ARRAY
49590: PPUSH
49591: LD_VAR 0 6
49595: PUSH
49596: LD_VAR 0 4
49600: ARRAY
49601: PUSH
49602: LD_INT 2
49604: ARRAY
49605: PPUSH
49606: CALL_OW 488
49610: NOT
49611: IFTRUE 49653
49613: PUSH
49614: LD_VAR 0 6
49618: PUSH
49619: LD_VAR 0 4
49623: ARRAY
49624: PUSH
49625: LD_INT 1
49627: ARRAY
49628: PPUSH
49629: LD_VAR 0 6
49633: PUSH
49634: LD_VAR 0 4
49638: ARRAY
49639: PUSH
49640: LD_INT 2
49642: ARRAY
49643: PPUSH
49644: CALL_OW 428
49648: PUSH
49649: LD_INT 0
49651: NONEQUAL
49652: OR
49653: IFFALSE 49675
// tmp := Delete ( tmp , i ) ;
49655: LD_ADDR_VAR 0 6
49659: PUSH
49660: LD_VAR 0 6
49664: PPUSH
49665: LD_VAR 0 4
49669: PPUSH
49670: CALL_OW 3
49674: ST_TO_ADDR
49675: GO 49573
49677: POP
49678: POP
// j := GetClosestHex ( unit , tmp ) ;
49679: LD_ADDR_VAR 0 5
49683: PUSH
49684: LD_VAR 0 1
49688: PPUSH
49689: LD_VAR 0 6
49693: PPUSH
49694: CALL 48971 0 2
49698: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49699: LD_VAR 0 1
49703: PPUSH
49704: LD_VAR 0 5
49708: PUSH
49709: LD_INT 1
49711: ARRAY
49712: PPUSH
49713: LD_VAR 0 5
49717: PUSH
49718: LD_INT 2
49720: ARRAY
49721: PPUSH
49722: CALL_OW 111
// result := j ;
49726: LD_ADDR_VAR 0 3
49730: PUSH
49731: LD_VAR 0 5
49735: ST_TO_ADDR
// end ;
49736: LD_VAR 0 3
49740: RET
// export function PrepareApemanSoldier ( ) ; begin
49741: LD_INT 0
49743: PPUSH
// uc_nation := 0 ;
49744: LD_ADDR_OWVAR 21
49748: PUSH
49749: LD_INT 0
49751: ST_TO_ADDR
// hc_sex := sex_male ;
49752: LD_ADDR_OWVAR 27
49756: PUSH
49757: LD_INT 1
49759: ST_TO_ADDR
// hc_name :=  ;
49760: LD_ADDR_OWVAR 26
49764: PUSH
49765: LD_STRING 
49767: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49768: LD_ADDR_OWVAR 28
49772: PUSH
49773: LD_INT 15
49775: ST_TO_ADDR
// hc_gallery :=  ;
49776: LD_ADDR_OWVAR 33
49780: PUSH
49781: LD_STRING 
49783: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49784: LD_ADDR_OWVAR 31
49788: PUSH
49789: LD_INT 0
49791: PPUSH
49792: LD_INT 3
49794: PPUSH
49795: CALL_OW 12
49799: PUSH
49800: LD_INT 0
49802: PPUSH
49803: LD_INT 3
49805: PPUSH
49806: CALL_OW 12
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
49823: LD_ADDR_OWVAR 29
49827: PUSH
49828: LD_INT 10
49830: PUSH
49831: LD_INT 12
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: ST_TO_ADDR
// end ;
49838: LD_VAR 0 1
49842: RET
// export function PrepareApemanEngineer ( ) ; begin
49843: LD_INT 0
49845: PPUSH
// uc_nation := 0 ;
49846: LD_ADDR_OWVAR 21
49850: PUSH
49851: LD_INT 0
49853: ST_TO_ADDR
// hc_sex := sex_male ;
49854: LD_ADDR_OWVAR 27
49858: PUSH
49859: LD_INT 1
49861: ST_TO_ADDR
// hc_name :=  ;
49862: LD_ADDR_OWVAR 26
49866: PUSH
49867: LD_STRING 
49869: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49870: LD_ADDR_OWVAR 28
49874: PUSH
49875: LD_INT 16
49877: ST_TO_ADDR
// hc_gallery :=  ;
49878: LD_ADDR_OWVAR 33
49882: PUSH
49883: LD_STRING 
49885: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49886: LD_ADDR_OWVAR 31
49890: PUSH
49891: LD_INT 0
49893: PPUSH
49894: LD_INT 3
49896: PPUSH
49897: CALL_OW 12
49901: PUSH
49902: LD_INT 0
49904: PPUSH
49905: LD_INT 3
49907: PPUSH
49908: CALL_OW 12
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
49925: LD_ADDR_OWVAR 29
49929: PUSH
49930: LD_INT 10
49932: PUSH
49933: LD_INT 12
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: ST_TO_ADDR
// end ;
49940: LD_VAR 0 1
49944: RET
// export function PrepareApeman ( agressivity ) ; begin
49945: LD_INT 0
49947: PPUSH
// uc_side := 0 ;
49948: LD_ADDR_OWVAR 20
49952: PUSH
49953: LD_INT 0
49955: ST_TO_ADDR
// uc_nation := 0 ;
49956: LD_ADDR_OWVAR 21
49960: PUSH
49961: LD_INT 0
49963: ST_TO_ADDR
// hc_sex := sex_male ;
49964: LD_ADDR_OWVAR 27
49968: PUSH
49969: LD_INT 1
49971: ST_TO_ADDR
// hc_class := class_apeman ;
49972: LD_ADDR_OWVAR 28
49976: PUSH
49977: LD_INT 12
49979: ST_TO_ADDR
// hc_gallery :=  ;
49980: LD_ADDR_OWVAR 33
49984: PUSH
49985: LD_STRING 
49987: ST_TO_ADDR
// hc_name :=  ;
49988: LD_ADDR_OWVAR 26
49992: PUSH
49993: LD_STRING 
49995: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
49996: LD_ADDR_OWVAR 29
50000: PUSH
50001: LD_INT 10
50003: PUSH
50004: LD_INT 12
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: ST_TO_ADDR
// if agressivity = 0 then
50011: LD_VAR 0 1
50015: PUSH
50016: LD_INT 0
50018: EQUAL
50019: IFFALSE 50031
// hc_agressivity := 0 else
50021: LD_ADDR_OWVAR 35
50025: PUSH
50026: LD_INT 0
50028: ST_TO_ADDR
50029: GO 50052
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50031: LD_ADDR_OWVAR 35
50035: PUSH
50036: LD_VAR 0 1
50040: NEG
50041: PPUSH
50042: LD_VAR 0 1
50046: PPUSH
50047: CALL_OW 12
50051: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50052: LD_ADDR_OWVAR 31
50056: PUSH
50057: LD_INT 0
50059: PPUSH
50060: LD_INT 3
50062: PPUSH
50063: CALL_OW 12
50067: PUSH
50068: LD_INT 0
50070: PPUSH
50071: LD_INT 3
50073: PPUSH
50074: CALL_OW 12
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: ST_TO_ADDR
// end ;
50091: LD_VAR 0 2
50095: RET
// export function PrepareTiger ( agressivity ) ; begin
50096: LD_INT 0
50098: PPUSH
// uc_side := 0 ;
50099: LD_ADDR_OWVAR 20
50103: PUSH
50104: LD_INT 0
50106: ST_TO_ADDR
// uc_nation := 0 ;
50107: LD_ADDR_OWVAR 21
50111: PUSH
50112: LD_INT 0
50114: ST_TO_ADDR
// InitHc ;
50115: CALL_OW 19
// hc_class := class_tiger ;
50119: LD_ADDR_OWVAR 28
50123: PUSH
50124: LD_INT 14
50126: ST_TO_ADDR
// hc_gallery :=  ;
50127: LD_ADDR_OWVAR 33
50131: PUSH
50132: LD_STRING 
50134: ST_TO_ADDR
// hc_name :=  ;
50135: LD_ADDR_OWVAR 26
50139: PUSH
50140: LD_STRING 
50142: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50143: LD_ADDR_OWVAR 35
50147: PUSH
50148: LD_VAR 0 1
50152: NEG
50153: PPUSH
50154: LD_VAR 0 1
50158: PPUSH
50159: CALL_OW 12
50163: ST_TO_ADDR
// end ;
50164: LD_VAR 0 2
50168: RET
// export function PrepareEnchidna ( ) ; begin
50169: LD_INT 0
50171: PPUSH
// uc_side := 0 ;
50172: LD_ADDR_OWVAR 20
50176: PUSH
50177: LD_INT 0
50179: ST_TO_ADDR
// uc_nation := 0 ;
50180: LD_ADDR_OWVAR 21
50184: PUSH
50185: LD_INT 0
50187: ST_TO_ADDR
// InitHc ;
50188: CALL_OW 19
// hc_class := class_baggie ;
50192: LD_ADDR_OWVAR 28
50196: PUSH
50197: LD_INT 13
50199: ST_TO_ADDR
// hc_gallery :=  ;
50200: LD_ADDR_OWVAR 33
50204: PUSH
50205: LD_STRING 
50207: ST_TO_ADDR
// hc_name :=  ;
50208: LD_ADDR_OWVAR 26
50212: PUSH
50213: LD_STRING 
50215: ST_TO_ADDR
// end ;
50216: LD_VAR 0 1
50220: RET
// export function PrepareFrog ( ) ; begin
50221: LD_INT 0
50223: PPUSH
// uc_side := 0 ;
50224: LD_ADDR_OWVAR 20
50228: PUSH
50229: LD_INT 0
50231: ST_TO_ADDR
// uc_nation := 0 ;
50232: LD_ADDR_OWVAR 21
50236: PUSH
50237: LD_INT 0
50239: ST_TO_ADDR
// InitHc ;
50240: CALL_OW 19
// hc_class := class_frog ;
50244: LD_ADDR_OWVAR 28
50248: PUSH
50249: LD_INT 19
50251: ST_TO_ADDR
// hc_gallery :=  ;
50252: LD_ADDR_OWVAR 33
50256: PUSH
50257: LD_STRING 
50259: ST_TO_ADDR
// hc_name :=  ;
50260: LD_ADDR_OWVAR 26
50264: PUSH
50265: LD_STRING 
50267: ST_TO_ADDR
// end ;
50268: LD_VAR 0 1
50272: RET
// export function PrepareFish ( ) ; begin
50273: LD_INT 0
50275: PPUSH
// uc_side := 0 ;
50276: LD_ADDR_OWVAR 20
50280: PUSH
50281: LD_INT 0
50283: ST_TO_ADDR
// uc_nation := 0 ;
50284: LD_ADDR_OWVAR 21
50288: PUSH
50289: LD_INT 0
50291: ST_TO_ADDR
// InitHc ;
50292: CALL_OW 19
// hc_class := class_fish ;
50296: LD_ADDR_OWVAR 28
50300: PUSH
50301: LD_INT 20
50303: ST_TO_ADDR
// hc_gallery :=  ;
50304: LD_ADDR_OWVAR 33
50308: PUSH
50309: LD_STRING 
50311: ST_TO_ADDR
// hc_name :=  ;
50312: LD_ADDR_OWVAR 26
50316: PUSH
50317: LD_STRING 
50319: ST_TO_ADDR
// end ;
50320: LD_VAR 0 1
50324: RET
// export function PrepareBird ( ) ; begin
50325: LD_INT 0
50327: PPUSH
// uc_side := 0 ;
50328: LD_ADDR_OWVAR 20
50332: PUSH
50333: LD_INT 0
50335: ST_TO_ADDR
// uc_nation := 0 ;
50336: LD_ADDR_OWVAR 21
50340: PUSH
50341: LD_INT 0
50343: ST_TO_ADDR
// InitHc ;
50344: CALL_OW 19
// hc_class := class_phororhacos ;
50348: LD_ADDR_OWVAR 28
50352: PUSH
50353: LD_INT 18
50355: ST_TO_ADDR
// hc_gallery :=  ;
50356: LD_ADDR_OWVAR 33
50360: PUSH
50361: LD_STRING 
50363: ST_TO_ADDR
// hc_name :=  ;
50364: LD_ADDR_OWVAR 26
50368: PUSH
50369: LD_STRING 
50371: ST_TO_ADDR
// end ;
50372: LD_VAR 0 1
50376: RET
// export function PrepareHorse ( ) ; begin
50377: LD_INT 0
50379: PPUSH
// uc_side := 0 ;
50380: LD_ADDR_OWVAR 20
50384: PUSH
50385: LD_INT 0
50387: ST_TO_ADDR
// uc_nation := 0 ;
50388: LD_ADDR_OWVAR 21
50392: PUSH
50393: LD_INT 0
50395: ST_TO_ADDR
// InitHc ;
50396: CALL_OW 19
// hc_class := class_horse ;
50400: LD_ADDR_OWVAR 28
50404: PUSH
50405: LD_INT 21
50407: ST_TO_ADDR
// hc_gallery :=  ;
50408: LD_ADDR_OWVAR 33
50412: PUSH
50413: LD_STRING 
50415: ST_TO_ADDR
// hc_name :=  ;
50416: LD_ADDR_OWVAR 26
50420: PUSH
50421: LD_STRING 
50423: ST_TO_ADDR
// end ;
50424: LD_VAR 0 1
50428: RET
// export function PrepareMastodont ( ) ; begin
50429: LD_INT 0
50431: PPUSH
// uc_side := 0 ;
50432: LD_ADDR_OWVAR 20
50436: PUSH
50437: LD_INT 0
50439: ST_TO_ADDR
// uc_nation := 0 ;
50440: LD_ADDR_OWVAR 21
50444: PUSH
50445: LD_INT 0
50447: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50448: LD_ADDR_OWVAR 37
50452: PUSH
50453: LD_INT 31
50455: ST_TO_ADDR
// vc_control := control_rider ;
50456: LD_ADDR_OWVAR 38
50460: PUSH
50461: LD_INT 4
50463: ST_TO_ADDR
// end ;
50464: LD_VAR 0 1
50468: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50469: LD_INT 0
50471: PPUSH
50472: PPUSH
50473: PPUSH
// uc_side = 0 ;
50474: LD_ADDR_OWVAR 20
50478: PUSH
50479: LD_INT 0
50481: ST_TO_ADDR
// uc_nation = 0 ;
50482: LD_ADDR_OWVAR 21
50486: PUSH
50487: LD_INT 0
50489: ST_TO_ADDR
// InitHc_All ( ) ;
50490: CALL_OW 584
// InitVc ;
50494: CALL_OW 20
// if mastodonts then
50498: LD_VAR 0 6
50502: IFFALSE 50569
// for i = 1 to mastodonts do
50504: LD_ADDR_VAR 0 11
50508: PUSH
50509: DOUBLE
50510: LD_INT 1
50512: DEC
50513: ST_TO_ADDR
50514: LD_VAR 0 6
50518: PUSH
50519: FOR_TO
50520: IFFALSE 50567
// begin vc_chassis := 31 ;
50522: LD_ADDR_OWVAR 37
50526: PUSH
50527: LD_INT 31
50529: ST_TO_ADDR
// vc_control := control_rider ;
50530: LD_ADDR_OWVAR 38
50534: PUSH
50535: LD_INT 4
50537: ST_TO_ADDR
// animal := CreateVehicle ;
50538: LD_ADDR_VAR 0 12
50542: PUSH
50543: CALL_OW 45
50547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50548: LD_VAR 0 12
50552: PPUSH
50553: LD_VAR 0 8
50557: PPUSH
50558: LD_INT 0
50560: PPUSH
50561: CALL 52711 0 3
// end ;
50565: GO 50519
50567: POP
50568: POP
// if horses then
50569: LD_VAR 0 5
50573: IFFALSE 50640
// for i = 1 to horses do
50575: LD_ADDR_VAR 0 11
50579: PUSH
50580: DOUBLE
50581: LD_INT 1
50583: DEC
50584: ST_TO_ADDR
50585: LD_VAR 0 5
50589: PUSH
50590: FOR_TO
50591: IFFALSE 50638
// begin hc_class := 21 ;
50593: LD_ADDR_OWVAR 28
50597: PUSH
50598: LD_INT 21
50600: ST_TO_ADDR
// hc_gallery :=  ;
50601: LD_ADDR_OWVAR 33
50605: PUSH
50606: LD_STRING 
50608: ST_TO_ADDR
// animal := CreateHuman ;
50609: LD_ADDR_VAR 0 12
50613: PUSH
50614: CALL_OW 44
50618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50619: LD_VAR 0 12
50623: PPUSH
50624: LD_VAR 0 8
50628: PPUSH
50629: LD_INT 0
50631: PPUSH
50632: CALL 52711 0 3
// end ;
50636: GO 50590
50638: POP
50639: POP
// if birds then
50640: LD_VAR 0 1
50644: IFFALSE 50711
// for i = 1 to birds do
50646: LD_ADDR_VAR 0 11
50650: PUSH
50651: DOUBLE
50652: LD_INT 1
50654: DEC
50655: ST_TO_ADDR
50656: LD_VAR 0 1
50660: PUSH
50661: FOR_TO
50662: IFFALSE 50709
// begin hc_class := 18 ;
50664: LD_ADDR_OWVAR 28
50668: PUSH
50669: LD_INT 18
50671: ST_TO_ADDR
// hc_gallery =  ;
50672: LD_ADDR_OWVAR 33
50676: PUSH
50677: LD_STRING 
50679: ST_TO_ADDR
// animal := CreateHuman ;
50680: LD_ADDR_VAR 0 12
50684: PUSH
50685: CALL_OW 44
50689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50690: LD_VAR 0 12
50694: PPUSH
50695: LD_VAR 0 8
50699: PPUSH
50700: LD_INT 0
50702: PPUSH
50703: CALL 52711 0 3
// end ;
50707: GO 50661
50709: POP
50710: POP
// if tigers then
50711: LD_VAR 0 2
50715: IFFALSE 50799
// for i = 1 to tigers do
50717: LD_ADDR_VAR 0 11
50721: PUSH
50722: DOUBLE
50723: LD_INT 1
50725: DEC
50726: ST_TO_ADDR
50727: LD_VAR 0 2
50731: PUSH
50732: FOR_TO
50733: IFFALSE 50797
// begin hc_class = class_tiger ;
50735: LD_ADDR_OWVAR 28
50739: PUSH
50740: LD_INT 14
50742: ST_TO_ADDR
// hc_gallery =  ;
50743: LD_ADDR_OWVAR 33
50747: PUSH
50748: LD_STRING 
50750: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50751: LD_ADDR_OWVAR 35
50755: PUSH
50756: LD_INT 7
50758: NEG
50759: PPUSH
50760: LD_INT 7
50762: PPUSH
50763: CALL_OW 12
50767: ST_TO_ADDR
// animal := CreateHuman ;
50768: LD_ADDR_VAR 0 12
50772: PUSH
50773: CALL_OW 44
50777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50778: LD_VAR 0 12
50782: PPUSH
50783: LD_VAR 0 8
50787: PPUSH
50788: LD_INT 0
50790: PPUSH
50791: CALL 52711 0 3
// end ;
50795: GO 50732
50797: POP
50798: POP
// if apemans then
50799: LD_VAR 0 3
50803: IFFALSE 50926
// for i = 1 to apemans do
50805: LD_ADDR_VAR 0 11
50809: PUSH
50810: DOUBLE
50811: LD_INT 1
50813: DEC
50814: ST_TO_ADDR
50815: LD_VAR 0 3
50819: PUSH
50820: FOR_TO
50821: IFFALSE 50924
// begin hc_class = class_apeman ;
50823: LD_ADDR_OWVAR 28
50827: PUSH
50828: LD_INT 12
50830: ST_TO_ADDR
// hc_gallery =  ;
50831: LD_ADDR_OWVAR 33
50835: PUSH
50836: LD_STRING 
50838: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50839: LD_ADDR_OWVAR 35
50843: PUSH
50844: LD_INT 2
50846: NEG
50847: PPUSH
50848: LD_INT 2
50850: PPUSH
50851: CALL_OW 12
50855: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50856: LD_ADDR_OWVAR 31
50860: PUSH
50861: LD_INT 1
50863: PPUSH
50864: LD_INT 3
50866: PPUSH
50867: CALL_OW 12
50871: PUSH
50872: LD_INT 1
50874: PPUSH
50875: LD_INT 3
50877: PPUSH
50878: CALL_OW 12
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: ST_TO_ADDR
// animal := CreateHuman ;
50895: LD_ADDR_VAR 0 12
50899: PUSH
50900: CALL_OW 44
50904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50905: LD_VAR 0 12
50909: PPUSH
50910: LD_VAR 0 8
50914: PPUSH
50915: LD_INT 0
50917: PPUSH
50918: CALL 52711 0 3
// end ;
50922: GO 50820
50924: POP
50925: POP
// if enchidnas then
50926: LD_VAR 0 4
50930: IFFALSE 50997
// for i = 1 to enchidnas do
50932: LD_ADDR_VAR 0 11
50936: PUSH
50937: DOUBLE
50938: LD_INT 1
50940: DEC
50941: ST_TO_ADDR
50942: LD_VAR 0 4
50946: PUSH
50947: FOR_TO
50948: IFFALSE 50995
// begin hc_class = 13 ;
50950: LD_ADDR_OWVAR 28
50954: PUSH
50955: LD_INT 13
50957: ST_TO_ADDR
// hc_gallery =  ;
50958: LD_ADDR_OWVAR 33
50962: PUSH
50963: LD_STRING 
50965: ST_TO_ADDR
// animal := CreateHuman ;
50966: LD_ADDR_VAR 0 12
50970: PUSH
50971: CALL_OW 44
50975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50976: LD_VAR 0 12
50980: PPUSH
50981: LD_VAR 0 8
50985: PPUSH
50986: LD_INT 0
50988: PPUSH
50989: CALL 52711 0 3
// end ;
50993: GO 50947
50995: POP
50996: POP
// if fishes then
50997: LD_VAR 0 7
51001: IFFALSE 51068
// for i = 1 to fishes do
51003: LD_ADDR_VAR 0 11
51007: PUSH
51008: DOUBLE
51009: LD_INT 1
51011: DEC
51012: ST_TO_ADDR
51013: LD_VAR 0 7
51017: PUSH
51018: FOR_TO
51019: IFFALSE 51066
// begin hc_class = 20 ;
51021: LD_ADDR_OWVAR 28
51025: PUSH
51026: LD_INT 20
51028: ST_TO_ADDR
// hc_gallery =  ;
51029: LD_ADDR_OWVAR 33
51033: PUSH
51034: LD_STRING 
51036: ST_TO_ADDR
// animal := CreateHuman ;
51037: LD_ADDR_VAR 0 12
51041: PUSH
51042: CALL_OW 44
51046: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51047: LD_VAR 0 12
51051: PPUSH
51052: LD_VAR 0 9
51056: PPUSH
51057: LD_INT 0
51059: PPUSH
51060: CALL 52711 0 3
// end ;
51064: GO 51018
51066: POP
51067: POP
// end ;
51068: LD_VAR 0 10
51072: RET
// export function WantHeal ( sci , unit ) ; begin
51073: LD_INT 0
51075: PPUSH
// if GetTaskList ( sci ) > 0 then
51076: LD_VAR 0 1
51080: PPUSH
51081: CALL_OW 437
51085: PUSH
51086: LD_INT 0
51088: GREATER
51089: IFFALSE 51161
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51091: LD_VAR 0 1
51095: PPUSH
51096: CALL_OW 437
51100: PUSH
51101: LD_INT 1
51103: ARRAY
51104: PUSH
51105: LD_INT 1
51107: ARRAY
51108: PUSH
51109: LD_STRING l
51111: EQUAL
51112: IFFALSE 51139
51114: PUSH
51115: LD_VAR 0 1
51119: PPUSH
51120: CALL_OW 437
51124: PUSH
51125: LD_INT 1
51127: ARRAY
51128: PUSH
51129: LD_INT 4
51131: ARRAY
51132: PUSH
51133: LD_VAR 0 2
51137: EQUAL
51138: AND
51139: IFFALSE 51151
// result := true else
51141: LD_ADDR_VAR 0 3
51145: PUSH
51146: LD_INT 1
51148: ST_TO_ADDR
51149: GO 51159
// result := false ;
51151: LD_ADDR_VAR 0 3
51155: PUSH
51156: LD_INT 0
51158: ST_TO_ADDR
// end else
51159: GO 51169
// result := false ;
51161: LD_ADDR_VAR 0 3
51165: PUSH
51166: LD_INT 0
51168: ST_TO_ADDR
// end ;
51169: LD_VAR 0 3
51173: RET
// export function HealTarget ( sci ) ; begin
51174: LD_INT 0
51176: PPUSH
// if not sci then
51177: LD_VAR 0 1
51181: NOT
51182: IFFALSE 51186
// exit ;
51184: GO 51251
// result := 0 ;
51186: LD_ADDR_VAR 0 2
51190: PUSH
51191: LD_INT 0
51193: ST_TO_ADDR
// if GetTaskList ( sci ) then
51194: LD_VAR 0 1
51198: PPUSH
51199: CALL_OW 437
51203: IFFALSE 51251
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51205: LD_VAR 0 1
51209: PPUSH
51210: CALL_OW 437
51214: PUSH
51215: LD_INT 1
51217: ARRAY
51218: PUSH
51219: LD_INT 1
51221: ARRAY
51222: PUSH
51223: LD_STRING l
51225: EQUAL
51226: IFFALSE 51251
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51228: LD_ADDR_VAR 0 2
51232: PUSH
51233: LD_VAR 0 1
51237: PPUSH
51238: CALL_OW 437
51242: PUSH
51243: LD_INT 1
51245: ARRAY
51246: PUSH
51247: LD_INT 4
51249: ARRAY
51250: ST_TO_ADDR
// end ;
51251: LD_VAR 0 2
51255: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51256: LD_INT 0
51258: PPUSH
51259: PPUSH
51260: PPUSH
51261: PPUSH
// if not base_units then
51262: LD_VAR 0 1
51266: NOT
51267: IFFALSE 51271
// exit ;
51269: GO 51358
// result := false ;
51271: LD_ADDR_VAR 0 2
51275: PUSH
51276: LD_INT 0
51278: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51279: LD_ADDR_VAR 0 5
51283: PUSH
51284: LD_VAR 0 1
51288: PPUSH
51289: LD_INT 21
51291: PUSH
51292: LD_INT 3
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PPUSH
51299: CALL_OW 72
51303: ST_TO_ADDR
// if not tmp then
51304: LD_VAR 0 5
51308: NOT
51309: IFFALSE 51313
// exit ;
51311: GO 51358
// for i in tmp do
51313: LD_ADDR_VAR 0 3
51317: PUSH
51318: LD_VAR 0 5
51322: PUSH
51323: FOR_IN
51324: IFFALSE 51356
// begin result := EnemyInRange ( i , 22 ) ;
51326: LD_ADDR_VAR 0 2
51330: PUSH
51331: LD_VAR 0 3
51335: PPUSH
51336: LD_INT 22
51338: PPUSH
51339: CALL 48773 0 2
51343: ST_TO_ADDR
// if result then
51344: LD_VAR 0 2
51348: IFFALSE 51354
// exit ;
51350: POP
51351: POP
51352: GO 51358
// end ;
51354: GO 51323
51356: POP
51357: POP
// end ;
51358: LD_VAR 0 2
51362: RET
// export function FilterByTag ( units , tag ) ; begin
51363: LD_INT 0
51365: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51366: LD_ADDR_VAR 0 3
51370: PUSH
51371: LD_VAR 0 1
51375: PPUSH
51376: LD_INT 120
51378: PUSH
51379: LD_VAR 0 2
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PPUSH
51388: CALL_OW 72
51392: ST_TO_ADDR
// end ;
51393: LD_VAR 0 3
51397: RET
// export function IsDriver ( un ) ; begin
51398: LD_INT 0
51400: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51401: LD_ADDR_VAR 0 2
51405: PUSH
51406: LD_VAR 0 1
51410: PUSH
51411: LD_INT 55
51413: PUSH
51414: EMPTY
51415: LIST
51416: PPUSH
51417: CALL_OW 69
51421: IN
51422: ST_TO_ADDR
// end ;
51423: LD_VAR 0 2
51427: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51428: LD_INT 0
51430: PPUSH
51431: PPUSH
// list := [ ] ;
51432: LD_ADDR_VAR 0 5
51436: PUSH
51437: EMPTY
51438: ST_TO_ADDR
// case d of 0 :
51439: LD_VAR 0 3
51443: PUSH
51444: LD_INT 0
51446: DOUBLE
51447: EQUAL
51448: IFTRUE 51452
51450: GO 51585
51452: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51453: LD_ADDR_VAR 0 5
51457: PUSH
51458: LD_VAR 0 1
51462: PUSH
51463: LD_INT 4
51465: MINUS
51466: PUSH
51467: LD_VAR 0 2
51471: PUSH
51472: LD_INT 4
51474: MINUS
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: PUSH
51484: LD_VAR 0 1
51488: PUSH
51489: LD_INT 3
51491: MINUS
51492: PUSH
51493: LD_VAR 0 2
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: PUSH
51506: LD_VAR 0 1
51510: PUSH
51511: LD_INT 4
51513: PLUS
51514: PUSH
51515: LD_VAR 0 2
51519: PUSH
51520: LD_INT 4
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: LIST
51527: PUSH
51528: LD_VAR 0 1
51532: PUSH
51533: LD_INT 3
51535: PLUS
51536: PUSH
51537: LD_VAR 0 2
51541: PUSH
51542: LD_INT 3
51544: PLUS
51545: PUSH
51546: LD_INT 5
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: PUSH
51554: LD_VAR 0 1
51558: PUSH
51559: LD_VAR 0 2
51563: PUSH
51564: LD_INT 4
51566: PLUS
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: LIST
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: ST_TO_ADDR
// end ; 1 :
51583: GO 52283
51585: LD_INT 1
51587: DOUBLE
51588: EQUAL
51589: IFTRUE 51593
51591: GO 51726
51593: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51594: LD_ADDR_VAR 0 5
51598: PUSH
51599: LD_VAR 0 1
51603: PUSH
51604: LD_VAR 0 2
51608: PUSH
51609: LD_INT 4
51611: MINUS
51612: PUSH
51613: LD_INT 3
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: PUSH
51621: LD_VAR 0 1
51625: PUSH
51626: LD_INT 3
51628: MINUS
51629: PUSH
51630: LD_VAR 0 2
51634: PUSH
51635: LD_INT 3
51637: MINUS
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: LIST
51646: PUSH
51647: LD_VAR 0 1
51651: PUSH
51652: LD_INT 4
51654: MINUS
51655: PUSH
51656: LD_VAR 0 2
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: LIST
51668: PUSH
51669: LD_VAR 0 1
51673: PUSH
51674: LD_VAR 0 2
51678: PUSH
51679: LD_INT 3
51681: PLUS
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: LIST
51690: PUSH
51691: LD_VAR 0 1
51695: PUSH
51696: LD_INT 4
51698: PLUS
51699: PUSH
51700: LD_VAR 0 2
51704: PUSH
51705: LD_INT 4
51707: PLUS
51708: PUSH
51709: LD_INT 5
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: LIST
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: ST_TO_ADDR
// end ; 2 :
51724: GO 52283
51726: LD_INT 2
51728: DOUBLE
51729: EQUAL
51730: IFTRUE 51734
51732: GO 51863
51734: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51735: LD_ADDR_VAR 0 5
51739: PUSH
51740: LD_VAR 0 1
51744: PUSH
51745: LD_VAR 0 2
51749: PUSH
51750: LD_INT 3
51752: MINUS
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: LIST
51761: PUSH
51762: LD_VAR 0 1
51766: PUSH
51767: LD_INT 4
51769: PLUS
51770: PUSH
51771: LD_VAR 0 2
51775: PUSH
51776: LD_INT 4
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: PUSH
51784: LD_VAR 0 1
51788: PUSH
51789: LD_VAR 0 2
51793: PUSH
51794: LD_INT 4
51796: PLUS
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: LIST
51805: PUSH
51806: LD_VAR 0 1
51810: PUSH
51811: LD_INT 3
51813: MINUS
51814: PUSH
51815: LD_VAR 0 2
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: LIST
51827: PUSH
51828: LD_VAR 0 1
51832: PUSH
51833: LD_INT 4
51835: MINUS
51836: PUSH
51837: LD_VAR 0 2
51841: PUSH
51842: LD_INT 4
51844: MINUS
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: LIST
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: ST_TO_ADDR
// end ; 3 :
51861: GO 52283
51863: LD_INT 3
51865: DOUBLE
51866: EQUAL
51867: IFTRUE 51871
51869: GO 52004
51871: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51872: LD_ADDR_VAR 0 5
51876: PUSH
51877: LD_VAR 0 1
51881: PUSH
51882: LD_INT 3
51884: PLUS
51885: PUSH
51886: LD_VAR 0 2
51890: PUSH
51891: LD_INT 4
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: LIST
51898: PUSH
51899: LD_VAR 0 1
51903: PUSH
51904: LD_INT 4
51906: PLUS
51907: PUSH
51908: LD_VAR 0 2
51912: PUSH
51913: LD_INT 4
51915: PLUS
51916: PUSH
51917: LD_INT 5
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: LIST
51924: PUSH
51925: LD_VAR 0 1
51929: PUSH
51930: LD_INT 4
51932: MINUS
51933: PUSH
51934: LD_VAR 0 2
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: LIST
51946: PUSH
51947: LD_VAR 0 1
51951: PUSH
51952: LD_VAR 0 2
51956: PUSH
51957: LD_INT 4
51959: MINUS
51960: PUSH
51961: LD_INT 3
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: PUSH
51969: LD_VAR 0 1
51973: PUSH
51974: LD_INT 3
51976: MINUS
51977: PUSH
51978: LD_VAR 0 2
51982: PUSH
51983: LD_INT 3
51985: MINUS
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: LIST
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: ST_TO_ADDR
// end ; 4 :
52002: GO 52283
52004: LD_INT 4
52006: DOUBLE
52007: EQUAL
52008: IFTRUE 52012
52010: GO 52145
52012: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52013: LD_ADDR_VAR 0 5
52017: PUSH
52018: LD_VAR 0 1
52022: PUSH
52023: LD_VAR 0 2
52027: PUSH
52028: LD_INT 4
52030: PLUS
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: PUSH
52040: LD_VAR 0 1
52044: PUSH
52045: LD_INT 3
52047: PLUS
52048: PUSH
52049: LD_VAR 0 2
52053: PUSH
52054: LD_INT 3
52056: PLUS
52057: PUSH
52058: LD_INT 5
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: LIST
52065: PUSH
52066: LD_VAR 0 1
52070: PUSH
52071: LD_INT 4
52073: PLUS
52074: PUSH
52075: LD_VAR 0 2
52079: PUSH
52080: LD_INT 4
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: PUSH
52088: LD_VAR 0 1
52092: PUSH
52093: LD_VAR 0 2
52097: PUSH
52098: LD_INT 3
52100: MINUS
52101: PUSH
52102: LD_INT 3
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: LIST
52109: PUSH
52110: LD_VAR 0 1
52114: PUSH
52115: LD_INT 4
52117: MINUS
52118: PUSH
52119: LD_VAR 0 2
52123: PUSH
52124: LD_INT 4
52126: MINUS
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: ST_TO_ADDR
// end ; 5 :
52143: GO 52283
52145: LD_INT 5
52147: DOUBLE
52148: EQUAL
52149: IFTRUE 52153
52151: GO 52282
52153: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52154: LD_ADDR_VAR 0 5
52158: PUSH
52159: LD_VAR 0 1
52163: PUSH
52164: LD_INT 4
52166: MINUS
52167: PUSH
52168: LD_VAR 0 2
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: PUSH
52181: LD_VAR 0 1
52185: PUSH
52186: LD_VAR 0 2
52190: PUSH
52191: LD_INT 4
52193: MINUS
52194: PUSH
52195: LD_INT 3
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: LIST
52202: PUSH
52203: LD_VAR 0 1
52207: PUSH
52208: LD_INT 4
52210: PLUS
52211: PUSH
52212: LD_VAR 0 2
52216: PUSH
52217: LD_INT 4
52219: PLUS
52220: PUSH
52221: LD_INT 5
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: PUSH
52229: LD_VAR 0 1
52233: PUSH
52234: LD_INT 3
52236: PLUS
52237: PUSH
52238: LD_VAR 0 2
52242: PUSH
52243: LD_INT 4
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: LIST
52250: PUSH
52251: LD_VAR 0 1
52255: PUSH
52256: LD_VAR 0 2
52260: PUSH
52261: LD_INT 3
52263: PLUS
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: ST_TO_ADDR
// end ; end ;
52280: GO 52283
52282: POP
// result := list ;
52283: LD_ADDR_VAR 0 4
52287: PUSH
52288: LD_VAR 0 5
52292: ST_TO_ADDR
// end ;
52293: LD_VAR 0 4
52297: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52298: LD_INT 0
52300: PPUSH
52301: PPUSH
52302: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52303: LD_VAR 0 1
52307: NOT
52308: IFTRUE 52336
52310: PUSH
52311: LD_VAR 0 2
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: LD_INT 4
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: IN
52334: NOT
52335: OR
52336: IFFALSE 52340
// exit ;
52338: GO 52423
// tmp := [ ] ;
52340: LD_ADDR_VAR 0 5
52344: PUSH
52345: EMPTY
52346: ST_TO_ADDR
// for i in units do
52347: LD_ADDR_VAR 0 4
52351: PUSH
52352: LD_VAR 0 1
52356: PUSH
52357: FOR_IN
52358: IFFALSE 52392
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52360: LD_ADDR_VAR 0 5
52364: PUSH
52365: LD_VAR 0 5
52369: PPUSH
52370: LD_VAR 0 4
52374: PPUSH
52375: LD_VAR 0 2
52379: PPUSH
52380: CALL_OW 259
52384: PPUSH
52385: CALL 53818 0 2
52389: ST_TO_ADDR
52390: GO 52357
52392: POP
52393: POP
// if not tmp then
52394: LD_VAR 0 5
52398: NOT
52399: IFFALSE 52403
// exit ;
52401: GO 52423
// result := SortListByListDesc ( units , tmp ) ;
52403: LD_ADDR_VAR 0 3
52407: PUSH
52408: LD_VAR 0 1
52412: PPUSH
52413: LD_VAR 0 5
52417: PPUSH
52418: CALL_OW 77
52422: ST_TO_ADDR
// end ;
52423: LD_VAR 0 3
52427: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52428: LD_INT 0
52430: PPUSH
52431: PPUSH
52432: PPUSH
// result := false ;
52433: LD_ADDR_VAR 0 3
52437: PUSH
52438: LD_INT 0
52440: ST_TO_ADDR
// if not building then
52441: LD_VAR 0 2
52445: NOT
52446: IFFALSE 52450
// exit ;
52448: GO 52594
// x := GetX ( building ) ;
52450: LD_ADDR_VAR 0 4
52454: PUSH
52455: LD_VAR 0 2
52459: PPUSH
52460: CALL_OW 250
52464: ST_TO_ADDR
// y := GetY ( building ) ;
52465: LD_ADDR_VAR 0 5
52469: PUSH
52470: LD_VAR 0 2
52474: PPUSH
52475: CALL_OW 251
52479: ST_TO_ADDR
// if not x or not y then
52480: LD_VAR 0 4
52484: NOT
52485: IFTRUE 52494
52487: PUSH
52488: LD_VAR 0 5
52492: NOT
52493: OR
52494: IFFALSE 52498
// exit ;
52496: GO 52594
// if GetTaskList ( unit ) then
52498: LD_VAR 0 1
52502: PPUSH
52503: CALL_OW 437
52507: IFFALSE 52594
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52509: LD_STRING e
52511: PUSH
52512: LD_VAR 0 1
52516: PPUSH
52517: CALL_OW 437
52521: PUSH
52522: LD_INT 1
52524: ARRAY
52525: PUSH
52526: LD_INT 1
52528: ARRAY
52529: EQUAL
52530: IFFALSE 52557
52532: PUSH
52533: LD_VAR 0 4
52537: PUSH
52538: LD_VAR 0 1
52542: PPUSH
52543: CALL_OW 437
52547: PUSH
52548: LD_INT 1
52550: ARRAY
52551: PUSH
52552: LD_INT 2
52554: ARRAY
52555: EQUAL
52556: AND
52557: IFFALSE 52584
52559: PUSH
52560: LD_VAR 0 5
52564: PUSH
52565: LD_VAR 0 1
52569: PPUSH
52570: CALL_OW 437
52574: PUSH
52575: LD_INT 1
52577: ARRAY
52578: PUSH
52579: LD_INT 3
52581: ARRAY
52582: EQUAL
52583: AND
52584: IFFALSE 52594
// result := true end ;
52586: LD_ADDR_VAR 0 3
52590: PUSH
52591: LD_INT 1
52593: ST_TO_ADDR
// end ;
52594: LD_VAR 0 3
52598: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52599: LD_INT 0
52601: PPUSH
// result := false ;
52602: LD_ADDR_VAR 0 4
52606: PUSH
52607: LD_INT 0
52609: ST_TO_ADDR
// if GetTaskList ( unit ) then
52610: LD_VAR 0 1
52614: PPUSH
52615: CALL_OW 437
52619: IFFALSE 52706
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52621: LD_STRING M
52623: PUSH
52624: LD_VAR 0 1
52628: PPUSH
52629: CALL_OW 437
52633: PUSH
52634: LD_INT 1
52636: ARRAY
52637: PUSH
52638: LD_INT 1
52640: ARRAY
52641: EQUAL
52642: IFFALSE 52669
52644: PUSH
52645: LD_VAR 0 2
52649: PUSH
52650: LD_VAR 0 1
52654: PPUSH
52655: CALL_OW 437
52659: PUSH
52660: LD_INT 1
52662: ARRAY
52663: PUSH
52664: LD_INT 2
52666: ARRAY
52667: EQUAL
52668: AND
52669: IFFALSE 52696
52671: PUSH
52672: LD_VAR 0 3
52676: PUSH
52677: LD_VAR 0 1
52681: PPUSH
52682: CALL_OW 437
52686: PUSH
52687: LD_INT 1
52689: ARRAY
52690: PUSH
52691: LD_INT 3
52693: ARRAY
52694: EQUAL
52695: AND
52696: IFFALSE 52706
// result := true ;
52698: LD_ADDR_VAR 0 4
52702: PUSH
52703: LD_INT 1
52705: ST_TO_ADDR
// end ; end ;
52706: LD_VAR 0 4
52710: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52711: LD_INT 0
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
// if not unit or not area then
52717: LD_VAR 0 1
52721: NOT
52722: IFTRUE 52731
52724: PUSH
52725: LD_VAR 0 2
52729: NOT
52730: OR
52731: IFFALSE 52735
// exit ;
52733: GO 52911
// tmp := AreaToList ( area , i ) ;
52735: LD_ADDR_VAR 0 6
52739: PUSH
52740: LD_VAR 0 2
52744: PPUSH
52745: LD_VAR 0 5
52749: PPUSH
52750: CALL_OW 517
52754: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52755: LD_ADDR_VAR 0 5
52759: PUSH
52760: DOUBLE
52761: LD_INT 1
52763: DEC
52764: ST_TO_ADDR
52765: LD_VAR 0 6
52769: PUSH
52770: LD_INT 1
52772: ARRAY
52773: PUSH
52774: FOR_TO
52775: IFFALSE 52909
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52777: LD_ADDR_VAR 0 7
52781: PUSH
52782: LD_VAR 0 6
52786: PUSH
52787: LD_INT 1
52789: ARRAY
52790: PUSH
52791: LD_VAR 0 5
52795: ARRAY
52796: PUSH
52797: LD_VAR 0 6
52801: PUSH
52802: LD_INT 2
52804: ARRAY
52805: PUSH
52806: LD_VAR 0 5
52810: ARRAY
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52816: LD_INT 92
52818: PUSH
52819: LD_VAR 0 7
52823: PUSH
52824: LD_INT 1
52826: ARRAY
52827: PUSH
52828: LD_VAR 0 7
52832: PUSH
52833: LD_INT 2
52835: ARRAY
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: PPUSH
52846: CALL_OW 69
52850: PUSH
52851: LD_INT 0
52853: EQUAL
52854: IFFALSE 52907
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52856: LD_VAR 0 1
52860: PPUSH
52861: LD_VAR 0 7
52865: PUSH
52866: LD_INT 1
52868: ARRAY
52869: PPUSH
52870: LD_VAR 0 7
52874: PUSH
52875: LD_INT 2
52877: ARRAY
52878: PPUSH
52879: LD_VAR 0 3
52883: PPUSH
52884: CALL_OW 48
// result := IsPlaced ( unit ) ;
52888: LD_ADDR_VAR 0 4
52892: PUSH
52893: LD_VAR 0 1
52897: PPUSH
52898: CALL_OW 305
52902: ST_TO_ADDR
// exit ;
52903: POP
52904: POP
52905: GO 52911
// end ; end ;
52907: GO 52774
52909: POP
52910: POP
// end ;
52911: LD_VAR 0 4
52915: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52916: LD_INT 0
52918: PPUSH
52919: PPUSH
52920: PPUSH
// if not side or side > 8 then
52921: LD_VAR 0 1
52925: NOT
52926: IFTRUE 52938
52928: PUSH
52929: LD_VAR 0 1
52933: PUSH
52934: LD_INT 8
52936: GREATER
52937: OR
52938: IFFALSE 52942
// exit ;
52940: GO 53129
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52942: LD_ADDR_VAR 0 4
52946: PUSH
52947: LD_INT 22
52949: PUSH
52950: LD_VAR 0 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 21
52961: PUSH
52962: LD_INT 3
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PPUSH
52973: CALL_OW 69
52977: ST_TO_ADDR
// if not tmp then
52978: LD_VAR 0 4
52982: NOT
52983: IFFALSE 52987
// exit ;
52985: GO 53129
// enable_addtolog := true ;
52987: LD_ADDR_OWVAR 81
52991: PUSH
52992: LD_INT 1
52994: ST_TO_ADDR
// AddToLog ( [ ) ;
52995: LD_STRING [
52997: PPUSH
52998: CALL_OW 561
// for i in tmp do
53002: LD_ADDR_VAR 0 3
53006: PUSH
53007: LD_VAR 0 4
53011: PUSH
53012: FOR_IN
53013: IFFALSE 53120
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53015: LD_STRING [
53017: PUSH
53018: LD_VAR 0 3
53022: PPUSH
53023: CALL_OW 266
53027: STR
53028: PUSH
53029: LD_STRING , 
53031: STR
53032: PUSH
53033: LD_VAR 0 3
53037: PPUSH
53038: CALL_OW 250
53042: STR
53043: PUSH
53044: LD_STRING , 
53046: STR
53047: PUSH
53048: LD_VAR 0 3
53052: PPUSH
53053: CALL_OW 251
53057: STR
53058: PUSH
53059: LD_STRING , 
53061: STR
53062: PUSH
53063: LD_VAR 0 3
53067: PPUSH
53068: CALL_OW 254
53072: STR
53073: PUSH
53074: LD_STRING , 
53076: STR
53077: PUSH
53078: LD_VAR 0 3
53082: PPUSH
53083: LD_INT 1
53085: PPUSH
53086: CALL_OW 268
53090: STR
53091: PUSH
53092: LD_STRING , 
53094: STR
53095: PUSH
53096: LD_VAR 0 3
53100: PPUSH
53101: LD_INT 2
53103: PPUSH
53104: CALL_OW 268
53108: STR
53109: PUSH
53110: LD_STRING ],
53112: STR
53113: PPUSH
53114: CALL_OW 561
// end ;
53118: GO 53012
53120: POP
53121: POP
// AddToLog ( ]; ) ;
53122: LD_STRING ];
53124: PPUSH
53125: CALL_OW 561
// end ;
53129: LD_VAR 0 2
53133: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53134: LD_INT 0
53136: PPUSH
53137: PPUSH
53138: PPUSH
53139: PPUSH
53140: PPUSH
// if not area or not rate or not max then
53141: LD_VAR 0 1
53145: NOT
53146: IFTRUE 53155
53148: PUSH
53149: LD_VAR 0 2
53153: NOT
53154: OR
53155: IFTRUE 53164
53157: PUSH
53158: LD_VAR 0 4
53162: NOT
53163: OR
53164: IFFALSE 53168
// exit ;
53166: GO 53357
// while 1 do
53168: LD_INT 1
53170: IFFALSE 53357
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53172: LD_ADDR_VAR 0 9
53176: PUSH
53177: LD_VAR 0 1
53181: PPUSH
53182: LD_INT 1
53184: PPUSH
53185: CALL_OW 287
53189: PUSH
53190: LD_INT 10
53192: MUL
53193: ST_TO_ADDR
// r := rate / 10 ;
53194: LD_ADDR_VAR 0 7
53198: PUSH
53199: LD_VAR 0 2
53203: PUSH
53204: LD_INT 10
53206: DIVREAL
53207: ST_TO_ADDR
// time := 1 1$00 ;
53208: LD_ADDR_VAR 0 8
53212: PUSH
53213: LD_INT 2100
53215: ST_TO_ADDR
// if amount < min then
53216: LD_VAR 0 9
53220: PUSH
53221: LD_VAR 0 3
53225: LESS
53226: IFFALSE 53244
// r := r * 2 else
53228: LD_ADDR_VAR 0 7
53232: PUSH
53233: LD_VAR 0 7
53237: PUSH
53238: LD_INT 2
53240: MUL
53241: ST_TO_ADDR
53242: GO 53270
// if amount > max then
53244: LD_VAR 0 9
53248: PUSH
53249: LD_VAR 0 4
53253: GREATER
53254: IFFALSE 53270
// r := r / 2 ;
53256: LD_ADDR_VAR 0 7
53260: PUSH
53261: LD_VAR 0 7
53265: PUSH
53266: LD_INT 2
53268: DIVREAL
53269: ST_TO_ADDR
// time := time / r ;
53270: LD_ADDR_VAR 0 8
53274: PUSH
53275: LD_VAR 0 8
53279: PUSH
53280: LD_VAR 0 7
53284: DIVREAL
53285: ST_TO_ADDR
// if time < 0 then
53286: LD_VAR 0 8
53290: PUSH
53291: LD_INT 0
53293: LESS
53294: IFFALSE 53311
// time := time * - 1 ;
53296: LD_ADDR_VAR 0 8
53300: PUSH
53301: LD_VAR 0 8
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: MUL
53310: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53311: LD_VAR 0 8
53315: PUSH
53316: LD_INT 35
53318: PPUSH
53319: LD_INT 875
53321: PPUSH
53322: CALL_OW 12
53326: PLUS
53327: PPUSH
53328: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53332: LD_INT 1
53334: PPUSH
53335: LD_INT 5
53337: PPUSH
53338: CALL_OW 12
53342: PPUSH
53343: LD_VAR 0 1
53347: PPUSH
53348: LD_INT 1
53350: PPUSH
53351: CALL_OW 55
// end ;
53355: GO 53168
// end ;
53357: LD_VAR 0 5
53361: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53362: LD_INT 0
53364: PPUSH
53365: PPUSH
53366: PPUSH
53367: PPUSH
53368: PPUSH
53369: PPUSH
53370: PPUSH
53371: PPUSH
// if not turrets or not factories then
53372: LD_VAR 0 1
53376: NOT
53377: IFTRUE 53386
53379: PUSH
53380: LD_VAR 0 2
53384: NOT
53385: OR
53386: IFFALSE 53390
// exit ;
53388: GO 53697
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53390: LD_ADDR_VAR 0 10
53394: PUSH
53395: LD_INT 5
53397: PUSH
53398: LD_INT 6
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: LD_INT 4
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: LD_INT 5
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 24
53432: PUSH
53433: LD_INT 25
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 23
53442: PUSH
53443: LD_INT 27
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 42
53456: PUSH
53457: LD_INT 43
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 44
53466: PUSH
53467: LD_INT 46
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 45
53476: PUSH
53477: LD_INT 47
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: LIST
53493: ST_TO_ADDR
// result := [ ] ;
53494: LD_ADDR_VAR 0 3
53498: PUSH
53499: EMPTY
53500: ST_TO_ADDR
// for i in turrets do
53501: LD_ADDR_VAR 0 4
53505: PUSH
53506: LD_VAR 0 1
53510: PUSH
53511: FOR_IN
53512: IFFALSE 53695
// begin nat := GetNation ( i ) ;
53514: LD_ADDR_VAR 0 7
53518: PUSH
53519: LD_VAR 0 4
53523: PPUSH
53524: CALL_OW 248
53528: ST_TO_ADDR
// weapon := 0 ;
53529: LD_ADDR_VAR 0 8
53533: PUSH
53534: LD_INT 0
53536: ST_TO_ADDR
// if not nat then
53537: LD_VAR 0 7
53541: NOT
53542: IFFALSE 53546
// continue ;
53544: GO 53511
// for j in list [ nat ] do
53546: LD_ADDR_VAR 0 5
53550: PUSH
53551: LD_VAR 0 10
53555: PUSH
53556: LD_VAR 0 7
53560: ARRAY
53561: PUSH
53562: FOR_IN
53563: IFFALSE 53604
// if GetBWeapon ( i ) = j [ 1 ] then
53565: LD_VAR 0 4
53569: PPUSH
53570: CALL_OW 269
53574: PUSH
53575: LD_VAR 0 5
53579: PUSH
53580: LD_INT 1
53582: ARRAY
53583: EQUAL
53584: IFFALSE 53602
// begin weapon := j [ 2 ] ;
53586: LD_ADDR_VAR 0 8
53590: PUSH
53591: LD_VAR 0 5
53595: PUSH
53596: LD_INT 2
53598: ARRAY
53599: ST_TO_ADDR
// break ;
53600: GO 53604
// end ;
53602: GO 53562
53604: POP
53605: POP
// if not weapon then
53606: LD_VAR 0 8
53610: NOT
53611: IFFALSE 53615
// continue ;
53613: GO 53511
// for k in factories do
53615: LD_ADDR_VAR 0 6
53619: PUSH
53620: LD_VAR 0 2
53624: PUSH
53625: FOR_IN
53626: IFFALSE 53691
// begin weapons := AvailableWeaponList ( k ) ;
53628: LD_ADDR_VAR 0 9
53632: PUSH
53633: LD_VAR 0 6
53637: PPUSH
53638: CALL_OW 478
53642: ST_TO_ADDR
// if not weapons then
53643: LD_VAR 0 9
53647: NOT
53648: IFFALSE 53652
// continue ;
53650: GO 53625
// if weapon in weapons then
53652: LD_VAR 0 8
53656: PUSH
53657: LD_VAR 0 9
53661: IN
53662: IFFALSE 53689
// begin result := [ i , weapon ] ;
53664: LD_ADDR_VAR 0 3
53668: PUSH
53669: LD_VAR 0 4
53673: PUSH
53674: LD_VAR 0 8
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: ST_TO_ADDR
// exit ;
53683: POP
53684: POP
53685: POP
53686: POP
53687: GO 53697
// end ; end ;
53689: GO 53625
53691: POP
53692: POP
// end ;
53693: GO 53511
53695: POP
53696: POP
// end ;
53697: LD_VAR 0 3
53701: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53702: LD_INT 0
53704: PPUSH
// if not side or side > 8 then
53705: LD_VAR 0 3
53709: NOT
53710: IFTRUE 53722
53712: PUSH
53713: LD_VAR 0 3
53717: PUSH
53718: LD_INT 8
53720: GREATER
53721: OR
53722: IFFALSE 53726
// exit ;
53724: GO 53785
// if not range then
53726: LD_VAR 0 4
53730: NOT
53731: IFFALSE 53742
// range := - 12 ;
53733: LD_ADDR_VAR 0 4
53737: PUSH
53738: LD_INT 12
53740: NEG
53741: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53742: LD_VAR 0 1
53746: PPUSH
53747: LD_VAR 0 2
53751: PPUSH
53752: LD_VAR 0 3
53756: PPUSH
53757: LD_VAR 0 4
53761: PPUSH
53762: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53766: LD_VAR 0 1
53770: PPUSH
53771: LD_VAR 0 2
53775: PPUSH
53776: LD_VAR 0 3
53780: PPUSH
53781: CALL_OW 331
// end ;
53785: LD_VAR 0 5
53789: RET
// export function Video ( mode ) ; begin
53790: LD_INT 0
53792: PPUSH
// ingame_video = mode ;
53793: LD_ADDR_OWVAR 52
53797: PUSH
53798: LD_VAR 0 1
53802: ST_TO_ADDR
// interface_hidden = mode ;
53803: LD_ADDR_OWVAR 54
53807: PUSH
53808: LD_VAR 0 1
53812: ST_TO_ADDR
// end ;
53813: LD_VAR 0 2
53817: RET
// export function Join ( array , element ) ; begin
53818: LD_INT 0
53820: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53821: LD_ADDR_VAR 0 3
53825: PUSH
53826: LD_VAR 0 1
53830: PPUSH
53831: LD_VAR 0 1
53835: PUSH
53836: LD_INT 1
53838: PLUS
53839: PPUSH
53840: LD_VAR 0 2
53844: PPUSH
53845: CALL_OW 1
53849: ST_TO_ADDR
// end ;
53850: LD_VAR 0 3
53854: RET
// export function JoinUnion ( array , element ) ; begin
53855: LD_INT 0
53857: PPUSH
// result := array union element ;
53858: LD_ADDR_VAR 0 3
53862: PUSH
53863: LD_VAR 0 1
53867: PUSH
53868: LD_VAR 0 2
53872: UNION
53873: ST_TO_ADDR
// end ;
53874: LD_VAR 0 3
53878: RET
// export function GetBehemoths ( side ) ; begin
53879: LD_INT 0
53881: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53882: LD_ADDR_VAR 0 2
53886: PUSH
53887: LD_INT 22
53889: PUSH
53890: LD_VAR 0 1
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 31
53901: PUSH
53902: LD_INT 25
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PPUSH
53913: CALL_OW 69
53917: ST_TO_ADDR
// end ;
53918: LD_VAR 0 2
53922: RET
// export function Shuffle ( array ) ; var i , index ; begin
53923: LD_INT 0
53925: PPUSH
53926: PPUSH
53927: PPUSH
// result := [ ] ;
53928: LD_ADDR_VAR 0 2
53932: PUSH
53933: EMPTY
53934: ST_TO_ADDR
// if not array then
53935: LD_VAR 0 1
53939: NOT
53940: IFFALSE 53944
// exit ;
53942: GO 54043
// Randomize ;
53944: CALL_OW 10
// for i = array downto 1 do
53948: LD_ADDR_VAR 0 3
53952: PUSH
53953: DOUBLE
53954: LD_VAR 0 1
53958: INC
53959: ST_TO_ADDR
53960: LD_INT 1
53962: PUSH
53963: FOR_DOWNTO
53964: IFFALSE 54041
// begin index := rand ( 1 , array ) ;
53966: LD_ADDR_VAR 0 4
53970: PUSH
53971: LD_INT 1
53973: PPUSH
53974: LD_VAR 0 1
53978: PPUSH
53979: CALL_OW 12
53983: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53984: LD_ADDR_VAR 0 2
53988: PUSH
53989: LD_VAR 0 2
53993: PPUSH
53994: LD_VAR 0 2
53998: PUSH
53999: LD_INT 1
54001: PLUS
54002: PPUSH
54003: LD_VAR 0 1
54007: PUSH
54008: LD_VAR 0 4
54012: ARRAY
54013: PPUSH
54014: CALL_OW 2
54018: ST_TO_ADDR
// array := Delete ( array , index ) ;
54019: LD_ADDR_VAR 0 1
54023: PUSH
54024: LD_VAR 0 1
54028: PPUSH
54029: LD_VAR 0 4
54033: PPUSH
54034: CALL_OW 3
54038: ST_TO_ADDR
// end ;
54039: GO 53963
54041: POP
54042: POP
// end ;
54043: LD_VAR 0 2
54047: RET
// export function GetBaseMaterials ( base ) ; begin
54048: LD_INT 0
54050: PPUSH
// result := [ 0 , 0 , 0 ] ;
54051: LD_ADDR_VAR 0 2
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
// if not base then
54070: LD_VAR 0 1
54074: NOT
54075: IFFALSE 54079
// exit ;
54077: GO 54128
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54079: LD_ADDR_VAR 0 2
54083: PUSH
54084: LD_VAR 0 1
54088: PPUSH
54089: LD_INT 1
54091: PPUSH
54092: CALL_OW 275
54096: PUSH
54097: LD_VAR 0 1
54101: PPUSH
54102: LD_INT 2
54104: PPUSH
54105: CALL_OW 275
54109: PUSH
54110: LD_VAR 0 1
54114: PPUSH
54115: LD_INT 3
54117: PPUSH
54118: CALL_OW 275
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: LIST
54127: ST_TO_ADDR
// end ;
54128: LD_VAR 0 2
54132: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54133: LD_INT 0
54135: PPUSH
54136: PPUSH
// result := array ;
54137: LD_ADDR_VAR 0 3
54141: PUSH
54142: LD_VAR 0 1
54146: ST_TO_ADDR
// if size >= result then
54147: LD_VAR 0 2
54151: PUSH
54152: LD_VAR 0 3
54156: GREATEREQUAL
54157: IFFALSE 54161
// exit ;
54159: GO 54211
// if size then
54161: LD_VAR 0 2
54165: IFFALSE 54211
// for i := array downto size do
54167: LD_ADDR_VAR 0 4
54171: PUSH
54172: DOUBLE
54173: LD_VAR 0 1
54177: INC
54178: ST_TO_ADDR
54179: LD_VAR 0 2
54183: PUSH
54184: FOR_DOWNTO
54185: IFFALSE 54209
// result := Delete ( result , result ) ;
54187: LD_ADDR_VAR 0 3
54191: PUSH
54192: LD_VAR 0 3
54196: PPUSH
54197: LD_VAR 0 3
54201: PPUSH
54202: CALL_OW 3
54206: ST_TO_ADDR
54207: GO 54184
54209: POP
54210: POP
// end ;
54211: LD_VAR 0 3
54215: RET
// export function ComExit ( unit ) ; var tmp ; begin
54216: LD_INT 0
54218: PPUSH
54219: PPUSH
// if not IsInUnit ( unit ) then
54220: LD_VAR 0 1
54224: PPUSH
54225: CALL_OW 310
54229: NOT
54230: IFFALSE 54234
// exit ;
54232: GO 54294
// tmp := IsInUnit ( unit ) ;
54234: LD_ADDR_VAR 0 3
54238: PUSH
54239: LD_VAR 0 1
54243: PPUSH
54244: CALL_OW 310
54248: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54249: LD_VAR 0 3
54253: PPUSH
54254: CALL_OW 247
54258: PUSH
54259: LD_INT 2
54261: EQUAL
54262: IFFALSE 54275
// ComExitVehicle ( unit ) else
54264: LD_VAR 0 1
54268: PPUSH
54269: CALL_OW 121
54273: GO 54284
// ComExitBuilding ( unit ) ;
54275: LD_VAR 0 1
54279: PPUSH
54280: CALL_OW 122
// result := tmp ;
54284: LD_ADDR_VAR 0 2
54288: PUSH
54289: LD_VAR 0 3
54293: ST_TO_ADDR
// end ;
54294: LD_VAR 0 2
54298: RET
// export function ComExitAll ( units ) ; var i ; begin
54299: LD_INT 0
54301: PPUSH
54302: PPUSH
// if not units then
54303: LD_VAR 0 1
54307: NOT
54308: IFFALSE 54312
// exit ;
54310: GO 54338
// for i in units do
54312: LD_ADDR_VAR 0 3
54316: PUSH
54317: LD_VAR 0 1
54321: PUSH
54322: FOR_IN
54323: IFFALSE 54336
// ComExit ( i ) ;
54325: LD_VAR 0 3
54329: PPUSH
54330: CALL 54216 0 1
54334: GO 54322
54336: POP
54337: POP
// end ;
54338: LD_VAR 0 2
54342: RET
// export function ResetHc ; begin
54343: LD_INT 0
54345: PPUSH
// InitHc ;
54346: CALL_OW 19
// hc_importance := 0 ;
54350: LD_ADDR_OWVAR 32
54354: PUSH
54355: LD_INT 0
54357: ST_TO_ADDR
// end ;
54358: LD_VAR 0 1
54362: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54363: LD_INT 0
54365: PPUSH
54366: PPUSH
54367: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54368: LD_ADDR_VAR 0 6
54372: PUSH
54373: LD_VAR 0 1
54377: PUSH
54378: LD_VAR 0 3
54382: PLUS
54383: PUSH
54384: LD_INT 2
54386: DIV
54387: ST_TO_ADDR
// if _x < 0 then
54388: LD_VAR 0 6
54392: PUSH
54393: LD_INT 0
54395: LESS
54396: IFFALSE 54413
// _x := _x * - 1 ;
54398: LD_ADDR_VAR 0 6
54402: PUSH
54403: LD_VAR 0 6
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: MUL
54412: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54413: LD_ADDR_VAR 0 7
54417: PUSH
54418: LD_VAR 0 2
54422: PUSH
54423: LD_VAR 0 4
54427: PLUS
54428: PUSH
54429: LD_INT 2
54431: DIV
54432: ST_TO_ADDR
// if _y < 0 then
54433: LD_VAR 0 7
54437: PUSH
54438: LD_INT 0
54440: LESS
54441: IFFALSE 54458
// _y := _y * - 1 ;
54443: LD_ADDR_VAR 0 7
54447: PUSH
54448: LD_VAR 0 7
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: MUL
54457: ST_TO_ADDR
// result := [ _x , _y ] ;
54458: LD_ADDR_VAR 0 5
54462: PUSH
54463: LD_VAR 0 6
54467: PUSH
54468: LD_VAR 0 7
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: ST_TO_ADDR
// end ;
54477: LD_VAR 0 5
54481: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54482: LD_INT 0
54484: PPUSH
54485: PPUSH
54486: PPUSH
54487: PPUSH
// task := GetTaskList ( unit ) ;
54488: LD_ADDR_VAR 0 7
54492: PUSH
54493: LD_VAR 0 1
54497: PPUSH
54498: CALL_OW 437
54502: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54503: LD_VAR 0 7
54507: NOT
54508: IFFALSE 54527
54510: PUSH
54511: LD_VAR 0 1
54515: PPUSH
54516: LD_VAR 0 2
54520: PPUSH
54521: CALL_OW 308
54525: NOT
54526: AND
54527: IFFALSE 54531
// exit ;
54529: GO 54649
// if IsInArea ( unit , area ) then
54531: LD_VAR 0 1
54535: PPUSH
54536: LD_VAR 0 2
54540: PPUSH
54541: CALL_OW 308
54545: IFFALSE 54563
// begin ComMoveToArea ( unit , goAway ) ;
54547: LD_VAR 0 1
54551: PPUSH
54552: LD_VAR 0 3
54556: PPUSH
54557: CALL_OW 113
// exit ;
54561: GO 54649
// end ; if task [ 1 ] [ 1 ] <> M then
54563: LD_VAR 0 7
54567: PUSH
54568: LD_INT 1
54570: ARRAY
54571: PUSH
54572: LD_INT 1
54574: ARRAY
54575: PUSH
54576: LD_STRING M
54578: NONEQUAL
54579: IFFALSE 54583
// exit ;
54581: GO 54649
// x := task [ 1 ] [ 2 ] ;
54583: LD_ADDR_VAR 0 5
54587: PUSH
54588: LD_VAR 0 7
54592: PUSH
54593: LD_INT 1
54595: ARRAY
54596: PUSH
54597: LD_INT 2
54599: ARRAY
54600: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54601: LD_ADDR_VAR 0 6
54605: PUSH
54606: LD_VAR 0 7
54610: PUSH
54611: LD_INT 1
54613: ARRAY
54614: PUSH
54615: LD_INT 3
54617: ARRAY
54618: ST_TO_ADDR
// if InArea ( x , y , area ) then
54619: LD_VAR 0 5
54623: PPUSH
54624: LD_VAR 0 6
54628: PPUSH
54629: LD_VAR 0 2
54633: PPUSH
54634: CALL_OW 309
54638: IFFALSE 54649
// ComStop ( unit ) ;
54640: LD_VAR 0 1
54644: PPUSH
54645: CALL_OW 141
// end ;
54649: LD_VAR 0 4
54653: RET
// export function Abs ( value ) ; begin
54654: LD_INT 0
54656: PPUSH
// result := value ;
54657: LD_ADDR_VAR 0 2
54661: PUSH
54662: LD_VAR 0 1
54666: ST_TO_ADDR
// if value < 0 then
54667: LD_VAR 0 1
54671: PUSH
54672: LD_INT 0
54674: LESS
54675: IFFALSE 54692
// result := value * - 1 ;
54677: LD_ADDR_VAR 0 2
54681: PUSH
54682: LD_VAR 0 1
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: MUL
54691: ST_TO_ADDR
// end ;
54692: LD_VAR 0 2
54696: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54697: LD_INT 0
54699: PPUSH
54700: PPUSH
54701: PPUSH
54702: PPUSH
54703: PPUSH
54704: PPUSH
54705: PPUSH
54706: PPUSH
// if not unit or not building then
54707: LD_VAR 0 1
54711: NOT
54712: IFTRUE 54721
54714: PUSH
54715: LD_VAR 0 2
54719: NOT
54720: OR
54721: IFFALSE 54725
// exit ;
54723: GO 54953
// x := GetX ( building ) ;
54725: LD_ADDR_VAR 0 4
54729: PUSH
54730: LD_VAR 0 2
54734: PPUSH
54735: CALL_OW 250
54739: ST_TO_ADDR
// y := GetY ( building ) ;
54740: LD_ADDR_VAR 0 6
54744: PUSH
54745: LD_VAR 0 2
54749: PPUSH
54750: CALL_OW 251
54754: ST_TO_ADDR
// d := GetDir ( building ) ;
54755: LD_ADDR_VAR 0 8
54759: PUSH
54760: LD_VAR 0 2
54764: PPUSH
54765: CALL_OW 254
54769: ST_TO_ADDR
// r := 4 ;
54770: LD_ADDR_VAR 0 9
54774: PUSH
54775: LD_INT 4
54777: ST_TO_ADDR
// for i := 1 to 5 do
54778: LD_ADDR_VAR 0 10
54782: PUSH
54783: DOUBLE
54784: LD_INT 1
54786: DEC
54787: ST_TO_ADDR
54788: LD_INT 5
54790: PUSH
54791: FOR_TO
54792: IFFALSE 54951
// begin _x := ShiftX ( x , d , r + i ) ;
54794: LD_ADDR_VAR 0 5
54798: PUSH
54799: LD_VAR 0 4
54803: PPUSH
54804: LD_VAR 0 8
54808: PPUSH
54809: LD_VAR 0 9
54813: PUSH
54814: LD_VAR 0 10
54818: PLUS
54819: PPUSH
54820: CALL_OW 272
54824: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54825: LD_ADDR_VAR 0 7
54829: PUSH
54830: LD_VAR 0 6
54834: PPUSH
54835: LD_VAR 0 8
54839: PPUSH
54840: LD_VAR 0 9
54844: PUSH
54845: LD_VAR 0 10
54849: PLUS
54850: PPUSH
54851: CALL_OW 273
54855: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54856: LD_VAR 0 5
54860: PPUSH
54861: LD_VAR 0 7
54865: PPUSH
54866: CALL_OW 488
54870: IFFALSE 54905
54872: PUSH
54873: LD_VAR 0 5
54877: PPUSH
54878: LD_VAR 0 7
54882: PPUSH
54883: CALL_OW 428
54887: PPUSH
54888: CALL_OW 247
54892: PUSH
54893: LD_INT 3
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: IN
54903: NOT
54904: AND
54905: IFFALSE 54949
// begin ComMoveXY ( unit , _x , _y ) ;
54907: LD_VAR 0 1
54911: PPUSH
54912: LD_VAR 0 5
54916: PPUSH
54917: LD_VAR 0 7
54921: PPUSH
54922: CALL_OW 111
// result := [ _x , _y ] ;
54926: LD_ADDR_VAR 0 3
54930: PUSH
54931: LD_VAR 0 5
54935: PUSH
54936: LD_VAR 0 7
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: ST_TO_ADDR
// exit ;
54945: POP
54946: POP
54947: GO 54953
// end ; end ;
54949: GO 54791
54951: POP
54952: POP
// end ;
54953: LD_VAR 0 3
54957: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54958: LD_INT 0
54960: PPUSH
54961: PPUSH
54962: PPUSH
// result := 0 ;
54963: LD_ADDR_VAR 0 3
54967: PUSH
54968: LD_INT 0
54970: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54971: LD_VAR 0 1
54975: PUSH
54976: LD_INT 0
54978: LESS
54979: IFTRUE 54991
54981: PUSH
54982: LD_VAR 0 1
54986: PUSH
54987: LD_INT 8
54989: GREATER
54990: OR
54991: IFTRUE 55003
54993: PUSH
54994: LD_VAR 0 2
54998: PUSH
54999: LD_INT 0
55001: LESS
55002: OR
55003: IFTRUE 55015
55005: PUSH
55006: LD_VAR 0 2
55010: PUSH
55011: LD_INT 8
55013: GREATER
55014: OR
55015: IFFALSE 55019
// exit ;
55017: GO 55094
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55019: LD_ADDR_VAR 0 4
55023: PUSH
55024: LD_INT 22
55026: PUSH
55027: LD_VAR 0 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PPUSH
55036: CALL_OW 69
55040: PUSH
55041: FOR_IN
55042: IFFALSE 55092
// begin un := UnitShoot ( i ) ;
55044: LD_ADDR_VAR 0 5
55048: PUSH
55049: LD_VAR 0 4
55053: PPUSH
55054: CALL_OW 504
55058: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55059: LD_VAR 0 5
55063: PPUSH
55064: CALL_OW 255
55068: PUSH
55069: LD_VAR 0 1
55073: EQUAL
55074: IFFALSE 55090
// begin result := un ;
55076: LD_ADDR_VAR 0 3
55080: PUSH
55081: LD_VAR 0 5
55085: ST_TO_ADDR
// exit ;
55086: POP
55087: POP
55088: GO 55094
// end ; end ;
55090: GO 55041
55092: POP
55093: POP
// end ;
55094: LD_VAR 0 3
55098: RET
// export function GetCargoBay ( units ) ; begin
55099: LD_INT 0
55101: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55102: LD_ADDR_VAR 0 2
55106: PUSH
55107: LD_VAR 0 1
55111: PPUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 34
55117: PUSH
55118: LD_INT 12
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 34
55127: PUSH
55128: LD_INT 51
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 34
55137: PUSH
55138: LD_INT 32
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 34
55147: PUSH
55148: LD_INT 89
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: PPUSH
55162: CALL_OW 72
55166: ST_TO_ADDR
// end ;
55167: LD_VAR 0 2
55171: RET
// export function Negate ( value ) ; begin
55172: LD_INT 0
55174: PPUSH
// result := not value ;
55175: LD_ADDR_VAR 0 2
55179: PUSH
55180: LD_VAR 0 1
55184: NOT
55185: ST_TO_ADDR
// end ;
55186: LD_VAR 0 2
55190: RET
// export function Inc ( value ) ; begin
55191: LD_INT 0
55193: PPUSH
// result := value + 1 ;
55194: LD_ADDR_VAR 0 2
55198: PUSH
55199: LD_VAR 0 1
55203: PUSH
55204: LD_INT 1
55206: PLUS
55207: ST_TO_ADDR
// end ;
55208: LD_VAR 0 2
55212: RET
// export function Dec ( value ) ; begin
55213: LD_INT 0
55215: PPUSH
// result := value - 1 ;
55216: LD_ADDR_VAR 0 2
55220: PUSH
55221: LD_VAR 0 1
55225: PUSH
55226: LD_INT 1
55228: MINUS
55229: ST_TO_ADDR
// end ;
55230: LD_VAR 0 2
55234: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55235: LD_INT 0
55237: PPUSH
55238: PPUSH
55239: PPUSH
55240: PPUSH
55241: PPUSH
55242: PPUSH
55243: PPUSH
55244: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55245: LD_VAR 0 1
55249: PPUSH
55250: LD_VAR 0 2
55254: PPUSH
55255: CALL_OW 488
55259: NOT
55260: IFTRUE 55279
55262: PUSH
55263: LD_VAR 0 3
55267: PPUSH
55268: LD_VAR 0 4
55272: PPUSH
55273: CALL_OW 488
55277: NOT
55278: OR
55279: IFFALSE 55292
// begin result := - 1 ;
55281: LD_ADDR_VAR 0 5
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: ST_TO_ADDR
// exit ;
55290: GO 55527
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55292: LD_ADDR_VAR 0 12
55296: PUSH
55297: LD_VAR 0 1
55301: PPUSH
55302: LD_VAR 0 2
55306: PPUSH
55307: LD_VAR 0 3
55311: PPUSH
55312: LD_VAR 0 4
55316: PPUSH
55317: CALL 54363 0 4
55321: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55322: LD_ADDR_VAR 0 11
55326: PUSH
55327: LD_VAR 0 1
55331: PPUSH
55332: LD_VAR 0 2
55336: PPUSH
55337: LD_VAR 0 12
55341: PUSH
55342: LD_INT 1
55344: ARRAY
55345: PPUSH
55346: LD_VAR 0 12
55350: PUSH
55351: LD_INT 2
55353: ARRAY
55354: PPUSH
55355: CALL_OW 298
55359: ST_TO_ADDR
// distance := 9999 ;
55360: LD_ADDR_VAR 0 10
55364: PUSH
55365: LD_INT 9999
55367: ST_TO_ADDR
// for i := 0 to 5 do
55368: LD_ADDR_VAR 0 6
55372: PUSH
55373: DOUBLE
55374: LD_INT 0
55376: DEC
55377: ST_TO_ADDR
55378: LD_INT 5
55380: PUSH
55381: FOR_TO
55382: IFFALSE 55525
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55384: LD_ADDR_VAR 0 7
55388: PUSH
55389: LD_VAR 0 1
55393: PPUSH
55394: LD_VAR 0 6
55398: PPUSH
55399: LD_VAR 0 11
55403: PPUSH
55404: CALL_OW 272
55408: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55409: LD_ADDR_VAR 0 8
55413: PUSH
55414: LD_VAR 0 2
55418: PPUSH
55419: LD_VAR 0 6
55423: PPUSH
55424: LD_VAR 0 11
55428: PPUSH
55429: CALL_OW 273
55433: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55434: LD_VAR 0 7
55438: PPUSH
55439: LD_VAR 0 8
55443: PPUSH
55444: CALL_OW 488
55448: NOT
55449: IFFALSE 55453
// continue ;
55451: GO 55381
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55453: LD_ADDR_VAR 0 9
55457: PUSH
55458: LD_VAR 0 12
55462: PUSH
55463: LD_INT 1
55465: ARRAY
55466: PPUSH
55467: LD_VAR 0 12
55471: PUSH
55472: LD_INT 2
55474: ARRAY
55475: PPUSH
55476: LD_VAR 0 7
55480: PPUSH
55481: LD_VAR 0 8
55485: PPUSH
55486: CALL_OW 298
55490: ST_TO_ADDR
// if tmp < distance then
55491: LD_VAR 0 9
55495: PUSH
55496: LD_VAR 0 10
55500: LESS
55501: IFFALSE 55523
// begin result := i ;
55503: LD_ADDR_VAR 0 5
55507: PUSH
55508: LD_VAR 0 6
55512: ST_TO_ADDR
// distance := tmp ;
55513: LD_ADDR_VAR 0 10
55517: PUSH
55518: LD_VAR 0 9
55522: ST_TO_ADDR
// end ; end ;
55523: GO 55381
55525: POP
55526: POP
// end ;
55527: LD_VAR 0 5
55531: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55532: LD_INT 0
55534: PPUSH
55535: PPUSH
// if not driver or not IsInUnit ( driver ) then
55536: LD_VAR 0 1
55540: NOT
55541: IFTRUE 55555
55543: PUSH
55544: LD_VAR 0 1
55548: PPUSH
55549: CALL_OW 310
55553: NOT
55554: OR
55555: IFFALSE 55559
// exit ;
55557: GO 55649
// vehicle := IsInUnit ( driver ) ;
55559: LD_ADDR_VAR 0 3
55563: PUSH
55564: LD_VAR 0 1
55568: PPUSH
55569: CALL_OW 310
55573: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55574: LD_VAR 0 1
55578: PPUSH
55579: LD_STRING \
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: PUSH
55609: LD_STRING E
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_VAR 0 3
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PPUSH
55645: CALL_OW 446
// end ;
55649: LD_VAR 0 2
55653: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55654: LD_INT 0
55656: PPUSH
55657: PPUSH
// if not driver or not IsInUnit ( driver ) then
55658: LD_VAR 0 1
55662: NOT
55663: IFTRUE 55677
55665: PUSH
55666: LD_VAR 0 1
55670: PPUSH
55671: CALL_OW 310
55675: NOT
55676: OR
55677: IFFALSE 55681
// exit ;
55679: GO 55771
// vehicle := IsInUnit ( driver ) ;
55681: LD_ADDR_VAR 0 3
55685: PUSH
55686: LD_VAR 0 1
55690: PPUSH
55691: CALL_OW 310
55695: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55696: LD_VAR 0 1
55700: PPUSH
55701: LD_STRING \
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: PUSH
55731: LD_STRING E
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_VAR 0 3
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PPUSH
55767: CALL_OW 447
// end ;
55771: LD_VAR 0 2
55775: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55776: LD_INT 0
55778: PPUSH
55779: PPUSH
55780: PPUSH
// tmp := [ ] ;
55781: LD_ADDR_VAR 0 5
55785: PUSH
55786: EMPTY
55787: ST_TO_ADDR
// for i in units do
55788: LD_ADDR_VAR 0 4
55792: PUSH
55793: LD_VAR 0 1
55797: PUSH
55798: FOR_IN
55799: IFFALSE 55837
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55801: LD_ADDR_VAR 0 5
55805: PUSH
55806: LD_VAR 0 5
55810: PPUSH
55811: LD_VAR 0 5
55815: PUSH
55816: LD_INT 1
55818: PLUS
55819: PPUSH
55820: LD_VAR 0 4
55824: PPUSH
55825: CALL_OW 256
55829: PPUSH
55830: CALL_OW 2
55834: ST_TO_ADDR
55835: GO 55798
55837: POP
55838: POP
// if not tmp then
55839: LD_VAR 0 5
55843: NOT
55844: IFFALSE 55848
// exit ;
55846: GO 55896
// if asc then
55848: LD_VAR 0 2
55852: IFFALSE 55876
// result := SortListByListAsc ( units , tmp ) else
55854: LD_ADDR_VAR 0 3
55858: PUSH
55859: LD_VAR 0 1
55863: PPUSH
55864: LD_VAR 0 5
55868: PPUSH
55869: CALL_OW 76
55873: ST_TO_ADDR
55874: GO 55896
// result := SortListByListDesc ( units , tmp ) ;
55876: LD_ADDR_VAR 0 3
55880: PUSH
55881: LD_VAR 0 1
55885: PPUSH
55886: LD_VAR 0 5
55890: PPUSH
55891: CALL_OW 77
55895: ST_TO_ADDR
// end ;
55896: LD_VAR 0 3
55900: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55901: LD_INT 0
55903: PPUSH
55904: PPUSH
// task := GetTaskList ( mech ) ;
55905: LD_ADDR_VAR 0 4
55909: PUSH
55910: LD_VAR 0 1
55914: PPUSH
55915: CALL_OW 437
55919: ST_TO_ADDR
// if not task then
55920: LD_VAR 0 4
55924: NOT
55925: IFFALSE 55929
// exit ;
55927: GO 55973
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55929: LD_ADDR_VAR 0 3
55933: PUSH
55934: LD_VAR 0 4
55938: PUSH
55939: LD_INT 1
55941: ARRAY
55942: PUSH
55943: LD_INT 1
55945: ARRAY
55946: PUSH
55947: LD_STRING r
55949: EQUAL
55950: IFFALSE 55972
55952: PUSH
55953: LD_VAR 0 4
55957: PUSH
55958: LD_INT 1
55960: ARRAY
55961: PUSH
55962: LD_INT 4
55964: ARRAY
55965: PUSH
55966: LD_VAR 0 2
55970: EQUAL
55971: AND
55972: ST_TO_ADDR
// end ;
55973: LD_VAR 0 3
55977: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55978: LD_INT 0
55980: PPUSH
// SetDir ( unit , d ) ;
55981: LD_VAR 0 1
55985: PPUSH
55986: LD_VAR 0 4
55990: PPUSH
55991: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
55995: LD_ADDR_VAR 0 6
55999: PUSH
56000: LD_VAR 0 1
56004: PPUSH
56005: LD_VAR 0 2
56009: PPUSH
56010: LD_VAR 0 3
56014: PPUSH
56015: LD_VAR 0 5
56019: PPUSH
56020: CALL_OW 48
56024: ST_TO_ADDR
// end ;
56025: LD_VAR 0 6
56029: RET
// export function ToNaturalNumber ( number ) ; begin
56030: LD_INT 0
56032: PPUSH
// result := number div 1 ;
56033: LD_ADDR_VAR 0 2
56037: PUSH
56038: LD_VAR 0 1
56042: PUSH
56043: LD_INT 1
56045: DIV
56046: ST_TO_ADDR
// if number < 0 then
56047: LD_VAR 0 1
56051: PUSH
56052: LD_INT 0
56054: LESS
56055: IFFALSE 56065
// result := 0 ;
56057: LD_ADDR_VAR 0 2
56061: PUSH
56062: LD_INT 0
56064: ST_TO_ADDR
// end ;
56065: LD_VAR 0 2
56069: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56070: LD_INT 0
56072: PPUSH
56073: PPUSH
56074: PPUSH
// if not buildings then
56075: LD_VAR 0 1
56079: NOT
56080: IFFALSE 56084
// exit ;
56082: GO 56199
// tmp := [ ] ;
56084: LD_ADDR_VAR 0 5
56088: PUSH
56089: EMPTY
56090: ST_TO_ADDR
// for b in buildings do
56091: LD_ADDR_VAR 0 4
56095: PUSH
56096: LD_VAR 0 1
56100: PUSH
56101: FOR_IN
56102: IFFALSE 56140
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56104: LD_ADDR_VAR 0 5
56108: PUSH
56109: LD_VAR 0 5
56113: PPUSH
56114: LD_VAR 0 5
56118: PUSH
56119: LD_INT 1
56121: PLUS
56122: PPUSH
56123: LD_VAR 0 4
56127: PPUSH
56128: CALL_OW 266
56132: PPUSH
56133: CALL_OW 1
56137: ST_TO_ADDR
56138: GO 56101
56140: POP
56141: POP
// if not tmp then
56142: LD_VAR 0 5
56146: NOT
56147: IFFALSE 56151
// exit ;
56149: GO 56199
// if asc then
56151: LD_VAR 0 2
56155: IFFALSE 56179
// result := SortListByListAsc ( buildings , tmp ) else
56157: LD_ADDR_VAR 0 3
56161: PUSH
56162: LD_VAR 0 1
56166: PPUSH
56167: LD_VAR 0 5
56171: PPUSH
56172: CALL_OW 76
56176: ST_TO_ADDR
56177: GO 56199
// result := SortListByListDesc ( buildings , tmp ) ;
56179: LD_ADDR_VAR 0 3
56183: PUSH
56184: LD_VAR 0 1
56188: PPUSH
56189: LD_VAR 0 5
56193: PPUSH
56194: CALL_OW 77
56198: ST_TO_ADDR
// end ;
56199: LD_VAR 0 3
56203: RET
// export function SortByClass ( units , class ) ; var un ; begin
56204: LD_INT 0
56206: PPUSH
56207: PPUSH
// if not units or not class then
56208: LD_VAR 0 1
56212: NOT
56213: IFTRUE 56222
56215: PUSH
56216: LD_VAR 0 2
56220: NOT
56221: OR
56222: IFFALSE 56226
// exit ;
56224: GO 56321
// result := [ ] ;
56226: LD_ADDR_VAR 0 3
56230: PUSH
56231: EMPTY
56232: ST_TO_ADDR
// for un in units do
56233: LD_ADDR_VAR 0 4
56237: PUSH
56238: LD_VAR 0 1
56242: PUSH
56243: FOR_IN
56244: IFFALSE 56319
// if GetClass ( un ) = class then
56246: LD_VAR 0 4
56250: PPUSH
56251: CALL_OW 257
56255: PUSH
56256: LD_VAR 0 2
56260: EQUAL
56261: IFFALSE 56288
// result := Insert ( result , 1 , un ) else
56263: LD_ADDR_VAR 0 3
56267: PUSH
56268: LD_VAR 0 3
56272: PPUSH
56273: LD_INT 1
56275: PPUSH
56276: LD_VAR 0 4
56280: PPUSH
56281: CALL_OW 2
56285: ST_TO_ADDR
56286: GO 56317
// result := Replace ( result , result + 1 , un ) ;
56288: LD_ADDR_VAR 0 3
56292: PUSH
56293: LD_VAR 0 3
56297: PPUSH
56298: LD_VAR 0 3
56302: PUSH
56303: LD_INT 1
56305: PLUS
56306: PPUSH
56307: LD_VAR 0 4
56311: PPUSH
56312: CALL_OW 1
56316: ST_TO_ADDR
56317: GO 56243
56319: POP
56320: POP
// end ;
56321: LD_VAR 0 3
56325: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56326: LD_INT 0
56328: PPUSH
56329: PPUSH
56330: PPUSH
56331: PPUSH
56332: PPUSH
56333: PPUSH
56334: PPUSH
// result := [ ] ;
56335: LD_ADDR_VAR 0 4
56339: PUSH
56340: EMPTY
56341: ST_TO_ADDR
// if x - r < 0 then
56342: LD_VAR 0 1
56346: PUSH
56347: LD_VAR 0 3
56351: MINUS
56352: PUSH
56353: LD_INT 0
56355: LESS
56356: IFFALSE 56368
// min_x := 0 else
56358: LD_ADDR_VAR 0 8
56362: PUSH
56363: LD_INT 0
56365: ST_TO_ADDR
56366: GO 56384
// min_x := x - r ;
56368: LD_ADDR_VAR 0 8
56372: PUSH
56373: LD_VAR 0 1
56377: PUSH
56378: LD_VAR 0 3
56382: MINUS
56383: ST_TO_ADDR
// if y - r < 0 then
56384: LD_VAR 0 2
56388: PUSH
56389: LD_VAR 0 3
56393: MINUS
56394: PUSH
56395: LD_INT 0
56397: LESS
56398: IFFALSE 56410
// min_y := 0 else
56400: LD_ADDR_VAR 0 7
56404: PUSH
56405: LD_INT 0
56407: ST_TO_ADDR
56408: GO 56426
// min_y := y - r ;
56410: LD_ADDR_VAR 0 7
56414: PUSH
56415: LD_VAR 0 2
56419: PUSH
56420: LD_VAR 0 3
56424: MINUS
56425: ST_TO_ADDR
// max_x := x + r ;
56426: LD_ADDR_VAR 0 9
56430: PUSH
56431: LD_VAR 0 1
56435: PUSH
56436: LD_VAR 0 3
56440: PLUS
56441: ST_TO_ADDR
// max_y := y + r ;
56442: LD_ADDR_VAR 0 10
56446: PUSH
56447: LD_VAR 0 2
56451: PUSH
56452: LD_VAR 0 3
56456: PLUS
56457: ST_TO_ADDR
// for _x = min_x to max_x do
56458: LD_ADDR_VAR 0 5
56462: PUSH
56463: DOUBLE
56464: LD_VAR 0 8
56468: DEC
56469: ST_TO_ADDR
56470: LD_VAR 0 9
56474: PUSH
56475: FOR_TO
56476: IFFALSE 56577
// for _y = min_y to max_y do
56478: LD_ADDR_VAR 0 6
56482: PUSH
56483: DOUBLE
56484: LD_VAR 0 7
56488: DEC
56489: ST_TO_ADDR
56490: LD_VAR 0 10
56494: PUSH
56495: FOR_TO
56496: IFFALSE 56573
// begin if not ValidHex ( _x , _y ) then
56498: LD_VAR 0 5
56502: PPUSH
56503: LD_VAR 0 6
56507: PPUSH
56508: CALL_OW 488
56512: NOT
56513: IFFALSE 56517
// continue ;
56515: GO 56495
// if GetResourceTypeXY ( _x , _y ) then
56517: LD_VAR 0 5
56521: PPUSH
56522: LD_VAR 0 6
56526: PPUSH
56527: CALL_OW 283
56531: IFFALSE 56571
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56533: LD_ADDR_VAR 0 4
56537: PUSH
56538: LD_VAR 0 4
56542: PPUSH
56543: LD_VAR 0 4
56547: PUSH
56548: LD_INT 1
56550: PLUS
56551: PPUSH
56552: LD_VAR 0 5
56556: PUSH
56557: LD_VAR 0 6
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PPUSH
56566: CALL_OW 1
56570: ST_TO_ADDR
// end ;
56571: GO 56495
56573: POP
56574: POP
56575: GO 56475
56577: POP
56578: POP
// end ;
56579: LD_VAR 0 4
56583: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56584: LD_INT 0
56586: PPUSH
56587: PPUSH
56588: PPUSH
56589: PPUSH
56590: PPUSH
56591: PPUSH
56592: PPUSH
56593: PPUSH
// if not units then
56594: LD_VAR 0 1
56598: NOT
56599: IFFALSE 56603
// exit ;
56601: GO 57135
// result := UnitFilter ( units , [ f_ok ] ) ;
56603: LD_ADDR_VAR 0 3
56607: PUSH
56608: LD_VAR 0 1
56612: PPUSH
56613: LD_INT 50
56615: PUSH
56616: EMPTY
56617: LIST
56618: PPUSH
56619: CALL_OW 72
56623: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56624: LD_ADDR_VAR 0 8
56628: PUSH
56629: LD_VAR 0 1
56633: PUSH
56634: LD_INT 1
56636: ARRAY
56637: PPUSH
56638: CALL_OW 255
56642: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56643: LD_ADDR_VAR 0 10
56647: PUSH
56648: LD_INT 29
56650: PUSH
56651: LD_INT 91
56653: PUSH
56654: LD_INT 49
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: LIST
56661: ST_TO_ADDR
// if not result then
56662: LD_VAR 0 3
56666: NOT
56667: IFFALSE 56671
// exit ;
56669: GO 57135
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56671: LD_ADDR_VAR 0 5
56675: PUSH
56676: LD_INT 81
56678: PUSH
56679: LD_VAR 0 8
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PPUSH
56688: CALL_OW 69
56692: ST_TO_ADDR
// for i in result do
56693: LD_ADDR_VAR 0 4
56697: PUSH
56698: LD_VAR 0 3
56702: PUSH
56703: FOR_IN
56704: IFFALSE 57133
// begin tag := GetTag ( i ) + 1 ;
56706: LD_ADDR_VAR 0 9
56710: PUSH
56711: LD_VAR 0 4
56715: PPUSH
56716: CALL_OW 110
56720: PUSH
56721: LD_INT 1
56723: PLUS
56724: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56725: LD_ADDR_VAR 0 7
56729: PUSH
56730: LD_VAR 0 4
56734: PPUSH
56735: CALL_OW 250
56739: PPUSH
56740: LD_VAR 0 4
56744: PPUSH
56745: CALL_OW 251
56749: PPUSH
56750: LD_INT 4
56752: PPUSH
56753: CALL 56326 0 3
56757: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56758: LD_VAR 0 4
56762: PPUSH
56763: CALL_OW 247
56767: PUSH
56768: LD_INT 2
56770: EQUAL
56771: IFFALSE 56783
56773: PUSH
56774: LD_VAR 0 7
56778: PUSH
56779: LD_INT 2
56781: GREATER
56782: AND
56783: IFFALSE 56803
56785: PUSH
56786: LD_VAR 0 4
56790: PPUSH
56791: CALL_OW 264
56795: PUSH
56796: LD_VAR 0 10
56800: IN
56801: NOT
56802: AND
56803: IFFALSE 56842
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56805: LD_VAR 0 4
56809: PPUSH
56810: LD_VAR 0 7
56814: PUSH
56815: LD_INT 1
56817: ARRAY
56818: PUSH
56819: LD_INT 1
56821: ARRAY
56822: PPUSH
56823: LD_VAR 0 7
56827: PUSH
56828: LD_INT 1
56830: ARRAY
56831: PUSH
56832: LD_INT 2
56834: ARRAY
56835: PPUSH
56836: CALL_OW 116
56840: GO 57131
// if path > tag then
56842: LD_VAR 0 2
56846: PUSH
56847: LD_VAR 0 9
56851: GREATER
56852: IFFALSE 57060
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56854: LD_ADDR_VAR 0 6
56858: PUSH
56859: LD_VAR 0 5
56863: PPUSH
56864: LD_INT 91
56866: PUSH
56867: LD_VAR 0 4
56871: PUSH
56872: LD_INT 8
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: LIST
56879: PPUSH
56880: CALL_OW 72
56884: ST_TO_ADDR
// if nearEnemy then
56885: LD_VAR 0 6
56889: IFFALSE 56958
// begin if GetWeapon ( i ) = ru_time_lapser then
56891: LD_VAR 0 4
56895: PPUSH
56896: CALL_OW 264
56900: PUSH
56901: LD_INT 49
56903: EQUAL
56904: IFFALSE 56932
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56906: LD_VAR 0 4
56910: PPUSH
56911: LD_VAR 0 6
56915: PPUSH
56916: LD_VAR 0 4
56920: PPUSH
56921: CALL_OW 74
56925: PPUSH
56926: CALL_OW 112
56930: GO 56956
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56932: LD_VAR 0 4
56936: PPUSH
56937: LD_VAR 0 6
56941: PPUSH
56942: LD_VAR 0 4
56946: PPUSH
56947: CALL_OW 74
56951: PPUSH
56952: CALL 58216 0 2
// end else
56956: GO 57058
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56958: LD_VAR 0 4
56962: PPUSH
56963: LD_VAR 0 2
56967: PUSH
56968: LD_VAR 0 9
56972: ARRAY
56973: PUSH
56974: LD_INT 1
56976: ARRAY
56977: PPUSH
56978: LD_VAR 0 2
56982: PUSH
56983: LD_VAR 0 9
56987: ARRAY
56988: PUSH
56989: LD_INT 2
56991: ARRAY
56992: PPUSH
56993: CALL_OW 297
56997: PUSH
56998: LD_INT 6
57000: GREATER
57001: IFFALSE 57044
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57003: LD_VAR 0 4
57007: PPUSH
57008: LD_VAR 0 2
57012: PUSH
57013: LD_VAR 0 9
57017: ARRAY
57018: PUSH
57019: LD_INT 1
57021: ARRAY
57022: PPUSH
57023: LD_VAR 0 2
57027: PUSH
57028: LD_VAR 0 9
57032: ARRAY
57033: PUSH
57034: LD_INT 2
57036: ARRAY
57037: PPUSH
57038: CALL_OW 114
57042: GO 57058
// SetTag ( i , tag ) ;
57044: LD_VAR 0 4
57048: PPUSH
57049: LD_VAR 0 9
57053: PPUSH
57054: CALL_OW 109
// end else
57058: GO 57131
// if enemy then
57060: LD_VAR 0 5
57064: IFFALSE 57131
// begin if GetWeapon ( i ) = ru_time_lapser then
57066: LD_VAR 0 4
57070: PPUSH
57071: CALL_OW 264
57075: PUSH
57076: LD_INT 49
57078: EQUAL
57079: IFFALSE 57107
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57081: LD_VAR 0 4
57085: PPUSH
57086: LD_VAR 0 5
57090: PPUSH
57091: LD_VAR 0 4
57095: PPUSH
57096: CALL_OW 74
57100: PPUSH
57101: CALL_OW 112
57105: GO 57131
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57107: LD_VAR 0 4
57111: PPUSH
57112: LD_VAR 0 5
57116: PPUSH
57117: LD_VAR 0 4
57121: PPUSH
57122: CALL_OW 74
57126: PPUSH
57127: CALL 58216 0 2
// end ; end ;
57131: GO 56703
57133: POP
57134: POP
// end ;
57135: LD_VAR 0 3
57139: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57140: LD_INT 0
57142: PPUSH
57143: PPUSH
57144: PPUSH
// if not unit or IsInUnit ( unit ) then
57145: LD_VAR 0 1
57149: NOT
57150: IFTRUE 57163
57152: PUSH
57153: LD_VAR 0 1
57157: PPUSH
57158: CALL_OW 310
57162: OR
57163: IFFALSE 57167
// exit ;
57165: GO 57258
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57167: LD_ADDR_VAR 0 4
57171: PUSH
57172: LD_VAR 0 1
57176: PPUSH
57177: CALL_OW 250
57181: PPUSH
57182: LD_VAR 0 2
57186: PPUSH
57187: LD_INT 1
57189: PPUSH
57190: CALL_OW 272
57194: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57195: LD_ADDR_VAR 0 5
57199: PUSH
57200: LD_VAR 0 1
57204: PPUSH
57205: CALL_OW 251
57209: PPUSH
57210: LD_VAR 0 2
57214: PPUSH
57215: LD_INT 1
57217: PPUSH
57218: CALL_OW 273
57222: ST_TO_ADDR
// if ValidHex ( x , y ) then
57223: LD_VAR 0 4
57227: PPUSH
57228: LD_VAR 0 5
57232: PPUSH
57233: CALL_OW 488
57237: IFFALSE 57258
// ComTurnXY ( unit , x , y ) ;
57239: LD_VAR 0 1
57243: PPUSH
57244: LD_VAR 0 4
57248: PPUSH
57249: LD_VAR 0 5
57253: PPUSH
57254: CALL_OW 118
// end ;
57258: LD_VAR 0 3
57262: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57263: LD_INT 0
57265: PPUSH
57266: PPUSH
// result := false ;
57267: LD_ADDR_VAR 0 3
57271: PUSH
57272: LD_INT 0
57274: ST_TO_ADDR
// if not units then
57275: LD_VAR 0 2
57279: NOT
57280: IFFALSE 57284
// exit ;
57282: GO 57329
// for i in units do
57284: LD_ADDR_VAR 0 4
57288: PUSH
57289: LD_VAR 0 2
57293: PUSH
57294: FOR_IN
57295: IFFALSE 57327
// if See ( side , i ) then
57297: LD_VAR 0 1
57301: PPUSH
57302: LD_VAR 0 4
57306: PPUSH
57307: CALL_OW 292
57311: IFFALSE 57325
// begin result := true ;
57313: LD_ADDR_VAR 0 3
57317: PUSH
57318: LD_INT 1
57320: ST_TO_ADDR
// exit ;
57321: POP
57322: POP
57323: GO 57329
// end ;
57325: GO 57294
57327: POP
57328: POP
// end ;
57329: LD_VAR 0 3
57333: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57334: LD_INT 0
57336: PPUSH
57337: PPUSH
57338: PPUSH
57339: PPUSH
// if not unit or not points then
57340: LD_VAR 0 1
57344: NOT
57345: IFTRUE 57354
57347: PUSH
57348: LD_VAR 0 2
57352: NOT
57353: OR
57354: IFFALSE 57358
// exit ;
57356: GO 57448
// dist := 99999 ;
57358: LD_ADDR_VAR 0 5
57362: PUSH
57363: LD_INT 99999
57365: ST_TO_ADDR
// for i in points do
57366: LD_ADDR_VAR 0 4
57370: PUSH
57371: LD_VAR 0 2
57375: PUSH
57376: FOR_IN
57377: IFFALSE 57446
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57379: LD_ADDR_VAR 0 6
57383: PUSH
57384: LD_VAR 0 1
57388: PPUSH
57389: LD_VAR 0 4
57393: PUSH
57394: LD_INT 1
57396: ARRAY
57397: PPUSH
57398: LD_VAR 0 4
57402: PUSH
57403: LD_INT 2
57405: ARRAY
57406: PPUSH
57407: CALL_OW 297
57411: ST_TO_ADDR
// if tmpDist < dist then
57412: LD_VAR 0 6
57416: PUSH
57417: LD_VAR 0 5
57421: LESS
57422: IFFALSE 57444
// begin result := i ;
57424: LD_ADDR_VAR 0 3
57428: PUSH
57429: LD_VAR 0 4
57433: ST_TO_ADDR
// dist := tmpDist ;
57434: LD_ADDR_VAR 0 5
57438: PUSH
57439: LD_VAR 0 6
57443: ST_TO_ADDR
// end ; end ;
57444: GO 57376
57446: POP
57447: POP
// end ;
57448: LD_VAR 0 3
57452: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57453: LD_INT 0
57455: PPUSH
// uc_side := side ;
57456: LD_ADDR_OWVAR 20
57460: PUSH
57461: LD_VAR 0 1
57465: ST_TO_ADDR
// uc_nation := 3 ;
57466: LD_ADDR_OWVAR 21
57470: PUSH
57471: LD_INT 3
57473: ST_TO_ADDR
// vc_chassis := 25 ;
57474: LD_ADDR_OWVAR 37
57478: PUSH
57479: LD_INT 25
57481: ST_TO_ADDR
// vc_engine := engine_siberite ;
57482: LD_ADDR_OWVAR 39
57486: PUSH
57487: LD_INT 3
57489: ST_TO_ADDR
// vc_control := control_computer ;
57490: LD_ADDR_OWVAR 38
57494: PUSH
57495: LD_INT 3
57497: ST_TO_ADDR
// vc_weapon := 59 ;
57498: LD_ADDR_OWVAR 40
57502: PUSH
57503: LD_INT 59
57505: ST_TO_ADDR
// result := CreateVehicle ;
57506: LD_ADDR_VAR 0 5
57510: PUSH
57511: CALL_OW 45
57515: ST_TO_ADDR
// SetDir ( result , d ) ;
57516: LD_VAR 0 5
57520: PPUSH
57521: LD_VAR 0 4
57525: PPUSH
57526: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57530: LD_VAR 0 5
57534: PPUSH
57535: LD_VAR 0 2
57539: PPUSH
57540: LD_VAR 0 3
57544: PPUSH
57545: LD_INT 0
57547: PPUSH
57548: CALL_OW 48
// end ;
57552: LD_VAR 0 5
57556: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57557: LD_INT 0
57559: PPUSH
57560: PPUSH
57561: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57562: LD_ADDR_VAR 0 2
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57585: LD_VAR 0 1
57589: NOT
57590: IFTRUE 57623
57592: PUSH
57593: LD_VAR 0 1
57597: PPUSH
57598: CALL_OW 264
57602: PUSH
57603: LD_INT 12
57605: PUSH
57606: LD_INT 51
57608: PUSH
57609: LD_INT 32
57611: PUSH
57612: LD_INT 89
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: IN
57621: NOT
57622: OR
57623: IFFALSE 57627
// exit ;
57625: GO 57725
// for i := 1 to 3 do
57627: LD_ADDR_VAR 0 3
57631: PUSH
57632: DOUBLE
57633: LD_INT 1
57635: DEC
57636: ST_TO_ADDR
57637: LD_INT 3
57639: PUSH
57640: FOR_TO
57641: IFFALSE 57723
// begin tmp := GetCargo ( cargo , i ) ;
57643: LD_ADDR_VAR 0 4
57647: PUSH
57648: LD_VAR 0 1
57652: PPUSH
57653: LD_VAR 0 3
57657: PPUSH
57658: CALL_OW 289
57662: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57663: LD_ADDR_VAR 0 2
57667: PUSH
57668: LD_VAR 0 2
57672: PPUSH
57673: LD_VAR 0 3
57677: PPUSH
57678: LD_VAR 0 4
57682: PPUSH
57683: CALL_OW 1
57687: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57688: LD_ADDR_VAR 0 2
57692: PUSH
57693: LD_VAR 0 2
57697: PPUSH
57698: LD_INT 4
57700: PPUSH
57701: LD_VAR 0 2
57705: PUSH
57706: LD_INT 4
57708: ARRAY
57709: PUSH
57710: LD_VAR 0 4
57714: PLUS
57715: PPUSH
57716: CALL_OW 1
57720: ST_TO_ADDR
// end ;
57721: GO 57640
57723: POP
57724: POP
// end ;
57725: LD_VAR 0 2
57729: RET
// export function Length ( array ) ; begin
57730: LD_INT 0
57732: PPUSH
// result := array + 0 ;
57733: LD_ADDR_VAR 0 2
57737: PUSH
57738: LD_VAR 0 1
57742: PUSH
57743: LD_INT 0
57745: PLUS
57746: ST_TO_ADDR
// end ;
57747: LD_VAR 0 2
57751: RET
// export function PrepareArray ( array ) ; begin
57752: LD_INT 0
57754: PPUSH
// result := array diff 0 ;
57755: LD_ADDR_VAR 0 2
57759: PUSH
57760: LD_VAR 0 1
57764: PUSH
57765: LD_INT 0
57767: DIFF
57768: ST_TO_ADDR
// if not result [ 1 ] then
57769: LD_VAR 0 2
57773: PUSH
57774: LD_INT 1
57776: ARRAY
57777: NOT
57778: IFFALSE 57798
// result := Delete ( result , 1 ) ;
57780: LD_ADDR_VAR 0 2
57784: PUSH
57785: LD_VAR 0 2
57789: PPUSH
57790: LD_INT 1
57792: PPUSH
57793: CALL_OW 3
57797: ST_TO_ADDR
// end ;
57798: LD_VAR 0 2
57802: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57803: LD_INT 0
57805: PPUSH
57806: PPUSH
57807: PPUSH
57808: PPUSH
// sibRocketRange := 25 ;
57809: LD_ADDR_VAR 0 6
57813: PUSH
57814: LD_INT 25
57816: ST_TO_ADDR
// result := false ;
57817: LD_ADDR_VAR 0 4
57821: PUSH
57822: LD_INT 0
57824: ST_TO_ADDR
// for i := 0 to 5 do
57825: LD_ADDR_VAR 0 5
57829: PUSH
57830: DOUBLE
57831: LD_INT 0
57833: DEC
57834: ST_TO_ADDR
57835: LD_INT 5
57837: PUSH
57838: FOR_TO
57839: IFFALSE 57906
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57841: LD_VAR 0 1
57845: PPUSH
57846: LD_VAR 0 5
57850: PPUSH
57851: LD_VAR 0 6
57855: PPUSH
57856: CALL_OW 272
57860: PPUSH
57861: LD_VAR 0 2
57865: PPUSH
57866: LD_VAR 0 5
57870: PPUSH
57871: LD_VAR 0 6
57875: PPUSH
57876: CALL_OW 273
57880: PPUSH
57881: LD_VAR 0 3
57885: PPUSH
57886: CALL_OW 309
57890: IFFALSE 57904
// begin result := true ;
57892: LD_ADDR_VAR 0 4
57896: PUSH
57897: LD_INT 1
57899: ST_TO_ADDR
// exit ;
57900: POP
57901: POP
57902: GO 57908
// end ;
57904: GO 57838
57906: POP
57907: POP
// end ;
57908: LD_VAR 0 4
57912: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57913: LD_INT 0
57915: PPUSH
57916: PPUSH
57917: PPUSH
// if btype = b_depot then
57918: LD_VAR 0 2
57922: PUSH
57923: LD_INT 0
57925: EQUAL
57926: IFFALSE 57938
// begin result := true ;
57928: LD_ADDR_VAR 0 3
57932: PUSH
57933: LD_INT 1
57935: ST_TO_ADDR
// exit ;
57936: GO 58058
// end ; pom := GetBase ( depot ) ;
57938: LD_ADDR_VAR 0 4
57942: PUSH
57943: LD_VAR 0 1
57947: PPUSH
57948: CALL_OW 274
57952: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57953: LD_ADDR_VAR 0 5
57957: PUSH
57958: LD_VAR 0 2
57962: PPUSH
57963: LD_VAR 0 1
57967: PPUSH
57968: CALL_OW 248
57972: PPUSH
57973: CALL_OW 450
57977: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57978: LD_ADDR_VAR 0 3
57982: PUSH
57983: LD_VAR 0 4
57987: PPUSH
57988: LD_INT 1
57990: PPUSH
57991: CALL_OW 275
57995: PUSH
57996: LD_VAR 0 5
58000: PUSH
58001: LD_INT 1
58003: ARRAY
58004: GREATEREQUAL
58005: IFFALSE 58031
58007: PUSH
58008: LD_VAR 0 4
58012: PPUSH
58013: LD_INT 2
58015: PPUSH
58016: CALL_OW 275
58020: PUSH
58021: LD_VAR 0 5
58025: PUSH
58026: LD_INT 2
58028: ARRAY
58029: GREATEREQUAL
58030: AND
58031: IFFALSE 58057
58033: PUSH
58034: LD_VAR 0 4
58038: PPUSH
58039: LD_INT 3
58041: PPUSH
58042: CALL_OW 275
58046: PUSH
58047: LD_VAR 0 5
58051: PUSH
58052: LD_INT 3
58054: ARRAY
58055: GREATEREQUAL
58056: AND
58057: ST_TO_ADDR
// end ;
58058: LD_VAR 0 3
58062: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58063: LD_INT 0
58065: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58066: LD_VAR 0 1
58070: PPUSH
58071: LD_VAR 0 2
58075: PPUSH
58076: LD_INT 0
58078: PPUSH
58079: LD_INT 0
58081: PPUSH
58082: LD_INT 1
58084: PPUSH
58085: LD_INT 0
58087: PPUSH
58088: CALL_OW 587
// end ;
58092: LD_VAR 0 3
58096: RET
// export function CenterOnNow ( unit ) ; begin
58097: LD_INT 0
58099: PPUSH
// result := IsInUnit ( unit ) ;
58100: LD_ADDR_VAR 0 2
58104: PUSH
58105: LD_VAR 0 1
58109: PPUSH
58110: CALL_OW 310
58114: ST_TO_ADDR
// if not result then
58115: LD_VAR 0 2
58119: NOT
58120: IFFALSE 58132
// result := unit ;
58122: LD_ADDR_VAR 0 2
58126: PUSH
58127: LD_VAR 0 1
58131: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58132: LD_VAR 0 1
58136: PPUSH
58137: CALL_OW 87
// end ;
58141: LD_VAR 0 2
58145: RET
// export function ComMoveHex ( unit , hex ) ; begin
58146: LD_INT 0
58148: PPUSH
// if not hex then
58149: LD_VAR 0 2
58153: NOT
58154: IFFALSE 58158
// exit ;
58156: GO 58211
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58158: LD_VAR 0 2
58162: PUSH
58163: LD_INT 1
58165: ARRAY
58166: PPUSH
58167: LD_VAR 0 2
58171: PUSH
58172: LD_INT 2
58174: ARRAY
58175: PPUSH
58176: CALL_OW 428
58180: IFFALSE 58184
// exit ;
58182: GO 58211
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58184: LD_VAR 0 1
58188: PPUSH
58189: LD_VAR 0 2
58193: PUSH
58194: LD_INT 1
58196: ARRAY
58197: PPUSH
58198: LD_VAR 0 2
58202: PUSH
58203: LD_INT 2
58205: ARRAY
58206: PPUSH
58207: CALL_OW 111
// end ;
58211: LD_VAR 0 3
58215: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58216: LD_INT 0
58218: PPUSH
58219: PPUSH
58220: PPUSH
// if not unit or not enemy then
58221: LD_VAR 0 1
58225: NOT
58226: IFTRUE 58235
58228: PUSH
58229: LD_VAR 0 2
58233: NOT
58234: OR
58235: IFFALSE 58239
// exit ;
58237: GO 58365
// x := GetX ( enemy ) ;
58239: LD_ADDR_VAR 0 4
58243: PUSH
58244: LD_VAR 0 2
58248: PPUSH
58249: CALL_OW 250
58253: ST_TO_ADDR
// y := GetY ( enemy ) ;
58254: LD_ADDR_VAR 0 5
58258: PUSH
58259: LD_VAR 0 2
58263: PPUSH
58264: CALL_OW 251
58268: ST_TO_ADDR
// if ValidHex ( x , y ) then
58269: LD_VAR 0 4
58273: PPUSH
58274: LD_VAR 0 5
58278: PPUSH
58279: CALL_OW 488
58283: IFFALSE 58365
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58285: LD_VAR 0 2
58289: PPUSH
58290: CALL_OW 247
58294: PUSH
58295: LD_INT 3
58297: PUSH
58298: LD_INT 2
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: IN
58305: IFTRUE 58328
58307: PUSH
58308: LD_VAR 0 1
58312: PPUSH
58313: CALL_OW 255
58317: PPUSH
58318: LD_VAR 0 2
58322: PPUSH
58323: CALL_OW 292
58327: OR
58328: IFFALSE 58346
// ComAttackUnit ( unit , enemy ) else
58330: LD_VAR 0 1
58334: PPUSH
58335: LD_VAR 0 2
58339: PPUSH
58340: CALL_OW 115
58344: GO 58365
// ComAgressiveMove ( unit , x , y ) ;
58346: LD_VAR 0 1
58350: PPUSH
58351: LD_VAR 0 4
58355: PPUSH
58356: LD_VAR 0 5
58360: PPUSH
58361: CALL_OW 114
// end ;
58365: LD_VAR 0 3
58369: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58370: LD_INT 0
58372: PPUSH
58373: PPUSH
58374: PPUSH
// list := AreaToList ( area , 0 ) ;
58375: LD_ADDR_VAR 0 5
58379: PUSH
58380: LD_VAR 0 1
58384: PPUSH
58385: LD_INT 0
58387: PPUSH
58388: CALL_OW 517
58392: ST_TO_ADDR
// if not list then
58393: LD_VAR 0 5
58397: NOT
58398: IFFALSE 58402
// exit ;
58400: GO 58532
// if all then
58402: LD_VAR 0 2
58406: IFFALSE 58494
// begin for i := 1 to list [ 1 ] do
58408: LD_ADDR_VAR 0 4
58412: PUSH
58413: DOUBLE
58414: LD_INT 1
58416: DEC
58417: ST_TO_ADDR
58418: LD_VAR 0 5
58422: PUSH
58423: LD_INT 1
58425: ARRAY
58426: PUSH
58427: FOR_TO
58428: IFFALSE 58490
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58430: LD_ADDR_VAR 0 3
58434: PUSH
58435: LD_VAR 0 3
58439: PPUSH
58440: LD_VAR 0 3
58444: PUSH
58445: LD_INT 1
58447: PLUS
58448: PPUSH
58449: LD_VAR 0 5
58453: PUSH
58454: LD_INT 1
58456: ARRAY
58457: PUSH
58458: LD_VAR 0 4
58462: ARRAY
58463: PUSH
58464: LD_VAR 0 5
58468: PUSH
58469: LD_INT 2
58471: ARRAY
58472: PUSH
58473: LD_VAR 0 4
58477: ARRAY
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PPUSH
58483: CALL_OW 1
58487: ST_TO_ADDR
58488: GO 58427
58490: POP
58491: POP
// exit ;
58492: GO 58532
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58494: LD_ADDR_VAR 0 3
58498: PUSH
58499: LD_VAR 0 5
58503: PUSH
58504: LD_INT 1
58506: ARRAY
58507: PUSH
58508: LD_INT 1
58510: ARRAY
58511: PUSH
58512: LD_VAR 0 5
58516: PUSH
58517: LD_INT 2
58519: ARRAY
58520: PUSH
58521: LD_INT 1
58523: ARRAY
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: EMPTY
58530: LIST
58531: ST_TO_ADDR
// end ;
58532: LD_VAR 0 3
58536: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58537: LD_INT 0
58539: PPUSH
58540: PPUSH
// list := AreaToList ( area , 0 ) ;
58541: LD_ADDR_VAR 0 4
58545: PUSH
58546: LD_VAR 0 1
58550: PPUSH
58551: LD_INT 0
58553: PPUSH
58554: CALL_OW 517
58558: ST_TO_ADDR
// if not list then
58559: LD_VAR 0 4
58563: NOT
58564: IFFALSE 58568
// exit ;
58566: GO 58609
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58568: LD_ADDR_VAR 0 3
58572: PUSH
58573: LD_VAR 0 4
58577: PUSH
58578: LD_INT 1
58580: ARRAY
58581: PUSH
58582: LD_INT 1
58584: ARRAY
58585: PUSH
58586: LD_VAR 0 4
58590: PUSH
58591: LD_INT 2
58593: ARRAY
58594: PUSH
58595: LD_INT 1
58597: ARRAY
58598: PUSH
58599: LD_VAR 0 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: LIST
58608: ST_TO_ADDR
// end ;
58609: LD_VAR 0 3
58613: RET
// export function First ( array ) ; begin
58614: LD_INT 0
58616: PPUSH
// if not array then
58617: LD_VAR 0 1
58621: NOT
58622: IFFALSE 58626
// exit ;
58624: GO 58640
// result := array [ 1 ] ;
58626: LD_ADDR_VAR 0 2
58630: PUSH
58631: LD_VAR 0 1
58635: PUSH
58636: LD_INT 1
58638: ARRAY
58639: ST_TO_ADDR
// end ;
58640: LD_VAR 0 2
58644: RET
// export function Last ( array ) ; begin
58645: LD_INT 0
58647: PPUSH
// if not array then
58648: LD_VAR 0 1
58652: NOT
58653: IFFALSE 58657
// exit ;
58655: GO 58673
// result := array [ array ] ;
58657: LD_ADDR_VAR 0 2
58661: PUSH
58662: LD_VAR 0 1
58666: PUSH
58667: LD_VAR 0 1
58671: ARRAY
58672: ST_TO_ADDR
// end ;
58673: LD_VAR 0 2
58677: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58678: LD_INT 0
58680: PPUSH
58681: PPUSH
// result := [ ] ;
58682: LD_ADDR_VAR 0 5
58686: PUSH
58687: EMPTY
58688: ST_TO_ADDR
// if not array then
58689: LD_VAR 0 1
58693: NOT
58694: IFFALSE 58698
// exit ;
58696: GO 58810
// for i := 1 to array do
58698: LD_ADDR_VAR 0 6
58702: PUSH
58703: DOUBLE
58704: LD_INT 1
58706: DEC
58707: ST_TO_ADDR
58708: LD_VAR 0 1
58712: PUSH
58713: FOR_TO
58714: IFFALSE 58808
// if array [ i ] [ index ] = value then
58716: LD_VAR 0 1
58720: PUSH
58721: LD_VAR 0 6
58725: ARRAY
58726: PUSH
58727: LD_VAR 0 2
58731: ARRAY
58732: PUSH
58733: LD_VAR 0 3
58737: EQUAL
58738: IFFALSE 58806
// begin if indexColumn then
58740: LD_VAR 0 4
58744: IFFALSE 58780
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58746: LD_ADDR_VAR 0 5
58750: PUSH
58751: LD_VAR 0 5
58755: PPUSH
58756: LD_VAR 0 1
58760: PUSH
58761: LD_VAR 0 6
58765: ARRAY
58766: PUSH
58767: LD_VAR 0 4
58771: ARRAY
58772: PPUSH
58773: CALL 53818 0 2
58777: ST_TO_ADDR
58778: GO 58806
// result := Join ( result , array [ i ] ) ;
58780: LD_ADDR_VAR 0 5
58784: PUSH
58785: LD_VAR 0 5
58789: PPUSH
58790: LD_VAR 0 1
58794: PUSH
58795: LD_VAR 0 6
58799: ARRAY
58800: PPUSH
58801: CALL 53818 0 2
58805: ST_TO_ADDR
// end ;
58806: GO 58713
58808: POP
58809: POP
// end ;
58810: LD_VAR 0 5
58814: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58815: LD_INT 0
58817: PPUSH
// if not vehicles or not parkingPoint then
58818: LD_VAR 0 1
58822: NOT
58823: IFTRUE 58832
58825: PUSH
58826: LD_VAR 0 2
58830: NOT
58831: OR
58832: IFFALSE 58836
// exit ;
58834: GO 58934
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58836: LD_ADDR_VAR 0 1
58840: PUSH
58841: LD_VAR 0 1
58845: PPUSH
58846: LD_INT 50
58848: PUSH
58849: EMPTY
58850: LIST
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: LD_INT 92
58857: PUSH
58858: LD_VAR 0 2
58862: PUSH
58863: LD_INT 1
58865: ARRAY
58866: PUSH
58867: LD_VAR 0 2
58871: PUSH
58872: LD_INT 2
58874: ARRAY
58875: PUSH
58876: LD_INT 8
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PPUSH
58893: CALL_OW 72
58897: ST_TO_ADDR
// if not vehicles then
58898: LD_VAR 0 1
58902: NOT
58903: IFFALSE 58907
// exit ;
58905: GO 58934
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58907: LD_VAR 0 1
58911: PPUSH
58912: LD_VAR 0 2
58916: PUSH
58917: LD_INT 1
58919: ARRAY
58920: PPUSH
58921: LD_VAR 0 2
58925: PUSH
58926: LD_INT 2
58928: ARRAY
58929: PPUSH
58930: CALL_OW 111
// end ;
58934: LD_VAR 0 3
58938: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58939: LD_INT 0
58941: PPUSH
58942: PPUSH
58943: PPUSH
// if not side or not area then
58944: LD_VAR 0 1
58948: NOT
58949: IFTRUE 58958
58951: PUSH
58952: LD_VAR 0 2
58956: NOT
58957: OR
58958: IFFALSE 58962
// exit ;
58960: GO 59081
// tmp := AreaToList ( area , 0 ) ;
58962: LD_ADDR_VAR 0 5
58966: PUSH
58967: LD_VAR 0 2
58971: PPUSH
58972: LD_INT 0
58974: PPUSH
58975: CALL_OW 517
58979: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58980: LD_ADDR_VAR 0 4
58984: PUSH
58985: DOUBLE
58986: LD_INT 1
58988: DEC
58989: ST_TO_ADDR
58990: LD_VAR 0 5
58994: PUSH
58995: LD_INT 1
58997: ARRAY
58998: PUSH
58999: FOR_TO
59000: IFFALSE 59079
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59002: LD_VAR 0 5
59006: PUSH
59007: LD_INT 1
59009: ARRAY
59010: PUSH
59011: LD_VAR 0 4
59015: ARRAY
59016: PPUSH
59017: LD_VAR 0 5
59021: PUSH
59022: LD_INT 2
59024: ARRAY
59025: PUSH
59026: LD_VAR 0 4
59030: ARRAY
59031: PPUSH
59032: CALL_OW 351
59036: IFFALSE 59077
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59038: LD_VAR 0 5
59042: PUSH
59043: LD_INT 1
59045: ARRAY
59046: PUSH
59047: LD_VAR 0 4
59051: ARRAY
59052: PPUSH
59053: LD_VAR 0 5
59057: PUSH
59058: LD_INT 2
59060: ARRAY
59061: PUSH
59062: LD_VAR 0 4
59066: ARRAY
59067: PPUSH
59068: LD_VAR 0 1
59072: PPUSH
59073: CALL_OW 244
// end ;
59077: GO 58999
59079: POP
59080: POP
// end ;
59081: LD_VAR 0 3
59085: RET
// export function UniqueArray ( array ) ; var i ; begin
59086: LD_INT 0
59088: PPUSH
59089: PPUSH
// result := [ ] ;
59090: LD_ADDR_VAR 0 2
59094: PUSH
59095: EMPTY
59096: ST_TO_ADDR
// if not array then
59097: LD_VAR 0 1
59101: NOT
59102: IFFALSE 59106
// exit ;
59104: GO 59167
// for i := 1 to array do
59106: LD_ADDR_VAR 0 3
59110: PUSH
59111: DOUBLE
59112: LD_INT 1
59114: DEC
59115: ST_TO_ADDR
59116: LD_VAR 0 1
59120: PUSH
59121: FOR_TO
59122: IFFALSE 59165
// if not array [ i ] in result then
59124: LD_VAR 0 1
59128: PUSH
59129: LD_VAR 0 3
59133: ARRAY
59134: PUSH
59135: LD_VAR 0 2
59139: IN
59140: NOT
59141: IFFALSE 59163
// result := Join ( result , i ) ;
59143: LD_ADDR_VAR 0 2
59147: PUSH
59148: LD_VAR 0 2
59152: PPUSH
59153: LD_VAR 0 3
59157: PPUSH
59158: CALL 53818 0 2
59162: ST_TO_ADDR
59163: GO 59121
59165: POP
59166: POP
// end ; end_of_file end_of_file
59167: LD_VAR 0 2
59171: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59172: LD_VAR 0 1
59176: PPUSH
59177: LD_VAR 0 2
59181: PPUSH
59182: LD_VAR 0 3
59186: PPUSH
59187: LD_VAR 0 4
59191: PPUSH
59192: LD_VAR 0 5
59196: PPUSH
59197: LD_VAR 0 6
59201: PPUSH
59202: CALL 59444 0 6
// end ;
59206: PPOPN 6
59208: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
59209: LD_INT 0
59211: PPUSH
// begin if not units then
59212: LD_VAR 0 1
59216: NOT
59217: IFFALSE 59221
// exit ;
59219: GO 59255
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
59221: LD_VAR 0 1
59225: PPUSH
59226: LD_VAR 0 2
59230: PPUSH
59231: LD_VAR 0 3
59235: PPUSH
59236: LD_VAR 0 4
59240: PPUSH
59241: LD_VAR 0 5
59245: PPUSH
59246: LD_VAR 0 6
59250: PPUSH
59251: CALL 81961 0 6
// end ;
59255: PPOPN 7
59257: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59258: CALL 59324 0 0
// end ; end_of_file
59262: PPOPN 1
59264: END
// export globalGameSaveCounter ; every 0 0$1 do
59265: GO 59267
59267: DISABLE
// begin enable ;
59268: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59269: LD_STRING updateTimer(
59271: PUSH
59272: LD_OWVAR 1
59276: STR
59277: PUSH
59278: LD_STRING );
59280: STR
59281: PPUSH
59282: CALL_OW 559
// end ;
59286: END
// every 0 0$1 do
59287: GO 59289
59289: DISABLE
// begin globalGameSaveCounter := 0 ;
59290: LD_ADDR_EXP 37
59294: PUSH
59295: LD_INT 0
59297: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
59298: LD_STRING setGameSaveCounter(0)
59300: PPUSH
59301: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
59305: LD_STRING initStreamRollete();
59307: PPUSH
59308: CALL_OW 559
// InitStreamMode ;
59312: CALL 60664 0 0
// DefineStreamItems ( false ) ;
59316: LD_INT 0
59318: PPUSH
59319: CALL 61128 0 1
// end ;
59323: END
// export function SOS_MapStart ( ) ; begin
59324: LD_INT 0
59326: PPUSH
// if streamModeActive then
59327: LD_EXP 38
59331: IFFALSE 59340
// DefineStreamItems ( true ) ;
59333: LD_INT 1
59335: PPUSH
59336: CALL 61128 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
59340: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
59342: PPUSH
59343: CALL_OW 559
// UpdateLuaVariables ( ) ;
59347: CALL 59364 0 0
// UpdateFactoryWaypoints ( ) ;
59351: CALL 74250 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59355: CALL 74502 0 0
// end ;
59359: LD_VAR 0 1
59363: RET
// function UpdateLuaVariables ( ) ; begin
59364: LD_INT 0
59366: PPUSH
// if globalGameSaveCounter then
59367: LD_EXP 37
59371: IFFALSE 59405
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
59373: LD_ADDR_EXP 37
59377: PUSH
59378: LD_EXP 37
59382: PPUSH
59383: CALL 55191 0 1
59387: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59388: LD_STRING setGameSaveCounter(
59390: PUSH
59391: LD_EXP 37
59395: STR
59396: PUSH
59397: LD_STRING )
59399: STR
59400: PPUSH
59401: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59405: LD_STRING setGameDifficulty(
59407: PUSH
59408: LD_OWVAR 67
59412: STR
59413: PUSH
59414: LD_STRING )
59416: STR
59417: PPUSH
59418: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59422: LD_STRING displayDifficulty(
59424: PUSH
59425: LD_OWVAR 67
59429: STR
59430: PUSH
59431: LD_STRING )
59433: STR
59434: PPUSH
59435: CALL_OW 559
// end ;
59439: LD_VAR 0 1
59443: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59444: LD_INT 0
59446: PPUSH
// if p2 = stream_mode then
59447: LD_VAR 0 2
59451: PUSH
59452: LD_INT 100
59454: EQUAL
59455: IFFALSE 60458
// begin if not StreamModeActive then
59457: LD_EXP 38
59461: NOT
59462: IFFALSE 59472
// StreamModeActive := true ;
59464: LD_ADDR_EXP 38
59468: PUSH
59469: LD_INT 1
59471: ST_TO_ADDR
// if p3 = 0 then
59472: LD_VAR 0 3
59476: PUSH
59477: LD_INT 0
59479: EQUAL
59480: IFFALSE 59486
// InitStreamMode ;
59482: CALL 60664 0 0
// if p3 = 1 then
59486: LD_VAR 0 3
59490: PUSH
59491: LD_INT 1
59493: EQUAL
59494: IFFALSE 59504
// sRocket := true ;
59496: LD_ADDR_EXP 43
59500: PUSH
59501: LD_INT 1
59503: ST_TO_ADDR
// if p3 = 2 then
59504: LD_VAR 0 3
59508: PUSH
59509: LD_INT 2
59511: EQUAL
59512: IFFALSE 59522
// sSpeed := true ;
59514: LD_ADDR_EXP 42
59518: PUSH
59519: LD_INT 1
59521: ST_TO_ADDR
// if p3 = 3 then
59522: LD_VAR 0 3
59526: PUSH
59527: LD_INT 3
59529: EQUAL
59530: IFFALSE 59540
// sEngine := true ;
59532: LD_ADDR_EXP 44
59536: PUSH
59537: LD_INT 1
59539: ST_TO_ADDR
// if p3 = 4 then
59540: LD_VAR 0 3
59544: PUSH
59545: LD_INT 4
59547: EQUAL
59548: IFFALSE 59558
// sSpec := true ;
59550: LD_ADDR_EXP 41
59554: PUSH
59555: LD_INT 1
59557: ST_TO_ADDR
// if p3 = 5 then
59558: LD_VAR 0 3
59562: PUSH
59563: LD_INT 5
59565: EQUAL
59566: IFFALSE 59576
// sLevel := true ;
59568: LD_ADDR_EXP 45
59572: PUSH
59573: LD_INT 1
59575: ST_TO_ADDR
// if p3 = 6 then
59576: LD_VAR 0 3
59580: PUSH
59581: LD_INT 6
59583: EQUAL
59584: IFFALSE 59594
// sArmoury := true ;
59586: LD_ADDR_EXP 46
59590: PUSH
59591: LD_INT 1
59593: ST_TO_ADDR
// if p3 = 7 then
59594: LD_VAR 0 3
59598: PUSH
59599: LD_INT 7
59601: EQUAL
59602: IFFALSE 59612
// sRadar := true ;
59604: LD_ADDR_EXP 47
59608: PUSH
59609: LD_INT 1
59611: ST_TO_ADDR
// if p3 = 8 then
59612: LD_VAR 0 3
59616: PUSH
59617: LD_INT 8
59619: EQUAL
59620: IFFALSE 59630
// sBunker := true ;
59622: LD_ADDR_EXP 48
59626: PUSH
59627: LD_INT 1
59629: ST_TO_ADDR
// if p3 = 9 then
59630: LD_VAR 0 3
59634: PUSH
59635: LD_INT 9
59637: EQUAL
59638: IFFALSE 59648
// sHack := true ;
59640: LD_ADDR_EXP 49
59644: PUSH
59645: LD_INT 1
59647: ST_TO_ADDR
// if p3 = 10 then
59648: LD_VAR 0 3
59652: PUSH
59653: LD_INT 10
59655: EQUAL
59656: IFFALSE 59666
// sFire := true ;
59658: LD_ADDR_EXP 50
59662: PUSH
59663: LD_INT 1
59665: ST_TO_ADDR
// if p3 = 11 then
59666: LD_VAR 0 3
59670: PUSH
59671: LD_INT 11
59673: EQUAL
59674: IFFALSE 59684
// sRefresh := true ;
59676: LD_ADDR_EXP 51
59680: PUSH
59681: LD_INT 1
59683: ST_TO_ADDR
// if p3 = 12 then
59684: LD_VAR 0 3
59688: PUSH
59689: LD_INT 12
59691: EQUAL
59692: IFFALSE 59702
// sExp := true ;
59694: LD_ADDR_EXP 52
59698: PUSH
59699: LD_INT 1
59701: ST_TO_ADDR
// if p3 = 13 then
59702: LD_VAR 0 3
59706: PUSH
59707: LD_INT 13
59709: EQUAL
59710: IFFALSE 59720
// sDepot := true ;
59712: LD_ADDR_EXP 53
59716: PUSH
59717: LD_INT 1
59719: ST_TO_ADDR
// if p3 = 14 then
59720: LD_VAR 0 3
59724: PUSH
59725: LD_INT 14
59727: EQUAL
59728: IFFALSE 59738
// sFlag := true ;
59730: LD_ADDR_EXP 54
59734: PUSH
59735: LD_INT 1
59737: ST_TO_ADDR
// if p3 = 15 then
59738: LD_VAR 0 3
59742: PUSH
59743: LD_INT 15
59745: EQUAL
59746: IFFALSE 59756
// sKamikadze := true ;
59748: LD_ADDR_EXP 62
59752: PUSH
59753: LD_INT 1
59755: ST_TO_ADDR
// if p3 = 16 then
59756: LD_VAR 0 3
59760: PUSH
59761: LD_INT 16
59763: EQUAL
59764: IFFALSE 59774
// sTroll := true ;
59766: LD_ADDR_EXP 63
59770: PUSH
59771: LD_INT 1
59773: ST_TO_ADDR
// if p3 = 17 then
59774: LD_VAR 0 3
59778: PUSH
59779: LD_INT 17
59781: EQUAL
59782: IFFALSE 59792
// sSlow := true ;
59784: LD_ADDR_EXP 64
59788: PUSH
59789: LD_INT 1
59791: ST_TO_ADDR
// if p3 = 18 then
59792: LD_VAR 0 3
59796: PUSH
59797: LD_INT 18
59799: EQUAL
59800: IFFALSE 59810
// sLack := true ;
59802: LD_ADDR_EXP 65
59806: PUSH
59807: LD_INT 1
59809: ST_TO_ADDR
// if p3 = 19 then
59810: LD_VAR 0 3
59814: PUSH
59815: LD_INT 19
59817: EQUAL
59818: IFFALSE 59828
// sTank := true ;
59820: LD_ADDR_EXP 67
59824: PUSH
59825: LD_INT 1
59827: ST_TO_ADDR
// if p3 = 20 then
59828: LD_VAR 0 3
59832: PUSH
59833: LD_INT 20
59835: EQUAL
59836: IFFALSE 59846
// sRemote := true ;
59838: LD_ADDR_EXP 68
59842: PUSH
59843: LD_INT 1
59845: ST_TO_ADDR
// if p3 = 21 then
59846: LD_VAR 0 3
59850: PUSH
59851: LD_INT 21
59853: EQUAL
59854: IFFALSE 59864
// sPowell := true ;
59856: LD_ADDR_EXP 69
59860: PUSH
59861: LD_INT 1
59863: ST_TO_ADDR
// if p3 = 22 then
59864: LD_VAR 0 3
59868: PUSH
59869: LD_INT 22
59871: EQUAL
59872: IFFALSE 59882
// sTeleport := true ;
59874: LD_ADDR_EXP 72
59878: PUSH
59879: LD_INT 1
59881: ST_TO_ADDR
// if p3 = 23 then
59882: LD_VAR 0 3
59886: PUSH
59887: LD_INT 23
59889: EQUAL
59890: IFFALSE 59900
// sOilTower := true ;
59892: LD_ADDR_EXP 74
59896: PUSH
59897: LD_INT 1
59899: ST_TO_ADDR
// if p3 = 24 then
59900: LD_VAR 0 3
59904: PUSH
59905: LD_INT 24
59907: EQUAL
59908: IFFALSE 59918
// sShovel := true ;
59910: LD_ADDR_EXP 75
59914: PUSH
59915: LD_INT 1
59917: ST_TO_ADDR
// if p3 = 25 then
59918: LD_VAR 0 3
59922: PUSH
59923: LD_INT 25
59925: EQUAL
59926: IFFALSE 59936
// sSheik := true ;
59928: LD_ADDR_EXP 76
59932: PUSH
59933: LD_INT 1
59935: ST_TO_ADDR
// if p3 = 26 then
59936: LD_VAR 0 3
59940: PUSH
59941: LD_INT 26
59943: EQUAL
59944: IFFALSE 59954
// sEarthquake := true ;
59946: LD_ADDR_EXP 78
59950: PUSH
59951: LD_INT 1
59953: ST_TO_ADDR
// if p3 = 27 then
59954: LD_VAR 0 3
59958: PUSH
59959: LD_INT 27
59961: EQUAL
59962: IFFALSE 59972
// sAI := true ;
59964: LD_ADDR_EXP 79
59968: PUSH
59969: LD_INT 1
59971: ST_TO_ADDR
// if p3 = 28 then
59972: LD_VAR 0 3
59976: PUSH
59977: LD_INT 28
59979: EQUAL
59980: IFFALSE 59990
// sCargo := true ;
59982: LD_ADDR_EXP 82
59986: PUSH
59987: LD_INT 1
59989: ST_TO_ADDR
// if p3 = 29 then
59990: LD_VAR 0 3
59994: PUSH
59995: LD_INT 29
59997: EQUAL
59998: IFFALSE 60008
// sDLaser := true ;
60000: LD_ADDR_EXP 83
60004: PUSH
60005: LD_INT 1
60007: ST_TO_ADDR
// if p3 = 30 then
60008: LD_VAR 0 3
60012: PUSH
60013: LD_INT 30
60015: EQUAL
60016: IFFALSE 60026
// sExchange := true ;
60018: LD_ADDR_EXP 84
60022: PUSH
60023: LD_INT 1
60025: ST_TO_ADDR
// if p3 = 31 then
60026: LD_VAR 0 3
60030: PUSH
60031: LD_INT 31
60033: EQUAL
60034: IFFALSE 60044
// sFac := true ;
60036: LD_ADDR_EXP 85
60040: PUSH
60041: LD_INT 1
60043: ST_TO_ADDR
// if p3 = 32 then
60044: LD_VAR 0 3
60048: PUSH
60049: LD_INT 32
60051: EQUAL
60052: IFFALSE 60062
// sPower := true ;
60054: LD_ADDR_EXP 86
60058: PUSH
60059: LD_INT 1
60061: ST_TO_ADDR
// if p3 = 33 then
60062: LD_VAR 0 3
60066: PUSH
60067: LD_INT 33
60069: EQUAL
60070: IFFALSE 60080
// sRandom := true ;
60072: LD_ADDR_EXP 87
60076: PUSH
60077: LD_INT 1
60079: ST_TO_ADDR
// if p3 = 34 then
60080: LD_VAR 0 3
60084: PUSH
60085: LD_INT 34
60087: EQUAL
60088: IFFALSE 60098
// sShield := true ;
60090: LD_ADDR_EXP 88
60094: PUSH
60095: LD_INT 1
60097: ST_TO_ADDR
// if p3 = 35 then
60098: LD_VAR 0 3
60102: PUSH
60103: LD_INT 35
60105: EQUAL
60106: IFFALSE 60116
// sTime := true ;
60108: LD_ADDR_EXP 89
60112: PUSH
60113: LD_INT 1
60115: ST_TO_ADDR
// if p3 = 36 then
60116: LD_VAR 0 3
60120: PUSH
60121: LD_INT 36
60123: EQUAL
60124: IFFALSE 60134
// sTools := true ;
60126: LD_ADDR_EXP 90
60130: PUSH
60131: LD_INT 1
60133: ST_TO_ADDR
// if p3 = 101 then
60134: LD_VAR 0 3
60138: PUSH
60139: LD_INT 101
60141: EQUAL
60142: IFFALSE 60152
// sSold := true ;
60144: LD_ADDR_EXP 55
60148: PUSH
60149: LD_INT 1
60151: ST_TO_ADDR
// if p3 = 102 then
60152: LD_VAR 0 3
60156: PUSH
60157: LD_INT 102
60159: EQUAL
60160: IFFALSE 60170
// sDiff := true ;
60162: LD_ADDR_EXP 56
60166: PUSH
60167: LD_INT 1
60169: ST_TO_ADDR
// if p3 = 103 then
60170: LD_VAR 0 3
60174: PUSH
60175: LD_INT 103
60177: EQUAL
60178: IFFALSE 60188
// sFog := true ;
60180: LD_ADDR_EXP 59
60184: PUSH
60185: LD_INT 1
60187: ST_TO_ADDR
// if p3 = 104 then
60188: LD_VAR 0 3
60192: PUSH
60193: LD_INT 104
60195: EQUAL
60196: IFFALSE 60206
// sReset := true ;
60198: LD_ADDR_EXP 60
60202: PUSH
60203: LD_INT 1
60205: ST_TO_ADDR
// if p3 = 105 then
60206: LD_VAR 0 3
60210: PUSH
60211: LD_INT 105
60213: EQUAL
60214: IFFALSE 60224
// sSun := true ;
60216: LD_ADDR_EXP 61
60220: PUSH
60221: LD_INT 1
60223: ST_TO_ADDR
// if p3 = 106 then
60224: LD_VAR 0 3
60228: PUSH
60229: LD_INT 106
60231: EQUAL
60232: IFFALSE 60242
// sTiger := true ;
60234: LD_ADDR_EXP 57
60238: PUSH
60239: LD_INT 1
60241: ST_TO_ADDR
// if p3 = 107 then
60242: LD_VAR 0 3
60246: PUSH
60247: LD_INT 107
60249: EQUAL
60250: IFFALSE 60260
// sBomb := true ;
60252: LD_ADDR_EXP 58
60256: PUSH
60257: LD_INT 1
60259: ST_TO_ADDR
// if p3 = 108 then
60260: LD_VAR 0 3
60264: PUSH
60265: LD_INT 108
60267: EQUAL
60268: IFFALSE 60278
// sWound := true ;
60270: LD_ADDR_EXP 66
60274: PUSH
60275: LD_INT 1
60277: ST_TO_ADDR
// if p3 = 109 then
60278: LD_VAR 0 3
60282: PUSH
60283: LD_INT 109
60285: EQUAL
60286: IFFALSE 60296
// sBetray := true ;
60288: LD_ADDR_EXP 70
60292: PUSH
60293: LD_INT 1
60295: ST_TO_ADDR
// if p3 = 110 then
60296: LD_VAR 0 3
60300: PUSH
60301: LD_INT 110
60303: EQUAL
60304: IFFALSE 60314
// sContamin := true ;
60306: LD_ADDR_EXP 71
60310: PUSH
60311: LD_INT 1
60313: ST_TO_ADDR
// if p3 = 111 then
60314: LD_VAR 0 3
60318: PUSH
60319: LD_INT 111
60321: EQUAL
60322: IFFALSE 60332
// sOil := true ;
60324: LD_ADDR_EXP 73
60328: PUSH
60329: LD_INT 1
60331: ST_TO_ADDR
// if p3 = 112 then
60332: LD_VAR 0 3
60336: PUSH
60337: LD_INT 112
60339: EQUAL
60340: IFFALSE 60350
// sStu := true ;
60342: LD_ADDR_EXP 77
60346: PUSH
60347: LD_INT 1
60349: ST_TO_ADDR
// if p3 = 113 then
60350: LD_VAR 0 3
60354: PUSH
60355: LD_INT 113
60357: EQUAL
60358: IFFALSE 60368
// sBazooka := true ;
60360: LD_ADDR_EXP 80
60364: PUSH
60365: LD_INT 1
60367: ST_TO_ADDR
// if p3 = 114 then
60368: LD_VAR 0 3
60372: PUSH
60373: LD_INT 114
60375: EQUAL
60376: IFFALSE 60386
// sMortar := true ;
60378: LD_ADDR_EXP 81
60382: PUSH
60383: LD_INT 1
60385: ST_TO_ADDR
// if p3 = 115 then
60386: LD_VAR 0 3
60390: PUSH
60391: LD_INT 115
60393: EQUAL
60394: IFFALSE 60404
// sRanger := true ;
60396: LD_ADDR_EXP 91
60400: PUSH
60401: LD_INT 1
60403: ST_TO_ADDR
// if p3 = 116 then
60404: LD_VAR 0 3
60408: PUSH
60409: LD_INT 116
60411: EQUAL
60412: IFFALSE 60422
// sComputer := true ;
60414: LD_ADDR_EXP 92
60418: PUSH
60419: LD_INT 1
60421: ST_TO_ADDR
// if p3 = 117 then
60422: LD_VAR 0 3
60426: PUSH
60427: LD_INT 117
60429: EQUAL
60430: IFFALSE 60440
// s30 := true ;
60432: LD_ADDR_EXP 93
60436: PUSH
60437: LD_INT 1
60439: ST_TO_ADDR
// if p3 = 118 then
60440: LD_VAR 0 3
60444: PUSH
60445: LD_INT 118
60447: EQUAL
60448: IFFALSE 60458
// s60 := true ;
60450: LD_ADDR_EXP 94
60454: PUSH
60455: LD_INT 1
60457: ST_TO_ADDR
// end ; if p2 = hack_mode then
60458: LD_VAR 0 2
60462: PUSH
60463: LD_INT 101
60465: EQUAL
60466: IFFALSE 60594
// begin case p3 of 1 :
60468: LD_VAR 0 3
60472: PUSH
60473: LD_INT 1
60475: DOUBLE
60476: EQUAL
60477: IFTRUE 60481
60479: GO 60488
60481: POP
// hHackUnlimitedResources ; 2 :
60482: CALL 72857 0 0
60486: GO 60594
60488: LD_INT 2
60490: DOUBLE
60491: EQUAL
60492: IFTRUE 60496
60494: GO 60503
60496: POP
// hHackSetLevel10 ; 3 :
60497: CALL 72990 0 0
60501: GO 60594
60503: LD_INT 3
60505: DOUBLE
60506: EQUAL
60507: IFTRUE 60511
60509: GO 60518
60511: POP
// hHackSetLevel10YourUnits ; 4 :
60512: CALL 73075 0 0
60516: GO 60594
60518: LD_INT 4
60520: DOUBLE
60521: EQUAL
60522: IFTRUE 60526
60524: GO 60533
60526: POP
// hHackInvincible ; 5 :
60527: CALL 73523 0 0
60531: GO 60594
60533: LD_INT 5
60535: DOUBLE
60536: EQUAL
60537: IFTRUE 60541
60539: GO 60548
60541: POP
// hHackInvisible ; 6 :
60542: CALL 73634 0 0
60546: GO 60594
60548: LD_INT 6
60550: DOUBLE
60551: EQUAL
60552: IFTRUE 60556
60554: GO 60563
60556: POP
// hHackChangeYourSide ; 7 :
60557: CALL 73691 0 0
60561: GO 60594
60563: LD_INT 7
60565: DOUBLE
60566: EQUAL
60567: IFTRUE 60571
60569: GO 60578
60571: POP
// hHackChangeUnitSide ; 8 :
60572: CALL 73733 0 0
60576: GO 60594
60578: LD_INT 8
60580: DOUBLE
60581: EQUAL
60582: IFTRUE 60586
60584: GO 60593
60586: POP
// hHackFog ; end ;
60587: CALL 73834 0 0
60591: GO 60594
60593: POP
// end ; if p2 = game_save_mode then
60594: LD_VAR 0 2
60598: PUSH
60599: LD_INT 102
60601: EQUAL
60602: IFFALSE 60659
// begin if p3 = 1 then
60604: LD_VAR 0 3
60608: PUSH
60609: LD_INT 1
60611: EQUAL
60612: IFFALSE 60624
// globalGameSaveCounter := p4 ;
60614: LD_ADDR_EXP 37
60618: PUSH
60619: LD_VAR 0 4
60623: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
60624: LD_VAR 0 3
60628: PUSH
60629: LD_INT 2
60631: EQUAL
60632: IFFALSE 60640
60634: PUSH
60635: LD_EXP 37
60639: AND
60640: IFFALSE 60659
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
60642: LD_STRING setGameSaveCounter(
60644: PUSH
60645: LD_EXP 37
60649: STR
60650: PUSH
60651: LD_STRING )
60653: STR
60654: PPUSH
60655: CALL_OW 559
// end ; end ;
60659: LD_VAR 0 7
60663: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
60664: LD_INT 0
60666: PPUSH
// streamModeActive := false ;
60667: LD_ADDR_EXP 38
60671: PUSH
60672: LD_INT 0
60674: ST_TO_ADDR
// normalCounter := 36 ;
60675: LD_ADDR_EXP 39
60679: PUSH
60680: LD_INT 36
60682: ST_TO_ADDR
// hardcoreCounter := 18 ;
60683: LD_ADDR_EXP 40
60687: PUSH
60688: LD_INT 18
60690: ST_TO_ADDR
// sRocket := false ;
60691: LD_ADDR_EXP 43
60695: PUSH
60696: LD_INT 0
60698: ST_TO_ADDR
// sSpeed := false ;
60699: LD_ADDR_EXP 42
60703: PUSH
60704: LD_INT 0
60706: ST_TO_ADDR
// sEngine := false ;
60707: LD_ADDR_EXP 44
60711: PUSH
60712: LD_INT 0
60714: ST_TO_ADDR
// sSpec := false ;
60715: LD_ADDR_EXP 41
60719: PUSH
60720: LD_INT 0
60722: ST_TO_ADDR
// sLevel := false ;
60723: LD_ADDR_EXP 45
60727: PUSH
60728: LD_INT 0
60730: ST_TO_ADDR
// sArmoury := false ;
60731: LD_ADDR_EXP 46
60735: PUSH
60736: LD_INT 0
60738: ST_TO_ADDR
// sRadar := false ;
60739: LD_ADDR_EXP 47
60743: PUSH
60744: LD_INT 0
60746: ST_TO_ADDR
// sBunker := false ;
60747: LD_ADDR_EXP 48
60751: PUSH
60752: LD_INT 0
60754: ST_TO_ADDR
// sHack := false ;
60755: LD_ADDR_EXP 49
60759: PUSH
60760: LD_INT 0
60762: ST_TO_ADDR
// sFire := false ;
60763: LD_ADDR_EXP 50
60767: PUSH
60768: LD_INT 0
60770: ST_TO_ADDR
// sRefresh := false ;
60771: LD_ADDR_EXP 51
60775: PUSH
60776: LD_INT 0
60778: ST_TO_ADDR
// sExp := false ;
60779: LD_ADDR_EXP 52
60783: PUSH
60784: LD_INT 0
60786: ST_TO_ADDR
// sDepot := false ;
60787: LD_ADDR_EXP 53
60791: PUSH
60792: LD_INT 0
60794: ST_TO_ADDR
// sFlag := false ;
60795: LD_ADDR_EXP 54
60799: PUSH
60800: LD_INT 0
60802: ST_TO_ADDR
// sKamikadze := false ;
60803: LD_ADDR_EXP 62
60807: PUSH
60808: LD_INT 0
60810: ST_TO_ADDR
// sTroll := false ;
60811: LD_ADDR_EXP 63
60815: PUSH
60816: LD_INT 0
60818: ST_TO_ADDR
// sSlow := false ;
60819: LD_ADDR_EXP 64
60823: PUSH
60824: LD_INT 0
60826: ST_TO_ADDR
// sLack := false ;
60827: LD_ADDR_EXP 65
60831: PUSH
60832: LD_INT 0
60834: ST_TO_ADDR
// sTank := false ;
60835: LD_ADDR_EXP 67
60839: PUSH
60840: LD_INT 0
60842: ST_TO_ADDR
// sRemote := false ;
60843: LD_ADDR_EXP 68
60847: PUSH
60848: LD_INT 0
60850: ST_TO_ADDR
// sPowell := false ;
60851: LD_ADDR_EXP 69
60855: PUSH
60856: LD_INT 0
60858: ST_TO_ADDR
// sTeleport := false ;
60859: LD_ADDR_EXP 72
60863: PUSH
60864: LD_INT 0
60866: ST_TO_ADDR
// sOilTower := false ;
60867: LD_ADDR_EXP 74
60871: PUSH
60872: LD_INT 0
60874: ST_TO_ADDR
// sShovel := false ;
60875: LD_ADDR_EXP 75
60879: PUSH
60880: LD_INT 0
60882: ST_TO_ADDR
// sSheik := false ;
60883: LD_ADDR_EXP 76
60887: PUSH
60888: LD_INT 0
60890: ST_TO_ADDR
// sEarthquake := false ;
60891: LD_ADDR_EXP 78
60895: PUSH
60896: LD_INT 0
60898: ST_TO_ADDR
// sAI := false ;
60899: LD_ADDR_EXP 79
60903: PUSH
60904: LD_INT 0
60906: ST_TO_ADDR
// sCargo := false ;
60907: LD_ADDR_EXP 82
60911: PUSH
60912: LD_INT 0
60914: ST_TO_ADDR
// sDLaser := false ;
60915: LD_ADDR_EXP 83
60919: PUSH
60920: LD_INT 0
60922: ST_TO_ADDR
// sExchange := false ;
60923: LD_ADDR_EXP 84
60927: PUSH
60928: LD_INT 0
60930: ST_TO_ADDR
// sFac := false ;
60931: LD_ADDR_EXP 85
60935: PUSH
60936: LD_INT 0
60938: ST_TO_ADDR
// sPower := false ;
60939: LD_ADDR_EXP 86
60943: PUSH
60944: LD_INT 0
60946: ST_TO_ADDR
// sRandom := false ;
60947: LD_ADDR_EXP 87
60951: PUSH
60952: LD_INT 0
60954: ST_TO_ADDR
// sShield := false ;
60955: LD_ADDR_EXP 88
60959: PUSH
60960: LD_INT 0
60962: ST_TO_ADDR
// sTime := false ;
60963: LD_ADDR_EXP 89
60967: PUSH
60968: LD_INT 0
60970: ST_TO_ADDR
// sTools := false ;
60971: LD_ADDR_EXP 90
60975: PUSH
60976: LD_INT 0
60978: ST_TO_ADDR
// sSold := false ;
60979: LD_ADDR_EXP 55
60983: PUSH
60984: LD_INT 0
60986: ST_TO_ADDR
// sDiff := false ;
60987: LD_ADDR_EXP 56
60991: PUSH
60992: LD_INT 0
60994: ST_TO_ADDR
// sFog := false ;
60995: LD_ADDR_EXP 59
60999: PUSH
61000: LD_INT 0
61002: ST_TO_ADDR
// sReset := false ;
61003: LD_ADDR_EXP 60
61007: PUSH
61008: LD_INT 0
61010: ST_TO_ADDR
// sSun := false ;
61011: LD_ADDR_EXP 61
61015: PUSH
61016: LD_INT 0
61018: ST_TO_ADDR
// sTiger := false ;
61019: LD_ADDR_EXP 57
61023: PUSH
61024: LD_INT 0
61026: ST_TO_ADDR
// sBomb := false ;
61027: LD_ADDR_EXP 58
61031: PUSH
61032: LD_INT 0
61034: ST_TO_ADDR
// sWound := false ;
61035: LD_ADDR_EXP 66
61039: PUSH
61040: LD_INT 0
61042: ST_TO_ADDR
// sBetray := false ;
61043: LD_ADDR_EXP 70
61047: PUSH
61048: LD_INT 0
61050: ST_TO_ADDR
// sContamin := false ;
61051: LD_ADDR_EXP 71
61055: PUSH
61056: LD_INT 0
61058: ST_TO_ADDR
// sOil := false ;
61059: LD_ADDR_EXP 73
61063: PUSH
61064: LD_INT 0
61066: ST_TO_ADDR
// sStu := false ;
61067: LD_ADDR_EXP 77
61071: PUSH
61072: LD_INT 0
61074: ST_TO_ADDR
// sBazooka := false ;
61075: LD_ADDR_EXP 80
61079: PUSH
61080: LD_INT 0
61082: ST_TO_ADDR
// sMortar := false ;
61083: LD_ADDR_EXP 81
61087: PUSH
61088: LD_INT 0
61090: ST_TO_ADDR
// sRanger := false ;
61091: LD_ADDR_EXP 91
61095: PUSH
61096: LD_INT 0
61098: ST_TO_ADDR
// sComputer := false ;
61099: LD_ADDR_EXP 92
61103: PUSH
61104: LD_INT 0
61106: ST_TO_ADDR
// s30 := false ;
61107: LD_ADDR_EXP 93
61111: PUSH
61112: LD_INT 0
61114: ST_TO_ADDR
// s60 := false ;
61115: LD_ADDR_EXP 94
61119: PUSH
61120: LD_INT 0
61122: ST_TO_ADDR
// end ;
61123: LD_VAR 0 1
61127: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
61128: LD_INT 0
61130: PPUSH
61131: PPUSH
61132: PPUSH
61133: PPUSH
61134: PPUSH
61135: PPUSH
61136: PPUSH
// result := [ ] ;
61137: LD_ADDR_VAR 0 2
61141: PUSH
61142: EMPTY
61143: ST_TO_ADDR
// if campaign_id = 1 then
61144: LD_OWVAR 69
61148: PUSH
61149: LD_INT 1
61151: EQUAL
61152: IFFALSE 64318
// begin case mission_number of 1 :
61154: LD_OWVAR 70
61158: PUSH
61159: LD_INT 1
61161: DOUBLE
61162: EQUAL
61163: IFTRUE 61167
61165: GO 61243
61167: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
61168: LD_ADDR_VAR 0 2
61172: PUSH
61173: LD_INT 2
61175: PUSH
61176: LD_INT 4
61178: PUSH
61179: LD_INT 11
61181: PUSH
61182: LD_INT 12
61184: PUSH
61185: LD_INT 15
61187: PUSH
61188: LD_INT 16
61190: PUSH
61191: LD_INT 22
61193: PUSH
61194: LD_INT 23
61196: PUSH
61197: LD_INT 26
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 101
61213: PUSH
61214: LD_INT 102
61216: PUSH
61217: LD_INT 106
61219: PUSH
61220: LD_INT 116
61222: PUSH
61223: LD_INT 117
61225: PUSH
61226: LD_INT 118
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: ST_TO_ADDR
61241: GO 64316
61243: LD_INT 2
61245: DOUBLE
61246: EQUAL
61247: IFTRUE 61251
61249: GO 61335
61251: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
61252: LD_ADDR_VAR 0 2
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: LD_INT 4
61262: PUSH
61263: LD_INT 11
61265: PUSH
61266: LD_INT 12
61268: PUSH
61269: LD_INT 15
61271: PUSH
61272: LD_INT 16
61274: PUSH
61275: LD_INT 22
61277: PUSH
61278: LD_INT 23
61280: PUSH
61281: LD_INT 26
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 101
61297: PUSH
61298: LD_INT 102
61300: PUSH
61301: LD_INT 105
61303: PUSH
61304: LD_INT 106
61306: PUSH
61307: LD_INT 108
61309: PUSH
61310: LD_INT 116
61312: PUSH
61313: LD_INT 117
61315: PUSH
61316: LD_INT 118
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: ST_TO_ADDR
61333: GO 64316
61335: LD_INT 3
61337: DOUBLE
61338: EQUAL
61339: IFTRUE 61343
61341: GO 61431
61343: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
61344: LD_ADDR_VAR 0 2
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: LD_INT 4
61354: PUSH
61355: LD_INT 5
61357: PUSH
61358: LD_INT 11
61360: PUSH
61361: LD_INT 12
61363: PUSH
61364: LD_INT 15
61366: PUSH
61367: LD_INT 16
61369: PUSH
61370: LD_INT 22
61372: PUSH
61373: LD_INT 26
61375: PUSH
61376: LD_INT 36
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 101
61393: PUSH
61394: LD_INT 102
61396: PUSH
61397: LD_INT 105
61399: PUSH
61400: LD_INT 106
61402: PUSH
61403: LD_INT 108
61405: PUSH
61406: LD_INT 116
61408: PUSH
61409: LD_INT 117
61411: PUSH
61412: LD_INT 118
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: ST_TO_ADDR
61429: GO 64316
61431: LD_INT 4
61433: DOUBLE
61434: EQUAL
61435: IFTRUE 61439
61437: GO 61535
61439: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
61440: LD_ADDR_VAR 0 2
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: LD_INT 4
61450: PUSH
61451: LD_INT 5
61453: PUSH
61454: LD_INT 8
61456: PUSH
61457: LD_INT 11
61459: PUSH
61460: LD_INT 12
61462: PUSH
61463: LD_INT 15
61465: PUSH
61466: LD_INT 16
61468: PUSH
61469: LD_INT 22
61471: PUSH
61472: LD_INT 23
61474: PUSH
61475: LD_INT 26
61477: PUSH
61478: LD_INT 36
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 101
61497: PUSH
61498: LD_INT 102
61500: PUSH
61501: LD_INT 105
61503: PUSH
61504: LD_INT 106
61506: PUSH
61507: LD_INT 108
61509: PUSH
61510: LD_INT 116
61512: PUSH
61513: LD_INT 117
61515: PUSH
61516: LD_INT 118
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: ST_TO_ADDR
61533: GO 64316
61535: LD_INT 5
61537: DOUBLE
61538: EQUAL
61539: IFTRUE 61543
61541: GO 61655
61543: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
61544: LD_ADDR_VAR 0 2
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: LD_INT 4
61554: PUSH
61555: LD_INT 5
61557: PUSH
61558: LD_INT 6
61560: PUSH
61561: LD_INT 8
61563: PUSH
61564: LD_INT 11
61566: PUSH
61567: LD_INT 12
61569: PUSH
61570: LD_INT 15
61572: PUSH
61573: LD_INT 16
61575: PUSH
61576: LD_INT 22
61578: PUSH
61579: LD_INT 23
61581: PUSH
61582: LD_INT 25
61584: PUSH
61585: LD_INT 26
61587: PUSH
61588: LD_INT 36
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 101
61609: PUSH
61610: LD_INT 102
61612: PUSH
61613: LD_INT 105
61615: PUSH
61616: LD_INT 106
61618: PUSH
61619: LD_INT 108
61621: PUSH
61622: LD_INT 109
61624: PUSH
61625: LD_INT 112
61627: PUSH
61628: LD_INT 116
61630: PUSH
61631: LD_INT 117
61633: PUSH
61634: LD_INT 118
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: ST_TO_ADDR
61653: GO 64316
61655: LD_INT 6
61657: DOUBLE
61658: EQUAL
61659: IFTRUE 61663
61661: GO 61795
61663: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
61664: LD_ADDR_VAR 0 2
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: LD_INT 4
61674: PUSH
61675: LD_INT 5
61677: PUSH
61678: LD_INT 6
61680: PUSH
61681: LD_INT 8
61683: PUSH
61684: LD_INT 11
61686: PUSH
61687: LD_INT 12
61689: PUSH
61690: LD_INT 15
61692: PUSH
61693: LD_INT 16
61695: PUSH
61696: LD_INT 20
61698: PUSH
61699: LD_INT 21
61701: PUSH
61702: LD_INT 22
61704: PUSH
61705: LD_INT 23
61707: PUSH
61708: LD_INT 25
61710: PUSH
61711: LD_INT 26
61713: PUSH
61714: LD_INT 30
61716: PUSH
61717: LD_INT 31
61719: PUSH
61720: LD_INT 32
61722: PUSH
61723: LD_INT 36
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 101
61749: PUSH
61750: LD_INT 102
61752: PUSH
61753: LD_INT 105
61755: PUSH
61756: LD_INT 106
61758: PUSH
61759: LD_INT 108
61761: PUSH
61762: LD_INT 109
61764: PUSH
61765: LD_INT 112
61767: PUSH
61768: LD_INT 116
61770: PUSH
61771: LD_INT 117
61773: PUSH
61774: LD_INT 118
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: ST_TO_ADDR
61793: GO 64316
61795: LD_INT 7
61797: DOUBLE
61798: EQUAL
61799: IFTRUE 61803
61801: GO 61915
61803: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
61804: LD_ADDR_VAR 0 2
61808: PUSH
61809: LD_INT 2
61811: PUSH
61812: LD_INT 4
61814: PUSH
61815: LD_INT 5
61817: PUSH
61818: LD_INT 7
61820: PUSH
61821: LD_INT 11
61823: PUSH
61824: LD_INT 12
61826: PUSH
61827: LD_INT 15
61829: PUSH
61830: LD_INT 16
61832: PUSH
61833: LD_INT 20
61835: PUSH
61836: LD_INT 21
61838: PUSH
61839: LD_INT 22
61841: PUSH
61842: LD_INT 23
61844: PUSH
61845: LD_INT 25
61847: PUSH
61848: LD_INT 26
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 101
61869: PUSH
61870: LD_INT 102
61872: PUSH
61873: LD_INT 103
61875: PUSH
61876: LD_INT 105
61878: PUSH
61879: LD_INT 106
61881: PUSH
61882: LD_INT 108
61884: PUSH
61885: LD_INT 112
61887: PUSH
61888: LD_INT 116
61890: PUSH
61891: LD_INT 117
61893: PUSH
61894: LD_INT 118
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: ST_TO_ADDR
61913: GO 64316
61915: LD_INT 8
61917: DOUBLE
61918: EQUAL
61919: IFTRUE 61923
61921: GO 62063
61923: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
61924: LD_ADDR_VAR 0 2
61928: PUSH
61929: LD_INT 2
61931: PUSH
61932: LD_INT 4
61934: PUSH
61935: LD_INT 5
61937: PUSH
61938: LD_INT 6
61940: PUSH
61941: LD_INT 7
61943: PUSH
61944: LD_INT 8
61946: PUSH
61947: LD_INT 11
61949: PUSH
61950: LD_INT 12
61952: PUSH
61953: LD_INT 15
61955: PUSH
61956: LD_INT 16
61958: PUSH
61959: LD_INT 20
61961: PUSH
61962: LD_INT 21
61964: PUSH
61965: LD_INT 22
61967: PUSH
61968: LD_INT 23
61970: PUSH
61971: LD_INT 25
61973: PUSH
61974: LD_INT 26
61976: PUSH
61977: LD_INT 30
61979: PUSH
61980: LD_INT 31
61982: PUSH
61983: LD_INT 32
61985: PUSH
61986: LD_INT 36
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 101
62013: PUSH
62014: LD_INT 102
62016: PUSH
62017: LD_INT 103
62019: PUSH
62020: LD_INT 105
62022: PUSH
62023: LD_INT 106
62025: PUSH
62026: LD_INT 108
62028: PUSH
62029: LD_INT 109
62031: PUSH
62032: LD_INT 112
62034: PUSH
62035: LD_INT 116
62037: PUSH
62038: LD_INT 117
62040: PUSH
62041: LD_INT 118
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: ST_TO_ADDR
62061: GO 64316
62063: LD_INT 9
62065: DOUBLE
62066: EQUAL
62067: IFTRUE 62071
62069: GO 62219
62071: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
62072: LD_ADDR_VAR 0 2
62076: PUSH
62077: LD_INT 2
62079: PUSH
62080: LD_INT 4
62082: PUSH
62083: LD_INT 5
62085: PUSH
62086: LD_INT 6
62088: PUSH
62089: LD_INT 7
62091: PUSH
62092: LD_INT 8
62094: PUSH
62095: LD_INT 11
62097: PUSH
62098: LD_INT 12
62100: PUSH
62101: LD_INT 15
62103: PUSH
62104: LD_INT 16
62106: PUSH
62107: LD_INT 20
62109: PUSH
62110: LD_INT 21
62112: PUSH
62113: LD_INT 22
62115: PUSH
62116: LD_INT 23
62118: PUSH
62119: LD_INT 25
62121: PUSH
62122: LD_INT 26
62124: PUSH
62125: LD_INT 28
62127: PUSH
62128: LD_INT 30
62130: PUSH
62131: LD_INT 31
62133: PUSH
62134: LD_INT 32
62136: PUSH
62137: LD_INT 36
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 101
62165: PUSH
62166: LD_INT 102
62168: PUSH
62169: LD_INT 103
62171: PUSH
62172: LD_INT 105
62174: PUSH
62175: LD_INT 106
62177: PUSH
62178: LD_INT 108
62180: PUSH
62181: LD_INT 109
62183: PUSH
62184: LD_INT 112
62186: PUSH
62187: LD_INT 114
62189: PUSH
62190: LD_INT 116
62192: PUSH
62193: LD_INT 117
62195: PUSH
62196: LD_INT 118
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: ST_TO_ADDR
62217: GO 64316
62219: LD_INT 10
62221: DOUBLE
62222: EQUAL
62223: IFTRUE 62227
62225: GO 62423
62227: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
62228: LD_ADDR_VAR 0 2
62232: PUSH
62233: LD_INT 2
62235: PUSH
62236: LD_INT 4
62238: PUSH
62239: LD_INT 5
62241: PUSH
62242: LD_INT 6
62244: PUSH
62245: LD_INT 7
62247: PUSH
62248: LD_INT 8
62250: PUSH
62251: LD_INT 9
62253: PUSH
62254: LD_INT 10
62256: PUSH
62257: LD_INT 11
62259: PUSH
62260: LD_INT 12
62262: PUSH
62263: LD_INT 13
62265: PUSH
62266: LD_INT 14
62268: PUSH
62269: LD_INT 15
62271: PUSH
62272: LD_INT 16
62274: PUSH
62275: LD_INT 17
62277: PUSH
62278: LD_INT 18
62280: PUSH
62281: LD_INT 19
62283: PUSH
62284: LD_INT 20
62286: PUSH
62287: LD_INT 21
62289: PUSH
62290: LD_INT 22
62292: PUSH
62293: LD_INT 23
62295: PUSH
62296: LD_INT 24
62298: PUSH
62299: LD_INT 25
62301: PUSH
62302: LD_INT 26
62304: PUSH
62305: LD_INT 28
62307: PUSH
62308: LD_INT 30
62310: PUSH
62311: LD_INT 31
62313: PUSH
62314: LD_INT 32
62316: PUSH
62317: LD_INT 36
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 101
62353: PUSH
62354: LD_INT 102
62356: PUSH
62357: LD_INT 103
62359: PUSH
62360: LD_INT 104
62362: PUSH
62363: LD_INT 105
62365: PUSH
62366: LD_INT 106
62368: PUSH
62369: LD_INT 107
62371: PUSH
62372: LD_INT 108
62374: PUSH
62375: LD_INT 109
62377: PUSH
62378: LD_INT 110
62380: PUSH
62381: LD_INT 111
62383: PUSH
62384: LD_INT 112
62386: PUSH
62387: LD_INT 114
62389: PUSH
62390: LD_INT 116
62392: PUSH
62393: LD_INT 117
62395: PUSH
62396: LD_INT 118
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: ST_TO_ADDR
62421: GO 64316
62423: LD_INT 11
62425: DOUBLE
62426: EQUAL
62427: IFTRUE 62431
62429: GO 62635
62431: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
62432: LD_ADDR_VAR 0 2
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: LD_INT 3
62442: PUSH
62443: LD_INT 4
62445: PUSH
62446: LD_INT 5
62448: PUSH
62449: LD_INT 6
62451: PUSH
62452: LD_INT 7
62454: PUSH
62455: LD_INT 8
62457: PUSH
62458: LD_INT 9
62460: PUSH
62461: LD_INT 10
62463: PUSH
62464: LD_INT 11
62466: PUSH
62467: LD_INT 12
62469: PUSH
62470: LD_INT 13
62472: PUSH
62473: LD_INT 14
62475: PUSH
62476: LD_INT 15
62478: PUSH
62479: LD_INT 16
62481: PUSH
62482: LD_INT 17
62484: PUSH
62485: LD_INT 18
62487: PUSH
62488: LD_INT 19
62490: PUSH
62491: LD_INT 20
62493: PUSH
62494: LD_INT 21
62496: PUSH
62497: LD_INT 22
62499: PUSH
62500: LD_INT 23
62502: PUSH
62503: LD_INT 24
62505: PUSH
62506: LD_INT 25
62508: PUSH
62509: LD_INT 26
62511: PUSH
62512: LD_INT 28
62514: PUSH
62515: LD_INT 30
62517: PUSH
62518: LD_INT 31
62520: PUSH
62521: LD_INT 32
62523: PUSH
62524: LD_INT 34
62526: PUSH
62527: LD_INT 36
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 101
62565: PUSH
62566: LD_INT 102
62568: PUSH
62569: LD_INT 103
62571: PUSH
62572: LD_INT 104
62574: PUSH
62575: LD_INT 105
62577: PUSH
62578: LD_INT 106
62580: PUSH
62581: LD_INT 107
62583: PUSH
62584: LD_INT 108
62586: PUSH
62587: LD_INT 109
62589: PUSH
62590: LD_INT 110
62592: PUSH
62593: LD_INT 111
62595: PUSH
62596: LD_INT 112
62598: PUSH
62599: LD_INT 114
62601: PUSH
62602: LD_INT 116
62604: PUSH
62605: LD_INT 117
62607: PUSH
62608: LD_INT 118
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: ST_TO_ADDR
62633: GO 64316
62635: LD_INT 12
62637: DOUBLE
62638: EQUAL
62639: IFTRUE 62643
62641: GO 62863
62643: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
62644: LD_ADDR_VAR 0 2
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: LD_INT 2
62654: PUSH
62655: LD_INT 3
62657: PUSH
62658: LD_INT 4
62660: PUSH
62661: LD_INT 5
62663: PUSH
62664: LD_INT 6
62666: PUSH
62667: LD_INT 7
62669: PUSH
62670: LD_INT 8
62672: PUSH
62673: LD_INT 9
62675: PUSH
62676: LD_INT 10
62678: PUSH
62679: LD_INT 11
62681: PUSH
62682: LD_INT 12
62684: PUSH
62685: LD_INT 13
62687: PUSH
62688: LD_INT 14
62690: PUSH
62691: LD_INT 15
62693: PUSH
62694: LD_INT 16
62696: PUSH
62697: LD_INT 17
62699: PUSH
62700: LD_INT 18
62702: PUSH
62703: LD_INT 19
62705: PUSH
62706: LD_INT 20
62708: PUSH
62709: LD_INT 21
62711: PUSH
62712: LD_INT 22
62714: PUSH
62715: LD_INT 23
62717: PUSH
62718: LD_INT 24
62720: PUSH
62721: LD_INT 25
62723: PUSH
62724: LD_INT 26
62726: PUSH
62727: LD_INT 27
62729: PUSH
62730: LD_INT 28
62732: PUSH
62733: LD_INT 30
62735: PUSH
62736: LD_INT 31
62738: PUSH
62739: LD_INT 32
62741: PUSH
62742: LD_INT 33
62744: PUSH
62745: LD_INT 34
62747: PUSH
62748: LD_INT 36
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 101
62789: PUSH
62790: LD_INT 102
62792: PUSH
62793: LD_INT 103
62795: PUSH
62796: LD_INT 104
62798: PUSH
62799: LD_INT 105
62801: PUSH
62802: LD_INT 106
62804: PUSH
62805: LD_INT 107
62807: PUSH
62808: LD_INT 108
62810: PUSH
62811: LD_INT 109
62813: PUSH
62814: LD_INT 110
62816: PUSH
62817: LD_INT 111
62819: PUSH
62820: LD_INT 112
62822: PUSH
62823: LD_INT 113
62825: PUSH
62826: LD_INT 114
62828: PUSH
62829: LD_INT 116
62831: PUSH
62832: LD_INT 117
62834: PUSH
62835: LD_INT 118
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: ST_TO_ADDR
62861: GO 64316
62863: LD_INT 13
62865: DOUBLE
62866: EQUAL
62867: IFTRUE 62871
62869: GO 63079
62871: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
62872: LD_ADDR_VAR 0 2
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: LD_INT 2
62882: PUSH
62883: LD_INT 3
62885: PUSH
62886: LD_INT 4
62888: PUSH
62889: LD_INT 5
62891: PUSH
62892: LD_INT 8
62894: PUSH
62895: LD_INT 9
62897: PUSH
62898: LD_INT 10
62900: PUSH
62901: LD_INT 11
62903: PUSH
62904: LD_INT 12
62906: PUSH
62907: LD_INT 14
62909: PUSH
62910: LD_INT 15
62912: PUSH
62913: LD_INT 16
62915: PUSH
62916: LD_INT 17
62918: PUSH
62919: LD_INT 18
62921: PUSH
62922: LD_INT 19
62924: PUSH
62925: LD_INT 20
62927: PUSH
62928: LD_INT 21
62930: PUSH
62931: LD_INT 22
62933: PUSH
62934: LD_INT 23
62936: PUSH
62937: LD_INT 24
62939: PUSH
62940: LD_INT 25
62942: PUSH
62943: LD_INT 26
62945: PUSH
62946: LD_INT 27
62948: PUSH
62949: LD_INT 28
62951: PUSH
62952: LD_INT 30
62954: PUSH
62955: LD_INT 31
62957: PUSH
62958: LD_INT 32
62960: PUSH
62961: LD_INT 33
62963: PUSH
62964: LD_INT 34
62966: PUSH
62967: LD_INT 36
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 101
63005: PUSH
63006: LD_INT 102
63008: PUSH
63009: LD_INT 103
63011: PUSH
63012: LD_INT 104
63014: PUSH
63015: LD_INT 105
63017: PUSH
63018: LD_INT 106
63020: PUSH
63021: LD_INT 107
63023: PUSH
63024: LD_INT 108
63026: PUSH
63027: LD_INT 109
63029: PUSH
63030: LD_INT 110
63032: PUSH
63033: LD_INT 111
63035: PUSH
63036: LD_INT 112
63038: PUSH
63039: LD_INT 113
63041: PUSH
63042: LD_INT 114
63044: PUSH
63045: LD_INT 116
63047: PUSH
63048: LD_INT 117
63050: PUSH
63051: LD_INT 118
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: ST_TO_ADDR
63077: GO 64316
63079: LD_INT 14
63081: DOUBLE
63082: EQUAL
63083: IFTRUE 63087
63085: GO 63311
63087: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
63088: LD_ADDR_VAR 0 2
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 2
63098: PUSH
63099: LD_INT 3
63101: PUSH
63102: LD_INT 4
63104: PUSH
63105: LD_INT 5
63107: PUSH
63108: LD_INT 6
63110: PUSH
63111: LD_INT 7
63113: PUSH
63114: LD_INT 8
63116: PUSH
63117: LD_INT 9
63119: PUSH
63120: LD_INT 10
63122: PUSH
63123: LD_INT 11
63125: PUSH
63126: LD_INT 12
63128: PUSH
63129: LD_INT 13
63131: PUSH
63132: LD_INT 14
63134: PUSH
63135: LD_INT 15
63137: PUSH
63138: LD_INT 16
63140: PUSH
63141: LD_INT 17
63143: PUSH
63144: LD_INT 18
63146: PUSH
63147: LD_INT 19
63149: PUSH
63150: LD_INT 20
63152: PUSH
63153: LD_INT 21
63155: PUSH
63156: LD_INT 22
63158: PUSH
63159: LD_INT 23
63161: PUSH
63162: LD_INT 24
63164: PUSH
63165: LD_INT 25
63167: PUSH
63168: LD_INT 26
63170: PUSH
63171: LD_INT 27
63173: PUSH
63174: LD_INT 28
63176: PUSH
63177: LD_INT 29
63179: PUSH
63180: LD_INT 30
63182: PUSH
63183: LD_INT 31
63185: PUSH
63186: LD_INT 32
63188: PUSH
63189: LD_INT 33
63191: PUSH
63192: LD_INT 34
63194: PUSH
63195: LD_INT 36
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 101
63237: PUSH
63238: LD_INT 102
63240: PUSH
63241: LD_INT 103
63243: PUSH
63244: LD_INT 104
63246: PUSH
63247: LD_INT 105
63249: PUSH
63250: LD_INT 106
63252: PUSH
63253: LD_INT 107
63255: PUSH
63256: LD_INT 108
63258: PUSH
63259: LD_INT 109
63261: PUSH
63262: LD_INT 110
63264: PUSH
63265: LD_INT 111
63267: PUSH
63268: LD_INT 112
63270: PUSH
63271: LD_INT 113
63273: PUSH
63274: LD_INT 114
63276: PUSH
63277: LD_INT 116
63279: PUSH
63280: LD_INT 117
63282: PUSH
63283: LD_INT 118
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: ST_TO_ADDR
63309: GO 64316
63311: LD_INT 15
63313: DOUBLE
63314: EQUAL
63315: IFTRUE 63319
63317: GO 63543
63319: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
63320: LD_ADDR_VAR 0 2
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: LD_INT 2
63330: PUSH
63331: LD_INT 3
63333: PUSH
63334: LD_INT 4
63336: PUSH
63337: LD_INT 5
63339: PUSH
63340: LD_INT 6
63342: PUSH
63343: LD_INT 7
63345: PUSH
63346: LD_INT 8
63348: PUSH
63349: LD_INT 9
63351: PUSH
63352: LD_INT 10
63354: PUSH
63355: LD_INT 11
63357: PUSH
63358: LD_INT 12
63360: PUSH
63361: LD_INT 13
63363: PUSH
63364: LD_INT 14
63366: PUSH
63367: LD_INT 15
63369: PUSH
63370: LD_INT 16
63372: PUSH
63373: LD_INT 17
63375: PUSH
63376: LD_INT 18
63378: PUSH
63379: LD_INT 19
63381: PUSH
63382: LD_INT 20
63384: PUSH
63385: LD_INT 21
63387: PUSH
63388: LD_INT 22
63390: PUSH
63391: LD_INT 23
63393: PUSH
63394: LD_INT 24
63396: PUSH
63397: LD_INT 25
63399: PUSH
63400: LD_INT 26
63402: PUSH
63403: LD_INT 27
63405: PUSH
63406: LD_INT 28
63408: PUSH
63409: LD_INT 29
63411: PUSH
63412: LD_INT 30
63414: PUSH
63415: LD_INT 31
63417: PUSH
63418: LD_INT 32
63420: PUSH
63421: LD_INT 33
63423: PUSH
63424: LD_INT 34
63426: PUSH
63427: LD_INT 36
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 101
63469: PUSH
63470: LD_INT 102
63472: PUSH
63473: LD_INT 103
63475: PUSH
63476: LD_INT 104
63478: PUSH
63479: LD_INT 105
63481: PUSH
63482: LD_INT 106
63484: PUSH
63485: LD_INT 107
63487: PUSH
63488: LD_INT 108
63490: PUSH
63491: LD_INT 109
63493: PUSH
63494: LD_INT 110
63496: PUSH
63497: LD_INT 111
63499: PUSH
63500: LD_INT 112
63502: PUSH
63503: LD_INT 113
63505: PUSH
63506: LD_INT 114
63508: PUSH
63509: LD_INT 116
63511: PUSH
63512: LD_INT 117
63514: PUSH
63515: LD_INT 118
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: ST_TO_ADDR
63541: GO 64316
63543: LD_INT 16
63545: DOUBLE
63546: EQUAL
63547: IFTRUE 63551
63549: GO 63687
63551: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
63552: LD_ADDR_VAR 0 2
63556: PUSH
63557: LD_INT 2
63559: PUSH
63560: LD_INT 4
63562: PUSH
63563: LD_INT 5
63565: PUSH
63566: LD_INT 7
63568: PUSH
63569: LD_INT 11
63571: PUSH
63572: LD_INT 12
63574: PUSH
63575: LD_INT 15
63577: PUSH
63578: LD_INT 16
63580: PUSH
63581: LD_INT 20
63583: PUSH
63584: LD_INT 21
63586: PUSH
63587: LD_INT 22
63589: PUSH
63590: LD_INT 23
63592: PUSH
63593: LD_INT 25
63595: PUSH
63596: LD_INT 26
63598: PUSH
63599: LD_INT 30
63601: PUSH
63602: LD_INT 31
63604: PUSH
63605: LD_INT 32
63607: PUSH
63608: LD_INT 33
63610: PUSH
63611: LD_INT 34
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 101
63637: PUSH
63638: LD_INT 102
63640: PUSH
63641: LD_INT 103
63643: PUSH
63644: LD_INT 106
63646: PUSH
63647: LD_INT 108
63649: PUSH
63650: LD_INT 112
63652: PUSH
63653: LD_INT 113
63655: PUSH
63656: LD_INT 114
63658: PUSH
63659: LD_INT 116
63661: PUSH
63662: LD_INT 117
63664: PUSH
63665: LD_INT 118
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: ST_TO_ADDR
63685: GO 64316
63687: LD_INT 17
63689: DOUBLE
63690: EQUAL
63691: IFTRUE 63695
63693: GO 63919
63695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
63696: LD_ADDR_VAR 0 2
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: LD_INT 2
63706: PUSH
63707: LD_INT 3
63709: PUSH
63710: LD_INT 4
63712: PUSH
63713: LD_INT 5
63715: PUSH
63716: LD_INT 6
63718: PUSH
63719: LD_INT 7
63721: PUSH
63722: LD_INT 8
63724: PUSH
63725: LD_INT 9
63727: PUSH
63728: LD_INT 10
63730: PUSH
63731: LD_INT 11
63733: PUSH
63734: LD_INT 12
63736: PUSH
63737: LD_INT 13
63739: PUSH
63740: LD_INT 14
63742: PUSH
63743: LD_INT 15
63745: PUSH
63746: LD_INT 16
63748: PUSH
63749: LD_INT 17
63751: PUSH
63752: LD_INT 18
63754: PUSH
63755: LD_INT 19
63757: PUSH
63758: LD_INT 20
63760: PUSH
63761: LD_INT 21
63763: PUSH
63764: LD_INT 22
63766: PUSH
63767: LD_INT 23
63769: PUSH
63770: LD_INT 24
63772: PUSH
63773: LD_INT 25
63775: PUSH
63776: LD_INT 26
63778: PUSH
63779: LD_INT 27
63781: PUSH
63782: LD_INT 28
63784: PUSH
63785: LD_INT 29
63787: PUSH
63788: LD_INT 30
63790: PUSH
63791: LD_INT 31
63793: PUSH
63794: LD_INT 32
63796: PUSH
63797: LD_INT 33
63799: PUSH
63800: LD_INT 34
63802: PUSH
63803: LD_INT 36
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 101
63845: PUSH
63846: LD_INT 102
63848: PUSH
63849: LD_INT 103
63851: PUSH
63852: LD_INT 104
63854: PUSH
63855: LD_INT 105
63857: PUSH
63858: LD_INT 106
63860: PUSH
63861: LD_INT 107
63863: PUSH
63864: LD_INT 108
63866: PUSH
63867: LD_INT 109
63869: PUSH
63870: LD_INT 110
63872: PUSH
63873: LD_INT 111
63875: PUSH
63876: LD_INT 112
63878: PUSH
63879: LD_INT 113
63881: PUSH
63882: LD_INT 114
63884: PUSH
63885: LD_INT 116
63887: PUSH
63888: LD_INT 117
63890: PUSH
63891: LD_INT 118
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: ST_TO_ADDR
63917: GO 64316
63919: LD_INT 18
63921: DOUBLE
63922: EQUAL
63923: IFTRUE 63927
63925: GO 64075
63927: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
63928: LD_ADDR_VAR 0 2
63932: PUSH
63933: LD_INT 2
63935: PUSH
63936: LD_INT 4
63938: PUSH
63939: LD_INT 5
63941: PUSH
63942: LD_INT 7
63944: PUSH
63945: LD_INT 11
63947: PUSH
63948: LD_INT 12
63950: PUSH
63951: LD_INT 15
63953: PUSH
63954: LD_INT 16
63956: PUSH
63957: LD_INT 20
63959: PUSH
63960: LD_INT 21
63962: PUSH
63963: LD_INT 22
63965: PUSH
63966: LD_INT 23
63968: PUSH
63969: LD_INT 25
63971: PUSH
63972: LD_INT 26
63974: PUSH
63975: LD_INT 30
63977: PUSH
63978: LD_INT 31
63980: PUSH
63981: LD_INT 32
63983: PUSH
63984: LD_INT 33
63986: PUSH
63987: LD_INT 34
63989: PUSH
63990: LD_INT 35
63992: PUSH
63993: LD_INT 36
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 101
64021: PUSH
64022: LD_INT 102
64024: PUSH
64025: LD_INT 103
64027: PUSH
64028: LD_INT 106
64030: PUSH
64031: LD_INT 108
64033: PUSH
64034: LD_INT 112
64036: PUSH
64037: LD_INT 113
64039: PUSH
64040: LD_INT 114
64042: PUSH
64043: LD_INT 115
64045: PUSH
64046: LD_INT 116
64048: PUSH
64049: LD_INT 117
64051: PUSH
64052: LD_INT 118
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: ST_TO_ADDR
64073: GO 64316
64075: LD_INT 19
64077: DOUBLE
64078: EQUAL
64079: IFTRUE 64083
64081: GO 64315
64083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
64084: LD_ADDR_VAR 0 2
64088: PUSH
64089: LD_INT 1
64091: PUSH
64092: LD_INT 2
64094: PUSH
64095: LD_INT 3
64097: PUSH
64098: LD_INT 4
64100: PUSH
64101: LD_INT 5
64103: PUSH
64104: LD_INT 6
64106: PUSH
64107: LD_INT 7
64109: PUSH
64110: LD_INT 8
64112: PUSH
64113: LD_INT 9
64115: PUSH
64116: LD_INT 10
64118: PUSH
64119: LD_INT 11
64121: PUSH
64122: LD_INT 12
64124: PUSH
64125: LD_INT 13
64127: PUSH
64128: LD_INT 14
64130: PUSH
64131: LD_INT 15
64133: PUSH
64134: LD_INT 16
64136: PUSH
64137: LD_INT 17
64139: PUSH
64140: LD_INT 18
64142: PUSH
64143: LD_INT 19
64145: PUSH
64146: LD_INT 20
64148: PUSH
64149: LD_INT 21
64151: PUSH
64152: LD_INT 22
64154: PUSH
64155: LD_INT 23
64157: PUSH
64158: LD_INT 24
64160: PUSH
64161: LD_INT 25
64163: PUSH
64164: LD_INT 26
64166: PUSH
64167: LD_INT 27
64169: PUSH
64170: LD_INT 28
64172: PUSH
64173: LD_INT 29
64175: PUSH
64176: LD_INT 30
64178: PUSH
64179: LD_INT 31
64181: PUSH
64182: LD_INT 32
64184: PUSH
64185: LD_INT 33
64187: PUSH
64188: LD_INT 34
64190: PUSH
64191: LD_INT 35
64193: PUSH
64194: LD_INT 36
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 101
64237: PUSH
64238: LD_INT 102
64240: PUSH
64241: LD_INT 103
64243: PUSH
64244: LD_INT 104
64246: PUSH
64247: LD_INT 105
64249: PUSH
64250: LD_INT 106
64252: PUSH
64253: LD_INT 107
64255: PUSH
64256: LD_INT 108
64258: PUSH
64259: LD_INT 109
64261: PUSH
64262: LD_INT 110
64264: PUSH
64265: LD_INT 111
64267: PUSH
64268: LD_INT 112
64270: PUSH
64271: LD_INT 113
64273: PUSH
64274: LD_INT 114
64276: PUSH
64277: LD_INT 115
64279: PUSH
64280: LD_INT 116
64282: PUSH
64283: LD_INT 117
64285: PUSH
64286: LD_INT 118
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: ST_TO_ADDR
64313: GO 64316
64315: POP
// end else
64316: GO 64547
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
64318: LD_ADDR_VAR 0 2
64322: PUSH
64323: LD_INT 1
64325: PUSH
64326: LD_INT 2
64328: PUSH
64329: LD_INT 3
64331: PUSH
64332: LD_INT 4
64334: PUSH
64335: LD_INT 5
64337: PUSH
64338: LD_INT 6
64340: PUSH
64341: LD_INT 7
64343: PUSH
64344: LD_INT 8
64346: PUSH
64347: LD_INT 9
64349: PUSH
64350: LD_INT 10
64352: PUSH
64353: LD_INT 11
64355: PUSH
64356: LD_INT 12
64358: PUSH
64359: LD_INT 13
64361: PUSH
64362: LD_INT 14
64364: PUSH
64365: LD_INT 15
64367: PUSH
64368: LD_INT 16
64370: PUSH
64371: LD_INT 17
64373: PUSH
64374: LD_INT 18
64376: PUSH
64377: LD_INT 19
64379: PUSH
64380: LD_INT 20
64382: PUSH
64383: LD_INT 21
64385: PUSH
64386: LD_INT 22
64388: PUSH
64389: LD_INT 23
64391: PUSH
64392: LD_INT 24
64394: PUSH
64395: LD_INT 25
64397: PUSH
64398: LD_INT 26
64400: PUSH
64401: LD_INT 27
64403: PUSH
64404: LD_INT 28
64406: PUSH
64407: LD_INT 29
64409: PUSH
64410: LD_INT 30
64412: PUSH
64413: LD_INT 31
64415: PUSH
64416: LD_INT 32
64418: PUSH
64419: LD_INT 33
64421: PUSH
64422: LD_INT 34
64424: PUSH
64425: LD_INT 35
64427: PUSH
64428: LD_INT 36
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 101
64471: PUSH
64472: LD_INT 102
64474: PUSH
64475: LD_INT 103
64477: PUSH
64478: LD_INT 104
64480: PUSH
64481: LD_INT 105
64483: PUSH
64484: LD_INT 106
64486: PUSH
64487: LD_INT 107
64489: PUSH
64490: LD_INT 108
64492: PUSH
64493: LD_INT 109
64495: PUSH
64496: LD_INT 110
64498: PUSH
64499: LD_INT 111
64501: PUSH
64502: LD_INT 112
64504: PUSH
64505: LD_INT 113
64507: PUSH
64508: LD_INT 114
64510: PUSH
64511: LD_INT 115
64513: PUSH
64514: LD_INT 116
64516: PUSH
64517: LD_INT 117
64519: PUSH
64520: LD_INT 118
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: ST_TO_ADDR
// if result then
64547: LD_VAR 0 2
64551: IFFALSE 65337
// begin normal :=  ;
64553: LD_ADDR_VAR 0 5
64557: PUSH
64558: LD_STRING 
64560: ST_TO_ADDR
// hardcore :=  ;
64561: LD_ADDR_VAR 0 6
64565: PUSH
64566: LD_STRING 
64568: ST_TO_ADDR
// active :=  ;
64569: LD_ADDR_VAR 0 7
64573: PUSH
64574: LD_STRING 
64576: ST_TO_ADDR
// for i = 1 to normalCounter do
64577: LD_ADDR_VAR 0 8
64581: PUSH
64582: DOUBLE
64583: LD_INT 1
64585: DEC
64586: ST_TO_ADDR
64587: LD_EXP 39
64591: PUSH
64592: FOR_TO
64593: IFFALSE 64694
// begin tmp := 0 ;
64595: LD_ADDR_VAR 0 3
64599: PUSH
64600: LD_STRING 0
64602: ST_TO_ADDR
// if result [ 1 ] then
64603: LD_VAR 0 2
64607: PUSH
64608: LD_INT 1
64610: ARRAY
64611: IFFALSE 64676
// if result [ 1 ] [ 1 ] = i then
64613: LD_VAR 0 2
64617: PUSH
64618: LD_INT 1
64620: ARRAY
64621: PUSH
64622: LD_INT 1
64624: ARRAY
64625: PUSH
64626: LD_VAR 0 8
64630: EQUAL
64631: IFFALSE 64676
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
64633: LD_ADDR_VAR 0 2
64637: PUSH
64638: LD_VAR 0 2
64642: PPUSH
64643: LD_INT 1
64645: PPUSH
64646: LD_VAR 0 2
64650: PUSH
64651: LD_INT 1
64653: ARRAY
64654: PPUSH
64655: LD_INT 1
64657: PPUSH
64658: CALL_OW 3
64662: PPUSH
64663: CALL_OW 1
64667: ST_TO_ADDR
// tmp := 1 ;
64668: LD_ADDR_VAR 0 3
64672: PUSH
64673: LD_STRING 1
64675: ST_TO_ADDR
// end ; normal := normal & tmp ;
64676: LD_ADDR_VAR 0 5
64680: PUSH
64681: LD_VAR 0 5
64685: PUSH
64686: LD_VAR 0 3
64690: STR
64691: ST_TO_ADDR
// end ;
64692: GO 64592
64694: POP
64695: POP
// for i = 1 to hardcoreCounter do
64696: LD_ADDR_VAR 0 8
64700: PUSH
64701: DOUBLE
64702: LD_INT 1
64704: DEC
64705: ST_TO_ADDR
64706: LD_EXP 40
64710: PUSH
64711: FOR_TO
64712: IFFALSE 64817
// begin tmp := 0 ;
64714: LD_ADDR_VAR 0 3
64718: PUSH
64719: LD_STRING 0
64721: ST_TO_ADDR
// if result [ 2 ] then
64722: LD_VAR 0 2
64726: PUSH
64727: LD_INT 2
64729: ARRAY
64730: IFFALSE 64799
// if result [ 2 ] [ 1 ] = 100 + i then
64732: LD_VAR 0 2
64736: PUSH
64737: LD_INT 2
64739: ARRAY
64740: PUSH
64741: LD_INT 1
64743: ARRAY
64744: PUSH
64745: LD_INT 100
64747: PUSH
64748: LD_VAR 0 8
64752: PLUS
64753: EQUAL
64754: IFFALSE 64799
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
64756: LD_ADDR_VAR 0 2
64760: PUSH
64761: LD_VAR 0 2
64765: PPUSH
64766: LD_INT 2
64768: PPUSH
64769: LD_VAR 0 2
64773: PUSH
64774: LD_INT 2
64776: ARRAY
64777: PPUSH
64778: LD_INT 1
64780: PPUSH
64781: CALL_OW 3
64785: PPUSH
64786: CALL_OW 1
64790: ST_TO_ADDR
// tmp := 1 ;
64791: LD_ADDR_VAR 0 3
64795: PUSH
64796: LD_STRING 1
64798: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
64799: LD_ADDR_VAR 0 6
64803: PUSH
64804: LD_VAR 0 6
64808: PUSH
64809: LD_VAR 0 3
64813: STR
64814: ST_TO_ADDR
// end ;
64815: GO 64711
64817: POP
64818: POP
// if isGameLoad then
64819: LD_VAR 0 1
64823: IFFALSE 65298
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
64825: LD_ADDR_VAR 0 4
64829: PUSH
64830: LD_EXP 43
64834: PUSH
64835: LD_EXP 42
64839: PUSH
64840: LD_EXP 44
64844: PUSH
64845: LD_EXP 41
64849: PUSH
64850: LD_EXP 45
64854: PUSH
64855: LD_EXP 46
64859: PUSH
64860: LD_EXP 47
64864: PUSH
64865: LD_EXP 48
64869: PUSH
64870: LD_EXP 49
64874: PUSH
64875: LD_EXP 50
64879: PUSH
64880: LD_EXP 51
64884: PUSH
64885: LD_EXP 52
64889: PUSH
64890: LD_EXP 53
64894: PUSH
64895: LD_EXP 54
64899: PUSH
64900: LD_EXP 62
64904: PUSH
64905: LD_EXP 63
64909: PUSH
64910: LD_EXP 64
64914: PUSH
64915: LD_EXP 65
64919: PUSH
64920: LD_EXP 67
64924: PUSH
64925: LD_EXP 68
64929: PUSH
64930: LD_EXP 69
64934: PUSH
64935: LD_EXP 72
64939: PUSH
64940: LD_EXP 74
64944: PUSH
64945: LD_EXP 75
64949: PUSH
64950: LD_EXP 76
64954: PUSH
64955: LD_EXP 78
64959: PUSH
64960: LD_EXP 79
64964: PUSH
64965: LD_EXP 82
64969: PUSH
64970: LD_EXP 83
64974: PUSH
64975: LD_EXP 84
64979: PUSH
64980: LD_EXP 85
64984: PUSH
64985: LD_EXP 86
64989: PUSH
64990: LD_EXP 87
64994: PUSH
64995: LD_EXP 88
64999: PUSH
65000: LD_EXP 89
65004: PUSH
65005: LD_EXP 90
65009: PUSH
65010: LD_EXP 55
65014: PUSH
65015: LD_EXP 56
65019: PUSH
65020: LD_EXP 59
65024: PUSH
65025: LD_EXP 60
65029: PUSH
65030: LD_EXP 61
65034: PUSH
65035: LD_EXP 57
65039: PUSH
65040: LD_EXP 58
65044: PUSH
65045: LD_EXP 66
65049: PUSH
65050: LD_EXP 70
65054: PUSH
65055: LD_EXP 71
65059: PUSH
65060: LD_EXP 73
65064: PUSH
65065: LD_EXP 77
65069: PUSH
65070: LD_EXP 80
65074: PUSH
65075: LD_EXP 81
65079: PUSH
65080: LD_EXP 91
65084: PUSH
65085: LD_EXP 92
65089: PUSH
65090: LD_EXP 93
65094: PUSH
65095: LD_EXP 94
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: ST_TO_ADDR
// tmp :=  ;
65156: LD_ADDR_VAR 0 3
65160: PUSH
65161: LD_STRING 
65163: ST_TO_ADDR
// for i = 1 to normalCounter do
65164: LD_ADDR_VAR 0 8
65168: PUSH
65169: DOUBLE
65170: LD_INT 1
65172: DEC
65173: ST_TO_ADDR
65174: LD_EXP 39
65178: PUSH
65179: FOR_TO
65180: IFFALSE 65216
// begin if flags [ i ] then
65182: LD_VAR 0 4
65186: PUSH
65187: LD_VAR 0 8
65191: ARRAY
65192: IFFALSE 65214
// tmp := tmp & i & ; ;
65194: LD_ADDR_VAR 0 3
65198: PUSH
65199: LD_VAR 0 3
65203: PUSH
65204: LD_VAR 0 8
65208: STR
65209: PUSH
65210: LD_STRING ;
65212: STR
65213: ST_TO_ADDR
// end ;
65214: GO 65179
65216: POP
65217: POP
// for i = 1 to hardcoreCounter do
65218: LD_ADDR_VAR 0 8
65222: PUSH
65223: DOUBLE
65224: LD_INT 1
65226: DEC
65227: ST_TO_ADDR
65228: LD_EXP 40
65232: PUSH
65233: FOR_TO
65234: IFFALSE 65280
// begin if flags [ normalCounter + i ] then
65236: LD_VAR 0 4
65240: PUSH
65241: LD_EXP 39
65245: PUSH
65246: LD_VAR 0 8
65250: PLUS
65251: ARRAY
65252: IFFALSE 65278
// tmp := tmp & ( 100 + i ) & ; ;
65254: LD_ADDR_VAR 0 3
65258: PUSH
65259: LD_VAR 0 3
65263: PUSH
65264: LD_INT 100
65266: PUSH
65267: LD_VAR 0 8
65271: PLUS
65272: STR
65273: PUSH
65274: LD_STRING ;
65276: STR
65277: ST_TO_ADDR
// end ;
65278: GO 65233
65280: POP
65281: POP
// if tmp then
65282: LD_VAR 0 3
65286: IFFALSE 65298
// active := tmp ;
65288: LD_ADDR_VAR 0 7
65292: PUSH
65293: LD_VAR 0 3
65297: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
65298: LD_STRING getStreamItemsFromMission("
65300: PUSH
65301: LD_VAR 0 5
65305: STR
65306: PUSH
65307: LD_STRING ","
65309: STR
65310: PUSH
65311: LD_VAR 0 6
65315: STR
65316: PUSH
65317: LD_STRING ","
65319: STR
65320: PUSH
65321: LD_VAR 0 7
65325: STR
65326: PUSH
65327: LD_STRING ")
65329: STR
65330: PPUSH
65331: CALL_OW 559
// end else
65335: GO 65344
// ToLua ( getStreamItemsFromMission("","","") ) ;
65337: LD_STRING getStreamItemsFromMission("","","")
65339: PPUSH
65340: CALL_OW 559
// end ;
65344: LD_VAR 0 2
65348: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
65349: LD_EXP 38
65353: IFFALSE 65361
65355: PUSH
65356: LD_EXP 43
65360: AND
65361: IFFALSE 65485
65363: GO 65365
65365: DISABLE
65366: LD_INT 0
65368: PPUSH
65369: PPUSH
// begin enable ;
65370: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
65371: LD_ADDR_VAR 0 2
65375: PUSH
65376: LD_INT 22
65378: PUSH
65379: LD_OWVAR 2
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 2
65390: PUSH
65391: LD_INT 34
65393: PUSH
65394: LD_INT 7
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 34
65403: PUSH
65404: LD_INT 45
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 34
65413: PUSH
65414: LD_INT 28
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 34
65423: PUSH
65424: LD_INT 47
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PPUSH
65442: CALL_OW 69
65446: ST_TO_ADDR
// if not tmp then
65447: LD_VAR 0 2
65451: NOT
65452: IFFALSE 65456
// exit ;
65454: GO 65485
// for i in tmp do
65456: LD_ADDR_VAR 0 1
65460: PUSH
65461: LD_VAR 0 2
65465: PUSH
65466: FOR_IN
65467: IFFALSE 65483
// begin SetLives ( i , 0 ) ;
65469: LD_VAR 0 1
65473: PPUSH
65474: LD_INT 0
65476: PPUSH
65477: CALL_OW 234
// end ;
65481: GO 65466
65483: POP
65484: POP
// end ;
65485: PPOPN 2
65487: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
65488: LD_EXP 38
65492: IFFALSE 65500
65494: PUSH
65495: LD_EXP 44
65499: AND
65500: IFFALSE 65584
65502: GO 65504
65504: DISABLE
65505: LD_INT 0
65507: PPUSH
65508: PPUSH
// begin enable ;
65509: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
65510: LD_ADDR_VAR 0 2
65514: PUSH
65515: LD_INT 22
65517: PUSH
65518: LD_OWVAR 2
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 32
65529: PUSH
65530: LD_INT 3
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PPUSH
65541: CALL_OW 69
65545: ST_TO_ADDR
// if not tmp then
65546: LD_VAR 0 2
65550: NOT
65551: IFFALSE 65555
// exit ;
65553: GO 65584
// for i in tmp do
65555: LD_ADDR_VAR 0 1
65559: PUSH
65560: LD_VAR 0 2
65564: PUSH
65565: FOR_IN
65566: IFFALSE 65582
// begin SetLives ( i , 0 ) ;
65568: LD_VAR 0 1
65572: PPUSH
65573: LD_INT 0
65575: PPUSH
65576: CALL_OW 234
// end ;
65580: GO 65565
65582: POP
65583: POP
// end ;
65584: PPOPN 2
65586: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
65587: LD_EXP 38
65591: IFFALSE 65599
65593: PUSH
65594: LD_EXP 41
65598: AND
65599: IFFALSE 65692
65601: GO 65603
65603: DISABLE
65604: LD_INT 0
65606: PPUSH
// begin enable ;
65607: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
65608: LD_ADDR_VAR 0 1
65612: PUSH
65613: LD_INT 22
65615: PUSH
65616: LD_OWVAR 2
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 2
65627: PUSH
65628: LD_INT 25
65630: PUSH
65631: LD_INT 5
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 25
65640: PUSH
65641: LD_INT 9
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 25
65650: PUSH
65651: LD_INT 8
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PPUSH
65668: CALL_OW 69
65672: PUSH
65673: FOR_IN
65674: IFFALSE 65690
// begin SetClass ( i , 1 ) ;
65676: LD_VAR 0 1
65680: PPUSH
65681: LD_INT 1
65683: PPUSH
65684: CALL_OW 336
// end ;
65688: GO 65673
65690: POP
65691: POP
// end ;
65692: PPOPN 1
65694: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
65695: LD_EXP 38
65699: IFFALSE 65707
65701: PUSH
65702: LD_EXP 42
65706: AND
65707: IFFALSE 65719
65709: PUSH
65710: LD_OWVAR 65
65714: PUSH
65715: LD_INT 7
65717: LESS
65718: AND
65719: IFFALSE 65733
65721: GO 65723
65723: DISABLE
// begin enable ;
65724: ENABLE
// game_speed := 7 ;
65725: LD_ADDR_OWVAR 65
65729: PUSH
65730: LD_INT 7
65732: ST_TO_ADDR
// end ;
65733: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
65734: LD_EXP 38
65738: IFFALSE 65746
65740: PUSH
65741: LD_EXP 45
65745: AND
65746: IFFALSE 65948
65748: GO 65750
65750: DISABLE
65751: LD_INT 0
65753: PPUSH
65754: PPUSH
65755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65756: LD_ADDR_VAR 0 3
65760: PUSH
65761: LD_INT 81
65763: PUSH
65764: LD_OWVAR 2
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 21
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PPUSH
65787: CALL_OW 69
65791: ST_TO_ADDR
// if not tmp then
65792: LD_VAR 0 3
65796: NOT
65797: IFFALSE 65801
// exit ;
65799: GO 65948
// if tmp > 5 then
65801: LD_VAR 0 3
65805: PUSH
65806: LD_INT 5
65808: GREATER
65809: IFFALSE 65821
// k := 5 else
65811: LD_ADDR_VAR 0 2
65815: PUSH
65816: LD_INT 5
65818: ST_TO_ADDR
65819: GO 65831
// k := tmp ;
65821: LD_ADDR_VAR 0 2
65825: PUSH
65826: LD_VAR 0 3
65830: ST_TO_ADDR
// for i := 1 to k do
65831: LD_ADDR_VAR 0 1
65835: PUSH
65836: DOUBLE
65837: LD_INT 1
65839: DEC
65840: ST_TO_ADDR
65841: LD_VAR 0 2
65845: PUSH
65846: FOR_TO
65847: IFFALSE 65946
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
65849: LD_VAR 0 3
65853: PUSH
65854: LD_VAR 0 1
65858: ARRAY
65859: PPUSH
65860: LD_VAR 0 1
65864: PUSH
65865: LD_INT 4
65867: MOD
65868: PUSH
65869: LD_INT 1
65871: PLUS
65872: PPUSH
65873: CALL_OW 259
65877: PUSH
65878: LD_INT 10
65880: LESS
65881: IFFALSE 65944
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
65883: LD_VAR 0 3
65887: PUSH
65888: LD_VAR 0 1
65892: ARRAY
65893: PPUSH
65894: LD_VAR 0 1
65898: PUSH
65899: LD_INT 4
65901: MOD
65902: PUSH
65903: LD_INT 1
65905: PLUS
65906: PPUSH
65907: LD_VAR 0 3
65911: PUSH
65912: LD_VAR 0 1
65916: ARRAY
65917: PPUSH
65918: LD_VAR 0 1
65922: PUSH
65923: LD_INT 4
65925: MOD
65926: PUSH
65927: LD_INT 1
65929: PLUS
65930: PPUSH
65931: CALL_OW 259
65935: PUSH
65936: LD_INT 1
65938: PLUS
65939: PPUSH
65940: CALL_OW 237
65944: GO 65846
65946: POP
65947: POP
// end ;
65948: PPOPN 3
65950: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
65951: LD_EXP 38
65955: IFFALSE 65963
65957: PUSH
65958: LD_EXP 46
65962: AND
65963: IFFALSE 65983
65965: GO 65967
65967: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
65968: LD_INT 4
65970: PPUSH
65971: LD_OWVAR 2
65975: PPUSH
65976: LD_INT 0
65978: PPUSH
65979: CALL_OW 324
65983: END
// every 0 0$1 trigger StreamModeActive and sShovel do
65984: LD_EXP 38
65988: IFFALSE 65996
65990: PUSH
65991: LD_EXP 75
65995: AND
65996: IFFALSE 66016
65998: GO 66000
66000: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
66001: LD_INT 19
66003: PPUSH
66004: LD_OWVAR 2
66008: PPUSH
66009: LD_INT 0
66011: PPUSH
66012: CALL_OW 324
66016: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
66017: LD_EXP 38
66021: IFFALSE 66029
66023: PUSH
66024: LD_EXP 47
66028: AND
66029: IFFALSE 66131
66031: GO 66033
66033: DISABLE
66034: LD_INT 0
66036: PPUSH
66037: PPUSH
// begin enable ;
66038: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
66039: LD_ADDR_VAR 0 2
66043: PUSH
66044: LD_INT 22
66046: PUSH
66047: LD_OWVAR 2
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 2
66058: PUSH
66059: LD_INT 34
66061: PUSH
66062: LD_INT 11
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 34
66071: PUSH
66072: LD_INT 30
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: LIST
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PPUSH
66088: CALL_OW 69
66092: ST_TO_ADDR
// if not tmp then
66093: LD_VAR 0 2
66097: NOT
66098: IFFALSE 66102
// exit ;
66100: GO 66131
// for i in tmp do
66102: LD_ADDR_VAR 0 1
66106: PUSH
66107: LD_VAR 0 2
66111: PUSH
66112: FOR_IN
66113: IFFALSE 66129
// begin SetLives ( i , 0 ) ;
66115: LD_VAR 0 1
66119: PPUSH
66120: LD_INT 0
66122: PPUSH
66123: CALL_OW 234
// end ;
66127: GO 66112
66129: POP
66130: POP
// end ;
66131: PPOPN 2
66133: END
// every 0 0$1 trigger StreamModeActive and sBunker do
66134: LD_EXP 38
66138: IFFALSE 66146
66140: PUSH
66141: LD_EXP 48
66145: AND
66146: IFFALSE 66166
66148: GO 66150
66150: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
66151: LD_INT 32
66153: PPUSH
66154: LD_OWVAR 2
66158: PPUSH
66159: LD_INT 0
66161: PPUSH
66162: CALL_OW 324
66166: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
66167: LD_EXP 38
66171: IFFALSE 66179
66173: PUSH
66174: LD_EXP 49
66178: AND
66179: IFFALSE 66362
66181: GO 66183
66183: DISABLE
66184: LD_INT 0
66186: PPUSH
66187: PPUSH
66188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
66189: LD_ADDR_VAR 0 2
66193: PUSH
66194: LD_INT 22
66196: PUSH
66197: LD_OWVAR 2
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 33
66208: PUSH
66209: LD_INT 3
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PPUSH
66220: CALL_OW 69
66224: ST_TO_ADDR
// if not tmp then
66225: LD_VAR 0 2
66229: NOT
66230: IFFALSE 66234
// exit ;
66232: GO 66362
// side := 0 ;
66234: LD_ADDR_VAR 0 3
66238: PUSH
66239: LD_INT 0
66241: ST_TO_ADDR
// for i := 1 to 8 do
66242: LD_ADDR_VAR 0 1
66246: PUSH
66247: DOUBLE
66248: LD_INT 1
66250: DEC
66251: ST_TO_ADDR
66252: LD_INT 8
66254: PUSH
66255: FOR_TO
66256: IFFALSE 66306
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
66258: LD_OWVAR 2
66262: PUSH
66263: LD_VAR 0 1
66267: NONEQUAL
66268: IFFALSE 66290
66270: PUSH
66271: LD_OWVAR 2
66275: PPUSH
66276: LD_VAR 0 1
66280: PPUSH
66281: CALL_OW 81
66285: PUSH
66286: LD_INT 2
66288: EQUAL
66289: AND
66290: IFFALSE 66304
// begin side := i ;
66292: LD_ADDR_VAR 0 3
66296: PUSH
66297: LD_VAR 0 1
66301: ST_TO_ADDR
// break ;
66302: GO 66306
// end ;
66304: GO 66255
66306: POP
66307: POP
// if not side then
66308: LD_VAR 0 3
66312: NOT
66313: IFFALSE 66317
// exit ;
66315: GO 66362
// for i := 1 to tmp do
66317: LD_ADDR_VAR 0 1
66321: PUSH
66322: DOUBLE
66323: LD_INT 1
66325: DEC
66326: ST_TO_ADDR
66327: LD_VAR 0 2
66331: PUSH
66332: FOR_TO
66333: IFFALSE 66360
// if Prob ( 60 ) then
66335: LD_INT 60
66337: PPUSH
66338: CALL_OW 13
66342: IFFALSE 66358
// SetSide ( i , side ) ;
66344: LD_VAR 0 1
66348: PPUSH
66349: LD_VAR 0 3
66353: PPUSH
66354: CALL_OW 235
66358: GO 66332
66360: POP
66361: POP
// end ;
66362: PPOPN 3
66364: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
66365: LD_EXP 38
66369: IFFALSE 66377
66371: PUSH
66372: LD_EXP 51
66376: AND
66377: IFFALSE 66496
66379: GO 66381
66381: DISABLE
66382: LD_INT 0
66384: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
66385: LD_ADDR_VAR 0 1
66389: PUSH
66390: LD_INT 22
66392: PUSH
66393: LD_OWVAR 2
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 21
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 3
66414: PUSH
66415: LD_INT 23
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: LIST
66433: PPUSH
66434: CALL_OW 69
66438: PUSH
66439: FOR_IN
66440: IFFALSE 66494
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
66442: LD_VAR 0 1
66446: PPUSH
66447: CALL_OW 257
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: LD_INT 2
66457: PUSH
66458: LD_INT 3
66460: PUSH
66461: LD_INT 4
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: IN
66470: IFFALSE 66492
// SetClass ( un , rand ( 1 , 4 ) ) ;
66472: LD_VAR 0 1
66476: PPUSH
66477: LD_INT 1
66479: PPUSH
66480: LD_INT 4
66482: PPUSH
66483: CALL_OW 12
66487: PPUSH
66488: CALL_OW 336
66492: GO 66439
66494: POP
66495: POP
// end ;
66496: PPOPN 1
66498: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
66499: LD_EXP 38
66503: IFFALSE 66511
66505: PUSH
66506: LD_EXP 50
66510: AND
66511: IFFALSE 66590
66513: GO 66515
66515: DISABLE
66516: LD_INT 0
66518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66519: LD_ADDR_VAR 0 1
66523: PUSH
66524: LD_INT 22
66526: PUSH
66527: LD_OWVAR 2
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 21
66538: PUSH
66539: LD_INT 3
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PPUSH
66550: CALL_OW 69
66554: ST_TO_ADDR
// if not tmp then
66555: LD_VAR 0 1
66559: NOT
66560: IFFALSE 66564
// exit ;
66562: GO 66590
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
66564: LD_VAR 0 1
66568: PUSH
66569: LD_INT 1
66571: PPUSH
66572: LD_VAR 0 1
66576: PPUSH
66577: CALL_OW 12
66581: ARRAY
66582: PPUSH
66583: LD_INT 100
66585: PPUSH
66586: CALL_OW 234
// end ;
66590: PPOPN 1
66592: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
66593: LD_EXP 38
66597: IFFALSE 66605
66599: PUSH
66600: LD_EXP 52
66604: AND
66605: IFFALSE 66703
66607: GO 66609
66609: DISABLE
66610: LD_INT 0
66612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66613: LD_ADDR_VAR 0 1
66617: PUSH
66618: LD_INT 22
66620: PUSH
66621: LD_OWVAR 2
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 21
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PPUSH
66644: CALL_OW 69
66648: ST_TO_ADDR
// if not tmp then
66649: LD_VAR 0 1
66653: NOT
66654: IFFALSE 66658
// exit ;
66656: GO 66703
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
66658: LD_VAR 0 1
66662: PUSH
66663: LD_INT 1
66665: PPUSH
66666: LD_VAR 0 1
66670: PPUSH
66671: CALL_OW 12
66675: ARRAY
66676: PPUSH
66677: LD_INT 1
66679: PPUSH
66680: LD_INT 4
66682: PPUSH
66683: CALL_OW 12
66687: PPUSH
66688: LD_INT 3000
66690: PPUSH
66691: LD_INT 9000
66693: PPUSH
66694: CALL_OW 12
66698: PPUSH
66699: CALL_OW 492
// end ;
66703: PPOPN 1
66705: END
// every 0 0$1 trigger StreamModeActive and sDepot do
66706: LD_EXP 38
66710: IFFALSE 66718
66712: PUSH
66713: LD_EXP 53
66717: AND
66718: IFFALSE 66738
66720: GO 66722
66722: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
66723: LD_INT 1
66725: PPUSH
66726: LD_OWVAR 2
66730: PPUSH
66731: LD_INT 0
66733: PPUSH
66734: CALL_OW 324
66738: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
66739: LD_EXP 38
66743: IFFALSE 66751
66745: PUSH
66746: LD_EXP 54
66750: AND
66751: IFFALSE 66834
66753: GO 66755
66755: DISABLE
66756: LD_INT 0
66758: PPUSH
66759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66760: LD_ADDR_VAR 0 2
66764: PUSH
66765: LD_INT 22
66767: PUSH
66768: LD_OWVAR 2
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 21
66779: PUSH
66780: LD_INT 3
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PPUSH
66791: CALL_OW 69
66795: ST_TO_ADDR
// if not tmp then
66796: LD_VAR 0 2
66800: NOT
66801: IFFALSE 66805
// exit ;
66803: GO 66834
// for i in tmp do
66805: LD_ADDR_VAR 0 1
66809: PUSH
66810: LD_VAR 0 2
66814: PUSH
66815: FOR_IN
66816: IFFALSE 66832
// SetBLevel ( i , 10 ) ;
66818: LD_VAR 0 1
66822: PPUSH
66823: LD_INT 10
66825: PPUSH
66826: CALL_OW 241
66830: GO 66815
66832: POP
66833: POP
// end ;
66834: PPOPN 2
66836: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
66837: LD_EXP 38
66841: IFFALSE 66849
66843: PUSH
66844: LD_EXP 55
66848: AND
66849: IFFALSE 66960
66851: GO 66853
66853: DISABLE
66854: LD_INT 0
66856: PPUSH
66857: PPUSH
66858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66859: LD_ADDR_VAR 0 3
66863: PUSH
66864: LD_INT 22
66866: PUSH
66867: LD_OWVAR 2
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 25
66878: PUSH
66879: LD_INT 1
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PPUSH
66890: CALL_OW 69
66894: ST_TO_ADDR
// if not tmp then
66895: LD_VAR 0 3
66899: NOT
66900: IFFALSE 66904
// exit ;
66902: GO 66960
// un := tmp [ rand ( 1 , tmp ) ] ;
66904: LD_ADDR_VAR 0 2
66908: PUSH
66909: LD_VAR 0 3
66913: PUSH
66914: LD_INT 1
66916: PPUSH
66917: LD_VAR 0 3
66921: PPUSH
66922: CALL_OW 12
66926: ARRAY
66927: ST_TO_ADDR
// if Crawls ( un ) then
66928: LD_VAR 0 2
66932: PPUSH
66933: CALL_OW 318
66937: IFFALSE 66948
// ComWalk ( un ) ;
66939: LD_VAR 0 2
66943: PPUSH
66944: CALL_OW 138
// SetClass ( un , class_sniper ) ;
66948: LD_VAR 0 2
66952: PPUSH
66953: LD_INT 5
66955: PPUSH
66956: CALL_OW 336
// end ;
66960: PPOPN 3
66962: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
66963: LD_EXP 38
66967: IFFALSE 66975
66969: PUSH
66970: LD_EXP 56
66974: AND
66975: IFFALSE 66987
66977: PUSH
66978: LD_OWVAR 67
66982: PUSH
66983: LD_INT 4
66985: LESS
66986: AND
66987: IFFALSE 67006
66989: GO 66991
66991: DISABLE
// begin Difficulty := Difficulty + 1 ;
66992: LD_ADDR_OWVAR 67
66996: PUSH
66997: LD_OWVAR 67
67001: PUSH
67002: LD_INT 1
67004: PLUS
67005: ST_TO_ADDR
// end ;
67006: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
67007: LD_EXP 38
67011: IFFALSE 67019
67013: PUSH
67014: LD_EXP 57
67018: AND
67019: IFFALSE 67122
67021: GO 67023
67023: DISABLE
67024: LD_INT 0
67026: PPUSH
// begin for i := 1 to 5 do
67027: LD_ADDR_VAR 0 1
67031: PUSH
67032: DOUBLE
67033: LD_INT 1
67035: DEC
67036: ST_TO_ADDR
67037: LD_INT 5
67039: PUSH
67040: FOR_TO
67041: IFFALSE 67120
// begin uc_nation := nation_nature ;
67043: LD_ADDR_OWVAR 21
67047: PUSH
67048: LD_INT 0
67050: ST_TO_ADDR
// uc_side := 0 ;
67051: LD_ADDR_OWVAR 20
67055: PUSH
67056: LD_INT 0
67058: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67059: LD_ADDR_OWVAR 29
67063: PUSH
67064: LD_INT 12
67066: PUSH
67067: LD_INT 12
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: ST_TO_ADDR
// hc_agressivity := 20 ;
67074: LD_ADDR_OWVAR 35
67078: PUSH
67079: LD_INT 20
67081: ST_TO_ADDR
// hc_class := class_tiger ;
67082: LD_ADDR_OWVAR 28
67086: PUSH
67087: LD_INT 14
67089: ST_TO_ADDR
// hc_gallery :=  ;
67090: LD_ADDR_OWVAR 33
67094: PUSH
67095: LD_STRING 
67097: ST_TO_ADDR
// hc_name :=  ;
67098: LD_ADDR_OWVAR 26
67102: PUSH
67103: LD_STRING 
67105: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
67106: CALL_OW 44
67110: PPUSH
67111: LD_INT 0
67113: PPUSH
67114: CALL_OW 51
// end ;
67118: GO 67040
67120: POP
67121: POP
// end ;
67122: PPOPN 1
67124: END
// every 0 0$1 trigger StreamModeActive and sBomb do
67125: LD_EXP 38
67129: IFFALSE 67137
67131: PUSH
67132: LD_EXP 58
67136: AND
67137: IFFALSE 67146
67139: GO 67141
67141: DISABLE
// StreamSibBomb ;
67142: CALL 67147 0 0
67146: END
// export function StreamSibBomb ; var i , x , y ; begin
67147: LD_INT 0
67149: PPUSH
67150: PPUSH
67151: PPUSH
67152: PPUSH
// result := false ;
67153: LD_ADDR_VAR 0 1
67157: PUSH
67158: LD_INT 0
67160: ST_TO_ADDR
// for i := 1 to 16 do
67161: LD_ADDR_VAR 0 2
67165: PUSH
67166: DOUBLE
67167: LD_INT 1
67169: DEC
67170: ST_TO_ADDR
67171: LD_INT 16
67173: PUSH
67174: FOR_TO
67175: IFFALSE 67374
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67177: LD_ADDR_VAR 0 3
67181: PUSH
67182: LD_INT 10
67184: PUSH
67185: LD_INT 20
67187: PUSH
67188: LD_INT 30
67190: PUSH
67191: LD_INT 40
67193: PUSH
67194: LD_INT 50
67196: PUSH
67197: LD_INT 60
67199: PUSH
67200: LD_INT 70
67202: PUSH
67203: LD_INT 80
67205: PUSH
67206: LD_INT 90
67208: PUSH
67209: LD_INT 100
67211: PUSH
67212: LD_INT 110
67214: PUSH
67215: LD_INT 120
67217: PUSH
67218: LD_INT 130
67220: PUSH
67221: LD_INT 140
67223: PUSH
67224: LD_INT 150
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 1
67246: PPUSH
67247: LD_INT 15
67249: PPUSH
67250: CALL_OW 12
67254: ARRAY
67255: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67256: LD_ADDR_VAR 0 4
67260: PUSH
67261: LD_INT 10
67263: PUSH
67264: LD_INT 20
67266: PUSH
67267: LD_INT 30
67269: PUSH
67270: LD_INT 40
67272: PUSH
67273: LD_INT 50
67275: PUSH
67276: LD_INT 60
67278: PUSH
67279: LD_INT 70
67281: PUSH
67282: LD_INT 80
67284: PUSH
67285: LD_INT 90
67287: PUSH
67288: LD_INT 100
67290: PUSH
67291: LD_INT 110
67293: PUSH
67294: LD_INT 120
67296: PUSH
67297: LD_INT 130
67299: PUSH
67300: LD_INT 140
67302: PUSH
67303: LD_INT 150
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 1
67325: PPUSH
67326: LD_INT 15
67328: PPUSH
67329: CALL_OW 12
67333: ARRAY
67334: ST_TO_ADDR
// if ValidHex ( x , y ) then
67335: LD_VAR 0 3
67339: PPUSH
67340: LD_VAR 0 4
67344: PPUSH
67345: CALL_OW 488
67349: IFFALSE 67372
// begin result := [ x , y ] ;
67351: LD_ADDR_VAR 0 1
67355: PUSH
67356: LD_VAR 0 3
67360: PUSH
67361: LD_VAR 0 4
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: ST_TO_ADDR
// break ;
67370: GO 67374
// end ; end ;
67372: GO 67174
67374: POP
67375: POP
// if result then
67376: LD_VAR 0 1
67380: IFFALSE 67440
// begin ToLua ( playSibBomb() ) ;
67382: LD_STRING playSibBomb()
67384: PPUSH
67385: CALL_OW 559
// wait ( 0 0$14 ) ;
67389: LD_INT 490
67391: PPUSH
67392: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
67396: LD_VAR 0 1
67400: PUSH
67401: LD_INT 1
67403: ARRAY
67404: PPUSH
67405: LD_VAR 0 1
67409: PUSH
67410: LD_INT 2
67412: ARRAY
67413: PPUSH
67414: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
67418: LD_VAR 0 1
67422: PUSH
67423: LD_INT 1
67425: ARRAY
67426: PPUSH
67427: LD_VAR 0 1
67431: PUSH
67432: LD_INT 2
67434: ARRAY
67435: PPUSH
67436: CALL_OW 429
// end ; end ;
67440: LD_VAR 0 1
67444: RET
// every 0 0$1 trigger StreamModeActive and sReset do
67445: LD_EXP 38
67449: IFFALSE 67457
67451: PUSH
67452: LD_EXP 60
67456: AND
67457: IFFALSE 67469
67459: GO 67461
67461: DISABLE
// YouLost (  ) ;
67462: LD_STRING 
67464: PPUSH
67465: CALL_OW 104
67469: END
// every 0 0$1 trigger StreamModeActive and sFog do
67470: LD_EXP 38
67474: IFFALSE 67482
67476: PUSH
67477: LD_EXP 59
67481: AND
67482: IFFALSE 67496
67484: GO 67486
67486: DISABLE
// FogOff ( your_side ) ;
67487: LD_OWVAR 2
67491: PPUSH
67492: CALL_OW 344
67496: END
// every 0 0$1 trigger StreamModeActive and sSun do
67497: LD_EXP 38
67501: IFFALSE 67509
67503: PUSH
67504: LD_EXP 61
67508: AND
67509: IFFALSE 67537
67511: GO 67513
67513: DISABLE
// begin solar_recharge_percent := 0 ;
67514: LD_ADDR_OWVAR 79
67518: PUSH
67519: LD_INT 0
67521: ST_TO_ADDR
// wait ( 5 5$00 ) ;
67522: LD_INT 10500
67524: PPUSH
67525: CALL_OW 67
// solar_recharge_percent := 100 ;
67529: LD_ADDR_OWVAR 79
67533: PUSH
67534: LD_INT 100
67536: ST_TO_ADDR
// end ;
67537: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
67538: LD_EXP 38
67542: IFFALSE 67550
67544: PUSH
67545: LD_EXP 62
67549: AND
67550: IFFALSE 67789
67552: GO 67554
67554: DISABLE
67555: LD_INT 0
67557: PPUSH
67558: PPUSH
67559: PPUSH
// begin tmp := [ ] ;
67560: LD_ADDR_VAR 0 3
67564: PUSH
67565: EMPTY
67566: ST_TO_ADDR
// for i := 1 to 6 do
67567: LD_ADDR_VAR 0 1
67571: PUSH
67572: DOUBLE
67573: LD_INT 1
67575: DEC
67576: ST_TO_ADDR
67577: LD_INT 6
67579: PUSH
67580: FOR_TO
67581: IFFALSE 67686
// begin uc_nation := nation_nature ;
67583: LD_ADDR_OWVAR 21
67587: PUSH
67588: LD_INT 0
67590: ST_TO_ADDR
// uc_side := 0 ;
67591: LD_ADDR_OWVAR 20
67595: PUSH
67596: LD_INT 0
67598: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67599: LD_ADDR_OWVAR 29
67603: PUSH
67604: LD_INT 12
67606: PUSH
67607: LD_INT 12
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: ST_TO_ADDR
// hc_agressivity := 20 ;
67614: LD_ADDR_OWVAR 35
67618: PUSH
67619: LD_INT 20
67621: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
67622: LD_ADDR_OWVAR 28
67626: PUSH
67627: LD_INT 17
67629: ST_TO_ADDR
// hc_gallery :=  ;
67630: LD_ADDR_OWVAR 33
67634: PUSH
67635: LD_STRING 
67637: ST_TO_ADDR
// hc_name :=  ;
67638: LD_ADDR_OWVAR 26
67642: PUSH
67643: LD_STRING 
67645: ST_TO_ADDR
// un := CreateHuman ;
67646: LD_ADDR_VAR 0 2
67650: PUSH
67651: CALL_OW 44
67655: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
67656: LD_VAR 0 2
67660: PPUSH
67661: LD_INT 1
67663: PPUSH
67664: CALL_OW 51
// tmp := tmp ^ un ;
67668: LD_ADDR_VAR 0 3
67672: PUSH
67673: LD_VAR 0 3
67677: PUSH
67678: LD_VAR 0 2
67682: ADD
67683: ST_TO_ADDR
// end ;
67684: GO 67580
67686: POP
67687: POP
// repeat wait ( 0 0$1 ) ;
67688: LD_INT 35
67690: PPUSH
67691: CALL_OW 67
// for un in tmp do
67695: LD_ADDR_VAR 0 2
67699: PUSH
67700: LD_VAR 0 3
67704: PUSH
67705: FOR_IN
67706: IFFALSE 67780
// begin if IsDead ( un ) then
67708: LD_VAR 0 2
67712: PPUSH
67713: CALL_OW 301
67717: IFFALSE 67737
// begin tmp := tmp diff un ;
67719: LD_ADDR_VAR 0 3
67723: PUSH
67724: LD_VAR 0 3
67728: PUSH
67729: LD_VAR 0 2
67733: DIFF
67734: ST_TO_ADDR
// continue ;
67735: GO 67705
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
67737: LD_VAR 0 2
67741: PPUSH
67742: LD_INT 3
67744: PUSH
67745: LD_INT 22
67747: PUSH
67748: LD_INT 0
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PPUSH
67759: CALL_OW 69
67763: PPUSH
67764: LD_VAR 0 2
67768: PPUSH
67769: CALL_OW 74
67773: PPUSH
67774: CALL_OW 115
// end ;
67778: GO 67705
67780: POP
67781: POP
// until not tmp ;
67782: LD_VAR 0 3
67786: NOT
67787: IFFALSE 67688
// end ;
67789: PPOPN 3
67791: END
// every 0 0$1 trigger StreamModeActive and sTroll do
67792: LD_EXP 38
67796: IFFALSE 67804
67798: PUSH
67799: LD_EXP 63
67803: AND
67804: IFFALSE 67858
67806: GO 67808
67808: DISABLE
// begin ToLua ( displayTroll(); ) ;
67809: LD_STRING displayTroll();
67811: PPUSH
67812: CALL_OW 559
// wait ( 3 3$00 ) ;
67816: LD_INT 6300
67818: PPUSH
67819: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67823: LD_STRING hideTroll();
67825: PPUSH
67826: CALL_OW 559
// wait ( 1 1$00 ) ;
67830: LD_INT 2100
67832: PPUSH
67833: CALL_OW 67
// ToLua ( displayTroll(); ) ;
67837: LD_STRING displayTroll();
67839: PPUSH
67840: CALL_OW 559
// wait ( 1 1$00 ) ;
67844: LD_INT 2100
67846: PPUSH
67847: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67851: LD_STRING hideTroll();
67853: PPUSH
67854: CALL_OW 559
// end ;
67858: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
67859: LD_EXP 38
67863: IFFALSE 67871
67865: PUSH
67866: LD_EXP 64
67870: AND
67871: IFFALSE 67934
67873: GO 67875
67875: DISABLE
67876: LD_INT 0
67878: PPUSH
// begin p := 0 ;
67879: LD_ADDR_VAR 0 1
67883: PUSH
67884: LD_INT 0
67886: ST_TO_ADDR
// repeat game_speed := 1 ;
67887: LD_ADDR_OWVAR 65
67891: PUSH
67892: LD_INT 1
67894: ST_TO_ADDR
// wait ( 0 0$1 ) ;
67895: LD_INT 35
67897: PPUSH
67898: CALL_OW 67
// p := p + 1 ;
67902: LD_ADDR_VAR 0 1
67906: PUSH
67907: LD_VAR 0 1
67911: PUSH
67912: LD_INT 1
67914: PLUS
67915: ST_TO_ADDR
// until p >= 60 ;
67916: LD_VAR 0 1
67920: PUSH
67921: LD_INT 60
67923: GREATEREQUAL
67924: IFFALSE 67887
// game_speed := 4 ;
67926: LD_ADDR_OWVAR 65
67930: PUSH
67931: LD_INT 4
67933: ST_TO_ADDR
// end ;
67934: PPOPN 1
67936: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
67937: LD_EXP 38
67941: IFFALSE 67949
67943: PUSH
67944: LD_EXP 65
67948: AND
67949: IFFALSE 68095
67951: GO 67953
67953: DISABLE
67954: LD_INT 0
67956: PPUSH
67957: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67958: LD_ADDR_VAR 0 1
67962: PUSH
67963: LD_INT 22
67965: PUSH
67966: LD_OWVAR 2
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 2
67977: PUSH
67978: LD_INT 30
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 30
67990: PUSH
67991: LD_INT 1
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: LIST
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PPUSH
68007: CALL_OW 69
68011: ST_TO_ADDR
// if not depot then
68012: LD_VAR 0 1
68016: NOT
68017: IFFALSE 68021
// exit ;
68019: GO 68095
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
68021: LD_ADDR_VAR 0 2
68025: PUSH
68026: LD_VAR 0 1
68030: PUSH
68031: LD_INT 1
68033: PPUSH
68034: LD_VAR 0 1
68038: PPUSH
68039: CALL_OW 12
68043: ARRAY
68044: PPUSH
68045: CALL_OW 274
68049: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
68050: LD_VAR 0 2
68054: PPUSH
68055: LD_INT 1
68057: PPUSH
68058: LD_INT 0
68060: PPUSH
68061: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
68065: LD_VAR 0 2
68069: PPUSH
68070: LD_INT 2
68072: PPUSH
68073: LD_INT 0
68075: PPUSH
68076: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
68080: LD_VAR 0 2
68084: PPUSH
68085: LD_INT 3
68087: PPUSH
68088: LD_INT 0
68090: PPUSH
68091: CALL_OW 277
// end ;
68095: PPOPN 2
68097: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
68098: LD_EXP 38
68102: IFFALSE 68110
68104: PUSH
68105: LD_EXP 66
68109: AND
68110: IFFALSE 68207
68112: GO 68114
68114: DISABLE
68115: LD_INT 0
68117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68118: LD_ADDR_VAR 0 1
68122: PUSH
68123: LD_INT 22
68125: PUSH
68126: LD_OWVAR 2
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 21
68137: PUSH
68138: LD_INT 1
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 3
68147: PUSH
68148: LD_INT 23
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: LIST
68166: PPUSH
68167: CALL_OW 69
68171: ST_TO_ADDR
// if not tmp then
68172: LD_VAR 0 1
68176: NOT
68177: IFFALSE 68181
// exit ;
68179: GO 68207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
68181: LD_VAR 0 1
68185: PUSH
68186: LD_INT 1
68188: PPUSH
68189: LD_VAR 0 1
68193: PPUSH
68194: CALL_OW 12
68198: ARRAY
68199: PPUSH
68200: LD_INT 200
68202: PPUSH
68203: CALL_OW 234
// end ;
68207: PPOPN 1
68209: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
68210: LD_EXP 38
68214: IFFALSE 68222
68216: PUSH
68217: LD_EXP 67
68221: AND
68222: IFFALSE 68301
68224: GO 68226
68226: DISABLE
68227: LD_INT 0
68229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
68230: LD_ADDR_VAR 0 1
68234: PUSH
68235: LD_INT 22
68237: PUSH
68238: LD_OWVAR 2
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 21
68249: PUSH
68250: LD_INT 2
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PPUSH
68261: CALL_OW 69
68265: ST_TO_ADDR
// if not tmp then
68266: LD_VAR 0 1
68270: NOT
68271: IFFALSE 68275
// exit ;
68273: GO 68301
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
68275: LD_VAR 0 1
68279: PUSH
68280: LD_INT 1
68282: PPUSH
68283: LD_VAR 0 1
68287: PPUSH
68288: CALL_OW 12
68292: ARRAY
68293: PPUSH
68294: LD_INT 60
68296: PPUSH
68297: CALL_OW 234
// end ;
68301: PPOPN 1
68303: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
68304: LD_EXP 38
68308: IFFALSE 68316
68310: PUSH
68311: LD_EXP 68
68315: AND
68316: IFFALSE 68415
68318: GO 68320
68320: DISABLE
68321: LD_INT 0
68323: PPUSH
68324: PPUSH
// begin enable ;
68325: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
68326: LD_ADDR_VAR 0 1
68330: PUSH
68331: LD_INT 22
68333: PUSH
68334: LD_OWVAR 2
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 61
68345: PUSH
68346: EMPTY
68347: LIST
68348: PUSH
68349: LD_INT 33
68351: PUSH
68352: LD_INT 2
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: LIST
68363: PPUSH
68364: CALL_OW 69
68368: ST_TO_ADDR
// if not tmp then
68369: LD_VAR 0 1
68373: NOT
68374: IFFALSE 68378
// exit ;
68376: GO 68415
// for i in tmp do
68378: LD_ADDR_VAR 0 2
68382: PUSH
68383: LD_VAR 0 1
68387: PUSH
68388: FOR_IN
68389: IFFALSE 68413
// if IsControledBy ( i ) then
68391: LD_VAR 0 2
68395: PPUSH
68396: CALL_OW 312
68400: IFFALSE 68411
// ComUnlink ( i ) ;
68402: LD_VAR 0 2
68406: PPUSH
68407: CALL_OW 136
68411: GO 68388
68413: POP
68414: POP
// end ;
68415: PPOPN 2
68417: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
68418: LD_EXP 38
68422: IFFALSE 68430
68424: PUSH
68425: LD_EXP 69
68429: AND
68430: IFFALSE 68570
68432: GO 68434
68434: DISABLE
68435: LD_INT 0
68437: PPUSH
68438: PPUSH
// begin ToLua ( displayPowell(); ) ;
68439: LD_STRING displayPowell();
68441: PPUSH
68442: CALL_OW 559
// uc_side := 0 ;
68446: LD_ADDR_OWVAR 20
68450: PUSH
68451: LD_INT 0
68453: ST_TO_ADDR
// uc_nation := 2 ;
68454: LD_ADDR_OWVAR 21
68458: PUSH
68459: LD_INT 2
68461: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
68462: LD_ADDR_OWVAR 37
68466: PUSH
68467: LD_INT 14
68469: ST_TO_ADDR
// vc_engine := engine_siberite ;
68470: LD_ADDR_OWVAR 39
68474: PUSH
68475: LD_INT 3
68477: ST_TO_ADDR
// vc_control := control_apeman ;
68478: LD_ADDR_OWVAR 38
68482: PUSH
68483: LD_INT 5
68485: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
68486: LD_ADDR_OWVAR 40
68490: PUSH
68491: LD_INT 29
68493: ST_TO_ADDR
// un := CreateVehicle ;
68494: LD_ADDR_VAR 0 2
68498: PUSH
68499: CALL_OW 45
68503: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68504: LD_VAR 0 2
68508: PPUSH
68509: LD_INT 1
68511: PPUSH
68512: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68516: LD_INT 35
68518: PPUSH
68519: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68523: LD_VAR 0 2
68527: PPUSH
68528: LD_INT 22
68530: PUSH
68531: LD_OWVAR 2
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PPUSH
68540: CALL_OW 69
68544: PPUSH
68545: LD_VAR 0 2
68549: PPUSH
68550: CALL_OW 74
68554: PPUSH
68555: CALL_OW 115
// until IsDead ( un ) ;
68559: LD_VAR 0 2
68563: PPUSH
68564: CALL_OW 301
68568: IFFALSE 68516
// end ;
68570: PPOPN 2
68572: END
// every 0 0$1 trigger StreamModeActive and sStu do
68573: LD_EXP 38
68577: IFFALSE 68585
68579: PUSH
68580: LD_EXP 77
68584: AND
68585: IFFALSE 68601
68587: GO 68589
68589: DISABLE
// begin ToLua ( displayStucuk(); ) ;
68590: LD_STRING displayStucuk();
68592: PPUSH
68593: CALL_OW 559
// ResetFog ;
68597: CALL_OW 335
// end ;
68601: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
68602: LD_EXP 38
68606: IFFALSE 68614
68608: PUSH
68609: LD_EXP 70
68613: AND
68614: IFFALSE 68755
68616: GO 68618
68618: DISABLE
68619: LD_INT 0
68621: PPUSH
68622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68623: LD_ADDR_VAR 0 2
68627: PUSH
68628: LD_INT 22
68630: PUSH
68631: LD_OWVAR 2
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 21
68642: PUSH
68643: LD_INT 1
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PPUSH
68654: CALL_OW 69
68658: ST_TO_ADDR
// if not tmp then
68659: LD_VAR 0 2
68663: NOT
68664: IFFALSE 68668
// exit ;
68666: GO 68755
// un := tmp [ rand ( 1 , tmp ) ] ;
68668: LD_ADDR_VAR 0 1
68672: PUSH
68673: LD_VAR 0 2
68677: PUSH
68678: LD_INT 1
68680: PPUSH
68681: LD_VAR 0 2
68685: PPUSH
68686: CALL_OW 12
68690: ARRAY
68691: ST_TO_ADDR
// SetSide ( un , 0 ) ;
68692: LD_VAR 0 1
68696: PPUSH
68697: LD_INT 0
68699: PPUSH
68700: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
68704: LD_VAR 0 1
68708: PPUSH
68709: LD_OWVAR 3
68713: PUSH
68714: LD_VAR 0 1
68718: DIFF
68719: PPUSH
68720: LD_VAR 0 1
68724: PPUSH
68725: CALL_OW 74
68729: PPUSH
68730: CALL_OW 115
// wait ( 0 0$20 ) ;
68734: LD_INT 700
68736: PPUSH
68737: CALL_OW 67
// SetSide ( un , your_side ) ;
68741: LD_VAR 0 1
68745: PPUSH
68746: LD_OWVAR 2
68750: PPUSH
68751: CALL_OW 235
// end ;
68755: PPOPN 2
68757: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
68758: LD_EXP 38
68762: IFFALSE 68770
68764: PUSH
68765: LD_EXP 71
68769: AND
68770: IFFALSE 68876
68772: GO 68774
68774: DISABLE
68775: LD_INT 0
68777: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68778: LD_ADDR_VAR 0 1
68782: PUSH
68783: LD_INT 22
68785: PUSH
68786: LD_OWVAR 2
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 2
68797: PUSH
68798: LD_INT 30
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 30
68810: PUSH
68811: LD_INT 1
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: LIST
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PPUSH
68827: CALL_OW 69
68831: ST_TO_ADDR
// if not depot then
68832: LD_VAR 0 1
68836: NOT
68837: IFFALSE 68841
// exit ;
68839: GO 68876
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
68841: LD_VAR 0 1
68845: PUSH
68846: LD_INT 1
68848: ARRAY
68849: PPUSH
68850: CALL_OW 250
68854: PPUSH
68855: LD_VAR 0 1
68859: PUSH
68860: LD_INT 1
68862: ARRAY
68863: PPUSH
68864: CALL_OW 251
68868: PPUSH
68869: LD_INT 70
68871: PPUSH
68872: CALL_OW 495
// end ;
68876: PPOPN 1
68878: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
68879: LD_EXP 38
68883: IFFALSE 68891
68885: PUSH
68886: LD_EXP 72
68890: AND
68891: IFFALSE 69102
68893: GO 68895
68895: DISABLE
68896: LD_INT 0
68898: PPUSH
68899: PPUSH
68900: PPUSH
68901: PPUSH
68902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68903: LD_ADDR_VAR 0 5
68907: PUSH
68908: LD_INT 22
68910: PUSH
68911: LD_OWVAR 2
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 21
68922: PUSH
68923: LD_INT 1
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PPUSH
68934: CALL_OW 69
68938: ST_TO_ADDR
// if not tmp then
68939: LD_VAR 0 5
68943: NOT
68944: IFFALSE 68948
// exit ;
68946: GO 69102
// for i in tmp do
68948: LD_ADDR_VAR 0 1
68952: PUSH
68953: LD_VAR 0 5
68957: PUSH
68958: FOR_IN
68959: IFFALSE 69100
// begin d := rand ( 0 , 5 ) ;
68961: LD_ADDR_VAR 0 4
68965: PUSH
68966: LD_INT 0
68968: PPUSH
68969: LD_INT 5
68971: PPUSH
68972: CALL_OW 12
68976: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
68977: LD_ADDR_VAR 0 2
68981: PUSH
68982: LD_VAR 0 1
68986: PPUSH
68987: CALL_OW 250
68991: PPUSH
68992: LD_VAR 0 4
68996: PPUSH
68997: LD_INT 3
68999: PPUSH
69000: LD_INT 12
69002: PPUSH
69003: CALL_OW 12
69007: PPUSH
69008: CALL_OW 272
69012: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
69013: LD_ADDR_VAR 0 3
69017: PUSH
69018: LD_VAR 0 1
69022: PPUSH
69023: CALL_OW 251
69027: PPUSH
69028: LD_VAR 0 4
69032: PPUSH
69033: LD_INT 3
69035: PPUSH
69036: LD_INT 12
69038: PPUSH
69039: CALL_OW 12
69043: PPUSH
69044: CALL_OW 273
69048: ST_TO_ADDR
// if ValidHex ( x , y ) then
69049: LD_VAR 0 2
69053: PPUSH
69054: LD_VAR 0 3
69058: PPUSH
69059: CALL_OW 488
69063: IFFALSE 69098
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
69065: LD_VAR 0 1
69069: PPUSH
69070: LD_VAR 0 2
69074: PPUSH
69075: LD_VAR 0 3
69079: PPUSH
69080: LD_INT 3
69082: PPUSH
69083: LD_INT 6
69085: PPUSH
69086: CALL_OW 12
69090: PPUSH
69091: LD_INT 1
69093: PPUSH
69094: CALL_OW 483
// end ;
69098: GO 68958
69100: POP
69101: POP
// end ;
69102: PPOPN 5
69104: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
69105: LD_EXP 38
69109: IFFALSE 69117
69111: PUSH
69112: LD_EXP 73
69116: AND
69117: IFFALSE 69211
69119: GO 69121
69121: DISABLE
69122: LD_INT 0
69124: PPUSH
69125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
69126: LD_ADDR_VAR 0 2
69130: PUSH
69131: LD_INT 22
69133: PUSH
69134: LD_OWVAR 2
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 32
69145: PUSH
69146: LD_INT 1
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 21
69155: PUSH
69156: LD_INT 2
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: LIST
69167: PPUSH
69168: CALL_OW 69
69172: ST_TO_ADDR
// if not tmp then
69173: LD_VAR 0 2
69177: NOT
69178: IFFALSE 69182
// exit ;
69180: GO 69211
// for i in tmp do
69182: LD_ADDR_VAR 0 1
69186: PUSH
69187: LD_VAR 0 2
69191: PUSH
69192: FOR_IN
69193: IFFALSE 69209
// SetFuel ( i , 0 ) ;
69195: LD_VAR 0 1
69199: PPUSH
69200: LD_INT 0
69202: PPUSH
69203: CALL_OW 240
69207: GO 69192
69209: POP
69210: POP
// end ;
69211: PPOPN 2
69213: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
69214: LD_EXP 38
69218: IFFALSE 69226
69220: PUSH
69221: LD_EXP 74
69225: AND
69226: IFFALSE 69292
69228: GO 69230
69230: DISABLE
69231: LD_INT 0
69233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69234: LD_ADDR_VAR 0 1
69238: PUSH
69239: LD_INT 22
69241: PUSH
69242: LD_OWVAR 2
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 30
69253: PUSH
69254: LD_INT 29
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PPUSH
69265: CALL_OW 69
69269: ST_TO_ADDR
// if not tmp then
69270: LD_VAR 0 1
69274: NOT
69275: IFFALSE 69279
// exit ;
69277: GO 69292
// DestroyUnit ( tmp [ 1 ] ) ;
69279: LD_VAR 0 1
69283: PUSH
69284: LD_INT 1
69286: ARRAY
69287: PPUSH
69288: CALL_OW 65
// end ;
69292: PPOPN 1
69294: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
69295: LD_EXP 38
69299: IFFALSE 69307
69301: PUSH
69302: LD_EXP 76
69306: AND
69307: IFFALSE 69436
69309: GO 69311
69311: DISABLE
69312: LD_INT 0
69314: PPUSH
// begin uc_side := 0 ;
69315: LD_ADDR_OWVAR 20
69319: PUSH
69320: LD_INT 0
69322: ST_TO_ADDR
// uc_nation := nation_arabian ;
69323: LD_ADDR_OWVAR 21
69327: PUSH
69328: LD_INT 2
69330: ST_TO_ADDR
// hc_gallery :=  ;
69331: LD_ADDR_OWVAR 33
69335: PUSH
69336: LD_STRING 
69338: ST_TO_ADDR
// hc_name :=  ;
69339: LD_ADDR_OWVAR 26
69343: PUSH
69344: LD_STRING 
69346: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
69347: LD_INT 1
69349: PPUSH
69350: LD_INT 11
69352: PPUSH
69353: LD_INT 10
69355: PPUSH
69356: CALL_OW 380
// un := CreateHuman ;
69360: LD_ADDR_VAR 0 1
69364: PUSH
69365: CALL_OW 44
69369: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69370: LD_VAR 0 1
69374: PPUSH
69375: LD_INT 1
69377: PPUSH
69378: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69382: LD_INT 35
69384: PPUSH
69385: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69389: LD_VAR 0 1
69393: PPUSH
69394: LD_INT 22
69396: PUSH
69397: LD_OWVAR 2
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PPUSH
69406: CALL_OW 69
69410: PPUSH
69411: LD_VAR 0 1
69415: PPUSH
69416: CALL_OW 74
69420: PPUSH
69421: CALL_OW 115
// until IsDead ( un ) ;
69425: LD_VAR 0 1
69429: PPUSH
69430: CALL_OW 301
69434: IFFALSE 69382
// end ;
69436: PPOPN 1
69438: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
69439: LD_EXP 38
69443: IFFALSE 69451
69445: PUSH
69446: LD_EXP 78
69450: AND
69451: IFFALSE 69463
69453: GO 69455
69455: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
69456: LD_STRING earthquake(getX(game), 0, 32)
69458: PPUSH
69459: CALL_OW 559
69463: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
69464: LD_EXP 38
69468: IFFALSE 69476
69470: PUSH
69471: LD_EXP 79
69475: AND
69476: IFFALSE 69567
69478: GO 69480
69480: DISABLE
69481: LD_INT 0
69483: PPUSH
// begin enable ;
69484: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
69485: LD_ADDR_VAR 0 1
69489: PUSH
69490: LD_INT 22
69492: PUSH
69493: LD_OWVAR 2
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 21
69504: PUSH
69505: LD_INT 2
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 33
69514: PUSH
69515: LD_INT 3
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: LIST
69526: PPUSH
69527: CALL_OW 69
69531: ST_TO_ADDR
// if not tmp then
69532: LD_VAR 0 1
69536: NOT
69537: IFFALSE 69541
// exit ;
69539: GO 69567
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69541: LD_VAR 0 1
69545: PUSH
69546: LD_INT 1
69548: PPUSH
69549: LD_VAR 0 1
69553: PPUSH
69554: CALL_OW 12
69558: ARRAY
69559: PPUSH
69560: LD_INT 1
69562: PPUSH
69563: CALL_OW 234
// end ;
69567: PPOPN 1
69569: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
69570: LD_EXP 38
69574: IFFALSE 69582
69576: PUSH
69577: LD_EXP 80
69581: AND
69582: IFFALSE 69723
69584: GO 69586
69586: DISABLE
69587: LD_INT 0
69589: PPUSH
69590: PPUSH
69591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69592: LD_ADDR_VAR 0 3
69596: PUSH
69597: LD_INT 22
69599: PUSH
69600: LD_OWVAR 2
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 25
69611: PUSH
69612: LD_INT 1
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PPUSH
69623: CALL_OW 69
69627: ST_TO_ADDR
// if not tmp then
69628: LD_VAR 0 3
69632: NOT
69633: IFFALSE 69637
// exit ;
69635: GO 69723
// un := tmp [ rand ( 1 , tmp ) ] ;
69637: LD_ADDR_VAR 0 2
69641: PUSH
69642: LD_VAR 0 3
69646: PUSH
69647: LD_INT 1
69649: PPUSH
69650: LD_VAR 0 3
69654: PPUSH
69655: CALL_OW 12
69659: ARRAY
69660: ST_TO_ADDR
// if Crawls ( un ) then
69661: LD_VAR 0 2
69665: PPUSH
69666: CALL_OW 318
69670: IFFALSE 69681
// ComWalk ( un ) ;
69672: LD_VAR 0 2
69676: PPUSH
69677: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
69681: LD_VAR 0 2
69685: PPUSH
69686: LD_INT 9
69688: PPUSH
69689: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
69693: LD_INT 28
69695: PPUSH
69696: LD_OWVAR 2
69700: PPUSH
69701: LD_INT 2
69703: PPUSH
69704: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
69708: LD_INT 29
69710: PPUSH
69711: LD_OWVAR 2
69715: PPUSH
69716: LD_INT 2
69718: PPUSH
69719: CALL_OW 322
// end ;
69723: PPOPN 3
69725: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
69726: LD_EXP 38
69730: IFFALSE 69738
69732: PUSH
69733: LD_EXP 81
69737: AND
69738: IFFALSE 69849
69740: GO 69742
69742: DISABLE
69743: LD_INT 0
69745: PPUSH
69746: PPUSH
69747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69748: LD_ADDR_VAR 0 3
69752: PUSH
69753: LD_INT 22
69755: PUSH
69756: LD_OWVAR 2
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 25
69767: PUSH
69768: LD_INT 1
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PPUSH
69779: CALL_OW 69
69783: ST_TO_ADDR
// if not tmp then
69784: LD_VAR 0 3
69788: NOT
69789: IFFALSE 69793
// exit ;
69791: GO 69849
// un := tmp [ rand ( 1 , tmp ) ] ;
69793: LD_ADDR_VAR 0 2
69797: PUSH
69798: LD_VAR 0 3
69802: PUSH
69803: LD_INT 1
69805: PPUSH
69806: LD_VAR 0 3
69810: PPUSH
69811: CALL_OW 12
69815: ARRAY
69816: ST_TO_ADDR
// if Crawls ( un ) then
69817: LD_VAR 0 2
69821: PPUSH
69822: CALL_OW 318
69826: IFFALSE 69837
// ComWalk ( un ) ;
69828: LD_VAR 0 2
69832: PPUSH
69833: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69837: LD_VAR 0 2
69841: PPUSH
69842: LD_INT 8
69844: PPUSH
69845: CALL_OW 336
// end ;
69849: PPOPN 3
69851: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
69852: LD_EXP 38
69856: IFFALSE 69864
69858: PUSH
69859: LD_EXP 82
69863: AND
69864: IFFALSE 70008
69866: GO 69868
69868: DISABLE
69869: LD_INT 0
69871: PPUSH
69872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
69873: LD_ADDR_VAR 0 2
69877: PUSH
69878: LD_INT 22
69880: PUSH
69881: LD_OWVAR 2
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 21
69892: PUSH
69893: LD_INT 2
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 2
69902: PUSH
69903: LD_INT 34
69905: PUSH
69906: LD_INT 12
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 34
69915: PUSH
69916: LD_INT 51
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 34
69925: PUSH
69926: LD_INT 32
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: LIST
69943: PPUSH
69944: CALL_OW 69
69948: ST_TO_ADDR
// if not tmp then
69949: LD_VAR 0 2
69953: NOT
69954: IFFALSE 69958
// exit ;
69956: GO 70008
// for i in tmp do
69958: LD_ADDR_VAR 0 1
69962: PUSH
69963: LD_VAR 0 2
69967: PUSH
69968: FOR_IN
69969: IFFALSE 70006
// if GetCargo ( i , mat_artifact ) = 0 then
69971: LD_VAR 0 1
69975: PPUSH
69976: LD_INT 4
69978: PPUSH
69979: CALL_OW 289
69983: PUSH
69984: LD_INT 0
69986: EQUAL
69987: IFFALSE 70004
// SetCargo ( i , mat_siberit , 100 ) ;
69989: LD_VAR 0 1
69993: PPUSH
69994: LD_INT 3
69996: PPUSH
69997: LD_INT 100
69999: PPUSH
70000: CALL_OW 290
70004: GO 69968
70006: POP
70007: POP
// end ;
70008: PPOPN 2
70010: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
70011: LD_EXP 38
70015: IFFALSE 70023
70017: PUSH
70018: LD_EXP 83
70022: AND
70023: IFFALSE 70206
70025: GO 70027
70027: DISABLE
70028: LD_INT 0
70030: PPUSH
70031: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70032: LD_ADDR_VAR 0 2
70036: PUSH
70037: LD_INT 22
70039: PUSH
70040: LD_OWVAR 2
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PPUSH
70049: CALL_OW 69
70053: ST_TO_ADDR
// if not tmp then
70054: LD_VAR 0 2
70058: NOT
70059: IFFALSE 70063
// exit ;
70061: GO 70206
// for i := 1 to 2 do
70063: LD_ADDR_VAR 0 1
70067: PUSH
70068: DOUBLE
70069: LD_INT 1
70071: DEC
70072: ST_TO_ADDR
70073: LD_INT 2
70075: PUSH
70076: FOR_TO
70077: IFFALSE 70204
// begin uc_side := your_side ;
70079: LD_ADDR_OWVAR 20
70083: PUSH
70084: LD_OWVAR 2
70088: ST_TO_ADDR
// uc_nation := nation_american ;
70089: LD_ADDR_OWVAR 21
70093: PUSH
70094: LD_INT 1
70096: ST_TO_ADDR
// vc_chassis := us_morphling ;
70097: LD_ADDR_OWVAR 37
70101: PUSH
70102: LD_INT 5
70104: ST_TO_ADDR
// vc_engine := engine_siberite ;
70105: LD_ADDR_OWVAR 39
70109: PUSH
70110: LD_INT 3
70112: ST_TO_ADDR
// vc_control := control_computer ;
70113: LD_ADDR_OWVAR 38
70117: PUSH
70118: LD_INT 3
70120: ST_TO_ADDR
// vc_weapon := us_double_laser ;
70121: LD_ADDR_OWVAR 40
70125: PUSH
70126: LD_INT 10
70128: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
70129: LD_VAR 0 2
70133: PUSH
70134: LD_INT 1
70136: ARRAY
70137: PPUSH
70138: CALL_OW 310
70142: NOT
70143: IFFALSE 70190
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
70145: CALL_OW 45
70149: PPUSH
70150: LD_VAR 0 2
70154: PUSH
70155: LD_INT 1
70157: ARRAY
70158: PPUSH
70159: CALL_OW 250
70163: PPUSH
70164: LD_VAR 0 2
70168: PUSH
70169: LD_INT 1
70171: ARRAY
70172: PPUSH
70173: CALL_OW 251
70177: PPUSH
70178: LD_INT 12
70180: PPUSH
70181: LD_INT 1
70183: PPUSH
70184: CALL_OW 50
70188: GO 70202
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
70190: CALL_OW 45
70194: PPUSH
70195: LD_INT 1
70197: PPUSH
70198: CALL_OW 51
// end ;
70202: GO 70076
70204: POP
70205: POP
// end ;
70206: PPOPN 2
70208: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
70209: LD_EXP 38
70213: IFFALSE 70221
70215: PUSH
70216: LD_EXP 84
70220: AND
70221: IFFALSE 70443
70223: GO 70225
70225: DISABLE
70226: LD_INT 0
70228: PPUSH
70229: PPUSH
70230: PPUSH
70231: PPUSH
70232: PPUSH
70233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70234: LD_ADDR_VAR 0 6
70238: PUSH
70239: LD_INT 22
70241: PUSH
70242: LD_OWVAR 2
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 21
70253: PUSH
70254: LD_INT 1
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 3
70263: PUSH
70264: LD_INT 23
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: LIST
70282: PPUSH
70283: CALL_OW 69
70287: ST_TO_ADDR
// if not tmp then
70288: LD_VAR 0 6
70292: NOT
70293: IFFALSE 70297
// exit ;
70295: GO 70443
// s1 := rand ( 1 , 4 ) ;
70297: LD_ADDR_VAR 0 2
70301: PUSH
70302: LD_INT 1
70304: PPUSH
70305: LD_INT 4
70307: PPUSH
70308: CALL_OW 12
70312: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
70313: LD_ADDR_VAR 0 4
70317: PUSH
70318: LD_VAR 0 6
70322: PUSH
70323: LD_INT 1
70325: ARRAY
70326: PPUSH
70327: LD_VAR 0 2
70331: PPUSH
70332: CALL_OW 259
70336: ST_TO_ADDR
// if s1 = 1 then
70337: LD_VAR 0 2
70341: PUSH
70342: LD_INT 1
70344: EQUAL
70345: IFFALSE 70365
// s2 := rand ( 2 , 4 ) else
70347: LD_ADDR_VAR 0 3
70351: PUSH
70352: LD_INT 2
70354: PPUSH
70355: LD_INT 4
70357: PPUSH
70358: CALL_OW 12
70362: ST_TO_ADDR
70363: GO 70373
// s2 := 1 ;
70365: LD_ADDR_VAR 0 3
70369: PUSH
70370: LD_INT 1
70372: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
70373: LD_ADDR_VAR 0 5
70377: PUSH
70378: LD_VAR 0 6
70382: PUSH
70383: LD_INT 1
70385: ARRAY
70386: PPUSH
70387: LD_VAR 0 3
70391: PPUSH
70392: CALL_OW 259
70396: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
70397: LD_VAR 0 6
70401: PUSH
70402: LD_INT 1
70404: ARRAY
70405: PPUSH
70406: LD_VAR 0 2
70410: PPUSH
70411: LD_VAR 0 5
70415: PPUSH
70416: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
70420: LD_VAR 0 6
70424: PUSH
70425: LD_INT 1
70427: ARRAY
70428: PPUSH
70429: LD_VAR 0 3
70433: PPUSH
70434: LD_VAR 0 4
70438: PPUSH
70439: CALL_OW 237
// end ;
70443: PPOPN 6
70445: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
70446: LD_EXP 38
70450: IFFALSE 70458
70452: PUSH
70453: LD_EXP 85
70457: AND
70458: IFFALSE 70537
70460: GO 70462
70462: DISABLE
70463: LD_INT 0
70465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
70466: LD_ADDR_VAR 0 1
70470: PUSH
70471: LD_INT 22
70473: PUSH
70474: LD_OWVAR 2
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 30
70485: PUSH
70486: LD_INT 3
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PPUSH
70497: CALL_OW 69
70501: ST_TO_ADDR
// if not tmp then
70502: LD_VAR 0 1
70506: NOT
70507: IFFALSE 70511
// exit ;
70509: GO 70537
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70511: LD_VAR 0 1
70515: PUSH
70516: LD_INT 1
70518: PPUSH
70519: LD_VAR 0 1
70523: PPUSH
70524: CALL_OW 12
70528: ARRAY
70529: PPUSH
70530: LD_INT 1
70532: PPUSH
70533: CALL_OW 234
// end ;
70537: PPOPN 1
70539: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
70540: LD_EXP 38
70544: IFFALSE 70552
70546: PUSH
70547: LD_EXP 86
70551: AND
70552: IFFALSE 70664
70554: GO 70556
70556: DISABLE
70557: LD_INT 0
70559: PPUSH
70560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
70561: LD_ADDR_VAR 0 2
70565: PUSH
70566: LD_INT 22
70568: PUSH
70569: LD_OWVAR 2
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 2
70580: PUSH
70581: LD_INT 30
70583: PUSH
70584: LD_INT 27
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 30
70593: PUSH
70594: LD_INT 26
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 30
70603: PUSH
70604: LD_INT 28
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PPUSH
70621: CALL_OW 69
70625: ST_TO_ADDR
// if not tmp then
70626: LD_VAR 0 2
70630: NOT
70631: IFFALSE 70635
// exit ;
70633: GO 70664
// for i in tmp do
70635: LD_ADDR_VAR 0 1
70639: PUSH
70640: LD_VAR 0 2
70644: PUSH
70645: FOR_IN
70646: IFFALSE 70662
// SetLives ( i , 1 ) ;
70648: LD_VAR 0 1
70652: PPUSH
70653: LD_INT 1
70655: PPUSH
70656: CALL_OW 234
70660: GO 70645
70662: POP
70663: POP
// end ;
70664: PPOPN 2
70666: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
70667: LD_EXP 38
70671: IFFALSE 70679
70673: PUSH
70674: LD_EXP 87
70678: AND
70679: IFFALSE 70966
70681: GO 70683
70683: DISABLE
70684: LD_INT 0
70686: PPUSH
70687: PPUSH
70688: PPUSH
// begin i := rand ( 1 , 7 ) ;
70689: LD_ADDR_VAR 0 1
70693: PUSH
70694: LD_INT 1
70696: PPUSH
70697: LD_INT 7
70699: PPUSH
70700: CALL_OW 12
70704: ST_TO_ADDR
// case i of 1 :
70705: LD_VAR 0 1
70709: PUSH
70710: LD_INT 1
70712: DOUBLE
70713: EQUAL
70714: IFTRUE 70718
70716: GO 70728
70718: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
70719: LD_STRING earthquake(getX(game), 0, 32)
70721: PPUSH
70722: CALL_OW 559
70726: GO 70966
70728: LD_INT 2
70730: DOUBLE
70731: EQUAL
70732: IFTRUE 70736
70734: GO 70750
70736: POP
// begin ToLua ( displayStucuk(); ) ;
70737: LD_STRING displayStucuk();
70739: PPUSH
70740: CALL_OW 559
// ResetFog ;
70744: CALL_OW 335
// end ; 3 :
70748: GO 70966
70750: LD_INT 3
70752: DOUBLE
70753: EQUAL
70754: IFTRUE 70758
70756: GO 70862
70758: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70759: LD_ADDR_VAR 0 2
70763: PUSH
70764: LD_INT 22
70766: PUSH
70767: LD_OWVAR 2
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 25
70778: PUSH
70779: LD_INT 1
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PPUSH
70790: CALL_OW 69
70794: ST_TO_ADDR
// if not tmp then
70795: LD_VAR 0 2
70799: NOT
70800: IFFALSE 70804
// exit ;
70802: GO 70966
// un := tmp [ rand ( 1 , tmp ) ] ;
70804: LD_ADDR_VAR 0 3
70808: PUSH
70809: LD_VAR 0 2
70813: PUSH
70814: LD_INT 1
70816: PPUSH
70817: LD_VAR 0 2
70821: PPUSH
70822: CALL_OW 12
70826: ARRAY
70827: ST_TO_ADDR
// if Crawls ( un ) then
70828: LD_VAR 0 3
70832: PPUSH
70833: CALL_OW 318
70837: IFFALSE 70848
// ComWalk ( un ) ;
70839: LD_VAR 0 3
70843: PPUSH
70844: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70848: LD_VAR 0 3
70852: PPUSH
70853: LD_INT 8
70855: PPUSH
70856: CALL_OW 336
// end ; 4 :
70860: GO 70966
70862: LD_INT 4
70864: DOUBLE
70865: EQUAL
70866: IFTRUE 70870
70868: GO 70944
70870: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70871: LD_ADDR_VAR 0 2
70875: PUSH
70876: LD_INT 22
70878: PUSH
70879: LD_OWVAR 2
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 30
70890: PUSH
70891: LD_INT 29
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PPUSH
70902: CALL_OW 69
70906: ST_TO_ADDR
// if not tmp then
70907: LD_VAR 0 2
70911: NOT
70912: IFFALSE 70916
// exit ;
70914: GO 70966
// CenterNowOnUnits ( tmp [ 1 ] ) ;
70916: LD_VAR 0 2
70920: PUSH
70921: LD_INT 1
70923: ARRAY
70924: PPUSH
70925: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
70929: LD_VAR 0 2
70933: PUSH
70934: LD_INT 1
70936: ARRAY
70937: PPUSH
70938: CALL_OW 65
// end ; 5 .. 7 :
70942: GO 70966
70944: LD_INT 5
70946: DOUBLE
70947: GREATEREQUAL
70948: IFFALSE 70956
70950: LD_INT 7
70952: DOUBLE
70953: LESSEQUAL
70954: IFTRUE 70958
70956: GO 70965
70958: POP
// StreamSibBomb ; end ;
70959: CALL 67147 0 0
70963: GO 70966
70965: POP
// end ;
70966: PPOPN 3
70968: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
70969: LD_EXP 38
70973: IFFALSE 70981
70975: PUSH
70976: LD_EXP 88
70980: AND
70981: IFFALSE 71137
70983: GO 70985
70985: DISABLE
70986: LD_INT 0
70988: PPUSH
70989: PPUSH
70990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
70991: LD_ADDR_VAR 0 2
70995: PUSH
70996: LD_INT 81
70998: PUSH
70999: LD_OWVAR 2
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 2
71010: PUSH
71011: LD_INT 21
71013: PUSH
71014: LD_INT 1
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 21
71023: PUSH
71024: LD_INT 2
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: LIST
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PPUSH
71040: CALL_OW 69
71044: ST_TO_ADDR
// if not tmp then
71045: LD_VAR 0 2
71049: NOT
71050: IFFALSE 71054
// exit ;
71052: GO 71137
// p := 0 ;
71054: LD_ADDR_VAR 0 3
71058: PUSH
71059: LD_INT 0
71061: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71062: LD_INT 35
71064: PPUSH
71065: CALL_OW 67
// p := p + 1 ;
71069: LD_ADDR_VAR 0 3
71073: PUSH
71074: LD_VAR 0 3
71078: PUSH
71079: LD_INT 1
71081: PLUS
71082: ST_TO_ADDR
// for i in tmp do
71083: LD_ADDR_VAR 0 1
71087: PUSH
71088: LD_VAR 0 2
71092: PUSH
71093: FOR_IN
71094: IFFALSE 71125
// if GetLives ( i ) < 1000 then
71096: LD_VAR 0 1
71100: PPUSH
71101: CALL_OW 256
71105: PUSH
71106: LD_INT 1000
71108: LESS
71109: IFFALSE 71123
// SetLives ( i , 1000 ) ;
71111: LD_VAR 0 1
71115: PPUSH
71116: LD_INT 1000
71118: PPUSH
71119: CALL_OW 234
71123: GO 71093
71125: POP
71126: POP
// until p > 20 ;
71127: LD_VAR 0 3
71131: PUSH
71132: LD_INT 20
71134: GREATER
71135: IFFALSE 71062
// end ;
71137: PPOPN 3
71139: END
// every 0 0$1 trigger StreamModeActive and sTime do
71140: LD_EXP 38
71144: IFFALSE 71152
71146: PUSH
71147: LD_EXP 89
71151: AND
71152: IFFALSE 71187
71154: GO 71156
71156: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
71157: LD_INT 28
71159: PPUSH
71160: LD_OWVAR 2
71164: PPUSH
71165: LD_INT 2
71167: PPUSH
71168: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
71172: LD_INT 30
71174: PPUSH
71175: LD_OWVAR 2
71179: PPUSH
71180: LD_INT 2
71182: PPUSH
71183: CALL_OW 322
// end ;
71187: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
71188: LD_EXP 38
71192: IFFALSE 71200
71194: PUSH
71195: LD_EXP 90
71199: AND
71200: IFFALSE 71321
71202: GO 71204
71204: DISABLE
71205: LD_INT 0
71207: PPUSH
71208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71209: LD_ADDR_VAR 0 2
71213: PUSH
71214: LD_INT 22
71216: PUSH
71217: LD_OWVAR 2
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 21
71228: PUSH
71229: LD_INT 1
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 3
71238: PUSH
71239: LD_INT 23
71241: PUSH
71242: LD_INT 0
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: LIST
71257: PPUSH
71258: CALL_OW 69
71262: ST_TO_ADDR
// if not tmp then
71263: LD_VAR 0 2
71267: NOT
71268: IFFALSE 71272
// exit ;
71270: GO 71321
// for i in tmp do
71272: LD_ADDR_VAR 0 1
71276: PUSH
71277: LD_VAR 0 2
71281: PUSH
71282: FOR_IN
71283: IFFALSE 71319
// begin if Crawls ( i ) then
71285: LD_VAR 0 1
71289: PPUSH
71290: CALL_OW 318
71294: IFFALSE 71305
// ComWalk ( i ) ;
71296: LD_VAR 0 1
71300: PPUSH
71301: CALL_OW 138
// SetClass ( i , 2 ) ;
71305: LD_VAR 0 1
71309: PPUSH
71310: LD_INT 2
71312: PPUSH
71313: CALL_OW 336
// end ;
71317: GO 71282
71319: POP
71320: POP
// end ;
71321: PPOPN 2
71323: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
71324: LD_EXP 38
71328: IFFALSE 71336
71330: PUSH
71331: LD_EXP 91
71335: AND
71336: IFFALSE 71626
71338: GO 71340
71340: DISABLE
71341: LD_INT 0
71343: PPUSH
71344: PPUSH
71345: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
71346: LD_OWVAR 2
71350: PPUSH
71351: LD_INT 9
71353: PPUSH
71354: LD_INT 1
71356: PPUSH
71357: LD_INT 1
71359: PPUSH
71360: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
71364: LD_INT 9
71366: PPUSH
71367: LD_OWVAR 2
71371: PPUSH
71372: CALL_OW 343
// uc_side := 9 ;
71376: LD_ADDR_OWVAR 20
71380: PUSH
71381: LD_INT 9
71383: ST_TO_ADDR
// uc_nation := 2 ;
71384: LD_ADDR_OWVAR 21
71388: PUSH
71389: LD_INT 2
71391: ST_TO_ADDR
// hc_name := Dark Warrior ;
71392: LD_ADDR_OWVAR 26
71396: PUSH
71397: LD_STRING Dark Warrior
71399: ST_TO_ADDR
// hc_gallery :=  ;
71400: LD_ADDR_OWVAR 33
71404: PUSH
71405: LD_STRING 
71407: ST_TO_ADDR
// hc_noskilllimit := true ;
71408: LD_ADDR_OWVAR 76
71412: PUSH
71413: LD_INT 1
71415: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
71416: LD_ADDR_OWVAR 31
71420: PUSH
71421: LD_INT 30
71423: PUSH
71424: LD_INT 30
71426: PUSH
71427: LD_INT 30
71429: PUSH
71430: LD_INT 30
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: ST_TO_ADDR
// un := CreateHuman ;
71439: LD_ADDR_VAR 0 3
71443: PUSH
71444: CALL_OW 44
71448: ST_TO_ADDR
// hc_noskilllimit := false ;
71449: LD_ADDR_OWVAR 76
71453: PUSH
71454: LD_INT 0
71456: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71457: LD_VAR 0 3
71461: PPUSH
71462: LD_INT 1
71464: PPUSH
71465: CALL_OW 51
// ToLua ( playRanger() ) ;
71469: LD_STRING playRanger()
71471: PPUSH
71472: CALL_OW 559
// p := 0 ;
71476: LD_ADDR_VAR 0 2
71480: PUSH
71481: LD_INT 0
71483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71484: LD_INT 35
71486: PPUSH
71487: CALL_OW 67
// p := p + 1 ;
71491: LD_ADDR_VAR 0 2
71495: PUSH
71496: LD_VAR 0 2
71500: PUSH
71501: LD_INT 1
71503: PLUS
71504: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
71505: LD_VAR 0 3
71509: PPUSH
71510: CALL_OW 256
71514: PUSH
71515: LD_INT 1000
71517: LESS
71518: IFFALSE 71532
// SetLives ( un , 1000 ) ;
71520: LD_VAR 0 3
71524: PPUSH
71525: LD_INT 1000
71527: PPUSH
71528: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
71532: LD_VAR 0 3
71536: PPUSH
71537: LD_INT 81
71539: PUSH
71540: LD_OWVAR 2
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 91
71551: PUSH
71552: LD_VAR 0 3
71556: PUSH
71557: LD_INT 30
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: LIST
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PPUSH
71569: CALL_OW 69
71573: PPUSH
71574: LD_VAR 0 3
71578: PPUSH
71579: CALL_OW 74
71583: PPUSH
71584: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
71588: LD_VAR 0 2
71592: PUSH
71593: LD_INT 80
71595: GREATER
71596: IFTRUE 71609
71598: PUSH
71599: LD_VAR 0 3
71603: PPUSH
71604: CALL_OW 301
71608: OR
71609: IFFALSE 71484
// if un then
71611: LD_VAR 0 3
71615: IFFALSE 71626
// RemoveUnit ( un ) ;
71617: LD_VAR 0 3
71621: PPUSH
71622: CALL_OW 64
// end ;
71626: PPOPN 3
71628: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
71629: LD_EXP 92
71633: IFFALSE 71749
71635: GO 71637
71637: DISABLE
71638: LD_INT 0
71640: PPUSH
71641: PPUSH
71642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71643: LD_ADDR_VAR 0 2
71647: PUSH
71648: LD_INT 81
71650: PUSH
71651: LD_OWVAR 2
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 21
71662: PUSH
71663: LD_INT 1
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PPUSH
71674: CALL_OW 69
71678: ST_TO_ADDR
// ToLua ( playComputer() ) ;
71679: LD_STRING playComputer()
71681: PPUSH
71682: CALL_OW 559
// if not tmp then
71686: LD_VAR 0 2
71690: NOT
71691: IFFALSE 71695
// exit ;
71693: GO 71749
// for i in tmp do
71695: LD_ADDR_VAR 0 1
71699: PUSH
71700: LD_VAR 0 2
71704: PUSH
71705: FOR_IN
71706: IFFALSE 71747
// for j := 1 to 4 do
71708: LD_ADDR_VAR 0 3
71712: PUSH
71713: DOUBLE
71714: LD_INT 1
71716: DEC
71717: ST_TO_ADDR
71718: LD_INT 4
71720: PUSH
71721: FOR_TO
71722: IFFALSE 71743
// SetSkill ( i , j , 10 ) ;
71724: LD_VAR 0 1
71728: PPUSH
71729: LD_VAR 0 3
71733: PPUSH
71734: LD_INT 10
71736: PPUSH
71737: CALL_OW 237
71741: GO 71721
71743: POP
71744: POP
71745: GO 71705
71747: POP
71748: POP
// end ;
71749: PPOPN 3
71751: END
// every 0 0$1 trigger s30 do var i , tmp ;
71752: LD_EXP 93
71756: IFFALSE 71825
71758: GO 71760
71760: DISABLE
71761: LD_INT 0
71763: PPUSH
71764: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71765: LD_ADDR_VAR 0 2
71769: PUSH
71770: LD_INT 22
71772: PUSH
71773: LD_OWVAR 2
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PPUSH
71782: CALL_OW 69
71786: ST_TO_ADDR
// if not tmp then
71787: LD_VAR 0 2
71791: NOT
71792: IFFALSE 71796
// exit ;
71794: GO 71825
// for i in tmp do
71796: LD_ADDR_VAR 0 1
71800: PUSH
71801: LD_VAR 0 2
71805: PUSH
71806: FOR_IN
71807: IFFALSE 71823
// SetLives ( i , 300 ) ;
71809: LD_VAR 0 1
71813: PPUSH
71814: LD_INT 300
71816: PPUSH
71817: CALL_OW 234
71821: GO 71806
71823: POP
71824: POP
// end ;
71825: PPOPN 2
71827: END
// every 0 0$1 trigger s60 do var i , tmp ;
71828: LD_EXP 94
71832: IFFALSE 71901
71834: GO 71836
71836: DISABLE
71837: LD_INT 0
71839: PPUSH
71840: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71841: LD_ADDR_VAR 0 2
71845: PUSH
71846: LD_INT 22
71848: PUSH
71849: LD_OWVAR 2
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PPUSH
71858: CALL_OW 69
71862: ST_TO_ADDR
// if not tmp then
71863: LD_VAR 0 2
71867: NOT
71868: IFFALSE 71872
// exit ;
71870: GO 71901
// for i in tmp do
71872: LD_ADDR_VAR 0 1
71876: PUSH
71877: LD_VAR 0 2
71881: PUSH
71882: FOR_IN
71883: IFFALSE 71899
// SetLives ( i , 600 ) ;
71885: LD_VAR 0 1
71889: PPUSH
71890: LD_INT 600
71892: PPUSH
71893: CALL_OW 234
71897: GO 71882
71899: POP
71900: POP
// end ;
71901: PPOPN 2
71903: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71904: LD_INT 0
71906: PPUSH
// case cmd of 301 :
71907: LD_VAR 0 1
71911: PUSH
71912: LD_INT 301
71914: DOUBLE
71915: EQUAL
71916: IFTRUE 71920
71918: GO 71952
71920: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
71921: LD_VAR 0 6
71925: PPUSH
71926: LD_VAR 0 7
71930: PPUSH
71931: LD_VAR 0 8
71935: PPUSH
71936: LD_VAR 0 4
71940: PPUSH
71941: LD_VAR 0 5
71945: PPUSH
71946: CALL 73165 0 5
71950: GO 72073
71952: LD_INT 302
71954: DOUBLE
71955: EQUAL
71956: IFTRUE 71960
71958: GO 71997
71960: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
71961: LD_VAR 0 6
71965: PPUSH
71966: LD_VAR 0 7
71970: PPUSH
71971: LD_VAR 0 8
71975: PPUSH
71976: LD_VAR 0 9
71980: PPUSH
71981: LD_VAR 0 4
71985: PPUSH
71986: LD_VAR 0 5
71990: PPUSH
71991: CALL 73256 0 6
71995: GO 72073
71997: LD_INT 303
71999: DOUBLE
72000: EQUAL
72001: IFTRUE 72005
72003: GO 72042
72005: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
72006: LD_VAR 0 6
72010: PPUSH
72011: LD_VAR 0 7
72015: PPUSH
72016: LD_VAR 0 8
72020: PPUSH
72021: LD_VAR 0 9
72025: PPUSH
72026: LD_VAR 0 4
72030: PPUSH
72031: LD_VAR 0 5
72035: PPUSH
72036: CALL 72078 0 6
72040: GO 72073
72042: LD_INT 304
72044: DOUBLE
72045: EQUAL
72046: IFTRUE 72050
72048: GO 72072
72050: POP
// hHackTeleport ( unit , x , y ) ; end ;
72051: LD_VAR 0 2
72055: PPUSH
72056: LD_VAR 0 4
72060: PPUSH
72061: LD_VAR 0 5
72065: PPUSH
72066: CALL 73849 0 3
72070: GO 72073
72072: POP
// end ;
72073: LD_VAR 0 12
72077: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
72078: LD_INT 0
72080: PPUSH
72081: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
72082: LD_VAR 0 1
72086: PUSH
72087: LD_INT 1
72089: LESS
72090: IFTRUE 72102
72092: PUSH
72093: LD_VAR 0 1
72097: PUSH
72098: LD_INT 3
72100: GREATER
72101: OR
72102: IFTRUE 72120
72104: PUSH
72105: LD_VAR 0 5
72109: PPUSH
72110: LD_VAR 0 6
72114: PPUSH
72115: CALL_OW 428
72119: OR
72120: IFFALSE 72124
// exit ;
72122: GO 72852
// uc_side := your_side ;
72124: LD_ADDR_OWVAR 20
72128: PUSH
72129: LD_OWVAR 2
72133: ST_TO_ADDR
// uc_nation := nation ;
72134: LD_ADDR_OWVAR 21
72138: PUSH
72139: LD_VAR 0 1
72143: ST_TO_ADDR
// bc_level = 1 ;
72144: LD_ADDR_OWVAR 43
72148: PUSH
72149: LD_INT 1
72151: ST_TO_ADDR
// case btype of 1 :
72152: LD_VAR 0 2
72156: PUSH
72157: LD_INT 1
72159: DOUBLE
72160: EQUAL
72161: IFTRUE 72165
72163: GO 72176
72165: POP
// bc_type := b_depot ; 2 :
72166: LD_ADDR_OWVAR 42
72170: PUSH
72171: LD_INT 0
72173: ST_TO_ADDR
72174: GO 72796
72176: LD_INT 2
72178: DOUBLE
72179: EQUAL
72180: IFTRUE 72184
72182: GO 72195
72184: POP
// bc_type := b_warehouse ; 3 :
72185: LD_ADDR_OWVAR 42
72189: PUSH
72190: LD_INT 1
72192: ST_TO_ADDR
72193: GO 72796
72195: LD_INT 3
72197: DOUBLE
72198: EQUAL
72199: IFTRUE 72203
72201: GO 72214
72203: POP
// bc_type := b_lab ; 4 .. 9 :
72204: LD_ADDR_OWVAR 42
72208: PUSH
72209: LD_INT 6
72211: ST_TO_ADDR
72212: GO 72796
72214: LD_INT 4
72216: DOUBLE
72217: GREATEREQUAL
72218: IFFALSE 72226
72220: LD_INT 9
72222: DOUBLE
72223: LESSEQUAL
72224: IFTRUE 72228
72226: GO 72288
72228: POP
// begin bc_type := b_lab_half ;
72229: LD_ADDR_OWVAR 42
72233: PUSH
72234: LD_INT 7
72236: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
72237: LD_ADDR_OWVAR 44
72241: PUSH
72242: LD_INT 10
72244: PUSH
72245: LD_INT 11
72247: PUSH
72248: LD_INT 12
72250: PUSH
72251: LD_INT 15
72253: PUSH
72254: LD_INT 14
72256: PUSH
72257: LD_INT 13
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: PUSH
72268: LD_VAR 0 2
72272: PUSH
72273: LD_INT 3
72275: MINUS
72276: ARRAY
72277: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
72278: LD_ADDR_OWVAR 45
72282: PUSH
72283: LD_INT 9
72285: ST_TO_ADDR
// end ; 10 .. 13 :
72286: GO 72796
72288: LD_INT 10
72290: DOUBLE
72291: GREATEREQUAL
72292: IFFALSE 72300
72294: LD_INT 13
72296: DOUBLE
72297: LESSEQUAL
72298: IFTRUE 72302
72300: GO 72379
72302: POP
// begin bc_type := b_lab_full ;
72303: LD_ADDR_OWVAR 42
72307: PUSH
72308: LD_INT 8
72310: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
72311: LD_ADDR_OWVAR 44
72315: PUSH
72316: LD_INT 10
72318: PUSH
72319: LD_INT 12
72321: PUSH
72322: LD_INT 14
72324: PUSH
72325: LD_INT 13
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: PUSH
72334: LD_VAR 0 2
72338: PUSH
72339: LD_INT 9
72341: MINUS
72342: ARRAY
72343: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
72344: LD_ADDR_OWVAR 45
72348: PUSH
72349: LD_INT 11
72351: PUSH
72352: LD_INT 15
72354: PUSH
72355: LD_INT 12
72357: PUSH
72358: LD_INT 15
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: PUSH
72367: LD_VAR 0 2
72371: PUSH
72372: LD_INT 9
72374: MINUS
72375: ARRAY
72376: ST_TO_ADDR
// end ; 14 :
72377: GO 72796
72379: LD_INT 14
72381: DOUBLE
72382: EQUAL
72383: IFTRUE 72387
72385: GO 72398
72387: POP
// bc_type := b_workshop ; 15 :
72388: LD_ADDR_OWVAR 42
72392: PUSH
72393: LD_INT 2
72395: ST_TO_ADDR
72396: GO 72796
72398: LD_INT 15
72400: DOUBLE
72401: EQUAL
72402: IFTRUE 72406
72404: GO 72417
72406: POP
// bc_type := b_factory ; 16 :
72407: LD_ADDR_OWVAR 42
72411: PUSH
72412: LD_INT 3
72414: ST_TO_ADDR
72415: GO 72796
72417: LD_INT 16
72419: DOUBLE
72420: EQUAL
72421: IFTRUE 72425
72423: GO 72436
72425: POP
// bc_type := b_ext_gun ; 17 :
72426: LD_ADDR_OWVAR 42
72430: PUSH
72431: LD_INT 17
72433: ST_TO_ADDR
72434: GO 72796
72436: LD_INT 17
72438: DOUBLE
72439: EQUAL
72440: IFTRUE 72444
72442: GO 72472
72444: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
72445: LD_ADDR_OWVAR 42
72449: PUSH
72450: LD_INT 19
72452: PUSH
72453: LD_INT 23
72455: PUSH
72456: LD_INT 19
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: LIST
72463: PUSH
72464: LD_VAR 0 1
72468: ARRAY
72469: ST_TO_ADDR
72470: GO 72796
72472: LD_INT 18
72474: DOUBLE
72475: EQUAL
72476: IFTRUE 72480
72478: GO 72491
72480: POP
// bc_type := b_ext_radar ; 19 :
72481: LD_ADDR_OWVAR 42
72485: PUSH
72486: LD_INT 20
72488: ST_TO_ADDR
72489: GO 72796
72491: LD_INT 19
72493: DOUBLE
72494: EQUAL
72495: IFTRUE 72499
72497: GO 72510
72499: POP
// bc_type := b_ext_radio ; 20 :
72500: LD_ADDR_OWVAR 42
72504: PUSH
72505: LD_INT 22
72507: ST_TO_ADDR
72508: GO 72796
72510: LD_INT 20
72512: DOUBLE
72513: EQUAL
72514: IFTRUE 72518
72516: GO 72529
72518: POP
// bc_type := b_ext_siberium ; 21 :
72519: LD_ADDR_OWVAR 42
72523: PUSH
72524: LD_INT 21
72526: ST_TO_ADDR
72527: GO 72796
72529: LD_INT 21
72531: DOUBLE
72532: EQUAL
72533: IFTRUE 72537
72535: GO 72548
72537: POP
// bc_type := b_ext_computer ; 22 :
72538: LD_ADDR_OWVAR 42
72542: PUSH
72543: LD_INT 24
72545: ST_TO_ADDR
72546: GO 72796
72548: LD_INT 22
72550: DOUBLE
72551: EQUAL
72552: IFTRUE 72556
72554: GO 72567
72556: POP
// bc_type := b_ext_track ; 23 :
72557: LD_ADDR_OWVAR 42
72561: PUSH
72562: LD_INT 16
72564: ST_TO_ADDR
72565: GO 72796
72567: LD_INT 23
72569: DOUBLE
72570: EQUAL
72571: IFTRUE 72575
72573: GO 72586
72575: POP
// bc_type := b_ext_laser ; 24 :
72576: LD_ADDR_OWVAR 42
72580: PUSH
72581: LD_INT 25
72583: ST_TO_ADDR
72584: GO 72796
72586: LD_INT 24
72588: DOUBLE
72589: EQUAL
72590: IFTRUE 72594
72592: GO 72605
72594: POP
// bc_type := b_control_tower ; 25 :
72595: LD_ADDR_OWVAR 42
72599: PUSH
72600: LD_INT 36
72602: ST_TO_ADDR
72603: GO 72796
72605: LD_INT 25
72607: DOUBLE
72608: EQUAL
72609: IFTRUE 72613
72611: GO 72624
72613: POP
// bc_type := b_breastwork ; 26 :
72614: LD_ADDR_OWVAR 42
72618: PUSH
72619: LD_INT 31
72621: ST_TO_ADDR
72622: GO 72796
72624: LD_INT 26
72626: DOUBLE
72627: EQUAL
72628: IFTRUE 72632
72630: GO 72643
72632: POP
// bc_type := b_bunker ; 27 :
72633: LD_ADDR_OWVAR 42
72637: PUSH
72638: LD_INT 32
72640: ST_TO_ADDR
72641: GO 72796
72643: LD_INT 27
72645: DOUBLE
72646: EQUAL
72647: IFTRUE 72651
72649: GO 72662
72651: POP
// bc_type := b_turret ; 28 :
72652: LD_ADDR_OWVAR 42
72656: PUSH
72657: LD_INT 33
72659: ST_TO_ADDR
72660: GO 72796
72662: LD_INT 28
72664: DOUBLE
72665: EQUAL
72666: IFTRUE 72670
72668: GO 72681
72670: POP
// bc_type := b_armoury ; 29 :
72671: LD_ADDR_OWVAR 42
72675: PUSH
72676: LD_INT 4
72678: ST_TO_ADDR
72679: GO 72796
72681: LD_INT 29
72683: DOUBLE
72684: EQUAL
72685: IFTRUE 72689
72687: GO 72700
72689: POP
// bc_type := b_barracks ; 30 :
72690: LD_ADDR_OWVAR 42
72694: PUSH
72695: LD_INT 5
72697: ST_TO_ADDR
72698: GO 72796
72700: LD_INT 30
72702: DOUBLE
72703: EQUAL
72704: IFTRUE 72708
72706: GO 72719
72708: POP
// bc_type := b_solar_power ; 31 :
72709: LD_ADDR_OWVAR 42
72713: PUSH
72714: LD_INT 27
72716: ST_TO_ADDR
72717: GO 72796
72719: LD_INT 31
72721: DOUBLE
72722: EQUAL
72723: IFTRUE 72727
72725: GO 72738
72727: POP
// bc_type := b_oil_power ; 32 :
72728: LD_ADDR_OWVAR 42
72732: PUSH
72733: LD_INT 26
72735: ST_TO_ADDR
72736: GO 72796
72738: LD_INT 32
72740: DOUBLE
72741: EQUAL
72742: IFTRUE 72746
72744: GO 72757
72746: POP
// bc_type := b_siberite_power ; 33 :
72747: LD_ADDR_OWVAR 42
72751: PUSH
72752: LD_INT 28
72754: ST_TO_ADDR
72755: GO 72796
72757: LD_INT 33
72759: DOUBLE
72760: EQUAL
72761: IFTRUE 72765
72763: GO 72776
72765: POP
// bc_type := b_oil_mine ; 34 :
72766: LD_ADDR_OWVAR 42
72770: PUSH
72771: LD_INT 29
72773: ST_TO_ADDR
72774: GO 72796
72776: LD_INT 34
72778: DOUBLE
72779: EQUAL
72780: IFTRUE 72784
72782: GO 72795
72784: POP
// bc_type := b_siberite_mine ; end ;
72785: LD_ADDR_OWVAR 42
72789: PUSH
72790: LD_INT 30
72792: ST_TO_ADDR
72793: GO 72796
72795: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
72796: LD_ADDR_VAR 0 8
72800: PUSH
72801: LD_VAR 0 5
72805: PPUSH
72806: LD_VAR 0 6
72810: PPUSH
72811: LD_VAR 0 3
72815: PPUSH
72816: CALL_OW 47
72820: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
72821: LD_OWVAR 42
72825: PUSH
72826: LD_INT 32
72828: PUSH
72829: LD_INT 33
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: IN
72836: IFFALSE 72852
// PlaceWeaponTurret ( b , weapon ) ;
72838: LD_VAR 0 8
72842: PPUSH
72843: LD_VAR 0 4
72847: PPUSH
72848: CALL_OW 431
// end ;
72852: LD_VAR 0 7
72856: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
72857: LD_INT 0
72859: PPUSH
72860: PPUSH
72861: PPUSH
72862: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72863: LD_ADDR_VAR 0 4
72867: PUSH
72868: LD_INT 22
72870: PUSH
72871: LD_OWVAR 2
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 2
72882: PUSH
72883: LD_INT 30
72885: PUSH
72886: LD_INT 0
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PUSH
72893: LD_INT 30
72895: PUSH
72896: LD_INT 1
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: LIST
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PPUSH
72912: CALL_OW 69
72916: ST_TO_ADDR
// if not tmp then
72917: LD_VAR 0 4
72921: NOT
72922: IFFALSE 72926
// exit ;
72924: GO 72985
// for i in tmp do
72926: LD_ADDR_VAR 0 2
72930: PUSH
72931: LD_VAR 0 4
72935: PUSH
72936: FOR_IN
72937: IFFALSE 72983
// for j = 1 to 3 do
72939: LD_ADDR_VAR 0 3
72943: PUSH
72944: DOUBLE
72945: LD_INT 1
72947: DEC
72948: ST_TO_ADDR
72949: LD_INT 3
72951: PUSH
72952: FOR_TO
72953: IFFALSE 72979
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
72955: LD_VAR 0 2
72959: PPUSH
72960: CALL_OW 274
72964: PPUSH
72965: LD_VAR 0 3
72969: PPUSH
72970: LD_INT 99999
72972: PPUSH
72973: CALL_OW 277
72977: GO 72952
72979: POP
72980: POP
72981: GO 72936
72983: POP
72984: POP
// end ;
72985: LD_VAR 0 1
72989: RET
// export function hHackSetLevel10 ; var i , j ; begin
72990: LD_INT 0
72992: PPUSH
72993: PPUSH
72994: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72995: LD_ADDR_VAR 0 2
72999: PUSH
73000: LD_INT 21
73002: PUSH
73003: LD_INT 1
73005: PUSH
73006: EMPTY
73007: LIST
73008: LIST
73009: PPUSH
73010: CALL_OW 69
73014: PUSH
73015: FOR_IN
73016: IFFALSE 73068
// if IsSelected ( i ) then
73018: LD_VAR 0 2
73022: PPUSH
73023: CALL_OW 306
73027: IFFALSE 73066
// begin for j := 1 to 4 do
73029: LD_ADDR_VAR 0 3
73033: PUSH
73034: DOUBLE
73035: LD_INT 1
73037: DEC
73038: ST_TO_ADDR
73039: LD_INT 4
73041: PUSH
73042: FOR_TO
73043: IFFALSE 73064
// SetSkill ( i , j , 10 ) ;
73045: LD_VAR 0 2
73049: PPUSH
73050: LD_VAR 0 3
73054: PPUSH
73055: LD_INT 10
73057: PPUSH
73058: CALL_OW 237
73062: GO 73042
73064: POP
73065: POP
// end ;
73066: GO 73015
73068: POP
73069: POP
// end ;
73070: LD_VAR 0 1
73074: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
73075: LD_INT 0
73077: PPUSH
73078: PPUSH
73079: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
73080: LD_ADDR_VAR 0 2
73084: PUSH
73085: LD_INT 22
73087: PUSH
73088: LD_OWVAR 2
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 21
73099: PUSH
73100: LD_INT 1
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PPUSH
73111: CALL_OW 69
73115: PUSH
73116: FOR_IN
73117: IFFALSE 73158
// begin for j := 1 to 4 do
73119: LD_ADDR_VAR 0 3
73123: PUSH
73124: DOUBLE
73125: LD_INT 1
73127: DEC
73128: ST_TO_ADDR
73129: LD_INT 4
73131: PUSH
73132: FOR_TO
73133: IFFALSE 73154
// SetSkill ( i , j , 10 ) ;
73135: LD_VAR 0 2
73139: PPUSH
73140: LD_VAR 0 3
73144: PPUSH
73145: LD_INT 10
73147: PPUSH
73148: CALL_OW 237
73152: GO 73132
73154: POP
73155: POP
// end ;
73156: GO 73116
73158: POP
73159: POP
// end ;
73160: LD_VAR 0 1
73164: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
73165: LD_INT 0
73167: PPUSH
// uc_side := your_side ;
73168: LD_ADDR_OWVAR 20
73172: PUSH
73173: LD_OWVAR 2
73177: ST_TO_ADDR
// uc_nation := nation ;
73178: LD_ADDR_OWVAR 21
73182: PUSH
73183: LD_VAR 0 1
73187: ST_TO_ADDR
// InitHc ;
73188: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
73192: LD_INT 0
73194: PPUSH
73195: LD_VAR 0 2
73199: PPUSH
73200: LD_VAR 0 3
73204: PPUSH
73205: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
73209: LD_VAR 0 4
73213: PPUSH
73214: LD_VAR 0 5
73218: PPUSH
73219: CALL_OW 428
73223: PUSH
73224: LD_INT 0
73226: EQUAL
73227: IFFALSE 73251
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
73229: CALL_OW 44
73233: PPUSH
73234: LD_VAR 0 4
73238: PPUSH
73239: LD_VAR 0 5
73243: PPUSH
73244: LD_INT 1
73246: PPUSH
73247: CALL_OW 48
// end ;
73251: LD_VAR 0 6
73255: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
73256: LD_INT 0
73258: PPUSH
73259: PPUSH
// uc_side := your_side ;
73260: LD_ADDR_OWVAR 20
73264: PUSH
73265: LD_OWVAR 2
73269: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
73270: LD_VAR 0 1
73274: PUSH
73275: LD_INT 1
73277: PUSH
73278: LD_INT 2
73280: PUSH
73281: LD_INT 3
73283: PUSH
73284: LD_INT 4
73286: PUSH
73287: LD_INT 5
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: IN
73297: IFFALSE 73309
// uc_nation := nation_american else
73299: LD_ADDR_OWVAR 21
73303: PUSH
73304: LD_INT 1
73306: ST_TO_ADDR
73307: GO 73352
// if chassis in [ 11 , 12 , 13 , 14 ] then
73309: LD_VAR 0 1
73313: PUSH
73314: LD_INT 11
73316: PUSH
73317: LD_INT 12
73319: PUSH
73320: LD_INT 13
73322: PUSH
73323: LD_INT 14
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: IN
73332: IFFALSE 73344
// uc_nation := nation_arabian else
73334: LD_ADDR_OWVAR 21
73338: PUSH
73339: LD_INT 2
73341: ST_TO_ADDR
73342: GO 73352
// uc_nation := nation_russian ;
73344: LD_ADDR_OWVAR 21
73348: PUSH
73349: LD_INT 3
73351: ST_TO_ADDR
// vc_chassis := chassis ;
73352: LD_ADDR_OWVAR 37
73356: PUSH
73357: LD_VAR 0 1
73361: ST_TO_ADDR
// vc_engine := engine ;
73362: LD_ADDR_OWVAR 39
73366: PUSH
73367: LD_VAR 0 2
73371: ST_TO_ADDR
// vc_control := control ;
73372: LD_ADDR_OWVAR 38
73376: PUSH
73377: LD_VAR 0 3
73381: ST_TO_ADDR
// vc_weapon := weapon ;
73382: LD_ADDR_OWVAR 40
73386: PUSH
73387: LD_VAR 0 4
73391: ST_TO_ADDR
// un := CreateVehicle ;
73392: LD_ADDR_VAR 0 8
73396: PUSH
73397: CALL_OW 45
73401: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
73402: LD_VAR 0 8
73406: PPUSH
73407: LD_INT 0
73409: PPUSH
73410: LD_INT 5
73412: PPUSH
73413: CALL_OW 12
73417: PPUSH
73418: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
73422: LD_VAR 0 8
73426: PPUSH
73427: LD_VAR 0 5
73431: PPUSH
73432: LD_VAR 0 6
73436: PPUSH
73437: LD_INT 1
73439: PPUSH
73440: CALL_OW 48
// end ;
73444: LD_VAR 0 7
73448: RET
// export hInvincible ; every 1 do
73449: GO 73451
73451: DISABLE
// hInvincible := [ ] ;
73452: LD_ADDR_EXP 95
73456: PUSH
73457: EMPTY
73458: ST_TO_ADDR
73459: END
// every 10 do var i ;
73460: GO 73462
73462: DISABLE
73463: LD_INT 0
73465: PPUSH
// begin enable ;
73466: ENABLE
// if not hInvincible then
73467: LD_EXP 95
73471: NOT
73472: IFFALSE 73476
// exit ;
73474: GO 73520
// for i in hInvincible do
73476: LD_ADDR_VAR 0 1
73480: PUSH
73481: LD_EXP 95
73485: PUSH
73486: FOR_IN
73487: IFFALSE 73518
// if GetLives ( i ) < 1000 then
73489: LD_VAR 0 1
73493: PPUSH
73494: CALL_OW 256
73498: PUSH
73499: LD_INT 1000
73501: LESS
73502: IFFALSE 73516
// SetLives ( i , 1000 ) ;
73504: LD_VAR 0 1
73508: PPUSH
73509: LD_INT 1000
73511: PPUSH
73512: CALL_OW 234
73516: GO 73486
73518: POP
73519: POP
// end ;
73520: PPOPN 1
73522: END
// export function hHackInvincible ; var i ; begin
73523: LD_INT 0
73525: PPUSH
73526: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
73527: LD_ADDR_VAR 0 2
73531: PUSH
73532: LD_INT 2
73534: PUSH
73535: LD_INT 21
73537: PUSH
73538: LD_INT 1
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PUSH
73545: LD_INT 21
73547: PUSH
73548: LD_INT 2
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: LIST
73559: PPUSH
73560: CALL_OW 69
73564: PUSH
73565: FOR_IN
73566: IFFALSE 73627
// if IsSelected ( i ) then
73568: LD_VAR 0 2
73572: PPUSH
73573: CALL_OW 306
73577: IFFALSE 73625
// begin if i in hInvincible then
73579: LD_VAR 0 2
73583: PUSH
73584: LD_EXP 95
73588: IN
73589: IFFALSE 73609
// hInvincible := hInvincible diff i else
73591: LD_ADDR_EXP 95
73595: PUSH
73596: LD_EXP 95
73600: PUSH
73601: LD_VAR 0 2
73605: DIFF
73606: ST_TO_ADDR
73607: GO 73625
// hInvincible := hInvincible union i ;
73609: LD_ADDR_EXP 95
73613: PUSH
73614: LD_EXP 95
73618: PUSH
73619: LD_VAR 0 2
73623: UNION
73624: ST_TO_ADDR
// end ;
73625: GO 73565
73627: POP
73628: POP
// end ;
73629: LD_VAR 0 1
73633: RET
// export function hHackInvisible ; var i , j ; begin
73634: LD_INT 0
73636: PPUSH
73637: PPUSH
73638: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73639: LD_ADDR_VAR 0 2
73643: PUSH
73644: LD_INT 21
73646: PUSH
73647: LD_INT 1
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PPUSH
73654: CALL_OW 69
73658: PUSH
73659: FOR_IN
73660: IFFALSE 73684
// if IsSelected ( i ) then
73662: LD_VAR 0 2
73666: PPUSH
73667: CALL_OW 306
73671: IFFALSE 73682
// ComForceInvisible ( i ) ;
73673: LD_VAR 0 2
73677: PPUSH
73678: CALL_OW 496
73682: GO 73659
73684: POP
73685: POP
// end ;
73686: LD_VAR 0 1
73690: RET
// export function hHackChangeYourSide ; begin
73691: LD_INT 0
73693: PPUSH
// if your_side = 8 then
73694: LD_OWVAR 2
73698: PUSH
73699: LD_INT 8
73701: EQUAL
73702: IFFALSE 73714
// your_side := 0 else
73704: LD_ADDR_OWVAR 2
73708: PUSH
73709: LD_INT 0
73711: ST_TO_ADDR
73712: GO 73728
// your_side := your_side + 1 ;
73714: LD_ADDR_OWVAR 2
73718: PUSH
73719: LD_OWVAR 2
73723: PUSH
73724: LD_INT 1
73726: PLUS
73727: ST_TO_ADDR
// end ;
73728: LD_VAR 0 1
73732: RET
// export function hHackChangeUnitSide ; var i , j ; begin
73733: LD_INT 0
73735: PPUSH
73736: PPUSH
73737: PPUSH
// for i in all_units do
73738: LD_ADDR_VAR 0 2
73742: PUSH
73743: LD_OWVAR 3
73747: PUSH
73748: FOR_IN
73749: IFFALSE 73827
// if IsSelected ( i ) then
73751: LD_VAR 0 2
73755: PPUSH
73756: CALL_OW 306
73760: IFFALSE 73825
// begin j := GetSide ( i ) ;
73762: LD_ADDR_VAR 0 3
73766: PUSH
73767: LD_VAR 0 2
73771: PPUSH
73772: CALL_OW 255
73776: ST_TO_ADDR
// if j = 8 then
73777: LD_VAR 0 3
73781: PUSH
73782: LD_INT 8
73784: EQUAL
73785: IFFALSE 73797
// j := 0 else
73787: LD_ADDR_VAR 0 3
73791: PUSH
73792: LD_INT 0
73794: ST_TO_ADDR
73795: GO 73811
// j := j + 1 ;
73797: LD_ADDR_VAR 0 3
73801: PUSH
73802: LD_VAR 0 3
73806: PUSH
73807: LD_INT 1
73809: PLUS
73810: ST_TO_ADDR
// SetSide ( i , j ) ;
73811: LD_VAR 0 2
73815: PPUSH
73816: LD_VAR 0 3
73820: PPUSH
73821: CALL_OW 235
// end ;
73825: GO 73748
73827: POP
73828: POP
// end ;
73829: LD_VAR 0 1
73833: RET
// export function hHackFog ; begin
73834: LD_INT 0
73836: PPUSH
// FogOff ( true ) ;
73837: LD_INT 1
73839: PPUSH
73840: CALL_OW 344
// end ;
73844: LD_VAR 0 1
73848: RET
// export function hHackTeleport ( unit , x , y ) ; begin
73849: LD_INT 0
73851: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
73852: LD_VAR 0 1
73856: PPUSH
73857: LD_VAR 0 2
73861: PPUSH
73862: LD_VAR 0 3
73866: PPUSH
73867: LD_INT 1
73869: PPUSH
73870: LD_INT 1
73872: PPUSH
73873: CALL_OW 483
// CenterOnXY ( x , y ) ;
73877: LD_VAR 0 2
73881: PPUSH
73882: LD_VAR 0 3
73886: PPUSH
73887: CALL_OW 84
// end ;
73891: LD_VAR 0 4
73895: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
73896: LD_INT 0
73898: PPUSH
73899: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
73900: LD_VAR 0 1
73904: NOT
73905: IFTRUE 73924
73907: PUSH
73908: LD_VAR 0 2
73912: PPUSH
73913: LD_VAR 0 3
73917: PPUSH
73918: CALL_OW 488
73922: NOT
73923: OR
73924: IFTRUE 73959
73926: PUSH
73927: LD_VAR 0 1
73931: PPUSH
73932: CALL_OW 266
73936: PUSH
73937: LD_INT 3
73939: NONEQUAL
73940: IFFALSE 73958
73942: PUSH
73943: LD_VAR 0 1
73947: PPUSH
73948: CALL_OW 247
73952: PUSH
73953: LD_INT 1
73955: EQUAL
73956: NOT
73957: AND
73958: OR
73959: IFFALSE 73963
// exit ;
73961: GO 74245
// if GetType ( factory ) = unit_human then
73963: LD_VAR 0 1
73967: PPUSH
73968: CALL_OW 247
73972: PUSH
73973: LD_INT 1
73975: EQUAL
73976: IFFALSE 73993
// factory := IsInUnit ( factory ) ;
73978: LD_ADDR_VAR 0 1
73982: PUSH
73983: LD_VAR 0 1
73987: PPUSH
73988: CALL_OW 310
73992: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
73993: LD_VAR 0 1
73997: PPUSH
73998: CALL_OW 266
74002: PUSH
74003: LD_INT 3
74005: NONEQUAL
74006: IFFALSE 74010
// exit ;
74008: GO 74245
// for i := 1 to Count ( factoryWaypoints ) do
74010: LD_ADDR_VAR 0 5
74014: PUSH
74015: DOUBLE
74016: LD_INT 1
74018: DEC
74019: ST_TO_ADDR
74020: LD_EXP 96
74024: PPUSH
74025: CALL 17842 0 1
74029: PUSH
74030: FOR_TO
74031: IFFALSE 74193
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
74033: LD_VAR 0 2
74037: PPUSH
74038: LD_VAR 0 3
74042: PPUSH
74043: CALL_OW 428
74047: PUSH
74048: LD_EXP 96
74052: PUSH
74053: LD_VAR 0 5
74057: ARRAY
74058: PUSH
74059: LD_INT 2
74061: ARRAY
74062: EQUAL
74063: IFFALSE 74095
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74065: LD_ADDR_EXP 96
74069: PUSH
74070: LD_EXP 96
74074: PPUSH
74075: LD_VAR 0 5
74079: PPUSH
74080: CALL_OW 3
74084: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74085: CALL 74250 0 0
// exit ;
74089: POP
74090: POP
74091: GO 74245
// end else
74093: GO 74191
// if factory = factoryWaypoints [ i ] [ 2 ] then
74095: LD_VAR 0 1
74099: PUSH
74100: LD_EXP 96
74104: PUSH
74105: LD_VAR 0 5
74109: ARRAY
74110: PUSH
74111: LD_INT 2
74113: ARRAY
74114: EQUAL
74115: IFFALSE 74191
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74117: LD_ADDR_EXP 96
74121: PUSH
74122: LD_EXP 96
74126: PPUSH
74127: LD_VAR 0 5
74131: PPUSH
74132: CALL_OW 3
74136: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74137: LD_ADDR_EXP 96
74141: PUSH
74142: LD_EXP 96
74146: PPUSH
74147: LD_VAR 0 1
74151: PPUSH
74152: CALL_OW 255
74156: PUSH
74157: LD_VAR 0 1
74161: PUSH
74162: LD_VAR 0 2
74166: PUSH
74167: LD_VAR 0 3
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: PPUSH
74178: CALL 53818 0 2
74182: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74183: CALL 74250 0 0
// exit ;
74187: POP
74188: POP
74189: GO 74245
// end ; end ;
74191: GO 74030
74193: POP
74194: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74195: LD_ADDR_EXP 96
74199: PUSH
74200: LD_EXP 96
74204: PPUSH
74205: LD_VAR 0 1
74209: PPUSH
74210: CALL_OW 255
74214: PUSH
74215: LD_VAR 0 1
74219: PUSH
74220: LD_VAR 0 2
74224: PUSH
74225: LD_VAR 0 3
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: PPUSH
74236: CALL 53818 0 2
74240: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74241: CALL 74250 0 0
// end ;
74245: LD_VAR 0 4
74249: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
74250: LD_INT 0
74252: PPUSH
74253: PPUSH
74254: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
74255: LD_STRING resetFactoryWaypoint();
74257: PPUSH
74258: CALL_OW 559
// if factoryWaypoints then
74262: LD_EXP 96
74266: IFFALSE 74387
// begin list := factoryWaypoints ;
74268: LD_ADDR_VAR 0 3
74272: PUSH
74273: LD_EXP 96
74277: ST_TO_ADDR
// for i := 1 to list do
74278: LD_ADDR_VAR 0 2
74282: PUSH
74283: DOUBLE
74284: LD_INT 1
74286: DEC
74287: ST_TO_ADDR
74288: LD_VAR 0 3
74292: PUSH
74293: FOR_TO
74294: IFFALSE 74385
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74296: LD_STRING setFactoryWaypointXY(
74298: PUSH
74299: LD_VAR 0 3
74303: PUSH
74304: LD_VAR 0 2
74308: ARRAY
74309: PUSH
74310: LD_INT 1
74312: ARRAY
74313: STR
74314: PUSH
74315: LD_STRING ,
74317: STR
74318: PUSH
74319: LD_VAR 0 3
74323: PUSH
74324: LD_VAR 0 2
74328: ARRAY
74329: PUSH
74330: LD_INT 2
74332: ARRAY
74333: STR
74334: PUSH
74335: LD_STRING ,
74337: STR
74338: PUSH
74339: LD_VAR 0 3
74343: PUSH
74344: LD_VAR 0 2
74348: ARRAY
74349: PUSH
74350: LD_INT 3
74352: ARRAY
74353: STR
74354: PUSH
74355: LD_STRING ,
74357: STR
74358: PUSH
74359: LD_VAR 0 3
74363: PUSH
74364: LD_VAR 0 2
74368: ARRAY
74369: PUSH
74370: LD_INT 4
74372: ARRAY
74373: STR
74374: PUSH
74375: LD_STRING )
74377: STR
74378: PPUSH
74379: CALL_OW 559
74383: GO 74293
74385: POP
74386: POP
// end ; end ;
74387: LD_VAR 0 1
74391: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
74392: LD_INT 0
74394: PPUSH
// if HexInfo ( x , y ) = warehouse then
74395: LD_VAR 0 2
74399: PPUSH
74400: LD_VAR 0 3
74404: PPUSH
74405: CALL_OW 428
74409: PUSH
74410: LD_VAR 0 1
74414: EQUAL
74415: IFFALSE 74442
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
74417: LD_ADDR_EXP 98
74421: PUSH
74422: LD_EXP 98
74426: PPUSH
74427: LD_VAR 0 1
74431: PPUSH
74432: LD_INT 0
74434: PPUSH
74435: CALL_OW 1
74439: ST_TO_ADDR
74440: GO 74493
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
74442: LD_ADDR_EXP 98
74446: PUSH
74447: LD_EXP 98
74451: PPUSH
74452: LD_VAR 0 1
74456: PPUSH
74457: LD_VAR 0 1
74461: PPUSH
74462: CALL_OW 255
74466: PUSH
74467: LD_VAR 0 1
74471: PUSH
74472: LD_VAR 0 2
74476: PUSH
74477: LD_VAR 0 3
74481: PUSH
74482: EMPTY
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: PPUSH
74488: CALL_OW 1
74492: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
74493: CALL 74502 0 0
// end ;
74497: LD_VAR 0 4
74501: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
74502: LD_INT 0
74504: PPUSH
74505: PPUSH
74506: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
74507: LD_STRING resetWarehouseGatheringPoints();
74509: PPUSH
74510: CALL_OW 559
// if warehouseGatheringPoints then
74514: LD_EXP 98
74518: IFFALSE 74644
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
74520: LD_ADDR_VAR 0 3
74524: PUSH
74525: LD_EXP 98
74529: PPUSH
74530: CALL 57752 0 1
74534: ST_TO_ADDR
// for i := 1 to list do
74535: LD_ADDR_VAR 0 2
74539: PUSH
74540: DOUBLE
74541: LD_INT 1
74543: DEC
74544: ST_TO_ADDR
74545: LD_VAR 0 3
74549: PUSH
74550: FOR_TO
74551: IFFALSE 74642
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74553: LD_STRING setWarehouseGatheringPointXY(
74555: PUSH
74556: LD_VAR 0 3
74560: PUSH
74561: LD_VAR 0 2
74565: ARRAY
74566: PUSH
74567: LD_INT 1
74569: ARRAY
74570: STR
74571: PUSH
74572: LD_STRING ,
74574: STR
74575: PUSH
74576: LD_VAR 0 3
74580: PUSH
74581: LD_VAR 0 2
74585: ARRAY
74586: PUSH
74587: LD_INT 2
74589: ARRAY
74590: STR
74591: PUSH
74592: LD_STRING ,
74594: STR
74595: PUSH
74596: LD_VAR 0 3
74600: PUSH
74601: LD_VAR 0 2
74605: ARRAY
74606: PUSH
74607: LD_INT 3
74609: ARRAY
74610: STR
74611: PUSH
74612: LD_STRING ,
74614: STR
74615: PUSH
74616: LD_VAR 0 3
74620: PUSH
74621: LD_VAR 0 2
74625: ARRAY
74626: PUSH
74627: LD_INT 4
74629: ARRAY
74630: STR
74631: PUSH
74632: LD_STRING )
74634: STR
74635: PPUSH
74636: CALL_OW 559
74640: GO 74550
74642: POP
74643: POP
// end ; end ;
74644: LD_VAR 0 1
74648: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
74649: LD_EXP 98
74653: IFFALSE 75348
74655: GO 74657
74657: DISABLE
74658: LD_INT 0
74660: PPUSH
74661: PPUSH
74662: PPUSH
74663: PPUSH
74664: PPUSH
74665: PPUSH
74666: PPUSH
74667: PPUSH
74668: PPUSH
// begin enable ;
74669: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
74670: LD_ADDR_VAR 0 3
74674: PUSH
74675: LD_EXP 98
74679: PPUSH
74680: CALL 57752 0 1
74684: ST_TO_ADDR
// if not list then
74685: LD_VAR 0 3
74689: NOT
74690: IFFALSE 74694
// exit ;
74692: GO 75348
// for i := 1 to list do
74694: LD_ADDR_VAR 0 1
74698: PUSH
74699: DOUBLE
74700: LD_INT 1
74702: DEC
74703: ST_TO_ADDR
74704: LD_VAR 0 3
74708: PUSH
74709: FOR_TO
74710: IFFALSE 75346
// begin depot := list [ i ] [ 2 ] ;
74712: LD_ADDR_VAR 0 8
74716: PUSH
74717: LD_VAR 0 3
74721: PUSH
74722: LD_VAR 0 1
74726: ARRAY
74727: PUSH
74728: LD_INT 2
74730: ARRAY
74731: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
74732: LD_ADDR_VAR 0 5
74736: PUSH
74737: LD_VAR 0 3
74741: PUSH
74742: LD_VAR 0 1
74746: ARRAY
74747: PUSH
74748: LD_INT 1
74750: ARRAY
74751: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
74752: LD_VAR 0 8
74756: PPUSH
74757: CALL_OW 301
74761: IFTRUE 74780
74763: PUSH
74764: LD_VAR 0 5
74768: PUSH
74769: LD_VAR 0 8
74773: PPUSH
74774: CALL_OW 255
74778: NONEQUAL
74779: OR
74780: IFFALSE 74809
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
74782: LD_ADDR_EXP 98
74786: PUSH
74787: LD_EXP 98
74791: PPUSH
74792: LD_VAR 0 8
74796: PPUSH
74797: LD_INT 0
74799: PPUSH
74800: CALL_OW 1
74804: ST_TO_ADDR
// exit ;
74805: POP
74806: POP
74807: GO 75348
// end ; x := list [ i ] [ 3 ] ;
74809: LD_ADDR_VAR 0 6
74813: PUSH
74814: LD_VAR 0 3
74818: PUSH
74819: LD_VAR 0 1
74823: ARRAY
74824: PUSH
74825: LD_INT 3
74827: ARRAY
74828: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
74829: LD_ADDR_VAR 0 7
74833: PUSH
74834: LD_VAR 0 3
74838: PUSH
74839: LD_VAR 0 1
74843: ARRAY
74844: PUSH
74845: LD_INT 4
74847: ARRAY
74848: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
74849: LD_ADDR_VAR 0 9
74853: PUSH
74854: LD_VAR 0 6
74858: PPUSH
74859: LD_VAR 0 7
74863: PPUSH
74864: LD_INT 16
74866: PPUSH
74867: CALL 56326 0 3
74871: ST_TO_ADDR
// if not cratesNearbyPoint then
74872: LD_VAR 0 9
74876: NOT
74877: IFFALSE 74883
// exit ;
74879: POP
74880: POP
74881: GO 75348
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
74883: LD_ADDR_VAR 0 4
74887: PUSH
74888: LD_INT 22
74890: PUSH
74891: LD_VAR 0 5
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: PUSH
74900: LD_INT 3
74902: PUSH
74903: LD_INT 60
74905: PUSH
74906: EMPTY
74907: LIST
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: LD_INT 91
74915: PUSH
74916: LD_VAR 0 8
74920: PUSH
74921: LD_INT 6
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: LIST
74928: PUSH
74929: LD_INT 2
74931: PUSH
74932: LD_INT 25
74934: PUSH
74935: LD_INT 2
74937: PUSH
74938: EMPTY
74939: LIST
74940: LIST
74941: PUSH
74942: LD_INT 25
74944: PUSH
74945: LD_INT 16
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: LIST
74956: PUSH
74957: EMPTY
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: PPUSH
74963: CALL_OW 69
74967: PUSH
74968: LD_VAR 0 8
74972: PPUSH
74973: CALL_OW 313
74977: PPUSH
74978: LD_INT 3
74980: PUSH
74981: LD_INT 60
74983: PUSH
74984: EMPTY
74985: LIST
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: PUSH
74991: LD_INT 2
74993: PUSH
74994: LD_INT 25
74996: PUSH
74997: LD_INT 2
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: PUSH
75004: LD_INT 25
75006: PUSH
75007: LD_INT 16
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: LIST
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: PPUSH
75023: CALL_OW 72
75027: UNION
75028: ST_TO_ADDR
// if tmp then
75029: LD_VAR 0 4
75033: IFFALSE 75113
// begin tmp := ShrinkArray ( tmp , 3 ) ;
75035: LD_ADDR_VAR 0 4
75039: PUSH
75040: LD_VAR 0 4
75044: PPUSH
75045: LD_INT 3
75047: PPUSH
75048: CALL 54133 0 2
75052: ST_TO_ADDR
// for j in tmp do
75053: LD_ADDR_VAR 0 2
75057: PUSH
75058: LD_VAR 0 4
75062: PUSH
75063: FOR_IN
75064: IFFALSE 75107
// begin if IsInUnit ( j ) then
75066: LD_VAR 0 2
75070: PPUSH
75071: CALL_OW 310
75075: IFFALSE 75086
// ComExit ( j ) ;
75077: LD_VAR 0 2
75081: PPUSH
75082: CALL 54216 0 1
// AddComCollect ( j , x , y ) ;
75086: LD_VAR 0 2
75090: PPUSH
75091: LD_VAR 0 6
75095: PPUSH
75096: LD_VAR 0 7
75100: PPUSH
75101: CALL_OW 177
// end ;
75105: GO 75063
75107: POP
75108: POP
// exit ;
75109: POP
75110: POP
75111: GO 75348
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
75113: LD_ADDR_VAR 0 4
75117: PUSH
75118: LD_INT 22
75120: PUSH
75121: LD_VAR 0 5
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 91
75132: PUSH
75133: LD_VAR 0 8
75137: PUSH
75138: LD_INT 8
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: LIST
75145: PUSH
75146: LD_INT 2
75148: PUSH
75149: LD_INT 34
75151: PUSH
75152: LD_INT 12
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 34
75161: PUSH
75162: LD_INT 51
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: LD_INT 34
75171: PUSH
75172: LD_INT 32
75174: PUSH
75175: EMPTY
75176: LIST
75177: LIST
75178: PUSH
75179: LD_INT 34
75181: PUSH
75182: LD_INT 89
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: LIST
75193: LIST
75194: LIST
75195: PUSH
75196: EMPTY
75197: LIST
75198: LIST
75199: LIST
75200: PPUSH
75201: CALL_OW 69
75205: ST_TO_ADDR
// if tmp then
75206: LD_VAR 0 4
75210: IFFALSE 75344
// begin for j in tmp do
75212: LD_ADDR_VAR 0 2
75216: PUSH
75217: LD_VAR 0 4
75221: PUSH
75222: FOR_IN
75223: IFFALSE 75342
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
75225: LD_VAR 0 2
75229: PPUSH
75230: CALL_OW 262
75234: PUSH
75235: LD_INT 3
75237: EQUAL
75238: IFTRUE 75255
75240: PUSH
75241: LD_VAR 0 2
75245: PPUSH
75246: CALL_OW 261
75250: PUSH
75251: LD_INT 20
75253: GREATER
75254: OR
75255: IFFALSE 75269
75257: PUSH
75258: LD_VAR 0 2
75262: PPUSH
75263: CALL_OW 314
75267: NOT
75268: AND
75269: IFFALSE 75299
75271: PUSH
75272: LD_VAR 0 2
75276: PPUSH
75277: CALL_OW 263
75281: PUSH
75282: LD_INT 1
75284: NONEQUAL
75285: IFTRUE 75298
75287: PUSH
75288: LD_VAR 0 2
75292: PPUSH
75293: CALL_OW 311
75297: OR
75298: AND
75299: IFFALSE 75340
// begin ComCollect ( j , x , y ) ;
75301: LD_VAR 0 2
75305: PPUSH
75306: LD_VAR 0 6
75310: PPUSH
75311: LD_VAR 0 7
75315: PPUSH
75316: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
75320: LD_VAR 0 2
75324: PPUSH
75325: LD_VAR 0 8
75329: PPUSH
75330: CALL_OW 172
// exit ;
75334: POP
75335: POP
75336: POP
75337: POP
75338: GO 75348
// end ;
75340: GO 75222
75342: POP
75343: POP
// end ; end ;
75344: GO 74709
75346: POP
75347: POP
// end ; end_of_file
75348: PPOPN 9
75350: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75351: LD_VAR 0 1
75355: PUSH
75356: LD_INT 200
75358: DOUBLE
75359: GREATEREQUAL
75360: IFFALSE 75368
75362: LD_INT 299
75364: DOUBLE
75365: LESSEQUAL
75366: IFTRUE 75370
75368: GO 75402
75370: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75371: LD_VAR 0 1
75375: PPUSH
75376: LD_VAR 0 2
75380: PPUSH
75381: LD_VAR 0 3
75385: PPUSH
75386: LD_VAR 0 4
75390: PPUSH
75391: LD_VAR 0 5
75395: PPUSH
75396: CALL 76264 0 5
75400: GO 75479
75402: LD_INT 300
75404: DOUBLE
75405: GREATEREQUAL
75406: IFFALSE 75414
75408: LD_INT 399
75410: DOUBLE
75411: LESSEQUAL
75412: IFTRUE 75416
75414: GO 75478
75416: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75417: LD_VAR 0 1
75421: PPUSH
75422: LD_VAR 0 2
75426: PPUSH
75427: LD_VAR 0 3
75431: PPUSH
75432: LD_VAR 0 4
75436: PPUSH
75437: LD_VAR 0 5
75441: PPUSH
75442: LD_VAR 0 6
75446: PPUSH
75447: LD_VAR 0 7
75451: PPUSH
75452: LD_VAR 0 8
75456: PPUSH
75457: LD_VAR 0 9
75461: PPUSH
75462: LD_VAR 0 10
75466: PPUSH
75467: LD_VAR 0 11
75471: PPUSH
75472: CALL 71904 0 11
75476: GO 75479
75478: POP
// end ;
75479: PPOPN 11
75481: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75482: LD_VAR 0 1
75486: PPUSH
75487: LD_VAR 0 2
75491: PPUSH
75492: LD_VAR 0 3
75496: PPUSH
75497: LD_VAR 0 4
75501: PPUSH
75502: LD_VAR 0 5
75506: PPUSH
75507: CALL 75564 0 5
// end ; end_of_file
75511: PPOPN 5
75513: END
// export function SOS_UnitDestroyed ( un ) ; begin
75514: LD_INT 0
75516: PPUSH
// ComRadiation ( un ) ;
75517: LD_VAR 0 1
75521: PPUSH
75522: CALL 76684 0 1
// end ;
75526: LD_VAR 0 2
75530: RET
// export function SOS_UnitKamikazed ( un ) ; begin
75531: LD_INT 0
75533: PPUSH
// ComRadiation ( un ) ;
75534: LD_VAR 0 1
75538: PPUSH
75539: CALL 76684 0 1
// end ;
75543: LD_VAR 0 2
75547: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
75548: LD_INT 0
75550: PPUSH
// end ;
75551: LD_VAR 0 4
75555: RET
// export function SOS_Command ( cmd ) ; begin
75556: LD_INT 0
75558: PPUSH
// end ;
75559: LD_VAR 0 2
75563: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
75564: LD_INT 0
75566: PPUSH
// end ;
75567: LD_VAR 0 6
75571: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
75572: LD_INT 0
75574: PPUSH
75575: PPUSH
75576: PPUSH
75577: PPUSH
75578: PPUSH
// if not vehicle or not factory then
75579: LD_VAR 0 1
75583: NOT
75584: IFTRUE 75593
75586: PUSH
75587: LD_VAR 0 2
75591: NOT
75592: OR
75593: IFFALSE 75597
// exit ;
75595: GO 76259
// weapon := GetWeapon ( vehicle ) ;
75597: LD_ADDR_VAR 0 7
75601: PUSH
75602: LD_VAR 0 1
75606: PPUSH
75607: CALL_OW 264
75611: ST_TO_ADDR
// if weapon = ar_miner then
75612: LD_VAR 0 7
75616: PUSH
75617: LD_INT 81
75619: EQUAL
75620: IFFALSE 75677
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
75622: LD_ADDR_EXP 107
75626: PUSH
75627: LD_EXP 107
75631: PPUSH
75632: LD_EXP 107
75636: PUSH
75637: LD_INT 1
75639: PLUS
75640: PPUSH
75641: LD_VAR 0 1
75645: PPUSH
75646: CALL_OW 1
75650: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
75651: LD_ADDR_EXP 108
75655: PUSH
75656: LD_EXP 108
75660: PPUSH
75661: LD_EXP 108
75665: PUSH
75666: LD_INT 1
75668: PLUS
75669: PPUSH
75670: EMPTY
75671: PPUSH
75672: CALL_OW 1
75676: ST_TO_ADDR
// end ; if not factoryWaypoints then
75677: LD_EXP 96
75681: NOT
75682: IFFALSE 75686
// exit ;
75684: GO 76259
// for i := 1 to Count ( factoryWaypoints ) do
75686: LD_ADDR_VAR 0 4
75690: PUSH
75691: DOUBLE
75692: LD_INT 1
75694: DEC
75695: ST_TO_ADDR
75696: LD_EXP 96
75700: PPUSH
75701: CALL 17842 0 1
75705: PUSH
75706: FOR_TO
75707: IFFALSE 76257
// if factoryWaypoints [ i ] [ 2 ] = factory then
75709: LD_EXP 96
75713: PUSH
75714: LD_VAR 0 4
75718: ARRAY
75719: PUSH
75720: LD_INT 2
75722: ARRAY
75723: PUSH
75724: LD_VAR 0 2
75728: EQUAL
75729: IFFALSE 76255
// begin if GetControl ( vehicle ) = control_manual then
75731: LD_VAR 0 1
75735: PPUSH
75736: CALL_OW 263
75740: PUSH
75741: LD_INT 1
75743: EQUAL
75744: IFFALSE 76108
// begin driver := IsDrivenBy ( vehicle ) ;
75746: LD_ADDR_VAR 0 5
75750: PUSH
75751: LD_VAR 0 1
75755: PPUSH
75756: CALL_OW 311
75760: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
75761: LD_VAR 0 5
75765: PUSH
75766: LD_EXP 97
75770: IN
75771: IFTRUE 75785
75773: PUSH
75774: LD_VAR 0 1
75778: PUSH
75779: LD_EXP 97
75783: IN
75784: OR
75785: IFFALSE 75791
// exit ;
75787: POP
75788: POP
75789: GO 76259
// if not HasTask ( driver ) then
75791: LD_VAR 0 5
75795: PPUSH
75796: CALL_OW 314
75800: NOT
75801: IFFALSE 76106
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
75803: LD_ADDR_EXP 97
75807: PUSH
75808: LD_EXP 97
75812: PPUSH
75813: LD_VAR 0 5
75817: PPUSH
75818: CALL 53818 0 2
75822: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
75823: LD_ADDR_EXP 97
75827: PUSH
75828: LD_EXP 97
75832: PPUSH
75833: LD_VAR 0 1
75837: PPUSH
75838: CALL 53818 0 2
75842: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75843: LD_ADDR_VAR 0 6
75847: PUSH
75848: LD_EXP 96
75852: PUSH
75853: LD_VAR 0 4
75857: ARRAY
75858: PUSH
75859: LD_INT 3
75861: ARRAY
75862: PPUSH
75863: LD_EXP 96
75867: PUSH
75868: LD_VAR 0 4
75872: ARRAY
75873: PUSH
75874: LD_INT 4
75876: ARRAY
75877: PPUSH
75878: CALL_OW 428
75882: ST_TO_ADDR
// if hex then
75883: LD_VAR 0 6
75887: IFFALSE 75905
// ComMoveUnit ( driver , hex ) else
75889: LD_VAR 0 5
75893: PPUSH
75894: LD_VAR 0 6
75898: PPUSH
75899: CALL_OW 112
75903: GO 75989
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
75905: LD_VAR 0 1
75909: PPUSH
75910: LD_EXP 96
75914: PUSH
75915: LD_VAR 0 4
75919: ARRAY
75920: PUSH
75921: LD_INT 3
75923: ARRAY
75924: PPUSH
75925: LD_EXP 96
75929: PUSH
75930: LD_VAR 0 4
75934: ARRAY
75935: PUSH
75936: LD_INT 4
75938: ARRAY
75939: PPUSH
75940: CALL_OW 297
75944: PUSH
75945: LD_INT 0
75947: GREATER
75948: IFFALSE 75989
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75950: LD_VAR 0 5
75954: PPUSH
75955: LD_EXP 96
75959: PUSH
75960: LD_VAR 0 4
75964: ARRAY
75965: PUSH
75966: LD_INT 3
75968: ARRAY
75969: PPUSH
75970: LD_EXP 96
75974: PUSH
75975: LD_VAR 0 4
75979: ARRAY
75980: PUSH
75981: LD_INT 4
75983: ARRAY
75984: PPUSH
75985: CALL_OW 111
// AddComExitVehicle ( driver ) ;
75989: LD_VAR 0 5
75993: PPUSH
75994: CALL_OW 181
// if Multiplayer then
75998: LD_OWVAR 4
76002: IFFALSE 76051
// begin repeat wait ( 10 ) ;
76004: LD_INT 10
76006: PPUSH
76007: CALL_OW 67
// until not IsInUnit ( driver ) ;
76011: LD_VAR 0 5
76015: PPUSH
76016: CALL_OW 310
76020: NOT
76021: IFFALSE 76004
// if not HasTask ( driver ) then
76023: LD_VAR 0 5
76027: PPUSH
76028: CALL_OW 314
76032: NOT
76033: IFFALSE 76049
// ComEnterUnit ( driver , factory ) ;
76035: LD_VAR 0 5
76039: PPUSH
76040: LD_VAR 0 2
76044: PPUSH
76045: CALL_OW 120
// end else
76049: GO 76065
// AddComEnterUnit ( driver , factory ) ;
76051: LD_VAR 0 5
76055: PPUSH
76056: LD_VAR 0 2
76060: PPUSH
76061: CALL_OW 180
// wait ( 0 0$1 ) ;
76065: LD_INT 35
76067: PPUSH
76068: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
76072: LD_ADDR_EXP 97
76076: PUSH
76077: LD_EXP 97
76081: PUSH
76082: LD_VAR 0 5
76086: DIFF
76087: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
76088: LD_ADDR_EXP 97
76092: PUSH
76093: LD_EXP 97
76097: PUSH
76098: LD_VAR 0 1
76102: DIFF
76103: ST_TO_ADDR
// break ;
76104: GO 76257
// end ; end else
76106: GO 76255
// if GetControl ( vehicle ) = control_remote then
76108: LD_VAR 0 1
76112: PPUSH
76113: CALL_OW 263
76117: PUSH
76118: LD_INT 2
76120: EQUAL
76121: IFFALSE 76207
// begin wait ( 0 0$2 ) ;
76123: LD_INT 70
76125: PPUSH
76126: CALL_OW 67
// repeat wait ( 10 ) ;
76130: LD_INT 10
76132: PPUSH
76133: CALL_OW 67
// Connect ( vehicle ) ;
76137: LD_VAR 0 1
76141: PPUSH
76142: CALL 24120 0 1
// until IsControledBy ( vehicle ) ;
76146: LD_VAR 0 1
76150: PPUSH
76151: CALL_OW 312
76155: IFFALSE 76130
// wait ( 10 ) ;
76157: LD_INT 10
76159: PPUSH
76160: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76164: LD_VAR 0 1
76168: PPUSH
76169: LD_EXP 96
76173: PUSH
76174: LD_VAR 0 4
76178: ARRAY
76179: PUSH
76180: LD_INT 3
76182: ARRAY
76183: PPUSH
76184: LD_EXP 96
76188: PUSH
76189: LD_VAR 0 4
76193: ARRAY
76194: PUSH
76195: LD_INT 4
76197: ARRAY
76198: PPUSH
76199: CALL_OW 111
// break ;
76203: GO 76257
// end else
76205: GO 76255
// begin wait ( 0 0$3 ) ;
76207: LD_INT 105
76209: PPUSH
76210: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76214: LD_VAR 0 1
76218: PPUSH
76219: LD_EXP 96
76223: PUSH
76224: LD_VAR 0 4
76228: ARRAY
76229: PUSH
76230: LD_INT 3
76232: ARRAY
76233: PPUSH
76234: LD_EXP 96
76238: PUSH
76239: LD_VAR 0 4
76243: ARRAY
76244: PUSH
76245: LD_INT 4
76247: ARRAY
76248: PPUSH
76249: CALL_OW 111
// break ;
76253: GO 76257
// end ; end ;
76255: GO 75706
76257: POP
76258: POP
// end ;
76259: LD_VAR 0 3
76263: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
76264: LD_INT 0
76266: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
76267: LD_VAR 0 1
76271: PUSH
76272: LD_INT 250
76274: EQUAL
76275: IFFALSE 76292
76277: PUSH
76278: LD_VAR 0 2
76282: PPUSH
76283: CALL_OW 264
76287: PUSH
76288: LD_INT 81
76290: EQUAL
76291: AND
76292: IFFALSE 76313
// MinerPlaceMine ( unit , x , y ) ;
76294: LD_VAR 0 2
76298: PPUSH
76299: LD_VAR 0 4
76303: PPUSH
76304: LD_VAR 0 5
76308: PPUSH
76309: CALL 79659 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
76313: LD_VAR 0 1
76317: PUSH
76318: LD_INT 251
76320: EQUAL
76321: IFFALSE 76338
76323: PUSH
76324: LD_VAR 0 2
76328: PPUSH
76329: CALL_OW 264
76333: PUSH
76334: LD_INT 81
76336: EQUAL
76337: AND
76338: IFFALSE 76359
// MinerDetonateMine ( unit , x , y ) ;
76340: LD_VAR 0 2
76344: PPUSH
76345: LD_VAR 0 4
76349: PPUSH
76350: LD_VAR 0 5
76354: PPUSH
76355: CALL 80066 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
76359: LD_VAR 0 1
76363: PUSH
76364: LD_INT 252
76366: EQUAL
76367: IFFALSE 76384
76369: PUSH
76370: LD_VAR 0 2
76374: PPUSH
76375: CALL_OW 264
76379: PUSH
76380: LD_INT 81
76382: EQUAL
76383: AND
76384: IFFALSE 76405
// MinerCreateMinefield ( unit , x , y ) ;
76386: LD_VAR 0 2
76390: PPUSH
76391: LD_VAR 0 4
76395: PPUSH
76396: LD_VAR 0 5
76400: PPUSH
76401: CALL 80298 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
76405: LD_VAR 0 1
76409: PUSH
76410: LD_INT 253
76412: EQUAL
76413: IFFALSE 76430
76415: PUSH
76416: LD_VAR 0 2
76420: PPUSH
76421: CALL_OW 257
76425: PUSH
76426: LD_INT 5
76428: EQUAL
76429: AND
76430: IFFALSE 76451
// ComBinocular ( unit , x , y ) ;
76432: LD_VAR 0 2
76436: PPUSH
76437: LD_VAR 0 4
76441: PPUSH
76442: LD_VAR 0 5
76446: PPUSH
76447: CALL 80673 0 3
// if selectedUnit then
76451: LD_VAR 0 3
76455: IFFALSE 76515
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
76457: LD_VAR 0 1
76461: PUSH
76462: LD_INT 254
76464: EQUAL
76465: IFFALSE 76482
76467: PUSH
76468: LD_VAR 0 2
76472: PPUSH
76473: CALL_OW 264
76477: PUSH
76478: LD_INT 99
76480: EQUAL
76481: AND
76482: IFFALSE 76499
76484: PUSH
76485: LD_VAR 0 3
76489: PPUSH
76490: CALL_OW 263
76494: PUSH
76495: LD_INT 3
76497: EQUAL
76498: AND
76499: IFFALSE 76515
// HackDestroyVehicle ( unit , selectedUnit ) ;
76501: LD_VAR 0 2
76505: PPUSH
76506: LD_VAR 0 3
76510: PPUSH
76511: CALL 78849 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
76515: LD_VAR 0 1
76519: PUSH
76520: LD_INT 255
76522: EQUAL
76523: IFFALSE 76547
76525: PUSH
76526: LD_VAR 0 2
76530: PPUSH
76531: CALL_OW 264
76535: PUSH
76536: LD_INT 14
76538: PUSH
76539: LD_INT 53
76541: PUSH
76542: EMPTY
76543: LIST
76544: LIST
76545: IN
76546: AND
76547: IFFALSE 76565
76549: PUSH
76550: LD_VAR 0 4
76554: PPUSH
76555: LD_VAR 0 5
76559: PPUSH
76560: CALL_OW 488
76564: AND
76565: IFFALSE 76589
// CutTreeXYR ( unit , x , y , 12 ) ;
76567: LD_VAR 0 2
76571: PPUSH
76572: LD_VAR 0 4
76576: PPUSH
76577: LD_VAR 0 5
76581: PPUSH
76582: LD_INT 12
76584: PPUSH
76585: CALL 76780 0 4
// if cmd = 256 then
76589: LD_VAR 0 1
76593: PUSH
76594: LD_INT 256
76596: EQUAL
76597: IFFALSE 76618
// SetFactoryWaypoint ( unit , x , y ) ;
76599: LD_VAR 0 2
76603: PPUSH
76604: LD_VAR 0 4
76608: PPUSH
76609: LD_VAR 0 5
76613: PPUSH
76614: CALL 73896 0 3
// if cmd = 257 then
76618: LD_VAR 0 1
76622: PUSH
76623: LD_INT 257
76625: EQUAL
76626: IFFALSE 76647
// SetWarehouseGatheringPoint ( unit , x , y ) ;
76628: LD_VAR 0 2
76632: PPUSH
76633: LD_VAR 0 4
76637: PPUSH
76638: LD_VAR 0 5
76642: PPUSH
76643: CALL 74392 0 3
// if cmd = 258 then
76647: LD_VAR 0 1
76651: PUSH
76652: LD_INT 258
76654: EQUAL
76655: IFFALSE 76679
// BurnTreeXYR ( unit , x , y , 8 ) ;
76657: LD_VAR 0 2
76661: PPUSH
76662: LD_VAR 0 4
76666: PPUSH
76667: LD_VAR 0 5
76671: PPUSH
76672: LD_INT 8
76674: PPUSH
76675: CALL 77202 0 4
// end ;
76679: LD_VAR 0 6
76683: RET
// export function ComRadiation ( un ) ; var eff ; begin
76684: LD_INT 0
76686: PPUSH
76687: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
76688: LD_VAR 0 1
76692: PPUSH
76693: CALL_OW 264
76697: PUSH
76698: LD_INT 91
76700: NONEQUAL
76701: IFFALSE 76705
// exit ;
76703: GO 76775
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
76705: LD_INT 68
76707: PPUSH
76708: LD_VAR 0 1
76712: PPUSH
76713: CALL_OW 255
76717: PPUSH
76718: CALL_OW 321
76722: PUSH
76723: LD_INT 2
76725: EQUAL
76726: IFFALSE 76738
// eff := 50 else
76728: LD_ADDR_VAR 0 3
76732: PUSH
76733: LD_INT 50
76735: ST_TO_ADDR
76736: GO 76746
// eff := 25 ;
76738: LD_ADDR_VAR 0 3
76742: PUSH
76743: LD_INT 25
76745: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
76746: LD_VAR 0 1
76750: PPUSH
76751: CALL_OW 250
76755: PPUSH
76756: LD_VAR 0 1
76760: PPUSH
76761: CALL_OW 251
76765: PPUSH
76766: LD_VAR 0 3
76770: PPUSH
76771: CALL_OW 495
// end ;
76775: LD_VAR 0 2
76779: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
76780: LD_INT 0
76782: PPUSH
76783: PPUSH
76784: PPUSH
76785: PPUSH
76786: PPUSH
76787: PPUSH
76788: PPUSH
76789: PPUSH
76790: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
76791: LD_VAR 0 1
76795: PPUSH
76796: CALL_OW 302
76800: NOT
76801: IFTRUE 76820
76803: PUSH
76804: LD_VAR 0 2
76808: PPUSH
76809: LD_VAR 0 3
76813: PPUSH
76814: CALL_OW 488
76818: NOT
76819: OR
76820: IFTRUE 76829
76822: PUSH
76823: LD_VAR 0 4
76827: NOT
76828: OR
76829: IFFALSE 76833
// exit ;
76831: GO 77197
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
76833: LD_VAR 0 1
76837: PPUSH
76838: CALL_OW 437
76842: PPUSH
76843: CALL 17842 0 1
76847: PUSH
76848: LD_INT 10
76850: GREATER
76851: IFFALSE 76855
// exit ;
76853: GO 77197
// list := [ ] ;
76855: LD_ADDR_VAR 0 13
76859: PUSH
76860: EMPTY
76861: ST_TO_ADDR
// if x - r < 0 then
76862: LD_VAR 0 2
76866: PUSH
76867: LD_VAR 0 4
76871: MINUS
76872: PUSH
76873: LD_INT 0
76875: LESS
76876: IFFALSE 76888
// min_x := 0 else
76878: LD_ADDR_VAR 0 7
76882: PUSH
76883: LD_INT 0
76885: ST_TO_ADDR
76886: GO 76904
// min_x := x - r ;
76888: LD_ADDR_VAR 0 7
76892: PUSH
76893: LD_VAR 0 2
76897: PUSH
76898: LD_VAR 0 4
76902: MINUS
76903: ST_TO_ADDR
// if y - r < 0 then
76904: LD_VAR 0 3
76908: PUSH
76909: LD_VAR 0 4
76913: MINUS
76914: PUSH
76915: LD_INT 0
76917: LESS
76918: IFFALSE 76930
// min_y := 0 else
76920: LD_ADDR_VAR 0 8
76924: PUSH
76925: LD_INT 0
76927: ST_TO_ADDR
76928: GO 76946
// min_y := y - r ;
76930: LD_ADDR_VAR 0 8
76934: PUSH
76935: LD_VAR 0 3
76939: PUSH
76940: LD_VAR 0 4
76944: MINUS
76945: ST_TO_ADDR
// max_x := x + r ;
76946: LD_ADDR_VAR 0 9
76950: PUSH
76951: LD_VAR 0 2
76955: PUSH
76956: LD_VAR 0 4
76960: PLUS
76961: ST_TO_ADDR
// max_y := y + r ;
76962: LD_ADDR_VAR 0 10
76966: PUSH
76967: LD_VAR 0 3
76971: PUSH
76972: LD_VAR 0 4
76976: PLUS
76977: ST_TO_ADDR
// for _x = min_x to max_x do
76978: LD_ADDR_VAR 0 11
76982: PUSH
76983: DOUBLE
76984: LD_VAR 0 7
76988: DEC
76989: ST_TO_ADDR
76990: LD_VAR 0 9
76994: PUSH
76995: FOR_TO
76996: IFFALSE 77115
// for _y = min_y to max_y do
76998: LD_ADDR_VAR 0 12
77002: PUSH
77003: DOUBLE
77004: LD_VAR 0 8
77008: DEC
77009: ST_TO_ADDR
77010: LD_VAR 0 10
77014: PUSH
77015: FOR_TO
77016: IFFALSE 77111
// begin if not ValidHex ( _x , _y ) then
77018: LD_VAR 0 11
77022: PPUSH
77023: LD_VAR 0 12
77027: PPUSH
77028: CALL_OW 488
77032: NOT
77033: IFFALSE 77037
// continue ;
77035: GO 77015
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77037: LD_VAR 0 11
77041: PPUSH
77042: LD_VAR 0 12
77046: PPUSH
77047: CALL_OW 351
77051: IFFALSE 77069
77053: PUSH
77054: LD_VAR 0 11
77058: PPUSH
77059: LD_VAR 0 12
77063: PPUSH
77064: CALL_OW 554
77068: AND
77069: IFFALSE 77109
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77071: LD_ADDR_VAR 0 13
77075: PUSH
77076: LD_VAR 0 13
77080: PPUSH
77081: LD_VAR 0 13
77085: PUSH
77086: LD_INT 1
77088: PLUS
77089: PPUSH
77090: LD_VAR 0 11
77094: PUSH
77095: LD_VAR 0 12
77099: PUSH
77100: EMPTY
77101: LIST
77102: LIST
77103: PPUSH
77104: CALL_OW 2
77108: ST_TO_ADDR
// end ;
77109: GO 77015
77111: POP
77112: POP
77113: GO 76995
77115: POP
77116: POP
// if not list then
77117: LD_VAR 0 13
77121: NOT
77122: IFFALSE 77126
// exit ;
77124: GO 77197
// for i in list do
77126: LD_ADDR_VAR 0 6
77130: PUSH
77131: LD_VAR 0 13
77135: PUSH
77136: FOR_IN
77137: IFFALSE 77195
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
77139: LD_VAR 0 1
77143: PPUSH
77144: LD_STRING M
77146: PUSH
77147: LD_VAR 0 6
77151: PUSH
77152: LD_INT 1
77154: ARRAY
77155: PUSH
77156: LD_VAR 0 6
77160: PUSH
77161: LD_INT 2
77163: ARRAY
77164: PUSH
77165: LD_INT 0
77167: PUSH
77168: LD_INT 0
77170: PUSH
77171: LD_INT 0
77173: PUSH
77174: LD_INT 0
77176: PUSH
77177: EMPTY
77178: LIST
77179: LIST
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: LIST
77185: PUSH
77186: EMPTY
77187: LIST
77188: PPUSH
77189: CALL_OW 447
77193: GO 77136
77195: POP
77196: POP
// end ;
77197: LD_VAR 0 5
77201: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
77202: LD_INT 0
77204: PPUSH
77205: PPUSH
77206: PPUSH
77207: PPUSH
77208: PPUSH
77209: PPUSH
77210: PPUSH
77211: PPUSH
77212: PPUSH
77213: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
77214: LD_VAR 0 1
77218: PPUSH
77219: CALL_OW 302
77223: NOT
77224: IFTRUE 77243
77226: PUSH
77227: LD_VAR 0 2
77231: PPUSH
77232: LD_VAR 0 3
77236: PPUSH
77237: CALL_OW 488
77241: NOT
77242: OR
77243: IFTRUE 77252
77245: PUSH
77246: LD_VAR 0 4
77250: NOT
77251: OR
77252: IFFALSE 77256
// exit ;
77254: GO 77795
// if Count ( GetTaskList ( flame ) ) > 10 then
77256: LD_VAR 0 1
77260: PPUSH
77261: CALL_OW 437
77265: PPUSH
77266: CALL 17842 0 1
77270: PUSH
77271: LD_INT 10
77273: GREATER
77274: IFFALSE 77278
// exit ;
77276: GO 77795
// list := [ ] ;
77278: LD_ADDR_VAR 0 13
77282: PUSH
77283: EMPTY
77284: ST_TO_ADDR
// if x - r < 0 then
77285: LD_VAR 0 2
77289: PUSH
77290: LD_VAR 0 4
77294: MINUS
77295: PUSH
77296: LD_INT 0
77298: LESS
77299: IFFALSE 77311
// min_x := 0 else
77301: LD_ADDR_VAR 0 7
77305: PUSH
77306: LD_INT 0
77308: ST_TO_ADDR
77309: GO 77327
// min_x := x - r ;
77311: LD_ADDR_VAR 0 7
77315: PUSH
77316: LD_VAR 0 2
77320: PUSH
77321: LD_VAR 0 4
77325: MINUS
77326: ST_TO_ADDR
// if y - r < 0 then
77327: LD_VAR 0 3
77331: PUSH
77332: LD_VAR 0 4
77336: MINUS
77337: PUSH
77338: LD_INT 0
77340: LESS
77341: IFFALSE 77353
// min_y := 0 else
77343: LD_ADDR_VAR 0 8
77347: PUSH
77348: LD_INT 0
77350: ST_TO_ADDR
77351: GO 77369
// min_y := y - r ;
77353: LD_ADDR_VAR 0 8
77357: PUSH
77358: LD_VAR 0 3
77362: PUSH
77363: LD_VAR 0 4
77367: MINUS
77368: ST_TO_ADDR
// max_x := x + r ;
77369: LD_ADDR_VAR 0 9
77373: PUSH
77374: LD_VAR 0 2
77378: PUSH
77379: LD_VAR 0 4
77383: PLUS
77384: ST_TO_ADDR
// max_y := y + r ;
77385: LD_ADDR_VAR 0 10
77389: PUSH
77390: LD_VAR 0 3
77394: PUSH
77395: LD_VAR 0 4
77399: PLUS
77400: ST_TO_ADDR
// for _x = min_x to max_x do
77401: LD_ADDR_VAR 0 11
77405: PUSH
77406: DOUBLE
77407: LD_VAR 0 7
77411: DEC
77412: ST_TO_ADDR
77413: LD_VAR 0 9
77417: PUSH
77418: FOR_TO
77419: IFFALSE 77538
// for _y = min_y to max_y do
77421: LD_ADDR_VAR 0 12
77425: PUSH
77426: DOUBLE
77427: LD_VAR 0 8
77431: DEC
77432: ST_TO_ADDR
77433: LD_VAR 0 10
77437: PUSH
77438: FOR_TO
77439: IFFALSE 77534
// begin if not ValidHex ( _x , _y ) then
77441: LD_VAR 0 11
77445: PPUSH
77446: LD_VAR 0 12
77450: PPUSH
77451: CALL_OW 488
77455: NOT
77456: IFFALSE 77460
// continue ;
77458: GO 77438
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77460: LD_VAR 0 11
77464: PPUSH
77465: LD_VAR 0 12
77469: PPUSH
77470: CALL_OW 351
77474: IFFALSE 77492
77476: PUSH
77477: LD_VAR 0 11
77481: PPUSH
77482: LD_VAR 0 12
77486: PPUSH
77487: CALL_OW 554
77491: AND
77492: IFFALSE 77532
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77494: LD_ADDR_VAR 0 13
77498: PUSH
77499: LD_VAR 0 13
77503: PPUSH
77504: LD_VAR 0 13
77508: PUSH
77509: LD_INT 1
77511: PLUS
77512: PPUSH
77513: LD_VAR 0 11
77517: PUSH
77518: LD_VAR 0 12
77522: PUSH
77523: EMPTY
77524: LIST
77525: LIST
77526: PPUSH
77527: CALL_OW 2
77531: ST_TO_ADDR
// end ;
77532: GO 77438
77534: POP
77535: POP
77536: GO 77418
77538: POP
77539: POP
// if not list then
77540: LD_VAR 0 13
77544: NOT
77545: IFFALSE 77549
// exit ;
77547: GO 77795
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
77549: LD_ADDR_VAR 0 13
77553: PUSH
77554: LD_VAR 0 1
77558: PPUSH
77559: LD_VAR 0 13
77563: PPUSH
77564: LD_INT 1
77566: PPUSH
77567: LD_INT 1
77569: PPUSH
77570: CALL 21248 0 4
77574: ST_TO_ADDR
// ComStop ( flame ) ;
77575: LD_VAR 0 1
77579: PPUSH
77580: CALL_OW 141
// for i in list do
77584: LD_ADDR_VAR 0 6
77588: PUSH
77589: LD_VAR 0 13
77593: PUSH
77594: FOR_IN
77595: IFFALSE 77626
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
77597: LD_VAR 0 1
77601: PPUSH
77602: LD_VAR 0 6
77606: PUSH
77607: LD_INT 1
77609: ARRAY
77610: PPUSH
77611: LD_VAR 0 6
77615: PUSH
77616: LD_INT 2
77618: ARRAY
77619: PPUSH
77620: CALL_OW 176
77624: GO 77594
77626: POP
77627: POP
// repeat wait ( 0 0$1 ) ;
77628: LD_INT 35
77630: PPUSH
77631: CALL_OW 67
// task := GetTaskList ( flame ) ;
77635: LD_ADDR_VAR 0 14
77639: PUSH
77640: LD_VAR 0 1
77644: PPUSH
77645: CALL_OW 437
77649: ST_TO_ADDR
// if not task then
77650: LD_VAR 0 14
77654: NOT
77655: IFFALSE 77659
// exit ;
77657: GO 77795
// if task [ 1 ] [ 1 ] <> | then
77659: LD_VAR 0 14
77663: PUSH
77664: LD_INT 1
77666: ARRAY
77667: PUSH
77668: LD_INT 1
77670: ARRAY
77671: PUSH
77672: LD_STRING |
77674: NONEQUAL
77675: IFFALSE 77679
// exit ;
77677: GO 77795
// _x := task [ 1 ] [ 2 ] ;
77679: LD_ADDR_VAR 0 11
77683: PUSH
77684: LD_VAR 0 14
77688: PUSH
77689: LD_INT 1
77691: ARRAY
77692: PUSH
77693: LD_INT 2
77695: ARRAY
77696: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
77697: LD_ADDR_VAR 0 12
77701: PUSH
77702: LD_VAR 0 14
77706: PUSH
77707: LD_INT 1
77709: ARRAY
77710: PUSH
77711: LD_INT 3
77713: ARRAY
77714: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
77715: LD_VAR 0 11
77719: PPUSH
77720: LD_VAR 0 12
77724: PPUSH
77725: CALL_OW 351
77729: NOT
77730: IFTRUE 77749
77732: PUSH
77733: LD_VAR 0 11
77737: PPUSH
77738: LD_VAR 0 12
77742: PPUSH
77743: CALL_OW 554
77747: NOT
77748: OR
77749: IFFALSE 77783
// begin task := Delete ( task , 1 ) ;
77751: LD_ADDR_VAR 0 14
77755: PUSH
77756: LD_VAR 0 14
77760: PPUSH
77761: LD_INT 1
77763: PPUSH
77764: CALL_OW 3
77768: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
77769: LD_VAR 0 1
77773: PPUSH
77774: LD_VAR 0 14
77778: PPUSH
77779: CALL_OW 446
// end ; until not HasTask ( flame ) ;
77783: LD_VAR 0 1
77787: PPUSH
77788: CALL_OW 314
77792: NOT
77793: IFFALSE 77628
// end ;
77795: LD_VAR 0 5
77799: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
77800: LD_EXP 100
77804: NOT
77805: IFFALSE 77855
77807: GO 77809
77809: DISABLE
// begin initHack := true ;
77810: LD_ADDR_EXP 100
77814: PUSH
77815: LD_INT 1
77817: ST_TO_ADDR
// hackTanks := [ ] ;
77818: LD_ADDR_EXP 101
77822: PUSH
77823: EMPTY
77824: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
77825: LD_ADDR_EXP 102
77829: PUSH
77830: EMPTY
77831: ST_TO_ADDR
// hackLimit := 3 ;
77832: LD_ADDR_EXP 103
77836: PUSH
77837: LD_INT 3
77839: ST_TO_ADDR
// hackDist := 12 ;
77840: LD_ADDR_EXP 104
77844: PUSH
77845: LD_INT 12
77847: ST_TO_ADDR
// hackCounter := [ ] ;
77848: LD_ADDR_EXP 105
77852: PUSH
77853: EMPTY
77854: ST_TO_ADDR
// end ;
77855: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
77856: LD_EXP 100
77860: IFFALSE 77878
77862: PUSH
77863: LD_INT 34
77865: PUSH
77866: LD_INT 99
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: PPUSH
77873: CALL_OW 69
77877: AND
77878: IFFALSE 78131
77880: GO 77882
77882: DISABLE
77883: LD_INT 0
77885: PPUSH
77886: PPUSH
// begin enable ;
77887: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
77888: LD_ADDR_VAR 0 1
77892: PUSH
77893: LD_INT 34
77895: PUSH
77896: LD_INT 99
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: PPUSH
77903: CALL_OW 69
77907: PUSH
77908: FOR_IN
77909: IFFALSE 78129
// begin if not i in hackTanks then
77911: LD_VAR 0 1
77915: PUSH
77916: LD_EXP 101
77920: IN
77921: NOT
77922: IFFALSE 78005
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
77924: LD_ADDR_EXP 101
77928: PUSH
77929: LD_EXP 101
77933: PPUSH
77934: LD_EXP 101
77938: PUSH
77939: LD_INT 1
77941: PLUS
77942: PPUSH
77943: LD_VAR 0 1
77947: PPUSH
77948: CALL_OW 1
77952: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
77953: LD_ADDR_EXP 102
77957: PUSH
77958: LD_EXP 102
77962: PPUSH
77963: LD_EXP 102
77967: PUSH
77968: LD_INT 1
77970: PLUS
77971: PPUSH
77972: EMPTY
77973: PPUSH
77974: CALL_OW 1
77978: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
77979: LD_ADDR_EXP 105
77983: PUSH
77984: LD_EXP 105
77988: PPUSH
77989: LD_EXP 105
77993: PUSH
77994: LD_INT 1
77996: PLUS
77997: PPUSH
77998: EMPTY
77999: PPUSH
78000: CALL_OW 1
78004: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78005: LD_VAR 0 1
78009: PPUSH
78010: CALL_OW 302
78014: NOT
78015: IFFALSE 78028
// begin HackUnlinkAll ( i ) ;
78017: LD_VAR 0 1
78021: PPUSH
78022: CALL 78134 0 1
// continue ;
78026: GO 77908
// end ; HackCheckCapturedStatus ( i ) ;
78028: LD_VAR 0 1
78032: PPUSH
78033: CALL 78579 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78037: LD_ADDR_VAR 0 2
78041: PUSH
78042: LD_INT 81
78044: PUSH
78045: LD_VAR 0 1
78049: PPUSH
78050: CALL_OW 255
78054: PUSH
78055: EMPTY
78056: LIST
78057: LIST
78058: PUSH
78059: LD_INT 33
78061: PUSH
78062: LD_INT 3
78064: PUSH
78065: EMPTY
78066: LIST
78067: LIST
78068: PUSH
78069: LD_INT 91
78071: PUSH
78072: LD_VAR 0 1
78076: PUSH
78077: LD_EXP 104
78081: PUSH
78082: EMPTY
78083: LIST
78084: LIST
78085: LIST
78086: PUSH
78087: LD_INT 50
78089: PUSH
78090: EMPTY
78091: LIST
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: LIST
78097: LIST
78098: PPUSH
78099: CALL_OW 69
78103: ST_TO_ADDR
// if not tmp then
78104: LD_VAR 0 2
78108: NOT
78109: IFFALSE 78113
// continue ;
78111: GO 77908
// HackLink ( i , tmp ) ;
78113: LD_VAR 0 1
78117: PPUSH
78118: LD_VAR 0 2
78122: PPUSH
78123: CALL 78270 0 2
// end ;
78127: GO 77908
78129: POP
78130: POP
// end ;
78131: PPOPN 2
78133: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
78134: LD_INT 0
78136: PPUSH
78137: PPUSH
78138: PPUSH
// if not hack in hackTanks then
78139: LD_VAR 0 1
78143: PUSH
78144: LD_EXP 101
78148: IN
78149: NOT
78150: IFFALSE 78154
// exit ;
78152: GO 78265
// index := GetElementIndex ( hackTanks , hack ) ;
78154: LD_ADDR_VAR 0 4
78158: PUSH
78159: LD_EXP 101
78163: PPUSH
78164: LD_VAR 0 1
78168: PPUSH
78169: CALL 20543 0 2
78173: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
78174: LD_EXP 102
78178: PUSH
78179: LD_VAR 0 4
78183: ARRAY
78184: IFFALSE 78265
// begin for i in hackTanksCaptured [ index ] do
78186: LD_ADDR_VAR 0 3
78190: PUSH
78191: LD_EXP 102
78195: PUSH
78196: LD_VAR 0 4
78200: ARRAY
78201: PUSH
78202: FOR_IN
78203: IFFALSE 78229
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
78205: LD_VAR 0 3
78209: PUSH
78210: LD_INT 1
78212: ARRAY
78213: PPUSH
78214: LD_VAR 0 3
78218: PUSH
78219: LD_INT 2
78221: ARRAY
78222: PPUSH
78223: CALL_OW 235
78227: GO 78202
78229: POP
78230: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
78231: LD_ADDR_EXP 102
78235: PUSH
78236: LD_EXP 102
78240: PPUSH
78241: LD_VAR 0 4
78245: PPUSH
78246: EMPTY
78247: PPUSH
78248: CALL_OW 1
78252: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78253: LD_VAR 0 1
78257: PPUSH
78258: LD_INT 0
78260: PPUSH
78261: CALL_OW 505
// end ; end ;
78265: LD_VAR 0 2
78269: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78270: LD_INT 0
78272: PPUSH
78273: PPUSH
78274: PPUSH
// if not hack in hackTanks or not vehicles then
78275: LD_VAR 0 1
78279: PUSH
78280: LD_EXP 101
78284: IN
78285: NOT
78286: IFTRUE 78295
78288: PUSH
78289: LD_VAR 0 2
78293: NOT
78294: OR
78295: IFFALSE 78299
// exit ;
78297: GO 78574
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78299: LD_ADDR_VAR 0 2
78303: PUSH
78304: LD_VAR 0 1
78308: PPUSH
78309: LD_VAR 0 2
78313: PPUSH
78314: LD_INT 1
78316: PPUSH
78317: LD_INT 1
78319: PPUSH
78320: CALL 21195 0 4
78324: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78325: LD_ADDR_VAR 0 5
78329: PUSH
78330: LD_EXP 101
78334: PPUSH
78335: LD_VAR 0 1
78339: PPUSH
78340: CALL 20543 0 2
78344: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78345: LD_EXP 102
78349: PUSH
78350: LD_VAR 0 5
78354: ARRAY
78355: PUSH
78356: LD_EXP 103
78360: LESS
78361: IFFALSE 78550
// begin for i := 1 to vehicles do
78363: LD_ADDR_VAR 0 4
78367: PUSH
78368: DOUBLE
78369: LD_INT 1
78371: DEC
78372: ST_TO_ADDR
78373: LD_VAR 0 2
78377: PUSH
78378: FOR_TO
78379: IFFALSE 78548
// begin if hackTanksCaptured [ index ] = hackLimit then
78381: LD_EXP 102
78385: PUSH
78386: LD_VAR 0 5
78390: ARRAY
78391: PUSH
78392: LD_EXP 103
78396: EQUAL
78397: IFFALSE 78401
// break ;
78399: GO 78548
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78401: LD_ADDR_EXP 105
78405: PUSH
78406: LD_EXP 105
78410: PPUSH
78411: LD_VAR 0 5
78415: PPUSH
78416: LD_EXP 105
78420: PUSH
78421: LD_VAR 0 5
78425: ARRAY
78426: PUSH
78427: LD_INT 1
78429: PLUS
78430: PPUSH
78431: CALL_OW 1
78435: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78436: LD_ADDR_EXP 102
78440: PUSH
78441: LD_EXP 102
78445: PPUSH
78446: LD_VAR 0 5
78450: PUSH
78451: LD_EXP 102
78455: PUSH
78456: LD_VAR 0 5
78460: ARRAY
78461: PUSH
78462: LD_INT 1
78464: PLUS
78465: PUSH
78466: EMPTY
78467: LIST
78468: LIST
78469: PPUSH
78470: LD_VAR 0 2
78474: PUSH
78475: LD_VAR 0 4
78479: ARRAY
78480: PUSH
78481: LD_VAR 0 2
78485: PUSH
78486: LD_VAR 0 4
78490: ARRAY
78491: PPUSH
78492: CALL_OW 255
78496: PUSH
78497: EMPTY
78498: LIST
78499: LIST
78500: PPUSH
78501: CALL 20760 0 3
78505: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78506: LD_VAR 0 2
78510: PUSH
78511: LD_VAR 0 4
78515: ARRAY
78516: PPUSH
78517: LD_VAR 0 1
78521: PPUSH
78522: CALL_OW 255
78526: PPUSH
78527: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78531: LD_VAR 0 2
78535: PUSH
78536: LD_VAR 0 4
78540: ARRAY
78541: PPUSH
78542: CALL_OW 141
// end ;
78546: GO 78378
78548: POP
78549: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78550: LD_VAR 0 1
78554: PPUSH
78555: LD_EXP 102
78559: PUSH
78560: LD_VAR 0 5
78564: ARRAY
78565: PUSH
78566: LD_INT 0
78568: PLUS
78569: PPUSH
78570: CALL_OW 505
// end ;
78574: LD_VAR 0 3
78578: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
78579: LD_INT 0
78581: PPUSH
78582: PPUSH
78583: PPUSH
78584: PPUSH
// if not hack in hackTanks then
78585: LD_VAR 0 1
78589: PUSH
78590: LD_EXP 101
78594: IN
78595: NOT
78596: IFFALSE 78600
// exit ;
78598: GO 78844
// index := GetElementIndex ( hackTanks , hack ) ;
78600: LD_ADDR_VAR 0 4
78604: PUSH
78605: LD_EXP 101
78609: PPUSH
78610: LD_VAR 0 1
78614: PPUSH
78615: CALL 20543 0 2
78619: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
78620: LD_ADDR_VAR 0 3
78624: PUSH
78625: DOUBLE
78626: LD_EXP 102
78630: PUSH
78631: LD_VAR 0 4
78635: ARRAY
78636: INC
78637: ST_TO_ADDR
78638: LD_INT 1
78640: PUSH
78641: FOR_DOWNTO
78642: IFFALSE 78818
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
78644: LD_ADDR_VAR 0 5
78648: PUSH
78649: LD_EXP 102
78653: PUSH
78654: LD_VAR 0 4
78658: ARRAY
78659: PUSH
78660: LD_VAR 0 3
78664: ARRAY
78665: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
78666: LD_VAR 0 5
78670: PUSH
78671: LD_INT 1
78673: ARRAY
78674: PPUSH
78675: CALL_OW 302
78679: NOT
78680: IFTRUE 78708
78682: PUSH
78683: LD_VAR 0 5
78687: PUSH
78688: LD_INT 1
78690: ARRAY
78691: PPUSH
78692: CALL_OW 255
78696: PUSH
78697: LD_VAR 0 1
78701: PPUSH
78702: CALL_OW 255
78706: NONEQUAL
78707: OR
78708: IFFALSE 78816
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
78710: LD_VAR 0 5
78714: PUSH
78715: LD_INT 1
78717: ARRAY
78718: PPUSH
78719: CALL_OW 305
78723: IFFALSE 78751
78725: PUSH
78726: LD_VAR 0 5
78730: PUSH
78731: LD_INT 1
78733: ARRAY
78734: PPUSH
78735: CALL_OW 255
78739: PUSH
78740: LD_VAR 0 1
78744: PPUSH
78745: CALL_OW 255
78749: EQUAL
78750: AND
78751: IFFALSE 78775
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
78753: LD_VAR 0 5
78757: PUSH
78758: LD_INT 1
78760: ARRAY
78761: PPUSH
78762: LD_VAR 0 5
78766: PUSH
78767: LD_INT 2
78769: ARRAY
78770: PPUSH
78771: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
78775: LD_ADDR_EXP 102
78779: PUSH
78780: LD_EXP 102
78784: PPUSH
78785: LD_VAR 0 4
78789: PPUSH
78790: LD_EXP 102
78794: PUSH
78795: LD_VAR 0 4
78799: ARRAY
78800: PPUSH
78801: LD_VAR 0 3
78805: PPUSH
78806: CALL_OW 3
78810: PPUSH
78811: CALL_OW 1
78815: ST_TO_ADDR
// end ; end ;
78816: GO 78641
78818: POP
78819: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78820: LD_VAR 0 1
78824: PPUSH
78825: LD_EXP 102
78829: PUSH
78830: LD_VAR 0 4
78834: ARRAY
78835: PUSH
78836: LD_INT 0
78838: PLUS
78839: PPUSH
78840: CALL_OW 505
// end ;
78844: LD_VAR 0 2
78848: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
78849: LD_INT 0
78851: PPUSH
78852: PPUSH
78853: PPUSH
78854: PPUSH
// if not hack in hackTanks then
78855: LD_VAR 0 1
78859: PUSH
78860: LD_EXP 101
78864: IN
78865: NOT
78866: IFFALSE 78870
// exit ;
78868: GO 78955
// index := GetElementIndex ( hackTanks , hack ) ;
78870: LD_ADDR_VAR 0 5
78874: PUSH
78875: LD_EXP 101
78879: PPUSH
78880: LD_VAR 0 1
78884: PPUSH
78885: CALL 20543 0 2
78889: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
78890: LD_ADDR_VAR 0 4
78894: PUSH
78895: DOUBLE
78896: LD_INT 1
78898: DEC
78899: ST_TO_ADDR
78900: LD_EXP 102
78904: PUSH
78905: LD_VAR 0 5
78909: ARRAY
78910: PUSH
78911: FOR_TO
78912: IFFALSE 78953
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
78914: LD_EXP 102
78918: PUSH
78919: LD_VAR 0 5
78923: ARRAY
78924: PUSH
78925: LD_VAR 0 4
78929: ARRAY
78930: PUSH
78931: LD_INT 1
78933: ARRAY
78934: PUSH
78935: LD_VAR 0 2
78939: EQUAL
78940: IFFALSE 78951
// KillUnit ( vehicle ) ;
78942: LD_VAR 0 2
78946: PPUSH
78947: CALL_OW 66
78951: GO 78911
78953: POP
78954: POP
// end ;
78955: LD_VAR 0 3
78959: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
78960: LD_EXP 106
78964: NOT
78965: IFFALSE 79098
78967: GO 78969
78969: DISABLE
78970: LD_INT 0
78972: PPUSH
// begin initMiner := true ;
78973: LD_ADDR_EXP 106
78977: PUSH
78978: LD_INT 1
78980: ST_TO_ADDR
// minersList := [ ] ;
78981: LD_ADDR_EXP 107
78985: PUSH
78986: EMPTY
78987: ST_TO_ADDR
// minerMinesList := [ ] ;
78988: LD_ADDR_EXP 108
78992: PUSH
78993: EMPTY
78994: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
78995: LD_ADDR_EXP 109
78999: PUSH
79000: LD_INT 10
79002: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
79003: LD_ADDR_VAR 0 1
79007: PUSH
79008: LD_INT 34
79010: PUSH
79011: LD_INT 81
79013: PUSH
79014: EMPTY
79015: LIST
79016: LIST
79017: PPUSH
79018: CALL_OW 69
79022: PUSH
79023: FOR_IN
79024: IFFALSE 79096
// begin if not i in minersList then
79026: LD_VAR 0 1
79030: PUSH
79031: LD_EXP 107
79035: IN
79036: NOT
79037: IFFALSE 79094
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
79039: LD_ADDR_EXP 107
79043: PUSH
79044: LD_EXP 107
79048: PPUSH
79049: LD_EXP 107
79053: PUSH
79054: LD_INT 1
79056: PLUS
79057: PPUSH
79058: LD_VAR 0 1
79062: PPUSH
79063: CALL_OW 1
79067: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
79068: LD_ADDR_EXP 108
79072: PUSH
79073: LD_EXP 108
79077: PPUSH
79078: LD_EXP 108
79082: PUSH
79083: LD_INT 1
79085: PLUS
79086: PPUSH
79087: EMPTY
79088: PPUSH
79089: CALL_OW 1
79093: ST_TO_ADDR
// end end ;
79094: GO 79023
79096: POP
79097: POP
// end ;
79098: PPOPN 1
79100: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
79101: LD_EXP 106
79105: IFFALSE 79136
79107: PUSH
79108: LD_EXP 108
79112: PPUSH
79113: CALL 17842 0 1
79117: IFTRUE 79135
79119: PUSH
79120: LD_INT 34
79122: PUSH
79123: LD_INT 81
79125: PUSH
79126: EMPTY
79127: LIST
79128: LIST
79129: PPUSH
79130: CALL_OW 69
79134: OR
79135: AND
79136: IFFALSE 79656
79138: GO 79140
79140: DISABLE
79141: LD_INT 0
79143: PPUSH
79144: PPUSH
79145: PPUSH
79146: PPUSH
// begin enable ;
79147: ENABLE
// for i := minerMinesList downto 1 do
79148: LD_ADDR_VAR 0 1
79152: PUSH
79153: DOUBLE
79154: LD_EXP 108
79158: INC
79159: ST_TO_ADDR
79160: LD_INT 1
79162: PUSH
79163: FOR_DOWNTO
79164: IFFALSE 79654
// begin side := GetSide ( minersList [ i ] ) ;
79166: LD_ADDR_VAR 0 3
79170: PUSH
79171: LD_EXP 107
79175: PUSH
79176: LD_VAR 0 1
79180: ARRAY
79181: PPUSH
79182: CALL_OW 255
79186: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
79187: LD_EXP 107
79191: PUSH
79192: LD_VAR 0 1
79196: ARRAY
79197: PPUSH
79198: CALL_OW 300
79202: IFFALSE 79223
79204: PUSH
79205: LD_VAR 0 3
79209: PUSH
79210: LD_OWVAR 2
79214: PUSH
79215: LD_INT 9
79217: PUSH
79218: EMPTY
79219: LIST
79220: LIST
79221: IN
79222: AND
79223: IFFALSE 79256
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
79225: LD_EXP 107
79229: PUSH
79230: LD_VAR 0 1
79234: ARRAY
79235: PPUSH
79236: LD_EXP 108
79240: PUSH
79241: LD_VAR 0 1
79245: ARRAY
79246: PPUSH
79247: CALL 17842 0 1
79251: PPUSH
79252: CALL_OW 505
// if not minerMinesList [ i ] then
79256: LD_EXP 108
79260: PUSH
79261: LD_VAR 0 1
79265: ARRAY
79266: NOT
79267: IFFALSE 79271
// continue ;
79269: GO 79163
// for j := minerMinesList [ i ] downto 1 do
79271: LD_ADDR_VAR 0 2
79275: PUSH
79276: DOUBLE
79277: LD_EXP 108
79281: PUSH
79282: LD_VAR 0 1
79286: ARRAY
79287: INC
79288: ST_TO_ADDR
79289: LD_INT 1
79291: PUSH
79292: FOR_DOWNTO
79293: IFFALSE 79650
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
79295: LD_EXP 107
79299: PUSH
79300: LD_VAR 0 1
79304: ARRAY
79305: PPUSH
79306: CALL_OW 301
79310: IFTRUE 79330
79312: PUSH
79313: LD_EXP 107
79317: PUSH
79318: LD_VAR 0 1
79322: ARRAY
79323: PPUSH
79324: CALL_OW 305
79328: NOT
79329: OR
79330: IFFALSE 79421
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79332: LD_EXP 108
79336: PUSH
79337: LD_VAR 0 1
79341: ARRAY
79342: PUSH
79343: LD_VAR 0 2
79347: ARRAY
79348: PUSH
79349: LD_INT 1
79351: ARRAY
79352: PPUSH
79353: LD_EXP 108
79357: PUSH
79358: LD_VAR 0 1
79362: ARRAY
79363: PUSH
79364: LD_VAR 0 2
79368: ARRAY
79369: PUSH
79370: LD_INT 2
79372: ARRAY
79373: PPUSH
79374: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79378: LD_ADDR_EXP 108
79382: PUSH
79383: LD_EXP 108
79387: PPUSH
79388: LD_VAR 0 1
79392: PPUSH
79393: LD_EXP 108
79397: PUSH
79398: LD_VAR 0 1
79402: ARRAY
79403: PPUSH
79404: LD_VAR 0 2
79408: PPUSH
79409: CALL_OW 3
79413: PPUSH
79414: CALL_OW 1
79418: ST_TO_ADDR
// continue ;
79419: GO 79292
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79421: LD_ADDR_VAR 0 4
79425: PUSH
79426: LD_EXP 108
79430: PUSH
79431: LD_VAR 0 1
79435: ARRAY
79436: PUSH
79437: LD_VAR 0 2
79441: ARRAY
79442: PUSH
79443: LD_INT 1
79445: ARRAY
79446: PPUSH
79447: LD_EXP 108
79451: PUSH
79452: LD_VAR 0 1
79456: ARRAY
79457: PUSH
79458: LD_VAR 0 2
79462: ARRAY
79463: PUSH
79464: LD_INT 2
79466: ARRAY
79467: PPUSH
79468: CALL_OW 428
79472: ST_TO_ADDR
// if not tmp then
79473: LD_VAR 0 4
79477: NOT
79478: IFFALSE 79482
// continue ;
79480: GO 79292
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79482: LD_VAR 0 4
79486: PUSH
79487: LD_INT 81
79489: PUSH
79490: LD_VAR 0 3
79494: PUSH
79495: EMPTY
79496: LIST
79497: LIST
79498: PPUSH
79499: CALL_OW 69
79503: IN
79504: IFFALSE 79554
79506: PUSH
79507: LD_EXP 108
79511: PUSH
79512: LD_VAR 0 1
79516: ARRAY
79517: PUSH
79518: LD_VAR 0 2
79522: ARRAY
79523: PUSH
79524: LD_INT 1
79526: ARRAY
79527: PPUSH
79528: LD_EXP 108
79532: PUSH
79533: LD_VAR 0 1
79537: ARRAY
79538: PUSH
79539: LD_VAR 0 2
79543: ARRAY
79544: PUSH
79545: LD_INT 2
79547: ARRAY
79548: PPUSH
79549: CALL_OW 458
79553: AND
79554: IFFALSE 79648
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79556: LD_EXP 108
79560: PUSH
79561: LD_VAR 0 1
79565: ARRAY
79566: PUSH
79567: LD_VAR 0 2
79571: ARRAY
79572: PUSH
79573: LD_INT 1
79575: ARRAY
79576: PPUSH
79577: LD_EXP 108
79581: PUSH
79582: LD_VAR 0 1
79586: ARRAY
79587: PUSH
79588: LD_VAR 0 2
79592: ARRAY
79593: PUSH
79594: LD_INT 2
79596: ARRAY
79597: PPUSH
79598: LD_VAR 0 3
79602: PPUSH
79603: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79607: LD_ADDR_EXP 108
79611: PUSH
79612: LD_EXP 108
79616: PPUSH
79617: LD_VAR 0 1
79621: PPUSH
79622: LD_EXP 108
79626: PUSH
79627: LD_VAR 0 1
79631: ARRAY
79632: PPUSH
79633: LD_VAR 0 2
79637: PPUSH
79638: CALL_OW 3
79642: PPUSH
79643: CALL_OW 1
79647: ST_TO_ADDR
// end ; end ;
79648: GO 79292
79650: POP
79651: POP
// end ;
79652: GO 79163
79654: POP
79655: POP
// end ;
79656: PPOPN 4
79658: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
79659: LD_INT 0
79661: PPUSH
79662: PPUSH
79663: PPUSH
79664: PPUSH
// result := false ;
79665: LD_ADDR_VAR 0 4
79669: PUSH
79670: LD_INT 0
79672: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79673: LD_VAR 0 1
79677: PPUSH
79678: CALL_OW 264
79682: PUSH
79683: LD_INT 81
79685: EQUAL
79686: NOT
79687: IFFALSE 79691
// exit ;
79689: GO 80061
// side := GetSide ( unit ) ;
79691: LD_ADDR_VAR 0 6
79695: PUSH
79696: LD_VAR 0 1
79700: PPUSH
79701: CALL_OW 255
79705: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
79706: LD_ADDR_VAR 0 5
79710: PUSH
79711: LD_EXP 107
79715: PPUSH
79716: LD_VAR 0 1
79720: PPUSH
79721: CALL 20543 0 2
79725: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79726: LD_EXP 108
79730: PUSH
79731: LD_VAR 0 5
79735: ARRAY
79736: PUSH
79737: LD_EXP 109
79741: GREATEREQUAL
79742: IFFALSE 79746
// exit ;
79744: GO 80061
// ComMoveXY ( unit , x , y ) ;
79746: LD_VAR 0 1
79750: PPUSH
79751: LD_VAR 0 2
79755: PPUSH
79756: LD_VAR 0 3
79760: PPUSH
79761: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79765: LD_INT 35
79767: PPUSH
79768: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
79772: LD_VAR 0 1
79776: PPUSH
79777: LD_VAR 0 2
79781: PPUSH
79782: LD_VAR 0 3
79786: PPUSH
79787: CALL 52599 0 3
79791: NOT
79792: IFFALSE 79805
79794: PUSH
79795: LD_VAR 0 1
79799: PPUSH
79800: CALL_OW 314
79804: AND
79805: IFFALSE 79809
// exit ;
79807: GO 80061
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
79809: LD_VAR 0 2
79813: PPUSH
79814: LD_VAR 0 3
79818: PPUSH
79819: CALL_OW 428
79823: PUSH
79824: LD_VAR 0 1
79828: EQUAL
79829: IFFALSE 79843
79831: PUSH
79832: LD_VAR 0 1
79836: PPUSH
79837: CALL_OW 314
79841: NOT
79842: AND
79843: IFFALSE 79765
// if MineAtPos ( x , y ) then
79845: LD_VAR 0 2
79849: PPUSH
79850: LD_VAR 0 3
79854: PPUSH
79855: CALL_OW 458
79859: IFFALSE 79863
// exit ;
79861: GO 80061
// if your_side = side then
79863: LD_OWVAR 2
79867: PUSH
79868: LD_VAR 0 6
79872: EQUAL
79873: IFFALSE 79892
// PlaySoundXY ( x , y , PlantMine ) ;
79875: LD_VAR 0 2
79879: PPUSH
79880: LD_VAR 0 3
79884: PPUSH
79885: LD_STRING PlantMine
79887: PPUSH
79888: CALL_OW 366
// repeat wait ( 1 ) ;
79892: LD_INT 1
79894: PPUSH
79895: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
79899: LD_VAR 0 2
79903: PPUSH
79904: LD_VAR 0 3
79908: PPUSH
79909: LD_VAR 0 6
79913: PPUSH
79914: LD_INT 0
79916: PPUSH
79917: CALL_OW 454
79921: IFFALSE 79892
// if MineAtPos ( x , y ) then
79923: LD_VAR 0 2
79927: PPUSH
79928: LD_VAR 0 3
79932: PPUSH
79933: CALL_OW 458
79937: IFFALSE 80053
// begin for i in minerMinesList [ index ] do
79939: LD_ADDR_VAR 0 7
79943: PUSH
79944: LD_EXP 108
79948: PUSH
79949: LD_VAR 0 5
79953: ARRAY
79954: PUSH
79955: FOR_IN
79956: IFFALSE 79998
// if i [ 1 ] = x and i [ 2 ] = y then
79958: LD_VAR 0 7
79962: PUSH
79963: LD_INT 1
79965: ARRAY
79966: PUSH
79967: LD_VAR 0 2
79971: EQUAL
79972: IFFALSE 79990
79974: PUSH
79975: LD_VAR 0 7
79979: PUSH
79980: LD_INT 2
79982: ARRAY
79983: PUSH
79984: LD_VAR 0 3
79988: EQUAL
79989: AND
79990: IFFALSE 79996
// exit ;
79992: POP
79993: POP
79994: GO 80061
79996: GO 79955
79998: POP
79999: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
80000: LD_ADDR_EXP 108
80004: PUSH
80005: LD_EXP 108
80009: PPUSH
80010: LD_VAR 0 5
80014: PUSH
80015: LD_EXP 108
80019: PUSH
80020: LD_VAR 0 5
80024: ARRAY
80025: PUSH
80026: LD_INT 1
80028: PLUS
80029: PUSH
80030: EMPTY
80031: LIST
80032: LIST
80033: PPUSH
80034: LD_VAR 0 2
80038: PUSH
80039: LD_VAR 0 3
80043: PUSH
80044: EMPTY
80045: LIST
80046: LIST
80047: PPUSH
80048: CALL 20760 0 3
80052: ST_TO_ADDR
// end ; result := true ;
80053: LD_ADDR_VAR 0 4
80057: PUSH
80058: LD_INT 1
80060: ST_TO_ADDR
// end ;
80061: LD_VAR 0 4
80065: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
80066: LD_INT 0
80068: PPUSH
80069: PPUSH
80070: PPUSH
// if not unit in minersList then
80071: LD_VAR 0 1
80075: PUSH
80076: LD_EXP 107
80080: IN
80081: NOT
80082: IFFALSE 80086
// exit ;
80084: GO 80293
// index := GetElementIndex ( minersList , unit ) ;
80086: LD_ADDR_VAR 0 6
80090: PUSH
80091: LD_EXP 107
80095: PPUSH
80096: LD_VAR 0 1
80100: PPUSH
80101: CALL 20543 0 2
80105: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
80106: LD_ADDR_VAR 0 5
80110: PUSH
80111: DOUBLE
80112: LD_EXP 108
80116: PUSH
80117: LD_VAR 0 6
80121: ARRAY
80122: INC
80123: ST_TO_ADDR
80124: LD_INT 1
80126: PUSH
80127: FOR_DOWNTO
80128: IFFALSE 80291
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
80130: LD_EXP 108
80134: PUSH
80135: LD_VAR 0 6
80139: ARRAY
80140: PUSH
80141: LD_VAR 0 5
80145: ARRAY
80146: PUSH
80147: LD_INT 1
80149: ARRAY
80150: PPUSH
80151: LD_EXP 108
80155: PUSH
80156: LD_VAR 0 6
80160: ARRAY
80161: PUSH
80162: LD_VAR 0 5
80166: ARRAY
80167: PUSH
80168: LD_INT 2
80170: ARRAY
80171: PPUSH
80172: LD_VAR 0 2
80176: PPUSH
80177: LD_VAR 0 3
80181: PPUSH
80182: CALL_OW 298
80186: PUSH
80187: LD_INT 6
80189: LESS
80190: IFFALSE 80289
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80192: LD_EXP 108
80196: PUSH
80197: LD_VAR 0 6
80201: ARRAY
80202: PUSH
80203: LD_VAR 0 5
80207: ARRAY
80208: PUSH
80209: LD_INT 1
80211: ARRAY
80212: PPUSH
80213: LD_EXP 108
80217: PUSH
80218: LD_VAR 0 6
80222: ARRAY
80223: PUSH
80224: LD_VAR 0 5
80228: ARRAY
80229: PUSH
80230: LD_INT 2
80232: ARRAY
80233: PPUSH
80234: LD_VAR 0 1
80238: PPUSH
80239: CALL_OW 255
80243: PPUSH
80244: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80248: LD_ADDR_EXP 108
80252: PUSH
80253: LD_EXP 108
80257: PPUSH
80258: LD_VAR 0 6
80262: PPUSH
80263: LD_EXP 108
80267: PUSH
80268: LD_VAR 0 6
80272: ARRAY
80273: PPUSH
80274: LD_VAR 0 5
80278: PPUSH
80279: CALL_OW 3
80283: PPUSH
80284: CALL_OW 1
80288: ST_TO_ADDR
// end ; end ;
80289: GO 80127
80291: POP
80292: POP
// end ;
80293: LD_VAR 0 4
80297: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
80298: LD_INT 0
80300: PPUSH
80301: PPUSH
80302: PPUSH
80303: PPUSH
80304: PPUSH
80305: PPUSH
80306: PPUSH
80307: PPUSH
80308: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
80309: LD_VAR 0 1
80313: PPUSH
80314: CALL_OW 264
80318: PUSH
80319: LD_INT 81
80321: EQUAL
80322: NOT
80323: IFTRUE 80338
80325: PUSH
80326: LD_VAR 0 1
80330: PUSH
80331: LD_EXP 107
80335: IN
80336: NOT
80337: OR
80338: IFFALSE 80342
// exit ;
80340: GO 80668
// index := GetElementIndex ( minersList , unit ) ;
80342: LD_ADDR_VAR 0 6
80346: PUSH
80347: LD_EXP 107
80351: PPUSH
80352: LD_VAR 0 1
80356: PPUSH
80357: CALL 20543 0 2
80361: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80362: LD_ADDR_VAR 0 8
80366: PUSH
80367: LD_EXP 109
80371: PUSH
80372: LD_EXP 108
80376: PUSH
80377: LD_VAR 0 6
80381: ARRAY
80382: MINUS
80383: ST_TO_ADDR
// if not minesFreeAmount then
80384: LD_VAR 0 8
80388: NOT
80389: IFFALSE 80393
// exit ;
80391: GO 80668
// tmp := [ ] ;
80393: LD_ADDR_VAR 0 7
80397: PUSH
80398: EMPTY
80399: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80400: LD_ADDR_VAR 0 5
80404: PUSH
80405: DOUBLE
80406: LD_INT 1
80408: DEC
80409: ST_TO_ADDR
80410: LD_VAR 0 8
80414: PUSH
80415: FOR_TO
80416: IFFALSE 80615
// begin _d := rand ( 0 , 5 ) ;
80418: LD_ADDR_VAR 0 11
80422: PUSH
80423: LD_INT 0
80425: PPUSH
80426: LD_INT 5
80428: PPUSH
80429: CALL_OW 12
80433: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80434: LD_ADDR_VAR 0 12
80438: PUSH
80439: LD_INT 2
80441: PPUSH
80442: LD_INT 6
80444: PPUSH
80445: CALL_OW 12
80449: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80450: LD_ADDR_VAR 0 9
80454: PUSH
80455: LD_VAR 0 2
80459: PPUSH
80460: LD_VAR 0 11
80464: PPUSH
80465: LD_VAR 0 12
80469: PPUSH
80470: CALL_OW 272
80474: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80475: LD_ADDR_VAR 0 10
80479: PUSH
80480: LD_VAR 0 3
80484: PPUSH
80485: LD_VAR 0 11
80489: PPUSH
80490: LD_VAR 0 12
80494: PPUSH
80495: CALL_OW 273
80499: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80500: LD_VAR 0 9
80504: PPUSH
80505: LD_VAR 0 10
80509: PPUSH
80510: CALL_OW 488
80514: IFFALSE 80538
80516: PUSH
80517: LD_VAR 0 9
80521: PUSH
80522: LD_VAR 0 10
80526: PUSH
80527: EMPTY
80528: LIST
80529: LIST
80530: PUSH
80531: LD_VAR 0 7
80535: IN
80536: NOT
80537: AND
80538: IFFALSE 80557
80540: PUSH
80541: LD_VAR 0 9
80545: PPUSH
80546: LD_VAR 0 10
80550: PPUSH
80551: CALL_OW 458
80555: NOT
80556: AND
80557: IFFALSE 80599
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80559: LD_ADDR_VAR 0 7
80563: PUSH
80564: LD_VAR 0 7
80568: PPUSH
80569: LD_VAR 0 7
80573: PUSH
80574: LD_INT 1
80576: PLUS
80577: PPUSH
80578: LD_VAR 0 9
80582: PUSH
80583: LD_VAR 0 10
80587: PUSH
80588: EMPTY
80589: LIST
80590: LIST
80591: PPUSH
80592: CALL_OW 1
80596: ST_TO_ADDR
80597: GO 80613
// i := i - 1 ;
80599: LD_ADDR_VAR 0 5
80603: PUSH
80604: LD_VAR 0 5
80608: PUSH
80609: LD_INT 1
80611: MINUS
80612: ST_TO_ADDR
// end ;
80613: GO 80415
80615: POP
80616: POP
// for i in tmp do
80617: LD_ADDR_VAR 0 5
80621: PUSH
80622: LD_VAR 0 7
80626: PUSH
80627: FOR_IN
80628: IFFALSE 80666
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80630: LD_VAR 0 1
80634: PPUSH
80635: LD_VAR 0 5
80639: PUSH
80640: LD_INT 1
80642: ARRAY
80643: PPUSH
80644: LD_VAR 0 5
80648: PUSH
80649: LD_INT 2
80651: ARRAY
80652: PPUSH
80653: CALL 79659 0 3
80657: NOT
80658: IFFALSE 80664
// exit ;
80660: POP
80661: POP
80662: GO 80668
80664: GO 80627
80666: POP
80667: POP
// end ;
80668: LD_VAR 0 4
80672: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
80673: LD_INT 0
80675: PPUSH
80676: PPUSH
80677: PPUSH
80678: PPUSH
80679: PPUSH
80680: PPUSH
80681: PPUSH
80682: PPUSH
80683: PPUSH
// if GetClass ( unit ) <> class_sniper then
80684: LD_VAR 0 1
80688: PPUSH
80689: CALL_OW 257
80693: PUSH
80694: LD_INT 5
80696: NONEQUAL
80697: IFFALSE 80701
// exit ;
80699: GO 81171
// dist := 8 ;
80701: LD_ADDR_VAR 0 5
80705: PUSH
80706: LD_INT 8
80708: ST_TO_ADDR
// viewRange := 12 ;
80709: LD_ADDR_VAR 0 8
80713: PUSH
80714: LD_INT 12
80716: ST_TO_ADDR
// side := GetSide ( unit ) ;
80717: LD_ADDR_VAR 0 6
80721: PUSH
80722: LD_VAR 0 1
80726: PPUSH
80727: CALL_OW 255
80731: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
80732: LD_INT 61
80734: PPUSH
80735: LD_VAR 0 6
80739: PPUSH
80740: CALL_OW 321
80744: PUSH
80745: LD_INT 2
80747: EQUAL
80748: IFFALSE 80758
// viewRange := 16 ;
80750: LD_ADDR_VAR 0 8
80754: PUSH
80755: LD_INT 16
80757: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
80758: LD_VAR 0 1
80762: PPUSH
80763: LD_VAR 0 2
80767: PPUSH
80768: LD_VAR 0 3
80772: PPUSH
80773: CALL_OW 297
80777: PUSH
80778: LD_VAR 0 5
80782: GREATER
80783: IFFALSE 80862
// begin ComMoveXY ( unit , x , y ) ;
80785: LD_VAR 0 1
80789: PPUSH
80790: LD_VAR 0 2
80794: PPUSH
80795: LD_VAR 0 3
80799: PPUSH
80800: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80804: LD_INT 35
80806: PPUSH
80807: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
80811: LD_VAR 0 1
80815: PPUSH
80816: LD_VAR 0 2
80820: PPUSH
80821: LD_VAR 0 3
80825: PPUSH
80826: CALL 52599 0 3
80830: NOT
80831: IFFALSE 80835
// exit ;
80833: GO 81171
// until GetDistUnitXY ( unit , x , y ) < dist ;
80835: LD_VAR 0 1
80839: PPUSH
80840: LD_VAR 0 2
80844: PPUSH
80845: LD_VAR 0 3
80849: PPUSH
80850: CALL_OW 297
80854: PUSH
80855: LD_VAR 0 5
80859: LESS
80860: IFFALSE 80804
// end ; ComTurnXY ( unit , x , y ) ;
80862: LD_VAR 0 1
80866: PPUSH
80867: LD_VAR 0 2
80871: PPUSH
80872: LD_VAR 0 3
80876: PPUSH
80877: CALL_OW 118
// repeat if Multiplayer then
80881: LD_OWVAR 4
80885: IFFALSE 80896
// wait ( 35 ) else
80887: LD_INT 35
80889: PPUSH
80890: CALL_OW 67
80894: GO 80903
// wait ( 5 ) ;
80896: LD_INT 5
80898: PPUSH
80899: CALL_OW 67
// _d := GetDir ( unit ) ;
80903: LD_ADDR_VAR 0 11
80907: PUSH
80908: LD_VAR 0 1
80912: PPUSH
80913: CALL_OW 254
80917: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
80918: LD_ADDR_VAR 0 7
80922: PUSH
80923: LD_VAR 0 1
80927: PPUSH
80928: CALL_OW 250
80932: PPUSH
80933: LD_VAR 0 1
80937: PPUSH
80938: CALL_OW 251
80942: PPUSH
80943: LD_VAR 0 2
80947: PPUSH
80948: LD_VAR 0 3
80952: PPUSH
80953: CALL 55235 0 4
80957: ST_TO_ADDR
// until dir = _d ;
80958: LD_VAR 0 7
80962: PUSH
80963: LD_VAR 0 11
80967: EQUAL
80968: IFFALSE 80881
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
80970: LD_ADDR_VAR 0 9
80974: PUSH
80975: LD_VAR 0 1
80979: PPUSH
80980: CALL_OW 250
80984: PPUSH
80985: LD_VAR 0 7
80989: PPUSH
80990: LD_VAR 0 5
80994: PPUSH
80995: CALL_OW 272
80999: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
81000: LD_ADDR_VAR 0 10
81004: PUSH
81005: LD_VAR 0 1
81009: PPUSH
81010: CALL_OW 251
81014: PPUSH
81015: LD_VAR 0 7
81019: PPUSH
81020: LD_VAR 0 5
81024: PPUSH
81025: CALL_OW 273
81029: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81030: LD_VAR 0 9
81034: PPUSH
81035: LD_VAR 0 10
81039: PPUSH
81040: CALL_OW 488
81044: NOT
81045: IFFALSE 81049
// exit ;
81047: GO 81171
// ComAnimCustom ( unit , 1 ) ;
81049: LD_VAR 0 1
81053: PPUSH
81054: LD_INT 1
81056: PPUSH
81057: CALL_OW 592
// p := 0 ;
81061: LD_ADDR_VAR 0 12
81065: PUSH
81066: LD_INT 0
81068: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
81069: LD_VAR 0 9
81073: PPUSH
81074: LD_VAR 0 10
81078: PPUSH
81079: LD_VAR 0 6
81083: PPUSH
81084: LD_VAR 0 8
81088: PPUSH
81089: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
81093: LD_INT 35
81095: PPUSH
81096: CALL_OW 67
// p := Inc ( p ) ;
81100: LD_ADDR_VAR 0 12
81104: PUSH
81105: LD_VAR 0 12
81109: PPUSH
81110: CALL 55191 0 1
81114: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
81115: LD_VAR 0 12
81119: PUSH
81120: LD_INT 3
81122: EQUAL
81123: IFTRUE 81137
81125: PUSH
81126: LD_VAR 0 1
81130: PPUSH
81131: CALL_OW 302
81135: NOT
81136: OR
81137: IFTRUE 81150
81139: PUSH
81140: LD_VAR 0 1
81144: PPUSH
81145: CALL_OW 301
81149: OR
81150: IFFALSE 81093
// RemoveSeeing ( _x , _y , side ) ;
81152: LD_VAR 0 9
81156: PPUSH
81157: LD_VAR 0 10
81161: PPUSH
81162: LD_VAR 0 6
81166: PPUSH
81167: CALL_OW 331
// end ;
81171: LD_VAR 0 4
81175: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
81176: LD_INT 0
81178: PPUSH
81179: PPUSH
81180: PPUSH
81181: PPUSH
81182: PPUSH
81183: PPUSH
81184: PPUSH
81185: PPUSH
81186: PPUSH
81187: PPUSH
81188: PPUSH
// if not unit then
81189: LD_VAR 0 1
81193: NOT
81194: IFFALSE 81198
// exit ;
81196: GO 81469
// side := GetSide ( unit ) ;
81198: LD_ADDR_VAR 0 3
81202: PUSH
81203: LD_VAR 0 1
81207: PPUSH
81208: CALL_OW 255
81212: ST_TO_ADDR
// x := GetX ( unit ) ;
81213: LD_ADDR_VAR 0 5
81217: PUSH
81218: LD_VAR 0 1
81222: PPUSH
81223: CALL_OW 250
81227: ST_TO_ADDR
// y := GetY ( unit ) ;
81228: LD_ADDR_VAR 0 6
81232: PUSH
81233: LD_VAR 0 1
81237: PPUSH
81238: CALL_OW 251
81242: ST_TO_ADDR
// r := 8 ;
81243: LD_ADDR_VAR 0 4
81247: PUSH
81248: LD_INT 8
81250: ST_TO_ADDR
// if x - r < 0 then
81251: LD_VAR 0 5
81255: PUSH
81256: LD_VAR 0 4
81260: MINUS
81261: PUSH
81262: LD_INT 0
81264: LESS
81265: IFFALSE 81277
// min_x := 0 else
81267: LD_ADDR_VAR 0 7
81271: PUSH
81272: LD_INT 0
81274: ST_TO_ADDR
81275: GO 81293
// min_x := x - r ;
81277: LD_ADDR_VAR 0 7
81281: PUSH
81282: LD_VAR 0 5
81286: PUSH
81287: LD_VAR 0 4
81291: MINUS
81292: ST_TO_ADDR
// if y - r < 0 then
81293: LD_VAR 0 6
81297: PUSH
81298: LD_VAR 0 4
81302: MINUS
81303: PUSH
81304: LD_INT 0
81306: LESS
81307: IFFALSE 81319
// min_y := 0 else
81309: LD_ADDR_VAR 0 8
81313: PUSH
81314: LD_INT 0
81316: ST_TO_ADDR
81317: GO 81335
// min_y := y - r ;
81319: LD_ADDR_VAR 0 8
81323: PUSH
81324: LD_VAR 0 6
81328: PUSH
81329: LD_VAR 0 4
81333: MINUS
81334: ST_TO_ADDR
// max_x := x + r ;
81335: LD_ADDR_VAR 0 9
81339: PUSH
81340: LD_VAR 0 5
81344: PUSH
81345: LD_VAR 0 4
81349: PLUS
81350: ST_TO_ADDR
// max_y := y + r ;
81351: LD_ADDR_VAR 0 10
81355: PUSH
81356: LD_VAR 0 6
81360: PUSH
81361: LD_VAR 0 4
81365: PLUS
81366: ST_TO_ADDR
// for _x = min_x to max_x do
81367: LD_ADDR_VAR 0 11
81371: PUSH
81372: DOUBLE
81373: LD_VAR 0 7
81377: DEC
81378: ST_TO_ADDR
81379: LD_VAR 0 9
81383: PUSH
81384: FOR_TO
81385: IFFALSE 81467
// for _y = min_y to max_y do
81387: LD_ADDR_VAR 0 12
81391: PUSH
81392: DOUBLE
81393: LD_VAR 0 8
81397: DEC
81398: ST_TO_ADDR
81399: LD_VAR 0 10
81403: PUSH
81404: FOR_TO
81405: IFFALSE 81463
// begin if not ValidHex ( _x , _y ) then
81407: LD_VAR 0 11
81411: PPUSH
81412: LD_VAR 0 12
81416: PPUSH
81417: CALL_OW 488
81421: NOT
81422: IFFALSE 81426
// continue ;
81424: GO 81404
// if MineAtPos ( _x , _y ) then
81426: LD_VAR 0 11
81430: PPUSH
81431: LD_VAR 0 12
81435: PPUSH
81436: CALL_OW 458
81440: IFFALSE 81461
// ViewMineAtPos ( _x , _y , side ) ;
81442: LD_VAR 0 11
81446: PPUSH
81447: LD_VAR 0 12
81451: PPUSH
81452: LD_VAR 0 3
81456: PPUSH
81457: CALL_OW 457
// end ;
81461: GO 81404
81463: POP
81464: POP
81465: GO 81384
81467: POP
81468: POP
// end ;
81469: LD_VAR 0 2
81473: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
81474: LD_INT 0
81476: PPUSH
81477: PPUSH
81478: PPUSH
81479: PPUSH
81480: PPUSH
81481: PPUSH
81482: PPUSH
// if not units then
81483: LD_VAR 0 1
81487: NOT
81488: IFFALSE 81492
// exit ;
81490: GO 81956
// scaners := [ ] ;
81492: LD_ADDR_VAR 0 6
81496: PUSH
81497: EMPTY
81498: ST_TO_ADDR
// for i in units do
81499: LD_ADDR_VAR 0 3
81503: PUSH
81504: LD_VAR 0 1
81508: PUSH
81509: FOR_IN
81510: IFFALSE 81667
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
81512: LD_VAR 0 3
81516: PPUSH
81517: CALL_OW 264
81521: PUSH
81522: LD_INT 11
81524: NONEQUAL
81525: IFTRUE 81539
81527: PUSH
81528: LD_VAR 0 3
81532: PPUSH
81533: CALL_OW 302
81537: NOT
81538: OR
81539: IFTRUE 81556
81541: PUSH
81542: LD_VAR 0 3
81546: PPUSH
81547: CALL_OW 110
81551: PUSH
81552: LD_INT 502
81554: EQUAL
81555: OR
81556: IFFALSE 81560
// continue ;
81558: GO 81509
// ComStop ( i ) ;
81560: LD_VAR 0 3
81564: PPUSH
81565: CALL_OW 141
// x := GetX ( i ) ;
81569: LD_ADDR_VAR 0 4
81573: PUSH
81574: LD_VAR 0 3
81578: PPUSH
81579: CALL_OW 250
81583: ST_TO_ADDR
// y := GetY ( i ) ;
81584: LD_ADDR_VAR 0 5
81588: PUSH
81589: LD_VAR 0 3
81593: PPUSH
81594: CALL_OW 251
81598: ST_TO_ADDR
// if GetSide ( i ) = your_side then
81599: LD_VAR 0 3
81603: PPUSH
81604: CALL_OW 255
81608: PUSH
81609: LD_OWVAR 2
81613: EQUAL
81614: IFFALSE 81633
// PlaySoundXY ( x , y , mineDetector ) ;
81616: LD_VAR 0 4
81620: PPUSH
81621: LD_VAR 0 5
81625: PPUSH
81626: LD_STRING mineDetector
81628: PPUSH
81629: CALL_OW 366
// scaners := Join ( scaners , i ) ;
81633: LD_ADDR_VAR 0 6
81637: PUSH
81638: LD_VAR 0 6
81642: PPUSH
81643: LD_VAR 0 3
81647: PPUSH
81648: CALL 53818 0 2
81652: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
81653: LD_VAR 0 3
81657: PPUSH
81658: LD_INT 502
81660: PPUSH
81661: CALL_OW 109
// end ;
81665: GO 81509
81667: POP
81668: POP
// if not scaners then
81669: LD_VAR 0 6
81673: NOT
81674: IFFALSE 81678
// exit ;
81676: GO 81956
// wait ( 3 ) ;
81678: LD_INT 3
81680: PPUSH
81681: CALL_OW 67
// timer := 6 ;
81685: LD_ADDR_VAR 0 7
81689: PUSH
81690: LD_INT 6
81692: ST_TO_ADDR
// repeat for i in scaners do
81693: LD_ADDR_VAR 0 3
81697: PUSH
81698: LD_VAR 0 6
81702: PUSH
81703: FOR_IN
81704: IFFALSE 81854
// begin side := GetSide ( i ) ;
81706: LD_ADDR_VAR 0 8
81710: PUSH
81711: LD_VAR 0 3
81715: PPUSH
81716: CALL_OW 255
81720: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
81721: LD_VAR 0 3
81725: PPUSH
81726: CALL_OW 302
81730: NOT
81731: IFTRUE 81744
81733: PUSH
81734: LD_VAR 0 3
81738: PPUSH
81739: CALL_OW 314
81743: OR
81744: IFTRUE 81775
81746: PUSH
81747: LD_VAR 0 3
81751: PPUSH
81752: CALL_OW 263
81756: PUSH
81757: LD_INT 1
81759: EQUAL
81760: IFFALSE 81774
81762: PUSH
81763: LD_VAR 0 3
81767: PPUSH
81768: CALL_OW 311
81772: NOT
81773: AND
81774: OR
81775: IFFALSE 81819
// begin SetUnitDisplayNumber ( i , 0 ) ;
81777: LD_VAR 0 3
81781: PPUSH
81782: LD_INT 0
81784: PPUSH
81785: CALL_OW 505
// SetTag ( i , 0 ) ;
81789: LD_VAR 0 3
81793: PPUSH
81794: LD_INT 0
81796: PPUSH
81797: CALL_OW 109
// scaners := scaners diff i ;
81801: LD_ADDR_VAR 0 6
81805: PUSH
81806: LD_VAR 0 6
81810: PUSH
81811: LD_VAR 0 3
81815: DIFF
81816: ST_TO_ADDR
// continue ;
81817: GO 81703
// end ; if side in [ your_side , 9 ] then
81819: LD_VAR 0 8
81823: PUSH
81824: LD_OWVAR 2
81828: PUSH
81829: LD_INT 9
81831: PUSH
81832: EMPTY
81833: LIST
81834: LIST
81835: IN
81836: IFFALSE 81852
// SetUnitDisplayNumber ( i , timer ) ;
81838: LD_VAR 0 3
81842: PPUSH
81843: LD_VAR 0 7
81847: PPUSH
81848: CALL_OW 505
// end ;
81852: GO 81703
81854: POP
81855: POP
// if not scaners then
81856: LD_VAR 0 6
81860: NOT
81861: IFFALSE 81865
// exit ;
81863: GO 81956
// timer := Dec ( timer ) ;
81865: LD_ADDR_VAR 0 7
81869: PUSH
81870: LD_VAR 0 7
81874: PPUSH
81875: CALL 55213 0 1
81879: ST_TO_ADDR
// wait ( 0 0$1 ) ;
81880: LD_INT 35
81882: PPUSH
81883: CALL_OW 67
// until timer = 0 ;
81887: LD_VAR 0 7
81891: PUSH
81892: LD_INT 0
81894: EQUAL
81895: IFFALSE 81693
// if not scaners then
81897: LD_VAR 0 6
81901: NOT
81902: IFFALSE 81906
// exit ;
81904: GO 81956
// for i in scaners do
81906: LD_ADDR_VAR 0 3
81910: PUSH
81911: LD_VAR 0 6
81915: PUSH
81916: FOR_IN
81917: IFFALSE 81954
// begin SetUnitDisplayNumber ( i , 0 ) ;
81919: LD_VAR 0 3
81923: PPUSH
81924: LD_INT 0
81926: PPUSH
81927: CALL_OW 505
// SetTag ( i , 0 ) ;
81931: LD_VAR 0 3
81935: PPUSH
81936: LD_INT 0
81938: PPUSH
81939: CALL_OW 109
// RevealDetectorMine ( i ) ;
81943: LD_VAR 0 3
81947: PPUSH
81948: CALL 81176 0 1
// end ;
81952: GO 81916
81954: POP
81955: POP
// end ;
81956: LD_VAR 0 2
81960: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
81961: LD_INT 0
81963: PPUSH
// if p1 = mine_detector_mode then
81964: LD_VAR 0 2
81968: PUSH
81969: LD_INT 103
81971: EQUAL
81972: IFFALSE 81983
// DetectMine ( units ) ;
81974: LD_VAR 0 1
81978: PPUSH
81979: CALL 81474 0 1
// end ;
81983: LD_VAR 0 7
81987: RET
