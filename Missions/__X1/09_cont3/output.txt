// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 41 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 2680 0 0
// LoadEnv ;
  16: CALL 2430 0 0
// LoadCam ;
  20: CALL 2844 0 0
// LoadTech ;
  24: CALL 2920 0 0
// LoadBase ;
  28: CALL 2995 0 0
// PrepareArabian ;
  32: CALL 97 0 0
// Action ;
  36: CALL 3317 0 0
// end ;
  40: END
// export debug , prefix , time09 , time09c ; function Init ; begin
  41: LD_INT 0
  43: PPUSH
// debug := false ;
  44: LD_ADDR_EXP 1
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// prefix := 09c_ ;
  52: LD_ADDR_EXP 2
  56: PUSH
  57: LD_STRING 09c_
  59: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_STRING 09_tick
  67: PPUSH
  68: LD_INT 31500
  70: PPUSH
  71: CALL_OW 30
  75: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  76: LD_ADDR_EXP 4
  80: PUSH
  81: LD_STRING 09c_tick
  83: PPUSH
  84: LD_INT 10500
  86: PPUSH
  87: CALL_OW 30
  91: ST_TO_ADDR
// end ; end_of_file
  92: LD_VAR 0 1
  96: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
  97: LD_INT 0
  99: PPUSH
 100: PPUSH
 101: PPUSH
 102: PPUSH
 103: PPUSH
 104: PPUSH
 105: PPUSH
 106: PPUSH
 107: PPUSH
// uc_side := 2 ;
 108: LD_ADDR_OWVAR 20
 112: PUSH
 113: LD_INT 2
 115: ST_TO_ADDR
// uc_nation := nation_nature ;
 116: LD_ADDR_OWVAR 21
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 124: LD_ADDR_VAR 0 3
 128: PUSH
 129: LD_STRING 09_apes
 131: PPUSH
 132: CALL_OW 31
 136: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 137: LD_ADDR_VAR 0 6
 141: PUSH
 142: LD_INT 22
 144: PUSH
 145: LD_INT 2
 147: PUSH
 148: EMPTY
 149: LIST
 150: LIST
 151: PUSH
 152: LD_INT 2
 154: PUSH
 155: LD_INT 30
 157: PUSH
 158: LD_INT 0
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PUSH
 165: LD_INT 30
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PPUSH
 184: CALL_OW 69
 188: ST_TO_ADDR
// if apes then
 189: LD_VAR 0 3
 193: IFFALSE 272
// for i in apes do
 195: LD_ADDR_VAR 0 2
 199: PUSH
 200: LD_VAR 0 3
 204: PUSH
 205: FOR_IN
 206: IFFALSE 270
// if UnitsInside ( b [ 1 ] ) < 6 then
 208: LD_VAR 0 6
 212: PUSH
 213: LD_INT 1
 215: ARRAY
 216: PPUSH
 217: CALL_OW 313
 221: PUSH
 222: LD_INT 6
 224: LESS
 225: IFFALSE 247
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 227: LD_VAR 0 2
 231: PPUSH
 232: LD_VAR 0 6
 236: PUSH
 237: LD_INT 1
 239: ARRAY
 240: PPUSH
 241: CALL_OW 52
 245: GO 268
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 247: LD_VAR 0 2
 251: PPUSH
 252: LD_INT 82
 254: PPUSH
 255: LD_INT 27
 257: PPUSH
 258: LD_INT 6
 260: PPUSH
 261: LD_INT 0
 263: PPUSH
 264: CALL_OW 50
 268: GO 205
 270: POP
 271: POP
// InitHC_All ( ) ;
 272: CALL_OW 584
// uc_nation := nation_arabian ;
 276: LD_ADDR_OWVAR 21
 280: PUSH
 281: LD_INT 2
 283: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 284: LD_ADDR_VAR 0 6
 288: PUSH
 289: LD_INT 22
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 21
 301: PUSH
 302: LD_INT 3
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 2
 311: PUSH
 312: LD_INT 30
 314: PUSH
 315: LD_INT 32
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 30
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 30
 334: PUSH
 335: LD_INT 5
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: LIST
 352: PPUSH
 353: CALL_OW 69
 357: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 358: LD_ADDR_EXP 25
 362: PUSH
 363: LD_STRING Rolf
 365: PPUSH
 366: LD_EXP 1
 370: NOT
 371: PPUSH
 372: LD_STRING 06_
 374: PPUSH
 375: CALL 3391 0 3
 379: ST_TO_ADDR
// rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 380: LD_ADDR_EXP 24
 384: PUSH
 385: LD_STRING 06_RolfSquad
 387: PPUSH
 388: CALL_OW 31
 392: ST_TO_ADDR
// if rolfSquad < 3 then
 393: LD_EXP 24
 397: PUSH
 398: LD_INT 3
 400: LESS
 401: IFFALSE 464
// for i := 1 to 3 - Count ( rolfSquad ) do
 403: LD_ADDR_VAR 0 2
 407: PUSH
 408: DOUBLE
 409: LD_INT 1
 411: DEC
 412: ST_TO_ADDR
 413: LD_INT 3
 415: PUSH
 416: LD_EXP 24
 420: PPUSH
 421: CALL 5493 0 1
 425: MINUS
 426: PUSH
 427: FOR_TO
 428: IFFALSE 462
// begin PrepareSoldier ( false , 4 ) ;
 430: LD_INT 0
 432: PPUSH
 433: LD_INT 4
 435: PPUSH
 436: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 440: LD_ADDR_EXP 24
 444: PUSH
 445: LD_EXP 24
 449: PPUSH
 450: CALL_OW 44
 454: PPUSH
 455: CALL 40859 0 2
 459: ST_TO_ADDR
// end ;
 460: GO 427
 462: POP
 463: POP
// if b then
 464: LD_VAR 0 6
 468: IFFALSE 543
// begin for i in rolfSquad union Rolf do
 470: LD_ADDR_VAR 0 2
 474: PUSH
 475: LD_EXP 24
 479: PUSH
 480: LD_EXP 25
 484: UNION
 485: PUSH
 486: FOR_IN
 487: IFFALSE 539
// begin SetClass ( i , 1 ) ;
 489: LD_VAR 0 2
 493: PPUSH
 494: LD_INT 1
 496: PPUSH
 497: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 501: LD_VAR 0 2
 505: PPUSH
 506: LD_VAR 0 6
 510: PPUSH
 511: LD_INT 3
 513: PUSH
 514: LD_INT 62
 516: PUSH
 517: EMPTY
 518: LIST
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 72
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 52
// end ;
 537: GO 486
 539: POP
 540: POP
// end else
 541: GO 587
// for i in rolfSquad union Rolf do
 543: LD_ADDR_VAR 0 2
 547: PUSH
 548: LD_EXP 24
 552: PUSH
 553: LD_EXP 25
 557: UNION
 558: PUSH
 559: FOR_IN
 560: IFFALSE 585
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 562: LD_VAR 0 2
 566: PPUSH
 567: LD_INT 82
 569: PPUSH
 570: LD_INT 27
 572: PPUSH
 573: LD_INT 6
 575: PPUSH
 576: LD_INT 0
 578: PPUSH
 579: CALL_OW 50
 583: GO 559
 585: POP
 586: POP
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 587: LD_ADDR_EXP 5
 591: PUSH
 592: LD_STRING Heike
 594: PPUSH
 595: LD_EXP 1
 599: NOT
 600: PPUSH
 601: LD_EXP 2
 605: PPUSH
 606: CALL 3391 0 3
 610: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 611: LD_ADDR_EXP 8
 615: PUSH
 616: LD_STRING Ibrahim
 618: PPUSH
 619: LD_EXP 1
 623: NOT
 624: PPUSH
 625: LD_EXP 2
 629: PPUSH
 630: CALL 3391 0 3
 634: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 635: LD_ADDR_EXP 6
 639: PUSH
 640: LD_STRING Givi
 642: PPUSH
 643: LD_EXP 1
 647: NOT
 648: PPUSH
 649: LD_EXP 2
 653: PPUSH
 654: CALL 3391 0 3
 658: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 659: LD_ADDR_EXP 9
 663: PUSH
 664: LD_STRING Kamil
 666: PPUSH
 667: LD_EXP 1
 671: NOT
 672: PPUSH
 673: LD_EXP 2
 677: PPUSH
 678: CALL 3391 0 3
 682: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 683: LD_ADDR_EXP 10
 687: PUSH
 688: LD_STRING Kaia
 690: PPUSH
 691: LD_EXP 1
 695: NOT
 696: PPUSH
 697: LD_EXP 2
 701: PPUSH
 702: CALL 3391 0 3
 706: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 707: LD_ADDR_EXP 11
 711: PUSH
 712: LD_STRING Sophia
 714: PPUSH
 715: LD_EXP 1
 719: NOT
 720: PPUSH
 721: LD_EXP 2
 725: PPUSH
 726: CALL 3391 0 3
 730: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 731: LD_ADDR_EXP 12
 735: PUSH
 736: LD_STRING Markov
 738: PPUSH
 739: LD_EXP 1
 743: NOT
 744: PPUSH
 745: LD_EXP 2
 749: PPUSH
 750: CALL 3391 0 3
 754: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 755: LD_ADDR_EXP 15
 759: PUSH
 760: LD_STRING Aviradze
 762: PPUSH
 763: LD_EXP 1
 767: NOT
 768: PPUSH
 769: LD_EXP 2
 773: PPUSH
 774: CALL 3391 0 3
 778: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 779: LD_ADDR_EXP 14
 783: PUSH
 784: LD_STRING Kurt
 786: PPUSH
 787: LD_EXP 1
 791: NOT
 792: PPUSH
 793: LD_EXP 2
 797: PPUSH
 798: CALL 3391 0 3
 802: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 803: LD_ADDR_EXP 7
 807: PUSH
 808: LD_STRING Mike
 810: PPUSH
 811: LD_EXP 1
 815: NOT
 816: PPUSH
 817: LD_EXP 2
 821: PPUSH
 822: CALL 3391 0 3
 826: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 827: LD_ADDR_EXP 13
 831: PUSH
 832: LD_STRING Olaf
 834: PPUSH
 835: LD_EXP 1
 839: NOT
 840: PPUSH
 841: LD_EXP 2
 845: PPUSH
 846: CALL 3391 0 3
 850: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 851: LD_ADDR_EXP 22
 855: PUSH
 856: LD_STRING 09c_heikeSecondSquad
 858: PPUSH
 859: CALL_OW 31
 863: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 864: LD_ADDR_EXP 16
 868: PUSH
 869: LD_STRING Schulz
 871: PPUSH
 872: LD_EXP 1
 876: NOT
 877: PPUSH
 878: LD_EXP 2
 882: PPUSH
 883: CALL 3391 0 3
 887: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
 888: LD_ADDR_EXP 17
 892: PUSH
 893: LD_STRING Basim
 895: PPUSH
 896: LD_EXP 1
 900: NOT
 901: PPUSH
 902: LD_EXP 2
 906: PPUSH
 907: CALL 3391 0 3
 911: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
 912: LD_ADDR_EXP 18
 916: PUSH
 917: LD_STRING Lemmy
 919: PPUSH
 920: LD_EXP 1
 924: NOT
 925: PPUSH
 926: LD_EXP 2
 930: PPUSH
 931: CALL 3391 0 3
 935: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
 936: LD_ADDR_EXP 19
 940: PUSH
 941: LD_STRING Mia
 943: PPUSH
 944: LD_EXP 1
 948: NOT
 949: PPUSH
 950: LD_EXP 2
 954: PPUSH
 955: CALL 3391 0 3
 959: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
 960: LD_ADDR_EXP 20
 964: PUSH
 965: LD_STRING Nia
 967: PPUSH
 968: LD_EXP 1
 972: NOT
 973: PPUSH
 974: LD_EXP 2
 978: PPUSH
 979: CALL 3391 0 3
 983: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
 984: LD_ADDR_EXP 21
 988: PUSH
 989: LD_STRING Jenna
 991: PPUSH
 992: LD_EXP 1
 996: NOT
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL 3391 0 3
1007: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1008: LD_ADDR_EXP 23
1012: PUSH
1013: LD_STRING 09c_schulzSecondSquad
1015: PPUSH
1016: CALL_OW 31
1020: ST_TO_ADDR
// vehicles := LoadVariable ( 09_vehicles , [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , - 2 , 1 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 2 ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 90 , 0 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 90 , 0 , 3 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , 0 , 4 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 5 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 6 ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 3 , 90 , 0 , 7 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 8 ] , ] ) ;
1021: LD_ADDR_VAR 0 9
1025: PUSH
1026: LD_STRING 09_vehicles
1028: PPUSH
1029: LD_INT 14
1031: PUSH
1032: LD_INT 1
1034: PUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 27
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 90
1046: PUSH
1047: LD_INT 2
1049: NEG
1050: PUSH
1051: LD_INT 1
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 14
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: LD_INT 1
1072: PUSH
1073: LD_INT 30
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 90
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 14
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: LD_INT 2
1106: PUSH
1107: LD_INT 27
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 90
1115: PUSH
1116: LD_INT 0
1118: PUSH
1119: LD_INT 0
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: LD_INT 14
1134: PUSH
1135: LD_INT 1
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: LD_INT 31
1143: PUSH
1144: LD_INT 2
1146: PUSH
1147: LD_INT 90
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: LD_INT 3
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_INT 14
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 27
1177: PUSH
1178: LD_INT 2
1180: PUSH
1181: LD_INT 90
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 4
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: PUSH
1200: LD_INT 13
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 1
1208: PUSH
1209: LD_INT 28
1211: PUSH
1212: LD_INT 2
1214: PUSH
1215: LD_INT 90
1217: PUSH
1218: LD_INT 0
1220: PUSH
1221: LD_INT 5
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 13
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 1
1242: PUSH
1243: LD_INT 28
1245: PUSH
1246: LD_INT 2
1248: PUSH
1249: LD_INT 90
1251: PUSH
1252: LD_INT 0
1254: PUSH
1255: LD_INT 6
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 22
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 1
1276: PUSH
1277: LD_INT 45
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: LD_INT 90
1285: PUSH
1286: LD_INT 0
1288: PUSH
1289: LD_INT 7
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 13
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 30
1313: PUSH
1314: LD_INT 2
1316: PUSH
1317: LD_INT 90
1319: PUSH
1320: LD_INT 0
1322: PUSH
1323: LD_INT 8
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PPUSH
1347: CALL_OW 30
1351: ST_TO_ADDR
// SpawnInto ( Heike , LoadVariable ( 09_Heike_ID , - 1 ) , vehicles ) ;
1352: LD_EXP 5
1356: PPUSH
1357: LD_STRING 09_Heike_ID
1359: PPUSH
1360: LD_INT 1
1362: NEG
1363: PPUSH
1364: CALL_OW 30
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL 2154 0 3
// SpawnInto ( Givi , LoadVariable ( 09_Givi_ID , - 1 ) , vehicles ) ;
1378: LD_EXP 6
1382: PPUSH
1383: LD_STRING 09_Givi_ID
1385: PPUSH
1386: LD_INT 1
1388: NEG
1389: PPUSH
1390: CALL_OW 30
1394: PPUSH
1395: LD_VAR 0 9
1399: PPUSH
1400: CALL 2154 0 3
// SpawnInto ( Mike , LoadVariable ( 09_Mike_ID , - 1 ) , vehicles ) ;
1404: LD_EXP 7
1408: PPUSH
1409: LD_STRING 09_Mike_ID
1411: PPUSH
1412: LD_INT 1
1414: NEG
1415: PPUSH
1416: CALL_OW 30
1420: PPUSH
1421: LD_VAR 0 9
1425: PPUSH
1426: CALL 2154 0 3
// SpawnInto ( Ibrahim , LoadVariable ( 09_Ibrahim_ID , - 1 ) , vehicles ) ;
1430: LD_EXP 8
1434: PPUSH
1435: LD_STRING 09_Ibrahim_ID
1437: PPUSH
1438: LD_INT 1
1440: NEG
1441: PPUSH
1442: CALL_OW 30
1446: PPUSH
1447: LD_VAR 0 9
1451: PPUSH
1452: CALL 2154 0 3
// SpawnInto ( Kamil , LoadVariable ( 09_Kamil_ID , - 1 ) , vehicles ) ;
1456: LD_EXP 9
1460: PPUSH
1461: LD_STRING 09_Kamil_ID
1463: PPUSH
1464: LD_INT 1
1466: NEG
1467: PPUSH
1468: CALL_OW 30
1472: PPUSH
1473: LD_VAR 0 9
1477: PPUSH
1478: CALL 2154 0 3
// SpawnInto ( Kaia , LoadVariable ( 09_Kaia_ID , - 1 ) , vehicles ) ;
1482: LD_EXP 10
1486: PPUSH
1487: LD_STRING 09_Kaia_ID
1489: PPUSH
1490: LD_INT 1
1492: NEG
1493: PPUSH
1494: CALL_OW 30
1498: PPUSH
1499: LD_VAR 0 9
1503: PPUSH
1504: CALL 2154 0 3
// SpawnInto ( Sophia , LoadVariable ( 09_Sophia_ID , - 1 ) , vehicles ) ;
1508: LD_EXP 11
1512: PPUSH
1513: LD_STRING 09_Sophia_ID
1515: PPUSH
1516: LD_INT 1
1518: NEG
1519: PPUSH
1520: CALL_OW 30
1524: PPUSH
1525: LD_VAR 0 9
1529: PPUSH
1530: CALL 2154 0 3
// SpawnInto ( Markov , LoadVariable ( 09_Markov_ID , - 1 ) , vehicles ) ;
1534: LD_EXP 12
1538: PPUSH
1539: LD_STRING 09_Markov_ID
1541: PPUSH
1542: LD_INT 1
1544: NEG
1545: PPUSH
1546: CALL_OW 30
1550: PPUSH
1551: LD_VAR 0 9
1555: PPUSH
1556: CALL 2154 0 3
// SpawnInto ( Olaf , LoadVariable ( 09_Olaf_ID , - 1 ) , vehicles ) ;
1560: LD_EXP 13
1564: PPUSH
1565: LD_STRING 09_Olaf_ID
1567: PPUSH
1568: LD_INT 1
1570: NEG
1571: PPUSH
1572: CALL_OW 30
1576: PPUSH
1577: LD_VAR 0 9
1581: PPUSH
1582: CALL 2154 0 3
// SpawnInto ( Kurt , LoadVariable ( 09_Kurt_ID , - 1 ) , vehicles ) ;
1586: LD_EXP 14
1590: PPUSH
1591: LD_STRING 09_Kurt_ID
1593: PPUSH
1594: LD_INT 1
1596: NEG
1597: PPUSH
1598: CALL_OW 30
1602: PPUSH
1603: LD_VAR 0 9
1607: PPUSH
1608: CALL 2154 0 3
// SpawnInto ( Aviradze , LoadVariable ( 09_Aviradze_ID , - 1 ) , vehicles ) ;
1612: LD_EXP 15
1616: PPUSH
1617: LD_STRING 09_Aviradze_ID
1619: PPUSH
1620: LD_INT 1
1622: NEG
1623: PPUSH
1624: CALL_OW 30
1628: PPUSH
1629: LD_VAR 0 9
1633: PPUSH
1634: CALL 2154 0 3
// SpawnInto ( Schulz , LoadVariable ( 09_Schulz_ID , 1 ) , vehicles ) ;
1638: LD_EXP 16
1642: PPUSH
1643: LD_STRING 09_Schulz_ID
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 30
1653: PPUSH
1654: LD_VAR 0 9
1658: PPUSH
1659: CALL 2154 0 3
// SpawnInto ( Lemmy , LoadVariable ( 09_Lemmy_ID , 2 ) , vehicles ) ;
1663: LD_EXP 18
1667: PPUSH
1668: LD_STRING 09_Lemmy_ID
1670: PPUSH
1671: LD_INT 2
1673: PPUSH
1674: CALL_OW 30
1678: PPUSH
1679: LD_VAR 0 9
1683: PPUSH
1684: CALL 2154 0 3
// SpawnInto ( Mia , LoadVariable ( 09_Mia_ID , 3 ) , vehicles ) ;
1688: LD_EXP 19
1692: PPUSH
1693: LD_STRING 09_Mia_ID
1695: PPUSH
1696: LD_INT 3
1698: PPUSH
1699: CALL_OW 30
1703: PPUSH
1704: LD_VAR 0 9
1708: PPUSH
1709: CALL 2154 0 3
// SpawnInto ( Nia , LoadVariable ( 09_Nia_ID , 4 ) , vehicles ) ;
1713: LD_EXP 20
1717: PPUSH
1718: LD_STRING 09_Nia_ID
1720: PPUSH
1721: LD_INT 4
1723: PPUSH
1724: CALL_OW 30
1728: PPUSH
1729: LD_VAR 0 9
1733: PPUSH
1734: CALL 2154 0 3
// SpawnInto ( Jenna , LoadVariable ( 09_Jenna_ID , 5 ) , vehicles ) ;
1738: LD_EXP 21
1742: PPUSH
1743: LD_STRING 09_Jenna_ID
1745: PPUSH
1746: LD_INT 5
1748: PPUSH
1749: CALL_OW 30
1753: PPUSH
1754: LD_VAR 0 9
1758: PPUSH
1759: CALL 2154 0 3
// SpawnInto ( Basim , LoadVariable ( 09_Basim_ID , 0 ) , vehicles ) ;
1763: LD_EXP 17
1767: PPUSH
1768: LD_STRING 09_Basim_ID
1770: PPUSH
1771: LD_INT 0
1773: PPUSH
1774: CALL_OW 30
1778: PPUSH
1779: LD_VAR 0 9
1783: PPUSH
1784: CALL 2154 0 3
// for i := 1 to schulzSecondSquad do
1788: LD_ADDR_VAR 0 2
1792: PUSH
1793: DOUBLE
1794: LD_INT 1
1796: DEC
1797: ST_TO_ADDR
1798: LD_EXP 23
1802: PUSH
1803: FOR_TO
1804: IFFALSE 1851
// SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 5 + i ) , vehicles ) ;
1806: LD_EXP 23
1810: PUSH
1811: LD_VAR 0 2
1815: ARRAY
1816: PPUSH
1817: LD_STRING 09c_random_ID_
1819: PUSH
1820: LD_VAR 0 2
1824: STR
1825: PPUSH
1826: LD_INT 5
1828: PUSH
1829: LD_VAR 0 2
1833: PLUS
1834: PPUSH
1835: CALL_OW 30
1839: PPUSH
1840: LD_VAR 0 9
1844: PPUSH
1845: CALL 2154 0 3
1849: GO 1803
1851: POP
1852: POP
// for i := 1 to heikeSecondSquad do
1853: LD_ADDR_VAR 0 2
1857: PUSH
1858: DOUBLE
1859: LD_INT 1
1861: DEC
1862: ST_TO_ADDR
1863: LD_EXP 22
1867: PUSH
1868: FOR_TO
1869: IFFALSE 1916
// SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 5 + i ) , vehicles ) ;
1871: LD_EXP 22
1875: PUSH
1876: LD_VAR 0 2
1880: ARRAY
1881: PPUSH
1882: LD_STRING 09c_random_ID_
1884: PUSH
1885: LD_VAR 0 2
1889: STR
1890: PPUSH
1891: LD_INT 5
1893: PUSH
1894: LD_VAR 0 2
1898: PLUS
1899: PPUSH
1900: CALL_OW 30
1904: PPUSH
1905: LD_VAR 0 9
1909: PPUSH
1910: CALL 2154 0 3
1914: GO 1868
1916: POP
1917: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
1918: LD_INT 22
1920: PUSH
1921: LD_INT 2
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 34
1930: PUSH
1931: LD_INT 31
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PPUSH
1942: CALL_OW 69
1946: IFFALSE 2149
// begin for j := Count ( vehicles ) downto 1 do
1948: LD_ADDR_VAR 0 7
1952: PUSH
1953: DOUBLE
1954: LD_VAR 0 9
1958: PPUSH
1959: CALL 5493 0 1
1963: INC
1964: ST_TO_ADDR
1965: LD_INT 1
1967: PUSH
1968: FOR_DOWNTO
1969: IFFALSE 2147
// begin i := vehicles [ j ] ;
1971: LD_ADDR_VAR 0 2
1975: PUSH
1976: LD_VAR 0 9
1980: PUSH
1981: LD_VAR 0 7
1985: ARRAY
1986: ST_TO_ADDR
// if i [ 3 ] = control_remote then
1987: LD_VAR 0 2
1991: PUSH
1992: LD_INT 3
1994: ARRAY
1995: PUSH
1996: LD_INT 2
1998: EQUAL
1999: IFFALSE 2145
// begin uc_side := 2 ;
2001: LD_ADDR_OWVAR 20
2005: PUSH
2006: LD_INT 2
2008: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2009: LD_ADDR_OWVAR 21
2013: PUSH
2014: LD_VAR 0 2
2018: PUSH
2019: LD_INT 5
2021: ARRAY
2022: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2023: LD_VAR 0 2
2027: PUSH
2028: LD_INT 1
2030: ARRAY
2031: PPUSH
2032: LD_VAR 0 2
2036: PUSH
2037: LD_INT 2
2039: ARRAY
2040: PPUSH
2041: LD_VAR 0 2
2045: PUSH
2046: LD_INT 3
2048: ARRAY
2049: PPUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 4
2057: ARRAY
2058: PPUSH
2059: LD_VAR 0 2
2063: PUSH
2064: LD_INT 6
2066: ARRAY
2067: PPUSH
2068: CALL 8406 0 5
// veh := CreateVehicle ;
2072: LD_ADDR_VAR 0 8
2076: PUSH
2077: CALL_OW 45
2081: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2082: LD_VAR 0 8
2086: PPUSH
2087: LD_INT 5
2089: PPUSH
2090: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2094: LD_VAR 0 8
2098: PPUSH
2099: LD_INT 5
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2109: LD_ADDR_VAR 0 9
2113: PUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: LD_VAR 0 7
2123: PPUSH
2124: CALL_OW 3
2128: ST_TO_ADDR
// Connect ( veh ) ;
2129: LD_VAR 0 8
2133: PPUSH
2134: CALL 11497 0 1
// wait ( 0 0$0.3 ) ;
2138: LD_INT 10
2140: PPUSH
2141: CALL_OW 67
// end ; end ;
2145: GO 1968
2147: POP
2148: POP
// end ; end ;
2149: LD_VAR 0 1
2153: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2154: LD_INT 0
2156: PPUSH
2157: PPUSH
2158: PPUSH
// for i in vehicles do
2159: LD_ADDR_VAR 0 5
2163: PUSH
2164: LD_VAR 0 3
2168: PUSH
2169: FOR_IN
2170: IFFALSE 2396
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2172: LD_VAR 0 5
2176: PUSH
2177: LD_INT 8
2179: ARRAY
2180: PUSH
2181: LD_VAR 0 2
2185: EQUAL
2186: PUSH
2187: LD_VAR 0 5
2191: PUSH
2192: LD_INT 3
2194: ARRAY
2195: PUSH
2196: LD_INT 1
2198: EQUAL
2199: AND
2200: IFFALSE 2394
// begin uc_side := 2 ;
2202: LD_ADDR_OWVAR 20
2206: PUSH
2207: LD_INT 2
2209: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2210: LD_ADDR_OWVAR 21
2214: PUSH
2215: LD_VAR 0 5
2219: PUSH
2220: LD_INT 5
2222: ARRAY
2223: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2224: LD_VAR 0 5
2228: PUSH
2229: LD_INT 1
2231: ARRAY
2232: PPUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_INT 2
2240: ARRAY
2241: PPUSH
2242: LD_VAR 0 5
2246: PUSH
2247: LD_INT 3
2249: ARRAY
2250: PPUSH
2251: LD_VAR 0 5
2255: PUSH
2256: LD_INT 4
2258: ARRAY
2259: PPUSH
2260: LD_VAR 0 5
2264: PUSH
2265: LD_INT 6
2267: ARRAY
2268: PPUSH
2269: CALL 8406 0 5
// veh := CreateVehicle ;
2273: LD_ADDR_VAR 0 6
2277: PUSH
2278: CALL_OW 45
2282: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2283: LD_VAR 0 6
2287: PPUSH
2288: LD_INT 5
2290: PPUSH
2291: CALL_OW 233
// if i [ 7 ] < 0 then
2295: LD_VAR 0 5
2299: PUSH
2300: LD_INT 7
2302: ARRAY
2303: PUSH
2304: LD_INT 0
2306: LESS
2307: IFFALSE 2327
// SetMark ( veh , i [ 7 ] ) ;
2309: LD_VAR 0 6
2313: PPUSH
2314: LD_VAR 0 5
2318: PUSH
2319: LD_INT 7
2321: ARRAY
2322: PPUSH
2323: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2327: LD_VAR 0 6
2331: PPUSH
2332: LD_INT 5
2334: PPUSH
2335: LD_INT 0
2337: PPUSH
2338: CALL 39776 0 3
2342: NOT
2343: IFFALSE 2376
// begin SetDir ( unit , 5 ) ;
2345: LD_VAR 0 1
2349: PPUSH
2350: LD_INT 5
2352: PPUSH
2353: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2357: LD_VAR 0 1
2361: PPUSH
2362: LD_INT 6
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: CALL_OW 49
// exit ;
2372: POP
2373: POP
2374: GO 2425
// end ; PlaceHumanInUnit ( unit , veh ) ;
2376: LD_VAR 0 1
2380: PPUSH
2381: LD_VAR 0 6
2385: PPUSH
2386: CALL_OW 52
// exit ;
2390: POP
2391: POP
2392: GO 2425
// end ;
2394: GO 2169
2396: POP
2397: POP
// SetDir ( unit , 5 ) ;
2398: LD_VAR 0 1
2402: PPUSH
2403: LD_INT 5
2405: PPUSH
2406: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2410: LD_VAR 0 1
2414: PPUSH
2415: LD_INT 6
2417: PPUSH
2418: LD_INT 0
2420: PPUSH
2421: CALL_OW 49
// end ; end_of_file end_of_file
2425: LD_VAR 0 4
2429: RET
// export function LoadEnv ; var tmp , i , un ; begin
2430: LD_INT 0
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: LD_STRING 09_env
2443: PPUSH
2444: EMPTY
2445: PPUSH
2446: CALL_OW 30
2450: ST_TO_ADDR
// if not tmp then
2451: LD_VAR 0 2
2455: NOT
2456: IFFALSE 2460
// exit ;
2458: GO 2675
// for i in tmp do
2460: LD_ADDR_VAR 0 3
2464: PUSH
2465: LD_VAR 0 2
2469: PUSH
2470: FOR_IN
2471: IFFALSE 2515
// PlaceEnvironment ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2473: LD_VAR 0 3
2477: PUSH
2478: LD_INT 1
2480: ARRAY
2481: PPUSH
2482: LD_VAR 0 3
2486: PUSH
2487: LD_INT 2
2489: ARRAY
2490: PPUSH
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 3
2498: ARRAY
2499: PPUSH
2500: LD_VAR 0 3
2504: PUSH
2505: LD_INT 4
2507: ARRAY
2508: PPUSH
2509: CALL_OW 349
2513: GO 2470
2515: POP
2516: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
2517: LD_ADDR_VAR 0 2
2521: PUSH
2522: LD_STRING 09_animals
2524: PPUSH
2525: EMPTY
2526: PPUSH
2527: CALL_OW 30
2531: ST_TO_ADDR
// if not tmp then
2532: LD_VAR 0 2
2536: NOT
2537: IFFALSE 2541
// exit ;
2539: GO 2675
// InitHc_All ( ) ;
2541: CALL_OW 584
// for i in tmp do
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: LD_VAR 0 2
2554: PUSH
2555: FOR_IN
2556: IFFALSE 2673
// begin uc_side := 0 ;
2558: LD_ADDR_OWVAR 20
2562: PUSH
2563: LD_INT 0
2565: ST_TO_ADDR
// uc_nation := nation_nature ;
2566: LD_ADDR_OWVAR 21
2570: PUSH
2571: LD_INT 0
2573: ST_TO_ADDR
// hc_gallery :=  ;
2574: LD_ADDR_OWVAR 33
2578: PUSH
2579: LD_STRING 
2581: ST_TO_ADDR
// hc_name :=  ;
2582: LD_ADDR_OWVAR 26
2586: PUSH
2587: LD_STRING 
2589: ST_TO_ADDR
// hc_class := i [ 1 ] ;
2590: LD_ADDR_OWVAR 28
2594: PUSH
2595: LD_VAR 0 3
2599: PUSH
2600: LD_INT 1
2602: ARRAY
2603: ST_TO_ADDR
// un := CreateHuman ;
2604: LD_ADDR_VAR 0 4
2608: PUSH
2609: CALL_OW 44
2613: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
2614: LD_VAR 0 4
2618: PPUSH
2619: LD_VAR 0 3
2623: PUSH
2624: LD_INT 2
2626: ARRAY
2627: PPUSH
2628: LD_VAR 0 3
2632: PUSH
2633: LD_INT 3
2635: ARRAY
2636: PPUSH
2637: LD_VAR 0 3
2641: PUSH
2642: LD_INT 4
2644: ARRAY
2645: PPUSH
2646: LD_INT 0
2648: PPUSH
2649: CALL 42999 0 5
// SetLives ( un , i [ 5 ] ) ;
2653: LD_VAR 0 4
2657: PPUSH
2658: LD_VAR 0 3
2662: PUSH
2663: LD_INT 5
2665: ARRAY
2666: PPUSH
2667: CALL_OW 234
// end ;
2671: GO 2555
2673: POP
2674: POP
// end ;
2675: LD_VAR 0 1
2679: RET
// export function CreateDeposits ; var i , oil , sib ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
2685: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
2686: LD_ADDR_VAR 0 3
2690: PUSH
2691: LD_INT 91
2693: PUSH
2694: LD_INT 13
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: LD_INT 52
2703: PUSH
2704: LD_INT 23
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PUSH
2711: LD_INT 115
2713: PUSH
2714: LD_INT 150
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
2726: LD_ADDR_VAR 0 4
2730: PUSH
2731: LD_INT 82
2733: PUSH
2734: LD_INT 42
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: PUSH
2741: LD_INT 128
2743: PUSH
2744: LD_INT 132
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: ST_TO_ADDR
// for i in oil do
2755: LD_ADDR_VAR 0 2
2759: PUSH
2760: LD_VAR 0 3
2764: PUSH
2765: FOR_IN
2766: IFFALSE 2795
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
2768: LD_VAR 0 2
2772: PUSH
2773: LD_INT 1
2775: ARRAY
2776: PPUSH
2777: LD_VAR 0 2
2781: PUSH
2782: LD_INT 2
2784: ARRAY
2785: PPUSH
2786: LD_INT 2
2788: PPUSH
2789: CALL_OW 62
2793: GO 2765
2795: POP
2796: POP
// for i in sib do
2797: LD_ADDR_VAR 0 2
2801: PUSH
2802: LD_VAR 0 4
2806: PUSH
2807: FOR_IN
2808: IFFALSE 2837
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
2810: LD_VAR 0 2
2814: PUSH
2815: LD_INT 1
2817: ARRAY
2818: PPUSH
2819: LD_VAR 0 2
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: LD_INT 3
2830: PPUSH
2831: CALL_OW 62
2835: GO 2807
2837: POP
2838: POP
// end ;
2839: LD_VAR 0 1
2843: RET
// export function LoadCam ; var i , tmp ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
2848: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
2849: LD_ADDR_VAR 0 3
2853: PUSH
2854: LD_STRING 09_cameras
2856: PPUSH
2857: EMPTY
2858: PPUSH
2859: CALL_OW 30
2863: ST_TO_ADDR
// if not tmp then
2864: LD_VAR 0 3
2868: NOT
2869: IFFALSE 2873
// exit ;
2871: GO 2915
// for i in tmp do
2873: LD_ADDR_VAR 0 2
2877: PUSH
2878: LD_VAR 0 3
2882: PUSH
2883: FOR_IN
2884: IFFALSE 2913
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
2886: LD_VAR 0 2
2890: PUSH
2891: LD_INT 1
2893: ARRAY
2894: PPUSH
2895: LD_VAR 0 2
2899: PUSH
2900: LD_INT 2
2902: ARRAY
2903: PPUSH
2904: LD_INT 2
2906: PPUSH
2907: CALL_OW 244
2911: GO 2883
2913: POP
2914: POP
// end ;
2915: LD_VAR 0 1
2919: RET
// export function LoadTech ; var i , tmp ; begin
2920: LD_INT 0
2922: PPUSH
2923: PPUSH
2924: PPUSH
// tmp := LoadVariable ( 09_tech , [ ] ) ;
2925: LD_ADDR_VAR 0 3
2929: PUSH
2930: LD_STRING 09_tech
2932: PPUSH
2933: EMPTY
2934: PPUSH
2935: CALL_OW 30
2939: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
2940: LD_ADDR_VAR 0 2
2944: PUSH
2945: DOUBLE
2946: LD_INT 1
2948: DEC
2949: ST_TO_ADDR
2950: LD_VAR 0 3
2954: PPUSH
2955: CALL 5493 0 1
2959: PUSH
2960: FOR_TO
2961: IFFALSE 2988
// SetTech ( i , 2 , tmp [ i ] ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 2
2970: PPUSH
2971: LD_VAR 0 3
2975: PUSH
2976: LD_VAR 0 2
2980: ARRAY
2981: PPUSH
2982: CALL_OW 322
2986: GO 2960
2988: POP
2989: POP
// end ;
2990: LD_VAR 0 1
2994: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
2995: LD_INT 0
2997: PPUSH
2998: PPUSH
2999: PPUSH
3000: PPUSH
3001: PPUSH
3002: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
3003: LD_ADDR_VAR 0 3
3007: PUSH
3008: LD_STRING 09_buildings
3010: PPUSH
3011: EMPTY
3012: PPUSH
3013: CALL_OW 30
3017: ST_TO_ADDR
// for i in tmp do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: LD_VAR 0 3
3027: PUSH
3028: FOR_IN
3029: IFFALSE 3293
// begin uc_side := 2 ;
3031: LD_ADDR_OWVAR 20
3035: PUSH
3036: LD_INT 2
3038: ST_TO_ADDR
// uc_nation := nation_arabian ;
3039: LD_ADDR_OWVAR 21
3043: PUSH
3044: LD_INT 2
3046: ST_TO_ADDR
// bc_type := i [ 1 ] ;
3047: LD_ADDR_OWVAR 42
3051: PUSH
3052: LD_VAR 0 2
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3061: LD_ADDR_OWVAR 43
3065: PUSH
3066: LD_VAR 0 2
3070: PUSH
3071: LD_INT 5
3073: ARRAY
3074: ST_TO_ADDR
// bc_kind1 := i [ 6 ] ;
3075: LD_ADDR_OWVAR 44
3079: PUSH
3080: LD_VAR 0 2
3084: PUSH
3085: LD_INT 6
3087: ARRAY
3088: ST_TO_ADDR
// bc_kind2 := i [ 7 ] ;
3089: LD_ADDR_OWVAR 45
3093: PUSH
3094: LD_VAR 0 2
3098: PUSH
3099: LD_INT 7
3101: ARRAY
3102: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3103: LD_ADDR_VAR 0 4
3107: PUSH
3108: LD_VAR 0 2
3112: PUSH
3113: LD_INT 2
3115: ARRAY
3116: PPUSH
3117: LD_VAR 0 2
3121: PUSH
3122: LD_INT 3
3124: ARRAY
3125: PPUSH
3126: LD_VAR 0 2
3130: PUSH
3131: LD_INT 4
3133: ARRAY
3134: PPUSH
3135: CALL_OW 47
3139: ST_TO_ADDR
// SetLives ( b , i [ 5 ] ) ;
3140: LD_VAR 0 4
3144: PPUSH
3145: LD_VAR 0 2
3149: PUSH
3150: LD_INT 5
3152: ARRAY
3153: PPUSH
3154: CALL_OW 234
// if i [ 8 ] then
3158: LD_VAR 0 2
3162: PUSH
3163: LD_INT 8
3165: ARRAY
3166: IFFALSE 3186
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
3168: LD_VAR 0 4
3172: PPUSH
3173: LD_VAR 0 2
3177: PUSH
3178: LD_INT 8
3180: ARRAY
3181: PPUSH
3182: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
3186: LD_VAR 0 2
3190: PUSH
3191: LD_INT 1
3193: ARRAY
3194: PUSH
3195: LD_INT 0
3197: PUSH
3198: LD_INT 1
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: IN
3205: IFFALSE 3291
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
3207: LD_ADDR_VAR 0 6
3211: PUSH
3212: LD_STRING 09_materials
3214: PPUSH
3215: LD_INT 100
3217: PUSH
3218: LD_INT 50
3220: PUSH
3221: LD_INT 30
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: LIST
3228: PUSH
3229: EMPTY
3230: LIST
3231: PPUSH
3232: CALL_OW 30
3236: ST_TO_ADDR
// for j := 1 to 3 do
3237: LD_ADDR_VAR 0 5
3241: PUSH
3242: DOUBLE
3243: LD_INT 1
3245: DEC
3246: ST_TO_ADDR
3247: LD_INT 3
3249: PUSH
3250: FOR_TO
3251: IFFALSE 3289
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] ) ;
3253: LD_VAR 0 4
3257: PPUSH
3258: CALL_OW 274
3262: PPUSH
3263: LD_VAR 0 5
3267: PPUSH
3268: LD_VAR 0 6
3272: PUSH
3273: LD_INT 1
3275: ARRAY
3276: PUSH
3277: LD_VAR 0 5
3281: ARRAY
3282: PPUSH
3283: CALL_OW 277
3287: GO 3250
3289: POP
3290: POP
// end ; end ;
3291: GO 3028
3293: POP
3294: POP
// end ; end_of_file
3295: LD_VAR 0 1
3299: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
3300: LD_VAR 0 1
3304: PPUSH
3305: LD_VAR 0 2
3309: PPUSH
3310: CALL 60948 0 2
// end ; end_of_file
3314: PPOPN 2
3316: END
// export function Action ; begin
3317: LD_INT 0
3319: PPUSH
// InGameOn ;
3320: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
3324: LD_INT 1
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: LD_INT 2
3332: PPUSH
3333: LD_INT 32963
3335: NEG
3336: PPUSH
3337: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
3341: LD_INT 1
3343: PPUSH
3344: LD_INT 1
3346: PPUSH
3347: LD_INT 2
3349: PPUSH
3350: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
3354: LD_INT 173
3356: PPUSH
3357: LD_INT 149
3359: PPUSH
3360: CALL_OW 86
// wait ( 0 0$2 ) ;
3364: LD_INT 70
3366: PPUSH
3367: CALL_OW 67
// InGameOff ;
3371: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
3375: LD_STRING M6
3377: PPUSH
3378: CALL_OW 337
// SaveForQuickRestart ;
3382: CALL_OW 22
// end ; end_of_file
3386: LD_VAR 0 1
3390: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3391: LD_INT 0
3393: PPUSH
3394: PPUSH
// if exist_mode then
3395: LD_VAR 0 2
3399: IFFALSE 3424
// unit := CreateCharacter ( prefix & ident ) else
3401: LD_ADDR_VAR 0 5
3405: PUSH
3406: LD_VAR 0 3
3410: PUSH
3411: LD_VAR 0 1
3415: STR
3416: PPUSH
3417: CALL_OW 34
3421: ST_TO_ADDR
3422: GO 3439
// unit := NewCharacter ( ident ) ;
3424: LD_ADDR_VAR 0 5
3428: PUSH
3429: LD_VAR 0 1
3433: PPUSH
3434: CALL_OW 25
3438: ST_TO_ADDR
// result := unit ;
3439: LD_ADDR_VAR 0 4
3443: PUSH
3444: LD_VAR 0 5
3448: ST_TO_ADDR
// end ;
3449: LD_VAR 0 4
3453: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
// if not side or not nation then
3458: LD_VAR 0 1
3462: NOT
3463: PUSH
3464: LD_VAR 0 2
3468: NOT
3469: OR
3470: IFFALSE 3474
// exit ;
3472: GO 4242
// case nation of nation_american :
3474: LD_VAR 0 2
3478: PUSH
3479: LD_INT 1
3481: DOUBLE
3482: EQUAL
3483: IFTRUE 3487
3485: GO 3701
3487: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3488: LD_ADDR_VAR 0 4
3492: PUSH
3493: LD_INT 35
3495: PUSH
3496: LD_INT 45
3498: PUSH
3499: LD_INT 46
3501: PUSH
3502: LD_INT 47
3504: PUSH
3505: LD_INT 82
3507: PUSH
3508: LD_INT 83
3510: PUSH
3511: LD_INT 84
3513: PUSH
3514: LD_INT 85
3516: PUSH
3517: LD_INT 86
3519: PUSH
3520: LD_INT 1
3522: PUSH
3523: LD_INT 2
3525: PUSH
3526: LD_INT 6
3528: PUSH
3529: LD_INT 15
3531: PUSH
3532: LD_INT 16
3534: PUSH
3535: LD_INT 7
3537: PUSH
3538: LD_INT 12
3540: PUSH
3541: LD_INT 13
3543: PUSH
3544: LD_INT 10
3546: PUSH
3547: LD_INT 14
3549: PUSH
3550: LD_INT 20
3552: PUSH
3553: LD_INT 21
3555: PUSH
3556: LD_INT 22
3558: PUSH
3559: LD_INT 25
3561: PUSH
3562: LD_INT 32
3564: PUSH
3565: LD_INT 27
3567: PUSH
3568: LD_INT 36
3570: PUSH
3571: LD_INT 69
3573: PUSH
3574: LD_INT 39
3576: PUSH
3577: LD_INT 34
3579: PUSH
3580: LD_INT 40
3582: PUSH
3583: LD_INT 48
3585: PUSH
3586: LD_INT 49
3588: PUSH
3589: LD_INT 50
3591: PUSH
3592: LD_INT 51
3594: PUSH
3595: LD_INT 52
3597: PUSH
3598: LD_INT 53
3600: PUSH
3601: LD_INT 54
3603: PUSH
3604: LD_INT 55
3606: PUSH
3607: LD_INT 56
3609: PUSH
3610: LD_INT 57
3612: PUSH
3613: LD_INT 58
3615: PUSH
3616: LD_INT 59
3618: PUSH
3619: LD_INT 60
3621: PUSH
3622: LD_INT 61
3624: PUSH
3625: LD_INT 62
3627: PUSH
3628: LD_INT 80
3630: PUSH
3631: LD_INT 82
3633: PUSH
3634: LD_INT 83
3636: PUSH
3637: LD_INT 84
3639: PUSH
3640: LD_INT 85
3642: PUSH
3643: LD_INT 86
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: ST_TO_ADDR
3699: GO 4166
3701: LD_INT 2
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3935
3709: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3710: LD_ADDR_VAR 0 4
3714: PUSH
3715: LD_INT 35
3717: PUSH
3718: LD_INT 45
3720: PUSH
3721: LD_INT 46
3723: PUSH
3724: LD_INT 47
3726: PUSH
3727: LD_INT 82
3729: PUSH
3730: LD_INT 83
3732: PUSH
3733: LD_INT 84
3735: PUSH
3736: LD_INT 85
3738: PUSH
3739: LD_INT 87
3741: PUSH
3742: LD_INT 70
3744: PUSH
3745: LD_INT 1
3747: PUSH
3748: LD_INT 11
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 4
3756: PUSH
3757: LD_INT 5
3759: PUSH
3760: LD_INT 6
3762: PUSH
3763: LD_INT 15
3765: PUSH
3766: LD_INT 18
3768: PUSH
3769: LD_INT 7
3771: PUSH
3772: LD_INT 17
3774: PUSH
3775: LD_INT 8
3777: PUSH
3778: LD_INT 20
3780: PUSH
3781: LD_INT 21
3783: PUSH
3784: LD_INT 22
3786: PUSH
3787: LD_INT 72
3789: PUSH
3790: LD_INT 26
3792: PUSH
3793: LD_INT 69
3795: PUSH
3796: LD_INT 39
3798: PUSH
3799: LD_INT 40
3801: PUSH
3802: LD_INT 41
3804: PUSH
3805: LD_INT 42
3807: PUSH
3808: LD_INT 43
3810: PUSH
3811: LD_INT 48
3813: PUSH
3814: LD_INT 49
3816: PUSH
3817: LD_INT 50
3819: PUSH
3820: LD_INT 51
3822: PUSH
3823: LD_INT 52
3825: PUSH
3826: LD_INT 53
3828: PUSH
3829: LD_INT 54
3831: PUSH
3832: LD_INT 55
3834: PUSH
3835: LD_INT 56
3837: PUSH
3838: LD_INT 60
3840: PUSH
3841: LD_INT 61
3843: PUSH
3844: LD_INT 62
3846: PUSH
3847: LD_INT 66
3849: PUSH
3850: LD_INT 67
3852: PUSH
3853: LD_INT 68
3855: PUSH
3856: LD_INT 81
3858: PUSH
3859: LD_INT 82
3861: PUSH
3862: LD_INT 83
3864: PUSH
3865: LD_INT 84
3867: PUSH
3868: LD_INT 85
3870: PUSH
3871: LD_INT 87
3873: PUSH
3874: LD_INT 88
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: ST_TO_ADDR
3933: GO 4166
3935: LD_INT 3
3937: DOUBLE
3938: EQUAL
3939: IFTRUE 3943
3941: GO 4165
3943: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3944: LD_ADDR_VAR 0 4
3948: PUSH
3949: LD_INT 46
3951: PUSH
3952: LD_INT 47
3954: PUSH
3955: LD_INT 1
3957: PUSH
3958: LD_INT 2
3960: PUSH
3961: LD_INT 82
3963: PUSH
3964: LD_INT 83
3966: PUSH
3967: LD_INT 84
3969: PUSH
3970: LD_INT 85
3972: PUSH
3973: LD_INT 86
3975: PUSH
3976: LD_INT 11
3978: PUSH
3979: LD_INT 9
3981: PUSH
3982: LD_INT 20
3984: PUSH
3985: LD_INT 19
3987: PUSH
3988: LD_INT 21
3990: PUSH
3991: LD_INT 24
3993: PUSH
3994: LD_INT 22
3996: PUSH
3997: LD_INT 25
3999: PUSH
4000: LD_INT 28
4002: PUSH
4003: LD_INT 29
4005: PUSH
4006: LD_INT 30
4008: PUSH
4009: LD_INT 31
4011: PUSH
4012: LD_INT 37
4014: PUSH
4015: LD_INT 38
4017: PUSH
4018: LD_INT 32
4020: PUSH
4021: LD_INT 27
4023: PUSH
4024: LD_INT 33
4026: PUSH
4027: LD_INT 69
4029: PUSH
4030: LD_INT 39
4032: PUSH
4033: LD_INT 34
4035: PUSH
4036: LD_INT 40
4038: PUSH
4039: LD_INT 71
4041: PUSH
4042: LD_INT 23
4044: PUSH
4045: LD_INT 44
4047: PUSH
4048: LD_INT 48
4050: PUSH
4051: LD_INT 49
4053: PUSH
4054: LD_INT 50
4056: PUSH
4057: LD_INT 51
4059: PUSH
4060: LD_INT 52
4062: PUSH
4063: LD_INT 53
4065: PUSH
4066: LD_INT 54
4068: PUSH
4069: LD_INT 55
4071: PUSH
4072: LD_INT 56
4074: PUSH
4075: LD_INT 57
4077: PUSH
4078: LD_INT 58
4080: PUSH
4081: LD_INT 59
4083: PUSH
4084: LD_INT 63
4086: PUSH
4087: LD_INT 64
4089: PUSH
4090: LD_INT 65
4092: PUSH
4093: LD_INT 82
4095: PUSH
4096: LD_INT 83
4098: PUSH
4099: LD_INT 84
4101: PUSH
4102: LD_INT 85
4104: PUSH
4105: LD_INT 86
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
4163: GO 4166
4165: POP
// if state > - 1 and state < 3 then
4166: LD_VAR 0 3
4170: PUSH
4171: LD_INT 1
4173: NEG
4174: GREATER
4175: PUSH
4176: LD_VAR 0 3
4180: PUSH
4181: LD_INT 3
4183: LESS
4184: AND
4185: IFFALSE 4242
// for i in result do
4187: LD_ADDR_VAR 0 5
4191: PUSH
4192: LD_VAR 0 4
4196: PUSH
4197: FOR_IN
4198: IFFALSE 4240
// if GetTech ( i , side ) <> state then
4200: LD_VAR 0 5
4204: PPUSH
4205: LD_VAR 0 1
4209: PPUSH
4210: CALL_OW 321
4214: PUSH
4215: LD_VAR 0 3
4219: NONEQUAL
4220: IFFALSE 4238
// result := result diff i ;
4222: LD_ADDR_VAR 0 4
4226: PUSH
4227: LD_VAR 0 4
4231: PUSH
4232: LD_VAR 0 5
4236: DIFF
4237: ST_TO_ADDR
4238: GO 4197
4240: POP
4241: POP
// end ;
4242: LD_VAR 0 4
4246: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4247: LD_INT 0
4249: PPUSH
4250: PPUSH
4251: PPUSH
// result := true ;
4252: LD_ADDR_VAR 0 3
4256: PUSH
4257: LD_INT 1
4259: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4260: LD_ADDR_VAR 0 5
4264: PUSH
4265: LD_VAR 0 2
4269: PPUSH
4270: CALL_OW 480
4274: ST_TO_ADDR
// if not tmp then
4275: LD_VAR 0 5
4279: NOT
4280: IFFALSE 4284
// exit ;
4282: GO 4333
// for i in tmp do
4284: LD_ADDR_VAR 0 4
4288: PUSH
4289: LD_VAR 0 5
4293: PUSH
4294: FOR_IN
4295: IFFALSE 4331
// if GetTech ( i , side ) <> state_researched then
4297: LD_VAR 0 4
4301: PPUSH
4302: LD_VAR 0 1
4306: PPUSH
4307: CALL_OW 321
4311: PUSH
4312: LD_INT 2
4314: NONEQUAL
4315: IFFALSE 4329
// begin result := false ;
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_INT 0
4324: ST_TO_ADDR
// exit ;
4325: POP
4326: POP
4327: GO 4333
// end ;
4329: GO 4294
4331: POP
4332: POP
// end ;
4333: LD_VAR 0 3
4337: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4338: LD_INT 0
4340: PPUSH
4341: PPUSH
4342: PPUSH
4343: PPUSH
4344: PPUSH
4345: PPUSH
4346: PPUSH
4347: PPUSH
4348: PPUSH
4349: PPUSH
4350: PPUSH
4351: PPUSH
4352: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4353: LD_VAR 0 1
4357: NOT
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 257
4368: PUSH
4369: LD_INT 9
4371: NONEQUAL
4372: OR
4373: IFFALSE 4377
// exit ;
4375: GO 4950
// side := GetSide ( unit ) ;
4377: LD_ADDR_VAR 0 9
4381: PUSH
4382: LD_VAR 0 1
4386: PPUSH
4387: CALL_OW 255
4391: ST_TO_ADDR
// tech_space := tech_spacanom ;
4392: LD_ADDR_VAR 0 12
4396: PUSH
4397: LD_INT 29
4399: ST_TO_ADDR
// tech_time := tech_taurad ;
4400: LD_ADDR_VAR 0 13
4404: PUSH
4405: LD_INT 28
4407: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4408: LD_ADDR_VAR 0 11
4412: PUSH
4413: LD_VAR 0 1
4417: PPUSH
4418: CALL_OW 310
4422: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4423: LD_VAR 0 11
4427: PPUSH
4428: CALL_OW 247
4432: PUSH
4433: LD_INT 2
4435: EQUAL
4436: IFFALSE 4440
// exit ;
4438: GO 4950
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4440: LD_ADDR_VAR 0 8
4444: PUSH
4445: LD_INT 81
4447: PUSH
4448: LD_VAR 0 9
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PPUSH
4478: CALL_OW 69
4482: ST_TO_ADDR
// if not tmp then
4483: LD_VAR 0 8
4487: NOT
4488: IFFALSE 4492
// exit ;
4490: GO 4950
// if in_unit then
4492: LD_VAR 0 11
4496: IFFALSE 4520
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4498: LD_ADDR_VAR 0 10
4502: PUSH
4503: LD_VAR 0 8
4507: PPUSH
4508: LD_VAR 0 11
4512: PPUSH
4513: CALL_OW 74
4517: ST_TO_ADDR
4518: GO 4540
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4520: LD_ADDR_VAR 0 10
4524: PUSH
4525: LD_VAR 0 8
4529: PPUSH
4530: LD_VAR 0 1
4534: PPUSH
4535: CALL_OW 74
4539: ST_TO_ADDR
// if not enemy then
4540: LD_VAR 0 10
4544: NOT
4545: IFFALSE 4549
// exit ;
4547: GO 4950
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4549: LD_VAR 0 11
4553: PUSH
4554: LD_VAR 0 11
4558: PPUSH
4559: LD_VAR 0 10
4563: PPUSH
4564: CALL_OW 296
4568: PUSH
4569: LD_INT 13
4571: GREATER
4572: AND
4573: PUSH
4574: LD_VAR 0 1
4578: PPUSH
4579: LD_VAR 0 10
4583: PPUSH
4584: CALL_OW 296
4588: PUSH
4589: LD_INT 12
4591: GREATER
4592: OR
4593: IFFALSE 4597
// exit ;
4595: GO 4950
// missile := [ 1 ] ;
4597: LD_ADDR_VAR 0 14
4601: PUSH
4602: LD_INT 1
4604: PUSH
4605: EMPTY
4606: LIST
4607: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4608: LD_VAR 0 9
4612: PPUSH
4613: LD_VAR 0 12
4617: PPUSH
4618: CALL_OW 325
4622: IFFALSE 4651
// missile := Replace ( missile , missile + 1 , 2 ) ;
4624: LD_ADDR_VAR 0 14
4628: PUSH
4629: LD_VAR 0 14
4633: PPUSH
4634: LD_VAR 0 14
4638: PUSH
4639: LD_INT 1
4641: PLUS
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 1
4650: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4651: LD_VAR 0 9
4655: PPUSH
4656: LD_VAR 0 13
4660: PPUSH
4661: CALL_OW 325
4665: PUSH
4666: LD_VAR 0 10
4670: PPUSH
4671: CALL_OW 255
4675: PPUSH
4676: LD_VAR 0 13
4680: PPUSH
4681: CALL_OW 325
4685: NOT
4686: AND
4687: IFFALSE 4716
// missile := Replace ( missile , missile + 1 , 3 ) ;
4689: LD_ADDR_VAR 0 14
4693: PUSH
4694: LD_VAR 0 14
4698: PPUSH
4699: LD_VAR 0 14
4703: PUSH
4704: LD_INT 1
4706: PLUS
4707: PPUSH
4708: LD_INT 3
4710: PPUSH
4711: CALL_OW 1
4715: ST_TO_ADDR
// if missile < 2 then
4716: LD_VAR 0 14
4720: PUSH
4721: LD_INT 2
4723: LESS
4724: IFFALSE 4728
// exit ;
4726: GO 4950
// x := GetX ( enemy ) ;
4728: LD_ADDR_VAR 0 4
4732: PUSH
4733: LD_VAR 0 10
4737: PPUSH
4738: CALL_OW 250
4742: ST_TO_ADDR
// y := GetY ( enemy ) ;
4743: LD_ADDR_VAR 0 5
4747: PUSH
4748: LD_VAR 0 10
4752: PPUSH
4753: CALL_OW 251
4757: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4758: LD_ADDR_VAR 0 6
4762: PUSH
4763: LD_VAR 0 4
4767: PUSH
4768: LD_INT 1
4770: NEG
4771: PPUSH
4772: LD_INT 1
4774: PPUSH
4775: CALL_OW 12
4779: PLUS
4780: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4781: LD_ADDR_VAR 0 7
4785: PUSH
4786: LD_VAR 0 5
4790: PUSH
4791: LD_INT 1
4793: NEG
4794: PPUSH
4795: LD_INT 1
4797: PPUSH
4798: CALL_OW 12
4802: PLUS
4803: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4804: LD_VAR 0 6
4808: PPUSH
4809: LD_VAR 0 7
4813: PPUSH
4814: CALL_OW 488
4818: NOT
4819: IFFALSE 4841
// begin _x := x ;
4821: LD_ADDR_VAR 0 6
4825: PUSH
4826: LD_VAR 0 4
4830: ST_TO_ADDR
// _y := y ;
4831: LD_ADDR_VAR 0 7
4835: PUSH
4836: LD_VAR 0 5
4840: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4841: LD_ADDR_VAR 0 3
4845: PUSH
4846: LD_INT 1
4848: PPUSH
4849: LD_VAR 0 14
4853: PPUSH
4854: CALL_OW 12
4858: ST_TO_ADDR
// case i of 1 :
4859: LD_VAR 0 3
4863: PUSH
4864: LD_INT 1
4866: DOUBLE
4867: EQUAL
4868: IFTRUE 4872
4870: GO 4889
4872: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4873: LD_VAR 0 1
4877: PPUSH
4878: LD_VAR 0 10
4882: PPUSH
4883: CALL_OW 115
4887: GO 4950
4889: LD_INT 2
4891: DOUBLE
4892: EQUAL
4893: IFTRUE 4897
4895: GO 4919
4897: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4898: LD_VAR 0 1
4902: PPUSH
4903: LD_VAR 0 6
4907: PPUSH
4908: LD_VAR 0 7
4912: PPUSH
4913: CALL_OW 153
4917: GO 4950
4919: LD_INT 3
4921: DOUBLE
4922: EQUAL
4923: IFTRUE 4927
4925: GO 4949
4927: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4928: LD_VAR 0 1
4932: PPUSH
4933: LD_VAR 0 6
4937: PPUSH
4938: LD_VAR 0 7
4942: PPUSH
4943: CALL_OW 154
4947: GO 4950
4949: POP
// end ;
4950: LD_VAR 0 2
4954: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4955: LD_INT 0
4957: PPUSH
4958: PPUSH
4959: PPUSH
4960: PPUSH
4961: PPUSH
4962: PPUSH
// if not unit or not building then
4963: LD_VAR 0 1
4967: NOT
4968: PUSH
4969: LD_VAR 0 2
4973: NOT
4974: OR
4975: IFFALSE 4979
// exit ;
4977: GO 5137
// x := GetX ( building ) ;
4979: LD_ADDR_VAR 0 5
4983: PUSH
4984: LD_VAR 0 2
4988: PPUSH
4989: CALL_OW 250
4993: ST_TO_ADDR
// y := GetY ( building ) ;
4994: LD_ADDR_VAR 0 6
4998: PUSH
4999: LD_VAR 0 2
5003: PPUSH
5004: CALL_OW 251
5008: ST_TO_ADDR
// for i = 0 to 5 do
5009: LD_ADDR_VAR 0 4
5013: PUSH
5014: DOUBLE
5015: LD_INT 0
5017: DEC
5018: ST_TO_ADDR
5019: LD_INT 5
5021: PUSH
5022: FOR_TO
5023: IFFALSE 5135
// begin _x := ShiftX ( x , i , 3 ) ;
5025: LD_ADDR_VAR 0 7
5029: PUSH
5030: LD_VAR 0 5
5034: PPUSH
5035: LD_VAR 0 4
5039: PPUSH
5040: LD_INT 3
5042: PPUSH
5043: CALL_OW 272
5047: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5048: LD_ADDR_VAR 0 8
5052: PUSH
5053: LD_VAR 0 6
5057: PPUSH
5058: LD_VAR 0 4
5062: PPUSH
5063: LD_INT 3
5065: PPUSH
5066: CALL_OW 273
5070: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5071: LD_VAR 0 7
5075: PPUSH
5076: LD_VAR 0 8
5080: PPUSH
5081: CALL_OW 488
5085: NOT
5086: IFFALSE 5090
// continue ;
5088: GO 5022
// if HexInfo ( _x , _y ) = 0 then
5090: LD_VAR 0 7
5094: PPUSH
5095: LD_VAR 0 8
5099: PPUSH
5100: CALL_OW 428
5104: PUSH
5105: LD_INT 0
5107: EQUAL
5108: IFFALSE 5133
// begin ComMoveXY ( unit , _x , _y ) ;
5110: LD_VAR 0 1
5114: PPUSH
5115: LD_VAR 0 7
5119: PPUSH
5120: LD_VAR 0 8
5124: PPUSH
5125: CALL_OW 111
// exit ;
5129: POP
5130: POP
5131: GO 5137
// end ; end ;
5133: GO 5022
5135: POP
5136: POP
// end ;
5137: LD_VAR 0 3
5141: RET
// export function ScanBase ( side , base_area ) ; begin
5142: LD_INT 0
5144: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5145: LD_ADDR_VAR 0 3
5149: PUSH
5150: LD_VAR 0 2
5154: PPUSH
5155: LD_INT 81
5157: PUSH
5158: LD_VAR 0 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PPUSH
5167: CALL_OW 70
5171: ST_TO_ADDR
// end ;
5172: LD_VAR 0 3
5176: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5177: LD_INT 0
5179: PPUSH
5180: PPUSH
5181: PPUSH
5182: PPUSH
// result := false ;
5183: LD_ADDR_VAR 0 2
5187: PUSH
5188: LD_INT 0
5190: ST_TO_ADDR
// side := GetSide ( unit ) ;
5191: LD_ADDR_VAR 0 3
5195: PUSH
5196: LD_VAR 0 1
5200: PPUSH
5201: CALL_OW 255
5205: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5206: LD_ADDR_VAR 0 4
5210: PUSH
5211: LD_VAR 0 1
5215: PPUSH
5216: CALL_OW 248
5220: ST_TO_ADDR
// case nat of 1 :
5221: LD_VAR 0 4
5225: PUSH
5226: LD_INT 1
5228: DOUBLE
5229: EQUAL
5230: IFTRUE 5234
5232: GO 5245
5234: POP
// tech := tech_lassight ; 2 :
5235: LD_ADDR_VAR 0 5
5239: PUSH
5240: LD_INT 12
5242: ST_TO_ADDR
5243: GO 5284
5245: LD_INT 2
5247: DOUBLE
5248: EQUAL
5249: IFTRUE 5253
5251: GO 5264
5253: POP
// tech := tech_mortar ; 3 :
5254: LD_ADDR_VAR 0 5
5258: PUSH
5259: LD_INT 41
5261: ST_TO_ADDR
5262: GO 5284
5264: LD_INT 3
5266: DOUBLE
5267: EQUAL
5268: IFTRUE 5272
5270: GO 5283
5272: POP
// tech := tech_bazooka ; end ;
5273: LD_ADDR_VAR 0 5
5277: PUSH
5278: LD_INT 44
5280: ST_TO_ADDR
5281: GO 5284
5283: POP
// if Researched ( side , tech ) then
5284: LD_VAR 0 3
5288: PPUSH
5289: LD_VAR 0 5
5293: PPUSH
5294: CALL_OW 325
5298: IFFALSE 5325
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5300: LD_ADDR_VAR 0 2
5304: PUSH
5305: LD_INT 5
5307: PUSH
5308: LD_INT 8
5310: PUSH
5311: LD_INT 9
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PUSH
5319: LD_VAR 0 4
5323: ARRAY
5324: ST_TO_ADDR
// end ;
5325: LD_VAR 0 2
5329: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5330: LD_INT 0
5332: PPUSH
5333: PPUSH
5334: PPUSH
// if not mines then
5335: LD_VAR 0 2
5339: NOT
5340: IFFALSE 5344
// exit ;
5342: GO 5488
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5344: LD_ADDR_VAR 0 5
5348: PUSH
5349: LD_INT 81
5351: PUSH
5352: LD_VAR 0 1
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: LD_INT 3
5363: PUSH
5364: LD_INT 21
5366: PUSH
5367: LD_INT 3
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PPUSH
5382: CALL_OW 69
5386: ST_TO_ADDR
// for i in mines do
5387: LD_ADDR_VAR 0 4
5391: PUSH
5392: LD_VAR 0 2
5396: PUSH
5397: FOR_IN
5398: IFFALSE 5486
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5400: LD_VAR 0 4
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: PPUSH
5409: LD_VAR 0 4
5413: PUSH
5414: LD_INT 2
5416: ARRAY
5417: PPUSH
5418: CALL_OW 458
5422: NOT
5423: IFFALSE 5427
// continue ;
5425: GO 5397
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5427: LD_VAR 0 4
5431: PUSH
5432: LD_INT 1
5434: ARRAY
5435: PPUSH
5436: LD_VAR 0 4
5440: PUSH
5441: LD_INT 2
5443: ARRAY
5444: PPUSH
5445: CALL_OW 428
5449: PUSH
5450: LD_VAR 0 5
5454: IN
5455: IFFALSE 5484
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5457: LD_VAR 0 4
5461: PUSH
5462: LD_INT 1
5464: ARRAY
5465: PPUSH
5466: LD_VAR 0 4
5470: PUSH
5471: LD_INT 2
5473: ARRAY
5474: PPUSH
5475: LD_VAR 0 1
5479: PPUSH
5480: CALL_OW 456
// end ;
5484: GO 5397
5486: POP
5487: POP
// end ;
5488: LD_VAR 0 3
5492: RET
// export function Count ( array ) ; var i ; begin
5493: LD_INT 0
5495: PPUSH
5496: PPUSH
// result := 0 ;
5497: LD_ADDR_VAR 0 2
5501: PUSH
5502: LD_INT 0
5504: ST_TO_ADDR
// for i in array do
5505: LD_ADDR_VAR 0 3
5509: PUSH
5510: LD_VAR 0 1
5514: PUSH
5515: FOR_IN
5516: IFFALSE 5540
// if i then
5518: LD_VAR 0 3
5522: IFFALSE 5538
// result := result + 1 ;
5524: LD_ADDR_VAR 0 2
5528: PUSH
5529: LD_VAR 0 2
5533: PUSH
5534: LD_INT 1
5536: PLUS
5537: ST_TO_ADDR
5538: GO 5515
5540: POP
5541: POP
// end ;
5542: LD_VAR 0 2
5546: RET
// export function IsEmpty ( building ) ; begin
5547: LD_INT 0
5549: PPUSH
// if not building then
5550: LD_VAR 0 1
5554: NOT
5555: IFFALSE 5559
// exit ;
5557: GO 5602
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5559: LD_ADDR_VAR 0 2
5563: PUSH
5564: LD_VAR 0 1
5568: PUSH
5569: LD_INT 22
5571: PUSH
5572: LD_VAR 0 1
5576: PPUSH
5577: CALL_OW 255
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 58
5588: PUSH
5589: EMPTY
5590: LIST
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: PPUSH
5596: CALL_OW 69
5600: IN
5601: ST_TO_ADDR
// end ;
5602: LD_VAR 0 2
5606: RET
// export function IsNotFull ( building ) ; var places ; begin
5607: LD_INT 0
5609: PPUSH
5610: PPUSH
// if not building then
5611: LD_VAR 0 1
5615: NOT
5616: IFFALSE 5620
// exit ;
5618: GO 5791
// result := false ;
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: LD_INT 0
5627: ST_TO_ADDR
// places := 0 ;
5628: LD_ADDR_VAR 0 3
5632: PUSH
5633: LD_INT 0
5635: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5636: LD_VAR 0 1
5640: PPUSH
5641: CALL_OW 266
5645: PUSH
5646: LD_INT 0
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5708
5652: LD_INT 1
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5708
5658: LD_INT 6
5660: DOUBLE
5661: EQUAL
5662: IFTRUE 5708
5664: LD_INT 7
5666: DOUBLE
5667: EQUAL
5668: IFTRUE 5708
5670: LD_INT 8
5672: DOUBLE
5673: EQUAL
5674: IFTRUE 5708
5676: LD_INT 4
5678: DOUBLE
5679: EQUAL
5680: IFTRUE 5708
5682: LD_INT 5
5684: DOUBLE
5685: EQUAL
5686: IFTRUE 5708
5688: LD_INT 2
5690: DOUBLE
5691: EQUAL
5692: IFTRUE 5708
5694: LD_INT 3
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5708
5700: LD_INT 35
5702: DOUBLE
5703: EQUAL
5704: IFTRUE 5708
5706: GO 5719
5708: POP
// places := 6 ; b_bunker , b_breastwork :
5709: LD_ADDR_VAR 0 3
5713: PUSH
5714: LD_INT 6
5716: ST_TO_ADDR
5717: GO 5764
5719: LD_INT 32
5721: DOUBLE
5722: EQUAL
5723: IFTRUE 5733
5725: LD_INT 31
5727: DOUBLE
5728: EQUAL
5729: IFTRUE 5733
5731: GO 5744
5733: POP
// places := 1 ; b_control_tower :
5734: LD_ADDR_VAR 0 3
5738: PUSH
5739: LD_INT 1
5741: ST_TO_ADDR
5742: GO 5764
5744: LD_INT 36
5746: DOUBLE
5747: EQUAL
5748: IFTRUE 5752
5750: GO 5763
5752: POP
// places := 3 ; end ;
5753: LD_ADDR_VAR 0 3
5757: PUSH
5758: LD_INT 3
5760: ST_TO_ADDR
5761: GO 5764
5763: POP
// if places then
5764: LD_VAR 0 3
5768: IFFALSE 5791
// result := UnitsInside ( building ) < places ;
5770: LD_ADDR_VAR 0 2
5774: PUSH
5775: LD_VAR 0 1
5779: PPUSH
5780: CALL_OW 313
5784: PUSH
5785: LD_VAR 0 3
5789: LESS
5790: ST_TO_ADDR
// end ;
5791: LD_VAR 0 2
5795: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5796: LD_INT 0
5798: PPUSH
5799: PPUSH
5800: PPUSH
5801: PPUSH
// tmp := [ ] ;
5802: LD_ADDR_VAR 0 3
5806: PUSH
5807: EMPTY
5808: ST_TO_ADDR
// list := [ ] ;
5809: LD_ADDR_VAR 0 5
5813: PUSH
5814: EMPTY
5815: ST_TO_ADDR
// for i = 16 to 25 do
5816: LD_ADDR_VAR 0 4
5820: PUSH
5821: DOUBLE
5822: LD_INT 16
5824: DEC
5825: ST_TO_ADDR
5826: LD_INT 25
5828: PUSH
5829: FOR_TO
5830: IFFALSE 5903
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5832: LD_ADDR_VAR 0 3
5836: PUSH
5837: LD_VAR 0 3
5841: PUSH
5842: LD_INT 22
5844: PUSH
5845: LD_VAR 0 1
5849: PPUSH
5850: CALL_OW 255
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PUSH
5859: LD_INT 91
5861: PUSH
5862: LD_VAR 0 1
5866: PUSH
5867: LD_INT 6
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: LIST
5874: PUSH
5875: LD_INT 30
5877: PUSH
5878: LD_VAR 0 4
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: LIST
5891: PUSH
5892: EMPTY
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: ADD
5900: ST_TO_ADDR
5901: GO 5829
5903: POP
5904: POP
// for i = 1 to tmp do
5905: LD_ADDR_VAR 0 4
5909: PUSH
5910: DOUBLE
5911: LD_INT 1
5913: DEC
5914: ST_TO_ADDR
5915: LD_VAR 0 3
5919: PUSH
5920: FOR_TO
5921: IFFALSE 6009
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5923: LD_ADDR_VAR 0 5
5927: PUSH
5928: LD_VAR 0 5
5932: PUSH
5933: LD_VAR 0 3
5937: PUSH
5938: LD_VAR 0 4
5942: ARRAY
5943: PPUSH
5944: CALL_OW 266
5948: PUSH
5949: LD_VAR 0 3
5953: PUSH
5954: LD_VAR 0 4
5958: ARRAY
5959: PPUSH
5960: CALL_OW 250
5964: PUSH
5965: LD_VAR 0 3
5969: PUSH
5970: LD_VAR 0 4
5974: ARRAY
5975: PPUSH
5976: CALL_OW 251
5980: PUSH
5981: LD_VAR 0 3
5985: PUSH
5986: LD_VAR 0 4
5990: ARRAY
5991: PPUSH
5992: CALL_OW 254
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: PUSH
6003: EMPTY
6004: LIST
6005: ADD
6006: ST_TO_ADDR
6007: GO 5920
6009: POP
6010: POP
// result := list ;
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: LD_VAR 0 5
6020: ST_TO_ADDR
// end ;
6021: LD_VAR 0 2
6025: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6026: LD_INT 0
6028: PPUSH
6029: PPUSH
6030: PPUSH
6031: PPUSH
6032: PPUSH
6033: PPUSH
6034: PPUSH
// if not factory then
6035: LD_VAR 0 1
6039: NOT
6040: IFFALSE 6044
// exit ;
6042: GO 6637
// if control = control_apeman then
6044: LD_VAR 0 4
6048: PUSH
6049: LD_INT 5
6051: EQUAL
6052: IFFALSE 6161
// begin tmp := UnitsInside ( factory ) ;
6054: LD_ADDR_VAR 0 8
6058: PUSH
6059: LD_VAR 0 1
6063: PPUSH
6064: CALL_OW 313
6068: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6069: LD_VAR 0 8
6073: PPUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 12
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PPUSH
6084: CALL_OW 72
6088: NOT
6089: IFFALSE 6099
// control := control_manual ;
6091: LD_ADDR_VAR 0 4
6095: PUSH
6096: LD_INT 1
6098: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6099: LD_ADDR_VAR 0 8
6103: PUSH
6104: LD_VAR 0 1
6108: PPUSH
6109: CALL 5796 0 1
6113: ST_TO_ADDR
// if tmp then
6114: LD_VAR 0 8
6118: IFFALSE 6161
// begin for i in tmp do
6120: LD_ADDR_VAR 0 7
6124: PUSH
6125: LD_VAR 0 8
6129: PUSH
6130: FOR_IN
6131: IFFALSE 6159
// if i [ 1 ] = b_ext_radio then
6133: LD_VAR 0 7
6137: PUSH
6138: LD_INT 1
6140: ARRAY
6141: PUSH
6142: LD_INT 22
6144: EQUAL
6145: IFFALSE 6157
// begin control := control_remote ;
6147: LD_ADDR_VAR 0 4
6151: PUSH
6152: LD_INT 2
6154: ST_TO_ADDR
// break ;
6155: GO 6159
// end ;
6157: GO 6130
6159: POP
6160: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6161: LD_VAR 0 1
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: LD_VAR 0 3
6175: PPUSH
6176: LD_VAR 0 4
6180: PPUSH
6181: LD_VAR 0 5
6185: PPUSH
6186: CALL_OW 448
6190: IFFALSE 6225
// begin result := [ chassis , engine , control , weapon ] ;
6192: LD_ADDR_VAR 0 6
6196: PUSH
6197: LD_VAR 0 2
6201: PUSH
6202: LD_VAR 0 3
6206: PUSH
6207: LD_VAR 0 4
6211: PUSH
6212: LD_VAR 0 5
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: ST_TO_ADDR
// exit ;
6223: GO 6637
// end ; _chassis := AvailableChassisList ( factory ) ;
6225: LD_ADDR_VAR 0 9
6229: PUSH
6230: LD_VAR 0 1
6234: PPUSH
6235: CALL_OW 475
6239: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6240: LD_ADDR_VAR 0 11
6244: PUSH
6245: LD_VAR 0 1
6249: PPUSH
6250: CALL_OW 476
6254: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6255: LD_ADDR_VAR 0 12
6259: PUSH
6260: LD_VAR 0 1
6264: PPUSH
6265: CALL_OW 477
6269: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6270: LD_ADDR_VAR 0 10
6274: PUSH
6275: LD_VAR 0 1
6279: PPUSH
6280: CALL_OW 478
6284: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6285: LD_VAR 0 9
6289: NOT
6290: PUSH
6291: LD_VAR 0 11
6295: NOT
6296: OR
6297: PUSH
6298: LD_VAR 0 12
6302: NOT
6303: OR
6304: PUSH
6305: LD_VAR 0 10
6309: NOT
6310: OR
6311: IFFALSE 6346
// begin result := [ chassis , engine , control , weapon ] ;
6313: LD_ADDR_VAR 0 6
6317: PUSH
6318: LD_VAR 0 2
6322: PUSH
6323: LD_VAR 0 3
6327: PUSH
6328: LD_VAR 0 4
6332: PUSH
6333: LD_VAR 0 5
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: ST_TO_ADDR
// exit ;
6344: GO 6637
// end ; if not chassis in _chassis then
6346: LD_VAR 0 2
6350: PUSH
6351: LD_VAR 0 9
6355: IN
6356: NOT
6357: IFFALSE 6383
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: LD_VAR 0 9
6368: PUSH
6369: LD_INT 1
6371: PPUSH
6372: LD_VAR 0 9
6376: PPUSH
6377: CALL_OW 12
6381: ARRAY
6382: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6383: LD_VAR 0 2
6387: PPUSH
6388: LD_VAR 0 3
6392: PPUSH
6393: CALL 6642 0 2
6397: NOT
6398: IFFALSE 6457
// repeat engine := _engine [ 1 ] ;
6400: LD_ADDR_VAR 0 3
6404: PUSH
6405: LD_VAR 0 11
6409: PUSH
6410: LD_INT 1
6412: ARRAY
6413: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6414: LD_ADDR_VAR 0 11
6418: PUSH
6419: LD_VAR 0 11
6423: PPUSH
6424: LD_INT 1
6426: PPUSH
6427: CALL_OW 3
6431: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6432: LD_VAR 0 2
6436: PPUSH
6437: LD_VAR 0 3
6441: PPUSH
6442: CALL 6642 0 2
6446: PUSH
6447: LD_VAR 0 11
6451: PUSH
6452: EMPTY
6453: EQUAL
6454: OR
6455: IFFALSE 6400
// if not control in _control then
6457: LD_VAR 0 4
6461: PUSH
6462: LD_VAR 0 12
6466: IN
6467: NOT
6468: IFFALSE 6494
// control := _control [ rand ( 1 , _control ) ] ;
6470: LD_ADDR_VAR 0 4
6474: PUSH
6475: LD_VAR 0 12
6479: PUSH
6480: LD_INT 1
6482: PPUSH
6483: LD_VAR 0 12
6487: PPUSH
6488: CALL_OW 12
6492: ARRAY
6493: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6494: LD_VAR 0 2
6498: PPUSH
6499: LD_VAR 0 5
6503: PPUSH
6504: CALL 6862 0 2
6508: NOT
6509: IFFALSE 6568
// repeat weapon := _weapon [ 1 ] ;
6511: LD_ADDR_VAR 0 5
6515: PUSH
6516: LD_VAR 0 10
6520: PUSH
6521: LD_INT 1
6523: ARRAY
6524: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6525: LD_ADDR_VAR 0 10
6529: PUSH
6530: LD_VAR 0 10
6534: PPUSH
6535: LD_INT 1
6537: PPUSH
6538: CALL_OW 3
6542: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6543: LD_VAR 0 2
6547: PPUSH
6548: LD_VAR 0 5
6552: PPUSH
6553: CALL 6862 0 2
6557: PUSH
6558: LD_VAR 0 10
6562: PUSH
6563: EMPTY
6564: EQUAL
6565: OR
6566: IFFALSE 6511
// result := [ ] ;
6568: LD_ADDR_VAR 0 6
6572: PUSH
6573: EMPTY
6574: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6575: LD_VAR 0 1
6579: PPUSH
6580: LD_VAR 0 2
6584: PPUSH
6585: LD_VAR 0 3
6589: PPUSH
6590: LD_VAR 0 4
6594: PPUSH
6595: LD_VAR 0 5
6599: PPUSH
6600: CALL_OW 448
6604: IFFALSE 6637
// result := [ chassis , engine , control , weapon ] ;
6606: LD_ADDR_VAR 0 6
6610: PUSH
6611: LD_VAR 0 2
6615: PUSH
6616: LD_VAR 0 3
6620: PUSH
6621: LD_VAR 0 4
6625: PUSH
6626: LD_VAR 0 5
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: ST_TO_ADDR
// end ;
6637: LD_VAR 0 6
6641: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6642: LD_INT 0
6644: PPUSH
// if not chassis or not engine then
6645: LD_VAR 0 1
6649: NOT
6650: PUSH
6651: LD_VAR 0 2
6655: NOT
6656: OR
6657: IFFALSE 6661
// exit ;
6659: GO 6857
// case engine of engine_solar :
6661: LD_VAR 0 2
6665: PUSH
6666: LD_INT 2
6668: DOUBLE
6669: EQUAL
6670: IFTRUE 6674
6672: GO 6712
6674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: LD_INT 11
6682: PUSH
6683: LD_INT 12
6685: PUSH
6686: LD_INT 13
6688: PUSH
6689: LD_INT 14
6691: PUSH
6692: LD_INT 1
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: ST_TO_ADDR
6710: GO 6841
6712: LD_INT 1
6714: DOUBLE
6715: EQUAL
6716: IFTRUE 6720
6718: GO 6782
6720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6721: LD_ADDR_VAR 0 3
6725: PUSH
6726: LD_INT 11
6728: PUSH
6729: LD_INT 12
6731: PUSH
6732: LD_INT 13
6734: PUSH
6735: LD_INT 14
6737: PUSH
6738: LD_INT 1
6740: PUSH
6741: LD_INT 2
6743: PUSH
6744: LD_INT 3
6746: PUSH
6747: LD_INT 4
6749: PUSH
6750: LD_INT 5
6752: PUSH
6753: LD_INT 21
6755: PUSH
6756: LD_INT 23
6758: PUSH
6759: LD_INT 22
6761: PUSH
6762: LD_INT 24
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: ST_TO_ADDR
6780: GO 6841
6782: LD_INT 3
6784: DOUBLE
6785: EQUAL
6786: IFTRUE 6790
6788: GO 6840
6790: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6791: LD_ADDR_VAR 0 3
6795: PUSH
6796: LD_INT 13
6798: PUSH
6799: LD_INT 14
6801: PUSH
6802: LD_INT 2
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: LD_INT 4
6810: PUSH
6811: LD_INT 5
6813: PUSH
6814: LD_INT 21
6816: PUSH
6817: LD_INT 22
6819: PUSH
6820: LD_INT 23
6822: PUSH
6823: LD_INT 24
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: ST_TO_ADDR
6838: GO 6841
6840: POP
// result := ( chassis in result ) ;
6841: LD_ADDR_VAR 0 3
6845: PUSH
6846: LD_VAR 0 1
6850: PUSH
6851: LD_VAR 0 3
6855: IN
6856: ST_TO_ADDR
// end ;
6857: LD_VAR 0 3
6861: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6862: LD_INT 0
6864: PPUSH
// if not chassis or not weapon then
6865: LD_VAR 0 1
6869: NOT
6870: PUSH
6871: LD_VAR 0 2
6875: NOT
6876: OR
6877: IFFALSE 6881
// exit ;
6879: GO 7941
// case weapon of us_machine_gun :
6881: LD_VAR 0 2
6885: PUSH
6886: LD_INT 2
6888: DOUBLE
6889: EQUAL
6890: IFTRUE 6894
6892: GO 6924
6894: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6895: LD_ADDR_VAR 0 3
6899: PUSH
6900: LD_INT 1
6902: PUSH
6903: LD_INT 2
6905: PUSH
6906: LD_INT 3
6908: PUSH
6909: LD_INT 4
6911: PUSH
6912: LD_INT 5
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: ST_TO_ADDR
6922: GO 7925
6924: LD_INT 3
6926: DOUBLE
6927: EQUAL
6928: IFTRUE 6932
6930: GO 6962
6932: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6933: LD_ADDR_VAR 0 3
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: LD_INT 2
6943: PUSH
6944: LD_INT 3
6946: PUSH
6947: LD_INT 4
6949: PUSH
6950: LD_INT 5
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: ST_TO_ADDR
6960: GO 7925
6962: LD_INT 11
6964: DOUBLE
6965: EQUAL
6966: IFTRUE 6970
6968: GO 7000
6970: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6971: LD_ADDR_VAR 0 3
6975: PUSH
6976: LD_INT 1
6978: PUSH
6979: LD_INT 2
6981: PUSH
6982: LD_INT 3
6984: PUSH
6985: LD_INT 4
6987: PUSH
6988: LD_INT 5
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: ST_TO_ADDR
6998: GO 7925
7000: LD_INT 4
7002: DOUBLE
7003: EQUAL
7004: IFTRUE 7008
7006: GO 7034
7008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7009: LD_ADDR_VAR 0 3
7013: PUSH
7014: LD_INT 2
7016: PUSH
7017: LD_INT 3
7019: PUSH
7020: LD_INT 4
7022: PUSH
7023: LD_INT 5
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: ST_TO_ADDR
7032: GO 7925
7034: LD_INT 5
7036: DOUBLE
7037: EQUAL
7038: IFTRUE 7042
7040: GO 7068
7042: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7043: LD_ADDR_VAR 0 3
7047: PUSH
7048: LD_INT 2
7050: PUSH
7051: LD_INT 3
7053: PUSH
7054: LD_INT 4
7056: PUSH
7057: LD_INT 5
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: ST_TO_ADDR
7066: GO 7925
7068: LD_INT 9
7070: DOUBLE
7071: EQUAL
7072: IFTRUE 7076
7074: GO 7102
7076: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7077: LD_ADDR_VAR 0 3
7081: PUSH
7082: LD_INT 2
7084: PUSH
7085: LD_INT 3
7087: PUSH
7088: LD_INT 4
7090: PUSH
7091: LD_INT 5
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: ST_TO_ADDR
7100: GO 7925
7102: LD_INT 7
7104: DOUBLE
7105: EQUAL
7106: IFTRUE 7110
7108: GO 7136
7110: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7111: LD_ADDR_VAR 0 3
7115: PUSH
7116: LD_INT 2
7118: PUSH
7119: LD_INT 3
7121: PUSH
7122: LD_INT 4
7124: PUSH
7125: LD_INT 5
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: ST_TO_ADDR
7134: GO 7925
7136: LD_INT 12
7138: DOUBLE
7139: EQUAL
7140: IFTRUE 7144
7142: GO 7170
7144: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7145: LD_ADDR_VAR 0 3
7149: PUSH
7150: LD_INT 2
7152: PUSH
7153: LD_INT 3
7155: PUSH
7156: LD_INT 4
7158: PUSH
7159: LD_INT 5
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: ST_TO_ADDR
7168: GO 7925
7170: LD_INT 13
7172: DOUBLE
7173: EQUAL
7174: IFTRUE 7178
7176: GO 7204
7178: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7179: LD_ADDR_VAR 0 3
7183: PUSH
7184: LD_INT 2
7186: PUSH
7187: LD_INT 3
7189: PUSH
7190: LD_INT 4
7192: PUSH
7193: LD_INT 5
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: ST_TO_ADDR
7202: GO 7925
7204: LD_INT 14
7206: DOUBLE
7207: EQUAL
7208: IFTRUE 7212
7210: GO 7230
7212: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7213: LD_ADDR_VAR 0 3
7217: PUSH
7218: LD_INT 4
7220: PUSH
7221: LD_INT 5
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: ST_TO_ADDR
7228: GO 7925
7230: LD_INT 6
7232: DOUBLE
7233: EQUAL
7234: IFTRUE 7238
7236: GO 7256
7238: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7239: LD_ADDR_VAR 0 3
7243: PUSH
7244: LD_INT 4
7246: PUSH
7247: LD_INT 5
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: ST_TO_ADDR
7254: GO 7925
7256: LD_INT 10
7258: DOUBLE
7259: EQUAL
7260: IFTRUE 7264
7262: GO 7282
7264: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7265: LD_ADDR_VAR 0 3
7269: PUSH
7270: LD_INT 4
7272: PUSH
7273: LD_INT 5
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: ST_TO_ADDR
7280: GO 7925
7282: LD_INT 22
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7316
7290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7291: LD_ADDR_VAR 0 3
7295: PUSH
7296: LD_INT 11
7298: PUSH
7299: LD_INT 12
7301: PUSH
7302: LD_INT 13
7304: PUSH
7305: LD_INT 14
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: ST_TO_ADDR
7314: GO 7925
7316: LD_INT 23
7318: DOUBLE
7319: EQUAL
7320: IFTRUE 7324
7322: GO 7350
7324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7325: LD_ADDR_VAR 0 3
7329: PUSH
7330: LD_INT 11
7332: PUSH
7333: LD_INT 12
7335: PUSH
7336: LD_INT 13
7338: PUSH
7339: LD_INT 14
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: ST_TO_ADDR
7348: GO 7925
7350: LD_INT 24
7352: DOUBLE
7353: EQUAL
7354: IFTRUE 7358
7356: GO 7384
7358: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7359: LD_ADDR_VAR 0 3
7363: PUSH
7364: LD_INT 11
7366: PUSH
7367: LD_INT 12
7369: PUSH
7370: LD_INT 13
7372: PUSH
7373: LD_INT 14
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: ST_TO_ADDR
7382: GO 7925
7384: LD_INT 30
7386: DOUBLE
7387: EQUAL
7388: IFTRUE 7392
7390: GO 7418
7392: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7393: LD_ADDR_VAR 0 3
7397: PUSH
7398: LD_INT 11
7400: PUSH
7401: LD_INT 12
7403: PUSH
7404: LD_INT 13
7406: PUSH
7407: LD_INT 14
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: ST_TO_ADDR
7416: GO 7925
7418: LD_INT 25
7420: DOUBLE
7421: EQUAL
7422: IFTRUE 7426
7424: GO 7444
7426: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7427: LD_ADDR_VAR 0 3
7431: PUSH
7432: LD_INT 13
7434: PUSH
7435: LD_INT 14
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: ST_TO_ADDR
7442: GO 7925
7444: LD_INT 27
7446: DOUBLE
7447: EQUAL
7448: IFTRUE 7452
7450: GO 7470
7452: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7453: LD_ADDR_VAR 0 3
7457: PUSH
7458: LD_INT 13
7460: PUSH
7461: LD_INT 14
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: ST_TO_ADDR
7468: GO 7925
7470: LD_INT 92
7472: DOUBLE
7473: EQUAL
7474: IFTRUE 7478
7476: GO 7504
7478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7479: LD_ADDR_VAR 0 3
7483: PUSH
7484: LD_INT 11
7486: PUSH
7487: LD_INT 12
7489: PUSH
7490: LD_INT 13
7492: PUSH
7493: LD_INT 14
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: ST_TO_ADDR
7502: GO 7925
7504: LD_INT 28
7506: DOUBLE
7507: EQUAL
7508: IFTRUE 7512
7510: GO 7530
7512: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7513: LD_ADDR_VAR 0 3
7517: PUSH
7518: LD_INT 13
7520: PUSH
7521: LD_INT 14
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: ST_TO_ADDR
7528: GO 7925
7530: LD_INT 29
7532: DOUBLE
7533: EQUAL
7534: IFTRUE 7538
7536: GO 7556
7538: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7539: LD_ADDR_VAR 0 3
7543: PUSH
7544: LD_INT 13
7546: PUSH
7547: LD_INT 14
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: ST_TO_ADDR
7554: GO 7925
7556: LD_INT 31
7558: DOUBLE
7559: EQUAL
7560: IFTRUE 7564
7562: GO 7582
7564: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7565: LD_ADDR_VAR 0 3
7569: PUSH
7570: LD_INT 13
7572: PUSH
7573: LD_INT 14
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: ST_TO_ADDR
7580: GO 7925
7582: LD_INT 26
7584: DOUBLE
7585: EQUAL
7586: IFTRUE 7590
7588: GO 7608
7590: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7591: LD_ADDR_VAR 0 3
7595: PUSH
7596: LD_INT 13
7598: PUSH
7599: LD_INT 14
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: ST_TO_ADDR
7606: GO 7925
7608: LD_INT 42
7610: DOUBLE
7611: EQUAL
7612: IFTRUE 7616
7614: GO 7642
7616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7617: LD_ADDR_VAR 0 3
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 22
7627: PUSH
7628: LD_INT 23
7630: PUSH
7631: LD_INT 24
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: ST_TO_ADDR
7640: GO 7925
7642: LD_INT 43
7644: DOUBLE
7645: EQUAL
7646: IFTRUE 7650
7648: GO 7676
7650: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7651: LD_ADDR_VAR 0 3
7655: PUSH
7656: LD_INT 21
7658: PUSH
7659: LD_INT 22
7661: PUSH
7662: LD_INT 23
7664: PUSH
7665: LD_INT 24
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
7674: GO 7925
7676: LD_INT 44
7678: DOUBLE
7679: EQUAL
7680: IFTRUE 7684
7682: GO 7710
7684: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7685: LD_ADDR_VAR 0 3
7689: PUSH
7690: LD_INT 21
7692: PUSH
7693: LD_INT 22
7695: PUSH
7696: LD_INT 23
7698: PUSH
7699: LD_INT 24
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: ST_TO_ADDR
7708: GO 7925
7710: LD_INT 45
7712: DOUBLE
7713: EQUAL
7714: IFTRUE 7718
7716: GO 7744
7718: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7719: LD_ADDR_VAR 0 3
7723: PUSH
7724: LD_INT 21
7726: PUSH
7727: LD_INT 22
7729: PUSH
7730: LD_INT 23
7732: PUSH
7733: LD_INT 24
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: ST_TO_ADDR
7742: GO 7925
7744: LD_INT 49
7746: DOUBLE
7747: EQUAL
7748: IFTRUE 7752
7750: GO 7778
7752: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7753: LD_ADDR_VAR 0 3
7757: PUSH
7758: LD_INT 21
7760: PUSH
7761: LD_INT 22
7763: PUSH
7764: LD_INT 23
7766: PUSH
7767: LD_INT 24
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: ST_TO_ADDR
7776: GO 7925
7778: LD_INT 51
7780: DOUBLE
7781: EQUAL
7782: IFTRUE 7786
7784: GO 7812
7786: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7787: LD_ADDR_VAR 0 3
7791: PUSH
7792: LD_INT 21
7794: PUSH
7795: LD_INT 22
7797: PUSH
7798: LD_INT 23
7800: PUSH
7801: LD_INT 24
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: ST_TO_ADDR
7810: GO 7925
7812: LD_INT 52
7814: DOUBLE
7815: EQUAL
7816: IFTRUE 7820
7818: GO 7846
7820: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7821: LD_ADDR_VAR 0 3
7825: PUSH
7826: LD_INT 21
7828: PUSH
7829: LD_INT 22
7831: PUSH
7832: LD_INT 23
7834: PUSH
7835: LD_INT 24
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: ST_TO_ADDR
7844: GO 7925
7846: LD_INT 53
7848: DOUBLE
7849: EQUAL
7850: IFTRUE 7854
7852: GO 7872
7854: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7855: LD_ADDR_VAR 0 3
7859: PUSH
7860: LD_INT 23
7862: PUSH
7863: LD_INT 24
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: ST_TO_ADDR
7870: GO 7925
7872: LD_INT 46
7874: DOUBLE
7875: EQUAL
7876: IFTRUE 7880
7878: GO 7898
7880: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7881: LD_ADDR_VAR 0 3
7885: PUSH
7886: LD_INT 23
7888: PUSH
7889: LD_INT 24
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: ST_TO_ADDR
7896: GO 7925
7898: LD_INT 47
7900: DOUBLE
7901: EQUAL
7902: IFTRUE 7906
7904: GO 7924
7906: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7907: LD_ADDR_VAR 0 3
7911: PUSH
7912: LD_INT 23
7914: PUSH
7915: LD_INT 24
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: ST_TO_ADDR
7922: GO 7925
7924: POP
// result := ( chassis in result ) ;
7925: LD_ADDR_VAR 0 3
7929: PUSH
7930: LD_VAR 0 1
7934: PUSH
7935: LD_VAR 0 3
7939: IN
7940: ST_TO_ADDR
// end ;
7941: LD_VAR 0 3
7945: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7946: LD_INT 0
7948: PPUSH
7949: PPUSH
7950: PPUSH
7951: PPUSH
7952: PPUSH
7953: PPUSH
7954: PPUSH
// result := array ;
7955: LD_ADDR_VAR 0 5
7959: PUSH
7960: LD_VAR 0 1
7964: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7965: LD_VAR 0 1
7969: NOT
7970: PUSH
7971: LD_VAR 0 2
7975: NOT
7976: OR
7977: PUSH
7978: LD_VAR 0 3
7982: NOT
7983: OR
7984: PUSH
7985: LD_VAR 0 2
7989: PUSH
7990: LD_VAR 0 1
7994: GREATER
7995: OR
7996: PUSH
7997: LD_VAR 0 3
8001: PUSH
8002: LD_VAR 0 1
8006: GREATER
8007: OR
8008: IFFALSE 8012
// exit ;
8010: GO 8308
// if direction then
8012: LD_VAR 0 4
8016: IFFALSE 8080
// begin d := 1 ;
8018: LD_ADDR_VAR 0 9
8022: PUSH
8023: LD_INT 1
8025: ST_TO_ADDR
// if i_from > i_to then
8026: LD_VAR 0 2
8030: PUSH
8031: LD_VAR 0 3
8035: GREATER
8036: IFFALSE 8062
// length := ( array - i_from ) + i_to else
8038: LD_ADDR_VAR 0 11
8042: PUSH
8043: LD_VAR 0 1
8047: PUSH
8048: LD_VAR 0 2
8052: MINUS
8053: PUSH
8054: LD_VAR 0 3
8058: PLUS
8059: ST_TO_ADDR
8060: GO 8078
// length := i_to - i_from ;
8062: LD_ADDR_VAR 0 11
8066: PUSH
8067: LD_VAR 0 3
8071: PUSH
8072: LD_VAR 0 2
8076: MINUS
8077: ST_TO_ADDR
// end else
8078: GO 8141
// begin d := - 1 ;
8080: LD_ADDR_VAR 0 9
8084: PUSH
8085: LD_INT 1
8087: NEG
8088: ST_TO_ADDR
// if i_from > i_to then
8089: LD_VAR 0 2
8093: PUSH
8094: LD_VAR 0 3
8098: GREATER
8099: IFFALSE 8119
// length := i_from - i_to else
8101: LD_ADDR_VAR 0 11
8105: PUSH
8106: LD_VAR 0 2
8110: PUSH
8111: LD_VAR 0 3
8115: MINUS
8116: ST_TO_ADDR
8117: GO 8141
// length := ( array - i_to ) + i_from ;
8119: LD_ADDR_VAR 0 11
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: LD_VAR 0 3
8133: MINUS
8134: PUSH
8135: LD_VAR 0 2
8139: PLUS
8140: ST_TO_ADDR
// end ; if not length then
8141: LD_VAR 0 11
8145: NOT
8146: IFFALSE 8150
// exit ;
8148: GO 8308
// tmp := array ;
8150: LD_ADDR_VAR 0 10
8154: PUSH
8155: LD_VAR 0 1
8159: ST_TO_ADDR
// for i = 1 to length do
8160: LD_ADDR_VAR 0 6
8164: PUSH
8165: DOUBLE
8166: LD_INT 1
8168: DEC
8169: ST_TO_ADDR
8170: LD_VAR 0 11
8174: PUSH
8175: FOR_TO
8176: IFFALSE 8296
// begin for j = 1 to array do
8178: LD_ADDR_VAR 0 7
8182: PUSH
8183: DOUBLE
8184: LD_INT 1
8186: DEC
8187: ST_TO_ADDR
8188: LD_VAR 0 1
8192: PUSH
8193: FOR_TO
8194: IFFALSE 8282
// begin k := j + d ;
8196: LD_ADDR_VAR 0 8
8200: PUSH
8201: LD_VAR 0 7
8205: PUSH
8206: LD_VAR 0 9
8210: PLUS
8211: ST_TO_ADDR
// if k > array then
8212: LD_VAR 0 8
8216: PUSH
8217: LD_VAR 0 1
8221: GREATER
8222: IFFALSE 8232
// k := 1 ;
8224: LD_ADDR_VAR 0 8
8228: PUSH
8229: LD_INT 1
8231: ST_TO_ADDR
// if not k then
8232: LD_VAR 0 8
8236: NOT
8237: IFFALSE 8249
// k := array ;
8239: LD_ADDR_VAR 0 8
8243: PUSH
8244: LD_VAR 0 1
8248: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8249: LD_ADDR_VAR 0 10
8253: PUSH
8254: LD_VAR 0 10
8258: PPUSH
8259: LD_VAR 0 8
8263: PPUSH
8264: LD_VAR 0 1
8268: PUSH
8269: LD_VAR 0 7
8273: ARRAY
8274: PPUSH
8275: CALL_OW 1
8279: ST_TO_ADDR
// end ;
8280: GO 8193
8282: POP
8283: POP
// array := tmp ;
8284: LD_ADDR_VAR 0 1
8288: PUSH
8289: LD_VAR 0 10
8293: ST_TO_ADDR
// end ;
8294: GO 8175
8296: POP
8297: POP
// result := array ;
8298: LD_ADDR_VAR 0 5
8302: PUSH
8303: LD_VAR 0 1
8307: ST_TO_ADDR
// end ;
8308: LD_VAR 0 5
8312: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8313: LD_INT 0
8315: PPUSH
8316: PPUSH
// result := 0 ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_INT 0
8324: ST_TO_ADDR
// if not array or not value in array then
8325: LD_VAR 0 1
8329: NOT
8330: PUSH
8331: LD_VAR 0 2
8335: PUSH
8336: LD_VAR 0 1
8340: IN
8341: NOT
8342: OR
8343: IFFALSE 8347
// exit ;
8345: GO 8401
// for i = 1 to array do
8347: LD_ADDR_VAR 0 4
8351: PUSH
8352: DOUBLE
8353: LD_INT 1
8355: DEC
8356: ST_TO_ADDR
8357: LD_VAR 0 1
8361: PUSH
8362: FOR_TO
8363: IFFALSE 8399
// if value = array [ i ] then
8365: LD_VAR 0 2
8369: PUSH
8370: LD_VAR 0 1
8374: PUSH
8375: LD_VAR 0 4
8379: ARRAY
8380: EQUAL
8381: IFFALSE 8397
// begin result := i ;
8383: LD_ADDR_VAR 0 3
8387: PUSH
8388: LD_VAR 0 4
8392: ST_TO_ADDR
// exit ;
8393: POP
8394: POP
8395: GO 8401
// end ;
8397: GO 8362
8399: POP
8400: POP
// end ;
8401: LD_VAR 0 3
8405: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8406: LD_INT 0
8408: PPUSH
// vc_chassis := chassis ;
8409: LD_ADDR_OWVAR 37
8413: PUSH
8414: LD_VAR 0 1
8418: ST_TO_ADDR
// vc_engine := engine ;
8419: LD_ADDR_OWVAR 39
8423: PUSH
8424: LD_VAR 0 2
8428: ST_TO_ADDR
// vc_control := control ;
8429: LD_ADDR_OWVAR 38
8433: PUSH
8434: LD_VAR 0 3
8438: ST_TO_ADDR
// vc_weapon := weapon ;
8439: LD_ADDR_OWVAR 40
8443: PUSH
8444: LD_VAR 0 4
8448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8449: LD_ADDR_OWVAR 41
8453: PUSH
8454: LD_VAR 0 5
8458: ST_TO_ADDR
// end ;
8459: LD_VAR 0 6
8463: RET
// export function WantPlant ( unit ) ; var task ; begin
8464: LD_INT 0
8466: PPUSH
8467: PPUSH
// result := false ;
8468: LD_ADDR_VAR 0 2
8472: PUSH
8473: LD_INT 0
8475: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8476: LD_ADDR_VAR 0 3
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 437
8490: ST_TO_ADDR
// if task then
8491: LD_VAR 0 3
8495: IFFALSE 8523
// if task [ 1 ] [ 1 ] = p then
8497: LD_VAR 0 3
8501: PUSH
8502: LD_INT 1
8504: ARRAY
8505: PUSH
8506: LD_INT 1
8508: ARRAY
8509: PUSH
8510: LD_STRING p
8512: EQUAL
8513: IFFALSE 8523
// result := true ;
8515: LD_ADDR_VAR 0 2
8519: PUSH
8520: LD_INT 1
8522: ST_TO_ADDR
// end ;
8523: LD_VAR 0 2
8527: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8528: LD_INT 0
8530: PPUSH
8531: PPUSH
8532: PPUSH
8533: PPUSH
// if pos < 1 then
8534: LD_VAR 0 2
8538: PUSH
8539: LD_INT 1
8541: LESS
8542: IFFALSE 8546
// exit ;
8544: GO 8849
// if pos = 1 then
8546: LD_VAR 0 2
8550: PUSH
8551: LD_INT 1
8553: EQUAL
8554: IFFALSE 8587
// result := Replace ( arr , pos [ 1 ] , value ) else
8556: LD_ADDR_VAR 0 4
8560: PUSH
8561: LD_VAR 0 1
8565: PPUSH
8566: LD_VAR 0 2
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: LD_VAR 0 3
8579: PPUSH
8580: CALL_OW 1
8584: ST_TO_ADDR
8585: GO 8849
// begin tmp := arr ;
8587: LD_ADDR_VAR 0 6
8591: PUSH
8592: LD_VAR 0 1
8596: ST_TO_ADDR
// s_arr := [ tmp ] ;
8597: LD_ADDR_VAR 0 7
8601: PUSH
8602: LD_VAR 0 6
8606: PUSH
8607: EMPTY
8608: LIST
8609: ST_TO_ADDR
// for i = 1 to pos - 1 do
8610: LD_ADDR_VAR 0 5
8614: PUSH
8615: DOUBLE
8616: LD_INT 1
8618: DEC
8619: ST_TO_ADDR
8620: LD_VAR 0 2
8624: PUSH
8625: LD_INT 1
8627: MINUS
8628: PUSH
8629: FOR_TO
8630: IFFALSE 8675
// begin tmp := tmp [ pos [ i ] ] ;
8632: LD_ADDR_VAR 0 6
8636: PUSH
8637: LD_VAR 0 6
8641: PUSH
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 5
8651: ARRAY
8652: ARRAY
8653: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8654: LD_ADDR_VAR 0 7
8658: PUSH
8659: LD_VAR 0 7
8663: PUSH
8664: LD_VAR 0 6
8668: PUSH
8669: EMPTY
8670: LIST
8671: ADD
8672: ST_TO_ADDR
// end ;
8673: GO 8629
8675: POP
8676: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8677: LD_ADDR_VAR 0 6
8681: PUSH
8682: LD_VAR 0 6
8686: PPUSH
8687: LD_VAR 0 2
8691: PUSH
8692: LD_VAR 0 2
8696: ARRAY
8697: PPUSH
8698: LD_VAR 0 3
8702: PPUSH
8703: CALL_OW 1
8707: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8708: LD_ADDR_VAR 0 7
8712: PUSH
8713: LD_VAR 0 7
8717: PPUSH
8718: LD_VAR 0 7
8722: PPUSH
8723: LD_VAR 0 6
8727: PPUSH
8728: CALL_OW 1
8732: ST_TO_ADDR
// for i = s_arr downto 2 do
8733: LD_ADDR_VAR 0 5
8737: PUSH
8738: DOUBLE
8739: LD_VAR 0 7
8743: INC
8744: ST_TO_ADDR
8745: LD_INT 2
8747: PUSH
8748: FOR_DOWNTO
8749: IFFALSE 8833
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8751: LD_ADDR_VAR 0 6
8755: PUSH
8756: LD_VAR 0 7
8760: PUSH
8761: LD_VAR 0 5
8765: PUSH
8766: LD_INT 1
8768: MINUS
8769: ARRAY
8770: PPUSH
8771: LD_VAR 0 2
8775: PUSH
8776: LD_VAR 0 5
8780: PUSH
8781: LD_INT 1
8783: MINUS
8784: ARRAY
8785: PPUSH
8786: LD_VAR 0 7
8790: PUSH
8791: LD_VAR 0 5
8795: ARRAY
8796: PPUSH
8797: CALL_OW 1
8801: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8802: LD_ADDR_VAR 0 7
8806: PUSH
8807: LD_VAR 0 7
8811: PPUSH
8812: LD_VAR 0 5
8816: PUSH
8817: LD_INT 1
8819: MINUS
8820: PPUSH
8821: LD_VAR 0 6
8825: PPUSH
8826: CALL_OW 1
8830: ST_TO_ADDR
// end ;
8831: GO 8748
8833: POP
8834: POP
// result := s_arr [ 1 ] ;
8835: LD_ADDR_VAR 0 4
8839: PUSH
8840: LD_VAR 0 7
8844: PUSH
8845: LD_INT 1
8847: ARRAY
8848: ST_TO_ADDR
// end ; end ;
8849: LD_VAR 0 4
8853: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8854: LD_INT 0
8856: PPUSH
8857: PPUSH
// if not list then
8858: LD_VAR 0 1
8862: NOT
8863: IFFALSE 8867
// exit ;
8865: GO 8958
// i := list [ pos1 ] ;
8867: LD_ADDR_VAR 0 5
8871: PUSH
8872: LD_VAR 0 1
8876: PUSH
8877: LD_VAR 0 2
8881: ARRAY
8882: ST_TO_ADDR
// if not i then
8883: LD_VAR 0 5
8887: NOT
8888: IFFALSE 8892
// exit ;
8890: GO 8958
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8892: LD_ADDR_VAR 0 1
8896: PUSH
8897: LD_VAR 0 1
8901: PPUSH
8902: LD_VAR 0 2
8906: PPUSH
8907: LD_VAR 0 1
8911: PUSH
8912: LD_VAR 0 3
8916: ARRAY
8917: PPUSH
8918: CALL_OW 1
8922: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8923: LD_ADDR_VAR 0 1
8927: PUSH
8928: LD_VAR 0 1
8932: PPUSH
8933: LD_VAR 0 3
8937: PPUSH
8938: LD_VAR 0 5
8942: PPUSH
8943: CALL_OW 1
8947: ST_TO_ADDR
// result := list ;
8948: LD_ADDR_VAR 0 4
8952: PUSH
8953: LD_VAR 0 1
8957: ST_TO_ADDR
// end ;
8958: LD_VAR 0 4
8962: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8963: LD_INT 0
8965: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8966: LD_ADDR_VAR 0 5
8970: PUSH
8971: LD_VAR 0 1
8975: PPUSH
8976: CALL_OW 250
8980: PPUSH
8981: LD_VAR 0 1
8985: PPUSH
8986: CALL_OW 251
8990: PPUSH
8991: LD_VAR 0 2
8995: PPUSH
8996: LD_VAR 0 3
9000: PPUSH
9001: LD_VAR 0 4
9005: PPUSH
9006: CALL 9016 0 5
9010: ST_TO_ADDR
// end ;
9011: LD_VAR 0 5
9015: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9016: LD_INT 0
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
// if not list then
9022: LD_VAR 0 3
9026: NOT
9027: IFFALSE 9031
// exit ;
9029: GO 9419
// result := [ ] ;
9031: LD_ADDR_VAR 0 6
9035: PUSH
9036: EMPTY
9037: ST_TO_ADDR
// for i in list do
9038: LD_ADDR_VAR 0 7
9042: PUSH
9043: LD_VAR 0 3
9047: PUSH
9048: FOR_IN
9049: IFFALSE 9251
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9051: LD_ADDR_VAR 0 9
9055: PUSH
9056: LD_VAR 0 7
9060: PPUSH
9061: LD_VAR 0 1
9065: PPUSH
9066: LD_VAR 0 2
9070: PPUSH
9071: CALL_OW 297
9075: ST_TO_ADDR
// if not result then
9076: LD_VAR 0 6
9080: NOT
9081: IFFALSE 9107
// result := [ [ i , tmp ] ] else
9083: LD_ADDR_VAR 0 6
9087: PUSH
9088: LD_VAR 0 7
9092: PUSH
9093: LD_VAR 0 9
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: ST_TO_ADDR
9105: GO 9249
// begin if result [ result ] [ 2 ] < tmp then
9107: LD_VAR 0 6
9111: PUSH
9112: LD_VAR 0 6
9116: ARRAY
9117: PUSH
9118: LD_INT 2
9120: ARRAY
9121: PUSH
9122: LD_VAR 0 9
9126: LESS
9127: IFFALSE 9169
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9129: LD_ADDR_VAR 0 6
9133: PUSH
9134: LD_VAR 0 6
9138: PPUSH
9139: LD_VAR 0 6
9143: PUSH
9144: LD_INT 1
9146: PLUS
9147: PPUSH
9148: LD_VAR 0 7
9152: PUSH
9153: LD_VAR 0 9
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 2
9166: ST_TO_ADDR
9167: GO 9249
// for j = 1 to result do
9169: LD_ADDR_VAR 0 8
9173: PUSH
9174: DOUBLE
9175: LD_INT 1
9177: DEC
9178: ST_TO_ADDR
9179: LD_VAR 0 6
9183: PUSH
9184: FOR_TO
9185: IFFALSE 9247
// begin if tmp < result [ j ] [ 2 ] then
9187: LD_VAR 0 9
9191: PUSH
9192: LD_VAR 0 6
9196: PUSH
9197: LD_VAR 0 8
9201: ARRAY
9202: PUSH
9203: LD_INT 2
9205: ARRAY
9206: LESS
9207: IFFALSE 9245
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9209: LD_ADDR_VAR 0 6
9213: PUSH
9214: LD_VAR 0 6
9218: PPUSH
9219: LD_VAR 0 8
9223: PPUSH
9224: LD_VAR 0 7
9228: PUSH
9229: LD_VAR 0 9
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 2
9242: ST_TO_ADDR
// break ;
9243: GO 9247
// end ; end ;
9245: GO 9184
9247: POP
9248: POP
// end ; end ;
9249: GO 9048
9251: POP
9252: POP
// if result and not asc then
9253: LD_VAR 0 6
9257: PUSH
9258: LD_VAR 0 4
9262: NOT
9263: AND
9264: IFFALSE 9339
// begin tmp := result ;
9266: LD_ADDR_VAR 0 9
9270: PUSH
9271: LD_VAR 0 6
9275: ST_TO_ADDR
// for i = tmp downto 1 do
9276: LD_ADDR_VAR 0 7
9280: PUSH
9281: DOUBLE
9282: LD_VAR 0 9
9286: INC
9287: ST_TO_ADDR
9288: LD_INT 1
9290: PUSH
9291: FOR_DOWNTO
9292: IFFALSE 9337
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9294: LD_ADDR_VAR 0 6
9298: PUSH
9299: LD_VAR 0 6
9303: PPUSH
9304: LD_VAR 0 9
9308: PUSH
9309: LD_VAR 0 7
9313: MINUS
9314: PUSH
9315: LD_INT 1
9317: PLUS
9318: PPUSH
9319: LD_VAR 0 9
9323: PUSH
9324: LD_VAR 0 7
9328: ARRAY
9329: PPUSH
9330: CALL_OW 1
9334: ST_TO_ADDR
9335: GO 9291
9337: POP
9338: POP
// end ; tmp := [ ] ;
9339: LD_ADDR_VAR 0 9
9343: PUSH
9344: EMPTY
9345: ST_TO_ADDR
// if mode then
9346: LD_VAR 0 5
9350: IFFALSE 9419
// begin for i = 1 to result do
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: DOUBLE
9358: LD_INT 1
9360: DEC
9361: ST_TO_ADDR
9362: LD_VAR 0 6
9366: PUSH
9367: FOR_TO
9368: IFFALSE 9407
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9370: LD_ADDR_VAR 0 9
9374: PUSH
9375: LD_VAR 0 9
9379: PPUSH
9380: LD_VAR 0 7
9384: PPUSH
9385: LD_VAR 0 6
9389: PUSH
9390: LD_VAR 0 7
9394: ARRAY
9395: PUSH
9396: LD_INT 1
9398: ARRAY
9399: PPUSH
9400: CALL_OW 1
9404: ST_TO_ADDR
9405: GO 9367
9407: POP
9408: POP
// result := tmp ;
9409: LD_ADDR_VAR 0 6
9413: PUSH
9414: LD_VAR 0 9
9418: ST_TO_ADDR
// end ; end ;
9419: LD_VAR 0 6
9423: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9424: LD_INT 0
9426: PPUSH
9427: PPUSH
9428: PPUSH
9429: PPUSH
9430: PPUSH
9431: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9432: LD_ADDR_VAR 0 5
9436: PUSH
9437: LD_INT 0
9439: PUSH
9440: LD_INT 0
9442: PUSH
9443: LD_INT 0
9445: PUSH
9446: EMPTY
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: ST_TO_ADDR
// if not x or not y then
9454: LD_VAR 0 2
9458: NOT
9459: PUSH
9460: LD_VAR 0 3
9464: NOT
9465: OR
9466: IFFALSE 9470
// exit ;
9468: GO 11120
// if not range then
9470: LD_VAR 0 4
9474: NOT
9475: IFFALSE 9485
// range := 10 ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: LD_INT 10
9484: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9485: LD_ADDR_VAR 0 8
9489: PUSH
9490: LD_INT 81
9492: PUSH
9493: LD_VAR 0 1
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 92
9504: PUSH
9505: LD_VAR 0 2
9509: PUSH
9510: LD_VAR 0 3
9514: PUSH
9515: LD_VAR 0 4
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: PUSH
9526: LD_INT 3
9528: PUSH
9529: LD_INT 21
9531: PUSH
9532: LD_INT 3
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: LIST
9547: PPUSH
9548: CALL_OW 69
9552: ST_TO_ADDR
// if not tmp then
9553: LD_VAR 0 8
9557: NOT
9558: IFFALSE 9562
// exit ;
9560: GO 11120
// for i in tmp do
9562: LD_ADDR_VAR 0 6
9566: PUSH
9567: LD_VAR 0 8
9571: PUSH
9572: FOR_IN
9573: IFFALSE 11095
// begin points := [ 0 , 0 , 0 ] ;
9575: LD_ADDR_VAR 0 9
9579: PUSH
9580: LD_INT 0
9582: PUSH
9583: LD_INT 0
9585: PUSH
9586: LD_INT 0
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: ST_TO_ADDR
// bpoints := 1 ;
9594: LD_ADDR_VAR 0 10
9598: PUSH
9599: LD_INT 1
9601: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9602: LD_VAR 0 6
9606: PPUSH
9607: CALL_OW 247
9611: PUSH
9612: LD_INT 1
9614: DOUBLE
9615: EQUAL
9616: IFTRUE 9620
9618: GO 10198
9620: POP
// begin if GetClass ( i ) = 1 then
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 257
9630: PUSH
9631: LD_INT 1
9633: EQUAL
9634: IFFALSE 9655
// points := [ 10 , 5 , 3 ] ;
9636: LD_ADDR_VAR 0 9
9640: PUSH
9641: LD_INT 10
9643: PUSH
9644: LD_INT 5
9646: PUSH
9647: LD_INT 3
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9655: LD_VAR 0 6
9659: PPUSH
9660: CALL_OW 257
9664: PUSH
9665: LD_INT 2
9667: PUSH
9668: LD_INT 3
9670: PUSH
9671: LD_INT 4
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: LIST
9678: IN
9679: IFFALSE 9700
// points := [ 3 , 2 , 1 ] ;
9681: LD_ADDR_VAR 0 9
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: LD_INT 2
9691: PUSH
9692: LD_INT 1
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9700: LD_VAR 0 6
9704: PPUSH
9705: CALL_OW 257
9709: PUSH
9710: LD_INT 5
9712: EQUAL
9713: IFFALSE 9734
// points := [ 130 , 5 , 2 ] ;
9715: LD_ADDR_VAR 0 9
9719: PUSH
9720: LD_INT 130
9722: PUSH
9723: LD_INT 5
9725: PUSH
9726: LD_INT 2
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9734: LD_VAR 0 6
9738: PPUSH
9739: CALL_OW 257
9743: PUSH
9744: LD_INT 8
9746: EQUAL
9747: IFFALSE 9768
// points := [ 35 , 35 , 30 ] ;
9749: LD_ADDR_VAR 0 9
9753: PUSH
9754: LD_INT 35
9756: PUSH
9757: LD_INT 35
9759: PUSH
9760: LD_INT 30
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9768: LD_VAR 0 6
9772: PPUSH
9773: CALL_OW 257
9777: PUSH
9778: LD_INT 9
9780: EQUAL
9781: IFFALSE 9802
// points := [ 20 , 55 , 40 ] ;
9783: LD_ADDR_VAR 0 9
9787: PUSH
9788: LD_INT 20
9790: PUSH
9791: LD_INT 55
9793: PUSH
9794: LD_INT 40
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9802: LD_VAR 0 6
9806: PPUSH
9807: CALL_OW 257
9811: PUSH
9812: LD_INT 12
9814: PUSH
9815: LD_INT 16
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: IN
9822: IFFALSE 9843
// points := [ 5 , 3 , 2 ] ;
9824: LD_ADDR_VAR 0 9
9828: PUSH
9829: LD_INT 5
9831: PUSH
9832: LD_INT 3
9834: PUSH
9835: LD_INT 2
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: LIST
9842: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9843: LD_VAR 0 6
9847: PPUSH
9848: CALL_OW 257
9852: PUSH
9853: LD_INT 17
9855: EQUAL
9856: IFFALSE 9877
// points := [ 100 , 50 , 75 ] ;
9858: LD_ADDR_VAR 0 9
9862: PUSH
9863: LD_INT 100
9865: PUSH
9866: LD_INT 50
9868: PUSH
9869: LD_INT 75
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9877: LD_VAR 0 6
9881: PPUSH
9882: CALL_OW 257
9886: PUSH
9887: LD_INT 15
9889: EQUAL
9890: IFFALSE 9911
// points := [ 10 , 5 , 3 ] ;
9892: LD_ADDR_VAR 0 9
9896: PUSH
9897: LD_INT 10
9899: PUSH
9900: LD_INT 5
9902: PUSH
9903: LD_INT 3
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9911: LD_VAR 0 6
9915: PPUSH
9916: CALL_OW 257
9920: PUSH
9921: LD_INT 14
9923: EQUAL
9924: IFFALSE 9945
// points := [ 10 , 0 , 0 ] ;
9926: LD_ADDR_VAR 0 9
9930: PUSH
9931: LD_INT 10
9933: PUSH
9934: LD_INT 0
9936: PUSH
9937: LD_INT 0
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: LIST
9944: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9945: LD_VAR 0 6
9949: PPUSH
9950: CALL_OW 257
9954: PUSH
9955: LD_INT 11
9957: EQUAL
9958: IFFALSE 9979
// points := [ 30 , 10 , 5 ] ;
9960: LD_ADDR_VAR 0 9
9964: PUSH
9965: LD_INT 30
9967: PUSH
9968: LD_INT 10
9970: PUSH
9971: LD_INT 5
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9979: LD_VAR 0 1
9983: PPUSH
9984: LD_INT 5
9986: PPUSH
9987: CALL_OW 321
9991: PUSH
9992: LD_INT 2
9994: EQUAL
9995: IFFALSE 10012
// bpoints := bpoints * 1.8 ;
9997: LD_ADDR_VAR 0 10
10001: PUSH
10002: LD_VAR 0 10
10006: PUSH
10007: LD_REAL  1.80000000000000E+0000
10010: MUL
10011: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10012: LD_VAR 0 6
10016: PPUSH
10017: CALL_OW 257
10021: PUSH
10022: LD_INT 1
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 3
10030: PUSH
10031: LD_INT 4
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: IN
10040: PUSH
10041: LD_VAR 0 1
10045: PPUSH
10046: LD_INT 51
10048: PPUSH
10049: CALL_OW 321
10053: PUSH
10054: LD_INT 2
10056: EQUAL
10057: AND
10058: IFFALSE 10075
// bpoints := bpoints * 1.2 ;
10060: LD_ADDR_VAR 0 10
10064: PUSH
10065: LD_VAR 0 10
10069: PUSH
10070: LD_REAL  1.20000000000000E+0000
10073: MUL
10074: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10075: LD_VAR 0 6
10079: PPUSH
10080: CALL_OW 257
10084: PUSH
10085: LD_INT 5
10087: PUSH
10088: LD_INT 7
10090: PUSH
10091: LD_INT 9
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: LIST
10098: IN
10099: PUSH
10100: LD_VAR 0 1
10104: PPUSH
10105: LD_INT 52
10107: PPUSH
10108: CALL_OW 321
10112: PUSH
10113: LD_INT 2
10115: EQUAL
10116: AND
10117: IFFALSE 10134
// bpoints := bpoints * 1.5 ;
10119: LD_ADDR_VAR 0 10
10123: PUSH
10124: LD_VAR 0 10
10128: PUSH
10129: LD_REAL  1.50000000000000E+0000
10132: MUL
10133: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10134: LD_VAR 0 1
10138: PPUSH
10139: LD_INT 66
10141: PPUSH
10142: CALL_OW 321
10146: PUSH
10147: LD_INT 2
10149: EQUAL
10150: IFFALSE 10167
// bpoints := bpoints * 1.1 ;
10152: LD_ADDR_VAR 0 10
10156: PUSH
10157: LD_VAR 0 10
10161: PUSH
10162: LD_REAL  1.10000000000000E+0000
10165: MUL
10166: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10167: LD_ADDR_VAR 0 10
10171: PUSH
10172: LD_VAR 0 10
10176: PUSH
10177: LD_VAR 0 6
10181: PPUSH
10182: LD_INT 1
10184: PPUSH
10185: CALL_OW 259
10189: PUSH
10190: LD_REAL  1.15000000000000E+0000
10193: MUL
10194: MUL
10195: ST_TO_ADDR
// end ; unit_vehicle :
10196: GO 11024
10198: LD_INT 2
10200: DOUBLE
10201: EQUAL
10202: IFTRUE 10206
10204: GO 11012
10206: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10207: LD_VAR 0 6
10211: PPUSH
10212: CALL_OW 264
10216: PUSH
10217: LD_INT 2
10219: PUSH
10220: LD_INT 42
10222: PUSH
10223: LD_INT 24
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: IN
10231: IFFALSE 10252
// points := [ 25 , 5 , 3 ] ;
10233: LD_ADDR_VAR 0 9
10237: PUSH
10238: LD_INT 25
10240: PUSH
10241: LD_INT 5
10243: PUSH
10244: LD_INT 3
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10252: LD_VAR 0 6
10256: PPUSH
10257: CALL_OW 264
10261: PUSH
10262: LD_INT 4
10264: PUSH
10265: LD_INT 43
10267: PUSH
10268: LD_INT 25
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: IN
10276: IFFALSE 10297
// points := [ 40 , 15 , 5 ] ;
10278: LD_ADDR_VAR 0 9
10282: PUSH
10283: LD_INT 40
10285: PUSH
10286: LD_INT 15
10288: PUSH
10289: LD_INT 5
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: LIST
10296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10297: LD_VAR 0 6
10301: PPUSH
10302: CALL_OW 264
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: LD_INT 23
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: IN
10317: IFFALSE 10338
// points := [ 7 , 25 , 8 ] ;
10319: LD_ADDR_VAR 0 9
10323: PUSH
10324: LD_INT 7
10326: PUSH
10327: LD_INT 25
10329: PUSH
10330: LD_INT 8
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: LIST
10337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10338: LD_VAR 0 6
10342: PPUSH
10343: CALL_OW 264
10347: PUSH
10348: LD_INT 5
10350: PUSH
10351: LD_INT 27
10353: PUSH
10354: LD_INT 44
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: IN
10362: IFFALSE 10383
// points := [ 14 , 50 , 16 ] ;
10364: LD_ADDR_VAR 0 9
10368: PUSH
10369: LD_INT 14
10371: PUSH
10372: LD_INT 50
10374: PUSH
10375: LD_INT 16
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: LIST
10382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10383: LD_VAR 0 6
10387: PPUSH
10388: CALL_OW 264
10392: PUSH
10393: LD_INT 6
10395: PUSH
10396: LD_INT 46
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: IN
10403: IFFALSE 10424
// points := [ 32 , 120 , 70 ] ;
10405: LD_ADDR_VAR 0 9
10409: PUSH
10410: LD_INT 32
10412: PUSH
10413: LD_INT 120
10415: PUSH
10416: LD_INT 70
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: LIST
10423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10424: LD_VAR 0 6
10428: PPUSH
10429: CALL_OW 264
10433: PUSH
10434: LD_INT 7
10436: PUSH
10437: LD_INT 28
10439: PUSH
10440: LD_INT 45
10442: PUSH
10443: LD_INT 92
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: IN
10452: IFFALSE 10473
// points := [ 35 , 20 , 45 ] ;
10454: LD_ADDR_VAR 0 9
10458: PUSH
10459: LD_INT 35
10461: PUSH
10462: LD_INT 20
10464: PUSH
10465: LD_INT 45
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10473: LD_VAR 0 6
10477: PPUSH
10478: CALL_OW 264
10482: PUSH
10483: LD_INT 47
10485: PUSH
10486: EMPTY
10487: LIST
10488: IN
10489: IFFALSE 10510
// points := [ 67 , 45 , 75 ] ;
10491: LD_ADDR_VAR 0 9
10495: PUSH
10496: LD_INT 67
10498: PUSH
10499: LD_INT 45
10501: PUSH
10502: LD_INT 75
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10510: LD_VAR 0 6
10514: PPUSH
10515: CALL_OW 264
10519: PUSH
10520: LD_INT 26
10522: PUSH
10523: EMPTY
10524: LIST
10525: IN
10526: IFFALSE 10547
// points := [ 120 , 30 , 80 ] ;
10528: LD_ADDR_VAR 0 9
10532: PUSH
10533: LD_INT 120
10535: PUSH
10536: LD_INT 30
10538: PUSH
10539: LD_INT 80
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: LIST
10546: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10547: LD_VAR 0 6
10551: PPUSH
10552: CALL_OW 264
10556: PUSH
10557: LD_INT 22
10559: PUSH
10560: EMPTY
10561: LIST
10562: IN
10563: IFFALSE 10584
// points := [ 40 , 1 , 1 ] ;
10565: LD_ADDR_VAR 0 9
10569: PUSH
10570: LD_INT 40
10572: PUSH
10573: LD_INT 1
10575: PUSH
10576: LD_INT 1
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: LIST
10583: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10584: LD_VAR 0 6
10588: PPUSH
10589: CALL_OW 264
10593: PUSH
10594: LD_INT 29
10596: PUSH
10597: EMPTY
10598: LIST
10599: IN
10600: IFFALSE 10621
// points := [ 70 , 200 , 400 ] ;
10602: LD_ADDR_VAR 0 9
10606: PUSH
10607: LD_INT 70
10609: PUSH
10610: LD_INT 200
10612: PUSH
10613: LD_INT 400
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10621: LD_VAR 0 6
10625: PPUSH
10626: CALL_OW 264
10630: PUSH
10631: LD_INT 14
10633: PUSH
10634: LD_INT 53
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: IN
10641: IFFALSE 10662
// points := [ 40 , 10 , 20 ] ;
10643: LD_ADDR_VAR 0 9
10647: PUSH
10648: LD_INT 40
10650: PUSH
10651: LD_INT 10
10653: PUSH
10654: LD_INT 20
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10662: LD_VAR 0 6
10666: PPUSH
10667: CALL_OW 264
10671: PUSH
10672: LD_INT 9
10674: PUSH
10675: EMPTY
10676: LIST
10677: IN
10678: IFFALSE 10699
// points := [ 5 , 70 , 20 ] ;
10680: LD_ADDR_VAR 0 9
10684: PUSH
10685: LD_INT 5
10687: PUSH
10688: LD_INT 70
10690: PUSH
10691: LD_INT 20
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10699: LD_VAR 0 6
10703: PPUSH
10704: CALL_OW 264
10708: PUSH
10709: LD_INT 10
10711: PUSH
10712: EMPTY
10713: LIST
10714: IN
10715: IFFALSE 10736
// points := [ 35 , 110 , 70 ] ;
10717: LD_ADDR_VAR 0 9
10721: PUSH
10722: LD_INT 35
10724: PUSH
10725: LD_INT 110
10727: PUSH
10728: LD_INT 70
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: LIST
10735: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10736: LD_VAR 0 6
10740: PPUSH
10741: CALL_OW 265
10745: PUSH
10746: LD_INT 25
10748: EQUAL
10749: IFFALSE 10770
// points := [ 80 , 65 , 100 ] ;
10751: LD_ADDR_VAR 0 9
10755: PUSH
10756: LD_INT 80
10758: PUSH
10759: LD_INT 65
10761: PUSH
10762: LD_INT 100
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: LIST
10769: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10770: LD_VAR 0 6
10774: PPUSH
10775: CALL_OW 263
10779: PUSH
10780: LD_INT 1
10782: EQUAL
10783: IFFALSE 10818
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10785: LD_ADDR_VAR 0 10
10789: PUSH
10790: LD_VAR 0 10
10794: PUSH
10795: LD_VAR 0 6
10799: PPUSH
10800: CALL_OW 311
10804: PPUSH
10805: LD_INT 3
10807: PPUSH
10808: CALL_OW 259
10812: PUSH
10813: LD_INT 4
10815: MUL
10816: MUL
10817: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10818: LD_VAR 0 6
10822: PPUSH
10823: CALL_OW 263
10827: PUSH
10828: LD_INT 2
10830: EQUAL
10831: IFFALSE 10882
// begin j := IsControledBy ( i ) ;
10833: LD_ADDR_VAR 0 7
10837: PUSH
10838: LD_VAR 0 6
10842: PPUSH
10843: CALL_OW 312
10847: ST_TO_ADDR
// if j then
10848: LD_VAR 0 7
10852: IFFALSE 10882
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10854: LD_ADDR_VAR 0 10
10858: PUSH
10859: LD_VAR 0 10
10863: PUSH
10864: LD_VAR 0 7
10868: PPUSH
10869: LD_INT 3
10871: PPUSH
10872: CALL_OW 259
10876: PUSH
10877: LD_INT 3
10879: MUL
10880: MUL
10881: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10882: LD_VAR 0 6
10886: PPUSH
10887: CALL_OW 264
10891: PUSH
10892: LD_INT 5
10894: PUSH
10895: LD_INT 6
10897: PUSH
10898: LD_INT 46
10900: PUSH
10901: LD_INT 44
10903: PUSH
10904: LD_INT 47
10906: PUSH
10907: LD_INT 45
10909: PUSH
10910: LD_INT 28
10912: PUSH
10913: LD_INT 7
10915: PUSH
10916: LD_INT 27
10918: PUSH
10919: LD_INT 29
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: IN
10934: PUSH
10935: LD_VAR 0 1
10939: PPUSH
10940: LD_INT 52
10942: PPUSH
10943: CALL_OW 321
10947: PUSH
10948: LD_INT 2
10950: EQUAL
10951: AND
10952: IFFALSE 10969
// bpoints := bpoints * 1.2 ;
10954: LD_ADDR_VAR 0 10
10958: PUSH
10959: LD_VAR 0 10
10963: PUSH
10964: LD_REAL  1.20000000000000E+0000
10967: MUL
10968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10969: LD_VAR 0 6
10973: PPUSH
10974: CALL_OW 264
10978: PUSH
10979: LD_INT 6
10981: PUSH
10982: LD_INT 46
10984: PUSH
10985: LD_INT 47
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: LIST
10992: IN
10993: IFFALSE 11010
// bpoints := bpoints * 1.2 ;
10995: LD_ADDR_VAR 0 10
10999: PUSH
11000: LD_VAR 0 10
11004: PUSH
11005: LD_REAL  1.20000000000000E+0000
11008: MUL
11009: ST_TO_ADDR
// end ; unit_building :
11010: GO 11024
11012: LD_INT 3
11014: DOUBLE
11015: EQUAL
11016: IFTRUE 11020
11018: GO 11023
11020: POP
// ; end ;
11021: GO 11024
11023: POP
// for j = 1 to 3 do
11024: LD_ADDR_VAR 0 7
11028: PUSH
11029: DOUBLE
11030: LD_INT 1
11032: DEC
11033: ST_TO_ADDR
11034: LD_INT 3
11036: PUSH
11037: FOR_TO
11038: IFFALSE 11091
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11040: LD_ADDR_VAR 0 5
11044: PUSH
11045: LD_VAR 0 5
11049: PPUSH
11050: LD_VAR 0 7
11054: PPUSH
11055: LD_VAR 0 5
11059: PUSH
11060: LD_VAR 0 7
11064: ARRAY
11065: PUSH
11066: LD_VAR 0 9
11070: PUSH
11071: LD_VAR 0 7
11075: ARRAY
11076: PUSH
11077: LD_VAR 0 10
11081: MUL
11082: PLUS
11083: PPUSH
11084: CALL_OW 1
11088: ST_TO_ADDR
11089: GO 11037
11091: POP
11092: POP
// end ;
11093: GO 9572
11095: POP
11096: POP
// result := Replace ( result , 4 , tmp ) ;
11097: LD_ADDR_VAR 0 5
11101: PUSH
11102: LD_VAR 0 5
11106: PPUSH
11107: LD_INT 4
11109: PPUSH
11110: LD_VAR 0 8
11114: PPUSH
11115: CALL_OW 1
11119: ST_TO_ADDR
// end ;
11120: LD_VAR 0 5
11124: RET
// export function DangerAtRange ( unit , range ) ; begin
11125: LD_INT 0
11127: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11128: LD_ADDR_VAR 0 3
11132: PUSH
11133: LD_VAR 0 1
11137: PPUSH
11138: CALL_OW 255
11142: PPUSH
11143: LD_VAR 0 1
11147: PPUSH
11148: CALL_OW 250
11152: PPUSH
11153: LD_VAR 0 1
11157: PPUSH
11158: CALL_OW 251
11162: PPUSH
11163: LD_VAR 0 2
11167: PPUSH
11168: CALL 9424 0 4
11172: ST_TO_ADDR
// end ;
11173: LD_VAR 0 3
11177: RET
// export function DangerInArea ( side , area ) ; begin
11178: LD_INT 0
11180: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11181: LD_ADDR_VAR 0 3
11185: PUSH
11186: LD_VAR 0 2
11190: PPUSH
11191: LD_INT 81
11193: PUSH
11194: LD_VAR 0 1
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PPUSH
11203: CALL_OW 70
11207: ST_TO_ADDR
// end ;
11208: LD_VAR 0 3
11212: RET
// export function IsExtension ( b ) ; begin
11213: LD_INT 0
11215: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11216: LD_ADDR_VAR 0 2
11220: PUSH
11221: LD_VAR 0 1
11225: PUSH
11226: LD_INT 23
11228: PUSH
11229: LD_INT 20
11231: PUSH
11232: LD_INT 22
11234: PUSH
11235: LD_INT 17
11237: PUSH
11238: LD_INT 24
11240: PUSH
11241: LD_INT 21
11243: PUSH
11244: LD_INT 19
11246: PUSH
11247: LD_INT 16
11249: PUSH
11250: LD_INT 25
11252: PUSH
11253: LD_INT 18
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: IN
11268: ST_TO_ADDR
// end ;
11269: LD_VAR 0 2
11273: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11274: LD_INT 0
11276: PPUSH
11277: PPUSH
11278: PPUSH
// result := [ ] ;
11279: LD_ADDR_VAR 0 4
11283: PUSH
11284: EMPTY
11285: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11286: LD_ADDR_VAR 0 5
11290: PUSH
11291: LD_VAR 0 2
11295: PPUSH
11296: LD_INT 21
11298: PUSH
11299: LD_INT 3
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PPUSH
11306: CALL_OW 70
11310: ST_TO_ADDR
// if not tmp then
11311: LD_VAR 0 5
11315: NOT
11316: IFFALSE 11320
// exit ;
11318: GO 11384
// if checkLink then
11320: LD_VAR 0 3
11324: IFFALSE 11374
// begin for i in tmp do
11326: LD_ADDR_VAR 0 6
11330: PUSH
11331: LD_VAR 0 5
11335: PUSH
11336: FOR_IN
11337: IFFALSE 11372
// if GetBase ( i ) <> base then
11339: LD_VAR 0 6
11343: PPUSH
11344: CALL_OW 274
11348: PUSH
11349: LD_VAR 0 1
11353: NONEQUAL
11354: IFFALSE 11370
// ComLinkToBase ( base , i ) ;
11356: LD_VAR 0 1
11360: PPUSH
11361: LD_VAR 0 6
11365: PPUSH
11366: CALL_OW 169
11370: GO 11336
11372: POP
11373: POP
// end ; result := tmp ;
11374: LD_ADDR_VAR 0 4
11378: PUSH
11379: LD_VAR 0 5
11383: ST_TO_ADDR
// end ;
11384: LD_VAR 0 4
11388: RET
// export function ComComplete ( units , b ) ; var i ; begin
11389: LD_INT 0
11391: PPUSH
11392: PPUSH
// if not units then
11393: LD_VAR 0 1
11397: NOT
11398: IFFALSE 11402
// exit ;
11400: GO 11492
// for i in units do
11402: LD_ADDR_VAR 0 4
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: FOR_IN
11413: IFFALSE 11490
// if BuildingStatus ( b ) = bs_build then
11415: LD_VAR 0 2
11419: PPUSH
11420: CALL_OW 461
11424: PUSH
11425: LD_INT 1
11427: EQUAL
11428: IFFALSE 11488
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11430: LD_VAR 0 4
11434: PPUSH
11435: LD_STRING h
11437: PUSH
11438: LD_VAR 0 2
11442: PPUSH
11443: CALL_OW 250
11447: PUSH
11448: LD_VAR 0 2
11452: PPUSH
11453: CALL_OW 251
11457: PUSH
11458: LD_VAR 0 2
11462: PUSH
11463: LD_INT 0
11465: PUSH
11466: LD_INT 0
11468: PUSH
11469: LD_INT 0
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: PUSH
11481: EMPTY
11482: LIST
11483: PPUSH
11484: CALL_OW 446
11488: GO 11412
11490: POP
11491: POP
// end ;
11492: LD_VAR 0 3
11496: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11497: LD_INT 0
11499: PPUSH
11500: PPUSH
11501: PPUSH
11502: PPUSH
11503: PPUSH
11504: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11505: LD_VAR 0 1
11509: NOT
11510: PUSH
11511: LD_VAR 0 1
11515: PPUSH
11516: CALL_OW 263
11520: PUSH
11521: LD_INT 2
11523: NONEQUAL
11524: OR
11525: IFFALSE 11529
// exit ;
11527: GO 11845
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11529: LD_ADDR_VAR 0 6
11533: PUSH
11534: LD_INT 22
11536: PUSH
11537: LD_VAR 0 1
11541: PPUSH
11542: CALL_OW 255
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 2
11553: PUSH
11554: LD_INT 30
11556: PUSH
11557: LD_INT 36
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 34
11566: PUSH
11567: LD_INT 31
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PPUSH
11583: CALL_OW 69
11587: ST_TO_ADDR
// if not tmp then
11588: LD_VAR 0 6
11592: NOT
11593: IFFALSE 11597
// exit ;
11595: GO 11845
// result := [ ] ;
11597: LD_ADDR_VAR 0 2
11601: PUSH
11602: EMPTY
11603: ST_TO_ADDR
// for i in tmp do
11604: LD_ADDR_VAR 0 3
11608: PUSH
11609: LD_VAR 0 6
11613: PUSH
11614: FOR_IN
11615: IFFALSE 11686
// begin t := UnitsInside ( i ) ;
11617: LD_ADDR_VAR 0 4
11621: PUSH
11622: LD_VAR 0 3
11626: PPUSH
11627: CALL_OW 313
11631: ST_TO_ADDR
// if t then
11632: LD_VAR 0 4
11636: IFFALSE 11684
// for j in t do
11638: LD_ADDR_VAR 0 7
11642: PUSH
11643: LD_VAR 0 4
11647: PUSH
11648: FOR_IN
11649: IFFALSE 11682
// result := Replace ( result , result + 1 , j ) ;
11651: LD_ADDR_VAR 0 2
11655: PUSH
11656: LD_VAR 0 2
11660: PPUSH
11661: LD_VAR 0 2
11665: PUSH
11666: LD_INT 1
11668: PLUS
11669: PPUSH
11670: LD_VAR 0 7
11674: PPUSH
11675: CALL_OW 1
11679: ST_TO_ADDR
11680: GO 11648
11682: POP
11683: POP
// end ;
11684: GO 11614
11686: POP
11687: POP
// if not result then
11688: LD_VAR 0 2
11692: NOT
11693: IFFALSE 11697
// exit ;
11695: GO 11845
// mech := result [ 1 ] ;
11697: LD_ADDR_VAR 0 5
11701: PUSH
11702: LD_VAR 0 2
11706: PUSH
11707: LD_INT 1
11709: ARRAY
11710: ST_TO_ADDR
// if result > 1 then
11711: LD_VAR 0 2
11715: PUSH
11716: LD_INT 1
11718: GREATER
11719: IFFALSE 11831
// begin for i = 2 to result do
11721: LD_ADDR_VAR 0 3
11725: PUSH
11726: DOUBLE
11727: LD_INT 2
11729: DEC
11730: ST_TO_ADDR
11731: LD_VAR 0 2
11735: PUSH
11736: FOR_TO
11737: IFFALSE 11829
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11739: LD_ADDR_VAR 0 4
11743: PUSH
11744: LD_VAR 0 2
11748: PUSH
11749: LD_VAR 0 3
11753: ARRAY
11754: PPUSH
11755: LD_INT 3
11757: PPUSH
11758: CALL_OW 259
11762: PUSH
11763: LD_VAR 0 2
11767: PUSH
11768: LD_VAR 0 3
11772: ARRAY
11773: PPUSH
11774: CALL_OW 432
11778: MINUS
11779: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11780: LD_VAR 0 4
11784: PUSH
11785: LD_VAR 0 5
11789: PPUSH
11790: LD_INT 3
11792: PPUSH
11793: CALL_OW 259
11797: PUSH
11798: LD_VAR 0 5
11802: PPUSH
11803: CALL_OW 432
11807: MINUS
11808: GREATEREQUAL
11809: IFFALSE 11827
// mech := result [ i ] ;
11811: LD_ADDR_VAR 0 5
11815: PUSH
11816: LD_VAR 0 2
11820: PUSH
11821: LD_VAR 0 3
11825: ARRAY
11826: ST_TO_ADDR
// end ;
11827: GO 11736
11829: POP
11830: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11831: LD_VAR 0 1
11835: PPUSH
11836: LD_VAR 0 5
11840: PPUSH
11841: CALL_OW 135
// end ;
11845: LD_VAR 0 2
11849: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11850: LD_INT 0
11852: PPUSH
11853: PPUSH
11854: PPUSH
11855: PPUSH
11856: PPUSH
11857: PPUSH
11858: PPUSH
11859: PPUSH
11860: PPUSH
11861: PPUSH
11862: PPUSH
11863: PPUSH
11864: PPUSH
// result := [ ] ;
11865: LD_ADDR_VAR 0 7
11869: PUSH
11870: EMPTY
11871: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11872: LD_VAR 0 1
11876: PPUSH
11877: CALL_OW 266
11881: PUSH
11882: LD_INT 0
11884: PUSH
11885: LD_INT 1
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: IN
11892: NOT
11893: IFFALSE 11897
// exit ;
11895: GO 13531
// if name then
11897: LD_VAR 0 3
11901: IFFALSE 11917
// SetBName ( base_dep , name ) ;
11903: LD_VAR 0 1
11907: PPUSH
11908: LD_VAR 0 3
11912: PPUSH
11913: CALL_OW 500
// base := GetBase ( base_dep ) ;
11917: LD_ADDR_VAR 0 15
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL_OW 274
11931: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11932: LD_ADDR_VAR 0 16
11936: PUSH
11937: LD_VAR 0 1
11941: PPUSH
11942: CALL_OW 255
11946: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11947: LD_ADDR_VAR 0 17
11951: PUSH
11952: LD_VAR 0 1
11956: PPUSH
11957: CALL_OW 248
11961: ST_TO_ADDR
// if sources then
11962: LD_VAR 0 5
11966: IFFALSE 12013
// for i = 1 to 3 do
11968: LD_ADDR_VAR 0 8
11972: PUSH
11973: DOUBLE
11974: LD_INT 1
11976: DEC
11977: ST_TO_ADDR
11978: LD_INT 3
11980: PUSH
11981: FOR_TO
11982: IFFALSE 12011
// AddResourceType ( base , i , sources [ i ] ) ;
11984: LD_VAR 0 15
11988: PPUSH
11989: LD_VAR 0 8
11993: PPUSH
11994: LD_VAR 0 5
11998: PUSH
11999: LD_VAR 0 8
12003: ARRAY
12004: PPUSH
12005: CALL_OW 276
12009: GO 11981
12011: POP
12012: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12013: LD_ADDR_VAR 0 18
12017: PUSH
12018: LD_VAR 0 15
12022: PPUSH
12023: LD_VAR 0 2
12027: PPUSH
12028: LD_INT 1
12030: PPUSH
12031: CALL 11274 0 3
12035: ST_TO_ADDR
// InitHc ;
12036: CALL_OW 19
// InitUc ;
12040: CALL_OW 18
// uc_side := side ;
12044: LD_ADDR_OWVAR 20
12048: PUSH
12049: LD_VAR 0 16
12053: ST_TO_ADDR
// uc_nation := nation ;
12054: LD_ADDR_OWVAR 21
12058: PUSH
12059: LD_VAR 0 17
12063: ST_TO_ADDR
// if buildings then
12064: LD_VAR 0 18
12068: IFFALSE 13390
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12070: LD_ADDR_VAR 0 19
12074: PUSH
12075: LD_VAR 0 18
12079: PPUSH
12080: LD_INT 2
12082: PUSH
12083: LD_INT 30
12085: PUSH
12086: LD_INT 29
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 30
12095: PUSH
12096: LD_INT 30
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: PPUSH
12108: CALL_OW 72
12112: ST_TO_ADDR
// if tmp then
12113: LD_VAR 0 19
12117: IFFALSE 12165
// for i in tmp do
12119: LD_ADDR_VAR 0 8
12123: PUSH
12124: LD_VAR 0 19
12128: PUSH
12129: FOR_IN
12130: IFFALSE 12163
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12132: LD_VAR 0 8
12136: PPUSH
12137: CALL_OW 250
12141: PPUSH
12142: LD_VAR 0 8
12146: PPUSH
12147: CALL_OW 251
12151: PPUSH
12152: LD_VAR 0 16
12156: PPUSH
12157: CALL_OW 441
12161: GO 12129
12163: POP
12164: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12165: LD_VAR 0 18
12169: PPUSH
12170: LD_INT 2
12172: PUSH
12173: LD_INT 30
12175: PUSH
12176: LD_INT 32
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: LD_INT 30
12185: PUSH
12186: LD_INT 33
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: LIST
12197: PPUSH
12198: CALL_OW 72
12202: IFFALSE 12290
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12204: LD_ADDR_VAR 0 8
12208: PUSH
12209: LD_VAR 0 18
12213: PPUSH
12214: LD_INT 2
12216: PUSH
12217: LD_INT 30
12219: PUSH
12220: LD_INT 32
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 30
12229: PUSH
12230: LD_INT 33
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 72
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12288
// begin if not GetBWeapon ( i ) then
12250: LD_VAR 0 8
12254: PPUSH
12255: CALL_OW 269
12259: NOT
12260: IFFALSE 12286
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12262: LD_VAR 0 8
12266: PPUSH
12267: LD_VAR 0 8
12271: PPUSH
12272: LD_VAR 0 2
12276: PPUSH
12277: CALL 13536 0 2
12281: PPUSH
12282: CALL_OW 431
// end ;
12286: GO 12247
12288: POP
12289: POP
// end ; for i = 1 to personel do
12290: LD_ADDR_VAR 0 8
12294: PUSH
12295: DOUBLE
12296: LD_INT 1
12298: DEC
12299: ST_TO_ADDR
12300: LD_VAR 0 6
12304: PUSH
12305: FOR_TO
12306: IFFALSE 13370
// begin if i > 4 then
12308: LD_VAR 0 8
12312: PUSH
12313: LD_INT 4
12315: GREATER
12316: IFFALSE 12320
// break ;
12318: GO 13370
// case i of 1 :
12320: LD_VAR 0 8
12324: PUSH
12325: LD_INT 1
12327: DOUBLE
12328: EQUAL
12329: IFTRUE 12333
12331: GO 12413
12333: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12334: LD_ADDR_VAR 0 12
12338: PUSH
12339: LD_VAR 0 18
12343: PPUSH
12344: LD_INT 22
12346: PUSH
12347: LD_VAR 0 16
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 58
12358: PUSH
12359: EMPTY
12360: LIST
12361: PUSH
12362: LD_INT 2
12364: PUSH
12365: LD_INT 30
12367: PUSH
12368: LD_INT 32
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 30
12377: PUSH
12378: LD_INT 4
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 30
12387: PUSH
12388: LD_INT 5
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: LIST
12405: PPUSH
12406: CALL_OW 72
12410: ST_TO_ADDR
12411: GO 12635
12413: LD_INT 2
12415: DOUBLE
12416: EQUAL
12417: IFTRUE 12421
12419: GO 12483
12421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12422: LD_ADDR_VAR 0 12
12426: PUSH
12427: LD_VAR 0 18
12431: PPUSH
12432: LD_INT 22
12434: PUSH
12435: LD_VAR 0 16
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 2
12446: PUSH
12447: LD_INT 30
12449: PUSH
12450: LD_INT 0
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 30
12459: PUSH
12460: LD_INT 1
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PPUSH
12476: CALL_OW 72
12480: ST_TO_ADDR
12481: GO 12635
12483: LD_INT 3
12485: DOUBLE
12486: EQUAL
12487: IFTRUE 12491
12489: GO 12553
12491: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12492: LD_ADDR_VAR 0 12
12496: PUSH
12497: LD_VAR 0 18
12501: PPUSH
12502: LD_INT 22
12504: PUSH
12505: LD_VAR 0 16
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: LD_INT 30
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 30
12529: PUSH
12530: LD_INT 3
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PPUSH
12546: CALL_OW 72
12550: ST_TO_ADDR
12551: GO 12635
12553: LD_INT 4
12555: DOUBLE
12556: EQUAL
12557: IFTRUE 12561
12559: GO 12634
12561: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12562: LD_ADDR_VAR 0 12
12566: PUSH
12567: LD_VAR 0 18
12571: PPUSH
12572: LD_INT 22
12574: PUSH
12575: LD_VAR 0 16
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 2
12586: PUSH
12587: LD_INT 30
12589: PUSH
12590: LD_INT 6
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 30
12599: PUSH
12600: LD_INT 7
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 30
12609: PUSH
12610: LD_INT 8
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PPUSH
12627: CALL_OW 72
12631: ST_TO_ADDR
12632: GO 12635
12634: POP
// if i = 1 then
12635: LD_VAR 0 8
12639: PUSH
12640: LD_INT 1
12642: EQUAL
12643: IFFALSE 12754
// begin tmp := [ ] ;
12645: LD_ADDR_VAR 0 19
12649: PUSH
12650: EMPTY
12651: ST_TO_ADDR
// for j in f do
12652: LD_ADDR_VAR 0 9
12656: PUSH
12657: LD_VAR 0 12
12661: PUSH
12662: FOR_IN
12663: IFFALSE 12736
// if GetBType ( j ) = b_bunker then
12665: LD_VAR 0 9
12669: PPUSH
12670: CALL_OW 266
12674: PUSH
12675: LD_INT 32
12677: EQUAL
12678: IFFALSE 12705
// tmp := Insert ( tmp , 1 , j ) else
12680: LD_ADDR_VAR 0 19
12684: PUSH
12685: LD_VAR 0 19
12689: PPUSH
12690: LD_INT 1
12692: PPUSH
12693: LD_VAR 0 9
12697: PPUSH
12698: CALL_OW 2
12702: ST_TO_ADDR
12703: GO 12734
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12705: LD_ADDR_VAR 0 19
12709: PUSH
12710: LD_VAR 0 19
12714: PPUSH
12715: LD_VAR 0 19
12719: PUSH
12720: LD_INT 1
12722: PLUS
12723: PPUSH
12724: LD_VAR 0 9
12728: PPUSH
12729: CALL_OW 2
12733: ST_TO_ADDR
12734: GO 12662
12736: POP
12737: POP
// if tmp then
12738: LD_VAR 0 19
12742: IFFALSE 12754
// f := tmp ;
12744: LD_ADDR_VAR 0 12
12748: PUSH
12749: LD_VAR 0 19
12753: ST_TO_ADDR
// end ; x := personel [ i ] ;
12754: LD_ADDR_VAR 0 13
12758: PUSH
12759: LD_VAR 0 6
12763: PUSH
12764: LD_VAR 0 8
12768: ARRAY
12769: ST_TO_ADDR
// if x = - 1 then
12770: LD_VAR 0 13
12774: PUSH
12775: LD_INT 1
12777: NEG
12778: EQUAL
12779: IFFALSE 12988
// begin for j in f do
12781: LD_ADDR_VAR 0 9
12785: PUSH
12786: LD_VAR 0 12
12790: PUSH
12791: FOR_IN
12792: IFFALSE 12984
// repeat InitHc ;
12794: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12798: LD_VAR 0 9
12802: PPUSH
12803: CALL_OW 266
12807: PUSH
12808: LD_INT 5
12810: EQUAL
12811: IFFALSE 12881
// begin if UnitsInside ( j ) < 3 then
12813: LD_VAR 0 9
12817: PPUSH
12818: CALL_OW 313
12822: PUSH
12823: LD_INT 3
12825: LESS
12826: IFFALSE 12862
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12828: LD_INT 0
12830: PPUSH
12831: LD_INT 5
12833: PUSH
12834: LD_INT 8
12836: PUSH
12837: LD_INT 9
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_VAR 0 17
12849: ARRAY
12850: PPUSH
12851: LD_VAR 0 4
12855: PPUSH
12856: CALL_OW 380
12860: GO 12879
// PrepareHuman ( false , i , skill ) ;
12862: LD_INT 0
12864: PPUSH
12865: LD_VAR 0 8
12869: PPUSH
12870: LD_VAR 0 4
12874: PPUSH
12875: CALL_OW 380
// end else
12879: GO 12898
// PrepareHuman ( false , i , skill ) ;
12881: LD_INT 0
12883: PPUSH
12884: LD_VAR 0 8
12888: PPUSH
12889: LD_VAR 0 4
12893: PPUSH
12894: CALL_OW 380
// un := CreateHuman ;
12898: LD_ADDR_VAR 0 14
12902: PUSH
12903: CALL_OW 44
12907: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12908: LD_ADDR_VAR 0 7
12912: PUSH
12913: LD_VAR 0 7
12917: PPUSH
12918: LD_INT 1
12920: PPUSH
12921: LD_VAR 0 14
12925: PPUSH
12926: CALL_OW 2
12930: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12931: LD_VAR 0 14
12935: PPUSH
12936: LD_VAR 0 9
12940: PPUSH
12941: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12945: LD_VAR 0 9
12949: PPUSH
12950: CALL_OW 313
12954: PUSH
12955: LD_INT 6
12957: EQUAL
12958: PUSH
12959: LD_VAR 0 9
12963: PPUSH
12964: CALL_OW 266
12968: PUSH
12969: LD_INT 32
12971: PUSH
12972: LD_INT 31
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: IN
12979: OR
12980: IFFALSE 12794
12982: GO 12791
12984: POP
12985: POP
// end else
12986: GO 13368
// for j = 1 to x do
12988: LD_ADDR_VAR 0 9
12992: PUSH
12993: DOUBLE
12994: LD_INT 1
12996: DEC
12997: ST_TO_ADDR
12998: LD_VAR 0 13
13002: PUSH
13003: FOR_TO
13004: IFFALSE 13366
// begin InitHc ;
13006: CALL_OW 19
// if not f then
13010: LD_VAR 0 12
13014: NOT
13015: IFFALSE 13104
// begin PrepareHuman ( false , i , skill ) ;
13017: LD_INT 0
13019: PPUSH
13020: LD_VAR 0 8
13024: PPUSH
13025: LD_VAR 0 4
13029: PPUSH
13030: CALL_OW 380
// un := CreateHuman ;
13034: LD_ADDR_VAR 0 14
13038: PUSH
13039: CALL_OW 44
13043: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13044: LD_ADDR_VAR 0 7
13048: PUSH
13049: LD_VAR 0 7
13053: PPUSH
13054: LD_INT 1
13056: PPUSH
13057: LD_VAR 0 14
13061: PPUSH
13062: CALL_OW 2
13066: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13067: LD_VAR 0 14
13071: PPUSH
13072: LD_VAR 0 1
13076: PPUSH
13077: CALL_OW 250
13081: PPUSH
13082: LD_VAR 0 1
13086: PPUSH
13087: CALL_OW 251
13091: PPUSH
13092: LD_INT 10
13094: PPUSH
13095: LD_INT 0
13097: PPUSH
13098: CALL_OW 50
// continue ;
13102: GO 13003
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13104: LD_VAR 0 12
13108: PUSH
13109: LD_INT 1
13111: ARRAY
13112: PPUSH
13113: CALL_OW 313
13117: PUSH
13118: LD_VAR 0 12
13122: PUSH
13123: LD_INT 1
13125: ARRAY
13126: PPUSH
13127: CALL_OW 266
13131: PUSH
13132: LD_INT 32
13134: PUSH
13135: LD_INT 31
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: IN
13142: AND
13143: PUSH
13144: LD_VAR 0 12
13148: PUSH
13149: LD_INT 1
13151: ARRAY
13152: PPUSH
13153: CALL_OW 313
13157: PUSH
13158: LD_INT 6
13160: EQUAL
13161: OR
13162: IFFALSE 13182
// f := Delete ( f , 1 ) ;
13164: LD_ADDR_VAR 0 12
13168: PUSH
13169: LD_VAR 0 12
13173: PPUSH
13174: LD_INT 1
13176: PPUSH
13177: CALL_OW 3
13181: ST_TO_ADDR
// if not f then
13182: LD_VAR 0 12
13186: NOT
13187: IFFALSE 13205
// begin x := x + 2 ;
13189: LD_ADDR_VAR 0 13
13193: PUSH
13194: LD_VAR 0 13
13198: PUSH
13199: LD_INT 2
13201: PLUS
13202: ST_TO_ADDR
// continue ;
13203: GO 13003
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13205: LD_VAR 0 12
13209: PUSH
13210: LD_INT 1
13212: ARRAY
13213: PPUSH
13214: CALL_OW 266
13218: PUSH
13219: LD_INT 5
13221: EQUAL
13222: IFFALSE 13296
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13224: LD_VAR 0 12
13228: PUSH
13229: LD_INT 1
13231: ARRAY
13232: PPUSH
13233: CALL_OW 313
13237: PUSH
13238: LD_INT 3
13240: LESS
13241: IFFALSE 13277
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13243: LD_INT 0
13245: PPUSH
13246: LD_INT 5
13248: PUSH
13249: LD_INT 8
13251: PUSH
13252: LD_INT 9
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: PUSH
13260: LD_VAR 0 17
13264: ARRAY
13265: PPUSH
13266: LD_VAR 0 4
13270: PPUSH
13271: CALL_OW 380
13275: GO 13294
// PrepareHuman ( false , i , skill ) ;
13277: LD_INT 0
13279: PPUSH
13280: LD_VAR 0 8
13284: PPUSH
13285: LD_VAR 0 4
13289: PPUSH
13290: CALL_OW 380
// end else
13294: GO 13313
// PrepareHuman ( false , i , skill ) ;
13296: LD_INT 0
13298: PPUSH
13299: LD_VAR 0 8
13303: PPUSH
13304: LD_VAR 0 4
13308: PPUSH
13309: CALL_OW 380
// un := CreateHuman ;
13313: LD_ADDR_VAR 0 14
13317: PUSH
13318: CALL_OW 44
13322: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13323: LD_ADDR_VAR 0 7
13327: PUSH
13328: LD_VAR 0 7
13332: PPUSH
13333: LD_INT 1
13335: PPUSH
13336: LD_VAR 0 14
13340: PPUSH
13341: CALL_OW 2
13345: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13346: LD_VAR 0 14
13350: PPUSH
13351: LD_VAR 0 12
13355: PUSH
13356: LD_INT 1
13358: ARRAY
13359: PPUSH
13360: CALL_OW 52
// end ;
13364: GO 13003
13366: POP
13367: POP
// end ;
13368: GO 12305
13370: POP
13371: POP
// result := result ^ buildings ;
13372: LD_ADDR_VAR 0 7
13376: PUSH
13377: LD_VAR 0 7
13381: PUSH
13382: LD_VAR 0 18
13386: ADD
13387: ST_TO_ADDR
// end else
13388: GO 13531
// begin for i = 1 to personel do
13390: LD_ADDR_VAR 0 8
13394: PUSH
13395: DOUBLE
13396: LD_INT 1
13398: DEC
13399: ST_TO_ADDR
13400: LD_VAR 0 6
13404: PUSH
13405: FOR_TO
13406: IFFALSE 13529
// begin if i > 4 then
13408: LD_VAR 0 8
13412: PUSH
13413: LD_INT 4
13415: GREATER
13416: IFFALSE 13420
// break ;
13418: GO 13529
// x := personel [ i ] ;
13420: LD_ADDR_VAR 0 13
13424: PUSH
13425: LD_VAR 0 6
13429: PUSH
13430: LD_VAR 0 8
13434: ARRAY
13435: ST_TO_ADDR
// if x = - 1 then
13436: LD_VAR 0 13
13440: PUSH
13441: LD_INT 1
13443: NEG
13444: EQUAL
13445: IFFALSE 13449
// continue ;
13447: GO 13405
// PrepareHuman ( false , i , skill ) ;
13449: LD_INT 0
13451: PPUSH
13452: LD_VAR 0 8
13456: PPUSH
13457: LD_VAR 0 4
13461: PPUSH
13462: CALL_OW 380
// un := CreateHuman ;
13466: LD_ADDR_VAR 0 14
13470: PUSH
13471: CALL_OW 44
13475: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13476: LD_VAR 0 14
13480: PPUSH
13481: LD_VAR 0 1
13485: PPUSH
13486: CALL_OW 250
13490: PPUSH
13491: LD_VAR 0 1
13495: PPUSH
13496: CALL_OW 251
13500: PPUSH
13501: LD_INT 10
13503: PPUSH
13504: LD_INT 0
13506: PPUSH
13507: CALL_OW 50
// result := result ^ un ;
13511: LD_ADDR_VAR 0 7
13515: PUSH
13516: LD_VAR 0 7
13520: PUSH
13521: LD_VAR 0 14
13525: ADD
13526: ST_TO_ADDR
// end ;
13527: GO 13405
13529: POP
13530: POP
// end ; end ;
13531: LD_VAR 0 7
13535: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13536: LD_INT 0
13538: PPUSH
13539: PPUSH
13540: PPUSH
13541: PPUSH
13542: PPUSH
13543: PPUSH
13544: PPUSH
13545: PPUSH
13546: PPUSH
13547: PPUSH
13548: PPUSH
13549: PPUSH
13550: PPUSH
13551: PPUSH
13552: PPUSH
13553: PPUSH
// result := false ;
13554: LD_ADDR_VAR 0 3
13558: PUSH
13559: LD_INT 0
13561: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13562: LD_VAR 0 1
13566: NOT
13567: PUSH
13568: LD_VAR 0 1
13572: PPUSH
13573: CALL_OW 266
13577: PUSH
13578: LD_INT 32
13580: PUSH
13581: LD_INT 33
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: IN
13588: NOT
13589: OR
13590: IFFALSE 13594
// exit ;
13592: GO 14703
// nat := GetNation ( tower ) ;
13594: LD_ADDR_VAR 0 12
13598: PUSH
13599: LD_VAR 0 1
13603: PPUSH
13604: CALL_OW 248
13608: ST_TO_ADDR
// side := GetSide ( tower ) ;
13609: LD_ADDR_VAR 0 16
13613: PUSH
13614: LD_VAR 0 1
13618: PPUSH
13619: CALL_OW 255
13623: ST_TO_ADDR
// x := GetX ( tower ) ;
13624: LD_ADDR_VAR 0 10
13628: PUSH
13629: LD_VAR 0 1
13633: PPUSH
13634: CALL_OW 250
13638: ST_TO_ADDR
// y := GetY ( tower ) ;
13639: LD_ADDR_VAR 0 11
13643: PUSH
13644: LD_VAR 0 1
13648: PPUSH
13649: CALL_OW 251
13653: ST_TO_ADDR
// if not x or not y then
13654: LD_VAR 0 10
13658: NOT
13659: PUSH
13660: LD_VAR 0 11
13664: NOT
13665: OR
13666: IFFALSE 13670
// exit ;
13668: GO 14703
// weapon := 0 ;
13670: LD_ADDR_VAR 0 18
13674: PUSH
13675: LD_INT 0
13677: ST_TO_ADDR
// fac_list := [ ] ;
13678: LD_ADDR_VAR 0 17
13682: PUSH
13683: EMPTY
13684: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13685: LD_ADDR_VAR 0 6
13689: PUSH
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 274
13699: PPUSH
13700: LD_VAR 0 2
13704: PPUSH
13705: LD_INT 0
13707: PPUSH
13708: CALL 11274 0 3
13712: PPUSH
13713: LD_INT 30
13715: PUSH
13716: LD_INT 3
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PPUSH
13723: CALL_OW 72
13727: ST_TO_ADDR
// if not factories then
13728: LD_VAR 0 6
13732: NOT
13733: IFFALSE 13737
// exit ;
13735: GO 14703
// for i in factories do
13737: LD_ADDR_VAR 0 8
13741: PUSH
13742: LD_VAR 0 6
13746: PUSH
13747: FOR_IN
13748: IFFALSE 13773
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13750: LD_ADDR_VAR 0 17
13754: PUSH
13755: LD_VAR 0 17
13759: PUSH
13760: LD_VAR 0 8
13764: PPUSH
13765: CALL_OW 478
13769: UNION
13770: ST_TO_ADDR
13771: GO 13747
13773: POP
13774: POP
// if not fac_list then
13775: LD_VAR 0 17
13779: NOT
13780: IFFALSE 13784
// exit ;
13782: GO 14703
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13784: LD_ADDR_VAR 0 5
13788: PUSH
13789: LD_INT 4
13791: PUSH
13792: LD_INT 5
13794: PUSH
13795: LD_INT 9
13797: PUSH
13798: LD_INT 10
13800: PUSH
13801: LD_INT 6
13803: PUSH
13804: LD_INT 7
13806: PUSH
13807: LD_INT 11
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 27
13821: PUSH
13822: LD_INT 28
13824: PUSH
13825: LD_INT 26
13827: PUSH
13828: LD_INT 30
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 43
13839: PUSH
13840: LD_INT 44
13842: PUSH
13843: LD_INT 46
13845: PUSH
13846: LD_INT 45
13848: PUSH
13849: LD_INT 47
13851: PUSH
13852: LD_INT 49
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: LD_VAR 0 12
13872: ARRAY
13873: ST_TO_ADDR
// list := list isect fac_list ;
13874: LD_ADDR_VAR 0 5
13878: PUSH
13879: LD_VAR 0 5
13883: PUSH
13884: LD_VAR 0 17
13888: ISECT
13889: ST_TO_ADDR
// if not list then
13890: LD_VAR 0 5
13894: NOT
13895: IFFALSE 13899
// exit ;
13897: GO 14703
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13899: LD_VAR 0 12
13903: PUSH
13904: LD_INT 3
13906: EQUAL
13907: PUSH
13908: LD_INT 49
13910: PUSH
13911: LD_VAR 0 5
13915: IN
13916: AND
13917: PUSH
13918: LD_INT 31
13920: PPUSH
13921: LD_VAR 0 16
13925: PPUSH
13926: CALL_OW 321
13930: PUSH
13931: LD_INT 2
13933: EQUAL
13934: AND
13935: IFFALSE 13995
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13937: LD_INT 22
13939: PUSH
13940: LD_VAR 0 16
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 35
13951: PUSH
13952: LD_INT 49
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 91
13961: PUSH
13962: LD_VAR 0 1
13966: PUSH
13967: LD_INT 10
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: PPUSH
13980: CALL_OW 69
13984: NOT
13985: IFFALSE 13995
// weapon := ru_time_lapser ;
13987: LD_ADDR_VAR 0 18
13991: PUSH
13992: LD_INT 49
13994: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13995: LD_VAR 0 12
13999: PUSH
14000: LD_INT 1
14002: PUSH
14003: LD_INT 2
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: IN
14010: PUSH
14011: LD_INT 11
14013: PUSH
14014: LD_VAR 0 5
14018: IN
14019: PUSH
14020: LD_INT 30
14022: PUSH
14023: LD_VAR 0 5
14027: IN
14028: OR
14029: AND
14030: PUSH
14031: LD_INT 6
14033: PPUSH
14034: LD_VAR 0 16
14038: PPUSH
14039: CALL_OW 321
14043: PUSH
14044: LD_INT 2
14046: EQUAL
14047: AND
14048: IFFALSE 14213
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14050: LD_INT 22
14052: PUSH
14053: LD_VAR 0 16
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 2
14064: PUSH
14065: LD_INT 35
14067: PUSH
14068: LD_INT 11
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 35
14077: PUSH
14078: LD_INT 30
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 91
14092: PUSH
14093: LD_VAR 0 1
14097: PUSH
14098: LD_INT 18
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: LIST
14110: PPUSH
14111: CALL_OW 69
14115: NOT
14116: PUSH
14117: LD_INT 22
14119: PUSH
14120: LD_VAR 0 16
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 2
14131: PUSH
14132: LD_INT 30
14134: PUSH
14135: LD_INT 32
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 30
14144: PUSH
14145: LD_INT 33
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 91
14159: PUSH
14160: LD_VAR 0 1
14164: PUSH
14165: LD_INT 12
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: PUSH
14178: EMPTY
14179: LIST
14180: PPUSH
14181: CALL_OW 69
14185: PUSH
14186: LD_INT 2
14188: GREATER
14189: AND
14190: IFFALSE 14213
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14192: LD_ADDR_VAR 0 18
14196: PUSH
14197: LD_INT 11
14199: PUSH
14200: LD_INT 30
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_VAR 0 12
14211: ARRAY
14212: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14213: LD_VAR 0 18
14217: NOT
14218: PUSH
14219: LD_INT 40
14221: PPUSH
14222: LD_VAR 0 16
14226: PPUSH
14227: CALL_OW 321
14231: PUSH
14232: LD_INT 2
14234: EQUAL
14235: AND
14236: PUSH
14237: LD_INT 7
14239: PUSH
14240: LD_VAR 0 5
14244: IN
14245: PUSH
14246: LD_INT 28
14248: PUSH
14249: LD_VAR 0 5
14253: IN
14254: OR
14255: PUSH
14256: LD_INT 45
14258: PUSH
14259: LD_VAR 0 5
14263: IN
14264: OR
14265: AND
14266: IFFALSE 14520
// begin hex := GetHexInfo ( x , y ) ;
14268: LD_ADDR_VAR 0 4
14272: PUSH
14273: LD_VAR 0 10
14277: PPUSH
14278: LD_VAR 0 11
14282: PPUSH
14283: CALL_OW 546
14287: ST_TO_ADDR
// if hex [ 1 ] then
14288: LD_VAR 0 4
14292: PUSH
14293: LD_INT 1
14295: ARRAY
14296: IFFALSE 14300
// exit ;
14298: GO 14703
// height := hex [ 2 ] ;
14300: LD_ADDR_VAR 0 15
14304: PUSH
14305: LD_VAR 0 4
14309: PUSH
14310: LD_INT 2
14312: ARRAY
14313: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14314: LD_ADDR_VAR 0 14
14318: PUSH
14319: LD_INT 0
14321: PUSH
14322: LD_INT 2
14324: PUSH
14325: LD_INT 3
14327: PUSH
14328: LD_INT 5
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: ST_TO_ADDR
// for i in tmp do
14337: LD_ADDR_VAR 0 8
14341: PUSH
14342: LD_VAR 0 14
14346: PUSH
14347: FOR_IN
14348: IFFALSE 14518
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14350: LD_ADDR_VAR 0 9
14354: PUSH
14355: LD_VAR 0 10
14359: PPUSH
14360: LD_VAR 0 8
14364: PPUSH
14365: LD_INT 5
14367: PPUSH
14368: CALL_OW 272
14372: PUSH
14373: LD_VAR 0 11
14377: PPUSH
14378: LD_VAR 0 8
14382: PPUSH
14383: LD_INT 5
14385: PPUSH
14386: CALL_OW 273
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14395: LD_VAR 0 9
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: LD_VAR 0 9
14408: PUSH
14409: LD_INT 2
14411: ARRAY
14412: PPUSH
14413: CALL_OW 488
14417: IFFALSE 14516
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14419: LD_ADDR_VAR 0 4
14423: PUSH
14424: LD_VAR 0 9
14428: PUSH
14429: LD_INT 1
14431: ARRAY
14432: PPUSH
14433: LD_VAR 0 9
14437: PUSH
14438: LD_INT 2
14440: ARRAY
14441: PPUSH
14442: CALL_OW 546
14446: ST_TO_ADDR
// if hex [ 1 ] then
14447: LD_VAR 0 4
14451: PUSH
14452: LD_INT 1
14454: ARRAY
14455: IFFALSE 14459
// continue ;
14457: GO 14347
// h := hex [ 2 ] ;
14459: LD_ADDR_VAR 0 13
14463: PUSH
14464: LD_VAR 0 4
14468: PUSH
14469: LD_INT 2
14471: ARRAY
14472: ST_TO_ADDR
// if h + 7 < height then
14473: LD_VAR 0 13
14477: PUSH
14478: LD_INT 7
14480: PLUS
14481: PUSH
14482: LD_VAR 0 15
14486: LESS
14487: IFFALSE 14516
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14489: LD_ADDR_VAR 0 18
14493: PUSH
14494: LD_INT 7
14496: PUSH
14497: LD_INT 28
14499: PUSH
14500: LD_INT 45
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: LIST
14507: PUSH
14508: LD_VAR 0 12
14512: ARRAY
14513: ST_TO_ADDR
// break ;
14514: GO 14518
// end ; end ; end ;
14516: GO 14347
14518: POP
14519: POP
// end ; if not weapon then
14520: LD_VAR 0 18
14524: NOT
14525: IFFALSE 14585
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14527: LD_ADDR_VAR 0 5
14531: PUSH
14532: LD_VAR 0 5
14536: PUSH
14537: LD_INT 11
14539: PUSH
14540: LD_INT 30
14542: PUSH
14543: LD_INT 49
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: LIST
14550: DIFF
14551: ST_TO_ADDR
// if not list then
14552: LD_VAR 0 5
14556: NOT
14557: IFFALSE 14561
// exit ;
14559: GO 14703
// weapon := list [ rand ( 1 , list ) ] ;
14561: LD_ADDR_VAR 0 18
14565: PUSH
14566: LD_VAR 0 5
14570: PUSH
14571: LD_INT 1
14573: PPUSH
14574: LD_VAR 0 5
14578: PPUSH
14579: CALL_OW 12
14583: ARRAY
14584: ST_TO_ADDR
// end ; if weapon then
14585: LD_VAR 0 18
14589: IFFALSE 14703
// begin tmp := CostOfWeapon ( weapon ) ;
14591: LD_ADDR_VAR 0 14
14595: PUSH
14596: LD_VAR 0 18
14600: PPUSH
14601: CALL_OW 451
14605: ST_TO_ADDR
// j := GetBase ( tower ) ;
14606: LD_ADDR_VAR 0 9
14610: PUSH
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 274
14620: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14621: LD_VAR 0 9
14625: PPUSH
14626: LD_INT 1
14628: PPUSH
14629: CALL_OW 275
14633: PUSH
14634: LD_VAR 0 14
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: GREATEREQUAL
14643: PUSH
14644: LD_VAR 0 9
14648: PPUSH
14649: LD_INT 2
14651: PPUSH
14652: CALL_OW 275
14656: PUSH
14657: LD_VAR 0 14
14661: PUSH
14662: LD_INT 2
14664: ARRAY
14665: GREATEREQUAL
14666: AND
14667: PUSH
14668: LD_VAR 0 9
14672: PPUSH
14673: LD_INT 3
14675: PPUSH
14676: CALL_OW 275
14680: PUSH
14681: LD_VAR 0 14
14685: PUSH
14686: LD_INT 3
14688: ARRAY
14689: GREATEREQUAL
14690: AND
14691: IFFALSE 14703
// result := weapon ;
14693: LD_ADDR_VAR 0 3
14697: PUSH
14698: LD_VAR 0 18
14702: ST_TO_ADDR
// end ; end ;
14703: LD_VAR 0 3
14707: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14708: LD_INT 0
14710: PPUSH
14711: PPUSH
// result := true ;
14712: LD_ADDR_VAR 0 3
14716: PUSH
14717: LD_INT 1
14719: ST_TO_ADDR
// if array1 = array2 then
14720: LD_VAR 0 1
14724: PUSH
14725: LD_VAR 0 2
14729: EQUAL
14730: IFFALSE 14790
// begin for i = 1 to array1 do
14732: LD_ADDR_VAR 0 4
14736: PUSH
14737: DOUBLE
14738: LD_INT 1
14740: DEC
14741: ST_TO_ADDR
14742: LD_VAR 0 1
14746: PUSH
14747: FOR_TO
14748: IFFALSE 14786
// if array1 [ i ] <> array2 [ i ] then
14750: LD_VAR 0 1
14754: PUSH
14755: LD_VAR 0 4
14759: ARRAY
14760: PUSH
14761: LD_VAR 0 2
14765: PUSH
14766: LD_VAR 0 4
14770: ARRAY
14771: NONEQUAL
14772: IFFALSE 14784
// begin result := false ;
14774: LD_ADDR_VAR 0 3
14778: PUSH
14779: LD_INT 0
14781: ST_TO_ADDR
// break ;
14782: GO 14786
// end ;
14784: GO 14747
14786: POP
14787: POP
// end else
14788: GO 14798
// result := false ;
14790: LD_ADDR_VAR 0 3
14794: PUSH
14795: LD_INT 0
14797: ST_TO_ADDR
// end ;
14798: LD_VAR 0 3
14802: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14803: LD_INT 0
14805: PPUSH
14806: PPUSH
// if not array1 or not array2 then
14807: LD_VAR 0 1
14811: NOT
14812: PUSH
14813: LD_VAR 0 2
14817: NOT
14818: OR
14819: IFFALSE 14823
// exit ;
14821: GO 14887
// result := true ;
14823: LD_ADDR_VAR 0 3
14827: PUSH
14828: LD_INT 1
14830: ST_TO_ADDR
// for i = 1 to array1 do
14831: LD_ADDR_VAR 0 4
14835: PUSH
14836: DOUBLE
14837: LD_INT 1
14839: DEC
14840: ST_TO_ADDR
14841: LD_VAR 0 1
14845: PUSH
14846: FOR_TO
14847: IFFALSE 14885
// if array1 [ i ] <> array2 [ i ] then
14849: LD_VAR 0 1
14853: PUSH
14854: LD_VAR 0 4
14858: ARRAY
14859: PUSH
14860: LD_VAR 0 2
14864: PUSH
14865: LD_VAR 0 4
14869: ARRAY
14870: NONEQUAL
14871: IFFALSE 14883
// begin result := false ;
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: LD_INT 0
14880: ST_TO_ADDR
// break ;
14881: GO 14885
// end ;
14883: GO 14846
14885: POP
14886: POP
// end ;
14887: LD_VAR 0 3
14891: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14892: LD_INT 0
14894: PPUSH
14895: PPUSH
14896: PPUSH
// pom := GetBase ( fac ) ;
14897: LD_ADDR_VAR 0 5
14901: PUSH
14902: LD_VAR 0 1
14906: PPUSH
14907: CALL_OW 274
14911: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14912: LD_ADDR_VAR 0 4
14916: PUSH
14917: LD_VAR 0 2
14921: PUSH
14922: LD_INT 1
14924: ARRAY
14925: PPUSH
14926: LD_VAR 0 2
14930: PUSH
14931: LD_INT 2
14933: ARRAY
14934: PPUSH
14935: LD_VAR 0 2
14939: PUSH
14940: LD_INT 3
14942: ARRAY
14943: PPUSH
14944: LD_VAR 0 2
14948: PUSH
14949: LD_INT 4
14951: ARRAY
14952: PPUSH
14953: CALL_OW 449
14957: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14958: LD_ADDR_VAR 0 3
14962: PUSH
14963: LD_VAR 0 5
14967: PPUSH
14968: LD_INT 1
14970: PPUSH
14971: CALL_OW 275
14975: PUSH
14976: LD_VAR 0 4
14980: PUSH
14981: LD_INT 1
14983: ARRAY
14984: GREATEREQUAL
14985: PUSH
14986: LD_VAR 0 5
14990: PPUSH
14991: LD_INT 2
14993: PPUSH
14994: CALL_OW 275
14998: PUSH
14999: LD_VAR 0 4
15003: PUSH
15004: LD_INT 2
15006: ARRAY
15007: GREATEREQUAL
15008: AND
15009: PUSH
15010: LD_VAR 0 5
15014: PPUSH
15015: LD_INT 3
15017: PPUSH
15018: CALL_OW 275
15022: PUSH
15023: LD_VAR 0 4
15027: PUSH
15028: LD_INT 3
15030: ARRAY
15031: GREATEREQUAL
15032: AND
15033: ST_TO_ADDR
// end ;
15034: LD_VAR 0 3
15038: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15039: LD_INT 0
15041: PPUSH
15042: PPUSH
15043: PPUSH
15044: PPUSH
// pom := GetBase ( building ) ;
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 274
15059: ST_TO_ADDR
// if not pom then
15060: LD_VAR 0 3
15064: NOT
15065: IFFALSE 15069
// exit ;
15067: GO 15239
// btype := GetBType ( building ) ;
15069: LD_ADDR_VAR 0 5
15073: PUSH
15074: LD_VAR 0 1
15078: PPUSH
15079: CALL_OW 266
15083: ST_TO_ADDR
// if btype = b_armoury then
15084: LD_VAR 0 5
15088: PUSH
15089: LD_INT 4
15091: EQUAL
15092: IFFALSE 15102
// btype := b_barracks ;
15094: LD_ADDR_VAR 0 5
15098: PUSH
15099: LD_INT 5
15101: ST_TO_ADDR
// if btype = b_depot then
15102: LD_VAR 0 5
15106: PUSH
15107: LD_INT 0
15109: EQUAL
15110: IFFALSE 15120
// btype := b_warehouse ;
15112: LD_ADDR_VAR 0 5
15116: PUSH
15117: LD_INT 1
15119: ST_TO_ADDR
// if btype = b_workshop then
15120: LD_VAR 0 5
15124: PUSH
15125: LD_INT 2
15127: EQUAL
15128: IFFALSE 15138
// btype := b_factory ;
15130: LD_ADDR_VAR 0 5
15134: PUSH
15135: LD_INT 3
15137: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15138: LD_ADDR_VAR 0 4
15142: PUSH
15143: LD_VAR 0 5
15147: PPUSH
15148: LD_VAR 0 1
15152: PPUSH
15153: CALL_OW 248
15157: PPUSH
15158: CALL_OW 450
15162: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15163: LD_ADDR_VAR 0 2
15167: PUSH
15168: LD_VAR 0 3
15172: PPUSH
15173: LD_INT 1
15175: PPUSH
15176: CALL_OW 275
15180: PUSH
15181: LD_VAR 0 4
15185: PUSH
15186: LD_INT 1
15188: ARRAY
15189: GREATEREQUAL
15190: PUSH
15191: LD_VAR 0 3
15195: PPUSH
15196: LD_INT 2
15198: PPUSH
15199: CALL_OW 275
15203: PUSH
15204: LD_VAR 0 4
15208: PUSH
15209: LD_INT 2
15211: ARRAY
15212: GREATEREQUAL
15213: AND
15214: PUSH
15215: LD_VAR 0 3
15219: PPUSH
15220: LD_INT 3
15222: PPUSH
15223: CALL_OW 275
15227: PUSH
15228: LD_VAR 0 4
15232: PUSH
15233: LD_INT 3
15235: ARRAY
15236: GREATEREQUAL
15237: AND
15238: ST_TO_ADDR
// end ;
15239: LD_VAR 0 2
15243: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15244: LD_INT 0
15246: PPUSH
15247: PPUSH
15248: PPUSH
// pom := GetBase ( building ) ;
15249: LD_ADDR_VAR 0 4
15253: PUSH
15254: LD_VAR 0 1
15258: PPUSH
15259: CALL_OW 274
15263: ST_TO_ADDR
// if not pom then
15264: LD_VAR 0 4
15268: NOT
15269: IFFALSE 15273
// exit ;
15271: GO 15374
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15273: LD_ADDR_VAR 0 5
15277: PUSH
15278: LD_VAR 0 2
15282: PPUSH
15283: LD_VAR 0 1
15287: PPUSH
15288: CALL_OW 248
15292: PPUSH
15293: CALL_OW 450
15297: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15298: LD_ADDR_VAR 0 3
15302: PUSH
15303: LD_VAR 0 4
15307: PPUSH
15308: LD_INT 1
15310: PPUSH
15311: CALL_OW 275
15315: PUSH
15316: LD_VAR 0 5
15320: PUSH
15321: LD_INT 1
15323: ARRAY
15324: GREATEREQUAL
15325: PUSH
15326: LD_VAR 0 4
15330: PPUSH
15331: LD_INT 2
15333: PPUSH
15334: CALL_OW 275
15338: PUSH
15339: LD_VAR 0 5
15343: PUSH
15344: LD_INT 2
15346: ARRAY
15347: GREATEREQUAL
15348: AND
15349: PUSH
15350: LD_VAR 0 4
15354: PPUSH
15355: LD_INT 3
15357: PPUSH
15358: CALL_OW 275
15362: PUSH
15363: LD_VAR 0 5
15367: PUSH
15368: LD_INT 3
15370: ARRAY
15371: GREATEREQUAL
15372: AND
15373: ST_TO_ADDR
// end ;
15374: LD_VAR 0 3
15378: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15379: LD_INT 0
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
15386: PPUSH
15387: PPUSH
15388: PPUSH
15389: PPUSH
15390: PPUSH
15391: PPUSH
// result := false ;
15392: LD_ADDR_VAR 0 8
15396: PUSH
15397: LD_INT 0
15399: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15400: LD_VAR 0 5
15404: NOT
15405: PUSH
15406: LD_VAR 0 1
15410: NOT
15411: OR
15412: PUSH
15413: LD_VAR 0 2
15417: NOT
15418: OR
15419: PUSH
15420: LD_VAR 0 3
15424: NOT
15425: OR
15426: IFFALSE 15430
// exit ;
15428: GO 16244
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15430: LD_ADDR_VAR 0 14
15434: PUSH
15435: LD_VAR 0 1
15439: PPUSH
15440: LD_VAR 0 2
15444: PPUSH
15445: LD_VAR 0 3
15449: PPUSH
15450: LD_VAR 0 4
15454: PPUSH
15455: LD_VAR 0 5
15459: PUSH
15460: LD_INT 1
15462: ARRAY
15463: PPUSH
15464: CALL_OW 248
15468: PPUSH
15469: LD_INT 0
15471: PPUSH
15472: CALL 17477 0 6
15476: ST_TO_ADDR
// if not hexes then
15477: LD_VAR 0 14
15481: NOT
15482: IFFALSE 15486
// exit ;
15484: GO 16244
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15486: LD_ADDR_VAR 0 17
15490: PUSH
15491: LD_VAR 0 5
15495: PPUSH
15496: LD_INT 22
15498: PUSH
15499: LD_VAR 0 13
15503: PPUSH
15504: CALL_OW 255
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: LD_INT 2
15515: PUSH
15516: LD_INT 30
15518: PUSH
15519: LD_INT 0
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 30
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PPUSH
15545: CALL_OW 72
15549: ST_TO_ADDR
// for i = 1 to hexes do
15550: LD_ADDR_VAR 0 9
15554: PUSH
15555: DOUBLE
15556: LD_INT 1
15558: DEC
15559: ST_TO_ADDR
15560: LD_VAR 0 14
15564: PUSH
15565: FOR_TO
15566: IFFALSE 16242
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15568: LD_ADDR_VAR 0 13
15572: PUSH
15573: LD_VAR 0 14
15577: PUSH
15578: LD_VAR 0 9
15582: ARRAY
15583: PUSH
15584: LD_INT 1
15586: ARRAY
15587: PPUSH
15588: LD_VAR 0 14
15592: PUSH
15593: LD_VAR 0 9
15597: ARRAY
15598: PUSH
15599: LD_INT 2
15601: ARRAY
15602: PPUSH
15603: CALL_OW 428
15607: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15608: LD_VAR 0 14
15612: PUSH
15613: LD_VAR 0 9
15617: ARRAY
15618: PUSH
15619: LD_INT 1
15621: ARRAY
15622: PPUSH
15623: LD_VAR 0 14
15627: PUSH
15628: LD_VAR 0 9
15632: ARRAY
15633: PUSH
15634: LD_INT 2
15636: ARRAY
15637: PPUSH
15638: CALL_OW 351
15642: PUSH
15643: LD_VAR 0 14
15647: PUSH
15648: LD_VAR 0 9
15652: ARRAY
15653: PUSH
15654: LD_INT 1
15656: ARRAY
15657: PPUSH
15658: LD_VAR 0 14
15662: PUSH
15663: LD_VAR 0 9
15667: ARRAY
15668: PUSH
15669: LD_INT 2
15671: ARRAY
15672: PPUSH
15673: CALL_OW 488
15677: NOT
15678: OR
15679: PUSH
15680: LD_VAR 0 13
15684: PPUSH
15685: CALL_OW 247
15689: PUSH
15690: LD_INT 3
15692: EQUAL
15693: OR
15694: IFFALSE 15700
// exit ;
15696: POP
15697: POP
15698: GO 16244
// if not tmp then
15700: LD_VAR 0 13
15704: NOT
15705: IFFALSE 15709
// continue ;
15707: GO 15565
// result := true ;
15709: LD_ADDR_VAR 0 8
15713: PUSH
15714: LD_INT 1
15716: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15717: LD_VAR 0 6
15721: PUSH
15722: LD_VAR 0 13
15726: PPUSH
15727: CALL_OW 247
15731: PUSH
15732: LD_INT 2
15734: EQUAL
15735: AND
15736: PUSH
15737: LD_VAR 0 13
15741: PPUSH
15742: CALL_OW 263
15746: PUSH
15747: LD_INT 1
15749: EQUAL
15750: AND
15751: IFFALSE 15915
// begin if IsDrivenBy ( tmp ) then
15753: LD_VAR 0 13
15757: PPUSH
15758: CALL_OW 311
15762: IFFALSE 15766
// continue ;
15764: GO 15565
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15766: LD_VAR 0 6
15770: PPUSH
15771: LD_INT 3
15773: PUSH
15774: LD_INT 60
15776: PUSH
15777: EMPTY
15778: LIST
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 3
15786: PUSH
15787: LD_INT 55
15789: PUSH
15790: EMPTY
15791: LIST
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PPUSH
15801: CALL_OW 72
15805: IFFALSE 15913
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15807: LD_ADDR_VAR 0 18
15811: PUSH
15812: LD_VAR 0 6
15816: PPUSH
15817: LD_INT 3
15819: PUSH
15820: LD_INT 60
15822: PUSH
15823: EMPTY
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 3
15832: PUSH
15833: LD_INT 55
15835: PUSH
15836: EMPTY
15837: LIST
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 72
15851: PUSH
15852: LD_INT 1
15854: ARRAY
15855: ST_TO_ADDR
// if IsInUnit ( driver ) then
15856: LD_VAR 0 18
15860: PPUSH
15861: CALL_OW 310
15865: IFFALSE 15876
// ComExit ( driver ) ;
15867: LD_VAR 0 18
15871: PPUSH
15872: CALL 41257 0 1
// AddComEnterUnit ( driver , tmp ) ;
15876: LD_VAR 0 18
15880: PPUSH
15881: LD_VAR 0 13
15885: PPUSH
15886: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15890: LD_VAR 0 18
15894: PPUSH
15895: LD_VAR 0 7
15899: PPUSH
15900: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15904: LD_VAR 0 18
15908: PPUSH
15909: CALL_OW 181
// end ; continue ;
15913: GO 15565
// end ; if not cleaners or not tmp in cleaners then
15915: LD_VAR 0 6
15919: NOT
15920: PUSH
15921: LD_VAR 0 13
15925: PUSH
15926: LD_VAR 0 6
15930: IN
15931: NOT
15932: OR
15933: IFFALSE 16240
// begin if dep then
15935: LD_VAR 0 17
15939: IFFALSE 16075
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15941: LD_ADDR_VAR 0 16
15945: PUSH
15946: LD_VAR 0 17
15950: PUSH
15951: LD_INT 1
15953: ARRAY
15954: PPUSH
15955: CALL_OW 250
15959: PPUSH
15960: LD_VAR 0 17
15964: PUSH
15965: LD_INT 1
15967: ARRAY
15968: PPUSH
15969: CALL_OW 254
15973: PPUSH
15974: LD_INT 5
15976: PPUSH
15977: CALL_OW 272
15981: PUSH
15982: LD_VAR 0 17
15986: PUSH
15987: LD_INT 1
15989: ARRAY
15990: PPUSH
15991: CALL_OW 251
15995: PPUSH
15996: LD_VAR 0 17
16000: PUSH
16001: LD_INT 1
16003: ARRAY
16004: PPUSH
16005: CALL_OW 254
16009: PPUSH
16010: LD_INT 5
16012: PPUSH
16013: CALL_OW 273
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16022: LD_VAR 0 16
16026: PUSH
16027: LD_INT 1
16029: ARRAY
16030: PPUSH
16031: LD_VAR 0 16
16035: PUSH
16036: LD_INT 2
16038: ARRAY
16039: PPUSH
16040: CALL_OW 488
16044: IFFALSE 16075
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16046: LD_VAR 0 13
16050: PPUSH
16051: LD_VAR 0 16
16055: PUSH
16056: LD_INT 1
16058: ARRAY
16059: PPUSH
16060: LD_VAR 0 16
16064: PUSH
16065: LD_INT 2
16067: ARRAY
16068: PPUSH
16069: CALL_OW 111
// continue ;
16073: GO 15565
// end ; end ; r := GetDir ( tmp ) ;
16075: LD_ADDR_VAR 0 15
16079: PUSH
16080: LD_VAR 0 13
16084: PPUSH
16085: CALL_OW 254
16089: ST_TO_ADDR
// if r = 5 then
16090: LD_VAR 0 15
16094: PUSH
16095: LD_INT 5
16097: EQUAL
16098: IFFALSE 16108
// r := 0 ;
16100: LD_ADDR_VAR 0 15
16104: PUSH
16105: LD_INT 0
16107: ST_TO_ADDR
// for j = r to 5 do
16108: LD_ADDR_VAR 0 10
16112: PUSH
16113: DOUBLE
16114: LD_VAR 0 15
16118: DEC
16119: ST_TO_ADDR
16120: LD_INT 5
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16238
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16126: LD_ADDR_VAR 0 11
16130: PUSH
16131: LD_VAR 0 13
16135: PPUSH
16136: CALL_OW 250
16140: PPUSH
16141: LD_VAR 0 10
16145: PPUSH
16146: LD_INT 2
16148: PPUSH
16149: CALL_OW 272
16153: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16154: LD_ADDR_VAR 0 12
16158: PUSH
16159: LD_VAR 0 13
16163: PPUSH
16164: CALL_OW 251
16168: PPUSH
16169: LD_VAR 0 10
16173: PPUSH
16174: LD_INT 2
16176: PPUSH
16177: CALL_OW 273
16181: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16182: LD_VAR 0 11
16186: PPUSH
16187: LD_VAR 0 12
16191: PPUSH
16192: CALL_OW 488
16196: PUSH
16197: LD_VAR 0 11
16201: PPUSH
16202: LD_VAR 0 12
16206: PPUSH
16207: CALL_OW 428
16211: NOT
16212: AND
16213: IFFALSE 16236
// begin ComMoveXY ( tmp , _x , _y ) ;
16215: LD_VAR 0 13
16219: PPUSH
16220: LD_VAR 0 11
16224: PPUSH
16225: LD_VAR 0 12
16229: PPUSH
16230: CALL_OW 111
// break ;
16234: GO 16238
// end ; end ;
16236: GO 16123
16238: POP
16239: POP
// end ; end ;
16240: GO 15565
16242: POP
16243: POP
// end ;
16244: LD_VAR 0 8
16248: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16249: LD_INT 0
16251: PPUSH
// result := true ;
16252: LD_ADDR_VAR 0 3
16256: PUSH
16257: LD_INT 1
16259: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16260: LD_VAR 0 2
16264: PUSH
16265: LD_INT 24
16267: DOUBLE
16268: EQUAL
16269: IFTRUE 16279
16271: LD_INT 33
16273: DOUBLE
16274: EQUAL
16275: IFTRUE 16279
16277: GO 16304
16279: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16280: LD_ADDR_VAR 0 3
16284: PUSH
16285: LD_INT 32
16287: PPUSH
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 321
16297: PUSH
16298: LD_INT 2
16300: EQUAL
16301: ST_TO_ADDR
16302: GO 16620
16304: LD_INT 20
16306: DOUBLE
16307: EQUAL
16308: IFTRUE 16312
16310: GO 16337
16312: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16313: LD_ADDR_VAR 0 3
16317: PUSH
16318: LD_INT 6
16320: PPUSH
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL_OW 321
16330: PUSH
16331: LD_INT 2
16333: EQUAL
16334: ST_TO_ADDR
16335: GO 16620
16337: LD_INT 22
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16351
16343: LD_INT 36
16345: DOUBLE
16346: EQUAL
16347: IFTRUE 16351
16349: GO 16376
16351: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16352: LD_ADDR_VAR 0 3
16356: PUSH
16357: LD_INT 15
16359: PPUSH
16360: LD_VAR 0 1
16364: PPUSH
16365: CALL_OW 321
16369: PUSH
16370: LD_INT 2
16372: EQUAL
16373: ST_TO_ADDR
16374: GO 16620
16376: LD_INT 30
16378: DOUBLE
16379: EQUAL
16380: IFTRUE 16384
16382: GO 16409
16384: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16385: LD_ADDR_VAR 0 3
16389: PUSH
16390: LD_INT 20
16392: PPUSH
16393: LD_VAR 0 1
16397: PPUSH
16398: CALL_OW 321
16402: PUSH
16403: LD_INT 2
16405: EQUAL
16406: ST_TO_ADDR
16407: GO 16620
16409: LD_INT 28
16411: DOUBLE
16412: EQUAL
16413: IFTRUE 16423
16415: LD_INT 21
16417: DOUBLE
16418: EQUAL
16419: IFTRUE 16423
16421: GO 16448
16423: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_INT 21
16431: PPUSH
16432: LD_VAR 0 1
16436: PPUSH
16437: CALL_OW 321
16441: PUSH
16442: LD_INT 2
16444: EQUAL
16445: ST_TO_ADDR
16446: GO 16620
16448: LD_INT 16
16450: DOUBLE
16451: EQUAL
16452: IFTRUE 16456
16454: GO 16481
16456: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16457: LD_ADDR_VAR 0 3
16461: PUSH
16462: LD_INT 84
16464: PPUSH
16465: LD_VAR 0 1
16469: PPUSH
16470: CALL_OW 321
16474: PUSH
16475: LD_INT 2
16477: EQUAL
16478: ST_TO_ADDR
16479: GO 16620
16481: LD_INT 19
16483: DOUBLE
16484: EQUAL
16485: IFTRUE 16495
16487: LD_INT 23
16489: DOUBLE
16490: EQUAL
16491: IFTRUE 16495
16493: GO 16520
16495: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16496: LD_ADDR_VAR 0 3
16500: PUSH
16501: LD_INT 83
16503: PPUSH
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 321
16513: PUSH
16514: LD_INT 2
16516: EQUAL
16517: ST_TO_ADDR
16518: GO 16620
16520: LD_INT 17
16522: DOUBLE
16523: EQUAL
16524: IFTRUE 16528
16526: GO 16553
16528: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16529: LD_ADDR_VAR 0 3
16533: PUSH
16534: LD_INT 39
16536: PPUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 321
16546: PUSH
16547: LD_INT 2
16549: EQUAL
16550: ST_TO_ADDR
16551: GO 16620
16553: LD_INT 18
16555: DOUBLE
16556: EQUAL
16557: IFTRUE 16561
16559: GO 16586
16561: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16562: LD_ADDR_VAR 0 3
16566: PUSH
16567: LD_INT 40
16569: PPUSH
16570: LD_VAR 0 1
16574: PPUSH
16575: CALL_OW 321
16579: PUSH
16580: LD_INT 2
16582: EQUAL
16583: ST_TO_ADDR
16584: GO 16620
16586: LD_INT 27
16588: DOUBLE
16589: EQUAL
16590: IFTRUE 16594
16592: GO 16619
16594: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16595: LD_ADDR_VAR 0 3
16599: PUSH
16600: LD_INT 35
16602: PPUSH
16603: LD_VAR 0 1
16607: PPUSH
16608: CALL_OW 321
16612: PUSH
16613: LD_INT 2
16615: EQUAL
16616: ST_TO_ADDR
16617: GO 16620
16619: POP
// end ;
16620: LD_VAR 0 3
16624: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16625: LD_INT 0
16627: PPUSH
16628: PPUSH
16629: PPUSH
16630: PPUSH
16631: PPUSH
16632: PPUSH
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
16637: PPUSH
// result := false ;
16638: LD_ADDR_VAR 0 6
16642: PUSH
16643: LD_INT 0
16645: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16646: LD_VAR 0 1
16650: NOT
16651: PUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 266
16661: PUSH
16662: LD_INT 0
16664: PUSH
16665: LD_INT 1
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: IN
16672: NOT
16673: OR
16674: PUSH
16675: LD_VAR 0 2
16679: NOT
16680: OR
16681: PUSH
16682: LD_VAR 0 5
16686: PUSH
16687: LD_INT 0
16689: PUSH
16690: LD_INT 1
16692: PUSH
16693: LD_INT 2
16695: PUSH
16696: LD_INT 3
16698: PUSH
16699: LD_INT 4
16701: PUSH
16702: LD_INT 5
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: IN
16713: NOT
16714: OR
16715: PUSH
16716: LD_VAR 0 3
16720: PPUSH
16721: LD_VAR 0 4
16725: PPUSH
16726: CALL_OW 488
16730: NOT
16731: OR
16732: IFFALSE 16736
// exit ;
16734: GO 17472
// side := GetSide ( depot ) ;
16736: LD_ADDR_VAR 0 9
16740: PUSH
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 255
16750: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16751: LD_VAR 0 9
16755: PPUSH
16756: LD_VAR 0 2
16760: PPUSH
16761: CALL 16249 0 2
16765: NOT
16766: IFFALSE 16770
// exit ;
16768: GO 17472
// pom := GetBase ( depot ) ;
16770: LD_ADDR_VAR 0 10
16774: PUSH
16775: LD_VAR 0 1
16779: PPUSH
16780: CALL_OW 274
16784: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16785: LD_ADDR_VAR 0 11
16789: PUSH
16790: LD_VAR 0 2
16794: PPUSH
16795: LD_VAR 0 1
16799: PPUSH
16800: CALL_OW 248
16804: PPUSH
16805: CALL_OW 450
16809: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16810: LD_VAR 0 10
16814: PPUSH
16815: LD_INT 1
16817: PPUSH
16818: CALL_OW 275
16822: PUSH
16823: LD_VAR 0 11
16827: PUSH
16828: LD_INT 1
16830: ARRAY
16831: GREATEREQUAL
16832: PUSH
16833: LD_VAR 0 10
16837: PPUSH
16838: LD_INT 2
16840: PPUSH
16841: CALL_OW 275
16845: PUSH
16846: LD_VAR 0 11
16850: PUSH
16851: LD_INT 2
16853: ARRAY
16854: GREATEREQUAL
16855: AND
16856: PUSH
16857: LD_VAR 0 10
16861: PPUSH
16862: LD_INT 3
16864: PPUSH
16865: CALL_OW 275
16869: PUSH
16870: LD_VAR 0 11
16874: PUSH
16875: LD_INT 3
16877: ARRAY
16878: GREATEREQUAL
16879: AND
16880: NOT
16881: IFFALSE 16885
// exit ;
16883: GO 17472
// if GetBType ( depot ) = b_depot then
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 266
16894: PUSH
16895: LD_INT 0
16897: EQUAL
16898: IFFALSE 16910
// dist := 28 else
16900: LD_ADDR_VAR 0 14
16904: PUSH
16905: LD_INT 28
16907: ST_TO_ADDR
16908: GO 16918
// dist := 36 ;
16910: LD_ADDR_VAR 0 14
16914: PUSH
16915: LD_INT 36
16917: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16918: LD_VAR 0 1
16922: PPUSH
16923: LD_VAR 0 3
16927: PPUSH
16928: LD_VAR 0 4
16932: PPUSH
16933: CALL_OW 297
16937: PUSH
16938: LD_VAR 0 14
16942: GREATER
16943: IFFALSE 16947
// exit ;
16945: GO 17472
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16947: LD_ADDR_VAR 0 12
16951: PUSH
16952: LD_VAR 0 2
16956: PPUSH
16957: LD_VAR 0 3
16961: PPUSH
16962: LD_VAR 0 4
16966: PPUSH
16967: LD_VAR 0 5
16971: PPUSH
16972: LD_VAR 0 1
16976: PPUSH
16977: CALL_OW 248
16981: PPUSH
16982: LD_INT 0
16984: PPUSH
16985: CALL 17477 0 6
16989: ST_TO_ADDR
// if not hexes then
16990: LD_VAR 0 12
16994: NOT
16995: IFFALSE 16999
// exit ;
16997: GO 17472
// hex := GetHexInfo ( x , y ) ;
16999: LD_ADDR_VAR 0 15
17003: PUSH
17004: LD_VAR 0 3
17008: PPUSH
17009: LD_VAR 0 4
17013: PPUSH
17014: CALL_OW 546
17018: ST_TO_ADDR
// if hex [ 1 ] then
17019: LD_VAR 0 15
17023: PUSH
17024: LD_INT 1
17026: ARRAY
17027: IFFALSE 17031
// exit ;
17029: GO 17472
// height := hex [ 2 ] ;
17031: LD_ADDR_VAR 0 13
17035: PUSH
17036: LD_VAR 0 15
17040: PUSH
17041: LD_INT 2
17043: ARRAY
17044: ST_TO_ADDR
// for i = 1 to hexes do
17045: LD_ADDR_VAR 0 7
17049: PUSH
17050: DOUBLE
17051: LD_INT 1
17053: DEC
17054: ST_TO_ADDR
17055: LD_VAR 0 12
17059: PUSH
17060: FOR_TO
17061: IFFALSE 17391
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17063: LD_VAR 0 12
17067: PUSH
17068: LD_VAR 0 7
17072: ARRAY
17073: PUSH
17074: LD_INT 1
17076: ARRAY
17077: PPUSH
17078: LD_VAR 0 12
17082: PUSH
17083: LD_VAR 0 7
17087: ARRAY
17088: PUSH
17089: LD_INT 2
17091: ARRAY
17092: PPUSH
17093: CALL_OW 488
17097: NOT
17098: PUSH
17099: LD_VAR 0 12
17103: PUSH
17104: LD_VAR 0 7
17108: ARRAY
17109: PUSH
17110: LD_INT 1
17112: ARRAY
17113: PPUSH
17114: LD_VAR 0 12
17118: PUSH
17119: LD_VAR 0 7
17123: ARRAY
17124: PUSH
17125: LD_INT 2
17127: ARRAY
17128: PPUSH
17129: CALL_OW 428
17133: PUSH
17134: LD_INT 0
17136: GREATER
17137: OR
17138: PUSH
17139: LD_VAR 0 12
17143: PUSH
17144: LD_VAR 0 7
17148: ARRAY
17149: PUSH
17150: LD_INT 1
17152: ARRAY
17153: PPUSH
17154: LD_VAR 0 12
17158: PUSH
17159: LD_VAR 0 7
17163: ARRAY
17164: PUSH
17165: LD_INT 2
17167: ARRAY
17168: PPUSH
17169: CALL_OW 351
17173: OR
17174: IFFALSE 17180
// exit ;
17176: POP
17177: POP
17178: GO 17472
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17180: LD_ADDR_VAR 0 8
17184: PUSH
17185: LD_VAR 0 12
17189: PUSH
17190: LD_VAR 0 7
17194: ARRAY
17195: PUSH
17196: LD_INT 1
17198: ARRAY
17199: PPUSH
17200: LD_VAR 0 12
17204: PUSH
17205: LD_VAR 0 7
17209: ARRAY
17210: PUSH
17211: LD_INT 2
17213: ARRAY
17214: PPUSH
17215: CALL_OW 546
17219: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17220: LD_VAR 0 8
17224: PUSH
17225: LD_INT 1
17227: ARRAY
17228: PUSH
17229: LD_VAR 0 8
17233: PUSH
17234: LD_INT 2
17236: ARRAY
17237: PUSH
17238: LD_VAR 0 13
17242: PUSH
17243: LD_INT 2
17245: PLUS
17246: GREATER
17247: OR
17248: PUSH
17249: LD_VAR 0 8
17253: PUSH
17254: LD_INT 2
17256: ARRAY
17257: PUSH
17258: LD_VAR 0 13
17262: PUSH
17263: LD_INT 2
17265: MINUS
17266: LESS
17267: OR
17268: PUSH
17269: LD_VAR 0 8
17273: PUSH
17274: LD_INT 3
17276: ARRAY
17277: PUSH
17278: LD_INT 0
17280: PUSH
17281: LD_INT 8
17283: PUSH
17284: LD_INT 9
17286: PUSH
17287: LD_INT 10
17289: PUSH
17290: LD_INT 11
17292: PUSH
17293: LD_INT 12
17295: PUSH
17296: LD_INT 13
17298: PUSH
17299: LD_INT 16
17301: PUSH
17302: LD_INT 17
17304: PUSH
17305: LD_INT 18
17307: PUSH
17308: LD_INT 19
17310: PUSH
17311: LD_INT 20
17313: PUSH
17314: LD_INT 21
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: IN
17332: NOT
17333: OR
17334: PUSH
17335: LD_VAR 0 8
17339: PUSH
17340: LD_INT 5
17342: ARRAY
17343: NOT
17344: OR
17345: PUSH
17346: LD_VAR 0 8
17350: PUSH
17351: LD_INT 6
17353: ARRAY
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: LD_INT 2
17360: PUSH
17361: LD_INT 7
17363: PUSH
17364: LD_INT 9
17366: PUSH
17367: LD_INT 10
17369: PUSH
17370: LD_INT 11
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: IN
17381: NOT
17382: OR
17383: IFFALSE 17389
// exit ;
17385: POP
17386: POP
17387: GO 17472
// end ;
17389: GO 17060
17391: POP
17392: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17393: LD_VAR 0 9
17397: PPUSH
17398: LD_VAR 0 3
17402: PPUSH
17403: LD_VAR 0 4
17407: PPUSH
17408: LD_INT 20
17410: PPUSH
17411: CALL 9424 0 4
17415: PUSH
17416: LD_INT 4
17418: ARRAY
17419: IFFALSE 17423
// exit ;
17421: GO 17472
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17423: LD_VAR 0 2
17427: PUSH
17428: LD_INT 29
17430: PUSH
17431: LD_INT 30
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: IN
17438: PUSH
17439: LD_VAR 0 3
17443: PPUSH
17444: LD_VAR 0 4
17448: PPUSH
17449: LD_VAR 0 9
17453: PPUSH
17454: CALL_OW 440
17458: NOT
17459: AND
17460: IFFALSE 17464
// exit ;
17462: GO 17472
// result := true ;
17464: LD_ADDR_VAR 0 6
17468: PUSH
17469: LD_INT 1
17471: ST_TO_ADDR
// end ;
17472: LD_VAR 0 6
17476: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17477: LD_INT 0
17479: PPUSH
17480: PPUSH
17481: PPUSH
17482: PPUSH
17483: PPUSH
17484: PPUSH
17485: PPUSH
17486: PPUSH
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
17491: PPUSH
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
17500: PPUSH
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
17505: PPUSH
17506: PPUSH
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
17516: PPUSH
17517: PPUSH
17518: PPUSH
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
17524: PPUSH
17525: PPUSH
17526: PPUSH
17527: PPUSH
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
17533: PPUSH
17534: PPUSH
17535: PPUSH
17536: PPUSH
// result = [ ] ;
17537: LD_ADDR_VAR 0 7
17541: PUSH
17542: EMPTY
17543: ST_TO_ADDR
// temp_list = [ ] ;
17544: LD_ADDR_VAR 0 9
17548: PUSH
17549: EMPTY
17550: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17551: LD_VAR 0 4
17555: PUSH
17556: LD_INT 0
17558: PUSH
17559: LD_INT 1
17561: PUSH
17562: LD_INT 2
17564: PUSH
17565: LD_INT 3
17567: PUSH
17568: LD_INT 4
17570: PUSH
17571: LD_INT 5
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: IN
17582: NOT
17583: PUSH
17584: LD_VAR 0 1
17588: PUSH
17589: LD_INT 0
17591: PUSH
17592: LD_INT 1
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: IN
17599: PUSH
17600: LD_VAR 0 5
17604: PUSH
17605: LD_INT 1
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: LD_INT 3
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: LIST
17618: IN
17619: NOT
17620: AND
17621: OR
17622: IFFALSE 17626
// exit ;
17624: GO 36017
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17626: LD_VAR 0 1
17630: PUSH
17631: LD_INT 6
17633: PUSH
17634: LD_INT 7
17636: PUSH
17637: LD_INT 8
17639: PUSH
17640: LD_INT 13
17642: PUSH
17643: LD_INT 12
17645: PUSH
17646: LD_INT 15
17648: PUSH
17649: LD_INT 11
17651: PUSH
17652: LD_INT 14
17654: PUSH
17655: LD_INT 10
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: IN
17669: IFFALSE 17679
// btype = b_lab ;
17671: LD_ADDR_VAR 0 1
17675: PUSH
17676: LD_INT 6
17678: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17679: LD_VAR 0 6
17683: PUSH
17684: LD_INT 0
17686: PUSH
17687: LD_INT 1
17689: PUSH
17690: LD_INT 2
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: LIST
17697: IN
17698: NOT
17699: PUSH
17700: LD_VAR 0 1
17704: PUSH
17705: LD_INT 0
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: LD_INT 3
17716: PUSH
17717: LD_INT 6
17719: PUSH
17720: LD_INT 36
17722: PUSH
17723: LD_INT 4
17725: PUSH
17726: LD_INT 5
17728: PUSH
17729: LD_INT 31
17731: PUSH
17732: LD_INT 32
17734: PUSH
17735: LD_INT 33
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: IN
17751: NOT
17752: PUSH
17753: LD_VAR 0 6
17757: PUSH
17758: LD_INT 1
17760: EQUAL
17761: AND
17762: OR
17763: PUSH
17764: LD_VAR 0 1
17768: PUSH
17769: LD_INT 2
17771: PUSH
17772: LD_INT 3
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: IN
17779: NOT
17780: PUSH
17781: LD_VAR 0 6
17785: PUSH
17786: LD_INT 2
17788: EQUAL
17789: AND
17790: OR
17791: IFFALSE 17801
// mode = 0 ;
17793: LD_ADDR_VAR 0 6
17797: PUSH
17798: LD_INT 0
17800: ST_TO_ADDR
// case mode of 0 :
17801: LD_VAR 0 6
17805: PUSH
17806: LD_INT 0
17808: DOUBLE
17809: EQUAL
17810: IFTRUE 17814
17812: GO 29267
17814: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17815: LD_ADDR_VAR 0 11
17819: PUSH
17820: LD_INT 0
17822: PUSH
17823: LD_INT 0
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 0
17832: PUSH
17833: LD_INT 1
17835: NEG
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 1
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 0
17863: PUSH
17864: LD_INT 1
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 1
17873: NEG
17874: PUSH
17875: LD_INT 0
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 1
17884: NEG
17885: PUSH
17886: LD_INT 1
17888: NEG
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: LD_INT 2
17900: NEG
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 0
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 1
17919: PUSH
17920: LD_INT 1
17922: NEG
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: LD_INT 2
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 0
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 1
17950: NEG
17951: PUSH
17952: LD_INT 1
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 1
17961: PUSH
17962: LD_INT 3
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 0
17971: PUSH
17972: LD_INT 3
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 1
17981: NEG
17982: PUSH
17983: LD_INT 2
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18008: LD_ADDR_VAR 0 12
18012: PUSH
18013: LD_INT 0
18015: PUSH
18016: LD_INT 0
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 0
18025: PUSH
18026: LD_INT 1
18028: NEG
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 1
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: LD_INT 1
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: LD_INT 1
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 1
18066: NEG
18067: PUSH
18068: LD_INT 0
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 1
18077: NEG
18078: PUSH
18079: LD_INT 1
18081: NEG
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 2
18100: PUSH
18101: LD_INT 0
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 2
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: NEG
18121: PUSH
18122: LD_INT 1
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 2
18131: NEG
18132: PUSH
18133: LD_INT 0
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 2
18142: NEG
18143: PUSH
18144: LD_INT 1
18146: NEG
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 2
18154: NEG
18155: PUSH
18156: LD_INT 1
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 3
18165: NEG
18166: PUSH
18167: LD_INT 0
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 3
18176: NEG
18177: PUSH
18178: LD_INT 1
18180: NEG
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18204: LD_ADDR_VAR 0 13
18208: PUSH
18209: LD_INT 0
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: LD_INT 1
18224: NEG
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: LD_INT 0
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 0
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 1
18273: NEG
18274: PUSH
18275: LD_INT 1
18277: NEG
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 1
18285: NEG
18286: PUSH
18287: LD_INT 2
18289: NEG
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 2
18307: PUSH
18308: LD_INT 2
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: LD_INT 2
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 2
18327: NEG
18328: PUSH
18329: LD_INT 1
18331: NEG
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 2
18339: NEG
18340: PUSH
18341: LD_INT 2
18343: NEG
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 2
18351: NEG
18352: PUSH
18353: LD_INT 3
18355: NEG
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 3
18363: NEG
18364: PUSH
18365: LD_INT 2
18367: NEG
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 3
18375: NEG
18376: PUSH
18377: LD_INT 3
18379: NEG
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18403: LD_ADDR_VAR 0 14
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 0
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: LD_INT 1
18423: NEG
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 1
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 1
18461: NEG
18462: PUSH
18463: LD_INT 0
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 1
18472: NEG
18473: PUSH
18474: LD_INT 1
18476: NEG
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: NEG
18485: PUSH
18486: LD_INT 2
18488: NEG
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 0
18496: PUSH
18497: LD_INT 2
18499: NEG
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: LD_INT 1
18510: NEG
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 0
18528: PUSH
18529: LD_INT 2
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 1
18538: NEG
18539: PUSH
18540: LD_INT 1
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 1
18549: NEG
18550: PUSH
18551: LD_INT 3
18553: NEG
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: LD_INT 3
18564: NEG
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: LD_INT 2
18575: NEG
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18599: LD_ADDR_VAR 0 15
18603: PUSH
18604: LD_INT 0
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 0
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: LD_INT 0
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 1
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: LD_INT 1
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 1
18657: NEG
18658: PUSH
18659: LD_INT 0
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: LD_INT 1
18672: NEG
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 1
18680: PUSH
18681: LD_INT 1
18683: NEG
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 2
18691: PUSH
18692: LD_INT 0
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 2
18722: NEG
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 2
18733: NEG
18734: PUSH
18735: LD_INT 1
18737: NEG
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 3
18756: PUSH
18757: LD_INT 0
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 3
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18792: LD_ADDR_VAR 0 16
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: LD_INT 0
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 0
18809: PUSH
18810: LD_INT 1
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 1
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 1
18850: NEG
18851: PUSH
18852: LD_INT 0
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: LD_INT 1
18865: NEG
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 1
18873: NEG
18874: PUSH
18875: LD_INT 2
18877: NEG
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 2
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 2
18895: PUSH
18896: LD_INT 2
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: LD_INT 2
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 2
18915: NEG
18916: PUSH
18917: LD_INT 1
18919: NEG
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 2
18927: NEG
18928: PUSH
18929: LD_INT 2
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 3
18939: PUSH
18940: LD_INT 2
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 3
18949: PUSH
18950: LD_INT 3
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: LD_INT 3
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18985: LD_ADDR_VAR 0 17
18989: PUSH
18990: LD_INT 0
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 0
19002: PUSH
19003: LD_INT 1
19005: NEG
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: LD_INT 1
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 1
19043: NEG
19044: PUSH
19045: LD_INT 0
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 1
19054: NEG
19055: PUSH
19056: LD_INT 1
19058: NEG
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: LD_INT 2
19070: NEG
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 0
19078: PUSH
19079: LD_INT 2
19081: NEG
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: LD_INT 1
19092: NEG
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 2
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 0
19140: PUSH
19141: LD_INT 2
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 1
19150: NEG
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 2
19161: NEG
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 2
19172: NEG
19173: PUSH
19174: LD_INT 1
19176: NEG
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 2
19184: NEG
19185: PUSH
19186: LD_INT 2
19188: NEG
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19215: LD_ADDR_VAR 0 18
19219: PUSH
19220: LD_INT 0
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 0
19232: PUSH
19233: LD_INT 1
19235: NEG
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: NEG
19274: PUSH
19275: LD_INT 0
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 1
19284: NEG
19285: PUSH
19286: LD_INT 1
19288: NEG
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 1
19296: NEG
19297: PUSH
19298: LD_INT 2
19300: NEG
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 0
19308: PUSH
19309: LD_INT 2
19311: NEG
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: LD_INT 1
19322: NEG
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 2
19330: PUSH
19331: LD_INT 0
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 2
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 2
19391: NEG
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 2
19402: NEG
19403: PUSH
19404: LD_INT 1
19406: NEG
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 2
19414: NEG
19415: PUSH
19416: LD_INT 2
19418: NEG
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19445: LD_ADDR_VAR 0 19
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: LD_INT 0
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: LD_INT 1
19465: NEG
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: LD_INT 0
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 1
19514: NEG
19515: PUSH
19516: LD_INT 1
19518: NEG
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: LD_INT 2
19530: NEG
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: LD_INT 2
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: LD_INT 1
19552: NEG
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: LD_INT 0
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 2
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 0
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 1
19610: NEG
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 2
19621: NEG
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 2
19632: NEG
19633: PUSH
19634: LD_INT 1
19636: NEG
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 2
19644: NEG
19645: PUSH
19646: LD_INT 2
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19675: LD_ADDR_VAR 0 20
19679: PUSH
19680: LD_INT 0
19682: PUSH
19683: LD_INT 0
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 0
19692: PUSH
19693: LD_INT 1
19695: NEG
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: LD_INT 0
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 1
19733: NEG
19734: PUSH
19735: LD_INT 0
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 1
19744: NEG
19745: PUSH
19746: LD_INT 1
19748: NEG
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: LD_INT 2
19760: NEG
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: LD_INT 2
19771: NEG
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: LD_INT 0
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 2
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 2
19810: PUSH
19811: LD_INT 2
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 2
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 2
19851: NEG
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 2
19862: NEG
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 2
19874: NEG
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19905: LD_ADDR_VAR 0 21
19909: PUSH
19910: LD_INT 0
19912: PUSH
19913: LD_INT 0
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: LD_INT 1
19925: NEG
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: LD_INT 0
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 1
19963: NEG
19964: PUSH
19965: LD_INT 0
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 1
19974: NEG
19975: PUSH
19976: LD_INT 1
19978: NEG
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 1
19986: NEG
19987: PUSH
19988: LD_INT 2
19990: NEG
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 0
19998: PUSH
19999: LD_INT 2
20001: NEG
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 1
20009: PUSH
20010: LD_INT 1
20012: NEG
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 2
20020: PUSH
20021: LD_INT 0
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 2
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: NEG
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 2
20081: NEG
20082: PUSH
20083: LD_INT 0
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 2
20092: NEG
20093: PUSH
20094: LD_INT 1
20096: NEG
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 2
20104: NEG
20105: PUSH
20106: LD_INT 2
20108: NEG
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20135: LD_ADDR_VAR 0 22
20139: PUSH
20140: LD_INT 0
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: LD_INT 1
20155: NEG
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: LD_INT 0
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: LD_INT 1
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 1
20193: NEG
20194: PUSH
20195: LD_INT 0
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 1
20204: NEG
20205: PUSH
20206: LD_INT 1
20208: NEG
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 1
20216: NEG
20217: PUSH
20218: LD_INT 2
20220: NEG
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 0
20228: PUSH
20229: LD_INT 2
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 0
20290: PUSH
20291: LD_INT 2
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 1
20300: NEG
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 2
20311: NEG
20312: PUSH
20313: LD_INT 0
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 2
20322: NEG
20323: PUSH
20324: LD_INT 1
20326: NEG
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 2
20334: NEG
20335: PUSH
20336: LD_INT 2
20338: NEG
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20365: LD_ADDR_VAR 0 23
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: LD_INT 1
20385: NEG
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: LD_INT 1
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: LD_INT 0
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 1
20434: NEG
20435: PUSH
20436: LD_INT 1
20438: NEG
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: NEG
20447: PUSH
20448: LD_INT 2
20450: NEG
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 0
20458: PUSH
20459: LD_INT 2
20461: NEG
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 1
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 2
20500: PUSH
20501: LD_INT 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 1
20510: PUSH
20511: LD_INT 2
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: LD_INT 2
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 2
20541: NEG
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 2
20552: NEG
20553: PUSH
20554: LD_INT 1
20556: NEG
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 2
20564: NEG
20565: PUSH
20566: LD_INT 2
20568: NEG
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 2
20576: NEG
20577: PUSH
20578: LD_INT 3
20580: NEG
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: NEG
20589: PUSH
20590: LD_INT 3
20592: NEG
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: LD_INT 2
20603: NEG
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 2
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20645: LD_ADDR_VAR 0 24
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 0
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 0
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: LD_INT 1
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 1
20726: NEG
20727: PUSH
20728: LD_INT 2
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 0
20738: PUSH
20739: LD_INT 2
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 1
20749: PUSH
20750: LD_INT 1
20752: NEG
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 2
20760: PUSH
20761: LD_INT 0
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: PUSH
20771: LD_INT 1
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 2
20780: PUSH
20781: LD_INT 2
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: NEG
20811: PUSH
20812: LD_INT 1
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 2
20821: NEG
20822: PUSH
20823: LD_INT 0
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 2
20832: NEG
20833: PUSH
20834: LD_INT 1
20836: NEG
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: LD_INT 2
20848: NEG
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: LD_INT 2
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: LD_INT 1
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 3
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 3
20888: PUSH
20889: LD_INT 2
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20921: LD_ADDR_VAR 0 25
20925: PUSH
20926: LD_INT 0
20928: PUSH
20929: LD_INT 0
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 0
20938: PUSH
20939: LD_INT 1
20941: NEG
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: LD_INT 1
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: NEG
20980: PUSH
20981: LD_INT 0
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 1
20990: NEG
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 2
21017: NEG
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 2
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 1
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: LD_INT 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: NEG
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 2
21108: NEG
21109: PUSH
21110: LD_INT 1
21112: NEG
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 2
21120: NEG
21121: PUSH
21122: LD_INT 2
21124: NEG
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 3
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 3
21142: PUSH
21143: LD_INT 2
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 2
21152: PUSH
21153: LD_INT 3
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21195: LD_ADDR_VAR 0 26
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 1
21253: NEG
21254: PUSH
21255: LD_INT 0
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: LD_INT 1
21268: NEG
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: LD_INT 2
21280: NEG
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 0
21288: PUSH
21289: LD_INT 2
21291: NEG
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: LD_INT 1
21302: NEG
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 2
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 2
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 0
21350: PUSH
21351: LD_INT 2
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 1
21360: NEG
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 2
21371: NEG
21372: PUSH
21373: LD_INT 0
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 2
21382: NEG
21383: PUSH
21384: LD_INT 1
21386: NEG
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 2
21394: NEG
21395: PUSH
21396: LD_INT 2
21398: NEG
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 2
21406: PUSH
21407: LD_INT 3
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: LD_INT 3
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 1
21426: NEG
21427: PUSH
21428: LD_INT 2
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 2
21437: NEG
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21471: LD_ADDR_VAR 0 27
21475: PUSH
21476: LD_INT 0
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: LD_INT 1
21491: NEG
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 1
21529: NEG
21530: PUSH
21531: LD_INT 0
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 1
21540: NEG
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: LD_INT 2
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 0
21564: PUSH
21565: LD_INT 2
21567: NEG
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 1
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: LD_INT 2
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: LD_INT 2
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: NEG
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 2
21647: NEG
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 2
21658: NEG
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: NEG
21671: PUSH
21672: LD_INT 2
21674: NEG
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: LD_INT 2
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 2
21693: NEG
21694: PUSH
21695: LD_INT 1
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 3
21704: NEG
21705: PUSH
21706: LD_INT 1
21708: NEG
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 3
21716: NEG
21717: PUSH
21718: LD_INT 2
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21751: LD_ADDR_VAR 0 28
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: LD_INT 0
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: LD_INT 0
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: PUSH
21790: LD_INT 1
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 0
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 1
21820: NEG
21821: PUSH
21822: LD_INT 1
21824: NEG
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: LD_INT 2
21836: NEG
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: LD_INT 2
21847: NEG
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 1
21855: PUSH
21856: LD_INT 1
21858: NEG
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 2
21866: PUSH
21867: LD_INT 0
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 2
21876: PUSH
21877: LD_INT 1
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 2
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: LD_INT 2
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 0
21906: PUSH
21907: LD_INT 2
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: LD_INT 1
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 2
21927: NEG
21928: PUSH
21929: LD_INT 0
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 2
21938: NEG
21939: PUSH
21940: LD_INT 1
21942: NEG
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 2
21950: NEG
21951: PUSH
21952: LD_INT 2
21954: NEG
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 2
21962: NEG
21963: PUSH
21964: LD_INT 3
21966: NEG
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: NEG
21975: PUSH
21976: LD_INT 3
21978: NEG
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 3
21986: NEG
21987: PUSH
21988: LD_INT 1
21990: NEG
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 3
21998: NEG
21999: PUSH
22000: LD_INT 2
22002: NEG
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22033: LD_ADDR_VAR 0 29
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: LD_INT 0
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 0
22050: PUSH
22051: LD_INT 1
22053: NEG
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 1
22091: NEG
22092: PUSH
22093: LD_INT 0
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 1
22102: NEG
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: NEG
22115: PUSH
22116: LD_INT 2
22118: NEG
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: LD_INT 2
22129: NEG
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: LD_INT 0
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 2
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 2
22199: NEG
22200: PUSH
22201: LD_INT 1
22203: NEG
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 2
22211: NEG
22212: PUSH
22213: LD_INT 2
22215: NEG
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: NEG
22224: PUSH
22225: LD_INT 3
22227: NEG
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 1
22238: NEG
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 3
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: LD_INT 3
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 1
22266: NEG
22267: PUSH
22268: LD_INT 2
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 3
22277: NEG
22278: PUSH
22279: LD_INT 2
22281: NEG
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22312: LD_ADDR_VAR 0 30
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: LD_INT 0
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 0
22329: PUSH
22330: LD_INT 1
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: LD_INT 1
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 0
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 1
22370: NEG
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 1
22381: NEG
22382: PUSH
22383: LD_INT 1
22385: NEG
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 1
22393: NEG
22394: PUSH
22395: LD_INT 2
22397: NEG
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 0
22405: PUSH
22406: LD_INT 2
22408: NEG
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: LD_INT 0
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 2
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: NEG
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 2
22478: NEG
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 2
22489: NEG
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: LD_INT 3
22505: NEG
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 1
22513: PUSH
22514: LD_INT 2
22516: NEG
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 3
22524: PUSH
22525: LD_INT 2
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 2
22534: PUSH
22535: LD_INT 3
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 2
22544: NEG
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 3
22555: NEG
22556: PUSH
22557: LD_INT 1
22559: NEG
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22590: LD_ADDR_VAR 0 31
22594: PUSH
22595: LD_INT 0
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 0
22607: PUSH
22608: LD_INT 1
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 0
22638: PUSH
22639: LD_INT 1
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 1
22648: NEG
22649: PUSH
22650: LD_INT 0
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 1
22659: NEG
22660: PUSH
22661: LD_INT 1
22663: NEG
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: LD_INT 2
22675: NEG
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: PUSH
22684: LD_INT 1
22686: NEG
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 2
22694: PUSH
22695: LD_INT 0
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 2
22704: PUSH
22705: LD_INT 1
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 2
22714: PUSH
22715: LD_INT 2
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: LD_INT 2
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 1
22744: NEG
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 2
22755: NEG
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 2
22767: NEG
22768: PUSH
22769: LD_INT 2
22771: NEG
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 2
22779: NEG
22780: PUSH
22781: LD_INT 3
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 2
22791: PUSH
22792: LD_INT 1
22794: NEG
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 3
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 1
22812: PUSH
22813: LD_INT 3
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 3
22833: NEG
22834: PUSH
22835: LD_INT 2
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22868: LD_ADDR_VAR 0 32
22872: PUSH
22873: LD_INT 0
22875: PUSH
22876: LD_INT 0
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 0
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 0
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 1
22926: NEG
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 1
22937: NEG
22938: PUSH
22939: LD_INT 1
22941: NEG
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: LD_INT 2
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 0
22961: PUSH
22962: LD_INT 2
22964: NEG
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: LD_INT 1
22975: NEG
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 2
22983: PUSH
22984: LD_INT 1
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: NEG
23035: PUSH
23036: LD_INT 0
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 2
23045: NEG
23046: PUSH
23047: LD_INT 1
23049: NEG
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 1
23057: NEG
23058: PUSH
23059: LD_INT 3
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 3
23080: PUSH
23081: LD_INT 2
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 2
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 2
23100: NEG
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 3
23111: NEG
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23146: LD_ADDR_VAR 0 33
23150: PUSH
23151: LD_INT 0
23153: PUSH
23154: LD_INT 0
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: LD_INT 1
23166: NEG
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 1
23204: NEG
23205: PUSH
23206: LD_INT 0
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 1
23215: NEG
23216: PUSH
23217: LD_INT 1
23219: NEG
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 1
23227: NEG
23228: PUSH
23229: LD_INT 2
23231: NEG
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 0
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 2
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 0
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: NEG
23291: PUSH
23292: LD_INT 1
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 2
23301: NEG
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: NEG
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 2
23324: NEG
23325: PUSH
23326: LD_INT 2
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 2
23336: NEG
23337: PUSH
23338: LD_INT 3
23340: NEG
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: LD_INT 1
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 3
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: LD_INT 3
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 1
23379: NEG
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 3
23390: NEG
23391: PUSH
23392: LD_INT 2
23394: NEG
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23425: LD_ADDR_VAR 0 34
23429: PUSH
23430: LD_INT 0
23432: PUSH
23433: LD_INT 0
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: LD_INT 1
23445: NEG
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: LD_INT 1
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: NEG
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: NEG
23507: PUSH
23508: LD_INT 2
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 0
23518: PUSH
23519: LD_INT 2
23521: NEG
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: LD_INT 1
23532: NEG
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 2
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: NEG
23571: PUSH
23572: LD_INT 1
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 2
23581: NEG
23582: PUSH
23583: LD_INT 0
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 2
23592: NEG
23593: PUSH
23594: LD_INT 1
23596: NEG
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 2
23604: NEG
23605: PUSH
23606: LD_INT 2
23608: NEG
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 1
23616: NEG
23617: PUSH
23618: LD_INT 3
23620: NEG
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 2
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 3
23639: PUSH
23640: LD_INT 2
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: LD_INT 3
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 2
23659: NEG
23660: PUSH
23661: LD_INT 1
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 3
23670: NEG
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23705: LD_ADDR_VAR 0 35
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: LD_INT 0
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: LD_INT 1
23725: NEG
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: LD_INT 1
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 1
23763: NEG
23764: PUSH
23765: LD_INT 0
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: LD_INT 1
23778: NEG
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 2
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 2
23796: NEG
23797: PUSH
23798: LD_INT 1
23800: NEG
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23817: LD_ADDR_VAR 0 36
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 1
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 1
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 0
23865: PUSH
23866: LD_INT 1
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 1
23875: NEG
23876: PUSH
23877: LD_INT 0
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: LD_INT 1
23890: NEG
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 1
23898: NEG
23899: PUSH
23900: LD_INT 2
23902: NEG
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23929: LD_ADDR_VAR 0 37
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: LD_INT 1
23949: NEG
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 1
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 1
23987: NEG
23988: PUSH
23989: LD_INT 0
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24041: LD_ADDR_VAR 0 38
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: LD_INT 1
24061: NEG
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 1
24099: NEG
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 2
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: NEG
24133: PUSH
24134: LD_INT 1
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24153: LD_ADDR_VAR 0 39
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: NEG
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: LD_INT 1
24226: NEG
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: NEG
24235: PUSH
24236: LD_INT 2
24238: NEG
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24265: LD_ADDR_VAR 0 40
24269: PUSH
24270: LD_INT 0
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: LD_INT 0
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: NEG
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: NEG
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24377: LD_ADDR_VAR 0 41
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: LD_INT 1
24450: NEG
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 1
24458: NEG
24459: PUSH
24460: LD_INT 2
24462: NEG
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 2
24501: PUSH
24502: LD_INT 2
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: LD_INT 2
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 2
24532: NEG
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 2
24543: NEG
24544: PUSH
24545: LD_INT 1
24547: NEG
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 2
24555: NEG
24556: PUSH
24557: LD_INT 2
24559: NEG
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 2
24567: NEG
24568: PUSH
24569: LD_INT 3
24571: NEG
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 2
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 3
24590: PUSH
24591: LD_INT 0
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 3
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 3
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 3
24620: PUSH
24621: LD_INT 3
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 2
24630: PUSH
24631: LD_INT 3
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 2
24640: NEG
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 3
24651: NEG
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 3
24662: NEG
24663: PUSH
24664: LD_INT 1
24666: NEG
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 3
24674: NEG
24675: PUSH
24676: LD_INT 2
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 3
24686: NEG
24687: PUSH
24688: LD_INT 3
24690: NEG
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24727: LD_ADDR_VAR 0 42
24731: PUSH
24732: LD_INT 0
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 2
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: LD_INT 2
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: LD_INT 2
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 2
24917: NEG
24918: PUSH
24919: LD_INT 3
24921: NEG
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: NEG
24930: PUSH
24931: LD_INT 3
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 3
24944: NEG
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: LD_INT 2
24955: NEG
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 3
24963: PUSH
24964: LD_INT 2
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 3
24973: PUSH
24974: LD_INT 3
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: LD_INT 3
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: LD_INT 3
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 3
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: LD_INT 2
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 3
25024: NEG
25025: PUSH
25026: LD_INT 2
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 3
25036: NEG
25037: PUSH
25038: LD_INT 3
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25077: LD_ADDR_VAR 0 43
25081: PUSH
25082: LD_INT 0
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: LD_INT 1
25150: NEG
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: LD_INT 2
25162: NEG
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: LD_INT 2
25173: NEG
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 2
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: LD_INT 2
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: LD_INT 2
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 2
25243: NEG
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: NEG
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: PUSH
25268: LD_INT 3
25270: NEG
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: LD_INT 3
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 2
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 3
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 3
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 3
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: LD_INT 3
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: LD_INT 2
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 2
25362: NEG
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 3
25373: NEG
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 3
25384: NEG
25385: PUSH
25386: LD_INT 1
25388: NEG
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25425: LD_ADDR_VAR 0 44
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: LD_INT 1
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 0
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: LD_INT 1
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 1
25506: NEG
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: LD_INT 0
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: NEG
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: NEG
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 2
25603: NEG
25604: PUSH
25605: LD_INT 2
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 2
25615: NEG
25616: PUSH
25617: LD_INT 3
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 2
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 3
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 3
25648: PUSH
25649: LD_INT 1
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 3
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 3
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: LD_INT 3
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 2
25688: NEG
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 3
25699: NEG
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 3
25710: NEG
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 3
25722: NEG
25723: PUSH
25724: LD_INT 2
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 3
25734: NEG
25735: PUSH
25736: LD_INT 3
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25775: LD_ADDR_VAR 0 45
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: LD_INT 0
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: LD_INT 1
25848: NEG
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: LD_INT 2
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: LD_INT 2
25871: NEG
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 2
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: LD_INT 2
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: LD_INT 2
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: LD_INT 2
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 2
25953: NEG
25954: PUSH
25955: LD_INT 2
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: LD_INT 3
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: PUSH
25979: LD_INT 3
25981: NEG
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: LD_INT 3
25992: NEG
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: LD_INT 2
26003: NEG
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 3
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 3
26021: PUSH
26022: LD_INT 3
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 3
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: LD_INT 3
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 3
26072: NEG
26073: PUSH
26074: LD_INT 2
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 3
26084: NEG
26085: PUSH
26086: LD_INT 3
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26125: LD_ADDR_VAR 0 46
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: LD_INT 0
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: LD_INT 1
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 0
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: LD_INT 2
26210: NEG
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: LD_INT 2
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: LD_INT 1
26232: NEG
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 1
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: LD_INT 2
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: NEG
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: LD_INT 3
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 0
26326: PUSH
26327: LD_INT 3
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 2
26348: PUSH
26349: LD_INT 1
26351: NEG
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 3
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 3
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: LD_INT 3
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 3
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: LD_INT 2
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 2
26410: NEG
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 3
26421: NEG
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 3
26432: NEG
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26473: LD_ADDR_VAR 0 47
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: LD_INT 0
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: LD_INT 1
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: LD_INT 0
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: LD_INT 2
26558: NEG
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: LD_INT 2
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 2
26588: NEG
26589: PUSH
26590: LD_INT 1
26592: NEG
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 2
26600: NEG
26601: PUSH
26602: LD_INT 2
26604: NEG
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26624: LD_ADDR_VAR 0 48
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 1
26693: NEG
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: LD_INT 2
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: LD_INT 2
26720: NEG
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 2
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 2
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26771: LD_ADDR_VAR 0 49
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 0
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: LD_INT 1
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 1
26855: NEG
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 2
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: LD_INT 2
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: LD_INT 2
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26915: LD_ADDR_VAR 0 50
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: LD_INT 1
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: LD_INT 1
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: LD_INT 0
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 1
26988: NEG
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 2
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: LD_INT 2
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: LD_INT 2
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27059: LD_ADDR_VAR 0 51
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 2
27171: NEG
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 2
27182: NEG
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27206: LD_ADDR_VAR 0 52
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: LD_INT 2
27291: NEG
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 2
27310: NEG
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 2
27333: NEG
27334: PUSH
27335: LD_INT 2
27337: NEG
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27357: LD_ADDR_VAR 0 53
27361: PUSH
27362: LD_INT 0
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 1
27426: NEG
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: LD_INT 2
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: LD_INT 2
27453: NEG
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: LD_INT 1
27464: NEG
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 2
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 2
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 2
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: LD_INT 2
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: NEG
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 2
27544: NEG
27545: PUSH
27546: LD_INT 1
27548: NEG
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 2
27556: NEG
27557: PUSH
27558: LD_INT 2
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27587: LD_ADDR_VAR 0 54
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: NEG
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 2
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 2
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: LD_INT 2
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 2
27763: NEG
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 2
27774: NEG
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 2
27786: NEG
27787: PUSH
27788: LD_INT 2
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27817: LD_ADDR_VAR 0 55
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: LD_INT 1
27837: NEG
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: LD_INT 0
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: LD_INT 1
27890: NEG
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 1
27898: NEG
27899: PUSH
27900: LD_INT 2
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: LD_INT 2
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 1
27921: PUSH
27922: LD_INT 1
27924: NEG
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 2
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: LD_INT 2
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: LD_INT 2
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: NEG
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 2
27993: NEG
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 2
28004: NEG
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 2
28016: NEG
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28047: LD_ADDR_VAR 0 56
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: NEG
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 1
28116: NEG
28117: PUSH
28118: LD_INT 1
28120: NEG
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: LD_INT 2
28132: NEG
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: LD_INT 2
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 2
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: LD_INT 1
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 2
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 2
28223: NEG
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 2
28234: NEG
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: NEG
28247: PUSH
28248: LD_INT 2
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28277: LD_ADDR_VAR 0 57
28281: PUSH
28282: LD_INT 0
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 1
28335: NEG
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: NEG
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: LD_INT 2
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: LD_INT 1
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 2
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: LD_INT 2
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: LD_INT 2
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 2
28453: NEG
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 2
28464: NEG
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 2
28476: NEG
28477: PUSH
28478: LD_INT 2
28480: NEG
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28507: LD_ADDR_VAR 0 58
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 1
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: NEG
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: LD_INT 1
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: LD_INT 2
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: LD_INT 2
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 2
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: LD_INT 1
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: LD_INT 2
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: LD_INT 2
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: LD_INT 2
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 2
28683: NEG
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 2
28694: NEG
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 2
28706: NEG
28707: PUSH
28708: LD_INT 2
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28737: LD_ADDR_VAR 0 59
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: LD_INT 0
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: LD_INT 1
28757: NEG
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: LD_INT 1
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: LD_INT 1
28810: NEG
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28825: LD_ADDR_VAR 0 60
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: LD_INT 0
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: LD_INT 1
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: LD_INT 1
28898: NEG
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28913: LD_ADDR_VAR 0 61
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: LD_INT 0
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: LD_INT 1
28933: NEG
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29001: LD_ADDR_VAR 0 62
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29089: LD_ADDR_VAR 0 63
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29177: LD_ADDR_VAR 0 64
29181: PUSH
29182: LD_INT 0
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: LD_INT 1
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: LD_INT 1
29250: NEG
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: ST_TO_ADDR
// end ; 1 :
29265: GO 35162
29267: LD_INT 1
29269: DOUBLE
29270: EQUAL
29271: IFTRUE 29275
29273: GO 31898
29275: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29276: LD_ADDR_VAR 0 11
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: LD_INT 3
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 0
29295: PUSH
29296: LD_INT 3
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: LD_INT 2
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29320: LD_ADDR_VAR 0 12
29324: PUSH
29325: LD_INT 2
29327: PUSH
29328: LD_INT 1
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 3
29338: PUSH
29339: LD_INT 0
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 3
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: LIST
29360: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29361: LD_ADDR_VAR 0 13
29365: PUSH
29366: LD_INT 3
29368: PUSH
29369: LD_INT 2
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 3
29378: PUSH
29379: LD_INT 3
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 2
29388: PUSH
29389: LD_INT 3
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29401: LD_ADDR_VAR 0 14
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: LD_INT 3
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: LD_INT 3
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 1
29428: NEG
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: LIST
29441: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29442: LD_ADDR_VAR 0 15
29446: PUSH
29447: LD_INT 2
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 3
29460: NEG
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 3
29471: NEG
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29486: LD_ADDR_VAR 0 16
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: LD_INT 3
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 3
29505: NEG
29506: PUSH
29507: LD_INT 2
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 3
29517: NEG
29518: PUSH
29519: LD_INT 3
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29532: LD_ADDR_VAR 0 17
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: LD_INT 3
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: LD_INT 3
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: LD_INT 2
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: LIST
29575: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29576: LD_ADDR_VAR 0 18
29580: PUSH
29581: LD_INT 2
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 3
29594: PUSH
29595: LD_INT 0
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 3
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: LIST
29616: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29617: LD_ADDR_VAR 0 19
29621: PUSH
29622: LD_INT 3
29624: PUSH
29625: LD_INT 2
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 3
29634: PUSH
29635: LD_INT 3
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 2
29644: PUSH
29645: LD_INT 3
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: LIST
29656: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29657: LD_ADDR_VAR 0 20
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: LD_INT 3
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 0
29674: PUSH
29675: LD_INT 3
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 1
29684: NEG
29685: PUSH
29686: LD_INT 2
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: LIST
29697: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29698: LD_ADDR_VAR 0 21
29702: PUSH
29703: LD_INT 2
29705: NEG
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 3
29716: NEG
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 3
29727: NEG
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29742: LD_ADDR_VAR 0 22
29746: PUSH
29747: LD_INT 2
29749: NEG
29750: PUSH
29751: LD_INT 3
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 3
29761: NEG
29762: PUSH
29763: LD_INT 2
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 3
29773: NEG
29774: PUSH
29775: LD_INT 3
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29788: LD_ADDR_VAR 0 23
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: LD_INT 3
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: LD_INT 4
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: LD_INT 3
29821: NEG
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: LIST
29831: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29832: LD_ADDR_VAR 0 24
29836: PUSH
29837: LD_INT 3
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 4
29860: PUSH
29861: LD_INT 1
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29873: LD_ADDR_VAR 0 25
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: LD_INT 3
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 4
29890: PUSH
29891: LD_INT 3
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: LD_INT 4
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29913: LD_ADDR_VAR 0 26
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 3
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: LD_INT 4
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: LD_INT 3
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29954: LD_ADDR_VAR 0 27
29958: PUSH
29959: LD_INT 3
29961: NEG
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 3
29972: NEG
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 4
29983: NEG
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29998: LD_ADDR_VAR 0 28
30002: PUSH
30003: LD_INT 3
30005: NEG
30006: PUSH
30007: LD_INT 3
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 3
30017: NEG
30018: PUSH
30019: LD_INT 4
30021: NEG
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 4
30029: NEG
30030: PUSH
30031: LD_INT 3
30033: NEG
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30044: LD_ADDR_VAR 0 29
30048: PUSH
30049: LD_INT 1
30051: NEG
30052: PUSH
30053: LD_INT 3
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: LD_INT 3
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 1
30074: PUSH
30075: LD_INT 2
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: NEG
30086: PUSH
30087: LD_INT 4
30089: NEG
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: LD_INT 4
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: LD_INT 3
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: LD_INT 5
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: LD_INT 5
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: LD_INT 4
30145: NEG
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: LD_INT 6
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: LD_INT 6
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: LD_INT 5
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30199: LD_ADDR_VAR 0 30
30203: PUSH
30204: LD_INT 2
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 3
30217: PUSH
30218: LD_INT 0
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 3
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 3
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 4
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 4
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 4
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 5
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 5
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 5
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 6
30310: PUSH
30311: LD_INT 0
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 6
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30342: LD_ADDR_VAR 0 31
30346: PUSH
30347: LD_INT 3
30349: PUSH
30350: LD_INT 2
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 3
30359: PUSH
30360: LD_INT 3
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: LD_INT 3
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 4
30379: PUSH
30380: LD_INT 3
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 4
30389: PUSH
30390: LD_INT 4
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: PUSH
30400: LD_INT 4
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 5
30409: PUSH
30410: LD_INT 4
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 5
30419: PUSH
30420: LD_INT 5
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 4
30429: PUSH
30430: LD_INT 5
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 6
30439: PUSH
30440: LD_INT 5
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 6
30449: PUSH
30450: LD_INT 6
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 5
30459: PUSH
30460: LD_INT 6
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30481: LD_ADDR_VAR 0 32
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: LD_INT 3
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 1
30508: NEG
30509: PUSH
30510: LD_INT 2
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: LD_INT 4
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: LD_INT 4
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: NEG
30540: PUSH
30541: LD_INT 3
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 5
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 5
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: LD_INT 4
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 6
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: LD_INT 6
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 1
30601: NEG
30602: PUSH
30603: LD_INT 5
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30624: LD_ADDR_VAR 0 33
30628: PUSH
30629: LD_INT 2
30631: NEG
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 3
30642: NEG
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 3
30653: NEG
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 3
30665: NEG
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 4
30676: NEG
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 4
30687: NEG
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 4
30699: NEG
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 5
30710: NEG
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 5
30721: NEG
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 5
30733: NEG
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 6
30744: NEG
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 6
30755: NEG
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30779: LD_ADDR_VAR 0 34
30783: PUSH
30784: LD_INT 2
30786: NEG
30787: PUSH
30788: LD_INT 3
30790: NEG
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 3
30798: NEG
30799: PUSH
30800: LD_INT 2
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 3
30810: NEG
30811: PUSH
30812: LD_INT 3
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: LD_INT 4
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 4
30834: NEG
30835: PUSH
30836: LD_INT 3
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 4
30846: NEG
30847: PUSH
30848: LD_INT 4
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 4
30858: NEG
30859: PUSH
30860: LD_INT 5
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 5
30870: NEG
30871: PUSH
30872: LD_INT 4
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 5
30882: NEG
30883: PUSH
30884: LD_INT 5
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 5
30894: NEG
30895: PUSH
30896: LD_INT 6
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 6
30906: NEG
30907: PUSH
30908: LD_INT 5
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 6
30918: NEG
30919: PUSH
30920: LD_INT 6
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30942: LD_ADDR_VAR 0 41
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 1
30972: PUSH
30973: LD_INT 2
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: LIST
30985: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30986: LD_ADDR_VAR 0 42
30990: PUSH
30991: LD_INT 2
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 2
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 3
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: LIST
31026: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31027: LD_ADDR_VAR 0 43
31031: PUSH
31032: LD_INT 2
31034: PUSH
31035: LD_INT 2
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: LD_INT 2
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: LD_INT 3
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31067: LD_ADDR_VAR 0 44
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: LD_INT 3
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: LD_INT 2
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31108: LD_ADDR_VAR 0 45
31112: PUSH
31113: LD_INT 2
31115: NEG
31116: PUSH
31117: LD_INT 0
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 2
31126: NEG
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 3
31137: NEG
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31152: LD_ADDR_VAR 0 46
31156: PUSH
31157: LD_INT 2
31159: NEG
31160: PUSH
31161: LD_INT 2
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 2
31171: NEG
31172: PUSH
31173: LD_INT 3
31175: NEG
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 3
31183: NEG
31184: PUSH
31185: LD_INT 2
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: LIST
31197: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31198: LD_ADDR_VAR 0 47
31202: PUSH
31203: LD_INT 2
31205: NEG
31206: PUSH
31207: LD_INT 3
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: LD_INT 3
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31231: LD_ADDR_VAR 0 48
31235: PUSH
31236: LD_INT 1
31238: PUSH
31239: LD_INT 2
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31262: LD_ADDR_VAR 0 49
31266: PUSH
31267: LD_INT 3
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 3
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31291: LD_ADDR_VAR 0 50
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 3
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 1
31308: PUSH
31309: LD_INT 3
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31320: LD_ADDR_VAR 0 51
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: LD_INT 2
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 2
31338: NEG
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31351: LD_ADDR_VAR 0 52
31355: PUSH
31356: LD_INT 3
31358: NEG
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 3
31370: NEG
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31384: LD_ADDR_VAR 0 53
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: LD_INT 3
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: LD_INT 3
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: LD_INT 2
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: LIST
31427: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31428: LD_ADDR_VAR 0 54
31432: PUSH
31433: LD_INT 2
31435: PUSH
31436: LD_INT 1
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 3
31456: PUSH
31457: LD_INT 1
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: LIST
31468: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31469: LD_ADDR_VAR 0 55
31473: PUSH
31474: LD_INT 3
31476: PUSH
31477: LD_INT 2
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 3
31486: PUSH
31487: LD_INT 3
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: LD_INT 3
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: LIST
31508: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31509: LD_ADDR_VAR 0 56
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: LD_INT 3
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: LD_INT 2
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31550: LD_ADDR_VAR 0 57
31554: PUSH
31555: LD_INT 2
31557: NEG
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 3
31568: NEG
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 3
31579: NEG
31580: PUSH
31581: LD_INT 1
31583: NEG
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31594: LD_ADDR_VAR 0 58
31598: PUSH
31599: LD_INT 2
31601: NEG
31602: PUSH
31603: LD_INT 3
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 3
31613: NEG
31614: PUSH
31615: LD_INT 2
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 3
31625: NEG
31626: PUSH
31627: LD_INT 3
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31640: LD_ADDR_VAR 0 59
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: LD_INT 2
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: LD_INT 1
31673: NEG
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31684: LD_ADDR_VAR 0 60
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: LIST
31724: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31725: LD_ADDR_VAR 0 61
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: LD_INT 1
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31765: LD_ADDR_VAR 0 62
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: LD_INT 2
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31806: LD_ADDR_VAR 0 63
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: NEG
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 2
31835: NEG
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31850: LD_ADDR_VAR 0 64
31854: PUSH
31855: LD_INT 1
31857: NEG
31858: PUSH
31859: LD_INT 2
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: NEG
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: LD_INT 2
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: ST_TO_ADDR
// end ; 2 :
31896: GO 35162
31898: LD_INT 2
31900: DOUBLE
31901: EQUAL
31902: IFTRUE 31906
31904: GO 35161
31906: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31907: LD_ADDR_VAR 0 29
31911: PUSH
31912: LD_INT 4
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 4
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 5
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 5
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 4
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 3
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 3
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 3
31986: PUSH
31987: LD_INT 2
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: LD_INT 2
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 3
32007: PUSH
32008: LD_INT 3
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 3
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 4
32027: PUSH
32028: LD_INT 3
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 4
32037: PUSH
32038: LD_INT 4
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 3
32047: PUSH
32048: LD_INT 4
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 2
32057: PUSH
32058: LD_INT 3
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 2
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 4
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: LD_INT 4
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: LD_INT 4
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: LD_INT 4
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: LD_INT 5
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: LD_INT 5
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: LD_INT 4
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 1
32158: NEG
32159: PUSH
32160: LD_INT 3
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 2
32169: PUSH
32170: LD_INT 5
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 2
32179: NEG
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 3
32190: NEG
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 3
32201: NEG
32202: PUSH
32203: LD_INT 1
32205: NEG
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 2
32213: NEG
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 2
32224: NEG
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 3
32235: NEG
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 4
32246: NEG
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 4
32257: NEG
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 4
32269: NEG
32270: PUSH
32271: LD_INT 2
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 4
32292: NEG
32293: PUSH
32294: LD_INT 4
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 4
32304: NEG
32305: PUSH
32306: LD_INT 5
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 3
32316: NEG
32317: PUSH
32318: LD_INT 4
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: NEG
32329: PUSH
32330: LD_INT 3
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 4
32340: NEG
32341: PUSH
32342: LD_INT 3
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 5
32352: NEG
32353: PUSH
32354: LD_INT 4
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 5
32364: NEG
32365: PUSH
32366: LD_INT 5
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 3
32376: NEG
32377: PUSH
32378: LD_INT 5
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 5
32388: NEG
32389: PUSH
32390: LD_INT 3
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32445: LD_ADDR_VAR 0 30
32449: PUSH
32450: LD_INT 4
32452: PUSH
32453: LD_INT 4
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 4
32462: PUSH
32463: LD_INT 3
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 5
32472: PUSH
32473: LD_INT 4
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 5
32482: PUSH
32483: LD_INT 5
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 4
32492: PUSH
32493: LD_INT 5
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: LD_INT 4
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: LD_INT 3
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 5
32522: PUSH
32523: LD_INT 3
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 3
32532: PUSH
32533: LD_INT 5
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: LD_INT 3
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: LD_INT 3
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: PUSH
32573: LD_INT 4
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: LD_INT 4
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 1
32592: NEG
32593: PUSH
32594: LD_INT 3
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: NEG
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: LD_INT 4
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 4
32635: NEG
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 4
32646: NEG
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 3
32658: NEG
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 3
32669: NEG
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 4
32680: NEG
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 5
32691: NEG
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 5
32702: NEG
32703: PUSH
32704: LD_INT 1
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 5
32714: NEG
32715: PUSH
32716: LD_INT 2
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 3
32726: NEG
32727: PUSH
32728: LD_INT 2
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 3
32737: NEG
32738: PUSH
32739: LD_INT 3
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 3
32749: NEG
32750: PUSH
32751: LD_INT 4
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: NEG
32762: PUSH
32763: LD_INT 3
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: LD_INT 2
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 3
32785: NEG
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 4
32797: NEG
32798: PUSH
32799: LD_INT 3
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 4
32809: NEG
32810: PUSH
32811: LD_INT 4
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: NEG
32822: PUSH
32823: LD_INT 4
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 4
32833: NEG
32834: PUSH
32835: LD_INT 2
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 0
32845: PUSH
32846: LD_INT 4
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 5
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 4
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: LD_INT 3
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: LD_INT 3
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: LD_INT 4
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: LD_INT 5
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: LD_INT 3
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: LD_INT 5
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32992: LD_ADDR_VAR 0 31
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: LD_INT 4
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: LD_INT 3
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: LD_INT 4
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 5
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 5
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: LD_INT 4
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: LD_INT 3
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 2
33071: PUSH
33072: LD_INT 5
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 3
33092: NEG
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 3
33103: NEG
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: NEG
33127: PUSH
33128: LD_INT 1
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 3
33137: NEG
33138: PUSH
33139: LD_INT 1
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 4
33148: NEG
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 4
33159: NEG
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 4
33171: NEG
33172: PUSH
33173: LD_INT 2
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 2
33183: NEG
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 4
33194: NEG
33195: PUSH
33196: LD_INT 4
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 4
33206: NEG
33207: PUSH
33208: LD_INT 5
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 3
33218: NEG
33219: PUSH
33220: LD_INT 4
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 3
33230: NEG
33231: PUSH
33232: LD_INT 3
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 4
33242: NEG
33243: PUSH
33244: LD_INT 3
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 5
33254: NEG
33255: PUSH
33256: LD_INT 4
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 5
33266: NEG
33267: PUSH
33268: LD_INT 5
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 3
33278: NEG
33279: PUSH
33280: LD_INT 5
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 5
33290: NEG
33291: PUSH
33292: LD_INT 3
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: LD_INT 3
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: LD_INT 4
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: LD_INT 3
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: LD_INT 2
33338: NEG
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: LD_INT 2
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: LD_INT 3
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: LD_INT 4
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: LD_INT 4
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 4
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 4
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 5
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 5
33435: PUSH
33436: LD_INT 1
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 4
33445: PUSH
33446: LD_INT 1
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 3
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 3
33476: PUSH
33477: LD_INT 2
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 5
33487: PUSH
33488: LD_INT 2
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33542: LD_ADDR_VAR 0 32
33546: PUSH
33547: LD_INT 4
33549: NEG
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 4
33560: NEG
33561: PUSH
33562: LD_INT 1
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 3
33572: NEG
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 3
33583: NEG
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 4
33594: NEG
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 5
33605: NEG
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 5
33616: NEG
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 5
33628: NEG
33629: PUSH
33630: LD_INT 2
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 3
33640: NEG
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 3
33651: NEG
33652: PUSH
33653: LD_INT 3
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 3
33663: NEG
33664: PUSH
33665: LD_INT 4
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: LD_INT 3
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: NEG
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 3
33699: NEG
33700: PUSH
33701: LD_INT 2
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 4
33711: NEG
33712: PUSH
33713: LD_INT 3
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 4
33723: NEG
33724: PUSH
33725: LD_INT 4
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 2
33735: NEG
33736: PUSH
33737: LD_INT 4
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 4
33747: NEG
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: LD_INT 4
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: LD_INT 5
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: LD_INT 4
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: LD_INT 3
33795: NEG
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: LD_INT 3
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: LD_INT 4
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: LD_INT 5
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: LD_INT 3
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 2
33849: NEG
33850: PUSH
33851: LD_INT 5
33853: NEG
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 3
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 4
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 4
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 3
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 2
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: LD_INT 1
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 2
33933: PUSH
33934: LD_INT 2
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 4
33944: PUSH
33945: LD_INT 2
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 4
33954: PUSH
33955: LD_INT 4
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 4
33964: PUSH
33965: LD_INT 3
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 5
33974: PUSH
33975: LD_INT 4
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 5
33984: PUSH
33985: LD_INT 5
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 4
33994: PUSH
33995: LD_INT 5
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 3
34004: PUSH
34005: LD_INT 4
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 3
34014: PUSH
34015: LD_INT 3
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 5
34024: PUSH
34025: LD_INT 3
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 3
34034: PUSH
34035: LD_INT 5
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34089: LD_ADDR_VAR 0 33
34093: PUSH
34094: LD_INT 4
34096: NEG
34097: PUSH
34098: LD_INT 4
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 4
34108: NEG
34109: PUSH
34110: LD_INT 5
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 3
34120: NEG
34121: PUSH
34122: LD_INT 4
34124: NEG
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 3
34132: NEG
34133: PUSH
34134: LD_INT 3
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 4
34144: NEG
34145: PUSH
34146: LD_INT 3
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 5
34156: NEG
34157: PUSH
34158: LD_INT 4
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 5
34168: NEG
34169: PUSH
34170: LD_INT 5
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 3
34180: NEG
34181: PUSH
34182: LD_INT 5
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 5
34192: NEG
34193: PUSH
34194: LD_INT 3
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 3
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: LD_INT 4
34218: NEG
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 1
34226: PUSH
34227: LD_INT 3
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: LD_INT 2
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: LD_INT 2
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: LD_INT 3
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: LD_INT 4
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: LD_INT 2
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 2
34294: NEG
34295: PUSH
34296: LD_INT 4
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 4
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 4
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 5
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 5
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 4
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 3
34357: PUSH
34358: LD_INT 0
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 3
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 3
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 5
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 3
34399: PUSH
34400: LD_INT 3
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 3
34409: PUSH
34410: LD_INT 2
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 4
34419: PUSH
34420: LD_INT 3
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 4
34429: PUSH
34430: LD_INT 4
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 3
34439: PUSH
34440: LD_INT 4
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: LD_INT 3
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 2
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 4
34469: PUSH
34470: LD_INT 2
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 2
34479: PUSH
34480: LD_INT 4
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: LD_INT 4
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 3
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: LD_INT 4
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: LD_INT 5
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 5
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: LD_INT 4
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 3
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: LD_INT 5
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 2
34571: NEG
34572: PUSH
34573: LD_INT 3
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34627: LD_ADDR_VAR 0 34
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 4
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: LD_INT 5
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: LD_INT 4
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: LD_INT 3
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: LD_INT 3
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 4
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: LD_INT 5
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: PUSH
34714: LD_INT 3
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: LD_INT 5
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 3
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 4
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 4
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: PUSH
34809: LD_INT 2
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 4
34819: PUSH
34820: LD_INT 2
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 4
34829: PUSH
34830: LD_INT 4
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 4
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 5
34849: PUSH
34850: LD_INT 4
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 5
34859: PUSH
34860: LD_INT 5
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 4
34869: PUSH
34870: LD_INT 5
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: LD_INT 4
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 3
34889: PUSH
34890: LD_INT 3
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 5
34899: PUSH
34900: LD_INT 3
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 3
34909: PUSH
34910: LD_INT 5
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: LD_INT 3
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 2
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: LD_INT 3
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: LD_INT 4
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 4
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: LD_INT 3
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: LD_INT 2
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 2
34991: PUSH
34992: LD_INT 4
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: NEG
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 4
35012: NEG
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 4
35023: NEG
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 3
35035: NEG
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 3
35046: NEG
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 4
35057: NEG
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 5
35068: NEG
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 5
35079: NEG
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 5
35091: NEG
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 3
35103: NEG
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: ST_TO_ADDR
// end ; end ;
35159: GO 35162
35161: POP
// case btype of b_depot , b_warehouse :
35162: LD_VAR 0 1
35166: PUSH
35167: LD_INT 0
35169: DOUBLE
35170: EQUAL
35171: IFTRUE 35181
35173: LD_INT 1
35175: DOUBLE
35176: EQUAL
35177: IFTRUE 35181
35179: GO 35382
35181: POP
// case nation of nation_american :
35182: LD_VAR 0 5
35186: PUSH
35187: LD_INT 1
35189: DOUBLE
35190: EQUAL
35191: IFTRUE 35195
35193: GO 35251
35195: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35196: LD_ADDR_VAR 0 9
35200: PUSH
35201: LD_VAR 0 11
35205: PUSH
35206: LD_VAR 0 12
35210: PUSH
35211: LD_VAR 0 13
35215: PUSH
35216: LD_VAR 0 14
35220: PUSH
35221: LD_VAR 0 15
35225: PUSH
35226: LD_VAR 0 16
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: PUSH
35239: LD_VAR 0 4
35243: PUSH
35244: LD_INT 1
35246: PLUS
35247: ARRAY
35248: ST_TO_ADDR
35249: GO 35380
35251: LD_INT 2
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35259
35257: GO 35315
35259: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35260: LD_ADDR_VAR 0 9
35264: PUSH
35265: LD_VAR 0 17
35269: PUSH
35270: LD_VAR 0 18
35274: PUSH
35275: LD_VAR 0 19
35279: PUSH
35280: LD_VAR 0 20
35284: PUSH
35285: LD_VAR 0 21
35289: PUSH
35290: LD_VAR 0 22
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: PUSH
35303: LD_VAR 0 4
35307: PUSH
35308: LD_INT 1
35310: PLUS
35311: ARRAY
35312: ST_TO_ADDR
35313: GO 35380
35315: LD_INT 3
35317: DOUBLE
35318: EQUAL
35319: IFTRUE 35323
35321: GO 35379
35323: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35324: LD_ADDR_VAR 0 9
35328: PUSH
35329: LD_VAR 0 23
35333: PUSH
35334: LD_VAR 0 24
35338: PUSH
35339: LD_VAR 0 25
35343: PUSH
35344: LD_VAR 0 26
35348: PUSH
35349: LD_VAR 0 27
35353: PUSH
35354: LD_VAR 0 28
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: PUSH
35367: LD_VAR 0 4
35371: PUSH
35372: LD_INT 1
35374: PLUS
35375: ARRAY
35376: ST_TO_ADDR
35377: GO 35380
35379: POP
35380: GO 35935
35382: LD_INT 2
35384: DOUBLE
35385: EQUAL
35386: IFTRUE 35396
35388: LD_INT 3
35390: DOUBLE
35391: EQUAL
35392: IFTRUE 35396
35394: GO 35452
35396: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35397: LD_ADDR_VAR 0 9
35401: PUSH
35402: LD_VAR 0 29
35406: PUSH
35407: LD_VAR 0 30
35411: PUSH
35412: LD_VAR 0 31
35416: PUSH
35417: LD_VAR 0 32
35421: PUSH
35422: LD_VAR 0 33
35426: PUSH
35427: LD_VAR 0 34
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: PUSH
35440: LD_VAR 0 4
35444: PUSH
35445: LD_INT 1
35447: PLUS
35448: ARRAY
35449: ST_TO_ADDR
35450: GO 35935
35452: LD_INT 16
35454: DOUBLE
35455: EQUAL
35456: IFTRUE 35514
35458: LD_INT 17
35460: DOUBLE
35461: EQUAL
35462: IFTRUE 35514
35464: LD_INT 18
35466: DOUBLE
35467: EQUAL
35468: IFTRUE 35514
35470: LD_INT 19
35472: DOUBLE
35473: EQUAL
35474: IFTRUE 35514
35476: LD_INT 22
35478: DOUBLE
35479: EQUAL
35480: IFTRUE 35514
35482: LD_INT 20
35484: DOUBLE
35485: EQUAL
35486: IFTRUE 35514
35488: LD_INT 21
35490: DOUBLE
35491: EQUAL
35492: IFTRUE 35514
35494: LD_INT 23
35496: DOUBLE
35497: EQUAL
35498: IFTRUE 35514
35500: LD_INT 24
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35514
35506: LD_INT 25
35508: DOUBLE
35509: EQUAL
35510: IFTRUE 35514
35512: GO 35570
35514: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35515: LD_ADDR_VAR 0 9
35519: PUSH
35520: LD_VAR 0 35
35524: PUSH
35525: LD_VAR 0 36
35529: PUSH
35530: LD_VAR 0 37
35534: PUSH
35535: LD_VAR 0 38
35539: PUSH
35540: LD_VAR 0 39
35544: PUSH
35545: LD_VAR 0 40
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: PUSH
35558: LD_VAR 0 4
35562: PUSH
35563: LD_INT 1
35565: PLUS
35566: ARRAY
35567: ST_TO_ADDR
35568: GO 35935
35570: LD_INT 6
35572: DOUBLE
35573: EQUAL
35574: IFTRUE 35626
35576: LD_INT 7
35578: DOUBLE
35579: EQUAL
35580: IFTRUE 35626
35582: LD_INT 8
35584: DOUBLE
35585: EQUAL
35586: IFTRUE 35626
35588: LD_INT 13
35590: DOUBLE
35591: EQUAL
35592: IFTRUE 35626
35594: LD_INT 12
35596: DOUBLE
35597: EQUAL
35598: IFTRUE 35626
35600: LD_INT 15
35602: DOUBLE
35603: EQUAL
35604: IFTRUE 35626
35606: LD_INT 11
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35626
35612: LD_INT 14
35614: DOUBLE
35615: EQUAL
35616: IFTRUE 35626
35618: LD_INT 10
35620: DOUBLE
35621: EQUAL
35622: IFTRUE 35626
35624: GO 35682
35626: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35627: LD_ADDR_VAR 0 9
35631: PUSH
35632: LD_VAR 0 41
35636: PUSH
35637: LD_VAR 0 42
35641: PUSH
35642: LD_VAR 0 43
35646: PUSH
35647: LD_VAR 0 44
35651: PUSH
35652: LD_VAR 0 45
35656: PUSH
35657: LD_VAR 0 46
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: PUSH
35670: LD_VAR 0 4
35674: PUSH
35675: LD_INT 1
35677: PLUS
35678: ARRAY
35679: ST_TO_ADDR
35680: GO 35935
35682: LD_INT 36
35684: DOUBLE
35685: EQUAL
35686: IFTRUE 35690
35688: GO 35746
35690: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35691: LD_ADDR_VAR 0 9
35695: PUSH
35696: LD_VAR 0 47
35700: PUSH
35701: LD_VAR 0 48
35705: PUSH
35706: LD_VAR 0 49
35710: PUSH
35711: LD_VAR 0 50
35715: PUSH
35716: LD_VAR 0 51
35720: PUSH
35721: LD_VAR 0 52
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: PUSH
35734: LD_VAR 0 4
35738: PUSH
35739: LD_INT 1
35741: PLUS
35742: ARRAY
35743: ST_TO_ADDR
35744: GO 35935
35746: LD_INT 4
35748: DOUBLE
35749: EQUAL
35750: IFTRUE 35772
35752: LD_INT 5
35754: DOUBLE
35755: EQUAL
35756: IFTRUE 35772
35758: LD_INT 34
35760: DOUBLE
35761: EQUAL
35762: IFTRUE 35772
35764: LD_INT 37
35766: DOUBLE
35767: EQUAL
35768: IFTRUE 35772
35770: GO 35828
35772: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35773: LD_ADDR_VAR 0 9
35777: PUSH
35778: LD_VAR 0 53
35782: PUSH
35783: LD_VAR 0 54
35787: PUSH
35788: LD_VAR 0 55
35792: PUSH
35793: LD_VAR 0 56
35797: PUSH
35798: LD_VAR 0 57
35802: PUSH
35803: LD_VAR 0 58
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: PUSH
35816: LD_VAR 0 4
35820: PUSH
35821: LD_INT 1
35823: PLUS
35824: ARRAY
35825: ST_TO_ADDR
35826: GO 35935
35828: LD_INT 31
35830: DOUBLE
35831: EQUAL
35832: IFTRUE 35878
35834: LD_INT 32
35836: DOUBLE
35837: EQUAL
35838: IFTRUE 35878
35840: LD_INT 33
35842: DOUBLE
35843: EQUAL
35844: IFTRUE 35878
35846: LD_INT 27
35848: DOUBLE
35849: EQUAL
35850: IFTRUE 35878
35852: LD_INT 26
35854: DOUBLE
35855: EQUAL
35856: IFTRUE 35878
35858: LD_INT 28
35860: DOUBLE
35861: EQUAL
35862: IFTRUE 35878
35864: LD_INT 29
35866: DOUBLE
35867: EQUAL
35868: IFTRUE 35878
35870: LD_INT 30
35872: DOUBLE
35873: EQUAL
35874: IFTRUE 35878
35876: GO 35934
35878: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35879: LD_ADDR_VAR 0 9
35883: PUSH
35884: LD_VAR 0 59
35888: PUSH
35889: LD_VAR 0 60
35893: PUSH
35894: LD_VAR 0 61
35898: PUSH
35899: LD_VAR 0 62
35903: PUSH
35904: LD_VAR 0 63
35908: PUSH
35909: LD_VAR 0 64
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: PUSH
35922: LD_VAR 0 4
35926: PUSH
35927: LD_INT 1
35929: PLUS
35930: ARRAY
35931: ST_TO_ADDR
35932: GO 35935
35934: POP
// temp_list2 = [ ] ;
35935: LD_ADDR_VAR 0 10
35939: PUSH
35940: EMPTY
35941: ST_TO_ADDR
// for i in temp_list do
35942: LD_ADDR_VAR 0 8
35946: PUSH
35947: LD_VAR 0 9
35951: PUSH
35952: FOR_IN
35953: IFFALSE 36005
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35955: LD_ADDR_VAR 0 10
35959: PUSH
35960: LD_VAR 0 10
35964: PUSH
35965: LD_VAR 0 8
35969: PUSH
35970: LD_INT 1
35972: ARRAY
35973: PUSH
35974: LD_VAR 0 2
35978: PLUS
35979: PUSH
35980: LD_VAR 0 8
35984: PUSH
35985: LD_INT 2
35987: ARRAY
35988: PUSH
35989: LD_VAR 0 3
35993: PLUS
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: EMPTY
36000: LIST
36001: ADD
36002: ST_TO_ADDR
36003: GO 35952
36005: POP
36006: POP
// result = temp_list2 ;
36007: LD_ADDR_VAR 0 7
36011: PUSH
36012: LD_VAR 0 10
36016: ST_TO_ADDR
// end ;
36017: LD_VAR 0 7
36021: RET
// export function EnemyInRange ( unit , dist ) ; begin
36022: LD_INT 0
36024: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36025: LD_ADDR_VAR 0 3
36029: PUSH
36030: LD_VAR 0 1
36034: PPUSH
36035: CALL_OW 255
36039: PPUSH
36040: LD_VAR 0 1
36044: PPUSH
36045: CALL_OW 250
36049: PPUSH
36050: LD_VAR 0 1
36054: PPUSH
36055: CALL_OW 251
36059: PPUSH
36060: LD_VAR 0 2
36064: PPUSH
36065: CALL 9424 0 4
36069: PUSH
36070: LD_INT 4
36072: ARRAY
36073: ST_TO_ADDR
// end ;
36074: LD_VAR 0 3
36078: RET
// export function PlayerSeeMe ( unit ) ; begin
36079: LD_INT 0
36081: PPUSH
// result := See ( your_side , unit ) ;
36082: LD_ADDR_VAR 0 2
36086: PUSH
36087: LD_OWVAR 2
36091: PPUSH
36092: LD_VAR 0 1
36096: PPUSH
36097: CALL_OW 292
36101: ST_TO_ADDR
// end ;
36102: LD_VAR 0 2
36106: RET
// export function ReverseDir ( unit ) ; begin
36107: LD_INT 0
36109: PPUSH
// if not unit then
36110: LD_VAR 0 1
36114: NOT
36115: IFFALSE 36119
// exit ;
36117: GO 36142
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36119: LD_ADDR_VAR 0 2
36123: PUSH
36124: LD_VAR 0 1
36128: PPUSH
36129: CALL_OW 254
36133: PUSH
36134: LD_INT 3
36136: PLUS
36137: PUSH
36138: LD_INT 6
36140: MOD
36141: ST_TO_ADDR
// end ;
36142: LD_VAR 0 2
36146: RET
// export function ReverseArray ( array ) ; var i ; begin
36147: LD_INT 0
36149: PPUSH
36150: PPUSH
// if not array then
36151: LD_VAR 0 1
36155: NOT
36156: IFFALSE 36160
// exit ;
36158: GO 36215
// result := [ ] ;
36160: LD_ADDR_VAR 0 2
36164: PUSH
36165: EMPTY
36166: ST_TO_ADDR
// for i := array downto 1 do
36167: LD_ADDR_VAR 0 3
36171: PUSH
36172: DOUBLE
36173: LD_VAR 0 1
36177: INC
36178: ST_TO_ADDR
36179: LD_INT 1
36181: PUSH
36182: FOR_DOWNTO
36183: IFFALSE 36213
// result := Join ( result , array [ i ] ) ;
36185: LD_ADDR_VAR 0 2
36189: PUSH
36190: LD_VAR 0 2
36194: PPUSH
36195: LD_VAR 0 1
36199: PUSH
36200: LD_VAR 0 3
36204: ARRAY
36205: PPUSH
36206: CALL 40859 0 2
36210: ST_TO_ADDR
36211: GO 36182
36213: POP
36214: POP
// end ;
36215: LD_VAR 0 2
36219: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36220: LD_INT 0
36222: PPUSH
36223: PPUSH
36224: PPUSH
36225: PPUSH
36226: PPUSH
36227: PPUSH
// if not unit or not hexes then
36228: LD_VAR 0 1
36232: NOT
36233: PUSH
36234: LD_VAR 0 2
36238: NOT
36239: OR
36240: IFFALSE 36244
// exit ;
36242: GO 36367
// dist := 9999 ;
36244: LD_ADDR_VAR 0 5
36248: PUSH
36249: LD_INT 9999
36251: ST_TO_ADDR
// for i = 1 to hexes do
36252: LD_ADDR_VAR 0 4
36256: PUSH
36257: DOUBLE
36258: LD_INT 1
36260: DEC
36261: ST_TO_ADDR
36262: LD_VAR 0 2
36266: PUSH
36267: FOR_TO
36268: IFFALSE 36355
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36270: LD_ADDR_VAR 0 6
36274: PUSH
36275: LD_VAR 0 1
36279: PPUSH
36280: LD_VAR 0 2
36284: PUSH
36285: LD_VAR 0 4
36289: ARRAY
36290: PUSH
36291: LD_INT 1
36293: ARRAY
36294: PPUSH
36295: LD_VAR 0 2
36299: PUSH
36300: LD_VAR 0 4
36304: ARRAY
36305: PUSH
36306: LD_INT 2
36308: ARRAY
36309: PPUSH
36310: CALL_OW 297
36314: ST_TO_ADDR
// if tdist < dist then
36315: LD_VAR 0 6
36319: PUSH
36320: LD_VAR 0 5
36324: LESS
36325: IFFALSE 36353
// begin hex := hexes [ i ] ;
36327: LD_ADDR_VAR 0 8
36331: PUSH
36332: LD_VAR 0 2
36336: PUSH
36337: LD_VAR 0 4
36341: ARRAY
36342: ST_TO_ADDR
// dist := tdist ;
36343: LD_ADDR_VAR 0 5
36347: PUSH
36348: LD_VAR 0 6
36352: ST_TO_ADDR
// end ; end ;
36353: GO 36267
36355: POP
36356: POP
// result := hex ;
36357: LD_ADDR_VAR 0 3
36361: PUSH
36362: LD_VAR 0 8
36366: ST_TO_ADDR
// end ;
36367: LD_VAR 0 3
36371: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36372: LD_INT 0
36374: PPUSH
36375: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36376: LD_VAR 0 1
36380: NOT
36381: PUSH
36382: LD_VAR 0 1
36386: PUSH
36387: LD_INT 21
36389: PUSH
36390: LD_INT 2
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 23
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PPUSH
36411: CALL_OW 69
36415: IN
36416: NOT
36417: OR
36418: IFFALSE 36422
// exit ;
36420: GO 36469
// for i = 1 to 3 do
36422: LD_ADDR_VAR 0 3
36426: PUSH
36427: DOUBLE
36428: LD_INT 1
36430: DEC
36431: ST_TO_ADDR
36432: LD_INT 3
36434: PUSH
36435: FOR_TO
36436: IFFALSE 36467
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36438: LD_VAR 0 1
36442: PPUSH
36443: CALL_OW 250
36447: PPUSH
36448: LD_VAR 0 1
36452: PPUSH
36453: CALL_OW 251
36457: PPUSH
36458: LD_INT 1
36460: PPUSH
36461: CALL_OW 453
36465: GO 36435
36467: POP
36468: POP
// end ;
36469: LD_VAR 0 2
36473: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36474: LD_INT 0
36476: PPUSH
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36482: LD_VAR 0 1
36486: NOT
36487: PUSH
36488: LD_VAR 0 2
36492: NOT
36493: OR
36494: PUSH
36495: LD_VAR 0 1
36499: PPUSH
36500: CALL_OW 314
36504: OR
36505: IFFALSE 36509
// exit ;
36507: GO 36976
// if GetLives ( i ) < 250 then
36509: LD_VAR 0 4
36513: PPUSH
36514: CALL_OW 256
36518: PUSH
36519: LD_INT 250
36521: LESS
36522: IFFALSE 36535
// begin ComAutodestruct ( i ) ;
36524: LD_VAR 0 4
36528: PPUSH
36529: CALL 36372 0 1
// exit ;
36533: GO 36976
// end ; x := GetX ( enemy_unit ) ;
36535: LD_ADDR_VAR 0 7
36539: PUSH
36540: LD_VAR 0 2
36544: PPUSH
36545: CALL_OW 250
36549: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36550: LD_ADDR_VAR 0 8
36554: PUSH
36555: LD_VAR 0 2
36559: PPUSH
36560: CALL_OW 251
36564: ST_TO_ADDR
// if not x or not y then
36565: LD_VAR 0 7
36569: NOT
36570: PUSH
36571: LD_VAR 0 8
36575: NOT
36576: OR
36577: IFFALSE 36581
// exit ;
36579: GO 36976
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36581: LD_ADDR_VAR 0 6
36585: PUSH
36586: LD_VAR 0 7
36590: PPUSH
36591: LD_INT 0
36593: PPUSH
36594: LD_INT 4
36596: PPUSH
36597: CALL_OW 272
36601: PUSH
36602: LD_VAR 0 8
36606: PPUSH
36607: LD_INT 0
36609: PPUSH
36610: LD_INT 4
36612: PPUSH
36613: CALL_OW 273
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_VAR 0 7
36626: PPUSH
36627: LD_INT 1
36629: PPUSH
36630: LD_INT 4
36632: PPUSH
36633: CALL_OW 272
36637: PUSH
36638: LD_VAR 0 8
36642: PPUSH
36643: LD_INT 1
36645: PPUSH
36646: LD_INT 4
36648: PPUSH
36649: CALL_OW 273
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_VAR 0 7
36662: PPUSH
36663: LD_INT 2
36665: PPUSH
36666: LD_INT 4
36668: PPUSH
36669: CALL_OW 272
36673: PUSH
36674: LD_VAR 0 8
36678: PPUSH
36679: LD_INT 2
36681: PPUSH
36682: LD_INT 4
36684: PPUSH
36685: CALL_OW 273
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_VAR 0 7
36698: PPUSH
36699: LD_INT 3
36701: PPUSH
36702: LD_INT 4
36704: PPUSH
36705: CALL_OW 272
36709: PUSH
36710: LD_VAR 0 8
36714: PPUSH
36715: LD_INT 3
36717: PPUSH
36718: LD_INT 4
36720: PPUSH
36721: CALL_OW 273
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_VAR 0 7
36734: PPUSH
36735: LD_INT 4
36737: PPUSH
36738: LD_INT 4
36740: PPUSH
36741: CALL_OW 272
36745: PUSH
36746: LD_VAR 0 8
36750: PPUSH
36751: LD_INT 4
36753: PPUSH
36754: LD_INT 4
36756: PPUSH
36757: CALL_OW 273
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_VAR 0 7
36770: PPUSH
36771: LD_INT 5
36773: PPUSH
36774: LD_INT 4
36776: PPUSH
36777: CALL_OW 272
36781: PUSH
36782: LD_VAR 0 8
36786: PPUSH
36787: LD_INT 5
36789: PPUSH
36790: LD_INT 4
36792: PPUSH
36793: CALL_OW 273
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: ST_TO_ADDR
// for i = tmp downto 1 do
36810: LD_ADDR_VAR 0 4
36814: PUSH
36815: DOUBLE
36816: LD_VAR 0 6
36820: INC
36821: ST_TO_ADDR
36822: LD_INT 1
36824: PUSH
36825: FOR_DOWNTO
36826: IFFALSE 36927
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36828: LD_VAR 0 6
36832: PUSH
36833: LD_VAR 0 4
36837: ARRAY
36838: PUSH
36839: LD_INT 1
36841: ARRAY
36842: PPUSH
36843: LD_VAR 0 6
36847: PUSH
36848: LD_VAR 0 4
36852: ARRAY
36853: PUSH
36854: LD_INT 2
36856: ARRAY
36857: PPUSH
36858: CALL_OW 488
36862: NOT
36863: PUSH
36864: LD_VAR 0 6
36868: PUSH
36869: LD_VAR 0 4
36873: ARRAY
36874: PUSH
36875: LD_INT 1
36877: ARRAY
36878: PPUSH
36879: LD_VAR 0 6
36883: PUSH
36884: LD_VAR 0 4
36888: ARRAY
36889: PUSH
36890: LD_INT 2
36892: ARRAY
36893: PPUSH
36894: CALL_OW 428
36898: PUSH
36899: LD_INT 0
36901: NONEQUAL
36902: OR
36903: IFFALSE 36925
// tmp := Delete ( tmp , i ) ;
36905: LD_ADDR_VAR 0 6
36909: PUSH
36910: LD_VAR 0 6
36914: PPUSH
36915: LD_VAR 0 4
36919: PPUSH
36920: CALL_OW 3
36924: ST_TO_ADDR
36925: GO 36825
36927: POP
36928: POP
// j := GetClosestHex ( unit , tmp ) ;
36929: LD_ADDR_VAR 0 5
36933: PUSH
36934: LD_VAR 0 1
36938: PPUSH
36939: LD_VAR 0 6
36943: PPUSH
36944: CALL 36220 0 2
36948: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36949: LD_VAR 0 1
36953: PPUSH
36954: LD_VAR 0 5
36958: PUSH
36959: LD_INT 1
36961: ARRAY
36962: PPUSH
36963: LD_VAR 0 5
36967: PUSH
36968: LD_INT 2
36970: ARRAY
36971: PPUSH
36972: CALL_OW 111
// end ;
36976: LD_VAR 0 3
36980: RET
// export function PrepareApemanSoldier ( ) ; begin
36981: LD_INT 0
36983: PPUSH
// uc_nation := 0 ;
36984: LD_ADDR_OWVAR 21
36988: PUSH
36989: LD_INT 0
36991: ST_TO_ADDR
// hc_sex := sex_male ;
36992: LD_ADDR_OWVAR 27
36996: PUSH
36997: LD_INT 1
36999: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37000: LD_ADDR_OWVAR 28
37004: PUSH
37005: LD_INT 15
37007: ST_TO_ADDR
// hc_gallery :=  ;
37008: LD_ADDR_OWVAR 33
37012: PUSH
37013: LD_STRING 
37015: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37016: LD_ADDR_OWVAR 31
37020: PUSH
37021: LD_INT 0
37023: PPUSH
37024: LD_INT 3
37026: PPUSH
37027: CALL_OW 12
37031: PUSH
37032: LD_INT 0
37034: PPUSH
37035: LD_INT 3
37037: PPUSH
37038: CALL_OW 12
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: ST_TO_ADDR
// end ;
37055: LD_VAR 0 1
37059: RET
// export function PrepareApemanEngineer ( ) ; begin
37060: LD_INT 0
37062: PPUSH
// uc_nation := 0 ;
37063: LD_ADDR_OWVAR 21
37067: PUSH
37068: LD_INT 0
37070: ST_TO_ADDR
// hc_sex := sex_male ;
37071: LD_ADDR_OWVAR 27
37075: PUSH
37076: LD_INT 1
37078: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37079: LD_ADDR_OWVAR 28
37083: PUSH
37084: LD_INT 16
37086: ST_TO_ADDR
// hc_gallery :=  ;
37087: LD_ADDR_OWVAR 33
37091: PUSH
37092: LD_STRING 
37094: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37095: LD_ADDR_OWVAR 31
37099: PUSH
37100: LD_INT 0
37102: PPUSH
37103: LD_INT 3
37105: PPUSH
37106: CALL_OW 12
37110: PUSH
37111: LD_INT 0
37113: PPUSH
37114: LD_INT 3
37116: PPUSH
37117: CALL_OW 12
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: ST_TO_ADDR
// end ;
37134: LD_VAR 0 1
37138: RET
// export function PrepareApeman ( agressivity ) ; begin
37139: LD_INT 0
37141: PPUSH
// uc_side := 0 ;
37142: LD_ADDR_OWVAR 20
37146: PUSH
37147: LD_INT 0
37149: ST_TO_ADDR
// uc_nation := 0 ;
37150: LD_ADDR_OWVAR 21
37154: PUSH
37155: LD_INT 0
37157: ST_TO_ADDR
// hc_sex := sex_male ;
37158: LD_ADDR_OWVAR 27
37162: PUSH
37163: LD_INT 1
37165: ST_TO_ADDR
// hc_class := class_apeman ;
37166: LD_ADDR_OWVAR 28
37170: PUSH
37171: LD_INT 12
37173: ST_TO_ADDR
// hc_gallery :=  ;
37174: LD_ADDR_OWVAR 33
37178: PUSH
37179: LD_STRING 
37181: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37182: LD_ADDR_OWVAR 35
37186: PUSH
37187: LD_VAR 0 1
37191: NEG
37192: PPUSH
37193: LD_VAR 0 1
37197: PPUSH
37198: CALL_OW 12
37202: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37203: LD_ADDR_OWVAR 31
37207: PUSH
37208: LD_INT 0
37210: PPUSH
37211: LD_INT 3
37213: PPUSH
37214: CALL_OW 12
37218: PUSH
37219: LD_INT 0
37221: PPUSH
37222: LD_INT 3
37224: PPUSH
37225: CALL_OW 12
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: ST_TO_ADDR
// end ;
37242: LD_VAR 0 2
37246: RET
// export function PrepareTiger ( agressivity ) ; begin
37247: LD_INT 0
37249: PPUSH
// uc_side := 0 ;
37250: LD_ADDR_OWVAR 20
37254: PUSH
37255: LD_INT 0
37257: ST_TO_ADDR
// uc_nation := 0 ;
37258: LD_ADDR_OWVAR 21
37262: PUSH
37263: LD_INT 0
37265: ST_TO_ADDR
// hc_class := class_tiger ;
37266: LD_ADDR_OWVAR 28
37270: PUSH
37271: LD_INT 14
37273: ST_TO_ADDR
// hc_gallery :=  ;
37274: LD_ADDR_OWVAR 33
37278: PUSH
37279: LD_STRING 
37281: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37282: LD_ADDR_OWVAR 35
37286: PUSH
37287: LD_VAR 0 1
37291: NEG
37292: PPUSH
37293: LD_VAR 0 1
37297: PPUSH
37298: CALL_OW 12
37302: ST_TO_ADDR
// end ;
37303: LD_VAR 0 2
37307: RET
// export function PrepareEnchidna ( ) ; begin
37308: LD_INT 0
37310: PPUSH
// uc_side := 0 ;
37311: LD_ADDR_OWVAR 20
37315: PUSH
37316: LD_INT 0
37318: ST_TO_ADDR
// uc_nation := 0 ;
37319: LD_ADDR_OWVAR 21
37323: PUSH
37324: LD_INT 0
37326: ST_TO_ADDR
// hc_class := class_baggie ;
37327: LD_ADDR_OWVAR 28
37331: PUSH
37332: LD_INT 13
37334: ST_TO_ADDR
// hc_gallery :=  ;
37335: LD_ADDR_OWVAR 33
37339: PUSH
37340: LD_STRING 
37342: ST_TO_ADDR
// end ;
37343: LD_VAR 0 1
37347: RET
// export function PrepareFrog ( ) ; begin
37348: LD_INT 0
37350: PPUSH
// uc_side := 0 ;
37351: LD_ADDR_OWVAR 20
37355: PUSH
37356: LD_INT 0
37358: ST_TO_ADDR
// uc_nation := 0 ;
37359: LD_ADDR_OWVAR 21
37363: PUSH
37364: LD_INT 0
37366: ST_TO_ADDR
// hc_class := class_frog ;
37367: LD_ADDR_OWVAR 28
37371: PUSH
37372: LD_INT 19
37374: ST_TO_ADDR
// hc_gallery :=  ;
37375: LD_ADDR_OWVAR 33
37379: PUSH
37380: LD_STRING 
37382: ST_TO_ADDR
// end ;
37383: LD_VAR 0 1
37387: RET
// export function PrepareFish ( ) ; begin
37388: LD_INT 0
37390: PPUSH
// uc_side := 0 ;
37391: LD_ADDR_OWVAR 20
37395: PUSH
37396: LD_INT 0
37398: ST_TO_ADDR
// uc_nation := 0 ;
37399: LD_ADDR_OWVAR 21
37403: PUSH
37404: LD_INT 0
37406: ST_TO_ADDR
// hc_class := class_fish ;
37407: LD_ADDR_OWVAR 28
37411: PUSH
37412: LD_INT 20
37414: ST_TO_ADDR
// hc_gallery :=  ;
37415: LD_ADDR_OWVAR 33
37419: PUSH
37420: LD_STRING 
37422: ST_TO_ADDR
// end ;
37423: LD_VAR 0 1
37427: RET
// export function PrepareBird ( ) ; begin
37428: LD_INT 0
37430: PPUSH
// uc_side := 0 ;
37431: LD_ADDR_OWVAR 20
37435: PUSH
37436: LD_INT 0
37438: ST_TO_ADDR
// uc_nation := 0 ;
37439: LD_ADDR_OWVAR 21
37443: PUSH
37444: LD_INT 0
37446: ST_TO_ADDR
// hc_class := class_phororhacos ;
37447: LD_ADDR_OWVAR 28
37451: PUSH
37452: LD_INT 18
37454: ST_TO_ADDR
// hc_gallery :=  ;
37455: LD_ADDR_OWVAR 33
37459: PUSH
37460: LD_STRING 
37462: ST_TO_ADDR
// end ;
37463: LD_VAR 0 1
37467: RET
// export function PrepareHorse ( ) ; begin
37468: LD_INT 0
37470: PPUSH
// uc_side := 0 ;
37471: LD_ADDR_OWVAR 20
37475: PUSH
37476: LD_INT 0
37478: ST_TO_ADDR
// uc_nation := 0 ;
37479: LD_ADDR_OWVAR 21
37483: PUSH
37484: LD_INT 0
37486: ST_TO_ADDR
// hc_class := class_horse ;
37487: LD_ADDR_OWVAR 28
37491: PUSH
37492: LD_INT 21
37494: ST_TO_ADDR
// hc_gallery :=  ;
37495: LD_ADDR_OWVAR 33
37499: PUSH
37500: LD_STRING 
37502: ST_TO_ADDR
// end ;
37503: LD_VAR 0 1
37507: RET
// export function PrepareMastodont ( ) ; begin
37508: LD_INT 0
37510: PPUSH
// uc_side := 0 ;
37511: LD_ADDR_OWVAR 20
37515: PUSH
37516: LD_INT 0
37518: ST_TO_ADDR
// uc_nation := 0 ;
37519: LD_ADDR_OWVAR 21
37523: PUSH
37524: LD_INT 0
37526: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37527: LD_ADDR_OWVAR 37
37531: PUSH
37532: LD_INT 31
37534: ST_TO_ADDR
// vc_control := control_rider ;
37535: LD_ADDR_OWVAR 38
37539: PUSH
37540: LD_INT 4
37542: ST_TO_ADDR
// end ;
37543: LD_VAR 0 1
37547: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37548: LD_INT 0
37550: PPUSH
37551: PPUSH
37552: PPUSH
// uc_side = 0 ;
37553: LD_ADDR_OWVAR 20
37557: PUSH
37558: LD_INT 0
37560: ST_TO_ADDR
// uc_nation = 0 ;
37561: LD_ADDR_OWVAR 21
37565: PUSH
37566: LD_INT 0
37568: ST_TO_ADDR
// InitHc_All ( ) ;
37569: CALL_OW 584
// InitVc ;
37573: CALL_OW 20
// if mastodonts then
37577: LD_VAR 0 6
37581: IFFALSE 37648
// for i = 1 to mastodonts do
37583: LD_ADDR_VAR 0 11
37587: PUSH
37588: DOUBLE
37589: LD_INT 1
37591: DEC
37592: ST_TO_ADDR
37593: LD_VAR 0 6
37597: PUSH
37598: FOR_TO
37599: IFFALSE 37646
// begin vc_chassis := 31 ;
37601: LD_ADDR_OWVAR 37
37605: PUSH
37606: LD_INT 31
37608: ST_TO_ADDR
// vc_control := control_rider ;
37609: LD_ADDR_OWVAR 38
37613: PUSH
37614: LD_INT 4
37616: ST_TO_ADDR
// animal := CreateVehicle ;
37617: LD_ADDR_VAR 0 12
37621: PUSH
37622: CALL_OW 45
37626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37627: LD_VAR 0 12
37631: PPUSH
37632: LD_VAR 0 8
37636: PPUSH
37637: LD_INT 0
37639: PPUSH
37640: CALL 39776 0 3
// end ;
37644: GO 37598
37646: POP
37647: POP
// if horses then
37648: LD_VAR 0 5
37652: IFFALSE 37719
// for i = 1 to horses do
37654: LD_ADDR_VAR 0 11
37658: PUSH
37659: DOUBLE
37660: LD_INT 1
37662: DEC
37663: ST_TO_ADDR
37664: LD_VAR 0 5
37668: PUSH
37669: FOR_TO
37670: IFFALSE 37717
// begin hc_class := 21 ;
37672: LD_ADDR_OWVAR 28
37676: PUSH
37677: LD_INT 21
37679: ST_TO_ADDR
// hc_gallery :=  ;
37680: LD_ADDR_OWVAR 33
37684: PUSH
37685: LD_STRING 
37687: ST_TO_ADDR
// animal := CreateHuman ;
37688: LD_ADDR_VAR 0 12
37692: PUSH
37693: CALL_OW 44
37697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37698: LD_VAR 0 12
37702: PPUSH
37703: LD_VAR 0 8
37707: PPUSH
37708: LD_INT 0
37710: PPUSH
37711: CALL 39776 0 3
// end ;
37715: GO 37669
37717: POP
37718: POP
// if birds then
37719: LD_VAR 0 1
37723: IFFALSE 37790
// for i = 1 to birds do
37725: LD_ADDR_VAR 0 11
37729: PUSH
37730: DOUBLE
37731: LD_INT 1
37733: DEC
37734: ST_TO_ADDR
37735: LD_VAR 0 1
37739: PUSH
37740: FOR_TO
37741: IFFALSE 37788
// begin hc_class = 18 ;
37743: LD_ADDR_OWVAR 28
37747: PUSH
37748: LD_INT 18
37750: ST_TO_ADDR
// hc_gallery =  ;
37751: LD_ADDR_OWVAR 33
37755: PUSH
37756: LD_STRING 
37758: ST_TO_ADDR
// animal := CreateHuman ;
37759: LD_ADDR_VAR 0 12
37763: PUSH
37764: CALL_OW 44
37768: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37769: LD_VAR 0 12
37773: PPUSH
37774: LD_VAR 0 8
37778: PPUSH
37779: LD_INT 0
37781: PPUSH
37782: CALL 39776 0 3
// end ;
37786: GO 37740
37788: POP
37789: POP
// if tigers then
37790: LD_VAR 0 2
37794: IFFALSE 37878
// for i = 1 to tigers do
37796: LD_ADDR_VAR 0 11
37800: PUSH
37801: DOUBLE
37802: LD_INT 1
37804: DEC
37805: ST_TO_ADDR
37806: LD_VAR 0 2
37810: PUSH
37811: FOR_TO
37812: IFFALSE 37876
// begin hc_class = class_tiger ;
37814: LD_ADDR_OWVAR 28
37818: PUSH
37819: LD_INT 14
37821: ST_TO_ADDR
// hc_gallery =  ;
37822: LD_ADDR_OWVAR 33
37826: PUSH
37827: LD_STRING 
37829: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37830: LD_ADDR_OWVAR 35
37834: PUSH
37835: LD_INT 7
37837: NEG
37838: PPUSH
37839: LD_INT 7
37841: PPUSH
37842: CALL_OW 12
37846: ST_TO_ADDR
// animal := CreateHuman ;
37847: LD_ADDR_VAR 0 12
37851: PUSH
37852: CALL_OW 44
37856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37857: LD_VAR 0 12
37861: PPUSH
37862: LD_VAR 0 8
37866: PPUSH
37867: LD_INT 0
37869: PPUSH
37870: CALL 39776 0 3
// end ;
37874: GO 37811
37876: POP
37877: POP
// if apemans then
37878: LD_VAR 0 3
37882: IFFALSE 38005
// for i = 1 to apemans do
37884: LD_ADDR_VAR 0 11
37888: PUSH
37889: DOUBLE
37890: LD_INT 1
37892: DEC
37893: ST_TO_ADDR
37894: LD_VAR 0 3
37898: PUSH
37899: FOR_TO
37900: IFFALSE 38003
// begin hc_class = class_apeman ;
37902: LD_ADDR_OWVAR 28
37906: PUSH
37907: LD_INT 12
37909: ST_TO_ADDR
// hc_gallery =  ;
37910: LD_ADDR_OWVAR 33
37914: PUSH
37915: LD_STRING 
37917: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37918: LD_ADDR_OWVAR 35
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PPUSH
37927: LD_INT 2
37929: PPUSH
37930: CALL_OW 12
37934: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37935: LD_ADDR_OWVAR 31
37939: PUSH
37940: LD_INT 1
37942: PPUSH
37943: LD_INT 3
37945: PPUSH
37946: CALL_OW 12
37950: PUSH
37951: LD_INT 1
37953: PPUSH
37954: LD_INT 3
37956: PPUSH
37957: CALL_OW 12
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: ST_TO_ADDR
// animal := CreateHuman ;
37974: LD_ADDR_VAR 0 12
37978: PUSH
37979: CALL_OW 44
37983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37984: LD_VAR 0 12
37988: PPUSH
37989: LD_VAR 0 8
37993: PPUSH
37994: LD_INT 0
37996: PPUSH
37997: CALL 39776 0 3
// end ;
38001: GO 37899
38003: POP
38004: POP
// if enchidnas then
38005: LD_VAR 0 4
38009: IFFALSE 38076
// for i = 1 to enchidnas do
38011: LD_ADDR_VAR 0 11
38015: PUSH
38016: DOUBLE
38017: LD_INT 1
38019: DEC
38020: ST_TO_ADDR
38021: LD_VAR 0 4
38025: PUSH
38026: FOR_TO
38027: IFFALSE 38074
// begin hc_class = 13 ;
38029: LD_ADDR_OWVAR 28
38033: PUSH
38034: LD_INT 13
38036: ST_TO_ADDR
// hc_gallery =  ;
38037: LD_ADDR_OWVAR 33
38041: PUSH
38042: LD_STRING 
38044: ST_TO_ADDR
// animal := CreateHuman ;
38045: LD_ADDR_VAR 0 12
38049: PUSH
38050: CALL_OW 44
38054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38055: LD_VAR 0 12
38059: PPUSH
38060: LD_VAR 0 8
38064: PPUSH
38065: LD_INT 0
38067: PPUSH
38068: CALL 39776 0 3
// end ;
38072: GO 38026
38074: POP
38075: POP
// if fishes then
38076: LD_VAR 0 7
38080: IFFALSE 38147
// for i = 1 to fishes do
38082: LD_ADDR_VAR 0 11
38086: PUSH
38087: DOUBLE
38088: LD_INT 1
38090: DEC
38091: ST_TO_ADDR
38092: LD_VAR 0 7
38096: PUSH
38097: FOR_TO
38098: IFFALSE 38145
// begin hc_class = 20 ;
38100: LD_ADDR_OWVAR 28
38104: PUSH
38105: LD_INT 20
38107: ST_TO_ADDR
// hc_gallery =  ;
38108: LD_ADDR_OWVAR 33
38112: PUSH
38113: LD_STRING 
38115: ST_TO_ADDR
// animal := CreateHuman ;
38116: LD_ADDR_VAR 0 12
38120: PUSH
38121: CALL_OW 44
38125: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38126: LD_VAR 0 12
38130: PPUSH
38131: LD_VAR 0 9
38135: PPUSH
38136: LD_INT 0
38138: PPUSH
38139: CALL 39776 0 3
// end ;
38143: GO 38097
38145: POP
38146: POP
// end ;
38147: LD_VAR 0 10
38151: RET
// export function WantHeal ( sci , unit ) ; begin
38152: LD_INT 0
38154: PPUSH
// if GetTaskList ( sci ) > 0 then
38155: LD_VAR 0 1
38159: PPUSH
38160: CALL_OW 437
38164: PUSH
38165: LD_INT 0
38167: GREATER
38168: IFFALSE 38238
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38170: LD_VAR 0 1
38174: PPUSH
38175: CALL_OW 437
38179: PUSH
38180: LD_INT 1
38182: ARRAY
38183: PUSH
38184: LD_INT 1
38186: ARRAY
38187: PUSH
38188: LD_STRING l
38190: EQUAL
38191: PUSH
38192: LD_VAR 0 1
38196: PPUSH
38197: CALL_OW 437
38201: PUSH
38202: LD_INT 1
38204: ARRAY
38205: PUSH
38206: LD_INT 4
38208: ARRAY
38209: PUSH
38210: LD_VAR 0 2
38214: EQUAL
38215: AND
38216: IFFALSE 38228
// result := true else
38218: LD_ADDR_VAR 0 3
38222: PUSH
38223: LD_INT 1
38225: ST_TO_ADDR
38226: GO 38236
// result := false ;
38228: LD_ADDR_VAR 0 3
38232: PUSH
38233: LD_INT 0
38235: ST_TO_ADDR
// end else
38236: GO 38246
// result := false ;
38238: LD_ADDR_VAR 0 3
38242: PUSH
38243: LD_INT 0
38245: ST_TO_ADDR
// end ;
38246: LD_VAR 0 3
38250: RET
// export function HealTarget ( sci ) ; begin
38251: LD_INT 0
38253: PPUSH
// if not sci then
38254: LD_VAR 0 1
38258: NOT
38259: IFFALSE 38263
// exit ;
38261: GO 38328
// result := 0 ;
38263: LD_ADDR_VAR 0 2
38267: PUSH
38268: LD_INT 0
38270: ST_TO_ADDR
// if GetTaskList ( sci ) then
38271: LD_VAR 0 1
38275: PPUSH
38276: CALL_OW 437
38280: IFFALSE 38328
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38282: LD_VAR 0 1
38286: PPUSH
38287: CALL_OW 437
38291: PUSH
38292: LD_INT 1
38294: ARRAY
38295: PUSH
38296: LD_INT 1
38298: ARRAY
38299: PUSH
38300: LD_STRING l
38302: EQUAL
38303: IFFALSE 38328
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38305: LD_ADDR_VAR 0 2
38309: PUSH
38310: LD_VAR 0 1
38314: PPUSH
38315: CALL_OW 437
38319: PUSH
38320: LD_INT 1
38322: ARRAY
38323: PUSH
38324: LD_INT 4
38326: ARRAY
38327: ST_TO_ADDR
// end ;
38328: LD_VAR 0 2
38332: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38333: LD_INT 0
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
// if not base_units then
38339: LD_VAR 0 1
38343: NOT
38344: IFFALSE 38348
// exit ;
38346: GO 38435
// result := false ;
38348: LD_ADDR_VAR 0 2
38352: PUSH
38353: LD_INT 0
38355: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38356: LD_ADDR_VAR 0 5
38360: PUSH
38361: LD_VAR 0 1
38365: PPUSH
38366: LD_INT 21
38368: PUSH
38369: LD_INT 3
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PPUSH
38376: CALL_OW 72
38380: ST_TO_ADDR
// if not tmp then
38381: LD_VAR 0 5
38385: NOT
38386: IFFALSE 38390
// exit ;
38388: GO 38435
// for i in tmp do
38390: LD_ADDR_VAR 0 3
38394: PUSH
38395: LD_VAR 0 5
38399: PUSH
38400: FOR_IN
38401: IFFALSE 38433
// begin result := EnemyInRange ( i , 22 ) ;
38403: LD_ADDR_VAR 0 2
38407: PUSH
38408: LD_VAR 0 3
38412: PPUSH
38413: LD_INT 22
38415: PPUSH
38416: CALL 36022 0 2
38420: ST_TO_ADDR
// if result then
38421: LD_VAR 0 2
38425: IFFALSE 38431
// exit ;
38427: POP
38428: POP
38429: GO 38435
// end ;
38431: GO 38400
38433: POP
38434: POP
// end ;
38435: LD_VAR 0 2
38439: RET
// export function FilterByTag ( units , tag ) ; begin
38440: LD_INT 0
38442: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38443: LD_ADDR_VAR 0 3
38447: PUSH
38448: LD_VAR 0 1
38452: PPUSH
38453: LD_INT 120
38455: PUSH
38456: LD_VAR 0 2
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PPUSH
38465: CALL_OW 72
38469: ST_TO_ADDR
// end ;
38470: LD_VAR 0 3
38474: RET
// export function IsDriver ( un ) ; begin
38475: LD_INT 0
38477: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38478: LD_ADDR_VAR 0 2
38482: PUSH
38483: LD_VAR 0 1
38487: PUSH
38488: LD_INT 55
38490: PUSH
38491: EMPTY
38492: LIST
38493: PPUSH
38494: CALL_OW 69
38498: IN
38499: ST_TO_ADDR
// end ;
38500: LD_VAR 0 2
38504: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38505: LD_INT 0
38507: PPUSH
38508: PPUSH
// list := [ ] ;
38509: LD_ADDR_VAR 0 5
38513: PUSH
38514: EMPTY
38515: ST_TO_ADDR
// case d of 0 :
38516: LD_VAR 0 3
38520: PUSH
38521: LD_INT 0
38523: DOUBLE
38524: EQUAL
38525: IFTRUE 38529
38527: GO 38662
38529: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38530: LD_ADDR_VAR 0 5
38534: PUSH
38535: LD_VAR 0 1
38539: PUSH
38540: LD_INT 4
38542: MINUS
38543: PUSH
38544: LD_VAR 0 2
38548: PUSH
38549: LD_INT 4
38551: MINUS
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: PUSH
38561: LD_VAR 0 1
38565: PUSH
38566: LD_INT 3
38568: MINUS
38569: PUSH
38570: LD_VAR 0 2
38574: PUSH
38575: LD_INT 1
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: PUSH
38583: LD_VAR 0 1
38587: PUSH
38588: LD_INT 4
38590: PLUS
38591: PUSH
38592: LD_VAR 0 2
38596: PUSH
38597: LD_INT 4
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: LIST
38604: PUSH
38605: LD_VAR 0 1
38609: PUSH
38610: LD_INT 3
38612: PLUS
38613: PUSH
38614: LD_VAR 0 2
38618: PUSH
38619: LD_INT 3
38621: PLUS
38622: PUSH
38623: LD_INT 5
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: LIST
38630: PUSH
38631: LD_VAR 0 1
38635: PUSH
38636: LD_VAR 0 2
38640: PUSH
38641: LD_INT 4
38643: PLUS
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: LIST
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: ST_TO_ADDR
// end ; 1 :
38660: GO 39360
38662: LD_INT 1
38664: DOUBLE
38665: EQUAL
38666: IFTRUE 38670
38668: GO 38803
38670: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38671: LD_ADDR_VAR 0 5
38675: PUSH
38676: LD_VAR 0 1
38680: PUSH
38681: LD_VAR 0 2
38685: PUSH
38686: LD_INT 4
38688: MINUS
38689: PUSH
38690: LD_INT 3
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: PUSH
38698: LD_VAR 0 1
38702: PUSH
38703: LD_INT 3
38705: MINUS
38706: PUSH
38707: LD_VAR 0 2
38711: PUSH
38712: LD_INT 3
38714: MINUS
38715: PUSH
38716: LD_INT 2
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: PUSH
38724: LD_VAR 0 1
38728: PUSH
38729: LD_INT 4
38731: MINUS
38732: PUSH
38733: LD_VAR 0 2
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: PUSH
38746: LD_VAR 0 1
38750: PUSH
38751: LD_VAR 0 2
38755: PUSH
38756: LD_INT 3
38758: PLUS
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: PUSH
38768: LD_VAR 0 1
38772: PUSH
38773: LD_INT 4
38775: PLUS
38776: PUSH
38777: LD_VAR 0 2
38781: PUSH
38782: LD_INT 4
38784: PLUS
38785: PUSH
38786: LD_INT 5
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: ST_TO_ADDR
// end ; 2 :
38801: GO 39360
38803: LD_INT 2
38805: DOUBLE
38806: EQUAL
38807: IFTRUE 38811
38809: GO 38940
38811: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38812: LD_ADDR_VAR 0 5
38816: PUSH
38817: LD_VAR 0 1
38821: PUSH
38822: LD_VAR 0 2
38826: PUSH
38827: LD_INT 3
38829: MINUS
38830: PUSH
38831: LD_INT 3
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: PUSH
38839: LD_VAR 0 1
38843: PUSH
38844: LD_INT 4
38846: PLUS
38847: PUSH
38848: LD_VAR 0 2
38852: PUSH
38853: LD_INT 4
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: PUSH
38861: LD_VAR 0 1
38865: PUSH
38866: LD_VAR 0 2
38870: PUSH
38871: LD_INT 4
38873: PLUS
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: LIST
38882: PUSH
38883: LD_VAR 0 1
38887: PUSH
38888: LD_INT 3
38890: MINUS
38891: PUSH
38892: LD_VAR 0 2
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: LIST
38904: PUSH
38905: LD_VAR 0 1
38909: PUSH
38910: LD_INT 4
38912: MINUS
38913: PUSH
38914: LD_VAR 0 2
38918: PUSH
38919: LD_INT 4
38921: MINUS
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: ST_TO_ADDR
// end ; 3 :
38938: GO 39360
38940: LD_INT 3
38942: DOUBLE
38943: EQUAL
38944: IFTRUE 38948
38946: GO 39081
38948: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38949: LD_ADDR_VAR 0 5
38953: PUSH
38954: LD_VAR 0 1
38958: PUSH
38959: LD_INT 3
38961: PLUS
38962: PUSH
38963: LD_VAR 0 2
38967: PUSH
38968: LD_INT 4
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: PUSH
38976: LD_VAR 0 1
38980: PUSH
38981: LD_INT 4
38983: PLUS
38984: PUSH
38985: LD_VAR 0 2
38989: PUSH
38990: LD_INT 4
38992: PLUS
38993: PUSH
38994: LD_INT 5
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: PUSH
39002: LD_VAR 0 1
39006: PUSH
39007: LD_INT 4
39009: MINUS
39010: PUSH
39011: LD_VAR 0 2
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: PUSH
39024: LD_VAR 0 1
39028: PUSH
39029: LD_VAR 0 2
39033: PUSH
39034: LD_INT 4
39036: MINUS
39037: PUSH
39038: LD_INT 3
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: PUSH
39046: LD_VAR 0 1
39050: PUSH
39051: LD_INT 3
39053: MINUS
39054: PUSH
39055: LD_VAR 0 2
39059: PUSH
39060: LD_INT 3
39062: MINUS
39063: PUSH
39064: LD_INT 2
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: ST_TO_ADDR
// end ; 4 :
39079: GO 39360
39081: LD_INT 4
39083: DOUBLE
39084: EQUAL
39085: IFTRUE 39089
39087: GO 39222
39089: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39090: LD_ADDR_VAR 0 5
39094: PUSH
39095: LD_VAR 0 1
39099: PUSH
39100: LD_VAR 0 2
39104: PUSH
39105: LD_INT 4
39107: PLUS
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: PUSH
39117: LD_VAR 0 1
39121: PUSH
39122: LD_INT 3
39124: PLUS
39125: PUSH
39126: LD_VAR 0 2
39130: PUSH
39131: LD_INT 3
39133: PLUS
39134: PUSH
39135: LD_INT 5
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: PUSH
39143: LD_VAR 0 1
39147: PUSH
39148: LD_INT 4
39150: PLUS
39151: PUSH
39152: LD_VAR 0 2
39156: PUSH
39157: LD_INT 4
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: PUSH
39165: LD_VAR 0 1
39169: PUSH
39170: LD_VAR 0 2
39174: PUSH
39175: LD_INT 3
39177: MINUS
39178: PUSH
39179: LD_INT 3
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: PUSH
39187: LD_VAR 0 1
39191: PUSH
39192: LD_INT 4
39194: MINUS
39195: PUSH
39196: LD_VAR 0 2
39200: PUSH
39201: LD_INT 4
39203: MINUS
39204: PUSH
39205: LD_INT 2
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: LIST
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: ST_TO_ADDR
// end ; 5 :
39220: GO 39360
39222: LD_INT 5
39224: DOUBLE
39225: EQUAL
39226: IFTRUE 39230
39228: GO 39359
39230: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39231: LD_ADDR_VAR 0 5
39235: PUSH
39236: LD_VAR 0 1
39240: PUSH
39241: LD_INT 4
39243: MINUS
39244: PUSH
39245: LD_VAR 0 2
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: LIST
39257: PUSH
39258: LD_VAR 0 1
39262: PUSH
39263: LD_VAR 0 2
39267: PUSH
39268: LD_INT 4
39270: MINUS
39271: PUSH
39272: LD_INT 3
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: LIST
39279: PUSH
39280: LD_VAR 0 1
39284: PUSH
39285: LD_INT 4
39287: PLUS
39288: PUSH
39289: LD_VAR 0 2
39293: PUSH
39294: LD_INT 4
39296: PLUS
39297: PUSH
39298: LD_INT 5
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: PUSH
39306: LD_VAR 0 1
39310: PUSH
39311: LD_INT 3
39313: PLUS
39314: PUSH
39315: LD_VAR 0 2
39319: PUSH
39320: LD_INT 4
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: PUSH
39328: LD_VAR 0 1
39332: PUSH
39333: LD_VAR 0 2
39337: PUSH
39338: LD_INT 3
39340: PLUS
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: ST_TO_ADDR
// end ; end ;
39357: GO 39360
39359: POP
// result := list ;
39360: LD_ADDR_VAR 0 4
39364: PUSH
39365: LD_VAR 0 5
39369: ST_TO_ADDR
// end ;
39370: LD_VAR 0 4
39374: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39375: LD_INT 0
39377: PPUSH
39378: PPUSH
39379: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39380: LD_VAR 0 1
39384: NOT
39385: PUSH
39386: LD_VAR 0 2
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: LD_INT 3
39399: PUSH
39400: LD_INT 4
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: IN
39409: NOT
39410: OR
39411: IFFALSE 39415
// exit ;
39413: GO 39498
// tmp := [ ] ;
39415: LD_ADDR_VAR 0 5
39419: PUSH
39420: EMPTY
39421: ST_TO_ADDR
// for i in units do
39422: LD_ADDR_VAR 0 4
39426: PUSH
39427: LD_VAR 0 1
39431: PUSH
39432: FOR_IN
39433: IFFALSE 39467
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39435: LD_ADDR_VAR 0 5
39439: PUSH
39440: LD_VAR 0 5
39444: PPUSH
39445: LD_VAR 0 4
39449: PPUSH
39450: LD_VAR 0 2
39454: PPUSH
39455: CALL_OW 259
39459: PPUSH
39460: CALL 40859 0 2
39464: ST_TO_ADDR
39465: GO 39432
39467: POP
39468: POP
// if not tmp then
39469: LD_VAR 0 5
39473: NOT
39474: IFFALSE 39478
// exit ;
39476: GO 39498
// result := SortListByListDesc ( units , tmp ) ;
39478: LD_ADDR_VAR 0 3
39482: PUSH
39483: LD_VAR 0 1
39487: PPUSH
39488: LD_VAR 0 5
39492: PPUSH
39493: CALL_OW 77
39497: ST_TO_ADDR
// end ;
39498: LD_VAR 0 3
39502: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39503: LD_INT 0
39505: PPUSH
39506: PPUSH
39507: PPUSH
// result := false ;
39508: LD_ADDR_VAR 0 3
39512: PUSH
39513: LD_INT 0
39515: ST_TO_ADDR
// if not building then
39516: LD_VAR 0 2
39520: NOT
39521: IFFALSE 39525
// exit ;
39523: GO 39663
// x := GetX ( building ) ;
39525: LD_ADDR_VAR 0 4
39529: PUSH
39530: LD_VAR 0 2
39534: PPUSH
39535: CALL_OW 250
39539: ST_TO_ADDR
// y := GetY ( building ) ;
39540: LD_ADDR_VAR 0 5
39544: PUSH
39545: LD_VAR 0 2
39549: PPUSH
39550: CALL_OW 251
39554: ST_TO_ADDR
// if not x or not y then
39555: LD_VAR 0 4
39559: NOT
39560: PUSH
39561: LD_VAR 0 5
39565: NOT
39566: OR
39567: IFFALSE 39571
// exit ;
39569: GO 39663
// if GetTaskList ( unit ) then
39571: LD_VAR 0 1
39575: PPUSH
39576: CALL_OW 437
39580: IFFALSE 39663
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39582: LD_STRING e
39584: PUSH
39585: LD_VAR 0 1
39589: PPUSH
39590: CALL_OW 437
39594: PUSH
39595: LD_INT 1
39597: ARRAY
39598: PUSH
39599: LD_INT 1
39601: ARRAY
39602: EQUAL
39603: PUSH
39604: LD_VAR 0 4
39608: PUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: CALL_OW 437
39618: PUSH
39619: LD_INT 1
39621: ARRAY
39622: PUSH
39623: LD_INT 2
39625: ARRAY
39626: EQUAL
39627: AND
39628: PUSH
39629: LD_VAR 0 5
39633: PUSH
39634: LD_VAR 0 1
39638: PPUSH
39639: CALL_OW 437
39643: PUSH
39644: LD_INT 1
39646: ARRAY
39647: PUSH
39648: LD_INT 3
39650: ARRAY
39651: EQUAL
39652: AND
39653: IFFALSE 39663
// result := true end ;
39655: LD_ADDR_VAR 0 3
39659: PUSH
39660: LD_INT 1
39662: ST_TO_ADDR
// end ;
39663: LD_VAR 0 3
39667: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39668: LD_INT 0
39670: PPUSH
// result := false ;
39671: LD_ADDR_VAR 0 4
39675: PUSH
39676: LD_INT 0
39678: ST_TO_ADDR
// if GetTaskList ( unit ) then
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 437
39688: IFFALSE 39771
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39690: LD_STRING M
39692: PUSH
39693: LD_VAR 0 1
39697: PPUSH
39698: CALL_OW 437
39702: PUSH
39703: LD_INT 1
39705: ARRAY
39706: PUSH
39707: LD_INT 1
39709: ARRAY
39710: EQUAL
39711: PUSH
39712: LD_VAR 0 2
39716: PUSH
39717: LD_VAR 0 1
39721: PPUSH
39722: CALL_OW 437
39726: PUSH
39727: LD_INT 1
39729: ARRAY
39730: PUSH
39731: LD_INT 2
39733: ARRAY
39734: EQUAL
39735: AND
39736: PUSH
39737: LD_VAR 0 3
39741: PUSH
39742: LD_VAR 0 1
39746: PPUSH
39747: CALL_OW 437
39751: PUSH
39752: LD_INT 1
39754: ARRAY
39755: PUSH
39756: LD_INT 3
39758: ARRAY
39759: EQUAL
39760: AND
39761: IFFALSE 39771
// result := true ;
39763: LD_ADDR_VAR 0 4
39767: PUSH
39768: LD_INT 1
39770: ST_TO_ADDR
// end ; end ;
39771: LD_VAR 0 4
39775: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39776: LD_INT 0
39778: PPUSH
39779: PPUSH
39780: PPUSH
39781: PPUSH
// if not unit or not area then
39782: LD_VAR 0 1
39786: NOT
39787: PUSH
39788: LD_VAR 0 2
39792: NOT
39793: OR
39794: IFFALSE 39798
// exit ;
39796: GO 39962
// tmp := AreaToList ( area , i ) ;
39798: LD_ADDR_VAR 0 6
39802: PUSH
39803: LD_VAR 0 2
39807: PPUSH
39808: LD_VAR 0 5
39812: PPUSH
39813: CALL_OW 517
39817: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39818: LD_ADDR_VAR 0 5
39822: PUSH
39823: DOUBLE
39824: LD_INT 1
39826: DEC
39827: ST_TO_ADDR
39828: LD_VAR 0 6
39832: PUSH
39833: LD_INT 1
39835: ARRAY
39836: PUSH
39837: FOR_TO
39838: IFFALSE 39960
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39840: LD_ADDR_VAR 0 7
39844: PUSH
39845: LD_VAR 0 6
39849: PUSH
39850: LD_INT 1
39852: ARRAY
39853: PUSH
39854: LD_VAR 0 5
39858: ARRAY
39859: PUSH
39860: LD_VAR 0 6
39864: PUSH
39865: LD_INT 2
39867: ARRAY
39868: PUSH
39869: LD_VAR 0 5
39873: ARRAY
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39879: LD_VAR 0 7
39883: PUSH
39884: LD_INT 1
39886: ARRAY
39887: PPUSH
39888: LD_VAR 0 7
39892: PUSH
39893: LD_INT 2
39895: ARRAY
39896: PPUSH
39897: CALL_OW 428
39901: PUSH
39902: LD_INT 0
39904: EQUAL
39905: IFFALSE 39958
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39907: LD_VAR 0 1
39911: PPUSH
39912: LD_VAR 0 7
39916: PUSH
39917: LD_INT 1
39919: ARRAY
39920: PPUSH
39921: LD_VAR 0 7
39925: PUSH
39926: LD_INT 2
39928: ARRAY
39929: PPUSH
39930: LD_VAR 0 3
39934: PPUSH
39935: CALL_OW 48
// result := IsPlaced ( unit ) ;
39939: LD_ADDR_VAR 0 4
39943: PUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 305
39953: ST_TO_ADDR
// exit ;
39954: POP
39955: POP
39956: GO 39962
// end ; end ;
39958: GO 39837
39960: POP
39961: POP
// end ;
39962: LD_VAR 0 4
39966: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39967: LD_INT 0
39969: PPUSH
39970: PPUSH
39971: PPUSH
// if not side or side > 8 then
39972: LD_VAR 0 1
39976: NOT
39977: PUSH
39978: LD_VAR 0 1
39982: PUSH
39983: LD_INT 8
39985: GREATER
39986: OR
39987: IFFALSE 39991
// exit ;
39989: GO 40178
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39991: LD_ADDR_VAR 0 4
39995: PUSH
39996: LD_INT 22
39998: PUSH
39999: LD_VAR 0 1
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 21
40010: PUSH
40011: LD_INT 3
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PPUSH
40022: CALL_OW 69
40026: ST_TO_ADDR
// if not tmp then
40027: LD_VAR 0 4
40031: NOT
40032: IFFALSE 40036
// exit ;
40034: GO 40178
// enable_addtolog := true ;
40036: LD_ADDR_OWVAR 81
40040: PUSH
40041: LD_INT 1
40043: ST_TO_ADDR
// AddToLog ( [ ) ;
40044: LD_STRING [
40046: PPUSH
40047: CALL_OW 561
// for i in tmp do
40051: LD_ADDR_VAR 0 3
40055: PUSH
40056: LD_VAR 0 4
40060: PUSH
40061: FOR_IN
40062: IFFALSE 40169
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40064: LD_STRING [
40066: PUSH
40067: LD_VAR 0 3
40071: PPUSH
40072: CALL_OW 266
40076: STR
40077: PUSH
40078: LD_STRING , 
40080: STR
40081: PUSH
40082: LD_VAR 0 3
40086: PPUSH
40087: CALL_OW 250
40091: STR
40092: PUSH
40093: LD_STRING , 
40095: STR
40096: PUSH
40097: LD_VAR 0 3
40101: PPUSH
40102: CALL_OW 251
40106: STR
40107: PUSH
40108: LD_STRING , 
40110: STR
40111: PUSH
40112: LD_VAR 0 3
40116: PPUSH
40117: CALL_OW 254
40121: STR
40122: PUSH
40123: LD_STRING , 
40125: STR
40126: PUSH
40127: LD_VAR 0 3
40131: PPUSH
40132: LD_INT 1
40134: PPUSH
40135: CALL_OW 268
40139: STR
40140: PUSH
40141: LD_STRING , 
40143: STR
40144: PUSH
40145: LD_VAR 0 3
40149: PPUSH
40150: LD_INT 2
40152: PPUSH
40153: CALL_OW 268
40157: STR
40158: PUSH
40159: LD_STRING ],
40161: STR
40162: PPUSH
40163: CALL_OW 561
// end ;
40167: GO 40061
40169: POP
40170: POP
// AddToLog ( ]; ) ;
40171: LD_STRING ];
40173: PPUSH
40174: CALL_OW 561
// end ;
40178: LD_VAR 0 2
40182: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40183: LD_INT 0
40185: PPUSH
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
// if not area or not rate or not max then
40190: LD_VAR 0 1
40194: NOT
40195: PUSH
40196: LD_VAR 0 2
40200: NOT
40201: OR
40202: PUSH
40203: LD_VAR 0 4
40207: NOT
40208: OR
40209: IFFALSE 40213
// exit ;
40211: GO 40402
// while 1 do
40213: LD_INT 1
40215: IFFALSE 40402
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40217: LD_ADDR_VAR 0 9
40221: PUSH
40222: LD_VAR 0 1
40226: PPUSH
40227: LD_INT 1
40229: PPUSH
40230: CALL_OW 287
40234: PUSH
40235: LD_INT 10
40237: MUL
40238: ST_TO_ADDR
// r := rate / 10 ;
40239: LD_ADDR_VAR 0 7
40243: PUSH
40244: LD_VAR 0 2
40248: PUSH
40249: LD_INT 10
40251: DIVREAL
40252: ST_TO_ADDR
// time := 1 1$00 ;
40253: LD_ADDR_VAR 0 8
40257: PUSH
40258: LD_INT 2100
40260: ST_TO_ADDR
// if amount < min then
40261: LD_VAR 0 9
40265: PUSH
40266: LD_VAR 0 3
40270: LESS
40271: IFFALSE 40289
// r := r * 2 else
40273: LD_ADDR_VAR 0 7
40277: PUSH
40278: LD_VAR 0 7
40282: PUSH
40283: LD_INT 2
40285: MUL
40286: ST_TO_ADDR
40287: GO 40315
// if amount > max then
40289: LD_VAR 0 9
40293: PUSH
40294: LD_VAR 0 4
40298: GREATER
40299: IFFALSE 40315
// r := r / 2 ;
40301: LD_ADDR_VAR 0 7
40305: PUSH
40306: LD_VAR 0 7
40310: PUSH
40311: LD_INT 2
40313: DIVREAL
40314: ST_TO_ADDR
// time := time / r ;
40315: LD_ADDR_VAR 0 8
40319: PUSH
40320: LD_VAR 0 8
40324: PUSH
40325: LD_VAR 0 7
40329: DIVREAL
40330: ST_TO_ADDR
// if time < 0 then
40331: LD_VAR 0 8
40335: PUSH
40336: LD_INT 0
40338: LESS
40339: IFFALSE 40356
// time := time * - 1 ;
40341: LD_ADDR_VAR 0 8
40345: PUSH
40346: LD_VAR 0 8
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: MUL
40355: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40356: LD_VAR 0 8
40360: PUSH
40361: LD_INT 35
40363: PPUSH
40364: LD_INT 875
40366: PPUSH
40367: CALL_OW 12
40371: PLUS
40372: PPUSH
40373: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40377: LD_INT 1
40379: PPUSH
40380: LD_INT 5
40382: PPUSH
40383: CALL_OW 12
40387: PPUSH
40388: LD_VAR 0 1
40392: PPUSH
40393: LD_INT 1
40395: PPUSH
40396: CALL_OW 55
// end ;
40400: GO 40213
// end ;
40402: LD_VAR 0 5
40406: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40407: LD_INT 0
40409: PPUSH
40410: PPUSH
40411: PPUSH
40412: PPUSH
40413: PPUSH
40414: PPUSH
40415: PPUSH
40416: PPUSH
// if not turrets or not factories then
40417: LD_VAR 0 1
40421: NOT
40422: PUSH
40423: LD_VAR 0 2
40427: NOT
40428: OR
40429: IFFALSE 40433
// exit ;
40431: GO 40740
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40433: LD_ADDR_VAR 0 10
40437: PUSH
40438: LD_INT 5
40440: PUSH
40441: LD_INT 6
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 2
40450: PUSH
40451: LD_INT 4
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 3
40460: PUSH
40461: LD_INT 5
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 24
40475: PUSH
40476: LD_INT 25
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 23
40485: PUSH
40486: LD_INT 27
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 42
40499: PUSH
40500: LD_INT 43
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 44
40509: PUSH
40510: LD_INT 46
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 45
40519: PUSH
40520: LD_INT 47
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: LIST
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: LIST
40536: ST_TO_ADDR
// result := [ ] ;
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: EMPTY
40543: ST_TO_ADDR
// for i in turrets do
40544: LD_ADDR_VAR 0 4
40548: PUSH
40549: LD_VAR 0 1
40553: PUSH
40554: FOR_IN
40555: IFFALSE 40738
// begin nat := GetNation ( i ) ;
40557: LD_ADDR_VAR 0 7
40561: PUSH
40562: LD_VAR 0 4
40566: PPUSH
40567: CALL_OW 248
40571: ST_TO_ADDR
// weapon := 0 ;
40572: LD_ADDR_VAR 0 8
40576: PUSH
40577: LD_INT 0
40579: ST_TO_ADDR
// if not nat then
40580: LD_VAR 0 7
40584: NOT
40585: IFFALSE 40589
// continue ;
40587: GO 40554
// for j in list [ nat ] do
40589: LD_ADDR_VAR 0 5
40593: PUSH
40594: LD_VAR 0 10
40598: PUSH
40599: LD_VAR 0 7
40603: ARRAY
40604: PUSH
40605: FOR_IN
40606: IFFALSE 40647
// if GetBWeapon ( i ) = j [ 1 ] then
40608: LD_VAR 0 4
40612: PPUSH
40613: CALL_OW 269
40617: PUSH
40618: LD_VAR 0 5
40622: PUSH
40623: LD_INT 1
40625: ARRAY
40626: EQUAL
40627: IFFALSE 40645
// begin weapon := j [ 2 ] ;
40629: LD_ADDR_VAR 0 8
40633: PUSH
40634: LD_VAR 0 5
40638: PUSH
40639: LD_INT 2
40641: ARRAY
40642: ST_TO_ADDR
// break ;
40643: GO 40647
// end ;
40645: GO 40605
40647: POP
40648: POP
// if not weapon then
40649: LD_VAR 0 8
40653: NOT
40654: IFFALSE 40658
// continue ;
40656: GO 40554
// for k in factories do
40658: LD_ADDR_VAR 0 6
40662: PUSH
40663: LD_VAR 0 2
40667: PUSH
40668: FOR_IN
40669: IFFALSE 40734
// begin weapons := AvailableWeaponList ( k ) ;
40671: LD_ADDR_VAR 0 9
40675: PUSH
40676: LD_VAR 0 6
40680: PPUSH
40681: CALL_OW 478
40685: ST_TO_ADDR
// if not weapons then
40686: LD_VAR 0 9
40690: NOT
40691: IFFALSE 40695
// continue ;
40693: GO 40668
// if weapon in weapons then
40695: LD_VAR 0 8
40699: PUSH
40700: LD_VAR 0 9
40704: IN
40705: IFFALSE 40732
// begin result := [ i , weapon ] ;
40707: LD_ADDR_VAR 0 3
40711: PUSH
40712: LD_VAR 0 4
40716: PUSH
40717: LD_VAR 0 8
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: ST_TO_ADDR
// exit ;
40726: POP
40727: POP
40728: POP
40729: POP
40730: GO 40740
// end ; end ;
40732: GO 40668
40734: POP
40735: POP
// end ;
40736: GO 40554
40738: POP
40739: POP
// end ;
40740: LD_VAR 0 3
40744: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40745: LD_INT 0
40747: PPUSH
// if not side or side > 8 then
40748: LD_VAR 0 3
40752: NOT
40753: PUSH
40754: LD_VAR 0 3
40758: PUSH
40759: LD_INT 8
40761: GREATER
40762: OR
40763: IFFALSE 40767
// exit ;
40765: GO 40826
// if not range then
40767: LD_VAR 0 4
40771: NOT
40772: IFFALSE 40783
// range := - 12 ;
40774: LD_ADDR_VAR 0 4
40778: PUSH
40779: LD_INT 12
40781: NEG
40782: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40783: LD_VAR 0 1
40787: PPUSH
40788: LD_VAR 0 2
40792: PPUSH
40793: LD_VAR 0 3
40797: PPUSH
40798: LD_VAR 0 4
40802: PPUSH
40803: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40807: LD_VAR 0 1
40811: PPUSH
40812: LD_VAR 0 2
40816: PPUSH
40817: LD_VAR 0 3
40821: PPUSH
40822: CALL_OW 331
// end ;
40826: LD_VAR 0 5
40830: RET
// export function Video ( mode ) ; begin
40831: LD_INT 0
40833: PPUSH
// ingame_video = mode ;
40834: LD_ADDR_OWVAR 52
40838: PUSH
40839: LD_VAR 0 1
40843: ST_TO_ADDR
// interface_hidden = mode ;
40844: LD_ADDR_OWVAR 54
40848: PUSH
40849: LD_VAR 0 1
40853: ST_TO_ADDR
// end ;
40854: LD_VAR 0 2
40858: RET
// export function Join ( array , element ) ; begin
40859: LD_INT 0
40861: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40862: LD_ADDR_VAR 0 3
40866: PUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: LD_VAR 0 1
40876: PUSH
40877: LD_INT 1
40879: PLUS
40880: PPUSH
40881: LD_VAR 0 2
40885: PPUSH
40886: CALL_OW 1
40890: ST_TO_ADDR
// end ;
40891: LD_VAR 0 3
40895: RET
// export function JoinUnion ( array , element ) ; begin
40896: LD_INT 0
40898: PPUSH
// result := array union element ;
40899: LD_ADDR_VAR 0 3
40903: PUSH
40904: LD_VAR 0 1
40908: PUSH
40909: LD_VAR 0 2
40913: UNION
40914: ST_TO_ADDR
// end ;
40915: LD_VAR 0 3
40919: RET
// export function GetBehemoths ( side ) ; begin
40920: LD_INT 0
40922: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40923: LD_ADDR_VAR 0 2
40927: PUSH
40928: LD_INT 22
40930: PUSH
40931: LD_VAR 0 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 31
40942: PUSH
40943: LD_INT 25
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PPUSH
40954: CALL_OW 69
40958: ST_TO_ADDR
// end ;
40959: LD_VAR 0 2
40963: RET
// export function Shuffle ( array ) ; var i , index ; begin
40964: LD_INT 0
40966: PPUSH
40967: PPUSH
40968: PPUSH
// result := [ ] ;
40969: LD_ADDR_VAR 0 2
40973: PUSH
40974: EMPTY
40975: ST_TO_ADDR
// if not array then
40976: LD_VAR 0 1
40980: NOT
40981: IFFALSE 40985
// exit ;
40983: GO 41084
// Randomize ;
40985: CALL_OW 10
// for i = array downto 1 do
40989: LD_ADDR_VAR 0 3
40993: PUSH
40994: DOUBLE
40995: LD_VAR 0 1
40999: INC
41000: ST_TO_ADDR
41001: LD_INT 1
41003: PUSH
41004: FOR_DOWNTO
41005: IFFALSE 41082
// begin index := rand ( 1 , array ) ;
41007: LD_ADDR_VAR 0 4
41011: PUSH
41012: LD_INT 1
41014: PPUSH
41015: LD_VAR 0 1
41019: PPUSH
41020: CALL_OW 12
41024: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41025: LD_ADDR_VAR 0 2
41029: PUSH
41030: LD_VAR 0 2
41034: PPUSH
41035: LD_VAR 0 2
41039: PUSH
41040: LD_INT 1
41042: PLUS
41043: PPUSH
41044: LD_VAR 0 1
41048: PUSH
41049: LD_VAR 0 4
41053: ARRAY
41054: PPUSH
41055: CALL_OW 2
41059: ST_TO_ADDR
// array := Delete ( array , index ) ;
41060: LD_ADDR_VAR 0 1
41064: PUSH
41065: LD_VAR 0 1
41069: PPUSH
41070: LD_VAR 0 4
41074: PPUSH
41075: CALL_OW 3
41079: ST_TO_ADDR
// end ;
41080: GO 41004
41082: POP
41083: POP
// end ;
41084: LD_VAR 0 2
41088: RET
// export function GetBaseMaterials ( base ) ; begin
41089: LD_INT 0
41091: PPUSH
// result := [ 0 , 0 , 0 ] ;
41092: LD_ADDR_VAR 0 2
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: LIST
41110: ST_TO_ADDR
// if not base then
41111: LD_VAR 0 1
41115: NOT
41116: IFFALSE 41120
// exit ;
41118: GO 41169
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41120: LD_ADDR_VAR 0 2
41124: PUSH
41125: LD_VAR 0 1
41129: PPUSH
41130: LD_INT 1
41132: PPUSH
41133: CALL_OW 275
41137: PUSH
41138: LD_VAR 0 1
41142: PPUSH
41143: LD_INT 2
41145: PPUSH
41146: CALL_OW 275
41150: PUSH
41151: LD_VAR 0 1
41155: PPUSH
41156: LD_INT 3
41158: PPUSH
41159: CALL_OW 275
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: LIST
41168: ST_TO_ADDR
// end ;
41169: LD_VAR 0 2
41173: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41174: LD_INT 0
41176: PPUSH
41177: PPUSH
// result := array ;
41178: LD_ADDR_VAR 0 3
41182: PUSH
41183: LD_VAR 0 1
41187: ST_TO_ADDR
// if size >= result then
41188: LD_VAR 0 2
41192: PUSH
41193: LD_VAR 0 3
41197: GREATEREQUAL
41198: IFFALSE 41202
// exit ;
41200: GO 41252
// if size then
41202: LD_VAR 0 2
41206: IFFALSE 41252
// for i := array downto size do
41208: LD_ADDR_VAR 0 4
41212: PUSH
41213: DOUBLE
41214: LD_VAR 0 1
41218: INC
41219: ST_TO_ADDR
41220: LD_VAR 0 2
41224: PUSH
41225: FOR_DOWNTO
41226: IFFALSE 41250
// result := Delete ( result , result ) ;
41228: LD_ADDR_VAR 0 3
41232: PUSH
41233: LD_VAR 0 3
41237: PPUSH
41238: LD_VAR 0 3
41242: PPUSH
41243: CALL_OW 3
41247: ST_TO_ADDR
41248: GO 41225
41250: POP
41251: POP
// end ;
41252: LD_VAR 0 3
41256: RET
// export function ComExit ( unit ) ; var tmp ; begin
41257: LD_INT 0
41259: PPUSH
41260: PPUSH
// if not IsInUnit ( unit ) then
41261: LD_VAR 0 1
41265: PPUSH
41266: CALL_OW 310
41270: NOT
41271: IFFALSE 41275
// exit ;
41273: GO 41335
// tmp := IsInUnit ( unit ) ;
41275: LD_ADDR_VAR 0 3
41279: PUSH
41280: LD_VAR 0 1
41284: PPUSH
41285: CALL_OW 310
41289: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41290: LD_VAR 0 3
41294: PPUSH
41295: CALL_OW 247
41299: PUSH
41300: LD_INT 2
41302: EQUAL
41303: IFFALSE 41316
// ComExitVehicle ( unit ) else
41305: LD_VAR 0 1
41309: PPUSH
41310: CALL_OW 121
41314: GO 41325
// ComExitBuilding ( unit ) ;
41316: LD_VAR 0 1
41320: PPUSH
41321: CALL_OW 122
// result := tmp ;
41325: LD_ADDR_VAR 0 2
41329: PUSH
41330: LD_VAR 0 3
41334: ST_TO_ADDR
// end ;
41335: LD_VAR 0 2
41339: RET
// export function ComExitAll ( units ) ; var i ; begin
41340: LD_INT 0
41342: PPUSH
41343: PPUSH
// if not units then
41344: LD_VAR 0 1
41348: NOT
41349: IFFALSE 41353
// exit ;
41351: GO 41379
// for i in units do
41353: LD_ADDR_VAR 0 3
41357: PUSH
41358: LD_VAR 0 1
41362: PUSH
41363: FOR_IN
41364: IFFALSE 41377
// ComExit ( i ) ;
41366: LD_VAR 0 3
41370: PPUSH
41371: CALL 41257 0 1
41375: GO 41363
41377: POP
41378: POP
// end ;
41379: LD_VAR 0 2
41383: RET
// export function ResetHc ; begin
41384: LD_INT 0
41386: PPUSH
// InitHc ;
41387: CALL_OW 19
// hc_importance := 0 ;
41391: LD_ADDR_OWVAR 32
41395: PUSH
41396: LD_INT 0
41398: ST_TO_ADDR
// end ;
41399: LD_VAR 0 1
41403: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41404: LD_INT 0
41406: PPUSH
41407: PPUSH
41408: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41409: LD_ADDR_VAR 0 6
41413: PUSH
41414: LD_VAR 0 1
41418: PUSH
41419: LD_VAR 0 3
41423: PLUS
41424: PUSH
41425: LD_INT 2
41427: DIV
41428: ST_TO_ADDR
// if _x < 0 then
41429: LD_VAR 0 6
41433: PUSH
41434: LD_INT 0
41436: LESS
41437: IFFALSE 41454
// _x := _x * - 1 ;
41439: LD_ADDR_VAR 0 6
41443: PUSH
41444: LD_VAR 0 6
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: MUL
41453: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41454: LD_ADDR_VAR 0 7
41458: PUSH
41459: LD_VAR 0 2
41463: PUSH
41464: LD_VAR 0 4
41468: PLUS
41469: PUSH
41470: LD_INT 2
41472: DIV
41473: ST_TO_ADDR
// if _y < 0 then
41474: LD_VAR 0 7
41478: PUSH
41479: LD_INT 0
41481: LESS
41482: IFFALSE 41499
// _y := _y * - 1 ;
41484: LD_ADDR_VAR 0 7
41488: PUSH
41489: LD_VAR 0 7
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: MUL
41498: ST_TO_ADDR
// result := [ _x , _y ] ;
41499: LD_ADDR_VAR 0 5
41503: PUSH
41504: LD_VAR 0 6
41508: PUSH
41509: LD_VAR 0 7
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: ST_TO_ADDR
// end ;
41518: LD_VAR 0 5
41522: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41523: LD_INT 0
41525: PPUSH
41526: PPUSH
41527: PPUSH
41528: PPUSH
// task := GetTaskList ( unit ) ;
41529: LD_ADDR_VAR 0 7
41533: PUSH
41534: LD_VAR 0 1
41538: PPUSH
41539: CALL_OW 437
41543: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41544: LD_VAR 0 7
41548: NOT
41549: PUSH
41550: LD_VAR 0 1
41554: PPUSH
41555: LD_VAR 0 2
41559: PPUSH
41560: CALL_OW 308
41564: NOT
41565: AND
41566: IFFALSE 41570
// exit ;
41568: GO 41688
// if IsInArea ( unit , area ) then
41570: LD_VAR 0 1
41574: PPUSH
41575: LD_VAR 0 2
41579: PPUSH
41580: CALL_OW 308
41584: IFFALSE 41602
// begin ComMoveToArea ( unit , goAway ) ;
41586: LD_VAR 0 1
41590: PPUSH
41591: LD_VAR 0 3
41595: PPUSH
41596: CALL_OW 113
// exit ;
41600: GO 41688
// end ; if task [ 1 ] [ 1 ] <> M then
41602: LD_VAR 0 7
41606: PUSH
41607: LD_INT 1
41609: ARRAY
41610: PUSH
41611: LD_INT 1
41613: ARRAY
41614: PUSH
41615: LD_STRING M
41617: NONEQUAL
41618: IFFALSE 41622
// exit ;
41620: GO 41688
// x := task [ 1 ] [ 2 ] ;
41622: LD_ADDR_VAR 0 5
41626: PUSH
41627: LD_VAR 0 7
41631: PUSH
41632: LD_INT 1
41634: ARRAY
41635: PUSH
41636: LD_INT 2
41638: ARRAY
41639: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41640: LD_ADDR_VAR 0 6
41644: PUSH
41645: LD_VAR 0 7
41649: PUSH
41650: LD_INT 1
41652: ARRAY
41653: PUSH
41654: LD_INT 3
41656: ARRAY
41657: ST_TO_ADDR
// if InArea ( x , y , area ) then
41658: LD_VAR 0 5
41662: PPUSH
41663: LD_VAR 0 6
41667: PPUSH
41668: LD_VAR 0 2
41672: PPUSH
41673: CALL_OW 309
41677: IFFALSE 41688
// ComStop ( unit ) ;
41679: LD_VAR 0 1
41683: PPUSH
41684: CALL_OW 141
// end ;
41688: LD_VAR 0 4
41692: RET
// export function Abs ( value ) ; begin
41693: LD_INT 0
41695: PPUSH
// result := value ;
41696: LD_ADDR_VAR 0 2
41700: PUSH
41701: LD_VAR 0 1
41705: ST_TO_ADDR
// if value < 0 then
41706: LD_VAR 0 1
41710: PUSH
41711: LD_INT 0
41713: LESS
41714: IFFALSE 41731
// result := value * - 1 ;
41716: LD_ADDR_VAR 0 2
41720: PUSH
41721: LD_VAR 0 1
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: MUL
41730: ST_TO_ADDR
// end ;
41731: LD_VAR 0 2
41735: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41736: LD_INT 0
41738: PPUSH
41739: PPUSH
41740: PPUSH
41741: PPUSH
41742: PPUSH
41743: PPUSH
41744: PPUSH
41745: PPUSH
// if not unit or not building then
41746: LD_VAR 0 1
41750: NOT
41751: PUSH
41752: LD_VAR 0 2
41756: NOT
41757: OR
41758: IFFALSE 41762
// exit ;
41760: GO 41988
// x := GetX ( building ) ;
41762: LD_ADDR_VAR 0 4
41766: PUSH
41767: LD_VAR 0 2
41771: PPUSH
41772: CALL_OW 250
41776: ST_TO_ADDR
// y := GetY ( building ) ;
41777: LD_ADDR_VAR 0 6
41781: PUSH
41782: LD_VAR 0 2
41786: PPUSH
41787: CALL_OW 251
41791: ST_TO_ADDR
// d := GetDir ( building ) ;
41792: LD_ADDR_VAR 0 8
41796: PUSH
41797: LD_VAR 0 2
41801: PPUSH
41802: CALL_OW 254
41806: ST_TO_ADDR
// r := 4 ;
41807: LD_ADDR_VAR 0 9
41811: PUSH
41812: LD_INT 4
41814: ST_TO_ADDR
// for i := 1 to 5 do
41815: LD_ADDR_VAR 0 10
41819: PUSH
41820: DOUBLE
41821: LD_INT 1
41823: DEC
41824: ST_TO_ADDR
41825: LD_INT 5
41827: PUSH
41828: FOR_TO
41829: IFFALSE 41986
// begin _x := ShiftX ( x , d , r + i ) ;
41831: LD_ADDR_VAR 0 5
41835: PUSH
41836: LD_VAR 0 4
41840: PPUSH
41841: LD_VAR 0 8
41845: PPUSH
41846: LD_VAR 0 9
41850: PUSH
41851: LD_VAR 0 10
41855: PLUS
41856: PPUSH
41857: CALL_OW 272
41861: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41862: LD_ADDR_VAR 0 7
41866: PUSH
41867: LD_VAR 0 6
41871: PPUSH
41872: LD_VAR 0 8
41876: PPUSH
41877: LD_VAR 0 9
41881: PUSH
41882: LD_VAR 0 10
41886: PLUS
41887: PPUSH
41888: CALL_OW 273
41892: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41893: LD_VAR 0 5
41897: PPUSH
41898: LD_VAR 0 7
41902: PPUSH
41903: CALL_OW 488
41907: PUSH
41908: LD_VAR 0 5
41912: PPUSH
41913: LD_VAR 0 7
41917: PPUSH
41918: CALL_OW 428
41922: PPUSH
41923: CALL_OW 247
41927: PUSH
41928: LD_INT 3
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: IN
41938: NOT
41939: AND
41940: IFFALSE 41984
// begin ComMoveXY ( unit , _x , _y ) ;
41942: LD_VAR 0 1
41946: PPUSH
41947: LD_VAR 0 5
41951: PPUSH
41952: LD_VAR 0 7
41956: PPUSH
41957: CALL_OW 111
// result := [ _x , _y ] ;
41961: LD_ADDR_VAR 0 3
41965: PUSH
41966: LD_VAR 0 5
41970: PUSH
41971: LD_VAR 0 7
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: ST_TO_ADDR
// exit ;
41980: POP
41981: POP
41982: GO 41988
// end ; end ;
41984: GO 41828
41986: POP
41987: POP
// end ;
41988: LD_VAR 0 3
41992: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41993: LD_INT 0
41995: PPUSH
41996: PPUSH
41997: PPUSH
// result := 0 ;
41998: LD_ADDR_VAR 0 3
42002: PUSH
42003: LD_INT 0
42005: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42006: LD_VAR 0 1
42010: PUSH
42011: LD_INT 0
42013: LESS
42014: PUSH
42015: LD_VAR 0 1
42019: PUSH
42020: LD_INT 8
42022: GREATER
42023: OR
42024: PUSH
42025: LD_VAR 0 2
42029: PUSH
42030: LD_INT 0
42032: LESS
42033: OR
42034: PUSH
42035: LD_VAR 0 2
42039: PUSH
42040: LD_INT 8
42042: GREATER
42043: OR
42044: IFFALSE 42048
// exit ;
42046: GO 42123
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42048: LD_ADDR_VAR 0 4
42052: PUSH
42053: LD_INT 22
42055: PUSH
42056: LD_VAR 0 2
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PPUSH
42065: CALL_OW 69
42069: PUSH
42070: FOR_IN
42071: IFFALSE 42121
// begin un := UnitShoot ( i ) ;
42073: LD_ADDR_VAR 0 5
42077: PUSH
42078: LD_VAR 0 4
42082: PPUSH
42083: CALL_OW 504
42087: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42088: LD_VAR 0 5
42092: PPUSH
42093: CALL_OW 255
42097: PUSH
42098: LD_VAR 0 1
42102: EQUAL
42103: IFFALSE 42119
// begin result := un ;
42105: LD_ADDR_VAR 0 3
42109: PUSH
42110: LD_VAR 0 5
42114: ST_TO_ADDR
// exit ;
42115: POP
42116: POP
42117: GO 42123
// end ; end ;
42119: GO 42070
42121: POP
42122: POP
// end ;
42123: LD_VAR 0 3
42127: RET
// export function GetCargoBay ( units ) ; begin
42128: LD_INT 0
42130: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42131: LD_ADDR_VAR 0 2
42135: PUSH
42136: LD_VAR 0 1
42140: PPUSH
42141: LD_INT 2
42143: PUSH
42144: LD_INT 34
42146: PUSH
42147: LD_INT 12
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 34
42156: PUSH
42157: LD_INT 51
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 34
42166: PUSH
42167: LD_INT 32
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 34
42176: PUSH
42177: LD_INT 89
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: PPUSH
42191: CALL_OW 72
42195: ST_TO_ADDR
// end ;
42196: LD_VAR 0 2
42200: RET
// export function Negate ( value ) ; begin
42201: LD_INT 0
42203: PPUSH
// result := not value ;
42204: LD_ADDR_VAR 0 2
42208: PUSH
42209: LD_VAR 0 1
42213: NOT
42214: ST_TO_ADDR
// end ;
42215: LD_VAR 0 2
42219: RET
// export function Inc ( value ) ; begin
42220: LD_INT 0
42222: PPUSH
// result := value + 1 ;
42223: LD_ADDR_VAR 0 2
42227: PUSH
42228: LD_VAR 0 1
42232: PUSH
42233: LD_INT 1
42235: PLUS
42236: ST_TO_ADDR
// end ;
42237: LD_VAR 0 2
42241: RET
// export function Dec ( value ) ; begin
42242: LD_INT 0
42244: PPUSH
// result := value - 1 ;
42245: LD_ADDR_VAR 0 2
42249: PUSH
42250: LD_VAR 0 1
42254: PUSH
42255: LD_INT 1
42257: MINUS
42258: ST_TO_ADDR
// end ;
42259: LD_VAR 0 2
42263: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42264: LD_INT 0
42266: PPUSH
42267: PPUSH
42268: PPUSH
42269: PPUSH
42270: PPUSH
42271: PPUSH
42272: PPUSH
42273: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42274: LD_VAR 0 1
42278: PPUSH
42279: LD_VAR 0 2
42283: PPUSH
42284: CALL_OW 488
42288: NOT
42289: PUSH
42290: LD_VAR 0 3
42294: PPUSH
42295: LD_VAR 0 4
42299: PPUSH
42300: CALL_OW 488
42304: NOT
42305: OR
42306: IFFALSE 42319
// begin result := - 1 ;
42308: LD_ADDR_VAR 0 5
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: ST_TO_ADDR
// exit ;
42317: GO 42554
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42319: LD_ADDR_VAR 0 12
42323: PUSH
42324: LD_VAR 0 1
42328: PPUSH
42329: LD_VAR 0 2
42333: PPUSH
42334: LD_VAR 0 3
42338: PPUSH
42339: LD_VAR 0 4
42343: PPUSH
42344: CALL 41404 0 4
42348: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42349: LD_ADDR_VAR 0 11
42353: PUSH
42354: LD_VAR 0 1
42358: PPUSH
42359: LD_VAR 0 2
42363: PPUSH
42364: LD_VAR 0 12
42368: PUSH
42369: LD_INT 1
42371: ARRAY
42372: PPUSH
42373: LD_VAR 0 12
42377: PUSH
42378: LD_INT 2
42380: ARRAY
42381: PPUSH
42382: CALL_OW 298
42386: ST_TO_ADDR
// distance := 9999 ;
42387: LD_ADDR_VAR 0 10
42391: PUSH
42392: LD_INT 9999
42394: ST_TO_ADDR
// for i := 0 to 5 do
42395: LD_ADDR_VAR 0 6
42399: PUSH
42400: DOUBLE
42401: LD_INT 0
42403: DEC
42404: ST_TO_ADDR
42405: LD_INT 5
42407: PUSH
42408: FOR_TO
42409: IFFALSE 42552
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42411: LD_ADDR_VAR 0 7
42415: PUSH
42416: LD_VAR 0 1
42420: PPUSH
42421: LD_VAR 0 6
42425: PPUSH
42426: LD_VAR 0 11
42430: PPUSH
42431: CALL_OW 272
42435: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42436: LD_ADDR_VAR 0 8
42440: PUSH
42441: LD_VAR 0 2
42445: PPUSH
42446: LD_VAR 0 6
42450: PPUSH
42451: LD_VAR 0 11
42455: PPUSH
42456: CALL_OW 273
42460: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42461: LD_VAR 0 7
42465: PPUSH
42466: LD_VAR 0 8
42470: PPUSH
42471: CALL_OW 488
42475: NOT
42476: IFFALSE 42480
// continue ;
42478: GO 42408
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42480: LD_ADDR_VAR 0 9
42484: PUSH
42485: LD_VAR 0 12
42489: PUSH
42490: LD_INT 1
42492: ARRAY
42493: PPUSH
42494: LD_VAR 0 12
42498: PUSH
42499: LD_INT 2
42501: ARRAY
42502: PPUSH
42503: LD_VAR 0 7
42507: PPUSH
42508: LD_VAR 0 8
42512: PPUSH
42513: CALL_OW 298
42517: ST_TO_ADDR
// if tmp < distance then
42518: LD_VAR 0 9
42522: PUSH
42523: LD_VAR 0 10
42527: LESS
42528: IFFALSE 42550
// begin result := i ;
42530: LD_ADDR_VAR 0 5
42534: PUSH
42535: LD_VAR 0 6
42539: ST_TO_ADDR
// distance := tmp ;
42540: LD_ADDR_VAR 0 10
42544: PUSH
42545: LD_VAR 0 9
42549: ST_TO_ADDR
// end ; end ;
42550: GO 42408
42552: POP
42553: POP
// end ;
42554: LD_VAR 0 5
42558: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42559: LD_INT 0
42561: PPUSH
42562: PPUSH
// if not driver or not IsInUnit ( driver ) then
42563: LD_VAR 0 1
42567: NOT
42568: PUSH
42569: LD_VAR 0 1
42573: PPUSH
42574: CALL_OW 310
42578: NOT
42579: OR
42580: IFFALSE 42584
// exit ;
42582: GO 42674
// vehicle := IsInUnit ( driver ) ;
42584: LD_ADDR_VAR 0 3
42588: PUSH
42589: LD_VAR 0 1
42593: PPUSH
42594: CALL_OW 310
42598: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42599: LD_VAR 0 1
42603: PPUSH
42604: LD_STRING \
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: PUSH
42634: LD_STRING E
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_VAR 0 3
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PPUSH
42670: CALL_OW 446
// end ;
42674: LD_VAR 0 2
42678: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42679: LD_INT 0
42681: PPUSH
42682: PPUSH
// if not driver or not IsInUnit ( driver ) then
42683: LD_VAR 0 1
42687: NOT
42688: PUSH
42689: LD_VAR 0 1
42693: PPUSH
42694: CALL_OW 310
42698: NOT
42699: OR
42700: IFFALSE 42704
// exit ;
42702: GO 42794
// vehicle := IsInUnit ( driver ) ;
42704: LD_ADDR_VAR 0 3
42708: PUSH
42709: LD_VAR 0 1
42713: PPUSH
42714: CALL_OW 310
42718: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42719: LD_VAR 0 1
42723: PPUSH
42724: LD_STRING \
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: PUSH
42754: LD_STRING E
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: LD_VAR 0 3
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PPUSH
42790: CALL_OW 447
// end ;
42794: LD_VAR 0 2
42798: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42799: LD_INT 0
42801: PPUSH
42802: PPUSH
42803: PPUSH
// tmp := [ ] ;
42804: LD_ADDR_VAR 0 5
42808: PUSH
42809: EMPTY
42810: ST_TO_ADDR
// for i in units do
42811: LD_ADDR_VAR 0 4
42815: PUSH
42816: LD_VAR 0 1
42820: PUSH
42821: FOR_IN
42822: IFFALSE 42860
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42824: LD_ADDR_VAR 0 5
42828: PUSH
42829: LD_VAR 0 5
42833: PPUSH
42834: LD_VAR 0 5
42838: PUSH
42839: LD_INT 1
42841: PLUS
42842: PPUSH
42843: LD_VAR 0 4
42847: PPUSH
42848: CALL_OW 256
42852: PPUSH
42853: CALL_OW 2
42857: ST_TO_ADDR
42858: GO 42821
42860: POP
42861: POP
// if not tmp then
42862: LD_VAR 0 5
42866: NOT
42867: IFFALSE 42871
// exit ;
42869: GO 42919
// if asc then
42871: LD_VAR 0 2
42875: IFFALSE 42899
// result := SortListByListAsc ( units , tmp ) else
42877: LD_ADDR_VAR 0 3
42881: PUSH
42882: LD_VAR 0 1
42886: PPUSH
42887: LD_VAR 0 5
42891: PPUSH
42892: CALL_OW 76
42896: ST_TO_ADDR
42897: GO 42919
// result := SortListByListDesc ( units , tmp ) ;
42899: LD_ADDR_VAR 0 3
42903: PUSH
42904: LD_VAR 0 1
42908: PPUSH
42909: LD_VAR 0 5
42913: PPUSH
42914: CALL_OW 77
42918: ST_TO_ADDR
// end ;
42919: LD_VAR 0 3
42923: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42924: LD_INT 0
42926: PPUSH
42927: PPUSH
// task := GetTaskList ( mech ) ;
42928: LD_ADDR_VAR 0 4
42932: PUSH
42933: LD_VAR 0 1
42937: PPUSH
42938: CALL_OW 437
42942: ST_TO_ADDR
// if not task then
42943: LD_VAR 0 4
42947: NOT
42948: IFFALSE 42952
// exit ;
42950: GO 42994
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42952: LD_ADDR_VAR 0 3
42956: PUSH
42957: LD_VAR 0 4
42961: PUSH
42962: LD_INT 1
42964: ARRAY
42965: PUSH
42966: LD_INT 1
42968: ARRAY
42969: PUSH
42970: LD_STRING r
42972: EQUAL
42973: PUSH
42974: LD_VAR 0 4
42978: PUSH
42979: LD_INT 1
42981: ARRAY
42982: PUSH
42983: LD_INT 4
42985: ARRAY
42986: PUSH
42987: LD_VAR 0 2
42991: EQUAL
42992: AND
42993: ST_TO_ADDR
// end ;
42994: LD_VAR 0 3
42998: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42999: LD_INT 0
43001: PPUSH
// SetDir ( unit , d ) ;
43002: LD_VAR 0 1
43006: PPUSH
43007: LD_VAR 0 4
43011: PPUSH
43012: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43016: LD_VAR 0 1
43020: PPUSH
43021: LD_VAR 0 2
43025: PPUSH
43026: LD_VAR 0 3
43030: PPUSH
43031: LD_VAR 0 5
43035: PPUSH
43036: CALL_OW 48
// end ;
43040: LD_VAR 0 6
43044: RET
// export function ToNaturalNumber ( number ) ; begin
43045: LD_INT 0
43047: PPUSH
// result := number div 1 ;
43048: LD_ADDR_VAR 0 2
43052: PUSH
43053: LD_VAR 0 1
43057: PUSH
43058: LD_INT 1
43060: DIV
43061: ST_TO_ADDR
// if number < 0 then
43062: LD_VAR 0 1
43066: PUSH
43067: LD_INT 0
43069: LESS
43070: IFFALSE 43080
// result := 0 ;
43072: LD_ADDR_VAR 0 2
43076: PUSH
43077: LD_INT 0
43079: ST_TO_ADDR
// end ;
43080: LD_VAR 0 2
43084: RET
// export function SortByClass ( units , class ) ; var un ; begin
43085: LD_INT 0
43087: PPUSH
43088: PPUSH
// if not units or not class then
43089: LD_VAR 0 1
43093: NOT
43094: PUSH
43095: LD_VAR 0 2
43099: NOT
43100: OR
43101: IFFALSE 43105
// exit ;
43103: GO 43200
// result := [ ] ;
43105: LD_ADDR_VAR 0 3
43109: PUSH
43110: EMPTY
43111: ST_TO_ADDR
// for un in units do
43112: LD_ADDR_VAR 0 4
43116: PUSH
43117: LD_VAR 0 1
43121: PUSH
43122: FOR_IN
43123: IFFALSE 43198
// if GetClass ( un ) = class then
43125: LD_VAR 0 4
43129: PPUSH
43130: CALL_OW 257
43134: PUSH
43135: LD_VAR 0 2
43139: EQUAL
43140: IFFALSE 43167
// result := Insert ( result , 1 , un ) else
43142: LD_ADDR_VAR 0 3
43146: PUSH
43147: LD_VAR 0 3
43151: PPUSH
43152: LD_INT 1
43154: PPUSH
43155: LD_VAR 0 4
43159: PPUSH
43160: CALL_OW 2
43164: ST_TO_ADDR
43165: GO 43196
// result := Replace ( result , result + 1 , un ) ;
43167: LD_ADDR_VAR 0 3
43171: PUSH
43172: LD_VAR 0 3
43176: PPUSH
43177: LD_VAR 0 3
43181: PUSH
43182: LD_INT 1
43184: PLUS
43185: PPUSH
43186: LD_VAR 0 4
43190: PPUSH
43191: CALL_OW 1
43195: ST_TO_ADDR
43196: GO 43122
43198: POP
43199: POP
// end ;
43200: LD_VAR 0 3
43204: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43205: LD_INT 0
43207: PPUSH
43208: PPUSH
43209: PPUSH
43210: PPUSH
43211: PPUSH
43212: PPUSH
43213: PPUSH
// result := [ ] ;
43214: LD_ADDR_VAR 0 4
43218: PUSH
43219: EMPTY
43220: ST_TO_ADDR
// if x - r < 0 then
43221: LD_VAR 0 1
43225: PUSH
43226: LD_VAR 0 3
43230: MINUS
43231: PUSH
43232: LD_INT 0
43234: LESS
43235: IFFALSE 43247
// min_x := 0 else
43237: LD_ADDR_VAR 0 8
43241: PUSH
43242: LD_INT 0
43244: ST_TO_ADDR
43245: GO 43263
// min_x := x - r ;
43247: LD_ADDR_VAR 0 8
43251: PUSH
43252: LD_VAR 0 1
43256: PUSH
43257: LD_VAR 0 3
43261: MINUS
43262: ST_TO_ADDR
// if y - r < 0 then
43263: LD_VAR 0 2
43267: PUSH
43268: LD_VAR 0 3
43272: MINUS
43273: PUSH
43274: LD_INT 0
43276: LESS
43277: IFFALSE 43289
// min_y := 0 else
43279: LD_ADDR_VAR 0 7
43283: PUSH
43284: LD_INT 0
43286: ST_TO_ADDR
43287: GO 43305
// min_y := y - r ;
43289: LD_ADDR_VAR 0 7
43293: PUSH
43294: LD_VAR 0 2
43298: PUSH
43299: LD_VAR 0 3
43303: MINUS
43304: ST_TO_ADDR
// max_x := x + r ;
43305: LD_ADDR_VAR 0 9
43309: PUSH
43310: LD_VAR 0 1
43314: PUSH
43315: LD_VAR 0 3
43319: PLUS
43320: ST_TO_ADDR
// max_y := y + r ;
43321: LD_ADDR_VAR 0 10
43325: PUSH
43326: LD_VAR 0 2
43330: PUSH
43331: LD_VAR 0 3
43335: PLUS
43336: ST_TO_ADDR
// for _x = min_x to max_x do
43337: LD_ADDR_VAR 0 5
43341: PUSH
43342: DOUBLE
43343: LD_VAR 0 8
43347: DEC
43348: ST_TO_ADDR
43349: LD_VAR 0 9
43353: PUSH
43354: FOR_TO
43355: IFFALSE 43456
// for _y = min_y to max_y do
43357: LD_ADDR_VAR 0 6
43361: PUSH
43362: DOUBLE
43363: LD_VAR 0 7
43367: DEC
43368: ST_TO_ADDR
43369: LD_VAR 0 10
43373: PUSH
43374: FOR_TO
43375: IFFALSE 43452
// begin if not ValidHex ( _x , _y ) then
43377: LD_VAR 0 5
43381: PPUSH
43382: LD_VAR 0 6
43386: PPUSH
43387: CALL_OW 488
43391: NOT
43392: IFFALSE 43396
// continue ;
43394: GO 43374
// if GetResourceTypeXY ( _x , _y ) then
43396: LD_VAR 0 5
43400: PPUSH
43401: LD_VAR 0 6
43405: PPUSH
43406: CALL_OW 283
43410: IFFALSE 43450
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43412: LD_ADDR_VAR 0 4
43416: PUSH
43417: LD_VAR 0 4
43421: PPUSH
43422: LD_VAR 0 4
43426: PUSH
43427: LD_INT 1
43429: PLUS
43430: PPUSH
43431: LD_VAR 0 5
43435: PUSH
43436: LD_VAR 0 6
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PPUSH
43445: CALL_OW 1
43449: ST_TO_ADDR
// end ;
43450: GO 43374
43452: POP
43453: POP
43454: GO 43354
43456: POP
43457: POP
// end ;
43458: LD_VAR 0 4
43462: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43463: LD_INT 0
43465: PPUSH
43466: PPUSH
43467: PPUSH
43468: PPUSH
43469: PPUSH
43470: PPUSH
43471: PPUSH
43472: PPUSH
// if not units then
43473: LD_VAR 0 1
43477: NOT
43478: IFFALSE 43482
// exit ;
43480: GO 44006
// result := UnitFilter ( units , [ f_ok ] ) ;
43482: LD_ADDR_VAR 0 3
43486: PUSH
43487: LD_VAR 0 1
43491: PPUSH
43492: LD_INT 50
43494: PUSH
43495: EMPTY
43496: LIST
43497: PPUSH
43498: CALL_OW 72
43502: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43503: LD_ADDR_VAR 0 8
43507: PUSH
43508: LD_VAR 0 1
43512: PUSH
43513: LD_INT 1
43515: ARRAY
43516: PPUSH
43517: CALL_OW 255
43521: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43522: LD_ADDR_VAR 0 10
43526: PUSH
43527: LD_INT 29
43529: PUSH
43530: LD_INT 91
43532: PUSH
43533: LD_INT 49
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: LIST
43540: ST_TO_ADDR
// if not result then
43541: LD_VAR 0 3
43545: NOT
43546: IFFALSE 43550
// exit ;
43548: GO 44006
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43550: LD_ADDR_VAR 0 5
43554: PUSH
43555: LD_INT 81
43557: PUSH
43558: LD_VAR 0 8
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PPUSH
43567: CALL_OW 69
43571: ST_TO_ADDR
// for i in result do
43572: LD_ADDR_VAR 0 4
43576: PUSH
43577: LD_VAR 0 3
43581: PUSH
43582: FOR_IN
43583: IFFALSE 44004
// begin tag := GetTag ( i ) + 1 ;
43585: LD_ADDR_VAR 0 9
43589: PUSH
43590: LD_VAR 0 4
43594: PPUSH
43595: CALL_OW 110
43599: PUSH
43600: LD_INT 1
43602: PLUS
43603: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43604: LD_ADDR_VAR 0 7
43608: PUSH
43609: LD_VAR 0 4
43613: PPUSH
43614: CALL_OW 250
43618: PPUSH
43619: LD_VAR 0 4
43623: PPUSH
43624: CALL_OW 251
43628: PPUSH
43629: LD_INT 6
43631: PPUSH
43632: CALL 43205 0 3
43636: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43637: LD_VAR 0 4
43641: PPUSH
43642: CALL_OW 247
43646: PUSH
43647: LD_INT 2
43649: EQUAL
43650: PUSH
43651: LD_VAR 0 7
43655: AND
43656: PUSH
43657: LD_VAR 0 4
43661: PPUSH
43662: CALL_OW 264
43666: PUSH
43667: LD_VAR 0 10
43671: IN
43672: NOT
43673: AND
43674: IFFALSE 43713
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43676: LD_VAR 0 4
43680: PPUSH
43681: LD_VAR 0 7
43685: PUSH
43686: LD_INT 1
43688: ARRAY
43689: PUSH
43690: LD_INT 1
43692: ARRAY
43693: PPUSH
43694: LD_VAR 0 7
43698: PUSH
43699: LD_INT 1
43701: ARRAY
43702: PUSH
43703: LD_INT 2
43705: ARRAY
43706: PPUSH
43707: CALL_OW 116
43711: GO 44002
// if path > tag then
43713: LD_VAR 0 2
43717: PUSH
43718: LD_VAR 0 9
43722: GREATER
43723: IFFALSE 43931
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43725: LD_ADDR_VAR 0 6
43729: PUSH
43730: LD_VAR 0 5
43734: PPUSH
43735: LD_INT 91
43737: PUSH
43738: LD_VAR 0 4
43742: PUSH
43743: LD_INT 8
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: PPUSH
43751: CALL_OW 72
43755: ST_TO_ADDR
// if nearEnemy then
43756: LD_VAR 0 6
43760: IFFALSE 43829
// begin if GetWeapon ( i ) = ru_time_lapser then
43762: LD_VAR 0 4
43766: PPUSH
43767: CALL_OW 264
43771: PUSH
43772: LD_INT 49
43774: EQUAL
43775: IFFALSE 43803
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43777: LD_VAR 0 4
43781: PPUSH
43782: LD_VAR 0 6
43786: PPUSH
43787: LD_VAR 0 4
43791: PPUSH
43792: CALL_OW 74
43796: PPUSH
43797: CALL_OW 112
43801: GO 43827
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43803: LD_VAR 0 4
43807: PPUSH
43808: LD_VAR 0 6
43812: PPUSH
43813: LD_VAR 0 4
43817: PPUSH
43818: CALL_OW 74
43822: PPUSH
43823: CALL_OW 115
// end else
43827: GO 43929
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43829: LD_VAR 0 4
43833: PPUSH
43834: LD_VAR 0 2
43838: PUSH
43839: LD_VAR 0 9
43843: ARRAY
43844: PUSH
43845: LD_INT 1
43847: ARRAY
43848: PPUSH
43849: LD_VAR 0 2
43853: PUSH
43854: LD_VAR 0 9
43858: ARRAY
43859: PUSH
43860: LD_INT 2
43862: ARRAY
43863: PPUSH
43864: CALL_OW 297
43868: PUSH
43869: LD_INT 6
43871: GREATER
43872: IFFALSE 43915
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43874: LD_VAR 0 4
43878: PPUSH
43879: LD_VAR 0 2
43883: PUSH
43884: LD_VAR 0 9
43888: ARRAY
43889: PUSH
43890: LD_INT 1
43892: ARRAY
43893: PPUSH
43894: LD_VAR 0 2
43898: PUSH
43899: LD_VAR 0 9
43903: ARRAY
43904: PUSH
43905: LD_INT 2
43907: ARRAY
43908: PPUSH
43909: CALL_OW 114
43913: GO 43929
// SetTag ( i , tag ) ;
43915: LD_VAR 0 4
43919: PPUSH
43920: LD_VAR 0 9
43924: PPUSH
43925: CALL_OW 109
// end else
43929: GO 44002
// if enemy then
43931: LD_VAR 0 5
43935: IFFALSE 44002
// begin if GetWeapon ( i ) = ru_time_lapser then
43937: LD_VAR 0 4
43941: PPUSH
43942: CALL_OW 264
43946: PUSH
43947: LD_INT 49
43949: EQUAL
43950: IFFALSE 43978
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43952: LD_VAR 0 4
43956: PPUSH
43957: LD_VAR 0 5
43961: PPUSH
43962: LD_VAR 0 4
43966: PPUSH
43967: CALL_OW 74
43971: PPUSH
43972: CALL_OW 112
43976: GO 44002
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43978: LD_VAR 0 4
43982: PPUSH
43983: LD_VAR 0 5
43987: PPUSH
43988: LD_VAR 0 4
43992: PPUSH
43993: CALL_OW 74
43997: PPUSH
43998: CALL_OW 115
// end ; end ;
44002: GO 43582
44004: POP
44005: POP
// end ;
44006: LD_VAR 0 3
44010: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44011: LD_INT 0
44013: PPUSH
44014: PPUSH
44015: PPUSH
// if not unit or IsInUnit ( unit ) then
44016: LD_VAR 0 1
44020: NOT
44021: PUSH
44022: LD_VAR 0 1
44026: PPUSH
44027: CALL_OW 310
44031: OR
44032: IFFALSE 44036
// exit ;
44034: GO 44127
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44036: LD_ADDR_VAR 0 4
44040: PUSH
44041: LD_VAR 0 1
44045: PPUSH
44046: CALL_OW 250
44050: PPUSH
44051: LD_VAR 0 2
44055: PPUSH
44056: LD_INT 1
44058: PPUSH
44059: CALL_OW 272
44063: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44064: LD_ADDR_VAR 0 5
44068: PUSH
44069: LD_VAR 0 1
44073: PPUSH
44074: CALL_OW 251
44078: PPUSH
44079: LD_VAR 0 2
44083: PPUSH
44084: LD_INT 1
44086: PPUSH
44087: CALL_OW 273
44091: ST_TO_ADDR
// if ValidHex ( x , y ) then
44092: LD_VAR 0 4
44096: PPUSH
44097: LD_VAR 0 5
44101: PPUSH
44102: CALL_OW 488
44106: IFFALSE 44127
// ComTurnXY ( unit , x , y ) ;
44108: LD_VAR 0 1
44112: PPUSH
44113: LD_VAR 0 4
44117: PPUSH
44118: LD_VAR 0 5
44122: PPUSH
44123: CALL_OW 118
// end ;
44127: LD_VAR 0 3
44131: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44132: LD_INT 0
44134: PPUSH
44135: PPUSH
// result := false ;
44136: LD_ADDR_VAR 0 3
44140: PUSH
44141: LD_INT 0
44143: ST_TO_ADDR
// if not units then
44144: LD_VAR 0 2
44148: NOT
44149: IFFALSE 44153
// exit ;
44151: GO 44198
// for i in units do
44153: LD_ADDR_VAR 0 4
44157: PUSH
44158: LD_VAR 0 2
44162: PUSH
44163: FOR_IN
44164: IFFALSE 44196
// if See ( side , i ) then
44166: LD_VAR 0 1
44170: PPUSH
44171: LD_VAR 0 4
44175: PPUSH
44176: CALL_OW 292
44180: IFFALSE 44194
// begin result := true ;
44182: LD_ADDR_VAR 0 3
44186: PUSH
44187: LD_INT 1
44189: ST_TO_ADDR
// exit ;
44190: POP
44191: POP
44192: GO 44198
// end ;
44194: GO 44163
44196: POP
44197: POP
// end ;
44198: LD_VAR 0 3
44202: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44203: LD_INT 0
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
// if not unit or not points then
44209: LD_VAR 0 1
44213: NOT
44214: PUSH
44215: LD_VAR 0 2
44219: NOT
44220: OR
44221: IFFALSE 44225
// exit ;
44223: GO 44315
// dist := 99999 ;
44225: LD_ADDR_VAR 0 5
44229: PUSH
44230: LD_INT 99999
44232: ST_TO_ADDR
// for i in points do
44233: LD_ADDR_VAR 0 4
44237: PUSH
44238: LD_VAR 0 2
44242: PUSH
44243: FOR_IN
44244: IFFALSE 44313
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44246: LD_ADDR_VAR 0 6
44250: PUSH
44251: LD_VAR 0 1
44255: PPUSH
44256: LD_VAR 0 4
44260: PUSH
44261: LD_INT 1
44263: ARRAY
44264: PPUSH
44265: LD_VAR 0 4
44269: PUSH
44270: LD_INT 2
44272: ARRAY
44273: PPUSH
44274: CALL_OW 297
44278: ST_TO_ADDR
// if tmpDist < dist then
44279: LD_VAR 0 6
44283: PUSH
44284: LD_VAR 0 5
44288: LESS
44289: IFFALSE 44311
// begin result := i ;
44291: LD_ADDR_VAR 0 3
44295: PUSH
44296: LD_VAR 0 4
44300: ST_TO_ADDR
// dist := tmpDist ;
44301: LD_ADDR_VAR 0 5
44305: PUSH
44306: LD_VAR 0 6
44310: ST_TO_ADDR
// end ; end ;
44311: GO 44243
44313: POP
44314: POP
// end ;
44315: LD_VAR 0 3
44319: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44320: LD_INT 0
44322: PPUSH
// uc_side := side ;
44323: LD_ADDR_OWVAR 20
44327: PUSH
44328: LD_VAR 0 1
44332: ST_TO_ADDR
// uc_nation := 3 ;
44333: LD_ADDR_OWVAR 21
44337: PUSH
44338: LD_INT 3
44340: ST_TO_ADDR
// vc_chassis := 25 ;
44341: LD_ADDR_OWVAR 37
44345: PUSH
44346: LD_INT 25
44348: ST_TO_ADDR
// vc_engine := engine_siberite ;
44349: LD_ADDR_OWVAR 39
44353: PUSH
44354: LD_INT 3
44356: ST_TO_ADDR
// vc_control := control_computer ;
44357: LD_ADDR_OWVAR 38
44361: PUSH
44362: LD_INT 3
44364: ST_TO_ADDR
// vc_weapon := 59 ;
44365: LD_ADDR_OWVAR 40
44369: PUSH
44370: LD_INT 59
44372: ST_TO_ADDR
// result := CreateVehicle ;
44373: LD_ADDR_VAR 0 5
44377: PUSH
44378: CALL_OW 45
44382: ST_TO_ADDR
// SetDir ( result , d ) ;
44383: LD_VAR 0 5
44387: PPUSH
44388: LD_VAR 0 4
44392: PPUSH
44393: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44397: LD_VAR 0 5
44401: PPUSH
44402: LD_VAR 0 2
44406: PPUSH
44407: LD_VAR 0 3
44411: PPUSH
44412: LD_INT 0
44414: PPUSH
44415: CALL_OW 48
// end ;
44419: LD_VAR 0 5
44423: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44424: LD_INT 0
44426: PPUSH
44427: PPUSH
44428: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44429: LD_ADDR_VAR 0 2
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44452: LD_VAR 0 1
44456: NOT
44457: PUSH
44458: LD_VAR 0 1
44462: PPUSH
44463: CALL_OW 264
44467: PUSH
44468: LD_INT 12
44470: PUSH
44471: LD_INT 51
44473: PUSH
44474: LD_INT 32
44476: PUSH
44477: LD_INT 89
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: IN
44486: NOT
44487: OR
44488: IFFALSE 44492
// exit ;
44490: GO 44590
// for i := 1 to 3 do
44492: LD_ADDR_VAR 0 3
44496: PUSH
44497: DOUBLE
44498: LD_INT 1
44500: DEC
44501: ST_TO_ADDR
44502: LD_INT 3
44504: PUSH
44505: FOR_TO
44506: IFFALSE 44588
// begin tmp := GetCargo ( cargo , i ) ;
44508: LD_ADDR_VAR 0 4
44512: PUSH
44513: LD_VAR 0 1
44517: PPUSH
44518: LD_VAR 0 3
44522: PPUSH
44523: CALL_OW 289
44527: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44528: LD_ADDR_VAR 0 2
44532: PUSH
44533: LD_VAR 0 2
44537: PPUSH
44538: LD_VAR 0 3
44542: PPUSH
44543: LD_VAR 0 4
44547: PPUSH
44548: CALL_OW 1
44552: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44553: LD_ADDR_VAR 0 2
44557: PUSH
44558: LD_VAR 0 2
44562: PPUSH
44563: LD_INT 4
44565: PPUSH
44566: LD_VAR 0 2
44570: PUSH
44571: LD_INT 4
44573: ARRAY
44574: PUSH
44575: LD_VAR 0 4
44579: PLUS
44580: PPUSH
44581: CALL_OW 1
44585: ST_TO_ADDR
// end ;
44586: GO 44505
44588: POP
44589: POP
// end ;
44590: LD_VAR 0 2
44594: RET
// export function Length ( array ) ; begin
44595: LD_INT 0
44597: PPUSH
// result := array + 0 ;
44598: LD_ADDR_VAR 0 2
44602: PUSH
44603: LD_VAR 0 1
44607: PUSH
44608: LD_INT 0
44610: PLUS
44611: ST_TO_ADDR
// end ;
44612: LD_VAR 0 2
44616: RET
// export function PrepareArray ( array ) ; begin
44617: LD_INT 0
44619: PPUSH
// result := array diff 0 ;
44620: LD_ADDR_VAR 0 2
44624: PUSH
44625: LD_VAR 0 1
44629: PUSH
44630: LD_INT 0
44632: DIFF
44633: ST_TO_ADDR
// if not result [ 1 ] then
44634: LD_VAR 0 2
44638: PUSH
44639: LD_INT 1
44641: ARRAY
44642: NOT
44643: IFFALSE 44663
// result := Delete ( result , 1 ) ;
44645: LD_ADDR_VAR 0 2
44649: PUSH
44650: LD_VAR 0 2
44654: PPUSH
44655: LD_INT 1
44657: PPUSH
44658: CALL_OW 3
44662: ST_TO_ADDR
// end ;
44663: LD_VAR 0 2
44667: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44668: LD_INT 0
44670: PPUSH
44671: PPUSH
44672: PPUSH
44673: PPUSH
// sibRocketRange := 25 ;
44674: LD_ADDR_VAR 0 6
44678: PUSH
44679: LD_INT 25
44681: ST_TO_ADDR
// result := false ;
44682: LD_ADDR_VAR 0 4
44686: PUSH
44687: LD_INT 0
44689: ST_TO_ADDR
// for i := 0 to 5 do
44690: LD_ADDR_VAR 0 5
44694: PUSH
44695: DOUBLE
44696: LD_INT 0
44698: DEC
44699: ST_TO_ADDR
44700: LD_INT 5
44702: PUSH
44703: FOR_TO
44704: IFFALSE 44771
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44706: LD_VAR 0 1
44710: PPUSH
44711: LD_VAR 0 5
44715: PPUSH
44716: LD_VAR 0 6
44720: PPUSH
44721: CALL_OW 272
44725: PPUSH
44726: LD_VAR 0 2
44730: PPUSH
44731: LD_VAR 0 5
44735: PPUSH
44736: LD_VAR 0 6
44740: PPUSH
44741: CALL_OW 273
44745: PPUSH
44746: LD_VAR 0 3
44750: PPUSH
44751: CALL_OW 309
44755: IFFALSE 44769
// begin result := true ;
44757: LD_ADDR_VAR 0 4
44761: PUSH
44762: LD_INT 1
44764: ST_TO_ADDR
// exit ;
44765: POP
44766: POP
44767: GO 44773
// end ;
44769: GO 44703
44771: POP
44772: POP
// end ;
44773: LD_VAR 0 4
44777: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44778: LD_INT 0
44780: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44781: LD_VAR 0 1
44785: PPUSH
44786: LD_VAR 0 2
44790: PPUSH
44791: LD_INT 0
44793: PPUSH
44794: LD_INT 0
44796: PPUSH
44797: LD_INT 1
44799: PPUSH
44800: LD_INT 0
44802: PPUSH
44803: CALL_OW 587
// end ; end_of_file end_of_file
44807: LD_VAR 0 3
44811: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
44812: LD_VAR 0 1
44816: PPUSH
44817: LD_VAR 0 2
44821: PPUSH
44822: LD_VAR 0 3
44826: PPUSH
44827: LD_VAR 0 4
44831: PPUSH
44832: LD_VAR 0 5
44836: PPUSH
44837: LD_VAR 0 6
44841: PPUSH
44842: CALL 45026 0 6
// end ;
44846: PPOPN 6
44848: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
44849: LD_INT 0
44851: PPUSH
// begin if not units then
44852: LD_VAR 0 1
44856: NOT
44857: IFFALSE 44861
// exit ;
44859: GO 44861
// end ;
44861: PPOPN 7
44863: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
44864: CALL 44930 0 0
// end ; end_of_file
44868: PPOPN 1
44870: END
// export globalGameSaveCounter ; every 0 0$1 do
44871: GO 44873
44873: DISABLE
// begin enable ;
44874: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
44875: LD_STRING updateTimer(
44877: PUSH
44878: LD_OWVAR 1
44882: STR
44883: PUSH
44884: LD_STRING );
44886: STR
44887: PPUSH
44888: CALL_OW 559
// end ;
44892: END
// every 0 0$1 do
44893: GO 44895
44895: DISABLE
// begin globalGameSaveCounter := 0 ;
44896: LD_ADDR_EXP 26
44900: PUSH
44901: LD_INT 0
44903: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
44904: LD_STRING setGameSaveCounter(0)
44906: PPUSH
44907: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
44911: LD_STRING initStreamRollete();
44913: PPUSH
44914: CALL_OW 559
// InitStreamMode ;
44918: CALL 46244 0 0
// DefineStreamItems ( false ) ;
44922: LD_INT 0
44924: PPUSH
44925: CALL 46708 0 1
// end ;
44929: END
// export function SOS_MapStart ( ) ; begin
44930: LD_INT 0
44932: PPUSH
// if streamModeActive then
44933: LD_EXP 27
44937: IFFALSE 44946
// DefineStreamItems ( true ) ;
44939: LD_INT 1
44941: PPUSH
44942: CALL 46708 0 1
// UpdateLuaVariables ( ) ;
44946: CALL 44963 0 0
// UpdateFactoryWaypoints ( ) ;
44950: CALL 59569 0 0
// UpdateWarehouseGatheringPoints ( ) ;
44954: CALL 59826 0 0
// end ;
44958: LD_VAR 0 1
44962: RET
// function UpdateLuaVariables ( ) ; begin
44963: LD_INT 0
44965: PPUSH
// if globalGameSaveCounter then
44966: LD_EXP 26
44970: IFFALSE 45004
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
44972: LD_ADDR_EXP 26
44976: PUSH
44977: LD_EXP 26
44981: PPUSH
44982: CALL 42220 0 1
44986: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
44987: LD_STRING setGameSaveCounter(
44989: PUSH
44990: LD_EXP 26
44994: STR
44995: PUSH
44996: LD_STRING )
44998: STR
44999: PPUSH
45000: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
45004: LD_STRING setGameDifficulty(
45006: PUSH
45007: LD_OWVAR 67
45011: STR
45012: PUSH
45013: LD_STRING )
45015: STR
45016: PPUSH
45017: CALL_OW 559
// end ;
45021: LD_VAR 0 1
45025: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
45026: LD_INT 0
45028: PPUSH
// if p2 = stream_mode then
45029: LD_VAR 0 2
45033: PUSH
45034: LD_INT 100
45036: EQUAL
45037: IFFALSE 46040
// begin if not StreamModeActive then
45039: LD_EXP 27
45043: NOT
45044: IFFALSE 45054
// StreamModeActive := true ;
45046: LD_ADDR_EXP 27
45050: PUSH
45051: LD_INT 1
45053: ST_TO_ADDR
// if p3 = 0 then
45054: LD_VAR 0 3
45058: PUSH
45059: LD_INT 0
45061: EQUAL
45062: IFFALSE 45068
// InitStreamMode ;
45064: CALL 46244 0 0
// if p3 = 1 then
45068: LD_VAR 0 3
45072: PUSH
45073: LD_INT 1
45075: EQUAL
45076: IFFALSE 45086
// sRocket := true ;
45078: LD_ADDR_EXP 32
45082: PUSH
45083: LD_INT 1
45085: ST_TO_ADDR
// if p3 = 2 then
45086: LD_VAR 0 3
45090: PUSH
45091: LD_INT 2
45093: EQUAL
45094: IFFALSE 45104
// sSpeed := true ;
45096: LD_ADDR_EXP 31
45100: PUSH
45101: LD_INT 1
45103: ST_TO_ADDR
// if p3 = 3 then
45104: LD_VAR 0 3
45108: PUSH
45109: LD_INT 3
45111: EQUAL
45112: IFFALSE 45122
// sEngine := true ;
45114: LD_ADDR_EXP 33
45118: PUSH
45119: LD_INT 1
45121: ST_TO_ADDR
// if p3 = 4 then
45122: LD_VAR 0 3
45126: PUSH
45127: LD_INT 4
45129: EQUAL
45130: IFFALSE 45140
// sSpec := true ;
45132: LD_ADDR_EXP 30
45136: PUSH
45137: LD_INT 1
45139: ST_TO_ADDR
// if p3 = 5 then
45140: LD_VAR 0 3
45144: PUSH
45145: LD_INT 5
45147: EQUAL
45148: IFFALSE 45158
// sLevel := true ;
45150: LD_ADDR_EXP 34
45154: PUSH
45155: LD_INT 1
45157: ST_TO_ADDR
// if p3 = 6 then
45158: LD_VAR 0 3
45162: PUSH
45163: LD_INT 6
45165: EQUAL
45166: IFFALSE 45176
// sArmoury := true ;
45168: LD_ADDR_EXP 35
45172: PUSH
45173: LD_INT 1
45175: ST_TO_ADDR
// if p3 = 7 then
45176: LD_VAR 0 3
45180: PUSH
45181: LD_INT 7
45183: EQUAL
45184: IFFALSE 45194
// sRadar := true ;
45186: LD_ADDR_EXP 36
45190: PUSH
45191: LD_INT 1
45193: ST_TO_ADDR
// if p3 = 8 then
45194: LD_VAR 0 3
45198: PUSH
45199: LD_INT 8
45201: EQUAL
45202: IFFALSE 45212
// sBunker := true ;
45204: LD_ADDR_EXP 37
45208: PUSH
45209: LD_INT 1
45211: ST_TO_ADDR
// if p3 = 9 then
45212: LD_VAR 0 3
45216: PUSH
45217: LD_INT 9
45219: EQUAL
45220: IFFALSE 45230
// sHack := true ;
45222: LD_ADDR_EXP 38
45226: PUSH
45227: LD_INT 1
45229: ST_TO_ADDR
// if p3 = 10 then
45230: LD_VAR 0 3
45234: PUSH
45235: LD_INT 10
45237: EQUAL
45238: IFFALSE 45248
// sFire := true ;
45240: LD_ADDR_EXP 39
45244: PUSH
45245: LD_INT 1
45247: ST_TO_ADDR
// if p3 = 11 then
45248: LD_VAR 0 3
45252: PUSH
45253: LD_INT 11
45255: EQUAL
45256: IFFALSE 45266
// sRefresh := true ;
45258: LD_ADDR_EXP 40
45262: PUSH
45263: LD_INT 1
45265: ST_TO_ADDR
// if p3 = 12 then
45266: LD_VAR 0 3
45270: PUSH
45271: LD_INT 12
45273: EQUAL
45274: IFFALSE 45284
// sExp := true ;
45276: LD_ADDR_EXP 41
45280: PUSH
45281: LD_INT 1
45283: ST_TO_ADDR
// if p3 = 13 then
45284: LD_VAR 0 3
45288: PUSH
45289: LD_INT 13
45291: EQUAL
45292: IFFALSE 45302
// sDepot := true ;
45294: LD_ADDR_EXP 42
45298: PUSH
45299: LD_INT 1
45301: ST_TO_ADDR
// if p3 = 14 then
45302: LD_VAR 0 3
45306: PUSH
45307: LD_INT 14
45309: EQUAL
45310: IFFALSE 45320
// sFlag := true ;
45312: LD_ADDR_EXP 43
45316: PUSH
45317: LD_INT 1
45319: ST_TO_ADDR
// if p3 = 15 then
45320: LD_VAR 0 3
45324: PUSH
45325: LD_INT 15
45327: EQUAL
45328: IFFALSE 45338
// sKamikadze := true ;
45330: LD_ADDR_EXP 51
45334: PUSH
45335: LD_INT 1
45337: ST_TO_ADDR
// if p3 = 16 then
45338: LD_VAR 0 3
45342: PUSH
45343: LD_INT 16
45345: EQUAL
45346: IFFALSE 45356
// sTroll := true ;
45348: LD_ADDR_EXP 52
45352: PUSH
45353: LD_INT 1
45355: ST_TO_ADDR
// if p3 = 17 then
45356: LD_VAR 0 3
45360: PUSH
45361: LD_INT 17
45363: EQUAL
45364: IFFALSE 45374
// sSlow := true ;
45366: LD_ADDR_EXP 53
45370: PUSH
45371: LD_INT 1
45373: ST_TO_ADDR
// if p3 = 18 then
45374: LD_VAR 0 3
45378: PUSH
45379: LD_INT 18
45381: EQUAL
45382: IFFALSE 45392
// sLack := true ;
45384: LD_ADDR_EXP 54
45388: PUSH
45389: LD_INT 1
45391: ST_TO_ADDR
// if p3 = 19 then
45392: LD_VAR 0 3
45396: PUSH
45397: LD_INT 19
45399: EQUAL
45400: IFFALSE 45410
// sTank := true ;
45402: LD_ADDR_EXP 56
45406: PUSH
45407: LD_INT 1
45409: ST_TO_ADDR
// if p3 = 20 then
45410: LD_VAR 0 3
45414: PUSH
45415: LD_INT 20
45417: EQUAL
45418: IFFALSE 45428
// sRemote := true ;
45420: LD_ADDR_EXP 57
45424: PUSH
45425: LD_INT 1
45427: ST_TO_ADDR
// if p3 = 21 then
45428: LD_VAR 0 3
45432: PUSH
45433: LD_INT 21
45435: EQUAL
45436: IFFALSE 45446
// sPowell := true ;
45438: LD_ADDR_EXP 58
45442: PUSH
45443: LD_INT 1
45445: ST_TO_ADDR
// if p3 = 22 then
45446: LD_VAR 0 3
45450: PUSH
45451: LD_INT 22
45453: EQUAL
45454: IFFALSE 45464
// sTeleport := true ;
45456: LD_ADDR_EXP 61
45460: PUSH
45461: LD_INT 1
45463: ST_TO_ADDR
// if p3 = 23 then
45464: LD_VAR 0 3
45468: PUSH
45469: LD_INT 23
45471: EQUAL
45472: IFFALSE 45482
// sOilTower := true ;
45474: LD_ADDR_EXP 63
45478: PUSH
45479: LD_INT 1
45481: ST_TO_ADDR
// if p3 = 24 then
45482: LD_VAR 0 3
45486: PUSH
45487: LD_INT 24
45489: EQUAL
45490: IFFALSE 45500
// sShovel := true ;
45492: LD_ADDR_EXP 64
45496: PUSH
45497: LD_INT 1
45499: ST_TO_ADDR
// if p3 = 25 then
45500: LD_VAR 0 3
45504: PUSH
45505: LD_INT 25
45507: EQUAL
45508: IFFALSE 45518
// sSheik := true ;
45510: LD_ADDR_EXP 65
45514: PUSH
45515: LD_INT 1
45517: ST_TO_ADDR
// if p3 = 26 then
45518: LD_VAR 0 3
45522: PUSH
45523: LD_INT 26
45525: EQUAL
45526: IFFALSE 45536
// sEarthquake := true ;
45528: LD_ADDR_EXP 67
45532: PUSH
45533: LD_INT 1
45535: ST_TO_ADDR
// if p3 = 27 then
45536: LD_VAR 0 3
45540: PUSH
45541: LD_INT 27
45543: EQUAL
45544: IFFALSE 45554
// sAI := true ;
45546: LD_ADDR_EXP 68
45550: PUSH
45551: LD_INT 1
45553: ST_TO_ADDR
// if p3 = 28 then
45554: LD_VAR 0 3
45558: PUSH
45559: LD_INT 28
45561: EQUAL
45562: IFFALSE 45572
// sCargo := true ;
45564: LD_ADDR_EXP 71
45568: PUSH
45569: LD_INT 1
45571: ST_TO_ADDR
// if p3 = 29 then
45572: LD_VAR 0 3
45576: PUSH
45577: LD_INT 29
45579: EQUAL
45580: IFFALSE 45590
// sDLaser := true ;
45582: LD_ADDR_EXP 72
45586: PUSH
45587: LD_INT 1
45589: ST_TO_ADDR
// if p3 = 30 then
45590: LD_VAR 0 3
45594: PUSH
45595: LD_INT 30
45597: EQUAL
45598: IFFALSE 45608
// sExchange := true ;
45600: LD_ADDR_EXP 73
45604: PUSH
45605: LD_INT 1
45607: ST_TO_ADDR
// if p3 = 31 then
45608: LD_VAR 0 3
45612: PUSH
45613: LD_INT 31
45615: EQUAL
45616: IFFALSE 45626
// sFac := true ;
45618: LD_ADDR_EXP 74
45622: PUSH
45623: LD_INT 1
45625: ST_TO_ADDR
// if p3 = 32 then
45626: LD_VAR 0 3
45630: PUSH
45631: LD_INT 32
45633: EQUAL
45634: IFFALSE 45644
// sPower := true ;
45636: LD_ADDR_EXP 75
45640: PUSH
45641: LD_INT 1
45643: ST_TO_ADDR
// if p3 = 33 then
45644: LD_VAR 0 3
45648: PUSH
45649: LD_INT 33
45651: EQUAL
45652: IFFALSE 45662
// sRandom := true ;
45654: LD_ADDR_EXP 76
45658: PUSH
45659: LD_INT 1
45661: ST_TO_ADDR
// if p3 = 34 then
45662: LD_VAR 0 3
45666: PUSH
45667: LD_INT 34
45669: EQUAL
45670: IFFALSE 45680
// sShield := true ;
45672: LD_ADDR_EXP 77
45676: PUSH
45677: LD_INT 1
45679: ST_TO_ADDR
// if p3 = 35 then
45680: LD_VAR 0 3
45684: PUSH
45685: LD_INT 35
45687: EQUAL
45688: IFFALSE 45698
// sTime := true ;
45690: LD_ADDR_EXP 78
45694: PUSH
45695: LD_INT 1
45697: ST_TO_ADDR
// if p3 = 36 then
45698: LD_VAR 0 3
45702: PUSH
45703: LD_INT 36
45705: EQUAL
45706: IFFALSE 45716
// sTools := true ;
45708: LD_ADDR_EXP 79
45712: PUSH
45713: LD_INT 1
45715: ST_TO_ADDR
// if p3 = 101 then
45716: LD_VAR 0 3
45720: PUSH
45721: LD_INT 101
45723: EQUAL
45724: IFFALSE 45734
// sSold := true ;
45726: LD_ADDR_EXP 44
45730: PUSH
45731: LD_INT 1
45733: ST_TO_ADDR
// if p3 = 102 then
45734: LD_VAR 0 3
45738: PUSH
45739: LD_INT 102
45741: EQUAL
45742: IFFALSE 45752
// sDiff := true ;
45744: LD_ADDR_EXP 45
45748: PUSH
45749: LD_INT 1
45751: ST_TO_ADDR
// if p3 = 103 then
45752: LD_VAR 0 3
45756: PUSH
45757: LD_INT 103
45759: EQUAL
45760: IFFALSE 45770
// sFog := true ;
45762: LD_ADDR_EXP 48
45766: PUSH
45767: LD_INT 1
45769: ST_TO_ADDR
// if p3 = 104 then
45770: LD_VAR 0 3
45774: PUSH
45775: LD_INT 104
45777: EQUAL
45778: IFFALSE 45788
// sReset := true ;
45780: LD_ADDR_EXP 49
45784: PUSH
45785: LD_INT 1
45787: ST_TO_ADDR
// if p3 = 105 then
45788: LD_VAR 0 3
45792: PUSH
45793: LD_INT 105
45795: EQUAL
45796: IFFALSE 45806
// sSun := true ;
45798: LD_ADDR_EXP 50
45802: PUSH
45803: LD_INT 1
45805: ST_TO_ADDR
// if p3 = 106 then
45806: LD_VAR 0 3
45810: PUSH
45811: LD_INT 106
45813: EQUAL
45814: IFFALSE 45824
// sTiger := true ;
45816: LD_ADDR_EXP 46
45820: PUSH
45821: LD_INT 1
45823: ST_TO_ADDR
// if p3 = 107 then
45824: LD_VAR 0 3
45828: PUSH
45829: LD_INT 107
45831: EQUAL
45832: IFFALSE 45842
// sBomb := true ;
45834: LD_ADDR_EXP 47
45838: PUSH
45839: LD_INT 1
45841: ST_TO_ADDR
// if p3 = 108 then
45842: LD_VAR 0 3
45846: PUSH
45847: LD_INT 108
45849: EQUAL
45850: IFFALSE 45860
// sWound := true ;
45852: LD_ADDR_EXP 55
45856: PUSH
45857: LD_INT 1
45859: ST_TO_ADDR
// if p3 = 109 then
45860: LD_VAR 0 3
45864: PUSH
45865: LD_INT 109
45867: EQUAL
45868: IFFALSE 45878
// sBetray := true ;
45870: LD_ADDR_EXP 59
45874: PUSH
45875: LD_INT 1
45877: ST_TO_ADDR
// if p3 = 110 then
45878: LD_VAR 0 3
45882: PUSH
45883: LD_INT 110
45885: EQUAL
45886: IFFALSE 45896
// sContamin := true ;
45888: LD_ADDR_EXP 60
45892: PUSH
45893: LD_INT 1
45895: ST_TO_ADDR
// if p3 = 111 then
45896: LD_VAR 0 3
45900: PUSH
45901: LD_INT 111
45903: EQUAL
45904: IFFALSE 45914
// sOil := true ;
45906: LD_ADDR_EXP 62
45910: PUSH
45911: LD_INT 1
45913: ST_TO_ADDR
// if p3 = 112 then
45914: LD_VAR 0 3
45918: PUSH
45919: LD_INT 112
45921: EQUAL
45922: IFFALSE 45932
// sStu := true ;
45924: LD_ADDR_EXP 66
45928: PUSH
45929: LD_INT 1
45931: ST_TO_ADDR
// if p3 = 113 then
45932: LD_VAR 0 3
45936: PUSH
45937: LD_INT 113
45939: EQUAL
45940: IFFALSE 45950
// sBazooka := true ;
45942: LD_ADDR_EXP 69
45946: PUSH
45947: LD_INT 1
45949: ST_TO_ADDR
// if p3 = 114 then
45950: LD_VAR 0 3
45954: PUSH
45955: LD_INT 114
45957: EQUAL
45958: IFFALSE 45968
// sMortar := true ;
45960: LD_ADDR_EXP 70
45964: PUSH
45965: LD_INT 1
45967: ST_TO_ADDR
// if p3 = 115 then
45968: LD_VAR 0 3
45972: PUSH
45973: LD_INT 115
45975: EQUAL
45976: IFFALSE 45986
// sRanger := true ;
45978: LD_ADDR_EXP 80
45982: PUSH
45983: LD_INT 1
45985: ST_TO_ADDR
// if p3 = 116 then
45986: LD_VAR 0 3
45990: PUSH
45991: LD_INT 116
45993: EQUAL
45994: IFFALSE 46004
// sComputer := true ;
45996: LD_ADDR_EXP 81
46000: PUSH
46001: LD_INT 1
46003: ST_TO_ADDR
// if p3 = 117 then
46004: LD_VAR 0 3
46008: PUSH
46009: LD_INT 117
46011: EQUAL
46012: IFFALSE 46022
// s30 := true ;
46014: LD_ADDR_EXP 82
46018: PUSH
46019: LD_INT 1
46021: ST_TO_ADDR
// if p3 = 118 then
46022: LD_VAR 0 3
46026: PUSH
46027: LD_INT 118
46029: EQUAL
46030: IFFALSE 46040
// s60 := true ;
46032: LD_ADDR_EXP 83
46036: PUSH
46037: LD_INT 1
46039: ST_TO_ADDR
// end ; if p2 = hack_mode then
46040: LD_VAR 0 2
46044: PUSH
46045: LD_INT 101
46047: EQUAL
46048: IFFALSE 46176
// begin case p3 of 1 :
46050: LD_VAR 0 3
46054: PUSH
46055: LD_INT 1
46057: DOUBLE
46058: EQUAL
46059: IFTRUE 46063
46061: GO 46070
46063: POP
// hHackUnlimitedResources ; 2 :
46064: CALL 58315 0 0
46068: GO 46176
46070: LD_INT 2
46072: DOUBLE
46073: EQUAL
46074: IFTRUE 46078
46076: GO 46085
46078: POP
// hHackSetLevel10 ; 3 :
46079: CALL 58448 0 0
46083: GO 46176
46085: LD_INT 3
46087: DOUBLE
46088: EQUAL
46089: IFTRUE 46093
46091: GO 46100
46093: POP
// hHackSetLevel10YourUnits ; 4 :
46094: CALL 58533 0 0
46098: GO 46176
46100: LD_INT 4
46102: DOUBLE
46103: EQUAL
46104: IFTRUE 46108
46106: GO 46115
46108: POP
// hHackInvincible ; 5 :
46109: CALL 58981 0 0
46113: GO 46176
46115: LD_INT 5
46117: DOUBLE
46118: EQUAL
46119: IFTRUE 46123
46121: GO 46130
46123: POP
// hHackInvisible ; 6 :
46124: CALL 59092 0 0
46128: GO 46176
46130: LD_INT 6
46132: DOUBLE
46133: EQUAL
46134: IFTRUE 46138
46136: GO 46145
46138: POP
// hHackChangeYourSide ; 7 :
46139: CALL 59149 0 0
46143: GO 46176
46145: LD_INT 7
46147: DOUBLE
46148: EQUAL
46149: IFTRUE 46153
46151: GO 46160
46153: POP
// hHackChangeUnitSide ; 8 :
46154: CALL 59191 0 0
46158: GO 46176
46160: LD_INT 8
46162: DOUBLE
46163: EQUAL
46164: IFTRUE 46168
46166: GO 46175
46168: POP
// hHackFog ; end ;
46169: CALL 59292 0 0
46173: GO 46176
46175: POP
// end ; if p2 = game_save_mode then
46176: LD_VAR 0 2
46180: PUSH
46181: LD_INT 102
46183: EQUAL
46184: IFFALSE 46239
// begin if p3 = 1 then
46186: LD_VAR 0 3
46190: PUSH
46191: LD_INT 1
46193: EQUAL
46194: IFFALSE 46206
// globalGameSaveCounter := p4 ;
46196: LD_ADDR_EXP 26
46200: PUSH
46201: LD_VAR 0 4
46205: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
46206: LD_VAR 0 3
46210: PUSH
46211: LD_INT 2
46213: EQUAL
46214: PUSH
46215: LD_EXP 26
46219: AND
46220: IFFALSE 46239
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
46222: LD_STRING setGameSaveCounter(
46224: PUSH
46225: LD_EXP 26
46229: STR
46230: PUSH
46231: LD_STRING )
46233: STR
46234: PPUSH
46235: CALL_OW 559
// end ; end ;
46239: LD_VAR 0 7
46243: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
46244: LD_INT 0
46246: PPUSH
// streamModeActive := false ;
46247: LD_ADDR_EXP 27
46251: PUSH
46252: LD_INT 0
46254: ST_TO_ADDR
// normalCounter := 36 ;
46255: LD_ADDR_EXP 28
46259: PUSH
46260: LD_INT 36
46262: ST_TO_ADDR
// hardcoreCounter := 18 ;
46263: LD_ADDR_EXP 29
46267: PUSH
46268: LD_INT 18
46270: ST_TO_ADDR
// sRocket := false ;
46271: LD_ADDR_EXP 32
46275: PUSH
46276: LD_INT 0
46278: ST_TO_ADDR
// sSpeed := false ;
46279: LD_ADDR_EXP 31
46283: PUSH
46284: LD_INT 0
46286: ST_TO_ADDR
// sEngine := false ;
46287: LD_ADDR_EXP 33
46291: PUSH
46292: LD_INT 0
46294: ST_TO_ADDR
// sSpec := false ;
46295: LD_ADDR_EXP 30
46299: PUSH
46300: LD_INT 0
46302: ST_TO_ADDR
// sLevel := false ;
46303: LD_ADDR_EXP 34
46307: PUSH
46308: LD_INT 0
46310: ST_TO_ADDR
// sArmoury := false ;
46311: LD_ADDR_EXP 35
46315: PUSH
46316: LD_INT 0
46318: ST_TO_ADDR
// sRadar := false ;
46319: LD_ADDR_EXP 36
46323: PUSH
46324: LD_INT 0
46326: ST_TO_ADDR
// sBunker := false ;
46327: LD_ADDR_EXP 37
46331: PUSH
46332: LD_INT 0
46334: ST_TO_ADDR
// sHack := false ;
46335: LD_ADDR_EXP 38
46339: PUSH
46340: LD_INT 0
46342: ST_TO_ADDR
// sFire := false ;
46343: LD_ADDR_EXP 39
46347: PUSH
46348: LD_INT 0
46350: ST_TO_ADDR
// sRefresh := false ;
46351: LD_ADDR_EXP 40
46355: PUSH
46356: LD_INT 0
46358: ST_TO_ADDR
// sExp := false ;
46359: LD_ADDR_EXP 41
46363: PUSH
46364: LD_INT 0
46366: ST_TO_ADDR
// sDepot := false ;
46367: LD_ADDR_EXP 42
46371: PUSH
46372: LD_INT 0
46374: ST_TO_ADDR
// sFlag := false ;
46375: LD_ADDR_EXP 43
46379: PUSH
46380: LD_INT 0
46382: ST_TO_ADDR
// sKamikadze := false ;
46383: LD_ADDR_EXP 51
46387: PUSH
46388: LD_INT 0
46390: ST_TO_ADDR
// sTroll := false ;
46391: LD_ADDR_EXP 52
46395: PUSH
46396: LD_INT 0
46398: ST_TO_ADDR
// sSlow := false ;
46399: LD_ADDR_EXP 53
46403: PUSH
46404: LD_INT 0
46406: ST_TO_ADDR
// sLack := false ;
46407: LD_ADDR_EXP 54
46411: PUSH
46412: LD_INT 0
46414: ST_TO_ADDR
// sTank := false ;
46415: LD_ADDR_EXP 56
46419: PUSH
46420: LD_INT 0
46422: ST_TO_ADDR
// sRemote := false ;
46423: LD_ADDR_EXP 57
46427: PUSH
46428: LD_INT 0
46430: ST_TO_ADDR
// sPowell := false ;
46431: LD_ADDR_EXP 58
46435: PUSH
46436: LD_INT 0
46438: ST_TO_ADDR
// sTeleport := false ;
46439: LD_ADDR_EXP 61
46443: PUSH
46444: LD_INT 0
46446: ST_TO_ADDR
// sOilTower := false ;
46447: LD_ADDR_EXP 63
46451: PUSH
46452: LD_INT 0
46454: ST_TO_ADDR
// sShovel := false ;
46455: LD_ADDR_EXP 64
46459: PUSH
46460: LD_INT 0
46462: ST_TO_ADDR
// sSheik := false ;
46463: LD_ADDR_EXP 65
46467: PUSH
46468: LD_INT 0
46470: ST_TO_ADDR
// sEarthquake := false ;
46471: LD_ADDR_EXP 67
46475: PUSH
46476: LD_INT 0
46478: ST_TO_ADDR
// sAI := false ;
46479: LD_ADDR_EXP 68
46483: PUSH
46484: LD_INT 0
46486: ST_TO_ADDR
// sCargo := false ;
46487: LD_ADDR_EXP 71
46491: PUSH
46492: LD_INT 0
46494: ST_TO_ADDR
// sDLaser := false ;
46495: LD_ADDR_EXP 72
46499: PUSH
46500: LD_INT 0
46502: ST_TO_ADDR
// sExchange := false ;
46503: LD_ADDR_EXP 73
46507: PUSH
46508: LD_INT 0
46510: ST_TO_ADDR
// sFac := false ;
46511: LD_ADDR_EXP 74
46515: PUSH
46516: LD_INT 0
46518: ST_TO_ADDR
// sPower := false ;
46519: LD_ADDR_EXP 75
46523: PUSH
46524: LD_INT 0
46526: ST_TO_ADDR
// sRandom := false ;
46527: LD_ADDR_EXP 76
46531: PUSH
46532: LD_INT 0
46534: ST_TO_ADDR
// sShield := false ;
46535: LD_ADDR_EXP 77
46539: PUSH
46540: LD_INT 0
46542: ST_TO_ADDR
// sTime := false ;
46543: LD_ADDR_EXP 78
46547: PUSH
46548: LD_INT 0
46550: ST_TO_ADDR
// sTools := false ;
46551: LD_ADDR_EXP 79
46555: PUSH
46556: LD_INT 0
46558: ST_TO_ADDR
// sSold := false ;
46559: LD_ADDR_EXP 44
46563: PUSH
46564: LD_INT 0
46566: ST_TO_ADDR
// sDiff := false ;
46567: LD_ADDR_EXP 45
46571: PUSH
46572: LD_INT 0
46574: ST_TO_ADDR
// sFog := false ;
46575: LD_ADDR_EXP 48
46579: PUSH
46580: LD_INT 0
46582: ST_TO_ADDR
// sReset := false ;
46583: LD_ADDR_EXP 49
46587: PUSH
46588: LD_INT 0
46590: ST_TO_ADDR
// sSun := false ;
46591: LD_ADDR_EXP 50
46595: PUSH
46596: LD_INT 0
46598: ST_TO_ADDR
// sTiger := false ;
46599: LD_ADDR_EXP 46
46603: PUSH
46604: LD_INT 0
46606: ST_TO_ADDR
// sBomb := false ;
46607: LD_ADDR_EXP 47
46611: PUSH
46612: LD_INT 0
46614: ST_TO_ADDR
// sWound := false ;
46615: LD_ADDR_EXP 55
46619: PUSH
46620: LD_INT 0
46622: ST_TO_ADDR
// sBetray := false ;
46623: LD_ADDR_EXP 59
46627: PUSH
46628: LD_INT 0
46630: ST_TO_ADDR
// sContamin := false ;
46631: LD_ADDR_EXP 60
46635: PUSH
46636: LD_INT 0
46638: ST_TO_ADDR
// sOil := false ;
46639: LD_ADDR_EXP 62
46643: PUSH
46644: LD_INT 0
46646: ST_TO_ADDR
// sStu := false ;
46647: LD_ADDR_EXP 66
46651: PUSH
46652: LD_INT 0
46654: ST_TO_ADDR
// sBazooka := false ;
46655: LD_ADDR_EXP 69
46659: PUSH
46660: LD_INT 0
46662: ST_TO_ADDR
// sMortar := false ;
46663: LD_ADDR_EXP 70
46667: PUSH
46668: LD_INT 0
46670: ST_TO_ADDR
// sRanger := false ;
46671: LD_ADDR_EXP 80
46675: PUSH
46676: LD_INT 0
46678: ST_TO_ADDR
// sComputer := false ;
46679: LD_ADDR_EXP 81
46683: PUSH
46684: LD_INT 0
46686: ST_TO_ADDR
// s30 := false ;
46687: LD_ADDR_EXP 82
46691: PUSH
46692: LD_INT 0
46694: ST_TO_ADDR
// s60 := false ;
46695: LD_ADDR_EXP 83
46699: PUSH
46700: LD_INT 0
46702: ST_TO_ADDR
// end ;
46703: LD_VAR 0 1
46707: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
46708: LD_INT 0
46710: PPUSH
46711: PPUSH
46712: PPUSH
46713: PPUSH
46714: PPUSH
46715: PPUSH
46716: PPUSH
// result := [ ] ;
46717: LD_ADDR_VAR 0 2
46721: PUSH
46722: EMPTY
46723: ST_TO_ADDR
// if campaign_id = 1 then
46724: LD_OWVAR 69
46728: PUSH
46729: LD_INT 1
46731: EQUAL
46732: IFFALSE 49898
// begin case mission_number of 1 :
46734: LD_OWVAR 70
46738: PUSH
46739: LD_INT 1
46741: DOUBLE
46742: EQUAL
46743: IFTRUE 46747
46745: GO 46823
46747: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
46748: LD_ADDR_VAR 0 2
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: LD_INT 4
46758: PUSH
46759: LD_INT 11
46761: PUSH
46762: LD_INT 12
46764: PUSH
46765: LD_INT 15
46767: PUSH
46768: LD_INT 16
46770: PUSH
46771: LD_INT 22
46773: PUSH
46774: LD_INT 23
46776: PUSH
46777: LD_INT 26
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 101
46793: PUSH
46794: LD_INT 102
46796: PUSH
46797: LD_INT 106
46799: PUSH
46800: LD_INT 116
46802: PUSH
46803: LD_INT 117
46805: PUSH
46806: LD_INT 118
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: ST_TO_ADDR
46821: GO 49896
46823: LD_INT 2
46825: DOUBLE
46826: EQUAL
46827: IFTRUE 46831
46829: GO 46915
46831: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
46832: LD_ADDR_VAR 0 2
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: LD_INT 4
46842: PUSH
46843: LD_INT 11
46845: PUSH
46846: LD_INT 12
46848: PUSH
46849: LD_INT 15
46851: PUSH
46852: LD_INT 16
46854: PUSH
46855: LD_INT 22
46857: PUSH
46858: LD_INT 23
46860: PUSH
46861: LD_INT 26
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 101
46877: PUSH
46878: LD_INT 102
46880: PUSH
46881: LD_INT 105
46883: PUSH
46884: LD_INT 106
46886: PUSH
46887: LD_INT 108
46889: PUSH
46890: LD_INT 116
46892: PUSH
46893: LD_INT 117
46895: PUSH
46896: LD_INT 118
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: ST_TO_ADDR
46913: GO 49896
46915: LD_INT 3
46917: DOUBLE
46918: EQUAL
46919: IFTRUE 46923
46921: GO 47011
46923: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
46924: LD_ADDR_VAR 0 2
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: LD_INT 4
46934: PUSH
46935: LD_INT 5
46937: PUSH
46938: LD_INT 11
46940: PUSH
46941: LD_INT 12
46943: PUSH
46944: LD_INT 15
46946: PUSH
46947: LD_INT 16
46949: PUSH
46950: LD_INT 22
46952: PUSH
46953: LD_INT 26
46955: PUSH
46956: LD_INT 36
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 101
46973: PUSH
46974: LD_INT 102
46976: PUSH
46977: LD_INT 105
46979: PUSH
46980: LD_INT 106
46982: PUSH
46983: LD_INT 108
46985: PUSH
46986: LD_INT 116
46988: PUSH
46989: LD_INT 117
46991: PUSH
46992: LD_INT 118
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: ST_TO_ADDR
47009: GO 49896
47011: LD_INT 4
47013: DOUBLE
47014: EQUAL
47015: IFTRUE 47019
47017: GO 47115
47019: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
47020: LD_ADDR_VAR 0 2
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 4
47030: PUSH
47031: LD_INT 5
47033: PUSH
47034: LD_INT 8
47036: PUSH
47037: LD_INT 11
47039: PUSH
47040: LD_INT 12
47042: PUSH
47043: LD_INT 15
47045: PUSH
47046: LD_INT 16
47048: PUSH
47049: LD_INT 22
47051: PUSH
47052: LD_INT 23
47054: PUSH
47055: LD_INT 26
47057: PUSH
47058: LD_INT 36
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 101
47077: PUSH
47078: LD_INT 102
47080: PUSH
47081: LD_INT 105
47083: PUSH
47084: LD_INT 106
47086: PUSH
47087: LD_INT 108
47089: PUSH
47090: LD_INT 116
47092: PUSH
47093: LD_INT 117
47095: PUSH
47096: LD_INT 118
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: ST_TO_ADDR
47113: GO 49896
47115: LD_INT 5
47117: DOUBLE
47118: EQUAL
47119: IFTRUE 47123
47121: GO 47235
47123: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
47124: LD_ADDR_VAR 0 2
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: LD_INT 4
47134: PUSH
47135: LD_INT 5
47137: PUSH
47138: LD_INT 6
47140: PUSH
47141: LD_INT 8
47143: PUSH
47144: LD_INT 11
47146: PUSH
47147: LD_INT 12
47149: PUSH
47150: LD_INT 15
47152: PUSH
47153: LD_INT 16
47155: PUSH
47156: LD_INT 22
47158: PUSH
47159: LD_INT 23
47161: PUSH
47162: LD_INT 25
47164: PUSH
47165: LD_INT 26
47167: PUSH
47168: LD_INT 36
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 101
47189: PUSH
47190: LD_INT 102
47192: PUSH
47193: LD_INT 105
47195: PUSH
47196: LD_INT 106
47198: PUSH
47199: LD_INT 108
47201: PUSH
47202: LD_INT 109
47204: PUSH
47205: LD_INT 112
47207: PUSH
47208: LD_INT 116
47210: PUSH
47211: LD_INT 117
47213: PUSH
47214: LD_INT 118
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: ST_TO_ADDR
47233: GO 49896
47235: LD_INT 6
47237: DOUBLE
47238: EQUAL
47239: IFTRUE 47243
47241: GO 47375
47243: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
47244: LD_ADDR_VAR 0 2
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: LD_INT 4
47254: PUSH
47255: LD_INT 5
47257: PUSH
47258: LD_INT 6
47260: PUSH
47261: LD_INT 8
47263: PUSH
47264: LD_INT 11
47266: PUSH
47267: LD_INT 12
47269: PUSH
47270: LD_INT 15
47272: PUSH
47273: LD_INT 16
47275: PUSH
47276: LD_INT 20
47278: PUSH
47279: LD_INT 21
47281: PUSH
47282: LD_INT 22
47284: PUSH
47285: LD_INT 23
47287: PUSH
47288: LD_INT 25
47290: PUSH
47291: LD_INT 26
47293: PUSH
47294: LD_INT 30
47296: PUSH
47297: LD_INT 31
47299: PUSH
47300: LD_INT 32
47302: PUSH
47303: LD_INT 36
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 101
47329: PUSH
47330: LD_INT 102
47332: PUSH
47333: LD_INT 105
47335: PUSH
47336: LD_INT 106
47338: PUSH
47339: LD_INT 108
47341: PUSH
47342: LD_INT 109
47344: PUSH
47345: LD_INT 112
47347: PUSH
47348: LD_INT 116
47350: PUSH
47351: LD_INT 117
47353: PUSH
47354: LD_INT 118
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: ST_TO_ADDR
47373: GO 49896
47375: LD_INT 7
47377: DOUBLE
47378: EQUAL
47379: IFTRUE 47383
47381: GO 47495
47383: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
47384: LD_ADDR_VAR 0 2
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: LD_INT 4
47394: PUSH
47395: LD_INT 5
47397: PUSH
47398: LD_INT 7
47400: PUSH
47401: LD_INT 11
47403: PUSH
47404: LD_INT 12
47406: PUSH
47407: LD_INT 15
47409: PUSH
47410: LD_INT 16
47412: PUSH
47413: LD_INT 20
47415: PUSH
47416: LD_INT 21
47418: PUSH
47419: LD_INT 22
47421: PUSH
47422: LD_INT 23
47424: PUSH
47425: LD_INT 25
47427: PUSH
47428: LD_INT 26
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 101
47449: PUSH
47450: LD_INT 102
47452: PUSH
47453: LD_INT 103
47455: PUSH
47456: LD_INT 105
47458: PUSH
47459: LD_INT 106
47461: PUSH
47462: LD_INT 108
47464: PUSH
47465: LD_INT 112
47467: PUSH
47468: LD_INT 116
47470: PUSH
47471: LD_INT 117
47473: PUSH
47474: LD_INT 118
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: ST_TO_ADDR
47493: GO 49896
47495: LD_INT 8
47497: DOUBLE
47498: EQUAL
47499: IFTRUE 47503
47501: GO 47643
47503: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
47504: LD_ADDR_VAR 0 2
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 4
47514: PUSH
47515: LD_INT 5
47517: PUSH
47518: LD_INT 6
47520: PUSH
47521: LD_INT 7
47523: PUSH
47524: LD_INT 8
47526: PUSH
47527: LD_INT 11
47529: PUSH
47530: LD_INT 12
47532: PUSH
47533: LD_INT 15
47535: PUSH
47536: LD_INT 16
47538: PUSH
47539: LD_INT 20
47541: PUSH
47542: LD_INT 21
47544: PUSH
47545: LD_INT 22
47547: PUSH
47548: LD_INT 23
47550: PUSH
47551: LD_INT 25
47553: PUSH
47554: LD_INT 26
47556: PUSH
47557: LD_INT 30
47559: PUSH
47560: LD_INT 31
47562: PUSH
47563: LD_INT 32
47565: PUSH
47566: LD_INT 36
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 101
47593: PUSH
47594: LD_INT 102
47596: PUSH
47597: LD_INT 103
47599: PUSH
47600: LD_INT 105
47602: PUSH
47603: LD_INT 106
47605: PUSH
47606: LD_INT 108
47608: PUSH
47609: LD_INT 109
47611: PUSH
47612: LD_INT 112
47614: PUSH
47615: LD_INT 116
47617: PUSH
47618: LD_INT 117
47620: PUSH
47621: LD_INT 118
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: ST_TO_ADDR
47641: GO 49896
47643: LD_INT 9
47645: DOUBLE
47646: EQUAL
47647: IFTRUE 47651
47649: GO 47799
47651: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
47652: LD_ADDR_VAR 0 2
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: LD_INT 4
47662: PUSH
47663: LD_INT 5
47665: PUSH
47666: LD_INT 6
47668: PUSH
47669: LD_INT 7
47671: PUSH
47672: LD_INT 8
47674: PUSH
47675: LD_INT 11
47677: PUSH
47678: LD_INT 12
47680: PUSH
47681: LD_INT 15
47683: PUSH
47684: LD_INT 16
47686: PUSH
47687: LD_INT 20
47689: PUSH
47690: LD_INT 21
47692: PUSH
47693: LD_INT 22
47695: PUSH
47696: LD_INT 23
47698: PUSH
47699: LD_INT 25
47701: PUSH
47702: LD_INT 26
47704: PUSH
47705: LD_INT 28
47707: PUSH
47708: LD_INT 30
47710: PUSH
47711: LD_INT 31
47713: PUSH
47714: LD_INT 32
47716: PUSH
47717: LD_INT 36
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 101
47745: PUSH
47746: LD_INT 102
47748: PUSH
47749: LD_INT 103
47751: PUSH
47752: LD_INT 105
47754: PUSH
47755: LD_INT 106
47757: PUSH
47758: LD_INT 108
47760: PUSH
47761: LD_INT 109
47763: PUSH
47764: LD_INT 112
47766: PUSH
47767: LD_INT 114
47769: PUSH
47770: LD_INT 116
47772: PUSH
47773: LD_INT 117
47775: PUSH
47776: LD_INT 118
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: ST_TO_ADDR
47797: GO 49896
47799: LD_INT 10
47801: DOUBLE
47802: EQUAL
47803: IFTRUE 47807
47805: GO 48003
47807: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
47808: LD_ADDR_VAR 0 2
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 4
47818: PUSH
47819: LD_INT 5
47821: PUSH
47822: LD_INT 6
47824: PUSH
47825: LD_INT 7
47827: PUSH
47828: LD_INT 8
47830: PUSH
47831: LD_INT 9
47833: PUSH
47834: LD_INT 10
47836: PUSH
47837: LD_INT 11
47839: PUSH
47840: LD_INT 12
47842: PUSH
47843: LD_INT 13
47845: PUSH
47846: LD_INT 14
47848: PUSH
47849: LD_INT 15
47851: PUSH
47852: LD_INT 16
47854: PUSH
47855: LD_INT 17
47857: PUSH
47858: LD_INT 18
47860: PUSH
47861: LD_INT 19
47863: PUSH
47864: LD_INT 20
47866: PUSH
47867: LD_INT 21
47869: PUSH
47870: LD_INT 22
47872: PUSH
47873: LD_INT 23
47875: PUSH
47876: LD_INT 24
47878: PUSH
47879: LD_INT 25
47881: PUSH
47882: LD_INT 26
47884: PUSH
47885: LD_INT 28
47887: PUSH
47888: LD_INT 30
47890: PUSH
47891: LD_INT 31
47893: PUSH
47894: LD_INT 32
47896: PUSH
47897: LD_INT 36
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 101
47933: PUSH
47934: LD_INT 102
47936: PUSH
47937: LD_INT 103
47939: PUSH
47940: LD_INT 104
47942: PUSH
47943: LD_INT 105
47945: PUSH
47946: LD_INT 106
47948: PUSH
47949: LD_INT 107
47951: PUSH
47952: LD_INT 108
47954: PUSH
47955: LD_INT 109
47957: PUSH
47958: LD_INT 110
47960: PUSH
47961: LD_INT 111
47963: PUSH
47964: LD_INT 112
47966: PUSH
47967: LD_INT 114
47969: PUSH
47970: LD_INT 116
47972: PUSH
47973: LD_INT 117
47975: PUSH
47976: LD_INT 118
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: ST_TO_ADDR
48001: GO 49896
48003: LD_INT 11
48005: DOUBLE
48006: EQUAL
48007: IFTRUE 48011
48009: GO 48215
48011: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
48012: LD_ADDR_VAR 0 2
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: LD_INT 3
48022: PUSH
48023: LD_INT 4
48025: PUSH
48026: LD_INT 5
48028: PUSH
48029: LD_INT 6
48031: PUSH
48032: LD_INT 7
48034: PUSH
48035: LD_INT 8
48037: PUSH
48038: LD_INT 9
48040: PUSH
48041: LD_INT 10
48043: PUSH
48044: LD_INT 11
48046: PUSH
48047: LD_INT 12
48049: PUSH
48050: LD_INT 13
48052: PUSH
48053: LD_INT 14
48055: PUSH
48056: LD_INT 15
48058: PUSH
48059: LD_INT 16
48061: PUSH
48062: LD_INT 17
48064: PUSH
48065: LD_INT 18
48067: PUSH
48068: LD_INT 19
48070: PUSH
48071: LD_INT 20
48073: PUSH
48074: LD_INT 21
48076: PUSH
48077: LD_INT 22
48079: PUSH
48080: LD_INT 23
48082: PUSH
48083: LD_INT 24
48085: PUSH
48086: LD_INT 25
48088: PUSH
48089: LD_INT 26
48091: PUSH
48092: LD_INT 28
48094: PUSH
48095: LD_INT 30
48097: PUSH
48098: LD_INT 31
48100: PUSH
48101: LD_INT 32
48103: PUSH
48104: LD_INT 34
48106: PUSH
48107: LD_INT 36
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 101
48145: PUSH
48146: LD_INT 102
48148: PUSH
48149: LD_INT 103
48151: PUSH
48152: LD_INT 104
48154: PUSH
48155: LD_INT 105
48157: PUSH
48158: LD_INT 106
48160: PUSH
48161: LD_INT 107
48163: PUSH
48164: LD_INT 108
48166: PUSH
48167: LD_INT 109
48169: PUSH
48170: LD_INT 110
48172: PUSH
48173: LD_INT 111
48175: PUSH
48176: LD_INT 112
48178: PUSH
48179: LD_INT 114
48181: PUSH
48182: LD_INT 116
48184: PUSH
48185: LD_INT 117
48187: PUSH
48188: LD_INT 118
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: ST_TO_ADDR
48213: GO 49896
48215: LD_INT 12
48217: DOUBLE
48218: EQUAL
48219: IFTRUE 48223
48221: GO 48443
48223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
48224: LD_ADDR_VAR 0 2
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: LD_INT 4
48240: PUSH
48241: LD_INT 5
48243: PUSH
48244: LD_INT 6
48246: PUSH
48247: LD_INT 7
48249: PUSH
48250: LD_INT 8
48252: PUSH
48253: LD_INT 9
48255: PUSH
48256: LD_INT 10
48258: PUSH
48259: LD_INT 11
48261: PUSH
48262: LD_INT 12
48264: PUSH
48265: LD_INT 13
48267: PUSH
48268: LD_INT 14
48270: PUSH
48271: LD_INT 15
48273: PUSH
48274: LD_INT 16
48276: PUSH
48277: LD_INT 17
48279: PUSH
48280: LD_INT 18
48282: PUSH
48283: LD_INT 19
48285: PUSH
48286: LD_INT 20
48288: PUSH
48289: LD_INT 21
48291: PUSH
48292: LD_INT 22
48294: PUSH
48295: LD_INT 23
48297: PUSH
48298: LD_INT 24
48300: PUSH
48301: LD_INT 25
48303: PUSH
48304: LD_INT 26
48306: PUSH
48307: LD_INT 27
48309: PUSH
48310: LD_INT 28
48312: PUSH
48313: LD_INT 30
48315: PUSH
48316: LD_INT 31
48318: PUSH
48319: LD_INT 32
48321: PUSH
48322: LD_INT 33
48324: PUSH
48325: LD_INT 34
48327: PUSH
48328: LD_INT 36
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 101
48369: PUSH
48370: LD_INT 102
48372: PUSH
48373: LD_INT 103
48375: PUSH
48376: LD_INT 104
48378: PUSH
48379: LD_INT 105
48381: PUSH
48382: LD_INT 106
48384: PUSH
48385: LD_INT 107
48387: PUSH
48388: LD_INT 108
48390: PUSH
48391: LD_INT 109
48393: PUSH
48394: LD_INT 110
48396: PUSH
48397: LD_INT 111
48399: PUSH
48400: LD_INT 112
48402: PUSH
48403: LD_INT 113
48405: PUSH
48406: LD_INT 114
48408: PUSH
48409: LD_INT 116
48411: PUSH
48412: LD_INT 117
48414: PUSH
48415: LD_INT 118
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: ST_TO_ADDR
48441: GO 49896
48443: LD_INT 13
48445: DOUBLE
48446: EQUAL
48447: IFTRUE 48451
48449: GO 48659
48451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
48452: LD_ADDR_VAR 0 2
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: LD_INT 3
48465: PUSH
48466: LD_INT 4
48468: PUSH
48469: LD_INT 5
48471: PUSH
48472: LD_INT 8
48474: PUSH
48475: LD_INT 9
48477: PUSH
48478: LD_INT 10
48480: PUSH
48481: LD_INT 11
48483: PUSH
48484: LD_INT 12
48486: PUSH
48487: LD_INT 14
48489: PUSH
48490: LD_INT 15
48492: PUSH
48493: LD_INT 16
48495: PUSH
48496: LD_INT 17
48498: PUSH
48499: LD_INT 18
48501: PUSH
48502: LD_INT 19
48504: PUSH
48505: LD_INT 20
48507: PUSH
48508: LD_INT 21
48510: PUSH
48511: LD_INT 22
48513: PUSH
48514: LD_INT 23
48516: PUSH
48517: LD_INT 24
48519: PUSH
48520: LD_INT 25
48522: PUSH
48523: LD_INT 26
48525: PUSH
48526: LD_INT 27
48528: PUSH
48529: LD_INT 28
48531: PUSH
48532: LD_INT 30
48534: PUSH
48535: LD_INT 31
48537: PUSH
48538: LD_INT 32
48540: PUSH
48541: LD_INT 33
48543: PUSH
48544: LD_INT 34
48546: PUSH
48547: LD_INT 36
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 101
48585: PUSH
48586: LD_INT 102
48588: PUSH
48589: LD_INT 103
48591: PUSH
48592: LD_INT 104
48594: PUSH
48595: LD_INT 105
48597: PUSH
48598: LD_INT 106
48600: PUSH
48601: LD_INT 107
48603: PUSH
48604: LD_INT 108
48606: PUSH
48607: LD_INT 109
48609: PUSH
48610: LD_INT 110
48612: PUSH
48613: LD_INT 111
48615: PUSH
48616: LD_INT 112
48618: PUSH
48619: LD_INT 113
48621: PUSH
48622: LD_INT 114
48624: PUSH
48625: LD_INT 116
48627: PUSH
48628: LD_INT 117
48630: PUSH
48631: LD_INT 118
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: ST_TO_ADDR
48657: GO 49896
48659: LD_INT 14
48661: DOUBLE
48662: EQUAL
48663: IFTRUE 48667
48665: GO 48891
48667: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
48668: LD_ADDR_VAR 0 2
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: LD_INT 3
48681: PUSH
48682: LD_INT 4
48684: PUSH
48685: LD_INT 5
48687: PUSH
48688: LD_INT 6
48690: PUSH
48691: LD_INT 7
48693: PUSH
48694: LD_INT 8
48696: PUSH
48697: LD_INT 9
48699: PUSH
48700: LD_INT 10
48702: PUSH
48703: LD_INT 11
48705: PUSH
48706: LD_INT 12
48708: PUSH
48709: LD_INT 13
48711: PUSH
48712: LD_INT 14
48714: PUSH
48715: LD_INT 15
48717: PUSH
48718: LD_INT 16
48720: PUSH
48721: LD_INT 17
48723: PUSH
48724: LD_INT 18
48726: PUSH
48727: LD_INT 19
48729: PUSH
48730: LD_INT 20
48732: PUSH
48733: LD_INT 21
48735: PUSH
48736: LD_INT 22
48738: PUSH
48739: LD_INT 23
48741: PUSH
48742: LD_INT 24
48744: PUSH
48745: LD_INT 25
48747: PUSH
48748: LD_INT 26
48750: PUSH
48751: LD_INT 27
48753: PUSH
48754: LD_INT 28
48756: PUSH
48757: LD_INT 29
48759: PUSH
48760: LD_INT 30
48762: PUSH
48763: LD_INT 31
48765: PUSH
48766: LD_INT 32
48768: PUSH
48769: LD_INT 33
48771: PUSH
48772: LD_INT 34
48774: PUSH
48775: LD_INT 36
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 101
48817: PUSH
48818: LD_INT 102
48820: PUSH
48821: LD_INT 103
48823: PUSH
48824: LD_INT 104
48826: PUSH
48827: LD_INT 105
48829: PUSH
48830: LD_INT 106
48832: PUSH
48833: LD_INT 107
48835: PUSH
48836: LD_INT 108
48838: PUSH
48839: LD_INT 109
48841: PUSH
48842: LD_INT 110
48844: PUSH
48845: LD_INT 111
48847: PUSH
48848: LD_INT 112
48850: PUSH
48851: LD_INT 113
48853: PUSH
48854: LD_INT 114
48856: PUSH
48857: LD_INT 116
48859: PUSH
48860: LD_INT 117
48862: PUSH
48863: LD_INT 118
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: ST_TO_ADDR
48889: GO 49896
48891: LD_INT 15
48893: DOUBLE
48894: EQUAL
48895: IFTRUE 48899
48897: GO 49123
48899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
48900: LD_ADDR_VAR 0 2
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: LD_INT 4
48916: PUSH
48917: LD_INT 5
48919: PUSH
48920: LD_INT 6
48922: PUSH
48923: LD_INT 7
48925: PUSH
48926: LD_INT 8
48928: PUSH
48929: LD_INT 9
48931: PUSH
48932: LD_INT 10
48934: PUSH
48935: LD_INT 11
48937: PUSH
48938: LD_INT 12
48940: PUSH
48941: LD_INT 13
48943: PUSH
48944: LD_INT 14
48946: PUSH
48947: LD_INT 15
48949: PUSH
48950: LD_INT 16
48952: PUSH
48953: LD_INT 17
48955: PUSH
48956: LD_INT 18
48958: PUSH
48959: LD_INT 19
48961: PUSH
48962: LD_INT 20
48964: PUSH
48965: LD_INT 21
48967: PUSH
48968: LD_INT 22
48970: PUSH
48971: LD_INT 23
48973: PUSH
48974: LD_INT 24
48976: PUSH
48977: LD_INT 25
48979: PUSH
48980: LD_INT 26
48982: PUSH
48983: LD_INT 27
48985: PUSH
48986: LD_INT 28
48988: PUSH
48989: LD_INT 29
48991: PUSH
48992: LD_INT 30
48994: PUSH
48995: LD_INT 31
48997: PUSH
48998: LD_INT 32
49000: PUSH
49001: LD_INT 33
49003: PUSH
49004: LD_INT 34
49006: PUSH
49007: LD_INT 36
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 101
49049: PUSH
49050: LD_INT 102
49052: PUSH
49053: LD_INT 103
49055: PUSH
49056: LD_INT 104
49058: PUSH
49059: LD_INT 105
49061: PUSH
49062: LD_INT 106
49064: PUSH
49065: LD_INT 107
49067: PUSH
49068: LD_INT 108
49070: PUSH
49071: LD_INT 109
49073: PUSH
49074: LD_INT 110
49076: PUSH
49077: LD_INT 111
49079: PUSH
49080: LD_INT 112
49082: PUSH
49083: LD_INT 113
49085: PUSH
49086: LD_INT 114
49088: PUSH
49089: LD_INT 116
49091: PUSH
49092: LD_INT 117
49094: PUSH
49095: LD_INT 118
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: ST_TO_ADDR
49121: GO 49896
49123: LD_INT 16
49125: DOUBLE
49126: EQUAL
49127: IFTRUE 49131
49129: GO 49267
49131: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
49132: LD_ADDR_VAR 0 2
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: LD_INT 4
49142: PUSH
49143: LD_INT 5
49145: PUSH
49146: LD_INT 7
49148: PUSH
49149: LD_INT 11
49151: PUSH
49152: LD_INT 12
49154: PUSH
49155: LD_INT 15
49157: PUSH
49158: LD_INT 16
49160: PUSH
49161: LD_INT 20
49163: PUSH
49164: LD_INT 21
49166: PUSH
49167: LD_INT 22
49169: PUSH
49170: LD_INT 23
49172: PUSH
49173: LD_INT 25
49175: PUSH
49176: LD_INT 26
49178: PUSH
49179: LD_INT 30
49181: PUSH
49182: LD_INT 31
49184: PUSH
49185: LD_INT 32
49187: PUSH
49188: LD_INT 33
49190: PUSH
49191: LD_INT 34
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 101
49217: PUSH
49218: LD_INT 102
49220: PUSH
49221: LD_INT 103
49223: PUSH
49224: LD_INT 106
49226: PUSH
49227: LD_INT 108
49229: PUSH
49230: LD_INT 112
49232: PUSH
49233: LD_INT 113
49235: PUSH
49236: LD_INT 114
49238: PUSH
49239: LD_INT 116
49241: PUSH
49242: LD_INT 117
49244: PUSH
49245: LD_INT 118
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: ST_TO_ADDR
49265: GO 49896
49267: LD_INT 17
49269: DOUBLE
49270: EQUAL
49271: IFTRUE 49275
49273: GO 49499
49275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
49276: LD_ADDR_VAR 0 2
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: LD_INT 4
49292: PUSH
49293: LD_INT 5
49295: PUSH
49296: LD_INT 6
49298: PUSH
49299: LD_INT 7
49301: PUSH
49302: LD_INT 8
49304: PUSH
49305: LD_INT 9
49307: PUSH
49308: LD_INT 10
49310: PUSH
49311: LD_INT 11
49313: PUSH
49314: LD_INT 12
49316: PUSH
49317: LD_INT 13
49319: PUSH
49320: LD_INT 14
49322: PUSH
49323: LD_INT 15
49325: PUSH
49326: LD_INT 16
49328: PUSH
49329: LD_INT 17
49331: PUSH
49332: LD_INT 18
49334: PUSH
49335: LD_INT 19
49337: PUSH
49338: LD_INT 20
49340: PUSH
49341: LD_INT 21
49343: PUSH
49344: LD_INT 22
49346: PUSH
49347: LD_INT 23
49349: PUSH
49350: LD_INT 24
49352: PUSH
49353: LD_INT 25
49355: PUSH
49356: LD_INT 26
49358: PUSH
49359: LD_INT 27
49361: PUSH
49362: LD_INT 28
49364: PUSH
49365: LD_INT 29
49367: PUSH
49368: LD_INT 30
49370: PUSH
49371: LD_INT 31
49373: PUSH
49374: LD_INT 32
49376: PUSH
49377: LD_INT 33
49379: PUSH
49380: LD_INT 34
49382: PUSH
49383: LD_INT 36
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 101
49425: PUSH
49426: LD_INT 102
49428: PUSH
49429: LD_INT 103
49431: PUSH
49432: LD_INT 104
49434: PUSH
49435: LD_INT 105
49437: PUSH
49438: LD_INT 106
49440: PUSH
49441: LD_INT 107
49443: PUSH
49444: LD_INT 108
49446: PUSH
49447: LD_INT 109
49449: PUSH
49450: LD_INT 110
49452: PUSH
49453: LD_INT 111
49455: PUSH
49456: LD_INT 112
49458: PUSH
49459: LD_INT 113
49461: PUSH
49462: LD_INT 114
49464: PUSH
49465: LD_INT 116
49467: PUSH
49468: LD_INT 117
49470: PUSH
49471: LD_INT 118
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: ST_TO_ADDR
49497: GO 49896
49499: LD_INT 18
49501: DOUBLE
49502: EQUAL
49503: IFTRUE 49507
49505: GO 49655
49507: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
49508: LD_ADDR_VAR 0 2
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: LD_INT 4
49518: PUSH
49519: LD_INT 5
49521: PUSH
49522: LD_INT 7
49524: PUSH
49525: LD_INT 11
49527: PUSH
49528: LD_INT 12
49530: PUSH
49531: LD_INT 15
49533: PUSH
49534: LD_INT 16
49536: PUSH
49537: LD_INT 20
49539: PUSH
49540: LD_INT 21
49542: PUSH
49543: LD_INT 22
49545: PUSH
49546: LD_INT 23
49548: PUSH
49549: LD_INT 25
49551: PUSH
49552: LD_INT 26
49554: PUSH
49555: LD_INT 30
49557: PUSH
49558: LD_INT 31
49560: PUSH
49561: LD_INT 32
49563: PUSH
49564: LD_INT 33
49566: PUSH
49567: LD_INT 34
49569: PUSH
49570: LD_INT 35
49572: PUSH
49573: LD_INT 36
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 101
49601: PUSH
49602: LD_INT 102
49604: PUSH
49605: LD_INT 103
49607: PUSH
49608: LD_INT 106
49610: PUSH
49611: LD_INT 108
49613: PUSH
49614: LD_INT 112
49616: PUSH
49617: LD_INT 113
49619: PUSH
49620: LD_INT 114
49622: PUSH
49623: LD_INT 115
49625: PUSH
49626: LD_INT 116
49628: PUSH
49629: LD_INT 117
49631: PUSH
49632: LD_INT 118
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: ST_TO_ADDR
49653: GO 49896
49655: LD_INT 19
49657: DOUBLE
49658: EQUAL
49659: IFTRUE 49663
49661: GO 49895
49663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
49664: LD_ADDR_VAR 0 2
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 3
49677: PUSH
49678: LD_INT 4
49680: PUSH
49681: LD_INT 5
49683: PUSH
49684: LD_INT 6
49686: PUSH
49687: LD_INT 7
49689: PUSH
49690: LD_INT 8
49692: PUSH
49693: LD_INT 9
49695: PUSH
49696: LD_INT 10
49698: PUSH
49699: LD_INT 11
49701: PUSH
49702: LD_INT 12
49704: PUSH
49705: LD_INT 13
49707: PUSH
49708: LD_INT 14
49710: PUSH
49711: LD_INT 15
49713: PUSH
49714: LD_INT 16
49716: PUSH
49717: LD_INT 17
49719: PUSH
49720: LD_INT 18
49722: PUSH
49723: LD_INT 19
49725: PUSH
49726: LD_INT 20
49728: PUSH
49729: LD_INT 21
49731: PUSH
49732: LD_INT 22
49734: PUSH
49735: LD_INT 23
49737: PUSH
49738: LD_INT 24
49740: PUSH
49741: LD_INT 25
49743: PUSH
49744: LD_INT 26
49746: PUSH
49747: LD_INT 27
49749: PUSH
49750: LD_INT 28
49752: PUSH
49753: LD_INT 29
49755: PUSH
49756: LD_INT 30
49758: PUSH
49759: LD_INT 31
49761: PUSH
49762: LD_INT 32
49764: PUSH
49765: LD_INT 33
49767: PUSH
49768: LD_INT 34
49770: PUSH
49771: LD_INT 35
49773: PUSH
49774: LD_INT 36
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 101
49817: PUSH
49818: LD_INT 102
49820: PUSH
49821: LD_INT 103
49823: PUSH
49824: LD_INT 104
49826: PUSH
49827: LD_INT 105
49829: PUSH
49830: LD_INT 106
49832: PUSH
49833: LD_INT 107
49835: PUSH
49836: LD_INT 108
49838: PUSH
49839: LD_INT 109
49841: PUSH
49842: LD_INT 110
49844: PUSH
49845: LD_INT 111
49847: PUSH
49848: LD_INT 112
49850: PUSH
49851: LD_INT 113
49853: PUSH
49854: LD_INT 114
49856: PUSH
49857: LD_INT 115
49859: PUSH
49860: LD_INT 116
49862: PUSH
49863: LD_INT 117
49865: PUSH
49866: LD_INT 118
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: ST_TO_ADDR
49893: GO 49896
49895: POP
// end else
49896: GO 50127
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
49898: LD_ADDR_VAR 0 2
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 3
49911: PUSH
49912: LD_INT 4
49914: PUSH
49915: LD_INT 5
49917: PUSH
49918: LD_INT 6
49920: PUSH
49921: LD_INT 7
49923: PUSH
49924: LD_INT 8
49926: PUSH
49927: LD_INT 9
49929: PUSH
49930: LD_INT 10
49932: PUSH
49933: LD_INT 11
49935: PUSH
49936: LD_INT 12
49938: PUSH
49939: LD_INT 13
49941: PUSH
49942: LD_INT 14
49944: PUSH
49945: LD_INT 15
49947: PUSH
49948: LD_INT 16
49950: PUSH
49951: LD_INT 17
49953: PUSH
49954: LD_INT 18
49956: PUSH
49957: LD_INT 19
49959: PUSH
49960: LD_INT 20
49962: PUSH
49963: LD_INT 21
49965: PUSH
49966: LD_INT 22
49968: PUSH
49969: LD_INT 23
49971: PUSH
49972: LD_INT 24
49974: PUSH
49975: LD_INT 25
49977: PUSH
49978: LD_INT 26
49980: PUSH
49981: LD_INT 27
49983: PUSH
49984: LD_INT 28
49986: PUSH
49987: LD_INT 29
49989: PUSH
49990: LD_INT 30
49992: PUSH
49993: LD_INT 31
49995: PUSH
49996: LD_INT 32
49998: PUSH
49999: LD_INT 33
50001: PUSH
50002: LD_INT 34
50004: PUSH
50005: LD_INT 35
50007: PUSH
50008: LD_INT 36
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 101
50051: PUSH
50052: LD_INT 102
50054: PUSH
50055: LD_INT 103
50057: PUSH
50058: LD_INT 104
50060: PUSH
50061: LD_INT 105
50063: PUSH
50064: LD_INT 106
50066: PUSH
50067: LD_INT 107
50069: PUSH
50070: LD_INT 108
50072: PUSH
50073: LD_INT 109
50075: PUSH
50076: LD_INT 110
50078: PUSH
50079: LD_INT 111
50081: PUSH
50082: LD_INT 112
50084: PUSH
50085: LD_INT 113
50087: PUSH
50088: LD_INT 114
50090: PUSH
50091: LD_INT 115
50093: PUSH
50094: LD_INT 116
50096: PUSH
50097: LD_INT 117
50099: PUSH
50100: LD_INT 118
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: ST_TO_ADDR
// if result then
50127: LD_VAR 0 2
50131: IFFALSE 50917
// begin normal :=  ;
50133: LD_ADDR_VAR 0 5
50137: PUSH
50138: LD_STRING 
50140: ST_TO_ADDR
// hardcore :=  ;
50141: LD_ADDR_VAR 0 6
50145: PUSH
50146: LD_STRING 
50148: ST_TO_ADDR
// active :=  ;
50149: LD_ADDR_VAR 0 7
50153: PUSH
50154: LD_STRING 
50156: ST_TO_ADDR
// for i = 1 to normalCounter do
50157: LD_ADDR_VAR 0 8
50161: PUSH
50162: DOUBLE
50163: LD_INT 1
50165: DEC
50166: ST_TO_ADDR
50167: LD_EXP 28
50171: PUSH
50172: FOR_TO
50173: IFFALSE 50274
// begin tmp := 0 ;
50175: LD_ADDR_VAR 0 3
50179: PUSH
50180: LD_STRING 0
50182: ST_TO_ADDR
// if result [ 1 ] then
50183: LD_VAR 0 2
50187: PUSH
50188: LD_INT 1
50190: ARRAY
50191: IFFALSE 50256
// if result [ 1 ] [ 1 ] = i then
50193: LD_VAR 0 2
50197: PUSH
50198: LD_INT 1
50200: ARRAY
50201: PUSH
50202: LD_INT 1
50204: ARRAY
50205: PUSH
50206: LD_VAR 0 8
50210: EQUAL
50211: IFFALSE 50256
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50213: LD_ADDR_VAR 0 2
50217: PUSH
50218: LD_VAR 0 2
50222: PPUSH
50223: LD_INT 1
50225: PPUSH
50226: LD_VAR 0 2
50230: PUSH
50231: LD_INT 1
50233: ARRAY
50234: PPUSH
50235: LD_INT 1
50237: PPUSH
50238: CALL_OW 3
50242: PPUSH
50243: CALL_OW 1
50247: ST_TO_ADDR
// tmp := 1 ;
50248: LD_ADDR_VAR 0 3
50252: PUSH
50253: LD_STRING 1
50255: ST_TO_ADDR
// end ; normal := normal & tmp ;
50256: LD_ADDR_VAR 0 5
50260: PUSH
50261: LD_VAR 0 5
50265: PUSH
50266: LD_VAR 0 3
50270: STR
50271: ST_TO_ADDR
// end ;
50272: GO 50172
50274: POP
50275: POP
// for i = 1 to hardcoreCounter do
50276: LD_ADDR_VAR 0 8
50280: PUSH
50281: DOUBLE
50282: LD_INT 1
50284: DEC
50285: ST_TO_ADDR
50286: LD_EXP 29
50290: PUSH
50291: FOR_TO
50292: IFFALSE 50397
// begin tmp := 0 ;
50294: LD_ADDR_VAR 0 3
50298: PUSH
50299: LD_STRING 0
50301: ST_TO_ADDR
// if result [ 2 ] then
50302: LD_VAR 0 2
50306: PUSH
50307: LD_INT 2
50309: ARRAY
50310: IFFALSE 50379
// if result [ 2 ] [ 1 ] = 100 + i then
50312: LD_VAR 0 2
50316: PUSH
50317: LD_INT 2
50319: ARRAY
50320: PUSH
50321: LD_INT 1
50323: ARRAY
50324: PUSH
50325: LD_INT 100
50327: PUSH
50328: LD_VAR 0 8
50332: PLUS
50333: EQUAL
50334: IFFALSE 50379
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50336: LD_ADDR_VAR 0 2
50340: PUSH
50341: LD_VAR 0 2
50345: PPUSH
50346: LD_INT 2
50348: PPUSH
50349: LD_VAR 0 2
50353: PUSH
50354: LD_INT 2
50356: ARRAY
50357: PPUSH
50358: LD_INT 1
50360: PPUSH
50361: CALL_OW 3
50365: PPUSH
50366: CALL_OW 1
50370: ST_TO_ADDR
// tmp := 1 ;
50371: LD_ADDR_VAR 0 3
50375: PUSH
50376: LD_STRING 1
50378: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50379: LD_ADDR_VAR 0 6
50383: PUSH
50384: LD_VAR 0 6
50388: PUSH
50389: LD_VAR 0 3
50393: STR
50394: ST_TO_ADDR
// end ;
50395: GO 50291
50397: POP
50398: POP
// if isGameLoad then
50399: LD_VAR 0 1
50403: IFFALSE 50878
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
50405: LD_ADDR_VAR 0 4
50409: PUSH
50410: LD_EXP 32
50414: PUSH
50415: LD_EXP 31
50419: PUSH
50420: LD_EXP 33
50424: PUSH
50425: LD_EXP 30
50429: PUSH
50430: LD_EXP 34
50434: PUSH
50435: LD_EXP 35
50439: PUSH
50440: LD_EXP 36
50444: PUSH
50445: LD_EXP 37
50449: PUSH
50450: LD_EXP 38
50454: PUSH
50455: LD_EXP 39
50459: PUSH
50460: LD_EXP 40
50464: PUSH
50465: LD_EXP 41
50469: PUSH
50470: LD_EXP 42
50474: PUSH
50475: LD_EXP 43
50479: PUSH
50480: LD_EXP 51
50484: PUSH
50485: LD_EXP 52
50489: PUSH
50490: LD_EXP 53
50494: PUSH
50495: LD_EXP 54
50499: PUSH
50500: LD_EXP 56
50504: PUSH
50505: LD_EXP 57
50509: PUSH
50510: LD_EXP 58
50514: PUSH
50515: LD_EXP 61
50519: PUSH
50520: LD_EXP 63
50524: PUSH
50525: LD_EXP 64
50529: PUSH
50530: LD_EXP 65
50534: PUSH
50535: LD_EXP 67
50539: PUSH
50540: LD_EXP 68
50544: PUSH
50545: LD_EXP 71
50549: PUSH
50550: LD_EXP 72
50554: PUSH
50555: LD_EXP 73
50559: PUSH
50560: LD_EXP 74
50564: PUSH
50565: LD_EXP 75
50569: PUSH
50570: LD_EXP 76
50574: PUSH
50575: LD_EXP 77
50579: PUSH
50580: LD_EXP 78
50584: PUSH
50585: LD_EXP 79
50589: PUSH
50590: LD_EXP 44
50594: PUSH
50595: LD_EXP 45
50599: PUSH
50600: LD_EXP 48
50604: PUSH
50605: LD_EXP 49
50609: PUSH
50610: LD_EXP 50
50614: PUSH
50615: LD_EXP 46
50619: PUSH
50620: LD_EXP 47
50624: PUSH
50625: LD_EXP 55
50629: PUSH
50630: LD_EXP 59
50634: PUSH
50635: LD_EXP 60
50639: PUSH
50640: LD_EXP 62
50644: PUSH
50645: LD_EXP 66
50649: PUSH
50650: LD_EXP 69
50654: PUSH
50655: LD_EXP 70
50659: PUSH
50660: LD_EXP 80
50664: PUSH
50665: LD_EXP 81
50669: PUSH
50670: LD_EXP 82
50674: PUSH
50675: LD_EXP 83
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: ST_TO_ADDR
// tmp :=  ;
50736: LD_ADDR_VAR 0 3
50740: PUSH
50741: LD_STRING 
50743: ST_TO_ADDR
// for i = 1 to normalCounter do
50744: LD_ADDR_VAR 0 8
50748: PUSH
50749: DOUBLE
50750: LD_INT 1
50752: DEC
50753: ST_TO_ADDR
50754: LD_EXP 28
50758: PUSH
50759: FOR_TO
50760: IFFALSE 50796
// begin if flags [ i ] then
50762: LD_VAR 0 4
50766: PUSH
50767: LD_VAR 0 8
50771: ARRAY
50772: IFFALSE 50794
// tmp := tmp & i & ; ;
50774: LD_ADDR_VAR 0 3
50778: PUSH
50779: LD_VAR 0 3
50783: PUSH
50784: LD_VAR 0 8
50788: STR
50789: PUSH
50790: LD_STRING ;
50792: STR
50793: ST_TO_ADDR
// end ;
50794: GO 50759
50796: POP
50797: POP
// for i = 1 to hardcoreCounter do
50798: LD_ADDR_VAR 0 8
50802: PUSH
50803: DOUBLE
50804: LD_INT 1
50806: DEC
50807: ST_TO_ADDR
50808: LD_EXP 29
50812: PUSH
50813: FOR_TO
50814: IFFALSE 50860
// begin if flags [ normalCounter + i ] then
50816: LD_VAR 0 4
50820: PUSH
50821: LD_EXP 28
50825: PUSH
50826: LD_VAR 0 8
50830: PLUS
50831: ARRAY
50832: IFFALSE 50858
// tmp := tmp & ( 100 + i ) & ; ;
50834: LD_ADDR_VAR 0 3
50838: PUSH
50839: LD_VAR 0 3
50843: PUSH
50844: LD_INT 100
50846: PUSH
50847: LD_VAR 0 8
50851: PLUS
50852: STR
50853: PUSH
50854: LD_STRING ;
50856: STR
50857: ST_TO_ADDR
// end ;
50858: GO 50813
50860: POP
50861: POP
// if tmp then
50862: LD_VAR 0 3
50866: IFFALSE 50878
// active := tmp ;
50868: LD_ADDR_VAR 0 7
50872: PUSH
50873: LD_VAR 0 3
50877: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
50878: LD_STRING getStreamItemsFromMission("
50880: PUSH
50881: LD_VAR 0 5
50885: STR
50886: PUSH
50887: LD_STRING ","
50889: STR
50890: PUSH
50891: LD_VAR 0 6
50895: STR
50896: PUSH
50897: LD_STRING ","
50899: STR
50900: PUSH
50901: LD_VAR 0 7
50905: STR
50906: PUSH
50907: LD_STRING ")
50909: STR
50910: PPUSH
50911: CALL_OW 559
// end else
50915: GO 50924
// ToLua ( getStreamItemsFromMission("","","") ) ;
50917: LD_STRING getStreamItemsFromMission("","","")
50919: PPUSH
50920: CALL_OW 559
// end ;
50924: LD_VAR 0 2
50928: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
50929: LD_EXP 27
50933: PUSH
50934: LD_EXP 32
50938: AND
50939: IFFALSE 51063
50941: GO 50943
50943: DISABLE
50944: LD_INT 0
50946: PPUSH
50947: PPUSH
// begin enable ;
50948: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
50949: LD_ADDR_VAR 0 2
50953: PUSH
50954: LD_INT 22
50956: PUSH
50957: LD_OWVAR 2
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: LD_INT 34
50971: PUSH
50972: LD_INT 7
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 34
50981: PUSH
50982: LD_INT 45
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 34
50991: PUSH
50992: LD_INT 28
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 34
51001: PUSH
51002: LD_INT 47
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PPUSH
51020: CALL_OW 69
51024: ST_TO_ADDR
// if not tmp then
51025: LD_VAR 0 2
51029: NOT
51030: IFFALSE 51034
// exit ;
51032: GO 51063
// for i in tmp do
51034: LD_ADDR_VAR 0 1
51038: PUSH
51039: LD_VAR 0 2
51043: PUSH
51044: FOR_IN
51045: IFFALSE 51061
// begin SetLives ( i , 0 ) ;
51047: LD_VAR 0 1
51051: PPUSH
51052: LD_INT 0
51054: PPUSH
51055: CALL_OW 234
// end ;
51059: GO 51044
51061: POP
51062: POP
// end ;
51063: PPOPN 2
51065: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51066: LD_EXP 27
51070: PUSH
51071: LD_EXP 33
51075: AND
51076: IFFALSE 51160
51078: GO 51080
51080: DISABLE
51081: LD_INT 0
51083: PPUSH
51084: PPUSH
// begin enable ;
51085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51086: LD_ADDR_VAR 0 2
51090: PUSH
51091: LD_INT 22
51093: PUSH
51094: LD_OWVAR 2
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 32
51105: PUSH
51106: LD_INT 3
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PPUSH
51117: CALL_OW 69
51121: ST_TO_ADDR
// if not tmp then
51122: LD_VAR 0 2
51126: NOT
51127: IFFALSE 51131
// exit ;
51129: GO 51160
// for i in tmp do
51131: LD_ADDR_VAR 0 1
51135: PUSH
51136: LD_VAR 0 2
51140: PUSH
51141: FOR_IN
51142: IFFALSE 51158
// begin SetLives ( i , 0 ) ;
51144: LD_VAR 0 1
51148: PPUSH
51149: LD_INT 0
51151: PPUSH
51152: CALL_OW 234
// end ;
51156: GO 51141
51158: POP
51159: POP
// end ;
51160: PPOPN 2
51162: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51163: LD_EXP 27
51167: PUSH
51168: LD_EXP 30
51172: AND
51173: IFFALSE 51266
51175: GO 51177
51177: DISABLE
51178: LD_INT 0
51180: PPUSH
// begin enable ;
51181: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51182: LD_ADDR_VAR 0 1
51186: PUSH
51187: LD_INT 22
51189: PUSH
51190: LD_OWVAR 2
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 25
51204: PUSH
51205: LD_INT 5
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 25
51214: PUSH
51215: LD_INT 9
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 25
51224: PUSH
51225: LD_INT 8
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PPUSH
51242: CALL_OW 69
51246: PUSH
51247: FOR_IN
51248: IFFALSE 51264
// begin SetClass ( i , 1 ) ;
51250: LD_VAR 0 1
51254: PPUSH
51255: LD_INT 1
51257: PPUSH
51258: CALL_OW 336
// end ;
51262: GO 51247
51264: POP
51265: POP
// end ;
51266: PPOPN 1
51268: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51269: LD_EXP 27
51273: PUSH
51274: LD_EXP 31
51278: AND
51279: PUSH
51280: LD_OWVAR 65
51284: PUSH
51285: LD_INT 7
51287: LESS
51288: AND
51289: IFFALSE 51303
51291: GO 51293
51293: DISABLE
// begin enable ;
51294: ENABLE
// game_speed := 7 ;
51295: LD_ADDR_OWVAR 65
51299: PUSH
51300: LD_INT 7
51302: ST_TO_ADDR
// end ;
51303: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51304: LD_EXP 27
51308: PUSH
51309: LD_EXP 34
51313: AND
51314: IFFALSE 51516
51316: GO 51318
51318: DISABLE
51319: LD_INT 0
51321: PPUSH
51322: PPUSH
51323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51324: LD_ADDR_VAR 0 3
51328: PUSH
51329: LD_INT 81
51331: PUSH
51332: LD_OWVAR 2
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 21
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PPUSH
51355: CALL_OW 69
51359: ST_TO_ADDR
// if not tmp then
51360: LD_VAR 0 3
51364: NOT
51365: IFFALSE 51369
// exit ;
51367: GO 51516
// if tmp > 5 then
51369: LD_VAR 0 3
51373: PUSH
51374: LD_INT 5
51376: GREATER
51377: IFFALSE 51389
// k := 5 else
51379: LD_ADDR_VAR 0 2
51383: PUSH
51384: LD_INT 5
51386: ST_TO_ADDR
51387: GO 51399
// k := tmp ;
51389: LD_ADDR_VAR 0 2
51393: PUSH
51394: LD_VAR 0 3
51398: ST_TO_ADDR
// for i := 1 to k do
51399: LD_ADDR_VAR 0 1
51403: PUSH
51404: DOUBLE
51405: LD_INT 1
51407: DEC
51408: ST_TO_ADDR
51409: LD_VAR 0 2
51413: PUSH
51414: FOR_TO
51415: IFFALSE 51514
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51417: LD_VAR 0 3
51421: PUSH
51422: LD_VAR 0 1
51426: ARRAY
51427: PPUSH
51428: LD_VAR 0 1
51432: PUSH
51433: LD_INT 4
51435: MOD
51436: PUSH
51437: LD_INT 1
51439: PLUS
51440: PPUSH
51441: CALL_OW 259
51445: PUSH
51446: LD_INT 10
51448: LESS
51449: IFFALSE 51512
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51451: LD_VAR 0 3
51455: PUSH
51456: LD_VAR 0 1
51460: ARRAY
51461: PPUSH
51462: LD_VAR 0 1
51466: PUSH
51467: LD_INT 4
51469: MOD
51470: PUSH
51471: LD_INT 1
51473: PLUS
51474: PPUSH
51475: LD_VAR 0 3
51479: PUSH
51480: LD_VAR 0 1
51484: ARRAY
51485: PPUSH
51486: LD_VAR 0 1
51490: PUSH
51491: LD_INT 4
51493: MOD
51494: PUSH
51495: LD_INT 1
51497: PLUS
51498: PPUSH
51499: CALL_OW 259
51503: PUSH
51504: LD_INT 1
51506: PLUS
51507: PPUSH
51508: CALL_OW 237
51512: GO 51414
51514: POP
51515: POP
// end ;
51516: PPOPN 3
51518: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51519: LD_EXP 27
51523: PUSH
51524: LD_EXP 35
51528: AND
51529: IFFALSE 51549
51531: GO 51533
51533: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51534: LD_INT 4
51536: PPUSH
51537: LD_OWVAR 2
51541: PPUSH
51542: LD_INT 0
51544: PPUSH
51545: CALL_OW 324
51549: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51550: LD_EXP 27
51554: PUSH
51555: LD_EXP 64
51559: AND
51560: IFFALSE 51580
51562: GO 51564
51564: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51565: LD_INT 19
51567: PPUSH
51568: LD_OWVAR 2
51572: PPUSH
51573: LD_INT 0
51575: PPUSH
51576: CALL_OW 324
51580: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
51581: LD_EXP 27
51585: PUSH
51586: LD_EXP 36
51590: AND
51591: IFFALSE 51693
51593: GO 51595
51595: DISABLE
51596: LD_INT 0
51598: PPUSH
51599: PPUSH
// begin enable ;
51600: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
51601: LD_ADDR_VAR 0 2
51605: PUSH
51606: LD_INT 22
51608: PUSH
51609: LD_OWVAR 2
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: LD_INT 34
51623: PUSH
51624: LD_INT 11
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 34
51633: PUSH
51634: LD_INT 30
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: LIST
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PPUSH
51650: CALL_OW 69
51654: ST_TO_ADDR
// if not tmp then
51655: LD_VAR 0 2
51659: NOT
51660: IFFALSE 51664
// exit ;
51662: GO 51693
// for i in tmp do
51664: LD_ADDR_VAR 0 1
51668: PUSH
51669: LD_VAR 0 2
51673: PUSH
51674: FOR_IN
51675: IFFALSE 51691
// begin SetLives ( i , 0 ) ;
51677: LD_VAR 0 1
51681: PPUSH
51682: LD_INT 0
51684: PPUSH
51685: CALL_OW 234
// end ;
51689: GO 51674
51691: POP
51692: POP
// end ;
51693: PPOPN 2
51695: END
// every 0 0$1 trigger StreamModeActive and sBunker do
51696: LD_EXP 27
51700: PUSH
51701: LD_EXP 37
51705: AND
51706: IFFALSE 51726
51708: GO 51710
51710: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
51711: LD_INT 32
51713: PPUSH
51714: LD_OWVAR 2
51718: PPUSH
51719: LD_INT 0
51721: PPUSH
51722: CALL_OW 324
51726: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
51727: LD_EXP 27
51731: PUSH
51732: LD_EXP 38
51736: AND
51737: IFFALSE 51918
51739: GO 51741
51741: DISABLE
51742: LD_INT 0
51744: PPUSH
51745: PPUSH
51746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
51747: LD_ADDR_VAR 0 2
51751: PUSH
51752: LD_INT 22
51754: PUSH
51755: LD_OWVAR 2
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 33
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PPUSH
51778: CALL_OW 69
51782: ST_TO_ADDR
// if not tmp then
51783: LD_VAR 0 2
51787: NOT
51788: IFFALSE 51792
// exit ;
51790: GO 51918
// side := 0 ;
51792: LD_ADDR_VAR 0 3
51796: PUSH
51797: LD_INT 0
51799: ST_TO_ADDR
// for i := 1 to 8 do
51800: LD_ADDR_VAR 0 1
51804: PUSH
51805: DOUBLE
51806: LD_INT 1
51808: DEC
51809: ST_TO_ADDR
51810: LD_INT 8
51812: PUSH
51813: FOR_TO
51814: IFFALSE 51862
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
51816: LD_OWVAR 2
51820: PUSH
51821: LD_VAR 0 1
51825: NONEQUAL
51826: PUSH
51827: LD_OWVAR 2
51831: PPUSH
51832: LD_VAR 0 1
51836: PPUSH
51837: CALL_OW 81
51841: PUSH
51842: LD_INT 2
51844: EQUAL
51845: AND
51846: IFFALSE 51860
// begin side := i ;
51848: LD_ADDR_VAR 0 3
51852: PUSH
51853: LD_VAR 0 1
51857: ST_TO_ADDR
// break ;
51858: GO 51862
// end ;
51860: GO 51813
51862: POP
51863: POP
// if not side then
51864: LD_VAR 0 3
51868: NOT
51869: IFFALSE 51873
// exit ;
51871: GO 51918
// for i := 1 to tmp do
51873: LD_ADDR_VAR 0 1
51877: PUSH
51878: DOUBLE
51879: LD_INT 1
51881: DEC
51882: ST_TO_ADDR
51883: LD_VAR 0 2
51887: PUSH
51888: FOR_TO
51889: IFFALSE 51916
// if Prob ( 60 ) then
51891: LD_INT 60
51893: PPUSH
51894: CALL_OW 13
51898: IFFALSE 51914
// SetSide ( i , side ) ;
51900: LD_VAR 0 1
51904: PPUSH
51905: LD_VAR 0 3
51909: PPUSH
51910: CALL_OW 235
51914: GO 51888
51916: POP
51917: POP
// end ;
51918: PPOPN 3
51920: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
51921: LD_EXP 27
51925: PUSH
51926: LD_EXP 40
51930: AND
51931: IFFALSE 52050
51933: GO 51935
51935: DISABLE
51936: LD_INT 0
51938: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
51939: LD_ADDR_VAR 0 1
51943: PUSH
51944: LD_INT 22
51946: PUSH
51947: LD_OWVAR 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 21
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: LD_INT 23
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: PPUSH
51988: CALL_OW 69
51992: PUSH
51993: FOR_IN
51994: IFFALSE 52048
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
51996: LD_VAR 0 1
52000: PPUSH
52001: CALL_OW 257
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: LD_INT 4
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: IN
52024: IFFALSE 52046
// SetClass ( un , rand ( 1 , 4 ) ) ;
52026: LD_VAR 0 1
52030: PPUSH
52031: LD_INT 1
52033: PPUSH
52034: LD_INT 4
52036: PPUSH
52037: CALL_OW 12
52041: PPUSH
52042: CALL_OW 336
52046: GO 51993
52048: POP
52049: POP
// end ;
52050: PPOPN 1
52052: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52053: LD_EXP 27
52057: PUSH
52058: LD_EXP 39
52062: AND
52063: IFFALSE 52142
52065: GO 52067
52067: DISABLE
52068: LD_INT 0
52070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52071: LD_ADDR_VAR 0 1
52075: PUSH
52076: LD_INT 22
52078: PUSH
52079: LD_OWVAR 2
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 21
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PPUSH
52102: CALL_OW 69
52106: ST_TO_ADDR
// if not tmp then
52107: LD_VAR 0 1
52111: NOT
52112: IFFALSE 52116
// exit ;
52114: GO 52142
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52116: LD_VAR 0 1
52120: PUSH
52121: LD_INT 1
52123: PPUSH
52124: LD_VAR 0 1
52128: PPUSH
52129: CALL_OW 12
52133: ARRAY
52134: PPUSH
52135: LD_INT 100
52137: PPUSH
52138: CALL_OW 234
// end ;
52142: PPOPN 1
52144: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52145: LD_EXP 27
52149: PUSH
52150: LD_EXP 41
52154: AND
52155: IFFALSE 52253
52157: GO 52159
52159: DISABLE
52160: LD_INT 0
52162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52163: LD_ADDR_VAR 0 1
52167: PUSH
52168: LD_INT 22
52170: PUSH
52171: LD_OWVAR 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 21
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PPUSH
52194: CALL_OW 69
52198: ST_TO_ADDR
// if not tmp then
52199: LD_VAR 0 1
52203: NOT
52204: IFFALSE 52208
// exit ;
52206: GO 52253
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52208: LD_VAR 0 1
52212: PUSH
52213: LD_INT 1
52215: PPUSH
52216: LD_VAR 0 1
52220: PPUSH
52221: CALL_OW 12
52225: ARRAY
52226: PPUSH
52227: LD_INT 1
52229: PPUSH
52230: LD_INT 4
52232: PPUSH
52233: CALL_OW 12
52237: PPUSH
52238: LD_INT 3000
52240: PPUSH
52241: LD_INT 9000
52243: PPUSH
52244: CALL_OW 12
52248: PPUSH
52249: CALL_OW 492
// end ;
52253: PPOPN 1
52255: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52256: LD_EXP 27
52260: PUSH
52261: LD_EXP 42
52265: AND
52266: IFFALSE 52286
52268: GO 52270
52270: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52271: LD_INT 1
52273: PPUSH
52274: LD_OWVAR 2
52278: PPUSH
52279: LD_INT 0
52281: PPUSH
52282: CALL_OW 324
52286: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52287: LD_EXP 27
52291: PUSH
52292: LD_EXP 43
52296: AND
52297: IFFALSE 52380
52299: GO 52301
52301: DISABLE
52302: LD_INT 0
52304: PPUSH
52305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52306: LD_ADDR_VAR 0 2
52310: PUSH
52311: LD_INT 22
52313: PUSH
52314: LD_OWVAR 2
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 21
52325: PUSH
52326: LD_INT 3
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PPUSH
52337: CALL_OW 69
52341: ST_TO_ADDR
// if not tmp then
52342: LD_VAR 0 2
52346: NOT
52347: IFFALSE 52351
// exit ;
52349: GO 52380
// for i in tmp do
52351: LD_ADDR_VAR 0 1
52355: PUSH
52356: LD_VAR 0 2
52360: PUSH
52361: FOR_IN
52362: IFFALSE 52378
// SetBLevel ( i , 10 ) ;
52364: LD_VAR 0 1
52368: PPUSH
52369: LD_INT 10
52371: PPUSH
52372: CALL_OW 241
52376: GO 52361
52378: POP
52379: POP
// end ;
52380: PPOPN 2
52382: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52383: LD_EXP 27
52387: PUSH
52388: LD_EXP 44
52392: AND
52393: IFFALSE 52504
52395: GO 52397
52397: DISABLE
52398: LD_INT 0
52400: PPUSH
52401: PPUSH
52402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52403: LD_ADDR_VAR 0 3
52407: PUSH
52408: LD_INT 22
52410: PUSH
52411: LD_OWVAR 2
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 25
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PPUSH
52434: CALL_OW 69
52438: ST_TO_ADDR
// if not tmp then
52439: LD_VAR 0 3
52443: NOT
52444: IFFALSE 52448
// exit ;
52446: GO 52504
// un := tmp [ rand ( 1 , tmp ) ] ;
52448: LD_ADDR_VAR 0 2
52452: PUSH
52453: LD_VAR 0 3
52457: PUSH
52458: LD_INT 1
52460: PPUSH
52461: LD_VAR 0 3
52465: PPUSH
52466: CALL_OW 12
52470: ARRAY
52471: ST_TO_ADDR
// if Crawls ( un ) then
52472: LD_VAR 0 2
52476: PPUSH
52477: CALL_OW 318
52481: IFFALSE 52492
// ComWalk ( un ) ;
52483: LD_VAR 0 2
52487: PPUSH
52488: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52492: LD_VAR 0 2
52496: PPUSH
52497: LD_INT 5
52499: PPUSH
52500: CALL_OW 336
// end ;
52504: PPOPN 3
52506: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
52507: LD_EXP 27
52511: PUSH
52512: LD_EXP 45
52516: AND
52517: PUSH
52518: LD_OWVAR 67
52522: PUSH
52523: LD_INT 4
52525: LESS
52526: AND
52527: IFFALSE 52546
52529: GO 52531
52531: DISABLE
// begin Difficulty := Difficulty + 1 ;
52532: LD_ADDR_OWVAR 67
52536: PUSH
52537: LD_OWVAR 67
52541: PUSH
52542: LD_INT 1
52544: PLUS
52545: ST_TO_ADDR
// end ;
52546: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52547: LD_EXP 27
52551: PUSH
52552: LD_EXP 46
52556: AND
52557: IFFALSE 52660
52559: GO 52561
52561: DISABLE
52562: LD_INT 0
52564: PPUSH
// begin for i := 1 to 5 do
52565: LD_ADDR_VAR 0 1
52569: PUSH
52570: DOUBLE
52571: LD_INT 1
52573: DEC
52574: ST_TO_ADDR
52575: LD_INT 5
52577: PUSH
52578: FOR_TO
52579: IFFALSE 52658
// begin uc_nation := nation_nature ;
52581: LD_ADDR_OWVAR 21
52585: PUSH
52586: LD_INT 0
52588: ST_TO_ADDR
// uc_side := 0 ;
52589: LD_ADDR_OWVAR 20
52593: PUSH
52594: LD_INT 0
52596: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52597: LD_ADDR_OWVAR 29
52601: PUSH
52602: LD_INT 12
52604: PUSH
52605: LD_INT 12
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: ST_TO_ADDR
// hc_agressivity := 20 ;
52612: LD_ADDR_OWVAR 35
52616: PUSH
52617: LD_INT 20
52619: ST_TO_ADDR
// hc_class := class_tiger ;
52620: LD_ADDR_OWVAR 28
52624: PUSH
52625: LD_INT 14
52627: ST_TO_ADDR
// hc_gallery :=  ;
52628: LD_ADDR_OWVAR 33
52632: PUSH
52633: LD_STRING 
52635: ST_TO_ADDR
// hc_name :=  ;
52636: LD_ADDR_OWVAR 26
52640: PUSH
52641: LD_STRING 
52643: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
52644: CALL_OW 44
52648: PPUSH
52649: LD_INT 0
52651: PPUSH
52652: CALL_OW 51
// end ;
52656: GO 52578
52658: POP
52659: POP
// end ;
52660: PPOPN 1
52662: END
// every 0 0$1 trigger StreamModeActive and sBomb do
52663: LD_EXP 27
52667: PUSH
52668: LD_EXP 47
52672: AND
52673: IFFALSE 52682
52675: GO 52677
52677: DISABLE
// StreamSibBomb ;
52678: CALL 52683 0 0
52682: END
// export function StreamSibBomb ; var i , x , y ; begin
52683: LD_INT 0
52685: PPUSH
52686: PPUSH
52687: PPUSH
52688: PPUSH
// result := false ;
52689: LD_ADDR_VAR 0 1
52693: PUSH
52694: LD_INT 0
52696: ST_TO_ADDR
// for i := 1 to 16 do
52697: LD_ADDR_VAR 0 2
52701: PUSH
52702: DOUBLE
52703: LD_INT 1
52705: DEC
52706: ST_TO_ADDR
52707: LD_INT 16
52709: PUSH
52710: FOR_TO
52711: IFFALSE 52910
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52713: LD_ADDR_VAR 0 3
52717: PUSH
52718: LD_INT 10
52720: PUSH
52721: LD_INT 20
52723: PUSH
52724: LD_INT 30
52726: PUSH
52727: LD_INT 40
52729: PUSH
52730: LD_INT 50
52732: PUSH
52733: LD_INT 60
52735: PUSH
52736: LD_INT 70
52738: PUSH
52739: LD_INT 80
52741: PUSH
52742: LD_INT 90
52744: PUSH
52745: LD_INT 100
52747: PUSH
52748: LD_INT 110
52750: PUSH
52751: LD_INT 120
52753: PUSH
52754: LD_INT 130
52756: PUSH
52757: LD_INT 140
52759: PUSH
52760: LD_INT 150
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: PPUSH
52783: LD_INT 15
52785: PPUSH
52786: CALL_OW 12
52790: ARRAY
52791: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52792: LD_ADDR_VAR 0 4
52796: PUSH
52797: LD_INT 10
52799: PUSH
52800: LD_INT 20
52802: PUSH
52803: LD_INT 30
52805: PUSH
52806: LD_INT 40
52808: PUSH
52809: LD_INT 50
52811: PUSH
52812: LD_INT 60
52814: PUSH
52815: LD_INT 70
52817: PUSH
52818: LD_INT 80
52820: PUSH
52821: LD_INT 90
52823: PUSH
52824: LD_INT 100
52826: PUSH
52827: LD_INT 110
52829: PUSH
52830: LD_INT 120
52832: PUSH
52833: LD_INT 130
52835: PUSH
52836: LD_INT 140
52838: PUSH
52839: LD_INT 150
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PPUSH
52862: LD_INT 15
52864: PPUSH
52865: CALL_OW 12
52869: ARRAY
52870: ST_TO_ADDR
// if ValidHex ( x , y ) then
52871: LD_VAR 0 3
52875: PPUSH
52876: LD_VAR 0 4
52880: PPUSH
52881: CALL_OW 488
52885: IFFALSE 52908
// begin result := [ x , y ] ;
52887: LD_ADDR_VAR 0 1
52891: PUSH
52892: LD_VAR 0 3
52896: PUSH
52897: LD_VAR 0 4
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: ST_TO_ADDR
// break ;
52906: GO 52910
// end ; end ;
52908: GO 52710
52910: POP
52911: POP
// if result then
52912: LD_VAR 0 1
52916: IFFALSE 52976
// begin ToLua ( playSibBomb() ) ;
52918: LD_STRING playSibBomb()
52920: PPUSH
52921: CALL_OW 559
// wait ( 0 0$14 ) ;
52925: LD_INT 490
52927: PPUSH
52928: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
52932: LD_VAR 0 1
52936: PUSH
52937: LD_INT 1
52939: ARRAY
52940: PPUSH
52941: LD_VAR 0 1
52945: PUSH
52946: LD_INT 2
52948: ARRAY
52949: PPUSH
52950: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
52954: LD_VAR 0 1
52958: PUSH
52959: LD_INT 1
52961: ARRAY
52962: PPUSH
52963: LD_VAR 0 1
52967: PUSH
52968: LD_INT 2
52970: ARRAY
52971: PPUSH
52972: CALL_OW 429
// end ; end ;
52976: LD_VAR 0 1
52980: RET
// every 0 0$1 trigger StreamModeActive and sReset do
52981: LD_EXP 27
52985: PUSH
52986: LD_EXP 49
52990: AND
52991: IFFALSE 53003
52993: GO 52995
52995: DISABLE
// YouLost (  ) ;
52996: LD_STRING 
52998: PPUSH
52999: CALL_OW 104
53003: END
// every 0 0$1 trigger StreamModeActive and sFog do
53004: LD_EXP 27
53008: PUSH
53009: LD_EXP 48
53013: AND
53014: IFFALSE 53028
53016: GO 53018
53018: DISABLE
// FogOff ( your_side ) ;
53019: LD_OWVAR 2
53023: PPUSH
53024: CALL_OW 344
53028: END
// every 0 0$1 trigger StreamModeActive and sSun do
53029: LD_EXP 27
53033: PUSH
53034: LD_EXP 50
53038: AND
53039: IFFALSE 53067
53041: GO 53043
53043: DISABLE
// begin solar_recharge_percent := 0 ;
53044: LD_ADDR_OWVAR 79
53048: PUSH
53049: LD_INT 0
53051: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53052: LD_INT 10500
53054: PPUSH
53055: CALL_OW 67
// solar_recharge_percent := 100 ;
53059: LD_ADDR_OWVAR 79
53063: PUSH
53064: LD_INT 100
53066: ST_TO_ADDR
// end ;
53067: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53068: LD_EXP 27
53072: PUSH
53073: LD_EXP 51
53077: AND
53078: IFFALSE 53317
53080: GO 53082
53082: DISABLE
53083: LD_INT 0
53085: PPUSH
53086: PPUSH
53087: PPUSH
// begin tmp := [ ] ;
53088: LD_ADDR_VAR 0 3
53092: PUSH
53093: EMPTY
53094: ST_TO_ADDR
// for i := 1 to 6 do
53095: LD_ADDR_VAR 0 1
53099: PUSH
53100: DOUBLE
53101: LD_INT 1
53103: DEC
53104: ST_TO_ADDR
53105: LD_INT 6
53107: PUSH
53108: FOR_TO
53109: IFFALSE 53214
// begin uc_nation := nation_nature ;
53111: LD_ADDR_OWVAR 21
53115: PUSH
53116: LD_INT 0
53118: ST_TO_ADDR
// uc_side := 0 ;
53119: LD_ADDR_OWVAR 20
53123: PUSH
53124: LD_INT 0
53126: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53127: LD_ADDR_OWVAR 29
53131: PUSH
53132: LD_INT 12
53134: PUSH
53135: LD_INT 12
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: ST_TO_ADDR
// hc_agressivity := 20 ;
53142: LD_ADDR_OWVAR 35
53146: PUSH
53147: LD_INT 20
53149: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53150: LD_ADDR_OWVAR 28
53154: PUSH
53155: LD_INT 17
53157: ST_TO_ADDR
// hc_gallery :=  ;
53158: LD_ADDR_OWVAR 33
53162: PUSH
53163: LD_STRING 
53165: ST_TO_ADDR
// hc_name :=  ;
53166: LD_ADDR_OWVAR 26
53170: PUSH
53171: LD_STRING 
53173: ST_TO_ADDR
// un := CreateHuman ;
53174: LD_ADDR_VAR 0 2
53178: PUSH
53179: CALL_OW 44
53183: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53184: LD_VAR 0 2
53188: PPUSH
53189: LD_INT 1
53191: PPUSH
53192: CALL_OW 51
// tmp := tmp ^ un ;
53196: LD_ADDR_VAR 0 3
53200: PUSH
53201: LD_VAR 0 3
53205: PUSH
53206: LD_VAR 0 2
53210: ADD
53211: ST_TO_ADDR
// end ;
53212: GO 53108
53214: POP
53215: POP
// repeat wait ( 0 0$1 ) ;
53216: LD_INT 35
53218: PPUSH
53219: CALL_OW 67
// for un in tmp do
53223: LD_ADDR_VAR 0 2
53227: PUSH
53228: LD_VAR 0 3
53232: PUSH
53233: FOR_IN
53234: IFFALSE 53308
// begin if IsDead ( un ) then
53236: LD_VAR 0 2
53240: PPUSH
53241: CALL_OW 301
53245: IFFALSE 53265
// begin tmp := tmp diff un ;
53247: LD_ADDR_VAR 0 3
53251: PUSH
53252: LD_VAR 0 3
53256: PUSH
53257: LD_VAR 0 2
53261: DIFF
53262: ST_TO_ADDR
// continue ;
53263: GO 53233
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53265: LD_VAR 0 2
53269: PPUSH
53270: LD_INT 3
53272: PUSH
53273: LD_INT 22
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PPUSH
53287: CALL_OW 69
53291: PPUSH
53292: LD_VAR 0 2
53296: PPUSH
53297: CALL_OW 74
53301: PPUSH
53302: CALL_OW 115
// end ;
53306: GO 53233
53308: POP
53309: POP
// until not tmp ;
53310: LD_VAR 0 3
53314: NOT
53315: IFFALSE 53216
// end ;
53317: PPOPN 3
53319: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53320: LD_EXP 27
53324: PUSH
53325: LD_EXP 52
53329: AND
53330: IFFALSE 53384
53332: GO 53334
53334: DISABLE
// begin ToLua ( displayTroll(); ) ;
53335: LD_STRING displayTroll();
53337: PPUSH
53338: CALL_OW 559
// wait ( 3 3$00 ) ;
53342: LD_INT 6300
53344: PPUSH
53345: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53349: LD_STRING hideTroll();
53351: PPUSH
53352: CALL_OW 559
// wait ( 1 1$00 ) ;
53356: LD_INT 2100
53358: PPUSH
53359: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53363: LD_STRING displayTroll();
53365: PPUSH
53366: CALL_OW 559
// wait ( 1 1$00 ) ;
53370: LD_INT 2100
53372: PPUSH
53373: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53377: LD_STRING hideTroll();
53379: PPUSH
53380: CALL_OW 559
// end ;
53384: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53385: LD_EXP 27
53389: PUSH
53390: LD_EXP 53
53394: AND
53395: IFFALSE 53458
53397: GO 53399
53399: DISABLE
53400: LD_INT 0
53402: PPUSH
// begin p := 0 ;
53403: LD_ADDR_VAR 0 1
53407: PUSH
53408: LD_INT 0
53410: ST_TO_ADDR
// repeat game_speed := 1 ;
53411: LD_ADDR_OWVAR 65
53415: PUSH
53416: LD_INT 1
53418: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53419: LD_INT 35
53421: PPUSH
53422: CALL_OW 67
// p := p + 1 ;
53426: LD_ADDR_VAR 0 1
53430: PUSH
53431: LD_VAR 0 1
53435: PUSH
53436: LD_INT 1
53438: PLUS
53439: ST_TO_ADDR
// until p >= 60 ;
53440: LD_VAR 0 1
53444: PUSH
53445: LD_INT 60
53447: GREATEREQUAL
53448: IFFALSE 53411
// game_speed := 4 ;
53450: LD_ADDR_OWVAR 65
53454: PUSH
53455: LD_INT 4
53457: ST_TO_ADDR
// end ;
53458: PPOPN 1
53460: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53461: LD_EXP 27
53465: PUSH
53466: LD_EXP 54
53470: AND
53471: IFFALSE 53617
53473: GO 53475
53475: DISABLE
53476: LD_INT 0
53478: PPUSH
53479: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53480: LD_ADDR_VAR 0 1
53484: PUSH
53485: LD_INT 22
53487: PUSH
53488: LD_OWVAR 2
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: LD_INT 30
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 30
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: LIST
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PPUSH
53529: CALL_OW 69
53533: ST_TO_ADDR
// if not depot then
53534: LD_VAR 0 1
53538: NOT
53539: IFFALSE 53543
// exit ;
53541: GO 53617
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53543: LD_ADDR_VAR 0 2
53547: PUSH
53548: LD_VAR 0 1
53552: PUSH
53553: LD_INT 1
53555: PPUSH
53556: LD_VAR 0 1
53560: PPUSH
53561: CALL_OW 12
53565: ARRAY
53566: PPUSH
53567: CALL_OW 274
53571: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53572: LD_VAR 0 2
53576: PPUSH
53577: LD_INT 1
53579: PPUSH
53580: LD_INT 0
53582: PPUSH
53583: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
53587: LD_VAR 0 2
53591: PPUSH
53592: LD_INT 2
53594: PPUSH
53595: LD_INT 0
53597: PPUSH
53598: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
53602: LD_VAR 0 2
53606: PPUSH
53607: LD_INT 3
53609: PPUSH
53610: LD_INT 0
53612: PPUSH
53613: CALL_OW 277
// end ;
53617: PPOPN 2
53619: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
53620: LD_EXP 27
53624: PUSH
53625: LD_EXP 55
53629: AND
53630: IFFALSE 53727
53632: GO 53634
53634: DISABLE
53635: LD_INT 0
53637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53638: LD_ADDR_VAR 0 1
53642: PUSH
53643: LD_INT 22
53645: PUSH
53646: LD_OWVAR 2
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 21
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 3
53667: PUSH
53668: LD_INT 23
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: LIST
53686: PPUSH
53687: CALL_OW 69
53691: ST_TO_ADDR
// if not tmp then
53692: LD_VAR 0 1
53696: NOT
53697: IFFALSE 53701
// exit ;
53699: GO 53727
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
53701: LD_VAR 0 1
53705: PUSH
53706: LD_INT 1
53708: PPUSH
53709: LD_VAR 0 1
53713: PPUSH
53714: CALL_OW 12
53718: ARRAY
53719: PPUSH
53720: LD_INT 200
53722: PPUSH
53723: CALL_OW 234
// end ;
53727: PPOPN 1
53729: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
53730: LD_EXP 27
53734: PUSH
53735: LD_EXP 56
53739: AND
53740: IFFALSE 53819
53742: GO 53744
53744: DISABLE
53745: LD_INT 0
53747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
53748: LD_ADDR_VAR 0 1
53752: PUSH
53753: LD_INT 22
53755: PUSH
53756: LD_OWVAR 2
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 21
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PPUSH
53779: CALL_OW 69
53783: ST_TO_ADDR
// if not tmp then
53784: LD_VAR 0 1
53788: NOT
53789: IFFALSE 53793
// exit ;
53791: GO 53819
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
53793: LD_VAR 0 1
53797: PUSH
53798: LD_INT 1
53800: PPUSH
53801: LD_VAR 0 1
53805: PPUSH
53806: CALL_OW 12
53810: ARRAY
53811: PPUSH
53812: LD_INT 60
53814: PPUSH
53815: CALL_OW 234
// end ;
53819: PPOPN 1
53821: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
53822: LD_EXP 27
53826: PUSH
53827: LD_EXP 57
53831: AND
53832: IFFALSE 53931
53834: GO 53836
53836: DISABLE
53837: LD_INT 0
53839: PPUSH
53840: PPUSH
// begin enable ;
53841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
53842: LD_ADDR_VAR 0 1
53846: PUSH
53847: LD_INT 22
53849: PUSH
53850: LD_OWVAR 2
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 61
53861: PUSH
53862: EMPTY
53863: LIST
53864: PUSH
53865: LD_INT 33
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: LIST
53879: PPUSH
53880: CALL_OW 69
53884: ST_TO_ADDR
// if not tmp then
53885: LD_VAR 0 1
53889: NOT
53890: IFFALSE 53894
// exit ;
53892: GO 53931
// for i in tmp do
53894: LD_ADDR_VAR 0 2
53898: PUSH
53899: LD_VAR 0 1
53903: PUSH
53904: FOR_IN
53905: IFFALSE 53929
// if IsControledBy ( i ) then
53907: LD_VAR 0 2
53911: PPUSH
53912: CALL_OW 312
53916: IFFALSE 53927
// ComUnlink ( i ) ;
53918: LD_VAR 0 2
53922: PPUSH
53923: CALL_OW 136
53927: GO 53904
53929: POP
53930: POP
// end ;
53931: PPOPN 2
53933: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
53934: LD_EXP 27
53938: PUSH
53939: LD_EXP 58
53943: AND
53944: IFFALSE 54084
53946: GO 53948
53948: DISABLE
53949: LD_INT 0
53951: PPUSH
53952: PPUSH
// begin ToLua ( displayPowell(); ) ;
53953: LD_STRING displayPowell();
53955: PPUSH
53956: CALL_OW 559
// uc_side := 0 ;
53960: LD_ADDR_OWVAR 20
53964: PUSH
53965: LD_INT 0
53967: ST_TO_ADDR
// uc_nation := 2 ;
53968: LD_ADDR_OWVAR 21
53972: PUSH
53973: LD_INT 2
53975: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
53976: LD_ADDR_OWVAR 37
53980: PUSH
53981: LD_INT 14
53983: ST_TO_ADDR
// vc_engine := engine_siberite ;
53984: LD_ADDR_OWVAR 39
53988: PUSH
53989: LD_INT 3
53991: ST_TO_ADDR
// vc_control := control_apeman ;
53992: LD_ADDR_OWVAR 38
53996: PUSH
53997: LD_INT 5
53999: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54000: LD_ADDR_OWVAR 40
54004: PUSH
54005: LD_INT 29
54007: ST_TO_ADDR
// un := CreateVehicle ;
54008: LD_ADDR_VAR 0 2
54012: PUSH
54013: CALL_OW 45
54017: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54018: LD_VAR 0 2
54022: PPUSH
54023: LD_INT 1
54025: PPUSH
54026: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54030: LD_INT 35
54032: PPUSH
54033: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54037: LD_VAR 0 2
54041: PPUSH
54042: LD_INT 22
54044: PUSH
54045: LD_OWVAR 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PPUSH
54054: CALL_OW 69
54058: PPUSH
54059: LD_VAR 0 2
54063: PPUSH
54064: CALL_OW 74
54068: PPUSH
54069: CALL_OW 115
// until IsDead ( un ) ;
54073: LD_VAR 0 2
54077: PPUSH
54078: CALL_OW 301
54082: IFFALSE 54030
// end ;
54084: PPOPN 2
54086: END
// every 0 0$1 trigger StreamModeActive and sStu do
54087: LD_EXP 27
54091: PUSH
54092: LD_EXP 66
54096: AND
54097: IFFALSE 54113
54099: GO 54101
54101: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54102: LD_STRING displayStucuk();
54104: PPUSH
54105: CALL_OW 559
// ResetFog ;
54109: CALL_OW 335
// end ;
54113: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54114: LD_EXP 27
54118: PUSH
54119: LD_EXP 59
54123: AND
54124: IFFALSE 54265
54126: GO 54128
54128: DISABLE
54129: LD_INT 0
54131: PPUSH
54132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54133: LD_ADDR_VAR 0 2
54137: PUSH
54138: LD_INT 22
54140: PUSH
54141: LD_OWVAR 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 21
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PPUSH
54164: CALL_OW 69
54168: ST_TO_ADDR
// if not tmp then
54169: LD_VAR 0 2
54173: NOT
54174: IFFALSE 54178
// exit ;
54176: GO 54265
// un := tmp [ rand ( 1 , tmp ) ] ;
54178: LD_ADDR_VAR 0 1
54182: PUSH
54183: LD_VAR 0 2
54187: PUSH
54188: LD_INT 1
54190: PPUSH
54191: LD_VAR 0 2
54195: PPUSH
54196: CALL_OW 12
54200: ARRAY
54201: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54202: LD_VAR 0 1
54206: PPUSH
54207: LD_INT 0
54209: PPUSH
54210: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54214: LD_VAR 0 1
54218: PPUSH
54219: LD_OWVAR 3
54223: PUSH
54224: LD_VAR 0 1
54228: DIFF
54229: PPUSH
54230: LD_VAR 0 1
54234: PPUSH
54235: CALL_OW 74
54239: PPUSH
54240: CALL_OW 115
// wait ( 0 0$20 ) ;
54244: LD_INT 700
54246: PPUSH
54247: CALL_OW 67
// SetSide ( un , your_side ) ;
54251: LD_VAR 0 1
54255: PPUSH
54256: LD_OWVAR 2
54260: PPUSH
54261: CALL_OW 235
// end ;
54265: PPOPN 2
54267: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54268: LD_EXP 27
54272: PUSH
54273: LD_EXP 60
54277: AND
54278: IFFALSE 54384
54280: GO 54282
54282: DISABLE
54283: LD_INT 0
54285: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54286: LD_ADDR_VAR 0 1
54290: PUSH
54291: LD_INT 22
54293: PUSH
54294: LD_OWVAR 2
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: LD_INT 30
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 30
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: LIST
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PPUSH
54335: CALL_OW 69
54339: ST_TO_ADDR
// if not depot then
54340: LD_VAR 0 1
54344: NOT
54345: IFFALSE 54349
// exit ;
54347: GO 54384
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54349: LD_VAR 0 1
54353: PUSH
54354: LD_INT 1
54356: ARRAY
54357: PPUSH
54358: CALL_OW 250
54362: PPUSH
54363: LD_VAR 0 1
54367: PUSH
54368: LD_INT 1
54370: ARRAY
54371: PPUSH
54372: CALL_OW 251
54376: PPUSH
54377: LD_INT 70
54379: PPUSH
54380: CALL_OW 495
// end ;
54384: PPOPN 1
54386: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54387: LD_EXP 27
54391: PUSH
54392: LD_EXP 61
54396: AND
54397: IFFALSE 54608
54399: GO 54401
54401: DISABLE
54402: LD_INT 0
54404: PPUSH
54405: PPUSH
54406: PPUSH
54407: PPUSH
54408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54409: LD_ADDR_VAR 0 5
54413: PUSH
54414: LD_INT 22
54416: PUSH
54417: LD_OWVAR 2
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 21
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PPUSH
54440: CALL_OW 69
54444: ST_TO_ADDR
// if not tmp then
54445: LD_VAR 0 5
54449: NOT
54450: IFFALSE 54454
// exit ;
54452: GO 54608
// for i in tmp do
54454: LD_ADDR_VAR 0 1
54458: PUSH
54459: LD_VAR 0 5
54463: PUSH
54464: FOR_IN
54465: IFFALSE 54606
// begin d := rand ( 0 , 5 ) ;
54467: LD_ADDR_VAR 0 4
54471: PUSH
54472: LD_INT 0
54474: PPUSH
54475: LD_INT 5
54477: PPUSH
54478: CALL_OW 12
54482: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54483: LD_ADDR_VAR 0 2
54487: PUSH
54488: LD_VAR 0 1
54492: PPUSH
54493: CALL_OW 250
54497: PPUSH
54498: LD_VAR 0 4
54502: PPUSH
54503: LD_INT 3
54505: PPUSH
54506: LD_INT 12
54508: PPUSH
54509: CALL_OW 12
54513: PPUSH
54514: CALL_OW 272
54518: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54519: LD_ADDR_VAR 0 3
54523: PUSH
54524: LD_VAR 0 1
54528: PPUSH
54529: CALL_OW 251
54533: PPUSH
54534: LD_VAR 0 4
54538: PPUSH
54539: LD_INT 3
54541: PPUSH
54542: LD_INT 12
54544: PPUSH
54545: CALL_OW 12
54549: PPUSH
54550: CALL_OW 273
54554: ST_TO_ADDR
// if ValidHex ( x , y ) then
54555: LD_VAR 0 2
54559: PPUSH
54560: LD_VAR 0 3
54564: PPUSH
54565: CALL_OW 488
54569: IFFALSE 54604
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54571: LD_VAR 0 1
54575: PPUSH
54576: LD_VAR 0 2
54580: PPUSH
54581: LD_VAR 0 3
54585: PPUSH
54586: LD_INT 3
54588: PPUSH
54589: LD_INT 6
54591: PPUSH
54592: CALL_OW 12
54596: PPUSH
54597: LD_INT 1
54599: PPUSH
54600: CALL_OW 483
// end ;
54604: GO 54464
54606: POP
54607: POP
// end ;
54608: PPOPN 5
54610: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
54611: LD_EXP 27
54615: PUSH
54616: LD_EXP 62
54620: AND
54621: IFFALSE 54715
54623: GO 54625
54625: DISABLE
54626: LD_INT 0
54628: PPUSH
54629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
54630: LD_ADDR_VAR 0 2
54634: PUSH
54635: LD_INT 22
54637: PUSH
54638: LD_OWVAR 2
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 32
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 21
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: LIST
54671: PPUSH
54672: CALL_OW 69
54676: ST_TO_ADDR
// if not tmp then
54677: LD_VAR 0 2
54681: NOT
54682: IFFALSE 54686
// exit ;
54684: GO 54715
// for i in tmp do
54686: LD_ADDR_VAR 0 1
54690: PUSH
54691: LD_VAR 0 2
54695: PUSH
54696: FOR_IN
54697: IFFALSE 54713
// SetFuel ( i , 0 ) ;
54699: LD_VAR 0 1
54703: PPUSH
54704: LD_INT 0
54706: PPUSH
54707: CALL_OW 240
54711: GO 54696
54713: POP
54714: POP
// end ;
54715: PPOPN 2
54717: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
54718: LD_EXP 27
54722: PUSH
54723: LD_EXP 63
54727: AND
54728: IFFALSE 54794
54730: GO 54732
54732: DISABLE
54733: LD_INT 0
54735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
54736: LD_ADDR_VAR 0 1
54740: PUSH
54741: LD_INT 22
54743: PUSH
54744: LD_OWVAR 2
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 30
54755: PUSH
54756: LD_INT 29
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PPUSH
54767: CALL_OW 69
54771: ST_TO_ADDR
// if not tmp then
54772: LD_VAR 0 1
54776: NOT
54777: IFFALSE 54781
// exit ;
54779: GO 54794
// DestroyUnit ( tmp [ 1 ] ) ;
54781: LD_VAR 0 1
54785: PUSH
54786: LD_INT 1
54788: ARRAY
54789: PPUSH
54790: CALL_OW 65
// end ;
54794: PPOPN 1
54796: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
54797: LD_EXP 27
54801: PUSH
54802: LD_EXP 65
54806: AND
54807: IFFALSE 54936
54809: GO 54811
54811: DISABLE
54812: LD_INT 0
54814: PPUSH
// begin uc_side := 0 ;
54815: LD_ADDR_OWVAR 20
54819: PUSH
54820: LD_INT 0
54822: ST_TO_ADDR
// uc_nation := nation_arabian ;
54823: LD_ADDR_OWVAR 21
54827: PUSH
54828: LD_INT 2
54830: ST_TO_ADDR
// hc_gallery :=  ;
54831: LD_ADDR_OWVAR 33
54835: PUSH
54836: LD_STRING 
54838: ST_TO_ADDR
// hc_name :=  ;
54839: LD_ADDR_OWVAR 26
54843: PUSH
54844: LD_STRING 
54846: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
54847: LD_INT 1
54849: PPUSH
54850: LD_INT 11
54852: PPUSH
54853: LD_INT 10
54855: PPUSH
54856: CALL_OW 380
// un := CreateHuman ;
54860: LD_ADDR_VAR 0 1
54864: PUSH
54865: CALL_OW 44
54869: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54870: LD_VAR 0 1
54874: PPUSH
54875: LD_INT 1
54877: PPUSH
54878: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54882: LD_INT 35
54884: PPUSH
54885: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54889: LD_VAR 0 1
54893: PPUSH
54894: LD_INT 22
54896: PUSH
54897: LD_OWVAR 2
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PPUSH
54906: CALL_OW 69
54910: PPUSH
54911: LD_VAR 0 1
54915: PPUSH
54916: CALL_OW 74
54920: PPUSH
54921: CALL_OW 115
// until IsDead ( un ) ;
54925: LD_VAR 0 1
54929: PPUSH
54930: CALL_OW 301
54934: IFFALSE 54882
// end ;
54936: PPOPN 1
54938: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
54939: LD_EXP 27
54943: PUSH
54944: LD_EXP 67
54948: AND
54949: IFFALSE 54961
54951: GO 54953
54953: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
54954: LD_STRING earthquake(getX(game), 0, 32)
54956: PPUSH
54957: CALL_OW 559
54961: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
54962: LD_EXP 27
54966: PUSH
54967: LD_EXP 68
54971: AND
54972: IFFALSE 55063
54974: GO 54976
54976: DISABLE
54977: LD_INT 0
54979: PPUSH
// begin enable ;
54980: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
54981: LD_ADDR_VAR 0 1
54985: PUSH
54986: LD_INT 22
54988: PUSH
54989: LD_OWVAR 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 21
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 33
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: PPUSH
55023: CALL_OW 69
55027: ST_TO_ADDR
// if not tmp then
55028: LD_VAR 0 1
55032: NOT
55033: IFFALSE 55037
// exit ;
55035: GO 55063
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55037: LD_VAR 0 1
55041: PUSH
55042: LD_INT 1
55044: PPUSH
55045: LD_VAR 0 1
55049: PPUSH
55050: CALL_OW 12
55054: ARRAY
55055: PPUSH
55056: LD_INT 1
55058: PPUSH
55059: CALL_OW 234
// end ;
55063: PPOPN 1
55065: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55066: LD_EXP 27
55070: PUSH
55071: LD_EXP 69
55075: AND
55076: IFFALSE 55217
55078: GO 55080
55080: DISABLE
55081: LD_INT 0
55083: PPUSH
55084: PPUSH
55085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55086: LD_ADDR_VAR 0 3
55090: PUSH
55091: LD_INT 22
55093: PUSH
55094: LD_OWVAR 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 25
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PPUSH
55117: CALL_OW 69
55121: ST_TO_ADDR
// if not tmp then
55122: LD_VAR 0 3
55126: NOT
55127: IFFALSE 55131
// exit ;
55129: GO 55217
// un := tmp [ rand ( 1 , tmp ) ] ;
55131: LD_ADDR_VAR 0 2
55135: PUSH
55136: LD_VAR 0 3
55140: PUSH
55141: LD_INT 1
55143: PPUSH
55144: LD_VAR 0 3
55148: PPUSH
55149: CALL_OW 12
55153: ARRAY
55154: ST_TO_ADDR
// if Crawls ( un ) then
55155: LD_VAR 0 2
55159: PPUSH
55160: CALL_OW 318
55164: IFFALSE 55175
// ComWalk ( un ) ;
55166: LD_VAR 0 2
55170: PPUSH
55171: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55175: LD_VAR 0 2
55179: PPUSH
55180: LD_INT 9
55182: PPUSH
55183: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55187: LD_INT 28
55189: PPUSH
55190: LD_OWVAR 2
55194: PPUSH
55195: LD_INT 2
55197: PPUSH
55198: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55202: LD_INT 29
55204: PPUSH
55205: LD_OWVAR 2
55209: PPUSH
55210: LD_INT 2
55212: PPUSH
55213: CALL_OW 322
// end ;
55217: PPOPN 3
55219: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55220: LD_EXP 27
55224: PUSH
55225: LD_EXP 70
55229: AND
55230: IFFALSE 55341
55232: GO 55234
55234: DISABLE
55235: LD_INT 0
55237: PPUSH
55238: PPUSH
55239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55240: LD_ADDR_VAR 0 3
55244: PUSH
55245: LD_INT 22
55247: PUSH
55248: LD_OWVAR 2
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 25
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PPUSH
55271: CALL_OW 69
55275: ST_TO_ADDR
// if not tmp then
55276: LD_VAR 0 3
55280: NOT
55281: IFFALSE 55285
// exit ;
55283: GO 55341
// un := tmp [ rand ( 1 , tmp ) ] ;
55285: LD_ADDR_VAR 0 2
55289: PUSH
55290: LD_VAR 0 3
55294: PUSH
55295: LD_INT 1
55297: PPUSH
55298: LD_VAR 0 3
55302: PPUSH
55303: CALL_OW 12
55307: ARRAY
55308: ST_TO_ADDR
// if Crawls ( un ) then
55309: LD_VAR 0 2
55313: PPUSH
55314: CALL_OW 318
55318: IFFALSE 55329
// ComWalk ( un ) ;
55320: LD_VAR 0 2
55324: PPUSH
55325: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55329: LD_VAR 0 2
55333: PPUSH
55334: LD_INT 8
55336: PPUSH
55337: CALL_OW 336
// end ;
55341: PPOPN 3
55343: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55344: LD_EXP 27
55348: PUSH
55349: LD_EXP 71
55353: AND
55354: IFFALSE 55498
55356: GO 55358
55358: DISABLE
55359: LD_INT 0
55361: PPUSH
55362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55363: LD_ADDR_VAR 0 2
55367: PUSH
55368: LD_INT 22
55370: PUSH
55371: LD_OWVAR 2
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 21
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: LD_INT 34
55395: PUSH
55396: LD_INT 12
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 34
55405: PUSH
55406: LD_INT 51
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 34
55415: PUSH
55416: LD_INT 32
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: PPUSH
55434: CALL_OW 69
55438: ST_TO_ADDR
// if not tmp then
55439: LD_VAR 0 2
55443: NOT
55444: IFFALSE 55448
// exit ;
55446: GO 55498
// for i in tmp do
55448: LD_ADDR_VAR 0 1
55452: PUSH
55453: LD_VAR 0 2
55457: PUSH
55458: FOR_IN
55459: IFFALSE 55496
// if GetCargo ( i , mat_artifact ) = 0 then
55461: LD_VAR 0 1
55465: PPUSH
55466: LD_INT 4
55468: PPUSH
55469: CALL_OW 289
55473: PUSH
55474: LD_INT 0
55476: EQUAL
55477: IFFALSE 55494
// SetCargo ( i , mat_siberit , 100 ) ;
55479: LD_VAR 0 1
55483: PPUSH
55484: LD_INT 3
55486: PPUSH
55487: LD_INT 100
55489: PPUSH
55490: CALL_OW 290
55494: GO 55458
55496: POP
55497: POP
// end ;
55498: PPOPN 2
55500: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55501: LD_EXP 27
55505: PUSH
55506: LD_EXP 72
55510: AND
55511: IFFALSE 55694
55513: GO 55515
55515: DISABLE
55516: LD_INT 0
55518: PPUSH
55519: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55520: LD_ADDR_VAR 0 2
55524: PUSH
55525: LD_INT 22
55527: PUSH
55528: LD_OWVAR 2
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PPUSH
55537: CALL_OW 69
55541: ST_TO_ADDR
// if not tmp then
55542: LD_VAR 0 2
55546: NOT
55547: IFFALSE 55551
// exit ;
55549: GO 55694
// for i := 1 to 2 do
55551: LD_ADDR_VAR 0 1
55555: PUSH
55556: DOUBLE
55557: LD_INT 1
55559: DEC
55560: ST_TO_ADDR
55561: LD_INT 2
55563: PUSH
55564: FOR_TO
55565: IFFALSE 55692
// begin uc_side := your_side ;
55567: LD_ADDR_OWVAR 20
55571: PUSH
55572: LD_OWVAR 2
55576: ST_TO_ADDR
// uc_nation := nation_american ;
55577: LD_ADDR_OWVAR 21
55581: PUSH
55582: LD_INT 1
55584: ST_TO_ADDR
// vc_chassis := us_morphling ;
55585: LD_ADDR_OWVAR 37
55589: PUSH
55590: LD_INT 5
55592: ST_TO_ADDR
// vc_engine := engine_siberite ;
55593: LD_ADDR_OWVAR 39
55597: PUSH
55598: LD_INT 3
55600: ST_TO_ADDR
// vc_control := control_computer ;
55601: LD_ADDR_OWVAR 38
55605: PUSH
55606: LD_INT 3
55608: ST_TO_ADDR
// vc_weapon := us_double_laser ;
55609: LD_ADDR_OWVAR 40
55613: PUSH
55614: LD_INT 10
55616: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
55617: LD_VAR 0 2
55621: PUSH
55622: LD_INT 1
55624: ARRAY
55625: PPUSH
55626: CALL_OW 310
55630: NOT
55631: IFFALSE 55678
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
55633: CALL_OW 45
55637: PPUSH
55638: LD_VAR 0 2
55642: PUSH
55643: LD_INT 1
55645: ARRAY
55646: PPUSH
55647: CALL_OW 250
55651: PPUSH
55652: LD_VAR 0 2
55656: PUSH
55657: LD_INT 1
55659: ARRAY
55660: PPUSH
55661: CALL_OW 251
55665: PPUSH
55666: LD_INT 12
55668: PPUSH
55669: LD_INT 1
55671: PPUSH
55672: CALL_OW 50
55676: GO 55690
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
55678: CALL_OW 45
55682: PPUSH
55683: LD_INT 1
55685: PPUSH
55686: CALL_OW 51
// end ;
55690: GO 55564
55692: POP
55693: POP
// end ;
55694: PPOPN 2
55696: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
55697: LD_EXP 27
55701: PUSH
55702: LD_EXP 73
55706: AND
55707: IFFALSE 55929
55709: GO 55711
55711: DISABLE
55712: LD_INT 0
55714: PPUSH
55715: PPUSH
55716: PPUSH
55717: PPUSH
55718: PPUSH
55719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55720: LD_ADDR_VAR 0 6
55724: PUSH
55725: LD_INT 22
55727: PUSH
55728: LD_OWVAR 2
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 21
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: LD_INT 23
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: LIST
55768: PPUSH
55769: CALL_OW 69
55773: ST_TO_ADDR
// if not tmp then
55774: LD_VAR 0 6
55778: NOT
55779: IFFALSE 55783
// exit ;
55781: GO 55929
// s1 := rand ( 1 , 4 ) ;
55783: LD_ADDR_VAR 0 2
55787: PUSH
55788: LD_INT 1
55790: PPUSH
55791: LD_INT 4
55793: PPUSH
55794: CALL_OW 12
55798: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
55799: LD_ADDR_VAR 0 4
55803: PUSH
55804: LD_VAR 0 6
55808: PUSH
55809: LD_INT 1
55811: ARRAY
55812: PPUSH
55813: LD_VAR 0 2
55817: PPUSH
55818: CALL_OW 259
55822: ST_TO_ADDR
// if s1 = 1 then
55823: LD_VAR 0 2
55827: PUSH
55828: LD_INT 1
55830: EQUAL
55831: IFFALSE 55851
// s2 := rand ( 2 , 4 ) else
55833: LD_ADDR_VAR 0 3
55837: PUSH
55838: LD_INT 2
55840: PPUSH
55841: LD_INT 4
55843: PPUSH
55844: CALL_OW 12
55848: ST_TO_ADDR
55849: GO 55859
// s2 := 1 ;
55851: LD_ADDR_VAR 0 3
55855: PUSH
55856: LD_INT 1
55858: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
55859: LD_ADDR_VAR 0 5
55863: PUSH
55864: LD_VAR 0 6
55868: PUSH
55869: LD_INT 1
55871: ARRAY
55872: PPUSH
55873: LD_VAR 0 3
55877: PPUSH
55878: CALL_OW 259
55882: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
55883: LD_VAR 0 6
55887: PUSH
55888: LD_INT 1
55890: ARRAY
55891: PPUSH
55892: LD_VAR 0 2
55896: PPUSH
55897: LD_VAR 0 5
55901: PPUSH
55902: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
55906: LD_VAR 0 6
55910: PUSH
55911: LD_INT 1
55913: ARRAY
55914: PPUSH
55915: LD_VAR 0 3
55919: PPUSH
55920: LD_VAR 0 4
55924: PPUSH
55925: CALL_OW 237
// end ;
55929: PPOPN 6
55931: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
55932: LD_EXP 27
55936: PUSH
55937: LD_EXP 74
55941: AND
55942: IFFALSE 56021
55944: GO 55946
55946: DISABLE
55947: LD_INT 0
55949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
55950: LD_ADDR_VAR 0 1
55954: PUSH
55955: LD_INT 22
55957: PUSH
55958: LD_OWVAR 2
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 30
55969: PUSH
55970: LD_INT 3
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PPUSH
55981: CALL_OW 69
55985: ST_TO_ADDR
// if not tmp then
55986: LD_VAR 0 1
55990: NOT
55991: IFFALSE 55995
// exit ;
55993: GO 56021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55995: LD_VAR 0 1
55999: PUSH
56000: LD_INT 1
56002: PPUSH
56003: LD_VAR 0 1
56007: PPUSH
56008: CALL_OW 12
56012: ARRAY
56013: PPUSH
56014: LD_INT 1
56016: PPUSH
56017: CALL_OW 234
// end ;
56021: PPOPN 1
56023: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56024: LD_EXP 27
56028: PUSH
56029: LD_EXP 75
56033: AND
56034: IFFALSE 56146
56036: GO 56038
56038: DISABLE
56039: LD_INT 0
56041: PPUSH
56042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56043: LD_ADDR_VAR 0 2
56047: PUSH
56048: LD_INT 22
56050: PUSH
56051: LD_OWVAR 2
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: LD_INT 30
56065: PUSH
56066: LD_INT 27
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 30
56075: PUSH
56076: LD_INT 26
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 30
56085: PUSH
56086: LD_INT 28
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PPUSH
56103: CALL_OW 69
56107: ST_TO_ADDR
// if not tmp then
56108: LD_VAR 0 2
56112: NOT
56113: IFFALSE 56117
// exit ;
56115: GO 56146
// for i in tmp do
56117: LD_ADDR_VAR 0 1
56121: PUSH
56122: LD_VAR 0 2
56126: PUSH
56127: FOR_IN
56128: IFFALSE 56144
// SetLives ( i , 1 ) ;
56130: LD_VAR 0 1
56134: PPUSH
56135: LD_INT 1
56137: PPUSH
56138: CALL_OW 234
56142: GO 56127
56144: POP
56145: POP
// end ;
56146: PPOPN 2
56148: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56149: LD_EXP 27
56153: PUSH
56154: LD_EXP 76
56158: AND
56159: IFFALSE 56446
56161: GO 56163
56163: DISABLE
56164: LD_INT 0
56166: PPUSH
56167: PPUSH
56168: PPUSH
// begin i := rand ( 1 , 7 ) ;
56169: LD_ADDR_VAR 0 1
56173: PUSH
56174: LD_INT 1
56176: PPUSH
56177: LD_INT 7
56179: PPUSH
56180: CALL_OW 12
56184: ST_TO_ADDR
// case i of 1 :
56185: LD_VAR 0 1
56189: PUSH
56190: LD_INT 1
56192: DOUBLE
56193: EQUAL
56194: IFTRUE 56198
56196: GO 56208
56198: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56199: LD_STRING earthquake(getX(game), 0, 32)
56201: PPUSH
56202: CALL_OW 559
56206: GO 56446
56208: LD_INT 2
56210: DOUBLE
56211: EQUAL
56212: IFTRUE 56216
56214: GO 56230
56216: POP
// begin ToLua ( displayStucuk(); ) ;
56217: LD_STRING displayStucuk();
56219: PPUSH
56220: CALL_OW 559
// ResetFog ;
56224: CALL_OW 335
// end ; 3 :
56228: GO 56446
56230: LD_INT 3
56232: DOUBLE
56233: EQUAL
56234: IFTRUE 56238
56236: GO 56342
56238: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56239: LD_ADDR_VAR 0 2
56243: PUSH
56244: LD_INT 22
56246: PUSH
56247: LD_OWVAR 2
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 25
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PPUSH
56270: CALL_OW 69
56274: ST_TO_ADDR
// if not tmp then
56275: LD_VAR 0 2
56279: NOT
56280: IFFALSE 56284
// exit ;
56282: GO 56446
// un := tmp [ rand ( 1 , tmp ) ] ;
56284: LD_ADDR_VAR 0 3
56288: PUSH
56289: LD_VAR 0 2
56293: PUSH
56294: LD_INT 1
56296: PPUSH
56297: LD_VAR 0 2
56301: PPUSH
56302: CALL_OW 12
56306: ARRAY
56307: ST_TO_ADDR
// if Crawls ( un ) then
56308: LD_VAR 0 3
56312: PPUSH
56313: CALL_OW 318
56317: IFFALSE 56328
// ComWalk ( un ) ;
56319: LD_VAR 0 3
56323: PPUSH
56324: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56328: LD_VAR 0 3
56332: PPUSH
56333: LD_INT 8
56335: PPUSH
56336: CALL_OW 336
// end ; 4 :
56340: GO 56446
56342: LD_INT 4
56344: DOUBLE
56345: EQUAL
56346: IFTRUE 56350
56348: GO 56424
56350: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56351: LD_ADDR_VAR 0 2
56355: PUSH
56356: LD_INT 22
56358: PUSH
56359: LD_OWVAR 2
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 30
56370: PUSH
56371: LD_INT 29
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PPUSH
56382: CALL_OW 69
56386: ST_TO_ADDR
// if not tmp then
56387: LD_VAR 0 2
56391: NOT
56392: IFFALSE 56396
// exit ;
56394: GO 56446
// CenterNowOnUnits ( tmp [ 1 ] ) ;
56396: LD_VAR 0 2
56400: PUSH
56401: LD_INT 1
56403: ARRAY
56404: PPUSH
56405: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
56409: LD_VAR 0 2
56413: PUSH
56414: LD_INT 1
56416: ARRAY
56417: PPUSH
56418: CALL_OW 65
// end ; 5 .. 7 :
56422: GO 56446
56424: LD_INT 5
56426: DOUBLE
56427: GREATEREQUAL
56428: IFFALSE 56436
56430: LD_INT 7
56432: DOUBLE
56433: LESSEQUAL
56434: IFTRUE 56438
56436: GO 56445
56438: POP
// StreamSibBomb ; end ;
56439: CALL 52683 0 0
56443: GO 56446
56445: POP
// end ;
56446: PPOPN 3
56448: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56449: LD_EXP 27
56453: PUSH
56454: LD_EXP 77
56458: AND
56459: IFFALSE 56615
56461: GO 56463
56463: DISABLE
56464: LD_INT 0
56466: PPUSH
56467: PPUSH
56468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56469: LD_ADDR_VAR 0 2
56473: PUSH
56474: LD_INT 81
56476: PUSH
56477: LD_OWVAR 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: LD_INT 21
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 21
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: LIST
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PPUSH
56518: CALL_OW 69
56522: ST_TO_ADDR
// if not tmp then
56523: LD_VAR 0 2
56527: NOT
56528: IFFALSE 56532
// exit ;
56530: GO 56615
// p := 0 ;
56532: LD_ADDR_VAR 0 3
56536: PUSH
56537: LD_INT 0
56539: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56540: LD_INT 35
56542: PPUSH
56543: CALL_OW 67
// p := p + 1 ;
56547: LD_ADDR_VAR 0 3
56551: PUSH
56552: LD_VAR 0 3
56556: PUSH
56557: LD_INT 1
56559: PLUS
56560: ST_TO_ADDR
// for i in tmp do
56561: LD_ADDR_VAR 0 1
56565: PUSH
56566: LD_VAR 0 2
56570: PUSH
56571: FOR_IN
56572: IFFALSE 56603
// if GetLives ( i ) < 1000 then
56574: LD_VAR 0 1
56578: PPUSH
56579: CALL_OW 256
56583: PUSH
56584: LD_INT 1000
56586: LESS
56587: IFFALSE 56601
// SetLives ( i , 1000 ) ;
56589: LD_VAR 0 1
56593: PPUSH
56594: LD_INT 1000
56596: PPUSH
56597: CALL_OW 234
56601: GO 56571
56603: POP
56604: POP
// until p > 20 ;
56605: LD_VAR 0 3
56609: PUSH
56610: LD_INT 20
56612: GREATER
56613: IFFALSE 56540
// end ;
56615: PPOPN 3
56617: END
// every 0 0$1 trigger StreamModeActive and sTime do
56618: LD_EXP 27
56622: PUSH
56623: LD_EXP 78
56627: AND
56628: IFFALSE 56663
56630: GO 56632
56632: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
56633: LD_INT 28
56635: PPUSH
56636: LD_OWVAR 2
56640: PPUSH
56641: LD_INT 2
56643: PPUSH
56644: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
56648: LD_INT 30
56650: PPUSH
56651: LD_OWVAR 2
56655: PPUSH
56656: LD_INT 2
56658: PPUSH
56659: CALL_OW 322
// end ;
56663: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
56664: LD_EXP 27
56668: PUSH
56669: LD_EXP 79
56673: AND
56674: IFFALSE 56795
56676: GO 56678
56678: DISABLE
56679: LD_INT 0
56681: PPUSH
56682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56683: LD_ADDR_VAR 0 2
56687: PUSH
56688: LD_INT 22
56690: PUSH
56691: LD_OWVAR 2
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 21
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 3
56712: PUSH
56713: LD_INT 23
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: LIST
56731: PPUSH
56732: CALL_OW 69
56736: ST_TO_ADDR
// if not tmp then
56737: LD_VAR 0 2
56741: NOT
56742: IFFALSE 56746
// exit ;
56744: GO 56795
// for i in tmp do
56746: LD_ADDR_VAR 0 1
56750: PUSH
56751: LD_VAR 0 2
56755: PUSH
56756: FOR_IN
56757: IFFALSE 56793
// begin if Crawls ( i ) then
56759: LD_VAR 0 1
56763: PPUSH
56764: CALL_OW 318
56768: IFFALSE 56779
// ComWalk ( i ) ;
56770: LD_VAR 0 1
56774: PPUSH
56775: CALL_OW 138
// SetClass ( i , 2 ) ;
56779: LD_VAR 0 1
56783: PPUSH
56784: LD_INT 2
56786: PPUSH
56787: CALL_OW 336
// end ;
56791: GO 56756
56793: POP
56794: POP
// end ;
56795: PPOPN 2
56797: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
56798: LD_EXP 27
56802: PUSH
56803: LD_EXP 80
56807: AND
56808: IFFALSE 57096
56810: GO 56812
56812: DISABLE
56813: LD_INT 0
56815: PPUSH
56816: PPUSH
56817: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
56818: LD_OWVAR 2
56822: PPUSH
56823: LD_INT 9
56825: PPUSH
56826: LD_INT 1
56828: PPUSH
56829: LD_INT 1
56831: PPUSH
56832: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
56836: LD_INT 9
56838: PPUSH
56839: LD_OWVAR 2
56843: PPUSH
56844: CALL_OW 343
// uc_side := 9 ;
56848: LD_ADDR_OWVAR 20
56852: PUSH
56853: LD_INT 9
56855: ST_TO_ADDR
// uc_nation := 2 ;
56856: LD_ADDR_OWVAR 21
56860: PUSH
56861: LD_INT 2
56863: ST_TO_ADDR
// hc_name := Dark Warrior ;
56864: LD_ADDR_OWVAR 26
56868: PUSH
56869: LD_STRING Dark Warrior
56871: ST_TO_ADDR
// hc_gallery :=  ;
56872: LD_ADDR_OWVAR 33
56876: PUSH
56877: LD_STRING 
56879: ST_TO_ADDR
// hc_noskilllimit := true ;
56880: LD_ADDR_OWVAR 76
56884: PUSH
56885: LD_INT 1
56887: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
56888: LD_ADDR_OWVAR 31
56892: PUSH
56893: LD_INT 30
56895: PUSH
56896: LD_INT 30
56898: PUSH
56899: LD_INT 30
56901: PUSH
56902: LD_INT 30
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: ST_TO_ADDR
// un := CreateHuman ;
56911: LD_ADDR_VAR 0 3
56915: PUSH
56916: CALL_OW 44
56920: ST_TO_ADDR
// hc_noskilllimit := false ;
56921: LD_ADDR_OWVAR 76
56925: PUSH
56926: LD_INT 0
56928: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56929: LD_VAR 0 3
56933: PPUSH
56934: LD_INT 1
56936: PPUSH
56937: CALL_OW 51
// ToLua ( playRanger() ) ;
56941: LD_STRING playRanger()
56943: PPUSH
56944: CALL_OW 559
// p := 0 ;
56948: LD_ADDR_VAR 0 2
56952: PUSH
56953: LD_INT 0
56955: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56956: LD_INT 35
56958: PPUSH
56959: CALL_OW 67
// p := p + 1 ;
56963: LD_ADDR_VAR 0 2
56967: PUSH
56968: LD_VAR 0 2
56972: PUSH
56973: LD_INT 1
56975: PLUS
56976: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
56977: LD_VAR 0 3
56981: PPUSH
56982: CALL_OW 256
56986: PUSH
56987: LD_INT 1000
56989: LESS
56990: IFFALSE 57004
// SetLives ( un , 1000 ) ;
56992: LD_VAR 0 3
56996: PPUSH
56997: LD_INT 1000
56999: PPUSH
57000: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57004: LD_VAR 0 3
57008: PPUSH
57009: LD_INT 81
57011: PUSH
57012: LD_OWVAR 2
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 91
57023: PUSH
57024: LD_VAR 0 3
57028: PUSH
57029: LD_INT 30
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PPUSH
57041: CALL_OW 69
57045: PPUSH
57046: LD_VAR 0 3
57050: PPUSH
57051: CALL_OW 74
57055: PPUSH
57056: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
57060: LD_VAR 0 2
57064: PUSH
57065: LD_INT 80
57067: GREATER
57068: PUSH
57069: LD_VAR 0 3
57073: PPUSH
57074: CALL_OW 301
57078: OR
57079: IFFALSE 56956
// if un then
57081: LD_VAR 0 3
57085: IFFALSE 57096
// RemoveUnit ( un ) ;
57087: LD_VAR 0 3
57091: PPUSH
57092: CALL_OW 64
// end ;
57096: PPOPN 3
57098: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
57099: LD_EXP 81
57103: IFFALSE 57219
57105: GO 57107
57107: DISABLE
57108: LD_INT 0
57110: PPUSH
57111: PPUSH
57112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57113: LD_ADDR_VAR 0 2
57117: PUSH
57118: LD_INT 81
57120: PUSH
57121: LD_OWVAR 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 21
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PPUSH
57144: CALL_OW 69
57148: ST_TO_ADDR
// ToLua ( playComputer() ) ;
57149: LD_STRING playComputer()
57151: PPUSH
57152: CALL_OW 559
// if not tmp then
57156: LD_VAR 0 2
57160: NOT
57161: IFFALSE 57165
// exit ;
57163: GO 57219
// for i in tmp do
57165: LD_ADDR_VAR 0 1
57169: PUSH
57170: LD_VAR 0 2
57174: PUSH
57175: FOR_IN
57176: IFFALSE 57217
// for j := 1 to 4 do
57178: LD_ADDR_VAR 0 3
57182: PUSH
57183: DOUBLE
57184: LD_INT 1
57186: DEC
57187: ST_TO_ADDR
57188: LD_INT 4
57190: PUSH
57191: FOR_TO
57192: IFFALSE 57213
// SetSkill ( i , j , 10 ) ;
57194: LD_VAR 0 1
57198: PPUSH
57199: LD_VAR 0 3
57203: PPUSH
57204: LD_INT 10
57206: PPUSH
57207: CALL_OW 237
57211: GO 57191
57213: POP
57214: POP
57215: GO 57175
57217: POP
57218: POP
// end ;
57219: PPOPN 3
57221: END
// every 0 0$1 trigger s30 do var i , tmp ;
57222: LD_EXP 82
57226: IFFALSE 57295
57228: GO 57230
57230: DISABLE
57231: LD_INT 0
57233: PPUSH
57234: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57235: LD_ADDR_VAR 0 2
57239: PUSH
57240: LD_INT 22
57242: PUSH
57243: LD_OWVAR 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PPUSH
57252: CALL_OW 69
57256: ST_TO_ADDR
// if not tmp then
57257: LD_VAR 0 2
57261: NOT
57262: IFFALSE 57266
// exit ;
57264: GO 57295
// for i in tmp do
57266: LD_ADDR_VAR 0 1
57270: PUSH
57271: LD_VAR 0 2
57275: PUSH
57276: FOR_IN
57277: IFFALSE 57293
// SetLives ( i , 300 ) ;
57279: LD_VAR 0 1
57283: PPUSH
57284: LD_INT 300
57286: PPUSH
57287: CALL_OW 234
57291: GO 57276
57293: POP
57294: POP
// end ;
57295: PPOPN 2
57297: END
// every 0 0$1 trigger s60 do var i , tmp ;
57298: LD_EXP 83
57302: IFFALSE 57371
57304: GO 57306
57306: DISABLE
57307: LD_INT 0
57309: PPUSH
57310: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57311: LD_ADDR_VAR 0 2
57315: PUSH
57316: LD_INT 22
57318: PUSH
57319: LD_OWVAR 2
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PPUSH
57328: CALL_OW 69
57332: ST_TO_ADDR
// if not tmp then
57333: LD_VAR 0 2
57337: NOT
57338: IFFALSE 57342
// exit ;
57340: GO 57371
// for i in tmp do
57342: LD_ADDR_VAR 0 1
57346: PUSH
57347: LD_VAR 0 2
57351: PUSH
57352: FOR_IN
57353: IFFALSE 57369
// SetLives ( i , 600 ) ;
57355: LD_VAR 0 1
57359: PPUSH
57360: LD_INT 600
57362: PPUSH
57363: CALL_OW 234
57367: GO 57352
57369: POP
57370: POP
// end ;
57371: PPOPN 2
57373: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57374: LD_INT 0
57376: PPUSH
// case cmd of 301 :
57377: LD_VAR 0 1
57381: PUSH
57382: LD_INT 301
57384: DOUBLE
57385: EQUAL
57386: IFTRUE 57390
57388: GO 57422
57390: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57391: LD_VAR 0 6
57395: PPUSH
57396: LD_VAR 0 7
57400: PPUSH
57401: LD_VAR 0 8
57405: PPUSH
57406: LD_VAR 0 4
57410: PPUSH
57411: LD_VAR 0 5
57415: PPUSH
57416: CALL 58623 0 5
57420: GO 57543
57422: LD_INT 302
57424: DOUBLE
57425: EQUAL
57426: IFTRUE 57430
57428: GO 57467
57430: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57431: LD_VAR 0 6
57435: PPUSH
57436: LD_VAR 0 7
57440: PPUSH
57441: LD_VAR 0 8
57445: PPUSH
57446: LD_VAR 0 9
57450: PPUSH
57451: LD_VAR 0 4
57455: PPUSH
57456: LD_VAR 0 5
57460: PPUSH
57461: CALL 58714 0 6
57465: GO 57543
57467: LD_INT 303
57469: DOUBLE
57470: EQUAL
57471: IFTRUE 57475
57473: GO 57512
57475: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57476: LD_VAR 0 6
57480: PPUSH
57481: LD_VAR 0 7
57485: PPUSH
57486: LD_VAR 0 8
57490: PPUSH
57491: LD_VAR 0 9
57495: PPUSH
57496: LD_VAR 0 4
57500: PPUSH
57501: LD_VAR 0 5
57505: PPUSH
57506: CALL 57548 0 6
57510: GO 57543
57512: LD_INT 304
57514: DOUBLE
57515: EQUAL
57516: IFTRUE 57520
57518: GO 57542
57520: POP
// hHackTeleport ( unit , x , y ) ; end ;
57521: LD_VAR 0 2
57525: PPUSH
57526: LD_VAR 0 4
57530: PPUSH
57531: LD_VAR 0 5
57535: PPUSH
57536: CALL 59307 0 3
57540: GO 57543
57542: POP
// end ;
57543: LD_VAR 0 12
57547: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57548: LD_INT 0
57550: PPUSH
57551: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57552: LD_VAR 0 1
57556: PUSH
57557: LD_INT 1
57559: LESS
57560: PUSH
57561: LD_VAR 0 1
57565: PUSH
57566: LD_INT 3
57568: GREATER
57569: OR
57570: PUSH
57571: LD_VAR 0 5
57575: PPUSH
57576: LD_VAR 0 6
57580: PPUSH
57581: CALL_OW 428
57585: OR
57586: IFFALSE 57590
// exit ;
57588: GO 58310
// uc_side := your_side ;
57590: LD_ADDR_OWVAR 20
57594: PUSH
57595: LD_OWVAR 2
57599: ST_TO_ADDR
// uc_nation := nation ;
57600: LD_ADDR_OWVAR 21
57604: PUSH
57605: LD_VAR 0 1
57609: ST_TO_ADDR
// bc_level = 1 ;
57610: LD_ADDR_OWVAR 43
57614: PUSH
57615: LD_INT 1
57617: ST_TO_ADDR
// case btype of 1 :
57618: LD_VAR 0 2
57622: PUSH
57623: LD_INT 1
57625: DOUBLE
57626: EQUAL
57627: IFTRUE 57631
57629: GO 57642
57631: POP
// bc_type := b_depot ; 2 :
57632: LD_ADDR_OWVAR 42
57636: PUSH
57637: LD_INT 0
57639: ST_TO_ADDR
57640: GO 58254
57642: LD_INT 2
57644: DOUBLE
57645: EQUAL
57646: IFTRUE 57650
57648: GO 57661
57650: POP
// bc_type := b_warehouse ; 3 :
57651: LD_ADDR_OWVAR 42
57655: PUSH
57656: LD_INT 1
57658: ST_TO_ADDR
57659: GO 58254
57661: LD_INT 3
57663: DOUBLE
57664: EQUAL
57665: IFTRUE 57669
57667: GO 57680
57669: POP
// bc_type := b_lab ; 4 .. 9 :
57670: LD_ADDR_OWVAR 42
57674: PUSH
57675: LD_INT 6
57677: ST_TO_ADDR
57678: GO 58254
57680: LD_INT 4
57682: DOUBLE
57683: GREATEREQUAL
57684: IFFALSE 57692
57686: LD_INT 9
57688: DOUBLE
57689: LESSEQUAL
57690: IFTRUE 57694
57692: GO 57746
57694: POP
// begin bc_type := b_lab_half ;
57695: LD_ADDR_OWVAR 42
57699: PUSH
57700: LD_INT 7
57702: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
57703: LD_ADDR_OWVAR 44
57707: PUSH
57708: LD_INT 10
57710: PUSH
57711: LD_INT 11
57713: PUSH
57714: LD_INT 12
57716: PUSH
57717: LD_INT 15
57719: PUSH
57720: LD_INT 14
57722: PUSH
57723: LD_INT 13
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: PUSH
57734: LD_VAR 0 2
57738: PUSH
57739: LD_INT 3
57741: MINUS
57742: ARRAY
57743: ST_TO_ADDR
// end ; 10 .. 13 :
57744: GO 58254
57746: LD_INT 10
57748: DOUBLE
57749: GREATEREQUAL
57750: IFFALSE 57758
57752: LD_INT 13
57754: DOUBLE
57755: LESSEQUAL
57756: IFTRUE 57760
57758: GO 57837
57760: POP
// begin bc_type := b_lab_full ;
57761: LD_ADDR_OWVAR 42
57765: PUSH
57766: LD_INT 8
57768: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
57769: LD_ADDR_OWVAR 44
57773: PUSH
57774: LD_INT 10
57776: PUSH
57777: LD_INT 12
57779: PUSH
57780: LD_INT 14
57782: PUSH
57783: LD_INT 13
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: PUSH
57792: LD_VAR 0 2
57796: PUSH
57797: LD_INT 9
57799: MINUS
57800: ARRAY
57801: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
57802: LD_ADDR_OWVAR 45
57806: PUSH
57807: LD_INT 11
57809: PUSH
57810: LD_INT 15
57812: PUSH
57813: LD_INT 12
57815: PUSH
57816: LD_INT 15
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: PUSH
57825: LD_VAR 0 2
57829: PUSH
57830: LD_INT 9
57832: MINUS
57833: ARRAY
57834: ST_TO_ADDR
// end ; 14 :
57835: GO 58254
57837: LD_INT 14
57839: DOUBLE
57840: EQUAL
57841: IFTRUE 57845
57843: GO 57856
57845: POP
// bc_type := b_workshop ; 15 :
57846: LD_ADDR_OWVAR 42
57850: PUSH
57851: LD_INT 2
57853: ST_TO_ADDR
57854: GO 58254
57856: LD_INT 15
57858: DOUBLE
57859: EQUAL
57860: IFTRUE 57864
57862: GO 57875
57864: POP
// bc_type := b_factory ; 16 :
57865: LD_ADDR_OWVAR 42
57869: PUSH
57870: LD_INT 3
57872: ST_TO_ADDR
57873: GO 58254
57875: LD_INT 16
57877: DOUBLE
57878: EQUAL
57879: IFTRUE 57883
57881: GO 57894
57883: POP
// bc_type := b_ext_gun ; 17 :
57884: LD_ADDR_OWVAR 42
57888: PUSH
57889: LD_INT 17
57891: ST_TO_ADDR
57892: GO 58254
57894: LD_INT 17
57896: DOUBLE
57897: EQUAL
57898: IFTRUE 57902
57900: GO 57930
57902: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
57903: LD_ADDR_OWVAR 42
57907: PUSH
57908: LD_INT 19
57910: PUSH
57911: LD_INT 23
57913: PUSH
57914: LD_INT 19
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: PUSH
57922: LD_VAR 0 1
57926: ARRAY
57927: ST_TO_ADDR
57928: GO 58254
57930: LD_INT 18
57932: DOUBLE
57933: EQUAL
57934: IFTRUE 57938
57936: GO 57949
57938: POP
// bc_type := b_ext_radar ; 19 :
57939: LD_ADDR_OWVAR 42
57943: PUSH
57944: LD_INT 20
57946: ST_TO_ADDR
57947: GO 58254
57949: LD_INT 19
57951: DOUBLE
57952: EQUAL
57953: IFTRUE 57957
57955: GO 57968
57957: POP
// bc_type := b_ext_radio ; 20 :
57958: LD_ADDR_OWVAR 42
57962: PUSH
57963: LD_INT 22
57965: ST_TO_ADDR
57966: GO 58254
57968: LD_INT 20
57970: DOUBLE
57971: EQUAL
57972: IFTRUE 57976
57974: GO 57987
57976: POP
// bc_type := b_ext_siberium ; 21 :
57977: LD_ADDR_OWVAR 42
57981: PUSH
57982: LD_INT 21
57984: ST_TO_ADDR
57985: GO 58254
57987: LD_INT 21
57989: DOUBLE
57990: EQUAL
57991: IFTRUE 57995
57993: GO 58006
57995: POP
// bc_type := b_ext_computer ; 22 :
57996: LD_ADDR_OWVAR 42
58000: PUSH
58001: LD_INT 24
58003: ST_TO_ADDR
58004: GO 58254
58006: LD_INT 22
58008: DOUBLE
58009: EQUAL
58010: IFTRUE 58014
58012: GO 58025
58014: POP
// bc_type := b_ext_track ; 23 :
58015: LD_ADDR_OWVAR 42
58019: PUSH
58020: LD_INT 16
58022: ST_TO_ADDR
58023: GO 58254
58025: LD_INT 23
58027: DOUBLE
58028: EQUAL
58029: IFTRUE 58033
58031: GO 58044
58033: POP
// bc_type := b_ext_laser ; 24 :
58034: LD_ADDR_OWVAR 42
58038: PUSH
58039: LD_INT 25
58041: ST_TO_ADDR
58042: GO 58254
58044: LD_INT 24
58046: DOUBLE
58047: EQUAL
58048: IFTRUE 58052
58050: GO 58063
58052: POP
// bc_type := b_control_tower ; 25 :
58053: LD_ADDR_OWVAR 42
58057: PUSH
58058: LD_INT 36
58060: ST_TO_ADDR
58061: GO 58254
58063: LD_INT 25
58065: DOUBLE
58066: EQUAL
58067: IFTRUE 58071
58069: GO 58082
58071: POP
// bc_type := b_breastwork ; 26 :
58072: LD_ADDR_OWVAR 42
58076: PUSH
58077: LD_INT 31
58079: ST_TO_ADDR
58080: GO 58254
58082: LD_INT 26
58084: DOUBLE
58085: EQUAL
58086: IFTRUE 58090
58088: GO 58101
58090: POP
// bc_type := b_bunker ; 27 :
58091: LD_ADDR_OWVAR 42
58095: PUSH
58096: LD_INT 32
58098: ST_TO_ADDR
58099: GO 58254
58101: LD_INT 27
58103: DOUBLE
58104: EQUAL
58105: IFTRUE 58109
58107: GO 58120
58109: POP
// bc_type := b_turret ; 28 :
58110: LD_ADDR_OWVAR 42
58114: PUSH
58115: LD_INT 33
58117: ST_TO_ADDR
58118: GO 58254
58120: LD_INT 28
58122: DOUBLE
58123: EQUAL
58124: IFTRUE 58128
58126: GO 58139
58128: POP
// bc_type := b_armoury ; 29 :
58129: LD_ADDR_OWVAR 42
58133: PUSH
58134: LD_INT 4
58136: ST_TO_ADDR
58137: GO 58254
58139: LD_INT 29
58141: DOUBLE
58142: EQUAL
58143: IFTRUE 58147
58145: GO 58158
58147: POP
// bc_type := b_barracks ; 30 :
58148: LD_ADDR_OWVAR 42
58152: PUSH
58153: LD_INT 5
58155: ST_TO_ADDR
58156: GO 58254
58158: LD_INT 30
58160: DOUBLE
58161: EQUAL
58162: IFTRUE 58166
58164: GO 58177
58166: POP
// bc_type := b_solar_power ; 31 :
58167: LD_ADDR_OWVAR 42
58171: PUSH
58172: LD_INT 27
58174: ST_TO_ADDR
58175: GO 58254
58177: LD_INT 31
58179: DOUBLE
58180: EQUAL
58181: IFTRUE 58185
58183: GO 58196
58185: POP
// bc_type := b_oil_power ; 32 :
58186: LD_ADDR_OWVAR 42
58190: PUSH
58191: LD_INT 26
58193: ST_TO_ADDR
58194: GO 58254
58196: LD_INT 32
58198: DOUBLE
58199: EQUAL
58200: IFTRUE 58204
58202: GO 58215
58204: POP
// bc_type := b_siberite_power ; 33 :
58205: LD_ADDR_OWVAR 42
58209: PUSH
58210: LD_INT 28
58212: ST_TO_ADDR
58213: GO 58254
58215: LD_INT 33
58217: DOUBLE
58218: EQUAL
58219: IFTRUE 58223
58221: GO 58234
58223: POP
// bc_type := b_oil_mine ; 34 :
58224: LD_ADDR_OWVAR 42
58228: PUSH
58229: LD_INT 29
58231: ST_TO_ADDR
58232: GO 58254
58234: LD_INT 34
58236: DOUBLE
58237: EQUAL
58238: IFTRUE 58242
58240: GO 58253
58242: POP
// bc_type := b_siberite_mine ; end ;
58243: LD_ADDR_OWVAR 42
58247: PUSH
58248: LD_INT 30
58250: ST_TO_ADDR
58251: GO 58254
58253: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58254: LD_ADDR_VAR 0 8
58258: PUSH
58259: LD_VAR 0 5
58263: PPUSH
58264: LD_VAR 0 6
58268: PPUSH
58269: LD_VAR 0 3
58273: PPUSH
58274: CALL_OW 47
58278: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58279: LD_OWVAR 42
58283: PUSH
58284: LD_INT 32
58286: PUSH
58287: LD_INT 33
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: IN
58294: IFFALSE 58310
// PlaceWeaponTurret ( b , weapon ) ;
58296: LD_VAR 0 8
58300: PPUSH
58301: LD_VAR 0 4
58305: PPUSH
58306: CALL_OW 431
// end ;
58310: LD_VAR 0 7
58314: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58315: LD_INT 0
58317: PPUSH
58318: PPUSH
58319: PPUSH
58320: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58321: LD_ADDR_VAR 0 4
58325: PUSH
58326: LD_INT 22
58328: PUSH
58329: LD_OWVAR 2
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: LD_INT 30
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 30
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: LIST
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PPUSH
58370: CALL_OW 69
58374: ST_TO_ADDR
// if not tmp then
58375: LD_VAR 0 4
58379: NOT
58380: IFFALSE 58384
// exit ;
58382: GO 58443
// for i in tmp do
58384: LD_ADDR_VAR 0 2
58388: PUSH
58389: LD_VAR 0 4
58393: PUSH
58394: FOR_IN
58395: IFFALSE 58441
// for j = 1 to 3 do
58397: LD_ADDR_VAR 0 3
58401: PUSH
58402: DOUBLE
58403: LD_INT 1
58405: DEC
58406: ST_TO_ADDR
58407: LD_INT 3
58409: PUSH
58410: FOR_TO
58411: IFFALSE 58437
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58413: LD_VAR 0 2
58417: PPUSH
58418: CALL_OW 274
58422: PPUSH
58423: LD_VAR 0 3
58427: PPUSH
58428: LD_INT 99999
58430: PPUSH
58431: CALL_OW 277
58435: GO 58410
58437: POP
58438: POP
58439: GO 58394
58441: POP
58442: POP
// end ;
58443: LD_VAR 0 1
58447: RET
// export function hHackSetLevel10 ; var i , j ; begin
58448: LD_INT 0
58450: PPUSH
58451: PPUSH
58452: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58453: LD_ADDR_VAR 0 2
58457: PUSH
58458: LD_INT 21
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PPUSH
58468: CALL_OW 69
58472: PUSH
58473: FOR_IN
58474: IFFALSE 58526
// if IsSelected ( i ) then
58476: LD_VAR 0 2
58480: PPUSH
58481: CALL_OW 306
58485: IFFALSE 58524
// begin for j := 1 to 4 do
58487: LD_ADDR_VAR 0 3
58491: PUSH
58492: DOUBLE
58493: LD_INT 1
58495: DEC
58496: ST_TO_ADDR
58497: LD_INT 4
58499: PUSH
58500: FOR_TO
58501: IFFALSE 58522
// SetSkill ( i , j , 10 ) ;
58503: LD_VAR 0 2
58507: PPUSH
58508: LD_VAR 0 3
58512: PPUSH
58513: LD_INT 10
58515: PPUSH
58516: CALL_OW 237
58520: GO 58500
58522: POP
58523: POP
// end ;
58524: GO 58473
58526: POP
58527: POP
// end ;
58528: LD_VAR 0 1
58532: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58533: LD_INT 0
58535: PPUSH
58536: PPUSH
58537: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58538: LD_ADDR_VAR 0 2
58542: PUSH
58543: LD_INT 22
58545: PUSH
58546: LD_OWVAR 2
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 21
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PPUSH
58569: CALL_OW 69
58573: PUSH
58574: FOR_IN
58575: IFFALSE 58616
// begin for j := 1 to 4 do
58577: LD_ADDR_VAR 0 3
58581: PUSH
58582: DOUBLE
58583: LD_INT 1
58585: DEC
58586: ST_TO_ADDR
58587: LD_INT 4
58589: PUSH
58590: FOR_TO
58591: IFFALSE 58612
// SetSkill ( i , j , 10 ) ;
58593: LD_VAR 0 2
58597: PPUSH
58598: LD_VAR 0 3
58602: PPUSH
58603: LD_INT 10
58605: PPUSH
58606: CALL_OW 237
58610: GO 58590
58612: POP
58613: POP
// end ;
58614: GO 58574
58616: POP
58617: POP
// end ;
58618: LD_VAR 0 1
58622: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
58623: LD_INT 0
58625: PPUSH
// uc_side := your_side ;
58626: LD_ADDR_OWVAR 20
58630: PUSH
58631: LD_OWVAR 2
58635: ST_TO_ADDR
// uc_nation := nation ;
58636: LD_ADDR_OWVAR 21
58640: PUSH
58641: LD_VAR 0 1
58645: ST_TO_ADDR
// InitHc ;
58646: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
58650: LD_INT 0
58652: PPUSH
58653: LD_VAR 0 2
58657: PPUSH
58658: LD_VAR 0 3
58662: PPUSH
58663: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
58667: LD_VAR 0 4
58671: PPUSH
58672: LD_VAR 0 5
58676: PPUSH
58677: CALL_OW 428
58681: PUSH
58682: LD_INT 0
58684: EQUAL
58685: IFFALSE 58709
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
58687: CALL_OW 44
58691: PPUSH
58692: LD_VAR 0 4
58696: PPUSH
58697: LD_VAR 0 5
58701: PPUSH
58702: LD_INT 1
58704: PPUSH
58705: CALL_OW 48
// end ;
58709: LD_VAR 0 6
58713: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
58714: LD_INT 0
58716: PPUSH
58717: PPUSH
// uc_side := your_side ;
58718: LD_ADDR_OWVAR 20
58722: PUSH
58723: LD_OWVAR 2
58727: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
58728: LD_VAR 0 1
58732: PUSH
58733: LD_INT 1
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: LD_INT 4
58744: PUSH
58745: LD_INT 5
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: IN
58755: IFFALSE 58767
// uc_nation := nation_american else
58757: LD_ADDR_OWVAR 21
58761: PUSH
58762: LD_INT 1
58764: ST_TO_ADDR
58765: GO 58810
// if chassis in [ 11 , 12 , 13 , 14 ] then
58767: LD_VAR 0 1
58771: PUSH
58772: LD_INT 11
58774: PUSH
58775: LD_INT 12
58777: PUSH
58778: LD_INT 13
58780: PUSH
58781: LD_INT 14
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: IN
58790: IFFALSE 58802
// uc_nation := nation_arabian else
58792: LD_ADDR_OWVAR 21
58796: PUSH
58797: LD_INT 2
58799: ST_TO_ADDR
58800: GO 58810
// uc_nation := nation_russian ;
58802: LD_ADDR_OWVAR 21
58806: PUSH
58807: LD_INT 3
58809: ST_TO_ADDR
// vc_chassis := chassis ;
58810: LD_ADDR_OWVAR 37
58814: PUSH
58815: LD_VAR 0 1
58819: ST_TO_ADDR
// vc_engine := engine ;
58820: LD_ADDR_OWVAR 39
58824: PUSH
58825: LD_VAR 0 2
58829: ST_TO_ADDR
// vc_control := control ;
58830: LD_ADDR_OWVAR 38
58834: PUSH
58835: LD_VAR 0 3
58839: ST_TO_ADDR
// vc_weapon := weapon ;
58840: LD_ADDR_OWVAR 40
58844: PUSH
58845: LD_VAR 0 4
58849: ST_TO_ADDR
// un := CreateVehicle ;
58850: LD_ADDR_VAR 0 8
58854: PUSH
58855: CALL_OW 45
58859: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
58860: LD_VAR 0 8
58864: PPUSH
58865: LD_INT 0
58867: PPUSH
58868: LD_INT 5
58870: PPUSH
58871: CALL_OW 12
58875: PPUSH
58876: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
58880: LD_VAR 0 8
58884: PPUSH
58885: LD_VAR 0 5
58889: PPUSH
58890: LD_VAR 0 6
58894: PPUSH
58895: LD_INT 1
58897: PPUSH
58898: CALL_OW 48
// end ;
58902: LD_VAR 0 7
58906: RET
// export hInvincible ; every 1 do
58907: GO 58909
58909: DISABLE
// hInvincible := [ ] ;
58910: LD_ADDR_EXP 84
58914: PUSH
58915: EMPTY
58916: ST_TO_ADDR
58917: END
// every 10 do var i ;
58918: GO 58920
58920: DISABLE
58921: LD_INT 0
58923: PPUSH
// begin enable ;
58924: ENABLE
// if not hInvincible then
58925: LD_EXP 84
58929: NOT
58930: IFFALSE 58934
// exit ;
58932: GO 58978
// for i in hInvincible do
58934: LD_ADDR_VAR 0 1
58938: PUSH
58939: LD_EXP 84
58943: PUSH
58944: FOR_IN
58945: IFFALSE 58976
// if GetLives ( i ) < 1000 then
58947: LD_VAR 0 1
58951: PPUSH
58952: CALL_OW 256
58956: PUSH
58957: LD_INT 1000
58959: LESS
58960: IFFALSE 58974
// SetLives ( i , 1000 ) ;
58962: LD_VAR 0 1
58966: PPUSH
58967: LD_INT 1000
58969: PPUSH
58970: CALL_OW 234
58974: GO 58944
58976: POP
58977: POP
// end ;
58978: PPOPN 1
58980: END
// export function hHackInvincible ; var i ; begin
58981: LD_INT 0
58983: PPUSH
58984: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
58985: LD_ADDR_VAR 0 2
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: LD_INT 21
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 21
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: LIST
59017: PPUSH
59018: CALL_OW 69
59022: PUSH
59023: FOR_IN
59024: IFFALSE 59085
// if IsSelected ( i ) then
59026: LD_VAR 0 2
59030: PPUSH
59031: CALL_OW 306
59035: IFFALSE 59083
// begin if i in hInvincible then
59037: LD_VAR 0 2
59041: PUSH
59042: LD_EXP 84
59046: IN
59047: IFFALSE 59067
// hInvincible := hInvincible diff i else
59049: LD_ADDR_EXP 84
59053: PUSH
59054: LD_EXP 84
59058: PUSH
59059: LD_VAR 0 2
59063: DIFF
59064: ST_TO_ADDR
59065: GO 59083
// hInvincible := hInvincible union i ;
59067: LD_ADDR_EXP 84
59071: PUSH
59072: LD_EXP 84
59076: PUSH
59077: LD_VAR 0 2
59081: UNION
59082: ST_TO_ADDR
// end ;
59083: GO 59023
59085: POP
59086: POP
// end ;
59087: LD_VAR 0 1
59091: RET
// export function hHackInvisible ; var i , j ; begin
59092: LD_INT 0
59094: PPUSH
59095: PPUSH
59096: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59097: LD_ADDR_VAR 0 2
59101: PUSH
59102: LD_INT 21
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PPUSH
59112: CALL_OW 69
59116: PUSH
59117: FOR_IN
59118: IFFALSE 59142
// if IsSelected ( i ) then
59120: LD_VAR 0 2
59124: PPUSH
59125: CALL_OW 306
59129: IFFALSE 59140
// ComForceInvisible ( i ) ;
59131: LD_VAR 0 2
59135: PPUSH
59136: CALL_OW 496
59140: GO 59117
59142: POP
59143: POP
// end ;
59144: LD_VAR 0 1
59148: RET
// export function hHackChangeYourSide ; begin
59149: LD_INT 0
59151: PPUSH
// if your_side = 8 then
59152: LD_OWVAR 2
59156: PUSH
59157: LD_INT 8
59159: EQUAL
59160: IFFALSE 59172
// your_side := 0 else
59162: LD_ADDR_OWVAR 2
59166: PUSH
59167: LD_INT 0
59169: ST_TO_ADDR
59170: GO 59186
// your_side := your_side + 1 ;
59172: LD_ADDR_OWVAR 2
59176: PUSH
59177: LD_OWVAR 2
59181: PUSH
59182: LD_INT 1
59184: PLUS
59185: ST_TO_ADDR
// end ;
59186: LD_VAR 0 1
59190: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59191: LD_INT 0
59193: PPUSH
59194: PPUSH
59195: PPUSH
// for i in all_units do
59196: LD_ADDR_VAR 0 2
59200: PUSH
59201: LD_OWVAR 3
59205: PUSH
59206: FOR_IN
59207: IFFALSE 59285
// if IsSelected ( i ) then
59209: LD_VAR 0 2
59213: PPUSH
59214: CALL_OW 306
59218: IFFALSE 59283
// begin j := GetSide ( i ) ;
59220: LD_ADDR_VAR 0 3
59224: PUSH
59225: LD_VAR 0 2
59229: PPUSH
59230: CALL_OW 255
59234: ST_TO_ADDR
// if j = 8 then
59235: LD_VAR 0 3
59239: PUSH
59240: LD_INT 8
59242: EQUAL
59243: IFFALSE 59255
// j := 0 else
59245: LD_ADDR_VAR 0 3
59249: PUSH
59250: LD_INT 0
59252: ST_TO_ADDR
59253: GO 59269
// j := j + 1 ;
59255: LD_ADDR_VAR 0 3
59259: PUSH
59260: LD_VAR 0 3
59264: PUSH
59265: LD_INT 1
59267: PLUS
59268: ST_TO_ADDR
// SetSide ( i , j ) ;
59269: LD_VAR 0 2
59273: PPUSH
59274: LD_VAR 0 3
59278: PPUSH
59279: CALL_OW 235
// end ;
59283: GO 59206
59285: POP
59286: POP
// end ;
59287: LD_VAR 0 1
59291: RET
// export function hHackFog ; begin
59292: LD_INT 0
59294: PPUSH
// FogOff ( true ) ;
59295: LD_INT 1
59297: PPUSH
59298: CALL_OW 344
// end ;
59302: LD_VAR 0 1
59306: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59307: LD_INT 0
59309: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59310: LD_VAR 0 1
59314: PPUSH
59315: LD_VAR 0 2
59319: PPUSH
59320: LD_VAR 0 3
59324: PPUSH
59325: LD_INT 1
59327: PPUSH
59328: LD_INT 1
59330: PPUSH
59331: CALL_OW 483
// CenterOnXY ( x , y ) ;
59335: LD_VAR 0 2
59339: PPUSH
59340: LD_VAR 0 3
59344: PPUSH
59345: CALL_OW 84
// end ;
59349: LD_VAR 0 4
59353: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59354: LD_INT 0
59356: PPUSH
59357: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59358: LD_VAR 0 1
59362: NOT
59363: PUSH
59364: LD_VAR 0 2
59368: PPUSH
59369: LD_VAR 0 3
59373: PPUSH
59374: CALL_OW 488
59378: NOT
59379: OR
59380: PUSH
59381: LD_VAR 0 1
59385: PPUSH
59386: CALL_OW 266
59390: PUSH
59391: LD_INT 3
59393: NONEQUAL
59394: PUSH
59395: LD_VAR 0 1
59399: PPUSH
59400: CALL_OW 247
59404: PUSH
59405: LD_INT 1
59407: EQUAL
59408: NOT
59409: AND
59410: OR
59411: IFFALSE 59415
// exit ;
59413: GO 59564
// if GetType ( factory ) = unit_human then
59415: LD_VAR 0 1
59419: PPUSH
59420: CALL_OW 247
59424: PUSH
59425: LD_INT 1
59427: EQUAL
59428: IFFALSE 59445
// factory := IsInUnit ( factory ) ;
59430: LD_ADDR_VAR 0 1
59434: PUSH
59435: LD_VAR 0 1
59439: PPUSH
59440: CALL_OW 310
59444: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59445: LD_VAR 0 1
59449: PPUSH
59450: CALL_OW 266
59454: PUSH
59455: LD_INT 3
59457: NONEQUAL
59458: IFFALSE 59462
// exit ;
59460: GO 59564
// if HexInfo ( x , y ) = factory then
59462: LD_VAR 0 2
59466: PPUSH
59467: LD_VAR 0 3
59471: PPUSH
59472: CALL_OW 428
59476: PUSH
59477: LD_VAR 0 1
59481: EQUAL
59482: IFFALSE 59509
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
59484: LD_ADDR_EXP 85
59488: PUSH
59489: LD_EXP 85
59493: PPUSH
59494: LD_VAR 0 1
59498: PPUSH
59499: LD_INT 0
59501: PPUSH
59502: CALL_OW 1
59506: ST_TO_ADDR
59507: GO 59560
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
59509: LD_ADDR_EXP 85
59513: PUSH
59514: LD_EXP 85
59518: PPUSH
59519: LD_VAR 0 1
59523: PPUSH
59524: LD_VAR 0 1
59528: PPUSH
59529: CALL_OW 255
59533: PUSH
59534: LD_VAR 0 1
59538: PUSH
59539: LD_VAR 0 2
59543: PUSH
59544: LD_VAR 0 3
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: PPUSH
59555: CALL_OW 1
59559: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59560: CALL 59569 0 0
// end ;
59564: LD_VAR 0 4
59568: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59569: LD_INT 0
59571: PPUSH
59572: PPUSH
59573: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59574: LD_STRING resetFactoryWaypoint();
59576: PPUSH
59577: CALL_OW 559
// if factoryWaypoints then
59581: LD_EXP 85
59585: IFFALSE 59711
// begin list := PrepareArray ( factoryWaypoints ) ;
59587: LD_ADDR_VAR 0 3
59591: PUSH
59592: LD_EXP 85
59596: PPUSH
59597: CALL 44617 0 1
59601: ST_TO_ADDR
// for i := 1 to list do
59602: LD_ADDR_VAR 0 2
59606: PUSH
59607: DOUBLE
59608: LD_INT 1
59610: DEC
59611: ST_TO_ADDR
59612: LD_VAR 0 3
59616: PUSH
59617: FOR_TO
59618: IFFALSE 59709
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59620: LD_STRING setFactoryWaypointXY(
59622: PUSH
59623: LD_VAR 0 3
59627: PUSH
59628: LD_VAR 0 2
59632: ARRAY
59633: PUSH
59634: LD_INT 1
59636: ARRAY
59637: STR
59638: PUSH
59639: LD_STRING ,
59641: STR
59642: PUSH
59643: LD_VAR 0 3
59647: PUSH
59648: LD_VAR 0 2
59652: ARRAY
59653: PUSH
59654: LD_INT 2
59656: ARRAY
59657: STR
59658: PUSH
59659: LD_STRING ,
59661: STR
59662: PUSH
59663: LD_VAR 0 3
59667: PUSH
59668: LD_VAR 0 2
59672: ARRAY
59673: PUSH
59674: LD_INT 3
59676: ARRAY
59677: STR
59678: PUSH
59679: LD_STRING ,
59681: STR
59682: PUSH
59683: LD_VAR 0 3
59687: PUSH
59688: LD_VAR 0 2
59692: ARRAY
59693: PUSH
59694: LD_INT 4
59696: ARRAY
59697: STR
59698: PUSH
59699: LD_STRING )
59701: STR
59702: PPUSH
59703: CALL_OW 559
59707: GO 59617
59709: POP
59710: POP
// end ; end ;
59711: LD_VAR 0 1
59715: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59716: LD_INT 0
59718: PPUSH
// if HexInfo ( x , y ) = warehouse then
59719: LD_VAR 0 2
59723: PPUSH
59724: LD_VAR 0 3
59728: PPUSH
59729: CALL_OW 428
59733: PUSH
59734: LD_VAR 0 1
59738: EQUAL
59739: IFFALSE 59766
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59741: LD_ADDR_EXP 86
59745: PUSH
59746: LD_EXP 86
59750: PPUSH
59751: LD_VAR 0 1
59755: PPUSH
59756: LD_INT 0
59758: PPUSH
59759: CALL_OW 1
59763: ST_TO_ADDR
59764: GO 59817
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59766: LD_ADDR_EXP 86
59770: PUSH
59771: LD_EXP 86
59775: PPUSH
59776: LD_VAR 0 1
59780: PPUSH
59781: LD_VAR 0 1
59785: PPUSH
59786: CALL_OW 255
59790: PUSH
59791: LD_VAR 0 1
59795: PUSH
59796: LD_VAR 0 2
59800: PUSH
59801: LD_VAR 0 3
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: PPUSH
59812: CALL_OW 1
59816: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59817: CALL 59826 0 0
// end ;
59821: LD_VAR 0 4
59825: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59826: LD_INT 0
59828: PPUSH
59829: PPUSH
59830: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59831: LD_STRING resetWarehouseGatheringPoints();
59833: PPUSH
59834: CALL_OW 559
// if warehouseGatheringPoints then
59838: LD_EXP 86
59842: IFFALSE 59968
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59844: LD_ADDR_VAR 0 3
59848: PUSH
59849: LD_EXP 86
59853: PPUSH
59854: CALL 44617 0 1
59858: ST_TO_ADDR
// for i := 1 to list do
59859: LD_ADDR_VAR 0 2
59863: PUSH
59864: DOUBLE
59865: LD_INT 1
59867: DEC
59868: ST_TO_ADDR
59869: LD_VAR 0 3
59873: PUSH
59874: FOR_TO
59875: IFFALSE 59966
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59877: LD_STRING setWarehouseGatheringPointXY(
59879: PUSH
59880: LD_VAR 0 3
59884: PUSH
59885: LD_VAR 0 2
59889: ARRAY
59890: PUSH
59891: LD_INT 1
59893: ARRAY
59894: STR
59895: PUSH
59896: LD_STRING ,
59898: STR
59899: PUSH
59900: LD_VAR 0 3
59904: PUSH
59905: LD_VAR 0 2
59909: ARRAY
59910: PUSH
59911: LD_INT 2
59913: ARRAY
59914: STR
59915: PUSH
59916: LD_STRING ,
59918: STR
59919: PUSH
59920: LD_VAR 0 3
59924: PUSH
59925: LD_VAR 0 2
59929: ARRAY
59930: PUSH
59931: LD_INT 3
59933: ARRAY
59934: STR
59935: PUSH
59936: LD_STRING ,
59938: STR
59939: PUSH
59940: LD_VAR 0 3
59944: PUSH
59945: LD_VAR 0 2
59949: ARRAY
59950: PUSH
59951: LD_INT 4
59953: ARRAY
59954: STR
59955: PUSH
59956: LD_STRING )
59958: STR
59959: PPUSH
59960: CALL_OW 559
59964: GO 59874
59966: POP
59967: POP
// end ; end ;
59968: LD_VAR 0 1
59972: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
59973: LD_EXP 86
59977: IFFALSE 60662
59979: GO 59981
59981: DISABLE
59982: LD_INT 0
59984: PPUSH
59985: PPUSH
59986: PPUSH
59987: PPUSH
59988: PPUSH
59989: PPUSH
59990: PPUSH
59991: PPUSH
59992: PPUSH
// begin enable ;
59993: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
59994: LD_ADDR_VAR 0 3
59998: PUSH
59999: LD_EXP 86
60003: PPUSH
60004: CALL 44617 0 1
60008: ST_TO_ADDR
// if not list then
60009: LD_VAR 0 3
60013: NOT
60014: IFFALSE 60018
// exit ;
60016: GO 60662
// for i := 1 to list do
60018: LD_ADDR_VAR 0 1
60022: PUSH
60023: DOUBLE
60024: LD_INT 1
60026: DEC
60027: ST_TO_ADDR
60028: LD_VAR 0 3
60032: PUSH
60033: FOR_TO
60034: IFFALSE 60660
// begin depot := list [ i ] [ 2 ] ;
60036: LD_ADDR_VAR 0 8
60040: PUSH
60041: LD_VAR 0 3
60045: PUSH
60046: LD_VAR 0 1
60050: ARRAY
60051: PUSH
60052: LD_INT 2
60054: ARRAY
60055: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
60056: LD_ADDR_VAR 0 5
60060: PUSH
60061: LD_VAR 0 3
60065: PUSH
60066: LD_VAR 0 1
60070: ARRAY
60071: PUSH
60072: LD_INT 1
60074: ARRAY
60075: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
60076: LD_VAR 0 8
60080: PPUSH
60081: CALL_OW 301
60085: PUSH
60086: LD_VAR 0 5
60090: PUSH
60091: LD_VAR 0 8
60095: PPUSH
60096: CALL_OW 255
60100: NONEQUAL
60101: OR
60102: IFFALSE 60131
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
60104: LD_ADDR_EXP 86
60108: PUSH
60109: LD_EXP 86
60113: PPUSH
60114: LD_VAR 0 8
60118: PPUSH
60119: LD_INT 0
60121: PPUSH
60122: CALL_OW 1
60126: ST_TO_ADDR
// exit ;
60127: POP
60128: POP
60129: GO 60662
// end ; x := list [ i ] [ 3 ] ;
60131: LD_ADDR_VAR 0 6
60135: PUSH
60136: LD_VAR 0 3
60140: PUSH
60141: LD_VAR 0 1
60145: ARRAY
60146: PUSH
60147: LD_INT 3
60149: ARRAY
60150: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
60151: LD_ADDR_VAR 0 7
60155: PUSH
60156: LD_VAR 0 3
60160: PUSH
60161: LD_VAR 0 1
60165: ARRAY
60166: PUSH
60167: LD_INT 4
60169: ARRAY
60170: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
60171: LD_ADDR_VAR 0 9
60175: PUSH
60176: LD_VAR 0 6
60180: PPUSH
60181: LD_VAR 0 7
60185: PPUSH
60186: LD_INT 16
60188: PPUSH
60189: CALL 43205 0 3
60193: ST_TO_ADDR
// if not cratesNearbyPoint then
60194: LD_VAR 0 9
60198: NOT
60199: IFFALSE 60205
// exit ;
60201: POP
60202: POP
60203: GO 60662
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
60205: LD_ADDR_VAR 0 4
60209: PUSH
60210: LD_INT 22
60212: PUSH
60213: LD_VAR 0 5
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 3
60224: PUSH
60225: LD_INT 60
60227: PUSH
60228: EMPTY
60229: LIST
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 91
60237: PUSH
60238: LD_VAR 0 8
60242: PUSH
60243: LD_INT 6
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: LD_INT 25
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 25
60266: PUSH
60267: LD_INT 16
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: LIST
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: PPUSH
60285: CALL_OW 69
60289: PUSH
60290: LD_VAR 0 8
60294: PPUSH
60295: CALL_OW 313
60299: PPUSH
60300: LD_INT 3
60302: PUSH
60303: LD_INT 60
60305: PUSH
60306: EMPTY
60307: LIST
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: LD_INT 25
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 25
60328: PUSH
60329: LD_INT 16
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: LIST
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PPUSH
60345: CALL_OW 72
60349: UNION
60350: ST_TO_ADDR
// if tmp then
60351: LD_VAR 0 4
60355: IFFALSE 60435
// begin tmp := ShrinkArray ( tmp , 3 ) ;
60357: LD_ADDR_VAR 0 4
60361: PUSH
60362: LD_VAR 0 4
60366: PPUSH
60367: LD_INT 3
60369: PPUSH
60370: CALL 41174 0 2
60374: ST_TO_ADDR
// for j in tmp do
60375: LD_ADDR_VAR 0 2
60379: PUSH
60380: LD_VAR 0 4
60384: PUSH
60385: FOR_IN
60386: IFFALSE 60429
// begin if IsInUnit ( j ) then
60388: LD_VAR 0 2
60392: PPUSH
60393: CALL_OW 310
60397: IFFALSE 60408
// ComExit ( j ) ;
60399: LD_VAR 0 2
60403: PPUSH
60404: CALL 41257 0 1
// AddComCollect ( j , x , y ) ;
60408: LD_VAR 0 2
60412: PPUSH
60413: LD_VAR 0 6
60417: PPUSH
60418: LD_VAR 0 7
60422: PPUSH
60423: CALL_OW 177
// end ;
60427: GO 60385
60429: POP
60430: POP
// exit ;
60431: POP
60432: POP
60433: GO 60662
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
60435: LD_ADDR_VAR 0 4
60439: PUSH
60440: LD_INT 22
60442: PUSH
60443: LD_VAR 0 5
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 91
60454: PUSH
60455: LD_VAR 0 8
60459: PUSH
60460: LD_INT 8
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 2
60470: PUSH
60471: LD_INT 34
60473: PUSH
60474: LD_INT 12
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 34
60483: PUSH
60484: LD_INT 51
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 34
60493: PUSH
60494: LD_INT 32
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 34
60503: PUSH
60504: LD_INT 89
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: LIST
60522: PPUSH
60523: CALL_OW 69
60527: ST_TO_ADDR
// if tmp then
60528: LD_VAR 0 4
60532: IFFALSE 60658
// begin for j in tmp do
60534: LD_ADDR_VAR 0 2
60538: PUSH
60539: LD_VAR 0 4
60543: PUSH
60544: FOR_IN
60545: IFFALSE 60656
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
60547: LD_VAR 0 2
60551: PPUSH
60552: CALL_OW 262
60556: PUSH
60557: LD_INT 3
60559: EQUAL
60560: PUSH
60561: LD_VAR 0 2
60565: PPUSH
60566: CALL_OW 261
60570: PUSH
60571: LD_INT 20
60573: GREATER
60574: OR
60575: PUSH
60576: LD_VAR 0 2
60580: PPUSH
60581: CALL_OW 314
60585: NOT
60586: AND
60587: PUSH
60588: LD_VAR 0 2
60592: PPUSH
60593: CALL_OW 263
60597: PUSH
60598: LD_INT 1
60600: NONEQUAL
60601: PUSH
60602: LD_VAR 0 2
60606: PPUSH
60607: CALL_OW 311
60611: OR
60612: AND
60613: IFFALSE 60654
// begin ComCollect ( j , x , y ) ;
60615: LD_VAR 0 2
60619: PPUSH
60620: LD_VAR 0 6
60624: PPUSH
60625: LD_VAR 0 7
60629: PPUSH
60630: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
60634: LD_VAR 0 2
60638: PPUSH
60639: LD_VAR 0 8
60643: PPUSH
60644: CALL_OW 172
// exit ;
60648: POP
60649: POP
60650: POP
60651: POP
60652: GO 60662
// end ;
60654: GO 60544
60656: POP
60657: POP
// end ; end ;
60658: GO 60033
60660: POP
60661: POP
// end ; end_of_file
60662: PPOPN 9
60664: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60665: LD_VAR 0 1
60669: PUSH
60670: LD_INT 200
60672: DOUBLE
60673: GREATEREQUAL
60674: IFFALSE 60682
60676: LD_INT 299
60678: DOUBLE
60679: LESSEQUAL
60680: IFTRUE 60684
60682: GO 60716
60684: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60685: LD_VAR 0 1
60689: PPUSH
60690: LD_VAR 0 2
60694: PPUSH
60695: LD_VAR 0 3
60699: PPUSH
60700: LD_VAR 0 4
60704: PPUSH
60705: LD_VAR 0 5
60709: PPUSH
60710: CALL 61204 0 5
60714: GO 60793
60716: LD_INT 300
60718: DOUBLE
60719: GREATEREQUAL
60720: IFFALSE 60728
60722: LD_INT 399
60724: DOUBLE
60725: LESSEQUAL
60726: IFTRUE 60730
60728: GO 60792
60730: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60731: LD_VAR 0 1
60735: PPUSH
60736: LD_VAR 0 2
60740: PPUSH
60741: LD_VAR 0 3
60745: PPUSH
60746: LD_VAR 0 4
60750: PPUSH
60751: LD_VAR 0 5
60755: PPUSH
60756: LD_VAR 0 6
60760: PPUSH
60761: LD_VAR 0 7
60765: PPUSH
60766: LD_VAR 0 8
60770: PPUSH
60771: LD_VAR 0 9
60775: PPUSH
60776: LD_VAR 0 10
60780: PPUSH
60781: LD_VAR 0 11
60785: PPUSH
60786: CALL 57374 0 11
60790: GO 60793
60792: POP
// end ;
60793: PPOPN 11
60795: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
60796: LD_VAR 0 1
60800: PPUSH
60801: LD_VAR 0 2
60805: PPUSH
60806: LD_VAR 0 3
60810: PPUSH
60811: LD_VAR 0 4
60815: PPUSH
60816: LD_VAR 0 5
60820: PPUSH
60821: CALL 60940 0 5
// end ; end_of_file
60825: PPOPN 5
60827: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
60828: LD_INT 0
60830: PPUSH
60831: PPUSH
60832: PPUSH
60833: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
60834: LD_VAR 0 1
60838: PPUSH
60839: CALL_OW 264
60843: PUSH
60844: LD_INT 91
60846: EQUAL
60847: IFFALSE 60919
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60849: LD_INT 68
60851: PPUSH
60852: LD_VAR 0 1
60856: PPUSH
60857: CALL_OW 255
60861: PPUSH
60862: CALL_OW 321
60866: PUSH
60867: LD_INT 2
60869: EQUAL
60870: IFFALSE 60882
// eff := 70 else
60872: LD_ADDR_VAR 0 4
60876: PUSH
60877: LD_INT 70
60879: ST_TO_ADDR
60880: GO 60890
// eff := 30 ;
60882: LD_ADDR_VAR 0 4
60886: PUSH
60887: LD_INT 30
60889: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60890: LD_VAR 0 1
60894: PPUSH
60895: CALL_OW 250
60899: PPUSH
60900: LD_VAR 0 1
60904: PPUSH
60905: CALL_OW 251
60909: PPUSH
60910: LD_VAR 0 4
60914: PPUSH
60915: CALL_OW 495
// end ; end ;
60919: LD_VAR 0 2
60923: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60924: LD_INT 0
60926: PPUSH
// end ;
60927: LD_VAR 0 4
60931: RET
// export function SOS_Command ( cmd ) ; begin
60932: LD_INT 0
60934: PPUSH
// end ;
60935: LD_VAR 0 2
60939: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60940: LD_INT 0
60942: PPUSH
// end ;
60943: LD_VAR 0 6
60947: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
60948: LD_INT 0
60950: PPUSH
60951: PPUSH
// if not vehicle or not factory then
60952: LD_VAR 0 1
60956: NOT
60957: PUSH
60958: LD_VAR 0 2
60962: NOT
60963: OR
60964: IFFALSE 60968
// exit ;
60966: GO 61199
// if factoryWaypoints >= factory then
60968: LD_EXP 85
60972: PUSH
60973: LD_VAR 0 2
60977: GREATEREQUAL
60978: IFFALSE 61199
// if factoryWaypoints [ factory ] then
60980: LD_EXP 85
60984: PUSH
60985: LD_VAR 0 2
60989: ARRAY
60990: IFFALSE 61199
// begin if GetControl ( vehicle ) = control_manual then
60992: LD_VAR 0 1
60996: PPUSH
60997: CALL_OW 263
61001: PUSH
61002: LD_INT 1
61004: EQUAL
61005: IFFALSE 61086
// begin driver := IsDrivenBy ( vehicle ) ;
61007: LD_ADDR_VAR 0 4
61011: PUSH
61012: LD_VAR 0 1
61016: PPUSH
61017: CALL_OW 311
61021: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61022: LD_VAR 0 4
61026: PPUSH
61027: LD_EXP 85
61031: PUSH
61032: LD_VAR 0 2
61036: ARRAY
61037: PUSH
61038: LD_INT 3
61040: ARRAY
61041: PPUSH
61042: LD_EXP 85
61046: PUSH
61047: LD_VAR 0 2
61051: ARRAY
61052: PUSH
61053: LD_INT 4
61055: ARRAY
61056: PPUSH
61057: CALL_OW 171
// AddComExitVehicle ( driver ) ;
61061: LD_VAR 0 4
61065: PPUSH
61066: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
61070: LD_VAR 0 4
61074: PPUSH
61075: LD_VAR 0 2
61079: PPUSH
61080: CALL_OW 180
// end else
61084: GO 61199
// if GetControl ( vehicle ) = control_remote then
61086: LD_VAR 0 1
61090: PPUSH
61091: CALL_OW 263
61095: PUSH
61096: LD_INT 2
61098: EQUAL
61099: IFFALSE 61160
// begin wait ( 0 0$2 ) ;
61101: LD_INT 70
61103: PPUSH
61104: CALL_OW 67
// if Connect ( vehicle ) then
61108: LD_VAR 0 1
61112: PPUSH
61113: CALL 11497 0 1
61117: IFFALSE 61158
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61119: LD_VAR 0 1
61123: PPUSH
61124: LD_EXP 85
61128: PUSH
61129: LD_VAR 0 2
61133: ARRAY
61134: PUSH
61135: LD_INT 3
61137: ARRAY
61138: PPUSH
61139: LD_EXP 85
61143: PUSH
61144: LD_VAR 0 2
61148: ARRAY
61149: PUSH
61150: LD_INT 4
61152: ARRAY
61153: PPUSH
61154: CALL_OW 171
// end else
61158: GO 61199
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61160: LD_VAR 0 1
61164: PPUSH
61165: LD_EXP 85
61169: PUSH
61170: LD_VAR 0 2
61174: ARRAY
61175: PUSH
61176: LD_INT 3
61178: ARRAY
61179: PPUSH
61180: LD_EXP 85
61184: PUSH
61185: LD_VAR 0 2
61189: ARRAY
61190: PUSH
61191: LD_INT 4
61193: ARRAY
61194: PPUSH
61195: CALL_OW 171
// end ; end ;
61199: LD_VAR 0 3
61203: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61204: LD_INT 0
61206: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61207: LD_VAR 0 1
61211: PUSH
61212: LD_INT 250
61214: EQUAL
61215: PUSH
61216: LD_VAR 0 2
61220: PPUSH
61221: CALL_OW 264
61225: PUSH
61226: LD_INT 81
61228: EQUAL
61229: AND
61230: IFFALSE 61251
// MinerPlaceMine ( unit , x , y ) ;
61232: LD_VAR 0 2
61236: PPUSH
61237: LD_VAR 0 4
61241: PPUSH
61242: LD_VAR 0 5
61246: PPUSH
61247: CALL 63636 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61251: LD_VAR 0 1
61255: PUSH
61256: LD_INT 251
61258: EQUAL
61259: PUSH
61260: LD_VAR 0 2
61264: PPUSH
61265: CALL_OW 264
61269: PUSH
61270: LD_INT 81
61272: EQUAL
61273: AND
61274: IFFALSE 61295
// MinerDetonateMine ( unit , x , y ) ;
61276: LD_VAR 0 2
61280: PPUSH
61281: LD_VAR 0 4
61285: PPUSH
61286: LD_VAR 0 5
61290: PPUSH
61291: CALL 63911 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61295: LD_VAR 0 1
61299: PUSH
61300: LD_INT 252
61302: EQUAL
61303: PUSH
61304: LD_VAR 0 2
61308: PPUSH
61309: CALL_OW 264
61313: PUSH
61314: LD_INT 81
61316: EQUAL
61317: AND
61318: IFFALSE 61339
// MinerCreateMinefield ( unit , x , y ) ;
61320: LD_VAR 0 2
61324: PPUSH
61325: LD_VAR 0 4
61329: PPUSH
61330: LD_VAR 0 5
61334: PPUSH
61335: CALL 64328 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61339: LD_VAR 0 1
61343: PUSH
61344: LD_INT 253
61346: EQUAL
61347: PUSH
61348: LD_VAR 0 2
61352: PPUSH
61353: CALL_OW 257
61357: PUSH
61358: LD_INT 5
61360: EQUAL
61361: AND
61362: IFFALSE 61383
// ComBinocular ( unit , x , y ) ;
61364: LD_VAR 0 2
61368: PPUSH
61369: LD_VAR 0 4
61373: PPUSH
61374: LD_VAR 0 5
61378: PPUSH
61379: CALL 64697 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61383: LD_VAR 0 1
61387: PUSH
61388: LD_INT 254
61390: EQUAL
61391: PUSH
61392: LD_VAR 0 2
61396: PPUSH
61397: CALL_OW 264
61401: PUSH
61402: LD_INT 99
61404: EQUAL
61405: AND
61406: PUSH
61407: LD_VAR 0 3
61411: PPUSH
61412: CALL_OW 263
61416: PUSH
61417: LD_INT 3
61419: EQUAL
61420: AND
61421: IFFALSE 61437
// HackDestroyVehicle ( unit , selectedUnit ) ;
61423: LD_VAR 0 2
61427: PPUSH
61428: LD_VAR 0 3
61432: PPUSH
61433: CALL 63000 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61437: LD_VAR 0 1
61441: PUSH
61442: LD_INT 255
61444: EQUAL
61445: PUSH
61446: LD_VAR 0 2
61450: PPUSH
61451: CALL_OW 264
61455: PUSH
61456: LD_INT 14
61458: PUSH
61459: LD_INT 53
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: IN
61466: AND
61467: PUSH
61468: LD_VAR 0 4
61472: PPUSH
61473: LD_VAR 0 5
61477: PPUSH
61478: CALL_OW 488
61482: AND
61483: IFFALSE 61507
// CutTreeXYR ( unit , x , y , 12 ) ;
61485: LD_VAR 0 2
61489: PPUSH
61490: LD_VAR 0 4
61494: PPUSH
61495: LD_VAR 0 5
61499: PPUSH
61500: LD_INT 12
61502: PPUSH
61503: CALL 61570 0 4
// if cmd = 256 then
61507: LD_VAR 0 1
61511: PUSH
61512: LD_INT 256
61514: EQUAL
61515: IFFALSE 61536
// SetFactoryWaypoint ( unit , x , y ) ;
61517: LD_VAR 0 2
61521: PPUSH
61522: LD_VAR 0 4
61526: PPUSH
61527: LD_VAR 0 5
61531: PPUSH
61532: CALL 59354 0 3
// if cmd = 257 then
61536: LD_VAR 0 1
61540: PUSH
61541: LD_INT 257
61543: EQUAL
61544: IFFALSE 61565
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61546: LD_VAR 0 2
61550: PPUSH
61551: LD_VAR 0 4
61555: PPUSH
61556: LD_VAR 0 5
61560: PPUSH
61561: CALL 59716 0 3
// end ;
61565: LD_VAR 0 6
61569: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61570: LD_INT 0
61572: PPUSH
61573: PPUSH
61574: PPUSH
61575: PPUSH
61576: PPUSH
61577: PPUSH
61578: PPUSH
61579: PPUSH
61580: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
61581: LD_VAR 0 1
61585: NOT
61586: PUSH
61587: LD_VAR 0 2
61591: PPUSH
61592: LD_VAR 0 3
61596: PPUSH
61597: CALL_OW 488
61601: NOT
61602: OR
61603: PUSH
61604: LD_VAR 0 4
61608: NOT
61609: OR
61610: IFFALSE 61614
// exit ;
61612: GO 61954
// list := [ ] ;
61614: LD_ADDR_VAR 0 13
61618: PUSH
61619: EMPTY
61620: ST_TO_ADDR
// if x - r < 0 then
61621: LD_VAR 0 2
61625: PUSH
61626: LD_VAR 0 4
61630: MINUS
61631: PUSH
61632: LD_INT 0
61634: LESS
61635: IFFALSE 61647
// min_x := 0 else
61637: LD_ADDR_VAR 0 7
61641: PUSH
61642: LD_INT 0
61644: ST_TO_ADDR
61645: GO 61663
// min_x := x - r ;
61647: LD_ADDR_VAR 0 7
61651: PUSH
61652: LD_VAR 0 2
61656: PUSH
61657: LD_VAR 0 4
61661: MINUS
61662: ST_TO_ADDR
// if y - r < 0 then
61663: LD_VAR 0 3
61667: PUSH
61668: LD_VAR 0 4
61672: MINUS
61673: PUSH
61674: LD_INT 0
61676: LESS
61677: IFFALSE 61689
// min_y := 0 else
61679: LD_ADDR_VAR 0 8
61683: PUSH
61684: LD_INT 0
61686: ST_TO_ADDR
61687: GO 61705
// min_y := y - r ;
61689: LD_ADDR_VAR 0 8
61693: PUSH
61694: LD_VAR 0 3
61698: PUSH
61699: LD_VAR 0 4
61703: MINUS
61704: ST_TO_ADDR
// max_x := x + r ;
61705: LD_ADDR_VAR 0 9
61709: PUSH
61710: LD_VAR 0 2
61714: PUSH
61715: LD_VAR 0 4
61719: PLUS
61720: ST_TO_ADDR
// max_y := y + r ;
61721: LD_ADDR_VAR 0 10
61725: PUSH
61726: LD_VAR 0 3
61730: PUSH
61731: LD_VAR 0 4
61735: PLUS
61736: ST_TO_ADDR
// for _x = min_x to max_x do
61737: LD_ADDR_VAR 0 11
61741: PUSH
61742: DOUBLE
61743: LD_VAR 0 7
61747: DEC
61748: ST_TO_ADDR
61749: LD_VAR 0 9
61753: PUSH
61754: FOR_TO
61755: IFFALSE 61872
// for _y = min_y to max_y do
61757: LD_ADDR_VAR 0 12
61761: PUSH
61762: DOUBLE
61763: LD_VAR 0 8
61767: DEC
61768: ST_TO_ADDR
61769: LD_VAR 0 10
61773: PUSH
61774: FOR_TO
61775: IFFALSE 61868
// begin if not ValidHex ( _x , _y ) then
61777: LD_VAR 0 11
61781: PPUSH
61782: LD_VAR 0 12
61786: PPUSH
61787: CALL_OW 488
61791: NOT
61792: IFFALSE 61796
// continue ;
61794: GO 61774
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61796: LD_VAR 0 11
61800: PPUSH
61801: LD_VAR 0 12
61805: PPUSH
61806: CALL_OW 351
61810: PUSH
61811: LD_VAR 0 11
61815: PPUSH
61816: LD_VAR 0 12
61820: PPUSH
61821: CALL_OW 554
61825: AND
61826: IFFALSE 61866
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61828: LD_ADDR_VAR 0 13
61832: PUSH
61833: LD_VAR 0 13
61837: PPUSH
61838: LD_VAR 0 13
61842: PUSH
61843: LD_INT 1
61845: PLUS
61846: PPUSH
61847: LD_VAR 0 11
61851: PUSH
61852: LD_VAR 0 12
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PPUSH
61861: CALL_OW 2
61865: ST_TO_ADDR
// end ;
61866: GO 61774
61868: POP
61869: POP
61870: GO 61754
61872: POP
61873: POP
// if not list then
61874: LD_VAR 0 13
61878: NOT
61879: IFFALSE 61883
// exit ;
61881: GO 61954
// for i in list do
61883: LD_ADDR_VAR 0 6
61887: PUSH
61888: LD_VAR 0 13
61892: PUSH
61893: FOR_IN
61894: IFFALSE 61952
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61896: LD_VAR 0 1
61900: PPUSH
61901: LD_STRING M
61903: PUSH
61904: LD_VAR 0 6
61908: PUSH
61909: LD_INT 1
61911: ARRAY
61912: PUSH
61913: LD_VAR 0 6
61917: PUSH
61918: LD_INT 2
61920: ARRAY
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: PUSH
61943: EMPTY
61944: LIST
61945: PPUSH
61946: CALL_OW 447
61950: GO 61893
61952: POP
61953: POP
// end ;
61954: LD_VAR 0 5
61958: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61959: LD_EXP 88
61963: NOT
61964: IFFALSE 62014
61966: GO 61968
61968: DISABLE
// begin initHack := true ;
61969: LD_ADDR_EXP 88
61973: PUSH
61974: LD_INT 1
61976: ST_TO_ADDR
// hackTanks := [ ] ;
61977: LD_ADDR_EXP 89
61981: PUSH
61982: EMPTY
61983: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61984: LD_ADDR_EXP 90
61988: PUSH
61989: EMPTY
61990: ST_TO_ADDR
// hackLimit := 3 ;
61991: LD_ADDR_EXP 91
61995: PUSH
61996: LD_INT 3
61998: ST_TO_ADDR
// hackDist := 12 ;
61999: LD_ADDR_EXP 92
62003: PUSH
62004: LD_INT 12
62006: ST_TO_ADDR
// hackCounter := [ ] ;
62007: LD_ADDR_EXP 93
62011: PUSH
62012: EMPTY
62013: ST_TO_ADDR
// end ;
62014: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62015: LD_EXP 88
62019: PUSH
62020: LD_INT 34
62022: PUSH
62023: LD_INT 99
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PPUSH
62030: CALL_OW 69
62034: AND
62035: IFFALSE 62288
62037: GO 62039
62039: DISABLE
62040: LD_INT 0
62042: PPUSH
62043: PPUSH
// begin enable ;
62044: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62045: LD_ADDR_VAR 0 1
62049: PUSH
62050: LD_INT 34
62052: PUSH
62053: LD_INT 99
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PPUSH
62060: CALL_OW 69
62064: PUSH
62065: FOR_IN
62066: IFFALSE 62286
// begin if not i in hackTanks then
62068: LD_VAR 0 1
62072: PUSH
62073: LD_EXP 89
62077: IN
62078: NOT
62079: IFFALSE 62162
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62081: LD_ADDR_EXP 89
62085: PUSH
62086: LD_EXP 89
62090: PPUSH
62091: LD_EXP 89
62095: PUSH
62096: LD_INT 1
62098: PLUS
62099: PPUSH
62100: LD_VAR 0 1
62104: PPUSH
62105: CALL_OW 1
62109: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62110: LD_ADDR_EXP 90
62114: PUSH
62115: LD_EXP 90
62119: PPUSH
62120: LD_EXP 90
62124: PUSH
62125: LD_INT 1
62127: PLUS
62128: PPUSH
62129: EMPTY
62130: PPUSH
62131: CALL_OW 1
62135: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62136: LD_ADDR_EXP 93
62140: PUSH
62141: LD_EXP 93
62145: PPUSH
62146: LD_EXP 93
62150: PUSH
62151: LD_INT 1
62153: PLUS
62154: PPUSH
62155: EMPTY
62156: PPUSH
62157: CALL_OW 1
62161: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62162: LD_VAR 0 1
62166: PPUSH
62167: CALL_OW 302
62171: NOT
62172: IFFALSE 62185
// begin HackUnlinkAll ( i ) ;
62174: LD_VAR 0 1
62178: PPUSH
62179: CALL 62291 0 1
// continue ;
62183: GO 62065
// end ; HackCheckCapturedStatus ( i ) ;
62185: LD_VAR 0 1
62189: PPUSH
62190: CALL 62734 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62194: LD_ADDR_VAR 0 2
62198: PUSH
62199: LD_INT 81
62201: PUSH
62202: LD_VAR 0 1
62206: PPUSH
62207: CALL_OW 255
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 33
62218: PUSH
62219: LD_INT 3
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 91
62228: PUSH
62229: LD_VAR 0 1
62233: PUSH
62234: LD_EXP 92
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 50
62246: PUSH
62247: EMPTY
62248: LIST
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: PPUSH
62256: CALL_OW 69
62260: ST_TO_ADDR
// if not tmp then
62261: LD_VAR 0 2
62265: NOT
62266: IFFALSE 62270
// continue ;
62268: GO 62065
// HackLink ( i , tmp ) ;
62270: LD_VAR 0 1
62274: PPUSH
62275: LD_VAR 0 2
62279: PPUSH
62280: CALL 62427 0 2
// end ;
62284: GO 62065
62286: POP
62287: POP
// end ;
62288: PPOPN 2
62290: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62291: LD_INT 0
62293: PPUSH
62294: PPUSH
62295: PPUSH
// if not hack in hackTanks then
62296: LD_VAR 0 1
62300: PUSH
62301: LD_EXP 89
62305: IN
62306: NOT
62307: IFFALSE 62311
// exit ;
62309: GO 62422
// index := GetElementIndex ( hackTanks , hack ) ;
62311: LD_ADDR_VAR 0 4
62315: PUSH
62316: LD_EXP 89
62320: PPUSH
62321: LD_VAR 0 1
62325: PPUSH
62326: CALL 8313 0 2
62330: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62331: LD_EXP 90
62335: PUSH
62336: LD_VAR 0 4
62340: ARRAY
62341: IFFALSE 62422
// begin for i in hackTanksCaptured [ index ] do
62343: LD_ADDR_VAR 0 3
62347: PUSH
62348: LD_EXP 90
62352: PUSH
62353: LD_VAR 0 4
62357: ARRAY
62358: PUSH
62359: FOR_IN
62360: IFFALSE 62386
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62362: LD_VAR 0 3
62366: PUSH
62367: LD_INT 1
62369: ARRAY
62370: PPUSH
62371: LD_VAR 0 3
62375: PUSH
62376: LD_INT 2
62378: ARRAY
62379: PPUSH
62380: CALL_OW 235
62384: GO 62359
62386: POP
62387: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62388: LD_ADDR_EXP 90
62392: PUSH
62393: LD_EXP 90
62397: PPUSH
62398: LD_VAR 0 4
62402: PPUSH
62403: EMPTY
62404: PPUSH
62405: CALL_OW 1
62409: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62410: LD_VAR 0 1
62414: PPUSH
62415: LD_INT 0
62417: PPUSH
62418: CALL_OW 505
// end ; end ;
62422: LD_VAR 0 2
62426: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62427: LD_INT 0
62429: PPUSH
62430: PPUSH
62431: PPUSH
// if not hack in hackTanks or not vehicles then
62432: LD_VAR 0 1
62436: PUSH
62437: LD_EXP 89
62441: IN
62442: NOT
62443: PUSH
62444: LD_VAR 0 2
62448: NOT
62449: OR
62450: IFFALSE 62454
// exit ;
62452: GO 62729
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62454: LD_ADDR_VAR 0 2
62458: PUSH
62459: LD_VAR 0 1
62463: PPUSH
62464: LD_VAR 0 2
62468: PPUSH
62469: LD_INT 1
62471: PPUSH
62472: LD_INT 1
62474: PPUSH
62475: CALL 8963 0 4
62479: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62480: LD_ADDR_VAR 0 5
62484: PUSH
62485: LD_EXP 89
62489: PPUSH
62490: LD_VAR 0 1
62494: PPUSH
62495: CALL 8313 0 2
62499: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62500: LD_EXP 90
62504: PUSH
62505: LD_VAR 0 5
62509: ARRAY
62510: PUSH
62511: LD_EXP 91
62515: LESS
62516: IFFALSE 62705
// begin for i := 1 to vehicles do
62518: LD_ADDR_VAR 0 4
62522: PUSH
62523: DOUBLE
62524: LD_INT 1
62526: DEC
62527: ST_TO_ADDR
62528: LD_VAR 0 2
62532: PUSH
62533: FOR_TO
62534: IFFALSE 62703
// begin if hackTanksCaptured [ index ] = hackLimit then
62536: LD_EXP 90
62540: PUSH
62541: LD_VAR 0 5
62545: ARRAY
62546: PUSH
62547: LD_EXP 91
62551: EQUAL
62552: IFFALSE 62556
// break ;
62554: GO 62703
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62556: LD_ADDR_EXP 93
62560: PUSH
62561: LD_EXP 93
62565: PPUSH
62566: LD_VAR 0 5
62570: PPUSH
62571: LD_EXP 93
62575: PUSH
62576: LD_VAR 0 5
62580: ARRAY
62581: PUSH
62582: LD_INT 1
62584: PLUS
62585: PPUSH
62586: CALL_OW 1
62590: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62591: LD_ADDR_EXP 90
62595: PUSH
62596: LD_EXP 90
62600: PPUSH
62601: LD_VAR 0 5
62605: PUSH
62606: LD_EXP 90
62610: PUSH
62611: LD_VAR 0 5
62615: ARRAY
62616: PUSH
62617: LD_INT 1
62619: PLUS
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PPUSH
62625: LD_VAR 0 2
62629: PUSH
62630: LD_VAR 0 4
62634: ARRAY
62635: PUSH
62636: LD_VAR 0 2
62640: PUSH
62641: LD_VAR 0 4
62645: ARRAY
62646: PPUSH
62647: CALL_OW 255
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PPUSH
62656: CALL 8528 0 3
62660: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62661: LD_VAR 0 2
62665: PUSH
62666: LD_VAR 0 4
62670: ARRAY
62671: PPUSH
62672: LD_VAR 0 1
62676: PPUSH
62677: CALL_OW 255
62681: PPUSH
62682: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62686: LD_VAR 0 2
62690: PUSH
62691: LD_VAR 0 4
62695: ARRAY
62696: PPUSH
62697: CALL_OW 141
// end ;
62701: GO 62533
62703: POP
62704: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62705: LD_VAR 0 1
62709: PPUSH
62710: LD_EXP 90
62714: PUSH
62715: LD_VAR 0 5
62719: ARRAY
62720: PUSH
62721: LD_INT 0
62723: PLUS
62724: PPUSH
62725: CALL_OW 505
// end ;
62729: LD_VAR 0 3
62733: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62734: LD_INT 0
62736: PPUSH
62737: PPUSH
62738: PPUSH
62739: PPUSH
// if not hack in hackTanks then
62740: LD_VAR 0 1
62744: PUSH
62745: LD_EXP 89
62749: IN
62750: NOT
62751: IFFALSE 62755
// exit ;
62753: GO 62995
// index := GetElementIndex ( hackTanks , hack ) ;
62755: LD_ADDR_VAR 0 4
62759: PUSH
62760: LD_EXP 89
62764: PPUSH
62765: LD_VAR 0 1
62769: PPUSH
62770: CALL 8313 0 2
62774: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62775: LD_ADDR_VAR 0 3
62779: PUSH
62780: DOUBLE
62781: LD_EXP 90
62785: PUSH
62786: LD_VAR 0 4
62790: ARRAY
62791: INC
62792: ST_TO_ADDR
62793: LD_INT 1
62795: PUSH
62796: FOR_DOWNTO
62797: IFFALSE 62969
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62799: LD_ADDR_VAR 0 5
62803: PUSH
62804: LD_EXP 90
62808: PUSH
62809: LD_VAR 0 4
62813: ARRAY
62814: PUSH
62815: LD_VAR 0 3
62819: ARRAY
62820: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62821: LD_VAR 0 5
62825: PUSH
62826: LD_INT 1
62828: ARRAY
62829: PPUSH
62830: CALL_OW 302
62834: NOT
62835: PUSH
62836: LD_VAR 0 5
62840: PUSH
62841: LD_INT 1
62843: ARRAY
62844: PPUSH
62845: CALL_OW 255
62849: PUSH
62850: LD_VAR 0 1
62854: PPUSH
62855: CALL_OW 255
62859: NONEQUAL
62860: OR
62861: IFFALSE 62967
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62863: LD_VAR 0 5
62867: PUSH
62868: LD_INT 1
62870: ARRAY
62871: PPUSH
62872: CALL_OW 305
62876: PUSH
62877: LD_VAR 0 5
62881: PUSH
62882: LD_INT 1
62884: ARRAY
62885: PPUSH
62886: CALL_OW 255
62890: PUSH
62891: LD_VAR 0 1
62895: PPUSH
62896: CALL_OW 255
62900: EQUAL
62901: AND
62902: IFFALSE 62926
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62904: LD_VAR 0 5
62908: PUSH
62909: LD_INT 1
62911: ARRAY
62912: PPUSH
62913: LD_VAR 0 5
62917: PUSH
62918: LD_INT 2
62920: ARRAY
62921: PPUSH
62922: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62926: LD_ADDR_EXP 90
62930: PUSH
62931: LD_EXP 90
62935: PPUSH
62936: LD_VAR 0 4
62940: PPUSH
62941: LD_EXP 90
62945: PUSH
62946: LD_VAR 0 4
62950: ARRAY
62951: PPUSH
62952: LD_VAR 0 3
62956: PPUSH
62957: CALL_OW 3
62961: PPUSH
62962: CALL_OW 1
62966: ST_TO_ADDR
// end ; end ;
62967: GO 62796
62969: POP
62970: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62971: LD_VAR 0 1
62975: PPUSH
62976: LD_EXP 90
62980: PUSH
62981: LD_VAR 0 4
62985: ARRAY
62986: PUSH
62987: LD_INT 0
62989: PLUS
62990: PPUSH
62991: CALL_OW 505
// end ;
62995: LD_VAR 0 2
62999: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63000: LD_INT 0
63002: PPUSH
63003: PPUSH
63004: PPUSH
63005: PPUSH
// if not hack in hackTanks then
63006: LD_VAR 0 1
63010: PUSH
63011: LD_EXP 89
63015: IN
63016: NOT
63017: IFFALSE 63021
// exit ;
63019: GO 63106
// index := GetElementIndex ( hackTanks , hack ) ;
63021: LD_ADDR_VAR 0 5
63025: PUSH
63026: LD_EXP 89
63030: PPUSH
63031: LD_VAR 0 1
63035: PPUSH
63036: CALL 8313 0 2
63040: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63041: LD_ADDR_VAR 0 4
63045: PUSH
63046: DOUBLE
63047: LD_INT 1
63049: DEC
63050: ST_TO_ADDR
63051: LD_EXP 90
63055: PUSH
63056: LD_VAR 0 5
63060: ARRAY
63061: PUSH
63062: FOR_TO
63063: IFFALSE 63104
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63065: LD_EXP 90
63069: PUSH
63070: LD_VAR 0 5
63074: ARRAY
63075: PUSH
63076: LD_VAR 0 4
63080: ARRAY
63081: PUSH
63082: LD_INT 1
63084: ARRAY
63085: PUSH
63086: LD_VAR 0 2
63090: EQUAL
63091: IFFALSE 63102
// KillUnit ( vehicle ) ;
63093: LD_VAR 0 2
63097: PPUSH
63098: CALL_OW 66
63102: GO 63062
63104: POP
63105: POP
// end ;
63106: LD_VAR 0 3
63110: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63111: LD_EXP 94
63115: NOT
63116: IFFALSE 63151
63118: GO 63120
63120: DISABLE
// begin initMiner := true ;
63121: LD_ADDR_EXP 94
63125: PUSH
63126: LD_INT 1
63128: ST_TO_ADDR
// minersList := [ ] ;
63129: LD_ADDR_EXP 95
63133: PUSH
63134: EMPTY
63135: ST_TO_ADDR
// minerMinesList := [ ] ;
63136: LD_ADDR_EXP 96
63140: PUSH
63141: EMPTY
63142: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63143: LD_ADDR_EXP 97
63147: PUSH
63148: LD_INT 5
63150: ST_TO_ADDR
// end ;
63151: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63152: LD_EXP 94
63156: PUSH
63157: LD_INT 34
63159: PUSH
63160: LD_INT 81
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PPUSH
63167: CALL_OW 69
63171: AND
63172: IFFALSE 63633
63174: GO 63176
63176: DISABLE
63177: LD_INT 0
63179: PPUSH
63180: PPUSH
63181: PPUSH
63182: PPUSH
// begin enable ;
63183: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63184: LD_ADDR_VAR 0 1
63188: PUSH
63189: LD_INT 34
63191: PUSH
63192: LD_INT 81
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PPUSH
63199: CALL_OW 69
63203: PUSH
63204: FOR_IN
63205: IFFALSE 63277
// begin if not i in minersList then
63207: LD_VAR 0 1
63211: PUSH
63212: LD_EXP 95
63216: IN
63217: NOT
63218: IFFALSE 63275
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63220: LD_ADDR_EXP 95
63224: PUSH
63225: LD_EXP 95
63229: PPUSH
63230: LD_EXP 95
63234: PUSH
63235: LD_INT 1
63237: PLUS
63238: PPUSH
63239: LD_VAR 0 1
63243: PPUSH
63244: CALL_OW 1
63248: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63249: LD_ADDR_EXP 96
63253: PUSH
63254: LD_EXP 96
63258: PPUSH
63259: LD_EXP 96
63263: PUSH
63264: LD_INT 1
63266: PLUS
63267: PPUSH
63268: EMPTY
63269: PPUSH
63270: CALL_OW 1
63274: ST_TO_ADDR
// end end ;
63275: GO 63204
63277: POP
63278: POP
// for i := minerMinesList downto 1 do
63279: LD_ADDR_VAR 0 1
63283: PUSH
63284: DOUBLE
63285: LD_EXP 96
63289: INC
63290: ST_TO_ADDR
63291: LD_INT 1
63293: PUSH
63294: FOR_DOWNTO
63295: IFFALSE 63631
// begin if IsLive ( minersList [ i ] ) then
63297: LD_EXP 95
63301: PUSH
63302: LD_VAR 0 1
63306: ARRAY
63307: PPUSH
63308: CALL_OW 300
63312: IFFALSE 63340
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63314: LD_EXP 95
63318: PUSH
63319: LD_VAR 0 1
63323: ARRAY
63324: PPUSH
63325: LD_EXP 96
63329: PUSH
63330: LD_VAR 0 1
63334: ARRAY
63335: PPUSH
63336: CALL_OW 505
// if not minerMinesList [ i ] then
63340: LD_EXP 96
63344: PUSH
63345: LD_VAR 0 1
63349: ARRAY
63350: NOT
63351: IFFALSE 63355
// continue ;
63353: GO 63294
// for j := minerMinesList [ i ] downto 1 do
63355: LD_ADDR_VAR 0 2
63359: PUSH
63360: DOUBLE
63361: LD_EXP 96
63365: PUSH
63366: LD_VAR 0 1
63370: ARRAY
63371: INC
63372: ST_TO_ADDR
63373: LD_INT 1
63375: PUSH
63376: FOR_DOWNTO
63377: IFFALSE 63627
// begin side := GetSide ( minersList [ i ] ) ;
63379: LD_ADDR_VAR 0 3
63383: PUSH
63384: LD_EXP 95
63388: PUSH
63389: LD_VAR 0 1
63393: ARRAY
63394: PPUSH
63395: CALL_OW 255
63399: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63400: LD_ADDR_VAR 0 4
63404: PUSH
63405: LD_EXP 96
63409: PUSH
63410: LD_VAR 0 1
63414: ARRAY
63415: PUSH
63416: LD_VAR 0 2
63420: ARRAY
63421: PUSH
63422: LD_INT 1
63424: ARRAY
63425: PPUSH
63426: LD_EXP 96
63430: PUSH
63431: LD_VAR 0 1
63435: ARRAY
63436: PUSH
63437: LD_VAR 0 2
63441: ARRAY
63442: PUSH
63443: LD_INT 2
63445: ARRAY
63446: PPUSH
63447: CALL_OW 428
63451: ST_TO_ADDR
// if not tmp then
63452: LD_VAR 0 4
63456: NOT
63457: IFFALSE 63461
// continue ;
63459: GO 63376
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63461: LD_VAR 0 4
63465: PUSH
63466: LD_INT 81
63468: PUSH
63469: LD_VAR 0 3
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PPUSH
63478: CALL_OW 69
63482: IN
63483: PUSH
63484: LD_EXP 96
63488: PUSH
63489: LD_VAR 0 1
63493: ARRAY
63494: PUSH
63495: LD_VAR 0 2
63499: ARRAY
63500: PUSH
63501: LD_INT 1
63503: ARRAY
63504: PPUSH
63505: LD_EXP 96
63509: PUSH
63510: LD_VAR 0 1
63514: ARRAY
63515: PUSH
63516: LD_VAR 0 2
63520: ARRAY
63521: PUSH
63522: LD_INT 2
63524: ARRAY
63525: PPUSH
63526: CALL_OW 458
63530: AND
63531: IFFALSE 63625
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63533: LD_EXP 96
63537: PUSH
63538: LD_VAR 0 1
63542: ARRAY
63543: PUSH
63544: LD_VAR 0 2
63548: ARRAY
63549: PUSH
63550: LD_INT 1
63552: ARRAY
63553: PPUSH
63554: LD_EXP 96
63558: PUSH
63559: LD_VAR 0 1
63563: ARRAY
63564: PUSH
63565: LD_VAR 0 2
63569: ARRAY
63570: PUSH
63571: LD_INT 2
63573: ARRAY
63574: PPUSH
63575: LD_VAR 0 3
63579: PPUSH
63580: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63584: LD_ADDR_EXP 96
63588: PUSH
63589: LD_EXP 96
63593: PPUSH
63594: LD_VAR 0 1
63598: PPUSH
63599: LD_EXP 96
63603: PUSH
63604: LD_VAR 0 1
63608: ARRAY
63609: PPUSH
63610: LD_VAR 0 2
63614: PPUSH
63615: CALL_OW 3
63619: PPUSH
63620: CALL_OW 1
63624: ST_TO_ADDR
// end ; end ;
63625: GO 63376
63627: POP
63628: POP
// end ;
63629: GO 63294
63631: POP
63632: POP
// end ;
63633: PPOPN 4
63635: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63636: LD_INT 0
63638: PPUSH
63639: PPUSH
// result := false ;
63640: LD_ADDR_VAR 0 4
63644: PUSH
63645: LD_INT 0
63647: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63648: LD_VAR 0 1
63652: PPUSH
63653: CALL_OW 264
63657: PUSH
63658: LD_INT 81
63660: EQUAL
63661: NOT
63662: IFFALSE 63666
// exit ;
63664: GO 63906
// index := GetElementIndex ( minersList , unit ) ;
63666: LD_ADDR_VAR 0 5
63670: PUSH
63671: LD_EXP 95
63675: PPUSH
63676: LD_VAR 0 1
63680: PPUSH
63681: CALL 8313 0 2
63685: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63686: LD_EXP 96
63690: PUSH
63691: LD_VAR 0 5
63695: ARRAY
63696: PUSH
63697: LD_EXP 97
63701: GREATEREQUAL
63702: IFFALSE 63706
// exit ;
63704: GO 63906
// ComMoveXY ( unit , x , y ) ;
63706: LD_VAR 0 1
63710: PPUSH
63711: LD_VAR 0 2
63715: PPUSH
63716: LD_VAR 0 3
63720: PPUSH
63721: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63725: LD_INT 35
63727: PPUSH
63728: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63732: LD_VAR 0 1
63736: PPUSH
63737: LD_VAR 0 2
63741: PPUSH
63742: LD_VAR 0 3
63746: PPUSH
63747: CALL 39668 0 3
63751: NOT
63752: PUSH
63753: LD_VAR 0 1
63757: PPUSH
63758: CALL_OW 314
63762: AND
63763: IFFALSE 63767
// exit ;
63765: GO 63906
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63767: LD_VAR 0 2
63771: PPUSH
63772: LD_VAR 0 3
63776: PPUSH
63777: CALL_OW 428
63781: PUSH
63782: LD_VAR 0 1
63786: EQUAL
63787: PUSH
63788: LD_VAR 0 1
63792: PPUSH
63793: CALL_OW 314
63797: NOT
63798: AND
63799: IFFALSE 63725
// PlaySoundXY ( x , y , PlantMine ) ;
63801: LD_VAR 0 2
63805: PPUSH
63806: LD_VAR 0 3
63810: PPUSH
63811: LD_STRING PlantMine
63813: PPUSH
63814: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63818: LD_VAR 0 2
63822: PPUSH
63823: LD_VAR 0 3
63827: PPUSH
63828: LD_VAR 0 1
63832: PPUSH
63833: CALL_OW 255
63837: PPUSH
63838: LD_INT 0
63840: PPUSH
63841: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63845: LD_ADDR_EXP 96
63849: PUSH
63850: LD_EXP 96
63854: PPUSH
63855: LD_VAR 0 5
63859: PUSH
63860: LD_EXP 96
63864: PUSH
63865: LD_VAR 0 5
63869: ARRAY
63870: PUSH
63871: LD_INT 1
63873: PLUS
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PPUSH
63879: LD_VAR 0 2
63883: PUSH
63884: LD_VAR 0 3
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PPUSH
63893: CALL 8528 0 3
63897: ST_TO_ADDR
// result := true ;
63898: LD_ADDR_VAR 0 4
63902: PUSH
63903: LD_INT 1
63905: ST_TO_ADDR
// end ;
63906: LD_VAR 0 4
63910: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63911: LD_INT 0
63913: PPUSH
63914: PPUSH
63915: PPUSH
// if not unit in minersList then
63916: LD_VAR 0 1
63920: PUSH
63921: LD_EXP 95
63925: IN
63926: NOT
63927: IFFALSE 63931
// exit ;
63929: GO 64323
// index := GetElementIndex ( minersList , unit ) ;
63931: LD_ADDR_VAR 0 6
63935: PUSH
63936: LD_EXP 95
63940: PPUSH
63941: LD_VAR 0 1
63945: PPUSH
63946: CALL 8313 0 2
63950: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63951: LD_ADDR_VAR 0 5
63955: PUSH
63956: DOUBLE
63957: LD_EXP 96
63961: PUSH
63962: LD_VAR 0 6
63966: ARRAY
63967: INC
63968: ST_TO_ADDR
63969: LD_INT 1
63971: PUSH
63972: FOR_DOWNTO
63973: IFFALSE 64134
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63975: LD_EXP 96
63979: PUSH
63980: LD_VAR 0 6
63984: ARRAY
63985: PUSH
63986: LD_VAR 0 5
63990: ARRAY
63991: PUSH
63992: LD_INT 1
63994: ARRAY
63995: PUSH
63996: LD_VAR 0 2
64000: EQUAL
64001: PUSH
64002: LD_EXP 96
64006: PUSH
64007: LD_VAR 0 6
64011: ARRAY
64012: PUSH
64013: LD_VAR 0 5
64017: ARRAY
64018: PUSH
64019: LD_INT 2
64021: ARRAY
64022: PUSH
64023: LD_VAR 0 3
64027: EQUAL
64028: AND
64029: IFFALSE 64132
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64031: LD_EXP 96
64035: PUSH
64036: LD_VAR 0 6
64040: ARRAY
64041: PUSH
64042: LD_VAR 0 5
64046: ARRAY
64047: PUSH
64048: LD_INT 1
64050: ARRAY
64051: PPUSH
64052: LD_EXP 96
64056: PUSH
64057: LD_VAR 0 6
64061: ARRAY
64062: PUSH
64063: LD_VAR 0 5
64067: ARRAY
64068: PUSH
64069: LD_INT 2
64071: ARRAY
64072: PPUSH
64073: LD_VAR 0 1
64077: PPUSH
64078: CALL_OW 255
64082: PPUSH
64083: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64087: LD_ADDR_EXP 96
64091: PUSH
64092: LD_EXP 96
64096: PPUSH
64097: LD_VAR 0 6
64101: PPUSH
64102: LD_EXP 96
64106: PUSH
64107: LD_VAR 0 6
64111: ARRAY
64112: PPUSH
64113: LD_VAR 0 5
64117: PPUSH
64118: CALL_OW 3
64122: PPUSH
64123: CALL_OW 1
64127: ST_TO_ADDR
// exit ;
64128: POP
64129: POP
64130: GO 64323
// end ; end ;
64132: GO 63972
64134: POP
64135: POP
// for i := minerMinesList [ index ] downto 1 do
64136: LD_ADDR_VAR 0 5
64140: PUSH
64141: DOUBLE
64142: LD_EXP 96
64146: PUSH
64147: LD_VAR 0 6
64151: ARRAY
64152: INC
64153: ST_TO_ADDR
64154: LD_INT 1
64156: PUSH
64157: FOR_DOWNTO
64158: IFFALSE 64321
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64160: LD_EXP 96
64164: PUSH
64165: LD_VAR 0 6
64169: ARRAY
64170: PUSH
64171: LD_VAR 0 5
64175: ARRAY
64176: PUSH
64177: LD_INT 1
64179: ARRAY
64180: PPUSH
64181: LD_EXP 96
64185: PUSH
64186: LD_VAR 0 6
64190: ARRAY
64191: PUSH
64192: LD_VAR 0 5
64196: ARRAY
64197: PUSH
64198: LD_INT 2
64200: ARRAY
64201: PPUSH
64202: LD_VAR 0 2
64206: PPUSH
64207: LD_VAR 0 3
64211: PPUSH
64212: CALL_OW 298
64216: PUSH
64217: LD_INT 6
64219: LESS
64220: IFFALSE 64319
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64222: LD_EXP 96
64226: PUSH
64227: LD_VAR 0 6
64231: ARRAY
64232: PUSH
64233: LD_VAR 0 5
64237: ARRAY
64238: PUSH
64239: LD_INT 1
64241: ARRAY
64242: PPUSH
64243: LD_EXP 96
64247: PUSH
64248: LD_VAR 0 6
64252: ARRAY
64253: PUSH
64254: LD_VAR 0 5
64258: ARRAY
64259: PUSH
64260: LD_INT 2
64262: ARRAY
64263: PPUSH
64264: LD_VAR 0 1
64268: PPUSH
64269: CALL_OW 255
64273: PPUSH
64274: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64278: LD_ADDR_EXP 96
64282: PUSH
64283: LD_EXP 96
64287: PPUSH
64288: LD_VAR 0 6
64292: PPUSH
64293: LD_EXP 96
64297: PUSH
64298: LD_VAR 0 6
64302: ARRAY
64303: PPUSH
64304: LD_VAR 0 5
64308: PPUSH
64309: CALL_OW 3
64313: PPUSH
64314: CALL_OW 1
64318: ST_TO_ADDR
// end ; end ;
64319: GO 64157
64321: POP
64322: POP
// end ;
64323: LD_VAR 0 4
64327: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64328: LD_INT 0
64330: PPUSH
64331: PPUSH
64332: PPUSH
64333: PPUSH
64334: PPUSH
64335: PPUSH
64336: PPUSH
64337: PPUSH
64338: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64339: LD_VAR 0 1
64343: PPUSH
64344: CALL_OW 264
64348: PUSH
64349: LD_INT 81
64351: EQUAL
64352: NOT
64353: PUSH
64354: LD_VAR 0 1
64358: PUSH
64359: LD_EXP 95
64363: IN
64364: NOT
64365: OR
64366: IFFALSE 64370
// exit ;
64368: GO 64692
// index := GetElementIndex ( minersList , unit ) ;
64370: LD_ADDR_VAR 0 6
64374: PUSH
64375: LD_EXP 95
64379: PPUSH
64380: LD_VAR 0 1
64384: PPUSH
64385: CALL 8313 0 2
64389: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64390: LD_ADDR_VAR 0 8
64394: PUSH
64395: LD_EXP 97
64399: PUSH
64400: LD_EXP 96
64404: PUSH
64405: LD_VAR 0 6
64409: ARRAY
64410: MINUS
64411: ST_TO_ADDR
// if not minesFreeAmount then
64412: LD_VAR 0 8
64416: NOT
64417: IFFALSE 64421
// exit ;
64419: GO 64692
// tmp := [ ] ;
64421: LD_ADDR_VAR 0 7
64425: PUSH
64426: EMPTY
64427: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64428: LD_ADDR_VAR 0 5
64432: PUSH
64433: DOUBLE
64434: LD_INT 1
64436: DEC
64437: ST_TO_ADDR
64438: LD_VAR 0 8
64442: PUSH
64443: FOR_TO
64444: IFFALSE 64639
// begin _d := rand ( 0 , 5 ) ;
64446: LD_ADDR_VAR 0 11
64450: PUSH
64451: LD_INT 0
64453: PPUSH
64454: LD_INT 5
64456: PPUSH
64457: CALL_OW 12
64461: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64462: LD_ADDR_VAR 0 12
64466: PUSH
64467: LD_INT 2
64469: PPUSH
64470: LD_INT 6
64472: PPUSH
64473: CALL_OW 12
64477: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64478: LD_ADDR_VAR 0 9
64482: PUSH
64483: LD_VAR 0 2
64487: PPUSH
64488: LD_VAR 0 11
64492: PPUSH
64493: LD_VAR 0 12
64497: PPUSH
64498: CALL_OW 272
64502: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64503: LD_ADDR_VAR 0 10
64507: PUSH
64508: LD_VAR 0 3
64512: PPUSH
64513: LD_VAR 0 11
64517: PPUSH
64518: LD_VAR 0 12
64522: PPUSH
64523: CALL_OW 273
64527: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64528: LD_VAR 0 9
64532: PPUSH
64533: LD_VAR 0 10
64537: PPUSH
64538: CALL_OW 488
64542: PUSH
64543: LD_VAR 0 9
64547: PUSH
64548: LD_VAR 0 10
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_VAR 0 7
64561: IN
64562: NOT
64563: AND
64564: PUSH
64565: LD_VAR 0 9
64569: PPUSH
64570: LD_VAR 0 10
64574: PPUSH
64575: CALL_OW 458
64579: NOT
64580: AND
64581: IFFALSE 64623
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64583: LD_ADDR_VAR 0 7
64587: PUSH
64588: LD_VAR 0 7
64592: PPUSH
64593: LD_VAR 0 7
64597: PUSH
64598: LD_INT 1
64600: PLUS
64601: PPUSH
64602: LD_VAR 0 9
64606: PUSH
64607: LD_VAR 0 10
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PPUSH
64616: CALL_OW 1
64620: ST_TO_ADDR
64621: GO 64637
// i := i - 1 ;
64623: LD_ADDR_VAR 0 5
64627: PUSH
64628: LD_VAR 0 5
64632: PUSH
64633: LD_INT 1
64635: MINUS
64636: ST_TO_ADDR
// end ;
64637: GO 64443
64639: POP
64640: POP
// for i in tmp do
64641: LD_ADDR_VAR 0 5
64645: PUSH
64646: LD_VAR 0 7
64650: PUSH
64651: FOR_IN
64652: IFFALSE 64690
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64654: LD_VAR 0 1
64658: PPUSH
64659: LD_VAR 0 5
64663: PUSH
64664: LD_INT 1
64666: ARRAY
64667: PPUSH
64668: LD_VAR 0 5
64672: PUSH
64673: LD_INT 2
64675: ARRAY
64676: PPUSH
64677: CALL 63636 0 3
64681: NOT
64682: IFFALSE 64688
// exit ;
64684: POP
64685: POP
64686: GO 64692
64688: GO 64651
64690: POP
64691: POP
// end ;
64692: LD_VAR 0 4
64696: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
64697: LD_INT 0
64699: PPUSH
64700: PPUSH
64701: PPUSH
64702: PPUSH
64703: PPUSH
64704: PPUSH
64705: PPUSH
// if not GetClass ( unit ) = class_sniper then
64706: LD_VAR 0 1
64710: PPUSH
64711: CALL_OW 257
64715: PUSH
64716: LD_INT 5
64718: EQUAL
64719: NOT
64720: IFFALSE 64724
// exit ;
64722: GO 65112
// dist := 8 ;
64724: LD_ADDR_VAR 0 5
64728: PUSH
64729: LD_INT 8
64731: ST_TO_ADDR
// viewRange := 12 ;
64732: LD_ADDR_VAR 0 7
64736: PUSH
64737: LD_INT 12
64739: ST_TO_ADDR
// side := GetSide ( unit ) ;
64740: LD_ADDR_VAR 0 6
64744: PUSH
64745: LD_VAR 0 1
64749: PPUSH
64750: CALL_OW 255
64754: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64755: LD_INT 61
64757: PPUSH
64758: LD_VAR 0 6
64762: PPUSH
64763: CALL_OW 321
64767: PUSH
64768: LD_INT 2
64770: EQUAL
64771: IFFALSE 64781
// viewRange := 16 ;
64773: LD_ADDR_VAR 0 7
64777: PUSH
64778: LD_INT 16
64780: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64781: LD_VAR 0 1
64785: PPUSH
64786: LD_VAR 0 2
64790: PPUSH
64791: LD_VAR 0 3
64795: PPUSH
64796: CALL_OW 297
64800: PUSH
64801: LD_VAR 0 5
64805: GREATER
64806: IFFALSE 64885
// begin ComMoveXY ( unit , x , y ) ;
64808: LD_VAR 0 1
64812: PPUSH
64813: LD_VAR 0 2
64817: PPUSH
64818: LD_VAR 0 3
64822: PPUSH
64823: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64827: LD_INT 35
64829: PPUSH
64830: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64834: LD_VAR 0 1
64838: PPUSH
64839: LD_VAR 0 2
64843: PPUSH
64844: LD_VAR 0 3
64848: PPUSH
64849: CALL 39668 0 3
64853: NOT
64854: IFFALSE 64858
// exit ;
64856: GO 65112
// until GetDistUnitXY ( unit , x , y ) < dist ;
64858: LD_VAR 0 1
64862: PPUSH
64863: LD_VAR 0 2
64867: PPUSH
64868: LD_VAR 0 3
64872: PPUSH
64873: CALL_OW 297
64877: PUSH
64878: LD_VAR 0 5
64882: LESS
64883: IFFALSE 64827
// end ; ComTurnXY ( unit , x , y ) ;
64885: LD_VAR 0 1
64889: PPUSH
64890: LD_VAR 0 2
64894: PPUSH
64895: LD_VAR 0 3
64899: PPUSH
64900: CALL_OW 118
// wait ( 5 ) ;
64904: LD_INT 5
64906: PPUSH
64907: CALL_OW 67
// _d := GetDir ( unit ) ;
64911: LD_ADDR_VAR 0 10
64915: PUSH
64916: LD_VAR 0 1
64920: PPUSH
64921: CALL_OW 254
64925: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
64926: LD_ADDR_VAR 0 8
64930: PUSH
64931: LD_VAR 0 1
64935: PPUSH
64936: CALL_OW 250
64940: PPUSH
64941: LD_VAR 0 10
64945: PPUSH
64946: LD_VAR 0 5
64950: PPUSH
64951: CALL_OW 272
64955: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
64956: LD_ADDR_VAR 0 9
64960: PUSH
64961: LD_VAR 0 1
64965: PPUSH
64966: CALL_OW 251
64970: PPUSH
64971: LD_VAR 0 10
64975: PPUSH
64976: LD_VAR 0 5
64980: PPUSH
64981: CALL_OW 273
64985: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64986: LD_VAR 0 8
64990: PPUSH
64991: LD_VAR 0 9
64995: PPUSH
64996: CALL_OW 488
65000: NOT
65001: IFFALSE 65005
// exit ;
65003: GO 65112
// ComAnimCustom ( unit , 1 ) ;
65005: LD_VAR 0 1
65009: PPUSH
65010: LD_INT 1
65012: PPUSH
65013: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65017: LD_VAR 0 8
65021: PPUSH
65022: LD_VAR 0 9
65026: PPUSH
65027: LD_VAR 0 6
65031: PPUSH
65032: LD_VAR 0 7
65036: PPUSH
65037: CALL_OW 330
// repeat wait ( 1 ) ;
65041: LD_INT 1
65043: PPUSH
65044: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
65048: LD_VAR 0 1
65052: PPUSH
65053: CALL_OW 316
65057: PUSH
65058: LD_VAR 0 1
65062: PPUSH
65063: CALL_OW 314
65067: OR
65068: PUSH
65069: LD_VAR 0 1
65073: PPUSH
65074: CALL_OW 302
65078: NOT
65079: OR
65080: PUSH
65081: LD_VAR 0 1
65085: PPUSH
65086: CALL_OW 301
65090: OR
65091: IFFALSE 65041
// RemoveSeeing ( _x , _y , side ) ;
65093: LD_VAR 0 8
65097: PPUSH
65098: LD_VAR 0 9
65102: PPUSH
65103: LD_VAR 0 6
65107: PPUSH
65108: CALL_OW 331
// end ;
65112: LD_VAR 0 4
65116: RET
